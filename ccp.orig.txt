;; Function switch_core_media_negotiate_sdp (switch_core_media_negotiate_sdp)

Immediate_uses: 

match_1 : -->5 uses.
match_2 = PHI <match_1(258), match_1(259), match_1(260), match_1(261), match_673(262)>
match_2 = PHI <match_1(258), match_1(259), match_1(260), match_1(261), match_673(262)>
match_2 = PHI <match_1(258), match_1(259), match_1(260), match_1(261), match_673(262)>
match_2 = PHI <match_1(258), match_1(259), match_1(260), match_1(261), match_673(262)>
D.44950_663 = match_1 != 0;
# DEBUG match => match_1

match_2 : -->4 uses.
match_3 = PHI <match_2(263), match_2(264), match_2(266), match_684(267)>
match_3 = PHI <match_2(263), match_2(264), match_2(266), match_684(267)>
match_3 = PHI <match_2(263), match_2(264), match_2(266), match_684(267)>
D.44950_674 = match_2 != 0;
# DEBUG match => match_2

match_3 : -->3 uses.
match_6 = PHI <match_3(275), match_5(278)>
match_4 = PHI <match_5(243), match_3(268), match_694(274), match_709(276)>
if (match_3 != 0)
# DEBUG match => match_3

match_4 : --> single use.
match_5 = PHI <match_8(241), match_4(277)>
# DEBUG match => match_4

match_5 : -->2 uses.
match_4 = PHI <match_5(243), match_3(268), match_694(274), match_709(276)>
match_6 = PHI <match_3(275), match_5(278)>
# DEBUG match => match_5

match_6 : -->2 uses.
match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>
match_9 = PHI <match_6(279), match_8(281)>
# DEBUG match => match_6

match_7 : --> single use.
match_8 = PHI <match_16(197), match_7(280)>
# DEBUG match => match_7

match_8 : -->7 uses.
match_5 = PHI <match_8(241), match_4(277)>
match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>
if (match_8 != 0)
match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>
match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>
match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>
match_9 = PHI <match_6(279), match_8(281)>
# DEBUG match => match_8

match_9 : --> single use.
match_10 = PHI <match_9(282), match_716(283)>
# DEBUG match => match_9

match_10 : -->2 uses.
match_11 = PHI <match_10(284), match_741(294), match_10(296)>
match_11 = PHI <match_10(284), match_741(294), match_10(296)>
# DEBUG match => match_10

match_11 : --> single use.
match_12 = PHI <match_11(297), match_745(322)>
# DEBUG match => match_11

match_12 : -->3 uses.
match_13 = PHI <match_12(323), match_12(333), match_825(334)>
match_13 = PHI <match_12(323), match_12(333), match_825(334)>
if (match_12 != 0)
# DEBUG match => match_12

match_13 : -->6 uses.
match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
# DEBUG match => match_13

match_14 : -->2 uses.
match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
# DEBUG match => match_14

match_15 : --> single use.
match_16 = PHI <match_148(101), match_15(449)>
# DEBUG match => match_15

match_16 : -->7 uses.
match_14 = PHI <match_16(437), match_1089(438)>
D.45307_1086 = match_16 == 0;
match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
match_8 = PHI <match_16(197), match_7(280)>
match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>
# DEBUG match => match_16

match_17 : --> single use.
match_1095 = match_17;
# DEBUG match => match_17

best_te_18 : --> single use.
best_te_19 = PHI <best_te_18(204), best_te_20(210), best_te_20(212), best_te_20(214), best_te_20(279)>
# DEBUG best_te => best_te_18

best_te_19 : --> single use.
best_te_20 = PHI <best_te_23(197), best_te_19(280)>
# DEBUG best_te => best_te_19

best_te_20 : -->9 uses.
best_te_21 = PHI <best_te_20(335), best_te_20(337), best_te_833(338)>
best_te_21 = PHI <best_te_20(335), best_te_20(337), best_te_833(338)>
if (best_te_20 == 0)
best_te_19 = PHI <best_te_18(204), best_te_20(210), best_te_20(212), best_te_20(214), best_te_20(279)>
best_te_19 = PHI <best_te_18(204), best_te_20(210), best_te_20(212), best_te_20(214), best_te_20(279)>
best_te_19 = PHI <best_te_18(204), best_te_20(210), best_te_20(212), best_te_20(214), best_te_20(279)>
best_te_19 = PHI <best_te_18(204), best_te_20(210), best_te_20(212), best_te_20(214), best_te_20(279)>
best_te_18 = PHI <best_te_20(202), best_te_568(203)>
if (best_te_20 == 0)
# DEBUG best_te => best_te_20

best_te_21 : -->12 uses.
best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
D.44471_845->te = best_te_21;
best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
D.44857_843 = (int) best_te_21;
switch_rtp_set_telephony_event (D.44605_841, best_te_21);
best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
D.44857_837 = (int) best_te_21;
D.44471_835->te = best_te_21;
if (best_te_21 != 0)
# DEBUG best_te => best_te_21

best_te_22 : --> single use.
best_te_23 = PHI <best_te_149(101), best_te_22(449)>
# DEBUG best_te => best_te_22

best_te_23 : -->6 uses.
best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
best_te_20 = PHI <best_te_23(197), best_te_19(280)>
# DEBUG best_te => best_te_23

cng_pt_24 : --> single use.
cng_pt_25 = PHI <cng_pt_27(197), cng_pt_24(280)>
# DEBUG cng_pt => cng_pt_24

cng_pt_25 : -->11 uses.
cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
cng_pt_24 = PHI <cng_pt_25(204), cng_pt_573(210), cng_pt_25(212), cng_pt_25(214), cng_pt_25(279)>
cng_pt_24 = PHI <cng_pt_25(204), cng_pt_573(210), cng_pt_25(212), cng_pt_25(214), cng_pt_25(279)>
cng_pt_24 = PHI <cng_pt_25(204), cng_pt_573(210), cng_pt_25(212), cng_pt_25(214), cng_pt_25(279)>
if (cng_pt_25 == 0)
cng_pt_24 = PHI <cng_pt_25(204), cng_pt_573(210), cng_pt_25(212), cng_pt_25(214), cng_pt_25(279)>
# DEBUG cng_pt => cng_pt_25

cng_pt_26 : --> single use.
cng_pt_27 = PHI <cng_pt_151(101), cng_pt_26(449)>
# DEBUG cng_pt => cng_pt_26

cng_pt_27 : -->7 uses.
D.44471_1094->cng_pt = cng_pt_27;
cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
cng_pt_25 = PHI <cng_pt_27(197), cng_pt_24(280)>
# DEBUG cng_pt => cng_pt_27

m_28 : -->33 uses.
m_1093 = m_28->m_next;
check_ice (smh_186, 1, sdp_198, m_28);
D.44697_1061 = m_28->m_port;
D.44666_970 = m_28->m_proto;
attr_893 = m_28->m_attributes;
attr_886 = m_28->m_attributes;
map_883 = m_28->m_rtpmaps;
connection_881 = m_28->m_connections;
D.44546_880 = m_28->m_connections;
D.44697_873 = m_28->m_port;
D.44681_872 = m_28->m_type;
check_ice (smh_186, 0, sdp_198, m_28);
D.44697_797 = m_28->m_port;
map_559 = m_28->m_rtpmaps;
connection_556 = m_28->m_connections;
D.44546_555 = m_28->m_connections;
D.44666_539 = m_28->m_proto;
attr_507 = m_28->m_attributes;
attr_500 = m_28->m_attributes;
D.44697_494 = m_28->m_port;
D.44681_493 = m_28->m_type;
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
D.44697_393 = m_28->m_port;
D.44681_392 = m_28->m_type;
D.44666_390 = m_28->m_proto;
D.44681_387 = m_28->m_type;
D.44666_386 = m_28->m_proto;
D.44681_383 = m_28->m_type;
D.44675_379 = m_28->m_proto;
D.44669_376 = m_28->m_proto_name;
D.44669_375 = m_28->m_proto_name;
D.44666_373 = m_28->m_proto;
if (m_28 != 0B)
# DEBUG m => m_28

attr_29 : -->11 uses.
attr_334 = attr_29->a_next;
D.44619_332 = attr_29->a_value;
D.44590_330 = attr_29->a_name;
D.44619_328 = attr_29->a_value;
D.44590_326 = attr_29->a_name;
D.44590_323 = attr_29->a_name;
D.44590_314 = attr_29->a_name;
D.44590_310 = attr_29->a_name;
D.44590_306 = attr_29->a_name;
D.44590_304 = attr_29->a_name;
if (attr_29 != 0B)
# DEBUG attr => attr_29

attr_30 : -->4 uses.
attr_506 = attr_30->a_next;
D.44619_503 = attr_30->a_value;
D.44590_501 = attr_30->a_name;
if (attr_30 != 0B)
# DEBUG attr => attr_30

attr_31 : -->15 uses.
attr_548 = attr_31->a_next;
crypto_544 = attr_31->a_value;
D.44619_531 = attr_31->a_value;
D.44590_529 = attr_31->a_name;
D.44619_527 = attr_31->a_value;
D.44619_526 = attr_31->a_value;
D.44590_524 = attr_31->a_name;
D.44619_522 = attr_31->a_value;
D.44619_521 = attr_31->a_value;
D.44590_519 = attr_31->a_name;
D.44619_513 = attr_31->a_value;
D.44619_512 = attr_31->a_value;
D.44619_510 = attr_31->a_value;
D.44590_508 = attr_31->a_name;
if (attr_31 != 0B)
# DEBUG attr => attr_31

attr_32 : -->4 uses.
attr_892 = attr_32->a_next;
D.44619_889 = attr_32->a_value;
D.44590_887 = attr_32->a_name;
if (attr_32 != 0B)
# DEBUG attr => attr_32

attr_33 : -->16 uses.
attr_978 = attr_33->a_next;
crypto_975 = attr_33->a_value;
D.44619_962 = attr_33->a_value;
D.44590_960 = attr_33->a_name;
D.44619_954 = attr_33->a_value;
D.44619_953 = attr_33->a_value;
D.44619_949 = attr_33->a_value;
__s1_910 = attr_33->a_value;
D.44619_908 = attr_33->a_value;
D.44590_906 = attr_33->a_name;
D.44619_901 = attr_33->a_value;
D.44619_899 = attr_33->a_value;
D.44590_897 = attr_33->a_name;
D.44619_896 = attr_33->a_value;
D.44590_894 = attr_33->a_name;
if (attr_33 != 0B)
# DEBUG attr => attr_33

ptime_34 : --> single use.
ptime_35 = PHI <ptime_371(166), ptime_34(188)>
# DEBUG ptime => ptime_34

ptime_35 : -->10 uses.
D.44989_689 = ptime_35 != 0;
if (ptime_35 == 0)
codec_ms_581 = ptime_35;
ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>
ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>
ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>
ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>
ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>
ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>
ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>
# DEBUG ptime => ptime_35

dptime_36 : --> single use.
dptime_37 = PHI <dptime_153(55), dptime_36(76)>
# DEBUG dptime => dptime_36

dptime_37 : -->9 uses.
ptime_371 = dptime_37;
dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>
dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>
dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>
dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>
dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>
dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>
dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>
dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>
# DEBUG dptime => dptime_37

maxptime_38 : --> single use.
maxptime_39 = PHI <maxptime_372(166), maxptime_38(188)>
# DEBUG maxptime => maxptime_38

maxptime_39 : -->12 uses.
if (D.45025_735 <= maxptime_39)
if (maxptime_39 == 0)
codec_ms_585 = maxptime_39;
D.44878_583 = codec_ms_581 > maxptime_39;
if (maxptime_39 != 0)
maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>
maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>
maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>
maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>
maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>
maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>
maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>
# DEBUG maxptime => maxptime_39

dmaxptime_40 : --> single use.
dmaxptime_41 = PHI <dmaxptime_155(55), dmaxptime_40(76)>
# DEBUG dmaxptime => dmaxptime_40

dmaxptime_41 : -->9 uses.
maxptime_372 = dmaxptime_41;
dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>
dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>
dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>
dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>
dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>
dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>
dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>
dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>
# DEBUG dmaxptime => dmaxptime_41

sendonly_42 : --> single use.
sendonly_44 = PHI <sendonly_42(55), sendonly_43(76)>
# DEBUG sendonly => sendonly_42

sendonly_43 : --> single use.
sendonly_44 = PHI <sendonly_42(55), sendonly_43(76)>
# DEBUG sendonly => sendonly_43

sendonly_44 : -->9 uses.
D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);
D.44624_335 = sendonly_44 != 1;
sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>
sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>
sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>
if (sendonly_44 <= 1)
sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>
sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>
sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>
# DEBUG sendonly => sendonly_44

recvonly_45 : --> single use.
recvonly_46 = PHI <recvonly_157(55), recvonly_45(76)>
# DEBUG recvonly => recvonly_45

recvonly_46 : -->8 uses.
D.44625_336 = recvonly_46 != 1;
recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>
recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>
recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>
recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>
recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>
recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>
recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>
# DEBUG recvonly => recvonly_46

greedy_47 : -->2 uses.
if (greedy_47 != 0)
if (greedy_47 != 0)
# DEBUG greedy => greedy_47

x_48 : --> single use.
x_49 = PHI <x_558(197), x_48(280)>
# DEBUG x => x_48

x_49 : -->4 uses.
x_580 = x_49 + 1;
D.44870_579 = x_49 < skip_160;
x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>
x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>
# DEBUG x => x_49

got_crypto_50 : --> single use.
got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>
# DEBUG got_crypto => got_crypto_50

got_crypto_51 : -->3 uses.
got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>
got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>
got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>
# DEBUG got_crypto => got_crypto_51

got_crypto_52 : --> single use.
got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>
# DEBUG got_crypto => got_crypto_52

got_crypto_53 : --> single use.
got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>
# DEBUG got_crypto => got_crypto_53

got_crypto_54 : -->16 uses.
got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
D.45003_714 = got_crypto_54 <= 0;
D.44834_549 = got_crypto_54 == -1;
got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>
got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>
got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>
if (got_crypto_54 <= 0)
got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>
got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>
got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>
got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>
# DEBUG got_crypto => got_crypto_54

got_crypto_55 : --> single use.
got_crypto_56 = PHI <got_crypto_164(101), got_crypto_55(449)>
# DEBUG got_crypto => got_crypto_55

got_crypto_56 : -->8 uses.
got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>
got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>
got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>
# DEBUG got_crypto => got_crypto_56

got_video_crypto_57 : --> single use.
got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>
# DEBUG got_video_crypto => got_video_crypto_57

got_video_crypto_58 : -->3 uses.
got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>
got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>
got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>
# DEBUG got_video_crypto => got_video_crypto_58

got_video_crypto_59 : --> single use.
got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>
# DEBUG got_video_crypto => got_video_crypto_59

got_video_crypto_60 : --> single use.
got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>
# DEBUG got_video_crypto => got_video_crypto_60

got_video_crypto_61 : -->10 uses.
got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>
got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>
got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>
got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>
if (got_video_crypto_61 == 0)
got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>
got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>
got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>
got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>
got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>
# DEBUG got_video_crypto => got_video_crypto_61

got_video_crypto_62 : -->7 uses.
got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
D.45266_1024 = got_video_crypto_62 <= 0;
got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>
got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>
got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>
# DEBUG got_video_crypto => got_video_crypto_62

got_video_crypto_63 : --> single use.
got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>
# DEBUG got_video_crypto => got_video_crypto_63

got_video_crypto_64 : -->9 uses.
got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>
got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
# DEBUG got_video_crypto => got_video_crypto_64

got_audio_65 : -->6 uses.
got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
# DEBUG got_audio => got_audio_65

got_audio_66 : --> single use.
got_audio_67 = PHI <got_audio_166(101), got_audio_66(449)>
# DEBUG got_audio => got_audio_66

got_audio_67 : -->8 uses.
got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>
got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>
D.44778_496 = got_audio_67 == 0;
# DEBUG got_audio => got_audio_67

got_avp_68 : -->2 uses.
got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>
D.44839_552 = got_avp_68 | got_webrtc_78;
# DEBUG got_avp => got_avp_68

got_avp_69 : -->6 uses.
got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>
got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>
got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>
got_avp_388 = got_avp_69 + 1;
got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>
got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>
# DEBUG got_avp => got_avp_69

got_video_avp_70 : --> single use.
got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>
# DEBUG got_video_avp => got_video_avp_70

got_video_avp_71 : -->6 uses.
got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>
got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>
got_video_avp_389 = got_video_avp_71 + 1;
got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>
got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>
got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>
# DEBUG got_video_avp => got_video_avp_71

got_video_savp_72 : --> single use.
got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>
# DEBUG got_video_savp => got_video_savp_72

got_video_savp_73 : -->6 uses.
got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>
got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>
got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>
got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>
got_video_savp_385 = got_video_savp_73 + 1;
got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>
# DEBUG got_video_savp => got_video_savp_73

got_savp_74 : -->2 uses.
got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>
D.44835_550 = got_savp_74 != 0;
# DEBUG got_savp => got_savp_74

got_savp_75 : -->6 uses.
got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>
got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>
got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>
got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>
got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>
got_savp_384 = got_savp_75 + 1;
# DEBUG got_savp => got_savp_75

got_udptl_76 : -->2 uses.
got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>
if (got_udptl_76 != 0)
# DEBUG got_udptl => got_udptl_76

got_udptl_77 : -->6 uses.
got_udptl_391 = got_udptl_77 + 1;
got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>
got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>
got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>
got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>
got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>
# DEBUG got_udptl => got_udptl_77

got_webrtc_78 : -->4 uses.
got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>
D.44830_972 = got_webrtc_78 == 0;
D.44839_552 = got_avp_68 | got_webrtc_78;
D.44830_541 = got_webrtc_78 == 0;
# DEBUG got_webrtc => got_webrtc_78

got_webrtc_79 : -->2 uses.
got_webrtc_374 = got_webrtc_79 + 1;
got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>
# DEBUG got_webrtc => got_webrtc_79

scrooge_80 : --> single use.
if (scrooge_80 != 0)
# DEBUG scrooge => scrooge_80

reneg_81 : -->2 uses.
reneg_82 = PHI <reneg_81(87), reneg_353(88), reneg_356(89)>
if (reneg_81 != 0)
# DEBUG reneg => reneg_81

reneg_82 : --> single use.
reneg_83 = PHI <reneg_82(90), reneg_358(91)>
# DEBUG reneg => reneg_82

reneg_83 : -->2 uses.
if (reneg_83 != 0)
if (reneg_83 == 0)
# DEBUG reneg => reneg_83

codec_array_84 : -->4 uses.
greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);
D.45237_984 = codec_array_84 + D.45236_983;
greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);
D.44919_628 = codec_array_84 + D.44918_627;
# DEBUG codec_array => codec_array_84

total_codecs_85 : -->4 uses.
greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);
if (i_139 < total_codecs_85)
greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);
D.44998_624 = i_129 < total_codecs_85;
# DEBUG total_codecs => total_codecs_85

codec_ms_86 : -->2 uses.
codec_ms_87 = PHI <codec_ms_86(218), codec_ms_589(219)>
if (codec_ms_86 == 0)
# DEBUG codec_ms => codec_ms_86

codec_ms_87 : -->2 uses.
codec_ms_88 = PHI <codec_ms_87(223), codec_ms_87(224), codec_ms_595(225)>
codec_ms_88 = PHI <codec_ms_87(223), codec_ms_87(224), codec_ms_595(225)>
# DEBUG codec_ms => codec_ms_87

codec_ms_88 : -->3 uses.
codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>
codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>
codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>
# DEBUG codec_ms => codec_ms_88

codec_ms_89 : -->2 uses.
codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>
codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>
# DEBUG codec_ms => codec_ms_89

codec_ms_90 : -->5 uses.
codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>
codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>
D.44993_692 = codec_ms_90 * 1000;
D.44990_690 = codec_ms_90 != 0;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# DEBUG codec_ms => codec_ms_90

codec_ms_91 : --> single use.
codec_ms_92 = PHI <codec_ms_95(197), codec_ms_91(280)>
# DEBUG codec_ms => codec_ms_91

codec_ms_92 : -->5 uses.
codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>
codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>
codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>
codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>
codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>
# DEBUG codec_ms => codec_ms_92

codec_ms_93 : -->7 uses.
codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);
# DEBUG codec_ms => codec_ms_93

codec_ms_94 : --> single use.
codec_ms_95 = PHI <codec_ms_181(101), codec_ms_94(449)>
# DEBUG codec_ms => codec_ms_94

codec_ms_95 : -->6 uses.
codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
codec_ms_92 = PHI <codec_ms_95(197), codec_ms_91(280)>
# DEBUG codec_ms => codec_ms_95

remote_codec_rate_96 : -->7 uses.
remote_codec_rate_97 = PHI <remote_codec_rate_98(243), remote_codec_rate_96(268), remote_codec_rate_96(274), remote_codec_rate_96(276)>
remote_codec_rate_97 = PHI <remote_codec_rate_98(243), remote_codec_rate_96(268), remote_codec_rate_96(274), remote_codec_rate_96(276)>
remote_codec_rate.92_700 = (int) remote_codec_rate_96;
if (remote_codec_rate_96 != codec_rate_632)
remote_codec_rate_97 = PHI <remote_codec_rate_98(243), remote_codec_rate_96(268), remote_codec_rate_96(274), remote_codec_rate_96(276)>
D.44973_678 = remote_codec_rate_96 != codec_rate_632;
D.44968_675 = remote_codec_rate_96 != 0;
# DEBUG remote_codec_rate => remote_codec_rate_96

remote_codec_rate_97 : --> single use.
remote_codec_rate_98 = PHI <remote_codec_rate_596(241), remote_codec_rate_97(277)>
# DEBUG remote_codec_rate => remote_codec_rate_97

remote_codec_rate_98 : -->5 uses.
remote_codec_rate_96 = PHI <remote_codec_rate_98(250), remote_codec_rate_98(256), remote_codec_rate_662(257)>
if (remote_codec_rate_98 == codec_rate_632)
remote_codec_rate_96 = PHI <remote_codec_rate_98(250), remote_codec_rate_98(256), remote_codec_rate_662(257)>
remote_codec_rate.92_636 = (int) remote_codec_rate_98;
remote_codec_rate_97 = PHI <remote_codec_rate_98(243), remote_codec_rate_96(268), remote_codec_rate_96(274), remote_codec_rate_96(276)>
# DEBUG remote_codec_rate => remote_codec_rate_98

fmtp_remote_codec_rate_99 : -->3 uses.
remote_codec_rate_662 = fmtp_remote_codec_rate_99;
if (fmtp_remote_codec_rate_99 != 0)
if (D.44947_658 == fmtp_remote_codec_rate_99)
# DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99

m_idx_100 : --> single use.
m_idx_101 = PHI <m_idx_104(241), m_idx_100(277)>
# DEBUG m_idx => m_idx_100

m_idx_101 : -->9 uses.
m_idx_703 = m_idx_101 + 1;
matches[m_idx_101].map = map_128;
matches[m_idx_101].imp = imp_629;
matches[m_idx_101].rate = codec_rate.94_702;
matches[m_idx_101].codec_idx = i_129;
m_idx_100 = PHI <m_idx_101(243), m_idx_101(268), m_idx_101(274), m_idx_703(276)>
m_idx_100 = PHI <m_idx_101(243), m_idx_101(268), m_idx_101(274), m_idx_703(276)>
m_idx_100 = PHI <m_idx_101(243), m_idx_101(268), m_idx_101(274), m_idx_703(276)>
m_idx_102 = PHI <m_idx_703(275), m_idx_101(278)>
# DEBUG m_idx => m_idx_101

m_idx_102 : -->3 uses.
m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>
m_idx_105 = PHI <m_idx_102(279), m_idx_104(281)>
if (m_idx_102 > 29)
# DEBUG m_idx => m_idx_102

m_idx_103 : --> single use.
m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>
# DEBUG m_idx => m_idx_103

m_idx_104 : -->6 uses.
m_idx_101 = PHI <m_idx_104(241), m_idx_100(277)>
m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>
m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>
m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>
m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>
m_idx_105 = PHI <m_idx_102(279), m_idx_104(281)>
# DEBUG m_idx => m_idx_104

m_idx_105 : --> single use.
m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>
# DEBUG m_idx => m_idx_105

m_idx_106 : -->8 uses.
m_idx_744 = m_idx_106 + 1;
matches[m_idx_106].map = near_map_727;
matches[m_idx_106].imp = timp_134;
matches[m_idx_106].rate = near_rate.96_743;
matches[m_idx_106].codec_idx = D.45028_742;
m_idx_107 = PHI <m_idx_106(284), m_idx_744(294), m_idx_106(296)>
m_idx_107 = PHI <m_idx_106(284), m_idx_744(294), m_idx_106(296)>
D.45007_719 = m_idx_106 == 0;
# DEBUG m_idx => m_idx_106

m_idx_107 : -->9 uses.
m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
if (j_135 < m_idx_107)
greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);
if (m_idx_107 != 0)
# DEBUG m_idx => m_idx_107

m_idx_108 : --> single use.
m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>
# DEBUG m_idx => m_idx_108

m_idx_109 : --> single use.
m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>
# DEBUG m_idx => m_idx_109

m_idx_110 : -->8 uses.
m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>
m_idx_1018 = m_idx_110 + 1;
matches[m_idx_110].map = map_136;
matches[m_idx_110].imp = imp_985;
m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>
m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>
m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>
m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>
# DEBUG m_idx => m_idx_110

m_idx_111 : -->2 uses.
m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>
m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>
# DEBUG m_idx => m_idx_111

m_idx_112 : -->6 uses.
m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
if (j_141 < m_idx_112)
greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);
m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
if (m_idx_112 != 0)
# DEBUG m_idx => m_idx_112

m_idx_113 : --> single use.
m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>
# DEBUG m_idx => m_idx_113

m_idx_114 : -->3 uses.
m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>
# DEBUG m_idx => m_idx_114

nm_idx_115 : --> single use.
nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>
# DEBUG nm_idx => nm_idx_115

nm_idx_116 : -->10 uses.
nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>
nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>
nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>
nm_idx_701 = nm_idx_116 + 1;
near_matches[nm_idx_116].map = map_128;
near_matches[nm_idx_116].imp = imp_629;
near_matches[nm_idx_116].rate = remote_codec_rate.92_700;
near_matches[nm_idx_116].codec_idx = i_129;
nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>
nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>
# DEBUG nm_idx => nm_idx_116

nm_idx_117 : --> single use.
nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>
# DEBUG nm_idx => nm_idx_117

nm_idx_118 : -->6 uses.
nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>
nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>
nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>
nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>
nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>
nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>
# DEBUG nm_idx => nm_idx_118

nm_idx_119 : --> single use.
nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>
# DEBUG nm_idx => nm_idx_119

nm_idx_120 : -->8 uses.
nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
if (j_133 < nm_idx_120)
D.45008_720 = nm_idx_120 != 0;
# DEBUG nm_idx => nm_idx_120

nm_idx_121 : --> single use.
nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>
# DEBUG nm_idx => nm_idx_121

nm_idx_122 : -->3 uses.
nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>
# DEBUG nm_idx => nm_idx_122

__result_123 : --> single use.
__result_296 = __result_123;
# DEBUG __result => __result_123

connection_124 : -->2 uses.
D.45085_795 = connection_124->c_address;
if (connection_124 == 0B)
# DEBUG connection => connection_124

connection_125 : -->2 uses.
D.45085_1059 = connection_125->c_address;
if (connection_125 == 0B)
# DEBUG connection => connection_125

pass_126 : -->2 uses.
pass_127 = PHI <pass_126(136), pass_423(137)>
if (pass_126 == 2)
# DEBUG pass => pass_126

pass_127 : --> single use.
if (pass_127 != 0)
# DEBUG pass => pass_127

map_128 : -->26 uses.
map_711 = map_128->rm_next;
matches[m_idx_101].map = map_128;
near_matches[nm_idx_116].map = map_128;
D.44889_682 = map_128->rm_encoding;
D.44889_680 = map_128->rm_encoding;
D.44889_671 = map_128->rm_encoding;
D.44889_669 = map_128->rm_encoding;
D.44856_651 = map_128->rm_pt;
D.44856_649 = map_128->rm_pt;
D.44889_642 = map_128->rm_encoding;
D.44856_634 = map_128->rm_pt;
D.44854_610 = map_128->rm_rate;
D.44893_609 = map_128->rm_fmtp;
D.44889_608 = map_128->rm_encoding;
D.44889_604 = map_128->rm_encoding;
D.44889_600 = map_128->rm_encoding;
D.44893_598 = map_128->rm_fmtp;
remote_codec_rate_596 = map_128->rm_rate;
D.44889_593 = map_128->rm_encoding;
D.44856_590 = map_128->rm_pt;
D.44856_586 = map_128->rm_pt;
D.44856_572 = map_128->rm_pt;
D.44856_567 = map_128->rm_pt;
D.44854_564 = map_128->rm_rate;
rm_encoding_561 = map_128->rm_encoding;
if (map_128 != 0B)
# DEBUG map => map_128

i_129 : -->6 uses.
i_710 = i_129 + 1;
matches[m_idx_101].codec_idx = i_129;
near_matches[nm_idx_116].codec_idx = i_129;
i.91_626 = (unsigned int) i_129;
D.44998_624 = i_129 < total_codecs_85;
D.44997_623 = D.44996_622 > i_129;
# DEBUG i => i_129

rm_encoding_130 : -->5 uses.
D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
D.44863_571 = strcasecmp (rm_encoding_130, "CN");
D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
# DEBUG rm_encoding => rm_encoding_130

map_bit_rate_131 : -->2 uses.
map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>
map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>
# DEBUG map_bit_rate => map_bit_rate_131

map_bit_rate_132 : -->3 uses.
D.44956_667 = map_bit_rate_132 != bit_rate_631;
D.44955_666 = map_bit_rate_132 != 0;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# DEBUG map_bit_rate => map_bit_rate_132

j_133 : -->6 uses.
D.45028_742 = near_matches[j_133].codec_idx;
j_736 = j_133 + 1;
near_map_727 = near_matches[j_133].map;
near_match_726 = near_matches[j_133].imp;
D.45012_724 = near_matches[j_133].rate;
if (j_133 < nm_idx_120)
# DEBUG j => j_133

timp_134 : -->5 uses.
matches[m_idx_106].imp = timp_134;
D.45027_740 = timp_134->actual_samples_per_second;
D.45024_738 = timp_134->microseconds_per_packet;
D.45026_737 = timp_134->iananame;
D.45024_734 = timp_134->microseconds_per_packet;
# DEBUG timp => timp_134

j_135 : -->10 uses.
j_807 = j_135 + 1;
if (j_135 == 0)
mmap_762 = matches[j_135].map;
mimp_761 = matches[j_135].imp;
D.45039_756 = matches[j_135].imp;
D.45039_754 = matches[j_135].imp;
D.45034_751 = matches[j_135].map;
D.45034_749 = matches[j_135].map;
D.45034_747 = matches[j_135].map;
if (j_135 < m_idx_107)
# DEBUG j => j_135

map_136 : -->9 uses.
map_1021 = map_136->rm_next;
matches[m_idx_110].map = map_136;
D.45262_1013 = map_136->rm_rate;
D.45247_1005 = map_136->rm_pt;
D.45247_1003 = map_136->rm_pt;
D.45255_996 = map_136->rm_encoding;
D.45247_991 = map_136->rm_pt;
rm_encoding_979 = map_136->rm_encoding;
if (map_136 != 0B)
# DEBUG map => map_136

rm_encoding_137 : -->2 uses.
D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
# DEBUG rm_encoding => rm_encoding_137

vmatch_138 : --> single use.
if (vmatch_138 != 0)
# DEBUG vmatch => vmatch_138

i_139 : -->3 uses.
i_1020 = i_139 + 1;
i.99_982 = (unsigned int) i_139;
if (i_139 < total_codecs_85)
# DEBUG i => i_139

__result_140 : --> single use.
__result_947 = __result_140;
# DEBUG __result => __result_140

j_141 : -->10 uses.
j_1067 = j_141 + 1;
map_1050 = matches[j_141].map;
mimp_1049 = matches[j_141].imp;
if (j_141 == 0)
D.45279_1040 = matches[j_141].imp;
D.45279_1038 = matches[j_141].imp;
D.45274_1035 = matches[j_141].map;
D.45274_1033 = matches[j_141].map;
D.45274_1031 = matches[j_141].map;
if (j_141 < m_idx_112)
# DEBUG j => j_141

match_142 : --> single use.
return match_142;

__result_143 : --> single use.
__result_301 = __result_143;

iftmp.93_144 : --> single use.
match_661 = (uint8_t) iftmp.93_144;

near_rate_145 : --> single use.
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);

D.47922_146 : --> single use.
pmap_760->channels = D.47922_146;

__result_147 : --> single use.
__result_951 = __result_147;

match_148 : --> single use.
match_16 = PHI <match_148(101), match_15(449)>
# DEBUG match => match_148

best_te_149 : --> single use.
best_te_23 = PHI <best_te_149(101), best_te_22(449)>
# DEBUG best_te => best_te_149

te_150 : --> no uses.
# DEBUG te => te_150

cng_pt_151 : --> single use.
cng_pt_27 = PHI <cng_pt_151(101), cng_pt_26(449)>
# DEBUG cng_pt => cng_pt_151

ptime_152 : --> no uses.
# DEBUG ptime => ptime_152

dptime_153 : --> single use.
dptime_37 = PHI <dptime_153(55), dptime_36(76)>
# DEBUG dptime => dptime_153

maxptime_154 : --> no uses.
# DEBUG maxptime => maxptime_154

dmaxptime_155 : --> single use.
dmaxptime_41 = PHI <dmaxptime_155(55), dmaxptime_40(76)>
# DEBUG dmaxptime => dmaxptime_155

sendonly_156 : -->4 uses.
sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>
sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>
sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>
sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>
# DEBUG sendonly => sendonly_156

recvonly_157 : --> single use.
recvonly_46 = PHI <recvonly_157(55), recvonly_45(76)>
# DEBUG recvonly => recvonly_157

greedy_158 : --> no uses.
# DEBUG greedy => greedy_158

x_159 : --> no uses.
# DEBUG x => x_159

skip_160 : --> single use.
D.44870_579 = x_49 < skip_160;
# DEBUG skip => skip_160

session_161(D) : -->111 uses.
D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);
D.44530_1085 = session_161(D)->channel;
switch_core_media_check_video_codecs (session_161(D));
D.44530_1081 = session_161(D)->channel;
D.44530_1075 = session_161(D)->channel;
D.44530_1074 = session_161(D)->channel;
D.44530_1071 = session_161(D)->channel;
D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);
D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
D.44530_989 = session_161(D)->channel;
D.44530_987 = session_161(D)->channel;
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_976, sdp_type_546(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
D.44530_967 = session_161(D)->channel;
D.44530_952 = session_161(D)->channel;
D.45140_885 = dtls_ok (session_161(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
D.44530_878 = session_161(D)->channel;
D.44530_866 = session_161(D)->channel;
D.44530_860 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
D.44530_856 = session_161(D)->channel;
D.44530_853 = session_161(D)->channel;
D.44530_849 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);
D.44530_842 = session_161(D)->channel;
D.44530_838 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);
D.44530_827 = session_161(D)->channel;
D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
D.44530_818 = session_161(D)->channel;
D.44530_814 = session_161(D)->channel;
D.44530_811 = session_161(D)->channel;
D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_545, sdp_type_546(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
D.44530_536 = session_161(D)->channel;
D.44530_511 = session_161(D)->channel;
D.44784_499 = dtls_ok (session_161(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
D.44530_473 = session_161(D)->channel;
D.44530_470 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
D.44530_459 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
D.44530_457 = session_161(D)->channel;
D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
D.44530_441 = session_161(D)->channel;
D.44530_438 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
D.44530_432 = session_161(D)->channel;
D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
D.44530_419 = session_161(D)->channel;
D.44530_417 = session_161(D)->channel;
D.44530_415 = session_161(D)->channel;
D.44530_407 = session_161(D)->channel;
D.44530_400 = session_161(D)->channel;
D.44530_395 = session_161(D)->channel;
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
D.44530_378 = session_161(D)->channel;
switch_core_session_set_ice (session_161(D));
switch_core_media_pass_zrtp_hash (session_161(D));
switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
D.44530_369 = session_161(D)->channel;
switch_core_media_prepare_codecs (session_161(D), 0);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
D.44649_357 = session_161(D)->bugs;
D.44530_354 = session_161(D)->channel;
D.44530_350 = session_161(D)->channel;
D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);
D.44530_340 = session_161(D)->channel;
D.44530_338 = session_161(D)->channel;
D.44530_322 = session_161(D)->channel;
D.44530_321 = session_161(D)->channel;
D.44530_316 = session_161(D)->channel;
D.44530_313 = session_161(D)->channel;
D.44530_309 = session_161(D)->channel;
D.44530_247 = session_161(D)->channel;
D.44530_244 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");
D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
switch_core_session_parse_crypto_prefs (session_161(D));
D.44478_200 = dtls_ok (session_161(D));
smh_186 = session_161(D)->media_handle;
if (session_161(D) == 0B)
channel_162 = switch_core_session_get_channel (session_161(D));

channel_162 : -->6 uses.
D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
D.45114_834 = switch_channel_direction (channel_162);
switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);
var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
# DEBUG channel => channel_162

crypto_163 : --> no uses.
# DEBUG crypto => crypto_163

got_crypto_164 : --> single use.
got_crypto_56 = PHI <got_crypto_164(101), got_crypto_55(449)>
# DEBUG got_crypto => got_crypto_164

got_video_crypto_165 : --> single use.
got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>
# DEBUG got_video_crypto => got_video_crypto_165

got_audio_166 : --> single use.
got_audio_67 = PHI <got_audio_166(101), got_audio_66(449)>
# DEBUG got_audio => got_audio_166

got_avp_167 : --> single use.
got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>
# DEBUG got_avp => got_avp_167

got_video_avp_168 : --> single use.
got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>
# DEBUG got_video_avp => got_video_avp_168

got_video_savp_169 : --> single use.
got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>
# DEBUG got_video_savp => got_video_savp_169

got_savp_170 : --> single use.
got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>
# DEBUG got_savp => got_savp_170

got_udptl_171 : --> single use.
got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>
# DEBUG got_udptl => got_udptl_171

got_webrtc_172 : --> single use.
got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>
# DEBUG got_webrtc => got_webrtc_172

scrooge_173 : --> no uses.
# DEBUG scrooge => scrooge_173

parser_174 : --> no uses.
# DEBUG parser => parser_174

reneg_175 : -->4 uses.
reneg_81 = PHI <reneg_175(80), reneg_175(82), reneg_175(83), reneg_175(84), reneg_349(85), reneg_352(86)>
reneg_81 = PHI <reneg_175(80), reneg_175(82), reneg_175(83), reneg_175(84), reneg_349(85), reneg_352(86)>
reneg_81 = PHI <reneg_175(80), reneg_175(82), reneg_175(83), reneg_175(84), reneg_349(85), reneg_352(86)>
reneg_81 = PHI <reneg_175(80), reneg_175(82), reneg_175(83), reneg_175(84), reneg_349(85), reneg_352(86)>
# DEBUG reneg => reneg_175

near_rate_176 : --> no uses.
# DEBUG near_rate => near_rate_176

mimp_177 : --> no uses.
# DEBUG mimp => mimp_177

near_match_178 : --> no uses.
# DEBUG near_match => near_match_178

mmap_179 : --> no uses.
# DEBUG mmap => mmap_179

near_map_180 : --> no uses.
# DEBUG near_map => near_map_180

codec_ms_181 : --> single use.
codec_ms_95 = PHI <codec_ms_181(101), codec_ms_94(449)>
# DEBUG codec_ms => codec_ms_181

remote_codec_rate_182 : --> no uses.
# DEBUG remote_codec_rate => remote_codec_rate_182

fmtp_remote_codec_rate_183 : --> no uses.
# DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_183

m_idx_184 : --> single use.
m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>
# DEBUG m_idx => m_idx_184

nm_idx_185 : --> single use.
nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>
# DEBUG nm_idx => nm_idx_185

smh_186 : -->70 uses.
D.44471_1094 = smh_186->mparams;
check_ice (smh_186, 1, sdp_198, m_28);
greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);
D.45001_1022 = smh_186->crypto_mode;
D.44471_998 = smh_186->mparams;
D.44471_964 = smh_186->mparams;
D.44471_959 = smh_186->mparams;
D.44471_957 = smh_186->mparams;
D.44471_905 = smh_186->mparams;
D.44471_869 = smh_186->mparams;
D.44471_868 = smh_186->mparams;
D.44471_867 = smh_186->mparams;
D.44471_863 = smh_186->mparams;
D.44471_862 = smh_186->mparams;
D.44471_861 = smh_186->mparams;
D.44471_850 = smh_186->mparams;
D.44471_845 = smh_186->mparams;
D.44471_844 = smh_186->mparams;
D.44471_839 = smh_186->mparams;
D.44471_835 = smh_186->mparams;
D.44471_832 = smh_186->mparams;
D.44471_829 = smh_186->mparams;
D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);
check_ice (smh_186, 0, sdp_198, m_28);
D.44471_821 = smh_186->mparams;
smh_186->num_negotiated_codecs = D.45089_804;
smh_186->negotiated_codecs[D.44655_803] = mimp_761;
D.44655_803 = smh_186->num_negotiated_codecs;
smh_186->num_negotiated_codecs = 0;
greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);
D.45001_712 = smh_186->crypto_mode;
D.44471_644 = smh_186->mparams;
D.44471_621 = smh_186->mparams;
D.44471_577 = smh_186->mparams;
D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
D.44471_533 = smh_186->mparams;
D.44471_518 = smh_186->mparams;
D.44471_516 = smh_186->mparams;
D.44481_482 = smh_186->session;
D.44481_412 = smh_186->session;
D.44481_403 = smh_186->session;
check_ice (smh_186, 1, sdp_198, 0B);
check_ice (smh_186, 0, sdp_198, 0B);
D.44471_364 = smh_186->mparams;
codec_array_363 = &smh_186->codecs;
D.44471_362 = smh_186->mparams;
total_codecs_361 = smh_186->num_negotiated_codecs;
codec_array_360 = &smh_186->negotiated_codecs;
D.44655_359 = smh_186->num_negotiated_codecs;
reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
D.44471_345 = smh_186->mparams;
D.44471_343 = smh_186->mparams;
D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
D.44509_240 = smh_186->origin;
D.44471_237 = smh_186->mparams;
D.44509_233 = smh_186->origin;
D.44471_228 = smh_186->mparams;
D.44509_227 = smh_186->origin;
smh_186->origin = D.44508_226;
D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
D.44481_207 = smh_186->session;
D.44481_205 = smh_186->session;
D.44481_201 = smh_186->session;
D.44471_191 = smh_186->mparams;
codec_array_190 = &smh_186->codecs;
v_engine_189 = &smh_186->engines[1];
a_engine_188 = &smh_186->engines;
if (smh_186 == 0B)
# DEBUG smh => smh_186

match_187 : --> single use.
match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

a_engine_188 : -->42 uses.
pmap_1457 = a_engine_188->payload_map;
# DEBUG engine => a_engine_188
D.44605_855 = a_engine_188->rtp_session;
D.44605_852 = a_engine_188->rtp_session;
D.44605_851 = a_engine_188->rtp_session;
D.44605_841 = a_engine_188->rtp_session;
D.44605_840 = a_engine_188->rtp_session;
a_engine_188->reset_codec = 1;
D.45094_819 = &a_engine_188->read_codec;
D.44750_815 = a_engine_188->cur_payload_map;
D.44750_812 = a_engine_188->cur_payload_map;
D.44750_808 = a_engine_188->cur_payload_map;
D.44605_765 = a_engine_188->rtp_session;
D.44605_764 = a_engine_188->rtp_session;
D.44750_763 = a_engine_188->cur_payload_map;
a_engine_188->cur_payload_map = pmap_760;
a_engine_188->codec_negotiated = 1;
D.44605_576 = a_engine_188->rtp_session;
D.44605_574 = a_engine_188->rtp_session;
D.44750_565 = a_engine_188->cur_payload_map;
a_engine_188->remote_rtcp_port = D.44799_515;
D.44750_477 = a_engine_188->cur_payload_map;
D.44750_475 = a_engine_188->cur_payload_map;
D.44605_474 = a_engine_188->rtp_session;
D.44750_471 = a_engine_188->cur_payload_map;
D.44750_467 = a_engine_188->cur_payload_map;
D.44750_464 = a_engine_188->cur_payload_map;
D.44750_462 = a_engine_188->cur_payload_map;
D.44750_455 = a_engine_188->cur_payload_map;
D.44750_452 = a_engine_188->cur_payload_map;
D.44750_447 = a_engine_188->cur_payload_map;
D.44750_444 = a_engine_188->cur_payload_map;
D.44605_429 = a_engine_188->rtp_session;
D.44605_427 = a_engine_188->rtp_session;
D.44605_421 = a_engine_188->rtp_session;
a_engine_188->max_missed_packets = 0;
a_engine_188->max_missed_hold_packets = 0;
D.44605_320 = a_engine_188->rtp_session;
D.44605_318 = a_engine_188->rtp_session;
a_engine_188->rtp_bugs = D.44529_243;
D.44521_242 = a_engine_188->rtp_bugs;
a_engine_188->rtp_bugs = D.44522_236;
D.44521_235 = a_engine_188->rtp_bugs;
# DEBUG a_engine => a_engine_188

v_engine_189 : -->16 uses.
# DEBUG engine => v_engine_189
pmap_1461 = v_engine_189->payload_map;
v_engine_189->reset_codec = 1;
D.45312_1090 = &v_engine_189->read_codec;
D.45286_1082 = v_engine_189->cur_payload_map;
D.45286_1078 = v_engine_189->cur_payload_map;
D.45286_1076 = v_engine_189->cur_payload_map;
D.45286_1072 = v_engine_189->cur_payload_map;
D.45286_1068 = v_engine_189->cur_payload_map;
D.45287_1047 = v_engine_189->rtp_session;
D.45287_1046 = v_engine_189->rtp_session;
D.45286_1045 = v_engine_189->cur_payload_map;
v_engine_189->cur_payload_map = pmap_1044;
v_engine_189->codec_negotiated = 1;
v_engine_189->remote_rtcp_port = D.45213_956;
v_engine_189->fir = D.45164_904;
D.45163_903 = v_engine_189->fir;
# DEBUG v_engine => v_engine_189

codec_array_190 : --> single use.
codec_array_84 = PHI <codec_array_360(94), codec_array_190(95), codec_array_363(96)>
# DEBUG codec_array => codec_array_190

D.44471_191 : --> single use.
total_codecs_192 = D.44471_191->num_codecs;

total_codecs_192 : --> single use.
total_codecs_85 = PHI <total_codecs_361(94), total_codecs_192(95), total_codecs_365(96)>
# DEBUG total_codecs => total_codecs_192

r_sdp_193(D) : -->7 uses.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
D.44472_194 = strlen (r_sdp_193(D));

D.44472_194 : --> single use.
D.44473_195 = (int) D.44472_194;

D.44473_195 : --> single use.
parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);

parser_196 : -->5 uses.
sdp_parser_free (parser_196);
if (parser_196 != 0B)
sdp_parser_free (parser_196);
sdp_198 = sdp_session (parser_196);
if (parser_196 == 0B)
# DEBUG parser => parser_196

match_197 : --> single use.
match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

sdp_198 : -->13 uses.
check_ice (smh_186, 1, sdp_198, m_28);
connection_879 = sdp_198->sdp_connection;
check_ice (smh_186, 0, sdp_198, m_28);
connection_554 = sdp_198->sdp_connection;
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
m_370 = sdp_198->sdp_media;
check_ice (smh_186, 1, sdp_198, 0B);
check_ice (smh_186, 0, sdp_198, 0B);
switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
attr_303 = sdp_198->sdp_attributes;
m_248 = sdp_198->sdp_media;
D.44506_224 = sdp_198->sdp_origin;
if (sdp_198 == 0B)
# DEBUG sdp => sdp_198

match_199 : --> single use.
match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

D.44478_200 : --> single use.
if (D.44478_200 != 0)

D.44481_201 : --> single use.
D.44482_202 = D.44481_201->channel;

D.44482_202 : --> single use.
tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);

tmp_203 : -->2 uses.
D.44485_204 = switch_false (tmp_203);
if (tmp_203 != 0B)
# DEBUG tmp => tmp_203

D.44485_204 : --> single use.
if (D.44485_204 != 0)

D.44481_205 : --> single use.
D.44482_206 = D.44481_205->channel;

D.44482_206 : --> single use.
switch_channel_clear_flag (D.44482_206, 111);

D.44481_207 : --> single use.
D.44482_208 = D.44481_207->channel;

D.44482_208 : --> single use.
switch_channel_clear_flag (D.44482_208, 109);

proceed_209(D) : -->4 uses.
*proceed_209(D) = 0;
if (proceed_209(D) != 0B)
*proceed_209(D) = 1;
if (proceed_209(D) != 0B)

D.44490_210 : --> single use.
greedy_211 = D.44490_210 != 0;

greedy_211 : -->2 uses.
greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>
greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>
# DEBUG greedy => greedy_211

D.44491_212 : --> single use.
scrooge_213 = D.44491_212 != 0;

scrooge_213 : -->2 uses.
scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>
scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>
# DEBUG scrooge => scrooge_213

val_214 : -->5 uses.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
D.44502_221 = strcasecmp (val_214, "scrooge");
D.44498_218 = strcasecmp (val_214, "greedy");
D.44494_215 = strcasecmp (val_214, "generous");
if (val_214 != 0B)
# DEBUG val => val_214

D.44494_215 : --> single use.
if (D.44494_215 == 0)

greedy_216 : --> single use.
greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>
# DEBUG greedy => greedy_216

scrooge_217 : --> single use.
scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>
# DEBUG scrooge => scrooge_217

D.44498_218 : --> single use.
if (D.44498_218 == 0)

greedy_219 : --> single use.
greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>
# DEBUG greedy => greedy_219

scrooge_220 : --> single use.
scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>
# DEBUG scrooge => scrooge_220

D.44502_221 : --> single use.
if (D.44502_221 == 0)

scrooge_222 : --> single use.
scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>
# DEBUG scrooge => scrooge_222

greedy_223 : --> single use.
greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>
# DEBUG greedy => greedy_223

D.44506_224 : --> single use.
D.44507_225 = D.44506_224->o_username;

D.44507_225 : --> single use.
D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);

D.44508_226 : --> single use.
smh_186->origin = D.44508_226;

D.44509_227 : --> single use.
if (D.44509_227 != 0B)

D.44471_228 : --> single use.
D.44512_229 = D.44471_228->auto_rtp_bugs;

D.44512_229 : --> single use.
D.44513_230 = (int) D.44512_229;

D.44513_230 : --> single use.
D.44514_231 = D.44513_230 & 1;

D.44514_231 : --> single use.
D.44515_232 = (_Bool) D.44514_231;

D.44515_232 : --> single use.
if (D.44515_232 != 0)

D.44509_233 : --> single use.
D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");

D.44518_234 : --> single use.
if (D.44518_234 != 0B)

D.44521_235 : --> single use.
D.44522_236 = D.44521_235 | 1;

D.44522_236 : --> single use.
a_engine_188->rtp_bugs = D.44522_236;

D.44471_237 : --> single use.
D.44512_238 = D.44471_237->auto_rtp_bugs;

D.44512_238 : --> single use.
D.44523_239 = D.44512_238 & 2;

D.44523_239 : --> single use.
if (D.44523_239 != 0)

D.44509_240 : --> single use.
D.44526_241 = strstr (D.44509_240, "Sonus_UAC");

D.44526_241 : --> single use.
if (D.44526_241 != 0B)

D.44521_242 : --> single use.
D.44529_243 = D.44521_242 | 2;

D.44529_243 : --> single use.
a_engine_188->rtp_bugs = D.44529_243;

D.44530_244 : --> single use.
val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);

val_245 : -->2 uses.
D.44533_246 = switch_true (val_245);
if (val_245 != 0B)
# DEBUG val => val_245

D.44533_246 : --> single use.
if (D.44533_246 != 0)

D.44530_247 : --> single use.
switch_channel_set_flag_value (D.44530_247, 93, 1);

m_248 : -->6 uses.
D.44546_298 = m_248->m_connections;
D.44546_258 = m_248->m_connections;
D.44546_255 = m_248->m_connections;
D.44546_254 = m_248->m_connections;
D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
if (m_248 != 0B)
# DEBUG m => m_248

D.44540_249 : --> single use.
D.44541_250 = D.44540_249 & 6;

D.44541_250 : -->2 uses.
D.44543_252 = D.44541_250 == 0;
D.44542_251 = D.44541_250 == 2;

D.44542_251 : --> single use.
D.44544_253 = D.44542_251 || D.44543_252;

D.44543_252 : --> single use.
D.44544_253 = D.44542_251 || D.44543_252;

D.44544_253 : --> single use.
if (D.44544_253 != 0)

D.44546_254 : --> single use.
if (D.44546_254 != 0B)

D.44546_255 : --> single use.
D.44548_256 = D.44546_255->c_address;

D.44548_256 : --> single use.
if (D.44548_256 != 0B)

__s2_len_257 : -->4 uses.
D.44579_286 = __s2_len_257 > 2;
D.44569_276 = __s2_len_257 > 1;
D.44558_266 = __s2_len_257 != 0;
if (__s2_len_257 <= 3)
# DEBUG __s2_len => __s2_len_257

D.44546_258 : --> single use.
__s1_259 = D.44546_258->c_address;

__s1_259 : -->4 uses.
D.44583_289 = __s1_259 + 3;
D.44573_279 = __s1_259 + 2;
D.44563_269 = __s1_259 + 1;
D.44553_260 = *__s1_259;
# DEBUG __s1 => __s1_259

D.44553_260 : --> single use.
D.44554_261 = (int) D.44553_260;

D.44554_261 : --> single use.
__result_265 = D.44554_261 - D.44557_264;

D.44555_262 : --> single use.
D.44556_263 = MEM[(const unsigned char *)D.44555_262];

D.44556_263 : --> single use.
D.44557_264 = (int) D.44556_263;

D.44557_264 : --> single use.
__result_265 = D.44554_261 - D.44557_264;

__result_265 : -->2 uses.
__result_123 = PHI <__result_265(47), __result_275(48), __result_285(49), __result_295(50)>
D.44559_267 = __result_265 == 0;
# DEBUG __result => __result_265

D.44558_266 : --> single use.
D.44560_268 = D.44558_266 && D.44559_267;

D.44559_267 : --> single use.
D.44560_268 = D.44558_266 && D.44559_267;

D.44560_268 : --> single use.
if (D.44560_268 != 0)

D.44563_269 : --> single use.
D.44564_270 = *D.44563_269;

D.44564_270 : --> single use.
D.44565_271 = (int) D.44564_270;

D.44565_271 : --> single use.
__result_275 = D.44565_271 - D.44568_274;

D.44566_272 : --> single use.
D.44567_273 = MEM[(const unsigned char *)D.44566_272];

D.44567_273 : --> single use.
D.44568_274 = (int) D.44567_273;

D.44568_274 : --> single use.
__result_275 = D.44565_271 - D.44568_274;

__result_275 : -->2 uses.
__result_123 = PHI <__result_265(47), __result_275(48), __result_285(49), __result_295(50)>
D.44559_277 = __result_275 == 0;
# DEBUG __result => __result_275

D.44569_276 : --> single use.
D.44570_278 = D.44569_276 && D.44559_277;

D.44559_277 : --> single use.
D.44570_278 = D.44569_276 && D.44559_277;

D.44570_278 : --> single use.
if (D.44570_278 != 0)

D.44573_279 : --> single use.
D.44574_280 = *D.44573_279;

D.44574_280 : --> single use.
D.44575_281 = (int) D.44574_280;

D.44575_281 : --> single use.
__result_285 = D.44575_281 - D.44578_284;

D.44576_282 : --> single use.
D.44577_283 = MEM[(const unsigned char *)D.44576_282];

D.44577_283 : --> single use.
D.44578_284 = (int) D.44577_283;

D.44578_284 : --> single use.
__result_285 = D.44575_281 - D.44578_284;

__result_285 : -->2 uses.
__result_123 = PHI <__result_265(47), __result_275(48), __result_285(49), __result_295(50)>
D.44559_287 = __result_285 == 0;
# DEBUG __result => __result_285

D.44579_286 : --> single use.
D.44580_288 = D.44579_286 && D.44559_287;

D.44559_287 : --> single use.
D.44580_288 = D.44579_286 && D.44559_287;

D.44580_288 : --> single use.
if (D.44580_288 != 0)

D.44583_289 : --> single use.
D.44584_290 = *D.44583_289;

D.44584_290 : --> single use.
D.44585_291 = (int) D.44584_290;

D.44585_291 : --> single use.
__result_295 = D.44585_291 - D.44588_294;

D.44586_292 : --> single use.
D.44587_293 = MEM[(const unsigned char *)D.44586_292];

D.44587_293 : --> single use.
D.44588_294 = (int) D.44587_293;

D.44588_294 : --> single use.
__result_295 = D.44585_291 - D.44588_294;

__result_295 : --> single use.
__result_123 = PHI <__result_265(47), __result_275(48), __result_285(49), __result_295(50)>
# DEBUG __result => __result_295

__result_296 : --> single use.
__result_297 = __result_296;

__result_297 : --> single use.
__result_143 = PHI <__result_297(51), __result_300(52)>

D.44546_298 : --> single use.
D.44548_299 = D.44546_298->c_address;

D.44548_299 : --> single use.
__result_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");

__result_300 : --> single use.
__result_143 = PHI <__result_297(51), __result_300(52)>

__result_301 : --> single use.
if (__result_301 == 0)

sendonly_302 : --> single use.
sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>
# DEBUG sendonly => sendonly_302

attr_303 : --> single use.
attr_29 = PHI <attr_303(55), attr_334(76)>
# DEBUG attr => attr_303

D.44590_304 : -->2 uses.
D.47877_1465 = *D.44590_304;
if (D.44590_304 == 0B)
# DEBUG s => D.44590_304

D.47876_305 : --> single use.
if (D.47876_305 != 0)

D.44590_306 : --> single use.
D.44594_307 = strcasecmp (D.44590_306, "sendonly");

D.44594_307 : --> single use.
if (D.44594_307 == 0)

sendonly_308 : --> single use.
sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>
# DEBUG sendonly => sendonly_308

D.44530_309 : --> single use.
switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);

D.44590_310 : --> single use.
D.44598_311 = strcasecmp (D.44590_310, "inactive");

D.44598_311 : --> single use.
if (D.44598_311 == 0)

sendonly_312 : --> single use.
sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>
# DEBUG sendonly => sendonly_312

D.44530_313 : --> single use.
switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);

D.44590_314 : --> single use.
D.44602_315 = strcasecmp (D.44590_314, "recvonly");

D.44602_315 : --> single use.
if (D.44602_315 == 0)

D.44530_316 : --> single use.
switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);

recvonly_317 : -->2 uses.
recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>
recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>
# DEBUG recvonly => recvonly_317

D.44605_318 : --> single use.
D.44606_319 = switch_rtp_ready (D.44605_318);

D.44606_319 : --> single use.
if (D.44606_319 != 0)

D.44605_320 : --> single use.
switch_rtp_set_max_missed_packets (D.44605_320, 0);

D.44530_321 : --> single use.
switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);

D.44530_322 : --> single use.
switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);

D.44590_323 : --> single use.
D.44614_324 = strcasecmp (D.44590_323, "sendrecv");

D.44614_324 : --> single use.
if (D.44614_324 == 0)

sendonly_325 : --> single use.
sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>
# DEBUG sendonly => sendonly_325

D.44590_326 : --> single use.
D.44616_327 = strcasecmp (D.44590_326, "ptime");

D.44616_327 : --> single use.
if (D.44616_327 == 0)

D.44619_328 : --> single use.
dptime_1467 = strtol (D.44619_328, 0B, 10);
# DEBUG __nptr => D.44619_328

dptime_329 : --> single use.
dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>

D.44590_330 : --> single use.
D.44621_331 = strcasecmp (D.44590_330, "maxptime");

D.44621_331 : --> single use.
if (D.44621_331 == 0)

D.44619_332 : --> single use.
dmaxptime_1468 = strtol (D.44619_332, 0B, 10);
# DEBUG __nptr => D.44619_332

dmaxptime_333 : --> single use.
dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>

attr_334 : --> single use.
attr_29 = PHI <attr_303(55), attr_334(76)>
# DEBUG attr => attr_334

D.44624_335 : --> single use.
D.44626_337 = D.44624_335 && D.44625_336;

D.44625_336 : --> single use.
D.44626_337 = D.44624_335 && D.44625_336;

D.44626_337 : --> single use.
if (D.44626_337 != 0)

D.44530_338 : --> single use.
switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);

D.44631_339 : --> single use.
if (D.44631_339 == 0)

D.44530_340 : --> single use.
val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);

val_341 : -->2 uses.
D.44635_342 = switch_true (val_341);
if (val_341 == 0B)
# DEBUG val => val_341

D.44635_342 : --> single use.
if (D.44635_342 == 0)

D.44471_343 : --> single use.
D.44636_344 = D.44471_343->hold_laps;

D.44636_344 : --> single use.
if (D.44636_344 == 0)

D.44471_345 : -->2 uses.
D.44471_345->hold_laps = D.44639_347;
D.44636_346 = D.44471_345->hold_laps;

D.44636_346 : --> single use.
D.44639_347 = D.44636_346 + 1;

D.44639_347 : --> single use.
D.44471_345->hold_laps = D.44639_347;

D.44640_348 : --> single use.
if (D.44640_348 != 0)

reneg_349 : --> single use.
reneg_81 = PHI <reneg_175(80), reneg_175(82), reneg_175(83), reneg_175(84), reneg_349(85), reneg_352(86)>
# DEBUG reneg => reneg_349

D.44530_350 : --> single use.
val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);

val_351 : -->2 uses.
reneg_352 = switch_true (val_351);
if (val_351 != 0B)
# DEBUG val => val_351

reneg_352 : --> single use.
reneg_81 = PHI <reneg_175(80), reneg_175(82), reneg_175(83), reneg_175(84), reneg_349(85), reneg_352(86)>
# DEBUG reneg => reneg_352

reneg_353 : --> single use.
reneg_82 = PHI <reneg_81(87), reneg_353(88), reneg_356(89)>
# DEBUG reneg => reneg_353

D.44530_354 : --> single use.
val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);

val_355 : -->2 uses.
reneg_356 = switch_true (val_355);
if (val_355 != 0B)
# DEBUG val => val_355

reneg_356 : --> single use.
reneg_82 = PHI <reneg_81(87), reneg_353(88), reneg_356(89)>
# DEBUG reneg => reneg_356

D.44649_357 : --> single use.
if (D.44649_357 != 0B)

reneg_358 : --> single use.
reneg_83 = PHI <reneg_82(90), reneg_358(91)>
# DEBUG reneg => reneg_358

D.44655_359 : --> single use.
if (D.44655_359 != 0)

codec_array_360 : --> single use.
codec_array_84 = PHI <codec_array_360(94), codec_array_190(95), codec_array_363(96)>
# DEBUG codec_array => codec_array_360

total_codecs_361 : --> single use.
total_codecs_85 = PHI <total_codecs_361(94), total_codecs_192(95), total_codecs_365(96)>
# DEBUG total_codecs => total_codecs_361

D.44471_362 : --> single use.
D.44471_362->num_codecs = 0;

codec_array_363 : --> single use.
codec_array_84 = PHI <codec_array_360(94), codec_array_190(95), codec_array_363(96)>
# DEBUG codec_array => codec_array_363

D.44471_364 : --> single use.
total_codecs_365 = D.44471_364->num_codecs;

total_codecs_365 : --> single use.
total_codecs_85 = PHI <total_codecs_361(94), total_codecs_192(95), total_codecs_365(96)>
# DEBUG total_codecs => total_codecs_365

D.44661_366 : --> single use.
if (D.44661_366 != 0B)

D.44663_367 : --> single use.
if (D.44663_367 != 0B)

D.44665_368 : --> single use.
if (D.44665_368 != 0B)

D.44530_369 : --> single use.
switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);

m_370 : --> single use.
m_28 = PHI <m_370(101), m_1093(449)>
# DEBUG m => m_370

ptime_371 : --> single use.
ptime_35 = PHI <ptime_371(166), ptime_34(188)>
# DEBUG ptime => ptime_371

maxptime_372 : --> single use.
maxptime_39 = PHI <maxptime_372(166), maxptime_38(188)>
# DEBUG maxptime => maxptime_372

D.44666_373 : --> single use.
if (D.44666_373 == 261)

got_webrtc_374 : --> single use.
got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>
# DEBUG got_webrtc => got_webrtc_374

D.44669_375 : --> single use.
if (D.44669_375 != 0B)

D.44669_376 : --> single use.
D.44672_377 = strcasecmp (D.44669_376, "UDP/TLS/RTP/SAVPF");

D.44672_377 : --> single use.
if (D.44672_377 == 0)

D.44530_378 : --> single use.
switch_channel_set_flag_value (D.44530_378, 107, 1);

D.44675_379 : -->2 uses.
D.44677_381 = D.44675_379 == 261;
D.44676_380 = D.44675_379 == 257;

D.44676_380 : --> single use.
D.44678_382 = D.44676_380 || D.44677_381;

D.44677_381 : --> single use.
D.44678_382 = D.44676_380 || D.44677_381;

D.44678_382 : --> single use.
if (D.44678_382 != 0)

D.44681_383 : --> single use.
if (D.44681_383 == 2)

got_savp_384 : --> single use.
got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>
# DEBUG got_savp => got_savp_384

got_video_savp_385 : --> single use.
got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>
# DEBUG got_video_savp => got_video_savp_385

D.44666_386 : --> single use.
if (D.44666_386 == 256)

D.44681_387 : --> single use.
if (D.44681_387 == 2)

got_avp_388 : --> single use.
got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>
# DEBUG got_avp => got_avp_388

got_video_avp_389 : --> single use.
got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>
# DEBUG got_video_avp => got_video_avp_389

D.44666_390 : --> single use.
if (D.44666_390 == 258)

got_udptl_391 : --> single use.
got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>
# DEBUG got_udptl => got_udptl_391

D.44681_392 : --> single use.
if (D.44681_392 == 8)

D.44697_393 : --> single use.
if (D.44697_393 != 0)

t38_options_394 : -->3 uses.
switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
D.44753_448 = t38_options_394->remote_port;
D.44751_445 = t38_options_394->remote_ip;
# DEBUG t38_options => t38_options_394

D.44530_395 : --> single use.
D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);

D.44699_396 : --> single use.
if (D.44699_396 != 0)

match_397 : --> single use.
match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>
# DEBUG match => match_397

D.44702_398 : --> single use.
D.44703_399 = switch_true (D.44702_398);

D.44703_399 : --> single use.
if (D.44703_399 != 0)

D.44530_400 : --> single use.
switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);

match_401 : --> single use.
match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>
# DEBUG match => match_401

var_402 : -->3 uses.
D.44716_410 = strcasecmp (var_402, "once");
pass_409 = switch_true (var_402);
if (var_402 != 0B)
# DEBUG var => var_402

D.44481_403 : --> single use.
D.44482_404 = D.44481_403->channel;

D.44482_404 : --> single use.
D.44706_405 = switch_channel_test_flag (D.44482_404, 101);

D.44706_405 : --> single use.
pass_406 = (int) D.44706_405;

pass_406 : --> single use.
pass_126 = PHI <pass_406(127), pass_409(128), pass_409(129), pass_411(130)>
# DEBUG pass => pass_406

D.44530_407 : --> single use.
D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);

D.44707_408 : --> single use.
if (D.44707_408 != 0)

pass_409 : -->3 uses.
pass_126 = PHI <pass_406(127), pass_409(128), pass_409(129), pass_411(130)>
pass_126 = PHI <pass_406(127), pass_409(128), pass_409(129), pass_411(130)>
if (pass_409 == 0)
# DEBUG pass => pass_409

D.44716_410 : --> single use.
if (D.44716_410 == 0)

pass_411 : --> single use.
pass_126 = PHI <pass_406(127), pass_409(128), pass_409(129), pass_411(130)>
# DEBUG pass => pass_411

D.44481_412 : --> single use.
D.44482_413 = D.44481_412->channel;

D.44482_413 : --> single use.
D.44723_414 = switch_channel_test_flag (D.44482_413, 101);

D.44723_414 : --> single use.
if (D.44723_414 != 0)

D.44530_415 : --> single use.
D.44724_416 = switch_channel_test_flag (D.44530_415, 103);

D.44724_416 : --> single use.
if (D.44724_416 == 0)

D.44530_417 : --> single use.
D.44726_418 = switch_channel_test_flag (D.44530_417, 15);

D.44726_418 : --> single use.
if (D.44726_418 != 0)

D.44530_419 : --> single use.
D.44728_420 = switch_channel_test_flag (D.44530_419, 29);

D.44728_420 : --> single use.
if (D.44728_420 != 0)

D.44605_421 : --> single use.
D.44730_422 = switch_rtp_ready (D.44605_421);

D.44730_422 : --> single use.
if (D.44730_422 == 0)

pass_423 : --> single use.
pass_127 = PHI <pass_126(136), pass_423(137)>
# DEBUG pass => pass_423

D.44733_424 : --> single use.
if (D.44733_424 == 0)

other_session.89_425 : --> single use.
other_channel_426 = switch_core_session_get_channel (other_session.89_425);

other_channel_426 : -->3 uses.
switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);
D.44741_434 = switch_channel_get_name (other_channel_426);
D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
# DEBUG other_channel => other_channel_426

D.44605_427 : --> single use.
remote_host_428 = switch_rtp_get_remote_host (D.44605_427);

remote_host_428 : -->3 uses.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
D.44756_449 = remote_host_428 != 0B;
# DEBUG remote_host => remote_host_428

D.44605_429 : --> single use.
remote_port_430 = switch_rtp_get_remote_port (D.44605_429);

remote_port_430 : -->3 uses.
D.44766_461 = (int) remote_port_430;
if (D.44762_456 == remote_port_430)
D.44757_450 = remote_port_430 != 0;
# DEBUG remote_port => remote_port_430

D.44737_431 : --> single use.
if (D.44737_431 == 0)

D.44530_432 : --> single use.
D.44740_433 = switch_channel_get_name (D.44530_432);

D.44740_433 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

D.44741_434 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

other_session.89_435 : --> single use.
switch_core_session_rwunlock (other_session.89_435);

pass_436 : --> no uses.
# DEBUG pass => pass_436

match_437 : --> single use.
match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>
# DEBUG match => match_437

D.44530_438 : --> single use.
D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);

D.44742_439 : --> single use.
D.44743_440 = switch_true (D.44742_439);

D.44743_440 : --> single use.
if (D.44743_440 != 0)

D.44530_441 : --> single use.
D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);

D.44746_442 : --> single use.
D.44747_443 = switch_true (D.44746_442);

D.44747_443 : --> single use.
if (D.44747_443 != 0)

D.44750_444 : --> single use.
D.44750_444->remote_sdp_ip = D.44752_446;

D.44751_445 : --> single use.
D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);

D.44752_446 : --> single use.
D.44750_444->remote_sdp_ip = D.44752_446;

D.44750_447 : --> single use.
D.44750_447->remote_sdp_port = D.44753_448;

D.44753_448 : --> single use.
D.44750_447->remote_sdp_port = D.44753_448;

D.44756_449 : --> single use.
D.44758_451 = D.44756_449 && D.44757_450;

D.44757_450 : --> single use.
D.44758_451 = D.44756_449 && D.44757_450;

D.44758_451 : --> single use.
if (D.44758_451 != 0)

D.44750_452 : --> single use.
D.44760_453 = D.44750_452->remote_sdp_ip;

D.44760_453 : --> single use.
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);

D.39032_454 : --> single use.
if (D.39032_454 == 0)

D.44750_455 : --> single use.
D.44762_456 = D.44750_455->remote_sdp_port;

D.44762_456 : --> single use.
if (D.44762_456 == remote_port_430)

D.44530_457 : --> single use.
D.44764_458 = switch_channel_get_name (D.44530_457);

D.44764_458 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);

D.44530_459 : --> single use.
D.44765_460 = switch_channel_get_name (D.44530_459);

D.44765_460 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44766_461 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44750_462 : --> single use.
D.44760_463 = D.44750_462->remote_sdp_ip;

D.44760_463 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44750_464 : --> single use.
D.44762_465 = D.44750_464->remote_sdp_port;

D.44762_465 : --> single use.
D.44767_466 = (int) D.44762_465;

D.44767_466 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44750_467 : --> single use.
D.44762_468 = D.44750_467->remote_sdp_port;

D.44762_468 : --> single use.
D.44767_469 = (int) D.44762_468;

D.44767_469 : --> single use.
switch_snprintf (&tmp, 32, "%d", D.44767_469);

D.44530_470 : --> single use.
switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);

D.44750_471 : --> single use.
D.44760_472 = D.44750_471->remote_sdp_ip;

D.44760_472 : --> single use.
switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);

D.44530_473 : --> single use.
switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);

D.44605_474 : --> single use.
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);

D.44750_475 : --> single use.
D.44760_476 = D.44750_475->remote_sdp_ip;

D.44760_476 : --> single use.
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);

D.44750_477 : --> single use.
D.44762_478 = D.44750_477->remote_sdp_port;

D.44762_478 : --> single use.
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);

D.44768_479 : --> single use.
if (D.44768_479 != 0)

err.90_480 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);

other_session.89_481 : --> single use.
switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);

D.44481_482 : --> single use.
D.44482_483 = D.44481_482->channel;

D.44482_483 : --> single use.
switch_channel_set_flag_value (D.44482_483, 101, 1);

other_session.89_484 : --> single use.
D.44772_485 = other_session.89_484->channel;

D.44772_485 : --> single use.
switch_channel_set_flag_value (D.44772_485, 101, 1);

other_session.89_486 : --> single use.
msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);

msg_487 : -->4 uses.
switch_core_session_queue_message (other_session.89_490, msg_487);
msg_487->string_arg = D.44773_489;
msg_487->from = "src/switch_core_media.c";
msg_487->message_id = 21;
# DEBUG msg => msg_487

other_session.89_488 : --> single use.
D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);

D.44773_489 : --> single use.
msg_487->string_arg = D.44773_489;

other_session.89_490 : --> single use.
switch_core_session_queue_message (other_session.89_490, msg_487);

other_session.89_491 : --> single use.
switch_core_session_rwunlock (other_session.89_491);

match_492 : --> single use.
match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>
# DEBUG match => match_492

D.44681_493 : --> single use.
if (D.44681_493 == 2)

D.44697_494 : --> single use.
D.44777_495 = D.44697_494 != 0;

D.44777_495 : --> single use.
D.44779_497 = D.44777_495 && D.44778_496;

D.44778_496 : --> single use.
D.44779_497 = D.44777_495 && D.44778_496;

D.44779_497 : --> single use.
if (D.44779_497 != 0)

D.44781_498 : --> single use.
if (D.44781_498 != 0)

D.44784_499 : --> single use.
if (D.44784_499 != 0)

attr_500 : --> single use.
attr_30 = PHI <attr_500(157), attr_506(164)>
# DEBUG attr => attr_500

D.44590_501 : --> single use.
D.44787_502 = strcasecmp (D.44590_501, "fingerprint");

D.44787_502 : --> single use.
if (D.44787_502 == 0)

D.44619_503 : -->2 uses.
D.47887_1469 = *D.44619_503;
if (D.44619_503 == 0B)
# DEBUG s => D.44619_503

D.47886_504 : --> single use.
if (D.47886_504 == 0)

got_crypto_505 : --> single use.
got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>
# DEBUG got_crypto => got_crypto_505

attr_506 : --> single use.
attr_30 = PHI <attr_500(157), attr_506(164)>
# DEBUG attr => attr_506

attr_507 : --> single use.
attr_31 = PHI <attr_507(166), attr_548(188)>
# DEBUG attr => attr_507

D.44590_508 : --> single use.
D.44795_509 = strcasecmp (D.44590_508, "rtcp");

D.44795_509 : --> single use.
if (D.44795_509 == 0)

D.44619_510 : --> single use.
if (D.44619_510 != 0B)

D.44530_511 : --> single use.
switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);

D.44619_512 : --> single use.
switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);

D.44619_513 : --> single use.
D.47890_1471 = strtol (D.44619_513, 0B, 10);
# DEBUG __nptr => D.44619_513

D.47890_514 : --> single use.
D.44799_515 = (short unsigned int) D.47890_514;

D.44799_515 : --> single use.
a_engine_188->remote_rtcp_port = D.44799_515;

D.44471_516 : --> single use.
D.44800_517 = D.44471_516->rtcp_audio_interval_msec;

D.44800_517 : --> single use.
if (D.44800_517 == 0B)

D.44471_518 : --> single use.
D.44471_518->rtcp_audio_interval_msec = "5000";

D.44590_519 : --> single use.
D.44805_520 = strcasecmp (D.44590_519, "ptime");

D.44805_520 : --> single use.
if (D.44805_520 == 0)

D.44619_521 : --> single use.
if (D.44619_521 != 0B)

D.44619_522 : --> single use.
ptime_1472 = strtol (D.44619_522, 0B, 10);
# DEBUG __nptr => D.44619_522

ptime_523 : --> single use.
ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>

D.44590_524 : --> single use.
D.44810_525 = strcasecmp (D.44590_524, "maxptime");

D.44810_525 : --> single use.
if (D.44810_525 == 0)

D.44619_526 : --> single use.
if (D.44619_526 != 0B)

D.44619_527 : --> single use.
maxptime_1473 = strtol (D.44619_527, 0B, 10);
# DEBUG __nptr => D.44619_527

maxptime_528 : --> single use.
maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>

D.44590_529 : --> single use.
D.44815_530 = strcasecmp (D.44590_529, "crypto");

D.44815_530 : --> single use.
if (D.44815_530 == 0)

D.44619_531 : -->2 uses.
D.47900_1474 = *D.44619_531;
if (D.44619_531 == 0B)
# DEBUG s => D.44619_531

D.47899_532 : --> single use.
if (D.47899_532 == 0)

D.44471_533 : --> single use.
D.44821_534 = D.44471_533->ndlb;

D.44821_534 : --> single use.
D.44822_535 = D.44821_534 & 4;

D.44822_535 : --> single use.
if (D.44822_535 == 0)

D.44530_536 : --> single use.
D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);

D.44825_537 : --> single use.
D.44826_538 = switch_true (D.44825_537);

D.44826_538 : --> single use.
if (D.44826_538 == 0)

D.44666_539 : --> single use.
D.44829_540 = D.44666_539 != 257;

D.44829_540 : --> single use.
D.44831_542 = D.44829_540 && D.44830_541;

D.44830_541 : --> single use.
D.44831_542 = D.44829_540 && D.44830_541;

D.44831_542 : --> single use.
if (D.44831_542 != 0)

match_543 : --> single use.
match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>
# DEBUG match => match_543

crypto_544 : -->2 uses.
crypto_tag_1476 = strtol (crypto_544, 0B, 10);
# DEBUG __nptr => crypto_544
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_545, sdp_type_546(D));
# DEBUG crypto => crypto_544

crypto_tag_545 : --> single use.
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_545, sdp_type_546(D));

sdp_type_546(D) : -->4 uses.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_976, sdp_type_546(D));
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_545, sdp_type_546(D));

got_crypto_547 : --> single use.
got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>
# DEBUG got_crypto => got_crypto_547

attr_548 : --> single use.
attr_31 = PHI <attr_507(166), attr_548(188)>
# DEBUG attr => attr_548

D.44834_549 : --> single use.
D.44836_551 = D.44834_549 && D.44835_550;

D.44835_550 : --> single use.
D.44836_551 = D.44834_549 && D.44835_550;

D.44836_551 : --> single use.
if (D.44836_551 != 0)

D.44839_552 : --> single use.
if (D.44839_552 == 0)

match_553 : --> single use.
match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>
# DEBUG match => match_553

connection_554 : --> single use.
connection_124 = PHI <connection_554(193), connection_556(194)>
# DEBUG connection => connection_554

D.44546_555 : --> single use.
if (D.44546_555 != 0B)

connection_556 : --> single use.
connection_124 = PHI <connection_554(193), connection_556(194)>
# DEBUG connection => connection_556

match_557 : --> single use.
match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>
# DEBUG match => match_557

x_558 : --> single use.
x_49 = PHI <x_558(197), x_48(280)>
# DEBUG x => x_558

map_559 : --> single use.
map_128 = PHI <map_559(197), map_711(280)>
# DEBUG map => map_559

map_bit_rate_560 : --> no uses.
# DEBUG map_bit_rate => map_bit_rate_560

rm_encoding_561 : -->2 uses.
rm_encoding_130 = PHI <rm_encoding_561(198), rm_encoding_562(199)>
if (rm_encoding_561 == 0B)
# DEBUG rm_encoding => rm_encoding_561

rm_encoding_562 : --> single use.
rm_encoding_130 = PHI <rm_encoding_561(198), rm_encoding_562(199)>
# DEBUG rm_encoding => rm_encoding_562

D.44848_563 : --> single use.
if (D.44848_563 == 0)

D.44854_564 : --> single use.
if (D.44854_564 == D.44855_566)

D.44750_565 : --> single use.
D.44855_566 = D.44750_565->rm_rate;

D.44855_566 : --> single use.
if (D.44854_564 == D.44855_566)

D.44856_567 : --> single use.
best_te_568 = (switch_payload_t) D.44856_567;

best_te_568 : -->2 uses.
best_te_18 = PHI <best_te_20(202), best_te_568(203)>
D.44857_569 = (int) best_te_568;
# DEBUG best_te => best_te_568

D.44857_569 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);

D.44858_570 : --> single use.
if (D.44858_570 == 0)

D.44863_571 : --> single use.
if (D.44863_571 == 0)

D.44856_572 : --> single use.
cng_pt_573 = (switch_payload_t) D.44856_572;

cng_pt_573 : -->2 uses.
cng_pt_24 = PHI <cng_pt_25(204), cng_pt_573(210), cng_pt_25(212), cng_pt_25(214), cng_pt_25(279)>
D.44868_575 = (int) cng_pt_573;
# DEBUG cng_pt => cng_pt_573

D.44605_574 : --> single use.
if (D.44605_574 != 0B)

D.44868_575 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);

D.44605_576 : --> single use.
switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

D.44471_577 : --> single use.
D.44869_578 = D.44471_577->cng_pt;

D.44869_578 : --> single use.
switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

D.44870_579 : --> single use.
if (D.44870_579 != 0)

x_580 : -->3 uses.
x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>
x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>
x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>
# DEBUG x => x_580

codec_ms_581 : -->4 uses.
codec_ms_86 = PHI <codec_ms_581(215), codec_ms_581(216), codec_ms_585(217)>
D.44878_583 = codec_ms_581 > maxptime_39;
D.44877_582 = codec_ms_581 == 0;
codec_ms_86 = PHI <codec_ms_581(215), codec_ms_581(216), codec_ms_585(217)>
# DEBUG codec_ms => codec_ms_581

D.44877_582 : --> single use.
D.44879_584 = D.44877_582 || D.44878_583;

D.44878_583 : --> single use.
D.44879_584 = D.44877_582 || D.44878_583;

D.44879_584 : --> single use.
if (D.44879_584 != 0)

codec_ms_585 : --> single use.
codec_ms_86 = PHI <codec_ms_581(215), codec_ms_581(216), codec_ms_585(217)>
# DEBUG codec_ms => codec_ms_585

D.44856_586 : --> single use.
D.44884_587 = (uint32_t) D.44856_586;

D.44884_587 : --> single use.
D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);

D.44885_588 : --> single use.
codec_ms_589 = (int) D.44885_588;

codec_ms_589 : --> single use.
codec_ms_87 = PHI <codec_ms_86(218), codec_ms_589(219)>
# DEBUG codec_ms => codec_ms_589

D.44856_590 : --> single use.
csui.173_591 = (unsigned char) D.44856_590;

csui.173_591 : --> single use.
csui.173_1477 = csui.173_591;
# DEBUG payload => csui.173_591

map_bit_rate_592 : -->3 uses.
map_bit_rate_131 = PHI <map_bit_rate_592(235), map_bit_rate_614(236)>
map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>
map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>

D.44889_593 : --> single use.
D.44890_594 = strcasecmp (D.44889_593, "g723");

D.44890_594 : --> single use.
if (D.44890_594 == 0)

codec_ms_595 : --> single use.
codec_ms_88 = PHI <codec_ms_87(223), codec_ms_87(224), codec_ms_595(225)>
# DEBUG codec_ms => codec_ms_595

remote_codec_rate_596 : --> single use.
remote_codec_rate_98 = PHI <remote_codec_rate_596(241), remote_codec_rate_97(277)>
# DEBUG remote_codec_rate => remote_codec_rate_596

fmtp_remote_codec_rate_597 : -->5 uses.
fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>
fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>
fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>
fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>
fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>
# DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_597

D.44893_598 : -->2 uses.
D.47915_1481 = *D.44893_598;
if (D.44893_598 == 0B)
# DEBUG s => D.44893_598

D.47914_599 : --> single use.
if (D.47914_599 != 0)

D.44889_600 : --> single use.
D.44897_601 = strcasecmp (D.44889_600, "ilbc");

D.44897_601 : --> single use.
if (D.44897_601 == 0)

codec_ms_602 : --> single use.
codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>
# DEBUG codec_ms => codec_ms_602

map_bit_rate_603 : --> single use.
map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>
# DEBUG map_bit_rate => map_bit_rate_603

D.44889_604 : --> single use.
D.44901_605 = strcasecmp (D.44889_604, "isac");

D.44901_605 : --> single use.
if (D.44901_605 == 0)

codec_ms_606 : --> single use.
codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>
# DEBUG codec_ms => codec_ms_606

map_bit_rate_607 : --> single use.
map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>
# DEBUG map_bit_rate => map_bit_rate_607

D.44889_608 : --> single use.
D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);

D.44893_609 : --> single use.
D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);

D.44854_610 : --> single use.
D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);

D.44905_611 : --> single use.
if (D.44905_611 == 0)

D.44908_612 : --> single use.
if (D.44908_612 != 0)

D.44908_613 : --> single use.
map_bit_rate_614 = (uint32_t) D.44908_613;

map_bit_rate_614 : --> single use.
map_bit_rate_131 = PHI <map_bit_rate_592(235), map_bit_rate_614(236)>
# DEBUG map_bit_rate => map_bit_rate_614

D.44911_615 : --> single use.
if (D.44911_615 != 0)

D.44911_616 : --> single use.
codec_ms_617 = D.44911_616 / 1000;

codec_ms_617 : --> single use.
codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>
# DEBUG codec_ms => codec_ms_617

D.44914_618 : --> single use.
if (D.44914_618 != 0)

fmtp_remote_codec_rate_619 : --> single use.
fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>
# DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_619

i_620 : --> single use.
i_129 = PHI <i_620(241), i_710(277)>
# DEBUG i => i_620

D.44471_621 : --> single use.
D.44996_622 = D.44471_621->num_codecs;

D.44996_622 : --> single use.
D.44997_623 = D.44996_622 > i_129;

D.44997_623 : --> single use.
D.44999_625 = D.44997_623 && D.44998_624;

D.44998_624 : --> single use.
D.44999_625 = D.44997_623 && D.44998_624;

D.44999_625 : --> single use.
if (D.44999_625 != 0)

i.91_626 : --> single use.
D.44918_627 = i.91_626 * 4;

D.44918_627 : --> single use.
D.44919_628 = codec_array_84 + D.44918_627;

D.44919_628 : --> single use.
imp_629 = *D.44919_628;

imp_629 : -->21 uses.
D.44929_707 = imp_629->microseconds_per_packet;
D.44927_705 = imp_629->ianacode;
D.44926_704 = imp_629->iananame;
matches[m_idx_101].imp = imp_629;
near_matches[nm_idx_116].imp = imp_629;
D.44929_698 = imp_629->microseconds_per_packet;
D.44927_696 = imp_629->ianacode;
D.44926_695 = imp_629->iananame;
D.44929_693 = imp_629->microseconds_per_packet;
D.44929_687 = imp_629->microseconds_per_packet;
D.44984_686 = imp_629->samples_per_second;
D.44926_685 = imp_629->iananame;
D.44947_658 = imp_629->actual_samples_per_second;
D.44926_656 = imp_629->iananame;
D.44927_653 = imp_629->ianacode;
D.44929_640 = imp_629->microseconds_per_packet;
D.44927_638 = imp_629->ianacode;
D.44926_637 = imp_629->iananame;
D.44921_633 = imp_629->codec_type;
codec_rate_632 = imp_629->samples_per_second;
D.44920_630 = imp_629->bits_per_second;
# DEBUG imp => imp_629

D.44920_630 : --> single use.
bit_rate_631 = (uint32_t) D.44920_630;

bit_rate_631 : -->5 uses.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
D.44956_667 = map_bit_rate_132 != bit_rate_631;
D.44951_664 = bit_rate_631 != 0;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# DEBUG bit_rate => bit_rate_631

codec_rate_632 : -->8 uses.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
codec_rate.94_702 = (int) codec_rate_632;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
if (remote_codec_rate_96 != codec_rate_632)
D.44973_678 = remote_codec_rate_96 != codec_rate_632;
D.44972_677 = codec_rate_632 != 0;
if (remote_codec_rate_98 == codec_rate_632)
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# DEBUG codec_rate => codec_rate_632

D.44921_633 : --> single use.
if (D.44921_633 != 0)

D.44856_634 : --> single use.
D.44924_635 = (int) D.44856_634;

D.44924_635 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

remote_codec_rate.92_636 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

D.44926_637 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

D.44927_638 : --> single use.
D.44928_639 = (int) D.44927_638;

D.44928_639 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

D.44929_640 : --> single use.
D.44930_641 = D.44929_640 / 1000;

D.44930_641 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

D.44889_642 : -->2 uses.
D.47919_1483 = *D.44889_642;
if (D.44889_642 == 0B)
# DEBUG s => D.44889_642

D.47918_643 : --> single use.
if (D.47918_643 != 0)

D.44471_644 : --> single use.
D.44821_645 = D.44471_644->ndlb;

D.44821_645 : --> single use.
D.44936_646 = (int) D.44821_645;

D.44936_646 : --> single use.
D.44937_647 = D.44936_646 & 1;

D.44937_647 : --> single use.
D.44938_648 = (_Bool) D.44937_647;

D.44938_648 : --> single use.
if (D.44938_648 != 0)

D.44856_649 : --> single use.
D.44924_650 = (int) D.44856_649;

D.44924_650 : --> single use.
if (D.44924_650 <= 95)

D.44856_651 : --> single use.
D.44924_652 = (int) D.44856_651;

D.44924_652 : --> single use.
match_655 = D.44924_652 == D.44928_654;

D.44927_653 : --> single use.
D.44928_654 = (int) D.44927_653;

D.44928_654 : --> single use.
match_655 = D.44924_652 == D.44928_654;

match_655 : --> single use.
match_1 = PHI <match_655(250), match_661(256), match_661(257)>
# DEBUG match => match_655

D.44926_656 : --> single use.
D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);

D.44944_657 : --> single use.
if (D.44944_657 == 0)

D.44947_658 : --> single use.
if (D.44947_658 == fmtp_remote_codec_rate_99)

iftmp.93_659 : --> single use.
iftmp.93_144 = PHI <iftmp.93_659(254), iftmp.93_660(255)>

iftmp.93_660 : --> single use.
iftmp.93_144 = PHI <iftmp.93_659(254), iftmp.93_660(255)>

match_661 : -->2 uses.
match_1 = PHI <match_655(250), match_661(256), match_661(257)>
match_1 = PHI <match_655(250), match_661(256), match_661(257)>
# DEBUG match => match_661

remote_codec_rate_662 : --> single use.
remote_codec_rate_96 = PHI <remote_codec_rate_98(250), remote_codec_rate_98(256), remote_codec_rate_662(257)>
# DEBUG remote_codec_rate => remote_codec_rate_662

D.44950_663 : --> single use.
D.44952_665 = D.44950_663 && D.44951_664;

D.44951_664 : --> single use.
D.44952_665 = D.44950_663 && D.44951_664;

D.44952_665 : --> single use.
if (D.44952_665 != 0)

D.44955_666 : --> single use.
D.44957_668 = D.44955_666 && D.44956_667;

D.44956_667 : --> single use.
D.44957_668 = D.44955_666 && D.44956_667;

D.44957_668 : --> single use.
if (D.44957_668 != 0)

D.44889_669 : --> single use.
D.44960_670 = strcasecmp (D.44889_669, "ilbc");

D.44960_670 : --> single use.
if (D.44960_670 != 0)

D.44889_671 : --> single use.
D.44963_672 = strcasecmp (D.44889_671, "isac");

D.44963_672 : --> single use.
if (D.44963_672 != 0)

match_673 : --> single use.
match_2 = PHI <match_1(258), match_1(259), match_1(260), match_1(261), match_673(262)>
# DEBUG match => match_673

D.44950_674 : --> single use.
D.44969_676 = D.44950_674 && D.44968_675;

D.44968_675 : --> single use.
D.44969_676 = D.44950_674 && D.44968_675;

D.44969_676 : --> single use.
if (D.44969_676 != 0)

D.44972_677 : --> single use.
D.44974_679 = D.44972_677 && D.44973_678;

D.44973_678 : --> single use.
D.44974_679 = D.44972_677 && D.44973_678;

D.44974_679 : --> single use.
if (D.44974_679 != 0)

D.44889_680 : --> single use.
D.44977_681 = strcasecmp (D.44889_680, "pcma");

D.44977_681 : --> single use.
if (D.44977_681 == 0)

D.44889_682 : --> single use.
D.44979_683 = strcasecmp (D.44889_682, "pcmu");

D.44979_683 : --> single use.
if (D.44979_683 == 0)

match_684 : --> single use.
match_3 = PHI <match_2(263), match_2(264), match_2(266), match_684(267)>
# DEBUG match => match_684

D.44926_685 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);

D.44984_686 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);

D.44929_687 : --> single use.
D.44930_688 = D.44929_687 / 1000;

D.44930_688 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);

D.44989_689 : --> single use.
D.44991_691 = D.44989_689 && D.44990_690;

D.44990_690 : --> single use.
D.44991_691 = D.44989_689 && D.44990_690;

D.44991_691 : --> single use.
if (D.44991_691 != 0)

D.44993_692 : --> single use.
if (D.44993_692 != D.44929_693)

D.44929_693 : --> single use.
if (D.44993_692 != D.44929_693)

match_694 : --> single use.
match_4 = PHI <match_5(243), match_3(268), match_694(274), match_709(276)>
# DEBUG match => match_694

D.44926_695 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);

D.44927_696 : --> single use.
D.44928_697 = (int) D.44927_696;

D.44928_697 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);

D.44929_698 : --> single use.
D.44930_699 = D.44929_698 / 1000;

D.44930_699 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);

remote_codec_rate.92_700 : --> single use.
near_matches[nm_idx_116].rate = remote_codec_rate.92_700;

nm_idx_701 : --> single use.
nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>
# DEBUG nm_idx => nm_idx_701

codec_rate.94_702 : --> single use.
matches[m_idx_101].rate = codec_rate.94_702;

m_idx_703 : -->3 uses.
m_idx_100 = PHI <m_idx_101(243), m_idx_101(268), m_idx_101(274), m_idx_703(276)>
m_idx_102 = PHI <m_idx_703(275), m_idx_101(278)>
if (m_idx_703 > 29)
# DEBUG m_idx => m_idx_703

D.44926_704 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);

D.44927_705 : --> single use.
D.44928_706 = (int) D.44927_705;

D.44928_706 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);

D.44929_707 : --> single use.
D.44930_708 = D.44929_707 / 1000;

D.44930_708 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);

match_709 : --> single use.
match_4 = PHI <match_5(243), match_3(268), match_694(274), match_709(276)>
# DEBUG match => match_709

i_710 : --> single use.
i_129 = PHI <i_620(241), i_710(277)>
# DEBUG i => i_710

map_711 : --> single use.
map_128 = PHI <map_559(197), map_711(280)>
# DEBUG map => map_711

D.45001_712 : --> single use.
D.45002_713 = D.45001_712 == 1;

D.45002_713 : --> single use.
D.45004_715 = D.45002_713 && D.45003_714;

D.45003_714 : --> single use.
D.45004_715 = D.45002_713 && D.45003_714;

D.45004_715 : --> single use.
if (D.45004_715 != 0)

match_716 : --> single use.
match_10 = PHI <match_9(282), match_716(283)>
# DEBUG match => match_716

nm_idx_717 : -->2 uses.
nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>
m_idx_718 = nm_idx_717;
# DEBUG nm_idx => nm_idx_717

m_idx_718 : --> single use.
m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>
# DEBUG m_idx => m_idx_718

D.45007_719 : --> single use.
D.45009_721 = D.45007_719 && D.45008_720;

D.45008_720 : --> single use.
D.45009_721 = D.45007_719 && D.45008_720;

D.45009_721 : --> single use.
if (D.45009_721 != 0)

j_722 : --> single use.
j_133 = PHI <j_722(285), j_736(295)>
# DEBUG j => j_722

timp_723 : --> no uses.
# DEBUG timp => timp_723

D.45012_724 : --> single use.
near_rate_725 = (uint32_t) D.45012_724;

near_rate_725 : -->3 uses.
near_rate.96_743 = (int) near_rate_725;
near_rate_730 = near_rate_725;
if (near_rate_725 == 0)
# DEBUG near_rate => near_rate_725

near_match_726 : -->3 uses.
timp_733 = near_match_726;
near_rate_729 = near_match_726->samples_per_second;
D.45013_728 = near_match_726->iananame;
# DEBUG near_match => near_match_726

near_map_727 : --> single use.
matches[m_idx_106].map = near_map_727;
# DEBUG near_map => near_map_727

D.45013_728 : --> single use.
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);

near_rate_729 : --> single use.
near_rate_145 = PHI <near_rate_729(287), near_rate_730(288)>

near_rate_730 : --> single use.
near_rate_145 = PHI <near_rate_729(287), near_rate_730(288)>

num_731 : --> single use.
if (num_731 != 0)
# DEBUG num => num_731

timp_732 : --> single use.
timp_134 = PHI <timp_732(290), timp_733(291)>
# DEBUG timp => timp_732

timp_733 : --> single use.
timp_134 = PHI <timp_732(290), timp_733(291)>
# DEBUG timp => timp_733

D.45024_734 : --> single use.
D.45025_735 = D.45024_734 / 1000;

D.45025_735 : --> single use.
if (D.45025_735 <= maxptime_39)

j_736 : --> single use.
j_133 = PHI <j_722(285), j_736(295)>
# DEBUG j => j_736

D.45026_737 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);

D.45024_738 : --> single use.
D.45025_739 = D.45024_738 / 1000;

D.45025_739 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);

D.45027_740 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);

match_741 : --> single use.
match_11 = PHI <match_10(284), match_741(294), match_10(296)>
# DEBUG match => match_741

D.45028_742 : --> single use.
matches[m_idx_106].codec_idx = D.45028_742;

near_rate.96_743 : --> single use.
matches[m_idx_106].rate = near_rate.96_743;

m_idx_744 : --> single use.
m_idx_107 = PHI <m_idx_106(284), m_idx_744(294), m_idx_106(296)>
# DEBUG m_idx => m_idx_744

match_745 : --> single use.
match_12 = PHI <match_11(297), match_745(322)>
# DEBUG match => match_745

j_746 : --> single use.
j_135 = PHI <j_746(300), j_807(321)>
# DEBUG j => j_746

D.45034_747 : --> single use.
D.45035_748 = D.45034_747->rm_encoding;

D.45035_748 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

D.45034_749 : --> single use.
D.45036_750 = D.45034_749->rm_fmtp;

D.45036_750 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

D.45034_751 : --> single use.
D.45037_752 = D.45034_751->rm_pt;

D.45037_752 : --> single use.
D.45038_753 = (uint32_t) D.45037_752;

D.45038_753 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

D.45039_754 : --> single use.
D.45040_755 = D.45039_754->samples_per_second;

D.45040_755 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

D.45039_756 : --> single use.
D.45041_757 = D.45039_756->microseconds_per_packet;

D.45041_757 : --> single use.
D.45042_758 = D.45041_757 / 1000;

D.45042_758 : --> single use.
D.45043_759 = (uint32_t) D.45042_758;

D.45043_759 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

pmap_760 : -->23 uses.
pmap_760->recv_pt = D.45054_806;
pmap_760->agreed_pt = D.45054_802;
pmap_760->rm_fmtp = D.45088_800;
pmap_760->remote_sdp_port = D.45087_798;
pmap_760->remote_sdp_ip = D.45086_796;
pmap_760->adv_channels = D.45073_794;
D.45073_794 = pmap_760->channels;
pmap_760->channels = 1;
pmap_760->channels = 2;
pmap_760->adv_channels = 2;
pmap_760->adv_channels = 1;
D.45073_789 = pmap_760->channels;
pmap_760->channels = D.47922_146;
pmap_760->bitrate = D.45064_782;
pmap_760->codec_ms = D.45062_780;
pmap_760->rm_rate = D.45059_777;
pmap_760->adv_rm_rate = D.45055_774;
pmap_760->rm_rate = D.45055_773;
pmap_760->recv_pt = D.45054_772;
pmap_760->iananame = D.45052_770;
pmap_760->rm_encoding = D.45050_768;
D.45048_766 = pmap_760->pt;
a_engine_188->cur_payload_map = pmap_760;
# DEBUG pmap => pmap_760

mimp_761 : -->8 uses.
smh_186->negotiated_codecs[D.44655_803] = mimp_761;
D.45063_781 = mimp_761->bits_per_second;
D.45060_778 = mimp_761->microseconds_per_packet;
D.45059_777 = mimp_761->actual_samples_per_second;
D.45051_775 = mimp_761->iananame;
D.45055_774 = mimp_761->samples_per_second;
D.45055_773 = mimp_761->samples_per_second;
D.45051_769 = mimp_761->iananame;
# DEBUG mimp => mimp_761

mmap_762 : -->10 uses.
D.45053_805 = mmap_762->rm_pt;
D.45053_801 = mmap_762->rm_pt;
D.45079_799 = mmap_762->rm_fmtp;
D.45079_792 = mmap_762->rm_fmtp;
D.45079_790 = mmap_762->rm_fmtp;
D.45049_787 = mmap_762->rm_encoding;
D.45066_784 = mmap_762->rm_params;
D.45066_783 = mmap_762->rm_params;
D.45053_771 = mmap_762->rm_pt;
D.45049_767 = mmap_762->rm_encoding;
# DEBUG mmap => mmap_762

D.44750_763 : --> single use.
D.44750_763->current = 1;

D.44605_764 : --> single use.
if (D.44605_764 != 0B)

D.44605_765 : --> single use.
switch_rtp_set_default_payload (D.44605_765, D.45048_766);

D.45048_766 : --> single use.
switch_rtp_set_default_payload (D.44605_765, D.45048_766);

D.45049_767 : --> single use.
D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);

D.45050_768 : --> single use.
pmap_760->rm_encoding = D.45050_768;

D.45051_769 : --> single use.
D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);

D.45052_770 : --> single use.
pmap_760->iananame = D.45052_770;

D.45053_771 : --> single use.
D.45054_772 = (unsigned char) D.45053_771;

D.45054_772 : --> single use.
pmap_760->recv_pt = D.45054_772;

D.45055_773 : --> single use.
pmap_760->rm_rate = D.45055_773;

D.45055_774 : --> single use.
pmap_760->adv_rm_rate = D.45055_774;

D.45051_775 : --> single use.
D.45056_776 = strcasecmp (D.45051_775, "g722");

D.45056_776 : --> single use.
if (D.45056_776 != 0)

D.45059_777 : --> single use.
pmap_760->rm_rate = D.45059_777;

D.45060_778 : --> single use.
D.45061_779 = D.45060_778 / 1000;

D.45061_779 : --> single use.
D.45062_780 = (uint32_t) D.45061_779;

D.45062_780 : --> single use.
pmap_760->codec_ms = D.45062_780;

D.45063_781 : --> single use.
D.45064_782 = (uint32_t) D.45063_781;

D.45064_782 : --> single use.
pmap_760->bitrate = D.45064_782;

D.45066_783 : --> single use.
if (D.45066_783 != 0B)

D.45066_784 : --> single use.
D.47922_1485 = strtol (D.45066_784, 0B, 10);
# DEBUG __nptr => D.45066_784

D.47922_785 : --> single use.
D.47922_146 = PHI <D.47922_785(307), D.47922_786(308)>

D.47922_786 : --> single use.
D.47922_146 = PHI <D.47922_785(307), D.47922_786(308)>

D.45049_787 : --> single use.
D.45070_788 = strcasecmp (D.45049_787, "opus");

D.45070_788 : --> single use.
if (D.45070_788 == 0)

D.45073_789 : --> single use.
if (D.45073_789 == 1)

D.45079_790 : -->2 uses.
D.47926_1486 = *D.45079_790;
if (D.45079_790 == 0B)
# DEBUG s => D.45079_790

D.47925_791 : --> single use.
if (D.47925_791 == 0)

D.45079_792 : --> single use.
D.45082_793 = switch_stristr ("stereo=1", D.45079_792);

D.45082_793 : --> single use.
if (D.45082_793 != 0B)

D.45073_794 : --> single use.
pmap_760->adv_channels = D.45073_794;

D.45085_795 : --> single use.
D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);

D.45086_796 : --> single use.
pmap_760->remote_sdp_ip = D.45086_796;

D.44697_797 : --> single use.
D.45087_798 = (short unsigned int) D.44697_797;

D.45087_798 : --> single use.
pmap_760->remote_sdp_port = D.45087_798;

D.45079_799 : --> single use.
D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);

D.45088_800 : --> single use.
pmap_760->rm_fmtp = D.45088_800;

D.45053_801 : --> single use.
D.45054_802 = (unsigned char) D.45053_801;

D.45054_802 : --> single use.
pmap_760->agreed_pt = D.45054_802;

D.44655_803 : -->2 uses.
D.45089_804 = D.44655_803 + 1;
smh_186->negotiated_codecs[D.44655_803] = mimp_761;

D.45089_804 : --> single use.
smh_186->num_negotiated_codecs = D.45089_804;

D.45053_805 : --> single use.
D.45054_806 = (unsigned char) D.45053_805;

D.45054_806 : --> single use.
pmap_760->recv_pt = D.45054_806;

j_807 : --> single use.
j_135 = PHI <j_746(300), j_807(321)>
# DEBUG j => j_807

D.44750_808 : --> single use.
D.44762_809 = D.44750_808->remote_sdp_port;

D.44762_809 : --> single use.
D.44767_810 = (int) D.44762_809;

D.44767_810 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.44767_810);

D.44530_811 : --> single use.
switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);

D.44750_812 : --> single use.
D.44760_813 = D.44750_812->remote_sdp_ip;

D.44760_813 : --> single use.
switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);

D.44530_814 : --> single use.
switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);

D.44750_815 : --> single use.
D.45092_816 = D.44750_815->recv_pt;

D.45092_816 : --> single use.
D.45093_817 = (int) D.45092_816;

D.45093_817 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45093_817);

D.44530_818 : --> single use.
switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);

D.45094_819 : -->5 uses.
D.47930_1492 = D.45094_819->implementation;
D.47931_1491 = D.45094_819->codec_interface;
D.47932_1490 = D.45094_819->mutex;
D.47934_1488 = D.45094_819->flags;
if (D.45094_819 != 0B)
# DEBUG codec => D.45094_819

D.47929_820 : --> single use.
if (D.47929_820 != 0)

D.44471_821 : --> single use.
D.45098_822 = D.44471_821->codec_flags;

D.45098_822 : --> single use.
D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);

D.45099_823 : --> single use.
if (D.45099_823 == 0)

got_audio_824 : --> single use.
got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>
# DEBUG got_audio => got_audio_824

match_825 : --> single use.
match_13 = PHI <match_12(323), match_12(333), match_825(334)>
# DEBUG match => match_825

D.45107_826 : --> single use.
if (D.45107_826 != 0)

D.44530_827 : --> single use.
D.45109_828 = switch_channel_test_flag (D.44530_827, 93);

D.45109_828 : --> single use.
if (D.45109_828 != 0)

D.44471_829 : --> single use.
D.45110_830 = D.44471_829->te;

D.45110_830 : --> single use.
D.45111_831 = (int) D.45110_830;

D.45111_831 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);

D.44471_832 : --> single use.
best_te_833 = D.44471_832->te;

best_te_833 : --> single use.
best_te_21 = PHI <best_te_20(335), best_te_20(337), best_te_833(338)>
# DEBUG best_te => best_te_833

D.45114_834 : --> single use.
if (D.45114_834 == 1)

D.44471_835 : -->2 uses.
te_836 = D.44471_835->te;
D.44471_835->te = best_te_21;

te_836 : --> no uses.
# DEBUG te => te_836

D.44857_837 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);

D.44530_838 : --> single use.
switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);

D.44471_839 : --> single use.
D.44471_839->dtmf_type = 0;

D.44605_840 : --> single use.
if (D.44605_840 != 0B)

D.44605_841 : --> single use.
switch_rtp_set_telephony_event (D.44605_841, best_te_21);

D.44530_842 : --> single use.
switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_843);

D.44857_843 : --> single use.
switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_843);

D.44471_844 : --> no uses.

D.44471_845 : -->4 uses.
te_847 = D.44471_845->recv_te;
D.44471_845->recv_te = D.45110_846;
D.45110_846 = D.44471_845->te;
D.44471_845->te = best_te_21;

D.45110_846 : --> single use.
D.44471_845->recv_te = D.45110_846;

te_847 : -->5 uses.
D.45120_857 = (int) te_847;
switch_rtp_set_telephony_recv_event (D.44605_855, te_847);
D.45120_854 = (int) te_847;
switch_rtp_set_telephony_event (D.44605_852, te_847);
D.45120_848 = (int) te_847;
# DEBUG te => te_847

D.45120_848 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);

D.44530_849 : --> single use.
switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);

D.44471_850 : --> single use.
D.44471_850->dtmf_type = 0;

D.44605_851 : --> single use.
if (D.44605_851 != 0B)

D.44605_852 : --> single use.
switch_rtp_set_telephony_event (D.44605_852, te_847);

D.44530_853 : --> single use.
switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_854);

D.45120_854 : --> single use.
switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_854);

D.44605_855 : --> single use.
switch_rtp_set_telephony_recv_event (D.44605_855, te_847);

D.44530_856 : --> single use.
switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_857);

D.45120_857 : --> single use.
switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_857);

D.45124_858 : --> single use.
D.45125_859 = switch_false (D.45124_858);

D.45125_859 : --> single use.
if (D.45125_859 == 0)

D.44530_860 : --> single use.
switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);

D.44471_861 : --> single use.
D.44471_861->dtmf_type = 1;

D.44471_862 : --> no uses.

D.44471_863 : -->4 uses.
te_865 = D.44471_863->recv_te;
D.44471_863->recv_te = D.45110_864;
D.45110_864 = D.44471_863->te;
D.44471_863->te = 0;

D.45110_864 : --> single use.
D.44471_863->recv_te = D.45110_864;

te_865 : --> no uses.
# DEBUG te => te_865

D.44530_866 : --> single use.
switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);

D.44471_867 : --> single use.
D.44471_867->dtmf_type = 2;

D.44471_868 : --> no uses.

D.44471_869 : -->4 uses.
te_871 = D.44471_869->recv_te;
D.44471_869->recv_te = D.45110_870;
D.45110_870 = D.44471_869->te;
D.44471_869->te = 0;

D.45110_870 : --> single use.
D.44471_869->recv_te = D.45110_870;

te_871 : --> no uses.
# DEBUG te => te_871

D.44681_872 : --> single use.
if (D.44681_872 == 3)

D.44697_873 : --> single use.
if (D.44697_873 != 0)

mimp_874 : --> no uses.
# DEBUG mimp => mimp_874

vmatch_875 : --> no uses.
# DEBUG vmatch => vmatch_875

nm_idx_876 : -->3 uses.
nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
# DEBUG nm_idx => nm_idx_876

m_idx_877 : --> single use.
m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>
# DEBUG m_idx => m_idx_877

D.44530_878 : --> single use.
switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);

connection_879 : --> single use.
connection_125 = PHI <connection_879(350), connection_881(351)>
# DEBUG connection => connection_879

D.44546_880 : --> single use.
if (D.44546_880 != 0B)

connection_881 : --> single use.
connection_125 = PHI <connection_879(350), connection_881(351)>
# DEBUG connection => connection_881

match_882 : --> single use.
match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>
# DEBUG match => match_882

map_883 : --> single use.
map_136 = PHI <map_883(354), map_1021(424)>
# DEBUG map => map_883

D.45137_884 : --> single use.
if (D.45137_884 != 0)

D.45140_885 : --> single use.
if (D.45140_885 != 0)

attr_886 : --> single use.
attr_32 = PHI <attr_886(357), attr_892(364)>
# DEBUG attr => attr_886

D.44590_887 : --> single use.
D.45143_888 = strcasecmp (D.44590_887, "fingerprint");

D.45143_888 : --> single use.
if (D.45143_888 == 0)

D.44619_889 : -->2 uses.
D.47939_1495 = *D.44619_889;
if (D.44619_889 == 0B)
# DEBUG s => D.44619_889

D.47938_890 : --> single use.
if (D.47938_890 == 0)

got_video_crypto_891 : --> single use.
got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>
# DEBUG got_video_crypto => got_video_crypto_891

attr_892 : --> single use.
attr_32 = PHI <attr_886(357), attr_892(364)>
# DEBUG attr => attr_892

attr_893 : --> single use.
attr_33 = PHI <attr_893(366), attr_978(400)>
# DEBUG attr => attr_893

D.44590_894 : --> single use.
D.45151_895 = strcasecmp (D.44590_894, "framerate");

D.45151_895 : --> single use.
if (D.45151_895 == 0)

D.44619_896 : --> single use.
if (D.44619_896 != 0B)

D.44590_897 : --> single use.
D.45154_898 = strcasecmp (D.44590_897, "rtcp-fb");

D.45154_898 : --> single use.
if (D.45154_898 == 0)

D.44619_899 : -->2 uses.
D.47943_1497 = *D.44619_899;
if (D.44619_899 == 0B)
# DEBUG s => D.44619_899

D.47942_900 : --> single use.
if (D.47942_900 == 0)

D.44619_901 : --> single use.
D.45160_902 = switch_stristr ("fir", D.44619_901);

D.45160_902 : --> single use.
if (D.45160_902 != 0B)

D.45163_903 : --> single use.
D.45164_904 = D.45163_903 + 1;

D.45164_904 : --> single use.
v_engine_189->fir = D.45164_904;

D.44471_905 : --> single use.
D.44471_905->rtcp_video_interval_msec = "10000";

D.44590_906 : --> single use.
D.45168_907 = strcasecmp (D.44590_906, "rtcp");

D.45168_907 : --> single use.
if (D.45168_907 == 0)

D.44619_908 : --> single use.
if (D.44619_908 != 0B)

__s2_len_909 : -->4 uses.
D.45200_937 = __s2_len_909 > 2;
D.45190_927 = __s2_len_909 > 1;
D.45179_917 = __s2_len_909 != 0;
if (__s2_len_909 <= 3)
# DEBUG __s2_len => __s2_len_909

__s1_910 : -->4 uses.
D.45204_940 = __s1_910 + 3;
D.45194_930 = __s1_910 + 2;
D.45184_920 = __s1_910 + 1;
D.45174_911 = *__s1_910;
# DEBUG __s1 => __s1_910

D.45174_911 : --> single use.
D.45175_912 = (int) D.45174_911;

D.45175_912 : --> single use.
__result_916 = D.45175_912 - D.45178_915;

D.45176_913 : --> single use.
D.45177_914 = MEM[(const unsigned char *)D.45176_913];

D.45177_914 : --> single use.
D.45178_915 = (int) D.45177_914;

D.45178_915 : --> single use.
__result_916 = D.45175_912 - D.45178_915;

__result_916 : -->2 uses.
__result_140 = PHI <__result_916(380), __result_926(381), __result_936(382), __result_946(383)>
D.45180_918 = __result_916 == 0;
# DEBUG __result => __result_916

D.45179_917 : --> single use.
D.45181_919 = D.45179_917 && D.45180_918;

D.45180_918 : --> single use.
D.45181_919 = D.45179_917 && D.45180_918;

D.45181_919 : --> single use.
if (D.45181_919 != 0)

D.45184_920 : --> single use.
D.45185_921 = *D.45184_920;

D.45185_921 : --> single use.
D.45186_922 = (int) D.45185_921;

D.45186_922 : --> single use.
__result_926 = D.45186_922 - D.45189_925;

D.45187_923 : --> single use.
D.45188_924 = MEM[(const unsigned char *)D.45187_923];

D.45188_924 : --> single use.
D.45189_925 = (int) D.45188_924;

D.45189_925 : --> single use.
__result_926 = D.45186_922 - D.45189_925;

__result_926 : -->2 uses.
__result_140 = PHI <__result_916(380), __result_926(381), __result_936(382), __result_946(383)>
D.45180_928 = __result_926 == 0;
# DEBUG __result => __result_926

D.45190_927 : --> single use.
D.45191_929 = D.45190_927 && D.45180_928;

D.45180_928 : --> single use.
D.45191_929 = D.45190_927 && D.45180_928;

D.45191_929 : --> single use.
if (D.45191_929 != 0)

D.45194_930 : --> single use.
D.45195_931 = *D.45194_930;

D.45195_931 : --> single use.
D.45196_932 = (int) D.45195_931;

D.45196_932 : --> single use.
__result_936 = D.45196_932 - D.45199_935;

D.45197_933 : --> single use.
D.45198_934 = MEM[(const unsigned char *)D.45197_933];

D.45198_934 : --> single use.
D.45199_935 = (int) D.45198_934;

D.45199_935 : --> single use.
__result_936 = D.45196_932 - D.45199_935;

__result_936 : -->2 uses.
__result_140 = PHI <__result_916(380), __result_926(381), __result_936(382), __result_946(383)>
D.45180_938 = __result_936 == 0;
# DEBUG __result => __result_936

D.45200_937 : --> single use.
D.45201_939 = D.45200_937 && D.45180_938;

D.45180_938 : --> single use.
D.45201_939 = D.45200_937 && D.45180_938;

D.45201_939 : --> single use.
if (D.45201_939 != 0)

D.45204_940 : --> single use.
D.45205_941 = *D.45204_940;

D.45205_941 : --> single use.
D.45206_942 = (int) D.45205_941;

D.45206_942 : --> single use.
__result_946 = D.45206_942 - D.45209_945;

D.45207_943 : --> single use.
D.45208_944 = MEM[(const unsigned char *)D.45207_943];

D.45208_944 : --> single use.
D.45209_945 = (int) D.45208_944;

D.45209_945 : --> single use.
__result_946 = D.45206_942 - D.45209_945;

__result_946 : --> single use.
__result_140 = PHI <__result_916(380), __result_926(381), __result_936(382), __result_946(383)>
# DEBUG __result => __result_946

__result_947 : --> single use.
__result_948 = __result_947;

__result_948 : --> single use.
__result_147 = PHI <__result_948(384), __result_950(385)>

D.44619_949 : --> single use.
__result_950 = __builtin_strcmp (D.44619_949, "1");

__result_950 : --> single use.
__result_147 = PHI <__result_948(384), __result_950(385)>

__result_951 : --> single use.
if (__result_951 == 0)

D.44530_952 : --> single use.
switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_953, 1);

D.44619_953 : --> single use.
switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_953, 1);

D.44619_954 : --> single use.
D.47946_1499 = strtol (D.44619_954, 0B, 10);
# DEBUG __nptr => D.44619_954

D.47946_955 : --> single use.
D.45213_956 = (short unsigned int) D.47946_955;

D.45213_956 : --> single use.
v_engine_189->remote_rtcp_port = D.45213_956;

D.44471_957 : --> single use.
D.45214_958 = D.44471_957->rtcp_video_interval_msec;

D.45214_958 : --> single use.
if (D.45214_958 == 0B)

D.44471_959 : --> single use.
D.44471_959->rtcp_video_interval_msec = "5000";

D.44590_960 : --> single use.
D.45219_961 = strcasecmp (D.44590_960, "crypto");

D.45219_961 : --> single use.
if (D.45219_961 == 0)

D.44619_962 : -->2 uses.
D.47950_1500 = *D.44619_962;
if (D.44619_962 == 0B)
# DEBUG s => D.44619_962

D.47949_963 : --> single use.
if (D.47949_963 == 0)

D.44471_964 : --> single use.
D.44821_965 = D.44471_964->ndlb;

D.44821_965 : --> single use.
D.44822_966 = D.44821_965 & 4;

D.44822_966 : --> single use.
if (D.44822_966 == 0)

D.44530_967 : --> single use.
D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);

D.45227_968 : --> single use.
D.45228_969 = switch_true (D.45227_968);

D.45228_969 : --> single use.
if (D.45228_969 == 0)

D.44666_970 : --> single use.
D.44829_971 = D.44666_970 != 257;

D.44829_971 : --> single use.
D.44831_973 = D.44829_971 && D.44830_972;

D.44830_972 : --> single use.
D.44831_973 = D.44829_971 && D.44830_972;

D.44831_973 : --> single use.
if (D.44831_973 != 0)

match_974 : --> single use.
match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>
# DEBUG match => match_974

crypto_975 : -->2 uses.
crypto_tag_1502 = strtol (crypto_975, 0B, 10);
# DEBUG __nptr => crypto_975
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_976, sdp_type_546(D));
# DEBUG crypto => crypto_975

crypto_tag_976 : --> single use.
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_976, sdp_type_546(D));

got_video_crypto_977 : --> single use.
got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>
# DEBUG got_video_crypto => got_video_crypto_977

attr_978 : --> single use.
attr_33 = PHI <attr_893(366), attr_978(400)>
# DEBUG attr => attr_978

rm_encoding_979 : -->2 uses.
rm_encoding_137 = PHI <rm_encoding_979(402), rm_encoding_980(403)>
if (rm_encoding_979 == 0B)
# DEBUG rm_encoding => rm_encoding_979

rm_encoding_980 : --> single use.
rm_encoding_137 = PHI <rm_encoding_979(402), rm_encoding_980(403)>
# DEBUG rm_encoding => rm_encoding_980

i_981 : --> single use.
i_139 = PHI <i_981(404), i_1020(422)>
# DEBUG i => i_981

i.99_982 : --> single use.
D.45236_983 = i.99_982 * 4;

D.45236_983 : --> single use.
D.45237_984 = codec_array_84 + D.45236_983;

D.45237_984 : --> single use.
imp_985 = *D.45237_984;

imp_985 : -->9 uses.
D.45250_1016 = imp_985->ianacode;
D.45249_1015 = imp_985->iananame;
matches[m_idx_110].imp = imp_985;
D.45263_1014 = imp_985->samples_per_second;
D.45249_1010 = imp_985->iananame;
D.45250_1007 = imp_985->ianacode;
D.45250_994 = imp_985->ianacode;
D.45249_993 = imp_985->iananame;
D.45238_986 = imp_985->codec_type;
# DEBUG imp => imp_985

D.45238_986 : --> single use.
if (D.45238_986 != 1)

D.44530_987 : --> single use.
D.45241_988 = switch_channel_direction (D.44530_987);

D.45241_988 : --> single use.
if (D.45241_988 == 0)

D.44530_989 : --> single use.
D.45244_990 = switch_channel_test_flag (D.44530_989, 114);

D.45244_990 : --> single use.
if (D.45244_990 != 0)

D.45247_991 : --> single use.
D.45248_992 = (int) D.45247_991;

D.45248_992 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);

D.45249_993 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);

D.45250_994 : --> single use.
D.45251_995 = (int) D.45250_994;

D.45251_995 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);

D.45255_996 : -->2 uses.
D.47957_1503 = *D.45255_996;
if (D.45255_996 == 0B)
# DEBUG s => D.45255_996

D.47956_997 : --> single use.
if (D.47956_997 != 0)

D.44471_998 : --> single use.
D.44821_999 = D.44471_998->ndlb;

D.44821_999 : --> single use.
D.44936_1000 = (int) D.44821_999;

D.44936_1000 : --> single use.
D.44937_1001 = D.44936_1000 & 1;

D.44937_1001 : --> single use.
D.44938_1002 = (_Bool) D.44937_1001;

D.44938_1002 : --> single use.
if (D.44938_1002 != 0)

D.45247_1003 : --> single use.
D.45248_1004 = (int) D.45247_1003;

D.45248_1004 : --> single use.
if (D.45248_1004 <= 95)

D.45247_1005 : --> single use.
D.45248_1006 = (int) D.45247_1005;

D.45248_1006 : --> single use.
vmatch_1009 = D.45248_1006 == D.45251_1008;

D.45250_1007 : --> single use.
D.45251_1008 = (int) D.45250_1007;

D.45251_1008 : --> single use.
vmatch_1009 = D.45248_1006 == D.45251_1008;

vmatch_1009 : --> single use.
vmatch_138 = PHI <vmatch_1009(416), vmatch_1012(417)>
# DEBUG vmatch => vmatch_1009

D.45249_1010 : --> single use.
D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);

D.45259_1011 : --> single use.
vmatch_1012 = D.45259_1011 == 0;

vmatch_1012 : --> single use.
vmatch_138 = PHI <vmatch_1009(416), vmatch_1012(417)>
# DEBUG vmatch => vmatch_1012

D.45262_1013 : --> single use.
if (D.45262_1013 == D.45263_1014)

D.45263_1014 : --> single use.
if (D.45262_1013 == D.45263_1014)

D.45249_1015 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);

D.45250_1016 : --> single use.
D.45251_1017 = (int) D.45250_1016;

D.45251_1017 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);

m_idx_1018 : --> single use.
m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>
# DEBUG m_idx => m_idx_1018

vmatch_1019 : --> no uses.
# DEBUG vmatch => vmatch_1019

i_1020 : --> single use.
i_139 = PHI <i_981(404), i_1020(422)>
# DEBUG i => i_1020

map_1021 : --> single use.
map_136 = PHI <map_883(354), map_1021(424)>
# DEBUG map => map_1021

D.45001_1022 : --> single use.
D.45002_1023 = D.45001_1022 == 1;

D.45002_1023 : --> single use.
D.45267_1025 = D.45002_1023 && D.45266_1024;

D.45266_1024 : --> single use.
D.45267_1025 = D.45002_1023 && D.45266_1024;

D.45267_1025 : --> single use.
if (D.45267_1025 != 0)

vmatch_1026 : --> no uses.
# DEBUG vmatch => vmatch_1026

m_idx_1027 : --> single use.
m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>
# DEBUG m_idx => m_idx_1027

j_1028 : --> no uses.
# DEBUG j => j_1028

vmatch_1029 : --> single use.
D.45308_1087 = vmatch_1029 != 0;
# DEBUG vmatch => vmatch_1029

j_1030 : --> single use.
j_141 = PHI <j_1030(431), j_1067(435)>
# DEBUG j => j_1030

D.45274_1031 : --> single use.
D.45275_1032 = D.45274_1031->rm_encoding;

D.45275_1032 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

D.45274_1033 : --> single use.
D.45276_1034 = D.45274_1033->rm_fmtp;

D.45276_1034 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

D.45274_1035 : --> single use.
D.45277_1036 = D.45274_1035->rm_pt;

D.45277_1036 : --> single use.
D.45278_1037 = (uint32_t) D.45277_1036;

D.45278_1037 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

D.45279_1038 : --> single use.
D.45280_1039 = D.45279_1038->samples_per_second;

D.45280_1039 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

D.45279_1040 : --> single use.
D.45281_1041 = D.45279_1040->microseconds_per_packet;

D.45281_1041 : --> single use.
D.45282_1042 = D.45281_1041 / 1000;

D.45282_1042 : --> single use.
D.45283_1043 = (uint32_t) D.45282_1042;

D.45283_1043 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

pmap_1044 : -->10 uses.
pmap_1044->agreed_pt = D.45292_1066;
pmap_1044->rm_fmtp = D.45298_1064;
pmap_1044->remote_sdp_port = D.45087_1062;
pmap_1044->remote_sdp_ip = D.45296_1060;
pmap_1044->codec_ms = D.45295_1058;
pmap_1044->rm_rate = D.45262_1055;
pmap_1044->recv_pt = D.45292_1054;
pmap_1044->rm_encoding = D.45291_1052;
D.45290_1048 = pmap_1044->pt;
v_engine_189->cur_payload_map = pmap_1044;
# DEBUG pmap => pmap_1044

D.45286_1045 : --> single use.
D.45286_1045->current = 1;

D.45287_1046 : --> single use.
if (D.45287_1046 != 0B)

D.45287_1047 : --> single use.
switch_rtp_set_default_payload (D.45287_1047, D.45290_1048);

D.45290_1048 : --> single use.
switch_rtp_set_default_payload (D.45287_1047, D.45290_1048);

mimp_1049 : --> single use.
D.45293_1056 = mimp_1049->microseconds_per_packet;
# DEBUG mimp => mimp_1049

map_1050 : -->5 uses.
D.45247_1065 = map_1050->rm_pt;
D.45297_1063 = map_1050->rm_fmtp;
D.45262_1055 = map_1050->rm_rate;
D.45247_1053 = map_1050->rm_pt;
D.45255_1051 = map_1050->rm_encoding;
# DEBUG map => map_1050

D.45255_1051 : --> single use.
D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);

D.45291_1052 : --> single use.
pmap_1044->rm_encoding = D.45291_1052;

D.45247_1053 : --> single use.
D.45292_1054 = (unsigned char) D.45247_1053;

D.45292_1054 : --> single use.
pmap_1044->recv_pt = D.45292_1054;

D.45262_1055 : --> single use.
pmap_1044->rm_rate = D.45262_1055;

D.45293_1056 : --> single use.
D.45294_1057 = D.45293_1056 / 1000;

D.45294_1057 : --> single use.
D.45295_1058 = (uint32_t) D.45294_1057;

D.45295_1058 : --> single use.
pmap_1044->codec_ms = D.45295_1058;

D.45085_1059 : --> single use.
D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);

D.45296_1060 : --> single use.
pmap_1044->remote_sdp_ip = D.45296_1060;

D.44697_1061 : --> single use.
D.45087_1062 = (short unsigned int) D.44697_1061;

D.45087_1062 : --> single use.
pmap_1044->remote_sdp_port = D.45087_1062;

D.45297_1063 : --> single use.
D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);

D.45298_1064 : --> single use.
pmap_1044->rm_fmtp = D.45298_1064;

D.45247_1065 : --> single use.
D.45292_1066 = (unsigned char) D.45247_1065;

D.45292_1066 : --> single use.
pmap_1044->agreed_pt = D.45292_1066;

j_1067 : --> single use.
j_141 = PHI <j_1030(431), j_1067(435)>
# DEBUG j => j_1067

D.45286_1068 : --> single use.
D.45299_1069 = D.45286_1068->remote_sdp_port;

D.45299_1069 : --> single use.
D.45300_1070 = (int) D.45299_1069;

D.45300_1070 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45300_1070);

D.44530_1071 : --> single use.
switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);

D.45286_1072 : --> single use.
D.45301_1073 = D.45286_1072->remote_sdp_ip;

D.45301_1073 : --> single use.
switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);

D.44530_1074 : --> single use.
switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);

D.44530_1075 : --> single use.
switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);

D.45286_1076 : --> single use.
D.45302_1077 = D.45286_1076->rm_fmtp;

D.45302_1077 : --> single use.
switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);

D.45286_1078 : --> single use.
D.45303_1079 = D.45286_1078->agreed_pt;

D.45303_1079 : --> single use.
D.45304_1080 = (int) D.45303_1079;

D.45304_1080 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45304_1080);

D.44530_1081 : --> single use.
switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);

D.45286_1082 : --> single use.
D.45305_1083 = D.45286_1082->recv_pt;

D.45305_1083 : --> single use.
D.45306_1084 = (int) D.45305_1083;

D.45306_1084 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45306_1084);

D.44530_1085 : --> single use.
switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);

D.45307_1086 : --> single use.
D.45309_1088 = D.45307_1086 && D.45308_1087;

D.45308_1087 : --> single use.
D.45309_1088 = D.45307_1086 && D.45308_1087;

D.45309_1088 : --> single use.
if (D.45309_1088 != 0)

match_1089 : --> single use.
match_14 = PHI <match_16(437), match_1089(438)>
# DEBUG match => match_1089

D.45312_1090 : -->5 uses.
D.47961_1509 = D.45312_1090->implementation;
D.47962_1508 = D.45312_1090->codec_interface;
D.47963_1507 = D.45312_1090->mutex;
D.47965_1505 = D.45312_1090->flags;
if (D.45312_1090 != 0B)
# DEBUG codec => D.45312_1090

D.47960_1091 : --> single use.
if (D.47960_1091 != 0)

D.45316_1092 : --> single use.
if (D.45316_1092 == 0)

m_1093 : --> single use.
m_28 = PHI <m_370(101), m_1093(449)>
# DEBUG m => m_1093

D.44471_1094 : --> single use.
D.44471_1094->cng_pt = cng_pt_27;

match_1095 : --> single use.
match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

.MEM_1096 : --> single use.
# .MEM_1184 = VDEF <.MEM_1096>
switch_core_session_parse_crypto_prefs (session_161(D));

.MEM_1097 : --> single use.
# .MEM_1188 = VDEF <.MEM_1097>
D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);

.MEM_1098 : -->3 uses.
# .MEM_1192 = VDEF <.MEM_1098>
D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
# VUSE <.MEM_1098>
D.44507_225 = D.44506_224->o_username;
# VUSE <.MEM_1098>
D.44506_224 = sdp_198->sdp_origin;

.MEM_1099 : -->8 uses.
.MEM_1100 = PHI <.MEM_1193(32), .MEM_1099(36), .MEM_1099(37), .MEM_1197(38)>
.MEM_1100 = PHI <.MEM_1193(32), .MEM_1099(36), .MEM_1099(37), .MEM_1197(38)>
# .MEM_1196 = VDEF <.MEM_1099>
a_engine_188->rtp_bugs = D.44529_243;
# VUSE <.MEM_1099>
D.44521_242 = a_engine_188->rtp_bugs;
# VUSE <.MEM_1099>
D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
# VUSE <.MEM_1099>
D.44509_240 = smh_186->origin;
# VUSE <.MEM_1099>
D.44512_238 = D.44471_237->auto_rtp_bugs;
# VUSE <.MEM_1099>
D.44471_237 = smh_186->mparams;

.MEM_1100 : -->2 uses.
# .MEM_1198 = VDEF <.MEM_1100>
val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
# VUSE <.MEM_1100>
D.44530_244 = session_161(D)->channel;

.MEM_1101 : -->20 uses.
.MEM_1103 = PHI <.MEM_1101(55), .MEM_1102(76)>
# VUSE <.MEM_1101>
attr_303 = sdp_198->sdp_attributes;
# VUSE <.MEM_1101>
__result_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");
# VUSE <.MEM_1101>
D.44548_299 = D.44546_298->c_address;
# VUSE <.MEM_1101>
D.44546_298 = m_248->m_connections;
# VUSE <.MEM_1101>
D.44587_293 = MEM[(const unsigned char *)D.44586_292];
# VUSE <.MEM_1101>
D.44584_290 = *D.44583_289;
# VUSE <.MEM_1101>
D.44577_283 = MEM[(const unsigned char *)D.44576_282];
# VUSE <.MEM_1101>
D.44574_280 = *D.44573_279;
# VUSE <.MEM_1101>
D.44567_273 = MEM[(const unsigned char *)D.44566_272];
# VUSE <.MEM_1101>
D.44564_270 = *D.44563_269;
# VUSE <.MEM_1101>
D.44556_263 = MEM[(const unsigned char *)D.44555_262];
# VUSE <.MEM_1101>
D.44553_260 = *__s1_259;
# VUSE <.MEM_1101>
__s1_259 = D.44546_258->c_address;
# VUSE <.MEM_1101>
D.44546_258 = m_248->m_connections;
# VUSE <.MEM_1101>
D.44548_256 = D.44546_255->c_address;
# VUSE <.MEM_1101>
D.44546_255 = m_248->m_connections;
# VUSE <.MEM_1101>
D.44546_254 = m_248->m_connections;
# VUSE <.MEM_1101>
D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
# VUSE <.MEM_1101>
m_248 = sdp_198->sdp_media;

.MEM_1102 : -->2 uses.
.MEM_1103 = PHI <.MEM_1101(55), .MEM_1102(76)>
# VUSE <.MEM_1102>
attr_334 = attr_29->a_next;

.MEM_1103 : -->30 uses.
.MEM_1104 = PHI <.MEM_1103(78), .MEM_1210(79)>
.MEM_1102 = PHI <.MEM_1103(60), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1103(71), .MEM_1520(73), .MEM_1103(74), .MEM_1522(75), .MEM_1207(67)>
# .MEM_1522 = VDEF <.MEM_1103>
dmaxptime_1468 = strtol (D.44619_332, 0B, 10);
.MEM_1102 = PHI <.MEM_1103(60), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1103(71), .MEM_1520(73), .MEM_1103(74), .MEM_1522(75), .MEM_1207(67)>
# .MEM_1520 = VDEF <.MEM_1103>
dptime_1467 = strtol (D.44619_328, 0B, 10);
.MEM_1102 = PHI <.MEM_1103(60), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1103(71), .MEM_1520(73), .MEM_1103(74), .MEM_1522(75), .MEM_1207(67)>
# VUSE <.MEM_1103>
D.47877_1465 = *D.44590_304;
# .MEM_1210 = VDEF <.MEM_1103>
switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);
# VUSE <.MEM_1103>
D.44530_338 = session_161(D)->channel;
# VUSE <.MEM_1103>
D.44619_332 = attr_29->a_value;
# VUSE <.MEM_1103>
D.44621_331 = strcasecmp (D.44590_330, "maxptime");
# VUSE <.MEM_1103>
D.44590_330 = attr_29->a_name;
# VUSE <.MEM_1103>
D.44619_328 = attr_29->a_value;
# VUSE <.MEM_1103>
D.44616_327 = strcasecmp (D.44590_326, "ptime");
# VUSE <.MEM_1103>
D.44590_326 = attr_29->a_name;
# VUSE <.MEM_1103>
D.44614_324 = strcasecmp (D.44590_323, "sendrecv");
# VUSE <.MEM_1103>
D.44590_323 = attr_29->a_name;
# .MEM_1203 = VDEF <.MEM_1103>
switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
# VUSE <.MEM_1103>
D.44530_316 = session_161(D)->channel;
# VUSE <.MEM_1103>
D.44602_315 = strcasecmp (D.44590_314, "recvonly");
# VUSE <.MEM_1103>
D.44590_314 = attr_29->a_name;
# .MEM_1202 = VDEF <.MEM_1103>
switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
# VUSE <.MEM_1103>
D.44530_313 = session_161(D)->channel;
# VUSE <.MEM_1103>
D.44598_311 = strcasecmp (D.44590_310, "inactive");
# VUSE <.MEM_1103>
D.44590_310 = attr_29->a_name;
# .MEM_1201 = VDEF <.MEM_1103>
switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
# VUSE <.MEM_1103>
D.44530_309 = session_161(D)->channel;
# VUSE <.MEM_1103>
D.44594_307 = strcasecmp (D.44590_306, "sendonly");
# VUSE <.MEM_1103>
D.44590_306 = attr_29->a_name;
# VUSE <.MEM_1103>
D.44590_304 = attr_29->a_name;

.MEM_1104 : --> single use.
# .MEM_1211 = VDEF <.MEM_1104>
D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);

.MEM_1105 : -->6 uses.
.MEM_1106 = PHI <.MEM_1211(80), .MEM_1213(82), .MEM_1105(83), .MEM_1215(84), .MEM_1217(85), .MEM_1218(86)>
# .MEM_1214 = VDEF <.MEM_1105>
D.44471_345->hold_laps = D.44639_347;
# VUSE <.MEM_1105>
D.44636_346 = D.44471_345->hold_laps;
# VUSE <.MEM_1105>
D.44471_345 = smh_186->mparams;
# VUSE <.MEM_1105>
D.44636_344 = D.44471_343->hold_laps;
# VUSE <.MEM_1105>
D.44471_343 = smh_186->mparams;

.MEM_1106 : -->2 uses.
.MEM_1107 = PHI <.MEM_1106(87), .MEM_1220(88), .MEM_1221(89)>
# .MEM_1219 = VDEF <.MEM_1106>
reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);

.MEM_1107 : -->3 uses.
.MEM_1108 = PHI <.MEM_1107(90), .MEM_1222(91)>
# .MEM_1222 = VDEF <.MEM_1107>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
# VUSE <.MEM_1107>
D.44649_357 = session_161(D)->bugs;

.MEM_1108 : -->6 uses.
.MEM_1109 = PHI <.MEM_1108(94), .MEM_1108(95), .MEM_1224(96)>
.MEM_1109 = PHI <.MEM_1108(94), .MEM_1108(95), .MEM_1224(96)>
# .MEM_1223 = VDEF <.MEM_1108>
D.44471_362->num_codecs = 0;
# VUSE <.MEM_1108>
D.44471_362 = smh_186->mparams;
# VUSE <.MEM_1108>
total_codecs_361 = smh_186->num_negotiated_codecs;
# VUSE <.MEM_1108>
D.44655_359 = smh_186->num_negotiated_codecs;

.MEM_1109 : --> single use.
# .MEM_1225 = VDEF <.MEM_1109>
D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));

.MEM_1110 : -->2 uses.
# .MEM_1228 = VDEF <.MEM_1110>
switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);
# VUSE <.MEM_1110>
D.44530_369 = session_161(D)->channel;

.MEM_1111 : --> single use.
# .MEM_1229 = VDEF <.MEM_1111>
switch_core_media_find_zrtp_hash (session_161(D), sdp_198);

.MEM_1112 : -->7 uses.
.MEM_1113 = PHI <.MEM_1112(104), .MEM_1112(105), .MEM_1234(106)>
.MEM_1113 = PHI <.MEM_1112(104), .MEM_1112(105), .MEM_1234(106)>
# .MEM_1234 = VDEF <.MEM_1112>
switch_channel_set_flag_value (D.44530_378, 107, 1);
# VUSE <.MEM_1112>
D.44530_378 = session_161(D)->channel;
# VUSE <.MEM_1112>
D.44672_377 = strcasecmp (D.44669_376, "UDP/TLS/RTP/SAVPF");
# VUSE <.MEM_1112>
D.44669_376 = m_28->m_proto_name;
# VUSE <.MEM_1112>
D.44669_375 = m_28->m_proto_name;

.MEM_1113 : -->16 uses.
.MEM_1168 = PHI <.MEM_1398(346), .MEM_1113(348), .MEM_1113(349), .MEM_1163(428), .MEM_1453(447), .MEM_1454(448), .MEM_1387(343), .MEM_1391(344), .MEM_1380(341), .MEM_1382(342), .MEM_1402(347)>
.MEM_1168 = PHI <.MEM_1398(346), .MEM_1113(348), .MEM_1113(349), .MEM_1163(428), .MEM_1453(447), .MEM_1454(448), .MEM_1387(343), .MEM_1391(344), .MEM_1380(341), .MEM_1382(342), .MEM_1402(347)>
# .MEM_1403 = VDEF <.MEM_1113>
memset (&matches, 0, 480);
# VUSE <.MEM_1113>
D.44697_873 = m_28->m_port;
# VUSE <.MEM_1113>
D.44681_872 = m_28->m_type;
# .MEM_1290 = VDEF <.MEM_1113>
D.44781_498 = switch_rtp_has_dtls ();
# VUSE <.MEM_1113>
D.44697_494 = m_28->m_port;
# VUSE <.MEM_1113>
D.44681_493 = m_28->m_type;
# .MEM_1235 = VDEF <.MEM_1113>
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
# VUSE <.MEM_1113>
D.44697_393 = m_28->m_port;
# VUSE <.MEM_1113>
D.44681_392 = m_28->m_type;
# VUSE <.MEM_1113>
D.44666_390 = m_28->m_proto;
# VUSE <.MEM_1113>
D.44681_387 = m_28->m_type;
# VUSE <.MEM_1113>
D.44666_386 = m_28->m_proto;
# VUSE <.MEM_1113>
D.44681_383 = m_28->m_type;
# VUSE <.MEM_1113>
D.44675_379 = m_28->m_proto;

.MEM_1114 : -->2 uses.
.MEM_1115 = PHI <.MEM_1114(127), .MEM_1244(128), .MEM_1244(129), .MEM_1244(130)>
# .MEM_1244 = VDEF <.MEM_1114>
pass_409 = switch_true (var_402);

.MEM_1115 : -->4 uses.
.MEM_1116 = PHI <.MEM_1115(131), .MEM_1245(132)>
# .MEM_1245 = VDEF <.MEM_1115>
D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
# VUSE <.MEM_1115>
D.44482_413 = D.44481_412->channel;
# VUSE <.MEM_1115>
D.44481_412 = smh_186->session;

.MEM_1116 : -->2 uses.
# .MEM_1246 = VDEF <.MEM_1116>
D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
# VUSE <.MEM_1116>
D.44530_415 = session_161(D)->channel;

.MEM_1117 : --> single use.
.MEM_1118 = PHI <.MEM_1249(136), .MEM_1117(137)>

.MEM_1118 : -->2 uses.
.MEM_1121 = PHI <.MEM_1118(138), .MEM_1250(139), .MEM_1289(151)>
# .MEM_1250 = VDEF <.MEM_1118>
D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);

.MEM_1119 : -->3 uses.
# .MEM_1265 = VDEF <.MEM_1119>
D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
# VUSE <.MEM_1119>
D.44751_445 = t38_options_394->remote_ip;
# VUSE <.MEM_1119>
D.44750_444 = a_engine_188->cur_payload_map;

.MEM_1120 : -->2 uses.
# .MEM_1279 = VDEF <.MEM_1120>
switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
# VUSE <.MEM_1120>
other_session.89_481 = other_session;

.MEM_1121 : --> single use.
.MEM_1170 = PHI <.MEM_1236(121), .MEM_1239(123), .MEM_1259(141), .MEM_1121(152), .MEM_1297(186), .MEM_1299(192), .MEM_1300(196), .MEM_1406(353), .MEM_1417(398), .MEM_1169(450)>

.MEM_1122 : -->2 uses.
.MEM_1125 = PHI <.MEM_1122(166), .MEM_1124(188)>
# VUSE <.MEM_1122>
attr_507 = m_28->m_attributes;

.MEM_1123 : -->2 uses.
# .MEM_1532 = VDEF <.MEM_1123>
crypto_tag_1476 = strtol (crypto_544, 0B, 10);
# VUSE <.MEM_1123>
crypto_544 = attr_31->a_value;

.MEM_1124 : -->2 uses.
.MEM_1125 = PHI <.MEM_1122(166), .MEM_1124(188)>
# VUSE <.MEM_1124>
attr_548 = attr_31->a_next;

.MEM_1125 : -->35 uses.
.MEM_1136 = PHI <.MEM_1125(197), .MEM_1135(280)>
.MEM_1123 = PHI <.MEM_1125(183), .MEM_1296(184), .MEM_1296(185)>
.MEM_1124 = PHI <.MEM_1294(170), .MEM_1527(173), .MEM_1529(176), .MEM_1125(177), .MEM_1125(178), .MEM_1125(182), .MEM_1298(187), .MEM_1293(169)>
# VUSE <.MEM_1125>
D.47900_1474 = *D.44619_531;
.MEM_1124 = PHI <.MEM_1294(170), .MEM_1527(173), .MEM_1529(176), .MEM_1125(177), .MEM_1125(178), .MEM_1125(182), .MEM_1298(187), .MEM_1293(169)>
.MEM_1124 = PHI <.MEM_1294(170), .MEM_1527(173), .MEM_1529(176), .MEM_1125(177), .MEM_1125(178), .MEM_1125(182), .MEM_1298(187), .MEM_1293(169)>
# .MEM_1529 = VDEF <.MEM_1125>
maxptime_1473 = strtol (D.44619_527, 0B, 10);
# .MEM_1527 = VDEF <.MEM_1125>
ptime_1472 = strtol (D.44619_522, 0B, 10);
# VUSE <.MEM_1125>
map_559 = m_28->m_rtpmaps;
# .MEM_1300 = VDEF <.MEM_1125>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
# VUSE <.MEM_1125>
connection_556 = m_28->m_connections;
# VUSE <.MEM_1125>
D.44546_555 = m_28->m_connections;
# VUSE <.MEM_1125>
connection_554 = sdp_198->sdp_connection;
# .MEM_1299 = VDEF <.MEM_1125>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
# .MEM_1295 = VDEF <.MEM_1125>
D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
# VUSE <.MEM_1125>
D.44530_536 = session_161(D)->channel;
# VUSE <.MEM_1125>
D.44821_534 = D.44471_533->ndlb;
# VUSE <.MEM_1125>
D.44471_533 = smh_186->mparams;
# VUSE <.MEM_1125>
D.44619_531 = attr_31->a_value;
# VUSE <.MEM_1125>
D.44815_530 = strcasecmp (D.44590_529, "crypto");
# VUSE <.MEM_1125>
D.44590_529 = attr_31->a_name;
# VUSE <.MEM_1125>
D.44619_527 = attr_31->a_value;
# VUSE <.MEM_1125>
D.44619_526 = attr_31->a_value;
# VUSE <.MEM_1125>
D.44810_525 = strcasecmp (D.44590_524, "maxptime");
# VUSE <.MEM_1125>
D.44590_524 = attr_31->a_name;
# VUSE <.MEM_1125>
D.44619_522 = attr_31->a_value;
# VUSE <.MEM_1125>
D.44619_521 = attr_31->a_value;
# VUSE <.MEM_1125>
D.44805_520 = strcasecmp (D.44590_519, "ptime");
# VUSE <.MEM_1125>
D.44590_519 = attr_31->a_name;
# .MEM_1292 = VDEF <.MEM_1125>
switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);
# VUSE <.MEM_1125>
D.44619_512 = attr_31->a_value;
# VUSE <.MEM_1125>
D.44530_511 = session_161(D)->channel;
# VUSE <.MEM_1125>
D.44619_510 = attr_31->a_value;
# VUSE <.MEM_1125>
D.44795_509 = strcasecmp (D.44590_508, "rtcp");
# VUSE <.MEM_1125>
D.44590_508 = attr_31->a_name;

.MEM_1126 : --> single use.
.MEM_1135 = PHI <.MEM_1126(204), .MEM_1127(210), .MEM_1303(212), .MEM_1303(214), .MEM_1134(279)>

.MEM_1127 : --> single use.
.MEM_1135 = PHI <.MEM_1126(204), .MEM_1127(210), .MEM_1303(212), .MEM_1303(214), .MEM_1134(279)>

.MEM_1128 : -->6 uses.
# VUSE <.MEM_1128>
map_bit_rate_1479 = CSWTCH.174[csui.173_1477];
# .MEM_1307 = VDEF <.MEM_1128>
memset (&codec_fmtp, 0, 16);
# VUSE <.MEM_1128>
remote_codec_rate_596 = map_128->rm_rate;
# VUSE <.MEM_1128>
D.44890_594 = strcasecmp (D.44889_593, "g723");
# VUSE <.MEM_1128>
D.44889_593 = map_128->rm_encoding;
# VUSE <.MEM_1128>
D.44856_590 = map_128->rm_pt;

.MEM_1129 : --> single use.
.MEM_1133 = PHI <.MEM_1129(241), .MEM_1132(277)>

.MEM_1130 : -->11 uses.
.MEM_1131 = PHI <.MEM_1311(270), .MEM_1130(273)>
.MEM_1132 = PHI <.MEM_1133(243), .MEM_1130(268), .MEM_1316(274), .MEM_1321(276)>
# .MEM_1312 = VDEF <.MEM_1130>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
# VUSE <.MEM_1130>
D.44929_698 = imp_629->microseconds_per_packet;
# VUSE <.MEM_1130>
D.44927_696 = imp_629->ianacode;
# VUSE <.MEM_1130>
D.44926_695 = imp_629->iananame;
# VUSE <.MEM_1130>
D.44929_693 = imp_629->microseconds_per_packet;
# .MEM_1311 = VDEF <.MEM_1130>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
# VUSE <.MEM_1130>
D.44929_687 = imp_629->microseconds_per_packet;
# VUSE <.MEM_1130>
D.44984_686 = imp_629->samples_per_second;
# VUSE <.MEM_1130>
D.44926_685 = imp_629->iananame;

.MEM_1131 : --> single use.
# .MEM_1317 = VDEF <.MEM_1131>
matches[m_idx_101].codec_idx = i_129;

.MEM_1132 : --> single use.
.MEM_1133 = PHI <.MEM_1129(241), .MEM_1132(277)>

.MEM_1133 : -->13 uses.
.MEM_1132 = PHI <.MEM_1133(243), .MEM_1130(268), .MEM_1316(274), .MEM_1321(276)>
.MEM_1134 = PHI <.MEM_1321(275), .MEM_1133(278)>
# .MEM_1309 = VDEF <.MEM_1133>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# VUSE <.MEM_1133>
D.44929_640 = imp_629->microseconds_per_packet;
# VUSE <.MEM_1133>
D.44927_638 = imp_629->ianacode;
# VUSE <.MEM_1133>
D.44926_637 = imp_629->iananame;
# VUSE <.MEM_1133>
D.44856_634 = map_128->rm_pt;
# VUSE <.MEM_1133>
D.44921_633 = imp_629->codec_type;
# VUSE <.MEM_1133>
codec_rate_632 = imp_629->samples_per_second;
# VUSE <.MEM_1133>
D.44920_630 = imp_629->bits_per_second;
# VUSE <.MEM_1133>
imp_629 = *D.44919_628;
# VUSE <.MEM_1133>
D.44996_622 = D.44471_621->num_codecs;
# VUSE <.MEM_1133>
D.44471_621 = smh_186->mparams;

.MEM_1134 : -->2 uses.
.MEM_1135 = PHI <.MEM_1126(204), .MEM_1127(210), .MEM_1303(212), .MEM_1303(214), .MEM_1134(279)>
.MEM_1137 = PHI <.MEM_1134(279), .MEM_1136(281)>

.MEM_1135 : -->2 uses.
.MEM_1136 = PHI <.MEM_1125(197), .MEM_1135(280)>
# VUSE <.MEM_1135>
map_711 = map_128->rm_next;

.MEM_1136 : -->2 uses.
.MEM_1137 = PHI <.MEM_1134(279), .MEM_1136(281)>
# .MEM_1301 = VDEF <.MEM_1136>
codec_fmtp = {};

.MEM_1137 : -->3 uses.
.MEM_1138 = PHI <.MEM_1137(282), .MEM_1322(283)>
# .MEM_1322 = VDEF <.MEM_1137>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
# VUSE <.MEM_1137>
D.45001_712 = smh_186->crypto_mode;

.MEM_1138 : -->2 uses.
.MEM_1139 = PHI <.MEM_1138(285), .MEM_1325(295)>
.MEM_1140 = PHI <.MEM_1138(284), .MEM_1330(294), .MEM_1139(296)>

.MEM_1139 : -->7 uses.
.MEM_1140 = PHI <.MEM_1138(284), .MEM_1330(294), .MEM_1139(296)>
# .MEM_1323 = VDEF <.MEM_1139>
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);
# VUSE <.MEM_1139>
near_rate_729 = near_match_726->samples_per_second;
# VUSE <.MEM_1139>
D.45013_728 = near_match_726->iananame;
# VUSE <.MEM_1139>
near_map_727 = near_matches[j_133].map;
# VUSE <.MEM_1139>
near_match_726 = near_matches[j_133].imp;
# VUSE <.MEM_1139>
D.45012_724 = near_matches[j_133].rate;

.MEM_1140 : -->3 uses.
.MEM_1141 = PHI <.MEM_1140(298), .MEM_1331(299)>
.MEM_1148 = PHI <.MEM_1140(297), .MEM_1147(322)>
# .MEM_1331 = VDEF <.MEM_1140>
greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);

.MEM_1141 : --> single use.
# .MEM_1332 = VDEF <.MEM_1141>
a_engine_188->codec_negotiated = 1;

.MEM_1142 : -->2 uses.
# .MEM_1338 = VDEF <.MEM_1142>
D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
# VUSE <.MEM_1142>
D.45049_767 = mmap_762->rm_encoding;

.MEM_1143 : -->2 uses.
# .MEM_1346 = VDEF <.MEM_1143>
pmap_760->codec_ms = D.45062_780;
# VUSE <.MEM_1143>
D.45060_778 = mimp_761->microseconds_per_packet;

.MEM_1144 : -->5 uses.
.MEM_1145 = PHI <.MEM_1144(316), .MEM_1352(317)>
# VUSE <.MEM_1144>
D.47926_1486 = *D.45079_790;
# .MEM_1352 = VDEF <.MEM_1144>
D.45082_793 = switch_stristr ("stereo=1", D.45079_792);
# VUSE <.MEM_1144>
D.45079_792 = mmap_762->rm_fmtp;
# VUSE <.MEM_1144>
D.45079_790 = mmap_762->rm_fmtp;

.MEM_1145 : --> single use.
# .MEM_1354 = VDEF <.MEM_1145>
pmap_760->channels = 1;

.MEM_1146 : -->2 uses.
# .MEM_1356 = VDEF <.MEM_1146>
D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
# VUSE <.MEM_1146>
D.45085_795 = connection_124->c_address;

.MEM_1147 : -->12 uses.
.MEM_1148 = PHI <.MEM_1140(297), .MEM_1147(322)>
# .MEM_1334 = VDEF <.MEM_1147>
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
# VUSE <.MEM_1147>
D.45041_757 = D.45039_756->microseconds_per_packet;
# VUSE <.MEM_1147>
D.45039_756 = matches[j_135].imp;
# VUSE <.MEM_1147>
D.45040_755 = D.45039_754->samples_per_second;
# VUSE <.MEM_1147>
D.45039_754 = matches[j_135].imp;
# VUSE <.MEM_1147>
D.45037_752 = D.45034_751->rm_pt;
# VUSE <.MEM_1147>
D.45034_751 = matches[j_135].map;
# VUSE <.MEM_1147>
D.45036_750 = D.45034_749->rm_fmtp;
# VUSE <.MEM_1147>
D.45034_749 = matches[j_135].map;
# VUSE <.MEM_1147>
D.45035_748 = D.45034_747->rm_encoding;
# VUSE <.MEM_1147>
D.45034_747 = matches[j_135].map;

.MEM_1148 : -->4 uses.
.MEM_1150 = PHI <.MEM_1148(323), .MEM_1372(333), .MEM_1371(334)>
# .MEM_1365 = VDEF <.MEM_1148>
switch_snprintf (&tmp, 50, "%d", D.44767_810);
# VUSE <.MEM_1148>
D.44762_809 = D.44750_808->remote_sdp_port;
# VUSE <.MEM_1148>
D.44750_808 = a_engine_188->cur_payload_map;

.MEM_1149 : -->3 uses.
# .MEM_1371 = VDEF <.MEM_1149>
D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
# VUSE <.MEM_1149>
D.45098_822 = D.44471_821->codec_flags;
# VUSE <.MEM_1149>
D.44471_821 = smh_186->mparams;

.MEM_1150 : -->2 uses.
.MEM_1152 = PHI <.MEM_1150(335), .MEM_1374(337), .MEM_1375(338)>
# .MEM_1373 = VDEF <.MEM_1150>
D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);

.MEM_1151 : -->3 uses.
# .MEM_1375 = VDEF <.MEM_1151>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);
# VUSE <.MEM_1151>
D.45110_830 = D.44471_829->te;
# VUSE <.MEM_1151>
D.44471_829 = smh_186->mparams;

.MEM_1152 : -->2 uses.
# .MEM_1392 = VDEF <.MEM_1152>
D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
# .MEM_1376 = VDEF <.MEM_1152>
D.45114_834 = switch_channel_direction (channel_162);

.MEM_1153 : -->2 uses.
.MEM_1157 = PHI <.MEM_1153(366), .MEM_1156(400)>
# VUSE <.MEM_1153>
attr_893 = m_28->m_attributes;

.MEM_1154 : -->2 uses.
# .MEM_1411 = VDEF <.MEM_1154>
D.44471_905->rtcp_video_interval_msec = "10000";
# VUSE <.MEM_1154>
D.44471_905 = smh_186->mparams;

.MEM_1155 : -->2 uses.
# .MEM_1546 = VDEF <.MEM_1155>
crypto_tag_1502 = strtol (crypto_975, 0B, 10);
# VUSE <.MEM_1155>
crypto_975 = attr_33->a_value;

.MEM_1156 : -->2 uses.
.MEM_1157 = PHI <.MEM_1153(366), .MEM_1156(400)>
# VUSE <.MEM_1156>
attr_978 = attr_33->a_next;

.MEM_1157 : -->42 uses.
.MEM_1161 = PHI <.MEM_1157(404), .MEM_1160(422)>
.MEM_1155 = PHI <.MEM_1157(395), .MEM_1416(396), .MEM_1416(397)>
.MEM_1156 = PHI <.MEM_1157(368), .MEM_1411(376), .MEM_1414(388), .MEM_1157(389), .MEM_1157(390), .MEM_1157(394), .MEM_1418(399), .MEM_1157(373), .MEM_1413(387)>
# VUSE <.MEM_1157>
D.47950_1500 = *D.44619_962;
.MEM_1156 = PHI <.MEM_1157(368), .MEM_1411(376), .MEM_1414(388), .MEM_1157(389), .MEM_1157(390), .MEM_1157(394), .MEM_1418(399), .MEM_1157(373), .MEM_1413(387)>
.MEM_1156 = PHI <.MEM_1157(368), .MEM_1411(376), .MEM_1414(388), .MEM_1157(389), .MEM_1157(390), .MEM_1157(394), .MEM_1418(399), .MEM_1157(373), .MEM_1413(387)>
.MEM_1156 = PHI <.MEM_1157(368), .MEM_1411(376), .MEM_1414(388), .MEM_1157(389), .MEM_1157(390), .MEM_1157(394), .MEM_1418(399), .MEM_1157(373), .MEM_1413(387)>
# VUSE <.MEM_1157>
D.47943_1497 = *D.44619_899;
.MEM_1156 = PHI <.MEM_1157(368), .MEM_1411(376), .MEM_1414(388), .MEM_1157(389), .MEM_1157(390), .MEM_1157(394), .MEM_1418(399), .MEM_1157(373), .MEM_1413(387)>
# VUSE <.MEM_1157>
rm_encoding_979 = map_136->rm_encoding;
# .MEM_1415 = VDEF <.MEM_1157>
D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);
# VUSE <.MEM_1157>
D.44530_967 = session_161(D)->channel;
# VUSE <.MEM_1157>
D.44821_965 = D.44471_964->ndlb;
# VUSE <.MEM_1157>
D.44471_964 = smh_186->mparams;
# VUSE <.MEM_1157>
D.44619_962 = attr_33->a_value;
# VUSE <.MEM_1157>
D.45219_961 = strcasecmp (D.44590_960, "crypto");
# VUSE <.MEM_1157>
D.44590_960 = attr_33->a_name;
# .MEM_1412 = VDEF <.MEM_1157>
switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_953, 1);
# VUSE <.MEM_1157>
D.44619_953 = attr_33->a_value;
# VUSE <.MEM_1157>
D.44530_952 = session_161(D)->channel;
# VUSE <.MEM_1157>
__result_950 = __builtin_strcmp (D.44619_949, "1");
# VUSE <.MEM_1157>
D.44619_949 = attr_33->a_value;
# VUSE <.MEM_1157>
D.45208_944 = MEM[(const unsigned char *)D.45207_943];
# VUSE <.MEM_1157>
D.45205_941 = *D.45204_940;
# VUSE <.MEM_1157>
D.45198_934 = MEM[(const unsigned char *)D.45197_933];
# VUSE <.MEM_1157>
D.45195_931 = *D.45194_930;
# VUSE <.MEM_1157>
D.45188_924 = MEM[(const unsigned char *)D.45187_923];
# VUSE <.MEM_1157>
D.45185_921 = *D.45184_920;
# VUSE <.MEM_1157>
D.45177_914 = MEM[(const unsigned char *)D.45176_913];
# VUSE <.MEM_1157>
D.45174_911 = *__s1_910;
# VUSE <.MEM_1157>
__s1_910 = attr_33->a_value;
# VUSE <.MEM_1157>
D.44619_908 = attr_33->a_value;
# VUSE <.MEM_1157>
D.45168_907 = strcasecmp (D.44590_906, "rtcp");
# VUSE <.MEM_1157>
D.44590_906 = attr_33->a_name;
# .MEM_1409 = VDEF <.MEM_1157>
D.45160_902 = switch_stristr ("fir", D.44619_901);
# VUSE <.MEM_1157>
D.44619_901 = attr_33->a_value;
# VUSE <.MEM_1157>
D.44619_899 = attr_33->a_value;
# VUSE <.MEM_1157>
D.45154_898 = strcasecmp (D.44590_897, "rtcp-fb");
# VUSE <.MEM_1157>
D.44590_897 = attr_33->a_name;
# VUSE <.MEM_1157>
D.44619_896 = attr_33->a_value;
# VUSE <.MEM_1157>
D.45151_895 = strcasecmp (D.44590_894, "framerate");
# VUSE <.MEM_1157>
D.44590_894 = attr_33->a_name;

.MEM_1158 : -->4 uses.
# .MEM_1421 = VDEF <.MEM_1158>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
# VUSE <.MEM_1158>
D.45250_994 = imp_985->ianacode;
# VUSE <.MEM_1158>
D.45249_993 = imp_985->iananame;
# VUSE <.MEM_1158>
D.45247_991 = map_136->rm_pt;

.MEM_1159 : --> single use.
.MEM_1160 = PHI <.MEM_1161(406), .MEM_1420(409), .MEM_1159(421)>

.MEM_1160 : --> single use.
.MEM_1161 = PHI <.MEM_1157(404), .MEM_1160(422)>

.MEM_1161 : -->7 uses.
.MEM_1162 = PHI <.MEM_1405(354), .MEM_1161(424)>
.MEM_1160 = PHI <.MEM_1161(406), .MEM_1420(409), .MEM_1159(421)>
# VUSE <.MEM_1161>
map_1021 = map_136->rm_next;
# .MEM_1419 = VDEF <.MEM_1161>
D.45241_988 = switch_channel_direction (D.44530_987);
# VUSE <.MEM_1161>
D.44530_987 = session_161(D)->channel;
# VUSE <.MEM_1161>
D.45238_986 = imp_985->codec_type;
# VUSE <.MEM_1161>
imp_985 = *D.45237_984;

.MEM_1162 : -->4 uses.
.MEM_1163 = PHI <.MEM_1162(426), .MEM_1425(427)>
# .MEM_1425 = VDEF <.MEM_1162>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
# VUSE <.MEM_1162>
D.45001_1022 = smh_186->crypto_mode;
# .MEM_1407 = VDEF <.MEM_1162>
D.45137_884 = switch_rtp_has_dtls ();

.MEM_1163 : -->3 uses.
.MEM_1164 = PHI <.MEM_1163(429), .MEM_1426(430)>
.MEM_1168 = PHI <.MEM_1398(346), .MEM_1113(348), .MEM_1113(349), .MEM_1163(428), .MEM_1453(447), .MEM_1454(448), .MEM_1387(343), .MEM_1391(344), .MEM_1380(341), .MEM_1382(342), .MEM_1402(347)>
# .MEM_1426 = VDEF <.MEM_1163>
greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);

.MEM_1164 : --> single use.
# .MEM_1427 = VDEF <.MEM_1164>
v_engine_189->codec_negotiated = 1;

.MEM_1165 : -->4 uses.
# .MEM_1432 = VDEF <.MEM_1165>
D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
# VUSE <.MEM_1165>
D.45255_1051 = map_1050->rm_encoding;
# VUSE <.MEM_1165>
map_1050 = matches[j_141].map;
# VUSE <.MEM_1165>
mimp_1049 = matches[j_141].imp;

.MEM_1166 : -->14 uses.
# .MEM_1443 = VDEF <.MEM_1166>
switch_snprintf (&tmp, 50, "%d", D.45300_1070);
# VUSE <.MEM_1166>
D.45299_1069 = D.45286_1068->remote_sdp_port;
# VUSE <.MEM_1166>
D.45286_1068 = v_engine_189->cur_payload_map;
# .MEM_1428 = VDEF <.MEM_1166>
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
# VUSE <.MEM_1166>
D.45281_1041 = D.45279_1040->microseconds_per_packet;
# VUSE <.MEM_1166>
D.45279_1040 = matches[j_141].imp;
# VUSE <.MEM_1166>
D.45280_1039 = D.45279_1038->samples_per_second;
# VUSE <.MEM_1166>
D.45279_1038 = matches[j_141].imp;
# VUSE <.MEM_1166>
D.45277_1036 = D.45274_1035->rm_pt;
# VUSE <.MEM_1166>
D.45274_1035 = matches[j_141].map;
# VUSE <.MEM_1166>
D.45276_1034 = D.45274_1033->rm_fmtp;
# VUSE <.MEM_1166>
D.45274_1033 = matches[j_141].map;
# VUSE <.MEM_1166>
D.45275_1032 = D.45274_1031->rm_encoding;
# VUSE <.MEM_1166>
D.45274_1031 = matches[j_141].map;

.MEM_1167 : --> single use.
# .MEM_1453 = VDEF <.MEM_1167>
D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);

.MEM_1168 : -->2 uses.
.MEM_1169 = PHI <.MEM_1232(101), .MEM_1168(449)>
# VUSE <.MEM_1168>
m_1093 = m_28->m_next;

.MEM_1169 : -->4 uses.
.MEM_1112 = PHI <.MEM_1169(102), .MEM_1233(103)>
.MEM_1170 = PHI <.MEM_1236(121), .MEM_1239(123), .MEM_1259(141), .MEM_1121(152), .MEM_1297(186), .MEM_1299(192), .MEM_1300(196), .MEM_1406(353), .MEM_1417(398), .MEM_1169(450)>
# .MEM_1233 = VDEF <.MEM_1169>
switch_core_session_set_ice (session_161(D));
# VUSE <.MEM_1169>
D.44666_373 = m_28->m_proto;

.MEM_1170 : -->2 uses.
.MEM_1171 = PHI <.MEM_1170(451), .MEM_1455(452)>
# .MEM_1455 = VDEF <.MEM_1170>
sdp_parser_free (parser_196);

.MEM_1171 : -->2 uses.
# .MEM_1456 = VDEF <.MEM_1171>
D.44471_1094->cng_pt = cng_pt_27;
# VUSE <.MEM_1171>
D.44471_1094 = smh_186->mparams;

.MEM_1172(D) : --> single use.
# .MEM_1173 = VDEF <.MEM_1172(D)>
channel_162 = switch_core_session_get_channel (session_161(D));

.MEM_1173 : --> single use.
# .MEM_1174 = VDEF <.MEM_1173>
matches = {};

.MEM_1174 : --> single use.
# .MEM_1175 = VDEF <.MEM_1174>
near_matches = {};

.MEM_1175 : -->6 uses.
# .MEM_1176 = VDEF <.MEM_1175>
parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
# VUSE <.MEM_1175>
D.44472_194 = strlen (r_sdp_193(D));
# VUSE <.MEM_1175>
total_codecs_192 = D.44471_191->num_codecs;
# VUSE <.MEM_1175>
D.44471_191 = smh_186->mparams;
# VUSE <.MEM_1175>
smh_186 = session_161(D)->media_handle;
# VUSE <.MEM_1175>
__assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

.MEM_1176 : --> single use.
# .MEM_1177 = VDEF <.MEM_1176>
sdp_198 = sdp_session (parser_196);

.MEM_1177 : -->2 uses.
# .MEM_1179 = VDEF <.MEM_1177>
D.44478_200 = dtls_ok (session_161(D));
# .MEM_1178 = VDEF <.MEM_1177>
sdp_parser_free (parser_196);

.MEM_1178 : --> no uses.

.MEM_1179 : -->4 uses.
.MEM_1096 = PHI <.MEM_1179(10), .MEM_1180(11), .MEM_1181(12), .MEM_1183(13)>
# .MEM_1180 = VDEF <.MEM_1179>
tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
# VUSE <.MEM_1179>
D.44482_202 = D.44481_201->channel;
# VUSE <.MEM_1179>
D.44481_201 = smh_186->session;

.MEM_1180 : -->2 uses.
.MEM_1096 = PHI <.MEM_1179(10), .MEM_1180(11), .MEM_1181(12), .MEM_1183(13)>
# .MEM_1181 = VDEF <.MEM_1180>
D.44485_204 = switch_false (tmp_203);

.MEM_1181 : -->4 uses.
.MEM_1096 = PHI <.MEM_1179(10), .MEM_1180(11), .MEM_1181(12), .MEM_1183(13)>
# .MEM_1182 = VDEF <.MEM_1181>
switch_channel_clear_flag (D.44482_206, 111);
# VUSE <.MEM_1181>
D.44482_206 = D.44481_205->channel;
# VUSE <.MEM_1181>
D.44481_205 = smh_186->session;

.MEM_1182 : -->3 uses.
# .MEM_1183 = VDEF <.MEM_1182>
switch_channel_clear_flag (D.44482_208, 109);
# VUSE <.MEM_1182>
D.44482_208 = D.44481_207->channel;
# VUSE <.MEM_1182>
D.44481_207 = smh_186->session;

.MEM_1183 : --> single use.
.MEM_1096 = PHI <.MEM_1179(10), .MEM_1180(11), .MEM_1181(12), .MEM_1183(13)>

.MEM_1184 : -->2 uses.
.MEM_1512 = PHI <.MEM_1184(14), .MEM_1516(15)>
# VUSE <.MEM_1184>
pmap_1457 = a_engine_188->payload_map;

.MEM_1185 : --> no uses.

.MEM_1186 : --> no uses.

.MEM_1187 : --> single use.
.MEM_1097 = PHI <.MEM_1513(22), .MEM_1187(23)>

.MEM_1188 : --> single use.
# .MEM_1189 = VDEF <.MEM_1188>
D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);

.MEM_1189 : --> single use.
# .MEM_1190 = VDEF <.MEM_1189>
val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);

.MEM_1190 : -->8 uses.
.MEM_1098 = PHI <.MEM_1190(24), .MEM_1190(26), .MEM_1190(28), .MEM_1190(30), .MEM_1191(31)>
.MEM_1098 = PHI <.MEM_1190(24), .MEM_1190(26), .MEM_1190(28), .MEM_1190(30), .MEM_1191(31)>
.MEM_1098 = PHI <.MEM_1190(24), .MEM_1190(26), .MEM_1190(28), .MEM_1190(30), .MEM_1191(31)>
.MEM_1098 = PHI <.MEM_1190(24), .MEM_1190(26), .MEM_1190(28), .MEM_1190(30), .MEM_1191(31)>
# .MEM_1191 = VDEF <.MEM_1190>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
# VUSE <.MEM_1190>
D.44502_221 = strcasecmp (val_214, "scrooge");
# VUSE <.MEM_1190>
D.44498_218 = strcasecmp (val_214, "greedy");
# VUSE <.MEM_1190>
D.44494_215 = strcasecmp (val_214, "generous");

.MEM_1191 : --> single use.
.MEM_1098 = PHI <.MEM_1190(24), .MEM_1190(26), .MEM_1190(28), .MEM_1190(30), .MEM_1191(31)>

.MEM_1192 : --> single use.
# .MEM_1193 = VDEF <.MEM_1192>
smh_186->origin = D.44508_226;

.MEM_1193 : -->10 uses.
.MEM_1099 = PHI <.MEM_1193(33), .MEM_1193(34), .MEM_1195(35)>
.MEM_1099 = PHI <.MEM_1193(33), .MEM_1193(34), .MEM_1195(35)>
.MEM_1100 = PHI <.MEM_1193(32), .MEM_1099(36), .MEM_1099(37), .MEM_1197(38)>
# .MEM_1194 = VDEF <.MEM_1193>
a_engine_188->rtp_bugs = D.44522_236;
# VUSE <.MEM_1193>
D.44521_235 = a_engine_188->rtp_bugs;
# VUSE <.MEM_1193>
D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");
# VUSE <.MEM_1193>
D.44509_233 = smh_186->origin;
# VUSE <.MEM_1193>
D.44512_229 = D.44471_228->auto_rtp_bugs;
# VUSE <.MEM_1193>
D.44471_228 = smh_186->mparams;
# VUSE <.MEM_1193>
D.44509_227 = smh_186->origin;

.MEM_1194 : --> single use.
# .MEM_1195 = VDEF <.MEM_1194>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");

.MEM_1195 : --> single use.
.MEM_1099 = PHI <.MEM_1193(33), .MEM_1193(34), .MEM_1195(35)>

.MEM_1196 : --> single use.
# .MEM_1197 = VDEF <.MEM_1196>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");

.MEM_1197 : --> single use.
.MEM_1100 = PHI <.MEM_1193(32), .MEM_1099(36), .MEM_1099(37), .MEM_1197(38)>

.MEM_1198 : -->2 uses.
.MEM_1101 = PHI <.MEM_1198(39), .MEM_1199(40), .MEM_1200(41)>
# .MEM_1199 = VDEF <.MEM_1198>
D.44533_246 = switch_true (val_245);

.MEM_1199 : -->3 uses.
.MEM_1101 = PHI <.MEM_1198(39), .MEM_1199(40), .MEM_1200(41)>
# .MEM_1200 = VDEF <.MEM_1199>
switch_channel_set_flag_value (D.44530_247, 93, 1);
# VUSE <.MEM_1199>
D.44530_247 = session_161(D)->channel;

.MEM_1200 : --> single use.
.MEM_1101 = PHI <.MEM_1198(39), .MEM_1199(40), .MEM_1200(41)>

.MEM_1201 : --> single use.
.MEM_1102 = PHI <.MEM_1103(60), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1103(71), .MEM_1520(73), .MEM_1103(74), .MEM_1522(75), .MEM_1207(67)>

.MEM_1202 : --> single use.
.MEM_1102 = PHI <.MEM_1103(60), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1103(71), .MEM_1520(73), .MEM_1103(74), .MEM_1522(75), .MEM_1207(67)>

.MEM_1203 : -->2 uses.
# .MEM_1204 = VDEF <.MEM_1203>
D.44606_319 = switch_rtp_ready (D.44605_318);
# VUSE <.MEM_1203>
D.44605_318 = a_engine_188->rtp_session;

.MEM_1204 : -->4 uses.
# .MEM_1208 = VDEF <.MEM_1204>
switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
# VUSE <.MEM_1204>
D.44530_321 = session_161(D)->channel;
# .MEM_1205 = VDEF <.MEM_1204>
switch_rtp_set_max_missed_packets (D.44605_320, 0);
# VUSE <.MEM_1204>
D.44605_320 = a_engine_188->rtp_session;

.MEM_1205 : --> single use.
# .MEM_1206 = VDEF <.MEM_1205>
a_engine_188->max_missed_hold_packets = 0;

.MEM_1206 : --> single use.
# .MEM_1207 = VDEF <.MEM_1206>
a_engine_188->max_missed_packets = 0;

.MEM_1207 : --> single use.
.MEM_1102 = PHI <.MEM_1103(60), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1103(71), .MEM_1520(73), .MEM_1103(74), .MEM_1522(75), .MEM_1207(67)>

.MEM_1208 : -->2 uses.
# .MEM_1209 = VDEF <.MEM_1208>
switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
# VUSE <.MEM_1208>
D.44530_322 = session_161(D)->channel;

.MEM_1209 : --> single use.
.MEM_1102 = PHI <.MEM_1103(60), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1103(71), .MEM_1520(73), .MEM_1103(74), .MEM_1522(75), .MEM_1207(67)>

.MEM_1210 : --> single use.
.MEM_1104 = PHI <.MEM_1103(78), .MEM_1210(79)>

.MEM_1211 : -->3 uses.
.MEM_1106 = PHI <.MEM_1211(80), .MEM_1213(82), .MEM_1105(83), .MEM_1215(84), .MEM_1217(85), .MEM_1218(86)>
# .MEM_1212 = VDEF <.MEM_1211>
val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
# VUSE <.MEM_1211>
D.44530_340 = session_161(D)->channel;

.MEM_1212 : -->2 uses.
.MEM_1105 = PHI <.MEM_1212(81), .MEM_1213(82)>
# .MEM_1213 = VDEF <.MEM_1212>
D.44635_342 = switch_true (val_341);

.MEM_1213 : -->2 uses.
.MEM_1106 = PHI <.MEM_1211(80), .MEM_1213(82), .MEM_1105(83), .MEM_1215(84), .MEM_1217(85), .MEM_1218(86)>
.MEM_1105 = PHI <.MEM_1212(81), .MEM_1213(82)>

.MEM_1214 : --> single use.
# .MEM_1215 = VDEF <.MEM_1214>
D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);

.MEM_1215 : -->2 uses.
.MEM_1106 = PHI <.MEM_1211(80), .MEM_1213(82), .MEM_1105(83), .MEM_1215(84), .MEM_1217(85), .MEM_1218(86)>
# .MEM_1216 = VDEF <.MEM_1215>
reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);

.MEM_1216 : -->2 uses.
# .MEM_1217 = VDEF <.MEM_1216>
val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
# VUSE <.MEM_1216>
D.44530_350 = session_161(D)->channel;

.MEM_1217 : -->2 uses.
.MEM_1106 = PHI <.MEM_1211(80), .MEM_1213(82), .MEM_1105(83), .MEM_1215(84), .MEM_1217(85), .MEM_1218(86)>
# .MEM_1218 = VDEF <.MEM_1217>
reneg_352 = switch_true (val_351);

.MEM_1218 : --> single use.
.MEM_1106 = PHI <.MEM_1211(80), .MEM_1213(82), .MEM_1105(83), .MEM_1215(84), .MEM_1217(85), .MEM_1218(86)>

.MEM_1219 : -->2 uses.
# .MEM_1220 = VDEF <.MEM_1219>
val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
# VUSE <.MEM_1219>
D.44530_354 = session_161(D)->channel;

.MEM_1220 : -->2 uses.
.MEM_1107 = PHI <.MEM_1106(87), .MEM_1220(88), .MEM_1221(89)>
# .MEM_1221 = VDEF <.MEM_1220>
reneg_356 = switch_true (val_355);

.MEM_1221 : --> single use.
.MEM_1107 = PHI <.MEM_1106(87), .MEM_1220(88), .MEM_1221(89)>

.MEM_1222 : --> single use.
.MEM_1108 = PHI <.MEM_1107(90), .MEM_1222(91)>

.MEM_1223 : --> single use.
# .MEM_1224 = VDEF <.MEM_1223>
switch_core_media_prepare_codecs (session_161(D), 0);

.MEM_1224 : -->3 uses.
.MEM_1109 = PHI <.MEM_1108(94), .MEM_1108(95), .MEM_1224(96)>
# VUSE <.MEM_1224>
total_codecs_365 = D.44471_364->num_codecs;
# VUSE <.MEM_1224>
D.44471_364 = smh_186->mparams;

.MEM_1225 : -->2 uses.
.MEM_1110 = PHI <.MEM_1225(97), .MEM_1226(98), .MEM_1227(99)>
# .MEM_1226 = VDEF <.MEM_1225>
D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));

.MEM_1226 : -->2 uses.
.MEM_1110 = PHI <.MEM_1225(97), .MEM_1226(98), .MEM_1227(99)>
# .MEM_1227 = VDEF <.MEM_1226>
D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));

.MEM_1227 : -->2 uses.
.MEM_1111 = PHI <.MEM_1227(99), .MEM_1228(100)>
.MEM_1110 = PHI <.MEM_1225(97), .MEM_1226(98), .MEM_1227(99)>

.MEM_1228 : --> single use.
.MEM_1111 = PHI <.MEM_1227(99), .MEM_1228(100)>

.MEM_1229 : --> single use.
# .MEM_1230 = VDEF <.MEM_1229>
switch_core_media_pass_zrtp_hash (session_161(D));

.MEM_1230 : --> single use.
# .MEM_1231 = VDEF <.MEM_1230>
check_ice (smh_186, 0, sdp_198, 0B);

.MEM_1231 : --> single use.
# .MEM_1232 = VDEF <.MEM_1231>
check_ice (smh_186, 1, sdp_198, 0B);

.MEM_1232 : -->2 uses.
.MEM_1169 = PHI <.MEM_1232(101), .MEM_1168(449)>
# VUSE <.MEM_1232>
m_370 = sdp_198->sdp_media;

.MEM_1233 : --> single use.
.MEM_1112 = PHI <.MEM_1169(102), .MEM_1233(103)>

.MEM_1234 : --> single use.
.MEM_1113 = PHI <.MEM_1112(104), .MEM_1112(105), .MEM_1234(106)>

.MEM_1235 : -->2 uses.
# .MEM_1236 = VDEF <.MEM_1235>
D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
# VUSE <.MEM_1235>
D.44530_395 = session_161(D)->channel;

.MEM_1236 : -->2 uses.
.MEM_1170 = PHI <.MEM_1236(121), .MEM_1239(123), .MEM_1259(141), .MEM_1121(152), .MEM_1297(186), .MEM_1299(192), .MEM_1300(196), .MEM_1406(353), .MEM_1417(398), .MEM_1169(450)>
# .MEM_1237 = VDEF <.MEM_1236>
D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);

.MEM_1237 : --> single use.
# .MEM_1238 = VDEF <.MEM_1237>
D.44703_399 = switch_true (D.44702_398);

.MEM_1238 : -->3 uses.
# .MEM_1240 = VDEF <.MEM_1238>
var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
# .MEM_1239 = VDEF <.MEM_1238>
switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
# VUSE <.MEM_1238>
D.44530_400 = session_161(D)->channel;

.MEM_1239 : --> single use.
.MEM_1170 = PHI <.MEM_1236(121), .MEM_1239(123), .MEM_1259(141), .MEM_1121(152), .MEM_1297(186), .MEM_1299(192), .MEM_1300(196), .MEM_1406(353), .MEM_1417(398), .MEM_1169(450)>

.MEM_1240 : -->3 uses.
# .MEM_1241 = VDEF <.MEM_1240>
D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
# VUSE <.MEM_1240>
D.44482_404 = D.44481_403->channel;
# VUSE <.MEM_1240>
D.44481_403 = smh_186->session;

.MEM_1241 : -->2 uses.
# .MEM_1242 = VDEF <.MEM_1241>
D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
# VUSE <.MEM_1241>
D.44530_407 = session_161(D)->channel;

.MEM_1242 : -->3 uses.
.MEM_1114 = PHI <.MEM_1242(124), .MEM_1242(125), .MEM_1243(126)>
.MEM_1114 = PHI <.MEM_1242(124), .MEM_1242(125), .MEM_1243(126)>
# .MEM_1243 = VDEF <.MEM_1242>
*proceed_209(D) = 0;

.MEM_1243 : --> single use.
.MEM_1114 = PHI <.MEM_1242(124), .MEM_1242(125), .MEM_1243(126)>

.MEM_1244 : -->4 uses.
.MEM_1115 = PHI <.MEM_1114(127), .MEM_1244(128), .MEM_1244(129), .MEM_1244(130)>
.MEM_1115 = PHI <.MEM_1114(127), .MEM_1244(128), .MEM_1244(129), .MEM_1244(130)>
.MEM_1115 = PHI <.MEM_1114(127), .MEM_1244(128), .MEM_1244(129), .MEM_1244(130)>
# VUSE <.MEM_1244>
D.44716_410 = strcasecmp (var_402, "once");

.MEM_1245 : -->2 uses.
.MEM_1116 = PHI <.MEM_1115(131), .MEM_1245(132)>
.MEM_1117 = PHI <.MEM_1245(132), .MEM_1246(133), .MEM_1247(134), .MEM_1248(135), .MEM_1249(136)>

.MEM_1246 : -->3 uses.
.MEM_1117 = PHI <.MEM_1245(132), .MEM_1246(133), .MEM_1247(134), .MEM_1248(135), .MEM_1249(136)>
# .MEM_1247 = VDEF <.MEM_1246>
D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
# VUSE <.MEM_1246>
D.44530_417 = session_161(D)->channel;

.MEM_1247 : -->3 uses.
.MEM_1117 = PHI <.MEM_1245(132), .MEM_1246(133), .MEM_1247(134), .MEM_1248(135), .MEM_1249(136)>
# .MEM_1248 = VDEF <.MEM_1247>
D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
# VUSE <.MEM_1247>
D.44530_419 = session_161(D)->channel;

.MEM_1248 : -->3 uses.
.MEM_1117 = PHI <.MEM_1245(132), .MEM_1246(133), .MEM_1247(134), .MEM_1248(135), .MEM_1249(136)>
# .MEM_1249 = VDEF <.MEM_1248>
D.44730_422 = switch_rtp_ready (D.44605_421);
# VUSE <.MEM_1248>
D.44605_421 = a_engine_188->rtp_session;

.MEM_1249 : -->2 uses.
.MEM_1118 = PHI <.MEM_1249(136), .MEM_1117(137)>
.MEM_1117 = PHI <.MEM_1245(132), .MEM_1246(133), .MEM_1247(134), .MEM_1248(135), .MEM_1249(136)>

.MEM_1250 : -->3 uses.
.MEM_1121 = PHI <.MEM_1118(138), .MEM_1250(139), .MEM_1289(151)>
# .MEM_1251 = VDEF <.MEM_1250>
other_channel_426 = switch_core_session_get_channel (other_session.89_425);
# VUSE <.MEM_1250>
other_session.89_425 = other_session;

.MEM_1251 : -->2 uses.
# .MEM_1252 = VDEF <.MEM_1251>
remote_host_428 = switch_rtp_get_remote_host (D.44605_427);
# VUSE <.MEM_1251>
D.44605_427 = a_engine_188->rtp_session;

.MEM_1252 : -->2 uses.
# .MEM_1253 = VDEF <.MEM_1252>
remote_port_430 = switch_rtp_get_remote_port (D.44605_429);
# VUSE <.MEM_1252>
D.44605_429 = a_engine_188->rtp_session;

.MEM_1253 : --> single use.
# .MEM_1254 = VDEF <.MEM_1253>
tmp = "";

.MEM_1254 : --> single use.
# .MEM_1255 = VDEF <.MEM_1254>
D.44737_431 = switch_channel_test_flag (other_channel_426, 1);

.MEM_1255 : -->4 uses.
# .MEM_1260 = VDEF <.MEM_1255>
D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
# VUSE <.MEM_1255>
D.44530_438 = session_161(D)->channel;
# .MEM_1256 = VDEF <.MEM_1255>
D.44740_433 = switch_channel_get_name (D.44530_432);
# VUSE <.MEM_1255>
D.44530_432 = session_161(D)->channel;

.MEM_1256 : --> single use.
# .MEM_1257 = VDEF <.MEM_1256>
D.44741_434 = switch_channel_get_name (other_channel_426);

.MEM_1257 : --> single use.
# .MEM_1258 = VDEF <.MEM_1257>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

.MEM_1258 : -->2 uses.
# .MEM_1259 = VDEF <.MEM_1258>
switch_core_session_rwunlock (other_session.89_435);
# VUSE <.MEM_1258>
other_session.89_435 = other_session;

.MEM_1259 : --> single use.
.MEM_1170 = PHI <.MEM_1236(121), .MEM_1239(123), .MEM_1259(141), .MEM_1121(152), .MEM_1297(186), .MEM_1299(192), .MEM_1300(196), .MEM_1406(353), .MEM_1417(398), .MEM_1169(450)>

.MEM_1260 : --> single use.
# .MEM_1261 = VDEF <.MEM_1260>
D.44743_440 = switch_true (D.44742_439);

.MEM_1261 : -->3 uses.
.MEM_1119 = PHI <.MEM_1261(142), .MEM_1263(143), .MEM_1264(144)>
# .MEM_1262 = VDEF <.MEM_1261>
D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
# VUSE <.MEM_1261>
D.44530_441 = session_161(D)->channel;

.MEM_1262 : --> single use.
# .MEM_1263 = VDEF <.MEM_1262>
D.44747_443 = switch_true (D.44746_442);

.MEM_1263 : -->2 uses.
.MEM_1119 = PHI <.MEM_1261(142), .MEM_1263(143), .MEM_1264(144)>
# .MEM_1264 = VDEF <.MEM_1263>
switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);

.MEM_1264 : --> single use.
.MEM_1119 = PHI <.MEM_1261(142), .MEM_1263(143), .MEM_1264(144)>

.MEM_1265 : --> single use.
# .MEM_1266 = VDEF <.MEM_1265>
D.44750_444->remote_sdp_ip = D.44752_446;

.MEM_1266 : -->3 uses.
# .MEM_1267 = VDEF <.MEM_1266>
D.44750_447->remote_sdp_port = D.44753_448;
# VUSE <.MEM_1266>
D.44753_448 = t38_options_394->remote_port;
# VUSE <.MEM_1266>
D.44750_447 = a_engine_188->cur_payload_map;

.MEM_1267 : -->8 uses.
# .MEM_1270 = VDEF <.MEM_1267>
err = 0B;
# .MEM_1268 = VDEF <.MEM_1267>
D.44764_458 = switch_channel_get_name (D.44530_457);
# VUSE <.MEM_1267>
D.44530_457 = session_161(D)->channel;
# VUSE <.MEM_1267>
D.44762_456 = D.44750_455->remote_sdp_port;
# VUSE <.MEM_1267>
D.44750_455 = a_engine_188->cur_payload_map;
# VUSE <.MEM_1267>
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
# VUSE <.MEM_1267>
D.44760_453 = D.44750_452->remote_sdp_ip;
# VUSE <.MEM_1267>
D.44750_452 = a_engine_188->cur_payload_map;

.MEM_1268 : --> single use.
# .MEM_1269 = VDEF <.MEM_1268>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);

.MEM_1269 : --> single use.
.MEM_1120 = PHI <.MEM_1269(148), .MEM_1276(149), .MEM_1278(150)>

.MEM_1270 : -->2 uses.
# .MEM_1271 = VDEF <.MEM_1270>
D.44765_460 = switch_channel_get_name (D.44530_459);
# VUSE <.MEM_1270>
D.44530_459 = session_161(D)->channel;

.MEM_1271 : -->5 uses.
# .MEM_1272 = VDEF <.MEM_1271>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
# VUSE <.MEM_1271>
D.44762_465 = D.44750_464->remote_sdp_port;
# VUSE <.MEM_1271>
D.44750_464 = a_engine_188->cur_payload_map;
# VUSE <.MEM_1271>
D.44760_463 = D.44750_462->remote_sdp_ip;
# VUSE <.MEM_1271>
D.44750_462 = a_engine_188->cur_payload_map;

.MEM_1272 : -->3 uses.
# .MEM_1273 = VDEF <.MEM_1272>
switch_snprintf (&tmp, 32, "%d", D.44767_469);
# VUSE <.MEM_1272>
D.44762_468 = D.44750_467->remote_sdp_port;
# VUSE <.MEM_1272>
D.44750_467 = a_engine_188->cur_payload_map;

.MEM_1273 : -->4 uses.
# .MEM_1274 = VDEF <.MEM_1273>
switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
# VUSE <.MEM_1273>
D.44760_472 = D.44750_471->remote_sdp_ip;
# VUSE <.MEM_1273>
D.44750_471 = a_engine_188->cur_payload_map;
# VUSE <.MEM_1273>
D.44530_470 = session_161(D)->channel;

.MEM_1274 : -->2 uses.
# .MEM_1275 = VDEF <.MEM_1274>
switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
# VUSE <.MEM_1274>
D.44530_473 = session_161(D)->channel;

.MEM_1275 : -->6 uses.
# .MEM_1276 = VDEF <.MEM_1275>
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
# VUSE <.MEM_1275>
D.44762_478 = D.44750_477->remote_sdp_port;
# VUSE <.MEM_1275>
D.44750_477 = a_engine_188->cur_payload_map;
# VUSE <.MEM_1275>
D.44760_476 = D.44750_475->remote_sdp_ip;
# VUSE <.MEM_1275>
D.44750_475 = a_engine_188->cur_payload_map;
# VUSE <.MEM_1275>
D.44605_474 = a_engine_188->rtp_session;

.MEM_1276 : -->3 uses.
.MEM_1120 = PHI <.MEM_1269(148), .MEM_1276(149), .MEM_1278(150)>
# .MEM_1277 = VDEF <.MEM_1276>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
# VUSE <.MEM_1276>
err.90_480 = err;

.MEM_1277 : --> single use.
# .MEM_1278 = VDEF <.MEM_1277>
switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);

.MEM_1278 : --> single use.
.MEM_1120 = PHI <.MEM_1269(148), .MEM_1276(149), .MEM_1278(150)>

.MEM_1279 : -->3 uses.
# .MEM_1280 = VDEF <.MEM_1279>
switch_channel_set_flag_value (D.44482_483, 101, 1);
# VUSE <.MEM_1279>
D.44482_483 = D.44481_482->channel;
# VUSE <.MEM_1279>
D.44481_482 = smh_186->session;

.MEM_1280 : -->3 uses.
# .MEM_1281 = VDEF <.MEM_1280>
switch_channel_set_flag_value (D.44772_485, 101, 1);
# VUSE <.MEM_1280>
D.44772_485 = other_session.89_484->channel;
# VUSE <.MEM_1280>
other_session.89_484 = other_session;

.MEM_1281 : -->2 uses.
# .MEM_1282 = VDEF <.MEM_1281>
msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
# VUSE <.MEM_1281>
other_session.89_486 = other_session;

.MEM_1282 : --> single use.
# .MEM_1283 = VDEF <.MEM_1282>
msg_487->message_id = 21;

.MEM_1283 : --> single use.
# .MEM_1284 = VDEF <.MEM_1283>
msg_487->from = "src/switch_core_media.c";

.MEM_1284 : -->2 uses.
# .MEM_1285 = VDEF <.MEM_1284>
D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
# VUSE <.MEM_1284>
other_session.89_488 = other_session;

.MEM_1285 : --> single use.
# .MEM_1286 = VDEF <.MEM_1285>
msg_487->string_arg = D.44773_489;

.MEM_1286 : --> single use.
# .MEM_1287 = VDEF <.MEM_1286>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));

.MEM_1287 : -->2 uses.
# .MEM_1288 = VDEF <.MEM_1287>
switch_core_session_queue_message (other_session.89_490, msg_487);
# VUSE <.MEM_1287>
other_session.89_490 = other_session;

.MEM_1288 : -->2 uses.
# .MEM_1289 = VDEF <.MEM_1288>
switch_core_session_rwunlock (other_session.89_491);
# VUSE <.MEM_1288>
other_session.89_491 = other_session;

.MEM_1289 : --> single use.
.MEM_1121 = PHI <.MEM_1118(138), .MEM_1250(139), .MEM_1289(151)>

.MEM_1290 : -->2 uses.
.MEM_1122 = PHI <.MEM_1290(155), .MEM_1291(156), .MEM_1291(165)>
# .MEM_1291 = VDEF <.MEM_1290>
D.44784_499 = dtls_ok (session_161(D));

.MEM_1291 : -->8 uses.
# VUSE <.MEM_1291>
D.47887_1469 = *D.44619_503;
.MEM_1122 = PHI <.MEM_1290(155), .MEM_1291(156), .MEM_1291(165)>
.MEM_1122 = PHI <.MEM_1290(155), .MEM_1291(156), .MEM_1291(165)>
# VUSE <.MEM_1291>
attr_506 = attr_30->a_next;
# VUSE <.MEM_1291>
D.44619_503 = attr_30->a_value;
# VUSE <.MEM_1291>
D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
# VUSE <.MEM_1291>
D.44590_501 = attr_30->a_name;
# VUSE <.MEM_1291>
attr_500 = m_28->m_attributes;

.MEM_1292 : -->2 uses.
# .MEM_1525 = VDEF <.MEM_1292>
D.47890_1471 = strtol (D.44619_513, 0B, 10);
# VUSE <.MEM_1292>
D.44619_513 = attr_31->a_value;

.MEM_1293 : -->5 uses.
.MEM_1124 = PHI <.MEM_1294(170), .MEM_1527(173), .MEM_1529(176), .MEM_1125(177), .MEM_1125(178), .MEM_1125(182), .MEM_1298(187), .MEM_1293(169)>
# .MEM_1294 = VDEF <.MEM_1293>
D.44471_518->rtcp_audio_interval_msec = "5000";
# VUSE <.MEM_1293>
D.44471_518 = smh_186->mparams;
# VUSE <.MEM_1293>
D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
# VUSE <.MEM_1293>
D.44471_516 = smh_186->mparams;

.MEM_1294 : --> single use.
.MEM_1124 = PHI <.MEM_1294(170), .MEM_1527(173), .MEM_1529(176), .MEM_1125(177), .MEM_1125(178), .MEM_1125(182), .MEM_1298(187), .MEM_1293(169)>

.MEM_1295 : --> single use.
# .MEM_1296 = VDEF <.MEM_1295>
D.44826_538 = switch_true (D.44825_537);

.MEM_1296 : -->4 uses.
.MEM_1123 = PHI <.MEM_1125(183), .MEM_1296(184), .MEM_1296(185)>
.MEM_1123 = PHI <.MEM_1125(183), .MEM_1296(184), .MEM_1296(185)>
# .MEM_1297 = VDEF <.MEM_1296>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
# VUSE <.MEM_1296>
D.44666_539 = m_28->m_proto;

.MEM_1297 : --> single use.
.MEM_1170 = PHI <.MEM_1236(121), .MEM_1239(123), .MEM_1259(141), .MEM_1121(152), .MEM_1297(186), .MEM_1299(192), .MEM_1300(196), .MEM_1406(353), .MEM_1417(398), .MEM_1169(450)>

.MEM_1298 : --> single use.
.MEM_1124 = PHI <.MEM_1294(170), .MEM_1527(173), .MEM_1529(176), .MEM_1125(177), .MEM_1125(178), .MEM_1125(182), .MEM_1298(187), .MEM_1293(169)>

.MEM_1299 : --> single use.
.MEM_1170 = PHI <.MEM_1236(121), .MEM_1239(123), .MEM_1259(141), .MEM_1121(152), .MEM_1297(186), .MEM_1299(192), .MEM_1300(196), .MEM_1406(353), .MEM_1417(398), .MEM_1169(450)>

.MEM_1300 : --> single use.
.MEM_1170 = PHI <.MEM_1236(121), .MEM_1239(123), .MEM_1259(141), .MEM_1121(152), .MEM_1297(186), .MEM_1299(192), .MEM_1300(196), .MEM_1406(353), .MEM_1417(398), .MEM_1169(450)>

.MEM_1301 : -->9 uses.
.MEM_1126 = PHI <.MEM_1301(202), .MEM_1302(203)>
# .MEM_1303 = VDEF <.MEM_1301>
D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
# .MEM_1302 = VDEF <.MEM_1301>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
# VUSE <.MEM_1301>
D.44856_567 = map_128->rm_pt;
# VUSE <.MEM_1301>
D.44855_566 = D.44750_565->rm_rate;
# VUSE <.MEM_1301>
D.44750_565 = a_engine_188->cur_payload_map;
# VUSE <.MEM_1301>
D.44854_564 = map_128->rm_rate;
# VUSE <.MEM_1301>
D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
# VUSE <.MEM_1301>
rm_encoding_561 = map_128->rm_encoding;

.MEM_1302 : --> single use.
.MEM_1126 = PHI <.MEM_1301(202), .MEM_1302(203)>

.MEM_1303 : -->10 uses.
.MEM_1128 = PHI <.MEM_1303(218), .MEM_1306(219)>
.MEM_1135 = PHI <.MEM_1126(204), .MEM_1127(210), .MEM_1303(212), .MEM_1303(214), .MEM_1134(279)>
.MEM_1135 = PHI <.MEM_1126(204), .MEM_1127(210), .MEM_1303(212), .MEM_1303(214), .MEM_1134(279)>
.MEM_1127 = PHI <.MEM_1303(208), .MEM_1305(209)>
# .MEM_1306 = VDEF <.MEM_1303>
D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
# VUSE <.MEM_1303>
D.44856_586 = map_128->rm_pt;
# .MEM_1304 = VDEF <.MEM_1303>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
# VUSE <.MEM_1303>
D.44605_574 = a_engine_188->rtp_session;
# VUSE <.MEM_1303>
D.44856_572 = map_128->rm_pt;
# VUSE <.MEM_1303>
D.44863_571 = strcasecmp (rm_encoding_130, "CN");

.MEM_1304 : -->4 uses.
# .MEM_1305 = VDEF <.MEM_1304>
switch_rtp_set_cng_pt (D.44605_576, D.44869_578);
# VUSE <.MEM_1304>
D.44869_578 = D.44471_577->cng_pt;
# VUSE <.MEM_1304>
D.44471_577 = smh_186->mparams;
# VUSE <.MEM_1304>
D.44605_576 = a_engine_188->rtp_session;

.MEM_1305 : --> single use.
.MEM_1127 = PHI <.MEM_1303(208), .MEM_1305(209)>

.MEM_1306 : --> single use.
.MEM_1128 = PHI <.MEM_1303(218), .MEM_1306(219)>

.MEM_1307 : -->13 uses.
.MEM_1129 = PHI <.MEM_1307(232), .MEM_1308(234), .MEM_1308(239), .MEM_1308(240), .MEM_1307(231), .MEM_1307(233)>
.MEM_1129 = PHI <.MEM_1307(232), .MEM_1308(234), .MEM_1308(239), .MEM_1308(240), .MEM_1307(231), .MEM_1307(233)>
.MEM_1129 = PHI <.MEM_1307(232), .MEM_1308(234), .MEM_1308(239), .MEM_1308(240), .MEM_1307(231), .MEM_1307(233)>
# VUSE <.MEM_1307>
D.47915_1481 = *D.44893_598;
# .MEM_1308 = VDEF <.MEM_1307>
D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);
# VUSE <.MEM_1307>
D.44854_610 = map_128->rm_rate;
# VUSE <.MEM_1307>
D.44893_609 = map_128->rm_fmtp;
# VUSE <.MEM_1307>
D.44889_608 = map_128->rm_encoding;
# VUSE <.MEM_1307>
D.44901_605 = strcasecmp (D.44889_604, "isac");
# VUSE <.MEM_1307>
D.44889_604 = map_128->rm_encoding;
# VUSE <.MEM_1307>
D.44897_601 = strcasecmp (D.44889_600, "ilbc");
# VUSE <.MEM_1307>
D.44889_600 = map_128->rm_encoding;
# VUSE <.MEM_1307>
D.44893_598 = map_128->rm_fmtp;

.MEM_1308 : -->9 uses.
.MEM_1129 = PHI <.MEM_1307(232), .MEM_1308(234), .MEM_1308(239), .MEM_1308(240), .MEM_1307(231), .MEM_1307(233)>
.MEM_1129 = PHI <.MEM_1307(232), .MEM_1308(234), .MEM_1308(239), .MEM_1308(240), .MEM_1307(231), .MEM_1307(233)>
.MEM_1129 = PHI <.MEM_1307(232), .MEM_1308(234), .MEM_1308(239), .MEM_1308(240), .MEM_1307(231), .MEM_1307(233)>
# VUSE <.MEM_1308>
fmtp_remote_codec_rate_619 = codec_fmtp.actual_samples_per_second;
# VUSE <.MEM_1308>
D.44914_618 = codec_fmtp.actual_samples_per_second;
# VUSE <.MEM_1308>
D.44911_616 = codec_fmtp.microseconds_per_packet;
# VUSE <.MEM_1308>
D.44911_615 = codec_fmtp.microseconds_per_packet;
# VUSE <.MEM_1308>
D.44908_613 = codec_fmtp.bits_per_second;
# VUSE <.MEM_1308>
D.44908_612 = codec_fmtp.bits_per_second;

.MEM_1309 : -->22 uses.
.MEM_1130 = PHI <.MEM_1309(263), .MEM_1309(264), .MEM_1309(266), .MEM_1310(267)>
.MEM_1130 = PHI <.MEM_1309(263), .MEM_1309(264), .MEM_1309(266), .MEM_1310(267)>
.MEM_1130 = PHI <.MEM_1309(263), .MEM_1309(264), .MEM_1309(266), .MEM_1310(267)>
# VUSE <.MEM_1309>
D.47919_1483 = *D.44889_642;
# .MEM_1310 = VDEF <.MEM_1309>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
# VUSE <.MEM_1309>
D.44979_683 = strcasecmp (D.44889_682, "pcmu");
# VUSE <.MEM_1309>
D.44889_682 = map_128->rm_encoding;
# VUSE <.MEM_1309>
D.44977_681 = strcasecmp (D.44889_680, "pcma");
# VUSE <.MEM_1309>
D.44889_680 = map_128->rm_encoding;
# VUSE <.MEM_1309>
D.44963_672 = strcasecmp (D.44889_671, "isac");
# VUSE <.MEM_1309>
D.44889_671 = map_128->rm_encoding;
# VUSE <.MEM_1309>
D.44960_670 = strcasecmp (D.44889_669, "ilbc");
# VUSE <.MEM_1309>
D.44889_669 = map_128->rm_encoding;
# VUSE <.MEM_1309>
D.44947_658 = imp_629->actual_samples_per_second;
# VUSE <.MEM_1309>
D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
# VUSE <.MEM_1309>
D.44926_656 = imp_629->iananame;
# VUSE <.MEM_1309>
D.44927_653 = imp_629->ianacode;
# VUSE <.MEM_1309>
D.44856_651 = map_128->rm_pt;
# VUSE <.MEM_1309>
D.44856_649 = map_128->rm_pt;
# VUSE <.MEM_1309>
D.44821_645 = D.44471_644->ndlb;
# VUSE <.MEM_1309>
D.44471_644 = smh_186->mparams;
# VUSE <.MEM_1309>
D.44889_642 = map_128->rm_encoding;

.MEM_1310 : --> single use.
.MEM_1130 = PHI <.MEM_1309(263), .MEM_1309(264), .MEM_1309(266), .MEM_1310(267)>

.MEM_1311 : --> single use.
.MEM_1131 = PHI <.MEM_1311(270), .MEM_1130(273)>

.MEM_1312 : --> single use.
# .MEM_1313 = VDEF <.MEM_1312>
near_matches[nm_idx_116].codec_idx = i_129;

.MEM_1313 : --> single use.
# .MEM_1314 = VDEF <.MEM_1313>
near_matches[nm_idx_116].rate = remote_codec_rate.92_700;

.MEM_1314 : --> single use.
# .MEM_1315 = VDEF <.MEM_1314>
near_matches[nm_idx_116].imp = imp_629;

.MEM_1315 : --> single use.
# .MEM_1316 = VDEF <.MEM_1315>
near_matches[nm_idx_116].map = map_128;

.MEM_1316 : --> single use.
.MEM_1132 = PHI <.MEM_1133(243), .MEM_1130(268), .MEM_1316(274), .MEM_1321(276)>

.MEM_1317 : --> single use.
# .MEM_1318 = VDEF <.MEM_1317>
matches[m_idx_101].rate = codec_rate.94_702;

.MEM_1318 : --> single use.
# .MEM_1319 = VDEF <.MEM_1318>
matches[m_idx_101].imp = imp_629;

.MEM_1319 : --> single use.
# .MEM_1320 = VDEF <.MEM_1319>
matches[m_idx_101].map = map_128;

.MEM_1320 : -->4 uses.
# .MEM_1321 = VDEF <.MEM_1320>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
# VUSE <.MEM_1320>
D.44929_707 = imp_629->microseconds_per_packet;
# VUSE <.MEM_1320>
D.44927_705 = imp_629->ianacode;
# VUSE <.MEM_1320>
D.44926_704 = imp_629->iananame;

.MEM_1321 : -->2 uses.
.MEM_1132 = PHI <.MEM_1133(243), .MEM_1130(268), .MEM_1316(274), .MEM_1321(276)>
.MEM_1134 = PHI <.MEM_1321(275), .MEM_1133(278)>

.MEM_1322 : --> single use.
.MEM_1138 = PHI <.MEM_1137(282), .MEM_1322(283)>

.MEM_1323 : --> single use.
# .MEM_1324 = VDEF <.MEM_1323>
prefs[0] = &tmp;

.MEM_1324 : --> single use.
# .MEM_1325 = VDEF <.MEM_1324>
num_731 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);

.MEM_1325 : -->7 uses.
.MEM_1139 = PHI <.MEM_1138(285), .MEM_1325(295)>
# .MEM_1326 = VDEF <.MEM_1325>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
# VUSE <.MEM_1325>
D.45027_740 = timp_134->actual_samples_per_second;
# VUSE <.MEM_1325>
D.45024_738 = timp_134->microseconds_per_packet;
# VUSE <.MEM_1325>
D.45026_737 = timp_134->iananame;
# VUSE <.MEM_1325>
D.45024_734 = timp_134->microseconds_per_packet;
# VUSE <.MEM_1325>
timp_732 = search[0];

.MEM_1326 : -->2 uses.
# .MEM_1327 = VDEF <.MEM_1326>
matches[m_idx_106].codec_idx = D.45028_742;
# VUSE <.MEM_1326>
D.45028_742 = near_matches[j_133].codec_idx;

.MEM_1327 : --> single use.
# .MEM_1328 = VDEF <.MEM_1327>
matches[m_idx_106].rate = near_rate.96_743;

.MEM_1328 : --> single use.
# .MEM_1329 = VDEF <.MEM_1328>
matches[m_idx_106].imp = timp_134;

.MEM_1329 : --> single use.
# .MEM_1330 = VDEF <.MEM_1329>
matches[m_idx_106].map = near_map_727;

.MEM_1330 : --> single use.
.MEM_1140 = PHI <.MEM_1138(284), .MEM_1330(294), .MEM_1139(296)>

.MEM_1331 : --> single use.
.MEM_1141 = PHI <.MEM_1140(298), .MEM_1331(299)>

.MEM_1332 : --> single use.
# .MEM_1333 = VDEF <.MEM_1332>
smh_186->num_negotiated_codecs = 0;

.MEM_1333 : --> single use.
.MEM_1147 = PHI <.MEM_1333(300), .MEM_1364(321)>

.MEM_1334 : -->4 uses.
.MEM_1142 = PHI <.MEM_1334(301), .MEM_1336(302), .MEM_1337(303)>
# .MEM_1335 = VDEF <.MEM_1334>
a_engine_188->cur_payload_map = pmap_760;
# VUSE <.MEM_1334>
mmap_762 = matches[j_135].map;
# VUSE <.MEM_1334>
mimp_761 = matches[j_135].imp;

.MEM_1335 : -->2 uses.
# .MEM_1336 = VDEF <.MEM_1335>
D.44750_763->current = 1;
# VUSE <.MEM_1335>
D.44750_763 = a_engine_188->cur_payload_map;

.MEM_1336 : -->5 uses.
.MEM_1142 = PHI <.MEM_1334(301), .MEM_1336(302), .MEM_1337(303)>
# .MEM_1337 = VDEF <.MEM_1336>
switch_rtp_set_default_payload (D.44605_765, D.45048_766);
# VUSE <.MEM_1336>
D.45048_766 = pmap_760->pt;
# VUSE <.MEM_1336>
D.44605_765 = a_engine_188->rtp_session;
# VUSE <.MEM_1336>
D.44605_764 = a_engine_188->rtp_session;

.MEM_1337 : --> single use.
.MEM_1142 = PHI <.MEM_1334(301), .MEM_1336(302), .MEM_1337(303)>

.MEM_1338 : --> single use.
# .MEM_1339 = VDEF <.MEM_1338>
pmap_760->rm_encoding = D.45050_768;

.MEM_1339 : -->2 uses.
# .MEM_1340 = VDEF <.MEM_1339>
D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
# VUSE <.MEM_1339>
D.45051_769 = mimp_761->iananame;

.MEM_1340 : --> single use.
# .MEM_1341 = VDEF <.MEM_1340>
pmap_760->iananame = D.45052_770;

.MEM_1341 : -->2 uses.
# .MEM_1342 = VDEF <.MEM_1341>
pmap_760->recv_pt = D.45054_772;
# VUSE <.MEM_1341>
D.45053_771 = mmap_762->rm_pt;

.MEM_1342 : -->2 uses.
# .MEM_1343 = VDEF <.MEM_1342>
pmap_760->rm_rate = D.45055_773;
# VUSE <.MEM_1342>
D.45055_773 = mimp_761->samples_per_second;

.MEM_1343 : -->2 uses.
# .MEM_1344 = VDEF <.MEM_1343>
pmap_760->adv_rm_rate = D.45055_774;
# VUSE <.MEM_1343>
D.45055_774 = mimp_761->samples_per_second;

.MEM_1344 : -->5 uses.
.MEM_1143 = PHI <.MEM_1344(304), .MEM_1345(305)>
# .MEM_1345 = VDEF <.MEM_1344>
pmap_760->rm_rate = D.45059_777;
# VUSE <.MEM_1344>
D.45059_777 = mimp_761->actual_samples_per_second;
# VUSE <.MEM_1344>
D.45056_776 = strcasecmp (D.45051_775, "g722");
# VUSE <.MEM_1344>
D.45051_775 = mimp_761->iananame;

.MEM_1345 : --> single use.
.MEM_1143 = PHI <.MEM_1344(304), .MEM_1345(305)>

.MEM_1346 : -->2 uses.
# .MEM_1347 = VDEF <.MEM_1346>
pmap_760->bitrate = D.45064_782;
# VUSE <.MEM_1346>
D.45063_781 = mimp_761->bits_per_second;

.MEM_1347 : -->4 uses.
.MEM_1514 = PHI <.MEM_1537(307), .MEM_1347(308)>
# .MEM_1537 = VDEF <.MEM_1347>
D.47922_1485 = strtol (D.45066_784, 0B, 10);
# VUSE <.MEM_1347>
D.45066_784 = mmap_762->rm_params;
# VUSE <.MEM_1347>
D.45066_783 = mmap_762->rm_params;

.MEM_1348 : -->7 uses.
# .MEM_1355 = VDEF <.MEM_1348>
pmap_760->adv_channels = D.45073_794;
# VUSE <.MEM_1348>
D.45073_794 = pmap_760->channels;
# .MEM_1351 = VDEF <.MEM_1348>
pmap_760->adv_channels = 2;
# .MEM_1349 = VDEF <.MEM_1348>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
# VUSE <.MEM_1348>
D.45073_789 = pmap_760->channels;
# VUSE <.MEM_1348>
D.45070_788 = strcasecmp (D.45049_787, "opus");
# VUSE <.MEM_1348>
D.45049_787 = mmap_762->rm_encoding;

.MEM_1349 : --> single use.
# .MEM_1350 = VDEF <.MEM_1349>
pmap_760->adv_channels = 1;

.MEM_1350 : --> single use.
.MEM_1144 = PHI <.MEM_1350(311), .MEM_1351(312)>

.MEM_1351 : --> single use.
.MEM_1144 = PHI <.MEM_1350(311), .MEM_1351(312)>

.MEM_1352 : -->2 uses.
.MEM_1145 = PHI <.MEM_1144(316), .MEM_1352(317)>
# .MEM_1353 = VDEF <.MEM_1352>
pmap_760->channels = 2;

.MEM_1353 : --> single use.
.MEM_1146 = PHI <.MEM_1354(319), .MEM_1355(320), .MEM_1353(318)>

.MEM_1354 : --> single use.
.MEM_1146 = PHI <.MEM_1354(319), .MEM_1355(320), .MEM_1353(318)>

.MEM_1355 : --> single use.
.MEM_1146 = PHI <.MEM_1354(319), .MEM_1355(320), .MEM_1353(318)>

.MEM_1356 : --> single use.
# .MEM_1357 = VDEF <.MEM_1356>
pmap_760->remote_sdp_ip = D.45086_796;

.MEM_1357 : -->2 uses.
# .MEM_1358 = VDEF <.MEM_1357>
pmap_760->remote_sdp_port = D.45087_798;
# VUSE <.MEM_1357>
D.44697_797 = m_28->m_port;

.MEM_1358 : -->2 uses.
# .MEM_1359 = VDEF <.MEM_1358>
D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
# VUSE <.MEM_1358>
D.45079_799 = mmap_762->rm_fmtp;

.MEM_1359 : --> single use.
# .MEM_1360 = VDEF <.MEM_1359>
pmap_760->rm_fmtp = D.45088_800;

.MEM_1360 : -->2 uses.
# .MEM_1361 = VDEF <.MEM_1360>
pmap_760->agreed_pt = D.45054_802;
# VUSE <.MEM_1360>
D.45053_801 = mmap_762->rm_pt;

.MEM_1361 : -->2 uses.
# .MEM_1362 = VDEF <.MEM_1361>
smh_186->negotiated_codecs[D.44655_803] = mimp_761;
# VUSE <.MEM_1361>
D.44655_803 = smh_186->num_negotiated_codecs;

.MEM_1362 : --> single use.
# .MEM_1363 = VDEF <.MEM_1362>
smh_186->num_negotiated_codecs = D.45089_804;

.MEM_1363 : -->2 uses.
# .MEM_1364 = VDEF <.MEM_1363>
pmap_760->recv_pt = D.45054_806;
# VUSE <.MEM_1363>
D.45053_805 = mmap_762->rm_pt;

.MEM_1364 : --> single use.
.MEM_1147 = PHI <.MEM_1333(300), .MEM_1364(321)>

.MEM_1365 : -->4 uses.
# .MEM_1366 = VDEF <.MEM_1365>
switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);
# VUSE <.MEM_1365>
D.44760_813 = D.44750_812->remote_sdp_ip;
# VUSE <.MEM_1365>
D.44750_812 = a_engine_188->cur_payload_map;
# VUSE <.MEM_1365>
D.44530_811 = session_161(D)->channel;

.MEM_1366 : -->2 uses.
# .MEM_1367 = VDEF <.MEM_1366>
switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);
# VUSE <.MEM_1366>
D.44530_814 = session_161(D)->channel;

.MEM_1367 : -->3 uses.
# .MEM_1368 = VDEF <.MEM_1367>
switch_snprintf (&tmp, 50, "%d", D.45093_817);
# VUSE <.MEM_1367>
D.45092_816 = D.44750_815->recv_pt;
# VUSE <.MEM_1367>
D.44750_815 = a_engine_188->cur_payload_map;

.MEM_1368 : -->2 uses.
# .MEM_1369 = VDEF <.MEM_1368>
switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);
# VUSE <.MEM_1368>
D.44530_818 = session_161(D)->channel;

.MEM_1369 : -->6 uses.
.MEM_1149 = PHI <.MEM_1369(330), .MEM_1370(331)>
# VUSE <.MEM_1369>
D.47930_1492 = D.45094_819->implementation;
# VUSE <.MEM_1369>
D.47931_1491 = D.45094_819->codec_interface;
# VUSE <.MEM_1369>
D.47932_1490 = D.45094_819->mutex;
# VUSE <.MEM_1369>
D.47934_1488 = D.45094_819->flags;
# .MEM_1370 = VDEF <.MEM_1369>
a_engine_188->reset_codec = 1;

.MEM_1370 : --> single use.
.MEM_1149 = PHI <.MEM_1369(330), .MEM_1370(331)>

.MEM_1371 : -->2 uses.
.MEM_1150 = PHI <.MEM_1148(323), .MEM_1372(333), .MEM_1371(334)>
# .MEM_1372 = VDEF <.MEM_1371>
check_ice (smh_186, 0, sdp_198, m_28);

.MEM_1372 : --> single use.
.MEM_1150 = PHI <.MEM_1148(323), .MEM_1372(333), .MEM_1371(334)>

.MEM_1373 : -->3 uses.
.MEM_1151 = PHI <.MEM_1373(336), .MEM_1374(337)>
# .MEM_1374 = VDEF <.MEM_1373>
D.45109_828 = switch_channel_test_flag (D.44530_827, 93);
# VUSE <.MEM_1373>
D.44530_827 = session_161(D)->channel;

.MEM_1374 : -->2 uses.
.MEM_1152 = PHI <.MEM_1150(335), .MEM_1374(337), .MEM_1375(338)>
.MEM_1151 = PHI <.MEM_1373(336), .MEM_1374(337)>

.MEM_1375 : -->3 uses.
.MEM_1152 = PHI <.MEM_1150(335), .MEM_1374(337), .MEM_1375(338)>
# VUSE <.MEM_1375>
best_te_833 = D.44471_832->te;
# VUSE <.MEM_1375>
D.44471_832 = smh_186->mparams;

.MEM_1376 : -->5 uses.
# .MEM_1383 = VDEF <.MEM_1376>
D.44471_845->te = best_te_21;
# VUSE <.MEM_1376>
D.44471_845 = smh_186->mparams;
# VUSE <.MEM_1376>
D.44471_844 = smh_186->mparams;
# .MEM_1377 = VDEF <.MEM_1376>
D.44471_835->te = best_te_21;
# VUSE <.MEM_1376>
D.44471_835 = smh_186->mparams;

.MEM_1377 : -->2 uses.
# .MEM_1378 = VDEF <.MEM_1377>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);
# VUSE <.MEM_1377>
te_836 = D.44471_835->te;

.MEM_1378 : -->2 uses.
# .MEM_1379 = VDEF <.MEM_1378>
switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);
# VUSE <.MEM_1378>
D.44530_838 = session_161(D)->channel;

.MEM_1379 : -->2 uses.
# .MEM_1380 = VDEF <.MEM_1379>
D.44471_839->dtmf_type = 0;
# VUSE <.MEM_1379>
D.44471_839 = smh_186->mparams;

.MEM_1380 : -->4 uses.
.MEM_1168 = PHI <.MEM_1398(346), .MEM_1113(348), .MEM_1113(349), .MEM_1163(428), .MEM_1453(447), .MEM_1454(448), .MEM_1387(343), .MEM_1391(344), .MEM_1380(341), .MEM_1382(342), .MEM_1402(347)>
# .MEM_1381 = VDEF <.MEM_1380>
switch_rtp_set_telephony_event (D.44605_841, best_te_21);
# VUSE <.MEM_1380>
D.44605_841 = a_engine_188->rtp_session;
# VUSE <.MEM_1380>
D.44605_840 = a_engine_188->rtp_session;

.MEM_1381 : -->2 uses.
# .MEM_1382 = VDEF <.MEM_1381>
switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_843);
# VUSE <.MEM_1381>
D.44530_842 = session_161(D)->channel;

.MEM_1382 : --> single use.
.MEM_1168 = PHI <.MEM_1398(346), .MEM_1113(348), .MEM_1113(349), .MEM_1163(428), .MEM_1453(447), .MEM_1454(448), .MEM_1387(343), .MEM_1391(344), .MEM_1380(341), .MEM_1382(342), .MEM_1402(347)>

.MEM_1383 : -->2 uses.
# .MEM_1384 = VDEF <.MEM_1383>
D.44471_845->recv_te = D.45110_846;
# VUSE <.MEM_1383>
D.45110_846 = D.44471_845->te;

.MEM_1384 : -->2 uses.
# .MEM_1385 = VDEF <.MEM_1384>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);
# VUSE <.MEM_1384>
te_847 = D.44471_845->recv_te;

.MEM_1385 : -->2 uses.
# .MEM_1386 = VDEF <.MEM_1385>
switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);
# VUSE <.MEM_1385>
D.44530_849 = session_161(D)->channel;

.MEM_1386 : -->2 uses.
# .MEM_1387 = VDEF <.MEM_1386>
D.44471_850->dtmf_type = 0;
# VUSE <.MEM_1386>
D.44471_850 = smh_186->mparams;

.MEM_1387 : -->4 uses.
.MEM_1168 = PHI <.MEM_1398(346), .MEM_1113(348), .MEM_1113(349), .MEM_1163(428), .MEM_1453(447), .MEM_1454(448), .MEM_1387(343), .MEM_1391(344), .MEM_1380(341), .MEM_1382(342), .MEM_1402(347)>
# .MEM_1388 = VDEF <.MEM_1387>
switch_rtp_set_telephony_event (D.44605_852, te_847);
# VUSE <.MEM_1387>
D.44605_852 = a_engine_188->rtp_session;
# VUSE <.MEM_1387>
D.44605_851 = a_engine_188->rtp_session;

.MEM_1388 : -->2 uses.
# .MEM_1389 = VDEF <.MEM_1388>
switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_854);
# VUSE <.MEM_1388>
D.44530_853 = session_161(D)->channel;

.MEM_1389 : -->2 uses.
# .MEM_1390 = VDEF <.MEM_1389>
switch_rtp_set_telephony_recv_event (D.44605_855, te_847);
# VUSE <.MEM_1389>
D.44605_855 = a_engine_188->rtp_session;

.MEM_1390 : -->2 uses.
# .MEM_1391 = VDEF <.MEM_1390>
switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_857);
# VUSE <.MEM_1390>
D.44530_856 = session_161(D)->channel;

.MEM_1391 : --> single use.
.MEM_1168 = PHI <.MEM_1398(346), .MEM_1113(348), .MEM_1113(349), .MEM_1163(428), .MEM_1453(447), .MEM_1454(448), .MEM_1387(343), .MEM_1391(344), .MEM_1380(341), .MEM_1382(342), .MEM_1402(347)>

.MEM_1392 : --> single use.
# .MEM_1393 = VDEF <.MEM_1392>
D.45125_859 = switch_false (D.45124_858);

.MEM_1393 : -->3 uses.
# .MEM_1399 = VDEF <.MEM_1393>
switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);
# VUSE <.MEM_1393>
D.44530_866 = session_161(D)->channel;
# .MEM_1394 = VDEF <.MEM_1393>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");

.MEM_1394 : -->2 uses.
# .MEM_1395 = VDEF <.MEM_1394>
switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);
# VUSE <.MEM_1394>
D.44530_860 = session_161(D)->channel;

.MEM_1395 : -->2 uses.
# .MEM_1396 = VDEF <.MEM_1395>
D.44471_861->dtmf_type = 1;
# VUSE <.MEM_1395>
D.44471_861 = smh_186->mparams;

.MEM_1396 : -->3 uses.
# .MEM_1397 = VDEF <.MEM_1396>
D.44471_863->te = 0;
# VUSE <.MEM_1396>
D.44471_863 = smh_186->mparams;
# VUSE <.MEM_1396>
D.44471_862 = smh_186->mparams;

.MEM_1397 : -->2 uses.
# .MEM_1398 = VDEF <.MEM_1397>
D.44471_863->recv_te = D.45110_864;
# VUSE <.MEM_1397>
D.45110_864 = D.44471_863->te;

.MEM_1398 : -->2 uses.
.MEM_1168 = PHI <.MEM_1398(346), .MEM_1113(348), .MEM_1113(349), .MEM_1163(428), .MEM_1453(447), .MEM_1454(448), .MEM_1387(343), .MEM_1391(344), .MEM_1380(341), .MEM_1382(342), .MEM_1402(347)>
# VUSE <.MEM_1398>
te_865 = D.44471_863->recv_te;

.MEM_1399 : -->2 uses.
# .MEM_1400 = VDEF <.MEM_1399>
D.44471_867->dtmf_type = 2;
# VUSE <.MEM_1399>
D.44471_867 = smh_186->mparams;

.MEM_1400 : -->3 uses.
# .MEM_1401 = VDEF <.MEM_1400>
D.44471_869->te = 0;
# VUSE <.MEM_1400>
D.44471_869 = smh_186->mparams;
# VUSE <.MEM_1400>
D.44471_868 = smh_186->mparams;

.MEM_1401 : -->2 uses.
# .MEM_1402 = VDEF <.MEM_1401>
D.44471_869->recv_te = D.45110_870;
# VUSE <.MEM_1401>
D.45110_870 = D.44471_869->te;

.MEM_1402 : -->2 uses.
.MEM_1168 = PHI <.MEM_1398(346), .MEM_1113(348), .MEM_1113(349), .MEM_1163(428), .MEM_1453(447), .MEM_1454(448), .MEM_1387(343), .MEM_1391(344), .MEM_1380(341), .MEM_1382(342), .MEM_1402(347)>
# VUSE <.MEM_1402>
te_871 = D.44471_869->recv_te;

.MEM_1403 : --> single use.
# .MEM_1404 = VDEF <.MEM_1403>
memset (&near_matches, 0, 480);

.MEM_1404 : -->2 uses.
# .MEM_1405 = VDEF <.MEM_1404>
switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);
# VUSE <.MEM_1404>
D.44530_878 = session_161(D)->channel;

.MEM_1405 : -->6 uses.
.MEM_1162 = PHI <.MEM_1405(354), .MEM_1161(424)>
# VUSE <.MEM_1405>
map_883 = m_28->m_rtpmaps;
# .MEM_1406 = VDEF <.MEM_1405>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
# VUSE <.MEM_1405>
connection_881 = m_28->m_connections;
# VUSE <.MEM_1405>
D.44546_880 = m_28->m_connections;
# VUSE <.MEM_1405>
connection_879 = sdp_198->sdp_connection;

.MEM_1406 : --> single use.
.MEM_1170 = PHI <.MEM_1236(121), .MEM_1239(123), .MEM_1259(141), .MEM_1121(152), .MEM_1297(186), .MEM_1299(192), .MEM_1300(196), .MEM_1406(353), .MEM_1417(398), .MEM_1169(450)>

.MEM_1407 : -->2 uses.
.MEM_1153 = PHI <.MEM_1407(355), .MEM_1408(356), .MEM_1408(365)>
# .MEM_1408 = VDEF <.MEM_1407>
D.45140_885 = dtls_ok (session_161(D));

.MEM_1408 : -->8 uses.
# VUSE <.MEM_1408>
D.47939_1495 = *D.44619_889;
.MEM_1153 = PHI <.MEM_1407(355), .MEM_1408(356), .MEM_1408(365)>
.MEM_1153 = PHI <.MEM_1407(355), .MEM_1408(356), .MEM_1408(365)>
# VUSE <.MEM_1408>
attr_892 = attr_32->a_next;
# VUSE <.MEM_1408>
D.44619_889 = attr_32->a_value;
# VUSE <.MEM_1408>
D.45143_888 = strcasecmp (D.44590_887, "fingerprint");
# VUSE <.MEM_1408>
D.44590_887 = attr_32->a_name;
# VUSE <.MEM_1408>
attr_886 = m_28->m_attributes;

.MEM_1409 : -->3 uses.
.MEM_1154 = PHI <.MEM_1409(374), .MEM_1410(375)>
# .MEM_1410 = VDEF <.MEM_1409>
v_engine_189->fir = D.45164_904;
# VUSE <.MEM_1409>
D.45163_903 = v_engine_189->fir;

.MEM_1410 : --> single use.
.MEM_1154 = PHI <.MEM_1409(374), .MEM_1410(375)>

.MEM_1411 : --> single use.
.MEM_1156 = PHI <.MEM_1157(368), .MEM_1411(376), .MEM_1414(388), .MEM_1157(389), .MEM_1157(390), .MEM_1157(394), .MEM_1418(399), .MEM_1157(373), .MEM_1413(387)>

.MEM_1412 : -->2 uses.
# .MEM_1543 = VDEF <.MEM_1412>
D.47946_1499 = strtol (D.44619_954, 0B, 10);
# VUSE <.MEM_1412>
D.44619_954 = attr_33->a_value;

.MEM_1413 : -->5 uses.
.MEM_1156 = PHI <.MEM_1157(368), .MEM_1411(376), .MEM_1414(388), .MEM_1157(389), .MEM_1157(390), .MEM_1157(394), .MEM_1418(399), .MEM_1157(373), .MEM_1413(387)>
# .MEM_1414 = VDEF <.MEM_1413>
D.44471_959->rtcp_video_interval_msec = "5000";
# VUSE <.MEM_1413>
D.44471_959 = smh_186->mparams;
# VUSE <.MEM_1413>
D.45214_958 = D.44471_957->rtcp_video_interval_msec;
# VUSE <.MEM_1413>
D.44471_957 = smh_186->mparams;

.MEM_1414 : --> single use.
.MEM_1156 = PHI <.MEM_1157(368), .MEM_1411(376), .MEM_1414(388), .MEM_1157(389), .MEM_1157(390), .MEM_1157(394), .MEM_1418(399), .MEM_1157(373), .MEM_1413(387)>

.MEM_1415 : --> single use.
# .MEM_1416 = VDEF <.MEM_1415>
D.45228_969 = switch_true (D.45227_968);

.MEM_1416 : -->4 uses.
.MEM_1155 = PHI <.MEM_1157(395), .MEM_1416(396), .MEM_1416(397)>
.MEM_1155 = PHI <.MEM_1157(395), .MEM_1416(396), .MEM_1416(397)>
# .MEM_1417 = VDEF <.MEM_1416>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
# VUSE <.MEM_1416>
D.44666_970 = m_28->m_proto;

.MEM_1417 : --> single use.
.MEM_1170 = PHI <.MEM_1236(121), .MEM_1239(123), .MEM_1259(141), .MEM_1121(152), .MEM_1297(186), .MEM_1299(192), .MEM_1300(196), .MEM_1406(353), .MEM_1417(398), .MEM_1169(450)>

.MEM_1418 : --> single use.
.MEM_1156 = PHI <.MEM_1157(368), .MEM_1411(376), .MEM_1414(388), .MEM_1157(389), .MEM_1157(390), .MEM_1157(394), .MEM_1418(399), .MEM_1157(373), .MEM_1413(387)>

.MEM_1419 : -->3 uses.
.MEM_1158 = PHI <.MEM_1419(407), .MEM_1420(408)>
# .MEM_1420 = VDEF <.MEM_1419>
D.45244_990 = switch_channel_test_flag (D.44530_989, 114);
# VUSE <.MEM_1419>
D.44530_989 = session_161(D)->channel;

.MEM_1420 : -->2 uses.
.MEM_1160 = PHI <.MEM_1161(406), .MEM_1420(409), .MEM_1159(421)>
.MEM_1158 = PHI <.MEM_1419(407), .MEM_1420(408)>

.MEM_1421 : -->14 uses.
.MEM_1159 = PHI <.MEM_1421(418), .MEM_1421(419), .MEM_1424(420)>
.MEM_1159 = PHI <.MEM_1421(418), .MEM_1421(419), .MEM_1424(420)>
# VUSE <.MEM_1421>
D.47957_1503 = *D.45255_996;
# .MEM_1422 = VDEF <.MEM_1421>
matches[m_idx_110].imp = imp_985;
# VUSE <.MEM_1421>
D.45263_1014 = imp_985->samples_per_second;
# VUSE <.MEM_1421>
D.45262_1013 = map_136->rm_rate;
# VUSE <.MEM_1421>
D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
# VUSE <.MEM_1421>
D.45249_1010 = imp_985->iananame;
# VUSE <.MEM_1421>
D.45250_1007 = imp_985->ianacode;
# VUSE <.MEM_1421>
D.45247_1005 = map_136->rm_pt;
# VUSE <.MEM_1421>
D.45247_1003 = map_136->rm_pt;
# VUSE <.MEM_1421>
D.44821_999 = D.44471_998->ndlb;
# VUSE <.MEM_1421>
D.44471_998 = smh_186->mparams;
# VUSE <.MEM_1421>
D.45255_996 = map_136->rm_encoding;

.MEM_1422 : --> single use.
# .MEM_1423 = VDEF <.MEM_1422>
matches[m_idx_110].map = map_136;

.MEM_1423 : -->3 uses.
# .MEM_1424 = VDEF <.MEM_1423>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
# VUSE <.MEM_1423>
D.45250_1016 = imp_985->ianacode;
# VUSE <.MEM_1423>
D.45249_1015 = imp_985->iananame;

.MEM_1424 : --> single use.
.MEM_1159 = PHI <.MEM_1421(418), .MEM_1421(419), .MEM_1424(420)>

.MEM_1425 : --> single use.
.MEM_1163 = PHI <.MEM_1162(426), .MEM_1425(427)>

.MEM_1426 : --> single use.
.MEM_1164 = PHI <.MEM_1163(429), .MEM_1426(430)>

.MEM_1427 : --> single use.
.MEM_1166 = PHI <.MEM_1427(431), .MEM_1442(435)>

.MEM_1428 : -->2 uses.
.MEM_1165 = PHI <.MEM_1428(432), .MEM_1430(433), .MEM_1431(434)>
# .MEM_1429 = VDEF <.MEM_1428>
v_engine_189->cur_payload_map = pmap_1044;

.MEM_1429 : -->2 uses.
# .MEM_1430 = VDEF <.MEM_1429>
D.45286_1045->current = 1;
# VUSE <.MEM_1429>
D.45286_1045 = v_engine_189->cur_payload_map;

.MEM_1430 : -->5 uses.
.MEM_1165 = PHI <.MEM_1428(432), .MEM_1430(433), .MEM_1431(434)>
# .MEM_1431 = VDEF <.MEM_1430>
switch_rtp_set_default_payload (D.45287_1047, D.45290_1048);
# VUSE <.MEM_1430>
D.45290_1048 = pmap_1044->pt;
# VUSE <.MEM_1430>
D.45287_1047 = v_engine_189->rtp_session;
# VUSE <.MEM_1430>
D.45287_1046 = v_engine_189->rtp_session;

.MEM_1431 : --> single use.
.MEM_1165 = PHI <.MEM_1428(432), .MEM_1430(433), .MEM_1431(434)>

.MEM_1432 : --> single use.
# .MEM_1433 = VDEF <.MEM_1432>
pmap_1044->rm_encoding = D.45291_1052;

.MEM_1433 : -->2 uses.
# .MEM_1434 = VDEF <.MEM_1433>
pmap_1044->recv_pt = D.45292_1054;
# VUSE <.MEM_1433>
D.45247_1053 = map_1050->rm_pt;

.MEM_1434 : -->2 uses.
# .MEM_1435 = VDEF <.MEM_1434>
pmap_1044->rm_rate = D.45262_1055;
# VUSE <.MEM_1434>
D.45262_1055 = map_1050->rm_rate;

.MEM_1435 : -->2 uses.
# .MEM_1436 = VDEF <.MEM_1435>
pmap_1044->codec_ms = D.45295_1058;
# VUSE <.MEM_1435>
D.45293_1056 = mimp_1049->microseconds_per_packet;

.MEM_1436 : -->2 uses.
# .MEM_1437 = VDEF <.MEM_1436>
D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);
# VUSE <.MEM_1436>
D.45085_1059 = connection_125->c_address;

.MEM_1437 : --> single use.
# .MEM_1438 = VDEF <.MEM_1437>
pmap_1044->remote_sdp_ip = D.45296_1060;

.MEM_1438 : -->2 uses.
# .MEM_1439 = VDEF <.MEM_1438>
pmap_1044->remote_sdp_port = D.45087_1062;
# VUSE <.MEM_1438>
D.44697_1061 = m_28->m_port;

.MEM_1439 : -->2 uses.
# .MEM_1440 = VDEF <.MEM_1439>
D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
# VUSE <.MEM_1439>
D.45297_1063 = map_1050->rm_fmtp;

.MEM_1440 : --> single use.
# .MEM_1441 = VDEF <.MEM_1440>
pmap_1044->rm_fmtp = D.45298_1064;

.MEM_1441 : -->2 uses.
# .MEM_1442 = VDEF <.MEM_1441>
pmap_1044->agreed_pt = D.45292_1066;
# VUSE <.MEM_1441>
D.45247_1065 = map_1050->rm_pt;

.MEM_1442 : --> single use.
.MEM_1166 = PHI <.MEM_1427(431), .MEM_1442(435)>

.MEM_1443 : -->4 uses.
# .MEM_1444 = VDEF <.MEM_1443>
switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);
# VUSE <.MEM_1443>
D.45301_1073 = D.45286_1072->remote_sdp_ip;
# VUSE <.MEM_1443>
D.45286_1072 = v_engine_189->cur_payload_map;
# VUSE <.MEM_1443>
D.44530_1071 = session_161(D)->channel;

.MEM_1444 : -->2 uses.
# .MEM_1445 = VDEF <.MEM_1444>
switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);
# VUSE <.MEM_1444>
D.44530_1074 = session_161(D)->channel;

.MEM_1445 : -->4 uses.
# .MEM_1446 = VDEF <.MEM_1445>
switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);
# VUSE <.MEM_1445>
D.45302_1077 = D.45286_1076->rm_fmtp;
# VUSE <.MEM_1445>
D.45286_1076 = v_engine_189->cur_payload_map;
# VUSE <.MEM_1445>
D.44530_1075 = session_161(D)->channel;

.MEM_1446 : -->3 uses.
# .MEM_1447 = VDEF <.MEM_1446>
switch_snprintf (&tmp, 50, "%d", D.45304_1080);
# VUSE <.MEM_1446>
D.45303_1079 = D.45286_1078->agreed_pt;
# VUSE <.MEM_1446>
D.45286_1078 = v_engine_189->cur_payload_map;

.MEM_1447 : -->2 uses.
# .MEM_1448 = VDEF <.MEM_1447>
switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);
# VUSE <.MEM_1447>
D.44530_1081 = session_161(D)->channel;

.MEM_1448 : --> single use.
# .MEM_1449 = VDEF <.MEM_1448>
switch_core_media_check_video_codecs (session_161(D));

.MEM_1449 : -->3 uses.
# .MEM_1450 = VDEF <.MEM_1449>
switch_snprintf (&tmp, 50, "%d", D.45306_1084);
# VUSE <.MEM_1449>
D.45305_1083 = D.45286_1082->recv_pt;
# VUSE <.MEM_1449>
D.45286_1082 = v_engine_189->cur_payload_map;

.MEM_1450 : -->2 uses.
# .MEM_1451 = VDEF <.MEM_1450>
switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);
# VUSE <.MEM_1450>
D.44530_1085 = session_161(D)->channel;

.MEM_1451 : -->6 uses.
.MEM_1167 = PHI <.MEM_1451(445), .MEM_1452(446)>
# VUSE <.MEM_1451>
D.47961_1509 = D.45312_1090->implementation;
# VUSE <.MEM_1451>
D.47962_1508 = D.45312_1090->codec_interface;
# VUSE <.MEM_1451>
D.47963_1507 = D.45312_1090->mutex;
# VUSE <.MEM_1451>
D.47965_1505 = D.45312_1090->flags;
# .MEM_1452 = VDEF <.MEM_1451>
v_engine_189->reset_codec = 1;

.MEM_1452 : --> single use.
.MEM_1167 = PHI <.MEM_1451(445), .MEM_1452(446)>

.MEM_1453 : -->2 uses.
.MEM_1168 = PHI <.MEM_1398(346), .MEM_1113(348), .MEM_1113(349), .MEM_1163(428), .MEM_1453(447), .MEM_1454(448), .MEM_1387(343), .MEM_1391(344), .MEM_1380(341), .MEM_1382(342), .MEM_1402(347)>
# .MEM_1454 = VDEF <.MEM_1453>
check_ice (smh_186, 1, sdp_198, m_28);

.MEM_1454 : --> single use.
.MEM_1168 = PHI <.MEM_1398(346), .MEM_1113(348), .MEM_1113(349), .MEM_1163(428), .MEM_1453(447), .MEM_1454(448), .MEM_1387(343), .MEM_1391(344), .MEM_1380(341), .MEM_1382(342), .MEM_1402(347)>

.MEM_1455 : --> single use.
.MEM_1171 = PHI <.MEM_1170(451), .MEM_1455(452)>

.MEM_1456 : --> no uses.

pmap_1457 : --> single use.
# DEBUG pmap => pmap_1457
pmap_1458 = PHI <pmap_1457(14), pmap_1459(15)>

pmap_1458 : -->5 uses.
# DEBUG pmap => pmap_1458
D.47871_1460 = pmap_1458->allocated;
if (pmap_1458 != 0B)
pmap_1459 = pmap_1458->next;
pmap_1458->current = 0;
pmap_1458->negotiated = 0;

pmap_1459 : --> single use.
# DEBUG pmap => pmap_1459
pmap_1458 = PHI <pmap_1457(14), pmap_1459(15)>

D.47871_1460 : --> single use.
if (D.47871_1460 != 0)

pmap_1461 : --> single use.
# DEBUG pmap => pmap_1461
pmap_1462 = PHI <pmap_1461(18), pmap_1463(19)>

pmap_1462 : -->5 uses.
# DEBUG pmap => pmap_1462
D.47874_1464 = pmap_1462->allocated;
if (pmap_1462 != 0B)
pmap_1463 = pmap_1462->next;
pmap_1462->current = 0;
pmap_1462->negotiated = 0;

pmap_1463 : --> single use.
# DEBUG pmap => pmap_1463
pmap_1462 = PHI <pmap_1461(18), pmap_1463(19)>

D.47874_1464 : --> single use.
if (D.47874_1464 != 0)

D.47877_1465 : --> single use.
if (D.47877_1465 == 0)

D.47876_1466 : --> single use.
D.47876_1519 = D.47876_1466;

dptime_1467 : --> single use.
dptime_1521 = dptime_1467;

dmaxptime_1468 : --> single use.
dmaxptime_1523 = dmaxptime_1468;

D.47887_1469 : --> single use.
if (D.47887_1469 == 0)

D.47886_1470 : --> single use.
D.47886_1524 = D.47886_1470;

D.47890_1471 : --> single use.
D.47890_1526 = D.47890_1471;

ptime_1472 : --> single use.
ptime_1528 = ptime_1472;

maxptime_1473 : --> single use.
maxptime_1530 = maxptime_1473;

D.47900_1474 : --> single use.
if (D.47900_1474 == 0)

D.47899_1475 : --> single use.
D.47899_1531 = D.47899_1475;

crypto_tag_1476 : --> single use.
crypto_tag_1533 = crypto_tag_1476;

csui.173_1477 : -->2 uses.
map_bit_rate_1479 = CSWTCH.174[csui.173_1477];
if (csui.173_1477 <= 18)

map_bit_rate_1478 : --> single use.
map_bit_rate_1480 = PHI <map_bit_rate_1478(221), map_bit_rate_1479(222)>

map_bit_rate_1479 : --> single use.
map_bit_rate_1480 = PHI <map_bit_rate_1478(221), map_bit_rate_1479(222)>

map_bit_rate_1480 : --> single use.
map_bit_rate_1534 = map_bit_rate_1480;

D.47915_1481 : --> single use.
if (D.47915_1481 == 0)

D.47914_1482 : --> single use.
D.47914_1535 = D.47914_1482;

D.47919_1483 : --> single use.
if (D.47919_1483 == 0)

D.47918_1484 : --> single use.
D.47918_1536 = D.47918_1484;

D.47922_1485 : --> single use.
D.47922_1538 = D.47922_1485;

D.47926_1486 : --> single use.
if (D.47926_1486 == 0)

D.47925_1487 : --> single use.
D.47925_1539 = D.47925_1487;

D.47934_1488 : --> single use.
D.47933_1489 = D.47934_1488 & 256;

D.47933_1489 : --> single use.
if (D.47933_1489 != 0)

D.47932_1490 : --> single use.
if (D.47932_1490 != 0B)

D.47931_1491 : --> single use.
if (D.47931_1491 != 0B)

D.47930_1492 : --> single use.
if (D.47930_1492 != 0B)

iftmp.104_1493 : --> single use.
D.47929_1494 = (switch_bool_t) iftmp.104_1493;

D.47929_1494 : --> single use.
D.47929_1540 = D.47929_1494;

D.47939_1495 : --> single use.
if (D.47939_1495 == 0)

D.47938_1496 : --> single use.
D.47938_1541 = D.47938_1496;

D.47943_1497 : --> single use.
if (D.47943_1497 == 0)

D.47942_1498 : --> single use.
D.47942_1542 = D.47942_1498;

D.47946_1499 : --> single use.
D.47946_1544 = D.47946_1499;

D.47950_1500 : --> single use.
if (D.47950_1500 == 0)

D.47949_1501 : --> single use.
D.47949_1545 = D.47949_1501;

crypto_tag_1502 : --> single use.
crypto_tag_1547 = crypto_tag_1502;

D.47957_1503 : --> single use.
if (D.47957_1503 == 0)

D.47956_1504 : --> single use.
D.47956_1548 = D.47956_1504;

D.47965_1505 : --> single use.
D.47964_1506 = D.47965_1505 & 256;

D.47964_1506 : --> single use.
if (D.47964_1506 != 0)

D.47963_1507 : --> single use.
if (D.47963_1507 != 0B)

D.47962_1508 : --> single use.
if (D.47962_1508 != 0B)

D.47961_1509 : --> single use.
if (D.47961_1509 != 0B)

iftmp.104_1510 : --> single use.
D.47960_1511 = (switch_bool_t) iftmp.104_1510;

D.47960_1511 : --> single use.
D.47960_1549 = D.47960_1511;

.MEM_1512 : -->4 uses.
.MEM_1513 = PHI <.MEM_1512(18), .MEM_1518(19)>
# VUSE <.MEM_1512>
pmap_1461 = v_engine_189->payload_map;
# .MEM_1515 = VDEF <.MEM_1512>
pmap_1458->negotiated = 0;
# VUSE <.MEM_1512>
D.47871_1460 = pmap_1458->allocated;

.MEM_1513 : -->4 uses.
# .MEM_1187 = VDEF <.MEM_1513>
*proceed_209(D) = 1;
.MEM_1097 = PHI <.MEM_1513(22), .MEM_1187(23)>
# .MEM_1517 = VDEF <.MEM_1513>
pmap_1462->negotiated = 0;
# VUSE <.MEM_1513>
D.47874_1464 = pmap_1462->allocated;

.MEM_1514 : --> single use.
# .MEM_1348 = VDEF <.MEM_1514>
pmap_760->channels = D.47922_146;

.MEM_1515 : --> single use.
# .MEM_1516 = VDEF <.MEM_1515>
pmap_1458->current = 0;

.MEM_1516 : -->2 uses.
.MEM_1512 = PHI <.MEM_1184(14), .MEM_1516(15)>
# VUSE <.MEM_1516>
pmap_1459 = pmap_1458->next;

.MEM_1517 : --> single use.
# .MEM_1518 = VDEF <.MEM_1517>
pmap_1462->current = 0;

.MEM_1518 : -->2 uses.
.MEM_1513 = PHI <.MEM_1512(18), .MEM_1518(19)>
# VUSE <.MEM_1518>
pmap_1463 = pmap_1462->next;

D.47876_1519 : --> single use.
D.47876_305 = D.47876_1519;

.MEM_1520 : --> single use.
.MEM_1102 = PHI <.MEM_1103(60), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1103(71), .MEM_1520(73), .MEM_1103(74), .MEM_1522(75), .MEM_1207(67)>

dptime_1521 : --> single use.
dptime_329 = dptime_1521;

.MEM_1522 : --> single use.
.MEM_1102 = PHI <.MEM_1103(60), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1103(71), .MEM_1520(73), .MEM_1103(74), .MEM_1522(75), .MEM_1207(67)>

dmaxptime_1523 : --> single use.
dmaxptime_333 = dmaxptime_1523;

D.47886_1524 : --> single use.
D.47886_504 = D.47886_1524;

.MEM_1525 : --> single use.
# .MEM_1293 = VDEF <.MEM_1525>
a_engine_188->remote_rtcp_port = D.44799_515;

D.47890_1526 : --> single use.
D.47890_514 = D.47890_1526;

.MEM_1527 : --> single use.
.MEM_1124 = PHI <.MEM_1294(170), .MEM_1527(173), .MEM_1529(176), .MEM_1125(177), .MEM_1125(178), .MEM_1125(182), .MEM_1298(187), .MEM_1293(169)>

ptime_1528 : --> single use.
ptime_523 = ptime_1528;

.MEM_1529 : --> single use.
.MEM_1124 = PHI <.MEM_1294(170), .MEM_1527(173), .MEM_1529(176), .MEM_1125(177), .MEM_1125(178), .MEM_1125(182), .MEM_1298(187), .MEM_1293(169)>

maxptime_1530 : --> single use.
maxptime_528 = maxptime_1530;

D.47899_1531 : --> single use.
D.47899_532 = D.47899_1531;

.MEM_1532 : --> single use.
# .MEM_1298 = VDEF <.MEM_1532>
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_545, sdp_type_546(D));

crypto_tag_1533 : --> single use.
crypto_tag_545 = crypto_tag_1533;

map_bit_rate_1534 : --> single use.
map_bit_rate_592 = map_bit_rate_1534;

D.47914_1535 : --> single use.
D.47914_599 = D.47914_1535;

D.47918_1536 : --> single use.
D.47918_643 = D.47918_1536;

.MEM_1537 : --> single use.
.MEM_1514 = PHI <.MEM_1537(307), .MEM_1347(308)>

D.47922_1538 : --> single use.
D.47922_785 = D.47922_1538;

D.47925_1539 : --> single use.
D.47925_791 = D.47925_1539;

D.47929_1540 : --> single use.
D.47929_820 = D.47929_1540;

D.47938_1541 : --> single use.
D.47938_890 = D.47938_1541;

D.47942_1542 : --> single use.
D.47942_900 = D.47942_1542;

.MEM_1543 : --> single use.
# .MEM_1413 = VDEF <.MEM_1543>
v_engine_189->remote_rtcp_port = D.45213_956;

D.47946_1544 : --> single use.
D.47946_955 = D.47946_1544;

D.47949_1545 : --> single use.
D.47949_963 = D.47949_1545;

.MEM_1546 : --> single use.
# .MEM_1418 = VDEF <.MEM_1546>
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_976, sdp_type_546(D));

crypto_tag_1547 : --> single use.
crypto_tag_976 = crypto_tag_1547;

D.47956_1548 : --> single use.
D.47956_997 = D.47956_1548;

D.47960_1549 : --> single use.
D.47960_1091 = D.47960_1549;

Adding Destination of edge (0 -> 2) to worklist


Simulating block 2

Visiting statement:
match_148 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
best_te_149 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
te_150 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
cng_pt_151 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
ptime_152 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
dptime_153 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
maxptime_154 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
dmaxptime_155 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
sendonly_156 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
recvonly_157 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
greedy_158 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
x_159 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
skip_160 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
crypto_163 = 0B;
which is likely CONSTANT
Lattice value changed to CONSTANT 0B.  Adding SSA edges to worklist.

Visiting statement:
got_crypto_164 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
got_video_crypto_165 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
got_audio_166 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
got_avp_167 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
got_video_avp_168 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
got_video_savp_169 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
got_savp_170 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
got_udptl_171 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
got_webrtc_172 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
scrooge_173 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
parser_174 = 0B;
which is likely CONSTANT
Lattice value changed to CONSTANT 0B.  Adding SSA edges to worklist.

Visiting statement:
reneg_175 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
near_rate_176 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
mimp_177 = 0B;
which is likely CONSTANT
Lattice value changed to CONSTANT 0B.  Adding SSA edges to worklist.

Visiting statement:
near_match_178 = 0B;
which is likely CONSTANT
Lattice value changed to CONSTANT 0B.  Adding SSA edges to worklist.

Visiting statement:
mmap_179 = 0B;
which is likely CONSTANT
Lattice value changed to CONSTANT 0B.  Adding SSA edges to worklist.

Visiting statement:
near_map_180 = 0B;
which is likely CONSTANT
Lattice value changed to CONSTANT 0B.  Adding SSA edges to worklist.

Visiting statement:
codec_ms_181 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
remote_codec_rate_182 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
fmtp_remote_codec_rate_183 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
m_idx_184 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
nm_idx_185 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (session_161(D) == 0B)
which is likely CONSTANT
Adding Destination of edge (2 -> 3) to worklist

Adding Destination of edge (2 -> 4) to worklist


Simulating statement (from ssa_edges): nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>

Visiting PHI node: nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>

Visiting PHI node: m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): codec_ms_95 = PHI <codec_ms_181(101), codec_ms_94(449)>

Visiting PHI node: codec_ms_95 = PHI <codec_ms_181(101), codec_ms_94(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): reneg_81 = PHI <reneg_175(80), reneg_175(82), reneg_175(83), reneg_175(84), reneg_349(85), reneg_352(86)>

Visiting PHI node: reneg_81 = PHI <reneg_175(80), reneg_175(82), reneg_175(83), reneg_175(84), reneg_349(85), reneg_352(86)>

    Argument #0 (80 -> 87 not executable)

    Argument #1 (82 -> 87 not executable)

    Argument #2 (83 -> 87 not executable)

    Argument #3 (84 -> 87 not executable)

    Argument #4 (85 -> 87 not executable)

    Argument #5 (86 -> 87 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_audio_67 = PHI <got_audio_166(101), got_audio_66(449)>

Visiting PHI node: got_audio_67 = PHI <got_audio_166(101), got_audio_66(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>

Visiting PHI node: got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_crypto_56 = PHI <got_crypto_164(101), got_crypto_55(449)>

Visiting PHI node: got_crypto_56 = PHI <got_crypto_164(101), got_crypto_55(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Simulating statement (from ssa_edges): recvonly_46 = PHI <recvonly_157(55), recvonly_45(76)>

Visiting PHI node: recvonly_46 = PHI <recvonly_157(55), recvonly_45(76)>

    Argument #0 (55 -> 77 not executable)

    Argument #1 (76 -> 77 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>

Visiting PHI node: sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>

    Argument #0 (42 -> 55 not executable)

    Argument #1 (44 -> 55 not executable)

    Argument #2 (45 -> 55 not executable)

    Argument #3 (53 -> 55 not executable)

    Argument #4 (54 -> 55 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): dmaxptime_41 = PHI <dmaxptime_155(55), dmaxptime_40(76)>

Visiting PHI node: dmaxptime_41 = PHI <dmaxptime_155(55), dmaxptime_40(76)>

    Argument #0 (55 -> 77 not executable)

    Argument #1 (76 -> 77 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): dptime_37 = PHI <dptime_153(55), dptime_36(76)>

Visiting PHI node: dptime_37 = PHI <dptime_153(55), dptime_36(76)>

    Argument #0 (55 -> 77 not executable)

    Argument #1 (76 -> 77 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): cng_pt_27 = PHI <cng_pt_151(101), cng_pt_26(449)>

Visiting PHI node: cng_pt_27 = PHI <cng_pt_151(101), cng_pt_26(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): best_te_23 = PHI <best_te_149(101), best_te_22(449)>

Visiting PHI node: best_te_23 = PHI <best_te_149(101), best_te_22(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): match_16 = PHI <match_148(101), match_15(449)>

Visiting PHI node: match_16 = PHI <match_148(101), match_15(449)>

    Argument #0 (101 -> 450 not executable)

    Argument #1 (449 -> 450 not executable)

    PHI node value: UNDEFINED


Simulating block 3

Visiting statement:
__assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);
No interesting values produced.  Marked VARYING.

Simulating block 4

Visiting statement:
smh_186 = session_161(D)->media_handle;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (smh_186 == 0B)
which is likely CONSTANT
Adding Destination of edge (4 -> 5) to worklist

Adding Destination of edge (4 -> 6) to worklist


Simulating statement (from ssa_edges): a_engine_188 = &smh_186->engines;

Simulating statement (from ssa_edges): v_engine_189 = &smh_186->engines[1];

Simulating statement (from ssa_edges): codec_array_190 = &smh_186->codecs;

Simulating statement (from ssa_edges): D.44471_191 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44481_201 = smh_186->session;

Simulating statement (from ssa_edges): D.44481_205 = smh_186->session;

Simulating statement (from ssa_edges): D.44481_207 = smh_186->session;

Simulating statement (from ssa_edges): D.44509_227 = smh_186->origin;

Simulating statement (from ssa_edges): D.44471_228 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44509_233 = smh_186->origin;

Simulating statement (from ssa_edges): D.44471_237 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44509_240 = smh_186->origin;

Simulating statement (from ssa_edges): D.44471_343 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_345 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44655_359 = smh_186->num_negotiated_codecs;

Simulating statement (from ssa_edges): codec_array_360 = &smh_186->negotiated_codecs;

Simulating statement (from ssa_edges): total_codecs_361 = smh_186->num_negotiated_codecs;

Simulating statement (from ssa_edges): D.44471_362 = smh_186->mparams;

Simulating statement (from ssa_edges): codec_array_363 = &smh_186->codecs;

Simulating statement (from ssa_edges): D.44471_364 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44481_403 = smh_186->session;

Simulating statement (from ssa_edges): D.44481_412 = smh_186->session;

Simulating statement (from ssa_edges): D.44481_482 = smh_186->session;

Simulating statement (from ssa_edges): D.44471_516 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_518 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_533 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_577 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_621 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_644 = smh_186->mparams;

Simulating statement (from ssa_edges): D.45001_712 = smh_186->crypto_mode;

Simulating statement (from ssa_edges): D.44655_803 = smh_186->num_negotiated_codecs;

Simulating statement (from ssa_edges): D.44471_821 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_829 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_832 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_835 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_839 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_844 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_845 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_850 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_861 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_862 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_863 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_867 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_868 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_869 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_905 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_957 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_959 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_964 = smh_186->mparams;

Simulating statement (from ssa_edges): D.44471_998 = smh_186->mparams;

Simulating statement (from ssa_edges): D.45001_1022 = smh_186->crypto_mode;

Simulating statement (from ssa_edges): D.44471_1094 = smh_186->mparams;

Simulating block 5

Visiting statement:
match_187 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (5 -> 454) to worklist


Simulating statement (from ssa_edges): match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

Visiting PHI node: match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

    Argument #0 (5 -> 454 executable)
	match_187	Value: CONSTANT 0

    Argument #1 (7 -> 454 not executable)

    Argument #2 (9 -> 454 not executable)

    Argument #3 (453 -> 454 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): return match_142;

Simulating block 6

Visiting statement:
a_engine_188 = &smh_186->engines;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
v_engine_189 = &smh_186->engines[1];
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
codec_array_190 = &smh_186->codecs;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_191 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
total_codecs_192 = D.44471_191->num_codecs;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44472_194 = strlen (r_sdp_193(D));
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44473_195 = (int) D.44472_194;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (parser_196 == 0B)
which is likely CONSTANT
Adding Destination of edge (6 -> 7) to worklist

Adding Destination of edge (6 -> 8) to worklist


Simulating statement (from ssa_edges): total_codecs_85 = PHI <total_codecs_361(94), total_codecs_192(95), total_codecs_365(96)>

Visiting PHI node: total_codecs_85 = PHI <total_codecs_361(94), total_codecs_192(95), total_codecs_365(96)>

    Argument #0 (94 -> 97 not executable)

    Argument #1 (95 -> 97 not executable)

    Argument #2 (96 -> 97 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): codec_array_84 = PHI <codec_array_360(94), codec_array_190(95), codec_array_363(96)>

Visiting PHI node: codec_array_84 = PHI <codec_array_360(94), codec_array_190(95), codec_array_363(96)>

    Argument #0 (94 -> 97 not executable)

    Argument #1 (95 -> 97 not executable)

    Argument #2 (96 -> 97 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): D.45163_903 = v_engine_189->fir;

Simulating statement (from ssa_edges): D.45286_1045 = v_engine_189->cur_payload_map;

Simulating statement (from ssa_edges): D.45287_1046 = v_engine_189->rtp_session;

Simulating statement (from ssa_edges): D.45287_1047 = v_engine_189->rtp_session;

Simulating statement (from ssa_edges): D.45286_1068 = v_engine_189->cur_payload_map;

Simulating statement (from ssa_edges): D.45286_1072 = v_engine_189->cur_payload_map;

Simulating statement (from ssa_edges): D.45286_1076 = v_engine_189->cur_payload_map;

Simulating statement (from ssa_edges): D.45286_1078 = v_engine_189->cur_payload_map;

Simulating statement (from ssa_edges): D.45286_1082 = v_engine_189->cur_payload_map;

Simulating statement (from ssa_edges): D.45312_1090 = &v_engine_189->read_codec;

Simulating statement (from ssa_edges): pmap_1461 = v_engine_189->payload_map;

Simulating statement (from ssa_edges): D.44521_235 = a_engine_188->rtp_bugs;

Simulating statement (from ssa_edges): D.44521_242 = a_engine_188->rtp_bugs;

Simulating statement (from ssa_edges): D.44605_318 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44605_320 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44605_421 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44605_427 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44605_429 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44750_444 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44750_447 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44750_452 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44750_455 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44750_462 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44750_464 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44750_467 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44750_471 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44605_474 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44750_475 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44750_477 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44750_565 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44605_574 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44605_576 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44750_763 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44605_764 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44605_765 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44750_808 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44750_812 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.44750_815 = a_engine_188->cur_payload_map;

Simulating statement (from ssa_edges): D.45094_819 = &a_engine_188->read_codec;

Simulating statement (from ssa_edges): D.44605_840 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44605_841 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44605_851 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44605_852 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): D.44605_855 = a_engine_188->rtp_session;

Simulating statement (from ssa_edges): pmap_1457 = a_engine_188->payload_map;

Simulating block 7

Visiting statement:
match_197 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

Visiting PHI node: match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

    Argument #0 (5 -> 454 executable)
	match_187	Value: CONSTANT 0

    Argument #1 (7 -> 454 executable)
	match_197	Value: CONSTANT 0

    Argument #2 (9 -> 454 not executable)

    Argument #3 (453 -> 454 not executable)

    PHI node value: CONSTANT 0


Simulating block 454

Visiting PHI node: match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

    Argument #0 (5 -> 454 executable)
	match_187	Value: CONSTANT 0

    Argument #1 (7 -> 454 executable)
	match_197	Value: CONSTANT 0

    Argument #2 (9 -> 454 not executable)

    Argument #3 (453 -> 454 not executable)

    PHI node value: CONSTANT 0


Visiting statement:
return match_142;
No interesting values produced.  Marked VARYING.

Simulating block 8

Visiting statement:
if (sdp_198 == 0B)
which is likely CONSTANT
Adding Destination of edge (8 -> 9) to worklist

Adding Destination of edge (8 -> 10) to worklist


Simulating block 9

Visiting statement:
match_199 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (9 -> 454) to worklist


Simulating statement (from ssa_edges): match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

Visiting PHI node: match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

    Argument #0 (5 -> 454 executable)
	match_187	Value: CONSTANT 0

    Argument #1 (7 -> 454 executable)
	match_197	Value: CONSTANT 0

    Argument #2 (9 -> 454 executable)
	match_199	Value: CONSTANT 0

    Argument #3 (453 -> 454 not executable)

    PHI node value: CONSTANT 0


Simulating block 10

Visiting statement:
if (D.44478_200 != 0)
which is likely CONSTANT
Adding Destination of edge (10 -> 11) to worklist

Adding Destination of edge (10 -> 14) to worklist


Simulating block 11

Visiting statement:
D.44481_201 = smh_186->session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44482_202 = D.44481_201->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (tmp_203 != 0B)
which is likely CONSTANT
Adding Destination of edge (11 -> 12) to worklist


Simulating block 12

Visiting statement:
if (D.44485_204 != 0)
which is likely CONSTANT
Adding Destination of edge (12 -> 13) to worklist


Simulating block 13

Visiting statement:
D.44481_205 = smh_186->session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44482_206 = D.44481_205->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44481_207 = smh_186->session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44482_208 = D.44481_207->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 454

Visiting PHI node: match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

    Argument #0 (5 -> 454 executable)
	match_187	Value: CONSTANT 0

    Argument #1 (7 -> 454 executable)
	match_197	Value: CONSTANT 0

    Argument #2 (9 -> 454 executable)
	match_199	Value: CONSTANT 0

    Argument #3 (453 -> 454 not executable)

    PHI node value: CONSTANT 0


Simulating block 14

Visiting statement:
pmap_1457 = a_engine_188->payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (14 -> 16) to worklist


Simulating statement (from ssa_edges): pmap_1458 = PHI <pmap_1457(14), pmap_1459(15)>

Visiting PHI node: pmap_1458 = PHI <pmap_1457(14), pmap_1459(15)>

    Argument #0 (14 -> 16 executable)
	pmap_1457	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): pmap_1459 = pmap_1458->next;

Simulating statement (from ssa_edges): if (pmap_1458 != 0B)

Simulating statement (from ssa_edges): D.47871_1460 = pmap_1458->allocated;

Simulating block 16

Visiting statement:
if (pmap_1458 != 0B)
which is likely CONSTANT
Adding Destination of edge (16 -> 17) to worklist

Adding Destination of edge (16 -> 18) to worklist


Simulating block 17

Visiting statement:
D.47871_1460 = pmap_1458->allocated;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47871_1460 != 0)
which is likely CONSTANT
Adding Destination of edge (17 -> 15) to worklist


Simulating block 15

Visiting statement:
pmap_1459 = pmap_1458->next;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (15 -> 16) to worklist


Simulating block 18

Visiting statement:
pmap_1461 = v_engine_189->payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (18 -> 20) to worklist


Simulating statement (from ssa_edges): pmap_1462 = PHI <pmap_1461(18), pmap_1463(19)>

Visiting PHI node: pmap_1462 = PHI <pmap_1461(18), pmap_1463(19)>

    Argument #0 (18 -> 20 executable)
	pmap_1461	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): pmap_1463 = pmap_1462->next;

Simulating statement (from ssa_edges): if (pmap_1462 != 0B)

Simulating statement (from ssa_edges): D.47874_1464 = pmap_1462->allocated;

Simulating block 16

Simulating block 20

Visiting statement:
if (pmap_1462 != 0B)
which is likely CONSTANT
Adding Destination of edge (20 -> 21) to worklist

Adding Destination of edge (20 -> 22) to worklist


Simulating block 21

Visiting statement:
D.47874_1464 = pmap_1462->allocated;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47874_1464 != 0)
which is likely CONSTANT
Adding Destination of edge (21 -> 19) to worklist


Simulating block 19

Visiting statement:
pmap_1463 = pmap_1462->next;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (19 -> 20) to worklist


Simulating block 22

Visiting statement:
if (proceed_209(D) != 0B)
which is likely CONSTANT
Adding Destination of edge (22 -> 23) to worklist

Adding Destination of edge (22 -> 24) to worklist


Simulating block 23

Simulating block 20

Simulating block 24

Visiting statement:
greedy_211 = D.44490_210 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
scrooge_213 = D.44491_212 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (val_214 != 0B)
which is likely CONSTANT
Adding Destination of edge (24 -> 25) to worklist

Adding Destination of edge (24 -> 32) to worklist


Simulating statement (from ssa_edges): scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>

Visiting PHI node: scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>

    Argument #0 (24 -> 32 executable)
	scrooge_213	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 not executable)

    Argument #2 (28 -> 32 not executable)

    Argument #3 (30 -> 32 not executable)

    Argument #4 (31 -> 32 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (scrooge_80 != 0)

Simulating statement (from ssa_edges): greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>

Visiting PHI node: greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>

    Argument #0 (24 -> 32 executable)
	greedy_211	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 not executable)

    Argument #2 (28 -> 32 not executable)

    Argument #3 (30 -> 32 not executable)

    Argument #4 (31 -> 32 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (greedy_47 != 0)

Simulating statement (from ssa_edges): if (greedy_47 != 0)

Simulating block 25

Visiting statement:
if (D.44494_215 == 0)
which is likely CONSTANT
Adding Destination of edge (25 -> 26) to worklist

Adding Destination of edge (25 -> 27) to worklist


Simulating block 26

Visiting statement:
greedy_216 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
scrooge_217 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>

Visiting PHI node: scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>

    Argument #0 (24 -> 32 executable)
	scrooge_213	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 executable)
	scrooge_217	Value: CONSTANT 0

    Argument #2 (28 -> 32 not executable)

    Argument #3 (30 -> 32 not executable)

    Argument #4 (31 -> 32 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>

Visiting PHI node: greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>

    Argument #0 (24 -> 32 executable)
	greedy_211	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 executable)
	greedy_216	Value: CONSTANT 0

    Argument #2 (28 -> 32 not executable)

    Argument #3 (30 -> 32 not executable)

    Argument #4 (31 -> 32 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 32

Visiting PHI node: greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>

    Argument #0 (24 -> 32 executable)
	greedy_211	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 executable)
	greedy_216	Value: CONSTANT 0

    Argument #2 (28 -> 32 not executable)

    Argument #3 (30 -> 32 not executable)

    Argument #4 (31 -> 32 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>

    Argument #0 (24 -> 32 executable)
	scrooge_213	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 executable)
	scrooge_217	Value: CONSTANT 0

    Argument #2 (28 -> 32 not executable)

    Argument #3 (30 -> 32 not executable)

    Argument #4 (31 -> 32 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting statement:
D.44506_224 = sdp_198->sdp_origin;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44507_225 = D.44506_224->o_username;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44509_227 = smh_186->origin;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44509_227 != 0B)
which is likely CONSTANT
Adding Destination of edge (32 -> 33) to worklist

Adding Destination of edge (32 -> 39) to worklist


Simulating block 27

Visiting statement:
if (D.44498_218 == 0)
which is likely CONSTANT
Adding Destination of edge (27 -> 28) to worklist

Adding Destination of edge (27 -> 29) to worklist


Simulating block 33

Visiting statement:
D.44471_228 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44512_229 = D.44471_228->auto_rtp_bugs;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44513_230 = (int) D.44512_229;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44514_231 = D.44513_230 & 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44515_232 = (_Bool) D.44514_231;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.44515_232 != 0)
which is likely CONSTANT
Adding Destination of edge (33 -> 34) to worklist

Adding Destination of edge (33 -> 36) to worklist


Simulating block 34

Visiting statement:
D.44509_233 = smh_186->origin;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44518_234 != 0B)
which is likely CONSTANT
Adding Destination of edge (34 -> 35) to worklist


Simulating block 35

Visiting statement:
D.44521_235 = a_engine_188->rtp_bugs;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44522_236 = D.44521_235 | 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000001 (0xfffffffffffffffffffffffffffffffe).  Adding SSA edges to worklist.

Simulating block 39

Visiting statement:
D.44530_244 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (val_245 != 0B)
which is likely CONSTANT
Adding Destination of edge (39 -> 40) to worklist

Adding Destination of edge (39 -> 42) to worklist


Simulating block 28

Visiting statement:
greedy_219 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
scrooge_220 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (28 -> 32) to worklist


Simulating statement (from ssa_edges): scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>

Visiting PHI node: scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>

    Argument #0 (24 -> 32 executable)
	scrooge_213	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 executable)
	scrooge_217	Value: CONSTANT 0

    Argument #2 (28 -> 32 executable)
	scrooge_220	Value: CONSTANT 0

    Argument #3 (30 -> 32 not executable)

    Argument #4 (31 -> 32 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>

Visiting PHI node: greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>

    Argument #0 (24 -> 32 executable)
	greedy_211	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 executable)
	greedy_216	Value: CONSTANT 0

    Argument #2 (28 -> 32 executable)
	greedy_219	Value: CONSTANT 1

    Argument #3 (30 -> 32 not executable)

    Argument #4 (31 -> 32 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 29

Visiting statement:
if (D.44502_221 == 0)
which is likely CONSTANT
Adding Destination of edge (29 -> 30) to worklist

Adding Destination of edge (29 -> 31) to worklist


Simulating block 30

Visiting statement:
scrooge_222 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
greedy_223 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>

Visiting PHI node: greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>

    Argument #0 (24 -> 32 executable)
	greedy_211	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 executable)
	greedy_216	Value: CONSTANT 0

    Argument #2 (28 -> 32 executable)
	greedy_219	Value: CONSTANT 1

    Argument #3 (30 -> 32 executable)
	greedy_223	Value: CONSTANT 1

    Argument #4 (31 -> 32 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>

Visiting PHI node: scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>

    Argument #0 (24 -> 32 executable)
	scrooge_213	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 executable)
	scrooge_217	Value: CONSTANT 0

    Argument #2 (28 -> 32 executable)
	scrooge_220	Value: CONSTANT 0

    Argument #3 (30 -> 32 executable)
	scrooge_222	Value: CONSTANT 1

    Argument #4 (31 -> 32 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 36

Visiting statement:
D.44471_237 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44512_238 = D.44471_237->auto_rtp_bugs;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44523_239 = D.44512_238 & 2;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000002).  Adding SSA edges to worklist.

Visiting statement:
if (D.44523_239 != 0)
which is likely CONSTANT
Adding Destination of edge (36 -> 37) to worklist

Adding Destination of edge (36 -> 39) to worklist


Simulating block 40

Visiting statement:
if (D.44533_246 != 0)
which is likely CONSTANT
Adding Destination of edge (40 -> 41) to worklist


Simulating block 41

Visiting statement:
D.44530_247 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 42

Visiting statement:
m_248 = sdp_198->sdp_media;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (m_248 != 0B)
which is likely CONSTANT
Adding Destination of edge (42 -> 43) to worklist

Adding Destination of edge (42 -> 55) to worklist


Simulating statement (from ssa_edges): D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;

Simulating statement (from ssa_edges): D.44546_254 = m_248->m_connections;

Simulating statement (from ssa_edges): D.44546_255 = m_248->m_connections;

Simulating statement (from ssa_edges): D.44546_258 = m_248->m_connections;

Simulating statement (from ssa_edges): D.44546_298 = m_248->m_connections;

Simulating block 43

Visiting statement:
D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44541_250 = D.44540_249 & 6;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000006).  Adding SSA edges to worklist.

Visiting statement:
D.44542_251 = D.44541_250 == 2;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44543_252 = D.44541_250 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44544_253 = D.44542_251 || D.44543_252;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44544_253 != 0)
which is likely CONSTANT
Adding Destination of edge (43 -> 54) to worklist

Adding Destination of edge (43 -> 44) to worklist


Simulating block 44

Visiting statement:
D.44546_254 = m_248->m_connections;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44546_254 != 0B)
which is likely CONSTANT
Adding Destination of edge (44 -> 45) to worklist


Simulating block 45

Visiting statement:
D.44546_255 = m_248->m_connections;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44548_256 = D.44546_255->c_address;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44548_256 != 0B)
which is likely CONSTANT
Adding Destination of edge (45 -> 46) to worklist


Simulating block 46

Visiting statement:
__s2_len_257 = 7;
which is likely CONSTANT
Lattice value changed to CONSTANT 7.  Adding SSA edges to worklist.

Visiting statement:
if (__s2_len_257 <= 3)
which is likely CONSTANT
Adding Destination of edge (46 -> 52) to worklist


Simulating statement (from ssa_edges): D.44558_266 = __s2_len_257 != 0;

Simulating statement (from ssa_edges): D.44569_276 = __s2_len_257 > 1;

Simulating statement (from ssa_edges): D.44579_286 = __s2_len_257 > 2;

Simulating block 52

Visiting statement:
D.44546_298 = m_248->m_connections;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44548_299 = D.44546_298->c_address;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
__result_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (52 -> 53) to worklist


Simulating statement (from ssa_edges): __result_143 = PHI <__result_297(51), __result_300(52)>

Visiting PHI node: __result_143 = PHI <__result_297(51), __result_300(52)>

    Argument #0 (51 -> 53 not executable)

    Argument #1 (52 -> 53 executable)
	__result_300	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): __result_301 = __result_143;

Simulating block 54

Visiting statement:
sendonly_302 = 2;
which is likely CONSTANT
Lattice value changed to CONSTANT 2.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>

Visiting PHI node: sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>

    Argument #0 (42 -> 55 executable)
	sendonly_156	Value: CONSTANT 0

    Argument #1 (44 -> 55 executable)
	sendonly_156	Value: CONSTANT 0

    Argument #2 (45 -> 55 executable)
	sendonly_156	Value: CONSTANT 0

    Argument #3 (53 -> 55 not executable)

    Argument #4 (54 -> 55 executable)
	sendonly_302	Value: CONSTANT 2

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000002)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000002).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): sendonly_44 = PHI <sendonly_42(55), sendonly_43(76)>

Visiting PHI node: sendonly_44 = PHI <sendonly_42(55), sendonly_43(76)>

    Argument #0 (55 -> 77 not executable)

    Argument #1 (76 -> 77 not executable)

    PHI node value: UNDEFINED


Simulating block 32

Visiting PHI node: greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>

    Argument #0 (24 -> 32 executable)
	greedy_211	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 executable)
	greedy_216	Value: CONSTANT 0

    Argument #2 (28 -> 32 executable)
	greedy_219	Value: CONSTANT 1

    Argument #3 (30 -> 32 executable)
	greedy_223	Value: CONSTANT 1

    Argument #4 (31 -> 32 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>

    Argument #0 (24 -> 32 executable)
	scrooge_213	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 executable)
	scrooge_217	Value: CONSTANT 0

    Argument #2 (28 -> 32 executable)
	scrooge_220	Value: CONSTANT 0

    Argument #3 (30 -> 32 executable)
	scrooge_222	Value: CONSTANT 1

    Argument #4 (31 -> 32 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 31
Adding Destination of edge (31 -> 32) to worklist


Simulating block 37

Visiting statement:
D.44509_240 = smh_186->origin;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44526_241 != 0B)
which is likely CONSTANT
Adding Destination of edge (37 -> 38) to worklist


Simulating block 38

Visiting statement:
D.44521_242 = a_engine_188->rtp_bugs;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44529_243 = D.44521_242 | 2;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000002 (0xfffffffffffffffffffffffffffffffd).  Adding SSA edges to worklist.

Simulating block 39

Simulating block 55

Visiting PHI node: sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>

    Argument #0 (42 -> 55 executable)
	sendonly_156	Value: CONSTANT 0

    Argument #1 (44 -> 55 executable)
	sendonly_156	Value: CONSTANT 0

    Argument #2 (45 -> 55 executable)
	sendonly_156	Value: CONSTANT 0

    Argument #3 (53 -> 55 not executable)

    Argument #4 (54 -> 55 executable)
	sendonly_302	Value: CONSTANT 2

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000002)


Visiting statement:
attr_303 = sdp_198->sdp_attributes;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (55 -> 77) to worklist


Simulating statement (from ssa_edges): attr_29 = PHI <attr_303(55), attr_334(76)>

Visiting PHI node: attr_29 = PHI <attr_303(55), attr_334(76)>

    Argument #0 (55 -> 77 executable)
	attr_303	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (attr_29 != 0B)

Simulating statement (from ssa_edges): D.44590_304 = attr_29->a_name;

Simulating statement (from ssa_edges): D.44590_306 = attr_29->a_name;

Simulating statement (from ssa_edges): D.44590_310 = attr_29->a_name;

Simulating statement (from ssa_edges): D.44590_314 = attr_29->a_name;

Simulating statement (from ssa_edges): D.44590_323 = attr_29->a_name;

Simulating statement (from ssa_edges): D.44590_326 = attr_29->a_name;

Simulating statement (from ssa_edges): D.44619_328 = attr_29->a_value;

Simulating statement (from ssa_edges): D.44590_330 = attr_29->a_name;

Simulating statement (from ssa_edges): D.44619_332 = attr_29->a_value;

Simulating statement (from ssa_edges): attr_334 = attr_29->a_next;

Simulating block 53

Visiting statement:
__result_301 = __result_143;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (__result_301 == 0)
which is likely CONSTANT
Adding Destination of edge (53 -> 54) to worklist

Adding Destination of edge (53 -> 55) to worklist


Simulating block 54

Simulating block 32

Visiting PHI node: greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>

    Argument #0 (24 -> 32 executable)
	greedy_211	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 executable)
	greedy_216	Value: CONSTANT 0

    Argument #2 (28 -> 32 executable)
	greedy_219	Value: CONSTANT 1

    Argument #3 (30 -> 32 executable)
	greedy_223	Value: CONSTANT 1

    Argument #4 (31 -> 32 executable)
	greedy_211	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>

    Argument #0 (24 -> 32 executable)
	scrooge_213	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (26 -> 32 executable)
	scrooge_217	Value: CONSTANT 0

    Argument #2 (28 -> 32 executable)
	scrooge_220	Value: CONSTANT 0

    Argument #3 (30 -> 32 executable)
	scrooge_222	Value: CONSTANT 1

    Argument #4 (31 -> 32 executable)
	scrooge_213	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 77

Visiting PHI node: dptime_37 = PHI <dptime_153(55), dptime_36(76)>

    Argument #0 (55 -> 77 executable)
	dptime_153	Value: CONSTANT 0

    Argument #1 (76 -> 77 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: dmaxptime_41 = PHI <dmaxptime_155(55), dmaxptime_40(76)>

    Argument #0 (55 -> 77 executable)
	dmaxptime_155	Value: CONSTANT 0

    Argument #1 (76 -> 77 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: sendonly_44 = PHI <sendonly_42(55), sendonly_43(76)>

    Argument #0 (55 -> 77 executable)
	sendonly_42	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000002)

    Argument #1 (76 -> 77 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000002)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000002).  Adding SSA edges to worklist.

Visiting PHI node: recvonly_46 = PHI <recvonly_157(55), recvonly_45(76)>

    Argument #0 (55 -> 77 executable)
	recvonly_157	Value: CONSTANT 0

    Argument #1 (76 -> 77 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (attr_29 != 0B)
which is likely CONSTANT
Adding Destination of edge (77 -> 56) to worklist

Adding Destination of edge (77 -> 78) to worklist


Simulating statement (from ssa_edges): recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>

Visiting PHI node: recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>

    Argument #0 (60 -> 76 not executable)

    Argument #1 (62 -> 76 not executable)

    Argument #2 (64 -> 76 not executable)

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): D.44625_336 = recvonly_46 != 1;

Simulating statement (from ssa_edges): if (sendonly_44 <= 1)

Simulating statement (from ssa_edges): sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

Visiting PHI node: sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

    Argument #0 (60 -> 76 not executable)

    Argument #1 (62 -> 76 not executable)

    Argument #2 (64 -> 76 not executable)

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): D.44624_335 = sendonly_44 != 1;

Simulating statement (from ssa_edges): dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>

Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>

    Argument #0 (60 -> 76 not executable)

    Argument #1 (62 -> 76 not executable)

    Argument #2 (64 -> 76 not executable)

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): maxptime_372 = dmaxptime_41;

Simulating statement (from ssa_edges): dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>

Visiting PHI node: dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>

    Argument #0 (60 -> 76 not executable)

    Argument #1 (62 -> 76 not executable)

    Argument #2 (64 -> 76 not executable)

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): ptime_371 = dptime_37;

Simulating block 56

Visiting statement:
D.44590_304 = attr_29->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44590_304 == 0B)
which is likely CONSTANT
Adding Destination of edge (56 -> 59) to worklist

Adding Destination of edge (56 -> 57) to worklist


Simulating statement (from ssa_edges): D.47877_1465 = *D.44590_304;

Simulating block 57

Visiting statement:
D.47877_1465 = *D.44590_304;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47877_1465 == 0)
which is likely CONSTANT
Adding Destination of edge (57 -> 58) to worklist


Simulating block 58

Simulating block 59

Visiting PHI node: D.47876_1466 = PHI <1(56), 1(57), 0(58)>

    Argument #0 (56 -> 59 executable)
	1	Value: CONSTANT 1

    Argument #1 (57 -> 59 executable)
	1	Value: CONSTANT 1

    Argument #2 (58 -> 59 executable)
	0	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47876_1519 = D.47876_1466;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47876_305 = D.47876_1519;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.47876_305 != 0)
which is likely CONSTANT
Adding Destination of edge (59 -> 60) to worklist

Adding Destination of edge (59 -> 61) to worklist


Simulating block 60
Adding Destination of edge (60 -> 76) to worklist


Simulating block 55

Visiting PHI node: sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>

    Argument #0 (42 -> 55 executable)
	sendonly_156	Value: CONSTANT 0

    Argument #1 (44 -> 55 executable)
	sendonly_156	Value: CONSTANT 0

    Argument #2 (45 -> 55 executable)
	sendonly_156	Value: CONSTANT 0

    Argument #3 (53 -> 55 executable)
	sendonly_156	Value: CONSTANT 0

    Argument #4 (54 -> 55 executable)
	sendonly_302	Value: CONSTANT 2

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000002)


Simulating block 78

Visiting statement:
D.44624_335 = sendonly_44 != 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.44625_336 = recvonly_46 != 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.44626_337 = D.44624_335 && D.44625_336;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
if (D.44626_337 != 0)
which is likely CONSTANT
Adding Destination of edge (78 -> 79) to worklist


Simulating block 61

Visiting statement:
D.44590_306 = attr_29->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44594_307 == 0)
which is likely CONSTANT
Adding Destination of edge (61 -> 62) to worklist

Adding Destination of edge (61 -> 63) to worklist


Simulating block 62

Visiting statement:
sendonly_308 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.44530_309 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

Visiting PHI node: sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

    Argument #0 (60 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000002)

    Argument #1 (62 -> 76 executable)
	sendonly_308	Value: CONSTANT 1

    Argument #2 (64 -> 76 not executable)

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): sendonly_44 = PHI <sendonly_42(55), sendonly_43(76)>

Visiting PHI node: sendonly_44 = PHI <sendonly_42(55), sendonly_43(76)>

    Argument #0 (55 -> 77 executable)
	sendonly_42	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000002)

    Argument #1 (76 -> 77 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000002)


Simulating block 76

Visiting PHI node: dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>

    Argument #0 (60 -> 76 executable)
	dptime_37	Value: CONSTANT 0

    Argument #1 (62 -> 76 executable)
	dptime_37	Value: CONSTANT 0

    Argument #2 (64 -> 76 not executable)

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>

    Argument #0 (60 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #1 (62 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #2 (64 -> 76 not executable)

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

    Argument #0 (60 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000002)

    Argument #1 (62 -> 76 executable)
	sendonly_308	Value: CONSTANT 1

    Argument #2 (64 -> 76 not executable)

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)


Visiting PHI node: recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>

    Argument #0 (60 -> 76 executable)
	recvonly_46	Value: CONSTANT 0

    Argument #1 (62 -> 76 executable)
	recvonly_46	Value: CONSTANT 0

    Argument #2 (64 -> 76 not executable)

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
attr_334 = attr_29->a_next;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (76 -> 77) to worklist


Simulating statement (from ssa_edges): recvonly_46 = PHI <recvonly_157(55), recvonly_45(76)>

Visiting PHI node: recvonly_46 = PHI <recvonly_157(55), recvonly_45(76)>

    Argument #0 (55 -> 77 executable)
	recvonly_157	Value: CONSTANT 0

    Argument #1 (76 -> 77 executable)
	recvonly_45	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): dmaxptime_41 = PHI <dmaxptime_155(55), dmaxptime_40(76)>

Visiting PHI node: dmaxptime_41 = PHI <dmaxptime_155(55), dmaxptime_40(76)>

    Argument #0 (55 -> 77 executable)
	dmaxptime_155	Value: CONSTANT 0

    Argument #1 (76 -> 77 executable)
	dmaxptime_40	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): dptime_37 = PHI <dptime_153(55), dptime_36(76)>

Visiting PHI node: dptime_37 = PHI <dptime_153(55), dptime_36(76)>

    Argument #0 (55 -> 77 executable)
	dptime_153	Value: CONSTANT 0

    Argument #1 (76 -> 77 executable)
	dptime_36	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 79

Visiting statement:
D.44530_338 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (79 -> 80) to worklist


Simulating block 63

Visiting statement:
D.44590_310 = attr_29->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44598_311 == 0)
which is likely CONSTANT
Adding Destination of edge (63 -> 64) to worklist

Adding Destination of edge (63 -> 65) to worklist


Simulating block 64

Visiting statement:
sendonly_312 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.44530_313 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (64 -> 76) to worklist


Simulating statement (from ssa_edges): sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

Visiting PHI node: sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

    Argument #0 (60 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000002)

    Argument #1 (62 -> 76 executable)
	sendonly_308	Value: CONSTANT 1

    Argument #2 (64 -> 76 executable)
	sendonly_312	Value: CONSTANT 1

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)


Simulating block 77

Visiting PHI node: dptime_37 = PHI <dptime_153(55), dptime_36(76)>

    Argument #0 (55 -> 77 executable)
	dptime_153	Value: CONSTANT 0

    Argument #1 (76 -> 77 executable)
	dptime_36	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: dmaxptime_41 = PHI <dmaxptime_155(55), dmaxptime_40(76)>

    Argument #0 (55 -> 77 executable)
	dmaxptime_155	Value: CONSTANT 0

    Argument #1 (76 -> 77 executable)
	dmaxptime_40	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: sendonly_44 = PHI <sendonly_42(55), sendonly_43(76)>

    Argument #0 (55 -> 77 executable)
	sendonly_42	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000002)

    Argument #1 (76 -> 77 executable)
	sendonly_43	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Visiting PHI node: recvonly_46 = PHI <recvonly_157(55), recvonly_45(76)>

    Argument #0 (55 -> 77 executable)
	recvonly_157	Value: CONSTANT 0

    Argument #1 (76 -> 77 executable)
	recvonly_45	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): if (sendonly_44 <= 1)

Simulating statement (from ssa_edges): sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

Visiting PHI node: sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

    Argument #0 (60 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (62 -> 76 executable)
	sendonly_308	Value: CONSTANT 1

    Argument #2 (64 -> 76 executable)
	sendonly_312	Value: CONSTANT 1

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)


Simulating statement (from ssa_edges): D.44624_335 = sendonly_44 != 1;

Visiting statement:
D.44624_335 = sendonly_44 != 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44626_337 = D.44624_335 && D.44625_336;

Visiting statement:
D.44626_337 = D.44624_335 && D.44625_336;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 80

Visiting statement:
if (D.44631_339 == 0)
which is likely CONSTANT
Adding Destination of edge (80 -> 81) to worklist

Adding Destination of edge (80 -> 87) to worklist


Simulating statement (from ssa_edges): if (D.44626_337 != 0)

Visiting statement:
if (D.44626_337 != 0)
which is likely CONSTANT
Adding Destination of edge (78 -> 80) to worklist


Simulating block 65

Visiting statement:
D.44590_314 = attr_29->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44602_315 == 0)
which is likely CONSTANT
Adding Destination of edge (65 -> 66) to worklist

Adding Destination of edge (65 -> 69) to worklist


Simulating block 66

Visiting statement:
D.44530_316 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
recvonly_317 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.44605_318 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44606_319 != 0)
which is likely CONSTANT
Adding Destination of edge (66 -> 67) to worklist

Adding Destination of edge (66 -> 68) to worklist


Simulating statement (from ssa_edges): recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>

Visiting PHI node: recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>

    Argument #0 (60 -> 76 executable)
	recvonly_46	Value: CONSTANT 0

    Argument #1 (62 -> 76 executable)
	recvonly_46	Value: CONSTANT 0

    Argument #2 (64 -> 76 executable)
	recvonly_46	Value: CONSTANT 0

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 not executable)

    PHI node value: CONSTANT 0


Simulating block 67

Visiting statement:
D.44605_320 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 76

Visiting PHI node: dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>

    Argument #0 (60 -> 76 executable)
	dptime_37	Value: CONSTANT 0

    Argument #1 (62 -> 76 executable)
	dptime_37	Value: CONSTANT 0

    Argument #2 (64 -> 76 executable)
	dptime_37	Value: CONSTANT 0

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 executable)
	dptime_37	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>

    Argument #0 (60 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #1 (62 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #2 (64 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

    Argument #0 (60 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (62 -> 76 executable)
	sendonly_308	Value: CONSTANT 1

    Argument #2 (64 -> 76 executable)
	sendonly_312	Value: CONSTANT 1

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)


Visiting PHI node: recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>

    Argument #0 (60 -> 76 executable)
	recvonly_46	Value: CONSTANT 0

    Argument #1 (62 -> 76 executable)
	recvonly_46	Value: CONSTANT 0

    Argument #2 (64 -> 76 executable)
	recvonly_46	Value: CONSTANT 0

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 executable)
	recvonly_317	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): recvonly_46 = PHI <recvonly_157(55), recvonly_45(76)>

Visiting PHI node: recvonly_46 = PHI <recvonly_157(55), recvonly_45(76)>

    Argument #0 (55 -> 77 executable)
	recvonly_157	Value: CONSTANT 0

    Argument #1 (76 -> 77 executable)
	recvonly_45	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>

Visiting PHI node: recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>

    Argument #0 (60 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (62 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (64 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (68 -> 76 not executable)

    Argument #4 (71 -> 76 not executable)

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 executable)
	recvonly_317	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): D.44625_336 = recvonly_46 != 1;

Visiting statement:
D.44625_336 = recvonly_46 != 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating block 81

Visiting statement:
D.44530_340 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (val_341 == 0B)
which is likely CONSTANT
Adding Destination of edge (81 -> 83) to worklist

Adding Destination of edge (81 -> 82) to worklist


Simulating block 82

Visiting statement:
if (D.44635_342 == 0)
which is likely CONSTANT

Simulating block 83

Visiting statement:
D.44471_343 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44636_344 = D.44471_343->hold_laps;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44636_344 == 0)
which is likely CONSTANT
Adding Destination of edge (83 -> 84) to worklist


Simulating block 84

Visiting statement:
D.44471_345 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44636_346 = D.44471_345->hold_laps;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44639_347 = D.44636_346 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44640_348 != 0)
which is likely CONSTANT
Adding Destination of edge (84 -> 85) to worklist


Simulating block 85

Visiting statement:
D.44530_350 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (val_351 != 0B)
which is likely CONSTANT
Adding Destination of edge (85 -> 86) to worklist


Simulating block 86

Simulating block 87

Visiting PHI node: reneg_81 = PHI <reneg_175(80), reneg_175(82), reneg_175(83), reneg_175(84), reneg_349(85), reneg_352(86)>

    Argument #0 (80 -> 87 executable)
	reneg_175	Value: CONSTANT 1

    Argument #1 (82 -> 87 executable)
	reneg_175	Value: CONSTANT 1

    Argument #2 (83 -> 87 executable)
	reneg_175	Value: CONSTANT 1

    Argument #3 (84 -> 87 executable)
	reneg_175	Value: CONSTANT 1

    Argument #4 (85 -> 87 executable)
	reneg_349	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (reneg_81 != 0)
which is likely CONSTANT
Adding Destination of edge (87 -> 88) to worklist

Adding Destination of edge (87 -> 90) to worklist


Simulating statement (from ssa_edges): reneg_82 = PHI <reneg_81(87), reneg_353(88), reneg_356(89)>

Visiting PHI node: reneg_82 = PHI <reneg_81(87), reneg_353(88), reneg_356(89)>

    Argument #0 (87 -> 90 executable)
	reneg_81	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): reneg_83 = PHI <reneg_82(90), reneg_358(91)>

Visiting PHI node: reneg_83 = PHI <reneg_82(90), reneg_358(91)>

    Argument #0 (90 -> 92 not executable)

    Argument #1 (91 -> 92 not executable)

    PHI node value: UNDEFINED


Simulating block 88

Visiting statement:
D.44530_354 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (val_355 != 0B)
which is likely CONSTANT
Adding Destination of edge (88 -> 89) to worklist


Simulating block 89

Simulating block 80

Simulating block 69

Visiting statement:
if (sendonly_44 <= 1)
which is likely CONSTANT
Adding Destination of edge (69 -> 70) to worklist

Adding Destination of edge (69 -> 72) to worklist


Simulating block 68

Visiting statement:
D.44530_321 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_322 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (68 -> 76) to worklist


Simulating block 90

Visiting statement:
D.44649_357 = session_161(D)->bugs;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44649_357 != 0B)
which is likely CONSTANT
Adding Destination of edge (90 -> 91) to worklist

Adding Destination of edge (90 -> 92) to worklist


Simulating block 70

Visiting statement:
D.44590_323 = attr_29->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44614_324 == 0)
which is likely CONSTANT
Adding Destination of edge (70 -> 71) to worklist


Simulating block 71

Visiting statement:
sendonly_325 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

Visiting PHI node: sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

    Argument #0 (60 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (62 -> 76 executable)
	sendonly_308	Value: CONSTANT 1

    Argument #2 (64 -> 76 executable)
	sendonly_312	Value: CONSTANT 1

    Argument #3 (68 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #4 (71 -> 76 executable)
	sendonly_325	Value: CONSTANT 0

    Argument #5 (73 -> 76 not executable)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)


Simulating block 72

Visiting statement:
D.44590_326 = attr_29->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44616_327 == 0)
which is likely CONSTANT
Adding Destination of edge (72 -> 73) to worklist

Adding Destination of edge (72 -> 74) to worklist


Simulating block 73

Visiting statement:
D.44619_328 = attr_29->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
dptime_1521 = dptime_1467;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
dptime_329 = dptime_1521;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>

Visiting PHI node: dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>

    Argument #0 (60 -> 76 executable)
	dptime_37	Value: CONSTANT 0

    Argument #1 (62 -> 76 executable)
	dptime_37	Value: CONSTANT 0

    Argument #2 (64 -> 76 executable)
	dptime_37	Value: CONSTANT 0

    Argument #3 (68 -> 76 executable)
	dptime_37	Value: CONSTANT 0

    Argument #4 (71 -> 76 executable)
	dptime_37	Value: CONSTANT 0

    Argument #5 (73 -> 76 executable)
	dptime_329	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): dptime_37 = PHI <dptime_153(55), dptime_36(76)>

Visiting PHI node: dptime_37 = PHI <dptime_153(55), dptime_36(76)>

    Argument #0 (55 -> 77 executable)
	dptime_153	Value: CONSTANT 0

    Argument #1 (76 -> 77 executable)
	dptime_36	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): ptime_371 = dptime_37;

Simulating block 76

Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>

    Argument #0 (60 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #1 (62 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #2 (64 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #3 (68 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #4 (71 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #5 (73 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

    Argument #0 (60 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (62 -> 76 executable)
	sendonly_308	Value: CONSTANT 1

    Argument #2 (64 -> 76 executable)
	sendonly_312	Value: CONSTANT 1

    Argument #3 (68 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #4 (71 -> 76 executable)
	sendonly_325	Value: CONSTANT 0

    Argument #5 (73 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)


Visiting PHI node: recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>

    Argument #0 (60 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (62 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (64 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (68 -> 76 executable)
	recvonly_317	Value: CONSTANT 1

    Argument #4 (71 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (73 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #6 (74 -> 76 not executable)

    Argument #7 (75 -> 76 not executable)

    Argument #8 (67 -> 76 executable)
	recvonly_317	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 91

Visiting statement:
reneg_358 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): reneg_83 = PHI <reneg_82(90), reneg_358(91)>

Visiting PHI node: reneg_83 = PHI <reneg_82(90), reneg_358(91)>

    Argument #0 (90 -> 92 executable)
	reneg_82	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 92

Visiting statement:
if (reneg_83 == 0)
which is likely CONSTANT
Adding Destination of edge (92 -> 93) to worklist

Adding Destination of edge (92 -> 95) to worklist


Simulating statement (from ssa_edges): if (reneg_83 != 0)

Simulating block 74

Visiting statement:
D.44590_330 = attr_29->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44621_331 == 0)
which is likely CONSTANT
Adding Destination of edge (74 -> 75) to worklist

Adding Destination of edge (74 -> 76) to worklist


Simulating block 93

Visiting statement:
D.44655_359 = smh_186->num_negotiated_codecs;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44655_359 != 0)
which is likely CONSTANT
Adding Destination of edge (93 -> 94) to worklist


Simulating block 94

Visiting statement:
codec_array_360 = &smh_186->negotiated_codecs;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
total_codecs_361 = smh_186->num_negotiated_codecs;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (94 -> 97) to worklist


Simulating statement (from ssa_edges): total_codecs_85 = PHI <total_codecs_361(94), total_codecs_192(95), total_codecs_365(96)>

Visiting PHI node: total_codecs_85 = PHI <total_codecs_361(94), total_codecs_192(95), total_codecs_365(96)>

    Argument #0 (94 -> 97 executable)
	total_codecs_361	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44998_624 = i_129 < total_codecs_85;

Simulating statement (from ssa_edges): if (i_139 < total_codecs_85)

Simulating statement (from ssa_edges): codec_array_84 = PHI <codec_array_360(94), codec_array_190(95), codec_array_363(96)>

Visiting PHI node: codec_array_84 = PHI <codec_array_360(94), codec_array_190(95), codec_array_363(96)>

    Argument #0 (94 -> 97 executable)
	codec_array_360	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44919_628 = codec_array_84 + D.44918_627;

Simulating statement (from ssa_edges): D.45237_984 = codec_array_84 + D.45236_983;

Simulating block 95

Visiting statement:
if (reneg_83 != 0)
which is likely CONSTANT
Adding Destination of edge (95 -> 96) to worklist


Simulating block 75

Visiting statement:
D.44619_332 = attr_29->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
dmaxptime_1523 = dmaxptime_1468;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
dmaxptime_333 = dmaxptime_1523;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>

Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>

    Argument #0 (60 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #1 (62 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #2 (64 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #3 (68 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #4 (71 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #5 (73 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #6 (74 -> 76 executable)
	dmaxptime_41	Value: CONSTANT 0

    Argument #7 (75 -> 76 executable)
	dmaxptime_333	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): dmaxptime_41 = PHI <dmaxptime_155(55), dmaxptime_40(76)>

Visiting PHI node: dmaxptime_41 = PHI <dmaxptime_155(55), dmaxptime_40(76)>

    Argument #0 (55 -> 77 executable)
	dmaxptime_155	Value: CONSTANT 0

    Argument #1 (76 -> 77 executable)
	dmaxptime_40	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): maxptime_372 = dmaxptime_41;

Simulating block 76

Visiting PHI node: sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

    Argument #0 (60 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (62 -> 76 executable)
	sendonly_308	Value: CONSTANT 1

    Argument #2 (64 -> 76 executable)
	sendonly_312	Value: CONSTANT 1

    Argument #3 (68 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #4 (71 -> 76 executable)
	sendonly_325	Value: CONSTANT 0

    Argument #5 (73 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #6 (74 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #7 (75 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #8 (67 -> 76 executable)
	sendonly_44	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)


Visiting PHI node: recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>

    Argument #0 (60 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (62 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (64 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (68 -> 76 executable)
	recvonly_317	Value: CONSTANT 1

    Argument #4 (71 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (73 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #6 (74 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #7 (75 -> 76 executable)
	recvonly_46	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #8 (67 -> 76 executable)
	recvonly_317	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 97

Visiting statement:
if (D.44661_366 != 0B)
which is likely CONSTANT
Adding Destination of edge (97 -> 100) to worklist

Adding Destination of edge (97 -> 98) to worklist


Simulating block 96

Visiting statement:
D.44471_362 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
codec_array_363 = &smh_186->codecs;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_364 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
total_codecs_365 = D.44471_364->num_codecs;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (96 -> 97) to worklist


Simulating block 100

Visiting statement:
D.44530_369 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (100 -> 101) to worklist


Simulating block 98

Visiting statement:
if (D.44663_367 != 0B)
which is likely CONSTANT
Adding Destination of edge (98 -> 100) to worklist

Adding Destination of edge (98 -> 99) to worklist


Simulating block 99

Visiting statement:
if (D.44665_368 != 0B)
which is likely CONSTANT

Simulating block 97

Simulating block 101

Visiting statement:
m_370 = sdp_198->sdp_media;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (101 -> 450) to worklist


Simulating statement (from ssa_edges): m_28 = PHI <m_370(101), m_1093(449)>

Visiting PHI node: m_28 = PHI <m_370(101), m_1093(449)>

    Argument #0 (101 -> 450 executable)
	m_370	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (m_28 != 0B)

Simulating statement (from ssa_edges): D.44666_373 = m_28->m_proto;

Simulating statement (from ssa_edges): D.44669_375 = m_28->m_proto_name;

Simulating statement (from ssa_edges): D.44669_376 = m_28->m_proto_name;

Simulating statement (from ssa_edges): D.44675_379 = m_28->m_proto;

Simulating statement (from ssa_edges): D.44681_383 = m_28->m_type;

Simulating statement (from ssa_edges): D.44666_386 = m_28->m_proto;

Simulating statement (from ssa_edges): D.44681_387 = m_28->m_type;

Simulating statement (from ssa_edges): D.44666_390 = m_28->m_proto;

Simulating statement (from ssa_edges): D.44681_392 = m_28->m_type;

Simulating statement (from ssa_edges): D.44697_393 = m_28->m_port;

Simulating statement (from ssa_edges): D.44681_493 = m_28->m_type;

Simulating statement (from ssa_edges): D.44697_494 = m_28->m_port;

Simulating statement (from ssa_edges): attr_500 = m_28->m_attributes;

Simulating statement (from ssa_edges): attr_507 = m_28->m_attributes;

Simulating statement (from ssa_edges): D.44666_539 = m_28->m_proto;

Simulating statement (from ssa_edges): D.44546_555 = m_28->m_connections;

Simulating statement (from ssa_edges): connection_556 = m_28->m_connections;

Simulating statement (from ssa_edges): map_559 = m_28->m_rtpmaps;

Simulating statement (from ssa_edges): D.44697_797 = m_28->m_port;

Simulating statement (from ssa_edges): D.44681_872 = m_28->m_type;

Simulating statement (from ssa_edges): D.44697_873 = m_28->m_port;

Simulating statement (from ssa_edges): D.44546_880 = m_28->m_connections;

Simulating statement (from ssa_edges): connection_881 = m_28->m_connections;

Simulating statement (from ssa_edges): map_883 = m_28->m_rtpmaps;

Simulating statement (from ssa_edges): attr_886 = m_28->m_attributes;

Simulating statement (from ssa_edges): attr_893 = m_28->m_attributes;

Simulating statement (from ssa_edges): D.44666_970 = m_28->m_proto;

Simulating statement (from ssa_edges): D.44697_1061 = m_28->m_port;

Simulating statement (from ssa_edges): m_1093 = m_28->m_next;

Simulating block 450

Visiting PHI node: match_16 = PHI <match_148(101), match_15(449)>

    Argument #0 (101 -> 450 executable)
	match_148	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: best_te_23 = PHI <best_te_149(101), best_te_22(449)>

    Argument #0 (101 -> 450 executable)
	best_te_149	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: cng_pt_27 = PHI <cng_pt_151(101), cng_pt_26(449)>

    Argument #0 (101 -> 450 executable)
	cng_pt_151	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_crypto_56 = PHI <got_crypto_164(101), got_crypto_55(449)>

    Argument #0 (101 -> 450 executable)
	got_crypto_164	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>

    Argument #0 (101 -> 450 executable)
	got_video_crypto_165	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_audio_67 = PHI <got_audio_166(101), got_audio_66(449)>

    Argument #0 (101 -> 450 executable)
	got_audio_166	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: codec_ms_95 = PHI <codec_ms_181(101), codec_ms_94(449)>

    Argument #0 (101 -> 450 executable)
	codec_ms_181	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>

    Argument #0 (101 -> 450 executable)
	m_idx_184	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>

    Argument #0 (101 -> 450 executable)
	nm_idx_185	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (m_28 != 0B)
which is likely CONSTANT
Adding Destination of edge (450 -> 102) to worklist

Adding Destination of edge (450 -> 451) to worklist


Simulating statement (from ssa_edges): nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>

Visiting PHI node: nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>

    Argument #0 (197 -> 281 not executable)

    Argument #1 (280 -> 281 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 not executable)

    Argument #2 (349 -> 449 not executable)

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>

Visiting PHI node: m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>

    Argument #0 (197 -> 281 not executable)

    Argument #1 (280 -> 281 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

Visiting PHI node: m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 not executable)

    Argument #2 (349 -> 449 not executable)

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): codec_ms_92 = PHI <codec_ms_95(197), codec_ms_91(280)>

Visiting PHI node: codec_ms_92 = PHI <codec_ms_95(197), codec_ms_91(280)>

    Argument #0 (197 -> 281 not executable)

    Argument #1 (280 -> 281 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>

Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 not executable)

    Argument #2 (349 -> 449 not executable)

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 not executable)

    Argument #1 (103 -> 104 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 not executable)

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 not executable)

    Argument #3 (116 -> 117 not executable)

    Argument #4 (109 -> 117 not executable)

    Argument #5 (113 -> 117 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 not executable)

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 not executable)

    Argument #3 (116 -> 117 not executable)

    Argument #4 (109 -> 117 not executable)

    Argument #5 (113 -> 117 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 not executable)

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 not executable)

    Argument #3 (116 -> 117 not executable)

    Argument #4 (109 -> 117 not executable)

    Argument #5 (113 -> 117 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 not executable)

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 not executable)

    Argument #3 (116 -> 117 not executable)

    Argument #4 (109 -> 117 not executable)

    Argument #5 (113 -> 117 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 not executable)

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 not executable)

    Argument #3 (116 -> 117 not executable)

    Argument #4 (109 -> 117 not executable)

    Argument #5 (113 -> 117 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): D.44778_496 = got_audio_67 == 0;

Simulating statement (from ssa_edges): got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>

Visiting PHI node: got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>

    Argument #0 (323 -> 335 not executable)

    Argument #1 (333 -> 335 not executable)

    Argument #2 (334 -> 335 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>

Visiting PHI node: got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 not executable)

    Argument #2 (349 -> 449 not executable)

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 not executable)

    Argument #2 (349 -> 449 not executable)

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>

Visiting PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>

    Argument #0 (354 -> 425 not executable)

    Argument #1 (424 -> 425 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>

Visiting PHI node: got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>

    Argument #0 (155 -> 166 not executable)

    Argument #1 (156 -> 166 not executable)

    Argument #2 (165 -> 166 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>

Visiting PHI node: got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>

    Argument #0 (157 -> 165 not executable)

    Argument #1 (164 -> 165 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 not executable)

    Argument #2 (349 -> 449 not executable)

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): cng_pt_25 = PHI <cng_pt_27(197), cng_pt_24(280)>

Visiting PHI node: cng_pt_25 = PHI <cng_pt_27(197), cng_pt_24(280)>

    Argument #0 (197 -> 281 not executable)

    Argument #1 (280 -> 281 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>

Visiting PHI node: cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 not executable)

    Argument #2 (349 -> 449 not executable)

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): best_te_20 = PHI <best_te_23(197), best_te_19(280)>

Visiting PHI node: best_te_20 = PHI <best_te_23(197), best_te_19(280)>

    Argument #0 (197 -> 281 not executable)

    Argument #1 (280 -> 281 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>

Visiting PHI node: best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 not executable)

    Argument #2 (349 -> 449 not executable)

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 not executable)

    Argument #1 (123 -> 451 not executable)

    Argument #2 (141 -> 451 not executable)

    Argument #3 (152 -> 451 not executable)

    Argument #4 (186 -> 451 not executable)

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 not executable)

    Argument #7 (353 -> 451 not executable)

    Argument #8 (398 -> 451 not executable)

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_1095 = match_17;

Simulating statement (from ssa_edges): match_8 = PHI <match_16(197), match_7(280)>

Visiting PHI node: match_8 = PHI <match_16(197), match_7(280)>

    Argument #0 (197 -> 281 not executable)

    Argument #1 (280 -> 281 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

Visiting PHI node: match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 not executable)

    Argument #2 (349 -> 449 not executable)

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): D.45307_1086 = match_16 == 0;

Simulating statement (from ssa_edges): match_14 = PHI <match_16(437), match_1089(438)>

Visiting PHI node: match_14 = PHI <match_16(437), match_1089(438)>

    Argument #0 (437 -> 439 not executable)

    Argument #1 (438 -> 439 not executable)

    PHI node value: UNDEFINED


Simulating block 102

Visiting statement:
ptime_371 = dptime_37;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
maxptime_372 = dmaxptime_41;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44666_373 = m_28->m_proto;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44666_373 == 261)
which is likely CONSTANT
Adding Destination of edge (102 -> 103) to worklist

Adding Destination of edge (102 -> 104) to worklist


Simulating statement (from ssa_edges): maxptime_39 = PHI <maxptime_372(166), maxptime_38(188)>

Visiting PHI node: maxptime_39 = PHI <maxptime_372(166), maxptime_38(188)>

    Argument #0 (166 -> 189 not executable)

    Argument #1 (188 -> 189 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): ptime_35 = PHI <ptime_371(166), ptime_34(188)>

Visiting PHI node: ptime_35 = PHI <ptime_371(166), ptime_34(188)>

    Argument #0 (166 -> 189 not executable)

    Argument #1 (188 -> 189 not executable)

    PHI node value: UNDEFINED


Simulating block 103

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 0

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0


Simulating block 100

Simulating block 451

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 not executable)

    Argument #1 (123 -> 451 not executable)

    Argument #2 (141 -> 451 not executable)

    Argument #3 (152 -> 451 not executable)

    Argument #4 (186 -> 451 not executable)

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 not executable)

    Argument #7 (353 -> 451 not executable)

    Argument #8 (398 -> 451 not executable)

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting statement:
if (parser_196 != 0B)
which is likely CONSTANT
Adding Destination of edge (451 -> 452) to worklist

Adding Destination of edge (451 -> 453) to worklist


Simulating block 452

Simulating block 104

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 0

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting statement:
D.44669_375 = m_28->m_proto_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44669_375 != 0B)
which is likely CONSTANT
Adding Destination of edge (104 -> 105) to worklist

Adding Destination of edge (104 -> 107) to worklist


Simulating block 105

Visiting statement:
D.44669_376 = m_28->m_proto_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44672_377 == 0)
which is likely CONSTANT
Adding Destination of edge (105 -> 106) to worklist


Simulating block 106

Visiting statement:
D.44530_378 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 453

Visiting statement:
D.44471_1094 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
match_1095 = match_17;
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (453 -> 454) to worklist


Simulating statement (from ssa_edges): match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

Visiting PHI node: match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

    Argument #0 (5 -> 454 executable)
	match_187	Value: CONSTANT 0

    Argument #1 (7 -> 454 executable)
	match_197	Value: CONSTANT 0

    Argument #2 (9 -> 454 executable)
	match_199	Value: CONSTANT 0

    Argument #3 (453 -> 454 executable)
	match_1095	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 107

Visiting statement:
D.44675_379 = m_28->m_proto;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44676_380 = D.44675_379 == 257;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44677_381 = D.44675_379 == 261;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44678_382 = D.44676_380 || D.44677_381;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44678_382 != 0)
which is likely CONSTANT
Adding Destination of edge (107 -> 108) to worklist

Adding Destination of edge (107 -> 111) to worklist


Simulating block 108

Visiting statement:
D.44681_383 = m_28->m_type;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44681_383 == 2)
which is likely CONSTANT
Adding Destination of edge (108 -> 109) to worklist

Adding Destination of edge (108 -> 110) to worklist


Simulating block 109

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.
Adding Destination of edge (109 -> 117) to worklist


Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 not executable)

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 not executable)

    Argument #3 (116 -> 117 not executable)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 1

    Argument #5 (113 -> 117 not executable)

    PHI node value: CONSTANT 1

Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0


Simulating block 454

Visiting PHI node: match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

    Argument #0 (5 -> 454 executable)
	match_187	Value: CONSTANT 0

    Argument #1 (7 -> 454 executable)
	match_197	Value: CONSTANT 0

    Argument #2 (9 -> 454 executable)
	match_199	Value: CONSTANT 0

    Argument #3 (453 -> 454 executable)
	match_1095	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 111

Visiting statement:
D.44666_386 = m_28->m_proto;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44666_386 == 256)
which is likely CONSTANT
Adding Destination of edge (111 -> 112) to worklist

Adding Destination of edge (111 -> 115) to worklist


Simulating block 110

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 1

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 not executable)

    Argument #3 (116 -> 117 not executable)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 0

    Argument #5 (113 -> 117 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0


Simulating block 117

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 0

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 not executable)

    Argument #3 (116 -> 117 not executable)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 0

    Argument #5 (113 -> 117 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 0

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 not executable)

    Argument #3 (116 -> 117 not executable)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 0

    Argument #5 (113 -> 117 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 1

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 not executable)

    Argument #3 (116 -> 117 not executable)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 0

    Argument #5 (113 -> 117 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 0

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 not executable)

    Argument #3 (116 -> 117 not executable)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 1

    Argument #5 (113 -> 117 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 0

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 not executable)

    Argument #3 (116 -> 117 not executable)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 0

    Argument #5 (113 -> 117 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (got_udptl_76 != 0)
which is likely CONSTANT
Adding Destination of edge (117 -> 153) to worklist


Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0


Simulating block 112

Visiting statement:
D.44681_387 = m_28->m_type;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44681_387 == 2)
which is likely CONSTANT
Adding Destination of edge (112 -> 113) to worklist

Adding Destination of edge (112 -> 114) to worklist


Simulating block 115

Visiting statement:
D.44666_390 = m_28->m_proto;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44666_390 == 258)
which is likely CONSTANT
Adding Destination of edge (115 -> 116) to worklist

Adding Destination of edge (115 -> 117) to worklist


Simulating block 116

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 0

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 0

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 1

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 0

    Argument #5 (113 -> 117 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (got_udptl_76 != 0)

Visiting statement:
if (got_udptl_76 != 0)
which is likely CONSTANT
Adding Destination of edge (117 -> 118) to worklist


Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0


Simulating block 118

Visiting statement:
D.44681_392 = m_28->m_type;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44681_392 == 8)
which is likely CONSTANT
Adding Destination of edge (118 -> 119) to worklist


Simulating block 119

Visiting statement:
D.44697_393 = m_28->m_port;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44697_393 != 0)
which is likely CONSTANT
Adding Destination of edge (119 -> 120) to worklist


Simulating block 120

Visiting statement:
D.44530_395 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44699_396 != 0)
which is likely CONSTANT
Adding Destination of edge (120 -> 121) to worklist

Adding Destination of edge (120 -> 122) to worklist


Simulating block 121

Visiting statement:
match_397 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.
Adding Destination of edge (121 -> 451) to worklist


Simulating statement (from ssa_edges): match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 not executable)

    Argument #2 (141 -> 451 not executable)

    Argument #3 (152 -> 451 not executable)

    Argument #4 (186 -> 451 not executable)

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 not executable)

    Argument #7 (353 -> 451 not executable)

    Argument #8 (398 -> 451 not executable)

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_1095 = match_17;

Visiting statement:
match_1095 = match_17;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

Visiting PHI node: match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

    Argument #0 (5 -> 454 executable)
	match_187	Value: CONSTANT 0

    Argument #1 (7 -> 454 executable)
	match_197	Value: CONSTANT 0

    Argument #2 (9 -> 454 executable)
	match_199	Value: CONSTANT 0

    Argument #3 (453 -> 454 executable)
	match_1095	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating block 153

Visiting statement:
D.44681_493 = m_28->m_type;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44681_493 == 2)
which is likely CONSTANT
Adding Destination of edge (153 -> 154) to worklist

Adding Destination of edge (153 -> 348) to worklist


Simulating block 113

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 0

    Argument #1 (114 -> 117 not executable)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 0

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 0

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 0

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0


Simulating block 114

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 0

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 1

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 0

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 0

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 0

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0


Simulating block 117

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 0

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 0

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 0

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 0

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 0

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 0

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 1

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 0

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 0

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 0

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 1

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 0

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 0

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 0

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 0

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 0

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 0

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 0

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 0

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 1

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 0

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 0

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 0

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 1

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 0

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 122

Visiting statement:
if (D.44703_399 != 0)
which is likely CONSTANT
Adding Destination of edge (122 -> 123) to worklist

Adding Destination of edge (122 -> 124) to worklist


Simulating block 123

Visiting statement:
D.44530_400 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
match_401 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 not executable)

    Argument #3 (152 -> 451 not executable)

    Argument #4 (186 -> 451 not executable)

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 not executable)

    Argument #7 (353 -> 451 not executable)

    Argument #8 (398 -> 451 not executable)

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 451

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 not executable)

    Argument #3 (152 -> 451 not executable)

    Argument #4 (186 -> 451 not executable)

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 not executable)

    Argument #7 (353 -> 451 not executable)

    Argument #8 (398 -> 451 not executable)

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 154

Visiting statement:
D.44697_494 = m_28->m_port;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44777_495 = D.44697_494 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44778_496 = got_audio_67 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.44779_497 = D.44777_495 && D.44778_496;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44779_497 != 0)
which is likely CONSTANT
Adding Destination of edge (154 -> 155) to worklist


Simulating block 155

Visiting statement:
if (D.44781_498 != 0)
which is likely CONSTANT
Adding Destination of edge (155 -> 156) to worklist

Adding Destination of edge (155 -> 166) to worklist


Simulating block 156

Visiting statement:
if (D.44784_499 != 0)
which is likely CONSTANT
Adding Destination of edge (156 -> 157) to worklist


Simulating block 157

Visiting statement:
attr_500 = m_28->m_attributes;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (157 -> 165) to worklist


Simulating statement (from ssa_edges): attr_30 = PHI <attr_500(157), attr_506(164)>

Visiting PHI node: attr_30 = PHI <attr_500(157), attr_506(164)>

    Argument #0 (157 -> 165 executable)
	attr_500	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (attr_30 != 0B)

Simulating statement (from ssa_edges): D.44590_501 = attr_30->a_name;

Simulating statement (from ssa_edges): D.44619_503 = attr_30->a_value;

Simulating statement (from ssa_edges): attr_506 = attr_30->a_next;

Simulating block 348

Visiting statement:
D.44681_872 = m_28->m_type;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44681_872 == 3)
which is likely CONSTANT
Adding Destination of edge (348 -> 349) to worklist

Adding Destination of edge (348 -> 449) to worklist


Simulating block 124

Visiting statement:
D.44481_403 = smh_186->session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44482_404 = D.44481_403->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
pass_406 = (int) D.44706_405;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_407 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44707_408 != 0)
which is likely CONSTANT
Adding Destination of edge (124 -> 125) to worklist

Adding Destination of edge (124 -> 127) to worklist


Simulating statement (from ssa_edges): pass_126 = PHI <pass_406(127), pass_409(128), pass_409(129), pass_411(130)>

Visiting PHI node: pass_126 = PHI <pass_406(127), pass_409(128), pass_409(129), pass_411(130)>

    Argument #0 (127 -> 131 not executable)

    Argument #1 (128 -> 131 not executable)

    Argument #2 (129 -> 131 not executable)

    Argument #3 (130 -> 131 not executable)

    PHI node value: UNDEFINED


Simulating block 125

Visiting statement:
if (proceed_209(D) != 0B)
which is likely CONSTANT
Adding Destination of edge (125 -> 126) to worklist


Simulating block 126

Simulating block 166

Visiting PHI node: got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>

    Argument #0 (155 -> 166 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #1 (156 -> 166 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #2 (165 -> 166 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
attr_507 = m_28->m_attributes;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (166 -> 189) to worklist


Simulating statement (from ssa_edges): attr_31 = PHI <attr_507(166), attr_548(188)>

Visiting PHI node: attr_31 = PHI <attr_507(166), attr_548(188)>

    Argument #0 (166 -> 189 executable)
	attr_507	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (attr_31 != 0B)

Simulating statement (from ssa_edges): D.44590_508 = attr_31->a_name;

Simulating statement (from ssa_edges): D.44619_510 = attr_31->a_value;

Simulating statement (from ssa_edges): D.44619_512 = attr_31->a_value;

Simulating statement (from ssa_edges): D.44619_513 = attr_31->a_value;

Simulating statement (from ssa_edges): D.44590_519 = attr_31->a_name;

Simulating statement (from ssa_edges): D.44619_521 = attr_31->a_value;

Simulating statement (from ssa_edges): D.44619_522 = attr_31->a_value;

Simulating statement (from ssa_edges): D.44590_524 = attr_31->a_name;

Simulating statement (from ssa_edges): D.44619_526 = attr_31->a_value;

Simulating statement (from ssa_edges): D.44619_527 = attr_31->a_value;

Simulating statement (from ssa_edges): D.44590_529 = attr_31->a_name;

Simulating statement (from ssa_edges): D.44619_531 = attr_31->a_value;

Simulating statement (from ssa_edges): crypto_544 = attr_31->a_value;

Simulating statement (from ssa_edges): attr_548 = attr_31->a_next;

Simulating statement (from ssa_edges): got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>

Visiting PHI node: got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>

    Argument #0 (166 -> 189 executable)
	got_crypto_52	Value: CONSTANT 0

    Argument #1 (188 -> 189 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (got_crypto_54 <= 0)

Simulating statement (from ssa_edges): got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>

Visiting PHI node: got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>

    Argument #0 (170 -> 188 not executable)

    Argument #1 (173 -> 188 not executable)

    Argument #2 (176 -> 188 not executable)

    Argument #3 (177 -> 188 not executable)

    Argument #4 (178 -> 188 not executable)

    Argument #5 (182 -> 188 not executable)

    Argument #6 (187 -> 188 not executable)

    Argument #7 (169 -> 188 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): D.44834_549 = got_crypto_54 == -1;

Simulating statement (from ssa_edges): D.45003_714 = got_crypto_54 <= 0;

Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #2 (349 -> 449 not executable)

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_crypto_56 = PHI <got_crypto_164(101), got_crypto_55(449)>

Visiting PHI node: got_crypto_56 = PHI <got_crypto_164(101), got_crypto_55(449)>

    Argument #0 (101 -> 450 executable)
	got_crypto_164	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0


Simulating block 165

Visiting PHI node: got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>

    Argument #0 (157 -> 165 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #1 (164 -> 165 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (attr_30 != 0B)
which is likely CONSTANT
Adding Destination of edge (165 -> 158) to worklist

Adding Destination of edge (165 -> 166) to worklist


Simulating statement (from ssa_edges): got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>

Visiting PHI node: got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>

    Argument #0 (155 -> 166 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #1 (156 -> 166 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #2 (165 -> 166 executable)
	got_crypto_51	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>

Visiting PHI node: got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>

    Argument #0 (158 -> 164 not executable)

    Argument #1 (162 -> 164 not executable)

    Argument #2 (163 -> 164 not executable)

    PHI node value: UNDEFINED


Simulating block 349

Visiting statement:
D.44697_873 = m_28->m_port;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44697_873 != 0)
which is likely CONSTANT
Adding Destination of edge (349 -> 350) to worklist


Simulating block 350

Visiting statement:
mimp_874 = 0B;
which is likely CONSTANT
Lattice value changed to CONSTANT 0B.  Adding SSA edges to worklist.

Visiting statement:
vmatch_875 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
nm_idx_876 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
m_idx_877 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
D.44530_878 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
connection_879 = sdp_198->sdp_connection;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44546_880 = m_28->m_connections;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44546_880 != 0B)
which is likely CONSTANT
Adding Destination of edge (350 -> 351) to worklist

Adding Destination of edge (350 -> 352) to worklist


Simulating statement (from ssa_edges): connection_125 = PHI <connection_879(350), connection_881(351)>

Visiting PHI node: connection_125 = PHI <connection_879(350), connection_881(351)>

    Argument #0 (350 -> 352 executable)
	connection_879	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (connection_125 == 0B)

Simulating statement (from ssa_edges): D.45085_1059 = connection_125->c_address;

Simulating statement (from ssa_edges): m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>

Visiting PHI node: m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>

    Argument #0 (354 -> 425 not executable)

    Argument #1 (424 -> 425 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>

Visiting PHI node: nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>

    Argument #0 (101 -> 450 executable)
	nm_idx_185	Value: CONSTANT 0

    Argument #1 (449 -> 450 not executable)

    PHI node value: CONSTANT 0


Simulating block 351

Visiting statement:
connection_881 = m_28->m_connections;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 449

Visiting PHI node: match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	best_te_23	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	best_te_23	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_video_crypto_64	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_video_crypto_64	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting statement:
m_1093 = m_28->m_next;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (449 -> 450) to worklist


Simulating statement (from ssa_edges): m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>

Visiting PHI node: m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>

    Argument #0 (101 -> 450 executable)
	m_idx_184	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	m_idx_113	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): codec_ms_95 = PHI <codec_ms_181(101), codec_ms_94(449)>

Visiting PHI node: codec_ms_95 = PHI <codec_ms_181(101), codec_ms_94(449)>

    Argument #0 (101 -> 450 executable)
	codec_ms_181	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	codec_ms_94	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): got_audio_67 = PHI <got_audio_166(101), got_audio_66(449)>

Visiting PHI node: got_audio_67 = PHI <got_audio_166(101), got_audio_66(449)>

    Argument #0 (101 -> 450 executable)
	got_audio_166	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_audio_66	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>

Visiting PHI node: got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>

    Argument #0 (101 -> 450 executable)
	got_video_crypto_165	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_crypto_63	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): cng_pt_27 = PHI <cng_pt_151(101), cng_pt_26(449)>

Visiting PHI node: cng_pt_27 = PHI <cng_pt_151(101), cng_pt_26(449)>

    Argument #0 (101 -> 450 executable)
	cng_pt_151	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	cng_pt_26	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): best_te_23 = PHI <best_te_149(101), best_te_22(449)>

Visiting PHI node: best_te_23 = PHI <best_te_149(101), best_te_22(449)>

    Argument #0 (101 -> 450 executable)
	best_te_149	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	best_te_22	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): match_16 = PHI <match_148(101), match_15(449)>

Visiting PHI node: match_16 = PHI <match_148(101), match_15(449)>

    Argument #0 (101 -> 450 executable)
	match_148	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	match_15	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 450

Visiting PHI node: match_16 = PHI <match_148(101), match_15(449)>

    Argument #0 (101 -> 450 executable)
	match_148	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	match_15	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: best_te_23 = PHI <best_te_149(101), best_te_22(449)>

    Argument #0 (101 -> 450 executable)
	best_te_149	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	best_te_22	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: cng_pt_27 = PHI <cng_pt_151(101), cng_pt_26(449)>

    Argument #0 (101 -> 450 executable)
	cng_pt_151	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	cng_pt_26	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: got_crypto_56 = PHI <got_crypto_164(101), got_crypto_55(449)>

    Argument #0 (101 -> 450 executable)
	got_crypto_164	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_crypto_55	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>

    Argument #0 (101 -> 450 executable)
	got_video_crypto_165	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_crypto_63	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: got_audio_67 = PHI <got_audio_166(101), got_audio_66(449)>

    Argument #0 (101 -> 450 executable)
	got_audio_166	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_audio_66	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting PHI node: codec_ms_95 = PHI <codec_ms_181(101), codec_ms_94(449)>

    Argument #0 (101 -> 450 executable)
	codec_ms_181	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	codec_ms_94	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>

    Argument #0 (101 -> 450 executable)
	m_idx_184	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	m_idx_113	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>

    Argument #0 (101 -> 450 executable)
	nm_idx_185	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	nm_idx_121	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)


Simulating statement (from ssa_edges): got_webrtc_374 = got_webrtc_79 + 1;

Visiting statement:
got_webrtc_374 = got_webrtc_79 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 1

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #4 (109 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #5 (113 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)


Simulating statement (from ssa_edges): got_udptl_391 = got_udptl_77 + 1;

Visiting statement:
got_udptl_391 = got_udptl_77 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #5 (113 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_384 = got_savp_75 + 1;

Visiting statement:
got_savp_384 = got_savp_75 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>

    Argument #0 (110 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (114 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (115 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #3 (116 -> 117 executable)
	got_savp_75	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #4 (109 -> 117 executable)
	got_savp_384	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (114 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (115 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #3 (116 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #4 (109 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #5 (113 -> 117 executable)
	got_video_savp_73	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_385 = got_video_savp_73 + 1;

Visiting statement:
got_video_savp_385 = got_video_savp_73 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

Visiting PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>

    Argument #0 (110 -> 117 executable)
	got_video_savp_385	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (115 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #3 (116 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #4 (109 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #5 (113 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_389 = got_video_avp_71 + 1;

Visiting statement:
got_video_avp_389 = got_video_avp_71 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

Visiting PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>

    Argument #0 (110 -> 117 executable)
	got_video_avp_71	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (114 -> 117 executable)
	got_video_avp_389	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_388 = got_avp_69 + 1;

Visiting statement:
got_avp_388 = got_avp_69 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>

    Argument #0 (110 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (114 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (115 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #3 (116 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #4 (109 -> 117 executable)
	got_avp_69	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #5 (113 -> 117 executable)
	got_avp_388	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 127

Visiting statement:
if (var_402 != 0B)
which is likely CONSTANT
Adding Destination of edge (127 -> 128) to worklist

Adding Destination of edge (127 -> 131) to worklist


Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

Visiting PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>

    Argument #0 (101 -> 450 executable)
	got_avp_167	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_avp_68	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

Visiting PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>

    Argument #0 (101 -> 450 executable)
	got_video_avp_168	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_avp_70	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

Visiting PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>

    Argument #0 (101 -> 450 executable)
	got_video_savp_169	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_savp_72	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44835_550 = got_savp_74 != 0;

Simulating statement (from ssa_edges): got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

Visiting PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>

    Argument #0 (101 -> 450 executable)
	got_savp_170	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_savp_74	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>

    Argument #0 (110 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (114 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (115 -> 117 executable)
	got_udptl_77	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #3 (116 -> 117 executable)
	got_udptl_391	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

Visiting PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>

    Argument #0 (101 -> 450 executable)
	got_udptl_171	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_udptl_76	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>

    Argument #0 (102 -> 104 executable)
	got_webrtc_79	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (103 -> 104 executable)
	got_webrtc_374	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44830_541 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): D.44839_552 = got_avp_68 | got_webrtc_78;

Simulating statement (from ssa_edges): D.44830_972 = got_webrtc_78 == 0;

Simulating statement (from ssa_edges): got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

Visiting PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>

    Argument #0 (101 -> 450 executable)
	got_webrtc_172	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_webrtc_78	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 128

Visiting statement:
if (pass_409 == 0)
which is likely CONSTANT
Adding Destination of edge (128 -> 129) to worklist


Simulating block 129

Visiting statement:
if (D.44716_410 == 0)
which is likely CONSTANT
Adding Destination of edge (129 -> 130) to worklist


Simulating block 130

Visiting statement:
pass_411 = 2;
which is likely CONSTANT
Lattice value changed to CONSTANT 2.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): pass_126 = PHI <pass_406(127), pass_409(128), pass_409(129), pass_411(130)>

Visiting PHI node: pass_126 = PHI <pass_406(127), pass_409(128), pass_409(129), pass_411(130)>

    Argument #0 (127 -> 131 executable)
	pass_406	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 189

Visiting PHI node: ptime_35 = PHI <ptime_371(166), ptime_34(188)>

    Argument #0 (166 -> 189 executable)
	ptime_371	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting PHI node: maxptime_39 = PHI <maxptime_372(166), maxptime_38(188)>

    Argument #0 (166 -> 189 executable)
	maxptime_372	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting PHI node: got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>

    Argument #0 (166 -> 189 executable)
	got_crypto_52	Value: CONSTANT 0

    Argument #1 (188 -> 189 not executable)

    PHI node value: CONSTANT 0


Visiting statement:
if (attr_31 != 0B)
which is likely CONSTANT
Adding Destination of edge (189 -> 167) to worklist

Adding Destination of edge (189 -> 190) to worklist


Simulating statement (from ssa_edges): maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>

Visiting PHI node: maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>

    Argument #0 (170 -> 188 not executable)

    Argument #1 (173 -> 188 not executable)

    Argument #2 (176 -> 188 not executable)

    Argument #3 (177 -> 188 not executable)

    Argument #4 (178 -> 188 not executable)

    Argument #5 (182 -> 188 not executable)

    Argument #6 (187 -> 188 not executable)

    Argument #7 (169 -> 188 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): if (maxptime_39 != 0)

Simulating statement (from ssa_edges): D.44878_583 = codec_ms_581 > maxptime_39;

Simulating statement (from ssa_edges): codec_ms_585 = maxptime_39;

Simulating statement (from ssa_edges): if (maxptime_39 == 0)

Simulating statement (from ssa_edges): if (D.45025_735 <= maxptime_39)

Simulating statement (from ssa_edges): ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>

Visiting PHI node: ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>

    Argument #0 (170 -> 188 not executable)

    Argument #1 (173 -> 188 not executable)

    Argument #2 (176 -> 188 not executable)

    Argument #3 (177 -> 188 not executable)

    Argument #4 (178 -> 188 not executable)

    Argument #5 (182 -> 188 not executable)

    Argument #6 (187 -> 188 not executable)

    Argument #7 (169 -> 188 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): codec_ms_581 = ptime_35;

Simulating statement (from ssa_edges): if (ptime_35 == 0)

Simulating statement (from ssa_edges): D.44989_689 = ptime_35 != 0;

Simulating statement (from ssa_edges): if (pass_126 == 2)

Simulating statement (from ssa_edges): pass_127 = PHI <pass_126(136), pass_423(137)>

Visiting PHI node: pass_127 = PHI <pass_126(136), pass_423(137)>

    Argument #0 (136 -> 138 not executable)

    Argument #1 (137 -> 138 not executable)

    PHI node value: UNDEFINED


Simulating block 158

Visiting statement:
D.44590_501 = attr_30->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44787_502 == 0)
which is likely CONSTANT
Adding Destination of edge (158 -> 159) to worklist

Adding Destination of edge (158 -> 164) to worklist


Simulating block 159

Visiting statement:
D.44619_503 = attr_30->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44619_503 == 0B)
which is likely CONSTANT
Adding Destination of edge (159 -> 162) to worklist

Adding Destination of edge (159 -> 160) to worklist


Simulating statement (from ssa_edges): D.47887_1469 = *D.44619_503;

Simulating block 160

Visiting statement:
D.47887_1469 = *D.44619_503;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47887_1469 == 0)
which is likely CONSTANT
Adding Destination of edge (160 -> 161) to worklist


Simulating block 161

Simulating block 166

Visiting PHI node: got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>

    Argument #0 (155 -> 166 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #1 (156 -> 166 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #2 (165 -> 166 executable)
	got_crypto_51	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 352

Visiting statement:
if (connection_125 == 0B)
which is likely CONSTANT
Adding Destination of edge (352 -> 353) to worklist

Adding Destination of edge (352 -> 354) to worklist


Simulating block 353

Visiting statement:
match_882 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (353 -> 451) to worklist


Simulating statement (from ssa_edges): match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 not executable)

    Argument #3 (152 -> 451 not executable)

    Argument #4 (186 -> 451 not executable)

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 not executable)

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 not executable)

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 131

Visiting statement:
if (pass_126 == 2)
which is likely CONSTANT
Adding Destination of edge (131 -> 132) to worklist

Adding Destination of edge (131 -> 133) to worklist


Simulating block 167

Visiting statement:
D.44590_508 = attr_31->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44795_509 == 0)
which is likely CONSTANT
Adding Destination of edge (167 -> 168) to worklist

Adding Destination of edge (167 -> 171) to worklist


Simulating block 190

Visiting statement:
D.44834_549 = got_crypto_54 == -1;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
D.44835_550 = got_savp_74 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44836_551 = D.44834_549 && D.44835_550;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (D.44836_551 != 0)
which is likely CONSTANT
Adding Destination of edge (190 -> 193) to worklist


Simulating block 193

Visiting statement:
connection_554 = sdp_198->sdp_connection;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44546_555 = m_28->m_connections;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44546_555 != 0B)
which is likely CONSTANT
Adding Destination of edge (193 -> 194) to worklist

Adding Destination of edge (193 -> 195) to worklist


Simulating statement (from ssa_edges): connection_124 = PHI <connection_554(193), connection_556(194)>

Visiting PHI node: connection_124 = PHI <connection_554(193), connection_556(194)>

    Argument #0 (193 -> 195 executable)
	connection_554	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (connection_124 == 0B)

Simulating statement (from ssa_edges): D.45085_795 = connection_124->c_address;

Simulating block 194

Visiting statement:
connection_556 = m_28->m_connections;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 164

Visiting PHI node: got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>

    Argument #0 (158 -> 164 executable)
	got_crypto_51	Value: CONSTANT 0

    Argument #1 (162 -> 164 not executable)

    Argument #2 (163 -> 164 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
attr_506 = attr_30->a_next;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (164 -> 165) to worklist


Simulating statement (from ssa_edges): got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>

Visiting PHI node: got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>

    Argument #0 (157 -> 165 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #1 (164 -> 165 executable)
	got_crypto_50	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 165

Visiting PHI node: got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>

    Argument #0 (157 -> 165 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #1 (164 -> 165 executable)
	got_crypto_50	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 162

Visiting PHI node: D.47886_1470 = PHI <1(159), 1(160), 0(161)>

    Argument #0 (159 -> 162 executable)
	1	Value: CONSTANT 1

    Argument #1 (160 -> 162 executable)
	1	Value: CONSTANT 1

    Argument #2 (161 -> 162 executable)
	0	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47886_1524 = D.47886_1470;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47886_504 = D.47886_1524;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.47886_504 == 0)
which is likely CONSTANT
Adding Destination of edge (162 -> 163) to worklist

Adding Destination of edge (162 -> 164) to worklist


Simulating block 354

Visiting statement:
map_883 = m_28->m_rtpmaps;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (354 -> 425) to worklist


Simulating statement (from ssa_edges): map_136 = PHI <map_883(354), map_1021(424)>

Visiting PHI node: map_136 = PHI <map_883(354), map_1021(424)>

    Argument #0 (354 -> 425 executable)
	map_883	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (map_136 != 0B)

Simulating statement (from ssa_edges): rm_encoding_979 = map_136->rm_encoding;

Simulating statement (from ssa_edges): D.45247_991 = map_136->rm_pt;

Simulating statement (from ssa_edges): D.45255_996 = map_136->rm_encoding;

Simulating statement (from ssa_edges): D.45247_1003 = map_136->rm_pt;

Simulating statement (from ssa_edges): D.45247_1005 = map_136->rm_pt;

Simulating statement (from ssa_edges): D.45262_1013 = map_136->rm_rate;

Simulating statement (from ssa_edges): map_1021 = map_136->rm_next;

Simulating block 425

Visiting PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>

    Argument #0 (354 -> 425 executable)
	got_video_crypto_64	Value: CONSTANT 0

    Argument #1 (424 -> 425 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>

    Argument #0 (354 -> 425 executable)
	m_idx_877	Value: CONSTANT 0

    Argument #1 (424 -> 425 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (map_136 != 0B)
which is likely CONSTANT
Adding Destination of edge (425 -> 355) to worklist

Adding Destination of edge (425 -> 426) to worklist


Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 not executable)

    Argument #1 (422 -> 423 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>

Visiting PHI node: m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>

    Argument #0 (426 -> 428 not executable)

    Argument #1 (427 -> 428 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>

Visiting PHI node: got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>

    Argument #0 (355 -> 366 not executable)

    Argument #1 (356 -> 366 not executable)

    Argument #2 (365 -> 366 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>

Visiting PHI node: got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>

    Argument #0 (357 -> 365 not executable)

    Argument #1 (364 -> 365 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): D.45266_1024 = got_video_crypto_62 <= 0;

Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_video_crypto_64	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_video_crypto_64	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating block 355

Visiting statement:
if (D.45137_884 != 0)
which is likely CONSTANT
Adding Destination of edge (355 -> 356) to worklist

Adding Destination of edge (355 -> 366) to worklist


Simulating block 356

Visiting statement:
if (D.45140_885 != 0)
which is likely CONSTANT
Adding Destination of edge (356 -> 357) to worklist


Simulating block 357

Visiting statement:
attr_886 = m_28->m_attributes;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (357 -> 365) to worklist


Simulating statement (from ssa_edges): attr_32 = PHI <attr_886(357), attr_892(364)>

Visiting PHI node: attr_32 = PHI <attr_886(357), attr_892(364)>

    Argument #0 (357 -> 365 executable)
	attr_886	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (attr_32 != 0B)

Simulating statement (from ssa_edges): D.44590_887 = attr_32->a_name;

Simulating statement (from ssa_edges): D.44619_889 = attr_32->a_value;

Simulating statement (from ssa_edges): attr_892 = attr_32->a_next;

Simulating block 365

Visiting PHI node: got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>

    Argument #0 (357 -> 365 executable)
	got_video_crypto_62	Value: CONSTANT 0

    Argument #1 (364 -> 365 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (attr_32 != 0B)
which is likely CONSTANT
Adding Destination of edge (365 -> 358) to worklist


Simulating statement (from ssa_edges): got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>

Visiting PHI node: got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>

    Argument #0 (355 -> 366 executable)
	got_video_crypto_62	Value: CONSTANT 0

    Argument #1 (356 -> 366 executable)
	got_video_crypto_62	Value: CONSTANT 0

    Argument #2 (365 -> 366 executable)
	got_video_crypto_58	Value: CONSTANT 0

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>

Visiting PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>

    Argument #0 (366 -> 401 not executable)

    Argument #1 (400 -> 401 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>

Visiting PHI node: got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>

    Argument #0 (358 -> 364 not executable)

    Argument #1 (362 -> 364 not executable)

    Argument #2 (363 -> 364 not executable)

    PHI node value: UNDEFINED


Simulating block 358

Visiting statement:
D.44590_887 = attr_32->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45143_888 == 0)
which is likely CONSTANT
Adding Destination of edge (358 -> 359) to worklist

Adding Destination of edge (358 -> 364) to worklist


Simulating block 359

Visiting statement:
D.44619_889 = attr_32->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44619_889 == 0B)
which is likely CONSTANT
Adding Destination of edge (359 -> 362) to worklist

Adding Destination of edge (359 -> 360) to worklist


Simulating statement (from ssa_edges): D.47939_1495 = *D.44619_889;

Simulating block 360

Visiting statement:
D.47939_1495 = *D.44619_889;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47939_1495 == 0)
which is likely CONSTANT
Adding Destination of edge (360 -> 361) to worklist


Simulating block 361

Simulating block 362

Visiting PHI node: D.47938_1496 = PHI <1(359), 1(360), 0(361)>

    Argument #0 (359 -> 362 executable)
	1	Value: CONSTANT 1

    Argument #1 (360 -> 362 executable)
	1	Value: CONSTANT 1

    Argument #2 (361 -> 362 executable)
	0	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47938_1541 = D.47938_1496;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47938_890 = D.47938_1541;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.47938_890 == 0)
which is likely CONSTANT
Adding Destination of edge (362 -> 363) to worklist


Simulating block 363

Visiting statement:
got_video_crypto_891 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>

Visiting PHI node: got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>

    Argument #0 (358 -> 364 executable)
	got_video_crypto_58	Value: CONSTANT 0

    Argument #1 (362 -> 364 executable)
	got_video_crypto_58	Value: CONSTANT 0

    Argument #2 (363 -> 364 executable)
	got_video_crypto_891	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>

Visiting PHI node: got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>

    Argument #0 (357 -> 365 executable)
	got_video_crypto_62	Value: CONSTANT 0

    Argument #1 (364 -> 365 not executable)

    PHI node value: CONSTANT 0


Simulating block 451

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 not executable)

    Argument #3 (152 -> 451 not executable)

    Argument #4 (186 -> 451 not executable)

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 not executable)

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 not executable)

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 132

Visiting statement:
D.44481_412 = smh_186->session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44482_413 = D.44481_412->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44723_414 != 0)
which is likely CONSTANT
Adding Destination of edge (132 -> 137) to worklist


Simulating block 133

Visiting statement:
D.44530_415 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44724_416 == 0)
which is likely CONSTANT
Adding Destination of edge (133 -> 134) to worklist


Simulating block 168

Visiting statement:
D.44619_510 = attr_31->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44619_510 != 0B)
which is likely CONSTANT
Adding Destination of edge (168 -> 169) to worklist


Simulating block 169

Visiting statement:
D.44530_511 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44619_512 = attr_31->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44619_513 = attr_31->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.47890_1526 = D.47890_1471;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.47890_514 = D.47890_1526;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44799_515 = (short unsigned int) D.47890_514;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_516 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44800_517 == 0B)
which is likely CONSTANT
Adding Destination of edge (169 -> 170) to worklist

Adding Destination of edge (169 -> 188) to worklist


Simulating block 170

Visiting statement:
D.44471_518 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 171

Visiting statement:
D.44590_519 = attr_31->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44805_520 == 0)
which is likely CONSTANT
Adding Destination of edge (171 -> 172) to worklist

Adding Destination of edge (171 -> 174) to worklist


Simulating block 172

Visiting statement:
D.44619_521 = attr_31->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44619_521 != 0B)
which is likely CONSTANT
Adding Destination of edge (172 -> 173) to worklist


Simulating block 173

Visiting statement:
D.44619_522 = attr_31->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
ptime_1528 = ptime_1472;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
ptime_523 = ptime_1528;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>

Visiting PHI node: ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>

    Argument #0 (170 -> 188 executable)
	ptime_35	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 195

Visiting statement:
if (connection_124 == 0B)
which is likely CONSTANT
Adding Destination of edge (195 -> 196) to worklist

Adding Destination of edge (195 -> 197) to worklist


Simulating block 163

Visiting statement:
got_crypto_505 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>

Visiting PHI node: got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>

    Argument #0 (158 -> 164 executable)
	got_crypto_51	Value: CONSTANT 0

    Argument #1 (162 -> 164 executable)
	got_crypto_51	Value: CONSTANT 0

    Argument #2 (163 -> 164 executable)
	got_crypto_505	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>

Visiting PHI node: got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>

    Argument #0 (157 -> 165 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #1 (164 -> 165 executable)
	got_crypto_50	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>

Visiting PHI node: got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>

    Argument #0 (155 -> 166 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #1 (156 -> 166 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #2 (165 -> 166 executable)
	got_crypto_51	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>

Visiting PHI node: got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>

    Argument #0 (166 -> 189 executable)
	got_crypto_52	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (188 -> 189 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (got_crypto_54 <= 0)

Simulating statement (from ssa_edges): got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>

Visiting PHI node: got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>

    Argument #0 (170 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (173 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (176 -> 188 not executable)

    Argument #3 (177 -> 188 not executable)

    Argument #4 (178 -> 188 not executable)

    Argument #5 (182 -> 188 not executable)

    Argument #6 (187 -> 188 not executable)

    Argument #7 (169 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>

Visiting PHI node: got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>

    Argument #0 (166 -> 189 executable)
	got_crypto_52	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (188 -> 189 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): D.44834_549 = got_crypto_54 == -1;

Visiting statement:
D.44834_549 = got_crypto_54 == -1;
which is likely CONSTANT

Simulating statement (from ssa_edges): D.45003_714 = got_crypto_54 <= 0;

Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>

Visiting PHI node: got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>

    Argument #0 (158 -> 164 executable)
	got_crypto_51	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (162 -> 164 executable)
	got_crypto_51	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (163 -> 164 executable)
	got_crypto_505	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 164

Visiting PHI node: got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>

    Argument #0 (158 -> 164 executable)
	got_crypto_51	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (162 -> 164 executable)
	got_crypto_51	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (163 -> 164 executable)
	got_crypto_505	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 426

Visiting statement:
D.45001_1022 = smh_186->crypto_mode;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45002_1023 = D.45001_1022 == 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.45266_1024 = got_video_crypto_62 <= 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.45267_1025 = D.45002_1023 && D.45266_1024;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45267_1025 != 0)
which is likely CONSTANT
Adding Destination of edge (426 -> 427) to worklist

Adding Destination of edge (426 -> 428) to worklist


Simulating block 427

Visiting statement:
vmatch_1026 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
m_idx_1027 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>

Visiting PHI node: m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>

    Argument #0 (426 -> 428 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (427 -> 428 executable)
	m_idx_1027	Value: CONSTANT 0

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (m_idx_112 != 0)

Simulating statement (from ssa_edges): if (j_141 < m_idx_112)

Simulating statement (from ssa_edges): m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

Visiting PHI node: m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #3 (428 -> 449 not executable)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating block 366

Visiting PHI node: got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>

    Argument #0 (355 -> 366 executable)
	got_video_crypto_62	Value: CONSTANT 0

    Argument #1 (356 -> 366 executable)
	got_video_crypto_62	Value: CONSTANT 0

    Argument #2 (365 -> 366 executable)
	got_video_crypto_58	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting statement:
attr_893 = m_28->m_attributes;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (366 -> 401) to worklist


Simulating statement (from ssa_edges): attr_33 = PHI <attr_893(366), attr_978(400)>

Visiting PHI node: attr_33 = PHI <attr_893(366), attr_978(400)>

    Argument #0 (366 -> 401 executable)
	attr_893	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (attr_33 != 0B)

Simulating statement (from ssa_edges): D.44590_894 = attr_33->a_name;

Simulating statement (from ssa_edges): D.44619_896 = attr_33->a_value;

Simulating statement (from ssa_edges): D.44590_897 = attr_33->a_name;

Simulating statement (from ssa_edges): D.44619_899 = attr_33->a_value;

Simulating statement (from ssa_edges): D.44619_901 = attr_33->a_value;

Simulating statement (from ssa_edges): D.44590_906 = attr_33->a_name;

Simulating statement (from ssa_edges): D.44619_908 = attr_33->a_value;

Simulating statement (from ssa_edges): __s1_910 = attr_33->a_value;

Simulating statement (from ssa_edges): D.44619_949 = attr_33->a_value;

Simulating statement (from ssa_edges): D.44619_953 = attr_33->a_value;

Simulating statement (from ssa_edges): D.44619_954 = attr_33->a_value;

Simulating statement (from ssa_edges): D.44590_960 = attr_33->a_name;

Simulating statement (from ssa_edges): D.44619_962 = attr_33->a_value;

Simulating statement (from ssa_edges): crypto_975 = attr_33->a_value;

Simulating statement (from ssa_edges): attr_978 = attr_33->a_next;

Simulating block 401

Visiting PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>

    Argument #0 (366 -> 401 executable)
	got_video_crypto_59	Value: CONSTANT 0

    Argument #1 (400 -> 401 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (attr_33 != 0B)
which is likely CONSTANT
Adding Destination of edge (401 -> 367) to worklist

Adding Destination of edge (401 -> 402) to worklist


Simulating statement (from ssa_edges): if (got_video_crypto_61 == 0)

Simulating statement (from ssa_edges): got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>

    Argument #0 (368 -> 400 not executable)

    Argument #1 (376 -> 400 not executable)

    Argument #2 (388 -> 400 not executable)

    Argument #3 (389 -> 400 not executable)

    Argument #4 (390 -> 400 not executable)

    Argument #5 (394 -> 400 not executable)

    Argument #6 (399 -> 400 not executable)

    Argument #7 (373 -> 400 not executable)

    Argument #8 (387 -> 400 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>

Visiting PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>

    Argument #0 (354 -> 425 executable)
	got_video_crypto_64	Value: CONSTANT 0

    Argument #1 (424 -> 425 not executable)

    PHI node value: CONSTANT 0


Simulating block 367

Visiting statement:
D.44590_894 = attr_33->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45151_895 == 0)
which is likely CONSTANT
Adding Destination of edge (367 -> 368) to worklist

Adding Destination of edge (367 -> 369) to worklist


Simulating block 368

Visiting statement:
D.44619_896 = attr_33->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44619_896 != 0B)
which is likely CONSTANT
Adding Destination of edge (368 -> 400) to worklist


Simulating block 364

Visiting PHI node: got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>

    Argument #0 (358 -> 364 executable)
	got_video_crypto_58	Value: CONSTANT 0

    Argument #1 (362 -> 364 executable)
	got_video_crypto_58	Value: CONSTANT 0

    Argument #2 (363 -> 364 executable)
	got_video_crypto_891	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting statement:
attr_892 = attr_32->a_next;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (364 -> 365) to worklist


Simulating block 365

Visiting PHI node: got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>

    Argument #0 (357 -> 365 executable)
	got_video_crypto_62	Value: CONSTANT 0

    Argument #1 (364 -> 365 executable)
	got_video_crypto_57	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>

Visiting PHI node: got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>

    Argument #0 (355 -> 366 executable)
	got_video_crypto_62	Value: CONSTANT 0

    Argument #1 (356 -> 366 executable)
	got_video_crypto_62	Value: CONSTANT 0

    Argument #2 (365 -> 366 executable)
	got_video_crypto_58	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>

Visiting PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>

    Argument #0 (366 -> 401 executable)
	got_video_crypto_59	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (400 -> 401 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (got_video_crypto_61 == 0)

Simulating statement (from ssa_edges): got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>

    Argument #0 (368 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (376 -> 400 not executable)

    Argument #2 (388 -> 400 not executable)

    Argument #3 (389 -> 400 not executable)

    Argument #4 (390 -> 400 not executable)

    Argument #5 (394 -> 400 not executable)

    Argument #6 (399 -> 400 not executable)

    Argument #7 (373 -> 400 not executable)

    Argument #8 (387 -> 400 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>

Visiting PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>

    Argument #0 (366 -> 401 executable)
	got_video_crypto_59	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (400 -> 401 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>

Visiting PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>

    Argument #0 (354 -> 425 executable)
	got_video_crypto_64	Value: CONSTANT 0

    Argument #1 (424 -> 425 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>

Visiting PHI node: got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>

    Argument #0 (358 -> 364 executable)
	got_video_crypto_58	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (362 -> 364 executable)
	got_video_crypto_58	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (363 -> 364 executable)
	got_video_crypto_891	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 137

Visiting statement:
pass_423 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (137 -> 138) to worklist


Simulating statement (from ssa_edges): pass_127 = PHI <pass_126(136), pass_423(137)>

Visiting PHI node: pass_127 = PHI <pass_126(136), pass_423(137)>

    Argument #0 (136 -> 138 not executable)

    Argument #1 (137 -> 138 executable)
	pass_423	Value: CONSTANT 0

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (pass_127 != 0)

Simulating block 134

Visiting statement:
D.44530_417 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44726_418 != 0)
which is likely CONSTANT
Adding Destination of edge (134 -> 137) to worklist

Adding Destination of edge (134 -> 135) to worklist


Simulating block 135

Visiting statement:
D.44530_419 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44728_420 != 0)
which is likely CONSTANT
Adding Destination of edge (135 -> 136) to worklist


Simulating block 136

Visiting statement:
D.44605_421 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44730_422 == 0)
which is likely CONSTANT

Simulating block 137

Simulating block 188

Visiting PHI node: maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>

    Argument #0 (170 -> 188 executable)
	maxptime_39	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting PHI node: got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>

    Argument #0 (170 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (173 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (176 -> 188 not executable)

    Argument #3 (177 -> 188 not executable)

    Argument #4 (178 -> 188 not executable)

    Argument #5 (182 -> 188 not executable)

    Argument #6 (187 -> 188 not executable)

    Argument #7 (169 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting statement:
attr_548 = attr_31->a_next;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (188 -> 189) to worklist


Simulating block 174

Visiting statement:
D.44590_524 = attr_31->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44810_525 == 0)
which is likely CONSTANT
Adding Destination of edge (174 -> 175) to worklist

Adding Destination of edge (174 -> 177) to worklist


Simulating block 196

Visiting statement:
match_557 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (196 -> 451) to worklist


Simulating statement (from ssa_edges): match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 not executable)

    Argument #3 (152 -> 451 not executable)

    Argument #4 (186 -> 451 not executable)

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 executable)
	match_557	Value: CONSTANT 0

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 not executable)

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 197

Visiting statement:
x_558 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
map_559 = m_28->m_rtpmaps;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (197 -> 281) to worklist


Simulating statement (from ssa_edges): map_128 = PHI <map_559(197), map_711(280)>

Visiting PHI node: map_128 = PHI <map_559(197), map_711(280)>

    Argument #0 (197 -> 281 executable)
	map_559	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (map_128 != 0B)

Simulating statement (from ssa_edges): rm_encoding_561 = map_128->rm_encoding;

Simulating statement (from ssa_edges): D.44854_564 = map_128->rm_rate;

Simulating statement (from ssa_edges): D.44856_567 = map_128->rm_pt;

Simulating statement (from ssa_edges): D.44856_572 = map_128->rm_pt;

Simulating statement (from ssa_edges): D.44856_586 = map_128->rm_pt;

Simulating statement (from ssa_edges): D.44856_590 = map_128->rm_pt;

Simulating statement (from ssa_edges): D.44889_593 = map_128->rm_encoding;

Simulating statement (from ssa_edges): remote_codec_rate_596 = map_128->rm_rate;

Simulating statement (from ssa_edges): D.44893_598 = map_128->rm_fmtp;

Simulating statement (from ssa_edges): D.44889_600 = map_128->rm_encoding;

Simulating statement (from ssa_edges): D.44889_604 = map_128->rm_encoding;

Simulating statement (from ssa_edges): D.44889_608 = map_128->rm_encoding;

Simulating statement (from ssa_edges): D.44893_609 = map_128->rm_fmtp;

Simulating statement (from ssa_edges): D.44854_610 = map_128->rm_rate;

Simulating statement (from ssa_edges): D.44856_634 = map_128->rm_pt;

Simulating statement (from ssa_edges): D.44889_642 = map_128->rm_encoding;

Simulating statement (from ssa_edges): D.44856_649 = map_128->rm_pt;

Simulating statement (from ssa_edges): D.44856_651 = map_128->rm_pt;

Simulating statement (from ssa_edges): D.44889_669 = map_128->rm_encoding;

Simulating statement (from ssa_edges): D.44889_671 = map_128->rm_encoding;

Simulating statement (from ssa_edges): D.44889_680 = map_128->rm_encoding;

Simulating statement (from ssa_edges): D.44889_682 = map_128->rm_encoding;

Simulating statement (from ssa_edges): map_711 = map_128->rm_next;

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 not executable)

    Argument #1 (210 -> 280 not executable)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Simulating block 428

Visiting PHI node: m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>

    Argument #0 (426 -> 428 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (427 -> 428 executable)
	m_idx_1027	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting statement:
if (m_idx_112 != 0)
which is likely CONSTANT
Adding Destination of edge (428 -> 449) to worklist


Simulating block 402

Visiting statement:
rm_encoding_979 = map_136->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (rm_encoding_979 == 0B)
which is likely CONSTANT
Adding Destination of edge (402 -> 403) to worklist

Adding Destination of edge (402 -> 404) to worklist


Simulating statement (from ssa_edges): rm_encoding_137 = PHI <rm_encoding_979(402), rm_encoding_980(403)>

Visiting PHI node: rm_encoding_137 = PHI <rm_encoding_979(402), rm_encoding_980(403)>

    Argument #0 (402 -> 404 executable)
	rm_encoding_979	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 403

Visiting statement:
rm_encoding_980 = "";
which is likely CONSTANT
Lattice value changed to CONSTANT "".  Adding SSA edges to worklist.

Simulating block 369

Visiting statement:
D.44590_897 = attr_33->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45154_898 == 0)
which is likely CONSTANT
Adding Destination of edge (369 -> 370) to worklist

Adding Destination of edge (369 -> 377) to worklist


Simulating block 370

Visiting statement:
D.44619_899 = attr_33->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44619_899 == 0B)
which is likely CONSTANT
Adding Destination of edge (370 -> 373) to worklist

Adding Destination of edge (370 -> 371) to worklist


Simulating statement (from ssa_edges): D.47943_1497 = *D.44619_899;

Simulating block 371

Visiting statement:
D.47943_1497 = *D.44619_899;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47943_1497 == 0)
which is likely CONSTANT
Adding Destination of edge (371 -> 372) to worklist


Simulating block 372

Simulating block 373

Visiting PHI node: D.47942_1498 = PHI <1(370), 1(371), 0(372)>

    Argument #0 (370 -> 373 executable)
	1	Value: CONSTANT 1

    Argument #1 (371 -> 373 executable)
	1	Value: CONSTANT 1

    Argument #2 (372 -> 373 executable)
	0	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47942_1542 = D.47942_1498;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47942_900 = D.47942_1542;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.47942_900 == 0)
which is likely CONSTANT
Adding Destination of edge (373 -> 374) to worklist


Simulating block 374

Visiting statement:
D.44619_901 = attr_33->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45160_902 != 0B)
which is likely CONSTANT
Adding Destination of edge (374 -> 375) to worklist

Adding Destination of edge (374 -> 376) to worklist


Simulating block 375

Visiting statement:
D.45163_903 = v_engine_189->fir;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45164_904 = D.45163_903 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating block 400

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>

    Argument #0 (368 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (376 -> 400 not executable)

    Argument #2 (388 -> 400 not executable)

    Argument #3 (389 -> 400 not executable)

    Argument #4 (390 -> 400 not executable)

    Argument #5 (394 -> 400 not executable)

    Argument #6 (399 -> 400 not executable)

    Argument #7 (373 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #8 (387 -> 400 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting statement:
attr_978 = attr_33->a_next;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (400 -> 401) to worklist


Simulating block 138

Visiting PHI node: pass_127 = PHI <pass_126(136), pass_423(137)>

    Argument #0 (136 -> 138 executable)
	pass_126	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (pass_127 != 0)
which is likely CONSTANT
Adding Destination of edge (138 -> 139) to worklist

Adding Destination of edge (138 -> 152) to worklist


Simulating block 139

Visiting statement:
if (D.44733_424 == 0)
which is likely CONSTANT
Adding Destination of edge (139 -> 140) to worklist


Simulating block 140

Visiting statement:
other_session.89_425 = other_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44605_427 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44605_429 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44737_431 == 0)
which is likely CONSTANT
Adding Destination of edge (140 -> 141) to worklist

Adding Destination of edge (140 -> 142) to worklist


Simulating block 141

Visiting statement:
D.44530_432 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
other_session.89_435 = other_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
pass_436 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
match_437 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 executable)
	match_437	Value: CONSTANT 0

    Argument #3 (152 -> 451 not executable)

    Argument #4 (186 -> 451 not executable)

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 executable)
	match_557	Value: CONSTANT 0

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 not executable)

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 189

Visiting PHI node: got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>

    Argument #0 (166 -> 189 executable)
	got_crypto_52	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (188 -> 189 executable)
	got_crypto_53	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 175

Visiting statement:
D.44619_526 = attr_31->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44619_526 != 0B)
which is likely CONSTANT
Adding Destination of edge (175 -> 176) to worklist


Simulating block 176

Visiting statement:
D.44619_527 = attr_31->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
maxptime_1530 = maxptime_1473;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
maxptime_528 = maxptime_1530;
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (176 -> 188) to worklist


Simulating block 177

Visiting statement:
if (got_crypto_54 <= 0)
which is likely CONSTANT
Adding Destination of edge (177 -> 178) to worklist


Simulating block 178

Visiting statement:
D.44590_529 = attr_31->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44815_530 == 0)
which is likely CONSTANT
Adding Destination of edge (178 -> 179) to worklist


Simulating block 179

Visiting statement:
D.44619_531 = attr_31->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44619_531 == 0B)
which is likely CONSTANT
Adding Destination of edge (179 -> 182) to worklist

Adding Destination of edge (179 -> 180) to worklist


Simulating statement (from ssa_edges): D.47900_1474 = *D.44619_531;

Simulating block 180

Visiting statement:
D.47900_1474 = *D.44619_531;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47900_1474 == 0)
which is likely CONSTANT
Adding Destination of edge (180 -> 181) to worklist


Simulating block 181

Simulating block 182

Visiting PHI node: D.47899_1475 = PHI <1(179), 1(180), 0(181)>

    Argument #0 (179 -> 182 executable)
	1	Value: CONSTANT 1

    Argument #1 (180 -> 182 executable)
	1	Value: CONSTANT 1

    Argument #2 (181 -> 182 executable)
	0	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47899_1531 = D.47899_1475;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47899_532 = D.47899_1531;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.47899_532 == 0)
which is likely CONSTANT
Adding Destination of edge (182 -> 183) to worklist


Simulating block 183

Visiting statement:
D.44471_533 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44821_534 = D.44471_533->ndlb;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44822_535 = D.44821_534 & 4;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000004).  Adding SSA edges to worklist.

Visiting statement:
if (D.44822_535 == 0)
which is likely CONSTANT
Adding Destination of edge (183 -> 184) to worklist

Adding Destination of edge (183 -> 187) to worklist


Simulating block 184

Visiting statement:
D.44530_536 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44826_538 == 0)
which is likely CONSTANT
Adding Destination of edge (184 -> 185) to worklist


Simulating block 185

Visiting statement:
D.44666_539 = m_28->m_proto;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44829_540 = D.44666_539 != 257;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44830_541 = got_webrtc_78 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44831_542 = D.44829_540 && D.44830_541;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44831_542 != 0)
which is likely CONSTANT
Adding Destination of edge (185 -> 186) to worklist


Simulating block 186

Visiting statement:
match_543 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 executable)
	match_437	Value: CONSTANT 0

    Argument #3 (152 -> 451 not executable)

    Argument #4 (186 -> 451 executable)
	match_543	Value: CONSTANT 0

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 executable)
	match_557	Value: CONSTANT 0

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 not executable)

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 451

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 executable)
	match_437	Value: CONSTANT 0

    Argument #3 (152 -> 451 not executable)

    Argument #4 (186 -> 451 executable)
	match_543	Value: CONSTANT 0

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 executable)
	match_557	Value: CONSTANT 0

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 not executable)

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 281

Visiting PHI node: match_8 = PHI <match_16(197), match_7(280)>

    Argument #0 (197 -> 281 executable)
	match_16	Value: CONSTANT 0

    Argument #1 (280 -> 281 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: best_te_20 = PHI <best_te_23(197), best_te_19(280)>

    Argument #0 (197 -> 281 executable)
	best_te_23	Value: CONSTANT 0

    Argument #1 (280 -> 281 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: cng_pt_25 = PHI <cng_pt_27(197), cng_pt_24(280)>

    Argument #0 (197 -> 281 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #1 (280 -> 281 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: codec_ms_92 = PHI <codec_ms_95(197), codec_ms_91(280)>

    Argument #0 (197 -> 281 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #1 (280 -> 281 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>

    Argument #0 (197 -> 281 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #1 (280 -> 281 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>

    Argument #0 (197 -> 281 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #1 (280 -> 281 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (map_128 != 0B)
which is likely CONSTANT
Adding Destination of edge (281 -> 198) to worklist

Adding Destination of edge (281 -> 282) to worklist


Simulating statement (from ssa_edges): nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>

Visiting PHI node: nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	nm_idx_118	Value: CONSTANT 0

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>

Visiting PHI node: nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>

    Argument #0 (282 -> 284 not executable)

    Argument #1 (283 -> 284 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>

Visiting PHI node: nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>

    Argument #0 (204 -> 280 not executable)

    Argument #1 (210 -> 280 not executable)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 not executable)

    Argument #1 (277 -> 278 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): m_idx_105 = PHI <m_idx_102(279), m_idx_104(281)>

Visiting PHI node: m_idx_105 = PHI <m_idx_102(279), m_idx_104(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	m_idx_104	Value: CONSTANT 0

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>

Visiting PHI node: m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>

    Argument #0 (282 -> 284 not executable)

    Argument #1 (283 -> 284 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>

Visiting PHI node: m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>

    Argument #0 (204 -> 280 not executable)

    Argument #1 (210 -> 280 not executable)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): m_idx_101 = PHI <m_idx_104(241), m_idx_100(277)>

Visiting PHI node: m_idx_101 = PHI <m_idx_104(241), m_idx_100(277)>

    Argument #0 (241 -> 278 not executable)

    Argument #1 (277 -> 278 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>

Visiting PHI node: codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	codec_ms_92	Value: CONSTANT 0

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>

Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>

Visiting PHI node: codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>

    Argument #0 (204 -> 280 not executable)

    Argument #1 (210 -> 280 not executable)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): if (cng_pt_25 == 0)

Simulating statement (from ssa_edges): cng_pt_24 = PHI <cng_pt_25(204), cng_pt_573(210), cng_pt_25(212), cng_pt_25(214), cng_pt_25(279)>

Visiting PHI node: cng_pt_24 = PHI <cng_pt_25(204), cng_pt_573(210), cng_pt_25(212), cng_pt_25(214), cng_pt_25(279)>

    Argument #0 (204 -> 280 not executable)

    Argument #1 (210 -> 280 not executable)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>

Visiting PHI node: cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): if (best_te_20 == 0)

Simulating statement (from ssa_edges): best_te_18 = PHI <best_te_20(202), best_te_568(203)>

Visiting PHI node: best_te_18 = PHI <best_te_20(202), best_te_568(203)>

    Argument #0 (202 -> 204 not executable)

    Argument #1 (203 -> 204 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): best_te_19 = PHI <best_te_18(204), best_te_20(210), best_te_20(212), best_te_20(214), best_te_20(279)>

Visiting PHI node: best_te_19 = PHI <best_te_18(204), best_te_20(210), best_te_20(212), best_te_20(214), best_te_20(279)>

    Argument #0 (204 -> 280 not executable)

    Argument #1 (210 -> 280 not executable)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): if (best_te_20 == 0)

Simulating statement (from ssa_edges): best_te_21 = PHI <best_te_20(335), best_te_20(337), best_te_833(338)>

Visiting PHI node: best_te_21 = PHI <best_te_20(335), best_te_20(337), best_te_833(338)>

    Argument #0 (335 -> 339 not executable)

    Argument #1 (337 -> 339 not executable)

    Argument #2 (338 -> 339 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): match_9 = PHI <match_6(279), match_8(281)>

Visiting PHI node: match_9 = PHI <match_6(279), match_8(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	match_8	Value: CONSTANT 0

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_10 = PHI <match_9(282), match_716(283)>

Visiting PHI node: match_10 = PHI <match_9(282), match_716(283)>

    Argument #0 (282 -> 284 not executable)

    Argument #1 (283 -> 284 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): if (match_8 != 0)

Simulating statement (from ssa_edges): match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>

Visiting PHI node: match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>

    Argument #0 (204 -> 280 not executable)

    Argument #1 (210 -> 280 not executable)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): match_5 = PHI <match_8(241), match_4(277)>

Visiting PHI node: match_5 = PHI <match_8(241), match_4(277)>

    Argument #0 (241 -> 278 not executable)

    Argument #1 (277 -> 278 not executable)

    PHI node value: UNDEFINED


Simulating block 198

Visiting statement:
map_bit_rate_560 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
rm_encoding_561 = map_128->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (rm_encoding_561 == 0B)
which is likely CONSTANT
Adding Destination of edge (198 -> 199) to worklist

Adding Destination of edge (198 -> 200) to worklist


Simulating statement (from ssa_edges): rm_encoding_130 = PHI <rm_encoding_561(198), rm_encoding_562(199)>

Visiting PHI node: rm_encoding_130 = PHI <rm_encoding_561(198), rm_encoding_562(199)>

    Argument #0 (198 -> 200 executable)
	rm_encoding_561	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 199

Visiting statement:
rm_encoding_562 = "";
which is likely CONSTANT
Lattice value changed to CONSTANT "".  Adding SSA edges to worklist.

Simulating block 449

Visiting PHI node: match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	best_te_23	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	best_te_23	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	best_te_23	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_video_crypto_64	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_video_crypto_64	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	got_video_crypto_62	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	m_idx_112	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	nm_idx_876	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating block 404

Visiting statement:
i_981 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (404 -> 423) to worklist


Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (i_139 < total_codecs_85)

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Simulating block 377

Visiting statement:
D.44590_906 = attr_33->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45168_907 == 0)
which is likely CONSTANT
Adding Destination of edge (377 -> 378) to worklist

Adding Destination of edge (377 -> 389) to worklist


Simulating block 378

Visiting statement:
D.44619_908 = attr_33->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44619_908 != 0B)
which is likely CONSTANT
Adding Destination of edge (378 -> 379) to worklist


Simulating block 379

Visiting statement:
__s2_len_909 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
if (__s2_len_909 <= 3)
which is likely CONSTANT
Adding Destination of edge (379 -> 380) to worklist


Simulating statement (from ssa_edges): D.45179_917 = __s2_len_909 != 0;

Simulating statement (from ssa_edges): D.45190_927 = __s2_len_909 > 1;

Simulating statement (from ssa_edges): D.45200_937 = __s2_len_909 > 2;

Simulating block 380

Visiting statement:
__s1_910 = attr_33->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45174_911 = *__s1_910;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45175_912 = (int) D.45174_911;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45176_913 = "1";
which is likely CONSTANT
Lattice value changed to CONSTANT "1".  Adding SSA edges to worklist.

Visiting statement:
D.45177_914 = MEM[(const unsigned char *)D.45176_913];
which is likely CONSTANT
Lattice value changed to CONSTANT 49.  Adding SSA edges to worklist.

Visiting statement:
D.45178_915 = (int) D.45177_914;
which is likely CONSTANT
Lattice value changed to CONSTANT 49.  Adding SSA edges to worklist.

Visiting statement:
__result_916 = D.45175_912 - D.45178_915;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45179_917 = __s2_len_909 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.45180_918 = __result_916 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.45181_919 = D.45179_917 && D.45180_918;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45181_919 != 0)
which is likely CONSTANT
Adding Destination of edge (380 -> 381) to worklist

Adding Destination of edge (380 -> 384) to worklist


Simulating statement (from ssa_edges): __result_140 = PHI <__result_916(380), __result_926(381), __result_936(382), __result_946(383)>

Visiting PHI node: __result_140 = PHI <__result_916(380), __result_926(381), __result_936(382), __result_946(383)>

    Argument #0 (380 -> 384 executable)
	__result_916	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): __result_947 = __result_140;

Simulating statement (from ssa_edges): D.45184_920 = __s1_910 + 1;

Simulating statement (from ssa_edges): D.45194_930 = __s1_910 + 2;

Simulating statement (from ssa_edges): D.45204_940 = __s1_910 + 3;

Simulating block 381

Visiting statement:
D.45184_920 = __s1_910 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000ffffffff).  Adding SSA edges to worklist.

Visiting statement:
D.45185_921 = *D.45184_920;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45186_922 = (int) D.45185_921;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45187_923 = &"1"[1];
which is likely CONSTANT
Lattice value changed to CONSTANT &"1"[1].  Adding SSA edges to worklist.

Visiting statement:
D.45188_924 = MEM[(const unsigned char *)D.45187_923];
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
D.45189_925 = (int) D.45188_924;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
__result_926 = D.45186_922 - D.45189_925;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45190_927 = __s2_len_909 > 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
D.45180_928 = __result_926 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.45191_929 = D.45190_927 && D.45180_928;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (D.45191_929 != 0)
which is likely CONSTANT

Simulating block 376

Visiting statement:
D.44471_905 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (376 -> 400) to worklist


Simulating block 401

Visiting PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>

    Argument #0 (366 -> 401 executable)
	got_video_crypto_59	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (400 -> 401 executable)
	got_video_crypto_60	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 152

Visiting statement:
match_492 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.
Adding Destination of edge (152 -> 451) to worklist


Simulating statement (from ssa_edges): match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 executable)
	match_437	Value: CONSTANT 0

    Argument #3 (152 -> 451 executable)
	match_492	Value: CONSTANT 1

    Argument #4 (186 -> 451 executable)
	match_543	Value: CONSTANT 0

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 executable)
	match_557	Value: CONSTANT 0

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 not executable)

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 142

Visiting statement:
D.44530_438 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44743_440 != 0)
which is likely CONSTANT
Adding Destination of edge (142 -> 143) to worklist

Adding Destination of edge (142 -> 145) to worklist


Simulating block 143

Visiting statement:
D.44530_441 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44747_443 != 0)
which is likely CONSTANT
Adding Destination of edge (143 -> 144) to worklist


Simulating block 144

Simulating block 188

Visiting PHI node: got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>

    Argument #0 (170 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (173 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (176 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (177 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (178 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (182 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #6 (187 -> 188 not executable)

    Argument #7 (169 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 187

Visiting statement:
crypto_544 = attr_31->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
crypto_tag_1533 = crypto_tag_1476;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
crypto_tag_545 = crypto_tag_1533;
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (187 -> 188) to worklist


Simulating block 282

Visiting PHI node: match_9 = PHI <match_6(279), match_8(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	match_8	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	codec_ms_92	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: m_idx_105 = PHI <m_idx_102(279), m_idx_104(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	m_idx_104	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	nm_idx_118	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting statement:
D.45001_712 = smh_186->crypto_mode;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45002_713 = D.45001_712 == 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.45003_714 = got_crypto_54 <= 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.45004_715 = D.45002_713 && D.45003_714;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45004_715 != 0)
which is likely CONSTANT
Adding Destination of edge (282 -> 283) to worklist

Adding Destination of edge (282 -> 284) to worklist


Simulating block 283

Visiting statement:
match_716 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
nm_idx_717 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
m_idx_718 = nm_idx_717;
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>

Visiting PHI node: m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>

    Argument #0 (282 -> 284 executable)
	m_idx_105	Value: CONSTANT 0

    Argument #1 (283 -> 284 executable)
	m_idx_718	Value: CONSTANT 0

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45007_719 = m_idx_106 == 0;

Simulating statement (from ssa_edges): m_idx_107 = PHI <m_idx_106(284), m_idx_744(294), m_idx_106(296)>

Visiting PHI node: m_idx_107 = PHI <m_idx_106(284), m_idx_744(294), m_idx_106(296)>

    Argument #0 (284 -> 297 not executable)

    Argument #1 (294 -> 297 not executable)

    Argument #2 (296 -> 297 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): m_idx_744 = m_idx_106 + 1;

Simulating statement (from ssa_edges): nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>

Visiting PHI node: nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>

    Argument #0 (282 -> 284 executable)
	nm_idx_119	Value: CONSTANT 0

    Argument #1 (283 -> 284 executable)
	nm_idx_717	Value: CONSTANT 0

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45008_720 = nm_idx_120 != 0;

Simulating statement (from ssa_edges): if (j_133 < nm_idx_120)

Simulating statement (from ssa_edges): nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	nm_idx_876	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): match_10 = PHI <match_9(282), match_716(283)>

Visiting PHI node: match_10 = PHI <match_9(282), match_716(283)>

    Argument #0 (282 -> 284 executable)
	match_9	Value: CONSTANT 0

    Argument #1 (283 -> 284 executable)
	match_716	Value: CONSTANT 0

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_11 = PHI <match_10(284), match_741(294), match_10(296)>

Visiting PHI node: match_11 = PHI <match_10(284), match_741(294), match_10(296)>

    Argument #0 (284 -> 297 not executable)

    Argument #1 (294 -> 297 not executable)

    Argument #2 (296 -> 297 not executable)

    PHI node value: UNDEFINED


Simulating block 200

Visiting statement:
if (D.44848_563 == 0)
which is likely CONSTANT
Adding Destination of edge (200 -> 201) to worklist

Adding Destination of edge (200 -> 205) to worklist


Simulating block 201

Visiting statement:
if (best_te_20 == 0)
which is likely CONSTANT
Adding Destination of edge (201 -> 203) to worklist


Simulating block 423

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 not executable)

    PHI node value: CONSTANT 0


Visiting statement:
if (i_139 < total_codecs_85)
which is likely CONSTANT
Adding Destination of edge (423 -> 405) to worklist

Adding Destination of edge (423 -> 424) to worklist


Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 not executable)

    Argument #1 (409 -> 422 not executable)

    Argument #2 (421 -> 422 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 not executable)

    Argument #1 (419 -> 421 not executable)

    Argument #2 (420 -> 421 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Simulating statement (from ssa_edges): m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>

Visiting PHI node: m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>

    Argument #0 (354 -> 425 executable)
	m_idx_877	Value: CONSTANT 0

    Argument #1 (424 -> 425 not executable)

    PHI node value: CONSTANT 0


Simulating block 405

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
D.45237_984 = codec_array_84 + D.45236_983;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000ffffffff).  Adding SSA edges to worklist.

Visiting statement:
imp_985 = *D.45237_984;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45238_986 = imp_985->codec_type;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45238_986 != 1)
which is likely CONSTANT
Adding Destination of edge (405 -> 406) to worklist

Adding Destination of edge (405 -> 407) to worklist


Simulating statement (from ssa_edges): D.45249_993 = imp_985->iananame;

Simulating statement (from ssa_edges): D.45250_994 = imp_985->ianacode;

Simulating statement (from ssa_edges): D.45250_1007 = imp_985->ianacode;

Simulating statement (from ssa_edges): D.45249_1010 = imp_985->iananame;

Simulating statement (from ssa_edges): D.45263_1014 = imp_985->samples_per_second;

Simulating statement (from ssa_edges): D.45249_1015 = imp_985->iananame;

Simulating statement (from ssa_edges): D.45250_1016 = imp_985->ianacode;

Simulating block 406
Adding Destination of edge (406 -> 422) to worklist


Simulating block 389

Visiting statement:
if (got_video_crypto_61 == 0)
which is likely CONSTANT
Adding Destination of edge (389 -> 390) to worklist


Simulating block 390

Visiting statement:
D.44590_960 = attr_33->a_name;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45219_961 == 0)
which is likely CONSTANT
Adding Destination of edge (390 -> 391) to worklist


Simulating block 391

Visiting statement:
D.44619_962 = attr_33->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44619_962 == 0B)
which is likely CONSTANT
Adding Destination of edge (391 -> 394) to worklist

Adding Destination of edge (391 -> 392) to worklist


Simulating statement (from ssa_edges): D.47950_1500 = *D.44619_962;

Simulating block 392

Visiting statement:
D.47950_1500 = *D.44619_962;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47950_1500 == 0)
which is likely CONSTANT
Adding Destination of edge (392 -> 393) to worklist


Simulating block 393

Simulating block 394

Visiting PHI node: D.47949_1501 = PHI <1(391), 1(392), 0(393)>

    Argument #0 (391 -> 394 executable)
	1	Value: CONSTANT 1

    Argument #1 (392 -> 394 executable)
	1	Value: CONSTANT 1

    Argument #2 (393 -> 394 executable)
	0	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47949_1545 = D.47949_1501;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47949_963 = D.47949_1545;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.47949_963 == 0)
which is likely CONSTANT
Adding Destination of edge (394 -> 395) to worklist


Simulating block 395

Visiting statement:
D.44471_964 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44821_965 = D.44471_964->ndlb;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44822_966 = D.44821_965 & 4;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000004).  Adding SSA edges to worklist.

Visiting statement:
if (D.44822_966 == 0)
which is likely CONSTANT
Adding Destination of edge (395 -> 396) to worklist

Adding Destination of edge (395 -> 399) to worklist


Simulating block 396

Visiting statement:
D.44530_967 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45228_969 == 0)
which is likely CONSTANT
Adding Destination of edge (396 -> 397) to worklist


Simulating block 397

Visiting statement:
D.44666_970 = m_28->m_proto;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44829_971 = D.44666_970 != 257;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44830_972 = got_webrtc_78 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44831_973 = D.44829_971 && D.44830_972;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44831_973 != 0)
which is likely CONSTANT
Adding Destination of edge (397 -> 398) to worklist


Simulating block 398

Visiting statement:
match_974 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 executable)
	match_437	Value: CONSTANT 0

    Argument #3 (152 -> 451 executable)
	match_492	Value: CONSTANT 1

    Argument #4 (186 -> 451 executable)
	match_543	Value: CONSTANT 0

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 executable)
	match_557	Value: CONSTANT 0

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 executable)
	match_974	Value: CONSTANT 0

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 384

Visiting statement:
__result_947 = __result_140;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
__result_948 = __result_947;
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (384 -> 386) to worklist


Simulating statement (from ssa_edges): __result_147 = PHI <__result_948(384), __result_950(385)>

Visiting PHI node: __result_147 = PHI <__result_948(384), __result_950(385)>

    Argument #0 (384 -> 386 executable)
	__result_948	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): __result_951 = __result_147;

Simulating block 386

Visiting statement:
__result_951 = __result_147;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (__result_951 == 0)
which is likely CONSTANT
Adding Destination of edge (386 -> 387) to worklist

Adding Destination of edge (386 -> 389) to worklist


Simulating block 387

Visiting statement:
D.44530_952 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44619_953 = attr_33->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44619_954 = attr_33->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.47946_1544 = D.47946_1499;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.47946_955 = D.47946_1544;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45213_956 = (short unsigned int) D.47946_955;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_957 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45214_958 = D.44471_957->rtcp_video_interval_msec;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45214_958 == 0B)
which is likely CONSTANT
Adding Destination of edge (387 -> 388) to worklist


Simulating block 388

Visiting statement:
D.44471_959 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 400

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>

    Argument #0 (368 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (376 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (388 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (389 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (390 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (394 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #6 (399 -> 400 not executable)

    Argument #7 (373 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #8 (387 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 451

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 executable)
	match_437	Value: CONSTANT 0

    Argument #3 (152 -> 451 executable)
	match_492	Value: CONSTANT 1

    Argument #4 (186 -> 451 executable)
	match_543	Value: CONSTANT 0

    Argument #5 (192 -> 451 not executable)

    Argument #6 (196 -> 451 executable)
	match_557	Value: CONSTANT 0

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 executable)
	match_974	Value: CONSTANT 0

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 145

Visiting statement:
D.44750_444 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44751_445 = t38_options_394->remote_ip;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44750_447 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44753_448 = t38_options_394->remote_port;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44756_449 = remote_host_428 != 0B;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44757_450 = remote_port_430 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44758_451 = D.44756_449 && D.44757_450;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44758_451 != 0)
which is likely CONSTANT
Adding Destination of edge (145 -> 146) to worklist

Adding Destination of edge (145 -> 149) to worklist


Simulating block 146

Visiting statement:
D.44750_452 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44760_453 = D.44750_452->remote_sdp_ip;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.39032_454 == 0)
which is likely CONSTANT
Adding Destination of edge (146 -> 147) to worklist


Simulating block 147

Visiting statement:
D.44750_455 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44762_456 = D.44750_455->remote_sdp_port;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44762_456 == remote_port_430)
which is likely VARYING
Adding Destination of edge (147 -> 148) to worklist


Simulating block 148

Visiting statement:
D.44530_457 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (148 -> 151) to worklist


Simulating block 151

Visiting statement:
other_session.89_481 = other_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44481_482 = smh_186->session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44482_483 = D.44481_482->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
other_session.89_484 = other_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44772_485 = other_session.89_484->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
other_session.89_486 = other_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
other_session.89_488 = other_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
other_session.89_490 = other_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
other_session.89_491 = other_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (151 -> 152) to worklist


Simulating block 152

Simulating block 188

Visiting PHI node: got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>

    Argument #0 (170 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (173 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (176 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (177 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (178 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (182 -> 188 executable)
	got_crypto_54	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #6 (187 -> 188 executable)
	got_crypto_547	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>

Visiting PHI node: got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>

    Argument #0 (166 -> 189 executable)
	got_crypto_52	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (188 -> 189 executable)
	got_crypto_53	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44834_549 = got_crypto_54 == -1;

Visiting statement:
D.44834_549 = got_crypto_54 == -1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45003_714 = got_crypto_54 <= 0;

Visiting statement:
D.45003_714 = got_crypto_54 <= 0;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): D.44836_551 = D.44834_549 && D.44835_550;

Visiting statement:
D.44836_551 = D.44834_549 && D.44835_550;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 284

Visiting PHI node: match_10 = PHI <match_9(282), match_716(283)>

    Argument #0 (282 -> 284 executable)
	match_9	Value: CONSTANT 0

    Argument #1 (283 -> 284 executable)
	match_716	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>

    Argument #0 (282 -> 284 executable)
	m_idx_105	Value: CONSTANT 0

    Argument #1 (283 -> 284 executable)
	m_idx_718	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>

    Argument #0 (282 -> 284 executable)
	nm_idx_119	Value: CONSTANT 0

    Argument #1 (283 -> 284 executable)
	nm_idx_717	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting statement:
D.45007_719 = m_idx_106 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.45008_720 = nm_idx_120 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
D.45009_721 = D.45007_719 && D.45008_720;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (D.45009_721 != 0)
which is likely CONSTANT
Adding Destination of edge (284 -> 297) to worklist


Simulating statement (from ssa_edges): if (D.44836_551 != 0)

Visiting statement:
if (D.44836_551 != 0)
which is likely CONSTANT
Adding Destination of edge (190 -> 191) to worklist


Simulating block 205

Visiting statement:
if (D.44858_570 == 0)
which is likely CONSTANT
Adding Destination of edge (205 -> 206) to worklist

Adding Destination of edge (205 -> 211) to worklist


Simulating block 206

Visiting statement:
if (cng_pt_25 == 0)
which is likely CONSTANT
Adding Destination of edge (206 -> 207) to worklist


Simulating block 207

Visiting statement:
if (D.44863_571 == 0)
which is likely CONSTANT
Adding Destination of edge (207 -> 208) to worklist


Simulating block 208

Visiting statement:
D.44856_572 = map_128->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
cng_pt_573 = (switch_payload_t) D.44856_572;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44605_574 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44605_574 != 0B)
which is likely CONSTANT
Adding Destination of edge (208 -> 209) to worklist

Adding Destination of edge (208 -> 210) to worklist


Simulating statement (from ssa_edges): D.44868_575 = (int) cng_pt_573;

Simulating statement (from ssa_edges): cng_pt_24 = PHI <cng_pt_25(204), cng_pt_573(210), cng_pt_25(212), cng_pt_25(214), cng_pt_25(279)>

Visiting PHI node: cng_pt_24 = PHI <cng_pt_25(204), cng_pt_573(210), cng_pt_25(212), cng_pt_25(214), cng_pt_25(279)>

    Argument #0 (204 -> 280 not executable)

    Argument #1 (210 -> 280 not executable)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: UNDEFINED


Simulating block 209

Visiting statement:
D.44868_575 = (int) cng_pt_573;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44605_576 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_577 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44869_578 = D.44471_577->cng_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 203

Visiting statement:
D.44856_567 = map_128->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
best_te_568 = (switch_payload_t) D.44856_567;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44857_569 = (int) best_te_568;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (203 -> 204) to worklist


Simulating statement (from ssa_edges): best_te_18 = PHI <best_te_20(202), best_te_568(203)>

Visiting PHI node: best_te_18 = PHI <best_te_20(202), best_te_568(203)>

    Argument #0 (202 -> 204 not executable)

    Argument #1 (203 -> 204 executable)
	best_te_568	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): best_te_19 = PHI <best_te_18(204), best_te_20(210), best_te_20(212), best_te_20(214), best_te_20(279)>

Visiting PHI node: best_te_19 = PHI <best_te_18(204), best_te_20(210), best_te_20(212), best_te_20(214), best_te_20(279)>

    Argument #0 (204 -> 280 not executable)

    Argument #1 (210 -> 280 not executable)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: UNDEFINED


Simulating block 424

Visiting statement:
map_1021 = map_136->rm_next;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (424 -> 425) to worklist


Simulating block 407

Visiting statement:
D.44530_987 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45241_988 == 0)
which is likely CONSTANT
Adding Destination of edge (407 -> 408) to worklist

Adding Destination of edge (407 -> 410) to worklist


Simulating block 408

Visiting statement:
D.44530_989 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45244_990 != 0)
which is likely CONSTANT
Adding Destination of edge (408 -> 409) to worklist


Simulating block 409

Simulating block 422

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 0

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 0

    Argument #2 (421 -> 422 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.
Adding Destination of edge (422 -> 423) to worklist


Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000fffffffc).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45237_984 = codec_array_84 + D.45236_983;

Visiting statement:
D.45237_984 = codec_array_84 + D.45236_983;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_1020 = i_139 + 1;

Visiting statement:
i_1020 = i_139 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 423

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: i_139 = PHI <i_981(404), i_1020(422)>

    Argument #0 (404 -> 423 executable)
	i_981	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	i_1020	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.99_982 = (unsigned int) i_139;

Visiting statement:
i.99_982 = (unsigned int) i_139;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45236_983 = i.99_982 * 4;

Visiting statement:
D.45236_983 = i.99_982 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_139 = PHI <i_981(404), i_1020(422)>

Simulating block 399

Visiting statement:
crypto_975 = attr_33->a_value;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
crypto_tag_1547 = crypto_tag_1502;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
crypto_tag_976 = crypto_tag_1547;
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (399 -> 400) to worklist


Simulating block 389

Simulating block 149

Visiting statement:
D.44530_459 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44766_461 = (int) remote_port_430;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44750_462 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44760_463 = D.44750_462->remote_sdp_ip;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44750_464 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44762_465 = D.44750_464->remote_sdp_port;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44767_466 = (int) D.44762_465;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44750_467 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44762_468 = D.44750_467->remote_sdp_port;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44767_469 = (int) D.44762_468;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_470 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44750_471 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44760_472 = D.44750_471->remote_sdp_ip;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_473 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44605_474 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44750_475 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44760_476 = D.44750_475->remote_sdp_ip;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44750_477 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44762_478 = D.44750_477->remote_sdp_port;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44768_479 != 0)
which is likely CONSTANT
Adding Destination of edge (149 -> 150) to worklist

Adding Destination of edge (149 -> 151) to worklist


Simulating block 150

Visiting statement:
err.90_480 = err;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 297

Visiting PHI node: match_11 = PHI <match_10(284), match_741(294), match_10(296)>

    Argument #0 (284 -> 297 executable)
	match_10	Value: CONSTANT 0

    Argument #1 (294 -> 297 not executable)

    Argument #2 (296 -> 297 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: m_idx_107 = PHI <m_idx_106(284), m_idx_744(294), m_idx_106(296)>

    Argument #0 (284 -> 297 executable)
	m_idx_106	Value: CONSTANT 0

    Argument #1 (294 -> 297 not executable)

    Argument #2 (296 -> 297 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (m_idx_107 != 0)
which is likely CONSTANT
Adding Destination of edge (297 -> 323) to worklist


Simulating statement (from ssa_edges): if (j_135 < m_idx_107)

Simulating statement (from ssa_edges): m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

Visiting PHI node: m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	m_idx_112	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): match_12 = PHI <match_11(297), match_745(322)>

Visiting PHI node: match_12 = PHI <match_11(297), match_745(322)>

    Argument #0 (297 -> 323 executable)
	match_11	Value: CONSTANT 0

    Argument #1 (322 -> 323 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (match_12 != 0)

Simulating statement (from ssa_edges): match_13 = PHI <match_12(323), match_12(333), match_825(334)>

Visiting PHI node: match_13 = PHI <match_12(323), match_12(333), match_825(334)>

    Argument #0 (323 -> 335 not executable)

    Argument #1 (333 -> 335 not executable)

    Argument #2 (334 -> 335 not executable)

    PHI node value: UNDEFINED


Simulating block 191

Visiting statement:
D.44839_552 = got_avp_68 | got_webrtc_78;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44839_552 == 0)
which is likely CONSTANT
Adding Destination of edge (191 -> 192) to worklist

Adding Destination of edge (191 -> 193) to worklist


Simulating block 192

Visiting statement:
match_553 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (192 -> 451) to worklist


Simulating statement (from ssa_edges): match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 executable)
	match_437	Value: CONSTANT 0

    Argument #3 (152 -> 451 executable)
	match_492	Value: CONSTANT 1

    Argument #4 (186 -> 451 executable)
	match_543	Value: CONSTANT 0

    Argument #5 (192 -> 451 executable)
	match_553	Value: CONSTANT 0

    Argument #6 (196 -> 451 executable)
	match_557	Value: CONSTANT 0

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 executable)
	match_974	Value: CONSTANT 0

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 211

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
if (D.44870_579 != 0)
which is likely CONSTANT
Adding Destination of edge (211 -> 213) to worklist


Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 not executable)

    Argument #1 (210 -> 280 not executable)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: UNDEFINED


Simulating block 213

Visiting statement:
if (match_8 != 0)
which is likely CONSTANT
Adding Destination of edge (213 -> 215) to worklist


Simulating block 215

Visiting statement:
codec_ms_581 = ptime_35;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (maxptime_39 != 0)
which is likely CONSTANT
Adding Destination of edge (215 -> 216) to worklist

Adding Destination of edge (215 -> 218) to worklist


Simulating statement (from ssa_edges): D.44877_582 = codec_ms_581 == 0;

Simulating statement (from ssa_edges): D.44878_583 = codec_ms_581 > maxptime_39;

Simulating statement (from ssa_edges): codec_ms_86 = PHI <codec_ms_581(215), codec_ms_581(216), codec_ms_585(217)>

Visiting PHI node: codec_ms_86 = PHI <codec_ms_581(215), codec_ms_581(216), codec_ms_585(217)>

    Argument #0 (215 -> 218 executable)
	codec_ms_581	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (codec_ms_86 == 0)

Simulating statement (from ssa_edges): codec_ms_87 = PHI <codec_ms_86(218), codec_ms_589(219)>

Visiting PHI node: codec_ms_87 = PHI <codec_ms_86(218), codec_ms_589(219)>

    Argument #0 (218 -> 220 not executable)

    Argument #1 (219 -> 220 not executable)

    PHI node value: UNDEFINED


Simulating block 216

Visiting statement:
D.44877_582 = codec_ms_581 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44878_583 = codec_ms_581 > maxptime_39;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44879_584 = D.44877_582 || D.44878_583;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44879_584 != 0)
which is likely CONSTANT
Adding Destination of edge (216 -> 217) to worklist


Simulating block 217

Visiting statement:
codec_ms_585 = maxptime_39;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 210
Adding Destination of edge (210 -> 280) to worklist


Simulating block 204

Simulating block 425

Visiting PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>

    Argument #0 (354 -> 425 executable)
	got_video_crypto_64	Value: CONSTANT 0

    Argument #1 (424 -> 425 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting PHI node: m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>

    Argument #0 (354 -> 425 executable)
	m_idx_877	Value: CONSTANT 0

    Argument #1 (424 -> 425 executable)
	m_idx_110	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>

Visiting PHI node: got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>

    Argument #0 (355 -> 366 executable)
	got_video_crypto_62	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (356 -> 366 executable)
	got_video_crypto_62	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (365 -> 366 executable)
	got_video_crypto_58	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>

Visiting PHI node: got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>

    Argument #0 (357 -> 365 executable)
	got_video_crypto_62	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (364 -> 365 executable)
	got_video_crypto_57	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): D.45266_1024 = got_video_crypto_62 <= 0;

Visiting statement:
D.45266_1024 = got_video_crypto_62 <= 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_video_crypto_64	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_video_crypto_64	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	got_video_crypto_62	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>

Visiting PHI node: got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>

    Argument #0 (101 -> 450 executable)
	got_video_crypto_165	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_crypto_63	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_video_crypto_64	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (349 -> 449 executable)
	got_video_crypto_64	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (428 -> 449 executable)
	got_video_crypto_62	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>

Visiting PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>

    Argument #0 (354 -> 425 executable)
	got_video_crypto_64	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (424 -> 425 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 410

Visiting statement:
D.45247_991 = map_136->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45248_992 = (int) D.45247_991;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45249_993 = imp_985->iananame;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45250_994 = imp_985->ianacode;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45251_995 = (int) D.45250_994;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45255_996 = map_136->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45255_996 == 0B)
which is likely CONSTANT
Adding Destination of edge (410 -> 413) to worklist

Adding Destination of edge (410 -> 411) to worklist


Simulating statement (from ssa_edges): D.47957_1503 = *D.45255_996;

Simulating block 411

Visiting statement:
D.47957_1503 = *D.45255_996;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47957_1503 == 0)
which is likely CONSTANT
Adding Destination of edge (411 -> 412) to worklist


Simulating block 412

Simulating block 413

Visiting PHI node: D.47956_1504 = PHI <1(410), 1(411), 0(412)>

    Argument #0 (410 -> 413 executable)
	1	Value: CONSTANT 1

    Argument #1 (411 -> 413 executable)
	1	Value: CONSTANT 1

    Argument #2 (412 -> 413 executable)
	0	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47956_1548 = D.47956_1504;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47956_997 = D.47956_1548;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.47956_997 != 0)
which is likely CONSTANT
Adding Destination of edge (413 -> 415) to worklist

Adding Destination of edge (413 -> 414) to worklist


Simulating block 414

Visiting statement:
D.44471_998 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44821_999 = D.44471_998->ndlb;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44936_1000 = (int) D.44821_999;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44937_1001 = D.44936_1000 & 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44938_1002 = (_Bool) D.44937_1001;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.44938_1002 != 0)
which is likely CONSTANT
Adding Destination of edge (414 -> 417) to worklist


Simulating block 415

Visiting statement:
D.45247_1003 = map_136->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45248_1004 = (int) D.45247_1003;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45248_1004 <= 95)
which is likely CONSTANT
Adding Destination of edge (415 -> 416) to worklist


Simulating block 416

Visiting statement:
D.45247_1005 = map_136->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45248_1006 = (int) D.45247_1005;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45250_1007 = imp_985->ianacode;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45251_1008 = (int) D.45250_1007;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
vmatch_1009 = D.45248_1006 == D.45251_1008;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (416 -> 418) to worklist


Simulating statement (from ssa_edges): vmatch_138 = PHI <vmatch_1009(416), vmatch_1012(417)>

Visiting PHI node: vmatch_138 = PHI <vmatch_1009(416), vmatch_1012(417)>

    Argument #0 (416 -> 418 executable)
	vmatch_1009	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (vmatch_138 != 0)

Simulating block 418

Visiting statement:
if (vmatch_138 != 0)
which is likely CONSTANT
Adding Destination of edge (418 -> 419) to worklist

Adding Destination of edge (418 -> 421) to worklist


Simulating block 419

Visiting statement:
D.45262_1013 = map_136->rm_rate;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45263_1014 = imp_985->samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45262_1013 == D.45263_1014)
which is likely VARYING
Adding Destination of edge (419 -> 420) to worklist


Simulating block 420

Visiting statement:
D.45249_1015 = imp_985->iananame;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45250_1016 = imp_985->ianacode;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45251_1017 = (int) D.45250_1016;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 0

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 0

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 0

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 0

    Argument #2 (421 -> 422 not executable)

    PHI node value: CONSTANT 0


Simulating block 400

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>

    Argument #0 (368 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (376 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (388 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (389 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (390 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (394 -> 400 executable)
	got_video_crypto_61	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #6 (399 -> 400 executable)
	got_video_crypto_977	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>

Visiting PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>

    Argument #0 (366 -> 401 executable)
	got_video_crypto_59	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (400 -> 401 executable)
	got_video_crypto_60	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>

Visiting PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>

    Argument #0 (354 -> 425 executable)
	got_video_crypto_64	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (424 -> 425 executable)
	got_video_crypto_61	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>

Visiting PHI node: got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>

    Argument #0 (355 -> 366 executable)
	got_video_crypto_62	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>

Visiting PHI node: got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>

    Argument #0 (357 -> 365 executable)
	got_video_crypto_62	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>

Visiting PHI node: got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>

    Argument #0 (358 -> 364 executable)
	got_video_crypto_58	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45266_1024 = got_video_crypto_62 <= 0;

Visiting statement:
D.45266_1024 = got_video_crypto_62 <= 0;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_video_crypto_64	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (349 -> 449 executable)
	got_video_crypto_64	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (428 -> 449 executable)
	got_video_crypto_62	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>

Visiting PHI node: got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>

    Argument #0 (101 -> 450 executable)
	got_video_crypto_165	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_video_crypto_63	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 151

Simulating block 323

Visiting PHI node: match_12 = PHI <match_11(297), match_745(322)>

    Argument #0 (297 -> 323 executable)
	match_11	Value: CONSTANT 0

    Argument #1 (322 -> 323 not executable)

    PHI node value: CONSTANT 0


Visiting statement:
if (match_12 != 0)
which is likely CONSTANT
Adding Destination of edge (323 -> 335) to worklist


Simulating block 193

Simulating block 451

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 executable)
	match_437	Value: CONSTANT 0

    Argument #3 (152 -> 451 executable)
	match_492	Value: CONSTANT 1

    Argument #4 (186 -> 451 executable)
	match_543	Value: CONSTANT 0

    Argument #5 (192 -> 451 executable)
	match_553	Value: CONSTANT 0

    Argument #6 (196 -> 451 executable)
	match_557	Value: CONSTANT 0

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 executable)
	match_974	Value: CONSTANT 0

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 218

Visiting statement:
if (codec_ms_86 == 0)
which is likely CONSTANT
Adding Destination of edge (218 -> 219) to worklist

Adding Destination of edge (218 -> 220) to worklist


Simulating block 219

Visiting statement:
D.44856_586 = map_128->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44884_587 = (uint32_t) D.44856_586;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
codec_ms_589 = (int) D.44885_588;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): codec_ms_87 = PHI <codec_ms_86(218), codec_ms_589(219)>

Visiting PHI node: codec_ms_87 = PHI <codec_ms_86(218), codec_ms_589(219)>

    Argument #0 (218 -> 220 executable)
	codec_ms_86	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): codec_ms_88 = PHI <codec_ms_87(223), codec_ms_87(224), codec_ms_595(225)>

Visiting PHI node: codec_ms_88 = PHI <codec_ms_87(223), codec_ms_87(224), codec_ms_595(225)>

    Argument #0 (223 -> 226 not executable)

    Argument #1 (224 -> 226 not executable)

    Argument #2 (225 -> 226 not executable)

    PHI node value: UNDEFINED


Simulating block 280

Visiting PHI node: match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>

    Argument #0 (204 -> 280 executable)
	match_8	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	match_8	Value: CONSTANT 0

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: best_te_19 = PHI <best_te_18(204), best_te_20(210), best_te_20(212), best_te_20(214), best_te_20(279)>

    Argument #0 (204 -> 280 executable)
	best_te_18	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting PHI node: cng_pt_24 = PHI <cng_pt_25(204), cng_pt_573(210), cng_pt_25(212), cng_pt_25(214), cng_pt_25(279)>

    Argument #0 (204 -> 280 executable)
	cng_pt_25	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	cng_pt_573	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 0

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>

    Argument #0 (204 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>

    Argument #0 (204 -> 280 executable)
	m_idx_104	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	m_idx_104	Value: CONSTANT 0

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>

    Argument #0 (204 -> 280 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
map_711 = map_128->rm_next;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (280 -> 281) to worklist


Simulating statement (from ssa_edges): cng_pt_25 = PHI <cng_pt_27(197), cng_pt_24(280)>

Visiting PHI node: cng_pt_25 = PHI <cng_pt_27(197), cng_pt_24(280)>

    Argument #0 (197 -> 281 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	cng_pt_24	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (cng_pt_25 == 0)

Visiting statement:
if (cng_pt_25 == 0)
which is likely CONSTANT
Adding Destination of edge (206 -> 211) to worklist


Simulating statement (from ssa_edges): cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>

Visiting PHI node: cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): best_te_20 = PHI <best_te_23(197), best_te_19(280)>

Visiting PHI node: best_te_20 = PHI <best_te_23(197), best_te_19(280)>

    Argument #0 (197 -> 281 executable)
	best_te_23	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	best_te_19	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (best_te_20 == 0)

Visiting statement:
if (best_te_20 == 0)
which is likely CONSTANT
Adding Destination of edge (201 -> 202) to worklist


Simulating statement (from ssa_edges): if (best_te_20 == 0)

Simulating statement (from ssa_edges): best_te_21 = PHI <best_te_20(335), best_te_20(337), best_te_833(338)>

Visiting PHI node: best_te_21 = PHI <best_te_20(335), best_te_20(337), best_te_833(338)>

    Argument #0 (335 -> 339 not executable)

    Argument #1 (337 -> 339 not executable)

    Argument #2 (338 -> 339 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>

Visiting PHI node: nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>

    Argument #0 (197 -> 281 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	nm_idx_117	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>

Visiting PHI node: m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>

    Argument #0 (197 -> 281 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	m_idx_103	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): codec_ms_92 = PHI <codec_ms_95(197), codec_ms_91(280)>

Visiting PHI node: codec_ms_92 = PHI <codec_ms_95(197), codec_ms_91(280)>

    Argument #0 (197 -> 281 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	codec_ms_91	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): match_8 = PHI <match_16(197), match_7(280)>

Visiting PHI node: match_8 = PHI <match_16(197), match_7(280)>

    Argument #0 (197 -> 281 executable)
	match_16	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	match_7	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 202

Visiting statement:
D.44854_564 = map_128->rm_rate;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44750_565 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44855_566 = D.44750_565->rm_rate;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44854_564 == D.44855_566)
which is likely VARYING
Adding Destination of edge (202 -> 203) to worklist

Adding Destination of edge (202 -> 204) to worklist


Simulating block 417

Visiting statement:
D.45249_1010 = imp_985->iananame;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
vmatch_1012 = D.45259_1011 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.
Adding Destination of edge (417 -> 418) to worklist


Simulating block 418

Simulating block 421

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 0

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 0

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting statement:
vmatch_1019 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (421 -> 422) to worklist


Simulating block 335

Visiting PHI node: match_13 = PHI <match_12(323), match_12(333), match_825(334)>

    Argument #0 (323 -> 335 executable)
	match_12	Value: CONSTANT 0

    Argument #1 (333 -> 335 not executable)

    Argument #2 (334 -> 335 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>

    Argument #0 (323 -> 335 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #1 (333 -> 335 not executable)

    Argument #2 (334 -> 335 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (best_te_20 == 0)
which is likely CONSTANT
Adding Destination of edge (335 -> 336) to worklist

Adding Destination of edge (335 -> 339) to worklist


Simulating statement (from ssa_edges): got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>

Visiting PHI node: got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

Visiting PHI node: match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating block 336

Visiting statement:
if (D.45107_826 != 0)
which is likely CONSTANT
Adding Destination of edge (336 -> 338) to worklist

Adding Destination of edge (336 -> 337) to worklist


Simulating block 337

Visiting statement:
D.44530_827 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45109_828 != 0)
which is likely CONSTANT

Simulating block 220

Visiting statement:
D.44856_590 = map_128->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
csui.173_591 = (unsigned char) D.44856_590;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
csui.173_1477 = csui.173_591;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (csui.173_1477 <= 18)
which is likely CONSTANT
Adding Destination of edge (220 -> 221) to worklist

Adding Destination of edge (220 -> 222) to worklist


Simulating statement (from ssa_edges): map_bit_rate_1479 = CSWTCH.174[csui.173_1477];

Simulating block 221

Visiting statement:
map_bit_rate_1478 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (221 -> 223) to worklist


Simulating statement (from ssa_edges): map_bit_rate_1480 = PHI <map_bit_rate_1478(221), map_bit_rate_1479(222)>

Visiting PHI node: map_bit_rate_1480 = PHI <map_bit_rate_1478(221), map_bit_rate_1479(222)>

    Argument #0 (221 -> 223 executable)
	map_bit_rate_1478	Value: CONSTANT 0

    Argument #1 (222 -> 223 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): map_bit_rate_1534 = map_bit_rate_1480;

Simulating block 281

Visiting PHI node: match_8 = PHI <match_16(197), match_7(280)>

    Argument #0 (197 -> 281 executable)
	match_16	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	match_7	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: codec_ms_92 = PHI <codec_ms_95(197), codec_ms_91(280)>

    Argument #0 (197 -> 281 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	codec_ms_91	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>

    Argument #0 (197 -> 281 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	m_idx_103	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>

    Argument #0 (197 -> 281 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	nm_idx_117	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 211

Simulating block 203

Simulating block 204

Simulating block 422

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 0

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 0

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 0

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)


Simulating statement (from ssa_edges): m_idx_1018 = m_idx_110 + 1;

Visiting statement:
m_idx_1018 = m_idx_110 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>

Visiting PHI node: m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>

    Argument #0 (354 -> 425 executable)
	m_idx_877	Value: CONSTANT 0

    Argument #1 (424 -> 425 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)


Simulating statement (from ssa_edges): m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>

Visiting PHI node: m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>

    Argument #0 (426 -> 428 executable)
	m_idx_111	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (427 -> 428 executable)
	m_idx_1027	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (m_idx_112 != 0)

Visiting statement:
if (m_idx_112 != 0)
which is likely CONSTANT
Adding Destination of edge (428 -> 429) to worklist


Simulating statement (from ssa_edges): if (j_141 < m_idx_112)

Simulating statement (from ssa_edges): m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

Visiting PHI node: m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	m_idx_114	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	m_idx_112	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>

Visiting PHI node: m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>

    Argument #0 (101 -> 450 executable)
	m_idx_184	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	m_idx_113	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>

Visiting PHI node: m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>

    Argument #0 (197 -> 281 executable)
	m_idx_114	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (280 -> 281 executable)
	m_idx_103	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_105 = PHI <m_idx_102(279), m_idx_104(281)>

Visiting PHI node: m_idx_105 = PHI <m_idx_102(279), m_idx_104(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	m_idx_104	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>

Visiting PHI node: m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>

    Argument #0 (282 -> 284 executable)
	m_idx_105	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (283 -> 284 executable)
	m_idx_718	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45007_719 = m_idx_106 == 0;

Visiting statement:
D.45007_719 = m_idx_106 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45009_721 = D.45007_719 && D.45008_720;

Visiting statement:
D.45009_721 = D.45007_719 && D.45008_720;
which is likely CONSTANT

Simulating statement (from ssa_edges): m_idx_107 = PHI <m_idx_106(284), m_idx_744(294), m_idx_106(296)>

Visiting PHI node: m_idx_107 = PHI <m_idx_106(284), m_idx_744(294), m_idx_106(296)>

    Argument #0 (284 -> 297 executable)
	m_idx_106	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (294 -> 297 not executable)

    Argument #2 (296 -> 297 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (m_idx_107 != 0)

Visiting statement:
if (m_idx_107 != 0)
which is likely CONSTANT
Adding Destination of edge (297 -> 298) to worklist


Simulating statement (from ssa_edges): if (j_135 < m_idx_107)

Simulating statement (from ssa_edges): m_idx_744 = m_idx_106 + 1;

Simulating statement (from ssa_edges): m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>

Visiting PHI node: m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>

    Argument #0 (204 -> 280 executable)
	m_idx_104	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (210 -> 280 executable)
	m_idx_104	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>

Visiting PHI node: m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>

    Argument #0 (197 -> 281 executable)
	m_idx_114	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (280 -> 281 executable)
	m_idx_103	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)


Simulating statement (from ssa_edges): m_idx_101 = PHI <m_idx_104(241), m_idx_100(277)>

Visiting PHI node: m_idx_101 = PHI <m_idx_104(241), m_idx_100(277)>

    Argument #0 (241 -> 278 not executable)

    Argument #1 (277 -> 278 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

Visiting PHI node: m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	m_idx_114	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (349 -> 449 executable)
	m_idx_114	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #3 (428 -> 449 executable)
	m_idx_112	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)


Simulating block 429

Visiting statement:
j_1028 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
if (greedy_47 != 0)
which is likely CONSTANT
Adding Destination of edge (429 -> 430) to worklist

Adding Destination of edge (429 -> 431) to worklist


Simulating statement (from ssa_edges): m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

Visiting PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>

    Argument #0 (418 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (419 -> 421 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (420 -> 421 executable)
	m_idx_1018	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>

    Argument #0 (406 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (409 -> 422 executable)
	m_idx_110	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (421 -> 422 executable)
	m_idx_108	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>

    Argument #0 (404 -> 423 executable)
	m_idx_111	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (422 -> 423 executable)
	m_idx_109	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>

Visiting PHI node: m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>

    Argument #0 (354 -> 425 executable)
	m_idx_877	Value: CONSTANT 0

    Argument #1 (424 -> 425 executable)
	m_idx_110	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>

Visiting PHI node: m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>

    Argument #0 (426 -> 428 executable)
	m_idx_111	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (j_141 < m_idx_112)

Simulating statement (from ssa_edges): m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

Visiting PHI node: m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	m_idx_114	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (349 -> 449 executable)
	m_idx_114	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #3 (428 -> 449 executable)
	m_idx_112	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>

Visiting PHI node: m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>

    Argument #0 (101 -> 450 executable)
	m_idx_184	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	m_idx_113	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>

Visiting PHI node: m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>

    Argument #0 (197 -> 281 executable)
	m_idx_114	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_105 = PHI <m_idx_102(279), m_idx_104(281)>

Visiting PHI node: m_idx_105 = PHI <m_idx_102(279), m_idx_104(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	m_idx_104	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>

Visiting PHI node: m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>

    Argument #0 (282 -> 284 executable)
	m_idx_105	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45007_719 = m_idx_106 == 0;

Visiting statement:
D.45007_719 = m_idx_106 == 0;
which is likely CONSTANT

Simulating statement (from ssa_edges): m_idx_107 = PHI <m_idx_106(284), m_idx_744(294), m_idx_106(296)>

Visiting PHI node: m_idx_107 = PHI <m_idx_106(284), m_idx_744(294), m_idx_106(296)>

    Argument #0 (284 -> 297 executable)
	m_idx_106	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (j_135 < m_idx_107)

Simulating statement (from ssa_edges): m_idx_744 = m_idx_106 + 1;

Simulating statement (from ssa_edges): m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>

Visiting PHI node: m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>

    Argument #0 (204 -> 280 executable)
	m_idx_104	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): m_idx_101 = PHI <m_idx_104(241), m_idx_100(277)>

Visiting PHI node: m_idx_101 = PHI <m_idx_104(241), m_idx_100(277)>

    Argument #0 (241 -> 278 not executable)

    Argument #1 (277 -> 278 not executable)

    PHI node value: UNDEFINED


Simulating block 430

Simulating block 339

Visiting PHI node: best_te_21 = PHI <best_te_20(335), best_te_20(337), best_te_833(338)>

    Argument #0 (335 -> 339 executable)
	best_te_20	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (best_te_21 != 0)
which is likely CONSTANT
Adding Destination of edge (339 -> 340) to worklist

Adding Destination of edge (339 -> 345) to worklist


Simulating statement (from ssa_edges): D.44857_837 = (int) best_te_21;

Simulating statement (from ssa_edges): D.44857_843 = (int) best_te_21;

Simulating statement (from ssa_edges): best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>

Visiting PHI node: best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	best_te_23	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	best_te_23	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	best_te_23	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 not executable)

    Argument #7 (344 -> 449 not executable)

    Argument #8 (341 -> 449 not executable)

    Argument #9 (342 -> 449 not executable)

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating block 340

Visiting statement:
if (D.45114_834 == 1)
which is likely CONSTANT
Adding Destination of edge (340 -> 341) to worklist

Adding Destination of edge (340 -> 343) to worklist


Simulating block 341

Visiting statement:
D.44471_835 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
te_836 = D.44471_835->te;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44857_837 = (int) best_te_21;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_838 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_839 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44605_840 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44605_840 != 0B)
which is likely CONSTANT
Adding Destination of edge (341 -> 342) to worklist

Adding Destination of edge (341 -> 449) to worklist


Simulating block 342

Visiting statement:
D.44605_841 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_842 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44857_843 = (int) best_te_21;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 338

Visiting statement:
D.44471_829 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45110_830 = D.44471_829->te;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45111_831 = (int) D.45110_830;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_832 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
best_te_833 = D.44471_832->te;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (338 -> 339) to worklist


Simulating block 222

Visiting statement:
map_bit_rate_1479 = CSWTCH.174[csui.173_1477];
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): map_bit_rate_1480 = PHI <map_bit_rate_1478(221), map_bit_rate_1479(222)>

Visiting PHI node: map_bit_rate_1480 = PHI <map_bit_rate_1478(221), map_bit_rate_1479(222)>

    Argument #0 (221 -> 223 executable)
	map_bit_rate_1478	Value: CONSTANT 0

    Argument #1 (222 -> 223 executable)
	map_bit_rate_1479	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): map_bit_rate_1534 = map_bit_rate_1480;

Simulating block 223

Visiting statement:
map_bit_rate_1534 = map_bit_rate_1480;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
map_bit_rate_592 = map_bit_rate_1534;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (ptime_35 == 0)
which is likely CONSTANT
Adding Destination of edge (223 -> 224) to worklist

Adding Destination of edge (223 -> 226) to worklist


Simulating statement (from ssa_edges): map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>

Visiting PHI node: map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>

    Argument #0 (232 -> 241 not executable)

    Argument #1 (234 -> 241 not executable)

    Argument #2 (239 -> 241 not executable)

    Argument #3 (240 -> 241 not executable)

    Argument #4 (231 -> 241 not executable)

    Argument #5 (233 -> 241 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): map_bit_rate_131 = PHI <map_bit_rate_592(235), map_bit_rate_614(236)>

Visiting PHI node: map_bit_rate_131 = PHI <map_bit_rate_592(235), map_bit_rate_614(236)>

    Argument #0 (235 -> 237 not executable)

    Argument #1 (236 -> 237 not executable)

    PHI node value: UNDEFINED


Simulating block 298

Visiting statement:
if (greedy_47 != 0)
which is likely CONSTANT
Adding Destination of edge (298 -> 299) to worklist

Adding Destination of edge (298 -> 300) to worklist


Simulating block 299

Simulating block 431

Visiting statement:
vmatch_1029 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
j_1030 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (431 -> 436) to worklist


Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (j_141 < m_idx_112)

Simulating statement (from ssa_edges): D.45274_1031 = matches[j_141].map;

Simulating statement (from ssa_edges): D.45274_1033 = matches[j_141].map;

Simulating statement (from ssa_edges): D.45274_1035 = matches[j_141].map;

Simulating statement (from ssa_edges): D.45279_1038 = matches[j_141].imp;

Simulating statement (from ssa_edges): D.45279_1040 = matches[j_141].imp;

Simulating statement (from ssa_edges): if (j_141 == 0)

Simulating statement (from ssa_edges): mimp_1049 = matches[j_141].imp;

Simulating statement (from ssa_edges): map_1050 = matches[j_141].map;

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Simulating statement (from ssa_edges): D.45308_1087 = vmatch_1029 != 0;

Simulating block 345

Visiting statement:
if (D.45125_859 == 0)
which is likely CONSTANT
Adding Destination of edge (345 -> 346) to worklist

Adding Destination of edge (345 -> 347) to worklist


Simulating block 343

Visiting statement:
D.44471_844 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_845 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45110_846 = D.44471_845->te;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
te_847 = D.44471_845->recv_te;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45120_848 = (int) te_847;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_849 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_850 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44605_851 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44605_851 != 0B)
which is likely CONSTANT
Adding Destination of edge (343 -> 344) to worklist


Simulating statement (from ssa_edges): D.45120_854 = (int) te_847;

Simulating statement (from ssa_edges): D.45120_857 = (int) te_847;

Simulating block 344

Visiting statement:
D.44605_852 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_853 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45120_854 = (int) te_847;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44605_855 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_856 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45120_857 = (int) te_847;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 449

Visiting PHI node: match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #7 (344 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #8 (341 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #9 (342 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	best_te_23	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	best_te_23	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	best_te_23	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 executable)
	best_te_21	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting PHI node: cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	cng_pt_27	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 executable)
	cng_pt_25	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	got_crypto_56	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 executable)
	got_crypto_54	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting PHI node: got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 executable)
	got_audio_65	Value: CONSTANT 0

    Argument #7 (344 -> 449 executable)
	got_audio_65	Value: CONSTANT 0

    Argument #8 (341 -> 449 executable)
	got_audio_65	Value: CONSTANT 0

    Argument #9 (342 -> 449 executable)
	got_audio_65	Value: CONSTANT 0

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 executable)
	codec_ms_93	Value: CONSTANT 0

    Argument #7 (344 -> 449 executable)
	codec_ms_93	Value: CONSTANT 0

    Argument #8 (341 -> 449 executable)
	codec_ms_93	Value: CONSTANT 0

    Argument #9 (342 -> 449 executable)
	codec_ms_93	Value: CONSTANT 0

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

    Argument #0 (346 -> 449 not executable)

    Argument #1 (348 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	nm_idx_876	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 executable)
	nm_idx_120	Value: CONSTANT 0

    Argument #7 (344 -> 449 executable)
	nm_idx_120	Value: CONSTANT 0

    Argument #8 (341 -> 449 executable)
	nm_idx_120	Value: CONSTANT 0

    Argument #9 (342 -> 449 executable)
	nm_idx_120	Value: CONSTANT 0

    Argument #10 (347 -> 449 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): got_crypto_56 = PHI <got_crypto_164(101), got_crypto_55(449)>

Visiting PHI node: got_crypto_56 = PHI <got_crypto_164(101), got_crypto_55(449)>

    Argument #0 (101 -> 450 executable)
	got_crypto_164	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_crypto_55	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>

Visiting PHI node: got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>

    Argument #0 (155 -> 166 executable)
	got_crypto_56	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>

Visiting PHI node: got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>

    Argument #0 (157 -> 165 executable)
	got_crypto_56	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>

Visiting PHI node: got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>

    Argument #0 (158 -> 164 executable)
	got_crypto_51	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): cng_pt_27 = PHI <cng_pt_151(101), cng_pt_26(449)>

Visiting PHI node: cng_pt_27 = PHI <cng_pt_151(101), cng_pt_26(449)>

    Argument #0 (101 -> 450 executable)
	cng_pt_151	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	cng_pt_26	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): best_te_23 = PHI <best_te_149(101), best_te_22(449)>

Visiting PHI node: best_te_23 = PHI <best_te_149(101), best_te_22(449)>

    Argument #0 (101 -> 450 executable)
	best_te_149	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	best_te_22	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 339

Simulating block 224

Visiting statement:
D.44889_593 = map_128->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44890_594 == 0)
which is likely CONSTANT
Adding Destination of edge (224 -> 225) to worklist


Simulating block 225

Visiting statement:
codec_ms_595 = 33;
which is likely CONSTANT
Lattice value changed to CONSTANT 33.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): codec_ms_88 = PHI <codec_ms_87(223), codec_ms_87(224), codec_ms_595(225)>

Visiting PHI node: codec_ms_88 = PHI <codec_ms_87(223), codec_ms_87(224), codec_ms_595(225)>

    Argument #0 (223 -> 226 executable)
	codec_ms_87	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 226

Visiting statement:
remote_codec_rate_596 = map_128->rm_rate;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
fmtp_remote_codec_rate_597 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
D.44893_598 = map_128->rm_fmtp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44893_598 == 0B)
which is likely CONSTANT
Adding Destination of edge (226 -> 229) to worklist

Adding Destination of edge (226 -> 227) to worklist


Simulating statement (from ssa_edges): D.47915_1481 = *D.44893_598;

Simulating statement (from ssa_edges): remote_codec_rate_98 = PHI <remote_codec_rate_596(241), remote_codec_rate_97(277)>

Visiting PHI node: remote_codec_rate_98 = PHI <remote_codec_rate_596(241), remote_codec_rate_97(277)>

    Argument #0 (241 -> 278 not executable)

    Argument #1 (277 -> 278 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>

Visiting PHI node: codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>

    Argument #0 (232 -> 241 not executable)

    Argument #1 (234 -> 241 not executable)

    Argument #2 (239 -> 241 not executable)

    Argument #3 (240 -> 241 not executable)

    Argument #4 (231 -> 241 not executable)

    Argument #5 (233 -> 241 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>

Visiting PHI node: codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>

    Argument #0 (237 -> 239 not executable)

    Argument #1 (238 -> 239 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>

Visiting PHI node: fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>

    Argument #0 (232 -> 241 not executable)

    Argument #1 (234 -> 241 not executable)

    Argument #2 (239 -> 241 not executable)

    Argument #3 (240 -> 241 not executable)

    Argument #4 (231 -> 241 not executable)

    Argument #5 (233 -> 241 not executable)

    PHI node value: UNDEFINED


Simulating block 227

Visiting statement:
D.47915_1481 = *D.44893_598;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47915_1481 == 0)
which is likely CONSTANT
Adding Destination of edge (227 -> 228) to worklist


Simulating block 228

Simulating block 300

Visiting statement:
match_745 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
j_746 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (300 -> 322) to worklist


Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (j_135 < m_idx_107)

Simulating statement (from ssa_edges): D.45034_747 = matches[j_135].map;

Simulating statement (from ssa_edges): D.45034_749 = matches[j_135].map;

Simulating statement (from ssa_edges): D.45034_751 = matches[j_135].map;

Simulating statement (from ssa_edges): D.45039_754 = matches[j_135].imp;

Simulating statement (from ssa_edges): D.45039_756 = matches[j_135].imp;

Simulating statement (from ssa_edges): mimp_761 = matches[j_135].imp;

Simulating statement (from ssa_edges): mmap_762 = matches[j_135].map;

Simulating statement (from ssa_edges): if (j_135 == 0)

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Simulating statement (from ssa_edges): match_12 = PHI <match_11(297), match_745(322)>

Visiting PHI node: match_12 = PHI <match_11(297), match_745(322)>

    Argument #0 (297 -> 323 executable)
	match_11	Value: CONSTANT 0

    Argument #1 (322 -> 323 not executable)

    PHI node value: CONSTANT 0


Simulating block 436

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 not executable)

    PHI node value: CONSTANT 0


Visiting statement:
if (j_141 < m_idx_112)
which is likely CONSTANT
Adding Destination of edge (436 -> 432) to worklist

Adding Destination of edge (436 -> 437) to worklist


Simulating block 346

Visiting statement:
D.44530_860 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_861 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_862 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_863 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45110_864 = D.44471_863->te;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
te_865 = D.44471_863->recv_te;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (346 -> 449) to worklist


Simulating block 347

Visiting statement:
D.44530_866 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_867 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_868 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44471_869 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45110_870 = D.44471_869->te;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
te_871 = D.44471_869->recv_te;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 229

Visiting PHI node: D.47914_1482 = PHI <1(226), 1(227), 0(228)>

    Argument #0 (226 -> 229 executable)
	1	Value: CONSTANT 1

    Argument #1 (227 -> 229 executable)
	1	Value: CONSTANT 1

    Argument #2 (228 -> 229 executable)
	0	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47914_1535 = D.47914_1482;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47914_599 = D.47914_1535;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.47914_599 != 0)
which is likely CONSTANT
Adding Destination of edge (229 -> 230) to worklist

Adding Destination of edge (229 -> 234) to worklist


Simulating block 230

Visiting statement:
D.44889_600 = map_128->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44897_601 == 0)
which is likely CONSTANT
Adding Destination of edge (230 -> 231) to worklist

Adding Destination of edge (230 -> 232) to worklist


Simulating block 231

Visiting statement:
codec_ms_602 = 32;
which is likely CONSTANT
Lattice value changed to CONSTANT 32.  Adding SSA edges to worklist.

Visiting statement:
map_bit_rate_603 = 13332;
which is likely CONSTANT
Lattice value changed to CONSTANT 13332.  Adding SSA edges to worklist.
Adding Destination of edge (231 -> 241) to worklist


Simulating statement (from ssa_edges): map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>

Visiting PHI node: map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>

    Argument #0 (232 -> 241 not executable)

    Argument #1 (234 -> 241 not executable)

    Argument #2 (239 -> 241 not executable)

    Argument #3 (240 -> 241 not executable)

    Argument #4 (231 -> 241 executable)
	map_bit_rate_603	Value: CONSTANT 13332

    Argument #5 (233 -> 241 not executable)

    PHI node value: CONSTANT 13332

Lattice value changed to CONSTANT 13332.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44955_666 = map_bit_rate_132 != 0;

Simulating statement (from ssa_edges): D.44956_667 = map_bit_rate_132 != bit_rate_631;

Simulating statement (from ssa_edges): codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>

Visiting PHI node: codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>

    Argument #0 (232 -> 241 not executable)

    Argument #1 (234 -> 241 not executable)

    Argument #2 (239 -> 241 not executable)

    Argument #3 (240 -> 241 not executable)

    Argument #4 (231 -> 241 executable)
	codec_ms_602	Value: CONSTANT 32

    Argument #5 (233 -> 241 not executable)

    PHI node value: CONSTANT 32

Lattice value changed to CONSTANT 32.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44990_690 = codec_ms_90 != 0;

Simulating statement (from ssa_edges): D.44993_692 = codec_ms_90 * 1000;

Simulating statement (from ssa_edges): codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>

Visiting PHI node: codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	codec_ms_92	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>

Visiting PHI node: codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>

    Argument #0 (204 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 0


Simulating block 322

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 not executable)

    PHI node value: CONSTANT 0


Visiting statement:
if (j_135 < m_idx_107)
which is likely CONSTANT
Adding Destination of edge (322 -> 301) to worklist

Adding Destination of edge (322 -> 323) to worklist


Simulating block 432

Visiting statement:
D.45274_1031 = matches[j_141].map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45275_1032 = D.45274_1031->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45274_1033 = matches[j_141].map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45276_1034 = D.45274_1033->rm_fmtp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45274_1035 = matches[j_141].map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45277_1036 = D.45274_1035->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45278_1037 = (uint32_t) D.45277_1036;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45279_1038 = matches[j_141].imp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45280_1039 = D.45279_1038->samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45279_1040 = matches[j_141].imp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45281_1041 = D.45279_1040->microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45282_1042 = D.45281_1041 / 1000;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45283_1043 = (uint32_t) D.45282_1042;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (j_141 == 0)
which is likely CONSTANT
Adding Destination of edge (432 -> 433) to worklist


Simulating block 437

Visiting statement:
D.45286_1068 = v_engine_189->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45299_1069 = D.45286_1068->remote_sdp_port;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45300_1070 = (int) D.45299_1069;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_1071 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45286_1072 = v_engine_189->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45301_1073 = D.45286_1072->remote_sdp_ip;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_1074 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_1075 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45286_1076 = v_engine_189->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45302_1077 = D.45286_1076->rm_fmtp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45286_1078 = v_engine_189->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45303_1079 = D.45286_1078->agreed_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45304_1080 = (int) D.45303_1079;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_1081 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45286_1082 = v_engine_189->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45305_1083 = D.45286_1082->recv_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45306_1084 = (int) D.45305_1083;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_1085 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45307_1086 = match_16 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.45308_1087 = vmatch_1029 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.45309_1088 = D.45307_1086 && D.45308_1087;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
if (D.45309_1088 != 0)
which is likely CONSTANT
Adding Destination of edge (437 -> 438) to worklist


Simulating block 438

Visiting statement:
match_1089 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.
Adding Destination of edge (438 -> 439) to worklist


Simulating statement (from ssa_edges): match_14 = PHI <match_16(437), match_1089(438)>

Visiting PHI node: match_14 = PHI <match_16(437), match_1089(438)>

    Argument #0 (437 -> 439 not executable)

    Argument #1 (438 -> 439 executable)
	match_1089	Value: CONSTANT 1

    PHI node value: CONSTANT 1

Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

Visiting PHI node: match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

    Argument #0 (346 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #1 (348 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #4 (447 -> 449 not executable)

    Argument #5 (448 -> 449 not executable)

    Argument #6 (343 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #7 (344 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #8 (341 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #9 (342 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #10 (347 -> 449 executable)
	match_13	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 439

Visiting PHI node: match_14 = PHI <match_16(437), match_1089(438)>

    Argument #0 (437 -> 439 not executable)

    Argument #1 (438 -> 439 executable)
	match_1089	Value: CONSTANT 1

    PHI node value: CONSTANT 1


Visiting statement:
D.45312_1090 = &v_engine_189->read_codec;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45312_1090 != 0B)
which is likely CONSTANT
Adding Destination of edge (439 -> 440) to worklist

Adding Destination of edge (439 -> 444) to worklist


Simulating statement (from ssa_edges): D.47965_1505 = D.45312_1090->flags;

Simulating statement (from ssa_edges): D.47963_1507 = D.45312_1090->mutex;

Simulating statement (from ssa_edges): D.47962_1508 = D.45312_1090->codec_interface;

Simulating statement (from ssa_edges): D.47961_1509 = D.45312_1090->implementation;

Simulating block 440

Visiting statement:
D.47965_1505 = D.45312_1090->flags;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.47964_1506 = D.47965_1505 & 256;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000100).  Adding SSA edges to worklist.

Visiting statement:
if (D.47964_1506 != 0)
which is likely CONSTANT
Adding Destination of edge (440 -> 441) to worklist


Simulating block 441

Visiting statement:
D.47963_1507 = D.45312_1090->mutex;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47963_1507 != 0B)
which is likely CONSTANT
Adding Destination of edge (441 -> 442) to worklist


Simulating block 442

Visiting statement:
D.47962_1508 = D.45312_1090->codec_interface;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47962_1508 != 0B)
which is likely CONSTANT
Adding Destination of edge (442 -> 443) to worklist


Simulating block 443

Visiting statement:
D.47961_1509 = D.45312_1090->implementation;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47961_1509 != 0B)
which is likely CONSTANT
Adding Destination of edge (443 -> 445) to worklist


Simulating block 445

Visiting PHI node: iftmp.104_1510 = PHI <1(443), 0(444)>

    Argument #0 (443 -> 445 executable)
	1	Value: CONSTANT 1

    Argument #1 (444 -> 445 not executable)

    PHI node value: CONSTANT 1

Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.47960_1511 = (switch_bool_t) iftmp.104_1510;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.47960_1549 = D.47960_1511;
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.47960_1091 = D.47960_1549;
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
if (D.47960_1091 != 0)
which is likely CONSTANT
Adding Destination of edge (445 -> 446) to worklist


Simulating block 446
Adding Destination of edge (446 -> 447) to worklist


Simulating block 447

Visiting statement:
if (D.45316_1092 == 0)
which is likely CONSTANT
Adding Destination of edge (447 -> 448) to worklist


Simulating block 448

Simulating block 449

Visiting PHI node: match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

    Argument #0 (346 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #1 (348 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	match_16	Value: CONSTANT 0

    Argument #4 (447 -> 449 executable)
	match_14	Value: CONSTANT 1

    Argument #5 (448 -> 449 executable)
	match_14	Value: CONSTANT 1

    Argument #6 (343 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #7 (344 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #8 (341 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #9 (342 -> 449 executable)
	match_13	Value: CONSTANT 0

    Argument #10 (347 -> 449 executable)
	match_13	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting PHI node: got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>

    Argument #0 (346 -> 449 executable)
	got_audio_65	Value: CONSTANT 0

    Argument #1 (348 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #4 (447 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #5 (448 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #6 (343 -> 449 executable)
	got_audio_65	Value: CONSTANT 0

    Argument #7 (344 -> 449 executable)
	got_audio_65	Value: CONSTANT 0

    Argument #8 (341 -> 449 executable)
	got_audio_65	Value: CONSTANT 0

    Argument #9 (342 -> 449 executable)
	got_audio_65	Value: CONSTANT 0

    Argument #10 (347 -> 449 executable)
	got_audio_65	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>

    Argument #0 (346 -> 449 executable)
	codec_ms_93	Value: CONSTANT 0

    Argument #1 (348 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #4 (447 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #5 (448 -> 449 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #6 (343 -> 449 executable)
	codec_ms_93	Value: CONSTANT 0

    Argument #7 (344 -> 449 executable)
	codec_ms_93	Value: CONSTANT 0

    Argument #8 (341 -> 449 executable)
	codec_ms_93	Value: CONSTANT 0

    Argument #9 (342 -> 449 executable)
	codec_ms_93	Value: CONSTANT 0

    Argument #10 (347 -> 449 executable)
	codec_ms_93	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

    Argument #0 (346 -> 449 executable)
	nm_idx_120	Value: CONSTANT 0

    Argument #1 (348 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	nm_idx_876	Value: CONSTANT 0

    Argument #4 (447 -> 449 executable)
	nm_idx_876	Value: CONSTANT 0

    Argument #5 (448 -> 449 executable)
	nm_idx_876	Value: CONSTANT 0

    Argument #6 (343 -> 449 executable)
	nm_idx_120	Value: CONSTANT 0

    Argument #7 (344 -> 449 executable)
	nm_idx_120	Value: CONSTANT 0

    Argument #8 (341 -> 449 executable)
	nm_idx_120	Value: CONSTANT 0

    Argument #9 (342 -> 449 executable)
	nm_idx_120	Value: CONSTANT 0

    Argument #10 (347 -> 449 executable)
	nm_idx_120	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): match_16 = PHI <match_148(101), match_15(449)>

Visiting PHI node: match_16 = PHI <match_148(101), match_15(449)>

    Argument #0 (101 -> 450 executable)
	match_148	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	match_15	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 executable)
	match_437	Value: CONSTANT 0

    Argument #3 (152 -> 451 executable)
	match_492	Value: CONSTANT 1

    Argument #4 (186 -> 451 executable)
	match_543	Value: CONSTANT 0

    Argument #5 (192 -> 451 executable)
	match_553	Value: CONSTANT 0

    Argument #6 (196 -> 451 executable)
	match_557	Value: CONSTANT 0

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 executable)
	match_974	Value: CONSTANT 0

    Argument #9 (450 -> 451 executable)
	match_16	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): match_8 = PHI <match_16(197), match_7(280)>

Visiting PHI node: match_8 = PHI <match_16(197), match_7(280)>

    Argument #0 (197 -> 281 executable)
	match_16	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (280 -> 281 executable)
	match_7	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_9 = PHI <match_6(279), match_8(281)>

Visiting PHI node: match_9 = PHI <match_6(279), match_8(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_10 = PHI <match_9(282), match_716(283)>

Visiting PHI node: match_10 = PHI <match_9(282), match_716(283)>

    Argument #0 (282 -> 284 executable)
	match_9	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (283 -> 284 executable)
	match_716	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_11 = PHI <match_10(284), match_741(294), match_10(296)>

Visiting PHI node: match_11 = PHI <match_10(284), match_741(294), match_10(296)>

    Argument #0 (284 -> 297 executable)
	match_10	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (294 -> 297 not executable)

    Argument #2 (296 -> 297 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_12 = PHI <match_11(297), match_745(322)>

Visiting PHI node: match_12 = PHI <match_11(297), match_745(322)>

    Argument #0 (297 -> 323 executable)
	match_11	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (322 -> 323 executable)
	match_745	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (match_12 != 0)

Visiting statement:
if (match_12 != 0)
which is likely CONSTANT
Adding Destination of edge (323 -> 324) to worklist


Simulating statement (from ssa_edges): match_13 = PHI <match_12(323), match_12(333), match_825(334)>

Visiting PHI node: match_13 = PHI <match_12(323), match_12(333), match_825(334)>

    Argument #0 (323 -> 335 executable)
	match_12	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (333 -> 335 not executable)

    Argument #2 (334 -> 335 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (match_8 != 0)

Visiting statement:
if (match_8 != 0)
which is likely CONSTANT
Adding Destination of edge (213 -> 214) to worklist


Simulating statement (from ssa_edges): match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>

Visiting PHI node: match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>

    Argument #0 (204 -> 280 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (210 -> 280 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_8 = PHI <match_16(197), match_7(280)>

Visiting PHI node: match_8 = PHI <match_16(197), match_7(280)>

    Argument #0 (197 -> 281 executable)
	match_16	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (280 -> 281 executable)
	match_7	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): match_5 = PHI <match_8(241), match_4(277)>

Visiting PHI node: match_5 = PHI <match_8(241), match_4(277)>

    Argument #0 (241 -> 278 not executable)

    Argument #1 (277 -> 278 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

Visiting PHI node: match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

    Argument #0 (346 -> 449 executable)
	match_13	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (348 -> 449 executable)
	match_16	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (349 -> 449 executable)
	match_16	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (428 -> 449 executable)
	match_16	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (447 -> 449 executable)
	match_14	Value: CONSTANT 1

    Argument #5 (448 -> 449 executable)
	match_14	Value: CONSTANT 1

    Argument #6 (343 -> 449 executable)
	match_13	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #7 (344 -> 449 executable)
	match_13	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #8 (341 -> 449 executable)
	match_13	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #9 (342 -> 449 executable)
	match_13	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #10 (347 -> 449 executable)
	match_13	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): D.45307_1086 = match_16 == 0;

Visiting statement:
D.45307_1086 = match_16 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45309_1088 = D.45307_1086 && D.45308_1087;

Visiting statement:
D.45309_1088 = D.45307_1086 && D.45308_1087;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_14 = PHI <match_16(437), match_1089(438)>

Visiting PHI node: match_14 = PHI <match_16(437), match_1089(438)>

    Argument #0 (437 -> 439 not executable)

    Argument #1 (438 -> 439 executable)
	match_1089	Value: CONSTANT 1

    PHI node value: CONSTANT 1


Simulating block 234

Visiting statement:
D.44889_608 = map_128->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44893_609 = map_128->rm_fmtp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44854_610 = map_128->rm_rate;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44905_611 == 0)
which is likely CONSTANT
Adding Destination of edge (234 -> 235) to worklist


Simulating statement (from ssa_edges): if (D.45309_1088 != 0)

Visiting statement:
if (D.45309_1088 != 0)
which is likely CONSTANT
Adding Destination of edge (437 -> 439) to worklist


Simulating block 232

Visiting statement:
D.44889_604 = map_128->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44901_605 == 0)
which is likely CONSTANT
Adding Destination of edge (232 -> 233) to worklist


Simulating block 233

Visiting statement:
codec_ms_606 = 39;
which is likely CONSTANT
Lattice value changed to CONSTANT 39.  Adding SSA edges to worklist.

Visiting statement:
map_bit_rate_607 = 32001;
which is likely CONSTANT
Lattice value changed to CONSTANT 32001.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>

Visiting PHI node: map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>

    Argument #0 (232 -> 241 executable)
	map_bit_rate_592	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>

Visiting PHI node: codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>

    Argument #0 (232 -> 241 executable)
	codec_ms_88	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 241

Visiting PHI node: fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>

    Argument #0 (232 -> 241 executable)
	fmtp_remote_codec_rate_597	Value: CONSTANT 0

    Argument #1 (234 -> 241 executable)
	fmtp_remote_codec_rate_597	Value: CONSTANT 0

    Argument #2 (239 -> 241 not executable)

    Argument #3 (240 -> 241 not executable)

    Argument #4 (231 -> 241 executable)
	fmtp_remote_codec_rate_597	Value: CONSTANT 0

    Argument #5 (233 -> 241 executable)
	fmtp_remote_codec_rate_597	Value: CONSTANT 0

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
i_620 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (241 -> 278) to worklist


Simulating statement (from ssa_edges): D.44990_690 = codec_ms_90 != 0;

Simulating statement (from ssa_edges): D.44993_692 = codec_ms_90 * 1000;

Simulating statement (from ssa_edges): codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>

Visiting PHI node: codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	codec_ms_92	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>

Visiting PHI node: codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>

    Argument #0 (204 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 not executable)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): D.44955_666 = map_bit_rate_132 != 0;

Simulating statement (from ssa_edges): D.44956_667 = map_bit_rate_132 != bit_rate_631;

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44997_623 = D.44996_622 > i_129;

Simulating statement (from ssa_edges): D.44998_624 = i_129 < total_codecs_85;

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Simulating statement (from ssa_edges): if (D.44947_658 == fmtp_remote_codec_rate_99)

Simulating statement (from ssa_edges): if (fmtp_remote_codec_rate_99 != 0)

Simulating statement (from ssa_edges): remote_codec_rate_662 = fmtp_remote_codec_rate_99;

Simulating block 301

Visiting statement:
D.45034_747 = matches[j_135].map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45035_748 = D.45034_747->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45034_749 = matches[j_135].map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45036_750 = D.45034_749->rm_fmtp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45034_751 = matches[j_135].map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45037_752 = D.45034_751->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45038_753 = (uint32_t) D.45037_752;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45039_754 = matches[j_135].imp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45040_755 = D.45039_754->samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45039_756 = matches[j_135].imp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45041_757 = D.45039_756->microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45042_758 = D.45041_757 / 1000;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45043_759 = (uint32_t) D.45042_758;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
mimp_761 = matches[j_135].imp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
mmap_762 = matches[j_135].map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (j_135 == 0)
which is likely CONSTANT
Adding Destination of edge (301 -> 302) to worklist


Simulating statement (from ssa_edges): D.45049_767 = mmap_762->rm_encoding;

Simulating statement (from ssa_edges): D.45053_771 = mmap_762->rm_pt;

Simulating statement (from ssa_edges): D.45066_783 = mmap_762->rm_params;

Simulating statement (from ssa_edges): D.45066_784 = mmap_762->rm_params;

Simulating statement (from ssa_edges): D.45049_787 = mmap_762->rm_encoding;

Simulating statement (from ssa_edges): D.45079_790 = mmap_762->rm_fmtp;

Simulating statement (from ssa_edges): D.45079_792 = mmap_762->rm_fmtp;

Simulating statement (from ssa_edges): D.45079_799 = mmap_762->rm_fmtp;

Simulating statement (from ssa_edges): D.45053_801 = mmap_762->rm_pt;

Simulating statement (from ssa_edges): D.45053_805 = mmap_762->rm_pt;

Simulating statement (from ssa_edges): D.45051_769 = mimp_761->iananame;

Simulating statement (from ssa_edges): D.45055_773 = mimp_761->samples_per_second;

Simulating statement (from ssa_edges): D.45055_774 = mimp_761->samples_per_second;

Simulating statement (from ssa_edges): D.45051_775 = mimp_761->iananame;

Simulating statement (from ssa_edges): D.45059_777 = mimp_761->actual_samples_per_second;

Simulating statement (from ssa_edges): D.45060_778 = mimp_761->microseconds_per_packet;

Simulating statement (from ssa_edges): D.45063_781 = mimp_761->bits_per_second;

Simulating block 302

Visiting statement:
D.44750_763 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44605_764 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44605_764 != 0B)
which is likely CONSTANT
Adding Destination of edge (302 -> 303) to worklist

Adding Destination of edge (302 -> 304) to worklist


Simulating block 303

Visiting statement:
D.44605_765 = a_engine_188->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45048_766 = pmap_760->pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 323

Visiting PHI node: match_12 = PHI <match_11(297), match_745(322)>

    Argument #0 (297 -> 323 executable)
	match_11	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (322 -> 323 executable)
	match_745	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 433

Visiting statement:
D.45286_1045 = v_engine_189->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45287_1046 = v_engine_189->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45287_1046 != 0B)
which is likely CONSTANT
Adding Destination of edge (433 -> 434) to worklist

Adding Destination of edge (433 -> 435) to worklist


Simulating block 434

Visiting statement:
D.45287_1047 = v_engine_189->rtp_session;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45290_1048 = pmap_1044->pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 444
Adding Destination of edge (444 -> 445) to worklist


Simulating block 324

Visiting statement:
D.44750_808 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44762_809 = D.44750_808->remote_sdp_port;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44767_810 = (int) D.44762_809;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_811 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44750_812 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44760_813 = D.44750_812->remote_sdp_ip;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_814 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44750_815 = a_engine_188->cur_payload_map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45092_816 = D.44750_815->recv_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45093_817 = (int) D.45092_816;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44530_818 = session_161(D)->channel;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45094_819 = &a_engine_188->read_codec;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45094_819 != 0B)
which is likely CONSTANT
Adding Destination of edge (324 -> 325) to worklist

Adding Destination of edge (324 -> 329) to worklist


Simulating statement (from ssa_edges): D.47934_1488 = D.45094_819->flags;

Simulating statement (from ssa_edges): D.47932_1490 = D.45094_819->mutex;

Simulating statement (from ssa_edges): D.47931_1491 = D.45094_819->codec_interface;

Simulating statement (from ssa_edges): D.47930_1492 = D.45094_819->implementation;

Simulating block 214
Adding Destination of edge (214 -> 280) to worklist


Simulating block 235

Visiting statement:
D.44908_612 = codec_fmtp.bits_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44908_612 != 0)
which is likely CONSTANT
Adding Destination of edge (235 -> 236) to worklist

Adding Destination of edge (235 -> 237) to worklist


Simulating block 236

Visiting statement:
D.44908_613 = codec_fmtp.bits_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
map_bit_rate_614 = (uint32_t) D.44908_613;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): map_bit_rate_131 = PHI <map_bit_rate_592(235), map_bit_rate_614(236)>

Visiting PHI node: map_bit_rate_131 = PHI <map_bit_rate_592(235), map_bit_rate_614(236)>

    Argument #0 (235 -> 237 executable)
	map_bit_rate_592	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 439

Visiting PHI node: match_14 = PHI <match_16(437), match_1089(438)>

    Argument #0 (437 -> 439 executable)
	match_16	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (438 -> 439 executable)
	match_1089	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

Visiting PHI node: match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

    Argument #0 (346 -> 449 executable)
	match_13	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (348 -> 449 executable)
	match_16	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (349 -> 449 executable)
	match_16	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (428 -> 449 executable)
	match_16	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (447 -> 449 executable)
	match_14	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (448 -> 449 executable)
	match_14	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #6 (343 -> 449 executable)
	match_13	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #7 (344 -> 449 executable)
	match_13	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #8 (341 -> 449 executable)
	match_13	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #9 (342 -> 449 executable)
	match_13	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #10 (347 -> 449 executable)
	match_13	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 278

Visiting PHI node: match_5 = PHI <match_8(241), match_4(277)>

    Argument #0 (241 -> 278 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (277 -> 278 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting PHI node: remote_codec_rate_98 = PHI <remote_codec_rate_596(241), remote_codec_rate_97(277)>

    Argument #0 (241 -> 278 executable)
	remote_codec_rate_596	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting PHI node: m_idx_101 = PHI <m_idx_104(241), m_idx_100(277)>

    Argument #0 (241 -> 278 executable)
	m_idx_104	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 not executable)

    PHI node value: CONSTANT 0


Visiting statement:
D.44471_621 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44996_622 = D.44471_621->num_codecs;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44997_623 = D.44996_622 > i_129;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44998_624 = i_129 < total_codecs_85;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44999_625 = D.44997_623 && D.44998_624;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44999_625 != 0)
which is likely CONSTANT
Adding Destination of edge (278 -> 242) to worklist

Adding Destination of edge (278 -> 279) to worklist


Simulating statement (from ssa_edges): m_idx_102 = PHI <m_idx_703(275), m_idx_101(278)>

Visiting PHI node: m_idx_102 = PHI <m_idx_703(275), m_idx_101(278)>

    Argument #0 (275 -> 279 not executable)

    Argument #1 (278 -> 279 executable)
	m_idx_101	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (m_idx_102 > 29)

Simulating statement (from ssa_edges): m_idx_100 = PHI <m_idx_101(243), m_idx_101(268), m_idx_101(274), m_idx_703(276)>

Visiting PHI node: m_idx_100 = PHI <m_idx_101(243), m_idx_101(268), m_idx_101(274), m_idx_703(276)>

    Argument #0 (243 -> 277 not executable)

    Argument #1 (268 -> 277 not executable)

    Argument #2 (274 -> 277 not executable)

    Argument #3 (276 -> 277 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): m_idx_703 = m_idx_101 + 1;

Simulating statement (from ssa_edges): remote_codec_rate_97 = PHI <remote_codec_rate_98(243), remote_codec_rate_96(268), remote_codec_rate_96(274), remote_codec_rate_96(276)>

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_98(243), remote_codec_rate_96(268), remote_codec_rate_96(274), remote_codec_rate_96(276)>

    Argument #0 (243 -> 277 not executable)

    Argument #1 (268 -> 277 not executable)

    Argument #2 (274 -> 277 not executable)

    Argument #3 (276 -> 277 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): remote_codec_rate.92_636 = (int) remote_codec_rate_98;

Simulating statement (from ssa_edges): if (remote_codec_rate_98 == codec_rate_632)

Simulating statement (from ssa_edges): remote_codec_rate_96 = PHI <remote_codec_rate_98(250), remote_codec_rate_98(256), remote_codec_rate_662(257)>

Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_98(250), remote_codec_rate_98(256), remote_codec_rate_662(257)>

    Argument #0 (250 -> 258 not executable)

    Argument #1 (256 -> 258 not executable)

    Argument #2 (257 -> 258 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 not executable)

    Argument #1 (268 -> 277 not executable)

    Argument #2 (274 -> 277 not executable)

    Argument #3 (276 -> 277 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>

Visiting PHI node: nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	nm_idx_118	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>

Visiting PHI node: nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>

    Argument #0 (204 -> 280 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): match_6 = PHI <match_3(275), match_5(278)>

Visiting PHI node: match_6 = PHI <match_3(275), match_5(278)>

    Argument #0 (275 -> 279 not executable)

    Argument #1 (278 -> 279 executable)
	match_5	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_9 = PHI <match_6(279), match_8(281)>

Visiting PHI node: match_9 = PHI <match_6(279), match_8(281)>

    Argument #0 (279 -> 282 not executable)

    Argument #1 (281 -> 282 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>

Visiting PHI node: match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>

    Argument #0 (204 -> 280 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (210 -> 280 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): match_4 = PHI <match_5(243), match_3(268), match_694(274), match_709(276)>

Visiting PHI node: match_4 = PHI <match_5(243), match_3(268), match_694(274), match_709(276)>

    Argument #0 (243 -> 277 not executable)

    Argument #1 (268 -> 277 not executable)

    Argument #2 (274 -> 277 not executable)

    Argument #3 (276 -> 277 not executable)

    PHI node value: UNDEFINED


Simulating block 242

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
D.44919_628 = codec_array_84 + D.44918_627;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000ffffffff).  Adding SSA edges to worklist.

Visiting statement:
imp_629 = *D.44919_628;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44920_630 = imp_629->bits_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
bit_rate_631 = (uint32_t) D.44920_630;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
codec_rate_632 = imp_629->samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44921_633 = imp_629->codec_type;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44921_633 != 0)
which is likely CONSTANT
Adding Destination of edge (242 -> 243) to worklist

Adding Destination of edge (242 -> 244) to worklist


Simulating statement (from ssa_edges): if (remote_codec_rate_98 == codec_rate_632)

Simulating statement (from ssa_edges): D.44972_677 = codec_rate_632 != 0;

Simulating statement (from ssa_edges): D.44973_678 = remote_codec_rate_96 != codec_rate_632;

Simulating statement (from ssa_edges): if (remote_codec_rate_96 != codec_rate_632)

Simulating statement (from ssa_edges): codec_rate.94_702 = (int) codec_rate_632;

Simulating statement (from ssa_edges): D.44951_664 = bit_rate_631 != 0;

Simulating statement (from ssa_edges): D.44956_667 = map_bit_rate_132 != bit_rate_631;

Simulating statement (from ssa_edges): D.44926_637 = imp_629->iananame;

Simulating statement (from ssa_edges): D.44927_638 = imp_629->ianacode;

Simulating statement (from ssa_edges): D.44929_640 = imp_629->microseconds_per_packet;

Simulating statement (from ssa_edges): D.44927_653 = imp_629->ianacode;

Simulating statement (from ssa_edges): D.44926_656 = imp_629->iananame;

Simulating statement (from ssa_edges): D.44947_658 = imp_629->actual_samples_per_second;

Simulating statement (from ssa_edges): D.44926_685 = imp_629->iananame;

Simulating statement (from ssa_edges): D.44984_686 = imp_629->samples_per_second;

Simulating statement (from ssa_edges): D.44929_687 = imp_629->microseconds_per_packet;

Simulating statement (from ssa_edges): D.44929_693 = imp_629->microseconds_per_packet;

Simulating statement (from ssa_edges): D.44926_695 = imp_629->iananame;

Simulating statement (from ssa_edges): D.44927_696 = imp_629->ianacode;

Simulating statement (from ssa_edges): D.44929_698 = imp_629->microseconds_per_packet;

Simulating statement (from ssa_edges): D.44926_704 = imp_629->iananame;

Simulating statement (from ssa_edges): D.44927_705 = imp_629->ianacode;

Simulating statement (from ssa_edges): D.44929_707 = imp_629->microseconds_per_packet;

Simulating block 243
Adding Destination of edge (243 -> 277) to worklist


Simulating block 304

Visiting statement:
D.45049_767 = mmap_762->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45051_769 = mimp_761->iananame;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45053_771 = mmap_762->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45054_772 = (unsigned char) D.45053_771;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45055_773 = mimp_761->samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45055_774 = mimp_761->samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45051_775 = mimp_761->iananame;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45056_776 != 0)
which is likely CONSTANT
Adding Destination of edge (304 -> 305) to worklist

Adding Destination of edge (304 -> 306) to worklist


Simulating block 305

Visiting statement:
D.45059_777 = mimp_761->actual_samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 435

Visiting statement:
mimp_1049 = matches[j_141].imp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
map_1050 = matches[j_141].map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45255_1051 = map_1050->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45247_1053 = map_1050->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45292_1054 = (unsigned char) D.45247_1053;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45262_1055 = map_1050->rm_rate;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45293_1056 = mimp_1049->microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45294_1057 = D.45293_1056 / 1000;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45295_1058 = (uint32_t) D.45294_1057;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45085_1059 = connection_125->c_address;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44697_1061 = m_28->m_port;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45087_1062 = (short unsigned int) D.44697_1061;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45297_1063 = map_1050->rm_fmtp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45247_1065 = map_1050->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45292_1066 = (unsigned char) D.45247_1065;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.
Adding Destination of edge (435 -> 436) to worklist


Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (j_141 == 0)

Visiting statement:
if (j_141 == 0)
which is likely CONSTANT
Adding Destination of edge (432 -> 435) to worklist


Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_1067 = j_141 + 1;

Visiting statement:
j_1067 = j_141 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 445

Visiting PHI node: iftmp.104_1510 = PHI <1(443), 0(444)>

    Argument #0 (443 -> 445 executable)
	1	Value: CONSTANT 1

    Argument #1 (444 -> 445 executable)
	0	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_141 = PHI <j_1030(431), j_1067(435)>

Visiting PHI node: j_141 = PHI <j_1030(431), j_1067(435)>

    Argument #0 (431 -> 436 executable)
	j_1030	Value: CONSTANT 0

    Argument #1 (435 -> 436 executable)
	j_1067	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.47960_1511 = (switch_bool_t) iftmp.104_1510;

Visiting statement:
D.47960_1511 = (switch_bool_t) iftmp.104_1510;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.47960_1549 = D.47960_1511;

Visiting statement:
D.47960_1549 = D.47960_1511;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.47960_1091 = D.47960_1549;

Visiting statement:
D.47960_1091 = D.47960_1549;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (D.47960_1091 != 0)

Visiting statement:
if (D.47960_1091 != 0)
which is likely CONSTANT
Adding Destination of edge (445 -> 447) to worklist


Simulating block 325

Visiting statement:
D.47934_1488 = D.45094_819->flags;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.47933_1489 = D.47934_1488 & 256;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000100).  Adding SSA edges to worklist.

Visiting statement:
if (D.47933_1489 != 0)
which is likely CONSTANT
Adding Destination of edge (325 -> 326) to worklist


Simulating block 326

Visiting statement:
D.47932_1490 = D.45094_819->mutex;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47932_1490 != 0B)
which is likely CONSTANT
Adding Destination of edge (326 -> 327) to worklist


Simulating block 327

Visiting statement:
D.47931_1491 = D.45094_819->codec_interface;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47931_1491 != 0B)
which is likely CONSTANT
Adding Destination of edge (327 -> 328) to worklist


Simulating block 328

Visiting statement:
D.47930_1492 = D.45094_819->implementation;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47930_1492 != 0B)
which is likely CONSTANT
Adding Destination of edge (328 -> 330) to worklist


Simulating block 330

Visiting PHI node: iftmp.104_1493 = PHI <1(328), 0(329)>

    Argument #0 (328 -> 330 executable)
	1	Value: CONSTANT 1

    Argument #1 (329 -> 330 not executable)

    PHI node value: CONSTANT 1

Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.47929_1494 = (switch_bool_t) iftmp.104_1493;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.47929_1540 = D.47929_1494;
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.47929_820 = D.47929_1540;
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
if (D.47929_820 != 0)
which is likely CONSTANT
Adding Destination of edge (330 -> 331) to worklist


Simulating block 331
Adding Destination of edge (331 -> 332) to worklist


Simulating block 332

Visiting statement:
D.44471_821 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45098_822 = D.44471_821->codec_flags;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45099_823 == 0)
which is likely CONSTANT
Adding Destination of edge (332 -> 333) to worklist

Adding Destination of edge (332 -> 334) to worklist


Simulating block 333

Visiting statement:
got_audio_824 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.
Adding Destination of edge (333 -> 335) to worklist


Simulating statement (from ssa_edges): got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>

Visiting PHI node: got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>

    Argument #0 (323 -> 335 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #1 (333 -> 335 executable)
	got_audio_824	Value: CONSTANT 1

    Argument #2 (334 -> 335 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>

Visiting PHI node: got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>

    Argument #0 (346 -> 449 executable)
	got_audio_65	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (348 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #4 (447 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #5 (448 -> 449 executable)
	got_audio_67	Value: CONSTANT 0

    Argument #6 (343 -> 449 executable)
	got_audio_65	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #7 (344 -> 449 executable)
	got_audio_65	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #8 (341 -> 449 executable)
	got_audio_65	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #9 (342 -> 449 executable)
	got_audio_65	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #10 (347 -> 449 executable)
	got_audio_65	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_audio_67 = PHI <got_audio_166(101), got_audio_66(449)>

Visiting PHI node: got_audio_67 = PHI <got_audio_166(101), got_audio_66(449)>

    Argument #0 (101 -> 450 executable)
	got_audio_166	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	got_audio_66	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44778_496 = got_audio_67 == 0;

Visiting statement:
D.44778_496 = got_audio_67 == 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>

Visiting PHI node: got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>

    Argument #0 (323 -> 335 executable)
	got_audio_67	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (333 -> 335 executable)
	got_audio_824	Value: CONSTANT 1

    Argument #2 (334 -> 335 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>

Visiting PHI node: got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>

    Argument #0 (346 -> 449 executable)
	got_audio_65	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (348 -> 449 executable)
	got_audio_67	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (349 -> 449 executable)
	got_audio_67	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (428 -> 449 executable)
	got_audio_67	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (447 -> 449 executable)
	got_audio_67	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #5 (448 -> 449 executable)
	got_audio_67	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #6 (343 -> 449 executable)
	got_audio_65	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #7 (344 -> 449 executable)
	got_audio_65	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #8 (341 -> 449 executable)
	got_audio_65	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #9 (342 -> 449 executable)
	got_audio_65	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #10 (347 -> 449 executable)
	got_audio_65	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 335

Visiting PHI node: match_13 = PHI <match_12(323), match_12(333), match_825(334)>

    Argument #0 (323 -> 335 executable)
	match_12	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (333 -> 335 executable)
	match_12	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (334 -> 335 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>

    Argument #0 (323 -> 335 executable)
	got_audio_67	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (333 -> 335 executable)
	got_audio_824	Value: CONSTANT 1

    Argument #2 (334 -> 335 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 329
Adding Destination of edge (329 -> 330) to worklist


Simulating block 330

Visiting PHI node: iftmp.104_1493 = PHI <1(328), 0(329)>

    Argument #0 (328 -> 330 executable)
	1	Value: CONSTANT 1

    Argument #1 (329 -> 330 executable)
	0	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.47929_1494 = (switch_bool_t) iftmp.104_1493;

Visiting statement:
D.47929_1494 = (switch_bool_t) iftmp.104_1493;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.47929_1540 = D.47929_1494;

Visiting statement:
D.47929_1540 = D.47929_1494;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.47929_820 = D.47929_1540;

Visiting statement:
D.47929_820 = D.47929_1540;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (D.47929_820 != 0)

Visiting statement:
if (D.47929_820 != 0)
which is likely CONSTANT
Adding Destination of edge (330 -> 332) to worklist


Simulating block 332

Simulating block 280

Visiting PHI node: match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>

    Argument #0 (204 -> 280 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (210 -> 280 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 0

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 1

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting PHI node: codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>

    Argument #0 (204 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 0


Visiting PHI node: nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>

    Argument #0 (204 -> 280 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 1

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (D.44870_579 != 0)

Visiting statement:
if (D.44870_579 != 0)
which is likely CONSTANT
Adding Destination of edge (211 -> 212) to worklist


Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (212 -> 280 not executable)

    Argument #3 (214 -> 280 executable)
	x_580	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #4 (279 -> 280 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)


Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT

Simulating statement (from ssa_edges): x_580 = x_49 + 1;

Visiting statement:
x_580 = x_49 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 212
Adding Destination of edge (212 -> 280) to worklist


Simulating statement (from ssa_edges): x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

Visiting PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>

    Argument #0 (204 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (210 -> 280 executable)
	x_49	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (212 -> 280 executable)
	x_580	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): x_49 = PHI <x_558(197), x_48(280)>

Visiting PHI node: x_49 = PHI <x_558(197), x_48(280)>

    Argument #0 (197 -> 281 executable)
	x_558	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	x_48	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44870_579 = x_49 < skip_160;

Visiting statement:
D.44870_579 = x_49 < skip_160;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 237

Visiting statement:
D.44911_615 = codec_fmtp.microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44911_615 != 0)
which is likely CONSTANT
Adding Destination of edge (237 -> 238) to worklist

Adding Destination of edge (237 -> 239) to worklist


Simulating block 238

Visiting statement:
D.44911_616 = codec_fmtp.microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
codec_ms_617 = D.44911_616 / 1000;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>

Visiting PHI node: codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>

    Argument #0 (237 -> 239 executable)
	codec_ms_88	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 279

Visiting PHI node: match_6 = PHI <match_3(275), match_5(278)>

    Argument #0 (275 -> 279 not executable)

    Argument #1 (278 -> 279 executable)
	match_5	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting statement:
if (m_idx_102 > 29)
which is likely CONSTANT
Adding Destination of edge (279 -> 282) to worklist


Simulating block 244

Visiting statement:
D.44856_634 = map_128->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44924_635 = (int) D.44856_634;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
remote_codec_rate.92_636 = (int) remote_codec_rate_98;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44926_637 = imp_629->iananame;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44927_638 = imp_629->ianacode;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44928_639 = (int) D.44927_638;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44929_640 = imp_629->microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44930_641 = D.44929_640 / 1000;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44889_642 = map_128->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44889_642 == 0B)
which is likely CONSTANT
Adding Destination of edge (244 -> 247) to worklist

Adding Destination of edge (244 -> 245) to worklist


Simulating statement (from ssa_edges): D.47919_1483 = *D.44889_642;

Simulating block 245

Visiting statement:
D.47919_1483 = *D.44889_642;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47919_1483 == 0)
which is likely CONSTANT
Adding Destination of edge (245 -> 246) to worklist


Simulating block 246

Simulating block 247

Visiting PHI node: D.47918_1484 = PHI <1(244), 1(245), 0(246)>

    Argument #0 (244 -> 247 executable)
	1	Value: CONSTANT 1

    Argument #1 (245 -> 247 executable)
	1	Value: CONSTANT 1

    Argument #2 (246 -> 247 executable)
	0	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47918_1536 = D.47918_1484;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47918_643 = D.47918_1536;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.47918_643 != 0)
which is likely CONSTANT
Adding Destination of edge (247 -> 249) to worklist

Adding Destination of edge (247 -> 248) to worklist


Simulating block 248

Visiting statement:
D.44471_644 = smh_186->mparams;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44821_645 = D.44471_644->ndlb;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44936_646 = (int) D.44821_645;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44937_647 = D.44936_646 & 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44938_648 = (_Bool) D.44937_647;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.44938_648 != 0)
which is likely CONSTANT
Adding Destination of edge (248 -> 251) to worklist


Simulating block 249

Visiting statement:
D.44856_649 = map_128->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44924_650 = (int) D.44856_649;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44924_650 <= 95)
which is likely CONSTANT
Adding Destination of edge (249 -> 250) to worklist


Simulating block 250

Visiting statement:
D.44856_651 = map_128->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44924_652 = (int) D.44856_651;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44927_653 = imp_629->ianacode;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44928_654 = (int) D.44927_653;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
match_655 = D.44924_652 == D.44928_654;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (250 -> 258) to worklist


Simulating statement (from ssa_edges): match_1 = PHI <match_655(250), match_661(256), match_661(257)>

Visiting PHI node: match_1 = PHI <match_655(250), match_661(256), match_661(257)>

    Argument #0 (250 -> 258 executable)
	match_655	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44950_663 = match_1 != 0;

Simulating statement (from ssa_edges): match_2 = PHI <match_1(258), match_1(259), match_1(260), match_1(261), match_673(262)>

Visiting PHI node: match_2 = PHI <match_1(258), match_1(259), match_1(260), match_1(261), match_673(262)>

    Argument #0 (258 -> 263 not executable)

    Argument #1 (259 -> 263 not executable)

    Argument #2 (260 -> 263 not executable)

    Argument #3 (261 -> 263 not executable)

    Argument #4 (262 -> 263 not executable)

    PHI node value: UNDEFINED


Simulating block 258

Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_98(250), remote_codec_rate_98(256), remote_codec_rate_662(257)>

    Argument #0 (250 -> 258 executable)
	remote_codec_rate_98	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44950_663 = match_1 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44951_664 = bit_rate_631 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44952_665 = D.44950_663 && D.44951_664;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44952_665 != 0)
which is likely CONSTANT
Adding Destination of edge (258 -> 259) to worklist

Adding Destination of edge (258 -> 263) to worklist


Simulating statement (from ssa_edges): D.44968_675 = remote_codec_rate_96 != 0;

Simulating statement (from ssa_edges): D.44973_678 = remote_codec_rate_96 != codec_rate_632;

Simulating statement (from ssa_edges): if (remote_codec_rate_96 != codec_rate_632)

Simulating statement (from ssa_edges): remote_codec_rate.92_700 = (int) remote_codec_rate_96;

Simulating statement (from ssa_edges): remote_codec_rate_97 = PHI <remote_codec_rate_98(243), remote_codec_rate_96(268), remote_codec_rate_96(274), remote_codec_rate_96(276)>

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_98(243), remote_codec_rate_96(268), remote_codec_rate_96(274), remote_codec_rate_96(276)>

    Argument #0 (243 -> 277 executable)
	remote_codec_rate_98	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 259

Visiting statement:
D.44955_666 = map_bit_rate_132 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44956_667 = map_bit_rate_132 != bit_rate_631;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44957_668 = D.44955_666 && D.44956_667;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44957_668 != 0)
which is likely CONSTANT
Adding Destination of edge (259 -> 260) to worklist


Simulating block 260

Visiting statement:
D.44889_669 = map_128->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44960_670 != 0)
which is likely CONSTANT
Adding Destination of edge (260 -> 261) to worklist


Simulating block 261

Visiting statement:
D.44889_671 = map_128->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44963_672 != 0)
which is likely CONSTANT
Adding Destination of edge (261 -> 262) to worklist


Simulating block 262

Visiting statement:
match_673 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_2 = PHI <match_1(258), match_1(259), match_1(260), match_1(261), match_673(262)>

Visiting PHI node: match_2 = PHI <match_1(258), match_1(259), match_1(260), match_1(261), match_673(262)>

    Argument #0 (258 -> 263 executable)
	match_1	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 277

Visiting PHI node: match_4 = PHI <match_5(243), match_3(268), match_694(274), match_709(276)>

    Argument #0 (243 -> 277 executable)
	match_5	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (268 -> 277 not executable)

    Argument #2 (274 -> 277 not executable)

    Argument #3 (276 -> 277 not executable)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting PHI node: m_idx_100 = PHI <m_idx_101(243), m_idx_101(268), m_idx_101(274), m_idx_703(276)>

    Argument #0 (243 -> 277 executable)
	m_idx_101	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 0

    Argument #1 (268 -> 277 not executable)

    Argument #2 (274 -> 277 not executable)

    Argument #3 (276 -> 277 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.
Adding Destination of edge (277 -> 278) to worklist


Simulating statement (from ssa_edges): D.44950_674 = match_2 != 0;

Simulating statement (from ssa_edges): match_3 = PHI <match_2(263), match_2(264), match_2(266), match_684(267)>

Visiting PHI node: match_3 = PHI <match_2(263), match_2(264), match_2(266), match_684(267)>

    Argument #0 (263 -> 268 not executable)

    Argument #1 (264 -> 268 not executable)

    Argument #2 (266 -> 268 not executable)

    Argument #3 (267 -> 268 not executable)

    PHI node value: UNDEFINED


Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000fffffffc).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44919_628 = codec_array_84 + D.44918_627;

Visiting statement:
D.44919_628 = codec_array_84 + D.44918_627;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating statement (from ssa_edges): i_710 = i_129 + 1;

Visiting statement:
i_710 = i_129 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): match_5 = PHI <match_8(241), match_4(277)>

Visiting PHI node: match_5 = PHI <match_8(241), match_4(277)>

    Argument #0 (241 -> 278 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (277 -> 278 executable)
	match_4	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 306

Visiting statement:
D.45060_778 = mimp_761->microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45061_779 = D.45060_778 / 1000;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45062_780 = (uint32_t) D.45061_779;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45063_781 = mimp_761->bits_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45064_782 = (uint32_t) D.45063_781;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45066_783 = mmap_762->rm_params;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45066_783 != 0B)
which is likely CONSTANT
Adding Destination of edge (306 -> 307) to worklist

Adding Destination of edge (306 -> 308) to worklist


Simulating statement (from ssa_edges): i_129 = PHI <i_620(241), i_710(277)>

Visiting PHI node: i_129 = PHI <i_620(241), i_710(277)>

    Argument #0 (241 -> 278 executable)
	i_620	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	i_710	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): i.91_626 = (unsigned int) i_129;

Visiting statement:
i.91_626 = (unsigned int) i_129;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.44918_627 = i.91_626 * 4;

Visiting statement:
D.44918_627 = i.91_626 * 4;
which is likely CONSTANT

Simulating block 307

Visiting statement:
D.45066_784 = mmap_762->rm_params;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.47922_1538 = D.47922_1485;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.47922_785 = D.47922_1538;
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (307 -> 309) to worklist


Simulating statement (from ssa_edges): D.47922_146 = PHI <D.47922_785(307), D.47922_786(308)>

Visiting PHI node: D.47922_146 = PHI <D.47922_785(307), D.47922_786(308)>

    Argument #0 (307 -> 309 executable)
	D.47922_785	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 436

Simulating block 435

Simulating block 447

Simulating block 334

Visiting statement:
match_825 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (334 -> 335) to worklist


Simulating statement (from ssa_edges): match_13 = PHI <match_12(323), match_12(333), match_825(334)>

Visiting PHI node: match_13 = PHI <match_12(323), match_12(333), match_825(334)>

    Argument #0 (323 -> 335 executable)
	match_12	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (333 -> 335 executable)
	match_12	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (334 -> 335 executable)
	match_825	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 335

Visiting PHI node: match_13 = PHI <match_12(323), match_12(333), match_825(334)>

    Argument #0 (323 -> 335 executable)
	match_12	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (333 -> 335 executable)
	match_12	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (334 -> 335 executable)
	match_825	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>

    Argument #0 (323 -> 335 executable)
	got_audio_67	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (333 -> 335 executable)
	got_audio_824	Value: CONSTANT 1

    Argument #2 (334 -> 335 executable)
	got_audio_67	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 280

Visiting PHI node: match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>

    Argument #0 (204 -> 280 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (210 -> 280 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (212 -> 280 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #3 (214 -> 280 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #4 (279 -> 280 executable)
	match_6	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>

    Argument #0 (204 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #2 (212 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #3 (214 -> 280 executable)
	codec_ms_92	Value: CONSTANT 0

    Argument #4 (279 -> 280 executable)
	codec_ms_90	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting PHI node: nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>

    Argument #0 (204 -> 280 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (210 -> 280 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #2 (212 -> 280 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #3 (214 -> 280 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #4 (279 -> 280 executable)
	nm_idx_116	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating statement (from ssa_edges): codec_ms_92 = PHI <codec_ms_95(197), codec_ms_91(280)>

Visiting PHI node: codec_ms_92 = PHI <codec_ms_95(197), codec_ms_91(280)>

    Argument #0 (197 -> 281 executable)
	codec_ms_95	Value: CONSTANT 0

    Argument #1 (280 -> 281 executable)
	codec_ms_91	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>

Visiting PHI node: codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>

    Argument #0 (279 -> 282 executable)
	codec_ms_90	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>

Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>

    Argument #0 (346 -> 449 executable)
	codec_ms_93	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): codec_ms_95 = PHI <codec_ms_181(101), codec_ms_94(449)>

Visiting PHI node: codec_ms_95 = PHI <codec_ms_181(101), codec_ms_94(449)>

    Argument #0 (101 -> 450 executable)
	codec_ms_181	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	codec_ms_94	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 239

Visiting statement:
D.44914_618 = codec_fmtp.actual_samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44914_618 != 0)
which is likely CONSTANT
Adding Destination of edge (239 -> 240) to worklist

Adding Destination of edge (239 -> 241) to worklist


Simulating block 240

Visiting statement:
fmtp_remote_codec_rate_619 = codec_fmtp.actual_samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>

Visiting PHI node: fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>

    Argument #0 (232 -> 241 executable)
	fmtp_remote_codec_rate_597	Value: CONSTANT 0

    Argument #1 (234 -> 241 executable)
	fmtp_remote_codec_rate_597	Value: CONSTANT 0

    Argument #2 (239 -> 241 executable)
	fmtp_remote_codec_rate_597	Value: CONSTANT 0

    Argument #3 (240 -> 241 executable)
	fmtp_remote_codec_rate_619	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (D.44947_658 == fmtp_remote_codec_rate_99)

Simulating statement (from ssa_edges): if (fmtp_remote_codec_rate_99 != 0)

Simulating statement (from ssa_edges): remote_codec_rate_662 = fmtp_remote_codec_rate_99;

Simulating block 282

Visiting PHI node: match_9 = PHI <match_6(279), match_8(281)>

    Argument #0 (279 -> 282 executable)
	match_6	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (281 -> 282 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>

    Argument #0 (279 -> 282 executable)
	nm_idx_116	Value: CONSTANT 0

    Argument #1 (281 -> 282 executable)
	nm_idx_118	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 251

Visiting statement:
D.44926_656 = imp_629->iananame;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44944_657 == 0)
which is likely CONSTANT
Adding Destination of edge (251 -> 252) to worklist

Adding Destination of edge (251 -> 255) to worklist


Simulating block 252

Visiting statement:
if (remote_codec_rate_98 == codec_rate_632)
which is likely VARYING
Adding Destination of edge (252 -> 254) to worklist

Adding Destination of edge (252 -> 253) to worklist


Simulating block 253

Visiting statement:
D.44947_658 = imp_629->actual_samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44947_658 == fmtp_remote_codec_rate_99)
which is likely VARYING

Simulating block 254

Visiting statement:
iftmp.93_659 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.
Adding Destination of edge (254 -> 256) to worklist


Simulating statement (from ssa_edges): iftmp.93_144 = PHI <iftmp.93_659(254), iftmp.93_660(255)>

Visiting PHI node: iftmp.93_144 = PHI <iftmp.93_659(254), iftmp.93_660(255)>

    Argument #0 (254 -> 256 executable)
	iftmp.93_659	Value: CONSTANT 1

    Argument #1 (255 -> 256 not executable)

    PHI node value: CONSTANT 1

Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_661 = (uint8_t) iftmp.93_144;

Simulating block 256

Visiting PHI node: iftmp.93_144 = PHI <iftmp.93_659(254), iftmp.93_660(255)>

    Argument #0 (254 -> 256 executable)
	iftmp.93_659	Value: CONSTANT 1

    Argument #1 (255 -> 256 not executable)

    PHI node value: CONSTANT 1


Visiting statement:
match_661 = (uint8_t) iftmp.93_144;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
if (fmtp_remote_codec_rate_99 != 0)
which is likely CONSTANT
Adding Destination of edge (256 -> 257) to worklist

Adding Destination of edge (256 -> 258) to worklist


Simulating block 257

Visiting statement:
remote_codec_rate_662 = fmtp_remote_codec_rate_99;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 263

Visiting statement:
D.44950_674 = match_2 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44968_675 = remote_codec_rate_96 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44969_676 = D.44950_674 && D.44968_675;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44969_676 != 0)
which is likely CONSTANT
Adding Destination of edge (263 -> 264) to worklist

Adding Destination of edge (263 -> 268) to worklist


Simulating block 264

Visiting statement:
D.44972_677 = codec_rate_632 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44973_678 = remote_codec_rate_96 != codec_rate_632;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44974_679 = D.44972_677 && D.44973_678;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44974_679 != 0)
which is likely CONSTANT
Adding Destination of edge (264 -> 265) to worklist


Simulating block 265

Visiting statement:
D.44889_680 = map_128->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44977_681 == 0)
which is likely CONSTANT
Adding Destination of edge (265 -> 267) to worklist

Adding Destination of edge (265 -> 266) to worklist


Simulating block 266

Visiting statement:
D.44889_682 = map_128->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44979_683 == 0)
which is likely CONSTANT

Simulating block 278

Visiting PHI node: match_5 = PHI <match_8(241), match_4(277)>

    Argument #0 (241 -> 278 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (277 -> 278 executable)
	match_4	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 0

    PHI node value: CONSTANT 0


Simulating block 308

Visiting statement:
D.47922_786 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating block 309

Visiting statement:
D.45049_787 = mmap_762->rm_encoding;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45070_788 == 0)
which is likely CONSTANT
Adding Destination of edge (309 -> 310) to worklist

Adding Destination of edge (309 -> 320) to worklist


Simulating block 310

Visiting statement:
D.45073_789 = pmap_760->channels;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45073_789 == 1)
which is likely CONSTANT
Adding Destination of edge (310 -> 311) to worklist

Adding Destination of edge (310 -> 312) to worklist


Simulating block 311
Adding Destination of edge (311 -> 313) to worklist


Simulating block 313

Visiting statement:
D.45079_790 = mmap_762->rm_fmtp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45079_790 == 0B)
which is likely CONSTANT
Adding Destination of edge (313 -> 316) to worklist

Adding Destination of edge (313 -> 314) to worklist


Simulating statement (from ssa_edges): D.47926_1486 = *D.45079_790;

Simulating block 314

Visiting statement:
D.47926_1486 = *D.45079_790;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.47926_1486 == 0)
which is likely CONSTANT
Adding Destination of edge (314 -> 315) to worklist


Simulating block 315

Simulating block 316

Visiting PHI node: D.47925_1487 = PHI <1(313), 1(314), 0(315)>

    Argument #0 (313 -> 316 executable)
	1	Value: CONSTANT 1

    Argument #1 (314 -> 316 executable)
	1	Value: CONSTANT 1

    Argument #2 (315 -> 316 executable)
	0	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47925_1539 = D.47925_1487;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.47925_791 = D.47925_1539;
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
if (D.47925_791 == 0)
which is likely CONSTANT
Adding Destination of edge (316 -> 317) to worklist

Adding Destination of edge (316 -> 319) to worklist


Simulating block 317

Visiting statement:
D.45079_792 = mmap_762->rm_fmtp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45082_793 != 0B)
which is likely CONSTANT
Adding Destination of edge (317 -> 318) to worklist


Simulating block 318
Adding Destination of edge (318 -> 321) to worklist


Simulating block 321

Visiting statement:
D.45085_795 = connection_124->c_address;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44697_797 = m_28->m_port;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45087_798 = (short unsigned int) D.44697_797;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45079_799 = mmap_762->rm_fmtp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45053_801 = mmap_762->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45054_802 = (unsigned char) D.45053_801;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44655_803 = smh_186->num_negotiated_codecs;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45089_804 = D.44655_803 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45053_805 = mmap_762->rm_pt;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45054_806 = (unsigned char) D.45053_805;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.
Adding Destination of edge (321 -> 322) to worklist


Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (j_135 == 0)

Visiting statement:
if (j_135 == 0)
which is likely CONSTANT
Adding Destination of edge (301 -> 304) to worklist


Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_807 = j_135 + 1;

Visiting statement:
j_807 = j_135 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 322

Visiting PHI node: j_135 = PHI <j_746(300), j_807(321)>

    Argument #0 (300 -> 322 executable)
	j_746	Value: CONSTANT 0

    Argument #1 (321 -> 322 executable)
	j_807	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_135 = PHI <j_746(300), j_807(321)>

Simulating block 241

Simulating block 255

Visiting statement:
iftmp.93_660 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (255 -> 256) to worklist


Simulating statement (from ssa_edges): iftmp.93_144 = PHI <iftmp.93_659(254), iftmp.93_660(255)>

Visiting PHI node: iftmp.93_144 = PHI <iftmp.93_659(254), iftmp.93_660(255)>

    Argument #0 (254 -> 256 executable)
	iftmp.93_659	Value: CONSTANT 1

    Argument #1 (255 -> 256 executable)
	iftmp.93_660	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_661 = (uint8_t) iftmp.93_144;

Visiting statement:
match_661 = (uint8_t) iftmp.93_144;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating block 256

Visiting PHI node: iftmp.93_144 = PHI <iftmp.93_659(254), iftmp.93_660(255)>

    Argument #0 (254 -> 256 executable)
	iftmp.93_659	Value: CONSTANT 1

    Argument #1 (255 -> 256 executable)
	iftmp.93_660	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)


Simulating block 258

Simulating block 268

Visiting PHI node: match_3 = PHI <match_2(263), match_2(264), match_2(266), match_684(267)>

    Argument #0 (263 -> 268 executable)
	match_2	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (match_3 != 0)
which is likely CONSTANT
Adding Destination of edge (268 -> 269) to worklist

Adding Destination of edge (268 -> 277) to worklist


Simulating statement (from ssa_edges): match_4 = PHI <match_5(243), match_3(268), match_694(274), match_709(276)>

Visiting PHI node: match_4 = PHI <match_5(243), match_3(268), match_694(274), match_709(276)>

    Argument #0 (243 -> 277 executable)
	match_5	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (268 -> 277 executable)
	match_3	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_5 = PHI <match_8(241), match_4(277)>

Visiting PHI node: match_5 = PHI <match_8(241), match_4(277)>

    Argument #0 (241 -> 278 executable)
	match_8	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (277 -> 278 executable)
	match_4	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_6 = PHI <match_3(275), match_5(278)>

Visiting PHI node: match_6 = PHI <match_3(275), match_5(278)>

    Argument #0 (275 -> 279 not executable)

    Argument #1 (278 -> 279 executable)
	match_5	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_9 = PHI <match_6(279), match_8(281)>

Visiting PHI node: match_9 = PHI <match_6(279), match_8(281)>

    Argument #0 (279 -> 282 executable)
	match_6	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_10 = PHI <match_9(282), match_716(283)>

Visiting PHI node: match_10 = PHI <match_9(282), match_716(283)>

    Argument #0 (282 -> 284 executable)
	match_9	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_11 = PHI <match_10(284), match_741(294), match_10(296)>

Visiting PHI node: match_11 = PHI <match_10(284), match_741(294), match_10(296)>

    Argument #0 (284 -> 297 executable)
	match_10	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_12 = PHI <match_11(297), match_745(322)>

Visiting PHI node: match_12 = PHI <match_11(297), match_745(322)>

    Argument #0 (297 -> 323 executable)
	match_11	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_13 = PHI <match_12(323), match_12(333), match_825(334)>

Visiting PHI node: match_13 = PHI <match_12(323), match_12(333), match_825(334)>

    Argument #0 (323 -> 335 executable)
	match_12	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

Visiting PHI node: match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>

    Argument #0 (346 -> 449 executable)
	match_13	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_16 = PHI <match_148(101), match_15(449)>

Visiting PHI node: match_16 = PHI <match_148(101), match_15(449)>

    Argument #0 (101 -> 450 executable)
	match_148	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	match_15	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

Visiting PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>

    Argument #0 (121 -> 451 executable)
	match_397	Value: CONSTANT 1

    Argument #1 (123 -> 451 executable)
	match_401	Value: CONSTANT 0

    Argument #2 (141 -> 451 executable)
	match_437	Value: CONSTANT 0

    Argument #3 (152 -> 451 executable)
	match_492	Value: CONSTANT 1

    Argument #4 (186 -> 451 executable)
	match_543	Value: CONSTANT 0

    Argument #5 (192 -> 451 executable)
	match_553	Value: CONSTANT 0

    Argument #6 (196 -> 451 executable)
	match_557	Value: CONSTANT 0

    Argument #7 (353 -> 451 executable)
	match_882	Value: CONSTANT 0

    Argument #8 (398 -> 451 executable)
	match_974	Value: CONSTANT 0

    Argument #9 (450 -> 451 executable)
	match_16	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_1095 = match_17;

Visiting statement:
match_1095 = match_17;
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

Visiting PHI node: match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>

    Argument #0 (5 -> 454 executable)
	match_187	Value: CONSTANT 0

    Argument #1 (7 -> 454 executable)
	match_197	Value: CONSTANT 0

    Argument #2 (9 -> 454 executable)
	match_199	Value: CONSTANT 0

    Argument #3 (453 -> 454 executable)
	match_1095	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_8 = PHI <match_16(197), match_7(280)>

Visiting PHI node: match_8 = PHI <match_16(197), match_7(280)>

    Argument #0 (197 -> 281 executable)
	match_16	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45307_1086 = match_16 == 0;

Visiting statement:
D.45307_1086 = match_16 == 0;
which is likely CONSTANT

Simulating statement (from ssa_edges): match_14 = PHI <match_16(437), match_1089(438)>

Visiting PHI node: match_14 = PHI <match_16(437), match_1089(438)>

    Argument #0 (437 -> 439 executable)
	match_16	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>

Visiting PHI node: match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>

    Argument #0 (204 -> 280 executable)
	match_8	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 269

Visiting statement:
if (scrooge_80 != 0)
which is likely CONSTANT
Adding Destination of edge (269 -> 270) to worklist

Adding Destination of edge (269 -> 271) to worklist


Simulating block 270

Visiting statement:
D.44926_685 = imp_629->iananame;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44984_686 = imp_629->samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44929_687 = imp_629->microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44930_688 = D.44929_687 / 1000;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (270 -> 275) to worklist


Simulating block 267

Visiting statement:
match_684 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (267 -> 268) to worklist


Simulating block 320

Visiting statement:
D.45073_794 = pmap_760->channels;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (320 -> 321) to worklist


Simulating block 312
Adding Destination of edge (312 -> 313) to worklist


Simulating block 319

Simulating block 304

Simulating block 277

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 0

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 0

    Argument #2 (274 -> 277 not executable)

    Argument #3 (276 -> 277 not executable)

    PHI node value: CONSTANT 0


Simulating block 271

Visiting statement:
D.44989_689 = ptime_35 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44990_690 = codec_ms_90 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Visiting statement:
D.44991_691 = D.44989_689 && D.44990_690;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44991_691 != 0)
which is likely CONSTANT
Adding Destination of edge (271 -> 272) to worklist

Adding Destination of edge (271 -> 273) to worklist


Simulating block 272

Visiting statement:
D.44993_692 = codec_ms_90 * 1000;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0xfffffffffffffffffffffffffffffff8).  Adding SSA edges to worklist.

Visiting statement:
D.44929_693 = imp_629->microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.44993_692 != D.44929_693)
which is likely CONSTANT
Adding Destination of edge (272 -> 274) to worklist


Simulating block 275

Visiting statement:
codec_rate.94_702 = (int) codec_rate_632;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
m_idx_703 = m_idx_101 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44926_704 = imp_629->iananame;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44927_705 = imp_629->ianacode;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44928_706 = (int) D.44927_705;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44929_707 = imp_629->microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44930_708 = D.44929_707 / 1000;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (m_idx_703 > 29)
which is likely CONSTANT
Adding Destination of edge (275 -> 279) to worklist

Adding Destination of edge (275 -> 276) to worklist


Simulating block 276

Visiting statement:
match_709 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (276 -> 277) to worklist


Simulating block 279

Simulating block 268

Simulating block 321

Simulating block 313

Simulating block 273

Visiting statement:
if (remote_codec_rate_96 != codec_rate_632)
which is likely VARYING
Adding Destination of edge (273 -> 275) to worklist


Simulating block 274

Visiting statement:
match_694 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Visiting statement:
D.44926_695 = imp_629->iananame;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44927_696 = imp_629->ianacode;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44928_697 = (int) D.44927_696;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44929_698 = imp_629->microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.44930_699 = D.44929_698 / 1000;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
remote_codec_rate.92_700 = (int) remote_codec_rate_96;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 0

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 0

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 1

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000001)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #3 (276 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 0

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_701 = nm_idx_116 + 1;

Visiting statement:
nm_idx_701 = nm_idx_116 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>

    Argument #0 (243 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (268 -> 277 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (274 -> 277 executable)
	nm_idx_701	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>

Visiting PHI node: nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>

    Argument #0 (279 -> 282 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (281 -> 282 executable)
	nm_idx_118	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>

Visiting PHI node: nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>

    Argument #0 (282 -> 284 executable)
	nm_idx_119	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (283 -> 284 executable)
	nm_idx_717	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45008_720 = nm_idx_120 != 0;

Visiting statement:
D.45008_720 = nm_idx_120 != 0;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45009_721 = D.45007_719 && D.45008_720;

Visiting statement:
D.45009_721 = D.45007_719 && D.45008_720;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (j_133 < nm_idx_120)

Simulating statement (from ssa_edges): nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

    Argument #0 (346 -> 449 executable)
	nm_idx_120	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (348 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #2 (349 -> 449 executable)
	nm_idx_122	Value: CONSTANT 0

    Argument #3 (428 -> 449 executable)
	nm_idx_876	Value: CONSTANT 0

    Argument #4 (447 -> 449 executable)
	nm_idx_876	Value: CONSTANT 0

    Argument #5 (448 -> 449 executable)
	nm_idx_876	Value: CONSTANT 0

    Argument #6 (343 -> 449 executable)
	nm_idx_120	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #7 (344 -> 449 executable)
	nm_idx_120	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #8 (341 -> 449 executable)
	nm_idx_120	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #9 (342 -> 449 executable)
	nm_idx_120	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #10 (347 -> 449 executable)
	nm_idx_120	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>

Visiting PHI node: nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>

    Argument #0 (101 -> 450 executable)
	nm_idx_185	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	nm_idx_121	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>

Visiting PHI node: nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>

    Argument #0 (197 -> 281 executable)
	nm_idx_122	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (280 -> 281 executable)
	nm_idx_117	Value: CONSTANT 0

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>

Visiting PHI node: nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>

    Argument #0 (279 -> 282 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (281 -> 282 executable)
	nm_idx_118	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)


Simulating statement (from ssa_edges): nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

    Argument #0 (346 -> 449 executable)
	nm_idx_120	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (348 -> 449 executable)
	nm_idx_122	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (349 -> 449 executable)
	nm_idx_122	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #3 (428 -> 449 executable)
	nm_idx_876	Value: CONSTANT 0

    Argument #4 (447 -> 449 executable)
	nm_idx_876	Value: CONSTANT 0

    Argument #5 (448 -> 449 executable)
	nm_idx_876	Value: CONSTANT 0

    Argument #6 (343 -> 449 executable)
	nm_idx_120	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #7 (344 -> 449 executable)
	nm_idx_120	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #8 (341 -> 449 executable)
	nm_idx_120	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #9 (342 -> 449 executable)
	nm_idx_120	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #10 (347 -> 449 executable)
	nm_idx_120	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)


Simulating statement (from ssa_edges): nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>

Visiting PHI node: nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>

    Argument #0 (204 -> 280 executable)
	nm_idx_118	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (210 -> 280 executable)
	nm_idx_118	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #2 (212 -> 280 executable)
	nm_idx_118	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #3 (214 -> 280 executable)
	nm_idx_118	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #4 (279 -> 280 executable)
	nm_idx_116	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>

Visiting PHI node: nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>

    Argument #0 (197 -> 281 executable)
	nm_idx_122	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (280 -> 281 executable)
	nm_idx_117	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)


Simulating block 277

Simulating statement (from ssa_edges): if (D.45009_721 != 0)

Visiting statement:
if (D.45009_721 != 0)
which is likely CONSTANT
Adding Destination of edge (284 -> 285) to worklist


Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>

    Argument #0 (241 -> 278 executable)
	nm_idx_118	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    Argument #1 (277 -> 278 executable)
	nm_idx_115	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>

Visiting PHI node: nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>

    Argument #0 (279 -> 282 executable)
	nm_idx_116	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>

Visiting PHI node: nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>

    Argument #0 (282 -> 284 executable)
	nm_idx_119	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45008_720 = nm_idx_120 != 0;

Visiting statement:
D.45008_720 = nm_idx_120 != 0;
which is likely CONSTANT

Simulating statement (from ssa_edges): if (j_133 < nm_idx_120)

Simulating statement (from ssa_edges): nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

    Argument #0 (346 -> 449 executable)
	nm_idx_120	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>

Visiting PHI node: nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>

    Argument #0 (101 -> 450 executable)
	nm_idx_185	Value: CONSTANT 0

    Argument #1 (449 -> 450 executable)
	nm_idx_121	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>

Visiting PHI node: nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>

    Argument #0 (197 -> 281 executable)
	nm_idx_122	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>

Visiting PHI node: nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>

    Argument #0 (204 -> 280 executable)
	nm_idx_118	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 285

Visiting statement:
j_722 = 0;
which is likely CONSTANT
Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.
Adding Destination of edge (285 -> 296) to worklist


Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 not executable)

    PHI node value: CONSTANT 0

Lattice value changed to CONSTANT 0.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): if (j_133 < nm_idx_120)

Simulating statement (from ssa_edges): D.45012_724 = near_matches[j_133].rate;

Simulating statement (from ssa_edges): near_match_726 = near_matches[j_133].imp;

Simulating statement (from ssa_edges): near_map_727 = near_matches[j_133].map;

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Simulating statement (from ssa_edges): D.45028_742 = near_matches[j_133].codec_idx;

Simulating block 275

Simulating block 296

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 not executable)

    PHI node value: CONSTANT 0


Visiting statement:
if (j_133 < nm_idx_120)
which is likely CONSTANT
Adding Destination of edge (296 -> 286) to worklist

Adding Destination of edge (296 -> 297) to worklist


Simulating block 286

Visiting statement:
timp_723 = 0B;
which is likely CONSTANT
Lattice value changed to CONSTANT 0B.  Adding SSA edges to worklist.

Visiting statement:
D.45012_724 = near_matches[j_133].rate;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
near_rate_725 = (uint32_t) D.45012_724;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
near_match_726 = near_matches[j_133].imp;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
near_map_727 = near_matches[j_133].map;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45013_728 = near_match_726->iananame;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (near_rate_725 == 0)
which is likely CONSTANT
Adding Destination of edge (286 -> 287) to worklist

Adding Destination of edge (286 -> 288) to worklist


Simulating statement (from ssa_edges): near_rate_729 = near_match_726->samples_per_second;

Simulating statement (from ssa_edges): timp_733 = near_match_726;

Simulating statement (from ssa_edges): near_rate_730 = near_rate_725;

Simulating statement (from ssa_edges): near_rate.96_743 = (int) near_rate_725;

Simulating block 287

Visiting statement:
near_rate_729 = near_match_726->samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (287 -> 289) to worklist


Simulating statement (from ssa_edges): near_rate_145 = PHI <near_rate_729(287), near_rate_730(288)>

Visiting PHI node: near_rate_145 = PHI <near_rate_729(287), near_rate_730(288)>

    Argument #0 (287 -> 289 executable)
	near_rate_729	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 289

Visiting statement:
if (num_731 != 0)
which is likely CONSTANT
Adding Destination of edge (289 -> 290) to worklist

Adding Destination of edge (289 -> 291) to worklist


Simulating block 290

Visiting statement:
timp_732 = search[0];
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (290 -> 292) to worklist


Simulating statement (from ssa_edges): timp_134 = PHI <timp_732(290), timp_733(291)>

Visiting PHI node: timp_134 = PHI <timp_732(290), timp_733(291)>

    Argument #0 (290 -> 292 executable)
	timp_732	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45024_734 = timp_134->microseconds_per_packet;

Simulating statement (from ssa_edges): D.45026_737 = timp_134->iananame;

Simulating statement (from ssa_edges): D.45024_738 = timp_134->microseconds_per_packet;

Simulating statement (from ssa_edges): D.45027_740 = timp_134->actual_samples_per_second;

Simulating block 292

Visiting statement:
if (maxptime_39 == 0)
which is likely CONSTANT
Adding Destination of edge (292 -> 294) to worklist

Adding Destination of edge (292 -> 293) to worklist


Simulating block 293

Visiting statement:
D.45024_734 = timp_134->microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45025_735 = D.45024_734 / 1000;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
if (D.45025_735 <= maxptime_39)
which is likely VARYING
Adding Destination of edge (293 -> 295) to worklist


Simulating block 295

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.
Adding Destination of edge (295 -> 296) to worklist


Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 1

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000001)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000001).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000003)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000003)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000003).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000007)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000007)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000007).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000000f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000000f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000001f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000001f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000003f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000003f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000007f)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000007f).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000000ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000000ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000001ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000001ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000003ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000003ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000007ff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000007ff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000000fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000000fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000001fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000001fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000003fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000003fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000007fff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000007fff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000000ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000000ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000001ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000001ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000003ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000003ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000007ffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000007ffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000000fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000000fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000001fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000001fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000003fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000003fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x000000000007fffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x000000000007fffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000000ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000000ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000001ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000001ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000003ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000003ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x00000000007ffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x00000000007ffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000000fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000000fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000001fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000001fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000003fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000003fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: CONSTANT 	Value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

    PHI node value: CONSTANT 
    PHI node value: CONSTANT 0x00000000000000000 (0x0000000007fffffff)

Lattice value changed to CONSTANT Lattice value changed to CONSTANT 0x00000000000000000 (0x0000000007fffffff).  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_736 = j_133 + 1;

Visiting statement:
j_736 = j_133 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): D.45028_742 = near_matches[j_133].codec_idx;

Simulating block 294

Visiting statement:
D.45026_737 = timp_134->iananame;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45024_738 = timp_134->microseconds_per_packet;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45025_739 = D.45024_738 / 1000;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
D.45027_740 = timp_134->actual_samples_per_second;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
match_741 = 1;
which is likely CONSTANT
Lattice value changed to CONSTANT 1.  Adding SSA edges to worklist.

Visiting statement:
D.45028_742 = near_matches[j_133].codec_idx;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
near_rate.96_743 = (int) near_rate_725;
which is likely VARYING
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Visiting statement:
m_idx_744 = m_idx_106 + 1;
which is likely CONSTANT
Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating statement (from ssa_edges): j_133 = PHI <j_722(285), j_736(295)>

Visiting PHI node: j_133 = PHI <j_722(285), j_736(295)>

    Argument #0 (285 -> 296 executable)
	j_722	Value: CONSTANT 0

    Argument #1 (295 -> 296 executable)
	j_736	Value: VARYING

    PHI node value: VARYING

Lattice value changed to VARYING.  Adding SSA edges to worklist.

Simulating block 297

Simulating block 288

Visiting statement:
near_rate_730 = near_rate_725;
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (288 -> 289) to worklist


Simulating block 291

Visiting statement:
timp_733 = near_match_726;
Lattice value changed to VARYING.  Adding SSA edges to worklist.
Adding Destination of edge (291 -> 292) to worklist


Simulating block 296

Simulating block 289

Simulating block 292

Substituting values and folding statements

Folding statement: if (session_161(D) == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_185
Folded into: # DEBUG nm_idx => 0

Folding statement: nm_idx_185 = 0;
Folded into: nm_idx_185 = 0;

Folding statement: # DEBUG m_idx => m_idx_184
Folded into: # DEBUG m_idx => 0

Folding statement: m_idx_184 = 0;
Folded into: m_idx_184 = 0;

Folding statement: # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_183
Folded into: # DEBUG fmtp_remote_codec_rate => 0

Removing dead stmt fmtp_remote_codec_rate_183 = 0;

Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_182
Folded into: # DEBUG remote_codec_rate => 0

Removing dead stmt remote_codec_rate_182 = 0;

Folding statement: # DEBUG codec_ms => codec_ms_181
Folded into: # DEBUG codec_ms => 0

Folding statement: codec_ms_181 = 0;
Folded into: codec_ms_181 = 0;

Folding statement: near_matches = {};
Not folded
Folding statement: matches = {};
Not folded
Folding statement: # DEBUG near_map => near_map_180
Folded into: # DEBUG near_map => 0B

Removing dead stmt near_map_180 = 0B;

Folding statement: # DEBUG mmap => mmap_179
Folded into: # DEBUG mmap => 0B

Removing dead stmt mmap_179 = 0B;

Folding statement: # DEBUG near_match => near_match_178
Folded into: # DEBUG near_match => 0B

Removing dead stmt near_match_178 = 0B;

Folding statement: # DEBUG mimp => mimp_177
Folded into: # DEBUG mimp => 0B

Removing dead stmt mimp_177 = 0B;

Folding statement: # DEBUG near_rate => near_rate_176
Folded into: # DEBUG near_rate => 0

Removing dead stmt near_rate_176 = 0;

Folding statement: # DEBUG reneg => reneg_175
Folded into: # DEBUG reneg => 1

Folding statement: reneg_175 = 1;
Folded into: reneg_175 = 1;

Folding statement: # DEBUG parser => parser_174
Folded into: # DEBUG parser => 0B

Removing dead stmt parser_174 = 0B;

Folding statement: # DEBUG scrooge => scrooge_173
Folded into: # DEBUG scrooge => 0

Removing dead stmt scrooge_173 = 0;

Folding statement: # DEBUG got_webrtc => got_webrtc_172
Folded into: # DEBUG got_webrtc => 0

Folding statement: got_webrtc_172 = 0;
Folded into: got_webrtc_172 = 0;

Folding statement: # DEBUG got_udptl => got_udptl_171
Folded into: # DEBUG got_udptl => 0

Folding statement: got_udptl_171 = 0;
Folded into: got_udptl_171 = 0;

Folding statement: # DEBUG got_savp => got_savp_170
Folded into: # DEBUG got_savp => 0

Folding statement: got_savp_170 = 0;
Folded into: got_savp_170 = 0;

Folding statement: # DEBUG got_video_savp => got_video_savp_169
Folded into: # DEBUG got_video_savp => 0

Folding statement: got_video_savp_169 = 0;
Folded into: got_video_savp_169 = 0;

Folding statement: # DEBUG got_video_avp => got_video_avp_168
Folded into: # DEBUG got_video_avp => 0

Folding statement: got_video_avp_168 = 0;
Folded into: got_video_avp_168 = 0;

Folding statement: # DEBUG got_avp => got_avp_167
Folded into: # DEBUG got_avp => 0

Folding statement: got_avp_167 = 0;
Folded into: got_avp_167 = 0;

Folding statement: # DEBUG got_audio => got_audio_166
Folded into: # DEBUG got_audio => 0

Folding statement: got_audio_166 = 0;
Folded into: got_audio_166 = 0;

Folding statement: # DEBUG got_video_crypto => got_video_crypto_165
Folded into: # DEBUG got_video_crypto => 0

Folding statement: got_video_crypto_165 = 0;
Folded into: got_video_crypto_165 = 0;

Folding statement: # DEBUG got_crypto => got_crypto_164
Folded into: # DEBUG got_crypto => 0

Folding statement: got_crypto_164 = 0;
Folded into: got_crypto_164 = 0;

Folding statement: # DEBUG crypto => crypto_163
Folded into: # DEBUG crypto => 0B

Removing dead stmt crypto_163 = 0B;

Folding statement: # DEBUG channel => channel_162
Not folded
Folding statement: channel_162 = switch_core_session_get_channel (session_161(D));
Not folded
Folding statement: # DEBUG skip => skip_160
Folded into: # DEBUG skip => 0

Folding statement: skip_160 = 0;
Folded into: skip_160 = 0;

Folding statement: # DEBUG x => x_159
Folded into: # DEBUG x => 0

Removing dead stmt x_159 = 0;

Folding statement: # DEBUG greedy => greedy_158
Folded into: # DEBUG greedy => 0

Removing dead stmt greedy_158 = 0;

Folding statement: # DEBUG recvonly => recvonly_157
Folded into: # DEBUG recvonly => 0

Folding statement: recvonly_157 = 0;
Folded into: recvonly_157 = 0;

Folding statement: # DEBUG sendonly => sendonly_156
Folded into: # DEBUG sendonly => 0

Folding statement: sendonly_156 = 0;
Folded into: sendonly_156 = 0;

Folding statement: # DEBUG dmaxptime => dmaxptime_155
Folded into: # DEBUG dmaxptime => 0

Folding statement: dmaxptime_155 = 0;
Folded into: dmaxptime_155 = 0;

Folding statement: # DEBUG maxptime => maxptime_154
Folded into: # DEBUG maxptime => 0

Removing dead stmt maxptime_154 = 0;

Folding statement: # DEBUG dptime => dptime_153
Folded into: # DEBUG dptime => 0

Folding statement: dptime_153 = 0;
Folded into: dptime_153 = 0;

Folding statement: # DEBUG ptime => ptime_152
Folded into: # DEBUG ptime => 0

Removing dead stmt ptime_152 = 0;

Folding statement: # DEBUG cng_pt => cng_pt_151
Folded into: # DEBUG cng_pt => 0

Folding statement: cng_pt_151 = 0;
Folded into: cng_pt_151 = 0;

Folding statement: # DEBUG te => te_150
Folded into: # DEBUG te => 0

Removing dead stmt te_150 = 0;

Folding statement: # DEBUG best_te => best_te_149
Folded into: # DEBUG best_te => 0

Folding statement: best_te_149 = 0;
Folded into: best_te_149 = 0;

Folding statement: # DEBUG match => match_148
Folded into: # DEBUG match => 0

Folding statement: match_148 = 0;
Folded into: match_148 = 0;

Folding statement: __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);
Not folded
Folding statement: if (smh_186 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG smh => smh_186
Not folded
Folding statement: smh_186 = session_161(D)->media_handle;
Not folded
Folding statement: match_187 = 0;
Folded into: match_187 = 0;

Folding statement: if (parser_196 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG parser => parser_196
Not folded
Folding statement: parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
Not folded
Folding statement: D.44473_195 = (int) D.44472_194;
Not folded
Folding statement: D.44472_194 = strlen (r_sdp_193(D));
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_192
Not folded
Folding statement: total_codecs_192 = D.44471_191->num_codecs;
Not folded
Folding statement: D.44471_191 = smh_186->mparams;
Not folded
Folding statement: # DEBUG codec_array => codec_array_190
Not folded
Folding statement: codec_array_190 = &smh_186->codecs;
Not folded
Folding statement: # DEBUG v_engine => v_engine_189
Not folded
Folding statement: v_engine_189 = &smh_186->engines[1];
Not folded
Folding statement: # DEBUG a_engine => a_engine_188
Not folded
Folding statement: a_engine_188 = &smh_186->engines;
Not folded
Folding statement: match_197 = 0;
Folded into: match_197 = 0;

Folding statement: if (sdp_198 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG sdp => sdp_198
Not folded
Folding statement: sdp_198 = sdp_session (parser_196);
Not folded
Folding statement: match_199 = 0;
Folded into: match_199 = 0;

Folding statement: sdp_parser_free (parser_196);
Not folded
Folding statement: if (D.44478_200 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44478_200 = dtls_ok (session_161(D));
Not folded
Folding statement: if (tmp_203 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG tmp => tmp_203
Not folded
Folding statement: tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
Not folded
Folding statement: D.44482_202 = D.44481_201->channel;
Not folded
Folding statement: D.44481_201 = smh_186->session;
Not folded
Folding statement: if (D.44485_204 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44485_204 = switch_false (tmp_203);
Not folded
Folding statement: switch_channel_clear_flag (D.44482_208, 109);
Not folded
Folding statement: D.44482_208 = D.44481_207->channel;
Not folded
Folding statement: D.44481_207 = smh_186->session;
Not folded
Folding statement: switch_channel_clear_flag (D.44482_206, 111);
Not folded
Folding statement: D.44482_206 = D.44481_205->channel;
Not folded
Folding statement: D.44481_205 = smh_186->session;
Not folded
Folding PHI node: .MEM_1096 = PHI <.MEM_1179(10), .MEM_1180(11), .MEM_1181(12), .MEM_1183(13)>
No folding possible
Folding statement: # DEBUG pmap => pmap_1457
Not folded
Folding statement: pmap_1457 = a_engine_188->payload_map;
Not folded
Folding statement: # DEBUG engine => a_engine_188
Not folded
Folding statement: switch_core_session_parse_crypto_prefs (session_161(D));
Not folded
Folding statement: # DEBUG pmap => pmap_1459
Not folded
Folding statement: pmap_1459 = pmap_1458->next;
Not folded
Folding statement: pmap_1458->current = 0;
Not folded
Folding statement: pmap_1458->negotiated = 0;
Not folded
Folding PHI node: pmap_1458 = PHI <pmap_1457(14), pmap_1459(15)>
No folding possible
Folding PHI node: .MEM_1512 = PHI <.MEM_1184(14), .MEM_1516(15)>
No folding possible
Folding statement: if (pmap_1458 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG pmap => pmap_1458
Not folded
Folding statement: if (D.47871_1460 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.47871_1460 = pmap_1458->allocated;
Not folded
Folding statement: # DEBUG pmap => pmap_1461
Not folded
Folding statement: pmap_1461 = v_engine_189->payload_map;
Not folded
Folding statement: # DEBUG engine => v_engine_189
Not folded
Folding statement: # DEBUG pmap => pmap_1463
Not folded
Folding statement: pmap_1463 = pmap_1462->next;
Not folded
Folding statement: pmap_1462->current = 0;
Not folded
Folding statement: pmap_1462->negotiated = 0;
Not folded
Folding PHI node: pmap_1462 = PHI <pmap_1461(18), pmap_1463(19)>
No folding possible
Folding PHI node: .MEM_1513 = PHI <.MEM_1512(18), .MEM_1518(19)>
No folding possible
Folding statement: if (pmap_1462 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG pmap => pmap_1462
Not folded
Folding statement: if (D.47874_1464 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.47874_1464 = pmap_1462->allocated;
Not folded
Folding statement: if (proceed_209(D) != 0B)
which is likely CONSTANT
Not folded
Folding statement: *proceed_209(D) = 1;
Not folded
Folding PHI node: .MEM_1097 = PHI <.MEM_1513(22), .MEM_1187(23)>
No folding possible
Folding statement: if (val_214 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG val => val_214
Not folded
Folding statement: val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
Not folded
Folding statement: # DEBUG scrooge => scrooge_213
Not folded
Folding statement: scrooge_213 = D.44491_212 != 0;
Not folded
Folding statement: D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
Not folded
Folding statement: # DEBUG greedy => greedy_211
Not folded
Folding statement: greedy_211 = D.44490_210 != 0;
Not folded
Folding statement: D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
Not folded
Folding statement: if (D.44494_215 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44494_215 = strcasecmp (val_214, "generous");
Not folded
Folding statement: # DEBUG scrooge => scrooge_217
Folded into: # DEBUG scrooge => 0

Folding statement: scrooge_217 = 0;
Folded into: scrooge_217 = 0;

Folding statement: # DEBUG greedy => greedy_216
Folded into: # DEBUG greedy => 0

Folding statement: greedy_216 = 0;
Folded into: greedy_216 = 0;

Folding statement: if (D.44498_218 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44498_218 = strcasecmp (val_214, "greedy");
Not folded
Folding statement: # DEBUG scrooge => scrooge_220
Folded into: # DEBUG scrooge => 0

Folding statement: scrooge_220 = 0;
Folded into: scrooge_220 = 0;

Folding statement: # DEBUG greedy => greedy_219
Folded into: # DEBUG greedy => 1

Folding statement: greedy_219 = 1;
Folded into: greedy_219 = 1;

Folding statement: if (D.44502_221 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44502_221 = strcasecmp (val_214, "scrooge");
Not folded
Folding statement: # DEBUG greedy => greedy_223
Folded into: # DEBUG greedy => 1

Folding statement: greedy_223 = 1;
Folded into: greedy_223 = 1;

Folding statement: # DEBUG scrooge => scrooge_222
Folded into: # DEBUG scrooge => 1

Folding statement: scrooge_222 = 1;
Folded into: scrooge_222 = 1;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
Not folded
Folding PHI node: greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>
Folded into: greedy_47 = PHI <greedy_211(24), 0(26), 1(28), 1(30), greedy_211(31)>

Folding PHI node: scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>
Folded into: scrooge_80 = PHI <scrooge_213(24), 0(26), 0(28), 1(30), scrooge_213(31)>

Folding PHI node: .MEM_1098 = PHI <.MEM_1190(24), .MEM_1190(26), .MEM_1190(28), .MEM_1190(30), .MEM_1191(31)>
No folding possible
Folding statement: if (D.44509_227 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44509_227 = smh_186->origin;
Not folded
Folding statement: smh_186->origin = D.44508_226;
Not folded
Folding statement: D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
Not folded
Folding statement: D.44507_225 = D.44506_224->o_username;
Not folded
Folding statement: D.44506_224 = sdp_198->sdp_origin;
Not folded
Folding statement: # DEBUG greedy => greedy_47
Not folded
Folding statement: # DEBUG scrooge => scrooge_80
Not folded
Folding statement: if (D.44515_232 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44515_232 = (_Bool) D.44514_231;
Not folded
Folding statement: D.44514_231 = D.44513_230 & 1;
Not folded
Folding statement: D.44513_230 = (int) D.44512_229;
Not folded
Folding statement: D.44512_229 = D.44471_228->auto_rtp_bugs;
Not folded
Folding statement: D.44471_228 = smh_186->mparams;
Not folded
Folding statement: if (D.44518_234 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");
Not folded
Folding statement: D.44509_233 = smh_186->origin;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");
Not folded
Folding statement: a_engine_188->rtp_bugs = D.44522_236;
Not folded
Folding statement: D.44522_236 = D.44521_235 | 1;
Not folded
Folding statement: D.44521_235 = a_engine_188->rtp_bugs;
Not folded
Folding PHI node: .MEM_1099 = PHI <.MEM_1193(33), .MEM_1193(34), .MEM_1195(35)>
No folding possible
Folding statement: if (D.44523_239 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44523_239 = D.44512_238 & 2;
Not folded
Folding statement: D.44512_238 = D.44471_237->auto_rtp_bugs;
Not folded
Folding statement: D.44471_237 = smh_186->mparams;
Not folded
Folding statement: if (D.44526_241 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
Not folded
Folding statement: D.44509_240 = smh_186->origin;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");
Not folded
Folding statement: a_engine_188->rtp_bugs = D.44529_243;
Not folded
Folding statement: D.44529_243 = D.44521_242 | 2;
Not folded
Folding statement: D.44521_242 = a_engine_188->rtp_bugs;
Not folded
Folding PHI node: .MEM_1100 = PHI <.MEM_1193(32), .MEM_1099(36), .MEM_1099(37), .MEM_1197(38)>
No folding possible
Folding statement: if (val_245 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG val => val_245
Not folded
Folding statement: val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
Not folded
Folding statement: D.44530_244 = session_161(D)->channel;
Not folded
Folding statement: if (D.44533_246 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44533_246 = switch_true (val_245);
Not folded
Folding statement: switch_channel_set_flag_value (D.44530_247, 93, 1);
Not folded
Folding statement: D.44530_247 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1101 = PHI <.MEM_1198(39), .MEM_1199(40), .MEM_1200(41)>
No folding possible
Folding statement: if (m_248 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG m => m_248
Not folded
Folding statement: m_248 = sdp_198->sdp_media;
Not folded
Folding statement: if (D.44544_253 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44544_253 = D.44542_251 || D.44543_252;
Not folded
Folding statement: D.44543_252 = D.44541_250 == 0;
Not folded
Folding statement: D.44542_251 = D.44541_250 == 2;
Not folded
Folding statement: D.44541_250 = D.44540_249 & 6;
Not folded
Folding statement: D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
Not folded
Folding statement: if (D.44546_254 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44546_254 = m_248->m_connections;
Not folded
Folding statement: if (D.44548_256 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44548_256 = D.44546_255->c_address;
Not folded
Folding statement: D.44546_255 = m_248->m_connections;
Not folded
Folding statement: if (__s2_len_257 <= 3)
which is likely CONSTANT
Folding predicate __s2_len_257 <= 3 to 0
Folded into: if (0 != 0)

Folding statement: # DEBUG __s2_len => __s2_len_257
Folded into: # DEBUG __s2_len => 7

Folding statement: __s2_len_257 = 7;
Folded into: __s2_len_257 = 7;

Folding statement: if (D.44560_268 != 0)
which is likely VARYING
Not folded
Folding statement: D.44560_268 = D.44558_266 && D.44559_267;
Not folded
Folding statement: D.44559_267 = __result_265 == 0;
Not folded
Folding statement: D.44558_266 = __s2_len_257 != 0;
Folded into: D.44558_266 = 1;

Folding statement: # DEBUG __result => __result_265
Not folded
Folding statement: __result_265 = D.44554_261 - D.44557_264;
Not folded
Folding statement: D.44557_264 = (int) D.44556_263;
Not folded
Folding statement: D.44556_263 = MEM[(const unsigned char *)D.44555_262];
Not folded
Folding statement: D.44555_262 = "0.0.0.0";
Not folded
Folding statement: D.44554_261 = (int) D.44553_260;
Not folded
Folding statement: D.44553_260 = *__s1_259;
Not folded
Folding statement: # DEBUG __s1 => __s1_259
Not folded
Folding statement: __s1_259 = D.44546_258->c_address;
Not folded
Folding statement: D.44546_258 = m_248->m_connections;
Not folded
Folding statement: if (D.44570_278 != 0)
which is likely VARYING
Not folded
Folding statement: D.44570_278 = D.44569_276 && D.44559_277;
Not folded
Folding statement: D.44559_277 = __result_275 == 0;
Not folded
Folding statement: D.44569_276 = __s2_len_257 > 1;
Folded into: D.44569_276 = 1;

Folding statement: # DEBUG __result => __result_275
Not folded
Folding statement: __result_275 = D.44565_271 - D.44568_274;
Not folded
Folding statement: D.44568_274 = (int) D.44567_273;
Not folded
Folding statement: D.44567_273 = MEM[(const unsigned char *)D.44566_272];
Not folded
Folding statement: D.44566_272 = &"0.0.0.0"[1];
Not folded
Folding statement: D.44565_271 = (int) D.44564_270;
Not folded
Folding statement: D.44564_270 = *D.44563_269;
Not folded
Folding statement: D.44563_269 = __s1_259 + 1;
Not folded
Folding statement: if (D.44580_288 != 0)
which is likely VARYING
Not folded
Folding statement: D.44580_288 = D.44579_286 && D.44559_287;
Not folded
Folding statement: D.44559_287 = __result_285 == 0;
Not folded
Folding statement: D.44579_286 = __s2_len_257 > 2;
Folded into: D.44579_286 = 1;

Folding statement: # DEBUG __result => __result_285
Not folded
Folding statement: __result_285 = D.44575_281 - D.44578_284;
Not folded
Folding statement: D.44578_284 = (int) D.44577_283;
Not folded
Folding statement: D.44577_283 = MEM[(const unsigned char *)D.44576_282];
Not folded
Folding statement: D.44576_282 = &"0.0.0.0"[2];
Not folded
Folding statement: D.44575_281 = (int) D.44574_280;
Not folded
Folding statement: D.44574_280 = *D.44573_279;
Not folded
Folding statement: D.44573_279 = __s1_259 + 2;
Not folded
Folding statement: # DEBUG __result => __result_295
Not folded
Folding statement: __result_295 = D.44585_291 - D.44588_294;
Not folded
Folding statement: D.44588_294 = (int) D.44587_293;
Not folded
Folding statement: D.44587_293 = MEM[(const unsigned char *)D.44586_292];
Not folded
Folding statement: D.44586_292 = &"0.0.0.0"[3];
Not folded
Folding statement: D.44585_291 = (int) D.44584_290;
Not folded
Folding statement: D.44584_290 = *D.44583_289;
Not folded
Folding statement: D.44583_289 = __s1_259 + 3;
Not folded
Folding PHI node: __result_123 = PHI <__result_265(47), __result_275(48), __result_285(49), __result_295(50)>
No folding possible
Folding statement: __result_297 = __result_296;
Not folded
Folding statement: __result_296 = __result_123;
Not folded
Folding statement: # DEBUG __result => __result_123
Not folded
Folding statement: __result_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");
Not folded
Folding statement: D.44548_299 = D.44546_298->c_address;
Not folded
Folding statement: D.44546_298 = m_248->m_connections;
Not folded
Folding PHI node: __result_143 = PHI <__result_297(51), __result_300(52)>
No folding possible
Folding statement: if (__result_301 == 0)
which is likely CONSTANT
Not folded
Folding statement: __result_301 = __result_143;
Not folded
Folding statement: # DEBUG sendonly => sendonly_302
Folded into: # DEBUG sendonly => 2

Folding statement: sendonly_302 = 2;
Folded into: sendonly_302 = 2;

Folding PHI node: sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>
Folded into: sendonly_42 = PHI <0(42), 0(44), 0(45), 0(53), 2(54)>

Folding statement: # DEBUG attr => attr_303
Not folded
Folding statement: attr_303 = sdp_198->sdp_attributes;
Not folded
Folding statement: # DEBUG sendonly => sendonly_42
Not folded
Folding statement: if (D.44590_304 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG s => D.44590_304
Not folded
Folding statement: D.44590_304 = attr_29->a_name;
Not folded
Folding statement: if (D.47877_1465 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47877_1465 = *D.44590_304;
Not folded
Folding PHI node: D.47876_1466 = PHI <1(56), 1(57), 0(58)>
No folding possible
Folding statement: if (D.47876_305 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.47876_305 = D.47876_1519;
Not folded
Folding statement: D.47876_1519 = D.47876_1466;
Not folded
Folding statement: // predicted unlikely by continue predictor.
Not folded
Folding statement: if (D.44594_307 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44594_307 = strcasecmp (D.44590_306, "sendonly");
Not folded
Folding statement: D.44590_306 = attr_29->a_name;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
Not folded
Folding statement: D.44530_309 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG sendonly => sendonly_308
Folded into: # DEBUG sendonly => 1

Folding statement: sendonly_308 = 1;
Folded into: sendonly_308 = 1;

Folding statement: if (D.44598_311 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44598_311 = strcasecmp (D.44590_310, "inactive");
Not folded
Folding statement: D.44590_310 = attr_29->a_name;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
Not folded
Folding statement: D.44530_313 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG sendonly => sendonly_312
Folded into: # DEBUG sendonly => 1

Folding statement: sendonly_312 = 1;
Folded into: sendonly_312 = 1;

Folding statement: if (D.44602_315 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44602_315 = strcasecmp (D.44590_314, "recvonly");
Not folded
Folding statement: D.44590_314 = attr_29->a_name;
Not folded
Folding statement: if (D.44606_319 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44606_319 = switch_rtp_ready (D.44605_318);
Not folded
Folding statement: D.44605_318 = a_engine_188->rtp_session;
Not folded
Folding statement: # DEBUG recvonly => recvonly_317
Folded into: # DEBUG recvonly => 1

Folding statement: recvonly_317 = 1;
Folded into: recvonly_317 = 1;

Folding statement: switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
Not folded
Folding statement: D.44530_316 = session_161(D)->channel;
Not folded
Folding statement: a_engine_188->max_missed_packets = 0;
Not folded
Folding statement: a_engine_188->max_missed_hold_packets = 0;
Not folded
Folding statement: switch_rtp_set_max_missed_packets (D.44605_320, 0);
Not folded
Folding statement: D.44605_320 = a_engine_188->rtp_session;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
Not folded
Folding statement: D.44530_322 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
Not folded
Folding statement: D.44530_321 = session_161(D)->channel;
Not folded
Folding statement: if (sendonly_44 <= 1)
which is likely CONSTANT
Not folded
Folding statement: if (D.44614_324 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44614_324 = strcasecmp (D.44590_323, "sendrecv");
Not folded
Folding statement: D.44590_323 = attr_29->a_name;
Not folded
Folding statement: # DEBUG sendonly => sendonly_325
Folded into: # DEBUG sendonly => 0

Folding statement: sendonly_325 = 0;
Folded into: sendonly_325 = 0;

Folding statement: if (D.44616_327 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44616_327 = strcasecmp (D.44590_326, "ptime");
Not folded
Folding statement: D.44590_326 = attr_29->a_name;
Not folded
Folding statement: # DEBUG dptime => NULL
Not folded
Folding statement: dptime_329 = dptime_1521;
Not folded
Folding statement: dptime_1521 = dptime_1467;
Not folded
Folding statement: dptime_1467 = strtol (D.44619_328, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_328
Not folded
Folding statement: D.44619_328 = attr_29->a_value;
Not folded
Folding statement: if (D.44621_331 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44621_331 = strcasecmp (D.44590_330, "maxptime");
Not folded
Folding statement: D.44590_330 = attr_29->a_name;
Not folded
Folding statement: # DEBUG dmaxptime => NULL
Not folded
Folding statement: dmaxptime_333 = dmaxptime_1523;
Not folded
Folding statement: dmaxptime_1523 = dmaxptime_1468;
Not folded
Folding statement: dmaxptime_1468 = strtol (D.44619_332, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_332
Not folded
Folding statement: D.44619_332 = attr_29->a_value;
Not folded
Folding PHI node: dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>
No folding possible
Folding PHI node: dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>
No folding possible
Folding PHI node: sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>
Folded into: sendonly_43 = PHI <sendonly_44(60), 1(62), 1(64), sendonly_44(68), 0(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>

Folding PHI node: recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>
Folded into: recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), 1(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), 1(67)>

Folding PHI node: .MEM_1102 = PHI <.MEM_1103(60), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1103(71), .MEM_1520(73), .MEM_1103(74), .MEM_1522(75), .MEM_1207(67)>
No folding possible
Folding statement: # DEBUG attr => attr_334
Not folded
Folding statement: attr_334 = attr_29->a_next;
Not folded
Folding statement: # DEBUG dptime => dptime_36
Not folded
Folding statement: # DEBUG dmaxptime => dmaxptime_40
Not folded
Folding statement: # DEBUG sendonly => sendonly_43
Not folded
Folding statement: # DEBUG recvonly => recvonly_45
Not folded
Folding PHI node: attr_29 = PHI <attr_303(55), attr_334(76)>
No folding possible
Folding PHI node: dptime_37 = PHI <dptime_153(55), dptime_36(76)>
Folded into: dptime_37 = PHI <0(55), dptime_36(76)>

Folding PHI node: dmaxptime_41 = PHI <dmaxptime_155(55), dmaxptime_40(76)>
Folded into: dmaxptime_41 = PHI <0(55), dmaxptime_40(76)>

Folding PHI node: sendonly_44 = PHI <sendonly_42(55), sendonly_43(76)>
No folding possible
Folding PHI node: recvonly_46 = PHI <recvonly_157(55), recvonly_45(76)>
Folded into: recvonly_46 = PHI <0(55), recvonly_45(76)>

Folding PHI node: .MEM_1103 = PHI <.MEM_1101(55), .MEM_1102(76)>
No folding possible
Folding statement: if (attr_29 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG attr => attr_29
Not folded
Folding statement: # DEBUG dptime => dptime_37
Not folded
Folding statement: # DEBUG dmaxptime => dmaxptime_41
Not folded
Folding statement: # DEBUG sendonly => sendonly_44
Not folded
Folding statement: # DEBUG recvonly => recvonly_46
Not folded
Folding statement: if (D.44626_337 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44626_337 = D.44624_335 && D.44625_336;
Not folded
Folding statement: D.44625_336 = recvonly_46 != 1;
Not folded
Folding statement: D.44624_335 = sendonly_44 != 1;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);
Not folded
Folding statement: D.44530_338 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1104 = PHI <.MEM_1103(78), .MEM_1210(79)>
No folding possible
Folding statement: if (D.44631_339 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
Not folded
Folding statement: if (val_341 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG val => val_341
Not folded
Folding statement: val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
Not folded
Folding statement: D.44530_340 = session_161(D)->channel;
Not folded
Folding statement: if (D.44635_342 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44635_342 = switch_true (val_341);
Not folded
Folding PHI node: .MEM_1105 = PHI <.MEM_1212(81), .MEM_1213(82)>
No folding possible
Folding statement: if (D.44636_344 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44636_344 = D.44471_343->hold_laps;
Not folded
Folding statement: D.44471_343 = smh_186->mparams;
Not folded
Folding statement: if (D.44640_348 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);
Not folded
Folding statement: D.44471_345->hold_laps = D.44639_347;
Not folded
Folding statement: D.44639_347 = D.44636_346 + 1;
Not folded
Folding statement: D.44636_346 = D.44471_345->hold_laps;
Not folded
Folding statement: D.44471_345 = smh_186->mparams;
Not folded
Folding statement: if (val_351 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG val => val_351
Not folded
Folding statement: val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
Not folded
Folding statement: D.44530_350 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG reneg => reneg_349
Not folded
Folding statement: reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
Not folded
Folding statement: # DEBUG reneg => reneg_352
Not folded
Folding statement: reneg_352 = switch_true (val_351);
Not folded
Folding PHI node: reneg_81 = PHI <reneg_175(80), reneg_175(82), reneg_175(83), reneg_175(84), reneg_349(85), reneg_352(86)>
Folded into: reneg_81 = PHI <1(80), 1(82), 1(83), 1(84), reneg_349(85), reneg_352(86)>

Folding PHI node: .MEM_1106 = PHI <.MEM_1211(80), .MEM_1213(82), .MEM_1105(83), .MEM_1215(84), .MEM_1217(85), .MEM_1218(86)>
No folding possible
Folding statement: if (reneg_81 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG reneg => reneg_81
Not folded
Folding statement: if (val_355 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG val => val_355
Not folded
Folding statement: val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
Not folded
Folding statement: D.44530_354 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG reneg => reneg_353
Not folded
Folding statement: reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
Not folded
Folding statement: # DEBUG reneg => reneg_356
Not folded
Folding statement: reneg_356 = switch_true (val_355);
Not folded
Folding PHI node: reneg_82 = PHI <reneg_81(87), reneg_353(88), reneg_356(89)>
No folding possible
Folding PHI node: .MEM_1107 = PHI <.MEM_1106(87), .MEM_1220(88), .MEM_1221(89)>
No folding possible
Folding statement: if (D.44649_357 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44649_357 = session_161(D)->bugs;
Not folded
Folding statement: # DEBUG reneg => reneg_82
Not folded
Folding statement: # DEBUG reneg => reneg_358
Folded into: # DEBUG reneg => 0

Folding statement: reneg_358 = 0;
Folded into: reneg_358 = 0;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
Not folded
Folding PHI node: reneg_83 = PHI <reneg_82(90), reneg_358(91)>
Folded into: reneg_83 = PHI <reneg_82(90), 0(91)>

Folding PHI node: .MEM_1108 = PHI <.MEM_1107(90), .MEM_1222(91)>
No folding possible
Folding statement: if (reneg_83 == 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG reneg => reneg_83
Not folded
Folding statement: if (D.44655_359 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44655_359 = smh_186->num_negotiated_codecs;
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_361
Not folded
Folding statement: total_codecs_361 = smh_186->num_negotiated_codecs;
Not folded
Folding statement: # DEBUG codec_array => codec_array_360
Not folded
Folding statement: codec_array_360 = &smh_186->negotiated_codecs;
Not folded
Folding statement: if (reneg_83 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_365
Not folded
Folding statement: total_codecs_365 = D.44471_364->num_codecs;
Not folded
Folding statement: D.44471_364 = smh_186->mparams;
Not folded
Folding statement: # DEBUG codec_array => codec_array_363
Not folded
Folding statement: codec_array_363 = &smh_186->codecs;
Not folded
Folding statement: switch_core_media_prepare_codecs (session_161(D), 0);
Not folded
Folding statement: D.44471_362->num_codecs = 0;
Not folded
Folding statement: D.44471_362 = smh_186->mparams;
Not folded
Folding PHI node: codec_array_84 = PHI <codec_array_360(94), codec_array_190(95), codec_array_363(96)>
No folding possible
Folding PHI node: total_codecs_85 = PHI <total_codecs_361(94), total_codecs_192(95), total_codecs_365(96)>
No folding possible
Folding PHI node: .MEM_1109 = PHI <.MEM_1108(94), .MEM_1108(95), .MEM_1224(96)>
No folding possible
Folding statement: if (D.44661_366 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
Not folded
Folding statement: # DEBUG codec_array => codec_array_84
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_85
Not folded
Folding statement: if (D.44663_367 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
Not folded
Folding statement: if (D.44665_368 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
Not folded
Folding PHI node: .MEM_1110 = PHI <.MEM_1225(97), .MEM_1226(98), .MEM_1227(99)>
No folding possible
Folding statement: switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);
Not folded
Folding statement: D.44530_369 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1111 = PHI <.MEM_1227(99), .MEM_1228(100)>
No folding possible
Folding statement: # DEBUG m => m_370
Not folded
Folding statement: m_370 = sdp_198->sdp_media;
Not folded
Folding statement: check_ice (smh_186, 1, sdp_198, 0B);
Not folded
Folding statement: check_ice (smh_186, 0, sdp_198, 0B);
Not folded
Folding statement: switch_core_media_pass_zrtp_hash (session_161(D));
Not folded
Folding statement: switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
Not folded
Folding statement: if (D.44666_373 == 261)
which is likely CONSTANT
Not folded
Folding statement: D.44666_373 = m_28->m_proto;
Not folded
Folding statement: # DEBUG maxptime => maxptime_372
Not folded
Folding statement: maxptime_372 = dmaxptime_41;
Not folded
Folding statement: # DEBUG ptime => ptime_371
Not folded
Folding statement: ptime_371 = dptime_37;
Not folded
Folding statement: switch_core_session_set_ice (session_161(D));
Not folded
Folding statement: # DEBUG got_webrtc => got_webrtc_374
Not folded
Folding statement: got_webrtc_374 = got_webrtc_79 + 1;
Not folded
Folding PHI node: got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>
No folding possible
Folding PHI node: .MEM_1112 = PHI <.MEM_1169(102), .MEM_1233(103)>
No folding possible
Folding statement: if (D.44669_375 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44669_375 = m_28->m_proto_name;
Not folded
Folding statement: # DEBUG got_webrtc => got_webrtc_78
Not folded
Folding statement: if (D.44672_377 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44672_377 = strcasecmp (D.44669_376, "UDP/TLS/RTP/SAVPF");
Not folded
Folding statement: D.44669_376 = m_28->m_proto_name;
Not folded
Folding statement: switch_channel_set_flag_value (D.44530_378, 107, 1);
Not folded
Folding statement: D.44530_378 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1113 = PHI <.MEM_1112(104), .MEM_1112(105), .MEM_1234(106)>
No folding possible
Folding statement: if (D.44678_382 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44678_382 = D.44676_380 || D.44677_381;
Not folded
Folding statement: D.44677_381 = D.44675_379 == 261;
Not folded
Folding statement: D.44676_380 = D.44675_379 == 257;
Not folded
Folding statement: D.44675_379 = m_28->m_proto;
Not folded
Folding statement: if (D.44681_383 == 2)
which is likely CONSTANT
Not folded
Folding statement: D.44681_383 = m_28->m_type;
Not folded
Folding statement: # DEBUG got_savp => got_savp_384
Not folded
Folding statement: got_savp_384 = got_savp_75 + 1;
Not folded
Folding statement: # DEBUG got_video_savp => got_video_savp_385
Not folded
Folding statement: got_video_savp_385 = got_video_savp_73 + 1;
Not folded
Folding statement: if (D.44666_386 == 256)
which is likely CONSTANT
Not folded
Folding statement: D.44666_386 = m_28->m_proto;
Not folded
Folding statement: if (D.44681_387 == 2)
which is likely CONSTANT
Not folded
Folding statement: D.44681_387 = m_28->m_type;
Not folded
Folding statement: # DEBUG got_avp => got_avp_388
Not folded
Folding statement: got_avp_388 = got_avp_69 + 1;
Not folded
Folding statement: # DEBUG got_video_avp => got_video_avp_389
Not folded
Folding statement: got_video_avp_389 = got_video_avp_71 + 1;
Not folded
Folding statement: if (D.44666_390 == 258)
which is likely CONSTANT
Not folded
Folding statement: D.44666_390 = m_28->m_proto;
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_391
Not folded
Folding statement: got_udptl_391 = got_udptl_77 + 1;
Not folded
Folding PHI node: got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>
No folding possible
Folding PHI node: got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>
No folding possible
Folding PHI node: got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>
No folding possible
Folding PHI node: got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>
No folding possible
Folding PHI node: got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>
No folding possible
Folding statement: if (got_udptl_76 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG got_avp => got_avp_68
Not folded
Folding statement: # DEBUG got_video_avp => got_video_avp_70
Not folded
Folding statement: # DEBUG got_video_savp => got_video_savp_72
Not folded
Folding statement: # DEBUG got_savp => got_savp_74
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_76
Not folded
Folding statement: if (D.44681_392 == 8)
which is likely CONSTANT
Not folded
Folding statement: D.44681_392 = m_28->m_type;
Not folded
Folding statement: if (D.44697_393 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44697_393 = m_28->m_port;
Not folded
Folding statement: if (D.44699_396 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
Not folded
Folding statement: D.44530_395 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG t38_options => t38_options_394
Not folded
Folding statement: t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
Not folded
Folding statement: # DEBUG match => match_397
Folded into: # DEBUG match => 1

Folding statement: match_397 = 1;
Folded into: match_397 = 1;

Folding statement: if (D.44703_399 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44703_399 = switch_true (D.44702_398);
Not folded
Folding statement: D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
Not folded
Folding statement: # DEBUG match => match_401
Folded into: # DEBUG match => 0

Folding statement: match_401 = 0;
Folded into: match_401 = 0;

Folding statement: switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
Not folded
Folding statement: D.44530_400 = session_161(D)->channel;
Not folded
Folding statement: if (D.44707_408 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
Not folded
Folding statement: D.44530_407 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG pass => pass_406
Not folded
Folding statement: pass_406 = (int) D.44706_405;
Not folded
Folding statement: D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
Not folded
Folding statement: D.44482_404 = D.44481_403->channel;
Not folded
Folding statement: D.44481_403 = smh_186->session;
Not folded
Folding statement: # DEBUG var => var_402
Not folded
Folding statement: var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
Not folded
Folding statement: if (proceed_209(D) != 0B)
which is likely CONSTANT
Not folded
Folding statement: *proceed_209(D) = 0;
Not folded
Folding PHI node: .MEM_1114 = PHI <.MEM_1242(124), .MEM_1242(125), .MEM_1243(126)>
No folding possible
Folding statement: if (var_402 != 0B)
which is likely CONSTANT
Not folded
Folding statement: if (pass_409 == 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG pass => pass_409
Not folded
Folding statement: pass_409 = switch_true (var_402);
Not folded
Folding statement: if (D.44716_410 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44716_410 = strcasecmp (var_402, "once");
Not folded
Folding statement: # DEBUG pass => pass_411
Folded into: # DEBUG pass => 2

Folding statement: pass_411 = 2;
Folded into: pass_411 = 2;

Folding PHI node: pass_126 = PHI <pass_406(127), pass_409(128), pass_409(129), pass_411(130)>
Folded into: pass_126 = PHI <pass_406(127), pass_409(128), pass_409(129), 2(130)>

Folding PHI node: .MEM_1115 = PHI <.MEM_1114(127), .MEM_1244(128), .MEM_1244(129), .MEM_1244(130)>
No folding possible
Folding statement: if (pass_126 == 2)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG pass => pass_126
Not folded
Folding statement: if (D.44723_414 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
Not folded
Folding statement: D.44482_413 = D.44481_412->channel;
Not folded
Folding statement: D.44481_412 = smh_186->session;
Not folded
Folding PHI node: .MEM_1116 = PHI <.MEM_1115(131), .MEM_1245(132)>
No folding possible
Folding statement: if (D.44724_416 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
Not folded
Folding statement: D.44530_415 = session_161(D)->channel;
Not folded
Folding statement: if (D.44726_418 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
Not folded
Folding statement: D.44530_417 = session_161(D)->channel;
Not folded
Folding statement: if (D.44728_420 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
Not folded
Folding statement: D.44530_419 = session_161(D)->channel;
Not folded
Folding statement: if (D.44730_422 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44730_422 = switch_rtp_ready (D.44605_421);
Not folded
Folding statement: D.44605_421 = a_engine_188->rtp_session;
Not folded
Folding PHI node: .MEM_1117 = PHI <.MEM_1245(132), .MEM_1246(133), .MEM_1247(134), .MEM_1248(135), .MEM_1249(136)>
No folding possible
Folding statement: # DEBUG pass => pass_423
Folded into: # DEBUG pass => 0

Folding statement: pass_423 = 0;
Folded into: pass_423 = 0;

Folding PHI node: pass_127 = PHI <pass_126(136), pass_423(137)>
Folded into: pass_127 = PHI <pass_126(136), 0(137)>

Folding PHI node: .MEM_1118 = PHI <.MEM_1249(136), .MEM_1117(137)>
No folding possible
Folding statement: if (pass_127 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG pass => pass_127
Not folded
Folding statement: if (D.44733_424 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
Not folded
Folding statement: if (D.44737_431 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
Not folded
Folding statement: tmp = "";
Not folded
Folding statement: # DEBUG remote_port => remote_port_430
Not folded
Folding statement: remote_port_430 = switch_rtp_get_remote_port (D.44605_429);
Not folded
Folding statement: D.44605_429 = a_engine_188->rtp_session;
Not folded
Folding statement: # DEBUG remote_host => remote_host_428
Not folded
Folding statement: remote_host_428 = switch_rtp_get_remote_host (D.44605_427);
Not folded
Folding statement: D.44605_427 = a_engine_188->rtp_session;
Not folded
Folding statement: # DEBUG other_channel => other_channel_426
Not folded
Folding statement: other_channel_426 = switch_core_session_get_channel (other_session.89_425);
Not folded
Folding statement: other_session.89_425 = other_session;
Not folded
Folding statement: # DEBUG match => match_437
Folded into: # DEBUG match => 0

Folding statement: match_437 = 0;
Folded into: match_437 = 0;

Folding statement: # DEBUG pass => pass_436
Folded into: # DEBUG pass => 0

Removing dead stmt pass_436 = 0;

Folding statement: switch_core_session_rwunlock (other_session.89_435);
Not folded
Folding statement: other_session.89_435 = other_session;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
Not folded
Folding statement: D.44741_434 = switch_channel_get_name (other_channel_426);
Not folded
Folding statement: D.44740_433 = switch_channel_get_name (D.44530_432);
Not folded
Folding statement: D.44530_432 = session_161(D)->channel;
Not folded
Folding statement: if (D.44743_440 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44743_440 = switch_true (D.44742_439);
Not folded
Folding statement: D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
Not folded
Folding statement: D.44530_438 = session_161(D)->channel;
Not folded
Folding statement: if (D.44747_443 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44747_443 = switch_true (D.44746_442);
Not folded
Folding statement: D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
Not folded
Folding statement: D.44530_441 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);
Not folded
Folding PHI node: .MEM_1119 = PHI <.MEM_1261(142), .MEM_1263(143), .MEM_1264(144)>
No folding possible
Folding statement: if (D.44758_451 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44758_451 = D.44756_449 && D.44757_450;
Not folded
Folding statement: D.44757_450 = remote_port_430 != 0;
Not folded
Folding statement: D.44756_449 = remote_host_428 != 0B;
Not folded
Folding statement: D.44750_447->remote_sdp_port = D.44753_448;
Not folded
Folding statement: D.44753_448 = t38_options_394->remote_port;
Not folded
Folding statement: D.44750_447 = a_engine_188->cur_payload_map;
Not folded
Folding statement: D.44750_444->remote_sdp_ip = D.44752_446;
Not folded
Folding statement: D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
Not folded
Folding statement: D.44751_445 = t38_options_394->remote_ip;
Not folded
Folding statement: D.44750_444 = a_engine_188->cur_payload_map;
Not folded
Folding statement: if (D.39032_454 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
Not folded
Folding statement: D.44760_453 = D.44750_452->remote_sdp_ip;
Not folded
Folding statement: D.44750_452 = a_engine_188->cur_payload_map;
Not folded
Folding statement: if (D.44762_456 == remote_port_430)
which is likely VARYING
Not folded
Folding statement: D.44762_456 = D.44750_455->remote_sdp_port;
Not folded
Folding statement: D.44750_455 = a_engine_188->cur_payload_map;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
Not folded
Folding statement: D.44764_458 = switch_channel_get_name (D.44530_457);
Not folded
Folding statement: D.44530_457 = session_161(D)->channel;
Not folded
Folding statement: if (D.44768_479 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
Not folded
Folding statement: D.44762_478 = D.44750_477->remote_sdp_port;
Not folded
Folding statement: D.44750_477 = a_engine_188->cur_payload_map;
Not folded
Folding statement: D.44760_476 = D.44750_475->remote_sdp_ip;
Not folded
Folding statement: D.44750_475 = a_engine_188->cur_payload_map;
Not folded
Folding statement: D.44605_474 = a_engine_188->rtp_session;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
Not folded
Folding statement: D.44530_473 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
Not folded
Folding statement: D.44760_472 = D.44750_471->remote_sdp_ip;
Not folded
Folding statement: D.44750_471 = a_engine_188->cur_payload_map;
Not folded
Folding statement: D.44530_470 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 32, "%d", D.44767_469);
Not folded
Folding statement: D.44767_469 = (int) D.44762_468;
Not folded
Folding statement: D.44762_468 = D.44750_467->remote_sdp_port;
Not folded
Folding statement: D.44750_467 = a_engine_188->cur_payload_map;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
Not folded
Folding statement: D.44767_466 = (int) D.44762_465;
Not folded
Folding statement: D.44762_465 = D.44750_464->remote_sdp_port;
Not folded
Folding statement: D.44750_464 = a_engine_188->cur_payload_map;
Not folded
Folding statement: D.44760_463 = D.44750_462->remote_sdp_ip;
Not folded
Folding statement: D.44750_462 = a_engine_188->cur_payload_map;
Not folded
Folding statement: D.44766_461 = (int) remote_port_430;
Not folded
Folding statement: D.44765_460 = switch_channel_get_name (D.44530_459);
Not folded
Folding statement: D.44530_459 = session_161(D)->channel;
Not folded
Folding statement: err = 0B;
Not folded
Folding statement: switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
Not folded
Folding statement: err.90_480 = err;
Not folded
Folding PHI node: .MEM_1120 = PHI <.MEM_1269(148), .MEM_1276(149), .MEM_1278(150)>
No folding possible
Folding statement: switch_core_session_rwunlock (other_session.89_491);
Not folded
Folding statement: other_session.89_491 = other_session;
Not folded
Folding statement: switch_core_session_queue_message (other_session.89_490, msg_487);
Not folded
Folding statement: other_session.89_490 = other_session;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
Not folded
Folding statement: msg_487->string_arg = D.44773_489;
Not folded
Folding statement: D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
Not folded
Folding statement: other_session.89_488 = other_session;
Not folded
Folding statement: msg_487->from = "src/switch_core_media.c";
Not folded
Folding statement: msg_487->message_id = 21;
Not folded
Folding statement: # DEBUG msg => msg_487
Not folded
Folding statement: msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
Not folded
Folding statement: other_session.89_486 = other_session;
Not folded
Folding statement: switch_channel_set_flag_value (D.44772_485, 101, 1);
Not folded
Folding statement: D.44772_485 = other_session.89_484->channel;
Not folded
Folding statement: other_session.89_484 = other_session;
Not folded
Folding statement: switch_channel_set_flag_value (D.44482_483, 101, 1);
Not folded
Folding statement: D.44482_483 = D.44481_482->channel;
Not folded
Folding statement: D.44481_482 = smh_186->session;
Not folded
Folding statement: switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
Not folded
Folding statement: other_session.89_481 = other_session;
Not folded
Folding PHI node: .MEM_1121 = PHI <.MEM_1118(138), .MEM_1250(139), .MEM_1289(151)>
No folding possible
Folding statement: # DEBUG match => match_492
Folded into: # DEBUG match => 1

Folding statement: match_492 = 1;
Folded into: match_492 = 1;

Folding statement: if (D.44681_493 == 2)
which is likely CONSTANT
Not folded
Folding statement: D.44681_493 = m_28->m_type;
Not folded
Folding statement: if (D.44779_497 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44779_497 = D.44777_495 && D.44778_496;
Not folded
Folding statement: D.44778_496 = got_audio_67 == 0;
Not folded
Folding statement: D.44777_495 = D.44697_494 != 0;
Not folded
Folding statement: D.44697_494 = m_28->m_port;
Not folded
Folding statement: if (D.44781_498 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44781_498 = switch_rtp_has_dtls ();
Not folded
Folding statement: if (D.44784_499 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44784_499 = dtls_ok (session_161(D));
Not folded
Folding statement: # DEBUG attr => attr_500
Not folded
Folding statement: attr_500 = m_28->m_attributes;
Not folded
Folding statement: if (D.44787_502 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
Not folded
Folding statement: D.44590_501 = attr_30->a_name;
Not folded
Folding statement: if (D.44619_503 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG s => D.44619_503
Not folded
Folding statement: D.44619_503 = attr_30->a_value;
Not folded
Folding statement: if (D.47887_1469 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47887_1469 = *D.44619_503;
Not folded
Folding PHI node: D.47886_1470 = PHI <1(159), 1(160), 0(161)>
No folding possible
Folding statement: if (D.47886_504 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47886_504 = D.47886_1524;
Not folded
Folding statement: D.47886_1524 = D.47886_1470;
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_505
Folded into: # DEBUG got_crypto => 1

Folding statement: got_crypto_505 = 1;
Folded into: got_crypto_505 = 1;

Folding PHI node: got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>
Folded into: got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), 1(163)>

Folding statement: # DEBUG attr => attr_506
Not folded
Folding statement: attr_506 = attr_30->a_next;
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_50
Not folded
Folding PHI node: attr_30 = PHI <attr_500(157), attr_506(164)>
No folding possible
Folding PHI node: got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>
No folding possible
Folding statement: if (attr_30 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG attr => attr_30
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_51
Not folded
Folding PHI node: got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>
No folding possible
Folding PHI node: .MEM_1122 = PHI <.MEM_1290(155), .MEM_1291(156), .MEM_1291(165)>
No folding possible
Folding statement: # DEBUG attr => attr_507
Not folded
Folding statement: attr_507 = m_28->m_attributes;
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_52
Not folded
Folding statement: if (D.44795_509 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44795_509 = strcasecmp (D.44590_508, "rtcp");
Not folded
Folding statement: D.44590_508 = attr_31->a_name;
Not folded
Folding statement: if (D.44619_510 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44619_510 = attr_31->a_value;
Not folded
Folding statement: if (D.44800_517 == 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
Not folded
Folding statement: D.44471_516 = smh_186->mparams;
Not folded
Folding statement: a_engine_188->remote_rtcp_port = D.44799_515;
Not folded
Folding statement: D.44799_515 = (short unsigned int) D.47890_514;
Not folded
Folding statement: D.47890_514 = D.47890_1526;
Not folded
Folding statement: D.47890_1526 = D.47890_1471;
Not folded
Folding statement: D.47890_1471 = strtol (D.44619_513, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_513
Not folded
Folding statement: D.44619_513 = attr_31->a_value;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);
Not folded
Folding statement: D.44619_512 = attr_31->a_value;
Not folded
Folding statement: D.44530_511 = session_161(D)->channel;
Not folded
Folding statement: D.44471_518->rtcp_audio_interval_msec = "5000";
Not folded
Folding statement: D.44471_518 = smh_186->mparams;
Not folded
Folding statement: if (D.44805_520 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44805_520 = strcasecmp (D.44590_519, "ptime");
Not folded
Folding statement: D.44590_519 = attr_31->a_name;
Not folded
Folding statement: if (D.44619_521 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44619_521 = attr_31->a_value;
Not folded
Folding statement: # DEBUG ptime => NULL
Not folded
Folding statement: ptime_523 = ptime_1528;
Not folded
Folding statement: ptime_1528 = ptime_1472;
Not folded
Folding statement: ptime_1472 = strtol (D.44619_522, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_522
Not folded
Folding statement: D.44619_522 = attr_31->a_value;
Not folded
Folding statement: if (D.44810_525 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44810_525 = strcasecmp (D.44590_524, "maxptime");
Not folded
Folding statement: D.44590_524 = attr_31->a_name;
Not folded
Folding statement: if (D.44619_526 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44619_526 = attr_31->a_value;
Not folded
Folding statement: # DEBUG maxptime => NULL
Not folded
Folding statement: maxptime_528 = maxptime_1530;
Not folded
Folding statement: maxptime_1530 = maxptime_1473;
Not folded
Folding statement: maxptime_1473 = strtol (D.44619_527, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_527
Not folded
Folding statement: D.44619_527 = attr_31->a_value;
Not folded
Folding statement: if (got_crypto_54 <= 0)
which is likely CONSTANT
Not folded
Folding statement: if (D.44815_530 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44815_530 = strcasecmp (D.44590_529, "crypto");
Not folded
Folding statement: D.44590_529 = attr_31->a_name;
Not folded
Folding statement: if (D.44619_531 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG s => D.44619_531
Not folded
Folding statement: D.44619_531 = attr_31->a_value;
Not folded
Folding statement: if (D.47900_1474 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47900_1474 = *D.44619_531;
Not folded
Folding PHI node: D.47899_1475 = PHI <1(179), 1(180), 0(181)>
No folding possible
Folding statement: if (D.47899_532 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47899_532 = D.47899_1531;
Not folded
Folding statement: D.47899_1531 = D.47899_1475;
Not folded
Folding statement: if (D.44822_535 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44822_535 = D.44821_534 & 4;
Not folded
Folding statement: D.44821_534 = D.44471_533->ndlb;
Not folded
Folding statement: D.44471_533 = smh_186->mparams;
Not folded
Folding statement: if (D.44826_538 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44826_538 = switch_true (D.44825_537);
Not folded
Folding statement: D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
Not folded
Folding statement: D.44530_536 = session_161(D)->channel;
Not folded
Folding statement: if (D.44831_542 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44831_542 = D.44829_540 && D.44830_541;
Not folded
Folding statement: D.44830_541 = got_webrtc_78 == 0;
Not folded
Folding statement: D.44829_540 = D.44666_539 != 257;
Not folded
Folding statement: D.44666_539 = m_28->m_proto;
Not folded
Folding statement: # DEBUG match => match_543
Folded into: # DEBUG match => 0

Folding statement: match_543 = 0;
Folded into: match_543 = 0;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
Not folded
Folding PHI node: .MEM_1123 = PHI <.MEM_1125(183), .MEM_1296(184), .MEM_1296(185)>
No folding possible
Folding statement: # DEBUG got_crypto => got_crypto_547
Not folded
Folding statement: got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_545, sdp_type_546(D));
Not folded
Folding statement: # DEBUG crypto_tag => NULL
Not folded
Folding statement: crypto_tag_545 = crypto_tag_1533;
Not folded
Folding statement: crypto_tag_1533 = crypto_tag_1476;
Not folded
Folding statement: crypto_tag_1476 = strtol (crypto_544, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => crypto_544
Not folded
Folding statement: # DEBUG crypto => crypto_544
Not folded
Folding statement: crypto_544 = attr_31->a_value;
Not folded
Folding PHI node: ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>
No folding possible
Folding PHI node: maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>
No folding possible
Folding PHI node: got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>
No folding possible
Folding PHI node: .MEM_1124 = PHI <.MEM_1294(170), .MEM_1527(173), .MEM_1529(176), .MEM_1125(177), .MEM_1125(178), .MEM_1125(182), .MEM_1298(187), .MEM_1293(169)>
No folding possible
Folding statement: # DEBUG attr => attr_548
Not folded
Folding statement: attr_548 = attr_31->a_next;
Not folded
Folding statement: # DEBUG ptime => ptime_34
Not folded
Folding statement: # DEBUG maxptime => maxptime_38
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_53
Not folded
Folding PHI node: attr_31 = PHI <attr_507(166), attr_548(188)>
No folding possible
Folding PHI node: ptime_35 = PHI <ptime_371(166), ptime_34(188)>
No folding possible
Folding PHI node: maxptime_39 = PHI <maxptime_372(166), maxptime_38(188)>
No folding possible
Folding PHI node: got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>
No folding possible
Folding PHI node: .MEM_1125 = PHI <.MEM_1122(166), .MEM_1124(188)>
No folding possible
Folding statement: if (attr_31 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG attr => attr_31
Not folded
Folding statement: # DEBUG ptime => ptime_35
Not folded
Folding statement: # DEBUG maxptime => maxptime_39
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_54
Not folded
Folding statement: if (D.44836_551 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44836_551 = D.44834_549 && D.44835_550;
Not folded
Folding statement: D.44835_550 = got_savp_74 != 0;
Not folded
Folding statement: D.44834_549 = got_crypto_54 == -1;
Not folded
Folding statement: if (D.44839_552 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44839_552 = got_avp_68 | got_webrtc_78;
Not folded
Folding statement: # DEBUG match => match_553
Folded into: # DEBUG match => 0

Folding statement: match_553 = 0;
Folded into: match_553 = 0;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
Not folded
Folding statement: if (D.44546_555 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44546_555 = m_28->m_connections;
Not folded
Folding statement: # DEBUG connection => connection_554
Not folded
Folding statement: connection_554 = sdp_198->sdp_connection;
Not folded
Folding statement: # DEBUG connection => connection_556
Not folded
Folding statement: connection_556 = m_28->m_connections;
Not folded
Folding PHI node: connection_124 = PHI <connection_554(193), connection_556(194)>
No folding possible
Folding statement: if (connection_124 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG connection => connection_124
Not folded
Folding statement: # DEBUG match => match_557
Folded into: # DEBUG match => 0

Folding statement: match_557 = 0;
Folded into: match_557 = 0;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
Not folded
Folding statement: # DEBUG map => map_559
Not folded
Folding statement: map_559 = m_28->m_rtpmaps;
Not folded
Folding statement: # DEBUG x => x_558
Folded into: # DEBUG x => 0

Folding statement: x_558 = 0;
Folded into: x_558 = 0;

Folding statement: if (rm_encoding_561 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_561
Not folded
Folding statement: rm_encoding_561 = map_128->rm_encoding;
Not folded
Folding statement: codec_fmtp = {};
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_560
Folded into: # DEBUG map_bit_rate => 0

Removing dead stmt map_bit_rate_560 = 0;

Folding statement: # DEBUG rm_encoding => rm_encoding_562
Folded into: # DEBUG rm_encoding => ""

Folding statement: rm_encoding_562 = "";
Folded into: rm_encoding_562 = "";

Folding PHI node: rm_encoding_130 = PHI <rm_encoding_561(198), rm_encoding_562(199)>
Folded into: rm_encoding_130 = PHI <rm_encoding_561(198), ""(199)>

Folding statement: if (D.44848_563 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_130
Not folded
Folding statement: if (best_te_20 == 0)
which is likely CONSTANT
Not folded
Folding statement: if (D.44854_564 == D.44855_566)
which is likely VARYING
Not folded
Folding statement: D.44855_566 = D.44750_565->rm_rate;
Not folded
Folding statement: D.44750_565 = a_engine_188->cur_payload_map;
Not folded
Folding statement: D.44854_564 = map_128->rm_rate;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
Not folded
Folding statement: D.44857_569 = (int) best_te_568;
Not folded
Folding statement: # DEBUG best_te => best_te_568
Not folded
Folding statement: best_te_568 = (switch_payload_t) D.44856_567;
Not folded
Folding statement: D.44856_567 = map_128->rm_pt;
Not folded
Folding PHI node: best_te_18 = PHI <best_te_20(202), best_te_568(203)>
No folding possible
Folding PHI node: .MEM_1126 = PHI <.MEM_1301(202), .MEM_1302(203)>
No folding possible
Folding statement: // predicted unlikely by continue predictor.
Not folded
Folding statement: # DEBUG best_te => best_te_18
Not folded
Folding statement: if (D.44858_570 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
Not folded
Folding statement: if (cng_pt_25 == 0)
which is likely CONSTANT
Not folded
Folding statement: if (D.44863_571 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44863_571 = strcasecmp (rm_encoding_130, "CN");
Not folded
Folding statement: if (D.44605_574 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44605_574 = a_engine_188->rtp_session;
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_573
Not folded
Folding statement: cng_pt_573 = (switch_payload_t) D.44856_572;
Not folded
Folding statement: D.44856_572 = map_128->rm_pt;
Not folded
Folding statement: switch_rtp_set_cng_pt (D.44605_576, D.44869_578);
Not folded
Folding statement: D.44869_578 = D.44471_577->cng_pt;
Not folded
Folding statement: D.44471_577 = smh_186->mparams;
Not folded
Folding statement: D.44605_576 = a_engine_188->rtp_session;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
Not folded
Folding statement: D.44868_575 = (int) cng_pt_573;
Not folded
Folding PHI node: .MEM_1127 = PHI <.MEM_1303(208), .MEM_1305(209)>
No folding possible
Folding statement: // predicted unlikely by continue predictor.
Not folded
Folding statement: if (D.44870_579 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG x => x_580
Not folded
Folding statement: x_580 = x_49 + 1;
Not folded
Folding statement: D.44870_579 = x_49 < skip_160;
Folded into: D.44870_579 = x_49 < 0;

Folding statement: // predicted unlikely by continue predictor.
Not folded
Folding statement: if (match_8 != 0)
which is likely CONSTANT
Not folded
Folding statement: // predicted unlikely by continue predictor.
Not folded
Folding statement: if (maxptime_39 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_581
Not folded
Folding statement: codec_ms_581 = ptime_35;
Not folded
Folding statement: if (D.44879_584 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44879_584 = D.44877_582 || D.44878_583;
Not folded
Folding statement: D.44878_583 = codec_ms_581 > maxptime_39;
Not folded
Folding statement: D.44877_582 = codec_ms_581 == 0;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_585
Not folded
Folding statement: codec_ms_585 = maxptime_39;
Not folded
Folding PHI node: codec_ms_86 = PHI <codec_ms_581(215), codec_ms_581(216), codec_ms_585(217)>
No folding possible
Folding statement: if (codec_ms_86 == 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_86
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_589
Not folded
Folding statement: codec_ms_589 = (int) D.44885_588;
Not folded
Folding statement: D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
Not folded
Folding statement: D.44884_587 = (uint32_t) D.44856_586;
Not folded
Folding statement: D.44856_586 = map_128->rm_pt;
Not folded
Folding PHI node: codec_ms_87 = PHI <codec_ms_86(218), codec_ms_589(219)>
No folding possible
Folding PHI node: .MEM_1128 = PHI <.MEM_1303(218), .MEM_1306(219)>
No folding possible
Folding statement: if (csui.173_1477 <= 18)
which is likely CONSTANT
Not folded
Folding statement: csui.173_1477 = csui.173_591;
Not folded
Folding statement: # DEBUG payload => csui.173_591
Not folded
Folding statement: csui.173_591 = (unsigned char) D.44856_590;
Not folded
Folding statement: D.44856_590 = map_128->rm_pt;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_87
Not folded
Folding statement: map_bit_rate_1478 = 0;
Folded into: map_bit_rate_1478 = 0;

Folding statement: <L498>:
Not folded
Folding statement: map_bit_rate_1479 = CSWTCH.174[csui.173_1477];
Not folded
Folding statement: <L499>:
Not folded
Folding PHI node: map_bit_rate_1480 = PHI <map_bit_rate_1478(221), map_bit_rate_1479(222)>
Folded into: map_bit_rate_1480 = PHI <0(221), map_bit_rate_1479(222)>

Folding statement: if (ptime_35 == 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG map_bit_rate => NULL
Not folded
Folding statement: map_bit_rate_592 = map_bit_rate_1534;
Not folded
Folding statement: map_bit_rate_1534 = map_bit_rate_1480;
Not folded
Folding statement: <L501>:
Not folded
Folding statement: <L500>:
Not folded
Folding statement: if (D.44890_594 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44890_594 = strcasecmp (D.44889_593, "g723");
Not folded
Folding statement: D.44889_593 = map_128->rm_encoding;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_595
Folded into: # DEBUG codec_ms => 33

Folding statement: codec_ms_595 = 33;
Folded into: codec_ms_595 = 33;

Folding PHI node: codec_ms_88 = PHI <codec_ms_87(223), codec_ms_87(224), codec_ms_595(225)>
Folded into: codec_ms_88 = PHI <codec_ms_87(223), codec_ms_87(224), 33(225)>

Folding statement: if (D.44893_598 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG s => D.44893_598
Not folded
Folding statement: D.44893_598 = map_128->rm_fmtp;
Not folded
Folding statement: memset (&codec_fmtp, 0, 16);
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_597
Folded into: # DEBUG fmtp_remote_codec_rate => 0

Folding statement: fmtp_remote_codec_rate_597 = 0;
Folded into: fmtp_remote_codec_rate_597 = 0;

Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_596
Not folded
Folding statement: remote_codec_rate_596 = map_128->rm_rate;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_88
Not folded
Folding statement: if (D.47915_1481 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47915_1481 = *D.44893_598;
Not folded
Folding PHI node: D.47914_1482 = PHI <1(226), 1(227), 0(228)>
No folding possible
Folding statement: if (D.47914_599 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.47914_599 = D.47914_1535;
Not folded
Folding statement: D.47914_1535 = D.47914_1482;
Not folded
Folding statement: if (D.44897_601 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44897_601 = strcasecmp (D.44889_600, "ilbc");
Not folded
Folding statement: D.44889_600 = map_128->rm_encoding;
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_603
Folded into: # DEBUG map_bit_rate => 13332

Folding statement: map_bit_rate_603 = 13332;
Folded into: map_bit_rate_603 = 13332;

Folding statement: # DEBUG codec_ms => codec_ms_602
Folded into: # DEBUG codec_ms => 32

Folding statement: codec_ms_602 = 32;
Folded into: codec_ms_602 = 32;

Folding statement: if (D.44901_605 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44901_605 = strcasecmp (D.44889_604, "isac");
Not folded
Folding statement: D.44889_604 = map_128->rm_encoding;
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_607
Folded into: # DEBUG map_bit_rate => 32001

Folding statement: map_bit_rate_607 = 32001;
Folded into: map_bit_rate_607 = 32001;

Folding statement: # DEBUG codec_ms => codec_ms_606
Folded into: # DEBUG codec_ms => 39

Folding statement: codec_ms_606 = 39;
Folded into: codec_ms_606 = 39;

Folding statement: if (D.44905_611 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);
Not folded
Folding statement: D.44854_610 = map_128->rm_rate;
Not folded
Folding statement: D.44893_609 = map_128->rm_fmtp;
Not folded
Folding statement: D.44889_608 = map_128->rm_encoding;
Not folded
Folding statement: if (D.44908_612 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44908_612 = codec_fmtp.bits_per_second;
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_614
Not folded
Folding statement: map_bit_rate_614 = (uint32_t) D.44908_613;
Not folded
Folding statement: D.44908_613 = codec_fmtp.bits_per_second;
Not folded
Folding PHI node: map_bit_rate_131 = PHI <map_bit_rate_592(235), map_bit_rate_614(236)>
No folding possible
Folding statement: if (D.44911_615 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44911_615 = codec_fmtp.microseconds_per_packet;
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_131
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_617
Not folded
Folding statement: codec_ms_617 = D.44911_616 / 1000;
Not folded
Folding statement: D.44911_616 = codec_fmtp.microseconds_per_packet;
Not folded
Folding PHI node: codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>
No folding possible
Folding statement: if (D.44914_618 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44914_618 = codec_fmtp.actual_samples_per_second;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_89
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_619
Not folded
Folding statement: fmtp_remote_codec_rate_619 = codec_fmtp.actual_samples_per_second;
Not folded
Folding PHI node: codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>
Folded into: codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), 32(231), 39(233)>

Folding PHI node: fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>
Folded into: fmtp_remote_codec_rate_99 = PHI <0(232), 0(234), 0(239), fmtp_remote_codec_rate_619(240), 0(231), 0(233)>

Folding PHI node: map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>
Folded into: map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), 13332(231), 32001(233)>

Folding PHI node: .MEM_1129 = PHI <.MEM_1307(232), .MEM_1308(234), .MEM_1308(239), .MEM_1308(240), .MEM_1307(231), .MEM_1307(233)>
No folding possible
Folding statement: # DEBUG i => i_620
Folded into: # DEBUG i => 0

Folding statement: i_620 = 0;
Folded into: i_620 = 0;

Folding statement: # DEBUG codec_ms => codec_ms_90
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_132
Not folded
Folding statement: if (D.44921_633 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44921_633 = imp_629->codec_type;
Not folded
Folding statement: # DEBUG codec_rate => codec_rate_632
Not folded
Folding statement: codec_rate_632 = imp_629->samples_per_second;
Not folded
Folding statement: # DEBUG bit_rate => bit_rate_631
Not folded
Folding statement: bit_rate_631 = (uint32_t) D.44920_630;
Not folded
Folding statement: D.44920_630 = imp_629->bits_per_second;
Not folded
Folding statement: # DEBUG imp => imp_629
Not folded
Folding statement: imp_629 = *D.44919_628;
Not folded
Folding statement: D.44919_628 = codec_array_84 + D.44918_627;
Not folded
Folding statement: D.44918_627 = i.91_626 * 4;
Not folded
Folding statement: i.91_626 = (unsigned int) i_129;
Not folded
Folding statement: // predicted unlikely by continue predictor.
Not folded
Folding statement: if (D.44889_642 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG s => D.44889_642
Not folded
Folding statement: D.44889_642 = map_128->rm_encoding;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
Not folded
Folding statement: D.44930_641 = D.44929_640 / 1000;
Not folded
Folding statement: D.44929_640 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44928_639 = (int) D.44927_638;
Not folded
Folding statement: D.44927_638 = imp_629->ianacode;
Not folded
Folding statement: D.44926_637 = imp_629->iananame;
Not folded
Folding statement: remote_codec_rate.92_636 = (int) remote_codec_rate_98;
Not folded
Folding statement: D.44924_635 = (int) D.44856_634;
Not folded
Folding statement: D.44856_634 = map_128->rm_pt;
Not folded
Folding statement: if (D.47919_1483 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47919_1483 = *D.44889_642;
Not folded
Folding PHI node: D.47918_1484 = PHI <1(244), 1(245), 0(246)>
No folding possible
Folding statement: if (D.47918_643 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.47918_643 = D.47918_1536;
Not folded
Folding statement: D.47918_1536 = D.47918_1484;
Not folded
Folding statement: if (D.44938_648 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44938_648 = (_Bool) D.44937_647;
Not folded
Folding statement: D.44937_647 = D.44936_646 & 1;
Not folded
Folding statement: D.44936_646 = (int) D.44821_645;
Not folded
Folding statement: D.44821_645 = D.44471_644->ndlb;
Not folded
Folding statement: D.44471_644 = smh_186->mparams;
Not folded
Folding statement: if (D.44924_650 <= 95)
which is likely CONSTANT
Not folded
Folding statement: D.44924_650 = (int) D.44856_649;
Not folded
Folding statement: D.44856_649 = map_128->rm_pt;
Not folded
Folding statement: # DEBUG match => match_655
Not folded
Folding statement: match_655 = D.44924_652 == D.44928_654;
Not folded
Folding statement: D.44928_654 = (int) D.44927_653;
Not folded
Folding statement: D.44927_653 = imp_629->ianacode;
Not folded
Folding statement: D.44924_652 = (int) D.44856_651;
Not folded
Folding statement: D.44856_651 = map_128->rm_pt;
Not folded
Folding statement: if (D.44944_657 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
Not folded
Folding statement: D.44926_656 = imp_629->iananame;
Not folded
Folding statement: if (remote_codec_rate_98 == codec_rate_632)
which is likely VARYING
Not folded
Folding statement: if (D.44947_658 == fmtp_remote_codec_rate_99)
which is likely VARYING
Not folded
Folding statement: D.44947_658 = imp_629->actual_samples_per_second;
Not folded
Folding statement: iftmp.93_659 = 1;
Folded into: iftmp.93_659 = 1;

Folding statement: iftmp.93_660 = 0;
Folded into: iftmp.93_660 = 0;

Folding PHI node: iftmp.93_144 = PHI <iftmp.93_659(254), iftmp.93_660(255)>
Folded into: iftmp.93_144 = PHI <1(254), 0(255)>

Folding statement: if (fmtp_remote_codec_rate_99 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG match => match_661
Not folded
Folding statement: match_661 = (uint8_t) iftmp.93_144;
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_662
Not folded
Folding statement: remote_codec_rate_662 = fmtp_remote_codec_rate_99;
Not folded
Folding PHI node: match_1 = PHI <match_655(250), match_661(256), match_661(257)>
No folding possible
Folding PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_98(250), remote_codec_rate_98(256), remote_codec_rate_662(257)>
No folding possible
Folding statement: if (D.44952_665 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44952_665 = D.44950_663 && D.44951_664;
Not folded
Folding statement: D.44951_664 = bit_rate_631 != 0;
Not folded
Folding statement: D.44950_663 = match_1 != 0;
Not folded
Folding statement: # DEBUG match => match_1
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_96
Not folded
Folding statement: if (D.44957_668 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44957_668 = D.44955_666 && D.44956_667;
Not folded
Folding statement: D.44956_667 = map_bit_rate_132 != bit_rate_631;
Not folded
Folding statement: D.44955_666 = map_bit_rate_132 != 0;
Not folded
Folding statement: if (D.44960_670 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44960_670 = strcasecmp (D.44889_669, "ilbc");
Not folded
Folding statement: D.44889_669 = map_128->rm_encoding;
Not folded
Folding statement: if (D.44963_672 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44963_672 = strcasecmp (D.44889_671, "isac");
Not folded
Folding statement: D.44889_671 = map_128->rm_encoding;
Not folded
Folding statement: # DEBUG match => match_673
Folded into: # DEBUG match => 0

Folding statement: match_673 = 0;
Folded into: match_673 = 0;

Folding PHI node: match_2 = PHI <match_1(258), match_1(259), match_1(260), match_1(261), match_673(262)>
Folded into: match_2 = PHI <match_1(258), match_1(259), match_1(260), match_1(261), 0(262)>

Folding statement: if (D.44969_676 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44969_676 = D.44950_674 && D.44968_675;
Not folded
Folding statement: D.44968_675 = remote_codec_rate_96 != 0;
Not folded
Folding statement: D.44950_674 = match_2 != 0;
Not folded
Folding statement: # DEBUG match => match_2
Not folded
Folding statement: if (D.44974_679 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44974_679 = D.44972_677 && D.44973_678;
Not folded
Folding statement: D.44973_678 = remote_codec_rate_96 != codec_rate_632;
Not folded
Folding statement: D.44972_677 = codec_rate_632 != 0;
Not folded
Folding statement: if (D.44977_681 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44977_681 = strcasecmp (D.44889_680, "pcma");
Not folded
Folding statement: D.44889_680 = map_128->rm_encoding;
Not folded
Folding statement: if (D.44979_683 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44979_683 = strcasecmp (D.44889_682, "pcmu");
Not folded
Folding statement: D.44889_682 = map_128->rm_encoding;
Not folded
Folding statement: # DEBUG match => match_684
Folded into: # DEBUG match => 0

Folding statement: match_684 = 0;
Folded into: match_684 = 0;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
Not folded
Folding PHI node: match_3 = PHI <match_2(263), match_2(264), match_2(266), match_684(267)>
Folded into: match_3 = PHI <match_2(263), match_2(264), match_2(266), 0(267)>

Folding PHI node: .MEM_1130 = PHI <.MEM_1309(263), .MEM_1309(264), .MEM_1309(266), .MEM_1310(267)>
No folding possible
Folding statement: if (match_3 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG match => match_3
Not folded
Folding statement: if (scrooge_80 != 0)
which is likely CONSTANT
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
Not folded
Folding statement: D.44930_688 = D.44929_687 / 1000;
Not folded
Folding statement: D.44929_687 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44984_686 = imp_629->samples_per_second;
Not folded
Folding statement: D.44926_685 = imp_629->iananame;
Not folded
Folding statement: if (D.44991_691 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44991_691 = D.44989_689 && D.44990_690;
Not folded
Folding statement: D.44990_690 = codec_ms_90 != 0;
Not folded
Folding statement: D.44989_689 = ptime_35 != 0;
Not folded
Folding statement: if (D.44993_692 != D.44929_693)
which is likely CONSTANT
Not folded
Folding statement: D.44929_693 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44993_692 = codec_ms_90 * 1000;
Not folded
Folding statement: if (remote_codec_rate_96 != codec_rate_632)
which is likely VARYING
Not folded
Folding statement: // predicted unlikely by continue predictor.
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_701
Not folded
Folding statement: nm_idx_701 = nm_idx_116 + 1;
Not folded
Folding statement: near_matches[nm_idx_116].map = map_128;
Not folded
Folding statement: near_matches[nm_idx_116].imp = imp_629;
Not folded
Folding statement: near_matches[nm_idx_116].rate = remote_codec_rate.92_700;
Not folded
Folding statement: remote_codec_rate.92_700 = (int) remote_codec_rate_96;
Not folded
Folding statement: near_matches[nm_idx_116].codec_idx = i_129;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
Not folded
Folding statement: D.44930_699 = D.44929_698 / 1000;
Not folded
Folding statement: D.44929_698 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44928_697 = (int) D.44927_696;
Not folded
Folding statement: D.44927_696 = imp_629->ianacode;
Not folded
Folding statement: D.44926_695 = imp_629->iananame;
Not folded
Folding statement: # DEBUG match => match_694
Folded into: # DEBUG match => 0

Folding statement: match_694 = 0;
Folded into: match_694 = 0;

Folding PHI node: .MEM_1131 = PHI <.MEM_1311(270), .MEM_1130(273)>
No folding possible
Folding statement: if (m_idx_703 > 29)
which is likely CONSTANT
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
Not folded
Folding statement: D.44930_708 = D.44929_707 / 1000;
Not folded
Folding statement: D.44929_707 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44928_706 = (int) D.44927_705;
Not folded
Folding statement: D.44927_705 = imp_629->ianacode;
Not folded
Folding statement: D.44926_704 = imp_629->iananame;
Not folded
Folding statement: # DEBUG m_idx => m_idx_703
Not folded
Folding statement: m_idx_703 = m_idx_101 + 1;
Not folded
Folding statement: matches[m_idx_101].map = map_128;
Not folded
Folding statement: matches[m_idx_101].imp = imp_629;
Not folded
Folding statement: matches[m_idx_101].rate = codec_rate.94_702;
Not folded
Folding statement: codec_rate.94_702 = (int) codec_rate_632;
Not folded
Folding statement: matches[m_idx_101].codec_idx = i_129;
Not folded
Folding statement: # DEBUG match => match_709
Folded into: # DEBUG match => 0

Folding statement: match_709 = 0;
Folded into: match_709 = 0;

Folding PHI node: match_4 = PHI <match_5(243), match_3(268), match_694(274), match_709(276)>
Folded into: match_4 = PHI <match_5(243), match_3(268), 0(274), 0(276)>

Folding PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_98(243), remote_codec_rate_96(268), remote_codec_rate_96(274), remote_codec_rate_96(276)>
No folding possible
Folding PHI node: m_idx_100 = PHI <m_idx_101(243), m_idx_101(268), m_idx_101(274), m_idx_703(276)>
No folding possible
Folding PHI node: nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>
No folding possible
Folding PHI node: .MEM_1132 = PHI <.MEM_1133(243), .MEM_1130(268), .MEM_1316(274), .MEM_1321(276)>
No folding possible
Folding statement: # DEBUG i => i_710
Not folded
Folding statement: i_710 = i_129 + 1;
Not folded
Folding statement: # DEBUG match => match_4
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_97
Not folded
Folding statement: # DEBUG m_idx => m_idx_100
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_115
Not folded
Folding PHI node: match_5 = PHI <match_8(241), match_4(277)>
No folding possible
Folding PHI node: remote_codec_rate_98 = PHI <remote_codec_rate_596(241), remote_codec_rate_97(277)>
No folding possible
Folding PHI node: m_idx_101 = PHI <m_idx_104(241), m_idx_100(277)>
No folding possible
Folding PHI node: nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>
No folding possible
Folding PHI node: i_129 = PHI <i_620(241), i_710(277)>
Folded into: i_129 = PHI <0(241), i_710(277)>

Folding PHI node: .MEM_1133 = PHI <.MEM_1129(241), .MEM_1132(277)>
No folding possible
Folding statement: if (D.44999_625 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44999_625 = D.44997_623 && D.44998_624;
Not folded
Folding statement: D.44998_624 = i_129 < total_codecs_85;
Not folded
Folding statement: D.44997_623 = D.44996_622 > i_129;
Not folded
Folding statement: D.44996_622 = D.44471_621->num_codecs;
Not folded
Folding statement: D.44471_621 = smh_186->mparams;
Not folded
Folding statement: # DEBUG match => match_5
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_98
Not folded
Folding statement: # DEBUG m_idx => m_idx_101
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_116
Not folded
Folding statement: # DEBUG i => i_129
Not folded
Folding PHI node: match_6 = PHI <match_3(275), match_5(278)>
No folding possible
Folding PHI node: m_idx_102 = PHI <m_idx_703(275), m_idx_101(278)>
No folding possible
Folding PHI node: .MEM_1134 = PHI <.MEM_1321(275), .MEM_1133(278)>
No folding possible
Folding statement: if (m_idx_102 > 29)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG match => match_6
Not folded
Folding statement: # DEBUG m_idx => m_idx_102
Not folded
Folding PHI node: match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>
No folding possible
Folding PHI node: best_te_19 = PHI <best_te_18(204), best_te_20(210), best_te_20(212), best_te_20(214), best_te_20(279)>
No folding possible
Folding PHI node: cng_pt_24 = PHI <cng_pt_25(204), cng_pt_573(210), cng_pt_25(212), cng_pt_25(214), cng_pt_25(279)>
No folding possible
Folding PHI node: x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>
No folding possible
Folding PHI node: codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>
No folding possible
Folding PHI node: m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>
No folding possible
Folding PHI node: nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>
No folding possible
Folding PHI node: .MEM_1135 = PHI <.MEM_1126(204), .MEM_1127(210), .MEM_1303(212), .MEM_1303(214), .MEM_1134(279)>
No folding possible
Folding statement: # DEBUG map => map_711
Not folded
Folding statement: map_711 = map_128->rm_next;
Not folded
Folding statement: # DEBUG match => match_7
Not folded
Folding statement: # DEBUG best_te => best_te_19
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_24
Not folded
Folding statement: # DEBUG x => x_48
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_91
Not folded
Folding statement: # DEBUG m_idx => m_idx_103
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_117
Not folded
Folding PHI node: match_8 = PHI <match_16(197), match_7(280)>
No folding possible
Folding PHI node: best_te_20 = PHI <best_te_23(197), best_te_19(280)>
No folding possible
Folding PHI node: cng_pt_25 = PHI <cng_pt_27(197), cng_pt_24(280)>
No folding possible
Folding PHI node: x_49 = PHI <x_558(197), x_48(280)>
Folded into: x_49 = PHI <0(197), x_48(280)>

Folding PHI node: codec_ms_92 = PHI <codec_ms_95(197), codec_ms_91(280)>
No folding possible
Folding PHI node: m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>
No folding possible
Folding PHI node: nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>
No folding possible
Folding PHI node: map_128 = PHI <map_559(197), map_711(280)>
No folding possible
Folding PHI node: .MEM_1136 = PHI <.MEM_1125(197), .MEM_1135(280)>
No folding possible
Folding statement: if (map_128 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG match => match_8
Not folded
Folding statement: # DEBUG best_te => best_te_20
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_25
Not folded
Folding statement: # DEBUG x => x_49
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_92
Not folded
Folding statement: # DEBUG m_idx => m_idx_104
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_118
Not folded
Folding statement: # DEBUG map => map_128
Not folded
Folding PHI node: match_9 = PHI <match_6(279), match_8(281)>
No folding possible
Folding PHI node: codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>
No folding possible
Folding PHI node: m_idx_105 = PHI <m_idx_102(279), m_idx_104(281)>
No folding possible
Folding PHI node: nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>
No folding possible
Folding PHI node: .MEM_1137 = PHI <.MEM_1134(279), .MEM_1136(281)>
No folding possible
Folding statement: if (D.45004_715 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.45004_715 = D.45002_713 && D.45003_714;
Not folded
Folding statement: D.45003_714 = got_crypto_54 <= 0;
Not folded
Folding statement: D.45002_713 = D.45001_712 == 1;
Not folded
Folding statement: D.45001_712 = smh_186->crypto_mode;
Not folded
Folding statement: # DEBUG match => match_9
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_93
Not folded
Folding statement: # DEBUG m_idx => m_idx_105
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_119
Not folded
Folding statement: # DEBUG m_idx => m_idx_718
Folded into: # DEBUG m_idx => 0

Folding statement: m_idx_718 = 0;
Folded into: m_idx_718 = 0;

Folding statement: # DEBUG nm_idx => nm_idx_717
Folded into: # DEBUG nm_idx => 0

Folding statement: nm_idx_717 = 0;
Folded into: nm_idx_717 = 0;

Folding statement: # DEBUG match => match_716
Folded into: # DEBUG match => 0

Folding statement: match_716 = 0;
Folded into: match_716 = 0;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
Not folded
Folding PHI node: match_10 = PHI <match_9(282), match_716(283)>
Folded into: match_10 = PHI <match_9(282), 0(283)>

Folding PHI node: m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>
Folded into: m_idx_106 = PHI <m_idx_105(282), 0(283)>

Folding PHI node: nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>
Folded into: nm_idx_120 = PHI <nm_idx_119(282), 0(283)>

Folding PHI node: .MEM_1138 = PHI <.MEM_1137(282), .MEM_1322(283)>
No folding possible
Folding statement: if (D.45009_721 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.45009_721 = D.45007_719 && D.45008_720;
Not folded
Folding statement: D.45008_720 = nm_idx_120 != 0;
Not folded
Folding statement: D.45007_719 = m_idx_106 == 0;
Not folded
Folding statement: # DEBUG match => match_10
Not folded
Folding statement: # DEBUG m_idx => m_idx_106
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_120
Not folded
Folding statement: # DEBUG j => j_722
Folded into: # DEBUG j => 0

Folding statement: j_722 = 0;
Folded into: j_722 = 0;

Folding statement: if (near_rate_725 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.45013_728 = near_match_726->iananame;
Not folded
Folding statement: # DEBUG near_map => near_map_727
Not folded
Folding statement: near_map_727 = near_matches[j_133].map;
Not folded
Folding statement: # DEBUG near_match => near_match_726
Not folded
Folding statement: near_match_726 = near_matches[j_133].imp;
Not folded
Folding statement: # DEBUG near_rate => near_rate_725
Not folded
Folding statement: near_rate_725 = (uint32_t) D.45012_724;
Not folded
Folding statement: D.45012_724 = near_matches[j_133].rate;
Not folded
Folding statement: # DEBUG timp => timp_723
Folded into: # DEBUG timp => 0B

Removing dead stmt timp_723 = 0B;

Folding statement: near_rate_729 = near_match_726->samples_per_second;
Not folded
Folding statement: near_rate_730 = near_rate_725;
Not folded
Folding PHI node: near_rate_145 = PHI <near_rate_729(287), near_rate_730(288)>
No folding possible
Folding statement: if (num_731 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG num => num_731
Not folded
Folding statement: num_731 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);
Not folded
Folding statement: prefs[0] = &tmp;
Not folded
Folding statement: switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);
Not folded
Folding statement: # DEBUG timp => timp_732
Not folded
Folding statement: timp_732 = search[0];
Not folded
Folding statement: # DEBUG timp => timp_733
Not folded
Folding statement: timp_733 = near_match_726;
Not folded
Folding PHI node: timp_134 = PHI <timp_732(290), timp_733(291)>
No folding possible
Folding statement: if (maxptime_39 == 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG timp => timp_134
Not folded
Folding statement: if (D.45025_735 <= maxptime_39)
which is likely VARYING
Not folded
Folding statement: D.45025_735 = D.45024_734 / 1000;
Not folded
Folding statement: D.45024_734 = timp_134->microseconds_per_packet;
Not folded
Folding statement: # DEBUG m_idx => m_idx_744
Not folded
Folding statement: m_idx_744 = m_idx_106 + 1;
Not folded
Folding statement: matches[m_idx_106].map = near_map_727;
Not folded
Folding statement: matches[m_idx_106].imp = timp_134;
Not folded
Folding statement: matches[m_idx_106].rate = near_rate.96_743;
Not folded
Folding statement: near_rate.96_743 = (int) near_rate_725;
Not folded
Folding statement: matches[m_idx_106].codec_idx = D.45028_742;
Not folded
Folding statement: D.45028_742 = near_matches[j_133].codec_idx;
Not folded
Folding statement: # DEBUG match => match_741
Folded into: # DEBUG match => 1

Folding statement: match_741 = 1;
Folded into: match_741 = 1;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
Not folded
Folding statement: D.45027_740 = timp_134->actual_samples_per_second;
Not folded
Folding statement: D.45025_739 = D.45024_738 / 1000;
Not folded
Folding statement: D.45024_738 = timp_134->microseconds_per_packet;
Not folded
Folding statement: D.45026_737 = timp_134->iananame;
Not folded
Folding statement: # DEBUG j => j_736
Not folded
Folding statement: j_736 = j_133 + 1;
Not folded
Folding PHI node: j_133 = PHI <j_722(285), j_736(295)>
Folded into: j_133 = PHI <0(285), j_736(295)>

Folding PHI node: .MEM_1139 = PHI <.MEM_1138(285), .MEM_1325(295)>
No folding possible
Folding statement: if (j_133 < nm_idx_120)
which is likely VARYING
Not folded
Folding statement: # DEBUG j => j_133
Not folded
Folding PHI node: match_11 = PHI <match_10(284), match_741(294), match_10(296)>
Folded into: match_11 = PHI <match_10(284), 1(294), match_10(296)>

Folding PHI node: m_idx_107 = PHI <m_idx_106(284), m_idx_744(294), m_idx_106(296)>
No folding possible
Folding PHI node: .MEM_1140 = PHI <.MEM_1138(284), .MEM_1330(294), .MEM_1139(296)>
No folding possible
Folding statement: if (m_idx_107 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG match => match_11
Not folded
Folding statement: # DEBUG m_idx => m_idx_107
Not folded
Folding statement: if (greedy_47 != 0)
which is likely CONSTANT
Not folded
Folding statement: greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);
Not folded
Folding PHI node: .MEM_1141 = PHI <.MEM_1140(298), .MEM_1331(299)>
No folding possible
Folding statement: # DEBUG j => j_746
Folded into: # DEBUG j => 0

Folding statement: j_746 = 0;
Folded into: j_746 = 0;

Folding statement: smh_186->num_negotiated_codecs = 0;
Not folded
Folding statement: a_engine_188->codec_negotiated = 1;
Not folded
Folding statement: # DEBUG match => match_745
Folded into: # DEBUG match => 1

Folding statement: match_745 = 1;
Folded into: match_745 = 1;

Folding statement: if (j_135 == 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG mmap => mmap_762
Not folded
Folding statement: mmap_762 = matches[j_135].map;
Not folded
Folding statement: # DEBUG mimp => mimp_761
Not folded
Folding statement: mimp_761 = matches[j_135].imp;
Not folded
Folding statement: # DEBUG pmap => pmap_760
Not folded
Folding statement: pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
Not folded
Folding statement: D.45043_759 = (uint32_t) D.45042_758;
Not folded
Folding statement: D.45042_758 = D.45041_757 / 1000;
Not folded
Folding statement: D.45041_757 = D.45039_756->microseconds_per_packet;
Not folded
Folding statement: D.45039_756 = matches[j_135].imp;
Not folded
Folding statement: D.45040_755 = D.45039_754->samples_per_second;
Not folded
Folding statement: D.45039_754 = matches[j_135].imp;
Not folded
Folding statement: D.45038_753 = (uint32_t) D.45037_752;
Not folded
Folding statement: D.45037_752 = D.45034_751->rm_pt;
Not folded
Folding statement: D.45034_751 = matches[j_135].map;
Not folded
Folding statement: D.45036_750 = D.45034_749->rm_fmtp;
Not folded
Folding statement: D.45034_749 = matches[j_135].map;
Not folded
Folding statement: D.45035_748 = D.45034_747->rm_encoding;
Not folded
Folding statement: D.45034_747 = matches[j_135].map;
Not folded
Folding statement: if (D.44605_764 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44605_764 = a_engine_188->rtp_session;
Not folded
Folding statement: D.44750_763->current = 1;
Not folded
Folding statement: D.44750_763 = a_engine_188->cur_payload_map;
Not folded
Folding statement: a_engine_188->cur_payload_map = pmap_760;
Not folded
Folding statement: switch_rtp_set_default_payload (D.44605_765, D.45048_766);
Not folded
Folding statement: D.45048_766 = pmap_760->pt;
Not folded
Folding statement: D.44605_765 = a_engine_188->rtp_session;
Not folded
Folding PHI node: .MEM_1142 = PHI <.MEM_1334(301), .MEM_1336(302), .MEM_1337(303)>
No folding possible
Folding statement: if (D.45056_776 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.45056_776 = strcasecmp (D.45051_775, "g722");
Not folded
Folding statement: D.45051_775 = mimp_761->iananame;
Not folded
Folding statement: pmap_760->adv_rm_rate = D.45055_774;
Not folded
Folding statement: D.45055_774 = mimp_761->samples_per_second;
Not folded
Folding statement: pmap_760->rm_rate = D.45055_773;
Not folded
Folding statement: D.45055_773 = mimp_761->samples_per_second;
Not folded
Folding statement: pmap_760->recv_pt = D.45054_772;
Not folded
Folding statement: D.45054_772 = (unsigned char) D.45053_771;
Not folded
Folding statement: D.45053_771 = mmap_762->rm_pt;
Not folded
Folding statement: pmap_760->iananame = D.45052_770;
Not folded
Folding statement: D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
Not folded
Folding statement: D.45051_769 = mimp_761->iananame;
Not folded
Folding statement: pmap_760->rm_encoding = D.45050_768;
Not folded
Folding statement: D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
Not folded
Folding statement: D.45049_767 = mmap_762->rm_encoding;
Not folded
Folding statement: pmap_760->rm_rate = D.45059_777;
Not folded
Folding statement: D.45059_777 = mimp_761->actual_samples_per_second;
Not folded
Folding PHI node: .MEM_1143 = PHI <.MEM_1344(304), .MEM_1345(305)>
No folding possible
Folding statement: if (D.45066_783 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.45066_783 = mmap_762->rm_params;
Not folded
Folding statement: pmap_760->bitrate = D.45064_782;
Not folded
Folding statement: D.45064_782 = (uint32_t) D.45063_781;
Not folded
Folding statement: D.45063_781 = mimp_761->bits_per_second;
Not folded
Folding statement: pmap_760->codec_ms = D.45062_780;
Not folded
Folding statement: D.45062_780 = (uint32_t) D.45061_779;
Not folded
Folding statement: D.45061_779 = D.45060_778 / 1000;
Not folded
Folding statement: D.45060_778 = mimp_761->microseconds_per_packet;
Not folded
Folding statement: D.47922_785 = D.47922_1538;
Not folded
Folding statement: D.47922_1538 = D.47922_1485;
Not folded
Folding statement: D.47922_1485 = strtol (D.45066_784, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.45066_784
Not folded
Folding statement: D.45066_784 = mmap_762->rm_params;
Not folded
Folding statement: D.47922_786 = 1;
Folded into: D.47922_786 = 1;

Folding PHI node: D.47922_146 = PHI <D.47922_785(307), D.47922_786(308)>
Folded into: D.47922_146 = PHI <D.47922_785(307), 1(308)>

Folding PHI node: .MEM_1514 = PHI <.MEM_1537(307), .MEM_1347(308)>
No folding possible
Folding statement: if (D.45070_788 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.45070_788 = strcasecmp (D.45049_787, "opus");
Not folded
Folding statement: D.45049_787 = mmap_762->rm_encoding;
Not folded
Folding statement: pmap_760->channels = D.47922_146;
Not folded
Folding statement: if (D.45073_789 == 1)
which is likely CONSTANT
Not folded
Folding statement: D.45073_789 = pmap_760->channels;
Not folded
Folding statement: pmap_760->adv_channels = 1;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
Not folded
Folding statement: pmap_760->adv_channels = 2;
Not folded
Folding PHI node: .MEM_1144 = PHI <.MEM_1350(311), .MEM_1351(312)>
No folding possible
Folding statement: if (D.45079_790 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG s => D.45079_790
Not folded
Folding statement: D.45079_790 = mmap_762->rm_fmtp;
Not folded
Folding statement: if (D.47926_1486 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47926_1486 = *D.45079_790;
Not folded
Folding PHI node: D.47925_1487 = PHI <1(313), 1(314), 0(315)>
No folding possible
Folding statement: if (D.47925_791 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47925_791 = D.47925_1539;
Not folded
Folding statement: D.47925_1539 = D.47925_1487;
Not folded
Folding statement: if (D.45082_793 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.45082_793 = switch_stristr ("stereo=1", D.45079_792);
Not folded
Folding statement: D.45079_792 = mmap_762->rm_fmtp;
Not folded
Folding statement: pmap_760->channels = 2;
Not folded
Folding PHI node: .MEM_1145 = PHI <.MEM_1144(316), .MEM_1352(317)>
No folding possible
Folding statement: pmap_760->channels = 1;
Not folded
Folding statement: pmap_760->adv_channels = D.45073_794;
Not folded
Folding statement: D.45073_794 = pmap_760->channels;
Not folded
Folding PHI node: .MEM_1146 = PHI <.MEM_1354(319), .MEM_1355(320), .MEM_1353(318)>
No folding possible
Folding statement: # DEBUG j => j_807
Not folded
Folding statement: j_807 = j_135 + 1;
Not folded
Folding statement: pmap_760->recv_pt = D.45054_806;
Not folded
Folding statement: D.45054_806 = (unsigned char) D.45053_805;
Not folded
Folding statement: D.45053_805 = mmap_762->rm_pt;
Not folded
Folding statement: smh_186->num_negotiated_codecs = D.45089_804;
Not folded
Folding statement: D.45089_804 = D.44655_803 + 1;
Not folded
Folding statement: smh_186->negotiated_codecs[D.44655_803] = mimp_761;
Not folded
Folding statement: D.44655_803 = smh_186->num_negotiated_codecs;
Not folded
Folding statement: pmap_760->agreed_pt = D.45054_802;
Not folded
Folding statement: D.45054_802 = (unsigned char) D.45053_801;
Not folded
Folding statement: D.45053_801 = mmap_762->rm_pt;
Not folded
Folding statement: pmap_760->rm_fmtp = D.45088_800;
Not folded
Folding statement: D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
Not folded
Folding statement: D.45079_799 = mmap_762->rm_fmtp;
Not folded
Folding statement: pmap_760->remote_sdp_port = D.45087_798;
Not folded
Folding statement: D.45087_798 = (short unsigned int) D.44697_797;
Not folded
Folding statement: D.44697_797 = m_28->m_port;
Not folded
Folding statement: pmap_760->remote_sdp_ip = D.45086_796;
Not folded
Folding statement: D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
Not folded
Folding statement: D.45085_795 = connection_124->c_address;
Not folded
Folding PHI node: j_135 = PHI <j_746(300), j_807(321)>
Folded into: j_135 = PHI <0(300), j_807(321)>

Folding PHI node: .MEM_1147 = PHI <.MEM_1333(300), .MEM_1364(321)>
No folding possible
Folding statement: if (j_135 < m_idx_107)
which is likely VARYING
Not folded
Folding statement: # DEBUG j => j_135
Not folded
Folding PHI node: match_12 = PHI <match_11(297), match_745(322)>
Folded into: match_12 = PHI <match_11(297), 1(322)>

Folding PHI node: .MEM_1148 = PHI <.MEM_1140(297), .MEM_1147(322)>
No folding possible
Folding statement: if (match_12 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG match => match_12
Not folded
Folding statement: if (D.45094_819 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG codec => D.45094_819
Not folded
Folding statement: D.45094_819 = &a_engine_188->read_codec;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);
Not folded
Folding statement: D.44530_818 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45093_817);
Not folded
Folding statement: D.45093_817 = (int) D.45092_816;
Not folded
Folding statement: D.45092_816 = D.44750_815->recv_pt;
Not folded
Folding statement: D.44750_815 = a_engine_188->cur_payload_map;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);
Not folded
Folding statement: D.44530_814 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);
Not folded
Folding statement: D.44760_813 = D.44750_812->remote_sdp_ip;
Not folded
Folding statement: D.44750_812 = a_engine_188->cur_payload_map;
Not folded
Folding statement: D.44530_811 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.44767_810);
Not folded
Folding statement: D.44767_810 = (int) D.44762_809;
Not folded
Folding statement: D.44762_809 = D.44750_808->remote_sdp_port;
Not folded
Folding statement: D.44750_808 = a_engine_188->cur_payload_map;
Not folded
Folding statement: if (D.47933_1489 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.47933_1489 = D.47934_1488 & 256;
Not folded
Folding statement: D.47934_1488 = D.45094_819->flags;
Not folded
Folding statement: if (D.47932_1490 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.47932_1490 = D.45094_819->mutex;
Not folded
Folding statement: if (D.47931_1491 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.47931_1491 = D.45094_819->codec_interface;
Not folded
Folding statement: if (D.47930_1492 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.47930_1492 = D.45094_819->implementation;
Not folded
Folding PHI node: iftmp.104_1493 = PHI <1(328), 0(329)>
No folding possible
Folding statement: if (D.47929_820 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.47929_820 = D.47929_1540;
Not folded
Folding statement: D.47929_1540 = D.47929_1494;
Not folded
Folding statement: D.47929_1494 = (switch_bool_t) iftmp.104_1493;
Not folded
Folding statement: a_engine_188->reset_codec = 1;
Not folded
Folding PHI node: .MEM_1149 = PHI <.MEM_1369(330), .MEM_1370(331)>
No folding possible
Folding statement: if (D.45099_823 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
Not folded
Folding statement: D.45098_822 = D.44471_821->codec_flags;
Not folded
Folding statement: D.44471_821 = smh_186->mparams;
Not folded
Folding statement: check_ice (smh_186, 0, sdp_198, m_28);
Not folded
Folding statement: # DEBUG got_audio => got_audio_824
Folded into: # DEBUG got_audio => 1

Folding statement: got_audio_824 = 1;
Folded into: got_audio_824 = 1;

Folding statement: # DEBUG match => match_825
Folded into: # DEBUG match => 0

Folding statement: match_825 = 0;
Folded into: match_825 = 0;

Folding PHI node: match_13 = PHI <match_12(323), match_12(333), match_825(334)>
Folded into: match_13 = PHI <match_12(323), match_12(333), 0(334)>

Folding PHI node: got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>
Folded into: got_audio_65 = PHI <got_audio_67(323), 1(333), got_audio_67(334)>

Folding PHI node: .MEM_1150 = PHI <.MEM_1148(323), .MEM_1372(333), .MEM_1371(334)>
No folding possible
Folding statement: if (best_te_20 == 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG match => match_13
Not folded
Folding statement: # DEBUG got_audio => got_audio_65
Not folded
Folding statement: if (D.45107_826 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);
Not folded
Folding statement: if (D.45109_828 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.45109_828 = switch_channel_test_flag (D.44530_827, 93);
Not folded
Folding statement: D.44530_827 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1151 = PHI <.MEM_1373(336), .MEM_1374(337)>
No folding possible
Folding statement: # DEBUG best_te => best_te_833
Not folded
Folding statement: best_te_833 = D.44471_832->te;
Not folded
Folding statement: D.44471_832 = smh_186->mparams;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);
Not folded
Folding statement: D.45111_831 = (int) D.45110_830;
Not folded
Folding statement: D.45110_830 = D.44471_829->te;
Not folded
Folding statement: D.44471_829 = smh_186->mparams;
Not folded
Folding PHI node: best_te_21 = PHI <best_te_20(335), best_te_20(337), best_te_833(338)>
No folding possible
Folding PHI node: .MEM_1152 = PHI <.MEM_1150(335), .MEM_1374(337), .MEM_1375(338)>
No folding possible
Folding statement: if (best_te_21 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG best_te => best_te_21
Not folded
Folding statement: if (D.45114_834 == 1)
which is likely CONSTANT
Not folded
Folding statement: D.45114_834 = switch_channel_direction (channel_162);
Not folded
Folding statement: if (D.44605_840 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44605_840 = a_engine_188->rtp_session;
Not folded
Folding statement: D.44471_839->dtmf_type = 0;
Not folded
Folding statement: D.44471_839 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);
Not folded
Folding statement: D.44530_838 = session_161(D)->channel;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);
Not folded
Folding statement: D.44857_837 = (int) best_te_21;
Not folded
Folding statement: # DEBUG te => te_836
Not folded
Removing dead stmt te_836 = D.44471_835->te;

Folding statement: D.44471_835->te = best_te_21;
Not folded
Folding statement: D.44471_835 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_843);
Not folded
Folding statement: D.44857_843 = (int) best_te_21;
Not folded
Folding statement: D.44530_842 = session_161(D)->channel;
Not folded
Folding statement: switch_rtp_set_telephony_event (D.44605_841, best_te_21);
Not folded
Folding statement: D.44605_841 = a_engine_188->rtp_session;
Not folded
Folding statement: if (D.44605_851 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44605_851 = a_engine_188->rtp_session;
Not folded
Folding statement: D.44471_850->dtmf_type = 0;
Not folded
Folding statement: D.44471_850 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);
Not folded
Folding statement: D.44530_849 = session_161(D)->channel;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);
Not folded
Folding statement: D.45120_848 = (int) te_847;
Not folded
Folding statement: # DEBUG te => te_847
Not folded
Folding statement: te_847 = D.44471_845->recv_te;
Not folded
Folding statement: D.44471_845->recv_te = D.45110_846;
Not folded
Folding statement: D.45110_846 = D.44471_845->te;
Not folded
Folding statement: D.44471_845->te = best_te_21;
Not folded
Folding statement: D.44471_845 = smh_186->mparams;
Not folded
Removing dead stmt D.44471_844 = smh_186->mparams;

Folding statement: switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_857);
Not folded
Folding statement: D.45120_857 = (int) te_847;
Not folded
Folding statement: D.44530_856 = session_161(D)->channel;
Not folded
Folding statement: switch_rtp_set_telephony_recv_event (D.44605_855, te_847);
Not folded
Folding statement: D.44605_855 = a_engine_188->rtp_session;
Not folded
Folding statement: switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_854);
Not folded
Folding statement: D.45120_854 = (int) te_847;
Not folded
Folding statement: D.44530_853 = session_161(D)->channel;
Not folded
Folding statement: switch_rtp_set_telephony_event (D.44605_852, te_847);
Not folded
Folding statement: D.44605_852 = a_engine_188->rtp_session;
Not folded
Folding statement: if (D.45125_859 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.45125_859 = switch_false (D.45124_858);
Not folded
Folding statement: D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
Not folded
Folding statement: # DEBUG te => te_865
Not folded
Removing dead stmt te_865 = D.44471_863->recv_te;

Folding statement: D.44471_863->recv_te = D.45110_864;
Not folded
Folding statement: D.45110_864 = D.44471_863->te;
Not folded
Folding statement: D.44471_863->te = 0;
Not folded
Folding statement: D.44471_863 = smh_186->mparams;
Not folded
Removing dead stmt D.44471_862 = smh_186->mparams;

Folding statement: D.44471_861->dtmf_type = 1;
Not folded
Folding statement: D.44471_861 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);
Not folded
Folding statement: D.44530_860 = session_161(D)->channel;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
Not folded
Folding statement: # DEBUG te => te_871
Not folded
Removing dead stmt te_871 = D.44471_869->recv_te;

Folding statement: D.44471_869->recv_te = D.45110_870;
Not folded
Folding statement: D.45110_870 = D.44471_869->te;
Not folded
Folding statement: D.44471_869->te = 0;
Not folded
Folding statement: D.44471_869 = smh_186->mparams;
Not folded
Removing dead stmt D.44471_868 = smh_186->mparams;

Folding statement: D.44471_867->dtmf_type = 2;
Not folded
Folding statement: D.44471_867 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);
Not folded
Folding statement: D.44530_866 = session_161(D)->channel;
Not folded
Folding statement: if (D.44681_872 == 3)
which is likely CONSTANT
Not folded
Folding statement: D.44681_872 = m_28->m_type;
Not folded
Folding statement: if (D.44697_873 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44697_873 = m_28->m_port;
Not folded
Folding statement: if (D.44546_880 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44546_880 = m_28->m_connections;
Not folded
Folding statement: # DEBUG connection => connection_879
Not folded
Folding statement: connection_879 = sdp_198->sdp_connection;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);
Not folded
Folding statement: D.44530_878 = session_161(D)->channel;
Not folded
Folding statement: memset (&near_matches, 0, 480);
Not folded
Folding statement: memset (&matches, 0, 480);
Not folded
Folding statement: # DEBUG m_idx => m_idx_877
Folded into: # DEBUG m_idx => 0

Folding statement: m_idx_877 = 0;
Folded into: m_idx_877 = 0;

Folding statement: # DEBUG nm_idx => nm_idx_876
Folded into: # DEBUG nm_idx => 0

Folding statement: nm_idx_876 = 0;
Folded into: nm_idx_876 = 0;

Folding statement: # DEBUG vmatch => vmatch_875
Folded into: # DEBUG vmatch => 0

Removing dead stmt vmatch_875 = 0;

Folding statement: # DEBUG mimp => mimp_874
Folded into: # DEBUG mimp => 0B

Removing dead stmt mimp_874 = 0B;

Folding statement: # DEBUG connection => connection_881
Not folded
Folding statement: connection_881 = m_28->m_connections;
Not folded
Folding PHI node: connection_125 = PHI <connection_879(350), connection_881(351)>
No folding possible
Folding statement: if (connection_125 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG connection => connection_125
Not folded
Folding statement: # DEBUG match => match_882
Folded into: # DEBUG match => 0

Folding statement: match_882 = 0;
Folded into: match_882 = 0;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
Not folded
Folding statement: # DEBUG map => map_883
Not folded
Folding statement: map_883 = m_28->m_rtpmaps;
Not folded
Folding statement: if (D.45137_884 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.45137_884 = switch_rtp_has_dtls ();
Not folded
Folding statement: if (D.45140_885 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.45140_885 = dtls_ok (session_161(D));
Not folded
Folding statement: # DEBUG attr => attr_886
Not folded
Folding statement: attr_886 = m_28->m_attributes;
Not folded
Folding statement: if (D.45143_888 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.45143_888 = strcasecmp (D.44590_887, "fingerprint");
Not folded
Folding statement: D.44590_887 = attr_32->a_name;
Not folded
Folding statement: if (D.44619_889 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG s => D.44619_889
Not folded
Folding statement: D.44619_889 = attr_32->a_value;
Not folded
Folding statement: if (D.47939_1495 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47939_1495 = *D.44619_889;
Not folded
Folding PHI node: D.47938_1496 = PHI <1(359), 1(360), 0(361)>
No folding possible
Folding statement: if (D.47938_890 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47938_890 = D.47938_1541;
Not folded
Folding statement: D.47938_1541 = D.47938_1496;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_891
Folded into: # DEBUG got_video_crypto => 1

Folding statement: got_video_crypto_891 = 1;
Folded into: got_video_crypto_891 = 1;

Folding PHI node: got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>
Folded into: got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), 1(363)>

Folding statement: # DEBUG attr => attr_892
Not folded
Folding statement: attr_892 = attr_32->a_next;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_57
Not folded
Folding PHI node: attr_32 = PHI <attr_886(357), attr_892(364)>
No folding possible
Folding PHI node: got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>
No folding possible
Folding statement: if (attr_32 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG attr => attr_32
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_58
Not folded
Folding PHI node: got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>
No folding possible
Folding PHI node: .MEM_1153 = PHI <.MEM_1407(355), .MEM_1408(356), .MEM_1408(365)>
No folding possible
Folding statement: # DEBUG attr => attr_893
Not folded
Folding statement: attr_893 = m_28->m_attributes;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_59
Not folded
Folding statement: if (D.45151_895 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.45151_895 = strcasecmp (D.44590_894, "framerate");
Not folded
Folding statement: D.44590_894 = attr_33->a_name;
Not folded
Folding statement: if (D.44619_896 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44619_896 = attr_33->a_value;
Not folded
Folding statement: if (D.45154_898 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.45154_898 = strcasecmp (D.44590_897, "rtcp-fb");
Not folded
Folding statement: D.44590_897 = attr_33->a_name;
Not folded
Folding statement: if (D.44619_899 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG s => D.44619_899
Not folded
Folding statement: D.44619_899 = attr_33->a_value;
Not folded
Folding statement: if (D.47943_1497 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47943_1497 = *D.44619_899;
Not folded
Folding PHI node: D.47942_1498 = PHI <1(370), 1(371), 0(372)>
No folding possible
Folding statement: if (D.47942_900 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47942_900 = D.47942_1542;
Not folded
Folding statement: D.47942_1542 = D.47942_1498;
Not folded
Folding statement: if (D.45160_902 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.45160_902 = switch_stristr ("fir", D.44619_901);
Not folded
Folding statement: D.44619_901 = attr_33->a_value;
Not folded
Folding statement: v_engine_189->fir = D.45164_904;
Not folded
Folding statement: D.45164_904 = D.45163_903 + 1;
Not folded
Folding statement: D.45163_903 = v_engine_189->fir;
Not folded
Folding PHI node: .MEM_1154 = PHI <.MEM_1409(374), .MEM_1410(375)>
No folding possible
Folding statement: D.44471_905->rtcp_video_interval_msec = "10000";
Not folded
Folding statement: D.44471_905 = smh_186->mparams;
Not folded
Folding statement: if (D.45168_907 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.45168_907 = strcasecmp (D.44590_906, "rtcp");
Not folded
Folding statement: D.44590_906 = attr_33->a_name;
Not folded
Folding statement: if (D.44619_908 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.44619_908 = attr_33->a_value;
Not folded
Folding statement: if (__s2_len_909 <= 3)
which is likely CONSTANT
Folding predicate __s2_len_909 <= 3 to 1
Folded into: if (1 != 0)

Folding statement: # DEBUG __s2_len => __s2_len_909
Folded into: # DEBUG __s2_len => 1

Folding statement: __s2_len_909 = 1;
Folded into: __s2_len_909 = 1;

Folding statement: if (D.45181_919 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.45181_919 = D.45179_917 && D.45180_918;
Folded into: D.45181_919 = D.45180_918;

Folding statement: D.45180_918 = __result_916 == 0;
Not folded
Removing dead stmt D.45179_917 = 1;

Folding statement: # DEBUG __result => __result_916
Not folded
Folding statement: __result_916 = D.45175_912 - D.45178_915;
Folded into: __result_916 = D.45175_912 + -49;

Removing dead stmt D.45178_915 = 49;

Removing dead stmt D.45177_914 = 49;

Removing dead stmt D.45176_913 = "1";

Folding statement: D.45175_912 = (int) D.45174_911;
Not folded
Folding statement: D.45174_911 = *__s1_910;
Not folded
Folding statement: # DEBUG __s1 => __s1_910
Not folded
Folding statement: __s1_910 = attr_33->a_value;
Not folded
Folding statement: if (D.45191_929 != 0)
which is likely CONSTANT
Folding predicate D.45191_929 != 0 to 0
Folded into: if (0 != 0)

Removing dead stmt D.45191_929 = 0;

Removing dead stmt D.45180_928 = __result_926 == 0;

Removing dead stmt D.45190_927 = 0;

Folding statement: # DEBUG __result => __result_926
Not folded
Folding statement: __result_926 = D.45186_922 - D.45189_925;
Folded into: __result_926 = D.45186_922;

Removing dead stmt D.45189_925 = 0;

Removing dead stmt D.45188_924 = 0;

Removing dead stmt D.45187_923 = &"1"[1];

Folding statement: D.45186_922 = (int) D.45185_921;
Not folded
Folding statement: D.45185_921 = *D.45184_920;
Not folded
Folding statement: D.45184_920 = __s1_910 + 1;
Not folded
Folding statement: if (D.45201_939 != 0)
which is likely VARYING
Not folded
Folding statement: D.45201_939 = D.45200_937 && D.45180_938;
Not folded
Folding statement: D.45180_938 = __result_936 == 0;
Not folded
Folding statement: D.45200_937 = __s2_len_909 > 2;
Folded into: D.45200_937 = 0;

Folding statement: # DEBUG __result => __result_936
Not folded
Folding statement: __result_936 = D.45196_932 - D.45199_935;
Not folded
Folding statement: D.45199_935 = (int) D.45198_934;
Not folded
Folding statement: D.45198_934 = MEM[(const unsigned char *)D.45197_933];
Not folded
Folding statement: D.45197_933 = &"1"[2];
Not folded
Folding statement: D.45196_932 = (int) D.45195_931;
Not folded
Folding statement: D.45195_931 = *D.45194_930;
Not folded
Folding statement: D.45194_930 = __s1_910 + 2;
Not folded
Folding statement: # DEBUG __result => __result_946
Not folded
Folding statement: __result_946 = D.45206_942 - D.45209_945;
Not folded
Folding statement: D.45209_945 = (int) D.45208_944;
Not folded
Folding statement: D.45208_944 = MEM[(const unsigned char *)D.45207_943];
Not folded
Folding statement: D.45207_943 = &"1"[3];
Not folded
Folding statement: D.45206_942 = (int) D.45205_941;
Not folded
Folding statement: D.45205_941 = *D.45204_940;
Not folded
Folding statement: D.45204_940 = __s1_910 + 3;
Not folded
Folding PHI node: __result_140 = PHI <__result_916(380), __result_926(381), __result_936(382), __result_946(383)>
No folding possible
Folding statement: __result_948 = __result_947;
Not folded
Folding statement: __result_947 = __result_140;
Not folded
Folding statement: # DEBUG __result => __result_140
Not folded
Folding statement: __result_950 = __builtin_strcmp (D.44619_949, "1");
Not folded
Folding statement: D.44619_949 = attr_33->a_value;
Not folded
Folding PHI node: __result_147 = PHI <__result_948(384), __result_950(385)>
No folding possible
Folding statement: if (__result_951 == 0)
which is likely CONSTANT
Not folded
Folding statement: __result_951 = __result_147;
Not folded
Folding statement: if (D.45214_958 == 0B)
which is likely CONSTANT
Not folded
Folding statement: D.45214_958 = D.44471_957->rtcp_video_interval_msec;
Not folded
Folding statement: D.44471_957 = smh_186->mparams;
Not folded
Folding statement: v_engine_189->remote_rtcp_port = D.45213_956;
Not folded
Folding statement: D.45213_956 = (short unsigned int) D.47946_955;
Not folded
Folding statement: D.47946_955 = D.47946_1544;
Not folded
Folding statement: D.47946_1544 = D.47946_1499;
Not folded
Folding statement: D.47946_1499 = strtol (D.44619_954, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_954
Not folded
Folding statement: D.44619_954 = attr_33->a_value;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_953, 1);
Not folded
Folding statement: D.44619_953 = attr_33->a_value;
Not folded
Folding statement: D.44530_952 = session_161(D)->channel;
Not folded
Folding statement: D.44471_959->rtcp_video_interval_msec = "5000";
Not folded
Folding statement: D.44471_959 = smh_186->mparams;
Not folded
Folding statement: if (got_video_crypto_61 == 0)
which is likely CONSTANT
Not folded
Folding statement: if (D.45219_961 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.45219_961 = strcasecmp (D.44590_960, "crypto");
Not folded
Folding statement: D.44590_960 = attr_33->a_name;
Not folded
Folding statement: if (D.44619_962 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG s => D.44619_962
Not folded
Folding statement: D.44619_962 = attr_33->a_value;
Not folded
Folding statement: if (D.47950_1500 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47950_1500 = *D.44619_962;
Not folded
Folding PHI node: D.47949_1501 = PHI <1(391), 1(392), 0(393)>
No folding possible
Folding statement: if (D.47949_963 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47949_963 = D.47949_1545;
Not folded
Folding statement: D.47949_1545 = D.47949_1501;
Not folded
Folding statement: if (D.44822_966 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.44822_966 = D.44821_965 & 4;
Not folded
Folding statement: D.44821_965 = D.44471_964->ndlb;
Not folded
Folding statement: D.44471_964 = smh_186->mparams;
Not folded
Folding statement: if (D.45228_969 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.45228_969 = switch_true (D.45227_968);
Not folded
Folding statement: D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);
Not folded
Folding statement: D.44530_967 = session_161(D)->channel;
Not folded
Folding statement: if (D.44831_973 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44831_973 = D.44829_971 && D.44830_972;
Not folded
Folding statement: D.44830_972 = got_webrtc_78 == 0;
Not folded
Folding statement: D.44829_971 = D.44666_970 != 257;
Not folded
Folding statement: D.44666_970 = m_28->m_proto;
Not folded
Folding statement: # DEBUG match => match_974
Folded into: # DEBUG match => 0

Folding statement: match_974 = 0;
Folded into: match_974 = 0;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
Not folded
Folding PHI node: .MEM_1155 = PHI <.MEM_1157(395), .MEM_1416(396), .MEM_1416(397)>
No folding possible
Folding statement: # DEBUG got_video_crypto => got_video_crypto_977
Not folded
Folding statement: got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_976, sdp_type_546(D));
Not folded
Folding statement: # DEBUG crypto_tag => NULL
Not folded
Folding statement: crypto_tag_976 = crypto_tag_1547;
Not folded
Folding statement: crypto_tag_1547 = crypto_tag_1502;
Not folded
Folding statement: crypto_tag_1502 = strtol (crypto_975, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => crypto_975
Not folded
Folding statement: # DEBUG crypto => crypto_975
Not folded
Folding statement: crypto_975 = attr_33->a_value;
Not folded
Folding PHI node: got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>
No folding possible
Folding PHI node: .MEM_1156 = PHI <.MEM_1157(368), .MEM_1411(376), .MEM_1414(388), .MEM_1157(389), .MEM_1157(390), .MEM_1157(394), .MEM_1418(399), .MEM_1157(373), .MEM_1413(387)>
No folding possible
Folding statement: # DEBUG attr => attr_978
Not folded
Folding statement: attr_978 = attr_33->a_next;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_60
Not folded
Folding PHI node: attr_33 = PHI <attr_893(366), attr_978(400)>
No folding possible
Folding PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>
No folding possible
Folding PHI node: .MEM_1157 = PHI <.MEM_1153(366), .MEM_1156(400)>
No folding possible
Folding statement: if (attr_33 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG attr => attr_33
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_61
Not folded
Folding statement: if (rm_encoding_979 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_979
Not folded
Folding statement: rm_encoding_979 = map_136->rm_encoding;
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_980
Folded into: # DEBUG rm_encoding => ""

Folding statement: rm_encoding_980 = "";
Folded into: rm_encoding_980 = "";

Folding PHI node: rm_encoding_137 = PHI <rm_encoding_979(402), rm_encoding_980(403)>
Folded into: rm_encoding_137 = PHI <rm_encoding_979(402), ""(403)>

Folding statement: # DEBUG i => i_981
Folded into: # DEBUG i => 0

Folding statement: i_981 = 0;
Folded into: i_981 = 0;

Folding statement: # DEBUG rm_encoding => rm_encoding_137
Not folded
Folding statement: if (D.45238_986 != 1)
which is likely CONSTANT
Not folded
Folding statement: D.45238_986 = imp_985->codec_type;
Not folded
Folding statement: # DEBUG imp => imp_985
Not folded
Folding statement: imp_985 = *D.45237_984;
Not folded
Folding statement: D.45237_984 = codec_array_84 + D.45236_983;
Not folded
Folding statement: D.45236_983 = i.99_982 * 4;
Not folded
Folding statement: i.99_982 = (unsigned int) i_139;
Not folded
Folding statement: // predicted unlikely by continue predictor.
Not folded
Folding statement: if (D.45241_988 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.45241_988 = switch_channel_direction (D.44530_987);
Not folded
Folding statement: D.44530_987 = session_161(D)->channel;
Not folded
Folding statement: if (D.45244_990 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.45244_990 = switch_channel_test_flag (D.44530_989, 114);
Not folded
Folding statement: D.44530_989 = session_161(D)->channel;
Not folded
Folding statement: // predicted unlikely by continue predictor.
Not folded
Folding PHI node: .MEM_1158 = PHI <.MEM_1419(407), .MEM_1420(408)>
No folding possible
Folding statement: if (D.45255_996 == 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG s => D.45255_996
Not folded
Folding statement: D.45255_996 = map_136->rm_encoding;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
Not folded
Folding statement: D.45251_995 = (int) D.45250_994;
Not folded
Folding statement: D.45250_994 = imp_985->ianacode;
Not folded
Folding statement: D.45249_993 = imp_985->iananame;
Not folded
Folding statement: D.45248_992 = (int) D.45247_991;
Not folded
Folding statement: D.45247_991 = map_136->rm_pt;
Not folded
Folding statement: if (D.47957_1503 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.47957_1503 = *D.45255_996;
Not folded
Folding PHI node: D.47956_1504 = PHI <1(410), 1(411), 0(412)>
No folding possible
Folding statement: if (D.47956_997 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.47956_997 = D.47956_1548;
Not folded
Folding statement: D.47956_1548 = D.47956_1504;
Not folded
Folding statement: if (D.44938_1002 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.44938_1002 = (_Bool) D.44937_1001;
Not folded
Folding statement: D.44937_1001 = D.44936_1000 & 1;
Not folded
Folding statement: D.44936_1000 = (int) D.44821_999;
Not folded
Folding statement: D.44821_999 = D.44471_998->ndlb;
Not folded
Folding statement: D.44471_998 = smh_186->mparams;
Not folded
Folding statement: if (D.45248_1004 <= 95)
which is likely CONSTANT
Not folded
Folding statement: D.45248_1004 = (int) D.45247_1003;
Not folded
Folding statement: D.45247_1003 = map_136->rm_pt;
Not folded
Folding statement: # DEBUG vmatch => vmatch_1009
Not folded
Folding statement: vmatch_1009 = D.45248_1006 == D.45251_1008;
Not folded
Folding statement: D.45251_1008 = (int) D.45250_1007;
Not folded
Folding statement: D.45250_1007 = imp_985->ianacode;
Not folded
Folding statement: D.45248_1006 = (int) D.45247_1005;
Not folded
Folding statement: D.45247_1005 = map_136->rm_pt;
Not folded
Folding statement: # DEBUG vmatch => vmatch_1012
Not folded
Folding statement: vmatch_1012 = D.45259_1011 == 0;
Not folded
Folding statement: D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
Not folded
Folding statement: D.45249_1010 = imp_985->iananame;
Not folded
Folding PHI node: vmatch_138 = PHI <vmatch_1009(416), vmatch_1012(417)>
No folding possible
Folding statement: if (vmatch_138 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG vmatch => vmatch_138
Not folded
Folding statement: if (D.45262_1013 == D.45263_1014)
which is likely VARYING
Not folded
Folding statement: D.45263_1014 = imp_985->samples_per_second;
Not folded
Folding statement: D.45262_1013 = map_136->rm_rate;
Not folded
Folding statement: # DEBUG m_idx => m_idx_1018
Not folded
Folding statement: m_idx_1018 = m_idx_110 + 1;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
Not folded
Folding statement: D.45251_1017 = (int) D.45250_1016;
Not folded
Folding statement: D.45250_1016 = imp_985->ianacode;
Not folded
Folding statement: D.45249_1015 = imp_985->iananame;
Not folded
Folding statement: matches[m_idx_110].map = map_136;
Not folded
Folding statement: matches[m_idx_110].imp = imp_985;
Not folded
Folding PHI node: m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>
No folding possible
Folding PHI node: .MEM_1159 = PHI <.MEM_1421(418), .MEM_1421(419), .MEM_1424(420)>
No folding possible
Folding statement: # DEBUG vmatch => vmatch_1019
Folded into: # DEBUG vmatch => 0

Removing dead stmt vmatch_1019 = 0;

Folding statement: # DEBUG m_idx => m_idx_108
Not folded
Folding PHI node: m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>
No folding possible
Folding PHI node: .MEM_1160 = PHI <.MEM_1161(406), .MEM_1420(409), .MEM_1159(421)>
No folding possible
Folding statement: # DEBUG i => i_1020
Not folded
Folding statement: i_1020 = i_139 + 1;
Not folded
Folding statement: # DEBUG m_idx => m_idx_109
Not folded
Folding PHI node: m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>
No folding possible
Folding PHI node: i_139 = PHI <i_981(404), i_1020(422)>
Folded into: i_139 = PHI <0(404), i_1020(422)>

Folding PHI node: .MEM_1161 = PHI <.MEM_1157(404), .MEM_1160(422)>
No folding possible
Folding statement: if (i_139 < total_codecs_85)
which is likely VARYING
Not folded
Folding statement: # DEBUG m_idx => m_idx_110
Not folded
Folding statement: # DEBUG i => i_139
Not folded
Folding statement: # DEBUG map => map_1021
Not folded
Folding statement: map_1021 = map_136->rm_next;
Not folded
Folding PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>
No folding possible
Folding PHI node: m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>
Folded into: m_idx_111 = PHI <0(354), m_idx_110(424)>

Folding PHI node: map_136 = PHI <map_883(354), map_1021(424)>
No folding possible
Folding PHI node: .MEM_1162 = PHI <.MEM_1405(354), .MEM_1161(424)>
No folding possible
Folding statement: if (map_136 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_62
Not folded
Folding statement: # DEBUG m_idx => m_idx_111
Not folded
Folding statement: # DEBUG map => map_136
Not folded
Folding statement: if (D.45267_1025 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.45267_1025 = D.45002_1023 && D.45266_1024;
Not folded
Folding statement: D.45266_1024 = got_video_crypto_62 <= 0;
Not folded
Folding statement: D.45002_1023 = D.45001_1022 == 1;
Not folded
Folding statement: D.45001_1022 = smh_186->crypto_mode;
Not folded
Folding statement: # DEBUG m_idx => m_idx_1027
Folded into: # DEBUG m_idx => 0

Folding statement: m_idx_1027 = 0;
Folded into: m_idx_1027 = 0;

Folding statement: # DEBUG vmatch => vmatch_1026
Folded into: # DEBUG vmatch => 0

Removing dead stmt vmatch_1026 = 0;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
Not folded
Folding PHI node: m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>
Folded into: m_idx_112 = PHI <m_idx_111(426), 0(427)>

Folding PHI node: .MEM_1163 = PHI <.MEM_1162(426), .MEM_1425(427)>
No folding possible
Folding statement: if (m_idx_112 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG m_idx => m_idx_112
Not folded
Folding statement: if (greedy_47 != 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG j => j_1028
Folded into: # DEBUG j => 0

Removing dead stmt j_1028 = 0;

Folding statement: greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);
Not folded
Folding PHI node: .MEM_1164 = PHI <.MEM_1163(429), .MEM_1426(430)>
No folding possible
Folding statement: # DEBUG j => j_1030
Folded into: # DEBUG j => 0

Folding statement: j_1030 = 0;
Folded into: j_1030 = 0;

Folding statement: v_engine_189->codec_negotiated = 1;
Not folded
Folding statement: # DEBUG vmatch => vmatch_1029
Folded into: # DEBUG vmatch => 1

Removing dead stmt vmatch_1029 = 1;

Folding statement: if (j_141 == 0)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG pmap => pmap_1044
Not folded
Folding statement: pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
Not folded
Folding statement: D.45283_1043 = (uint32_t) D.45282_1042;
Not folded
Folding statement: D.45282_1042 = D.45281_1041 / 1000;
Not folded
Folding statement: D.45281_1041 = D.45279_1040->microseconds_per_packet;
Not folded
Folding statement: D.45279_1040 = matches[j_141].imp;
Not folded
Folding statement: D.45280_1039 = D.45279_1038->samples_per_second;
Not folded
Folding statement: D.45279_1038 = matches[j_141].imp;
Not folded
Folding statement: D.45278_1037 = (uint32_t) D.45277_1036;
Not folded
Folding statement: D.45277_1036 = D.45274_1035->rm_pt;
Not folded
Folding statement: D.45274_1035 = matches[j_141].map;
Not folded
Folding statement: D.45276_1034 = D.45274_1033->rm_fmtp;
Not folded
Folding statement: D.45274_1033 = matches[j_141].map;
Not folded
Folding statement: D.45275_1032 = D.45274_1031->rm_encoding;
Not folded
Folding statement: D.45274_1031 = matches[j_141].map;
Not folded
Folding statement: if (D.45287_1046 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.45287_1046 = v_engine_189->rtp_session;
Not folded
Folding statement: D.45286_1045->current = 1;
Not folded
Folding statement: D.45286_1045 = v_engine_189->cur_payload_map;
Not folded
Folding statement: v_engine_189->cur_payload_map = pmap_1044;
Not folded
Folding statement: switch_rtp_set_default_payload (D.45287_1047, D.45290_1048);
Not folded
Folding statement: D.45290_1048 = pmap_1044->pt;
Not folded
Folding statement: D.45287_1047 = v_engine_189->rtp_session;
Not folded
Folding PHI node: .MEM_1165 = PHI <.MEM_1428(432), .MEM_1430(433), .MEM_1431(434)>
No folding possible
Folding statement: # DEBUG j => j_1067
Not folded
Folding statement: j_1067 = j_141 + 1;
Not folded
Folding statement: pmap_1044->agreed_pt = D.45292_1066;
Not folded
Folding statement: D.45292_1066 = (unsigned char) D.45247_1065;
Not folded
Folding statement: D.45247_1065 = map_1050->rm_pt;
Not folded
Folding statement: pmap_1044->rm_fmtp = D.45298_1064;
Not folded
Folding statement: D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
Not folded
Folding statement: D.45297_1063 = map_1050->rm_fmtp;
Not folded
Folding statement: pmap_1044->remote_sdp_port = D.45087_1062;
Not folded
Folding statement: D.45087_1062 = (short unsigned int) D.44697_1061;
Not folded
Folding statement: D.44697_1061 = m_28->m_port;
Not folded
Folding statement: pmap_1044->remote_sdp_ip = D.45296_1060;
Not folded
Folding statement: D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);
Not folded
Folding statement: D.45085_1059 = connection_125->c_address;
Not folded
Folding statement: pmap_1044->codec_ms = D.45295_1058;
Not folded
Folding statement: D.45295_1058 = (uint32_t) D.45294_1057;
Not folded
Folding statement: D.45294_1057 = D.45293_1056 / 1000;
Not folded
Folding statement: D.45293_1056 = mimp_1049->microseconds_per_packet;
Not folded
Folding statement: pmap_1044->rm_rate = D.45262_1055;
Not folded
Folding statement: D.45262_1055 = map_1050->rm_rate;
Not folded
Folding statement: pmap_1044->recv_pt = D.45292_1054;
Not folded
Folding statement: D.45292_1054 = (unsigned char) D.45247_1053;
Not folded
Folding statement: D.45247_1053 = map_1050->rm_pt;
Not folded
Folding statement: pmap_1044->rm_encoding = D.45291_1052;
Not folded
Folding statement: D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
Not folded
Folding statement: D.45255_1051 = map_1050->rm_encoding;
Not folded
Folding statement: # DEBUG map => map_1050
Not folded
Folding statement: map_1050 = matches[j_141].map;
Not folded
Folding statement: # DEBUG mimp => mimp_1049
Not folded
Folding statement: mimp_1049 = matches[j_141].imp;
Not folded
Folding PHI node: j_141 = PHI <j_1030(431), j_1067(435)>
Folded into: j_141 = PHI <0(431), j_1067(435)>

Folding PHI node: .MEM_1166 = PHI <.MEM_1427(431), .MEM_1442(435)>
No folding possible
Folding statement: if (j_141 < m_idx_112)
which is likely VARYING
Not folded
Folding statement: # DEBUG j => j_141
Not folded
Folding statement: if (D.45309_1088 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.45309_1088 = D.45307_1086 && D.45308_1087;
Folded into: D.45309_1088 = D.45307_1086;

Removing dead stmt D.45308_1087 = 1;

Folding statement: D.45307_1086 = match_16 == 0;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);
Not folded
Folding statement: D.44530_1085 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45306_1084);
Not folded
Folding statement: D.45306_1084 = (int) D.45305_1083;
Not folded
Folding statement: D.45305_1083 = D.45286_1082->recv_pt;
Not folded
Folding statement: D.45286_1082 = v_engine_189->cur_payload_map;
Not folded
Folding statement: switch_core_media_check_video_codecs (session_161(D));
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);
Not folded
Folding statement: D.44530_1081 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45304_1080);
Not folded
Folding statement: D.45304_1080 = (int) D.45303_1079;
Not folded
Folding statement: D.45303_1079 = D.45286_1078->agreed_pt;
Not folded
Folding statement: D.45286_1078 = v_engine_189->cur_payload_map;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);
Not folded
Folding statement: D.45302_1077 = D.45286_1076->rm_fmtp;
Not folded
Folding statement: D.45286_1076 = v_engine_189->cur_payload_map;
Not folded
Folding statement: D.44530_1075 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);
Not folded
Folding statement: D.44530_1074 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);
Not folded
Folding statement: D.45301_1073 = D.45286_1072->remote_sdp_ip;
Not folded
Folding statement: D.45286_1072 = v_engine_189->cur_payload_map;
Not folded
Folding statement: D.44530_1071 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45300_1070);
Not folded
Folding statement: D.45300_1070 = (int) D.45299_1069;
Not folded
Folding statement: D.45299_1069 = D.45286_1068->remote_sdp_port;
Not folded
Folding statement: D.45286_1068 = v_engine_189->cur_payload_map;
Not folded
Folding statement: # DEBUG match => match_1089
Folded into: # DEBUG match => 1

Folding statement: match_1089 = 1;
Folded into: match_1089 = 1;

Folding PHI node: match_14 = PHI <match_16(437), match_1089(438)>
Folded into: match_14 = PHI <match_16(437), 1(438)>

Folding statement: if (D.45312_1090 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG codec => D.45312_1090
Not folded
Folding statement: D.45312_1090 = &v_engine_189->read_codec;
Not folded
Folding statement: # DEBUG match => match_14
Not folded
Folding statement: if (D.47964_1506 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.47964_1506 = D.47965_1505 & 256;
Not folded
Folding statement: D.47965_1505 = D.45312_1090->flags;
Not folded
Folding statement: if (D.47963_1507 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.47963_1507 = D.45312_1090->mutex;
Not folded
Folding statement: if (D.47962_1508 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.47962_1508 = D.45312_1090->codec_interface;
Not folded
Folding statement: if (D.47961_1509 != 0B)
which is likely CONSTANT
Not folded
Folding statement: D.47961_1509 = D.45312_1090->implementation;
Not folded
Folding PHI node: iftmp.104_1510 = PHI <1(443), 0(444)>
No folding possible
Folding statement: if (D.47960_1091 != 0)
which is likely CONSTANT
Not folded
Folding statement: D.47960_1091 = D.47960_1549;
Not folded
Folding statement: D.47960_1549 = D.47960_1511;
Not folded
Folding statement: D.47960_1511 = (switch_bool_t) iftmp.104_1510;
Not folded
Folding statement: v_engine_189->reset_codec = 1;
Not folded
Folding PHI node: .MEM_1167 = PHI <.MEM_1451(445), .MEM_1452(446)>
No folding possible
Folding statement: if (D.45316_1092 == 0)
which is likely CONSTANT
Not folded
Folding statement: D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);
Not folded
Folding statement: check_ice (smh_186, 1, sdp_198, m_28);
Not folded
Folding PHI node: match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
No folding possible
Folding PHI node: best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
No folding possible
Folding PHI node: cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
No folding possible
Folding PHI node: got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
No folding possible
Folding PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
No folding possible
Folding PHI node: got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
No folding possible
Folding PHI node: codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
No folding possible
Folding PHI node: m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
No folding possible
Folding PHI node: nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
Folded into: nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), 0(428), 0(447), 0(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>

Folding PHI node: .MEM_1168 = PHI <.MEM_1398(346), .MEM_1113(348), .MEM_1113(349), .MEM_1163(428), .MEM_1453(447), .MEM_1454(448), .MEM_1387(343), .MEM_1391(344), .MEM_1380(341), .MEM_1382(342), .MEM_1402(347)>
No folding possible
Folding statement: # DEBUG m => m_1093
Not folded
Folding statement: m_1093 = m_28->m_next;
Not folded
Folding statement: # DEBUG match => match_15
Not folded
Folding statement: # DEBUG best_te => best_te_22
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_26
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_55
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_63
Not folded
Folding statement: # DEBUG got_audio => got_audio_66
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_94
Not folded
Folding statement: # DEBUG m_idx => m_idx_113
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_121
Not folded
Folding PHI node: match_16 = PHI <match_148(101), match_15(449)>
Folded into: match_16 = PHI <0(101), match_15(449)>

Folding PHI node: best_te_23 = PHI <best_te_149(101), best_te_22(449)>
Folded into: best_te_23 = PHI <0(101), best_te_22(449)>

Folding PHI node: cng_pt_27 = PHI <cng_pt_151(101), cng_pt_26(449)>
Folded into: cng_pt_27 = PHI <0(101), cng_pt_26(449)>

Folding PHI node: m_28 = PHI <m_370(101), m_1093(449)>
No folding possible
Folding PHI node: got_crypto_56 = PHI <got_crypto_164(101), got_crypto_55(449)>
Folded into: got_crypto_56 = PHI <0(101), got_crypto_55(449)>

Folding PHI node: got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>
Folded into: got_video_crypto_64 = PHI <0(101), got_video_crypto_63(449)>

Folding PHI node: got_audio_67 = PHI <got_audio_166(101), got_audio_66(449)>
Folded into: got_audio_67 = PHI <0(101), got_audio_66(449)>

Folding PHI node: got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>
Folded into: got_avp_69 = PHI <0(101), got_avp_68(449)>

Folding PHI node: got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>
Folded into: got_video_avp_71 = PHI <0(101), got_video_avp_70(449)>

Folding PHI node: got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>
Folded into: got_video_savp_73 = PHI <0(101), got_video_savp_72(449)>

Folding PHI node: got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>
Folded into: got_savp_75 = PHI <0(101), got_savp_74(449)>

Folding PHI node: got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>
Folded into: got_udptl_77 = PHI <0(101), got_udptl_76(449)>

Folding PHI node: got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>
Folded into: got_webrtc_79 = PHI <0(101), got_webrtc_78(449)>

Folding PHI node: codec_ms_95 = PHI <codec_ms_181(101), codec_ms_94(449)>
Folded into: codec_ms_95 = PHI <0(101), codec_ms_94(449)>

Folding PHI node: m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>
Folded into: m_idx_114 = PHI <0(101), m_idx_113(449)>

Folding PHI node: nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>
Folded into: nm_idx_122 = PHI <0(101), nm_idx_121(449)>

Folding PHI node: .MEM_1169 = PHI <.MEM_1232(101), .MEM_1168(449)>
No folding possible
Folding statement: if (m_28 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG match => match_16
Not folded
Folding statement: # DEBUG best_te => best_te_23
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_27
Not folded
Folding statement: # DEBUG m => m_28
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_56
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_64
Not folded
Folding statement: # DEBUG got_audio => got_audio_67
Not folded
Folding statement: # DEBUG got_avp => got_avp_69
Not folded
Folding statement: # DEBUG got_video_avp => got_video_avp_71
Not folded
Folding statement: # DEBUG got_video_savp => got_video_savp_73
Not folded
Folding statement: # DEBUG got_savp => got_savp_75
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_77
Not folded
Folding statement: # DEBUG got_webrtc => got_webrtc_79
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_95
Not folded
Folding statement: # DEBUG m_idx => m_idx_114
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_122
Not folded
Folding PHI node: match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>
Folded into: match_17 = PHI <1(121), 0(123), 0(141), 1(152), 0(186), 0(192), 0(196), 0(353), 0(398), match_16(450)>

Folding PHI node: .MEM_1170 = PHI <.MEM_1236(121), .MEM_1239(123), .MEM_1259(141), .MEM_1121(152), .MEM_1297(186), .MEM_1299(192), .MEM_1300(196), .MEM_1406(353), .MEM_1417(398), .MEM_1169(450)>
No folding possible
Folding statement: if (parser_196 != 0B)
which is likely CONSTANT
Not folded
Folding statement: # DEBUG match => match_17
Not folded
Folding statement: done:
Not folded
Folding statement: sdp_parser_free (parser_196);
Not folded
Folding PHI node: .MEM_1171 = PHI <.MEM_1170(451), .MEM_1455(452)>
No folding possible
Folding statement: match_1095 = match_17;
Not folded
Folding statement: D.44471_1094->cng_pt = cng_pt_27;
Not folded
Folding statement: D.44471_1094 = smh_186->mparams;
Not folded
Folding PHI node: match_142 = PHI <match_187(5), match_197(7), match_199(9), match_1095(453)>
Folded into: match_142 = PHI <0(5), 0(7), 0(9), match_1095(453)>

Folding statement: return match_142;
Not folded
Removing basic block 50
;; basic block 50, loop depth 0, count 0
;; prev block 49, next block 51
;; pred:       49 (true)
;; succ:       51 (fallthru)
<bb 50>:
D.44583_289 = __s1_259 + 3;
D.44584_290 = *D.44583_289;
D.44585_291 = (int) D.44584_290;
D.44586_292 = &"0.0.0.0"[3];
D.44587_293 = MEM[(const unsigned char *)D.44586_292];
D.44588_294 = (int) D.44587_293;
__result_295 = D.44585_291 - D.44588_294;
# DEBUG __result => __result_295


Removing basic block 49
;; basic block 49, loop depth 0, count 0
;; prev block 48, next block 51
;; pred:       48 (true)
;; succ:       51 (false)
<bb 49>:
D.44573_279 = __s1_259 + 2;
D.44574_280 = *D.44573_279;
D.44575_281 = (int) D.44574_280;
D.44576_282 = &"0.0.0.0"[2];
D.44577_283 = MEM[(const unsigned char *)D.44576_282];
D.44578_284 = (int) D.44577_283;
__result_285 = D.44575_281 - D.44578_284;
# DEBUG __result => __result_285
D.44579_286 = 1;
D.44559_287 = __result_285 == 0;
D.44580_288 = D.44579_286 && D.44559_287;
if (D.44580_288 != 0)


Removing basic block 48
;; basic block 48, loop depth 0, count 0
;; prev block 47, next block 51
;; pred:       47 (true)
;; succ:       51 (false)
<bb 48>:
D.44563_269 = __s1_259 + 1;
D.44564_270 = *D.44563_269;
D.44565_271 = (int) D.44564_270;
D.44566_272 = &"0.0.0.0"[1];
D.44567_273 = MEM[(const unsigned char *)D.44566_272];
D.44568_274 = (int) D.44567_273;
__result_275 = D.44565_271 - D.44568_274;
# DEBUG __result => __result_275
D.44569_276 = 1;
D.44559_277 = __result_275 == 0;
D.44570_278 = D.44569_276 && D.44559_277;
if (D.44570_278 != 0)


Removing basic block 51
;; basic block 51, loop depth 0, count 0
;; prev block 47, next block 52
;; pred:       47 (false)
;; succ:       53 (fallthru)
<bb 51>:
# __result_123 = PHI <__result_265(47)>
# DEBUG __result => __result_123
__result_296 = __result_123;
__result_297 = __result_296;
goto <bb 53>;


Removing basic block 47
;; basic block 47, loop depth 0, count 0
;; prev block 46, next block 52
;; pred:       46 (true)
;; succ:      
<bb 47>:
D.44546_258 = m_248->m_connections;
__s1_259 = D.44546_258->c_address;
# DEBUG __s1 => __s1_259
D.44553_260 = *__s1_259;
D.44554_261 = (int) D.44553_260;
D.44555_262 = "0.0.0.0";
D.44556_263 = MEM[(const unsigned char *)D.44555_262];
D.44557_264 = (int) D.44556_263;
__result_265 = D.44554_261 - D.44557_264;
# DEBUG __result => __result_265
D.44558_266 = 1;
D.44559_267 = __result_265 == 0;
D.44560_268 = D.44558_266 && D.44559_267;
if (D.44560_268 != 0)


Merging blocks 46 and 52
Removing basic block 385
;; basic block 385, loop depth 0, count 0
;; prev block 384, next block 386
;; pred:       379 (false)
;; succ:       386 (fallthru)
<bb 385>:
D.44619_949 = attr_33->a_value;
__result_950 = __builtin_strcmp (D.44619_949, "1");


Merging blocks 379 and 380
Removing basic block 383
;; basic block 383, loop depth 0, count 0
;; prev block 382, next block 384
;; pred:       382 (true)
;; succ:       384 (fallthru)
<bb 383>:
D.45204_940 = __s1_910 + 3;
D.45205_941 = *D.45204_940;
D.45206_942 = (int) D.45205_941;
D.45207_943 = &"1"[3];
D.45208_944 = MEM[(const unsigned char *)D.45207_943];
D.45209_945 = (int) D.45208_944;
__result_946 = D.45206_942 - D.45209_945;
# DEBUG __result => __result_946


Removing basic block 382
;; basic block 382, loop depth 0, count 0
;; prev block 381, next block 384
;; pred:       381 (true)
;; succ:       384 (false)
<bb 382>:
D.45194_930 = __s1_910 + 2;
D.45195_931 = *D.45194_930;
D.45196_932 = (int) D.45195_931;
D.45197_933 = &"1"[2];
D.45198_934 = MEM[(const unsigned char *)D.45197_933];
D.45199_935 = (int) D.45198_934;
__result_936 = D.45196_932 - D.45199_935;
# DEBUG __result => __result_936
D.45200_937 = 0;
D.45180_938 = __result_936 == 0;
D.45201_939 = D.45200_937 && D.45180_938;
if (D.45201_939 != 0)


Merging blocks 384 and 386
Merging blocks 46 and 53
Scope blocks after cleanups:

{ Scope block #0 
  uint8_t match;
  switch_payload_t best_te;
  switch_payload_t te;
  switch_payload_t cng_pt;
  struct sdp_media_t * m;
  struct sdp_attribute_t * attr;
  int ptime;
  int dptime;
  int maxptime;
  int dmaxptime;
  int sendonly;
  int recvonly;
  int greedy;
  int x;
  int skip;
  struct switch_channel_t * channel;
  const char * val;
  const char * crypto;
  int got_crypto;
  int got_video_crypto;
  int got_audio;
  int got_avp;
  int got_video_avp;
  int got_video_savp;
  int got_savp;
  int got_udptl;
  int got_webrtc;
  int scrooge;
  struct sdp_parser_t * parser;
  struct sdp_session_t * sdp;
  int reneg;
  const struct switch_codec_implementation_t * * codec_array;
  int total_codecs;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  uint32_t near_rate;
  const struct switch_codec_implementation_t * mimp;
  const struct switch_codec_implementation_t * near_match;
  struct sdp_rtpmap_t * mmap;
  struct sdp_rtpmap_t * near_map;
  struct matches matches[30];
  struct matches near_matches[30];
  int codec_ms;
  uint32_t remote_codec_rate;
  uint32_t fmtp_remote_codec_rate;
  const char * tmp;
  int m_idx;
  int nm_idx;
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_negotiate_sdp";
  static const char __func__[32] = "switch_core_media_negotiate_sdp";
  void done = <<< error >>>; (unused)

  { Scope block #206 src/switch_core_media.c:3033 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #207 Originating from :#0 

    }

  }

  { Scope block #208 src/switch_core_media.c:3031 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #209 Originating from :#0 

    }

  }

  { Scope block #210 src/switch_core_media.c:3006 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #211 Originating from :#0 

    }

  }

  { Scope block #212 src/switch_core_media.c:2951 Originating from :  static void clear_pmaps (struct switch_rtp_engine_t *); 
    struct switch_rtp_engine_t * engine; (unused)

    { Scope block #213 Originating from :#0 
      struct payload_map_t * pmap;

    }

  }

  { Scope block #214 src/switch_core_media.c:2950 Originating from :  static void clear_pmaps (struct switch_rtp_engine_t *); 
    struct switch_rtp_engine_t * engine; (unused)

    { Scope block #215 Originating from :#0 
      struct payload_map_t * pmap;

    }

  }

  { Scope block #216 
    size_t __s1_len; (unused)
    size_t __s2_len;

    { Scope block #217 
      const unsigned char * __s1; (unused)
      register int __result;

    }

  }

  { Scope block #218 
    struct sdp_connection_t * connection;
    struct switch_core_session_t * other_session;

    { Scope block #219 
      struct switch_t38_options_t * t38_options;

      { Scope block #220 
        const char * var;
        int pass;

        { Scope block #221 
          struct switch_channel_t * other_channel;
          struct switch_core_session_message_t * msg;
          char * remote_host;
          switch_port_t remote_port;
          char tmp[32];

          { Scope block #222 
            size_t __s1_len; (unused)
            size_t __s2_len; (unused)

          }

          { Scope block #223 
            const char * err;

          }

        }

      }

    }

    { Scope block #224 
      struct sdp_rtpmap_t * map;

      { Scope block #225 src/switch_core_media.c:3256 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #226 Originating from :#0 

        }

      }

      { Scope block #227 src/switch_core_media.c:3255 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #228 Originating from :#0 

        }

      }

      { Scope block #229 src/switch_core_media.c:3253 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #230 Originating from :#0 

        }

      }

      { Scope block #231 src/switch_core_media.c:3248 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #232 Originating from :#0 

        }

      }

      { Scope block #233 src/switch_core_media.c:3238 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #234 Originating from :#0 

        }

      }

      { Scope block #235 
        int crypto_tag;

        { Scope block #236 src/switch_core_media.c:3269 Originating from :  extern int atoi (const char *); 
          const char * __nptr; (unused)

          { Scope block #237 Originating from :#0 

          }

        }

      }

      { Scope block #238 
        int32_t i;
        const char * rm_encoding;
        uint32_t map_bit_rate;
        struct switch_codec_fmtp_t codec_fmtp;

        { Scope block #239 src/switch_core_media.c:3352 Originating from :  static int _zstr (const char *); 
          const char * s; (unused)

          { Scope block #240 Originating from :#0 

          }

        }

        { Scope block #241 src/switch_core_media.c:3342 Originating from :  static uint32_t switch_known_bitrate (switch_payload_t); 
          switch_payload_t payload; (unused)

        }

        { Scope block #243 
          const struct switch_codec_implementation_t * imp;
          uint32_t bit_rate;
          uint32_t codec_rate;

          { Scope block #244 src/switch_core_media.c:3386 Originating from :  static int _zstr (const char *); 
            const char * s; (unused)

            { Scope block #245 Originating from :#0 

            }

          }

        }

      }

      { Scope block #246 
        int j;

        { Scope block #247 
          const struct switch_codec_implementation_t * search[1];
          char * prefs[1];
          char tmp[80];
          int num;
          const struct switch_codec_implementation_t * timp;

        }

      }

      { Scope block #248 
        int j;

        { Scope block #249 
          struct payload_map_t * pmap;

          { Scope block #250 src/switch_core_media.c:3554 Originating from :  static int _zstr (const char *); 
            const char * s; (unused)

            { Scope block #251 Originating from :#0 

            }

          }

          { Scope block #252 src/switch_core_media.c:3545 Originating from :  extern int atoi (const char *); 
            const char * __nptr; (unused)

            { Scope block #253 Originating from :#0 

            }

          }

        }

      }

      { Scope block #254 
        char tmp[50];

        { Scope block #255 src/switch_core_media.c:3595 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
          struct switch_codec_t * codec; (unused)

          { Scope block #256 Originating from :#0 

          }

        }

      }

    }

    { Scope block #257 
      struct sdp_rtpmap_t * map;
      const char * rm_encoding;
      const struct switch_codec_implementation_t * mimp;
      int vmatch;
      int i;

      { Scope block #258 src/switch_core_media.c:3705 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #259 Originating from :#0 

        }

      }

      { Scope block #260 src/switch_core_media.c:3701 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #261 Originating from :#0 

        }

      }

      { Scope block #262 src/switch_core_media.c:3688 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #263 Originating from :#0 

        }

      }

      { Scope block #264 src/switch_core_media.c:3678 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #265 Originating from :#0 

        }

      }

      { Scope block #266 
        size_t __s1_len; (unused)
        size_t __s2_len;

        { Scope block #267 
          const unsigned char * __s1;
          register int __result;

        }

      }

      { Scope block #268 
        int crypto_tag;

        { Scope block #269 src/switch_core_media.c:3718 Originating from :  extern int atoi (const char *); 
          const char * __nptr; (unused)

          { Scope block #270 Originating from :#0 

          }

        }

      }

      { Scope block #271 
        const struct switch_codec_implementation_t * imp;

        { Scope block #272 src/switch_core_media.c:3745 Originating from :  static int _zstr (const char *); 
          const char * s; (unused)

          { Scope block #273 Originating from :#0 

          }

        }

      }

      { Scope block #274 
        char tmp[50];
        int j;

        { Scope block #275 src/switch_core_media.c:3838 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
          struct switch_codec_t * codec; (unused)

          { Scope block #276 Originating from :#0 

          }

        }

        { Scope block #277 
          struct payload_map_t * pmap;

        }

      }

    }

  }

}
switch_core_media_negotiate_sdp (struct switch_core_session_t * session, const char * r_sdp, uint8_t * proceed, switch_sdp_type_t sdp_type)
{
  int iftmp.104;
  uint32_t D.47965;
  uint32_t D.47964;
  struct switch_mutex_t * D.47963;
  struct switch_codec_interface_t * D.47962;
  const struct switch_codec_implementation_t * D.47961;
  switch_bool_t D.47960;
  const char D.47957;
  int D.47956;
  const char D.47950;
  int D.47949;
  int D.47946;
  const char D.47943;
  int D.47942;
  const char D.47939;
  int D.47938;
  int iftmp.104;
  uint32_t D.47934;
  uint32_t D.47933;
  struct switch_mutex_t * D.47932;
  struct switch_codec_interface_t * D.47931;
  const struct switch_codec_implementation_t * D.47930;
  switch_bool_t D.47929;
  const char D.47926;
  int D.47925;
  int D.47922;
  const char D.47919;
  int D.47918;
  const char D.47915;
  int D.47914;
  unsigned char csui.173;
  const char D.47900;
  int D.47899;
  int D.47890;
  const char D.47887;
  int D.47886;
  const char D.47877;
  int D.47876;
  uint8_t D.47874;
  struct payload_map_t * pmap;
  uint8_t D.47871;
  struct payload_map_t * pmap;
  struct payload_map_t * pmap;
  int j;
  char tmp[50];
  const struct switch_codec_implementation_t * imp;
  int crypto_tag;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  int i;
  int vmatch;
  const struct switch_codec_implementation_t * mimp;
  const char * rm_encoding;
  struct sdp_rtpmap_t * map;
  char tmp[50];
  struct payload_map_t * pmap;
  int j;
  const struct switch_codec_implementation_t * timp;
  int num;
  char tmp[80];
  char * prefs[1];
  const struct switch_codec_implementation_t * search[1];
  int j;
  uint32_t codec_rate;
  uint32_t bit_rate;
  const struct switch_codec_implementation_t * imp;
  struct switch_codec_fmtp_t codec_fmtp;
  uint32_t map_bit_rate;
  const char * rm_encoding;
  int32_t i;
  int crypto_tag;
  struct sdp_rtpmap_t * map;
  const char * err;
  char tmp[32];
  switch_port_t remote_port;
  char * remote_host;
  struct switch_core_session_message_t * msg;
  struct switch_channel_t * other_channel;
  int pass;
  const char * var;
  struct switch_t38_options_t * t38_options;
  struct switch_core_session_t * other_session;
  struct sdp_connection_t * connection;
  register int __result;
  size_t __s2_len;
  static const char __func__[32] = "switch_core_media_negotiate_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_negotiate_sdp";
  int nm_idx;
  int m_idx;
  const char * tmp;
  uint32_t fmtp_remote_codec_rate;
  uint32_t remote_codec_rate;
  int codec_ms;
  struct matches near_matches[30];
  struct matches matches[30];
  struct sdp_rtpmap_t * near_map;
  struct sdp_rtpmap_t * mmap;
  const struct switch_codec_implementation_t * near_match;
  const struct switch_codec_implementation_t * mimp;
  uint32_t near_rate;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  int total_codecs;
  const struct switch_codec_implementation_t * * codec_array;
  int reneg;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  int scrooge;
  int got_webrtc;
  int got_udptl;
  int got_savp;
  int got_video_savp;
  int got_video_avp;
  int got_avp;
  int got_audio;
  int got_video_crypto;
  int got_crypto;
  const char * crypto;
  const char * val;
  struct switch_channel_t * channel;
  int skip;
  int x;
  int greedy;
  int recvonly;
  int sendonly;
  int dmaxptime;
  int maxptime;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  switch_payload_t cng_pt;
  switch_payload_t te;
  switch_payload_t best_te;
  uint8_t match;
  switch_status_t D.45316;
  struct switch_codec_t * D.45312;
  _Bool D.45309;
  _Bool D.45307;
  int D.45306;
  switch_payload_t D.45305;
  int D.45304;
  switch_payload_t D.45303;
  char * D.45302;
  char * D.45301;
  int D.45300;
  switch_port_t D.45299;
  char * D.45298;
  const char * D.45297;
  char * D.45296;
  uint32_t D.45295;
  int D.45294;
  const int D.45293;
  unsigned char D.45292;
  char * D.45291;
  switch_payload_t D.45290;
  struct switch_rtp_t * D.45287;
  struct payload_map_t * D.45286;
  uint32_t D.45283;
  int D.45282;
  const int D.45281;
  const uint32_t D.45280;
  const struct switch_codec_implementation_t * D.45279;
  uint32_t D.45278;
  <unnamed-unsigned:7> D.45277;
  const char * D.45276;
  const char * D.45275;
  struct sdp_rtpmap_t * D.45274;
  _Bool D.45267;
  _Bool D.45266;
  const uint32_t D.45263;
  long unsigned int D.45262;
  int D.45259;
  const char * D.45255;
  int D.45251;
  const switch_payload_t D.45250;
  char * const D.45249;
  int D.45248;
  <unnamed-unsigned:7> D.45247;
  uint32_t D.45244;
  switch_call_direction_t D.45241;
  const switch_codec_type_t D.45238;
  const struct switch_codec_implementation_t * * D.45237;
  unsigned int D.45236;
  unsigned int i.99;
  int D.45228;
  const char * D.45227;
  int D.45219;
  char * D.45214;
  short unsigned int D.45213;
  int D.45186;
  const unsigned char D.45185;
  const unsigned char * D.45184;
  _Bool D.45181;
  _Bool D.45180;
  int D.45175;
  const unsigned char D.45174;
  int D.45168;
  uint8_t D.45164;
  uint8_t D.45163;
  const char * D.45160;
  int D.45154;
  int D.45151;
  int D.45143;
  int D.45140;
  int D.45137;
  int D.45125;
  const char * D.45124;
  int D.45120;
  switch_call_direction_t D.45114;
  int D.45111;
  switch_payload_t D.45110;
  uint32_t D.45109;
  int32_t D.45107;
  switch_status_t D.45099;
  uint32_t D.45098;
  struct switch_codec_t * D.45094;
  int D.45093;
  switch_payload_t D.45092;
  int D.45089;
  char * D.45088;
  short unsigned int D.45087;
  char * D.45086;
  const char * D.45085;
  const char * D.45082;
  const char * D.45079;
  int D.45073;
  int D.45070;
  const char * D.45066;
  uint32_t D.45064;
  const int D.45063;
  uint32_t D.45062;
  int D.45061;
  const int D.45060;
  const uint32_t D.45059;
  int D.45056;
  const uint32_t D.45055;
  unsigned char D.45054;
  <unnamed-unsigned:7> D.45053;
  char * D.45052;
  char * const D.45051;
  char * D.45050;
  const char * D.45049;
  switch_payload_t D.45048;
  uint32_t D.45043;
  int D.45042;
  const int D.45041;
  const uint32_t D.45040;
  const struct switch_codec_implementation_t * D.45039;
  uint32_t D.45038;
  <unnamed-unsigned:7> D.45037;
  const char * D.45036;
  const char * D.45035;
  struct sdp_rtpmap_t * D.45034;
  int near_rate.96;
  int D.45028;
  const uint32_t D.45027;
  char * const D.45026;
  int D.45025;
  const int D.45024;
  char * const D.45013;
  int D.45012;
  _Bool D.45009;
  _Bool D.45008;
  _Bool D.45007;
  _Bool D.45004;
  _Bool D.45003;
  _Bool D.45002;
  switch_rtp_crypto_mode_t D.45001;
  _Bool D.44999;
  _Bool D.44998;
  _Bool D.44997;
  int D.44996;
  int codec_rate.94;
  int D.44993;
  _Bool D.44991;
  _Bool D.44990;
  _Bool D.44989;
  const uint32_t D.44984;
  int D.44979;
  int D.44977;
  _Bool D.44974;
  _Bool D.44973;
  _Bool D.44972;
  _Bool D.44969;
  _Bool D.44968;
  int D.44963;
  int D.44960;
  _Bool D.44957;
  _Bool D.44956;
  _Bool D.44955;
  _Bool D.44952;
  _Bool D.44951;
  _Bool D.44950;
  const uint32_t D.44947;
  int D.44944;
  int iftmp.93;
  _Bool D.44938;
  int D.44937;
  int D.44936;
  int D.44930;
  const int D.44929;
  int D.44928;
  const switch_payload_t D.44927;
  char * const D.44926;
  int remote_codec_rate.92;
  int D.44924;
  const switch_codec_type_t D.44921;
  const int D.44920;
  const struct switch_codec_implementation_t * * D.44919;
  unsigned int D.44918;
  unsigned int i.91;
  uint32_t D.44914;
  int D.44911;
  int D.44908;
  switch_status_t D.44905;
  int D.44901;
  int D.44897;
  const char * D.44893;
  int D.44890;
  const char * D.44889;
  uint32_t D.44885;
  uint32_t D.44884;
  _Bool D.44879;
  _Bool D.44878;
  _Bool D.44877;
  _Bool D.44870;
  switch_payload_t D.44869;
  int D.44868;
  int D.44863;
  int32_t D.44858;
  int D.44857;
  <unnamed-unsigned:7> D.44856;
  long unsigned int D.44855;
  long unsigned int D.44854;
  int D.44848;
  int D.44839;
  _Bool D.44836;
  _Bool D.44835;
  _Bool D.44834;
  _Bool D.44831;
  _Bool D.44830;
  _Bool D.44829;
  int D.44826;
  const char * D.44825;
  unsigned int D.44822;
  switch_core_media_NDLB_t D.44821;
  int D.44815;
  int D.44810;
  int D.44805;
  char * D.44800;
  short unsigned int D.44799;
  int D.44795;
  int D.44787;
  int D.44784;
  int D.44781;
  _Bool D.44779;
  _Bool D.44778;
  _Bool D.44777;
  char * D.44773;
  struct switch_channel_t * D.44772;
  const char * err.90;
  switch_status_t D.44768;
  int D.44767;
  int D.44766;
  char * D.44765;
  char * D.44764;
  switch_port_t D.44762;
  char * D.44760;
  int D.39032;
  _Bool D.44758;
  _Bool D.44757;
  _Bool D.44756;
  uint16_t D.44753;
  char * D.44752;
  const char * D.44751;
  struct payload_map_t * D.44750;
  int D.44747;
  const char * D.44746;
  int D.44743;
  const char * D.44742;
  char * D.44741;
  char * D.44740;
  uint32_t D.44737;
  struct switch_core_session_t * other_session.89;
  switch_status_t D.44733;
  uint8_t D.44730;
  uint32_t D.44728;
  uint32_t D.44726;
  uint32_t D.44724;
  uint32_t D.44723;
  int D.44716;
  int D.44707;
  uint32_t D.44706;
  int D.44703;
  const char * D.44702;
  int D.44699;
  long unsigned int D.44697;
  sdp_media_e D.44681;
  _Bool D.44678;
  _Bool D.44677;
  _Bool D.44676;
  sdp_proto_e D.44675;
  int D.44672;
  const char * D.44669;
  sdp_proto_e D.44666;
  const char * D.44665;
  const char * D.44663;
  const char * D.44661;
  int D.44655;
  struct switch_media_bug_t * D.44649;
  int D.44640;
  int D.44639;
  int D.44636;
  int D.44635;
  int32_t D.44631;
  _Bool D.44626;
  _Bool D.44625;
  _Bool D.44624;
  int D.44621;
  const char * D.44619;
  int D.44616;
  int D.44614;
  uint8_t D.44606;
  struct switch_rtp_t * D.44605;
  int D.44602;
  int D.44598;
  int D.44594;
  const char * D.44590;
  const char * D.44548;
  struct sdp_connection_t * D.44546;
  _Bool D.44544;
  _Bool D.44543;
  _Bool D.44542;
  unsigned char D.44541;
  unsigned char D.44540;
  int D.44533;
  struct switch_channel_t * D.44530;
  unsigned int D.44529;
  char * D.44526;
  unsigned int D.44523;
  unsigned int D.44522;
  switch_rtp_bug_flag_t D.44521;
  char * D.44518;
  _Bool D.44515;
  int D.44514;
  int D.44513;
  switch_rtp_bug_flag_t D.44512;
  char * D.44509;
  char * D.44508;
  const char * D.44507;
  struct sdp_origin_t * D.44506;
  int D.44502;
  int D.44498;
  int D.44494;
  int32_t D.44491;
  int32_t D.44490;
  int D.44485;
  struct switch_channel_t * D.44482;
  struct switch_core_session_t * D.44481;
  int D.44478;
  int D.44473;
  size_t D.44472;
  struct switch_core_media_params_t * D.44471;

<bb 2>:
  match_148 = 0;
  # DEBUG match => 0
  best_te_149 = 0;
  # DEBUG best_te => 0
  # DEBUG te => 0
  cng_pt_151 = 0;
  # DEBUG cng_pt => 0
  # DEBUG ptime => 0
  dptime_153 = 0;
  # DEBUG dptime => 0
  # DEBUG maxptime => 0
  dmaxptime_155 = 0;
  # DEBUG dmaxptime => 0
  sendonly_156 = 0;
  # DEBUG sendonly => 0
  recvonly_157 = 0;
  # DEBUG recvonly => 0
  # DEBUG greedy => 0
  # DEBUG x => 0
  skip_160 = 0;
  # DEBUG skip => 0
  channel_162 = switch_core_session_get_channel (session_161(D));
  # DEBUG channel => channel_162
  # DEBUG crypto => 0B
  got_crypto_164 = 0;
  # DEBUG got_crypto => 0
  got_video_crypto_165 = 0;
  # DEBUG got_video_crypto => 0
  got_audio_166 = 0;
  # DEBUG got_audio => 0
  got_avp_167 = 0;
  # DEBUG got_avp => 0
  got_video_avp_168 = 0;
  # DEBUG got_video_avp => 0
  got_video_savp_169 = 0;
  # DEBUG got_video_savp => 0
  got_savp_170 = 0;
  # DEBUG got_savp => 0
  got_udptl_171 = 0;
  # DEBUG got_udptl => 0
  got_webrtc_172 = 0;
  # DEBUG got_webrtc => 0
  # DEBUG scrooge => 0
  # DEBUG parser => 0B
  reneg_175 = 1;
  # DEBUG reneg => 1
  # DEBUG near_rate => 0
  # DEBUG mimp => 0B
  # DEBUG near_match => 0B
  # DEBUG mmap => 0B
  # DEBUG near_map => 0B
  matches = {};
  near_matches = {};
  codec_ms_181 = 0;
  # DEBUG codec_ms => 0
  # DEBUG remote_codec_rate => 0
  # DEBUG fmtp_remote_codec_rate => 0
  m_idx_184 = 0;
  # DEBUG m_idx => 0
  nm_idx_185 = 0;
  # DEBUG nm_idx => 0
  if (session_161(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_186 = session_161(D)->media_handle;
  # DEBUG smh => smh_186
  if (smh_186 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  match_187 = 0;
  goto <bb 442>;

<bb 6>:
  a_engine_188 = &smh_186->engines;
  # DEBUG a_engine => a_engine_188
  v_engine_189 = &smh_186->engines[1];
  # DEBUG v_engine => v_engine_189
  codec_array_190 = &smh_186->codecs;
  # DEBUG codec_array => codec_array_190
  D.44471_191 = smh_186->mparams;
  total_codecs_192 = D.44471_191->num_codecs;
  # DEBUG total_codecs => total_codecs_192
  D.44472_194 = strlen (r_sdp_193(D));
  D.44473_195 = (int) D.44472_194;
  parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
  # DEBUG parser => parser_196
  if (parser_196 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  match_197 = 0;
  goto <bb 442>;

<bb 8>:
  sdp_198 = sdp_session (parser_196);
  # DEBUG sdp => sdp_198
  if (sdp_198 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  sdp_parser_free (parser_196);
  match_199 = 0;
  goto <bb 442>;

<bb 10>:
  D.44478_200 = dtls_ok (session_161(D));
  if (D.44478_200 != 0)
    goto <bb 11>;
  else
    goto <bb 14>;

<bb 11>:
  D.44481_201 = smh_186->session;
  D.44482_202 = D.44481_201->channel;
  tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
  # DEBUG tmp => tmp_203
  if (tmp_203 != 0B)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 12>:
  D.44485_204 = switch_false (tmp_203);
  if (D.44485_204 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.44481_205 = smh_186->session;
  D.44482_206 = D.44481_205->channel;
  switch_channel_clear_flag (D.44482_206, 111);
  D.44481_207 = smh_186->session;
  D.44482_208 = D.44481_207->channel;
  switch_channel_clear_flag (D.44482_208, 109);

<bb 14>:
  switch_core_session_parse_crypto_prefs (session_161(D));
  # DEBUG engine => a_engine_188
  pmap_1457 = a_engine_188->payload_map;
  # DEBUG pmap => pmap_1457
  goto <bb 16>;

<bb 15>:
  pmap_1458->negotiated = 0;
  pmap_1458->current = 0;
  pmap_1459 = pmap_1458->next;
  # DEBUG pmap => pmap_1459

<bb 16>:
  # pmap_1458 = PHI <pmap_1457(14), pmap_1459(15)>
  # DEBUG pmap => pmap_1458
  if (pmap_1458 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.47871_1460 = pmap_1458->allocated;
  if (D.47871_1460 != 0)
    goto <bb 15>;
  else
    goto <bb 18>;

<bb 18>:
  # DEBUG engine => v_engine_189
  pmap_1461 = v_engine_189->payload_map;
  # DEBUG pmap => pmap_1461
  goto <bb 20>;

<bb 19>:
  pmap_1462->negotiated = 0;
  pmap_1462->current = 0;
  pmap_1463 = pmap_1462->next;
  # DEBUG pmap => pmap_1463

<bb 20>:
  # pmap_1462 = PHI <pmap_1461(18), pmap_1463(19)>
  # DEBUG pmap => pmap_1462
  if (pmap_1462 != 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.47874_1464 = pmap_1462->allocated;
  if (D.47874_1464 != 0)
    goto <bb 19>;
  else
    goto <bb 22>;

<bb 22>:
  if (proceed_209(D) != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  *proceed_209(D) = 1;

<bb 24>:
  D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
  greedy_211 = D.44490_210 != 0;
  # DEBUG greedy => greedy_211
  D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
  scrooge_213 = D.44491_212 != 0;
  # DEBUG scrooge => scrooge_213
  val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
  # DEBUG val => val_214
  if (val_214 != 0B)
    goto <bb 25>;
  else
    goto <bb 32>;

<bb 25>:
  D.44494_215 = strcasecmp (val_214, "generous");
  if (D.44494_215 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  greedy_216 = 0;
  # DEBUG greedy => 0
  scrooge_217 = 0;
  # DEBUG scrooge => 0
  goto <bb 32>;

<bb 27>:
  D.44498_218 = strcasecmp (val_214, "greedy");
  if (D.44498_218 == 0)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  greedy_219 = 1;
  # DEBUG greedy => 1
  scrooge_220 = 0;
  # DEBUG scrooge => 0
  goto <bb 32>;

<bb 29>:
  D.44502_221 = strcasecmp (val_214, "scrooge");
  if (D.44502_221 == 0)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  scrooge_222 = 1;
  # DEBUG scrooge => 1
  greedy_223 = 1;
  # DEBUG greedy => 1
  goto <bb 32>;

<bb 31>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);

<bb 32>:
  # greedy_47 = PHI <greedy_211(24), 0(26), 1(28), 1(30), greedy_211(31)>
  # scrooge_80 = PHI <scrooge_213(24), 0(26), 0(28), 1(30), scrooge_213(31)>
  # DEBUG scrooge => scrooge_80
  # DEBUG greedy => greedy_47
  D.44506_224 = sdp_198->sdp_origin;
  D.44507_225 = D.44506_224->o_username;
  D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
  smh_186->origin = D.44508_226;
  D.44509_227 = smh_186->origin;
  if (D.44509_227 != 0B)
    goto <bb 33>;
  else
    goto <bb 39>;

<bb 33>:
  D.44471_228 = smh_186->mparams;
  D.44512_229 = D.44471_228->auto_rtp_bugs;
  D.44513_230 = (int) D.44512_229;
  D.44514_231 = D.44513_230 & 1;
  D.44515_232 = (_Bool) D.44514_231;
  if (D.44515_232 != 0)
    goto <bb 34>;
  else
    goto <bb 36>;

<bb 34>:
  D.44509_233 = smh_186->origin;
  D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");
  if (D.44518_234 != 0B)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  D.44521_235 = a_engine_188->rtp_bugs;
  D.44522_236 = D.44521_235 | 1;
  a_engine_188->rtp_bugs = D.44522_236;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");

<bb 36>:
  D.44471_237 = smh_186->mparams;
  D.44512_238 = D.44471_237->auto_rtp_bugs;
  D.44523_239 = D.44512_238 & 2;
  if (D.44523_239 != 0)
    goto <bb 37>;
  else
    goto <bb 39>;

<bb 37>:
  D.44509_240 = smh_186->origin;
  D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
  if (D.44526_241 != 0B)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.44521_242 = a_engine_188->rtp_bugs;
  D.44529_243 = D.44521_242 | 2;
  a_engine_188->rtp_bugs = D.44529_243;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");

<bb 39>:
  D.44530_244 = session_161(D)->channel;
  val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
  # DEBUG val => val_245
  if (val_245 != 0B)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 40>:
  D.44533_246 = switch_true (val_245);
  if (D.44533_246 != 0)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.44530_247 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_247, 93, 1);

<bb 42>:
  m_248 = sdp_198->sdp_media;
  # DEBUG m => m_248
  if (m_248 != 0B)
    goto <bb 43>;
  else
    goto <bb 48>;

<bb 43>:
  D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
  D.44541_250 = D.44540_249 & 6;
  D.44542_251 = D.44541_250 == 2;
  D.44543_252 = D.44541_250 == 0;
  D.44544_253 = D.44542_251 || D.44543_252;
  if (D.44544_253 != 0)
    goto <bb 47>;
  else
    goto <bb 44>;

<bb 44>:
  D.44546_254 = m_248->m_connections;
  if (D.44546_254 != 0B)
    goto <bb 45>;
  else
    goto <bb 48>;

<bb 45>:
  D.44546_255 = m_248->m_connections;
  D.44548_256 = D.44546_255->c_address;
  if (D.44548_256 != 0B)
    goto <bb 46>;
  else
    goto <bb 48>;

<bb 46>:
  __s2_len_257 = 7;
  # DEBUG __s2_len => 7
  D.44546_298 = m_248->m_connections;
  D.44548_299 = D.44546_298->c_address;
  __result_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");
  __result_301 = __result_300;
  if (__result_301 == 0)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  sendonly_302 = 2;
  # DEBUG sendonly => 2

<bb 48>:
  # sendonly_42 = PHI <0(42), 0(44), 0(45), 0(46), 2(47)>
  # DEBUG sendonly => sendonly_42
  attr_303 = sdp_198->sdp_attributes;
  # DEBUG attr => attr_303
  goto <bb 70>;

<bb 49>:
  D.44590_304 = attr_29->a_name;
  # DEBUG s => D.44590_304
  if (D.44590_304 == 0B)
    goto <bb 52>;
  else
    goto <bb 50>;

<bb 50>:
  D.47877_1465 = *D.44590_304;
  if (D.47877_1465 == 0)
    goto <bb 52>;
  else
    goto <bb 51>;

<bb 51>:

<bb 52>:
  # D.47876_1466 = PHI <1(49), 1(50), 0(51)>
  D.47876_1519 = D.47876_1466;
  D.47876_305 = D.47876_1519;
  if (D.47876_305 != 0)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  // predicted unlikely by continue predictor.
  goto <bb 69>;

<bb 54>:
  D.44590_306 = attr_29->a_name;
  D.44594_307 = strcasecmp (D.44590_306, "sendonly");
  if (D.44594_307 == 0)
    goto <bb 55>;
  else
    goto <bb 56>;

<bb 55>:
  sendonly_308 = 1;
  # DEBUG sendonly => 1
  D.44530_309 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
  goto <bb 69>;

<bb 56>:
  D.44590_310 = attr_29->a_name;
  D.44598_311 = strcasecmp (D.44590_310, "inactive");
  if (D.44598_311 == 0)
    goto <bb 57>;
  else
    goto <bb 58>;

<bb 57>:
  sendonly_312 = 1;
  # DEBUG sendonly => 1
  D.44530_313 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
  goto <bb 69>;

<bb 58>:
  D.44590_314 = attr_29->a_name;
  D.44602_315 = strcasecmp (D.44590_314, "recvonly");
  if (D.44602_315 == 0)
    goto <bb 59>;
  else
    goto <bb 62>;

<bb 59>:
  D.44530_316 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
  recvonly_317 = 1;
  # DEBUG recvonly => 1
  D.44605_318 = a_engine_188->rtp_session;
  D.44606_319 = switch_rtp_ready (D.44605_318);
  if (D.44606_319 != 0)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  D.44605_320 = a_engine_188->rtp_session;
  switch_rtp_set_max_missed_packets (D.44605_320, 0);
  a_engine_188->max_missed_hold_packets = 0;
  a_engine_188->max_missed_packets = 0;
  goto <bb 69>;

<bb 61>:
  D.44530_321 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
  D.44530_322 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
  goto <bb 69>;

<bb 62>:
  if (sendonly_44 <= 1)
    goto <bb 63>;
  else
    goto <bb 65>;

<bb 63>:
  D.44590_323 = attr_29->a_name;
  D.44614_324 = strcasecmp (D.44590_323, "sendrecv");
  if (D.44614_324 == 0)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  sendonly_325 = 0;
  # DEBUG sendonly => 0
  goto <bb 69>;

<bb 65>:
  D.44590_326 = attr_29->a_name;
  D.44616_327 = strcasecmp (D.44590_326, "ptime");
  if (D.44616_327 == 0)
    goto <bb 66>;
  else
    goto <bb 67>;

<bb 66>:
  D.44619_328 = attr_29->a_value;
  # DEBUG __nptr => D.44619_328
  dptime_1467 = strtol (D.44619_328, 0B, 10);
  dptime_1521 = dptime_1467;
  dptime_329 = dptime_1521;
  # DEBUG dptime => NULL
  goto <bb 69>;

<bb 67>:
  D.44590_330 = attr_29->a_name;
  D.44621_331 = strcasecmp (D.44590_330, "maxptime");
  if (D.44621_331 == 0)
    goto <bb 68>;
  else
    goto <bb 69>;

<bb 68>:
  D.44619_332 = attr_29->a_value;
  # DEBUG __nptr => D.44619_332
  dmaxptime_1468 = strtol (D.44619_332, 0B, 10);
  dmaxptime_1523 = dmaxptime_1468;
  dmaxptime_333 = dmaxptime_1523;
  # DEBUG dmaxptime => NULL

<bb 69>:
  # dptime_36 = PHI <dptime_37(53), dptime_37(55), dptime_37(57), dptime_37(61), dptime_37(64), dptime_329(66), dptime_37(67), dptime_37(68), dptime_37(60)>
  # dmaxptime_40 = PHI <dmaxptime_41(53), dmaxptime_41(55), dmaxptime_41(57), dmaxptime_41(61), dmaxptime_41(64), dmaxptime_41(66), dmaxptime_41(67), dmaxptime_333(68), dmaxptime_41(60)>
  # sendonly_43 = PHI <sendonly_44(53), 1(55), 1(57), sendonly_44(61), 0(64), sendonly_44(66), sendonly_44(67), sendonly_44(68), sendonly_44(60)>
  # recvonly_45 = PHI <recvonly_46(53), recvonly_46(55), recvonly_46(57), 1(61), recvonly_46(64), recvonly_46(66), recvonly_46(67), recvonly_46(68), 1(60)>
  # DEBUG recvonly => recvonly_45
  # DEBUG sendonly => sendonly_43
  # DEBUG dmaxptime => dmaxptime_40
  # DEBUG dptime => dptime_36
  attr_334 = attr_29->a_next;
  # DEBUG attr => attr_334

<bb 70>:
  # attr_29 = PHI <attr_303(48), attr_334(69)>
  # dptime_37 = PHI <0(48), dptime_36(69)>
  # dmaxptime_41 = PHI <0(48), dmaxptime_40(69)>
  # sendonly_44 = PHI <sendonly_42(48), sendonly_43(69)>
  # recvonly_46 = PHI <0(48), recvonly_45(69)>
  # DEBUG recvonly => recvonly_46
  # DEBUG sendonly => sendonly_44
  # DEBUG dmaxptime => dmaxptime_41
  # DEBUG dptime => dptime_37
  # DEBUG attr => attr_29
  if (attr_29 != 0B)
    goto <bb 49>;
  else
    goto <bb 71>;

<bb 71>:
  D.44624_335 = sendonly_44 != 1;
  D.44625_336 = recvonly_46 != 1;
  D.44626_337 = D.44624_335 && D.44625_336;
  if (D.44626_337 != 0)
    goto <bb 72>;
  else
    goto <bb 73>;

<bb 72>:
  D.44530_338 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);

<bb 73>:
  D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
  if (D.44631_339 == 0)
    goto <bb 74>;
  else
    goto <bb 80>;

<bb 74>:
  D.44530_340 = session_161(D)->channel;
  val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
  # DEBUG val => val_341
  if (val_341 == 0B)
    goto <bb 76>;
  else
    goto <bb 75>;

<bb 75>:
  D.44635_342 = switch_true (val_341);
  if (D.44635_342 == 0)
    goto <bb 76>;
  else
    goto <bb 80>;

<bb 76>:
  D.44471_343 = smh_186->mparams;
  D.44636_344 = D.44471_343->hold_laps;
  if (D.44636_344 == 0)
    goto <bb 77>;
  else
    goto <bb 80>;

<bb 77>:
  D.44471_345 = smh_186->mparams;
  D.44636_346 = D.44471_345->hold_laps;
  D.44639_347 = D.44636_346 + 1;
  D.44471_345->hold_laps = D.44639_347;
  D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);
  if (D.44640_348 != 0)
    goto <bb 78>;
  else
    goto <bb 80>;

<bb 78>:
  reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
  # DEBUG reneg => reneg_349
  D.44530_350 = session_161(D)->channel;
  val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
  # DEBUG val => val_351
  if (val_351 != 0B)
    goto <bb 79>;
  else
    goto <bb 80>;

<bb 79>:
  reneg_352 = switch_true (val_351);
  # DEBUG reneg => reneg_352

<bb 80>:
  # reneg_81 = PHI <1(73), 1(75), 1(76), 1(77), reneg_349(78), reneg_352(79)>
  # DEBUG reneg => reneg_81
  if (reneg_81 != 0)
    goto <bb 81>;
  else
    goto <bb 83>;

<bb 81>:
  reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
  # DEBUG reneg => reneg_353
  D.44530_354 = session_161(D)->channel;
  val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
  # DEBUG val => val_355
  if (val_355 != 0B)
    goto <bb 82>;
  else
    goto <bb 83>;

<bb 82>:
  reneg_356 = switch_true (val_355);
  # DEBUG reneg => reneg_356

<bb 83>:
  # reneg_82 = PHI <reneg_81(80), reneg_353(81), reneg_356(82)>
  # DEBUG reneg => reneg_82
  D.44649_357 = session_161(D)->bugs;
  if (D.44649_357 != 0B)
    goto <bb 84>;
  else
    goto <bb 85>;

<bb 84>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
  reneg_358 = 0;
  # DEBUG reneg => 0

<bb 85>:
  # reneg_83 = PHI <reneg_82(83), 0(84)>
  # DEBUG reneg => reneg_83
  if (reneg_83 == 0)
    goto <bb 86>;
  else
    goto <bb 88>;

<bb 86>:
  D.44655_359 = smh_186->num_negotiated_codecs;
  if (D.44655_359 != 0)
    goto <bb 87>;
  else
    goto <bb 88>;

<bb 87>:
  codec_array_360 = &smh_186->negotiated_codecs;
  # DEBUG codec_array => codec_array_360
  total_codecs_361 = smh_186->num_negotiated_codecs;
  # DEBUG total_codecs => total_codecs_361
  goto <bb 90>;

<bb 88>:
  if (reneg_83 != 0)
    goto <bb 89>;
  else
    goto <bb 90>;

<bb 89>:
  D.44471_362 = smh_186->mparams;
  D.44471_362->num_codecs = 0;
  switch_core_media_prepare_codecs (session_161(D), 0);
  codec_array_363 = &smh_186->codecs;
  # DEBUG codec_array => codec_array_363
  D.44471_364 = smh_186->mparams;
  total_codecs_365 = D.44471_364->num_codecs;
  # DEBUG total_codecs => total_codecs_365

<bb 90>:
  # codec_array_84 = PHI <codec_array_360(87), codec_array_190(88), codec_array_363(89)>
  # total_codecs_85 = PHI <total_codecs_361(87), total_codecs_192(88), total_codecs_365(89)>
  # DEBUG total_codecs => total_codecs_85
  # DEBUG codec_array => codec_array_84
  D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
  if (D.44661_366 != 0B)
    goto <bb 93>;
  else
    goto <bb 91>;

<bb 91>:
  D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
  if (D.44663_367 != 0B)
    goto <bb 93>;
  else
    goto <bb 92>;

<bb 92>:
  D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
  if (D.44665_368 != 0B)
    goto <bb 93>;
  else
    goto <bb 94>;

<bb 93>:
  D.44530_369 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);

<bb 94>:
  switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
  switch_core_media_pass_zrtp_hash (session_161(D));
  check_ice (smh_186, 0, sdp_198, 0B);
  check_ice (smh_186, 1, sdp_198, 0B);
  m_370 = sdp_198->sdp_media;
  # DEBUG m => m_370
  goto <bb 438>;

<bb 95>:
  ptime_371 = dptime_37;
  # DEBUG ptime => ptime_371
  maxptime_372 = dmaxptime_41;
  # DEBUG maxptime => maxptime_372
  D.44666_373 = m_28->m_proto;
  if (D.44666_373 == 261)
    goto <bb 96>;
  else
    goto <bb 97>;

<bb 96>:
  got_webrtc_374 = got_webrtc_79 + 1;
  # DEBUG got_webrtc => got_webrtc_374
  switch_core_session_set_ice (session_161(D));

<bb 97>:
  # got_webrtc_78 = PHI <got_webrtc_79(95), got_webrtc_374(96)>
  # DEBUG got_webrtc => got_webrtc_78
  D.44669_375 = m_28->m_proto_name;
  if (D.44669_375 != 0B)
    goto <bb 98>;
  else
    goto <bb 100>;

<bb 98>:
  D.44669_376 = m_28->m_proto_name;
  D.44672_377 = strcasecmp (D.44669_376, "UDP/TLS/RTP/SAVPF");
  if (D.44672_377 == 0)
    goto <bb 99>;
  else
    goto <bb 100>;

<bb 99>:
  D.44530_378 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_378, 107, 1);

<bb 100>:
  D.44675_379 = m_28->m_proto;
  D.44676_380 = D.44675_379 == 257;
  D.44677_381 = D.44675_379 == 261;
  D.44678_382 = D.44676_380 || D.44677_381;
  if (D.44678_382 != 0)
    goto <bb 101>;
  else
    goto <bb 104>;

<bb 101>:
  D.44681_383 = m_28->m_type;
  if (D.44681_383 == 2)
    goto <bb 102>;
  else
    goto <bb 103>;

<bb 102>:
  got_savp_384 = got_savp_75 + 1;
  # DEBUG got_savp => got_savp_384
  goto <bb 110>;

<bb 103>:
  got_video_savp_385 = got_video_savp_73 + 1;
  # DEBUG got_video_savp => got_video_savp_385
  goto <bb 110>;

<bb 104>:
  D.44666_386 = m_28->m_proto;
  if (D.44666_386 == 256)
    goto <bb 105>;
  else
    goto <bb 108>;

<bb 105>:
  D.44681_387 = m_28->m_type;
  if (D.44681_387 == 2)
    goto <bb 106>;
  else
    goto <bb 107>;

<bb 106>:
  got_avp_388 = got_avp_69 + 1;
  # DEBUG got_avp => got_avp_388
  goto <bb 110>;

<bb 107>:
  got_video_avp_389 = got_video_avp_71 + 1;
  # DEBUG got_video_avp => got_video_avp_389
  goto <bb 110>;

<bb 108>:
  D.44666_390 = m_28->m_proto;
  if (D.44666_390 == 258)
    goto <bb 109>;
  else
    goto <bb 110>;

<bb 109>:
  got_udptl_391 = got_udptl_77 + 1;
  # DEBUG got_udptl => got_udptl_391

<bb 110>:
  # got_avp_68 = PHI <got_avp_69(103), got_avp_69(107), got_avp_69(108), got_avp_69(109), got_avp_69(102), got_avp_388(106)>
  # got_video_avp_70 = PHI <got_video_avp_71(103), got_video_avp_389(107), got_video_avp_71(108), got_video_avp_71(109), got_video_avp_71(102), got_video_avp_71(106)>
  # got_video_savp_72 = PHI <got_video_savp_385(103), got_video_savp_73(107), got_video_savp_73(108), got_video_savp_73(109), got_video_savp_73(102), got_video_savp_73(106)>
  # got_savp_74 = PHI <got_savp_75(103), got_savp_75(107), got_savp_75(108), got_savp_75(109), got_savp_384(102), got_savp_75(106)>
  # got_udptl_76 = PHI <got_udptl_77(103), got_udptl_77(107), got_udptl_77(108), got_udptl_391(109), got_udptl_77(102), got_udptl_77(106)>
  # DEBUG got_udptl => got_udptl_76
  # DEBUG got_savp => got_savp_74
  # DEBUG got_video_savp => got_video_savp_72
  # DEBUG got_video_avp => got_video_avp_70
  # DEBUG got_avp => got_avp_68
  if (got_udptl_76 != 0)
    goto <bb 111>;
  else
    goto <bb 146>;

<bb 111>:
  D.44681_392 = m_28->m_type;
  if (D.44681_392 == 8)
    goto <bb 112>;
  else
    goto <bb 146>;

<bb 112>:
  D.44697_393 = m_28->m_port;
  if (D.44697_393 != 0)
    goto <bb 113>;
  else
    goto <bb 146>;

<bb 113>:
  t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
  # DEBUG t38_options => t38_options_394
  D.44530_395 = session_161(D)->channel;
  D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
  if (D.44699_396 != 0)
    goto <bb 114>;
  else
    goto <bb 115>;

<bb 114>:
  match_397 = 1;
  # DEBUG match => 1
  goto <bb 439> (done);

<bb 115>:
  D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
  D.44703_399 = switch_true (D.44702_398);
  if (D.44703_399 != 0)
    goto <bb 116>;
  else
    goto <bb 117>;

<bb 116>:
  D.44530_400 = session_161(D)->channel;
  switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
  match_401 = 0;
  # DEBUG match => 0
  goto <bb 439> (done);

<bb 117>:
  var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
  # DEBUG var => var_402
  D.44481_403 = smh_186->session;
  D.44482_404 = D.44481_403->channel;
  D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
  pass_406 = (int) D.44706_405;
  # DEBUG pass => pass_406
  D.44530_407 = session_161(D)->channel;
  D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
  if (D.44707_408 != 0)
    goto <bb 118>;
  else
    goto <bb 120>;

<bb 118>:
  if (proceed_209(D) != 0B)
    goto <bb 119>;
  else
    goto <bb 120>;

<bb 119>:
  *proceed_209(D) = 0;

<bb 120>:
  if (var_402 != 0B)
    goto <bb 121>;
  else
    goto <bb 124>;

<bb 121>:
  pass_409 = switch_true (var_402);
  # DEBUG pass => pass_409
  if (pass_409 == 0)
    goto <bb 122>;
  else
    goto <bb 124>;

<bb 122>:
  D.44716_410 = strcasecmp (var_402, "once");
  if (D.44716_410 == 0)
    goto <bb 123>;
  else
    goto <bb 124>;

<bb 123>:
  pass_411 = 2;
  # DEBUG pass => 2

<bb 124>:
  # pass_126 = PHI <pass_406(120), pass_409(121), pass_409(122), 2(123)>
  # DEBUG pass => pass_126
  if (pass_126 == 2)
    goto <bb 125>;
  else
    goto <bb 126>;

<bb 125>:
  D.44481_412 = smh_186->session;
  D.44482_413 = D.44481_412->channel;
  D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
  if (D.44723_414 != 0)
    goto <bb 130>;
  else
    goto <bb 126>;

<bb 126>:
  D.44530_415 = session_161(D)->channel;
  D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
  if (D.44724_416 == 0)
    goto <bb 130>;
  else
    goto <bb 127>;

<bb 127>:
  D.44530_417 = session_161(D)->channel;
  D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
  if (D.44726_418 != 0)
    goto <bb 130>;
  else
    goto <bb 128>;

<bb 128>:
  D.44530_419 = session_161(D)->channel;
  D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
  if (D.44728_420 != 0)
    goto <bb 130>;
  else
    goto <bb 129>;

<bb 129>:
  D.44605_421 = a_engine_188->rtp_session;
  D.44730_422 = switch_rtp_ready (D.44605_421);
  if (D.44730_422 == 0)
    goto <bb 130>;
  else
    goto <bb 131>;

<bb 130>:
  pass_423 = 0;
  # DEBUG pass => 0

<bb 131>:
  # pass_127 = PHI <pass_126(129), 0(130)>
  # DEBUG pass => pass_127
  if (pass_127 != 0)
    goto <bb 132>;
  else
    goto <bb 145>;

<bb 132>:
  D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
  if (D.44733_424 == 0)
    goto <bb 133>;
  else
    goto <bb 145>;

<bb 133>:
  other_session.89_425 = other_session;
  other_channel_426 = switch_core_session_get_channel (other_session.89_425);
  # DEBUG other_channel => other_channel_426
  D.44605_427 = a_engine_188->rtp_session;
  remote_host_428 = switch_rtp_get_remote_host (D.44605_427);
  # DEBUG remote_host => remote_host_428
  D.44605_429 = a_engine_188->rtp_session;
  remote_port_430 = switch_rtp_get_remote_port (D.44605_429);
  # DEBUG remote_port => remote_port_430
  tmp = "";
  D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
  if (D.44737_431 == 0)
    goto <bb 134>;
  else
    goto <bb 135>;

<bb 134>:
  D.44530_432 = session_161(D)->channel;
  D.44740_433 = switch_channel_get_name (D.44530_432);
  D.44741_434 = switch_channel_get_name (other_channel_426);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
  other_session.89_435 = other_session;
  switch_core_session_rwunlock (other_session.89_435);
  # DEBUG pass => 0
  match_437 = 0;
  # DEBUG match => 0
  goto <bb 439> (done);

<bb 135>:
  D.44530_438 = session_161(D)->channel;
  D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
  D.44743_440 = switch_true (D.44742_439);
  if (D.44743_440 != 0)
    goto <bb 136>;
  else
    goto <bb 138>;

<bb 136>:
  D.44530_441 = session_161(D)->channel;
  D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
  D.44747_443 = switch_true (D.44746_442);
  if (D.44747_443 != 0)
    goto <bb 137>;
  else
    goto <bb 138>;

<bb 137>:
  switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);

<bb 138>:
  D.44750_444 = a_engine_188->cur_payload_map;
  D.44751_445 = t38_options_394->remote_ip;
  D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
  D.44750_444->remote_sdp_ip = D.44752_446;
  D.44750_447 = a_engine_188->cur_payload_map;
  D.44753_448 = t38_options_394->remote_port;
  D.44750_447->remote_sdp_port = D.44753_448;
  D.44756_449 = remote_host_428 != 0B;
  D.44757_450 = remote_port_430 != 0;
  D.44758_451 = D.44756_449 && D.44757_450;
  if (D.44758_451 != 0)
    goto <bb 139>;
  else
    goto <bb 142>;

<bb 139>:
  D.44750_452 = a_engine_188->cur_payload_map;
  D.44760_453 = D.44750_452->remote_sdp_ip;
  D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
  if (D.39032_454 == 0)
    goto <bb 140>;
  else
    goto <bb 142>;

<bb 140>:
  D.44750_455 = a_engine_188->cur_payload_map;
  D.44762_456 = D.44750_455->remote_sdp_port;
  if (D.44762_456 == remote_port_430)
    goto <bb 141>;
  else
    goto <bb 142>;

<bb 141>:
  D.44530_457 = session_161(D)->channel;
  D.44764_458 = switch_channel_get_name (D.44530_457);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
  goto <bb 144>;

<bb 142>:
  err = 0B;
  D.44530_459 = session_161(D)->channel;
  D.44765_460 = switch_channel_get_name (D.44530_459);
  D.44766_461 = (int) remote_port_430;
  D.44750_462 = a_engine_188->cur_payload_map;
  D.44760_463 = D.44750_462->remote_sdp_ip;
  D.44750_464 = a_engine_188->cur_payload_map;
  D.44762_465 = D.44750_464->remote_sdp_port;
  D.44767_466 = (int) D.44762_465;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
  D.44750_467 = a_engine_188->cur_payload_map;
  D.44762_468 = D.44750_467->remote_sdp_port;
  D.44767_469 = (int) D.44762_468;
  switch_snprintf (&tmp, 32, "%d", D.44767_469);
  D.44530_470 = session_161(D)->channel;
  D.44750_471 = a_engine_188->cur_payload_map;
  D.44760_472 = D.44750_471->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
  D.44530_473 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
  D.44605_474 = a_engine_188->rtp_session;
  D.44750_475 = a_engine_188->cur_payload_map;
  D.44760_476 = D.44750_475->remote_sdp_ip;
  D.44750_477 = a_engine_188->cur_payload_map;
  D.44762_478 = D.44750_477->remote_sdp_port;
  D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
  if (D.44768_479 != 0)
    goto <bb 143>;
  else
    goto <bb 144>;

<bb 143>:
  err.90_480 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
  switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);

<bb 144>:
  other_session.89_481 = other_session;
  switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
  D.44481_482 = smh_186->session;
  D.44482_483 = D.44481_482->channel;
  switch_channel_set_flag_value (D.44482_483, 101, 1);
  other_session.89_484 = other_session;
  D.44772_485 = other_session.89_484->channel;
  switch_channel_set_flag_value (D.44772_485, 101, 1);
  other_session.89_486 = other_session;
  msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
  # DEBUG msg => msg_487
  msg_487->message_id = 21;
  msg_487->from = "src/switch_core_media.c";
  other_session.89_488 = other_session;
  D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
  msg_487->string_arg = D.44773_489;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
  other_session.89_490 = other_session;
  switch_core_session_queue_message (other_session.89_490, msg_487);
  other_session.89_491 = other_session;
  switch_core_session_rwunlock (other_session.89_491);

<bb 145>:
  match_492 = 1;
  # DEBUG match => 1
  goto <bb 439> (done);

<bb 146>:
  D.44681_493 = m_28->m_type;
  if (D.44681_493 == 2)
    goto <bb 147>;
  else
    goto <bb 341>;

<bb 147>:
  D.44697_494 = m_28->m_port;
  D.44777_495 = D.44697_494 != 0;
  D.44778_496 = got_audio_67 == 0;
  D.44779_497 = D.44777_495 && D.44778_496;
  if (D.44779_497 != 0)
    goto <bb 148>;
  else
    goto <bb 341>;

<bb 148>:
  D.44781_498 = switch_rtp_has_dtls ();
  if (D.44781_498 != 0)
    goto <bb 149>;
  else
    goto <bb 159>;

<bb 149>:
  D.44784_499 = dtls_ok (session_161(D));
  if (D.44784_499 != 0)
    goto <bb 150>;
  else
    goto <bb 159>;

<bb 150>:
  attr_500 = m_28->m_attributes;
  # DEBUG attr => attr_500
  goto <bb 158>;

<bb 151>:
  D.44590_501 = attr_30->a_name;
  D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
  if (D.44787_502 == 0)
    goto <bb 152>;
  else
    goto <bb 157>;

<bb 152>:
  D.44619_503 = attr_30->a_value;
  # DEBUG s => D.44619_503
  if (D.44619_503 == 0B)
    goto <bb 155>;
  else
    goto <bb 153>;

<bb 153>:
  D.47887_1469 = *D.44619_503;
  if (D.47887_1469 == 0)
    goto <bb 155>;
  else
    goto <bb 154>;

<bb 154>:

<bb 155>:
  # D.47886_1470 = PHI <1(152), 1(153), 0(154)>
  D.47886_1524 = D.47886_1470;
  D.47886_504 = D.47886_1524;
  if (D.47886_504 == 0)
    goto <bb 156>;
  else
    goto <bb 157>;

<bb 156>:
  got_crypto_505 = 1;
  # DEBUG got_crypto => 1

<bb 157>:
  # got_crypto_50 = PHI <got_crypto_51(151), got_crypto_51(155), 1(156)>
  # DEBUG got_crypto => got_crypto_50
  attr_506 = attr_30->a_next;
  # DEBUG attr => attr_506

<bb 158>:
  # attr_30 = PHI <attr_500(150), attr_506(157)>
  # got_crypto_51 = PHI <got_crypto_56(150), got_crypto_50(157)>
  # DEBUG got_crypto => got_crypto_51
  # DEBUG attr => attr_30
  if (attr_30 != 0B)
    goto <bb 151>;
  else
    goto <bb 159>;

<bb 159>:
  # got_crypto_52 = PHI <got_crypto_56(148), got_crypto_56(149), got_crypto_51(158)>
  # DEBUG got_crypto => got_crypto_52
  attr_507 = m_28->m_attributes;
  # DEBUG attr => attr_507
  goto <bb 182>;

<bb 160>:
  D.44590_508 = attr_31->a_name;
  D.44795_509 = strcasecmp (D.44590_508, "rtcp");
  if (D.44795_509 == 0)
    goto <bb 161>;
  else
    goto <bb 164>;

<bb 161>:
  D.44619_510 = attr_31->a_value;
  if (D.44619_510 != 0B)
    goto <bb 162>;
  else
    goto <bb 164>;

<bb 162>:
  D.44530_511 = session_161(D)->channel;
  D.44619_512 = attr_31->a_value;
  switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);
  D.44619_513 = attr_31->a_value;
  # DEBUG __nptr => D.44619_513
  D.47890_1471 = strtol (D.44619_513, 0B, 10);
  D.47890_1526 = D.47890_1471;
  D.47890_514 = D.47890_1526;
  D.44799_515 = (short unsigned int) D.47890_514;
  a_engine_188->remote_rtcp_port = D.44799_515;
  D.44471_516 = smh_186->mparams;
  D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
  if (D.44800_517 == 0B)
    goto <bb 163>;
  else
    goto <bb 181>;

<bb 163>:
  D.44471_518 = smh_186->mparams;
  D.44471_518->rtcp_audio_interval_msec = "5000";
  goto <bb 181>;

<bb 164>:
  D.44590_519 = attr_31->a_name;
  D.44805_520 = strcasecmp (D.44590_519, "ptime");
  if (D.44805_520 == 0)
    goto <bb 165>;
  else
    goto <bb 167>;

<bb 165>:
  D.44619_521 = attr_31->a_value;
  if (D.44619_521 != 0B)
    goto <bb 166>;
  else
    goto <bb 167>;

<bb 166>:
  D.44619_522 = attr_31->a_value;
  # DEBUG __nptr => D.44619_522
  ptime_1472 = strtol (D.44619_522, 0B, 10);
  ptime_1528 = ptime_1472;
  ptime_523 = ptime_1528;
  # DEBUG ptime => NULL
  goto <bb 181>;

<bb 167>:
  D.44590_524 = attr_31->a_name;
  D.44810_525 = strcasecmp (D.44590_524, "maxptime");
  if (D.44810_525 == 0)
    goto <bb 168>;
  else
    goto <bb 170>;

<bb 168>:
  D.44619_526 = attr_31->a_value;
  if (D.44619_526 != 0B)
    goto <bb 169>;
  else
    goto <bb 170>;

<bb 169>:
  D.44619_527 = attr_31->a_value;
  # DEBUG __nptr => D.44619_527
  maxptime_1473 = strtol (D.44619_527, 0B, 10);
  maxptime_1530 = maxptime_1473;
  maxptime_528 = maxptime_1530;
  # DEBUG maxptime => NULL
  goto <bb 181>;

<bb 170>:
  if (got_crypto_54 <= 0)
    goto <bb 171>;
  else
    goto <bb 181>;

<bb 171>:
  D.44590_529 = attr_31->a_name;
  D.44815_530 = strcasecmp (D.44590_529, "crypto");
  if (D.44815_530 == 0)
    goto <bb 172>;
  else
    goto <bb 181>;

<bb 172>:
  D.44619_531 = attr_31->a_value;
  # DEBUG s => D.44619_531
  if (D.44619_531 == 0B)
    goto <bb 175>;
  else
    goto <bb 173>;

<bb 173>:
  D.47900_1474 = *D.44619_531;
  if (D.47900_1474 == 0)
    goto <bb 175>;
  else
    goto <bb 174>;

<bb 174>:

<bb 175>:
  # D.47899_1475 = PHI <1(172), 1(173), 0(174)>
  D.47899_1531 = D.47899_1475;
  D.47899_532 = D.47899_1531;
  if (D.47899_532 == 0)
    goto <bb 176>;
  else
    goto <bb 181>;

<bb 176>:
  D.44471_533 = smh_186->mparams;
  D.44821_534 = D.44471_533->ndlb;
  D.44822_535 = D.44821_534 & 4;
  if (D.44822_535 == 0)
    goto <bb 177>;
  else
    goto <bb 180>;

<bb 177>:
  D.44530_536 = session_161(D)->channel;
  D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
  D.44826_538 = switch_true (D.44825_537);
  if (D.44826_538 == 0)
    goto <bb 178>;
  else
    goto <bb 180>;

<bb 178>:
  D.44666_539 = m_28->m_proto;
  D.44829_540 = D.44666_539 != 257;
  D.44830_541 = got_webrtc_78 == 0;
  D.44831_542 = D.44829_540 && D.44830_541;
  if (D.44831_542 != 0)
    goto <bb 179>;
  else
    goto <bb 180>;

<bb 179>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  match_543 = 0;
  # DEBUG match => 0
  goto <bb 439> (done);

<bb 180>:
  crypto_544 = attr_31->a_value;
  # DEBUG crypto => crypto_544
  # DEBUG __nptr => crypto_544
  crypto_tag_1476 = strtol (crypto_544, 0B, 10);
  crypto_tag_1533 = crypto_tag_1476;
  crypto_tag_545 = crypto_tag_1533;
  # DEBUG crypto_tag => NULL
  got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_545, sdp_type_546(D));
  # DEBUG got_crypto => got_crypto_547

<bb 181>:
  # ptime_34 = PHI <ptime_35(163), ptime_523(166), ptime_35(169), ptime_35(170), ptime_35(171), ptime_35(175), ptime_35(180), ptime_35(162)>
  # maxptime_38 = PHI <maxptime_39(163), maxptime_39(166), maxptime_528(169), maxptime_39(170), maxptime_39(171), maxptime_39(175), maxptime_39(180), maxptime_39(162)>
  # got_crypto_53 = PHI <got_crypto_54(163), got_crypto_54(166), got_crypto_54(169), got_crypto_54(170), got_crypto_54(171), got_crypto_54(175), got_crypto_547(180), got_crypto_54(162)>
  # DEBUG got_crypto => got_crypto_53
  # DEBUG maxptime => maxptime_38
  # DEBUG ptime => ptime_34
  attr_548 = attr_31->a_next;
  # DEBUG attr => attr_548

<bb 182>:
  # attr_31 = PHI <attr_507(159), attr_548(181)>
  # ptime_35 = PHI <ptime_371(159), ptime_34(181)>
  # maxptime_39 = PHI <maxptime_372(159), maxptime_38(181)>
  # got_crypto_54 = PHI <got_crypto_52(159), got_crypto_53(181)>
  # DEBUG got_crypto => got_crypto_54
  # DEBUG maxptime => maxptime_39
  # DEBUG ptime => ptime_35
  # DEBUG attr => attr_31
  if (attr_31 != 0B)
    goto <bb 160>;
  else
    goto <bb 183>;

<bb 183>:
  D.44834_549 = got_crypto_54 == -1;
  D.44835_550 = got_savp_74 != 0;
  D.44836_551 = D.44834_549 && D.44835_550;
  if (D.44836_551 != 0)
    goto <bb 184>;
  else
    goto <bb 186>;

<bb 184>:
  D.44839_552 = got_avp_68 | got_webrtc_78;
  if (D.44839_552 == 0)
    goto <bb 185>;
  else
    goto <bb 186>;

<bb 185>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
  match_553 = 0;
  # DEBUG match => 0
  goto <bb 439> (done);

<bb 186>:
  connection_554 = sdp_198->sdp_connection;
  # DEBUG connection => connection_554
  D.44546_555 = m_28->m_connections;
  if (D.44546_555 != 0B)
    goto <bb 187>;
  else
    goto <bb 188>;

<bb 187>:
  connection_556 = m_28->m_connections;
  # DEBUG connection => connection_556

<bb 188>:
  # connection_124 = PHI <connection_554(186), connection_556(187)>
  # DEBUG connection => connection_124
  if (connection_124 == 0B)
    goto <bb 189>;
  else
    goto <bb 190>;

<bb 189>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  match_557 = 0;
  # DEBUG match => 0
  goto <bb 439> (done);

<bb 190>:
  x_558 = 0;
  # DEBUG x => 0
  map_559 = m_28->m_rtpmaps;
  # DEBUG map => map_559
  goto <bb 274>;

<bb 191>:
  # DEBUG map_bit_rate => 0
  codec_fmtp = {};
  rm_encoding_561 = map_128->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_561
  if (rm_encoding_561 == 0B)
    goto <bb 192>;
  else
    goto <bb 193>;

<bb 192>:
  rm_encoding_562 = "";
  # DEBUG rm_encoding => ""

<bb 193>:
  # rm_encoding_130 = PHI <rm_encoding_561(191), ""(192)>
  # DEBUG rm_encoding => rm_encoding_130
  D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
  if (D.44848_563 == 0)
    goto <bb 194>;
  else
    goto <bb 198>;

<bb 194>:
  if (best_te_20 == 0)
    goto <bb 196>;
  else
    goto <bb 195>;

<bb 195>:
  D.44854_564 = map_128->rm_rate;
  D.44750_565 = a_engine_188->cur_payload_map;
  D.44855_566 = D.44750_565->rm_rate;
  if (D.44854_564 == D.44855_566)
    goto <bb 196>;
  else
    goto <bb 197>;

<bb 196>:
  D.44856_567 = map_128->rm_pt;
  best_te_568 = (switch_payload_t) D.44856_567;
  # DEBUG best_te => best_te_568
  D.44857_569 = (int) best_te_568;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);

<bb 197>:
  # best_te_18 = PHI <best_te_20(195), best_te_568(196)>
  # DEBUG best_te => best_te_18
  // predicted unlikely by continue predictor.
  goto <bb 273>;

<bb 198>:
  D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
  if (D.44858_570 == 0)
    goto <bb 199>;
  else
    goto <bb 204>;

<bb 199>:
  if (cng_pt_25 == 0)
    goto <bb 200>;
  else
    goto <bb 204>;

<bb 200>:
  D.44863_571 = strcasecmp (rm_encoding_130, "CN");
  if (D.44863_571 == 0)
    goto <bb 201>;
  else
    goto <bb 204>;

<bb 201>:
  D.44856_572 = map_128->rm_pt;
  cng_pt_573 = (switch_payload_t) D.44856_572;
  # DEBUG cng_pt => cng_pt_573
  D.44605_574 = a_engine_188->rtp_session;
  if (D.44605_574 != 0B)
    goto <bb 202>;
  else
    goto <bb 203>;

<bb 202>:
  D.44868_575 = (int) cng_pt_573;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
  D.44605_576 = a_engine_188->rtp_session;
  D.44471_577 = smh_186->mparams;
  D.44869_578 = D.44471_577->cng_pt;
  switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

<bb 203>:
  // predicted unlikely by continue predictor.
  goto <bb 273>;

<bb 204>:
  D.44870_579 = x_49 < 0;
  x_580 = x_49 + 1;
  # DEBUG x => x_580
  if (D.44870_579 != 0)
    goto <bb 205>;
  else
    goto <bb 206>;

<bb 205>:
  // predicted unlikely by continue predictor.
  goto <bb 273>;

<bb 206>:
  if (match_8 != 0)
    goto <bb 207>;
  else
    goto <bb 208>;

<bb 207>:
  // predicted unlikely by continue predictor.
  goto <bb 273>;

<bb 208>:
  codec_ms_581 = ptime_35;
  # DEBUG codec_ms => codec_ms_581
  if (maxptime_39 != 0)
    goto <bb 209>;
  else
    goto <bb 211>;

<bb 209>:
  D.44877_582 = codec_ms_581 == 0;
  D.44878_583 = codec_ms_581 > maxptime_39;
  D.44879_584 = D.44877_582 || D.44878_583;
  if (D.44879_584 != 0)
    goto <bb 210>;
  else
    goto <bb 211>;

<bb 210>:
  codec_ms_585 = maxptime_39;
  # DEBUG codec_ms => codec_ms_585

<bb 211>:
  # codec_ms_86 = PHI <codec_ms_581(208), codec_ms_581(209), codec_ms_585(210)>
  # DEBUG codec_ms => codec_ms_86
  if (codec_ms_86 == 0)
    goto <bb 212>;
  else
    goto <bb 213>;

<bb 212>:
  D.44856_586 = map_128->rm_pt;
  D.44884_587 = (uint32_t) D.44856_586;
  D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
  codec_ms_589 = (int) D.44885_588;
  # DEBUG codec_ms => codec_ms_589

<bb 213>:
  # codec_ms_87 = PHI <codec_ms_86(211), codec_ms_589(212)>
  # DEBUG codec_ms => codec_ms_87
  D.44856_590 = map_128->rm_pt;
  csui.173_591 = (unsigned char) D.44856_590;
  # DEBUG payload => csui.173_591
  csui.173_1477 = csui.173_591;
  if (csui.173_1477 <= 18)
    goto <bb 215> (<L499>);
  else
    goto <bb 214> (<L498>);

<L498>:
  map_bit_rate_1478 = 0;
  goto <bb 216> (<L500>);

<L499>:
  map_bit_rate_1479 = CSWTCH.174[csui.173_1477];

  # map_bit_rate_1480 = PHI <0(214), map_bit_rate_1479(215)>
<L500>:
<L501>:
  map_bit_rate_1534 = map_bit_rate_1480;
  map_bit_rate_592 = map_bit_rate_1534;
  # DEBUG map_bit_rate => NULL
  if (ptime_35 == 0)
    goto <bb 217>;
  else
    goto <bb 219>;

<bb 217>:
  D.44889_593 = map_128->rm_encoding;
  D.44890_594 = strcasecmp (D.44889_593, "g723");
  if (D.44890_594 == 0)
    goto <bb 218>;
  else
    goto <bb 219>;

<bb 218>:
  codec_ms_595 = 33;
  # DEBUG codec_ms => 33

<bb 219>:
  # codec_ms_88 = PHI <codec_ms_87(216), codec_ms_87(217), 33(218)>
  # DEBUG codec_ms => codec_ms_88
  remote_codec_rate_596 = map_128->rm_rate;
  # DEBUG remote_codec_rate => remote_codec_rate_596
  fmtp_remote_codec_rate_597 = 0;
  # DEBUG fmtp_remote_codec_rate => 0
  memset (&codec_fmtp, 0, 16);
  D.44893_598 = map_128->rm_fmtp;
  # DEBUG s => D.44893_598
  if (D.44893_598 == 0B)
    goto <bb 222>;
  else
    goto <bb 220>;

<bb 220>:
  D.47915_1481 = *D.44893_598;
  if (D.47915_1481 == 0)
    goto <bb 222>;
  else
    goto <bb 221>;

<bb 221>:

<bb 222>:
  # D.47914_1482 = PHI <1(219), 1(220), 0(221)>
  D.47914_1535 = D.47914_1482;
  D.47914_599 = D.47914_1535;
  if (D.47914_599 != 0)
    goto <bb 223>;
  else
    goto <bb 227>;

<bb 223>:
  D.44889_600 = map_128->rm_encoding;
  D.44897_601 = strcasecmp (D.44889_600, "ilbc");
  if (D.44897_601 == 0)
    goto <bb 224>;
  else
    goto <bb 225>;

<bb 224>:
  codec_ms_602 = 32;
  # DEBUG codec_ms => 32
  map_bit_rate_603 = 13332;
  # DEBUG map_bit_rate => 13332
  goto <bb 234>;

<bb 225>:
  D.44889_604 = map_128->rm_encoding;
  D.44901_605 = strcasecmp (D.44889_604, "isac");
  if (D.44901_605 == 0)
    goto <bb 226>;
  else
    goto <bb 234>;

<bb 226>:
  codec_ms_606 = 39;
  # DEBUG codec_ms => 39
  map_bit_rate_607 = 32001;
  # DEBUG map_bit_rate => 32001
  goto <bb 234>;

<bb 227>:
  D.44889_608 = map_128->rm_encoding;
  D.44893_609 = map_128->rm_fmtp;
  D.44854_610 = map_128->rm_rate;
  D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);
  if (D.44905_611 == 0)
    goto <bb 228>;
  else
    goto <bb 234>;

<bb 228>:
  D.44908_612 = codec_fmtp.bits_per_second;
  if (D.44908_612 != 0)
    goto <bb 229>;
  else
    goto <bb 230>;

<bb 229>:
  D.44908_613 = codec_fmtp.bits_per_second;
  map_bit_rate_614 = (uint32_t) D.44908_613;
  # DEBUG map_bit_rate => map_bit_rate_614

<bb 230>:
  # map_bit_rate_131 = PHI <map_bit_rate_592(228), map_bit_rate_614(229)>
  # DEBUG map_bit_rate => map_bit_rate_131
  D.44911_615 = codec_fmtp.microseconds_per_packet;
  if (D.44911_615 != 0)
    goto <bb 231>;
  else
    goto <bb 232>;

<bb 231>:
  D.44911_616 = codec_fmtp.microseconds_per_packet;
  codec_ms_617 = D.44911_616 / 1000;
  # DEBUG codec_ms => codec_ms_617

<bb 232>:
  # codec_ms_89 = PHI <codec_ms_88(230), codec_ms_617(231)>
  # DEBUG codec_ms => codec_ms_89
  D.44914_618 = codec_fmtp.actual_samples_per_second;
  if (D.44914_618 != 0)
    goto <bb 233>;
  else
    goto <bb 234>;

<bb 233>:
  fmtp_remote_codec_rate_619 = codec_fmtp.actual_samples_per_second;
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_619

<bb 234>:
  # codec_ms_90 = PHI <codec_ms_88(225), codec_ms_88(227), codec_ms_89(232), codec_ms_89(233), 32(224), 39(226)>
  # fmtp_remote_codec_rate_99 = PHI <0(225), 0(227), 0(232), fmtp_remote_codec_rate_619(233), 0(224), 0(226)>
  # map_bit_rate_132 = PHI <map_bit_rate_592(225), map_bit_rate_592(227), map_bit_rate_131(232), map_bit_rate_131(233), 13332(224), 32001(226)>
  # DEBUG map_bit_rate => map_bit_rate_132
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99
  # DEBUG codec_ms => codec_ms_90
  i_620 = 0;
  # DEBUG i => 0
  goto <bb 271>;

<bb 235>:
  i.91_626 = (unsigned int) i_129;
  D.44918_627 = i.91_626 * 4;
  D.44919_628 = codec_array_84 + D.44918_627;
  imp_629 = *D.44919_628;
  # DEBUG imp => imp_629
  D.44920_630 = imp_629->bits_per_second;
  bit_rate_631 = (uint32_t) D.44920_630;
  # DEBUG bit_rate => bit_rate_631
  codec_rate_632 = imp_629->samples_per_second;
  # DEBUG codec_rate => codec_rate_632
  D.44921_633 = imp_629->codec_type;
  if (D.44921_633 != 0)
    goto <bb 236>;
  else
    goto <bb 237>;

<bb 236>:
  // predicted unlikely by continue predictor.
  goto <bb 270>;

<bb 237>:
  D.44856_634 = map_128->rm_pt;
  D.44924_635 = (int) D.44856_634;
  remote_codec_rate.92_636 = (int) remote_codec_rate_98;
  D.44926_637 = imp_629->iananame;
  D.44927_638 = imp_629->ianacode;
  D.44928_639 = (int) D.44927_638;
  D.44929_640 = imp_629->microseconds_per_packet;
  D.44930_641 = D.44929_640 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
  D.44889_642 = map_128->rm_encoding;
  # DEBUG s => D.44889_642
  if (D.44889_642 == 0B)
    goto <bb 240>;
  else
    goto <bb 238>;

<bb 238>:
  D.47919_1483 = *D.44889_642;
  if (D.47919_1483 == 0)
    goto <bb 240>;
  else
    goto <bb 239>;

<bb 239>:

<bb 240>:
  # D.47918_1484 = PHI <1(237), 1(238), 0(239)>
  D.47918_1536 = D.47918_1484;
  D.47918_643 = D.47918_1536;
  if (D.47918_643 != 0)
    goto <bb 242>;
  else
    goto <bb 241>;

<bb 241>:
  D.44471_644 = smh_186->mparams;
  D.44821_645 = D.44471_644->ndlb;
  D.44936_646 = (int) D.44821_645;
  D.44937_647 = D.44936_646 & 1;
  D.44938_648 = (_Bool) D.44937_647;
  if (D.44938_648 != 0)
    goto <bb 242>;
  else
    goto <bb 244>;

<bb 242>:
  D.44856_649 = map_128->rm_pt;
  D.44924_650 = (int) D.44856_649;
  if (D.44924_650 <= 95)
    goto <bb 243>;
  else
    goto <bb 244>;

<bb 243>:
  D.44856_651 = map_128->rm_pt;
  D.44924_652 = (int) D.44856_651;
  D.44927_653 = imp_629->ianacode;
  D.44928_654 = (int) D.44927_653;
  match_655 = D.44924_652 == D.44928_654;
  # DEBUG match => match_655
  goto <bb 251>;

<bb 244>:
  D.44926_656 = imp_629->iananame;
  D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
  if (D.44944_657 == 0)
    goto <bb 245>;
  else
    goto <bb 248>;

<bb 245>:
  if (remote_codec_rate_98 == codec_rate_632)
    goto <bb 247>;
  else
    goto <bb 246>;

<bb 246>:
  D.44947_658 = imp_629->actual_samples_per_second;
  if (D.44947_658 == fmtp_remote_codec_rate_99)
    goto <bb 247>;
  else
    goto <bb 248>;

<bb 247>:
  iftmp.93_659 = 1;
  goto <bb 249>;

<bb 248>:
  iftmp.93_660 = 0;

<bb 249>:
  # iftmp.93_144 = PHI <1(247), 0(248)>
  match_661 = (uint8_t) iftmp.93_144;
  # DEBUG match => match_661
  if (fmtp_remote_codec_rate_99 != 0)
    goto <bb 250>;
  else
    goto <bb 251>;

<bb 250>:
  remote_codec_rate_662 = fmtp_remote_codec_rate_99;
  # DEBUG remote_codec_rate => remote_codec_rate_662

<bb 251>:
  # match_1 = PHI <match_655(243), match_661(249), match_661(250)>
  # remote_codec_rate_96 = PHI <remote_codec_rate_98(243), remote_codec_rate_98(249), remote_codec_rate_662(250)>
  # DEBUG remote_codec_rate => remote_codec_rate_96
  # DEBUG match => match_1
  D.44950_663 = match_1 != 0;
  D.44951_664 = bit_rate_631 != 0;
  D.44952_665 = D.44950_663 && D.44951_664;
  if (D.44952_665 != 0)
    goto <bb 252>;
  else
    goto <bb 256>;

<bb 252>:
  D.44955_666 = map_bit_rate_132 != 0;
  D.44956_667 = map_bit_rate_132 != bit_rate_631;
  D.44957_668 = D.44955_666 && D.44956_667;
  if (D.44957_668 != 0)
    goto <bb 253>;
  else
    goto <bb 256>;

<bb 253>:
  D.44889_669 = map_128->rm_encoding;
  D.44960_670 = strcasecmp (D.44889_669, "ilbc");
  if (D.44960_670 != 0)
    goto <bb 254>;
  else
    goto <bb 256>;

<bb 254>:
  D.44889_671 = map_128->rm_encoding;
  D.44963_672 = strcasecmp (D.44889_671, "isac");
  if (D.44963_672 != 0)
    goto <bb 255>;
  else
    goto <bb 256>;

<bb 255>:
  match_673 = 0;
  # DEBUG match => 0

<bb 256>:
  # match_2 = PHI <match_1(251), match_1(252), match_1(253), match_1(254), 0(255)>
  # DEBUG match => match_2
  D.44950_674 = match_2 != 0;
  D.44968_675 = remote_codec_rate_96 != 0;
  D.44969_676 = D.44950_674 && D.44968_675;
  if (D.44969_676 != 0)
    goto <bb 257>;
  else
    goto <bb 261>;

<bb 257>:
  D.44972_677 = codec_rate_632 != 0;
  D.44973_678 = remote_codec_rate_96 != codec_rate_632;
  D.44974_679 = D.44972_677 && D.44973_678;
  if (D.44974_679 != 0)
    goto <bb 258>;
  else
    goto <bb 261>;

<bb 258>:
  D.44889_680 = map_128->rm_encoding;
  D.44977_681 = strcasecmp (D.44889_680, "pcma");
  if (D.44977_681 == 0)
    goto <bb 260>;
  else
    goto <bb 259>;

<bb 259>:
  D.44889_682 = map_128->rm_encoding;
  D.44979_683 = strcasecmp (D.44889_682, "pcmu");
  if (D.44979_683 == 0)
    goto <bb 260>;
  else
    goto <bb 261>;

<bb 260>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
  match_684 = 0;
  # DEBUG match => 0

<bb 261>:
  # match_3 = PHI <match_2(256), match_2(257), match_2(259), 0(260)>
  # DEBUG match => match_3
  if (match_3 != 0)
    goto <bb 262>;
  else
    goto <bb 270>;

<bb 262>:
  if (scrooge_80 != 0)
    goto <bb 263>;
  else
    goto <bb 264>;

<bb 263>:
  D.44926_685 = imp_629->iananame;
  D.44984_686 = imp_629->samples_per_second;
  D.44929_687 = imp_629->microseconds_per_packet;
  D.44930_688 = D.44929_687 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
  goto <bb 268>;

<bb 264>:
  D.44989_689 = ptime_35 != 0;
  D.44990_690 = codec_ms_90 != 0;
  D.44991_691 = D.44989_689 && D.44990_690;
  if (D.44991_691 != 0)
    goto <bb 265>;
  else
    goto <bb 266>;

<bb 265>:
  D.44993_692 = codec_ms_90 * 1000;
  D.44929_693 = imp_629->microseconds_per_packet;
  if (D.44993_692 != D.44929_693)
    goto <bb 267>;
  else
    goto <bb 266>;

<bb 266>:
  if (remote_codec_rate_96 != codec_rate_632)
    goto <bb 267>;
  else
    goto <bb 268>;

<bb 267>:
  match_694 = 0;
  # DEBUG match => 0
  D.44926_695 = imp_629->iananame;
  D.44927_696 = imp_629->ianacode;
  D.44928_697 = (int) D.44927_696;
  D.44929_698 = imp_629->microseconds_per_packet;
  D.44930_699 = D.44929_698 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
  near_matches[nm_idx_116].codec_idx = i_129;
  remote_codec_rate.92_700 = (int) remote_codec_rate_96;
  near_matches[nm_idx_116].rate = remote_codec_rate.92_700;
  near_matches[nm_idx_116].imp = imp_629;
  near_matches[nm_idx_116].map = map_128;
  nm_idx_701 = nm_idx_116 + 1;
  # DEBUG nm_idx => nm_idx_701
  // predicted unlikely by continue predictor.
  goto <bb 270>;

<bb 268>:
  matches[m_idx_101].codec_idx = i_129;
  codec_rate.94_702 = (int) codec_rate_632;
  matches[m_idx_101].rate = codec_rate.94_702;
  matches[m_idx_101].imp = imp_629;
  matches[m_idx_101].map = map_128;
  m_idx_703 = m_idx_101 + 1;
  # DEBUG m_idx => m_idx_703
  D.44926_704 = imp_629->iananame;
  D.44927_705 = imp_629->ianacode;
  D.44928_706 = (int) D.44927_705;
  D.44929_707 = imp_629->microseconds_per_packet;
  D.44930_708 = D.44929_707 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
  if (m_idx_703 > 29)
    goto <bb 272>;
  else
    goto <bb 269>;

<bb 269>:
  match_709 = 0;
  # DEBUG match => 0

<bb 270>:
  # match_4 = PHI <match_5(236), match_3(261), 0(267), 0(269)>
  # remote_codec_rate_97 = PHI <remote_codec_rate_98(236), remote_codec_rate_96(261), remote_codec_rate_96(267), remote_codec_rate_96(269)>
  # m_idx_100 = PHI <m_idx_101(236), m_idx_101(261), m_idx_101(267), m_idx_703(269)>
  # nm_idx_115 = PHI <nm_idx_116(236), nm_idx_116(261), nm_idx_701(267), nm_idx_116(269)>
  # DEBUG nm_idx => nm_idx_115
  # DEBUG m_idx => m_idx_100
  # DEBUG remote_codec_rate => remote_codec_rate_97
  # DEBUG match => match_4
  i_710 = i_129 + 1;
  # DEBUG i => i_710

<bb 271>:
  # match_5 = PHI <match_8(234), match_4(270)>
  # remote_codec_rate_98 = PHI <remote_codec_rate_596(234), remote_codec_rate_97(270)>
  # m_idx_101 = PHI <m_idx_104(234), m_idx_100(270)>
  # nm_idx_116 = PHI <nm_idx_118(234), nm_idx_115(270)>
  # i_129 = PHI <0(234), i_710(270)>
  # DEBUG i => i_129
  # DEBUG nm_idx => nm_idx_116
  # DEBUG m_idx => m_idx_101
  # DEBUG remote_codec_rate => remote_codec_rate_98
  # DEBUG match => match_5
  D.44471_621 = smh_186->mparams;
  D.44996_622 = D.44471_621->num_codecs;
  D.44997_623 = D.44996_622 > i_129;
  D.44998_624 = i_129 < total_codecs_85;
  D.44999_625 = D.44997_623 && D.44998_624;
  if (D.44999_625 != 0)
    goto <bb 235>;
  else
    goto <bb 272>;

<bb 272>:
  # match_6 = PHI <match_3(268), match_5(271)>
  # m_idx_102 = PHI <m_idx_703(268), m_idx_101(271)>
  # DEBUG m_idx => m_idx_102
  # DEBUG match => match_6
  if (m_idx_102 > 29)
    goto <bb 275>;
  else
    goto <bb 273>;

<bb 273>:
  # match_7 = PHI <match_8(197), match_8(203), match_8(205), match_8(207), match_6(272)>
  # best_te_19 = PHI <best_te_18(197), best_te_20(203), best_te_20(205), best_te_20(207), best_te_20(272)>
  # cng_pt_24 = PHI <cng_pt_25(197), cng_pt_573(203), cng_pt_25(205), cng_pt_25(207), cng_pt_25(272)>
  # x_48 = PHI <x_49(197), x_49(203), x_580(205), x_580(207), x_580(272)>
  # codec_ms_91 = PHI <codec_ms_92(197), codec_ms_92(203), codec_ms_92(205), codec_ms_92(207), codec_ms_90(272)>
  # m_idx_103 = PHI <m_idx_104(197), m_idx_104(203), m_idx_104(205), m_idx_104(207), m_idx_102(272)>
  # nm_idx_117 = PHI <nm_idx_118(197), nm_idx_118(203), nm_idx_118(205), nm_idx_118(207), nm_idx_116(272)>
  # DEBUG nm_idx => nm_idx_117
  # DEBUG m_idx => m_idx_103
  # DEBUG codec_ms => codec_ms_91
  # DEBUG x => x_48
  # DEBUG cng_pt => cng_pt_24
  # DEBUG best_te => best_te_19
  # DEBUG match => match_7
  map_711 = map_128->rm_next;
  # DEBUG map => map_711

<bb 274>:
  # match_8 = PHI <match_16(190), match_7(273)>
  # best_te_20 = PHI <best_te_23(190), best_te_19(273)>
  # cng_pt_25 = PHI <cng_pt_27(190), cng_pt_24(273)>
  # x_49 = PHI <0(190), x_48(273)>
  # codec_ms_92 = PHI <codec_ms_95(190), codec_ms_91(273)>
  # m_idx_104 = PHI <m_idx_114(190), m_idx_103(273)>
  # nm_idx_118 = PHI <nm_idx_122(190), nm_idx_117(273)>
  # map_128 = PHI <map_559(190), map_711(273)>
  # DEBUG map => map_128
  # DEBUG nm_idx => nm_idx_118
  # DEBUG m_idx => m_idx_104
  # DEBUG codec_ms => codec_ms_92
  # DEBUG x => x_49
  # DEBUG cng_pt => cng_pt_25
  # DEBUG best_te => best_te_20
  # DEBUG match => match_8
  if (map_128 != 0B)
    goto <bb 191>;
  else
    goto <bb 275>;

<bb 275>:
  # match_9 = PHI <match_6(272), match_8(274)>
  # codec_ms_93 = PHI <codec_ms_90(272), codec_ms_92(274)>
  # m_idx_105 = PHI <m_idx_102(272), m_idx_104(274)>
  # nm_idx_119 = PHI <nm_idx_116(272), nm_idx_118(274)>
  # DEBUG nm_idx => nm_idx_119
  # DEBUG m_idx => m_idx_105
  # DEBUG codec_ms => codec_ms_93
  # DEBUG match => match_9
  D.45001_712 = smh_186->crypto_mode;
  D.45002_713 = D.45001_712 == 1;
  D.45003_714 = got_crypto_54 <= 0;
  D.45004_715 = D.45002_713 && D.45003_714;
  if (D.45004_715 != 0)
    goto <bb 276>;
  else
    goto <bb 277>;

<bb 276>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
  match_716 = 0;
  # DEBUG match => 0
  nm_idx_717 = 0;
  # DEBUG nm_idx => 0
  m_idx_718 = 0;
  # DEBUG m_idx => 0

<bb 277>:
  # match_10 = PHI <match_9(275), 0(276)>
  # m_idx_106 = PHI <m_idx_105(275), 0(276)>
  # nm_idx_120 = PHI <nm_idx_119(275), 0(276)>
  # DEBUG nm_idx => nm_idx_120
  # DEBUG m_idx => m_idx_106
  # DEBUG match => match_10
  D.45007_719 = m_idx_106 == 0;
  D.45008_720 = nm_idx_120 != 0;
  D.45009_721 = D.45007_719 && D.45008_720;
  if (D.45009_721 != 0)
    goto <bb 278>;
  else
    goto <bb 290>;

<bb 278>:
  j_722 = 0;
  # DEBUG j => 0
  goto <bb 289>;

<bb 279>:
  # DEBUG timp => 0B
  D.45012_724 = near_matches[j_133].rate;
  near_rate_725 = (uint32_t) D.45012_724;
  # DEBUG near_rate => near_rate_725
  near_match_726 = near_matches[j_133].imp;
  # DEBUG near_match => near_match_726
  near_map_727 = near_matches[j_133].map;
  # DEBUG near_map => near_map_727
  D.45013_728 = near_match_726->iananame;
  if (near_rate_725 == 0)
    goto <bb 280>;
  else
    goto <bb 281>;

<bb 280>:
  near_rate_729 = near_match_726->samples_per_second;
  goto <bb 282>;

<bb 281>:
  near_rate_730 = near_rate_725;

<bb 282>:
  # near_rate_145 = PHI <near_rate_729(280), near_rate_730(281)>
  switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);
  prefs[0] = &tmp;
  num_731 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);
  # DEBUG num => num_731
  if (num_731 != 0)
    goto <bb 283>;
  else
    goto <bb 284>;

<bb 283>:
  timp_732 = search[0];
  # DEBUG timp => timp_732
  goto <bb 285>;

<bb 284>:
  timp_733 = near_match_726;
  # DEBUG timp => timp_733

<bb 285>:
  # timp_134 = PHI <timp_732(283), timp_733(284)>
  # DEBUG timp => timp_134
  if (maxptime_39 == 0)
    goto <bb 287>;
  else
    goto <bb 286>;

<bb 286>:
  D.45024_734 = timp_134->microseconds_per_packet;
  D.45025_735 = D.45024_734 / 1000;
  if (D.45025_735 <= maxptime_39)
    goto <bb 287>;
  else
    goto <bb 288>;

<bb 287>:
  D.45026_737 = timp_134->iananame;
  D.45024_738 = timp_134->microseconds_per_packet;
  D.45025_739 = D.45024_738 / 1000;
  D.45027_740 = timp_134->actual_samples_per_second;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
  match_741 = 1;
  # DEBUG match => 1
  D.45028_742 = near_matches[j_133].codec_idx;
  matches[m_idx_106].codec_idx = D.45028_742;
  near_rate.96_743 = (int) near_rate_725;
  matches[m_idx_106].rate = near_rate.96_743;
  matches[m_idx_106].imp = timp_134;
  matches[m_idx_106].map = near_map_727;
  m_idx_744 = m_idx_106 + 1;
  # DEBUG m_idx => m_idx_744
  goto <bb 290>;

<bb 288>:
  j_736 = j_133 + 1;
  # DEBUG j => j_736

<bb 289>:
  # j_133 = PHI <0(278), j_736(288)>
  # DEBUG j => j_133
  if (j_133 < nm_idx_120)
    goto <bb 279>;
  else
    goto <bb 290>;

<bb 290>:
  # match_11 = PHI <match_10(277), 1(287), match_10(289)>
  # m_idx_107 = PHI <m_idx_106(277), m_idx_744(287), m_idx_106(289)>
  # DEBUG m_idx => m_idx_107
  # DEBUG match => match_11
  if (m_idx_107 != 0)
    goto <bb 291>;
  else
    goto <bb 316>;

<bb 291>:
  if (greedy_47 != 0)
    goto <bb 292>;
  else
    goto <bb 293>;

<bb 292>:
  greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);

<bb 293>:
  match_745 = 1;
  # DEBUG match => 1
  a_engine_188->codec_negotiated = 1;
  smh_186->num_negotiated_codecs = 0;
  j_746 = 0;
  # DEBUG j => 0
  goto <bb 315>;

<bb 294>:
  D.45034_747 = matches[j_135].map;
  D.45035_748 = D.45034_747->rm_encoding;
  D.45034_749 = matches[j_135].map;
  D.45036_750 = D.45034_749->rm_fmtp;
  D.45034_751 = matches[j_135].map;
  D.45037_752 = D.45034_751->rm_pt;
  D.45038_753 = (uint32_t) D.45037_752;
  D.45039_754 = matches[j_135].imp;
  D.45040_755 = D.45039_754->samples_per_second;
  D.45039_756 = matches[j_135].imp;
  D.45041_757 = D.45039_756->microseconds_per_packet;
  D.45042_758 = D.45041_757 / 1000;
  D.45043_759 = (uint32_t) D.45042_758;
  pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
  # DEBUG pmap => pmap_760
  mimp_761 = matches[j_135].imp;
  # DEBUG mimp => mimp_761
  mmap_762 = matches[j_135].map;
  # DEBUG mmap => mmap_762
  if (j_135 == 0)
    goto <bb 295>;
  else
    goto <bb 297>;

<bb 295>:
  a_engine_188->cur_payload_map = pmap_760;
  D.44750_763 = a_engine_188->cur_payload_map;
  D.44750_763->current = 1;
  D.44605_764 = a_engine_188->rtp_session;
  if (D.44605_764 != 0B)
    goto <bb 296>;
  else
    goto <bb 297>;

<bb 296>:
  D.44605_765 = a_engine_188->rtp_session;
  D.45048_766 = pmap_760->pt;
  switch_rtp_set_default_payload (D.44605_765, D.45048_766);

<bb 297>:
  D.45049_767 = mmap_762->rm_encoding;
  D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
  pmap_760->rm_encoding = D.45050_768;
  D.45051_769 = mimp_761->iananame;
  D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
  pmap_760->iananame = D.45052_770;
  D.45053_771 = mmap_762->rm_pt;
  D.45054_772 = (unsigned char) D.45053_771;
  pmap_760->recv_pt = D.45054_772;
  D.45055_773 = mimp_761->samples_per_second;
  pmap_760->rm_rate = D.45055_773;
  D.45055_774 = mimp_761->samples_per_second;
  pmap_760->adv_rm_rate = D.45055_774;
  D.45051_775 = mimp_761->iananame;
  D.45056_776 = strcasecmp (D.45051_775, "g722");
  if (D.45056_776 != 0)
    goto <bb 298>;
  else
    goto <bb 299>;

<bb 298>:
  D.45059_777 = mimp_761->actual_samples_per_second;
  pmap_760->rm_rate = D.45059_777;

<bb 299>:
  D.45060_778 = mimp_761->microseconds_per_packet;
  D.45061_779 = D.45060_778 / 1000;
  D.45062_780 = (uint32_t) D.45061_779;
  pmap_760->codec_ms = D.45062_780;
  D.45063_781 = mimp_761->bits_per_second;
  D.45064_782 = (uint32_t) D.45063_781;
  pmap_760->bitrate = D.45064_782;
  D.45066_783 = mmap_762->rm_params;
  if (D.45066_783 != 0B)
    goto <bb 300>;
  else
    goto <bb 301>;

<bb 300>:
  D.45066_784 = mmap_762->rm_params;
  # DEBUG __nptr => D.45066_784
  D.47922_1485 = strtol (D.45066_784, 0B, 10);
  D.47922_1538 = D.47922_1485;
  D.47922_785 = D.47922_1538;
  goto <bb 302>;

<bb 301>:
  D.47922_786 = 1;

<bb 302>:
  # D.47922_146 = PHI <D.47922_785(300), 1(301)>
  pmap_760->channels = D.47922_146;
  D.45049_787 = mmap_762->rm_encoding;
  D.45070_788 = strcasecmp (D.45049_787, "opus");
  if (D.45070_788 == 0)
    goto <bb 303>;
  else
    goto <bb 313>;

<bb 303>:
  D.45073_789 = pmap_760->channels;
  if (D.45073_789 == 1)
    goto <bb 304>;
  else
    goto <bb 305>;

<bb 304>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
  pmap_760->adv_channels = 1;
  goto <bb 306>;

<bb 305>:
  pmap_760->adv_channels = 2;

<bb 306>:
  D.45079_790 = mmap_762->rm_fmtp;
  # DEBUG s => D.45079_790
  if (D.45079_790 == 0B)
    goto <bb 309>;
  else
    goto <bb 307>;

<bb 307>:
  D.47926_1486 = *D.45079_790;
  if (D.47926_1486 == 0)
    goto <bb 309>;
  else
    goto <bb 308>;

<bb 308>:

<bb 309>:
  # D.47925_1487 = PHI <1(306), 1(307), 0(308)>
  D.47925_1539 = D.47925_1487;
  D.47925_791 = D.47925_1539;
  if (D.47925_791 == 0)
    goto <bb 310>;
  else
    goto <bb 312>;

<bb 310>:
  D.45079_792 = mmap_762->rm_fmtp;
  D.45082_793 = switch_stristr ("stereo=1", D.45079_792);
  if (D.45082_793 != 0B)
    goto <bb 311>;
  else
    goto <bb 312>;

<bb 311>:
  pmap_760->channels = 2;
  goto <bb 314>;

<bb 312>:
  pmap_760->channels = 1;
  goto <bb 314>;

<bb 313>:
  D.45073_794 = pmap_760->channels;
  pmap_760->adv_channels = D.45073_794;

<bb 314>:
  D.45085_795 = connection_124->c_address;
  D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
  pmap_760->remote_sdp_ip = D.45086_796;
  D.44697_797 = m_28->m_port;
  D.45087_798 = (short unsigned int) D.44697_797;
  pmap_760->remote_sdp_port = D.45087_798;
  D.45079_799 = mmap_762->rm_fmtp;
  D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
  pmap_760->rm_fmtp = D.45088_800;
  D.45053_801 = mmap_762->rm_pt;
  D.45054_802 = (unsigned char) D.45053_801;
  pmap_760->agreed_pt = D.45054_802;
  D.44655_803 = smh_186->num_negotiated_codecs;
  smh_186->negotiated_codecs[D.44655_803] = mimp_761;
  D.45089_804 = D.44655_803 + 1;
  smh_186->num_negotiated_codecs = D.45089_804;
  D.45053_805 = mmap_762->rm_pt;
  D.45054_806 = (unsigned char) D.45053_805;
  pmap_760->recv_pt = D.45054_806;
  j_807 = j_135 + 1;
  # DEBUG j => j_807

<bb 315>:
  # j_135 = PHI <0(293), j_807(314)>
  # DEBUG j => j_135
  if (j_135 < m_idx_107)
    goto <bb 294>;
  else
    goto <bb 316>;

<bb 316>:
  # match_12 = PHI <match_11(290), 1(315)>
  # DEBUG match => match_12
  if (match_12 != 0)
    goto <bb 317>;
  else
    goto <bb 328>;

<bb 317>:
  D.44750_808 = a_engine_188->cur_payload_map;
  D.44762_809 = D.44750_808->remote_sdp_port;
  D.44767_810 = (int) D.44762_809;
  switch_snprintf (&tmp, 50, "%d", D.44767_810);
  D.44530_811 = session_161(D)->channel;
  D.44750_812 = a_engine_188->cur_payload_map;
  D.44760_813 = D.44750_812->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);
  D.44530_814 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);
  D.44750_815 = a_engine_188->cur_payload_map;
  D.45092_816 = D.44750_815->recv_pt;
  D.45093_817 = (int) D.45092_816;
  switch_snprintf (&tmp, 50, "%d", D.45093_817);
  D.44530_818 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);
  D.45094_819 = &a_engine_188->read_codec;
  # DEBUG codec => D.45094_819
  if (D.45094_819 != 0B)
    goto <bb 318>;
  else
    goto <bb 322>;

<bb 318>:
  D.47934_1488 = D.45094_819->flags;
  D.47933_1489 = D.47934_1488 & 256;
  if (D.47933_1489 != 0)
    goto <bb 319>;
  else
    goto <bb 322>;

<bb 319>:
  D.47932_1490 = D.45094_819->mutex;
  if (D.47932_1490 != 0B)
    goto <bb 320>;
  else
    goto <bb 322>;

<bb 320>:
  D.47931_1491 = D.45094_819->codec_interface;
  if (D.47931_1491 != 0B)
    goto <bb 321>;
  else
    goto <bb 322>;

<bb 321>:
  D.47930_1492 = D.45094_819->implementation;
  if (D.47930_1492 != 0B)
    goto <bb 323>;
  else
    goto <bb 322>;

<bb 322>:

<bb 323>:
  # iftmp.104_1493 = PHI <1(321), 0(322)>
  D.47929_1494 = (switch_bool_t) iftmp.104_1493;
  D.47929_1540 = D.47929_1494;
  D.47929_820 = D.47929_1540;
  if (D.47929_820 != 0)
    goto <bb 324>;
  else
    goto <bb 325>;

<bb 324>:
  a_engine_188->reset_codec = 1;

<bb 325>:
  D.44471_821 = smh_186->mparams;
  D.45098_822 = D.44471_821->codec_flags;
  D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
  if (D.45099_823 == 0)
    goto <bb 326>;
  else
    goto <bb 327>;

<bb 326>:
  got_audio_824 = 1;
  # DEBUG got_audio => 1
  check_ice (smh_186, 0, sdp_198, m_28);
  goto <bb 328>;

<bb 327>:
  match_825 = 0;
  # DEBUG match => 0

<bb 328>:
  # match_13 = PHI <match_12(316), match_12(326), 0(327)>
  # got_audio_65 = PHI <got_audio_67(316), 1(326), got_audio_67(327)>
  # DEBUG got_audio => got_audio_65
  # DEBUG match => match_13
  if (best_te_20 == 0)
    goto <bb 329>;
  else
    goto <bb 332>;

<bb 329>:
  D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);
  if (D.45107_826 != 0)
    goto <bb 331>;
  else
    goto <bb 330>;

<bb 330>:
  D.44530_827 = session_161(D)->channel;
  D.45109_828 = switch_channel_test_flag (D.44530_827, 93);
  if (D.45109_828 != 0)
    goto <bb 331>;
  else
    goto <bb 332>;

<bb 331>:
  D.44471_829 = smh_186->mparams;
  D.45110_830 = D.44471_829->te;
  D.45111_831 = (int) D.45110_830;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);
  D.44471_832 = smh_186->mparams;
  best_te_833 = D.44471_832->te;
  # DEBUG best_te => best_te_833

<bb 332>:
  # best_te_21 = PHI <best_te_20(328), best_te_20(330), best_te_833(331)>
  # DEBUG best_te => best_te_21
  if (best_te_21 != 0)
    goto <bb 333>;
  else
    goto <bb 338>;

<bb 333>:
  D.45114_834 = switch_channel_direction (channel_162);
  if (D.45114_834 == 1)
    goto <bb 334>;
  else
    goto <bb 336>;

<bb 334>:
  D.44471_835 = smh_186->mparams;
  D.44471_835->te = best_te_21;
  # DEBUG D#11 => D.44471_835->te
  # DEBUG te => D#11
  D.44857_837 = (int) best_te_21;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);
  D.44530_838 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);
  D.44471_839 = smh_186->mparams;
  D.44471_839->dtmf_type = 0;
  D.44605_840 = a_engine_188->rtp_session;
  if (D.44605_840 != 0B)
    goto <bb 335>;
  else
    goto <bb 437>;

<bb 335>:
  D.44605_841 = a_engine_188->rtp_session;
  switch_rtp_set_telephony_event (D.44605_841, best_te_21);
  D.44530_842 = session_161(D)->channel;
  D.44857_843 = (int) best_te_21;
  switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_843);
  goto <bb 437>;

<bb 336>:
  D.44471_845 = smh_186->mparams;
  D.44471_845->te = best_te_21;
  D.45110_846 = D.44471_845->te;
  D.44471_845->recv_te = D.45110_846;
  te_847 = D.44471_845->recv_te;
  # DEBUG te => te_847
  D.45120_848 = (int) te_847;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);
  D.44530_849 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);
  D.44471_850 = smh_186->mparams;
  D.44471_850->dtmf_type = 0;
  D.44605_851 = a_engine_188->rtp_session;
  if (D.44605_851 != 0B)
    goto <bb 337>;
  else
    goto <bb 437>;

<bb 337>:
  D.44605_852 = a_engine_188->rtp_session;
  switch_rtp_set_telephony_event (D.44605_852, te_847);
  D.44530_853 = session_161(D)->channel;
  D.45120_854 = (int) te_847;
  switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_854);
  D.44605_855 = a_engine_188->rtp_session;
  switch_rtp_set_telephony_recv_event (D.44605_855, te_847);
  D.44530_856 = session_161(D)->channel;
  D.45120_857 = (int) te_847;
  switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_857);
  goto <bb 437>;

<bb 338>:
  D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
  D.45125_859 = switch_false (D.45124_858);
  if (D.45125_859 == 0)
    goto <bb 339>;
  else
    goto <bb 340>;

<bb 339>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
  D.44530_860 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);
  D.44471_861 = smh_186->mparams;
  D.44471_861->dtmf_type = 1;
  D.44471_863 = smh_186->mparams;
  D.44471_863->te = 0;
  D.45110_864 = D.44471_863->te;
  D.44471_863->recv_te = D.45110_864;
  # DEBUG D#12 => D.44471_863->recv_te
  # DEBUG te => D#12
  goto <bb 437>;

<bb 340>:
  D.44530_866 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);
  D.44471_867 = smh_186->mparams;
  D.44471_867->dtmf_type = 2;
  D.44471_869 = smh_186->mparams;
  D.44471_869->te = 0;
  D.45110_870 = D.44471_869->te;
  D.44471_869->recv_te = D.45110_870;
  # DEBUG D#13 => D.44471_869->recv_te
  # DEBUG te => D#13
  goto <bb 437>;

<bb 341>:
  D.44681_872 = m_28->m_type;
  if (D.44681_872 == 3)
    goto <bb 342>;
  else
    goto <bb 437>;

<bb 342>:
  D.44697_873 = m_28->m_port;
  if (D.44697_873 != 0)
    goto <bb 343>;
  else
    goto <bb 437>;

<bb 343>:
  # DEBUG mimp => 0B
  # DEBUG vmatch => 0
  nm_idx_876 = 0;
  # DEBUG nm_idx => 0
  m_idx_877 = 0;
  # DEBUG m_idx => 0
  memset (&matches, 0, 480);
  memset (&near_matches, 0, 480);
  D.44530_878 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);
  connection_879 = sdp_198->sdp_connection;
  # DEBUG connection => connection_879
  D.44546_880 = m_28->m_connections;
  if (D.44546_880 != 0B)
    goto <bb 344>;
  else
    goto <bb 345>;

<bb 344>:
  connection_881 = m_28->m_connections;
  # DEBUG connection => connection_881

<bb 345>:
  # connection_125 = PHI <connection_879(343), connection_881(344)>
  # DEBUG connection => connection_125
  if (connection_125 == 0B)
    goto <bb 346>;
  else
    goto <bb 347>;

<bb 346>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  match_882 = 0;
  # DEBUG match => 0
  goto <bb 439> (done);

<bb 347>:
  map_883 = m_28->m_rtpmaps;
  # DEBUG map => map_883
  goto <bb 413>;

<bb 348>:
  D.45137_884 = switch_rtp_has_dtls ();
  if (D.45137_884 != 0)
    goto <bb 349>;
  else
    goto <bb 359>;

<bb 349>:
  D.45140_885 = dtls_ok (session_161(D));
  if (D.45140_885 != 0)
    goto <bb 350>;
  else
    goto <bb 359>;

<bb 350>:
  attr_886 = m_28->m_attributes;
  # DEBUG attr => attr_886
  goto <bb 358>;

<bb 351>:
  D.44590_887 = attr_32->a_name;
  D.45143_888 = strcasecmp (D.44590_887, "fingerprint");
  if (D.45143_888 == 0)
    goto <bb 352>;
  else
    goto <bb 357>;

<bb 352>:
  D.44619_889 = attr_32->a_value;
  # DEBUG s => D.44619_889
  if (D.44619_889 == 0B)
    goto <bb 355>;
  else
    goto <bb 353>;

<bb 353>:
  D.47939_1495 = *D.44619_889;
  if (D.47939_1495 == 0)
    goto <bb 355>;
  else
    goto <bb 354>;

<bb 354>:

<bb 355>:
  # D.47938_1496 = PHI <1(352), 1(353), 0(354)>
  D.47938_1541 = D.47938_1496;
  D.47938_890 = D.47938_1541;
  if (D.47938_890 == 0)
    goto <bb 356>;
  else
    goto <bb 357>;

<bb 356>:
  got_video_crypto_891 = 1;
  # DEBUG got_video_crypto => 1

<bb 357>:
  # got_video_crypto_57 = PHI <got_video_crypto_58(351), got_video_crypto_58(355), 1(356)>
  # DEBUG got_video_crypto => got_video_crypto_57
  attr_892 = attr_32->a_next;
  # DEBUG attr => attr_892

<bb 358>:
  # attr_32 = PHI <attr_886(350), attr_892(357)>
  # got_video_crypto_58 = PHI <got_video_crypto_62(350), got_video_crypto_57(357)>
  # DEBUG got_video_crypto => got_video_crypto_58
  # DEBUG attr => attr_32
  if (attr_32 != 0B)
    goto <bb 351>;
  else
    goto <bb 359>;

<bb 359>:
  # got_video_crypto_59 = PHI <got_video_crypto_62(348), got_video_crypto_62(349), got_video_crypto_58(358)>
  # DEBUG got_video_crypto => got_video_crypto_59
  attr_893 = m_28->m_attributes;
  # DEBUG attr => attr_893
  goto <bb 389>;

<bb 360>:
  D.44590_894 = attr_33->a_name;
  D.45151_895 = strcasecmp (D.44590_894, "framerate");
  if (D.45151_895 == 0)
    goto <bb 361>;
  else
    goto <bb 362>;

<bb 361>:
  D.44619_896 = attr_33->a_value;
  if (D.44619_896 != 0B)
    goto <bb 388>;
  else
    goto <bb 362>;

<bb 362>:
  D.44590_897 = attr_33->a_name;
  D.45154_898 = strcasecmp (D.44590_897, "rtcp-fb");
  if (D.45154_898 == 0)
    goto <bb 363>;
  else
    goto <bb 370>;

<bb 363>:
  D.44619_899 = attr_33->a_value;
  # DEBUG s => D.44619_899
  if (D.44619_899 == 0B)
    goto <bb 366>;
  else
    goto <bb 364>;

<bb 364>:
  D.47943_1497 = *D.44619_899;
  if (D.47943_1497 == 0)
    goto <bb 366>;
  else
    goto <bb 365>;

<bb 365>:

<bb 366>:
  # D.47942_1498 = PHI <1(363), 1(364), 0(365)>
  D.47942_1542 = D.47942_1498;
  D.47942_900 = D.47942_1542;
  if (D.47942_900 == 0)
    goto <bb 367>;
  else
    goto <bb 388>;

<bb 367>:
  D.44619_901 = attr_33->a_value;
  D.45160_902 = switch_stristr ("fir", D.44619_901);
  if (D.45160_902 != 0B)
    goto <bb 368>;
  else
    goto <bb 369>;

<bb 368>:
  D.45163_903 = v_engine_189->fir;
  D.45164_904 = D.45163_903 + 1;
  v_engine_189->fir = D.45164_904;

<bb 369>:
  D.44471_905 = smh_186->mparams;
  D.44471_905->rtcp_video_interval_msec = "10000";
  goto <bb 388>;

<bb 370>:
  D.44590_906 = attr_33->a_name;
  D.45168_907 = strcasecmp (D.44590_906, "rtcp");
  if (D.45168_907 == 0)
    goto <bb 371>;
  else
    goto <bb 377>;

<bb 371>:
  D.44619_908 = attr_33->a_value;
  if (D.44619_908 != 0B)
    goto <bb 372>;
  else
    goto <bb 377>;

<bb 372>:
  __s2_len_909 = 1;
  # DEBUG __s2_len => 1
  __s1_910 = attr_33->a_value;
  # DEBUG __s1 => __s1_910
  D.45174_911 = *__s1_910;
  D.45175_912 = (int) D.45174_911;
  __result_916 = D.45175_912 + -49;
  # DEBUG __result => __result_916
  D.45180_918 = __result_916 == 0;
  D.45181_919 = D.45180_918;
  if (D.45181_919 != 0)
    goto <bb 373>;
  else
    goto <bb 374>;

<bb 373>:
  D.45184_920 = __s1_910 + 1;
  D.45185_921 = *D.45184_920;
  D.45186_922 = (int) D.45185_921;
  __result_926 = D.45186_922;
  # DEBUG __result => __result_926

<bb 374>:
  # __result_140 = PHI <__result_916(372), __result_926(373)>
  # DEBUG __result => __result_140
  __result_947 = __result_140;
  __result_948 = __result_947;
  __result_951 = __result_948;
  if (__result_951 == 0)
    goto <bb 375>;
  else
    goto <bb 377>;

<bb 375>:
  D.44530_952 = session_161(D)->channel;
  D.44619_953 = attr_33->a_value;
  switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_953, 1);
  D.44619_954 = attr_33->a_value;
  # DEBUG __nptr => D.44619_954
  D.47946_1499 = strtol (D.44619_954, 0B, 10);
  D.47946_1544 = D.47946_1499;
  D.47946_955 = D.47946_1544;
  D.45213_956 = (short unsigned int) D.47946_955;
  v_engine_189->remote_rtcp_port = D.45213_956;
  D.44471_957 = smh_186->mparams;
  D.45214_958 = D.44471_957->rtcp_video_interval_msec;
  if (D.45214_958 == 0B)
    goto <bb 376>;
  else
    goto <bb 388>;

<bb 376>:
  D.44471_959 = smh_186->mparams;
  D.44471_959->rtcp_video_interval_msec = "5000";
  goto <bb 388>;

<bb 377>:
  if (got_video_crypto_61 == 0)
    goto <bb 378>;
  else
    goto <bb 388>;

<bb 378>:
  D.44590_960 = attr_33->a_name;
  D.45219_961 = strcasecmp (D.44590_960, "crypto");
  if (D.45219_961 == 0)
    goto <bb 379>;
  else
    goto <bb 388>;

<bb 379>:
  D.44619_962 = attr_33->a_value;
  # DEBUG s => D.44619_962
  if (D.44619_962 == 0B)
    goto <bb 382>;
  else
    goto <bb 380>;

<bb 380>:
  D.47950_1500 = *D.44619_962;
  if (D.47950_1500 == 0)
    goto <bb 382>;
  else
    goto <bb 381>;

<bb 381>:

<bb 382>:
  # D.47949_1501 = PHI <1(379), 1(380), 0(381)>
  D.47949_1545 = D.47949_1501;
  D.47949_963 = D.47949_1545;
  if (D.47949_963 == 0)
    goto <bb 383>;
  else
    goto <bb 388>;

<bb 383>:
  D.44471_964 = smh_186->mparams;
  D.44821_965 = D.44471_964->ndlb;
  D.44822_966 = D.44821_965 & 4;
  if (D.44822_966 == 0)
    goto <bb 384>;
  else
    goto <bb 387>;

<bb 384>:
  D.44530_967 = session_161(D)->channel;
  D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);
  D.45228_969 = switch_true (D.45227_968);
  if (D.45228_969 == 0)
    goto <bb 385>;
  else
    goto <bb 387>;

<bb 385>:
  D.44666_970 = m_28->m_proto;
  D.44829_971 = D.44666_970 != 257;
  D.44830_972 = got_webrtc_78 == 0;
  D.44831_973 = D.44829_971 && D.44830_972;
  if (D.44831_973 != 0)
    goto <bb 386>;
  else
    goto <bb 387>;

<bb 386>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  match_974 = 0;
  # DEBUG match => 0
  goto <bb 439> (done);

<bb 387>:
  crypto_975 = attr_33->a_value;
  # DEBUG crypto => crypto_975
  # DEBUG __nptr => crypto_975
  crypto_tag_1502 = strtol (crypto_975, 0B, 10);
  crypto_tag_1547 = crypto_tag_1502;
  crypto_tag_976 = crypto_tag_1547;
  # DEBUG crypto_tag => NULL
  got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_976, sdp_type_546(D));
  # DEBUG got_video_crypto => got_video_crypto_977

<bb 388>:
  # got_video_crypto_60 = PHI <got_video_crypto_61(361), got_video_crypto_61(369), got_video_crypto_61(376), got_video_crypto_61(377), got_video_crypto_61(378), got_video_crypto_61(382), got_video_crypto_977(387), got_video_crypto_61(366), got_video_crypto_61(375)>
  # DEBUG got_video_crypto => got_video_crypto_60
  attr_978 = attr_33->a_next;
  # DEBUG attr => attr_978

<bb 389>:
  # attr_33 = PHI <attr_893(359), attr_978(388)>
  # got_video_crypto_61 = PHI <got_video_crypto_59(359), got_video_crypto_60(388)>
  # DEBUG got_video_crypto => got_video_crypto_61
  # DEBUG attr => attr_33
  if (attr_33 != 0B)
    goto <bb 360>;
  else
    goto <bb 390>;

<bb 390>:
  rm_encoding_979 = map_136->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_979
  if (rm_encoding_979 == 0B)
    goto <bb 391>;
  else
    goto <bb 392>;

<bb 391>:
  rm_encoding_980 = "";
  # DEBUG rm_encoding => ""

<bb 392>:
  # rm_encoding_137 = PHI <rm_encoding_979(390), ""(391)>
  # DEBUG rm_encoding => rm_encoding_137
  i_981 = 0;
  # DEBUG i => 0
  goto <bb 411>;

<bb 393>:
  i.99_982 = (unsigned int) i_139;
  D.45236_983 = i.99_982 * 4;
  D.45237_984 = codec_array_84 + D.45236_983;
  imp_985 = *D.45237_984;
  # DEBUG imp => imp_985
  D.45238_986 = imp_985->codec_type;
  if (D.45238_986 != 1)
    goto <bb 394>;
  else
    goto <bb 395>;

<bb 394>:
  // predicted unlikely by continue predictor.
  goto <bb 410>;

<bb 395>:
  D.44530_987 = session_161(D)->channel;
  D.45241_988 = switch_channel_direction (D.44530_987);
  if (D.45241_988 == 0)
    goto <bb 396>;
  else
    goto <bb 398>;

<bb 396>:
  D.44530_989 = session_161(D)->channel;
  D.45244_990 = switch_channel_test_flag (D.44530_989, 114);
  if (D.45244_990 != 0)
    goto <bb 397>;
  else
    goto <bb 398>;

<bb 397>:
  // predicted unlikely by continue predictor.
  goto <bb 410>;

<bb 398>:
  D.45247_991 = map_136->rm_pt;
  D.45248_992 = (int) D.45247_991;
  D.45249_993 = imp_985->iananame;
  D.45250_994 = imp_985->ianacode;
  D.45251_995 = (int) D.45250_994;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
  D.45255_996 = map_136->rm_encoding;
  # DEBUG s => D.45255_996
  if (D.45255_996 == 0B)
    goto <bb 401>;
  else
    goto <bb 399>;

<bb 399>:
  D.47957_1503 = *D.45255_996;
  if (D.47957_1503 == 0)
    goto <bb 401>;
  else
    goto <bb 400>;

<bb 400>:

<bb 401>:
  # D.47956_1504 = PHI <1(398), 1(399), 0(400)>
  D.47956_1548 = D.47956_1504;
  D.47956_997 = D.47956_1548;
  if (D.47956_997 != 0)
    goto <bb 403>;
  else
    goto <bb 402>;

<bb 402>:
  D.44471_998 = smh_186->mparams;
  D.44821_999 = D.44471_998->ndlb;
  D.44936_1000 = (int) D.44821_999;
  D.44937_1001 = D.44936_1000 & 1;
  D.44938_1002 = (_Bool) D.44937_1001;
  if (D.44938_1002 != 0)
    goto <bb 403>;
  else
    goto <bb 405>;

<bb 403>:
  D.45247_1003 = map_136->rm_pt;
  D.45248_1004 = (int) D.45247_1003;
  if (D.45248_1004 <= 95)
    goto <bb 404>;
  else
    goto <bb 405>;

<bb 404>:
  D.45247_1005 = map_136->rm_pt;
  D.45248_1006 = (int) D.45247_1005;
  D.45250_1007 = imp_985->ianacode;
  D.45251_1008 = (int) D.45250_1007;
  vmatch_1009 = D.45248_1006 == D.45251_1008;
  # DEBUG vmatch => vmatch_1009
  goto <bb 406>;

<bb 405>:
  D.45249_1010 = imp_985->iananame;
  D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
  vmatch_1012 = D.45259_1011 == 0;
  # DEBUG vmatch => vmatch_1012

<bb 406>:
  # vmatch_138 = PHI <vmatch_1009(404), vmatch_1012(405)>
  # DEBUG vmatch => vmatch_138
  if (vmatch_138 != 0)
    goto <bb 407>;
  else
    goto <bb 409>;

<bb 407>:
  D.45262_1013 = map_136->rm_rate;
  D.45263_1014 = imp_985->samples_per_second;
  if (D.45262_1013 == D.45263_1014)
    goto <bb 408>;
  else
    goto <bb 409>;

<bb 408>:
  matches[m_idx_110].imp = imp_985;
  matches[m_idx_110].map = map_136;
  D.45249_1015 = imp_985->iananame;
  D.45250_1016 = imp_985->ianacode;
  D.45251_1017 = (int) D.45250_1016;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
  m_idx_1018 = m_idx_110 + 1;
  # DEBUG m_idx => m_idx_1018

<bb 409>:
  # m_idx_108 = PHI <m_idx_110(406), m_idx_110(407), m_idx_1018(408)>
  # DEBUG m_idx => m_idx_108
  # DEBUG vmatch => 0

<bb 410>:
  # m_idx_109 = PHI <m_idx_110(394), m_idx_110(397), m_idx_108(409)>
  # DEBUG m_idx => m_idx_109
  i_1020 = i_139 + 1;
  # DEBUG i => i_1020

<bb 411>:
  # m_idx_110 = PHI <m_idx_111(392), m_idx_109(410)>
  # i_139 = PHI <0(392), i_1020(410)>
  # DEBUG i => i_139
  # DEBUG m_idx => m_idx_110
  if (i_139 < total_codecs_85)
    goto <bb 393>;
  else
    goto <bb 412>;

<bb 412>:
  map_1021 = map_136->rm_next;
  # DEBUG map => map_1021

<bb 413>:
  # got_video_crypto_62 = PHI <got_video_crypto_64(347), got_video_crypto_61(412)>
  # m_idx_111 = PHI <0(347), m_idx_110(412)>
  # map_136 = PHI <map_883(347), map_1021(412)>
  # DEBUG map => map_136
  # DEBUG m_idx => m_idx_111
  # DEBUG got_video_crypto => got_video_crypto_62
  if (map_136 != 0B)
    goto <bb 348>;
  else
    goto <bb 414>;

<bb 414>:
  D.45001_1022 = smh_186->crypto_mode;
  D.45002_1023 = D.45001_1022 == 1;
  D.45266_1024 = got_video_crypto_62 <= 0;
  D.45267_1025 = D.45002_1023 && D.45266_1024;
  if (D.45267_1025 != 0)
    goto <bb 415>;
  else
    goto <bb 416>;

<bb 415>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
  # DEBUG vmatch => 0
  m_idx_1027 = 0;
  # DEBUG m_idx => 0

<bb 416>:
  # m_idx_112 = PHI <m_idx_111(414), 0(415)>
  # DEBUG m_idx => m_idx_112
  if (m_idx_112 != 0)
    goto <bb 417>;
  else
    goto <bb 437>;

<bb 417>:
  # DEBUG j => 0
  if (greedy_47 != 0)
    goto <bb 418>;
  else
    goto <bb 419>;

<bb 418>:
  greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);

<bb 419>:
  # DEBUG vmatch => 1
  v_engine_189->codec_negotiated = 1;
  j_1030 = 0;
  # DEBUG j => 0
  goto <bb 424>;

<bb 420>:
  D.45274_1031 = matches[j_141].map;
  D.45275_1032 = D.45274_1031->rm_encoding;
  D.45274_1033 = matches[j_141].map;
  D.45276_1034 = D.45274_1033->rm_fmtp;
  D.45274_1035 = matches[j_141].map;
  D.45277_1036 = D.45274_1035->rm_pt;
  D.45278_1037 = (uint32_t) D.45277_1036;
  D.45279_1038 = matches[j_141].imp;
  D.45280_1039 = D.45279_1038->samples_per_second;
  D.45279_1040 = matches[j_141].imp;
  D.45281_1041 = D.45279_1040->microseconds_per_packet;
  D.45282_1042 = D.45281_1041 / 1000;
  D.45283_1043 = (uint32_t) D.45282_1042;
  pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
  # DEBUG pmap => pmap_1044
  if (j_141 == 0)
    goto <bb 421>;
  else
    goto <bb 423>;

<bb 421>:
  v_engine_189->cur_payload_map = pmap_1044;
  D.45286_1045 = v_engine_189->cur_payload_map;
  D.45286_1045->current = 1;
  D.45287_1046 = v_engine_189->rtp_session;
  if (D.45287_1046 != 0B)
    goto <bb 422>;
  else
    goto <bb 423>;

<bb 422>:
  D.45287_1047 = v_engine_189->rtp_session;
  D.45290_1048 = pmap_1044->pt;
  switch_rtp_set_default_payload (D.45287_1047, D.45290_1048);

<bb 423>:
  mimp_1049 = matches[j_141].imp;
  # DEBUG mimp => mimp_1049
  map_1050 = matches[j_141].map;
  # DEBUG map => map_1050
  D.45255_1051 = map_1050->rm_encoding;
  D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
  pmap_1044->rm_encoding = D.45291_1052;
  D.45247_1053 = map_1050->rm_pt;
  D.45292_1054 = (unsigned char) D.45247_1053;
  pmap_1044->recv_pt = D.45292_1054;
  D.45262_1055 = map_1050->rm_rate;
  pmap_1044->rm_rate = D.45262_1055;
  D.45293_1056 = mimp_1049->microseconds_per_packet;
  D.45294_1057 = D.45293_1056 / 1000;
  D.45295_1058 = (uint32_t) D.45294_1057;
  pmap_1044->codec_ms = D.45295_1058;
  D.45085_1059 = connection_125->c_address;
  D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);
  pmap_1044->remote_sdp_ip = D.45296_1060;
  D.44697_1061 = m_28->m_port;
  D.45087_1062 = (short unsigned int) D.44697_1061;
  pmap_1044->remote_sdp_port = D.45087_1062;
  D.45297_1063 = map_1050->rm_fmtp;
  D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
  pmap_1044->rm_fmtp = D.45298_1064;
  D.45247_1065 = map_1050->rm_pt;
  D.45292_1066 = (unsigned char) D.45247_1065;
  pmap_1044->agreed_pt = D.45292_1066;
  j_1067 = j_141 + 1;
  # DEBUG j => j_1067

<bb 424>:
  # j_141 = PHI <0(419), j_1067(423)>
  # DEBUG j => j_141
  if (j_141 < m_idx_112)
    goto <bb 420>;
  else
    goto <bb 425>;

<bb 425>:
  D.45286_1068 = v_engine_189->cur_payload_map;
  D.45299_1069 = D.45286_1068->remote_sdp_port;
  D.45300_1070 = (int) D.45299_1069;
  switch_snprintf (&tmp, 50, "%d", D.45300_1070);
  D.44530_1071 = session_161(D)->channel;
  D.45286_1072 = v_engine_189->cur_payload_map;
  D.45301_1073 = D.45286_1072->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);
  D.44530_1074 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);
  D.44530_1075 = session_161(D)->channel;
  D.45286_1076 = v_engine_189->cur_payload_map;
  D.45302_1077 = D.45286_1076->rm_fmtp;
  switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);
  D.45286_1078 = v_engine_189->cur_payload_map;
  D.45303_1079 = D.45286_1078->agreed_pt;
  D.45304_1080 = (int) D.45303_1079;
  switch_snprintf (&tmp, 50, "%d", D.45304_1080);
  D.44530_1081 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);
  switch_core_media_check_video_codecs (session_161(D));
  D.45286_1082 = v_engine_189->cur_payload_map;
  D.45305_1083 = D.45286_1082->recv_pt;
  D.45306_1084 = (int) D.45305_1083;
  switch_snprintf (&tmp, 50, "%d", D.45306_1084);
  D.44530_1085 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);
  D.45307_1086 = match_16 == 0;
  D.45309_1088 = D.45307_1086;
  if (D.45309_1088 != 0)
    goto <bb 426>;
  else
    goto <bb 427>;

<bb 426>:
  match_1089 = 1;
  # DEBUG match => 1

<bb 427>:
  # match_14 = PHI <match_16(425), 1(426)>
  # DEBUG match => match_14
  D.45312_1090 = &v_engine_189->read_codec;
  # DEBUG codec => D.45312_1090
  if (D.45312_1090 != 0B)
    goto <bb 428>;
  else
    goto <bb 432>;

<bb 428>:
  D.47965_1505 = D.45312_1090->flags;
  D.47964_1506 = D.47965_1505 & 256;
  if (D.47964_1506 != 0)
    goto <bb 429>;
  else
    goto <bb 432>;

<bb 429>:
  D.47963_1507 = D.45312_1090->mutex;
  if (D.47963_1507 != 0B)
    goto <bb 430>;
  else
    goto <bb 432>;

<bb 430>:
  D.47962_1508 = D.45312_1090->codec_interface;
  if (D.47962_1508 != 0B)
    goto <bb 431>;
  else
    goto <bb 432>;

<bb 431>:
  D.47961_1509 = D.45312_1090->implementation;
  if (D.47961_1509 != 0B)
    goto <bb 433>;
  else
    goto <bb 432>;

<bb 432>:

<bb 433>:
  # iftmp.104_1510 = PHI <1(431), 0(432)>
  D.47960_1511 = (switch_bool_t) iftmp.104_1510;
  D.47960_1549 = D.47960_1511;
  D.47960_1091 = D.47960_1549;
  if (D.47960_1091 != 0)
    goto <bb 434>;
  else
    goto <bb 435>;

<bb 434>:
  v_engine_189->reset_codec = 1;

<bb 435>:
  D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);
  if (D.45316_1092 == 0)
    goto <bb 436>;
  else
    goto <bb 437>;

<bb 436>:
  check_ice (smh_186, 1, sdp_198, m_28);

<bb 437>:
  # match_15 = PHI <match_13(339), match_16(341), match_16(342), match_16(416), match_14(435), match_14(436), match_13(336), match_13(337), match_13(334), match_13(335), match_13(340)>
  # best_te_22 = PHI <best_te_21(339), best_te_23(341), best_te_23(342), best_te_23(416), best_te_23(435), best_te_23(436), best_te_21(336), best_te_21(337), best_te_21(334), best_te_21(335), best_te_21(340)>
  # cng_pt_26 = PHI <cng_pt_25(339), cng_pt_27(341), cng_pt_27(342), cng_pt_27(416), cng_pt_27(435), cng_pt_27(436), cng_pt_25(336), cng_pt_25(337), cng_pt_25(334), cng_pt_25(335), cng_pt_25(340)>
  # got_crypto_55 = PHI <got_crypto_54(339), got_crypto_56(341), got_crypto_56(342), got_crypto_56(416), got_crypto_56(435), got_crypto_56(436), got_crypto_54(336), got_crypto_54(337), got_crypto_54(334), got_crypto_54(335), got_crypto_54(340)>
  # got_video_crypto_63 = PHI <got_video_crypto_64(339), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_62(416), got_video_crypto_62(435), got_video_crypto_62(436), got_video_crypto_64(336), got_video_crypto_64(337), got_video_crypto_64(334), got_video_crypto_64(335), got_video_crypto_64(340)>
  # got_audio_66 = PHI <got_audio_65(339), got_audio_67(341), got_audio_67(342), got_audio_67(416), got_audio_67(435), got_audio_67(436), got_audio_65(336), got_audio_65(337), got_audio_65(334), got_audio_65(335), got_audio_65(340)>
  # codec_ms_94 = PHI <codec_ms_93(339), codec_ms_95(341), codec_ms_95(342), codec_ms_95(416), codec_ms_95(435), codec_ms_95(436), codec_ms_93(336), codec_ms_93(337), codec_ms_93(334), codec_ms_93(335), codec_ms_93(340)>
  # m_idx_113 = PHI <m_idx_107(339), m_idx_114(341), m_idx_114(342), m_idx_112(416), m_idx_112(435), m_idx_112(436), m_idx_107(336), m_idx_107(337), m_idx_107(334), m_idx_107(335), m_idx_107(340)>
  # nm_idx_121 = PHI <nm_idx_120(339), nm_idx_122(341), nm_idx_122(342), 0(416), 0(435), 0(436), nm_idx_120(336), nm_idx_120(337), nm_idx_120(334), nm_idx_120(335), nm_idx_120(340)>
  # DEBUG nm_idx => nm_idx_121
  # DEBUG m_idx => m_idx_113
  # DEBUG codec_ms => codec_ms_94
  # DEBUG got_audio => got_audio_66
  # DEBUG got_video_crypto => got_video_crypto_63
  # DEBUG got_crypto => got_crypto_55
  # DEBUG cng_pt => cng_pt_26
  # DEBUG best_te => best_te_22
  # DEBUG match => match_15
  m_1093 = m_28->m_next;
  # DEBUG m => m_1093

<bb 438>:
  # match_16 = PHI <0(94), match_15(437)>
  # best_te_23 = PHI <0(94), best_te_22(437)>
  # cng_pt_27 = PHI <0(94), cng_pt_26(437)>
  # m_28 = PHI <m_370(94), m_1093(437)>
  # got_crypto_56 = PHI <0(94), got_crypto_55(437)>
  # got_video_crypto_64 = PHI <0(94), got_video_crypto_63(437)>
  # got_audio_67 = PHI <0(94), got_audio_66(437)>
  # got_avp_69 = PHI <0(94), got_avp_68(437)>
  # got_video_avp_71 = PHI <0(94), got_video_avp_70(437)>
  # got_video_savp_73 = PHI <0(94), got_video_savp_72(437)>
  # got_savp_75 = PHI <0(94), got_savp_74(437)>
  # got_udptl_77 = PHI <0(94), got_udptl_76(437)>
  # got_webrtc_79 = PHI <0(94), got_webrtc_78(437)>
  # codec_ms_95 = PHI <0(94), codec_ms_94(437)>
  # m_idx_114 = PHI <0(94), m_idx_113(437)>
  # nm_idx_122 = PHI <0(94), nm_idx_121(437)>
  # DEBUG nm_idx => nm_idx_122
  # DEBUG m_idx => m_idx_114
  # DEBUG codec_ms => codec_ms_95
  # DEBUG got_webrtc => got_webrtc_79
  # DEBUG got_udptl => got_udptl_77
  # DEBUG got_savp => got_savp_75
  # DEBUG got_video_savp => got_video_savp_73
  # DEBUG got_video_avp => got_video_avp_71
  # DEBUG got_avp => got_avp_69
  # DEBUG got_audio => got_audio_67
  # DEBUG got_video_crypto => got_video_crypto_64
  # DEBUG got_crypto => got_crypto_56
  # DEBUG m => m_28
  # DEBUG cng_pt => cng_pt_27
  # DEBUG best_te => best_te_23
  # DEBUG match => match_16
  if (m_28 != 0B)
    goto <bb 95>;
  else
    goto <bb 439> (done);

  # match_17 = PHI <1(114), 0(116), 0(134), 1(145), 0(179), 0(185), 0(189), 0(346), 0(386), match_16(438)>
done:
  # DEBUG match => match_17
  if (parser_196 != 0B)
    goto <bb 440>;
  else
    goto <bb 441>;

<bb 440>:
  sdp_parser_free (parser_196);

<bb 441>:
  D.44471_1094 = smh_186->mparams;
  D.44471_1094->cng_pt = cng_pt_27;
  match_1095 = match_17;

<bb 442>:
  # match_142 = PHI <0(5), 0(7), 0(9), match_1095(441)>
  return match_142;

}
