
;; Function switch_core_media_negotiate_sdp (switch_core_media_negotiate_sdp)

Immediate_uses: 

match_1 : --> single use.
match_2 = PHI <match_1(269), 1(270), 1(271), 1(272)>
# DEBUG match => match_1

match_2 : --> single use.
# DEBUG match => match_2
if (match_2 != 0)
# DEBUG match => match_2

pretmp.881_3 : --> no uses.

pretmp.914_4 : --> no uses.

pretmp.915_5 : --> no uses.

pretmp.884_6 : --> no uses.

match_7 : -->2 uses.
match_1902 = PHI <match_7(294), match_1801(223)>
match_1892 = PHI <match_7(293)>
# DEBUG match => match_7
# DEBUG match => match_7

pretmp.931_8 : --> no uses.

match_9 : -->2 uses.
match_12 = PHI <match_9(309), match_9(311), 0(297)>
match_12 = PHI <match_9(309), match_9(311), 0(297)>
# DEBUG match => match_9
# DEBUG match => match_9
# DEBUG match => match_9

pretmp.896_10 : --> no uses.

pretmp.889_11 : --> no uses.

match_12 : -->2 uses.
match_1713 = PHI <match_12(334), 1(474)>
if (match_12 != 0)
# DEBUG match => match_12

match_13 : -->6 uses.
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
# DEBUG match => match_13

match_14 : -->2 uses.
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
# DEBUG match => match_14

match_15 : -->2 uses.
match_1801 = PHI <match_15(455), 0(125)>
match_1686 = PHI <match_15(454)>
# DEBUG match => match_15
# DEBUG match => match_15

pretmp.900_16 : --> no uses.

match_17 : --> single use.
match_142 = PHI <0(4), 0(5), 0(7), match_17(457)>
# DEBUG match => match_17

pretmp.879_18 : --> no uses.

best_te_19 : -->2 uses.
best_te_1899 = PHI <best_te_19(294), best_te_681(223)>
best_te_1685 = PHI <best_te_19(293)>
# DEBUG best_te => best_te_19
# DEBUG best_te => best_te_19

pretmp.930_20 : --> no uses.

pretmp.973_21 : --> no uses.

best_te_22 : --> single use.
best_te_681 = PHI <best_te_22(455), 0(125)>
# DEBUG best_te => best_te_22
# DEBUG best_te => best_te_22

pretmp.901_23 : --> no uses.

cng_pt_24 : -->2 uses.
cng_pt_1668 = PHI <cng_pt_24(294), cng_pt_1718(223)>
cng_pt_1682 = PHI <cng_pt_24(293)>
# DEBUG cng_pt => cng_pt_24
# DEBUG cng_pt => cng_pt_24

pretmp.929_25 : --> no uses.

cng_pt_26 : -->2 uses.
cng_pt_1718 = PHI <cng_pt_26(455), 0(125)>
cng_pt_1646 = PHI <cng_pt_26(454)>
# DEBUG cng_pt => cng_pt_26
# DEBUG cng_pt => cng_pt_26

pretmp.907_27 : --> no uses.

pretmp.885_28 : --> no uses.

pretmp.979_29 : --> no uses.

pretmp.960_30 : --> no uses.

pretmp.953_31 : --> no uses.

pretmp.918_32 : --> no uses.

pretmp.913_33 : --> no uses.

ptime_34 : -->2 uses.
ptime_1476 = PHI <dptime_1036(482), ptime_34(214)>
ptime_376 = PHI <ptime_34(213)>
# DEBUG ptime => ptime_34
# DEBUG ptime => ptime_34

pretmp.952_35 : --> no uses.

dptime_36 : -->2 uses.
dptime_1672 = PHI <dptime_36(81), 0(64)>
dptime_255 = PHI <dptime_36(80)>
# DEBUG dptime => dptime_36
# DEBUG dptime => dptime_36

pretmp.978_37 : --> no uses.

maxptime_38 : -->2 uses.
maxptime_1471 = PHI <dmaxptime_1006(482), maxptime_38(214)>
maxptime_917 = PHI <maxptime_38(213)>
# DEBUG maxptime => maxptime_38
# DEBUG maxptime => maxptime_38

pretmp.951_39 : --> no uses.

dmaxptime_40 : -->2 uses.
dmaxptime_1866 = PHI <dmaxptime_40(81), 0(64)>
dmaxptime_913 = PHI <dmaxptime_40(80)>
# DEBUG dmaxptime => dmaxptime_40
# DEBUG dmaxptime => dmaxptime_40

pretmp.977_41 : --> no uses.

sendonly_42 : -->2 uses.
sendonly_1007 = PHI <sendonly_864(82), sendonly_42(63)>
sendonly_1690 = PHI <sendonly_43(81), sendonly_42(64)>
# DEBUG sendonly => sendonly_42
# DEBUG sendonly => sendonly_42

sendonly_43 : -->2 uses.
sendonly_1690 = PHI <sendonly_43(81), sendonly_42(64)>
sendonly_864 = PHI <sendonly_43(80)>
# DEBUG sendonly => sendonly_43
# DEBUG sendonly => sendonly_43

pretmp.976_44 : --> no uses.

recvonly_45 : -->2 uses.
recvonly_1895 = PHI <recvonly_45(81), 0(64)>
recvonly_870 = PHI <recvonly_45(80)>
# DEBUG recvonly => recvonly_45
# DEBUG recvonly => recvonly_45

pretmp.975_46 : --> no uses.

greedy_47 : -->2 uses.
if (greedy_47 != 0)
if (greedy_47 != 0)
# DEBUG greedy => greedy_47

pretmp.958_48 : --> no uses.

.MEM_49 : -->2 uses.
.MEM_1136 = PHI <.MEM_1303(229), .MEM_1306(234), .MEM_1302(228), .MEM_1304(235), .MEM_49(291), .MEM_1304(233)>
.MEM_1138 = PHI <.MEM_1322(287), .MEM_1136(295), .MEM_49(292), .MEM_1580(222)>

got_crypto_50 : -->2 uses.
got_crypto_361 = PHI <got_crypto_50(184), got_crypto_1867(178)>
got_crypto_898 = PHI <got_crypto_50(183)>
# DEBUG got_crypto => got_crypto_50
# DEBUG got_crypto => got_crypto_50

pretmp.959_51 : --> no uses.

pretmp.879_52 : --> no uses.

got_crypto_53 : -->2 uses.
got_crypto_1119 = PHI <got_crypto_141(482), got_crypto_53(214)>
got_crypto_1805 = PHI <got_crypto_53(213)>
# DEBUG got_crypto => got_crypto_53
# DEBUG got_crypto => got_crypto_53

pretmp.950_54 : --> no uses.

got_crypto_55 : --> single use.
got_crypto_1867 = PHI <got_crypto_55(455), 0(125)>
# DEBUG got_crypto => got_crypto_55
# DEBUG got_crypto => got_crypto_55

pretmp.885_56 : --> no uses.

got_video_crypto_57 : -->2 uses.
got_video_crypto_1739 = PHI <got_video_crypto_57(378), got_video_crypto_556(372)>
got_video_crypto_519 = PHI <got_video_crypto_57(377)>
# DEBUG got_video_crypto => got_video_crypto_57
# DEBUG got_video_crypto => got_video_crypto_57

pretmp.917_58 : --> no uses.

pretmp.902_59 : --> no uses.

got_video_crypto_60 : -->2 uses.
got_video_crypto_1886 = PHI <got_video_crypto_744(484), got_video_crypto_60(411)>
got_video_crypto_1804 = PHI <got_video_crypto_60(410)>
# DEBUG got_video_crypto => got_video_crypto_60
# DEBUG got_video_crypto => got_video_crypto_60

pretmp.912_61 : --> no uses.

got_video_crypto_63 : --> single use.
got_video_crypto_1675 = PHI <got_video_crypto_63(455), 0(125)>
# DEBUG got_video_crypto => got_video_crypto_63
# DEBUG got_video_crypto => got_video_crypto_63

pretmp.885_64 : --> no uses.

got_audio_65 : -->6 uses.
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
# DEBUG got_audio => got_audio_65

got_audio_66 : --> single use.
got_audio_1694 = PHI <got_audio_66(455), 0(125)>
# DEBUG got_audio => got_audio_66
# DEBUG got_audio => got_audio_66

pretmp.885_67 : --> no uses.

got_avp_68 : -->2 uses.
got_avp_1860 = PHI <got_avp_68(140), got_avp_1741(141), got_avp_1741(142)>
got_avp_1741 = PHI <got_avp_68(140), got_avp_672(139)>
# DEBUG got_avp => got_avp_68

pretmp.880_69 : --> no uses.

got_savp_74 : -->2 uses.
got_savp_1740 = PHI <got_savp_74(140), got_savp_1712(141), got_savp_1712(142)>
got_savp_1712 = PHI <got_savp_74(140), got_savp_512(139)>
# DEBUG got_savp => got_savp_74

pretmp.897_75 : --> no uses.

pretmp.874_76 : --> no uses.

got_webrtc_78 : -->4 uses.
got_webrtc_452 = PHI <got_webrtc_78(455), 0(125)>
D.44830_973 = got_webrtc_78 == 0;
D.44830_541 = got_webrtc_78 == 0;
# DEBUG got_webrtc => got_webrtc_78
D.44839_552 = got_avp_1860 | got_webrtc_78;
# DEBUG got_webrtc => got_webrtc_78

pretmp.878_79 : --> no uses.

scrooge_80 : --> single use.
if (scrooge_80 != 0)
# DEBUG scrooge => scrooge_80

reneg_81 : --> single use.
if (reneg_81 != 0)
# DEBUG reneg => reneg_81

reneg_82 : --> single use.
if (reneg_82 == 0)
# DEBUG reneg => reneg_82
# DEBUG reneg => reneg_82

pretmp.874_83 : --> no uses.

codec_array_84 : -->4 uses.
greedy_sort (smh_186, &matches, m_idx_907, codec_array_84, total_codecs_85);
D.45238_985 = codec_array_84 + D.45237_984;
D.44920_629 = codec_array_84 + D.44919_628;
greedy_sort (smh_186, &matches, m_idx_1716, codec_array_84, total_codecs_85);
# DEBUG codec_array => codec_array_84

total_codecs_85 : -->6 uses.
greedy_sort (smh_186, &matches, m_idx_907, codec_array_84, total_codecs_85);
D.44999_625 = total_codecs_85 > i_711;
D.44999_1610 = total_codecs_85 > 0;
if (total_codecs_85 > i_1021)
if (total_codecs_85 > 0)
greedy_sort (smh_186, &matches, m_idx_1716, codec_array_84, total_codecs_85);
# DEBUG total_codecs => total_codecs_85

pretmp.880_86 : --> no uses.

codec_ms_87 : -->2 uses.
codec_ms_88 = PHI <codec_ms_87(242), codec_ms_87(244), 33(243)>
codec_ms_88 = PHI <codec_ms_87(242), codec_ms_87(244), 33(243)>
# DEBUG codec_ms => codec_ms_87

codec_ms_88 : -->3 uses.
codec_ms_90 = PHI <39(249), codec_ms_88(470), codec_ms_89(255), codec_ms_89(254), 32(247), codec_ms_88(248)>
codec_ms_89 = PHI <codec_ms_88(252), codec_ms_618(253)>
codec_ms_90 = PHI <39(249), codec_ms_88(470), codec_ms_89(255), codec_ms_89(254), 32(247), codec_ms_88(248)>
# DEBUG codec_ms => codec_ms_88

codec_ms_89 : -->2 uses.
codec_ms_90 = PHI <39(249), codec_ms_88(470), codec_ms_89(255), codec_ms_89(254), 32(247), codec_ms_88(248)>
codec_ms_90 = PHI <39(249), codec_ms_88(470), codec_ms_89(255), codec_ms_89(254), 32(247), codec_ms_88(248)>
# DEBUG codec_ms => codec_ms_89

codec_ms_90 : -->6 uses.
codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>
D.44994_693 = codec_ms_90 * 1000;
codec_ms_1710 = PHI <codec_ms_90(291)>
codec_ms_1734 = PHI <codec_ms_90(286)>
D.44991_691 = codec_ms_90 != 0;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);
# DEBUG codec_ms => codec_ms_90

codec_ms_91 : -->2 uses.
codec_ms_1721 = PHI <codec_ms_91(294), codec_ms_477(223)>
codec_ms_1803 = PHI <codec_ms_91(293)>
# DEBUG codec_ms => codec_ms_91
# DEBUG codec_ms => codec_ms_91

pretmp.928_92 : --> no uses.

codec_ms_93 : -->7 uses.
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45014_729, near_rate_145, codec_ms_93);
# DEBUG codec_ms => codec_ms_93

codec_ms_94 : --> single use.
codec_ms_477 = PHI <codec_ms_94(455), 0(125)>
# DEBUG codec_ms => codec_ms_94
# DEBUG codec_ms => codec_ms_94

remote_codec_rate_96 : -->9 uses.
remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
D.44969_676 = remote_codec_rate_96 != 0;
remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
D.44974_679 = remote_codec_rate_96 != codec_rate_633;
remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
remote_codec_rate.92_701 = (int) remote_codec_rate_96;
if (remote_codec_rate_96 != codec_rate_633)
# DEBUG remote_codec_rate => remote_codec_rate_96

remote_codec_rate_97 : --> single use.
remote_codec_rate_1494 = PHI <remote_codec_rate_97(289), remote_codec_rate_596(257)>
# DEBUG remote_codec_rate => remote_codec_rate_97
# DEBUG remote_codec_rate => remote_codec_rate_97

pretmp.936_98 : --> no uses.

fmtp_remote_codec_rate_99 : -->3 uses.
remote_codec_rate_96 = PHI <remote_codec_rate_1494(262), remote_codec_rate_1494(267), fmtp_remote_codec_rate_99(268)>
iftmp.93_766 = fmtp_remote_codec_rate_99 == D.44948_659;
if (fmtp_remote_codec_rate_99 != 0)
# DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99

m_idx_100 : -->2 uses.
m_idx_1488 = PHI <m_idx_100(289), m_idx_793(257)>
m_idx_527 = PHI <m_idx_100(288)>
# DEBUG m_idx => m_idx_100
# DEBUG m_idx => m_idx_100

pretmp.935_101 : --> no uses.

m_idx_102 : -->3 uses.
m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
m_idx_529 = PHI <m_idx_102(291)>
if (m_idx_102 > 29)
# DEBUG m_idx => m_idx_102

m_idx_103 : -->2 uses.
m_idx_793 = PHI <m_idx_103(294), m_idx_1870(223)>
m_idx_1802 = PHI <m_idx_103(293)>
# DEBUG m_idx => m_idx_103
# DEBUG m_idx => m_idx_103

pretmp.927_104 : --> no uses.

m_idx_105 : -->4 uses.
m_idx_1905 = PHI <0(309), m_idx_105(311), 0(297)>
m_idx_1716 = PHI <m_idx_105(311), 1(308)>
# DEBUG m_idx => m_idx_105
if (m_idx_105 != 0)
D.45008_720 = m_idx_105 == 0;
# DEBUG m_idx => m_idx_105
# DEBUG m_idx => m_idx_105

pretmp.895_106 : --> no uses.

pretmp.888_107 : --> no uses.

m_idx_109 : -->2 uses.
m_idx_911 = PHI <m_idx_109(429), m_idx_820(416)>
m_idx_538 = PHI <m_idx_109(428)>
# DEBUG m_idx => m_idx_109
# DEBUG m_idx => m_idx_109

connection_110 : --> single use.
D.45086_1060 = connection_110->c_address;

pretmp.899_111 : --> no uses.

pretmp.906_112 : --> no uses.

m_idx_113 : --> single use.
m_idx_1870 = PHI <m_idx_113(455), 0(125)>
# DEBUG m_idx => m_idx_113
# DEBUG m_idx => m_idx_113

.MEM_114 : --> single use.
.MEM_1109 = PHI <.MEM_114(482), .MEM_1125(214)>

nm_idx_115 : -->2 uses.
nm_idx_1140 = PHI <nm_idx_115(289), nm_idx_1756(257)>
nm_idx_1649 = PHI <nm_idx_115(288)>
# DEBUG nm_idx => nm_idx_115
# DEBUG nm_idx => nm_idx_115

pretmp.934_116 : --> no uses.

nm_idx_117 : -->2 uses.
nm_idx_1756 = PHI <nm_idx_117(294), nm_idx_1750(223)>
nm_idx_683 = PHI <nm_idx_117(293)>
# DEBUG nm_idx => nm_idx_117
# DEBUG nm_idx => nm_idx_117

pretmp.926_118 : --> no uses.

nm_idx_119 : -->5 uses.
nm_idx_1745 = PHI <nm_idx_119(309), nm_idx_119(311), 0(297)>
nm_idx_1745 = PHI <nm_idx_119(309), nm_idx_119(311), 0(297)>
nm_idx_842 = PHI <nm_idx_1745(334), nm_idx_119(474)>
if (nm_idx_119 > j_737)
D.45009_721 = nm_idx_119 != 0;
# DEBUG nm_idx => nm_idx_119
# DEBUG nm_idx => nm_idx_119

pretmp.894_120 : --> no uses.

nm_idx_121 : --> single use.
nm_idx_1750 = PHI <nm_idx_121(455), 0(125)>
# DEBUG nm_idx => nm_idx_121
# DEBUG nm_idx => nm_idx_121

pretmp.878_122 : --> no uses.

pretmp.880_124 : --> no uses.

pretmp.898_125 : --> no uses.

pass_126 : -->3 uses.
pass_1849 = PHI <0(151), pass_1665(154), pass_126(153)>
pass_1665 = PHI <pass_126(153), 2(151)>
if (pass_126 == 2)
# DEBUG pass => pass_126

pretmp.876_127 : --> no uses.

pretmp.925_128 : --> no uses.

pretmp.933_129 : --> no uses.

rm_encoding_130 : -->5 uses.
D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
D.44945_658 = strcasecmp (rm_encoding_130, D.44927_657);
D.44863_571 = strcasecmp (rm_encoding_130, "CN");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);
D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
# DEBUG rm_encoding => rm_encoding_130

map_bit_rate_131 : -->2 uses.
map_bit_rate_132 = PHI <32001(249), map_bit_rate_1481(470), map_bit_rate_131(255), map_bit_rate_131(254), 13332(247), 32099(248)>
map_bit_rate_132 = PHI <32001(249), map_bit_rate_1481(470), map_bit_rate_131(255), map_bit_rate_131(254), 13332(247), 32099(248)>
# DEBUG map_bit_rate => map_bit_rate_131

map_bit_rate_132 : -->3 uses.
D.44957_668 = map_bit_rate_132 != bit_rate_632;
D.44956_667 = map_bit_rate_132 != 0;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);
# DEBUG map_bit_rate => map_bit_rate_132

pretmp.972_133 : --> no uses.

timp_134 : -->3 uses.
timp_1800 = PHI <timp_134(306)>
timp_330 = PHI <timp_134(304)>
D.45025_735 = timp_134->microseconds_per_packet;
# DEBUG timp => timp_134

pretmp.923_135 : --> no uses.

rm_encoding_137 : -->2 uses.
D.45260_1012 = strcasecmp (rm_encoding_137, D.45250_1011);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45249_993, D.45250_994, D.45252_996);
# DEBUG rm_encoding => rm_encoding_137

vmatch_138 : --> single use.
if (vmatch_138 != 0)
# DEBUG vmatch => vmatch_138

connection_139 : --> single use.
D.45086_796 = connection_139->c_address;

pretmp.903_140 : --> no uses.

got_crypto_141 : --> single use.
got_crypto_1119 = PHI <got_crypto_141(482), got_crypto_53(214)>

match_142 : --> single use.
return match_142;

near_rate_145 : --> single use.
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45014_729, near_rate_145, codec_ms_93);

D.47923_146 : -->3 uses.
pmap_761->adv_channels = D.47923_146;
if (D.47923_146 == 1)
pmap_761->channels = D.47923_146;

session_161(D) : -->111 uses.
got_video_crypto_978 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, prephitmp.1031_1813, crypto_tag_1503, sdp_type_546(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45027_738, prephitmp.1039_858, D.45028_741);
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, prephitmp.1031_1893, crypto_tag_1477, sdp_type_546(D));
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_1790);
D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
D.44530_244 = session_161(D)->channel;
pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);
D.45292_1053 = switch_core_perform_session_strdup (session_161(D), D.45256_1052, "src/switch_core_media.c", &__func__, 3804);
D.45317_1093 = switch_core_media_set_video_codec (session_161(D), 0);
D.45100_824 = switch_core_media_set_codec (session_161(D), 0, D.45099_823);
D.44530_815 = session_161(D)->channel;
D.44530_812 = session_161(D)->channel;
pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);
D.45053_771 = switch_core_perform_session_strdup (session_161(D), D.45052_770, "src/switch_core_media.c", &__func__, 3536);
D.45051_769 = switch_core_perform_session_strdup (session_161(D), D.45050_768, "src/switch_core_media.c", &__func__, 3535);
D.45089_801 = switch_core_perform_session_strdup (session_161(D), D.45080_800, "src/switch_core_media.c", &__func__, 3565);
D.45087_797 = switch_core_perform_session_strdup (session_161(D), D.45086_796, "src/switch_core_media.c", &__func__, 3563);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927_696, D.44929_698, codec_rate_633, D.44931_700, bit_rate_632);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44927_686, D.44985_687, D.44931_689);
D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
D.44530_470 = session_161(D)->channel;
D.44530_459 = session_161(D)->channel;
D.44530_415 = session_161(D)->channel;
D.44649_357 = session_161(D)->bugs;
D.44530_354 = session_161(D)->channel;
D.44530_1075 = session_161(D)->channel;
D.44530_1076 = session_161(D)->channel;
D.44530_1082 = session_161(D)->channel;
switch_core_media_check_video_codecs (session_161(D));
D.44530_1086 = session_161(D)->channel;
D.44530_990 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45249_993, D.45250_994, D.45252_996);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45250_1016, D.45252_1018);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
D.45141_886 = dtls_ok (session_161(D));
D.44530_953 = session_161(D)->channel;
D.44530_968 = session_161(D)->channel;
D.44530_988 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
D.45297_1061 = switch_core_perform_session_strdup (session_161(D), D.45086_1060, "src/switch_core_media.c", &__func__, 3810);
D.45299_1065 = switch_core_perform_session_strdup (session_161(D), D.45298_1064, "src/switch_core_media.c", &__func__, 3813);
D.44530_1072 = session_161(D)->channel;
D.44530_854 = session_161(D)->channel;
D.44530_857 = session_161(D)->channel;
D.44530_843 = session_161(D)->channel;
D.44530_819 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
D.44530_473 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
D.44530_441 = session_161(D)->channel;
D.44530_457 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
D.44530_417 = session_161(D)->channel;
D.44530_419 = session_161(D)->channel;
D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
D.44530_432 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
D.44530_438 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
switch_core_media_prepare_codecs (session_161(D), 0);
D.44530_369 = session_161(D)->channel;
switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
switch_core_media_pass_zrtp_hash (session_161(D));
switch_core_session_set_ice (session_161(D));
D.44530_378 = session_161(D)->channel;
D.44530_395 = session_161(D)->channel;
D.44530_400 = session_161(D)->channel;
D.44530_407 = session_161(D)->channel;
D.44784_499 = dtls_ok (session_161(D));
D.44530_511 = session_161(D)->channel;
D.44530_536 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927_705, D.44929_707, codec_rate_633, D.44931_709, bit_rate_632);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
D.44530_828 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45112_832);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_838);
D.44530_839 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45121_849);
D.44530_850 = session_161(D)->channel;
D.44530_867 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
D.44530_861 = session_161(D)->channel;
D.44530_879 = session_161(D)->channel;
D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_1007);
D.44530_350 = session_161(D)->channel;
D.44530_321 = session_161(D)->channel;
D.44530_322 = session_161(D)->channel;
smh_186 = session_161(D)->media_handle;
D.44478_200 = dtls_ok (session_161(D));
switch_core_session_parse_crypto_prefs (session_161(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");
D.44530_247 = session_161(D)->channel;
D.44530_309 = session_161(D)->channel;
D.44530_313 = session_161(D)->channel;
D.44530_316 = session_161(D)->channel;
D.44530_338 = session_161(D)->channel;
D.44530_340 = session_161(D)->channel;
if (session_161(D) == 0B)
channel_162 = switch_core_session_get_channel (session_161(D));

channel_162 : -->6 uses.
val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
D.45115_835 = switch_channel_direction (channel_162);
D.45125_859 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);
var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
# DEBUG channel => channel_162

smh_186 : -->111 uses.
pretmp.1050_1810 = smh_186->mparams;
pmap_1458 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;
pmap_1462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
D.45002_1023 = smh_186->crypto_mode;
D.47966_1506 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
greedy_sort (smh_186, &matches, m_idx_907, codec_array_84, total_codecs_85);
D.45002_713 = smh_186->crypto_mode;
D.44471_833 = smh_186->mparams;
D.44471_830 = smh_186->mparams;
D.44471_822 = smh_186->mparams;
D.44750_816 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_813 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_809 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44655_804 = smh_186->num_negotiated_codecs;
D.44471_622 = smh_186->mparams;
D.44471_1502 = smh_186->mparams;
D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44481_412 = smh_186->session;
total_codecs_359 = smh_186->num_negotiated_codecs;
reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
D.44471_343 = smh_186->mparams;
# DEBUG D#75 => &MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].read_codec
# DEBUG D#74 => &MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].read_codec
D.47964_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
D.47963_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
D.47962_1510 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
D.45287_1073 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.45287_1077 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.45287_1079 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.45287_1083 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;
check_ice (smh_186, 1, sdp_198, m_1765);
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1045;
D.45288_1047 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
D.45287_1069 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.44471_958 = smh_186->mparams;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45165_905;
D.44471_851 = smh_186->mparams;
D.44605_852 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_856 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44471_840 = smh_186->mparams;
D.44605_841 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.47933_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
D.47932_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
D.47931_1493 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
D.47935_1489 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;
check_ice (smh_186, 0, sdp_198, m_1765);
D.44605_765 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
greedy_sort (smh_186, &matches, m_idx_1716, codec_array_84, total_codecs_85);
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;
smh_186->num_negotiated_codecs = 0;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_761;
smh_186->negotiated_codecs[D.44655_804] = mimp_762;
smh_186->num_negotiated_codecs = D.45090_805;
D.45108_827 = switch_media_handle_test_media_flag (smh_186, 8);
D.44471_836 = smh_186->mparams;
D.44471_846 = smh_186->mparams;
D.44471_868 = smh_186->mparams;
D.44471_862 = smh_186->mparams;
D.44471_645 = smh_186->mparams;
D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44471_577 = smh_186->mparams;
D.44471_516 = smh_186->mparams;
D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44481_482 = smh_186->session;
D.44471_364 = smh_186->mparams;
codec_array_360 = &smh_186->negotiated_codecs;
reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
D.44509_240 = smh_186->origin;
D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
D.44481_205 = smh_186->session;
D.44481_207 = smh_186->session;
# DEBUG D#15 => &smh_186->engines
# DEBUG D#14 => &smh_186->engines[1]
codec_array_190 = &smh_186->codecs;
D.44471_191 = smh_186->mparams;
D.44481_201 = smh_186->session;
smh_186->origin = D.44508_226;
D.44471_228 = smh_186->mparams;
D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;
D.44471_362 = smh_186->mparams;
check_ice (smh_186, 0, sdp_198, 0B);
check_ice (smh_186, 1, sdp_198, 0B);
D.44481_403 = smh_186->session;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;
D.44471_533 = smh_186->mparams;
D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.45164_904 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
D.44471_906 = smh_186->mparams;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45214_957;
D.44471_965 = smh_186->mparams;
D.44471_999 = smh_186->mparams;
D.44471_1095 = smh_186->mparams;
if (smh_186 == 0B)
# DEBUG smh => smh_186

codec_array_190 : -->2 uses.
codec_array_84 = PHI <codec_array_360(118), codec_array_190(117), codec_array_190(119)>
codec_array_84 = PHI <codec_array_360(118), codec_array_190(117), codec_array_190(119)>
# DEBUG codec_array => codec_array_190
# DEBUG codec_array => codec_array_190

D.44471_191 : --> single use.
total_codecs_192 = D.44471_191->num_codecs;

total_codecs_192 : --> single use.
total_codecs_85 = PHI <total_codecs_359(118), total_codecs_192(117), total_codecs_365(119)>
# DEBUG total_codecs => total_codecs_192

r_sdp_193(D) : -->7 uses.
D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
D.44472_194 = strlen (r_sdp_193(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);

D.44472_194 : --> single use.
D.44473_195 = (int) D.44472_194;

D.44473_195 : --> single use.
parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);

parser_196 : -->4 uses.
sdp_198 = sdp_session (parser_196);
sdp_parser_free (parser_196);
sdp_parser_free (parser_196);
if (parser_196 == 0B)
# DEBUG parser => parser_196

sdp_198 : -->13 uses.
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_1790);
D.44506_224 = sdp_198->sdp_origin;
m_248 = sdp_198->sdp_media;
attr_303 = sdp_198->sdp_attributes;
connection_554 = sdp_198->sdp_connection;
m_370 = sdp_198->sdp_media;
check_ice (smh_186, 1, sdp_198, m_1765);
switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
check_ice (smh_186, 0, sdp_198, 0B);
check_ice (smh_186, 1, sdp_198, 0B);
check_ice (smh_186, 0, sdp_198, m_1765);
connection_880 = sdp_198->sdp_connection;
if (sdp_198 == 0B)
# DEBUG sdp => sdp_198

D.44478_200 : --> single use.
if (D.44478_200 != 0)

D.44481_201 : --> single use.
D.44482_202 = D.44481_201->channel;

D.44482_202 : --> single use.
tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);

tmp_203 : -->10 uses.
# DEBUG expr => tmp_203
D.49676_1551 = strcasecmp (tmp_203, "no");
D.49677_1552 = strcasecmp (tmp_203, "off");
D.49678_1553 = strcasecmp (tmp_203, "false");
D.49679_1554 = strcasecmp (tmp_203, "f");
D.49680_1555 = strcasecmp (tmp_203, "disabled");
D.49681_1556 = strcasecmp (tmp_203, "inactive");
D.49682_1557 = strcasecmp (tmp_203, "disallow");
D.49683_1558 = switch_is_number (tmp_203);
# DEBUG __nptr => tmp_203
D.49684_1559 = strtol (tmp_203, 0B, 10);
if (tmp_203 != 0B)
# DEBUG tmp => tmp_203

pretmp.1000_204 : --> no uses.

D.44481_205 : --> single use.
D.44482_206 = D.44481_205->channel;

D.44482_206 : --> single use.
switch_channel_clear_flag (D.44482_206, 111);

D.44481_207 : --> single use.
D.44482_208 = D.44481_207->channel;

D.44482_208 : --> single use.
switch_channel_clear_flag (D.44482_208, 109);

proceed_209(D) : -->4 uses.
*proceed_209(D) = 0;
*proceed_209(D) = 1;
if (proceed_209(D) != 0B)
if (proceed_209(D) != 0B)

D.44490_210 : --> single use.
greedy_211 = D.44490_210 != 0;

greedy_211 : -->2 uses.
greedy_47 = PHI <greedy_211(34), 0(35), 1(36), 1(37), greedy_211(38)>
greedy_47 = PHI <greedy_211(34), 0(35), 1(36), 1(37), greedy_211(38)>
# DEBUG greedy => greedy_211

D.44491_212 : --> single use.
scrooge_213 = D.44491_212 != 0;

scrooge_213 : -->2 uses.
scrooge_80 = PHI <scrooge_213(34), 0(35), 0(36), 1(37), scrooge_213(38)>
scrooge_80 = PHI <scrooge_213(34), 0(35), 0(36), 1(37), scrooge_213(38)>
# DEBUG scrooge => scrooge_213

val_214 : -->5 uses.
D.44494_215 = strcasecmp (val_214, "generous");
D.44498_218 = strcasecmp (val_214, "greedy");
D.44502_221 = strcasecmp (val_214, "scrooge");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
if (val_214 != 0B)
# DEBUG val => val_214

D.44494_215 : --> single use.
if (D.44494_215 == 0)

D.44498_218 : --> single use.
if (D.44498_218 == 0)

D.44502_221 : --> single use.
if (D.44502_221 == 0)

D.44506_224 : --> single use.
D.44507_225 = D.44506_224->o_username;

D.44507_225 : --> single use.
D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);

D.44508_226 : -->3 uses.
D.44518_234 = strstr (D.44508_226, "CiscoSystemsSIP-GW-UserAgent");
if (D.44508_226 != 0B)
smh_186->origin = D.44508_226;

pretmp.992_227 : --> no uses.

D.44471_228 : --> single use.
D.44512_229 = D.44471_228->auto_rtp_bugs;

D.44512_229 : -->3 uses.
prephitmp.1053_326 = PHI <D.44512_229(40), D.44512_229(41), pretmp.1052_323(42)>
prephitmp.1053_326 = PHI <D.44512_229(40), D.44512_229(41), pretmp.1052_323(42)>
D.44513_230 = (int) D.44512_229;

D.44513_230 : --> single use.
D.44514_231 = D.44513_230 & 1;

D.44514_231 : --> single use.
if (D.44514_231 != 0)

pretmp.995_233 : --> no uses.

D.44518_234 : --> single use.
if (D.44518_234 != 0B)

D.44521_235 : --> single use.
D.44522_236 = D.44521_235 | 1;

D.44522_236 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;

D.44523_239 : --> single use.
if (D.44523_239 != 0)

D.44509_240 : --> single use.
D.44526_241 = strstr (D.44509_240, "Sonus_UAC");

D.44526_241 : --> single use.
if (D.44526_241 != 0B)

D.44521_242 : --> single use.
D.44529_243 = D.44521_242 | 2;

D.44529_243 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;

D.44530_244 : --> single use.
val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);

val_245 : -->10 uses.
# DEBUG expr => val_245
D.49688_1561 = strcasecmp (val_245, "yes");
D.49689_1562 = strcasecmp (val_245, "on");
D.49690_1563 = strcasecmp (val_245, "true");
D.49691_1564 = strcasecmp (val_245, "t");
D.49692_1565 = strcasecmp (val_245, "enabled");
D.49693_1566 = strcasecmp (val_245, "active");
D.49694_1567 = strcasecmp (val_245, "allow");
D.49695_1568 = switch_is_number (val_245);
# DEBUG __nptr => val_245
D.49696_1569 = strtol (val_245, 0B, 10);
if (val_245 != 0B)
# DEBUG val => val_245

pretmp.997_246 : --> no uses.

D.44530_247 : --> single use.
switch_channel_set_flag_value (D.44530_247, 93, 1);

m_248 : -->3 uses.
D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
D.44546_254 = m_248->m_connections;
if (m_248 != 0B)
# DEBUG m => m_248

D.44540_249 : --> single use.
D.44541_250 = D.44540_249 & 6;

D.44541_250 : -->2 uses.
D.44543_252 = D.44541_250 == 0;
D.44542_251 = D.44541_250 == 2;

D.44542_251 : --> single use.
D.44544_253 = D.44543_252 | D.44542_251;

D.44543_252 : --> single use.
D.44544_253 = D.44543_252 | D.44542_251;

D.44544_253 : --> single use.
if (D.44544_253 != 0)

D.44546_254 : -->2 uses.
D.44548_256 = D.44546_254->c_address;
if (D.44546_254 != 0B)

dptime_255 : --> single use.
dptime_1036 = PHI <dptime_255(82), 0(63)>

D.44548_256 : -->2 uses.
__result_300 = __builtin_strcmp (D.44548_256, "0.0.0.0");
if (D.44548_256 != 0B)

pretmp.1020_299 : --> no uses.

__result_300 : --> single use.
if (__result_300 == 0)

attr_303 : -->2 uses.
attr_1667 = PHI <attr_334(81), attr_303(64)>
# DEBUG attr => attr_303
if (attr_303 != 0B)
# DEBUG attr => attr_303

D.44590_304 : -->8 uses.
D.44616_327 = strcasecmp (D.44590_304, "ptime");
D.47878_1466 = *D.44590_304;
D.44621_331 = strcasecmp (D.44590_304, "maxptime");
D.44614_324 = strcasecmp (D.44590_304, "sendrecv");
D.44602_315 = strcasecmp (D.44590_304, "recvonly");
D.44598_311 = strcasecmp (D.44590_304, "inactive");
D.44594_307 = strcasecmp (D.44590_304, "sendonly");
if (D.44590_304 == 0B)
# DEBUG s => D.44590_304

D.44594_307 : --> single use.
if (D.44594_307 == 0)

D.44530_309 : --> single use.
switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);

D.44598_311 : --> single use.
if (D.44598_311 == 0)

D.44530_313 : --> single use.
switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);

D.44602_315 : --> single use.
if (D.44602_315 == 0)

D.44530_316 : --> single use.
switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);

D.44605_318 : --> single use.
D.44606_319 = switch_rtp_ready (D.44605_318);

D.44606_319 : --> single use.
if (D.44606_319 != 0)

D.44605_320 : --> single use.
switch_rtp_set_max_missed_packets (D.44605_320, 0);

D.44530_321 : --> single use.
switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);

D.44530_322 : --> single use.
switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);

pretmp.1052_323 : --> single use.
prephitmp.1053_326 = PHI <D.44512_229(40), D.44512_229(41), pretmp.1052_323(42)>

D.44614_324 : --> single use.
if (D.44614_324 == 0)

prephitmp.1053_326 : --> single use.
D.44523_239 = prephitmp.1053_326 & 2;

D.44616_327 : --> single use.
if (D.44616_327 == 0)

D.44619_328 : --> single use.
dptime_1468 = strtol (D.44619_328, 0B, 10);
# DEBUG __nptr => D.44619_328

timp_330 : -->2 uses.
timp_1786 = PHI <timp_330(305), timp_1800(307)>
pretmp.1036_1897 = timp_330->microseconds_per_packet;

D.44621_331 : --> single use.
if (D.44621_331 == 0)

D.44619_332 : --> single use.
dmaxptime_1469 = strtol (D.44619_332, 0B, 10);
# DEBUG __nptr => D.44619_332

attr_334 : -->2 uses.
attr_1667 = PHI <attr_334(81), attr_303(64)>
# DEBUG attr => attr_334
if (attr_334 != 0B)
# DEBUG attr => attr_334

D.44624_335 : --> single use.
D.44626_337 = D.44624_335 & prephitmp.1026_1683;

D.44626_337 : --> single use.
if (D.44626_337 != 0)

D.44530_338 : --> single use.
switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);

D.44631_339 : --> single use.
if (D.44631_339 == 0)

D.44530_340 : --> single use.
val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);

val_341 : -->10 uses.
# DEBUG expr => val_341
D.49700_1571 = strcasecmp (val_341, "yes");
D.49701_1572 = strcasecmp (val_341, "on");
D.49702_1573 = strcasecmp (val_341, "true");
D.49703_1574 = strcasecmp (val_341, "t");
D.49704_1575 = strcasecmp (val_341, "enabled");
D.49705_1576 = strcasecmp (val_341, "active");
D.49706_1577 = strcasecmp (val_341, "allow");
D.49707_1578 = switch_is_number (val_341);
# DEBUG __nptr => val_341
D.49708_1579 = strtol (val_341, 0B, 10);
if (val_341 == 0B)
# DEBUG val => val_341

pretmp.969_342 : --> no uses.

D.44471_343 : -->2 uses.
D.44636_344 = D.44471_343->hold_laps;
D.44471_343->hold_laps = 1;

D.44636_344 : --> single use.
if (D.44636_344 == 0)

pretmp.1056_346 : --> single use.
prephitmp.1057_1806 = PHI <prephitmp.1049_1809(140), pretmp.1056_346(139)>

pretmp.922_347 : --> no uses.

D.44640_348 : --> single use.
if (D.44640_348 != 0)

reneg_349 : --> single use.
reneg_81 = PHI <reneg_349(99), reneg_352(100)>
# DEBUG reneg => reneg_349

D.44530_350 : --> single use.
val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);

val_351 : -->2 uses.
reneg_352 = switch_true (val_351);
if (val_351 != 0B)
# DEBUG val => val_351

reneg_352 : --> single use.
reneg_81 = PHI <reneg_349(99), reneg_352(100)>
# DEBUG reneg => reneg_352

reneg_353 : --> single use.
reneg_82 = PHI <0(101), reneg_353(102), reneg_1590(113)>
# DEBUG reneg => reneg_353

D.44530_354 : --> single use.
val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);

val_355 : -->10 uses.
# DEBUG expr => val_355
D.49712_1581 = strcasecmp (val_355, "yes");
D.49713_1582 = strcasecmp (val_355, "on");
D.49714_1583 = strcasecmp (val_355, "true");
D.49715_1584 = strcasecmp (val_355, "t");
D.49716_1585 = strcasecmp (val_355, "enabled");
D.49717_1586 = strcasecmp (val_355, "active");
D.49718_1587 = strcasecmp (val_355, "allow");
D.49719_1588 = switch_is_number (val_355);
# DEBUG __nptr => val_355
D.49720_1589 = strtol (val_355, 0B, 10);
if (val_355 != 0B)
# DEBUG val => val_355

pretmp.923_356 : --> no uses.

D.44649_357 : --> single use.
if (D.44649_357 != 0B)

total_codecs_359 : -->2 uses.
# DEBUG total_codecs => total_codecs_359
total_codecs_85 = PHI <total_codecs_359(118), total_codecs_192(117), total_codecs_365(119)>
if (total_codecs_359 != 0)

codec_array_360 : --> single use.
codec_array_84 = PHI <codec_array_360(118), codec_array_190(117), codec_array_190(119)>
# DEBUG codec_array => codec_array_360

got_crypto_361 : -->3 uses.
got_crypto_50 = PHI <got_crypto_361(179), got_crypto_361(182), 1(181), got_crypto_361(180)>
got_crypto_50 = PHI <got_crypto_361(179), got_crypto_361(182), 1(181), got_crypto_361(180)>
got_crypto_50 = PHI <got_crypto_361(179), got_crypto_361(182), 1(181), got_crypto_361(180)>

D.44471_362 : --> single use.
D.44471_362->num_codecs = 0;

pretmp.923_363 : --> no uses.

D.44471_364 : --> single use.
total_codecs_365 = D.44471_364->num_codecs;

total_codecs_365 : --> single use.
total_codecs_85 = PHI <total_codecs_359(118), total_codecs_192(117), total_codecs_365(119)>
# DEBUG total_codecs => total_codecs_365

D.44661_366 : --> single use.
if (D.44661_366 != 0B)

D.44663_367 : --> single use.
if (D.44663_367 != 0B)

D.44665_368 : --> single use.
if (D.44665_368 != 0B)

D.44530_369 : --> single use.
switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);

m_370 : -->2 uses.
m_1765 = PHI <m_1094(455), m_370(125)>
# DEBUG m => m_370
if (m_370 != 0B)
# DEBUG m => m_370

D.44666_373 : --> single use.
if (D.44666_373 == 261)

got_webrtc_374 : --> single use.
got_webrtc_78 = PHI <got_webrtc_452(126), got_webrtc_374(127)>
# DEBUG got_webrtc => got_webrtc_374

D.44669_375 : -->2 uses.
D.44672_377 = strcasecmp (D.44669_375, "UDP/TLS/RTP/SAVPF");
if (D.44669_375 != 0B)

ptime_376 : --> single use.
ptime_1034 = PHI <ptime_376(215), dptime_1036(185), dptime_1036(177)>

D.44672_377 : --> single use.
if (D.44672_377 == 0)

D.44530_378 : --> single use.
switch_channel_set_flag_value (D.44530_378, 107, 1);

D.44675_379 : -->4 uses.
D.44677_381 = D.44675_379 == 261;
D.44676_380 = D.44675_379 == 257;
if (D.44675_379 == 258)
if (D.44675_379 == 256)

D.44676_380 : --> single use.
D.44678_382 = D.44677_381 | D.44676_380;

D.44677_381 : --> single use.
D.44678_382 = D.44677_381 | D.44676_380;

D.44678_382 : --> single use.
if (D.44678_382 != 0)

D.44681_383 : -->3 uses.
prephitmp.1049_1809 = PHI <D.44681_383(132), D.44681_387(135), pretmp.1048_1674(138), D.44681_387(136), D.44681_383(133)>
prephitmp.1049_1809 = PHI <D.44681_383(132), D.44681_387(135), pretmp.1048_1674(138), D.44681_387(136), D.44681_383(133)>
if (D.44681_383 == 2)

got_savp_384 : --> single use.
got_savp_74 = PHI <got_savp_512(132), got_savp_512(135), got_savp_512(138), got_savp_512(136), got_savp_384(133)>
# DEBUG got_savp => got_savp_384

D.44681_387 : -->3 uses.
prephitmp.1049_1809 = PHI <D.44681_383(132), D.44681_387(135), pretmp.1048_1674(138), D.44681_387(136), D.44681_383(133)>
prephitmp.1049_1809 = PHI <D.44681_383(132), D.44681_387(135), pretmp.1048_1674(138), D.44681_387(136), D.44681_383(133)>
if (D.44681_387 == 2)

got_avp_388 : --> single use.
got_avp_68 = PHI <got_avp_672(132), got_avp_672(135), got_avp_672(138), got_avp_388(136), got_avp_672(133)>
# DEBUG got_avp => got_avp_388

got_udptl_391 : --> single use.
# DEBUG got_udptl => got_udptl_391
got_udptl_775 = PHI <got_udptl_1869(140), got_udptl_391(139)>
# DEBUG got_udptl => got_udptl_391

D.44697_393 : --> single use.
if (D.44697_393 != 0)

t38_options_394 : -->3 uses.
D.44753_448 = t38_options_394->remote_port;
D.44751_445 = t38_options_394->remote_ip;
switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
# DEBUG t38_options => t38_options_394

D.44530_395 : --> single use.
D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);

D.44699_396 : --> single use.
if (D.44699_396 != 0)

D.44702_398 : --> single use.
D.44703_399 = switch_true (D.44702_398);

D.44703_399 : --> single use.
if (D.44703_399 != 0)

D.44530_400 : --> single use.
switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);

var_402 : -->3 uses.
pass_409 = switch_true (var_402);
D.44716_410 = strcasecmp (var_402, "once");
if (var_402 != 0B)
# DEBUG var => var_402

D.44481_403 : --> single use.
D.44482_404 = D.44481_403->channel;

D.44482_404 : --> single use.
D.44706_405 = switch_channel_test_flag (D.44482_404, 101);

D.44706_405 : --> single use.
pass_406 = (int) D.44706_405;
# DEBUG pass => (int) D.44706_405

pass_406 : --> single use.
pass_126 = PHI <pass_406(152), pass_409(150)>

D.44530_407 : --> single use.
D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);

D.44707_408 : --> single use.
if (D.44707_408 != 0)

pass_409 : -->2 uses.
pass_126 = PHI <pass_406(152), pass_409(150)>
if (pass_409 == 0)
# DEBUG pass => pass_409

D.44716_410 : --> single use.
if (D.44716_410 == 0)

D.44481_412 : --> single use.
D.44482_413 = D.44481_412->channel;

D.44482_413 : --> single use.
D.44723_414 = switch_channel_test_flag (D.44482_413, 101);

D.44723_414 : --> single use.
if (D.44723_414 != 0)

D.44530_415 : --> single use.
D.44724_416 = switch_channel_test_flag (D.44530_415, 103);

D.44724_416 : --> single use.
if (D.44724_416 == 0)

D.44530_417 : --> single use.
D.44726_418 = switch_channel_test_flag (D.44530_417, 15);

D.44726_418 : --> single use.
if (D.44726_418 != 0)

D.44530_419 : --> single use.
D.44728_420 = switch_channel_test_flag (D.44530_419, 29);

D.44728_420 : --> single use.
if (D.44728_420 != 0)

D.44605_421 : --> single use.
D.44730_422 = switch_rtp_ready (D.44605_421);

D.44730_422 : --> single use.
if (D.44730_422 == 0)

D.44733_424 : --> single use.
if (D.44733_424 == 0)

other_session.89_425 : --> single use.
other_channel_426 = switch_core_session_get_channel (other_session.89_425);

other_channel_426 : -->3 uses.
switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);
D.44741_434 = switch_channel_get_name (other_channel_426);
D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
# DEBUG other_channel => other_channel_426

D.44605_427 : --> single use.
remote_host_428 = switch_rtp_get_remote_host (D.44605_427);

remote_host_428 : -->3 uses.
D.44756_449 = remote_host_428 != 0B;
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
# DEBUG remote_host => remote_host_428

D.44605_429 : --> single use.
remote_port_430 = switch_rtp_get_remote_port (D.44605_429);

remote_port_430 : -->3 uses.
D.44757_450 = remote_port_430 != 0;
D.44766_461 = (int) remote_port_430;
if (remote_port_430 == D.44753_448)
# DEBUG remote_port => remote_port_430

D.44737_431 : --> single use.
if (D.44737_431 == 0)

D.44530_432 : --> single use.
D.44740_433 = switch_channel_get_name (D.44530_432);

D.44740_433 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

D.44741_434 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

other_session.89_435 : --> single use.
switch_core_session_rwunlock (other_session.89_435);

D.44530_438 : --> single use.
D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);

D.44742_439 : --> single use.
D.44743_440 = switch_true (D.44742_439);

D.44743_440 : --> single use.
if (D.44743_440 != 0)

D.44530_441 : --> single use.
D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);

D.44746_442 : --> single use.
D.44747_443 = switch_true (D.44746_442);

D.44747_443 : --> single use.
if (D.44747_443 != 0)

D.44750_444 : --> single use.
D.44750_444->remote_sdp_ip = D.44752_446;

D.44751_445 : --> single use.
D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);

D.44752_446 : --> single use.
D.44750_444->remote_sdp_ip = D.44752_446;

D.44750_447 : -->2 uses.
D.44760_453 = D.44750_447->remote_sdp_ip;
D.44750_447->remote_sdp_port = D.44753_448;

D.44753_448 : -->2 uses.
if (remote_port_430 == D.44753_448)
D.44750_447->remote_sdp_port = D.44753_448;

D.44756_449 : --> single use.
D.44758_451 = D.44757_450 & D.44756_449;

D.44757_450 : --> single use.
D.44758_451 = D.44757_450 & D.44756_449;

D.44758_451 : --> single use.
if (D.44758_451 != 0)

got_webrtc_452 : -->2 uses.
got_webrtc_78 = PHI <got_webrtc_452(126), got_webrtc_374(127)>
got_webrtc_374 = got_webrtc_452 + 1;

D.44760_453 : --> single use.
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);

D.39032_454 : --> single use.
if (D.39032_454 == 0)

pretmp.892_455 : --> no uses.

pretmp.882_456 : --> no uses.

D.44530_457 : --> single use.
D.44764_458 = switch_channel_get_name (D.44530_457);

D.44764_458 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);

D.44530_459 : --> single use.
D.44765_460 = switch_channel_get_name (D.44530_459);

D.44765_460 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44766_461 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44750_462 : -->2 uses.
D.44762_465 = D.44750_462->remote_sdp_port;
D.44760_463 = D.44750_462->remote_sdp_ip;

D.44760_463 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

pretmp.890_464 : --> no uses.

D.44762_465 : --> single use.
D.44767_466 = (int) D.44762_465;

D.44767_466 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44750_467 : --> single use.
D.44762_468 = D.44750_467->remote_sdp_port;

D.44762_468 : --> single use.
D.44767_469 = (int) D.44762_468;

D.44767_469 : --> single use.
switch_snprintf (&tmp, 32, "%d", D.44767_469);

D.44530_470 : --> single use.
switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);

D.44750_471 : --> single use.
D.44760_472 = D.44750_471->remote_sdp_ip;

D.44760_472 : --> single use.
switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);

D.44530_473 : --> single use.
switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);

D.44605_474 : --> single use.
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);

D.44750_475 : -->2 uses.
D.44762_478 = D.44750_475->remote_sdp_port;
D.44760_476 = D.44750_475->remote_sdp_ip;

D.44760_476 : --> single use.
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);

codec_ms_477 : -->9 uses.
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
codec_ms_93 = PHI <codec_ms_1734(287), codec_ms_1803(295), codec_ms_1710(292), codec_ms_477(222)>
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
codec_ms_1721 = PHI <codec_ms_91(294), codec_ms_477(223)>
# DEBUG codec_ms => codec_ms_477
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>

D.44762_478 : --> single use.
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);

D.44768_479 : --> single use.
if (D.44768_479 != 0)

err.90_480 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);

other_session.89_481 : --> single use.
switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);

D.44481_482 : --> single use.
D.44482_483 = D.44481_482->channel;

D.44482_483 : --> single use.
switch_channel_set_flag_value (D.44482_483, 101, 1);

other_session.89_484 : --> single use.
D.44772_485 = other_session.89_484->channel;

D.44772_485 : --> single use.
switch_channel_set_flag_value (D.44772_485, 101, 1);

other_session.89_486 : --> single use.
msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);

msg_487 : -->4 uses.
msg_487->from = "src/switch_core_media.c";
msg_487->string_arg = D.44773_489;
switch_core_session_queue_message (other_session.89_490, msg_487);
msg_487->message_id = 21;
# DEBUG msg => msg_487

other_session.89_488 : --> single use.
D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);

D.44773_489 : --> single use.
msg_487->string_arg = D.44773_489;

other_session.89_490 : --> single use.
switch_core_session_queue_message (other_session.89_490, msg_487);

other_session.89_491 : --> single use.
switch_core_session_rwunlock (other_session.89_491);

D.44697_494 : --> single use.
D.44777_495 = D.44697_494 != 0;

D.44777_495 : --> single use.
D.44779_497 = D.44778_496 & D.44777_495;

D.44778_496 : --> single use.
D.44779_497 = D.44778_496 & D.44777_495;

D.44779_497 : --> single use.
if (D.44779_497 != 0)

D.44781_498 : --> single use.
if (D.44781_498 != 0)

D.44784_499 : --> single use.
if (D.44784_499 != 0)

attr_500 : -->3 uses.
attr_923 = PHI <attr_500(481), attr_507(185)>
# DEBUG attr => attr_500
# DEBUG attr => attr_500
attr_1560 = PHI <attr_506(184), attr_500(178)>
# DEBUG attr => attr_500
if (attr_500 != 0B)
# DEBUG attr => attr_500

D.44590_501 : --> single use.
D.44787_502 = strcasecmp (D.44590_501, "fingerprint");

D.44787_502 : --> single use.
if (D.44787_502 == 0)

D.44619_503 : -->2 uses.
D.47888_1470 = *D.44619_503;
if (D.44619_503 == 0B)
# DEBUG s => D.44619_503

attr_506 : -->2 uses.
attr_1560 = PHI <attr_506(184), attr_500(178)>
# DEBUG attr => attr_506
if (attr_506 != 0B)
# DEBUG attr => attr_506

attr_507 : -->2 uses.
attr_923 = PHI <attr_500(481), attr_507(185)>
# DEBUG attr => attr_507
if (attr_507 != 0B)
# DEBUG attr => attr_507

D.44590_508 : -->4 uses.
D.44795_509 = strcasecmp (D.44590_508, "rtcp");
D.44805_520 = strcasecmp (D.44590_508, "ptime");
D.44810_525 = strcasecmp (D.44590_508, "maxptime");
D.44815_530 = strcasecmp (D.44590_508, "crypto");

D.44795_509 : --> single use.
if (D.44795_509 == 0)

D.44619_510 : -->2 uses.
switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_510, 1);
if (D.44619_510 != 0B)

D.44530_511 : --> single use.
switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_510, 1);

got_savp_512 : -->6 uses.
got_savp_74 = PHI <got_savp_512(132), got_savp_512(135), got_savp_512(138), got_savp_512(136), got_savp_384(133)>
got_savp_74 = PHI <got_savp_512(132), got_savp_512(135), got_savp_512(138), got_savp_512(136), got_savp_384(133)>
got_savp_74 = PHI <got_savp_512(132), got_savp_512(135), got_savp_512(138), got_savp_512(136), got_savp_384(133)>
got_savp_1712 = PHI <got_savp_74(140), got_savp_512(139)>
# DEBUG got_savp => got_savp_512
got_savp_74 = PHI <got_savp_512(132), got_savp_512(135), got_savp_512(138), got_savp_512(136), got_savp_384(133)>
got_savp_384 = got_savp_512 + 1;

D.44619_513 : --> single use.
D.47891_1472 = strtol (D.44619_513, 0B, 10);
# DEBUG __nptr => D.44619_513

D.44799_515 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;

D.44471_516 : -->2 uses.
D.44471_516->rtcp_audio_interval_msec = "5000";
D.44800_517 = D.44471_516->rtcp_audio_interval_msec;

D.44800_517 : --> single use.
if (D.44800_517 == 0B)

pretmp.896_518 : --> no uses.

got_video_crypto_519 : --> single use.
got_video_crypto_744 = PHI <got_video_crypto_519(483), got_video_crypto_556(379)>
# DEBUG got_video_crypto => got_video_crypto_519
# DEBUG got_video_crypto => got_video_crypto_519

D.44805_520 : --> single use.
if (D.44805_520 == 0)

D.44619_521 : -->2 uses.
# DEBUG __nptr => D.44619_521
ptime_1473 = strtol (D.44619_521, 0B, 10);
if (D.44619_521 != 0B)

D.44810_525 : --> single use.
if (D.44810_525 == 0)

D.44619_526 : -->2 uses.
# DEBUG __nptr => D.44619_526
maxptime_1474 = strtol (D.44619_526, 0B, 10);
if (D.44619_526 != 0B)

m_idx_527 : --> single use.
m_idx_102 = PHI <m_idx_527(290), m_idx_793(256)>

m_idx_529 : --> single use.
m_idx_105 = PHI <m_idx_1799(287), m_idx_1802(295), m_idx_529(292), m_idx_1870(222)>

D.44815_530 : --> single use.
if (D.44815_530 == 0)

D.44619_531 : -->3 uses.
prephitmp.1031_1893 = PHI <D.44619_531(465), pretmp.1034_1640(210), pretmp.1034_1896(467)>
D.47901_1475 = *D.44619_531;
if (D.44619_531 == 0B)
# DEBUG s => D.44619_531

D.44471_533 : --> single use.
D.44821_534 = D.44471_533->ndlb;

D.44821_534 : --> single use.
D.44822_535 = D.44821_534 & 4;

D.44822_535 : --> single use.
if (D.44822_535 == 0)

D.44530_536 : --> single use.
D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);

D.44825_537 : -->10 uses.
D.49724_1591 = strcasecmp (D.44825_537, "yes");
D.49725_1592 = strcasecmp (D.44825_537, "on");
D.49726_1593 = strcasecmp (D.44825_537, "true");
D.49727_1594 = strcasecmp (D.44825_537, "t");
D.49728_1595 = strcasecmp (D.44825_537, "enabled");
D.49729_1596 = strcasecmp (D.44825_537, "active");
D.49730_1597 = strcasecmp (D.44825_537, "allow");
D.49731_1598 = switch_is_number (D.44825_537);
# DEBUG __nptr => D.44825_537
D.49732_1599 = strtol (D.44825_537, 0B, 10);
if (D.44825_537 != 0B)
# DEBUG expr => D.44825_537

m_idx_538 : --> single use.
m_idx_954 = PHI <m_idx_538(430), m_idx_820(415)>

D.44666_539 : --> single use.
D.44829_540 = D.44666_539 != 257;

D.44829_540 : --> single use.
D.44831_542 = D.44830_541 & D.44829_540;

D.44830_541 : --> single use.
D.44831_542 = D.44830_541 & D.44829_540;

D.44831_542 : --> single use.
if (D.44831_542 != 0)

sdp_type_546(D) : -->4 uses.
got_video_crypto_978 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, prephitmp.1031_1813, crypto_tag_1503, sdp_type_546(D));
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, prephitmp.1031_1893, crypto_tag_1477, sdp_type_546(D));
pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);
pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);

got_crypto_547 : --> single use.
got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
# DEBUG got_crypto => got_crypto_547

attr_548 : -->2 uses.
attr_1600 = PHI <attr_923(482), attr_548(214)>
# DEBUG attr => attr_548
if (attr_548 != 0B)
# DEBUG attr => attr_548

D.44834_549 : --> single use.
D.44836_551 = D.44834_549 & D.44835_550;

D.44835_550 : --> single use.
D.44836_551 = D.44834_549 & D.44835_550;

D.44836_551 : --> single use.
if (D.44836_551 != 0)

D.44839_552 : --> single use.
if (D.44839_552 == 0)

connection_554 : -->2 uses.
connection_139 = PHI <connection_554(220), connection_555(219)>
# DEBUG connection => connection_554
if (connection_554 == 0B)
# DEBUG connection => connection_554

connection_555 : -->2 uses.
connection_139 = PHI <connection_554(220), connection_555(219)>
if (connection_555 != 0B)

got_video_crypto_556 : -->4 uses.
got_video_crypto_961 = PHI <got_video_crypto_1804(412), got_video_crypto_556(379), got_video_crypto_556(371)>
got_video_crypto_744 = PHI <got_video_crypto_519(483), got_video_crypto_556(379)>
got_video_crypto_961 = PHI <got_video_crypto_1804(412), got_video_crypto_556(379), got_video_crypto_556(371)>
got_video_crypto_1739 = PHI <got_video_crypto_57(378), got_video_crypto_556(372)>
# DEBUG got_video_crypto => got_video_crypto_556
# DEBUG got_video_crypto => got_video_crypto_556
# DEBUG got_video_crypto => got_video_crypto_556

map_559 : -->2 uses.
map_1729 = PHI <map_712(294), map_559(223)>
# DEBUG map => map_559
if (map_559 != 0B)
# DEBUG map => map_559

rm_encoding_561 : -->2 uses.
rm_encoding_130 = PHI <rm_encoding_561(224), ""(225)>
if (rm_encoding_561 == 0B)
# DEBUG rm_encoding => rm_encoding_561

D.44848_563 : --> single use.
if (D.44848_563 == 0)

D.44854_564 : --> single use.
if (D.44854_564 == D.44855_566)

D.44750_565 : --> single use.
D.44855_566 = D.44750_565->rm_rate;

D.44855_566 : --> single use.
if (D.44854_564 == D.44855_566)

D.44856_567 : --> single use.
best_te_568 = (switch_payload_t) D.44856_567;

best_te_568 : -->2 uses.
best_te_19 = PHI <best_te_568(229), best_te_1899(234), best_te_1899(228), best_te_1899(235), best_te_1899(291), best_te_1899(233)>
D.44857_569 = (int) best_te_568;
# DEBUG best_te => best_te_568

D.44857_569 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);

D.44858_570 : --> single use.
if (D.44858_570 == 0)

D.44863_571 : --> single use.
if (D.44863_571 == 0)

D.44856_572 : --> single use.
cng_pt_573 = (switch_payload_t) D.44856_572;

cng_pt_573 : -->3 uses.
cng_pt_24 = PHI <cng_pt_1668(229), cng_pt_573(234), cng_pt_1668(228), cng_pt_1668(235), cng_pt_1668(291), cng_pt_573(233)>
cng_pt_24 = PHI <cng_pt_1668(229), cng_pt_573(234), cng_pt_1668(228), cng_pt_1668(235), cng_pt_1668(291), cng_pt_573(233)>
D.44868_575 = (int) cng_pt_573;
# DEBUG cng_pt => cng_pt_573

D.44605_574 : --> single use.
if (D.44605_574 != 0B)

D.44868_575 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);

D.44605_576 : --> single use.
switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

D.44471_577 : --> single use.
D.44869_578 = D.44471_577->cng_pt;

D.44869_578 : --> single use.
switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

pretmp.908_580 : --> no uses.

D.44877_582 : --> single use.
D.44879_584 = D.44878_583 | D.44877_582;

D.44878_583 : --> single use.
D.44879_584 = D.44878_583 | D.44877_582;

D.44879_584 : --> single use.
if (D.44879_584 != 0)

D.44856_586 : --> single use.
D.44884_587 = (uint32_t) D.44856_586;

D.44884_587 : --> single use.
D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);

D.44885_588 : --> single use.
codec_ms_589 = (int) D.44885_588;

codec_ms_589 : --> single use.
codec_ms_87 = PHI <codec_ms_1884(469), codec_ms_589(239), ptime_1034(238)>
# DEBUG codec_ms => codec_ms_589

D.44856_590 : --> single use.
csui.173_591 = (unsigned char) D.44856_590;

csui.173_591 : -->2 uses.
map_bit_rate_1480 = CSWTCH.174[csui.173_591];
if (csui.173_591 <= 18)
# DEBUG payload => csui.173_591

D.44889_593 : --> single use.
D.44890_594 = strcasecmp (D.44889_593, "g723");

D.44890_594 : --> single use.
if (D.44890_594 == 0)

remote_codec_rate_596 : --> single use.
remote_codec_rate_1494 = PHI <remote_codec_rate_97(289), remote_codec_rate_596(257)>
# DEBUG remote_codec_rate => remote_codec_rate_596
# DEBUG remote_codec_rate => remote_codec_rate_596

D.44893_598 : -->3 uses.
D.47916_1482 = *D.44893_598;
D.44906_612 = switch_core_codec_parse_fmtp (D.44889_609, D.44893_598, D.44854_611, &codec_fmtp);
if (D.44893_598 == 0B)
# DEBUG s => D.44893_598

D.44889_600 : -->2 uses.
D.44897_601 = strcasecmp (D.44889_600, "ilbc");
D.44901_605 = strcasecmp (D.44889_600, "isac");

D.44897_601 : --> single use.
if (D.44897_601 == 0)

D.44901_605 : --> single use.
if (D.44901_605 == 0)

D.44889_609 : --> single use.
D.44906_612 = switch_core_codec_parse_fmtp (D.44889_609, D.44893_598, D.44854_611, &codec_fmtp);

D.44854_611 : --> single use.
D.44906_612 = switch_core_codec_parse_fmtp (D.44889_609, D.44893_598, D.44854_611, &codec_fmtp);

D.44906_612 : --> single use.
if (D.44906_612 == 0)

D.44909_613 : -->2 uses.
map_bit_rate_615 = (uint32_t) D.44909_613;
if (D.44909_613 != 0)

map_bit_rate_615 : --> single use.
map_bit_rate_131 = PHI <map_bit_rate_1481(250), map_bit_rate_615(251)>
# DEBUG map_bit_rate => map_bit_rate_615

D.44912_616 : -->2 uses.
codec_ms_618 = D.44912_616 / 1000;
if (D.44912_616 != 0)

near_rate.96_617 : --> single use.
matches[0].rate = near_rate.96_617;

codec_ms_618 : --> single use.
codec_ms_89 = PHI <codec_ms_88(252), codec_ms_618(253)>
# DEBUG codec_ms => codec_ms_618

fmtp_remote_codec_rate_619 : -->2 uses.
fmtp_remote_codec_rate_99 = PHI <0(249), 0(470), 0(255), fmtp_remote_codec_rate_619(254), 0(247), 0(248)>
if (fmtp_remote_codec_rate_619 != 0)

attr_620 : -->9 uses.
pretmp.1030_1891 = attr_620->a_value;
pretmp.1030_1890 = attr_620->a_value;
D.44590_895 = attr_620->a_name;
attr_979 = attr_620->a_next;
D.44619_963 = attr_620->a_value;
D.44619_955 = attr_620->a_value;
D.44619_909 = attr_620->a_value;
D.44619_900 = attr_620->a_value;
D.44619_897 = attr_620->a_value;

D.44471_622 : --> single use.
D.44997_623 = D.44471_622->num_codecs;

D.44997_623 : --> single use.
D.44998_624 = D.44997_623 > i_711;

D.44998_624 : --> single use.
D.45000_626 = D.44999_625 & D.44998_624;

D.44999_625 : --> single use.
D.45000_626 = D.44999_625 & D.44998_624;

D.45000_626 : --> single use.
if (D.45000_626 != 0)

i.91_627 : --> single use.
D.44919_628 = i.91_627 * 4;

D.44919_628 : --> single use.
D.44920_629 = codec_array_84 + D.44919_628;

D.44920_629 : --> single use.
imp_630 = *D.44920_629;

imp_630 : -->21 uses.
pretmp.1042_1737 = imp_630->microseconds_per_packet;
D.44922_634 = imp_630->codec_type;
codec_rate_633 = imp_630->samples_per_second;
D.44921_631 = imp_630->bits_per_second;
D.44928_697 = imp_630->ianacode;
D.44927_696 = imp_630->iananame;
D.44930_708 = imp_630->microseconds_per_packet;
D.44928_706 = imp_630->ianacode;
D.44927_705 = imp_630->iananame;
D.44930_694 = imp_630->microseconds_per_packet;
D.44930_688 = imp_630->microseconds_per_packet;
D.44985_687 = imp_630->samples_per_second;
D.44927_686 = imp_630->iananame;
D.44927_657 = imp_630->iananame;
near_matches[nm_idx_1140].imp = imp_630;
D.44948_659 = imp_630->actual_samples_per_second;
D.44927_638 = imp_630->iananame;
D.44928_639 = imp_630->ianacode;
D.44930_641 = imp_630->microseconds_per_packet;
D.44928_654 = imp_630->ianacode;
matches[m_idx_1488].imp = imp_630;
# DEBUG imp => imp_630

D.44921_631 : --> single use.
bit_rate_632 = (uint32_t) D.44921_631;
# DEBUG bit_rate => (uint32_t) D.44921_631

bit_rate_632 : -->7 uses.
pretmp.1054_1711 = bit_rate_632 != 0;
pretmp.1046_1811 = bit_rate_632 != 0;
pretmp.1046_785 = bit_rate_632 != 0;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927_696, D.44929_698, codec_rate_633, D.44931_700, bit_rate_632);
D.44957_668 = map_bit_rate_132 != bit_rate_632;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927_705, D.44929_707, codec_rate_633, D.44931_709, bit_rate_632);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);

codec_rate_633 : -->8 uses.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927_696, D.44929_698, codec_rate_633, D.44931_700, bit_rate_632);
codec_rate.94_703 = (int) codec_rate_633;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927_705, D.44929_707, codec_rate_633, D.44931_709, bit_rate_632);
if (remote_codec_rate_96 != codec_rate_633)
D.44974_679 = remote_codec_rate_96 != codec_rate_633;
D.44973_678 = codec_rate_633 != 0;
if (remote_codec_rate_1494 == codec_rate_633)
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);
# DEBUG codec_rate => codec_rate_633

D.44922_634 : --> single use.
if (D.44922_634 != 0)

D.44856_635 : --> single use.
D.44925_636 = (int) D.44856_635;

D.44925_636 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);

remote_codec_rate.92_637 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);

D.44927_638 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);

D.44928_639 : --> single use.
D.44929_640 = (int) D.44928_639;

D.44929_640 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);

D.44930_641 : --> single use.
D.44931_642 = D.44930_641 / 1000;

D.44931_642 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);

D.44889_643 : -->6 uses.
D.47920_1484 = *D.44889_643;
D.44980_684 = strcasecmp (D.44889_643, "pcmu");
D.44978_682 = strcasecmp (D.44889_643, "pcma");
D.44964_673 = strcasecmp (D.44889_643, "isac");
D.44961_671 = strcasecmp (D.44889_643, "ilbc");
if (D.44889_643 == 0B)
# DEBUG s => D.44889_643

D.44471_645 : --> single use.
D.44821_646 = D.44471_645->ndlb;

D.44821_646 : --> single use.
D.44937_647 = (int) D.44821_646;

D.44937_647 : --> single use.
D.44938_648 = D.44937_647 & 1;

D.44938_648 : --> single use.
if (D.44938_648 != 0)

D.44856_650 : --> single use.
D.44925_651 = (int) D.44856_650;

D.44925_651 : -->2 uses.
match_656 = D.44925_651 == D.44929_655;
if (D.44925_651 <= 95)

best_te_652 : --> single use.
best_te_1625 = PHI <best_te_1730(287), best_te_1685(295), best_te_652(292), best_te_681(222)>

D.44928_654 : --> single use.
D.44929_655 = (int) D.44928_654;

D.44929_655 : --> single use.
match_656 = D.44925_651 == D.44929_655;

match_656 : -->2 uses.
pretmp.1054_1880 = (_Bool) match_656;
match_1 = PHI <match_656(262), prephitmp.1045_1679(267), prephitmp.1045_1679(268)>
# DEBUG match => match_656

D.44927_657 : --> single use.
D.44945_658 = strcasecmp (rm_encoding_130, D.44927_657);

D.44945_658 : --> single use.
if (D.44945_658 == 0)

D.44948_659 : --> single use.
iftmp.93_766 = fmtp_remote_codec_rate_99 == D.44948_659;

D.44956_667 : --> single use.
D.44958_669 = D.44957_668 & D.44956_667;

D.44957_668 : --> single use.
D.44958_669 = D.44957_668 & D.44956_667;

D.44958_669 : --> single use.
if (D.44958_669 != 0)

.MEM_670 : --> single use.
.MEM_1858 = PHI <.MEM_1107(101), .MEM_670(463)>

D.44961_671 : --> single use.
if (D.44961_671 != 0)

got_avp_672 : -->6 uses.
got_avp_68 = PHI <got_avp_672(132), got_avp_672(135), got_avp_672(138), got_avp_388(136), got_avp_672(133)>
got_avp_68 = PHI <got_avp_672(132), got_avp_672(135), got_avp_672(138), got_avp_388(136), got_avp_672(133)>
got_avp_68 = PHI <got_avp_672(132), got_avp_672(135), got_avp_672(138), got_avp_388(136), got_avp_672(133)>
got_avp_1741 = PHI <got_avp_68(140), got_avp_672(139)>
# DEBUG got_avp => got_avp_672
got_avp_388 = got_avp_672 + 1;
got_avp_68 = PHI <got_avp_672(132), got_avp_672(135), got_avp_672(138), got_avp_388(136), got_avp_672(133)>

D.44964_673 : --> single use.
if (D.44964_673 != 0)

D.44969_676 : --> single use.
D.44970_677 = D.44969_676 & prephitmp.1041_750;

D.44970_677 : --> single use.
if (D.44970_677 != 0)

D.44973_678 : --> single use.
D.44975_680 = D.44974_679 & D.44973_678;

D.44974_679 : --> single use.
D.44975_680 = D.44974_679 & D.44973_678;

D.44975_680 : --> single use.
if (D.44975_680 != 0)

best_te_681 : -->9 uses.
best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
best_te_1625 = PHI <best_te_1730(287), best_te_1685(295), best_te_652(292), best_te_681(222)>
best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
best_te_1899 = PHI <best_te_19(294), best_te_681(223)>
# DEBUG best_te => best_te_681
best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>

D.44978_682 : --> single use.
if (D.44978_682 == 0)

nm_idx_683 : --> single use.
nm_idx_119 = PHI <nm_idx_1708(287), nm_idx_683(295), nm_idx_1793(292), nm_idx_1750(222)>

D.44980_684 : --> single use.
if (D.44980_684 == 0)

D.44927_686 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44927_686, D.44985_687, D.44931_689);

D.44985_687 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44927_686, D.44985_687, D.44931_689);

D.44930_688 : --> single use.
D.44931_689 = D.44930_688 / 1000;

D.44931_689 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44927_686, D.44985_687, D.44931_689);

D.44990_690 : --> single use.
D.44992_692 = D.44991_691 & D.44990_690;

D.44991_691 : --> single use.
D.44992_692 = D.44991_691 & D.44990_690;

D.44992_692 : --> single use.
if (D.44992_692 != 0)

D.44994_693 : --> single use.
if (D.44994_693 != D.44930_694)

D.44930_694 : -->2 uses.
prephitmp.1043_1681 = PHI <D.44930_694(282), pretmp.1042_1737(284)>
if (D.44994_693 != D.44930_694)

D.44927_696 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927_696, D.44929_698, codec_rate_633, D.44931_700, bit_rate_632);

D.44928_697 : --> single use.
D.44929_698 = (int) D.44928_697;

D.44929_698 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927_696, D.44929_698, codec_rate_633, D.44931_700, bit_rate_632);

D.44931_700 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927_696, D.44929_698, codec_rate_633, D.44931_700, bit_rate_632);

remote_codec_rate.92_701 : --> single use.
near_matches[nm_idx_1140].rate = remote_codec_rate.92_701;

nm_idx_702 : --> single use.
nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
# DEBUG nm_idx => nm_idx_702

codec_rate.94_703 : --> single use.
matches[m_idx_1488].rate = codec_rate.94_703;

m_idx_704 : -->3 uses.
m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>
m_idx_1799 = PHI <m_idx_704(286)>
if (m_idx_704 > 29)
# DEBUG m_idx => m_idx_704

D.44927_705 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927_705, D.44929_707, codec_rate_633, D.44931_709, bit_rate_632);

D.44928_706 : --> single use.
D.44929_707 = (int) D.44928_706;

D.44929_707 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927_705, D.44929_707, codec_rate_633, D.44931_709, bit_rate_632);

D.44930_708 : --> single use.
D.44931_709 = D.44930_708 / 1000;

D.44931_709 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927_705, D.44929_707, codec_rate_633, D.44931_709, bit_rate_632);

i_711 : -->3 uses.
i_1623 = PHI <i_711(289), 0(257)>
D.44999_625 = total_codecs_85 > i_711;
D.44998_624 = D.44997_623 > i_711;
# DEBUG i => i_711
# DEBUG i => i_711

map_712 : -->2 uses.
map_1729 = PHI <map_712(294), map_559(223)>
# DEBUG map => map_712
if (map_712 != 0B)
# DEBUG map => map_712

D.45002_713 : --> single use.
D.45003_714 = D.45002_713 == 1;

D.45003_714 : --> single use.
D.45005_716 = D.45004_715 & D.45003_714;

D.45004_715 : --> single use.
D.45005_716 = D.45004_715 & D.45003_714;

D.45005_716 : --> single use.
if (D.45005_716 != 0)

D.45008_720 : --> single use.
D.45010_722 = D.45009_721 & D.45008_720;

D.45009_721 : --> single use.
D.45010_722 = D.45009_721 & D.45008_720;

D.45010_722 : --> single use.
if (D.45010_722 != 0)

near_rate.96_725 : -->3 uses.
near_rate.96_1797 = PHI <near_rate.96_725(306)>
near_rate.96_1798 = PHI <near_rate.96_725(304)>
near_rate_726 = (uint32_t) near_rate.96_725;

near_rate_726 : -->2 uses.
near_rate_145 = PHI <near_rate_730(301), near_rate_726(300)>
if (near_rate_726 == 0)
# DEBUG near_rate => near_rate_726

near_match_727 : -->3 uses.
timp_134 = PHI <timp_733(303), near_match_727(302)>
D.45014_729 = near_match_727->iananame;
near_rate_730 = near_match_727->samples_per_second;
# DEBUG near_match => near_match_727

near_map_728 : -->2 uses.
near_map_1707 = PHI <near_map_728(306)>
near_map_1731 = PHI <near_map_728(304)>
# DEBUG near_map => near_map_728

D.45014_729 : --> single use.
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45014_729, near_rate_145, codec_ms_93);

near_rate_730 : --> single use.
near_rate_145 = PHI <near_rate_730(301), near_rate_726(300)>

num_732 : --> single use.
if (num_732 != 0)
# DEBUG num => num_732

timp_733 : --> single use.
timp_134 = PHI <timp_733(303), near_match_727(302)>
# DEBUG timp => timp_733

D.45025_735 : --> single use.
D.45026_736 = D.45025_735 / 1000;

D.45026_736 : -->2 uses.
D.45026_1795 = PHI <D.45026_736(306)>
if (D.45026_736 <= maxptime_1041)

j_737 : -->2 uses.
j_1846 = PHI <j_737(310), 0(299)>
if (nm_idx_119 > j_737)
# DEBUG j => j_737
# DEBUG j => j_737

D.45027_738 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45027_738, prephitmp.1039_858, D.45028_741);

D.45028_741 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45027_738, prephitmp.1039_858, D.45028_741);

D.45029_743 : --> single use.
matches[0].codec_idx = D.45029_743;

got_video_crypto_744 : --> single use.
got_video_crypto_1886 = PHI <got_video_crypto_744(484), got_video_crypto_60(411)>

pretmp.916_745 : --> no uses.

D.45035_748 : -->3 uses.
D.45038_753 = D.45035_748->rm_pt;
D.45037_751 = D.45035_748->rm_fmtp;
D.45036_749 = D.45035_748->rm_encoding;

D.45036_749 : --> single use.
pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);

prephitmp.1041_750 : --> single use.
D.44970_677 = D.44969_676 & prephitmp.1041_750;

D.45037_751 : --> single use.
pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);

D.45038_753 : --> single use.
D.45039_754 = (uint32_t) D.45038_753;

D.45039_754 : --> single use.
pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);

D.45040_755 : -->2 uses.
D.45042_758 = D.45040_755->microseconds_per_packet;
D.45041_756 = D.45040_755->samples_per_second;

D.45041_756 : --> single use.
pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);

D.45042_758 : --> single use.
D.45043_759 = D.45042_758 / 1000;

D.45043_759 : --> single use.
D.45044_760 = (uint32_t) D.45043_759;

D.45044_760 : --> single use.
pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);

pmap_761 : -->22 uses.
pmap_761->iananame = D.45053_771;
pmap_761->recv_pt = D.45055_773;
pmap_761->rm_rate = D.45056_774;
pmap_761->adv_rm_rate = D.45056_774;
pmap_761->rm_rate = D.45060_778;
pmap_761->codec_ms = D.45063_781;
pmap_761->bitrate = D.45065_783;
pmap_761->channels = D.47923_146;
pmap_761->adv_channels = 1;
pmap_761->adv_channels = 2;
pmap_761->channels = 2;
pmap_761->channels = 1;
pmap_761->adv_channels = D.47923_146;
pmap_761->remote_sdp_ip = D.45087_797;
pmap_761->remote_sdp_port = D.45088_799;
pmap_761->rm_fmtp = D.45089_801;
pmap_761->agreed_pt = D.45055_803;
pmap_761->recv_pt = D.45055_807;
D.45049_767 = pmap_761->pt;
pmap_761->current = 1;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_761;
pmap_761->rm_encoding = D.45051_769;
# DEBUG pmap => pmap_761

mimp_762 : -->7 uses.
D.45052_776 = mimp_762->iananame;
D.45056_774 = mimp_762->samples_per_second;
D.45052_770 = mimp_762->iananame;
D.45064_782 = mimp_762->bits_per_second;
D.45061_779 = mimp_762->microseconds_per_packet;
D.45060_778 = mimp_762->actual_samples_per_second;
smh_186->negotiated_codecs[D.44655_804] = mimp_762;
# DEBUG mimp => mimp_762

mmap_763 : -->8 uses.
D.45054_772 = mmap_763->rm_pt;
D.45050_768 = mmap_763->rm_encoding;
D.45067_784 = mmap_763->rm_params;
D.45050_788 = mmap_763->rm_encoding;
D.45054_802 = mmap_763->rm_pt;
D.45080_800 = mmap_763->rm_fmtp;
D.45080_791 = mmap_763->rm_fmtp;
D.45054_806 = mmap_763->rm_pt;
# DEBUG mmap => mmap_763

pretmp.1044_764 : -->2 uses.
pretmp.1046_1736 = (_Bool) pretmp.1044_764;
prephitmp.1045_1679 = PHI <pretmp.1044_764(266), 0(263), 1(265)>

D.44605_765 : -->2 uses.
switch_rtp_set_default_payload (D.44605_765, D.45049_767);
if (D.44605_765 != 0B)

iftmp.93_766 : --> single use.
pretmp.1044_764 = (uint8_t) iftmp.93_766;

D.45049_767 : --> single use.
switch_rtp_set_default_payload (D.44605_765, D.45049_767);

D.45050_768 : --> single use.
D.45051_769 = switch_core_perform_session_strdup (session_161(D), D.45050_768, "src/switch_core_media.c", &__func__, 3535);

D.45051_769 : --> single use.
pmap_761->rm_encoding = D.45051_769;

D.45052_770 : --> single use.
D.45053_771 = switch_core_perform_session_strdup (session_161(D), D.45052_770, "src/switch_core_media.c", &__func__, 3536);

D.45053_771 : --> single use.
pmap_761->iananame = D.45053_771;

D.45054_772 : --> single use.
D.45055_773 = (unsigned char) D.45054_772;

D.45055_773 : --> single use.
pmap_761->recv_pt = D.45055_773;

D.45056_774 : -->2 uses.
pmap_761->adv_rm_rate = D.45056_774;
pmap_761->rm_rate = D.45056_774;

got_udptl_775 : -->2 uses.
got_udptl_1744 = PHI <got_udptl_1869(140), got_udptl_775(141), got_udptl_775(142)>
got_udptl_1744 = PHI <got_udptl_1869(140), got_udptl_775(141), got_udptl_775(142)>

D.45052_776 : --> single use.
D.45057_777 = strcasecmp (D.45052_776, "g722");

D.45057_777 : --> single use.
if (D.45057_777 != 0)

D.45060_778 : --> single use.
pmap_761->rm_rate = D.45060_778;

D.45061_779 : --> single use.
D.45062_780 = D.45061_779 / 1000;

D.45062_780 : --> single use.
D.45063_781 = (uint32_t) D.45062_780;

D.45063_781 : --> single use.
pmap_761->codec_ms = D.45063_781;

D.45064_782 : --> single use.
D.45065_783 = (uint32_t) D.45064_782;

D.45065_783 : --> single use.
pmap_761->bitrate = D.45065_783;

D.45067_784 : -->2 uses.
# DEBUG __nptr => D.45067_784
D.47923_1486 = strtol (D.45067_784, 0B, 10);
if (D.45067_784 != 0B)

pretmp.1046_785 : --> single use.
pretmp.1046_790 = pretmp.1046_785 & pretmp.1046_1736;

D.45050_788 : --> single use.
D.45071_789 = strcasecmp (D.45050_788, "opus");

D.45071_789 : --> single use.
if (D.45071_789 == 0)

pretmp.1046_790 : --> single use.
prephitmp.1047_1678 = PHI <pretmp.1046_790(266), 0(263), pretmp.1046_1812(265)>

D.45080_791 : -->3 uses.
D.47927_1487 = *D.45080_791;
D.45083_794 = switch_stristr ("stereo=1", D.45080_791);
if (D.45080_791 == 0B)
# DEBUG s => D.45080_791

m_idx_793 : -->7 uses.
m_idx_102 = PHI <m_idx_527(290), m_idx_793(256)>
m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
m_idx_1488 = PHI <m_idx_100(289), m_idx_793(257)>
# DEBUG m_idx => m_idx_793
m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>

D.45083_794 : --> single use.
if (D.45083_794 != 0B)

.MEM_795 : --> single use.
.MEM_1102 = PHI <.MEM_1199(46), .MEM_795(460), .MEM_1201(56)>

D.45086_796 : --> single use.
D.45087_797 = switch_core_perform_session_strdup (session_161(D), D.45086_796, "src/switch_core_media.c", &__func__, 3563);

D.45087_797 : --> single use.
pmap_761->remote_sdp_ip = D.45087_797;

D.44697_798 : --> single use.
D.45088_799 = (short unsigned int) D.44697_798;

D.45088_799 : --> single use.
pmap_761->remote_sdp_port = D.45088_799;

D.45080_800 : --> single use.
D.45089_801 = switch_core_perform_session_strdup (session_161(D), D.45080_800, "src/switch_core_media.c", &__func__, 3565);

D.45089_801 : --> single use.
pmap_761->rm_fmtp = D.45089_801;

D.45054_802 : --> single use.
D.45055_803 = (unsigned char) D.45054_802;

D.45055_803 : --> single use.
pmap_761->agreed_pt = D.45055_803;

D.44655_804 : -->2 uses.
D.45090_805 = D.44655_804 + 1;
smh_186->negotiated_codecs[D.44655_804] = mimp_762;

D.45090_805 : --> single use.
smh_186->num_negotiated_codecs = D.45090_805;

D.45054_806 : --> single use.
D.45055_807 = (unsigned char) D.45054_806;

D.45055_807 : --> single use.
pmap_761->recv_pt = D.45055_807;

j_808 : -->2 uses.
j_1882 = PHI <j_808(333), 0(315)>
# DEBUG j => j_808
if (j_808 < m_idx_1716)
# DEBUG j => j_808

D.44750_809 : --> single use.
D.44762_810 = D.44750_809->remote_sdp_port;

D.44762_810 : --> single use.
D.44767_811 = (int) D.44762_810;

D.44767_811 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.44767_811);

D.44530_812 : --> single use.
switch_channel_set_variable_var_check (D.44530_812, "remote_media_ip", D.44760_814, 1);

D.44750_813 : --> single use.
D.44760_814 = D.44750_813->remote_sdp_ip;

D.44760_814 : --> single use.
switch_channel_set_variable_var_check (D.44530_812, "remote_media_ip", D.44760_814, 1);

D.44530_815 : --> single use.
switch_channel_set_variable_var_check (D.44530_815, "remote_media_port", &tmp, 1);

D.44750_816 : --> single use.
D.45093_817 = D.44750_816->recv_pt;

D.45093_817 : --> single use.
D.45094_818 = (int) D.45093_817;

D.45094_818 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45094_818);

D.44530_819 : --> single use.
switch_channel_set_variable_var_check (D.44530_819, "rtp_audio_recv_pt", &tmp, 1);

m_idx_820 : -->2 uses.
m_idx_954 = PHI <m_idx_538(430), m_idx_820(415)>
m_idx_911 = PHI <m_idx_109(429), m_idx_820(416)>
# DEBUG m_idx => m_idx_820

D.44471_822 : --> single use.
D.45099_823 = D.44471_822->codec_flags;

D.45099_823 : --> single use.
D.45100_824 = switch_core_media_set_codec (session_161(D), 0, D.45099_823);

D.45100_824 : --> single use.
if (D.45100_824 == 0)

D.45108_827 : --> single use.
if (D.45108_827 != 0)

D.44530_828 : --> single use.
D.45110_829 = switch_channel_test_flag (D.44530_828, 93);

D.45110_829 : --> single use.
if (D.45110_829 != 0)

D.44471_830 : --> single use.
D.45111_831 = D.44471_830->te;

D.45111_831 : --> single use.
D.45112_832 = (int) D.45111_831;

D.45112_832 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45112_832);

D.44471_833 : --> single use.
best_te_834 = D.44471_833->te;

best_te_834 : -->2 uses.
best_te_1861 = PHI <best_te_834(345), best_te_1625(342)>
# DEBUG best_te => best_te_834
if (best_te_834 != 0)
# DEBUG best_te => best_te_834

D.45115_835 : --> single use.
if (D.45115_835 == 1)

D.44471_836 : --> single use.
# DEBUG D#11 => D.44471_836->te
D.44471_836->te = best_te_1861;

D.44857_838 : -->2 uses.
switch_channel_set_variable_printf (D.44530_843, "rtp_2833_send_payload", "%d", D.44857_838);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_838);

D.44530_839 : --> single use.
switch_channel_set_variable_var_check (D.44530_839, "dtmf_type", "rfc2833", 1);

D.44471_840 : --> single use.
D.44471_840->dtmf_type = 0;

D.44605_841 : -->2 uses.
switch_rtp_set_telephony_event (D.44605_841, best_te_1861);
if (D.44605_841 != 0B)

nm_idx_842 : -->2 uses.
nm_idx_844 = PHI <nm_idx_1745(334), nm_idx_842(341), nm_idx_842(340)>
nm_idx_844 = PHI <nm_idx_1745(334), nm_idx_842(341), nm_idx_842(340)>

D.44530_843 : --> single use.
switch_channel_set_variable_printf (D.44530_843, "rtp_2833_send_payload", "%d", D.44857_838);

nm_idx_844 : -->6 uses.
nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>

D.44471_846 : -->2 uses.
D.44471_846->recv_te = best_te_1861;
D.44471_846->te = best_te_1861;

pretmp.1038_847 : --> single use.
prephitmp.1039_858 = PHI <pretmp.1038_847(305), D.45026_1795(307)>

pretmp.909_848 : --> no uses.

D.45121_849 : -->3 uses.
switch_channel_set_variable_printf (D.44530_854, "rtp_2833_send_payload", "%d", D.45121_849);
switch_channel_set_variable_printf (D.44530_857, "rtp_2833_recv_payload", "%d", D.45121_849);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45121_849);

D.44530_850 : --> single use.
switch_channel_set_variable_var_check (D.44530_850, "dtmf_type", "rfc2833", 1);

D.44471_851 : --> single use.
D.44471_851->dtmf_type = 0;

D.44605_852 : -->2 uses.
switch_rtp_set_telephony_event (D.44605_852, best_te_1861);
if (D.44605_852 != 0B)

pretmp.999_853 : --> no uses.

D.44530_854 : --> single use.
switch_channel_set_variable_printf (D.44530_854, "rtp_2833_send_payload", "%d", D.45121_849);

pretmp.999_855 : --> no uses.

D.44605_856 : --> single use.
switch_rtp_set_telephony_recv_event (D.44605_856, best_te_1861);

D.44530_857 : --> single use.
switch_channel_set_variable_printf (D.44530_857, "rtp_2833_recv_payload", "%d", D.45121_849);

prephitmp.1039_858 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45027_738, prephitmp.1039_858, D.45028_741);

D.45125_859 : -->10 uses.
D.49736_1601 = strcasecmp (D.45125_859, "no");
D.49737_1602 = strcasecmp (D.45125_859, "off");
D.49738_1603 = strcasecmp (D.45125_859, "false");
D.49739_1604 = strcasecmp (D.45125_859, "f");
D.49740_1605 = strcasecmp (D.45125_859, "disabled");
D.49741_1606 = strcasecmp (D.45125_859, "inactive");
D.49742_1607 = strcasecmp (D.45125_859, "disallow");
D.49743_1608 = switch_is_number (D.45125_859);
# DEBUG __nptr => D.45125_859
D.49744_1609 = strtol (D.45125_859, 0B, 10);
if (D.45125_859 != 0B)
# DEBUG expr => D.45125_859

pretmp.1000_860 : --> no uses.

D.44530_861 : --> single use.
switch_channel_set_variable_var_check (D.44530_861, "dtmf_type", "info", 1);

D.44471_862 : -->3 uses.
D.44471_862->te = 0;
# DEBUG D#12 => D.44471_862->recv_te
D.44471_862->recv_te = 0;
D.44471_862->dtmf_type = 1;

sendonly_864 : --> single use.
sendonly_1007 = PHI <sendonly_864(82), sendonly_42(63)>

i_865 : -->2 uses.
i.99_983 = (unsigned int) i_865;
i_1021 = i_865 + 1;

D.44530_867 : --> single use.
switch_channel_set_variable_var_check (D.44530_867, "dtmf_type", "none", 1);

D.44471_868 : -->3 uses.
D.44471_868->te = 0;
# DEBUG D#13 => D.44471_868->recv_te
D.44471_868->recv_te = 0;
D.44471_868->dtmf_type = 2;

recvonly_870 : --> single use.
pretmp.1025_1684 = recvonly_870 != 1;

.MEM_871 : -->5 uses.
.MEM_1161 = PHI <.MEM_871(417), .MEM_1421(419), .MEM_1422(426), .MEM_1422(425), .MEM_1425(427)>
# VUSE <.MEM_871>
D.45239_987 = imp_986->codec_type;
# VUSE <.MEM_871>
imp_986 = *D.45238_985;
# .MEM_1420 = VDEF <.MEM_871>
D.45242_989 = switch_channel_direction (D.44530_988);
# VUSE <.MEM_871>
D.44530_988 = session_161(D)->channel;

D.44697_874 : --> single use.
if (D.44697_874 != 0)

D.44530_879 : --> single use.
switch_channel_set_variable_var_check (D.44530_879, "video_possible", "true", 1);

connection_880 : -->2 uses.
connection_110 = PHI <connection_880(365), connection_881(364)>
# DEBUG connection => connection_880
if (connection_880 == 0B)
# DEBUG connection => connection_880

connection_881 : -->2 uses.
connection_110 = PHI <connection_880(365), connection_881(364)>
if (connection_881 != 0B)

pretmp.921_882 : --> no uses.

map_884 : -->2 uses.
map_1621 = PHI <map_1022(432), map_884(368)>
# DEBUG map => map_884
if (map_884 != 0B)
# DEBUG map => map_884

D.45138_885 : --> single use.
if (D.45138_885 != 0)

D.45141_886 : --> single use.
if (D.45141_886 != 0)

attr_887 : -->3 uses.
attr_1163 = PHI <attr_887(483), attr_894(379)>
# DEBUG attr => attr_887
# DEBUG attr => attr_887
attr_1851 = PHI <attr_893(378), attr_887(372)>
# DEBUG attr => attr_887
if (attr_887 != 0B)
# DEBUG attr => attr_887

D.44590_888 : --> single use.
D.45144_889 = strcasecmp (D.44590_888, "fingerprint");

D.45144_889 : --> single use.
if (D.45144_889 == 0)

D.44619_890 : -->2 uses.
D.47940_1496 = *D.44619_890;
if (D.44619_890 == 0B)
# DEBUG s => D.44619_890

attr_893 : -->2 uses.
attr_1851 = PHI <attr_893(378), attr_887(372)>
# DEBUG attr => attr_893
if (attr_893 != 0B)
# DEBUG attr => attr_893

attr_894 : -->2 uses.
attr_1163 = PHI <attr_887(483), attr_894(379)>
# DEBUG attr => attr_894
if (attr_894 != 0B)
# DEBUG attr => attr_894

D.44590_895 : -->4 uses.
D.45152_896 = strcasecmp (D.44590_895, "framerate");
D.45155_899 = strcasecmp (D.44590_895, "rtcp-fb");
D.45220_962 = strcasecmp (D.44590_895, "crypto");
D.45169_908 = strcasecmp (D.44590_895, "rtcp");

D.45152_896 : --> single use.
if (D.45152_896 == 0)

D.44619_897 : --> single use.
if (D.44619_897 != 0B)

got_crypto_898 : --> single use.
got_crypto_141 = PHI <got_crypto_898(481), got_crypto_1867(185)>
# DEBUG got_crypto => got_crypto_898
# DEBUG got_crypto => got_crypto_898

D.45155_899 : --> single use.
if (D.45155_899 == 0)

D.44619_900 : -->3 uses.
D.47944_1498 = *D.44619_900;
D.45161_903 = switch_stristr ("fir", D.44619_900);
if (D.44619_900 == 0B)
# DEBUG s => D.44619_900

nm_idx_902 : -->2 uses.
nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
nm_idx_1793 = PHI <nm_idx_902(291)>

D.45161_903 : --> single use.
if (D.45161_903 != 0B)

D.45164_904 : --> single use.
D.45165_905 = D.45164_904 + 1;

D.45165_905 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45165_905;

D.44471_906 : --> single use.
D.44471_906->rtcp_video_interval_msec = "10000";

m_idx_907 : -->5 uses.
m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
if (m_idx_907 > j_1068)
greedy_sort (smh_186, &matches, m_idx_907, codec_array_84, total_codecs_85);
if (m_idx_907 != 0)
# DEBUG m_idx => m_idx_907

D.45169_908 : --> single use.
if (D.45169_908 == 0)

D.44619_909 : -->4 uses.
# DEBUG __s1 => D.44619_909
D.45175_912 = MEM[(const unsigned char *)D.44619_909];
D.45186_922 = MEM[(const unsigned char *)D.44619_909 + 1B];
switch_channel_set_variable_var_check (D.44530_953, "rtp_remote_video_rtcp_port", D.44619_909, 1);
if (D.44619_909 != 0B)

m_idx_911 : -->7 uses.
m_idx_109 = PHI <m_idx_911(417), m_idx_911(419), m_idx_911(426), m_idx_911(425), m_idx_1019(427)>
m_idx_109 = PHI <m_idx_911(417), m_idx_911(419), m_idx_911(426), m_idx_911(425), m_idx_1019(427)>
m_idx_109 = PHI <m_idx_911(417), m_idx_911(419), m_idx_911(426), m_idx_911(425), m_idx_1019(427)>
m_idx_109 = PHI <m_idx_911(417), m_idx_911(419), m_idx_911(426), m_idx_911(425), m_idx_1019(427)>
m_idx_1019 = m_idx_911 + 1;
matches[m_idx_911].map = map_1621;
matches[m_idx_911].imp = imp_986;

D.45175_912 : --> single use.
# DEBUG D#78 => (int) D.45175_912
if (D.45175_912 == 49)

dmaxptime_913 : --> single use.
dmaxptime_1006 = PHI <dmaxptime_913(82), 0(63)>

maxptime_917 : --> single use.
maxptime_1041 = PHI <maxptime_917(215), dmaxptime_1006(185), dmaxptime_1006(177)>

D.45186_922 : --> single use.
# DEBUG D#79 => (int) D.45186_922
if (D.45186_922 == 0)

attr_923 : --> single use.
attr_1600 = PHI <attr_923(482), attr_548(214)>

D.44530_953 : --> single use.
switch_channel_set_variable_var_check (D.44530_953, "rtp_remote_video_rtcp_port", D.44619_909, 1);

m_idx_954 : -->2 uses.
m_idx_820 = PHI <m_idx_954(432), 0(368)>
m_idx_1796 = PHI <m_idx_954(431)>
# DEBUG m_idx => m_idx_954

D.44619_955 : --> single use.
D.47947_1500 = strtol (D.44619_955, 0B, 10);
# DEBUG __nptr => D.44619_955

D.45214_957 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45214_957;

D.44471_958 : -->2 uses.
D.44471_958->rtcp_video_interval_msec = "5000";
D.45215_959 = D.44471_958->rtcp_video_interval_msec;

D.45215_959 : --> single use.
if (D.45215_959 == 0B)

got_video_crypto_960 : -->5 uses.
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
D.45267_1025 = got_video_crypto_960 <= 0;
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>

got_video_crypto_961 : -->2 uses.
got_video_crypto_556 = PHI <got_video_crypto_961(432), got_video_crypto_1675(368)>
got_video_crypto_1789 = PHI <got_video_crypto_961(431)>
# DEBUG got_video_crypto => got_video_crypto_961

D.45220_962 : --> single use.
if (D.45220_962 == 0)

D.44619_963 : -->3 uses.
prephitmp.1031_1813 = PHI <D.44619_963(477), pretmp.1030_1890(407), pretmp.1030_1891(479)>
D.47951_1501 = *D.44619_963;
if (D.44619_963 == 0B)
# DEBUG s => D.44619_963

D.44471_965 : --> single use.
D.44821_966 = D.44471_965->ndlb;

D.44821_966 : --> single use.
D.44822_967 = D.44821_966 & 4;

D.44822_967 : --> single use.
if (D.44822_967 == 0)

D.44530_968 : --> single use.
D.45228_969 = switch_channel_get_variable_dup (D.44530_968, "rtp_allow_crypto_in_avp", 1, -1);

D.45228_969 : -->10 uses.
D.49748_1611 = strcasecmp (D.45228_969, "yes");
D.49749_1612 = strcasecmp (D.45228_969, "on");
D.49750_1613 = strcasecmp (D.45228_969, "true");
D.49751_1614 = strcasecmp (D.45228_969, "t");
D.49752_1615 = strcasecmp (D.45228_969, "enabled");
D.49753_1616 = strcasecmp (D.45228_969, "active");
D.49754_1617 = strcasecmp (D.45228_969, "allow");
D.49755_1618 = switch_is_number (D.45228_969);
# DEBUG __nptr => D.45228_969
D.49756_1619 = strtol (D.45228_969, 0B, 10);
if (D.45228_969 != 0B)
# DEBUG expr => D.45228_969

got_crypto_970 : -->8 uses.
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
D.44834_549 = got_crypto_970 == -1;
D.45004_715 = got_crypto_970 <= 0;
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>

D.44666_971 : --> single use.
D.44829_972 = D.44666_971 != 257;

D.44829_972 : --> single use.
D.44831_974 = D.44830_973 & D.44829_972;

D.44830_973 : --> single use.
D.44831_974 = D.44830_973 & D.44829_972;

D.44831_974 : --> single use.
if (D.44831_974 != 0)

got_video_crypto_978 : --> single use.
got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
# DEBUG got_video_crypto => got_video_crypto_978

attr_979 : -->2 uses.
attr_620 = PHI <attr_1163(484), attr_979(411)>
# DEBUG attr => attr_979
if (attr_979 != 0B)
# DEBUG attr => attr_979

rm_encoding_980 : -->2 uses.
rm_encoding_137 = PHI <rm_encoding_980(413), ""(414)>
if (rm_encoding_980 == 0B)
# DEBUG rm_encoding => rm_encoding_980

i.99_983 : --> single use.
D.45237_984 = i.99_983 * 4;

D.45237_984 : --> single use.
D.45238_985 = codec_array_84 + D.45237_984;

D.45238_985 : --> single use.
imp_986 = *D.45238_985;

imp_986 : -->9 uses.
D.45239_987 = imp_986->codec_type;
D.45251_995 = imp_986->ianacode;
D.45250_994 = imp_986->iananame;
D.45251_1008 = imp_986->ianacode;
D.45250_1011 = imp_986->iananame;
D.45264_1015 = imp_986->samples_per_second;
matches[m_idx_911].imp = imp_986;
D.45250_1016 = imp_986->iananame;
D.45251_1017 = imp_986->ianacode;
# DEBUG imp => imp_986

D.45239_987 : --> single use.
if (D.45239_987 != 1)

D.44530_988 : --> single use.
D.45242_989 = switch_channel_direction (D.44530_988);

D.45242_989 : --> single use.
if (D.45242_989 == 0)

D.44530_990 : --> single use.
D.45245_991 = switch_channel_test_flag (D.44530_990, 114);

D.45245_991 : --> single use.
if (D.45245_991 != 0)

D.45248_992 : --> single use.
D.45249_993 = (int) D.45248_992;

D.45249_993 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45249_993, D.45250_994, D.45252_996);

D.45250_994 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45249_993, D.45250_994, D.45252_996);

D.45251_995 : --> single use.
D.45252_996 = (int) D.45251_995;

D.45252_996 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45249_993, D.45250_994, D.45252_996);

D.45256_997 : -->2 uses.
D.47958_1504 = *D.45256_997;
if (D.45256_997 == 0B)
# DEBUG s => D.45256_997

D.44471_999 : --> single use.
D.44821_1000 = D.44471_999->ndlb;

D.44821_1000 : --> single use.
D.44937_1001 = (int) D.44821_1000;

D.44937_1001 : --> single use.
D.44938_1002 = D.44937_1001 & 1;

D.44938_1002 : --> single use.
if (D.44938_1002 != 0)

D.45248_1004 : --> single use.
D.45249_1005 = (int) D.45248_1004;

D.45249_1005 : -->2 uses.
vmatch_1010 = D.45249_1005 == D.45252_1009;
if (D.45249_1005 <= 95)

dmaxptime_1006 : -->3 uses.
maxptime_1041 = PHI <maxptime_917(215), dmaxptime_1006(185), dmaxptime_1006(177)>
maxptime_1041 = PHI <maxptime_917(215), dmaxptime_1006(185), dmaxptime_1006(177)>
maxptime_1471 = PHI <dmaxptime_1006(482), maxptime_38(214)>
# DEBUG maxptime => dmaxptime_1006
# DEBUG maxptime => dmaxptime_1006
# DEBUG maxptime => dmaxptime_1006

sendonly_1007 : -->2 uses.
D.44624_335 = sendonly_1007 != 1;
D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_1007);

D.45251_1008 : --> single use.
D.45252_1009 = (int) D.45251_1008;

D.45252_1009 : --> single use.
vmatch_1010 = D.45249_1005 == D.45252_1009;

vmatch_1010 : --> single use.
vmatch_138 = PHI <vmatch_1010(423), vmatch_1013(424)>
# DEBUG vmatch => vmatch_1010

D.45250_1011 : --> single use.
D.45260_1012 = strcasecmp (rm_encoding_137, D.45250_1011);

D.45260_1012 : --> single use.
vmatch_1013 = D.45260_1012 == 0;

vmatch_1013 : --> single use.
vmatch_138 = PHI <vmatch_1010(423), vmatch_1013(424)>
# DEBUG vmatch => vmatch_1013

D.45263_1014 : --> single use.
if (D.45263_1014 == D.45264_1015)

D.45264_1015 : --> single use.
if (D.45263_1014 == D.45264_1015)

D.45250_1016 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45250_1016, D.45252_1018);

D.45251_1017 : --> single use.
D.45252_1018 = (int) D.45251_1017;

D.45252_1018 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45250_1016, D.45252_1018);

m_idx_1019 : --> single use.
m_idx_109 = PHI <m_idx_911(417), m_idx_911(419), m_idx_911(426), m_idx_911(425), m_idx_1019(427)>
# DEBUG m_idx => m_idx_1019

i_1021 : -->2 uses.
i_865 = PHI <i_1021(429), 0(416)>
# DEBUG i => i_1021
if (total_codecs_85 > i_1021)
# DEBUG i => i_1021

map_1022 : -->2 uses.
map_1621 = PHI <map_1022(432), map_884(368)>
# DEBUG map => map_1022
if (map_1022 != 0B)
# DEBUG map => map_1022

D.45002_1023 : --> single use.
D.45003_1024 = D.45002_1023 == 1;

D.45003_1024 : --> single use.
D.45268_1026 = D.45267_1025 & D.45003_1024;

D.45267_1025 : --> single use.
D.45268_1026 = D.45267_1025 & D.45003_1024;

D.45268_1026 : --> single use.
if (D.45268_1026 != 0)

D.45275_1032 : -->3 uses.
D.45278_1037 = D.45275_1032->rm_pt;
D.45277_1035 = D.45275_1032->rm_fmtp;
D.45276_1033 = D.45275_1032->rm_encoding;

D.45276_1033 : --> single use.
pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);

ptime_1034 : -->7 uses.
codec_ms_87 = PHI <codec_ms_1884(469), codec_ms_589(239), ptime_1034(238)>
codec_ms_1884 = PHI <maxptime_1041(468), ptime_1034(237)>
if (ptime_1034 == 0)
# DEBUG codec_ms => ptime_1034
D.44990_690 = ptime_1034 != 0;
if (ptime_1034 == 0)
D.44878_583 = ptime_1034 > maxptime_1041;
D.44877_582 = ptime_1034 == 0;
# DEBUG codec_ms => ptime_1034

D.45277_1035 : --> single use.
pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);

dptime_1036 : -->3 uses.
ptime_1034 = PHI <ptime_376(215), dptime_1036(185), dptime_1036(177)>
ptime_1034 = PHI <ptime_376(215), dptime_1036(185), dptime_1036(177)>
ptime_1476 = PHI <dptime_1036(482), ptime_34(214)>
# DEBUG ptime => dptime_1036
# DEBUG ptime => dptime_1036
# DEBUG ptime => dptime_1036

D.45278_1037 : --> single use.
D.45279_1038 = (uint32_t) D.45278_1037;

D.45279_1038 : --> single use.
pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);

D.45280_1039 : -->2 uses.
D.45282_1042 = D.45280_1039->microseconds_per_packet;
D.45281_1040 = D.45280_1039->samples_per_second;

D.45281_1040 : --> single use.
pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);

maxptime_1041 : -->5 uses.
codec_ms_1884 = PHI <maxptime_1041(468), ptime_1034(237)>
if (D.45026_736 <= maxptime_1041)
D.44878_583 = ptime_1034 > maxptime_1041;
if (maxptime_1041 == 0)
if (maxptime_1041 != 0)

D.45282_1042 : --> single use.
D.45283_1043 = D.45282_1042 / 1000;

D.45283_1043 : --> single use.
D.45284_1044 = (uint32_t) D.45283_1043;

D.45284_1044 : --> single use.
pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);

pmap_1045 : -->11 uses.
pmap_1045->recv_pt = D.45293_1055;
pmap_1045->rm_rate = D.45263_1056;
pmap_1045->codec_ms = D.45296_1059;
pmap_1045->remote_sdp_ip = D.45297_1061;
pmap_1045->remote_sdp_port = D.45088_1063;
pmap_1045->rm_fmtp = D.45299_1065;
pmap_1045->agreed_pt = D.45293_1067;
D.45291_1049 = pmap_1045->pt;
pmap_1045->current = 1;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1045;
pmap_1045->rm_encoding = D.45292_1053;
# DEBUG pmap => pmap_1045

D.45288_1047 : -->2 uses.
switch_rtp_set_default_payload (D.45288_1047, D.45291_1049);
if (D.45288_1047 != 0B)

cng_pt_1048 : --> single use.
D.44471_1095->cng_pt = cng_pt_1048;

D.45291_1049 : --> single use.
switch_rtp_set_default_payload (D.45288_1047, D.45291_1049);

mimp_1050 : --> single use.
D.45294_1057 = mimp_1050->microseconds_per_packet;
# DEBUG mimp => mimp_1050

map_1051 : -->5 uses.
D.45263_1056 = map_1051->rm_rate;
D.45248_1054 = map_1051->rm_pt;
D.45256_1052 = map_1051->rm_encoding;
D.45298_1064 = map_1051->rm_fmtp;
D.45248_1066 = map_1051->rm_pt;
# DEBUG map => map_1051

D.45256_1052 : --> single use.
D.45292_1053 = switch_core_perform_session_strdup (session_161(D), D.45256_1052, "src/switch_core_media.c", &__func__, 3804);

D.45292_1053 : --> single use.
pmap_1045->rm_encoding = D.45292_1053;

D.45248_1054 : --> single use.
D.45293_1055 = (unsigned char) D.45248_1054;

D.45293_1055 : --> single use.
pmap_1045->recv_pt = D.45293_1055;

D.45263_1056 : --> single use.
pmap_1045->rm_rate = D.45263_1056;

D.45294_1057 : --> single use.
D.45295_1058 = D.45294_1057 / 1000;

D.45295_1058 : --> single use.
D.45296_1059 = (uint32_t) D.45295_1058;

D.45296_1059 : --> single use.
pmap_1045->codec_ms = D.45296_1059;

D.45086_1060 : --> single use.
D.45297_1061 = switch_core_perform_session_strdup (session_161(D), D.45086_1060, "src/switch_core_media.c", &__func__, 3810);

D.45297_1061 : --> single use.
pmap_1045->remote_sdp_ip = D.45297_1061;

D.44697_1062 : --> single use.
D.45088_1063 = (short unsigned int) D.44697_1062;

D.45088_1063 : --> single use.
pmap_1045->remote_sdp_port = D.45088_1063;

D.45298_1064 : --> single use.
D.45299_1065 = switch_core_perform_session_strdup (session_161(D), D.45298_1064, "src/switch_core_media.c", &__func__, 3813);

D.45299_1065 : --> single use.
pmap_1045->rm_fmtp = D.45299_1065;

D.45248_1066 : --> single use.
D.45293_1067 = (unsigned char) D.45248_1066;

D.45293_1067 : --> single use.
pmap_1045->agreed_pt = D.45293_1067;

j_1068 : -->2 uses.
j_1845 = PHI <j_1068(444), 0(439)>
if (m_idx_907 > j_1068)
# DEBUG j => j_1068
# DEBUG j => j_1068

D.45287_1069 : --> single use.
D.45300_1070 = D.45287_1069->remote_sdp_port;

D.45300_1070 : --> single use.
D.45301_1071 = (int) D.45300_1070;

D.45301_1071 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45301_1071);

D.44530_1072 : --> single use.
switch_channel_set_variable_var_check (D.44530_1072, "remote_video_ip", D.45302_1074, 1);

D.45287_1073 : --> single use.
D.45302_1074 = D.45287_1073->remote_sdp_ip;

D.45302_1074 : --> single use.
switch_channel_set_variable_var_check (D.44530_1072, "remote_video_ip", D.45302_1074, 1);

D.44530_1075 : --> single use.
switch_channel_set_variable_var_check (D.44530_1075, "remote_video_port", &tmp, 1);

D.44530_1076 : --> single use.
switch_channel_set_variable_var_check (D.44530_1076, "rtp_video_fmtp", D.45303_1078, 1);

D.45287_1077 : --> single use.
D.45303_1078 = D.45287_1077->rm_fmtp;

D.45303_1078 : --> single use.
switch_channel_set_variable_var_check (D.44530_1076, "rtp_video_fmtp", D.45303_1078, 1);

D.45287_1079 : --> single use.
D.45304_1080 = D.45287_1079->agreed_pt;

D.45304_1080 : --> single use.
D.45305_1081 = (int) D.45304_1080;

D.45305_1081 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45305_1081);

D.44530_1082 : --> single use.
switch_channel_set_variable_var_check (D.44530_1082, "rtp_video_pt", &tmp, 1);

D.45287_1083 : --> single use.
D.45306_1084 = D.45287_1083->recv_pt;

D.45306_1084 : --> single use.
D.45307_1085 = (int) D.45306_1084;

D.45307_1085 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45307_1085);

D.44530_1086 : --> single use.
switch_channel_set_variable_var_check (D.44530_1086, "rtp_video_recv_pt", &tmp, 1);

.MEM_1091 : -->3 uses.
.MEM_1874 = PHI <.MEM_1091(433), .MEM_1406(367)>
.MEM_1873 = PHI <.MEM_1091(432), .MEM_1406(368)>
# VUSE <.MEM_1091>
map_1022 = map_1621->rm_next;

D.45317_1093 : --> single use.
if (D.45317_1093 == 0)

m_1094 : -->2 uses.
m_1765 = PHI <m_1094(455), m_370(125)>
# DEBUG m => m_1094
if (m_1094 != 0B)
# DEBUG m => m_1094

D.44471_1095 : --> single use.
D.44471_1095->cng_pt = cng_pt_1048;

.MEM_1097 : --> single use.
# .MEM_1185 = VDEF <.MEM_1097>
switch_core_session_parse_crypto_prefs (session_161(D));

.MEM_1098 : --> single use.
# .MEM_1189 = VDEF <.MEM_1098>
D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);

.MEM_1099 : -->3 uses.
# .MEM_1193 = VDEF <.MEM_1099>
D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
# VUSE <.MEM_1099>
D.44507_225 = D.44506_224->o_username;
# VUSE <.MEM_1099>
D.44506_224 = sdp_198->sdp_origin;

.MEM_1100 : -->6 uses.
.MEM_1101 = PHI <.MEM_1194(39), .MEM_1100(43), .MEM_1100(44), .MEM_1198(45)>
.MEM_1101 = PHI <.MEM_1194(39), .MEM_1100(43), .MEM_1100(44), .MEM_1198(45)>
# VUSE <.MEM_1100>
D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
# VUSE <.MEM_1100>
D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
# .MEM_1197 = VDEF <.MEM_1100>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
# VUSE <.MEM_1100>
D.44509_240 = smh_186->origin;

.MEM_1101 : -->2 uses.
# .MEM_1199 = VDEF <.MEM_1101>
val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
# VUSE <.MEM_1101>
D.44530_244 = session_161(D)->channel;

.MEM_1102 : -->8 uses.
.MEM_1840 = PHI <.MEM_1103(82), .MEM_1102(63)>
.MEM_1839 = PHI <.MEM_1103(81), .MEM_1102(64)>
# VUSE <.MEM_1102>
m_248 = sdp_198->sdp_media;
# VUSE <.MEM_1102>
attr_303 = sdp_198->sdp_attributes;
# VUSE <.MEM_1102>
__result_300 = __builtin_strcmp (D.44548_256, "0.0.0.0");
# VUSE <.MEM_1102>
D.44548_256 = D.44546_254->c_address;
# VUSE <.MEM_1102>
D.44546_254 = m_248->m_connections;
# VUSE <.MEM_1102>
D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;

.MEM_1103 : -->3 uses.
.MEM_1840 = PHI <.MEM_1103(82), .MEM_1102(63)>
.MEM_1839 = PHI <.MEM_1103(81), .MEM_1102(64)>
# VUSE <.MEM_1103>
attr_334 = attr_1667->a_next;

pretmp.974_1104 : --> no uses.

.MEM_1105 : --> single use.
# .MEM_1212 = VDEF <.MEM_1105>
D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);

.MEM_1106 : -->4 uses.
.MEM_670 = PHI <.MEM_1216(98), .MEM_1106(97), .MEM_1626(96), .MEM_1212(85)>
# VUSE <.MEM_1106>
D.44636_344 = D.44471_343->hold_laps;
# VUSE <.MEM_1106>
D.44471_343 = smh_186->mparams;
# .MEM_1215 = VDEF <.MEM_1106>
D.44471_343->hold_laps = 1;

.MEM_1107 : -->2 uses.
.MEM_1108 = PHI <.MEM_1107(101), .MEM_1221(102), .MEM_1628(113)>
.MEM_1858 = PHI <.MEM_1107(101), .MEM_670(463)>

.MEM_1108 : -->5 uses.
.MEM_1859 = PHI <.MEM_1108(116), .MEM_1223(115)>
# VUSE <.MEM_1108>
D.44649_357 = session_161(D)->bugs;
# VUSE <.MEM_1108>
D.44471_362 = smh_186->mparams;
# .MEM_1224 = VDEF <.MEM_1108>
D.44471_362->num_codecs = 0;
# .MEM_1223 = VDEF <.MEM_1108>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");

.MEM_1109 : -->23 uses.
.MEM_1124 = PHI <.MEM_1109(465), .MEM_1630(210), .MEM_1885(467)>
.MEM_1125 = PHI <.MEM_1295(189), .MEM_1528(192), .MEM_1530(195), .MEM_1109(196), .MEM_1109(197), .MEM_1109(199), .MEM_1299(212), .MEM_1294(188), .MEM_1109(198)>
.MEM_1125 = PHI <.MEM_1295(189), .MEM_1528(192), .MEM_1530(195), .MEM_1109(196), .MEM_1109(197), .MEM_1109(199), .MEM_1299(212), .MEM_1294(188), .MEM_1109(198)>
.MEM_1125 = PHI <.MEM_1295(189), .MEM_1528(192), .MEM_1530(195), .MEM_1109(196), .MEM_1109(197), .MEM_1109(199), .MEM_1299(212), .MEM_1294(188), .MEM_1109(198)>
.MEM_1125 = PHI <.MEM_1295(189), .MEM_1528(192), .MEM_1530(195), .MEM_1109(196), .MEM_1109(197), .MEM_1109(199), .MEM_1299(212), .MEM_1294(188), .MEM_1109(198)>
# VUSE <.MEM_1109>
D.44795_509 = strcasecmp (D.44590_508, "rtcp");
# VUSE <.MEM_1109>
D.44590_508 = attr_1600->a_name;
# VUSE <.MEM_1109>
D.44805_520 = strcasecmp (D.44590_508, "ptime");
# VUSE <.MEM_1109>
D.44810_525 = strcasecmp (D.44590_508, "maxptime");
# .MEM_1296 = VDEF <.MEM_1109>
D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
# VUSE <.MEM_1109>
D.44530_536 = session_161(D)->channel;
# VUSE <.MEM_1109>
D.44821_534 = D.44471_533->ndlb;
# VUSE <.MEM_1109>
D.44471_533 = smh_186->mparams;
# VUSE <.MEM_1109>
D.47901_1475 = *D.44619_531;
# VUSE <.MEM_1109>
D.44619_531 = attr_1600->a_value;
# VUSE <.MEM_1109>
D.44815_530 = strcasecmp (D.44590_508, "crypto");
# .MEM_1530 = VDEF <.MEM_1109>
maxptime_1474 = strtol (D.44619_526, 0B, 10);
# VUSE <.MEM_1109>
D.44619_526 = attr_1600->a_value;
# .MEM_1528 = VDEF <.MEM_1109>
ptime_1473 = strtol (D.44619_521, 0B, 10);
# VUSE <.MEM_1109>
D.44619_521 = attr_1600->a_value;
# .MEM_1293 = VDEF <.MEM_1109>
switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_510, 1);
# VUSE <.MEM_1109>
D.44530_511 = session_161(D)->channel;
# VUSE <.MEM_1109>
D.44619_510 = attr_1600->a_value;

.MEM_1110 : --> single use.
# .MEM_1226 = VDEF <.MEM_1110>
D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));

.MEM_1111 : -->2 uses.
# .MEM_1229 = VDEF <.MEM_1111>
switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);
# VUSE <.MEM_1111>
D.44530_369 = session_161(D)->channel;

.MEM_1112 : --> single use.
# .MEM_1230 = VDEF <.MEM_1112>
switch_core_media_find_zrtp_hash (session_161(D), sdp_198);

.MEM_1113 : -->6 uses.
.MEM_1114 = PHI <.MEM_1113(128), .MEM_1113(129), .MEM_1235(130)>
.MEM_1114 = PHI <.MEM_1113(128), .MEM_1113(129), .MEM_1235(130)>
# VUSE <.MEM_1113>
D.44669_375 = m_1765->m_proto_name;
# VUSE <.MEM_1113>
D.44672_377 = strcasecmp (D.44669_375, "UDP/TLS/RTP/SAVPF");
# .MEM_1235 = VDEF <.MEM_1113>
switch_channel_set_flag_value (D.44530_378, 107, 1);
# VUSE <.MEM_1113>
D.44530_378 = session_161(D)->channel;

.MEM_1114 : -->14 uses.
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>
# .MEM_1236 = VDEF <.MEM_1114>
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_1790);
# VUSE <.MEM_1114>
pretmp.1056_346 = m_1765->m_type;
# VUSE <.MEM_1114>
pretmp.1048_1674 = m_1765->m_type;
# VUSE <.MEM_1114>
D.44675_379 = m_1765->m_proto;
# .MEM_1404 = VDEF <.MEM_1114>
memset (&matches, 0, 480);
# VUSE <.MEM_1114>
D.44697_874 = m_1765->m_port;
# .MEM_1291 = VDEF <.MEM_1114>
D.44781_498 = switch_rtp_has_dtls ();
# VUSE <.MEM_1114>
D.44697_494 = m_1765->m_port;
# VUSE <.MEM_1114>
D.44697_393 = m_1765->m_port;
# VUSE <.MEM_1114>
D.44681_387 = m_1765->m_type;
# VUSE <.MEM_1114>
D.44681_383 = m_1765->m_type;

.MEM_1115 : -->2 uses.
.MEM_1116 = PHI <.MEM_1115(152), .MEM_1245(150)>
# .MEM_1245 = VDEF <.MEM_1115>
pass_409 = switch_true (var_402);

.MEM_1116 : -->2 uses.
.MEM_1117 = PHI <.MEM_1245(151), .MEM_1246(154), .MEM_1116(153)>
.MEM_1855 = PHI <.MEM_1116(153), .MEM_1245(151)>

.MEM_1117 : -->2 uses.
# .MEM_1247 = VDEF <.MEM_1117>
D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
# VUSE <.MEM_1117>
D.44530_415 = session_161(D)->channel;

.MEM_1118 : --> single use.
.MEM_1097 = PHI <.MEM_1180(8), .MEM_1181(9), .MEM_1118(459), .MEM_1184(19)>

got_crypto_1119 : -->9 uses.
got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
if (got_crypto_1119 <= 0)
got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>

.MEM_1120 : -->3 uses.
# .MEM_1266 = VDEF <.MEM_1120>
D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
# VUSE <.MEM_1120>
D.44751_445 = t38_options_394->remote_ip;
# VUSE <.MEM_1120>
D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;

.MEM_1121 : -->2 uses.
# .MEM_1280 = VDEF <.MEM_1121>
switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
# VUSE <.MEM_1121>
other_session.89_481 = other_session;

.MEM_1123 : -->3 uses.
.MEM_1580 = PHI <.MEM_1125(215), .MEM_1123(185), .MEM_1292(177)>
.MEM_114 = PHI <.MEM_1292(481), .MEM_1123(185)>
# VUSE <.MEM_1123>
attr_507 = m_1765->m_attributes;

.MEM_1124 : --> single use.
# .MEM_1533 = VDEF <.MEM_1124>
crypto_tag_1477 = strtol (prephitmp.1031_1893, 0B, 10);

.MEM_1125 : -->3 uses.
.MEM_1580 = PHI <.MEM_1125(215), .MEM_1123(185), .MEM_1292(177)>
.MEM_1109 = PHI <.MEM_114(482), .MEM_1125(214)>
# VUSE <.MEM_1125>
attr_548 = attr_1600->a_next;

pretmp.950_1126 : --> no uses.

pretmp.879_1127 : --> no uses.

pretmp.880_1128 : --> no uses.

.MEM_1129 : -->6 uses.
# VUSE <.MEM_1129>
remote_codec_rate_596 = map_1729->rm_rate;
# VUSE <.MEM_1129>
D.44856_590 = map_1729->rm_pt;
# VUSE <.MEM_1129>
D.44890_594 = strcasecmp (D.44889_593, "g723");
# VUSE <.MEM_1129>
map_bit_rate_1480 = CSWTCH.174[csui.173_591];
# .MEM_1308 = VDEF <.MEM_1129>
memset (&codec_fmtp, 0, 16);
# VUSE <.MEM_1129>
D.44889_593 = map_1729->rm_encoding;

.MEM_1130 : -->4 uses.
.MEM_49 = PHI <.MEM_1133(290), .MEM_1130(256)>
.MEM_1139 = PHI <.MEM_1133(289), .MEM_1130(257)>
# VUSE <.MEM_1130>
D.44997_1499 = D.44471_1502->num_codecs;
# VUSE <.MEM_1130>
D.44471_1502 = smh_186->mparams;

pretmp.956_1131 : --> no uses.

.MEM_1132 : --> single use.
# .MEM_1318 = VDEF <.MEM_1132>
matches[m_idx_1488].codec_idx = i_1623;

.MEM_1133 : -->4 uses.
.MEM_49 = PHI <.MEM_1133(290), .MEM_1130(256)>
.MEM_1139 = PHI <.MEM_1133(289), .MEM_1130(257)>
# VUSE <.MEM_1133>
D.44997_623 = D.44471_622->num_codecs;
# VUSE <.MEM_1133>
D.44471_622 = smh_186->mparams;

pretmp.932_1134 : --> no uses.

pretmp.957_1135 : --> no uses.

.MEM_1136 : -->3 uses.
.MEM_1138 = PHI <.MEM_1322(287), .MEM_1136(295), .MEM_49(292), .MEM_1580(222)>
.MEM_1172 = PHI <.MEM_1136(294), .MEM_1580(223)>
# VUSE <.MEM_1136>
map_712 = map_1729->rm_next;

pretmp.924_1137 : --> no uses.

.MEM_1138 : -->5 uses.
.MEM_1149 = PHI <.MEM_1326(309), .MEM_1138(311), .MEM_1323(297)>
.MEM_1857 = PHI <.MEM_1138(311), .MEM_1331(308)>
.MEM_1847 = PHI <.MEM_1326(310), .MEM_1138(299)>
# VUSE <.MEM_1138>
D.45002_713 = smh_186->crypto_mode;
# .MEM_1323 = VDEF <.MEM_1138>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");

.MEM_1139 : -->10 uses.
.MEM_1133 = PHI <.MEM_1139(258), .MEM_1311(277), .MEM_1317(285), .MEM_1322(286), .MEM_1310(278), .MEM_1310(272)>
# VUSE <.MEM_1139>
D.44922_634 = imp_630->codec_type;
# VUSE <.MEM_1139>
codec_rate_633 = imp_630->samples_per_second;
# VUSE <.MEM_1139>
D.44921_631 = imp_630->bits_per_second;
# VUSE <.MEM_1139>
imp_630 = *D.44920_629;
# .MEM_1310 = VDEF <.MEM_1139>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);
# VUSE <.MEM_1139>
D.44930_641 = imp_630->microseconds_per_packet;
# VUSE <.MEM_1139>
D.44928_639 = imp_630->ianacode;
# VUSE <.MEM_1139>
D.44927_638 = imp_630->iananame;
# VUSE <.MEM_1139>
D.44856_635 = map_1729->rm_pt;

nm_idx_1140 : -->11 uses.
nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
nm_idx_1708 = PHI <nm_idx_1140(286)>
nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
nm_idx_702 = nm_idx_1140 + 1;
near_matches[nm_idx_1140].map = map_1729;
near_matches[nm_idx_1140].imp = imp_630;
near_matches[nm_idx_1140].rate = remote_codec_rate.92_701;
near_matches[nm_idx_1140].codec_idx = i_1623;

pretmp.887_1141 : --> no uses.

.MEM_1142 : --> single use.
# .MEM_1333 = VDEF <.MEM_1142>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;

.MEM_1143 : -->2 uses.
# .MEM_1339 = VDEF <.MEM_1143>
D.45051_769 = switch_core_perform_session_strdup (session_161(D), D.45050_768, "src/switch_core_media.c", &__func__, 3535);
# VUSE <.MEM_1143>
D.45050_768 = mmap_763->rm_encoding;

.MEM_1144 : -->2 uses.
# VUSE <.MEM_1144>
D.45061_779 = mimp_762->microseconds_per_packet;
# .MEM_1347 = VDEF <.MEM_1144>
pmap_761->codec_ms = D.45063_781;

.MEM_1145 : -->5 uses.
.MEM_1146 = PHI <.MEM_1145(328), .MEM_1353(472), .MEM_1145(327)>
.MEM_1146 = PHI <.MEM_1145(328), .MEM_1353(472), .MEM_1145(327)>
# VUSE <.MEM_1145>
D.45080_791 = mmap_763->rm_fmtp;
# .MEM_1353 = VDEF <.MEM_1145>
D.45083_794 = switch_stristr ("stereo=1", D.45080_791);
# VUSE <.MEM_1145>
D.47927_1487 = *D.45080_791;

.MEM_1146 : --> single use.
# .MEM_1355 = VDEF <.MEM_1146>
pmap_761->channels = 1;

.MEM_1147 : -->2 uses.
# .MEM_1357 = VDEF <.MEM_1147>
D.45087_797 = switch_core_perform_session_strdup (session_161(D), D.45086_796, "src/switch_core_media.c", &__func__, 3563);
# VUSE <.MEM_1147>
D.45086_796 = connection_139->c_address;

pretmp.923_1148 : --> no uses.

.MEM_1149 : -->2 uses.
.MEM_1151 = PHI <.MEM_1149(334), .MEM_1373(341), .MEM_1372(340)>
.MEM_1850 = PHI <.MEM_1149(334), .MEM_1697(474)>

.MEM_1150 : -->3 uses.
# .MEM_1372 = VDEF <.MEM_1150>
D.45100_824 = switch_core_media_set_codec (session_161(D), 0, D.45099_823);
# VUSE <.MEM_1150>
D.45099_823 = D.44471_822->codec_flags;
# VUSE <.MEM_1150>
D.44471_822 = smh_186->mparams;

.MEM_1151 : -->2 uses.
.MEM_1853 = PHI <.MEM_1376(345), .MEM_1151(342)>
# .MEM_1374 = VDEF <.MEM_1151>
D.45108_827 = switch_media_handle_test_media_flag (smh_186, 8);

.MEM_1152 : -->3 uses.
# VUSE <.MEM_1152>
D.45111_831 = D.44471_830->te;
# VUSE <.MEM_1152>
D.44471_830 = smh_186->mparams;
# .MEM_1376 = VDEF <.MEM_1152>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45112_832);

D.45000_1153 : --> single use.
if (D.45000_1153 != 0)

.MEM_1154 : -->3 uses.
.MEM_1883 = PHI <.MEM_1157(412), .MEM_1154(379), .MEM_1409(371)>
.MEM_1717 = PHI <.MEM_1409(483), .MEM_1154(379)>
# VUSE <.MEM_1154>
attr_894 = m_1765->m_attributes;

.MEM_1155 : -->2 uses.
# .MEM_1412 = VDEF <.MEM_1155>
D.44471_906->rtcp_video_interval_msec = "10000";
# VUSE <.MEM_1155>
D.44471_906 = smh_186->mparams;

.MEM_1156 : --> single use.
# .MEM_1547 = VDEF <.MEM_1156>
crypto_tag_1503 = strtol (prephitmp.1031_1813, 0B, 10);

.MEM_1157 : -->3 uses.
.MEM_1883 = PHI <.MEM_1157(412), .MEM_1154(379), .MEM_1409(371)>
.MEM_1720 = PHI <.MEM_1717(484), .MEM_1157(411)>
# VUSE <.MEM_1157>
attr_979 = attr_620->a_next;

pretmp.911_1158 : --> no uses.

.MEM_1159 : -->4 uses.
# VUSE <.MEM_1159>
D.45251_995 = imp_986->ianacode;
# VUSE <.MEM_1159>
D.45250_994 = imp_986->iananame;
# VUSE <.MEM_1159>
D.45248_992 = map_1621->rm_pt;
# .MEM_1422 = VDEF <.MEM_1159>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45249_993, D.45250_994, D.45252_996);

.MEM_1161 : -->2 uses.
.MEM_1091 = PHI <.MEM_1161(430), .MEM_1883(415)>
.MEM_871 = PHI <.MEM_1161(429), .MEM_1883(416)>

pretmp.904_1162 : --> no uses.

attr_1163 : --> single use.
attr_620 = PHI <attr_1163(484), attr_979(411)>

pretmp.939_1164 : --> no uses.

.MEM_1165 : --> single use.
# .MEM_1428 = VDEF <.MEM_1165>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;

.MEM_1166 : -->4 uses.
# .MEM_1433 = VDEF <.MEM_1166>
D.45292_1053 = switch_core_perform_session_strdup (session_161(D), D.45256_1052, "src/switch_core_media.c", &__func__, 3804);
# VUSE <.MEM_1166>
D.45256_1052 = map_1051->rm_encoding;
# VUSE <.MEM_1166>
map_1051 = matches[j_1845].map;
# VUSE <.MEM_1166>
mimp_1050 = matches[j_1845].imp;

pretmp.940_1167 : --> no uses.

.MEM_1168 : --> single use.
# .MEM_1454 = VDEF <.MEM_1168>
D.45317_1093 = switch_core_media_set_video_codec (session_161(D), 0);

.MEM_1169 : -->3 uses.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>
.MEM_1751 = PHI <.MEM_1169(455), .MEM_1233(125)>
# VUSE <.MEM_1169>
m_1094 = m_1765->m_next;

pretmp.879_1170 : --> no uses.

.MEM_1171 : --> single use.
# .MEM_1456 = VDEF <.MEM_1171>
sdp_parser_free (parser_196);

.MEM_1172 : --> single use.
# .MEM_1302 = VDEF <.MEM_1172>
codec_fmtp = {};

.MEM_1173(D) : --> single use.
# .MEM_1174 = VDEF <.MEM_1173(D)>
channel_162 = switch_core_session_get_channel (session_161(D));

.MEM_1174 : --> single use.
# .MEM_1175 = VDEF <.MEM_1174>
matches = {};

.MEM_1175 : --> single use.
# .MEM_1176 = VDEF <.MEM_1175>
near_matches = {};

.MEM_1176 : -->6 uses.
# VUSE <.MEM_1176>
D.44472_194 = strlen (r_sdp_193(D));
# .MEM_1177 = VDEF <.MEM_1176>
parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
# VUSE <.MEM_1176>
total_codecs_192 = D.44471_191->num_codecs;
# VUSE <.MEM_1176>
D.44471_191 = smh_186->mparams;
# VUSE <.MEM_1176>
smh_186 = session_161(D)->media_handle;
# VUSE <.MEM_1176>
__assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

.MEM_1177 : --> single use.
# .MEM_1178 = VDEF <.MEM_1177>
sdp_198 = sdp_session (parser_196);

.MEM_1178 : -->2 uses.
# .MEM_1180 = VDEF <.MEM_1178>
D.44478_200 = dtls_ok (session_161(D));
# .MEM_1179 = VDEF <.MEM_1178>
sdp_parser_free (parser_196);

.MEM_1179 : --> no uses.

.MEM_1180 : -->4 uses.
.MEM_1097 = PHI <.MEM_1180(8), .MEM_1181(9), .MEM_1118(459), .MEM_1184(19)>
# .MEM_1181 = VDEF <.MEM_1180>
tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
# VUSE <.MEM_1180>
D.44482_202 = D.44481_201->channel;
# VUSE <.MEM_1180>
D.44481_201 = smh_186->session;

.MEM_1181 : -->16 uses.
.MEM_1622 = PHI <.MEM_1181(10), .MEM_1181(11), .MEM_1181(12), .MEM_1181(13), .MEM_1181(14), .MEM_1181(15), .MEM_1181(16), .MEM_1636(18)>
.MEM_1622 = PHI <.MEM_1181(10), .MEM_1181(11), .MEM_1181(12), .MEM_1181(13), .MEM_1181(14), .MEM_1181(15), .MEM_1181(16), .MEM_1636(18)>
.MEM_1622 = PHI <.MEM_1181(10), .MEM_1181(11), .MEM_1181(12), .MEM_1181(13), .MEM_1181(14), .MEM_1181(15), .MEM_1181(16), .MEM_1636(18)>
.MEM_1622 = PHI <.MEM_1181(10), .MEM_1181(11), .MEM_1181(12), .MEM_1181(13), .MEM_1181(14), .MEM_1181(15), .MEM_1181(16), .MEM_1636(18)>
.MEM_1622 = PHI <.MEM_1181(10), .MEM_1181(11), .MEM_1181(12), .MEM_1181(13), .MEM_1181(14), .MEM_1181(15), .MEM_1181(16), .MEM_1636(18)>
.MEM_1622 = PHI <.MEM_1181(10), .MEM_1181(11), .MEM_1181(12), .MEM_1181(13), .MEM_1181(14), .MEM_1181(15), .MEM_1181(16), .MEM_1636(18)>
.MEM_1622 = PHI <.MEM_1181(10), .MEM_1181(11), .MEM_1181(12), .MEM_1181(13), .MEM_1181(14), .MEM_1181(15), .MEM_1181(16), .MEM_1636(18)>
.MEM_1097 = PHI <.MEM_1180(8), .MEM_1181(9), .MEM_1118(459), .MEM_1184(19)>
# .MEM_1635 = VDEF <.MEM_1181>
D.49683_1558 = switch_is_number (tmp_203);
# VUSE <.MEM_1181>
D.49682_1557 = strcasecmp (tmp_203, "disallow");
# VUSE <.MEM_1181>
D.49681_1556 = strcasecmp (tmp_203, "inactive");
# VUSE <.MEM_1181>
D.49680_1555 = strcasecmp (tmp_203, "disabled");
# VUSE <.MEM_1181>
D.49679_1554 = strcasecmp (tmp_203, "f");
# VUSE <.MEM_1181>
D.49678_1553 = strcasecmp (tmp_203, "false");
# VUSE <.MEM_1181>
D.49677_1552 = strcasecmp (tmp_203, "off");
# VUSE <.MEM_1181>
D.49676_1551 = strcasecmp (tmp_203, "no");

.MEM_1182 : --> no uses.

.MEM_1183 : -->3 uses.
# .MEM_1184 = VDEF <.MEM_1183>
switch_channel_clear_flag (D.44482_208, 109);
# VUSE <.MEM_1183>
D.44482_208 = D.44481_207->channel;
# VUSE <.MEM_1183>
D.44481_207 = smh_186->session;

.MEM_1184 : --> single use.
.MEM_1097 = PHI <.MEM_1180(8), .MEM_1181(9), .MEM_1118(459), .MEM_1184(19)>

.MEM_1185 : -->5 uses.
.MEM_1837 = PHI <.MEM_1517(24), .MEM_1517(23), .MEM_1185(20), .MEM_1185(21)>
.MEM_1837 = PHI <.MEM_1517(24), .MEM_1517(23), .MEM_1185(20), .MEM_1185(21)>
.MEM_1838 = PHI <.MEM_1517(25), .MEM_1185(22)>
# VUSE <.MEM_1185>
pmap_1458 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;
# VUSE <.MEM_1185>
D.47872_1662 = pmap_1458->allocated;

.MEM_1186 : --> no uses.

.MEM_1187 : --> no uses.

.MEM_1188 : --> single use.
.MEM_1098 = PHI <.MEM_1879(32), .MEM_1188(33)>

.MEM_1189 : --> single use.
# .MEM_1190 = VDEF <.MEM_1189>
D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);

.MEM_1190 : --> single use.
# .MEM_1191 = VDEF <.MEM_1190>
val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);

.MEM_1191 : -->8 uses.
.MEM_1099 = PHI <.MEM_1191(34), .MEM_1191(35), .MEM_1191(36), .MEM_1191(37), .MEM_1192(38)>
.MEM_1099 = PHI <.MEM_1191(34), .MEM_1191(35), .MEM_1191(36), .MEM_1191(37), .MEM_1192(38)>
.MEM_1099 = PHI <.MEM_1191(34), .MEM_1191(35), .MEM_1191(36), .MEM_1191(37), .MEM_1192(38)>
.MEM_1099 = PHI <.MEM_1191(34), .MEM_1191(35), .MEM_1191(36), .MEM_1191(37), .MEM_1192(38)>
# VUSE <.MEM_1191>
D.44502_221 = strcasecmp (val_214, "scrooge");
# VUSE <.MEM_1191>
D.44498_218 = strcasecmp (val_214, "greedy");
# VUSE <.MEM_1191>
D.44494_215 = strcasecmp (val_214, "generous");
# .MEM_1192 = VDEF <.MEM_1191>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);

.MEM_1192 : --> single use.
.MEM_1099 = PHI <.MEM_1191(34), .MEM_1191(35), .MEM_1191(36), .MEM_1191(37), .MEM_1192(38)>

.MEM_1193 : --> single use.
# .MEM_1194 = VDEF <.MEM_1193>
smh_186->origin = D.44508_226;

.MEM_1194 : -->8 uses.
.MEM_1100 = PHI <.MEM_1194(40), .MEM_1194(41), .MEM_1196(42)>
.MEM_1100 = PHI <.MEM_1194(40), .MEM_1194(41), .MEM_1196(42)>
.MEM_1101 = PHI <.MEM_1194(39), .MEM_1100(43), .MEM_1100(44), .MEM_1198(45)>
# VUSE <.MEM_1194>
D.44518_234 = strstr (D.44508_226, "CiscoSystemsSIP-GW-UserAgent");
# VUSE <.MEM_1194>
D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
# .MEM_1195 = VDEF <.MEM_1194>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
# VUSE <.MEM_1194>
D.44512_229 = D.44471_228->auto_rtp_bugs;
# VUSE <.MEM_1194>
D.44471_228 = smh_186->mparams;

.MEM_1195 : --> single use.
# .MEM_1196 = VDEF <.MEM_1195>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");

.MEM_1196 : -->3 uses.
.MEM_1100 = PHI <.MEM_1194(40), .MEM_1194(41), .MEM_1196(42)>
# VUSE <.MEM_1196>
pretmp.1052_323 = pretmp.1050_1810->auto_rtp_bugs;
# VUSE <.MEM_1196>
pretmp.1050_1810 = smh_186->mparams;

.MEM_1197 : --> single use.
# .MEM_1198 = VDEF <.MEM_1197>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");

.MEM_1198 : --> single use.
.MEM_1101 = PHI <.MEM_1194(39), .MEM_1100(43), .MEM_1100(44), .MEM_1198(45)>

.MEM_1199 : -->16 uses.
.MEM_1624 = PHI <.MEM_1199(47), .MEM_1199(48), .MEM_1199(49), .MEM_1199(50), .MEM_1199(51), .MEM_1199(52), .MEM_1199(53), .MEM_1639(55)>
.MEM_1624 = PHI <.MEM_1199(47), .MEM_1199(48), .MEM_1199(49), .MEM_1199(50), .MEM_1199(51), .MEM_1199(52), .MEM_1199(53), .MEM_1639(55)>
.MEM_1624 = PHI <.MEM_1199(47), .MEM_1199(48), .MEM_1199(49), .MEM_1199(50), .MEM_1199(51), .MEM_1199(52), .MEM_1199(53), .MEM_1639(55)>
.MEM_1624 = PHI <.MEM_1199(47), .MEM_1199(48), .MEM_1199(49), .MEM_1199(50), .MEM_1199(51), .MEM_1199(52), .MEM_1199(53), .MEM_1639(55)>
.MEM_1624 = PHI <.MEM_1199(47), .MEM_1199(48), .MEM_1199(49), .MEM_1199(50), .MEM_1199(51), .MEM_1199(52), .MEM_1199(53), .MEM_1639(55)>
.MEM_1624 = PHI <.MEM_1199(47), .MEM_1199(48), .MEM_1199(49), .MEM_1199(50), .MEM_1199(51), .MEM_1199(52), .MEM_1199(53), .MEM_1639(55)>
.MEM_1624 = PHI <.MEM_1199(47), .MEM_1199(48), .MEM_1199(49), .MEM_1199(50), .MEM_1199(51), .MEM_1199(52), .MEM_1199(53), .MEM_1639(55)>
.MEM_1102 = PHI <.MEM_1199(46), .MEM_795(460), .MEM_1201(56)>
# .MEM_1638 = VDEF <.MEM_1199>
D.49695_1568 = switch_is_number (val_245);
# VUSE <.MEM_1199>
D.49694_1567 = strcasecmp (val_245, "allow");
# VUSE <.MEM_1199>
D.49693_1566 = strcasecmp (val_245, "active");
# VUSE <.MEM_1199>
D.49692_1565 = strcasecmp (val_245, "enabled");
# VUSE <.MEM_1199>
D.49691_1564 = strcasecmp (val_245, "t");
# VUSE <.MEM_1199>
D.49690_1563 = strcasecmp (val_245, "true");
# VUSE <.MEM_1199>
D.49689_1562 = strcasecmp (val_245, "on");
# VUSE <.MEM_1199>
D.49688_1561 = strcasecmp (val_245, "yes");

.MEM_1200 : --> no uses.

.MEM_1201 : --> single use.
.MEM_1102 = PHI <.MEM_1199(46), .MEM_795(460), .MEM_1201(56)>

.MEM_1202 : --> single use.
.MEM_1103 = PHI <.MEM_1839(66), .MEM_1202(67), .MEM_1203(69), .MEM_1210(73), .MEM_1839(75), .MEM_1521(77), .MEM_1839(78), .MEM_1523(79), .MEM_1208(72), .MEM_1839(65)>

.MEM_1203 : --> single use.
.MEM_1103 = PHI <.MEM_1839(66), .MEM_1202(67), .MEM_1203(69), .MEM_1210(73), .MEM_1839(75), .MEM_1521(77), .MEM_1839(78), .MEM_1523(79), .MEM_1208(72), .MEM_1839(65)>

.MEM_1204 : -->2 uses.
# VUSE <.MEM_1204>
D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1205 = VDEF <.MEM_1204>
D.44606_319 = switch_rtp_ready (D.44605_318);

.MEM_1205 : -->4 uses.
# VUSE <.MEM_1205>
D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1209 = VDEF <.MEM_1205>
switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
# VUSE <.MEM_1205>
D.44530_321 = session_161(D)->channel;
# .MEM_1206 = VDEF <.MEM_1205>
switch_rtp_set_max_missed_packets (D.44605_320, 0);

.MEM_1206 : --> single use.
# .MEM_1207 = VDEF <.MEM_1206>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;

.MEM_1207 : --> single use.
# .MEM_1208 = VDEF <.MEM_1207>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;

.MEM_1208 : --> single use.
.MEM_1103 = PHI <.MEM_1839(66), .MEM_1202(67), .MEM_1203(69), .MEM_1210(73), .MEM_1839(75), .MEM_1521(77), .MEM_1839(78), .MEM_1523(79), .MEM_1208(72), .MEM_1839(65)>

.MEM_1209 : -->2 uses.
# .MEM_1210 = VDEF <.MEM_1209>
switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
# VUSE <.MEM_1209>
D.44530_322 = session_161(D)->channel;

.MEM_1210 : --> single use.
.MEM_1103 = PHI <.MEM_1839(66), .MEM_1202(67), .MEM_1203(69), .MEM_1210(73), .MEM_1839(75), .MEM_1521(77), .MEM_1839(78), .MEM_1523(79), .MEM_1208(72), .MEM_1839(65)>

.MEM_1211 : --> single use.
.MEM_1105 = PHI <.MEM_1840(83), .MEM_1211(84)>

.MEM_1212 : -->3 uses.
.MEM_670 = PHI <.MEM_1216(98), .MEM_1106(97), .MEM_1626(96), .MEM_1212(85)>
# .MEM_1213 = VDEF <.MEM_1212>
val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
# VUSE <.MEM_1212>
D.44530_340 = session_161(D)->channel;

.MEM_1213 : -->16 uses.
.MEM_1626 = PHI <.MEM_1213(87), .MEM_1213(88), .MEM_1213(89), .MEM_1213(90), .MEM_1213(91), .MEM_1213(92), .MEM_1213(93), .MEM_1642(95)>
.MEM_1626 = PHI <.MEM_1213(87), .MEM_1213(88), .MEM_1213(89), .MEM_1213(90), .MEM_1213(91), .MEM_1213(92), .MEM_1213(93), .MEM_1642(95)>
.MEM_1626 = PHI <.MEM_1213(87), .MEM_1213(88), .MEM_1213(89), .MEM_1213(90), .MEM_1213(91), .MEM_1213(92), .MEM_1213(93), .MEM_1642(95)>
.MEM_1626 = PHI <.MEM_1213(87), .MEM_1213(88), .MEM_1213(89), .MEM_1213(90), .MEM_1213(91), .MEM_1213(92), .MEM_1213(93), .MEM_1642(95)>
.MEM_1626 = PHI <.MEM_1213(87), .MEM_1213(88), .MEM_1213(89), .MEM_1213(90), .MEM_1213(91), .MEM_1213(92), .MEM_1213(93), .MEM_1642(95)>
.MEM_1626 = PHI <.MEM_1213(87), .MEM_1213(88), .MEM_1213(89), .MEM_1213(90), .MEM_1213(91), .MEM_1213(92), .MEM_1213(93), .MEM_1642(95)>
.MEM_1626 = PHI <.MEM_1213(87), .MEM_1213(88), .MEM_1213(89), .MEM_1213(90), .MEM_1213(91), .MEM_1213(92), .MEM_1213(93), .MEM_1642(95)>
.MEM_1106 = PHI <.MEM_1213(86), .MEM_1755(462)>
# .MEM_1641 = VDEF <.MEM_1213>
D.49707_1578 = switch_is_number (val_341);
# VUSE <.MEM_1213>
D.49706_1577 = strcasecmp (val_341, "allow");
# VUSE <.MEM_1213>
D.49705_1576 = strcasecmp (val_341, "active");
# VUSE <.MEM_1213>
D.49704_1575 = strcasecmp (val_341, "enabled");
# VUSE <.MEM_1213>
D.49703_1574 = strcasecmp (val_341, "t");
# VUSE <.MEM_1213>
D.49702_1573 = strcasecmp (val_341, "true");
# VUSE <.MEM_1213>
D.49701_1572 = strcasecmp (val_341, "on");
# VUSE <.MEM_1213>
D.49700_1571 = strcasecmp (val_341, "yes");

.MEM_1214 : --> no uses.

.MEM_1215 : --> single use.
# .MEM_1216 = VDEF <.MEM_1215>
D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_1007);

.MEM_1216 : -->2 uses.
.MEM_670 = PHI <.MEM_1216(98), .MEM_1106(97), .MEM_1626(96), .MEM_1212(85)>
# .MEM_1217 = VDEF <.MEM_1216>
reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);

.MEM_1217 : -->2 uses.
# .MEM_1218 = VDEF <.MEM_1217>
val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
# VUSE <.MEM_1217>
D.44530_350 = session_161(D)->channel;

.MEM_1218 : -->2 uses.
.MEM_1107 = PHI <.MEM_1218(99), .MEM_1219(100)>
# .MEM_1219 = VDEF <.MEM_1218>
reneg_352 = switch_true (val_351);

.MEM_1219 : --> single use.
.MEM_1107 = PHI <.MEM_1218(99), .MEM_1219(100)>

.MEM_1220 : -->2 uses.
# .MEM_1221 = VDEF <.MEM_1220>
val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
# VUSE <.MEM_1220>
D.44530_354 = session_161(D)->channel;

.MEM_1221 : -->16 uses.
.MEM_1628 = PHI <.MEM_1221(103), .MEM_1221(104), .MEM_1221(105), .MEM_1221(106), .MEM_1221(107), .MEM_1221(108), .MEM_1221(109), .MEM_1645(112), .MEM_1644(110), .MEM_1645(111)>
.MEM_1628 = PHI <.MEM_1221(103), .MEM_1221(104), .MEM_1221(105), .MEM_1221(106), .MEM_1221(107), .MEM_1221(108), .MEM_1221(109), .MEM_1645(112), .MEM_1644(110), .MEM_1645(111)>
.MEM_1628 = PHI <.MEM_1221(103), .MEM_1221(104), .MEM_1221(105), .MEM_1221(106), .MEM_1221(107), .MEM_1221(108), .MEM_1221(109), .MEM_1645(112), .MEM_1644(110), .MEM_1645(111)>
.MEM_1628 = PHI <.MEM_1221(103), .MEM_1221(104), .MEM_1221(105), .MEM_1221(106), .MEM_1221(107), .MEM_1221(108), .MEM_1221(109), .MEM_1645(112), .MEM_1644(110), .MEM_1645(111)>
.MEM_1628 = PHI <.MEM_1221(103), .MEM_1221(104), .MEM_1221(105), .MEM_1221(106), .MEM_1221(107), .MEM_1221(108), .MEM_1221(109), .MEM_1645(112), .MEM_1644(110), .MEM_1645(111)>
.MEM_1628 = PHI <.MEM_1221(103), .MEM_1221(104), .MEM_1221(105), .MEM_1221(106), .MEM_1221(107), .MEM_1221(108), .MEM_1221(109), .MEM_1645(112), .MEM_1644(110), .MEM_1645(111)>
.MEM_1628 = PHI <.MEM_1221(103), .MEM_1221(104), .MEM_1221(105), .MEM_1221(106), .MEM_1221(107), .MEM_1221(108), .MEM_1221(109), .MEM_1645(112), .MEM_1644(110), .MEM_1645(111)>
.MEM_1108 = PHI <.MEM_1107(101), .MEM_1221(102), .MEM_1628(113)>
# .MEM_1644 = VDEF <.MEM_1221>
D.49719_1588 = switch_is_number (val_355);
# VUSE <.MEM_1221>
D.49718_1587 = strcasecmp (val_355, "allow");
# VUSE <.MEM_1221>
D.49717_1586 = strcasecmp (val_355, "active");
# VUSE <.MEM_1221>
D.49716_1585 = strcasecmp (val_355, "enabled");
# VUSE <.MEM_1221>
D.49715_1584 = strcasecmp (val_355, "t");
# VUSE <.MEM_1221>
D.49714_1583 = strcasecmp (val_355, "true");
# VUSE <.MEM_1221>
D.49713_1582 = strcasecmp (val_355, "on");
# VUSE <.MEM_1221>
D.49712_1581 = strcasecmp (val_355, "yes");

.MEM_1222 : --> no uses.

.MEM_1223 : --> single use.
.MEM_1859 = PHI <.MEM_1108(116), .MEM_1223(115)>

.MEM_1224 : --> single use.
# .MEM_1225 = VDEF <.MEM_1224>
switch_core_media_prepare_codecs (session_161(D), 0);

.MEM_1225 : -->3 uses.
.MEM_1110 = PHI <.MEM_1859(118), .MEM_1859(117), .MEM_1225(119)>
# VUSE <.MEM_1225>
total_codecs_365 = D.44471_364->num_codecs;
# VUSE <.MEM_1225>
D.44471_364 = smh_186->mparams;

.MEM_1226 : -->2 uses.
.MEM_1111 = PHI <.MEM_1226(120), .MEM_1227(121), .MEM_1228(122)>
# .MEM_1227 = VDEF <.MEM_1226>
D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));

.MEM_1227 : -->2 uses.
.MEM_1111 = PHI <.MEM_1226(120), .MEM_1227(121), .MEM_1228(122)>
# .MEM_1228 = VDEF <.MEM_1227>
D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));

.MEM_1228 : -->2 uses.
.MEM_1112 = PHI <.MEM_1228(122), .MEM_1229(123)>
.MEM_1111 = PHI <.MEM_1226(120), .MEM_1227(121), .MEM_1228(122)>

.MEM_1229 : --> single use.
.MEM_1112 = PHI <.MEM_1228(122), .MEM_1229(123)>

.MEM_1230 : --> single use.
# .MEM_1231 = VDEF <.MEM_1230>
switch_core_media_pass_zrtp_hash (session_161(D));

.MEM_1231 : --> single use.
# .MEM_1232 = VDEF <.MEM_1231>
check_ice (smh_186, 0, sdp_198, 0B);

.MEM_1232 : --> single use.
# .MEM_1233 = VDEF <.MEM_1232>
check_ice (smh_186, 1, sdp_198, 0B);

.MEM_1233 : -->3 uses.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>
.MEM_1751 = PHI <.MEM_1169(455), .MEM_1233(125)>
# VUSE <.MEM_1233>
m_370 = sdp_198->sdp_media;

.MEM_1234 : --> single use.
.MEM_1113 = PHI <.MEM_1751(126), .MEM_1234(127)>

.MEM_1235 : --> single use.
.MEM_1114 = PHI <.MEM_1113(128), .MEM_1113(129), .MEM_1235(130)>

.MEM_1236 : -->2 uses.
# .MEM_1237 = VDEF <.MEM_1236>
D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
# VUSE <.MEM_1236>
D.44530_395 = session_161(D)->channel;

.MEM_1237 : -->2 uses.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>
# .MEM_1238 = VDEF <.MEM_1237>
D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);

.MEM_1238 : --> single use.
# .MEM_1239 = VDEF <.MEM_1238>
D.44703_399 = switch_true (D.44702_398);

.MEM_1239 : -->3 uses.
# .MEM_1241 = VDEF <.MEM_1239>
var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
# .MEM_1240 = VDEF <.MEM_1239>
switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
# VUSE <.MEM_1239>
D.44530_400 = session_161(D)->channel;

.MEM_1240 : --> single use.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>

.MEM_1241 : -->3 uses.
# .MEM_1242 = VDEF <.MEM_1241>
D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
# VUSE <.MEM_1241>
D.44482_404 = D.44481_403->channel;
# VUSE <.MEM_1241>
D.44481_403 = smh_186->session;

.MEM_1242 : -->2 uses.
# .MEM_1243 = VDEF <.MEM_1242>
D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
# VUSE <.MEM_1242>
D.44530_407 = session_161(D)->channel;

.MEM_1243 : -->3 uses.
.MEM_1115 = PHI <.MEM_1243(146), .MEM_1243(147), .MEM_1244(148)>
.MEM_1115 = PHI <.MEM_1243(146), .MEM_1243(147), .MEM_1244(148)>
# .MEM_1244 = VDEF <.MEM_1243>
*proceed_209(D) = 0;

.MEM_1244 : --> single use.
.MEM_1115 = PHI <.MEM_1243(146), .MEM_1243(147), .MEM_1244(148)>

.MEM_1245 : -->4 uses.
.MEM_1117 = PHI <.MEM_1245(151), .MEM_1246(154), .MEM_1116(153)>
.MEM_1855 = PHI <.MEM_1116(153), .MEM_1245(151)>
.MEM_1116 = PHI <.MEM_1115(152), .MEM_1245(150)>
# VUSE <.MEM_1245>
D.44716_410 = strcasecmp (var_402, "once");

.MEM_1246 : -->2 uses.
.MEM_1117 = PHI <.MEM_1245(151), .MEM_1246(154), .MEM_1116(153)>
.MEM_1670 = PHI <.MEM_1248(156), .MEM_1249(157), .MEM_1250(158), .MEM_1246(154), .MEM_1247(155)>

.MEM_1247 : -->3 uses.
.MEM_1670 = PHI <.MEM_1248(156), .MEM_1249(157), .MEM_1250(158), .MEM_1246(154), .MEM_1247(155)>
# .MEM_1248 = VDEF <.MEM_1247>
D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
# VUSE <.MEM_1247>
D.44530_417 = session_161(D)->channel;

.MEM_1248 : -->3 uses.
.MEM_1670 = PHI <.MEM_1248(156), .MEM_1249(157), .MEM_1250(158), .MEM_1246(154), .MEM_1247(155)>
# .MEM_1249 = VDEF <.MEM_1248>
D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
# VUSE <.MEM_1248>
D.44530_419 = session_161(D)->channel;

.MEM_1249 : -->3 uses.
.MEM_1670 = PHI <.MEM_1248(156), .MEM_1249(157), .MEM_1250(158), .MEM_1246(154), .MEM_1247(155)>
# VUSE <.MEM_1249>
D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1250 = VDEF <.MEM_1249>
D.44730_422 = switch_rtp_ready (D.44605_421);

.MEM_1250 : -->3 uses.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>
.MEM_1670 = PHI <.MEM_1248(156), .MEM_1249(157), .MEM_1250(158), .MEM_1246(154), .MEM_1247(155)>
# .MEM_1251 = VDEF <.MEM_1250>
D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);

.MEM_1251 : -->3 uses.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>
# .MEM_1252 = VDEF <.MEM_1251>
other_channel_426 = switch_core_session_get_channel (other_session.89_425);
# VUSE <.MEM_1251>
other_session.89_425 = other_session;

.MEM_1252 : -->2 uses.
# VUSE <.MEM_1252>
D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1253 = VDEF <.MEM_1252>
remote_host_428 = switch_rtp_get_remote_host (D.44605_427);

.MEM_1253 : -->2 uses.
# VUSE <.MEM_1253>
D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1254 = VDEF <.MEM_1253>
remote_port_430 = switch_rtp_get_remote_port (D.44605_429);

.MEM_1254 : --> single use.
# .MEM_1255 = VDEF <.MEM_1254>
tmp = "";

.MEM_1255 : --> single use.
# .MEM_1256 = VDEF <.MEM_1255>
D.44737_431 = switch_channel_test_flag (other_channel_426, 1);

.MEM_1256 : -->4 uses.
# .MEM_1261 = VDEF <.MEM_1256>
D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
# VUSE <.MEM_1256>
D.44530_438 = session_161(D)->channel;
# .MEM_1257 = VDEF <.MEM_1256>
D.44740_433 = switch_channel_get_name (D.44530_432);
# VUSE <.MEM_1256>
D.44530_432 = session_161(D)->channel;

.MEM_1257 : --> single use.
# .MEM_1258 = VDEF <.MEM_1257>
D.44741_434 = switch_channel_get_name (other_channel_426);

.MEM_1258 : --> single use.
# .MEM_1259 = VDEF <.MEM_1258>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

.MEM_1259 : -->2 uses.
# .MEM_1260 = VDEF <.MEM_1259>
switch_core_session_rwunlock (other_session.89_435);
# VUSE <.MEM_1259>
other_session.89_435 = other_session;

.MEM_1260 : --> single use.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>

.MEM_1261 : --> single use.
# .MEM_1262 = VDEF <.MEM_1261>
D.44743_440 = switch_true (D.44742_439);

.MEM_1262 : -->3 uses.
.MEM_1120 = PHI <.MEM_1262(163), .MEM_1264(164), .MEM_1265(165)>
# .MEM_1263 = VDEF <.MEM_1262>
D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
# VUSE <.MEM_1262>
D.44530_441 = session_161(D)->channel;

.MEM_1263 : --> single use.
# .MEM_1264 = VDEF <.MEM_1263>
D.44747_443 = switch_true (D.44746_442);

.MEM_1264 : -->2 uses.
.MEM_1120 = PHI <.MEM_1262(163), .MEM_1264(164), .MEM_1265(165)>
# .MEM_1265 = VDEF <.MEM_1264>
switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);

.MEM_1265 : --> single use.
.MEM_1120 = PHI <.MEM_1262(163), .MEM_1264(164), .MEM_1265(165)>

.MEM_1266 : --> single use.
# .MEM_1267 = VDEF <.MEM_1266>
D.44750_444->remote_sdp_ip = D.44752_446;

.MEM_1267 : -->3 uses.
# VUSE <.MEM_1267>
D.44753_448 = t38_options_394->remote_port;
# VUSE <.MEM_1267>
D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1268 = VDEF <.MEM_1267>
D.44750_447->remote_sdp_port = D.44753_448;

.MEM_1268 : -->5 uses.
# VUSE <.MEM_1268>
D.44760_453 = D.44750_447->remote_sdp_ip;
# VUSE <.MEM_1268>
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
# .MEM_1271 = VDEF <.MEM_1268>
err = 0B;
# .MEM_1269 = VDEF <.MEM_1268>
D.44764_458 = switch_channel_get_name (D.44530_457);
# VUSE <.MEM_1268>
D.44530_457 = session_161(D)->channel;

.MEM_1269 : --> single use.
# .MEM_1270 = VDEF <.MEM_1269>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);

.MEM_1270 : --> single use.
.MEM_1121 = PHI <.MEM_1270(169), .MEM_1277(170), .MEM_1279(171)>

.MEM_1271 : -->2 uses.
# .MEM_1272 = VDEF <.MEM_1271>
D.44765_460 = switch_channel_get_name (D.44530_459);
# VUSE <.MEM_1271>
D.44530_459 = session_161(D)->channel;

.MEM_1272 : -->4 uses.
# VUSE <.MEM_1272>
D.44762_465 = D.44750_462->remote_sdp_port;
# VUSE <.MEM_1272>
D.44760_463 = D.44750_462->remote_sdp_ip;
# VUSE <.MEM_1272>
D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1273 = VDEF <.MEM_1272>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

.MEM_1273 : -->3 uses.
# VUSE <.MEM_1273>
D.44762_468 = D.44750_467->remote_sdp_port;
# VUSE <.MEM_1273>
D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1274 = VDEF <.MEM_1273>
switch_snprintf (&tmp, 32, "%d", D.44767_469);

.MEM_1274 : -->4 uses.
# VUSE <.MEM_1274>
D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# VUSE <.MEM_1274>
D.44530_470 = session_161(D)->channel;
# .MEM_1275 = VDEF <.MEM_1274>
switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
# VUSE <.MEM_1274>
D.44760_472 = D.44750_471->remote_sdp_ip;

.MEM_1275 : -->2 uses.
# .MEM_1276 = VDEF <.MEM_1275>
switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
# VUSE <.MEM_1275>
D.44530_473 = session_161(D)->channel;

.MEM_1276 : -->5 uses.
# VUSE <.MEM_1276>
D.44762_478 = D.44750_475->remote_sdp_port;
# VUSE <.MEM_1276>
D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# VUSE <.MEM_1276>
D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1277 = VDEF <.MEM_1276>
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
# VUSE <.MEM_1276>
D.44760_476 = D.44750_475->remote_sdp_ip;

.MEM_1277 : -->3 uses.
.MEM_1121 = PHI <.MEM_1270(169), .MEM_1277(170), .MEM_1279(171)>
# .MEM_1278 = VDEF <.MEM_1277>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
# VUSE <.MEM_1277>
err.90_480 = err;

.MEM_1278 : --> single use.
# .MEM_1279 = VDEF <.MEM_1278>
switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);

.MEM_1279 : --> single use.
.MEM_1121 = PHI <.MEM_1270(169), .MEM_1277(170), .MEM_1279(171)>

.MEM_1280 : -->3 uses.
# .MEM_1281 = VDEF <.MEM_1280>
switch_channel_set_flag_value (D.44482_483, 101, 1);
# VUSE <.MEM_1280>
D.44482_483 = D.44481_482->channel;
# VUSE <.MEM_1280>
D.44481_482 = smh_186->session;

.MEM_1281 : -->3 uses.
# .MEM_1282 = VDEF <.MEM_1281>
switch_channel_set_flag_value (D.44772_485, 101, 1);
# VUSE <.MEM_1281>
D.44772_485 = other_session.89_484->channel;
# VUSE <.MEM_1281>
other_session.89_484 = other_session;

.MEM_1282 : -->2 uses.
# .MEM_1283 = VDEF <.MEM_1282>
msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
# VUSE <.MEM_1282>
other_session.89_486 = other_session;

.MEM_1283 : --> single use.
# .MEM_1284 = VDEF <.MEM_1283>
msg_487->message_id = 21;

.MEM_1284 : --> single use.
# .MEM_1285 = VDEF <.MEM_1284>
msg_487->from = "src/switch_core_media.c";

.MEM_1285 : -->2 uses.
# .MEM_1286 = VDEF <.MEM_1285>
D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
# VUSE <.MEM_1285>
other_session.89_488 = other_session;

.MEM_1286 : --> single use.
# .MEM_1287 = VDEF <.MEM_1286>
msg_487->string_arg = D.44773_489;

.MEM_1287 : --> single use.
# .MEM_1288 = VDEF <.MEM_1287>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));

.MEM_1288 : -->2 uses.
# .MEM_1289 = VDEF <.MEM_1288>
switch_core_session_queue_message (other_session.89_490, msg_487);
# VUSE <.MEM_1288>
other_session.89_490 = other_session;

.MEM_1289 : -->2 uses.
# .MEM_1290 = VDEF <.MEM_1289>
switch_core_session_rwunlock (other_session.89_491);
# VUSE <.MEM_1289>
other_session.89_491 = other_session;

.MEM_1290 : --> single use.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>

.MEM_1291 : -->2 uses.
.MEM_1123 = PHI <.MEM_1291(175), .MEM_1292(176)>
# .MEM_1292 = VDEF <.MEM_1291>
D.44784_499 = dtls_ok (session_161(D));

.MEM_1292 : -->9 uses.
.MEM_1580 = PHI <.MEM_1125(215), .MEM_1123(185), .MEM_1292(177)>
.MEM_1123 = PHI <.MEM_1291(175), .MEM_1292(176)>
.MEM_114 = PHI <.MEM_1292(481), .MEM_1123(185)>
# VUSE <.MEM_1292>
D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
# VUSE <.MEM_1292>
D.44590_501 = attr_1560->a_name;
# VUSE <.MEM_1292>
attr_506 = attr_1560->a_next;
# VUSE <.MEM_1292>
D.47888_1470 = *D.44619_503;
# VUSE <.MEM_1292>
D.44619_503 = attr_1560->a_value;
# VUSE <.MEM_1292>
attr_500 = m_1765->m_attributes;

.MEM_1293 : -->2 uses.
# .MEM_1526 = VDEF <.MEM_1293>
D.47891_1472 = strtol (D.44619_513, 0B, 10);
# VUSE <.MEM_1293>
D.44619_513 = attr_1600->a_value;

.MEM_1294 : -->4 uses.
.MEM_1125 = PHI <.MEM_1295(189), .MEM_1528(192), .MEM_1530(195), .MEM_1109(196), .MEM_1109(197), .MEM_1109(199), .MEM_1299(212), .MEM_1294(188), .MEM_1109(198)>
# .MEM_1295 = VDEF <.MEM_1294>
D.44471_516->rtcp_audio_interval_msec = "5000";
# VUSE <.MEM_1294>
D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
# VUSE <.MEM_1294>
D.44471_516 = smh_186->mparams;

.MEM_1295 : --> single use.
.MEM_1125 = PHI <.MEM_1295(189), .MEM_1528(192), .MEM_1530(195), .MEM_1109(196), .MEM_1109(197), .MEM_1109(199), .MEM_1299(212), .MEM_1294(188), .MEM_1109(198)>

.MEM_1296 : -->16 uses.
.MEM_1630 = PHI <.MEM_1296(201), .MEM_1296(202), .MEM_1296(203), .MEM_1296(204), .MEM_1296(205), .MEM_1296(206), .MEM_1296(207), .MEM_1648(209)>
.MEM_1630 = PHI <.MEM_1296(201), .MEM_1296(202), .MEM_1296(203), .MEM_1296(204), .MEM_1296(205), .MEM_1296(206), .MEM_1296(207), .MEM_1648(209)>
.MEM_1630 = PHI <.MEM_1296(201), .MEM_1296(202), .MEM_1296(203), .MEM_1296(204), .MEM_1296(205), .MEM_1296(206), .MEM_1296(207), .MEM_1648(209)>
.MEM_1630 = PHI <.MEM_1296(201), .MEM_1296(202), .MEM_1296(203), .MEM_1296(204), .MEM_1296(205), .MEM_1296(206), .MEM_1296(207), .MEM_1648(209)>
.MEM_1630 = PHI <.MEM_1296(201), .MEM_1296(202), .MEM_1296(203), .MEM_1296(204), .MEM_1296(205), .MEM_1296(206), .MEM_1296(207), .MEM_1648(209)>
.MEM_1630 = PHI <.MEM_1296(201), .MEM_1296(202), .MEM_1296(203), .MEM_1296(204), .MEM_1296(205), .MEM_1296(206), .MEM_1296(207), .MEM_1648(209)>
.MEM_1630 = PHI <.MEM_1296(201), .MEM_1296(202), .MEM_1296(203), .MEM_1296(204), .MEM_1296(205), .MEM_1296(206), .MEM_1296(207), .MEM_1648(209)>
.MEM_1885 = PHI <.MEM_1648(209), .MEM_1296(200), .MEM_1647(208)>
# .MEM_1647 = VDEF <.MEM_1296>
D.49731_1598 = switch_is_number (D.44825_537);
# VUSE <.MEM_1296>
D.49730_1597 = strcasecmp (D.44825_537, "allow");
# VUSE <.MEM_1296>
D.49729_1596 = strcasecmp (D.44825_537, "active");
# VUSE <.MEM_1296>
D.49728_1595 = strcasecmp (D.44825_537, "enabled");
# VUSE <.MEM_1296>
D.49727_1594 = strcasecmp (D.44825_537, "t");
# VUSE <.MEM_1296>
D.49726_1593 = strcasecmp (D.44825_537, "true");
# VUSE <.MEM_1296>
D.49725_1592 = strcasecmp (D.44825_537, "on");
# VUSE <.MEM_1296>
D.49724_1591 = strcasecmp (D.44825_537, "yes");

.MEM_1297 : --> no uses.

.MEM_1298 : --> single use.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>

.MEM_1299 : --> single use.
.MEM_1125 = PHI <.MEM_1295(189), .MEM_1528(192), .MEM_1530(195), .MEM_1109(196), .MEM_1109(197), .MEM_1109(199), .MEM_1299(212), .MEM_1294(188), .MEM_1109(198)>

.MEM_1300 : --> single use.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>

.MEM_1301 : --> single use.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>

.MEM_1302 : -->9 uses.
.MEM_1136 = PHI <.MEM_1303(229), .MEM_1306(234), .MEM_1302(228), .MEM_1304(235), .MEM_49(291), .MEM_1304(233)>
# VUSE <.MEM_1302>
rm_encoding_561 = map_1729->rm_encoding;
# VUSE <.MEM_1302>
D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
# VUSE <.MEM_1302>
D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1304 = VDEF <.MEM_1302>
D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
# .MEM_1303 = VDEF <.MEM_1302>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
# VUSE <.MEM_1302>
D.44856_567 = map_1729->rm_pt;
# VUSE <.MEM_1302>
D.44855_566 = D.44750_565->rm_rate;
# VUSE <.MEM_1302>
D.44854_564 = map_1729->rm_rate;

.MEM_1303 : --> single use.
.MEM_1136 = PHI <.MEM_1303(229), .MEM_1306(234), .MEM_1302(228), .MEM_1304(235), .MEM_49(291), .MEM_1304(233)>

.MEM_1304 : -->10 uses.
.MEM_1129 = PHI <.MEM_1304(469), .MEM_1307(239), .MEM_1304(238)>
.MEM_1136 = PHI <.MEM_1303(229), .MEM_1306(234), .MEM_1302(228), .MEM_1304(235), .MEM_49(291), .MEM_1304(233)>
.MEM_1136 = PHI <.MEM_1303(229), .MEM_1306(234), .MEM_1302(228), .MEM_1304(235), .MEM_49(291), .MEM_1304(233)>
.MEM_1129 = PHI <.MEM_1304(469), .MEM_1307(239), .MEM_1304(238)>
# VUSE <.MEM_1304>
D.44863_571 = strcasecmp (rm_encoding_130, "CN");
# VUSE <.MEM_1304>
D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1307 = VDEF <.MEM_1304>
D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
# VUSE <.MEM_1304>
D.44856_586 = map_1729->rm_pt;
# .MEM_1305 = VDEF <.MEM_1304>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
# VUSE <.MEM_1304>
D.44856_572 = map_1729->rm_pt;

.MEM_1305 : -->4 uses.
# VUSE <.MEM_1305>
D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1306 = VDEF <.MEM_1305>
switch_rtp_set_cng_pt (D.44605_576, D.44869_578);
# VUSE <.MEM_1305>
D.44869_578 = D.44471_577->cng_pt;
# VUSE <.MEM_1305>
D.44471_577 = smh_186->mparams;

.MEM_1306 : --> single use.
.MEM_1136 = PHI <.MEM_1303(229), .MEM_1306(234), .MEM_1302(228), .MEM_1304(235), .MEM_49(291), .MEM_1304(233)>

.MEM_1307 : --> single use.
.MEM_1129 = PHI <.MEM_1304(469), .MEM_1307(239), .MEM_1304(238)>

.MEM_1308 : -->11 uses.
.MEM_1130 = PHI <.MEM_1308(249), .MEM_1309(470), .MEM_1309(255), .MEM_1309(254), .MEM_1308(247), .MEM_1308(248)>
.MEM_1130 = PHI <.MEM_1308(249), .MEM_1309(470), .MEM_1309(255), .MEM_1309(254), .MEM_1308(247), .MEM_1308(248)>
.MEM_1130 = PHI <.MEM_1308(249), .MEM_1309(470), .MEM_1309(255), .MEM_1309(254), .MEM_1308(247), .MEM_1308(248)>
# VUSE <.MEM_1308>
D.44893_598 = map_1729->rm_fmtp;
# VUSE <.MEM_1308>
D.44897_601 = strcasecmp (D.44889_600, "ilbc");
# VUSE <.MEM_1308>
D.44889_600 = map_1729->rm_encoding;
# .MEM_1309 = VDEF <.MEM_1308>
D.44906_612 = switch_core_codec_parse_fmtp (D.44889_609, D.44893_598, D.44854_611, &codec_fmtp);
# VUSE <.MEM_1308>
D.44901_605 = strcasecmp (D.44889_600, "isac");
# VUSE <.MEM_1308>
D.47916_1482 = *D.44893_598;
# VUSE <.MEM_1308>
D.44854_611 = map_1729->rm_rate;
# VUSE <.MEM_1308>
D.44889_609 = map_1729->rm_encoding;

.MEM_1309 : -->6 uses.
.MEM_1130 = PHI <.MEM_1308(249), .MEM_1309(470), .MEM_1309(255), .MEM_1309(254), .MEM_1308(247), .MEM_1308(248)>
.MEM_1130 = PHI <.MEM_1308(249), .MEM_1309(470), .MEM_1309(255), .MEM_1309(254), .MEM_1308(247), .MEM_1308(248)>
.MEM_1130 = PHI <.MEM_1308(249), .MEM_1309(470), .MEM_1309(255), .MEM_1309(254), .MEM_1308(247), .MEM_1308(248)>
# VUSE <.MEM_1309>
D.44912_616 = codec_fmtp.microseconds_per_packet;
# VUSE <.MEM_1309>
fmtp_remote_codec_rate_619 = codec_fmtp.actual_samples_per_second;
# VUSE <.MEM_1309>
D.44909_613 = codec_fmtp.bits_per_second;

.MEM_1310 : -->26 uses.
.MEM_1132 = PHI <.MEM_1312(280), .MEM_1310(283)>
.MEM_1133 = PHI <.MEM_1139(258), .MEM_1311(277), .MEM_1317(285), .MEM_1322(286), .MEM_1310(278), .MEM_1310(272)>
.MEM_1133 = PHI <.MEM_1139(258), .MEM_1311(277), .MEM_1317(285), .MEM_1322(286), .MEM_1310(278), .MEM_1310(272)>
# VUSE <.MEM_1310>
pretmp.1042_1737 = imp_630->microseconds_per_packet;
# VUSE <.MEM_1310>
D.44856_650 = map_1729->rm_pt;
# .MEM_1313 = VDEF <.MEM_1310>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927_696, D.44929_698, codec_rate_633, D.44931_700, bit_rate_632);
# VUSE <.MEM_1310>
D.44928_697 = imp_630->ianacode;
# VUSE <.MEM_1310>
D.44927_696 = imp_630->iananame;
# VUSE <.MEM_1310>
D.44930_694 = imp_630->microseconds_per_packet;
# .MEM_1312 = VDEF <.MEM_1310>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44927_686, D.44985_687, D.44931_689);
# VUSE <.MEM_1310>
D.44930_688 = imp_630->microseconds_per_packet;
# VUSE <.MEM_1310>
D.44985_687 = imp_630->samples_per_second;
# VUSE <.MEM_1310>
D.44927_686 = imp_630->iananame;
# VUSE <.MEM_1310>
D.44945_658 = strcasecmp (rm_encoding_130, D.44927_657);
# VUSE <.MEM_1310>
D.44927_657 = imp_630->iananame;
# VUSE <.MEM_1310>
D.44980_684 = strcasecmp (D.44889_643, "pcmu");
# VUSE <.MEM_1310>
D.44978_682 = strcasecmp (D.44889_643, "pcma");
# VUSE <.MEM_1310>
D.44964_673 = strcasecmp (D.44889_643, "isac");
# VUSE <.MEM_1310>
D.44961_671 = strcasecmp (D.44889_643, "ilbc");
# VUSE <.MEM_1310>
D.47920_1484 = *D.44889_643;
# .MEM_1311 = VDEF <.MEM_1310>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
# VUSE <.MEM_1310>
D.44948_659 = imp_630->actual_samples_per_second;
# VUSE <.MEM_1310>
D.44928_654 = imp_630->ianacode;
# VUSE <.MEM_1310>
D.44821_646 = D.44471_645->ndlb;
# VUSE <.MEM_1310>
D.44471_645 = smh_186->mparams;
# VUSE <.MEM_1310>
D.44889_643 = map_1729->rm_encoding;

.MEM_1311 : --> single use.
.MEM_1133 = PHI <.MEM_1139(258), .MEM_1311(277), .MEM_1317(285), .MEM_1322(286), .MEM_1310(278), .MEM_1310(272)>

.MEM_1312 : --> single use.
.MEM_1132 = PHI <.MEM_1312(280), .MEM_1310(283)>

.MEM_1313 : --> single use.
# .MEM_1314 = VDEF <.MEM_1313>
near_matches[nm_idx_1140].codec_idx = i_1623;

.MEM_1314 : --> single use.
# .MEM_1315 = VDEF <.MEM_1314>
near_matches[nm_idx_1140].rate = remote_codec_rate.92_701;

.MEM_1315 : --> single use.
# .MEM_1316 = VDEF <.MEM_1315>
near_matches[nm_idx_1140].imp = imp_630;

.MEM_1316 : --> single use.
# .MEM_1317 = VDEF <.MEM_1316>
near_matches[nm_idx_1140].map = map_1729;

.MEM_1317 : --> single use.
.MEM_1133 = PHI <.MEM_1139(258), .MEM_1311(277), .MEM_1317(285), .MEM_1322(286), .MEM_1310(278), .MEM_1310(272)>

.MEM_1318 : --> single use.
# .MEM_1319 = VDEF <.MEM_1318>
matches[m_idx_1488].rate = codec_rate.94_703;

.MEM_1319 : --> single use.
# .MEM_1320 = VDEF <.MEM_1319>
matches[m_idx_1488].imp = imp_630;

.MEM_1320 : --> single use.
# .MEM_1321 = VDEF <.MEM_1320>
matches[m_idx_1488].map = map_1729;

.MEM_1321 : -->4 uses.
# VUSE <.MEM_1321>
D.44930_708 = imp_630->microseconds_per_packet;
# VUSE <.MEM_1321>
D.44928_706 = imp_630->ianacode;
# VUSE <.MEM_1321>
D.44927_705 = imp_630->iananame;
# .MEM_1322 = VDEF <.MEM_1321>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927_705, D.44929_707, codec_rate_633, D.44931_709, bit_rate_632);

.MEM_1322 : -->2 uses.
.MEM_1133 = PHI <.MEM_1139(258), .MEM_1311(277), .MEM_1317(285), .MEM_1322(286), .MEM_1310(278), .MEM_1310(272)>
.MEM_1138 = PHI <.MEM_1322(287), .MEM_1136(295), .MEM_49(292), .MEM_1580(222)>

.MEM_1323 : --> single use.
.MEM_1149 = PHI <.MEM_1326(309), .MEM_1138(311), .MEM_1323(297)>

.MEM_1324 : --> single use.
# .MEM_1325 = VDEF <.MEM_1324>
prefs[0] = &tmp;

.MEM_1325 : --> single use.
# .MEM_1326 = VDEF <.MEM_1325>
num_732 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);

.MEM_1326 : -->8 uses.
.MEM_1149 = PHI <.MEM_1326(309), .MEM_1138(311), .MEM_1323(297)>
# VUSE <.MEM_1326>
D.45027_738 = timp_1786->iananame;
# VUSE <.MEM_1326>
D.45028_741 = timp_1786->actual_samples_per_second;
# .MEM_1327 = VDEF <.MEM_1326>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45027_738, prephitmp.1039_858, D.45028_741);
.MEM_1847 = PHI <.MEM_1326(310), .MEM_1138(299)>
# VUSE <.MEM_1326>
pretmp.1036_1897 = timp_330->microseconds_per_packet;
# VUSE <.MEM_1326>
D.45025_735 = timp_134->microseconds_per_packet;
# VUSE <.MEM_1326>
timp_733 = search[0];

.MEM_1327 : -->2 uses.
# VUSE <.MEM_1327>
D.45029_743 = near_matches[j_1787].codec_idx;
# .MEM_1328 = VDEF <.MEM_1327>
matches[0].codec_idx = D.45029_743;

.MEM_1328 : --> single use.
# .MEM_1329 = VDEF <.MEM_1328>
matches[0].rate = near_rate.96_617;

.MEM_1329 : --> single use.
# .MEM_1330 = VDEF <.MEM_1329>
matches[0].imp = timp_1786;

.MEM_1330 : --> single use.
# .MEM_1331 = VDEF <.MEM_1330>
matches[0].map = near_map_1788;

.MEM_1331 : --> single use.
.MEM_1857 = PHI <.MEM_1138(311), .MEM_1331(308)>

.MEM_1332 : --> single use.
.MEM_1142 = PHI <.MEM_1857(312), .MEM_1332(313)>

.MEM_1333 : --> single use.
# .MEM_1334 = VDEF <.MEM_1333>
smh_186->num_negotiated_codecs = 0;

.MEM_1334 : -->2 uses.
.MEM_1697 = PHI <.MEM_1898(473), .MEM_1334(314)>
.MEM_1881 = PHI <.MEM_1365(333), .MEM_1334(315)>

.MEM_1335 : -->4 uses.
.MEM_1143 = PHI <.MEM_1335(316), .MEM_1337(317), .MEM_1338(318)>
# VUSE <.MEM_1335>
mmap_763 = matches[j_1882].map;
# VUSE <.MEM_1335>
mimp_762 = matches[j_1882].imp;
# .MEM_1336 = VDEF <.MEM_1335>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_761;

.MEM_1336 : --> single use.
# .MEM_1337 = VDEF <.MEM_1336>
pmap_761->current = 1;

.MEM_1337 : -->4 uses.
.MEM_1143 = PHI <.MEM_1335(316), .MEM_1337(317), .MEM_1338(318)>
# .MEM_1338 = VDEF <.MEM_1337>
switch_rtp_set_default_payload (D.44605_765, D.45049_767);
# VUSE <.MEM_1337>
D.44605_765 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# VUSE <.MEM_1337>
D.45049_767 = pmap_761->pt;

.MEM_1338 : --> single use.
.MEM_1143 = PHI <.MEM_1335(316), .MEM_1337(317), .MEM_1338(318)>

.MEM_1339 : --> single use.
# .MEM_1340 = VDEF <.MEM_1339>
pmap_761->rm_encoding = D.45051_769;

.MEM_1340 : -->2 uses.
# .MEM_1341 = VDEF <.MEM_1340>
D.45053_771 = switch_core_perform_session_strdup (session_161(D), D.45052_770, "src/switch_core_media.c", &__func__, 3536);
# VUSE <.MEM_1340>
D.45052_770 = mimp_762->iananame;

.MEM_1341 : --> single use.
# .MEM_1342 = VDEF <.MEM_1341>
pmap_761->iananame = D.45053_771;

.MEM_1342 : -->2 uses.
# VUSE <.MEM_1342>
D.45054_772 = mmap_763->rm_pt;
# .MEM_1343 = VDEF <.MEM_1342>
pmap_761->recv_pt = D.45055_773;

.MEM_1343 : -->2 uses.
# VUSE <.MEM_1343>
D.45056_774 = mimp_762->samples_per_second;
# .MEM_1344 = VDEF <.MEM_1343>
pmap_761->rm_rate = D.45056_774;

.MEM_1344 : --> single use.
# .MEM_1345 = VDEF <.MEM_1344>
pmap_761->adv_rm_rate = D.45056_774;

.MEM_1345 : -->5 uses.
.MEM_1144 = PHI <.MEM_1345(319), .MEM_1346(320)>
# VUSE <.MEM_1345>
D.45057_777 = strcasecmp (D.45052_776, "g722");
# VUSE <.MEM_1345>
D.45052_776 = mimp_762->iananame;
# .MEM_1346 = VDEF <.MEM_1345>
pmap_761->rm_rate = D.45060_778;
# VUSE <.MEM_1345>
D.45060_778 = mimp_762->actual_samples_per_second;

.MEM_1346 : --> single use.
.MEM_1144 = PHI <.MEM_1345(319), .MEM_1346(320)>

.MEM_1347 : -->2 uses.
# VUSE <.MEM_1347>
D.45064_782 = mimp_762->bits_per_second;
# .MEM_1348 = VDEF <.MEM_1347>
pmap_761->bitrate = D.45065_783;

.MEM_1348 : -->3 uses.
.MEM_1515 = PHI <.MEM_1538(322), .MEM_1348(321)>
# VUSE <.MEM_1348>
D.45067_784 = mmap_763->rm_params;
# .MEM_1538 = VDEF <.MEM_1348>
D.47923_1486 = strtol (D.45067_784, 0B, 10);

.MEM_1349 : -->5 uses.
# VUSE <.MEM_1349>
D.45071_789 = strcasecmp (D.45050_788, "opus");
# VUSE <.MEM_1349>
D.45050_788 = mmap_763->rm_encoding;
# .MEM_1356 = VDEF <.MEM_1349>
pmap_761->adv_channels = D.47923_146;
# .MEM_1352 = VDEF <.MEM_1349>
pmap_761->adv_channels = 2;
# .MEM_1350 = VDEF <.MEM_1349>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");

.MEM_1350 : --> single use.
# .MEM_1351 = VDEF <.MEM_1350>
pmap_761->adv_channels = 1;

.MEM_1351 : --> single use.
.MEM_1145 = PHI <.MEM_1351(325), .MEM_1352(326)>

.MEM_1352 : --> single use.
.MEM_1145 = PHI <.MEM_1351(325), .MEM_1352(326)>

.MEM_1353 : -->2 uses.
.MEM_1146 = PHI <.MEM_1145(328), .MEM_1353(472), .MEM_1145(327)>
# .MEM_1354 = VDEF <.MEM_1353>
pmap_761->channels = 2;

.MEM_1354 : --> single use.
.MEM_1147 = PHI <.MEM_1355(330), .MEM_1356(331), .MEM_1354(329)>

.MEM_1355 : --> single use.
.MEM_1147 = PHI <.MEM_1355(330), .MEM_1356(331), .MEM_1354(329)>

.MEM_1356 : --> single use.
.MEM_1147 = PHI <.MEM_1355(330), .MEM_1356(331), .MEM_1354(329)>

.MEM_1357 : --> single use.
# .MEM_1358 = VDEF <.MEM_1357>
pmap_761->remote_sdp_ip = D.45087_797;

.MEM_1358 : -->2 uses.
# VUSE <.MEM_1358>
D.44697_798 = m_1765->m_port;
# .MEM_1359 = VDEF <.MEM_1358>
pmap_761->remote_sdp_port = D.45088_799;

.MEM_1359 : -->2 uses.
# .MEM_1360 = VDEF <.MEM_1359>
D.45089_801 = switch_core_perform_session_strdup (session_161(D), D.45080_800, "src/switch_core_media.c", &__func__, 3565);
# VUSE <.MEM_1359>
D.45080_800 = mmap_763->rm_fmtp;

.MEM_1360 : --> single use.
# .MEM_1361 = VDEF <.MEM_1360>
pmap_761->rm_fmtp = D.45089_801;

.MEM_1361 : -->2 uses.
# VUSE <.MEM_1361>
D.45054_802 = mmap_763->rm_pt;
# .MEM_1362 = VDEF <.MEM_1361>
pmap_761->agreed_pt = D.45055_803;

.MEM_1362 : -->2 uses.
# VUSE <.MEM_1362>
D.44655_804 = smh_186->num_negotiated_codecs;
# .MEM_1363 = VDEF <.MEM_1362>
smh_186->negotiated_codecs[D.44655_804] = mimp_762;

.MEM_1363 : --> single use.
# .MEM_1364 = VDEF <.MEM_1363>
smh_186->num_negotiated_codecs = D.45090_805;

.MEM_1364 : -->2 uses.
# .MEM_1365 = VDEF <.MEM_1364>
pmap_761->recv_pt = D.45055_807;
# VUSE <.MEM_1364>
D.45054_806 = mmap_763->rm_pt;

.MEM_1365 : -->2 uses.
.MEM_1898 = PHI <.MEM_1365(332)>
.MEM_1881 = PHI <.MEM_1365(333), .MEM_1334(315)>

.MEM_1366 : -->4 uses.
# VUSE <.MEM_1366>
D.44760_814 = D.44750_813->remote_sdp_ip;
# VUSE <.MEM_1366>
D.44750_813 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# VUSE <.MEM_1366>
D.44530_812 = session_161(D)->channel;
# .MEM_1367 = VDEF <.MEM_1366>
switch_channel_set_variable_var_check (D.44530_812, "remote_media_ip", D.44760_814, 1);

.MEM_1367 : -->2 uses.
# VUSE <.MEM_1367>
D.44530_815 = session_161(D)->channel;
# .MEM_1368 = VDEF <.MEM_1367>
switch_channel_set_variable_var_check (D.44530_815, "remote_media_port", &tmp, 1);

.MEM_1368 : -->3 uses.
# VUSE <.MEM_1368>
D.45093_817 = D.44750_816->recv_pt;
# VUSE <.MEM_1368>
D.44750_816 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1369 = VDEF <.MEM_1368>
switch_snprintf (&tmp, 50, "%d", D.45094_818);

.MEM_1369 : -->2 uses.
# .MEM_1370 = VDEF <.MEM_1369>
switch_channel_set_variable_var_check (D.44530_819, "rtp_audio_recv_pt", &tmp, 1);
# VUSE <.MEM_1369>
D.44530_819 = session_161(D)->channel;

.MEM_1370 : -->9 uses.
.MEM_1150 = PHI <.MEM_1370(338), .MEM_1371(339), .MEM_1370(335), .MEM_1370(336), .MEM_1370(337)>
.MEM_1150 = PHI <.MEM_1370(338), .MEM_1371(339), .MEM_1370(335), .MEM_1370(336), .MEM_1370(337)>
.MEM_1150 = PHI <.MEM_1370(338), .MEM_1371(339), .MEM_1370(335), .MEM_1370(336), .MEM_1370(337)>
.MEM_1150 = PHI <.MEM_1370(338), .MEM_1371(339), .MEM_1370(335), .MEM_1370(336), .MEM_1370(337)>
# VUSE <.MEM_1370>
D.47935_1489 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
# VUSE <.MEM_1370>
D.47933_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
# VUSE <.MEM_1370>
D.47932_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
# VUSE <.MEM_1370>
D.47931_1493 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
# .MEM_1371 = VDEF <.MEM_1370>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;

.MEM_1371 : --> single use.
.MEM_1150 = PHI <.MEM_1370(338), .MEM_1371(339), .MEM_1370(335), .MEM_1370(336), .MEM_1370(337)>

.MEM_1372 : -->2 uses.
.MEM_1151 = PHI <.MEM_1149(334), .MEM_1373(341), .MEM_1372(340)>
# .MEM_1373 = VDEF <.MEM_1372>
check_ice (smh_186, 0, sdp_198, m_1765);

.MEM_1373 : --> single use.
.MEM_1151 = PHI <.MEM_1149(334), .MEM_1373(341), .MEM_1372(340)>

.MEM_1374 : -->3 uses.
.MEM_1152 = PHI <.MEM_1374(343), .MEM_1375(344)>
# .MEM_1375 = VDEF <.MEM_1374>
D.45110_829 = switch_channel_test_flag (D.44530_828, 93);
# VUSE <.MEM_1374>
D.44530_828 = session_161(D)->channel;

.MEM_1375 : -->2 uses.
.MEM_1852 = PHI <.MEM_1376(345), .MEM_1375(344)>
.MEM_1152 = PHI <.MEM_1374(343), .MEM_1375(344)>

.MEM_1376 : -->4 uses.
.MEM_1852 = PHI <.MEM_1376(345), .MEM_1375(344)>
.MEM_1853 = PHI <.MEM_1376(345), .MEM_1151(342)>
# VUSE <.MEM_1376>
best_te_834 = D.44471_833->te;
# VUSE <.MEM_1376>
D.44471_833 = smh_186->mparams;

.MEM_1377 : -->4 uses.
# .MEM_1384 = VDEF <.MEM_1377>
D.44471_846->te = best_te_1861;
# VUSE <.MEM_1377>
D.44471_846 = smh_186->mparams;
# .MEM_1378 = VDEF <.MEM_1377>
D.44471_836->te = best_te_1861;
# VUSE <.MEM_1377>
D.44471_836 = smh_186->mparams;

.MEM_1378 : --> single use.
# .MEM_1379 = VDEF <.MEM_1378>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_838);

.MEM_1379 : -->2 uses.
# .MEM_1380 = VDEF <.MEM_1379>
switch_channel_set_variable_var_check (D.44530_839, "dtmf_type", "rfc2833", 1);
# VUSE <.MEM_1379>
D.44530_839 = session_161(D)->channel;

.MEM_1380 : -->2 uses.
# .MEM_1381 = VDEF <.MEM_1380>
D.44471_840->dtmf_type = 0;
# VUSE <.MEM_1380>
D.44471_840 = smh_186->mparams;

.MEM_1381 : -->3 uses.
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>
# .MEM_1382 = VDEF <.MEM_1381>
switch_rtp_set_telephony_event (D.44605_841, best_te_1861);
# VUSE <.MEM_1381>
D.44605_841 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;

.MEM_1382 : -->2 uses.
# .MEM_1383 = VDEF <.MEM_1382>
switch_channel_set_variable_printf (D.44530_843, "rtp_2833_send_payload", "%d", D.44857_838);
# VUSE <.MEM_1382>
D.44530_843 = session_161(D)->channel;

.MEM_1383 : --> single use.
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>

.MEM_1384 : --> single use.
# .MEM_1385 = VDEF <.MEM_1384>
D.44471_846->recv_te = best_te_1861;

.MEM_1385 : --> single use.
# .MEM_1386 = VDEF <.MEM_1385>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45121_849);

.MEM_1386 : -->2 uses.
# .MEM_1387 = VDEF <.MEM_1386>
switch_channel_set_variable_var_check (D.44530_850, "dtmf_type", "rfc2833", 1);
# VUSE <.MEM_1386>
D.44530_850 = session_161(D)->channel;

.MEM_1387 : -->2 uses.
# .MEM_1388 = VDEF <.MEM_1387>
D.44471_851->dtmf_type = 0;
# VUSE <.MEM_1387>
D.44471_851 = smh_186->mparams;

.MEM_1388 : -->3 uses.
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>
# .MEM_1389 = VDEF <.MEM_1388>
switch_rtp_set_telephony_event (D.44605_852, best_te_1861);
# VUSE <.MEM_1388>
D.44605_852 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;

.MEM_1389 : -->2 uses.
# .MEM_1390 = VDEF <.MEM_1389>
switch_channel_set_variable_printf (D.44530_854, "rtp_2833_send_payload", "%d", D.45121_849);
# VUSE <.MEM_1389>
D.44530_854 = session_161(D)->channel;

.MEM_1390 : -->2 uses.
# .MEM_1391 = VDEF <.MEM_1390>
switch_rtp_set_telephony_recv_event (D.44605_856, best_te_1861);
# VUSE <.MEM_1390>
D.44605_856 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;

.MEM_1391 : -->2 uses.
# .MEM_1392 = VDEF <.MEM_1391>
switch_channel_set_variable_printf (D.44530_857, "rtp_2833_recv_payload", "%d", D.45121_849);
# VUSE <.MEM_1391>
D.44530_857 = session_161(D)->channel;

.MEM_1392 : --> single use.
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>

.MEM_1393 : -->16 uses.
.MEM_1632 = PHI <.MEM_1393(352), .MEM_1393(353), .MEM_1393(354), .MEM_1393(355), .MEM_1393(356), .MEM_1393(357), .MEM_1393(358), .MEM_1651(360)>
.MEM_1632 = PHI <.MEM_1393(352), .MEM_1393(353), .MEM_1393(354), .MEM_1393(355), .MEM_1393(356), .MEM_1393(357), .MEM_1393(358), .MEM_1651(360)>
.MEM_1632 = PHI <.MEM_1393(352), .MEM_1393(353), .MEM_1393(354), .MEM_1393(355), .MEM_1393(356), .MEM_1393(357), .MEM_1393(358), .MEM_1651(360)>
.MEM_1632 = PHI <.MEM_1393(352), .MEM_1393(353), .MEM_1393(354), .MEM_1393(355), .MEM_1393(356), .MEM_1393(357), .MEM_1393(358), .MEM_1651(360)>
.MEM_1632 = PHI <.MEM_1393(352), .MEM_1393(353), .MEM_1393(354), .MEM_1393(355), .MEM_1393(356), .MEM_1393(357), .MEM_1393(358), .MEM_1651(360)>
.MEM_1632 = PHI <.MEM_1393(352), .MEM_1393(353), .MEM_1393(354), .MEM_1393(355), .MEM_1393(356), .MEM_1393(357), .MEM_1393(358), .MEM_1651(360)>
.MEM_1632 = PHI <.MEM_1393(352), .MEM_1393(353), .MEM_1393(354), .MEM_1393(355), .MEM_1393(356), .MEM_1393(357), .MEM_1393(358), .MEM_1651(360)>
.MEM_1868 = PHI <.MEM_1651(360), .MEM_1393(351), .MEM_1650(359)>
# .MEM_1650 = VDEF <.MEM_1393>
D.49743_1608 = switch_is_number (D.45125_859);
# VUSE <.MEM_1393>
D.49742_1607 = strcasecmp (D.45125_859, "disallow");
# VUSE <.MEM_1393>
D.49741_1606 = strcasecmp (D.45125_859, "inactive");
# VUSE <.MEM_1393>
D.49740_1605 = strcasecmp (D.45125_859, "disabled");
# VUSE <.MEM_1393>
D.49739_1604 = strcasecmp (D.45125_859, "f");
# VUSE <.MEM_1393>
D.49738_1603 = strcasecmp (D.45125_859, "false");
# VUSE <.MEM_1393>
D.49737_1602 = strcasecmp (D.45125_859, "off");
# VUSE <.MEM_1393>
D.49736_1601 = strcasecmp (D.45125_859, "no");

.MEM_1394 : --> no uses.

.MEM_1395 : -->2 uses.
# .MEM_1396 = VDEF <.MEM_1395>
switch_channel_set_variable_var_check (D.44530_861, "dtmf_type", "info", 1);
# VUSE <.MEM_1395>
D.44530_861 = session_161(D)->channel;

.MEM_1396 : -->2 uses.
# .MEM_1397 = VDEF <.MEM_1396>
D.44471_862->dtmf_type = 1;
# VUSE <.MEM_1396>
D.44471_862 = smh_186->mparams;

.MEM_1397 : --> single use.
# .MEM_1398 = VDEF <.MEM_1397>
D.44471_862->te = 0;

.MEM_1398 : --> single use.
# .MEM_1399 = VDEF <.MEM_1398>
D.44471_862->recv_te = 0;

.MEM_1399 : --> single use.
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>

.MEM_1400 : -->2 uses.
# .MEM_1401 = VDEF <.MEM_1400>
D.44471_868->dtmf_type = 2;
# VUSE <.MEM_1400>
D.44471_868 = smh_186->mparams;

.MEM_1401 : --> single use.
# .MEM_1402 = VDEF <.MEM_1401>
D.44471_868->te = 0;

.MEM_1402 : --> single use.
# .MEM_1403 = VDEF <.MEM_1402>
D.44471_868->recv_te = 0;

.MEM_1403 : --> single use.
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>

.MEM_1404 : --> single use.
# .MEM_1405 = VDEF <.MEM_1404>
memset (&near_matches, 0, 480);

.MEM_1405 : -->2 uses.
# .MEM_1406 = VDEF <.MEM_1405>
switch_channel_set_variable_var_check (D.44530_879, "video_possible", "true", 1);
# VUSE <.MEM_1405>
D.44530_879 = session_161(D)->channel;

.MEM_1406 : -->6 uses.
.MEM_1874 = PHI <.MEM_1091(433), .MEM_1406(367)>
.MEM_1873 = PHI <.MEM_1091(432), .MEM_1406(368)>
# VUSE <.MEM_1406>
map_884 = m_1765->m_rtpmaps;
# .MEM_1407 = VDEF <.MEM_1406>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
# VUSE <.MEM_1406>
connection_881 = m_1765->m_connections;
# VUSE <.MEM_1406>
connection_880 = sdp_198->sdp_connection;

.MEM_1407 : --> single use.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>

.MEM_1408 : -->2 uses.
.MEM_1154 = PHI <.MEM_1408(369), .MEM_1409(370)>
# .MEM_1409 = VDEF <.MEM_1408>
D.45141_886 = dtls_ok (session_161(D));

.MEM_1409 : -->9 uses.
.MEM_1883 = PHI <.MEM_1157(412), .MEM_1154(379), .MEM_1409(371)>
.MEM_1154 = PHI <.MEM_1408(369), .MEM_1409(370)>
.MEM_1717 = PHI <.MEM_1409(483), .MEM_1154(379)>
# VUSE <.MEM_1409>
D.45144_889 = strcasecmp (D.44590_888, "fingerprint");
# VUSE <.MEM_1409>
D.44590_888 = attr_1851->a_name;
# VUSE <.MEM_1409>
attr_893 = attr_1851->a_next;
# VUSE <.MEM_1409>
D.47940_1496 = *D.44619_890;
# VUSE <.MEM_1409>
D.44619_890 = attr_1851->a_value;
# VUSE <.MEM_1409>
attr_887 = m_1765->m_attributes;

.MEM_1410 : -->3 uses.
.MEM_1155 = PHI <.MEM_1410(476), .MEM_1411(385)>
# VUSE <.MEM_1410>
D.45164_904 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
# .MEM_1411 = VDEF <.MEM_1410>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45165_905;

.MEM_1411 : --> single use.
.MEM_1155 = PHI <.MEM_1410(476), .MEM_1411(385)>

.MEM_1412 : --> single use.
.MEM_1157 = PHI <.MEM_1720(381), .MEM_1412(386), .MEM_1415(392), .MEM_1720(393), .MEM_1720(394), .MEM_1720(396), .MEM_1419(409), .MEM_1720(384), .MEM_1414(391), .MEM_1720(383), .MEM_1720(395)>

.MEM_1413 : -->2 uses.
# .MEM_1544 = VDEF <.MEM_1413>
D.47947_1500 = strtol (D.44619_955, 0B, 10);
# VUSE <.MEM_1413>
D.44619_955 = attr_620->a_value;

.MEM_1414 : -->4 uses.
.MEM_1157 = PHI <.MEM_1720(381), .MEM_1412(386), .MEM_1415(392), .MEM_1720(393), .MEM_1720(394), .MEM_1720(396), .MEM_1419(409), .MEM_1720(384), .MEM_1414(391), .MEM_1720(383), .MEM_1720(395)>
# .MEM_1415 = VDEF <.MEM_1414>
D.44471_958->rtcp_video_interval_msec = "5000";
# VUSE <.MEM_1414>
D.45215_959 = D.44471_958->rtcp_video_interval_msec;
# VUSE <.MEM_1414>
D.44471_958 = smh_186->mparams;

.MEM_1415 : --> single use.
.MEM_1157 = PHI <.MEM_1720(381), .MEM_1412(386), .MEM_1415(392), .MEM_1720(393), .MEM_1720(394), .MEM_1720(396), .MEM_1419(409), .MEM_1720(384), .MEM_1414(391), .MEM_1720(383), .MEM_1720(395)>

.MEM_1416 : -->16 uses.
.MEM_1634 = PHI <.MEM_1416(398), .MEM_1416(399), .MEM_1416(400), .MEM_1416(401), .MEM_1416(402), .MEM_1416(403), .MEM_1416(404), .MEM_1654(406)>
.MEM_1634 = PHI <.MEM_1416(398), .MEM_1416(399), .MEM_1416(400), .MEM_1416(401), .MEM_1416(402), .MEM_1416(403), .MEM_1416(404), .MEM_1654(406)>
.MEM_1634 = PHI <.MEM_1416(398), .MEM_1416(399), .MEM_1416(400), .MEM_1416(401), .MEM_1416(402), .MEM_1416(403), .MEM_1416(404), .MEM_1654(406)>
.MEM_1634 = PHI <.MEM_1416(398), .MEM_1416(399), .MEM_1416(400), .MEM_1416(401), .MEM_1416(402), .MEM_1416(403), .MEM_1416(404), .MEM_1654(406)>
.MEM_1634 = PHI <.MEM_1416(398), .MEM_1416(399), .MEM_1416(400), .MEM_1416(401), .MEM_1416(402), .MEM_1416(403), .MEM_1416(404), .MEM_1654(406)>
.MEM_1634 = PHI <.MEM_1416(398), .MEM_1416(399), .MEM_1416(400), .MEM_1416(401), .MEM_1416(402), .MEM_1416(403), .MEM_1416(404), .MEM_1654(406)>
.MEM_1634 = PHI <.MEM_1416(398), .MEM_1416(399), .MEM_1416(400), .MEM_1416(401), .MEM_1416(402), .MEM_1416(403), .MEM_1416(404), .MEM_1654(406)>
.MEM_1865 = PHI <.MEM_1654(406), .MEM_1416(397), .MEM_1653(405)>
# .MEM_1653 = VDEF <.MEM_1416>
D.49755_1618 = switch_is_number (D.45228_969);
# VUSE <.MEM_1416>
D.49754_1617 = strcasecmp (D.45228_969, "allow");
# VUSE <.MEM_1416>
D.49753_1616 = strcasecmp (D.45228_969, "active");
# VUSE <.MEM_1416>
D.49752_1615 = strcasecmp (D.45228_969, "enabled");
# VUSE <.MEM_1416>
D.49751_1614 = strcasecmp (D.45228_969, "t");
# VUSE <.MEM_1416>
D.49750_1613 = strcasecmp (D.45228_969, "true");
# VUSE <.MEM_1416>
D.49749_1612 = strcasecmp (D.45228_969, "on");
# VUSE <.MEM_1416>
D.49748_1611 = strcasecmp (D.45228_969, "yes");

.MEM_1417 : --> no uses.

.MEM_1418 : --> single use.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>

.MEM_1419 : --> single use.
.MEM_1157 = PHI <.MEM_1720(381), .MEM_1412(386), .MEM_1415(392), .MEM_1720(393), .MEM_1720(394), .MEM_1720(396), .MEM_1419(409), .MEM_1720(384), .MEM_1414(391), .MEM_1720(383), .MEM_1720(395)>

.MEM_1420 : -->3 uses.
.MEM_1159 = PHI <.MEM_1420(418), .MEM_1421(419)>
# .MEM_1421 = VDEF <.MEM_1420>
D.45245_991 = switch_channel_test_flag (D.44530_990, 114);
# VUSE <.MEM_1420>
D.44530_990 = session_161(D)->channel;

.MEM_1421 : -->2 uses.
.MEM_1159 = PHI <.MEM_1420(418), .MEM_1421(419)>
.MEM_1161 = PHI <.MEM_871(417), .MEM_1421(419), .MEM_1422(426), .MEM_1422(425), .MEM_1425(427)>

.MEM_1422 : -->13 uses.
.MEM_1161 = PHI <.MEM_871(417), .MEM_1421(419), .MEM_1422(426), .MEM_1422(425), .MEM_1425(427)>
.MEM_1161 = PHI <.MEM_871(417), .MEM_1421(419), .MEM_1422(426), .MEM_1422(425), .MEM_1425(427)>
# VUSE <.MEM_1422>
D.45256_997 = map_1621->rm_encoding;
# VUSE <.MEM_1422>
D.45248_1004 = map_1621->rm_pt;
# VUSE <.MEM_1422>
D.45260_1012 = strcasecmp (rm_encoding_137, D.45250_1011);
# VUSE <.MEM_1422>
D.47958_1504 = *D.45256_997;
# .MEM_1423 = VDEF <.MEM_1422>
matches[m_idx_911].imp = imp_986;
# VUSE <.MEM_1422>
D.45264_1015 = imp_986->samples_per_second;
# VUSE <.MEM_1422>
D.45263_1014 = map_1621->rm_rate;
# VUSE <.MEM_1422>
D.45250_1011 = imp_986->iananame;
# VUSE <.MEM_1422>
D.45251_1008 = imp_986->ianacode;
# VUSE <.MEM_1422>
D.44821_1000 = D.44471_999->ndlb;
# VUSE <.MEM_1422>
D.44471_999 = smh_186->mparams;

.MEM_1423 : --> single use.
# .MEM_1424 = VDEF <.MEM_1423>
matches[m_idx_911].map = map_1621;

.MEM_1424 : -->3 uses.
# .MEM_1425 = VDEF <.MEM_1424>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45250_1016, D.45252_1018);
# VUSE <.MEM_1424>
D.45251_1017 = imp_986->ianacode;
# VUSE <.MEM_1424>
D.45250_1016 = imp_986->iananame;

.MEM_1425 : --> single use.
.MEM_1161 = PHI <.MEM_871(417), .MEM_1421(419), .MEM_1422(426), .MEM_1422(425), .MEM_1425(427)>

.MEM_1426 : --> single use.
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>

.MEM_1427 : --> single use.
.MEM_1165 = PHI <.MEM_1874(437), .MEM_1427(438)>

.MEM_1428 : --> single use.
.MEM_1844 = PHI <.MEM_1443(444), .MEM_1428(439)>

.MEM_1429 : -->2 uses.
.MEM_1166 = PHI <.MEM_1429(440), .MEM_1431(441), .MEM_1432(442)>
# .MEM_1430 = VDEF <.MEM_1429>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1045;

.MEM_1430 : --> single use.
# .MEM_1431 = VDEF <.MEM_1430>
pmap_1045->current = 1;

.MEM_1431 : -->4 uses.
.MEM_1166 = PHI <.MEM_1429(440), .MEM_1431(441), .MEM_1432(442)>
# .MEM_1432 = VDEF <.MEM_1431>
switch_rtp_set_default_payload (D.45288_1047, D.45291_1049);
# VUSE <.MEM_1431>
D.45288_1047 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
# VUSE <.MEM_1431>
D.45291_1049 = pmap_1045->pt;

.MEM_1432 : --> single use.
.MEM_1166 = PHI <.MEM_1429(440), .MEM_1431(441), .MEM_1432(442)>

.MEM_1433 : --> single use.
# .MEM_1434 = VDEF <.MEM_1433>
pmap_1045->rm_encoding = D.45292_1053;

.MEM_1434 : -->2 uses.
# VUSE <.MEM_1434>
D.45248_1054 = map_1051->rm_pt;
# .MEM_1435 = VDEF <.MEM_1434>
pmap_1045->recv_pt = D.45293_1055;

.MEM_1435 : -->2 uses.
# VUSE <.MEM_1435>
D.45263_1056 = map_1051->rm_rate;
# .MEM_1436 = VDEF <.MEM_1435>
pmap_1045->rm_rate = D.45263_1056;

.MEM_1436 : -->2 uses.
# VUSE <.MEM_1436>
D.45294_1057 = mimp_1050->microseconds_per_packet;
# .MEM_1437 = VDEF <.MEM_1436>
pmap_1045->codec_ms = D.45296_1059;

.MEM_1437 : -->2 uses.
# VUSE <.MEM_1437>
D.45086_1060 = connection_110->c_address;
# .MEM_1438 = VDEF <.MEM_1437>
D.45297_1061 = switch_core_perform_session_strdup (session_161(D), D.45086_1060, "src/switch_core_media.c", &__func__, 3810);

.MEM_1438 : --> single use.
# .MEM_1439 = VDEF <.MEM_1438>
pmap_1045->remote_sdp_ip = D.45297_1061;

.MEM_1439 : -->2 uses.
# .MEM_1440 = VDEF <.MEM_1439>
pmap_1045->remote_sdp_port = D.45088_1063;
# VUSE <.MEM_1439>
D.44697_1062 = m_1765->m_port;

.MEM_1440 : -->2 uses.
# .MEM_1441 = VDEF <.MEM_1440>
D.45299_1065 = switch_core_perform_session_strdup (session_161(D), D.45298_1064, "src/switch_core_media.c", &__func__, 3813);
# VUSE <.MEM_1440>
D.45298_1064 = map_1051->rm_fmtp;

.MEM_1441 : --> single use.
# .MEM_1442 = VDEF <.MEM_1441>
pmap_1045->rm_fmtp = D.45299_1065;

.MEM_1442 : -->2 uses.
# .MEM_1443 = VDEF <.MEM_1442>
pmap_1045->agreed_pt = D.45293_1067;
# VUSE <.MEM_1442>
D.45248_1066 = map_1051->rm_pt;

.MEM_1443 : -->4 uses.
.MEM_1844 = PHI <.MEM_1443(444), .MEM_1428(439)>
# VUSE <.MEM_1443>
D.45300_1070 = D.45287_1069->remote_sdp_port;
# .MEM_1444 = VDEF <.MEM_1443>
switch_snprintf (&tmp, 50, "%d", D.45301_1071);
# VUSE <.MEM_1443>
D.45287_1069 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;

.MEM_1444 : -->4 uses.
# VUSE <.MEM_1444>
D.45287_1073 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1445 = VDEF <.MEM_1444>
switch_channel_set_variable_var_check (D.44530_1072, "remote_video_ip", D.45302_1074, 1);
# VUSE <.MEM_1444>
D.45302_1074 = D.45287_1073->remote_sdp_ip;
# VUSE <.MEM_1444>
D.44530_1072 = session_161(D)->channel;

.MEM_1445 : -->2 uses.
# .MEM_1446 = VDEF <.MEM_1445>
switch_channel_set_variable_var_check (D.44530_1075, "remote_video_port", &tmp, 1);
# VUSE <.MEM_1445>
D.44530_1075 = session_161(D)->channel;

.MEM_1446 : -->4 uses.
# VUSE <.MEM_1446>
D.45287_1077 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1447 = VDEF <.MEM_1446>
switch_channel_set_variable_var_check (D.44530_1076, "rtp_video_fmtp", D.45303_1078, 1);
# VUSE <.MEM_1446>
D.45303_1078 = D.45287_1077->rm_fmtp;
# VUSE <.MEM_1446>
D.44530_1076 = session_161(D)->channel;

.MEM_1447 : -->3 uses.
# VUSE <.MEM_1447>
D.45287_1079 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1448 = VDEF <.MEM_1447>
switch_snprintf (&tmp, 50, "%d", D.45305_1081);
# VUSE <.MEM_1447>
D.45304_1080 = D.45287_1079->agreed_pt;

.MEM_1448 : -->2 uses.
# .MEM_1449 = VDEF <.MEM_1448>
switch_channel_set_variable_var_check (D.44530_1082, "rtp_video_pt", &tmp, 1);
# VUSE <.MEM_1448>
D.44530_1082 = session_161(D)->channel;

.MEM_1449 : --> single use.
# .MEM_1450 = VDEF <.MEM_1449>
switch_core_media_check_video_codecs (session_161(D));

.MEM_1450 : -->3 uses.
# VUSE <.MEM_1450>
D.45287_1083 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1451 = VDEF <.MEM_1450>
switch_snprintf (&tmp, 50, "%d", D.45307_1085);
# VUSE <.MEM_1450>
D.45306_1084 = D.45287_1083->recv_pt;

.MEM_1451 : -->2 uses.
# .MEM_1452 = VDEF <.MEM_1451>
switch_channel_set_variable_var_check (D.44530_1086, "rtp_video_recv_pt", &tmp, 1);
# VUSE <.MEM_1451>
D.44530_1086 = session_161(D)->channel;

.MEM_1452 : -->9 uses.
.MEM_1168 = PHI <.MEM_1452(450), .MEM_1453(451), .MEM_1452(447), .MEM_1452(448), .MEM_1452(449)>
.MEM_1168 = PHI <.MEM_1452(450), .MEM_1453(451), .MEM_1452(447), .MEM_1452(448), .MEM_1452(449)>
.MEM_1168 = PHI <.MEM_1452(450), .MEM_1453(451), .MEM_1452(447), .MEM_1452(448), .MEM_1452(449)>
.MEM_1168 = PHI <.MEM_1452(450), .MEM_1453(451), .MEM_1452(447), .MEM_1452(448), .MEM_1452(449)>
# VUSE <.MEM_1452>
D.47966_1506 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
# VUSE <.MEM_1452>
D.47964_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
# VUSE <.MEM_1452>
D.47963_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
# VUSE <.MEM_1452>
D.47962_1510 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
# .MEM_1453 = VDEF <.MEM_1452>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;

.MEM_1453 : --> single use.
.MEM_1168 = PHI <.MEM_1452(450), .MEM_1453(451), .MEM_1452(447), .MEM_1452(448), .MEM_1452(449)>

.MEM_1454 : -->2 uses.
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>
# .MEM_1455 = VDEF <.MEM_1454>
check_ice (smh_186, 1, sdp_198, m_1765);

.MEM_1455 : --> single use.
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>

.MEM_1456 : -->2 uses.
# VUSE <.MEM_1456>
D.44471_1095 = smh_186->mparams;
# .MEM_1457 = VDEF <.MEM_1456>
D.44471_1095->cng_pt = cng_pt_1048;

.MEM_1457 : --> no uses.

pmap_1458 : -->3 uses.
pmap_1748 = PHI <pmap_1460(25), pmap_1458(22)>
# DEBUG pmap => pmap_1458
if (pmap_1458 != 0B)
D.47872_1662 = pmap_1458->allocated;
# DEBUG pmap => pmap_1458

pretmp.991_1459 : --> no uses.

pmap_1460 : -->3 uses.
pmap_1748 = PHI <pmap_1460(25), pmap_1458(22)>
if (pmap_1460 != 0B)
# DEBUG pmap => pmap_1460
D.47872_1461 = pmap_1460->allocated;
# DEBUG pmap => pmap_1460

D.47872_1461 : --> single use.
if (D.47872_1461 != 0)

pmap_1462 : -->3 uses.
pmap_1673 = PHI <pmap_1464(31), pmap_1462(28)>
# DEBUG pmap => pmap_1462
if (pmap_1462 != 0B)
D.47875_1671 = pmap_1462->allocated;
# DEBUG pmap => pmap_1462

pretmp.987_1463 : --> no uses.

pmap_1464 : -->3 uses.
pmap_1673 = PHI <pmap_1464(31), pmap_1462(28)>
if (pmap_1464 != 0B)
# DEBUG pmap => pmap_1464
D.47875_1465 = pmap_1464->allocated;
# DEBUG pmap => pmap_1464

D.47875_1465 : --> single use.
if (D.47875_1465 != 0)

D.47878_1466 : --> single use.
if (D.47878_1466 == 0)

pretmp.960_1467 : --> no uses.

dptime_1468 : --> single use.
dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>

dmaxptime_1469 : --> single use.
dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>

D.47888_1470 : --> single use.
if (D.47888_1470 == 0)

maxptime_1471 : -->8 uses.
maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>
maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>
maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>
maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>
maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>
maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>
maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>
maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>

D.47891_1472 : --> single use.
D.44799_515 = (short unsigned int) D.47891_1472;

ptime_1473 : --> single use.
ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>

maxptime_1474 : --> single use.
maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>

D.47901_1475 : --> single use.
if (D.47901_1475 == 0)

ptime_1476 : -->8 uses.
ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>
ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>
ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>
ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>
ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>
ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>
ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>
ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>

crypto_tag_1477 : --> single use.
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, prephitmp.1031_1893, crypto_tag_1477, sdp_type_546(D));

map_bit_rate_1480 : --> single use.
map_bit_rate_1481 = PHI <0(240), map_bit_rate_1480(241)>

map_bit_rate_1481 : -->2 uses.
map_bit_rate_132 = PHI <32001(249), map_bit_rate_1481(470), map_bit_rate_131(255), map_bit_rate_131(254), 13332(247), 32099(248)>
map_bit_rate_131 = PHI <map_bit_rate_1481(250), map_bit_rate_615(251)>

D.47916_1482 : --> single use.
if (D.47916_1482 == 0)

pretmp.954_1483 : --> no uses.

D.47920_1484 : --> single use.
if (D.47920_1484 == 0)

pretmp.955_1485 : --> no uses.

D.47923_1486 : --> single use.
D.47923_146 = PHI <D.47923_1486(322), 1(321)>

D.47927_1487 : --> single use.
if (D.47927_1487 == 0)

m_idx_1488 : -->10 uses.
m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>
m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>
m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>
m_idx_704 = m_idx_1488 + 1;
matches[m_idx_1488].map = map_1729;
matches[m_idx_1488].imp = imp_630;
matches[m_idx_1488].rate = codec_rate.94_703;
matches[m_idx_1488].codec_idx = i_1623;
m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>
m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>

D.47935_1489 : --> single use.
D.47934_1490 = D.47935_1489 & 256;

D.47934_1490 : --> single use.
if (D.47934_1490 != 0)

D.47933_1491 : --> single use.
if (D.47933_1491 != 0B)

D.47932_1492 : --> single use.
if (D.47932_1492 != 0B)

D.47931_1493 : --> single use.
if (D.47931_1493 != 0B)

remote_codec_rate_1494 : -->5 uses.
remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
remote_codec_rate_96 = PHI <remote_codec_rate_1494(262), remote_codec_rate_1494(267), fmtp_remote_codec_rate_99(268)>
if (remote_codec_rate_1494 == codec_rate_633)
remote_codec_rate_96 = PHI <remote_codec_rate_1494(262), remote_codec_rate_1494(267), fmtp_remote_codec_rate_99(268)>
remote_codec_rate.92_637 = (int) remote_codec_rate_1494;

D.47940_1496 : --> single use.
if (D.47940_1496 == 0)

D.44998_1497 : --> single use.
D.45000_1153 = D.44999_1610 & D.44998_1497;

D.47944_1498 : --> single use.
if (D.47944_1498 == 0)

D.44997_1499 : --> single use.
D.44998_1497 = D.44997_1499 > 0;

D.47947_1500 : --> single use.
D.45214_957 = (short unsigned int) D.47947_1500;

D.47951_1501 : --> single use.
if (D.47951_1501 == 0)

D.44471_1502 : --> single use.
D.44997_1499 = D.44471_1502->num_codecs;

crypto_tag_1503 : --> single use.
got_video_crypto_978 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, prephitmp.1031_1813, crypto_tag_1503, sdp_type_546(D));

D.47958_1504 : --> single use.
if (D.47958_1504 == 0)

pretmp.938_1505 : --> no uses.

D.47966_1506 : --> single use.
D.47965_1507 = D.47966_1506 & 256;

D.47965_1507 : --> single use.
if (D.47965_1507 != 0)

D.47964_1508 : --> single use.
if (D.47964_1508 != 0B)

D.47963_1509 : --> single use.
if (D.47963_1509 != 0B)

D.47962_1510 : --> single use.
if (D.47962_1510 != 0B)

pretmp.941_1511 : --> no uses.

pretmp.990_1513 : --> no uses.

pretmp.986_1514 : --> no uses.

.MEM_1515 : --> single use.
# .MEM_1349 = VDEF <.MEM_1515>
pmap_761->channels = D.47923_146;

.MEM_1516 : --> single use.
# .MEM_1517 = VDEF <.MEM_1516>
pmap_1748->current = 0;

.MEM_1517 : -->5 uses.
.MEM_1837 = PHI <.MEM_1517(24), .MEM_1517(23), .MEM_1185(20), .MEM_1185(21)>
.MEM_1837 = PHI <.MEM_1517(24), .MEM_1517(23), .MEM_1185(20), .MEM_1185(21)>
.MEM_1838 = PHI <.MEM_1517(25), .MEM_1185(22)>
# VUSE <.MEM_1517>
pmap_1460 = pmap_1748->next;
# VUSE <.MEM_1517>
D.47872_1461 = pmap_1460->allocated;

.MEM_1518 : --> single use.
# .MEM_1519 = VDEF <.MEM_1518>
pmap_1673->current = 0;

.MEM_1519 : -->5 uses.
.MEM_1879 = PHI <.MEM_1519(30), .MEM_1519(29), .MEM_1837(26), .MEM_1837(27)>
.MEM_1879 = PHI <.MEM_1519(30), .MEM_1519(29), .MEM_1837(26), .MEM_1837(27)>
.MEM_1664 = PHI <.MEM_1519(31), .MEM_1837(28)>
# VUSE <.MEM_1519>
pmap_1464 = pmap_1673->next;
# VUSE <.MEM_1519>
D.47875_1465 = pmap_1464->allocated;

.MEM_1521 : --> single use.
.MEM_1103 = PHI <.MEM_1839(66), .MEM_1202(67), .MEM_1203(69), .MEM_1210(73), .MEM_1839(75), .MEM_1521(77), .MEM_1839(78), .MEM_1523(79), .MEM_1208(72), .MEM_1839(65)>

.MEM_1523 : --> single use.
.MEM_1103 = PHI <.MEM_1839(66), .MEM_1202(67), .MEM_1203(69), .MEM_1210(73), .MEM_1839(75), .MEM_1521(77), .MEM_1839(78), .MEM_1523(79), .MEM_1208(72), .MEM_1839(65)>

.MEM_1526 : --> single use.
# .MEM_1294 = VDEF <.MEM_1526>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;

.MEM_1528 : --> single use.
.MEM_1125 = PHI <.MEM_1295(189), .MEM_1528(192), .MEM_1530(195), .MEM_1109(196), .MEM_1109(197), .MEM_1109(199), .MEM_1299(212), .MEM_1294(188), .MEM_1109(198)>

.MEM_1530 : --> single use.
.MEM_1125 = PHI <.MEM_1295(189), .MEM_1528(192), .MEM_1530(195), .MEM_1109(196), .MEM_1109(197), .MEM_1109(199), .MEM_1299(212), .MEM_1294(188), .MEM_1109(198)>

.MEM_1533 : --> single use.
# .MEM_1299 = VDEF <.MEM_1533>
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, prephitmp.1031_1893, crypto_tag_1477, sdp_type_546(D));

.MEM_1538 : --> single use.
.MEM_1515 = PHI <.MEM_1538(322), .MEM_1348(321)>

.MEM_1544 : --> single use.
# .MEM_1414 = VDEF <.MEM_1544>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45214_957;

.MEM_1547 : --> single use.
# .MEM_1419 = VDEF <.MEM_1547>
got_video_crypto_978 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, prephitmp.1031_1813, crypto_tag_1503, sdp_type_546(D));

D.49676_1551 : --> single use.
if (D.49676_1551 == 0)

D.49677_1552 : --> single use.
if (D.49677_1552 == 0)

D.49678_1553 : --> single use.
if (D.49678_1553 == 0)

D.49679_1554 : --> single use.
if (D.49679_1554 == 0)

D.49680_1555 : --> single use.
if (D.49680_1555 == 0)

D.49681_1556 : --> single use.
if (D.49681_1556 == 0)

D.49682_1557 : --> single use.
if (D.49682_1557 == 0)

D.49683_1558 : --> single use.
if (D.49683_1558 != 0)

D.49684_1559 : --> single use.
if (D.49684_1559 == 0)

attr_1560 : -->3 uses.
D.44590_501 = attr_1560->a_name;
attr_506 = attr_1560->a_next;
D.44619_503 = attr_1560->a_value;

D.49688_1561 : --> single use.
if (D.49688_1561 == 0)

D.49689_1562 : --> single use.
if (D.49689_1562 == 0)

D.49690_1563 : --> single use.
if (D.49690_1563 == 0)

D.49691_1564 : --> single use.
if (D.49691_1564 == 0)

D.49692_1565 : --> single use.
if (D.49692_1565 == 0)

D.49693_1566 : --> single use.
if (D.49693_1566 == 0)

D.49694_1567 : --> single use.
if (D.49694_1567 == 0)

D.49695_1568 : --> single use.
if (D.49695_1568 != 0)

D.49696_1569 : --> single use.
if (D.49696_1569 != 0)

pretmp.960_1570 : --> no uses.

D.49700_1571 : --> single use.
if (D.49700_1571 == 0)

D.49701_1572 : --> single use.
if (D.49701_1572 == 0)

D.49702_1573 : --> single use.
if (D.49702_1573 == 0)

D.49703_1574 : --> single use.
if (D.49703_1574 == 0)

D.49704_1575 : --> single use.
if (D.49704_1575 == 0)

D.49705_1576 : --> single use.
if (D.49705_1576 == 0)

D.49706_1577 : --> single use.
if (D.49706_1577 == 0)

D.49707_1578 : --> single use.
if (D.49707_1578 != 0)

D.49708_1579 : --> single use.
if (D.49708_1579 != 0)

.MEM_1580 : -->7 uses.
.MEM_1138 = PHI <.MEM_1322(287), .MEM_1136(295), .MEM_49(292), .MEM_1580(222)>
.MEM_1172 = PHI <.MEM_1136(294), .MEM_1580(223)>
# VUSE <.MEM_1580>
connection_555 = m_1765->m_connections;
# VUSE <.MEM_1580>
connection_554 = sdp_198->sdp_connection;
# VUSE <.MEM_1580>
map_559 = m_1765->m_rtpmaps;
# .MEM_1301 = VDEF <.MEM_1580>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
# .MEM_1300 = VDEF <.MEM_1580>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");

D.49712_1581 : --> single use.
if (D.49712_1581 == 0)

D.49713_1582 : --> single use.
if (D.49713_1582 == 0)

D.49714_1583 : --> single use.
if (D.49714_1583 == 0)

D.49715_1584 : --> single use.
if (D.49715_1584 == 0)

D.49716_1585 : --> single use.
if (D.49716_1585 == 0)

D.49717_1586 : --> single use.
if (D.49717_1586 == 0)

D.49718_1587 : --> single use.
if (D.49718_1587 == 0)

D.49719_1588 : --> single use.
if (D.49719_1588 != 0)

D.49720_1589 : --> single use.
if (D.49720_1589 != 0)

reneg_1590 : --> single use.
reneg_82 = PHI <0(101), reneg_353(102), reneg_1590(113)>

D.49724_1591 : --> single use.
if (D.49724_1591 == 0)

D.49725_1592 : --> single use.
if (D.49725_1592 == 0)

D.49726_1593 : --> single use.
if (D.49726_1593 == 0)

D.49727_1594 : --> single use.
if (D.49727_1594 == 0)

D.49728_1595 : --> single use.
if (D.49728_1595 == 0)

D.49729_1596 : --> single use.
if (D.49729_1596 == 0)

D.49730_1597 : --> single use.
if (D.49730_1597 == 0)

D.49731_1598 : --> single use.
if (D.49731_1598 != 0)

D.49732_1599 : --> single use.
if (D.49732_1599 != 0)

attr_1600 : -->9 uses.
pretmp.1034_1896 = attr_1600->a_value;
pretmp.1034_1640 = attr_1600->a_value;
D.44590_508 = attr_1600->a_name;
attr_548 = attr_1600->a_next;
D.44619_531 = attr_1600->a_value;
D.44619_526 = attr_1600->a_value;
D.44619_521 = attr_1600->a_value;
D.44619_513 = attr_1600->a_value;
D.44619_510 = attr_1600->a_value;

D.49736_1601 : --> single use.
if (D.49736_1601 == 0)

D.49737_1602 : --> single use.
if (D.49737_1602 == 0)

D.49738_1603 : --> single use.
if (D.49738_1603 == 0)

D.49739_1604 : --> single use.
if (D.49739_1604 == 0)

D.49740_1605 : --> single use.
if (D.49740_1605 == 0)

D.49741_1606 : --> single use.
if (D.49741_1606 == 0)

D.49742_1607 : --> single use.
if (D.49742_1607 == 0)

D.49743_1608 : --> single use.
if (D.49743_1608 != 0)

D.49744_1609 : --> single use.
if (D.49744_1609 == 0)

D.44999_1610 : --> single use.
D.45000_1153 = D.44999_1610 & D.44998_1497;

D.49748_1611 : --> single use.
if (D.49748_1611 == 0)

D.49749_1612 : --> single use.
if (D.49749_1612 == 0)

D.49750_1613 : --> single use.
if (D.49750_1613 == 0)

D.49751_1614 : --> single use.
if (D.49751_1614 == 0)

D.49752_1615 : --> single use.
if (D.49752_1615 == 0)

D.49753_1616 : --> single use.
if (D.49753_1616 == 0)

D.49754_1617 : --> single use.
if (D.49754_1617 == 0)

D.49755_1618 : --> single use.
if (D.49755_1618 != 0)

D.49756_1619 : --> single use.
if (D.49756_1619 != 0)

pretmp.937_1620 : --> no uses.

map_1621 : -->7 uses.
rm_encoding_980 = map_1621->rm_encoding;
map_1022 = map_1621->rm_next;
D.45256_997 = map_1621->rm_encoding;
D.45248_992 = map_1621->rm_pt;
D.45248_1004 = map_1621->rm_pt;
matches[m_idx_911].map = map_1621;
D.45263_1014 = map_1621->rm_rate;

.MEM_1622 : -->3 uses.
# .MEM_1183 = VDEF <.MEM_1622>
switch_channel_clear_flag (D.44482_206, 111);
# VUSE <.MEM_1622>
D.44482_206 = D.44481_205->channel;
# VUSE <.MEM_1622>
D.44481_205 = smh_186->session;

i_1623 : -->4 uses.
i.91_627 = (unsigned int) i_1623;
i_711 = i_1623 + 1;
matches[m_idx_1488].codec_idx = i_1623;
near_matches[nm_idx_1140].codec_idx = i_1623;

.MEM_1624 : -->2 uses.
# .MEM_1201 = VDEF <.MEM_1624>
switch_channel_set_flag_value (D.44530_247, 93, 1);
# VUSE <.MEM_1624>
D.44530_247 = session_161(D)->channel;

best_te_1625 : -->2 uses.
best_te_1861 = PHI <best_te_834(345), best_te_1625(342)>
if (best_te_1625 == 0)

.MEM_1626 : --> single use.
.MEM_670 = PHI <.MEM_1216(98), .MEM_1106(97), .MEM_1626(96), .MEM_1212(85)>

cng_pt_1627 : -->6 uses.
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>

.MEM_1628 : --> single use.
.MEM_1108 = PHI <.MEM_1107(101), .MEM_1221(102), .MEM_1628(113)>

pretmp.877_1629 : --> no uses.

.MEM_1630 : -->2 uses.
.MEM_1124 = PHI <.MEM_1109(465), .MEM_1630(210), .MEM_1885(467)>
# VUSE <.MEM_1630>
pretmp.1034_1640 = attr_1600->a_value;

pretmp.898_1631 : --> no uses.

.MEM_1632 : -->2 uses.
# .MEM_1400 = VDEF <.MEM_1632>
switch_channel_set_variable_var_check (D.44530_867, "dtmf_type", "none", 1);
# VUSE <.MEM_1632>
D.44530_867 = session_161(D)->channel;

pretmp.905_1633 : --> no uses.

.MEM_1634 : -->2 uses.
.MEM_1156 = PHI <.MEM_1720(477), .MEM_1634(407), .MEM_1865(479)>
# VUSE <.MEM_1634>
pretmp.1030_1890 = attr_620->a_value;

.MEM_1635 : -->2 uses.
.MEM_1118 = PHI <.MEM_1636(18), .MEM_1635(17)>
# .MEM_1636 = VDEF <.MEM_1635>
D.49684_1559 = strtol (tmp_203, 0B, 10);

.MEM_1636 : -->2 uses.
.MEM_1118 = PHI <.MEM_1636(18), .MEM_1635(17)>
.MEM_1622 = PHI <.MEM_1181(10), .MEM_1181(11), .MEM_1181(12), .MEM_1181(13), .MEM_1181(14), .MEM_1181(15), .MEM_1181(16), .MEM_1636(18)>

pretmp.999_1637 : --> no uses.

.MEM_1638 : -->2 uses.
.MEM_795 = PHI <.MEM_1639(55), .MEM_1638(54)>
# .MEM_1639 = VDEF <.MEM_1638>
D.49696_1569 = strtol (val_245, 0B, 10);

.MEM_1639 : -->2 uses.
.MEM_795 = PHI <.MEM_1639(55), .MEM_1638(54)>
.MEM_1624 = PHI <.MEM_1199(47), .MEM_1199(48), .MEM_1199(49), .MEM_1199(50), .MEM_1199(51), .MEM_1199(52), .MEM_1199(53), .MEM_1639(55)>

pretmp.1034_1640 : --> single use.
prephitmp.1031_1893 = PHI <D.44619_531(465), pretmp.1034_1640(210), pretmp.1034_1896(467)>

.MEM_1641 : -->2 uses.
.MEM_1755 = PHI <.MEM_1642(95), .MEM_1641(94)>
# .MEM_1642 = VDEF <.MEM_1641>
D.49708_1579 = strtol (val_341, 0B, 10);

.MEM_1642 : -->2 uses.
.MEM_1755 = PHI <.MEM_1642(95), .MEM_1641(94)>
.MEM_1626 = PHI <.MEM_1213(87), .MEM_1213(88), .MEM_1213(89), .MEM_1213(90), .MEM_1213(91), .MEM_1213(92), .MEM_1213(93), .MEM_1642(95)>

pretmp.968_1643 : --> no uses.

.MEM_1644 : -->2 uses.
.MEM_1628 = PHI <.MEM_1221(103), .MEM_1221(104), .MEM_1221(105), .MEM_1221(106), .MEM_1221(107), .MEM_1221(108), .MEM_1221(109), .MEM_1645(112), .MEM_1644(110), .MEM_1645(111)>
# .MEM_1645 = VDEF <.MEM_1644>
D.49720_1589 = strtol (val_355, 0B, 10);

.MEM_1645 : -->2 uses.
.MEM_1628 = PHI <.MEM_1221(103), .MEM_1221(104), .MEM_1221(105), .MEM_1221(106), .MEM_1221(107), .MEM_1221(108), .MEM_1221(109), .MEM_1645(112), .MEM_1644(110), .MEM_1645(111)>
.MEM_1628 = PHI <.MEM_1221(103), .MEM_1221(104), .MEM_1221(105), .MEM_1221(106), .MEM_1221(107), .MEM_1221(108), .MEM_1221(109), .MEM_1645(112), .MEM_1644(110), .MEM_1645(111)>

cng_pt_1646 : --> single use.
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>

.MEM_1647 : -->2 uses.
.MEM_1885 = PHI <.MEM_1648(209), .MEM_1296(200), .MEM_1647(208)>
# .MEM_1648 = VDEF <.MEM_1647>
D.49732_1599 = strtol (D.44825_537, 0B, 10);

.MEM_1648 : -->2 uses.
.MEM_1885 = PHI <.MEM_1648(209), .MEM_1296(200), .MEM_1647(208)>
.MEM_1630 = PHI <.MEM_1296(201), .MEM_1296(202), .MEM_1296(203), .MEM_1296(204), .MEM_1296(205), .MEM_1296(206), .MEM_1296(207), .MEM_1648(209)>

nm_idx_1649 : --> single use.
nm_idx_902 = PHI <nm_idx_1649(290), nm_idx_1756(256)>

.MEM_1650 : -->2 uses.
.MEM_1868 = PHI <.MEM_1651(360), .MEM_1393(351), .MEM_1650(359)>
# .MEM_1651 = VDEF <.MEM_1650>
D.49744_1609 = strtol (D.45125_859, 0B, 10);

.MEM_1651 : -->2 uses.
.MEM_1868 = PHI <.MEM_1651(360), .MEM_1393(351), .MEM_1650(359)>
.MEM_1632 = PHI <.MEM_1393(352), .MEM_1393(353), .MEM_1393(354), .MEM_1393(355), .MEM_1393(356), .MEM_1393(357), .MEM_1393(358), .MEM_1651(360)>

pretmp.1003_1652 : --> no uses.

.MEM_1653 : -->2 uses.
.MEM_1865 = PHI <.MEM_1654(406), .MEM_1416(397), .MEM_1653(405)>
# .MEM_1654 = VDEF <.MEM_1653>
D.49756_1619 = strtol (D.45228_969, 0B, 10);

.MEM_1654 : -->2 uses.
.MEM_1865 = PHI <.MEM_1654(406), .MEM_1416(397), .MEM_1653(405)>
.MEM_1634 = PHI <.MEM_1416(398), .MEM_1416(399), .MEM_1416(400), .MEM_1416(401), .MEM_1416(402), .MEM_1416(403), .MEM_1416(404), .MEM_1654(406)>

pretmp.1011_1656 : --> no uses.

pretmp.1009_1657 : --> no uses.

pretmp.1004_1658 : --> no uses.

pretmp.1005_1659 : --> no uses.

pretmp.1007_1660 : --> no uses.

pretmp.1006_1661 : --> no uses.

D.47872_1662 : --> single use.
if (D.47872_1662 != 0)

pretmp.992_1663 : --> no uses.

.MEM_1664 : --> single use.
# .MEM_1518 = VDEF <.MEM_1664>
pmap_1673->negotiated = 0;

pass_1665 : --> single use.
pass_1849 = PHI <0(151), pass_1665(154), pass_126(153)>

pretmp.980_1666 : --> no uses.

attr_1667 : -->4 uses.
D.44590_304 = attr_1667->a_name;
attr_334 = attr_1667->a_next;
D.44619_332 = attr_1667->a_value;
D.44619_328 = attr_1667->a_value;

cng_pt_1668 : -->7 uses.
cng_pt_24 = PHI <cng_pt_1668(229), cng_pt_573(234), cng_pt_1668(228), cng_pt_1668(235), cng_pt_1668(291), cng_pt_573(233)>
cng_pt_24 = PHI <cng_pt_1668(229), cng_pt_573(234), cng_pt_1668(228), cng_pt_1668(235), cng_pt_1668(291), cng_pt_573(233)>
cng_pt_24 = PHI <cng_pt_1668(229), cng_pt_573(234), cng_pt_1668(228), cng_pt_1668(235), cng_pt_1668(291), cng_pt_573(233)>
cng_pt_1732 = PHI <cng_pt_1668(291)>
cng_pt_1706 = PHI <cng_pt_1668(286)>
cng_pt_24 = PHI <cng_pt_1668(229), cng_pt_573(234), cng_pt_1668(228), cng_pt_1668(235), cng_pt_1668(291), cng_pt_573(233)>
if (cng_pt_1668 == 0)

pretmp.944_1669 : --> no uses.

.MEM_1670 : --> single use.
.MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>

D.47875_1671 : --> single use.
if (D.47875_1671 != 0)

dptime_1672 : -->9 uses.
dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>

pmap_1673 : -->3 uses.
pmap_1464 = pmap_1673->next;
pmap_1673->current = 0;
pmap_1673->negotiated = 0;

pretmp.1048_1674 : --> single use.
prephitmp.1049_1809 = PHI <D.44681_383(132), D.44681_387(135), pretmp.1048_1674(138), D.44681_387(136), D.44681_383(133)>

got_video_crypto_1675 : -->11 uses.
got_video_crypto_960 = PHI <got_video_crypto_1789(433), got_video_crypto_1675(367)>
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
got_video_crypto_556 = PHI <got_video_crypto_961(432), got_video_crypto_1675(368)>
# DEBUG got_video_crypto => got_video_crypto_1675
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>

cng_pt_1676 : --> single use.
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>

cng_pt_1677 : --> single use.
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>

prephitmp.1047_1678 : -->2 uses.
prephitmp.1055_1807 = PHI <pretmp.1054_1735(262), prephitmp.1047_1678(267), prephitmp.1047_1678(268)>
prephitmp.1055_1807 = PHI <pretmp.1054_1735(262), prephitmp.1047_1678(267), prephitmp.1047_1678(268)>

prephitmp.1045_1679 : -->2 uses.
match_1 = PHI <match_656(262), prephitmp.1045_1679(267), prephitmp.1045_1679(268)>
match_1 = PHI <match_656(262), prephitmp.1045_1679(267), prephitmp.1045_1679(268)>
# DEBUG match => prephitmp.1045_1679

prephitmp.1047_1680 : -->2 uses.
prephitmp.1055_1808 = PHI <pretmp.1054_1880(262), prephitmp.1047_1680(267), prephitmp.1047_1680(268)>
prephitmp.1055_1808 = PHI <pretmp.1054_1880(262), prephitmp.1047_1680(267), prephitmp.1047_1680(268)>

prephitmp.1043_1681 : --> single use.
D.44931_700 = prephitmp.1043_1681 / 1000;

cng_pt_1682 : --> single use.
cng_pt_1627 = PHI <cng_pt_1706(287), cng_pt_1682(295), cng_pt_1732(292), cng_pt_1718(222)>

prephitmp.1026_1683 : --> single use.
D.44626_337 = D.44624_335 & prephitmp.1026_1683;

pretmp.1025_1684 : --> single use.
prephitmp.1026_1683 = PHI <pretmp.1025_1684(82), 1(63)>

best_te_1685 : --> single use.
best_te_1625 = PHI <best_te_1730(287), best_te_1685(295), best_te_652(292), best_te_681(222)>

match_1686 : --> single use.
match_17 = PHI <1(143), 0(145), 0(162), 1(160), 0(211), 0(218), 0(221), 0(366), 0(408), match_1686(456), 1(159), 1(172), 1(464), 0(124)>

pretmp.1019_1687 : --> no uses.

pretmp.1018_1688 : --> no uses.

pretmp.988_1689 : --> no uses.

sendonly_1690 : -->8 uses.
sendonly_43 = PHI <sendonly_1690(66), 1(67), 1(69), sendonly_1690(73), 0(75), sendonly_1690(77), sendonly_1690(78), sendonly_1690(79), sendonly_1690(72), sendonly_1690(65)>
sendonly_43 = PHI <sendonly_1690(66), 1(67), 1(69), sendonly_1690(73), 0(75), sendonly_1690(77), sendonly_1690(78), sendonly_1690(79), sendonly_1690(72), sendonly_1690(65)>
sendonly_43 = PHI <sendonly_1690(66), 1(67), 1(69), sendonly_1690(73), 0(75), sendonly_1690(77), sendonly_1690(78), sendonly_1690(79), sendonly_1690(72), sendonly_1690(65)>
sendonly_43 = PHI <sendonly_1690(66), 1(67), 1(69), sendonly_1690(73), 0(75), sendonly_1690(77), sendonly_1690(78), sendonly_1690(79), sendonly_1690(72), sendonly_1690(65)>
sendonly_43 = PHI <sendonly_1690(66), 1(67), 1(69), sendonly_1690(73), 0(75), sendonly_1690(77), sendonly_1690(78), sendonly_1690(79), sendonly_1690(72), sendonly_1690(65)>
if (sendonly_1690 != 2)
sendonly_43 = PHI <sendonly_1690(66), 1(67), 1(69), sendonly_1690(73), 0(75), sendonly_1690(77), sendonly_1690(78), sendonly_1690(79), sendonly_1690(72), sendonly_1690(65)>
sendonly_43 = PHI <sendonly_1690(66), 1(67), 1(69), sendonly_1690(73), 0(75), sendonly_1690(77), sendonly_1690(78), sendonly_1690(79), sendonly_1690(72), sendonly_1690(65)>

pretmp.985_1691 : --> no uses.

pretmp.984_1692 : --> no uses.

pretmp.981_1693 : --> no uses.

got_audio_1694 : -->8 uses.
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
D.44778_496 = got_audio_1694 == 0;

pretmp.949_1695 : --> no uses.

pretmp.947_1696 : --> no uses.

.MEM_1697 : --> single use.
.MEM_1850 = PHI <.MEM_1149(334), .MEM_1697(474)>

pretmp.967_1698 : --> no uses.

pretmp.875_1699 : --> no uses.

pretmp.943_1700 : --> no uses.

j_1705 : --> single use.
j_1787 = PHI <j_1767(305), j_1705(307)>

cng_pt_1706 : --> single use.
cng_pt_1627 = PHI <cng_pt_1706(287), cng_pt_1682(295), cng_pt_1732(292), cng_pt_1718(222)>

near_map_1707 : --> single use.
near_map_1788 = PHI <near_map_1731(305), near_map_1707(307)>

nm_idx_1708 : --> single use.
nm_idx_119 = PHI <nm_idx_1708(287), nm_idx_683(295), nm_idx_1793(292), nm_idx_1750(222)>

cng_pt_1709 : --> single use.
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>

codec_ms_1710 : --> single use.
codec_ms_93 = PHI <codec_ms_1734(287), codec_ms_1803(295), codec_ms_1710(292), codec_ms_477(222)>

pretmp.1054_1711 : --> single use.
pretmp.1054_1735 = pretmp.1054_1711 & pretmp.1054_1880;

got_savp_1712 : -->2 uses.
got_savp_1740 = PHI <got_savp_74(140), got_savp_1712(141), got_savp_1712(142)>
got_savp_1740 = PHI <got_savp_74(140), got_savp_1712(141), got_savp_1712(142)>

match_1713 : --> single use.
match_13 = PHI <0(334), match_1713(341), 0(340)>

pretmp.893_1714 : --> no uses.

pretmp.961_1715 : --> no uses.

m_idx_1716 : -->4 uses.
if (j_808 < m_idx_1716)
if (m_idx_1716 > 0)
m_idx_1906 = PHI <m_idx_1905(334), m_idx_1716(474)>
greedy_sort (smh_186, &matches, m_idx_1716, codec_array_84, total_codecs_85);

.MEM_1717 : --> single use.
.MEM_1720 = PHI <.MEM_1717(484), .MEM_1157(411)>

cng_pt_1718 : -->15 uses.
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
cng_pt_1627 = PHI <cng_pt_1706(287), cng_pt_1682(295), cng_pt_1732(292), cng_pt_1718(222)>
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
cng_pt_1791 = PHI <cng_pt_1718(478)>
cng_pt_1677 = PHI <cng_pt_1718(365)>
cng_pt_1668 = PHI <cng_pt_24(294), cng_pt_1718(223)>
cng_pt_1676 = PHI <cng_pt_1718(220)>
cng_pt_1733 = PHI <cng_pt_1718(217)>
cng_pt_1709 = PHI <cng_pt_1718(466)>
cng_pt_1792 = PHI <cng_pt_1718(142)>
# DEBUG cng_pt => cng_pt_1718

pretmp.883_1719 : --> no uses.

.MEM_1720 : -->28 uses.
.MEM_1156 = PHI <.MEM_1720(477), .MEM_1634(407), .MEM_1865(479)>
.MEM_1157 = PHI <.MEM_1720(381), .MEM_1412(386), .MEM_1415(392), .MEM_1720(393), .MEM_1720(394), .MEM_1720(396), .MEM_1419(409), .MEM_1720(384), .MEM_1414(391), .MEM_1720(383), .MEM_1720(395)>
.MEM_1157 = PHI <.MEM_1720(381), .MEM_1412(386), .MEM_1415(392), .MEM_1720(393), .MEM_1720(394), .MEM_1720(396), .MEM_1419(409), .MEM_1720(384), .MEM_1414(391), .MEM_1720(383), .MEM_1720(395)>
.MEM_1157 = PHI <.MEM_1720(381), .MEM_1412(386), .MEM_1415(392), .MEM_1720(393), .MEM_1720(394), .MEM_1720(396), .MEM_1419(409), .MEM_1720(384), .MEM_1414(391), .MEM_1720(383), .MEM_1720(395)>
.MEM_1157 = PHI <.MEM_1720(381), .MEM_1412(386), .MEM_1415(392), .MEM_1720(393), .MEM_1720(394), .MEM_1720(396), .MEM_1419(409), .MEM_1720(384), .MEM_1414(391), .MEM_1720(383), .MEM_1720(395)>
.MEM_1157 = PHI <.MEM_1720(381), .MEM_1412(386), .MEM_1415(392), .MEM_1720(393), .MEM_1720(394), .MEM_1720(396), .MEM_1419(409), .MEM_1720(384), .MEM_1414(391), .MEM_1720(383), .MEM_1720(395)>
.MEM_1157 = PHI <.MEM_1720(381), .MEM_1412(386), .MEM_1415(392), .MEM_1720(393), .MEM_1720(394), .MEM_1720(396), .MEM_1419(409), .MEM_1720(384), .MEM_1414(391), .MEM_1720(383), .MEM_1720(395)>
.MEM_1157 = PHI <.MEM_1720(381), .MEM_1412(386), .MEM_1415(392), .MEM_1720(393), .MEM_1720(394), .MEM_1720(396), .MEM_1419(409), .MEM_1720(384), .MEM_1414(391), .MEM_1720(383), .MEM_1720(395)>
# VUSE <.MEM_1720>
D.45152_896 = strcasecmp (D.44590_895, "framerate");
# VUSE <.MEM_1720>
D.44590_895 = attr_620->a_name;
# VUSE <.MEM_1720>
D.45155_899 = strcasecmp (D.44590_895, "rtcp-fb");
# .MEM_1416 = VDEF <.MEM_1720>
D.45228_969 = switch_channel_get_variable_dup (D.44530_968, "rtp_allow_crypto_in_avp", 1, -1);
# VUSE <.MEM_1720>
D.44530_968 = session_161(D)->channel;
# VUSE <.MEM_1720>
D.44821_966 = D.44471_965->ndlb;
# VUSE <.MEM_1720>
D.44471_965 = smh_186->mparams;
# VUSE <.MEM_1720>
D.47951_1501 = *D.44619_963;
# VUSE <.MEM_1720>
D.44619_963 = attr_620->a_value;
# VUSE <.MEM_1720>
D.45220_962 = strcasecmp (D.44590_895, "crypto");
# .MEM_1413 = VDEF <.MEM_1720>
switch_channel_set_variable_var_check (D.44530_953, "rtp_remote_video_rtcp_port", D.44619_909, 1);
# VUSE <.MEM_1720>
D.44530_953 = session_161(D)->channel;
# VUSE <.MEM_1720>
D.45186_922 = MEM[(const unsigned char *)D.44619_909 + 1B];
# VUSE <.MEM_1720>
D.45175_912 = MEM[(const unsigned char *)D.44619_909];
# VUSE <.MEM_1720>
D.44619_909 = attr_620->a_value;
# VUSE <.MEM_1720>
D.45169_908 = strcasecmp (D.44590_895, "rtcp");
# .MEM_1410 = VDEF <.MEM_1720>
D.45161_903 = switch_stristr ("fir", D.44619_900);
# VUSE <.MEM_1720>
D.47944_1498 = *D.44619_900;
# VUSE <.MEM_1720>
D.44619_900 = attr_620->a_value;
# VUSE <.MEM_1720>
D.44619_897 = attr_620->a_value;

codec_ms_1721 : -->5 uses.
codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>
codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>
codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>
codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>
codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>

map_1729 : -->18 uses.
rm_encoding_561 = map_1729->rm_encoding;
map_712 = map_1729->rm_next;
D.44893_598 = map_1729->rm_fmtp;
remote_codec_rate_596 = map_1729->rm_rate;
D.44889_600 = map_1729->rm_encoding;
D.44856_650 = map_1729->rm_pt;
D.44856_590 = map_1729->rm_pt;
matches[m_idx_1488].map = map_1729;
near_matches[nm_idx_1140].map = map_1729;
D.44889_643 = map_1729->rm_encoding;
D.44856_635 = map_1729->rm_pt;
D.44854_611 = map_1729->rm_rate;
D.44889_609 = map_1729->rm_encoding;
D.44889_593 = map_1729->rm_encoding;
D.44856_586 = map_1729->rm_pt;
D.44856_572 = map_1729->rm_pt;
D.44856_567 = map_1729->rm_pt;
D.44854_564 = map_1729->rm_rate;

best_te_1730 : --> single use.
best_te_1625 = PHI <best_te_1730(287), best_te_1685(295), best_te_652(292), best_te_681(222)>

near_map_1731 : --> single use.
near_map_1788 = PHI <near_map_1731(305), near_map_1707(307)>

cng_pt_1732 : --> single use.
cng_pt_1627 = PHI <cng_pt_1706(287), cng_pt_1682(295), cng_pt_1732(292), cng_pt_1718(222)>

cng_pt_1733 : --> single use.
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>

codec_ms_1734 : --> single use.
codec_ms_93 = PHI <codec_ms_1734(287), codec_ms_1803(295), codec_ms_1710(292), codec_ms_477(222)>

pretmp.1054_1735 : --> single use.
prephitmp.1055_1807 = PHI <pretmp.1054_1735(262), prephitmp.1047_1678(267), prephitmp.1047_1678(268)>

pretmp.1046_1736 : -->2 uses.
pretmp.1046_790 = pretmp.1046_785 & pretmp.1046_1736;
prephitmp.1047_1680 = PHI <pretmp.1046_1736(266), 0(263), 1(265)>

pretmp.1042_1737 : --> single use.
prephitmp.1043_1681 = PHI <D.44930_694(282), pretmp.1042_1737(284)>

pretmp.992_1738 : --> no uses.

got_video_crypto_1739 : -->3 uses.
got_video_crypto_57 = PHI <got_video_crypto_1739(373), got_video_crypto_1739(376), 1(375), got_video_crypto_1739(374)>
got_video_crypto_57 = PHI <got_video_crypto_1739(373), got_video_crypto_1739(376), 1(375), got_video_crypto_1739(374)>
got_video_crypto_57 = PHI <got_video_crypto_1739(373), got_video_crypto_1739(376), 1(375), got_video_crypto_1739(374)>

got_savp_1740 : -->2 uses.
got_savp_512 = PHI <got_savp_1740(455), 0(125)>
D.44835_550 = got_savp_1740 != 0;
# DEBUG got_savp => got_savp_1740

got_avp_1741 : -->2 uses.
got_avp_1860 = PHI <got_avp_68(140), got_avp_1741(141), got_avp_1741(142)>
got_avp_1860 = PHI <got_avp_68(140), got_avp_1741(141), got_avp_1741(142)>

pretmp.962_1742 : --> no uses.

pretmp.960_1743 : --> no uses.

got_udptl_1744 : --> single use.
got_udptl_1869 = PHI <got_udptl_1744(455), 0(125)>
# DEBUG got_udptl => got_udptl_1744

nm_idx_1745 : -->2 uses.
nm_idx_844 = PHI <nm_idx_1745(334), nm_idx_842(341), nm_idx_842(340)>
nm_idx_842 = PHI <nm_idx_1745(334), nm_idx_119(474)>

m_idx_1746 : -->6 uses.
m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>

pretmp.886_1747 : --> no uses.

pmap_1748 : -->3 uses.
pmap_1460 = pmap_1748->next;
pmap_1748->current = 0;
pmap_1748->negotiated = 0;

pretmp.891_1749 : --> no uses.

nm_idx_1750 : -->5 uses.
nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
nm_idx_119 = PHI <nm_idx_1708(287), nm_idx_683(295), nm_idx_1793(292), nm_idx_1750(222)>
nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
nm_idx_1756 = PHI <nm_idx_117(294), nm_idx_1750(223)>
# DEBUG nm_idx => nm_idx_1750

.MEM_1751 : -->3 uses.
.MEM_1113 = PHI <.MEM_1751(126), .MEM_1234(127)>
# VUSE <.MEM_1751>
D.44666_373 = m_1765->m_proto;
# .MEM_1234 = VDEF <.MEM_1751>
switch_core_session_set_ice (session_161(D));

pretmp.883_1752 : --> no uses.

pretmp.880_1753 : --> no uses.

pretmp.946_1754 : --> no uses.

.MEM_1755 : --> single use.
.MEM_1106 = PHI <.MEM_1213(86), .MEM_1755(462)>

nm_idx_1756 : -->7 uses.
nm_idx_902 = PHI <nm_idx_1649(290), nm_idx_1756(256)>
nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
nm_idx_1140 = PHI <nm_idx_115(289), nm_idx_1756(257)>
# DEBUG nm_idx => nm_idx_1756
nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>

m_1765 : -->26 uses.
m_1790 = PHI <m_1765(142)>
pretmp.1056_346 = m_1765->m_type;
pretmp.1048_1674 = m_1765->m_type;
D.44666_373 = m_1765->m_proto;
D.44669_375 = m_1765->m_proto_name;
D.44675_379 = m_1765->m_proto;
m_1094 = m_1765->m_next;
attr_894 = m_1765->m_attributes;
D.44666_971 = m_1765->m_proto;
attr_507 = m_1765->m_attributes;
connection_555 = m_1765->m_connections;
D.44697_798 = m_1765->m_port;
D.44666_539 = m_1765->m_proto;
check_ice (smh_186, 1, sdp_198, m_1765);
D.44697_1062 = m_1765->m_port;
attr_887 = m_1765->m_attributes;
map_884 = m_1765->m_rtpmaps;
connection_881 = m_1765->m_connections;
D.44697_874 = m_1765->m_port;
check_ice (smh_186, 0, sdp_198, m_1765);
map_559 = m_1765->m_rtpmaps;
attr_500 = m_1765->m_attributes;
D.44697_494 = m_1765->m_port;
D.44697_393 = m_1765->m_port;
D.44681_387 = m_1765->m_type;
D.44681_383 = m_1765->m_type;

j_1767 : --> single use.
j_1787 = PHI <j_1767(305), j_1705(307)>

timp_1786 : -->3 uses.
D.45027_738 = timp_1786->iananame;
D.45028_741 = timp_1786->actual_samples_per_second;
matches[0].imp = timp_1786;

j_1787 : --> single use.
D.45029_743 = near_matches[j_1787].codec_idx;

near_map_1788 : --> single use.
matches[0].map = near_map_1788;

got_video_crypto_1789 : --> single use.
got_video_crypto_960 = PHI <got_video_crypto_1789(433), got_video_crypto_1675(367)>

m_1790 : --> single use.
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_1790);

cng_pt_1791 : --> single use.
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>

cng_pt_1792 : -->7 uses.
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>
cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>

nm_idx_1793 : --> single use.
nm_idx_119 = PHI <nm_idx_1708(287), nm_idx_683(295), nm_idx_1793(292), nm_idx_1750(222)>

D.45026_1795 : --> single use.
prephitmp.1039_858 = PHI <pretmp.1038_847(305), D.45026_1795(307)>

m_idx_1796 : --> single use.
m_idx_907 = PHI <m_idx_1796(433), 0(367)>

near_rate.96_1797 : --> single use.
near_rate.96_617 = PHI <near_rate.96_1798(305), near_rate.96_1797(307)>

near_rate.96_1798 : --> single use.
near_rate.96_617 = PHI <near_rate.96_1798(305), near_rate.96_1797(307)>

m_idx_1799 : --> single use.
m_idx_105 = PHI <m_idx_1799(287), m_idx_1802(295), m_idx_529(292), m_idx_1870(222)>

timp_1800 : --> single use.
timp_1786 = PHI <timp_330(305), timp_1800(307)>

match_1801 : -->9 uses.
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
match_9 = PHI <1(287), match_1892(295), 0(292), match_1801(222)>
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
match_14 = PHI <match_1801(445), 1(446)>
match_1902 = PHI <match_7(294), match_1801(223)>
# DEBUG match => match_1801
if (match_1801 == 0)
match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>

m_idx_1802 : --> single use.
m_idx_105 = PHI <m_idx_1799(287), m_idx_1802(295), m_idx_529(292), m_idx_1870(222)>

codec_ms_1803 : --> single use.
codec_ms_93 = PHI <codec_ms_1734(287), codec_ms_1803(295), codec_ms_1710(292), codec_ms_477(222)>

got_video_crypto_1804 : --> single use.
got_video_crypto_961 = PHI <got_video_crypto_1804(412), got_video_crypto_556(379), got_video_crypto_556(371)>

got_crypto_1805 : --> single use.
got_crypto_970 = PHI <got_crypto_1805(215), got_crypto_1867(185), got_crypto_1867(177)>

prephitmp.1057_1806 : -->3 uses.
prephitmp.1028_1815 = PHI <prephitmp.1049_1809(140), prephitmp.1057_1806(141), prephitmp.1057_1806(142)>
prephitmp.1028_1815 = PHI <prephitmp.1049_1809(140), prephitmp.1057_1806(141), prephitmp.1057_1806(142)>
if (prephitmp.1057_1806 == 8)

prephitmp.1055_1807 : --> single use.
if (prephitmp.1055_1807 != 0)

prephitmp.1055_1808 : --> single use.
prephitmp.1041_750 = PHI <prephitmp.1055_1808(269), 1(270), 1(271), 1(272)>

prephitmp.1049_1809 : -->2 uses.
prephitmp.1028_1815 = PHI <prephitmp.1049_1809(140), prephitmp.1057_1806(141), prephitmp.1057_1806(142)>
prephitmp.1057_1806 = PHI <prephitmp.1049_1809(140), pretmp.1056_346(139)>

pretmp.1050_1810 : --> single use.
pretmp.1052_323 = pretmp.1050_1810->auto_rtp_bugs;

pretmp.1046_1811 : --> single use.
pretmp.1046_1812 = pretmp.1046_1811 & 1;

pretmp.1046_1812 : --> single use.
prephitmp.1047_1678 = PHI <pretmp.1046_790(266), 0(263), pretmp.1046_1812(265)>

prephitmp.1031_1813 : -->2 uses.
# DEBUG crypto => prephitmp.1031_1813
# DEBUG __nptr => prephitmp.1031_1813
crypto_tag_1503 = strtol (prephitmp.1031_1813, 0B, 10);
got_video_crypto_978 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, prephitmp.1031_1813, crypto_tag_1503, sdp_type_546(D));

prephitmp.1028_1815 : -->2 uses.
if (prephitmp.1028_1815 == 3)
if (prephitmp.1028_1815 == 2)

pretmp.1024_1816 : --> no uses.

pretmp.1023_1817 : --> no uses.

pretmp.1021_1818 : --> no uses.

pretmp.1022_1819 : --> no uses.

pretmp.1017_1820 : --> no uses.

pretmp.998_1821 : --> no uses.

pretmp.993_1822 : --> no uses.

pretmp.996_1823 : --> no uses.

pretmp.1013_1824 : --> no uses.

pretmp.1012_1825 : --> no uses.

pretmp.1001_1826 : --> no uses.

pretmp.1002_1827 : --> no uses.

pretmp.994_1828 : --> no uses.

pretmp.992_1829 : --> no uses.

pretmp.999_1830 : --> no uses.

pretmp.999_1831 : --> no uses.

pretmp.1010_1832 : --> no uses.

pretmp.1008_1833 : --> no uses.

pretmp.1015_1834 : --> no uses.

pretmp.1016_1835 : --> no uses.

pretmp.1014_1836 : --> no uses.

.MEM_1837 : -->5 uses.
.MEM_1879 = PHI <.MEM_1519(30), .MEM_1519(29), .MEM_1837(26), .MEM_1837(27)>
.MEM_1879 = PHI <.MEM_1519(30), .MEM_1519(29), .MEM_1837(26), .MEM_1837(27)>
.MEM_1664 = PHI <.MEM_1519(31), .MEM_1837(28)>
# VUSE <.MEM_1837>
pmap_1462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
# VUSE <.MEM_1837>
D.47875_1671 = pmap_1462->allocated;

.MEM_1838 : --> single use.
# .MEM_1516 = VDEF <.MEM_1838>
pmap_1748->negotiated = 0;

.MEM_1839 : -->22 uses.
.MEM_1103 = PHI <.MEM_1839(66), .MEM_1202(67), .MEM_1203(69), .MEM_1210(73), .MEM_1839(75), .MEM_1521(77), .MEM_1839(78), .MEM_1523(79), .MEM_1208(72), .MEM_1839(65)>
.MEM_1103 = PHI <.MEM_1839(66), .MEM_1202(67), .MEM_1203(69), .MEM_1210(73), .MEM_1839(75), .MEM_1521(77), .MEM_1839(78), .MEM_1523(79), .MEM_1208(72), .MEM_1839(65)>
.MEM_1103 = PHI <.MEM_1839(66), .MEM_1202(67), .MEM_1203(69), .MEM_1210(73), .MEM_1839(75), .MEM_1521(77), .MEM_1839(78), .MEM_1523(79), .MEM_1208(72), .MEM_1839(65)>
.MEM_1103 = PHI <.MEM_1839(66), .MEM_1202(67), .MEM_1203(69), .MEM_1210(73), .MEM_1839(75), .MEM_1521(77), .MEM_1839(78), .MEM_1523(79), .MEM_1208(72), .MEM_1839(65)>
# VUSE <.MEM_1839>
D.44590_304 = attr_1667->a_name;
# VUSE <.MEM_1839>
D.44616_327 = strcasecmp (D.44590_304, "ptime");
# .MEM_1202 = VDEF <.MEM_1839>
switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
# VUSE <.MEM_1839>
D.44530_309 = session_161(D)->channel;
# .MEM_1523 = VDEF <.MEM_1839>
dmaxptime_1469 = strtol (D.44619_332, 0B, 10);
# VUSE <.MEM_1839>
D.44619_332 = attr_1667->a_value;
# VUSE <.MEM_1839>
D.44621_331 = strcasecmp (D.44590_304, "maxptime");
# .MEM_1521 = VDEF <.MEM_1839>
dptime_1468 = strtol (D.44619_328, 0B, 10);
# VUSE <.MEM_1839>
D.44619_328 = attr_1667->a_value;
# VUSE <.MEM_1839>
D.44614_324 = strcasecmp (D.44590_304, "sendrecv");
# .MEM_1204 = VDEF <.MEM_1839>
switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
# VUSE <.MEM_1839>
D.44530_316 = session_161(D)->channel;
# VUSE <.MEM_1839>
D.44602_315 = strcasecmp (D.44590_304, "recvonly");
# .MEM_1203 = VDEF <.MEM_1839>
switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
# VUSE <.MEM_1839>
D.44530_313 = session_161(D)->channel;
# VUSE <.MEM_1839>
D.44598_311 = strcasecmp (D.44590_304, "inactive");
# VUSE <.MEM_1839>
D.44594_307 = strcasecmp (D.44590_304, "sendonly");
# VUSE <.MEM_1839>
D.47878_1466 = *D.44590_304;

.MEM_1840 : -->3 uses.
.MEM_1105 = PHI <.MEM_1840(83), .MEM_1211(84)>
# .MEM_1211 = VDEF <.MEM_1840>
switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);
# VUSE <.MEM_1840>
D.44530_338 = session_161(D)->channel;

pretmp.989_1841 : --> no uses.

pretmp.982_1842 : --> no uses.

pretmp.983_1843 : --> no uses.

.MEM_1844 : -->8 uses.
# .MEM_1429 = VDEF <.MEM_1844>
pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);
# VUSE <.MEM_1844>
D.45282_1042 = D.45280_1039->microseconds_per_packet;
# VUSE <.MEM_1844>
D.45281_1040 = D.45280_1039->samples_per_second;
# VUSE <.MEM_1844>
D.45280_1039 = matches[j_1845].imp;
# VUSE <.MEM_1844>
D.45278_1037 = D.45275_1032->rm_pt;
# VUSE <.MEM_1844>
D.45277_1035 = D.45275_1032->rm_fmtp;
# VUSE <.MEM_1844>
D.45276_1033 = D.45275_1032->rm_encoding;
# VUSE <.MEM_1844>
D.45275_1032 = matches[j_1845].map;

j_1845 : -->6 uses.
D.45280_1039 = matches[j_1845].imp;
D.45275_1032 = matches[j_1845].map;
map_1051 = matches[j_1845].map;
mimp_1050 = matches[j_1845].imp;
j_1068 = j_1845 + 1;
if (j_1845 == 0)

j_1846 : -->6 uses.
j_1705 = PHI <j_1846(306)>
j_1767 = PHI <j_1846(304)>
near_map_728 = near_matches[j_1846].map;
near_match_727 = near_matches[j_1846].imp;
near_rate.96_725 = near_matches[j_1846].rate;
j_737 = j_1846 + 1;

.MEM_1847 : -->6 uses.
# VUSE <.MEM_1847>
D.45014_729 = near_match_727->iananame;
# VUSE <.MEM_1847>
near_map_728 = near_matches[j_1846].map;
# VUSE <.MEM_1847>
near_match_727 = near_matches[j_1846].imp;
# VUSE <.MEM_1847>
near_rate.96_725 = near_matches[j_1846].rate;
# .MEM_1324 = VDEF <.MEM_1847>
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45014_729, near_rate_145, codec_ms_93);
# VUSE <.MEM_1847>
near_rate_730 = near_match_727->samples_per_second;

pretmp.884_1848 : --> no uses.

pass_1849 : --> single use.
if (pass_1849 != 0)
# DEBUG pass => pass_1849

.MEM_1850 : -->3 uses.
# VUSE <.MEM_1850>
D.44762_810 = D.44750_809->remote_sdp_port;
# VUSE <.MEM_1850>
D.44750_809 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1366 = VDEF <.MEM_1850>
switch_snprintf (&tmp, 50, "%d", D.44767_811);

attr_1851 : -->3 uses.
D.44590_888 = attr_1851->a_name;
attr_893 = attr_1851->a_next;
D.44619_890 = attr_1851->a_value;

.MEM_1852 : --> single use.
# .MEM_1393 = VDEF <.MEM_1852>
D.45125_859 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);

.MEM_1853 : --> single use.
# .MEM_1377 = VDEF <.MEM_1853>
D.45115_835 = switch_channel_direction (channel_162);

pretmp.920_1854 : --> no uses.

.MEM_1855 : -->3 uses.
# .MEM_1246 = VDEF <.MEM_1855>
D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
# VUSE <.MEM_1855>
D.44482_413 = D.44481_412->channel;
# VUSE <.MEM_1855>
D.44481_412 = smh_186->session;

pretmp.919_1856 : --> no uses.

.MEM_1857 : -->2 uses.
.MEM_1142 = PHI <.MEM_1857(312), .MEM_1332(313)>
# .MEM_1332 = VDEF <.MEM_1857>
greedy_sort (smh_186, &matches, m_idx_1716, codec_array_84, total_codecs_85);

.MEM_1858 : --> single use.
# .MEM_1220 = VDEF <.MEM_1858>
reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);

.MEM_1859 : -->3 uses.
.MEM_1110 = PHI <.MEM_1859(118), .MEM_1859(117), .MEM_1225(119)>
.MEM_1110 = PHI <.MEM_1859(118), .MEM_1859(117), .MEM_1225(119)>
# VUSE <.MEM_1859>
total_codecs_359 = smh_186->num_negotiated_codecs;

got_avp_1860 : -->2 uses.
got_avp_672 = PHI <got_avp_1860(455), 0(125)>
# DEBUG got_avp => got_avp_1860
D.44839_552 = got_avp_1860 | got_webrtc_78;

best_te_1861 : -->12 uses.
best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
switch_rtp_set_telephony_recv_event (D.44605_856, best_te_1861);
switch_rtp_set_telephony_event (D.44605_852, best_te_1861);
D.45121_849 = (int) best_te_1861;
# DEBUG te => best_te_1861
D.44471_846->recv_te = best_te_1861;
D.44471_846->te = best_te_1861;
best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
switch_rtp_set_telephony_event (D.44605_841, best_te_1861);
D.44857_838 = (int) best_te_1861;
D.44471_836->te = best_te_1861;

pretmp.964_1862 : --> no uses.

pretmp.963_1863 : --> no uses.

pretmp.962_1864 : --> no uses.

.MEM_1865 : -->4 uses.
.MEM_1156 = PHI <.MEM_1720(477), .MEM_1634(407), .MEM_1865(479)>
# VUSE <.MEM_1865>
pretmp.1030_1891 = attr_620->a_value;
# VUSE <.MEM_1865>
D.44666_971 = m_1765->m_proto;
# .MEM_1418 = VDEF <.MEM_1865>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");

dmaxptime_1866 : -->9 uses.
dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>

got_crypto_1867 : -->11 uses.
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
got_crypto_970 = PHI <got_crypto_1805(215), got_crypto_1867(185), got_crypto_1867(177)>
got_crypto_141 = PHI <got_crypto_898(481), got_crypto_1867(185)>
got_crypto_970 = PHI <got_crypto_1805(215), got_crypto_1867(185), got_crypto_1867(177)>
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
got_crypto_361 = PHI <got_crypto_50(184), got_crypto_1867(178)>
# DEBUG got_crypto => got_crypto_1867
# DEBUG got_crypto => got_crypto_1867
# DEBUG got_crypto => got_crypto_1867
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>

.MEM_1868 : --> single use.
# .MEM_1395 = VDEF <.MEM_1868>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");

got_udptl_1869 : -->4 uses.
got_udptl_1744 = PHI <got_udptl_1869(140), got_udptl_775(141), got_udptl_775(142)>
got_udptl_775 = PHI <got_udptl_1869(140), got_udptl_391(139)>
if (got_udptl_1869 != 0)
# DEBUG got_udptl => got_udptl_1869
got_udptl_391 = got_udptl_1869 + 1;

m_idx_1870 : -->5 uses.
m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
m_idx_105 = PHI <m_idx_1799(287), m_idx_1802(295), m_idx_529(292), m_idx_1870(222)>
m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
m_idx_793 = PHI <m_idx_103(294), m_idx_1870(223)>
# DEBUG m_idx => m_idx_1870

pretmp.971_1871 : --> no uses.

pretmp.910_1872 : --> no uses.

.MEM_1873 : --> single use.
# .MEM_1408 = VDEF <.MEM_1873>
D.45138_885 = switch_rtp_has_dtls ();

.MEM_1874 : -->5 uses.
.MEM_1165 = PHI <.MEM_1874(437), .MEM_1427(438)>
.MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>
# VUSE <.MEM_1874>
D.45002_1023 = smh_186->crypto_mode;
# .MEM_1427 = VDEF <.MEM_1874>
greedy_sort (smh_186, &matches, m_idx_907, codec_array_84, total_codecs_85);
# .MEM_1426 = VDEF <.MEM_1874>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");

pretmp.970_1875 : --> no uses.

pretmp.945_1876 : --> no uses.

pretmp.924_1877 : --> no uses.

pretmp.923_1878 : --> no uses.

.MEM_1879 : -->2 uses.
.MEM_1098 = PHI <.MEM_1879(32), .MEM_1188(33)>
# .MEM_1188 = VDEF <.MEM_1879>
*proceed_209(D) = 1;

pretmp.1054_1880 : -->2 uses.
pretmp.1054_1735 = pretmp.1054_1711 & pretmp.1054_1880;
prephitmp.1055_1808 = PHI <pretmp.1054_1880(262), prephitmp.1047_1680(267), prephitmp.1047_1680(268)>

.MEM_1881 : -->8 uses.
# .MEM_1335 = VDEF <.MEM_1881>
pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);
# VUSE <.MEM_1881>
D.45042_758 = D.45040_755->microseconds_per_packet;
# VUSE <.MEM_1881>
D.45041_756 = D.45040_755->samples_per_second;
# VUSE <.MEM_1881>
D.45040_755 = matches[j_1882].imp;
# VUSE <.MEM_1881>
D.45038_753 = D.45035_748->rm_pt;
# VUSE <.MEM_1881>
D.45037_751 = D.45035_748->rm_fmtp;
# VUSE <.MEM_1881>
D.45036_749 = D.45035_748->rm_encoding;
# VUSE <.MEM_1881>
D.45035_748 = matches[j_1882].map;

j_1882 : -->6 uses.
mmap_763 = matches[j_1882].map;
mimp_762 = matches[j_1882].imp;
D.45040_755 = matches[j_1882].imp;
D.45035_748 = matches[j_1882].map;
j_808 = j_1882 + 1;
if (j_1882 == 0)

.MEM_1883 : -->3 uses.
.MEM_1091 = PHI <.MEM_1161(430), .MEM_1883(415)>
.MEM_871 = PHI <.MEM_1161(429), .MEM_1883(416)>
# VUSE <.MEM_1883>
rm_encoding_980 = map_1621->rm_encoding;

codec_ms_1884 : --> single use.
codec_ms_87 = PHI <codec_ms_1884(469), codec_ms_589(239), ptime_1034(238)>
# DEBUG codec_ms => codec_ms_1884

.MEM_1885 : -->4 uses.
.MEM_1124 = PHI <.MEM_1109(465), .MEM_1630(210), .MEM_1885(467)>
# VUSE <.MEM_1885>
pretmp.1034_1896 = attr_1600->a_value;
# VUSE <.MEM_1885>
D.44666_539 = m_1765->m_proto;
# .MEM_1298 = VDEF <.MEM_1885>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");

got_video_crypto_1886 : -->8 uses.
got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
if (got_video_crypto_1886 == 0)
got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>

pretmp.948_1887 : --> no uses.

pretmp.876_1889 : --> no uses.

pretmp.1030_1890 : --> single use.
prephitmp.1031_1813 = PHI <D.44619_963(477), pretmp.1030_1890(407), pretmp.1030_1891(479)>

pretmp.1030_1891 : --> single use.
prephitmp.1031_1813 = PHI <D.44619_963(477), pretmp.1030_1890(407), pretmp.1030_1891(479)>

match_1892 : --> single use.
match_9 = PHI <1(287), match_1892(295), 0(292), match_1801(222)>

prephitmp.1031_1893 : -->2 uses.
# DEBUG crypto => prephitmp.1031_1893
# DEBUG __nptr => prephitmp.1031_1893
crypto_tag_1477 = strtol (prephitmp.1031_1893, 0B, 10);
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, prephitmp.1031_1893, crypto_tag_1477, sdp_type_546(D));

pretmp.942_1894 : --> no uses.

recvonly_1895 : -->8 uses.
recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>
recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>
recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>
recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>
recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>
recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>
recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>
recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>

pretmp.1034_1896 : --> single use.
prephitmp.1031_1893 = PHI <D.44619_531(465), pretmp.1034_1640(210), pretmp.1034_1896(467)>

pretmp.1036_1897 : --> single use.
pretmp.1038_847 = pretmp.1036_1897 / 1000;

.MEM_1898 : --> single use.
.MEM_1697 = PHI <.MEM_1898(473), .MEM_1334(314)>

best_te_1899 : -->8 uses.
best_te_19 = PHI <best_te_568(229), best_te_1899(234), best_te_1899(228), best_te_1899(235), best_te_1899(291), best_te_1899(233)>
best_te_19 = PHI <best_te_568(229), best_te_1899(234), best_te_1899(228), best_te_1899(235), best_te_1899(291), best_te_1899(233)>
best_te_19 = PHI <best_te_568(229), best_te_1899(234), best_te_1899(228), best_te_1899(235), best_te_1899(291), best_te_1899(233)>
best_te_19 = PHI <best_te_568(229), best_te_1899(234), best_te_1899(228), best_te_1899(235), best_te_1899(291), best_te_1899(233)>
best_te_652 = PHI <best_te_1899(291)>
best_te_1730 = PHI <best_te_1899(286)>
best_te_19 = PHI <best_te_568(229), best_te_1899(234), best_te_1899(228), best_te_1899(235), best_te_1899(291), best_te_1899(233)>
if (best_te_1899 == 0)

pretmp.966_1900 : --> no uses.

pretmp.965_1901 : --> no uses.

match_1902 : -->6 uses.
match_7 = PHI <match_1902(229), match_1902(234), match_1902(228), match_1902(235), 0(291), match_1902(233)>
match_7 = PHI <match_1902(229), match_1902(234), match_1902(228), match_1902(235), 0(291), match_1902(233)>
match_7 = PHI <match_1902(229), match_1902(234), match_1902(228), match_1902(235), 0(291), match_1902(233)>
if (match_1902 != 0)
match_7 = PHI <match_1902(229), match_1902(234), match_1902(228), match_1902(235), 0(291), match_1902(233)>
match_7 = PHI <match_1902(229), match_1902(234), match_1902(228), match_1902(235), 0(291), match_1902(233)>

m_idx_1905 : -->2 uses.
m_idx_1746 = PHI <m_idx_1905(334), m_idx_1906(341), m_idx_1906(340)>
m_idx_1906 = PHI <m_idx_1905(334), m_idx_1716(474)>

m_idx_1906 : -->2 uses.
m_idx_1746 = PHI <m_idx_1905(334), m_idx_1906(341), m_idx_1906(340)>
m_idx_1746 = PHI <m_idx_1905(334), m_idx_1906(341), m_idx_1906(340)>

Adding Destination of edge (0 -> 2) to worklist


Simulating block 2

Visiting statement:
if (session_161(D) == 0B)

No interesting values produced.
Adding Destination of edge (2 -> 3) to worklist

Adding Destination of edge (2 -> 4) to worklist


Simulating block 3

Visiting statement:
__assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

No interesting values produced.

Simulating block 4

Visiting statement:
if (smh_186 == 0B)

No interesting values produced.
Adding Destination of edge (4 -> 458) to worklist

Adding Destination of edge (4 -> 5) to worklist


Simulating block 5

Visiting statement:
if (parser_196 == 0B)

No interesting values produced.
Adding Destination of edge (5 -> 6) to worklist


Simulating block 6

Visiting statement:
if (sdp_198 == 0B)

No interesting values produced.
Adding Destination of edge (6 -> 7) to worklist

Adding Destination of edge (6 -> 8) to worklist


Simulating block 7

Simulating block 458

Visiting PHI node: match_142 = PHI <0(4), 0(5), 0(7), match_17(457)>
PHI node match_142 copy-of chain: match_142 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
return match_142;

No interesting values produced.

Simulating block 8

Visiting statement:
if (D.44478_200 != 0)

No interesting values produced.
Adding Destination of edge (8 -> 9) to worklist

Adding Destination of edge (8 -> 20) to worklist


Simulating block 9

Visiting statement:
if (tmp_203 != 0B)

No interesting values produced.
Adding Destination of edge (9 -> 10) to worklist


Simulating block 10

Visiting statement:
if (D.49676_1551 == 0)

No interesting values produced.
Adding Destination of edge (10 -> 19) to worklist

Adding Destination of edge (10 -> 11) to worklist


Simulating block 11

Visiting statement:
if (D.49677_1552 == 0)

No interesting values produced.
Adding Destination of edge (11 -> 12) to worklist


Simulating block 12

Visiting statement:
if (D.49678_1553 == 0)

No interesting values produced.
Adding Destination of edge (12 -> 13) to worklist


Simulating block 13

Visiting statement:
if (D.49679_1554 == 0)

No interesting values produced.
Adding Destination of edge (13 -> 14) to worklist


Simulating block 14

Visiting statement:
if (D.49680_1555 == 0)

No interesting values produced.
Adding Destination of edge (14 -> 15) to worklist


Simulating block 15

Visiting statement:
if (D.49681_1556 == 0)

No interesting values produced.
Adding Destination of edge (15 -> 16) to worklist


Simulating block 16

Visiting statement:
if (D.49682_1557 == 0)

No interesting values produced.
Adding Destination of edge (16 -> 17) to worklist


Simulating block 17

Visiting statement:
if (D.49683_1558 != 0)

No interesting values produced.
Adding Destination of edge (17 -> 18) to worklist

Adding Destination of edge (17 -> 459) to worklist


Simulating block 18

Visiting statement:
if (D.49684_1559 == 0)

No interesting values produced.

Simulating block 20

Visiting statement:
if (pmap_1458 != 0B)

No interesting values produced.
Adding Destination of edge (20 -> 21) to worklist

Adding Destination of edge (20 -> 26) to worklist


Simulating block 21

Visiting statement:
if (D.47872_1662 != 0)

No interesting values produced.
Adding Destination of edge (21 -> 22) to worklist


Simulating block 22
Adding Destination of edge (22 -> 23) to worklist


Simulating block 23

Visiting PHI node: pmap_1748 = PHI <pmap_1460(25), pmap_1458(22)>
	Argument #1: pmap_1458 copy-of chain: pmap_1458 [NOT A COPY]
PHI node pmap_1748 copy-of chain: pmap_1748 -> pmap_1458 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (pmap_1460 != 0B)

No interesting values produced.
Adding Destination of edge (23 -> 24) to worklist


Simulating block 24

Visiting statement:
if (D.47872_1461 != 0)

No interesting values produced.
Adding Destination of edge (24 -> 25) to worklist


Simulating block 25
Adding Destination of edge (25 -> 23) to worklist


Simulating block 23

Visiting PHI node: pmap_1748 = PHI <pmap_1460(25), pmap_1458(22)>
	Argument #0: pmap_1460 copy-of chain: pmap_1460 [NOT A COPY]
	Argument #1: pmap_1458 copy-of chain: pmap_1458 [NOT A COPY]
PHI node pmap_1748 copy-of chain: pmap_1748 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 19
Adding Destination of edge (19 -> 20) to worklist


Simulating block 459

Simulating block 26

Visiting statement:
if (pmap_1462 != 0B)

No interesting values produced.
Adding Destination of edge (26 -> 27) to worklist

Adding Destination of edge (26 -> 32) to worklist


Simulating block 27

Visiting statement:
if (D.47875_1671 != 0)

No interesting values produced.
Adding Destination of edge (27 -> 28) to worklist


Simulating block 28
Adding Destination of edge (28 -> 29) to worklist


Simulating block 29

Visiting PHI node: pmap_1673 = PHI <pmap_1464(31), pmap_1462(28)>
	Argument #1: pmap_1462 copy-of chain: pmap_1462 [NOT A COPY]
PHI node pmap_1673 copy-of chain: pmap_1673 -> pmap_1462 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (pmap_1464 != 0B)

No interesting values produced.
Adding Destination of edge (29 -> 30) to worklist


Simulating block 30

Visiting statement:
if (D.47875_1465 != 0)

No interesting values produced.
Adding Destination of edge (30 -> 31) to worklist


Simulating block 31
Adding Destination of edge (31 -> 29) to worklist


Simulating block 29

Visiting PHI node: pmap_1673 = PHI <pmap_1464(31), pmap_1462(28)>
	Argument #0: pmap_1464 copy-of chain: pmap_1464 [NOT A COPY]
	Argument #1: pmap_1462 copy-of chain: pmap_1462 [NOT A COPY]
PHI node pmap_1673 copy-of chain: pmap_1673 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 20

Simulating block 32

Visiting statement:
if (proceed_209(D) != 0B)

No interesting values produced.
Adding Destination of edge (32 -> 33) to worklist

Adding Destination of edge (32 -> 34) to worklist


Simulating block 33

Simulating block 34

Visiting statement:
if (val_214 != 0B)

No interesting values produced.
Adding Destination of edge (34 -> 35) to worklist

Adding Destination of edge (34 -> 39) to worklist


Simulating block 35

Visiting statement:
if (D.44494_215 == 0)

No interesting values produced.
Adding Destination of edge (35 -> 36) to worklist


Simulating block 36

Visiting statement:
if (D.44498_218 == 0)

No interesting values produced.
Adding Destination of edge (36 -> 37) to worklist


Simulating block 37

Visiting statement:
if (D.44502_221 == 0)

No interesting values produced.
Adding Destination of edge (37 -> 38) to worklist


Simulating block 38

Simulating block 39

Visiting PHI node: greedy_47 = PHI <greedy_211(34), 0(35), 1(36), 1(37), greedy_211(38)>
	Argument #0: greedy_211 copy-of chain: greedy_211 [NOT A COPY]
PHI node greedy_47 copy-of chain: greedy_47 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: scrooge_80 = PHI <scrooge_213(34), 0(35), 0(36), 1(37), scrooge_213(38)>
	Argument #0: scrooge_213 copy-of chain: scrooge_213 [NOT A COPY]
PHI node scrooge_80 copy-of chain: scrooge_80 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44508_226 != 0B)

No interesting values produced.
Adding Destination of edge (39 -> 40) to worklist

Adding Destination of edge (39 -> 46) to worklist


Simulating statement (from ssa_edges): if (scrooge_80 != 0)

Simulating statement (from ssa_edges): if (greedy_47 != 0)

Simulating statement (from ssa_edges): if (greedy_47 != 0)

Simulating block 40

Visiting statement:
if (D.44514_231 != 0)

No interesting values produced.
Adding Destination of edge (40 -> 41) to worklist

Adding Destination of edge (40 -> 43) to worklist


Simulating block 41

Visiting statement:
if (D.44518_234 != 0B)

No interesting values produced.
Adding Destination of edge (41 -> 42) to worklist


Simulating block 42

Simulating block 46

Visiting statement:
if (val_245 != 0B)

No interesting values produced.
Adding Destination of edge (46 -> 47) to worklist

Adding Destination of edge (46 -> 57) to worklist


Simulating block 47

Visiting statement:
if (D.49688_1561 == 0)

No interesting values produced.
Adding Destination of edge (47 -> 56) to worklist

Adding Destination of edge (47 -> 48) to worklist


Simulating block 48

Visiting statement:
if (D.49689_1562 == 0)

No interesting values produced.
Adding Destination of edge (48 -> 49) to worklist


Simulating block 49

Visiting statement:
if (D.49690_1563 == 0)

No interesting values produced.
Adding Destination of edge (49 -> 50) to worklist


Simulating block 50

Visiting statement:
if (D.49691_1564 == 0)

No interesting values produced.
Adding Destination of edge (50 -> 51) to worklist


Simulating block 51

Visiting statement:
if (D.49692_1565 == 0)

No interesting values produced.
Adding Destination of edge (51 -> 52) to worklist


Simulating block 52

Visiting statement:
if (D.49693_1566 == 0)

No interesting values produced.
Adding Destination of edge (52 -> 53) to worklist


Simulating block 53

Visiting statement:
if (D.49694_1567 == 0)

No interesting values produced.
Adding Destination of edge (53 -> 54) to worklist


Simulating block 54

Visiting statement:
if (D.49695_1568 != 0)

No interesting values produced.
Adding Destination of edge (54 -> 55) to worklist

Adding Destination of edge (54 -> 460) to worklist


Simulating block 55

Visiting statement:
if (D.49696_1569 != 0)

No interesting values produced.

Simulating block 43

Visiting PHI node: prephitmp.1053_326 = PHI <D.44512_229(40), D.44512_229(41), pretmp.1052_323(42)>
	Argument #0: D.44512_229 copy-of chain: D.44512_229 [NOT A COPY]
	Argument #1: D.44512_229 copy-of chain: D.44512_229 [NOT A COPY]
	Argument #2: pretmp.1052_323 copy-of chain: pretmp.1052_323 [NOT A COPY]
PHI node prephitmp.1053_326 copy-of chain: prephitmp.1053_326 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44523_239 != 0)

No interesting values produced.
Adding Destination of edge (43 -> 44) to worklist

Adding Destination of edge (43 -> 46) to worklist


Simulating block 44

Visiting statement:
if (D.44526_241 != 0B)

No interesting values produced.
Adding Destination of edge (44 -> 45) to worklist


Simulating block 45

Simulating block 57

Visiting statement:
if (m_248 != 0B)

No interesting values produced.
Adding Destination of edge (57 -> 58) to worklist

Adding Destination of edge (57 -> 63) to worklist


Simulating block 58

Visiting statement:
if (D.44544_253 != 0)

No interesting values produced.
Adding Destination of edge (58 -> 59) to worklist


Simulating block 59

Visiting statement:
if (D.44546_254 != 0B)

No interesting values produced.
Adding Destination of edge (59 -> 60) to worklist


Simulating block 60

Visiting statement:
if (D.44548_256 != 0B)

No interesting values produced.
Adding Destination of edge (60 -> 61) to worklist


Simulating block 61

Visiting statement:
if (__result_300 == 0)

No interesting values produced.
Adding Destination of edge (61 -> 62) to worklist


Simulating block 62

Simulating block 56
Adding Destination of edge (56 -> 57) to worklist


Simulating block 460

Simulating block 46

Simulating block 63

Visiting PHI node: sendonly_42 = PHI <0(57), 0(59), 0(60), 0(62), 2(61), 2(58)>
PHI node sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (attr_303 != 0B)

No interesting values produced.
Adding Destination of edge (63 -> 64) to worklist

Adding Destination of edge (63 -> 83) to worklist


Simulating statement (from ssa_edges): sendonly_1690 = PHI <sendonly_43(81), sendonly_42(64)>

Visiting PHI node: sendonly_1690 = PHI <sendonly_43(81), sendonly_42(64)>
PHI node sendonly_1690 copy-of chain: sendonly_1690 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): sendonly_1007 = PHI <sendonly_864(82), sendonly_42(63)>

Visiting PHI node: sendonly_1007 = PHI <sendonly_864(82), sendonly_42(63)>
	Argument #1: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_1007 copy-of chain: sendonly_1007 -> sendonly_42 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating block 64
Adding Destination of edge (64 -> 65) to worklist


Simulating block 65

Visiting PHI node: attr_1667 = PHI <attr_334(81), attr_303(64)>
	Argument #1: attr_303 copy-of chain: attr_303 [NOT A COPY]
PHI node attr_1667 copy-of chain: attr_1667 -> attr_303 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: dptime_1672 = PHI <dptime_36(81), 0(64)>
PHI node dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: dmaxptime_1866 = PHI <dmaxptime_40(81), 0(64)>
PHI node dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: sendonly_1690 = PHI <sendonly_43(81), sendonly_42(64)>
	Argument #1: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_1690 copy-of chain: sendonly_1690 -> sendonly_42 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: recvonly_1895 = PHI <recvonly_45(81), 0(64)>
PHI node recvonly_1895 copy-of chain: recvonly_1895 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44590_304 == 0B)

No interesting values produced.
Adding Destination of edge (65 -> 80) to worklist

Adding Destination of edge (65 -> 66) to worklist


Simulating statement (from ssa_edges): recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>

Visiting PHI node: recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>
	Argument #9: recvonly_1895 copy-of chain: recvonly_1895 [NOT A COPY]
PHI node recvonly_45 copy-of chain: recvonly_45 -> recvonly_1895 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>

Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
	Argument #9: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 -> dmaxptime_1866 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>

Visiting PHI node: dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
	Argument #9: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
PHI node dptime_36 copy-of chain: dptime_36 -> dptime_1672 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (sendonly_1690 != 2)

Simulating statement (from ssa_edges): sendonly_43 = PHI <sendonly_1690(66), 1(67), 1(69), sendonly_1690(73), 0(75), sendonly_1690(77), sendonly_1690(78), sendonly_1690(79), sendonly_1690(72), sendonly_1690(65)>

Visiting PHI node: sendonly_43 = PHI <sendonly_1690(66), 1(67), 1(69), sendonly_1690(73), 0(75), sendonly_1690(77), sendonly_1690(78), sendonly_1690(79), sendonly_1690(72), sendonly_1690(65)>
	Argument #9: sendonly_1690 copy-of chain: sendonly_1690 -> sendonly_42 [COPY]
PHI node sendonly_43 copy-of chain: sendonly_43 -> sendonly_42 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): sendonly_1690 = PHI <sendonly_43(81), sendonly_42(64)>

Visiting PHI node: sendonly_1690 = PHI <sendonly_43(81), sendonly_42(64)>
	Argument #1: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_1690 copy-of chain: sendonly_1690 -> sendonly_42 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 66

Visiting statement:
if (D.47878_1466 == 0)

No interesting values produced.
Adding Destination of edge (66 -> 461) to worklist


Simulating block 461

Visiting statement:
if (D.44594_307 == 0)

No interesting values produced.
Adding Destination of edge (461 -> 67) to worklist

Adding Destination of edge (461 -> 68) to worklist


Simulating block 67

Simulating block 57

Simulating block 83

Visiting PHI node: dptime_1036 = PHI <dptime_255(82), 0(63)>
PHI node dptime_1036 copy-of chain: dptime_1036 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: dmaxptime_1006 = PHI <dmaxptime_913(82), 0(63)>
PHI node dmaxptime_1006 copy-of chain: dmaxptime_1006 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: sendonly_1007 = PHI <sendonly_864(82), sendonly_42(63)>
	Argument #1: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_1007 copy-of chain: sendonly_1007 -> sendonly_42 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: prephitmp.1026_1683 = PHI <pretmp.1025_1684(82), 1(63)>
PHI node prephitmp.1026_1683 copy-of chain: prephitmp.1026_1683 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44626_337 != 0)

No interesting values produced.
Adding Destination of edge (83 -> 84) to worklist

Adding Destination of edge (83 -> 85) to worklist


Simulating statement (from ssa_edges): maxptime_1471 = PHI <dmaxptime_1006(482), maxptime_38(214)>

Visiting PHI node: maxptime_1471 = PHI <dmaxptime_1006(482), maxptime_38(214)>
PHI node maxptime_1471 copy-of chain: maxptime_1471 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): maxptime_1041 = PHI <maxptime_917(215), dmaxptime_1006(185), dmaxptime_1006(177)>

Visiting PHI node: maxptime_1041 = PHI <maxptime_917(215), dmaxptime_1006(185), dmaxptime_1006(177)>
PHI node maxptime_1041 copy-of chain: maxptime_1041 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): ptime_1476 = PHI <dptime_1036(482), ptime_34(214)>

Visiting PHI node: ptime_1476 = PHI <dptime_1036(482), ptime_34(214)>
PHI node ptime_1476 copy-of chain: ptime_1476 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): ptime_1034 = PHI <ptime_376(215), dptime_1036(185), dptime_1036(177)>

Visiting PHI node: ptime_1034 = PHI <ptime_376(215), dptime_1036(185), dptime_1036(177)>
PHI node ptime_1034 copy-of chain: ptime_1034 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 84

Simulating block 80

Visiting PHI node: dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
	Argument #0: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
	Argument #1: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
	Argument #9: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
PHI node dptime_36 copy-of chain: dptime_36 -> dptime_1672 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
	Argument #0: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #1: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #9: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 -> dmaxptime_1866 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: sendonly_43 = PHI <sendonly_1690(66), 1(67), 1(69), sendonly_1690(73), 0(75), sendonly_1690(77), sendonly_1690(78), sendonly_1690(79), sendonly_1690(72), sendonly_1690(65)>
	Argument #0: sendonly_1690 copy-of chain: sendonly_1690 -> sendonly_42 [COPY]
PHI node sendonly_43 copy-of chain: sendonly_43 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>
	Argument #0: recvonly_1895 copy-of chain: recvonly_1895 [NOT A COPY]
	Argument #1: recvonly_1895 copy-of chain: recvonly_1895 [NOT A COPY]
	Argument #9: recvonly_1895 copy-of chain: recvonly_1895 [NOT A COPY]
PHI node recvonly_45 copy-of chain: recvonly_45 -> recvonly_1895 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (attr_334 != 0B)

No interesting values produced.
Adding Destination of edge (80 -> 81) to worklist

Adding Destination of edge (80 -> 82) to worklist


Simulating statement (from ssa_edges): sendonly_1690 = PHI <sendonly_43(81), sendonly_42(64)>

Visiting PHI node: sendonly_1690 = PHI <sendonly_43(81), sendonly_42(64)>
	Argument #1: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_1690 copy-of chain: sendonly_1690 -> sendonly_42 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 68

Visiting statement:
if (D.44598_311 == 0)

No interesting values produced.
Adding Destination of edge (68 -> 69) to worklist

Adding Destination of edge (68 -> 70) to worklist


Simulating block 69
Adding Destination of edge (69 -> 80) to worklist


Simulating block 85

Visiting statement:
if (D.44631_339 == 0)

No interesting values produced.
Adding Destination of edge (85 -> 86) to worklist

Adding Destination of edge (85 -> 463) to worklist


Simulating block 81
Adding Destination of edge (81 -> 65) to worklist


Simulating block 82
Adding Destination of edge (82 -> 83) to worklist


Simulating block 70

Visiting statement:
if (D.44602_315 == 0)

No interesting values produced.
Adding Destination of edge (70 -> 71) to worklist

Adding Destination of edge (70 -> 74) to worklist


Simulating block 71

Visiting statement:
if (D.44606_319 != 0)

No interesting values produced.
Adding Destination of edge (71 -> 72) to worklist

Adding Destination of edge (71 -> 73) to worklist


Simulating block 72

Simulating block 80

Visiting PHI node: dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
	Argument #0: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
	Argument #1: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
	Argument #2: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
	Argument #8: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
	Argument #9: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
PHI node dptime_36 copy-of chain: dptime_36 -> dptime_1672 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
	Argument #0: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #1: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #2: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #8: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #9: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 -> dmaxptime_1866 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>
	Argument #0: recvonly_1895 copy-of chain: recvonly_1895 [NOT A COPY]
	Argument #1: recvonly_1895 copy-of chain: recvonly_1895 [NOT A COPY]
	Argument #2: recvonly_1895 copy-of chain: recvonly_1895 [NOT A COPY]
PHI node recvonly_45 copy-of chain: recvonly_45 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 86

Visiting statement:
if (val_341 == 0B)

No interesting values produced.
Adding Destination of edge (86 -> 97) to worklist

Adding Destination of edge (86 -> 87) to worklist


Simulating block 87

Visiting statement:
if (D.49700_1571 == 0)

No interesting values produced.
Adding Destination of edge (87 -> 96) to worklist

Adding Destination of edge (87 -> 88) to worklist


Simulating block 88

Visiting statement:
if (D.49701_1572 == 0)

No interesting values produced.
Adding Destination of edge (88 -> 89) to worklist


Simulating block 89

Visiting statement:
if (D.49702_1573 == 0)

No interesting values produced.
Adding Destination of edge (89 -> 90) to worklist


Simulating block 90

Visiting statement:
if (D.49703_1574 == 0)

No interesting values produced.
Adding Destination of edge (90 -> 91) to worklist


Simulating block 91

Visiting statement:
if (D.49704_1575 == 0)

No interesting values produced.
Adding Destination of edge (91 -> 92) to worklist


Simulating block 92

Visiting statement:
if (D.49705_1576 == 0)

No interesting values produced.
Adding Destination of edge (92 -> 93) to worklist


Simulating block 93

Visiting statement:
if (D.49706_1577 == 0)

No interesting values produced.
Adding Destination of edge (93 -> 94) to worklist


Simulating block 94

Visiting statement:
if (D.49707_1578 != 0)

No interesting values produced.
Adding Destination of edge (94 -> 95) to worklist

Adding Destination of edge (94 -> 462) to worklist


Simulating block 95

Visiting statement:
if (D.49708_1579 != 0)

No interesting values produced.

Simulating block 97

Visiting statement:
if (D.44636_344 == 0)

No interesting values produced.
Adding Destination of edge (97 -> 98) to worklist


Simulating block 98

Visiting statement:
if (D.44640_348 != 0)

No interesting values produced.
Adding Destination of edge (98 -> 99) to worklist


Simulating block 99

Visiting statement:
if (val_351 != 0B)

No interesting values produced.
Adding Destination of edge (99 -> 100) to worklist

Adding Destination of edge (99 -> 101) to worklist


Simulating block 100

Simulating block 463
Adding Destination of edge (463 -> 102) to worklist


Simulating block 65

Visiting PHI node: attr_1667 = PHI <attr_334(81), attr_303(64)>
	Argument #0: attr_334 copy-of chain: attr_334 [NOT A COPY]
	Argument #1: attr_303 copy-of chain: attr_303 [NOT A COPY]
PHI node attr_1667 copy-of chain: attr_1667 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: sendonly_1690 = PHI <sendonly_43(81), sendonly_42(64)>
	Argument #0: sendonly_43 copy-of chain: sendonly_43 [NOT A COPY]
	Argument #1: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_1690 copy-of chain: sendonly_1690 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (sendonly_1690 != 2)

Simulating block 83

Visiting PHI node: sendonly_1007 = PHI <sendonly_864(82), sendonly_42(63)>
	Argument #0: sendonly_864 copy-of chain: sendonly_864 [NOT A COPY]
	Argument #1: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_1007 copy-of chain: sendonly_1007 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 74

Visiting statement:
if (sendonly_1690 != 2)

No interesting values produced.
Adding Destination of edge (74 -> 75) to worklist

Adding Destination of edge (74 -> 76) to worklist


Simulating block 73
Adding Destination of edge (73 -> 80) to worklist


Simulating block 96
Adding Destination of edge (96 -> 463) to worklist


Simulating block 462
Adding Destination of edge (462 -> 97) to worklist


Simulating block 101

Visiting PHI node: reneg_81 = PHI <reneg_349(99), reneg_352(100)>
	Argument #0: reneg_349 copy-of chain: reneg_349 [NOT A COPY]
	Argument #1: reneg_352 copy-of chain: reneg_352 [NOT A COPY]
PHI node reneg_81 copy-of chain: reneg_81 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (reneg_81 != 0)

No interesting values produced.
Adding Destination of edge (101 -> 114) to worklist


Simulating block 102

Visiting statement:
if (val_355 != 0B)

No interesting values produced.
Adding Destination of edge (102 -> 103) to worklist


Simulating block 75

Visiting statement:
if (D.44614_324 == 0)

No interesting values produced.

Simulating block 76

Visiting statement:
if (D.44616_327 == 0)

No interesting values produced.
Adding Destination of edge (76 -> 77) to worklist

Adding Destination of edge (76 -> 78) to worklist


Simulating block 77

Simulating block 80

Visiting PHI node: dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
	Argument #0: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
	Argument #1: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
	Argument #2: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
	Argument #3: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
	Argument #4: dptime_1672 copy-of chain: dptime_1672 [NOT A COPY]
	Argument #5: dptime_1468 copy-of chain: dptime_1468 [NOT A COPY]
PHI node dptime_36 copy-of chain: dptime_36 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
	Argument #0: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #1: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #2: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #3: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #4: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #5: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #8: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #9: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 -> dmaxptime_1866 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 463

Simulating block 97

Simulating block 114

Visiting PHI node: reneg_82 = PHI <0(101), reneg_353(102), reneg_1590(113)>
PHI node reneg_82 copy-of chain: reneg_82 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44649_357 != 0B)

No interesting values produced.
Adding Destination of edge (114 -> 115) to worklist

Adding Destination of edge (114 -> 116) to worklist


Simulating statement (from ssa_edges): if (reneg_82 == 0)

Simulating block 103

Visiting statement:
if (D.49712_1581 == 0)

No interesting values produced.
Adding Destination of edge (103 -> 113) to worklist

Adding Destination of edge (103 -> 104) to worklist


Simulating block 78

Visiting statement:
if (D.44621_331 == 0)

No interesting values produced.
Adding Destination of edge (78 -> 79) to worklist

Adding Destination of edge (78 -> 80) to worklist


Simulating block 115
Adding Destination of edge (115 -> 117) to worklist


Simulating block 116

Visiting statement:
if (reneg_82 == 0)

No interesting values produced.
Adding Destination of edge (116 -> 119) to worklist


Simulating block 119
Adding Destination of edge (119 -> 120) to worklist


Simulating block 120

Visiting PHI node: codec_array_84 = PHI <codec_array_360(118), codec_array_190(117), codec_array_190(119)>
	Argument #2: codec_array_190 copy-of chain: codec_array_190 [NOT A COPY]
PHI node codec_array_84 copy-of chain: codec_array_84 -> codec_array_190 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: total_codecs_85 = PHI <total_codecs_359(118), total_codecs_192(117), total_codecs_365(119)>
	Argument #2: total_codecs_365 copy-of chain: total_codecs_365 [NOT A COPY]
PHI node total_codecs_85 copy-of chain: total_codecs_85 -> total_codecs_365 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.44661_366 != 0B)

No interesting values produced.
Adding Destination of edge (120 -> 123) to worklist

Adding Destination of edge (120 -> 121) to worklist


Simulating statement (from ssa_edges): if (total_codecs_85 > 0)

Simulating statement (from ssa_edges): if (total_codecs_85 > i_1021)

Simulating block 121

Visiting statement:
if (D.44663_367 != 0B)

No interesting values produced.
Adding Destination of edge (121 -> 122) to worklist


Simulating block 122

Visiting statement:
if (D.44665_368 != 0B)

No interesting values produced.
Adding Destination of edge (122 -> 124) to worklist


Simulating block 124

Visiting statement:
if (m_370 != 0B)

No interesting values produced.
Adding Destination of edge (124 -> 125) to worklist

Adding Destination of edge (124 -> 457) to worklist


Simulating block 125
Adding Destination of edge (125 -> 126) to worklist


Simulating block 126

Visiting PHI node: match_1801 = PHI <match_15(455), 0(125)>
PHI node match_1801 copy-of chain: match_1801 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: best_te_681 = PHI <best_te_22(455), 0(125)>
PHI node best_te_681 copy-of chain: best_te_681 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: cng_pt_1718 = PHI <cng_pt_26(455), 0(125)>
PHI node cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_1765 = PHI <m_1094(455), m_370(125)>
	Argument #1: m_370 copy-of chain: m_370 [NOT A COPY]
PHI node m_1765 copy-of chain: m_1765 -> m_370 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_1867 = PHI <got_crypto_55(455), 0(125)>
PHI node got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_video_crypto_1675 = PHI <got_video_crypto_63(455), 0(125)>
PHI node got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_audio_1694 = PHI <got_audio_66(455), 0(125)>
PHI node got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_avp_672 = PHI <got_avp_1860(455), 0(125)>
PHI node got_avp_672 copy-of chain: got_avp_672 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_savp_512 = PHI <got_savp_1740(455), 0(125)>
PHI node got_savp_512 copy-of chain: got_savp_512 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_udptl_1869 = PHI <got_udptl_1744(455), 0(125)>
PHI node got_udptl_1869 copy-of chain: got_udptl_1869 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_webrtc_452 = PHI <got_webrtc_78(455), 0(125)>
PHI node got_webrtc_452 copy-of chain: got_webrtc_452 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_477 = PHI <codec_ms_94(455), 0(125)>
PHI node codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_1870 = PHI <m_idx_113(455), 0(125)>
PHI node m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_1750 = PHI <nm_idx_121(455), 0(125)>
PHI node nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44666_373 == 261)

No interesting values produced.
Adding Destination of edge (126 -> 127) to worklist

Adding Destination of edge (126 -> 128) to worklist


Simulating statement (from ssa_edges): nm_idx_1756 = PHI <nm_idx_117(294), nm_idx_1750(223)>

Visiting PHI node: nm_idx_1756 = PHI <nm_idx_117(294), nm_idx_1750(223)>
PHI node nm_idx_1756 copy-of chain: nm_idx_1756 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_119 = PHI <nm_idx_1708(287), nm_idx_683(295), nm_idx_1793(292), nm_idx_1750(222)>

Visiting PHI node: nm_idx_119 = PHI <nm_idx_1708(287), nm_idx_683(295), nm_idx_1793(292), nm_idx_1750(222)>
PHI node nm_idx_119 copy-of chain: nm_idx_119 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>

Visiting PHI node: nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
PHI node nm_idx_121 copy-of chain: nm_idx_121 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_793 = PHI <m_idx_103(294), m_idx_1870(223)>

Visiting PHI node: m_idx_793 = PHI <m_idx_103(294), m_idx_1870(223)>
PHI node m_idx_793 copy-of chain: m_idx_793 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_105 = PHI <m_idx_1799(287), m_idx_1802(295), m_idx_529(292), m_idx_1870(222)>

Visiting PHI node: m_idx_105 = PHI <m_idx_1799(287), m_idx_1802(295), m_idx_529(292), m_idx_1870(222)>
PHI node m_idx_105 copy-of chain: m_idx_105 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>

Visiting PHI node: m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
PHI node m_idx_113 copy-of chain: m_idx_113 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_1721 = PHI <codec_ms_91(294), codec_ms_477(223)>

Visiting PHI node: codec_ms_1721 = PHI <codec_ms_91(294), codec_ms_477(223)>
PHI node codec_ms_1721 copy-of chain: codec_ms_1721 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_93 = PHI <codec_ms_1734(287), codec_ms_1803(295), codec_ms_1710(292), codec_ms_477(222)>

Visiting PHI node: codec_ms_93 = PHI <codec_ms_1734(287), codec_ms_1803(295), codec_ms_1710(292), codec_ms_477(222)>
PHI node codec_ms_93 copy-of chain: codec_ms_93 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>

Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
PHI node codec_ms_94 copy-of chain: codec_ms_94 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_452(126), got_webrtc_374(127)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_452(126), got_webrtc_374(127)>
	Argument #0: got_webrtc_452 copy-of chain: got_webrtc_452 [NOT A COPY]
PHI node got_webrtc_78 copy-of chain: got_webrtc_78 -> got_webrtc_452 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (got_udptl_1869 != 0)

Simulating statement (from ssa_edges): got_udptl_775 = PHI <got_udptl_1869(140), got_udptl_391(139)>

Visiting PHI node: got_udptl_775 = PHI <got_udptl_1869(140), got_udptl_391(139)>
PHI node got_udptl_775 copy-of chain: got_udptl_775 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_udptl_1744 = PHI <got_udptl_1869(140), got_udptl_775(141), got_udptl_775(142)>

Visiting PHI node: got_udptl_1744 = PHI <got_udptl_1869(140), got_udptl_775(141), got_udptl_775(142)>
PHI node got_udptl_1744 copy-of chain: got_udptl_1744 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_savp_1712 = PHI <got_savp_74(140), got_savp_512(139)>

Visiting PHI node: got_savp_1712 = PHI <got_savp_74(140), got_savp_512(139)>
PHI node got_savp_1712 copy-of chain: got_savp_1712 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_512(132), got_savp_512(135), got_savp_512(138), got_savp_512(136), got_savp_384(133)>

Visiting PHI node: got_savp_74 = PHI <got_savp_512(132), got_savp_512(135), got_savp_512(138), got_savp_512(136), got_savp_384(133)>
PHI node got_savp_74 copy-of chain: got_savp_74 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_avp_1741 = PHI <got_avp_68(140), got_avp_672(139)>

Visiting PHI node: got_avp_1741 = PHI <got_avp_68(140), got_avp_672(139)>
PHI node got_avp_1741 copy-of chain: got_avp_1741 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_672(132), got_avp_672(135), got_avp_672(138), got_avp_388(136), got_avp_672(133)>

Visiting PHI node: got_avp_68 = PHI <got_avp_672(132), got_avp_672(135), got_avp_672(138), got_avp_388(136), got_avp_672(133)>
PHI node got_avp_68 copy-of chain: got_avp_68 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>

Visiting PHI node: got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
PHI node got_audio_66 copy-of chain: got_audio_66 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_556 = PHI <got_video_crypto_961(432), got_video_crypto_1675(368)>

Visiting PHI node: got_video_crypto_556 = PHI <got_video_crypto_961(432), got_video_crypto_1675(368)>
PHI node got_video_crypto_556 copy-of chain: got_video_crypto_556 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_960 = PHI <got_video_crypto_1789(433), got_video_crypto_1675(367)>

Visiting PHI node: got_video_crypto_960 = PHI <got_video_crypto_1789(433), got_video_crypto_1675(367)>
PHI node got_video_crypto_960 copy-of chain: got_video_crypto_960 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_361 = PHI <got_crypto_50(184), got_crypto_1867(178)>

Visiting PHI node: got_crypto_361 = PHI <got_crypto_50(184), got_crypto_1867(178)>
PHI node got_crypto_361 copy-of chain: got_crypto_361 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_141 = PHI <got_crypto_898(481), got_crypto_1867(185)>

Visiting PHI node: got_crypto_141 = PHI <got_crypto_898(481), got_crypto_1867(185)>
PHI node got_crypto_141 copy-of chain: got_crypto_141 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_970 = PHI <got_crypto_1805(215), got_crypto_1867(185), got_crypto_1867(177)>

Visiting PHI node: got_crypto_970 = PHI <got_crypto_1805(215), got_crypto_1867(185), got_crypto_1867(177)>
PHI node got_crypto_970 copy-of chain: got_crypto_970 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
PHI node got_crypto_55 copy-of chain: got_crypto_55 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): cng_pt_1668 = PHI <cng_pt_24(294), cng_pt_1718(223)>

Visiting PHI node: cng_pt_1668 = PHI <cng_pt_24(294), cng_pt_1718(223)>
PHI node cng_pt_1668 copy-of chain: cng_pt_1668 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): cng_pt_1627 = PHI <cng_pt_1706(287), cng_pt_1682(295), cng_pt_1732(292), cng_pt_1718(222)>

Visiting PHI node: cng_pt_1627 = PHI <cng_pt_1706(287), cng_pt_1682(295), cng_pt_1732(292), cng_pt_1718(222)>
PHI node cng_pt_1627 copy-of chain: cng_pt_1627 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>

Visiting PHI node: cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
PHI node cng_pt_26 copy-of chain: cng_pt_26 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): best_te_1899 = PHI <best_te_19(294), best_te_681(223)>

Visiting PHI node: best_te_1899 = PHI <best_te_19(294), best_te_681(223)>
PHI node best_te_1899 copy-of chain: best_te_1899 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): best_te_1625 = PHI <best_te_1730(287), best_te_1685(295), best_te_652(292), best_te_681(222)>

Visiting PHI node: best_te_1625 = PHI <best_te_1730(287), best_te_1685(295), best_te_652(292), best_te_681(222)>
PHI node best_te_1625 copy-of chain: best_te_1625 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>

Visiting PHI node: best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
PHI node best_te_22 copy-of chain: best_te_22 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (match_1801 == 0)

Simulating statement (from ssa_edges): match_1902 = PHI <match_7(294), match_1801(223)>

Visiting PHI node: match_1902 = PHI <match_7(294), match_1801(223)>
PHI node match_1902 copy-of chain: match_1902 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_14 = PHI <match_1801(445), 1(446)>

Visiting PHI node: match_14 = PHI <match_1801(445), 1(446)>
PHI node match_14 copy-of chain: match_14 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_9 = PHI <1(287), match_1892(295), 0(292), match_1801(222)>

Visiting PHI node: match_9 = PHI <1(287), match_1892(295), 0(292), match_1801(222)>
PHI node match_9 copy-of chain: match_9 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>

Visiting PHI node: match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
PHI node match_15 copy-of chain: match_15 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 127

Simulating block 123
Adding Destination of edge (123 -> 124) to worklist


Simulating block 124

Simulating block 113

Visiting PHI node: reneg_1590 = PHI <1(103), 1(104), 1(105), 1(106), 1(107), 1(108), 1(109), 1(112), 0(110), 0(111)>
PHI node reneg_1590 copy-of chain: reneg_1590 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.

Adding Destination of edge (113 -> 114) to worklist


Simulating block 104

Visiting statement:
if (D.49713_1582 == 0)

No interesting values produced.
Adding Destination of edge (104 -> 113) to worklist

Adding Destination of edge (104 -> 105) to worklist


Simulating block 79

Simulating block 80

Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
	Argument #0: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #1: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #2: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #3: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #4: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #5: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #6: dmaxptime_1866 copy-of chain: dmaxptime_1866 [NOT A COPY]
	Argument #7: dmaxptime_1469 copy-of chain: dmaxptime_1469 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 117

Visiting statement:
if (total_codecs_359 != 0)

No interesting values produced.
Adding Destination of edge (117 -> 118) to worklist

Adding Destination of edge (117 -> 120) to worklist


Simulating block 118

Simulating block 457

Visiting PHI node: match_17 = PHI <1(143), 0(145), 0(162), 1(160), 0(211), 0(218), 0(221), 0(366), 0(408), match_1686(456), 1(159), 1(172), 1(464), 0(124)>
PHI node match_17 copy-of chain: match_17 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>
PHI node cng_pt_1048 copy-of chain: cng_pt_1048 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.

Adding Destination of edge (457 -> 458) to worklist


Simulating block 128

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_452(126), got_webrtc_374(127)>
	Argument #0: got_webrtc_452 copy-of chain: got_webrtc_452 [NOT A COPY]
	Argument #1: got_webrtc_374 copy-of chain: got_webrtc_374 [NOT A COPY]
PHI node got_webrtc_78 copy-of chain: got_webrtc_78 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44669_375 != 0B)

No interesting values produced.
Adding Destination of edge (128 -> 129) to worklist

Adding Destination of edge (128 -> 131) to worklist


Simulating block 129

Visiting statement:
if (D.44672_377 == 0)

No interesting values produced.
Adding Destination of edge (129 -> 130) to worklist


Simulating block 130

Simulating block 114

Simulating block 113

Simulating block 105

Visiting statement:
if (D.49714_1583 == 0)

No interesting values produced.
Adding Destination of edge (105 -> 113) to worklist

Adding Destination of edge (105 -> 106) to worklist


Simulating block 106

Visiting statement:
if (D.49715_1584 == 0)

No interesting values produced.
Adding Destination of edge (106 -> 107) to worklist


Simulating block 107

Visiting statement:
if (D.49716_1585 == 0)

No interesting values produced.
Adding Destination of edge (107 -> 108) to worklist


Simulating block 108

Visiting statement:
if (D.49717_1586 == 0)

No interesting values produced.
Adding Destination of edge (108 -> 109) to worklist


Simulating block 109

Visiting statement:
if (D.49718_1587 == 0)

No interesting values produced.
Adding Destination of edge (109 -> 110) to worklist


Simulating block 110

Visiting statement:
if (D.49719_1588 != 0)

No interesting values produced.
Adding Destination of edge (110 -> 111) to worklist


Simulating block 111

Visiting statement:
if (D.49720_1589 != 0)

No interesting values produced.
Adding Destination of edge (111 -> 112) to worklist


Simulating block 112

Simulating block 120

Visiting PHI node: codec_array_84 = PHI <codec_array_360(118), codec_array_190(117), codec_array_190(119)>
	Argument #0: codec_array_360 copy-of chain: codec_array_360 [NOT A COPY]
	Argument #1: codec_array_190 copy-of chain: codec_array_190 [NOT A COPY]
PHI node codec_array_84 copy-of chain: codec_array_84 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: total_codecs_85 = PHI <total_codecs_359(118), total_codecs_192(117), total_codecs_365(119)>
	Argument #0: total_codecs_359 copy-of chain: total_codecs_359 [NOT A COPY]
	Argument #1: total_codecs_192 copy-of chain: total_codecs_192 [NOT A COPY]
PHI node total_codecs_85 copy-of chain: total_codecs_85 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (total_codecs_85 > 0)

Simulating statement (from ssa_edges): if (total_codecs_85 > i_1021)

Simulating block 458

Simulating block 131

Visiting statement:
if (D.44678_382 != 0)

No interesting values produced.
Adding Destination of edge (131 -> 132) to worklist

Adding Destination of edge (131 -> 134) to worklist


Simulating block 132

Visiting statement:
if (D.44681_383 == 2)

No interesting values produced.
Adding Destination of edge (132 -> 133) to worklist

Adding Destination of edge (132 -> 140) to worklist


Simulating block 133

Simulating block 113

Simulating block 134

Visiting statement:
if (D.44675_379 == 256)

No interesting values produced.
Adding Destination of edge (134 -> 135) to worklist

Adding Destination of edge (134 -> 137) to worklist


Simulating block 135

Visiting statement:
if (D.44681_387 == 2)

No interesting values produced.
Adding Destination of edge (135 -> 136) to worklist


Simulating block 136

Simulating block 140

Visiting PHI node: got_avp_68 = PHI <got_avp_672(132), got_avp_672(135), got_avp_672(138), got_avp_388(136), got_avp_672(133)>
	Argument #0: got_avp_672 copy-of chain: got_avp_672 [NOT A COPY]
	Argument #1: got_avp_672 copy-of chain: got_avp_672 [NOT A COPY]
	Argument #3: got_avp_388 copy-of chain: got_avp_388 [NOT A COPY]
PHI node got_avp_68 copy-of chain: got_avp_68 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_savp_74 = PHI <got_savp_512(132), got_savp_512(135), got_savp_512(138), got_savp_512(136), got_savp_384(133)>
	Argument #0: got_savp_512 copy-of chain: got_savp_512 [NOT A COPY]
	Argument #1: got_savp_512 copy-of chain: got_savp_512 [NOT A COPY]
	Argument #3: got_savp_512 copy-of chain: got_savp_512 [NOT A COPY]
	Argument #4: got_savp_384 copy-of chain: got_savp_384 [NOT A COPY]
PHI node got_savp_74 copy-of chain: got_savp_74 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: prephitmp.1049_1809 = PHI <D.44681_383(132), D.44681_387(135), pretmp.1048_1674(138), D.44681_387(136), D.44681_383(133)>
	Argument #0: D.44681_383 copy-of chain: D.44681_383 [NOT A COPY]
	Argument #1: D.44681_387 copy-of chain: D.44681_387 [NOT A COPY]
PHI node prephitmp.1049_1809 copy-of chain: prephitmp.1049_1809 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (got_udptl_1869 != 0)

No interesting values produced.
Adding Destination of edge (140 -> 141) to worklist

Adding Destination of edge (140 -> 173) to worklist


Simulating statement (from ssa_edges): prephitmp.1057_1806 = PHI <prephitmp.1049_1809(140), pretmp.1056_346(139)>

Visiting PHI node: prephitmp.1057_1806 = PHI <prephitmp.1049_1809(140), pretmp.1056_346(139)>
	Argument #0: prephitmp.1049_1809 copy-of chain: prephitmp.1049_1809 [NOT A COPY]
PHI node prephitmp.1057_1806 copy-of chain: prephitmp.1057_1806 -> prephitmp.1049_1809 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): prephitmp.1028_1815 = PHI <prephitmp.1049_1809(140), prephitmp.1057_1806(141), prephitmp.1057_1806(142)>

Visiting PHI node: prephitmp.1028_1815 = PHI <prephitmp.1049_1809(140), prephitmp.1057_1806(141), prephitmp.1057_1806(142)>
	Argument #0: prephitmp.1049_1809 copy-of chain: prephitmp.1049_1809 [NOT A COPY]
PHI node prephitmp.1028_1815 copy-of chain: prephitmp.1028_1815 -> prephitmp.1049_1809 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_savp_1712 = PHI <got_savp_74(140), got_savp_512(139)>

Visiting PHI node: got_savp_1712 = PHI <got_savp_74(140), got_savp_512(139)>
	Argument #0: got_savp_74 copy-of chain: got_savp_74 [NOT A COPY]
PHI node got_savp_1712 copy-of chain: got_savp_1712 -> got_savp_74 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_savp_1740 = PHI <got_savp_74(140), got_savp_1712(141), got_savp_1712(142)>

Visiting PHI node: got_savp_1740 = PHI <got_savp_74(140), got_savp_1712(141), got_savp_1712(142)>
	Argument #0: got_savp_74 copy-of chain: got_savp_74 [NOT A COPY]
PHI node got_savp_1740 copy-of chain: got_savp_1740 -> got_savp_74 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_avp_1741 = PHI <got_avp_68(140), got_avp_672(139)>

Visiting PHI node: got_avp_1741 = PHI <got_avp_68(140), got_avp_672(139)>
	Argument #0: got_avp_68 copy-of chain: got_avp_68 [NOT A COPY]
PHI node got_avp_1741 copy-of chain: got_avp_1741 -> got_avp_68 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_avp_1860 = PHI <got_avp_68(140), got_avp_1741(141), got_avp_1741(142)>

Visiting PHI node: got_avp_1860 = PHI <got_avp_68(140), got_avp_1741(141), got_avp_1741(142)>
	Argument #0: got_avp_68 copy-of chain: got_avp_68 [NOT A COPY]
PHI node got_avp_1860 copy-of chain: got_avp_1860 -> got_avp_68 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (prephitmp.1028_1815 == 2)

Simulating statement (from ssa_edges): if (prephitmp.1028_1815 == 3)

Simulating statement (from ssa_edges): if (prephitmp.1057_1806 == 8)

Simulating block 137

Visiting statement:
if (D.44675_379 == 258)

No interesting values produced.
Adding Destination of edge (137 -> 139) to worklist

Adding Destination of edge (137 -> 138) to worklist


Simulating block 139

Simulating block 141

Visiting PHI node: got_avp_1741 = PHI <got_avp_68(140), got_avp_672(139)>
	Argument #0: got_avp_68 copy-of chain: got_avp_68 [NOT A COPY]
	Argument #1: got_avp_672 copy-of chain: got_avp_672 [NOT A COPY]
PHI node got_avp_1741 copy-of chain: got_avp_1741 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_savp_1712 = PHI <got_savp_74(140), got_savp_512(139)>
	Argument #0: got_savp_74 copy-of chain: got_savp_74 [NOT A COPY]
	Argument #1: got_savp_512 copy-of chain: got_savp_512 [NOT A COPY]
PHI node got_savp_1712 copy-of chain: got_savp_1712 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_udptl_775 = PHI <got_udptl_1869(140), got_udptl_391(139)>
	Argument #0: got_udptl_1869 copy-of chain: got_udptl_1869 [NOT A COPY]
	Argument #1: got_udptl_391 copy-of chain: got_udptl_391 [NOT A COPY]
PHI node got_udptl_775 copy-of chain: got_udptl_775 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: prephitmp.1057_1806 = PHI <prephitmp.1049_1809(140), pretmp.1056_346(139)>
	Argument #0: prephitmp.1049_1809 copy-of chain: prephitmp.1049_1809 [NOT A COPY]
	Argument #1: pretmp.1056_346 copy-of chain: pretmp.1056_346 [NOT A COPY]
PHI node prephitmp.1057_1806 copy-of chain: prephitmp.1057_1806 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (prephitmp.1057_1806 == 8)

No interesting values produced.
Adding Destination of edge (141 -> 142) to worklist


Simulating statement (from ssa_edges): prephitmp.1028_1815 = PHI <prephitmp.1049_1809(140), prephitmp.1057_1806(141), prephitmp.1057_1806(142)>

Visiting PHI node: prephitmp.1028_1815 = PHI <prephitmp.1049_1809(140), prephitmp.1057_1806(141), prephitmp.1057_1806(142)>
	Argument #0: prephitmp.1049_1809 copy-of chain: prephitmp.1049_1809 [NOT A COPY]
	Argument #1: prephitmp.1057_1806 copy-of chain: prephitmp.1057_1806 [NOT A COPY]
PHI node prephitmp.1028_1815 copy-of chain: prephitmp.1028_1815 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (prephitmp.1028_1815 == 2)

Simulating statement (from ssa_edges): if (prephitmp.1028_1815 == 3)

Simulating statement (from ssa_edges): got_udptl_1744 = PHI <got_udptl_1869(140), got_udptl_775(141), got_udptl_775(142)>

Visiting PHI node: got_udptl_1744 = PHI <got_udptl_1869(140), got_udptl_775(141), got_udptl_775(142)>
	Argument #0: got_udptl_1869 copy-of chain: got_udptl_1869 [NOT A COPY]
	Argument #1: got_udptl_775 copy-of chain: got_udptl_775 [NOT A COPY]
PHI node got_udptl_1744 copy-of chain: got_udptl_1744 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_savp_1740 = PHI <got_savp_74(140), got_savp_1712(141), got_savp_1712(142)>

Visiting PHI node: got_savp_1740 = PHI <got_savp_74(140), got_savp_1712(141), got_savp_1712(142)>
	Argument #0: got_savp_74 copy-of chain: got_savp_74 [NOT A COPY]
	Argument #1: got_savp_1712 copy-of chain: got_savp_1712 [NOT A COPY]
PHI node got_savp_1740 copy-of chain: got_savp_1740 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_avp_1860 = PHI <got_avp_68(140), got_avp_1741(141), got_avp_1741(142)>

Visiting PHI node: got_avp_1860 = PHI <got_avp_68(140), got_avp_1741(141), got_avp_1741(142)>
	Argument #0: got_avp_68 copy-of chain: got_avp_68 [NOT A COPY]
	Argument #1: got_avp_1741 copy-of chain: got_avp_1741 [NOT A COPY]
PHI node got_avp_1860 copy-of chain: got_avp_1860 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 142

Visiting statement:
if (D.44697_393 != 0)

No interesting values produced.
Adding Destination of edge (142 -> 143) to worklist


Simulating block 143

Visiting statement:
if (D.44699_396 != 0)

No interesting values produced.
Adding Destination of edge (143 -> 457) to worklist

Adding Destination of edge (143 -> 144) to worklist


Simulating block 144

Visiting statement:
if (D.44703_399 != 0)

No interesting values produced.
Adding Destination of edge (144 -> 145) to worklist

Adding Destination of edge (144 -> 146) to worklist


Simulating block 145

Simulating block 173

Visiting statement:
if (prephitmp.1028_1815 == 2)

No interesting values produced.
Adding Destination of edge (173 -> 174) to worklist

Adding Destination of edge (173 -> 362) to worklist


Simulating block 138
Adding Destination of edge (138 -> 140) to worklist


Simulating block 140

Simulating block 457

Simulating block 146

Visiting statement:
if (D.44707_408 != 0)

No interesting values produced.
Adding Destination of edge (146 -> 147) to worklist

Adding Destination of edge (146 -> 149) to worklist


Simulating block 174

Visiting statement:
if (D.44779_497 != 0)

No interesting values produced.
Adding Destination of edge (174 -> 175) to worklist

Adding Destination of edge (174 -> 454) to worklist


Simulating block 362

Visiting statement:
if (prephitmp.1028_1815 == 3)

No interesting values produced.
Adding Destination of edge (362 -> 363) to worklist


Simulating block 147

Visiting statement:
if (proceed_209(D) != 0B)

No interesting values produced.
Adding Destination of edge (147 -> 148) to worklist


Simulating block 148

Simulating block 149

Visiting statement:
if (var_402 != 0B)

No interesting values produced.
Adding Destination of edge (149 -> 150) to worklist

Adding Destination of edge (149 -> 152) to worklist


Simulating block 175

Visiting statement:
if (D.44781_498 != 0)

No interesting values produced.
Adding Destination of edge (175 -> 176) to worklist

Adding Destination of edge (175 -> 185) to worklist


Simulating block 176

Visiting statement:
if (D.44784_499 != 0)

No interesting values produced.
Adding Destination of edge (176 -> 177) to worklist


Simulating block 177

Visiting statement:
if (attr_500 != 0B)

No interesting values produced.
Adding Destination of edge (177 -> 178) to worklist

Adding Destination of edge (177 -> 216) to worklist


Simulating block 178
Adding Destination of edge (178 -> 179) to worklist


Simulating block 179

Visiting PHI node: attr_1560 = PHI <attr_506(184), attr_500(178)>
	Argument #1: attr_500 copy-of chain: attr_500 [NOT A COPY]
PHI node attr_1560 copy-of chain: attr_1560 -> attr_500 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_361 = PHI <got_crypto_50(184), got_crypto_1867(178)>
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_361 copy-of chain: got_crypto_361 -> got_crypto_1867 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.44787_502 == 0)

No interesting values produced.
Adding Destination of edge (179 -> 180) to worklist

Adding Destination of edge (179 -> 183) to worklist


Simulating statement (from ssa_edges): got_crypto_50 = PHI <got_crypto_361(179), got_crypto_361(182), 1(181), got_crypto_361(180)>

Visiting PHI node: got_crypto_50 = PHI <got_crypto_361(179), got_crypto_361(182), 1(181), got_crypto_361(180)>
	Argument #0: got_crypto_361 copy-of chain: got_crypto_361 -> got_crypto_1867 [COPY]
PHI node got_crypto_50 copy-of chain: got_crypto_50 -> got_crypto_1867 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_crypto_361 = PHI <got_crypto_50(184), got_crypto_1867(178)>

Visiting PHI node: got_crypto_361 = PHI <got_crypto_50(184), got_crypto_1867(178)>
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_361 copy-of chain: got_crypto_361 -> got_crypto_1867 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 180

Visiting statement:
if (D.44619_503 == 0B)

No interesting values produced.
Adding Destination of edge (180 -> 181) to worklist


Simulating block 181

Visiting statement:
if (D.47888_1470 == 0)

No interesting values produced.
Adding Destination of edge (181 -> 182) to worklist


Simulating block 182

Simulating block 454

Visiting PHI node: match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
	Argument #1: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #11: match_1801 copy-of chain: match_1801 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_1801 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
	Argument #1: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #11: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 -> best_te_681 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
	Argument #1: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #11: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_1718 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #11: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_1867 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
	Argument #1: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
	Argument #11: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 -> got_video_crypto_1675 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
	Argument #1: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #11: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 -> got_audio_1694 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #11: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 -> codec_ms_477 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
	Argument #1: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
	Argument #11: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
PHI node m_idx_113 copy-of chain: m_idx_113 -> m_idx_1870 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
	Argument #1: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
	Argument #11: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
PHI node nm_idx_121 copy-of chain: nm_idx_121 -> nm_idx_1750 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (m_1094 != 0B)

No interesting values produced.
Adding Destination of edge (454 -> 455) to worklist

Adding Destination of edge (454 -> 456) to worklist


Simulating block 363

Visiting statement:
if (D.44697_874 != 0)

No interesting values produced.
Adding Destination of edge (363 -> 364) to worklist

Adding Destination of edge (363 -> 454) to worklist


Simulating block 150

Visiting statement:
if (pass_409 == 0)

No interesting values produced.
Adding Destination of edge (150 -> 151) to worklist

Adding Destination of edge (150 -> 153) to worklist


Simulating block 152

Simulating block 185

Visiting statement:
if (attr_507 != 0B)

No interesting values produced.
Adding Destination of edge (185 -> 482) to worklist


Simulating block 482

Visiting PHI node: attr_923 = PHI <attr_500(481), attr_507(185)>
	Argument #1: attr_507 copy-of chain: attr_507 [NOT A COPY]
PHI node attr_923 copy-of chain: attr_923 -> attr_507 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_141 = PHI <got_crypto_898(481), got_crypto_1867(185)>
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_141 copy-of chain: got_crypto_141 -> got_crypto_1867 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (482 -> 186) to worklist


Simulating statement (from ssa_edges): got_crypto_1119 = PHI <got_crypto_141(482), got_crypto_53(214)>

Visiting PHI node: got_crypto_1119 = PHI <got_crypto_141(482), got_crypto_53(214)>
	Argument #0: got_crypto_141 copy-of chain: got_crypto_141 -> got_crypto_1867 [COPY]
PHI node got_crypto_1119 copy-of chain: got_crypto_1119 -> got_crypto_1867 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (got_crypto_1119 <= 0)

Simulating statement (from ssa_edges): got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>

Visiting PHI node: got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
PHI node got_crypto_53 copy-of chain: got_crypto_53 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): attr_1600 = PHI <attr_923(482), attr_548(214)>

Visiting PHI node: attr_1600 = PHI <attr_923(482), attr_548(214)>
	Argument #0: attr_923 copy-of chain: attr_923 -> attr_507 [COPY]
PHI node attr_1600 copy-of chain: attr_1600 -> attr_507 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating block 186

Visiting PHI node: attr_1600 = PHI <attr_923(482), attr_548(214)>
	Argument #0: attr_923 copy-of chain: attr_923 -> attr_507 [COPY]
PHI node attr_1600 copy-of chain: attr_1600 -> attr_507 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: ptime_1476 = PHI <dptime_1036(482), ptime_34(214)>
	Argument #0: dptime_1036 copy-of chain: dptime_1036 [NOT A COPY]
PHI node ptime_1476 copy-of chain: ptime_1476 -> dptime_1036 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: maxptime_1471 = PHI <dmaxptime_1006(482), maxptime_38(214)>
	Argument #0: dmaxptime_1006 copy-of chain: dmaxptime_1006 [NOT A COPY]
PHI node maxptime_1471 copy-of chain: maxptime_1471 -> dmaxptime_1006 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_1119 = PHI <got_crypto_141(482), got_crypto_53(214)>
	Argument #0: got_crypto_141 copy-of chain: got_crypto_141 -> got_crypto_1867 [COPY]
PHI node got_crypto_1119 copy-of chain: got_crypto_1119 -> got_crypto_1867 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (D.44795_509 == 0)

No interesting values produced.
Adding Destination of edge (186 -> 187) to worklist

Adding Destination of edge (186 -> 190) to worklist


Simulating statement (from ssa_edges): maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>

Visiting PHI node: maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>
PHI node maxptime_38 copy-of chain: maxptime_38 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>

Visiting PHI node: ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>
PHI node ptime_34 copy-of chain: ptime_34 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 187

Visiting statement:
if (D.44619_510 != 0B)

No interesting values produced.
Adding Destination of edge (187 -> 188) to worklist


Simulating block 188

Visiting statement:
if (D.44800_517 == 0B)

No interesting values produced.
Adding Destination of edge (188 -> 189) to worklist

Adding Destination of edge (188 -> 213) to worklist


Simulating block 189

Simulating block 216

Visiting PHI node: ptime_1034 = PHI <ptime_376(215), dptime_1036(185), dptime_1036(177)>
	Argument #1: dptime_1036 copy-of chain: dptime_1036 [NOT A COPY]
	Argument #2: dptime_1036 copy-of chain: dptime_1036 [NOT A COPY]
PHI node ptime_1034 copy-of chain: ptime_1034 -> dptime_1036 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: maxptime_1041 = PHI <maxptime_917(215), dmaxptime_1006(185), dmaxptime_1006(177)>
	Argument #1: dmaxptime_1006 copy-of chain: dmaxptime_1006 [NOT A COPY]
	Argument #2: dmaxptime_1006 copy-of chain: dmaxptime_1006 [NOT A COPY]
PHI node maxptime_1041 copy-of chain: maxptime_1041 -> dmaxptime_1006 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_970 = PHI <got_crypto_1805(215), got_crypto_1867(185), got_crypto_1867(177)>
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #2: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_970 copy-of chain: got_crypto_970 -> got_crypto_1867 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.44836_551 != 0)

No interesting values produced.
Adding Destination of edge (216 -> 217) to worklist

Adding Destination of edge (216 -> 219) to worklist


Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #2: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #11: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_1867 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (maxptime_1041 != 0)

Simulating statement (from ssa_edges): if (maxptime_1041 == 0)

Simulating statement (from ssa_edges): if (D.45026_736 <= maxptime_1041)

Simulating statement (from ssa_edges): if (ptime_1034 == 0)

Simulating statement (from ssa_edges): if (ptime_1034 == 0)

Simulating statement (from ssa_edges): codec_ms_1884 = PHI <maxptime_1041(468), ptime_1034(237)>

Visiting PHI node: codec_ms_1884 = PHI <maxptime_1041(468), ptime_1034(237)>
PHI node codec_ms_1884 copy-of chain: codec_ms_1884 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_87 = PHI <codec_ms_1884(469), codec_ms_589(239), ptime_1034(238)>

Visiting PHI node: codec_ms_87 = PHI <codec_ms_1884(469), codec_ms_589(239), ptime_1034(238)>
PHI node codec_ms_87 copy-of chain: codec_ms_87 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 217

Visiting statement:
if (D.44839_552 == 0)

No interesting values produced.
Adding Destination of edge (217 -> 218) to worklist


Simulating block 218
Adding Destination of edge (218 -> 457) to worklist


Simulating block 183

Visiting PHI node: got_crypto_50 = PHI <got_crypto_361(179), got_crypto_361(182), 1(181), got_crypto_361(180)>
	Argument #0: got_crypto_361 copy-of chain: got_crypto_361 -> got_crypto_1867 [COPY]
	Argument #1: got_crypto_361 copy-of chain: got_crypto_361 -> got_crypto_1867 [COPY]
PHI node got_crypto_50 copy-of chain: got_crypto_50 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (attr_506 != 0B)

No interesting values produced.
Adding Destination of edge (183 -> 184) to worklist

Adding Destination of edge (183 -> 481) to worklist


Simulating statement (from ssa_edges): got_crypto_361 = PHI <got_crypto_50(184), got_crypto_1867(178)>

Visiting PHI node: got_crypto_361 = PHI <got_crypto_50(184), got_crypto_1867(178)>
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_361 copy-of chain: got_crypto_361 -> got_crypto_1867 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 455
Adding Destination of edge (455 -> 126) to worklist


Simulating block 456

Simulating block 364

Visiting statement:
if (connection_881 != 0B)

No interesting values produced.
Adding Destination of edge (364 -> 367) to worklist

Adding Destination of edge (364 -> 365) to worklist


Simulating block 365

Visiting statement:
if (connection_880 == 0B)

No interesting values produced.
Adding Destination of edge (365 -> 366) to worklist


Simulating block 366

Simulating block 367

Visiting PHI node: connection_110 = PHI <connection_880(365), connection_881(364)>
	Argument #0: connection_880 copy-of chain: connection_880 [NOT A COPY]
	Argument #1: connection_881 copy-of chain: connection_881 [NOT A COPY]
PHI node connection_110 copy-of chain: connection_110 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (map_884 != 0B)

No interesting values produced.
Adding Destination of edge (367 -> 368) to worklist

Adding Destination of edge (367 -> 434) to worklist


Simulating block 368
Adding Destination of edge (368 -> 369) to worklist


Simulating block 369

Visiting PHI node: got_video_crypto_556 = PHI <got_video_crypto_961(432), got_video_crypto_1675(368)>
	Argument #1: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
PHI node got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1675 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_820 = PHI <m_idx_954(432), 0(368)>
PHI node m_idx_820 copy-of chain: m_idx_820 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: map_1621 = PHI <map_1022(432), map_884(368)>
	Argument #1: map_884 copy-of chain: map_884 [NOT A COPY]
PHI node map_1621 copy-of chain: map_1621 -> map_884 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.45138_885 != 0)

No interesting values produced.
Adding Destination of edge (369 -> 370) to worklist

Adding Destination of edge (369 -> 379) to worklist


Simulating statement (from ssa_edges): m_idx_911 = PHI <m_idx_109(429), m_idx_820(416)>

Visiting PHI node: m_idx_911 = PHI <m_idx_109(429), m_idx_820(416)>
PHI node m_idx_911 copy-of chain: m_idx_911 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_954 = PHI <m_idx_538(430), m_idx_820(415)>

Visiting PHI node: m_idx_954 = PHI <m_idx_538(430), m_idx_820(415)>
PHI node m_idx_954 copy-of chain: m_idx_954 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_1739 = PHI <got_video_crypto_57(378), got_video_crypto_556(372)>

Visiting PHI node: got_video_crypto_1739 = PHI <got_video_crypto_57(378), got_video_crypto_556(372)>
PHI node got_video_crypto_1739 copy-of chain: got_video_crypto_1739 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_744 = PHI <got_video_crypto_519(483), got_video_crypto_556(379)>

Visiting PHI node: got_video_crypto_744 = PHI <got_video_crypto_519(483), got_video_crypto_556(379)>
PHI node got_video_crypto_744 copy-of chain: got_video_crypto_744 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_961 = PHI <got_video_crypto_1804(412), got_video_crypto_556(379), got_video_crypto_556(371)>

Visiting PHI node: got_video_crypto_961 = PHI <got_video_crypto_1804(412), got_video_crypto_556(379), got_video_crypto_556(371)>
PHI node got_video_crypto_961 copy-of chain: got_video_crypto_961 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 370

Visiting statement:
if (D.45141_886 != 0)

No interesting values produced.
Adding Destination of edge (370 -> 371) to worklist


Simulating block 371

Visiting statement:
if (attr_887 != 0B)

No interesting values produced.
Adding Destination of edge (371 -> 372) to worklist

Adding Destination of edge (371 -> 413) to worklist


Simulating block 372
Adding Destination of edge (372 -> 373) to worklist


Simulating block 373

Visiting PHI node: attr_1851 = PHI <attr_893(378), attr_887(372)>
	Argument #1: attr_887 copy-of chain: attr_887 [NOT A COPY]
PHI node attr_1851 copy-of chain: attr_1851 -> attr_887 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_video_crypto_1739 = PHI <got_video_crypto_57(378), got_video_crypto_556(372)>
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_1739 copy-of chain: got_video_crypto_1739 -> got_video_crypto_1675 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.45144_889 == 0)

No interesting values produced.
Adding Destination of edge (373 -> 374) to worklist

Adding Destination of edge (373 -> 377) to worklist


Simulating statement (from ssa_edges): got_video_crypto_57 = PHI <got_video_crypto_1739(373), got_video_crypto_1739(376), 1(375), got_video_crypto_1739(374)>

Visiting PHI node: got_video_crypto_57 = PHI <got_video_crypto_1739(373), got_video_crypto_1739(376), 1(375), got_video_crypto_1739(374)>
	Argument #0: got_video_crypto_1739 copy-of chain: got_video_crypto_1739 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_57 copy-of chain: got_video_crypto_57 -> got_video_crypto_1675 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_video_crypto_1739 = PHI <got_video_crypto_57(378), got_video_crypto_556(372)>

Visiting PHI node: got_video_crypto_1739 = PHI <got_video_crypto_57(378), got_video_crypto_556(372)>
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_1739 copy-of chain: got_video_crypto_1739 -> got_video_crypto_1675 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 374

Visiting statement:
if (D.44619_890 == 0B)

No interesting values produced.
Adding Destination of edge (374 -> 375) to worklist


Simulating block 375

Visiting statement:
if (D.47940_1496 == 0)

No interesting values produced.
Adding Destination of edge (375 -> 376) to worklist


Simulating block 376

Simulating block 454

Visiting PHI node: match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
	Argument #1: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #2: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #11: match_1801 copy-of chain: match_1801 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_1801 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
	Argument #1: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #2: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #11: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 -> best_te_681 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
	Argument #1: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #2: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #11: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_1718 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #2: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #11: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_1867 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
	Argument #1: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
	Argument #2: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
	Argument #11: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 -> got_video_crypto_1675 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
	Argument #1: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #2: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #11: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 -> got_audio_1694 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #2: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #11: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
	Argument #1: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
	Argument #2: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
	Argument #11: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
PHI node m_idx_113 copy-of chain: m_idx_113 -> m_idx_1870 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
	Argument #1: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
	Argument #2: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
	Argument #11: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
PHI node nm_idx_121 copy-of chain: nm_idx_121 -> nm_idx_1750 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 151

Visiting statement:
if (D.44716_410 == 0)

No interesting values produced.
Adding Destination of edge (151 -> 154) to worklist

Adding Destination of edge (151 -> 155) to worklist


Simulating block 153

Visiting PHI node: pass_126 = PHI <pass_406(152), pass_409(150)>
	Argument #0: pass_406 copy-of chain: pass_406 [NOT A COPY]
	Argument #1: pass_409 copy-of chain: pass_409 [NOT A COPY]
PHI node pass_126 copy-of chain: pass_126 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (pass_126 == 2)

No interesting values produced.

Simulating statement (from ssa_edges): pass_1665 = PHI <pass_126(153), 2(151)>

Visiting PHI node: pass_1665 = PHI <pass_126(153), 2(151)>
	Argument #0: pass_126 copy-of chain: pass_126 [NOT A COPY]
PHI node pass_1665 copy-of chain: pass_1665 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): pass_1849 = PHI <0(151), pass_1665(154), pass_126(153)>

Visiting PHI node: pass_1849 = PHI <0(151), pass_1665(154), pass_126(153)>
PHI node pass_1849 copy-of chain: pass_1849 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (pass_1849 != 0)

Simulating block 190

Visiting statement:
if (D.44805_520 == 0)

No interesting values produced.
Adding Destination of edge (190 -> 191) to worklist

Adding Destination of edge (190 -> 193) to worklist


Simulating block 191

Visiting statement:
if (D.44619_521 != 0B)

No interesting values produced.
Adding Destination of edge (191 -> 192) to worklist


Simulating block 192

Simulating block 213

Visiting PHI node: ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>
	Argument #0: ptime_1476 copy-of chain: ptime_1476 -> dptime_1036 [COPY]
	Argument #1: ptime_1473 copy-of chain: ptime_1473 [NOT A COPY]
PHI node ptime_34 copy-of chain: ptime_34 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>
	Argument #0: maxptime_1471 copy-of chain: maxptime_1471 -> dmaxptime_1006 [COPY]
	Argument #1: maxptime_1471 copy-of chain: maxptime_1471 -> dmaxptime_1006 [COPY]
	Argument #7: maxptime_1471 copy-of chain: maxptime_1471 -> dmaxptime_1006 [COPY]
PHI node maxptime_38 copy-of chain: maxptime_38 -> dmaxptime_1006 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
	Argument #0: got_crypto_1119 copy-of chain: got_crypto_1119 -> got_crypto_1867 [COPY]
	Argument #1: got_crypto_1119 copy-of chain: got_crypto_1119 -> got_crypto_1867 [COPY]
	Argument #7: got_crypto_1119 copy-of chain: got_crypto_1119 -> got_crypto_1867 [COPY]
PHI node got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_1867 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (attr_548 != 0B)

No interesting values produced.
Adding Destination of edge (213 -> 214) to worklist

Adding Destination of edge (213 -> 215) to worklist


Simulating statement (from ssa_edges): ptime_1476 = PHI <dptime_1036(482), ptime_34(214)>

Visiting PHI node: ptime_1476 = PHI <dptime_1036(482), ptime_34(214)>
	Argument #0: dptime_1036 copy-of chain: dptime_1036 [NOT A COPY]
PHI node ptime_1476 copy-of chain: ptime_1476 -> dptime_1036 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_1119 = PHI <got_crypto_141(482), got_crypto_53(214)>

Visiting PHI node: got_crypto_1119 = PHI <got_crypto_141(482), got_crypto_53(214)>
	Argument #0: got_crypto_141 copy-of chain: got_crypto_141 -> got_crypto_1867 [COPY]
PHI node got_crypto_1119 copy-of chain: got_crypto_1119 -> got_crypto_1867 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): maxptime_1471 = PHI <dmaxptime_1006(482), maxptime_38(214)>

Visiting PHI node: maxptime_1471 = PHI <dmaxptime_1006(482), maxptime_38(214)>
	Argument #0: dmaxptime_1006 copy-of chain: dmaxptime_1006 [NOT A COPY]
PHI node maxptime_1471 copy-of chain: maxptime_1471 -> dmaxptime_1006 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 214
Adding Destination of edge (214 -> 186) to worklist


Simulating block 219

Visiting statement:
if (connection_555 != 0B)

No interesting values produced.
Adding Destination of edge (219 -> 222) to worklist

Adding Destination of edge (219 -> 220) to worklist


Simulating block 220

Visiting statement:
if (connection_554 == 0B)

No interesting values produced.
Adding Destination of edge (220 -> 221) to worklist


Simulating block 221

Simulating block 222

Visiting PHI node: connection_139 = PHI <connection_554(220), connection_555(219)>
	Argument #0: connection_554 copy-of chain: connection_554 [NOT A COPY]
	Argument #1: connection_555 copy-of chain: connection_555 [NOT A COPY]
PHI node connection_139 copy-of chain: connection_139 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (map_559 != 0B)

No interesting values produced.
Adding Destination of edge (222 -> 223) to worklist

Adding Destination of edge (222 -> 296) to worklist


Simulating block 223
Adding Destination of edge (223 -> 224) to worklist


Simulating block 224

Visiting PHI node: match_1902 = PHI <match_7(294), match_1801(223)>
	Argument #1: match_1801 copy-of chain: match_1801 [NOT A COPY]
PHI node match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: best_te_1899 = PHI <best_te_19(294), best_te_681(223)>
	Argument #1: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
PHI node best_te_1899 copy-of chain: best_te_1899 -> best_te_681 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: cng_pt_1668 = PHI <cng_pt_24(294), cng_pt_1718(223)>
	Argument #1: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
PHI node cng_pt_1668 copy-of chain: cng_pt_1668 -> cng_pt_1718 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: codec_ms_1721 = PHI <codec_ms_91(294), codec_ms_477(223)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_793 = PHI <m_idx_103(294), m_idx_1870(223)>
	Argument #1: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
PHI node m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_1756 = PHI <nm_idx_117(294), nm_idx_1750(223)>
	Argument #1: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
PHI node nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: map_1729 = PHI <map_712(294), map_559(223)>
	Argument #1: map_559 copy-of chain: map_559 [NOT A COPY]
PHI node map_1729 copy-of chain: map_1729 -> map_559 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (rm_encoding_561 == 0B)

No interesting values produced.
Adding Destination of edge (224 -> 225) to worklist

Adding Destination of edge (224 -> 226) to worklist


Simulating statement (from ssa_edges): nm_idx_1140 = PHI <nm_idx_115(289), nm_idx_1756(257)>

Visiting PHI node: nm_idx_1140 = PHI <nm_idx_115(289), nm_idx_1756(257)>
PHI node nm_idx_1140 copy-of chain: nm_idx_1140 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>

Visiting PHI node: nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
PHI node nm_idx_117 copy-of chain: nm_idx_117 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_902 = PHI <nm_idx_1649(290), nm_idx_1756(256)>

Visiting PHI node: nm_idx_902 = PHI <nm_idx_1649(290), nm_idx_1756(256)>
PHI node nm_idx_902 copy-of chain: nm_idx_902 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_1488 = PHI <m_idx_100(289), m_idx_793(257)>

Visiting PHI node: m_idx_1488 = PHI <m_idx_100(289), m_idx_793(257)>
PHI node m_idx_1488 copy-of chain: m_idx_1488 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>

Visiting PHI node: m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
PHI node m_idx_103 copy-of chain: m_idx_103 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_102 = PHI <m_idx_527(290), m_idx_793(256)>

Visiting PHI node: m_idx_102 = PHI <m_idx_527(290), m_idx_793(256)>
PHI node m_idx_102 copy-of chain: m_idx_102 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>

Visiting PHI node: codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>
PHI node codec_ms_91 copy-of chain: codec_ms_91 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (cng_pt_1668 == 0)

Simulating statement (from ssa_edges): cng_pt_24 = PHI <cng_pt_1668(229), cng_pt_573(234), cng_pt_1668(228), cng_pt_1668(235), cng_pt_1668(291), cng_pt_573(233)>

Visiting PHI node: cng_pt_24 = PHI <cng_pt_1668(229), cng_pt_573(234), cng_pt_1668(228), cng_pt_1668(235), cng_pt_1668(291), cng_pt_573(233)>
PHI node cng_pt_24 copy-of chain: cng_pt_24 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (best_te_1899 == 0)

Simulating statement (from ssa_edges): best_te_19 = PHI <best_te_568(229), best_te_1899(234), best_te_1899(228), best_te_1899(235), best_te_1899(291), best_te_1899(233)>

Visiting PHI node: best_te_19 = PHI <best_te_568(229), best_te_1899(234), best_te_1899(228), best_te_1899(235), best_te_1899(291), best_te_1899(233)>
PHI node best_te_19 copy-of chain: best_te_19 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (match_1902 != 0)

Simulating statement (from ssa_edges): match_7 = PHI <match_1902(229), match_1902(234), match_1902(228), match_1902(235), 0(291), match_1902(233)>

Visiting PHI node: match_7 = PHI <match_1902(229), match_1902(234), match_1902(228), match_1902(235), 0(291), match_1902(233)>
PHI node match_7 copy-of chain: match_7 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 225

Simulating block 457

Simulating block 184
Adding Destination of edge (184 -> 179) to worklist


Simulating block 481
Adding Destination of edge (481 -> 482) to worklist


Simulating block 126

Visiting PHI node: m_1765 = PHI <m_1094(455), m_370(125)>
	Argument #0: m_1094 copy-of chain: m_1094 [NOT A COPY]
	Argument #1: m_370 copy-of chain: m_370 [NOT A COPY]
PHI node m_1765 copy-of chain: m_1765 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 434

Visiting PHI node: got_video_crypto_960 = PHI <got_video_crypto_1789(433), got_video_crypto_1675(367)>
	Argument #1: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
PHI node got_video_crypto_960 copy-of chain: got_video_crypto_960 -> got_video_crypto_1675 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_907 = PHI <m_idx_1796(433), 0(367)>
PHI node m_idx_907 copy-of chain: m_idx_907 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.45268_1026 != 0)

No interesting values produced.
Adding Destination of edge (434 -> 435) to worklist

Adding Destination of edge (434 -> 436) to worklist


Simulating statement (from ssa_edges): if (m_idx_907 != 0)

Simulating statement (from ssa_edges): if (m_idx_907 > j_1068)

Simulating statement (from ssa_edges): m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>

Visiting PHI node: m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
	Argument #1: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
	Argument #2: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
	Argument #11: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
PHI node m_idx_113 copy-of chain: m_idx_113 -> m_idx_1870 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
	Argument #1: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
	Argument #2: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
	Argument #11: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 -> got_video_crypto_1675 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 435
Adding Destination of edge (435 -> 454) to worklist


Simulating block 379

Visiting statement:
if (attr_894 != 0B)

No interesting values produced.
Adding Destination of edge (379 -> 484) to worklist


Simulating block 484

Visiting PHI node: attr_1163 = PHI <attr_887(483), attr_894(379)>
	Argument #1: attr_894 copy-of chain: attr_894 [NOT A COPY]
PHI node attr_1163 copy-of chain: attr_1163 -> attr_894 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_video_crypto_744 = PHI <got_video_crypto_519(483), got_video_crypto_556(379)>
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_744 copy-of chain: got_video_crypto_744 -> got_video_crypto_1675 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (484 -> 380) to worklist


Simulating statement (from ssa_edges): got_video_crypto_1886 = PHI <got_video_crypto_744(484), got_video_crypto_60(411)>

Visiting PHI node: got_video_crypto_1886 = PHI <got_video_crypto_744(484), got_video_crypto_60(411)>
	Argument #0: got_video_crypto_744 copy-of chain: got_video_crypto_744 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_1886 copy-of chain: got_video_crypto_1886 -> got_video_crypto_1675 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (got_video_crypto_1886 == 0)

Simulating statement (from ssa_edges): got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): attr_620 = PHI <attr_1163(484), attr_979(411)>

Visiting PHI node: attr_620 = PHI <attr_1163(484), attr_979(411)>
	Argument #0: attr_1163 copy-of chain: attr_1163 -> attr_894 [COPY]
PHI node attr_620 copy-of chain: attr_620 -> attr_894 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating block 380

Visiting PHI node: attr_620 = PHI <attr_1163(484), attr_979(411)>
	Argument #0: attr_1163 copy-of chain: attr_1163 -> attr_894 [COPY]
PHI node attr_620 copy-of chain: attr_620 -> attr_894 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_video_crypto_1886 = PHI <got_video_crypto_744(484), got_video_crypto_60(411)>
	Argument #0: got_video_crypto_744 copy-of chain: got_video_crypto_744 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_1886 copy-of chain: got_video_crypto_1886 -> got_video_crypto_1675 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (D.45152_896 == 0)

No interesting values produced.
Adding Destination of edge (380 -> 381) to worklist

Adding Destination of edge (380 -> 382) to worklist


Simulating block 381

Visiting statement:
if (D.44619_897 != 0B)

No interesting values produced.
Adding Destination of edge (381 -> 410) to worklist


Simulating block 413

Visiting PHI node: got_video_crypto_961 = PHI <got_video_crypto_1804(412), got_video_crypto_556(379), got_video_crypto_556(371)>
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1675 [COPY]
	Argument #2: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_961 copy-of chain: got_video_crypto_961 -> got_video_crypto_1675 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (rm_encoding_980 == 0B)

No interesting values produced.
Adding Destination of edge (413 -> 414) to worklist

Adding Destination of edge (413 -> 415) to worklist


Simulating statement (from ssa_edges): got_video_crypto_556 = PHI <got_video_crypto_961(432), got_video_crypto_1675(368)>

Visiting PHI node: got_video_crypto_556 = PHI <got_video_crypto_961(432), got_video_crypto_1675(368)>
	Argument #1: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
PHI node got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1675 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 414

Simulating block 377

Visiting PHI node: got_video_crypto_57 = PHI <got_video_crypto_1739(373), got_video_crypto_1739(376), 1(375), got_video_crypto_1739(374)>
	Argument #0: got_video_crypto_1739 copy-of chain: got_video_crypto_1739 -> got_video_crypto_1675 [COPY]
	Argument #1: got_video_crypto_1739 copy-of chain: got_video_crypto_1739 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_57 copy-of chain: got_video_crypto_57 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (attr_893 != 0B)

No interesting values produced.
Adding Destination of edge (377 -> 378) to worklist

Adding Destination of edge (377 -> 483) to worklist


Simulating statement (from ssa_edges): got_video_crypto_1739 = PHI <got_video_crypto_57(378), got_video_crypto_556(372)>

Visiting PHI node: got_video_crypto_1739 = PHI <got_video_crypto_57(378), got_video_crypto_556(372)>
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_1739 copy-of chain: got_video_crypto_1739 -> got_video_crypto_1675 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 378
Adding Destination of edge (378 -> 373) to worklist


Simulating block 154

Visiting statement:
if (D.44723_414 != 0)

No interesting values produced.
Adding Destination of edge (154 -> 464) to worklist


Simulating block 155

Visiting statement:
if (D.44724_416 == 0)

No interesting values produced.
Adding Destination of edge (155 -> 156) to worklist


Simulating block 156

Visiting statement:
if (D.44726_418 != 0)

No interesting values produced.
Adding Destination of edge (156 -> 157) to worklist


Simulating block 157

Visiting statement:
if (D.44728_420 != 0)

No interesting values produced.
Adding Destination of edge (157 -> 158) to worklist


Simulating block 158

Visiting statement:
if (D.44730_422 == 0)

No interesting values produced.
Adding Destination of edge (158 -> 159) to worklist


Simulating block 159

Visiting statement:
if (pass_1849 != 0)

No interesting values produced.
Adding Destination of edge (159 -> 160) to worklist

Adding Destination of edge (159 -> 457) to worklist


Simulating block 160

Visiting statement:
if (D.44733_424 == 0)

No interesting values produced.
Adding Destination of edge (160 -> 161) to worklist


Simulating block 161

Visiting statement:
if (D.44737_431 == 0)

No interesting values produced.
Adding Destination of edge (161 -> 162) to worklist

Adding Destination of edge (161 -> 163) to worklist


Simulating block 162

Simulating block 193

Visiting statement:
if (D.44810_525 == 0)

No interesting values produced.
Adding Destination of edge (193 -> 194) to worklist

Adding Destination of edge (193 -> 196) to worklist


Simulating block 215
Adding Destination of edge (215 -> 216) to worklist


Simulating block 186

Visiting PHI node: attr_1600 = PHI <attr_923(482), attr_548(214)>
	Argument #0: attr_923 copy-of chain: attr_923 -> attr_507 [COPY]
	Argument #1: attr_548 copy-of chain: attr_548 [NOT A COPY]
PHI node attr_1600 copy-of chain: attr_1600 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: ptime_1476 = PHI <dptime_1036(482), ptime_34(214)>
	Argument #0: dptime_1036 copy-of chain: dptime_1036 [NOT A COPY]
	Argument #1: ptime_34 copy-of chain: ptime_34 [NOT A COPY]
PHI node ptime_1476 copy-of chain: ptime_1476 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: maxptime_1471 = PHI <dmaxptime_1006(482), maxptime_38(214)>
	Argument #0: dmaxptime_1006 copy-of chain: dmaxptime_1006 [NOT A COPY]
	Argument #1: maxptime_38 copy-of chain: maxptime_38 -> dmaxptime_1006 [COPY]
PHI node maxptime_1471 copy-of chain: maxptime_1471 -> dmaxptime_1006 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_crypto_1119 = PHI <got_crypto_141(482), got_crypto_53(214)>
	Argument #0: got_crypto_141 copy-of chain: got_crypto_141 -> got_crypto_1867 [COPY]
	Argument #1: got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_1867 [COPY]
PHI node got_crypto_1119 copy-of chain: got_crypto_1119 -> got_crypto_1867 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 296

Visiting PHI node: match_9 = PHI <1(287), match_1892(295), 0(292), match_1801(222)>
	Argument #3: match_1801 copy-of chain: match_1801 [NOT A COPY]
PHI node match_9 copy-of chain: match_9 -> match_1801 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: codec_ms_93 = PHI <codec_ms_1734(287), codec_ms_1803(295), codec_ms_1710(292), codec_ms_477(222)>
	Argument #3: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_93 copy-of chain: codec_ms_93 -> codec_ms_477 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_105 = PHI <m_idx_1799(287), m_idx_1802(295), m_idx_529(292), m_idx_1870(222)>
	Argument #3: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
PHI node m_idx_105 copy-of chain: m_idx_105 -> m_idx_1870 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_119 = PHI <nm_idx_1708(287), nm_idx_683(295), nm_idx_1793(292), nm_idx_1750(222)>
	Argument #3: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
PHI node nm_idx_119 copy-of chain: nm_idx_119 -> nm_idx_1750 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: best_te_1625 = PHI <best_te_1730(287), best_te_1685(295), best_te_652(292), best_te_681(222)>
	Argument #3: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
PHI node best_te_1625 copy-of chain: best_te_1625 -> best_te_681 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: cng_pt_1627 = PHI <cng_pt_1706(287), cng_pt_1682(295), cng_pt_1732(292), cng_pt_1718(222)>
	Argument #3: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
PHI node cng_pt_1627 copy-of chain: cng_pt_1627 -> cng_pt_1718 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.45005_716 != 0)

No interesting values produced.
Adding Destination of edge (296 -> 297) to worklist

Adding Destination of edge (296 -> 298) to worklist


Simulating statement (from ssa_edges): cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>

Visiting PHI node: cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
	Argument #1: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #2: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #3: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #11: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_1718 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (best_te_1625 == 0)

Simulating statement (from ssa_edges): best_te_1861 = PHI <best_te_834(345), best_te_1625(342)>

Visiting PHI node: best_te_1861 = PHI <best_te_834(345), best_te_1625(342)>
PHI node best_te_1861 copy-of chain: best_te_1861 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (nm_idx_119 > j_737)

Simulating statement (from ssa_edges): nm_idx_842 = PHI <nm_idx_1745(334), nm_idx_119(474)>

Visiting PHI node: nm_idx_842 = PHI <nm_idx_1745(334), nm_idx_119(474)>
PHI node nm_idx_842 copy-of chain: nm_idx_842 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (m_idx_105 != 0)

Simulating statement (from ssa_edges): m_idx_1716 = PHI <m_idx_105(311), 1(308)>

Visiting PHI node: m_idx_1716 = PHI <m_idx_105(311), 1(308)>
PHI node m_idx_1716 copy-of chain: m_idx_1716 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>

Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #2: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #3: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #11: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 297
Adding Destination of edge (297 -> 334) to worklist


Simulating block 226

Visiting PHI node: rm_encoding_130 = PHI <rm_encoding_561(224), ""(225)>
	Argument #0: rm_encoding_561 copy-of chain: rm_encoding_561 [NOT A COPY]
PHI node rm_encoding_130 copy-of chain: rm_encoding_130 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44848_563 == 0)

No interesting values produced.
Adding Destination of edge (226 -> 227) to worklist

Adding Destination of edge (226 -> 230) to worklist


Simulating block 227

Visiting statement:
if (best_te_1899 == 0)

No interesting values produced.
Adding Destination of edge (227 -> 229) to worklist

Adding Destination of edge (227 -> 228) to worklist


Simulating block 228

Visiting statement:
if (D.44854_564 == D.44855_566)

Trying to determine truth value of predicate if (D.44854_564 == D.44855_566)
No interesting values produced.
Adding Destination of edge (228 -> 293) to worklist


Simulating block 179

Visiting PHI node: attr_1560 = PHI <attr_506(184), attr_500(178)>
	Argument #0: attr_506 copy-of chain: attr_506 [NOT A COPY]
	Argument #1: attr_500 copy-of chain: attr_500 [NOT A COPY]
PHI node attr_1560 copy-of chain: attr_1560 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_crypto_361 = PHI <got_crypto_50(184), got_crypto_1867(178)>
	Argument #0: got_crypto_50 copy-of chain: got_crypto_50 [NOT A COPY]
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_361 copy-of chain: got_crypto_361 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 482

Visiting PHI node: attr_923 = PHI <attr_500(481), attr_507(185)>
	Argument #0: attr_500 copy-of chain: attr_500 [NOT A COPY]
	Argument #1: attr_507 copy-of chain: attr_507 [NOT A COPY]
PHI node attr_923 copy-of chain: attr_923 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_crypto_141 = PHI <got_crypto_898(481), got_crypto_1867(185)>
	Argument #0: got_crypto_898 copy-of chain: got_crypto_898 [NOT A COPY]
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_141 copy-of chain: got_crypto_141 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_crypto_1119 = PHI <got_crypto_141(482), got_crypto_53(214)>

Visiting PHI node: got_crypto_1119 = PHI <got_crypto_141(482), got_crypto_53(214)>
	Argument #0: got_crypto_141 copy-of chain: got_crypto_141 [NOT A COPY]
	Argument #1: got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_1867 [COPY]
PHI node got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (got_crypto_1119 <= 0)

Simulating statement (from ssa_edges): got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>

Visiting PHI node: got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
	Argument #0: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #1: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #7: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
PHI node got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_1119 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating block 436

Visiting statement:
if (m_idx_907 != 0)

No interesting values produced.
Adding Destination of edge (436 -> 437) to worklist


Simulating block 437

Visiting statement:
if (greedy_47 != 0)

No interesting values produced.
Adding Destination of edge (437 -> 438) to worklist

Adding Destination of edge (437 -> 439) to worklist


Simulating block 438

Simulating block 454

Visiting PHI node: match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
	Argument #1: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #2: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #3: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #11: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #12: match_1801 copy-of chain: match_1801 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_1801 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
	Argument #1: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #2: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #3: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #11: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #12: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 -> best_te_681 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
	Argument #1: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #2: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #3: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #11: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #12: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_1718 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #2: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #3: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #11: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #12: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_1867 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
	Argument #1: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
	Argument #2: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
	Argument #3: got_video_crypto_960 copy-of chain: got_video_crypto_960 -> got_video_crypto_1675 [COPY]
	Argument #11: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
	Argument #12: got_video_crypto_960 copy-of chain: got_video_crypto_960 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 -> got_video_crypto_1675 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
	Argument #1: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #2: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #3: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #11: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #12: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 -> got_audio_1694 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #2: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #3: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #11: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #12: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
	Argument #1: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
	Argument #2: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
PHI node m_idx_113 copy-of chain: m_idx_113 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
	Argument #1: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
	Argument #2: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
PHI node nm_idx_121 copy-of chain: nm_idx_121 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 382

Visiting statement:
if (D.45155_899 == 0)

No interesting values produced.
Adding Destination of edge (382 -> 383) to worklist

Adding Destination of edge (382 -> 387) to worklist


Simulating block 383

Visiting statement:
if (D.44619_900 == 0B)

No interesting values produced.
Adding Destination of edge (383 -> 384) to worklist


Simulating block 384

Visiting statement:
if (D.47944_1498 == 0)

No interesting values produced.
Adding Destination of edge (384 -> 476) to worklist


Simulating block 476

Visiting statement:
if (D.45161_903 != 0B)

No interesting values produced.
Adding Destination of edge (476 -> 385) to worklist

Adding Destination of edge (476 -> 386) to worklist


Simulating block 385

Simulating block 410

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
	Argument #0: got_video_crypto_1886 copy-of chain: got_video_crypto_1886 -> got_video_crypto_1675 [COPY]
	Argument #7: got_video_crypto_1886 copy-of chain: got_video_crypto_1886 -> got_video_crypto_1675 [COPY]
	Argument #9: got_video_crypto_1886 copy-of chain: got_video_crypto_1886 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 -> got_video_crypto_1675 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (attr_979 != 0B)

No interesting values produced.
Adding Destination of edge (410 -> 411) to worklist

Adding Destination of edge (410 -> 412) to worklist


Simulating statement (from ssa_edges): got_video_crypto_1886 = PHI <got_video_crypto_744(484), got_video_crypto_60(411)>

Visiting PHI node: got_video_crypto_1886 = PHI <got_video_crypto_744(484), got_video_crypto_60(411)>
	Argument #0: got_video_crypto_744 copy-of chain: got_video_crypto_744 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_1886 copy-of chain: got_video_crypto_1886 -> got_video_crypto_1675 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 411
Adding Destination of edge (411 -> 380) to worklist


Simulating block 415

Visiting PHI node: rm_encoding_137 = PHI <rm_encoding_980(413), ""(414)>
	Argument #0: rm_encoding_980 copy-of chain: rm_encoding_980 [NOT A COPY]
PHI node rm_encoding_137 copy-of chain: rm_encoding_137 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (total_codecs_85 > 0)

No interesting values produced.
Adding Destination of edge (415 -> 416) to worklist

Adding Destination of edge (415 -> 431) to worklist


Simulating block 483
Adding Destination of edge (483 -> 484) to worklist


Simulating block 373

Visiting PHI node: attr_1851 = PHI <attr_893(378), attr_887(372)>
	Argument #0: attr_893 copy-of chain: attr_893 [NOT A COPY]
	Argument #1: attr_887 copy-of chain: attr_887 [NOT A COPY]
PHI node attr_1851 copy-of chain: attr_1851 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_video_crypto_1739 = PHI <got_video_crypto_57(378), got_video_crypto_556(372)>
	Argument #0: got_video_crypto_57 copy-of chain: got_video_crypto_57 [NOT A COPY]
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_1739 copy-of chain: got_video_crypto_1739 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 464

Simulating block 457

Simulating block 163

Visiting statement:
if (D.44743_440 != 0)

No interesting values produced.
Adding Destination of edge (163 -> 164) to worklist

Adding Destination of edge (163 -> 166) to worklist


Simulating block 194

Visiting statement:
if (D.44619_526 != 0B)

No interesting values produced.
Adding Destination of edge (194 -> 195) to worklist


Simulating block 195
Adding Destination of edge (195 -> 213) to worklist


Simulating block 196

Visiting statement:
if (got_crypto_1119 <= 0)

No interesting values produced.
Adding Destination of edge (196 -> 197) to worklist


Simulating block 197

Visiting statement:
if (D.44815_530 == 0)

No interesting values produced.
Adding Destination of edge (197 -> 198) to worklist


Simulating block 198

Visiting statement:
if (D.44619_531 == 0B)

No interesting values produced.
Adding Destination of edge (198 -> 199) to worklist


Simulating block 199

Visiting statement:
if (D.47901_1475 == 0)

No interesting values produced.
Adding Destination of edge (199 -> 465) to worklist


Simulating block 465

Visiting statement:
if (D.44822_535 == 0)

No interesting values produced.
Adding Destination of edge (465 -> 200) to worklist

Adding Destination of edge (465 -> 212) to worklist


Simulating block 200

Visiting statement:
if (D.44825_537 != 0B)

No interesting values produced.
Adding Destination of edge (200 -> 201) to worklist

Adding Destination of edge (200 -> 466) to worklist


Simulating block 201

Visiting statement:
if (D.49724_1591 == 0)

No interesting values produced.
Adding Destination of edge (201 -> 210) to worklist

Adding Destination of edge (201 -> 202) to worklist


Simulating block 416
Adding Destination of edge (416 -> 417) to worklist


Simulating block 431

Visiting PHI node: m_idx_954 = PHI <m_idx_538(430), m_idx_820(415)>
	Argument #1: m_idx_820 copy-of chain: m_idx_820 [NOT A COPY]
PHI node m_idx_954 copy-of chain: m_idx_954 -> m_idx_820 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (map_1022 != 0B)

No interesting values produced.
Adding Destination of edge (431 -> 432) to worklist

Adding Destination of edge (431 -> 433) to worklist


Simulating block 432
Adding Destination of edge (432 -> 369) to worklist


Simulating block 484

Visiting PHI node: attr_1163 = PHI <attr_887(483), attr_894(379)>
	Argument #0: attr_887 copy-of chain: attr_887 [NOT A COPY]
	Argument #1: attr_894 copy-of chain: attr_894 [NOT A COPY]
PHI node attr_1163 copy-of chain: attr_1163 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_video_crypto_744 = PHI <got_video_crypto_519(483), got_video_crypto_556(379)>
	Argument #0: got_video_crypto_519 copy-of chain: got_video_crypto_519 [NOT A COPY]
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_744 copy-of chain: got_video_crypto_744 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_video_crypto_1886 = PHI <got_video_crypto_744(484), got_video_crypto_60(411)>

Visiting PHI node: got_video_crypto_1886 = PHI <got_video_crypto_744(484), got_video_crypto_60(411)>
	Argument #0: got_video_crypto_744 copy-of chain: got_video_crypto_744 [NOT A COPY]
	Argument #1: got_video_crypto_60 copy-of chain: got_video_crypto_60 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_1886 copy-of chain: got_video_crypto_1886 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (got_video_crypto_1886 == 0)

Simulating statement (from ssa_edges): got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
	Argument #0: got_video_crypto_1886 copy-of chain: got_video_crypto_1886 [NOT A COPY]
	Argument #7: got_video_crypto_1886 copy-of chain: got_video_crypto_1886 [NOT A COPY]
	Argument #9: got_video_crypto_1886 copy-of chain: got_video_crypto_1886 [NOT A COPY]
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 -> got_video_crypto_1886 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): attr_620 = PHI <attr_1163(484), attr_979(411)>

Visiting PHI node: attr_620 = PHI <attr_1163(484), attr_979(411)>
	Argument #0: attr_1163 copy-of chain: attr_1163 [NOT A COPY]
	Argument #1: attr_979 copy-of chain: attr_979 [NOT A COPY]
PHI node attr_620 copy-of chain: attr_620 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 164

Visiting statement:
if (D.44747_443 != 0)

No interesting values produced.
Adding Destination of edge (164 -> 165) to worklist


Simulating block 165

Simulating block 166

Visiting statement:
if (D.44758_451 != 0)

No interesting values produced.
Adding Destination of edge (166 -> 167) to worklist

Adding Destination of edge (166 -> 170) to worklist


Simulating block 167

Visiting statement:
if (D.39032_454 == 0)

No interesting values produced.
Adding Destination of edge (167 -> 168) to worklist


Simulating block 168

Visiting statement:
if (remote_port_430 == D.44753_448)

Trying to determine truth value of predicate if (remote_port_430 == D.44753_448)
No interesting values produced.
Adding Destination of edge (168 -> 169) to worklist


Simulating block 169
Adding Destination of edge (169 -> 172) to worklist


Simulating block 172
Adding Destination of edge (172 -> 457) to worklist


Simulating block 213

Visiting PHI node: maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>
	Argument #0: maxptime_1471 copy-of chain: maxptime_1471 -> dmaxptime_1006 [COPY]
	Argument #1: maxptime_1471 copy-of chain: maxptime_1471 -> dmaxptime_1006 [COPY]
	Argument #2: maxptime_1474 copy-of chain: maxptime_1474 [NOT A COPY]
PHI node maxptime_38 copy-of chain: maxptime_38 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
	Argument #0: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #1: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #2: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #3: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #4: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #5: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #7: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #8: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
PHI node got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_1119 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): maxptime_1471 = PHI <dmaxptime_1006(482), maxptime_38(214)>

Visiting PHI node: maxptime_1471 = PHI <dmaxptime_1006(482), maxptime_38(214)>
	Argument #0: dmaxptime_1006 copy-of chain: dmaxptime_1006 [NOT A COPY]
	Argument #1: maxptime_38 copy-of chain: maxptime_38 [NOT A COPY]
PHI node maxptime_1471 copy-of chain: maxptime_1471 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 212

Visiting PHI node: prephitmp.1031_1893 = PHI <D.44619_531(465), pretmp.1034_1640(210), pretmp.1034_1896(467)>
	Argument #0: D.44619_531 copy-of chain: D.44619_531 [NOT A COPY]
PHI node prephitmp.1031_1893 copy-of chain: prephitmp.1031_1893 -> D.44619_531 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (212 -> 213) to worklist


Simulating block 466

Visiting statement:
if (D.44831_542 != 0)

No interesting values produced.
Adding Destination of edge (466 -> 211) to worklist

Adding Destination of edge (466 -> 467) to worklist


Simulating block 211

Simulating block 210
Adding Destination of edge (210 -> 212) to worklist


Simulating block 216

Visiting PHI node: ptime_1034 = PHI <ptime_376(215), dptime_1036(185), dptime_1036(177)>
	Argument #0: ptime_376 copy-of chain: ptime_376 [NOT A COPY]
	Argument #1: dptime_1036 copy-of chain: dptime_1036 [NOT A COPY]
PHI node ptime_1034 copy-of chain: ptime_1034 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: maxptime_1041 = PHI <maxptime_917(215), dmaxptime_1006(185), dmaxptime_1006(177)>
	Argument #0: maxptime_917 copy-of chain: maxptime_917 [NOT A COPY]
	Argument #1: dmaxptime_1006 copy-of chain: dmaxptime_1006 [NOT A COPY]
PHI node maxptime_1041 copy-of chain: maxptime_1041 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_crypto_970 = PHI <got_crypto_1805(215), got_crypto_1867(185), got_crypto_1867(177)>
	Argument #0: got_crypto_1805 copy-of chain: got_crypto_1805 [NOT A COPY]
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_970 copy-of chain: got_crypto_970 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #2: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #3: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #11: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #12: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_1867 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (maxptime_1041 != 0)

Simulating statement (from ssa_edges): if (maxptime_1041 == 0)

Simulating statement (from ssa_edges): if (D.45026_736 <= maxptime_1041)

Simulating statement (from ssa_edges): if (ptime_1034 == 0)

Simulating statement (from ssa_edges): if (ptime_1034 == 0)

Simulating statement (from ssa_edges): codec_ms_1884 = PHI <maxptime_1041(468), ptime_1034(237)>

Visiting PHI node: codec_ms_1884 = PHI <maxptime_1041(468), ptime_1034(237)>
PHI node codec_ms_1884 copy-of chain: codec_ms_1884 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_87 = PHI <codec_ms_1884(469), codec_ms_589(239), ptime_1034(238)>

Visiting PHI node: codec_ms_87 = PHI <codec_ms_1884(469), codec_ms_589(239), ptime_1034(238)>
PHI node codec_ms_87 copy-of chain: codec_ms_87 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 298

Visiting statement:
if (D.45010_722 != 0)

No interesting values produced.
Adding Destination of edge (298 -> 299) to worklist

Adding Destination of edge (298 -> 311) to worklist


Simulating block 299
Adding Destination of edge (299 -> 300) to worklist


Simulating block 300

Visiting PHI node: j_1846 = PHI <j_737(310), 0(299)>
PHI node j_1846 copy-of chain: j_1846 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (near_rate_726 == 0)

No interesting values produced.
Adding Destination of edge (300 -> 301) to worklist

Adding Destination of edge (300 -> 302) to worklist


Simulating block 301

Simulating block 334

Visiting statement:
if (match_12 != 0)

No interesting values produced.
Adding Destination of edge (334 -> 335) to worklist

Adding Destination of edge (334 -> 342) to worklist


Simulating block 230

Visiting statement:
if (D.44858_570 == 0)

No interesting values produced.
Adding Destination of edge (230 -> 231) to worklist

Adding Destination of edge (230 -> 235) to worklist


Simulating block 231

Visiting statement:
if (cng_pt_1668 == 0)

No interesting values produced.
Adding Destination of edge (231 -> 232) to worklist


Simulating block 232

Visiting statement:
if (D.44863_571 == 0)

No interesting values produced.
Adding Destination of edge (232 -> 233) to worklist


Simulating block 233

Visiting statement:
if (D.44605_574 != 0B)

No interesting values produced.
Adding Destination of edge (233 -> 234) to worklist


Simulating block 234

Simulating block 229

Simulating block 293

Visiting PHI node: match_7 = PHI <match_1902(229), match_1902(234), match_1902(228), match_1902(235), 0(291), match_1902(233)>
	Argument #0: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
	Argument #1: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
	Argument #2: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
	Argument #5: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
PHI node match_7 copy-of chain: match_7 -> match_1801 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: best_te_19 = PHI <best_te_568(229), best_te_1899(234), best_te_1899(228), best_te_1899(235), best_te_1899(291), best_te_1899(233)>
	Argument #0: best_te_568 copy-of chain: best_te_568 [NOT A COPY]
	Argument #1: best_te_1899 copy-of chain: best_te_1899 -> best_te_681 [COPY]
PHI node best_te_19 copy-of chain: best_te_19 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: cng_pt_24 = PHI <cng_pt_1668(229), cng_pt_573(234), cng_pt_1668(228), cng_pt_1668(235), cng_pt_1668(291), cng_pt_573(233)>
	Argument #0: cng_pt_1668 copy-of chain: cng_pt_1668 -> cng_pt_1718 [COPY]
	Argument #1: cng_pt_573 copy-of chain: cng_pt_573 [NOT A COPY]
PHI node cng_pt_24 copy-of chain: cng_pt_24 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>
	Argument #0: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #1: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #2: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #5: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
PHI node codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_477 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
	Argument #0: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #1: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #2: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #5: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 -> m_idx_1870 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
	Argument #0: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #1: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #2: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #5: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_1750 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (map_712 != 0B)

No interesting values produced.
Adding Destination of edge (293 -> 294) to worklist

Adding Destination of edge (293 -> 295) to worklist


Simulating statement (from ssa_edges): cng_pt_1668 = PHI <cng_pt_24(294), cng_pt_1718(223)>

Visiting PHI node: cng_pt_1668 = PHI <cng_pt_24(294), cng_pt_1718(223)>
	Argument #1: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
PHI node cng_pt_1668 copy-of chain: cng_pt_1668 -> cng_pt_1718 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): best_te_1899 = PHI <best_te_19(294), best_te_681(223)>

Visiting PHI node: best_te_1899 = PHI <best_te_19(294), best_te_681(223)>
	Argument #1: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
PHI node best_te_1899 copy-of chain: best_te_1899 -> best_te_681 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_1756 = PHI <nm_idx_117(294), nm_idx_1750(223)>

Visiting PHI node: nm_idx_1756 = PHI <nm_idx_117(294), nm_idx_1750(223)>
	Argument #1: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
PHI node nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_793 = PHI <m_idx_103(294), m_idx_1870(223)>

Visiting PHI node: m_idx_793 = PHI <m_idx_103(294), m_idx_1870(223)>
	Argument #1: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
PHI node m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_1721 = PHI <codec_ms_91(294), codec_ms_477(223)>

Visiting PHI node: codec_ms_1721 = PHI <codec_ms_91(294), codec_ms_477(223)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_1902 = PHI <match_7(294), match_1801(223)>

Visiting PHI node: match_1902 = PHI <match_7(294), match_1801(223)>
	Argument #1: match_1801 copy-of chain: match_1801 [NOT A COPY]
PHI node match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 294
Adding Destination of edge (294 -> 224) to worklist


Simulating block 439
Adding Destination of edge (439 -> 440) to worklist


Simulating block 387

Visiting statement:
if (D.45169_908 == 0)

No interesting values produced.
Adding Destination of edge (387 -> 388) to worklist

Adding Destination of edge (387 -> 393) to worklist


Simulating block 388

Visiting statement:
if (D.44619_909 != 0B)

No interesting values produced.
Adding Destination of edge (388 -> 389) to worklist


Simulating block 389

Visiting statement:
if (D.45175_912 == 49)

No interesting values produced.
Adding Destination of edge (389 -> 390) to worklist


Simulating block 390

Visiting statement:
if (D.45186_922 == 0)

No interesting values produced.
Adding Destination of edge (390 -> 391) to worklist


Simulating block 391

Visiting statement:
if (D.45215_959 == 0B)

No interesting values produced.
Adding Destination of edge (391 -> 392) to worklist

Adding Destination of edge (391 -> 410) to worklist


Simulating block 392

Simulating block 386

Simulating block 412
Adding Destination of edge (412 -> 413) to worklist


Simulating block 380

Simulating block 202

Visiting statement:
if (D.49725_1592 == 0)

No interesting values produced.
Adding Destination of edge (202 -> 210) to worklist

Adding Destination of edge (202 -> 203) to worklist


Simulating block 203

Visiting statement:
if (D.49726_1593 == 0)

No interesting values produced.
Adding Destination of edge (203 -> 204) to worklist


Simulating block 204

Visiting statement:
if (D.49727_1594 == 0)

No interesting values produced.
Adding Destination of edge (204 -> 205) to worklist


Simulating block 205

Visiting statement:
if (D.49728_1595 == 0)

No interesting values produced.
Adding Destination of edge (205 -> 206) to worklist


Simulating block 206

Visiting statement:
if (D.49729_1596 == 0)

No interesting values produced.
Adding Destination of edge (206 -> 207) to worklist


Simulating block 207

Visiting statement:
if (D.49730_1597 == 0)

No interesting values produced.
Adding Destination of edge (207 -> 208) to worklist


Simulating block 208

Visiting statement:
if (D.49731_1598 != 0)

No interesting values produced.
Adding Destination of edge (208 -> 209) to worklist

Adding Destination of edge (208 -> 466) to worklist


Simulating block 209

Visiting statement:
if (D.49732_1599 != 0)

No interesting values produced.

Simulating block 417

Visiting PHI node: m_idx_911 = PHI <m_idx_109(429), m_idx_820(416)>
	Argument #1: m_idx_820 copy-of chain: m_idx_820 [NOT A COPY]
PHI node m_idx_911 copy-of chain: m_idx_911 -> m_idx_820 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: i_865 = PHI <i_1021(429), 0(416)>
PHI node i_865 copy-of chain: i_865 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.45239_987 != 1)

No interesting values produced.
Adding Destination of edge (417 -> 428) to worklist

Adding Destination of edge (417 -> 418) to worklist


Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_911(417), m_idx_911(419), m_idx_911(426), m_idx_911(425), m_idx_1019(427)>

Visiting PHI node: m_idx_109 = PHI <m_idx_911(417), m_idx_911(419), m_idx_911(426), m_idx_911(425), m_idx_1019(427)>
	Argument #0: m_idx_911 copy-of chain: m_idx_911 -> m_idx_820 [COPY]
PHI node m_idx_109 copy-of chain: m_idx_109 -> m_idx_820 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): m_idx_911 = PHI <m_idx_109(429), m_idx_820(416)>

Visiting PHI node: m_idx_911 = PHI <m_idx_109(429), m_idx_820(416)>
	Argument #1: m_idx_820 copy-of chain: m_idx_820 [NOT A COPY]
PHI node m_idx_911 copy-of chain: m_idx_911 -> m_idx_820 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 433
Adding Destination of edge (433 -> 434) to worklist


Simulating block 369

Visiting PHI node: got_video_crypto_556 = PHI <got_video_crypto_961(432), got_video_crypto_1675(368)>
	Argument #0: got_video_crypto_961 copy-of chain: got_video_crypto_961 -> got_video_crypto_1675 [COPY]
	Argument #1: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
PHI node got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1675 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: map_1621 = PHI <map_1022(432), map_884(368)>
	Argument #0: map_1022 copy-of chain: map_1022 [NOT A COPY]
	Argument #1: map_884 copy-of chain: map_884 [NOT A COPY]
PHI node map_1621 copy-of chain: map_1621 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 170

Visiting statement:
if (D.44768_479 != 0)

No interesting values produced.
Adding Destination of edge (170 -> 171) to worklist

Adding Destination of edge (170 -> 172) to worklist


Simulating block 171

Simulating block 457

Simulating block 213

Visiting PHI node: got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
	Argument #0: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #1: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #2: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #3: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #4: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #5: got_crypto_1119 copy-of chain: got_crypto_1119 [NOT A COPY]
	Argument #6: got_crypto_547 copy-of chain: got_crypto_547 [NOT A COPY]
PHI node got_crypto_53 copy-of chain: got_crypto_53 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 467

Simulating block 212

Visiting PHI node: prephitmp.1031_1893 = PHI <D.44619_531(465), pretmp.1034_1640(210), pretmp.1034_1896(467)>
	Argument #0: D.44619_531 copy-of chain: D.44619_531 [NOT A COPY]
	Argument #1: pretmp.1034_1640 copy-of chain: pretmp.1034_1640 [NOT A COPY]
PHI node prephitmp.1031_1893 copy-of chain: prephitmp.1031_1893 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 311

Visiting statement:
if (m_idx_105 != 0)

No interesting values produced.
Adding Destination of edge (311 -> 312) to worklist

Adding Destination of edge (311 -> 334) to worklist


Simulating block 302

Visiting PHI node: near_rate_145 = PHI <near_rate_730(301), near_rate_726(300)>
	Argument #0: near_rate_730 copy-of chain: near_rate_730 [NOT A COPY]
	Argument #1: near_rate_726 copy-of chain: near_rate_726 [NOT A COPY]
PHI node near_rate_145 copy-of chain: near_rate_145 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (num_732 != 0)

No interesting values produced.
Adding Destination of edge (302 -> 303) to worklist

Adding Destination of edge (302 -> 304) to worklist


Simulating block 303

Simulating block 335

Visiting PHI node: match_1713 = PHI <match_12(334), 1(474)>
	Argument #0: match_12 copy-of chain: match_12 [NOT A COPY]
PHI node match_1713 copy-of chain: match_1713 -> match_12 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_1906 = PHI <m_idx_1905(334), m_idx_1716(474)>
	Argument #0: m_idx_1905 copy-of chain: m_idx_1905 [NOT A COPY]
PHI node m_idx_1906 copy-of chain: m_idx_1906 -> m_idx_1905 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_842 = PHI <nm_idx_1745(334), nm_idx_119(474)>
	Argument #0: nm_idx_1745 copy-of chain: nm_idx_1745 [NOT A COPY]
PHI node nm_idx_842 copy-of chain: nm_idx_842 -> nm_idx_1745 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.47934_1490 != 0)

No interesting values produced.
Adding Destination of edge (335 -> 336) to worklist

Adding Destination of edge (335 -> 340) to worklist


Simulating statement (from ssa_edges): nm_idx_844 = PHI <nm_idx_1745(334), nm_idx_842(341), nm_idx_842(340)>

Visiting PHI node: nm_idx_844 = PHI <nm_idx_1745(334), nm_idx_842(341), nm_idx_842(340)>
	Argument #0: nm_idx_1745 copy-of chain: nm_idx_1745 [NOT A COPY]
PHI node nm_idx_844 copy-of chain: nm_idx_844 -> nm_idx_1745 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): m_idx_1746 = PHI <m_idx_1905(334), m_idx_1906(341), m_idx_1906(340)>

Visiting PHI node: m_idx_1746 = PHI <m_idx_1905(334), m_idx_1906(341), m_idx_1906(340)>
	Argument #0: m_idx_1905 copy-of chain: m_idx_1905 [NOT A COPY]
PHI node m_idx_1746 copy-of chain: m_idx_1746 -> m_idx_1905 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): match_13 = PHI <0(334), match_1713(341), 0(340)>

Visiting PHI node: match_13 = PHI <0(334), match_1713(341), 0(340)>
PHI node match_13 copy-of chain: match_13 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 336

Visiting statement:
if (D.47933_1491 != 0B)

No interesting values produced.
Adding Destination of edge (336 -> 337) to worklist


Simulating statement (from ssa_edges): match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>

Visiting PHI node: match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
	Argument #1: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #2: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #3: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #11: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #12: match_1801 copy-of chain: match_1801 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_1801 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 337

Visiting statement:
if (D.47932_1492 != 0B)

No interesting values produced.
Adding Destination of edge (337 -> 338) to worklist


Simulating block 338

Visiting statement:
if (D.47931_1493 != 0B)

No interesting values produced.
Adding Destination of edge (338 -> 339) to worklist


Simulating block 339

Simulating block 342

Visiting PHI node: got_audio_65 = PHI <0(334), 1(341), 0(340)>
PHI node got_audio_65 copy-of chain: got_audio_65 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_1746 = PHI <m_idx_1905(334), m_idx_1906(341), m_idx_1906(340)>
	Argument #0: m_idx_1905 copy-of chain: m_idx_1905 [NOT A COPY]
PHI node m_idx_1746 copy-of chain: m_idx_1746 -> m_idx_1905 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_844 = PHI <nm_idx_1745(334), nm_idx_842(341), nm_idx_842(340)>
	Argument #0: nm_idx_1745 copy-of chain: nm_idx_1745 [NOT A COPY]
PHI node nm_idx_844 copy-of chain: nm_idx_844 -> nm_idx_1745 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (best_te_1625 == 0)

No interesting values produced.
Adding Destination of edge (342 -> 343) to worklist

Adding Destination of edge (342 -> 346) to worklist


Simulating statement (from ssa_edges): got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>

Visiting PHI node: got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
	Argument #1: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #2: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #3: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #11: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #12: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 -> got_audio_1694 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 343

Visiting statement:
if (D.45108_827 != 0)

No interesting values produced.
Adding Destination of edge (343 -> 345) to worklist

Adding Destination of edge (343 -> 344) to worklist


Simulating block 344

Visiting statement:
if (D.45110_829 != 0)

No interesting values produced.
Adding Destination of edge (344 -> 351) to worklist


Simulating block 345

Visiting statement:
if (best_te_834 != 0)

No interesting values produced.

Simulating block 235

Visiting statement:
if (match_1902 != 0)

No interesting values produced.
Adding Destination of edge (235 -> 293) to worklist

Adding Destination of edge (235 -> 236) to worklist


Simulating block 295
Adding Destination of edge (295 -> 296) to worklist


Simulating block 224

Visiting PHI node: match_1902 = PHI <match_7(294), match_1801(223)>
	Argument #0: match_7 copy-of chain: match_7 -> match_1801 [COPY]
	Argument #1: match_1801 copy-of chain: match_1801 [NOT A COPY]
PHI node match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: best_te_1899 = PHI <best_te_19(294), best_te_681(223)>
	Argument #0: best_te_19 copy-of chain: best_te_19 [NOT A COPY]
	Argument #1: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
PHI node best_te_1899 copy-of chain: best_te_1899 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: cng_pt_1668 = PHI <cng_pt_24(294), cng_pt_1718(223)>
	Argument #0: cng_pt_24 copy-of chain: cng_pt_24 [NOT A COPY]
	Argument #1: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
PHI node cng_pt_1668 copy-of chain: cng_pt_1668 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_1721 = PHI <codec_ms_91(294), codec_ms_477(223)>
	Argument #0: codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_477 [COPY]
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_793 = PHI <m_idx_103(294), m_idx_1870(223)>
	Argument #0: m_idx_103 copy-of chain: m_idx_103 -> m_idx_1870 [COPY]
	Argument #1: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
PHI node m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_1756 = PHI <nm_idx_117(294), nm_idx_1750(223)>
	Argument #0: nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_1750 [COPY]
	Argument #1: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
PHI node nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: map_1729 = PHI <map_712(294), map_559(223)>
	Argument #0: map_712 copy-of chain: map_712 [NOT A COPY]
	Argument #1: map_559 copy-of chain: map_559 [NOT A COPY]
PHI node map_1729 copy-of chain: map_1729 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 440

Visiting PHI node: j_1845 = PHI <j_1068(444), 0(439)>
PHI node j_1845 copy-of chain: j_1845 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (j_1845 == 0)

No interesting values produced.
Adding Destination of edge (440 -> 441) to worklist

Adding Destination of edge (440 -> 443) to worklist


Simulating block 441

Visiting statement:
if (D.45288_1047 != 0B)

No interesting values produced.
Adding Destination of edge (441 -> 442) to worklist


Simulating block 442

Simulating block 393

Visiting statement:
if (got_video_crypto_1886 == 0)

No interesting values produced.
Adding Destination of edge (393 -> 394) to worklist


Simulating block 394

Visiting statement:
if (D.45220_962 == 0)

No interesting values produced.
Adding Destination of edge (394 -> 395) to worklist


Simulating block 395

Visiting statement:
if (D.44619_963 == 0B)

No interesting values produced.
Adding Destination of edge (395 -> 396) to worklist


Simulating block 396

Visiting statement:
if (D.47951_1501 == 0)

No interesting values produced.
Adding Destination of edge (396 -> 477) to worklist


Simulating block 477

Visiting statement:
if (D.44822_967 == 0)

No interesting values produced.
Adding Destination of edge (477 -> 397) to worklist

Adding Destination of edge (477 -> 409) to worklist


Simulating block 397

Visiting statement:
if (D.45228_969 != 0B)

No interesting values produced.
Adding Destination of edge (397 -> 398) to worklist

Adding Destination of edge (397 -> 478) to worklist


Simulating block 398

Visiting statement:
if (D.49748_1611 == 0)

No interesting values produced.
Adding Destination of edge (398 -> 407) to worklist

Adding Destination of edge (398 -> 399) to worklist


Simulating block 399

Visiting statement:
if (D.49749_1612 == 0)

No interesting values produced.
Adding Destination of edge (399 -> 400) to worklist


Simulating block 400

Visiting statement:
if (D.49750_1613 == 0)

No interesting values produced.
Adding Destination of edge (400 -> 401) to worklist


Simulating block 401

Visiting statement:
if (D.49751_1614 == 0)

No interesting values produced.
Adding Destination of edge (401 -> 402) to worklist


Simulating block 402

Visiting statement:
if (D.49752_1615 == 0)

No interesting values produced.
Adding Destination of edge (402 -> 403) to worklist


Simulating block 403

Visiting statement:
if (D.49753_1616 == 0)

No interesting values produced.
Adding Destination of edge (403 -> 404) to worklist


Simulating block 404

Visiting statement:
if (D.49754_1617 == 0)

No interesting values produced.
Adding Destination of edge (404 -> 405) to worklist


Simulating block 405

Visiting statement:
if (D.49755_1618 != 0)

No interesting values produced.
Adding Destination of edge (405 -> 406) to worklist


Simulating block 406

Visiting statement:
if (D.49756_1619 != 0)

No interesting values produced.

Simulating block 407

Simulating block 410

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
	Argument #0: got_video_crypto_1886 copy-of chain: got_video_crypto_1886 [NOT A COPY]
	Argument #1: got_video_crypto_1886 copy-of chain: got_video_crypto_1886 [NOT A COPY]
	Argument #2: got_video_crypto_1886 copy-of chain: got_video_crypto_1886 [NOT A COPY]
	Argument #3: got_video_crypto_1886 copy-of chain: got_video_crypto_1886 [NOT A COPY]
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 413

Visiting PHI node: got_video_crypto_961 = PHI <got_video_crypto_1804(412), got_video_crypto_556(379), got_video_crypto_556(371)>
	Argument #0: got_video_crypto_1804 copy-of chain: got_video_crypto_1804 [NOT A COPY]
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1675 [COPY]
PHI node got_video_crypto_961 copy-of chain: got_video_crypto_961 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_video_crypto_556 = PHI <got_video_crypto_961(432), got_video_crypto_1675(368)>

Visiting PHI node: got_video_crypto_556 = PHI <got_video_crypto_961(432), got_video_crypto_1675(368)>
	Argument #0: got_video_crypto_961 copy-of chain: got_video_crypto_961 [NOT A COPY]
	Argument #1: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
PHI node got_video_crypto_556 copy-of chain: got_video_crypto_556 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 210

Simulating block 466

Simulating block 428

Visiting PHI node: m_idx_109 = PHI <m_idx_911(417), m_idx_911(419), m_idx_911(426), m_idx_911(425), m_idx_1019(427)>
	Argument #0: m_idx_911 copy-of chain: m_idx_911 -> m_idx_820 [COPY]
PHI node m_idx_109 copy-of chain: m_idx_109 -> m_idx_820 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (total_codecs_85 > i_1021)

Trying to determine truth value of predicate if (total_codecs_85 > i_1021)
No interesting values produced.
Adding Destination of edge (428 -> 429) to worklist

Adding Destination of edge (428 -> 430) to worklist


Simulating block 418

Visiting statement:
if (D.45242_989 == 0)

No interesting values produced.
Adding Destination of edge (418 -> 419) to worklist

Adding Destination of edge (418 -> 420) to worklist


Simulating block 419

Visiting statement:
if (D.45245_991 != 0)

No interesting values produced.
Adding Destination of edge (419 -> 428) to worklist


Simulating block 434

Visiting PHI node: got_video_crypto_960 = PHI <got_video_crypto_1789(433), got_video_crypto_1675(367)>
	Argument #0: got_video_crypto_1789 copy-of chain: got_video_crypto_1789 [NOT A COPY]
	Argument #1: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
PHI node got_video_crypto_960 copy-of chain: got_video_crypto_960 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
	Argument #1: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
	Argument #2: got_video_crypto_1675 copy-of chain: got_video_crypto_1675 [NOT A COPY]
	Argument #3: got_video_crypto_960 copy-of chain: got_video_crypto_960 [NOT A COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 172

Simulating block 312

Visiting PHI node: m_idx_1716 = PHI <m_idx_105(311), 1(308)>
	Argument #0: m_idx_105 copy-of chain: m_idx_105 -> m_idx_1870 [COPY]
PHI node m_idx_1716 copy-of chain: m_idx_1716 -> m_idx_1870 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (greedy_47 != 0)

No interesting values produced.
Adding Destination of edge (312 -> 313) to worklist

Adding Destination of edge (312 -> 314) to worklist


Simulating statement (from ssa_edges): m_idx_1906 = PHI <m_idx_1905(334), m_idx_1716(474)>

Visiting PHI node: m_idx_1906 = PHI <m_idx_1905(334), m_idx_1716(474)>
	Argument #0: m_idx_1905 copy-of chain: m_idx_1905 [NOT A COPY]
PHI node m_idx_1906 copy-of chain: m_idx_1906 -> m_idx_1905 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (m_idx_1716 > 0)

Simulating statement (from ssa_edges): if (j_808 < m_idx_1716)

Simulating block 313

Simulating block 334

Simulating block 304

Visiting PHI node: timp_134 = PHI <timp_733(303), near_match_727(302)>
	Argument #0: timp_733 copy-of chain: timp_733 [NOT A COPY]
	Argument #1: near_match_727 copy-of chain: near_match_727 [NOT A COPY]
PHI node timp_134 copy-of chain: timp_134 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (maxptime_1041 == 0)

No interesting values produced.
Adding Destination of edge (304 -> 305) to worklist

Adding Destination of edge (304 -> 306) to worklist


Simulating block 305
Adding Destination of edge (305 -> 308) to worklist


Simulating block 308

Visiting PHI node: prephitmp.1039_858 = PHI <pretmp.1038_847(305), D.45026_1795(307)>
	Argument #0: pretmp.1038_847 copy-of chain: pretmp.1038_847 [NOT A COPY]
PHI node prephitmp.1039_858 copy-of chain: prephitmp.1039_858 -> pretmp.1038_847 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: timp_1786 = PHI <timp_330(305), timp_1800(307)>
	Argument #0: timp_330 copy-of chain: timp_330 [NOT A COPY]
PHI node timp_1786 copy-of chain: timp_1786 -> timp_330 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: near_rate.96_617 = PHI <near_rate.96_1798(305), near_rate.96_1797(307)>
	Argument #0: near_rate.96_1798 copy-of chain: near_rate.96_1798 [NOT A COPY]
PHI node near_rate.96_617 copy-of chain: near_rate.96_617 -> near_rate.96_1798 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: near_map_1788 = PHI <near_map_1731(305), near_map_1707(307)>
	Argument #0: near_map_1731 copy-of chain: near_map_1731 [NOT A COPY]
PHI node near_map_1788 copy-of chain: near_map_1788 -> near_map_1731 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: j_1787 = PHI <j_1767(305), j_1705(307)>
	Argument #0: j_1767 copy-of chain: j_1767 [NOT A COPY]
PHI node j_1787 copy-of chain: j_1787 -> j_1767 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (308 -> 312) to worklist


Simulating block 312

Visiting PHI node: m_idx_1716 = PHI <m_idx_105(311), 1(308)>
	Argument #0: m_idx_105 copy-of chain: m_idx_105 -> m_idx_1870 [COPY]
PHI node m_idx_1716 copy-of chain: m_idx_1716 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_1906 = PHI <m_idx_1905(334), m_idx_1716(474)>

Visiting PHI node: m_idx_1906 = PHI <m_idx_1905(334), m_idx_1716(474)>
	Argument #0: m_idx_1905 copy-of chain: m_idx_1905 [NOT A COPY]
PHI node m_idx_1906 copy-of chain: m_idx_1906 -> m_idx_1905 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (m_idx_1716 > 0)

Simulating statement (from ssa_edges): if (j_808 < m_idx_1716)

Simulating block 340

Visiting statement:
if (D.45100_824 == 0)

No interesting values produced.
Adding Destination of edge (340 -> 341) to worklist

Adding Destination of edge (340 -> 342) to worklist


Simulating block 341

Simulating block 346

Visiting PHI node: best_te_1861 = PHI <best_te_834(345), best_te_1625(342)>
	Argument #0: best_te_834 copy-of chain: best_te_834 [NOT A COPY]
	Argument #1: best_te_1625 copy-of chain: best_te_1625 -> best_te_681 [COPY]
PHI node best_te_1861 copy-of chain: best_te_1861 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.45115_835 == 1)

No interesting values produced.
Adding Destination of edge (346 -> 347) to worklist

Adding Destination of edge (346 -> 349) to worklist


Simulating statement (from ssa_edges): best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>

Visiting PHI node: best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
	Argument #1: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #2: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #3: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #11: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #12: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 -> best_te_681 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 347

Visiting statement:
if (D.44605_841 != 0B)

No interesting values produced.
Adding Destination of edge (347 -> 348) to worklist

Adding Destination of edge (347 -> 454) to worklist


Simulating block 348

Simulating block 351

Visiting statement:
if (D.45125_859 != 0B)

No interesting values produced.
Adding Destination of edge (351 -> 352) to worklist

Adding Destination of edge (351 -> 475) to worklist


Simulating block 352

Visiting statement:
if (D.49736_1601 == 0)

No interesting values produced.
Adding Destination of edge (352 -> 361) to worklist

Adding Destination of edge (352 -> 353) to worklist


Simulating block 353

Visiting statement:
if (D.49737_1602 == 0)

No interesting values produced.
Adding Destination of edge (353 -> 354) to worklist


Simulating block 354

Visiting statement:
if (D.49738_1603 == 0)

No interesting values produced.
Adding Destination of edge (354 -> 355) to worklist


Simulating block 355

Visiting statement:
if (D.49739_1604 == 0)

No interesting values produced.
Adding Destination of edge (355 -> 356) to worklist


Simulating block 356

Visiting statement:
if (D.49740_1605 == 0)

No interesting values produced.
Adding Destination of edge (356 -> 357) to worklist


Simulating block 357

Visiting statement:
if (D.49741_1606 == 0)

No interesting values produced.
Adding Destination of edge (357 -> 358) to worklist


Simulating block 358

Visiting statement:
if (D.49742_1607 == 0)

No interesting values produced.
Adding Destination of edge (358 -> 359) to worklist


Simulating block 359

Visiting statement:
if (D.49743_1608 != 0)

No interesting values produced.
Adding Destination of edge (359 -> 360) to worklist


Simulating block 360

Visiting statement:
if (D.49744_1609 == 0)

No interesting values produced.

Simulating block 293

Visiting PHI node: match_7 = PHI <match_1902(229), match_1902(234), match_1902(228), match_1902(235), 0(291), match_1902(233)>
	Argument #0: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
	Argument #1: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
	Argument #2: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
	Argument #3: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
	Argument #5: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
PHI node match_7 copy-of chain: match_7 -> match_1801 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>
	Argument #0: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #1: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #2: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #3: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #5: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
PHI node codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
	Argument #0: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #1: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #2: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #3: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #5: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 -> m_idx_1870 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
	Argument #0: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #1: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #2: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #3: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #5: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_1750 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 236

Visiting statement:
if (maxptime_1041 != 0)

No interesting values produced.
Adding Destination of edge (236 -> 237) to worklist

Adding Destination of edge (236 -> 238) to worklist


Simulating block 237

Visiting statement:
if (D.44879_584 != 0)

No interesting values produced.
Adding Destination of edge (237 -> 468) to worklist

Adding Destination of edge (237 -> 469) to worklist


Simulating block 468

Simulating block 296

Visiting PHI node: match_9 = PHI <1(287), match_1892(295), 0(292), match_1801(222)>
	Argument #1: match_1892 copy-of chain: match_1892 [NOT A COPY]
	Argument #3: match_1801 copy-of chain: match_1801 [NOT A COPY]
PHI node match_9 copy-of chain: match_9 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_93 = PHI <codec_ms_1734(287), codec_ms_1803(295), codec_ms_1710(292), codec_ms_477(222)>
	Argument #1: codec_ms_1803 copy-of chain: codec_ms_1803 [NOT A COPY]
	Argument #3: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_93 copy-of chain: codec_ms_93 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_105 = PHI <m_idx_1799(287), m_idx_1802(295), m_idx_529(292), m_idx_1870(222)>
	Argument #1: m_idx_1802 copy-of chain: m_idx_1802 [NOT A COPY]
	Argument #3: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
PHI node m_idx_105 copy-of chain: m_idx_105 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_119 = PHI <nm_idx_1708(287), nm_idx_683(295), nm_idx_1793(292), nm_idx_1750(222)>
	Argument #1: nm_idx_683 copy-of chain: nm_idx_683 [NOT A COPY]
	Argument #3: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
PHI node nm_idx_119 copy-of chain: nm_idx_119 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: best_te_1625 = PHI <best_te_1730(287), best_te_1685(295), best_te_652(292), best_te_681(222)>
	Argument #1: best_te_1685 copy-of chain: best_te_1685 [NOT A COPY]
	Argument #3: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
PHI node best_te_1625 copy-of chain: best_te_1625 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: cng_pt_1627 = PHI <cng_pt_1706(287), cng_pt_1682(295), cng_pt_1732(292), cng_pt_1718(222)>
	Argument #1: cng_pt_1682 copy-of chain: cng_pt_1682 [NOT A COPY]
	Argument #3: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
PHI node cng_pt_1627 copy-of chain: cng_pt_1627 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>

Visiting PHI node: cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
	Argument #1: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #2: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #3: cng_pt_1718 copy-of chain: cng_pt_1718 [NOT A COPY]
	Argument #8: cng_pt_1627 copy-of chain: cng_pt_1627 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (nm_idx_119 > j_737)

Simulating statement (from ssa_edges): nm_idx_842 = PHI <nm_idx_1745(334), nm_idx_119(474)>

Visiting PHI node: nm_idx_842 = PHI <nm_idx_1745(334), nm_idx_119(474)>
	Argument #0: nm_idx_1745 copy-of chain: nm_idx_1745 [NOT A COPY]
PHI node nm_idx_842 copy-of chain: nm_idx_842 -> nm_idx_1745 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>

Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #2: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #3: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #8: codec_ms_93 copy-of chain: codec_ms_93 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 443

Visiting statement:
if (m_idx_907 > j_1068)

Trying to determine truth value of predicate if (m_idx_907 > j_1068)
No interesting values produced.
Adding Destination of edge (443 -> 444) to worklist

Adding Destination of edge (443 -> 445) to worklist


Simulating block 444
Adding Destination of edge (444 -> 440) to worklist


Simulating block 440

Simulating block 409

Visiting PHI node: prephitmp.1031_1813 = PHI <D.44619_963(477), pretmp.1030_1890(407), pretmp.1030_1891(479)>
	Argument #0: D.44619_963 copy-of chain: D.44619_963 [NOT A COPY]
	Argument #1: pretmp.1030_1890 copy-of chain: pretmp.1030_1890 [NOT A COPY]
PHI node prephitmp.1031_1813 copy-of chain: prephitmp.1031_1813 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.

Adding Destination of edge (409 -> 410) to worklist


Simulating block 478

Visiting statement:
if (D.44831_974 != 0)

No interesting values produced.
Adding Destination of edge (478 -> 408) to worklist

Adding Destination of edge (478 -> 479) to worklist


Simulating block 429
Adding Destination of edge (429 -> 417) to worklist


Simulating block 430
Adding Destination of edge (430 -> 431) to worklist


Simulating block 420

Visiting statement:
if (D.45256_997 == 0B)

No interesting values produced.
Adding Destination of edge (420 -> 422) to worklist

Adding Destination of edge (420 -> 421) to worklist


Simulating block 421

Visiting statement:
if (D.47958_1504 == 0)

No interesting values produced.
Adding Destination of edge (421 -> 480) to worklist


Simulating block 480

Visiting statement:
if (D.44938_1002 != 0)

No interesting values produced.
Adding Destination of edge (480 -> 424) to worklist


Simulating block 424
Adding Destination of edge (424 -> 425) to worklist


Simulating block 425

Visiting PHI node: vmatch_138 = PHI <vmatch_1010(423), vmatch_1013(424)>
	Argument #1: vmatch_1013 copy-of chain: vmatch_1013 [NOT A COPY]
PHI node vmatch_138 copy-of chain: vmatch_138 -> vmatch_1013 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (vmatch_138 != 0)

No interesting values produced.
Adding Destination of edge (425 -> 426) to worklist


Simulating block 426

Visiting statement:
if (D.45263_1014 == D.45264_1015)

Trying to determine truth value of predicate if (D.45263_1014 == D.45264_1015)
No interesting values produced.
Adding Destination of edge (426 -> 427) to worklist


Simulating block 427

Simulating block 422

Visiting statement:
if (D.45249_1005 <= 95)

No interesting values produced.
Adding Destination of edge (422 -> 423) to worklist

Adding Destination of edge (422 -> 424) to worklist


Simulating block 423
Adding Destination of edge (423 -> 425) to worklist


Simulating block 425

Visiting PHI node: vmatch_138 = PHI <vmatch_1010(423), vmatch_1013(424)>
	Argument #0: vmatch_1010 copy-of chain: vmatch_1010 [NOT A COPY]
	Argument #1: vmatch_1013 copy-of chain: vmatch_1013 [NOT A COPY]
PHI node vmatch_138 copy-of chain: vmatch_138 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 428

Visiting PHI node: m_idx_109 = PHI <m_idx_911(417), m_idx_911(419), m_idx_911(426), m_idx_911(425), m_idx_1019(427)>
	Argument #0: m_idx_911 copy-of chain: m_idx_911 -> m_idx_820 [COPY]
	Argument #1: m_idx_911 copy-of chain: m_idx_911 -> m_idx_820 [COPY]
	Argument #2: m_idx_911 copy-of chain: m_idx_911 -> m_idx_820 [COPY]
	Argument #3: m_idx_911 copy-of chain: m_idx_911 -> m_idx_820 [COPY]
	Argument #4: m_idx_1019 copy-of chain: m_idx_1019 [NOT A COPY]
PHI node m_idx_109 copy-of chain: m_idx_109 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_911 = PHI <m_idx_109(429), m_idx_820(416)>

Visiting PHI node: m_idx_911 = PHI <m_idx_109(429), m_idx_820(416)>
	Argument #0: m_idx_109 copy-of chain: m_idx_109 [NOT A COPY]
	Argument #1: m_idx_820 copy-of chain: m_idx_820 [NOT A COPY]
PHI node m_idx_911 copy-of chain: m_idx_911 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 314

Visiting statement:
if (m_idx_1716 > 0)

No interesting values produced.
Adding Destination of edge (314 -> 315) to worklist

Adding Destination of edge (314 -> 474) to worklist


Simulating block 306

Visiting statement:
if (D.45026_736 <= maxptime_1041)

Trying to determine truth value of predicate if (D.45026_736 <= maxptime_1041)
No interesting values produced.
Adding Destination of edge (306 -> 307) to worklist

Adding Destination of edge (306 -> 309) to worklist


Simulating block 307
Adding Destination of edge (307 -> 308) to worklist


Simulating block 308

Visiting PHI node: prephitmp.1039_858 = PHI <pretmp.1038_847(305), D.45026_1795(307)>
	Argument #0: pretmp.1038_847 copy-of chain: pretmp.1038_847 [NOT A COPY]
	Argument #1: D.45026_1795 copy-of chain: D.45026_1795 [NOT A COPY]
PHI node prephitmp.1039_858 copy-of chain: prephitmp.1039_858 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: timp_1786 = PHI <timp_330(305), timp_1800(307)>
	Argument #0: timp_330 copy-of chain: timp_330 [NOT A COPY]
	Argument #1: timp_1800 copy-of chain: timp_1800 [NOT A COPY]
PHI node timp_1786 copy-of chain: timp_1786 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: near_rate.96_617 = PHI <near_rate.96_1798(305), near_rate.96_1797(307)>
	Argument #0: near_rate.96_1798 copy-of chain: near_rate.96_1798 [NOT A COPY]
	Argument #1: near_rate.96_1797 copy-of chain: near_rate.96_1797 [NOT A COPY]
PHI node near_rate.96_617 copy-of chain: near_rate.96_617 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: near_map_1788 = PHI <near_map_1731(305), near_map_1707(307)>
	Argument #0: near_map_1731 copy-of chain: near_map_1731 [NOT A COPY]
	Argument #1: near_map_1707 copy-of chain: near_map_1707 [NOT A COPY]
PHI node near_map_1788 copy-of chain: near_map_1788 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: j_1787 = PHI <j_1767(305), j_1705(307)>
	Argument #0: j_1767 copy-of chain: j_1767 [NOT A COPY]
	Argument #1: j_1705 copy-of chain: j_1705 [NOT A COPY]
PHI node j_1787 copy-of chain: j_1787 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 342

Visiting PHI node: m_idx_1746 = PHI <m_idx_1905(334), m_idx_1906(341), m_idx_1906(340)>
	Argument #0: m_idx_1905 copy-of chain: m_idx_1905 [NOT A COPY]
	Argument #1: m_idx_1906 copy-of chain: m_idx_1906 -> m_idx_1905 [COPY]
	Argument #2: m_idx_1906 copy-of chain: m_idx_1906 -> m_idx_1905 [COPY]
PHI node m_idx_1746 copy-of chain: m_idx_1746 -> m_idx_1905 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_844 = PHI <nm_idx_1745(334), nm_idx_842(341), nm_idx_842(340)>
	Argument #0: nm_idx_1745 copy-of chain: nm_idx_1745 [NOT A COPY]
	Argument #1: nm_idx_842 copy-of chain: nm_idx_842 -> nm_idx_1745 [COPY]
	Argument #2: nm_idx_842 copy-of chain: nm_idx_842 -> nm_idx_1745 [COPY]
PHI node nm_idx_844 copy-of chain: nm_idx_844 -> nm_idx_1745 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 349

Visiting statement:
if (D.44605_852 != 0B)

No interesting values produced.
Adding Destination of edge (349 -> 350) to worklist


Simulating block 350

Simulating block 454

Visiting PHI node: match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
	Argument #1: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #2: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #3: match_1801 copy-of chain: match_1801 [NOT A COPY]
	Argument #6: match_13 copy-of chain: match_13 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
	Argument #1: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #2: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #3: best_te_681 copy-of chain: best_te_681 [NOT A COPY]
	Argument #6: best_te_1861 copy-of chain: best_te_1861 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
	Argument #1: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #2: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #3: got_crypto_1867 copy-of chain: got_crypto_1867 [NOT A COPY]
	Argument #6: got_crypto_970 copy-of chain: got_crypto_970 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
	Argument #1: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #2: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #3: got_audio_1694 copy-of chain: got_audio_1694 [NOT A COPY]
	Argument #6: got_audio_65 copy-of chain: got_audio_65 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 475
Adding Destination of edge (475 -> 454) to worklist


Simulating block 361

Simulating block 238

Visiting statement:
if (ptime_1034 == 0)

No interesting values produced.
Adding Destination of edge (238 -> 239) to worklist

Adding Destination of edge (238 -> 240) to worklist


Simulating block 239

Simulating block 469

Visiting PHI node: codec_ms_1884 = PHI <maxptime_1041(468), ptime_1034(237)>
	Argument #0: maxptime_1041 copy-of chain: maxptime_1041 [NOT A COPY]
	Argument #1: ptime_1034 copy-of chain: ptime_1034 [NOT A COPY]
PHI node codec_ms_1884 copy-of chain: codec_ms_1884 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): codec_ms_87 = PHI <codec_ms_1884(469), codec_ms_589(239), ptime_1034(238)>

Visiting PHI node: codec_ms_87 = PHI <codec_ms_1884(469), codec_ms_589(239), ptime_1034(238)>
	Argument #0: codec_ms_1884 copy-of chain: codec_ms_1884 [NOT A COPY]
	Argument #1: codec_ms_589 copy-of chain: codec_ms_589 [NOT A COPY]
PHI node codec_ms_87 copy-of chain: codec_ms_87 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): codec_ms_88 = PHI <codec_ms_87(242), codec_ms_87(244), 33(243)>

Visiting PHI node: codec_ms_88 = PHI <codec_ms_87(242), codec_ms_87(244), 33(243)>
PHI node codec_ms_88 copy-of chain: codec_ms_88 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 445

Visiting statement:
if (match_1801 == 0)

No interesting values produced.
Adding Destination of edge (445 -> 446) to worklist

Adding Destination of edge (445 -> 447) to worklist


Simulating block 446

Simulating block 410

Simulating block 408
Adding Destination of edge (408 -> 457) to worklist


Simulating block 479
Adding Destination of edge (479 -> 409) to worklist


Simulating block 417

Simulating block 431

Visiting PHI node: m_idx_954 = PHI <m_idx_538(430), m_idx_820(415)>
	Argument #0: m_idx_538 copy-of chain: m_idx_538 [NOT A COPY]
	Argument #1: m_idx_820 copy-of chain: m_idx_820 [NOT A COPY]
PHI node m_idx_954 copy-of chain: m_idx_954 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 424

Simulating block 315
Adding Destination of edge (315 -> 316) to worklist


Simulating block 474
Adding Destination of edge (474 -> 335) to worklist


Simulating block 309

Visiting statement:
if (nm_idx_119 > j_737)

Trying to determine truth value of predicate if (nm_idx_119 > j_737)
No interesting values produced.
Adding Destination of edge (309 -> 310) to worklist

Adding Destination of edge (309 -> 334) to worklist


Simulating block 310
Adding Destination of edge (310 -> 300) to worklist


Simulating block 300

Simulating block 454

Simulating block 240

Visiting statement:
if (csui.173_591 <= 18)

No interesting values produced.
Adding Destination of edge (240 -> 242) to worklist

Adding Destination of edge (240 -> 241) to worklist


Simulating block 241

Simulating block 447

Visiting PHI node: match_14 = PHI <match_1801(445), 1(446)>
	Argument #0: match_1801 copy-of chain: match_1801 [NOT A COPY]
PHI node match_14 copy-of chain: match_14 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.47965_1507 != 0)

No interesting values produced.
Adding Destination of edge (447 -> 448) to worklist

Adding Destination of edge (447 -> 452) to worklist


Simulating block 448

Visiting statement:
if (D.47964_1508 != 0B)

No interesting values produced.
Adding Destination of edge (448 -> 449) to worklist


Simulating block 449

Visiting statement:
if (D.47963_1509 != 0B)

No interesting values produced.
Adding Destination of edge (449 -> 450) to worklist


Simulating block 450

Visiting statement:
if (D.47962_1510 != 0B)

No interesting values produced.
Adding Destination of edge (450 -> 451) to worklist


Simulating block 451

Simulating block 457

Simulating block 409

Simulating block 316

Visiting PHI node: j_1882 = PHI <j_808(333), 0(315)>
PHI node j_1882 copy-of chain: j_1882 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (j_1882 == 0)

No interesting values produced.
Adding Destination of edge (316 -> 317) to worklist

Adding Destination of edge (316 -> 319) to worklist


Simulating block 317

Visiting statement:
if (D.44605_765 != 0B)

No interesting values produced.
Adding Destination of edge (317 -> 318) to worklist


Simulating block 318

Simulating block 335

Visiting PHI node: match_1713 = PHI <match_12(334), 1(474)>
	Argument #0: match_12 copy-of chain: match_12 [NOT A COPY]
PHI node match_1713 copy-of chain: match_1713 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_1906 = PHI <m_idx_1905(334), m_idx_1716(474)>
	Argument #0: m_idx_1905 copy-of chain: m_idx_1905 [NOT A COPY]
	Argument #1: m_idx_1716 copy-of chain: m_idx_1716 [NOT A COPY]
PHI node m_idx_1906 copy-of chain: m_idx_1906 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_842 = PHI <nm_idx_1745(334), nm_idx_119(474)>
	Argument #0: nm_idx_1745 copy-of chain: nm_idx_1745 [NOT A COPY]
	Argument #1: nm_idx_119 copy-of chain: nm_idx_119 [NOT A COPY]
PHI node nm_idx_842 copy-of chain: nm_idx_842 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_844 = PHI <nm_idx_1745(334), nm_idx_842(341), nm_idx_842(340)>

Visiting PHI node: nm_idx_844 = PHI <nm_idx_1745(334), nm_idx_842(341), nm_idx_842(340)>
	Argument #0: nm_idx_1745 copy-of chain: nm_idx_1745 [NOT A COPY]
	Argument #1: nm_idx_842 copy-of chain: nm_idx_842 [NOT A COPY]
PHI node nm_idx_844 copy-of chain: nm_idx_844 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_1746 = PHI <m_idx_1905(334), m_idx_1906(341), m_idx_1906(340)>

Visiting PHI node: m_idx_1746 = PHI <m_idx_1905(334), m_idx_1906(341), m_idx_1906(340)>
	Argument #0: m_idx_1905 copy-of chain: m_idx_1905 [NOT A COPY]
	Argument #1: m_idx_1906 copy-of chain: m_idx_1906 [NOT A COPY]
PHI node m_idx_1746 copy-of chain: m_idx_1746 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 334

Simulating block 242

Visiting PHI node: map_bit_rate_1481 = PHI <0(240), map_bit_rate_1480(241)>
PHI node map_bit_rate_1481 copy-of chain: map_bit_rate_1481 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (ptime_1034 == 0)

No interesting values produced.
Adding Destination of edge (242 -> 243) to worklist

Adding Destination of edge (242 -> 245) to worklist


Simulating statement (from ssa_edges): map_bit_rate_131 = PHI <map_bit_rate_1481(250), map_bit_rate_615(251)>

Visiting PHI node: map_bit_rate_131 = PHI <map_bit_rate_1481(250), map_bit_rate_615(251)>
PHI node map_bit_rate_131 copy-of chain: map_bit_rate_131 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): map_bit_rate_132 = PHI <32001(249), map_bit_rate_1481(470), map_bit_rate_131(255), map_bit_rate_131(254), 13332(247), 32099(248)>

Visiting PHI node: map_bit_rate_132 = PHI <32001(249), map_bit_rate_1481(470), map_bit_rate_131(255), map_bit_rate_131(254), 13332(247), 32099(248)>
PHI node map_bit_rate_132 copy-of chain: map_bit_rate_132 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 243

Visiting statement:
if (D.44890_594 == 0)

No interesting values produced.
Adding Destination of edge (243 -> 244) to worklist


Simulating block 244

Simulating block 452

Visiting statement:
if (D.45317_1093 == 0)

No interesting values produced.
Adding Destination of edge (452 -> 453) to worklist

Adding Destination of edge (452 -> 454) to worklist


Simulating block 453

Simulating block 319

Visiting statement:
if (D.45057_777 != 0)

No interesting values produced.
Adding Destination of edge (319 -> 320) to worklist

Adding Destination of edge (319 -> 321) to worklist


Simulating block 320

Simulating block 245

Visiting PHI node: codec_ms_88 = PHI <codec_ms_87(242), codec_ms_87(244), 33(243)>
	Argument #0: codec_ms_87 copy-of chain: codec_ms_87 [NOT A COPY]
	Argument #1: codec_ms_87 copy-of chain: codec_ms_87 [NOT A COPY]
PHI node codec_ms_88 copy-of chain: codec_ms_88 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44893_598 == 0B)

No interesting values produced.
Adding Destination of edge (245 -> 247) to worklist

Adding Destination of edge (245 -> 246) to worklist


Simulating statement (from ssa_edges): codec_ms_89 = PHI <codec_ms_88(252), codec_ms_618(253)>

Visiting PHI node: codec_ms_89 = PHI <codec_ms_88(252), codec_ms_618(253)>
PHI node codec_ms_89 copy-of chain: codec_ms_89 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_90 = PHI <39(249), codec_ms_88(470), codec_ms_89(255), codec_ms_89(254), 32(247), codec_ms_88(248)>

Visiting PHI node: codec_ms_90 = PHI <39(249), codec_ms_88(470), codec_ms_89(255), codec_ms_89(254), 32(247), codec_ms_88(248)>
PHI node codec_ms_90 copy-of chain: codec_ms_90 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 246

Visiting statement:
if (D.47916_1482 == 0)

No interesting values produced.
Adding Destination of edge (246 -> 470) to worklist


Simulating block 470

Visiting statement:
if (D.44906_612 == 0)

No interesting values produced.
Adding Destination of edge (470 -> 250) to worklist

Adding Destination of edge (470 -> 256) to worklist


Simulating block 250

Visiting statement:
if (D.44909_613 != 0)

No interesting values produced.
Adding Destination of edge (250 -> 251) to worklist

Adding Destination of edge (250 -> 252) to worklist


Simulating block 251

Simulating block 247

Visiting statement:
if (D.44897_601 == 0)

No interesting values produced.
Adding Destination of edge (247 -> 248) to worklist


Simulating block 248

Visiting statement:
if (D.44901_605 == 0)

No interesting values produced.
Adding Destination of edge (248 -> 249) to worklist


Simulating block 249

Simulating block 454

Simulating block 321

Visiting statement:
if (D.45067_784 != 0B)

No interesting values produced.
Adding Destination of edge (321 -> 322) to worklist

Adding Destination of edge (321 -> 323) to worklist


Simulating block 322

Simulating block 256

Visiting PHI node: codec_ms_90 = PHI <39(249), codec_ms_88(470), codec_ms_89(255), codec_ms_89(254), 32(247), codec_ms_88(248)>
PHI node codec_ms_90 copy-of chain: codec_ms_90 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: fmtp_remote_codec_rate_99 = PHI <0(249), 0(470), 0(255), fmtp_remote_codec_rate_619(254), 0(247), 0(248)>
PHI node fmtp_remote_codec_rate_99 copy-of chain: fmtp_remote_codec_rate_99 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: map_bit_rate_132 = PHI <32001(249), map_bit_rate_1481(470), map_bit_rate_131(255), map_bit_rate_131(254), 13332(247), 32099(248)>
PHI node map_bit_rate_132 copy-of chain: map_bit_rate_132 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.45000_1153 != 0)

No interesting values produced.
Adding Destination of edge (256 -> 257) to worklist

Adding Destination of edge (256 -> 291) to worklist


Simulating statement (from ssa_edges): if (fmtp_remote_codec_rate_99 != 0)

Simulating statement (from ssa_edges): remote_codec_rate_96 = PHI <remote_codec_rate_1494(262), remote_codec_rate_1494(267), fmtp_remote_codec_rate_99(268)>

Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_1494(262), remote_codec_rate_1494(267), fmtp_remote_codec_rate_99(268)>
PHI node remote_codec_rate_96 copy-of chain: remote_codec_rate_96 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>

Visiting PHI node: codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>
	Argument #0: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #1: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #2: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #3: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #5: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
PHI node codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 257
Adding Destination of edge (257 -> 258) to worklist


Simulating block 252

Visiting PHI node: map_bit_rate_131 = PHI <map_bit_rate_1481(250), map_bit_rate_615(251)>
	Argument #0: map_bit_rate_1481 copy-of chain: map_bit_rate_1481 [NOT A COPY]
	Argument #1: map_bit_rate_615 copy-of chain: map_bit_rate_615 [NOT A COPY]
PHI node map_bit_rate_131 copy-of chain: map_bit_rate_131 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44912_616 != 0)

No interesting values produced.
Adding Destination of edge (252 -> 253) to worklist

Adding Destination of edge (252 -> 254) to worklist


Simulating block 253

Simulating block 323

Visiting PHI node: D.47923_146 = PHI <D.47923_1486(322), 1(321)>
	Argument #0: D.47923_1486 copy-of chain: D.47923_1486 [NOT A COPY]
PHI node D.47923_146 copy-of chain: D.47923_146 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.45071_789 == 0)

No interesting values produced.
Adding Destination of edge (323 -> 324) to worklist

Adding Destination of edge (323 -> 331) to worklist


Simulating statement (from ssa_edges): if (D.47923_146 == 1)

Simulating block 324

Visiting statement:
if (D.47923_146 == 1)

No interesting values produced.
Adding Destination of edge (324 -> 325) to worklist

Adding Destination of edge (324 -> 326) to worklist


Simulating block 325
Adding Destination of edge (325 -> 327) to worklist


Simulating block 291

Visiting PHI node: m_idx_102 = PHI <m_idx_527(290), m_idx_793(256)>
	Argument #1: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
PHI node m_idx_102 copy-of chain: m_idx_102 -> m_idx_1870 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_902 = PHI <nm_idx_1649(290), nm_idx_1756(256)>
	Argument #1: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
PHI node nm_idx_902 copy-of chain: nm_idx_902 -> nm_idx_1750 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (m_idx_102 > 29)

No interesting values produced.
Adding Destination of edge (291 -> 292) to worklist

Adding Destination of edge (291 -> 293) to worklist


Simulating statement (from ssa_edges): nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>

Visiting PHI node: nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
	Argument #0: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #1: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #2: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #3: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #4: nm_idx_902 copy-of chain: nm_idx_902 -> nm_idx_1750 [COPY]
	Argument #5: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_1750 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>

Visiting PHI node: m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
	Argument #0: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #1: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #2: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #3: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #4: m_idx_102 copy-of chain: m_idx_102 -> m_idx_1870 [COPY]
	Argument #5: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 -> m_idx_1870 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 292
Adding Destination of edge (292 -> 296) to worklist


Simulating block 258

Visiting PHI node: remote_codec_rate_1494 = PHI <remote_codec_rate_97(289), remote_codec_rate_596(257)>
	Argument #1: remote_codec_rate_596 copy-of chain: remote_codec_rate_596 [NOT A COPY]
PHI node remote_codec_rate_1494 copy-of chain: remote_codec_rate_1494 -> remote_codec_rate_596 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_1488 = PHI <m_idx_100(289), m_idx_793(257)>
	Argument #1: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
PHI node m_idx_1488 copy-of chain: m_idx_1488 -> m_idx_1870 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_1140 = PHI <nm_idx_115(289), nm_idx_1756(257)>
	Argument #1: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
PHI node nm_idx_1140 copy-of chain: nm_idx_1140 -> nm_idx_1750 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: i_1623 = PHI <i_711(289), 0(257)>
PHI node i_1623 copy-of chain: i_1623 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44922_634 != 0)

No interesting values produced.
Adding Destination of edge (258 -> 288) to worklist

Adding Destination of edge (258 -> 259) to worklist


Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
	Argument #0: nm_idx_1140 copy-of chain: nm_idx_1140 -> nm_idx_1750 [COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1750 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): nm_idx_1140 = PHI <nm_idx_115(289), nm_idx_1756(257)>

Visiting PHI node: nm_idx_1140 = PHI <nm_idx_115(289), nm_idx_1756(257)>
	Argument #1: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
PHI node nm_idx_1140 copy-of chain: nm_idx_1140 -> nm_idx_1750 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>

Visiting PHI node: m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>
	Argument #0: m_idx_1488 copy-of chain: m_idx_1488 -> m_idx_1870 [COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 -> m_idx_1870 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): m_idx_1488 = PHI <m_idx_100(289), m_idx_793(257)>

Visiting PHI node: m_idx_1488 = PHI <m_idx_100(289), m_idx_793(257)>
	Argument #1: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
PHI node m_idx_1488 copy-of chain: m_idx_1488 -> m_idx_1870 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (remote_codec_rate_1494 == codec_rate_633)

Simulating statement (from ssa_edges): remote_codec_rate_96 = PHI <remote_codec_rate_1494(262), remote_codec_rate_1494(267), fmtp_remote_codec_rate_99(268)>

Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_1494(262), remote_codec_rate_1494(267), fmtp_remote_codec_rate_99(268)>
PHI node remote_codec_rate_96 copy-of chain: remote_codec_rate_96 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
	Argument #0: remote_codec_rate_1494 copy-of chain: remote_codec_rate_1494 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): remote_codec_rate_1494 = PHI <remote_codec_rate_97(289), remote_codec_rate_596(257)>

Visiting PHI node: remote_codec_rate_1494 = PHI <remote_codec_rate_97(289), remote_codec_rate_596(257)>
	Argument #1: remote_codec_rate_596 copy-of chain: remote_codec_rate_596 [NOT A COPY]
PHI node remote_codec_rate_1494 copy-of chain: remote_codec_rate_1494 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 259

Visiting statement:
if (D.44889_643 == 0B)

No interesting values produced.
Adding Destination of edge (259 -> 261) to worklist

Adding Destination of edge (259 -> 260) to worklist


Simulating block 260

Visiting statement:
if (D.47920_1484 == 0)

No interesting values produced.
Adding Destination of edge (260 -> 471) to worklist


Simulating block 471

Visiting statement:
if (D.44938_648 != 0)

No interesting values produced.
Adding Destination of edge (471 -> 263) to worklist


Simulating block 254

Visiting PHI node: codec_ms_89 = PHI <codec_ms_88(252), codec_ms_618(253)>
	Argument #0: codec_ms_88 copy-of chain: codec_ms_88 [NOT A COPY]
	Argument #1: codec_ms_618 copy-of chain: codec_ms_618 [NOT A COPY]
PHI node codec_ms_89 copy-of chain: codec_ms_89 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (fmtp_remote_codec_rate_619 != 0)

No interesting values produced.
Adding Destination of edge (254 -> 256) to worklist

Adding Destination of edge (254 -> 255) to worklist


Simulating block 331
Adding Destination of edge (331 -> 332) to worklist


Simulating block 326

Simulating block 327

Visiting statement:
if (D.45080_791 == 0B)

No interesting values produced.
Adding Destination of edge (327 -> 330) to worklist

Adding Destination of edge (327 -> 328) to worklist


Simulating block 328

Visiting statement:
if (D.47927_1487 == 0)

No interesting values produced.
Adding Destination of edge (328 -> 472) to worklist


Simulating block 472

Visiting statement:
if (D.45083_794 != 0B)

No interesting values produced.
Adding Destination of edge (472 -> 329) to worklist


Simulating block 329

Simulating block 330

Simulating block 293

Visiting PHI node: match_7 = PHI <match_1902(229), match_1902(234), match_1902(228), match_1902(235), 0(291), match_1902(233)>
	Argument #0: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
	Argument #1: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
	Argument #2: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
	Argument #3: match_1902 copy-of chain: match_1902 -> match_1801 [COPY]
PHI node match_7 copy-of chain: match_7 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>
	Argument #0: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #1: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #2: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #3: codec_ms_1721 copy-of chain: codec_ms_1721 -> codec_ms_477 [COPY]
	Argument #4: codec_ms_90 copy-of chain: codec_ms_90 [NOT A COPY]
PHI node codec_ms_91 copy-of chain: codec_ms_91 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
	Argument #0: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #1: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #2: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #3: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #4: m_idx_102 copy-of chain: m_idx_102 -> m_idx_1870 [COPY]
	Argument #5: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 -> m_idx_1870 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
	Argument #0: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #1: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #2: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #3: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #4: nm_idx_902 copy-of chain: nm_idx_902 -> nm_idx_1750 [COPY]
	Argument #5: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_1750 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_1721 = PHI <codec_ms_91(294), codec_ms_477(223)>

Visiting PHI node: codec_ms_1721 = PHI <codec_ms_91(294), codec_ms_477(223)>
	Argument #0: codec_ms_91 copy-of chain: codec_ms_91 [NOT A COPY]
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_1721 copy-of chain: codec_ms_1721 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): match_1902 = PHI <match_7(294), match_1801(223)>

Visiting PHI node: match_1902 = PHI <match_7(294), match_1801(223)>
	Argument #0: match_7 copy-of chain: match_7 [NOT A COPY]
	Argument #1: match_1801 copy-of chain: match_1801 [NOT A COPY]
PHI node match_1902 copy-of chain: match_1902 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 296

Simulating block 288

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
	Argument #0: remote_codec_rate_1494 copy-of chain: remote_codec_rate_1494 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>
	Argument #0: m_idx_1488 copy-of chain: m_idx_1488 -> m_idx_1870 [COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 -> m_idx_1870 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
	Argument #0: nm_idx_1140 copy-of chain: nm_idx_1140 -> nm_idx_1750 [COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1750 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (D.45000_626 != 0)

No interesting values produced.
Adding Destination of edge (288 -> 289) to worklist

Adding Destination of edge (288 -> 290) to worklist


Simulating block 289
Adding Destination of edge (289 -> 258) to worklist


Simulating block 258

Visiting PHI node: remote_codec_rate_1494 = PHI <remote_codec_rate_97(289), remote_codec_rate_596(257)>
	Argument #0: remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
	Argument #1: remote_codec_rate_596 copy-of chain: remote_codec_rate_596 [NOT A COPY]
PHI node remote_codec_rate_1494 copy-of chain: remote_codec_rate_1494 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_1488 = PHI <m_idx_100(289), m_idx_793(257)>
	Argument #0: m_idx_100 copy-of chain: m_idx_100 -> m_idx_1870 [COPY]
	Argument #1: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
PHI node m_idx_1488 copy-of chain: m_idx_1488 -> m_idx_1870 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_1140 = PHI <nm_idx_115(289), nm_idx_1756(257)>
	Argument #0: nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1750 [COPY]
	Argument #1: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
PHI node nm_idx_1140 copy-of chain: nm_idx_1140 -> nm_idx_1750 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 261

Visiting statement:
if (D.44925_651 <= 95)

No interesting values produced.
Adding Destination of edge (261 -> 262) to worklist


Simulating block 262
Adding Destination of edge (262 -> 269) to worklist


Simulating block 263

Visiting statement:
if (D.44945_658 == 0)

No interesting values produced.
Adding Destination of edge (263 -> 264) to worklist

Adding Destination of edge (263 -> 267) to worklist


Simulating block 264

Visiting statement:
if (remote_codec_rate_1494 == codec_rate_633)

Trying to determine truth value of predicate if (remote_codec_rate_1494 == codec_rate_633)
No interesting values produced.
Adding Destination of edge (264 -> 265) to worklist

Adding Destination of edge (264 -> 266) to worklist


Simulating block 265

Simulating block 256

Simulating block 255
Adding Destination of edge (255 -> 256) to worklist


Simulating block 332

Visiting statement:
if (j_808 < m_idx_1716)

Trying to determine truth value of predicate if (j_808 < m_idx_1716)
No interesting values produced.
Adding Destination of edge (332 -> 333) to worklist

Adding Destination of edge (332 -> 473) to worklist


Simulating block 290
Adding Destination of edge (290 -> 291) to worklist


Simulating block 291

Visiting PHI node: m_idx_102 = PHI <m_idx_527(290), m_idx_793(256)>
	Argument #0: m_idx_527 copy-of chain: m_idx_527 [NOT A COPY]
	Argument #1: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
PHI node m_idx_102 copy-of chain: m_idx_102 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_902 = PHI <nm_idx_1649(290), nm_idx_1756(256)>
	Argument #0: nm_idx_1649 copy-of chain: nm_idx_1649 [NOT A COPY]
	Argument #1: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
PHI node nm_idx_902 copy-of chain: nm_idx_902 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>

Visiting PHI node: nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
	Argument #0: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #1: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #2: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #3: nm_idx_1756 copy-of chain: nm_idx_1756 -> nm_idx_1750 [COPY]
	Argument #4: nm_idx_902 copy-of chain: nm_idx_902 [NOT A COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_1756 = PHI <nm_idx_117(294), nm_idx_1750(223)>

Visiting PHI node: nm_idx_1756 = PHI <nm_idx_117(294), nm_idx_1750(223)>
	Argument #0: nm_idx_117 copy-of chain: nm_idx_117 [NOT A COPY]
	Argument #1: nm_idx_1750 copy-of chain: nm_idx_1750 [NOT A COPY]
PHI node nm_idx_1756 copy-of chain: nm_idx_1756 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_1140 = PHI <nm_idx_115(289), nm_idx_1756(257)>

Visiting PHI node: nm_idx_1140 = PHI <nm_idx_115(289), nm_idx_1756(257)>
	Argument #0: nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1750 [COPY]
	Argument #1: nm_idx_1756 copy-of chain: nm_idx_1756 [NOT A COPY]
PHI node nm_idx_1140 copy-of chain: nm_idx_1140 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
	Argument #0: nm_idx_1140 copy-of chain: nm_idx_1140 [NOT A COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1140 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>

Visiting PHI node: m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
	Argument #0: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #1: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #2: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #3: m_idx_793 copy-of chain: m_idx_793 -> m_idx_1870 [COPY]
	Argument #4: m_idx_102 copy-of chain: m_idx_102 [NOT A COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_793 = PHI <m_idx_103(294), m_idx_1870(223)>

Visiting PHI node: m_idx_793 = PHI <m_idx_103(294), m_idx_1870(223)>
	Argument #0: m_idx_103 copy-of chain: m_idx_103 [NOT A COPY]
	Argument #1: m_idx_1870 copy-of chain: m_idx_1870 [NOT A COPY]
PHI node m_idx_793 copy-of chain: m_idx_793 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_1488 = PHI <m_idx_100(289), m_idx_793(257)>

Visiting PHI node: m_idx_1488 = PHI <m_idx_100(289), m_idx_793(257)>
	Argument #0: m_idx_100 copy-of chain: m_idx_100 -> m_idx_1870 [COPY]
	Argument #1: m_idx_793 copy-of chain: m_idx_793 [NOT A COPY]
PHI node m_idx_1488 copy-of chain: m_idx_1488 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>

Visiting PHI node: m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>
	Argument #0: m_idx_1488 copy-of chain: m_idx_1488 [NOT A COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 -> m_idx_1488 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating block 269

Visiting PHI node: match_1 = PHI <match_656(262), prephitmp.1045_1679(267), prephitmp.1045_1679(268)>
	Argument #0: match_656 copy-of chain: match_656 [NOT A COPY]
PHI node match_1 copy-of chain: match_1 -> match_656 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_1494(262), remote_codec_rate_1494(267), fmtp_remote_codec_rate_99(268)>
	Argument #0: remote_codec_rate_1494 copy-of chain: remote_codec_rate_1494 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_96 copy-of chain: remote_codec_rate_96 -> remote_codec_rate_596 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: prephitmp.1055_1808 = PHI <pretmp.1054_1880(262), prephitmp.1047_1680(267), prephitmp.1047_1680(268)>
	Argument #0: pretmp.1054_1880 copy-of chain: pretmp.1054_1880 [NOT A COPY]
PHI node prephitmp.1055_1808 copy-of chain: prephitmp.1055_1808 -> pretmp.1054_1880 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: prephitmp.1055_1807 = PHI <pretmp.1054_1735(262), prephitmp.1047_1678(267), prephitmp.1047_1678(268)>
	Argument #0: pretmp.1054_1735 copy-of chain: pretmp.1054_1735 [NOT A COPY]
PHI node prephitmp.1055_1807 copy-of chain: prephitmp.1055_1807 -> pretmp.1054_1735 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (prephitmp.1055_1807 != 0)

No interesting values produced.
Adding Destination of edge (269 -> 270) to worklist

Adding Destination of edge (269 -> 273) to worklist


Simulating statement (from ssa_edges): prephitmp.1041_750 = PHI <prephitmp.1055_1808(269), 1(270), 1(271), 1(272)>

Visiting PHI node: prephitmp.1041_750 = PHI <prephitmp.1055_1808(269), 1(270), 1(271), 1(272)>
	Argument #0: prephitmp.1055_1808 copy-of chain: prephitmp.1055_1808 -> pretmp.1054_1880 [COPY]
PHI node prephitmp.1041_750 copy-of chain: prephitmp.1041_750 -> pretmp.1054_1880 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (remote_codec_rate_96 != codec_rate_633)

Simulating statement (from ssa_edges): remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
	Argument #0: remote_codec_rate_1494 copy-of chain: remote_codec_rate_1494 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_2 = PHI <match_1(269), 1(270), 1(271), 1(272)>

Visiting PHI node: match_2 = PHI <match_1(269), 1(270), 1(271), 1(272)>
	Argument #0: match_1 copy-of chain: match_1 -> match_656 [COPY]
PHI node match_2 copy-of chain: match_2 -> match_656 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (match_2 != 0)

Simulating block 270

Visiting statement:
if (D.44958_669 != 0)

No interesting values produced.
Adding Destination of edge (270 -> 271) to worklist


Simulating block 271

Visiting statement:
if (D.44961_671 != 0)

No interesting values produced.
Adding Destination of edge (271 -> 272) to worklist


Simulating block 272

Visiting statement:
if (D.44964_673 != 0)

No interesting values produced.
Adding Destination of edge (272 -> 288) to worklist


Simulating block 267

Visiting PHI node: prephitmp.1045_1679 = PHI <pretmp.1044_764(266), 0(263), 1(265)>
PHI node prephitmp.1045_1679 copy-of chain: prephitmp.1045_1679 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: prephitmp.1047_1680 = PHI <pretmp.1046_1736(266), 0(263), 1(265)>
PHI node prephitmp.1047_1680 copy-of chain: prephitmp.1047_1680 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: prephitmp.1047_1678 = PHI <pretmp.1046_790(266), 0(263), pretmp.1046_1812(265)>
PHI node prephitmp.1047_1678 copy-of chain: prephitmp.1047_1678 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (fmtp_remote_codec_rate_99 != 0)

No interesting values produced.
Adding Destination of edge (267 -> 268) to worklist

Adding Destination of edge (267 -> 269) to worklist


Simulating statement (from ssa_edges): prephitmp.1055_1807 = PHI <pretmp.1054_1735(262), prephitmp.1047_1678(267), prephitmp.1047_1678(268)>

Visiting PHI node: prephitmp.1055_1807 = PHI <pretmp.1054_1735(262), prephitmp.1047_1678(267), prephitmp.1047_1678(268)>
	Argument #0: pretmp.1054_1735 copy-of chain: pretmp.1054_1735 [NOT A COPY]
	Argument #1: prephitmp.1047_1678 copy-of chain: prephitmp.1047_1678 [NOT A COPY]
PHI node prephitmp.1055_1807 copy-of chain: prephitmp.1055_1807 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): prephitmp.1055_1808 = PHI <pretmp.1054_1880(262), prephitmp.1047_1680(267), prephitmp.1047_1680(268)>

Visiting PHI node: prephitmp.1055_1808 = PHI <pretmp.1054_1880(262), prephitmp.1047_1680(267), prephitmp.1047_1680(268)>
	Argument #0: pretmp.1054_1880 copy-of chain: pretmp.1054_1880 [NOT A COPY]
	Argument #1: prephitmp.1047_1680 copy-of chain: prephitmp.1047_1680 [NOT A COPY]
PHI node prephitmp.1055_1808 copy-of chain: prephitmp.1055_1808 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): prephitmp.1041_750 = PHI <prephitmp.1055_1808(269), 1(270), 1(271), 1(272)>

Visiting PHI node: prephitmp.1041_750 = PHI <prephitmp.1055_1808(269), 1(270), 1(271), 1(272)>
	Argument #0: prephitmp.1055_1808 copy-of chain: prephitmp.1055_1808 [NOT A COPY]
PHI node prephitmp.1041_750 copy-of chain: prephitmp.1041_750 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): match_1 = PHI <match_656(262), prephitmp.1045_1679(267), prephitmp.1045_1679(268)>

Visiting PHI node: match_1 = PHI <match_656(262), prephitmp.1045_1679(267), prephitmp.1045_1679(268)>
	Argument #0: match_656 copy-of chain: match_656 [NOT A COPY]
	Argument #1: prephitmp.1045_1679 copy-of chain: prephitmp.1045_1679 [NOT A COPY]
PHI node match_1 copy-of chain: match_1 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): match_2 = PHI <match_1(269), 1(270), 1(271), 1(272)>

Visiting PHI node: match_2 = PHI <match_1(269), 1(270), 1(271), 1(272)>
	Argument #0: match_1 copy-of chain: match_1 [NOT A COPY]
PHI node match_2 copy-of chain: match_2 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (match_2 != 0)

Simulating block 266
Adding Destination of edge (266 -> 267) to worklist


Simulating block 267

Simulating block 256

Simulating block 333
Adding Destination of edge (333 -> 316) to worklist


Simulating block 473
Adding Destination of edge (473 -> 474) to worklist


Simulating block 474

Simulating block 273

Visiting statement:
if (D.44970_677 != 0)

No interesting values produced.
Adding Destination of edge (273 -> 274) to worklist

Adding Destination of edge (273 -> 278) to worklist


Simulating block 274

Visiting statement:
if (D.44975_680 != 0)

No interesting values produced.
Adding Destination of edge (274 -> 275) to worklist

Adding Destination of edge (274 -> 279) to worklist


Simulating block 275

Visiting statement:
if (D.44978_682 == 0)

No interesting values produced.
Adding Destination of edge (275 -> 277) to worklist

Adding Destination of edge (275 -> 276) to worklist


Simulating block 276

Visiting statement:
if (D.44980_684 == 0)

No interesting values produced.

Simulating block 277

Simulating block 288

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
	Argument #0: remote_codec_rate_1494 copy-of chain: remote_codec_rate_1494 -> remote_codec_rate_596 [COPY]
	Argument #1: remote_codec_rate_96 copy-of chain: remote_codec_rate_96 -> remote_codec_rate_596 [COPY]
	Argument #5: remote_codec_rate_96 copy-of chain: remote_codec_rate_96 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>
	Argument #0: m_idx_1488 copy-of chain: m_idx_1488 [NOT A COPY]
	Argument #1: m_idx_1488 copy-of chain: m_idx_1488 [NOT A COPY]
	Argument #5: m_idx_1488 copy-of chain: m_idx_1488 [NOT A COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 -> m_idx_1488 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
	Argument #0: nm_idx_1140 copy-of chain: nm_idx_1140 [NOT A COPY]
	Argument #1: nm_idx_1140 copy-of chain: nm_idx_1140 [NOT A COPY]
	Argument #5: nm_idx_1140 copy-of chain: nm_idx_1140 [NOT A COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1140 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 268

Simulating block 269

Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_1494(262), remote_codec_rate_1494(267), fmtp_remote_codec_rate_99(268)>
	Argument #0: remote_codec_rate_1494 copy-of chain: remote_codec_rate_1494 -> remote_codec_rate_596 [COPY]
	Argument #1: remote_codec_rate_1494 copy-of chain: remote_codec_rate_1494 -> remote_codec_rate_596 [COPY]
	Argument #2: fmtp_remote_codec_rate_99 copy-of chain: fmtp_remote_codec_rate_99 [NOT A COPY]
PHI node remote_codec_rate_96 copy-of chain: remote_codec_rate_96 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (remote_codec_rate_96 != codec_rate_633)

Simulating statement (from ssa_edges): remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
	Argument #0: remote_codec_rate_1494 copy-of chain: remote_codec_rate_1494 -> remote_codec_rate_596 [COPY]
	Argument #1: remote_codec_rate_96 copy-of chain: remote_codec_rate_96 [NOT A COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): remote_codec_rate_1494 = PHI <remote_codec_rate_97(289), remote_codec_rate_596(257)>

Visiting PHI node: remote_codec_rate_1494 = PHI <remote_codec_rate_97(289), remote_codec_rate_596(257)>
	Argument #0: remote_codec_rate_97 copy-of chain: remote_codec_rate_97 [NOT A COPY]
	Argument #1: remote_codec_rate_596 copy-of chain: remote_codec_rate_596 [NOT A COPY]
PHI node remote_codec_rate_1494 copy-of chain: remote_codec_rate_1494 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 316

Simulating block 278

Visiting statement:
if (match_2 != 0)

No interesting values produced.
Adding Destination of edge (278 -> 288) to worklist


Simulating block 279

Visiting statement:
if (scrooge_80 != 0)

No interesting values produced.
Adding Destination of edge (279 -> 280) to worklist

Adding Destination of edge (279 -> 281) to worklist


Simulating block 280
Adding Destination of edge (280 -> 286) to worklist


Simulating block 286

Visiting statement:
if (m_idx_704 > 29)

No interesting values produced.
Adding Destination of edge (286 -> 287) to worklist


Simulating block 287
Adding Destination of edge (287 -> 296) to worklist


Simulating block 296

Simulating block 288

Visiting PHI node: m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>
	Argument #0: m_idx_1488 copy-of chain: m_idx_1488 [NOT A COPY]
	Argument #1: m_idx_1488 copy-of chain: m_idx_1488 [NOT A COPY]
	Argument #3: m_idx_704 copy-of chain: m_idx_704 [NOT A COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
	Argument #0: nm_idx_1140 copy-of chain: nm_idx_1140 [NOT A COPY]
	Argument #1: nm_idx_1140 copy-of chain: nm_idx_1140 [NOT A COPY]
	Argument #3: nm_idx_1140 copy-of chain: nm_idx_1140 [NOT A COPY]
	Argument #4: nm_idx_1140 copy-of chain: nm_idx_1140 [NOT A COPY]
	Argument #5: nm_idx_1140 copy-of chain: nm_idx_1140 [NOT A COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1140 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 281

Visiting statement:
if (D.44992_692 != 0)

No interesting values produced.
Adding Destination of edge (281 -> 282) to worklist

Adding Destination of edge (281 -> 283) to worklist


Simulating block 282

Visiting statement:
if (D.44994_693 != D.44930_694)

Trying to determine truth value of predicate if (D.44994_693 != D.44930_694)
No interesting values produced.
Adding Destination of edge (282 -> 285) to worklist


Simulating block 283

Visiting statement:
if (remote_codec_rate_96 != codec_rate_633)

Trying to determine truth value of predicate if (remote_codec_rate_96 != codec_rate_633)
No interesting values produced.
Adding Destination of edge (283 -> 284) to worklist

Adding Destination of edge (283 -> 286) to worklist


Simulating block 284

Simulating block 285

Visiting PHI node: prephitmp.1043_1681 = PHI <D.44930_694(282), pretmp.1042_1737(284)>
	Argument #0: D.44930_694 copy-of chain: D.44930_694 [NOT A COPY]
	Argument #1: pretmp.1042_1737 copy-of chain: pretmp.1042_1737 [NOT A COPY]
PHI node prephitmp.1043_1681 copy-of chain: prephitmp.1043_1681 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.

Adding Destination of edge (285 -> 288) to worklist


Simulating block 286

Simulating block 288

Visiting PHI node: nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
	Argument #0: nm_idx_1140 copy-of chain: nm_idx_1140 [NOT A COPY]
	Argument #1: nm_idx_1140 copy-of chain: nm_idx_1140 [NOT A COPY]
	Argument #2: nm_idx_702 copy-of chain: nm_idx_702 [NOT A COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Substituting values and folding statements

Folding statement: if (session_161(D) == 0B)
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => 0
Not folded
Folding statement: # DEBUG remote_codec_rate => 0
Not folded
Folding statement: # DEBUG codec_ms => 0
Not folded
Folding statement: near_matches = {};
Not folded
Folding statement: matches = {};
Not folded
Folding statement: # DEBUG near_map => 0B
Not folded
Folding statement: # DEBUG mmap => 0B
Not folded
Folding statement: # DEBUG near_match => 0B
Not folded
Folding statement: # DEBUG mimp => 0B
Not folded
Folding statement: # DEBUG near_rate => 0
Not folded
Folding statement: # DEBUG reneg => 1
Not folded
Folding statement: # DEBUG parser => 0B
Not folded
Folding statement: # DEBUG scrooge => 0
Not folded
Folding statement: # DEBUG got_webrtc => 0
Not folded
Folding statement: # DEBUG got_udptl => 0
Not folded
Folding statement: # DEBUG got_savp => 0
Not folded
Folding statement: # DEBUG got_video_savp => 0
Not folded
Folding statement: # DEBUG got_video_avp => 0
Not folded
Folding statement: # DEBUG got_avp => 0
Not folded
Folding statement: # DEBUG got_audio => 0
Not folded
Folding statement: # DEBUG got_video_crypto => 0
Not folded
Folding statement: # DEBUG got_crypto => 0
Not folded
Folding statement: # DEBUG crypto => 0B
Not folded
Folding statement: # DEBUG channel => channel_162
Not folded
Folding statement: channel_162 = switch_core_session_get_channel (session_161(D));
Not folded
Folding statement: # DEBUG skip => 0
Not folded
Folding statement: # DEBUG x => 0
Not folded
Folding statement: # DEBUG greedy => 0
Not folded
Folding statement: # DEBUG recvonly => 0
Not folded
Folding statement: # DEBUG sendonly => 0
Not folded
Folding statement: # DEBUG dmaxptime => 0
Not folded
Folding statement: # DEBUG maxptime => 0
Not folded
Folding statement: # DEBUG dptime => 0
Not folded
Folding statement: # DEBUG ptime => 0
Not folded
Folding statement: # DEBUG cng_pt => 0
Not folded
Folding statement: # DEBUG te => 0
Not folded
Folding statement: # DEBUG best_te => 0
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);
Not folded
Folding statement: if (smh_186 == 0B)
Not folded
Folding statement: # DEBUG smh => smh_186
Not folded
Folding statement: smh_186 = session_161(D)->media_handle;
Not folded
Folding statement: if (parser_196 == 0B)
Not folded
Folding statement: # DEBUG parser => parser_196
Not folded
Folding statement: parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
Not folded
Folding statement: D.44473_195 = (int) D.44472_194;
Not folded
Folding statement: D.44472_194 = strlen (r_sdp_193(D));
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_192
Not folded
Folding statement: total_codecs_192 = D.44471_191->num_codecs;
Not folded
Folding statement: D.44471_191 = smh_186->mparams;
Not folded
Folding statement: # DEBUG codec_array => codec_array_190
Not folded
Folding statement: codec_array_190 = &smh_186->codecs;
Not folded
Folding statement: # DEBUG v_engine => D#14
Not folded
Folding statement: # DEBUG D#14 => &smh_186->engines[1]
Not folded
Folding statement: # DEBUG a_engine => D#15
Not folded
Folding statement: # DEBUG D#15 => &smh_186->engines
Not folded
Folding statement: if (sdp_198 == 0B)
Not folded
Folding statement: # DEBUG sdp => sdp_198
Not folded
Folding statement: sdp_198 = sdp_session (parser_196);
Not folded
Folding statement: sdp_parser_free (parser_196);
Not folded
Folding statement: if (D.44478_200 != 0)
Not folded
Folding statement: D.44478_200 = dtls_ok (session_161(D));
Not folded
Folding statement: if (tmp_203 != 0B)
Not folded
Folding statement: # DEBUG tmp => tmp_203
Not folded
Folding statement: tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
Not folded
Folding statement: D.44482_202 = D.44481_201->channel;
Not folded
Folding statement: D.44481_201 = smh_186->session;
Not folded
Folding statement: if (D.49676_1551 == 0)
Not folded
Folding statement: D.49676_1551 = strcasecmp (tmp_203, "no");
Not folded
Folding statement: # DEBUG expr => tmp_203
Not folded
Folding statement: if (D.49677_1552 == 0)
Not folded
Folding statement: D.49677_1552 = strcasecmp (tmp_203, "off");
Not folded
Folding statement: if (D.49678_1553 == 0)
Not folded
Folding statement: D.49678_1553 = strcasecmp (tmp_203, "false");
Not folded
Folding statement: if (D.49679_1554 == 0)
Not folded
Folding statement: D.49679_1554 = strcasecmp (tmp_203, "f");
Not folded
Folding statement: if (D.49680_1555 == 0)
Not folded
Folding statement: D.49680_1555 = strcasecmp (tmp_203, "disabled");
Not folded
Folding statement: if (D.49681_1556 == 0)
Not folded
Folding statement: D.49681_1556 = strcasecmp (tmp_203, "inactive");
Not folded
Folding statement: if (D.49682_1557 == 0)
Not folded
Folding statement: D.49682_1557 = strcasecmp (tmp_203, "disallow");
Not folded
Folding statement: if (D.49683_1558 != 0)
Not folded
Folding statement: D.49683_1558 = switch_is_number (tmp_203);
Not folded
Folding statement: if (D.49684_1559 == 0)
Not folded
Folding statement: D.49684_1559 = strtol (tmp_203, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => tmp_203
Not folded
Folding PHI node: .MEM_1622 = PHI <.MEM_1181(10), .MEM_1181(11), .MEM_1181(12), .MEM_1181(13), .MEM_1181(14), .MEM_1181(15), .MEM_1181(16), .MEM_1636(18)>
No folding possible
Folding statement: switch_channel_clear_flag (D.44482_208, 109);
Not folded
Folding statement: D.44482_208 = D.44481_207->channel;
Not folded
Folding statement: D.44481_207 = smh_186->session;
Not folded
Folding statement: switch_channel_clear_flag (D.44482_206, 111);
Not folded
Folding statement: D.44482_206 = D.44481_205->channel;
Not folded
Folding statement: D.44481_205 = smh_186->session;
Not folded
Folding PHI node: .MEM_1097 = PHI <.MEM_1180(8), .MEM_1181(9), .MEM_1118(459), .MEM_1184(19)>
No folding possible
Folding statement: if (pmap_1458 != 0B)
Not folded
Folding statement: # DEBUG pmap => pmap_1458
Not folded
Folding statement: # DEBUG pmap => pmap_1458
Not folded
Folding statement: pmap_1458 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;
Not folded
Folding statement: # DEBUG engine => D#15
Not folded
Folding statement: switch_core_session_parse_crypto_prefs (session_161(D));
Not folded
Folding statement: if (D.47872_1662 != 0)
Not folded
Folding statement: D.47872_1662 = pmap_1458->allocated;
Not folded
Folding PHI node: pmap_1748 = PHI <pmap_1460(25), pmap_1458(22)>
No folding possible
Folding PHI node: .MEM_1838 = PHI <.MEM_1517(25), .MEM_1185(22)>
No folding possible
Folding statement: if (pmap_1460 != 0B)
Not folded
Folding statement: # DEBUG pmap => pmap_1460
Not folded
Folding statement: # DEBUG pmap => pmap_1460
Not folded
Folding statement: pmap_1460 = pmap_1748->next;
Not folded
Folding statement: pmap_1748->current = 0;
Not folded
Folding statement: pmap_1748->negotiated = 0;
Not folded
Folding statement: if (D.47872_1461 != 0)
Not folded
Folding statement: D.47872_1461 = pmap_1460->allocated;
Not folded
Folding PHI node: .MEM_1837 = PHI <.MEM_1517(24), .MEM_1517(23), .MEM_1185(20), .MEM_1185(21)>
No folding possible
Folding statement: if (pmap_1462 != 0B)
Not folded
Folding statement: # DEBUG pmap => pmap_1462
Not folded
Folding statement: # DEBUG pmap => pmap_1462
Not folded
Folding statement: pmap_1462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
Not folded
Folding statement: # DEBUG engine => D#14
Not folded
Folding statement: if (D.47875_1671 != 0)
Not folded
Folding statement: D.47875_1671 = pmap_1462->allocated;
Not folded
Folding PHI node: pmap_1673 = PHI <pmap_1464(31), pmap_1462(28)>
No folding possible
Folding PHI node: .MEM_1664 = PHI <.MEM_1519(31), .MEM_1837(28)>
No folding possible
Folding statement: if (pmap_1464 != 0B)
Not folded
Folding statement: # DEBUG pmap => pmap_1464
Not folded
Folding statement: # DEBUG pmap => pmap_1464
Not folded
Folding statement: pmap_1464 = pmap_1673->next;
Not folded
Folding statement: pmap_1673->current = 0;
Not folded
Folding statement: pmap_1673->negotiated = 0;
Not folded
Folding statement: if (D.47875_1465 != 0)
Not folded
Folding statement: D.47875_1465 = pmap_1464->allocated;
Not folded
Folding PHI node: .MEM_1879 = PHI <.MEM_1519(30), .MEM_1519(29), .MEM_1837(26), .MEM_1837(27)>
No folding possible
Folding statement: if (proceed_209(D) != 0B)
Not folded
Folding statement: *proceed_209(D) = 1;
Not folded
Folding PHI node: .MEM_1098 = PHI <.MEM_1879(32), .MEM_1188(33)>
No folding possible
Folding statement: if (val_214 != 0B)
Not folded
Folding statement: # DEBUG val => val_214
Not folded
Folding statement: val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
Not folded
Folding statement: # DEBUG scrooge => scrooge_213
Not folded
Folding statement: scrooge_213 = D.44491_212 != 0;
Not folded
Folding statement: D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
Not folded
Folding statement: # DEBUG greedy => greedy_211
Not folded
Folding statement: greedy_211 = D.44490_210 != 0;
Not folded
Folding statement: D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
Not folded
Folding statement: if (D.44494_215 == 0)
Not folded
Folding statement: D.44494_215 = strcasecmp (val_214, "generous");
Not folded
Folding statement: if (D.44498_218 == 0)
Not folded
Folding statement: D.44498_218 = strcasecmp (val_214, "greedy");
Not folded
Folding statement: if (D.44502_221 == 0)
Not folded
Folding statement: D.44502_221 = strcasecmp (val_214, "scrooge");
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
Not folded
Folding PHI node: greedy_47 = PHI <greedy_211(34), 0(35), 1(36), 1(37), greedy_211(38)>
No folding possible
Folding PHI node: scrooge_80 = PHI <scrooge_213(34), 0(35), 0(36), 1(37), scrooge_213(38)>
No folding possible
Folding PHI node: .MEM_1099 = PHI <.MEM_1191(34), .MEM_1191(35), .MEM_1191(36), .MEM_1191(37), .MEM_1192(38)>
No folding possible
Folding statement: if (D.44508_226 != 0B)
Not folded
Folding statement: smh_186->origin = D.44508_226;
Not folded
Folding statement: D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
Not folded
Folding statement: D.44507_225 = D.44506_224->o_username;
Not folded
Folding statement: D.44506_224 = sdp_198->sdp_origin;
Not folded
Folding statement: # DEBUG greedy => greedy_47
Not folded
Folding statement: # DEBUG scrooge => scrooge_80
Not folded
Folding statement: if (D.44514_231 != 0)
Not folded
Folding statement: D.44514_231 = D.44513_230 & 1;
Not folded
Folding statement: D.44513_230 = (int) D.44512_229;
Not folded
Folding statement: D.44512_229 = D.44471_228->auto_rtp_bugs;
Not folded
Folding statement: D.44471_228 = smh_186->mparams;
Not folded
Folding statement: if (D.44518_234 != 0B)
Not folded
Folding statement: D.44518_234 = strstr (D.44508_226, "CiscoSystemsSIP-GW-UserAgent");
Not folded
Folding statement: pretmp.1052_323 = pretmp.1050_1810->auto_rtp_bugs;
Not folded
Folding statement: pretmp.1050_1810 = smh_186->mparams;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
Not folded
Folding statement: D.44522_236 = D.44521_235 | 1;
Not folded
Folding statement: D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
Not folded
Folding PHI node: .MEM_1100 = PHI <.MEM_1194(40), .MEM_1194(41), .MEM_1196(42)>
No folding possible
Folding PHI node: prephitmp.1053_326 = PHI <D.44512_229(40), D.44512_229(41), pretmp.1052_323(42)>
No folding possible
Folding statement: if (D.44523_239 != 0)
Not folded
Folding statement: D.44523_239 = prephitmp.1053_326 & 2;
Not folded
Folding statement: if (D.44526_241 != 0B)
Not folded
Folding statement: D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
Not folded
Folding statement: D.44509_240 = smh_186->origin;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
Not folded
Folding statement: D.44529_243 = D.44521_242 | 2;
Not folded
Folding statement: D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
Not folded
Folding PHI node: .MEM_1101 = PHI <.MEM_1194(39), .MEM_1100(43), .MEM_1100(44), .MEM_1198(45)>
No folding possible
Folding statement: if (val_245 != 0B)
Not folded
Folding statement: # DEBUG val => val_245
Not folded
Folding statement: val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
Not folded
Folding statement: D.44530_244 = session_161(D)->channel;
Not folded
Folding statement: if (D.49688_1561 == 0)
Not folded
Folding statement: D.49688_1561 = strcasecmp (val_245, "yes");
Not folded
Folding statement: # DEBUG expr => val_245
Not folded
Folding statement: if (D.49689_1562 == 0)
Not folded
Folding statement: D.49689_1562 = strcasecmp (val_245, "on");
Not folded
Folding statement: if (D.49690_1563 == 0)
Not folded
Folding statement: D.49690_1563 = strcasecmp (val_245, "true");
Not folded
Folding statement: if (D.49691_1564 == 0)
Not folded
Folding statement: D.49691_1564 = strcasecmp (val_245, "t");
Not folded
Folding statement: if (D.49692_1565 == 0)
Not folded
Folding statement: D.49692_1565 = strcasecmp (val_245, "enabled");
Not folded
Folding statement: if (D.49693_1566 == 0)
Not folded
Folding statement: D.49693_1566 = strcasecmp (val_245, "active");
Not folded
Folding statement: if (D.49694_1567 == 0)
Not folded
Folding statement: D.49694_1567 = strcasecmp (val_245, "allow");
Not folded
Folding statement: if (D.49695_1568 != 0)
Not folded
Folding statement: D.49695_1568 = switch_is_number (val_245);
Not folded
Folding statement: if (D.49696_1569 != 0)
Not folded
Folding statement: D.49696_1569 = strtol (val_245, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => val_245
Not folded
Folding PHI node: .MEM_1624 = PHI <.MEM_1199(47), .MEM_1199(48), .MEM_1199(49), .MEM_1199(50), .MEM_1199(51), .MEM_1199(52), .MEM_1199(53), .MEM_1639(55)>
No folding possible
Folding statement: switch_channel_set_flag_value (D.44530_247, 93, 1);
Not folded
Folding statement: D.44530_247 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1102 = PHI <.MEM_1199(46), .MEM_795(460), .MEM_1201(56)>
No folding possible
Folding statement: if (m_248 != 0B)
Not folded
Folding statement: # DEBUG m => m_248
Not folded
Folding statement: m_248 = sdp_198->sdp_media;
Not folded
Folding statement: if (D.44544_253 != 0)
Not folded
Folding statement: D.44544_253 = D.44543_252 | D.44542_251;
Not folded
Folding statement: D.44543_252 = D.44541_250 == 0;
Not folded
Folding statement: D.44542_251 = D.44541_250 == 2;
Not folded
Folding statement: D.44541_250 = D.44540_249 & 6;
Not folded
Folding statement: D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
Not folded
Folding statement: if (D.44546_254 != 0B)
Not folded
Folding statement: D.44546_254 = m_248->m_connections;
Not folded
Folding statement: if (D.44548_256 != 0B)
Not folded
Folding statement: D.44548_256 = D.44546_254->c_address;
Not folded
Folding statement: if (__result_300 == 0)
Not folded
Folding statement: __result_300 = __builtin_strcmp (D.44548_256, "0.0.0.0");
Not folded
Folding statement: # DEBUG __s2_len => 7
Not folded
Folding PHI node: sendonly_42 = PHI <0(57), 0(59), 0(60), 0(62), 2(61), 2(58)>
No folding possible
Folding statement: if (attr_303 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_303
Not folded
Folding statement: # DEBUG dptime => 0
Not folded
Folding statement: # DEBUG dmaxptime => 0
Not folded
Folding statement: # DEBUG sendonly => sendonly_42
Not folded
Folding statement: # DEBUG recvonly => 0
Not folded
Folding statement: # DEBUG attr => attr_303
Not folded
Folding statement: attr_303 = sdp_198->sdp_attributes;
Not folded
Folding statement: # DEBUG sendonly => sendonly_42
Not folded
Folding PHI node: attr_1667 = PHI <attr_334(81), attr_303(64)>
No folding possible
Folding PHI node: dptime_1672 = PHI <dptime_36(81), 0(64)>
No folding possible
Folding PHI node: dmaxptime_1866 = PHI <dmaxptime_40(81), 0(64)>
No folding possible
Folding PHI node: sendonly_1690 = PHI <sendonly_43(81), sendonly_42(64)>
No folding possible
Folding PHI node: recvonly_1895 = PHI <recvonly_45(81), 0(64)>
No folding possible
Folding PHI node: .MEM_1839 = PHI <.MEM_1103(81), .MEM_1102(64)>
No folding possible
Folding statement: if (D.44590_304 == 0B)
Not folded
Folding statement: # DEBUG s => D.44590_304
Not folded
Folding statement: D.44590_304 = attr_1667->a_name;
Not folded
Folding statement: if (D.47878_1466 == 0)
Not folded
Folding statement: D.47878_1466 = *D.44590_304;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
Not folded
Folding statement: D.44530_309 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG sendonly => 1
Not folded
Folding statement: if (D.44598_311 == 0)
Not folded
Folding statement: D.44598_311 = strcasecmp (D.44590_304, "inactive");
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
Not folded
Folding statement: D.44530_313 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG sendonly => 1
Not folded
Folding statement: if (D.44602_315 == 0)
Not folded
Folding statement: D.44602_315 = strcasecmp (D.44590_304, "recvonly");
Not folded
Folding statement: if (D.44606_319 != 0)
Not folded
Folding statement: D.44606_319 = switch_rtp_ready (D.44605_318);
Not folded
Folding statement: D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: # DEBUG recvonly => 1
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
Not folded
Folding statement: D.44530_316 = session_161(D)->channel;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;
Not folded
Folding statement: switch_rtp_set_max_missed_packets (D.44605_320, 0);
Not folded
Folding statement: D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
Not folded
Folding statement: D.44530_322 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
Not folded
Folding statement: D.44530_321 = session_161(D)->channel;
Not folded
Folding statement: if (sendonly_1690 != 2)
Not folded
Folding statement: if (D.44614_324 == 0)
Not folded
Folding statement: D.44614_324 = strcasecmp (D.44590_304, "sendrecv");
Not folded
Folding statement: if (D.44616_327 == 0)
Not folded
Folding statement: D.44616_327 = strcasecmp (D.44590_304, "ptime");
Not folded
Folding statement: # DEBUG dptime => NULL
Not folded
Folding statement: dptime_1468 = strtol (D.44619_328, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_328
Not folded
Folding statement: D.44619_328 = attr_1667->a_value;
Not folded
Folding statement: if (D.44621_331 == 0)
Not folded
Folding statement: D.44621_331 = strcasecmp (D.44590_304, "maxptime");
Not folded
Folding statement: # DEBUG dmaxptime => NULL
Not folded
Folding statement: dmaxptime_1469 = strtol (D.44619_332, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_332
Not folded
Folding statement: D.44619_332 = attr_1667->a_value;
Not folded
Folding PHI node: dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
No folding possible
Folding PHI node: dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
No folding possible
Folding PHI node: sendonly_43 = PHI <sendonly_1690(66), 1(67), 1(69), sendonly_1690(73), 0(75), sendonly_1690(77), sendonly_1690(78), sendonly_1690(79), sendonly_1690(72), sendonly_1690(65)>
No folding possible
Folding PHI node: recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>
No folding possible
Folding PHI node: .MEM_1103 = PHI <.MEM_1839(66), .MEM_1202(67), .MEM_1203(69), .MEM_1210(73), .MEM_1839(75), .MEM_1521(77), .MEM_1839(78), .MEM_1523(79), .MEM_1208(72), .MEM_1839(65)>
No folding possible
Folding statement: if (attr_334 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_334
Not folded
Folding statement: # DEBUG dptime => dptime_36
Not folded
Folding statement: # DEBUG dmaxptime => dmaxptime_40
Not folded
Folding statement: # DEBUG sendonly => sendonly_43
Not folded
Folding statement: # DEBUG recvonly => recvonly_45
Not folded
Folding statement: # DEBUG attr => attr_334
Not folded
Folding statement: attr_334 = attr_1667->a_next;
Not folded
Folding statement: # DEBUG dptime => dptime_36
Not folded
Folding statement: # DEBUG dmaxptime => dmaxptime_40
Not folded
Folding statement: # DEBUG sendonly => sendonly_43
Not folded
Folding statement: # DEBUG recvonly => recvonly_45
Not folded
Folding PHI node: dptime_255 = PHI <dptime_36(80)>
No folding possible
Folding PHI node: dmaxptime_913 = PHI <dmaxptime_40(80)>
No folding possible
Folding PHI node: sendonly_864 = PHI <sendonly_43(80)>
No folding possible
Folding PHI node: recvonly_870 = PHI <recvonly_45(80)>
No folding possible
Folding statement: pretmp.1025_1684 = recvonly_870 != 1;
Not folded
Folding PHI node: dptime_1036 = PHI <dptime_255(82), 0(63)>
No folding possible
Folding PHI node: dmaxptime_1006 = PHI <dmaxptime_913(82), 0(63)>
No folding possible
Folding PHI node: sendonly_1007 = PHI <sendonly_864(82), sendonly_42(63)>
No folding possible
Folding PHI node: .MEM_1840 = PHI <.MEM_1103(82), .MEM_1102(63)>
No folding possible
Folding PHI node: prephitmp.1026_1683 = PHI <pretmp.1025_1684(82), 1(63)>
No folding possible
Folding statement: if (D.44626_337 != 0)
Not folded
Folding statement: D.44626_337 = D.44624_335 & prephitmp.1026_1683;
Not folded
Folding statement: D.44624_335 = sendonly_1007 != 1;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);
Not folded
Folding statement: D.44530_338 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1105 = PHI <.MEM_1840(83), .MEM_1211(84)>
No folding possible
Folding statement: if (D.44631_339 == 0)
Not folded
Folding statement: D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
Not folded
Folding statement: if (val_341 == 0B)
Not folded
Folding statement: # DEBUG val => val_341
Not folded
Folding statement: val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
Not folded
Folding statement: D.44530_340 = session_161(D)->channel;
Not folded
Folding statement: if (D.49700_1571 == 0)
Not folded
Folding statement: D.49700_1571 = strcasecmp (val_341, "yes");
Not folded
Folding statement: # DEBUG expr => val_341
Not folded
Folding statement: if (D.49701_1572 == 0)
Not folded
Folding statement: D.49701_1572 = strcasecmp (val_341, "on");
Not folded
Folding statement: if (D.49702_1573 == 0)
Not folded
Folding statement: D.49702_1573 = strcasecmp (val_341, "true");
Not folded
Folding statement: if (D.49703_1574 == 0)
Not folded
Folding statement: D.49703_1574 = strcasecmp (val_341, "t");
Not folded
Folding statement: if (D.49704_1575 == 0)
Not folded
Folding statement: D.49704_1575 = strcasecmp (val_341, "enabled");
Not folded
Folding statement: if (D.49705_1576 == 0)
Not folded
Folding statement: D.49705_1576 = strcasecmp (val_341, "active");
Not folded
Folding statement: if (D.49706_1577 == 0)
Not folded
Folding statement: D.49706_1577 = strcasecmp (val_341, "allow");
Not folded
Folding statement: if (D.49707_1578 != 0)
Not folded
Folding statement: D.49707_1578 = switch_is_number (val_341);
Not folded
Folding statement: if (D.49708_1579 != 0)
Not folded
Folding statement: D.49708_1579 = strtol (val_341, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => val_341
Not folded
Folding PHI node: .MEM_1626 = PHI <.MEM_1213(87), .MEM_1213(88), .MEM_1213(89), .MEM_1213(90), .MEM_1213(91), .MEM_1213(92), .MEM_1213(93), .MEM_1642(95)>
No folding possible
Folding PHI node: .MEM_1106 = PHI <.MEM_1213(86), .MEM_1755(462)>
No folding possible
Folding statement: if (D.44636_344 == 0)
Not folded
Folding statement: D.44636_344 = D.44471_343->hold_laps;
Not folded
Folding statement: D.44471_343 = smh_186->mparams;
Not folded
Folding statement: if (D.44640_348 != 0)
Not folded
Folding statement: D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_1007);
Not folded
Folding statement: D.44471_343->hold_laps = 1;
Not folded
Folding statement: if (val_351 != 0B)
Not folded
Folding statement: # DEBUG val => val_351
Not folded
Folding statement: val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
Not folded
Folding statement: D.44530_350 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG reneg => reneg_349
Not folded
Folding statement: reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
Not folded
Folding statement: # DEBUG reneg => reneg_352
Not folded
Folding statement: reneg_352 = switch_true (val_351);
Not folded
Folding PHI node: reneg_81 = PHI <reneg_349(99), reneg_352(100)>
No folding possible
Folding PHI node: .MEM_1107 = PHI <.MEM_1218(99), .MEM_1219(100)>
No folding possible
Folding statement: if (reneg_81 != 0)
Not folded
Folding statement: # DEBUG reneg => reneg_81
Not folded
Folding PHI node: .MEM_1858 = PHI <.MEM_1107(101), .MEM_670(463)>
No folding possible
Folding statement: if (val_355 != 0B)
Not folded
Folding statement: # DEBUG val => val_355
Not folded
Folding statement: val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
Not folded
Folding statement: D.44530_354 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG reneg => reneg_353
Not folded
Folding statement: reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
Not folded
Folding statement: if (D.49712_1581 == 0)
Not folded
Folding statement: D.49712_1581 = strcasecmp (val_355, "yes");
Not folded
Folding statement: # DEBUG expr => val_355
Not folded
Folding statement: if (D.49713_1582 == 0)
Not folded
Folding statement: D.49713_1582 = strcasecmp (val_355, "on");
Not folded
Folding statement: if (D.49714_1583 == 0)
Not folded
Folding statement: D.49714_1583 = strcasecmp (val_355, "true");
Not folded
Folding statement: if (D.49715_1584 == 0)
Not folded
Folding statement: D.49715_1584 = strcasecmp (val_355, "t");
Not folded
Folding statement: if (D.49716_1585 == 0)
Not folded
Folding statement: D.49716_1585 = strcasecmp (val_355, "enabled");
Not folded
Folding statement: if (D.49717_1586 == 0)
Not folded
Folding statement: D.49717_1586 = strcasecmp (val_355, "active");
Not folded
Folding statement: if (D.49718_1587 == 0)
Not folded
Folding statement: D.49718_1587 = strcasecmp (val_355, "allow");
Not folded
Folding statement: if (D.49719_1588 != 0)
Not folded
Folding statement: D.49719_1588 = switch_is_number (val_355);
Not folded
Folding statement: if (D.49720_1589 != 0)
Not folded
Folding statement: D.49720_1589 = strtol (val_355, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => val_355
Not folded
Folding PHI node: reneg_1590 = PHI <1(103), 1(104), 1(105), 1(106), 1(107), 1(108), 1(109), 1(112), 0(110), 0(111)>
No folding possible
Folding PHI node: .MEM_1628 = PHI <.MEM_1221(103), .MEM_1221(104), .MEM_1221(105), .MEM_1221(106), .MEM_1221(107), .MEM_1221(108), .MEM_1221(109), .MEM_1645(112), .MEM_1644(110), .MEM_1645(111)>
No folding possible
Folding statement: # DEBUG reneg => NULL
Not folded
Folding PHI node: reneg_82 = PHI <0(101), reneg_353(102), reneg_1590(113)>
No folding possible
Folding PHI node: .MEM_1108 = PHI <.MEM_1107(101), .MEM_1221(102), .MEM_1628(113)>
No folding possible
Folding statement: if (D.44649_357 != 0B)
Not folded
Folding statement: D.44649_357 = session_161(D)->bugs;
Not folded
Folding statement: # DEBUG reneg => reneg_82
Not folded
Folding statement: # DEBUG reneg => 0
Not folded
Folding statement: # DEBUG reneg => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
Not folded
Folding statement: if (reneg_82 == 0)
Not folded
Folding statement: # DEBUG reneg => reneg_82
Not folded
Folding PHI node: .MEM_1859 = PHI <.MEM_1108(116), .MEM_1223(115)>
No folding possible
Folding statement: if (total_codecs_359 != 0)
Not folded
Folding statement: total_codecs_359 = smh_186->num_negotiated_codecs;
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_359
Not folded
Folding statement: # DEBUG codec_array => codec_array_360
Not folded
Folding statement: codec_array_360 = &smh_186->negotiated_codecs;
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_365
Not folded
Folding statement: total_codecs_365 = D.44471_364->num_codecs;
Not folded
Folding statement: D.44471_364 = smh_186->mparams;
Not folded
Folding statement: # DEBUG codec_array => codec_array_190
Not folded
Folding statement: switch_core_media_prepare_codecs (session_161(D), 0);
Not folded
Folding statement: D.44471_362->num_codecs = 0;
Not folded
Folding statement: D.44471_362 = smh_186->mparams;
Not folded
Folding PHI node: codec_array_84 = PHI <codec_array_360(118), codec_array_190(117), codec_array_190(119)>
No folding possible
Folding PHI node: total_codecs_85 = PHI <total_codecs_359(118), total_codecs_192(117), total_codecs_365(119)>
No folding possible
Folding PHI node: .MEM_1110 = PHI <.MEM_1859(118), .MEM_1859(117), .MEM_1225(119)>
No folding possible
Folding statement: if (D.44661_366 != 0B)
Not folded
Folding statement: D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
Not folded
Folding statement: # DEBUG codec_array => codec_array_84
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_85
Not folded
Folding statement: if (D.44663_367 != 0B)
Not folded
Folding statement: D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
Not folded
Folding statement: if (D.44665_368 != 0B)
Not folded
Folding statement: D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
Not folded
Folding PHI node: .MEM_1111 = PHI <.MEM_1226(120), .MEM_1227(121), .MEM_1228(122)>
No folding possible
Folding statement: switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);
Not folded
Folding statement: D.44530_369 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1112 = PHI <.MEM_1228(122), .MEM_1229(123)>
No folding possible
Folding statement: if (m_370 != 0B)
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG best_te => 0
Not folded
Folding statement: # DEBUG cng_pt => 0
Not folded
Folding statement: # DEBUG m => m_370
Not folded
Folding statement: # DEBUG got_crypto => 0
Not folded
Folding statement: # DEBUG got_video_crypto => 0
Not folded
Folding statement: # DEBUG got_audio => 0
Not folded
Folding statement: # DEBUG got_avp => 0
Not folded
Folding statement: # DEBUG got_video_avp => NULL
Not folded
Folding statement: # DEBUG got_video_savp => NULL
Not folded
Folding statement: # DEBUG got_savp => 0
Not folded
Folding statement: # DEBUG got_udptl => 0
Not folded
Folding statement: # DEBUG got_webrtc => 0
Not folded
Folding statement: # DEBUG codec_ms => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG m => m_370
Not folded
Folding statement: m_370 = sdp_198->sdp_media;
Not folded
Folding statement: check_ice (smh_186, 1, sdp_198, 0B);
Not folded
Folding statement: check_ice (smh_186, 0, sdp_198, 0B);
Not folded
Folding statement: switch_core_media_pass_zrtp_hash (session_161(D));
Not folded
Folding statement: switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
Not folded
Folding PHI node: match_1801 = PHI <match_15(455), 0(125)>
No folding possible
Folding PHI node: best_te_681 = PHI <best_te_22(455), 0(125)>
No folding possible
Folding PHI node: cng_pt_1718 = PHI <cng_pt_26(455), 0(125)>
No folding possible
Folding PHI node: m_1765 = PHI <m_1094(455), m_370(125)>
No folding possible
Folding PHI node: got_crypto_1867 = PHI <got_crypto_55(455), 0(125)>
No folding possible
Folding PHI node: got_video_crypto_1675 = PHI <got_video_crypto_63(455), 0(125)>
No folding possible
Folding PHI node: got_audio_1694 = PHI <got_audio_66(455), 0(125)>
No folding possible
Folding PHI node: got_avp_672 = PHI <got_avp_1860(455), 0(125)>
No folding possible
Folding PHI node: got_savp_512 = PHI <got_savp_1740(455), 0(125)>
No folding possible
Folding PHI node: got_udptl_1869 = PHI <got_udptl_1744(455), 0(125)>
No folding possible
Folding PHI node: got_webrtc_452 = PHI <got_webrtc_78(455), 0(125)>
No folding possible
Folding PHI node: codec_ms_477 = PHI <codec_ms_94(455), 0(125)>
No folding possible
Folding PHI node: m_idx_1870 = PHI <m_idx_113(455), 0(125)>
No folding possible
Folding PHI node: nm_idx_1750 = PHI <nm_idx_121(455), 0(125)>
No folding possible
Folding PHI node: .MEM_1751 = PHI <.MEM_1169(455), .MEM_1233(125)>
No folding possible
Folding statement: if (D.44666_373 == 261)
Not folded
Folding statement: D.44666_373 = m_1765->m_proto;
Not folded
Folding statement: # DEBUG maxptime => dmaxptime_1006
Not folded
Folding statement: # DEBUG ptime => dptime_1036
Not folded
Folding statement: switch_core_session_set_ice (session_161(D));
Not folded
Folding statement: # DEBUG got_webrtc => got_webrtc_374
Not folded
Folding statement: got_webrtc_374 = got_webrtc_452 + 1;
Not folded
Folding PHI node: got_webrtc_78 = PHI <got_webrtc_452(126), got_webrtc_374(127)>
No folding possible
Folding PHI node: .MEM_1113 = PHI <.MEM_1751(126), .MEM_1234(127)>
No folding possible
Folding statement: if (D.44669_375 != 0B)
Not folded
Folding statement: D.44669_375 = m_1765->m_proto_name;
Not folded
Folding statement: # DEBUG got_webrtc => got_webrtc_78
Not folded
Folding statement: if (D.44672_377 == 0)
Not folded
Folding statement: D.44672_377 = strcasecmp (D.44669_375, "UDP/TLS/RTP/SAVPF");
Not folded
Folding statement: switch_channel_set_flag_value (D.44530_378, 107, 1);
Not folded
Folding statement: D.44530_378 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1114 = PHI <.MEM_1113(128), .MEM_1113(129), .MEM_1235(130)>
No folding possible
Folding statement: if (D.44678_382 != 0)
Not folded
Folding statement: D.44678_382 = D.44677_381 | D.44676_380;
Not folded
Folding statement: D.44677_381 = D.44675_379 == 261;
Not folded
Folding statement: D.44676_380 = D.44675_379 == 257;
Not folded
Folding statement: D.44675_379 = m_1765->m_proto;
Not folded
Folding statement: if (D.44681_383 == 2)
Not folded
Folding statement: D.44681_383 = m_1765->m_type;
Not folded
Folding statement: # DEBUG got_savp => got_savp_384
Not folded
Folding statement: got_savp_384 = got_savp_512 + 1;
Not folded
Folding statement: if (D.44675_379 == 256)
Not folded
Folding statement: if (D.44681_387 == 2)
Not folded
Folding statement: D.44681_387 = m_1765->m_type;
Not folded
Folding statement: # DEBUG got_avp => got_avp_388
Not folded
Folding statement: got_avp_388 = got_avp_672 + 1;
Not folded
Folding statement: if (D.44675_379 == 258)
Not folded
Folding statement: pretmp.1048_1674 = m_1765->m_type;
Not folded
Folding statement: pretmp.1056_346 = m_1765->m_type;
Not folded
Folding statement: # DEBUG got_avp => got_avp_672
Not folded
Folding statement: # DEBUG got_video_avp => NULL
Not folded
Folding statement: # DEBUG got_video_savp => NULL
Not folded
Folding statement: # DEBUG got_savp => got_savp_512
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_391
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_391
Not folded
Folding statement: got_udptl_391 = got_udptl_1869 + 1;
Not folded
Folding PHI node: got_avp_68 = PHI <got_avp_672(132), got_avp_672(135), got_avp_672(138), got_avp_388(136), got_avp_672(133)>
No folding possible
Folding PHI node: got_savp_74 = PHI <got_savp_512(132), got_savp_512(135), got_savp_512(138), got_savp_512(136), got_savp_384(133)>
No folding possible
Folding PHI node: prephitmp.1049_1809 = PHI <D.44681_383(132), D.44681_387(135), pretmp.1048_1674(138), D.44681_387(136), D.44681_383(133)>
No folding possible
Folding statement: if (got_udptl_1869 != 0)
Not folded
Folding statement: # DEBUG got_avp => got_avp_68
Not folded
Folding statement: # DEBUG got_video_avp => NULL
Not folded
Folding statement: # DEBUG got_video_savp => NULL
Not folded
Folding statement: # DEBUG got_savp => got_savp_74
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_1869
Not folded
Folding PHI node: got_avp_1741 = PHI <got_avp_68(140), got_avp_672(139)>
No folding possible
Folding PHI node: got_savp_1712 = PHI <got_savp_74(140), got_savp_512(139)>
No folding possible
Folding PHI node: got_udptl_775 = PHI <got_udptl_1869(140), got_udptl_391(139)>
No folding possible
Folding PHI node: prephitmp.1057_1806 = PHI <prephitmp.1049_1809(140), pretmp.1056_346(139)>
No folding possible
Folding statement: if (prephitmp.1057_1806 == 8)
Not folded
Folding statement: if (D.44697_393 != 0)
Not folded
Folding statement: D.44697_393 = m_1765->m_port;
Not folded
Folding PHI node: cng_pt_1792 = PHI <cng_pt_1718(142)>
No folding possible
Folding PHI node: m_1790 = PHI <m_1765(142)>
No folding possible
Folding statement: if (D.44699_396 != 0)
Not folded
Folding statement: D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
Not folded
Folding statement: D.44530_395 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG t38_options => t38_options_394
Not folded
Folding statement: t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_1790);
Not folded
Folding statement: if (D.44703_399 != 0)
Not folded
Folding statement: D.44703_399 = switch_true (D.44702_398);
Not folded
Folding statement: D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
Not folded
Folding statement: D.44530_400 = session_161(D)->channel;
Not folded
Folding statement: if (D.44707_408 != 0)
Not folded
Folding statement: D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
Not folded
Folding statement: D.44530_407 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG pass => (int) D.44706_405
Not folded
Folding statement: D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
Not folded
Folding statement: D.44482_404 = D.44481_403->channel;
Not folded
Folding statement: D.44481_403 = smh_186->session;
Not folded
Folding statement: # DEBUG var => var_402
Not folded
Folding statement: var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
Not folded
Folding statement: if (proceed_209(D) != 0B)
Not folded
Folding statement: *proceed_209(D) = 0;
Not folded
Folding PHI node: .MEM_1115 = PHI <.MEM_1243(146), .MEM_1243(147), .MEM_1244(148)>
No folding possible
Folding statement: if (var_402 != 0B)
Not folded
Folding statement: if (pass_409 == 0)
Not folded
Folding statement: # DEBUG pass => pass_409
Not folded
Folding statement: pass_409 = switch_true (var_402);
Not folded
Folding statement: if (D.44716_410 == 0)
Not folded
Folding statement: D.44716_410 = strcasecmp (var_402, "once");
Not folded
Folding statement: pass_406 = (int) D.44706_405;
Not folded
Folding PHI node: pass_126 = PHI <pass_406(152), pass_409(150)>
No folding possible
Folding PHI node: .MEM_1116 = PHI <.MEM_1115(152), .MEM_1245(150)>
No folding possible
Folding statement: if (pass_126 == 2)
Not folded
Folding statement: # DEBUG pass => pass_126
Not folded
Folding PHI node: pass_1665 = PHI <pass_126(153), 2(151)>
No folding possible
Folding PHI node: .MEM_1855 = PHI <.MEM_1116(153), .MEM_1245(151)>
No folding possible
Folding statement: if (D.44723_414 != 0)
Not folded
Folding statement: D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
Not folded
Folding statement: D.44482_413 = D.44481_412->channel;
Not folded
Folding statement: D.44481_412 = smh_186->session;
Not folded
Folding PHI node: .MEM_1117 = PHI <.MEM_1245(151), .MEM_1246(154), .MEM_1116(153)>
No folding possible
Folding PHI node: pass_1849 = PHI <0(151), pass_1665(154), pass_126(153)>
No folding possible
Folding statement: if (D.44724_416 == 0)
Not folded
Folding statement: D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
Not folded
Folding statement: D.44530_415 = session_161(D)->channel;
Not folded
Folding statement: if (D.44726_418 != 0)
Not folded
Folding statement: D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
Not folded
Folding statement: D.44530_417 = session_161(D)->channel;
Not folded
Folding statement: if (D.44728_420 != 0)
Not folded
Folding statement: D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
Not folded
Folding statement: D.44530_419 = session_161(D)->channel;
Not folded
Folding statement: if (D.44730_422 == 0)
Not folded
Folding statement: D.44730_422 = switch_rtp_ready (D.44605_421);
Not folded
Folding statement: D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: if (pass_1849 != 0)
Not folded
Folding statement: # DEBUG pass => pass_1849
Not folded
Folding statement: if (D.44733_424 == 0)
Not folded
Folding statement: D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
Not folded
Folding statement: if (D.44737_431 == 0)
Not folded
Folding statement: D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
Not folded
Folding statement: tmp = "";
Not folded
Folding statement: # DEBUG remote_port => remote_port_430
Not folded
Folding statement: remote_port_430 = switch_rtp_get_remote_port (D.44605_429);
Not folded
Folding statement: D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: # DEBUG remote_host => remote_host_428
Not folded
Folding statement: remote_host_428 = switch_rtp_get_remote_host (D.44605_427);
Not folded
Folding statement: D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: # DEBUG other_channel => other_channel_426
Not folded
Folding statement: other_channel_426 = switch_core_session_get_channel (other_session.89_425);
Not folded
Folding statement: other_session.89_425 = other_session;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG pass => 0
Not folded
Folding statement: switch_core_session_rwunlock (other_session.89_435);
Not folded
Folding statement: other_session.89_435 = other_session;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
Not folded
Folding statement: D.44741_434 = switch_channel_get_name (other_channel_426);
Not folded
Folding statement: D.44740_433 = switch_channel_get_name (D.44530_432);
Not folded
Folding statement: D.44530_432 = session_161(D)->channel;
Not folded
Folding statement: if (D.44743_440 != 0)
Not folded
Folding statement: D.44743_440 = switch_true (D.44742_439);
Not folded
Folding statement: D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
Not folded
Folding statement: D.44530_438 = session_161(D)->channel;
Not folded
Folding statement: if (D.44747_443 != 0)
Not folded
Folding statement: D.44747_443 = switch_true (D.44746_442);
Not folded
Folding statement: D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
Not folded
Folding statement: D.44530_441 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);
Not folded
Folding PHI node: .MEM_1120 = PHI <.MEM_1262(163), .MEM_1264(164), .MEM_1265(165)>
No folding possible
Folding statement: if (D.44758_451 != 0)
Not folded
Folding statement: D.44758_451 = D.44757_450 & D.44756_449;
Not folded
Folding statement: D.44757_450 = remote_port_430 != 0;
Not folded
Folding statement: D.44756_449 = remote_host_428 != 0B;
Not folded
Folding statement: D.44750_447->remote_sdp_port = D.44753_448;
Not folded
Folding statement: D.44753_448 = t38_options_394->remote_port;
Not folded
Folding statement: D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44750_444->remote_sdp_ip = D.44752_446;
Not folded
Folding statement: D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
Not folded
Folding statement: D.44751_445 = t38_options_394->remote_ip;
Not folded
Folding statement: D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: if (D.39032_454 == 0)
Not folded
Folding statement: D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
Not folded
Folding statement: D.44760_453 = D.44750_447->remote_sdp_ip;
Not folded
Folding statement: if (remote_port_430 == D.44753_448)
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
Not folded
Folding statement: D.44764_458 = switch_channel_get_name (D.44530_457);
Not folded
Folding statement: D.44530_457 = session_161(D)->channel;
Not folded
Folding statement: if (D.44768_479 != 0)
Not folded
Folding statement: D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
Not folded
Folding statement: D.44762_478 = D.44750_475->remote_sdp_port;
Not folded
Folding statement: D.44760_476 = D.44750_475->remote_sdp_ip;
Not folded
Folding statement: D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
Not folded
Folding statement: D.44530_473 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
Not folded
Folding statement: D.44760_472 = D.44750_471->remote_sdp_ip;
Not folded
Folding statement: D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44530_470 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 32, "%d", D.44767_469);
Not folded
Folding statement: D.44767_469 = (int) D.44762_468;
Not folded
Folding statement: D.44762_468 = D.44750_467->remote_sdp_port;
Not folded
Folding statement: D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
Not folded
Folding statement: D.44767_466 = (int) D.44762_465;
Not folded
Folding statement: D.44762_465 = D.44750_462->remote_sdp_port;
Not folded
Folding statement: D.44760_463 = D.44750_462->remote_sdp_ip;
Not folded
Folding statement: D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44766_461 = (int) remote_port_430;
Not folded
Folding statement: D.44765_460 = switch_channel_get_name (D.44530_459);
Not folded
Folding statement: D.44530_459 = session_161(D)->channel;
Not folded
Folding statement: err = 0B;
Not folded
Folding statement: switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
Not folded
Folding statement: err.90_480 = err;
Not folded
Folding PHI node: .MEM_1121 = PHI <.MEM_1270(169), .MEM_1277(170), .MEM_1279(171)>
No folding possible
Folding statement: switch_core_session_rwunlock (other_session.89_491);
Not folded
Folding statement: other_session.89_491 = other_session;
Not folded
Folding statement: switch_core_session_queue_message (other_session.89_490, msg_487);
Not folded
Folding statement: other_session.89_490 = other_session;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
Not folded
Folding statement: msg_487->string_arg = D.44773_489;
Not folded
Folding statement: D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
Not folded
Folding statement: other_session.89_488 = other_session;
Not folded
Folding statement: msg_487->from = "src/switch_core_media.c";
Not folded
Folding statement: msg_487->message_id = 21;
Not folded
Folding statement: # DEBUG msg => msg_487
Not folded
Folding statement: msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
Not folded
Folding statement: other_session.89_486 = other_session;
Not folded
Folding statement: switch_channel_set_flag_value (D.44772_485, 101, 1);
Not folded
Folding statement: D.44772_485 = other_session.89_484->channel;
Not folded
Folding statement: other_session.89_484 = other_session;
Not folded
Folding statement: switch_channel_set_flag_value (D.44482_483, 101, 1);
Not folded
Folding statement: D.44482_483 = D.44481_482->channel;
Not folded
Folding statement: D.44481_482 = smh_186->session;
Not folded
Folding statement: switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
Not folded
Folding statement: other_session.89_481 = other_session;
Not folded
Folding PHI node: got_avp_1860 = PHI <got_avp_68(140), got_avp_1741(141), got_avp_1741(142)>
No folding possible
Folding PHI node: got_savp_1740 = PHI <got_savp_74(140), got_savp_1712(141), got_savp_1712(142)>
No folding possible
Folding PHI node: got_udptl_1744 = PHI <got_udptl_1869(140), got_udptl_775(141), got_udptl_775(142)>
No folding possible
Folding PHI node: prephitmp.1028_1815 = PHI <prephitmp.1049_1809(140), prephitmp.1057_1806(141), prephitmp.1057_1806(142)>
No folding possible
Folding statement: if (prephitmp.1028_1815 == 2)
Not folded
Folding statement: if (D.44779_497 != 0)
Not folded
Folding statement: D.44779_497 = D.44778_496 & D.44777_495;
Not folded
Folding statement: D.44778_496 = got_audio_1694 == 0;
Not folded
Folding statement: D.44777_495 = D.44697_494 != 0;
Not folded
Folding statement: D.44697_494 = m_1765->m_port;
Not folded
Folding statement: if (D.44781_498 != 0)
Not folded
Folding statement: D.44781_498 = switch_rtp_has_dtls ();
Not folded
Folding statement: if (D.44784_499 != 0)
Not folded
Folding statement: D.44784_499 = dtls_ok (session_161(D));
Not folded
Folding statement: if (attr_500 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_500
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_1867
Not folded
Folding statement: # DEBUG attr => attr_500
Not folded
Folding statement: attr_500 = m_1765->m_attributes;
Not folded
Folding PHI node: attr_1560 = PHI <attr_506(184), attr_500(178)>
No folding possible
Folding PHI node: got_crypto_361 = PHI <got_crypto_50(184), got_crypto_1867(178)>
No folding possible
Folding statement: if (D.44787_502 == 0)
Not folded
Folding statement: D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
Not folded
Folding statement: D.44590_501 = attr_1560->a_name;
Not folded
Folding statement: if (D.44619_503 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_503
Not folded
Folding statement: D.44619_503 = attr_1560->a_value;
Not folded
Folding statement: if (D.47888_1470 == 0)
Not folded
Folding statement: D.47888_1470 = *D.44619_503;
Not folded
Folding PHI node: got_crypto_50 = PHI <got_crypto_361(179), got_crypto_361(182), 1(181), got_crypto_361(180)>
No folding possible
Folding statement: if (attr_506 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_506
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_50
Not folded
Folding statement: # DEBUG attr => attr_506
Not folded
Folding statement: attr_506 = attr_1560->a_next;
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_50
Not folded
Folding PHI node: .MEM_1123 = PHI <.MEM_1291(175), .MEM_1292(176)>
No folding possible
Folding statement: if (attr_507 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_507
Not folded
Folding statement: # DEBUG ptime => dptime_1036
Not folded
Folding statement: # DEBUG maxptime => dmaxptime_1006
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_1867
Not folded
Folding statement: # DEBUG attr => attr_507
Not folded
Folding statement: attr_507 = m_1765->m_attributes;
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_1867
Not folded
Folding PHI node: attr_1600 = PHI <attr_923(482), attr_548(214)>
No folding possible
Folding PHI node: ptime_1476 = PHI <dptime_1036(482), ptime_34(214)>
No folding possible
Folding PHI node: maxptime_1471 = PHI <dmaxptime_1006(482), maxptime_38(214)>
No folding possible
Folding PHI node: got_crypto_1119 = PHI <got_crypto_141(482), got_crypto_53(214)>
No folding possible
Folding PHI node: .MEM_1109 = PHI <.MEM_114(482), .MEM_1125(214)>
No folding possible
Folding statement: if (D.44795_509 == 0)
Not folded
Folding statement: D.44795_509 = strcasecmp (D.44590_508, "rtcp");
Not folded
Folding statement: D.44590_508 = attr_1600->a_name;
Not folded
Folding statement: if (D.44619_510 != 0B)
Not folded
Folding statement: D.44619_510 = attr_1600->a_value;
Not folded
Folding statement: if (D.44800_517 == 0B)
Not folded
Folding statement: D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
Not folded
Folding statement: D.44471_516 = smh_186->mparams;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;
Not folded
Folding statement: D.44799_515 = (short unsigned int) D.47891_1472;
Not folded
Folding statement: D.47891_1472 = strtol (D.44619_513, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_513
Not folded
Folding statement: D.44619_513 = attr_1600->a_value;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_510, 1);
Not folded
Folding statement: D.44530_511 = session_161(D)->channel;
Not folded
Folding statement: D.44471_516->rtcp_audio_interval_msec = "5000";
Not folded
Folding statement: if (D.44805_520 == 0)
Not folded
Folding statement: D.44805_520 = strcasecmp (D.44590_508, "ptime");
Not folded
Folding statement: if (D.44619_521 != 0B)
Not folded
Folding statement: D.44619_521 = attr_1600->a_value;
Not folded
Folding statement: # DEBUG ptime => NULL
Not folded
Folding statement: ptime_1473 = strtol (D.44619_521, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_521
Not folded
Folding statement: if (D.44810_525 == 0)
Not folded
Folding statement: D.44810_525 = strcasecmp (D.44590_508, "maxptime");
Not folded
Folding statement: if (D.44619_526 != 0B)
Not folded
Folding statement: D.44619_526 = attr_1600->a_value;
Not folded
Folding statement: # DEBUG maxptime => NULL
Not folded
Folding statement: maxptime_1474 = strtol (D.44619_526, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_526
Not folded
Folding statement: if (got_crypto_1119 <= 0)
Not folded
Folding statement: if (D.44815_530 == 0)
Not folded
Folding statement: D.44815_530 = strcasecmp (D.44590_508, "crypto");
Not folded
Folding statement: if (D.44619_531 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_531
Not folded
Folding statement: D.44619_531 = attr_1600->a_value;
Not folded
Folding statement: if (D.47901_1475 == 0)
Not folded
Folding statement: D.47901_1475 = *D.44619_531;
Not folded
Folding statement: if (D.44825_537 != 0B)
Not folded
Folding statement: # DEBUG expr => D.44825_537
Not folded
Folding statement: D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
Not folded
Folding statement: D.44530_536 = session_161(D)->channel;
Not folded
Folding statement: if (D.49724_1591 == 0)
Not folded
Folding statement: D.49724_1591 = strcasecmp (D.44825_537, "yes");
Not folded
Folding statement: if (D.49725_1592 == 0)
Not folded
Folding statement: D.49725_1592 = strcasecmp (D.44825_537, "on");
Not folded
Folding statement: if (D.49726_1593 == 0)
Not folded
Folding statement: D.49726_1593 = strcasecmp (D.44825_537, "true");
Not folded
Folding statement: if (D.49727_1594 == 0)
Not folded
Folding statement: D.49727_1594 = strcasecmp (D.44825_537, "t");
Not folded
Folding statement: if (D.49728_1595 == 0)
Not folded
Folding statement: D.49728_1595 = strcasecmp (D.44825_537, "enabled");
Not folded
Folding statement: if (D.49729_1596 == 0)
Not folded
Folding statement: D.49729_1596 = strcasecmp (D.44825_537, "active");
Not folded
Folding statement: if (D.49730_1597 == 0)
Not folded
Folding statement: D.49730_1597 = strcasecmp (D.44825_537, "allow");
Not folded
Folding statement: if (D.49731_1598 != 0)
Not folded
Folding statement: D.49731_1598 = switch_is_number (D.44825_537);
Not folded
Folding statement: if (D.49732_1599 != 0)
Not folded
Folding statement: D.49732_1599 = strtol (D.44825_537, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44825_537
Not folded
Folding PHI node: .MEM_1630 = PHI <.MEM_1296(201), .MEM_1296(202), .MEM_1296(203), .MEM_1296(204), .MEM_1296(205), .MEM_1296(206), .MEM_1296(207), .MEM_1648(209)>
No folding possible
Folding statement: pretmp.1034_1640 = attr_1600->a_value;
Not folded
Folding PHI node: cng_pt_1709 = PHI <cng_pt_1718(466)>
No folding possible
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
Not folded
Folding PHI node: .MEM_1124 = PHI <.MEM_1109(465), .MEM_1630(210), .MEM_1885(467)>
No folding possible
Folding PHI node: prephitmp.1031_1893 = PHI <D.44619_531(465), pretmp.1034_1640(210), pretmp.1034_1896(467)>
No folding possible
Folding statement: # DEBUG got_crypto => got_crypto_547
Not folded
Folding statement: got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, prephitmp.1031_1893, crypto_tag_1477, sdp_type_546(D));
Not folded
Folding statement: # DEBUG crypto_tag => NULL
Not folded
Folding statement: crypto_tag_1477 = strtol (prephitmp.1031_1893, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => prephitmp.1031_1893
Not folded
Folding statement: # DEBUG crypto => prephitmp.1031_1893
Not folded
Folding PHI node: ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>
No folding possible
Folding PHI node: maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>
No folding possible
Folding PHI node: got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
No folding possible
Folding PHI node: .MEM_1125 = PHI <.MEM_1295(189), .MEM_1528(192), .MEM_1530(195), .MEM_1109(196), .MEM_1109(197), .MEM_1109(199), .MEM_1299(212), .MEM_1294(188), .MEM_1109(198)>
No folding possible
Folding statement: if (attr_548 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_548
Not folded
Folding statement: # DEBUG ptime => ptime_34
Not folded
Folding statement: # DEBUG maxptime => maxptime_38
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_53
Not folded
Folding statement: # DEBUG attr => attr_548
Not folded
Folding statement: attr_548 = attr_1600->a_next;
Not folded
Folding statement: # DEBUG ptime => ptime_34
Not folded
Folding statement: # DEBUG maxptime => maxptime_38
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_53
Not folded
Folding PHI node: ptime_376 = PHI <ptime_34(213)>
No folding possible
Folding PHI node: maxptime_917 = PHI <maxptime_38(213)>
No folding possible
Folding PHI node: got_crypto_1805 = PHI <got_crypto_53(213)>
No folding possible
Folding PHI node: ptime_1034 = PHI <ptime_376(215), dptime_1036(185), dptime_1036(177)>
No folding possible
Folding PHI node: maxptime_1041 = PHI <maxptime_917(215), dmaxptime_1006(185), dmaxptime_1006(177)>
No folding possible
Folding PHI node: got_crypto_970 = PHI <got_crypto_1805(215), got_crypto_1867(185), got_crypto_1867(177)>
No folding possible
Folding PHI node: .MEM_1580 = PHI <.MEM_1125(215), .MEM_1123(185), .MEM_1292(177)>
No folding possible
Folding statement: if (D.44836_551 != 0)
Not folded
Folding statement: D.44836_551 = D.44834_549 & D.44835_550;
Not folded
Folding statement: D.44835_550 = got_savp_1740 != 0;
Not folded
Folding statement: D.44834_549 = got_crypto_970 == -1;
Not folded
Folding statement: if (D.44839_552 == 0)
Not folded
Folding statement: D.44839_552 = got_avp_1860 | got_webrtc_78;
Not folded
Folding PHI node: cng_pt_1733 = PHI <cng_pt_1718(217)>
No folding possible
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
Not folded
Folding statement: if (connection_555 != 0B)
Not folded
Folding statement: connection_555 = m_1765->m_connections;
Not folded
Folding statement: # DEBUG connection => connection_554
Not folded
Folding statement: connection_554 = sdp_198->sdp_connection;
Not folded
Folding statement: if (connection_554 == 0B)
Not folded
Folding statement: # DEBUG connection => connection_554
Not folded
Folding PHI node: cng_pt_1676 = PHI <cng_pt_1718(220)>
No folding possible
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
Not folded
Folding PHI node: connection_139 = PHI <connection_554(220), connection_555(219)>
No folding possible
Folding statement: if (map_559 != 0B)
Not folded
Folding statement: # DEBUG match => match_1801
Not folded
Folding statement: # DEBUG best_te => best_te_681
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_1718
Not folded
Folding statement: # DEBUG x => NULL
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_477
Not folded
Folding statement: # DEBUG m_idx => m_idx_1870
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_1750
Not folded
Folding statement: # DEBUG map => map_559
Not folded
Folding statement: # DEBUG map => map_559
Not folded
Folding statement: map_559 = m_1765->m_rtpmaps;
Not folded
Folding statement: # DEBUG x => 0
Not folded
Folding PHI node: match_1902 = PHI <match_7(294), match_1801(223)>
No folding possible
Folding PHI node: best_te_1899 = PHI <best_te_19(294), best_te_681(223)>
No folding possible
Folding PHI node: cng_pt_1668 = PHI <cng_pt_24(294), cng_pt_1718(223)>
No folding possible
Folding PHI node: codec_ms_1721 = PHI <codec_ms_91(294), codec_ms_477(223)>
No folding possible
Folding PHI node: m_idx_793 = PHI <m_idx_103(294), m_idx_1870(223)>
No folding possible
Folding PHI node: nm_idx_1756 = PHI <nm_idx_117(294), nm_idx_1750(223)>
No folding possible
Folding PHI node: map_1729 = PHI <map_712(294), map_559(223)>
No folding possible
Folding PHI node: .MEM_1172 = PHI <.MEM_1136(294), .MEM_1580(223)>
No folding possible
Folding statement: if (rm_encoding_561 == 0B)
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_561
Not folded
Folding statement: rm_encoding_561 = map_1729->rm_encoding;
Not folded
Folding statement: codec_fmtp = {};
Not folded
Folding statement: # DEBUG map_bit_rate => 0
Not folded
Folding PHI node: rm_encoding_130 = PHI <rm_encoding_561(224), ""(225)>
No folding possible
Folding statement: if (D.44848_563 == 0)
Not folded
Folding statement: D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_130
Not folded
Folding statement: if (best_te_1899 == 0)
Not folded
Folding statement: if (D.44854_564 == D.44855_566)
Not folded
Folding statement: D.44855_566 = D.44750_565->rm_rate;
Not folded
Folding statement: D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44854_564 = map_1729->rm_rate;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
Not folded
Folding statement: D.44857_569 = (int) best_te_568;
Not folded
Folding statement: # DEBUG best_te => best_te_568
Not folded
Folding statement: best_te_568 = (switch_payload_t) D.44856_567;
Not folded
Folding statement: D.44856_567 = map_1729->rm_pt;
Not folded
Folding statement: if (D.44858_570 == 0)
Not folded
Folding statement: D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
Not folded
Folding statement: if (cng_pt_1668 == 0)
Not folded
Folding statement: if (D.44863_571 == 0)
Not folded
Folding statement: D.44863_571 = strcasecmp (rm_encoding_130, "CN");
Not folded
Folding statement: if (D.44605_574 != 0B)
Not folded
Folding statement: D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_573
Not folded
Folding statement: cng_pt_573 = (switch_payload_t) D.44856_572;
Not folded
Folding statement: D.44856_572 = map_1729->rm_pt;
Not folded
Folding statement: switch_rtp_set_cng_pt (D.44605_576, D.44869_578);
Not folded
Folding statement: D.44869_578 = D.44471_577->cng_pt;
Not folded
Folding statement: D.44471_577 = smh_186->mparams;
Not folded
Folding statement: D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
Not folded
Folding statement: D.44868_575 = (int) cng_pt_573;
Not folded
Folding statement: if (match_1902 != 0)
Not folded
Folding statement: # DEBUG x => NULL
Not folded
Folding statement: if (maxptime_1041 != 0)
Not folded
Folding statement: # DEBUG codec_ms => ptime_1034
Not folded
Folding statement: if (D.44879_584 != 0)
Not folded
Folding statement: D.44879_584 = D.44878_583 | D.44877_582;
Not folded
Folding statement: D.44878_583 = ptime_1034 > maxptime_1041;
Not folded
Folding statement: D.44877_582 = ptime_1034 == 0;
Not folded
Folding statement: if (ptime_1034 == 0)
Not folded
Folding statement: # DEBUG codec_ms => ptime_1034
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_589
Not folded
Folding statement: codec_ms_589 = (int) D.44885_588;
Not folded
Folding statement: D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
Not folded
Folding statement: D.44884_587 = (uint32_t) D.44856_586;
Not folded
Folding statement: D.44856_586 = map_1729->rm_pt;
Not folded
Folding PHI node: codec_ms_87 = PHI <codec_ms_1884(469), codec_ms_589(239), ptime_1034(238)>
No folding possible
Folding PHI node: .MEM_1129 = PHI <.MEM_1304(469), .MEM_1307(239), .MEM_1304(238)>
No folding possible
Folding statement: if (csui.173_591 <= 18)
Not folded
Folding statement: # DEBUG payload => csui.173_591
Not folded
Folding statement: csui.173_591 = (unsigned char) D.44856_590;
Not folded
Folding statement: D.44856_590 = map_1729->rm_pt;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_87
Not folded
Folding statement: map_bit_rate_1480 = CSWTCH.174[csui.173_591];
Not folded
Folding statement: <L500>:
Not folded
Folding PHI node: map_bit_rate_1481 = PHI <0(240), map_bit_rate_1480(241)>
No folding possible
Folding statement: if (ptime_1034 == 0)
Not folded
Folding statement: # DEBUG map_bit_rate => NULL
Not folded
Folding statement: <L502>:
Not folded
Folding statement: <L501>:
Not folded
Folding statement: if (D.44890_594 == 0)
Not folded
Folding statement: D.44890_594 = strcasecmp (D.44889_593, "g723");
Not folded
Folding statement: D.44889_593 = map_1729->rm_encoding;
Not folded
Folding PHI node: codec_ms_88 = PHI <codec_ms_87(242), codec_ms_87(244), 33(243)>
No folding possible
Folding statement: if (D.44893_598 == 0B)
Not folded
Folding statement: # DEBUG s => D.44893_598
Not folded
Folding statement: D.44893_598 = map_1729->rm_fmtp;
Not folded
Folding statement: memset (&codec_fmtp, 0, 16);
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => 0
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_596
Not folded
Folding statement: remote_codec_rate_596 = map_1729->rm_rate;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_88
Not folded
Folding statement: if (D.47916_1482 == 0)
Not folded
Folding statement: D.47916_1482 = *D.44893_598;
Not folded
Folding statement: if (D.44897_601 == 0)
Not folded
Folding statement: D.44897_601 = strcasecmp (D.44889_600, "ilbc");
Not folded
Folding statement: D.44889_600 = map_1729->rm_encoding;
Not folded
Folding statement: if (D.44901_605 == 0)
Not folded
Folding statement: D.44901_605 = strcasecmp (D.44889_600, "isac");
Not folded
Folding statement: if (D.44909_613 != 0)
Not folded
Folding statement: D.44909_613 = codec_fmtp.bits_per_second;
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_615
Not folded
Folding statement: map_bit_rate_615 = (uint32_t) D.44909_613;
Not folded
Folding PHI node: map_bit_rate_131 = PHI <map_bit_rate_1481(250), map_bit_rate_615(251)>
No folding possible
Folding statement: if (D.44912_616 != 0)
Not folded
Folding statement: D.44912_616 = codec_fmtp.microseconds_per_packet;
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_131
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_618
Not folded
Folding statement: codec_ms_618 = D.44912_616 / 1000;
Not folded
Folding PHI node: codec_ms_89 = PHI <codec_ms_88(252), codec_ms_618(253)>
No folding possible
Folding statement: if (fmtp_remote_codec_rate_619 != 0)
Not folded
Folding statement: fmtp_remote_codec_rate_619 = codec_fmtp.actual_samples_per_second;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_89
Not folded
Folding PHI node: codec_ms_90 = PHI <39(249), codec_ms_88(470), codec_ms_89(255), codec_ms_89(254), 32(247), codec_ms_88(248)>
No folding possible
Folding PHI node: fmtp_remote_codec_rate_99 = PHI <0(249), 0(470), 0(255), fmtp_remote_codec_rate_619(254), 0(247), 0(248)>
No folding possible
Folding PHI node: map_bit_rate_132 = PHI <32001(249), map_bit_rate_1481(470), map_bit_rate_131(255), map_bit_rate_131(254), 13332(247), 32099(248)>
No folding possible
Folding PHI node: .MEM_1130 = PHI <.MEM_1308(249), .MEM_1309(470), .MEM_1309(255), .MEM_1309(254), .MEM_1308(247), .MEM_1308(248)>
No folding possible
Folding statement: if (D.45000_1153 != 0)
Not folded
Folding statement: D.45000_1153 = D.44999_1610 & D.44998_1497;
Not folded
Folding statement: D.44999_1610 = total_codecs_85 > 0;
Not folded
Folding statement: D.44998_1497 = D.44997_1499 > 0;
Not folded
Folding statement: D.44997_1499 = D.44471_1502->num_codecs;
Not folded
Folding statement: D.44471_1502 = smh_186->mparams;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_596
Not folded
Folding statement: # DEBUG m_idx => m_idx_793
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_1756
Not folded
Folding statement: # DEBUG i => 0
Not folded
Folding statement: # DEBUG i => 0
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_90
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_132
Not folded
Folding statement: D.44994_693 = codec_ms_90 * 1000;
Not folded
Folding PHI node: remote_codec_rate_1494 = PHI <remote_codec_rate_97(289), remote_codec_rate_596(257)>
No folding possible
Folding PHI node: m_idx_1488 = PHI <m_idx_100(289), m_idx_793(257)>
No folding possible
Folding PHI node: nm_idx_1140 = PHI <nm_idx_115(289), nm_idx_1756(257)>
No folding possible
Folding PHI node: i_1623 = PHI <i_711(289), 0(257)>
No folding possible
Folding PHI node: .MEM_1139 = PHI <.MEM_1133(289), .MEM_1130(257)>
No folding possible
Folding statement: if (D.44922_634 != 0)
Not folded
Folding statement: D.44922_634 = imp_630->codec_type;
Not folded
Folding statement: # DEBUG codec_rate => codec_rate_633
Not folded
Folding statement: codec_rate_633 = imp_630->samples_per_second;
Not folded
Folding statement: # DEBUG bit_rate => (uint32_t) D.44921_631
Not folded
Folding statement: D.44921_631 = imp_630->bits_per_second;
Not folded
Folding statement: # DEBUG imp => imp_630
Not folded
Folding statement: imp_630 = *D.44920_629;
Not folded
Folding statement: D.44920_629 = codec_array_84 + D.44919_628;
Not folded
Folding statement: D.44919_628 = i.91_627 * 4;
Not folded
Folding statement: i.91_627 = (unsigned int) i_1623;
Not folded
Folding statement: if (D.44889_643 == 0B)
Not folded
Folding statement: # DEBUG s => D.44889_643
Not folded
Folding statement: D.44889_643 = map_1729->rm_encoding;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);
Not folded
Folding statement: D.44931_642 = D.44930_641 / 1000;
Not folded
Folding statement: D.44930_641 = imp_630->microseconds_per_packet;
Not folded
Folding statement: D.44929_640 = (int) D.44928_639;
Not folded
Folding statement: D.44928_639 = imp_630->ianacode;
Not folded
Folding statement: D.44927_638 = imp_630->iananame;
Not folded
Folding statement: remote_codec_rate.92_637 = (int) remote_codec_rate_1494;
Not folded
Folding statement: D.44925_636 = (int) D.44856_635;
Not folded
Folding statement: D.44856_635 = map_1729->rm_pt;
Not folded
Folding statement: bit_rate_632 = (uint32_t) D.44921_631;
Not folded
Folding statement: if (D.47920_1484 == 0)
Not folded
Folding statement: D.47920_1484 = *D.44889_643;
Not folded
Folding statement: if (D.44925_651 <= 95)
Not folded
Folding statement: D.44925_651 = (int) D.44856_650;
Not folded
Folding statement: D.44856_650 = map_1729->rm_pt;
Not folded
Folding statement: pretmp.1054_1735 = pretmp.1054_1711 & pretmp.1054_1880;
Not folded
Folding statement: pretmp.1054_1711 = bit_rate_632 != 0;
Not folded
Folding statement: pretmp.1054_1880 = (_Bool) match_656;
Not folded
Folding statement: # DEBUG match => match_656
Not folded
Folding statement: match_656 = D.44925_651 == D.44929_655;
Not folded
Folding statement: D.44929_655 = (int) D.44928_654;
Not folded
Folding statement: D.44928_654 = imp_630->ianacode;
Not folded
Folding statement: if (D.44945_658 == 0)
Not folded
Folding statement: D.44945_658 = strcasecmp (rm_encoding_130, D.44927_657);
Not folded
Folding statement: D.44927_657 = imp_630->iananame;
Not folded
Folding statement: if (remote_codec_rate_1494 == codec_rate_633)
Not folded
Folding statement: pretmp.1046_1812 = pretmp.1046_1811 & 1;
Not folded
Folding statement: pretmp.1046_1811 = bit_rate_632 != 0;
Not folded
Folding statement: pretmp.1046_790 = pretmp.1046_785 & pretmp.1046_1736;
Not folded
Folding statement: pretmp.1046_785 = bit_rate_632 != 0;
Not folded
Folding statement: pretmp.1046_1736 = (_Bool) pretmp.1044_764;
Not folded
Folding statement: pretmp.1044_764 = (uint8_t) iftmp.93_766;
Not folded
Folding statement: iftmp.93_766 = fmtp_remote_codec_rate_99 == D.44948_659;
Not folded
Folding statement: D.44948_659 = imp_630->actual_samples_per_second;
Not folded
Folding PHI node: prephitmp.1045_1679 = PHI <pretmp.1044_764(266), 0(263), 1(265)>
No folding possible
Folding PHI node: prephitmp.1047_1680 = PHI <pretmp.1046_1736(266), 0(263), 1(265)>
No folding possible
Folding PHI node: prephitmp.1047_1678 = PHI <pretmp.1046_790(266), 0(263), pretmp.1046_1812(265)>
No folding possible
Folding statement: if (fmtp_remote_codec_rate_99 != 0)
Not folded
Folding statement: # DEBUG match => prephitmp.1045_1679
Not folded
Folding PHI node: match_1 = PHI <match_656(262), prephitmp.1045_1679(267), prephitmp.1045_1679(268)>
No folding possible
Folding PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_1494(262), remote_codec_rate_1494(267), fmtp_remote_codec_rate_99(268)>
No folding possible
Folding PHI node: prephitmp.1055_1808 = PHI <pretmp.1054_1880(262), prephitmp.1047_1680(267), prephitmp.1047_1680(268)>
No folding possible
Folding PHI node: prephitmp.1055_1807 = PHI <pretmp.1054_1735(262), prephitmp.1047_1678(267), prephitmp.1047_1678(268)>
No folding possible
Folding statement: if (prephitmp.1055_1807 != 0)
Not folded
Folding statement: # DEBUG match => match_1
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_96
Not folded
Folding statement: if (D.44958_669 != 0)
Not folded
Folding statement: D.44958_669 = D.44957_668 & D.44956_667;
Not folded
Folding statement: D.44957_668 = map_bit_rate_132 != bit_rate_632;
Not folded
Folding statement: D.44956_667 = map_bit_rate_132 != 0;
Not folded
Folding statement: if (D.44961_671 != 0)
Not folded
Folding statement: D.44961_671 = strcasecmp (D.44889_643, "ilbc");
Not folded
Folding statement: if (D.44964_673 != 0)
Not folded
Folding statement: D.44964_673 = strcasecmp (D.44889_643, "isac");
Not folded
Folding PHI node: match_2 = PHI <match_1(269), 1(270), 1(271), 1(272)>
No folding possible
Folding PHI node: prephitmp.1041_750 = PHI <prephitmp.1055_1808(269), 1(270), 1(271), 1(272)>
No folding possible
Folding statement: if (D.44970_677 != 0)
Not folded
Folding statement: D.44970_677 = D.44969_676 & prephitmp.1041_750;
Not folded
Folding statement: D.44969_676 = remote_codec_rate_96 != 0;
Not folded
Folding statement: # DEBUG match => match_2
Not folded
Folding statement: if (D.44975_680 != 0)
Not folded
Folding statement: D.44975_680 = D.44974_679 & D.44973_678;
Not folded
Folding statement: D.44974_679 = remote_codec_rate_96 != codec_rate_633;
Not folded
Folding statement: D.44973_678 = codec_rate_633 != 0;
Not folded
Folding statement: if (D.44978_682 == 0)
Not folded
Folding statement: D.44978_682 = strcasecmp (D.44889_643, "pcma");
Not folded
Folding statement: if (D.44980_684 == 0)
Not folded
Folding statement: D.44980_684 = strcasecmp (D.44889_643, "pcmu");
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
Not folded
Folding statement: if (match_2 != 0)
Not folded
Folding statement: # DEBUG match => match_2
Not folded
Folding statement: if (scrooge_80 != 0)
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44927_686, D.44985_687, D.44931_689);
Not folded
Folding statement: D.44931_689 = D.44930_688 / 1000;
Not folded
Folding statement: D.44930_688 = imp_630->microseconds_per_packet;
Not folded
Folding statement: D.44985_687 = imp_630->samples_per_second;
Not folded
Folding statement: D.44927_686 = imp_630->iananame;
Not folded
Folding statement: if (D.44992_692 != 0)
Not folded
Folding statement: D.44992_692 = D.44991_691 & D.44990_690;
Not folded
Folding statement: D.44991_691 = codec_ms_90 != 0;
Not folded
Folding statement: D.44990_690 = ptime_1034 != 0;
Not folded
Folding statement: if (D.44994_693 != D.44930_694)
Not folded
Folding statement: D.44930_694 = imp_630->microseconds_per_packet;
Not folded
Folding statement: if (remote_codec_rate_96 != codec_rate_633)
Not folded
Folding statement: pretmp.1042_1737 = imp_630->microseconds_per_packet;
Not folded
Folding PHI node: prephitmp.1043_1681 = PHI <D.44930_694(282), pretmp.1042_1737(284)>
No folding possible
Folding statement: # DEBUG nm_idx => nm_idx_702
Not folded
Folding statement: nm_idx_702 = nm_idx_1140 + 1;
Not folded
Folding statement: near_matches[nm_idx_1140].map = map_1729;
Not folded
Folding statement: near_matches[nm_idx_1140].imp = imp_630;
Not folded
Folding statement: near_matches[nm_idx_1140].rate = remote_codec_rate.92_701;
Not folded
Folding statement: remote_codec_rate.92_701 = (int) remote_codec_rate_96;
Not folded
Folding statement: near_matches[nm_idx_1140].codec_idx = i_1623;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927_696, D.44929_698, codec_rate_633, D.44931_700, bit_rate_632);
Not folded
Folding statement: D.44931_700 = prephitmp.1043_1681 / 1000;
Not folded
Folding statement: D.44929_698 = (int) D.44928_697;
Not folded
Folding statement: D.44928_697 = imp_630->ianacode;
Not folded
Folding statement: D.44927_696 = imp_630->iananame;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding PHI node: .MEM_1132 = PHI <.MEM_1312(280), .MEM_1310(283)>
No folding possible
Folding statement: if (m_idx_704 > 29)
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927_705, D.44929_707, codec_rate_633, D.44931_709, bit_rate_632);
Not folded
Folding statement: D.44931_709 = D.44930_708 / 1000;
Not folded
Folding statement: D.44930_708 = imp_630->microseconds_per_packet;
Not folded
Folding statement: D.44929_707 = (int) D.44928_706;
Not folded
Folding statement: D.44928_706 = imp_630->ianacode;
Not folded
Folding statement: D.44927_705 = imp_630->iananame;
Not folded
Folding statement: # DEBUG m_idx => m_idx_704
Not folded
Folding statement: m_idx_704 = m_idx_1488 + 1;
Not folded
Folding statement: matches[m_idx_1488].map = map_1729;
Not folded
Folding statement: matches[m_idx_1488].imp = imp_630;
Not folded
Folding statement: matches[m_idx_1488].rate = codec_rate.94_703;
Not folded
Folding statement: codec_rate.94_703 = (int) codec_rate_633;
Not folded
Folding statement: matches[m_idx_1488].codec_idx = i_1623;
Not folded
Folding PHI node: codec_ms_1734 = PHI <codec_ms_90(286)>
No folding possible
Folding PHI node: m_idx_1799 = PHI <m_idx_704(286)>
No folding possible
Folding PHI node: nm_idx_1708 = PHI <nm_idx_1140(286)>
No folding possible
Folding PHI node: cng_pt_1706 = PHI <cng_pt_1668(286)>
No folding possible
Folding PHI node: best_te_1730 = PHI <best_te_1899(286)>
No folding possible
Folding PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
No folding possible
Folding PHI node: m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>
No folding possible
Folding PHI node: nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
No folding possible
Folding PHI node: .MEM_1133 = PHI <.MEM_1139(258), .MEM_1311(277), .MEM_1317(285), .MEM_1322(286), .MEM_1310(278), .MEM_1310(272)>
No folding possible
Folding statement: if (D.45000_626 != 0)
Not folded
Folding statement: D.45000_626 = D.44999_625 & D.44998_624;
Not folded
Folding statement: D.44999_625 = total_codecs_85 > i_711;
Not folded
Folding statement: D.44998_624 = D.44997_623 > i_711;
Not folded
Folding statement: D.44997_623 = D.44471_622->num_codecs;
Not folded
Folding statement: D.44471_622 = smh_186->mparams;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_97
Not folded
Folding statement: # DEBUG m_idx => m_idx_100
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_115
Not folded
Folding statement: # DEBUG i => i_711
Not folded
Folding statement: # DEBUG i => i_711
Not folded
Folding statement: i_711 = i_1623 + 1;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_97
Not folded
Folding statement: # DEBUG m_idx => m_idx_100
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_115
Not folded
Folding PHI node: m_idx_527 = PHI <m_idx_100(288)>
No folding possible
Folding PHI node: nm_idx_1649 = PHI <nm_idx_115(288)>
No folding possible
Folding PHI node: m_idx_102 = PHI <m_idx_527(290), m_idx_793(256)>
No folding possible
Folding PHI node: nm_idx_902 = PHI <nm_idx_1649(290), nm_idx_1756(256)>
No folding possible
Folding PHI node: .MEM_49 = PHI <.MEM_1133(290), .MEM_1130(256)>
No folding possible
Folding statement: if (m_idx_102 > 29)
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG m_idx => m_idx_102
Not folded
Folding PHI node: codec_ms_1710 = PHI <codec_ms_90(291)>
No folding possible
Folding PHI node: m_idx_529 = PHI <m_idx_102(291)>
No folding possible
Folding PHI node: nm_idx_1793 = PHI <nm_idx_902(291)>
No folding possible
Folding PHI node: cng_pt_1732 = PHI <cng_pt_1668(291)>
No folding possible
Folding PHI node: best_te_652 = PHI <best_te_1899(291)>
No folding possible
Folding PHI node: match_7 = PHI <match_1902(229), match_1902(234), match_1902(228), match_1902(235), 0(291), match_1902(233)>
No folding possible
Folding PHI node: best_te_19 = PHI <best_te_568(229), best_te_1899(234), best_te_1899(228), best_te_1899(235), best_te_1899(291), best_te_1899(233)>
No folding possible
Folding PHI node: cng_pt_24 = PHI <cng_pt_1668(229), cng_pt_573(234), cng_pt_1668(228), cng_pt_1668(235), cng_pt_1668(291), cng_pt_573(233)>
No folding possible
Folding PHI node: codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>
No folding possible
Folding PHI node: m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
No folding possible
Folding PHI node: nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
No folding possible
Folding PHI node: .MEM_1136 = PHI <.MEM_1303(229), .MEM_1306(234), .MEM_1302(228), .MEM_1304(235), .MEM_49(291), .MEM_1304(233)>
No folding possible
Folding statement: if (map_712 != 0B)
Not folded
Folding statement: # DEBUG match => match_7
Not folded
Folding statement: # DEBUG best_te => best_te_19
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_24
Not folded
Folding statement: # DEBUG x => NULL
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_91
Not folded
Folding statement: # DEBUG m_idx => m_idx_103
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_117
Not folded
Folding statement: # DEBUG map => map_712
Not folded
Folding statement: # DEBUG map => map_712
Not folded
Folding statement: map_712 = map_1729->rm_next;
Not folded
Folding statement: # DEBUG match => match_7
Not folded
Folding statement: # DEBUG best_te => best_te_19
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_24
Not folded
Folding statement: # DEBUG x => NULL
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_91
Not folded
Folding statement: # DEBUG m_idx => m_idx_103
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_117
Not folded
Folding PHI node: match_1892 = PHI <match_7(293)>
No folding possible
Folding PHI node: best_te_1685 = PHI <best_te_19(293)>
No folding possible
Folding PHI node: cng_pt_1682 = PHI <cng_pt_24(293)>
No folding possible
Folding PHI node: codec_ms_1803 = PHI <codec_ms_91(293)>
No folding possible
Folding PHI node: m_idx_1802 = PHI <m_idx_103(293)>
No folding possible
Folding PHI node: nm_idx_683 = PHI <nm_idx_117(293)>
No folding possible
Folding PHI node: match_9 = PHI <1(287), match_1892(295), 0(292), match_1801(222)>
No folding possible
Folding PHI node: codec_ms_93 = PHI <codec_ms_1734(287), codec_ms_1803(295), codec_ms_1710(292), codec_ms_477(222)>
No folding possible
Folding PHI node: m_idx_105 = PHI <m_idx_1799(287), m_idx_1802(295), m_idx_529(292), m_idx_1870(222)>
No folding possible
Folding PHI node: nm_idx_119 = PHI <nm_idx_1708(287), nm_idx_683(295), nm_idx_1793(292), nm_idx_1750(222)>
No folding possible
Folding PHI node: .MEM_1138 = PHI <.MEM_1322(287), .MEM_1136(295), .MEM_49(292), .MEM_1580(222)>
No folding possible
Folding PHI node: best_te_1625 = PHI <best_te_1730(287), best_te_1685(295), best_te_652(292), best_te_681(222)>
No folding possible
Folding PHI node: cng_pt_1627 = PHI <cng_pt_1706(287), cng_pt_1682(295), cng_pt_1732(292), cng_pt_1718(222)>
No folding possible
Folding statement: if (D.45005_716 != 0)
Not folded
Folding statement: D.45005_716 = D.45004_715 & D.45003_714;
Not folded
Folding statement: D.45004_715 = got_crypto_970 <= 0;
Not folded
Folding statement: D.45003_714 = D.45002_713 == 1;
Not folded
Folding statement: D.45002_713 = smh_186->crypto_mode;
Not folded
Folding statement: # DEBUG match => match_9
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_93
Not folded
Folding statement: # DEBUG m_idx => m_idx_105
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_119
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
Not folded
Folding statement: if (D.45010_722 != 0)
Not folded
Folding statement: D.45010_722 = D.45009_721 & D.45008_720;
Not folded
Folding statement: D.45009_721 = nm_idx_119 != 0;
Not folded
Folding statement: D.45008_720 = m_idx_105 == 0;
Not folded
Folding statement: # DEBUG match => match_9
Not folded
Folding statement: # DEBUG m_idx => m_idx_105
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_119
Not folded
Folding PHI node: j_1846 = PHI <j_737(310), 0(299)>
No folding possible
Folding PHI node: .MEM_1847 = PHI <.MEM_1326(310), .MEM_1138(299)>
No folding possible
Folding statement: if (near_rate_726 == 0)
Not folded
Folding statement: D.45014_729 = near_match_727->iananame;
Not folded
Folding statement: # DEBUG near_map => near_map_728
Not folded
Folding statement: near_map_728 = near_matches[j_1846].map;
Not folded
Folding statement: # DEBUG near_match => near_match_727
Not folded
Folding statement: near_match_727 = near_matches[j_1846].imp;
Not folded
Folding statement: # DEBUG near_rate => near_rate_726
Not folded
Folding statement: near_rate_726 = (uint32_t) near_rate.96_725;
Not folded
Folding statement: near_rate.96_725 = near_matches[j_1846].rate;
Not folded
Folding statement: # DEBUG timp => 0B
Not folded
Folding statement: near_rate_730 = near_match_727->samples_per_second;
Not folded
Folding PHI node: near_rate_145 = PHI <near_rate_730(301), near_rate_726(300)>
No folding possible
Folding statement: if (num_732 != 0)
Not folded
Folding statement: # DEBUG num => num_732
Not folded
Folding statement: num_732 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);
Not folded
Folding statement: prefs[0] = &tmp;
Not folded
Folding statement: switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45014_729, near_rate_145, codec_ms_93);
Not folded
Folding statement: # DEBUG timp => timp_733
Not folded
Folding statement: timp_733 = search[0];
Not folded
Folding PHI node: timp_134 = PHI <timp_733(303), near_match_727(302)>
No folding possible
Folding statement: if (maxptime_1041 == 0)
Not folded
Folding statement: # DEBUG timp => timp_134
Not folded
Folding PHI node: timp_330 = PHI <timp_134(304)>
No folding possible
Folding PHI node: near_rate.96_1798 = PHI <near_rate.96_725(304)>
No folding possible
Folding PHI node: near_map_1731 = PHI <near_map_728(304)>
No folding possible
Folding PHI node: j_1767 = PHI <j_1846(304)>
No folding possible
Folding statement: pretmp.1038_847 = pretmp.1036_1897 / 1000;
Not folded
Folding statement: pretmp.1036_1897 = timp_330->microseconds_per_packet;
Not folded
Folding statement: if (D.45026_736 <= maxptime_1041)
Not folded
Folding statement: D.45026_736 = D.45025_735 / 1000;
Not folded
Folding statement: D.45025_735 = timp_134->microseconds_per_packet;
Not folded
Folding PHI node: timp_1800 = PHI <timp_134(306)>
No folding possible
Folding PHI node: near_rate.96_1797 = PHI <near_rate.96_725(306)>
No folding possible
Folding PHI node: near_map_1707 = PHI <near_map_728(306)>
No folding possible
Folding PHI node: D.45026_1795 = PHI <D.45026_736(306)>
No folding possible
Folding PHI node: j_1705 = PHI <j_1846(306)>
No folding possible
Folding PHI node: prephitmp.1039_858 = PHI <pretmp.1038_847(305), D.45026_1795(307)>
No folding possible
Folding PHI node: timp_1786 = PHI <timp_330(305), timp_1800(307)>
No folding possible
Folding PHI node: near_rate.96_617 = PHI <near_rate.96_1798(305), near_rate.96_1797(307)>
No folding possible
Folding PHI node: near_map_1788 = PHI <near_map_1731(305), near_map_1707(307)>
No folding possible
Folding PHI node: j_1787 = PHI <j_1767(305), j_1705(307)>
No folding possible
Folding statement: # DEBUG match => 1
Not folded
Folding statement: # DEBUG m_idx => 1
Not folded
Folding statement: # DEBUG m_idx => 1
Not folded
Folding statement: matches[0].map = near_map_1788;
Not folded
Folding statement: matches[0].imp = timp_1786;
Not folded
Folding statement: matches[0].rate = near_rate.96_617;
Not folded
Folding statement: matches[0].codec_idx = D.45029_743;
Not folded
Folding statement: D.45029_743 = near_matches[j_1787].codec_idx;
Not folded
Folding statement: # DEBUG match => 1
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45027_738, prephitmp.1039_858, D.45028_741);
Not folded
Folding statement: D.45028_741 = timp_1786->actual_samples_per_second;
Not folded
Folding statement: D.45027_738 = timp_1786->iananame;
Not folded
Folding statement: if (nm_idx_119 > j_737)
Not folded
Folding statement: # DEBUG j => j_737
Not folded
Folding statement: # DEBUG j => j_737
Not folded
Folding statement: j_737 = j_1846 + 1;
Not folded
Folding statement: if (m_idx_105 != 0)
Not folded
Folding statement: # DEBUG match => match_9
Not folded
Folding statement: # DEBUG m_idx => m_idx_105
Not folded
Folding PHI node: m_idx_1716 = PHI <m_idx_105(311), 1(308)>
No folding possible
Folding PHI node: .MEM_1857 = PHI <.MEM_1138(311), .MEM_1331(308)>
No folding possible
Folding statement: if (greedy_47 != 0)
Not folded
Folding statement: greedy_sort (smh_186, &matches, m_idx_1716, codec_array_84, total_codecs_85);
Not folded
Folding PHI node: .MEM_1142 = PHI <.MEM_1857(312), .MEM_1332(313)>
No folding possible
Folding statement: if (m_idx_1716 > 0)
Not folded
Folding statement: # DEBUG j => 0
Not folded
Folding statement: # DEBUG j => 0
Not folded
Folding statement: smh_186->num_negotiated_codecs = 0;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;
Not folded
Folding statement: # DEBUG match => 1
Not folded
Folding PHI node: j_1882 = PHI <j_808(333), 0(315)>
No folding possible
Folding PHI node: .MEM_1881 = PHI <.MEM_1365(333), .MEM_1334(315)>
No folding possible
Folding statement: if (j_1882 == 0)
Not folded
Folding statement: # DEBUG mmap => mmap_763
Not folded
Folding statement: mmap_763 = matches[j_1882].map;
Not folded
Folding statement: # DEBUG mimp => mimp_762
Not folded
Folding statement: mimp_762 = matches[j_1882].imp;
Not folded
Folding statement: # DEBUG pmap => pmap_761
Not folded
Folding statement: pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);
Not folded
Folding statement: D.45044_760 = (uint32_t) D.45043_759;
Not folded
Folding statement: D.45043_759 = D.45042_758 / 1000;
Not folded
Folding statement: D.45042_758 = D.45040_755->microseconds_per_packet;
Not folded
Folding statement: D.45041_756 = D.45040_755->samples_per_second;
Not folded
Folding statement: D.45040_755 = matches[j_1882].imp;
Not folded
Folding statement: D.45039_754 = (uint32_t) D.45038_753;
Not folded
Folding statement: D.45038_753 = D.45035_748->rm_pt;
Not folded
Folding statement: D.45037_751 = D.45035_748->rm_fmtp;
Not folded
Folding statement: D.45036_749 = D.45035_748->rm_encoding;
Not folded
Folding statement: D.45035_748 = matches[j_1882].map;
Not folded
Folding statement: if (D.44605_765 != 0B)
Not folded
Folding statement: D.44605_765 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: pmap_761->current = 1;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_761;
Not folded
Folding statement: switch_rtp_set_default_payload (D.44605_765, D.45049_767);
Not folded
Folding statement: D.45049_767 = pmap_761->pt;
Not folded
Folding PHI node: .MEM_1143 = PHI <.MEM_1335(316), .MEM_1337(317), .MEM_1338(318)>
No folding possible
Folding statement: if (D.45057_777 != 0)
Not folded
Folding statement: D.45057_777 = strcasecmp (D.45052_776, "g722");
Not folded
Folding statement: D.45052_776 = mimp_762->iananame;
Not folded
Folding statement: pmap_761->adv_rm_rate = D.45056_774;
Not folded
Folding statement: pmap_761->rm_rate = D.45056_774;
Not folded
Folding statement: D.45056_774 = mimp_762->samples_per_second;
Not folded
Folding statement: pmap_761->recv_pt = D.45055_773;
Not folded
Folding statement: D.45055_773 = (unsigned char) D.45054_772;
Not folded
Folding statement: D.45054_772 = mmap_763->rm_pt;
Not folded
Folding statement: pmap_761->iananame = D.45053_771;
Not folded
Folding statement: D.45053_771 = switch_core_perform_session_strdup (session_161(D), D.45052_770, "src/switch_core_media.c", &__func__, 3536);
Not folded
Folding statement: D.45052_770 = mimp_762->iananame;
Not folded
Folding statement: pmap_761->rm_encoding = D.45051_769;
Not folded
Folding statement: D.45051_769 = switch_core_perform_session_strdup (session_161(D), D.45050_768, "src/switch_core_media.c", &__func__, 3535);
Not folded
Folding statement: D.45050_768 = mmap_763->rm_encoding;
Not folded
Folding statement: pmap_761->rm_rate = D.45060_778;
Not folded
Folding statement: D.45060_778 = mimp_762->actual_samples_per_second;
Not folded
Folding PHI node: .MEM_1144 = PHI <.MEM_1345(319), .MEM_1346(320)>
No folding possible
Folding statement: if (D.45067_784 != 0B)
Not folded
Folding statement: D.45067_784 = mmap_763->rm_params;
Not folded
Folding statement: pmap_761->bitrate = D.45065_783;
Not folded
Folding statement: D.45065_783 = (uint32_t) D.45064_782;
Not folded
Folding statement: D.45064_782 = mimp_762->bits_per_second;
Not folded
Folding statement: pmap_761->codec_ms = D.45063_781;
Not folded
Folding statement: D.45063_781 = (uint32_t) D.45062_780;
Not folded
Folding statement: D.45062_780 = D.45061_779 / 1000;
Not folded
Folding statement: D.45061_779 = mimp_762->microseconds_per_packet;
Not folded
Folding statement: D.47923_1486 = strtol (D.45067_784, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.45067_784
Not folded
Folding PHI node: D.47923_146 = PHI <D.47923_1486(322), 1(321)>
No folding possible
Folding PHI node: .MEM_1515 = PHI <.MEM_1538(322), .MEM_1348(321)>
No folding possible
Folding statement: if (D.45071_789 == 0)
Not folded
Folding statement: D.45071_789 = strcasecmp (D.45050_788, "opus");
Not folded
Folding statement: D.45050_788 = mmap_763->rm_encoding;
Not folded
Folding statement: pmap_761->channels = D.47923_146;
Not folded
Folding statement: if (D.47923_146 == 1)
Not folded
Folding statement: pmap_761->adv_channels = 1;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
Not folded
Folding statement: pmap_761->adv_channels = 2;
Not folded
Folding PHI node: .MEM_1145 = PHI <.MEM_1351(325), .MEM_1352(326)>
No folding possible
Folding statement: if (D.45080_791 == 0B)
Not folded
Folding statement: # DEBUG s => D.45080_791
Not folded
Folding statement: D.45080_791 = mmap_763->rm_fmtp;
Not folded
Folding statement: if (D.47927_1487 == 0)
Not folded
Folding statement: D.47927_1487 = *D.45080_791;
Not folded
Folding statement: pmap_761->channels = 2;
Not folded
Folding PHI node: .MEM_1146 = PHI <.MEM_1145(328), .MEM_1353(472), .MEM_1145(327)>
No folding possible
Folding statement: pmap_761->channels = 1;
Not folded
Folding statement: pmap_761->adv_channels = D.47923_146;
Not folded
Folding PHI node: .MEM_1147 = PHI <.MEM_1355(330), .MEM_1356(331), .MEM_1354(329)>
No folding possible
Folding statement: if (j_808 < m_idx_1716)
Not folded
Folding statement: # DEBUG j => j_808
Not folded
Folding statement: # DEBUG j => j_808
Not folded
Folding statement: j_808 = j_1882 + 1;
Not folded
Folding statement: pmap_761->recv_pt = D.45055_807;
Not folded
Folding statement: D.45055_807 = (unsigned char) D.45054_806;
Not folded
Folding statement: D.45054_806 = mmap_763->rm_pt;
Not folded
Folding statement: smh_186->num_negotiated_codecs = D.45090_805;
Not folded
Folding statement: D.45090_805 = D.44655_804 + 1;
Not folded
Folding statement: smh_186->negotiated_codecs[D.44655_804] = mimp_762;
Not folded
Folding statement: D.44655_804 = smh_186->num_negotiated_codecs;
Not folded
Folding statement: pmap_761->agreed_pt = D.45055_803;
Not folded
Folding statement: D.45055_803 = (unsigned char) D.45054_802;
Not folded
Folding statement: D.45054_802 = mmap_763->rm_pt;
Not folded
Folding statement: pmap_761->rm_fmtp = D.45089_801;
Not folded
Folding statement: D.45089_801 = switch_core_perform_session_strdup (session_161(D), D.45080_800, "src/switch_core_media.c", &__func__, 3565);
Not folded
Folding statement: D.45080_800 = mmap_763->rm_fmtp;
Not folded
Folding statement: pmap_761->remote_sdp_port = D.45088_799;
Not folded
Folding statement: D.45088_799 = (short unsigned int) D.44697_798;
Not folded
Folding statement: D.44697_798 = m_1765->m_port;
Not folded
Folding statement: pmap_761->remote_sdp_ip = D.45087_797;
Not folded
Folding statement: D.45087_797 = switch_core_perform_session_strdup (session_161(D), D.45086_796, "src/switch_core_media.c", &__func__, 3563);
Not folded
Folding statement: D.45086_796 = connection_139->c_address;
Not folded
Folding PHI node: match_12 = PHI <match_9(309), match_9(311), 0(297)>
No folding possible
Folding PHI node: .MEM_1149 = PHI <.MEM_1326(309), .MEM_1138(311), .MEM_1323(297)>
No folding possible
Folding PHI node: m_idx_1905 = PHI <0(309), m_idx_105(311), 0(297)>
No folding possible
Folding PHI node: nm_idx_1745 = PHI <nm_idx_119(309), nm_idx_119(311), 0(297)>
No folding possible
Folding statement: if (match_12 != 0)
Not folded
Folding statement: # DEBUG match => match_12
Not folded
Folding PHI node: match_1713 = PHI <match_12(334), 1(474)>
No folding possible
Folding PHI node: m_idx_1906 = PHI <m_idx_1905(334), m_idx_1716(474)>
No folding possible
Folding PHI node: nm_idx_842 = PHI <nm_idx_1745(334), nm_idx_119(474)>
No folding possible
Folding PHI node: .MEM_1850 = PHI <.MEM_1149(334), .MEM_1697(474)>
No folding possible
Folding statement: if (D.47934_1490 != 0)
Not folded
Folding statement: D.47934_1490 = D.47935_1489 & 256;
Not folded
Folding statement: D.47935_1489 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
Not folded
Folding statement: # DEBUG codec => D#75
Not folded
Folding statement: # DEBUG D#75 => &MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].read_codec
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_819, "rtp_audio_recv_pt", &tmp, 1);
Not folded
Folding statement: D.44530_819 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45094_818);
Not folded
Folding statement: D.45094_818 = (int) D.45093_817;
Not folded
Folding statement: D.45093_817 = D.44750_816->recv_pt;
Not folded
Folding statement: D.44750_816 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_815, "remote_media_port", &tmp, 1);
Not folded
Folding statement: D.44530_815 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_812, "remote_media_ip", D.44760_814, 1);
Not folded
Folding statement: D.44760_814 = D.44750_813->remote_sdp_ip;
Not folded
Folding statement: D.44750_813 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44530_812 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.44767_811);
Not folded
Folding statement: D.44767_811 = (int) D.44762_810;
Not folded
Folding statement: D.44762_810 = D.44750_809->remote_sdp_port;
Not folded
Folding statement: D.44750_809 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: if (D.47933_1491 != 0B)
Not folded
Folding statement: D.47933_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
Not folded
Folding statement: if (D.47932_1492 != 0B)
Not folded
Folding statement: D.47932_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
Not folded
Folding statement: if (D.47931_1493 != 0B)
Not folded
Folding statement: D.47931_1493 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;
Not folded
Folding PHI node: .MEM_1150 = PHI <.MEM_1370(338), .MEM_1371(339), .MEM_1370(335), .MEM_1370(336), .MEM_1370(337)>
No folding possible
Folding statement: if (D.45100_824 == 0)
Not folded
Folding statement: D.45100_824 = switch_core_media_set_codec (session_161(D), 0, D.45099_823);
Not folded
Folding statement: D.45099_823 = D.44471_822->codec_flags;
Not folded
Folding statement: D.44471_822 = smh_186->mparams;
Not folded
Folding statement: check_ice (smh_186, 0, sdp_198, m_1765);
Not folded
Folding statement: # DEBUG got_audio => 1
Not folded
Folding PHI node: match_13 = PHI <0(334), match_1713(341), 0(340)>
No folding possible
Folding PHI node: got_audio_65 = PHI <0(334), 1(341), 0(340)>
No folding possible
Folding PHI node: .MEM_1151 = PHI <.MEM_1149(334), .MEM_1373(341), .MEM_1372(340)>
No folding possible
Folding PHI node: m_idx_1746 = PHI <m_idx_1905(334), m_idx_1906(341), m_idx_1906(340)>
No folding possible
Folding PHI node: nm_idx_844 = PHI <nm_idx_1745(334), nm_idx_842(341), nm_idx_842(340)>
No folding possible
Folding statement: if (best_te_1625 == 0)
Not folded
Folding statement: # DEBUG match => match_13
Not folded
Folding statement: # DEBUG got_audio => got_audio_65
Not folded
Folding statement: if (D.45108_827 != 0)
Not folded
Folding statement: D.45108_827 = switch_media_handle_test_media_flag (smh_186, 8);
Not folded
Folding statement: if (D.45110_829 != 0)
Not folded
Folding statement: D.45110_829 = switch_channel_test_flag (D.44530_828, 93);
Not folded
Folding statement: D.44530_828 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1152 = PHI <.MEM_1374(343), .MEM_1375(344)>
No folding possible
Folding statement: if (best_te_834 != 0)
Not folded
Folding statement: # DEBUG best_te => best_te_834
Not folded
Folding statement: # DEBUG best_te => best_te_834
Not folded
Folding statement: best_te_834 = D.44471_833->te;
Not folded
Folding statement: D.44471_833 = smh_186->mparams;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45112_832);
Not folded
Folding statement: D.45112_832 = (int) D.45111_831;
Not folded
Folding statement: D.45111_831 = D.44471_830->te;
Not folded
Folding statement: D.44471_830 = smh_186->mparams;
Not folded
Folding PHI node: best_te_1861 = PHI <best_te_834(345), best_te_1625(342)>
No folding possible
Folding PHI node: .MEM_1853 = PHI <.MEM_1376(345), .MEM_1151(342)>
No folding possible
Folding statement: if (D.45115_835 == 1)
Not folded
Folding statement: D.45115_835 = switch_channel_direction (channel_162);
Not folded
Folding statement: if (D.44605_841 != 0B)
Not folded
Folding statement: D.44605_841 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: D.44471_840->dtmf_type = 0;
Not folded
Folding statement: D.44471_840 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_839, "dtmf_type", "rfc2833", 1);
Not folded
Folding statement: D.44530_839 = session_161(D)->channel;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_838);
Not folded
Folding statement: D.44857_838 = (int) best_te_1861;
Not folded
Folding statement: # DEBUG te => D#11
Not folded
Folding statement: # DEBUG D#11 => D.44471_836->te
Not folded
Folding statement: D.44471_836->te = best_te_1861;
Not folded
Folding statement: D.44471_836 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_printf (D.44530_843, "rtp_2833_send_payload", "%d", D.44857_838);
Not folded
Folding statement: D.44530_843 = session_161(D)->channel;
Not folded
Folding statement: switch_rtp_set_telephony_event (D.44605_841, best_te_1861);
Not folded
Folding statement: if (D.44605_852 != 0B)
Not folded
Folding statement: D.44605_852 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: D.44471_851->dtmf_type = 0;
Not folded
Folding statement: D.44471_851 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_850, "dtmf_type", "rfc2833", 1);
Not folded
Folding statement: D.44530_850 = session_161(D)->channel;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45121_849);
Not folded
Folding statement: D.45121_849 = (int) best_te_1861;
Not folded
Folding statement: # DEBUG te => best_te_1861
Not folded
Folding statement: D.44471_846->recv_te = best_te_1861;
Not folded
Folding statement: D.44471_846->te = best_te_1861;
Not folded
Folding statement: D.44471_846 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_printf (D.44530_857, "rtp_2833_recv_payload", "%d", D.45121_849);
Not folded
Folding statement: D.44530_857 = session_161(D)->channel;
Not folded
Folding statement: switch_rtp_set_telephony_recv_event (D.44605_856, best_te_1861);
Not folded
Folding statement: D.44605_856 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: switch_channel_set_variable_printf (D.44530_854, "rtp_2833_send_payload", "%d", D.45121_849);
Not folded
Folding statement: D.44530_854 = session_161(D)->channel;
Not folded
Folding statement: switch_rtp_set_telephony_event (D.44605_852, best_te_1861);
Not folded
Folding PHI node: .MEM_1852 = PHI <.MEM_1376(345), .MEM_1375(344)>
No folding possible
Folding statement: if (D.45125_859 != 0B)
Not folded
Folding statement: # DEBUG expr => D.45125_859
Not folded
Folding statement: D.45125_859 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
Not folded
Folding statement: if (D.49736_1601 == 0)
Not folded
Folding statement: D.49736_1601 = strcasecmp (D.45125_859, "no");
Not folded
Folding statement: if (D.49737_1602 == 0)
Not folded
Folding statement: D.49737_1602 = strcasecmp (D.45125_859, "off");
Not folded
Folding statement: if (D.49738_1603 == 0)
Not folded
Folding statement: D.49738_1603 = strcasecmp (D.45125_859, "false");
Not folded
Folding statement: if (D.49739_1604 == 0)
Not folded
Folding statement: D.49739_1604 = strcasecmp (D.45125_859, "f");
Not folded
Folding statement: if (D.49740_1605 == 0)
Not folded
Folding statement: D.49740_1605 = strcasecmp (D.45125_859, "disabled");
Not folded
Folding statement: if (D.49741_1606 == 0)
Not folded
Folding statement: D.49741_1606 = strcasecmp (D.45125_859, "inactive");
Not folded
Folding statement: if (D.49742_1607 == 0)
Not folded
Folding statement: D.49742_1607 = strcasecmp (D.45125_859, "disallow");
Not folded
Folding statement: if (D.49743_1608 != 0)
Not folded
Folding statement: D.49743_1608 = switch_is_number (D.45125_859);
Not folded
Folding statement: if (D.49744_1609 == 0)
Not folded
Folding statement: D.49744_1609 = strtol (D.45125_859, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.45125_859
Not folded
Folding PHI node: .MEM_1632 = PHI <.MEM_1393(352), .MEM_1393(353), .MEM_1393(354), .MEM_1393(355), .MEM_1393(356), .MEM_1393(357), .MEM_1393(358), .MEM_1651(360)>
No folding possible
Folding statement: # DEBUG te => D#13
Not folded
Folding statement: # DEBUG D#13 => D.44471_868->recv_te
Not folded
Folding statement: D.44471_868->recv_te = 0;
Not folded
Folding statement: D.44471_868->te = 0;
Not folded
Folding statement: D.44471_868->dtmf_type = 2;
Not folded
Folding statement: D.44471_868 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_867, "dtmf_type", "none", 1);
Not folded
Folding statement: D.44530_867 = session_161(D)->channel;
Not folded
Folding statement: if (prephitmp.1028_1815 == 3)
Not folded
Folding statement: if (D.44697_874 != 0)
Not folded
Folding statement: D.44697_874 = m_1765->m_port;
Not folded
Folding statement: if (connection_881 != 0B)
Not folded
Folding statement: connection_881 = m_1765->m_connections;
Not folded
Folding statement: # DEBUG connection => connection_880
Not folded
Folding statement: connection_880 = sdp_198->sdp_connection;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_879, "video_possible", "true", 1);
Not folded
Folding statement: D.44530_879 = session_161(D)->channel;
Not folded
Folding statement: memset (&near_matches, 0, 480);
Not folded
Folding statement: memset (&matches, 0, 480);
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG vmatch => 0
Not folded
Folding statement: # DEBUG mimp => 0B
Not folded
Folding statement: if (connection_880 == 0B)
Not folded
Folding statement: # DEBUG connection => connection_880
Not folded
Folding PHI node: cng_pt_1677 = PHI <cng_pt_1718(365)>
No folding possible
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
Not folded
Folding PHI node: connection_110 = PHI <connection_880(365), connection_881(364)>
No folding possible
Folding statement: if (map_884 != 0B)
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_1675
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG map => map_884
Not folded
Folding statement: # DEBUG map => map_884
Not folded
Folding statement: map_884 = m_1765->m_rtpmaps;
Not folded
Folding PHI node: got_video_crypto_556 = PHI <got_video_crypto_961(432), got_video_crypto_1675(368)>
No folding possible
Folding PHI node: m_idx_820 = PHI <m_idx_954(432), 0(368)>
No folding possible
Folding PHI node: map_1621 = PHI <map_1022(432), map_884(368)>
No folding possible
Folding PHI node: .MEM_1873 = PHI <.MEM_1091(432), .MEM_1406(368)>
No folding possible
Folding statement: if (D.45138_885 != 0)
Not folded
Folding statement: D.45138_885 = switch_rtp_has_dtls ();
Not folded
Folding statement: if (D.45141_886 != 0)
Not folded
Folding statement: D.45141_886 = dtls_ok (session_161(D));
Not folded
Folding statement: if (attr_887 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_887
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_556
Not folded
Folding statement: # DEBUG attr => attr_887
Not folded
Folding statement: attr_887 = m_1765->m_attributes;
Not folded
Folding PHI node: attr_1851 = PHI <attr_893(378), attr_887(372)>
No folding possible
Folding PHI node: got_video_crypto_1739 = PHI <got_video_crypto_57(378), got_video_crypto_556(372)>
No folding possible
Folding statement: if (D.45144_889 == 0)
Not folded
Folding statement: D.45144_889 = strcasecmp (D.44590_888, "fingerprint");
Not folded
Folding statement: D.44590_888 = attr_1851->a_name;
Not folded
Folding statement: if (D.44619_890 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_890
Not folded
Folding statement: D.44619_890 = attr_1851->a_value;
Not folded
Folding statement: if (D.47940_1496 == 0)
Not folded
Folding statement: D.47940_1496 = *D.44619_890;
Not folded
Folding PHI node: got_video_crypto_57 = PHI <got_video_crypto_1739(373), got_video_crypto_1739(376), 1(375), got_video_crypto_1739(374)>
No folding possible
Folding statement: if (attr_893 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_893
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_57
Not folded
Folding statement: # DEBUG attr => attr_893
Not folded
Folding statement: attr_893 = attr_1851->a_next;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_57
Not folded
Folding PHI node: .MEM_1154 = PHI <.MEM_1408(369), .MEM_1409(370)>
No folding possible
Folding statement: if (attr_894 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_894
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_556
Not folded
Folding statement: # DEBUG attr => attr_894
Not folded
Folding statement: attr_894 = m_1765->m_attributes;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_556
Not folded
Folding PHI node: attr_620 = PHI <attr_1163(484), attr_979(411)>
No folding possible
Folding PHI node: got_video_crypto_1886 = PHI <got_video_crypto_744(484), got_video_crypto_60(411)>
No folding possible
Folding PHI node: .MEM_1720 = PHI <.MEM_1717(484), .MEM_1157(411)>
No folding possible
Folding statement: if (D.45152_896 == 0)
Not folded
Folding statement: D.45152_896 = strcasecmp (D.44590_895, "framerate");
Not folded
Folding statement: D.44590_895 = attr_620->a_name;
Not folded
Folding statement: if (D.44619_897 != 0B)
Not folded
Folding statement: D.44619_897 = attr_620->a_value;
Not folded
Folding statement: if (D.45155_899 == 0)
Not folded
Folding statement: D.45155_899 = strcasecmp (D.44590_895, "rtcp-fb");
Not folded
Folding statement: if (D.44619_900 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_900
Not folded
Folding statement: D.44619_900 = attr_620->a_value;
Not folded
Folding statement: if (D.47944_1498 == 0)
Not folded
Folding statement: D.47944_1498 = *D.44619_900;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45165_905;
Not folded
Folding statement: D.45165_905 = D.45164_904 + 1;
Not folded
Folding statement: D.45164_904 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
Not folded
Folding PHI node: .MEM_1155 = PHI <.MEM_1410(476), .MEM_1411(385)>
No folding possible
Folding statement: D.44471_906->rtcp_video_interval_msec = "10000";
Not folded
Folding statement: D.44471_906 = smh_186->mparams;
Not folded
Folding statement: if (D.45169_908 == 0)
Not folded
Folding statement: D.45169_908 = strcasecmp (D.44590_895, "rtcp");
Not folded
Folding statement: if (D.44619_909 != 0B)
Not folded
Folding statement: D.44619_909 = attr_620->a_value;
Not folded
Folding statement: if (D.45175_912 == 49)
Not folded
Folding statement: # DEBUG __result => D#78 + -49
Not folded
Folding statement: # DEBUG D#78 => (int) D.45175_912
Not folded
Folding statement: D.45175_912 = MEM[(const unsigned char *)D.44619_909];
Not folded
Folding statement: # DEBUG __s1 => D.44619_909
Not folded
Folding statement: # DEBUG __s2_len => 1
Not folded
Folding statement: if (D.45186_922 == 0)
Not folded
Folding statement: # DEBUG __result => D#79
Not folded
Folding statement: # DEBUG __result => D#79
Not folded
Folding statement: # DEBUG D#79 => (int) D.45186_922
Not folded
Folding statement: D.45186_922 = MEM[(const unsigned char *)D.44619_909 + 1B];
Not folded
Folding statement: if (D.45215_959 == 0B)
Not folded
Folding statement: D.45215_959 = D.44471_958->rtcp_video_interval_msec;
Not folded
Folding statement: D.44471_958 = smh_186->mparams;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45214_957;
Not folded
Folding statement: D.45214_957 = (short unsigned int) D.47947_1500;
Not folded
Folding statement: D.47947_1500 = strtol (D.44619_955, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_955
Not folded
Folding statement: D.44619_955 = attr_620->a_value;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_953, "rtp_remote_video_rtcp_port", D.44619_909, 1);
Not folded
Folding statement: D.44530_953 = session_161(D)->channel;
Not folded
Folding statement: D.44471_958->rtcp_video_interval_msec = "5000";
Not folded
Folding statement: if (got_video_crypto_1886 == 0)
Not folded
Folding statement: if (D.45220_962 == 0)
Not folded
Folding statement: D.45220_962 = strcasecmp (D.44590_895, "crypto");
Not folded
Folding statement: if (D.44619_963 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_963
Not folded
Folding statement: D.44619_963 = attr_620->a_value;
Not folded
Folding statement: if (D.47951_1501 == 0)
Not folded
Folding statement: D.47951_1501 = *D.44619_963;
Not folded
Folding statement: if (D.45228_969 != 0B)
Not folded
Folding statement: # DEBUG expr => D.45228_969
Not folded
Folding statement: D.45228_969 = switch_channel_get_variable_dup (D.44530_968, "rtp_allow_crypto_in_avp", 1, -1);
Not folded
Folding statement: D.44530_968 = session_161(D)->channel;
Not folded
Folding statement: if (D.49748_1611 == 0)
Not folded
Folding statement: D.49748_1611 = strcasecmp (D.45228_969, "yes");
Not folded
Folding statement: if (D.49749_1612 == 0)
Not folded
Folding statement: D.49749_1612 = strcasecmp (D.45228_969, "on");
Not folded
Folding statement: if (D.49750_1613 == 0)
Not folded
Folding statement: D.49750_1613 = strcasecmp (D.45228_969, "true");
Not folded
Folding statement: if (D.49751_1614 == 0)
Not folded
Folding statement: D.49751_1614 = strcasecmp (D.45228_969, "t");
Not folded
Folding statement: if (D.49752_1615 == 0)
Not folded
Folding statement: D.49752_1615 = strcasecmp (D.45228_969, "enabled");
Not folded
Folding statement: if (D.49753_1616 == 0)
Not folded
Folding statement: D.49753_1616 = strcasecmp (D.45228_969, "active");
Not folded
Folding statement: if (D.49754_1617 == 0)
Not folded
Folding statement: D.49754_1617 = strcasecmp (D.45228_969, "allow");
Not folded
Folding statement: if (D.49755_1618 != 0)
Not folded
Folding statement: D.49755_1618 = switch_is_number (D.45228_969);
Not folded
Folding statement: if (D.49756_1619 != 0)
Not folded
Folding statement: D.49756_1619 = strtol (D.45228_969, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.45228_969
Not folded
Folding PHI node: .MEM_1634 = PHI <.MEM_1416(398), .MEM_1416(399), .MEM_1416(400), .MEM_1416(401), .MEM_1416(402), .MEM_1416(403), .MEM_1416(404), .MEM_1654(406)>
No folding possible
Folding statement: pretmp.1030_1890 = attr_620->a_value;
Not folded
Folding PHI node: cng_pt_1791 = PHI <cng_pt_1718(478)>
No folding possible
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
Not folded
Folding PHI node: .MEM_1156 = PHI <.MEM_1720(477), .MEM_1634(407), .MEM_1865(479)>
No folding possible
Folding PHI node: prephitmp.1031_1813 = PHI <D.44619_963(477), pretmp.1030_1890(407), pretmp.1030_1891(479)>
No folding possible
Folding statement: # DEBUG got_video_crypto => got_video_crypto_978
Not folded
Folding statement: got_video_crypto_978 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, prephitmp.1031_1813, crypto_tag_1503, sdp_type_546(D));
Not folded
Folding statement: # DEBUG crypto_tag => NULL
Not folded
Folding statement: crypto_tag_1503 = strtol (prephitmp.1031_1813, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => prephitmp.1031_1813
Not folded
Folding statement: # DEBUG crypto => prephitmp.1031_1813
Not folded
Folding PHI node: got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
No folding possible
Folding PHI node: .MEM_1157 = PHI <.MEM_1720(381), .MEM_1412(386), .MEM_1415(392), .MEM_1720(393), .MEM_1720(394), .MEM_1720(396), .MEM_1419(409), .MEM_1720(384), .MEM_1414(391), .MEM_1720(383), .MEM_1720(395)>
No folding possible
Folding statement: if (attr_979 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_979
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_60
Not folded
Folding statement: # DEBUG attr => attr_979
Not folded
Folding statement: attr_979 = attr_620->a_next;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_60
Not folded
Folding PHI node: got_video_crypto_1804 = PHI <got_video_crypto_60(410)>
No folding possible
Folding PHI node: got_video_crypto_961 = PHI <got_video_crypto_1804(412), got_video_crypto_556(379), got_video_crypto_556(371)>
No folding possible
Folding PHI node: .MEM_1883 = PHI <.MEM_1157(412), .MEM_1154(379), .MEM_1409(371)>
No folding possible
Folding statement: if (rm_encoding_980 == 0B)
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_980
Not folded
Folding statement: rm_encoding_980 = map_1621->rm_encoding;
Not folded
Folding PHI node: rm_encoding_137 = PHI <rm_encoding_980(413), ""(414)>
No folding possible
Folding statement: if (total_codecs_85 > 0)
Not folded
Folding statement: # DEBUG m_idx => m_idx_820
Not folded
Folding statement: # DEBUG i => 0
Not folded
Folding statement: # DEBUG i => 0
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_137
Not folded
Folding PHI node: m_idx_911 = PHI <m_idx_109(429), m_idx_820(416)>
No folding possible
Folding PHI node: i_865 = PHI <i_1021(429), 0(416)>
No folding possible
Folding PHI node: .MEM_871 = PHI <.MEM_1161(429), .MEM_1883(416)>
No folding possible
Folding statement: if (D.45239_987 != 1)
Not folded
Folding statement: D.45239_987 = imp_986->codec_type;
Not folded
Folding statement: # DEBUG imp => imp_986
Not folded
Folding statement: imp_986 = *D.45238_985;
Not folded
Folding statement: D.45238_985 = codec_array_84 + D.45237_984;
Not folded
Folding statement: D.45237_984 = i.99_983 * 4;
Not folded
Folding statement: i.99_983 = (unsigned int) i_865;
Not folded
Folding statement: if (D.45242_989 == 0)
Not folded
Folding statement: D.45242_989 = switch_channel_direction (D.44530_988);
Not folded
Folding statement: D.44530_988 = session_161(D)->channel;
Not folded
Folding statement: if (D.45245_991 != 0)
Not folded
Folding statement: D.45245_991 = switch_channel_test_flag (D.44530_990, 114);
Not folded
Folding statement: D.44530_990 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1159 = PHI <.MEM_1420(418), .MEM_1421(419)>
No folding possible
Folding statement: if (D.45256_997 == 0B)
Not folded
Folding statement: # DEBUG s => D.45256_997
Not folded
Folding statement: D.45256_997 = map_1621->rm_encoding;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45249_993, D.45250_994, D.45252_996);
Not folded
Folding statement: D.45252_996 = (int) D.45251_995;
Not folded
Folding statement: D.45251_995 = imp_986->ianacode;
Not folded
Folding statement: D.45250_994 = imp_986->iananame;
Not folded
Folding statement: D.45249_993 = (int) D.45248_992;
Not folded
Folding statement: D.45248_992 = map_1621->rm_pt;
Not folded
Folding statement: if (D.47958_1504 == 0)
Not folded
Folding statement: D.47958_1504 = *D.45256_997;
Not folded
Folding statement: if (D.45249_1005 <= 95)
Not folded
Folding statement: D.45249_1005 = (int) D.45248_1004;
Not folded
Folding statement: D.45248_1004 = map_1621->rm_pt;
Not folded
Folding statement: # DEBUG vmatch => vmatch_1010
Not folded
Folding statement: vmatch_1010 = D.45249_1005 == D.45252_1009;
Not folded
Folding statement: D.45252_1009 = (int) D.45251_1008;
Not folded
Folding statement: D.45251_1008 = imp_986->ianacode;
Not folded
Folding statement: # DEBUG vmatch => vmatch_1013
Not folded
Folding statement: vmatch_1013 = D.45260_1012 == 0;
Not folded
Folding statement: D.45260_1012 = strcasecmp (rm_encoding_137, D.45250_1011);
Not folded
Folding statement: D.45250_1011 = imp_986->iananame;
Not folded
Folding PHI node: vmatch_138 = PHI <vmatch_1010(423), vmatch_1013(424)>
No folding possible
Folding statement: if (vmatch_138 != 0)
Not folded
Folding statement: # DEBUG vmatch => vmatch_138
Not folded
Folding statement: if (D.45263_1014 == D.45264_1015)
Not folded
Folding statement: D.45264_1015 = imp_986->samples_per_second;
Not folded
Folding statement: D.45263_1014 = map_1621->rm_rate;
Not folded
Folding statement: # DEBUG m_idx => m_idx_1019
Not folded
Folding statement: m_idx_1019 = m_idx_911 + 1;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45250_1016, D.45252_1018);
Not folded
Folding statement: D.45252_1018 = (int) D.45251_1017;
Not folded
Folding statement: D.45251_1017 = imp_986->ianacode;
Not folded
Folding statement: D.45250_1016 = imp_986->iananame;
Not folded
Folding statement: matches[m_idx_911].map = map_1621;
Not folded
Folding statement: matches[m_idx_911].imp = imp_986;
Not folded
Folding PHI node: m_idx_109 = PHI <m_idx_911(417), m_idx_911(419), m_idx_911(426), m_idx_911(425), m_idx_1019(427)>
No folding possible
Folding PHI node: .MEM_1161 = PHI <.MEM_871(417), .MEM_1421(419), .MEM_1422(426), .MEM_1422(425), .MEM_1425(427)>
No folding possible
Folding statement: if (total_codecs_85 > i_1021)
Not folded
Folding statement: # DEBUG m_idx => m_idx_109
Not folded
Folding statement: # DEBUG i => i_1021
Not folded
Folding statement: # DEBUG i => i_1021
Not folded
Folding statement: i_1021 = i_865 + 1;
Not folded
Folding statement: # DEBUG m_idx => m_idx_109
Not folded
Folding PHI node: m_idx_538 = PHI <m_idx_109(428)>
No folding possible
Folding PHI node: m_idx_954 = PHI <m_idx_538(430), m_idx_820(415)>
No folding possible
Folding PHI node: .MEM_1091 = PHI <.MEM_1161(430), .MEM_1883(415)>
No folding possible
Folding statement: if (map_1022 != 0B)
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_961
Not folded
Folding statement: # DEBUG m_idx => m_idx_954
Not folded
Folding statement: # DEBUG map => map_1022
Not folded
Folding statement: # DEBUG map => map_1022
Not folded
Folding statement: map_1022 = map_1621->rm_next;
Not folded
Folding PHI node: m_idx_1796 = PHI <m_idx_954(431)>
No folding possible
Folding PHI node: got_video_crypto_1789 = PHI <got_video_crypto_961(431)>
No folding possible
Folding PHI node: got_video_crypto_960 = PHI <got_video_crypto_1789(433), got_video_crypto_1675(367)>
No folding possible
Folding PHI node: m_idx_907 = PHI <m_idx_1796(433), 0(367)>
No folding possible
Folding PHI node: .MEM_1874 = PHI <.MEM_1091(433), .MEM_1406(367)>
No folding possible
Folding statement: if (D.45268_1026 != 0)
Not folded
Folding statement: D.45268_1026 = D.45267_1025 & D.45003_1024;
Not folded
Folding statement: D.45267_1025 = got_video_crypto_960 <= 0;
Not folded
Folding statement: D.45003_1024 = D.45002_1023 == 1;
Not folded
Folding statement: D.45002_1023 = smh_186->crypto_mode;
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG vmatch => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
Not folded
Folding statement: if (m_idx_907 != 0)
Not folded
Folding statement: # DEBUG m_idx => m_idx_907
Not folded
Folding statement: if (greedy_47 != 0)
Not folded
Folding statement: # DEBUG j => 0
Not folded
Folding statement: greedy_sort (smh_186, &matches, m_idx_907, codec_array_84, total_codecs_85);
Not folded
Folding PHI node: .MEM_1165 = PHI <.MEM_1874(437), .MEM_1427(438)>
No folding possible
Folding statement: # DEBUG j => 0
Not folded
Folding statement: # DEBUG j => 0
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;
Not folded
Folding statement: # DEBUG vmatch => 1
Not folded
Folding PHI node: j_1845 = PHI <j_1068(444), 0(439)>
No folding possible
Folding PHI node: .MEM_1844 = PHI <.MEM_1443(444), .MEM_1428(439)>
No folding possible
Folding statement: if (j_1845 == 0)
Not folded
Folding statement: # DEBUG pmap => pmap_1045
Not folded
Folding statement: pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);
Not folded
Folding statement: D.45284_1044 = (uint32_t) D.45283_1043;
Not folded
Folding statement: D.45283_1043 = D.45282_1042 / 1000;
Not folded
Folding statement: D.45282_1042 = D.45280_1039->microseconds_per_packet;
Not folded
Folding statement: D.45281_1040 = D.45280_1039->samples_per_second;
Not folded
Folding statement: D.45280_1039 = matches[j_1845].imp;
Not folded
Folding statement: D.45279_1038 = (uint32_t) D.45278_1037;
Not folded
Folding statement: D.45278_1037 = D.45275_1032->rm_pt;
Not folded
Folding statement: D.45277_1035 = D.45275_1032->rm_fmtp;
Not folded
Folding statement: D.45276_1033 = D.45275_1032->rm_encoding;
Not folded
Folding statement: D.45275_1032 = matches[j_1845].map;
Not folded
Folding statement: if (D.45288_1047 != 0B)
Not folded
Folding statement: D.45288_1047 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
Not folded
Folding statement: pmap_1045->current = 1;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1045;
Not folded
Folding statement: switch_rtp_set_default_payload (D.45288_1047, D.45291_1049);
Not folded
Folding statement: D.45291_1049 = pmap_1045->pt;
Not folded
Folding PHI node: .MEM_1166 = PHI <.MEM_1429(440), .MEM_1431(441), .MEM_1432(442)>
No folding possible
Folding statement: if (m_idx_907 > j_1068)
Not folded
Folding statement: # DEBUG j => j_1068
Not folded
Folding statement: # DEBUG j => j_1068
Not folded
Folding statement: j_1068 = j_1845 + 1;
Not folded
Folding statement: pmap_1045->agreed_pt = D.45293_1067;
Not folded
Folding statement: D.45293_1067 = (unsigned char) D.45248_1066;
Not folded
Folding statement: D.45248_1066 = map_1051->rm_pt;
Not folded
Folding statement: pmap_1045->rm_fmtp = D.45299_1065;
Not folded
Folding statement: D.45299_1065 = switch_core_perform_session_strdup (session_161(D), D.45298_1064, "src/switch_core_media.c", &__func__, 3813);
Not folded
Folding statement: D.45298_1064 = map_1051->rm_fmtp;
Not folded
Folding statement: pmap_1045->remote_sdp_port = D.45088_1063;
Not folded
Folding statement: D.45088_1063 = (short unsigned int) D.44697_1062;
Not folded
Folding statement: D.44697_1062 = m_1765->m_port;
Not folded
Folding statement: pmap_1045->remote_sdp_ip = D.45297_1061;
Not folded
Folding statement: D.45297_1061 = switch_core_perform_session_strdup (session_161(D), D.45086_1060, "src/switch_core_media.c", &__func__, 3810);
Not folded
Folding statement: D.45086_1060 = connection_110->c_address;
Not folded
Folding statement: pmap_1045->codec_ms = D.45296_1059;
Not folded
Folding statement: D.45296_1059 = (uint32_t) D.45295_1058;
Not folded
Folding statement: D.45295_1058 = D.45294_1057 / 1000;
Not folded
Folding statement: D.45294_1057 = mimp_1050->microseconds_per_packet;
Not folded
Folding statement: pmap_1045->rm_rate = D.45263_1056;
Not folded
Folding statement: D.45263_1056 = map_1051->rm_rate;
Not folded
Folding statement: pmap_1045->recv_pt = D.45293_1055;
Not folded
Folding statement: D.45293_1055 = (unsigned char) D.45248_1054;
Not folded
Folding statement: D.45248_1054 = map_1051->rm_pt;
Not folded
Folding statement: pmap_1045->rm_encoding = D.45292_1053;
Not folded
Folding statement: D.45292_1053 = switch_core_perform_session_strdup (session_161(D), D.45256_1052, "src/switch_core_media.c", &__func__, 3804);
Not folded
Folding statement: D.45256_1052 = map_1051->rm_encoding;
Not folded
Folding statement: # DEBUG map => map_1051
Not folded
Folding statement: map_1051 = matches[j_1845].map;
Not folded
Folding statement: # DEBUG mimp => mimp_1050
Not folded
Folding statement: mimp_1050 = matches[j_1845].imp;
Not folded
Folding statement: if (match_1801 == 0)
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1086, "rtp_video_recv_pt", &tmp, 1);
Not folded
Folding statement: D.44530_1086 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45307_1085);
Not folded
Folding statement: D.45307_1085 = (int) D.45306_1084;
Not folded
Folding statement: D.45306_1084 = D.45287_1083->recv_pt;
Not folded
Folding statement: D.45287_1083 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: switch_core_media_check_video_codecs (session_161(D));
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1082, "rtp_video_pt", &tmp, 1);
Not folded
Folding statement: D.44530_1082 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45305_1081);
Not folded
Folding statement: D.45305_1081 = (int) D.45304_1080;
Not folded
Folding statement: D.45304_1080 = D.45287_1079->agreed_pt;
Not folded
Folding statement: D.45287_1079 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1076, "rtp_video_fmtp", D.45303_1078, 1);
Not folded
Folding statement: D.45303_1078 = D.45287_1077->rm_fmtp;
Not folded
Folding statement: D.45287_1077 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: D.44530_1076 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1075, "remote_video_port", &tmp, 1);
Not folded
Folding statement: D.44530_1075 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1072, "remote_video_ip", D.45302_1074, 1);
Not folded
Folding statement: D.45302_1074 = D.45287_1073->remote_sdp_ip;
Not folded
Folding statement: D.45287_1073 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: D.44530_1072 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45301_1071);
Not folded
Folding statement: D.45301_1071 = (int) D.45300_1070;
Not folded
Folding statement: D.45300_1070 = D.45287_1069->remote_sdp_port;
Not folded
Folding statement: D.45287_1069 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding PHI node: match_14 = PHI <match_1801(445), 1(446)>
No folding possible
Folding statement: if (D.47965_1507 != 0)
Not folded
Folding statement: D.47965_1507 = D.47966_1506 & 256;
Not folded
Folding statement: D.47966_1506 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
Not folded
Folding statement: # DEBUG codec => D#74
Not folded
Folding statement: # DEBUG D#74 => &MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].read_codec
Not folded
Folding statement: # DEBUG match => match_14
Not folded
Folding statement: if (D.47964_1508 != 0B)
Not folded
Folding statement: D.47964_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
Not folded
Folding statement: if (D.47963_1509 != 0B)
Not folded
Folding statement: D.47963_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
Not folded
Folding statement: if (D.47962_1510 != 0B)
Not folded
Folding statement: D.47962_1510 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;
Not folded
Folding PHI node: .MEM_1168 = PHI <.MEM_1452(450), .MEM_1453(451), .MEM_1452(447), .MEM_1452(448), .MEM_1452(449)>
No folding possible
Folding statement: if (D.45317_1093 == 0)
Not folded
Folding statement: D.45317_1093 = switch_core_media_set_video_codec (session_161(D), 0);
Not folded
Folding statement: check_ice (smh_186, 1, sdp_198, m_1765);
Not folded
Folding PHI node: match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
No folding possible
Folding PHI node: best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
No folding possible
Folding PHI node: cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
No folding possible
Folding PHI node: got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
No folding possible
Folding PHI node: got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
No folding possible
Folding PHI node: got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
No folding possible
Folding PHI node: codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
No folding possible
Folding PHI node: m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
No folding possible
Folding PHI node: nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
No folding possible
Folding PHI node: .MEM_1169 = PHI <.MEM_1399(475), .MEM_1114(362), .MEM_1114(363), .MEM_1426(435), .MEM_1454(452), .MEM_1455(453), .MEM_1388(349), .MEM_1392(350), .MEM_1381(347), .MEM_1383(348), .MEM_1403(361), .MEM_1114(174), .MEM_1874(436)>
No folding possible
Folding statement: if (m_1094 != 0B)
Not folded
Folding statement: # DEBUG match => match_15
Not folded
Folding statement: # DEBUG best_te => best_te_22
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_26
Not folded
Folding statement: # DEBUG m => m_1094
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_55
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_63
Not folded
Folding statement: # DEBUG got_audio => got_audio_66
Not folded
Folding statement: # DEBUG got_avp => got_avp_1860
Not folded
Folding statement: # DEBUG got_video_avp => NULL
Not folded
Folding statement: # DEBUG got_video_savp => NULL
Not folded
Folding statement: # DEBUG got_savp => got_savp_1740
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_1744
Not folded
Folding statement: # DEBUG got_webrtc => got_webrtc_78
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_94
Not folded
Folding statement: # DEBUG m_idx => m_idx_113
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_121
Not folded
Folding statement: # DEBUG m => m_1094
Not folded
Folding statement: m_1094 = m_1765->m_next;
Not folded
Folding statement: # DEBUG match => match_15
Not folded
Folding statement: # DEBUG best_te => best_te_22
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_26
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_55
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_63
Not folded
Folding statement: # DEBUG got_audio => got_audio_66
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_94
Not folded
Folding statement: # DEBUG m_idx => m_idx_113
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_121
Not folded
Folding PHI node: match_1686 = PHI <match_15(454)>
No folding possible
Folding PHI node: cng_pt_1646 = PHI <cng_pt_26(454)>
No folding possible
Folding PHI node: match_17 = PHI <1(143), 0(145), 0(162), 1(160), 0(211), 0(218), 0(221), 0(366), 0(408), match_1686(456), 1(159), 1(172), 1(464), 0(124)>
No folding possible
Folding PHI node: .MEM_1171 = PHI <.MEM_1237(143), .MEM_1240(145), .MEM_1260(162), .MEM_1251(160), .MEM_1298(211), .MEM_1300(218), .MEM_1301(221), .MEM_1407(366), .MEM_1418(408), .MEM_1169(456), .MEM_1250(159), .MEM_1290(172), .MEM_1670(464), .MEM_1233(124)>
No folding possible
Folding PHI node: cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>
No folding possible
Folding statement: D.44471_1095->cng_pt = cng_pt_1048;
Not folded
Folding statement: D.44471_1095 = smh_186->mparams;
Not folded
Folding statement: sdp_parser_free (parser_196);
Not folded
Folding statement: # DEBUG match => match_17
Not folded
Folding statement: done:
Not folded
Folding PHI node: match_142 = PHI <0(4), 0(5), 0(7), match_17(457)>
No folding possible
Folding statement: return match_142;
Not folded
Folding PHI node: .MEM_1118 = PHI <.MEM_1636(18), .MEM_1635(17)>
No folding possible
Folding PHI node: .MEM_795 = PHI <.MEM_1639(55), .MEM_1638(54)>
No folding possible
Folding statement: if (D.44594_307 == 0)
Not folded
Folding statement: D.44594_307 = strcasecmp (D.44590_304, "sendonly");
Not folded
Folding PHI node: .MEM_1755 = PHI <.MEM_1642(95), .MEM_1641(94)>
No folding possible
Folding PHI node: .MEM_670 = PHI <.MEM_1216(98), .MEM_1106(97), .MEM_1626(96), .MEM_1212(85)>
No folding possible
Folding statement: # DEBUG reneg => 1
Not folded
Folding PHI node: .MEM_1670 = PHI <.MEM_1248(156), .MEM_1249(157), .MEM_1250(158), .MEM_1246(154), .MEM_1247(155)>
No folding possible
Folding statement: # DEBUG pass => 0
Not folded
Folding statement: if (D.44822_535 == 0)
Not folded
Folding statement: D.44822_535 = D.44821_534 & 4;
Not folded
Folding statement: D.44821_534 = D.44471_533->ndlb;
Not folded
Folding statement: D.44471_533 = smh_186->mparams;
Not folded
Folding PHI node: .MEM_1885 = PHI <.MEM_1648(209), .MEM_1296(200), .MEM_1647(208)>
No folding possible
Folding statement: if (D.44831_542 != 0)
Not folded
Folding statement: D.44831_542 = D.44830_541 & D.44829_540;
Not folded
Folding statement: D.44830_541 = got_webrtc_78 == 0;
Not folded
Folding statement: D.44829_540 = D.44666_539 != 257;
Not folded
Folding statement: D.44666_539 = m_1765->m_proto;
Not folded
Folding statement: pretmp.1034_1896 = attr_1600->a_value;
Not folded
Folding PHI node: codec_ms_1884 = PHI <maxptime_1041(468), ptime_1034(237)>
No folding possible
Folding statement: # DEBUG codec_ms => codec_ms_1884
Not folded
Folding statement: if (D.44906_612 == 0)
Not folded
Folding statement: D.44906_612 = switch_core_codec_parse_fmtp (D.44889_609, D.44893_598, D.44854_611, &codec_fmtp);
Not folded
Folding statement: D.44854_611 = map_1729->rm_rate;
Not folded
Folding statement: D.44889_609 = map_1729->rm_encoding;
Not folded
Folding statement: if (D.44938_648 != 0)
Not folded
Folding statement: D.44938_648 = D.44937_647 & 1;
Not folded
Folding statement: D.44937_647 = (int) D.44821_646;
Not folded
Folding statement: D.44821_646 = D.44471_645->ndlb;
Not folded
Folding statement: D.44471_645 = smh_186->mparams;
Not folded
Folding statement: if (D.45083_794 != 0B)
Not folded
Folding statement: D.45083_794 = switch_stristr ("stereo=1", D.45080_791);
Not folded
Folding PHI node: .MEM_1898 = PHI <.MEM_1365(332)>
No folding possible
Folding PHI node: .MEM_1697 = PHI <.MEM_1898(473), .MEM_1334(314)>
No folding possible
Folding statement: # DEBUG match => 1
Not folded
Folding PHI node: .MEM_1868 = PHI <.MEM_1651(360), .MEM_1393(351), .MEM_1650(359)>
No folding possible
Folding statement: # DEBUG te => D#12
Not folded
Folding statement: # DEBUG D#12 => D.44471_862->recv_te
Not folded
Folding statement: D.44471_862->recv_te = 0;
Not folded
Folding statement: D.44471_862->te = 0;
Not folded
Folding statement: D.44471_862->dtmf_type = 1;
Not folded
Folding statement: D.44471_862 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_861, "dtmf_type", "info", 1);
Not folded
Folding statement: D.44530_861 = session_161(D)->channel;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
Not folded
Folding statement: if (D.45161_903 != 0B)
Not folded
Folding statement: D.45161_903 = switch_stristr ("fir", D.44619_900);
Not folded
Folding statement: if (D.44822_967 == 0)
Not folded
Folding statement: D.44822_967 = D.44821_966 & 4;
Not folded
Folding statement: D.44821_966 = D.44471_965->ndlb;
Not folded
Folding statement: D.44471_965 = smh_186->mparams;
Not folded
Folding PHI node: .MEM_1865 = PHI <.MEM_1654(406), .MEM_1416(397), .MEM_1653(405)>
No folding possible
Folding statement: if (D.44831_974 != 0)
Not folded
Folding statement: D.44831_974 = D.44830_973 & D.44829_972;
Not folded
Folding statement: D.44830_973 = got_webrtc_78 == 0;
Not folded
Folding statement: D.44829_972 = D.44666_971 != 257;
Not folded
Folding statement: D.44666_971 = m_1765->m_proto;
Not folded
Folding statement: pretmp.1030_1891 = attr_620->a_value;
Not folded
Folding statement: if (D.44938_1002 != 0)
Not folded
Folding statement: D.44938_1002 = D.44937_1001 & 1;
Not folded
Folding statement: D.44937_1001 = (int) D.44821_1000;
Not folded
Folding statement: D.44821_1000 = D.44471_999->ndlb;
Not folded
Folding statement: D.44471_999 = smh_186->mparams;
Not folded
Folding PHI node: got_crypto_898 = PHI <got_crypto_50(183)>
No folding possible
Folding statement: # DEBUG attr => attr_500
Not folded
Folding statement: # DEBUG ptime => dptime_1036
Not folded
Folding statement: # DEBUG maxptime => dmaxptime_1006
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_898
Not folded
Folding statement: # DEBUG attr => attr_500
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_898
Not folded
Folding PHI node: attr_923 = PHI <attr_500(481), attr_507(185)>
No folding possible
Folding PHI node: got_crypto_141 = PHI <got_crypto_898(481), got_crypto_1867(185)>
No folding possible
Folding PHI node: .MEM_114 = PHI <.MEM_1292(481), .MEM_1123(185)>
No folding possible
Folding PHI node: got_video_crypto_519 = PHI <got_video_crypto_57(377)>
No folding possible
Folding statement: # DEBUG attr => attr_887
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_519
Not folded
Folding statement: # DEBUG attr => attr_887
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_519
Not folded
Folding PHI node: attr_1163 = PHI <attr_887(483), attr_894(379)>
No folding possible
Folding PHI node: got_video_crypto_744 = PHI <got_video_crypto_519(483), got_video_crypto_556(379)>
No folding possible
Folding PHI node: .MEM_1717 = PHI <.MEM_1409(483), .MEM_1154(379)>
No folding possible
switch_core_media_negotiate_sdp (struct switch_core_session_t * session, const char * r_sdp, uint8_t * proceed, switch_sdp_type_t sdp_type)
{
  sdp_media_e prephitmp.1057;
  sdp_media_e pretmp.1056;
  _Bool prephitmp.1055;
  _Bool pretmp.1054;
  switch_rtp_bug_flag_t prephitmp.1053;
  switch_rtp_bug_flag_t pretmp.1052;
  struct switch_core_media_params_t * pretmp.1050;
  sdp_media_e prephitmp.1049;
  sdp_media_e pretmp.1048;
  _Bool prephitmp.1047;
  _Bool pretmp.1046;
  uint8_t prephitmp.1045;
  uint8_t pretmp.1044;
  const int prephitmp.1043;
  const int pretmp.1042;
  _Bool prephitmp.1041;
  int prephitmp.1039;
  int pretmp.1038;
  const int pretmp.1036;
  const char * pretmp.1034;
  const char * prephitmp.1031;
  const char * pretmp.1030;
  sdp_media_e prephitmp.1028;
  _Bool prephitmp.1026;
  _Bool pretmp.1025;
  int D.49756;
  switch_bool_t D.49755;
  int D.49754;
  int D.49753;
  int D.49752;
  int D.49751;
  int D.49750;
  int D.49749;
  int D.49748;
  int D.49744;
  switch_bool_t D.49743;
  int D.49742;
  int D.49741;
  int D.49740;
  int D.49739;
  int D.49738;
  int D.49737;
  int D.49736;
  int D.49732;
  switch_bool_t D.49731;
  int D.49730;
  int D.49729;
  int D.49728;
  int D.49727;
  int D.49726;
  int D.49725;
  int D.49724;
  int D.49720;
  switch_bool_t D.49719;
  int D.49718;
  int D.49717;
  int D.49716;
  int D.49715;
  int D.49714;
  int D.49713;
  int D.49712;
  int D.49708;
  switch_bool_t D.49707;
  int D.49706;
  int D.49705;
  int D.49704;
  int D.49703;
  int D.49702;
  int D.49701;
  int D.49700;
  int D.49696;
  switch_bool_t D.49695;
  int D.49694;
  int D.49693;
  int D.49692;
  int D.49691;
  int D.49690;
  int D.49689;
  int D.49688;
  int D.49684;
  switch_bool_t D.49683;
  int D.49682;
  int D.49681;
  int D.49680;
  int D.49679;
  int D.49678;
  int D.49677;
  int D.49676;
  uint32_t D.47966;
  uint32_t D.47965;
  struct switch_mutex_t * D.47964;
  struct switch_codec_interface_t * D.47963;
  const struct switch_codec_implementation_t * D.47962;
  const char D.47958;
  const char D.47951;
  int D.47947;
  const char D.47944;
  const char D.47940;
  uint32_t D.47935;
  uint32_t D.47934;
  struct switch_mutex_t * D.47933;
  struct switch_codec_interface_t * D.47932;
  const struct switch_codec_implementation_t * D.47931;
  const char D.47927;
  int D.47923;
  const char D.47920;
  const char D.47916;
  unsigned char csui.173;
  const char D.47901;
  int D.47891;
  const char D.47888;
  const char D.47878;
  uint8_t D.47875;
  struct payload_map_t * pmap;
  uint8_t D.47872;
  struct payload_map_t * pmap;
  struct payload_map_t * pmap;
  int j;
  char tmp[50];
  const struct switch_codec_implementation_t * imp;
  int crypto_tag;
  int i;
  int vmatch;
  const struct switch_codec_implementation_t * mimp;
  const char * rm_encoding;
  struct sdp_rtpmap_t * map;
  char tmp[50];
  struct payload_map_t * pmap;
  int j;
  const struct switch_codec_implementation_t * timp;
  int num;
  char tmp[80];
  char * prefs[1];
  const struct switch_codec_implementation_t * search[1];
  int j;
  uint32_t codec_rate;
  uint32_t bit_rate;
  const struct switch_codec_implementation_t * imp;
  struct switch_codec_fmtp_t codec_fmtp;
  uint32_t map_bit_rate;
  const char * rm_encoding;
  int32_t i;
  int crypto_tag;
  struct sdp_rtpmap_t * map;
  const char * err;
  char tmp[32];
  switch_port_t remote_port;
  char * remote_host;
  struct switch_core_session_message_t * msg;
  struct switch_channel_t * other_channel;
  int pass;
  const char * var;
  struct switch_t38_options_t * t38_options;
  struct switch_core_session_t * other_session;
  struct sdp_connection_t * connection;
  register int __result;
  static const char __func__[32] = "switch_core_media_negotiate_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_negotiate_sdp";
  int nm_idx;
  int m_idx;
  const char * tmp;
  uint32_t fmtp_remote_codec_rate;
  uint32_t remote_codec_rate;
  int codec_ms;
  struct matches near_matches[30];
  struct matches matches[30];
  struct sdp_rtpmap_t * near_map;
  struct sdp_rtpmap_t * mmap;
  const struct switch_codec_implementation_t * near_match;
  const struct switch_codec_implementation_t * mimp;
  uint32_t near_rate;
  struct switch_media_handle_t * smh;
  int total_codecs;
  const struct switch_codec_implementation_t * * codec_array;
  int reneg;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  int scrooge;
  int got_webrtc;
  int got_udptl;
  int got_savp;
  int got_avp;
  int got_audio;
  int got_video_crypto;
  int got_crypto;
  const char * val;
  struct switch_channel_t * channel;
  int greedy;
  int recvonly;
  int sendonly;
  int dmaxptime;
  int maxptime;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  switch_payload_t cng_pt;
  switch_payload_t best_te;
  uint8_t match;
  switch_status_t D.45317;
  int D.45307;
  switch_payload_t D.45306;
  int D.45305;
  switch_payload_t D.45304;
  char * D.45303;
  char * D.45302;
  int D.45301;
  switch_port_t D.45300;
  char * D.45299;
  const char * D.45298;
  char * D.45297;
  uint32_t D.45296;
  int D.45295;
  const int D.45294;
  unsigned char D.45293;
  char * D.45292;
  switch_payload_t D.45291;
  struct switch_rtp_t * D.45288;
  struct payload_map_t * D.45287;
  uint32_t D.45284;
  int D.45283;
  const int D.45282;
  const uint32_t D.45281;
  const struct switch_codec_implementation_t * D.45280;
  uint32_t D.45279;
  <unnamed-unsigned:7> D.45278;
  const char * D.45277;
  const char * D.45276;
  struct sdp_rtpmap_t * D.45275;
  _Bool D.45268;
  _Bool D.45267;
  const uint32_t D.45264;
  long unsigned int D.45263;
  int D.45260;
  const char * D.45256;
  int D.45252;
  const switch_payload_t D.45251;
  char * const D.45250;
  int D.45249;
  <unnamed-unsigned:7> D.45248;
  uint32_t D.45245;
  switch_call_direction_t D.45242;
  const switch_codec_type_t D.45239;
  const struct switch_codec_implementation_t * * D.45238;
  unsigned int D.45237;
  unsigned int i.99;
  const char * D.45228;
  int D.45220;
  char * D.45215;
  short unsigned int D.45214;
  const unsigned char D.45186;
  const unsigned char D.45175;
  int D.45169;
  uint8_t D.45165;
  uint8_t D.45164;
  const char * D.45161;
  int D.45155;
  int D.45152;
  int D.45144;
  int D.45141;
  int D.45138;
  const char * D.45125;
  int D.45121;
  switch_call_direction_t D.45115;
  int D.45112;
  switch_payload_t D.45111;
  uint32_t D.45110;
  int32_t D.45108;
  switch_status_t D.45100;
  uint32_t D.45099;
  int D.45094;
  switch_payload_t D.45093;
  int D.45090;
  char * D.45089;
  short unsigned int D.45088;
  char * D.45087;
  const char * D.45086;
  const char * D.45083;
  const char * D.45080;
  int D.45071;
  const char * D.45067;
  uint32_t D.45065;
  const int D.45064;
  uint32_t D.45063;
  int D.45062;
  const int D.45061;
  const uint32_t D.45060;
  int D.45057;
  const uint32_t D.45056;
  unsigned char D.45055;
  <unnamed-unsigned:7> D.45054;
  char * D.45053;
  char * const D.45052;
  char * D.45051;
  const char * D.45050;
  switch_payload_t D.45049;
  uint32_t D.45044;
  int D.45043;
  const int D.45042;
  const uint32_t D.45041;
  const struct switch_codec_implementation_t * D.45040;
  uint32_t D.45039;
  <unnamed-unsigned:7> D.45038;
  const char * D.45037;
  const char * D.45036;
  struct sdp_rtpmap_t * D.45035;
  int near_rate.96;
  int D.45029;
  const uint32_t D.45028;
  char * const D.45027;
  int D.45026;
  const int D.45025;
  char * const D.45014;
  _Bool D.45010;
  _Bool D.45009;
  _Bool D.45008;
  _Bool D.45005;
  _Bool D.45004;
  _Bool D.45003;
  switch_rtp_crypto_mode_t D.45002;
  _Bool D.45000;
  _Bool D.44999;
  _Bool D.44998;
  int D.44997;
  int codec_rate.94;
  int D.44994;
  _Bool D.44992;
  _Bool D.44991;
  _Bool D.44990;
  const uint32_t D.44985;
  int D.44980;
  int D.44978;
  _Bool D.44975;
  _Bool D.44974;
  _Bool D.44973;
  _Bool D.44970;
  _Bool D.44969;
  int D.44964;
  int D.44961;
  _Bool D.44958;
  _Bool D.44957;
  _Bool D.44956;
  const uint32_t D.44948;
  int D.44945;
  int iftmp.93;
  int D.44938;
  int D.44937;
  int D.44931;
  const int D.44930;
  int D.44929;
  const switch_payload_t D.44928;
  char * const D.44927;
  int remote_codec_rate.92;
  int D.44925;
  const switch_codec_type_t D.44922;
  const int D.44921;
  const struct switch_codec_implementation_t * * D.44920;
  unsigned int D.44919;
  unsigned int i.91;
  int D.44912;
  int D.44909;
  switch_status_t D.44906;
  int D.44901;
  int D.44897;
  const char * D.44893;
  int D.44890;
  const char * D.44889;
  uint32_t D.44885;
  uint32_t D.44884;
  _Bool D.44879;
  _Bool D.44878;
  _Bool D.44877;
  switch_payload_t D.44869;
  int D.44868;
  int D.44863;
  int32_t D.44858;
  int D.44857;
  <unnamed-unsigned:7> D.44856;
  long unsigned int D.44855;
  long unsigned int D.44854;
  int D.44848;
  int D.44839;
  _Bool D.44836;
  _Bool D.44835;
  _Bool D.44834;
  _Bool D.44831;
  _Bool D.44830;
  _Bool D.44829;
  const char * D.44825;
  unsigned int D.44822;
  switch_core_media_NDLB_t D.44821;
  int D.44815;
  int D.44810;
  int D.44805;
  char * D.44800;
  short unsigned int D.44799;
  int D.44795;
  int D.44787;
  int D.44784;
  int D.44781;
  _Bool D.44779;
  _Bool D.44778;
  _Bool D.44777;
  char * D.44773;
  struct switch_channel_t * D.44772;
  const char * err.90;
  switch_status_t D.44768;
  int D.44767;
  int D.44766;
  char * D.44765;
  char * D.44764;
  switch_port_t D.44762;
  char * D.44760;
  int D.39032;
  _Bool D.44758;
  _Bool D.44757;
  _Bool D.44756;
  uint16_t D.44753;
  char * D.44752;
  const char * D.44751;
  struct payload_map_t * D.44750;
  int D.44747;
  const char * D.44746;
  int D.44743;
  const char * D.44742;
  char * D.44741;
  char * D.44740;
  uint32_t D.44737;
  struct switch_core_session_t * other_session.89;
  switch_status_t D.44733;
  uint8_t D.44730;
  uint32_t D.44728;
  uint32_t D.44726;
  uint32_t D.44724;
  uint32_t D.44723;
  int D.44716;
  int D.44707;
  uint32_t D.44706;
  int D.44703;
  const char * D.44702;
  int D.44699;
  long unsigned int D.44697;
  sdp_media_e D.44681;
  _Bool D.44678;
  _Bool D.44677;
  _Bool D.44676;
  sdp_proto_e D.44675;
  int D.44672;
  const char * D.44669;
  sdp_proto_e D.44666;
  const char * D.44665;
  const char * D.44663;
  const char * D.44661;
  int D.44655;
  struct switch_media_bug_t * D.44649;
  int D.44640;
  int D.44636;
  int32_t D.44631;
  _Bool D.44626;
  _Bool D.44624;
  int D.44621;
  const char * D.44619;
  int D.44616;
  int D.44614;
  uint8_t D.44606;
  struct switch_rtp_t * D.44605;
  int D.44602;
  int D.44598;
  int D.44594;
  const char * D.44590;
  const char * D.44548;
  struct sdp_connection_t * D.44546;
  _Bool D.44544;
  _Bool D.44543;
  _Bool D.44542;
  unsigned char D.44541;
  unsigned char D.44540;
  struct switch_channel_t * D.44530;
  unsigned int D.44529;
  char * D.44526;
  unsigned int D.44523;
  unsigned int D.44522;
  switch_rtp_bug_flag_t D.44521;
  char * D.44518;
  int D.44514;
  int D.44513;
  switch_rtp_bug_flag_t D.44512;
  char * D.44509;
  char * D.44508;
  const char * D.44507;
  struct sdp_origin_t * D.44506;
  int D.44502;
  int D.44498;
  int D.44494;
  int32_t D.44491;
  int32_t D.44490;
  struct switch_channel_t * D.44482;
  struct switch_core_session_t * D.44481;
  int D.44478;
  int D.44473;
  size_t D.44472;
  struct switch_core_media_params_t * D.44471;

<bb 2>:
  # DEBUG match => 0
  # DEBUG best_te => 0
  # DEBUG te => 0
  # DEBUG cng_pt => 0
  # DEBUG ptime => 0
  # DEBUG dptime => 0
  # DEBUG maxptime => 0
  # DEBUG dmaxptime => 0
  # DEBUG sendonly => 0
  # DEBUG recvonly => 0
  # DEBUG greedy => 0
  # DEBUG x => 0
  # DEBUG skip => 0
  channel_162 = switch_core_session_get_channel (session_161(D));
  # DEBUG channel => channel_162
  # DEBUG crypto => 0B
  # DEBUG got_crypto => 0
  # DEBUG got_video_crypto => 0
  # DEBUG got_audio => 0
  # DEBUG got_avp => 0
  # DEBUG got_video_avp => 0
  # DEBUG got_video_savp => 0
  # DEBUG got_savp => 0
  # DEBUG got_udptl => 0
  # DEBUG got_webrtc => 0
  # DEBUG scrooge => 0
  # DEBUG parser => 0B
  # DEBUG reneg => 1
  # DEBUG near_rate => 0
  # DEBUG mimp => 0B
  # DEBUG near_match => 0B
  # DEBUG mmap => 0B
  # DEBUG near_map => 0B
  matches = {};
  near_matches = {};
  # DEBUG codec_ms => 0
  # DEBUG remote_codec_rate => 0
  # DEBUG fmtp_remote_codec_rate => 0
  # DEBUG m_idx => 0
  # DEBUG nm_idx => 0
  if (session_161(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_186 = session_161(D)->media_handle;
  # DEBUG smh => smh_186
  if (smh_186 == 0B)
    goto <bb 458>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#15 => &smh_186->engines
  # DEBUG a_engine => D#15
  # DEBUG D#14 => &smh_186->engines[1]
  # DEBUG v_engine => D#14
  codec_array_190 = &smh_186->codecs;
  # DEBUG codec_array => codec_array_190
  D.44471_191 = smh_186->mparams;
  total_codecs_192 = D.44471_191->num_codecs;
  # DEBUG total_codecs => total_codecs_192
  D.44472_194 = strlen (r_sdp_193(D));
  D.44473_195 = (int) D.44472_194;
  parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
  # DEBUG parser => parser_196
  if (parser_196 == 0B)
    goto <bb 458>;
  else
    goto <bb 6>;

<bb 6>:
  sdp_198 = sdp_session (parser_196);
  # DEBUG sdp => sdp_198
  if (sdp_198 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  sdp_parser_free (parser_196);
  goto <bb 458>;

<bb 8>:
  D.44478_200 = dtls_ok (session_161(D));
  if (D.44478_200 != 0)
    goto <bb 9>;
  else
    goto <bb 20>;

<bb 9>:
  D.44481_201 = smh_186->session;
  D.44482_202 = D.44481_201->channel;
  tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
  # DEBUG tmp => tmp_203
  if (tmp_203 != 0B)
    goto <bb 10>;
  else
    goto <bb 20>;

<bb 10>:
  # DEBUG expr => tmp_203
  D.49676_1551 = strcasecmp (tmp_203, "no");
  if (D.49676_1551 == 0)
    goto <bb 19>;
  else
    goto <bb 11>;

<bb 11>:
  D.49677_1552 = strcasecmp (tmp_203, "off");
  if (D.49677_1552 == 0)
    goto <bb 19>;
  else
    goto <bb 12>;

<bb 12>:
  D.49678_1553 = strcasecmp (tmp_203, "false");
  if (D.49678_1553 == 0)
    goto <bb 19>;
  else
    goto <bb 13>;

<bb 13>:
  D.49679_1554 = strcasecmp (tmp_203, "f");
  if (D.49679_1554 == 0)
    goto <bb 19>;
  else
    goto <bb 14>;

<bb 14>:
  D.49680_1555 = strcasecmp (tmp_203, "disabled");
  if (D.49680_1555 == 0)
    goto <bb 19>;
  else
    goto <bb 15>;

<bb 15>:
  D.49681_1556 = strcasecmp (tmp_203, "inactive");
  if (D.49681_1556 == 0)
    goto <bb 19>;
  else
    goto <bb 16>;

<bb 16>:
  D.49682_1557 = strcasecmp (tmp_203, "disallow");
  if (D.49682_1557 == 0)
    goto <bb 19>;
  else
    goto <bb 17>;

<bb 17>:
  D.49683_1558 = switch_is_number (tmp_203);
  if (D.49683_1558 != 0)
    goto <bb 18>;
  else
    goto <bb 459>;

<bb 18>:
  # DEBUG __nptr => tmp_203
  D.49684_1559 = strtol (tmp_203, 0B, 10);
  if (D.49684_1559 == 0)
    goto <bb 19>;
  else
    goto <bb 459>;

<bb 19>:
  D.44481_205 = smh_186->session;
  D.44482_206 = D.44481_205->channel;
  switch_channel_clear_flag (D.44482_206, 111);
  D.44481_207 = smh_186->session;
  D.44482_208 = D.44481_207->channel;
  switch_channel_clear_flag (D.44482_208, 109);

<bb 20>:
  switch_core_session_parse_crypto_prefs (session_161(D));
  # DEBUG engine => D#15
  pmap_1458 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;
  # DEBUG pmap => pmap_1458
  # DEBUG pmap => pmap_1458
  if (pmap_1458 != 0B)
    goto <bb 21>;
  else
    goto <bb 26>;

<bb 21>:
  D.47872_1662 = pmap_1458->allocated;
  if (D.47872_1662 != 0)
    goto <bb 22>;
  else
    goto <bb 26>;

<bb 22>:

<bb 23>:
  # pmap_1748 = PHI <pmap_1460(25), pmap_1458(22)>
  pmap_1748->negotiated = 0;
  pmap_1748->current = 0;
  pmap_1460 = pmap_1748->next;
  # DEBUG pmap => pmap_1460
  # DEBUG pmap => pmap_1460
  if (pmap_1460 != 0B)
    goto <bb 24>;
  else
    goto <bb 26>;

<bb 24>:
  D.47872_1461 = pmap_1460->allocated;
  if (D.47872_1461 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  goto <bb 23>;

<bb 26>:
  # DEBUG engine => D#14
  pmap_1462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
  # DEBUG pmap => pmap_1462
  # DEBUG pmap => pmap_1462
  if (pmap_1462 != 0B)
    goto <bb 27>;
  else
    goto <bb 32>;

<bb 27>:
  D.47875_1671 = pmap_1462->allocated;
  if (D.47875_1671 != 0)
    goto <bb 28>;
  else
    goto <bb 32>;

<bb 28>:

<bb 29>:
  # pmap_1673 = PHI <pmap_1464(31), pmap_1462(28)>
  pmap_1673->negotiated = 0;
  pmap_1673->current = 0;
  pmap_1464 = pmap_1673->next;
  # DEBUG pmap => pmap_1464
  # DEBUG pmap => pmap_1464
  if (pmap_1464 != 0B)
    goto <bb 30>;
  else
    goto <bb 32>;

<bb 30>:
  D.47875_1465 = pmap_1464->allocated;
  if (D.47875_1465 != 0)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  goto <bb 29>;

<bb 32>:
  if (proceed_209(D) != 0B)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  *proceed_209(D) = 1;

<bb 34>:
  D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
  greedy_211 = D.44490_210 != 0;
  # DEBUG greedy => greedy_211
  D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
  scrooge_213 = D.44491_212 != 0;
  # DEBUG scrooge => scrooge_213
  val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
  # DEBUG val => val_214
  if (val_214 != 0B)
    goto <bb 35>;
  else
    goto <bb 39>;

<bb 35>:
  D.44494_215 = strcasecmp (val_214, "generous");
  if (D.44494_215 == 0)
    goto <bb 39>;
  else
    goto <bb 36>;

<bb 36>:
  D.44498_218 = strcasecmp (val_214, "greedy");
  if (D.44498_218 == 0)
    goto <bb 39>;
  else
    goto <bb 37>;

<bb 37>:
  D.44502_221 = strcasecmp (val_214, "scrooge");
  if (D.44502_221 == 0)
    goto <bb 39>;
  else
    goto <bb 38>;

<bb 38>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);

<bb 39>:
  # greedy_47 = PHI <greedy_211(34), 0(35), 1(36), 1(37), greedy_211(38)>
  # scrooge_80 = PHI <scrooge_213(34), 0(35), 0(36), 1(37), scrooge_213(38)>
  # DEBUG scrooge => scrooge_80
  # DEBUG greedy => greedy_47
  D.44506_224 = sdp_198->sdp_origin;
  D.44507_225 = D.44506_224->o_username;
  D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
  smh_186->origin = D.44508_226;
  if (D.44508_226 != 0B)
    goto <bb 40>;
  else
    goto <bb 46>;

<bb 40>:
  D.44471_228 = smh_186->mparams;
  D.44512_229 = D.44471_228->auto_rtp_bugs;
  D.44513_230 = (int) D.44512_229;
  D.44514_231 = D.44513_230 & 1;
  if (D.44514_231 != 0)
    goto <bb 41>;
  else
    goto <bb 43>;

<bb 41>:
  D.44518_234 = strstr (D.44508_226, "CiscoSystemsSIP-GW-UserAgent");
  if (D.44518_234 != 0B)
    goto <bb 42>;
  else
    goto <bb 43>;

<bb 42>:
  D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
  D.44522_236 = D.44521_235 | 1;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");
  pretmp.1050_1810 = smh_186->mparams;
  pretmp.1052_323 = pretmp.1050_1810->auto_rtp_bugs;

<bb 43>:
  # prephitmp.1053_326 = PHI <D.44512_229(40), D.44512_229(41), pretmp.1052_323(42)>
  D.44523_239 = prephitmp.1053_326 & 2;
  if (D.44523_239 != 0)
    goto <bb 44>;
  else
    goto <bb 46>;

<bb 44>:
  D.44509_240 = smh_186->origin;
  D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
  if (D.44526_241 != 0B)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
  D.44529_243 = D.44521_242 | 2;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");

<bb 46>:
  D.44530_244 = session_161(D)->channel;
  val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
  # DEBUG val => val_245
  if (val_245 != 0B)
    goto <bb 47>;
  else
    goto <bb 57>;

<bb 47>:
  # DEBUG expr => val_245
  D.49688_1561 = strcasecmp (val_245, "yes");
  if (D.49688_1561 == 0)
    goto <bb 56>;
  else
    goto <bb 48>;

<bb 48>:
  D.49689_1562 = strcasecmp (val_245, "on");
  if (D.49689_1562 == 0)
    goto <bb 56>;
  else
    goto <bb 49>;

<bb 49>:
  D.49690_1563 = strcasecmp (val_245, "true");
  if (D.49690_1563 == 0)
    goto <bb 56>;
  else
    goto <bb 50>;

<bb 50>:
  D.49691_1564 = strcasecmp (val_245, "t");
  if (D.49691_1564 == 0)
    goto <bb 56>;
  else
    goto <bb 51>;

<bb 51>:
  D.49692_1565 = strcasecmp (val_245, "enabled");
  if (D.49692_1565 == 0)
    goto <bb 56>;
  else
    goto <bb 52>;

<bb 52>:
  D.49693_1566 = strcasecmp (val_245, "active");
  if (D.49693_1566 == 0)
    goto <bb 56>;
  else
    goto <bb 53>;

<bb 53>:
  D.49694_1567 = strcasecmp (val_245, "allow");
  if (D.49694_1567 == 0)
    goto <bb 56>;
  else
    goto <bb 54>;

<bb 54>:
  D.49695_1568 = switch_is_number (val_245);
  if (D.49695_1568 != 0)
    goto <bb 55>;
  else
    goto <bb 460>;

<bb 55>:
  # DEBUG __nptr => val_245
  D.49696_1569 = strtol (val_245, 0B, 10);
  if (D.49696_1569 != 0)
    goto <bb 56>;
  else
    goto <bb 460>;

<bb 56>:
  D.44530_247 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_247, 93, 1);

<bb 57>:
  m_248 = sdp_198->sdp_media;
  # DEBUG m => m_248
  if (m_248 != 0B)
    goto <bb 58>;
  else
    goto <bb 63>;

<bb 58>:
  D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
  D.44541_250 = D.44540_249 & 6;
  D.44542_251 = D.44541_250 == 2;
  D.44543_252 = D.44541_250 == 0;
  D.44544_253 = D.44543_252 | D.44542_251;
  if (D.44544_253 != 0)
    goto <bb 63>;
  else
    goto <bb 59>;

<bb 59>:
  D.44546_254 = m_248->m_connections;
  if (D.44546_254 != 0B)
    goto <bb 60>;
  else
    goto <bb 63>;

<bb 60>:
  D.44548_256 = D.44546_254->c_address;
  if (D.44548_256 != 0B)
    goto <bb 61>;
  else
    goto <bb 63>;

<bb 61>:
  # DEBUG __s2_len => 7
  __result_300 = __builtin_strcmp (D.44548_256, "0.0.0.0");
  if (__result_300 == 0)
    goto <bb 63>;
  else
    goto <bb 62>;

<bb 62>:

<bb 63>:
  # sendonly_42 = PHI <0(57), 0(59), 0(60), 0(62), 2(61), 2(58)>
  # DEBUG sendonly => sendonly_42
  attr_303 = sdp_198->sdp_attributes;
  # DEBUG attr => attr_303
  # DEBUG recvonly => 0
  # DEBUG sendonly => sendonly_42
  # DEBUG dmaxptime => 0
  # DEBUG dptime => 0
  # DEBUG attr => attr_303
  if (attr_303 != 0B)
    goto <bb 64>;
  else
    goto <bb 83>;

<bb 64>:

<bb 65>:
  # attr_1667 = PHI <attr_334(81), attr_303(64)>
  # dptime_1672 = PHI <dptime_36(81), 0(64)>
  # dmaxptime_1866 = PHI <dmaxptime_40(81), 0(64)>
  # sendonly_1690 = PHI <sendonly_43(81), sendonly_42(64)>
  # recvonly_1895 = PHI <recvonly_45(81), 0(64)>
  D.44590_304 = attr_1667->a_name;
  # DEBUG s => D.44590_304
  if (D.44590_304 == 0B)
    goto <bb 80>;
  else
    goto <bb 66>;

<bb 66>:
  D.47878_1466 = *D.44590_304;
  if (D.47878_1466 == 0)
    goto <bb 80>;
  else
    goto <bb 461>;

<bb 67>:
  # DEBUG sendonly => 1
  D.44530_309 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
  goto <bb 80>;

<bb 68>:
  D.44598_311 = strcasecmp (D.44590_304, "inactive");
  if (D.44598_311 == 0)
    goto <bb 69>;
  else
    goto <bb 70>;

<bb 69>:
  # DEBUG sendonly => 1
  D.44530_313 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
  goto <bb 80>;

<bb 70>:
  D.44602_315 = strcasecmp (D.44590_304, "recvonly");
  if (D.44602_315 == 0)
    goto <bb 71>;
  else
    goto <bb 74>;

<bb 71>:
  D.44530_316 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
  # DEBUG recvonly => 1
  D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44606_319 = switch_rtp_ready (D.44605_318);
  if (D.44606_319 != 0)
    goto <bb 72>;
  else
    goto <bb 73>;

<bb 72>:
  D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  switch_rtp_set_max_missed_packets (D.44605_320, 0);
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;
  goto <bb 80>;

<bb 73>:
  D.44530_321 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
  D.44530_322 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
  goto <bb 80>;

<bb 74>:
  if (sendonly_1690 != 2)
    goto <bb 75>;
  else
    goto <bb 76>;

<bb 75>:
  D.44614_324 = strcasecmp (D.44590_304, "sendrecv");
  if (D.44614_324 == 0)
    goto <bb 80>;
  else
    goto <bb 76>;

<bb 76>:
  D.44616_327 = strcasecmp (D.44590_304, "ptime");
  if (D.44616_327 == 0)
    goto <bb 77>;
  else
    goto <bb 78>;

<bb 77>:
  D.44619_328 = attr_1667->a_value;
  # DEBUG __nptr => D.44619_328
  dptime_1468 = strtol (D.44619_328, 0B, 10);
  # DEBUG dptime => NULL
  goto <bb 80>;

<bb 78>:
  D.44621_331 = strcasecmp (D.44590_304, "maxptime");
  if (D.44621_331 == 0)
    goto <bb 79>;
  else
    goto <bb 80>;

<bb 79>:
  D.44619_332 = attr_1667->a_value;
  # DEBUG __nptr => D.44619_332
  dmaxptime_1469 = strtol (D.44619_332, 0B, 10);
  # DEBUG dmaxptime => NULL

<bb 80>:
  # dptime_36 = PHI <dptime_1672(66), dptime_1672(67), dptime_1672(69), dptime_1672(73), dptime_1672(75), dptime_1468(77), dptime_1672(78), dptime_1672(79), dptime_1672(72), dptime_1672(65)>
  # dmaxptime_40 = PHI <dmaxptime_1866(66), dmaxptime_1866(67), dmaxptime_1866(69), dmaxptime_1866(73), dmaxptime_1866(75), dmaxptime_1866(77), dmaxptime_1866(78), dmaxptime_1469(79), dmaxptime_1866(72), dmaxptime_1866(65)>
  # sendonly_43 = PHI <sendonly_1690(66), 1(67), 1(69), sendonly_1690(73), 0(75), sendonly_1690(77), sendonly_1690(78), sendonly_1690(79), sendonly_1690(72), sendonly_1690(65)>
  # recvonly_45 = PHI <recvonly_1895(66), recvonly_1895(67), recvonly_1895(69), 1(73), recvonly_1895(75), recvonly_1895(77), recvonly_1895(78), recvonly_1895(79), 1(72), recvonly_1895(65)>
  # DEBUG recvonly => recvonly_45
  # DEBUG sendonly => sendonly_43
  # DEBUG dmaxptime => dmaxptime_40
  # DEBUG dptime => dptime_36
  attr_334 = attr_1667->a_next;
  # DEBUG attr => attr_334
  # DEBUG recvonly => recvonly_45
  # DEBUG sendonly => sendonly_43
  # DEBUG dmaxptime => dmaxptime_40
  # DEBUG dptime => dptime_36
  # DEBUG attr => attr_334
  if (attr_334 != 0B)
    goto <bb 81>;
  else
    goto <bb 82>;

<bb 81>:
  goto <bb 65>;

<bb 82>:
  # dptime_255 = PHI <dptime_36(80)>
  # dmaxptime_913 = PHI <dmaxptime_40(80)>
  # sendonly_864 = PHI <sendonly_43(80)>
  # recvonly_870 = PHI <recvonly_45(80)>
  pretmp.1025_1684 = recvonly_870 != 1;

<bb 83>:
  # dptime_1036 = PHI <dptime_255(82), 0(63)>
  # dmaxptime_1006 = PHI <dmaxptime_913(82), 0(63)>
  # sendonly_1007 = PHI <sendonly_864(82), sendonly_42(63)>
  # prephitmp.1026_1683 = PHI <pretmp.1025_1684(82), 1(63)>
  D.44624_335 = sendonly_1007 != 1;
  D.44626_337 = D.44624_335 & prephitmp.1026_1683;
  if (D.44626_337 != 0)
    goto <bb 84>;
  else
    goto <bb 85>;

<bb 84>:
  D.44530_338 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);

<bb 85>:
  D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
  if (D.44631_339 == 0)
    goto <bb 86>;
  else
    goto <bb 463>;

<bb 86>:
  D.44530_340 = session_161(D)->channel;
  val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
  # DEBUG val => val_341
  if (val_341 == 0B)
    goto <bb 97>;
  else
    goto <bb 87>;

<bb 87>:
  # DEBUG expr => val_341
  D.49700_1571 = strcasecmp (val_341, "yes");
  if (D.49700_1571 == 0)
    goto <bb 96>;
  else
    goto <bb 88>;

<bb 88>:
  D.49701_1572 = strcasecmp (val_341, "on");
  if (D.49701_1572 == 0)
    goto <bb 96>;
  else
    goto <bb 89>;

<bb 89>:
  D.49702_1573 = strcasecmp (val_341, "true");
  if (D.49702_1573 == 0)
    goto <bb 96>;
  else
    goto <bb 90>;

<bb 90>:
  D.49703_1574 = strcasecmp (val_341, "t");
  if (D.49703_1574 == 0)
    goto <bb 96>;
  else
    goto <bb 91>;

<bb 91>:
  D.49704_1575 = strcasecmp (val_341, "enabled");
  if (D.49704_1575 == 0)
    goto <bb 96>;
  else
    goto <bb 92>;

<bb 92>:
  D.49705_1576 = strcasecmp (val_341, "active");
  if (D.49705_1576 == 0)
    goto <bb 96>;
  else
    goto <bb 93>;

<bb 93>:
  D.49706_1577 = strcasecmp (val_341, "allow");
  if (D.49706_1577 == 0)
    goto <bb 96>;
  else
    goto <bb 94>;

<bb 94>:
  D.49707_1578 = switch_is_number (val_341);
  if (D.49707_1578 != 0)
    goto <bb 95>;
  else
    goto <bb 462>;

<bb 95>:
  # DEBUG __nptr => val_341
  D.49708_1579 = strtol (val_341, 0B, 10);
  if (D.49708_1579 != 0)
    goto <bb 96>;
  else
    goto <bb 462>;

<bb 96>:
Invalid sum of outgoing probabilities 25.0%
  goto <bb 463>;

<bb 97>:
  D.44471_343 = smh_186->mparams;
  D.44636_344 = D.44471_343->hold_laps;
  if (D.44636_344 == 0)
    goto <bb 98>;
  else
    goto <bb 463>;

<bb 98>:
  D.44471_343->hold_laps = 1;
  D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_1007);
  if (D.44640_348 != 0)
    goto <bb 99>;
  else
    goto <bb 463>;

<bb 99>:
  reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
  # DEBUG reneg => reneg_349
  D.44530_350 = session_161(D)->channel;
  val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
  # DEBUG val => val_351
  if (val_351 != 0B)
    goto <bb 100>;
  else
    goto <bb 101>;

<bb 100>:
  reneg_352 = switch_true (val_351);
  # DEBUG reneg => reneg_352

<bb 101>:
  # reneg_81 = PHI <reneg_349(99), reneg_352(100)>
  # DEBUG reneg => reneg_81
  if (reneg_81 != 0)
    goto <bb 102>;
  else
    goto <bb 114>;

<bb 102>:
  reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
  # DEBUG reneg => reneg_353
  D.44530_354 = session_161(D)->channel;
  val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
  # DEBUG val => val_355
  if (val_355 != 0B)
    goto <bb 103>;
  else
    goto <bb 114>;

<bb 103>:
  # DEBUG expr => val_355
  D.49712_1581 = strcasecmp (val_355, "yes");
  if (D.49712_1581 == 0)
    goto <bb 113>;
  else
    goto <bb 104>;

<bb 104>:
  D.49713_1582 = strcasecmp (val_355, "on");
  if (D.49713_1582 == 0)
    goto <bb 113>;
  else
    goto <bb 105>;

<bb 105>:
  D.49714_1583 = strcasecmp (val_355, "true");
  if (D.49714_1583 == 0)
    goto <bb 113>;
  else
    goto <bb 106>;

<bb 106>:
  D.49715_1584 = strcasecmp (val_355, "t");
  if (D.49715_1584 == 0)
    goto <bb 113>;
  else
    goto <bb 107>;

<bb 107>:
  D.49716_1585 = strcasecmp (val_355, "enabled");
  if (D.49716_1585 == 0)
    goto <bb 113>;
  else
    goto <bb 108>;

<bb 108>:
  D.49717_1586 = strcasecmp (val_355, "active");
  if (D.49717_1586 == 0)
    goto <bb 113>;
  else
    goto <bb 109>;

<bb 109>:
  D.49718_1587 = strcasecmp (val_355, "allow");
  if (D.49718_1587 == 0)
    goto <bb 113>;
  else
    goto <bb 110>;

<bb 110>:
  D.49719_1588 = switch_is_number (val_355);
  if (D.49719_1588 != 0)
    goto <bb 111>;
  else
    goto <bb 113>;

<bb 111>:
  # DEBUG __nptr => val_355
  D.49720_1589 = strtol (val_355, 0B, 10);
  if (D.49720_1589 != 0)
    goto <bb 112>;
  else
    goto <bb 113>;

<bb 112>:

<bb 113>:
  # reneg_1590 = PHI <1(103), 1(104), 1(105), 1(106), 1(107), 1(108), 1(109), 1(112), 0(110), 0(111)>
  # DEBUG reneg => NULL

<bb 114>:
  # reneg_82 = PHI <0(101), reneg_353(102), reneg_1590(113)>
  # DEBUG reneg => reneg_82
  D.44649_357 = session_161(D)->bugs;
  if (D.44649_357 != 0B)
    goto <bb 115>;
  else
    goto <bb 116>;

<bb 115>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
  # DEBUG reneg => 0
  # DEBUG reneg => 0
  goto <bb 117>;

<bb 116>:
  # DEBUG reneg => reneg_82
  if (reneg_82 == 0)
    goto <bb 117>;
  else
    goto <bb 119>;

<bb 117>:
  total_codecs_359 = smh_186->num_negotiated_codecs;
  if (total_codecs_359 != 0)
    goto <bb 118>;
  else
    goto <bb 120>;

<bb 118>:
  codec_array_360 = &smh_186->negotiated_codecs;
  # DEBUG codec_array => codec_array_360
  # DEBUG total_codecs => total_codecs_359
  goto <bb 120>;

<bb 119>:
  D.44471_362 = smh_186->mparams;
  D.44471_362->num_codecs = 0;
  switch_core_media_prepare_codecs (session_161(D), 0);
  # DEBUG codec_array => codec_array_190
  D.44471_364 = smh_186->mparams;
  total_codecs_365 = D.44471_364->num_codecs;
  # DEBUG total_codecs => total_codecs_365

<bb 120>:
  # codec_array_84 = PHI <codec_array_360(118), codec_array_190(117), codec_array_190(119)>
  # total_codecs_85 = PHI <total_codecs_359(118), total_codecs_192(117), total_codecs_365(119)>
  # DEBUG total_codecs => total_codecs_85
  # DEBUG codec_array => codec_array_84
  D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
  if (D.44661_366 != 0B)
    goto <bb 123>;
  else
    goto <bb 121>;

<bb 121>:
  D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
  if (D.44663_367 != 0B)
    goto <bb 123>;
  else
    goto <bb 122>;

<bb 122>:
  D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
  if (D.44665_368 != 0B)
    goto <bb 123>;
  else
    goto <bb 124>;

<bb 123>:
  D.44530_369 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);

<bb 124>:
  switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
  switch_core_media_pass_zrtp_hash (session_161(D));
  check_ice (smh_186, 0, sdp_198, 0B);
  check_ice (smh_186, 1, sdp_198, 0B);
  m_370 = sdp_198->sdp_media;
  # DEBUG m => m_370
  # DEBUG nm_idx => 0
  # DEBUG m_idx => 0
  # DEBUG codec_ms => 0
  # DEBUG got_webrtc => 0
  # DEBUG got_udptl => 0
  # DEBUG got_savp => 0
  # DEBUG got_video_savp => NULL
  # DEBUG got_video_avp => NULL
  # DEBUG got_avp => 0
  # DEBUG got_audio => 0
  # DEBUG got_video_crypto => 0
  # DEBUG got_crypto => 0
  # DEBUG m => m_370
  # DEBUG cng_pt => 0
  # DEBUG best_te => 0
  # DEBUG match => 0
  if (m_370 != 0B)
    goto <bb 125>;
  else
    goto <bb 457> (done);

<bb 125>:

<bb 126>:
  # match_1801 = PHI <match_15(455), 0(125)>
  # best_te_681 = PHI <best_te_22(455), 0(125)>
  # cng_pt_1718 = PHI <cng_pt_26(455), 0(125)>
  # m_1765 = PHI <m_1094(455), m_370(125)>
  # got_crypto_1867 = PHI <got_crypto_55(455), 0(125)>
  # got_video_crypto_1675 = PHI <got_video_crypto_63(455), 0(125)>
  # got_audio_1694 = PHI <got_audio_66(455), 0(125)>
  # got_avp_672 = PHI <got_avp_1860(455), 0(125)>
  # got_savp_512 = PHI <got_savp_1740(455), 0(125)>
  # got_udptl_1869 = PHI <got_udptl_1744(455), 0(125)>
  # got_webrtc_452 = PHI <got_webrtc_78(455), 0(125)>
  # codec_ms_477 = PHI <codec_ms_94(455), 0(125)>
  # m_idx_1870 = PHI <m_idx_113(455), 0(125)>
  # nm_idx_1750 = PHI <nm_idx_121(455), 0(125)>
  # DEBUG ptime => dptime_1036
  # DEBUG maxptime => dmaxptime_1006
  D.44666_373 = m_1765->m_proto;
  if (D.44666_373 == 261)
    goto <bb 127>;
  else
    goto <bb 128>;

<bb 127>:
  got_webrtc_374 = got_webrtc_452 + 1;
  # DEBUG got_webrtc => got_webrtc_374
  switch_core_session_set_ice (session_161(D));

<bb 128>:
  # got_webrtc_78 = PHI <got_webrtc_452(126), got_webrtc_374(127)>
  # DEBUG got_webrtc => got_webrtc_78
  D.44669_375 = m_1765->m_proto_name;
  if (D.44669_375 != 0B)
    goto <bb 129>;
  else
    goto <bb 131>;

<bb 129>:
  D.44672_377 = strcasecmp (D.44669_375, "UDP/TLS/RTP/SAVPF");
  if (D.44672_377 == 0)
    goto <bb 130>;
  else
    goto <bb 131>;

<bb 130>:
  D.44530_378 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_378, 107, 1);

<bb 131>:
  D.44675_379 = m_1765->m_proto;
  D.44676_380 = D.44675_379 == 257;
  D.44677_381 = D.44675_379 == 261;
  D.44678_382 = D.44677_381 | D.44676_380;
  if (D.44678_382 != 0)
    goto <bb 132>;
  else
    goto <bb 134>;

<bb 132>:
  D.44681_383 = m_1765->m_type;
  if (D.44681_383 == 2)
    goto <bb 133>;
  else
    goto <bb 140>;

<bb 133>:
  got_savp_384 = got_savp_512 + 1;
  # DEBUG got_savp => got_savp_384
  goto <bb 140>;

<bb 134>:
  if (D.44675_379 == 256)
    goto <bb 135>;
  else
    goto <bb 137>;

<bb 135>:
  D.44681_387 = m_1765->m_type;
  if (D.44681_387 == 2)
    goto <bb 136>;
  else
    goto <bb 140>;

<bb 136>:
  got_avp_388 = got_avp_672 + 1;
  # DEBUG got_avp => got_avp_388
  goto <bb 140>;

<bb 137>:
  if (D.44675_379 == 258)
    goto <bb 139>;
  else
    goto <bb 138>;

<bb 138>:
  pretmp.1048_1674 = m_1765->m_type;
  goto <bb 140>;

<bb 139>:
  got_udptl_391 = got_udptl_1869 + 1;
  # DEBUG got_udptl => got_udptl_391
  # DEBUG got_udptl => got_udptl_391
  # DEBUG got_savp => got_savp_512
  # DEBUG got_video_savp => NULL
  # DEBUG got_video_avp => NULL
  # DEBUG got_avp => got_avp_672
  pretmp.1056_346 = m_1765->m_type;
  goto <bb 141>;

<bb 140>:
  # got_avp_68 = PHI <got_avp_672(132), got_avp_672(135), got_avp_672(138), got_avp_388(136), got_avp_672(133)>
  # got_savp_74 = PHI <got_savp_512(132), got_savp_512(135), got_savp_512(138), got_savp_512(136), got_savp_384(133)>
  # prephitmp.1049_1809 = PHI <D.44681_383(132), D.44681_387(135), pretmp.1048_1674(138), D.44681_387(136), D.44681_383(133)>
  # DEBUG got_udptl => got_udptl_1869
  # DEBUG got_savp => got_savp_74
  # DEBUG got_video_savp => NULL
  # DEBUG got_video_avp => NULL
  # DEBUG got_avp => got_avp_68
  if (got_udptl_1869 != 0)
    goto <bb 141>;
  else
    goto <bb 173>;

<bb 141>:
  # got_avp_1741 = PHI <got_avp_68(140), got_avp_672(139)>
  # got_savp_1712 = PHI <got_savp_74(140), got_savp_512(139)>
  # got_udptl_775 = PHI <got_udptl_1869(140), got_udptl_391(139)>
  # prephitmp.1057_1806 = PHI <prephitmp.1049_1809(140), pretmp.1056_346(139)>
  if (prephitmp.1057_1806 == 8)
    goto <bb 142>;
  else
    goto <bb 173>;

<bb 142>:
  D.44697_393 = m_1765->m_port;
  if (D.44697_393 != 0)
    goto <bb 143>;
  else
    goto <bb 173>;

<bb 143>:
  # cng_pt_1792 = PHI <cng_pt_1718(142)>
  # m_1790 = PHI <m_1765(142)>
  t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_1790);
  # DEBUG t38_options => t38_options_394
  D.44530_395 = session_161(D)->channel;
  D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
  if (D.44699_396 != 0)
    goto <bb 457> (done);
  else
    goto <bb 144>;

<bb 144>:
  D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
  D.44703_399 = switch_true (D.44702_398);
  if (D.44703_399 != 0)
    goto <bb 145>;
  else
    goto <bb 146>;

<bb 145>:
  D.44530_400 = session_161(D)->channel;
  switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
  # DEBUG match => 0
  goto <bb 457> (done);

<bb 146>:
  var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
  # DEBUG var => var_402
  D.44481_403 = smh_186->session;
  D.44482_404 = D.44481_403->channel;
  D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
  # DEBUG pass => (int) D.44706_405
  D.44530_407 = session_161(D)->channel;
  D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
  if (D.44707_408 != 0)
    goto <bb 147>;
  else
    goto <bb 149>;

<bb 147>:
  if (proceed_209(D) != 0B)
    goto <bb 148>;
  else
    goto <bb 149>;

<bb 148>:
  *proceed_209(D) = 0;

<bb 149>:
  if (var_402 != 0B)
    goto <bb 150>;
  else
    goto <bb 152>;

<bb 150>:
  pass_409 = switch_true (var_402);
  # DEBUG pass => pass_409
  if (pass_409 == 0)
    goto <bb 151>;
  else
    goto <bb 153>;

<bb 151>:
  D.44716_410 = strcasecmp (var_402, "once");
  if (D.44716_410 == 0)
    goto <bb 154>;
  else
    goto <bb 155>;

<bb 152>:
  pass_406 = (int) D.44706_405;

<bb 153>:
  # pass_126 = PHI <pass_406(152), pass_409(150)>
  # DEBUG pass => pass_126
  if (pass_126 == 2)
    goto <bb 154>;
  else
    goto <bb 155>;

<bb 154>:
  # pass_1665 = PHI <pass_126(153), 2(151)>
  D.44481_412 = smh_186->session;
  D.44482_413 = D.44481_412->channel;
  D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
  if (D.44723_414 != 0)
    goto <bb 464>;
  else
    goto <bb 155>;

<bb 155>:
  # pass_1849 = PHI <0(151), pass_1665(154), pass_126(153)>
  D.44530_415 = session_161(D)->channel;
  D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
  if (D.44724_416 == 0)
    goto <bb 464>;
  else
    goto <bb 156>;

<bb 156>:
  D.44530_417 = session_161(D)->channel;
  D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
  if (D.44726_418 != 0)
    goto <bb 464>;
  else
    goto <bb 157>;

<bb 157>:
  D.44530_419 = session_161(D)->channel;
  D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
  if (D.44728_420 != 0)
    goto <bb 464>;
  else
    goto <bb 158>;

<bb 158>:
  D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44730_422 = switch_rtp_ready (D.44605_421);
  if (D.44730_422 == 0)
    goto <bb 464>;
  else
    goto <bb 159>;

<bb 159>:
  # DEBUG pass => pass_1849
  if (pass_1849 != 0)
    goto <bb 160>;
  else
    goto <bb 457> (done);

<bb 160>:
  D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
  if (D.44733_424 == 0)
    goto <bb 161>;
  else
    goto <bb 457> (done);

<bb 161>:
  other_session.89_425 = other_session;
  other_channel_426 = switch_core_session_get_channel (other_session.89_425);
  # DEBUG other_channel => other_channel_426
  D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  remote_host_428 = switch_rtp_get_remote_host (D.44605_427);
  # DEBUG remote_host => remote_host_428
  D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  remote_port_430 = switch_rtp_get_remote_port (D.44605_429);
  # DEBUG remote_port => remote_port_430
  tmp = "";
  D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
  if (D.44737_431 == 0)
    goto <bb 162>;
  else
    goto <bb 163>;

<bb 162>:
  D.44530_432 = session_161(D)->channel;
  D.44740_433 = switch_channel_get_name (D.44530_432);
  D.44741_434 = switch_channel_get_name (other_channel_426);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
  other_session.89_435 = other_session;
  switch_core_session_rwunlock (other_session.89_435);
  # DEBUG pass => 0
  # DEBUG match => 0
  goto <bb 457> (done);

<bb 163>:
  D.44530_438 = session_161(D)->channel;
  D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
  D.44743_440 = switch_true (D.44742_439);
  if (D.44743_440 != 0)
    goto <bb 164>;
  else
    goto <bb 166>;

<bb 164>:
  D.44530_441 = session_161(D)->channel;
  D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
  D.44747_443 = switch_true (D.44746_442);
  if (D.44747_443 != 0)
    goto <bb 165>;
  else
    goto <bb 166>;

<bb 165>:
  switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);

<bb 166>:
  D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44751_445 = t38_options_394->remote_ip;
  D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
  D.44750_444->remote_sdp_ip = D.44752_446;
  D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44753_448 = t38_options_394->remote_port;
  D.44750_447->remote_sdp_port = D.44753_448;
  D.44756_449 = remote_host_428 != 0B;
  D.44757_450 = remote_port_430 != 0;
  D.44758_451 = D.44757_450 & D.44756_449;
  if (D.44758_451 != 0)
    goto <bb 167>;
  else
    goto <bb 170>;

<bb 167>:
  D.44760_453 = D.44750_447->remote_sdp_ip;
  D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
  if (D.39032_454 == 0)
    goto <bb 168>;
  else
    goto <bb 170>;

<bb 168>:
  if (remote_port_430 == D.44753_448)
    goto <bb 169>;
  else
    goto <bb 170>;

<bb 169>:
  D.44530_457 = session_161(D)->channel;
  D.44764_458 = switch_channel_get_name (D.44530_457);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
  goto <bb 172>;

<bb 170>:
  err = 0B;
  D.44530_459 = session_161(D)->channel;
  D.44765_460 = switch_channel_get_name (D.44530_459);
  D.44766_461 = (int) remote_port_430;
  D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_463 = D.44750_462->remote_sdp_ip;
  D.44762_465 = D.44750_462->remote_sdp_port;
  D.44767_466 = (int) D.44762_465;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
  D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44762_468 = D.44750_467->remote_sdp_port;
  D.44767_469 = (int) D.44762_468;
  switch_snprintf (&tmp, 32, "%d", D.44767_469);
  D.44530_470 = session_161(D)->channel;
  D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_472 = D.44750_471->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
  D.44530_473 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
  D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_476 = D.44750_475->remote_sdp_ip;
  D.44762_478 = D.44750_475->remote_sdp_port;
  D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
  if (D.44768_479 != 0)
    goto <bb 171>;
  else
    goto <bb 172>;

<bb 171>:
  err.90_480 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
  switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);

<bb 172>:
  other_session.89_481 = other_session;
  switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
  D.44481_482 = smh_186->session;
  D.44482_483 = D.44481_482->channel;
  switch_channel_set_flag_value (D.44482_483, 101, 1);
  other_session.89_484 = other_session;
  D.44772_485 = other_session.89_484->channel;
  switch_channel_set_flag_value (D.44772_485, 101, 1);
  other_session.89_486 = other_session;
  msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
  # DEBUG msg => msg_487
  msg_487->message_id = 21;
  msg_487->from = "src/switch_core_media.c";
  other_session.89_488 = other_session;
  D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
  msg_487->string_arg = D.44773_489;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
  other_session.89_490 = other_session;
  switch_core_session_queue_message (other_session.89_490, msg_487);
  other_session.89_491 = other_session;
  switch_core_session_rwunlock (other_session.89_491);
  goto <bb 457> (done);

<bb 173>:
  # got_avp_1860 = PHI <got_avp_68(140), got_avp_1741(141), got_avp_1741(142)>
  # got_savp_1740 = PHI <got_savp_74(140), got_savp_1712(141), got_savp_1712(142)>
  # got_udptl_1744 = PHI <got_udptl_1869(140), got_udptl_775(141), got_udptl_775(142)>
  # prephitmp.1028_1815 = PHI <prephitmp.1049_1809(140), prephitmp.1057_1806(141), prephitmp.1057_1806(142)>
  if (prephitmp.1028_1815 == 2)
    goto <bb 174>;
  else
    goto <bb 362>;

<bb 174>:
  D.44697_494 = m_1765->m_port;
  D.44777_495 = D.44697_494 != 0;
  D.44778_496 = got_audio_1694 == 0;
  D.44779_497 = D.44778_496 & D.44777_495;
  if (D.44779_497 != 0)
    goto <bb 175>;
  else
    goto <bb 454>;

<bb 175>:
  D.44781_498 = switch_rtp_has_dtls ();
  if (D.44781_498 != 0)
    goto <bb 176>;
  else
    goto <bb 185>;

<bb 176>:
  D.44784_499 = dtls_ok (session_161(D));
  if (D.44784_499 != 0)
    goto <bb 177>;
  else
    goto <bb 185>;

<bb 177>:
  attr_500 = m_1765->m_attributes;
  # DEBUG attr => attr_500
  # DEBUG got_crypto => got_crypto_1867
  # DEBUG attr => attr_500
  if (attr_500 != 0B)
    goto <bb 178>;
  else
    goto <bb 216>;

<bb 178>:

<bb 179>:
  # attr_1560 = PHI <attr_506(184), attr_500(178)>
  # got_crypto_361 = PHI <got_crypto_50(184), got_crypto_1867(178)>
  D.44590_501 = attr_1560->a_name;
  D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
  if (D.44787_502 == 0)
    goto <bb 180>;
  else
    goto <bb 183>;

<bb 180>:
  D.44619_503 = attr_1560->a_value;
  # DEBUG s => D.44619_503
  if (D.44619_503 == 0B)
    goto <bb 183>;
  else
    goto <bb 181>;

<bb 181>:
  D.47888_1470 = *D.44619_503;
  if (D.47888_1470 == 0)
    goto <bb 182>;
  else
    goto <bb 183>;

<bb 182>:

<bb 183>:
  # got_crypto_50 = PHI <got_crypto_361(179), got_crypto_361(182), 1(181), got_crypto_361(180)>
  # DEBUG got_crypto => got_crypto_50
  attr_506 = attr_1560->a_next;
  # DEBUG attr => attr_506
  # DEBUG got_crypto => got_crypto_50
  # DEBUG attr => attr_506
  if (attr_506 != 0B)
    goto <bb 184>;
  else
    goto <bb 481>;

<bb 184>:
  goto <bb 179>;

<bb 185>:
  # DEBUG got_crypto => got_crypto_1867
  attr_507 = m_1765->m_attributes;
  # DEBUG attr => attr_507
  # DEBUG got_crypto => got_crypto_1867
  # DEBUG maxptime => dmaxptime_1006
  # DEBUG ptime => dptime_1036
  # DEBUG attr => attr_507
  if (attr_507 != 0B)
    goto <bb 482>;
  else
    goto <bb 216>;

<bb 186>:
  # attr_1600 = PHI <attr_923(482), attr_548(214)>
  # ptime_1476 = PHI <dptime_1036(482), ptime_34(214)>
  # maxptime_1471 = PHI <dmaxptime_1006(482), maxptime_38(214)>
  # got_crypto_1119 = PHI <got_crypto_141(482), got_crypto_53(214)>
  D.44590_508 = attr_1600->a_name;
  D.44795_509 = strcasecmp (D.44590_508, "rtcp");
  if (D.44795_509 == 0)
    goto <bb 187>;
  else
    goto <bb 190>;

<bb 187>:
  D.44619_510 = attr_1600->a_value;
  if (D.44619_510 != 0B)
    goto <bb 188>;
  else
    goto <bb 190>;

<bb 188>:
  D.44530_511 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_510, 1);
  D.44619_513 = attr_1600->a_value;
  # DEBUG __nptr => D.44619_513
  D.47891_1472 = strtol (D.44619_513, 0B, 10);
  D.44799_515 = (short unsigned int) D.47891_1472;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;
  D.44471_516 = smh_186->mparams;
  D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
  if (D.44800_517 == 0B)
    goto <bb 189>;
  else
    goto <bb 213>;

<bb 189>:
  D.44471_516->rtcp_audio_interval_msec = "5000";
  goto <bb 213>;

<bb 190>:
  D.44805_520 = strcasecmp (D.44590_508, "ptime");
  if (D.44805_520 == 0)
    goto <bb 191>;
  else
    goto <bb 193>;

<bb 191>:
  D.44619_521 = attr_1600->a_value;
  if (D.44619_521 != 0B)
    goto <bb 192>;
  else
    goto <bb 193>;

<bb 192>:
  # DEBUG __nptr => D.44619_521
  ptime_1473 = strtol (D.44619_521, 0B, 10);
  # DEBUG ptime => NULL
  goto <bb 213>;

<bb 193>:
  D.44810_525 = strcasecmp (D.44590_508, "maxptime");
  if (D.44810_525 == 0)
    goto <bb 194>;
  else
    goto <bb 196>;

<bb 194>:
  D.44619_526 = attr_1600->a_value;
  if (D.44619_526 != 0B)
    goto <bb 195>;
  else
    goto <bb 196>;

<bb 195>:
  # DEBUG __nptr => D.44619_526
  maxptime_1474 = strtol (D.44619_526, 0B, 10);
  # DEBUG maxptime => NULL
  goto <bb 213>;

<bb 196>:
  if (got_crypto_1119 <= 0)
    goto <bb 197>;
  else
    goto <bb 213>;

<bb 197>:
  D.44815_530 = strcasecmp (D.44590_508, "crypto");
  if (D.44815_530 == 0)
    goto <bb 198>;
  else
    goto <bb 213>;

<bb 198>:
  D.44619_531 = attr_1600->a_value;
  # DEBUG s => D.44619_531
  if (D.44619_531 == 0B)
    goto <bb 213>;
  else
    goto <bb 199>;

<bb 199>:
  D.47901_1475 = *D.44619_531;
  if (D.47901_1475 == 0)
    goto <bb 213>;
  else
    goto <bb 465>;

<bb 200>:
  D.44530_536 = session_161(D)->channel;
  D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
  # DEBUG expr => D.44825_537
  if (D.44825_537 != 0B)
    goto <bb 201>;
  else
    goto <bb 466>;

<bb 201>:
  D.49724_1591 = strcasecmp (D.44825_537, "yes");
  if (D.49724_1591 == 0)
    goto <bb 210>;
  else
    goto <bb 202>;

<bb 202>:
  D.49725_1592 = strcasecmp (D.44825_537, "on");
  if (D.49725_1592 == 0)
    goto <bb 210>;
  else
    goto <bb 203>;

<bb 203>:
  D.49726_1593 = strcasecmp (D.44825_537, "true");
  if (D.49726_1593 == 0)
    goto <bb 210>;
  else
    goto <bb 204>;

<bb 204>:
  D.49727_1594 = strcasecmp (D.44825_537, "t");
  if (D.49727_1594 == 0)
    goto <bb 210>;
  else
    goto <bb 205>;

<bb 205>:
  D.49728_1595 = strcasecmp (D.44825_537, "enabled");
  if (D.49728_1595 == 0)
    goto <bb 210>;
  else
    goto <bb 206>;

<bb 206>:
  D.49729_1596 = strcasecmp (D.44825_537, "active");
  if (D.49729_1596 == 0)
    goto <bb 210>;
  else
    goto <bb 207>;

<bb 207>:
  D.49730_1597 = strcasecmp (D.44825_537, "allow");
  if (D.49730_1597 == 0)
    goto <bb 210>;
  else
    goto <bb 208>;

<bb 208>:
  D.49731_1598 = switch_is_number (D.44825_537);
  if (D.49731_1598 != 0)
    goto <bb 209>;
  else
    goto <bb 466>;

<bb 209>:
  # DEBUG __nptr => D.44825_537
  D.49732_1599 = strtol (D.44825_537, 0B, 10);
  if (D.49732_1599 != 0)
    goto <bb 210>;
  else
    goto <bb 466>;

<bb 210>:
Invalid sum of outgoing probabilities 0.0%
  pretmp.1034_1640 = attr_1600->a_value;
  goto <bb 212>;

<bb 211>:
  # cng_pt_1709 = PHI <cng_pt_1718(466)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  # DEBUG match => 0
  goto <bb 457> (done);

<bb 212>:
  # prephitmp.1031_1893 = PHI <D.44619_531(465), pretmp.1034_1640(210), pretmp.1034_1896(467)>
  # DEBUG crypto => prephitmp.1031_1893
  # DEBUG __nptr => prephitmp.1031_1893
  crypto_tag_1477 = strtol (prephitmp.1031_1893, 0B, 10);
  # DEBUG crypto_tag => NULL
  got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, prephitmp.1031_1893, crypto_tag_1477, sdp_type_546(D));
  # DEBUG got_crypto => got_crypto_547

<bb 213>:
  # ptime_34 = PHI <ptime_1476(189), ptime_1473(192), ptime_1476(195), ptime_1476(196), ptime_1476(197), ptime_1476(199), ptime_1476(212), ptime_1476(188), ptime_1476(198)>
  # maxptime_38 = PHI <maxptime_1471(189), maxptime_1471(192), maxptime_1474(195), maxptime_1471(196), maxptime_1471(197), maxptime_1471(199), maxptime_1471(212), maxptime_1471(188), maxptime_1471(198)>
  # got_crypto_53 = PHI <got_crypto_1119(189), got_crypto_1119(192), got_crypto_1119(195), got_crypto_1119(196), got_crypto_1119(197), got_crypto_1119(199), got_crypto_547(212), got_crypto_1119(188), got_crypto_1119(198)>
  # DEBUG got_crypto => got_crypto_53
  # DEBUG maxptime => maxptime_38
  # DEBUG ptime => ptime_34
  attr_548 = attr_1600->a_next;
  # DEBUG attr => attr_548
  # DEBUG got_crypto => got_crypto_53
  # DEBUG maxptime => maxptime_38
  # DEBUG ptime => ptime_34
  # DEBUG attr => attr_548
  if (attr_548 != 0B)
    goto <bb 214>;
  else
    goto <bb 215>;

<bb 214>:
  goto <bb 186>;

<bb 215>:
  # ptime_376 = PHI <ptime_34(213)>
  # maxptime_917 = PHI <maxptime_38(213)>
  # got_crypto_1805 = PHI <got_crypto_53(213)>

<bb 216>:
  # ptime_1034 = PHI <ptime_376(215), dptime_1036(185), dptime_1036(177)>
  # maxptime_1041 = PHI <maxptime_917(215), dmaxptime_1006(185), dmaxptime_1006(177)>
  # got_crypto_970 = PHI <got_crypto_1805(215), got_crypto_1867(185), got_crypto_1867(177)>
  D.44834_549 = got_crypto_970 == -1;
  D.44835_550 = got_savp_1740 != 0;
  D.44836_551 = D.44834_549 & D.44835_550;
  if (D.44836_551 != 0)
    goto <bb 217>;
  else
    goto <bb 219>;

<bb 217>:
  D.44839_552 = got_avp_1860 | got_webrtc_78;
  if (D.44839_552 == 0)
    goto <bb 218>;
  else
    goto <bb 219>;

<bb 218>:
  # cng_pt_1733 = PHI <cng_pt_1718(217)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
  # DEBUG match => 0
  goto <bb 457> (done);

<bb 219>:
  connection_554 = sdp_198->sdp_connection;
  # DEBUG connection => connection_554
  connection_555 = m_1765->m_connections;
  if (connection_555 != 0B)
    goto <bb 222>;
  else
    goto <bb 220>;

<bb 220>:
  # DEBUG connection => connection_554
  if (connection_554 == 0B)
    goto <bb 221>;
  else
    goto <bb 222>;

<bb 221>:
  # cng_pt_1676 = PHI <cng_pt_1718(220)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  # DEBUG match => 0
  goto <bb 457> (done);

<bb 222>:
  # connection_139 = PHI <connection_554(220), connection_555(219)>
  # DEBUG x => 0
  map_559 = m_1765->m_rtpmaps;
  # DEBUG map => map_559
  # DEBUG map => map_559
  # DEBUG nm_idx => nm_idx_1750
  # DEBUG m_idx => m_idx_1870
  # DEBUG codec_ms => codec_ms_477
  # DEBUG x => NULL
  # DEBUG cng_pt => cng_pt_1718
  # DEBUG best_te => best_te_681
  # DEBUG match => match_1801
  if (map_559 != 0B)
    goto <bb 223>;
  else
    goto <bb 296>;

<bb 223>:

<bb 224>:
  # match_1902 = PHI <match_7(294), match_1801(223)>
  # best_te_1899 = PHI <best_te_19(294), best_te_681(223)>
  # cng_pt_1668 = PHI <cng_pt_24(294), cng_pt_1718(223)>
  # codec_ms_1721 = PHI <codec_ms_91(294), codec_ms_477(223)>
  # m_idx_793 = PHI <m_idx_103(294), m_idx_1870(223)>
  # nm_idx_1756 = PHI <nm_idx_117(294), nm_idx_1750(223)>
  # map_1729 = PHI <map_712(294), map_559(223)>
  # DEBUG map_bit_rate => 0
  codec_fmtp = {};
  rm_encoding_561 = map_1729->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_561
  if (rm_encoding_561 == 0B)
    goto <bb 225>;
  else
    goto <bb 226>;

<bb 225>:

<bb 226>:
  # rm_encoding_130 = PHI <rm_encoding_561(224), ""(225)>
  # DEBUG rm_encoding => rm_encoding_130
  D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
  if (D.44848_563 == 0)
    goto <bb 227>;
  else
    goto <bb 230>;

<bb 227>:
  if (best_te_1899 == 0)
    goto <bb 229>;
  else
    goto <bb 228>;

<bb 228>:
  D.44854_564 = map_1729->rm_rate;
  D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44855_566 = D.44750_565->rm_rate;
  if (D.44854_564 == D.44855_566)
    goto <bb 229>;
  else
    goto <bb 293>;

<bb 229>:
  D.44856_567 = map_1729->rm_pt;
  best_te_568 = (switch_payload_t) D.44856_567;
  # DEBUG best_te => best_te_568
  D.44857_569 = (int) best_te_568;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
  goto <bb 293>;

<bb 230>:
  D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
  if (D.44858_570 == 0)
    goto <bb 231>;
  else
    goto <bb 235>;

<bb 231>:
  if (cng_pt_1668 == 0)
    goto <bb 232>;
  else
    goto <bb 235>;

<bb 232>:
  D.44863_571 = strcasecmp (rm_encoding_130, "CN");
  if (D.44863_571 == 0)
    goto <bb 233>;
  else
    goto <bb 235>;

<bb 233>:
  D.44856_572 = map_1729->rm_pt;
  cng_pt_573 = (switch_payload_t) D.44856_572;
  # DEBUG cng_pt => cng_pt_573
  D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_574 != 0B)
    goto <bb 234>;
  else
    goto <bb 293>;

<bb 234>:
  D.44868_575 = (int) cng_pt_573;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
  D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44471_577 = smh_186->mparams;
  D.44869_578 = D.44471_577->cng_pt;
  switch_rtp_set_cng_pt (D.44605_576, D.44869_578);
  goto <bb 293>;

<bb 235>:
  # DEBUG x => NULL
  if (match_1902 != 0)
    goto <bb 293>;
  else
    goto <bb 236>;

<bb 236>:
  # DEBUG codec_ms => ptime_1034
  if (maxptime_1041 != 0)
    goto <bb 237>;
  else
    goto <bb 238>;

<bb 237>:
  D.44877_582 = ptime_1034 == 0;
  D.44878_583 = ptime_1034 > maxptime_1041;
  D.44879_584 = D.44878_583 | D.44877_582;
  if (D.44879_584 != 0)
    goto <bb 468>;
  else
    goto <bb 469>;

<bb 238>:
  # DEBUG codec_ms => ptime_1034
  if (ptime_1034 == 0)
    goto <bb 239>;
  else
    goto <bb 240>;

<bb 239>:
  D.44856_586 = map_1729->rm_pt;
  D.44884_587 = (uint32_t) D.44856_586;
  D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
  codec_ms_589 = (int) D.44885_588;
  # DEBUG codec_ms => codec_ms_589

<bb 240>:
  # codec_ms_87 = PHI <codec_ms_1884(469), codec_ms_589(239), ptime_1034(238)>
  # DEBUG codec_ms => codec_ms_87
  D.44856_590 = map_1729->rm_pt;
  csui.173_591 = (unsigned char) D.44856_590;
  # DEBUG payload => csui.173_591
  if (csui.173_591 <= 18)
    goto <bb 241> (<L500>);
  else
    goto <bb 242> (<L501>);

<L500>:
  map_bit_rate_1480 = CSWTCH.174[csui.173_591];

  # map_bit_rate_1481 = PHI <0(240), map_bit_rate_1480(241)>
<L501>:
<L502>:
  # DEBUG map_bit_rate => NULL
  if (ptime_1034 == 0)
    goto <bb 243>;
  else
    goto <bb 245>;

<bb 243>:
  D.44889_593 = map_1729->rm_encoding;
  D.44890_594 = strcasecmp (D.44889_593, "g723");
  if (D.44890_594 == 0)
    goto <bb 245>;
  else
    goto <bb 244>;

<bb 244>:

<bb 245>:
  # codec_ms_88 = PHI <codec_ms_87(242), codec_ms_87(244), 33(243)>
  # DEBUG codec_ms => codec_ms_88
  remote_codec_rate_596 = map_1729->rm_rate;
  # DEBUG remote_codec_rate => remote_codec_rate_596
  # DEBUG fmtp_remote_codec_rate => 0
  memset (&codec_fmtp, 0, 16);
  D.44893_598 = map_1729->rm_fmtp;
  # DEBUG s => D.44893_598
  if (D.44893_598 == 0B)
    goto <bb 247>;
  else
    goto <bb 246>;

<bb 246>:
  D.47916_1482 = *D.44893_598;
  if (D.47916_1482 == 0)
    goto <bb 247>;
  else
    goto <bb 470>;

<bb 247>:
  D.44889_600 = map_1729->rm_encoding;
  D.44897_601 = strcasecmp (D.44889_600, "ilbc");
  if (D.44897_601 == 0)
    goto <bb 256>;
  else
    goto <bb 248>;

<bb 248>:
  D.44901_605 = strcasecmp (D.44889_600, "isac");
  if (D.44901_605 == 0)
    goto <bb 249>;
  else
    goto <bb 256>;

<bb 249>:
  goto <bb 256>;

<bb 250>:
  D.44909_613 = codec_fmtp.bits_per_second;
  if (D.44909_613 != 0)
    goto <bb 251>;
  else
    goto <bb 252>;

<bb 251>:
  map_bit_rate_615 = (uint32_t) D.44909_613;
  # DEBUG map_bit_rate => map_bit_rate_615

<bb 252>:
  # map_bit_rate_131 = PHI <map_bit_rate_1481(250), map_bit_rate_615(251)>
  # DEBUG map_bit_rate => map_bit_rate_131
  D.44912_616 = codec_fmtp.microseconds_per_packet;
  if (D.44912_616 != 0)
    goto <bb 253>;
  else
    goto <bb 254>;

<bb 253>:
  codec_ms_618 = D.44912_616 / 1000;
  # DEBUG codec_ms => codec_ms_618

<bb 254>:
  # codec_ms_89 = PHI <codec_ms_88(252), codec_ms_618(253)>
  # DEBUG codec_ms => codec_ms_89
  fmtp_remote_codec_rate_619 = codec_fmtp.actual_samples_per_second;
  if (fmtp_remote_codec_rate_619 != 0)
    goto <bb 256>;
  else
    goto <bb 255>;

<bb 255>:

<bb 256>:
  # codec_ms_90 = PHI <39(249), codec_ms_88(470), codec_ms_89(255), codec_ms_89(254), 32(247), codec_ms_88(248)>
  # fmtp_remote_codec_rate_99 = PHI <0(249), 0(470), 0(255), fmtp_remote_codec_rate_619(254), 0(247), 0(248)>
  # map_bit_rate_132 = PHI <32001(249), map_bit_rate_1481(470), map_bit_rate_131(255), map_bit_rate_131(254), 13332(247), 32099(248)>
  # DEBUG map_bit_rate => map_bit_rate_132
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99
  # DEBUG codec_ms => codec_ms_90
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG nm_idx => nm_idx_1756
  # DEBUG m_idx => m_idx_793
  # DEBUG remote_codec_rate => remote_codec_rate_596
  # DEBUG match => 0
  D.44471_1502 = smh_186->mparams;
  D.44997_1499 = D.44471_1502->num_codecs;
  D.44998_1497 = D.44997_1499 > 0;
  D.44999_1610 = total_codecs_85 > 0;
  D.45000_1153 = D.44999_1610 & D.44998_1497;
  if (D.45000_1153 != 0)
    goto <bb 257>;
  else
    goto <bb 291>;

<bb 257>:
  D.44994_693 = codec_ms_90 * 1000;

<bb 258>:
  # remote_codec_rate_1494 = PHI <remote_codec_rate_97(289), remote_codec_rate_596(257)>
  # m_idx_1488 = PHI <m_idx_100(289), m_idx_793(257)>
  # nm_idx_1140 = PHI <nm_idx_115(289), nm_idx_1756(257)>
  # i_1623 = PHI <i_711(289), 0(257)>
  i.91_627 = (unsigned int) i_1623;
  D.44919_628 = i.91_627 * 4;
  D.44920_629 = codec_array_84 + D.44919_628;
  imp_630 = *D.44920_629;
  # DEBUG imp => imp_630
  D.44921_631 = imp_630->bits_per_second;
  # DEBUG bit_rate => (uint32_t) D.44921_631
  codec_rate_633 = imp_630->samples_per_second;
  # DEBUG codec_rate => codec_rate_633
  D.44922_634 = imp_630->codec_type;
  if (D.44922_634 != 0)
    goto <bb 288>;
  else
    goto <bb 259>;

<bb 259>:
  bit_rate_632 = (uint32_t) D.44921_631;
  D.44856_635 = map_1729->rm_pt;
  D.44925_636 = (int) D.44856_635;
  remote_codec_rate.92_637 = (int) remote_codec_rate_1494;
  D.44927_638 = imp_630->iananame;
  D.44928_639 = imp_630->ianacode;
  D.44929_640 = (int) D.44928_639;
  D.44930_641 = imp_630->microseconds_per_packet;
  D.44931_642 = D.44930_641 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);
  D.44889_643 = map_1729->rm_encoding;
  # DEBUG s => D.44889_643
  if (D.44889_643 == 0B)
    goto <bb 261>;
  else
    goto <bb 260>;

<bb 260>:
  D.47920_1484 = *D.44889_643;
  if (D.47920_1484 == 0)
    goto <bb 261>;
  else
    goto <bb 471>;

<bb 261>:
  D.44856_650 = map_1729->rm_pt;
  D.44925_651 = (int) D.44856_650;
  if (D.44925_651 <= 95)
    goto <bb 262>;
  else
    goto <bb 263>;

<bb 262>:
  D.44928_654 = imp_630->ianacode;
  D.44929_655 = (int) D.44928_654;
  match_656 = D.44925_651 == D.44929_655;
  # DEBUG match => match_656
  pretmp.1054_1880 = (_Bool) match_656;
  pretmp.1054_1711 = bit_rate_632 != 0;
  pretmp.1054_1735 = pretmp.1054_1711 & pretmp.1054_1880;
  goto <bb 269>;

<bb 263>:
  D.44927_657 = imp_630->iananame;
  D.44945_658 = strcasecmp (rm_encoding_130, D.44927_657);
  if (D.44945_658 == 0)
    goto <bb 264>;
  else
    goto <bb 267>;

<bb 264>:
  if (remote_codec_rate_1494 == codec_rate_633)
    goto <bb 265>;
  else
    goto <bb 266>;

<bb 265>:
  pretmp.1046_1811 = bit_rate_632 != 0;
  pretmp.1046_1812 = pretmp.1046_1811 & 1;
  goto <bb 267>;

<bb 266>:
  D.44948_659 = imp_630->actual_samples_per_second;
  iftmp.93_766 = fmtp_remote_codec_rate_99 == D.44948_659;
  pretmp.1044_764 = (uint8_t) iftmp.93_766;
  pretmp.1046_1736 = (_Bool) pretmp.1044_764;
  pretmp.1046_785 = bit_rate_632 != 0;
  pretmp.1046_790 = pretmp.1046_785 & pretmp.1046_1736;

<bb 267>:
  # prephitmp.1045_1679 = PHI <pretmp.1044_764(266), 0(263), 1(265)>
  # prephitmp.1047_1680 = PHI <pretmp.1046_1736(266), 0(263), 1(265)>
  # prephitmp.1047_1678 = PHI <pretmp.1046_790(266), 0(263), pretmp.1046_1812(265)>
  # DEBUG match => prephitmp.1045_1679
  if (fmtp_remote_codec_rate_99 != 0)
    goto <bb 268>;
  else
    goto <bb 269>;

<bb 268>:

<bb 269>:
  # match_1 = PHI <match_656(262), prephitmp.1045_1679(267), prephitmp.1045_1679(268)>
  # remote_codec_rate_96 = PHI <remote_codec_rate_1494(262), remote_codec_rate_1494(267), fmtp_remote_codec_rate_99(268)>
  # prephitmp.1055_1808 = PHI <pretmp.1054_1880(262), prephitmp.1047_1680(267), prephitmp.1047_1680(268)>
  # prephitmp.1055_1807 = PHI <pretmp.1054_1735(262), prephitmp.1047_1678(267), prephitmp.1047_1678(268)>
  # DEBUG remote_codec_rate => remote_codec_rate_96
  # DEBUG match => match_1
  if (prephitmp.1055_1807 != 0)
    goto <bb 270>;
  else
    goto <bb 273>;

<bb 270>:
  D.44956_667 = map_bit_rate_132 != 0;
  D.44957_668 = map_bit_rate_132 != bit_rate_632;
  D.44958_669 = D.44957_668 & D.44956_667;
  if (D.44958_669 != 0)
    goto <bb 271>;
  else
    goto <bb 273>;

<bb 271>:
  D.44961_671 = strcasecmp (D.44889_643, "ilbc");
  if (D.44961_671 != 0)
    goto <bb 272>;
  else
    goto <bb 273>;

<bb 272>:
  D.44964_673 = strcasecmp (D.44889_643, "isac");
  if (D.44964_673 != 0)
    goto <bb 288>;
  else
    goto <bb 273>;

<bb 273>:
  # match_2 = PHI <match_1(269), 1(270), 1(271), 1(272)>
  # prephitmp.1041_750 = PHI <prephitmp.1055_1808(269), 1(270), 1(271), 1(272)>
  # DEBUG match => match_2
  D.44969_676 = remote_codec_rate_96 != 0;
  D.44970_677 = D.44969_676 & prephitmp.1041_750;
  if (D.44970_677 != 0)
    goto <bb 274>;
  else
    goto <bb 278>;

<bb 274>:
  D.44973_678 = codec_rate_633 != 0;
  D.44974_679 = remote_codec_rate_96 != codec_rate_633;
  D.44975_680 = D.44974_679 & D.44973_678;
  if (D.44975_680 != 0)
    goto <bb 275>;
  else
    goto <bb 279>;

<bb 275>:
  D.44978_682 = strcasecmp (D.44889_643, "pcma");
  if (D.44978_682 == 0)
    goto <bb 277>;
  else
    goto <bb 276>;

<bb 276>:
  D.44980_684 = strcasecmp (D.44889_643, "pcmu");
  if (D.44980_684 == 0)
    goto <bb 277>;
  else
    goto <bb 279>;

<bb 277>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
  # DEBUG match => 0
  # DEBUG match => 0
  goto <bb 288>;

<bb 278>:
  # DEBUG match => match_2
  if (match_2 != 0)
    goto <bb 279>;
  else
    goto <bb 288>;

<bb 279>:
  if (scrooge_80 != 0)
    goto <bb 280>;
  else
    goto <bb 281>;

<bb 280>:
  D.44927_686 = imp_630->iananame;
  D.44985_687 = imp_630->samples_per_second;
  D.44930_688 = imp_630->microseconds_per_packet;
  D.44931_689 = D.44930_688 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44927_686, D.44985_687, D.44931_689);
  goto <bb 286>;

<bb 281>:
  D.44990_690 = ptime_1034 != 0;
  D.44991_691 = codec_ms_90 != 0;
  D.44992_692 = D.44991_691 & D.44990_690;
  if (D.44992_692 != 0)
    goto <bb 282>;
  else
    goto <bb 283>;

<bb 282>:
  D.44930_694 = imp_630->microseconds_per_packet;
  if (D.44994_693 != D.44930_694)
    goto <bb 285>;
  else
    goto <bb 283>;

<bb 283>:
  if (remote_codec_rate_96 != codec_rate_633)
    goto <bb 284>;
  else
    goto <bb 286>;

<bb 284>:
  pretmp.1042_1737 = imp_630->microseconds_per_packet;

<bb 285>:
  # prephitmp.1043_1681 = PHI <D.44930_694(282), pretmp.1042_1737(284)>
  # DEBUG match => 0
  D.44927_696 = imp_630->iananame;
  D.44928_697 = imp_630->ianacode;
  D.44929_698 = (int) D.44928_697;
  D.44931_700 = prephitmp.1043_1681 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927_696, D.44929_698, codec_rate_633, D.44931_700, bit_rate_632);
  near_matches[nm_idx_1140].codec_idx = i_1623;
  remote_codec_rate.92_701 = (int) remote_codec_rate_96;
  near_matches[nm_idx_1140].rate = remote_codec_rate.92_701;
  near_matches[nm_idx_1140].imp = imp_630;
  near_matches[nm_idx_1140].map = map_1729;
  nm_idx_702 = nm_idx_1140 + 1;
  # DEBUG nm_idx => nm_idx_702
  goto <bb 288>;

<bb 286>:
  matches[m_idx_1488].codec_idx = i_1623;
  codec_rate.94_703 = (int) codec_rate_633;
  matches[m_idx_1488].rate = codec_rate.94_703;
  matches[m_idx_1488].imp = imp_630;
  matches[m_idx_1488].map = map_1729;
  m_idx_704 = m_idx_1488 + 1;
  # DEBUG m_idx => m_idx_704
  D.44927_705 = imp_630->iananame;
  D.44928_706 = imp_630->ianacode;
  D.44929_707 = (int) D.44928_706;
  D.44930_708 = imp_630->microseconds_per_packet;
  D.44931_709 = D.44930_708 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927_705, D.44929_707, codec_rate_633, D.44931_709, bit_rate_632);
  if (m_idx_704 > 29)
    goto <bb 287>;
  else
    goto <bb 288>;

<bb 287>:
  # codec_ms_1734 = PHI <codec_ms_90(286)>
  # m_idx_1799 = PHI <m_idx_704(286)>
  # nm_idx_1708 = PHI <nm_idx_1140(286)>
  # cng_pt_1706 = PHI <cng_pt_1668(286)>
  # best_te_1730 = PHI <best_te_1899(286)>
  goto <bb 296>;

<bb 288>:
  # remote_codec_rate_97 = PHI <remote_codec_rate_1494(258), remote_codec_rate_96(277), remote_codec_rate_96(285), remote_codec_rate_96(286), remote_codec_rate_96(278), remote_codec_rate_96(272)>
  # m_idx_100 = PHI <m_idx_1488(258), m_idx_1488(277), m_idx_1488(285), m_idx_704(286), m_idx_1488(278), m_idx_1488(272)>
  # nm_idx_115 = PHI <nm_idx_1140(258), nm_idx_1140(277), nm_idx_702(285), nm_idx_1140(286), nm_idx_1140(278), nm_idx_1140(272)>
  # DEBUG nm_idx => nm_idx_115
  # DEBUG m_idx => m_idx_100
  # DEBUG remote_codec_rate => remote_codec_rate_97
  # DEBUG match => 0
  i_711 = i_1623 + 1;
  # DEBUG i => i_711
  # DEBUG i => i_711
  # DEBUG nm_idx => nm_idx_115
  # DEBUG m_idx => m_idx_100
  # DEBUG remote_codec_rate => remote_codec_rate_97
  # DEBUG match => 0
  D.44471_622 = smh_186->mparams;
  D.44997_623 = D.44471_622->num_codecs;
  D.44998_624 = D.44997_623 > i_711;
  D.44999_625 = total_codecs_85 > i_711;
  D.45000_626 = D.44999_625 & D.44998_624;
  if (D.45000_626 != 0)
    goto <bb 289>;
  else
    goto <bb 290>;

<bb 289>:
  goto <bb 258>;

<bb 290>:
  # m_idx_527 = PHI <m_idx_100(288)>
  # nm_idx_1649 = PHI <nm_idx_115(288)>

<bb 291>:
  # m_idx_102 = PHI <m_idx_527(290), m_idx_793(256)>
  # nm_idx_902 = PHI <nm_idx_1649(290), nm_idx_1756(256)>
  # DEBUG m_idx => m_idx_102
  # DEBUG match => 0
  if (m_idx_102 > 29)
    goto <bb 292>;
  else
    goto <bb 293>;

<bb 292>:
  # codec_ms_1710 = PHI <codec_ms_90(291)>
  # m_idx_529 = PHI <m_idx_102(291)>
  # nm_idx_1793 = PHI <nm_idx_902(291)>
  # cng_pt_1732 = PHI <cng_pt_1668(291)>
  # best_te_652 = PHI <best_te_1899(291)>
  goto <bb 296>;

<bb 293>:
  # match_7 = PHI <match_1902(229), match_1902(234), match_1902(228), match_1902(235), 0(291), match_1902(233)>
  # best_te_19 = PHI <best_te_568(229), best_te_1899(234), best_te_1899(228), best_te_1899(235), best_te_1899(291), best_te_1899(233)>
  # cng_pt_24 = PHI <cng_pt_1668(229), cng_pt_573(234), cng_pt_1668(228), cng_pt_1668(235), cng_pt_1668(291), cng_pt_573(233)>
  # codec_ms_91 = PHI <codec_ms_1721(229), codec_ms_1721(234), codec_ms_1721(228), codec_ms_1721(235), codec_ms_90(291), codec_ms_1721(233)>
  # m_idx_103 = PHI <m_idx_793(229), m_idx_793(234), m_idx_793(228), m_idx_793(235), m_idx_102(291), m_idx_793(233)>
  # nm_idx_117 = PHI <nm_idx_1756(229), nm_idx_1756(234), nm_idx_1756(228), nm_idx_1756(235), nm_idx_902(291), nm_idx_1756(233)>
  # DEBUG nm_idx => nm_idx_117
  # DEBUG m_idx => m_idx_103
  # DEBUG codec_ms => codec_ms_91
  # DEBUG x => NULL
  # DEBUG cng_pt => cng_pt_24
  # DEBUG best_te => best_te_19
  # DEBUG match => match_7
  map_712 = map_1729->rm_next;
  # DEBUG map => map_712
  # DEBUG map => map_712
  # DEBUG nm_idx => nm_idx_117
  # DEBUG m_idx => m_idx_103
  # DEBUG codec_ms => codec_ms_91
  # DEBUG x => NULL
  # DEBUG cng_pt => cng_pt_24
  # DEBUG best_te => best_te_19
  # DEBUG match => match_7
  if (map_712 != 0B)
    goto <bb 294>;
  else
    goto <bb 295>;

<bb 294>:
  goto <bb 224>;

<bb 295>:
  # match_1892 = PHI <match_7(293)>
  # best_te_1685 = PHI <best_te_19(293)>
  # cng_pt_1682 = PHI <cng_pt_24(293)>
  # codec_ms_1803 = PHI <codec_ms_91(293)>
  # m_idx_1802 = PHI <m_idx_103(293)>
  # nm_idx_683 = PHI <nm_idx_117(293)>

<bb 296>:
  # match_9 = PHI <1(287), match_1892(295), 0(292), match_1801(222)>
  # codec_ms_93 = PHI <codec_ms_1734(287), codec_ms_1803(295), codec_ms_1710(292), codec_ms_477(222)>
  # m_idx_105 = PHI <m_idx_1799(287), m_idx_1802(295), m_idx_529(292), m_idx_1870(222)>
  # nm_idx_119 = PHI <nm_idx_1708(287), nm_idx_683(295), nm_idx_1793(292), nm_idx_1750(222)>
  # best_te_1625 = PHI <best_te_1730(287), best_te_1685(295), best_te_652(292), best_te_681(222)>
  # cng_pt_1627 = PHI <cng_pt_1706(287), cng_pt_1682(295), cng_pt_1732(292), cng_pt_1718(222)>
  # DEBUG nm_idx => nm_idx_119
  # DEBUG m_idx => m_idx_105
  # DEBUG codec_ms => codec_ms_93
  # DEBUG match => match_9
  D.45002_713 = smh_186->crypto_mode;
  D.45003_714 = D.45002_713 == 1;
  D.45004_715 = got_crypto_970 <= 0;
  D.45005_716 = D.45004_715 & D.45003_714;
  if (D.45005_716 != 0)
    goto <bb 297>;
  else
    goto <bb 298>;

<bb 297>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
  # DEBUG match => 0
  # DEBUG nm_idx => 0
  # DEBUG m_idx => 0
  # DEBUG nm_idx => 0
  # DEBUG m_idx => 0
  # DEBUG match => 0
  # DEBUG m_idx => 0
  # DEBUG match => 0
  goto <bb 334>;

<bb 298>:
  # DEBUG nm_idx => nm_idx_119
  # DEBUG m_idx => m_idx_105
  # DEBUG match => match_9
  D.45008_720 = m_idx_105 == 0;
  D.45009_721 = nm_idx_119 != 0;
  D.45010_722 = D.45009_721 & D.45008_720;
  if (D.45010_722 != 0)
    goto <bb 299>;
  else
    goto <bb 311>;

<bb 299>:

<bb 300>:
  # j_1846 = PHI <j_737(310), 0(299)>
  # DEBUG timp => 0B
  near_rate.96_725 = near_matches[j_1846].rate;
  near_rate_726 = (uint32_t) near_rate.96_725;
  # DEBUG near_rate => near_rate_726
  near_match_727 = near_matches[j_1846].imp;
  # DEBUG near_match => near_match_727
  near_map_728 = near_matches[j_1846].map;
  # DEBUG near_map => near_map_728
  D.45014_729 = near_match_727->iananame;
  if (near_rate_726 == 0)
    goto <bb 301>;
  else
    goto <bb 302>;

<bb 301>:
  near_rate_730 = near_match_727->samples_per_second;

<bb 302>:
  # near_rate_145 = PHI <near_rate_730(301), near_rate_726(300)>
  switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45014_729, near_rate_145, codec_ms_93);
  prefs[0] = &tmp;
  num_732 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);
  # DEBUG num => num_732
  if (num_732 != 0)
    goto <bb 303>;
  else
    goto <bb 304>;

<bb 303>:
  timp_733 = search[0];
  # DEBUG timp => timp_733

<bb 304>:
  # timp_134 = PHI <timp_733(303), near_match_727(302)>
  # DEBUG timp => timp_134
  if (maxptime_1041 == 0)
    goto <bb 305>;
  else
    goto <bb 306>;

<bb 305>:
  # timp_330 = PHI <timp_134(304)>
  # near_rate.96_1798 = PHI <near_rate.96_725(304)>
  # near_map_1731 = PHI <near_map_728(304)>
  # j_1767 = PHI <j_1846(304)>
  pretmp.1036_1897 = timp_330->microseconds_per_packet;
  pretmp.1038_847 = pretmp.1036_1897 / 1000;
  goto <bb 308>;

<bb 306>:
  D.45025_735 = timp_134->microseconds_per_packet;
  D.45026_736 = D.45025_735 / 1000;
  if (D.45026_736 <= maxptime_1041)
    goto <bb 307>;
  else
    goto <bb 309>;

<bb 307>:
  # timp_1800 = PHI <timp_134(306)>
  # near_rate.96_1797 = PHI <near_rate.96_725(306)>
  # near_map_1707 = PHI <near_map_728(306)>
  # D.45026_1795 = PHI <D.45026_736(306)>
  # j_1705 = PHI <j_1846(306)>

<bb 308>:
  # prephitmp.1039_858 = PHI <pretmp.1038_847(305), D.45026_1795(307)>
  # timp_1786 = PHI <timp_330(305), timp_1800(307)>
  # near_rate.96_617 = PHI <near_rate.96_1798(305), near_rate.96_1797(307)>
  # near_map_1788 = PHI <near_map_1731(305), near_map_1707(307)>
  # j_1787 = PHI <j_1767(305), j_1705(307)>
  D.45027_738 = timp_1786->iananame;
  D.45028_741 = timp_1786->actual_samples_per_second;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45027_738, prephitmp.1039_858, D.45028_741);
  # DEBUG match => 1
  D.45029_743 = near_matches[j_1787].codec_idx;
  matches[0].codec_idx = D.45029_743;
  matches[0].rate = near_rate.96_617;
  matches[0].imp = timp_1786;
  matches[0].map = near_map_1788;
  # DEBUG m_idx => 1
  # DEBUG m_idx => 1
  # DEBUG match => 1
  goto <bb 312>;

<bb 309>:
  j_737 = j_1846 + 1;
  # DEBUG j => j_737
  # DEBUG j => j_737
  if (nm_idx_119 > j_737)
    goto <bb 310>;
  else
    goto <bb 334>;

<bb 310>:
  goto <bb 300>;

<bb 311>:
  # DEBUG m_idx => m_idx_105
  # DEBUG match => match_9
  if (m_idx_105 != 0)
    goto <bb 312>;
  else
    goto <bb 334>;

<bb 312>:
  # m_idx_1716 = PHI <m_idx_105(311), 1(308)>
  if (greedy_47 != 0)
    goto <bb 313>;
  else
    goto <bb 314>;

<bb 313>:
  greedy_sort (smh_186, &matches, m_idx_1716, codec_array_84, total_codecs_85);

<bb 314>:
  # DEBUG match => 1
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;
  smh_186->num_negotiated_codecs = 0;
  # DEBUG j => 0
  # DEBUG j => 0
  if (m_idx_1716 > 0)
    goto <bb 315>;
  else
    goto <bb 474>;

<bb 315>:

<bb 316>:
  # j_1882 = PHI <j_808(333), 0(315)>
  D.45035_748 = matches[j_1882].map;
  D.45036_749 = D.45035_748->rm_encoding;
  D.45037_751 = D.45035_748->rm_fmtp;
  D.45038_753 = D.45035_748->rm_pt;
  D.45039_754 = (uint32_t) D.45038_753;
  D.45040_755 = matches[j_1882].imp;
  D.45041_756 = D.45040_755->samples_per_second;
  D.45042_758 = D.45040_755->microseconds_per_packet;
  D.45043_759 = D.45042_758 / 1000;
  D.45044_760 = (uint32_t) D.45043_759;
  pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);
  # DEBUG pmap => pmap_761
  mimp_762 = matches[j_1882].imp;
  # DEBUG mimp => mimp_762
  mmap_763 = matches[j_1882].map;
  # DEBUG mmap => mmap_763
  if (j_1882 == 0)
    goto <bb 317>;
  else
    goto <bb 319>;

<bb 317>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_761;
  pmap_761->current = 1;
  D.44605_765 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_765 != 0B)
    goto <bb 318>;
  else
    goto <bb 319>;

<bb 318>:
  D.45049_767 = pmap_761->pt;
  switch_rtp_set_default_payload (D.44605_765, D.45049_767);

<bb 319>:
  D.45050_768 = mmap_763->rm_encoding;
  D.45051_769 = switch_core_perform_session_strdup (session_161(D), D.45050_768, "src/switch_core_media.c", &__func__, 3535);
  pmap_761->rm_encoding = D.45051_769;
  D.45052_770 = mimp_762->iananame;
  D.45053_771 = switch_core_perform_session_strdup (session_161(D), D.45052_770, "src/switch_core_media.c", &__func__, 3536);
  pmap_761->iananame = D.45053_771;
  D.45054_772 = mmap_763->rm_pt;
  D.45055_773 = (unsigned char) D.45054_772;
  pmap_761->recv_pt = D.45055_773;
  D.45056_774 = mimp_762->samples_per_second;
  pmap_761->rm_rate = D.45056_774;
  pmap_761->adv_rm_rate = D.45056_774;
  D.45052_776 = mimp_762->iananame;
  D.45057_777 = strcasecmp (D.45052_776, "g722");
  if (D.45057_777 != 0)
    goto <bb 320>;
  else
    goto <bb 321>;

<bb 320>:
  D.45060_778 = mimp_762->actual_samples_per_second;
  pmap_761->rm_rate = D.45060_778;

<bb 321>:
  D.45061_779 = mimp_762->microseconds_per_packet;
  D.45062_780 = D.45061_779 / 1000;
  D.45063_781 = (uint32_t) D.45062_780;
  pmap_761->codec_ms = D.45063_781;
  D.45064_782 = mimp_762->bits_per_second;
  D.45065_783 = (uint32_t) D.45064_782;
  pmap_761->bitrate = D.45065_783;
  D.45067_784 = mmap_763->rm_params;
  if (D.45067_784 != 0B)
    goto <bb 322>;
  else
    goto <bb 323>;

<bb 322>:
  # DEBUG __nptr => D.45067_784
  D.47923_1486 = strtol (D.45067_784, 0B, 10);

<bb 323>:
  # D.47923_146 = PHI <D.47923_1486(322), 1(321)>
  pmap_761->channels = D.47923_146;
  D.45050_788 = mmap_763->rm_encoding;
  D.45071_789 = strcasecmp (D.45050_788, "opus");
  if (D.45071_789 == 0)
    goto <bb 324>;
  else
    goto <bb 331>;

<bb 324>:
  if (D.47923_146 == 1)
    goto <bb 325>;
  else
    goto <bb 326>;

<bb 325>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
  pmap_761->adv_channels = 1;
  goto <bb 327>;

<bb 326>:
  pmap_761->adv_channels = 2;

<bb 327>:
  D.45080_791 = mmap_763->rm_fmtp;
  # DEBUG s => D.45080_791
  if (D.45080_791 == 0B)
    goto <bb 330>;
  else
    goto <bb 328>;

<bb 328>:
  D.47927_1487 = *D.45080_791;
  if (D.47927_1487 == 0)
    goto <bb 330>;
  else
    goto <bb 472>;

<bb 329>:
  pmap_761->channels = 2;
  goto <bb 332>;

<bb 330>:
  pmap_761->channels = 1;
  goto <bb 332>;

<bb 331>:
  pmap_761->adv_channels = D.47923_146;

<bb 332>:
  D.45086_796 = connection_139->c_address;
  D.45087_797 = switch_core_perform_session_strdup (session_161(D), D.45086_796, "src/switch_core_media.c", &__func__, 3563);
  pmap_761->remote_sdp_ip = D.45087_797;
  D.44697_798 = m_1765->m_port;
  D.45088_799 = (short unsigned int) D.44697_798;
  pmap_761->remote_sdp_port = D.45088_799;
  D.45080_800 = mmap_763->rm_fmtp;
  D.45089_801 = switch_core_perform_session_strdup (session_161(D), D.45080_800, "src/switch_core_media.c", &__func__, 3565);
  pmap_761->rm_fmtp = D.45089_801;
  D.45054_802 = mmap_763->rm_pt;
  D.45055_803 = (unsigned char) D.45054_802;
  pmap_761->agreed_pt = D.45055_803;
  D.44655_804 = smh_186->num_negotiated_codecs;
  smh_186->negotiated_codecs[D.44655_804] = mimp_762;
  D.45090_805 = D.44655_804 + 1;
  smh_186->num_negotiated_codecs = D.45090_805;
  D.45054_806 = mmap_763->rm_pt;
  D.45055_807 = (unsigned char) D.45054_806;
  pmap_761->recv_pt = D.45055_807;
  j_808 = j_1882 + 1;
  # DEBUG j => j_808
  # DEBUG j => j_808
  if (j_808 < m_idx_1716)
    goto <bb 333>;
  else
    goto <bb 473>;

<bb 333>:
  goto <bb 316>;

<bb 334>:
  # match_12 = PHI <match_9(309), match_9(311), 0(297)>
  # m_idx_1905 = PHI <0(309), m_idx_105(311), 0(297)>
  # nm_idx_1745 = PHI <nm_idx_119(309), nm_idx_119(311), 0(297)>
  # DEBUG match => match_12
  if (match_12 != 0)
    goto <bb 335>;
  else
    goto <bb 342>;

<bb 335>:
  # match_1713 = PHI <match_12(334), 1(474)>
  # m_idx_1906 = PHI <m_idx_1905(334), m_idx_1716(474)>
  # nm_idx_842 = PHI <nm_idx_1745(334), nm_idx_119(474)>
  D.44750_809 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44762_810 = D.44750_809->remote_sdp_port;
  D.44767_811 = (int) D.44762_810;
  switch_snprintf (&tmp, 50, "%d", D.44767_811);
  D.44530_812 = session_161(D)->channel;
  D.44750_813 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_814 = D.44750_813->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_812, "remote_media_ip", D.44760_814, 1);
  D.44530_815 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_815, "remote_media_port", &tmp, 1);
  D.44750_816 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.45093_817 = D.44750_816->recv_pt;
  D.45094_818 = (int) D.45093_817;
  switch_snprintf (&tmp, 50, "%d", D.45094_818);
  D.44530_819 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_819, "rtp_audio_recv_pt", &tmp, 1);
  # DEBUG D#75 => &MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].read_codec
  # DEBUG codec => D#75
  D.47935_1489 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
  D.47934_1490 = D.47935_1489 & 256;
  if (D.47934_1490 != 0)
    goto <bb 336>;
  else
    goto <bb 340>;

<bb 336>:
  D.47933_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
  if (D.47933_1491 != 0B)
    goto <bb 337>;
  else
    goto <bb 340>;

<bb 337>:
  D.47932_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
  if (D.47932_1492 != 0B)
    goto <bb 338>;
  else
    goto <bb 340>;

<bb 338>:
  D.47931_1493 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
  if (D.47931_1493 != 0B)
    goto <bb 339>;
  else
    goto <bb 340>;

<bb 339>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;

<bb 340>:
  D.44471_822 = smh_186->mparams;
  D.45099_823 = D.44471_822->codec_flags;
  D.45100_824 = switch_core_media_set_codec (session_161(D), 0, D.45099_823);
  if (D.45100_824 == 0)
    goto <bb 341>;
  else
    goto <bb 342>;

<bb 341>:
  # DEBUG got_audio => 1
  check_ice (smh_186, 0, sdp_198, m_1765);

<bb 342>:
  # match_13 = PHI <0(334), match_1713(341), 0(340)>
  # got_audio_65 = PHI <0(334), 1(341), 0(340)>
  # m_idx_1746 = PHI <m_idx_1905(334), m_idx_1906(341), m_idx_1906(340)>
  # nm_idx_844 = PHI <nm_idx_1745(334), nm_idx_842(341), nm_idx_842(340)>
  # DEBUG got_audio => got_audio_65
  # DEBUG match => match_13
  if (best_te_1625 == 0)
    goto <bb 343>;
  else
    goto <bb 346>;

<bb 343>:
  D.45108_827 = switch_media_handle_test_media_flag (smh_186, 8);
  if (D.45108_827 != 0)
    goto <bb 345>;
  else
    goto <bb 344>;

<bb 344>:
  D.44530_828 = session_161(D)->channel;
  D.45110_829 = switch_channel_test_flag (D.44530_828, 93);
  if (D.45110_829 != 0)
    goto <bb 345>;
  else
    goto <bb 351>;

<bb 345>:
  D.44471_830 = smh_186->mparams;
  D.45111_831 = D.44471_830->te;
  D.45112_832 = (int) D.45111_831;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45112_832);
  D.44471_833 = smh_186->mparams;
  best_te_834 = D.44471_833->te;
  # DEBUG best_te => best_te_834
  # DEBUG best_te => best_te_834
  if (best_te_834 != 0)
    goto <bb 346>;
  else
    goto <bb 351>;

<bb 346>:
  # best_te_1861 = PHI <best_te_834(345), best_te_1625(342)>
  D.45115_835 = switch_channel_direction (channel_162);
  if (D.45115_835 == 1)
    goto <bb 347>;
  else
    goto <bb 349>;

<bb 347>:
  D.44471_836 = smh_186->mparams;
  D.44471_836->te = best_te_1861;
  # DEBUG D#11 => D.44471_836->te
  # DEBUG te => D#11
  D.44857_838 = (int) best_te_1861;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_838);
  D.44530_839 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_839, "dtmf_type", "rfc2833", 1);
  D.44471_840 = smh_186->mparams;
  D.44471_840->dtmf_type = 0;
  D.44605_841 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_841 != 0B)
    goto <bb 348>;
  else
    goto <bb 454>;

<bb 348>:
  switch_rtp_set_telephony_event (D.44605_841, best_te_1861);
  D.44530_843 = session_161(D)->channel;
  switch_channel_set_variable_printf (D.44530_843, "rtp_2833_send_payload", "%d", D.44857_838);
  goto <bb 454>;

<bb 349>:
  D.44471_846 = smh_186->mparams;
  D.44471_846->te = best_te_1861;
  D.44471_846->recv_te = best_te_1861;
  # DEBUG te => best_te_1861
  D.45121_849 = (int) best_te_1861;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45121_849);
  D.44530_850 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_850, "dtmf_type", "rfc2833", 1);
  D.44471_851 = smh_186->mparams;
  D.44471_851->dtmf_type = 0;
  D.44605_852 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_852 != 0B)
    goto <bb 350>;
  else
    goto <bb 454>;

<bb 350>:
  switch_rtp_set_telephony_event (D.44605_852, best_te_1861);
  D.44530_854 = session_161(D)->channel;
  switch_channel_set_variable_printf (D.44530_854, "rtp_2833_send_payload", "%d", D.45121_849);
  D.44605_856 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  switch_rtp_set_telephony_recv_event (D.44605_856, best_te_1861);
  D.44530_857 = session_161(D)->channel;
  switch_channel_set_variable_printf (D.44530_857, "rtp_2833_recv_payload", "%d", D.45121_849);
  goto <bb 454>;

<bb 351>:
  D.45125_859 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
  # DEBUG expr => D.45125_859
  if (D.45125_859 != 0B)
    goto <bb 352>;
  else
    goto <bb 475>;

<bb 352>:
  D.49736_1601 = strcasecmp (D.45125_859, "no");
  if (D.49736_1601 == 0)
    goto <bb 361>;
  else
    goto <bb 353>;

<bb 353>:
  D.49737_1602 = strcasecmp (D.45125_859, "off");
  if (D.49737_1602 == 0)
    goto <bb 361>;
  else
    goto <bb 354>;

<bb 354>:
  D.49738_1603 = strcasecmp (D.45125_859, "false");
  if (D.49738_1603 == 0)
    goto <bb 361>;
  else
    goto <bb 355>;

<bb 355>:
  D.49739_1604 = strcasecmp (D.45125_859, "f");
  if (D.49739_1604 == 0)
    goto <bb 361>;
  else
    goto <bb 356>;

<bb 356>:
  D.49740_1605 = strcasecmp (D.45125_859, "disabled");
  if (D.49740_1605 == 0)
    goto <bb 361>;
  else
    goto <bb 357>;

<bb 357>:
  D.49741_1606 = strcasecmp (D.45125_859, "inactive");
  if (D.49741_1606 == 0)
    goto <bb 361>;
  else
    goto <bb 358>;

<bb 358>:
  D.49742_1607 = strcasecmp (D.45125_859, "disallow");
  if (D.49742_1607 == 0)
    goto <bb 361>;
  else
    goto <bb 359>;

<bb 359>:
  D.49743_1608 = switch_is_number (D.45125_859);
  if (D.49743_1608 != 0)
    goto <bb 360>;
  else
    goto <bb 475>;

<bb 360>:
  # DEBUG __nptr => D.45125_859
  D.49744_1609 = strtol (D.45125_859, 0B, 10);
  if (D.49744_1609 == 0)
    goto <bb 361>;
  else
    goto <bb 475>;

<bb 361>:
  D.44530_867 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_867, "dtmf_type", "none", 1);
  D.44471_868 = smh_186->mparams;
  D.44471_868->dtmf_type = 2;
  D.44471_868->te = 0;
  D.44471_868->recv_te = 0;
  # DEBUG D#13 => D.44471_868->recv_te
  # DEBUG te => D#13
  goto <bb 454>;

<bb 362>:
  if (prephitmp.1028_1815 == 3)
    goto <bb 363>;
  else
    goto <bb 454>;

<bb 363>:
  D.44697_874 = m_1765->m_port;
  if (D.44697_874 != 0)
    goto <bb 364>;
  else
    goto <bb 454>;

<bb 364>:
  # DEBUG mimp => 0B
  # DEBUG vmatch => 0
  # DEBUG nm_idx => 0
  # DEBUG m_idx => 0
  memset (&matches, 0, 480);
  memset (&near_matches, 0, 480);
  D.44530_879 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_879, "video_possible", "true", 1);
  connection_880 = sdp_198->sdp_connection;
  # DEBUG connection => connection_880
  connection_881 = m_1765->m_connections;
  if (connection_881 != 0B)
    goto <bb 367>;
  else
    goto <bb 365>;

<bb 365>:
  # DEBUG connection => connection_880
  if (connection_880 == 0B)
    goto <bb 366>;
  else
    goto <bb 367>;

<bb 366>:
  # cng_pt_1677 = PHI <cng_pt_1718(365)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  # DEBUG match => 0
  goto <bb 457> (done);

<bb 367>:
  # connection_110 = PHI <connection_880(365), connection_881(364)>
  map_884 = m_1765->m_rtpmaps;
  # DEBUG map => map_884
  # DEBUG map => map_884
  # DEBUG m_idx => 0
  # DEBUG got_video_crypto => got_video_crypto_1675
  if (map_884 != 0B)
    goto <bb 368>;
  else
    goto <bb 434>;

<bb 368>:

<bb 369>:
  # got_video_crypto_556 = PHI <got_video_crypto_961(432), got_video_crypto_1675(368)>
  # m_idx_820 = PHI <m_idx_954(432), 0(368)>
  # map_1621 = PHI <map_1022(432), map_884(368)>
  D.45138_885 = switch_rtp_has_dtls ();
  if (D.45138_885 != 0)
    goto <bb 370>;
  else
    goto <bb 379>;

<bb 370>:
  D.45141_886 = dtls_ok (session_161(D));
  if (D.45141_886 != 0)
    goto <bb 371>;
  else
    goto <bb 379>;

<bb 371>:
  attr_887 = m_1765->m_attributes;
  # DEBUG attr => attr_887
  # DEBUG got_video_crypto => got_video_crypto_556
  # DEBUG attr => attr_887
  if (attr_887 != 0B)
    goto <bb 372>;
  else
    goto <bb 413>;

<bb 372>:

<bb 373>:
  # attr_1851 = PHI <attr_893(378), attr_887(372)>
  # got_video_crypto_1739 = PHI <got_video_crypto_57(378), got_video_crypto_556(372)>
  D.44590_888 = attr_1851->a_name;
  D.45144_889 = strcasecmp (D.44590_888, "fingerprint");
  if (D.45144_889 == 0)
    goto <bb 374>;
  else
    goto <bb 377>;

<bb 374>:
  D.44619_890 = attr_1851->a_value;
  # DEBUG s => D.44619_890
  if (D.44619_890 == 0B)
    goto <bb 377>;
  else
    goto <bb 375>;

<bb 375>:
  D.47940_1496 = *D.44619_890;
  if (D.47940_1496 == 0)
    goto <bb 376>;
  else
    goto <bb 377>;

<bb 376>:

<bb 377>:
  # got_video_crypto_57 = PHI <got_video_crypto_1739(373), got_video_crypto_1739(376), 1(375), got_video_crypto_1739(374)>
  # DEBUG got_video_crypto => got_video_crypto_57
  attr_893 = attr_1851->a_next;
  # DEBUG attr => attr_893
  # DEBUG got_video_crypto => got_video_crypto_57
  # DEBUG attr => attr_893
  if (attr_893 != 0B)
    goto <bb 378>;
  else
    goto <bb 483>;

<bb 378>:
  goto <bb 373>;

<bb 379>:
  # DEBUG got_video_crypto => got_video_crypto_556
  attr_894 = m_1765->m_attributes;
  # DEBUG attr => attr_894
  # DEBUG got_video_crypto => got_video_crypto_556
  # DEBUG attr => attr_894
  if (attr_894 != 0B)
    goto <bb 484>;
  else
    goto <bb 413>;

<bb 380>:
  # attr_620 = PHI <attr_1163(484), attr_979(411)>
  # got_video_crypto_1886 = PHI <got_video_crypto_744(484), got_video_crypto_60(411)>
  D.44590_895 = attr_620->a_name;
  D.45152_896 = strcasecmp (D.44590_895, "framerate");
  if (D.45152_896 == 0)
    goto <bb 381>;
  else
    goto <bb 382>;

<bb 381>:
  D.44619_897 = attr_620->a_value;
  if (D.44619_897 != 0B)
    goto <bb 410>;
  else
    goto <bb 382>;

<bb 382>:
  D.45155_899 = strcasecmp (D.44590_895, "rtcp-fb");
  if (D.45155_899 == 0)
    goto <bb 383>;
  else
    goto <bb 387>;

<bb 383>:
  D.44619_900 = attr_620->a_value;
  # DEBUG s => D.44619_900
  if (D.44619_900 == 0B)
    goto <bb 410>;
  else
    goto <bb 384>;

<bb 384>:
  D.47944_1498 = *D.44619_900;
  if (D.47944_1498 == 0)
    goto <bb 410>;
  else
    goto <bb 476>;

<bb 385>:
Invalid sum of incoming frequencies 992, should be 677
  D.45164_904 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
  D.45165_905 = D.45164_904 + 1;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45165_905;

<bb 386>:
  D.44471_906 = smh_186->mparams;
  D.44471_906->rtcp_video_interval_msec = "10000";
  goto <bb 410>;

<bb 387>:
  D.45169_908 = strcasecmp (D.44590_895, "rtcp");
  if (D.45169_908 == 0)
    goto <bb 388>;
  else
    goto <bb 393>;

<bb 388>:
  D.44619_909 = attr_620->a_value;
  if (D.44619_909 != 0B)
    goto <bb 389>;
  else
    goto <bb 393>;

<bb 389>:
  # DEBUG __s2_len => 1
  # DEBUG __s1 => D.44619_909
  D.45175_912 = MEM[(const unsigned char *)D.44619_909];
  # DEBUG D#78 => (int) D.45175_912
  # DEBUG __result => D#78 + -49
  if (D.45175_912 == 49)
    goto <bb 390>;
  else
    goto <bb 393>;

<bb 390>:
  D.45186_922 = MEM[(const unsigned char *)D.44619_909 + 1B];
  # DEBUG D#79 => (int) D.45186_922
  # DEBUG __result => D#79
  # DEBUG __result => D#79
  if (D.45186_922 == 0)
    goto <bb 391>;
  else
    goto <bb 393>;

<bb 391>:
  D.44530_953 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_953, "rtp_remote_video_rtcp_port", D.44619_909, 1);
  D.44619_955 = attr_620->a_value;
  # DEBUG __nptr => D.44619_955
  D.47947_1500 = strtol (D.44619_955, 0B, 10);
  D.45214_957 = (short unsigned int) D.47947_1500;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45214_957;
  D.44471_958 = smh_186->mparams;
  D.45215_959 = D.44471_958->rtcp_video_interval_msec;
  if (D.45215_959 == 0B)
    goto <bb 392>;
  else
    goto <bb 410>;

<bb 392>:
  D.44471_958->rtcp_video_interval_msec = "5000";
  goto <bb 410>;

<bb 393>:
  if (got_video_crypto_1886 == 0)
    goto <bb 394>;
  else
    goto <bb 410>;

<bb 394>:
  D.45220_962 = strcasecmp (D.44590_895, "crypto");
  if (D.45220_962 == 0)
    goto <bb 395>;
  else
    goto <bb 410>;

<bb 395>:
  D.44619_963 = attr_620->a_value;
  # DEBUG s => D.44619_963
  if (D.44619_963 == 0B)
    goto <bb 410>;
  else
    goto <bb 396>;

<bb 396>:
  D.47951_1501 = *D.44619_963;
  if (D.47951_1501 == 0)
    goto <bb 410>;
  else
    goto <bb 477>;

<bb 397>:
  D.44530_968 = session_161(D)->channel;
  D.45228_969 = switch_channel_get_variable_dup (D.44530_968, "rtp_allow_crypto_in_avp", 1, -1);
  # DEBUG expr => D.45228_969
  if (D.45228_969 != 0B)
    goto <bb 398>;
  else
    goto <bb 478>;

<bb 398>:
  D.49748_1611 = strcasecmp (D.45228_969, "yes");
  if (D.49748_1611 == 0)
    goto <bb 407>;
  else
    goto <bb 399>;

<bb 399>:
  D.49749_1612 = strcasecmp (D.45228_969, "on");
  if (D.49749_1612 == 0)
    goto <bb 407>;
  else
    goto <bb 400>;

<bb 400>:
  D.49750_1613 = strcasecmp (D.45228_969, "true");
  if (D.49750_1613 == 0)
    goto <bb 407>;
  else
    goto <bb 401>;

<bb 401>:
  D.49751_1614 = strcasecmp (D.45228_969, "t");
  if (D.49751_1614 == 0)
    goto <bb 407>;
  else
    goto <bb 402>;

<bb 402>:
  D.49752_1615 = strcasecmp (D.45228_969, "enabled");
  if (D.49752_1615 == 0)
    goto <bb 407>;
  else
    goto <bb 403>;

<bb 403>:
  D.49753_1616 = strcasecmp (D.45228_969, "active");
  if (D.49753_1616 == 0)
    goto <bb 407>;
  else
    goto <bb 404>;

<bb 404>:
  D.49754_1617 = strcasecmp (D.45228_969, "allow");
  if (D.49754_1617 == 0)
    goto <bb 407>;
  else
    goto <bb 405>;

<bb 405>:
  D.49755_1618 = switch_is_number (D.45228_969);
  if (D.49755_1618 != 0)
    goto <bb 406>;
  else
    goto <bb 478>;

<bb 406>:
  # DEBUG __nptr => D.45228_969
  D.49756_1619 = strtol (D.45228_969, 0B, 10);
  if (D.49756_1619 != 0)
    goto <bb 407>;
  else
    goto <bb 478>;

<bb 407>:
Invalid sum of outgoing probabilities 0.0%
  pretmp.1030_1890 = attr_620->a_value;
  goto <bb 409>;

<bb 408>:
  # cng_pt_1791 = PHI <cng_pt_1718(478)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  # DEBUG match => 0
  goto <bb 457> (done);

<bb 409>:
Invalid sum of incoming frequencies 153, should be 298
  # prephitmp.1031_1813 = PHI <D.44619_963(477), pretmp.1030_1890(407), pretmp.1030_1891(479)>
  # DEBUG crypto => prephitmp.1031_1813
  # DEBUG __nptr => prephitmp.1031_1813
  crypto_tag_1503 = strtol (prephitmp.1031_1813, 0B, 10);
  # DEBUG crypto_tag => NULL
  got_video_crypto_978 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, prephitmp.1031_1813, crypto_tag_1503, sdp_type_546(D));
  # DEBUG got_video_crypto => got_video_crypto_978

<bb 410>:
Invalid sum of incoming frequencies 9222, should be 9547
  # got_video_crypto_60 = PHI <got_video_crypto_1886(381), got_video_crypto_1886(386), got_video_crypto_1886(392), got_video_crypto_1886(393), 0(394), 0(396), got_video_crypto_978(409), got_video_crypto_1886(384), got_video_crypto_1886(391), got_video_crypto_1886(383), 0(395)>
  # DEBUG got_video_crypto => got_video_crypto_60
  attr_979 = attr_620->a_next;
  # DEBUG attr => attr_979
  # DEBUG got_video_crypto => got_video_crypto_60
  # DEBUG attr => attr_979
  if (attr_979 != 0B)
    goto <bb 411>;
  else
    goto <bb 412>;

<bb 411>:
  goto <bb 380>;

<bb 412>:
  # got_video_crypto_1804 = PHI <got_video_crypto_60(410)>

<bb 413>:
  # got_video_crypto_961 = PHI <got_video_crypto_1804(412), got_video_crypto_556(379), got_video_crypto_556(371)>
  rm_encoding_980 = map_1621->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_980
  if (rm_encoding_980 == 0B)
    goto <bb 414>;
  else
    goto <bb 415>;

<bb 414>:

<bb 415>:
  # rm_encoding_137 = PHI <rm_encoding_980(413), ""(414)>
  # DEBUG rm_encoding => rm_encoding_137
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG m_idx => m_idx_820
  if (total_codecs_85 > 0)
    goto <bb 416>;
  else
    goto <bb 431>;

<bb 416>:

<bb 417>:
  # m_idx_911 = PHI <m_idx_109(429), m_idx_820(416)>
  # i_865 = PHI <i_1021(429), 0(416)>
  i.99_983 = (unsigned int) i_865;
  D.45237_984 = i.99_983 * 4;
  D.45238_985 = codec_array_84 + D.45237_984;
  imp_986 = *D.45238_985;
  # DEBUG imp => imp_986
  D.45239_987 = imp_986->codec_type;
  if (D.45239_987 != 1)
    goto <bb 428>;
  else
    goto <bb 418>;

<bb 418>:
  D.44530_988 = session_161(D)->channel;
  D.45242_989 = switch_channel_direction (D.44530_988);
  if (D.45242_989 == 0)
    goto <bb 419>;
  else
    goto <bb 420>;

<bb 419>:
  D.44530_990 = session_161(D)->channel;
  D.45245_991 = switch_channel_test_flag (D.44530_990, 114);
  if (D.45245_991 != 0)
    goto <bb 428>;
  else
    goto <bb 420>;

<bb 420>:
  D.45248_992 = map_1621->rm_pt;
  D.45249_993 = (int) D.45248_992;
  D.45250_994 = imp_986->iananame;
  D.45251_995 = imp_986->ianacode;
  D.45252_996 = (int) D.45251_995;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45249_993, D.45250_994, D.45252_996);
  D.45256_997 = map_1621->rm_encoding;
  # DEBUG s => D.45256_997
  if (D.45256_997 == 0B)
    goto <bb 422>;
  else
    goto <bb 421>;

<bb 421>:
  D.47958_1504 = *D.45256_997;
  if (D.47958_1504 == 0)
    goto <bb 422>;
  else
    goto <bb 480>;

<bb 422>:
  D.45248_1004 = map_1621->rm_pt;
  D.45249_1005 = (int) D.45248_1004;
  if (D.45249_1005 <= 95)
    goto <bb 423>;
  else
    goto <bb 424>;

<bb 423>:
  D.45251_1008 = imp_986->ianacode;
  D.45252_1009 = (int) D.45251_1008;
  vmatch_1010 = D.45249_1005 == D.45252_1009;
  # DEBUG vmatch => vmatch_1010
  goto <bb 425>;

<bb 424>:
  D.45250_1011 = imp_986->iananame;
  D.45260_1012 = strcasecmp (rm_encoding_137, D.45250_1011);
  vmatch_1013 = D.45260_1012 == 0;
  # DEBUG vmatch => vmatch_1013

<bb 425>:
  # vmatch_138 = PHI <vmatch_1010(423), vmatch_1013(424)>
  # DEBUG vmatch => vmatch_138
  if (vmatch_138 != 0)
    goto <bb 426>;
  else
    goto <bb 428>;

<bb 426>:
  D.45263_1014 = map_1621->rm_rate;
  D.45264_1015 = imp_986->samples_per_second;
  if (D.45263_1014 == D.45264_1015)
    goto <bb 427>;
  else
    goto <bb 428>;

<bb 427>:
  matches[m_idx_911].imp = imp_986;
  matches[m_idx_911].map = map_1621;
  D.45250_1016 = imp_986->iananame;
  D.45251_1017 = imp_986->ianacode;
  D.45252_1018 = (int) D.45251_1017;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45250_1016, D.45252_1018);
  m_idx_1019 = m_idx_911 + 1;
  # DEBUG m_idx => m_idx_1019

<bb 428>:
  # m_idx_109 = PHI <m_idx_911(417), m_idx_911(419), m_idx_911(426), m_idx_911(425), m_idx_1019(427)>
  # DEBUG m_idx => m_idx_109
  i_1021 = i_865 + 1;
  # DEBUG i => i_1021
  # DEBUG i => i_1021
  # DEBUG m_idx => m_idx_109
  if (total_codecs_85 > i_1021)
    goto <bb 429>;
  else
    goto <bb 430>;

<bb 429>:
  goto <bb 417>;

<bb 430>:
  # m_idx_538 = PHI <m_idx_109(428)>

<bb 431>:
  # m_idx_954 = PHI <m_idx_538(430), m_idx_820(415)>
  map_1022 = map_1621->rm_next;
  # DEBUG map => map_1022
  # DEBUG map => map_1022
  # DEBUG m_idx => m_idx_954
  # DEBUG got_video_crypto => got_video_crypto_961
  if (map_1022 != 0B)
    goto <bb 432>;
  else
    goto <bb 433>;

<bb 432>:
  goto <bb 369>;

<bb 433>:
  # m_idx_1796 = PHI <m_idx_954(431)>
  # got_video_crypto_1789 = PHI <got_video_crypto_961(431)>

<bb 434>:
  # got_video_crypto_960 = PHI <got_video_crypto_1789(433), got_video_crypto_1675(367)>
  # m_idx_907 = PHI <m_idx_1796(433), 0(367)>
  D.45002_1023 = smh_186->crypto_mode;
  D.45003_1024 = D.45002_1023 == 1;
  D.45267_1025 = got_video_crypto_960 <= 0;
  D.45268_1026 = D.45267_1025 & D.45003_1024;
  if (D.45268_1026 != 0)
    goto <bb 435>;
  else
    goto <bb 436>;

<bb 435>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
  # DEBUG vmatch => 0
  # DEBUG m_idx => 0
  # DEBUG m_idx => 0
  goto <bb 454>;

<bb 436>:
  # DEBUG m_idx => m_idx_907
  if (m_idx_907 != 0)
    goto <bb 437>;
  else
    goto <bb 454>;

<bb 437>:
  # DEBUG j => 0
  if (greedy_47 != 0)
    goto <bb 438>;
  else
    goto <bb 439>;

<bb 438>:
  greedy_sort (smh_186, &matches, m_idx_907, codec_array_84, total_codecs_85);

<bb 439>:
  # DEBUG vmatch => 1
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;
  # DEBUG j => 0
  # DEBUG j => 0

<bb 440>:
  # j_1845 = PHI <j_1068(444), 0(439)>
  D.45275_1032 = matches[j_1845].map;
  D.45276_1033 = D.45275_1032->rm_encoding;
  D.45277_1035 = D.45275_1032->rm_fmtp;
  D.45278_1037 = D.45275_1032->rm_pt;
  D.45279_1038 = (uint32_t) D.45278_1037;
  D.45280_1039 = matches[j_1845].imp;
  D.45281_1040 = D.45280_1039->samples_per_second;
  D.45282_1042 = D.45280_1039->microseconds_per_packet;
  D.45283_1043 = D.45282_1042 / 1000;
  D.45284_1044 = (uint32_t) D.45283_1043;
  pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);
  # DEBUG pmap => pmap_1045
  if (j_1845 == 0)
    goto <bb 441>;
  else
    goto <bb 443>;

<bb 441>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1045;
  pmap_1045->current = 1;
  D.45288_1047 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
  if (D.45288_1047 != 0B)
    goto <bb 442>;
  else
    goto <bb 443>;

<bb 442>:
  D.45291_1049 = pmap_1045->pt;
  switch_rtp_set_default_payload (D.45288_1047, D.45291_1049);

<bb 443>:
  mimp_1050 = matches[j_1845].imp;
  # DEBUG mimp => mimp_1050
  map_1051 = matches[j_1845].map;
  # DEBUG map => map_1051
  D.45256_1052 = map_1051->rm_encoding;
  D.45292_1053 = switch_core_perform_session_strdup (session_161(D), D.45256_1052, "src/switch_core_media.c", &__func__, 3804);
  pmap_1045->rm_encoding = D.45292_1053;
  D.45248_1054 = map_1051->rm_pt;
  D.45293_1055 = (unsigned char) D.45248_1054;
  pmap_1045->recv_pt = D.45293_1055;
  D.45263_1056 = map_1051->rm_rate;
  pmap_1045->rm_rate = D.45263_1056;
  D.45294_1057 = mimp_1050->microseconds_per_packet;
  D.45295_1058 = D.45294_1057 / 1000;
  D.45296_1059 = (uint32_t) D.45295_1058;
  pmap_1045->codec_ms = D.45296_1059;
  D.45086_1060 = connection_110->c_address;
  D.45297_1061 = switch_core_perform_session_strdup (session_161(D), D.45086_1060, "src/switch_core_media.c", &__func__, 3810);
  pmap_1045->remote_sdp_ip = D.45297_1061;
  D.44697_1062 = m_1765->m_port;
  D.45088_1063 = (short unsigned int) D.44697_1062;
  pmap_1045->remote_sdp_port = D.45088_1063;
  D.45298_1064 = map_1051->rm_fmtp;
  D.45299_1065 = switch_core_perform_session_strdup (session_161(D), D.45298_1064, "src/switch_core_media.c", &__func__, 3813);
  pmap_1045->rm_fmtp = D.45299_1065;
  D.45248_1066 = map_1051->rm_pt;
  D.45293_1067 = (unsigned char) D.45248_1066;
  pmap_1045->agreed_pt = D.45293_1067;
  j_1068 = j_1845 + 1;
  # DEBUG j => j_1068
  # DEBUG j => j_1068
  if (m_idx_907 > j_1068)
    goto <bb 444>;
  else
    goto <bb 445>;

<bb 444>:
  goto <bb 440>;

<bb 445>:
  D.45287_1069 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45300_1070 = D.45287_1069->remote_sdp_port;
  D.45301_1071 = (int) D.45300_1070;
  switch_snprintf (&tmp, 50, "%d", D.45301_1071);
  D.44530_1072 = session_161(D)->channel;
  D.45287_1073 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45302_1074 = D.45287_1073->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_1072, "remote_video_ip", D.45302_1074, 1);
  D.44530_1075 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1075, "remote_video_port", &tmp, 1);
  D.44530_1076 = session_161(D)->channel;
  D.45287_1077 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45303_1078 = D.45287_1077->rm_fmtp;
  switch_channel_set_variable_var_check (D.44530_1076, "rtp_video_fmtp", D.45303_1078, 1);
  D.45287_1079 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45304_1080 = D.45287_1079->agreed_pt;
  D.45305_1081 = (int) D.45304_1080;
  switch_snprintf (&tmp, 50, "%d", D.45305_1081);
  D.44530_1082 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1082, "rtp_video_pt", &tmp, 1);
  switch_core_media_check_video_codecs (session_161(D));
  D.45287_1083 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45306_1084 = D.45287_1083->recv_pt;
  D.45307_1085 = (int) D.45306_1084;
  switch_snprintf (&tmp, 50, "%d", D.45307_1085);
  D.44530_1086 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1086, "rtp_video_recv_pt", &tmp, 1);
  if (match_1801 == 0)
    goto <bb 446>;
  else
    goto <bb 447>;

<bb 446>:

<bb 447>:
  # match_14 = PHI <match_1801(445), 1(446)>
  # DEBUG match => match_14
  # DEBUG D#74 => &MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].read_codec
  # DEBUG codec => D#74
  D.47966_1506 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
  D.47965_1507 = D.47966_1506 & 256;
  if (D.47965_1507 != 0)
    goto <bb 448>;
  else
    goto <bb 452>;

<bb 448>:
  D.47964_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
  if (D.47964_1508 != 0B)
    goto <bb 449>;
  else
    goto <bb 452>;

<bb 449>:
  D.47963_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
  if (D.47963_1509 != 0B)
    goto <bb 450>;
  else
    goto <bb 452>;

<bb 450>:
  D.47962_1510 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
  if (D.47962_1510 != 0B)
    goto <bb 451>;
  else
    goto <bb 452>;

<bb 451>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;

<bb 452>:
  D.45317_1093 = switch_core_media_set_video_codec (session_161(D), 0);
  if (D.45317_1093 == 0)
    goto <bb 453>;
  else
    goto <bb 454>;

<bb 453>:
  check_ice (smh_186, 1, sdp_198, m_1765);

<bb 454>:
  # match_15 = PHI <match_13(475), match_1801(362), match_1801(363), match_1801(435), match_14(452), match_14(453), match_13(349), match_13(350), match_13(347), match_13(348), match_13(361), match_1801(174), match_1801(436)>
  # best_te_22 = PHI <0(475), best_te_681(362), best_te_681(363), best_te_681(435), best_te_681(452), best_te_681(453), best_te_1861(349), best_te_1861(350), best_te_1861(347), best_te_1861(348), 0(361), best_te_681(174), best_te_681(436)>
  # cng_pt_26 = PHI <cng_pt_1627(475), cng_pt_1718(362), cng_pt_1718(363), cng_pt_1718(435), cng_pt_1718(452), cng_pt_1718(453), cng_pt_1627(349), cng_pt_1627(350), cng_pt_1627(347), cng_pt_1627(348), cng_pt_1627(361), cng_pt_1718(174), cng_pt_1718(436)>
  # got_crypto_55 = PHI <got_crypto_970(475), got_crypto_1867(362), got_crypto_1867(363), got_crypto_1867(435), got_crypto_1867(452), got_crypto_1867(453), got_crypto_970(349), got_crypto_970(350), got_crypto_970(347), got_crypto_970(348), got_crypto_970(361), got_crypto_1867(174), got_crypto_1867(436)>
  # got_video_crypto_63 = PHI <got_video_crypto_1675(475), got_video_crypto_1675(362), got_video_crypto_1675(363), got_video_crypto_960(435), got_video_crypto_960(452), got_video_crypto_960(453), got_video_crypto_1675(349), got_video_crypto_1675(350), got_video_crypto_1675(347), got_video_crypto_1675(348), got_video_crypto_1675(361), got_video_crypto_1675(174), got_video_crypto_960(436)>
  # got_audio_66 = PHI <got_audio_65(475), got_audio_1694(362), got_audio_1694(363), got_audio_1694(435), got_audio_1694(452), got_audio_1694(453), got_audio_65(349), got_audio_65(350), got_audio_65(347), got_audio_65(348), got_audio_65(361), got_audio_1694(174), got_audio_1694(436)>
  # codec_ms_94 = PHI <codec_ms_93(475), codec_ms_477(362), codec_ms_477(363), codec_ms_477(435), codec_ms_477(452), codec_ms_477(453), codec_ms_93(349), codec_ms_93(350), codec_ms_93(347), codec_ms_93(348), codec_ms_93(361), codec_ms_477(174), codec_ms_477(436)>
  # m_idx_113 = PHI <m_idx_1746(475), m_idx_1870(362), m_idx_1870(363), 0(435), m_idx_907(452), m_idx_907(453), m_idx_1746(349), m_idx_1746(350), m_idx_1746(347), m_idx_1746(348), m_idx_1746(361), m_idx_1870(174), 0(436)>
  # nm_idx_121 = PHI <nm_idx_844(475), nm_idx_1750(362), nm_idx_1750(363), 0(435), 0(452), 0(453), nm_idx_844(349), nm_idx_844(350), nm_idx_844(347), nm_idx_844(348), nm_idx_844(361), nm_idx_1750(174), 0(436)>
  # DEBUG nm_idx => nm_idx_121
  # DEBUG m_idx => m_idx_113
  # DEBUG codec_ms => codec_ms_94
  # DEBUG got_audio => got_audio_66
  # DEBUG got_video_crypto => got_video_crypto_63
  # DEBUG got_crypto => got_crypto_55
  # DEBUG cng_pt => cng_pt_26
  # DEBUG best_te => best_te_22
  # DEBUG match => match_15
  m_1094 = m_1765->m_next;
  # DEBUG m => m_1094
  # DEBUG nm_idx => nm_idx_121
  # DEBUG m_idx => m_idx_113
  # DEBUG codec_ms => codec_ms_94
  # DEBUG got_webrtc => got_webrtc_78
  # DEBUG got_udptl => got_udptl_1744
  # DEBUG got_savp => got_savp_1740
  # DEBUG got_video_savp => NULL
  # DEBUG got_video_avp => NULL
  # DEBUG got_avp => got_avp_1860
  # DEBUG got_audio => got_audio_66
  # DEBUG got_video_crypto => got_video_crypto_63
  # DEBUG got_crypto => got_crypto_55
  # DEBUG m => m_1094
  # DEBUG cng_pt => cng_pt_26
  # DEBUG best_te => best_te_22
  # DEBUG match => match_15
  if (m_1094 != 0B)
    goto <bb 455>;
  else
    goto <bb 456>;

<bb 455>:
  goto <bb 126>;

<bb 456>:
  # match_1686 = PHI <match_15(454)>
  # cng_pt_1646 = PHI <cng_pt_26(454)>

  # match_17 = PHI <1(143), 0(145), 0(162), 1(160), 0(211), 0(218), 0(221), 0(366), 0(408), match_1686(456), 1(159), 1(172), 1(464), 0(124)>
  # cng_pt_1048 = PHI <cng_pt_1792(143), cng_pt_1792(145), cng_pt_1792(162), cng_pt_1792(160), cng_pt_1709(211), cng_pt_1733(218), cng_pt_1676(221), cng_pt_1677(366), cng_pt_1791(408), cng_pt_1646(456), cng_pt_1792(159), cng_pt_1792(172), cng_pt_1792(464), 0(124)>
done:
  # DEBUG match => match_17
  sdp_parser_free (parser_196);
  D.44471_1095 = smh_186->mparams;
  D.44471_1095->cng_pt = cng_pt_1048;

<bb 458>:
  # match_142 = PHI <0(4), 0(5), 0(7), match_17(457)>
  return match_142;

<bb 459>:
  goto <bb 20>;

<bb 460>:
  goto <bb 57>;

<bb 461>:
  D.44594_307 = strcasecmp (D.44590_304, "sendonly");
  if (D.44594_307 == 0)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 462>:
  goto <bb 97>;

<bb 463>:
  # DEBUG reneg => 1
  goto <bb 102>;

<bb 464>:
  # DEBUG pass => 0
  goto <bb 457> (done);

<bb 465>:
  D.44471_533 = smh_186->mparams;
  D.44821_534 = D.44471_533->ndlb;
  D.44822_535 = D.44821_534 & 4;
  if (D.44822_535 == 0)
    goto <bb 200>;
  else
    goto <bb 212>;

<bb 466>:
  D.44666_539 = m_1765->m_proto;
  D.44829_540 = D.44666_539 != 257;
  D.44830_541 = got_webrtc_78 == 0;
  D.44831_542 = D.44830_541 & D.44829_540;
  if (D.44831_542 != 0)
    goto <bb 211>;
  else
    goto <bb 467>;

<bb 467>:
  pretmp.1034_1896 = attr_1600->a_value;
  goto <bb 212>;

<bb 468>:

<bb 469>:
  # codec_ms_1884 = PHI <maxptime_1041(468), ptime_1034(237)>
  # DEBUG codec_ms => codec_ms_1884
  goto <bb 240>;

<bb 470>:
  D.44889_609 = map_1729->rm_encoding;
  D.44854_611 = map_1729->rm_rate;
  D.44906_612 = switch_core_codec_parse_fmtp (D.44889_609, D.44893_598, D.44854_611, &codec_fmtp);
  if (D.44906_612 == 0)
    goto <bb 250>;
  else
    goto <bb 256>;

<bb 471>:
  D.44471_645 = smh_186->mparams;
  D.44821_646 = D.44471_645->ndlb;
  D.44937_647 = (int) D.44821_646;
  D.44938_648 = D.44937_647 & 1;
  if (D.44938_648 != 0)
    goto <bb 261>;
  else
    goto <bb 263>;

<bb 472>:
  D.45083_794 = switch_stristr ("stereo=1", D.45080_791);
  if (D.45083_794 != 0B)
    goto <bb 329>;
  else
    goto <bb 330>;

<bb 473>:

<bb 474>:
  # DEBUG match => 1
  goto <bb 335>;

<bb 475>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
  D.44530_861 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_861, "dtmf_type", "info", 1);
  D.44471_862 = smh_186->mparams;
  D.44471_862->dtmf_type = 1;
  D.44471_862->te = 0;
  D.44471_862->recv_te = 0;
  # DEBUG D#12 => D.44471_862->recv_te
  # DEBUG te => D#12
  goto <bb 454>;

<bb 476>:
  D.45161_903 = switch_stristr ("fir", D.44619_900);
  if (D.45161_903 != 0B)
    goto <bb 385>;
  else
    goto <bb 386>;

<bb 477>:
  D.44471_965 = smh_186->mparams;
  D.44821_966 = D.44471_965->ndlb;
  D.44822_967 = D.44821_966 & 4;
  if (D.44822_967 == 0)
    goto <bb 397>;
  else
    goto <bb 409>;

<bb 478>:
  D.44666_971 = m_1765->m_proto;
  D.44829_972 = D.44666_971 != 257;
  D.44830_973 = got_webrtc_78 == 0;
  D.44831_974 = D.44830_973 & D.44829_972;
  if (D.44831_974 != 0)
    goto <bb 408>;
  else
    goto <bb 479>;

<bb 479>:
  pretmp.1030_1891 = attr_620->a_value;
  goto <bb 409>;

<bb 480>:
  D.44471_999 = smh_186->mparams;
  D.44821_1000 = D.44471_999->ndlb;
  D.44937_1001 = (int) D.44821_1000;
  D.44938_1002 = D.44937_1001 & 1;
  if (D.44938_1002 != 0)
    goto <bb 422>;
  else
    goto <bb 424>;

<bb 481>:
  # got_crypto_898 = PHI <got_crypto_50(183)>
  # DEBUG got_crypto => got_crypto_898
  # DEBUG attr => attr_500
  # DEBUG got_crypto => got_crypto_898
  # DEBUG maxptime => dmaxptime_1006
  # DEBUG ptime => dptime_1036
  # DEBUG attr => attr_500

<bb 482>:
  # attr_923 = PHI <attr_500(481), attr_507(185)>
  # got_crypto_141 = PHI <got_crypto_898(481), got_crypto_1867(185)>
  goto <bb 186>;

<bb 483>:
  # got_video_crypto_519 = PHI <got_video_crypto_57(377)>
  # DEBUG got_video_crypto => got_video_crypto_519
  # DEBUG attr => attr_887
  # DEBUG got_video_crypto => got_video_crypto_519
  # DEBUG attr => attr_887

<bb 484>:
  # attr_1163 = PHI <attr_887(483), attr_894(379)>
  # got_video_crypto_744 = PHI <got_video_crypto_519(483), got_video_crypto_556(379)>
  goto <bb 380>;

}
