
;; Function greedy_sort (greedy_sort)

greedy_sort (struct switch_media_handle_t * smh, struct matches * matches, int m_idx, const struct switch_codec_implementation_t * * codec_array, int total_codecs)
{
  const struct switch_codec_implementation_t * imp;
  struct matches mtmp[30];
  int g;
  int f;
  int j;
  _Bool D.45443;
  _Bool D.45442;
  _Bool D.45441;
  int D.45440;
  struct switch_core_media_params_t * D.45439;
  struct matches * D.45438;
  unsigned int D.45437;
  unsigned int f.103;
  const struct switch_codec_implementation_t * D.45433;
  const struct switch_codec_implementation_t * * D.45432;
  unsigned int D.45431;
  unsigned int g.102;
  struct matches * D.45429;
  unsigned int D.45427;
  unsigned int j.101;

<bb 2>:
  # DEBUG j => 0
  # DEBUG f => 0
  mtmp = {};
  # DEBUG j => 0
  goto <bb 4>;

<bb 3>:
  j.101_11 = (unsigned int) j_1;
  j.101_14 = (unsigned int) j_1;
  D.45427_15 = j.101_14 * 16;
  D.45429_17 = matches_16(D) + D.45427_15;
  MEM[(struct matches *)&mtmp][j.101_11]{lb: 0 sz: 16} = *D.45429_17;
  j_18 = j_1 + 1;
  # DEBUG j => j_18

<bb 4>:
  # j_1 = PHI <0(2), j_18(3)>
  # DEBUG j => j_1
  if (j_1 < m_idx_10(D))
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 5>:
  f_38 = 0;
  g_32 = 0;
  goto <bb 12>;

<bb 6>:
  g.102_27 = (unsigned int) g_6;
  D.45431_28 = g.102_27 * 4;
  D.45432_30 = codec_array_29(D) + D.45431_28;
  imp_31 = *D.45432_30;
  # DEBUG imp => imp_31
  # DEBUG j => 0
  goto <bb 10>;

<bb 7>:
  D.45433_33 = mtmp[j_2].imp;
  if (D.45433_33 == imp_31)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  f.103_34 = (unsigned int) f_4;
  D.45437_35 = f.103_34 * 16;
  D.45438_36 = matches_16(D) + D.45437_35;
  j.101_37 = (unsigned int) j_2;
  *D.45438_36 = MEM[(struct matches *)&mtmp][j.101_37]{lb: 0 sz: 16};
  f_40 = f_4 + 1;
  # DEBUG f => f_40

<bb 9>:
  # f_3 = PHI <f_4(7), f_40(8)>
  # DEBUG f => f_3
  j_41 = j_2 + 1;
  # DEBUG j => j_41

<bb 10>:
  # j_2 = PHI <0(6), j_41(9)>
  # f_4 = PHI <f_5(6), f_3(9)>
  # DEBUG f => f_4
  # DEBUG j => j_2
  if (j_2 < m_idx_10(D))
    goto <bb 7>;
  else
    goto <bb 11>;

<bb 11>:
  g_42 = g_6 + 1;
  # DEBUG g => g_42

<bb 12>:
  # f_5 = PHI <0(5), f_4(11)>
  # g_6 = PHI <0(5), g_42(11)>
  # DEBUG g => g_6
  # DEBUG f => f_5
  D.45439_21 = smh_20(D)->mparams;
  D.45440_22 = D.45439_21->num_codecs;
  D.45441_23 = D.45440_22 > g_6;
  D.45442_25 = g_6 < total_codecs_24(D);
  D.45443_26 = D.45441_23 && D.45442_25;
  if (D.45443_26 != 0)
    goto <bb 6>;
  else
    goto <bb 13>;

<bb 13>:
  return;

}



;; Function dtls_ok (dtls_ok)

dtls_ok (struct switch_core_session_t * session)
{
  uint32_t D.42521;
  struct switch_channel_t * D.42520;
  int D.42519;

<bb 2>:
  D.42520_2 = session_1(D)->channel;
  D.42521_3 = switch_channel_test_flag (D.42520_2, 111);
  D.42519_4 = (int) D.42521_3;
  return D.42519_4;

}



;; Function switch_core_media_find_zrtp_hash (switch_core_media_find_zrtp_hash)

switch_core_media_find_zrtp_hash (struct switch_core_session_t * session, struct sdp_session_t * sdp)
{
  const char D.47249;
  int D.47248;
  static const char __func__[33] = "switch_core_media_find_zrtp_hash";
  int got_video;
  int got_audio;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  struct switch_channel_t * channel;
  char * D.40656;
  struct switch_core_session_t * D.40655;
  char * D.40651;
  struct switch_core_session_t * D.40650;
  const char * D.40647;
  int D.40645;
  const char * D.40639;
  _Bool D.40638;
  _Bool D.40637;
  _Bool D.40636;
  _Bool D.40634;
  _Bool D.40633;
  _Bool D.40632;
  sdp_media_e D.40631;
  long unsigned int D.40628;
  _Bool D.40625;
  _Bool D.40624;
  _Bool D.40623;
  struct switch_core_session_t * D.40622;
  struct switch_media_handle_t * D.40619;

<bb 2>:
  channel_10 = switch_core_session_get_channel (session_9(D));
  # DEBUG channel => channel_10
  # DEBUG got_audio => 0
  # DEBUG got_video => 0
  D.40619_13 = session_9(D)->media_handle;
  if (D.40619_13 == 0B)
    goto <bb 26>;
  else
    goto <bb 3>;

<bb 3>:
  D.40619_14 = session_9(D)->media_handle;
  # DEBUG D#1 => &D.40619_14->engines
  # DEBUG audio_engine => D#1
  D.40619_16 = session_9(D)->media_handle;
  # DEBUG D#2 => &D.40619_16->engines[1]
  # DEBUG video_engine => D#2
  D.40622_18 = switch_channel_get_session (channel_10);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 334, D.40622_18, 101, "Looking for zrtp-hash\n");
  m_20 = sdp_19(D)->sdp_media;
  # DEBUG m => m_20
  goto <bb 25>;

<bb 4>:
  D.40623_21 = got_audio_5 != 0;
  D.40624_22 = got_video_8 != 0;
  D.40625_23 = D.40623_21 && D.40624_22;
  if (D.40625_23 != 0)
    goto <bb 26>;
  else
    goto <bb 5>;

<bb 5>:
  D.40628_24 = m_1->m_port;
  if (D.40628_24 != 0)
    goto <bb 6>;
  else
    goto <bb 24>;

<bb 6>:
  D.40631_25 = m_1->m_type;
  D.40632_26 = D.40631_25 == 2;
  D.40633_27 = got_audio_5 == 0;
  D.40634_28 = D.40632_26 && D.40633_27;
  if (D.40634_28 != 0)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:
  D.40631_29 = m_1->m_type;
  D.40636_30 = D.40631_29 == 3;
  D.40637_31 = got_video_8 == 0;
  D.40638_32 = D.40636_30 && D.40637_31;
  if (D.40638_32 != 0)
    goto <bb 8>;
  else
    goto <bb 24>;

<bb 8>:
  attr_33 = m_1->m_attributes;
  # DEBUG attr => attr_33
  goto <bb 23>;

<bb 9>:
  D.40639_34 = attr_2->a_name;
  # DEBUG s => D.40639_34
  if (D.40639_34 == 0B)
    goto <bb 12>;
  else
    goto <bb 10>;

<bb 10>:
  D.47249_73 = *D.40639_34;
  if (D.47249_73 == 0)
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:

<bb 12>:
  # D.47248_74 = PHI <1(9), 1(10), 0(11)>
  if (D.47248_74 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  goto <bb 22>;

<bb 14>:
  D.40639_36 = attr_2->a_name;
  D.40645_37 = strcasecmp (D.40639_36, "zrtp-hash");
  if (D.40645_37 != 0)
    goto <bb 16>;
  else
    goto <bb 15>;

<bb 15>:
  D.40647_38 = attr_2->a_value;
  if (D.40647_38 == 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  goto <bb 22>;

<bb 17>:
  D.40631_39 = m_1->m_type;
  if (D.40631_39 == 2)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.40650_40 = switch_channel_get_session (channel_10);
  D.40647_41 = attr_2->a_value;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 343, D.40650_40, 7, "Found audio zrtp-hash; setting r_sdp_audio_zrtp_hash=%s\n", D.40647_41);
  D.40647_42 = attr_2->a_value;
  switch_channel_set_variable_var_check (channel_10, "r_sdp_audio_zrtp_hash", D.40647_42, 1);
  D.40647_43 = attr_2->a_value;
  D.40651_44 = switch_core_perform_session_strdup (session_9(D), D.40647_43, "src/switch_core_media.c", &__func__, 346);
  MEM[(struct switch_rtp_engine_t *)D.40619_14 + 80B].remote_sdp_zrtp_hash = D.40651_44;
  got_audio_45 = got_audio_5 + 1;
  # DEBUG got_audio => got_audio_45
  goto <bb 21>;

<bb 19>:
  D.40631_46 = m_1->m_type;
  if (D.40631_46 == 3)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.40655_47 = switch_channel_get_session (channel_10);
  D.40647_48 = attr_2->a_value;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 349, D.40655_47, 7, "Found video zrtp-hash; setting r_sdp_video_zrtp_hash=%s\n", D.40647_48);
  D.40647_49 = attr_2->a_value;
  switch_channel_set_variable_var_check (channel_10, "r_sdp_video_zrtp_hash", D.40647_49, 1);
  D.40647_50 = attr_2->a_value;
  D.40656_51 = switch_core_perform_session_strdup (session_9(D), D.40647_50, "src/switch_core_media.c", &__func__, 352);
  MEM[(struct switch_rtp_engine_t *)D.40619_16 + 11496B].remote_sdp_zrtp_hash = D.40656_51;
  got_video_52 = got_video_8 + 1;
  # DEBUG got_video => got_video_52

<bb 21>:
  # got_audio_3 = PHI <got_audio_45(18), got_audio_5(19), got_audio_5(20)>
  # got_video_6 = PHI <got_video_8(18), got_video_8(19), got_video_52(20)>
  # DEBUG got_video => got_video_6
  # DEBUG got_audio => got_audio_3
  switch_channel_set_flag_value (channel_10, 75, 1);
  goto <bb 24>;

<bb 22>:
  attr_53 = attr_2->a_next;
  # DEBUG attr => attr_53

<bb 23>:
  # attr_2 = PHI <attr_33(8), attr_53(22)>
  # DEBUG attr => attr_2
  if (attr_2 != 0B)
    goto <bb 9>;
  else
    goto <bb 24>;

<bb 24>:
  # got_audio_4 = PHI <got_audio_5(5), got_audio_5(7), got_audio_3(21), got_audio_5(23)>
  # got_video_7 = PHI <got_video_8(5), got_video_8(7), got_video_6(21), got_video_8(23)>
  # DEBUG got_video => got_video_7
  # DEBUG got_audio => got_audio_4
  m_54 = m_1->m_next;
  # DEBUG m => m_54

<bb 25>:
  # m_1 = PHI <m_20(3), m_54(24)>
  # got_audio_5 = PHI <0(3), got_audio_4(24)>
  # got_video_8 = PHI <0(3), got_video_7(24)>
  # DEBUG got_video => got_video_8
  # DEBUG got_audio => got_audio_5
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 4>;
  else
    goto <bb 26>;

<bb 26>:
  return;

}



;; Function _switch_core_media_pass_zrtp_hash2 (_switch_core_media_pass_zrtp_hash2)

_switch_core_media_pass_zrtp_hash2 (struct switch_core_session_t * aleg_session, struct switch_core_session_t * bleg_session, switch_media_type_t type)
{
  static const char __func__[35] = "_switch_core_media_pass_zrtp_hash2";
  struct switch_rtp_engine_t * bleg_engine;
  struct switch_rtp_engine_t * aleg_engine;
  char * D.47199;
  char * D.47198;
  struct switch_core_session_t * D.47197;
  char * D.47194;
  char * D.47193;
  struct switch_channel_t * D.47192;
  char * D.47191;
  struct switch_core_session_t * D.47190;
  char * D.47187;
  struct switch_core_session_t * D.47186;
  uint32_t D.47183;
  struct switch_core_session_t * D.47182;
  struct switch_channel_t * D.47181;
  unsigned int D.47179;
  struct switch_media_handle_t * D.47177;
  struct switch_media_handle_t * D.47175;

<bb 2>:
  D.47175_2 = aleg_session_1(D)->media_handle;
  if (D.47175_2 == 0B)
    goto <bb 10>;
  else
    goto <bb 3>;

<bb 3>:
  D.47177_4 = bleg_session_3(D)->media_handle;
  if (D.47177_4 == 0B)
    goto <bb 10>;
  else
    goto <bb 4>;

<bb 4>:
  D.47175_5 = aleg_session_1(D)->media_handle;
  aleg_engine_9 = &D.47175_5->engines[type_7(D)]{lb: 0 sz: 11416};
  # DEBUG aleg_engine => aleg_engine_9
  D.47177_10 = bleg_session_3(D)->media_handle;
  bleg_engine_13 = &D.47177_10->engines[type_7(D)]{lb: 0 sz: 11416};
  # DEBUG bleg_engine => bleg_engine_13
  D.47181_14 = aleg_session_1(D)->channel;
  D.47182_15 = switch_channel_get_session (D.47181_14);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 255, D.47182_15, 101, "Deciding whether to pass zrtp-hash between a-leg and b-leg\n");
  D.47181_16 = aleg_session_1(D)->channel;
  D.47183_17 = switch_channel_test_flag (D.47181_16, 73);
  if (D.47183_17 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47181_18 = aleg_session_1(D)->channel;
  D.47186_19 = switch_channel_get_session (D.47181_18);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 259, D.47186_19, 101, "CF_ZRTP_PASSTHRU_REQ not set on a-leg, so not propagating zrtp-hash\n");
  goto <bb 10>;

<bb 6>:
  D.47187_20 = aleg_engine_9->remote_sdp_zrtp_hash;
  if (D.47187_20 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.47181_21 = aleg_session_1(D)->channel;
  D.47190_22 = switch_channel_get_session (D.47181_21);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 265, D.47190_22, 7, "Passing a-leg remote zrtp-hash (audio) to b-leg\n");
  D.47187_23 = aleg_engine_9->remote_sdp_zrtp_hash;
  D.47191_24 = switch_core_perform_session_strdup (bleg_session_3(D), D.47187_23, "src/switch_core_media.c", &__func__, 266);
  bleg_engine_13->local_sdp_zrtp_hash = D.47191_24;
  D.47192_25 = bleg_session_3(D)->channel;
  D.47193_26 = bleg_engine_13->local_sdp_zrtp_hash;
  switch_channel_set_variable_var_check (D.47192_25, "l_sdp_audio_zrtp_hash", D.47193_26, 1);

<bb 8>:
  D.47194_27 = bleg_engine_13->remote_sdp_zrtp_hash;
  if (D.47194_27 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.47181_28 = aleg_session_1(D)->channel;
  D.47197_29 = switch_channel_get_session (D.47181_28);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 271, D.47197_29, 7, "Passing b-leg remote zrtp-hash (audio) to a-leg\n");
  D.47194_30 = bleg_engine_13->remote_sdp_zrtp_hash;
  D.47198_31 = switch_core_perform_session_strdup (aleg_session_1(D), D.47194_30, "src/switch_core_media.c", &__func__, 272);
  aleg_engine_9->local_sdp_zrtp_hash = D.47198_31;
  D.47181_32 = aleg_session_1(D)->channel;
  D.47199_33 = aleg_engine_9->local_sdp_zrtp_hash;
  switch_channel_set_variable_var_check (D.47181_32, "l_sdp_audio_zrtp_hash", D.47199_33, 1);

<bb 10>:
  return;

}



;; Function switch_true (switch_true)

switch_true (const char * expr)
{
  int D.47254;
  switch_bool_t D.40615;
  int D.40613;
  int D.40611;
  int D.40609;
  int D.40607;
  int D.40605;
  int D.40603;
  int D.40601;
  int D.40595;

<bb 2>:
  if (expr_2(D) != 0B)
    goto <bb 3>;
  else
    goto <bb 12>;

<bb 3>:
  D.40601_3 = strcasecmp (expr_2(D), "yes");
  if (D.40601_3 == 0)
    goto <bb 13>;
  else
    goto <bb 4>;

<bb 4>:
  D.40603_4 = strcasecmp (expr_2(D), "on");
  if (D.40603_4 == 0)
    goto <bb 13>;
  else
    goto <bb 5>;

<bb 5>:
  D.40605_5 = strcasecmp (expr_2(D), "true");
  if (D.40605_5 == 0)
    goto <bb 13>;
  else
    goto <bb 6>;

<bb 6>:
  D.40607_6 = strcasecmp (expr_2(D), "t");
  if (D.40607_6 == 0)
    goto <bb 13>;
  else
    goto <bb 7>;

<bb 7>:
  D.40609_7 = strcasecmp (expr_2(D), "enabled");
  if (D.40609_7 == 0)
    goto <bb 13>;
  else
    goto <bb 8>;

<bb 8>:
  D.40611_8 = strcasecmp (expr_2(D), "active");
  if (D.40611_8 == 0)
    goto <bb 13>;
  else
    goto <bb 9>;

<bb 9>:
  D.40613_9 = strcasecmp (expr_2(D), "allow");
  if (D.40613_9 == 0)
    goto <bb 13>;
  else
    goto <bb 10>;

<bb 10>:
  D.40615_10 = switch_is_number (expr_2(D));
  if (D.40615_10 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  # DEBUG __nptr => expr_2(D)
  D.47254_17 = strtol (expr_2(D), 0B, 10);
  if (D.47254_17 != 0)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:

<bb 13>:
  # D.40595_1 = PHI <1(4), 0(12), 1(3), 1(11), 1(9), 1(8), 1(7), 1(6), 1(5)>
  return D.40595_1;

}



;; Function switch_false (switch_false)

switch_false (const char * expr)
{
  int D.47258;
  switch_bool_t D.41155;
  int D.41153;
  int D.41151;
  int D.41149;
  int D.41147;
  int D.41145;
  int D.41143;
  int D.41141;
  int D.41135;

<bb 2>:
  if (expr_2(D) != 0B)
    goto <bb 3>;
  else
    goto <bb 12>;

<bb 3>:
  D.41141_3 = strcasecmp (expr_2(D), "no");
  if (D.41141_3 == 0)
    goto <bb 13>;
  else
    goto <bb 4>;

<bb 4>:
  D.41143_4 = strcasecmp (expr_2(D), "off");
  if (D.41143_4 == 0)
    goto <bb 13>;
  else
    goto <bb 5>;

<bb 5>:
  D.41145_5 = strcasecmp (expr_2(D), "false");
  if (D.41145_5 == 0)
    goto <bb 13>;
  else
    goto <bb 6>;

<bb 6>:
  D.41147_6 = strcasecmp (expr_2(D), "f");
  if (D.41147_6 == 0)
    goto <bb 13>;
  else
    goto <bb 7>;

<bb 7>:
  D.41149_7 = strcasecmp (expr_2(D), "disabled");
  if (D.41149_7 == 0)
    goto <bb 13>;
  else
    goto <bb 8>;

<bb 8>:
  D.41151_8 = strcasecmp (expr_2(D), "inactive");
  if (D.41151_8 == 0)
    goto <bb 13>;
  else
    goto <bb 9>;

<bb 9>:
  D.41153_9 = strcasecmp (expr_2(D), "disallow");
  if (D.41153_9 == 0)
    goto <bb 13>;
  else
    goto <bb 10>;

<bb 10>:
  D.41155_10 = switch_is_number (expr_2(D));
  if (D.41155_10 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  # DEBUG __nptr => expr_2(D)
  D.47258_17 = strtol (expr_2(D), 0B, 10);
  if (D.47258_17 == 0)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:

<bb 13>:
  # D.41135_1 = PHI <1(4), 0(12), 1(3), 1(11), 1(9), 1(8), 1(7), 1(6), 1(5)>
  return D.41135_1;

}



;; Function gen_ice (gen_ice)

gen_ice (struct switch_core_session_t * session, switch_media_type_t type, const char * ip, switch_port_t port)
{
  const char D.47293;
  int D.47292;
  static const char __func__[8] = "gen_ice";
  static const char __PRETTY_FUNCTION__[8] = "gen_ice";
  char tmp[33];
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  char * D.42961;
  uint32_t D.42957;
  int D.42956;
  int D.42955;
  int D.42952;
  char * D.42951;
  char * D.42948;
  char * D.42947;
  char * D.42944;
  char * D.42943;
  char * D.42940;
  char * D.42939;
  char * D.42936;
  char * D.42935;
  char * D.42932;
  int8_t D.42929;
  unsigned int D.42928;

<bb 2>:
  tmp = "";
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4608, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 27>;
  else
    goto <bb 5>;

<bb 5>:
  engine_6 = &smh_2->engines[type_4(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_6
  D.42929_7 = engine_6->rtcp_mux;
  if (D.42929_7 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  engine_6->rtcp_mux = 1;

<bb 7>:
  D.42932_8 = smh_2->msid;
  if (D.42932_8 == 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  switch_stun_random_string (&tmp, 32, 0B);
  tmp[32] = 0;
  D.42935_9 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4625);
  smh_2->msid = D.42935_9;

<bb 9>:
  D.42936_10 = smh_2->cname;
  if (D.42936_10 == 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  switch_stun_random_string (&tmp, 16, 0B);
  tmp[16] = 0;
  D.42939_11 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4631);
  smh_2->cname = D.42939_11;

<bb 11>:
  D.42940_12 = engine_6->ice_out.ufrag;
  if (D.42940_12 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  switch_stun_random_string (&tmp, 16, 0B);
  tmp[16] = 0;
  D.42943_13 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4637);
  engine_6->ice_out.ufrag = D.42943_13;

<bb 13>:
  D.42944_14 = engine_6->ice_out.pwd;
  if (D.42944_14 == 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  switch_stun_random_string (&tmp, 16, 0B);
  D.42947_15 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4642);
  engine_6->ice_out.pwd = D.42947_15;

<bb 15>:
  D.42948_16 = engine_6->ice_out.cands[0][0].foundation;
  if (D.42948_16 == 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  switch_stun_random_string (&tmp, 10, "0123456789");
  tmp[10] = 0;
  D.42951_17 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4648);
  engine_6->ice_out.cands[0][0].foundation = D.42951_17;

<bb 17>:
  engine_6->ice_out.cands[0][0].transport = "udp";
  D.42952_18 = engine_6->ice_out.cands[0][0].component_id;
  if (D.42952_18 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  engine_6->ice_out.cands[0][0].component_id = 1;
  D.42952_19 = engine_6->ice_out.cands[0][0].component_id;
  D.42955_20 = 329569 - D.42952_19;
  D.42956_21 = D.42955_20 * 2;
  D.42957_22 = (uint32_t) D.42956_21;
  engine_6->ice_out.cands[0][0].priority = D.42957_22;

<bb 19>:
  # DEBUG s => ip_23(D)
  if (ip_23(D) == 0B)
    goto <bb 22>;
  else
    goto <bb 20>;

<bb 20>:
  D.47293_66 = *ip_23(D);
  if (D.47293_66 == 0)
    goto <bb 22>;
  else
    goto <bb 21>;

<bb 21>:

<bb 22>:
  # D.47292_67 = PHI <1(19), 1(20), 0(21)>
  if (D.47292_67 == 0)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  D.42961_25 = switch_core_perform_session_strdup (session_1(D), ip_23(D), "src/switch_core_media.c", &__func__, 4659);
  engine_6->ice_out.cands[0][0].con_addr = D.42961_25;

<bb 24>:
  if (port_26(D) != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  engine_6->ice_out.cands[0][0].con_port = port_26(D);

<bb 26>:
  engine_6->ice_out.cands[0][0].generation = "0";
  engine_6->ice_out.cands[0][0].ready = 1;

<bb 27>:
  return;

}



;; Function generate_local_fingerprint (generate_local_fingerprint)

generate_local_fingerprint (struct switch_media_handle_t * smh, switch_media_type_t type)
{
  struct switch_rtp_engine_t * engine;
  struct dtls_fingerprint_t * D.43000;
  char * D.42996;
  uint32_t D.42993;
  unsigned int D.42992;

<bb 2>:
  engine_5 = &smh_1(D)->engines[type_3(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_5
  D.42993_6 = engine_5->local_dtls_fingerprint.len;
  if (D.42993_6 == 0)
    goto <bb 3>;
  else
    goto <bb 7>;

<bb 3>:
  D.42996_7 = engine_5->remote_dtls_fingerprint.type;
  if (D.42996_7 != 0B)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.42996_8 = engine_5->remote_dtls_fingerprint.type;
  engine_5->local_dtls_fingerprint.type = D.42996_8;
  goto <bb 6>;

<bb 5>:
  engine_5->local_dtls_fingerprint.type = "sha-256";

<bb 6>:
  D.43000_9 = &engine_5->local_dtls_fingerprint;
  switch_core_cert_gen_fingerprint ("dtls-srtp", D.43000_9);

<bb 7>:
  return;

}



;; Function start_video_thread (start_video_thread) (unlikely executed)

start_video_thread (struct switch_core_session_t * session)
{
  static const char __func__[19] = "start_video_thread";
  struct switch_media_handle_t * smh;
  struct switch_memory_pool_t * pool;
  struct switch_threadattr_t * thd_attr;
  struct switch_memory_pool_t * D.43812;
  struct media_helper * D.43811;
  struct switch_thread_t * * D.43810;
  struct switch_mutex_t * * D.43809;
  struct switch_mutex_t * * D.43808;
  struct switch_thread_cond_t * * D.43807;
  struct switch_threadattr_t * thd_attr.69;
  switch_payload_t D.43805;
  struct payload_map_t * D.43804;
  struct switch_rtp_t * D.43803;
  char * D.43802;
  struct switch_channel_t * D.43801;
  struct switch_thread_t * D.43798;
  switch_status_t D.43797;

<bb 2>:
  thd_attr = 0B;
  pool_3 = switch_core_session_get_pool (session_2(D));
  # DEBUG pool => pool_3
  # DEBUG v_engine => 0B
  smh_5 = session_2(D)->media_handle;
  # DEBUG smh => smh_5
  if (smh_5 == 0B)
    goto <bb 5>;
  else
    goto <bb 3>;

<bb 3>:
  # DEBUG D#3 => &smh_5->engines[1]
  # DEBUG v_engine => D#3
  D.43798_8 = MEM[(struct switch_rtp_engine_t *)smh_5 + 11496B].media_thread;
  if (D.43798_8 != 0B)
    goto <bb 5>;
  else
    goto <bb 4>;

<bb 4>:
  D.43801_10 = switch_core_session_get_channel (session_2(D));
  D.43802_11 = switch_channel_get_name (D.43801_10);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4120, session_2(D), 5, "%s Starting Video thread\n", D.43802_11);
  D.43803_12 = MEM[(struct switch_rtp_engine_t *)smh_5 + 11496B].rtp_session;
  D.43804_13 = MEM[(struct switch_rtp_engine_t *)smh_5 + 11496B].cur_payload_map;
  D.43805_14 = D.43804_13->agreed_pt;
  switch_rtp_set_default_payload (D.43803_12, D.43805_14);
  MEM[(struct switch_rtp_engine_t *)smh_5 + 11496B].mh.session = session_2(D);
  switch_threadattr_create (&thd_attr, pool_3);
  thd_attr.69_15 = thd_attr;
  switch_threadattr_stacksize_set (thd_attr.69_15, 245760);
  D.43807_16 = &MEM[(struct switch_rtp_engine_t *)smh_5 + 11496B].mh.cond;
  switch_thread_cond_create (D.43807_16, pool_3);
  D.43808_17 = &MEM[(struct switch_rtp_engine_t *)smh_5 + 11496B].mh.cond_mutex;
  switch_mutex_init (D.43808_17, 1, pool_3);
  D.43809_18 = &MEM[(struct switch_rtp_engine_t *)smh_5 + 11496B].read_mutex[1];
  switch_mutex_init (D.43809_18, 1, pool_3);
  D.43810_19 = &MEM[(struct switch_rtp_engine_t *)smh_5 + 11496B].media_thread;
  thd_attr.69_20 = thd_attr;
  D.43811_21 = &MEM[(struct switch_rtp_engine_t *)smh_5 + 11496B].mh;
  D.43812_22 = switch_core_session_get_pool (session_2(D));
  switch_thread_create (D.43810_19, thd_attr.69_20, video_helper_thread, D.43811_21, D.43812_22);

<bb 5>:
  # D.43797_1 = PHI <1(2), 1(3), 0(4)>
  return D.43797_1;

}



;; Function video_helper_thread (video_helper_thread)

video_helper_thread (struct switch_thread_t * thread, void * obj)
{
  static const char __func__[20] = "video_helper_thread";
  struct switch_media_handle_t * smh;
  struct switch_frame_t * read_frame;
  switch_status_t status;
  struct switch_channel_t * channel;
  struct switch_core_session_t * session;
  char * D.43871;
  switch_channel_state_t D.43870;
  uint32_t D.43867;
  int D.43863;
  int D.43862;
  switch_frame_flag_t D.43861;
  struct switch_frame_t * read_frame.73;
  uint32_t D.43857;
  _Bool D.43852;
  _Bool D.43851;
  _Bool D.43850;
  uint32_t D.43847;
  uint32_t D.43844;
  uint32_t D.43841;
  uint32_t D.43837;
  char * iftmp.72;
  char * D.43835;
  struct switch_thread_cond_t * D.43834;
  uint32_t D.43830;
  char * iftmp.71;
  char * D.43828;
  uint32_t D.43825;
  uint32_t D.43821;
  char * iftmp.70;
  char * D.43819;
  struct switch_channel_t * D.43818;
  struct switch_mutex_t * D.43817;

<bb 2>:
  # DEBUG mh => obj_5(D)
  session_7 = MEM[(struct media_helper *)obj_5(D)].session;
  # DEBUG session => session_7
  channel_8 = switch_core_session_get_channel (session_7);
  # DEBUG channel => channel_8
  smh_9 = session_7->media_handle;
  # DEBUG smh => smh_9
  if (smh_9 == 0B)
    goto <bb 29>;
  else
    goto <bb 3>;

<bb 3>:
  switch_core_session_read_lock (session_7);
  MEM[(struct media_helper *)obj_5(D)].up = 1;
  D.43817_11 = MEM[(struct media_helper *)obj_5(D)].cond_mutex;
  switch_mutex_lock (D.43817_11);
  D.43818_12 = session_7->channel;
  D.43819_13 = switch_channel_get_name (D.43818_12);
  D.43821_14 = switch_channel_test_flag (channel_8, 115);
  if (D.43821_14 != 0)
    goto <bb 5>;
  else
    goto <bb 4>;

<bb 4>:

<bb 5>:
  # iftmp.70_2 = PHI <"on"(3), "off"(4)>
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4044, 0B, 7, "%s Video thread started. Echo is %s\n", D.43819_13, iftmp.70_2);
  switch_core_session_refresh_video (session_7);
  goto <bb 27>;

<bb 6>:
  D.43825_18 = switch_channel_test_flag (channel_8, 113);
  if (D.43825_18 != 0)
    goto <bb 7>;
  else
    goto <bb 12>;

<bb 7>:
  D.43818_19 = session_7->channel;
  D.43828_20 = switch_channel_get_name (D.43818_19);
  D.43830_21 = switch_channel_test_flag (channel_8, 115);
  if (D.43830_21 != 0)
    goto <bb 9>;
  else
    goto <bb 8>;

<bb 8>:

<bb 9>:
  # iftmp.71_3 = PHI <"on"(7), "off"(8)>
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4051, 0B, 7, "%s Video thread paused. Echo is %s\n", D.43828_20, iftmp.71_3);
  D.43834_24 = MEM[(struct media_helper *)obj_5(D)].cond;
  D.43817_25 = MEM[(struct media_helper *)obj_5(D)].cond_mutex;
  switch_thread_cond_wait (D.43834_24, D.43817_25);
  D.43818_26 = session_7->channel;
  D.43835_27 = switch_channel_get_name (D.43818_26);
  D.43837_28 = switch_channel_test_flag (channel_8, 115);
  if (D.43837_28 != 0)
    goto <bb 11>;
  else
    goto <bb 10>;

<bb 10>:

<bb 11>:
  # iftmp.72_4 = PHI <"on"(9), "off"(10)>
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4054, 0B, 7, "%s Video thread resumed  Echo is %s\n", D.43835_27, iftmp.72_4);
  switch_core_session_refresh_video (session_7);

<bb 12>:
  D.43841_31 = switch_channel_test_flag (channel_8, 113);
  if (D.43841_31 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  goto <bb 26>;

<bb 14>:
  D.43818_32 = session_7->channel;
  D.43844_33 = switch_channel_test_flag (D.43818_32, 1);
  if (D.43844_33 == 0)
    goto <bb 15>;
  else
    goto <bb 17>;

<bb 15>:
  D.43818_34 = session_7->channel;
  D.43847_35 = switch_channel_test_flag (D.43818_34, 3);
  if (D.43847_35 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  switch_sleep (10000);
  goto <bb 26>;

<bb 17>:
  status_36 = switch_core_session_read_video_frame (session_7, &read_frame, 0, 0);
  # DEBUG status => status_36
  D.43850_37 = status_36 != 0;
  D.43851_38 = status_36 != 11;
  D.43852_39 = D.43850_37 && D.43851_38;
  if (D.43852_39 != 0)
    goto <bb 18>;
  else
    goto <bb 20>;

<bb 18>:
  if (status_36 != 10)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  switch_cond_next ();
  goto <bb 26>;

<bb 20>:
  D.43857_40 = switch_channel_test_flag (channel_8, 70);
  if (D.43857_40 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  switch_core_session_refresh_video (session_7);
  switch_channel_clear_flag (channel_8, 70);

<bb 22>:
  read_frame.73_41 = read_frame;
  D.43861_42 = read_frame.73_41->flags;
  D.43862_43 = (int) D.43861_42;
  D.43863_44 = D.43862_43 & 1;
  if (D.43863_44 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  goto <bb 26>;

<bb 24>:
  D.43867_46 = switch_channel_test_flag (channel_8, 115);
  if (D.43867_46 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  read_frame.73_47 = read_frame;
  switch_core_session_write_video_frame (session_7, read_frame.73_47, 0, 0);

<bb 26>:

<bb 27>:
  D.43870_17 = switch_channel_get_state (channel_8);
  if (D.43870_17 <= 9)
    goto <bb 6>;
  else
    goto <bb 28>;

<bb 28>:
  D.43818_48 = session_7->channel;
  D.43871_49 = switch_channel_get_name (D.43818_48);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4093, 0B, 7, "%s Video thread ended\n", D.43871_49);
  D.43817_50 = MEM[(struct media_helper *)obj_5(D)].cond_mutex;
  switch_mutex_unlock (D.43817_50);
  switch_core_session_rwunlock (session_7);
  MEM[(struct media_helper *)obj_5(D)].up = 0;

<bb 29>:
  return 0B;

}



;; Function switch_core_media_process_udptl (switch_core_media_process_udptl)

switch_core_media_process_udptl (struct switch_core_session_t * session, struct sdp_session_t * sdp, struct sdp_media_t * m)
{
  int D.47319;
  int D.47316;
  int dft;
  int dft;
  int dft;
  int D.47304;
  int D.47301;
  static const char __func__[32] = "switch_core_media_process_udptl";
  struct sdp_attribute_t * attr;
  struct switch_t38_options_t * t38_options;
  char * D.45417;
  int D.45412;
  char * D.45411;
  int D.45408;
  unsigned int D.45405;
  int D.45401;
  unsigned int D.45398;
  int D.45394;
  char * D.45391;
  int D.45388;
  switch_bool_t D.45384;
  int D.45380;
  switch_bool_t D.45378;
  int D.45374;
  switch_bool_t D.45372;
  int D.45368;
  unsigned int D.45367;
  int D.45363;
  short unsigned int D.45360;
  const char * D.45357;
  int D.45355;
  const char * D.45354;
  char * D.45351;
  const char * D.45348;
  struct sdp_connection_t * D.45345;
  char * D.45342;
  const char * D.45340;
  struct sdp_connection_t * D.45338;
  char * D.45334;
  const char * D.45333;
  struct sdp_origin_t * D.45330;
  short unsigned int D.45329;
  long unsigned int D.45328;
  char * D.45327;
  char * D.45326;
  struct switch_channel_t * D.45323;

<bb 2>:
  D.45323_4 = session_3(D)->channel;
  t38_options_5 = switch_channel_get_private (D.45323_4, "t38_options");
  # DEBUG t38_options => t38_options_5
  if (t38_options_5 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  t38_options_6 = switch_core_perform_session_alloc (session_3(D), 60, "src/switch_core_media.c", &__func__, 369);
  # DEBUG t38_options => t38_options_6
  t38_options_6->T38FaxVersion = 0;
  t38_options_6->T38MaxBitRate = 14400;
  D.45326_7 = switch_core_perform_session_strdup (session_3(D), "transferredTCF", "src/switch_core_media.c", &__func__, 374);
  t38_options_6->T38FaxRateManagement = D.45326_7;
  D.45327_8 = switch_core_perform_session_strdup (session_3(D), "t38UDPRedundancy", "src/switch_core_media.c", &__func__, 375);
  t38_options_6->T38FaxUdpEC = D.45327_8;
  t38_options_6->T38FaxMaxBuffer = 500;
  t38_options_6->T38FaxMaxDatagram = 500;

<bb 4>:
  # t38_options_1 = PHI <t38_options_5(2), t38_options_6(3)>
  # DEBUG t38_options => t38_options_1
  D.45328_10 = m_9(D)->m_port;
  D.45329_11 = (short unsigned int) D.45328_10;
  t38_options_1->remote_port = D.45329_11;
  D.45330_13 = sdp_12(D)->sdp_origin;
  if (D.45330_13 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.45330_14 = sdp_12(D)->sdp_origin;
  D.45333_15 = D.45330_14->o_username;
  D.45334_16 = switch_core_perform_session_strdup (session_3(D), D.45333_15, "src/switch_core_media.c", &__func__, 383);
  t38_options_1->sdp_o_line = D.45334_16;
  goto <bb 7>;

<bb 6>:
  t38_options_1->sdp_o_line = "unknown";

<bb 7>:
  D.45338_17 = m_9(D)->m_connections;
  if (D.45338_17 != 0B)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  D.45338_18 = m_9(D)->m_connections;
  D.45340_19 = D.45338_18->c_address;
  if (D.45340_19 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.45338_20 = m_9(D)->m_connections;
  D.45340_21 = D.45338_20->c_address;
  D.45342_22 = switch_core_perform_session_strdup (session_3(D), D.45340_21, "src/switch_core_media.c", &__func__, 389);
  t38_options_1->remote_ip = D.45342_22;
  goto <bb 14>;

<bb 10>:
  if (sdp_12(D) != 0B)
    goto <bb 11>;
  else
    goto <bb 14>;

<bb 11>:
  D.45345_23 = sdp_12(D)->sdp_connection;
  if (D.45345_23 != 0B)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 12>:
  D.45345_24 = sdp_12(D)->sdp_connection;
  D.45348_25 = D.45345_24->c_address;
  if (D.45348_25 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.45345_26 = sdp_12(D)->sdp_connection;
  D.45348_27 = D.45345_26->c_address;
  D.45351_28 = switch_core_perform_session_strdup (session_3(D), D.45348_27, "src/switch_core_media.c", &__func__, 391);
  t38_options_1->remote_ip = D.45351_28;

<bb 14>:
  attr_29 = m_9(D)->m_attributes;
  # DEBUG attr => attr_29
  goto <bb 49>;

<bb 15>:
  D.45354_30 = attr_2->a_name;
  D.45355_31 = strcasecmp (D.45354_30, "T38FaxVersion");
  if (D.45355_31 == 0)
    goto <bb 16>;
  else
    goto <bb 18>;

<bb 16>:
  D.45357_32 = attr_2->a_value;
  if (D.45357_32 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.45357_33 = attr_2->a_value;
  # DEBUG __nptr => D.45357_33
  D.47301_136 = strtol (D.45357_33, 0B, 10);
  D.45360_35 = (short unsigned int) D.47301_136;
  t38_options_1->T38FaxVersion = D.45360_35;
  goto <bb 48>;

<bb 18>:
  D.45354_36 = attr_2->a_name;
  D.45363_37 = strcasecmp (D.45354_36, "T38MaxBitRate");
  if (D.45363_37 == 0)
    goto <bb 19>;
  else
    goto <bb 21>;

<bb 19>:
  D.45357_38 = attr_2->a_value;
  if (D.45357_38 != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.45357_39 = attr_2->a_value;
  # DEBUG __nptr => D.45357_39
  D.47304_137 = strtol (D.45357_39, 0B, 10);
  D.45367_41 = (unsigned int) D.47304_137;
  t38_options_1->T38MaxBitRate = D.45367_41;
  goto <bb 48>;

<bb 21>:
  D.45354_42 = attr_2->a_name;
  D.45368_43 = strcasecmp (D.45354_42, "T38FaxFillBitRemoval");
  if (D.45368_43 == 0)
    goto <bb 22>;
  else
    goto <bb 25>;

<bb 22>:
  D.45357_44 = attr_2->a_value;
  # DEBUG nptr => D.45357_44
  # DEBUG dft => 1
  if (D.45357_44 != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  # DEBUG __nptr => D.45357_44
  dft_138 = strtol (D.45357_44, 0B, 10);

<bb 24>:
  # dft_139 = PHI <1(22), dft_138(23)>
  D.45372_46 = (switch_bool_t) dft_139;
  t38_options_1->T38FaxFillBitRemoval = D.45372_46;
  goto <bb 48>;

<bb 25>:
  D.45354_47 = attr_2->a_name;
  D.45374_48 = strcasecmp (D.45354_47, "T38FaxTranscodingMMR");
  if (D.45374_48 == 0)
    goto <bb 26>;
  else
    goto <bb 29>;

<bb 26>:
  D.45357_49 = attr_2->a_value;
  # DEBUG nptr => D.45357_49
  # DEBUG dft => 1
  if (D.45357_49 != 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  # DEBUG __nptr => D.45357_49
  dft_140 = strtol (D.45357_49, 0B, 10);

<bb 28>:
  # dft_141 = PHI <1(26), dft_140(27)>
  D.45378_51 = (switch_bool_t) dft_141;
  t38_options_1->T38FaxTranscodingMMR = D.45378_51;
  goto <bb 48>;

<bb 29>:
  D.45354_52 = attr_2->a_name;
  D.45380_53 = strcasecmp (D.45354_52, "T38FaxTranscodingJBIG");
  if (D.45380_53 == 0)
    goto <bb 30>;
  else
    goto <bb 33>;

<bb 30>:
  D.45357_54 = attr_2->a_value;
  # DEBUG nptr => D.45357_54
  # DEBUG dft => 1
  if (D.45357_54 != 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  # DEBUG __nptr => D.45357_54
  dft_142 = strtol (D.45357_54, 0B, 10);

<bb 32>:
  # dft_143 = PHI <1(30), dft_142(31)>
  D.45384_56 = (switch_bool_t) dft_143;
  t38_options_1->T38FaxTranscodingJBIG = D.45384_56;
  goto <bb 48>;

<bb 33>:
  D.45354_57 = attr_2->a_name;
  D.45388_58 = strcasecmp (D.45354_57, "T38FaxRateManagement");
  if (D.45388_58 == 0)
    goto <bb 34>;
  else
    goto <bb 36>;

<bb 34>:
  D.45357_59 = attr_2->a_value;
  if (D.45357_59 != 0B)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  D.45357_60 = attr_2->a_value;
  D.45391_61 = switch_core_perform_session_strdup (session_3(D), D.45357_60, "src/switch_core_media.c", &__func__, 406);
  t38_options_1->T38FaxRateManagement = D.45391_61;
  goto <bb 48>;

<bb 36>:
  D.45354_62 = attr_2->a_name;
  D.45394_63 = strcasecmp (D.45354_62, "T38FaxMaxBuffer");
  if (D.45394_63 == 0)
    goto <bb 37>;
  else
    goto <bb 39>;

<bb 37>:
  D.45357_64 = attr_2->a_value;
  if (D.45357_64 != 0B)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.45357_65 = attr_2->a_value;
  # DEBUG __nptr => D.45357_65
  D.47316_144 = strtol (D.45357_65, 0B, 10);
  D.45398_67 = (unsigned int) D.47316_144;
  t38_options_1->T38FaxMaxBuffer = D.45398_67;
  goto <bb 48>;

<bb 39>:
  D.45354_68 = attr_2->a_name;
  D.45401_69 = strcasecmp (D.45354_68, "T38FaxMaxDatagram");
  if (D.45401_69 == 0)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 40>:
  D.45357_70 = attr_2->a_value;
  if (D.45357_70 != 0B)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.45357_71 = attr_2->a_value;
  # DEBUG __nptr => D.45357_71
  D.47319_145 = strtol (D.45357_71, 0B, 10);
  D.45405_73 = (unsigned int) D.47319_145;
  t38_options_1->T38FaxMaxDatagram = D.45405_73;
  goto <bb 48>;

<bb 42>:
  D.45354_74 = attr_2->a_name;
  D.45408_75 = strcasecmp (D.45354_74, "T38FaxUdpEC");
  if (D.45408_75 == 0)
    goto <bb 43>;
  else
    goto <bb 45>;

<bb 43>:
  D.45357_76 = attr_2->a_value;
  if (D.45357_76 != 0B)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  D.45357_77 = attr_2->a_value;
  D.45411_78 = switch_core_perform_session_strdup (session_3(D), D.45357_77, "src/switch_core_media.c", &__func__, 412);
  t38_options_1->T38FaxUdpEC = D.45411_78;
  goto <bb 48>;

<bb 45>:
  D.45354_79 = attr_2->a_name;
  D.45412_80 = strcasecmp (D.45354_79, "T38VendorInfo");
  if (D.45412_80 == 0)
    goto <bb 46>;
  else
    goto <bb 48>;

<bb 46>:
  D.45357_81 = attr_2->a_value;
  if (D.45357_81 != 0B)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.45357_82 = attr_2->a_value;
  D.45417_83 = switch_core_perform_session_strdup (session_3(D), D.45357_82, "src/switch_core_media.c", &__func__, 414);
  t38_options_1->T38VendorInfo = D.45417_83;

<bb 48>:
  attr_84 = attr_2->a_next;
  # DEBUG attr => attr_84

<bb 49>:
  # attr_2 = PHI <attr_29(14), attr_84(48)>
  # DEBUG attr => attr_2
  if (attr_2 != 0B)
    goto <bb 15>;
  else
    goto <bb 50>;

<bb 50>:
  D.45323_85 = session_3(D)->channel;
  switch_channel_set_variable_var_check (D.45323_85, "has_t38", "true", 1);
  D.45323_86 = session_3(D)->channel;
  switch_channel_set_private (D.45323_86, "t38_options", t38_options_1);
  D.45323_87 = session_3(D)->channel;
  switch_channel_set_app_flag_key ("T38", D.45323_87, 2);
  D.45323_88 = session_3(D)->channel;
  switch_channel_execute_on (D.45323_88, "sip_execute_on_image");
  D.45323_89 = session_3(D)->channel;
  switch_channel_api_on (D.45323_89, "sip_api_on_image");
  return t38_options_1;

}



;; Function get_media_profile_name (get_media_profile_name)

get_media_profile_name (struct switch_core_session_t * session, int secure)
{
  const char * D.42974;
  uint32_t D.42971;
  uint32_t D.42968;
  struct switch_channel_t * D.42967;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 5582, &__PRETTY_FUNCTION__);

<bb 4>:
  D.42967_3 = session_2(D)->channel;
  D.42968_4 = switch_channel_test_flag (D.42967_3, 106);
  if (D.42968_4 != 0)
    goto <bb 5>;
  else
    goto <bb 7>;

<bb 5>:
  D.42967_5 = session_2(D)->channel;
  D.42971_6 = switch_channel_test_flag (D.42967_5, 107);
  if (D.42971_6 != 0)
    goto <bb 9>;
  else
    goto <bb 6>;

<bb 6>:
  goto <bb 9>;

<bb 7>:
  if (secure_9(D) != 0)
    goto <bb 9>;
  else
    goto <bb 8>;

<bb 8>:

<bb 9>:
  # D.42974_1 = PHI <"UDP/TLS/RTP/SAVPF"(5), "RTP/SAVPF"(6), "RTP/SAVP"(7), "RTP/AVP"(8)>
  return D.42974_1;

}



;; Function add_audio_codec.constprop.7 (add_audio_codec.constprop.7)

add_audio_codec.constprop.7 (struct sdp_rtpmap_t * map, int ptime, char * buf)
{
  const char * D.48401;
  <unnamed-unsigned:7> D.48400;
  uint32_t D.48399;
  uint32_t D.48398;
  int D.48397;
  const char * D.48396;
  int D.48395;
  int D.48394;
  long unsigned int D.48393;
  switch_status_t D.48392;
  int D.48391;
  int D.48390;
  size_t D.48389;
  char * D.48388;
  size_t D.48387;
  switch_size_t D.48386;
  uint32_t map_bit_rate;
  char ptstr[20];
  char ratestr[20];
  char bitstr[20];
  struct switch_codec_fmtp_t codec_fmtp;
  unsigned char csui.173;
  int D.48384;
  const char D.48383;

<bb 2>:
  # DEBUG buflen => 1024
  # DEBUG codec_ms => ptime_1(D)
  # DEBUG map_bit_rate => 0
  ptstr = "";
  ratestr = "";
  bitstr = "";
  codec_fmtp = {};
  if (ptime_1(D) == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.48401_3 = map_2(D)->rm_encoding;
  D.48400_4 = map_2(D)->rm_pt;
  D.48399_5 = (uint32_t) D.48400_4;
  D.48398_6 = switch_default_ptime (D.48401_3, D.48399_5);
  ptime_7 = (int) D.48398_6;
  # DEBUG codec_ms => ptime_7

<bb 4>:
  # ptime_40 = PHI <ptime_1(D)(2), ptime_7(3)>
  # DEBUG codec_ms => ptime_40
  D.48400_8 = map_2(D)->rm_pt;
  csui.173_9 = (unsigned char) D.48400_8;
  # DEBUG payload => csui.173_9
  if (csui.173_9 <= 18)
    goto <bb 5> (<L0>);
  else
    goto <bb 6> (<L1>);

<L0>:
  map_bit_rate_10 = CSWTCH.174[csui.173_9];

  # map_bit_rate_41 = PHI <0(4), map_bit_rate_10(5)>
<L1>:
<L2>:
  # DEBUG map_bit_rate => NULL
  if (ptime_1(D) == 0)
    goto <bb 7>;
  else
    goto <bb 9>;

<bb 7>:
  D.48401_11 = map_2(D)->rm_encoding;
  D.48397_12 = strcasecmp (D.48401_11, "g723");
  if (D.48397_12 == 0)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  # DEBUG codec_ms => 30
  # DEBUG ptime => 30

<bb 9>:
  # ptime_42 = PHI <ptime_40(6), ptime_40(7), 30(8)>
  # DEBUG codec_ms => ptime_42
  D.48396_13 = map_2(D)->rm_fmtp;
  # DEBUG s => D.48396_13
  if (D.48396_13 == 0B)
    goto <bb 12>;
  else
    goto <bb 10>;

<bb 10>:
  D.48383_14 = *D.48396_13;
  if (D.48383_14 == 0)
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:

<bb 12>:
  # D.48384_15 = PHI <1(9), 1(10), 0(11)>
  if (D.48384_15 != 0)
    goto <bb 13>;
  else
    goto <bb 16>;

<bb 13>:
  D.48401_16 = map_2(D)->rm_encoding;
  D.48395_17 = strcasecmp (D.48401_16, "ilbc");
  if (D.48395_17 == 0)
    goto <bb 21>;
  else
    goto <bb 14>;

<bb 14>:
  D.48401_18 = map_2(D)->rm_encoding;
  D.48394_19 = strcasecmp (D.48401_18, "isac");
  if (D.48394_19 == 0)
    goto <bb 15>;
  else
    goto <bb 21>;

<bb 15>:
  # DEBUG codec_ms => 30
  # DEBUG ptime => 30
  # DEBUG map_bit_rate => 32000
  goto <bb 21>;

<bb 16>:
  D.48401_20 = map_2(D)->rm_encoding;
  D.48396_21 = map_2(D)->rm_fmtp;
  D.48393_22 = map_2(D)->rm_rate;
  D.48392_23 = switch_core_codec_parse_fmtp (D.48401_20, D.48396_21, D.48393_22, &codec_fmtp);
  if (D.48392_23 == 0)
    goto <bb 17>;
  else
    goto <bb 21>;

<bb 17>:
  D.48391_24 = codec_fmtp.bits_per_second;
  if (D.48391_24 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.48391_25 = codec_fmtp.bits_per_second;
  map_bit_rate_26 = (uint32_t) D.48391_25;
  # DEBUG map_bit_rate => map_bit_rate_26

<bb 19>:
  # map_bit_rate_43 = PHI <map_bit_rate_41(17), map_bit_rate_26(18)>
  # DEBUG map_bit_rate => map_bit_rate_43
  D.48390_27 = codec_fmtp.microseconds_per_packet;
  if (D.48390_27 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.48390_28 = codec_fmtp.microseconds_per_packet;
  ptime_29 = D.48390_28 / 1000;
  # DEBUG codec_ms => ptime_29

<bb 21>:
  # ptime_32 = PHI <30(13), ptime_42(14), 30(15), ptime_42(16), ptime_42(19), ptime_29(20)>
  # map_bit_rate_33 = PHI <13330(13), map_bit_rate_41(14), 32000(15), map_bit_rate_41(16), map_bit_rate_43(19), map_bit_rate_43(20)>
  # DEBUG map_bit_rate => map_bit_rate_33
  # DEBUG codec_ms => ptime_32
  D.48393_30 = map_2(D)->rm_rate;
  if (D.48393_30 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.48393_31 = map_2(D)->rm_rate;
  switch_snprintf (&ratestr, 20, "@%uh", D.48393_31);

<bb 23>:
  if (ptime_32 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  switch_snprintf (&ptstr, 20, "@%di", ptime_32);

<bb 25>:
  if (map_bit_rate_33 != 0)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  switch_snprintf (&bitstr, 20, "@%db", map_bit_rate_33);

<bb 27>:
  D.48389_35 = strlen (buf_34(D));
  D.48388_36 = buf_34(D) + D.48389_35;
  D.48387_37 = strlen (buf_34(D));
  D.48386_38 = 1024 - D.48387_37;
  D.48401_39 = map_2(D)->rm_encoding;
  switch_snprintf (D.48388_36, D.48386_38, ",%s%s%s%s", D.48401_39, &ratestr, &ptstr, &bitstr);
  return;

}



;; Function get_channels (get_channels)

get_channels (const char * name, int dft)
{
  int D.48616;
  switch_bool_t D.48615;
  int D.48614;
  int D.48613;
  int D.48612;
  int D.48611;
  int D.48610;
  int D.48609;
  int D.48608;
  int D.48606;
  int D.42982;
  char * D.42978;

<bb 2>:
  D.42978_3 = switch_core_get_variable ("NDLB_broken_opus_sdp");
  # DEBUG expr => D.42978_3
  if (D.42978_3 != 0B)
    goto <bb 3>;
  else
    goto <bb 12>;

<bb 3>:
  D.48608_15 = strcasecmp (D.42978_3, "yes");
  if (D.48608_15 == 0)
    goto <bb 13>;
  else
    goto <bb 4>;

<bb 4>:
  D.48609_16 = strcasecmp (D.42978_3, "on");
  if (D.48609_16 == 0)
    goto <bb 13>;
  else
    goto <bb 5>;

<bb 5>:
  D.48610_17 = strcasecmp (D.42978_3, "true");
  if (D.48610_17 == 0)
    goto <bb 13>;
  else
    goto <bb 6>;

<bb 6>:
  D.48611_18 = strcasecmp (D.42978_3, "t");
  if (D.48611_18 == 0)
    goto <bb 13>;
  else
    goto <bb 7>;

<bb 7>:
  D.48612_19 = strcasecmp (D.42978_3, "enabled");
  if (D.48612_19 == 0)
    goto <bb 13>;
  else
    goto <bb 8>;

<bb 8>:
  D.48613_20 = strcasecmp (D.42978_3, "active");
  if (D.48613_20 == 0)
    goto <bb 13>;
  else
    goto <bb 9>;

<bb 9>:
  D.48614_21 = strcasecmp (D.42978_3, "allow");
  if (D.48614_21 == 0)
    goto <bb 13>;
  else
    goto <bb 10>;

<bb 10>:
  D.48615_22 = switch_is_number (D.42978_3);
  if (D.48615_22 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  # DEBUG __nptr => D.42978_3
  D.48616_23 = strtol (D.42978_3, 0B, 10);
  if (D.48616_23 != 0)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:

<bb 13>:
  # D.48606_24 = PHI <1(3), 1(4), 1(5), 1(6), 1(7), 1(8), 1(9), 1(11), 0(12)>
  D.48606_29 = D.48606_24;
  D.48606_4 = D.48606_29;
  if (D.48606_4 == 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.42982_6 = strcasecmp (name_5(D), "opus");
  if (D.42982_6 == 0)
    goto <bb 18>;
  else
    goto <bb 15>;

<bb 15>:
  if (dft_8(D) != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:

<bb 17>:
  # dft_2 = PHI <dft_8(D)(16), 1(15)>

<bb 18>:
  # dft_1 = PHI <2(14), dft_2(17)>
  return dft_1;

}



;; Function switch_core_media_build_crypto.constprop.8 (switch_core_media_build_crypto.constprop.8)

switch_core_media_build_crypto.constprop.8 (struct switch_media_handle_t * smh, switch_media_type_t type, int index, switch_rtp_crypto_key_type_t ctype, int force)
{
  int D.48632;
  switch_bool_t D.48631;
  int D.48630;
  int D.48629;
  int D.48628;
  int D.48627;
  int D.48626;
  int D.48625;
  int D.48624;
  int D.48622;
  struct switch_core_session_t * D.48368;
  unsigned char D.48367;
  int D.48366;
  uint32_t D.48365;
  switch_size_t D.48364;
  char D.48363;
  unsigned int D.48362;
  char * D.48361;
  char * D.48360;
  struct switch_channel_t * D.48359;
  char * D.48358;
  char * iftmp.164;
  char * iftmp.165;
  struct switch_core_media_params_t * D.48355;
  switch_core_media_NDLB_t D.48354;
  unsigned int D.48353;
  unsigned char b64_key[512];
  unsigned char * key;
  const char * val;
  struct switch_channel_t * channel;
  char * p;
  struct switch_rtp_engine_t * engine;
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_build_crypto";
  static const char __func__[31] = "switch_core_media_build_crypto";
  static const char __func__[31] = "switch_core_media_build_crypto";
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_build_crypto";

<bb 2>:
  # DEBUG direction => 0
  b64_key = "";
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 869, &__PRETTY_FUNCTION__);

<bb 4>:
  D.48368_2 = smh_1(D)->session;
  channel_3 = switch_core_session_get_channel (D.48368_2);
  # DEBUG channel => channel_3
  engine_5 = &smh_1(D)->engines[type_4(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_5
  if (force_6(D) == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.48367_8 = engine_5->ssec[ctype_7(D)].local_raw_key[0];
  if (D.48367_8 != 0)
    goto <bb 33>;
  else
    goto <bb 6>;

<bb 6>:
  key_9 = &engine_5->ssec[ctype_7(D)].local_raw_key;
  # DEBUG key => key_9
  # DEBUG key => key_9
  D.48366_11 = SUITES[ctype_7(D)].keylen;
  D.48365_12 = (uint32_t) D.48366_11;
  switch_rtp_get_random (key_9, D.48365_12);
  D.48366_14 = SUITES[ctype_7(D)].keylen;
  D.48364_15 = (switch_size_t) D.48366_14;
  switch_b64_encode (key_9, D.48364_15, &b64_key, 512);
  p_16 = strrchr (&b64_key, 61);
  # DEBUG p => p_16
  goto <bb 8>;

<bb 7>:
  *p_17 = 0;
  p_18 = p_17 + -1;
  # DEBUG p => p_18

<bb 8>:
  # p_17 = PHI <p_16(6), p_18(7)>
  # DEBUG p => p_17
  if (p_17 != 0B)
    goto <bb 9>;
  else
    goto <bb 11>;

<bb 9>:
  D.48363_19 = *p_17;
  if (D.48363_19 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.48363_20 = *p_17;
  if (D.48363_20 == 61)
    goto <bb 7>;
  else
    goto <bb 11>;

<bb 11>:
  if (index_21(D) == 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  D.48362_22 = ctype_7(D) + 1;
  index_23 = (int) D.48362_22;
  # DEBUG index => index_23

<bb 13>:
  # index_26 = PHI <index_21(D)(11), index_23(12)>
  # DEBUG index => index_26
  D.48368_24 = smh_1(D)->session;
  D.48361_25 = SUITES[ctype_7(D)].name;
  D.48360_27 = switch_core_session_sprintf (D.48368_24, "%d %s inline:%s", index_26, D.48361_25, &b64_key);
  engine_5->ssec[ctype_7(D)].local_crypto_key = D.48360_27;
  D.48368_28 = smh_1(D)->session;
  D.48359_29 = D.48368_28->channel;
  D.48358_30 = engine_5->ssec[ctype_7(D)].local_crypto_key;
  if (type_4(D) == 1)
    goto <bb 15>;
  else
    goto <bb 14>;

<bb 14>:

<bb 15>:
  # iftmp.164_31 = PHI <"video"(13), "audio"(14)>
  switch_channel_set_variable_name_printf (D.48359_29, D.48358_30, "rtp_last_%s_local_crypto_key", iftmp.164_31);
  D.48368_32 = smh_1(D)->session;
  D.48359_33 = D.48368_32->channel;
  switch_channel_set_flag_value (D.48359_33, 92, 1);
  D.48368_34 = smh_1(D)->session;
  if (type_4(D) == 1)
    goto <bb 17>;
  else
    goto <bb 16>;

<bb 16>:

<bb 17>:
  # iftmp.165_36 = PHI <"video"(15), "audio"(16)>
  D.48358_35 = engine_5->ssec[ctype_7(D)].local_crypto_key;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 916, D.48368_34, 7, "Set Local %s crypto Key [%s]\n", iftmp.165_36, D.48358_35);
  D.48355_37 = smh_1(D)->mparams;
  D.48354_38 = D.48355_37->ndlb;
  D.48353_39 = D.48354_38 & 8;
  if (D.48353_39 == 0)
    goto <bb 18>;
  else
    goto <bb 32>;

<bb 18>:
  val_40 = switch_channel_get_variable_dup (channel_3, "NDLB_support_asterisk_missing_srtp_auth", 1, -1);
  # DEBUG val => val_40
  if (val_40 == 0B)
    goto <bb 31>;
  else
    goto <bb 19>;

<bb 19>:
  # DEBUG expr => val_40
  if (val_40 != 0B)
    goto <bb 20>;
  else
    goto <bb 29>;

<bb 20>:
  D.48624_60 = strcasecmp (val_40, "yes");
  if (D.48624_60 == 0)
    goto <bb 30>;
  else
    goto <bb 21>;

<bb 21>:
  D.48625_61 = strcasecmp (val_40, "on");
  if (D.48625_61 == 0)
    goto <bb 30>;
  else
    goto <bb 22>;

<bb 22>:
  D.48626_62 = strcasecmp (val_40, "true");
  if (D.48626_62 == 0)
    goto <bb 30>;
  else
    goto <bb 23>;

<bb 23>:
  D.48627_63 = strcasecmp (val_40, "t");
  if (D.48627_63 == 0)
    goto <bb 30>;
  else
    goto <bb 24>;

<bb 24>:
  D.48628_64 = strcasecmp (val_40, "enabled");
  if (D.48628_64 == 0)
    goto <bb 30>;
  else
    goto <bb 25>;

<bb 25>:
  D.48629_65 = strcasecmp (val_40, "active");
  if (D.48629_65 == 0)
    goto <bb 30>;
  else
    goto <bb 26>;

<bb 26>:
  D.48630_66 = strcasecmp (val_40, "allow");
  if (D.48630_66 == 0)
    goto <bb 30>;
  else
    goto <bb 27>;

<bb 27>:
  D.48631_67 = switch_is_number (val_40);
  if (D.48631_67 != 0)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  # DEBUG __nptr => val_40
  D.48632_68 = strtol (val_40, 0B, 10);
  if (D.48632_68 != 0)
    goto <bb 30>;
  else
    goto <bb 29>;

<bb 29>:

<bb 30>:
  # D.48622_69 = PHI <1(20), 1(21), 1(22), 1(23), 1(24), 1(25), 1(26), 1(28), 0(29)>
  D.48622_72 = D.48622_69;
  D.48622_41 = D.48622_72;
  if (D.48622_41 == 0)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  engine_5->ssec[ctype_7(D)].crypto_type = ctype_7(D);
  goto <bb 33>;

<bb 32>:
  engine_5->ssec[ctype_7(D)].crypto_type = 8;

<bb 33>:
  return 0;

}



;; Function switch_core_session_parse_crypto_prefs (switch_core_session_parse_crypto_prefs)

switch_core_session_parse_crypto_prefs (struct switch_core_session_t * session)
{
  int D.48683;
  switch_bool_t D.48682;
  int D.48681;
  int D.48680;
  int D.48679;
  int D.48678;
  int D.48677;
  int D.48676;
  int D.48675;
  int D.48673;
  int D.48671;
  switch_bool_t D.48670;
  int D.48669;
  int D.48668;
  int D.48667;
  int D.48666;
  int D.48665;
  int D.48664;
  int D.48663;
  int D.48661;
  const char D.47288;
  int D.47287;
  const char D.47284;
  int D.47283;
  const char D.47280;
  int D.47279;
  const char D.47276;
  int D.47275;
  int ok;
  static const char __func__[39] = "switch_core_session_parse_crypto_prefs";
  int k;
  int j;
  int i;
  int argc;
  char * fields[10];
  struct switch_media_handle_t * smh;
  char * suites;
  const char * val;
  const char * var;
  switch_rtp_crypto_key_type_t D.42582;
  switch_rtp_crypto_key_type_t D.42579;
  int D.42576;
  char * D.42575;
  char * D.42574;
  unsigned int D.42573;
  switch_rtp_crypto_mode_t D.42569;
  int D.42565;
  int D.42561;
  int D.42552;
  uint32_t D.42550;
  switch_call_direction_t D.42548;
  switch_call_direction_t D.42529;
  uint32_t D.42526;
  struct switch_channel_t * D.42525;

<bb 2>:
  # DEBUG var => 0B
  # DEBUG val => 0B
  # DEBUG suites => 0B
  # DEBUG argc => 0
  # DEBUG i => 0
  # DEBUG j => 0
  # DEBUG k => 0
  smh_22 = session_21(D)->media_handle;
  # DEBUG smh => smh_22
  if (smh_22 == 0B)
    goto <bb 73>;
  else
    goto <bb 3>;

<bb 3>:
  D.42525_23 = session_21(D)->channel;
  D.42526_24 = switch_channel_test_flag (D.42525_23, 106);
  if (D.42526_24 != 0)
    goto <bb 73>;
  else
    goto <bb 4>;

<bb 4>:
  D.42525_25 = session_21(D)->channel;
  D.42529_26 = switch_channel_direction (D.42525_25);
  if (D.42529_26 == 0)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG var => "rtp_secure_media_outbound"

<bb 6>:
  # var_1 = PHI <"rtp_secure_media_inbound"(4), "rtp_secure_media_outbound"(5)>
  # DEBUG var => var_1
  D.42525_29 = session_21(D)->channel;
  val_30 = switch_channel_get_variable_dup (D.42525_29, var_1, 1, -1);
  # DEBUG val => val_30
  if (val_30 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  # DEBUG var => "rtp_secure_media"
  D.42525_32 = session_21(D)->channel;
  val_33 = switch_channel_get_variable_dup (D.42525_32, "rtp_secure_media", 1, -1);
  # DEBUG val => val_33

<bb 8>:
  # var_2 = PHI <var_1(6), "rtp_secure_media"(7)>
  # val_3 = PHI <val_30(6), val_33(7)>
  # DEBUG val => val_3
  # DEBUG var => var_2
  # DEBUG s => val_3
  if (val_3 == 0B)
    goto <bb 11>;
  else
    goto <bb 9>;

<bb 9>:
  D.47276_100 = *val_3;
  if (D.47276_100 == 0)
    goto <bb 11>;
  else
    goto <bb 10>;

<bb 10>:

<bb 11>:
  # D.47275_101 = PHI <1(8), 1(9), 0(10)>
  if (D.47275_101 == 0)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 12>:
  suites_35 = __builtin_strchr (val_3, 58);
  # DEBUG suites => suites_35
  if (suites_35 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  *suites_35 = 0;
  suites_36 = suites_35 + 1;
  # DEBUG suites => suites_36

<bb 14>:
  # suites_5 = PHI <0B(11), suites_35(12), suites_36(13)>
  # DEBUG suites => suites_5
  # DEBUG s => suites_5
  if (suites_5 == 0B)
    goto <bb 17>;
  else
    goto <bb 15>;

<bb 15>:
  D.47280_102 = MEM[(const char *)suites_5];
  if (D.47280_102 == 0)
    goto <bb 17>;
  else
    goto <bb 16>;

<bb 16>:

<bb 17>:
  # D.47279_103 = PHI <1(14), 1(15), 0(16)>
  if (D.47279_103 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.42525_38 = session_21(D)->channel;
  suites_39 = switch_channel_get_variable_dup (D.42525_38, "rtp_secure_media_suites", 1, -1);
  # DEBUG suites => suites_39

<bb 19>:
  # suites_6 = PHI <suites_5(17), suites_39(18)>
  # DEBUG suites => suites_6
  # DEBUG s => val_3
  if (val_3 == 0B)
    goto <bb 22>;
  else
    goto <bb 20>;

<bb 20>:
  D.47284_104 = *val_3;
  if (D.47284_104 == 0)
    goto <bb 22>;
  else
    goto <bb 21>;

<bb 21>:

<bb 22>:
  # D.47283_105 = PHI <1(19), 1(20), 0(21)>
  if (D.47283_105 != 0)
    goto <bb 23>;
  else
    goto <bb 26>;

<bb 23>:
  D.42525_41 = session_21(D)->channel;
  D.42548_42 = switch_channel_direction (D.42525_41);
  if (D.42548_42 == 0)
    goto <bb 24>;
  else
    goto <bb 26>;

<bb 24>:
  D.42525_43 = session_21(D)->channel;
  D.42550_44 = switch_channel_test_flag (D.42525_43, 84);
  if (D.42550_44 == 0)
    goto <bb 26>;
  else
    goto <bb 25>;

<bb 25>:

<bb 26>:
  # val_4 = PHI <val_3(22), "optional"(24), "forbidden"(25), "forbidden"(23)>
  # DEBUG val => val_4
  D.42552_47 = strcasecmp (val_4, "optional");
  if (D.42552_47 == 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  smh_22->crypto_mode = 0;
  goto <bb 56>;

<bb 28>:
  # DEBUG expr => val_4
  if (val_4 != 0B)
    goto <bb 29>;
  else
    goto <bb 38>;

<bb 29>:
  D.48663_112 = strcasecmp (val_4, "yes");
  if (D.48663_112 == 0)
    goto <bb 39>;
  else
    goto <bb 30>;

<bb 30>:
  D.48664_113 = strcasecmp (val_4, "on");
  if (D.48664_113 == 0)
    goto <bb 39>;
  else
    goto <bb 31>;

<bb 31>:
  D.48665_114 = strcasecmp (val_4, "true");
  if (D.48665_114 == 0)
    goto <bb 39>;
  else
    goto <bb 32>;

<bb 32>:
  D.48666_115 = strcasecmp (val_4, "t");
  if (D.48666_115 == 0)
    goto <bb 39>;
  else
    goto <bb 33>;

<bb 33>:
  D.48667_116 = strcasecmp (val_4, "enabled");
  if (D.48667_116 == 0)
    goto <bb 39>;
  else
    goto <bb 34>;

<bb 34>:
  D.48668_117 = strcasecmp (val_4, "active");
  if (D.48668_117 == 0)
    goto <bb 39>;
  else
    goto <bb 35>;

<bb 35>:
  D.48669_118 = strcasecmp (val_4, "allow");
  if (D.48669_118 == 0)
    goto <bb 39>;
  else
    goto <bb 36>;

<bb 36>:
  D.48670_119 = switch_is_number (val_4);
  if (D.48670_119 != 0)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  # DEBUG __nptr => val_4
  D.48671_120 = strtol (val_4, 0B, 10);
  if (D.48671_120 != 0)
    goto <bb 39>;
  else
    goto <bb 38>;

<bb 38>:

<bb 39>:
  # D.48661_121 = PHI <1(29), 1(30), 1(31), 1(32), 1(33), 1(34), 1(35), 1(37), 0(38)>
  D.48661_138 = D.48661_121;
  D.48661_48 = D.48661_138;
  if (D.48661_48 != 0)
    goto <bb 41>;
  else
    goto <bb 40>;

<bb 40>:
  D.42561_49 = strcasecmp (val_4, "mandatory");
  if (D.42561_49 == 0)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  smh_22->crypto_mode = 1;
  goto <bb 56>;

<bb 42>:
  smh_22->crypto_mode = 2;
  # DEBUG expr => val_4
  if (val_4 != 0B)
    goto <bb 43>;
  else
    goto <bb 52>;

<bb 43>:
  D.48675_122 = strcasecmp (val_4, "no");
  if (D.48675_122 == 0)
    goto <bb 53>;
  else
    goto <bb 44>;

<bb 44>:
  D.48676_123 = strcasecmp (val_4, "off");
  if (D.48676_123 == 0)
    goto <bb 53>;
  else
    goto <bb 45>;

<bb 45>:
  D.48677_124 = strcasecmp (val_4, "false");
  if (D.48677_124 == 0)
    goto <bb 53>;
  else
    goto <bb 46>;

<bb 46>:
  D.48678_125 = strcasecmp (val_4, "f");
  if (D.48678_125 == 0)
    goto <bb 53>;
  else
    goto <bb 47>;

<bb 47>:
  D.48679_126 = strcasecmp (val_4, "disabled");
  if (D.48679_126 == 0)
    goto <bb 53>;
  else
    goto <bb 48>;

<bb 48>:
  D.48680_127 = strcasecmp (val_4, "inactive");
  if (D.48680_127 == 0)
    goto <bb 53>;
  else
    goto <bb 49>;

<bb 49>:
  D.48681_128 = strcasecmp (val_4, "disallow");
  if (D.48681_128 == 0)
    goto <bb 53>;
  else
    goto <bb 50>;

<bb 50>:
  D.48682_129 = switch_is_number (val_4);
  if (D.48682_129 != 0)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  # DEBUG __nptr => val_4
  D.48683_130 = strtol (val_4, 0B, 10);
  if (D.48683_130 == 0)
    goto <bb 53>;
  else
    goto <bb 52>;

<bb 52>:

<bb 53>:
  # D.48673_131 = PHI <1(43), 1(44), 1(45), 1(46), 1(47), 1(48), 1(49), 1(51), 0(52)>
  D.48673_141 = D.48673_131;
  D.48673_50 = D.48673_141;
  if (D.48673_50 == 0)
    goto <bb 54>;
  else
    goto <bb 56>;

<bb 54>:
  D.42565_51 = strcasecmp (val_4, "forbidden");
  if (D.42565_51 != 0)
    goto <bb 55>;
  else
    goto <bb 56>;

<bb 55>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1123, session_21(D), 4, "INVALID VALUE FOR %s defaulting to \'forbidden\'\n", var_2);

<bb 56>:
  D.42569_52 = smh_22->crypto_mode;
  if (D.42569_52 != 2)
    goto <bb 57>;
  else
    goto <bb 61>;

<bb 57>:
  # DEBUG s => suites_6
  if (suites_6 == 0B)
    goto <bb 60>;
  else
    goto <bb 58>;

<bb 58>:
  D.47288_106 = MEM[(const char *)suites_6];
  if (D.47288_106 == 0)
    goto <bb 60>;
  else
    goto <bb 59>;

<bb 59>:

<bb 60>:
  # D.47287_107 = PHI <1(57), 1(58), 0(59)>
  if (D.47287_107 == 0)
    goto <bb 62>;
  else
    goto <bb 61>;

<bb 61>:
  i_67 = 0;
  k_64 = 0;
  goto <bb 72>;

<bb 62>:
  D.42573_54 = switch_separate_string (suites_6, 58, &fields, 10);
  argc_55 = (int) D.42573_54;
  # DEBUG argc => argc_55
  # DEBUG i => 0
  goto <bb 70>;

<bb 63>:
  D.42574_59 = fields[i_7];
  D.42575_60 = SUITES[j_9].name;
  D.42576_61 = strcasecmp (D.42574_59, D.42575_60);
  if (D.42576_61 == 0)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  D.42579_62 = SUITES[j_9].type;
  smh_22->crypto_suite_order[k_11] = D.42579_62;
  k_63 = k_11 + 1;
  # DEBUG k => k_63
  # DEBUG ok => 1
  goto <bb 67>;

<bb 65>:
  j_65 = j_9 + 1;
  # DEBUG j => j_65

<bb 66>:
  # j_9 = PHI <0(70), j_65(65)>
  # DEBUG j => j_9
  if (j_9 <= 8)
    goto <bb 63>;
  else
    goto <bb 67>;

<bb 67>:
  # k_10 = PHI <k_63(64), k_11(66)>
  # ok_13 = PHI <1(64), 0(66)>
  # DEBUG ok => ok_13
  # DEBUG k => k_10
  if (ok_13 == 0)
    goto <bb 68>;
  else
    goto <bb 69>;

<bb 68>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1142, session_21(D), 4, "INVALID SUITE SUPPLIED\n");

<bb 69>:
  i_66 = i_7 + 1;
  # DEBUG i => i_66

<bb 70>:
  # i_7 = PHI <0(62), i_66(69)>
  # k_11 = PHI <0(62), k_10(69)>
  # DEBUG k => k_11
  # DEBUG i => i_7
  if (i_7 < argc_55)
    goto <bb 66>;
  else
    goto <bb 73>;

<bb 71>:
  D.42582_68 = SUITES[i_8].type;
  smh_22->crypto_suite_order[k_12] = D.42582_68;
  k_69 = k_12 + 1;
  # DEBUG k => k_69
  i_70 = i_8 + 1;
  # DEBUG i => i_70

<bb 72>:
  # i_8 = PHI <0(61), i_70(71)>
  # k_12 = PHI <0(61), k_69(71)>
  # DEBUG k => k_12
  # DEBUG i => i_8
  if (i_8 <= 8)
    goto <bb 71>;
  else
    goto <bb 73>;

<bb 73>:
  return;

}



;; Function switch_core_media_crypto_str2type (switch_core_media_crypto_str2type)

switch_core_media_crypto_str2type (const char * str)
{
  int i;
  switch_rtp_crypto_key_type_t D.47214;
  int D.47211;
  size_t D.47210;
  char * D.47209;

<bb 2>:
  # DEBUG i => 0
  goto <bb 6>;

<bb 3>:
  D.47209_5 = SUITES[i_1].name;
  D.47210_6 = strlen (D.47209_5);
  D.47211_8 = strncasecmp (str_7(D), D.47209_5, D.47210_6);
  if (D.47211_8 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.47214_9 = SUITES[i_1].type;
  goto <bb 7>;

<bb 5>:
  i_10 = i_1 + 1;
  # DEBUG i => i_10

<bb 6>:
  # i_1 = PHI <0(2), i_10(5)>
  # DEBUG i => i_1
  if (i_1 <= 8)
    goto <bb 3>;
  else
    goto <bb 7>;

<bb 7>:
  # D.47214_2 = PHI <D.47214_9(4), 9(6)>
  return D.47214_2;

}



;; Function switch_core_session_get_recovery_crypto_key (switch_core_session_get_recovery_crypto_key)

switch_core_session_get_recovery_crypto_key (struct switch_core_session_t * session, switch_media_type_t type)
{
  int tv;
  static const char __func__[44] = "switch_core_session_get_recovery_crypto_key";
  char * ctypevar;
  char * tagvar;
  char * keyvar;
  struct switch_rtp_engine_t * engine;
  const char * tmp;
  char * D.40319;
  switch_rtp_crypto_key_type_t D.40318;
  switch_rtp_crypto_key_type_t D.40317;
  struct switch_channel_t * D.40312;
  struct switch_media_handle_t * D.40304;

<bb 2>:
  D.40304_5 = session_4(D)->media_handle;
  if (D.40304_5 == 0B)
    goto <bb 12>;
  else
    goto <bb 3>;

<bb 3>:
  D.40304_6 = session_4(D)->media_handle;
  engine_10 = &D.40304_6->engines[type_8(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_10
  if (type_8(D) == 0)
    goto <bb 5>;
  else
    goto <bb 4>;

<bb 4>:
  # DEBUG keyvar => "srtp_remote_video_crypto_key"
  # DEBUG tagvar => "srtp_remote_video_crypto_tag"
  # DEBUG ctypevar => "srtp_remote_video_crypto_type"

<bb 5>:
  # keyvar_1 = PHI <"srtp_remote_audio_crypto_key"(3), "srtp_remote_video_crypto_key"(4)>
  # tagvar_2 = PHI <"srtp_remote_audio_crypto_tag"(3), "srtp_remote_video_crypto_tag"(4)>
  # ctypevar_3 = PHI <"srtp_remote_audio_crypto_type"(3), "srtp_remote_video_crypto_type"(4)>
  # DEBUG ctypevar => ctypevar_3
  # DEBUG tagvar => tagvar_2
  # DEBUG keyvar => keyvar_1
  D.40312_17 = session_4(D)->channel;
  tmp_18 = switch_channel_get_variable_dup (D.40312_17, keyvar_1, 1, -1);
  # DEBUG tmp => tmp_18
  if (tmp_18 != 0B)
    goto <bb 6>;
  else
    goto <bb 12>;

<bb 6>:
  D.40312_19 = session_4(D)->channel;
  tmp_20 = switch_channel_get_variable_dup (D.40312_19, ctypevar_3, 1, -1);
  # DEBUG tmp => tmp_20
  if (tmp_20 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40317_21 = switch_core_media_crypto_str2type (tmp_20);
  engine_10->crypto_type = D.40317_21;

<bb 8>:
  D.40318_22 = engine_10->crypto_type;
  D.40319_23 = switch_core_perform_session_strdup (session_4(D), tmp_20, "src/switch_core_media.c", &__func__, 1015);
  engine_10->ssec[D.40318_22].remote_crypto_key = D.40319_23;
  D.40312_24 = session_4(D)->channel;
  tmp_25 = switch_channel_get_variable_dup (D.40312_24, tagvar_2, 1, -1);
  # DEBUG tmp => tmp_25
  if (tmp_25 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  # DEBUG __nptr => tmp_25
  tv_43 = strtol (tmp_25, 0B, 10);
  # DEBUG tv => NULL
  D.40318_27 = engine_10->crypto_type;
  engine_10->ssec[D.40318_27].crypto_tag = tv_43;
  goto <bb 11>;

<bb 10>:
  D.40318_28 = engine_10->crypto_type;
  engine_10->ssec[D.40318_28].crypto_tag = 1;

<bb 11>:
  D.40312_29 = session_4(D)->channel;
  switch_channel_set_flag_value (D.40312_29, 92, 1);

<bb 12>:
  return;

}



;; Function switch_core_media_crypto_type2str (switch_core_media_crypto_type2str)

switch_core_media_crypto_type2str (switch_rtp_crypto_key_type_t type)
{
  const char * D.47207;

<bb 2>:
  if (type_1(D) > 8)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("type < CRYPTO_INVALID", "src/switch_core_media.c", 222, &__PRETTY_FUNCTION__);

<bb 4>:
  D.47207_2 = SUITES[type_1(D)].name;
  return D.47207_2;

}



;; Function switch_core_media_crypto_keylen (switch_core_media_crypto_keylen)

switch_core_media_crypto_keylen (switch_rtp_crypto_key_type_t type)
{
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_crypto_keylen";
  int D.47203;

<bb 2>:
  if (type_1(D) > 8)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("type < CRYPTO_INVALID", "src/switch_core_media.c", 229, &__PRETTY_FUNCTION__);

<bb 4>:
  D.47203_2 = SUITES[type_1(D)].keylen;
  return D.47203_2;

}



;; Function switch_core_media_pass_zrtp_hash2 (switch_core_media_pass_zrtp_hash2)

switch_core_media_pass_zrtp_hash2 (struct switch_core_session_t * aleg_session, struct switch_core_session_t * bleg_session)
{
<bb 2>:
  _switch_core_media_pass_zrtp_hash2 (aleg_session_1(D), bleg_session_2(D), 0);
  _switch_core_media_pass_zrtp_hash2 (aleg_session_1(D), bleg_session_2(D), 1);
  return;

}



;; Function switch_core_media_pass_zrtp_hash (switch_core_media_pass_zrtp_hash)

switch_core_media_pass_zrtp_hash (struct switch_core_session_t * session)
{
  static const char __func__[33] = "switch_core_media_pass_zrtp_hash";
  struct switch_core_session_t * other_session;
  struct switch_channel_t * channel;
  struct switch_core_session_t * other_session.172;
  struct switch_core_session_t * D.47170;
  struct switch_core_session_t * D.47169;
  switch_status_t D.47166;
  struct switch_core_session_t * D.47165;
  uint32_t D.47162;
  struct switch_core_session_t * D.47161;

<bb 2>:
  channel_2 = switch_core_session_get_channel (session_1(D));
  # DEBUG channel => channel_2
  D.47161_3 = switch_channel_get_session (channel_2);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 289, D.47161_3, 101, "Deciding whether to pass zrtp-hash between legs\n");
  D.47162_4 = switch_channel_test_flag (channel_2, 73);
  if (D.47162_4 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.47165_5 = switch_channel_get_session (channel_2);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 291, D.47165_5, 101, "CF_ZRTP_PASSTHRU_REQ not set, so not propagating zrtp-hash\n");
  goto <bb 7>;

<bb 4>:
  D.47166_6 = switch_core_session_perform_get_partner (session_1(D), &other_session, "src/switch_core_media.c", &__func__, 293);
  if (D.47166_6 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47169_7 = switch_channel_get_session (channel_2);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 294, D.47169_7, 101, "No partner channel found, so not propagating zrtp-hash\n");
  goto <bb 7>;

<bb 6>:
  D.47170_8 = switch_channel_get_session (channel_2);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 297, D.47170_8, 101, "Found peer channel; propagating zrtp-hash if set\n");
  other_session.172_9 = other_session;
  switch_core_media_pass_zrtp_hash2 (session_1(D), other_session.172_9);
  other_session.172_10 = other_session;
  switch_core_session_rwunlock (other_session.172_10);

<bb 7>:
  return;

}



;; Function switch_core_media_get_zrtp_hash (switch_core_media_get_zrtp_hash)

switch_core_media_get_zrtp_hash (struct switch_core_session_t * session, switch_media_type_t type, switch_bool_t local)
{
  struct switch_rtp_engine_t * engine;
  const char * D.47155;
  struct switch_media_handle_t * D.47152;

<bb 2>:
  D.47152_3 = session_2(D)->media_handle;
  if (D.47152_3 == 0B)
    goto <bb 6>;
  else
    goto <bb 3>;

<bb 3>:
  D.47152_5 = session_2(D)->media_handle;
  engine_9 = &D.47152_5->engines[type_7(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_9
  if (local_10(D) != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.47155_11 = engine_9->local_sdp_zrtp_hash;
  goto <bb 6>;

<bb 5>:
  D.47155_12 = engine_9->remote_sdp_zrtp_hash;

<bb 6>:
  # D.47155_1 = PHI <0B(2), D.47155_11(4), D.47155_12(5)>
  return D.47155_1;

}



;; Function switch_core_media_extract_t38_options (switch_core_media_extract_t38_options)

switch_core_media_extract_t38_options (struct switch_core_session_t * session, const char * r_sdp)
{
  struct switch_t38_options_t * t38_options;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  struct sdp_media_t * m;
  long unsigned int D.47148;
  sdp_media_e D.47145;
  sdp_proto_e D.47142;
  int D.47136;
  size_t D.47135;

<bb 2>:
  # DEBUG parser => 0B
  # DEBUG t38_options => 0B
  D.47135_7 = strlen (r_sdp_6(D));
  D.47136_8 = (int) D.47135_7;
  parser_9 = sdp_parse (0B, r_sdp_6(D), D.47136_8, 0);
  # DEBUG parser => parser_9
  if (parser_9 == 0B)
    goto <bb 13>;
  else
    goto <bb 3>;

<bb 3>:
  sdp_11 = sdp_session (parser_9);
  # DEBUG sdp => sdp_11
  if (sdp_11 == 0B)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  sdp_parser_free (parser_9);
  goto <bb 13>;

<bb 5>:
  m_13 = sdp_11->sdp_media;
  # DEBUG m => m_13
  goto <bb 11>;

<bb 6>:
  D.47142_14 = m_1->m_proto;
  if (D.47142_14 == 258)
    goto <bb 7>;
  else
    goto <bb 10>;

<bb 7>:
  D.47145_15 = m_1->m_type;
  if (D.47145_15 == 8)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  D.47148_16 = m_1->m_port;
  if (D.47148_16 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  t38_options_18 = switch_core_media_process_udptl (session_17(D), sdp_11, m_1);
  # DEBUG t38_options => t38_options_18
  goto <bb 12>;

<bb 10>:
  m_19 = m_1->m_next;
  # DEBUG m => m_19

<bb 11>:
  # m_1 = PHI <m_13(5), m_19(10)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 6>;
  else
    goto <bb 12>;

<bb 12>:
  # t38_options_2 = PHI <t38_options_18(9), 0B(11)>
  # DEBUG t38_options => t38_options_2
  sdp_parser_free (parser_9);

<bb 13>:
  # t38_options_3 = PHI <0B(2), 0B(4), t38_options_2(12)>
  return t38_options_3;

}



;; Function switch_core_session_get_payload_code (switch_core_session_get_payload_code)

switch_core_session_get_payload_code (struct switch_core_session_t * session, switch_media_type_t type, const char * iananame, switch_payload_t * ptP, switch_payload_t * recv_ptP, char * * fmtpP)
{
  const char D.47341;
  int D.47340;
  static const char __PRETTY_FUNCTION__[37] = "switch_core_session_get_payload_code";
  char * fmtp;
  int found;
  switch_payload_t recv_pt;
  switch_payload_t pt;
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  struct payload_map_t * pmap;
  int D.47090;
  char * D.47089;
  uint8_t D.47086;
  struct switch_mutex_t * D.47085;
  switch_status_t D.47082;

<bb 2>:
  # DEBUG pt => 0
  # DEBUG recv_pt => 0
  # DEBUG found => 0
  # DEBUG fmtp => 0B
  if (session_11(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 530, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_12 = session_11(D)->media_handle;
  # DEBUG smh => smh_12
  if (smh_12 == 0B)
    goto <bb 23>;
  else
    goto <bb 5>;

<bb 5>:
  engine_17 = &smh_12->engines[type_15(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_17
  D.47085_18 = smh_12->sdp_mutex;
  switch_mutex_lock (D.47085_18);
  pmap_19 = engine_17->payload_map;
  # DEBUG pmap => pmap_19
  goto <bb 11>;

<bb 6>:
  D.47086_20 = pmap_1->allocated;
  if (D.47086_20 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  goto <bb 10>;

<bb 8>:
  D.47089_21 = pmap_1->iananame;
  D.47090_23 = strcasecmp (D.47089_21, iananame_22(D));
  if (D.47090_23 == 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  pt_24 = pmap_1->pt;
  # DEBUG pt => pt_24
  recv_pt_25 = pmap_1->recv_pt;
  # DEBUG recv_pt => recv_pt_25
  fmtp_26 = pmap_1->rm_fmtp;
  # DEBUG fmtp => fmtp_26
  # DEBUG found => 1
  goto <bb 12>;

<bb 10>:
  pmap_28 = pmap_1->next;
  # DEBUG pmap => pmap_28

<bb 11>:
  # pmap_1 = PHI <pmap_19(5), pmap_28(10)>
  # DEBUG pmap => pmap_1
  if (pmap_1 != 0B)
    goto <bb 6>;
  else
    goto <bb 12>;

<bb 12>:
  # pt_2 = PHI <pt_24(9), 0(11)>
  # recv_pt_3 = PHI <recv_pt_25(9), 0(11)>
  # found_4 = PHI <1(9), 0(11)>
  # fmtp_5 = PHI <fmtp_26(9), 0B(11)>
  # DEBUG fmtp => fmtp_5
  # DEBUG found => found_4
  # DEBUG recv_pt => recv_pt_3
  # DEBUG pt => pt_2
  D.47085_29 = smh_12->sdp_mutex;
  switch_mutex_unlock (D.47085_29);
  if (found_4 != 0)
    goto <bb 13>;
  else
    goto <bb 23>;

<bb 13>:
  if (ptP_30(D) != 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  *ptP_30(D) = pt_2;

<bb 15>:
  if (recv_ptP_31(D) != 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  *recv_ptP_31(D) = recv_pt_3;

<bb 17>:
  # DEBUG s => fmtp_5
  if (fmtp_5 == 0B)
    goto <bb 20>;
  else
    goto <bb 18>;

<bb 18>:
  D.47341_44 = MEM[(const char *)fmtp_5];
  if (D.47341_44 == 0)
    goto <bb 20>;
  else
    goto <bb 19>;

<bb 19>:

<bb 20>:
  # D.47340_45 = PHI <1(17), 1(18), 0(19)>
  if (D.47340_45 == 0)
    goto <bb 21>;
  else
    goto <bb 23>;

<bb 21>:
  if (fmtpP_33(D) != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  *fmtpP_33(D) = fmtp_5;

<bb 23>:
  # D.47082_6 = PHI <1(4), 0(21), 1(12), 0(20), 0(22)>
  return D.47082_6;

}



;; Function switch_core_media_add_payload_map (switch_core_media_add_payload_map)

switch_core_media_add_payload_map (struct switch_core_session_t * session, switch_media_type_t type, const char * name, const char * fmtp, switch_sdp_type_t sdp_type, uint32_t pt, uint32_t rate, uint32_t ptime, uint8_t negotiated)
{
  const char D.47358;
  int D.47357;
  const char D.47354;
  int D.47353;
  const char D.47350;
  int D.47349;
  const char D.47346;
  int D.47345;
  switch_ssize_t hlen;
  static const char __func__[34] = "switch_core_media_add_payload_map";
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_add_payload_map";
  int local_pt;
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  int exists;
  struct payload_map_t * pmap;
  struct payload_map_s * D.47076;
  struct payload_map_t * D.47074;
  unsigned char iftmp.170;
  _Bool D.47058;
  _Bool D.47057;
  _Bool D.47056;
  unsigned char D.47055;
  char * D.47054;
  int D.38491;
  unsigned int D.47042;
  char * D.47041;
  struct switch_memory_pool_t * D.47040;
  uint8_t D.47038;
  struct payload_map_t * D.47036;
  uint8_t D.47031;
  switch_payload_t D.47029;
  int D.38476;
  char * D.47023;
  uint32_t D.47016;
  uint32_t D.47014;
  int D.47012;
  char * D.47011;
  struct switch_mutex_t * D.47005;

<bb 2>:
  # DEBUG exists => 0
  # DEBUG local_pt => 0
  if (session_14(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 589, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_15 = session_14(D)->media_handle;
  # DEBUG smh => smh_15
  if (smh_15 == 0B)
    goto <bb 60>;
  else
    goto <bb 5>;

<bb 5>:
  engine_20 = &smh_15->engines[type_18(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_20
  D.47005_21 = smh_15->sdp_mutex;
  switch_mutex_lock (D.47005_21);
  pmap_22 = engine_20->payload_map;
  # DEBUG pmap => pmap_22
  goto <bb 24>;

<bb 6>:
  D.47011_24 = pmap_1->iananame;
  D.47012_26 = strcasecmp (name_25(D), D.47011_24);
  if (D.47012_26 == 0)
    goto <bb 7>;
  else
    goto <bb 11>;

<bb 7>:
  D.47014_27 = pmap_1->rate;
  if (D.47014_27 == 0)
    goto <bb 9>;
  else
    goto <bb 8>;

<bb 8>:
  D.47014_28 = pmap_1->rate;
  if (D.47014_28 == rate_29(D))
    goto <bb 9>;
  else
    goto <bb 11>;

<bb 9>:
  D.47016_30 = pmap_1->ptime;
  if (D.47016_30 == 0)
    goto <bb 12>;
  else
    goto <bb 10>;

<bb 10>:
  D.47016_31 = pmap_1->ptime;
  if (D.47016_31 == ptime_32(D))
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:

<bb 12>:
  # exists_10 = PHI <1(10), 0(11), 1(9)>
  # DEBUG exists => exists_10
  if (exists_10 != 0)
    goto <bb 13>;
  else
    goto <bb 23>;

<bb 13>:
  # DEBUG s => fmtp_36(D)
  if (fmtp_36(D) == 0B)
    goto <bb 16>;
  else
    goto <bb 14>;

<bb 14>:
  D.47346_114 = *fmtp_36(D);
  if (D.47346_114 == 0)
    goto <bb 16>;
  else
    goto <bb 15>;

<bb 15>:

<bb 16>:
  # D.47345_115 = PHI <1(13), 1(14), 0(15)>
  if (D.47345_115 == 0)
    goto <bb 17>;
  else
    goto <bb 26>;

<bb 17>:
  D.47023_38 = pmap_1->rm_fmtp;
  # DEBUG s => D.47023_38
  if (D.47023_38 == 0B)
    goto <bb 20>;
  else
    goto <bb 18>;

<bb 18>:
  D.47350_116 = MEM[(const char *)D.47023_38];
  if (D.47350_116 == 0)
    goto <bb 20>;
  else
    goto <bb 19>;

<bb 19>:

<bb 20>:
  # D.47349_117 = PHI <1(17), 1(18), 0(19)>
  if (D.47349_117 == 0)
    goto <bb 21>;
  else
    goto <bb 26>;

<bb 21>:
  D.47023_40 = pmap_1->rm_fmtp;
  D.38476_41 = __builtin_strcmp (D.47023_40, fmtp_36(D));
  if (D.38476_41 != 0)
    goto <bb 22>;
  else
    goto <bb 26>;

<bb 22>:
  # DEBUG exists => 0
  D.47029_43 = pmap_1->pt;
  local_pt_44 = (int) D.47029_43;
  # DEBUG local_pt => local_pt_44

<bb 23>:
  # exists_4 = PHI <exists_10(12), 0(22)>
  # local_pt_7 = PHI <local_pt_8(12), local_pt_44(22)>
  # DEBUG local_pt => local_pt_7
  # DEBUG exists => exists_4
  pmap_45 = pmap_1->next;
  # DEBUG pmap => pmap_45

<bb 24>:
  # pmap_1 = PHI <pmap_22(5), pmap_45(23)>
  # exists_5 = PHI <0(5), exists_4(23)>
  # local_pt_8 = PHI <0(5), local_pt_7(23)>
  # DEBUG local_pt => local_pt_8
  # DEBUG exists => exists_5
  # DEBUG pmap => pmap_1
  if (pmap_1 != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.47031_23 = pmap_1->allocated;
  if (D.47031_23 != 0)
    goto <bb 6>;
  else
    goto <bb 26>;

<bb 26>:
  # exists_6 = PHI <exists_10(20), exists_5(24), exists_5(25), exists_10(16), exists_10(21)>
  # DEBUG exists => exists_6
  if (exists_6 == 0)
    goto <bb 27>;
  else
    goto <bb 32>;

<bb 27>:
  hlen = -1;
  D.47036_46 = engine_20->payload_map;
  if (D.47036_46 != 0B)
    goto <bb 28>;
  else
    goto <bb 30>;

<bb 28>:
  D.47036_47 = engine_20->payload_map;
  D.47038_48 = D.47036_47->allocated;
  if (D.47038_48 == 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  pmap_49 = engine_20->payload_map;
  # DEBUG pmap => pmap_49
  goto <bb 31>;

<bb 30>:
  D.47040_50 = session_14(D)->pool;
  pmap_51 = switch_core_perform_alloc (D.47040_50, 84, "src/switch_core_media.c", &__func__, 624);
  # DEBUG pmap => pmap_51

<bb 31>:
  # pmap_2 = PHI <pmap_49(29), pmap_51(30)>
  # DEBUG pmap => pmap_2
  pmap_2->type = type_18(D);
  D.47040_52 = session_14(D)->pool;
  D.47041_53 = switch_core_perform_strdup (D.47040_52, name_25(D), "src/switch_core_media.c", &__func__, 628);
  pmap_2->iananame = D.47041_53;
  D.47011_54 = pmap_2->iananame;
  pmap_2->rm_encoding = D.47011_54;
  D.47011_55 = pmap_2->iananame;
  D.47042_56 = switch_ci_hashfunc_default (D.47011_55, &hlen);
  pmap_2->hash = D.47042_56;

<bb 32>:
  # pmap_3 = PHI <pmap_1(26), pmap_2(31)>
  # DEBUG pmap => pmap_3
  pmap_3->sdp_type = sdp_type_57(D);
  if (ptime_32(D) != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  pmap_3->ptime = ptime_32(D);

<bb 34>:
  if (rate_29(D) != 0)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  pmap_3->rate = rate_29(D);

<bb 36>:
  # DEBUG s => fmtp_36(D)
  if (fmtp_36(D) == 0B)
    goto <bb 39>;
  else
    goto <bb 37>;

<bb 37>:
  D.47354_118 = *fmtp_36(D);
  if (D.47354_118 == 0)
    goto <bb 39>;
  else
    goto <bb 38>;

<bb 38>:

<bb 39>:
  # D.47353_119 = PHI <1(36), 1(37), 0(38)>
  if (D.47353_119 == 0)
    goto <bb 40>;
  else
    goto <bb 46>;

<bb 40>:
  D.47023_59 = pmap_3->rm_fmtp;
  # DEBUG s => D.47023_59
  if (D.47023_59 == 0B)
    goto <bb 43>;
  else
    goto <bb 41>;

<bb 41>:
  D.47358_120 = MEM[(const char *)D.47023_59];
  if (D.47358_120 == 0)
    goto <bb 43>;
  else
    goto <bb 42>;

<bb 42>:

<bb 43>:
  # D.47357_121 = PHI <1(40), 1(41), 0(42)>
  if (D.47357_121 != 0)
    goto <bb 45>;
  else
    goto <bb 44>;

<bb 44>:
  D.47023_61 = pmap_3->rm_fmtp;
  D.38491_62 = __builtin_strcmp (D.47023_61, fmtp_36(D));
  if (D.38491_62 != 0)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  D.47040_63 = session_14(D)->pool;
  D.47054_64 = switch_core_perform_strdup (D.47040_63, fmtp_36(D), "src/switch_core_media.c", &__func__, 644);
  pmap_3->rm_fmtp = D.47054_64;

<bb 46>:
  pmap_3->allocated = 1;
  D.47055_66 = (unsigned char) pt_65(D);
  pmap_3->recv_pt = D.47055_66;
  D.47056_67 = sdp_type_57(D) == 0;
  D.47057_68 = exists_6 == 0;
  D.47058_69 = D.47056_67 || D.47057_68;
  if (D.47058_69 != 0)
    goto <bb 47>;
  else
    goto <bb 51>;

<bb 47>:
  if (local_pt_8 != 0)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  iftmp.170_70 = (unsigned char) local_pt_8;
  goto <bb 50>;

<bb 49>:
  iftmp.170_71 = (unsigned char) pt_65(D);

<bb 50>:
  # iftmp.170_11 = PHI <iftmp.170_70(48), iftmp.170_71(49)>
  pmap_3->pt = iftmp.170_11;

<bb 51>:
  if (negotiated_72(D) != 0)
    goto <bb 52>;
  else
    goto <bb 53>;

<bb 52>:
  pmap_3->negotiated = negotiated_72(D);

<bb 53>:
  if (exists_6 == 0)
    goto <bb 54>;
  else
    goto <bb 59>;

<bb 54>:
  D.47036_73 = engine_20->payload_map;
  if (D.47036_73 == pmap_3)
    goto <bb 55>;
  else
    goto <bb 56>;

<bb 55>:
  engine_20->pmap_tail = pmap_3;
  goto <bb 59>;

<bb 56>:
  D.47036_74 = engine_20->payload_map;
  if (D.47036_74 == 0B)
    goto <bb 57>;
  else
    goto <bb 58>;

<bb 57>:
  engine_20->pmap_tail = pmap_3;
  D.47074_75 = engine_20->pmap_tail;
  engine_20->payload_map = D.47074_75;
  goto <bb 59>;

<bb 58>:
  D.47074_76 = engine_20->pmap_tail;
  D.47074_76->next = pmap_3;
  D.47074_77 = engine_20->pmap_tail;
  D.47076_78 = D.47074_77->next;
  engine_20->pmap_tail = D.47076_78;

<bb 59>:
  D.47005_79 = smh_15->sdp_mutex;
  switch_mutex_unlock (D.47005_79);

<bb 60>:
  # pmap_9 = PHI <0B(4), pmap_3(59)>
  return pmap_9;

}



;; Function switch_core_media_set_r_sdp_codec_string (switch_core_media_set_r_sdp_codec_string)

switch_core_media_set_r_sdp_codec_string (struct switch_core_session_t * session, const char * codec_string, struct sdp_session_t * sdp, switch_sdp_type_t sdp_type)
{
  int D.48798;
  switch_bool_t D.48797;
  int D.48796;
  int D.48795;
  int D.48794;
  int D.48793;
  int D.48792;
  int D.48791;
  int D.48790;
  int D.48788;
  const char D.47396;
  int D.47395;
  const char D.47392;
  int D.47391;
  const char D.47388;
  int D.47387;
  const char D.47381;
  int D.47380;
  const char D.47374;
  int D.47373;
  const char D.47367;
  int D.47366;
  const char D.47363;
  int D.47362;
  const struct switch_codec_implementation_t * imp;
  const struct switch_codec_implementation_t * imp;
  const struct switch_codec_implementation_t * imp;
  char * tmp_codec_string;
  static const char __func__[41] = "switch_core_media_set_r_sdp_codec_string";
  static const char __PRETTY_FUNCTION__[41] = "switch_core_media_set_r_sdp_codec_string";
  struct switch_media_handle_t * smh;
  const char * var;
  int prefer_sdp;
  struct switch_channel_t * channel;
  const struct switch_codec_implementation_t * codecs[50];
  char * codec_order[50];
  int num_codecs;
  int already_did[128];
  int i;
  short int match;
  struct sdp_rtpmap_t * map;
  struct sdp_connection_t * connection;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  char buf[1024];
  char D.40591;
  unsigned int D.40590;
  size_t D.40589;
  char * D.40588;
  size_t D.40587;
  unsigned int D.40585;
  size_t D.40584;
  char * D.40583;
  size_t D.40582;
  int D.40576;
  char * const D.40575;
  uint32_t D.40561;
  switch_call_direction_t D.40558;
  struct switch_channel_t * D.40557;
  int D.40556;
  int D.40555;
  signed char D.40553;
  const switch_payload_t D.40552;
  const switch_codec_type_t D.40550;
  struct switch_core_session_t * D.40547;
  int D.40535;
  char * const D.40534;
  int D.40522;
  int D.40521;
  signed char D.40519;
  const switch_payload_t D.40518;
  const switch_codec_type_t D.40516;
  int D.40510;
  char * const D.40509;
  int D.40506;
  const switch_payload_t D.40505;
  int D.40502;
  int D.40501;
  switch_core_media_NDLB_t D.40500;
  struct switch_core_media_params_t * D.40499;
  int D.40493;
  int D.40491;
  switch_call_direction_t D.40487;
  struct switch_core_session_t * D.40484;
  struct sdp_connection_t * D.40479;
  int D.40474;
  unsigned int D.40466;
  size_t D.40465;
  char * D.40464;
  size_t D.40463;
  uint32_t ptime.5;
  long unsigned int D.40457;
  uint32_t D.40456;
  <unnamed-unsigned:7> D.40455;
  const char * D.40454;
  const char * D.40453;
  switch_media_type_t D.40452;
  int D.40447;
  long unsigned int D.40441;
  unsigned int D.40438;
  sdp_media_e D.40437;
  const char * D.40436;
  int D.40433;
  const char * D.40429;
  _Bool D.40426;
  _Bool D.40425;
  _Bool D.40424;
  unsigned int D.40420;

<bb 2>:
  buf = {};
  # DEBUG ptime => 0
  # DEBUG dptime => 0
  # DEBUG match => 0
  already_did = {};
  # DEBUG num_codecs => 0
  codecs = {};
  channel_29 = switch_core_session_get_channel (session_28(D));
  # DEBUG channel => channel_29
  # DEBUG prefer_sdp => 0
  if (session_28(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8198, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_31 = session_28(D)->media_handle;
  # DEBUG smh => smh_31
  if (smh_31 == 0B)
    goto <bb 155>;
  else
    goto <bb 5>;

<bb 5>:
  var_32 = switch_channel_get_variable_dup (channel_29, "ep_codec_prefer_sdp", 1, -1);
  # DEBUG var => var_32
  if (var_32 != 0B)
    goto <bb 6>;
  else
    goto <bb 19>;

<bb 6>:
  # DEBUG expr => var_32
  if (var_32 != 0B)
    goto <bb 7>;
  else
    goto <bb 16>;

<bb 7>:
  D.48790_311 = strcasecmp (var_32, "yes");
  if (D.48790_311 == 0)
    goto <bb 17>;
  else
    goto <bb 8>;

<bb 8>:
  D.48791_312 = strcasecmp (var_32, "on");
  if (D.48791_312 == 0)
    goto <bb 17>;
  else
    goto <bb 9>;

<bb 9>:
  D.48792_313 = strcasecmp (var_32, "true");
  if (D.48792_313 == 0)
    goto <bb 17>;
  else
    goto <bb 10>;

<bb 10>:
  D.48793_314 = strcasecmp (var_32, "t");
  if (D.48793_314 == 0)
    goto <bb 17>;
  else
    goto <bb 11>;

<bb 11>:
  D.48794_315 = strcasecmp (var_32, "enabled");
  if (D.48794_315 == 0)
    goto <bb 17>;
  else
    goto <bb 12>;

<bb 12>:
  D.48795_316 = strcasecmp (var_32, "active");
  if (D.48795_316 == 0)
    goto <bb 17>;
  else
    goto <bb 13>;

<bb 13>:
  D.48796_317 = strcasecmp (var_32, "allow");
  if (D.48796_317 == 0)
    goto <bb 17>;
  else
    goto <bb 14>;

<bb 14>:
  D.48797_318 = switch_is_number (var_32);
  if (D.48797_318 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  # DEBUG __nptr => var_32
  D.48798_319 = strtol (var_32, 0B, 10);
  if (D.48798_319 != 0)
    goto <bb 17>;
  else
    goto <bb 16>;

<bb 16>:

<bb 17>:
  # D.48788_320 = PHI <1(7), 1(8), 1(9), 1(10), 1(11), 1(12), 1(13), 1(15), 0(16)>
  D.48788_325 = D.48788_320;
  D.48788_33 = D.48788_325;
  if (D.48788_33 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  # DEBUG prefer_sdp => 1

<bb 19>:
  # prefer_sdp_23 = PHI <0(5), 0(17), 1(18)>
  # DEBUG prefer_sdp => prefer_sdp_23
  # DEBUG s => codec_string_35(D)
  if (codec_string_35(D) == 0B)
    goto <bb 22>;
  else
    goto <bb 20>;

<bb 20>:
  D.47363_278 = *codec_string_35(D);
  if (D.47363_278 == 0)
    goto <bb 22>;
  else
    goto <bb 21>;

<bb 21>:

<bb 22>:
  # D.47362_279 = PHI <1(19), 1(20), 0(21)>
  if (D.47362_279 == 0)
    goto <bb 23>;
  else
    goto <bb 26>;

<bb 23>:
  tmp_codec_string_37 = __strdup (codec_string_35(D));
  # DEBUG tmp_codec_string => tmp_codec_string_37
  if (tmp_codec_string_37 != 0B)
    goto <bb 24>;
  else
    goto <bb 27>;

<bb 24>:
  D.40420_38 = switch_separate_string (tmp_codec_string_37, 44, &codec_order, 50);
  num_codecs_39 = (int) D.40420_38;
  # DEBUG num_codecs => num_codecs_39
  num_codecs_40 = switch_loadable_module_get_codecs_sorted (&codecs, 50, &codec_order, num_codecs_39);
  # DEBUG num_codecs => num_codecs_40
  if (tmp_codec_string_37 != 0B)
    goto <bb 25>;
  else
    goto <bb 27>;

<bb 25>:
  free (tmp_codec_string_37);
  # DEBUG tmp_codec_string => 0B
  goto <bb 27>;

<bb 26>:
  num_codecs_42 = switch_loadable_module_get_codecs (&codecs, 50);
  # DEBUG num_codecs => num_codecs_42

<bb 27>:
  # num_codecs_22 = PHI <num_codecs_40(24), num_codecs_42(26), 0(23), num_codecs_40(25)>
  # DEBUG num_codecs => num_codecs_22
  D.40424_43 = channel_29 == 0B;
  D.40425_44 = num_codecs_22 == 0;
  D.40426_45 = D.40424_43 || D.40425_44;
  if (D.40426_45 != 0)
    goto <bb 155>;
  else
    goto <bb 28>;

<bb 28>:
  attr_47 = sdp_46(D)->sdp_attributes;
  # DEBUG attr => attr_47
  goto <bb 36>;

<bb 29>:
  D.40429_48 = attr_3->a_name;
  # DEBUG s => D.40429_48
  if (D.40429_48 == 0B)
    goto <bb 32>;
  else
    goto <bb 30>;

<bb 30>:
  D.47367_280 = *D.40429_48;
  if (D.47367_280 == 0)
    goto <bb 32>;
  else
    goto <bb 31>;

<bb 31>:

<bb 32>:
  # D.47366_281 = PHI <1(29), 1(30), 0(31)>
  if (D.47366_281 != 0)
    goto <bb 35>;
  else
    goto <bb 33>;

<bb 33>:
  D.40429_50 = attr_3->a_name;
  D.40433_51 = strcasecmp (D.40429_50, "ptime");
  if (D.40433_51 == 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  D.40436_52 = attr_3->a_value;
  # DEBUG __nptr => D.40436_52
  dptime_282 = strtol (D.40436_52, 0B, 10);
  # DEBUG dptime => NULL
  goto <bb 37>;

<bb 35>:
  attr_54 = attr_3->a_next;
  # DEBUG attr => attr_54

<bb 36>:
  # attr_3 = PHI <attr_47(28), attr_54(35)>
  # DEBUG attr => attr_3
  if (attr_3 != 0B)
    goto <bb 29>;
  else
    goto <bb 37>;

<bb 37>:
  # dptime_9 = PHI <dptime_282(34), 0(36)>
  # DEBUG dptime => dptime_9
  switch_core_media_find_zrtp_hash (session_28(D), sdp_46(D));
  switch_core_media_pass_zrtp_hash (session_28(D));
  m_55 = sdp_46(D)->sdp_media;
  # DEBUG m => m_55
  goto <bb 54>;

<bb 38>:
  # DEBUG ptime => dptime_9
  D.40437_57 = m_1->m_type;
  D.40438_58 = D.40437_57 + 4294967294;
  if (D.40438_58 <= 1)
    goto <bb 39>;
  else
    goto <bb 53>;

<bb 39>:
  D.40441_59 = m_1->m_port;
  if (D.40441_59 != 0)
    goto <bb 40>;
  else
    goto <bb 53>;

<bb 40>:
  map_60 = m_1->m_rtpmaps;
  # DEBUG map => map_60
  goto <bb 52>;

<bb 41>:
  attr_61 = m_1->m_attributes;
  # DEBUG attr => attr_61
  goto <bb 50>;

<bb 42>:
  D.40429_62 = attr_4->a_name;
  # DEBUG s => D.40429_62
  if (D.40429_62 == 0B)
    goto <bb 45>;
  else
    goto <bb 43>;

<bb 43>:
  D.47374_283 = *D.40429_62;
  if (D.47374_283 == 0)
    goto <bb 45>;
  else
    goto <bb 44>;

<bb 44>:

<bb 45>:
  # D.47373_284 = PHI <1(42), 1(43), 0(44)>
  if (D.47373_284 != 0)
    goto <bb 49>;
  else
    goto <bb 46>;

<bb 46>:
  D.40429_64 = attr_4->a_name;
  D.40447_65 = strcasecmp (D.40429_64, "ptime");
  if (D.40447_65 == 0)
    goto <bb 47>;
  else
    goto <bb 49>;

<bb 47>:
  D.40436_66 = attr_4->a_value;
  if (D.40436_66 != 0B)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  D.40436_67 = attr_4->a_value;
  # DEBUG __nptr => D.40436_67
  ptime_285 = strtol (D.40436_67, 0B, 10);
  # DEBUG ptime => NULL
  goto <bb 51>;

<bb 49>:
  attr_69 = attr_4->a_next;
  # DEBUG attr => attr_69

<bb 50>:
  # attr_4 = PHI <attr_61(41), attr_69(49)>
  # DEBUG attr => attr_4
  if (attr_4 != 0B)
    goto <bb 42>;
  else
    goto <bb 51>;

<bb 51>:
  # ptime_6 = PHI <ptime_285(48), ptime_7(50)>
  # DEBUG ptime => ptime_6
  D.40437_70 = m_1->m_type;
  D.40452_71 = D.40437_70 != 2;
  D.40453_72 = map_12->rm_encoding;
  D.40454_73 = map_12->rm_fmtp;
  D.40455_74 = map_12->rm_pt;
  D.40456_75 = (uint32_t) D.40455_74;
  D.40457_76 = map_12->rm_rate;
  ptime.5_77 = (uint32_t) ptime_6;
  switch_core_media_add_payload_map (session_28(D), D.40452_71, D.40453_72, D.40454_73, sdp_type_78(D), D.40456_75, D.40457_76, ptime.5_77, 0);
  map_79 = map_12->rm_next;
  # DEBUG map => map_79

<bb 52>:
  # ptime_7 = PHI <dptime_9(40), ptime_6(51)>
  # map_12 = PHI <map_60(40), map_79(51)>
  # DEBUG map => map_12
  # DEBUG ptime => ptime_7
  if (map_12 != 0B)
    goto <bb 41>;
  else
    goto <bb 53>;

<bb 53>:
  m_80 = m_1->m_next;
  # DEBUG m => m_80

<bb 54>:
  # m_1 = PHI <m_55(37), m_80(53)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 38>;
  else
    goto <bb 55>;

<bb 55>:
  m_81 = sdp_46(D)->sdp_media;
  # DEBUG m => m_81
  goto <bb 152>;

<bb 56>:
  # DEBUG ptime => dptime_9
  D.40437_83 = m_2->m_type;
  if (D.40437_83 == 8)
    goto <bb 57>;
  else
    goto <bb 59>;

<bb 57>:
  D.40441_84 = m_2->m_port;
  if (D.40441_84 != 0)
    goto <bb 58>;
  else
    goto <bb 59>;

<bb 58>:
  D.40463_85 = strlen (&buf);
  D.40464_86 = &buf + D.40463_85;
  D.40465_87 = strlen (&buf);
  D.40466_88 = 1024 - D.40465_87;
  switch_snprintf (D.40464_86, D.40466_88, ",t38");
  goto <bb 151>;

<bb 59>:
  D.40437_89 = m_2->m_type;
  if (D.40437_89 == 2)
    goto <bb 60>;
  else
    goto <bb 118>;

<bb 60>:
  D.40441_90 = m_2->m_port;
  if (D.40441_90 != 0)
    goto <bb 61>;
  else
    goto <bb 118>;

<bb 61>:
  attr_91 = m_2->m_attributes;
  # DEBUG attr => attr_91
  goto <bb 70>;

<bb 62>:
  D.40429_92 = attr_5->a_name;
  # DEBUG s => D.40429_92
  if (D.40429_92 == 0B)
    goto <bb 65>;
  else
    goto <bb 63>;

<bb 63>:
  D.47381_286 = *D.40429_92;
  if (D.47381_286 == 0)
    goto <bb 65>;
  else
    goto <bb 64>;

<bb 64>:

<bb 65>:
  # D.47380_287 = PHI <1(62), 1(63), 0(64)>
  if (D.47380_287 != 0)
    goto <bb 69>;
  else
    goto <bb 66>;

<bb 66>:
  D.40429_94 = attr_5->a_name;
  D.40474_95 = strcasecmp (D.40429_94, "ptime");
  if (D.40474_95 == 0)
    goto <bb 67>;
  else
    goto <bb 69>;

<bb 67>:
  D.40436_96 = attr_5->a_value;
  if (D.40436_96 != 0B)
    goto <bb 68>;
  else
    goto <bb 69>;

<bb 68>:
  D.40436_97 = attr_5->a_value;
  # DEBUG __nptr => D.40436_97
  ptime_288 = strtol (D.40436_97, 0B, 10);
  # DEBUG ptime => NULL
  goto <bb 71>;

<bb 69>:
  attr_99 = attr_5->a_next;
  # DEBUG attr => attr_99

<bb 70>:
  # attr_5 = PHI <attr_91(61), attr_99(69)>
  # DEBUG attr => attr_5
  if (attr_5 != 0B)
    goto <bb 62>;
  else
    goto <bb 71>;

<bb 71>:
  # ptime_8 = PHI <ptime_288(68), dptime_9(70)>
  # DEBUG ptime => ptime_8
  connection_100 = sdp_46(D)->sdp_connection;
  # DEBUG connection => connection_100
  D.40479_101 = m_2->m_connections;
  if (D.40479_101 != 0B)
    goto <bb 72>;
  else
    goto <bb 73>;

<bb 72>:
  connection_102 = m_2->m_connections;
  # DEBUG connection => connection_102

<bb 73>:
  # connection_10 = PHI <connection_100(71), connection_102(72)>
  # DEBUG connection => connection_10
  if (connection_10 == 0B)
    goto <bb 74>;
  else
    goto <bb 75>;

<bb 74>:
  D.40484_103 = switch_channel_get_session (channel_29);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 8285, D.40484_103, 3, "Cannot find a c= line in the sdp at media or session level!\n");
  goto <bb 153>;

<bb 75>:
  D.40487_104 = switch_channel_direction (channel_29);
  if (D.40487_104 == 0)
    goto <bb 78>;
  else
    goto <bb 76>;

<bb 76>:
  if (prefer_sdp_23 != 0)
    goto <bb 78>;
  else
    goto <bb 77>;

<bb 77>:
  i_310 = 0;
  goto <bb 117>;

<bb 78>:
  map_141 = m_2->m_rtpmaps;
  # DEBUG map => map_141
  goto <bb 96>;

<bb 79>:
  D.40455_142 = map_13->rm_pt;
  D.40491_143 = (int) D.40455_142;
  if (D.40491_143 > 127)
    goto <bb 95>;
  else
    goto <bb 80>;

<bb 80>:
  D.40455_144 = map_13->rm_pt;
  D.40491_145 = (int) D.40455_144;
  D.40493_146 = already_did[D.40491_145];
  if (D.40493_146 != 0)
    goto <bb 95>;
  else
    goto <bb 81>;

<bb 81>:
  i_214 = 0;
  goto <bb 94>;

<bb 82>:
  imp_148 = codecs[i_19];
  # DEBUG imp => imp_148
  D.40453_149 = map_13->rm_encoding;
  # DEBUG s => D.40453_149
  if (D.40453_149 == 0B)
    goto <bb 85>;
  else
    goto <bb 83>;

<bb 83>:
  D.47388_289 = *D.40453_149;
  if (D.47388_289 == 0)
    goto <bb 85>;
  else
    goto <bb 84>;

<bb 84>:

<bb 85>:
  # D.47387_290 = PHI <1(82), 1(83), 0(84)>
  if (D.47387_290 != 0)
    goto <bb 87>;
  else
    goto <bb 86>;

<bb 86>:
  D.40499_151 = smh_31->mparams;
  D.40500_152 = D.40499_151->ndlb;
  D.40501_153 = (int) D.40500_152;
  D.40502_154 = D.40501_153 & 1;
  if (D.40502_154 != 0)
    goto <bb 87>;
  else
    goto <bb 89>;

<bb 87>:
  D.40455_156 = map_13->rm_pt;
  D.40491_157 = (int) D.40455_156;
  if (D.40491_157 <= 95)
    goto <bb 88>;
  else
    goto <bb 89>;

<bb 88>:
  D.40455_158 = map_13->rm_pt;
  D.40491_159 = (int) D.40455_158;
  D.40505_160 = imp_148->ianacode;
  D.40506_161 = (int) D.40505_160;
  match_162 = D.40491_159 == D.40506_161;
  # DEBUG match => match_162
  goto <bb 91>;

<bb 89>:
  D.40453_163 = map_13->rm_encoding;
  if (D.40453_163 != 0B)
    goto <bb 90>;
  else
    goto <bb 91>;

<bb 90>:
  D.40453_164 = map_13->rm_encoding;
  D.40509_165 = imp_148->iananame;
  D.40510_166 = strcasecmp (D.40453_164, D.40509_165);
  match_167 = D.40510_166 == 0;
  # DEBUG match => match_167

<bb 91>:
  # match_16 = PHI <match_162(88), match_167(90), 0(89)>
  # DEBUG match => match_16
  if (match_16 != 0)
    goto <bb 92>;
  else
    goto <bb 93>;

<bb 92>:
  add_audio_codec.constprop.7 (map_13, ptime_8, &buf);
  goto <bb 95>;

<bb 93>:
  i_169 = i_19 + 1;
  # DEBUG i => i_169

<bb 94>:
  # i_19 = PHI <0(81), i_169(93)>
  # DEBUG i => i_19
  if (i_19 < num_codecs_22)
    goto <bb 82>;
  else
    goto <bb 95>;

<bb 95>:
  map_170 = map_13->rm_next;
  # DEBUG map => map_170

<bb 96>:
  # map_13 = PHI <map_141(78), map_170(95)>
  # DEBUG map => map_13
  if (map_13 != 0B)
    goto <bb 79>;
  else
    goto <bb 151>;

<bb 97>:
  imp_106 = codecs[i_20];
  # DEBUG imp => imp_106
  D.40516_107 = imp_106->codec_type;
  if (D.40516_107 != 0)
    goto <bb 116>;
  else
    goto <bb 98>;

<bb 98>:
  D.40518_108 = imp_106->ianacode;
  D.40519_109 = (signed char) D.40518_108;
  if (D.40519_109 < 0)
    goto <bb 116>;
  else
    goto <bb 99>;

<bb 99>:
  D.40518_110 = imp_106->ianacode;
  D.40521_111 = (int) D.40518_110;
  D.40522_112 = already_did[D.40521_111];
  if (D.40522_112 != 0)
    goto <bb 116>;
  else
    goto <bb 100>;

<bb 100>:
  map_113 = m_2->m_rtpmaps;
  # DEBUG map => map_113
  goto <bb 115>;

<bb 101>:
  D.40455_114 = map_14->rm_pt;
  D.40491_115 = (int) D.40455_114;
  if (D.40491_115 > 127)
    goto <bb 114>;
  else
    goto <bb 102>;

<bb 102>:
  D.40455_116 = map_14->rm_pt;
  D.40491_117 = (int) D.40455_116;
  D.40493_118 = already_did[D.40491_117];
  if (D.40493_118 != 0)
    goto <bb 114>;
  else
    goto <bb 103>;

<bb 103>:
  D.40453_119 = map_14->rm_encoding;
  # DEBUG s => D.40453_119
  if (D.40453_119 == 0B)
    goto <bb 106>;
  else
    goto <bb 104>;

<bb 104>:
  D.47392_291 = *D.40453_119;
  if (D.47392_291 == 0)
    goto <bb 106>;
  else
    goto <bb 105>;

<bb 105>:

<bb 106>:
  # D.47391_292 = PHI <1(103), 1(104), 0(105)>
  if (D.47391_292 != 0)
    goto <bb 108>;
  else
    goto <bb 107>;

<bb 107>:
  D.40499_121 = smh_31->mparams;
  D.40500_122 = D.40499_121->ndlb;
  D.40501_123 = (int) D.40500_122;
  D.40502_124 = D.40501_123 & 1;
  if (D.40502_124 != 0)
    goto <bb 108>;
  else
    goto <bb 110>;

<bb 108>:
  D.40455_126 = map_14->rm_pt;
  D.40491_127 = (int) D.40455_126;
  if (D.40491_127 <= 95)
    goto <bb 109>;
  else
    goto <bb 110>;

<bb 109>:
  D.40455_128 = map_14->rm_pt;
  D.40491_129 = (int) D.40455_128;
  D.40518_130 = imp_106->ianacode;
  D.40521_131 = (int) D.40518_130;
  match_132 = D.40491_129 == D.40521_131;
  # DEBUG match => match_132
  goto <bb 112>;

<bb 110>:
  D.40453_133 = map_14->rm_encoding;
  if (D.40453_133 != 0B)
    goto <bb 111>;
  else
    goto <bb 112>;

<bb 111>:
  D.40453_134 = map_14->rm_encoding;
  D.40534_135 = imp_106->iananame;
  D.40535_136 = strcasecmp (D.40453_134, D.40534_135);
  match_137 = D.40535_136 == 0;
  # DEBUG match => match_137

<bb 112>:
  # match_17 = PHI <match_132(109), match_137(111), 0(110)>
  # DEBUG match => match_17
  if (match_17 != 0)
    goto <bb 113>;
  else
    goto <bb 114>;

<bb 113>:
  add_audio_codec.constprop.7 (map_14, ptime_8, &buf);
  goto <bb 116>;

<bb 114>:
  map_139 = map_14->rm_next;
  # DEBUG map => map_139

<bb 115>:
  # map_14 = PHI <map_113(100), map_139(114)>
  # DEBUG map => map_14
  if (map_14 != 0B)
    goto <bb 101>;
  else
    goto <bb 116>;

<bb 116>:
  i_140 = i_20 + 1;
  # DEBUG i => i_140

<bb 117>:
  # i_20 = PHI <0(77), i_140(116)>
  # DEBUG i => i_20
  if (i_20 < num_codecs_22)
    goto <bb 97>;
  else
    goto <bb 151>;

<bb 118>:
  D.40437_171 = m_2->m_type;
  if (D.40437_171 == 3)
    goto <bb 119>;
  else
    goto <bb 151>;

<bb 119>:
  D.40441_172 = m_2->m_port;
  if (D.40441_172 != 0)
    goto <bb 120>;
  else
    goto <bb 151>;

<bb 120>:
  connection_173 = sdp_46(D)->sdp_connection;
  # DEBUG connection => connection_173
  D.40479_174 = m_2->m_connections;
  if (D.40479_174 != 0B)
    goto <bb 121>;
  else
    goto <bb 122>;

<bb 121>:
  connection_175 = m_2->m_connections;
  # DEBUG connection => connection_175

<bb 122>:
  # connection_11 = PHI <connection_173(120), connection_175(121)>
  # DEBUG connection => connection_11
  if (connection_11 == 0B)
    goto <bb 124>;
  else
    goto <bb 123>;

<bb 123>:
  i_177 = 0;
  goto <bb 150>;

<bb 124>:
  D.40547_176 = switch_channel_get_session (channel_29);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 8352, D.40547_176, 3, "Cannot find a c= line in the sdp at media or session level!\n");
  goto <bb 153>;

<bb 125>:
  imp_178 = codecs[i_21];
  # DEBUG imp => imp_178
  D.40550_179 = imp_178->codec_type;
  if (D.40550_179 != 1)
    goto <bb 149>;
  else
    goto <bb 126>;

<bb 126>:
  D.40552_180 = imp_178->ianacode;
  D.40553_181 = (signed char) D.40552_180;
  if (D.40553_181 < 0)
    goto <bb 149>;
  else
    goto <bb 127>;

<bb 127>:
  D.40552_182 = imp_178->ianacode;
  D.40555_183 = (int) D.40552_182;
  D.40556_184 = already_did[D.40555_183];
  if (D.40556_184 != 0)
    goto <bb 149>;
  else
    goto <bb 128>;

<bb 128>:
  D.40557_185 = session_28(D)->channel;
  D.40558_186 = switch_channel_direction (D.40557_185);
  if (D.40558_186 == 0)
    goto <bb 129>;
  else
    goto <bb 130>;

<bb 129>:
  D.40557_187 = session_28(D)->channel;
  D.40561_188 = switch_channel_test_flag (D.40557_187, 114);
  if (D.40561_188 != 0)
    goto <bb 149>;
  else
    goto <bb 130>;

<bb 130>:
  map_189 = m_2->m_rtpmaps;
  # DEBUG map => map_189
  goto <bb 148>;

<bb 131>:
  D.40455_190 = map_15->rm_pt;
  D.40491_191 = (int) D.40455_190;
  if (D.40491_191 > 127)
    goto <bb 147>;
  else
    goto <bb 132>;

<bb 132>:
  D.40455_192 = map_15->rm_pt;
  D.40491_193 = (int) D.40455_192;
  D.40493_194 = already_did[D.40491_193];
  if (D.40493_194 != 0)
    goto <bb 147>;
  else
    goto <bb 133>;

<bb 133>:
  D.40453_195 = map_15->rm_encoding;
  # DEBUG s => D.40453_195
  if (D.40453_195 == 0B)
    goto <bb 136>;
  else
    goto <bb 134>;

<bb 134>:
  D.47396_293 = *D.40453_195;
  if (D.47396_293 == 0)
    goto <bb 136>;
  else
    goto <bb 135>;

<bb 135>:

<bb 136>:
  # D.47395_294 = PHI <1(133), 1(134), 0(135)>
  if (D.47395_294 != 0)
    goto <bb 138>;
  else
    goto <bb 137>;

<bb 137>:
  D.40499_197 = smh_31->mparams;
  D.40500_198 = D.40499_197->ndlb;
  D.40501_199 = (int) D.40500_198;
  D.40502_200 = D.40501_199 & 1;
  if (D.40502_200 != 0)
    goto <bb 138>;
  else
    goto <bb 140>;

<bb 138>:
  D.40455_202 = map_15->rm_pt;
  D.40491_203 = (int) D.40455_202;
  if (D.40491_203 <= 95)
    goto <bb 139>;
  else
    goto <bb 140>;

<bb 139>:
  D.40455_204 = map_15->rm_pt;
  D.40491_205 = (int) D.40455_204;
  D.40552_206 = imp_178->ianacode;
  D.40555_207 = (int) D.40552_206;
  match_208 = D.40491_205 == D.40555_207;
  # DEBUG match => match_208
  goto <bb 142>;

<bb 140>:
  D.40453_209 = map_15->rm_encoding;
  if (D.40453_209 != 0B)
    goto <bb 141>;
  else
    goto <bb 142>;

<bb 141>:
  D.40453_210 = map_15->rm_encoding;
  D.40575_211 = imp_178->iananame;
  D.40576_212 = strcasecmp (D.40453_210, D.40575_211);
  match_213 = D.40576_212 == 0;
  # DEBUG match => match_213

<bb 142>:
  # match_18 = PHI <match_208(139), match_213(141), 0(140)>
  # DEBUG match => match_18
  if (match_18 != 0)
    goto <bb 143>;
  else
    goto <bb 147>;

<bb 143>:
  if (dptime_9 > 0)
    goto <bb 144>;
  else
    goto <bb 145>;

<bb 144>:
  D.40582_215 = strlen (&buf);
  D.40583_216 = &buf + D.40582_215;
  D.40584_217 = strlen (&buf);
  D.40585_218 = 1024 - D.40584_217;
  D.40575_219 = imp_178->iananame;
  D.40457_220 = map_15->rm_rate;
  switch_snprintf (D.40583_216, D.40585_218, ",%s@%uh@%di", D.40575_219, D.40457_220, dptime_9);
  goto <bb 146>;

<bb 145>:
  D.40587_221 = strlen (&buf);
  D.40588_222 = &buf + D.40587_221;
  D.40589_223 = strlen (&buf);
  D.40590_224 = 1024 - D.40589_223;
  D.40575_225 = imp_178->iananame;
  D.40457_226 = map_15->rm_rate;
  switch_snprintf (D.40588_222, D.40590_224, ",%s@%uh", D.40575_225, D.40457_226);

<bb 146>:
  D.40552_227 = imp_178->ianacode;
  D.40555_228 = (int) D.40552_227;
  already_did[D.40555_228] = 1;
  goto <bb 149>;

<bb 147>:
  map_229 = map_15->rm_next;
  # DEBUG map => map_229

<bb 148>:
  # map_15 = PHI <map_189(130), map_229(147)>
  # DEBUG map => map_15
  if (map_15 != 0B)
    goto <bb 131>;
  else
    goto <bb 149>;

<bb 149>:
  i_230 = i_21 + 1;
  # DEBUG i => i_230

<bb 150>:
  # i_21 = PHI <0(123), i_230(149)>
  # DEBUG i => i_21
  if (i_21 < num_codecs_22)
    goto <bb 125>;
  else
    goto <bb 151>;

<bb 151>:
  m_231 = m_2->m_next;
  # DEBUG m => m_231

<bb 152>:
  # m_2 = PHI <m_81(55), m_231(151)>
  # DEBUG m => m_2
  if (m_2 != 0B)
    goto <bb 56>;
  else
    goto <bb 153>;

<bb 153>:
  D.40591_232 = buf[0];
  if (D.40591_232 == 44)
    goto <bb 154>;
  else
    goto <bb 155>;

<bb 154>:
  switch_channel_set_variable_var_check (channel_29, "ep_codec_string", &buf[1], 1);

<bb 155>:
  return;

}



;; Function switch_core_media_get_codec_string (switch_core_media_get_codec_string)

switch_core_media_get_codec_string (struct switch_core_session_t * session)
{
  const char D.47402;
  int D.47401;
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_get_codec_string";
  struct switch_media_handle_t * smh;
  const char * fallback;
  const char * preferred;
  struct switch_core_media_params_t * D.46989;
  switch_call_direction_t D.46986;
  struct switch_channel_t * D.46981;

<bb 2>:
  # DEBUG preferred => 0B
  # DEBUG fallback => 0B
  if (session_7(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 685, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_8 = session_7(D)->media_handle;
  # DEBUG smh => smh_8
  if (smh_8 == 0B)
    goto <bb 11>;
  else
    goto <bb 5>;

<bb 5>:
  D.46981_11 = session_7(D)->channel;
  preferred_12 = switch_channel_get_variable_dup (D.46981_11, "absolute_codec_string", 1, -1);
  # DEBUG preferred => preferred_12
  if (preferred_12 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.46981_13 = session_7(D)->channel;
  preferred_14 = switch_channel_get_variable_dup (D.46981_13, "codec_string", 1, -1);
  # DEBUG preferred => preferred_14

<bb 7>:
  # preferred_1 = PHI <preferred_12(5), preferred_14(6)>
  # DEBUG preferred => preferred_1
  if (preferred_1 == 0B)
    goto <bb 8>;
  else
    goto <bb 11>;

<bb 8>:
  D.46981_15 = session_7(D)->channel;
  D.46986_16 = switch_channel_direction (D.46981_15);
  if (D.46986_16 == 1)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.46989_17 = smh_8->mparams;
  preferred_18 = D.46989_17->outbound_codec_string;
  # DEBUG preferred => preferred_18
  D.46989_19 = smh_8->mparams;
  fallback_20 = D.46989_19->inbound_codec_string;
  # DEBUG fallback => fallback_20
  goto <bb 11>;

<bb 10>:
  D.46989_21 = smh_8->mparams;
  preferred_22 = D.46989_21->inbound_codec_string;
  # DEBUG preferred => preferred_22
  D.46989_23 = smh_8->mparams;
  fallback_24 = D.46989_23->outbound_codec_string;
  # DEBUG fallback => fallback_24

<bb 11>:
  # preferred_2 = PHI <"PCMU"(4), preferred_1(7), preferred_18(9), preferred_22(10)>
  # fallback_3 = PHI <"PCMU"(4), 0B(7), fallback_20(9), fallback_24(10)>
  # DEBUG fallback => fallback_3
  # DEBUG preferred => preferred_2
  # DEBUG s => preferred_2
  if (preferred_2 == 0B)
    goto <bb 14>;
  else
    goto <bb 12>;

<bb 12>:
  D.47402_35 = *preferred_2;
  if (D.47402_35 == 0)
    goto <bb 14>;
  else
    goto <bb 13>;

<bb 13>:

<bb 14>:
  # D.47401_36 = PHI <1(11), 1(12), 0(13)>
  if (D.47401_36 == 0)
    goto <bb 16>;
  else
    goto <bb 15>;

<bb 15>:

<bb 16>:
  # preferred_4 = PHI <preferred_2(14), fallback_3(15)>
  return preferred_4;

}



;; Function switch_core_session_clear_crypto (switch_core_session_clear_crypto)

switch_core_session_clear_crypto (struct switch_core_session_t * session)
{
  const char * vars[11];
  struct switch_media_handle_t * smh;
  int i;
  void * D.46974;
  void * D.46972;
  unsigned int i.167;
  const char * D.46966;
  struct switch_channel_t * D.46965;

<bb 2>:
  vars = *.LC10;
  # DEBUG i => 0
  goto <bb 4>;

<bb 3>:
  D.46965_6 = session_5(D)->channel;
  D.46966_7 = vars[i_1];
  switch_channel_set_variable_var_check (D.46965_6, D.46966_7, 0B, 1);
  i_8 = i_1 + 1;
  # DEBUG i => i_8

<bb 4>:
  # i_1 = PHI <0(2), i_8(3)>
  # DEBUG i => i_1
  D.46966_4 = vars[i_1];
  if (D.46966_4 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 5>:
  smh_9 = session_5(D)->media_handle;
  # DEBUG smh => smh_9
  if (smh_9 == 0B)
    goto <bb 9>;
  else
    goto <bb 6>;

<bb 6>:
  i_13 = 0;
  goto <bb 8>;

<bb 7>:
  i.167_12 = (unsigned int) i_2;
  D.46972_14 = &smh_9->engines[0].ssec[i.167_12]{lb: 0 sz: 144};
  memset (D.46972_14, 0, 144);
  i.167_16 = (unsigned int) i_2;
  D.46974_18 = &smh_9->engines[1].ssec[i.167_16]{lb: 0 sz: 144};
  memset (D.46974_18, 0, 144);
  i_19 = i_2 + 1;
  # DEBUG i => i_19

<bb 8>:
  # i_2 = PHI <0(6), i_19(7)>
  # DEBUG i => i_2
  if (i_2 <= 8)
    goto <bb 7>;
  else
    goto <bb 9>;

<bb 9>:
  return;

}



;; Function switch_core_session_local_crypto_key (switch_core_session_local_crypto_key)

switch_core_session_local_crypto_key (struct switch_core_session_t * session, switch_media_type_t type)
{
  switch_rtp_crypto_key_type_t D.46952;
  const char * D.46951;
  struct switch_media_handle_t * D.46948;

<bb 2>:
  D.46948_3 = session_2(D)->media_handle;
  if (D.46948_3 == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

<bb 3>:
  D.46948_6 = session_2(D)->media_handle;
  D.46952_8 = D.46948_6->engines[type_7(D)].crypto_type;
  D.46951_9 = D.46948_6->engines[type_7(D)].ssec[D.46952_8].local_crypto_key;

<bb 4>:
  # D.46951_1 = PHI <0B(2), D.46951_9(3)>
  return D.46951_1;

}



;; Function switch_core_media_parse_rtp_bugs (switch_core_media_parse_rtp_bugs)

switch_core_media_parse_rtp_bugs (switch_rtp_bug_flag_t * flag_pole, const char * str)
{
  unsigned int D.46947;
  const char * D.46944;
  unsigned int D.46943;
  const char * D.46940;
  unsigned int D.46939;
  const char * D.46936;
  unsigned int D.46935;
  const char * D.46932;
  unsigned int D.46931;
  const char * D.46928;
  unsigned int D.46927;
  const char * D.46924;
  unsigned int D.46923;
  const char * D.46920;
  unsigned int D.46919;
  const char * D.46916;
  unsigned int D.46915;
  const char * D.46912;
  unsigned int D.46911;
  const char * D.46908;
  unsigned int D.46907;
  const char * D.46904;
  unsigned int D.46903;
  const char * D.46900;
  unsigned int D.46899;
  const char * D.46896;
  unsigned int D.46895;
  const char * D.46892;
  unsigned int D.46891;
  const char * D.46888;
  unsigned int D.46887;
  const char * D.46884;
  unsigned int D.46883;
  const char * D.46880;
  unsigned int D.46879;
  const char * D.46876;
  unsigned int D.46875;
  const char * D.46872;
  unsigned int D.46871;
  const char * D.46868;
  unsigned int D.46867;
  const char * D.46864;
  unsigned int D.46863;
  const char * D.46860;
  unsigned int D.46859;
  const char * D.46856;
  unsigned int D.46855;
  switch_rtp_bug_flag_t D.46854;
  const char * D.46851;
  const char * D.46848;

<bb 2>:
  D.46848_2 = switch_stristr ("clear", str_1(D));
  if (D.46848_2 != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  *flag_pole_3(D) = 0;

<bb 4>:
  D.46851_4 = switch_stristr ("CISCO_SKIP_MARK_BIT_2833", str_1(D));
  if (D.46851_4 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.46854_5 = *flag_pole_3(D);
  D.46855_6 = D.46854_5 | 1;
  *flag_pole_3(D) = D.46855_6;

<bb 6>:
  D.46856_7 = switch_stristr ("~CISCO_SKIP_MARK_BIT_2833", str_1(D));
  if (D.46856_7 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.46854_8 = *flag_pole_3(D);
  D.46859_9 = D.46854_8 & 4294967294;
  *flag_pole_3(D) = D.46859_9;

<bb 8>:
  D.46860_10 = switch_stristr ("SONUS_SEND_INVALID_TIMESTAMP_2833", str_1(D));
  if (D.46860_10 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.46854_11 = *flag_pole_3(D);
  D.46863_12 = D.46854_11 | 2;
  *flag_pole_3(D) = D.46863_12;

<bb 10>:
  D.46864_13 = switch_stristr ("~SONUS_SEND_INVALID_TIMESTAMP_2833", str_1(D));
  if (D.46864_13 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.46854_14 = *flag_pole_3(D);
  D.46867_15 = D.46854_14 & 4294967293;
  *flag_pole_3(D) = D.46867_15;

<bb 12>:
  D.46868_16 = switch_stristr ("IGNORE_MARK_BIT", str_1(D));
  if (D.46868_16 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.46854_17 = *flag_pole_3(D);
  D.46871_18 = D.46854_17 | 4;
  *flag_pole_3(D) = D.46871_18;

<bb 14>:
  D.46872_19 = switch_stristr ("~IGNORE_MARK_BIT", str_1(D));
  if (D.46872_19 != 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.46854_20 = *flag_pole_3(D);
  D.46875_21 = D.46854_20 & 4294967291;
  *flag_pole_3(D) = D.46875_21;

<bb 16>:
  D.46876_22 = switch_stristr ("SEND_LINEAR_TIMESTAMPS", str_1(D));
  if (D.46876_22 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.46854_23 = *flag_pole_3(D);
  D.46879_24 = D.46854_23 | 8;
  *flag_pole_3(D) = D.46879_24;

<bb 18>:
  D.46880_25 = switch_stristr ("~SEND_LINEAR_TIMESTAMPS", str_1(D));
  if (D.46880_25 != 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.46854_26 = *flag_pole_3(D);
  D.46883_27 = D.46854_26 & 4294967287;
  *flag_pole_3(D) = D.46883_27;

<bb 20>:
  D.46884_28 = switch_stristr ("START_SEQ_AT_ZERO", str_1(D));
  if (D.46884_28 != 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.46854_29 = *flag_pole_3(D);
  D.46887_30 = D.46854_29 | 16;
  *flag_pole_3(D) = D.46887_30;

<bb 22>:
  D.46888_31 = switch_stristr ("~START_SEQ_AT_ZERO", str_1(D));
  if (D.46888_31 != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  D.46854_32 = *flag_pole_3(D);
  D.46891_33 = D.46854_32 & 4294967279;
  *flag_pole_3(D) = D.46891_33;

<bb 24>:
  D.46892_34 = switch_stristr ("NEVER_SEND_MARKER", str_1(D));
  if (D.46892_34 != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.46854_35 = *flag_pole_3(D);
  D.46895_36 = D.46854_35 | 32;
  *flag_pole_3(D) = D.46895_36;

<bb 26>:
  D.46896_37 = switch_stristr ("~NEVER_SEND_MARKER", str_1(D));
  if (D.46896_37 != 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.46854_38 = *flag_pole_3(D);
  D.46899_39 = D.46854_38 & 4294967263;
  *flag_pole_3(D) = D.46899_39;

<bb 28>:
  D.46900_40 = switch_stristr ("IGNORE_DTMF_DURATION", str_1(D));
  if (D.46900_40 != 0B)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  D.46854_41 = *flag_pole_3(D);
  D.46903_42 = D.46854_41 | 64;
  *flag_pole_3(D) = D.46903_42;

<bb 30>:
  D.46904_43 = switch_stristr ("~IGNORE_DTMF_DURATION", str_1(D));
  if (D.46904_43 != 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  D.46854_44 = *flag_pole_3(D);
  D.46907_45 = D.46854_44 & 4294967231;
  *flag_pole_3(D) = D.46907_45;

<bb 32>:
  D.46908_46 = switch_stristr ("ACCEPT_ANY_PACKETS", str_1(D));
  if (D.46908_46 != 0B)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.46854_47 = *flag_pole_3(D);
  D.46911_48 = D.46854_47 | 128;
  *flag_pole_3(D) = D.46911_48;

<bb 34>:
  D.46912_49 = switch_stristr ("~ACCEPT_ANY_PACKETS", str_1(D));
  if (D.46912_49 != 0B)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  D.46854_50 = *flag_pole_3(D);
  D.46915_51 = D.46854_50 & 4294967167;
  *flag_pole_3(D) = D.46915_51;

<bb 36>:
  D.46916_52 = switch_stristr ("ACCEPT_ANY_PAYLOAD", str_1(D));
  if (D.46916_52 != 0B)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  D.46854_53 = *flag_pole_3(D);
  D.46919_54 = D.46854_53 | 2048;
  *flag_pole_3(D) = D.46919_54;

<bb 38>:
  D.46920_55 = switch_stristr ("~ACCEPT_ANY_PAYLOAD", str_1(D));
  if (D.46920_55 != 0B)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.46854_56 = *flag_pole_3(D);
  D.46923_57 = D.46854_56 & 4294965247;
  *flag_pole_3(D) = D.46923_57;

<bb 40>:
  D.46924_58 = switch_stristr ("GEN_ONE_GEN_ALL", str_1(D));
  if (D.46924_58 != 0B)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.46854_59 = *flag_pole_3(D);
  D.46927_60 = D.46854_59 | 256;
  *flag_pole_3(D) = D.46927_60;

<bb 42>:
  D.46928_61 = switch_stristr ("~GEN_ONE_GEN_ALL", str_1(D));
  if (D.46928_61 != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  D.46854_62 = *flag_pole_3(D);
  D.46931_63 = D.46854_62 & 4294967039;
  *flag_pole_3(D) = D.46931_63;

<bb 44>:
  D.46932_64 = switch_stristr ("CHANGE_SSRC_ON_MARKER", str_1(D));
  if (D.46932_64 != 0B)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  D.46854_65 = *flag_pole_3(D);
  D.46935_66 = D.46854_65 | 512;
  *flag_pole_3(D) = D.46935_66;

<bb 46>:
  D.46936_67 = switch_stristr ("~CHANGE_SSRC_ON_MARKER", str_1(D));
  if (D.46936_67 != 0B)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.46854_68 = *flag_pole_3(D);
  D.46939_69 = D.46854_68 & 4294966783;
  *flag_pole_3(D) = D.46939_69;

<bb 48>:
  D.46940_70 = switch_stristr ("FLUSH_JB_ON_DTMF", str_1(D));
  if (D.46940_70 != 0B)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  D.46854_71 = *flag_pole_3(D);
  D.46943_72 = D.46854_71 | 1024;
  *flag_pole_3(D) = D.46943_72;

<bb 50>:
  D.46944_73 = switch_stristr ("~FLUSH_JB_ON_DTMF", str_1(D));
  if (D.46944_73 != 0B)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  D.46854_74 = *flag_pole_3(D);
  D.46947_75 = D.46854_74 & 4294966271;
  *flag_pole_3(D) = D.46947_75;

<bb 52>:
  return;

}



;; Function switch_core_media_add_crypto (switch_core_media_add_crypto)

switch_core_media_add_crypto (struct switch_secure_settings_t * ssec, const char * key_str, switch_rtp_crypto_direction_t direction)
{
  static const char __func__[29] = "switch_core_media_add_crypto";
  char * p;
  switch_rtp_crypto_key_type_t type;
  unsigned char key[64];
  switch_status_t D.46846;
  void * restrict D.46845;
  unsigned char * D.46844;
  size_t D.46842;
  int D.46841;
  void * restrict D.46839;
  unsigned char * D.46838;
  int D.46833;
  char D.46822;
  char D.46818;

<bb 2>:
  p_3 = __builtin_strchr (key_str_2(D), 32);
  # DEBUG p => p_3
  if (p_3 != 0B)
    goto <bb 3>;
  else
    goto <bb 15> (bad);

<bb 3>:
  D.46818_4 = *p_3;
  if (D.46818_4 != 0)
    goto <bb 4>;
  else
    goto <bb 15> (bad);

<bb 4>:
  D.46822_6 = MEM[(char *)p_3 + 1B];
  if (D.46822_6 != 0)
    goto <bb 5>;
  else
    goto <bb 15> (bad);

<bb 5>:
  p_7 = p_3 + 1;
  # DEBUG p => p_7
  type_8 = switch_core_media_crypto_str2type (p_7);
  # DEBUG type => type_8
  if (type_8 == 9)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 949, 0B, 3, "Parse Error near [%s]\n", p_7);
  goto <bb 15> (bad);

<bb 7>:
  p_9 = __builtin_strchr (p_7, 32);
  # DEBUG p => p_9
  if (p_9 != 0B)
    goto <bb 8>;
  else
    goto <bb 15> (bad);

<bb 8>:
  D.46818_10 = *p_9;
  if (D.46818_10 != 0)
    goto <bb 9>;
  else
    goto <bb 15> (bad);

<bb 9>:
  D.46822_12 = MEM[(char *)p_9 + 1B];
  if (D.46822_12 != 0)
    goto <bb 10>;
  else
    goto <bb 15> (bad);

<bb 10>:
  p_13 = p_9 + 1;
  # DEBUG p => p_13
  D.46833_14 = strncasecmp (p_13, "inline:", 7);
  if (D.46833_14 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 957, 0B, 3, "Parse Error near [%s]\n", p_13);
  goto <bb 15> (bad);

<bb 12>:
  p_15 = &MEM[(void *)p_9 + 8B];
  # DEBUG p => p_15
  switch_b64_decode (p_15, &key, 64);
  if (direction_16(D) == 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.46838_18 = &ssec_17(D)->local_raw_key[0];
  D.46839_19 = (void * restrict) D.46838_18;
  D.46841_21 = SUITES[type_8].keylen;
  D.46842_22 = (size_t) D.46841_21;
  memcpy (D.46839_19, &key[0], D.46842_22);
  goto <bb 16>;

<bb 14>:
  D.46844_23 = &ssec_17(D)->remote_raw_key[0];
  D.46845_24 = (void * restrict) D.46844_23;
  D.46841_26 = SUITES[type_8].keylen;
  D.46842_27 = (size_t) D.46841_26;
  memcpy (D.46845_24, &key[0], D.46842_27);
  goto <bb 16>;

bad:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 976, 0B, 3, "Error!\n");

<bb 16>:
  # D.46846_1 = PHI <0(14), 1(15), 0(13)>
  return D.46846_1;

}



;; Function switch_core_session_apply_crypto (switch_core_session_apply_crypto)

switch_core_session_apply_crypto (struct switch_core_session_t * session, switch_media_type_t type)
{
  const char * varname;
  struct switch_rtp_engine_t * engine;
  char * D.43903;
  unsigned char[64] * D.43902;
  uint32_t D.43901;
  int D.43900;
  switch_size_t D.43899;
  int D.43898;
  unsigned char[64] * D.43897;
  switch_rtp_crypto_key_type_t D.43896;
  struct switch_rtp_t * D.43895;
  struct switch_secure_settings_t * D.43894;
  uint32_t D.43889;
  char * D.43886;
  switch_rtp_crypto_key_type_t D.43885;
  uint32_t D.43882;
  struct switch_channel_t * D.43881;
  struct switch_media_handle_t * D.43876;

<bb 2>:
  if (type_2(D) == 0)
    goto <bb 4>;
  else
    goto <bb 3>;

<bb 3>:
  # DEBUG varname => "rtp_secure_video_confirmed"

<bb 4>:
  # varname_1 = PHI <"rtp_secure_audio_confirmed"(2), "rtp_secure_video_confirmed"(3)>
  # DEBUG varname => varname_1
  D.43876_6 = session_5(D)->media_handle;
  if (D.43876_6 == 0B)
    goto <bb 9>;
  else
    goto <bb 5>;

<bb 5>:
  D.43876_7 = session_5(D)->media_handle;
  engine_10 = &D.43876_7->engines[type_2(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_10
  D.43881_11 = session_5(D)->channel;
  D.43882_12 = switch_channel_test_flag (D.43881_11, 84);
  if (D.43882_12 != 0)
    goto <bb 9>;
  else
    goto <bb 6>;

<bb 6>:
  D.43885_13 = engine_10->crypto_type;
  D.43886_14 = engine_10->ssec[D.43885_13].remote_crypto_key;
  if (D.43886_14 != 0B)
    goto <bb 7>;
  else
    goto <bb 9>;

<bb 7>:
  D.43881_15 = session_5(D)->channel;
  D.43889_16 = switch_channel_test_flag (D.43881_15, 92);
  if (D.43889_16 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.43885_18 = engine_10->crypto_type;
  D.43894_20 = &engine_10->ssec[D.43885_18]{lb: 0 sz: 144};
  D.43885_21 = engine_10->crypto_type;
  D.43886_22 = engine_10->ssec[D.43885_21].remote_crypto_key;
  switch_core_media_add_crypto (D.43894_20, D.43886_22, 1);
  D.43895_23 = engine_10->rtp_session;
  D.43885_26 = engine_10->crypto_type;
  D.43897_27 = &engine_10->ssec[D.43885_26].local_raw_key;
  D.43885_28 = engine_10->crypto_type;
  D.43896_29 = engine_10->ssec[D.43885_28].crypto_type;
  D.43898_30 = SUITES[D.43896_29].keylen;
  D.43899_31 = (switch_size_t) D.43898_30;
  switch_rtp_add_crypto_key (D.43895_23, 0, 1, D.43896_29, D.43897_27, D.43899_31);
  D.43895_32 = engine_10->rtp_session;
  D.43885_33 = engine_10->crypto_type;
  D.43900_34 = engine_10->ssec[D.43885_33].crypto_tag;
  D.43901_35 = (uint32_t) D.43900_34;
  D.43885_38 = engine_10->crypto_type;
  D.43902_39 = &engine_10->ssec[D.43885_38].remote_raw_key;
  D.43885_40 = engine_10->crypto_type;
  D.43896_41 = engine_10->ssec[D.43885_40].crypto_type;
  D.43898_42 = SUITES[D.43896_41].keylen;
  D.43899_43 = (switch_size_t) D.43898_42;
  switch_rtp_add_crypto_key (D.43895_32, 1, D.43901_35, D.43896_41, D.43902_39, D.43899_43);
  D.43881_44 = session_5(D)->channel;
  switch_channel_set_variable_var_check (D.43881_44, varname_1, "true", 1);
  D.43881_45 = session_5(D)->channel;
  D.43885_46 = engine_10->crypto_type;
  D.43903_47 = SUITES[D.43885_46].name;
  switch_channel_set_variable_var_check (D.43881_45, "rtp_secure_media_negotiated", D.43903_47, 1);

<bb 9>:
  return;

}



;; Function switch_core_media_set_rtp_session (switch_core_media_set_rtp_session)

switch_core_media_set_rtp_session (struct switch_core_session_t * session, switch_media_type_t type, struct switch_rtp_t * rtp_session)
{
  struct switch_rtp_engine_t * engine;
  unsigned int D.46814;
  struct switch_media_handle_t * D.46810;

<bb 2>:
  D.46810_2 = session_1(D)->media_handle;
  if (D.46810_2 == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

<bb 3>:
  D.46810_3 = session_1(D)->media_handle;
  engine_7 = &D.46810_3->engines[type_5(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_7
  engine_7->rtp_session = rtp_session_8(D);
  engine_7->type = type_5(D);

<bb 4>:
  return;

}



;; Function switch_core_session_check_incoming_crypto (switch_core_session_check_incoming_crypto)

switch_core_session_check_incoming_crypto (struct switch_core_session_t * session, const char * varname, switch_media_type_t type, const char * crypto, int crypto_tag, switch_sdp_type_t sdp_type)
{
  const char D.47416;
  int D.47415;
  int D.47412;
  const char * b;
  const char * a;
  switch_rtp_crypto_key_type_t j;
  static const char __func__[42] = "switch_core_session_check_incoming_crypto";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  const char * vval;
  int ctype;
  int i;
  int got_crypto;
  char * D.46805;
  struct switch_channel_t * D.46804;
  struct switch_core_session_t * D.46803;
  const char * D.46802;
  const char * D.46798;
  char * D.46795;
  uint8_t D.46790;
  switch_size_t D.46789;
  int D.46788;
  unsigned char[64] * D.46787;
  uint32_t D.46786;
  int D.46785;
  struct switch_secure_settings_t * D.46784;
  uint32_t D.46779;
  uint8_t D.46776;
  const char * D.46775;
  const char * D.46771;
  switch_media_type_t D.46768;
  char * D.46767;
  int D.46765;
  _Bool D.46763;
  _Bool D.46762;
  _Bool D.46761;
  switch_size_t D.46758;
  int D.46757;
  unsigned char[64] * D.46756;
  switch_rtp_crypto_key_type_t D.46755;
  uint32_t D.46754;
  switch_rtp_crypto_key_type_t ctype.166;
  int D.38621;
  uint8_t D.46741;
  struct switch_rtp_t * D.46740;
  char * D.46738;
  switch_rtp_crypto_key_type_t D.46737;
  struct switch_channel_t * D.46734;
  switch_rtp_crypto_key_type_t D.46733;
  const char * D.46730;
  char * D.46729;
  switch_rtp_crypto_key_type_t D.46728;
  struct switch_media_handle_t * D.46725;
  switch_rtp_crypto_mode_t D.46722;

<bb 2>:
  # DEBUG got_crypto => 0
  # DEBUG i => 0
  # DEBUG ctype => 0
  # DEBUG vval => 0B
  smh_11 = session_10(D)->media_handle;
  # DEBUG smh => smh_11
  if (smh_11 == 0B)
    goto <bb 42>;
  else
    goto <bb 3>;

<bb 3>:
  D.46722_13 = smh_11->crypto_mode;
  if (D.46722_13 == 2)
    goto <bb 42>;
  else
    goto <bb 4>;

<bb 4>:
  D.46725_15 = session_10(D)->media_handle;
  engine_19 = &D.46725_15->engines[type_17(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_19
  # DEBUG i => 0
  goto <bb 8>;

<bb 5>:
  D.46728_22 = smh_11->crypto_suite_order[i_2];
  j_23 = SUITES[D.46728_22].type;
  # DEBUG j => j_23
  D.46729_24 = SUITES[j_23].name;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1179, session_10(D), 7, "looking for crypto suite [%s] in [%s]\n", D.46729_24, crypto_25(D));
  D.46729_26 = SUITES[j_23].name;
  D.46730_27 = switch_stristr (D.46729_26, crypto_25(D));
  if (D.46730_27 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.46733_28 = SUITES[j_23].type;
  ctype_29 = (int) D.46733_28;
  # DEBUG ctype => ctype_29
  vval_30 = SUITES[j_23].name;
  # DEBUG vval => vval_30
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1184, session_10(D), 7, "Found suite %s\n", vval_30);
  D.46734_31 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_31, "rtp_secure_media_negotiated", vval_30, 1);
  goto <bb 9>;

<bb 7>:
  i_32 = i_2 + 1;
  # DEBUG i => i_32

<bb 8>:
  # i_2 = PHI <0(4), i_32(7)>
  # DEBUG i => i_2
  D.46728_21 = smh_11->crypto_suite_order[i_2];
  if (D.46728_21 != 9)
    goto <bb 5>;
  else
    goto <bb 9>;

<bb 9>:
  # ctype_3 = PHI <ctype_29(6), 0(8)>
  # vval_4 = PHI <vval_30(6), 0B(8)>
  # DEBUG vval => vval_4
  # DEBUG ctype => ctype_3
  D.46737_33 = engine_19->crypto_type;
  D.46738_34 = engine_19->ssec[D.46737_33].remote_crypto_key;
  if (D.46738_34 != 0B)
    goto <bb 10>;
  else
    goto <bb 29>;

<bb 10>:
  D.46740_35 = engine_19->rtp_session;
  D.46741_36 = switch_rtp_ready (D.46740_35);
  if (D.46741_36 != 0)
    goto <bb 11>;
  else
    goto <bb 29>;

<bb 11>:
  if (crypto_25(D) != 0B)
    goto <bb 12>;
  else
    goto <bb 15>;

<bb 12>:
  D.46737_37 = engine_19->crypto_type;
  if (D.46737_37 != 9)
    goto <bb 13>;
  else
    goto <bb 15>;

<bb 13>:
  D.46737_38 = engine_19->crypto_type;
  D.46738_39 = engine_19->ssec[D.46737_38].remote_crypto_key;
  D.38621_40 = __builtin_strcmp (crypto_25(D), D.46738_39);
  if (D.38621_40 == 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1193, session_10(D), 7, "Existing key is still valid.\n");
  # DEBUG got_crypto => 1
  goto <bb 41> (end);

<bb 15>:
  D.46737_42 = engine_19->crypto_type;
  D.46738_43 = engine_19->ssec[D.46737_42].remote_crypto_key;
  a_44 = switch_stristr ("AE", D.46738_43);
  # DEBUG a => a_44
  b_45 = switch_stristr ("AE", crypto_25(D));
  # DEBUG b => b_45
  if (sdp_type_46(D) == 0)
    goto <bb 16>;
  else
    goto <bb 19>;

<bb 16>:
  if (vval_4 == 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1201, session_10(D), 7, "Unsupported Crypto [%s]\n", crypto_25(D));
  goto <bb 41> (end);

<bb 18>:
  D.46734_47 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_47, varname_48(D), vval_4, 1);
  D.46725_49 = session_10(D)->media_handle;
  ctype.166_50 = (switch_rtp_crypto_key_type_t) ctype_3;
  switch_core_media_build_crypto.constprop.8 (D.46725_49, type_17(D), crypto_tag_51(D), ctype.166_50, 1);
  D.46740_52 = engine_19->rtp_session;
  # DEBUG __nptr => crypto_25(D)
  D.47412_185 = strtol (crypto_25(D), 0B, 10);
  D.46754_54 = (uint32_t) D.47412_185;
  D.46737_55 = engine_19->crypto_type;
  D.46755_56 = engine_19->ssec[D.46737_55].crypto_type;
  D.46737_57 = engine_19->crypto_type;
  D.46756_58 = &engine_19->ssec[D.46737_57].local_raw_key;
  D.46757_59 = SUITES[ctype_3].keylen;
  D.46758_60 = (switch_size_t) D.46757_59;
  switch_rtp_add_crypto_key (D.46740_52, 0, D.46754_54, D.46755_56, D.46756_58, D.46758_60);

<bb 19>:
  D.46761_61 = a_44 != 0B;
  D.46762_62 = b_45 != 0B;
  D.46763_63 = D.46761_61 && D.46762_62;
  if (D.46763_63 != 0)
    goto <bb 20>;
  else
    goto <bb 28>;

<bb 20>:
  D.46765_64 = strncasecmp (a_44, b_45, 23);
  if (D.46765_64 == 0)
    goto <bb 21>;
  else
    goto <bb 28>;

<bb 21>:
  ctype.166_65 = (switch_rtp_crypto_key_type_t) ctype_3;
  engine_19->crypto_type = ctype.166_65;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1214, session_10(D), 7, "Change Remote key to [%s]\n", crypto_25(D));
  D.46737_66 = engine_19->crypto_type;
  D.46767_67 = switch_core_perform_session_strdup (session_10(D), crypto_25(D), "src/switch_core_media.c", &__func__, 1215);
  engine_19->ssec[D.46737_66].remote_crypto_key = D.46767_67;
  D.46768_68 = engine_19->type;
  if (D.46768_68 == 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.46734_69 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_69, "srtp_remote_audio_crypto_key", crypto_25(D), 1);
  D.46734_70 = session_10(D)->channel;
  switch_channel_set_variable_printf (D.46734_70, "srtp_remote_audio_crypto_tag", "%d", crypto_tag_51(D));
  D.46734_71 = session_10(D)->channel;
  ctype.166_72 = (switch_rtp_crypto_key_type_t) ctype_3;
  D.46771_73 = switch_core_media_crypto_type2str (ctype.166_72);
  switch_channel_set_variable_printf (D.46734_71, "srtp_remote_audio_crypto_type", "%s", D.46771_73);
  goto <bb 25>;

<bb 23>:
  D.46768_74 = engine_19->type;
  if (D.46768_74 == 1)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  D.46734_75 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_75, "srtp_remote_video_crypto_key", crypto_25(D), 1);
  D.46734_76 = session_10(D)->channel;
  switch_channel_set_variable_printf (D.46734_76, "srtp_remote_video_crypto_tag", "%d", crypto_tag_51(D));
  D.46734_77 = session_10(D)->channel;
  ctype.166_78 = (switch_rtp_crypto_key_type_t) ctype_3;
  D.46775_79 = switch_core_media_crypto_type2str (ctype.166_78);
  switch_channel_set_variable_printf (D.46734_77, "srtp_remote_video_crypto_type", "%s", D.46775_79);

<bb 25>:
  D.46737_80 = engine_19->crypto_type;
  engine_19->ssec[D.46737_80].crypto_tag = crypto_tag_51(D);
  D.46740_81 = engine_19->rtp_session;
  D.46776_82 = switch_rtp_ready (D.46740_81);
  if (D.46776_82 != 0)
    goto <bb 26>;
  else
    goto <bb 41> (end);

<bb 26>:
  D.46734_83 = session_10(D)->channel;
  D.46779_84 = switch_channel_test_flag (D.46734_83, 92);
  if (D.46779_84 != 0)
    goto <bb 27>;
  else
    goto <bb 41> (end);

<bb 27>:
  D.46737_86 = engine_19->crypto_type;
  D.46784_88 = &engine_19->ssec[D.46737_86]{lb: 0 sz: 144};
  D.46737_89 = engine_19->crypto_type;
  D.46738_90 = engine_19->ssec[D.46737_89].remote_crypto_key;
  switch_core_media_add_crypto (D.46784_88, D.46738_90, 1);
  D.46740_91 = engine_19->rtp_session;
  D.46737_92 = engine_19->crypto_type;
  D.46785_93 = engine_19->ssec[D.46737_92].crypto_tag;
  D.46786_94 = (uint32_t) D.46785_93;
  D.46737_97 = engine_19->crypto_type;
  D.46787_98 = &engine_19->ssec[D.46737_97].remote_raw_key;
  D.46737_99 = engine_19->crypto_type;
  D.46755_100 = engine_19->ssec[D.46737_99].crypto_type;
  D.46788_101 = SUITES[D.46755_100].keylen;
  D.46789_102 = (switch_size_t) D.46788_101;
  switch_rtp_add_crypto_key (D.46740_91, 1, D.46786_94, D.46755_100, D.46787_98, D.46789_102);
  goto <bb 41> (end);

<bb 28>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1238, session_10(D), 7, "Ignoring unacceptable key\n");
  goto <bb 41> (end);

<bb 29>:
  D.46740_104 = engine_19->rtp_session;
  D.46790_105 = switch_rtp_ready (D.46740_104);
  if (D.46790_105 == 0)
    goto <bb 30>;
  else
    goto <bb 41> (end);

<bb 30>:
  if (vval_4 == 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1244, session_10(D), 7, "Unsupported Crypto [%s]\n", crypto_25(D));
  goto <bb 41> (end);

<bb 32>:
  ctype.166_106 = (switch_rtp_crypto_key_type_t) ctype_3;
  engine_19->crypto_type = ctype.166_106;
  D.46737_107 = engine_19->crypto_type;
  D.46795_108 = switch_core_perform_session_strdup (session_10(D), crypto_25(D), "src/switch_core_media.c", &__func__, 1249);
  engine_19->ssec[D.46737_107].remote_crypto_key = D.46795_108;
  D.46737_109 = engine_19->crypto_type;
  D.46738_110 = engine_19->ssec[D.46737_109].remote_crypto_key;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1250, session_10(D), 7, "Set Remote Key [%s]\n", D.46738_110);
  D.46768_111 = engine_19->type;
  if (D.46768_111 == 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.46734_112 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_112, "srtp_remote_audio_crypto_key", crypto_25(D), 1);
  D.46734_113 = session_10(D)->channel;
  ctype.166_114 = (switch_rtp_crypto_key_type_t) ctype_3;
  D.46798_115 = switch_core_media_crypto_type2str (ctype.166_114);
  switch_channel_set_variable_printf (D.46734_113, "srtp_remote_audio_crypto_type", "%s", D.46798_115);
  goto <bb 36>;

<bb 34>:
  D.46768_116 = engine_19->type;
  if (D.46768_116 == 1)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  D.46734_117 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_117, "srtp_remote_video_crypto_key", crypto_25(D), 1);
  D.46734_118 = session_10(D)->channel;
  ctype.166_119 = (switch_rtp_crypto_key_type_t) ctype_3;
  D.46802_120 = switch_core_media_crypto_type2str (ctype.166_119);
  switch_channel_set_variable_printf (D.46734_118, "srtp_remote_video_crypto_type", "%s", D.46802_120);

<bb 36>:
  D.46737_121 = engine_19->crypto_type;
  engine_19->ssec[D.46737_121].crypto_tag = crypto_tag_51(D);
  # DEBUG got_crypto => 1
  D.46734_123 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_123, varname_48(D), vval_4, 1);
  D.46803_124 = smh_11->session;
  D.46804_125 = D.46803_124->channel;
  switch_channel_set_flag_value (D.46804_125, 92, 1);
  D.46737_126 = engine_19->crypto_type;
  D.46805_127 = engine_19->ssec[D.46737_126].local_crypto_key;
  # DEBUG s => D.46805_127
  if (D.46805_127 == 0B)
    goto <bb 39>;
  else
    goto <bb 37>;

<bb 37>:
  D.47416_186 = MEM[(const char *)D.46805_127];
  if (D.47416_186 == 0)
    goto <bb 39>;
  else
    goto <bb 38>;

<bb 38>:

<bb 39>:
  # D.47415_187 = PHI <1(36), 1(37), 0(38)>
  if (D.47415_187 != 0)
    goto <bb 40>;
  else
    goto <bb 41> (end);

<bb 40>:
  D.46725_129 = session_10(D)->media_handle;
  ctype.166_130 = (switch_rtp_crypto_key_type_t) ctype_3;
  switch_core_media_build_crypto.constprop.8 (D.46725_129, type_17(D), crypto_tag_51(D), ctype.166_130, 1);

  # got_crypto_1 = PHI <0(17), 1(26), 0(29), 0(31), 1(39), 1(40), 1(14), 0(28), 1(25), 1(27)>
end:
  # DEBUG got_crypto => got_crypto_1

<bb 42>:
  # got_crypto_5 = PHI <0(2), -1(3), got_crypto_1(41)>
  return got_crypto_5;

}



;; Function switch_media_handle_create (switch_media_handle_create)

switch_media_handle_create (struct switch_media_handle_t * * smhp, struct switch_core_session_t * session, struct switch_core_media_params_t * params)
{
  const char D.47421;
  int D.47420;
  static const char __func__[27] = "switch_media_handle_create";
  int i;
  switch_status_t status;
  struct switch_channel_t * D.46496;
  struct payload_map_t * D.46495;
  struct payload_map_t * D.46494;
  void * D.46493;
  struct payload_map_t * D.46492;
  struct payload_map_t * D.46491;
  void * D.46490;
  struct switch_memory_pool_t * D.46489;
  unsigned int D.46488;
  unsigned int D.46487;
  unsigned int D.46486;
  time_t D.46485;
  unsigned int D.46484;
  struct switch_rtp_engine_t * D.46483;
  unsigned int D.46482;
  unsigned int D.46481;
  time_t D.46480;
  unsigned int D.46479;
  struct switch_rtp_engine_t[2] * D.46478;
  struct switch_memory_pool_t * D.46477;
  struct switch_mutex_t * * D.46476;
  struct switch_memory_pool_t * D.46475;
  struct switch_mutex_t * * D.46474;
  switch_rtp_crypto_key_type_t i.136;
  unsigned int D.46472;
  smh_flag_t D.46471;
  struct switch_media_handle_t * D.46468;
  void * D.46467;
  char * D.46463;

<bb 2>:
  # DEBUG status => 1
  # DEBUG smh => 0B
  *smhp_7(D) = 0B;
  D.46463_9 = params_8(D)->sdp_username;
  # DEBUG s => D.46463_9
  if (D.46463_9 == 0B)
    goto <bb 5>;
  else
    goto <bb 3>;

<bb 3>:
  D.47421_119 = MEM[(const char *)D.46463_9];
  if (D.47421_119 == 0)
    goto <bb 5>;
  else
    goto <bb 4>;

<bb 4>:

<bb 5>:
  # D.47420_120 = PHI <1(2), 1(3), 0(4)>
  if (D.47420_120 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  params_8(D)->sdp_username = "FreeSWITCH";

<bb 7>:
  D.46467_12 = switch_core_perform_session_alloc (session_11(D), 23856, "src/switch_core_media.c", &__func__, 1426);
  session_11(D)->media_handle = D.46467_12;
  D.46468_13 = session_11(D)->media_handle;
  if (D.46468_13 != 0B)
    goto <bb 8>;
  else
    goto <bb 18>;

<bb 8>:
  D.46468_14 = session_11(D)->media_handle;
  D.46468_14->session = session_11(D);
  D.46468_15 = session_11(D)->media_handle;
  *smhp_7(D) = D.46468_15;
  D.46468_17 = session_11(D)->media_handle;
  D.46471_18 = D.46468_17->flags;
  D.46472_19 = D.46471_18 | 1;
  D.46468_17->flags = D.46472_19;
  D.46468_20 = session_11(D)->media_handle;
  D.46468_20->media_flags[0] = 1;
  D.46468_21 = session_11(D)->media_handle;
  D.46468_21->engines[0].read_frame.buflen = 16384;
  D.46468_22 = session_11(D)->media_handle;
  D.46468_22->engines[0].type = 0;
  D.46468_23 = session_11(D)->media_handle;
  D.46468_23->engines[0].crypto_type = 9;
  # DEBUG i => 0
  goto <bb 10>;

<bb 9>:
  D.46468_25 = session_11(D)->media_handle;
  i.136_26 = (switch_rtp_crypto_key_type_t) i_2;
  D.46468_25->engines[0].ssec[i_2].crypto_type = i.136_26;
  i_27 = i_2 + 1;
  # DEBUG i => i_27

<bb 10>:
  # i_2 = PHI <0(8), i_27(9)>
  # DEBUG i => i_2
  if (i_2 <= 8)
    goto <bb 9>;
  else
    goto <bb 11>;

<bb 11>:
  D.46468_28 = session_11(D)->media_handle;
  D.46468_28->engines[1].read_frame.buflen = 16384;
  D.46468_29 = session_11(D)->media_handle;
  D.46468_29->engines[1].type = 1;
  D.46468_30 = session_11(D)->media_handle;
  D.46468_30->engines[1].crypto_type = 9;
  # DEBUG i => 0
  goto <bb 13>;

<bb 12>:
  D.46468_32 = session_11(D)->media_handle;
  i.136_33 = (switch_rtp_crypto_key_type_t) i_3;
  D.46468_32->engines[1].ssec[i_3].crypto_type = i.136_33;
  i_34 = i_3 + 1;
  # DEBUG i => i_34

<bb 13>:
  # i_3 = PHI <0(11), i_34(12)>
  # DEBUG i => i_3
  if (i_3 <= 8)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 14>:
  D.46468_35 = session_11(D)->media_handle;
  D.46468_35->mparams = params_8(D);
  # DEBUG i => 0
  goto <bb 16>;

<bb 15>:
  D.46468_37 = session_11(D)->media_handle;
  D.46468_37->crypto_suite_order[i_4] = 9;
  i_38 = i_4 + 1;
  # DEBUG i => i_38

<bb 16>:
  # i_4 = PHI <0(14), i_38(15)>
  # DEBUG i => i_4
  if (i_4 <= 9)
    goto <bb 15>;
  else
    goto <bb 17>;

<bb 17>:
  D.46468_39 = session_11(D)->media_handle;
  D.46474_40 = &D.46468_39->mutex;
  D.46475_41 = switch_core_session_get_pool (session_11(D));
  switch_mutex_init (D.46474_40, 1, D.46475_41);
  D.46468_42 = session_11(D)->media_handle;
  D.46476_43 = &D.46468_42->sdp_mutex;
  D.46477_44 = switch_core_session_get_pool (session_11(D));
  switch_mutex_init (D.46476_43, 1, D.46477_44);
  D.46468_46 = session_11(D)->media_handle;
  D.46478_47 = &D.46468_46->engines;
  D.46479_48 = (unsigned int) D.46478_47;
  D.46480_49 = time (0B);
  D.46481_50 = (unsigned int) D.46480_49;
  D.46482_51 = D.46479_48 + D.46481_50;
  D.46468_46->engines[0].ssrc = D.46482_51;
  D.46468_53 = session_11(D)->media_handle;
  D.46483_54 = &D.46468_53->engines[1];
  D.46484_55 = (unsigned int) D.46483_54;
  D.46485_56 = time (0B);
  D.46486_57 = (unsigned int) D.46485_56;
  D.46487_58 = D.46486_57 / 2;
  D.46488_59 = D.46484_55 + D.46487_58;
  D.46468_53->engines[1].ssrc = D.46488_59;
  D.46468_60 = session_11(D)->media_handle;
  D.46489_61 = session_11(D)->pool;
  D.46490_62 = switch_core_perform_alloc (D.46489_61, 84, "src/switch_core_media.c", &__func__, 1464);
  D.46468_60->engines[0].payload_map = D.46490_62;
  D.46468_64 = session_11(D)->media_handle;
  D.46491_65 = D.46468_64->engines[0].payload_map;
  D.46468_64->engines[0].cur_payload_map = D.46491_65;
  D.46468_66 = session_11(D)->media_handle;
  D.46492_67 = D.46468_66->engines[0].cur_payload_map;
  D.46492_67->current = 1;
  D.46468_68 = session_11(D)->media_handle;
  D.46489_69 = session_11(D)->pool;
  D.46493_70 = switch_core_perform_alloc (D.46489_69, 84, "src/switch_core_media.c", &__func__, 1467);
  D.46468_68->engines[1].payload_map = D.46493_70;
  D.46468_72 = session_11(D)->media_handle;
  D.46494_73 = D.46468_72->engines[1].payload_map;
  D.46468_72->engines[1].cur_payload_map = D.46494_73;
  D.46468_74 = session_11(D)->media_handle;
  D.46495_75 = D.46468_74->engines[1].cur_payload_map;
  D.46495_75->current = 1;
  D.46496_76 = session_11(D)->channel;
  switch_channel_set_flag_value (D.46496_76, 111, 1);
  # DEBUG status => 0

<bb 18>:
  # status_1 = PHI <1(7), 0(17)>
  # DEBUG status => status_1
  return status_1;

}



;; Function switch_media_handle_set_media_flag (switch_media_handle_set_media_flag)

switch_media_handle_set_media_flag (struct switch_media_handle_t * smh, switch_core_media_flag_t flag)
{
<bb 2>:
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1482, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_1(D)->media_flags[flag_2(D)] = 1;
  return;

}



;; Function switch_media_handle_set_media_flags (switch_media_handle_set_media_flags)

switch_media_handle_set_media_flags (struct switch_media_handle_t * smh, switch_core_media_flag_t * flags)
{
  static const char __PRETTY_FUNCTION__[36] = "switch_media_handle_set_media_flags";
  int i;
  switch_core_media_flag_t D.46458;
  switch_core_media_flag_t * D.46457;
  unsigned int D.46456;
  unsigned int i.135;

<bb 2>:
  if (smh_2(D) == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

<bb 3>:
  i_3 = 0;
  goto <bb 8>;

<bb 4>:
  __assert_fail ("smh", "src/switch_core_media.c", 1491, &__PRETTY_FUNCTION__);

<bb 5>:
  i.135_4 = (unsigned int) i_1;
  D.46456_5 = i.135_4 * 4;
  D.46457_7 = flags_6(D) + D.46456_5;
  D.46458_8 = *D.46457_7;
  if (D.46458_8 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  i.135_9 = (unsigned int) i_1;
  D.46456_10 = i.135_9 * 4;
  D.46457_11 = flags_6(D) + D.46456_10;
  D.46458_12 = *D.46457_11;
  smh_2(D)->media_flags[i_1] = D.46458_12;

<bb 7>:
  i_13 = i_1 + 1;
  # DEBUG i => i_13

<bb 8>:
  # i_1 = PHI <0(3), i_13(7)>
  # DEBUG i => i_1
  if (i_1 <= 16)
    goto <bb 5>;
  else
    goto <bb 9>;

<bb 9>:
  return;

}



;; Function switch_media_handle_clear_media_flag (switch_media_handle_clear_media_flag)

switch_media_handle_clear_media_flag (struct switch_media_handle_t * smh, switch_core_media_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[37] = "switch_media_handle_clear_media_flag";

<bb 2>:
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1503, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_1(D)->media_flags[flag_2(D)] = 0;
  return;

}



;; Function switch_media_handle_test_media_flag (switch_media_handle_test_media_flag)

switch_media_handle_test_media_flag (struct switch_media_handle_t * smh, switch_core_media_flag_t flag)
{
  switch_core_media_flag_t D.46449;
  int32_t D.46448;

<bb 2>:
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1510, &__PRETTY_FUNCTION__);

<bb 4>:
  D.46449_3 = smh_1(D)->media_flags[flag_2(D)];
  D.46448_4 = (int32_t) D.46449_3;
  return D.46448_4;

}



;; Function generate_m.isra.4 (generate_m.isra.4)

generate_m.isra.4 (struct switch_core_session_t * session, char * buf, size_t buflen, switch_port_t port, const char * family, const char * ip, int cur_ptime, const char * append_audio, const char * sr, int use_cng, int cng_type, struct switch_event_t * map, int secure)
{
  size_t D.47711;
  char * D.47710;
  size_t D.47709;
  size_t D.47708;
  int D.47707;
  int iftmp.40;
  struct switch_channel_t * D.47705;
  switch_call_direction_t D.47704;
  switch_rtp_crypto_key_type_t D.47703;
  const char * D.47702;
  const int D.47701;
  char * const D.47700;
  int D.47699;
  int D.47698;
  const switch_codec_type_t D.47697;
  switch_payload_t D.47696;
  signed char D.47695;
  int D.47694;
  int D.47693;
  size_t D.47692;
  char * D.47691;
  size_t D.47690;
  size_t D.47689;
  struct switch_core_media_params_t * D.47688;
  int D.47687;
  switch_core_media_dtmf_t D.47686;
  switch_payload_t D.47685;
  size_t D.47684;
  char * D.47683;
  size_t D.47682;
  size_t D.47681;
  int D.47680;
  int32_t D.47679;
  _Bool D.47678;
  _Bool D.47677;
  _Bool D.47676;
  size_t D.47675;
  char * D.47674;
  size_t D.47673;
  size_t D.47672;
  size_t D.47671;
  char * D.47670;
  size_t D.47669;
  size_t D.47668;
  const int D.47667;
  const switch_codec_type_t D.47666;
  char * const D.47665;
  int D.47664;
  int D.47663;
  const uint32_t D.47662;
  const int D.47661;
  char * D.47660;
  uint32_t D.47659;
  const uint8_t D.47658;
  int D.47657;
  size_t D.47656;
  char * D.47655;
  size_t D.47654;
  size_t D.47653;
  size_t D.47652;
  char * D.47651;
  size_t D.47650;
  size_t D.47649;
  size_t D.47648;
  char * D.47647;
  size_t D.47646;
  size_t D.47645;
  int32_t D.47644;
  uint32_t D.47643;
  uint32_t D.47642;
  size_t D.47641;
  char * D.47640;
  size_t D.47639;
  size_t D.47638;
  size_t D.47637;
  char * D.47636;
  size_t D.47635;
  size_t D.47634;
  char * D.47633;
  size_t D.47632;
  char * D.47631;
  size_t D.47630;
  size_t D.47629;
  char[192] * D.47628;
  char * D.47627;
  int8_t D.47626;
  size_t D.47625;
  char * D.47624;
  size_t D.47623;
  size_t D.47622;
  size_t D.47621;
  char * D.47620;
  size_t D.47619;
  size_t D.47618;
  size_t D.47617;
  char * D.47616;
  size_t D.47615;
  size_t D.47614;
  int D.47613;
  uint8_t D.47612;
  size_t D.47611;
  char * D.47610;
  size_t D.47609;
  size_t D.47608;
  uint32_t D.47607;
  char * D.47606;
  size_t D.47605;
  char * D.47604;
  size_t D.47603;
  size_t D.47602;
  char * D.47601;
  size_t D.47600;
  char * D.47599;
  size_t D.47598;
  size_t D.47597;
  size_t D.47596;
  char * D.47595;
  size_t D.47594;
  size_t D.47593;
  size_t D.47592;
  char * D.47591;
  size_t D.47590;
  size_t D.47589;
  char * D.47588;
  size_t D.47587;
  char * D.47586;
  size_t D.47585;
  size_t D.47584;
  char * D.47583;
  size_t D.47582;
  char * D.47581;
  size_t D.47580;
  size_t D.47579;
  char * D.47578;
  char * D.47577;
  switch_port_t D.47576;
  int D.47575;
  char * D.47574;
  int D.47573;
  switch_port_t D.47572;
  size_t D.47571;
  char * D.47570;
  size_t D.47569;
  size_t D.47568;
  int D.47567;
  switch_call_direction_t D.47566;
  size_t D.47565;
  char * D.47564;
  size_t D.47563;
  size_t D.47562;
  int D.47561;
  int D.47560;
  char * D.47559;
  int D.47558;
  switch_port_t D.47557;
  size_t D.47556;
  char * D.47555;
  size_t D.47554;
  size_t D.47553;
  int D.47552;
  uint32_t D.47551;
  switch_rtp_crypto_key_type_t D.47550;
  char * D.47549;
  size_t D.47548;
  char * D.47547;
  size_t D.47546;
  size_t D.47545;
  int32_t D.47544;
  size_t D.47543;
  char * D.47542;
  size_t D.47541;
  size_t D.47540;
  size_t D.47539;
  char * D.47538;
  size_t D.47537;
  size_t D.47536;
  char * iftmp.41;
  const char D.47534;
  size_t D.47533;
  unsigned int D.47532;
  const char D.47531;
  size_t D.47530;
  char * D.47529;
  size_t D.47528;
  size_t D.47527;
  size_t D.47526;
  char * D.47525;
  size_t D.47524;
  size_t D.47523;
  size_t D.47522;
  char * D.47521;
  size_t D.47520;
  size_t D.47519;
  int i;
  int rate;
  int already_did[128];
  const char * local_sdp_audio_zrtp_hash;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[11] = "generate_m";
  static const char __func__[11] = "generate_m";
  const struct switch_codec_implementation_t * imp;
  const struct switch_codec_implementation_t * imp;
  char * fmtp;
  char key[128];
  int channels;
  char tmp1[11];
  char tmp2[11];
  int i;
  switch_rtp_crypto_key_type_t j;
  int D.47518;
  const char D.47517;
  int D.47516;
  const char D.47515;
  int D.47514;
  const char D.47513;
  int D.47512;
  const char D.47511;
  int D.47510;
  const char D.47509;
  int D.47508;
  const char D.47507;
  int D.47506;
  const char D.47505;
  static const char __func__[11] = "generate_m";
  static const char __PRETTY_FUNCTION__[11] = "generate_m";

<bb 2>:
  # DEBUG i => 0
  already_did = {};
  # DEBUG ptime => 0
  # DEBUG noptime => 0
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 5614, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 131>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#4 => &smh_2->engines
  # DEBUG a_engine => D#4
  D.47711_4 = strlen (buf_3(D));
  D.47710_5 = buf_3(D) + D.47711_4;
  D.47709_6 = strlen (buf_3(D));
  D.47708_8 = buflen_7(D) - D.47709_6;
  D.47707_10 = (int) port_9(D);
  if (secure_11(D) != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.47705_12 = session_1(D)->channel;
  D.47704_13 = switch_channel_direction (D.47705_12);
  if (D.47704_13 == 1)
    goto <bb 9>;
  else
    goto <bb 7>;

<bb 7>:
  D.47703_14 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].crypto_type;
  if (D.47703_14 != 9)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:

<bb 9>:
  # iftmp.40_15 = PHI <1(6), 0(7), 1(8)>
  D.47702_16 = get_media_profile_name (session_1(D), iftmp.40_15);
  switch_snprintf (D.47710_5, D.47708_8, "m=audio %d %s", D.47707_10, D.47702_16);
  # DEBUG i => 0
  goto <bb 23>;

<bb 10>:
  imp_18 = smh_2->codecs[i_17];
  # DEBUG imp => imp_18
  D.47701_19 = imp_18->microseconds_per_packet;
  cur_ptime_20 = D.47701_19 / 1000;
  # DEBUG this_ptime => cur_ptime_20
  D.47700_21 = imp_18->iananame;
  D.47699_22 = strcasecmp (D.47700_21, "ilbc");
  if (D.47699_22 == 0)
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:
  D.47700_23 = imp_18->iananame;
  D.47698_24 = strcasecmp (D.47700_23, "isac");
  if (D.47698_24 == 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  # DEBUG this_ptime => 20

<bb 13>:
  # cur_ptime_28 = PHI <cur_ptime_20(11), 20(12)>
  # DEBUG this_ptime => cur_ptime_28
  D.47697_25 = imp_18->codec_type;
  if (D.47697_25 != 0)
    goto <bb 22>;
  else
    goto <bb 14>;

<bb 14>:
  if (cur_ptime_26(D) == 0)
    goto <bb 15>;
  else
    goto <bb 17>;

<bb 15>:
  if (cur_ptime_27 == 0)
    goto <bb 16>;
  else
    goto <bb 18>;

<bb 16>:
  # DEBUG ptime => cur_ptime_28
  goto <bb 18>;

<bb 17>:
  if (cur_ptime_26(D) != cur_ptime_28)
    goto <bb 22>;
  else
    goto <bb 18>;

<bb 18>:
  # cur_ptime_340 = PHI <cur_ptime_27(15), cur_ptime_28(16), cur_ptime_27(17)>
  # DEBUG ptime => cur_ptime_340
  D.47696_29 = smh_2->ianacodes[i_17];
  D.47695_30 = (signed char) D.47696_29;
  if (D.47695_30 >= 0)
    goto <bb 19>;
  else
    goto <bb 21>;

<bb 19>:
  D.47696_31 = smh_2->ianacodes[i_17];
  D.47694_32 = (int) D.47696_31;
  D.47693_33 = already_did[D.47694_32];
  if (D.47693_33 != 0)
    goto <bb 22>;
  else
    goto <bb 20>;

<bb 20>:
  D.47696_34 = smh_2->ianacodes[i_17];
  D.47694_35 = (int) D.47696_34;
  already_did[D.47694_35] = 1;

<bb 21>:
  D.47692_36 = strlen (buf_3(D));
  D.47691_37 = buf_3(D) + D.47692_36;
  D.47690_38 = strlen (buf_3(D));
  D.47689_39 = buflen_7(D) - D.47690_38;
  D.47696_40 = smh_2->ianacodes[i_17];
  D.47694_41 = (int) D.47696_40;
  switch_snprintf (D.47691_37, D.47689_39, " %d", D.47694_41);

<bb 22>:
  # cur_ptime_341 = PHI <cur_ptime_27(13), cur_ptime_27(17), cur_ptime_340(19), cur_ptime_340(21)>
  # DEBUG ptime => cur_ptime_341
  i_42 = i_17 + 1;
  # DEBUG i => i_42

<bb 23>:
  # i_17 = PHI <0(9), i_42(22)>
  # cur_ptime_27 = PHI <0(9), cur_ptime_341(22)>
  # DEBUG ptime => cur_ptime_27
  # DEBUG i => i_17
  D.47688_43 = smh_2->mparams;
  D.47687_44 = D.47688_43->num_codecs;
  if (i_17 < D.47687_44)
    goto <bb 10>;
  else
    goto <bb 24>;

<bb 24>:
  D.47688_45 = smh_2->mparams;
  D.47686_46 = D.47688_45->dtmf_type;
  if (D.47686_46 == 0)
    goto <bb 25>;
  else
    goto <bb 27>;

<bb 25>:
  D.47688_47 = smh_2->mparams;
  D.47685_48 = D.47688_47->te;
  if (D.47685_48 > 95)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  D.47684_49 = strlen (buf_3(D));
  D.47683_50 = buf_3(D) + D.47684_49;
  D.47682_51 = strlen (buf_3(D));
  D.47681_52 = buflen_7(D) - D.47682_51;
  D.47688_53 = smh_2->mparams;
  D.47685_54 = D.47688_53->te;
  D.47680_55 = (int) D.47685_54;
  switch_snprintf (D.47683_50, D.47681_52, " %d", D.47680_55);

<bb 27>:
  D.47679_56 = switch_media_handle_test_media_flag (smh_2, 9);
  if (D.47679_56 == 0)
    goto <bb 28>;
  else
    goto <bb 30>;

<bb 28>:
  D.47678_58 = cng_type_57(D) != 0;
  D.47677_60 = use_cng_59(D) != 0;
  D.47676_61 = D.47678_58 && D.47677_60;
  if (D.47676_61 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  D.47675_62 = strlen (buf_3(D));
  D.47674_63 = buf_3(D) + D.47675_62;
  D.47673_64 = strlen (buf_3(D));
  D.47672_65 = buflen_7(D) - D.47673_64;
  switch_snprintf (D.47674_63, D.47672_65, " %d", cng_type_57(D));

<bb 30>:
  D.47671_66 = strlen (buf_3(D));
  D.47670_67 = buf_3(D) + D.47671_66;
  D.47669_68 = strlen (buf_3(D));
  D.47668_69 = buflen_7(D) - D.47669_68;
  switch_snprintf (D.47670_67, D.47668_69, "\n");
  memset (&already_did, 0, 512);
  # DEBUG i => 0
  goto <bb 56>;

<bb 31>:
  imp_71 = smh_2->codecs[i_70];
  # DEBUG imp => imp_71
  fmtp_72 = imp_71->fmtp;
  # DEBUG fmtp => fmtp_72
  D.47667_73 = imp_71->microseconds_per_packet;
  cur_ptime_74 = D.47667_73 / 1000;
  # DEBUG this_ptime => cur_ptime_74
  D.47666_75 = imp_71->codec_type;
  if (D.47666_75 != 0)
    goto <bb 55>;
  else
    goto <bb 32>;

<bb 32>:
  D.47665_76 = imp_71->iananame;
  D.47664_77 = strcasecmp (D.47665_76, "ilbc");
  if (D.47664_77 == 0)
    goto <bb 34>;
  else
    goto <bb 33>;

<bb 33>:
  D.47665_78 = imp_71->iananame;
  D.47663_79 = strcasecmp (D.47665_78, "isac");
  if (D.47663_79 == 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  # DEBUG this_ptime => 20

<bb 35>:
  # cur_ptime_81 = PHI <cur_ptime_74(33), 20(34)>
  # DEBUG this_ptime => cur_ptime_81
  if (cur_ptime_26(D) == 0)
    goto <bb 36>;
  else
    goto <bb 38>;

<bb 36>:
  if (cur_ptime_80 == 0)
    goto <bb 37>;
  else
    goto <bb 39>;

<bb 37>:
  # DEBUG ptime => cur_ptime_81
  goto <bb 39>;

<bb 38>:
  if (cur_ptime_26(D) != cur_ptime_81)
    goto <bb 55>;
  else
    goto <bb 39>;

<bb 39>:
  # cur_ptime_342 = PHI <cur_ptime_80(36), cur_ptime_81(37), cur_ptime_80(38)>
  # DEBUG ptime => cur_ptime_342
  D.47696_82 = smh_2->ianacodes[i_70];
  D.47695_83 = (signed char) D.47696_82;
  if (D.47695_83 >= 0)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 40>:
  D.47696_84 = smh_2->ianacodes[i_70];
  D.47694_85 = (int) D.47696_84;
  D.47693_86 = already_did[D.47694_85];
  if (D.47693_86 != 0)
    goto <bb 55>;
  else
    goto <bb 41>;

<bb 41>:
  D.47696_87 = smh_2->ianacodes[i_70];
  D.47694_88 = (int) D.47696_87;
  already_did[D.47694_88] = 1;

<bb 42>:
  D.47662_89 = imp_71->samples_per_second;
  rate_90 = (int) D.47662_89;
  # DEBUG rate => rate_90
  if (map_91(D) != 0B)
    goto <bb 43>;
  else
    goto <bb 46>;

<bb 43>:
  key = "";
  # DEBUG check => 0B
  D.47665_92 = imp_71->iananame;
  D.47661_93 = imp_71->bits_per_second;
  switch_snprintf (&key, 128, "%s:%u", D.47665_92, D.47661_93);
  fmtp_94 = switch_event_get_header_idx (map_91(D), &key, -1);
  # DEBUG check => fmtp_94
  if (fmtp_94 != 0B)
    goto <bb 45>;
  else
    goto <bb 44>;

<bb 44>:
  D.47665_95 = imp_71->iananame;
  fmtp_96 = switch_event_get_header_idx (map_91(D), D.47665_95, -1);
  # DEBUG check => fmtp_96
  if (fmtp_96 != 0B)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  # fmtp_343 = PHI <fmtp_94(43), fmtp_96(44)>
  # DEBUG check => fmtp_343
  # DEBUG fmtp => fmtp_343

<bb 46>:
  # fmtp_344 = PHI <fmtp_72(42), fmtp_72(44), fmtp_343(45)>
  # DEBUG fmtp => fmtp_344
  D.47660_97 = smh_2->fmtps[i_70];
  if (D.47660_97 != 0B)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  fmtp_98 = smh_2->fmtps[i_70];
  # DEBUG fmtp => fmtp_98

<bb 48>:
  # fmtp_120 = PHI <fmtp_344(46), fmtp_98(47)>
  # DEBUG fmtp => fmtp_120
  D.47696_99 = smh_2->ianacodes[i_70];
  if (D.47696_99 > 95)
    goto <bb 50>;
  else
    goto <bb 49>;

<bb 49>:
  D.47705_100 = session_1(D)->channel;
  D.47659_101 = switch_channel_test_flag (D.47705_100, 110);
  if (D.47659_101 != 0)
    goto <bb 50>;
  else
    goto <bb 53>;

<bb 50>:
  D.47665_102 = imp_71->iananame;
  D.47658_103 = imp_71->number_of_channels;
  D.47657_104 = (int) D.47658_103;
  channels_105 = get_channels (D.47665_102, D.47657_104);
  # DEBUG channels => channels_105
  if (channels_105 > 1)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  D.47656_106 = strlen (buf_3(D));
  D.47655_107 = buf_3(D) + D.47656_106;
  D.47654_108 = strlen (buf_3(D));
  D.47653_109 = buflen_7(D) - D.47654_108;
  D.47696_110 = smh_2->ianacodes[i_70];
  D.47694_111 = (int) D.47696_110;
  D.47665_112 = imp_71->iananame;
  switch_snprintf (D.47655_107, D.47653_109, "a=rtpmap:%d %s/%d/%d\n", D.47694_111, D.47665_112, rate_90, channels_105);
  goto <bb 53>;

<bb 52>:
  D.47652_113 = strlen (buf_3(D));
  D.47651_114 = buf_3(D) + D.47652_113;
  D.47650_115 = strlen (buf_3(D));
  D.47649_116 = buflen_7(D) - D.47650_115;
  D.47696_117 = smh_2->ianacodes[i_70];
  D.47694_118 = (int) D.47696_117;
  D.47665_119 = imp_71->iananame;
  switch_snprintf (D.47651_114, D.47649_116, "a=rtpmap:%d %s/%d\n", D.47694_118, D.47665_119, rate_90);

<bb 53>:
  if (fmtp_120 != 0B)
    goto <bb 54>;
  else
    goto <bb 55>;

<bb 54>:
  D.47648_121 = strlen (buf_3(D));
  D.47647_122 = buf_3(D) + D.47648_121;
  D.47646_123 = strlen (buf_3(D));
  D.47645_124 = buflen_7(D) - D.47646_123;
  D.47696_125 = smh_2->ianacodes[i_70];
  D.47694_126 = (int) D.47696_125;
  switch_snprintf (D.47647_122, D.47645_124, "a=fmtp:%d %s\n", D.47694_126, fmtp_120);

<bb 55>:
  # cur_ptime_345 = PHI <cur_ptime_80(31), cur_ptime_80(38), cur_ptime_342(40), cur_ptime_342(53), cur_ptime_342(54)>
  # DEBUG ptime => cur_ptime_345
  i_127 = i_70 + 1;
  # DEBUG i => i_127

<bb 56>:
  # i_70 = PHI <0(30), i_127(55)>
  # cur_ptime_80 = PHI <cur_ptime_27(30), cur_ptime_345(55)>
  # DEBUG ptime => cur_ptime_80
  # DEBUG i => i_70
  D.47688_128 = smh_2->mparams;
  D.47687_129 = D.47688_128->num_codecs;
  if (i_70 < D.47687_129)
    goto <bb 31>;
  else
    goto <bb 57>;

<bb 57>:
  D.47688_130 = smh_2->mparams;
  D.47686_131 = D.47688_130->dtmf_type;
  if (D.47686_131 == 0)
    goto <bb 60>;
  else
    goto <bb 58>;

<bb 58>:
  D.47644_132 = switch_media_handle_test_media_flag (smh_2, 8);
  if (D.47644_132 != 0)
    goto <bb 60>;
  else
    goto <bb 59>;

<bb 59>:
  D.47705_133 = session_1(D)->channel;
  D.47643_134 = switch_channel_test_flag (D.47705_133, 93);
  if (D.47643_134 != 0)
    goto <bb 60>;
  else
    goto <bb 64>;

<bb 60>:
  D.47688_135 = smh_2->mparams;
  D.47685_136 = D.47688_135->te;
  if (D.47685_136 > 95)
    goto <bb 61>;
  else
    goto <bb 64>;

<bb 61>:
  D.47705_137 = session_1(D)->channel;
  D.47642_138 = switch_channel_test_flag (D.47705_137, 106);
  if (D.47642_138 != 0)
    goto <bb 62>;
  else
    goto <bb 63>;

<bb 62>:
  D.47641_139 = strlen (buf_3(D));
  D.47640_140 = buf_3(D) + D.47641_139;
  D.47639_141 = strlen (buf_3(D));
  D.47638_142 = buflen_7(D) - D.47639_141;
  D.47688_143 = smh_2->mparams;
  D.47685_144 = D.47688_143->te;
  D.47680_145 = (int) D.47685_144;
  switch_snprintf (D.47640_140, D.47638_142, "a=rtpmap:%d telephone-event/8000\n", D.47680_145);
  goto <bb 64>;

<bb 63>:
  D.47637_146 = strlen (buf_3(D));
  D.47636_147 = buf_3(D) + D.47637_146;
  D.47635_148 = strlen (buf_3(D));
  D.47634_149 = buflen_7(D) - D.47635_148;
  D.47688_150 = smh_2->mparams;
  D.47685_151 = D.47688_150->te;
  D.47680_152 = (int) D.47685_151;
  switch_snprintf (D.47636_147, D.47634_149, "a=rtpmap:%d telephone-event/8000\na=fmtp:%d 0-16\n", D.47680_152, D.47680_152);

<bb 64>:
  D.47633_153 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_dtls_fingerprint.type;
  # DEBUG s => D.47633_153
  if (D.47633_153 == 0B)
    goto <bb 67>;
  else
    goto <bb 65>;

<bb 65>:
  D.47517_154 = MEM[(const char *)D.47633_153];
  if (D.47517_154 == 0)
    goto <bb 67>;
  else
    goto <bb 66>;

<bb 66>:

<bb 67>:
  # D.47518_155 = PHI <1(64), 1(65), 0(66)>
  if (D.47518_155 == 0)
    goto <bb 68>;
  else
    goto <bb 70>;

<bb 68>:
  if (secure_11(D) != 0)
    goto <bb 69>;
  else
    goto <bb 70>;

<bb 69>:
  D.47632_156 = strlen (buf_3(D));
  D.47631_157 = buf_3(D) + D.47632_156;
  D.47630_158 = strlen (buf_3(D));
  D.47629_159 = buflen_7(D) - D.47630_158;
  D.47633_160 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_dtls_fingerprint.type;
  D.47628_161 = &MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_dtls_fingerprint.str;
  switch_snprintf (D.47631_157, D.47629_159, "a=fingerprint:%s %s\n", D.47633_160, D.47628_161);

<bb 70>:
  D.47688_162 = smh_2->mparams;
  D.47627_163 = D.47688_162->rtcp_audio_interval_msec;
  if (D.47627_163 != 0B)
    goto <bb 71>;
  else
    goto <bb 74>;

<bb 71>:
  D.47626_164 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtcp_mux;
  if (D.47626_164 > 0)
    goto <bb 72>;
  else
    goto <bb 73>;

<bb 72>:
  D.47625_165 = strlen (buf_3(D));
  D.47624_166 = buf_3(D) + D.47625_165;
  D.47623_167 = strlen (buf_3(D));
  D.47622_168 = buflen_7(D) - D.47623_167;
  switch_snprintf (D.47624_166, D.47622_168, "a=rtcp-mux\n");
  D.47621_169 = strlen (buf_3(D));
  D.47620_170 = buf_3(D) + D.47621_169;
  D.47619_171 = strlen (buf_3(D));
  D.47618_172 = buflen_7(D) - D.47619_171;
  D.47707_173 = (int) port_9(D);
  switch_snprintf (D.47620_170, D.47618_172, "a=rtcp:%d IN %s %s\n", D.47707_173, family_174(D), ip_175(D));
  goto <bb 74>;

<bb 73>:
  D.47617_176 = strlen (buf_3(D));
  D.47616_177 = buf_3(D) + D.47617_176;
  D.47615_178 = strlen (buf_3(D));
  D.47614_179 = buflen_7(D) - D.47615_178;
  D.47707_180 = (int) port_9(D);
  D.47613_181 = D.47707_180 + 1;
  switch_snprintf (D.47616_177, D.47614_179, "a=rtcp:%d IN %s %s\n", D.47613_181, family_174(D), ip_175(D));

<bb 74>:
  D.47612_182 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].ice_out.cands[0][0].ready;
  if (D.47612_182 != 0)
    goto <bb 75>;
  else
    goto <bb 99>;

<bb 75>:
  tmp1 = "";
  tmp2 = "";
  # DEBUG c1 => 659136
  # DEBUG c2 => 659134
  tmp1[10] = 0;
  tmp2[10] = 0;
  switch_stun_random_string (&tmp1, 10, "0123456789");
  switch_stun_random_string (&tmp2, 10, "0123456789");
  gen_ice (session_1(D), 0, 0B, 0);
  # DEBUG D#5 => &MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].ice_out
  # DEBUG ice_out => D#5
  D.47611_183 = strlen (buf_3(D));
  D.47610_184 = buf_3(D) + D.47611_183;
  D.47609_185 = strlen (buf_3(D));
  D.47608_186 = buflen_7(D) - D.47609_185;
  D.47607_187 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].ssrc;
  D.47606_188 = smh_2->cname;
  switch_snprintf (D.47610_184, D.47608_186, "a=ssrc:%u cname:%s\n", D.47607_187, D.47606_188);
  D.47605_189 = strlen (buf_3(D));
  D.47604_190 = buf_3(D) + D.47605_189;
  D.47603_191 = strlen (buf_3(D));
  D.47602_192 = buflen_7(D) - D.47603_191;
  D.47607_193 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].ssrc;
  D.47601_194 = smh_2->msid;
  switch_snprintf (D.47604_190, D.47602_192, "a=ssrc:%u msid:%s a0\n", D.47607_193, D.47601_194);
  D.47600_195 = strlen (buf_3(D));
  D.47599_196 = buf_3(D) + D.47600_195;
  D.47598_197 = strlen (buf_3(D));
  D.47597_198 = buflen_7(D) - D.47598_197;
  D.47607_199 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].ssrc;
  D.47601_200 = smh_2->msid;
  switch_snprintf (D.47599_196, D.47597_198, "a=ssrc:%u mslabel:%s\n", D.47607_199, D.47601_200);
  D.47596_201 = strlen (buf_3(D));
  D.47595_202 = buf_3(D) + D.47596_201;
  D.47594_203 = strlen (buf_3(D));
  D.47593_204 = buflen_7(D) - D.47594_203;
  D.47607_205 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].ssrc;
  D.47601_206 = smh_2->msid;
  switch_snprintf (D.47595_202, D.47593_204, "a=ssrc:%u label:%sa0\n", D.47607_205, D.47601_206);
  D.47592_207 = strlen (buf_3(D));
  D.47591_208 = buf_3(D) + D.47592_207;
  D.47590_209 = strlen (buf_3(D));
  D.47589_210 = buflen_7(D) - D.47590_209;
  D.47588_211 = MEM[(struct ice_t *)smh_2 + 6480B].ufrag;
  switch_snprintf (D.47591_208, D.47589_210, "a=ice-ufrag:%s\n", D.47588_211);
  D.47587_212 = strlen (buf_3(D));
  D.47586_213 = buf_3(D) + D.47587_212;
  D.47585_214 = strlen (buf_3(D));
  D.47584_215 = buflen_7(D) - D.47585_214;
  D.47583_216 = MEM[(struct ice_t *)smh_2 + 6480B].pwd;
  switch_snprintf (D.47586_213, D.47584_215, "a=ice-pwd:%s\n", D.47583_216);
  D.47582_217 = strlen (buf_3(D));
  D.47581_218 = buf_3(D) + D.47582_217;
  D.47580_219 = strlen (buf_3(D));
  D.47579_220 = buflen_7(D) - D.47580_219;
  D.47578_221 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].transport;
  D.47577_222 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].con_addr;
  D.47576_223 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].con_port;
  D.47575_224 = (int) D.47576_223;
  switch_snprintf (D.47581_218, D.47579_220, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.47578_221, 659136, D.47577_222, D.47575_224);
  D.47574_225 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_ip;
  # DEBUG s => D.47574_225
  if (D.47574_225 == 0B)
    goto <bb 78>;
  else
    goto <bb 76>;

<bb 76>:
  D.47515_226 = MEM[(const char *)D.47574_225];
  if (D.47515_226 == 0)
    goto <bb 78>;
  else
    goto <bb 77>;

<bb 77>:

<bb 78>:
  # D.47516_227 = PHI <1(75), 1(76), 0(77)>
  if (D.47516_227 == 0)
    goto <bb 79>;
  else
    goto <bb 86>;

<bb 79>:
  D.47577_228 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].con_addr;
  # DEBUG s => D.47577_228
  if (D.47577_228 == 0B)
    goto <bb 82>;
  else
    goto <bb 80>;

<bb 80>:
  D.47513_229 = MEM[(const char *)D.47577_228];
  if (D.47513_229 == 0)
    goto <bb 82>;
  else
    goto <bb 81>;

<bb 81>:

<bb 82>:
  # D.47514_230 = PHI <1(79), 1(80), 0(81)>
  if (D.47514_230 == 0)
    goto <bb 83>;
  else
    goto <bb 86>;

<bb 83>:
  D.47574_231 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_ip;
  D.47577_232 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].con_addr;
  D.47573_233 = __builtin_strcmp (D.47574_231, D.47577_232);
  if (D.47573_233 != 0)
    goto <bb 84>;
  else
    goto <bb 86>;

<bb 84>:
  D.47572_234 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_port;
  D.47576_235 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].con_port;
  if (D.47572_234 != D.47576_235)
    goto <bb 85>;
  else
    goto <bb 86>;

<bb 85>:
  D.47571_236 = strlen (buf_3(D));
  D.47570_237 = buf_3(D) + D.47571_236;
  D.47569_238 = strlen (buf_3(D));
  D.47568_239 = buflen_7(D) - D.47569_238;
  D.47578_240 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].transport;
  D.47577_241 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].con_addr;
  D.47576_242 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].con_port;
  D.47575_243 = (int) D.47576_242;
  D.47574_244 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_ip;
  D.47572_245 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_port;
  D.47567_246 = (int) D.47572_245;
  switch_snprintf (D.47570_237, D.47568_239, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.47578_240, 659134, D.47577_241, D.47575_243, D.47574_244, D.47567_246);

<bb 86>:
  D.47626_247 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtcp_mux;
  if (D.47626_247 <= 0)
    goto <bb 88>;
  else
    goto <bb 87>;

<bb 87>:
  D.47705_248 = session_1(D)->channel;
  D.47566_249 = switch_channel_direction (D.47705_248);
  if (D.47566_249 == 1)
    goto <bb 88>;
  else
    goto <bb 99>;

<bb 88>:
  D.47565_250 = strlen (buf_3(D));
  D.47564_251 = buf_3(D) + D.47565_250;
  D.47563_252 = strlen (buf_3(D));
  D.47562_253 = buflen_7(D) - D.47563_252;
  D.47578_254 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].transport;
  D.47577_255 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].con_addr;
  D.47576_256 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].con_port;
  D.47575_257 = (int) D.47576_256;
  D.47626_258 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtcp_mux;
  D.47561_259 = D.47626_258 <= 0;
  D.47560_260 = D.47575_257 + D.47561_259;
  switch_snprintf (D.47564_251, D.47562_253, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.47578_254, 659136, D.47577_255, D.47560_260);
  D.47574_261 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_ip;
  # DEBUG s => D.47574_261
  if (D.47574_261 == 0B)
    goto <bb 91>;
  else
    goto <bb 89>;

<bb 89>:
  D.47511_262 = MEM[(const char *)D.47574_261];
  if (D.47511_262 == 0)
    goto <bb 91>;
  else
    goto <bb 90>;

<bb 90>:

<bb 91>:
  # D.47512_263 = PHI <1(88), 1(89), 0(90)>
  if (D.47512_263 == 0)
    goto <bb 92>;
  else
    goto <bb 99>;

<bb 92>:
  D.47559_264 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][1].con_addr;
  # DEBUG s => D.47559_264
  if (D.47559_264 == 0B)
    goto <bb 95>;
  else
    goto <bb 93>;

<bb 93>:
  D.47509_265 = MEM[(const char *)D.47559_264];
  if (D.47509_265 == 0)
    goto <bb 95>;
  else
    goto <bb 94>;

<bb 94>:

<bb 95>:
  # D.47510_266 = PHI <1(92), 1(93), 0(94)>
  if (D.47510_266 == 0)
    goto <bb 96>;
  else
    goto <bb 99>;

<bb 96>:
  D.47574_267 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_ip;
  D.47559_268 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][1].con_addr;
  D.47558_269 = __builtin_strcmp (D.47574_267, D.47559_268);
  if (D.47558_269 != 0)
    goto <bb 97>;
  else
    goto <bb 99>;

<bb 97>:
  D.47572_270 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_port;
  D.47557_271 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][1].con_port;
  if (D.47572_270 != D.47557_271)
    goto <bb 98>;
  else
    goto <bb 99>;

<bb 98>:
  D.47556_272 = strlen (buf_3(D));
  D.47555_273 = buf_3(D) + D.47556_272;
  D.47554_274 = strlen (buf_3(D));
  D.47553_275 = buflen_7(D) - D.47554_274;
  D.47578_276 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].transport;
  D.47577_277 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].con_addr;
  D.47576_278 = MEM[(struct ice_t *)smh_2 + 6480B].cands[0][0].con_port;
  D.47575_279 = (int) D.47576_278;
  D.47626_280 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtcp_mux;
  D.47561_281 = D.47626_280 <= 0;
  D.47560_282 = D.47575_279 + D.47561_281;
  D.47574_283 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_ip;
  D.47572_284 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_port;
  D.47567_285 = (int) D.47572_284;
  D.47626_286 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtcp_mux;
  D.47561_287 = D.47626_286 <= 0;
  D.47552_288 = D.47567_285 + D.47561_287;
  switch_snprintf (D.47555_273, D.47553_275, "a=candidate:%s 2 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.47578_276, 659134, D.47577_277, D.47560_282, D.47574_283, D.47552_288);

<bb 99>:
  if (secure_11(D) != 0)
    goto <bb 100>;
  else
    goto <bb 111>;

<bb 100>:
  D.47705_289 = session_1(D)->channel;
  D.47551_290 = switch_channel_test_flag (D.47705_289, 109);
  if (D.47551_290 == 0)
    goto <bb 101>;
  else
    goto <bb 111>;

<bb 101>:
  i_346 = 0;
  goto <bb 110>;

<bb 102>:
  D.47550_292 = smh_2->crypto_suite_order[i_291];
  j_293 = SUITES[D.47550_292].type;
  # DEBUG j => j_293
  D.47703_294 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].crypto_type;
  if (j_293 == D.47703_294)
    goto <bb 104>;
  else
    goto <bb 103>;

<bb 103>:
  D.47703_295 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].crypto_type;
  if (D.47703_295 == 9)
    goto <bb 104>;
  else
    goto <bb 109>;

<bb 104>:
  D.47549_296 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].ssec[j_293].local_crypto_key;
  # DEBUG s => D.47549_296
  if (D.47549_296 == 0B)
    goto <bb 107>;
  else
    goto <bb 105>;

<bb 105>:
  D.47507_297 = MEM[(const char *)D.47549_296];
  if (D.47507_297 == 0)
    goto <bb 107>;
  else
    goto <bb 106>;

<bb 106>:

<bb 107>:
  # D.47508_298 = PHI <1(104), 1(105), 0(106)>
  if (D.47508_298 == 0)
    goto <bb 108>;
  else
    goto <bb 109>;

<bb 108>:
  D.47548_299 = strlen (buf_3(D));
  D.47547_300 = buf_3(D) + D.47548_299;
  D.47546_301 = strlen (buf_3(D));
  D.47545_302 = buflen_7(D) - D.47546_301;
  D.47549_303 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].ssec[j_293].local_crypto_key;
  switch_snprintf (D.47547_300, D.47545_302, "a=crypto:%s\n", D.47549_303);

<bb 109>:
  i_304 = i_291 + 1;
  # DEBUG i => i_304

<bb 110>:
  # i_291 = PHI <0(101), i_304(109)>
  # DEBUG i => i_291
  D.47550_305 = smh_2->crypto_suite_order[i_291];
  if (D.47550_305 != 9)
    goto <bb 102>;
  else
    goto <bb 111>;

<bb 111>:
  if (cng_type_57(D) == 0)
    goto <bb 112>;
  else
    goto <bb 114>;

<bb 112>:
  D.47544_306 = switch_media_handle_test_media_flag (smh_2, 9);
  if (D.47544_306 != 0)
    goto <bb 113>;
  else
    goto <bb 114>;

<bb 113>:
  D.47543_307 = strlen (buf_3(D));
  D.47542_308 = buf_3(D) + D.47543_307;
  D.47541_309 = strlen (buf_3(D));
  D.47540_310 = buflen_7(D) - D.47541_309;
  switch_snprintf (D.47542_308, D.47540_310, "a=silenceSupp:off - - - -\n");

<bb 114>:
  if (append_audio_311(D) != 0B)
    goto <bb 115>;
  else
    goto <bb 120>;

<bb 115>:
  D.47539_312 = strlen (buf_3(D));
  D.47538_313 = buf_3(D) + D.47539_312;
  D.47537_314 = strlen (buf_3(D));
  D.47536_315 = buflen_7(D) - D.47537_314;
  D.47534_316 = *append_audio_311(D);
  if (D.47534_316 != 0)
    goto <bb 116>;
  else
    goto <bb 117>;

<bb 116>:
  D.47533_317 = strlen (append_audio_311(D));
  D.47532_318 = D.47533_317 + -1;
  append_audio_319 = append_audio_311(D) + D.47532_318;

<bb 117>:
  # append_audio_320 = PHI <append_audio_311(D)(115), append_audio_319(116)>
  D.47531_321 = *append_audio_320;
  if (D.47531_321 == 10)
    goto <bb 119>;
  else
    goto <bb 118>;

<bb 118>:

<bb 119>:
  # iftmp.41_322 = PHI <""(117), "\n"(118)>
  switch_snprintf (D.47538_313, D.47536_315, "%s%s", append_audio_311(D), iftmp.41_322);

<bb 120>:
  if (cur_ptime_26(D) == 0)
    goto <bb 121>;
  else
    goto <bb 122>;

<bb 121>:
  # DEBUG cur_ptime => cur_ptime_80

<bb 122>:
  # cur_ptime_323 = PHI <cur_ptime_26(D)(120), cur_ptime_80(121)>
  # DEBUG cur_ptime => cur_ptime_323
  if (cur_ptime_323 != 0)
    goto <bb 123>;
  else
    goto <bb 124>;

<bb 123>:
  D.47530_324 = strlen (buf_3(D));
  D.47529_325 = buf_3(D) + D.47530_324;
  D.47528_326 = strlen (buf_3(D));
  D.47527_327 = buflen_7(D) - D.47528_326;
  switch_snprintf (D.47529_325, D.47527_327, "a=ptime:%d\n", cur_ptime_323);

<bb 124>:
  local_sdp_audio_zrtp_hash_328 = switch_core_media_get_zrtp_hash (session_1(D), 0, 1);
  # DEBUG local_sdp_audio_zrtp_hash => local_sdp_audio_zrtp_hash_328
  if (local_sdp_audio_zrtp_hash_328 != 0B)
    goto <bb 125>;
  else
    goto <bb 126>;

<bb 125>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5882, session_1(D), 7, "Adding audio a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_328);
  D.47526_329 = strlen (buf_3(D));
  D.47525_330 = buf_3(D) + D.47526_329;
  D.47524_331 = strlen (buf_3(D));
  D.47523_332 = buflen_7(D) - D.47524_331;
  switch_snprintf (D.47525_330, D.47523_332, "a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_328);

<bb 126>:
  # DEBUG s => sr_333(D)
  if (sr_333(D) == 0B)
    goto <bb 129>;
  else
    goto <bb 127>;

<bb 127>:
  D.47505_334 = *sr_333(D);
  if (D.47505_334 == 0)
    goto <bb 129>;
  else
    goto <bb 128>;

<bb 128>:

<bb 129>:
  # D.47506_335 = PHI <1(126), 1(127), 0(128)>
  if (D.47506_335 == 0)
    goto <bb 130>;
  else
    goto <bb 131>;

<bb 130>:
  D.47522_336 = strlen (buf_3(D));
  D.47521_337 = buf_3(D) + D.47522_336;
  D.47520_338 = strlen (buf_3(D));
  D.47519_339 = buflen_7(D) - D.47520_338;
  switch_snprintf (D.47521_337, D.47519_339, "a=%s\n", sr_333(D));

<bb 131>:
  return;

}



;; Function switch_core_session_media_handle_ready (switch_core_session_media_handle_ready)

switch_core_session_media_handle_ready (struct switch_core_session_t * session)
{
  switch_status_t D.46444;
  int D.46440;
  int D.46439;
  smh_flag_t D.46438;
  struct switch_media_handle_t * D.46435;

<bb 2>:
  D.46435_3 = session_2(D)->media_handle;
  if (D.46435_3 != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.46435_4 = session_2(D)->media_handle;
  D.46438_5 = D.46435_4->flags;
  D.46439_6 = (int) D.46438_5;
  D.46440_7 = D.46439_6 & 1;
  if (D.46440_7 != 0)
    goto <bb 5>;
  else
    goto <bb 4>;

<bb 4>:

<bb 5>:
  # D.46444_1 = PHI <0(3), 1(4)>
  return D.46444_1;

}



;; Function switch_core_session_check_outgoing_crypto (switch_core_session_check_outgoing_crypto)

switch_core_session_check_outgoing_crypto (struct switch_core_session_t * session)
{
  int i;
  struct switch_media_handle_t * smh;
  struct switch_channel_t * channel;
  switch_rtp_crypto_key_type_t D.46672;
  struct switch_media_handle_t * D.46671;
  switch_rtp_crypto_mode_t D.46668;
  switch_status_t D.46663;

<bb 2>:
  channel_3 = switch_core_session_get_channel (session_2(D));
  # DEBUG channel => channel_3
  D.46663_4 = switch_core_session_media_handle_ready (session_2(D));
  if (D.46663_4 != 0)
    goto <bb 8>;
  else
    goto <bb 3>;

<bb 3>:
  smh_5 = session_2(D)->media_handle;
  # DEBUG smh => smh_5
  if (smh_5 == 0B)
    goto <bb 8>;
  else
    goto <bb 4>;

<bb 4>:
  D.46668_6 = smh_5->crypto_mode;
  if (D.46668_6 > 1)
    goto <bb 8>;
  else
    goto <bb 5>;

<bb 5>:
  switch_channel_set_flag_value (channel_3, 92, 1);
  # DEBUG i => 0
  goto <bb 7>;

<bb 6>:
  D.46671_9 = session_2(D)->media_handle;
  D.46672_10 = smh_5->crypto_suite_order[i_1];
  switch_core_media_build_crypto.constprop.8 (D.46671_9, 0, 0, D.46672_10, 0);
  D.46671_11 = session_2(D)->media_handle;
  D.46672_12 = smh_5->crypto_suite_order[i_1];
  switch_core_media_build_crypto.constprop.8 (D.46671_11, 1, 0, D.46672_12, 0);
  i_13 = i_1 + 1;
  # DEBUG i => i_13

<bb 7>:
  # i_1 = PHI <0(5), i_13(6)>
  # DEBUG i => i_1
  D.46672_8 = smh_5->crypto_suite_order[i_1];
  if (D.46672_8 != 9)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 8>:
  return;

}



;; Function switch_core_session_get_media_handle (switch_core_session_get_media_handle)

switch_core_session_get_media_handle (struct switch_core_session_t * session)
{
  struct switch_media_handle_t * D.46433;
  switch_status_t D.46430;

<bb 2>:
  D.46430_3 = switch_core_session_media_handle_ready (session_2(D));
  if (D.46430_3 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.46433_4 = session_2(D)->media_handle;

<bb 4>:
  # D.46433_1 = PHI <D.46433_4(3), 0B(2)>
  return D.46433_1;

}



;; Function switch_core_session_clear_media_handle (switch_core_session_clear_media_handle)

switch_core_session_clear_media_handle (struct switch_core_session_t * session)
{
  switch_status_t D.46428;
  struct switch_media_handle_t * D.46425;

<bb 2>:
  D.46425_3 = session_2(D)->media_handle;
  if (D.46425_3 == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

<bb 3>:

<bb 4>:
  # D.46428_1 = PHI <1(2), 0(3)>
  return D.46428_1;

}



;; Function switch_core_media_get_mparams (switch_core_media_get_mparams)

switch_core_media_get_mparams (struct switch_media_handle_t * smh)
{
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_get_mparams";
  struct switch_core_media_params_t * D.46423;

<bb 2>:
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1545, &__PRETTY_FUNCTION__);

<bb 4>:
  D.46423_2 = smh_1(D)->mparams;
  return D.46423_2;

}



;; Function switch_core_media_prepare_codecs (switch_core_media_prepare_codecs)

switch_core_media_prepare_codecs (struct switch_core_session_t * session, switch_bool_t force)
{
  char * tmp_codec_string;
  static const char __func__[33] = "switch_core_media_prepare_codecs";
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_prepare_codecs";
  struct switch_media_handle_t * smh;
  const char * ocodec;
  const char * codec_string;
  const char * abs;
  int D.46419;
  int D.46417;
  int D.46416;
  const struct switch_codec_implementation_t *[50] * D.46415;
  int D.46414;
  unsigned int D.46413;
  char *[50] * D.46412;
  switch_core_media_flag_t D.46407;
  const char D.46398;
  struct switch_core_session_t * D.46389;
  int D.46386;
  struct switch_core_media_params_t * D.46385;
  uint32_t D.46382;
  uint32_t D.46380;
  struct switch_channel_t * D.46379;

<bb 2>:
  # DEBUG codec_string => 0B
  # DEBUG ocodec => 0B
  if (session_5(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 1555, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_6 = session_5(D)->media_handle;
  # DEBUG smh => smh_6
  if (smh_6 == 0B)
    goto <bb 27>;
  else
    goto <bb 5>;

<bb 5>:
  if (force_7(D) == 0)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  D.46379_8 = session_5(D)->channel;
  D.46380_9 = switch_channel_test_flag (D.46379_8, 15);
  if (D.46380_9 != 0)
    goto <bb 27>;
  else
    goto <bb 7>;

<bb 7>:
  D.46379_10 = session_5(D)->channel;
  D.46382_11 = switch_channel_test_flag (D.46379_10, 29);
  if (D.46382_11 != 0)
    goto <bb 27>;
  else
    goto <bb 8>;

<bb 8>:
  if (force_7(D) != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.46385_12 = smh_6->mparams;
  D.46385_12->num_codecs = 0;

<bb 10>:
  D.46385_13 = smh_6->mparams;
  D.46386_14 = D.46385_13->num_codecs;
  if (D.46386_14 != 0)
    goto <bb 27>;
  else
    goto <bb 11>;

<bb 11>:
  smh_6->payload_space = 0;
  D.46389_15 = smh_6->session;
  if (D.46389_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  __assert_fail ("smh->session != ((void *)0)", "src/switch_core_media.c", 1575, &__PRETTY_FUNCTION__);

<bb 13>:
  D.46379_16 = session_5(D)->channel;
  abs_17 = switch_channel_get_variable_dup (D.46379_16, "absolute_codec_string", 1, -1);
  # DEBUG abs => abs_17
  if (abs_17 != 0B)
    goto <bb 24> (ready);
  else
    goto <bb 14>;

<bb 14>:
  D.46379_19 = session_5(D)->channel;
  codec_string_20 = switch_channel_get_variable_dup (D.46379_19, "codec_string", 1, -1);
  # DEBUG codec_string => codec_string_20
  if (codec_string_20 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.46389_21 = smh_6->session;
  codec_string_22 = switch_core_media_get_codec_string (D.46389_21);
  # DEBUG codec_string => codec_string_22

<bb 16>:
  # codec_string_1 = PHI <codec_string_20(14), codec_string_22(15)>
  # DEBUG codec_string => codec_string_1
  if (codec_string_1 != 0B)
    goto <bb 17>;
  else
    goto <bb 19>;

<bb 17>:
  D.46398_23 = *codec_string_1;
  if (D.46398_23 == 61)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  codec_string_24 = codec_string_1 + 1;
  # DEBUG codec_string => codec_string_24
  goto <bb 24> (ready);

<bb 19>:
  D.46379_25 = session_5(D)->channel;
  ocodec_26 = switch_channel_get_variable_dup (D.46379_25, "originator_codec", 1, -1);
  # DEBUG ocodec => ocodec_26
  if (ocodec_26 != 0B)
    goto <bb 20>;
  else
    goto <bb 24> (ready);

<bb 20>:
  if (codec_string_1 == 0B)
    goto <bb 24> (ready);
  else
    goto <bb 21>;

<bb 21>:
  D.46407_27 = smh_6->media_flags[1];
  if (D.46407_27 != 0)
    goto <bb 24> (ready);
  else
    goto <bb 22>;

<bb 22>:
  D.46389_28 = smh_6->session;
  codec_string_29 = switch_core_session_sprintf (D.46389_28, "%s,%s", ocodec_26, codec_string_1);
  # DEBUG codec_string => codec_string_29
  if (codec_string_29 == 0B)
    goto <bb 23>;
  else
    goto <bb 24> (ready);

<bb 23>:
  # DEBUG codec_string => ocodec_26

  # codec_string_2 = PHI <abs_17(13), codec_string_24(18), codec_string_1(19), ocodec_26(21), codec_string_29(22), ocodec_26(23), ocodec_26(20)>
ready:
  # DEBUG codec_string => codec_string_2
  if (codec_string_2 != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.46389_32 = smh_6->session;
  tmp_codec_string_33 = switch_core_perform_session_strdup (D.46389_32, codec_string_2, "src/switch_core_media.c", &__func__, 1603);
  # DEBUG tmp_codec_string => tmp_codec_string_33
  D.46379_34 = session_5(D)->channel;
  switch_channel_set_variable_var_check (D.46379_34, "rtp_use_codec_string", codec_string_2, 1);
  D.46412_35 = &smh_6->codec_order;
  D.46413_36 = switch_separate_string (tmp_codec_string_33, 44, D.46412_35, 50);
  D.46414_37 = (int) D.46413_36;
  smh_6->codec_order_last = D.46414_37;
  D.46385_38 = smh_6->mparams;
  D.46415_39 = &smh_6->codecs;
  D.46412_40 = &smh_6->codec_order;
  D.46416_41 = smh_6->codec_order_last;
  D.46417_42 = switch_loadable_module_get_codecs_sorted (D.46415_39, 50, D.46412_40, D.46416_41);
  D.46385_38->num_codecs = D.46417_42;
  goto <bb 27>;

<bb 26>:
  D.46385_43 = smh_6->mparams;
  D.46415_44 = &smh_6->codecs;
  D.46419_45 = switch_loadable_module_get_codecs (D.46415_44, 50);
  D.46385_43->num_codecs = D.46419_45;

<bb 27>:
  return;

}



;; Function switch_core_media_write_frame (switch_core_media_write_frame)

switch_core_media_write_frame (struct switch_core_session_t * session, struct switch_frame_t * frame, switch_io_flag_t flags, int stream_id, switch_media_type_t type)
{
  int iftmp.104;
  uint32_t D.47735;
  uint32_t D.47734;
  struct switch_mutex_t * D.47733;
  struct switch_codec_interface_t * D.47732;
  const struct switch_codec_implementation_t * D.47731;
  int iftmp.104;
  uint32_t D.47726;
  uint32_t D.47725;
  struct switch_mutex_t * D.47724;
  struct switch_codec_interface_t * D.47723;
  const struct switch_codec_implementation_t * D.47722;
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_write_frame";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  int frames;
  int samples;
  int bytes;
  switch_status_t status;
  int D.46120;
  uint32_t D.46119;
  uint32_t samples.128;
  uint32_t D.46117;
  uint32_t D.46116;
  uint32_t frames.127;
  uint32_t D.46114;
  int D.46112;
  uint32_t D.46111;
  uint32_t D.46108;
  unsigned int D.46105;
  unsigned int D.46104;
  struct switch_codec_t * D.46098;
  uint8_t D.46094;
  struct switch_rtp_t * D.46093;
  const struct switch_codec_implementation_t * D.46091;
  int D.46087;
  struct switch_channel_t * D.46086;
  switch_core_media_flag_t D.46081;

<bb 2>:
  # DEBUG status => 0
  # DEBUG bytes => 0
  # DEBUG samples => 0
  # DEBUG frames => 0
  if (session_9(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 1996, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_10 = session_9(D)->media_handle;
  # DEBUG smh => smh_10
  if (smh_10 == 0B)
    goto <bb 34>;
  else
    goto <bb 5>;

<bb 5>:
  D.46081_12 = smh_10->media_flags[0];
  if (D.46081_12 == 0)
    goto <bb 34>;
  else
    goto <bb 6>;

<bb 6>:
  engine_17 = &smh_10->engines[type_15(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_17
  goto <bb 9>;

<bb 7>:
  D.46086_50 = session_9(D)->channel;
  D.46087_51 = switch_channel_test_ready (D.46086_50, 1, 0);
  if (D.46087_51 != 0)
    goto <bb 8>;
  else
    goto <bb 34>;

<bb 8>:
  switch_sleep (10000);

<bb 9>:
  D.46091_18 = engine_17->read_codec.implementation;
  if (D.46091_18 == 0B)
    goto <bb 7>;
  else
    goto <bb 10>;

<bb 10>:
  D.46093_19 = engine_17->rtp_session;
  D.46094_20 = switch_rtp_ready (D.46093_19);
  if (D.46094_20 == 0)
    goto <bb 7>;
  else
    goto <bb 11>;

<bb 11>:
  D.46091_21 = engine_17->read_codec.implementation;
  if (D.46091_21 == 0B)
    goto <bb 34>;
  else
    goto <bb 12>;

<bb 12>:
  D.46098_22 = &engine_17->read_codec;
  # DEBUG codec => D.46098_22
  if (D.46098_22 != 0B)
    goto <bb 13>;
  else
    goto <bb 17>;

<bb 13>:
  D.47726_61 = MEM[(struct switch_codec_t *)engine_17 + 1524B].flags;
  D.47725_62 = D.47726_61 & 256;
  if (D.47725_62 != 0)
    goto <bb 14>;
  else
    goto <bb 17>;

<bb 14>:
  D.47724_63 = MEM[(struct switch_codec_t *)engine_17 + 1524B].mutex;
  if (D.47724_63 != 0B)
    goto <bb 15>;
  else
    goto <bb 17>;

<bb 15>:
  D.47723_64 = MEM[(struct switch_codec_t *)engine_17 + 1524B].codec_interface;
  if (D.47723_64 != 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.47722_65 = MEM[(struct switch_codec_t *)engine_17 + 1524B].implementation;
  if (D.47722_65 != 0B)
    goto <bb 18>;
  else
    goto <bb 17>;

<bb 17>:

<bb 18>:
  # iftmp.104_66 = PHI <1(16), 0(17)>
  if (iftmp.104_66 == 0)
    goto <bb 34>;
  else
    goto <bb 19>;

<bb 19>:
  D.46091_24 = engine_17->read_codec.implementation;
  if (D.46091_24 == 0B)
    goto <bb 34>;
  else
    goto <bb 20>;

<bb 20>:
  D.46098_25 = &engine_17->read_codec;
  # DEBUG codec => D.46098_25
  if (D.46098_25 != 0B)
    goto <bb 21>;
  else
    goto <bb 25>;

<bb 21>:
  D.47735_68 = MEM[(struct switch_codec_t *)engine_17 + 1524B].flags;
  D.47734_69 = D.47735_68 & 256;
  if (D.47734_69 != 0)
    goto <bb 22>;
  else
    goto <bb 25>;

<bb 22>:
  D.47733_70 = MEM[(struct switch_codec_t *)engine_17 + 1524B].mutex;
  if (D.47733_70 != 0B)
    goto <bb 23>;
  else
    goto <bb 25>;

<bb 23>:
  D.47732_71 = MEM[(struct switch_codec_t *)engine_17 + 1524B].codec_interface;
  if (D.47732_71 != 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  D.47731_72 = MEM[(struct switch_codec_t *)engine_17 + 1524B].implementation;
  if (D.47731_72 != 0B)
    goto <bb 26>;
  else
    goto <bb 25>;

<bb 25>:

<bb 26>:
  # iftmp.104_73 = PHI <1(24), 0(25)>
  if (iftmp.104_73 == 0)
    goto <bb 34>;
  else
    goto <bb 27>;

<bb 27>:
  D.46104_28 = BIT_FIELD_REF <*frame_27(D), 32, 480>;
  D.46105_29 = D.46104_28 & 33;
  if (D.46105_29 == 0)
    goto <bb 28>;
  else
    goto <bb 31>;

<bb 28>:
  D.46108_30 = engine_17->read_impl.encoded_bytes_per_packet;
  if (D.46108_30 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  D.46108_31 = engine_17->read_impl.encoded_bytes_per_packet;
  bytes_32 = (int) D.46108_31;
  # DEBUG bytes => bytes_32
  D.46111_33 = frame_27(D)->datalen;
  D.46112_34 = (int) D.46111_33;
  frames_35 = D.46112_34 / bytes_32;
  # DEBUG frames => frames_35

<bb 30>:
  # frames_3 = PHI <frames_35(29), 1(28)>
  # DEBUG frames => frames_3
  D.46114_37 = engine_17->read_impl.samples_per_packet;
  frames.127_38 = (uint32_t) frames_3;
  D.46116_39 = D.46114_37 * frames.127_38;
  samples_40 = (int) D.46116_39;
  # DEBUG samples => samples_40

<bb 31>:
  # samples_2 = PHI <0(27), samples_40(30)>
  # DEBUG samples => samples_2
  D.46117_41 = engine_17->timestamp_send;
  samples.128_42 = (uint32_t) samples_2;
  D.46119_43 = D.46117_41 + samples.128_42;
  engine_17->timestamp_send = D.46119_43;
  D.46093_44 = engine_17->rtp_session;
  D.46120_45 = switch_rtp_write_frame (D.46093_44, frame_27(D));
  if (D.46120_45 < 0)
    goto <bb 32>;
  else
    goto <bb 33>;

<bb 32>:
  # DEBUG status => 1

<bb 33>:
  # status_1 = PHI <0(31), 1(32)>
  # DEBUG status => status_1

<bb 34>:
  # status_4 = PHI <1(4), 1(5), 9(7), 9(18), 1(26), status_1(33), 9(11), 1(19)>
  return status_4;

}



;; Function switch_core_media_copy_t38_options (switch_core_media_copy_t38_options)

switch_core_media_copy_t38_options (struct switch_t38_options_t * t38_options, struct switch_core_session_t * session)
{
  static const char __func__[35] = "switch_core_media_copy_t38_options";
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_copy_t38_options";
  struct switch_t38_options_t * local_t38_options;
  struct switch_channel_t * channel;
  uint16_t D.46075;
  char * D.46074;
  const char * D.46073;
  char * D.46072;
  const char * D.46071;
  char * D.46070;
  const char * D.46069;
  uint32_t D.46068;
  uint32_t D.46067;
  char * D.46066;
  const char * D.46065;
  switch_bool_t D.46064;
  switch_bool_t D.46063;
  switch_bool_t D.46062;
  uint32_t D.46061;

<bb 2>:
  channel_3 = switch_core_session_get_channel (session_2(D));
  # DEBUG channel => channel_3
  local_t38_options_4 = switch_channel_get_private (channel_3, "t38_options");
  # DEBUG local_t38_options => local_t38_options_4
  if (t38_options_5(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("t38_options", "src/switch_core_media.c", 2052, &__PRETTY_FUNCTION__);

<bb 4>:
  if (local_t38_options_4 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  local_t38_options_6 = switch_core_perform_session_alloc (session_2(D), 60, "src/switch_core_media.c", &__func__, 2055);
  # DEBUG local_t38_options => local_t38_options_6

<bb 6>:
  # local_t38_options_1 = PHI <local_t38_options_4(4), local_t38_options_6(5)>
  # DEBUG local_t38_options => local_t38_options_1
  D.46061_7 = t38_options_5(D)->T38MaxBitRate;
  local_t38_options_1->T38MaxBitRate = D.46061_7;
  D.46062_8 = t38_options_5(D)->T38FaxFillBitRemoval;
  local_t38_options_1->T38FaxFillBitRemoval = D.46062_8;
  D.46063_9 = t38_options_5(D)->T38FaxTranscodingMMR;
  local_t38_options_1->T38FaxTranscodingMMR = D.46063_9;
  D.46064_10 = t38_options_5(D)->T38FaxTranscodingJBIG;
  local_t38_options_1->T38FaxTranscodingJBIG = D.46064_10;
  D.46065_11 = t38_options_5(D)->T38FaxRateManagement;
  D.46066_12 = switch_core_perform_session_strdup (session_2(D), D.46065_11, "src/switch_core_media.c", &__func__, 2062);
  local_t38_options_1->T38FaxRateManagement = D.46066_12;
  D.46067_13 = t38_options_5(D)->T38FaxMaxBuffer;
  local_t38_options_1->T38FaxMaxBuffer = D.46067_13;
  D.46068_14 = t38_options_5(D)->T38FaxMaxDatagram;
  local_t38_options_1->T38FaxMaxDatagram = D.46068_14;
  D.46069_15 = t38_options_5(D)->T38FaxUdpEC;
  D.46070_16 = switch_core_perform_session_strdup (session_2(D), D.46069_15, "src/switch_core_media.c", &__func__, 2065);
  local_t38_options_1->T38FaxUdpEC = D.46070_16;
  D.46071_17 = t38_options_5(D)->T38VendorInfo;
  D.46072_18 = switch_core_perform_session_strdup (session_2(D), D.46071_17, "src/switch_core_media.c", &__func__, 2066);
  local_t38_options_1->T38VendorInfo = D.46072_18;
  D.46073_19 = t38_options_5(D)->remote_ip;
  D.46074_20 = switch_core_perform_session_strdup (session_2(D), D.46073_19, "src/switch_core_media.c", &__func__, 2067);
  local_t38_options_1->remote_ip = D.46074_20;
  D.46075_21 = t38_options_5(D)->remote_port;
  local_t38_options_1->remote_port = D.46075_21;
  switch_channel_set_private (channel_3, "t38_options", local_t38_options_1);
  return;

}



;; Function switch_core_media_process_t38_passthru (switch_core_media_process_t38_passthru)

switch_core_media_process_t38_passthru (struct switch_core_session_t * session, struct switch_core_session_t * other_session, struct switch_t38_options_t * t38_options)
{
  const char * err;
  static const char __func__[39] = "switch_core_media_process_t38_passthru";
  static const char __PRETTY_FUNCTION__[39] = "switch_core_media_process_t38_passthru";
  struct switch_media_handle_t * smh;
  char tmp[32];
  switch_port_t remote_port;
  char * remote_host;
  const char * err.171;
  switch_status_t D.47130;
  int D.47129;
  int D.47128;
  char * D.47127;
  char * D.47126;
  struct switch_channel_t * D.47125;
  switch_port_t D.47123;
  char * D.47121;
  int D.38429;
  _Bool D.47119;
  _Bool D.47118;
  _Bool D.47117;
  uint16_t D.47114;
  char * D.47113;
  const char * D.47112;
  struct payload_map_t * D.47111;
  struct switch_rtp_t * D.47110;
  switch_status_t D.47109;

<bb 2>:
  tmp = "";
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 473, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 12>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#6 => &smh_3->engines
  # DEBUG a_engine => D#6
  D.47110_6 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].rtp_session;
  remote_host_7 = switch_rtp_get_remote_host (D.47110_6);
  # DEBUG remote_host => remote_host_7
  D.47110_8 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].rtp_session;
  remote_port_9 = switch_rtp_get_remote_port (D.47110_8);
  # DEBUG remote_port => remote_port_9
  D.47111_10 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].cur_payload_map;
  D.47112_12 = t38_options_11(D)->remote_ip;
  D.47113_13 = switch_core_perform_session_strdup (session_2(D), D.47112_12, "src/switch_core_media.c", &__func__, 484);
  D.47111_10->remote_sdp_ip = D.47113_13;
  D.47111_14 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].cur_payload_map;
  D.47114_15 = t38_options_11(D)->remote_port;
  D.47111_14->remote_sdp_port = D.47114_15;
  D.47117_16 = remote_host_7 != 0B;
  D.47118_17 = remote_port_9 != 0;
  D.47119_18 = D.47117_16 && D.47118_17;
  if (D.47119_18 != 0)
    goto <bb 6>;
  else
    goto <bb 9>;

<bb 6>:
  D.47111_19 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].cur_payload_map;
  D.47121_20 = D.47111_19->remote_sdp_ip;
  D.38429_21 = __builtin_strcmp (remote_host_7, D.47121_20);
  if (D.38429_21 == 0)
    goto <bb 7>;
  else
    goto <bb 9>;

<bb 7>:
  D.47111_22 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].cur_payload_map;
  D.47123_23 = D.47111_22->remote_sdp_port;
  if (D.47123_23 == remote_port_9)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.47125_24 = session_2(D)->channel;
  D.47126_25 = switch_channel_get_name (D.47125_24);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 489, session_2(D), 7, "Audio params are unchanged for %s.\n", D.47126_25);
  goto <bb 11>;

<bb 9>:
  err = 0B;
  D.47125_26 = session_2(D)->channel;
  D.47127_27 = switch_channel_get_name (D.47125_26);
  D.47128_28 = (int) remote_port_9;
  D.47111_29 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].cur_payload_map;
  D.47121_30 = D.47111_29->remote_sdp_ip;
  D.47111_31 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].cur_payload_map;
  D.47123_32 = D.47111_31->remote_sdp_port;
  D.47129_33 = (int) D.47123_32;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 495, session_2(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.47127_27, remote_host_7, D.47128_28, D.47121_30, D.47129_33);
  D.47111_34 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].cur_payload_map;
  D.47123_35 = D.47111_34->remote_sdp_port;
  D.47129_36 = (int) D.47123_35;
  switch_snprintf (&tmp, 32, "%d", D.47129_36);
  D.47125_37 = session_2(D)->channel;
  D.47111_38 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].cur_payload_map;
  D.47121_39 = D.47111_38->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.47125_37, "remote_media_ip", D.47121_39, 1);
  D.47125_40 = session_2(D)->channel;
  switch_channel_set_variable_var_check (D.47125_40, "remote_media_port", &tmp, 1);
  D.47110_41 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].rtp_session;
  D.47111_42 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].cur_payload_map;
  D.47121_43 = D.47111_42->remote_sdp_ip;
  D.47111_44 = MEM[(struct switch_rtp_engine_t *)smh_3 + 80B].cur_payload_map;
  D.47123_45 = D.47111_44->remote_sdp_port;
  D.47130_46 = switch_rtp_set_remote_address (D.47110_41, D.47121_43, D.47123_45, 0, 1, &err);
  if (D.47130_46 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  err.171_47 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 505, session_2(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.171_47);
  D.47125_48 = session_2(D)->channel;
  switch_channel_perform_hangup (D.47125_48, "src/switch_core_media.c", &__func__, 506, 88);

<bb 11>:
  switch_core_media_copy_t38_options (t38_options_11(D), other_session_49(D));

<bb 12>:
  # D.47109_1 = PHI <1(4), 0(11)>
  return D.47109_1;

}



;; Function switch_core_media_get_offered_pt (switch_core_media_get_offered_pt)

switch_core_media_get_offered_pt (struct switch_core_session_t * session, const struct switch_codec_implementation_t * mimp, switch_payload_t * pt)
{
  const struct switch_codec_implementation_t * imp;
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_get_offered_pt";
  struct switch_media_handle_t * smh;
  int i;
  int D.46055;
  struct switch_core_media_params_t * D.46054;
  switch_payload_t D.46053;
  const uint32_t D.46050;
  const uint32_t D.46049;
  int D.46046;
  char * const D.46045;
  char * const D.46044;
  switch_status_t D.46043;

<bb 2>:
  # DEBUG i => 0
  if (session_4(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2081, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_5 = session_4(D)->media_handle;
  # DEBUG smh => smh_5
  if (smh_5 == 0B)
    goto <bb 12>;
  else
    goto <bb 5>;

<bb 5>:
  if (mimp_6(D) == 0B)
    goto <bb 12>;
  else
    goto <bb 6>;

<bb 6>:
  i_20 = 0;
  goto <bb 11>;

<bb 7>:
  imp_10 = smh_5->codecs[i_1];
  # DEBUG imp => imp_10
  D.46044_11 = imp_10->iananame;
  D.46045_12 = mimp_6(D)->iananame;
  D.46046_13 = strcasecmp (D.46044_11, D.46045_12);
  if (D.46046_13 == 0)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  D.46049_14 = imp_10->actual_samples_per_second;
  D.46050_15 = mimp_6(D)->actual_samples_per_second;
  if (D.46049_14 == D.46050_15)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.46053_16 = smh_5->ianacodes[i_1];
  *pt_17(D) = D.46053_16;
  goto <bb 12>;

<bb 10>:
  i_19 = i_1 + 1;
  # DEBUG i => i_19

<bb 11>:
  # i_1 = PHI <0(6), i_19(10)>
  # DEBUG i => i_1
  D.46054_8 = smh_5->mparams;
  D.46055_9 = D.46054_8->num_codecs;
  if (D.46055_9 > i_1)
    goto <bb 7>;
  else
    goto <bb 12>;

<bb 12>:
  # D.46043_2 = PHI <1(5), 0(9), 1(11), 1(4)>
  return D.46043_2;

}



;; Function switch_core_media_set_video_codec (switch_core_media_set_video_codec)

switch_core_media_set_video_codec (struct switch_core_session_t * session, int force)
{
  int iftmp.104;
  uint32_t D.47748;
  uint32_t D.47747;
  struct switch_mutex_t * D.47746;
  struct switch_codec_interface_t * D.47745;
  const struct switch_codec_implementation_t * D.47744;
  struct switch_core_session_message_t msg;
  static const char __func__[34] = "switch_core_media_set_video_codec";
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_set_video_codec";
  struct switch_media_handle_t * smh;
  uint8_t D.46034;
  struct switch_rtp_t * D.46033;
  switch_payload_t D.46032;
  char * D.46031;
  char * D.46030;
  uint32_t D.46029;
  char * D.46028;
  struct switch_channel_t * D.46027;
  switch_status_t D.46024;
  struct switch_memory_pool_t * D.46023;
  switch_status_t D.46020;
  struct switch_memory_pool_t * D.46019;
  char * D.46018;
  struct switch_codec_t * D.46017;
  long unsigned int D.46016;
  const uint32_t D.46015;
  int D.46013;
  char * D.46012;
  struct payload_map_t * D.46011;
  char * const D.46010;
  struct switch_codec_t * D.46001;
  const struct switch_codec_implementation_t * D.45998;
  uint8_t D.45995;
  switch_status_t D.45994;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2109, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 26>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#7 => &smh_3->engines[1]
  # DEBUG v_engine => D#7
  D.45995_6 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].codec_negotiated;
  if (D.45995_6 == 0)
    goto <bb 26>;
  else
    goto <bb 6>;

<bb 6>:
  D.45998_8 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_codec.implementation;
  if (D.45998_8 != 0B)
    goto <bb 7>;
  else
    goto <bb 19>;

<bb 7>:
  D.46001_9 = &MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_codec;
  # DEBUG codec => D.46001_9
  if (D.46001_9 != 0B)
    goto <bb 8>;
  else
    goto <bb 12>;

<bb 8>:
  D.47748_125 = MEM[(struct switch_codec_t *)smh_3 + 13020B].flags;
  D.47747_126 = D.47748_125 & 256;
  if (D.47747_126 != 0)
    goto <bb 9>;
  else
    goto <bb 12>;

<bb 9>:
  D.47746_127 = MEM[(struct switch_codec_t *)smh_3 + 13020B].mutex;
  if (D.47746_127 != 0B)
    goto <bb 10>;
  else
    goto <bb 12>;

<bb 10>:
  D.47745_128 = MEM[(struct switch_codec_t *)smh_3 + 13020B].codec_interface;
  if (D.47745_128 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.47744_129 = MEM[(struct switch_codec_t *)smh_3 + 13020B].implementation;
  if (D.47744_129 != 0B)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:

<bb 13>:
  # iftmp.104_130 = PHI <1(11), 0(12)>
  if (iftmp.104_130 != 0)
    goto <bb 14>;
  else
    goto <bb 19>;

<bb 14>:
  if (force_11(D) == 0)
    goto <bb 26>;
  else
    goto <bb 15>;

<bb 15>:
  D.45998_13 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_codec.implementation;
  D.46010_14 = D.45998_13->iananame;
  D.46011_15 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46012_16 = D.46011_15->rm_encoding;
  D.46013_17 = strcasecmp (D.46010_14, D.46012_16);
  if (D.46013_17 != 0)
    goto <bb 17>;
  else
    goto <bb 16>;

<bb 16>:
  D.45998_18 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_codec.implementation;
  D.46015_19 = D.45998_18->samples_per_second;
  D.46011_20 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46016_21 = D.46011_20->rm_rate;
  if (D.46015_19 != D.46016_21)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.45998_25 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_codec.implementation;
  D.46010_26 = D.45998_25->iananame;
  D.46011_27 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46012_28 = D.46011_27->rm_encoding;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2128, session_2(D), 7, "Changing Codec from %s to %s\n", D.46010_26, D.46012_28);
  D.46001_29 = &MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_codec;
  switch_core_codec_destroy (D.46001_29);
  D.46017_30 = &MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].write_codec;
  switch_core_codec_destroy (D.46017_30);
  goto <bb 19>;

<bb 18>:
  D.45998_22 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_codec.implementation;
  D.46010_23 = D.45998_22->iananame;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2133, session_2(D), 7, "Already using %s\n", D.46010_23);
  goto <bb 26>;

<bb 19>:
  D.46001_31 = &MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_codec;
  D.46011_32 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46012_33 = D.46011_32->rm_encoding;
  D.46011_34 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46018_35 = D.46011_34->rm_fmtp;
  D.46011_36 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46016_37 = D.46011_36->rm_rate;
  D.46019_38 = switch_core_session_get_pool (session_2(D));
  D.46020_39 = switch_core_codec_init_with_bitrate (D.46001_31, D.46012_33, D.46018_35, D.46016_37, 0, 1, 0, 3, 0B, D.46019_38);
  if (D.46020_39 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2149, session_2(D), 3, "Can\'t load codec?\n");
  goto <bb 26>;

<bb 21>:
  D.46017_41 = &MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].write_codec;
  D.46011_42 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46012_43 = D.46011_42->rm_encoding;
  D.46011_44 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46018_45 = D.46011_44->rm_fmtp;
  D.46011_46 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46016_47 = D.46011_46->rm_rate;
  D.46023_48 = switch_core_session_get_pool (session_2(D));
  D.46024_49 = switch_core_codec_init_with_bitrate (D.46017_41, D.46012_43, D.46018_45, D.46016_47, 0, 1, 0, 3, 0B, D.46023_48);
  if (D.46024_49 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2160, session_2(D), 3, "Can\'t load codec?\n");
  goto <bb 26>;

<bb 23>:
  D.46011_51 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46016_52 = D.46011_51->rm_rate;
  MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_frame.rate = D.46016_52;
  D.46027_53 = session_2(D)->channel;
  D.46028_54 = switch_channel_get_name (D.46027_53);
  D.46011_55 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46012_56 = D.46011_55->rm_encoding;
  D.46011_57 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46016_58 = D.46011_57->rm_rate;
  D.46011_59 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46029_60 = D.46011_59->codec_ms;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2164, session_2(D), 7, "Set VIDEO Codec %s %s/%ld %d ms\n", D.46028_54, D.46012_56, D.46016_58, D.46029_60);
  D.46001_61 = &MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_codec;
  MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_frame.codec = D.46001_61;
  D.46030_62 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].write_codec.fmtp_out;
  D.46031_63 = switch_core_perform_session_strdup (session_2(D), D.46030_62, "src/switch_core_media.c", &__func__, 2169);
  MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].write_codec.fmtp_out = D.46031_63;
  D.46011_64 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46032_65 = D.46011_64->agreed_pt;
  MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].write_codec.agreed_pt = D.46032_65;
  D.46011_66 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46032_67 = D.46011_66->agreed_pt;
  MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_codec.agreed_pt = D.46032_67;
  D.46001_68 = &MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].read_codec;
  switch_core_session_set_video_read_codec (session_2(D), D.46001_68);
  D.46017_69 = &MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].write_codec;
  switch_core_session_set_video_write_codec (session_2(D), D.46017_69);
  D.46027_70 = session_2(D)->channel;
  D.46011_71 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46012_72 = D.46011_71->rm_encoding;
  D.46011_73 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46016_74 = D.46011_73->rm_rate;
  switch_channel_set_variable_printf (D.46027_70, "rtp_last_video_codec_string", "%s@%dh", D.46012_72, D.46016_74);
  D.46033_75 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].rtp_session;
  D.46034_76 = switch_rtp_ready (D.46033_75);
  if (D.46034_76 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  msg = {};
  msg.from = "src/switch_core_media.c";
  msg.message_id = 17;
  D.46033_77 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].rtp_session;
  D.46011_78 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46032_79 = D.46011_78->agreed_pt;
  switch_rtp_set_default_payload (D.46033_77, D.46032_79);
  switch_core_session_perform_receive_message (session_2(D), &msg, "src/switch_core_media.c", &__func__, 2191);

<bb 25>:
  D.46027_80 = session_2(D)->channel;
  D.46011_81 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46012_82 = D.46011_81->rm_encoding;
  switch_channel_set_variable_var_check (D.46027_80, "rtp_use_video_codec_name", D.46012_82, 1);
  D.46027_83 = session_2(D)->channel;
  D.46011_84 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46018_85 = D.46011_84->rm_fmtp;
  switch_channel_set_variable_var_check (D.46027_83, "rtp_use_video_codec_fmtp", D.46018_85, 1);
  D.46027_86 = session_2(D)->channel;
  D.46011_87 = MEM[(struct switch_rtp_engine_t *)smh_3 + 11496B].cur_payload_map;
  D.46016_88 = D.46011_87->rm_rate;
  switch_channel_set_variable_printf (D.46027_86, "rtp_use_video_codec_rate", "%d", D.46016_88);
  D.46027_89 = session_2(D)->channel;
  switch_channel_set_variable_printf (D.46027_89, "rtp_use_video_codec_ptime", "%d", 0);

<bb 26>:
  # D.45994_1 = PHI <1(4), 1(5), 0(14), 0(18), 1(20), 1(22), 0(25)>
  return D.45994_1;

}



;; Function switch_core_media_set_codec (switch_core_media_set_codec)

switch_core_media_set_codec (struct switch_core_session_t * session, int force, uint32_t codec_flags)
{
  int iftmp.104;
  uint32_t D.47767;
  uint32_t D.47766;
  struct switch_mutex_t * D.47765;
  struct switch_codec_interface_t * D.47764;
  const struct switch_codec_implementation_t * D.47763;
  int iftmp.104;
  uint32_t D.47758;
  uint32_t D.47757;
  struct switch_mutex_t * D.47756;
  struct switch_codec_interface_t * D.47755;
  const struct switch_codec_implementation_t * D.47754;
  static const char __func__[28] = "switch_core_media_set_codec";
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_set_codec";
  struct switch_media_handle_t * smh;
  int resetting;
  switch_status_t status;
  switch_payload_t D.45986;
  uint8_t D.45983;
  char * D.45982;
  char * D.45981;
  switch_payload_t D.45978;
  int D.45977;
  char * D.45976;
  switch_status_t D.45970;
  uint32_t D.45969;
  uint32_t D.45968;
  uint8_t D.45963;
  struct switch_rtp_t * D.45962;
  const struct switch_codec_implementation_t * D.45959;
  const struct switch_codec_implementation_t * D.45956;
  switch_status_t D.45953;
  struct switch_memory_pool_t * D.45952;
  switch_status_t D.45949;
  struct switch_memory_pool_t * D.45948;
  uint32_t D.45947;
  uint32_t D.45946;
  int D.45945;
  int D.45944;
  char * D.45943;
  struct switch_codec_t * D.45942;
  switch_interval_time_t D.45941;
  int D.45940;
  struct switch_channel_t * D.45939;
  struct switch_audio_resampler_t * * D.45938;
  struct switch_audio_resampler_t * D.45935;
  struct switch_audio_resampler_t * * D.45934;
  struct switch_mutex_t * D.45933;
  struct switch_audio_resampler_t * D.45930;
  long unsigned int D.45929;
  uint32_t D.45928;
  uint32_t D.45926;
  unsigned int D.45925;
  unsigned int D.45924;
  int D.45923;
  int D.45921;
  char * D.45920;
  struct switch_codec_t * D.45911;
  char * D.45908;
  struct payload_map_t * D.45907;

<bb 2>:
  # DEBUG status => 0
  # DEBUG resetting => 0
  if (session_7(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2215, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_8 = session_7(D)->media_handle;
  # DEBUG smh => smh_8
  if (smh_8 == 0B)
    goto <bb 51>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#8 => &smh_8->engines
  # DEBUG a_engine => D#8
  D.45907_11 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45908_12 = D.45907_11->iananame;
  if (D.45908_12 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2223, session_7(D), 7, "No audio codec available\n");
  # DEBUG status => 1
  goto <bb 49> (end);

<bb 7>:
  D.45911_14 = &MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_codec;
  # DEBUG codec => D.45911_14
  if (D.45911_14 != 0B)
    goto <bb 8>;
  else
    goto <bb 12>;

<bb 8>:
  D.47758_228 = MEM[(struct switch_codec_t *)smh_8 + 1604B].flags;
  D.47757_229 = D.47758_228 & 256;
  if (D.47757_229 != 0)
    goto <bb 9>;
  else
    goto <bb 12>;

<bb 9>:
  D.47756_230 = MEM[(struct switch_codec_t *)smh_8 + 1604B].mutex;
  if (D.47756_230 != 0B)
    goto <bb 10>;
  else
    goto <bb 12>;

<bb 10>:
  D.47755_231 = MEM[(struct switch_codec_t *)smh_8 + 1604B].codec_interface;
  if (D.47755_231 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.47754_232 = MEM[(struct switch_codec_t *)smh_8 + 1604B].implementation;
  if (D.47754_232 != 0B)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:

<bb 13>:
  # iftmp.104_233 = PHI <1(11), 0(12)>
  if (iftmp.104_233 != 0)
    goto <bb 14>;
  else
    goto <bb 24>;

<bb 14>:
  if (force_16(D) == 0)
    goto <bb 49> (end);
  else
    goto <bb 15>;

<bb 15>:
  D.45920_18 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.iananame;
  D.45907_19 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45908_20 = D.45907_19->iananame;
  D.45921_21 = strcasecmp (D.45920_18, D.45908_20);
  if (D.45921_21 != 0)
    goto <bb 18>;
  else
    goto <bb 16>;

<bb 16>:
  D.45923_22 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.microseconds_per_packet;
  D.45924_23 = (unsigned int) D.45923_22;
  D.45925_24 = D.45924_23 / 1000;
  D.45907_25 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45926_26 = D.45907_25->codec_ms;
  if (D.45925_24 != D.45926_26)
    goto <bb 18>;
  else
    goto <bb 17>;

<bb 17>:
  D.45928_27 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.samples_per_second;
  D.45907_28 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45929_29 = D.45907_28->rm_rate;
  if (D.45928_27 != D.45929_29)
    goto <bb 18>;
  else
    goto <bb 23>;

<bb 18>:
  D.45930_32 = session_7(D)->read_resampler;
  if (D.45930_32 != 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.45933_33 = session_7(D)->resample_mutex;
  switch_mutex_lock (D.45933_33);
  D.45934_34 = &session_7(D)->read_resampler;
  switch_resample_destroy (D.45934_34);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2238, session_7(D), 5, "Deactivating read resampler\n");
  D.45933_35 = session_7(D)->resample_mutex;
  switch_mutex_unlock (D.45933_35);

<bb 20>:
  D.45935_36 = session_7(D)->write_resampler;
  if (D.45935_36 != 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.45933_37 = session_7(D)->resample_mutex;
  switch_mutex_lock (D.45933_37);
  D.45938_38 = &session_7(D)->write_resampler;
  switch_resample_destroy (D.45938_38);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2245, session_7(D), 5, "Deactivating write resampler\n");
  D.45933_39 = session_7(D)->resample_mutex;
  switch_mutex_unlock (D.45933_39);

<bb 22>:
  switch_core_session_reset (session_7(D), 0, 0);
  D.45939_40 = session_7(D)->channel;
  switch_channel_perform_audio_sync (D.45939_40, "src/switch_core_media.c", &__func__, 2250);
  D.45920_41 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.iananame;
  D.45923_42 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.microseconds_per_packet;
  D.45940_43 = D.45923_42 / 1000;
  D.45928_44 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.samples_per_second;
  D.45907_45 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45908_46 = D.45907_45->iananame;
  D.45907_47 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45926_48 = D.45907_47->codec_ms;
  D.45907_49 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45929_50 = D.45907_49->rm_rate;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2252, session_7(D), 7, "Changing Codec from %s@%dms@%dhz to %s@%dms@%luhz\n", D.45920_41, D.45940_43, D.45928_44, D.45908_46, D.45926_48, D.45929_50);
  D.45923_51 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.microseconds_per_packet;
  D.45941_52 = (switch_interval_time_t) D.45923_51;
  switch_sleep (D.45941_52);
  switch_core_session_lock_codec_write (session_7(D));
  switch_core_session_lock_codec_read (session_7(D));
  # DEBUG resetting => 1
  D.45923_54 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.microseconds_per_packet;
  D.45941_55 = (switch_interval_time_t) D.45923_54;
  switch_sleep (D.45941_55);
  D.45911_56 = &MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_codec;
  switch_core_codec_destroy (D.45911_56);
  D.45942_57 = &MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].write_codec;
  switch_core_codec_destroy (D.45942_57);
  D.45939_58 = session_7(D)->channel;
  switch_channel_perform_audio_sync (D.45939_58, "src/switch_core_media.c", &__func__, 2269);
  goto <bb 24>;

<bb 23>:
  D.45920_30 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.iananame;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2271, session_7(D), 7, "Already using %s\n", D.45920_30);
  # DEBUG status => 0
  goto <bb 49> (end);

<bb 24>:
  # resetting_2 = PHI <0(13), 1(22)>
  # DEBUG resetting => resetting_2
  D.45911_59 = &MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_codec;
  D.45907_60 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45908_61 = D.45907_60->iananame;
  D.45907_62 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45943_63 = D.45907_62->rm_fmtp;
  D.45907_64 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45929_65 = D.45907_64->rm_rate;
  D.45907_66 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45926_67 = D.45907_66->codec_ms;
  D.45944_68 = (int) D.45926_67;
  D.45907_69 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45945_70 = D.45907_69->channels;
  D.45907_71 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45946_72 = D.45907_71->bitrate;
  D.45947_74 = codec_flags_73(D) | 3;
  D.45948_75 = switch_core_session_get_pool (session_7(D));
  D.45949_76 = switch_core_codec_init_with_bitrate (D.45911_59, D.45908_61, D.45943_63, D.45929_65, D.45944_68, D.45945_70, D.45946_72, D.45947_74, 0B, D.45948_75);
  if (D.45949_76 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2285, session_7(D), 3, "Can\'t load codec?\n");
  D.45939_77 = session_7(D)->channel;
  switch_channel_perform_hangup (D.45939_77, "src/switch_core_media.c", &__func__, 2286, 88);
  # DEBUG status => 1
  goto <bb 49> (end);

<bb 26>:
  MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_codec.session = session_7(D);
  D.45942_79 = &MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].write_codec;
  D.45907_80 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45908_81 = D.45907_80->iananame;
  D.45907_82 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45943_83 = D.45907_82->rm_fmtp;
  D.45907_84 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45929_85 = D.45907_84->rm_rate;
  D.45907_86 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45926_87 = D.45907_86->codec_ms;
  D.45944_88 = (int) D.45926_87;
  D.45907_89 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45945_90 = D.45907_89->channels;
  D.45907_91 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45946_92 = D.45907_91->bitrate;
  D.45947_93 = codec_flags_73(D) | 3;
  D.45952_94 = switch_core_session_get_pool (session_7(D));
  D.45953_95 = switch_core_codec_init_with_bitrate (D.45942_79, D.45908_81, D.45943_83, D.45929_85, D.45944_88, D.45945_90, D.45946_92, D.45947_93, 0B, D.45952_94);
  if (D.45953_95 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2302, session_7(D), 3, "Can\'t load codec?\n");
  D.45939_96 = session_7(D)->channel;
  switch_channel_perform_hangup (D.45939_96, "src/switch_core_media.c", &__func__, 2303, 88);
  # DEBUG status => 1
  goto <bb 49> (end);

<bb 28>:
  MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].write_codec.session = session_7(D);
  D.45939_98 = session_7(D)->channel;
  D.45907_99 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45908_100 = D.45907_99->iananame;
  switch_channel_set_variable_var_check (D.45939_98, "rtp_use_codec_name", D.45908_100, 1);
  D.45939_101 = session_7(D)->channel;
  D.45907_102 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45943_103 = D.45907_102->rm_fmtp;
  switch_channel_set_variable_var_check (D.45939_101, "rtp_use_codec_fmtp", D.45943_103, 1);
  D.45939_104 = session_7(D)->channel;
  D.45907_105 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45929_106 = D.45907_105->rm_rate;
  switch_channel_set_variable_printf (D.45939_104, "rtp_use_codec_rate", "%d", D.45929_106);
  D.45939_107 = session_7(D)->channel;
  D.45907_108 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45926_109 = D.45907_108->codec_ms;
  switch_channel_set_variable_printf (D.45939_107, "rtp_use_codec_ptime", "%d", D.45926_109);
  D.45939_110 = session_7(D)->channel;
  D.45907_111 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45908_112 = D.45907_111->iananame;
  D.45907_113 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45929_114 = D.45907_113->rm_rate;
  D.45907_115 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45926_116 = D.45907_115->codec_ms;
  switch_channel_set_variable_printf (D.45939_110, "rtp_last_audio_codec_string", "%s@%dh@%di", D.45908_112, D.45929_114, D.45926_116);
  D.45956_117 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_codec.implementation;
  if (D.45956_117 == 0B)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  __assert_fail ("a_engine->read_codec.implementation", "src/switch_core_media.c", 2316, &__PRETTY_FUNCTION__);

<bb 30>:
  D.45959_118 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].write_codec.implementation;
  if (D.45959_118 == 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  __assert_fail ("a_engine->write_codec.implementation", "src/switch_core_media.c", 2317, &__PRETTY_FUNCTION__);

<bb 32>:
  D.45956_119 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_codec.implementation;
  MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl = *D.45956_119;
  D.45959_120 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].write_codec.implementation;
  MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].write_impl = *D.45959_120;
  D.45956_121 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_codec.implementation;
  switch_core_session_set_read_impl (session_7(D), D.45956_121);
  D.45959_122 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].write_codec.implementation;
  switch_core_session_set_write_impl (session_7(D), D.45959_122);
  D.45962_123 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].rtp_session;
  D.45963_124 = switch_rtp_ready (D.45962_123);
  if (D.45963_124 != 0)
    goto <bb 33>;
  else
    goto <bb 37>;

<bb 33>:
  D.45956_125 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_codec.implementation;
  if (D.45956_125 == 0B)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  __assert_fail ("a_engine->read_codec.implementation", "src/switch_core_media.c", 2326, &__PRETTY_FUNCTION__);

<bb 35>:
  D.45962_126 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].rtp_session;
  D.45923_127 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.microseconds_per_packet;
  D.45968_128 = (uint32_t) D.45923_127;
  D.45969_129 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.samples_per_packet;
  D.45970_130 = switch_rtp_change_interval (D.45962_126, D.45968_128, D.45969_129);
  if (D.45970_130 != 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  D.45939_131 = session_7(D)->channel;
  switch_channel_perform_hangup (D.45939_131, "src/switch_core_media.c", &__func__, 2331, 27);
  # DEBUG status => 1
  goto <bb 49> (end);

<bb 37>:
  D.45907_133 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45929_134 = D.45907_133->rm_rate;
  MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_frame.rate = D.45929_134;
  D.45911_135 = &MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_codec;
  # DEBUG codec => D.45911_135
  if (D.45911_135 != 0B)
    goto <bb 38>;
  else
    goto <bb 42>;

<bb 38>:
  D.47767_235 = MEM[(struct switch_codec_t *)smh_8 + 1604B].flags;
  D.47766_236 = D.47767_235 & 256;
  if (D.47766_236 != 0)
    goto <bb 39>;
  else
    goto <bb 42>;

<bb 39>:
  D.47765_237 = MEM[(struct switch_codec_t *)smh_8 + 1604B].mutex;
  if (D.47765_237 != 0B)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 40>:
  D.47764_238 = MEM[(struct switch_codec_t *)smh_8 + 1604B].codec_interface;
  if (D.47764_238 != 0B)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.47763_239 = MEM[(struct switch_codec_t *)smh_8 + 1604B].implementation;
  if (D.47763_239 != 0B)
    goto <bb 43>;
  else
    goto <bb 42>;

<bb 42>:

<bb 43>:
  # iftmp.104_240 = PHI <1(41), 0(42)>
  if (iftmp.104_240 == 0)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2339, session_7(D), 3, "Can\'t load codec?\n");
  # DEBUG status => 1
  goto <bb 49> (end);

<bb 45>:
  D.45939_138 = session_7(D)->channel;
  D.45976_139 = switch_channel_get_name (D.45939_138);
  D.45907_140 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45908_141 = D.45907_140->iananame;
  D.45907_142 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45929_143 = D.45907_142->rm_rate;
  D.45907_144 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45926_145 = D.45907_144->codec_ms;
  D.45969_146 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.samples_per_packet;
  D.45977_147 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_impl.bits_per_second;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2343, session_7(D), 7, "Set Codec %s %s/%ld %d ms %d samples %d bits\n", D.45976_139, D.45908_141, D.45929_143, D.45926_145, D.45969_146, D.45977_147);
  D.45911_148 = &MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_codec;
  MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_frame.codec = D.45911_148;
  D.45907_149 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45978_150 = D.45907_149->agreed_pt;
  MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].write_codec.agreed_pt = D.45978_150;
  D.45907_151 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45978_152 = D.45907_151->agreed_pt;
  MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_codec.agreed_pt = D.45978_152;
  if (force_16(D) != 2)
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  D.45911_153 = &MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].read_codec;
  switch_core_session_set_real_read_codec (session_7(D), D.45911_153);
  D.45942_154 = &MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].write_codec;
  switch_core_session_set_write_codec (session_7(D), D.45942_154);

<bb 47>:
  D.45907_155 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45981_156 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].write_codec.fmtp_out;
  D.45982_157 = switch_core_perform_session_strdup (session_7(D), D.45981_156, "src/switch_core_media.c", &__func__, 2357);
  D.45907_155->fmtp_out = D.45982_157;
  D.45962_158 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].rtp_session;
  D.45983_159 = switch_rtp_ready (D.45962_158);
  if (D.45983_159 != 0)
    goto <bb 48>;
  else
    goto <bb 49> (end);

<bb 48>:
  D.45962_160 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].rtp_session;
  D.45907_161 = MEM[(struct switch_rtp_engine_t *)smh_8 + 80B].cur_payload_map;
  D.45986_162 = D.45907_161->pt;
  switch_rtp_set_default_payload (D.45962_160, D.45986_162);

  # status_1 = PHI <1(6), 0(14), 0(23), 1(25), 1(27), 1(36), 1(44), 0(47), 0(48)>
  # resetting_3 = PHI <0(6), 0(14), 0(23), resetting_2(25), resetting_2(27), resetting_2(36), resetting_2(44), resetting_2(47), resetting_2(48)>
end:
  # DEBUG resetting => resetting_3
  # DEBUG status => status_1
  if (resetting_3 != 0)
    goto <bb 50>;
  else
    goto <bb 51>;

<bb 50>:
  switch_core_session_unlock_codec_write (session_7(D));
  switch_core_session_unlock_codec_read (session_7(D));

<bb 51>:
  # status_4 = PHI <1(4), status_1(50), status_1(49)>
  return status_4;

}



;; Function switch_core_media_read_frame (switch_core_media_read_frame)

switch_core_media_read_frame (struct switch_core_session_t * session, struct switch_frame_t * * frame, switch_io_flag_t flags, int stream_id, switch_media_type_t type)
{
  int iftmp.104;
  uint32_t D.47792;
  uint32_t D.47791;
  struct switch_mutex_t * D.47790;
  struct switch_codec_interface_t * D.47789;
  const struct switch_codec_implementation_t * D.47788;
  int iftmp.104;
  uint32_t D.47777;
  uint32_t D.47776;
  struct switch_mutex_t * D.47775;
  struct switch_codec_interface_t * D.47774;
  const struct switch_codec_implementation_t * D.47773;
  struct payload_map_t * pmap;
  uint32_t codec_ms;
  int frames;
  uint32_t bytes;
  struct switch_dtmf_t dtmf;
  char * uuid;
  int i;
  char header[50];
  char value[30];
  struct switch_event_t * event;
  int v;
  int v;
  int rtp_hold_timeout_sec;
  int rtp_timeout_sec;
  const char * val;
  static const char __func__[29] = "switch_core_media_read_frame";
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_read_frame";
  int do_cng;
  struct switch_media_handle_t * smh;
  switch_status_t status;
  struct switch_rtp_engine_t * engine;
  struct switch_rtcp_frame_t rtcp_frame;
  uint32_t D.46362;
  uint32_t frames.134;
  uint32_t D.46360;
  int D.46355;
  switch_payload_t D.46354;
  char * D.46353;
  uint8_t D.46350;
  switch_payload_t D.46347;
  struct switch_mutex_t * D.46346;
  int D.46345;
  int D.46344;
  switch_payload_t D.46341;
  switch_payload_t D.46338;
  switch_payload_t D.46335;
  switch_payload_t D.46333;
  switch_payload_t D.46331;
  switch_payload_t D.46330;
  switch_payload_t D.46328;
  struct switch_core_media_params_t * D.46327;
  uint8_t D.46324;
  int D.46317;
  int codec_ms.133;
  uint32_t D.46309;
  struct payload_map_t * D.46308;
  uint32_t D.46305;
  uint32_t D.46304;
  uint32_t D.46299;
  uint32_t D.46298;
  uint32_t D.46296;
  uint32_t D.46293;
  switch_size_t D.46292;
  switch_size_t D.46289;
  uint32_t D.46285;
  uint32_t D.46279;
  uint32_t D.46276;
  switch_core_media_flag_t D.46273;
  switch_frame_flag_t D.46266;
  uint32_t D.46263;
  switch_size_t D.46260;
  switch_frame_flag_t D.46257;
  switch_frame_flag_t D.46256;
  int D.46255;
  uint16_t D.46254;
  uint32_t D.46253;
  uint32_t D.46251;
  uint32_t D.46249;
  uint32_t D.46247;
  uint32_t D.46245;
  int D.46243;
  uint8_t D.46242;
  uint32_t D.46240;
  switch_time_t D.46238;
  uint32_t D.46236;
  switch_size_t D.46235;
  uint32_t D.46233;
  uint32_t D.46232;
  uint32_t D.46231;
  uint32_t D.46230;
  uint32_t D.46229;
  uint32_t D.46227;
  char * D.46225;
  struct switch_event_t * event.132;
  switch_status_t D.46219;
  switch_status_t D.46216;
  uint32_t D.46213;
  uint32_t D.46212;
  uint32_t rtp_hold_timeout_sec.131;
  uint32_t D.46206;
  uint32_t D.46205;
  uint32_t D.46204;
  uint32_t D.46203;
  uint32_t rtp_timeout_sec.130;
  uint32_t D.46201;
  switch_status_t D.46188;
  uint8_t D.46182;
  uint8_t D.46179;
  uint32_t D.46178;
  void * D.46177;
  uint32_t D.46176;
  switch_frame_flag_t D.46175;
  switch_frame_flag_t D.46174;
  struct switch_frame_t * D.46173;
  const char * D.46170;
  _Bool D.46165;
  _Bool D.46164;
  _Bool D.46163;
  struct switch_frame_t * D.46162;
  char * iftmp.129;
  char * D.46157;
  switch_status_t D.46154;
  struct switch_mutex_t * D.46151;
  uint32_t D.46150;
  uint8_t D.46148;
  switch_channel_state_t D.46146;
  struct switch_channel_t * D.46145;
  struct switch_rtp_t * D.46140;
  struct switch_codec_t * D.46138;
  const struct switch_codec_implementation_t * D.46136;
  switch_core_media_flag_t D.46129;

<bb 2>:
  # DEBUG do_cng => 0
  if (session_13(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 1623, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_14 = session_13(D)->media_handle;
  # DEBUG smh => smh_14
  if (smh_14 == 0B)
    goto <bb 126>;
  else
    goto <bb 5>;

<bb 5>:
  D.46129_16 = smh_14->media_flags[0];
  if (D.46129_16 == 0)
    goto <bb 126>;
  else
    goto <bb 6>;

<bb 6>:
  engine_21 = &smh_14->engines[type_19(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_21
  engine_21->read_frame.datalen = 0;
  D.46136_22 = engine_21->read_codec.implementation;
  if (D.46136_22 == 0B)
    goto <bb 126>;
  else
    goto <bb 7>;

<bb 7>:
  D.46138_23 = &engine_21->read_codec;
  # DEBUG codec => D.46138_23
  if (D.46138_23 != 0B)
    goto <bb 8>;
  else
    goto <bb 12>;

<bb 8>:
  D.47777_424 = MEM[(struct switch_codec_t *)engine_21 + 1524B].flags;
  D.47776_425 = D.47777_424 & 256;
  if (D.47776_425 != 0)
    goto <bb 9>;
  else
    goto <bb 12>;

<bb 9>:
  D.47775_426 = MEM[(struct switch_codec_t *)engine_21 + 1524B].mutex;
  if (D.47775_426 != 0B)
    goto <bb 10>;
  else
    goto <bb 12>;

<bb 10>:
  D.47774_427 = MEM[(struct switch_codec_t *)engine_21 + 1524B].codec_interface;
  if (D.47774_427 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.47773_428 = MEM[(struct switch_codec_t *)engine_21 + 1524B].implementation;
  if (D.47773_428 != 0B)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:

<bb 13>:
  # iftmp.104_429 = PHI <1(11), 0(12)>
  if (iftmp.104_429 == 0)
    goto <bb 126>;
  else
    goto <bb 14>;

<bb 14>:
  D.46140_25 = engine_21->rtp_session;
  if (D.46140_25 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  __assert_fail ("engine->rtp_session != ((void *)0)", "src/switch_core_media.c", 1641, &__PRETTY_FUNCTION__);

<bb 16>:
  engine_21->read_frame.datalen = 0;
  D.46145_26 = session_13(D)->channel;
  D.46146_27 = switch_channel_get_state (D.46145_26);
  if (D.46146_27 > 9)
    goto <bb 126>;
  else
    goto <bb 17>;

<bb 17>:
  D.46140_28 = engine_21->rtp_session;
  D.46148_29 = switch_rtp_ready (D.46140_28);
  if (D.46148_29 == 0)
    goto <bb 126>;
  else
    goto <bb 18>;

<bb 18>:
  D.46145_30 = session_13(D)->channel;
  D.46150_31 = switch_channel_test_flag (D.46145_30, 45);
  if (D.46150_31 != 0)
    goto <bb 126>;
  else
    goto <bb 19>;

<bb 19>:
  D.46151_32 = engine_21->read_mutex[type_19(D)];
  if (D.46151_32 != 0B)
    goto <bb 21>;
  else
    goto <bb 20>;

<bb 20>:
  do_cng_183 = 0;
  goto <bb 119>;

<bb 21>:
  D.46151_33 = engine_21->read_mutex[type_19(D)];
  D.46154_34 = switch_mutex_trylock (D.46151_33);
  if (D.46154_34 != 0)
    goto <bb 22>;
  else
    goto <bb 20>;

<bb 22>:
  D.46145_35 = session_13(D)->channel;
  D.46157_36 = switch_channel_get_name (D.46145_35);
  if (type_19(D) == 1)
    goto <bb 24>;
  else
    goto <bb 23>;

<bb 23>:

<bb 24>:
  # iftmp.129_11 = PHI <"video"(22), "audio"(23)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1650, session_13(D), 101, "%s is already being read for %s\n", D.46157_36, iftmp.129_11);
  goto <bb 126>;

<bb 25>:
  engine_21->read_frame.flags = 0;
  D.46140_42 = engine_21->rtp_session;
  D.46162_43 = &engine_21->read_frame;
  status_45 = switch_rtp_zerocopy_read_frame (D.46140_42, D.46162_43, flags_44(D));
  # DEBUG status => status_45
  D.46163_46 = status_45 != 0;
  D.46164_47 = status_45 != 11;
  D.46165_48 = D.46163_46 && D.46164_47;
  if (D.46165_48 != 0)
    goto <bb 26>;
  else
    goto <bb 30>;

<bb 26>:
  if (status_45 == 2)
    goto <bb 27>;
  else
    goto <bb 124> (end);

<bb 27>:
  D.46145_49 = session_13(D)->channel;
  D.46170_50 = switch_channel_get_variable_dup (D.46145_49, "execute_on_media_timeout", 1, -1);
  if (D.46170_50 != 0B)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  D.46162_51 = &engine_21->read_frame;
  *frame_52(D) = D.46162_51;
  D.46173_54 = *frame_52(D);
  D.46174_55 = D.46173_54->flags;
  D.46175_56 = D.46174_55 | 1;
  D.46173_54->flags = D.46175_56;
  D.46173_57 = *frame_52(D);
  D.46176_58 = engine_21->read_impl.encoded_bytes_per_packet;
  D.46173_57->datalen = D.46176_58;
  D.46173_59 = *frame_52(D);
  D.46177_60 = D.46173_59->data;
  D.46173_61 = *frame_52(D);
  D.46178_62 = D.46173_61->datalen;
  memset (D.46177_60, 0, D.46178_62);
  D.46145_63 = session_13(D)->channel;
  switch_channel_execute_on (D.46145_63, "execute_on_media_timeout");
  # DEBUG status => 0
  goto <bb 124> (end);

<bb 29>:
  D.46145_65 = session_13(D)->channel;
  switch_channel_perform_hangup (D.46145_65, "src/switch_core_media.c", &__func__, 1674, 604);
  goto <bb 124> (end);

<bb 30>:
  D.46179_66 = engine_21->reset_codec;
  if (D.46179_66 != 0)
    goto <bb 31>;
  else
    goto <bb 48>;

<bb 31>:
  # DEBUG rtp_timeout_sec => 0
  # DEBUG rtp_hold_timeout_sec => 0
  engine_21->reset_codec = 0;
  D.46140_69 = engine_21->rtp_session;
  D.46182_70 = switch_rtp_ready (D.46140_69);
  if (D.46182_70 != 0)
    goto <bb 32>;
  else
    goto <bb 47>;

<bb 32>:
  if (type_19(D) == 1)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  switch_core_media_set_video_codec (session_13(D), 1);
  goto <bb 36>;

<bb 34>:
  D.46188_71 = switch_core_media_set_codec (session_13(D), 1, 0);
  if (D.46188_71 != 0)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  *frame_52(D) = 0B;
  # DEBUG status => 9
  goto <bb 124> (end);

<bb 36>:
  D.46145_73 = session_13(D)->channel;
  val_74 = switch_channel_get_variable_dup (D.46145_73, "rtp_timeout_sec", 1, -1);
  # DEBUG val => val_74
  if (val_74 != 0B)
    goto <bb 37>;
  else
    goto <bb 39>;

<bb 37>:
  # DEBUG __nptr => val_74
  v_431 = strtol (val_74, 0B, 10);
  # DEBUG v => NULL
  if (v_431 >= 0)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  # DEBUG rtp_timeout_sec => v_431

<bb 39>:
  # rtp_timeout_sec_4 = PHI <0(36), 0(37), v_431(38)>
  # DEBUG rtp_timeout_sec => rtp_timeout_sec_4
  D.46145_77 = session_13(D)->channel;
  val_78 = switch_channel_get_variable_dup (D.46145_77, "rtp_hold_timeout_sec", 1, -1);
  # DEBUG val => val_78
  if (val_78 != 0B)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 40>:
  # DEBUG __nptr => val_78
  v_432 = strtol (val_78, 0B, 10);
  # DEBUG v => NULL
  if (v_432 >= 0)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  # DEBUG rtp_hold_timeout_sec => v_432

<bb 42>:
  # rtp_hold_timeout_sec_5 = PHI <0(39), 0(40), v_432(41)>
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_5
  if (rtp_timeout_sec_4 != 0)
    goto <bb 43>;
  else
    goto <bb 45>;

<bb 43>:
  D.46201_81 = engine_21->read_impl.samples_per_second;
  rtp_timeout_sec.130_82 = (uint32_t) rtp_timeout_sec_4;
  D.46203_83 = D.46201_81 * rtp_timeout_sec.130_82;
  D.46204_84 = engine_21->read_impl.samples_per_packet;
  D.46205_85 = D.46203_83 / D.46204_84;
  engine_21->max_missed_packets = D.46205_85;
  D.46140_86 = engine_21->rtp_session;
  D.46206_87 = engine_21->max_missed_packets;
  switch_rtp_set_max_missed_packets (D.46140_86, D.46206_87);
  if (rtp_hold_timeout_sec_5 == 0)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  rtp_hold_timeout_sec_88 = rtp_timeout_sec_4 * 10;
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_88

<bb 45>:
  # rtp_hold_timeout_sec_6 = PHI <rtp_hold_timeout_sec_5(42), rtp_hold_timeout_sec_5(43), rtp_hold_timeout_sec_88(44)>
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_6
  if (rtp_hold_timeout_sec_6 != 0)
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  D.46201_89 = engine_21->read_impl.samples_per_second;
  rtp_hold_timeout_sec.131_90 = (uint32_t) rtp_hold_timeout_sec_6;
  D.46212_91 = D.46201_89 * rtp_hold_timeout_sec.131_90;
  D.46204_92 = engine_21->read_impl.samples_per_packet;
  D.46213_93 = D.46212_91 / D.46204_92;
  engine_21->max_missed_hold_packets = D.46213_93;

<bb 47>:
  engine_21->check_frames = 0;
  engine_21->last_ts = 0;
  # DEBUG do_cng => 1

<bb 48>:
  # do_cng_2 = PHI <do_cng_3(30), 1(47)>
  # DEBUG do_cng => do_cng_2
  if (do_cng_2 != 0)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  D.46162_95 = &engine_21->read_frame;
  *frame_52(D) = D.46162_95;
  D.46173_97 = *frame_52(D);
  D.46174_98 = D.46173_97->flags;
  D.46175_99 = D.46174_98 | 1;
  D.46173_97->flags = D.46175_99;
  D.46173_100 = *frame_52(D);
  D.46176_101 = engine_21->read_impl.encoded_bytes_per_packet;
  D.46173_100->datalen = D.46176_101;
  D.46173_102 = *frame_52(D);
  D.46177_103 = D.46173_102->data;
  D.46173_104 = *frame_52(D);
  D.46178_105 = D.46173_104->datalen;
  memset (D.46177_103, 0, D.46178_105);
  # DEBUG status => 0
  goto <bb 124> (end);

<bb 50>:
  D.46140_107 = engine_21->rtp_session;
  D.46216_108 = switch_rtcp_zerocopy_read_frame (D.46140_107, &rtcp_frame);
  if (D.46216_108 == 0)
    goto <bb 51>;
  else
    goto <bb 58>;

<bb 51>:
  D.46219_109 = switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 1747, &event, 71, 0B);
  if (D.46219_109 == 0)
    goto <bb 52>;
  else
    goto <bb 58>;

<bb 52>:
  uuid_110 = switch_core_session_get_uuid (session_13(D));
  # DEBUG uuid => uuid_110
  if (uuid_110 != 0B)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  event.132_111 = event;
  D.46225_112 = switch_core_session_get_uuid (session_13(D));
  switch_event_add_header_string (event.132_111, 1, "Unique-ID", D.46225_112);

<bb 54>:
  D.46227_114 = rtcp_frame.ssrc;
  snprintf (&value, 30, &"%.8x"[0], D.46227_114);
  event.132_115 = event;
  switch_event_add_header_string (event.132_115, 1, "SSRC", &value);
  D.46229_117 = rtcp_frame.ntp_msw;
  snprintf (&value, 30, &"%u"[0], D.46229_117);
  event.132_118 = event;
  switch_event_add_header_string (event.132_118, 1, "NTP-Most-Significant-Word", &value);
  D.46230_120 = rtcp_frame.ntp_lsw;
  snprintf (&value, 30, &"%u"[0], D.46230_120);
  event.132_121 = event;
  switch_event_add_header_string (event.132_121, 1, "NTP-Least-Significant-Word", &value);
  D.46231_123 = rtcp_frame.timestamp;
  snprintf (&value, 30, &"%u"[0], D.46231_123);
  event.132_124 = event;
  switch_event_add_header_string (event.132_124, 1, "RTP-Timestamp", &value);
  D.46232_126 = rtcp_frame.packet_count;
  snprintf (&value, 30, &"%u"[0], D.46232_126);
  event.132_127 = event;
  switch_event_add_header_string (event.132_127, 1, "Sender-Packet-Count", &value);
  D.46233_129 = rtcp_frame.octect_count;
  snprintf (&value, 30, &"%u"[0], D.46233_129);
  event.132_130 = event;
  switch_event_add_header_string (event.132_130, 1, "Octect-Packet-Count", &value);
  D.46235_132 = engine_21->read_frame.timestamp;
  snprintf (&value, 30, &"%d"[0], D.46235_132);
  event.132_133 = event;
  switch_event_add_header_string (event.132_133, 1, "Last-RTP-Timestamp", &value);
  D.46236_135 = engine_21->read_frame.rate;
  snprintf (&value, 30, &"%u"[0], D.46236_135);
  event.132_136 = event;
  switch_event_add_header_string (event.132_136, 1, "RTP-Rate", &value);
  D.46238_138 = switch_time_now ();
  snprintf (&value, 30, &"%lld"[0], D.46238_138);
  event.132_139 = event;
  switch_event_add_header_string (event.132_139, 1, "Capture-Time", &value);
  # DEBUG i => 0
  goto <bb 56>;

<bb 55>:
  snprintf (&header, 50, &"Source%u-SSRC"[0], i_7);
  D.46240_145 = rtcp_frame.reports[i_7].ssrc;
  snprintf (&value, 30, &"%.8x"[0], D.46240_145);
  event.132_146 = event;
  switch_event_add_header_string (event.132_146, 1, &header, &value);
  snprintf (&header, 50, &"Source%u-Fraction"[0], i_7);
  D.46242_149 = rtcp_frame.reports[i_7].fraction;
  D.46243_150 = (int) D.46242_149;
  snprintf (&value, 30, &"%u"[0], D.46243_150);
  event.132_151 = event;
  switch_event_add_header_string (event.132_151, 1, &header, &value);
  snprintf (&header, 50, &"Source%u-Lost"[0], i_7);
  D.46245_154 = rtcp_frame.reports[i_7].lost;
  snprintf (&value, 30, &"%u"[0], D.46245_154);
  event.132_155 = event;
  switch_event_add_header_string (event.132_155, 1, &header, &value);
  snprintf (&header, 50, &"Source%u-Highest-Sequence-Number-Received"[0], i_7);
  D.46247_158 = rtcp_frame.reports[i_7].highest_sequence_number_received;
  snprintf (&value, 30, &"%u"[0], D.46247_158);
  event.132_159 = event;
  switch_event_add_header_string (event.132_159, 1, &header, &value);
  snprintf (&header, 50, &"Source%u-Jitter"[0], i_7);
  D.46249_162 = rtcp_frame.reports[i_7].jitter;
  snprintf (&value, 30, &"%u"[0], D.46249_162);
  event.132_163 = event;
  switch_event_add_header_string (event.132_163, 1, &header, &value);
  snprintf (&header, 50, &"Source%u-LSR"[0], i_7);
  D.46251_166 = rtcp_frame.reports[i_7].lsr;
  snprintf (&value, 30, &"%u"[0], D.46251_166);
  event.132_167 = event;
  switch_event_add_header_string (event.132_167, 1, &header, &value);
  snprintf (&header, 50, &"Source%u-DLSR"[0], i_7);
  D.46253_170 = rtcp_frame.reports[i_7].dlsr;
  snprintf (&value, 30, &"%u"[0], D.46253_170);
  event.132_171 = event;
  switch_event_add_header_string (event.132_171, 1, &header, &value);
  i_172 = i_7 + 1;
  # DEBUG i => i_172

<bb 56>:
  # i_7 = PHI <0(54), i_172(55)>
  # DEBUG i => i_7
  D.46254_141 = rtcp_frame.report_count;
  D.46255_142 = (int) D.46254_141;
  if (D.46255_142 > i_7)
    goto <bb 55>;
  else
    goto <bb 57>;

<bb 57>:
  switch_event_fire_detailed ("src/switch_core_media.c", &__func__, 1809, &event, 0B);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1810, session_13(D), 110, "Dispatched RTCP event\n");

<bb 58>:
  D.46256_173 = engine_21->read_frame.flags;
  D.46257_174 = D.46256_173 & 32;
  if (D.46257_174 != 0)
    goto <bb 59>;
  else
    goto <bb 60>;

<bb 59>:
  D.46162_175 = &engine_21->read_frame;
  *frame_52(D) = D.46162_175;
  # DEBUG status => 0
  goto <bb 124> (end);

<bb 60>:
  D.46140_177 = engine_21->rtp_session;
  D.46260_178 = switch_rtp_has_dtmf (D.46140_177);
  if (D.46260_178 != 0)
    goto <bb 61>;
  else
    goto <bb 62>;

<bb 61>:
  dtmf = {};
  D.46140_179 = engine_21->rtp_session;
  switch_rtp_dequeue_dtmf (D.46140_179, &dtmf);
  D.46145_180 = session_13(D)->channel;
  switch_channel_queue_dtmf (D.46145_180, &dtmf);

<bb 62>:
  D.46263_181 = engine_21->read_frame.datalen;
  if (D.46263_181 != 0)
    goto <bb 63>;
  else
    goto <bb 118>;

<bb 63>:
  # DEBUG bytes => 0
  # DEBUG frames => 1
  D.46256_184 = engine_21->read_frame.flags;
  D.46266_185 = D.46256_184 & 1;
  if (D.46266_185 == 0)
    goto <bb 64>;
  else
    goto <bb 121>;

<bb 64>:
  D.46136_186 = engine_21->read_codec.implementation;
  if (D.46136_186 == 0B)
    goto <bb 72>;
  else
    goto <bb 65>;

<bb 65>:
  D.46138_187 = &engine_21->read_codec;
  # DEBUG codec => D.46138_187
  if (D.46138_187 != 0B)
    goto <bb 66>;
  else
    goto <bb 70>;

<bb 66>:
  D.47792_433 = MEM[(struct switch_codec_t *)engine_21 + 1524B].flags;
  D.47791_434 = D.47792_433 & 256;
  if (D.47791_434 != 0)
    goto <bb 67>;
  else
    goto <bb 70>;

<bb 67>:
  D.47790_435 = MEM[(struct switch_codec_t *)engine_21 + 1524B].mutex;
  if (D.47790_435 != 0B)
    goto <bb 68>;
  else
    goto <bb 70>;

<bb 68>:
  D.47789_436 = MEM[(struct switch_codec_t *)engine_21 + 1524B].codec_interface;
  if (D.47789_436 != 0B)
    goto <bb 69>;
  else
    goto <bb 70>;

<bb 69>:
  D.47788_437 = MEM[(struct switch_codec_t *)engine_21 + 1524B].implementation;
  if (D.47788_437 != 0B)
    goto <bb 71>;
  else
    goto <bb 70>;

<bb 70>:

<bb 71>:
  # iftmp.104_438 = PHI <1(69), 0(70)>
  if (iftmp.104_438 == 0)
    goto <bb 72>;
  else
    goto <bb 73>;

<bb 72>:
  *frame_52(D) = 0B;
  # DEBUG status => 9
  goto <bb 124> (end);

<bb 73>:
  D.46273_189 = smh_14->media_flags[2];
  if (D.46273_189 != 0)
    goto <bb 74>;
  else
    goto <bb 96>;

<bb 74>:
  D.46276_190 = engine_21->check_frames;
  if (D.46276_190 <= 49)
    goto <bb 75>;
  else
    goto <bb 96>;

<bb 75>:
  D.46276_191 = engine_21->check_frames;
  D.46279_192 = D.46276_191 + 1;
  engine_21->check_frames = D.46279_192;
  D.46176_193 = engine_21->read_impl.encoded_bytes_per_packet;
  if (D.46176_193 == 0)
    goto <bb 76>;
  else
    goto <bb 77>;

<bb 76>:
  engine_21->check_frames = 50;
  goto <bb 115> (skip);

<bb 77>:
  D.46273_194 = smh_14->media_flags[2];
  if (D.46273_194 != 0)
    goto <bb 78>;
  else
    goto <bb 95>;

<bb 78>:
  D.46263_195 = engine_21->read_frame.datalen;
  D.46285_196 = D.46263_195 % 10;
  if (D.46285_196 == 0)
    goto <bb 79>;
  else
    goto <bb 95>;

<bb 79>:
  D.46289_197 = engine_21->last_ts;
  if (D.46289_197 != 0)
    goto <bb 80>;
  else
    goto <bb 93>;

<bb 80>:
  D.46263_198 = engine_21->read_frame.datalen;
  D.46176_199 = engine_21->read_impl.encoded_bytes_per_packet;
  if (D.46263_198 != D.46176_199)
    goto <bb 81>;
  else
    goto <bb 93>;

<bb 81>:
  D.46235_200 = engine_21->read_frame.timestamp;
  D.46289_201 = engine_21->last_ts;
  D.46292_202 = D.46235_200 - D.46289_201;
  D.46201_203 = engine_21->read_impl.samples_per_second;
  D.46293_204 = D.46201_203 / 1000;
  codec_ms_205 = D.46292_202 / D.46293_204;
  # DEBUG codec_ms => codec_ms_205
  D.46296_206 = codec_ms_205 % 10;
  if (D.46296_206 != 0)
    goto <bb 83>;
  else
    goto <bb 82>;

<bb 82>:
  D.46204_207 = engine_21->read_impl.samples_per_packet;
  D.46298_208 = D.46204_207 * 10;
  if (D.46298_208 < codec_ms_205)
    goto <bb 83>;
  else
    goto <bb 84>;

<bb 83>:
  engine_21->last_ts = 0;
  goto <bb 115> (skip);

<bb 84>:
  D.46299_209 = engine_21->last_codec_ms;
  if (D.46299_209 != 0)
    goto <bb 85>;
  else
    goto <bb 87>;

<bb 85>:
  D.46299_210 = engine_21->last_codec_ms;
  if (D.46299_210 == codec_ms_205)
    goto <bb 86>;
  else
    goto <bb 87>;

<bb 86>:
  D.46304_211 = engine_21->mismatch_count;
  D.46305_212 = D.46304_211 + 1;
  engine_21->mismatch_count = D.46305_212;

<bb 87>:
  engine_21->last_codec_ms = codec_ms_205;
  D.46304_213 = engine_21->mismatch_count;
  if (D.46304_213 > 5)
    goto <bb 88>;
  else
    goto <bb 94>;

<bb 88>:
  D.46308_214 = engine_21->cur_payload_map;
  D.46309_215 = D.46308_214->codec_ms;
  if (D.46309_215 != codec_ms_205)
    goto <bb 89>;
  else
    goto <bb 94>;

<bb 89>:
  if (codec_ms_205 > 120)
    goto <bb 90>;
  else
    goto <bb 91>;

<bb 90>:
  codec_ms.133_216 = (int) codec_ms_205;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1871, session_13(D), 4, "Your phone is trying to send timestamps that suggest an increment of %dms per packet\nThat seems hard to believe so I am going to go on ahead and um ignore that, mmkay?\n", codec_ms.133_216);
  engine_21->check_frames = 50;
  goto <bb 115> (skip);

<bb 91>:
  engine_21->read_frame.datalen = 0;
  D.46308_217 = engine_21->cur_payload_map;
  D.46309_218 = D.46308_217->codec_ms;
  if (D.46309_218 != codec_ms_205)
    goto <bb 92>;
  else
    goto <bb 94>;

<bb 92>:
  D.46308_219 = engine_21->cur_payload_map;
  D.46309_220 = D.46308_219->codec_ms;
  D.46317_221 = (int) D.46309_220;
  codec_ms.133_222 = (int) codec_ms_205;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1882, session_13(D), 4, "Asynchronous PTIME not supported, changing our end from %d to %d\n", D.46317_221, codec_ms.133_222);
  D.46145_223 = session_13(D)->channel;
  D.46308_224 = engine_21->cur_payload_map;
  D.46309_225 = D.46308_224->codec_ms;
  D.46317_226 = (int) D.46309_225;
  codec_ms.133_227 = (int) codec_ms_205;
  switch_channel_set_variable_printf (D.46145_223, "rtp_h_X-Broken-PTIME", "Adv=%d;Sent=%d", D.46317_226, codec_ms.133_227);
  D.46308_228 = engine_21->cur_payload_map;
  D.46308_228->codec_ms = codec_ms_205;
  engine_21->reset_codec = 2;
  goto <bb 94>;

<bb 93>:
  engine_21->mismatch_count = 0;

<bb 94>:
  D.46235_229 = engine_21->read_frame.timestamp;
  engine_21->last_ts = D.46235_229;
  goto <bb 96>;

<bb 95>:
  engine_21->mismatch_count = 0;
  engine_21->last_ts = 0;

<bb 96>:
  D.46179_230 = engine_21->reset_codec;
  if (D.46179_230 == 0)
    goto <bb 97>;
  else
    goto <bb 115> (skip);

<bb 97>:
  D.46324_231 = engine_21->codec_negotiated;
  if (D.46324_231 != 0)
    goto <bb 98>;
  else
    goto <bb 115> (skip);

<bb 98>:
  D.46327_232 = smh_14->mparams;
  D.46328_233 = D.46327_232->cng_pt;
  if (D.46328_233 == 0)
    goto <bb 100>;
  else
    goto <bb 99>;

<bb 99>:
  D.46330_234 = engine_21->read_frame.payload;
  D.46327_235 = smh_14->mparams;
  D.46328_236 = D.46327_235->cng_pt;
  if (D.46330_234 != D.46328_236)
    goto <bb 100>;
  else
    goto <bb 115> (skip);

<bb 100>:
  D.46327_237 = smh_14->mparams;
  D.46331_238 = D.46327_237->recv_te;
  if (D.46331_238 == 0)
    goto <bb 102>;
  else
    goto <bb 101>;

<bb 101>:
  D.46330_239 = engine_21->read_frame.payload;
  D.46327_240 = smh_14->mparams;
  D.46331_241 = D.46327_240->recv_te;
  if (D.46330_239 != D.46331_241)
    goto <bb 102>;
  else
    goto <bb 115> (skip);

<bb 102>:
  D.46327_242 = smh_14->mparams;
  D.46333_243 = D.46327_242->te;
  if (D.46333_243 == 0)
    goto <bb 104>;
  else
    goto <bb 103>;

<bb 103>:
  D.46330_244 = engine_21->read_frame.payload;
  D.46327_245 = smh_14->mparams;
  D.46333_246 = D.46327_245->te;
  if (D.46330_244 != D.46333_246)
    goto <bb 104>;
  else
    goto <bb 115> (skip);

<bb 104>:
  D.46330_247 = engine_21->read_frame.payload;
  D.46308_248 = engine_21->cur_payload_map;
  D.46335_249 = D.46308_248->recv_pt;
  if (D.46330_247 != D.46335_249)
    goto <bb 105>;
  else
    goto <bb 115> (skip);

<bb 105>:
  D.46330_250 = engine_21->read_frame.payload;
  D.46308_251 = engine_21->cur_payload_map;
  D.46338_252 = D.46308_251->agreed_pt;
  if (D.46330_250 != D.46338_252)
    goto <bb 106>;
  else
    goto <bb 115> (skip);

<bb 106>:
  D.46330_253 = engine_21->read_frame.payload;
  D.46308_254 = engine_21->cur_payload_map;
  D.46341_255 = D.46308_254->pt;
  if (D.46330_253 != D.46341_255)
    goto <bb 107>;
  else
    goto <bb 115> (skip);

<bb 107>:
  D.46330_256 = engine_21->read_frame.payload;
  D.46344_257 = (int) D.46330_256;
  D.46308_258 = engine_21->cur_payload_map;
  D.46338_259 = D.46308_258->agreed_pt;
  D.46345_260 = (int) D.46338_259;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1926, session_13(D), 7, "alternate payload received (received %d, expecting %d)\n", D.46344_257, D.46345_260);
  D.46346_261 = smh_14->sdp_mutex;
  switch_mutex_lock (D.46346_261);
  pmap_262 = engine_21->payload_map;
  # DEBUG pmap => pmap_262
  goto <bb 112>;

<bb 108>:
  D.46330_263 = engine_21->read_frame.payload;
  D.46347_264 = pmap_9->recv_pt;
  if (D.46330_263 == D.46347_264)
    goto <bb 109>;
  else
    goto <bb 111>;

<bb 109>:
  D.46350_265 = pmap_9->negotiated;
  if (D.46350_265 != 0)
    goto <bb 110>;
  else
    goto <bb 111>;

<bb 110>:
  engine_21->cur_payload_map = pmap_9;
  D.46308_266 = engine_21->cur_payload_map;
  D.46308_266->current = 1;
  D.46353_267 = pmap_9->iananame;
  D.46354_268 = pmap_9->pt;
  D.46355_269 = (int) D.46354_268;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1937, session_13(D), 4, "Changing current codec to %s (payload type %d).\n", D.46353_267, D.46355_269);
  engine_21->reset_codec = 1;
  goto <bb 113>;

<bb 111>:
  pmap_270 = pmap_9->next;
  # DEBUG pmap => pmap_270

<bb 112>:
  # pmap_9 = PHI <pmap_262(107), pmap_270(111)>
  # DEBUG pmap => pmap_9
  if (pmap_9 != 0B)
    goto <bb 108>;
  else
    goto <bb 113>;

<bb 113>:
  D.46346_271 = smh_14->sdp_mutex;
  switch_mutex_unlock (D.46346_271);
  D.46179_272 = engine_21->reset_codec;
  if (D.46179_272 == 0)
    goto <bb 114>;
  else
    goto <bb 115> (skip);

<bb 114>:
  D.46330_273 = engine_21->read_frame.payload;
  D.46344_274 = (int) D.46330_273;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1949, session_13(D), 4, "Could not change to payload type %d, ignoring...\n", D.46344_274);

skip:
  bytes_275 = engine_21->read_impl.encoded_bytes_per_packet;
  # DEBUG bytes => bytes_275
  if (bytes_275 != 0)
    goto <bb 116>;
  else
    goto <bb 117>;

<bb 116>:
  D.46263_276 = engine_21->read_frame.datalen;
  D.46360_277 = D.46263_276 / bytes_275;
  frames_278 = (int) D.46360_277;
  # DEBUG frames => frames_278

<bb 117>:
  # frames_8 = PHI <1(115), frames_278(116)>
  # DEBUG frames => frames_8
  D.46204_279 = engine_21->read_impl.samples_per_packet;
  frames.134_280 = (uint32_t) frames_8;
  D.46362_281 = D.46204_279 * frames.134_280;
  engine_21->read_frame.samples = D.46362_281;
  D.46263_282 = engine_21->read_frame.datalen;
  if (D.46263_282 == 0)
    goto <bb 118>;
  else
    goto <bb 121>;

<bb 118>:
  # do_cng_286 = PHI <do_cng_2(117), do_cng_2(62)>

<bb 119>:
  # do_cng_3 = PHI <0(20), do_cng_286(118)>
  # DEBUG do_cng => do_cng_3
  D.46129_40 = smh_14->media_flags[0];
  if (D.46129_40 != 0)
    goto <bb 120>;
  else
    goto <bb 121>;

<bb 120>:
  D.46263_41 = engine_21->read_frame.datalen;
  if (D.46263_41 == 0)
    goto <bb 25>;
  else
    goto <bb 121>;

<bb 121>:
  D.46263_284 = engine_21->read_frame.datalen;
  if (D.46263_284 == 0)
    goto <bb 122>;
  else
    goto <bb 123>;

<bb 122>:
  *frame_52(D) = 0B;

<bb 123>:
  D.46162_285 = &engine_21->read_frame;
  *frame_52(D) = D.46162_285;
  # DEBUG status => 0

  # status_1 = PHI <0(28), status_45(29), 9(35), 0(49), 0(59), 9(72), 0(123), status_45(26)>
end:
  # DEBUG status => status_1
  D.46151_287 = engine_21->read_mutex[type_19(D)];
  if (D.46151_287 != 0B)
    goto <bb 125>;
  else
    goto <bb 126>;

<bb 125>:
  D.46151_288 = engine_21->read_mutex[type_19(D)];
  switch_mutex_unlock (D.46151_288);

<bb 126>:
  # status_10 = PHI <1(4), 1(5), 1(13), 1(17), 10(24), status_1(125), 1(6), 1(16), 1(18), status_1(124)>
  return status_10;

}



;; Function switch_core_media_add_ice_acl (switch_core_media_add_ice_acl)

switch_core_media_add_ice_acl (struct switch_core_session_t * session, switch_media_type_t type, const char * acl_name)
{
  static const char __func__[30] = "switch_core_media_add_ice_acl";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_add_ice_acl";
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  char * D.45900;
  int D.45899;
  int D.45896;
  switch_status_t D.45893;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2379, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  engine_8 = &smh_3->engines[type_6(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_8
  D.45896_9 = engine_8->cand_acl_count;
  if (D.45896_9 <= 24)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.45896_10 = engine_8->cand_acl_count;
  D.45900_12 = switch_core_perform_session_strdup (session_2(D), acl_name_11(D), "src/switch_core_media.c", &__func__, 2388);
  engine_8->cand_acl[D.45896_10] = D.45900_12;
  D.45899_13 = D.45896_10 + 1;
  engine_8->cand_acl_count = D.45899_13;

<bb 7>:
  # D.45893_1 = PHI <1(4), 0(6), 1(5)>
  return D.45893_1;

}



;; Function switch_core_media_check_video_codecs (switch_core_media_check_video_codecs)

switch_core_media_check_video_codecs (struct switch_core_session_t * session)
{
  int i;
  static const char __PRETTY_FUNCTION__[37] = "switch_core_media_check_video_codecs";
  struct switch_media_handle_t * smh;
  int D.45885;
  int D.45884;
  uint32_t D.45881;
  switch_call_direction_t D.45878;
  const switch_codec_type_t D.45875;
  const struct switch_codec_implementation_t * D.45874;
  uint32_t D.45871;
  struct switch_channel_t * D.45870;
  int D.45867;
  struct switch_core_media_params_t * D.45866;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2400, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 17>;
  else
    goto <bb 5>;

<bb 5>:
  D.45866_4 = smh_3->mparams;
  D.45867_5 = D.45866_4->num_codecs;
  if (D.45867_5 != 0)
    goto <bb 6>;
  else
    goto <bb 17>;

<bb 6>:
  D.45870_6 = session_2(D)->channel;
  D.45871_7 = switch_channel_test_flag (D.45870_6, 98);
  if (D.45871_7 == 0)
    goto <bb 7>;
  else
    goto <bb 17>;

<bb 7>:
  smh_3->video_count = 0;
  # DEBUG i => 0
  goto <bb 14>;

<bb 8>:
  D.45874_11 = smh_3->codecs[i_1];
  D.45875_12 = D.45874_11->codec_type;
  if (D.45875_12 == 1)
    goto <bb 9>;
  else
    goto <bb 13>;

<bb 9>:
  D.45870_13 = session_2(D)->channel;
  D.45878_14 = switch_channel_direction (D.45870_13);
  if (D.45878_14 == 0)
    goto <bb 10>;
  else
    goto <bb 12>;

<bb 10>:
  D.45870_15 = session_2(D)->channel;
  D.45881_16 = switch_channel_test_flag (D.45870_15, 114);
  if (D.45881_16 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  goto <bb 13>;

<bb 12>:
  D.45884_17 = smh_3->video_count;
  D.45885_18 = D.45884_17 + 1;
  smh_3->video_count = D.45885_18;

<bb 13>:
  i_19 = i_1 + 1;
  # DEBUG i => i_19

<bb 14>:
  # i_1 = PHI <0(7), i_19(13)>
  # DEBUG i => i_1
  D.45866_9 = smh_3->mparams;
  D.45867_10 = D.45866_9->num_codecs;
  if (D.45867_10 > i_1)
    goto <bb 8>;
  else
    goto <bb 15>;

<bb 15>:
  D.45884_20 = smh_3->video_count;
  if (D.45884_20 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.45870_21 = session_2(D)->channel;
  switch_channel_set_flag_value (D.45870_21, 98, 1);

<bb 17>:
  return;

}



;; Function switch_ice_direction (switch_ice_direction)

switch_ice_direction (struct switch_core_session_t * session)
{
  switch_call_direction_t r;
  uint32_t D.45857;
  uint32_t D.45856;
  uint32_t D.45854;
  uint32_t D.45849;
  struct switch_channel_t * D.45848;

<bb 2>:
  D.45848_4 = session_3(D)->channel;
  r_5 = switch_channel_direction (D.45848_4);
  # DEBUG r => r_5
  D.45848_6 = session_3(D)->channel;
  D.45849_7 = switch_channel_test_flag (D.45848_6, 112);
  if (D.45849_7 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  r_8 = r_5 == 0;
  # DEBUG r => r_8

<bb 4>:
  # r_1 = PHI <r_5(2), r_8(3)>
  # DEBUG r => r_1
  D.45848_9 = session_3(D)->channel;
  D.45854_10 = switch_channel_test_flag (D.45848_9, 103);
  if (D.45854_10 != 0)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  D.45848_11 = session_3(D)->channel;
  D.45856_12 = switch_channel_test_flag (D.45848_11, 84);
  if (D.45856_12 != 0)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  D.45848_13 = session_3(D)->channel;
  D.45857_14 = switch_channel_test_flag (D.45848_13, 106);
  if (D.45857_14 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  # DEBUG r => 1

<bb 8>:
  # r_2 = PHI <r_1(5), r_1(6), 1(7)>
  # DEBUG r => r_2
  return r_2;

}



;; Function check_dtls_reinvite (check_dtls_reinvite)

check_dtls_reinvite (struct switch_core_session_t * session, struct switch_rtp_engine_t * engine)
{
  dtls_type_t dtype;
  dtls_type_t xtype;
  unsigned int D.49441;
  struct dtls_fingerprint_t * D.49440;
  struct dtls_fingerprint_t * D.49439;
  struct switch_rtp_t * D.49438;
  int8_t D.49437;
  switch_media_type_t D.49436;
  char * iftmp.75;
  switch_call_direction_t D.49434;
  const char D.47801;
  int D.47800;
  int D.43916;
  int D.43913;
  char[192] * D.43909;
  uint32_t D.43906;
  struct switch_channel_t * D.43905;

<bb 2>:
  D.43905_5 = session_4(D)->channel;
  D.43906_6 = switch_channel_test_flag (D.43905_5, 103);
  if (D.43906_6 != 0)
    goto <bb 3>;
  else
    goto <bb 17>;

<bb 3>:
  D.43909_8 = &engine_7(D)->local_dtls_fingerprint.str;
  # DEBUG s => D.43909_8
  if (D.43909_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 4>;

<bb 4>:
  D.47801_40 = MEM[(const char *)engine_7(D) + 10904B];
  if (D.47801_40 == 0)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:

<bb 6>:
  # D.47800_41 = PHI <1(3), 1(4), 0(5)>
  if (D.47800_41 == 0)
    goto <bb 7>;
  else
    goto <bb 17>;

<bb 7>:
  D.43913_10 = switch_rtp_has_dtls ();
  if (D.43913_10 != 0)
    goto <bb 8>;
  else
    goto <bb 17>;

<bb 8>:
  D.43916_11 = dtls_ok (session_4(D));
  if (D.43916_11 != 0)
    goto <bb 9>;
  else
    goto <bb 17>;

<bb 9>:
  # DEBUG session => session_4(D)
  # DEBUG engine => engine_7(D)
  D.49434_43 = switch_ice_direction (session_4(D));
  if (D.49434_43 == 0)
    goto <bb 11>;
  else
    goto <bb 10>;

<bb 10>:

<bb 11>:
  # dtype_51 = PHI <1(9), 2(10)>
  # DEBUG dtype => dtype_51
  D.49436_44 = engine_7(D)->type;
  if (D.49436_44 == 1)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:

<bb 13>:
  # iftmp.75_45 = PHI <"video"(11), "audio"(12)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4701, session_4(D), 6, "RE-SETTING %s DTLS\n", iftmp.75_45);
  # DEBUG xtype => 4
  D.49437_46 = engine_7(D)->rtcp_mux;
  if (D.49437_46 > 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  # DEBUG xtype => 12

<bb 15>:
  # xtype_50 = PHI <4(13), 12(14)>
  # DEBUG xtype => xtype_50
  D.49438_47 = engine_7(D)->rtp_session;
  D.49439_48 = &engine_7(D)->local_dtls_fingerprint;
  D.49440_49 = &engine_7(D)->remote_dtls_fingerprint;
  D.49441_52 = xtype_50 | dtype_51;
  switch_rtp_add_dtls (D.49438_47, D.49439_48, D.49440_49, D.49441_52);
  D.49437_53 = engine_7(D)->rtcp_mux;
  if (D.49437_53 <= 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  # DEBUG xtype => 8
  D.49438_54 = engine_7(D)->rtp_session;
  D.49439_55 = &engine_7(D)->local_dtls_fingerprint;
  D.49440_56 = &engine_7(D)->remote_dtls_fingerprint;
  D.49441_57 = dtype_51 | 8;
  switch_rtp_add_dtls (D.49438_54, D.49439_55, D.49440_56, D.49441_57);

<bb 17>:
  return;

}



;; Function check_ice (check_ice)

check_ice (struct switch_media_handle_t * smh, switch_media_type_t type, struct sdp_session_t * sdp, struct sdp_media_t * m)
{
  int D.47862;
  const char D.47859;
  int D.47858;
  const char D.47855;
  int D.47854;
  int D.47851;
  int D.47848;
  long int D.47845;
  int D.47842;
  int D.47839;
  long int D.47836;
  const char D.47833;
  int D.47832;
  const char D.47829;
  int D.47828;
  int interval;
  switch_port_t remote_rtcp_port;
  const char * rport;
  char tmp[80];
  char * p;
  int cid;
  int j;
  int argc;
  char * fields[15];
  char * data;
  static const char __func__[10] = "check_ice";
  const char * val;
  int got_rtcp_mux;
  int i;
  struct sdp_attribute_t * attr;
  struct switch_rtp_engine_t * engine;
  switch_call_direction_t D.45836;
  switch_core_media_ice_type_t iftmp.126;
  char * iftmp.125;
  char * iftmp.124;
  int D.38904;
  char * iftmp.123;
  unsigned int D.45813;
  unsigned int interval.122;
  switch_bool_t D.45810;
  int8_t D.45809;
  int D.45808;
  char * iftmp.121;
  int D.45801;
  _Bool D.45797;
  _Bool D.45796;
  _Bool D.45795;
  char[27] * iftmp.120;
  struct switch_core_media_params_t * D.45789;
  char[25] * iftmp.118;
  struct ice_t * D.45776;
  switch_call_direction_t D.45772;
  switch_core_media_ice_type_t iftmp.117;
  char * D.45770;
  char * D.45769;
  char * iftmp.116;
  uint8_t D.45760;
  uint32_t D.45757;
  _Bool D.45754;
  _Bool D.45753;
  _Bool D.45752;
  char * D.45751;
  char * iftmp.115;
  char * D.45744;
  int D.45743;
  switch_port_t D.45740;
  char * D.45739;
  char * D.45738;
  int D.45737;
  char * iftmp.114;
  char * D.45732;
  switch_port_t D.45729;
  char * D.45726;
  char * D.45724;
  char * D.45721;
  uint8_t D.45716;
  int D.45715;
  char * iftmp.113;
  char * iftmp.112;
  int D.45694;
  switch_port_t D.45693;
  char * D.45692;
  char * iftmp.111;
  const void * restrict D.45687;
  unsigned int D.45686;
  unsigned int D.45685;
  const void * restrict D.45684;
  void * restrict D.45683;
  unsigned int D.45682;
  unsigned int D.45681;
  unsigned int D.45680;
  void * restrict D.45679;
  struct icand_t * D.45678;
  _Bool D.45675;
  _Bool D.45674;
  _Bool D.45673;
  char * iftmp.110;
  char * iftmp.109;
  char * iftmp.108;
  uint8_t D.45640;
  uint8_t D.45639;
  switch_bool_t D.45636;
  char * D.45635;
  switch_port_t D.45632;
  int D.45629;
  char * iftmp.107;
  uint8_t D.45622;
  uint8_t D.45621;
  switch_bool_t D.45618;
  char * D.45617;
  switch_port_t D.45614;
  int D.45611;
  uint8_t D.45606;
  uint8_t D.45605;
  char * D.45601;
  int D.45598;
  short unsigned int D.45596;
  int D.45592;
  char * D.45590;
  int D.45587;
  char * D.45585;
  char * D.45584;
  int D.45583;
  int D.45580;
  char * D.45579;
  short unsigned int D.45578;
  char * D.45576;
  uint32_t D.45575;
  char * D.45573;
  char * D.45572;
  char * D.45570;
  char * D.45569;
  char * iftmp.106;
  char * iftmp.105;
  switch_bool_t D.45559;
  char * D.45558;
  int D.45556;
  int D.45553;
  char * D.45552;
  char * D.45551;
  char * D.45550;
  char * D.45549;
  char * D.45547;
  char * D.45545;
  int D.45544;
  unsigned int D.45540;
  const char * D.45537;
  int D.45536;
  int D.45533;
  int D.45530;
  switch_port_t D.45528;
  struct payload_map_t * D.45527;
  int D.45524;
  struct switch_rtp_t * D.45519;
  unsigned int D.45518;
  int D.45514;
  uint32_t D.45512;
  char[192] * D.45509;
  char * D.45506;
  char * D.45505;
  int D.45501;
  int D.45499;
  int D.45497;
  char * D.45493;
  int D.45490;
  char * D.45488;
  int D.45485;
  char * D.45483;
  const char * D.45482;
  int D.45479;
  const char * D.45475;
  uint32_t D.45469;
  struct switch_channel_t * D.45468;
  struct switch_core_session_t * D.45467;
  int D.45464;
  int D.45461;

<bb 2>:
  engine_38 = &smh_34(D)->engines[type_36(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_38
  # DEBUG i => 0
  # DEBUG got_rtcp_mux => 0
  D.45461_41 = engine_38->ice_in.chosen[0];
  if (D.45461_41 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 3>:
  D.45464_42 = engine_38->ice_in.chosen[1];
  if (D.45464_42 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.45467_43 = smh_34(D)->session;
  D.45468_44 = D.45467_43->channel;
  D.45469_45 = switch_channel_test_flag (D.45468_44, 103);
  if (D.45469_45 == 0)
    goto <bb 201>;
  else
    goto <bb 5>;

<bb 5>:
  engine_38->ice_in.chosen[0] = 0;
  engine_38->ice_in.chosen[1] = 0;
  engine_38->ice_in.cand_idx = 0;
  if (m_46(D) != 0B)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  attr_47 = m_46(D)->m_attributes;
  # DEBUG attr => attr_47

<bb 7>:
  # attr_417 = PHI <attr_49(8), attr_47(6)>
  got_rtcp_mux_672 = 0;
  goto <bb 71>;

<bb 8>:
  attr_49 = sdp_48(D)->sdp_attributes;
  # DEBUG attr => attr_49
  goto <bb 7>;

<bb 9>:
  # DEBUG argc => 0
  # DEBUG j => 0
  # DEBUG cid => 0
  D.45475_53 = attr_1->a_name;
  # DEBUG s => D.45475_53
  if (D.45475_53 == 0B)
    goto <bb 12>;
  else
    goto <bb 10>;

<bb 10>:
  D.47829_640 = *D.45475_53;
  if (D.47829_640 == 0)
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:

<bb 12>:
  # D.47828_641 = PHI <1(9), 1(10), 0(11)>
  if (D.47828_641 != 0)
    goto <bb 70>;
  else
    goto <bb 13>;

<bb 13>:
  D.45475_55 = attr_1->a_name;
  D.45479_56 = strcasecmp (D.45475_55, "ice-ufrag");
  if (D.45479_56 == 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.45467_57 = smh_34(D)->session;
  D.45482_58 = attr_1->a_value;
  D.45483_59 = switch_core_perform_session_strdup (D.45467_57, D.45482_58, "src/switch_core_media.c", &__func__, 2503);
  engine_38->ice_in.ufrag = D.45483_59;
  goto <bb 70>;

<bb 15>:
  D.45475_60 = attr_1->a_name;
  D.45485_61 = strcasecmp (D.45475_60, "ice-pwd");
  if (D.45485_61 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.45467_62 = smh_34(D)->session;
  D.45482_63 = attr_1->a_value;
  D.45488_64 = switch_core_perform_session_strdup (D.45467_62, D.45482_63, "src/switch_core_media.c", &__func__, 2505);
  engine_38->ice_in.pwd = D.45488_64;
  goto <bb 70>;

<bb 17>:
  D.45475_65 = attr_1->a_name;
  D.45490_66 = strcasecmp (D.45475_65, "ice-options");
  if (D.45490_66 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.45467_67 = smh_34(D)->session;
  D.45482_68 = attr_1->a_value;
  D.45493_69 = switch_core_perform_session_strdup (D.45467_67, D.45482_68, "src/switch_core_media.c", &__func__, 2507);
  engine_38->ice_in.options = D.45493_69;
  goto <bb 70>;

<bb 19>:
  D.45497_70 = switch_rtp_has_dtls ();
  if (D.45497_70 != 0)
    goto <bb 20>;
  else
    goto <bb 29>;

<bb 20>:
  D.45467_71 = smh_34(D)->session;
  D.45499_72 = dtls_ok (D.45467_71);
  if (D.45499_72 != 0)
    goto <bb 21>;
  else
    goto <bb 29>;

<bb 21>:
  D.45475_73 = attr_1->a_name;
  D.45501_74 = strcasecmp (D.45475_73, "fingerprint");
  if (D.45501_74 == 0)
    goto <bb 22>;
  else
    goto <bb 29>;

<bb 22>:
  D.45482_75 = attr_1->a_value;
  # DEBUG s => D.45482_75
  if (D.45482_75 == 0B)
    goto <bb 25>;
  else
    goto <bb 23>;

<bb 23>:
  D.47833_642 = *D.45482_75;
  if (D.47833_642 == 0)
    goto <bb 25>;
  else
    goto <bb 24>;

<bb 24>:

<bb 25>:
  # D.47832_643 = PHI <1(22), 1(23), 0(24)>
  if (D.47832_643 == 0)
    goto <bb 26>;
  else
    goto <bb 29>;

<bb 26>:
  D.45467_77 = smh_34(D)->session;
  D.45482_78 = attr_1->a_value;
  D.45505_79 = switch_core_perform_session_strdup (D.45467_77, D.45482_78, "src/switch_core_media.c", &__func__, 2512);
  engine_38->remote_dtls_fingerprint.type = D.45505_79;
  D.45506_80 = engine_38->remote_dtls_fingerprint.type;
  p_81 = __builtin_strchr (D.45506_80, 32);
  # DEBUG p => p_81
  if (p_81 != 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  *p_81 = 0;
  p_82 = p_81 + 1;
  # DEBUG p => p_82
  D.45509_83 = &engine_38->local_dtls_fingerprint.str;
  switch_copy_string (D.45509_83, p_82, 192);

<bb 28>:
  generate_local_fingerprint (smh_34(D), type_36(D));
  D.45467_84 = smh_34(D)->session;
  D.45468_85 = D.45467_84->channel;
  switch_channel_set_flag_value (D.45468_85, 109, 1);
  goto <bb 70>;

<bb 29>:
  D.45512_86 = engine_38->remote_ssrc;
  if (D.45512_86 == 0)
    goto <bb 30>;
  else
    goto <bb 35>;

<bb 30>:
  D.45475_87 = attr_1->a_name;
  D.45514_88 = strcasecmp (D.45475_87, "ssrc");
  if (D.45514_88 == 0)
    goto <bb 31>;
  else
    goto <bb 35>;

<bb 31>:
  D.45482_89 = attr_1->a_value;
  if (D.45482_89 != 0B)
    goto <bb 32>;
  else
    goto <bb 35>;

<bb 32>:
  D.45482_90 = attr_1->a_value;
  # DEBUG __nptr => D.45482_90
  D.47836_644 = strtol (D.45482_90, 0B, 10);
  D.45518_92 = (unsigned int) D.47836_644;
  engine_38->remote_ssrc = D.45518_92;
  D.45519_93 = engine_38->rtp_session;
  if (D.45519_93 != 0B)
    goto <bb 33>;
  else
    goto <bb 70>;

<bb 33>:
  D.45512_94 = engine_38->remote_ssrc;
  if (D.45512_94 != 0)
    goto <bb 34>;
  else
    goto <bb 70>;

<bb 34>:
  D.45519_95 = engine_38->rtp_session;
  D.45512_96 = engine_38->remote_ssrc;
  switch_rtp_set_remote_ssrc (D.45519_95, D.45512_96);
  goto <bb 70>;

<bb 35>:
  D.45475_97 = attr_1->a_name;
  D.45524_98 = strcasecmp (D.45475_97, "rtcp-mux");
  if (D.45524_98 == 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  engine_38->rtcp_mux = 1;
  D.45527_99 = engine_38->cur_payload_map;
  D.45528_100 = D.45527_99->remote_sdp_port;
  engine_38->remote_rtcp_port = D.45528_100;
  got_rtcp_mux_101 = got_rtcp_mux_8 + 1;
  # DEBUG got_rtcp_mux => got_rtcp_mux_101
  goto <bb 70>;

<bb 37>:
  D.45475_102 = attr_1->a_name;
  D.45530_103 = strcasecmp (D.45475_102, "candidate");
  if (D.45530_103 == 0)
    goto <bb 38>;
  else
    goto <bb 70>;

<bb 38>:
  D.45467_104 = smh_34(D)->session;
  D.45468_105 = D.45467_104->channel;
  switch_channel_set_flag_value (D.45468_105, 108, 1);
  D.45533_106 = engine_38->cand_acl_count;
  if (D.45533_106 == 0)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.45533_107 = engine_38->cand_acl_count;
  engine_38->cand_acl[D.45533_107] = "wan.auto";
  D.45536_108 = D.45533_107 + 1;
  engine_38->cand_acl_count = D.45536_108;
  D.45467_109 = smh_34(D)->session;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2548, D.45467_109, 4, "NO candidate ACL defined, Defaulting to wan.auto\n");

<bb 40>:
  D.45482_110 = attr_1->a_value;
  D.45537_111 = switch_stristr (" udp ", D.45482_110);
  if (D.45537_111 == 0B)
    goto <bb 70>;
  else
    goto <bb 41>;

<bb 41>:
  D.45467_112 = smh_34(D)->session;
  D.45482_113 = attr_1->a_value;
  data_114 = switch_core_perform_session_strdup (D.45467_112, D.45482_113, "src/switch_core_media.c", &__func__, 2556);
  # DEBUG data => data_114
  D.45540_115 = switch_separate_string (data_114, 32, &fields, 15);
  argc_116 = (int) D.45540_115;
  # DEBUG argc => argc_116
  if (argc_116 <= 4)
    goto <bb 43>;
  else
    goto <bb 42>;

<bb 42>:
  D.45544_117 = engine_38->ice_in.cand_idx;
  if (D.45544_117 > 48)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  D.45467_215 = smh_34(D)->session;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2561, D.45467_215, 4, "Invalid data\n");
  goto <bb 70>;

<bb 44>:
  D.45545_118 = fields[1];
  # DEBUG __nptr => D.45545_118
  D.47839_645 = strtol (D.45545_118, 0B, 10);
  cid_120 = D.47839_645 + -1;
  # DEBUG cid => cid_120
  # DEBUG i => 0
  goto <bb 46>;

<bb 45>:
  D.45467_122 = smh_34(D)->session;
  D.45547_123 = fields[i_2];
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2569, D.45467_122, 101, "CAND %d [%s]\n", i_2, D.45547_123);
  i_124 = i_2 + 1;
  # DEBUG i => i_124

<bb 46>:
  # i_2 = PHI <0(44), i_124(45)>
  # DEBUG i => i_2
  if (i_2 < argc_116)
    goto <bb 45>;
  else
    goto <bb 47>;

<bb 47>:
  D.45467_125 = smh_34(D)->session;
  D.45549_127 = fields[2];
  D.45550_128 = fields[7];
  D.45551_129 = fields[4];
  D.45552_130 = fields[5];
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2572, D.45467_125, 7, "Checking Candidate cid: %d proto: %s type: %s addr: %s:%s\n", D.47839_645, D.45549_127, D.45550_128, D.45551_129, D.45552_130);
  D.45544_131 = engine_38->ice_in.cand_idx;
  D.45553_132 = D.45544_131 + 1;
  engine_38->ice_in.cand_idx = D.45553_132;
  # DEBUG i => 0
  D.45533_134 = engine_38->cand_acl_count;
  if (D.45533_134 > 0)
    goto <bb 48>;
  else
    goto <bb 70>;

<bb 48>:
  D.45556_135 = engine_38->ice_in.chosen[cid_120];
  if (D.45556_135 == 0)
    goto <bb 49>;
  else
    goto <bb 53>;

<bb 49>:
  D.45551_136 = fields[4];
  D.45558_137 = engine_38->cand_acl[0];
  D.45559_138 = switch_check_network_list_ip_token (D.45551_136, D.45558_137, 0B);
  if (D.45559_138 != 0)
    goto <bb 50>;
  else
    goto <bb 53>;

<bb 50>:
  D.45544_139 = engine_38->ice_in.cand_idx;
  engine_38->ice_in.chosen[cid_120] = D.45544_139;
  D.45467_140 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 52>;
  else
    goto <bb 51>;

<bb 51>:

<bb 52>:
  # iftmp.105_13 = PHI <"video"(50), "audio"(51)>
  D.45549_144 = fields[2];
  D.45550_145 = fields[7];
  D.45551_146 = fields[4];
  D.45552_147 = fields[5];
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2581, D.45467_140, 5, "Choose %s Candidate cid: %d proto: %s type: %s addr: %s:%s\n", iftmp.105_13, D.47839_645, D.45549_144, D.45550_145, D.45551_146, D.45552_147);
  goto <bb 56>;

<bb 53>:
  D.45467_148 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 55>;
  else
    goto <bb 54>;

<bb 54>:

<bb 55>:
  # iftmp.106_14 = PHI <"video"(53), "audio"(54)>
  D.45549_152 = fields[2];
  D.45550_153 = fields[7];
  D.45551_154 = fields[4];
  D.45552_155 = fields[5];
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2586, D.45467_148, 5, "Save %s Candidate cid: %d proto: %s type: %s addr: %s:%s\n", iftmp.106_14, D.47839_645, D.45549_152, D.45550_153, D.45551_154, D.45552_155);

<bb 56>:
  D.45544_156 = engine_38->ice_in.cand_idx;
  D.45467_157 = smh_34(D)->session;
  D.45569_158 = fields[0];
  D.45570_159 = switch_core_perform_session_strdup (D.45467_157, D.45569_158, "src/switch_core_media.c", &__func__, 2592);
  engine_38->ice_in.cands[D.45544_156][cid_120].foundation = D.45570_159;
  D.45544_160 = engine_38->ice_in.cand_idx;
  D.45545_161 = fields[1];
  # DEBUG __nptr => D.45545_161
  D.47842_646 = strtol (D.45545_161, 0B, 10);
  engine_38->ice_in.cands[D.45544_160][cid_120].component_id = D.47842_646;
  D.45544_163 = engine_38->ice_in.cand_idx;
  D.45467_164 = smh_34(D)->session;
  D.45549_165 = fields[2];
  D.45572_166 = switch_core_perform_session_strdup (D.45467_164, D.45549_165, "src/switch_core_media.c", &__func__, 2594);
  engine_38->ice_in.cands[D.45544_163][cid_120].transport = D.45572_166;
  D.45544_167 = engine_38->ice_in.cand_idx;
  D.45573_168 = fields[3];
  # DEBUG __nptr => D.45573_168
  D.47845_647 = strtol (D.45573_168, 0B, 10);
  D.45575_170 = (uint32_t) D.47845_647;
  engine_38->ice_in.cands[D.45544_167][cid_120].priority = D.45575_170;
  D.45544_171 = engine_38->ice_in.cand_idx;
  D.45467_172 = smh_34(D)->session;
  D.45551_173 = fields[4];
  D.45576_174 = switch_core_perform_session_strdup (D.45467_172, D.45551_173, "src/switch_core_media.c", &__func__, 2596);
  engine_38->ice_in.cands[D.45544_171][cid_120].con_addr = D.45576_174;
  D.45544_175 = engine_38->ice_in.cand_idx;
  D.45552_176 = fields[5];
  # DEBUG __nptr => D.45552_176
  D.47848_648 = strtol (D.45552_176, 0B, 10);
  D.45578_178 = (short unsigned int) D.47848_648;
  engine_38->ice_in.cands[D.45544_175][cid_120].con_port = D.45578_178;
  # DEBUG j => 6
  goto <bb 66>;

<bb 57>:
  D.45579_182 = fields[j_10];
  D.45580_183 = strcasecmp (D.45579_182, "typ");
  if (D.45580_183 == 0)
    goto <bb 58>;
  else
    goto <bb 59>;

<bb 58>:
  D.45544_184 = engine_38->ice_in.cand_idx;
  D.45467_185 = smh_34(D)->session;
  D.45583_186 = j_10 + 1;
  D.45584_187 = fields[D.45583_186];
  D.45585_188 = switch_core_perform_session_strdup (D.45467_185, D.45584_187, "src/switch_core_media.c", &__func__, 2604);
  engine_38->ice_in.cands[D.45544_184][cid_120].cand_type = D.45585_188;
  goto <bb 65>;

<bb 59>:
  D.45579_189 = fields[j_10];
  D.45587_190 = strcasecmp (D.45579_189, "raddr");
  if (D.45587_190 == 0)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  D.45544_191 = engine_38->ice_in.cand_idx;
  D.45467_192 = smh_34(D)->session;
  D.45583_193 = j_10 + 1;
  D.45584_194 = fields[D.45583_193];
  D.45590_195 = switch_core_perform_session_strdup (D.45467_192, D.45584_194, "src/switch_core_media.c", &__func__, 2606);
  engine_38->ice_in.cands[D.45544_191][cid_120].raddr = D.45590_195;
  goto <bb 65>;

<bb 61>:
  D.45579_196 = fields[j_10];
  D.45592_197 = strcasecmp (D.45579_196, "rport");
  if (D.45592_197 == 0)
    goto <bb 62>;
  else
    goto <bb 63>;

<bb 62>:
  D.45544_198 = engine_38->ice_in.cand_idx;
  D.45583_199 = j_10 + 1;
  D.45584_200 = fields[D.45583_199];
  # DEBUG __nptr => D.45584_200
  D.47851_649 = strtol (D.45584_200, 0B, 10);
  D.45596_202 = (short unsigned int) D.47851_649;
  engine_38->ice_in.cands[D.45544_198][cid_120].rport = D.45596_202;
  goto <bb 65>;

<bb 63>:
  D.45579_203 = fields[j_10];
  D.45598_204 = strcasecmp (D.45579_203, "generation");
  if (D.45598_204 == 0)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  D.45544_205 = engine_38->ice_in.cand_idx;
  D.45467_206 = smh_34(D)->session;
  D.45583_207 = j_10 + 1;
  D.45584_208 = fields[D.45583_207];
  D.45601_209 = switch_core_perform_session_strdup (D.45467_206, D.45584_208, "src/switch_core_media.c", &__func__, 2610);
  engine_38->ice_in.cands[D.45544_205][cid_120].generation = D.45601_209;

<bb 65>:
  j_210 = j_10 + 2;
  # DEBUG j => j_210

<bb 66>:
  # j_10 = PHI <6(56), j_210(65)>
  # DEBUG j => j_10
  if (j_10 < argc_116)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  D.45583_180 = j_10 + 1;
  D.45584_181 = fields[D.45583_180];
  if (D.45584_181 != 0B)
    goto <bb 57>;
  else
    goto <bb 68>;

<bb 68>:
  D.45556_211 = engine_38->ice_in.chosen[cid_120];
  if (D.45556_211 != 0)
    goto <bb 69>;
  else
    goto <bb 70>;

<bb 69>:
  D.45556_212 = engine_38->ice_in.chosen[cid_120];
  D.45605_213 = engine_38->ice_in.cands[D.45556_212][cid_120].ready;
  D.45606_214 = D.45605_213 + 1;
  engine_38->ice_in.cands[D.45556_212][cid_120].ready = D.45606_214;

<bb 70>:
  # got_rtcp_mux_7 = PHI <got_rtcp_mux_8(12), got_rtcp_mux_8(14), got_rtcp_mux_8(16), got_rtcp_mux_8(18), got_rtcp_mux_8(28), got_rtcp_mux_8(33), got_rtcp_mux_101(36), got_rtcp_mux_8(37), got_rtcp_mux_8(40), got_rtcp_mux_8(43), got_rtcp_mux_8(69), got_rtcp_mux_8(47), got_rtcp_mux_8(32), got_rtcp_mux_8(34), got_rtcp_mux_8(68)>
  # DEBUG got_rtcp_mux => got_rtcp_mux_7
  attr_216 = attr_1->a_next;
  # DEBUG attr => attr_216

<bb 71>:
  # attr_1 = PHI <attr_417(7), attr_216(70)>
  # got_rtcp_mux_8 = PHI <0(7), got_rtcp_mux_7(70)>
  # DEBUG got_rtcp_mux => got_rtcp_mux_8
  # DEBUG attr => attr_1
  if (attr_1 != 0B)
    goto <bb 9>;
  else
    goto <bb 72>;

<bb 72>:
  D.45461_217 = engine_38->ice_in.chosen[0];
  if (D.45461_217 == 0)
    goto <bb 74>;
  else
    goto <bb 73>;

<bb 73>:
  D.45464_218 = engine_38->ice_in.chosen[1];
  if (D.45464_218 == 0)
    goto <bb 74>;
  else
    goto <bb 93>;

<bb 74>:
  i_440 = 0;
  goto <bb 90>;

<bb 75>:
  D.45461_223 = engine_38->ice_in.chosen[0];
  if (D.45461_223 == 0)
    goto <bb 76>;
  else
    goto <bb 82>;

<bb 76>:
  D.45611_224 = engine_38->ice_in.cands[i_3][0].component_id;
  if (D.45611_224 == 1)
    goto <bb 77>;
  else
    goto <bb 82>;

<bb 77>:
  D.45614_225 = engine_38->ice_in.cands[i_3][0].rport;
  if (D.45614_225 == 0)
    goto <bb 78>;
  else
    goto <bb 82>;

<bb 78>:
  D.45617_226 = engine_38->ice_in.cands[i_3][0].con_addr;
  D.45618_227 = switch_check_network_list_ip_token (D.45617_226, "localnet.auto", 0B);
  if (D.45618_227 != 0)
    goto <bb 79>;
  else
    goto <bb 82>;

<bb 79>:
  engine_38->ice_in.chosen[0] = i_3;
  D.45461_228 = engine_38->ice_in.chosen[0];
  D.45621_229 = engine_38->ice_in.cands[D.45461_228][0].ready;
  D.45622_230 = D.45621_229 + 1;
  engine_38->ice_in.cands[D.45461_228][0].ready = D.45622_230;
  D.45467_231 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 81>;
  else
    goto <bb 80>;

<bb 80>:

<bb 81>:
  # iftmp.107_15 = PHI <"video"(79), "audio"(80)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2636, D.45467_231, 5, "No %s RTP candidate found; defaulting to the first local one.\n", iftmp.107_15);

<bb 82>:
  D.45464_234 = engine_38->ice_in.chosen[1];
  if (D.45464_234 == 0)
    goto <bb 83>;
  else
    goto <bb 89>;

<bb 83>:
  D.45629_235 = engine_38->ice_in.cands[i_3][1].component_id;
  if (D.45629_235 == 2)
    goto <bb 84>;
  else
    goto <bb 89>;

<bb 84>:
  D.45632_236 = engine_38->ice_in.cands[i_3][1].rport;
  if (D.45632_236 == 0)
    goto <bb 85>;
  else
    goto <bb 89>;

<bb 85>:
  D.45635_237 = engine_38->ice_in.cands[i_3][1].con_addr;
  D.45636_238 = switch_check_network_list_ip_token (D.45635_237, "localnet.auto", 0B);
  if (D.45636_238 != 0)
    goto <bb 86>;
  else
    goto <bb 89>;

<bb 86>:
  engine_38->ice_in.chosen[1] = i_3;
  D.45464_239 = engine_38->ice_in.chosen[1];
  D.45639_240 = engine_38->ice_in.cands[D.45464_239][1].ready;
  D.45640_241 = D.45639_240 + 1;
  engine_38->ice_in.cands[D.45464_239][1].ready = D.45640_241;
  D.45467_242 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 88>;
  else
    goto <bb 87>;

<bb 87>:

<bb 88>:
  # iftmp.108_16 = PHI <"video"(86), "audio"(87)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2643, D.45467_242, 5, "No %s RTCP candidate found; defaulting to the first local one.\n", iftmp.108_16);

<bb 89>:
  i_245 = i_3 + 1;
  # DEBUG i => i_245

<bb 90>:
  # i_3 = PHI <0(74), i_245(89)>
  # DEBUG i => i_3
  D.45544_220 = engine_38->ice_in.cand_idx;
  if (D.45544_220 >= i_3)
    goto <bb 91>;
  else
    goto <bb 93>;

<bb 91>:
  D.45461_221 = engine_38->ice_in.chosen[0];
  if (D.45461_221 == 0)
    goto <bb 75>;
  else
    goto <bb 92>;

<bb 92>:
  D.45464_222 = engine_38->ice_in.chosen[1];
  if (D.45464_222 == 0)
    goto <bb 75>;
  else
    goto <bb 93>;

<bb 93>:
  D.45461_246 = engine_38->ice_in.chosen[0];
  if (D.45461_246 == 0)
    goto <bb 95>;
  else
    goto <bb 94>;

<bb 94>:
  D.45464_247 = engine_38->ice_in.chosen[1];
  if (D.45464_247 == 0)
    goto <bb 95>;
  else
    goto <bb 112>;

<bb 95>:
  i_676 = 0;
  goto <bb 109>;

<bb 96>:
  D.45461_252 = engine_38->ice_in.chosen[0];
  if (D.45461_252 == 0)
    goto <bb 97>;
  else
    goto <bb 102>;

<bb 97>:
  D.45611_253 = engine_38->ice_in.cands[i_4][0].component_id;
  if (D.45611_253 == 1)
    goto <bb 98>;
  else
    goto <bb 102>;

<bb 98>:
  D.45614_254 = engine_38->ice_in.cands[i_4][0].rport;
  if (D.45614_254 != 0)
    goto <bb 99>;
  else
    goto <bb 102>;

<bb 99>:
  engine_38->ice_in.chosen[0] = i_4;
  D.45461_255 = engine_38->ice_in.chosen[0];
  D.45621_256 = engine_38->ice_in.cands[D.45461_255][0].ready;
  D.45622_257 = D.45621_256 + 1;
  engine_38->ice_in.cands[D.45461_255][0].ready = D.45622_257;
  D.45467_258 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 101>;
  else
    goto <bb 100>;

<bb 100>:

<bb 101>:
  # iftmp.109_17 = PHI <"video"(99), "audio"(100)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2655, D.45467_258, 5, "No %s RTP candidate found; defaulting to the first srflx one.\n", iftmp.109_17);

<bb 102>:
  D.45464_261 = engine_38->ice_in.chosen[1];
  if (D.45464_261 == 0)
    goto <bb 103>;
  else
    goto <bb 108>;

<bb 103>:
  D.45629_262 = engine_38->ice_in.cands[i_4][1].component_id;
  if (D.45629_262 == 2)
    goto <bb 104>;
  else
    goto <bb 108>;

<bb 104>:
  D.45632_263 = engine_38->ice_in.cands[i_4][1].rport;
  if (D.45632_263 != 0)
    goto <bb 105>;
  else
    goto <bb 108>;

<bb 105>:
  engine_38->ice_in.chosen[1] = i_4;
  D.45464_264 = engine_38->ice_in.chosen[1];
  D.45639_265 = engine_38->ice_in.cands[D.45464_264][1].ready;
  D.45640_266 = D.45639_265 + 1;
  engine_38->ice_in.cands[D.45464_264][1].ready = D.45640_266;
  D.45467_267 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 107>;
  else
    goto <bb 106>;

<bb 106>:

<bb 107>:
  # iftmp.110_18 = PHI <"video"(105), "audio"(106)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2661, D.45467_267, 5, "No %s RTCP candidate found; defaulting to the first srflx one.\n", iftmp.110_18);

<bb 108>:
  i_270 = i_4 + 1;
  # DEBUG i => i_270

<bb 109>:
  # i_4 = PHI <0(95), i_270(108)>
  # DEBUG i => i_4
  D.45544_249 = engine_38->ice_in.cand_idx;
  if (D.45544_249 >= i_4)
    goto <bb 110>;
  else
    goto <bb 112>;

<bb 110>:
  D.45461_250 = engine_38->ice_in.chosen[0];
  if (D.45461_250 == 0)
    goto <bb 96>;
  else
    goto <bb 111>;

<bb 111>:
  D.45464_251 = engine_38->ice_in.chosen[1];
  if (D.45464_251 == 0)
    goto <bb 96>;
  else
    goto <bb 112>;

<bb 112>:
  D.45461_271 = engine_38->ice_in.chosen[0];
  if (D.45461_271 != 0)
    goto <bb 113>;
  else
    goto <bb 117>;

<bb 113>:
  D.45464_272 = engine_38->ice_in.chosen[1];
  D.45673_273 = D.45464_272 == 0;
  D.45674_274 = got_rtcp_mux_8 != 0;
  D.45675_275 = D.45673_273 && D.45674_274;
  if (D.45675_275 != 0)
    goto <bb 114>;
  else
    goto <bb 117>;

<bb 114>:
  D.45461_276 = engine_38->ice_in.chosen[0];
  engine_38->ice_in.chosen[1] = D.45461_276;
  D.45678_277 = &engine_38->ice_in.cands[0][0];
  D.45679_278 = (void * restrict) D.45678_277;
  D.45464_279 = engine_38->ice_in.chosen[1];
  D.45680_280 = (unsigned int) D.45464_279;
  D.45681_281 = D.45680_280 * 88;
  D.45682_282 = D.45681_281 + 44;
  D.45683_283 = D.45679_278 + D.45682_282;
  D.45678_284 = &engine_38->ice_in.cands[0][0];
  D.45684_285 = (const void * restrict) D.45678_284;
  D.45461_286 = engine_38->ice_in.chosen[0];
  D.45685_287 = (unsigned int) D.45461_286;
  D.45686_288 = D.45685_287 * 88;
  D.45687_289 = D.45684_285 + D.45686_288;
  memcpy (D.45683_283, D.45687_289, 44);
  D.45464_290 = engine_38->ice_in.chosen[1];
  D.45639_291 = engine_38->ice_in.cands[D.45464_290][1].ready;
  D.45640_292 = D.45639_291 + 1;
  engine_38->ice_in.cands[D.45464_290][1].ready = D.45640_292;
  D.45467_293 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 116>;
  else
    goto <bb 115>;

<bb 115>:

<bb 116>:
  # iftmp.111_19 = PHI <"video"(114), "audio"(115)>
  D.45464_296 = engine_38->ice_in.chosen[1];
  D.45692_297 = engine_38->ice_in.cands[D.45464_296][1].con_addr;
  D.45464_298 = engine_38->ice_in.chosen[1];
  D.45693_299 = engine_38->ice_in.cands[D.45464_298][1].con_port;
  D.45694_300 = (int) D.45693_299;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2675, D.45467_293, 5, "No %s RTCP candidate found; defaulting to the same as RTP [%s:%d]\n", iftmp.111_19, D.45692_297, D.45694_300);

<bb 117>:
  D.45461_301 = engine_38->ice_in.chosen[0];
  if (D.45461_301 == 0)
    goto <bb 119>;
  else
    goto <bb 118>;

<bb 118>:
  D.45464_302 = engine_38->ice_in.chosen[1];
  if (D.45464_302 == 0)
    goto <bb 119>;
  else
    goto <bb 132>;

<bb 119>:
  i_487 = 0;
  goto <bb 131>;

<bb 120>:
  D.45461_307 = engine_38->ice_in.chosen[0];
  if (D.45461_307 == 0)
    goto <bb 121>;
  else
    goto <bb 125>;

<bb 121>:
  D.45611_308 = engine_38->ice_in.cands[i_5][0].component_id;
  if (D.45611_308 == 1)
    goto <bb 122>;
  else
    goto <bb 125>;

<bb 122>:
  engine_38->ice_in.chosen[0] = i_5;
  D.45461_309 = engine_38->ice_in.chosen[0];
  D.45621_310 = engine_38->ice_in.cands[D.45461_309][0].ready;
  D.45622_311 = D.45621_310 + 1;
  engine_38->ice_in.cands[D.45461_309][0].ready = D.45622_311;
  D.45467_312 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 124>;
  else
    goto <bb 123>;

<bb 123>:

<bb 124>:
  # iftmp.112_20 = PHI <"video"(122), "audio"(123)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2686, D.45467_312, 5, "No %s RTP candidate found; defaulting to the first one.\n", iftmp.112_20);

<bb 125>:
  D.45464_315 = engine_38->ice_in.chosen[1];
  if (D.45464_315 == 0)
    goto <bb 126>;
  else
    goto <bb 130>;

<bb 126>:
  D.45629_316 = engine_38->ice_in.cands[i_5][1].component_id;
  if (D.45629_316 == 2)
    goto <bb 127>;
  else
    goto <bb 130>;

<bb 127>:
  engine_38->ice_in.chosen[1] = i_5;
  D.45464_317 = engine_38->ice_in.chosen[1];
  D.45639_318 = engine_38->ice_in.cands[D.45464_317][1].ready;
  D.45640_319 = D.45639_318 + 1;
  engine_38->ice_in.cands[D.45464_317][1].ready = D.45640_319;
  D.45467_320 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 129>;
  else
    goto <bb 128>;

<bb 128>:

<bb 129>:
  # iftmp.113_21 = PHI <"video"(127), "audio"(128)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2692, D.45467_320, 5, "No %s RTCP candidate found; defaulting to the first one.\n", iftmp.113_21);

<bb 130>:
  i_323 = i_5 + 1;
  # DEBUG i => i_323

<bb 131>:
  # i_5 = PHI <0(119), i_323(130)>
  # DEBUG i => i_5
  D.45544_304 = engine_38->ice_in.cand_idx;
  if (D.45544_304 >= i_5)
    goto <bb 133>;
  else
    goto <bb 132>;

<bb 132>:
  i_513 = 0;
  goto <bb 146>;

<bb 133>:
  D.45461_305 = engine_38->ice_in.chosen[0];
  if (D.45461_305 == 0)
    goto <bb 120>;
  else
    goto <bb 134>;

<bb 134>:
  D.45464_306 = engine_38->ice_in.chosen[1];
  if (D.45464_306 == 0)
    goto <bb 120>;
  else
    goto <bb 132>;

<bb 135>:
  D.45715_325 = engine_38->ice_in.chosen[i_6];
  D.45716_326 = engine_38->ice_in.cands[D.45715_325][i_6].ready;
  if (D.45716_326 != 0)
    goto <bb 136>;
  else
    goto <bb 145>;

<bb 136>:
  D.45721_327 = engine_38->ice_in.ufrag;
  # DEBUG s => D.45721_327
  if (D.45721_327 == 0B)
    goto <bb 139>;
  else
    goto <bb 137>;

<bb 137>:
  D.47855_650 = MEM[(const char *)D.45721_327];
  if (D.47855_650 == 0)
    goto <bb 139>;
  else
    goto <bb 138>;

<bb 138>:

<bb 139>:
  # D.47854_651 = PHI <1(136), 1(137), 0(138)>
  if (D.47854_651 != 0)
    goto <bb 144>;
  else
    goto <bb 140>;

<bb 140>:
  D.45724_329 = engine_38->ice_in.pwd;
  # DEBUG s => D.45724_329
  if (D.45724_329 == 0B)
    goto <bb 143>;
  else
    goto <bb 141>;

<bb 141>:
  D.47859_652 = MEM[(const char *)D.45724_329];
  if (D.47859_652 == 0)
    goto <bb 143>;
  else
    goto <bb 142>;

<bb 142>:

<bb 143>:
  # D.47858_653 = PHI <1(140), 1(141), 0(142)>
  if (D.47858_653 != 0)
    goto <bb 144>;
  else
    goto <bb 145>;

<bb 144>:
  D.45715_331 = engine_38->ice_in.chosen[i_6];
  engine_38->ice_in.cands[D.45715_331][i_6].ready = 0;

<bb 145>:
  i_332 = i_6 + 1;
  # DEBUG i => i_332

<bb 146>:
  # i_6 = PHI <0(132), i_332(145)>
  # DEBUG i => i_6
  if (i_6 <= 1)
    goto <bb 135>;
  else
    goto <bb 147>;

<bb 147>:
  D.45461_333 = engine_38->ice_in.chosen[0];
  D.45726_334 = engine_38->ice_in.cands[D.45461_333][0].con_addr;
  if (D.45726_334 != 0B)
    goto <bb 148>;
  else
    goto <bb 154>;

<bb 148>:
  D.45461_335 = engine_38->ice_in.chosen[0];
  D.45729_336 = engine_38->ice_in.cands[D.45461_335][0].con_port;
  if (D.45729_336 != 0)
    goto <bb 149>;
  else
    goto <bb 154>;

<bb 149>:
  tmp = "";
  D.45527_337 = engine_38->cur_payload_map;
  D.45467_338 = smh_34(D)->session;
  D.45461_339 = engine_38->ice_in.chosen[0];
  D.45726_340 = engine_38->ice_in.cands[D.45461_339][0].con_addr;
  D.45732_341 = switch_core_perform_session_strdup (D.45467_338, D.45726_340, "src/switch_core_media.c", &__func__, 2709);
  D.45527_337->remote_sdp_ip = D.45732_341;
  D.45467_342 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 151>;
  else
    goto <bb 150>;

<bb 150>:

<bb 151>:
  # iftmp.114_22 = PHI <"video"(149), "audio"(150)>
  D.45461_345 = engine_38->ice_in.chosen[0];
  D.45726_346 = engine_38->ice_in.cands[D.45461_345][0].con_addr;
  D.45461_347 = engine_38->ice_in.chosen[0];
  D.45729_348 = engine_38->ice_in.cands[D.45461_347][0].con_port;
  D.45737_349 = (int) D.45729_348;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2710, D.45467_342, 5, "setting remote %s ice addr to %s:%d based on candidate\n", iftmp.114_22, D.45726_346, D.45737_349);
  D.45461_350 = engine_38->ice_in.chosen[0];
  D.45621_351 = engine_38->ice_in.cands[D.45461_350][0].ready;
  D.45622_352 = D.45621_351 + 1;
  engine_38->ice_in.cands[D.45461_350][0].ready = D.45622_352;
  D.45461_353 = engine_38->ice_in.chosen[0];
  D.45729_354 = engine_38->ice_in.cands[D.45461_353][0].con_port;
  engine_38->remote_rtp_ice_port = D.45729_354;
  D.45467_355 = smh_34(D)->session;
  D.45461_356 = engine_38->ice_in.chosen[0];
  D.45726_357 = engine_38->ice_in.cands[D.45461_356][0].con_addr;
  D.45738_358 = switch_core_perform_session_strdup (D.45467_355, D.45726_357, "src/switch_core_media.c", &__func__, 2716);
  engine_38->remote_rtp_ice_addr = D.45738_358;
  D.45527_359 = engine_38->cur_payload_map;
  D.45467_360 = smh_34(D)->session;
  D.45461_361 = engine_38->ice_in.chosen[0];
  D.45726_362 = engine_38->ice_in.cands[D.45461_361][0].con_addr;
  D.45739_363 = switch_core_perform_session_strdup (D.45467_360, D.45726_362, "src/switch_core_media.c", &__func__, 2718);
  D.45527_359->remote_sdp_ip = D.45739_363;
  D.45527_364 = engine_38->cur_payload_map;
  D.45461_365 = engine_38->ice_in.chosen[0];
  D.45729_366 = engine_38->ice_in.cands[D.45461_365][0].con_port;
  D.45527_364->remote_sdp_port = D.45729_366;
  D.45740_367 = engine_38->remote_rtcp_port;
  if (D.45740_367 != 0)
    goto <bb 152>;
  else
    goto <bb 153>;

<bb 152>:
  D.45527_368 = engine_38->cur_payload_map;
  D.45528_369 = D.45527_368->remote_sdp_port;
  engine_38->remote_rtcp_port = D.45528_369;

<bb 153>:
  D.45527_370 = engine_38->cur_payload_map;
  D.45528_371 = D.45527_370->remote_sdp_port;
  D.45743_372 = (int) D.45528_371;
  switch_snprintf (&tmp, 80, "%d", D.45743_372);
  D.45467_373 = smh_34(D)->session;
  D.45468_374 = D.45467_373->channel;
  D.45527_375 = engine_38->cur_payload_map;
  D.45744_376 = D.45527_375->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.45468_374, "remote_media_ip", D.45744_376, 1);
  D.45467_377 = smh_34(D)->session;
  D.45468_378 = D.45467_377->channel;
  switch_channel_set_variable_var_check (D.45468_378, "remote_media_port", &tmp, 1);

<bb 154>:
  D.45464_379 = engine_38->ice_in.chosen[1];
  D.45693_380 = engine_38->ice_in.cands[D.45464_379][1].con_port;
  if (D.45693_380 != 0)
    goto <bb 155>;
  else
    goto <bb 158>;

<bb 155>:
  D.45467_381 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 157>;
  else
    goto <bb 156>;

<bb 156>:

<bb 157>:
  # iftmp.115_23 = PHI <"video"(155), "audio"(156)>
  D.45464_384 = engine_38->ice_in.chosen[1];
  D.45692_385 = engine_38->ice_in.cands[D.45464_384][1].con_addr;
  D.45464_386 = engine_38->ice_in.chosen[1];
  D.45693_387 = engine_38->ice_in.cands[D.45464_386][1].con_port;
  D.45694_388 = (int) D.45693_387;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2730, D.45467_381, 5, "setting remote rtcp %s addr to %s:%d based on candidate\n", iftmp.115_23, D.45692_385, D.45694_388);
  D.45464_389 = engine_38->ice_in.chosen[1];
  D.45693_390 = engine_38->ice_in.cands[D.45464_389][1].con_port;
  engine_38->remote_rtcp_ice_port = D.45693_390;
  D.45467_391 = smh_34(D)->session;
  D.45464_392 = engine_38->ice_in.chosen[1];
  D.45692_393 = engine_38->ice_in.cands[D.45464_392][1].con_addr;
  D.45751_394 = switch_core_perform_session_strdup (D.45467_391, D.45692_393, "src/switch_core_media.c", &__func__, 2734);
  engine_38->remote_rtcp_ice_addr = D.45751_394;
  D.45464_395 = engine_38->ice_in.chosen[1];
  D.45693_396 = engine_38->ice_in.cands[D.45464_395][1].con_port;
  engine_38->remote_rtcp_port = D.45693_396;

<bb 158>:
  D.45752_397 = m_46(D) != 0B;
  D.45753_398 = got_rtcp_mux_8 == 0;
  D.45754_399 = D.45752_397 && D.45753_398;
  if (D.45754_399 != 0)
    goto <bb 159>;
  else
    goto <bb 160>;

<bb 159>:
  engine_38->rtcp_mux = -1;

<bb 160>:
  D.45467_400 = smh_34(D)->session;
  D.45468_401 = D.45467_400->channel;
  D.45757_402 = switch_channel_test_flag (D.45468_401, 103);
  if (D.45757_402 != 0)
    goto <bb 161>;
  else
    goto <bb 201>;

<bb 161>:
  D.45519_403 = engine_38->rtp_session;
  D.45760_404 = switch_rtp_ready (D.45519_403);
  if (D.45760_404 != 0)
    goto <bb 162>;
  else
    goto <bb 168>;

<bb 162>:
  D.45461_405 = engine_38->ice_in.chosen[0];
  D.45621_406 = engine_38->ice_in.cands[D.45461_405][0].ready;
  if (D.45621_406 != 0)
    goto <bb 163>;
  else
    goto <bb 168>;

<bb 163>:
  D.45467_407 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 165>;
  else
    goto <bb 164>;

<bb 164>:

<bb 165>:
  # iftmp.116_24 = PHI <"video"(163), "audio"(164)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2749, D.45467_407, 6, "RE-Activating %s ICE\n", iftmp.116_24);
  D.45519_410 = engine_38->rtp_session;
  D.45721_411 = engine_38->ice_in.ufrag;
  D.45769_412 = engine_38->ice_out.ufrag;
  D.45770_413 = engine_38->ice_out.pwd;
  D.45724_414 = engine_38->ice_in.pwd;
  D.45467_415 = smh_34(D)->session;
  D.45772_416 = switch_ice_direction (D.45467_415);
  if (D.45772_416 == 1)
    goto <bb 167>;
  else
    goto <bb 166>;

<bb 166>:

<bb 167>:
  # iftmp.117_25 = PHI <2(165), 6(166)>
  D.45776_419 = &engine_38->ice_in;
  switch_rtp_activate_ice (D.45519_410, D.45721_411, D.45769_412, D.45770_413, D.45724_414, 0, iftmp.117_25, D.45776_419);

<bb 168>:
  D.45519_420 = engine_38->rtp_session;
  if (D.45519_420 != 0B)
    goto <bb 169>;
  else
    goto <bb 189>;

<bb 169>:
  D.45467_421 = smh_34(D)->session;
  D.45468_422 = D.45467_421->channel;
  if (type_36(D) == 1)
    goto <bb 171>;
  else
    goto <bb 170>;

<bb 170>:

<bb 171>:
  # iftmp.118_26 = PHI <"rtcp_video_interval_msec"(169), "rtcp_audio_interval_msec"(170)>
  val_425 = switch_channel_get_variable_dup (D.45468_422, iftmp.118_26, 1, -1);
  # DEBUG val => val_425
  if (val_425 != 0B)
    goto <bb 176>;
  else
    goto <bb 172>;

<bb 172>:
  if (type_36(D) == 1)
    goto <bb 173>;
  else
    goto <bb 174>;

<bb 173>:
  D.45789_426 = smh_34(D)->mparams;
  val_427 = D.45789_426->rtcp_video_interval_msec;
  goto <bb 175>;

<bb 174>:
  D.45789_428 = smh_34(D)->mparams;
  val_429 = D.45789_428->rtcp_audio_interval_msec;

<bb 175>:
  # val_27 = PHI <val_427(173), val_429(174)>
  # DEBUG val => val_27
  if (val_27 != 0B)
    goto <bb 176>;
  else
    goto <bb 189>;

<bb 176>:
  # val_9 = PHI <val_425(171), val_27(175)>
  # DEBUG val => val_9
  D.45467_431 = smh_34(D)->session;
  D.45468_432 = D.45467_431->channel;
  if (type_36(D) == 1)
    goto <bb 178>;
  else
    goto <bb 177>;

<bb 177>:

<bb 178>:
  # iftmp.120_28 = PHI <"rtp_remote_video_rtcp_port"(176), "rtp_remote_audio_rtcp_port"(177)>
  rport_435 = switch_channel_get_variable_dup (D.45468_432, iftmp.120_28, 1, -1);
  # DEBUG rport => rport_435
  remote_rtcp_port_436 = engine_38->remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_436
  D.45795_437 = remote_rtcp_port_436 == 0;
  D.45796_438 = rport_435 != 0B;
  D.45797_439 = D.45795_437 && D.45796_438;
  if (D.45797_439 != 0)
    goto <bb 179>;
  else
    goto <bb 180>;

<bb 179>:
  # DEBUG __nptr => rport_435
  D.47862_654 = strtol (rport_435, 0B, 10);
  remote_rtcp_port_441 = (switch_port_t) D.47862_654;
  # DEBUG remote_rtcp_port => remote_rtcp_port_441

<bb 180>:
  # remote_rtcp_port_11 = PHI <remote_rtcp_port_436(178), remote_rtcp_port_441(179)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_11
  D.45801_442 = strcasecmp (val_9, "passthru");
  if (D.45801_442 == 0)
    goto <bb 181>;
  else
    goto <bb 184>;

<bb 181>:
  D.45467_443 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 183>;
  else
    goto <bb 182>;

<bb 182>:

<bb 183>:
  # iftmp.121_29 = PHI <"video"(181), "audio"(182)>
  D.45808_446 = (int) remote_rtcp_port_11;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2787, D.45467_443, 6, "Activating %s RTCP PASSTHRU PORT %d\n", iftmp.121_29, D.45808_446);
  D.45519_447 = engine_38->rtp_session;
  D.45809_448 = engine_38->rtcp_mux;
  D.45810_449 = D.45809_448 > 0;
  switch_rtp_activate_rtcp (D.45519_447, -1, remote_rtcp_port_11, D.45810_449);
  goto <bb 189>;

<bb 184>:
  # DEBUG __nptr => val_9
  interval_655 = strtol (val_9, 0B, 10);
  # DEBUG interval => NULL
  interval.122_451 = (unsigned int) interval_655;
  D.45813_452 = interval.122_451 + 4294967196;
  if (D.45813_452 > 499900)
    goto <bb 185>;
  else
    goto <bb 186>;

<bb 185>:
  D.45467_453 = smh_34(D)->session;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2793, D.45467_453, 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_655);
  # DEBUG interval => 10000

<bb 186>:
  # interval_12 = PHI <interval_655(184), 10000(185)>
  # DEBUG interval => interval_12
  D.45467_455 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 188>;
  else
    goto <bb 187>;

<bb 187>:

<bb 188>:
  # iftmp.123_30 = PHI <"video"(186), "audio"(187)>
  D.45808_458 = (int) remote_rtcp_port_11;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2798, D.45467_455, 6, "Activating %s RTCP PORT %d\n", iftmp.123_30, D.45808_458);
  D.45519_459 = engine_38->rtp_session;
  D.45809_460 = engine_38->rtcp_mux;
  D.45810_461 = D.45809_460 > 0;
  switch_rtp_activate_rtcp (D.45519_459, interval_12, remote_rtcp_port_11, D.45810_461);

<bb 189>:
  D.45464_462 = engine_38->ice_in.chosen[1];
  D.45639_463 = engine_38->ice_in.cands[D.45464_462][1].ready;
  if (D.45639_463 != 0)
    goto <bb 190>;
  else
    goto <bb 201>;

<bb 190>:
  D.45809_464 = engine_38->rtcp_mux;
  if (D.45809_464 > 0)
    goto <bb 191>;
  else
    goto <bb 196>;

<bb 191>:
  D.45464_465 = engine_38->ice_in.chosen[1];
  D.45692_466 = engine_38->ice_in.cands[D.45464_465][1].con_addr;
  D.45461_467 = engine_38->ice_in.chosen[0];
  D.45726_468 = engine_38->ice_in.cands[D.45461_467][0].con_addr;
  D.38904_469 = __builtin_strcmp (D.45692_466, D.45726_468);
  if (D.38904_469 == 0)
    goto <bb 192>;
  else
    goto <bb 196>;

<bb 192>:
  D.45464_470 = engine_38->ice_in.chosen[1];
  D.45693_471 = engine_38->ice_in.cands[D.45464_470][1].con_port;
  D.45461_472 = engine_38->ice_in.chosen[0];
  D.45729_473 = engine_38->ice_in.cands[D.45461_472][0].con_port;
  if (D.45693_471 == D.45729_473)
    goto <bb 193>;
  else
    goto <bb 196>;

<bb 193>:
  D.45467_474 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 195>;
  else
    goto <bb 194>;

<bb 194>:

<bb 195>:
  # iftmp.124_31 = PHI <"video"(193), "audio"(194)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2806, D.45467_474, 6, "Skipping %s RTCP ICE (Same as RTP)\n", iftmp.124_31);
  goto <bb 201>;

<bb 196>:
  D.45467_477 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 198>;
  else
    goto <bb 197>;

<bb 197>:

<bb 198>:
  # iftmp.125_32 = PHI <"video"(196), "audio"(197)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2808, D.45467_477, 6, "Activating %s RTCP ICE\n", iftmp.125_32);
  D.45519_480 = engine_38->rtp_session;
  D.45721_481 = engine_38->ice_in.ufrag;
  D.45769_482 = engine_38->ice_out.ufrag;
  D.45770_483 = engine_38->ice_out.pwd;
  D.45724_484 = engine_38->ice_in.pwd;
  D.45467_485 = smh_34(D)->session;
  D.45836_486 = switch_ice_direction (D.45467_485);
  if (D.45836_486 == 1)
    goto <bb 200>;
  else
    goto <bb 199>;

<bb 199>:

<bb 200>:
  # iftmp.126_33 = PHI <2(198), 6(199)>
  D.45776_489 = &engine_38->ice_in;
  switch_rtp_activate_ice (D.45519_480, D.45721_481, D.45769_482, D.45770_483, D.45724_484, 1, iftmp.126_33, D.45776_489);

<bb 201>:
  return;

}



;; Function switch_core_session_set_ice (switch_core_session_set_ice)

switch_core_session_set_ice (struct switch_core_session_t * session)
{
  static const char __PRETTY_FUNCTION__[28] = "switch_core_session_set_ice";
  struct switch_media_handle_t * smh;
  struct switch_core_media_params_t * D.45846;
  struct switch_channel_t * D.45845;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2840, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  D.45845_3 = session_1(D)->channel;
  switch_channel_set_flag_value (D.45845_3, 110, 1);
  D.45845_4 = session_1(D)->channel;
  switch_channel_set_flag_value (D.45845_4, 106, 1);
  D.45845_5 = session_1(D)->channel;
  switch_channel_set_flag_value (D.45845_5, 108, 1);
  D.45846_6 = smh_2->mparams;
  D.45846_6->rtcp_audio_interval_msec = "10000";
  D.45846_7 = smh_2->mparams;
  D.45846_7->rtcp_video_interval_msec = "10000";

<bb 6>:
  return;

}



;; Function switch_core_media_toggle_hold (switch_core_media_toggle_hold)

switch_core_media_toggle_hold (struct switch_core_session_t * session, int sendonly)
{
  int D.49661;
  switch_bool_t D.49660;
  int D.49659;
  int D.49658;
  int D.49657;
  int D.49656;
  int D.49655;
  int D.49654;
  int D.49653;
  int D.49651;
  const char * val;
  const char * info;
  const char * msg;
  const char * stream;
  static const char __func__[30] = "switch_core_media_toggle_hold";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_toggle_hold";
  struct switch_channel_t * b_channel;
  struct switch_core_session_t * b_session;
  struct switch_media_handle_t * smh;
  int changed;
  uint32_t D.44454;
  int32_t D.44449;
  uint32_t D.44444;
  uint32_t D.44440;
  uint32_t D.44433;
  char * D.44432;
  uint32_t D.44431;
  uint32_t D.44429;
  uint32_t D.44422;
  uint32_t D.44415;
  char * D.44414;
  char * D.44412;
  int D.44409;
  uint32_t D.44408;
  int D.44404;
  uint32_t D.44393;
  struct switch_rtp_t * D.44390;
  struct switch_rtp_t * D.44387;
  const char * D.44384;
  switch_bool_t sendonly.87;
  uint32_t D.44380;
  uint32_t D.44378;
  uint32_t D.44376;
  uint32_t D.44370;
  uint32_t D.44368;
  struct switch_channel_t * D.44367;
  struct switch_core_session_t * b_session.86;
  switch_status_t D.44360;

<bb 2>:
  # DEBUG changed => 0
  b_session = 0B;
  # DEBUG b_channel => 0B
  if (session_9(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 3872, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_10 = session_9(D)->media_handle;
  # DEBUG smh => smh_10
  if (smh_10 == 0B)
    goto <bb 76>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#9 => &smh_10->engines
  # DEBUG a_engine => D#9
  # DEBUG D#10 => &smh_10->engines[1]
  # DEBUG v_engine => D#10
  D.44360_14 = switch_core_session_perform_get_partner (session_9(D), &b_session, "src/switch_core_media.c", &__func__, 3882);
  if (D.44360_14 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  b_session.86_15 = b_session;
  b_channel_16 = switch_core_session_get_channel (b_session.86_15);
  # DEBUG b_channel => b_channel_16

<bb 7>:
  # b_channel_3 = PHI <0B(5), b_channel_16(6)>
  # DEBUG b_channel => b_channel_3
  if (sendonly_17(D) != 0)
    goto <bb 8>;
  else
    goto <bb 34>;

<bb 8>:
  D.44367_18 = session_9(D)->channel;
  D.44368_19 = switch_channel_test_flag (D.44367_18, 1);
  if (D.44368_19 != 0)
    goto <bb 9>;
  else
    goto <bb 34>;

<bb 9>:
  D.44367_20 = session_9(D)->channel;
  D.44370_21 = switch_channel_test_flag (D.44367_20, 96);
  if (D.44370_21 == 0)
    goto <bb 10>;
  else
    goto <bb 74> (end);

<bb 10>:
  # DEBUG msg => "hold"
  D.44367_23 = session_9(D)->channel;
  D.44376_24 = switch_channel_test_flag (D.44367_23, 94);
  if (D.44376_24 != 0)
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:
  D.44367_25 = session_9(D)->channel;
  D.44378_26 = switch_channel_test_flag (D.44367_25, 95);
  if (D.44378_26 != 0)
    goto <bb 12>;
  else
    goto <bb 15>;

<bb 12>:
  if (b_channel_3 == 0B)
    goto <bb 14>;
  else
    goto <bb 13>;

<bb 13>:
  D.44380_27 = switch_channel_test_flag (b_channel_3, 25);
  if (D.44380_27 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.44367_28 = session_9(D)->channel;
  sendonly.87_29 = (switch_bool_t) sendonly_17(D);
  switch_channel_mark_hold (D.44367_28, sendonly.87_29);
  D.44367_30 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_30, 96, 1);
  # DEBUG changed => 0
  goto <bb 74> (end);

<bb 15>:
  D.44367_32 = session_9(D)->channel;
  info_33 = switch_channel_get_variable_dup (D.44367_32, "presence_call_info", 1, -1);
  # DEBUG info => info_33
  if (info_33 != 0B)
    goto <bb 16>;
  else
    goto <bb 18>;

<bb 16>:
  D.44384_34 = switch_stristr ("private", info_33);
  if (D.44384_34 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  # DEBUG msg => "hold-private"

<bb 18>:
  # msg_5 = PHI <"hold"(15), "hold"(16), "hold-private"(17)>
  # DEBUG msg => msg_5
  D.44387_36 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].rtp_session;
  if (D.44387_36 != 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.44387_37 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].rtp_session;
  switch_rtp_set_flag (D.44387_37, 35);

<bb 20>:
  D.44390_38 = MEM[(struct switch_rtp_engine_t *)smh_10 + 11496B].rtp_session;
  if (D.44390_38 != 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.44390_39 = MEM[(struct switch_rtp_engine_t *)smh_10 + 11496B].rtp_session;
  switch_rtp_set_flag (D.44390_39, 35);

<bb 22>:
  D.44367_40 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_40, 96, 1);
  D.44367_41 = session_9(D)->channel;
  switch_channel_mark_hold (D.44367_41, 1);
  D.44367_42 = session_9(D)->channel;
  switch_channel_perform_presence (D.44367_42, "unknown", msg_5, 0B, "src/switch_core_media.c", &__func__, 3918);
  # DEBUG changed => 1
  D.44393_44 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].max_missed_hold_packets;
  if (D.44393_44 != 0)
    goto <bb 23>;
  else
    goto <bb 25>;

<bb 23>:
  D.44387_45 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].rtp_session;
  if (D.44387_45 != 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  D.44387_46 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].rtp_session;
  D.44393_47 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].max_missed_hold_packets;
  switch_rtp_set_max_missed_packets (D.44387_46, D.44393_47);

<bb 25>:
  D.44367_48 = session_9(D)->channel;
  stream_49 = switch_channel_get_hold_music (D.44367_48);
  # DEBUG stream => stream_49
  if (stream_49 == 0B)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  # DEBUG stream => "local_stream://moh"

<bb 27>:
  # stream_4 = PHI <stream_49(25), "local_stream://moh"(26)>
  # DEBUG stream => stream_4
  if (stream_4 != 0B)
    goto <bb 28>;
  else
    goto <bb 74> (end);

<bb 28>:
  D.44404_51 = strcasecmp (stream_4, "silence");
  if (D.44404_51 != 0)
    goto <bb 29>;
  else
    goto <bb 74> (end);

<bb 29>:
  if (b_channel_3 == 0B)
    goto <bb 31>;
  else
    goto <bb 30>;

<bb 30>:
  D.44408_52 = switch_channel_test_flag (b_channel_3, 25);
  if (D.44408_52 == 0)
    goto <bb 31>;
  else
    goto <bb 74> (end);

<bb 31>:
  D.44409_53 = strcasecmp (stream_4, "indicate_hold");
  if (D.44409_53 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;

<bb 32>:
  D.44367_54 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_54, 16, 1);
  D.44367_55 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_55, 10, 1);
  b_session.86_56 = b_session;
  D.44412_57 = switch_core_session_get_uuid (b_session.86_56);
  switch_ivr_hold_uuid (D.44412_57, 0B, 0);
  goto <bb 74> (end);

<bb 33>:
  b_session.86_58 = b_session;
  D.44414_59 = switch_core_session_get_uuid (b_session.86_58);
  switch_ivr_broadcast (D.44414_59, stream_4, 274);
  switch_sleep (250000);
  goto <bb 74> (end);

<bb 34>:
  D.44367_60 = session_9(D)->channel;
  D.44415_61 = switch_channel_test_flag (D.44367_60, 97);
  if (D.44415_61 != 0)
    goto <bb 35>;
  else
    goto <bb 39>;

<bb 35>:
  D.44367_62 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_62, 96, 1);
  D.44367_63 = session_9(D)->channel;
  switch_channel_mark_hold (D.44367_63, 1);
  D.44387_64 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].rtp_session;
  if (D.44387_64 != 0B)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  D.44387_65 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].rtp_session;
  switch_rtp_set_flag (D.44387_65, 35);

<bb 37>:
  D.44390_66 = MEM[(struct switch_rtp_engine_t *)smh_10 + 11496B].rtp_session;
  if (D.44390_66 != 0B)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.44390_67 = MEM[(struct switch_rtp_engine_t *)smh_10 + 11496B].rtp_session;
  switch_rtp_set_flag (D.44390_67, 35);

<bb 39>:
  # changed_1 = PHI <0(34), 1(38), 1(37)>
  # DEBUG changed => changed_1
  D.44367_69 = session_9(D)->channel;
  switch_channel_clear_flag (D.44367_69, 97);
  D.44367_70 = session_9(D)->channel;
  D.44422_71 = switch_channel_test_flag (D.44367_70, 96);
  if (D.44422_71 != 0)
    goto <bb 40>;
  else
    goto <bb 74> (end);

<bb 40>:
  switch_sleep (250000);
  if (b_channel_3 != 0B)
    goto <bb 41>;
  else
    goto <bb 44>;

<bb 41>:
  D.44367_72 = session_9(D)->channel;
  D.44429_73 = switch_channel_test_flag (D.44367_72, 120);
  if (D.44429_73 != 0)
    goto <bb 43>;
  else
    goto <bb 42>;

<bb 42>:
  D.44431_74 = switch_channel_test_flag (b_channel_3, 120);
  if (D.44431_74 != 0)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  D.44432_75 = switch_core_session_get_uuid (session_9(D));
  switch_ivr_nomedia (D.44432_75, 1);

<bb 44>:
  D.44433_76 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].max_missed_packets;
  if (D.44433_76 != 0)
    goto <bb 45>;
  else
    goto <bb 47>;

<bb 45>:
  D.44387_77 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].rtp_session;
  if (D.44387_77 != 0B)
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  D.44387_78 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].rtp_session;
  switch_rtp_reset_media_timer (D.44387_78);
  D.44387_79 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].rtp_session;
  D.44433_80 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].max_missed_packets;
  switch_rtp_set_max_missed_packets (D.44387_79, D.44433_80);

<bb 47>:
  if (b_channel_3 != 0B)
    goto <bb 48>;
  else
    goto <bb 53>;

<bb 48>:
  D.44367_81 = session_9(D)->channel;
  D.44440_82 = switch_channel_test_flag (D.44367_81, 10);
  if (D.44440_82 != 0)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  b_session.86_83 = b_session;
  switch_ivr_unhold (b_session.86_83);
  D.44367_84 = session_9(D)->channel;
  switch_channel_clear_flag (D.44367_84, 16);
  D.44367_85 = session_9(D)->channel;
  switch_channel_clear_flag (D.44367_85, 10);
  goto <bb 53>;

<bb 50>:
  D.44444_86 = switch_channel_test_flag (b_channel_3, 21);
  if (D.44444_86 != 0)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  switch_channel_set_flag_value (b_channel_3, 28, 1);
  switch_channel_set_flag_value (b_channel_3, 20, 1);

<bb 52>:
  switch_channel_wait_for_flag (b_channel_3, 21, 0, 5000, 0B);

<bb 53>:
  D.44449_87 = switch_media_handle_test_media_flag (smh_10, 10);
  if (D.44449_87 == 0)
    goto <bb 54>;
  else
    goto <bb 72>;

<bb 54>:
  D.44367_88 = session_9(D)->channel;
  val_89 = switch_channel_get_variable_dup (D.44367_88, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_89
  if (val_89 == 0B)
    goto <bb 67>;
  else
    goto <bb 55>;

<bb 55>:
  # DEBUG expr => val_89
  if (val_89 != 0B)
    goto <bb 56>;
  else
    goto <bb 65>;

<bb 56>:
  D.49653_192 = strcasecmp (val_89, "yes");
  if (D.49653_192 == 0)
    goto <bb 66>;
  else
    goto <bb 57>;

<bb 57>:
  D.49654_193 = strcasecmp (val_89, "on");
  if (D.49654_193 == 0)
    goto <bb 66>;
  else
    goto <bb 58>;

<bb 58>:
  D.49655_194 = strcasecmp (val_89, "true");
  if (D.49655_194 == 0)
    goto <bb 66>;
  else
    goto <bb 59>;

<bb 59>:
  D.49656_195 = strcasecmp (val_89, "t");
  if (D.49656_195 == 0)
    goto <bb 66>;
  else
    goto <bb 60>;

<bb 60>:
  D.49657_196 = strcasecmp (val_89, "enabled");
  if (D.49657_196 == 0)
    goto <bb 66>;
  else
    goto <bb 61>;

<bb 61>:
  D.49658_197 = strcasecmp (val_89, "active");
  if (D.49658_197 == 0)
    goto <bb 66>;
  else
    goto <bb 62>;

<bb 62>:
  D.49659_198 = strcasecmp (val_89, "allow");
  if (D.49659_198 == 0)
    goto <bb 66>;
  else
    goto <bb 63>;

<bb 63>:
  D.49660_199 = switch_is_number (val_89);
  if (D.49660_199 != 0)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  # DEBUG __nptr => val_89
  D.49661_200 = strtol (val_89, 0B, 10);
  if (D.49661_200 != 0)
    goto <bb 66>;
  else
    goto <bb 65>;

<bb 65>:

<bb 66>:
  # D.49651_201 = PHI <1(56), 1(57), 1(58), 1(59), 1(60), 1(61), 1(62), 1(64), 0(65)>
  D.49651_206 = D.49651_201;
  D.49651_90 = D.49651_206;
  if (D.49651_90 == 0)
    goto <bb 67>;
  else
    goto <bb 72>;

<bb 67>:
  D.44367_91 = session_9(D)->channel;
  D.44454_92 = switch_channel_test_flag (D.44367_91, 106);
  if (D.44454_92 == 0)
    goto <bb 68>;
  else
    goto <bb 72>;

<bb 68>:
  D.44387_93 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].rtp_session;
  if (D.44387_93 != 0B)
    goto <bb 69>;
  else
    goto <bb 70>;

<bb 69>:
  D.44387_94 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].rtp_session;
  switch_rtp_set_flag (D.44387_94, 7);

<bb 70>:
  D.44390_95 = MEM[(struct switch_rtp_engine_t *)smh_10 + 11496B].rtp_session;
  if (D.44390_95 != 0B)
    goto <bb 71>;
  else
    goto <bb 72>;

<bb 71>:
  D.44390_96 = MEM[(struct switch_rtp_engine_t *)smh_10 + 11496B].rtp_session;
  switch_rtp_set_flag (D.44390_96, 7);

<bb 72>:
  D.44367_97 = session_9(D)->channel;
  switch_channel_clear_flag (D.44367_97, 96);
  D.44367_98 = session_9(D)->channel;
  switch_channel_mark_hold (D.44367_98, 0);
  D.44367_99 = session_9(D)->channel;
  switch_channel_perform_presence (D.44367_99, "unknown", "unhold", 0B, "src/switch_core_media.c", &__func__, 4004);
  D.44387_100 = MEM[(struct switch_rtp_engine_t *)smh_10 + 80B].rtp_session;
  switch_rtp_clear_flag (D.44387_100, 35);
  D.44390_101 = MEM[(struct switch_rtp_engine_t *)smh_10 + 11496B].rtp_session;
  if (D.44390_101 != 0B)
    goto <bb 73>;
  else
    goto <bb 74> (end);

<bb 73>:
  D.44390_102 = MEM[(struct switch_rtp_engine_t *)smh_10 + 11496B].rtp_session;
  switch_rtp_clear_flag (D.44390_102, 35);

  # changed_2 = PHI <0(14), 1(27), changed_1(39), 1(73), 0(9), 1(33), 1(32), 1(30), 1(28), 1(72)>
end:
  # DEBUG changed => changed_2
  b_session.86_104 = b_session;
  if (b_session.86_104 != 0B)
    goto <bb 75>;
  else
    goto <bb 76>;

<bb 75>:
  b_session.86_105 = b_session;
  switch_core_session_rwunlock (b_session.86_105);

<bb 76>:
  # changed_6 = PHI <0(4), changed_2(75), changed_2(74)>
  return changed_6;

}



;; Function switch_core_media_negotiate_sdp (switch_core_media_negotiate_sdp)

switch_core_media_negotiate_sdp (struct switch_core_session_t * session, const char * r_sdp, uint8_t * proceed, switch_sdp_type_t sdp_type)
{
  int D.49756;
  switch_bool_t D.49755;
  int D.49754;
  int D.49753;
  int D.49752;
  int D.49751;
  int D.49750;
  int D.49749;
  int D.49748;
  int D.49746;
  int D.49744;
  switch_bool_t D.49743;
  int D.49742;
  int D.49741;
  int D.49740;
  int D.49739;
  int D.49738;
  int D.49737;
  int D.49736;
  int D.49734;
  int D.49732;
  switch_bool_t D.49731;
  int D.49730;
  int D.49729;
  int D.49728;
  int D.49727;
  int D.49726;
  int D.49725;
  int D.49724;
  int D.49722;
  int D.49720;
  switch_bool_t D.49719;
  int D.49718;
  int D.49717;
  int D.49716;
  int D.49715;
  int D.49714;
  int D.49713;
  int D.49712;
  int D.49708;
  switch_bool_t D.49707;
  int D.49706;
  int D.49705;
  int D.49704;
  int D.49703;
  int D.49702;
  int D.49701;
  int D.49700;
  int D.49698;
  int D.49696;
  switch_bool_t D.49695;
  int D.49694;
  int D.49693;
  int D.49692;
  int D.49691;
  int D.49690;
  int D.49689;
  int D.49688;
  int D.49686;
  int D.49684;
  switch_bool_t D.49683;
  int D.49682;
  int D.49681;
  int D.49680;
  int D.49679;
  int D.49678;
  int D.49677;
  int D.49676;
  int D.49674;
  int iftmp.104;
  uint32_t D.47966;
  uint32_t D.47965;
  struct switch_mutex_t * D.47964;
  struct switch_codec_interface_t * D.47963;
  const struct switch_codec_implementation_t * D.47962;
  const char D.47958;
  int D.47957;
  const char D.47951;
  int D.47950;
  int D.47947;
  const char D.47944;
  int D.47943;
  const char D.47940;
  int D.47939;
  int iftmp.104;
  uint32_t D.47935;
  uint32_t D.47934;
  struct switch_mutex_t * D.47933;
  struct switch_codec_interface_t * D.47932;
  const struct switch_codec_implementation_t * D.47931;
  const char D.47927;
  int D.47926;
  int D.47923;
  const char D.47920;
  int D.47919;
  const char D.47916;
  int D.47915;
  unsigned char csui.173;
  const char D.47901;
  int D.47900;
  int D.47891;
  const char D.47888;
  int D.47887;
  const char D.47878;
  int D.47877;
  uint8_t D.47875;
  struct payload_map_t * pmap;
  uint8_t D.47872;
  struct payload_map_t * pmap;
  struct payload_map_t * pmap;
  int j;
  char tmp[50];
  const struct switch_codec_implementation_t * imp;
  int crypto_tag;
  register int __result;
  const unsigned char * __s1;
  int i;
  int vmatch;
  const struct switch_codec_implementation_t * mimp;
  const char * rm_encoding;
  struct sdp_rtpmap_t * map;
  char tmp[50];
  struct payload_map_t * pmap;
  int j;
  const struct switch_codec_implementation_t * timp;
  int num;
  char tmp[80];
  char * prefs[1];
  const struct switch_codec_implementation_t * search[1];
  int j;
  uint32_t codec_rate;
  uint32_t bit_rate;
  const struct switch_codec_implementation_t * imp;
  struct switch_codec_fmtp_t codec_fmtp;
  uint32_t map_bit_rate;
  const char * rm_encoding;
  int32_t i;
  int crypto_tag;
  struct sdp_rtpmap_t * map;
  const char * err;
  char tmp[32];
  switch_port_t remote_port;
  char * remote_host;
  struct switch_core_session_message_t * msg;
  struct switch_channel_t * other_channel;
  int pass;
  const char * var;
  struct switch_t38_options_t * t38_options;
  struct switch_core_session_t * other_session;
  struct sdp_connection_t * connection;
  register int __result;
  static const char __func__[32] = "switch_core_media_negotiate_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_negotiate_sdp";
  int nm_idx;
  int m_idx;
  const char * tmp;
  uint32_t fmtp_remote_codec_rate;
  uint32_t remote_codec_rate;
  int codec_ms;
  struct matches near_matches[30];
  struct matches matches[30];
  struct sdp_rtpmap_t * near_map;
  struct sdp_rtpmap_t * mmap;
  const struct switch_codec_implementation_t * near_match;
  const struct switch_codec_implementation_t * mimp;
  uint32_t near_rate;
  struct switch_media_handle_t * smh;
  int total_codecs;
  const struct switch_codec_implementation_t * * codec_array;
  int reneg;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  int scrooge;
  int got_webrtc;
  int got_udptl;
  int got_savp;
  int got_avp;
  int got_audio;
  int got_video_crypto;
  int got_crypto;
  const char * crypto;
  const char * val;
  struct switch_channel_t * channel;
  int x;
  int greedy;
  int recvonly;
  int sendonly;
  int dmaxptime;
  int maxptime;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  switch_payload_t cng_pt;
  switch_payload_t te;
  switch_payload_t best_te;
  uint8_t match;
  switch_status_t D.45317;
  struct switch_codec_t * D.45313;
  int D.45307;
  switch_payload_t D.45306;
  int D.45305;
  switch_payload_t D.45304;
  char * D.45303;
  char * D.45302;
  int D.45301;
  switch_port_t D.45300;
  char * D.45299;
  const char * D.45298;
  char * D.45297;
  uint32_t D.45296;
  int D.45295;
  const int D.45294;
  unsigned char D.45293;
  char * D.45292;
  switch_payload_t D.45291;
  struct switch_rtp_t * D.45288;
  struct payload_map_t * D.45287;
  uint32_t D.45284;
  int D.45283;
  const int D.45282;
  const uint32_t D.45281;
  const struct switch_codec_implementation_t * D.45280;
  uint32_t D.45279;
  <unnamed-unsigned:7> D.45278;
  const char * D.45277;
  const char * D.45276;
  struct sdp_rtpmap_t * D.45275;
  _Bool D.45268;
  _Bool D.45267;
  const uint32_t D.45264;
  long unsigned int D.45263;
  int D.45260;
  const char * D.45256;
  int D.45252;
  const switch_payload_t D.45251;
  char * const D.45250;
  int D.45249;
  <unnamed-unsigned:7> D.45248;
  uint32_t D.45245;
  switch_call_direction_t D.45242;
  const switch_codec_type_t D.45239;
  const struct switch_codec_implementation_t * * D.45238;
  unsigned int D.45237;
  unsigned int i.99;
  const char * D.45228;
  int D.45220;
  char * D.45215;
  short unsigned int D.45214;
  const unsigned char D.45186;
  int D.45176;
  const unsigned char D.45175;
  int D.45169;
  uint8_t D.45165;
  uint8_t D.45164;
  const char * D.45161;
  int D.45155;
  int D.45152;
  int D.45144;
  int D.45141;
  int D.45138;
  const char * D.45125;
  int D.45121;
  switch_call_direction_t D.45115;
  int D.45112;
  switch_payload_t D.45111;
  uint32_t D.45110;
  int32_t D.45108;
  switch_status_t D.45100;
  uint32_t D.45099;
  struct switch_codec_t * D.45095;
  int D.45094;
  switch_payload_t D.45093;
  int D.45090;
  char * D.45089;
  short unsigned int D.45088;
  char * D.45087;
  const char * D.45086;
  const char * D.45083;
  const char * D.45080;
  int D.45074;
  int D.45071;
  const char * D.45067;
  uint32_t D.45065;
  const int D.45064;
  uint32_t D.45063;
  int D.45062;
  const int D.45061;
  const uint32_t D.45060;
  int D.45057;
  const uint32_t D.45056;
  unsigned char D.45055;
  <unnamed-unsigned:7> D.45054;
  char * D.45053;
  char * const D.45052;
  char * D.45051;
  const char * D.45050;
  switch_payload_t D.45049;
  uint32_t D.45044;
  int D.45043;
  const int D.45042;
  const uint32_t D.45041;
  const struct switch_codec_implementation_t * D.45040;
  uint32_t D.45039;
  <unnamed-unsigned:7> D.45038;
  const char * D.45037;
  const char * D.45036;
  struct sdp_rtpmap_t * D.45035;
  int near_rate.96;
  int D.45029;
  const uint32_t D.45028;
  char * const D.45027;
  int D.45026;
  const int D.45025;
  char * const D.45014;
  int D.45013;
  _Bool D.45010;
  _Bool D.45009;
  _Bool D.45008;
  _Bool D.45005;
  _Bool D.45004;
  _Bool D.45003;
  switch_rtp_crypto_mode_t D.45002;
  _Bool D.45000;
  _Bool D.44999;
  _Bool D.44998;
  int D.44997;
  int codec_rate.94;
  int D.44994;
  _Bool D.44992;
  _Bool D.44991;
  _Bool D.44990;
  const uint32_t D.44985;
  int D.44980;
  int D.44978;
  _Bool D.44975;
  _Bool D.44974;
  _Bool D.44973;
  _Bool D.44970;
  _Bool D.44969;
  int D.44964;
  int D.44961;
  _Bool D.44958;
  _Bool D.44957;
  _Bool D.44956;
  _Bool D.44953;
  _Bool D.44952;
  _Bool D.44951;
  const uint32_t D.44948;
  int D.44945;
  int iftmp.93;
  int D.44938;
  int D.44937;
  int D.44931;
  const int D.44930;
  int D.44929;
  const switch_payload_t D.44928;
  char * const D.44927;
  int remote_codec_rate.92;
  int D.44925;
  const switch_codec_type_t D.44922;
  const int D.44921;
  const struct switch_codec_implementation_t * * D.44920;
  unsigned int D.44919;
  unsigned int i.91;
  uint32_t D.44915;
  int D.44912;
  int D.44909;
  switch_status_t D.44906;
  int D.44901;
  int D.44897;
  const char * D.44893;
  int D.44890;
  const char * D.44889;
  uint32_t D.44885;
  uint32_t D.44884;
  _Bool D.44879;
  _Bool D.44878;
  _Bool D.44877;
  switch_payload_t D.44869;
  int D.44868;
  int D.44863;
  int32_t D.44858;
  int D.44857;
  <unnamed-unsigned:7> D.44856;
  long unsigned int D.44855;
  long unsigned int D.44854;
  int D.44848;
  int D.44839;
  _Bool D.44836;
  _Bool D.44835;
  _Bool D.44834;
  _Bool D.44831;
  _Bool D.44830;
  _Bool D.44829;
  const char * D.44825;
  unsigned int D.44822;
  switch_core_media_NDLB_t D.44821;
  int D.44815;
  int D.44810;
  int D.44805;
  char * D.44800;
  short unsigned int D.44799;
  int D.44795;
  int D.44787;
  int D.44784;
  int D.44781;
  _Bool D.44779;
  _Bool D.44778;
  _Bool D.44777;
  char * D.44773;
  struct switch_channel_t * D.44772;
  const char * err.90;
  switch_status_t D.44768;
  int D.44767;
  int D.44766;
  char * D.44765;
  char * D.44764;
  switch_port_t D.44762;
  char * D.44760;
  int D.39032;
  _Bool D.44758;
  _Bool D.44757;
  _Bool D.44756;
  uint16_t D.44753;
  char * D.44752;
  const char * D.44751;
  struct payload_map_t * D.44750;
  int D.44747;
  const char * D.44746;
  int D.44743;
  const char * D.44742;
  char * D.44741;
  char * D.44740;
  uint32_t D.44737;
  struct switch_core_session_t * other_session.89;
  switch_status_t D.44733;
  uint8_t D.44730;
  uint32_t D.44728;
  uint32_t D.44726;
  uint32_t D.44724;
  uint32_t D.44723;
  int D.44716;
  int D.44707;
  uint32_t D.44706;
  int D.44703;
  const char * D.44702;
  int D.44699;
  long unsigned int D.44697;
  sdp_media_e D.44681;
  _Bool D.44678;
  _Bool D.44677;
  _Bool D.44676;
  sdp_proto_e D.44675;
  int D.44672;
  const char * D.44669;
  sdp_proto_e D.44666;
  const char * D.44665;
  const char * D.44663;
  const char * D.44661;
  int D.44655;
  struct switch_media_bug_t * D.44649;
  int D.44640;
  int D.44639;
  int D.44636;
  int32_t D.44631;
  _Bool D.44626;
  _Bool D.44625;
  _Bool D.44624;
  int D.44621;
  const char * D.44619;
  int D.44616;
  int D.44614;
  uint8_t D.44606;
  struct switch_rtp_t * D.44605;
  int D.44602;
  int D.44598;
  int D.44594;
  const char * D.44590;
  const char * D.44548;
  struct sdp_connection_t * D.44546;
  _Bool D.44544;
  _Bool D.44543;
  _Bool D.44542;
  unsigned char D.44541;
  unsigned char D.44540;
  struct switch_channel_t * D.44530;
  unsigned int D.44529;
  char * D.44526;
  unsigned int D.44523;
  unsigned int D.44522;
  switch_rtp_bug_flag_t D.44521;
  char * D.44518;
  int D.44514;
  int D.44513;
  switch_rtp_bug_flag_t D.44512;
  char * D.44509;
  char * D.44508;
  const char * D.44507;
  struct sdp_origin_t * D.44506;
  int D.44502;
  int D.44498;
  int D.44494;
  int32_t D.44491;
  int32_t D.44490;
  struct switch_channel_t * D.44482;
  struct switch_core_session_t * D.44481;
  int D.44478;
  int D.44473;
  size_t D.44472;
  struct switch_core_media_params_t * D.44471;

<bb 2>:
  # DEBUG match => 0
  # DEBUG best_te => 0
  # DEBUG te => 0
  # DEBUG cng_pt => 0
  # DEBUG ptime => 0
  # DEBUG dptime => 0
  # DEBUG maxptime => 0
  # DEBUG dmaxptime => 0
  # DEBUG sendonly => 0
  # DEBUG recvonly => 0
  # DEBUG greedy => 0
  # DEBUG x => 0
  # DEBUG skip => 0
  channel_162 = switch_core_session_get_channel (session_161(D));
  # DEBUG channel => channel_162
  # DEBUG crypto => 0B
  # DEBUG got_crypto => 0
  # DEBUG got_video_crypto => 0
  # DEBUG got_audio => 0
  # DEBUG got_avp => 0
  # DEBUG got_video_avp => 0
  # DEBUG got_video_savp => 0
  # DEBUG got_savp => 0
  # DEBUG got_udptl => 0
  # DEBUG got_webrtc => 0
  # DEBUG scrooge => 0
  # DEBUG parser => 0B
  # DEBUG reneg => 1
  # DEBUG near_rate => 0
  # DEBUG mimp => 0B
  # DEBUG near_match => 0B
  # DEBUG mmap => 0B
  # DEBUG near_map => 0B
  matches = {};
  near_matches = {};
  # DEBUG codec_ms => 0
  # DEBUG remote_codec_rate => 0
  # DEBUG fmtp_remote_codec_rate => 0
  # DEBUG m_idx => 0
  # DEBUG nm_idx => 0
  if (session_161(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_186 = session_161(D)->media_handle;
  # DEBUG smh => smh_186
  if (smh_186 == 0B)
    goto <bb 494>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#15 => &smh_186->engines
  # DEBUG a_engine => D#15
  # DEBUG D#14 => &smh_186->engines[1]
  # DEBUG v_engine => D#14
  codec_array_190 = &smh_186->codecs;
  # DEBUG codec_array => codec_array_190
  D.44471_191 = smh_186->mparams;
  total_codecs_192 = D.44471_191->num_codecs;
  # DEBUG total_codecs => total_codecs_192
  D.44472_194 = strlen (r_sdp_193(D));
  D.44473_195 = (int) D.44472_194;
  parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
  # DEBUG parser => parser_196
  if (parser_196 == 0B)
    goto <bb 494>;
  else
    goto <bb 6>;

<bb 6>:
  sdp_198 = sdp_session (parser_196);
  # DEBUG sdp => sdp_198
  if (sdp_198 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  sdp_parser_free (parser_196);
  goto <bb 494>;

<bb 8>:
  D.44478_200 = dtls_ok (session_161(D));
  if (D.44478_200 != 0)
    goto <bb 9>;
  else
    goto <bb 23>;

<bb 9>:
  D.44481_201 = smh_186->session;
  D.44482_202 = D.44481_201->channel;
  tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
  # DEBUG tmp => tmp_203
  if (tmp_203 != 0B)
    goto <bb 10>;
  else
    goto <bb 23>;

<bb 10>:
  # DEBUG expr => tmp_203
  if (tmp_203 != 0B)
    goto <bb 11>;
  else
    goto <bb 20>;

<bb 11>:
  D.49676_1551 = strcasecmp (tmp_203, "no");
  if (D.49676_1551 == 0)
    goto <bb 21>;
  else
    goto <bb 12>;

<bb 12>:
  D.49677_1552 = strcasecmp (tmp_203, "off");
  if (D.49677_1552 == 0)
    goto <bb 21>;
  else
    goto <bb 13>;

<bb 13>:
  D.49678_1553 = strcasecmp (tmp_203, "false");
  if (D.49678_1553 == 0)
    goto <bb 21>;
  else
    goto <bb 14>;

<bb 14>:
  D.49679_1554 = strcasecmp (tmp_203, "f");
  if (D.49679_1554 == 0)
    goto <bb 21>;
  else
    goto <bb 15>;

<bb 15>:
  D.49680_1555 = strcasecmp (tmp_203, "disabled");
  if (D.49680_1555 == 0)
    goto <bb 21>;
  else
    goto <bb 16>;

<bb 16>:
  D.49681_1556 = strcasecmp (tmp_203, "inactive");
  if (D.49681_1556 == 0)
    goto <bb 21>;
  else
    goto <bb 17>;

<bb 17>:
  D.49682_1557 = strcasecmp (tmp_203, "disallow");
  if (D.49682_1557 == 0)
    goto <bb 21>;
  else
    goto <bb 18>;

<bb 18>:
  D.49683_1558 = switch_is_number (tmp_203);
  if (D.49683_1558 != 0)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  # DEBUG __nptr => tmp_203
  D.49684_1559 = strtol (tmp_203, 0B, 10);
  if (D.49684_1559 == 0)
    goto <bb 21>;
  else
    goto <bb 20>;

<bb 20>:

<bb 21>:
  # D.49674_1560 = PHI <1(11), 1(12), 1(13), 1(14), 1(15), 1(16), 1(17), 1(19), 0(20)>
  D.49674_1637 = D.49674_1560;
  D.49674_204 = D.49674_1637;
  if (D.49674_204 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.44481_205 = smh_186->session;
  D.44482_206 = D.44481_205->channel;
  switch_channel_clear_flag (D.44482_206, 111);
  D.44481_207 = smh_186->session;
  D.44482_208 = D.44481_207->channel;
  switch_channel_clear_flag (D.44482_208, 109);

<bb 23>:
  switch_core_session_parse_crypto_prefs (session_161(D));
  # DEBUG engine => D#15
  pmap_1458 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;
  # DEBUG pmap => pmap_1458
  goto <bb 25>;

<bb 24>:
  pmap_1459->negotiated = 0;
  pmap_1459->current = 0;
  pmap_1460 = pmap_1459->next;
  # DEBUG pmap => pmap_1460

<bb 25>:
  # pmap_1459 = PHI <pmap_1458(23), pmap_1460(24)>
  # DEBUG pmap => pmap_1459
  if (pmap_1459 != 0B)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  D.47872_1461 = pmap_1459->allocated;
  if (D.47872_1461 != 0)
    goto <bb 24>;
  else
    goto <bb 27>;

<bb 27>:
  # DEBUG engine => D#14
  pmap_1462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
  # DEBUG pmap => pmap_1462
  goto <bb 29>;

<bb 28>:
  pmap_1463->negotiated = 0;
  pmap_1463->current = 0;
  pmap_1464 = pmap_1463->next;
  # DEBUG pmap => pmap_1464

<bb 29>:
  # pmap_1463 = PHI <pmap_1462(27), pmap_1464(28)>
  # DEBUG pmap => pmap_1463
  if (pmap_1463 != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  D.47875_1465 = pmap_1463->allocated;
  if (D.47875_1465 != 0)
    goto <bb 28>;
  else
    goto <bb 31>;

<bb 31>:
  if (proceed_209(D) != 0B)
    goto <bb 32>;
  else
    goto <bb 33>;

<bb 32>:
  *proceed_209(D) = 1;

<bb 33>:
  D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
  greedy_211 = D.44490_210 != 0;
  # DEBUG greedy => greedy_211
  D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
  scrooge_213 = D.44491_212 != 0;
  # DEBUG scrooge => scrooge_213
  val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
  # DEBUG val => val_214
  if (val_214 != 0B)
    goto <bb 34>;
  else
    goto <bb 38>;

<bb 34>:
  D.44494_215 = strcasecmp (val_214, "generous");
  if (D.44494_215 == 0)
    goto <bb 38>;
  else
    goto <bb 35>;

<bb 35>:
  D.44498_218 = strcasecmp (val_214, "greedy");
  if (D.44498_218 == 0)
    goto <bb 38>;
  else
    goto <bb 36>;

<bb 36>:
  D.44502_221 = strcasecmp (val_214, "scrooge");
  if (D.44502_221 == 0)
    goto <bb 38>;
  else
    goto <bb 37>;

<bb 37>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);

<bb 38>:
  # greedy_47 = PHI <greedy_211(33), 0(34), 1(35), 1(36), greedy_211(37)>
  # scrooge_80 = PHI <scrooge_213(33), 0(34), 0(35), 1(36), scrooge_213(37)>
  # DEBUG scrooge => scrooge_80
  # DEBUG greedy => greedy_47
  D.44506_224 = sdp_198->sdp_origin;
  D.44507_225 = D.44506_224->o_username;
  D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
  smh_186->origin = D.44508_226;
  D.44509_227 = smh_186->origin;
  if (D.44509_227 != 0B)
    goto <bb 39>;
  else
    goto <bb 45>;

<bb 39>:
  D.44471_228 = smh_186->mparams;
  D.44512_229 = D.44471_228->auto_rtp_bugs;
  D.44513_230 = (int) D.44512_229;
  D.44514_231 = D.44513_230 & 1;
  if (D.44514_231 != 0)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 40>:
  D.44509_233 = smh_186->origin;
  D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");
  if (D.44518_234 != 0B)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
  D.44522_236 = D.44521_235 | 1;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");

<bb 42>:
  D.44471_237 = smh_186->mparams;
  D.44512_238 = D.44471_237->auto_rtp_bugs;
  D.44523_239 = D.44512_238 & 2;
  if (D.44523_239 != 0)
    goto <bb 43>;
  else
    goto <bb 45>;

<bb 43>:
  D.44509_240 = smh_186->origin;
  D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
  if (D.44526_241 != 0B)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
  D.44529_243 = D.44521_242 | 2;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");

<bb 45>:
  D.44530_244 = session_161(D)->channel;
  val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
  # DEBUG val => val_245
  if (val_245 != 0B)
    goto <bb 46>;
  else
    goto <bb 59>;

<bb 46>:
  # DEBUG expr => val_245
  if (val_245 != 0B)
    goto <bb 47>;
  else
    goto <bb 56>;

<bb 47>:
  D.49688_1561 = strcasecmp (val_245, "yes");
  if (D.49688_1561 == 0)
    goto <bb 57>;
  else
    goto <bb 48>;

<bb 48>:
  D.49689_1562 = strcasecmp (val_245, "on");
  if (D.49689_1562 == 0)
    goto <bb 57>;
  else
    goto <bb 49>;

<bb 49>:
  D.49690_1563 = strcasecmp (val_245, "true");
  if (D.49690_1563 == 0)
    goto <bb 57>;
  else
    goto <bb 50>;

<bb 50>:
  D.49691_1564 = strcasecmp (val_245, "t");
  if (D.49691_1564 == 0)
    goto <bb 57>;
  else
    goto <bb 51>;

<bb 51>:
  D.49692_1565 = strcasecmp (val_245, "enabled");
  if (D.49692_1565 == 0)
    goto <bb 57>;
  else
    goto <bb 52>;

<bb 52>:
  D.49693_1566 = strcasecmp (val_245, "active");
  if (D.49693_1566 == 0)
    goto <bb 57>;
  else
    goto <bb 53>;

<bb 53>:
  D.49694_1567 = strcasecmp (val_245, "allow");
  if (D.49694_1567 == 0)
    goto <bb 57>;
  else
    goto <bb 54>;

<bb 54>:
  D.49695_1568 = switch_is_number (val_245);
  if (D.49695_1568 != 0)
    goto <bb 55>;
  else
    goto <bb 56>;

<bb 55>:
  # DEBUG __nptr => val_245
  D.49696_1569 = strtol (val_245, 0B, 10);
  if (D.49696_1569 != 0)
    goto <bb 57>;
  else
    goto <bb 56>;

<bb 56>:

<bb 57>:
  # D.49686_1570 = PHI <1(47), 1(48), 1(49), 1(50), 1(51), 1(52), 1(53), 1(55), 0(56)>
  D.49686_1640 = D.49686_1570;
  D.49686_246 = D.49686_1640;
  if (D.49686_246 != 0)
    goto <bb 58>;
  else
    goto <bb 59>;

<bb 58>:
  D.44530_247 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_247, 93, 1);

<bb 59>:
  m_248 = sdp_198->sdp_media;
  # DEBUG m => m_248
  if (m_248 != 0B)
    goto <bb 60>;
  else
    goto <bb 65>;

<bb 60>:
  D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
  D.44541_250 = D.44540_249 & 6;
  D.44542_251 = D.44541_250 == 2;
  D.44543_252 = D.44541_250 == 0;
  D.44544_253 = D.44542_251 || D.44543_252;
  if (D.44544_253 != 0)
    goto <bb 64>;
  else
    goto <bb 61>;

<bb 61>:
  D.44546_254 = m_248->m_connections;
  if (D.44546_254 != 0B)
    goto <bb 62>;
  else
    goto <bb 65>;

<bb 62>:
  D.44546_255 = m_248->m_connections;
  D.44548_256 = D.44546_255->c_address;
  if (D.44548_256 != 0B)
    goto <bb 63>;
  else
    goto <bb 65>;

<bb 63>:
  # DEBUG __s2_len => 7
  D.44546_298 = m_248->m_connections;
  D.44548_299 = D.44546_298->c_address;
  __result_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");
  if (__result_300 == 0)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  # DEBUG sendonly => 2

<bb 65>:
  # sendonly_42 = PHI <0(59), 0(61), 0(62), 0(63), 2(64)>
  # DEBUG sendonly => sendonly_42
  attr_303 = sdp_198->sdp_attributes;
  # DEBUG attr => attr_303
  goto <bb 85>;

<bb 66>:
  D.44590_304 = attr_29->a_name;
  # DEBUG s => D.44590_304
  if (D.44590_304 == 0B)
    goto <bb 69>;
  else
    goto <bb 67>;

<bb 67>:
  D.47878_1466 = *D.44590_304;
  if (D.47878_1466 == 0)
    goto <bb 69>;
  else
    goto <bb 68>;

<bb 68>:

<bb 69>:
  # D.47877_1467 = PHI <1(66), 1(67), 0(68)>
  if (D.47877_1467 != 0)
    goto <bb 84>;
  else
    goto <bb 70>;

<bb 70>:
  D.44590_306 = attr_29->a_name;
  D.44594_307 = strcasecmp (D.44590_306, "sendonly");
  if (D.44594_307 == 0)
    goto <bb 71>;
  else
    goto <bb 72>;

<bb 71>:
  # DEBUG sendonly => 1
  D.44530_309 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
  goto <bb 84>;

<bb 72>:
  D.44590_310 = attr_29->a_name;
  D.44598_311 = strcasecmp (D.44590_310, "inactive");
  if (D.44598_311 == 0)
    goto <bb 73>;
  else
    goto <bb 74>;

<bb 73>:
  # DEBUG sendonly => 1
  D.44530_313 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
  goto <bb 84>;

<bb 74>:
  D.44590_314 = attr_29->a_name;
  D.44602_315 = strcasecmp (D.44590_314, "recvonly");
  if (D.44602_315 == 0)
    goto <bb 75>;
  else
    goto <bb 78>;

<bb 75>:
  D.44530_316 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
  # DEBUG recvonly => 1
  D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44606_319 = switch_rtp_ready (D.44605_318);
  if (D.44606_319 != 0)
    goto <bb 76>;
  else
    goto <bb 77>;

<bb 76>:
  D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  switch_rtp_set_max_missed_packets (D.44605_320, 0);
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;
  goto <bb 84>;

<bb 77>:
  D.44530_321 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
  D.44530_322 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
  goto <bb 84>;

<bb 78>:
  if (sendonly_44 <= 1)
    goto <bb 79>;
  else
    goto <bb 80>;

<bb 79>:
  D.44590_323 = attr_29->a_name;
  D.44614_324 = strcasecmp (D.44590_323, "sendrecv");
  if (D.44614_324 == 0)
    goto <bb 84>;
  else
    goto <bb 80>;

<bb 80>:
  D.44590_326 = attr_29->a_name;
  D.44616_327 = strcasecmp (D.44590_326, "ptime");
  if (D.44616_327 == 0)
    goto <bb 81>;
  else
    goto <bb 82>;

<bb 81>:
  D.44619_328 = attr_29->a_value;
  # DEBUG __nptr => D.44619_328
  dptime_1468 = strtol (D.44619_328, 0B, 10);
  # DEBUG dptime => NULL
  goto <bb 84>;

<bb 82>:
  D.44590_330 = attr_29->a_name;
  D.44621_331 = strcasecmp (D.44590_330, "maxptime");
  if (D.44621_331 == 0)
    goto <bb 83>;
  else
    goto <bb 84>;

<bb 83>:
  D.44619_332 = attr_29->a_value;
  # DEBUG __nptr => D.44619_332
  dmaxptime_1469 = strtol (D.44619_332, 0B, 10);
  # DEBUG dmaxptime => NULL

<bb 84>:
  # dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1468(81), dptime_37(82), dptime_37(83), dptime_37(76)>
  # dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1469(83), dmaxptime_41(76)>
  # sendonly_43 = PHI <sendonly_44(69), 1(71), 1(73), sendonly_44(77), 0(79), sendonly_44(81), sendonly_44(82), sendonly_44(83), sendonly_44(76)>
  # recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
  # DEBUG recvonly => recvonly_45
  # DEBUG sendonly => sendonly_43
  # DEBUG dmaxptime => dmaxptime_40
  # DEBUG dptime => dptime_36
  attr_334 = attr_29->a_next;
  # DEBUG attr => attr_334

<bb 85>:
  # attr_29 = PHI <attr_303(65), attr_334(84)>
  # dptime_37 = PHI <0(65), dptime_36(84)>
  # dmaxptime_41 = PHI <0(65), dmaxptime_40(84)>
  # sendonly_44 = PHI <sendonly_42(65), sendonly_43(84)>
  # recvonly_46 = PHI <0(65), recvonly_45(84)>
  # DEBUG recvonly => recvonly_46
  # DEBUG sendonly => sendonly_44
  # DEBUG dmaxptime => dmaxptime_41
  # DEBUG dptime => dptime_37
  # DEBUG attr => attr_29
  if (attr_29 != 0B)
    goto <bb 66>;
  else
    goto <bb 86>;

<bb 86>:
  D.44624_335 = sendonly_44 != 1;
  D.44625_336 = recvonly_46 != 1;
  D.44626_337 = D.44624_335 && D.44625_336;
  if (D.44626_337 != 0)
    goto <bb 87>;
  else
    goto <bb 88>;

<bb 87>:
  D.44530_338 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);

<bb 88>:
  D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
  if (D.44631_339 == 0)
    goto <bb 89>;
  else
    goto <bb 106>;

<bb 89>:
  D.44530_340 = session_161(D)->channel;
  val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
  # DEBUG val => val_341
  if (val_341 == 0B)
    goto <bb 102>;
  else
    goto <bb 90>;

<bb 90>:
  # DEBUG expr => val_341
  if (val_341 != 0B)
    goto <bb 91>;
  else
    goto <bb 100>;

<bb 91>:
  D.49700_1571 = strcasecmp (val_341, "yes");
  if (D.49700_1571 == 0)
    goto <bb 101>;
  else
    goto <bb 92>;

<bb 92>:
  D.49701_1572 = strcasecmp (val_341, "on");
  if (D.49701_1572 == 0)
    goto <bb 101>;
  else
    goto <bb 93>;

<bb 93>:
  D.49702_1573 = strcasecmp (val_341, "true");
  if (D.49702_1573 == 0)
    goto <bb 101>;
  else
    goto <bb 94>;

<bb 94>:
  D.49703_1574 = strcasecmp (val_341, "t");
  if (D.49703_1574 == 0)
    goto <bb 101>;
  else
    goto <bb 95>;

<bb 95>:
  D.49704_1575 = strcasecmp (val_341, "enabled");
  if (D.49704_1575 == 0)
    goto <bb 101>;
  else
    goto <bb 96>;

<bb 96>:
  D.49705_1576 = strcasecmp (val_341, "active");
  if (D.49705_1576 == 0)
    goto <bb 101>;
  else
    goto <bb 97>;

<bb 97>:
  D.49706_1577 = strcasecmp (val_341, "allow");
  if (D.49706_1577 == 0)
    goto <bb 101>;
  else
    goto <bb 98>;

<bb 98>:
  D.49707_1578 = switch_is_number (val_341);
  if (D.49707_1578 != 0)
    goto <bb 99>;
  else
    goto <bb 100>;

<bb 99>:
  # DEBUG __nptr => val_341
  D.49708_1579 = strtol (val_341, 0B, 10);
  if (D.49708_1579 != 0)
    goto <bb 101>;
  else
    goto <bb 100>;

<bb 100>:

<bb 101>:
  # D.49698_1580 = PHI <1(91), 1(92), 1(93), 1(94), 1(95), 1(96), 1(97), 1(99), 0(100)>
  D.49698_1643 = D.49698_1580;
  D.49698_342 = D.49698_1643;
  if (D.49698_342 == 0)
    goto <bb 102>;
  else
    goto <bb 106>;

<bb 102>:
  D.44471_343 = smh_186->mparams;
  D.44636_344 = D.44471_343->hold_laps;
  if (D.44636_344 == 0)
    goto <bb 103>;
  else
    goto <bb 106>;

<bb 103>:
  D.44471_345 = smh_186->mparams;
  D.44636_346 = D.44471_345->hold_laps;
  D.44639_347 = D.44636_346 + 1;
  D.44471_345->hold_laps = D.44639_347;
  D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);
  if (D.44640_348 != 0)
    goto <bb 104>;
  else
    goto <bb 106>;

<bb 104>:
  reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
  # DEBUG reneg => reneg_349
  D.44530_350 = session_161(D)->channel;
  val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
  # DEBUG val => val_351
  if (val_351 != 0B)
    goto <bb 105>;
  else
    goto <bb 106>;

<bb 105>:
  reneg_352 = switch_true (val_351);
  # DEBUG reneg => reneg_352

<bb 106>:
  # reneg_81 = PHI <1(88), 1(101), 1(102), 1(103), reneg_349(104), reneg_352(105)>
  # DEBUG reneg => reneg_81
  if (reneg_81 != 0)
    goto <bb 107>;
  else
    goto <bb 120>;

<bb 107>:
  reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
  # DEBUG reneg => reneg_353
  D.44530_354 = session_161(D)->channel;
  val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
  # DEBUG val => val_355
  if (val_355 != 0B)
    goto <bb 108>;
  else
    goto <bb 120>;

<bb 108>:
  # DEBUG expr => val_355
  if (val_355 != 0B)
    goto <bb 109>;
  else
    goto <bb 118>;

<bb 109>:
  D.49712_1581 = strcasecmp (val_355, "yes");
  if (D.49712_1581 == 0)
    goto <bb 119>;
  else
    goto <bb 110>;

<bb 110>:
  D.49713_1582 = strcasecmp (val_355, "on");
  if (D.49713_1582 == 0)
    goto <bb 119>;
  else
    goto <bb 111>;

<bb 111>:
  D.49714_1583 = strcasecmp (val_355, "true");
  if (D.49714_1583 == 0)
    goto <bb 119>;
  else
    goto <bb 112>;

<bb 112>:
  D.49715_1584 = strcasecmp (val_355, "t");
  if (D.49715_1584 == 0)
    goto <bb 119>;
  else
    goto <bb 113>;

<bb 113>:
  D.49716_1585 = strcasecmp (val_355, "enabled");
  if (D.49716_1585 == 0)
    goto <bb 119>;
  else
    goto <bb 114>;

<bb 114>:
  D.49717_1586 = strcasecmp (val_355, "active");
  if (D.49717_1586 == 0)
    goto <bb 119>;
  else
    goto <bb 115>;

<bb 115>:
  D.49718_1587 = strcasecmp (val_355, "allow");
  if (D.49718_1587 == 0)
    goto <bb 119>;
  else
    goto <bb 116>;

<bb 116>:
  D.49719_1588 = switch_is_number (val_355);
  if (D.49719_1588 != 0)
    goto <bb 117>;
  else
    goto <bb 118>;

<bb 117>:
  # DEBUG __nptr => val_355
  D.49720_1589 = strtol (val_355, 0B, 10);
  if (D.49720_1589 != 0)
    goto <bb 119>;
  else
    goto <bb 118>;

<bb 118>:

<bb 119>:
  # reneg_1590 = PHI <1(109), 1(110), 1(111), 1(112), 1(113), 1(114), 1(115), 1(117), 0(118)>
  reneg_1646 = reneg_1590;
  reneg_356 = reneg_1646;
  # DEBUG reneg => NULL

<bb 120>:
  # reneg_82 = PHI <reneg_81(106), reneg_353(107), reneg_356(119)>
  # DEBUG reneg => reneg_82
  D.44649_357 = session_161(D)->bugs;
  if (D.44649_357 != 0B)
    goto <bb 121>;
  else
    goto <bb 122>;

<bb 121>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
  # DEBUG reneg => 0

<bb 122>:
  # reneg_83 = PHI <reneg_82(120), 0(121)>
  # DEBUG reneg => reneg_83
  if (reneg_83 == 0)
    goto <bb 123>;
  else
    goto <bb 125>;

<bb 123>:
  D.44655_359 = smh_186->num_negotiated_codecs;
  if (D.44655_359 != 0)
    goto <bb 124>;
  else
    goto <bb 125>;

<bb 124>:
  codec_array_360 = &smh_186->negotiated_codecs;
  # DEBUG codec_array => codec_array_360
  total_codecs_361 = smh_186->num_negotiated_codecs;
  # DEBUG total_codecs => total_codecs_361
  goto <bb 127>;

<bb 125>:
  if (reneg_83 != 0)
    goto <bb 126>;
  else
    goto <bb 127>;

<bb 126>:
  D.44471_362 = smh_186->mparams;
  D.44471_362->num_codecs = 0;
  switch_core_media_prepare_codecs (session_161(D), 0);
  codec_array_363 = &smh_186->codecs;
  # DEBUG codec_array => codec_array_363
  D.44471_364 = smh_186->mparams;
  total_codecs_365 = D.44471_364->num_codecs;
  # DEBUG total_codecs => total_codecs_365

<bb 127>:
  # codec_array_84 = PHI <codec_array_360(124), codec_array_190(125), codec_array_363(126)>
  # total_codecs_85 = PHI <total_codecs_361(124), total_codecs_192(125), total_codecs_365(126)>
  # DEBUG total_codecs => total_codecs_85
  # DEBUG codec_array => codec_array_84
  D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
  if (D.44661_366 != 0B)
    goto <bb 130>;
  else
    goto <bb 128>;

<bb 128>:
  D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
  if (D.44663_367 != 0B)
    goto <bb 130>;
  else
    goto <bb 129>;

<bb 129>:
  D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
  if (D.44665_368 != 0B)
    goto <bb 130>;
  else
    goto <bb 131>;

<bb 130>:
  D.44530_369 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);

<bb 131>:
  switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
  switch_core_media_pass_zrtp_hash (session_161(D));
  check_ice (smh_186, 0, sdp_198, 0B);
  check_ice (smh_186, 1, sdp_198, 0B);
  m_370 = sdp_198->sdp_media;
  # DEBUG m => m_370
  goto <bb 490>;

<bb 132>:
  # DEBUG ptime => dptime_37
  # DEBUG maxptime => dmaxptime_41
  D.44666_373 = m_28->m_proto;
  if (D.44666_373 == 261)
    goto <bb 133>;
  else
    goto <bb 134>;

<bb 133>:
  got_webrtc_374 = got_webrtc_79 + 1;
  # DEBUG got_webrtc => got_webrtc_374
  switch_core_session_set_ice (session_161(D));

<bb 134>:
  # got_webrtc_78 = PHI <got_webrtc_79(132), got_webrtc_374(133)>
  # DEBUG got_webrtc => got_webrtc_78
  D.44669_375 = m_28->m_proto_name;
  if (D.44669_375 != 0B)
    goto <bb 135>;
  else
    goto <bb 137>;

<bb 135>:
  D.44669_376 = m_28->m_proto_name;
  D.44672_377 = strcasecmp (D.44669_376, "UDP/TLS/RTP/SAVPF");
  if (D.44672_377 == 0)
    goto <bb 136>;
  else
    goto <bb 137>;

<bb 136>:
  D.44530_378 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_378, 107, 1);

<bb 137>:
  D.44675_379 = m_28->m_proto;
  D.44676_380 = D.44675_379 == 257;
  D.44677_381 = D.44675_379 == 261;
  D.44678_382 = D.44676_380 || D.44677_381;
  if (D.44678_382 != 0)
    goto <bb 138>;
  else
    goto <bb 140>;

<bb 138>:
  D.44681_383 = m_28->m_type;
  if (D.44681_383 == 2)
    goto <bb 139>;
  else
    goto <bb 145>;

<bb 139>:
  got_savp_384 = got_savp_75 + 1;
  # DEBUG got_savp => got_savp_384
  goto <bb 145>;

<bb 140>:
  D.44666_386 = m_28->m_proto;
  if (D.44666_386 == 256)
    goto <bb 141>;
  else
    goto <bb 143>;

<bb 141>:
  D.44681_387 = m_28->m_type;
  if (D.44681_387 == 2)
    goto <bb 142>;
  else
    goto <bb 145>;

<bb 142>:
  got_avp_388 = got_avp_69 + 1;
  # DEBUG got_avp => got_avp_388
  goto <bb 145>;

<bb 143>:
  D.44666_390 = m_28->m_proto;
  if (D.44666_390 == 258)
    goto <bb 144>;
  else
    goto <bb 145>;

<bb 144>:
  got_udptl_391 = got_udptl_77 + 1;
  # DEBUG got_udptl => got_udptl_391

<bb 145>:
  # got_avp_68 = PHI <got_avp_69(138), got_avp_69(141), got_avp_69(143), got_avp_69(144), got_avp_69(139), got_avp_388(142)>
  # got_savp_74 = PHI <got_savp_75(138), got_savp_75(141), got_savp_75(143), got_savp_75(144), got_savp_384(139), got_savp_75(142)>
  # got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>
  # DEBUG got_udptl => got_udptl_76
  # DEBUG got_savp => got_savp_74
  # DEBUG got_video_savp => NULL
  # DEBUG got_video_avp => NULL
  # DEBUG got_avp => got_avp_68
  if (got_udptl_76 != 0)
    goto <bb 146>;
  else
    goto <bb 179>;

<bb 146>:
  D.44681_392 = m_28->m_type;
  if (D.44681_392 == 8)
    goto <bb 147>;
  else
    goto <bb 179>;

<bb 147>:
  D.44697_393 = m_28->m_port;
  if (D.44697_393 != 0)
    goto <bb 148>;
  else
    goto <bb 179>;

<bb 148>:
  t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
  # DEBUG t38_options => t38_options_394
  D.44530_395 = session_161(D)->channel;
  D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
  if (D.44699_396 != 0)
    goto <bb 491> (done);
  else
    goto <bb 149>;

<bb 149>:
  D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
  D.44703_399 = switch_true (D.44702_398);
  if (D.44703_399 != 0)
    goto <bb 150>;
  else
    goto <bb 151>;

<bb 150>:
  D.44530_400 = session_161(D)->channel;
  switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
  # DEBUG match => 0
  goto <bb 491> (done);

<bb 151>:
  var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
  # DEBUG var => var_402
  D.44481_403 = smh_186->session;
  D.44482_404 = D.44481_403->channel;
  D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
  pass_406 = (int) D.44706_405;
  # DEBUG pass => pass_406
  D.44530_407 = session_161(D)->channel;
  D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
  if (D.44707_408 != 0)
    goto <bb 152>;
  else
    goto <bb 154>;

<bb 152>:
  if (proceed_209(D) != 0B)
    goto <bb 153>;
  else
    goto <bb 154>;

<bb 153>:
  *proceed_209(D) = 0;

<bb 154>:
  if (var_402 != 0B)
    goto <bb 155>;
  else
    goto <bb 158>;

<bb 155>:
  pass_409 = switch_true (var_402);
  # DEBUG pass => pass_409
  if (pass_409 == 0)
    goto <bb 156>;
  else
    goto <bb 158>;

<bb 156>:
  D.44716_410 = strcasecmp (var_402, "once");
  if (D.44716_410 == 0)
    goto <bb 157>;
  else
    goto <bb 158>;

<bb 157>:
  # DEBUG pass => 2

<bb 158>:
  # pass_126 = PHI <pass_406(154), pass_409(155), pass_409(156), 2(157)>
  # DEBUG pass => pass_126
  if (pass_126 == 2)
    goto <bb 159>;
  else
    goto <bb 160>;

<bb 159>:
  D.44481_412 = smh_186->session;
  D.44482_413 = D.44481_412->channel;
  D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
  if (D.44723_414 != 0)
    goto <bb 165>;
  else
    goto <bb 160>;

<bb 160>:
  D.44530_415 = session_161(D)->channel;
  D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
  if (D.44724_416 == 0)
    goto <bb 165>;
  else
    goto <bb 161>;

<bb 161>:
  D.44530_417 = session_161(D)->channel;
  D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
  if (D.44726_418 != 0)
    goto <bb 165>;
  else
    goto <bb 162>;

<bb 162>:
  D.44530_419 = session_161(D)->channel;
  D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
  if (D.44728_420 != 0)
    goto <bb 165>;
  else
    goto <bb 163>;

<bb 163>:
  D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44730_422 = switch_rtp_ready (D.44605_421);
  if (D.44730_422 == 0)
    goto <bb 164>;
  else
    goto <bb 165>;

<bb 164>:

<bb 165>:
  # pass_127 = PHI <pass_126(163), 0(160), 0(159), 0(164), 0(162), 0(161)>
  # DEBUG pass => pass_127
  if (pass_127 != 0)
    goto <bb 166>;
  else
    goto <bb 491> (done);

<bb 166>:
  D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
  if (D.44733_424 == 0)
    goto <bb 167>;
  else
    goto <bb 491> (done);

<bb 167>:
  other_session.89_425 = other_session;
  other_channel_426 = switch_core_session_get_channel (other_session.89_425);
  # DEBUG other_channel => other_channel_426
  D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  remote_host_428 = switch_rtp_get_remote_host (D.44605_427);
  # DEBUG remote_host => remote_host_428
  D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  remote_port_430 = switch_rtp_get_remote_port (D.44605_429);
  # DEBUG remote_port => remote_port_430
  tmp = "";
  D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
  if (D.44737_431 == 0)
    goto <bb 168>;
  else
    goto <bb 169>;

<bb 168>:
  D.44530_432 = session_161(D)->channel;
  D.44740_433 = switch_channel_get_name (D.44530_432);
  D.44741_434 = switch_channel_get_name (other_channel_426);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
  other_session.89_435 = other_session;
  switch_core_session_rwunlock (other_session.89_435);
  # DEBUG pass => 0
  # DEBUG match => 0
  goto <bb 491> (done);

<bb 169>:
  D.44530_438 = session_161(D)->channel;
  D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
  D.44743_440 = switch_true (D.44742_439);
  if (D.44743_440 != 0)
    goto <bb 170>;
  else
    goto <bb 172>;

<bb 170>:
  D.44530_441 = session_161(D)->channel;
  D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
  D.44747_443 = switch_true (D.44746_442);
  if (D.44747_443 != 0)
    goto <bb 171>;
  else
    goto <bb 172>;

<bb 171>:
  switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);

<bb 172>:
  D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44751_445 = t38_options_394->remote_ip;
  D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
  D.44750_444->remote_sdp_ip = D.44752_446;
  D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44753_448 = t38_options_394->remote_port;
  D.44750_447->remote_sdp_port = D.44753_448;
  D.44756_449 = remote_host_428 != 0B;
  D.44757_450 = remote_port_430 != 0;
  D.44758_451 = D.44756_449 && D.44757_450;
  if (D.44758_451 != 0)
    goto <bb 173>;
  else
    goto <bb 176>;

<bb 173>:
  D.44750_452 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_453 = D.44750_452->remote_sdp_ip;
  D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
  if (D.39032_454 == 0)
    goto <bb 174>;
  else
    goto <bb 176>;

<bb 174>:
  D.44750_455 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44762_456 = D.44750_455->remote_sdp_port;
  if (D.44762_456 == remote_port_430)
    goto <bb 175>;
  else
    goto <bb 176>;

<bb 175>:
  D.44530_457 = session_161(D)->channel;
  D.44764_458 = switch_channel_get_name (D.44530_457);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
  goto <bb 178>;

<bb 176>:
  err = 0B;
  D.44530_459 = session_161(D)->channel;
  D.44765_460 = switch_channel_get_name (D.44530_459);
  D.44766_461 = (int) remote_port_430;
  D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_463 = D.44750_462->remote_sdp_ip;
  D.44750_464 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44762_465 = D.44750_464->remote_sdp_port;
  D.44767_466 = (int) D.44762_465;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
  D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44762_468 = D.44750_467->remote_sdp_port;
  D.44767_469 = (int) D.44762_468;
  switch_snprintf (&tmp, 32, "%d", D.44767_469);
  D.44530_470 = session_161(D)->channel;
  D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_472 = D.44750_471->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
  D.44530_473 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
  D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_476 = D.44750_475->remote_sdp_ip;
  D.44750_477 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44762_478 = D.44750_477->remote_sdp_port;
  D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
  if (D.44768_479 != 0)
    goto <bb 177>;
  else
    goto <bb 178>;

<bb 177>:
  err.90_480 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
  switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);

<bb 178>:
  other_session.89_481 = other_session;
  switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
  D.44481_482 = smh_186->session;
  D.44482_483 = D.44481_482->channel;
  switch_channel_set_flag_value (D.44482_483, 101, 1);
  other_session.89_484 = other_session;
  D.44772_485 = other_session.89_484->channel;
  switch_channel_set_flag_value (D.44772_485, 101, 1);
  other_session.89_486 = other_session;
  msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
  # DEBUG msg => msg_487
  msg_487->message_id = 21;
  msg_487->from = "src/switch_core_media.c";
  other_session.89_488 = other_session;
  D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
  msg_487->string_arg = D.44773_489;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
  other_session.89_490 = other_session;
  switch_core_session_queue_message (other_session.89_490, msg_487);
  other_session.89_491 = other_session;
  switch_core_session_rwunlock (other_session.89_491);
  goto <bb 491> (done);

<bb 179>:
  D.44681_493 = m_28->m_type;
  if (D.44681_493 == 2)
    goto <bb 180>;
  else
    goto <bb 385>;

<bb 180>:
  D.44697_494 = m_28->m_port;
  D.44777_495 = D.44697_494 != 0;
  D.44778_496 = got_audio_67 == 0;
  D.44779_497 = D.44777_495 && D.44778_496;
  if (D.44779_497 != 0)
    goto <bb 181>;
  else
    goto <bb 385>;

<bb 181>:
  D.44781_498 = switch_rtp_has_dtls ();
  if (D.44781_498 != 0)
    goto <bb 182>;
  else
    goto <bb 192>;

<bb 182>:
  D.44784_499 = dtls_ok (session_161(D));
  if (D.44784_499 != 0)
    goto <bb 183>;
  else
    goto <bb 192>;

<bb 183>:
  attr_500 = m_28->m_attributes;
  # DEBUG attr => attr_500
  goto <bb 191>;

<bb 184>:
  D.44590_501 = attr_30->a_name;
  D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
  if (D.44787_502 == 0)
    goto <bb 185>;
  else
    goto <bb 190>;

<bb 185>:
  D.44619_503 = attr_30->a_value;
  # DEBUG s => D.44619_503
  if (D.44619_503 == 0B)
    goto <bb 188>;
  else
    goto <bb 186>;

<bb 186>:
  D.47888_1470 = *D.44619_503;
  if (D.47888_1470 == 0)
    goto <bb 188>;
  else
    goto <bb 187>;

<bb 187>:

<bb 188>:
  # D.47887_1471 = PHI <1(185), 1(186), 0(187)>
  if (D.47887_1471 == 0)
    goto <bb 189>;
  else
    goto <bb 190>;

<bb 189>:
  # DEBUG got_crypto => 1

<bb 190>:
  # got_crypto_50 = PHI <got_crypto_51(184), got_crypto_51(188), 1(189)>
  # DEBUG got_crypto => got_crypto_50
  attr_506 = attr_30->a_next;
  # DEBUG attr => attr_506

<bb 191>:
  # attr_30 = PHI <attr_500(183), attr_506(190)>
  # got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>
  # DEBUG got_crypto => got_crypto_51
  # DEBUG attr => attr_30
  if (attr_30 != 0B)
    goto <bb 184>;
  else
    goto <bb 192>;

<bb 192>:
  # got_crypto_52 = PHI <got_crypto_56(181), got_crypto_56(182), got_crypto_51(191)>
  # DEBUG got_crypto => got_crypto_52
  attr_507 = m_28->m_attributes;
  # DEBUG attr => attr_507
  goto <bb 226>;

<bb 193>:
  D.44590_508 = attr_31->a_name;
  D.44795_509 = strcasecmp (D.44590_508, "rtcp");
  if (D.44795_509 == 0)
    goto <bb 194>;
  else
    goto <bb 197>;

<bb 194>:
  D.44619_510 = attr_31->a_value;
  if (D.44619_510 != 0B)
    goto <bb 195>;
  else
    goto <bb 197>;

<bb 195>:
  D.44530_511 = session_161(D)->channel;
  D.44619_512 = attr_31->a_value;
  switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);
  D.44619_513 = attr_31->a_value;
  # DEBUG __nptr => D.44619_513
  D.47891_1472 = strtol (D.44619_513, 0B, 10);
  D.44799_515 = (short unsigned int) D.47891_1472;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;
  D.44471_516 = smh_186->mparams;
  D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
  if (D.44800_517 == 0B)
    goto <bb 196>;
  else
    goto <bb 225>;

<bb 196>:
  D.44471_518 = smh_186->mparams;
  D.44471_518->rtcp_audio_interval_msec = "5000";
  goto <bb 225>;

<bb 197>:
  D.44590_519 = attr_31->a_name;
  D.44805_520 = strcasecmp (D.44590_519, "ptime");
  if (D.44805_520 == 0)
    goto <bb 198>;
  else
    goto <bb 200>;

<bb 198>:
  D.44619_521 = attr_31->a_value;
  if (D.44619_521 != 0B)
    goto <bb 199>;
  else
    goto <bb 200>;

<bb 199>:
  D.44619_522 = attr_31->a_value;
  # DEBUG __nptr => D.44619_522
  ptime_1473 = strtol (D.44619_522, 0B, 10);
  # DEBUG ptime => NULL
  goto <bb 225>;

<bb 200>:
  D.44590_524 = attr_31->a_name;
  D.44810_525 = strcasecmp (D.44590_524, "maxptime");
  if (D.44810_525 == 0)
    goto <bb 201>;
  else
    goto <bb 203>;

<bb 201>:
  D.44619_526 = attr_31->a_value;
  if (D.44619_526 != 0B)
    goto <bb 202>;
  else
    goto <bb 203>;

<bb 202>:
  D.44619_527 = attr_31->a_value;
  # DEBUG __nptr => D.44619_527
  maxptime_1474 = strtol (D.44619_527, 0B, 10);
  # DEBUG maxptime => NULL
  goto <bb 225>;

<bb 203>:
  if (got_crypto_54 <= 0)
    goto <bb 204>;
  else
    goto <bb 225>;

<bb 204>:
  D.44590_529 = attr_31->a_name;
  D.44815_530 = strcasecmp (D.44590_529, "crypto");
  if (D.44815_530 == 0)
    goto <bb 205>;
  else
    goto <bb 225>;

<bb 205>:
  D.44619_531 = attr_31->a_value;
  # DEBUG s => D.44619_531
  if (D.44619_531 == 0B)
    goto <bb 208>;
  else
    goto <bb 206>;

<bb 206>:
  D.47901_1475 = *D.44619_531;
  if (D.47901_1475 == 0)
    goto <bb 208>;
  else
    goto <bb 207>;

<bb 207>:

<bb 208>:
  # D.47900_1476 = PHI <1(205), 1(206), 0(207)>
  if (D.47900_1476 == 0)
    goto <bb 209>;
  else
    goto <bb 225>;

<bb 209>:
  D.44471_533 = smh_186->mparams;
  D.44821_534 = D.44471_533->ndlb;
  D.44822_535 = D.44821_534 & 4;
  if (D.44822_535 == 0)
    goto <bb 210>;
  else
    goto <bb 224>;

<bb 210>:
  D.44530_536 = session_161(D)->channel;
  D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
  # DEBUG expr => D.44825_537
  if (D.44825_537 != 0B)
    goto <bb 211>;
  else
    goto <bb 220>;

<bb 211>:
  D.49724_1591 = strcasecmp (D.44825_537, "yes");
  if (D.49724_1591 == 0)
    goto <bb 221>;
  else
    goto <bb 212>;

<bb 212>:
  D.49725_1592 = strcasecmp (D.44825_537, "on");
  if (D.49725_1592 == 0)
    goto <bb 221>;
  else
    goto <bb 213>;

<bb 213>:
  D.49726_1593 = strcasecmp (D.44825_537, "true");
  if (D.49726_1593 == 0)
    goto <bb 221>;
  else
    goto <bb 214>;

<bb 214>:
  D.49727_1594 = strcasecmp (D.44825_537, "t");
  if (D.49727_1594 == 0)
    goto <bb 221>;
  else
    goto <bb 215>;

<bb 215>:
  D.49728_1595 = strcasecmp (D.44825_537, "enabled");
  if (D.49728_1595 == 0)
    goto <bb 221>;
  else
    goto <bb 216>;

<bb 216>:
  D.49729_1596 = strcasecmp (D.44825_537, "active");
  if (D.49729_1596 == 0)
    goto <bb 221>;
  else
    goto <bb 217>;

<bb 217>:
  D.49730_1597 = strcasecmp (D.44825_537, "allow");
  if (D.49730_1597 == 0)
    goto <bb 221>;
  else
    goto <bb 218>;

<bb 218>:
  D.49731_1598 = switch_is_number (D.44825_537);
  if (D.49731_1598 != 0)
    goto <bb 219>;
  else
    goto <bb 220>;

<bb 219>:
  # DEBUG __nptr => D.44825_537
  D.49732_1599 = strtol (D.44825_537, 0B, 10);
  if (D.49732_1599 != 0)
    goto <bb 221>;
  else
    goto <bb 220>;

<bb 220>:

<bb 221>:
  # D.49722_1600 = PHI <1(211), 1(212), 1(213), 1(214), 1(215), 1(216), 1(217), 1(219), 0(220)>
  D.49722_1649 = D.49722_1600;
  D.49722_538 = D.49722_1649;
  if (D.49722_538 == 0)
    goto <bb 222>;
  else
    goto <bb 224>;

<bb 222>:
  D.44666_539 = m_28->m_proto;
  D.44829_540 = D.44666_539 != 257;
  D.44830_541 = got_webrtc_78 == 0;
  D.44831_542 = D.44829_540 && D.44830_541;
  if (D.44831_542 != 0)
    goto <bb 223>;
  else
    goto <bb 224>;

<bb 223>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  # DEBUG match => 0
  goto <bb 491> (done);

<bb 224>:
  crypto_544 = attr_31->a_value;
  # DEBUG crypto => crypto_544
  # DEBUG __nptr => crypto_544
  crypto_tag_1477 = strtol (crypto_544, 0B, 10);
  # DEBUG crypto_tag => NULL
  got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1477, sdp_type_546(D));
  # DEBUG got_crypto => got_crypto_547

<bb 225>:
  # ptime_34 = PHI <ptime_35(196), ptime_1473(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>
  # maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1474(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
  # got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
  # DEBUG got_crypto => got_crypto_53
  # DEBUG maxptime => maxptime_38
  # DEBUG ptime => ptime_34
  attr_548 = attr_31->a_next;
  # DEBUG attr => attr_548

<bb 226>:
  # attr_31 = PHI <attr_507(192), attr_548(225)>
  # ptime_35 = PHI <dptime_37(192), ptime_34(225)>
  # maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>
  # got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>
  # DEBUG got_crypto => got_crypto_54
  # DEBUG maxptime => maxptime_39
  # DEBUG ptime => ptime_35
  # DEBUG attr => attr_31
  if (attr_31 != 0B)
    goto <bb 193>;
  else
    goto <bb 227>;

<bb 227>:
  D.44834_549 = got_crypto_54 == -1;
  D.44835_550 = got_savp_74 != 0;
  D.44836_551 = D.44834_549 && D.44835_550;
  if (D.44836_551 != 0)
    goto <bb 228>;
  else
    goto <bb 230>;

<bb 228>:
  D.44839_552 = got_avp_68 | got_webrtc_78;
  if (D.44839_552 == 0)
    goto <bb 229>;
  else
    goto <bb 230>;

<bb 229>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
  # DEBUG match => 0
  goto <bb 491> (done);

<bb 230>:
  connection_554 = sdp_198->sdp_connection;
  # DEBUG connection => connection_554
  D.44546_555 = m_28->m_connections;
  if (D.44546_555 != 0B)
    goto <bb 231>;
  else
    goto <bb 232>;

<bb 231>:
  connection_556 = m_28->m_connections;
  # DEBUG connection => connection_556

<bb 232>:
  # connection_124 = PHI <connection_554(230), connection_556(231)>
  # DEBUG connection => connection_124
  if (connection_124 == 0B)
    goto <bb 233>;
  else
    goto <bb 234>;

<bb 233>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  # DEBUG match => 0
  goto <bb 491> (done);

<bb 234>:
  # DEBUG x => 0
  map_559 = m_28->m_rtpmaps;
  # DEBUG map => map_559
  goto <bb 311>;

<bb 235>:
  # DEBUG map_bit_rate => 0
  codec_fmtp = {};
  rm_encoding_561 = map_128->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_561
  if (rm_encoding_561 == 0B)
    goto <bb 236>;
  else
    goto <bb 237>;

<bb 236>:
  # DEBUG rm_encoding => ""

<bb 237>:
  # rm_encoding_130 = PHI <rm_encoding_561(235), ""(236)>
  # DEBUG rm_encoding => rm_encoding_130
  D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
  if (D.44848_563 == 0)
    goto <bb 238>;
  else
    goto <bb 242>;

<bb 238>:
  if (best_te_20 == 0)
    goto <bb 240>;
  else
    goto <bb 239>;

<bb 239>:
  D.44854_564 = map_128->rm_rate;
  D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44855_566 = D.44750_565->rm_rate;
  if (D.44854_564 == D.44855_566)
    goto <bb 240>;
  else
    goto <bb 241>;

<bb 240>:
  D.44856_567 = map_128->rm_pt;
  best_te_568 = (switch_payload_t) D.44856_567;
  # DEBUG best_te => best_te_568
  D.44857_569 = (int) best_te_568;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);

<bb 241>:
  # best_te_18 = PHI <best_te_20(239), best_te_568(240)>
  # DEBUG best_te => best_te_18
  goto <bb 310>;

<bb 242>:
  D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
  if (D.44858_570 == 0)
    goto <bb 243>;
  else
    goto <bb 248>;

<bb 243>:
  if (cng_pt_25 == 0)
    goto <bb 244>;
  else
    goto <bb 248>;

<bb 244>:
  D.44863_571 = strcasecmp (rm_encoding_130, "CN");
  if (D.44863_571 == 0)
    goto <bb 245>;
  else
    goto <bb 248>;

<bb 245>:
  D.44856_572 = map_128->rm_pt;
  cng_pt_573 = (switch_payload_t) D.44856_572;
  # DEBUG cng_pt => cng_pt_573
  D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_574 != 0B)
    goto <bb 246>;
  else
    goto <bb 247>;

<bb 246>:
  D.44868_575 = (int) cng_pt_573;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
  D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44471_577 = smh_186->mparams;
  D.44869_578 = D.44471_577->cng_pt;
  switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

<bb 247>:
  goto <bb 310>;

<bb 248>:
  x_580 = x_49 + 1;
  # DEBUG x => x_580
  if (x_49 < 0)
    goto <bb 310>;
  else
    goto <bb 249>;

<bb 249>:
  if (match_8 != 0)
    goto <bb 310>;
  else
    goto <bb 250>;

<bb 250>:
  # DEBUG codec_ms => ptime_35
  if (maxptime_39 != 0)
    goto <bb 251>;
  else
    goto <bb 253>;

<bb 251>:
  D.44877_582 = ptime_35 == 0;
  D.44878_583 = ptime_35 > maxptime_39;
  D.44879_584 = D.44877_582 || D.44878_583;
  if (D.44879_584 != 0)
    goto <bb 252>;
  else
    goto <bb 253>;

<bb 252>:
  # DEBUG codec_ms => maxptime_39

<bb 253>:
  # codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>
  # DEBUG codec_ms => codec_ms_86
  if (codec_ms_86 == 0)
    goto <bb 254>;
  else
    goto <bb 255>;

<bb 254>:
  D.44856_586 = map_128->rm_pt;
  D.44884_587 = (uint32_t) D.44856_586;
  D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
  codec_ms_589 = (int) D.44885_588;
  # DEBUG codec_ms => codec_ms_589

<bb 255>:
  # codec_ms_87 = PHI <codec_ms_86(253), codec_ms_589(254)>
  # DEBUG codec_ms => codec_ms_87
  D.44856_590 = map_128->rm_pt;
  csui.173_591 = (unsigned char) D.44856_590;
  # DEBUG payload => csui.173_591
  if (csui.173_591 <= 18)
    goto <bb 256> (<L500>);
  else
    goto <bb 257> (<L501>);

<L500>:
  map_bit_rate_1480 = CSWTCH.174[csui.173_591];

  # map_bit_rate_1481 = PHI <0(255), map_bit_rate_1480(256)>
<L501>:
<L502>:
  # DEBUG map_bit_rate => NULL
  if (ptime_35 == 0)
    goto <bb 258>;
  else
    goto <bb 260>;

<bb 258>:
  D.44889_593 = map_128->rm_encoding;
  D.44890_594 = strcasecmp (D.44889_593, "g723");
  if (D.44890_594 == 0)
    goto <bb 259>;
  else
    goto <bb 260>;

<bb 259>:
  # DEBUG codec_ms => 33

<bb 260>:
  # codec_ms_88 = PHI <codec_ms_87(257), codec_ms_87(258), 33(259)>
  # DEBUG codec_ms => codec_ms_88
  remote_codec_rate_596 = map_128->rm_rate;
  # DEBUG remote_codec_rate => remote_codec_rate_596
  # DEBUG fmtp_remote_codec_rate => 0
  memset (&codec_fmtp, 0, 16);
  D.44893_598 = map_128->rm_fmtp;
  # DEBUG s => D.44893_598
  if (D.44893_598 == 0B)
    goto <bb 263>;
  else
    goto <bb 261>;

<bb 261>:
  D.47916_1482 = *D.44893_598;
  if (D.47916_1482 == 0)
    goto <bb 263>;
  else
    goto <bb 262>;

<bb 262>:

<bb 263>:
  # D.47915_1483 = PHI <1(260), 1(261), 0(262)>
  if (D.47915_1483 != 0)
    goto <bb 264>;
  else
    goto <bb 267>;

<bb 264>:
  D.44889_600 = map_128->rm_encoding;
  D.44897_601 = strcasecmp (D.44889_600, "ilbc");
  if (D.44897_601 == 0)
    goto <bb 274>;
  else
    goto <bb 265>;

<bb 265>:
  D.44889_604 = map_128->rm_encoding;
  D.44901_605 = strcasecmp (D.44889_604, "isac");
  if (D.44901_605 == 0)
    goto <bb 274>;
  else
    goto <bb 266>;

<bb 266>:
  # DEBUG map_bit_rate => 32099
  goto <bb 274>;

<bb 267>:
  D.44889_609 = map_128->rm_encoding;
  D.44893_610 = map_128->rm_fmtp;
  D.44854_611 = map_128->rm_rate;
  D.44906_612 = switch_core_codec_parse_fmtp (D.44889_609, D.44893_610, D.44854_611, &codec_fmtp);
  if (D.44906_612 == 0)
    goto <bb 268>;
  else
    goto <bb 274>;

<bb 268>:
  D.44909_613 = codec_fmtp.bits_per_second;
  if (D.44909_613 != 0)
    goto <bb 269>;
  else
    goto <bb 270>;

<bb 269>:
  D.44909_614 = codec_fmtp.bits_per_second;
  map_bit_rate_615 = (uint32_t) D.44909_614;
  # DEBUG map_bit_rate => map_bit_rate_615

<bb 270>:
  # map_bit_rate_131 = PHI <map_bit_rate_1481(268), map_bit_rate_615(269)>
  # DEBUG map_bit_rate => map_bit_rate_131
  D.44912_616 = codec_fmtp.microseconds_per_packet;
  if (D.44912_616 != 0)
    goto <bb 271>;
  else
    goto <bb 272>;

<bb 271>:
  D.44912_617 = codec_fmtp.microseconds_per_packet;
  codec_ms_618 = D.44912_617 / 1000;
  # DEBUG codec_ms => codec_ms_618

<bb 272>:
  # codec_ms_89 = PHI <codec_ms_88(270), codec_ms_618(271)>
  # DEBUG codec_ms => codec_ms_89
  D.44915_619 = codec_fmtp.actual_samples_per_second;
  if (D.44915_619 != 0)
    goto <bb 273>;
  else
    goto <bb 274>;

<bb 273>:
  fmtp_remote_codec_rate_620 = codec_fmtp.actual_samples_per_second;
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_620

<bb 274>:
  # codec_ms_90 = PHI <39(265), codec_ms_88(267), codec_ms_89(272), codec_ms_89(273), 32(264), codec_ms_88(266)>
  # fmtp_remote_codec_rate_99 = PHI <0(265), 0(267), 0(272), fmtp_remote_codec_rate_620(273), 0(264), 0(266)>
  # map_bit_rate_132 = PHI <32001(265), map_bit_rate_1481(267), map_bit_rate_131(272), map_bit_rate_131(273), 13332(264), 32099(266)>
  # DEBUG map_bit_rate => map_bit_rate_132
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99
  # DEBUG codec_ms => codec_ms_90
  # DEBUG i => 0
  goto <bb 308>;

<bb 275>:
  i.91_627 = (unsigned int) i_129;
  D.44919_628 = i.91_627 * 4;
  D.44920_629 = codec_array_84 + D.44919_628;
  imp_630 = *D.44920_629;
  # DEBUG imp => imp_630
  D.44921_631 = imp_630->bits_per_second;
  bit_rate_632 = (uint32_t) D.44921_631;
  # DEBUG bit_rate => bit_rate_632
  codec_rate_633 = imp_630->samples_per_second;
  # DEBUG codec_rate => codec_rate_633
  D.44922_634 = imp_630->codec_type;
  if (D.44922_634 != 0)
    goto <bb 307>;
  else
    goto <bb 276>;

<bb 276>:
  D.44856_635 = map_128->rm_pt;
  D.44925_636 = (int) D.44856_635;
  remote_codec_rate.92_637 = (int) remote_codec_rate_98;
  D.44927_638 = imp_630->iananame;
  D.44928_639 = imp_630->ianacode;
  D.44929_640 = (int) D.44928_639;
  D.44930_641 = imp_630->microseconds_per_packet;
  D.44931_642 = D.44930_641 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);
  D.44889_643 = map_128->rm_encoding;
  # DEBUG s => D.44889_643
  if (D.44889_643 == 0B)
    goto <bb 279>;
  else
    goto <bb 277>;

<bb 277>:
  D.47920_1484 = *D.44889_643;
  if (D.47920_1484 == 0)
    goto <bb 279>;
  else
    goto <bb 278>;

<bb 278>:

<bb 279>:
  # D.47919_1485 = PHI <1(276), 1(277), 0(278)>
  if (D.47919_1485 != 0)
    goto <bb 281>;
  else
    goto <bb 280>;

<bb 280>:
  D.44471_645 = smh_186->mparams;
  D.44821_646 = D.44471_645->ndlb;
  D.44937_647 = (int) D.44821_646;
  D.44938_648 = D.44937_647 & 1;
  if (D.44938_648 != 0)
    goto <bb 281>;
  else
    goto <bb 283>;

<bb 281>:
  D.44856_650 = map_128->rm_pt;
  D.44925_651 = (int) D.44856_650;
  if (D.44925_651 <= 95)
    goto <bb 282>;
  else
    goto <bb 283>;

<bb 282>:
  D.44856_652 = map_128->rm_pt;
  D.44925_653 = (int) D.44856_652;
  D.44928_654 = imp_630->ianacode;
  D.44929_655 = (int) D.44928_654;
  match_656 = D.44925_653 == D.44929_655;
  # DEBUG match => match_656
  goto <bb 289>;

<bb 283>:
  D.44927_657 = imp_630->iananame;
  D.44945_658 = strcasecmp (rm_encoding_130, D.44927_657);
  if (D.44945_658 == 0)
    goto <bb 284>;
  else
    goto <bb 286>;

<bb 284>:
  if (remote_codec_rate_98 == codec_rate_633)
    goto <bb 287>;
  else
    goto <bb 285>;

<bb 285>:
  D.44948_659 = imp_630->actual_samples_per_second;
  if (D.44948_659 == fmtp_remote_codec_rate_99)
    goto <bb 287>;
  else
    goto <bb 286>;

<bb 286>:

<bb 287>:
  # iftmp.93_144 = PHI <1(285), 0(286), 1(284)>
  match_662 = (uint8_t) iftmp.93_144;
  # DEBUG match => match_662
  if (fmtp_remote_codec_rate_99 != 0)
    goto <bb 288>;
  else
    goto <bb 289>;

<bb 288>:
  # DEBUG remote_codec_rate => fmtp_remote_codec_rate_99

<bb 289>:
  # match_1 = PHI <match_656(282), match_662(287), match_662(288)>
  # remote_codec_rate_96 = PHI <remote_codec_rate_98(282), remote_codec_rate_98(287), fmtp_remote_codec_rate_99(288)>
  # DEBUG remote_codec_rate => remote_codec_rate_96
  # DEBUG match => match_1
  D.44951_664 = match_1 != 0;
  D.44952_665 = bit_rate_632 != 0;
  D.44953_666 = D.44951_664 && D.44952_665;
  if (D.44953_666 != 0)
    goto <bb 290>;
  else
    goto <bb 294>;

<bb 290>:
  D.44956_667 = map_bit_rate_132 != 0;
  D.44957_668 = map_bit_rate_132 != bit_rate_632;
  D.44958_669 = D.44956_667 && D.44957_668;
  if (D.44958_669 != 0)
    goto <bb 291>;
  else
    goto <bb 294>;

<bb 291>:
  D.44889_670 = map_128->rm_encoding;
  D.44961_671 = strcasecmp (D.44889_670, "ilbc");
  if (D.44961_671 != 0)
    goto <bb 292>;
  else
    goto <bb 294>;

<bb 292>:
  D.44889_672 = map_128->rm_encoding;
  D.44964_673 = strcasecmp (D.44889_672, "isac");
  if (D.44964_673 != 0)
    goto <bb 293>;
  else
    goto <bb 294>;

<bb 293>:
  # DEBUG match => 0

<bb 294>:
  # match_2 = PHI <match_1(289), match_1(290), match_1(291), match_1(292), 0(293)>
  # DEBUG match => match_2
  D.44951_675 = match_2 != 0;
  D.44969_676 = remote_codec_rate_96 != 0;
  D.44970_677 = D.44951_675 && D.44969_676;
  if (D.44970_677 != 0)
    goto <bb 295>;
  else
    goto <bb 299>;

<bb 295>:
  D.44973_678 = codec_rate_633 != 0;
  D.44974_679 = remote_codec_rate_96 != codec_rate_633;
  D.44975_680 = D.44973_678 && D.44974_679;
  if (D.44975_680 != 0)
    goto <bb 296>;
  else
    goto <bb 299>;

<bb 296>:
  D.44889_681 = map_128->rm_encoding;
  D.44978_682 = strcasecmp (D.44889_681, "pcma");
  if (D.44978_682 == 0)
    goto <bb 298>;
  else
    goto <bb 297>;

<bb 297>:
  D.44889_683 = map_128->rm_encoding;
  D.44980_684 = strcasecmp (D.44889_683, "pcmu");
  if (D.44980_684 == 0)
    goto <bb 298>;
  else
    goto <bb 299>;

<bb 298>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
  # DEBUG match => 0

<bb 299>:
  # match_3 = PHI <match_2(294), match_2(295), match_2(297), 0(298)>
  # DEBUG match => match_3
  if (match_3 != 0)
    goto <bb 300>;
  else
    goto <bb 307>;

<bb 300>:
  if (scrooge_80 != 0)
    goto <bb 301>;
  else
    goto <bb 302>;

<bb 301>:
  D.44927_686 = imp_630->iananame;
  D.44985_687 = imp_630->samples_per_second;
  D.44930_688 = imp_630->microseconds_per_packet;
  D.44931_689 = D.44930_688 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44927_686, D.44985_687, D.44931_689);
  goto <bb 306>;

<bb 302>:
  D.44990_690 = ptime_35 != 0;
  D.44991_691 = codec_ms_90 != 0;
  D.44992_692 = D.44990_690 && D.44991_691;
  if (D.44992_692 != 0)
    goto <bb 303>;
  else
    goto <bb 304>;

<bb 303>:
  D.44994_693 = codec_ms_90 * 1000;
  D.44930_694 = imp_630->microseconds_per_packet;
  if (D.44994_693 != D.44930_694)
    goto <bb 305>;
  else
    goto <bb 304>;

<bb 304>:
  if (remote_codec_rate_96 != codec_rate_633)
    goto <bb 305>;
  else
    goto <bb 306>;

<bb 305>:
  # DEBUG match => 0
  D.44927_696 = imp_630->iananame;
  D.44928_697 = imp_630->ianacode;
  D.44929_698 = (int) D.44928_697;
  D.44930_699 = imp_630->microseconds_per_packet;
  D.44931_700 = D.44930_699 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927_696, D.44929_698, codec_rate_633, D.44931_700, bit_rate_632);
  near_matches[nm_idx_116].codec_idx = i_129;
  remote_codec_rate.92_701 = (int) remote_codec_rate_96;
  near_matches[nm_idx_116].rate = remote_codec_rate.92_701;
  near_matches[nm_idx_116].imp = imp_630;
  near_matches[nm_idx_116].map = map_128;
  nm_idx_702 = nm_idx_116 + 1;
  # DEBUG nm_idx => nm_idx_702
  goto <bb 307>;

<bb 306>:
  matches[m_idx_101].codec_idx = i_129;
  codec_rate.94_703 = (int) codec_rate_633;
  matches[m_idx_101].rate = codec_rate.94_703;
  matches[m_idx_101].imp = imp_630;
  matches[m_idx_101].map = map_128;
  m_idx_704 = m_idx_101 + 1;
  # DEBUG m_idx => m_idx_704
  D.44927_705 = imp_630->iananame;
  D.44928_706 = imp_630->ianacode;
  D.44929_707 = (int) D.44928_706;
  D.44930_708 = imp_630->microseconds_per_packet;
  D.44931_709 = D.44930_708 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927_705, D.44929_707, codec_rate_633, D.44931_709, bit_rate_632);
  if (m_idx_704 > 29)
    goto <bb 309>;
  else
    goto <bb 307>;

<bb 307>:
  # match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>
  # remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>
  # m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_704(306)>
  # nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_702(305), nm_idx_116(306)>
  # DEBUG nm_idx => nm_idx_115
  # DEBUG m_idx => m_idx_100
  # DEBUG remote_codec_rate => remote_codec_rate_97
  # DEBUG match => match_4
  i_711 = i_129 + 1;
  # DEBUG i => i_711

<bb 308>:
  # match_5 = PHI <match_8(274), match_4(307)>
  # remote_codec_rate_98 = PHI <remote_codec_rate_596(274), remote_codec_rate_97(307)>
  # m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>
  # nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>
  # i_129 = PHI <0(274), i_711(307)>
  # DEBUG i => i_129
  # DEBUG nm_idx => nm_idx_116
  # DEBUG m_idx => m_idx_101
  # DEBUG remote_codec_rate => remote_codec_rate_98
  # DEBUG match => match_5
  D.44471_622 = smh_186->mparams;
  D.44997_623 = D.44471_622->num_codecs;
  D.44998_624 = D.44997_623 > i_129;
  D.44999_625 = i_129 < total_codecs_85;
  D.45000_626 = D.44998_624 && D.44999_625;
  if (D.45000_626 != 0)
    goto <bb 275>;
  else
    goto <bb 309>;

<bb 309>:
  # match_6 = PHI <match_3(306), match_5(308)>
  # m_idx_102 = PHI <m_idx_704(306), m_idx_101(308)>
  # DEBUG m_idx => m_idx_102
  # DEBUG match => match_6
  if (m_idx_102 > 29)
    goto <bb 312>;
  else
    goto <bb 310>;

<bb 310>:
  # match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>
  # best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>
  # cng_pt_24 = PHI <cng_pt_25(241), cng_pt_573(247), cng_pt_25(248), cng_pt_25(249), cng_pt_25(309)>
  # x_48 = PHI <x_49(241), x_49(247), x_580(248), x_580(249), x_580(309)>
  # codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>
  # m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>
  # nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>
  # DEBUG nm_idx => nm_idx_117
  # DEBUG m_idx => m_idx_103
  # DEBUG codec_ms => codec_ms_91
  # DEBUG x => x_48
  # DEBUG cng_pt => cng_pt_24
  # DEBUG best_te => best_te_19
  # DEBUG match => match_7
  map_712 = map_128->rm_next;
  # DEBUG map => map_712

<bb 311>:
  # match_8 = PHI <match_16(234), match_7(310)>
  # best_te_20 = PHI <best_te_23(234), best_te_19(310)>
  # cng_pt_25 = PHI <cng_pt_27(234), cng_pt_24(310)>
  # x_49 = PHI <0(234), x_48(310)>
  # codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>
  # m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>
  # nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>
  # map_128 = PHI <map_559(234), map_712(310)>
  # DEBUG map => map_128
  # DEBUG nm_idx => nm_idx_118
  # DEBUG m_idx => m_idx_104
  # DEBUG codec_ms => codec_ms_92
  # DEBUG x => x_49
  # DEBUG cng_pt => cng_pt_25
  # DEBUG best_te => best_te_20
  # DEBUG match => match_8
  if (map_128 != 0B)
    goto <bb 235>;
  else
    goto <bb 312>;

<bb 312>:
  # match_9 = PHI <match_6(309), match_8(311)>
  # codec_ms_93 = PHI <codec_ms_90(309), codec_ms_92(311)>
  # m_idx_105 = PHI <m_idx_102(309), m_idx_104(311)>
  # nm_idx_119 = PHI <nm_idx_116(309), nm_idx_118(311)>
  # DEBUG nm_idx => nm_idx_119
  # DEBUG m_idx => m_idx_105
  # DEBUG codec_ms => codec_ms_93
  # DEBUG match => match_9
  D.45002_713 = smh_186->crypto_mode;
  D.45003_714 = D.45002_713 == 1;
  D.45004_715 = got_crypto_54 <= 0;
  D.45005_716 = D.45003_714 && D.45004_715;
  if (D.45005_716 != 0)
    goto <bb 313>;
  else
    goto <bb 314>;

<bb 313>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
  # DEBUG match => 0
  # DEBUG nm_idx => 0
  # DEBUG m_idx => 0

<bb 314>:
  # match_10 = PHI <match_9(312), 0(313)>
  # m_idx_106 = PHI <m_idx_105(312), 0(313)>
  # nm_idx_120 = PHI <nm_idx_119(312), 0(313)>
  # DEBUG nm_idx => nm_idx_120
  # DEBUG m_idx => m_idx_106
  # DEBUG match => match_10
  D.45008_720 = m_idx_106 == 0;
  D.45009_721 = nm_idx_120 != 0;
  D.45010_722 = D.45008_720 && D.45009_721;
  if (D.45010_722 != 0)
    goto <bb 315>;
  else
    goto <bb 325>;

<bb 315>:
  j_1118 = 0;
  goto <bb 324>;

<bb 316>:
  # DEBUG timp => 0B
  D.45013_725 = near_matches[j_133].rate;
  near_rate_726 = (uint32_t) D.45013_725;
  # DEBUG near_rate => near_rate_726
  near_match_727 = near_matches[j_133].imp;
  # DEBUG near_match => near_match_727
  near_map_728 = near_matches[j_133].map;
  # DEBUG near_map => near_map_728
  D.45014_729 = near_match_727->iananame;
  if (near_rate_726 == 0)
    goto <bb 317>;
  else
    goto <bb 318>;

<bb 317>:
  near_rate_730 = near_match_727->samples_per_second;

<bb 318>:
  # near_rate_145 = PHI <near_rate_730(317), near_rate_726(316)>
  switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45014_729, near_rate_145, codec_ms_93);
  prefs[0] = &tmp;
  num_732 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);
  # DEBUG num => num_732
  if (num_732 != 0)
    goto <bb 319>;
  else
    goto <bb 320>;

<bb 319>:
  timp_733 = search[0];
  # DEBUG timp => timp_733

<bb 320>:
  # timp_134 = PHI <timp_733(319), near_match_727(318)>
  # DEBUG timp => timp_134
  if (maxptime_39 == 0)
    goto <bb 322>;
  else
    goto <bb 321>;

<bb 321>:
  D.45025_735 = timp_134->microseconds_per_packet;
  D.45026_736 = D.45025_735 / 1000;
  if (D.45026_736 <= maxptime_39)
    goto <bb 322>;
  else
    goto <bb 323>;

<bb 322>:
  D.45027_738 = timp_134->iananame;
  D.45025_739 = timp_134->microseconds_per_packet;
  D.45026_740 = D.45025_739 / 1000;
  D.45028_741 = timp_134->actual_samples_per_second;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45027_738, D.45026_740, D.45028_741);
  # DEBUG match => 1
  D.45029_743 = near_matches[j_133].codec_idx;
  matches[m_idx_106].codec_idx = D.45029_743;
  near_rate.96_744 = (int) near_rate_726;
  matches[m_idx_106].rate = near_rate.96_744;
  matches[m_idx_106].imp = timp_134;
  matches[m_idx_106].map = near_map_728;
  m_idx_745 = m_idx_106 + 1;
  # DEBUG m_idx => m_idx_745
  goto <bb 325>;

<bb 323>:
  j_737 = j_133 + 1;
  # DEBUG j => j_737

<bb 324>:
  # j_133 = PHI <0(315), j_737(323)>
  # DEBUG j => j_133
  if (j_133 < nm_idx_120)
    goto <bb 316>;
  else
    goto <bb 325>;

<bb 325>:
  # match_11 = PHI <match_10(314), 1(322), match_10(324)>
  # m_idx_107 = PHI <m_idx_106(314), m_idx_745(322), m_idx_106(324)>
  # DEBUG m_idx => m_idx_107
  # DEBUG match => match_11
  if (m_idx_107 != 0)
    goto <bb 326>;
  else
    goto <bb 350>;

<bb 326>:
  if (greedy_47 != 0)
    goto <bb 327>;
  else
    goto <bb 328>;

<bb 327>:
  greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);

<bb 328>:
  # DEBUG match => 1
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;
  smh_186->num_negotiated_codecs = 0;
  # DEBUG j => 0
  goto <bb 349>;

<bb 329>:
  D.45035_748 = matches[j_135].map;
  D.45036_749 = D.45035_748->rm_encoding;
  D.45035_750 = matches[j_135].map;
  D.45037_751 = D.45035_750->rm_fmtp;
  D.45035_752 = matches[j_135].map;
  D.45038_753 = D.45035_752->rm_pt;
  D.45039_754 = (uint32_t) D.45038_753;
  D.45040_755 = matches[j_135].imp;
  D.45041_756 = D.45040_755->samples_per_second;
  D.45040_757 = matches[j_135].imp;
  D.45042_758 = D.45040_757->microseconds_per_packet;
  D.45043_759 = D.45042_758 / 1000;
  D.45044_760 = (uint32_t) D.45043_759;
  pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);
  # DEBUG pmap => pmap_761
  mimp_762 = matches[j_135].imp;
  # DEBUG mimp => mimp_762
  mmap_763 = matches[j_135].map;
  # DEBUG mmap => mmap_763
  if (j_135 == 0)
    goto <bb 330>;
  else
    goto <bb 332>;

<bb 330>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_761;
  D.44750_764 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44750_764->current = 1;
  D.44605_765 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_765 != 0B)
    goto <bb 331>;
  else
    goto <bb 332>;

<bb 331>:
  D.44605_766 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.45049_767 = pmap_761->pt;
  switch_rtp_set_default_payload (D.44605_766, D.45049_767);

<bb 332>:
  D.45050_768 = mmap_763->rm_encoding;
  D.45051_769 = switch_core_perform_session_strdup (session_161(D), D.45050_768, "src/switch_core_media.c", &__func__, 3535);
  pmap_761->rm_encoding = D.45051_769;
  D.45052_770 = mimp_762->iananame;
  D.45053_771 = switch_core_perform_session_strdup (session_161(D), D.45052_770, "src/switch_core_media.c", &__func__, 3536);
  pmap_761->iananame = D.45053_771;
  D.45054_772 = mmap_763->rm_pt;
  D.45055_773 = (unsigned char) D.45054_772;
  pmap_761->recv_pt = D.45055_773;
  D.45056_774 = mimp_762->samples_per_second;
  pmap_761->rm_rate = D.45056_774;
  D.45056_775 = mimp_762->samples_per_second;
  pmap_761->adv_rm_rate = D.45056_775;
  D.45052_776 = mimp_762->iananame;
  D.45057_777 = strcasecmp (D.45052_776, "g722");
  if (D.45057_777 != 0)
    goto <bb 333>;
  else
    goto <bb 334>;

<bb 333>:
  D.45060_778 = mimp_762->actual_samples_per_second;
  pmap_761->rm_rate = D.45060_778;

<bb 334>:
  D.45061_779 = mimp_762->microseconds_per_packet;
  D.45062_780 = D.45061_779 / 1000;
  D.45063_781 = (uint32_t) D.45062_780;
  pmap_761->codec_ms = D.45063_781;
  D.45064_782 = mimp_762->bits_per_second;
  D.45065_783 = (uint32_t) D.45064_782;
  pmap_761->bitrate = D.45065_783;
  D.45067_784 = mmap_763->rm_params;
  if (D.45067_784 != 0B)
    goto <bb 335>;
  else
    goto <bb 336>;

<bb 335>:
  D.45067_785 = mmap_763->rm_params;
  # DEBUG __nptr => D.45067_785
  D.47923_1486 = strtol (D.45067_785, 0B, 10);

<bb 336>:
  # D.47923_146 = PHI <D.47923_1486(335), 1(334)>
  pmap_761->channels = D.47923_146;
  D.45050_788 = mmap_763->rm_encoding;
  D.45071_789 = strcasecmp (D.45050_788, "opus");
  if (D.45071_789 == 0)
    goto <bb 337>;
  else
    goto <bb 347>;

<bb 337>:
  D.45074_790 = pmap_761->channels;
  if (D.45074_790 == 1)
    goto <bb 338>;
  else
    goto <bb 339>;

<bb 338>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
  pmap_761->adv_channels = 1;
  goto <bb 340>;

<bb 339>:
  pmap_761->adv_channels = 2;

<bb 340>:
  D.45080_791 = mmap_763->rm_fmtp;
  # DEBUG s => D.45080_791
  if (D.45080_791 == 0B)
    goto <bb 343>;
  else
    goto <bb 341>;

<bb 341>:
  D.47927_1487 = *D.45080_791;
  if (D.47927_1487 == 0)
    goto <bb 343>;
  else
    goto <bb 342>;

<bb 342>:

<bb 343>:
  # D.47926_1488 = PHI <1(340), 1(341), 0(342)>
  if (D.47926_1488 == 0)
    goto <bb 344>;
  else
    goto <bb 346>;

<bb 344>:
  D.45080_793 = mmap_763->rm_fmtp;
  D.45083_794 = switch_stristr ("stereo=1", D.45080_793);
  if (D.45083_794 != 0B)
    goto <bb 345>;
  else
    goto <bb 346>;

<bb 345>:
  pmap_761->channels = 2;
  goto <bb 348>;

<bb 346>:
  pmap_761->channels = 1;
  goto <bb 348>;

<bb 347>:
  D.45074_795 = pmap_761->channels;
  pmap_761->adv_channels = D.45074_795;

<bb 348>:
  D.45086_796 = connection_124->c_address;
  D.45087_797 = switch_core_perform_session_strdup (session_161(D), D.45086_796, "src/switch_core_media.c", &__func__, 3563);
  pmap_761->remote_sdp_ip = D.45087_797;
  D.44697_798 = m_28->m_port;
  D.45088_799 = (short unsigned int) D.44697_798;
  pmap_761->remote_sdp_port = D.45088_799;
  D.45080_800 = mmap_763->rm_fmtp;
  D.45089_801 = switch_core_perform_session_strdup (session_161(D), D.45080_800, "src/switch_core_media.c", &__func__, 3565);
  pmap_761->rm_fmtp = D.45089_801;
  D.45054_802 = mmap_763->rm_pt;
  D.45055_803 = (unsigned char) D.45054_802;
  pmap_761->agreed_pt = D.45055_803;
  D.44655_804 = smh_186->num_negotiated_codecs;
  smh_186->negotiated_codecs[D.44655_804] = mimp_762;
  D.45090_805 = D.44655_804 + 1;
  smh_186->num_negotiated_codecs = D.45090_805;
  D.45054_806 = mmap_763->rm_pt;
  D.45055_807 = (unsigned char) D.45054_806;
  pmap_761->recv_pt = D.45055_807;
  j_808 = j_135 + 1;
  # DEBUG j => j_808

<bb 349>:
  # j_135 = PHI <0(328), j_808(348)>
  # DEBUG j => j_135
  if (j_135 < m_idx_107)
    goto <bb 329>;
  else
    goto <bb 350>;

<bb 350>:
  # match_12 = PHI <match_11(325), 1(349)>
  # DEBUG match => match_12
  if (match_12 != 0)
    goto <bb 351>;
  else
    goto <bb 361>;

<bb 351>:
  D.44750_809 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44762_810 = D.44750_809->remote_sdp_port;
  D.44767_811 = (int) D.44762_810;
  switch_snprintf (&tmp, 50, "%d", D.44767_811);
  D.44530_812 = session_161(D)->channel;
  D.44750_813 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_814 = D.44750_813->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_812, "remote_media_ip", D.44760_814, 1);
  D.44530_815 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_815, "remote_media_port", &tmp, 1);
  D.44750_816 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.45093_817 = D.44750_816->recv_pt;
  D.45094_818 = (int) D.45093_817;
  switch_snprintf (&tmp, 50, "%d", D.45094_818);
  D.44530_819 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_819, "rtp_audio_recv_pt", &tmp, 1);
  D.45095_820 = &MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].read_codec;
  # DEBUG codec => D.45095_820
  if (D.45095_820 != 0B)
    goto <bb 352>;
  else
    goto <bb 356>;

<bb 352>:
  D.47935_1489 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
  D.47934_1490 = D.47935_1489 & 256;
  if (D.47934_1490 != 0)
    goto <bb 353>;
  else
    goto <bb 356>;

<bb 353>:
  D.47933_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
  if (D.47933_1491 != 0B)
    goto <bb 354>;
  else
    goto <bb 356>;

<bb 354>:
  D.47932_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
  if (D.47932_1492 != 0B)
    goto <bb 355>;
  else
    goto <bb 356>;

<bb 355>:
  D.47931_1493 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
  if (D.47931_1493 != 0B)
    goto <bb 357>;
  else
    goto <bb 356>;

<bb 356>:

<bb 357>:
  # iftmp.104_1494 = PHI <1(355), 0(356)>
  if (iftmp.104_1494 != 0)
    goto <bb 358>;
  else
    goto <bb 359>;

<bb 358>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;

<bb 359>:
  D.44471_822 = smh_186->mparams;
  D.45099_823 = D.44471_822->codec_flags;
  D.45100_824 = switch_core_media_set_codec (session_161(D), 0, D.45099_823);
  if (D.45100_824 == 0)
    goto <bb 360>;
  else
    goto <bb 361>;

<bb 360>:
  # DEBUG got_audio => 1
  check_ice (smh_186, 0, sdp_198, m_28);

<bb 361>:
  # match_13 = PHI <match_12(350), match_12(360), 0(359)>
  # got_audio_65 = PHI <got_audio_67(350), 1(360), got_audio_67(359)>
  # DEBUG got_audio => got_audio_65
  # DEBUG match => match_13
  if (best_te_20 == 0)
    goto <bb 362>;
  else
    goto <bb 365>;

<bb 362>:
  D.45108_827 = switch_media_handle_test_media_flag (smh_186, 8);
  if (D.45108_827 != 0)
    goto <bb 364>;
  else
    goto <bb 363>;

<bb 363>:
  D.44530_828 = session_161(D)->channel;
  D.45110_829 = switch_channel_test_flag (D.44530_828, 93);
  if (D.45110_829 != 0)
    goto <bb 364>;
  else
    goto <bb 365>;

<bb 364>:
  D.44471_830 = smh_186->mparams;
  D.45111_831 = D.44471_830->te;
  D.45112_832 = (int) D.45111_831;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45112_832);
  D.44471_833 = smh_186->mparams;
  best_te_834 = D.44471_833->te;
  # DEBUG best_te => best_te_834

<bb 365>:
  # best_te_21 = PHI <best_te_20(361), best_te_20(363), best_te_834(364)>
  # DEBUG best_te => best_te_21
  if (best_te_21 != 0)
    goto <bb 366>;
  else
    goto <bb 371>;

<bb 366>:
  D.45115_835 = switch_channel_direction (channel_162);
  if (D.45115_835 == 1)
    goto <bb 367>;
  else
    goto <bb 369>;

<bb 367>:
  D.44471_836 = smh_186->mparams;
  D.44471_836->te = best_te_21;
  # DEBUG D#11 => D.44471_836->te
  # DEBUG te => D#11
  D.44857_838 = (int) best_te_21;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_838);
  D.44530_839 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_839, "dtmf_type", "rfc2833", 1);
  D.44471_840 = smh_186->mparams;
  D.44471_840->dtmf_type = 0;
  D.44605_841 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_841 != 0B)
    goto <bb 368>;
  else
    goto <bb 489>;

<bb 368>:
  D.44605_842 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  switch_rtp_set_telephony_event (D.44605_842, best_te_21);
  D.44530_843 = session_161(D)->channel;
  D.44857_844 = (int) best_te_21;
  switch_channel_set_variable_printf (D.44530_843, "rtp_2833_send_payload", "%d", D.44857_844);
  goto <bb 489>;

<bb 369>:
  D.44471_846 = smh_186->mparams;
  D.44471_846->te = best_te_21;
  D.45111_847 = D.44471_846->te;
  D.44471_846->recv_te = D.45111_847;
  te_848 = D.44471_846->recv_te;
  # DEBUG te => te_848
  D.45121_849 = (int) te_848;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45121_849);
  D.44530_850 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_850, "dtmf_type", "rfc2833", 1);
  D.44471_851 = smh_186->mparams;
  D.44471_851->dtmf_type = 0;
  D.44605_852 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_852 != 0B)
    goto <bb 370>;
  else
    goto <bb 489>;

<bb 370>:
  D.44605_853 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  switch_rtp_set_telephony_event (D.44605_853, te_848);
  D.44530_854 = session_161(D)->channel;
  D.45121_855 = (int) te_848;
  switch_channel_set_variable_printf (D.44530_854, "rtp_2833_send_payload", "%d", D.45121_855);
  D.44605_856 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  switch_rtp_set_telephony_recv_event (D.44605_856, te_848);
  D.44530_857 = session_161(D)->channel;
  D.45121_858 = (int) te_848;
  switch_channel_set_variable_printf (D.44530_857, "rtp_2833_recv_payload", "%d", D.45121_858);
  goto <bb 489>;

<bb 371>:
  D.45125_859 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
  # DEBUG expr => D.45125_859
  if (D.45125_859 != 0B)
    goto <bb 372>;
  else
    goto <bb 381>;

<bb 372>:
  D.49736_1601 = strcasecmp (D.45125_859, "no");
  if (D.49736_1601 == 0)
    goto <bb 382>;
  else
    goto <bb 373>;

<bb 373>:
  D.49737_1602 = strcasecmp (D.45125_859, "off");
  if (D.49737_1602 == 0)
    goto <bb 382>;
  else
    goto <bb 374>;

<bb 374>:
  D.49738_1603 = strcasecmp (D.45125_859, "false");
  if (D.49738_1603 == 0)
    goto <bb 382>;
  else
    goto <bb 375>;

<bb 375>:
  D.49739_1604 = strcasecmp (D.45125_859, "f");
  if (D.49739_1604 == 0)
    goto <bb 382>;
  else
    goto <bb 376>;

<bb 376>:
  D.49740_1605 = strcasecmp (D.45125_859, "disabled");
  if (D.49740_1605 == 0)
    goto <bb 382>;
  else
    goto <bb 377>;

<bb 377>:
  D.49741_1606 = strcasecmp (D.45125_859, "inactive");
  if (D.49741_1606 == 0)
    goto <bb 382>;
  else
    goto <bb 378>;

<bb 378>:
  D.49742_1607 = strcasecmp (D.45125_859, "disallow");
  if (D.49742_1607 == 0)
    goto <bb 382>;
  else
    goto <bb 379>;

<bb 379>:
  D.49743_1608 = switch_is_number (D.45125_859);
  if (D.49743_1608 != 0)
    goto <bb 380>;
  else
    goto <bb 381>;

<bb 380>:
  # DEBUG __nptr => D.45125_859
  D.49744_1609 = strtol (D.45125_859, 0B, 10);
  if (D.49744_1609 == 0)
    goto <bb 382>;
  else
    goto <bb 381>;

<bb 381>:

<bb 382>:
  # D.49734_1610 = PHI <1(372), 1(373), 1(374), 1(375), 1(376), 1(377), 1(378), 1(380), 0(381)>
  D.49734_1652 = D.49734_1610;
  D.49734_860 = D.49734_1652;
  if (D.49734_860 == 0)
    goto <bb 383>;
  else
    goto <bb 384>;

<bb 383>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
  D.44530_861 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_861, "dtmf_type", "info", 1);
  D.44471_862 = smh_186->mparams;
  D.44471_862->dtmf_type = 1;
  D.44471_864 = smh_186->mparams;
  D.44471_864->te = 0;
  D.45111_865 = D.44471_864->te;
  D.44471_864->recv_te = D.45111_865;
  # DEBUG D#12 => D.44471_864->recv_te
  # DEBUG te => D#12
  goto <bb 489>;

<bb 384>:
  D.44530_867 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_867, "dtmf_type", "none", 1);
  D.44471_868 = smh_186->mparams;
  D.44471_868->dtmf_type = 2;
  D.44471_870 = smh_186->mparams;
  D.44471_870->te = 0;
  D.45111_871 = D.44471_870->te;
  D.44471_870->recv_te = D.45111_871;
  # DEBUG D#13 => D.44471_870->recv_te
  # DEBUG te => D#13
  goto <bb 489>;

<bb 385>:
  D.44681_873 = m_28->m_type;
  if (D.44681_873 == 3)
    goto <bb 386>;
  else
    goto <bb 489>;

<bb 386>:
  D.44697_874 = m_28->m_port;
  if (D.44697_874 != 0)
    goto <bb 387>;
  else
    goto <bb 489>;

<bb 387>:
  # DEBUG mimp => 0B
  # DEBUG vmatch => 0
  # DEBUG nm_idx => 0
  # DEBUG m_idx => 0
  memset (&matches, 0, 480);
  memset (&near_matches, 0, 480);
  D.44530_879 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_879, "video_possible", "true", 1);
  connection_880 = sdp_198->sdp_connection;
  # DEBUG connection => connection_880
  D.44546_881 = m_28->m_connections;
  if (D.44546_881 != 0B)
    goto <bb 388>;
  else
    goto <bb 389>;

<bb 388>:
  connection_882 = m_28->m_connections;
  # DEBUG connection => connection_882

<bb 389>:
  # connection_125 = PHI <connection_880(387), connection_882(388)>
  # DEBUG connection => connection_125
  if (connection_125 == 0B)
    goto <bb 390>;
  else
    goto <bb 391>;

<bb 390>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  # DEBUG match => 0
  goto <bb 491> (done);

<bb 391>:
  map_884 = m_28->m_rtpmaps;
  # DEBUG map => map_884
  goto <bb 465>;

<bb 392>:
  D.45138_885 = switch_rtp_has_dtls ();
  if (D.45138_885 != 0)
    goto <bb 393>;
  else
    goto <bb 403>;

<bb 393>:
  D.45141_886 = dtls_ok (session_161(D));
  if (D.45141_886 != 0)
    goto <bb 394>;
  else
    goto <bb 403>;

<bb 394>:
  attr_887 = m_28->m_attributes;
  # DEBUG attr => attr_887
  goto <bb 402>;

<bb 395>:
  D.44590_888 = attr_32->a_name;
  D.45144_889 = strcasecmp (D.44590_888, "fingerprint");
  if (D.45144_889 == 0)
    goto <bb 396>;
  else
    goto <bb 401>;

<bb 396>:
  D.44619_890 = attr_32->a_value;
  # DEBUG s => D.44619_890
  if (D.44619_890 == 0B)
    goto <bb 399>;
  else
    goto <bb 397>;

<bb 397>:
  D.47940_1496 = *D.44619_890;
  if (D.47940_1496 == 0)
    goto <bb 399>;
  else
    goto <bb 398>;

<bb 398>:

<bb 399>:
  # D.47939_1497 = PHI <1(396), 1(397), 0(398)>
  if (D.47939_1497 == 0)
    goto <bb 400>;
  else
    goto <bb 401>;

<bb 400>:
  # DEBUG got_video_crypto => 1

<bb 401>:
  # got_video_crypto_57 = PHI <got_video_crypto_58(395), got_video_crypto_58(399), 1(400)>
  # DEBUG got_video_crypto => got_video_crypto_57
  attr_893 = attr_32->a_next;
  # DEBUG attr => attr_893

<bb 402>:
  # attr_32 = PHI <attr_887(394), attr_893(401)>
  # got_video_crypto_58 = PHI <got_video_crypto_62(394), got_video_crypto_57(401)>
  # DEBUG got_video_crypto => got_video_crypto_58
  # DEBUG attr => attr_32
  if (attr_32 != 0B)
    goto <bb 395>;
  else
    goto <bb 403>;

<bb 403>:
  # got_video_crypto_59 = PHI <got_video_crypto_62(392), got_video_crypto_62(393), got_video_crypto_58(402)>
  # DEBUG got_video_crypto => got_video_crypto_59
  attr_894 = m_28->m_attributes;
  # DEBUG attr => attr_894
  goto <bb 444>;

<bb 404>:
  D.44590_895 = attr_33->a_name;
  D.45152_896 = strcasecmp (D.44590_895, "framerate");
  if (D.45152_896 == 0)
    goto <bb 405>;
  else
    goto <bb 406>;

<bb 405>:
  D.44619_897 = attr_33->a_value;
  if (D.44619_897 != 0B)
    goto <bb 443>;
  else
    goto <bb 406>;

<bb 406>:
  D.44590_898 = attr_33->a_name;
  D.45155_899 = strcasecmp (D.44590_898, "rtcp-fb");
  if (D.45155_899 == 0)
    goto <bb 407>;
  else
    goto <bb 414>;

<bb 407>:
  D.44619_900 = attr_33->a_value;
  # DEBUG s => D.44619_900
  if (D.44619_900 == 0B)
    goto <bb 410>;
  else
    goto <bb 408>;

<bb 408>:
  D.47944_1498 = *D.44619_900;
  if (D.47944_1498 == 0)
    goto <bb 410>;
  else
    goto <bb 409>;

<bb 409>:

<bb 410>:
  # D.47943_1499 = PHI <1(407), 1(408), 0(409)>
  if (D.47943_1499 == 0)
    goto <bb 411>;
  else
    goto <bb 443>;

<bb 411>:
  D.44619_902 = attr_33->a_value;
  D.45161_903 = switch_stristr ("fir", D.44619_902);
  if (D.45161_903 != 0B)
    goto <bb 412>;
  else
    goto <bb 413>;

<bb 412>:
  D.45164_904 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
  D.45165_905 = D.45164_904 + 1;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45165_905;

<bb 413>:
  D.44471_906 = smh_186->mparams;
  D.44471_906->rtcp_video_interval_msec = "10000";
  goto <bb 443>;

<bb 414>:
  D.44590_907 = attr_33->a_name;
  D.45169_908 = strcasecmp (D.44590_907, "rtcp");
  if (D.45169_908 == 0)
    goto <bb 415>;
  else
    goto <bb 421>;

<bb 415>:
  D.44619_909 = attr_33->a_value;
  if (D.44619_909 != 0B)
    goto <bb 416>;
  else
    goto <bb 421>;

<bb 416>:
  # DEBUG __s2_len => 1
  __s1_911 = attr_33->a_value;
  # DEBUG __s1 => __s1_911
  D.45175_912 = *__s1_911;
  D.45176_913 = (int) D.45175_912;
  __result_917 = D.45176_913 + -49;
  # DEBUG __result => __result_917
  if (__result_917 == 0)
    goto <bb 417>;
  else
    goto <bb 418>;

<bb 417>:
  D.45186_922 = MEM[(const unsigned char *)__s1_911 + 1B];
  __result_923 = (int) D.45186_922;
  # DEBUG __result => __result_923

<bb 418>:
  # __result_140 = PHI <__result_917(416), __result_923(417)>
  # DEBUG __result => __result_140
  if (__result_140 == 0)
    goto <bb 419>;
  else
    goto <bb 421>;

<bb 419>:
  D.44530_953 = session_161(D)->channel;
  D.44619_954 = attr_33->a_value;
  switch_channel_set_variable_var_check (D.44530_953, "rtp_remote_video_rtcp_port", D.44619_954, 1);
  D.44619_955 = attr_33->a_value;
  # DEBUG __nptr => D.44619_955
  D.47947_1500 = strtol (D.44619_955, 0B, 10);
  D.45214_957 = (short unsigned int) D.47947_1500;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45214_957;
  D.44471_958 = smh_186->mparams;
  D.45215_959 = D.44471_958->rtcp_video_interval_msec;
  if (D.45215_959 == 0B)
    goto <bb 420>;
  else
    goto <bb 443>;

<bb 420>:
  D.44471_960 = smh_186->mparams;
  D.44471_960->rtcp_video_interval_msec = "5000";
  goto <bb 443>;

<bb 421>:
  if (got_video_crypto_61 == 0)
    goto <bb 422>;
  else
    goto <bb 443>;

<bb 422>:
  D.44590_961 = attr_33->a_name;
  D.45220_962 = strcasecmp (D.44590_961, "crypto");
  if (D.45220_962 == 0)
    goto <bb 423>;
  else
    goto <bb 443>;

<bb 423>:
  D.44619_963 = attr_33->a_value;
  # DEBUG s => D.44619_963
  if (D.44619_963 == 0B)
    goto <bb 426>;
  else
    goto <bb 424>;

<bb 424>:
  D.47951_1501 = *D.44619_963;
  if (D.47951_1501 == 0)
    goto <bb 426>;
  else
    goto <bb 425>;

<bb 425>:

<bb 426>:
  # D.47950_1502 = PHI <1(423), 1(424), 0(425)>
  if (D.47950_1502 == 0)
    goto <bb 427>;
  else
    goto <bb 443>;

<bb 427>:
  D.44471_965 = smh_186->mparams;
  D.44821_966 = D.44471_965->ndlb;
  D.44822_967 = D.44821_966 & 4;
  if (D.44822_967 == 0)
    goto <bb 428>;
  else
    goto <bb 442>;

<bb 428>:
  D.44530_968 = session_161(D)->channel;
  D.45228_969 = switch_channel_get_variable_dup (D.44530_968, "rtp_allow_crypto_in_avp", 1, -1);
  # DEBUG expr => D.45228_969
  if (D.45228_969 != 0B)
    goto <bb 429>;
  else
    goto <bb 438>;

<bb 429>:
  D.49748_1611 = strcasecmp (D.45228_969, "yes");
  if (D.49748_1611 == 0)
    goto <bb 439>;
  else
    goto <bb 430>;

<bb 430>:
  D.49749_1612 = strcasecmp (D.45228_969, "on");
  if (D.49749_1612 == 0)
    goto <bb 439>;
  else
    goto <bb 431>;

<bb 431>:
  D.49750_1613 = strcasecmp (D.45228_969, "true");
  if (D.49750_1613 == 0)
    goto <bb 439>;
  else
    goto <bb 432>;

<bb 432>:
  D.49751_1614 = strcasecmp (D.45228_969, "t");
  if (D.49751_1614 == 0)
    goto <bb 439>;
  else
    goto <bb 433>;

<bb 433>:
  D.49752_1615 = strcasecmp (D.45228_969, "enabled");
  if (D.49752_1615 == 0)
    goto <bb 439>;
  else
    goto <bb 434>;

<bb 434>:
  D.49753_1616 = strcasecmp (D.45228_969, "active");
  if (D.49753_1616 == 0)
    goto <bb 439>;
  else
    goto <bb 435>;

<bb 435>:
  D.49754_1617 = strcasecmp (D.45228_969, "allow");
  if (D.49754_1617 == 0)
    goto <bb 439>;
  else
    goto <bb 436>;

<bb 436>:
  D.49755_1618 = switch_is_number (D.45228_969);
  if (D.49755_1618 != 0)
    goto <bb 437>;
  else
    goto <bb 438>;

<bb 437>:
  # DEBUG __nptr => D.45228_969
  D.49756_1619 = strtol (D.45228_969, 0B, 10);
  if (D.49756_1619 != 0)
    goto <bb 439>;
  else
    goto <bb 438>;

<bb 438>:

<bb 439>:
  # D.49746_1620 = PHI <1(429), 1(430), 1(431), 1(432), 1(433), 1(434), 1(435), 1(437), 0(438)>
  D.49746_1655 = D.49746_1620;
  D.49746_970 = D.49746_1655;
  if (D.49746_970 == 0)
    goto <bb 440>;
  else
    goto <bb 442>;

<bb 440>:
  D.44666_971 = m_28->m_proto;
  D.44829_972 = D.44666_971 != 257;
  D.44830_973 = got_webrtc_78 == 0;
  D.44831_974 = D.44829_972 && D.44830_973;
  if (D.44831_974 != 0)
    goto <bb 441>;
  else
    goto <bb 442>;

<bb 441>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  # DEBUG match => 0
  goto <bb 491> (done);

<bb 442>:
  crypto_976 = attr_33->a_value;
  # DEBUG crypto => crypto_976
  # DEBUG __nptr => crypto_976
  crypto_tag_1503 = strtol (crypto_976, 0B, 10);
  # DEBUG crypto_tag => NULL
  got_video_crypto_978 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_976, crypto_tag_1503, sdp_type_546(D));
  # DEBUG got_video_crypto => got_video_crypto_978

<bb 443>:
  # got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_978(442), got_video_crypto_61(410), got_video_crypto_61(419)>
  # DEBUG got_video_crypto => got_video_crypto_60
  attr_979 = attr_33->a_next;
  # DEBUG attr => attr_979

<bb 444>:
  # attr_33 = PHI <attr_894(403), attr_979(443)>
  # got_video_crypto_61 = PHI <got_video_crypto_59(403), got_video_crypto_60(443)>
  # DEBUG got_video_crypto => got_video_crypto_61
  # DEBUG attr => attr_33
  if (attr_33 != 0B)
    goto <bb 404>;
  else
    goto <bb 445>;

<bb 445>:
  rm_encoding_980 = map_136->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_980
  if (rm_encoding_980 == 0B)
    goto <bb 446>;
  else
    goto <bb 447>;

<bb 446>:
  # DEBUG rm_encoding => ""

<bb 447>:
  # rm_encoding_137 = PHI <rm_encoding_980(445), ""(446)>
  # DEBUG rm_encoding => rm_encoding_137
  # DEBUG i => 0
  goto <bb 463>;

<bb 448>:
  i.99_983 = (unsigned int) i_139;
  D.45237_984 = i.99_983 * 4;
  D.45238_985 = codec_array_84 + D.45237_984;
  imp_986 = *D.45238_985;
  # DEBUG imp => imp_986
  D.45239_987 = imp_986->codec_type;
  if (D.45239_987 != 1)
    goto <bb 462>;
  else
    goto <bb 449>;

<bb 449>:
  D.44530_988 = session_161(D)->channel;
  D.45242_989 = switch_channel_direction (D.44530_988);
  if (D.45242_989 == 0)
    goto <bb 450>;
  else
    goto <bb 451>;

<bb 450>:
  D.44530_990 = session_161(D)->channel;
  D.45245_991 = switch_channel_test_flag (D.44530_990, 114);
  if (D.45245_991 != 0)
    goto <bb 462>;
  else
    goto <bb 451>;

<bb 451>:
  D.45248_992 = map_136->rm_pt;
  D.45249_993 = (int) D.45248_992;
  D.45250_994 = imp_986->iananame;
  D.45251_995 = imp_986->ianacode;
  D.45252_996 = (int) D.45251_995;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45249_993, D.45250_994, D.45252_996);
  D.45256_997 = map_136->rm_encoding;
  # DEBUG s => D.45256_997
  if (D.45256_997 == 0B)
    goto <bb 454>;
  else
    goto <bb 452>;

<bb 452>:
  D.47958_1504 = *D.45256_997;
  if (D.47958_1504 == 0)
    goto <bb 454>;
  else
    goto <bb 453>;

<bb 453>:

<bb 454>:
  # D.47957_1505 = PHI <1(451), 1(452), 0(453)>
  if (D.47957_1505 != 0)
    goto <bb 456>;
  else
    goto <bb 455>;

<bb 455>:
  D.44471_999 = smh_186->mparams;
  D.44821_1000 = D.44471_999->ndlb;
  D.44937_1001 = (int) D.44821_1000;
  D.44938_1002 = D.44937_1001 & 1;
  if (D.44938_1002 != 0)
    goto <bb 456>;
  else
    goto <bb 458>;

<bb 456>:
  D.45248_1004 = map_136->rm_pt;
  D.45249_1005 = (int) D.45248_1004;
  if (D.45249_1005 <= 95)
    goto <bb 457>;
  else
    goto <bb 458>;

<bb 457>:
  D.45248_1006 = map_136->rm_pt;
  D.45249_1007 = (int) D.45248_1006;
  D.45251_1008 = imp_986->ianacode;
  D.45252_1009 = (int) D.45251_1008;
  vmatch_1010 = D.45249_1007 == D.45252_1009;
  # DEBUG vmatch => vmatch_1010
  goto <bb 459>;

<bb 458>:
  D.45250_1011 = imp_986->iananame;
  D.45260_1012 = strcasecmp (rm_encoding_137, D.45250_1011);
  vmatch_1013 = D.45260_1012 == 0;
  # DEBUG vmatch => vmatch_1013

<bb 459>:
  # vmatch_138 = PHI <vmatch_1010(457), vmatch_1013(458)>
  # DEBUG vmatch => vmatch_138
  if (vmatch_138 != 0)
    goto <bb 460>;
  else
    goto <bb 462>;

<bb 460>:
  D.45263_1014 = map_136->rm_rate;
  D.45264_1015 = imp_986->samples_per_second;
  if (D.45263_1014 == D.45264_1015)
    goto <bb 461>;
  else
    goto <bb 462>;

<bb 461>:
  matches[m_idx_110].imp = imp_986;
  matches[m_idx_110].map = map_136;
  D.45250_1016 = imp_986->iananame;
  D.45251_1017 = imp_986->ianacode;
  D.45252_1018 = (int) D.45251_1017;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45250_1016, D.45252_1018);
  m_idx_1019 = m_idx_110 + 1;
  # DEBUG m_idx => m_idx_1019

<bb 462>:
  # m_idx_109 = PHI <m_idx_110(448), m_idx_110(450), m_idx_110(460), m_idx_110(459), m_idx_1019(461)>
  # DEBUG m_idx => m_idx_109
  i_1021 = i_139 + 1;
  # DEBUG i => i_1021

<bb 463>:
  # m_idx_110 = PHI <m_idx_111(447), m_idx_109(462)>
  # i_139 = PHI <0(447), i_1021(462)>
  # DEBUG i => i_139
  # DEBUG m_idx => m_idx_110
  if (i_139 < total_codecs_85)
    goto <bb 448>;
  else
    goto <bb 464>;

<bb 464>:
  map_1022 = map_136->rm_next;
  # DEBUG map => map_1022

<bb 465>:
  # got_video_crypto_62 = PHI <got_video_crypto_64(391), got_video_crypto_61(464)>
  # m_idx_111 = PHI <0(391), m_idx_110(464)>
  # map_136 = PHI <map_884(391), map_1022(464)>
  # DEBUG map => map_136
  # DEBUG m_idx => m_idx_111
  # DEBUG got_video_crypto => got_video_crypto_62
  if (map_136 != 0B)
    goto <bb 392>;
  else
    goto <bb 466>;

<bb 466>:
  D.45002_1023 = smh_186->crypto_mode;
  D.45003_1024 = D.45002_1023 == 1;
  D.45267_1025 = got_video_crypto_62 <= 0;
  D.45268_1026 = D.45003_1024 && D.45267_1025;
  if (D.45268_1026 != 0)
    goto <bb 467>;
  else
    goto <bb 468>;

<bb 467>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
  # DEBUG vmatch => 0
  # DEBUG m_idx => 0

<bb 468>:
  # m_idx_112 = PHI <m_idx_111(466), 0(467)>
  # DEBUG m_idx => m_idx_112
  if (m_idx_112 != 0)
    goto <bb 469>;
  else
    goto <bb 489>;

<bb 469>:
  # DEBUG j => 0
  if (greedy_47 != 0)
    goto <bb 470>;
  else
    goto <bb 471>;

<bb 470>:
  greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);

<bb 471>:
  # DEBUG vmatch => 1
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;
  # DEBUG j => 0
  goto <bb 476>;

<bb 472>:
  D.45275_1032 = matches[j_141].map;
  D.45276_1033 = D.45275_1032->rm_encoding;
  D.45275_1034 = matches[j_141].map;
  D.45277_1035 = D.45275_1034->rm_fmtp;
  D.45275_1036 = matches[j_141].map;
  D.45278_1037 = D.45275_1036->rm_pt;
  D.45279_1038 = (uint32_t) D.45278_1037;
  D.45280_1039 = matches[j_141].imp;
  D.45281_1040 = D.45280_1039->samples_per_second;
  D.45280_1041 = matches[j_141].imp;
  D.45282_1042 = D.45280_1041->microseconds_per_packet;
  D.45283_1043 = D.45282_1042 / 1000;
  D.45284_1044 = (uint32_t) D.45283_1043;
  pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);
  # DEBUG pmap => pmap_1045
  if (j_141 == 0)
    goto <bb 473>;
  else
    goto <bb 475>;

<bb 473>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1045;
  D.45287_1046 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45287_1046->current = 1;
  D.45288_1047 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
  if (D.45288_1047 != 0B)
    goto <bb 474>;
  else
    goto <bb 475>;

<bb 474>:
  D.45288_1048 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
  D.45291_1049 = pmap_1045->pt;
  switch_rtp_set_default_payload (D.45288_1048, D.45291_1049);

<bb 475>:
  mimp_1050 = matches[j_141].imp;
  # DEBUG mimp => mimp_1050
  map_1051 = matches[j_141].map;
  # DEBUG map => map_1051
  D.45256_1052 = map_1051->rm_encoding;
  D.45292_1053 = switch_core_perform_session_strdup (session_161(D), D.45256_1052, "src/switch_core_media.c", &__func__, 3804);
  pmap_1045->rm_encoding = D.45292_1053;
  D.45248_1054 = map_1051->rm_pt;
  D.45293_1055 = (unsigned char) D.45248_1054;
  pmap_1045->recv_pt = D.45293_1055;
  D.45263_1056 = map_1051->rm_rate;
  pmap_1045->rm_rate = D.45263_1056;
  D.45294_1057 = mimp_1050->microseconds_per_packet;
  D.45295_1058 = D.45294_1057 / 1000;
  D.45296_1059 = (uint32_t) D.45295_1058;
  pmap_1045->codec_ms = D.45296_1059;
  D.45086_1060 = connection_125->c_address;
  D.45297_1061 = switch_core_perform_session_strdup (session_161(D), D.45086_1060, "src/switch_core_media.c", &__func__, 3810);
  pmap_1045->remote_sdp_ip = D.45297_1061;
  D.44697_1062 = m_28->m_port;
  D.45088_1063 = (short unsigned int) D.44697_1062;
  pmap_1045->remote_sdp_port = D.45088_1063;
  D.45298_1064 = map_1051->rm_fmtp;
  D.45299_1065 = switch_core_perform_session_strdup (session_161(D), D.45298_1064, "src/switch_core_media.c", &__func__, 3813);
  pmap_1045->rm_fmtp = D.45299_1065;
  D.45248_1066 = map_1051->rm_pt;
  D.45293_1067 = (unsigned char) D.45248_1066;
  pmap_1045->agreed_pt = D.45293_1067;
  j_1068 = j_141 + 1;
  # DEBUG j => j_1068

<bb 476>:
  # j_141 = PHI <0(471), j_1068(475)>
  # DEBUG j => j_141
  if (j_141 < m_idx_112)
    goto <bb 472>;
  else
    goto <bb 477>;

<bb 477>:
  D.45287_1069 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45300_1070 = D.45287_1069->remote_sdp_port;
  D.45301_1071 = (int) D.45300_1070;
  switch_snprintf (&tmp, 50, "%d", D.45301_1071);
  D.44530_1072 = session_161(D)->channel;
  D.45287_1073 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45302_1074 = D.45287_1073->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_1072, "remote_video_ip", D.45302_1074, 1);
  D.44530_1075 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1075, "remote_video_port", &tmp, 1);
  D.44530_1076 = session_161(D)->channel;
  D.45287_1077 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45303_1078 = D.45287_1077->rm_fmtp;
  switch_channel_set_variable_var_check (D.44530_1076, "rtp_video_fmtp", D.45303_1078, 1);
  D.45287_1079 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45304_1080 = D.45287_1079->agreed_pt;
  D.45305_1081 = (int) D.45304_1080;
  switch_snprintf (&tmp, 50, "%d", D.45305_1081);
  D.44530_1082 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1082, "rtp_video_pt", &tmp, 1);
  switch_core_media_check_video_codecs (session_161(D));
  D.45287_1083 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45306_1084 = D.45287_1083->recv_pt;
  D.45307_1085 = (int) D.45306_1084;
  switch_snprintf (&tmp, 50, "%d", D.45307_1085);
  D.44530_1086 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1086, "rtp_video_recv_pt", &tmp, 1);
  if (match_16 == 0)
    goto <bb 478>;
  else
    goto <bb 479>;

<bb 478>:
  # DEBUG match => 1

<bb 479>:
  # match_14 = PHI <match_16(477), 1(478)>
  # DEBUG match => match_14
  D.45313_1091 = &MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].read_codec;
  # DEBUG codec => D.45313_1091
  if (D.45313_1091 != 0B)
    goto <bb 480>;
  else
    goto <bb 484>;

<bb 480>:
  D.47966_1506 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
  D.47965_1507 = D.47966_1506 & 256;
  if (D.47965_1507 != 0)
    goto <bb 481>;
  else
    goto <bb 484>;

<bb 481>:
  D.47964_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
  if (D.47964_1508 != 0B)
    goto <bb 482>;
  else
    goto <bb 484>;

<bb 482>:
  D.47963_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
  if (D.47963_1509 != 0B)
    goto <bb 483>;
  else
    goto <bb 484>;

<bb 483>:
  D.47962_1510 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
  if (D.47962_1510 != 0B)
    goto <bb 485>;
  else
    goto <bb 484>;

<bb 484>:

<bb 485>:
  # iftmp.104_1511 = PHI <1(483), 0(484)>
  if (iftmp.104_1511 != 0)
    goto <bb 486>;
  else
    goto <bb 487>;

<bb 486>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;

<bb 487>:
  D.45317_1093 = switch_core_media_set_video_codec (session_161(D), 0);
  if (D.45317_1093 == 0)
    goto <bb 488>;
  else
    goto <bb 489>;

<bb 488>:
  check_ice (smh_186, 1, sdp_198, m_28);

<bb 489>:
  # match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
  # best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
  # cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
  # got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
  # got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
  # got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
  # codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
  # m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
  # nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
  # DEBUG nm_idx => nm_idx_121
  # DEBUG m_idx => m_idx_113
  # DEBUG codec_ms => codec_ms_94
  # DEBUG got_audio => got_audio_66
  # DEBUG got_video_crypto => got_video_crypto_63
  # DEBUG got_crypto => got_crypto_55
  # DEBUG cng_pt => cng_pt_26
  # DEBUG best_te => best_te_22
  # DEBUG match => match_15
  m_1094 = m_28->m_next;
  # DEBUG m => m_1094

<bb 490>:
  # match_16 = PHI <0(131), match_15(489)>
  # best_te_23 = PHI <0(131), best_te_22(489)>
  # cng_pt_27 = PHI <0(131), cng_pt_26(489)>
  # m_28 = PHI <m_370(131), m_1094(489)>
  # got_crypto_56 = PHI <0(131), got_crypto_55(489)>
  # got_video_crypto_64 = PHI <0(131), got_video_crypto_63(489)>
  # got_audio_67 = PHI <0(131), got_audio_66(489)>
  # got_avp_69 = PHI <0(131), got_avp_68(489)>
  # got_savp_75 = PHI <0(131), got_savp_74(489)>
  # got_udptl_77 = PHI <0(131), got_udptl_76(489)>
  # got_webrtc_79 = PHI <0(131), got_webrtc_78(489)>
  # codec_ms_95 = PHI <0(131), codec_ms_94(489)>
  # m_idx_114 = PHI <0(131), m_idx_113(489)>
  # nm_idx_122 = PHI <0(131), nm_idx_121(489)>
  # DEBUG nm_idx => nm_idx_122
  # DEBUG m_idx => m_idx_114
  # DEBUG codec_ms => codec_ms_95
  # DEBUG got_webrtc => got_webrtc_79
  # DEBUG got_udptl => got_udptl_77
  # DEBUG got_savp => got_savp_75
  # DEBUG got_video_savp => NULL
  # DEBUG got_video_avp => NULL
  # DEBUG got_avp => got_avp_69
  # DEBUG got_audio => got_audio_67
  # DEBUG got_video_crypto => got_video_crypto_64
  # DEBUG got_crypto => got_crypto_56
  # DEBUG m => m_28
  # DEBUG cng_pt => cng_pt_27
  # DEBUG best_te => best_te_23
  # DEBUG match => match_16
  if (m_28 != 0B)
    goto <bb 132>;
  else
    goto <bb 491> (done);

  # match_17 = PHI <1(148), 0(150), 0(168), 1(166), 0(223), 0(229), 0(233), 0(390), 0(441), match_16(490), 1(165), 1(178)>
done:
  # DEBUG match => match_17
  if (parser_196 != 0B)
    goto <bb 492>;
  else
    goto <bb 493>;

<bb 492>:
  sdp_parser_free (parser_196);

<bb 493>:
  D.44471_1095 = smh_186->mparams;
  D.44471_1095->cng_pt = cng_pt_27;

<bb 494>:
  # match_142 = PHI <0(4), 0(5), 0(7), match_17(493)>
  return match_142;

}



;; Function switch_core_media_proxy_remote_addr (switch_core_media_proxy_remote_addr)

switch_core_media_proxy_remote_addr (struct switch_core_session_t * session, const char * sdp_str)
{
  int D.47994;
  int D.47991;
  int D.47988;
  int D.47985;
  int D.47982;
  int D.47979;
  const char D.47976;
  int D.47975;
  const char D.47972;
  int D.47971;
  register int __result;
  register int __result;
  switch_port_t remote_rtcp_port;
  const char * rport;
  switch_port_t remote_port;
  char * remote_host;
  switch_port_t remote_rtcp_port;
  const char * rport;
  char * tmp;
  static const char __func__[36] = "switch_core_media_proxy_remote_addr";
  static const char __PRETTY_FUNCTION__[36] = "switch_core_media_proxy_remote_addr";
  struct switch_media_handle_t * smh;
  switch_status_t status;
  const char * val;
  int x;
  char * pe;
  char * vid_port_ptr;
  char * port_ptr;
  char * ip_ptr;
  char * p;
  char rvp[512];
  char rp[512];
  char rip[512];
  const char * err;
  int32_t D.44351;
  uint32_t D.44348;
  int D.44347;
  int32_t D.44343;
  switch_status_t D.44337;
  int D.44260;
  switch_port_t D.44258;
  char * D.44256;
  int D.39206;
  _Bool D.44254;
  _Bool D.44253;
  _Bool D.44252;
  uint8_t D.44248;
  struct switch_rtp_t * D.44247;
  int32_t D.44244;
  uint32_t D.44241;
  int D.44240;
  uint32_t D.44236;
  int32_t D.44233;
  const char * err.83;
  switch_status_t D.44226;
  uint8_t D.44218;
  struct switch_rtp_t * D.44217;
  int D.44215;
  int D.39191;
  switch_port_t D.44208;
  char * D.44205;
  struct switch_channel_t * D.44204;
  short unsigned int D.44203;
  char * D.44201;
  struct payload_map_t * D.44200;
  char D.44197;
  short unsigned int D.44196;
  char * D.44194;
  struct payload_map_t * D.44193;
  char D.44192;
  char D.44190;
  char D.44184;
  char D.44180;
  char D.44178;
  _Bool D.44175;
  _Bool D.44174;
  _Bool D.44173;
  char D.44172;
  char D.44171;
  _Bool D.44168;
  _Bool D.44167;
  _Bool D.44166;
  unsigned int x.82;
  char D.44163;
  size_t D.44162;
  _Bool D.44160;
  _Bool D.44159;
  _Bool D.44158;
  struct switch_core_media_params_t * D.44141;

<bb 2>:
  rip = "";
  rp = "";
  rvp = "";
  # DEBUG ip_ptr => 0B
  # DEBUG port_ptr => 0B
  # DEBUG vid_port_ptr => 0B
  # DEBUG status => 1
  if (session_25(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4152, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_26 = session_25(D)->media_handle;
  # DEBUG smh => smh_26
  if (smh_26 == 0B)
    goto <bb 89>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#17 => &smh_26->engines
  # DEBUG a_engine => D#17
  # DEBUG D#16 => &smh_26->engines[1]
  # DEBUG v_engine => D#16
  # DEBUG s => sdp_str_30(D)
  if (sdp_str_30(D) == 0B)
    goto <bb 8>;
  else
    goto <bb 6>;

<bb 6>:
  D.47972_363 = *sdp_str_30(D);
  if (D.47972_363 == 0)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:

<bb 8>:
  # D.47971_364 = PHI <1(5), 1(6), 0(7)>
  if (D.47971_364 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.44141_32 = smh_26->mparams;
  sdp_str_33 = D.44141_32->remote_sdp_str;
  # DEBUG sdp_str => sdp_str_33

<bb 10>:
  # sdp_str_1 = PHI <sdp_str_30(D)(8), sdp_str_33(9)>
  # DEBUG sdp_str => sdp_str_1
  # DEBUG s => sdp_str_1
  if (sdp_str_1 == 0B)
    goto <bb 13>;
  else
    goto <bb 11>;

<bb 11>:
  D.47976_365 = *sdp_str_1;
  if (D.47976_365 == 0)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:

<bb 13>:
  # D.47975_366 = PHI <1(10), 1(11), 0(12)>
  if (D.47975_366 != 0)
    goto <bb 88> (end);
  else
    goto <bb 14>;

<bb 14>:
  p_35 = switch_stristr ("c=IN IP4 ", sdp_str_1);
  # DEBUG p => p_35
  if (p_35 != 0B)
    goto <bb 16>;
  else
    goto <bb 15>;

<bb 15>:
  p_36 = switch_stristr ("c=IN IP6 ", sdp_str_1);
  # DEBUG p => p_36
  if (p_36 != 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  # p_2 = PHI <p_35(14), p_36(15)>
  # DEBUG p => p_2
  ip_ptr_37 = p_2 + 9;
  # DEBUG ip_ptr => ip_ptr_37

<bb 17>:
  # ip_ptr_6 = PHI <0B(15), ip_ptr_37(16)>
  # DEBUG ip_ptr => ip_ptr_6
  p_38 = switch_stristr ("m=audio ", sdp_str_1);
  # DEBUG p => p_38
  if (p_38 != 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  port_ptr_39 = p_38 + 8;
  # DEBUG port_ptr => port_ptr_39

<bb 19>:
  # port_ptr_7 = PHI <0B(17), port_ptr_39(18)>
  # DEBUG port_ptr => port_ptr_7
  p_40 = switch_stristr ("m=image ", sdp_str_1);
  # DEBUG p => p_40
  if (p_40 != 0B)
    goto <bb 20>;
  else
    goto <bb 23>;

<bb 20>:
  tmp_41 = p_40 + 8;
  # DEBUG tmp => tmp_41
  if (tmp_41 != 0B)
    goto <bb 21>;
  else
    goto <bb 23>;

<bb 21>:
  # DEBUG __nptr => tmp_41
  D.47979_367 = strtol (tmp_41, 0B, 10);
  if (D.47979_367 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  # DEBUG port_ptr => tmp_41

<bb 23>:
  # port_ptr_8 = PHI <port_ptr_7(19), port_ptr_7(20), port_ptr_7(21), tmp_41(22)>
  # DEBUG port_ptr => port_ptr_8
  p_44 = switch_stristr ("m=video ", sdp_str_1);
  # DEBUG p => p_44
  if (p_44 != 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  vid_port_ptr_45 = p_44 + 8;
  # DEBUG vid_port_ptr => vid_port_ptr_45

<bb 25>:
  # vid_port_ptr_9 = PHI <0B(23), vid_port_ptr_45(24)>
  # DEBUG vid_port_ptr => vid_port_ptr_9
  D.44158_46 = ip_ptr_6 == 0B;
  D.44159_47 = port_ptr_8 == 0B;
  D.44160_48 = D.44158_46 || D.44159_47;
  if (D.44160_48 != 0)
    goto <bb 88> (end);
  else
    goto <bb 26>;

<bb 26>:
  # DEBUG p => ip_ptr_6
  D.44162_50 = strlen (ip_ptr_6);
  pe_51 = ip_ptr_6 + D.44162_50;
  # DEBUG pe => pe_51
  # DEBUG x => 0
  goto <bb 28>;

<bb 27>:
  D.44163_68 = *p_3;
  rip[x_10] = D.44163_68;
  x_69 = x_10 + 1;
  # DEBUG x => x_69
  p_70 = p_3 + 1;
  # DEBUG p => p_70
  if (p_70 >= pe_51)
    goto <bb 88> (end);
  else
    goto <bb 28>;

<bb 28>:
  # p_3 = PHI <ip_ptr_6(26), p_70(27)>
  # x_10 = PHI <0(26), x_69(27)>
  # DEBUG x => x_10
  # DEBUG p => p_3
  x.82_53 = (unsigned int) x_10;
  D.44166_54 = x.82_53 <= 510;
  D.44167_55 = p_3 != 0B;
  D.44168_56 = D.44166_54 && D.44167_55;
  if (D.44168_56 != 0)
    goto <bb 29>;
  else
    goto <bb 35>;

<bb 29>:
  D.44163_57 = *p_3;
  if (D.44163_57 != 0)
    goto <bb 30>;
  else
    goto <bb 35>;

<bb 30>:
  D.44171_58 = *p_3;
  D.44172_59 = D.44171_58 + 208;
  D.44173_60 = D.44172_59 <= 9;
  D.44174_61 = D.44171_58 == 46;
  D.44175_62 = D.44173_60 || D.44174_61;
  if (D.44175_62 != 0)
    goto <bb 27>;
  else
    goto <bb 31>;

<bb 31>:
  D.44163_63 = *p_3;
  if (D.44163_63 == 58)
    goto <bb 27>;
  else
    goto <bb 32>;

<bb 32>:
  D.44163_64 = *p_3;
  D.44178_65 = D.44163_64 + 159;
  if (D.44178_65 <= 5)
    goto <bb 27>;
  else
    goto <bb 33>;

<bb 33>:
  D.44163_66 = *p_3;
  D.44180_67 = D.44163_66 + 191;
  if (D.44180_67 <= 5)
    goto <bb 27>;
  else
    goto <bb 35>;

<bb 34>:
  D.44163_80 = *p_4;
  rp[x_11] = D.44163_80;
  x_81 = x_11 + 1;
  # DEBUG x => x_81
  p_82 = p_4 + 1;
  # DEBUG p => p_82
  if (p_82 >= pe_51)
    goto <bb 88> (end);
  else
    goto <bb 36>;

<bb 35>:
  # p_71 = PHI <port_ptr_8(29), port_ptr_8(33), port_ptr_8(28)>
  x_83 = 0;

<bb 36>:
  # p_4 = PHI <p_71(35), p_82(34)>
  # x_11 = PHI <0(35), x_81(34)>
  # DEBUG x => x_11
  # DEBUG p => p_4
  x.82_73 = (unsigned int) x_11;
  D.44166_74 = x.82_73 <= 510;
  D.44167_75 = p_4 != 0B;
  D.44168_76 = D.44166_74 && D.44167_75;
  if (D.44168_76 != 0)
    goto <bb 37>;
  else
    goto <bb 40>;

<bb 37>:
  D.44163_77 = *p_4;
  if (D.44163_77 != 0)
    goto <bb 38>;
  else
    goto <bb 40>;

<bb 38>:
  D.44163_78 = *p_4;
  D.44184_79 = D.44163_78 + 208;
  if (D.44184_79 <= 9)
    goto <bb 34>;
  else
    goto <bb 40>;

<bb 39>:
  D.44163_92 = *p_5;
  rvp[x_12] = D.44163_92;
  x_93 = x_12 + 1;
  # DEBUG x => x_93
  p_94 = p_5 + 1;
  # DEBUG p => p_94
  if (p_94 >= pe_51)
    goto <bb 88> (end);
  else
    goto <bb 41>;

<bb 40>:
  # p_296 = PHI <vid_port_ptr_9(37), vid_port_ptr_9(38), vid_port_ptr_9(36)>
  x_49 = 0;

<bb 41>:
  # p_5 = PHI <p_296(40), p_94(39)>
  # x_12 = PHI <0(40), x_93(39)>
  # DEBUG x => x_12
  # DEBUG p => p_5
  x.82_85 = (unsigned int) x_12;
  D.44166_86 = x.82_85 <= 510;
  D.44167_87 = p_5 != 0B;
  D.44168_88 = D.44166_86 && D.44167_87;
  if (D.44168_88 != 0)
    goto <bb 42>;
  else
    goto <bb 44>;

<bb 42>:
  D.44163_89 = *p_5;
  if (D.44163_89 != 0)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  D.44163_90 = *p_5;
  D.44184_91 = D.44163_90 + 208;
  if (D.44184_91 <= 9)
    goto <bb 39>;
  else
    goto <bb 44>;

<bb 44>:
  D.44190_95 = rip[0];
  if (D.44190_95 == 0)
    goto <bb 46>;
  else
    goto <bb 45>;

<bb 45>:
  D.44192_96 = rp[0];
  if (D.44192_96 == 0)
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4225, session_25(D), 3, "invalid SDP\n");
  goto <bb 88> (end);

<bb 47>:
  D.44193_97 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].cur_payload_map;
  D.44194_98 = switch_core_perform_session_strdup (session_25(D), &rip, "src/switch_core_media.c", &__func__, 4229);
  D.44193_97->remote_sdp_ip = D.44194_98;
  D.44193_99 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].cur_payload_map;
  # DEBUG __nptr => &rp
  D.47982_368 = strtol (&rp, 0B, 10);
  D.44196_101 = (short unsigned int) D.47982_368;
  D.44193_99->remote_sdp_port = D.44196_101;
  D.44197_102 = rvp[0];
  if (D.44197_102 != 0)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  D.44200_103 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].cur_payload_map;
  D.44201_104 = switch_core_perform_session_strdup (session_25(D), &rip, "src/switch_core_media.c", &__func__, 4233);
  D.44200_103->remote_sdp_ip = D.44201_104;
  D.44200_105 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].cur_payload_map;
  # DEBUG __nptr => &rvp
  D.47985_369 = strtol (&rvp, 0B, 10);
  D.44203_107 = (short unsigned int) D.47985_369;
  D.44200_105->remote_sdp_port = D.44203_107;
  D.44204_108 = session_25(D)->channel;
  switch_channel_set_flag_value (D.44204_108, 98, 1);
  D.44204_109 = session_25(D)->channel;
  switch_channel_set_flag_value (D.44204_109, 23, 1);

<bb 49>:
  D.44200_110 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].cur_payload_map;
  D.44205_111 = D.44200_110->remote_sdp_ip;
  if (D.44205_111 != 0B)
    goto <bb 50>;
  else
    goto <bb 68>;

<bb 50>:
  D.44200_112 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].cur_payload_map;
  D.44208_113 = D.44200_112->remote_sdp_port;
  if (D.44208_113 != 0)
    goto <bb 51>;
  else
    goto <bb 68>;

<bb 51>:
  D.44200_114 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].cur_payload_map;
  D.44205_115 = D.44200_114->remote_sdp_ip;
  D.39191_116 = __builtin_strcmp (D.44205_115, &rip);
  if (D.39191_116 == 0)
    goto <bb 52>;
  else
    goto <bb 54>;

<bb 52>:
  # DEBUG __nptr => &rvp
  D.47988_370 = strtol (&rvp, 0B, 10);
  D.44200_118 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].cur_payload_map;
  D.44208_119 = D.44200_118->remote_sdp_port;
  D.44215_120 = (int) D.44208_119;
  if (D.44215_120 == D.47988_370)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  D.44200_121 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].cur_payload_map;
  D.44205_122 = D.44200_121->remote_sdp_ip;
  D.44200_123 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].cur_payload_map;
  D.44208_124 = D.44200_123->remote_sdp_port;
  D.44215_125 = (int) D.44208_124;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4241, session_25(D), 7, "Remote video address:port [%s:%d] has not changed.\n", D.44205_122, D.44215_125);
  goto <bb 68>;

<bb 54>:
  D.44204_126 = session_25(D)->channel;
  switch_channel_set_flag_value (D.44204_126, 98, 1);
  D.44204_127 = session_25(D)->channel;
  switch_channel_set_flag_value (D.44204_127, 23, 1);
  D.44217_128 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].rtp_session;
  D.44218_129 = switch_rtp_ready (D.44217_128);
  if (D.44218_129 != 0)
    goto <bb 55>;
  else
    goto <bb 68>;

<bb 55>:
  # DEBUG rport => 0B
  remote_rtcp_port_131 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_131
  if (remote_rtcp_port_131 == 0)
    goto <bb 56>;
  else
    goto <bb 58>;

<bb 56>:
  D.44204_132 = session_25(D)->channel;
  rport_133 = switch_channel_get_variable_dup (D.44204_132, "rtp_remote_video_rtcp_port", 1, -1);
  # DEBUG rport => rport_133
  if (rport_133 != 0B)
    goto <bb 57>;
  else
    goto <bb 58>;

<bb 57>:
  # DEBUG __nptr => rport_133
  D.47991_371 = strtol (rport_133, 0B, 10);
  remote_rtcp_port_135 = (switch_port_t) D.47991_371;
  # DEBUG remote_rtcp_port => remote_rtcp_port_135

<bb 58>:
  # remote_rtcp_port_14 = PHI <remote_rtcp_port_131(55), remote_rtcp_port_131(56), remote_rtcp_port_135(57)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_14
  D.44217_136 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].rtp_session;
  D.44200_137 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].cur_payload_map;
  D.44205_138 = D.44200_137->remote_sdp_ip;
  D.44200_139 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].cur_payload_map;
  D.44208_140 = D.44200_139->remote_sdp_port;
  D.44226_141 = switch_rtp_set_remote_address (D.44217_136, D.44205_138, D.44208_140, remote_rtcp_port_14, 1, &err);
  if (D.44226_141 != 0)
    goto <bb 59>;
  else
    goto <bb 60>;

<bb 59>:
  err.83_142 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4259, session_25(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", err.83_142);
  goto <bb 68>;

<bb 60>:
  D.44200_143 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].cur_payload_map;
  D.44205_144 = D.44200_143->remote_sdp_ip;
  D.44200_145 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].cur_payload_map;
  D.44208_146 = D.44200_145->remote_sdp_port;
  D.44215_147 = (int) D.44208_146;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4261, session_25(D), 7, "VIDEO RTP CHANGING DEST TO: [%s:%d]\n", D.44205_144, D.44215_147);
  D.44233_148 = switch_media_handle_test_media_flag (smh_26, 10);
  if (D.44233_148 == 0)
    goto <bb 61>;
  else
    goto <bb 66>;

<bb 61>:
  D.44204_149 = session_25(D)->channel;
  D.44236_150 = switch_channel_test_flag (D.44204_149, 15);
  if (D.44236_150 == 0)
    goto <bb 62>;
  else
    goto <bb 66>;

<bb 62>:
  D.44204_151 = session_25(D)->channel;
  val_152 = switch_channel_get_variable_dup (D.44204_151, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_152
  if (val_152 == 0B)
    goto <bb 64>;
  else
    goto <bb 63>;

<bb 63>:
  D.44240_153 = switch_true (val_152);
  if (D.44240_153 == 0)
    goto <bb 64>;
  else
    goto <bb 66>;

<bb 64>:
  D.44204_154 = session_25(D)->channel;
  D.44241_155 = switch_channel_test_flag (D.44204_154, 106);
  if (D.44241_155 == 0)
    goto <bb 65>;
  else
    goto <bb 66>;

<bb 65>:
  D.44217_156 = MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].rtp_session;
  switch_rtp_set_flag (D.44217_156, 7);
  start_video_thread (session_25(D));

<bb 66>:
  D.44244_157 = switch_media_handle_test_media_flag (smh_26, 2);
  if (D.44244_157 != 0)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  MEM[(struct switch_rtp_engine_t *)smh_26 + 11496B].check_frames = 0;

<bb 68>:
  D.44247_158 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].rtp_session;
  D.44248_159 = switch_rtp_ready (D.44247_158);
  if (D.44248_159 != 0)
    goto <bb 69>;
  else
    goto <bb 88> (end);

<bb 69>:
  D.44247_160 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].rtp_session;
  remote_host_161 = switch_rtp_get_remote_host (D.44247_160);
  # DEBUG remote_host => remote_host_161
  D.44247_162 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].rtp_session;
  remote_port_163 = switch_rtp_get_remote_port (D.44247_162);
  # DEBUG remote_port => remote_port_163
  # DEBUG rport => 0B
  # DEBUG remote_rtcp_port => 0
  D.44252_166 = remote_host_161 != 0B;
  D.44253_167 = remote_port_163 != 0;
  D.44254_168 = D.44252_166 && D.44253_167;
  if (D.44254_168 != 0)
    goto <bb 70>;
  else
    goto <bb 73>;

<bb 70>:
  D.44193_169 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].cur_payload_map;
  D.44256_170 = D.44193_169->remote_sdp_ip;
  D.39206_171 = __builtin_strcmp (remote_host_161, D.44256_170);
  if (D.39206_171 == 0)
    goto <bb 71>;
  else
    goto <bb 73>;

<bb 71>:
  D.44193_172 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].cur_payload_map;
  D.44258_173 = D.44193_172->remote_sdp_port;
  if (D.44258_173 == remote_port_163)
    goto <bb 72>;
  else
    goto <bb 73>;

<bb 72>:
  D.44193_174 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].cur_payload_map;
  D.44256_175 = D.44193_174->remote_sdp_ip;
  D.44193_176 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].cur_payload_map;
  D.44258_177 = D.44193_176->remote_sdp_port;
  D.44260_178 = (int) D.44258_177;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4286, session_25(D), 7, "Remote address:port [%s:%d] has not changed.\n", D.44256_175, D.44260_178);
  # DEBUG status => 11
  goto <bb 88> (end);

<bb 73>:
  if (remote_host_161 != 0B)
    goto <bb 74>;
  else
    goto <bb 77>;

<bb 74>:
  # DEBUG __s2_len => 7
  __result_220 = __builtin_strcmp (remote_host_161, "0.0.0.0");
  if (__result_220 == 0)
    goto <bb 76>;
  else
    goto <bb 75>;

<bb 75>:
  # DEBUG __s2_len => 7
  D.44193_263 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].cur_payload_map;
  D.44256_264 = D.44193_263->remote_sdp_ip;
  __result_265 = __builtin_strcmp (D.44256_264, "0.0.0.0");
  if (__result_265 == 0)
    goto <bb 76>;
  else
    goto <bb 77>;

<bb 76>:
  D.44193_267 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].cur_payload_map;
  D.44256_268 = D.44193_267->remote_sdp_ip;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4292, session_25(D), 7, "Remote address changed from [%s] to [%s]. Ignoring...\n", D.44256_268, remote_host_161);
  # DEBUG status => 11
  goto <bb 88> (end);

<bb 77>:
  D.44204_270 = session_25(D)->channel;
  rport_271 = switch_channel_get_variable_dup (D.44204_270, "rtp_remote_audio_rtcp_port", 1, -1);
  # DEBUG rport => rport_271
  if (rport_271 != 0B)
    goto <bb 78>;
  else
    goto <bb 79>;

<bb 78>:
  # DEBUG __nptr => rport_271
  D.47994_372 = strtol (rport_271, 0B, 10);
  remote_rtcp_port_273 = (switch_port_t) D.47994_372;
  # DEBUG remote_rtcp_port => remote_rtcp_port_273

<bb 79>:
  # remote_rtcp_port_15 = PHI <0(77), remote_rtcp_port_273(78)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_15
  D.44247_274 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].rtp_session;
  D.44193_275 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].cur_payload_map;
  D.44256_276 = D.44193_275->remote_sdp_ip;
  D.44193_277 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].cur_payload_map;
  D.44258_278 = D.44193_277->remote_sdp_port;
  D.44337_279 = switch_rtp_set_remote_address (D.44247_274, D.44256_276, D.44258_278, remote_rtcp_port_15, 1, &err);
  if (D.44337_279 != 0)
    goto <bb 80>;
  else
    goto <bb 81>;

<bb 80>:
  err.83_280 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4305, session_25(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.83_280);
  # DEBUG status => 9
  goto <bb 88> (end);

<bb 81>:
  D.44193_282 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].cur_payload_map;
  D.44256_283 = D.44193_282->remote_sdp_ip;
  D.44193_284 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].cur_payload_map;
  D.44258_285 = D.44193_284->remote_sdp_port;
  D.44260_286 = (int) D.44258_285;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4308, session_25(D), 7, "AUDIO RTP CHANGING DEST TO: [%s:%d]\n", D.44256_283, D.44260_286);
  D.44343_287 = switch_media_handle_test_media_flag (smh_26, 10);
  if (D.44343_287 == 0)
    goto <bb 82>;
  else
    goto <bb 86>;

<bb 82>:
  D.44204_288 = session_25(D)->channel;
  val_289 = switch_channel_get_variable_dup (D.44204_288, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_289
  if (val_289 == 0B)
    goto <bb 84>;
  else
    goto <bb 83>;

<bb 83>:
  D.44347_290 = switch_true (val_289);
  if (D.44347_290 == 0)
    goto <bb 84>;
  else
    goto <bb 86>;

<bb 84>:
  D.44204_291 = session_25(D)->channel;
  D.44348_292 = switch_channel_test_flag (D.44204_291, 106);
  if (D.44348_292 == 0)
    goto <bb 85>;
  else
    goto <bb 86>;

<bb 85>:
  D.44247_293 = MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].rtp_session;
  switch_rtp_set_flag (D.44247_293, 7);

<bb 86>:
  D.44351_294 = switch_media_handle_test_media_flag (smh_26, 2);
  if (D.44351_294 != 0)
    goto <bb 87>;
  else
    goto <bb 88> (end);

<bb 87>:
  MEM[(struct switch_rtp_engine_t *)smh_26 + 80B].check_frames = 0;

  # status_13 = PHI <1(13), 1(25), 1(27), 1(34), 1(39), 1(46), 1(68), 11(72), 11(76), 9(80), 0(87), 0(86)>
end:
  # DEBUG status => status_13

<bb 89>:
  # status_18 = PHI <1(4), status_13(88)>
  return status_18;

}



;; Function switch_core_media_check_nat (switch_core_media_check_nat)

switch_core_media_check_nat (struct switch_media_handle_t * smh, const char * network_ip)
{
  switch_bool_t D.44130;
  char * D.44129;
  switch_bool_t D.44127;
  char * D.44125;
  struct switch_core_media_params_t * D.44124;
  int D.44120;

<bb 2>:
  if (network_ip_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("network_ip", "src/switch_core_media.c", 4331, &__PRETTY_FUNCTION__);

<bb 4>:
  D.44124_4 = smh_3(D)->mparams;
  D.44125_5 = D.44124_4->extsipip;
  if (D.44125_5 != 0B)
    goto <bb 5>;
  else
    goto <bb 7>;

<bb 5>:
  D.44127_6 = switch_check_network_list_ip_token (network_ip_2(D), "loopback.auto", 0B);
  if (D.44127_6 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.44124_7 = smh_3(D)->mparams;
  D.44129_8 = D.44124_7->local_network;
  D.44130_9 = switch_check_network_list_ip_token (network_ip_2(D), D.44129_8, 0B);
  if (D.44130_9 == 0)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:

<bb 8>:
  # D.44120_1 = PHI <1(6), 0(7)>
  return D.44120_1;

}



;; Function switch_core_media_ext_address_lookup (switch_core_media_ext_address_lookup)

switch_core_media_ext_address_lookup (struct switch_core_session_t * session, char * * ip, switch_port_t * port, const char * sourceip)
{
  const char D.48014;
  int D.48013;
  int iport;
  char * p;
  static const char __func__[37] = "switch_core_media_ext_address_lookup";
  static const char __PRETTY_FUNCTION__[37] = "switch_core_media_ext_address_lookup";
  struct switch_memory_pool_t * pool;
  struct switch_media_handle_t * smh;
  char * stun_ip;
  switch_port_t stun_port;
  switch_port_t myport;
  int x;
  switch_status_t status;
  char * error;
  uint32_t D.44113;
  uint32_t D.44112;
  char * D.44111;
  char * D.44109;
  struct switch_core_media_params_t * D.44108;
  int D.39263;
  int D.44104;
  switch_port_t D.44103;
  char * error.80;
  int D.44099;
  unsigned int D.44090;
  unsigned int iport.79;
  int D.44084;
  char * D.44082;
  char * D.44081;
  const char * D.44080;
  int D.44077;

<bb 2>:
  error = "";
  # DEBUG status => 1
  myport_10 = *port_9(D);
  # DEBUG myport => myport_10
  # DEBUG stun_port => 3478
  # DEBUG stun_ip => 0B
  pool_14 = switch_core_session_get_pool (session_13(D));
  # DEBUG pool => pool_14
  if (session_13(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4351, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_15 = session_13(D)->media_handle;
  # DEBUG smh => smh_15
  if (smh_15 == 0B)
    goto <bb 32>;
  else
    goto <bb 5>;

<bb 5>:
  if (sourceip_17(D) == 0B)
    goto <bb 32>;
  else
    goto <bb 6>;

<bb 6>:
  D.44077_19 = strncasecmp (sourceip_17(D), "host:", 5);
  if (D.44077_19 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.44080_20 = sourceip_17(D) + 5;
  D.44081_21 = switch_stun_host_lookup (D.44080_20, pool_14);
  *ip_22(D) = D.44081_21;
  D.44082_23 = *ip_22(D);
  status_24 = D.44082_23 == 0B;
  # DEBUG status => status_24
  goto <bb 30> (out);

<bb 8>:
  D.44084_25 = strncasecmp (sourceip_17(D), "stun:", 5);
  if (D.44084_25 == 0)
    goto <bb 9>;
  else
    goto <bb 29>;

<bb 9>:
  D.44080_26 = sourceip_17(D) + 5;
  stun_ip_27 = __strdup (D.44080_26);
  # DEBUG stun_ip => stun_ip_27
  p_28 = __builtin_strchr (stun_ip_27, 58);
  # DEBUG p => p_28
  if (p_28 != 0B)
    goto <bb 10>;
  else
    goto <bb 12>;

<bb 10>:
  *p_28 = 0;
  p_29 = p_28 + 1;
  # DEBUG p => p_29
  # DEBUG __nptr => p_29
  iport_87 = strtol (p_29, 0B, 10);
  # DEBUG iport => NULL
  iport.79_31 = (unsigned int) iport_87;
  D.44090_32 = iport.79_31 + 4294967295;
  if (D.44090_32 <= 65533)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  stun_port_33 = (switch_port_t) iport_87;
  # DEBUG stun_port => stun_port_33

<bb 12>:
  # stun_port_5 = PHI <3478(9), 3478(10), stun_port_33(11)>
  # DEBUG stun_port => stun_port_5
  # DEBUG s => stun_ip_27
  if (stun_ip_27 == 0B)
    goto <bb 15>;
  else
    goto <bb 13>;

<bb 13>:
  D.48014_88 = MEM[(const char *)stun_ip_27];
  if (D.48014_88 == 0)
    goto <bb 15>;
  else
    goto <bb 14>;

<bb 14>:

<bb 15>:
  # D.48013_89 = PHI <1(12), 1(13), 0(14)>
  if (D.48013_89 != 0)
    goto <bb 17>;
  else
    goto <bb 16>;

<bb 16>:
  status_60 = 1;
  x_44 = 0;
  goto <bb 20>;

<bb 17>:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4378, 0B, 3, "STUN Failed! NO STUN SERVER\n");
  goto <bb 30> (out);

<bb 18>:
  status_36 = switch_stun_lookup (ip_22(D), port_9(D), stun_ip_27, stun_port_5, &error, pool_14);
  # DEBUG status => status_36
  if (status_36 != 0)
    goto <bb 19>;
  else
    goto <bb 21>;

<bb 19>:
  switch_sleep (100000);
  x_37 = x_4 + 1;
  # DEBUG x => x_37

<bb 20>:
  # status_1 = PHI <1(16), status_36(19)>
  # x_4 = PHI <0(16), x_37(19)>
  # DEBUG x => x_4
  # DEBUG status => status_1
  if (x_4 <= 4)
    goto <bb 18>;
  else
    goto <bb 21>;

<bb 21>:
  # status_2 = PHI <status_36(18), status_1(20)>
  # DEBUG status => status_2
  if (status_2 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.44099_38 = (int) stun_port_5;
  error.80_39 = error;
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4390, 0B, 3, "STUN Failed! %s:%d [%s]\n", stun_ip_27, D.44099_38, error.80_39);
  goto <bb 30> (out);

<bb 23>:
  D.44082_40 = *ip_22(D);
  if (D.44082_40 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4394, 0B, 3, "STUN Failed! No IP returned\n");
  goto <bb 30> (out);

<bb 25>:
  D.44082_41 = *ip_22(D);
  D.44103_42 = *port_9(D);
  D.44104_43 = (int) D.44103_42;
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4397, 0B, 7, "STUN Success [%s]:[%d]\n", D.44082_41, D.44104_43);
  # DEBUG status => 0
  D.44103_45 = *port_9(D);
  if (D.44103_45 == myport_10)
    goto <bb 26>;
  else
    goto <bb 28>;

<bb 26>:
  D.44082_46 = *ip_22(D);
  D.44108_47 = smh_15->mparams;
  D.44109_48 = D.44108_47->rtpip;
  D.39263_49 = __builtin_strcmp (D.44082_46, D.44109_48);
  if (D.39263_49 == 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.44082_50 = *ip_22(D);
  D.44103_51 = *port_9(D);
  D.44104_52 = (int) D.44103_51;
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4401, 0B, 7, "STUN Not Required ip and port match. [%s]:[%d]\n", D.44082_50, D.44104_52);
  goto <bb 30> (out);

<bb 28>:
  D.44108_53 = smh_15->mparams;
  D.44111_54 = switch_core_perform_session_strdup (session_13(D), stun_ip_27, "src/switch_core_media.c", &__func__, 4403);
  D.44108_53->stun_ip = D.44111_54;
  D.44108_55 = smh_15->mparams;
  D.44108_55->stun_port = stun_port_5;
  D.44108_57 = smh_15->mparams;
  D.44112_58 = D.44108_57->stun_flags;
  D.44113_59 = D.44112_58 | 1;
  D.44108_57->stun_flags = D.44113_59;
  goto <bb 30> (out);

<bb 29>:
  *ip_22(D) = sourceip_17(D);
  # DEBUG status => 0

  # status_3 = PHI <status_24(7), 1(17), status_2(22), status_2(24), 0(28), 0(29), 0(27)>
  # stun_ip_6 = PHI <0B(7), stun_ip_27(17), stun_ip_27(22), stun_ip_27(24), stun_ip_27(28), 0B(29), stun_ip_27(27)>
out:
  # DEBUG stun_ip => stun_ip_6
  # DEBUG status => status_3
  if (stun_ip_6 != 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  free (stun_ip_6);
  # DEBUG stun_ip => 0B

<bb 32>:
  # status_7 = PHI <1(4), 1(5), status_3(31), status_3(30)>
  return status_7;

}



;; Function switch_core_media_reset_autofix (switch_core_media_reset_autofix)

switch_core_media_reset_autofix (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_reset_autofix";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  unsigned int D.44068;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4425, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  engine_6 = &smh_2->engines[type_4(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_6
  engine_6->check_frames = 0;
  engine_6->last_ts = 0;

<bb 6>:
  return;

}



;; Function switch_core_media_choose_port (switch_core_media_choose_port)

switch_core_media_choose_port (struct switch_core_session_t * session, switch_media_type_t type, int force)
{
  const char D.48031;
  int D.48030;
  const char D.48027;
  int D.48026;
  static const char __func__[30] = "switch_core_media_choose_port";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_choose_port";
  char vname[128];
  const char * tstr;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  const char * use_ip;
  switch_port_t sdp_port;
  char * lookup_rtpip;
  char * D.44058;
  int D.44057;
  char * D.44056;
  char * D.44053;
  char * D.44052;
  switch_port_t sdp_port.78;
  switch_status_t D.44047;
  char * D.44041;
  int D.44037;
  char * D.44034;
  switch_port_t D.44029;
  switch_port_t sdp_port.77;
  switch_port_t D.44025;
  uint32_t D.44023;
  uint32_t D.44021;
  struct switch_channel_t * D.44020;
  char * lookup_rtpip.76;
  struct switch_core_media_params_t * D.44014;
  switch_status_t D.44011;

<bb 2>:
  # DEBUG use_ip => 0B
  # DEBUG type => type_5(D)
  switch (type_5(D)) <default: <L32>, case 0: <L33>, case 1: <L31>>

<L31>:
  goto <bb 5> (<L33>);

<L32>:

  # tstr_104 = PHI <"audio"(2), "video"(3), "!ERR"(4)>
<L33>:
  # DEBUG tstr => NULL
  vname = "";
  if (session_7(D) == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  __assert_fail ("session", "src/switch_core_media.c", 4450, &__PRETTY_FUNCTION__);

<bb 7>:
  smh_8 = session_7(D)->media_handle;
  # DEBUG smh => smh_8
  if (smh_8 == 0B)
    goto <bb 35>;
  else
    goto <bb 8>;

<bb 8>:
  engine_12 = &smh_8->engines[type_5(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_12
  D.44014_13 = smh_8->mparams;
  lookup_rtpip.76_14 = D.44014_13->rtpip;
  lookup_rtpip = lookup_rtpip.76_14;
  if (force_15(D) == 0)
    goto <bb 9>;
  else
    goto <bb 12>;

<bb 9>:
  D.44020_16 = session_7(D)->channel;
  D.44021_17 = switch_channel_test_flag (D.44020_16, 15);
  if (D.44021_17 != 0)
    goto <bb 35>;
  else
    goto <bb 10>;

<bb 10>:
  D.44020_18 = session_7(D)->channel;
  D.44023_19 = switch_channel_test_flag (D.44020_18, 29);
  if (D.44023_19 != 0)
    goto <bb 35>;
  else
    goto <bb 11>;

<bb 11>:
  D.44025_20 = engine_12->adv_sdp_port;
  if (D.44025_20 != 0)
    goto <bb 35>;
  else
    goto <bb 12>;

<bb 12>:
  sdp_port.77_22 = engine_12->local_sdp_port;
  if (sdp_port.77_22 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.44014_23 = smh_8->mparams;
  lookup_rtpip.76_24 = D.44014_23->rtpip;
  sdp_port.77_25 = engine_12->local_sdp_port;
  switch_rtp_release_port (lookup_rtpip.76_24, sdp_port.77_25);

<bb 14>:
  D.44014_26 = smh_8->mparams;
  lookup_rtpip.76_27 = D.44014_26->rtpip;
  D.44029_28 = switch_rtp_request_port (lookup_rtpip.76_27);
  engine_12->local_sdp_port = D.44029_28;
  sdp_port.77_29 = engine_12->local_sdp_port;
  if (sdp_port.77_29 == 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4475, session_7(D), 2, "No %s RTP ports available!\n", tstr_104);
  goto <bb 35>;

<bb 16>:
  D.44014_31 = smh_8->mparams;
  lookup_rtpip.76_32 = D.44014_31->rtpip;
  engine_12->local_sdp_ip = lookup_rtpip.76_32;
  sdp_port.77_33 = engine_12->local_sdp_port;
  sdp_port = sdp_port.77_33;
  D.44014_34 = smh_8->mparams;
  D.44034_35 = D.44014_34->remote_ip;
  # DEBUG s => D.44034_35
  if (D.44034_35 == 0B)
    goto <bb 19>;
  else
    goto <bb 17>;

<bb 17>:
  D.48027_105 = MEM[(const char *)D.44034_35];
  if (D.48027_105 == 0)
    goto <bb 19>;
  else
    goto <bb 18>;

<bb 18>:

<bb 19>:
  # D.48026_106 = PHI <1(16), 1(17), 0(18)>
  if (D.48026_106 == 0)
    goto <bb 20>;
  else
    goto <bb 31>;

<bb 20>:
  D.44014_37 = smh_8->mparams;
  D.44034_38 = D.44014_37->remote_ip;
  D.44037_39 = switch_core_media_check_nat (smh_8, D.44034_38);
  if (D.44037_39 != 0)
    goto <bb 21>;
  else
    goto <bb 31>;

<bb 21>:
  sdp_port.77_40 = engine_12->local_sdp_port;
  switch_nat_add_mapping (sdp_port.77_40, 0, &sdp_port, 0);
  switch_snprintf (&vname, 128, "rtp_adv_%s_ip", tstr_104);
  D.44020_41 = session_7(D)->channel;
  use_ip_42 = switch_channel_get_variable_dup (D.44020_41, &vname, 1, -1);
  # DEBUG use_ip => use_ip_42
  if (use_ip_42 == 0B)
    goto <bb 22>;
  else
    goto <bb 27>;

<bb 22>:
  D.44014_43 = smh_8->mparams;
  D.44041_44 = D.44014_43->extrtpip;
  # DEBUG s => D.44041_44
  if (D.44041_44 == 0B)
    goto <bb 25>;
  else
    goto <bb 23>;

<bb 23>:
  D.48031_107 = MEM[(const char *)D.44041_44];
  if (D.48031_107 == 0)
    goto <bb 25>;
  else
    goto <bb 24>;

<bb 24>:

<bb 25>:
  # D.48030_108 = PHI <1(22), 1(23), 0(24)>
  if (D.48030_108 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  D.44014_46 = smh_8->mparams;
  use_ip_47 = D.44014_46->extrtpip;
  # DEBUG use_ip => use_ip_47

<bb 27>:
  # use_ip_1 = PHI <use_ip_42(21), use_ip_42(25), use_ip_47(26)>
  # DEBUG use_ip => use_ip_1
  if (use_ip_1 != 0B)
    goto <bb 28>;
  else
    goto <bb 30>;

<bb 28>:
  D.44047_48 = switch_core_media_ext_address_lookup (session_7(D), &lookup_rtpip, &sdp_port, use_ip_1);
  if (D.44047_48 != 0)
    goto <bb 35>;
  else
    goto <bb 29>;

<bb 29>:
  use_ip_50 = lookup_rtpip;
  # DEBUG use_ip => use_ip_50
  goto <bb 32>;

<bb 30>:
  D.44014_51 = smh_8->mparams;
  use_ip_52 = D.44014_51->rtpip;
  # DEBUG use_ip => use_ip_52
  goto <bb 32>;

<bb 31>:
  D.44014_53 = smh_8->mparams;
  use_ip_54 = D.44014_53->rtpip;
  # DEBUG use_ip => use_ip_54

<bb 32>:
  # use_ip_2 = PHI <use_ip_52(30), use_ip_54(31), use_ip_50(29)>
  # DEBUG use_ip => use_ip_2
  sdp_port.78_55 = sdp_port;
  engine_12->adv_sdp_port = sdp_port.78_55;
  D.44014_57 = smh_8->mparams;
  D.44052_58 = switch_core_perform_session_strdup (session_7(D), use_ip_2, "src/switch_core_media.c", &__func__, 4515);
  D.44014_57->extrtpip = D.44052_58;
  D.44041_59 = D.44014_57->extrtpip;
  D.44014_57->adv_sdp_audio_ip = D.44041_59;
  D.44053_60 = D.44014_57->adv_sdp_audio_ip;
  engine_12->adv_sdp_ip = D.44053_60;
  if (type_5(D) == 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.44020_61 = session_7(D)->channel;
  D.44056_62 = engine_12->local_sdp_ip;
  switch_channel_set_variable_var_check (D.44020_61, "local_media_ip", D.44056_62, 1);
  D.44020_63 = session_7(D)->channel;
  sdp_port.78_64 = sdp_port;
  D.44057_65 = (int) sdp_port.78_64;
  switch_channel_set_variable_printf (D.44020_63, "local_media_port", "%d", D.44057_65);
  D.44020_66 = session_7(D)->channel;
  D.44058_67 = engine_12->adv_sdp_ip;
  switch_channel_set_variable_var_check (D.44020_66, "advertised_media_ip", D.44058_67, 1);
  goto <bb 35>;

<bb 34>:
  D.44020_68 = session_7(D)->channel;
  D.44058_69 = engine_12->adv_sdp_ip;
  switch_channel_set_variable_var_check (D.44020_68, "local_video_ip", D.44058_69, 1);
  D.44020_70 = session_7(D)->channel;
  sdp_port.78_71 = sdp_port;
  D.44057_72 = (int) sdp_port.78_71;
  switch_channel_set_variable_printf (D.44020_70, "local_video_port", "%d", D.44057_72);

<bb 35>:
  # D.44011_3 = PHI <1(7), 0(10), 1(15), 1(28), 0(34), 0(9), 0(11), 0(33)>
  return D.44011_3;

}



;; Function switch_core_media_choose_ports (switch_core_media_choose_ports)

switch_core_media_choose_ports (struct switch_core_session_t * session, switch_bool_t audio, switch_bool_t video)
{
  switch_status_t status;
  uint32_t D.44002;
  struct switch_channel_t * D.44001;

<bb 2>:
  # DEBUG status => 0
  if (audio_3(D) != 0)
    goto <bb 3>;
  else
    goto <bb 7>;

<bb 3>:
  status_5 = switch_core_media_choose_port (session_4(D), 0, 0);
  # DEBUG status => status_5
  if (status_5 == 0)
    goto <bb 4>;
  else
    goto <bb 7>;

<bb 4>:
  if (video_6(D) != 0)
    goto <bb 5>;
  else
    goto <bb 7>;

<bb 5>:
  switch_core_media_check_video_codecs (session_4(D));
  D.44001_7 = session_4(D)->channel;
  D.44002_8 = switch_channel_test_flag (D.44001_7, 98);
  if (D.44002_8 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  switch_core_media_choose_port (session_4(D), 1, 0);

<bb 7>:
  # status_1 = PHI <0(2), status_5(3), status_5(4), status_5(5), status_5(6)>
  # DEBUG status => status_1
  return status_1;

}



;; Function switch_core_media_deactivate_rtp (switch_core_media_deactivate_rtp)

switch_core_media_deactivate_rtp (struct switch_core_session_t * session)
{
  const char D.48041;
  int D.48040;
  const char D.48037;
  int D.48036;
  switch_status_t st;
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_deactivate_rtp";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  switch_port_t D.43993;
  int D.43990;
  switch_port_t D.43982;
  struct switch_rtp_t * * D.43980;
  struct switch_rtp_t * D.43977;
  switch_port_t D.43976;
  int D.43973;
  char * D.43969;
  char * D.43966;
  struct switch_core_media_params_t * D.43965;
  switch_port_t D.43962;
  struct switch_rtp_t * * D.43960;
  struct switch_rtp_t * D.43957;
  struct switch_channel_t * D.43956;
  struct switch_thread_t * D.43953;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4554, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 29>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#18 => &smh_2->engines
  # DEBUG a_engine => D#18
  # DEBUG D#19 => &smh_2->engines[1]
  # DEBUG v_engine => D#19
  D.43953_5 = MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].media_thread;
  if (D.43953_5 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.43956_6 = session_1(D)->channel;
  switch_channel_clear_flag (D.43956_6, 113);
  MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].mh.up = 0;
  D.43953_7 = MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].media_thread;
  switch_thread_join (&st, D.43953_7);
  MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].media_thread = 0B;

<bb 7>:
  D.43957_8 = MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].rtp_session;
  if (D.43957_8 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.43960_9 = &MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].rtp_session;
  switch_rtp_destroy (D.43960_9);
  goto <bb 11>;

<bb 9>:
  D.43962_10 = MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].local_sdp_port;
  if (D.43962_10 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.43965_11 = smh_2->mparams;
  D.43966_12 = D.43965_11->rtpip;
  D.43962_13 = MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].local_sdp_port;
  switch_rtp_release_port (D.43966_12, D.43962_13);

<bb 11>:
  D.43962_14 = MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].local_sdp_port;
  if (D.43962_14 != 0)
    goto <bb 12>;
  else
    goto <bb 18>;

<bb 12>:
  D.43965_15 = smh_2->mparams;
  D.43969_16 = D.43965_15->remote_ip;
  # DEBUG s => D.43969_16
  if (D.43969_16 == 0B)
    goto <bb 15>;
  else
    goto <bb 13>;

<bb 13>:
  D.48037_59 = MEM[(const char *)D.43969_16];
  if (D.48037_59 == 0)
    goto <bb 15>;
  else
    goto <bb 14>;

<bb 14>:

<bb 15>:
  # D.48036_60 = PHI <1(12), 1(13), 0(14)>
  if (D.48036_60 == 0)
    goto <bb 16>;
  else
    goto <bb 18>;

<bb 16>:
  D.43965_18 = smh_2->mparams;
  D.43969_19 = D.43965_18->remote_ip;
  D.43973_20 = switch_core_media_check_nat (smh_2, D.43969_19);
  if (D.43973_20 != 0)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.43962_21 = MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].local_sdp_port;
  switch_nat_del_mapping (D.43962_21, 0);
  D.43962_22 = MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].local_sdp_port;
  D.43976_23 = D.43962_22 + 1;
  switch_nat_del_mapping (D.43976_23, 0);

<bb 18>:
  D.43977_24 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtp_session;
  if (D.43977_24 != 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.43980_25 = &MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtp_session;
  switch_rtp_destroy (D.43980_25);
  goto <bb 22>;

<bb 20>:
  D.43982_26 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_port;
  if (D.43982_26 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.43965_27 = smh_2->mparams;
  D.43966_28 = D.43965_27->rtpip;
  D.43982_29 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_port;
  switch_rtp_release_port (D.43966_28, D.43982_29);

<bb 22>:
  D.43982_30 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_port;
  if (D.43982_30 != 0)
    goto <bb 23>;
  else
    goto <bb 29>;

<bb 23>:
  D.43965_31 = smh_2->mparams;
  D.43969_32 = D.43965_31->remote_ip;
  # DEBUG s => D.43969_32
  if (D.43969_32 == 0B)
    goto <bb 26>;
  else
    goto <bb 24>;

<bb 24>:
  D.48041_61 = MEM[(const char *)D.43969_32];
  if (D.48041_61 == 0)
    goto <bb 26>;
  else
    goto <bb 25>;

<bb 25>:

<bb 26>:
  # D.48040_62 = PHI <1(23), 1(24), 0(25)>
  if (D.48040_62 == 0)
    goto <bb 27>;
  else
    goto <bb 29>;

<bb 27>:
  D.43965_34 = smh_2->mparams;
  D.43969_35 = D.43965_34->remote_ip;
  D.43990_36 = switch_core_media_check_nat (smh_2, D.43969_35);
  if (D.43990_36 != 0)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  D.43982_37 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_port;
  switch_nat_del_mapping (D.43982_37, 0);
  D.43982_38 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].local_sdp_port;
  D.43993_39 = D.43982_38 + 1;
  switch_nat_del_mapping (D.43993_39, 0);

<bb 29>:
  return;

}



;; Function switch_media_handle_destroy (switch_media_handle_destroy)

switch_media_handle_destroy (struct switch_core_session_t * session)
{
  int iftmp.104;
  uint32_t D.48077;
  uint32_t D.48076;
  struct switch_mutex_t * D.48075;
  struct switch_codec_interface_t * D.48074;
  const struct switch_codec_implementation_t * D.48073;
  int iftmp.104;
  uint32_t D.48068;
  uint32_t D.48067;
  struct switch_mutex_t * D.48066;
  struct switch_codec_interface_t * D.48065;
  const struct switch_codec_implementation_t * D.48064;
  int iftmp.104;
  uint32_t D.48059;
  uint32_t D.48058;
  struct switch_mutex_t * D.48057;
  struct switch_codec_interface_t * D.48056;
  const struct switch_codec_implementation_t * D.48055;
  int iftmp.104;
  uint32_t D.48050;
  uint32_t D.48049;
  struct switch_mutex_t * D.48048;
  struct switch_codec_interface_t * D.48047;
  const struct switch_codec_implementation_t * D.48046;
  static const char __PRETTY_FUNCTION__[28] = "switch_media_handle_destroy";
  struct switch_media_handle_t * smh;
  struct switch_codec_t * D.46515;
  struct switch_codec_t * D.46511;
  struct switch_codec_t * D.46507;
  struct switch_codec_t * D.46503;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 1378, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 38>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#20 => &smh_2->engines
  # DEBUG a_engine => D#20
  # DEBUG D#21 => &smh_2->engines[1]
  # DEBUG v_engine => D#21
  D.46503_5 = &MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].read_codec;
  # DEBUG codec => D.46503_5
  if (D.46503_5 != 0B)
    goto <bb 6>;
  else
    goto <bb 10>;

<bb 6>:
  D.48050_29 = MEM[(struct switch_codec_t *)smh_2 + 1604B].flags;
  D.48049_30 = D.48050_29 & 256;
  if (D.48049_30 != 0)
    goto <bb 7>;
  else
    goto <bb 10>;

<bb 7>:
  D.48048_31 = MEM[(struct switch_codec_t *)smh_2 + 1604B].mutex;
  if (D.48048_31 != 0B)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  D.48047_32 = MEM[(struct switch_codec_t *)smh_2 + 1604B].codec_interface;
  if (D.48047_32 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.48046_33 = MEM[(struct switch_codec_t *)smh_2 + 1604B].implementation;
  if (D.48046_33 != 0B)
    goto <bb 11>;
  else
    goto <bb 10>;

<bb 10>:

<bb 11>:
  # iftmp.104_34 = PHI <1(9), 0(10)>
  if (iftmp.104_34 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  D.46503_7 = &MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].read_codec;
  switch_core_codec_destroy (D.46503_7);

<bb 13>:
  D.46507_8 = &MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].write_codec;
  # DEBUG codec => D.46507_8
  if (D.46507_8 != 0B)
    goto <bb 14>;
  else
    goto <bb 18>;

<bb 14>:
  D.48059_36 = MEM[(struct switch_codec_t *)smh_2 + 1652B].flags;
  D.48058_37 = D.48059_36 & 256;
  if (D.48058_37 != 0)
    goto <bb 15>;
  else
    goto <bb 18>;

<bb 15>:
  D.48057_38 = MEM[(struct switch_codec_t *)smh_2 + 1652B].mutex;
  if (D.48057_38 != 0B)
    goto <bb 16>;
  else
    goto <bb 18>;

<bb 16>:
  D.48056_39 = MEM[(struct switch_codec_t *)smh_2 + 1652B].codec_interface;
  if (D.48056_39 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.48055_40 = MEM[(struct switch_codec_t *)smh_2 + 1652B].implementation;
  if (D.48055_40 != 0B)
    goto <bb 19>;
  else
    goto <bb 18>;

<bb 18>:

<bb 19>:
  # iftmp.104_41 = PHI <1(17), 0(18)>
  if (iftmp.104_41 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.46507_10 = &MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].write_codec;
  switch_core_codec_destroy (D.46507_10);

<bb 21>:
  D.46511_11 = &MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].read_codec;
  # DEBUG codec => D.46511_11
  if (D.46511_11 != 0B)
    goto <bb 22>;
  else
    goto <bb 26>;

<bb 22>:
  D.48068_43 = MEM[(struct switch_codec_t *)smh_2 + 13020B].flags;
  D.48067_44 = D.48068_43 & 256;
  if (D.48067_44 != 0)
    goto <bb 23>;
  else
    goto <bb 26>;

<bb 23>:
  D.48066_45 = MEM[(struct switch_codec_t *)smh_2 + 13020B].mutex;
  if (D.48066_45 != 0B)
    goto <bb 24>;
  else
    goto <bb 26>;

<bb 24>:
  D.48065_46 = MEM[(struct switch_codec_t *)smh_2 + 13020B].codec_interface;
  if (D.48065_46 != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.48064_47 = MEM[(struct switch_codec_t *)smh_2 + 13020B].implementation;
  if (D.48064_47 != 0B)
    goto <bb 27>;
  else
    goto <bb 26>;

<bb 26>:

<bb 27>:
  # iftmp.104_48 = PHI <1(25), 0(26)>
  if (iftmp.104_48 != 0)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  D.46511_13 = &MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].read_codec;
  switch_core_codec_destroy (D.46511_13);

<bb 29>:
  D.46515_14 = &MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].write_codec;
  # DEBUG codec => D.46515_14
  if (D.46515_14 != 0B)
    goto <bb 30>;
  else
    goto <bb 34>;

<bb 30>:
  D.48077_50 = MEM[(struct switch_codec_t *)smh_2 + 13068B].flags;
  D.48076_51 = D.48077_50 & 256;
  if (D.48076_51 != 0)
    goto <bb 31>;
  else
    goto <bb 34>;

<bb 31>:
  D.48075_52 = MEM[(struct switch_codec_t *)smh_2 + 13068B].mutex;
  if (D.48075_52 != 0B)
    goto <bb 32>;
  else
    goto <bb 34>;

<bb 32>:
  D.48074_53 = MEM[(struct switch_codec_t *)smh_2 + 13068B].codec_interface;
  if (D.48074_53 != 0B)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.48073_54 = MEM[(struct switch_codec_t *)smh_2 + 13068B].implementation;
  if (D.48073_54 != 0B)
    goto <bb 35>;
  else
    goto <bb 34>;

<bb 34>:

<bb 35>:
  # iftmp.104_55 = PHI <1(33), 0(34)>
  if (iftmp.104_55 != 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  D.46515_16 = &MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].write_codec;
  switch_core_codec_destroy (D.46515_16);

<bb 37>:
  switch_core_session_unset_read_codec (session_1(D));
  switch_core_session_unset_write_codec (session_1(D));
  switch_core_media_deactivate_rtp (session_1(D));

<bb 38>:
  return;

}



;; Function switch_core_session_wake_video_thread (switch_core_session_wake_video_thread)

switch_core_session_wake_video_thread (struct switch_core_session_t * session)
{
  struct switch_media_handle_t * smh;
  struct switch_thread_cond_t * D.43947;
  switch_status_t D.43944;
  struct switch_mutex_t * D.43943;
  struct switch_rtp_t * D.43940;

<bb 2>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 6>;
  else
    goto <bb 3>;

<bb 3>:
  # DEBUG D#22 => &smh_2->engines[1]
  # DEBUG v_engine => D#22
  D.43940_4 = MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].rtp_session;
  if (D.43940_4 == 0B)
    goto <bb 6>;
  else
    goto <bb 4>;

<bb 4>:
  D.43943_5 = MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].mh.cond_mutex;
  D.43944_6 = switch_mutex_trylock (D.43943_5);
  if (D.43944_6 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.43947_7 = MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].mh.cond;
  switch_thread_cond_broadcast (D.43947_7);
  D.43943_8 = MEM[(struct switch_rtp_engine_t *)smh_2 + 11496B].mh.cond_mutex;
  switch_mutex_unlock (D.43943_8);

<bb 6>:
  return;

}



;; Function switch_core_media_activate_rtp (switch_core_media_activate_rtp)

switch_core_media_activate_rtp (struct switch_core_session_t * session)
{
  int D.50254;
  switch_bool_t D.50253;
  int D.50252;
  int D.50251;
  int D.50250;
  int D.50249;
  int D.50248;
  int D.50247;
  int D.50246;
  int D.50244;
  const char D.48124;
  int D.48123;
  int D.48117;
  int D.48114;
  int D.48102;
  const char D.48093;
  int D.48092;
  int D.48086;
  int D.48083;
  dtls_type_t dtype;
  dtls_type_t xtype;
  int interval;
  switch_port_t remote_port;
  const char * rport;
  uint32_t ssrc_ul;
  const char * ssrc;
  switch_port_t remote_rtcp_port;
  const char * rport;
  switch_port_t remote_port;
  char * remote_host;
  int delayi;
  int v;
  int v;
  int maxqlen;
  int qlen;
  char * q;
  char * p;
  int max_drift;
  int maxlen;
  int jb_msec;
  dtls_type_t dtype;
  dtls_type_t xtype;
  int interval;
  switch_port_t remote_rtcp_port;
  const char * rport;
  uint32_t ssrc_ul;
  const char * ssrc;
  uint8_t inb;
  uint8_t vad_out;
  uint8_t vad_in;
  register int __result;
  switch_port_t remote_rtcp_port;
  const char * rport;
  switch_port_t remote_port;
  char * remote_host;
  static const char __func__[31] = "switch_core_media_activate_rtp";
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_activate_rtp";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  const char * var;
  char * timer_name;
  char tmp[50];
  switch_status_t status;
  switch_rtp_flag_t flags[39];
  const char * val;
  const char * err;
  _Bool D.43791;
  _Bool D.43790;
  const char * iftmp.68;
  const char * iftmp.67;
  uint32_t D.43777;
  uint32_t D.43776;
  unsigned int D.43775;
  switch_rtp_bug_flag_t D.43774;
  switch_rtp_bug_flag_t D.43773;
  switch_rtp_bug_flag_t * D.43772;
  unsigned int D.43765;
  struct dtls_fingerprint_t * D.43764;
  struct dtls_fingerprint_t * D.43763;
  char * D.43760;
  switch_call_direction_t D.43754;
  int D.43750;
  int D.43747;
  char[192] * D.43743;
  switch_call_direction_t D.43739;
  switch_core_media_ice_type_t iftmp.65;
  switch_port_t D.43736;
  switch_port_t D.43735;
  char * D.43733;
  char * D.43732;
  int D.39417;
  uint8_t D.43726;
  int D.43725;
  int D.43724;
  unsigned int D.43721;
  unsigned int interval.64;
  switch_bool_t D.43718;
  int8_t D.43717;
  int D.43716;
  int D.43713;
  struct ice_t * D.43706;
  switch_call_direction_t D.43702;
  switch_core_media_ice_type_t iftmp.63;
  char * D.43700;
  char * D.43699;
  char * D.43698;
  char * D.43697;
  uint8_t D.43694;
  int D.43693;
  uint32_t D.43690;
  uint32_t D.43689;
  struct payload_map_t * * D.43685;
  uint8_t D.43682;
  uint8_t D.43679;
  uint8_t D.43676;
  uint8_t D.43672;
  const char * iftmp.62;
  char * D.43670;
  uint32_t D.43666;
  char * iftmp.61;
  struct switch_rtp_t * D.43664;
  struct switch_memory_pool_t * D.43663;
  switch_rtp_flag_t D.43662;
  switch_rtp_flag_t D.43661;
  uint32_t D.43658;
  uint32_t D.43655;
  int D.43654;
  uint32_t D.43650;
  int32_t D.43647;
  uint8_t D.43636;
  int D.43635;
  int D.43634;
  char * D.43633;
  int D.43632;
  uint32_t D.43628;
  int32_t D.43625;
  uint32_t D.43620;
  int D.43619;
  uint32_t D.43615;
  int32_t D.43612;
  switch_status_t D.43606;
  uint32_t D.43598;
  int D.43595;
  switch_payload_t D.43594;
  int D.43593;
  switch_port_t D.43592;
  char * D.43591;
  uint8_t D.43588;
  uint32_t D.43585;
  int D.43584;
  int D.43583;
  char * D.43582;
  char * D.43581;
  char * D.43578;
  int D.39400;
  _Bool D.43576;
  _Bool D.43575;
  _Bool D.43574;
  uint32_t D.43570;
  switch_port_t D.43565;
  char * D.43562;
  struct payload_map_t * D.43561;
  uint32_t D.43558;
  switch_call_direction_t D.43555;
  uint32_t D.43552;
  int D.43551;
  int32_t D.43548;
  char * D.43545;
  uint32_t D.43542;
  unsigned int delayi.60;
  int D.43536;
  int D.43534;
  int32_t D.43531;
  int D.43527;
  switch_payload_t D.43524;
  int D.43523;
  switch_payload_t D.43520;
  uint32_t D.43519;
  uint32_t D.43518;
  uint32_t D.43515;
  uint32_t D.43512;
  uint32_t D.43511;
  uint32_t D.43510;
  uint32_t D.43509;
  uint32_t D.43506;
  uint32_t v.59;
  uint32_t v.58;
  int D.43492;
  const char * D.43491;
  switch_status_t D.43488;
  uint32_t max_drift.57;
  uint32_t D.43486;
  uint32_t maxqlen.56;
  uint32_t qlen.55;
  unsigned int D.43474;
  int D.43473;
  int D.43472;
  const int D.43471;
  const struct switch_codec_implementation_t * D.43470;
  unsigned int D.43467;
  unsigned int jb_msec.54;
  unsigned int D.43453;
  struct dtls_fingerprint_t * D.43452;
  struct dtls_fingerprint_t * D.43451;
  char * D.43448;
  uint32_t D.43439;
  switch_call_direction_t D.43435;
  struct switch_channel_t * D.43434;
  int D.43430;
  struct switch_core_session_t * D.43429;
  int D.43426;
  char[192] * D.43422;
  switch_call_direction_t D.43418;
  switch_core_media_ice_type_t iftmp.51;
  switch_port_t D.43415;
  switch_port_t D.43414;
  char * D.43412;
  char * D.43411;
  int D.39377;
  uint8_t D.43405;
  int D.43404;
  unsigned int D.43401;
  unsigned int interval.50;
  switch_bool_t D.43398;
  int8_t D.43397;
  int D.43396;
  int D.43393;
  _Bool D.43389;
  _Bool D.43388;
  _Bool D.43387;
  struct ice_t * D.43383;
  switch_call_direction_t D.43379;
  switch_core_media_ice_type_t iftmp.49;
  char * D.43377;
  char * D.43376;
  char * D.43375;
  char * D.43374;
  uint8_t D.43371;
  int D.43370;
  char * iftmp.48;
  char * iftmp.47;
  char * D.43361;
  struct switch_channel_t * D.43360;
  struct switch_codec_t * D.43359;
  _Bool D.43358;
  _Bool D.43357;
  _Bool D.43356;
  _Bool D.43354;
  _Bool D.43353;
  _Bool D.43352;
  unsigned int D.43349;
  switch_rtp_bug_flag_t D.43348;
  switch_rtp_bug_flag_t * D.43347;
  unsigned int D.43344;
  switch_rtp_bug_flag_t D.43343;
  unsigned int D.43340;
  switch_rtp_bug_flag_t D.43339;
  uint32_t D.43338;
  int D.43335;
  int D.43330;
  int D.43325;
  int D.43320;
  uint32_t D.43315;
  uint32_t D.43314;
  struct switch_memory_pool_t * D.43310;
  struct switch_mutex_t *[2] * D.43309;
  switch_call_direction_t D.43308;
  uint8_t D.43307;
  switch_core_media_vflag_t D.43306;
  uint8_t D.43303;
  struct payload_map_t * * D.43302;
  uint8_t D.43299;
  struct switch_rtp_t * D.43298;
  struct switch_memory_pool_t * D.43297;
  uint32_t D.43296;
  uint32_t D.43295;
  uint32_t D.43294;
  switch_channel_state_t D.43293;
  int D.43291;
  uint8_t D.43283;
  char * D.43282;
  int D.43281;
  uint32_t D.43277;
  int32_t D.43274;
  switch_rtp_flag_t D.43271;
  switch_rtp_flag_t D.43270;
  uint32_t D.43267;
  _Bool D.43264;
  _Bool D.43263;
  _Bool D.43262;
  uint32_t D.43259;
  int D.43258;
  int32_t D.43254;
  uint32_t D.43207;
  const char * err.45;
  switch_status_t D.43202;
  uint32_t D.43194;
  char * D.43191;
  int D.43190;
  int D.43189;
  int D.43188;
  switch_payload_t D.43187;
  int D.43186;
  switch_port_t D.43185;
  char * D.43184;
  char * D.43183;
  uint32_t D.43180;
  int D.43179;
  int D.43178;
  char * D.43177;
  char * D.43176;
  switch_port_t D.43174;
  char * D.43172;
  struct payload_map_t * D.43171;
  int D.39348;
  _Bool D.43169;
  _Bool D.43168;
  _Bool D.43167;
  uint32_t D.43163;
  int D.43158;
  switch_rtp_flag_t D.43153;
  switch_rtp_flag_t D.43152;
  int D.43149;
  char * D.43148;
  switch_rtp_flag_t D.43147;
  switch_rtp_flag_t D.43146;
  switch_payload_t D.43143;
  int32_t D.43139;
  switch_rtp_flag_t D.43138;
  switch_rtp_flag_t D.43137;
  int D.43136;
  int32_t D.43132;
  switch_rtp_flag_t D.43129;
  switch_rtp_flag_t D.43128;
  int D.43127;
  int32_t D.43124;
  int32_t D.43118;
  switch_rtp_flag_t D.43115;
  switch_rtp_flag_t D.43114;
  int D.43113;
  uint32_t D.43109;
  int32_t D.43106;
  switch_rtp_flag_t D.43103;
  switch_rtp_flag_t D.43102;
  uint32_t D.43100;
  struct switch_core_media_params_t * D.43099;
  uint8_t D.43097;
  struct switch_rtp_t * D.43096;
  uint32_t D.43093;
  uint8_t D.43090;
  uint32_t D.43087;
  uint32_t D.43084;
  switch_rtp_crypto_key_type_t D.43081;
  uint8_t D.43078;
  struct switch_rtp_t * D.43077;
  switch_channel_state_t D.43076;
  int D.43074;
  struct switch_channel_t * D.43073;

<bb 2>:
  err = 0B;
  # DEBUG val => 0B
  flags = {};
  # DEBUG status => 0
  # DEBUG timer_name => 0B
  if (session_45(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4731, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_46 = session_45(D)->media_handle;
  # DEBUG smh => smh_46
  if (smh_46 == 0B)
    goto <bb 323>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_48 = &smh_46->engines;
  # DEBUG a_engine => a_engine_48
  v_engine_49 = &smh_46->engines[1];
  # DEBUG v_engine => v_engine_49
  D.43073_50 = session_45(D)->channel;
  D.43074_51 = switch_channel_check_signal (D.43073_50, 1);
  if (D.43074_51 != 0)
    goto <bb 323>;
  else
    goto <bb 6>;

<bb 6>:
  D.43073_52 = session_45(D)->channel;
  D.43076_53 = switch_channel_get_state (D.43073_52);
  if (D.43076_53 > 9)
    goto <bb 323>;
  else
    goto <bb 7>;

<bb 7>:
  D.43077_54 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43078_55 = switch_rtp_ready (D.43077_54);
  if (D.43078_55 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.43077_56 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  switch_rtp_reset_media_timer (D.43077_56);

<bb 9>:
  D.43081_57 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].crypto_type;
  if (D.43081_57 != 9)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.43073_58 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_58, 92, 1);

<bb 11>:
  D.43073_59 = session_45(D)->channel;
  D.43084_60 = switch_channel_test_flag (D.43073_59, 15);
  if (D.43084_60 != 0)
    goto <bb 322> (end);
  else
    goto <bb 12>;

<bb 12>:
  D.43073_62 = session_45(D)->channel;
  D.43087_63 = switch_channel_test_flag (D.43073_62, 103);
  if (D.43087_63 == 0)
    goto <bb 13>;
  else
    goto <bb 16>;

<bb 13>:
  D.43077_64 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43090_65 = switch_rtp_ready (D.43077_64);
  if (D.43090_65 != 0)
    goto <bb 14>;
  else
    goto <bb 16>;

<bb 14>:
  D.43073_66 = session_45(D)->channel;
  D.43093_67 = switch_channel_test_flag (D.43073_66, 98);
  if (D.43093_67 != 0)
    goto <bb 15>;
  else
    goto <bb 322> (end);

<bb 15>:
  D.43096_68 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43097_69 = switch_rtp_ready (D.43096_68);
  if (D.43097_69 == 0)
    goto <bb 214> (video);
  else
    goto <bb 322> (end);

<bb 16>:
  D.43099_71 = smh_46->mparams;
  D.43100_72 = D.43099_71->codec_flags;
  status_73 = switch_core_media_set_codec (session_45(D), 0, D.43100_72);
  # DEBUG status => status_73
  if (status_73 != 0)
    goto <bb 322> (end);
  else
    goto <bb 17>;

<bb 17>:
  switch_core_media_set_video_codec (session_45(D), 0);
  memset (&flags, 0, 156);
  D.43102_74 = flags[13];
  D.43103_75 = D.43102_74 + 1;
  flags[13] = D.43103_75;
  D.43106_76 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43106_76 == 0)
    goto <bb 18>;
  else
    goto <bb 22>;

<bb 18>:
  D.43073_77 = session_45(D)->channel;
  D.43109_78 = switch_channel_test_flag (D.43073_77, 106);
  if (D.43109_78 == 0)
    goto <bb 19>;
  else
    goto <bb 22>;

<bb 19>:
  D.43073_79 = session_45(D)->channel;
  val_80 = switch_channel_get_variable_dup (D.43073_79, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_80
  if (val_80 == 0B)
    goto <bb 21>;
  else
    goto <bb 20>;

<bb 20>:
  D.43113_81 = switch_true (val_80);
  if (D.43113_81 == 0)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.43114_82 = flags[7];
  D.43115_83 = D.43114_82 + 1;
  flags[7] = D.43115_83;

<bb 22>:
  D.43118_84 = switch_media_handle_test_media_flag (smh_46, 11);
  if (D.43118_84 != 0)
    goto <bb 36>;
  else
    goto <bb 23>;

<bb 23>:
  D.43073_85 = session_45(D)->channel;
  val_86 = switch_channel_get_variable_dup (D.43073_85, "pass_rfc2833", 1, -1);
  # DEBUG val => val_86
  if (val_86 != 0B)
    goto <bb 24>;
  else
    goto <bb 37>;

<bb 24>:
  # DEBUG expr => val_86
  if (val_86 != 0B)
    goto <bb 25>;
  else
    goto <bb 34>;

<bb 25>:
  D.50246_1382 = strcasecmp (val_86, "yes");
  if (D.50246_1382 == 0)
    goto <bb 35>;
  else
    goto <bb 26>;

<bb 26>:
  D.50247_1383 = strcasecmp (val_86, "on");
  if (D.50247_1383 == 0)
    goto <bb 35>;
  else
    goto <bb 27>;

<bb 27>:
  D.50248_1384 = strcasecmp (val_86, "true");
  if (D.50248_1384 == 0)
    goto <bb 35>;
  else
    goto <bb 28>;

<bb 28>:
  D.50249_1385 = strcasecmp (val_86, "t");
  if (D.50249_1385 == 0)
    goto <bb 35>;
  else
    goto <bb 29>;

<bb 29>:
  D.50250_1386 = strcasecmp (val_86, "enabled");
  if (D.50250_1386 == 0)
    goto <bb 35>;
  else
    goto <bb 30>;

<bb 30>:
  D.50251_1387 = strcasecmp (val_86, "active");
  if (D.50251_1387 == 0)
    goto <bb 35>;
  else
    goto <bb 31>;

<bb 31>:
  D.50252_1388 = strcasecmp (val_86, "allow");
  if (D.50252_1388 == 0)
    goto <bb 35>;
  else
    goto <bb 32>;

<bb 32>:
  D.50253_1389 = switch_is_number (val_86);
  if (D.50253_1389 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  # DEBUG __nptr => val_86
  D.50254_1390 = strtol (val_86, 0B, 10);
  if (D.50254_1390 != 0)
    goto <bb 35>;
  else
    goto <bb 34>;

<bb 34>:

<bb 35>:
  # D.50244_1391 = PHI <1(25), 1(26), 1(27), 1(28), 1(29), 1(30), 1(31), 1(33), 0(34)>
  D.50244_1396 = D.50244_1391;
  D.50244_87 = D.50244_1396;
  if (D.50244_87 != 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  D.43073_88 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_88, 100, 1);

<bb 37>:
  D.43124_89 = switch_media_handle_test_media_flag (smh_46, 12);
  if (D.43124_89 != 0)
    goto <bb 40>;
  else
    goto <bb 38>;

<bb 38>:
  D.43073_90 = session_45(D)->channel;
  val_91 = switch_channel_get_variable_dup (D.43073_90, "rtp_autoflush", 1, -1);
  # DEBUG val => val_91
  if (val_91 != 0B)
    goto <bb 39>;
  else
    goto <bb 41>;

<bb 39>:
  D.43127_92 = switch_true (val_91);
  if (D.43127_92 != 0)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:
  D.43128_93 = flags[22];
  D.43129_94 = D.43128_93 + 1;
  flags[22] = D.43129_94;

<bb 41>:
  D.43132_95 = switch_media_handle_test_media_flag (smh_46, 13);
  if (D.43132_95 == 0)
    goto <bb 42>;
  else
    goto <bb 45>;

<bb 42>:
  D.43073_96 = session_45(D)->channel;
  val_97 = switch_channel_get_variable_dup (D.43073_96, "rtp_rewrite_timestamps", 1, -1);
  # DEBUG val => val_97
  if (val_97 == 0B)
    goto <bb 44>;
  else
    goto <bb 43>;

<bb 43>:
  D.43136_98 = switch_true (val_97);
  if (D.43136_98 == 0)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  D.43137_99 = flags[8];
  D.43138_100 = D.43137_99 + 1;
  flags[8] = D.43138_100;

<bb 45>:
  D.43139_101 = switch_media_handle_test_media_flag (smh_46, 9);
  if (D.43139_101 != 0)
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  D.43099_102 = smh_46->mparams;
  D.43099_102->cng_pt = 0;
  goto <bb 49>;

<bb 47>:
  D.43099_103 = smh_46->mparams;
  D.43143_104 = D.43099_103->cng_pt;
  if (D.43143_104 != 0)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  D.43146_105 = flags[16];
  D.43147_106 = D.43146_105 + 1;
  flags[16] = D.43147_106;

<bb 49>:
  D.43148_107 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.iananame;
  D.43149_108 = strcasecmp (D.43148_107, "L16");
  if (D.43149_108 == 0)
    goto <bb 50>;
  else
    goto <bb 51>;

<bb 50>:
  D.43152_109 = flags[14];
  D.43153_110 = D.43152_109 + 1;
  flags[14] = D.43153_110;

<bb 51>:
  D.43152_111 = flags[14];
  if (D.43152_111 != 0)
    goto <bb 52>;
  else
    goto <bb 55>;

<bb 52>:
  D.43073_112 = session_45(D)->channel;
  val_113 = switch_channel_get_variable_dup (D.43073_112, "rtp_disable_byteswap", 1, -1);
  # DEBUG val => val_113
  if (val_113 != 0B)
    goto <bb 53>;
  else
    goto <bb 55>;

<bb 53>:
  D.43158_114 = switch_true (val_113);
  if (D.43158_114 != 0)
    goto <bb 54>;
  else
    goto <bb 55>;

<bb 54>:
  flags[14] = 0;

<bb 55>:
  D.43077_115 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  if (D.43077_115 != 0B)
    goto <bb 56>;
  else
    goto <bb 62>;

<bb 56>:
  D.43073_116 = session_45(D)->channel;
  D.43163_117 = switch_channel_test_flag (D.43073_116, 103);
  if (D.43163_117 != 0)
    goto <bb 57>;
  else
    goto <bb 62>;

<bb 57>:
  D.43077_118 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  remote_host_119 = switch_rtp_get_remote_host (D.43077_118);
  # DEBUG remote_host => remote_host_119
  D.43077_120 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  remote_port_121 = switch_rtp_get_remote_port (D.43077_120);
  # DEBUG remote_port => remote_port_121
  D.43167_122 = remote_host_119 != 0B;
  D.43168_123 = remote_port_121 != 0;
  D.43169_124 = D.43167_122 && D.43168_123;
  if (D.43169_124 != 0)
    goto <bb 58>;
  else
    goto <bb 61>;

<bb 58>:
  D.43171_125 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_126 = D.43171_125->remote_sdp_ip;
  D.39348_127 = __builtin_strcmp (remote_host_119, D.43172_126);
  if (D.39348_127 == 0)
    goto <bb 59>;
  else
    goto <bb 61>;

<bb 59>:
  D.43171_128 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43174_129 = D.43171_128->remote_sdp_port;
  if (D.43174_129 == remote_port_121)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  D.43073_130 = session_45(D)->channel;
  D.43176_131 = switch_channel_get_name (D.43073_130);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4825, session_45(D), 7, "Audio params are unchanged for %s.\n", D.43176_131);
  goto <bb 214> (video);

<bb 61>:
  D.43073_132 = session_45(D)->channel;
  D.43177_133 = switch_channel_get_name (D.43073_132);
  D.43178_134 = (int) remote_port_121;
  D.43171_135 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_136 = D.43171_135->remote_sdp_ip;
  D.43171_137 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43174_138 = D.43171_137->remote_sdp_port;
  D.43179_139 = (int) D.43174_138;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4830, session_45(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.43177_133, remote_host_119, D.43178_134, D.43172_136, D.43179_139);
  D.43171_140 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43174_141 = D.43171_140->remote_sdp_port;
  D.43179_142 = (int) D.43174_141;
  switch_snprintf (&tmp, 50, "%d", D.43179_142);
  D.43073_143 = session_45(D)->channel;
  D.43171_144 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_145 = D.43171_144->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_143, "remote_media_ip", D.43172_145, 1);
  D.43073_146 = session_45(D)->channel;
  switch_channel_set_variable_var_check (D.43073_146, "remote_media_port", &tmp, 1);

<bb 62>:
  D.43073_147 = session_45(D)->channel;
  D.43180_148 = switch_channel_test_flag (D.43073_147, 29);
  if (D.43180_148 == 0)
    goto <bb 63>;
  else
    goto <bb 64>;

<bb 63>:
  D.43073_149 = session_45(D)->channel;
  D.43183_150 = switch_channel_get_name (D.43073_149);
  D.43184_151 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].local_sdp_ip;
  D.43185_152 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].local_sdp_port;
  D.43186_153 = (int) D.43185_152;
  D.43171_154 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_155 = D.43171_154->remote_sdp_ip;
  D.43171_156 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43174_157 = D.43171_156->remote_sdp_port;
  D.43179_158 = (int) D.43174_157;
  D.43171_159 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43187_160 = D.43171_159->agreed_pt;
  D.43188_161 = (int) D.43187_160;
  D.43189_162 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.microseconds_per_packet;
  D.43190_163 = D.43189_162 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4841, session_45(D), 7, "AUDIO RTP [%s] %s port %d -> %s port %d codec: %u ms: %d\n", D.43183_150, D.43184_151, D.43186_153, D.43172_155, D.43179_158, D.43188_161, D.43190_163);

<bb 64>:
  D.43185_164 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].local_sdp_port;
  D.43186_165 = (int) D.43185_164;
  switch_snprintf (&tmp, 50, "%d", D.43186_165);
  D.43073_166 = session_45(D)->channel;
  D.43184_167 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].local_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_166, "local_media_ip", D.43184_167, 1);
  D.43073_168 = session_45(D)->channel;
  switch_channel_set_variable_var_check (D.43073_168, "local_media_port", &tmp, 1);
  D.43073_169 = session_45(D)->channel;
  D.43191_170 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].adv_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_169, "advertised_media_ip", D.43191_170, 1);
  D.43077_171 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  if (D.43077_171 != 0B)
    goto <bb 65>;
  else
    goto <bb 81>;

<bb 65>:
  D.43073_172 = session_45(D)->channel;
  D.43194_173 = switch_channel_test_flag (D.43073_172, 103);
  if (D.43194_173 != 0)
    goto <bb 66>;
  else
    goto <bb 81>;

<bb 66>:
  # DEBUG rport => 0B
  remote_rtcp_port_175 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_175
  if (remote_rtcp_port_175 == 0)
    goto <bb 67>;
  else
    goto <bb 69>;

<bb 67>:
  D.43073_176 = session_45(D)->channel;
  rport_177 = switch_channel_get_variable_dup (D.43073_176, "rtp_remote_audio_rtcp_port", 1, -1);
  # DEBUG rport => rport_177
  if (rport_177 != 0B)
    goto <bb 68>;
  else
    goto <bb 69>;

<bb 68>:
  # DEBUG __nptr => rport_177
  D.48083_1337 = strtol (rport_177, 0B, 10);
  remote_rtcp_port_179 = (switch_port_t) D.48083_1337;
  # DEBUG remote_rtcp_port => remote_rtcp_port_179

<bb 69>:
  # remote_rtcp_port_7 = PHI <remote_rtcp_port_175(66), remote_rtcp_port_175(67), remote_rtcp_port_179(68)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_7
  D.43077_180 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43171_181 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_182 = D.43171_181->remote_sdp_ip;
  D.43171_183 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43174_184 = D.43171_183->remote_sdp_port;
  D.43202_185 = switch_rtp_set_remote_address (D.43077_180, D.43172_182, D.43174_184, remote_rtcp_port_7, 1, &err);
  if (D.43202_185 != 0)
    goto <bb 70>;
  else
    goto <bb 71>;

<bb 70>:
  err.45_186 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4868, session_45(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.45_186);
  goto <bb 79>;

<bb 71>:
  D.43171_187 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_188 = D.43171_187->remote_sdp_ip;
  D.43171_189 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43174_190 = D.43171_189->remote_sdp_port;
  D.43179_191 = (int) D.43174_190;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4870, session_45(D), 7, "AUDIO RTP CHANGING DEST TO: [%s:%d]\n", D.43172_188, D.43179_191);
  D.43073_192 = session_45(D)->channel;
  D.43207_193 = switch_channel_test_flag (D.43073_192, 96);
  if (D.43207_193 != 0)
    goto <bb 72>;
  else
    goto <bb 74>;

<bb 72>:
  # DEBUG __s2_len => 7
  D.43171_235 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_236 = D.43171_235->remote_sdp_ip;
  __result_237 = __builtin_strcmp (D.43172_236, "0.0.0.0");
  if (__result_237 != 0)
    goto <bb 73>;
  else
    goto <bb 74>;

<bb 73>:
  switch_core_media_toggle_hold (session_45(D), 0);

<bb 74>:
  D.43254_239 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43254_239 == 0)
    goto <bb 75>;
  else
    goto <bb 79>;

<bb 75>:
  D.43073_240 = session_45(D)->channel;
  val_241 = switch_channel_get_variable_dup (D.43073_240, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_241
  if (val_241 == 0B)
    goto <bb 77>;
  else
    goto <bb 76>;

<bb 76>:
  D.43258_242 = switch_true (val_241);
  if (D.43258_242 == 0)
    goto <bb 77>;
  else
    goto <bb 79>;

<bb 77>:
  D.43073_243 = session_45(D)->channel;
  D.43259_244 = switch_channel_test_flag (D.43073_243, 106);
  if (D.43259_244 == 0)
    goto <bb 78>;
  else
    goto <bb 79>;

<bb 78>:
  D.43077_245 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  switch_rtp_set_flag (D.43077_245, 7);

<bb 79>:
  D.43262_246 = session_45(D) != 0B;
  D.43263_247 = a_engine_48 != 0B;
  D.43264_248 = D.43262_246 && D.43263_247;
  if (D.43264_248 != 0)
    goto <bb 80>;
  else
    goto <bb 214> (video);

<bb 80>:
  check_dtls_reinvite (session_45(D), a_engine_48);
  goto <bb 214> (video);

<bb 81>:
  D.43073_249 = session_45(D)->channel;
  D.43267_250 = switch_channel_test_flag (D.43073_249, 29);
  if (D.43267_250 != 0)
    goto <bb 82>;
  else
    goto <bb 89>;

<bb 82>:
  switch_core_media_proxy_remote_addr (session_45(D), 0B);
  memset (&flags, 0, 156);
  D.43102_251 = flags[13];
  D.43103_252 = D.43102_251 + 1;
  flags[13] = D.43103_252;
  D.43270_253 = flags[19];
  D.43271_254 = D.43270_253 + 1;
  flags[19] = D.43271_254;
  D.43274_255 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43274_255 == 0)
    goto <bb 83>;
  else
    goto <bb 87>;

<bb 83>:
  D.43073_256 = session_45(D)->channel;
  D.43277_257 = switch_channel_test_flag (D.43073_256, 106);
  if (D.43277_257 == 0)
    goto <bb 84>;
  else
    goto <bb 87>;

<bb 84>:
  D.43073_258 = session_45(D)->channel;
  val_259 = switch_channel_get_variable_dup (D.43073_258, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_259
  if (val_259 == 0B)
    goto <bb 86>;
  else
    goto <bb 85>;

<bb 85>:
  D.43281_260 = switch_true (val_259);
  if (D.43281_260 == 0)
    goto <bb 86>;
  else
    goto <bb 87>;

<bb 86>:
  D.43114_261 = flags[7];
  D.43115_262 = D.43114_261 + 1;
  flags[7] = D.43115_262;

<bb 87>:
  # DEBUG timer_name => 0B
  D.43073_264 = session_45(D)->channel;
  D.43282_265 = switch_channel_get_name (D.43073_264);
  D.43171_271 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_272 = D.43171_271->remote_sdp_ip;
  D.43171_273 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43174_274 = D.43171_273->remote_sdp_port;
  D.43179_275 = (int) D.43174_274;
  D.43171_276 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43187_277 = D.43171_276->agreed_pt;
  D.43188_278 = (int) D.43187_277;
  D.43189_279 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.microseconds_per_packet;
  D.43190_280 = D.43189_279 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4906, session_45(D), 7, "PROXY AUDIO RTP [%s] %s:%d->%s:%d codec: %u ms: %d\n", D.43282_265, D.43172_272, D.43179_275, D.43172_272, D.43179_275, D.43188_278, D.43190_280);
  D.43077_281 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43283_282 = switch_rtp_ready (D.43077_281);
  if (D.43283_282 != 0)
    goto <bb 88>;
  else
    goto <bb 91>;

<bb 88>:
  D.43077_283 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43171_284 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43187_285 = D.43171_284->agreed_pt;
  switch_rtp_set_default_payload (D.43077_283, D.43187_285);
  goto <bb 91>;

<bb 89>:
  D.43099_286 = smh_46->mparams;
  timer_name_287 = D.43099_286->timer_name;
  # DEBUG timer_name => timer_name_287
  D.43073_288 = session_45(D)->channel;
  var_289 = switch_channel_get_variable_dup (D.43073_288, "rtp_timer_name", 1, -1);
  # DEBUG var => var_289
  if (var_289 != 0B)
    goto <bb 90>;
  else
    goto <bb 91>;

<bb 90>:
  # DEBUG timer_name => var_289

<bb 91>:
  # timer_name_6 = PHI <0B(88), timer_name_287(89), var_289(90), 0B(87)>
  # DEBUG timer_name => timer_name_6
  D.43073_291 = session_45(D)->channel;
  D.43291_292 = switch_channel_check_signal (D.43073_291, 1);
  if (D.43291_292 != 0)
    goto <bb 93>;
  else
    goto <bb 92>;

<bb 92>:
  D.43073_293 = session_45(D)->channel;
  D.43293_294 = switch_channel_get_state (D.43073_293);
  if (D.43293_294 <= 9)
    goto <bb 93>;
  else
    goto <bb 95>;

<bb 93>:
  D.43184_295 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].local_sdp_ip;
  D.43185_296 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].local_sdp_port;
  D.43171_297 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_298 = D.43171_297->remote_sdp_ip;
  D.43171_299 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43174_300 = D.43171_299->remote_sdp_port;
  D.43171_301 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43187_302 = D.43171_301->agreed_pt;
  D.43294_303 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.samples_per_packet;
  D.43171_304 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43295_305 = D.43171_304->codec_ms;
  D.43296_306 = D.43295_305 * 1000;
  D.43297_307 = switch_core_session_get_pool (session_45(D));
  D.43298_308 = switch_rtp_new (D.43184_295, D.43185_296, D.43172_298, D.43174_300, D.43187_302, D.43294_303, D.43296_306, &flags, timer_name_6, &err, D.43297_307);
  MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session = D.43298_308;
  D.43077_309 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43299_310 = switch_rtp_ready (D.43077_309);
  if (D.43299_310 != 0)
    goto <bb 94>;
  else
    goto <bb 95>;

<bb 94>:
  D.43077_311 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43302_312 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].payload_map;
  switch_rtp_set_payload_map (D.43077_311, D.43302_312);

<bb 95>:
  D.43077_313 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43303_314 = switch_rtp_ready (D.43077_313);
  if (D.43303_314 != 0)
    goto <bb 96>;
  else
    goto <bb 317>;

<bb 96>:
  D.43099_315 = smh_46->mparams;
  D.43306_316 = D.43099_315->vflags;
  D.43307_317 = (uint8_t) D.43306_316;
  vad_in_318 = D.43307_317 & 1;
  # DEBUG vad_in => vad_in_318
  D.43099_319 = smh_46->mparams;
  D.43306_320 = D.43099_319->vflags;
  D.43307_321 = (uint8_t) D.43306_320;
  vad_out_322 = D.43307_321 & 2;
  # DEBUG vad_out => vad_out_322
  D.43073_323 = session_45(D)->channel;
  D.43308_324 = switch_channel_direction (D.43073_323);
  inb_325 = D.43308_324 == 0;
  # DEBUG inb => inb_325
  D.43309_326 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_mutex;
  D.43310_327 = switch_core_session_get_pool (session_45(D));
  switch_mutex_init (D.43309_326, 1, D.43310_327);
  D.43073_328 = session_45(D)->channel;
  ssrc_329 = switch_channel_get_variable_dup (D.43073_328, "rtp_use_ssrc", 1, -1);
  # DEBUG ssrc => ssrc_329
  if (ssrc_329 != 0B)
    goto <bb 97>;
  else
    goto <bb 98>;

<bb 97>:
  ssrc_ul_330 = strtoul (ssrc_329, 0B, 10);
  # DEBUG ssrc_ul => ssrc_ul_330
  D.43077_331 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  switch_rtp_set_ssrc (D.43077_331, ssrc_ul_330);
  MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ssrc = ssrc_ul_330;
  goto <bb 99>;

<bb 98>:
  D.43077_332 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43314_333 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ssrc;
  switch_rtp_set_ssrc (D.43077_332, D.43314_333);

<bb 99>:
  D.43315_334 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].remote_ssrc;
  if (D.43315_334 != 0)
    goto <bb 100>;
  else
    goto <bb 101>;

<bb 100>:
  D.43077_335 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43315_336 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].remote_ssrc;
  switch_rtp_set_remote_ssrc (D.43077_335, D.43315_336);

<bb 101>:
  D.43073_337 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_337, 36, 1);
  D.43073_338 = session_45(D)->channel;
  D.43171_339 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43187_340 = D.43171_339->agreed_pt;
  D.43188_341 = (int) D.43187_340;
  switch_channel_set_variable_printf (D.43073_338, "rtp_use_pt", "%d", D.43188_341);
  D.43073_342 = session_45(D)->channel;
  val_343 = switch_channel_get_variable_dup (D.43073_342, "rtp_enable_vad_in", 1, -1);
  # DEBUG val => val_343
  if (val_343 != 0B)
    goto <bb 102>;
  else
    goto <bb 104>;

<bb 102>:
  D.43320_344 = switch_true (val_343);
  if (D.43320_344 != 0)
    goto <bb 103>;
  else
    goto <bb 104>;

<bb 103>:
  # DEBUG vad_in => 1

<bb 104>:
  # vad_in_9 = PHI <vad_in_318(101), vad_in_318(102), 1(103)>
  # DEBUG vad_in => vad_in_9
  D.43073_346 = session_45(D)->channel;
  val_347 = switch_channel_get_variable_dup (D.43073_346, "rtp_enable_vad_out", 1, -1);
  # DEBUG val => val_347
  if (val_347 != 0B)
    goto <bb 105>;
  else
    goto <bb 107>;

<bb 105>:
  D.43325_348 = switch_true (val_347);
  if (D.43325_348 != 0)
    goto <bb 106>;
  else
    goto <bb 107>;

<bb 106>:
  # DEBUG vad_out => 1

<bb 107>:
  # vad_out_11 = PHI <vad_out_322(104), vad_out_322(105), 1(106)>
  # DEBUG vad_out => vad_out_11
  D.43073_350 = session_45(D)->channel;
  val_351 = switch_channel_get_variable_dup (D.43073_350, "rtp_disable_vad_in", 1, -1);
  # DEBUG val => val_351
  if (val_351 != 0B)
    goto <bb 108>;
  else
    goto <bb 110>;

<bb 108>:
  D.43330_352 = switch_true (val_351);
  if (D.43330_352 != 0)
    goto <bb 109>;
  else
    goto <bb 110>;

<bb 109>:
  # DEBUG vad_in => 0

<bb 110>:
  # vad_in_10 = PHI <vad_in_9(107), vad_in_9(108), 0(109)>
  # DEBUG vad_in => vad_in_10
  D.43073_354 = session_45(D)->channel;
  val_355 = switch_channel_get_variable_dup (D.43073_354, "rtp_disable_vad_out", 1, -1);
  # DEBUG val => val_355
  if (val_355 != 0B)
    goto <bb 111>;
  else
    goto <bb 113>;

<bb 111>:
  D.43335_356 = switch_true (val_355);
  if (D.43335_356 != 0)
    goto <bb 112>;
  else
    goto <bb 113>;

<bb 112>:
  # DEBUG vad_out => 0

<bb 113>:
  # vad_out_12 = PHI <vad_out_11(110), vad_out_11(111), 0(112)>
  # DEBUG vad_out => vad_out_12
  D.43077_358 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43338_359 = switch_rtp_get_ssrc (D.43077_358);
  MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ssrc = D.43338_359;
  D.43073_360 = session_45(D)->channel;
  D.43314_361 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ssrc;
  switch_channel_set_variable_printf (D.43073_360, "rtp_use_ssrc", "%u", D.43314_361);
  D.43099_362 = smh_46->mparams;
  D.43339_363 = D.43099_362->auto_rtp_bugs;
  D.43340_364 = D.43339_363 & 4;
  if (D.43340_364 != 0)
    goto <bb 114>;
  else
    goto <bb 115>;

<bb 114>:
  D.43343_365 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_bugs;
  D.43344_366 = D.43343_365 | 4;
  MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_bugs = D.43344_366;

<bb 115>:
  D.43073_367 = session_45(D)->channel;
  val_368 = switch_channel_get_variable_dup (D.43073_367, "rtp_manual_rtp_bugs", 1, -1);
  # DEBUG val => val_368
  if (val_368 != 0B)
    goto <bb 116>;
  else
    goto <bb 117>;

<bb 116>:
  D.43347_369 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_bugs;
  switch_core_media_parse_rtp_bugs (D.43347_369, val_368);

<bb 117>:
  D.43077_370 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43343_371 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_bugs;
  D.43099_372 = smh_46->mparams;
  D.43348_373 = D.43099_372->manual_rtp_bugs;
  D.43349_374 = D.43343_371 | D.43348_373;
  switch_rtp_intentional_bugs (D.43077_370, D.43349_374);
  D.43352_375 = vad_in_10 != 0;
  D.43353_376 = inb_325 != 0;
  D.43354_377 = D.43352_375 && D.43353_376;
  if (D.43354_377 != 0)
    goto <bb 119>;
  else
    goto <bb 118>;

<bb 118>:
  D.43356_378 = vad_out_12 != 0;
  D.43357_379 = inb_325 == 0;
  D.43358_380 = D.43356_378 && D.43357_379;
  if (D.43358_380 != 0)
    goto <bb 119>;
  else
    goto <bb 124>;

<bb 119>:
  D.43077_381 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43359_382 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_codec;
  switch_rtp_enable_vad (D.43077_381, session_45(D), D.43359_382, 7);
  D.43360_383 = switch_core_session_get_channel (session_45(D));
  D.43361_384 = switch_channel_get_name (D.43360_383);
  if (vad_in_10 != 0)
    goto <bb 121>;
  else
    goto <bb 120>;

<bb 120>:

<bb 121>:
  # iftmp.47_29 = PHI <"in"(119), ""(120)>
  if (vad_out_12 != 0)
    goto <bb 123>;
  else
    goto <bb 122>;

<bb 122>:

<bb 123>:
  # iftmp.48_30 = PHI <"out"(121), ""(122)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5001, session_45(D), 7, "AUDIO RTP Engage VAD for %s ( %s %s )\n", D.43361_384, iftmp.47_29, iftmp.48_30);

<bb 124>:
  D.43370_389 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.chosen[0];
  D.43371_390 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.cands[D.43370_389][0].ready;
  if (D.43371_390 != 0)
    goto <bb 125>;
  else
    goto <bb 128>;

<bb 125>:
  gen_ice (session_45(D), 0, 0B, 0);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5010, session_45(D), 6, "Activating Audio ICE\n");
  D.43077_391 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43374_392 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.ufrag;
  D.43375_393 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_out.ufrag;
  D.43376_394 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_out.pwd;
  D.43377_395 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.pwd;
  D.43379_396 = switch_ice_direction (session_45(D));
  if (D.43379_396 == 1)
    goto <bb 127>;
  else
    goto <bb 126>;

<bb 126>:

<bb 127>:
  # iftmp.49_31 = PHI <2(125), 6(126)>
  D.43383_399 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in;
  switch_rtp_activate_ice (D.43077_391, D.43374_392, D.43375_393, D.43376_394, D.43377_395, 0, iftmp.49_31, D.43383_399);

<bb 128>:
  D.43073_400 = session_45(D)->channel;
  val_401 = switch_channel_get_variable_dup (D.43073_400, "rtcp_audio_interval_msec", 1, -1);
  # DEBUG val => val_401
  if (val_401 != 0B)
    goto <bb 130>;
  else
    goto <bb 129>;

<bb 129>:
  D.43099_402 = smh_46->mparams;
  val_403 = D.43099_402->rtcp_audio_interval_msec;
  # DEBUG val => val_403
  if (val_403 != 0B)
    goto <bb 130>;
  else
    goto <bb 145>;

<bb 130>:
  # val_1 = PHI <val_401(128), val_403(129)>
  # DEBUG val => val_1
  D.43073_404 = session_45(D)->channel;
  rport_405 = switch_channel_get_variable_dup (D.43073_404, "rtp_remote_audio_rtcp_port", 1, -1);
  # DEBUG rport => rport_405
  remote_rtcp_port_406 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_406
  D.43387_407 = remote_rtcp_port_406 == 0;
  D.43388_408 = rport_405 != 0B;
  D.43389_409 = D.43387_407 && D.43388_408;
  if (D.43389_409 != 0)
    goto <bb 131>;
  else
    goto <bb 132>;

<bb 131>:
  # DEBUG __nptr => rport_405
  D.48086_1338 = strtol (rport_405, 0B, 10);
  remote_rtcp_port_411 = (switch_port_t) D.48086_1338;
  # DEBUG remote_rtcp_port => remote_rtcp_port_411

<bb 132>:
  # remote_rtcp_port_13 = PHI <remote_rtcp_port_406(130), remote_rtcp_port_411(131)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_13
  D.43393_412 = strcasecmp (val_1, "passthru");
  if (D.43393_412 == 0)
    goto <bb 133>;
  else
    goto <bb 134>;

<bb 133>:
  D.43396_413 = (int) remote_rtcp_port_13;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5043, session_45(D), 6, "Activating RTCP PASSTHRU PORT %d\n", D.43396_413);
  D.43077_414 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43397_415 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtcp_mux;
  D.43398_416 = D.43397_415 > 0;
  switch_rtp_activate_rtcp (D.43077_414, -1, remote_rtcp_port_13, D.43398_416);
  goto <bb 137>;

<bb 134>:
  # DEBUG __nptr => val_1
  interval_1339 = strtol (val_1, 0B, 10);
  # DEBUG interval => NULL
  interval.50_418 = (unsigned int) interval_1339;
  D.43401_419 = interval.50_418 + 4294967196;
  if (D.43401_419 > 499900)
    goto <bb 135>;
  else
    goto <bb 136>;

<bb 135>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5048, session_45(D), 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_1339);
  # DEBUG interval => 10000

<bb 136>:
  # interval_14 = PHI <interval_1339(134), 10000(135)>
  # DEBUG interval => interval_14
  D.43396_421 = (int) remote_rtcp_port_13;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5053, session_45(D), 6, "Activating RTCP PORT %d\n", D.43396_421);
  D.43077_422 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43397_423 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtcp_mux;
  D.43398_424 = D.43397_423 > 0;
  switch_rtp_activate_rtcp (D.43077_422, interval_14, remote_rtcp_port_13, D.43398_424);

<bb 137>:
  D.43404_425 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.chosen[1];
  D.43405_426 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.cands[D.43404_425][1].ready;
  if (D.43405_426 != 0)
    goto <bb 138>;
  else
    goto <bb 145>;

<bb 138>:
  D.43397_427 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtcp_mux;
  if (D.43397_427 > 0)
    goto <bb 139>;
  else
    goto <bb 142>;

<bb 139>:
  D.43404_428 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.chosen[1];
  D.43411_429 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.cands[D.43404_428][1].con_addr;
  D.43370_430 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.chosen[0];
  D.43412_431 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.cands[D.43370_430][0].con_addr;
  D.39377_432 = __builtin_strcmp (D.43411_429, D.43412_431);
  if (D.39377_432 == 0)
    goto <bb 140>;
  else
    goto <bb 142>;

<bb 140>:
  D.43404_433 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.chosen[1];
  D.43414_434 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.cands[D.43404_433][1].con_port;
  D.43370_435 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.chosen[0];
  D.43415_436 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.cands[D.43370_435][0].con_port;
  if (D.43414_434 == D.43415_436)
    goto <bb 141>;
  else
    goto <bb 142>;

<bb 141>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5061, session_45(D), 6, "Skipping RTCP ICE (Same as RTP)\n");
  goto <bb 145>;

<bb 142>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5063, session_45(D), 6, "Activating RTCP ICE\n");
  D.43077_437 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43374_438 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.ufrag;
  D.43375_439 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_out.ufrag;
  D.43376_440 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_out.pwd;
  D.43377_441 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in.pwd;
  D.43418_442 = switch_ice_direction (session_45(D));
  if (D.43418_442 == 1)
    goto <bb 144>;
  else
    goto <bb 143>;

<bb 143>:

<bb 144>:
  # iftmp.51_32 = PHI <2(142), 6(143)>
  D.43383_445 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].ice_in;
  switch_rtp_activate_ice (D.43077_437, D.43374_438, D.43375_439, D.43376_440, D.43377_441, 1, iftmp.51_32, D.43383_445);

<bb 145>:
  D.43422_446 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].local_dtls_fingerprint.str;
  # DEBUG s => D.43422_446
  if (D.43422_446 == 0B)
    goto <bb 148>;
  else
    goto <bb 146>;

<bb 146>:
  D.48093_1340 = MEM[(const char *)smh_46 + 10984B];
  if (D.48093_1340 == 0)
    goto <bb 148>;
  else
    goto <bb 147>;

<bb 147>:

<bb 148>:
  # D.48092_1341 = PHI <1(145), 1(146), 0(147)>
  if (D.48092_1341 == 0)
    goto <bb 149>;
  else
    goto <bb 163>;

<bb 149>:
  D.43426_448 = switch_rtp_has_dtls ();
  if (D.43426_448 != 0)
    goto <bb 150>;
  else
    goto <bb 163>;

<bb 150>:
  D.43429_449 = smh_46->session;
  D.43430_450 = dtls_ok (D.43429_449);
  if (D.43430_450 != 0)
    goto <bb 151>;
  else
    goto <bb 163>;

<bb 151>:
  D.43429_451 = smh_46->session;
  D.43434_452 = D.43429_451->channel;
  D.43435_453 = switch_channel_direction (D.43434_452);
  if (D.43435_453 == 0)
    goto <bb 153>;
  else
    goto <bb 152>;

<bb 152>:

<bb 153>:
  # dtype_33 = PHI <1(151), 2(152)>
  # DEBUG dtype => dtype_33
  D.43429_457 = smh_46->session;
  D.43434_458 = D.43429_457->channel;
  D.43439_459 = switch_channel_test_flag (D.43434_458, 112);
  if (D.43439_459 != 0)
    goto <bb 154>;
  else
    goto <bb 157>;

<bb 154>:
  if (dtype_33 == 1)
    goto <bb 156>;
  else
    goto <bb 155>;

<bb 155>:

<bb 156>:
  # dtype_34 = PHI <2(154), 1(155)>
  # DEBUG dtype => dtype_34

<bb 157>:
  # dtype_16 = PHI <dtype_33(153), dtype_34(156)>
  # DEBUG dtype => dtype_16
  # DEBUG xtype => 4
  D.43397_464 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtcp_mux;
  if (D.43397_464 > 0)
    goto <bb 158>;
  else
    goto <bb 160>;

<bb 158>:
  D.43099_465 = smh_46->mparams;
  D.43448_466 = D.43099_465->rtcp_audio_interval_msec;
  if (D.43448_466 != 0B)
    goto <bb 159>;
  else
    goto <bb 160>;

<bb 159>:
  # DEBUG xtype => 12

<bb 160>:
  # xtype_15 = PHI <4(157), 4(158), 12(159)>
  # DEBUG xtype => xtype_15
  D.43077_468 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43451_469 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].local_dtls_fingerprint;
  D.43452_470 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].remote_dtls_fingerprint;
  D.43453_471 = dtype_16 | xtype_15;
  switch_rtp_add_dtls (D.43077_468, D.43451_469, D.43452_470, D.43453_471);
  D.43397_472 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtcp_mux;
  if (D.43397_472 <= 0)
    goto <bb 161>;
  else
    goto <bb 163>;

<bb 161>:
  D.43099_473 = smh_46->mparams;
  D.43448_474 = D.43099_473->rtcp_audio_interval_msec;
  if (D.43448_474 != 0B)
    goto <bb 162>;
  else
    goto <bb 163>;

<bb 162>:
  # DEBUG xtype => 8
  D.43077_476 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43451_477 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].local_dtls_fingerprint;
  D.43452_478 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].remote_dtls_fingerprint;
  D.43453_479 = dtype_16 | 8;
  switch_rtp_add_dtls (D.43077_476, D.43451_477, D.43452_478, D.43453_479);

<bb 163>:
  D.43073_480 = session_45(D)->channel;
  val_481 = switch_channel_get_variable_dup (D.43073_480, "jitterbuffer_msec", 1, -1);
  # DEBUG val => val_481
  if (val_481 != 0B)
    goto <bb 165>;
  else
    goto <bb 164>;

<bb 164>:
  D.43099_482 = smh_46->mparams;
  val_483 = D.43099_482->jb_msec;
  # DEBUG val => val_483
  if (val_483 != 0B)
    goto <bb 165>;
  else
    goto <bb 182>;

<bb 165>:
  # val_2 = PHI <val_481(163), val_483(164)>
  # DEBUG val => val_2
  # DEBUG __nptr => val_2
  jb_msec_1342 = strtol (val_2, 0B, 10);
  # DEBUG jb_msec => NULL
  # DEBUG maxlen => 0
  # DEBUG max_drift => 0
  p_487 = __builtin_strchr (val_2, 58);
  # DEBUG p => p_487
  if (p_487 != 0B)
    goto <bb 166>;
  else
    goto <bb 168>;

<bb 166>:
  p_488 = p_487 + 1;
  # DEBUG p => p_488
  # DEBUG __nptr => p_488
  maxlen_1343 = strtol (p_488, 0B, 10);
  # DEBUG maxlen => NULL
  q_490 = __builtin_strchr (p_488, 58);
  # DEBUG q => q_490
  if (q_490 != 0B)
    goto <bb 167>;
  else
    goto <bb 168>;

<bb 167>:
  q_491 = q_490 + 1;
  # DEBUG q => q_491
  # DEBUG __nptr => q_491
  D.48102_1344 = strtol (q_491, 0B, 10);
  max_drift_493 = ABS_EXPR <D.48102_1344>;
  # DEBUG max_drift => max_drift_493

<bb 168>:
  # maxlen_18 = PHI <0(165), maxlen_1343(166), maxlen_1343(167)>
  # max_drift_19 = PHI <0(165), 0(166), max_drift_493(167)>
  # DEBUG max_drift => max_drift_19
  # DEBUG maxlen => maxlen_18
  jb_msec.54_494 = (unsigned int) jb_msec_1342;
  D.43467_495 = jb_msec.54_494 + 9;
  if (D.43467_495 <= 8)
    goto <bb 169>;
  else
    goto <bb 170>;

<bb 169>:
  D.43470_496 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_codec.implementation;
  D.43471_497 = D.43470_496->microseconds_per_packet;
  D.43472_498 = D.43471_497 / 1000;
  D.43473_499 = ABS_EXPR <jb_msec_1342>;
  jb_msec_500 = D.43472_498 * D.43473_499;
  # DEBUG jb_msec => jb_msec_500

<bb 170>:
  # jb_msec_17 = PHI <jb_msec_1342(168), jb_msec_500(169)>
  # DEBUG jb_msec => jb_msec_17
  jb_msec.54_501 = (unsigned int) jb_msec_17;
  D.43474_502 = jb_msec.54_501 + 4294967276;
  if (D.43474_502 > 9980)
    goto <bb 171>;
  else
    goto <bb 172>;

<bb 171>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5125, session_45(D), 3, "Invalid Jitterbuffer spec [%d] must be between 20 and 10000\n", jb_msec_17);
  goto <bb 182>;

<bb 172>:
  # DEBUG maxqlen => 50
  D.43189_504 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.microseconds_per_packet;
  D.43190_505 = D.43189_504 / 1000;
  qlen_506 = jb_msec_17 / D.43190_505;
  # DEBUG qlen => qlen_506
  if (qlen_506 <= 0)
    goto <bb 173>;
  else
    goto <bb 174>;

<bb 173>:
  # DEBUG qlen => 3

<bb 174>:
  # qlen_20 = PHI <qlen_506(172), 3(173)>
  # DEBUG qlen => qlen_20
  if (maxlen_18 != 0)
    goto <bb 175>;
  else
    goto <bb 176>;

<bb 175>:
  D.43189_508 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.microseconds_per_packet;
  D.43190_509 = D.43189_508 / 1000;
  maxqlen_510 = maxlen_18 / D.43190_509;
  # DEBUG maxqlen => maxqlen_510

<bb 176>:
  # maxqlen_21 = PHI <50(174), maxqlen_510(175)>
  # DEBUG maxqlen => maxqlen_21
  if (maxqlen_21 < qlen_20)
    goto <bb 177>;
  else
    goto <bb 178>;

<bb 177>:
  maxqlen_511 = qlen_20 * 5;
  # DEBUG maxqlen => maxqlen_511

<bb 178>:
  # maxqlen_22 = PHI <maxqlen_21(176), maxqlen_511(177)>
  # DEBUG maxqlen => maxqlen_22
  D.43077_512 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  qlen.55_513 = (uint32_t) qlen_20;
  maxqlen.56_514 = (uint32_t) maxqlen_22;
  D.43294_515 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.samples_per_packet;
  D.43486_516 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.samples_per_second;
  max_drift.57_517 = (uint32_t) max_drift_19;
  D.43488_518 = switch_rtp_activate_jitter_buffer (D.43077_512, qlen.55_513, maxqlen.56_514, D.43294_515, D.43486_516, max_drift.57_517);
  if (D.43488_518 == 0)
    goto <bb 179>;
  else
    goto <bb 181>;

<bb 179>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5146, session_45(D), 7, "Setting Jitterbuffer to %dms (%d frames)\n", jb_msec_17, qlen_20);
  D.43073_519 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_519, 57, 1);
  D.43073_520 = session_45(D)->channel;
  D.43491_521 = switch_channel_get_variable_dup (D.43073_520, "rtp_jitter_buffer_plc", 1, -1);
  D.43492_522 = switch_false (D.43491_521);
  if (D.43492_522 == 0)
    goto <bb 180>;
  else
    goto <bb 182>;

<bb 180>:
  D.43073_523 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_523, 58, 1);
  goto <bb 182>;

<bb 181>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5153, session_45(D), 4, "Error Setting Jitterbuffer to %dms (%d frames)\n", jb_msec_17, qlen_20);

<bb 182>:
  D.43073_524 = session_45(D)->channel;
  val_525 = switch_channel_get_variable_dup (D.43073_524, "rtp_timeout_sec", 1, -1);
  # DEBUG val => val_525
  if (val_525 != 0B)
    goto <bb 183>;
  else
    goto <bb 185>;

<bb 183>:
  # DEBUG __nptr => val_525
  v_1345 = strtol (val_525, 0B, 10);
  # DEBUG v => NULL
  if (v_1345 >= 0)
    goto <bb 184>;
  else
    goto <bb 185>;

<bb 184>:
  D.43099_527 = smh_46->mparams;
  v.58_528 = (uint32_t) v_1345;
  D.43099_527->rtp_timeout_sec = v.58_528;

<bb 185>:
  D.43073_529 = session_45(D)->channel;
  val_530 = switch_channel_get_variable_dup (D.43073_529, "rtp_hold_timeout_sec", 1, -1);
  # DEBUG val => val_530
  if (val_530 != 0B)
    goto <bb 186>;
  else
    goto <bb 188>;

<bb 186>:
  # DEBUG __nptr => val_530
  v_1346 = strtol (val_530, 0B, 10);
  # DEBUG v => NULL
  if (v_1346 >= 0)
    goto <bb 187>;
  else
    goto <bb 188>;

<bb 187>:
  D.43099_532 = smh_46->mparams;
  v.59_533 = (uint32_t) v_1346;
  D.43099_532->rtp_hold_timeout_sec = v.59_533;

<bb 188>:
  D.43099_534 = smh_46->mparams;
  D.43506_535 = D.43099_534->rtp_timeout_sec;
  if (D.43506_535 != 0)
    goto <bb 189>;
  else
    goto <bb 191>;

<bb 189>:
  D.43486_536 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.samples_per_second;
  D.43099_537 = smh_46->mparams;
  D.43506_538 = D.43099_537->rtp_timeout_sec;
  D.43509_539 = D.43486_536 * D.43506_538;
  D.43294_540 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.samples_per_packet;
  D.43510_541 = D.43509_539 / D.43294_540;
  MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].max_missed_packets = D.43510_541;
  D.43077_542 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43511_543 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].max_missed_packets;
  switch_rtp_set_max_missed_packets (D.43077_542, D.43511_543);
  D.43099_544 = smh_46->mparams;
  D.43512_545 = D.43099_544->rtp_hold_timeout_sec;
  if (D.43512_545 == 0)
    goto <bb 190>;
  else
    goto <bb 191>;

<bb 190>:
  D.43099_547 = smh_46->mparams;
  D.43506_548 = D.43099_547->rtp_timeout_sec;
  D.43515_549 = D.43506_548 * 10;
  D.43099_547->rtp_hold_timeout_sec = D.43515_549;

<bb 191>:
  D.43099_550 = smh_46->mparams;
  D.43512_551 = D.43099_550->rtp_hold_timeout_sec;
  if (D.43512_551 != 0)
    goto <bb 192>;
  else
    goto <bb 193>;

<bb 192>:
  D.43486_552 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.samples_per_second;
  D.43099_553 = smh_46->mparams;
  D.43512_554 = D.43099_553->rtp_hold_timeout_sec;
  D.43518_555 = D.43486_552 * D.43512_554;
  D.43294_556 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.samples_per_packet;
  D.43519_557 = D.43518_555 / D.43294_556;
  MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].max_missed_hold_packets = D.43519_557;

<bb 193>:
  D.43099_558 = smh_46->mparams;
  D.43520_559 = D.43099_558->te;
  if (D.43520_559 != 0)
    goto <bb 194>;
  else
    goto <bb 195>;

<bb 194>:
  D.43099_560 = smh_46->mparams;
  D.43520_561 = D.43099_560->te;
  D.43523_562 = (int) D.43520_561;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5188, session_45(D), 7, "Set 2833 dtmf send payload to %u\n", D.43523_562);
  D.43077_563 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43099_564 = smh_46->mparams;
  D.43520_565 = D.43099_564->te;
  switch_rtp_set_telephony_event (D.43077_563, D.43520_565);
  D.43073_566 = session_45(D)->channel;
  D.43099_567 = smh_46->mparams;
  D.43520_568 = D.43099_567->te;
  D.43523_569 = (int) D.43520_568;
  switch_channel_set_variable_printf (D.43073_566, "rtp_2833_send_payload", "%d", D.43523_569);

<bb 195>:
  D.43099_570 = smh_46->mparams;
  D.43524_571 = D.43099_570->recv_te;
  if (D.43524_571 != 0)
    goto <bb 196>;
  else
    goto <bb 197>;

<bb 196>:
  D.43099_572 = smh_46->mparams;
  D.43524_573 = D.43099_572->recv_te;
  D.43527_574 = (int) D.43524_573;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5194, session_45(D), 7, "Set 2833 dtmf receive payload to %u\n", D.43527_574);
  D.43077_575 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43099_576 = smh_46->mparams;
  D.43524_577 = D.43099_576->recv_te;
  switch_rtp_set_telephony_recv_event (D.43077_575, D.43524_577);
  D.43073_578 = session_45(D)->channel;
  D.43099_579 = smh_46->mparams;
  D.43524_580 = D.43099_579->recv_te;
  D.43527_581 = (int) D.43524_580;
  switch_channel_set_variable_printf (D.43073_578, "rtp_2833_recv_payload", "%d", D.43527_581);

<bb 197>:
  D.43531_582 = switch_media_handle_test_media_flag (smh_46, 9);
  if (D.43531_582 != 0)
    goto <bb 202>;
  else
    goto <bb 198>;

<bb 198>:
  D.43073_583 = session_45(D)->channel;
  val_584 = switch_channel_get_variable_dup (D.43073_583, "supress_cng", 1, -1);
  # DEBUG val => val_584
  if (val_584 != 0B)
    goto <bb 199>;
  else
    goto <bb 200>;

<bb 199>:
  D.43534_585 = switch_true (val_584);
  if (D.43534_585 != 0)
    goto <bb 202>;
  else
    goto <bb 200>;

<bb 200>:
  D.43073_586 = session_45(D)->channel;
  val_587 = switch_channel_get_variable_dup (D.43073_586, "suppress_cng", 1, -1);
  # DEBUG val => val_587
  if (val_587 != 0B)
    goto <bb 201>;
  else
    goto <bb 203>;

<bb 201>:
  D.43536_588 = switch_true (val_587);
  if (D.43536_588 != 0)
    goto <bb 202>;
  else
    goto <bb 203>;

<bb 202>:
  D.43099_589 = smh_46->mparams;
  D.43099_589->cng_pt = 0;

<bb 203>:
  D.43073_590 = session_45(D)->channel;
  val_591 = switch_channel_get_variable_dup (D.43073_590, "rtp_digit_delay", 1, -1);
  # DEBUG val => val_591
  if (val_591 != 0B)
    goto <bb 204>;
  else
    goto <bb 207>;

<bb 204>:
  # DEBUG __nptr => val_591
  delayi_1347 = strtol (val_591, 0B, 10);
  # DEBUG delayi => NULL
  if (delayi_1347 < 0)
    goto <bb 205>;
  else
    goto <bb 206>;

<bb 205>:
  # DEBUG delayi => 0

<bb 206>:
  # delayi_23 = PHI <delayi_1347(204), 0(205)>
  # DEBUG delayi => delayi_23
  D.43099_594 = smh_46->mparams;
  delayi.60_595 = (unsigned int) delayi_23;
  D.43099_594->dtmf_delay = delayi.60_595;

<bb 207>:
  D.43099_596 = smh_46->mparams;
  D.43542_597 = D.43099_596->dtmf_delay;
  if (D.43542_597 != 0)
    goto <bb 208>;
  else
    goto <bb 209>;

<bb 208>:
  D.43077_598 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43099_599 = smh_46->mparams;
  D.43542_600 = D.43099_599->dtmf_delay;
  switch_rtp_set_interdigit_delay (D.43077_598, D.43542_600);
  D.43073_601 = session_45(D)->channel;
  D.43545_602 = switch_channel_get_name (D.43073_601);
  D.43099_603 = smh_46->mparams;
  D.43542_604 = D.43099_603->dtmf_delay;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5216, session_45(D), 7, "%s Set rtp dtmf delay to %u\n", D.43545_602, D.43542_604);

<bb 209>:
  D.43099_605 = smh_46->mparams;
  D.43143_606 = D.43099_605->cng_pt;
  if (D.43143_606 != 0)
    goto <bb 210>;
  else
    goto <bb 212>;

<bb 210>:
  D.43548_607 = switch_media_handle_test_media_flag (smh_46, 9);
  if (D.43548_607 == 0)
    goto <bb 211>;
  else
    goto <bb 212>;

<bb 211>:
  D.43099_608 = smh_46->mparams;
  D.43143_609 = D.43099_608->cng_pt;
  D.43551_610 = (int) D.43143_609;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5222, session_45(D), 7, "Set comfort noise payload to %u\n", D.43551_610);
  D.43077_611 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  D.43099_612 = smh_46->mparams;
  D.43143_613 = D.43099_612->cng_pt;
  switch_rtp_set_cng_pt (D.43077_611, D.43143_613);

<bb 212>:
  switch_core_session_apply_crypto (session_45(D), 0);
  D.43171_614 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43174_615 = D.43171_614->remote_sdp_port;
  D.43179_616 = (int) D.43174_615;
  switch_snprintf (&tmp, 50, "%d", D.43179_616);
  D.43073_617 = session_45(D)->channel;
  D.43171_618 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_619 = D.43171_618->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_617, "remote_media_ip", D.43172_619, 1);
  D.43073_620 = session_45(D)->channel;
  switch_channel_set_variable_var_check (D.43073_620, "remote_media_port", &tmp, 1);
  D.43073_621 = session_45(D)->channel;
  D.43552_622 = switch_channel_test_flag (D.43073_621, 74);
  if (D.43552_622 != 0)
    goto <bb 213>;
  else
    goto <bb 214> (video);

<bb 213>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5234, session_45(D), 6, "Activating ZRTP PROXY MODE\n");
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5235, session_45(D), 7, "Disable NOTIMER_DURING_BRIDGE\n");
  D.43073_623 = session_45(D)->channel;
  switch_channel_clear_flag (D.43073_623, 99);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5237, session_45(D), 7, "Activating audio UDPTL mode\n");
  D.43077_624 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].rtp_session;
  switch_rtp_udptl_mode (D.43077_624);

  # status_4 = PHI <0(15), status_73(60), status_73(80), status_73(212), status_73(213), status_73(79)>
video:
  # DEBUG status => status_4
  D.43073_630 = session_45(D)->channel;
  D.43555_631 = switch_channel_direction (D.43073_630);
  if (D.43555_631 == 1)
    goto <bb 215>;
  else
    goto <bb 216>;

<bb 215>:
  switch_core_media_check_video_codecs (session_45(D));

<bb 216>:
  D.43073_632 = session_45(D)->channel;
  D.43558_633 = switch_channel_test_flag (D.43073_632, 98);
  if (D.43558_633 != 0)
    goto <bb 217>;
  else
    goto <bb 320> (video_up);

<bb 217>:
  D.43561_634 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43562_635 = D.43561_634->rm_encoding;
  if (D.43562_635 != 0B)
    goto <bb 218>;
  else
    goto <bb 320> (video_up);

<bb 218>:
  D.43561_636 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43565_637 = D.43561_636->remote_sdp_port;
  if (D.43565_637 != 0)
    goto <bb 219>;
  else
    goto <bb 320> (video_up);

<bb 219>:
  D.43096_638 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  if (D.43096_638 != 0B)
    goto <bb 220>;
  else
    goto <bb 226>;

<bb 220>:
  D.43073_639 = session_45(D)->channel;
  D.43570_640 = switch_channel_test_flag (D.43073_639, 103);
  if (D.43570_640 != 0)
    goto <bb 221>;
  else
    goto <bb 226>;

<bb 221>:
  D.43096_641 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  remote_host_642 = switch_rtp_get_remote_host (D.43096_641);
  # DEBUG remote_host => remote_host_642
  D.43096_643 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  remote_port_644 = switch_rtp_get_remote_port (D.43096_643);
  # DEBUG remote_port => remote_port_644
  D.43574_645 = remote_host_642 != 0B;
  D.43575_646 = remote_port_644 != 0;
  D.43576_647 = D.43574_645 && D.43575_646;
  if (D.43576_647 != 0)
    goto <bb 222>;
  else
    goto <bb 225>;

<bb 222>:
  D.43561_648 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43578_649 = D.43561_648->remote_sdp_ip;
  D.39400_650 = __builtin_strcmp (remote_host_642, D.43578_649);
  if (D.39400_650 == 0)
    goto <bb 223>;
  else
    goto <bb 225>;

<bb 223>:
  D.43561_651 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43565_652 = D.43561_651->remote_sdp_port;
  if (D.43565_652 == remote_port_644)
    goto <bb 224>;
  else
    goto <bb 225>;

<bb 224>:
  D.43073_653 = session_45(D)->channel;
  D.43581_654 = switch_channel_get_name (D.43073_653);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5263, session_45(D), 7, "Video params are unchanged for %s.\n", D.43581_654);
  goto <bb 320> (video_up);

<bb 225>:
  D.43073_655 = session_45(D)->channel;
  D.43582_656 = switch_channel_get_name (D.43073_655);
  D.43583_657 = (int) remote_port_644;
  D.43561_658 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43578_659 = D.43561_658->remote_sdp_ip;
  D.43561_660 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43565_661 = D.43561_660->remote_sdp_port;
  D.43584_662 = (int) D.43565_661;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5267, session_45(D), 7, "Video params changed for %s from %s:%d to %s:%d\n", D.43582_656, remote_host_642, D.43583_657, D.43578_659, D.43584_662);

<bb 226>:
  D.43073_663 = session_45(D)->channel;
  D.43585_664 = switch_channel_test_flag (D.43073_663, 29);
  if (D.43585_664 == 0)
    goto <bb 227>;
  else
    goto <bb 229>;

<bb 227>:
  D.43096_665 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43588_666 = switch_rtp_ready (D.43096_665);
  if (D.43588_666 != 0)
    goto <bb 228>;
  else
    goto <bb 229>;

<bb 228>:
  D.43073_667 = session_45(D)->channel;
  D.43591_668 = switch_channel_get_name (D.43073_667);
  D.43171_669 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_670 = D.43171_669->remote_sdp_ip;
  D.43592_671 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].local_sdp_port;
  D.43593_672 = (int) D.43592_671;
  D.43561_673 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43578_674 = D.43561_673->remote_sdp_ip;
  D.43561_675 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43565_676 = D.43561_675->remote_sdp_port;
  D.43584_677 = (int) D.43565_676;
  D.43561_678 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43594_679 = D.43561_678->agreed_pt;
  D.43595_680 = (int) D.43594_679;
  D.43189_681 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].read_impl.microseconds_per_packet;
  D.43190_682 = D.43189_681 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5275, session_45(D), 7, "VIDEO RTP [%s] %s port %d -> %s port %d codec: %u ms: %d\n", D.43591_668, D.43172_670, D.43593_672, D.43578_674, D.43584_677, D.43595_680, D.43190_682);
  start_video_thread (session_45(D));
  D.43096_683 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43561_684 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43594_685 = D.43561_684->agreed_pt;
  switch_rtp_set_default_payload (D.43096_683, D.43594_685);

<bb 229>:
  D.43592_686 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].local_sdp_port;
  D.43593_687 = (int) D.43592_686;
  switch_snprintf (&tmp, 50, "%d", D.43593_687);
  D.43073_688 = session_45(D)->channel;
  D.43191_689 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].adv_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_688, "local_video_ip", D.43191_689, 1);
  D.43073_690 = session_45(D)->channel;
  switch_channel_set_variable_var_check (D.43073_690, "local_video_port", &tmp, 1);
  D.43096_691 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  if (D.43096_691 != 0B)
    goto <bb 230>;
  else
    goto <bb 241>;

<bb 230>:
  D.43073_692 = session_45(D)->channel;
  D.43598_693 = switch_channel_test_flag (D.43073_692, 103);
  if (D.43598_693 != 0)
    goto <bb 231>;
  else
    goto <bb 241>;

<bb 231>:
  # DEBUG rport => 0B
  remote_rtcp_port_695 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_695
  if (remote_rtcp_port_695 == 0)
    goto <bb 232>;
  else
    goto <bb 234>;

<bb 232>:
  D.43073_696 = session_45(D)->channel;
  rport_697 = switch_channel_get_variable_dup (D.43073_696, "rtp_remote_video_rtcp_port", 1, -1);
  # DEBUG rport => rport_697
  if (rport_697 != 0B)
    goto <bb 233>;
  else
    goto <bb 234>;

<bb 233>:
  # DEBUG __nptr => rport_697
  D.48114_1348 = strtol (rport_697, 0B, 10);
  remote_rtcp_port_699 = (switch_port_t) D.48114_1348;
  # DEBUG remote_rtcp_port => remote_rtcp_port_699

<bb 234>:
  # remote_rtcp_port_24 = PHI <remote_rtcp_port_695(231), remote_rtcp_port_695(232), remote_rtcp_port_699(233)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_24
  D.43096_700 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43561_701 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43578_702 = D.43561_701->remote_sdp_ip;
  D.43561_703 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43565_704 = D.43561_703->remote_sdp_port;
  D.43606_705 = switch_rtp_set_remote_address (D.43096_700, D.43578_702, D.43565_704, remote_rtcp_port_24, 1, &err);
  if (D.43606_705 != 0)
    goto <bb 235>;
  else
    goto <bb 236>;

<bb 235>:
  err.45_706 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5306, session_45(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", err.45_706);
  goto <bb 320> (video_up);

<bb 236>:
  D.43561_707 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43578_708 = D.43561_707->remote_sdp_ip;
  D.43561_709 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43565_710 = D.43561_709->remote_sdp_port;
  D.43584_711 = (int) D.43565_710;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5308, session_45(D), 7, "VIDEO RTP CHANGING DEST TO: [%s:%d]\n", D.43578_708, D.43584_711);
  D.43612_712 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43612_712 == 0)
    goto <bb 237>;
  else
    goto <bb 320> (video_up);

<bb 237>:
  D.43073_713 = session_45(D)->channel;
  D.43615_714 = switch_channel_test_flag (D.43073_713, 106);
  if (D.43615_714 == 0)
    goto <bb 238>;
  else
    goto <bb 320> (video_up);

<bb 238>:
  D.43073_715 = session_45(D)->channel;
  val_716 = switch_channel_get_variable_dup (D.43073_715, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_716
  if (val_716 == 0B)
    goto <bb 240>;
  else
    goto <bb 239>;

<bb 239>:
  D.43619_717 = switch_true (val_716);
  if (D.43619_717 == 0)
    goto <bb 240>;
  else
    goto <bb 320> (video_up);

<bb 240>:
  D.43096_718 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  switch_rtp_set_flag (D.43096_718, 7);
  start_video_thread (session_45(D));
  goto <bb 320> (video_up);

<bb 241>:
  D.43073_719 = session_45(D)->channel;
  D.43620_720 = switch_channel_test_flag (D.43073_719, 29);
  if (D.43620_720 != 0)
    goto <bb 242>;
  else
    goto <bb 249>;

<bb 242>:
  switch_core_media_proxy_remote_addr (session_45(D), 0B);
  memset (&flags, 0, 156);
  D.43270_721 = flags[19];
  D.43271_722 = D.43270_721 + 1;
  flags[19] = D.43271_722;
  D.43102_723 = flags[13];
  D.43103_724 = D.43102_723 + 1;
  flags[13] = D.43103_724;
  D.43625_725 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43625_725 == 0)
    goto <bb 243>;
  else
    goto <bb 247>;

<bb 243>:
  D.43073_726 = session_45(D)->channel;
  D.43628_727 = switch_channel_test_flag (D.43073_726, 106);
  if (D.43628_727 == 0)
    goto <bb 244>;
  else
    goto <bb 247>;

<bb 244>:
  D.43073_728 = session_45(D)->channel;
  val_729 = switch_channel_get_variable_dup (D.43073_728, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_729
  if (val_729 == 0B)
    goto <bb 246>;
  else
    goto <bb 245>;

<bb 245>:
  D.43632_730 = switch_true (val_729);
  if (D.43632_730 == 0)
    goto <bb 246>;
  else
    goto <bb 247>;

<bb 246>:
  D.43114_731 = flags[7];
  D.43115_732 = D.43114_731 + 1;
  flags[7] = D.43115_732;

<bb 247>:
  # DEBUG timer_name => 0B
  D.43073_734 = session_45(D)->channel;
  D.43633_735 = switch_channel_get_name (D.43073_734);
  D.43171_736 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_737 = D.43171_736->remote_sdp_ip;
  D.43592_738 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].local_sdp_port;
  D.43593_739 = (int) D.43592_738;
  D.43561_740 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43578_741 = D.43561_740->remote_sdp_ip;
  D.43561_742 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43565_743 = D.43561_742->remote_sdp_port;
  D.43584_744 = (int) D.43565_743;
  D.43561_745 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43594_746 = D.43561_745->agreed_pt;
  D.43595_747 = (int) D.43594_746;
  D.43634_748 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].read_impl.microseconds_per_packet;
  D.43635_749 = D.43634_748 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5334, session_45(D), 7, "PROXY VIDEO RTP [%s] %s:%d->%s:%d codec: %u ms: %d\n", D.43633_735, D.43172_737, D.43593_739, D.43578_741, D.43584_744, D.43595_747, D.43635_749);
  D.43096_750 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43636_751 = switch_rtp_ready (D.43096_750);
  if (D.43636_751 != 0)
    goto <bb 248>;
  else
    goto <bb 250>;

<bb 248>:
  D.43096_752 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43561_753 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43594_754 = D.43561_753->agreed_pt;
  switch_rtp_set_default_payload (D.43096_752, D.43594_754);
  goto <bb 250>;

<bb 249>:
  # DEBUG D#24 => smh_46->mparams
  # DEBUG D#23 => D#24->timer_name
  # DEBUG timer_name => D#23
  D.43073_757 = session_45(D)->channel;
  switch_channel_get_variable_dup (D.43073_757, "rtp_timer_name", 1, -1);
  # DEBUG var => NULL

<bb 250>:
  D.43096_760 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  if (D.43096_760 != 0B)
    goto <bb 320> (video_up);
  else
    goto <bb 251>;

<bb 251>:
  D.43592_761 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].local_sdp_port;
  if (D.43592_761 == 0)
    goto <bb 252>;
  else
    goto <bb 253>;

<bb 252>:
  switch_core_media_choose_port (session_45(D), 1, 1);

<bb 253>:
  memset (&flags, 0, 156);
  D.43102_762 = flags[13];
  D.43103_763 = D.43102_762 + 1;
  flags[13] = D.43103_763;
  D.43137_764 = flags[8];
  D.43138_765 = D.43137_764 + 1;
  flags[8] = D.43138_765;
  D.43647_766 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43647_766 == 0)
    goto <bb 254>;
  else
    goto <bb 259>;

<bb 254>:
  D.43073_767 = session_45(D)->channel;
  D.43650_768 = switch_channel_test_flag (D.43073_767, 15);
  if (D.43650_768 == 0)
    goto <bb 255>;
  else
    goto <bb 259>;

<bb 255>:
  D.43073_769 = session_45(D)->channel;
  val_770 = switch_channel_get_variable_dup (D.43073_769, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_770
  if (val_770 == 0B)
    goto <bb 257>;
  else
    goto <bb 256>;

<bb 256>:
  D.43654_771 = switch_true (val_770);
  if (D.43654_771 == 0)
    goto <bb 257>;
  else
    goto <bb 259>;

<bb 257>:
  D.43073_772 = session_45(D)->channel;
  D.43655_773 = switch_channel_test_flag (D.43073_772, 106);
  if (D.43655_773 == 0)
    goto <bb 258>;
  else
    goto <bb 259>;

<bb 258>:
  D.43114_774 = flags[7];
  D.43115_775 = D.43114_774 + 1;
  flags[7] = D.43115_775;

<bb 259>:
  D.43073_776 = session_45(D)->channel;
  D.43658_777 = switch_channel_test_flag (D.43073_776, 29);
  if (D.43658_777 != 0)
    goto <bb 260>;
  else
    goto <bb 261>;

<bb 260>:
  D.43270_778 = flags[19];
  D.43271_779 = D.43270_778 + 1;
  flags[19] = D.43271_779;

<bb 261>:
  switch_core_media_set_video_codec (session_45(D), 0);
  flags[3] = 0;
  flags[0] = 0;
  D.43661_780 = flags[30];
  D.43662_781 = D.43661_780 + 1;
  flags[30] = D.43662_781;
  D.43184_782 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].local_sdp_ip;
  D.43592_783 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].local_sdp_port;
  D.43561_784 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43578_785 = D.43561_784->remote_sdp_ip;
  D.43561_786 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43565_787 = D.43561_786->remote_sdp_port;
  D.43561_788 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43594_789 = D.43561_788->agreed_pt;
  D.43663_790 = switch_core_session_get_pool (session_45(D));
  D.43664_791 = switch_rtp_new (D.43184_782, D.43592_783, D.43578_785, D.43565_787, D.43594_789, 1, 90000, &flags, 0B, &err, D.43663_790);
  MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session = D.43664_791;
  D.43073_792 = session_45(D)->channel;
  D.43666_793 = switch_channel_test_flag (D.43073_792, 29);
  if (D.43666_793 != 0)
    goto <bb 263>;
  else
    goto <bb 262>;

<bb 262>:

<bb 263>:
  # iftmp.61_35 = PHI <"PROXY "(261), ""(262)>
  D.43073_796 = session_45(D)->channel;
  D.43670_797 = switch_channel_get_name (D.43073_796);
  D.43171_798 = MEM[(struct switch_rtp_engine_t *)smh_46 + 80B].cur_payload_map;
  D.43172_799 = D.43171_798->remote_sdp_ip;
  D.43592_800 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].local_sdp_port;
  D.43593_801 = (int) D.43592_800;
  D.43561_802 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43578_803 = D.43561_802->remote_sdp_ip;
  D.43561_804 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43565_805 = D.43561_804->remote_sdp_port;
  D.43584_806 = (int) D.43565_805;
  D.43561_807 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43594_808 = D.43561_807->agreed_pt;
  D.43595_809 = (int) D.43594_808;
  D.43096_810 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43672_811 = switch_rtp_ready (D.43096_810);
  if (D.43672_811 == 0)
    goto <bb 264>;
  else
    goto <bb 265>;

<bb 264>:
  iftmp.62_812 = err;

<bb 265>:
  # iftmp.62_36 = PHI <iftmp.62_812(264), "SUCCESS"(263)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5391, session_45(D), 7, "%sVIDEO RTP [%s] %s:%d->%s:%d codec: %u ms: %d [%s]\n", iftmp.61_35, D.43670_797, D.43172_799, D.43593_801, D.43578_803, D.43584_806, D.43595_809, 0, iftmp.62_36);
  D.43096_814 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43676_815 = switch_rtp_ready (D.43096_814);
  if (D.43676_815 != 0)
    goto <bb 266>;
  else
    goto <bb 314>;

<bb 266>:
  D.43679_816 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].fir;
  if (D.43679_816 != 0)
    goto <bb 267>;
  else
    goto <bb 268>;

<bb 267>:
  D.43096_817 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  switch_rtp_set_flag (D.43096_817, 36);

<bb 268>:
  D.43682_818 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].pli;
  if (D.43682_818 != 0)
    goto <bb 269>;
  else
    goto <bb 270>;

<bb 269>:
  D.43096_819 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  switch_rtp_set_flag (D.43096_819, 37);

<bb 270>:
  D.43096_820 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43685_821 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].payload_map;
  switch_rtp_set_payload_map (D.43096_820, D.43685_821);
  start_video_thread (session_45(D));
  D.43073_822 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_822, 23, 1);
  D.43073_823 = session_45(D)->channel;
  ssrc_824 = switch_channel_get_variable_dup (D.43073_823, "rtp_use_video_ssrc", 1, -1);
  # DEBUG ssrc => ssrc_824
  if (ssrc_824 != 0B)
    goto <bb 271>;
  else
    goto <bb 272>;

<bb 271>:
  ssrc_ul_825 = strtoul (ssrc_824, 0B, 10);
  # DEBUG ssrc_ul => ssrc_ul_825
  D.43096_826 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  switch_rtp_set_ssrc (D.43096_826, ssrc_ul_825);
  MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ssrc = ssrc_ul_825;
  goto <bb 273>;

<bb 272>:
  D.43096_827 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43689_828 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ssrc;
  switch_rtp_set_ssrc (D.43096_827, D.43689_828);

<bb 273>:
  D.43690_829 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].remote_ssrc;
  if (D.43690_829 != 0)
    goto <bb 274>;
  else
    goto <bb 275>;

<bb 274>:
  D.43096_830 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43690_831 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].remote_ssrc;
  switch_rtp_set_remote_ssrc (D.43096_830, D.43690_831);

<bb 275>:
  D.43693_832 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.chosen[0];
  D.43694_833 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.cands[D.43693_832][0].ready;
  if (D.43694_833 != 0)
    goto <bb 276>;
  else
    goto <bb 279>;

<bb 276>:
  gen_ice (session_45(D), 1, 0B, 0);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5433, session_45(D), 6, "Activating Video ICE\n");
  D.43096_834 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43697_835 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.ufrag;
  D.43698_836 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_out.ufrag;
  D.43699_837 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_out.pwd;
  D.43700_838 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.pwd;
  D.43702_839 = switch_ice_direction (session_45(D));
  if (D.43702_839 == 1)
    goto <bb 278>;
  else
    goto <bb 277>;

<bb 277>:

<bb 278>:
  # iftmp.63_37 = PHI <2(276), 6(277)>
  D.43706_842 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in;
  switch_rtp_activate_ice (D.43096_834, D.43697_835, D.43698_836, D.43699_837, D.43700_838, 0, iftmp.63_37, D.43706_842);

<bb 279>:
  D.43073_843 = session_45(D)->channel;
  val_844 = switch_channel_get_variable_dup (D.43073_843, "rtcp_video_interval_msec", 1, -1);
  # DEBUG val => val_844
  if (val_844 != 0B)
    goto <bb 281>;
  else
    goto <bb 280>;

<bb 280>:
  D.43099_845 = smh_46->mparams;
  val_846 = D.43099_845->rtcp_video_interval_msec;
  # DEBUG val => val_846
  if (val_846 != 0B)
    goto <bb 281>;
  else
    goto <bb 296>;

<bb 281>:
  # val_3 = PHI <val_844(279), val_846(280)>
  # DEBUG val => val_3
  D.43073_847 = session_45(D)->channel;
  rport_848 = switch_channel_get_variable_dup (D.43073_847, "rtp_remote_video_rtcp_port", 1, -1);
  # DEBUG rport => rport_848
  remote_port_849 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].remote_rtcp_port;
  # DEBUG remote_port => remote_port_849
  if (rport_848 != 0B)
    goto <bb 282>;
  else
    goto <bb 283>;

<bb 282>:
  # DEBUG __nptr => rport_848
  D.48117_1349 = strtol (rport_848, 0B, 10);
  remote_port_851 = (switch_port_t) D.48117_1349;
  # DEBUG remote_port => remote_port_851

<bb 283>:
  # remote_port_25 = PHI <remote_port_849(281), remote_port_851(282)>
  # DEBUG remote_port => remote_port_25
  D.43713_852 = strcasecmp (val_3, "passthru");
  if (D.43713_852 == 0)
    goto <bb 284>;
  else
    goto <bb 285>;

<bb 284>:
  D.43716_853 = (int) remote_port_25;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5462, session_45(D), 6, "Activating VIDEO RTCP PASSTHRU PORT %d\n", D.43716_853);
  D.43096_854 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43717_855 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtcp_mux;
  D.43718_856 = D.43717_855 > 0;
  switch_rtp_activate_rtcp (D.43096_854, -1, remote_port_25, D.43718_856);
  goto <bb 288>;

<bb 285>:
  # DEBUG __nptr => val_3
  interval_1350 = strtol (val_3, 0B, 10);
  # DEBUG interval => NULL
  interval.64_858 = (unsigned int) interval_1350;
  D.43721_859 = interval.64_858 + 4294967196;
  if (D.43721_859 > 499900)
    goto <bb 286>;
  else
    goto <bb 287>;

<bb 286>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5467, session_45(D), 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_1350);

<bb 287>:
  # DEBUG interval => 10000
  D.43716_861 = (int) remote_port_25;
  D.43717_862 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtcp_mux;
  D.43724_863 = (int) D.43717_862;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5471, session_45(D), 6, "Activating VIDEO RTCP PORT %d mux %d\n", D.43716_861, D.43724_863);
  D.43096_864 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43717_865 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtcp_mux;
  D.43718_866 = D.43717_865 > 0;
  switch_rtp_activate_rtcp (D.43096_864, 10000, remote_port_25, D.43718_866);

<bb 288>:
  D.43725_867 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.chosen[1];
  D.43726_868 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.cands[D.43725_867][1].ready;
  if (D.43726_868 != 0)
    goto <bb 289>;
  else
    goto <bb 296>;

<bb 289>:
  D.43717_869 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtcp_mux;
  if (D.43717_869 > 0)
    goto <bb 290>;
  else
    goto <bb 293>;

<bb 290>:
  D.43725_870 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.chosen[1];
  D.43732_871 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.cands[D.43725_870][1].con_addr;
  D.43693_872 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.chosen[0];
  D.43733_873 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.cands[D.43693_872][0].con_addr;
  D.39417_874 = __builtin_strcmp (D.43732_871, D.43733_873);
  if (D.39417_874 == 0)
    goto <bb 291>;
  else
    goto <bb 293>;

<bb 291>:
  D.43725_875 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.chosen[1];
  D.43735_876 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.cands[D.43725_875][1].con_port;
  D.43693_877 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.chosen[0];
  D.43736_878 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.cands[D.43693_877][0].con_port;
  if (D.43735_876 == D.43736_878)
    goto <bb 292>;
  else
    goto <bb 293>;

<bb 292>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5481, session_45(D), 6, "Skipping VIDEO RTCP ICE (Same as VIDEO RTP)\n");
  goto <bb 296>;

<bb 293>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5484, session_45(D), 6, "Activating VIDEO RTCP ICE\n");
  D.43096_879 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43697_880 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.ufrag;
  D.43698_881 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_out.ufrag;
  D.43699_882 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_out.pwd;
  D.43700_883 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in.pwd;
  D.43739_884 = switch_ice_direction (session_45(D));
  if (D.43739_884 == 1)
    goto <bb 295>;
  else
    goto <bb 294>;

<bb 294>:

<bb 295>:
  # iftmp.65_38 = PHI <2(293), 6(294)>
  D.43706_887 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ice_in;
  switch_rtp_activate_ice (D.43096_879, D.43697_880, D.43698_881, D.43699_882, D.43700_883, 1, iftmp.65_38, D.43706_887);

<bb 296>:
  D.43743_888 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].local_dtls_fingerprint.str;
  # DEBUG s => D.43743_888
  if (D.43743_888 == 0B)
    goto <bb 299>;
  else
    goto <bb 297>;

<bb 297>:
  D.48124_1351 = MEM[(const char *)smh_46 + 22400B];
  if (D.48124_1351 == 0)
    goto <bb 299>;
  else
    goto <bb 298>;

<bb 298>:

<bb 299>:
  # D.48123_1352 = PHI <1(296), 1(297), 0(298)>
  if (D.48123_1352 == 0)
    goto <bb 300>;
  else
    goto <bb 310>;

<bb 300>:
  D.43747_890 = switch_rtp_has_dtls ();
  if (D.43747_890 != 0)
    goto <bb 301>;
  else
    goto <bb 310>;

<bb 301>:
  D.43429_891 = smh_46->session;
  D.43750_892 = dtls_ok (D.43429_891);
  if (D.43750_892 != 0)
    goto <bb 302>;
  else
    goto <bb 310>;

<bb 302>:
  D.43429_893 = smh_46->session;
  D.43434_894 = D.43429_893->channel;
  D.43754_895 = switch_channel_direction (D.43434_894);
  if (D.43754_895 == 0)
    goto <bb 304>;
  else
    goto <bb 303>;

<bb 303>:

<bb 304>:
  # dtype_39 = PHI <1(302), 2(303)>
  # DEBUG dtype => dtype_39
  # DEBUG xtype => 4
  D.43717_900 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtcp_mux;
  if (D.43717_900 > 0)
    goto <bb 305>;
  else
    goto <bb 307>;

<bb 305>:
  D.43099_901 = smh_46->mparams;
  D.43760_902 = D.43099_901->rtcp_video_interval_msec;
  if (D.43760_902 != 0B)
    goto <bb 306>;
  else
    goto <bb 307>;

<bb 306>:
  # DEBUG xtype => 12

<bb 307>:
  # xtype_26 = PHI <4(304), 4(305), 12(306)>
  # DEBUG xtype => xtype_26
  D.43096_904 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43763_905 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].local_dtls_fingerprint;
  D.43764_906 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].remote_dtls_fingerprint;
  D.43765_907 = xtype_26 | dtype_39;
  switch_rtp_add_dtls (D.43096_904, D.43763_905, D.43764_906, D.43765_907);
  D.43717_908 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtcp_mux;
  if (D.43717_908 <= 0)
    goto <bb 308>;
  else
    goto <bb 310>;

<bb 308>:
  D.43099_909 = smh_46->mparams;
  D.43760_910 = D.43099_909->rtcp_video_interval_msec;
  if (D.43760_910 != 0B)
    goto <bb 309>;
  else
    goto <bb 310>;

<bb 309>:
  # DEBUG xtype => 8
  D.43096_912 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43763_913 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].local_dtls_fingerprint;
  D.43764_914 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].remote_dtls_fingerprint;
  D.43765_915 = dtype_39 | 8;
  switch_rtp_add_dtls (D.43096_912, D.43763_913, D.43764_914, D.43765_915);

<bb 310>:
  D.43073_916 = session_45(D)->channel;
  val_917 = switch_channel_get_variable_dup (D.43073_916, "rtp_manual_video_rtp_bugs", 1, -1);
  # DEBUG val => val_917
  if (val_917 != 0B)
    goto <bb 311>;
  else
    goto <bb 312>;

<bb 311>:
  D.43772_918 = &MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_bugs;
  switch_core_media_parse_rtp_bugs (D.43772_918, val_917);

<bb 312>:
  D.43096_919 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43773_920 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_bugs;
  D.43099_921 = smh_46->mparams;
  D.43774_922 = D.43099_921->manual_video_rtp_bugs;
  D.43775_923 = D.43773_920 | D.43774_922;
  switch_rtp_intentional_bugs (D.43096_919, D.43775_923);
  D.43073_924 = session_45(D)->channel;
  D.43561_925 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].cur_payload_map;
  D.43594_926 = D.43561_925->agreed_pt;
  D.43595_927 = (int) D.43594_926;
  switch_channel_set_variable_printf (D.43073_924, "rtp_use_video_pt", "%d", D.43595_927);
  D.43096_928 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  D.43776_929 = switch_rtp_get_ssrc (D.43096_928);
  MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ssrc = D.43776_929;
  D.43073_930 = session_45(D)->channel;
  D.43689_931 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].ssrc;
  switch_channel_set_variable_printf (D.43073_930, "rtp_use_video_ssrc", "%u", D.43689_931);
  switch_core_session_apply_crypto (session_45(D), 1);
  D.43073_932 = session_45(D)->channel;
  D.43777_933 = switch_channel_test_flag (D.43073_932, 74);
  if (D.43777_933 != 0)
    goto <bb 313>;
  else
    goto <bb 320> (video_up);

<bb 313>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5542, session_45(D), 7, "Activating video UDPTL mode\n");
  D.43096_934 = MEM[(struct switch_rtp_engine_t *)smh_46 + 11496B].rtp_session;
  switch_rtp_udptl_mode (D.43096_934);
  goto <bb 320> (video_up);

<bb 314>:
  err.45_935 = err;
  if (err.45_935 != 0B)
    goto <bb 315>;
  else
    goto <bb 316>;

<bb 315>:
  iftmp.67_936 = err;

<bb 316>:
  # iftmp.67_40 = PHI <iftmp.67_936(315), ""(314)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5547, session_45(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", iftmp.67_40);
  D.43073_938 = session_45(D)->channel;
  switch_channel_perform_hangup (D.43073_938, "src/switch_core_media.c", &__func__, 5548, 27);
  goto <bb 322> (end);

<bb 317>:
  err.45_625 = err;
  if (err.45_625 != 0B)
    goto <bb 318>;
  else
    goto <bb 319>;

<bb 318>:
  iftmp.68_626 = err;

<bb 319>:
  # iftmp.68_41 = PHI <iftmp.68_626(318), ""(317)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5554, session_45(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", iftmp.68_41);
  D.43073_628 = session_45(D)->channel;
  switch_channel_perform_hangup (D.43073_628, "src/switch_core_media.c", &__func__, 5555, 27);
  # DEBUG status => 1
  goto <bb 322> (end);

video_up:
  D.43262_939 = session_45(D) != 0B;
  D.43790_940 = v_engine_49 != 0B;
  D.43791_941 = D.43262_939 && D.43790_940;
  if (D.43791_941 != 0)
    goto <bb 321>;
  else
    goto <bb 322> (end);

<bb 321>:
  check_dtls_reinvite (session_45(D), v_engine_49);

  # status_5 = PHI <0(11), 0(15), status_73(16), status_4(316), 1(319), 0(321), 0(320), 0(14)>
end:
  # DEBUG status => status_5
  D.43073_943 = session_45(D)->channel;
  switch_channel_clear_flag (D.43073_943, 103);
  switch_core_recovery_track (session_45(D));

<bb 323>:
  # status_27 = PHI <1(4), 1(6), status_5(322), 1(5)>
  return status_27;

}



;; Function switch_core_media_check_dtmf_type (switch_core_media_check_dtmf_type)

switch_core_media_check_dtmf_type (struct switch_core_session_t * session)
{
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_check_dtmf_type";
  struct switch_media_handle_t * smh;
  const char * val;
  int D.43062;
  int D.43058;
  struct switch_core_media_params_t * D.43056;
  int D.43053;
  struct switch_channel_t * D.43050;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 5897, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 12>;
  else
    goto <bb 5>;

<bb 5>:
  D.43050_3 = session_1(D)->channel;
  val_4 = switch_channel_get_variable_dup (D.43050_3, "dtmf_type", 1, -1);
  # DEBUG val => val_4
  if (val_4 != 0B)
    goto <bb 6>;
  else
    goto <bb 12>;

<bb 6>:
  D.43053_5 = strcasecmp (val_4, "rfc2833");
  if (D.43053_5 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.43056_6 = smh_2->mparams;
  D.43056_6->dtmf_type = 0;
  goto <bb 12>;

<bb 8>:
  D.43058_7 = strcasecmp (val_4, "info");
  if (D.43058_7 == 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.43056_8 = smh_2->mparams;
  D.43056_8->dtmf_type = 1;
  goto <bb 12>;

<bb 10>:
  D.43062_9 = strcasecmp (val_4, "none");
  if (D.43062_9 == 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.43056_10 = smh_2->mparams;
  D.43056_10->dtmf_type = 2;

<bb 12>:
  return;

}



;; Function switch_core_media_sdp_map (switch_core_media_sdp_map)

switch_core_media_sdp_map (const char * r_sdp, struct switch_event_t * * fmtp, struct switch_event_t * * pt)
{
  char * br;
  char key[128];
  char buf[25];
  struct sdp_rtpmap_t * map;
  static const char __func__[26] = "switch_core_media_sdp_map";
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  struct sdp_media_t * m;
  struct switch_event_t * D.43044;
  struct switch_event_t * D.43041;
  int D.43037;
  <unnamed-unsigned:7> D.43036;
  const char * D.43031;
  const char * D.43028;
  sdp_proto_e D.43025;
  switch_status_t D.43022;
  int D.43019;
  size_t D.43018;

<bb 2>:
  # DEBUG parser => 0B
  D.43018_7 = strlen (r_sdp_6(D));
  D.43019_8 = (int) D.43018_7;
  parser_9 = sdp_parse (0B, r_sdp_6(D), D.43019_8, 0);
  # DEBUG parser => parser_9
  if (parser_9 == 0B)
    goto <bb 22>;
  else
    goto <bb 3>;

<bb 3>:
  sdp_11 = sdp_session (parser_9);
  # DEBUG sdp => sdp_11
  if (sdp_11 == 0B)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  sdp_parser_free (parser_9);
  goto <bb 22>;

<bb 5>:
  switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 5930, fmtp_13(D), 62, 0B);
  switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 5931, pt_14(D), 62, 0B);
  m_15 = sdp_11->sdp_media;
  # DEBUG m => m_15
  goto <bb 20>;

<bb 6>:
  D.43025_16 = m_1->m_proto;
  if (D.43025_16 == 256)
    goto <bb 7>;
  else
    goto <bb 19>;

<bb 7>:
  map_17 = m_1->m_rtpmaps;
  # DEBUG map => map_17
  goto <bb 18>;

<bb 8>:
  D.43028_18 = map_2->rm_encoding;
  if (D.43028_18 != 0B)
    goto <bb 9>;
  else
    goto <bb 17>;

<bb 9>:
  buf = "";
  key = "";
  # DEBUG br => 0B
  D.43031_20 = map_2->rm_fmtp;
  if (D.43031_20 != 0B)
    goto <bb 10>;
  else
    goto <bb 12>;

<bb 10>:
  D.43031_21 = map_2->rm_fmtp;
  br_22 = strstr (D.43031_21, "bitrate=");
  # DEBUG br => br_22
  if (br_22 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  br_23 = br_22 + 8;
  # DEBUG br => br_23

<bb 12>:
  # br_3 = PHI <0B(9), br_22(10), br_23(11)>
  # DEBUG br => br_3
  D.43036_24 = map_2->rm_pt;
  D.43037_25 = (int) D.43036_24;
  switch_snprintf (&buf, 25, "%d", D.43037_25);
  if (br_3 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.43028_26 = map_2->rm_encoding;
  switch_snprintf (&key, 128, "%s:%s", D.43028_26, br_3);
  goto <bb 15>;

<bb 14>:
  D.43028_27 = map_2->rm_encoding;
  switch_snprintf (&key, 128, "%s", D.43028_27);

<bb 15>:
  D.43041_28 = *pt_14(D);
  switch_event_add_header_string (D.43041_28, 1, &key, &buf);
  D.43031_29 = map_2->rm_fmtp;
  if (D.43031_29 != 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.43044_30 = *fmtp_13(D);
  D.43031_31 = map_2->rm_fmtp;
  switch_event_add_header_string (D.43044_30, 1, &key, D.43031_31);

<bb 17>:
  map_32 = map_2->rm_next;
  # DEBUG map => map_32

<bb 18>:
  # map_2 = PHI <map_17(7), map_32(17)>
  # DEBUG map => map_2
  if (map_2 != 0B)
    goto <bb 8>;
  else
    goto <bb 19>;

<bb 19>:
  m_33 = m_1->m_next;
  # DEBUG m => m_33

<bb 20>:
  # m_1 = PHI <m_15(5), m_33(19)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 6>;
  else
    goto <bb 21>;

<bb 21>:
  sdp_parser_free (parser_9);

<bb 22>:
  # D.43022_4 = PHI <1(2), 1(4), 0(21)>
  return D.43022_4;

}



;; Function switch_core_media_set_local_sdp (switch_core_media_set_local_sdp)

switch_core_media_set_local_sdp (struct switch_core_session_t * session, const char * sdp_str, switch_bool_t dup)
{
  static const char __func__[32] = "switch_core_media_set_local_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_set_local_sdp";
  struct switch_media_handle_t * smh;
  char * D.43014;
  struct switch_channel_t * D.43013;
  struct switch_core_media_params_t * D.43008;
  struct switch_mutex_t * D.43005;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 5978, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 11>;
  else
    goto <bb 5>;

<bb 5>:
  D.43005_4 = smh_3->sdp_mutex;
  if (D.43005_4 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.43005_5 = smh_3->sdp_mutex;
  switch_mutex_lock (D.43005_5);

<bb 7>:
  D.43008_6 = smh_3->mparams;
  if (dup_7(D) != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  sdp_str_9 = switch_core_perform_session_strdup (session_2(D), sdp_str_8(D), "src/switch_core_media.c", &__func__, 5985);

<bb 9>:
  # sdp_str_1 = PHI <sdp_str_9(8), sdp_str_8(D)(7)>
  D.43008_6->local_sdp_str = sdp_str_1;
  D.43013_11 = session_2(D)->channel;
  D.43008_12 = smh_3->mparams;
  D.43014_13 = D.43008_12->local_sdp_str;
  switch_channel_set_variable_var_check (D.43013_11, "rtp_local_sdp_str", D.43014_13, 1);
  D.43005_14 = smh_3->sdp_mutex;
  if (D.43005_14 != 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.43005_15 = smh_3->sdp_mutex;
  switch_mutex_unlock (D.43005_15);

<bb 11>:
  return;

}



;; Function switch_core_media_gen_local_sdp (switch_core_media_gen_local_sdp)

switch_core_media_gen_local_sdp (struct switch_core_session_t * session, switch_sdp_type_t sdp_type, const char * ip, switch_port_t port, const char * sr, int force)
{
  int D.50487;
  switch_bool_t D.50486;
  int D.50485;
  int D.50484;
  int D.50483;
  int D.50482;
  int D.50481;
  int D.50480;
  int D.50479;
  int D.50477;
  int D.50475;
  switch_bool_t D.50474;
  int D.50473;
  int D.50472;
  int D.50471;
  int D.50470;
  int D.50469;
  int D.50468;
  int D.50467;
  int D.50465;
  int D.50463;
  switch_bool_t D.50462;
  int D.50461;
  int D.50460;
  int D.50459;
  int D.50458;
  int D.50457;
  int D.50456;
  int D.50455;
  int D.50453;
  int D.50451;
  switch_bool_t D.50450;
  int D.50449;
  int D.50448;
  int D.50447;
  int D.50446;
  int D.50445;
  int D.50444;
  int D.50443;
  int D.50441;
  int D.50439;
  switch_bool_t D.50438;
  int D.50437;
  int D.50436;
  int D.50435;
  int D.50434;
  int D.50433;
  int D.50432;
  int D.50431;
  int D.50429;
  int D.50427;
  switch_bool_t D.50426;
  int D.50425;
  int D.50424;
  int D.50423;
  int D.50422;
  int D.50421;
  int D.50420;
  int D.50419;
  int D.50417;
  int D.50415;
  switch_bool_t D.50414;
  int D.50413;
  int D.50412;
  int D.50411;
  int D.50410;
  int D.50409;
  int D.50408;
  int D.50407;
  int D.50405;
  int D.50403;
  switch_bool_t D.50402;
  int D.50401;
  int D.50400;
  int D.50399;
  int D.50398;
  int D.50397;
  int D.50396;
  int D.50395;
  int D.50393;
  int D.50391;
  switch_bool_t D.50390;
  int D.50389;
  int D.50388;
  int D.50387;
  int D.50386;
  int D.50385;
  int D.50384;
  int D.50383;
  int D.50381;
  int D.50379;
  switch_bool_t D.50378;
  int D.50377;
  int D.50376;
  int D.50375;
  int D.50374;
  int D.50373;
  int D.50372;
  int D.50371;
  int D.50369;
  const char D.48211;
  int D.48210;
  const char D.48207;
  int D.48206;
  const char D.48203;
  int D.48202;
  const char D.48199;
  int D.48198;
  const char D.48195;
  int D.48194;
  const char D.48188;
  int D.48187;
  const char D.48184;
  int D.48183;
  const char D.48180;
  int D.48179;
  const char D.48176;
  int D.48175;
  const char D.48172;
  int D.48171;
  const char D.48168;
  int D.48167;
  const char D.48164;
  int D.48163;
  const char D.48160;
  int D.48159;
  const char D.48156;
  int D.48155;
  const char D.48152;
  int D.48151;
  const char D.48148;
  int D.48147;
  const char D.48144;
  int D.48143;
  const char D.48140;
  int D.48139;
  const char D.48136;
  int D.48135;
  const char D.48132;
  int D.48131;
  switch_rtp_crypto_key_type_t j;
  int i;
  int v;
  int bw;
  const char * vbw;
  char tmp2[11];
  char tmp1[11];
  int channels;
  uint32_t ianacode;
  char * fmtp;
  const struct switch_codec_implementation_t * imp;
  int already_did[128];
  int i;
  struct payload_map_t * pmap;
  const struct switch_codec_implementation_t * imp;
  int already_did[128];
  int i;
  struct payload_map_t * pmap;
  int loops;
  int both;
  char * bp;
  const struct switch_codec_implementation_t * imp;
  int both;
  char * bp;
  const char * mult;
  int cng_type;
  int this_ptime;
  int cur_ptime;
  int i;
  char tmp2[11];
  char tmp1[11];
  char * orig_fmtp;
  switch_payload_t orig_pt;
  const struct switch_codec_implementation_t * imp;
  struct switch_core_session_t * orig_session;
  int i;
  static const char __func__[32] = "switch_core_media_gen_local_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_gen_local_sdp";
  int is_outbound;
  struct payload_map_t * pmap;
  int red;
  int vp8;
  struct switch_media_handle_t * smh;
  const char * tmp;
  const char * local_sdp_video_zrtp_hash;
  const char * local_sdp_audio_zrtp_hash;
  struct switch_event_t * ptmap;
  struct switch_event_t * map;
  const char * fmtp_out_var;
  const char * fmtp_out;
  const char * username;
  const char * var_val;
  char srbuf[128];
  const char * append_video;
  const char * append_audio;
  const char * ov_fmtp;
  const char * pass_fmtp;
  const char * family;
  const char * val;
  int use_cng;
  uint32_t v_port;
  uint32_t rate;
  int ptime;
  char * buf;
  struct switch_event_t * ptmap.39;
  uint32_t D.42507;
  uint32_t D.42505;
  size_t D.42504;
  size_t D.42503;
  char * D.42502;
  size_t D.42501;
  char * D.42498;
  size_t D.42497;
  size_t D.42496;
  char * D.42495;
  size_t D.42494;
  char * D.42490;
  switch_rtp_crypto_key_type_t D.42486;
  uint32_t D.42483;
  uint32_t D.42480;
  int D.42477;
  size_t D.42476;
  size_t D.42475;
  char * D.42474;
  size_t D.42473;
  switch_port_t D.42470;
  int D.39675;
  char * D.42464;
  int D.42460;
  int D.42459;
  size_t D.42458;
  size_t D.42457;
  char * D.42456;
  size_t D.42455;
  uint32_t D.42454;
  _Bool D.42452;
  _Bool D.42451;
  int D.42448;
  size_t D.42447;
  size_t D.42446;
  char * D.42445;
  size_t D.42444;
  int D.39666;
  char * D.42433;
  size_t D.42432;
  size_t D.42431;
  char * D.42430;
  size_t D.42429;
  size_t D.42428;
  size_t D.42427;
  char * D.42426;
  size_t D.42425;
  size_t D.42424;
  size_t D.42423;
  char * D.42422;
  size_t D.42421;
  size_t D.42420;
  size_t D.42419;
  char * D.42418;
  size_t D.42417;
  size_t D.42416;
  size_t D.42415;
  char * D.42414;
  size_t D.42413;
  size_t D.42412;
  size_t D.42411;
  char * D.42410;
  size_t D.42409;
  uint32_t D.42408;
  size_t D.42407;
  size_t D.42406;
  char * D.42405;
  size_t D.42404;
  size_t D.42403;
  size_t D.42402;
  char * D.42401;
  size_t D.42400;
  size_t D.42397;
  size_t D.42396;
  char * D.42395;
  size_t D.42394;
  uint32_t D.42391;
  size_t D.42388;
  size_t D.42387;
  char * D.42386;
  size_t D.42385;
  uint8_t D.42378;
  uint8_t D.42374;
  char * iftmp.38;
  uint8_t D.42369;
  char * iftmp.37;
  size_t D.42367;
  size_t D.42366;
  char * D.42365;
  size_t D.42364;
  short unsigned int D.42361;
  short unsigned int D.42360;
  uint32_t D.42359;
  size_t D.42358;
  size_t D.42357;
  char * D.42356;
  size_t D.42355;
  size_t D.42353;
  size_t D.42352;
  char * D.42351;
  size_t D.42350;
  size_t D.42349;
  size_t D.42348;
  char * D.42347;
  size_t D.42346;
  int8_t D.42343;
  char[192] * D.42340;
  size_t D.42339;
  size_t D.42338;
  char * D.42337;
  size_t D.42336;
  char * D.42332;
  uint32_t D.42329;
  uint32_t D.42328;
  size_t D.42324;
  size_t D.42323;
  char * D.42322;
  size_t D.42321;
  int D.42318;
  char * D.42306;
  size_t D.42299;
  size_t D.42298;
  char * D.42297;
  size_t D.42296;
  const uint32_t D.42294;
  size_t D.42293;
  size_t D.42292;
  char * D.42291;
  size_t D.42290;
  int D.42285;
  int D.42282;
  int D.42281;
  const uint8_t D.42280;
  char * const D.42279;
  int D.42274;
  uint32_t D.42269;
  switch_call_direction_t D.42266;
  const switch_codec_type_t D.42263;
  switch_payload_t D.42262;
  const char D.42255;
  unsigned int D.42253;
  size_t D.42252;
  const char D.42249;
  char * iftmp.35;
  size_t D.42246;
  size_t D.42245;
  char * D.42244;
  size_t D.42243;
  uint8_t D.42240;
  uint32_t D.42238;
  char * D.42237;
  int D.42236;
  size_t D.42235;
  size_t D.42234;
  char * D.42233;
  size_t D.42232;
  uint8_t D.42229;
  switch_payload_t D.42226;
  int32_t D.42223;
  size_t D.42222;
  size_t D.42221;
  char * D.42220;
  size_t D.42219;
  const char * D.42209;
  uint32_t D.42205;
  long unsigned int D.42204;
  int D.42203;
  size_t D.42202;
  size_t D.42201;
  char * D.42200;
  size_t D.42199;
  int D.42196;
  int D.42193;
  char * D.42192;
  size_t D.42189;
  size_t D.42188;
  char * D.42187;
  size_t D.42186;
  size_t D.42182;
  size_t D.42181;
  char * D.42180;
  size_t D.42179;
  int D.42176;
  int D.42175;
  signed char D.42172;
  switch_payload_t D.42171;
  uint32_t D.42168;
  switch_call_direction_t D.42165;
  const switch_codec_type_t D.42162;
  uint8_t D.42158;
  int D.42156;
  size_t D.42155;
  size_t D.42154;
  char * D.42153;
  size_t D.42152;
  switch_payload_t D.42149;
  switch_payload_t D.42148;
  int32_t D.42145;
  int D.42144;
  switch_payload_t D.42143;
  struct payload_map_t * D.42142;
  size_t D.42141;
  size_t D.42140;
  char * D.42139;
  size_t D.42138;
  uint8_t D.42135;
  const char * D.42134;
  uint32_t D.42133;
  switch_call_direction_t D.42131;
  uint32_t D.42129;
  int iftmp.34;
  size_t D.42122;
  size_t D.42121;
  char * D.42120;
  size_t D.42119;
  short unsigned int D.42118;
  uint32_t D.42115;
  switch_port_t D.42112;
  uint32_t D.42109;
  switch_port_t D.42106;
  uint32_t D.42103;
  switch_call_direction_t D.42100;
  uint32_t D.42097;
  size_t D.42096;
  size_t D.42095;
  uint32_t D.42092;
  uint32_t D.42090;
  size_t D.42085;
  size_t D.42084;
  size_t D.42083;
  uint32_t D.42082;
  uint32_t D.42081;
  int D.42074;
  int D.42072;
  char * const D.42071;
  const int D.42068;
  const switch_codec_type_t D.42065;
  size_t D.42064;
  size_t D.42063;
  switch_rtp_crypto_mode_t D.42058;
  size_t D.42057;
  struct switch_event_t * map.33;
  uint32_t D.42055;
  uint32_t D.42054;
  uint32_t D.42048;
  uint32_t D.42046;
  uint32_t D.42039;
  int32_t D.42030;
  size_t D.42026;
  size_t D.42025;
  char * D.42024;
  size_t D.42023;
  uint32_t D.42020;
  char * D.42016;
  uint32_t D.42013;
  int D.42010;
  size_t D.42009;
  size_t D.42008;
  char * D.42007;
  size_t D.42006;
  int D.39607;
  int D.41995;
  int D.41994;
  size_t D.41993;
  size_t D.41992;
  char * D.41991;
  size_t D.41990;
  uint32_t D.41989;
  _Bool D.41987;
  _Bool D.41986;
  _Bool D.41985;
  int D.41982;
  size_t D.41981;
  size_t D.41980;
  char * D.41979;
  size_t D.41978;
  switch_port_t D.41975;
  int D.39598;
  char * D.41966;
  int D.41965;
  switch_port_t D.41964;
  char * D.41963;
  char * D.41962;
  size_t D.41961;
  size_t D.41960;
  char * D.41959;
  size_t D.41958;
  char * D.41957;
  size_t D.41956;
  size_t D.41955;
  char * D.41954;
  size_t D.41953;
  char * D.41952;
  size_t D.41951;
  size_t D.41950;
  char * D.41949;
  size_t D.41948;
  size_t D.41947;
  size_t D.41946;
  char * D.41945;
  size_t D.41944;
  size_t D.41943;
  size_t D.41942;
  char * D.41941;
  size_t D.41940;
  size_t D.41939;
  size_t D.41938;
  char * D.41937;
  size_t D.41936;
  char * D.41935;
  uint32_t D.41934;
  size_t D.41933;
  size_t D.41932;
  char * D.41931;
  size_t D.41930;
  uint8_t D.41927;
  int D.41926;
  size_t D.41925;
  size_t D.41924;
  char * D.41923;
  size_t D.41922;
  size_t D.41920;
  size_t D.41919;
  char * D.41918;
  size_t D.41917;
  size_t D.41916;
  size_t D.41915;
  char * D.41914;
  size_t D.41913;
  int8_t D.41910;
  char[192] * D.41907;
  size_t D.41906;
  size_t D.41905;
  char * D.41904;
  size_t D.41903;
  char * D.41899;
  size_t D.41898;
  size_t D.41897;
  char * D.41896;
  size_t D.41895;
  size_t D.41891;
  size_t D.41890;
  char * D.41889;
  size_t D.41888;
  size_t D.41885;
  size_t D.41884;
  char * D.41883;
  size_t D.41882;
  const char D.41876;
  unsigned int D.41874;
  size_t D.41873;
  const char D.41870;
  char * iftmp.30;
  size_t D.41867;
  size_t D.41866;
  char * D.41865;
  size_t D.41864;
  size_t D.41859;
  size_t D.41858;
  char * D.41857;
  size_t D.41856;
  size_t D.41852;
  size_t D.41851;
  char * D.41850;
  size_t D.41849;
  int32_t D.41846;
  size_t D.41845;
  size_t D.41844;
  char * D.41843;
  size_t D.41842;
  size_t D.41840;
  size_t D.41839;
  char * D.41838;
  size_t D.41837;
  uint32_t D.41834;
  uint32_t D.41831;
  int32_t D.41829;
  const int D.41825;
  const struct switch_codec_implementation_t * D.41819;
  uint32_t D.41817;
  char * D.41816;
  size_t D.41815;
  size_t D.41814;
  char * D.41813;
  size_t D.41812;
  int32_t D.41807;
  size_t D.41806;
  size_t D.41805;
  char * D.41804;
  size_t D.41803;
  size_t D.41800;
  size_t D.41799;
  char * D.41798;
  size_t D.41797;
  int D.41795;
  switch_payload_t D.41794;
  size_t D.41793;
  size_t D.41792;
  char * D.41791;
  size_t D.41790;
  int D.41787;
  char * D.41786;
  int D.41783;
  size_t D.41782;
  size_t D.41781;
  char * D.41780;
  size_t D.41779;
  size_t D.41778;
  size_t D.41777;
  char * D.41776;
  size_t D.41775;
  int32_t D.41770;
  size_t D.41769;
  size_t D.41768;
  char * D.41767;
  size_t D.41766;
  uint32_t D.41763;
  int32_t D.41761;
  uint8_t D.41757;
  int D.41755;
  size_t D.41754;
  size_t D.41753;
  char * D.41752;
  size_t D.41751;
  switch_payload_t D.41748;
  struct switch_mutex_t * D.41747;
  int32_t D.41744;
  int D.41743;
  switch_payload_t D.41742;
  size_t D.41741;
  size_t D.41740;
  char * D.41739;
  size_t D.41738;
  const char * D.41737;
  switch_rtp_crypto_key_type_t D.41736;
  uint32_t D.41734;
  uint8_t D.41732;
  int iftmp.29;
  int D.41727;
  size_t D.41726;
  size_t D.41725;
  char * D.41724;
  size_t D.41723;
  uint8_t D.41720;
  char * D.41719;
  size_t D.41718;
  size_t D.41717;
  char * D.41716;
  size_t D.41715;
  uint32_t D.41712;
  char * D.41708;
  unsigned int D.41700;
  switch_core_media_NDLB_t D.41699;
  uint32_t D.41696;
  const char * D.41692;
  uint32_t D.41689;
  unsigned int D.41688;
  unsigned int D.41687;
  unsigned int D.41686;
  time_t D.41685;
  uint32_t D.41682;
  char * D.41673;
  char * D.41664;
  uint32_t D.41655;
  uint32_t D.41653;
  _Bool D.41647;
  _Bool D.41646;
  _Bool D.41645;
  uint32_t D.41634;
  int D.41633;
  const int D.41632;
  const uint32_t D.41631;
  uint32_t D.41630;
  unsigned char D.41629;
  char * D.41628;
  char * orig_fmtp.27;
  switch_payload_t orig_pt.26;
  switch_status_t D.41622;
  char * const D.41621;
  switch_media_type_t D.41620;
  const switch_codec_type_t D.41619;
  struct switch_core_session_t * orig_session.25;
  int D.41612;
  _Bool D.41609;
  _Bool D.41608;
  _Bool D.41607;
  switch_payload_t D.41606;
  int32_t D.41603;
  int D.41602;
  int D.41599;
  switch_payload_t D.41596;
  switch_core_media_dtmf_t D.41593;
  switch_payload_t D.41590;
  int D.41587;
  const switch_payload_t D.41586;
  const struct switch_codec_implementation_t * D.41585;
  uint32_t D.41581;
  int D.41578;
  int32_t D.41572;
  struct payload_map_t * D.41566;
  const char * D.41564;
  uint32_t D.41562;
  int D.41557;
  int D.41554;
  const char * D.41550;
  uint32_t D.41547;
  uint32_t D.41546;
  uint32_t D.41544;
  struct switch_channel_t * D.41535;
  struct switch_core_session_t * D.41534;
  int D.41531;
  const char * D.41530;
  char * D.41527;
  const char * D.41526;
  char * D.41523;
  struct switch_core_media_params_t * D.41522;
  const char * D.41518;
  switch_call_direction_t D.41513;
  struct switch_channel_t * D.41512;

<bb 2>:
  # DEBUG ptime => 0
  # DEBUG rate => 0
  # DEBUG use_cng => 1
  D.41512_73 = session_72(D)->channel;
  pass_fmtp_74 = switch_channel_get_variable_dup (D.41512_73, "rtp_video_fmtp", 1, -1);
  # DEBUG pass_fmtp => pass_fmtp_74
  D.41512_75 = session_72(D)->channel;
  ov_fmtp_76 = switch_channel_get_variable_dup (D.41512_75, "rtp_force_video_fmtp", 1, -1);
  # DEBUG ov_fmtp => ov_fmtp_76
  D.41512_77 = session_72(D)->channel;
  append_audio_78 = switch_channel_get_variable_dup (D.41512_77, "rtp_append_audio_sdp", 1, -1);
  # DEBUG append_audio => append_audio_78
  D.41512_79 = session_72(D)->channel;
  append_video_80 = switch_channel_get_variable_dup (D.41512_79, "rtp_append_video_sdp", 1, -1);
  # DEBUG append_video => append_video_80
  srbuf = "";
  D.41512_81 = session_72(D)->channel;
  fmtp_out_var_82 = switch_channel_get_variable_dup (D.41512_81, "rtp_force_audio_fmtp", 1, -1);
  # DEBUG fmtp_out_var => fmtp_out_var_82
  map = 0B;
  ptmap = 0B;
  local_sdp_audio_zrtp_hash_83 = switch_core_media_get_zrtp_hash (session_72(D), 0, 1);
  # DEBUG local_sdp_audio_zrtp_hash => local_sdp_audio_zrtp_hash_83
  local_sdp_video_zrtp_hash_84 = switch_core_media_get_zrtp_hash (session_72(D), 1, 1);
  # DEBUG local_sdp_video_zrtp_hash => local_sdp_video_zrtp_hash_84
  # DEBUG vp8 => 0
  # DEBUG red => 0
  D.41512_87 = session_72(D)->channel;
  D.41513_88 = switch_channel_direction (D.41512_87);
  is_outbound_89 = D.41513_88 == 1;
  # DEBUG is_outbound => is_outbound_89
  if (session_72(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 6025, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_90 = session_72(D)->media_handle;
  # DEBUG smh => smh_90
  if (smh_90 == 0B)
    goto <bb 552>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#28 => &smh_90->engines
  # DEBUG a_engine => D#28
  # DEBUG D#27 => &smh_90->engines[1]
  # DEBUG v_engine => D#27
  D.41512_93 = session_72(D)->channel;
  D.41518_94 = switch_channel_get_variable_dup (D.41512_93, "rtcp_mux", 1, -1);
  # DEBUG expr => D.41518_94
  if (D.41518_94 != 0B)
    goto <bb 6>;
  else
    goto <bb 15>;

<bb 6>:
  D.50371_1580 = strcasecmp (D.41518_94, "yes");
  if (D.50371_1580 == 0)
    goto <bb 16>;
  else
    goto <bb 7>;

<bb 7>:
  D.50372_1581 = strcasecmp (D.41518_94, "on");
  if (D.50372_1581 == 0)
    goto <bb 16>;
  else
    goto <bb 8>;

<bb 8>:
  D.50373_1582 = strcasecmp (D.41518_94, "true");
  if (D.50373_1582 == 0)
    goto <bb 16>;
  else
    goto <bb 9>;

<bb 9>:
  D.50374_1583 = strcasecmp (D.41518_94, "t");
  if (D.50374_1583 == 0)
    goto <bb 16>;
  else
    goto <bb 10>;

<bb 10>:
  D.50375_1584 = strcasecmp (D.41518_94, "enabled");
  if (D.50375_1584 == 0)
    goto <bb 16>;
  else
    goto <bb 11>;

<bb 11>:
  D.50376_1585 = strcasecmp (D.41518_94, "active");
  if (D.50376_1585 == 0)
    goto <bb 16>;
  else
    goto <bb 12>;

<bb 12>:
  D.50377_1586 = strcasecmp (D.41518_94, "allow");
  if (D.50377_1586 == 0)
    goto <bb 16>;
  else
    goto <bb 13>;

<bb 13>:
  D.50378_1587 = switch_is_number (D.41518_94);
  if (D.50378_1587 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  # DEBUG __nptr => D.41518_94
  D.50379_1588 = strtol (D.41518_94, 0B, 10);
  if (D.50379_1588 != 0)
    goto <bb 16>;
  else
    goto <bb 15>;

<bb 15>:

<bb 16>:
  # D.50369_1589 = PHI <1(6), 1(7), 1(8), 1(9), 1(10), 1(11), 1(12), 1(14), 0(15)>
  D.50369_1702 = D.50369_1589;
  D.50369_95 = D.50369_1702;
  if (D.50369_95 != 0)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].rtcp_mux = 1;
  MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].rtcp_mux = 1;

<bb 18>:
  D.41522_96 = smh_90->mparams;
  D.41523_97 = D.41522_96->rtcp_audio_interval_msec;
  if (D.41523_97 == 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.41522_98 = smh_90->mparams;
  D.41512_99 = session_72(D)->channel;
  D.41526_100 = switch_channel_get_variable_dup (D.41512_99, "rtcp_audio_interval_msec", 1, -1);
  D.41522_98->rtcp_audio_interval_msec = D.41526_100;

<bb 20>:
  D.41522_101 = smh_90->mparams;
  D.41527_102 = D.41522_101->rtcp_video_interval_msec;
  if (D.41527_102 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.41522_103 = smh_90->mparams;
  D.41512_104 = session_72(D)->channel;
  D.41530_105 = switch_channel_get_variable_dup (D.41512_104, "rtcp_video_interval_msec", 1, -1);
  D.41522_103->rtcp_video_interval_msec = D.41530_105;

<bb 22>:
  D.41531_106 = dtls_ok (session_72(D));
  if (D.41531_106 != 0)
    goto <bb 23>;
  else
    goto <bb 37>;

<bb 23>:
  D.41534_107 = smh_90->session;
  D.41535_108 = D.41534_107->channel;
  tmp_109 = switch_channel_get_variable_dup (D.41535_108, "webrtc_enable_dtls", 1, -1);
  # DEBUG tmp => tmp_109
  if (tmp_109 != 0B)
    goto <bb 24>;
  else
    goto <bb 37>;

<bb 24>:
  # DEBUG expr => tmp_109
  if (tmp_109 != 0B)
    goto <bb 25>;
  else
    goto <bb 34>;

<bb 25>:
  D.50383_1590 = strcasecmp (tmp_109, "no");
  if (D.50383_1590 == 0)
    goto <bb 35>;
  else
    goto <bb 26>;

<bb 26>:
  D.50384_1591 = strcasecmp (tmp_109, "off");
  if (D.50384_1591 == 0)
    goto <bb 35>;
  else
    goto <bb 27>;

<bb 27>:
  D.50385_1592 = strcasecmp (tmp_109, "false");
  if (D.50385_1592 == 0)
    goto <bb 35>;
  else
    goto <bb 28>;

<bb 28>:
  D.50386_1593 = strcasecmp (tmp_109, "f");
  if (D.50386_1593 == 0)
    goto <bb 35>;
  else
    goto <bb 29>;

<bb 29>:
  D.50387_1594 = strcasecmp (tmp_109, "disabled");
  if (D.50387_1594 == 0)
    goto <bb 35>;
  else
    goto <bb 30>;

<bb 30>:
  D.50388_1595 = strcasecmp (tmp_109, "inactive");
  if (D.50388_1595 == 0)
    goto <bb 35>;
  else
    goto <bb 31>;

<bb 31>:
  D.50389_1596 = strcasecmp (tmp_109, "disallow");
  if (D.50389_1596 == 0)
    goto <bb 35>;
  else
    goto <bb 32>;

<bb 32>:
  D.50390_1597 = switch_is_number (tmp_109);
  if (D.50390_1597 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  # DEBUG __nptr => tmp_109
  D.50391_1598 = strtol (tmp_109, 0B, 10);
  if (D.50391_1598 == 0)
    goto <bb 35>;
  else
    goto <bb 34>;

<bb 34>:

<bb 35>:
  # D.50381_1599 = PHI <1(25), 1(26), 1(27), 1(28), 1(29), 1(30), 1(31), 1(33), 0(34)>
  D.50381_1705 = D.50381_1599;
  D.50381_110 = D.50381_1705;
  if (D.50381_110 != 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  D.41534_111 = smh_90->session;
  D.41535_112 = D.41534_111->channel;
  switch_channel_clear_flag (D.41535_112, 111);
  D.41534_113 = smh_90->session;
  D.41535_114 = D.41534_113->channel;
  switch_channel_clear_flag (D.41535_114, 109);

<bb 37>:
  if (is_outbound_89 != 0)
    goto <bb 40>;
  else
    goto <bb 38>;

<bb 38>:
  D.41512_115 = session_72(D)->channel;
  D.41544_116 = switch_channel_test_flag (D.41512_115, 84);
  if (D.41544_116 != 0)
    goto <bb 40>;
  else
    goto <bb 39>;

<bb 39>:
  D.41512_117 = session_72(D)->channel;
  D.41546_118 = switch_channel_test_flag (D.41512_117, 112);
  if (D.41546_118 != 0)
    goto <bb 40>;
  else
    goto <bb 71>;

<bb 40>:
  D.41512_119 = session_72(D)->channel;
  D.41547_120 = switch_channel_test_flag (D.41512_119, 106);
  if (D.41547_120 == 0)
    goto <bb 41>;
  else
    goto <bb 54>;

<bb 41>:
  D.41512_121 = session_72(D)->channel;
  D.41550_122 = switch_channel_get_variable_dup (D.41512_121, "media_webrtc", 1, -1);
  # DEBUG expr => D.41550_122
  if (D.41550_122 != 0B)
    goto <bb 42>;
  else
    goto <bb 51>;

<bb 42>:
  D.50395_1600 = strcasecmp (D.41550_122, "yes");
  if (D.50395_1600 == 0)
    goto <bb 52>;
  else
    goto <bb 43>;

<bb 43>:
  D.50396_1601 = strcasecmp (D.41550_122, "on");
  if (D.50396_1601 == 0)
    goto <bb 52>;
  else
    goto <bb 44>;

<bb 44>:
  D.50397_1602 = strcasecmp (D.41550_122, "true");
  if (D.50397_1602 == 0)
    goto <bb 52>;
  else
    goto <bb 45>;

<bb 45>:
  D.50398_1603 = strcasecmp (D.41550_122, "t");
  if (D.50398_1603 == 0)
    goto <bb 52>;
  else
    goto <bb 46>;

<bb 46>:
  D.50399_1604 = strcasecmp (D.41550_122, "enabled");
  if (D.50399_1604 == 0)
    goto <bb 52>;
  else
    goto <bb 47>;

<bb 47>:
  D.50400_1605 = strcasecmp (D.41550_122, "active");
  if (D.50400_1605 == 0)
    goto <bb 52>;
  else
    goto <bb 48>;

<bb 48>:
  D.50401_1606 = strcasecmp (D.41550_122, "allow");
  if (D.50401_1606 == 0)
    goto <bb 52>;
  else
    goto <bb 49>;

<bb 49>:
  D.50402_1607 = switch_is_number (D.41550_122);
  if (D.50402_1607 != 0)
    goto <bb 50>;
  else
    goto <bb 51>;

<bb 50>:
  # DEBUG __nptr => D.41550_122
  D.50403_1608 = strtol (D.41550_122, 0B, 10);
  if (D.50403_1608 != 0)
    goto <bb 52>;
  else
    goto <bb 51>;

<bb 51>:

<bb 52>:
  # D.50393_1609 = PHI <1(42), 1(43), 1(44), 1(45), 1(46), 1(47), 1(48), 1(50), 0(51)>
  D.50393_1708 = D.50393_1609;
  D.50393_123 = D.50393_1708;
  if (D.50393_123 != 0)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  D.41512_124 = session_72(D)->channel;
  switch_channel_set_flag_value (D.41512_124, 106, 1);
  D.41512_125 = session_72(D)->channel;
  switch_channel_set_flag_value (D.41512_125, 108, 1);
  D.41522_126 = smh_90->mparams;
  D.41522_126->rtcp_audio_interval_msec = "5000";
  D.41522_127 = smh_90->mparams;
  D.41522_127->rtcp_video_interval_msec = "5000";

<bb 54>:
  D.41554_128 = switch_rtp_has_dtls ();
  if (D.41554_128 != 0)
    goto <bb 55>;
  else
    goto <bb 70>;

<bb 55>:
  D.41557_129 = dtls_ok (session_72(D));
  if (D.41557_129 != 0)
    goto <bb 56>;
  else
    goto <bb 70>;

<bb 56>:
  D.41512_130 = session_72(D)->channel;
  D.41562_131 = switch_channel_test_flag (D.41512_130, 106);
  if (D.41562_131 != 0)
    goto <bb 69>;
  else
    goto <bb 57>;

<bb 57>:
  D.41534_132 = smh_90->session;
  D.41535_133 = D.41534_132->channel;
  D.41564_134 = switch_channel_get_variable_dup (D.41535_133, "rtp_use_dtls", 1, -1);
  # DEBUG expr => D.41564_134
  if (D.41564_134 != 0B)
    goto <bb 58>;
  else
    goto <bb 67>;

<bb 58>:
  D.50407_1610 = strcasecmp (D.41564_134, "yes");
  if (D.50407_1610 == 0)
    goto <bb 68>;
  else
    goto <bb 59>;

<bb 59>:
  D.50408_1611 = strcasecmp (D.41564_134, "on");
  if (D.50408_1611 == 0)
    goto <bb 68>;
  else
    goto <bb 60>;

<bb 60>:
  D.50409_1612 = strcasecmp (D.41564_134, "true");
  if (D.50409_1612 == 0)
    goto <bb 68>;
  else
    goto <bb 61>;

<bb 61>:
  D.50410_1613 = strcasecmp (D.41564_134, "t");
  if (D.50410_1613 == 0)
    goto <bb 68>;
  else
    goto <bb 62>;

<bb 62>:
  D.50411_1614 = strcasecmp (D.41564_134, "enabled");
  if (D.50411_1614 == 0)
    goto <bb 68>;
  else
    goto <bb 63>;

<bb 63>:
  D.50412_1615 = strcasecmp (D.41564_134, "active");
  if (D.50412_1615 == 0)
    goto <bb 68>;
  else
    goto <bb 64>;

<bb 64>:
  D.50413_1616 = strcasecmp (D.41564_134, "allow");
  if (D.50413_1616 == 0)
    goto <bb 68>;
  else
    goto <bb 65>;

<bb 65>:
  D.50414_1617 = switch_is_number (D.41564_134);
  if (D.50414_1617 != 0)
    goto <bb 66>;
  else
    goto <bb 67>;

<bb 66>:
  # DEBUG __nptr => D.41564_134
  D.50415_1618 = strtol (D.41564_134, 0B, 10);
  if (D.50415_1618 != 0)
    goto <bb 68>;
  else
    goto <bb 67>;

<bb 67>:

<bb 68>:
  # D.50405_1619 = PHI <1(58), 1(59), 1(60), 1(61), 1(62), 1(63), 1(64), 1(66), 0(67)>
  D.50405_1711 = D.50405_1619;
  D.50405_135 = D.50405_1711;
  if (D.50405_135 != 0)
    goto <bb 69>;
  else
    goto <bb 70>;

<bb 69>:
  D.41534_136 = smh_90->session;
  D.41535_137 = D.41534_136->channel;
  switch_channel_set_flag_value (D.41535_137, 109, 1);
  D.41534_138 = smh_90->session;
  D.41535_139 = D.41534_138->channel;
  switch_channel_set_flag_value (D.41535_139, 92, 1);
  generate_local_fingerprint (smh_90, 0);

<bb 70>:
  switch_core_session_parse_crypto_prefs (session_72(D));
  switch_core_session_check_outgoing_crypto (session_72(D));

<bb 71>:
  D.41566_140 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  fmtp_out_141 = D.41566_140->fmtp_out;
  # DEBUG fmtp_out => fmtp_out_141
  D.41522_142 = smh_90->mparams;
  username_143 = D.41522_142->sdp_username;
  # DEBUG username => username_143
  buf_144 = calloc (1, 65536);
  # DEBUG buf => buf_144
  if (buf_144 == 0B)
    goto <bb 72>;
  else
    goto <bb 73>;

<bb 72>:
  __assert_fail ("(buf = calloc(1, (65536)))", "src/switch_core_media.c", 6078, &__PRETTY_FUNCTION__);

<bb 73>:
  switch_core_media_check_dtmf_type (session_72(D));
  D.41572_145 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.41572_145 != 0)
    goto <bb 100>;
  else
    goto <bb 74>;

<bb 74>:
  D.41512_146 = session_72(D)->channel;
  val_147 = switch_channel_get_variable_dup (D.41512_146, "supress_cng", 1, -1);
  # DEBUG val => val_147
  if (val_147 != 0B)
    goto <bb 75>;
  else
    goto <bb 87>;

<bb 75>:
  # DEBUG expr => val_147
  if (val_147 != 0B)
    goto <bb 76>;
  else
    goto <bb 85>;

<bb 76>:
  D.50419_1620 = strcasecmp (val_147, "yes");
  if (D.50419_1620 == 0)
    goto <bb 86>;
  else
    goto <bb 77>;

<bb 77>:
  D.50420_1621 = strcasecmp (val_147, "on");
  if (D.50420_1621 == 0)
    goto <bb 86>;
  else
    goto <bb 78>;

<bb 78>:
  D.50421_1622 = strcasecmp (val_147, "true");
  if (D.50421_1622 == 0)
    goto <bb 86>;
  else
    goto <bb 79>;

<bb 79>:
  D.50422_1623 = strcasecmp (val_147, "t");
  if (D.50422_1623 == 0)
    goto <bb 86>;
  else
    goto <bb 80>;

<bb 80>:
  D.50423_1624 = strcasecmp (val_147, "enabled");
  if (D.50423_1624 == 0)
    goto <bb 86>;
  else
    goto <bb 81>;

<bb 81>:
  D.50424_1625 = strcasecmp (val_147, "active");
  if (D.50424_1625 == 0)
    goto <bb 86>;
  else
    goto <bb 82>;

<bb 82>:
  D.50425_1626 = strcasecmp (val_147, "allow");
  if (D.50425_1626 == 0)
    goto <bb 86>;
  else
    goto <bb 83>;

<bb 83>:
  D.50426_1627 = switch_is_number (val_147);
  if (D.50426_1627 != 0)
    goto <bb 84>;
  else
    goto <bb 85>;

<bb 84>:
  # DEBUG __nptr => val_147
  D.50427_1628 = strtol (val_147, 0B, 10);
  if (D.50427_1628 != 0)
    goto <bb 86>;
  else
    goto <bb 85>;

<bb 85>:

<bb 86>:
  # D.50417_1629 = PHI <1(76), 1(77), 1(78), 1(79), 1(80), 1(81), 1(82), 1(84), 0(85)>
  D.50417_1714 = D.50417_1629;
  D.50417_148 = D.50417_1714;
  if (D.50417_148 != 0)
    goto <bb 100>;
  else
    goto <bb 87>;

<bb 87>:
  D.41512_149 = session_72(D)->channel;
  val_150 = switch_channel_get_variable_dup (D.41512_149, "suppress_cng", 1, -1);
  # DEBUG val => val_150
  if (val_150 != 0B)
    goto <bb 88>;
  else
    goto <bb 101>;

<bb 88>:
  # DEBUG expr => val_150
  if (val_150 != 0B)
    goto <bb 89>;
  else
    goto <bb 98>;

<bb 89>:
  D.50431_1630 = strcasecmp (val_150, "yes");
  if (D.50431_1630 == 0)
    goto <bb 99>;
  else
    goto <bb 90>;

<bb 90>:
  D.50432_1631 = strcasecmp (val_150, "on");
  if (D.50432_1631 == 0)
    goto <bb 99>;
  else
    goto <bb 91>;

<bb 91>:
  D.50433_1632 = strcasecmp (val_150, "true");
  if (D.50433_1632 == 0)
    goto <bb 99>;
  else
    goto <bb 92>;

<bb 92>:
  D.50434_1633 = strcasecmp (val_150, "t");
  if (D.50434_1633 == 0)
    goto <bb 99>;
  else
    goto <bb 93>;

<bb 93>:
  D.50435_1634 = strcasecmp (val_150, "enabled");
  if (D.50435_1634 == 0)
    goto <bb 99>;
  else
    goto <bb 94>;

<bb 94>:
  D.50436_1635 = strcasecmp (val_150, "active");
  if (D.50436_1635 == 0)
    goto <bb 99>;
  else
    goto <bb 95>;

<bb 95>:
  D.50437_1636 = strcasecmp (val_150, "allow");
  if (D.50437_1636 == 0)
    goto <bb 99>;
  else
    goto <bb 96>;

<bb 96>:
  D.50438_1637 = switch_is_number (val_150);
  if (D.50438_1637 != 0)
    goto <bb 97>;
  else
    goto <bb 98>;

<bb 97>:
  # DEBUG __nptr => val_150
  D.50439_1638 = strtol (val_150, 0B, 10);
  if (D.50439_1638 != 0)
    goto <bb 99>;
  else
    goto <bb 98>;

<bb 98>:

<bb 99>:
  # D.50429_1639 = PHI <1(89), 1(90), 1(91), 1(92), 1(93), 1(94), 1(95), 1(97), 0(98)>
  D.50429_1717 = D.50429_1639;
  D.50429_151 = D.50429_1717;
  if (D.50429_151 != 0)
    goto <bb 100>;
  else
    goto <bb 101>;

<bb 100>:
  # DEBUG use_cng => 0
  D.41522_153 = smh_90->mparams;
  D.41522_153->cng_pt = 0;

<bb 101>:
  # use_cng_17 = PHI <1(87), 1(99), 0(100)>
  # DEBUG use_cng => use_cng_17
  D.41578_154 = smh_90->payload_space;
  if (D.41578_154 == 0)
    goto <bb 102>;
  else
    goto <bb 128>;

<bb 102>:
  D.41512_155 = session_72(D)->channel;
  D.41581_156 = switch_channel_test_flag (D.41512_155, 106);
  if (D.41581_156 != 0)
    goto <bb 103>;
  else
    goto <bb 105>;

<bb 103>:
  smh_90->payload_space = 102;

<bb 104>:
  i_1577 = 0;
  goto <bb 107>;

<bb 105>:
  smh_90->payload_space = 98;
  goto <bb 104>;

<bb 106>:
  D.41585_160 = smh_90->codecs[i_36];
  D.41586_161 = D.41585_160->ianacode;
  smh_90->ianacodes[i_36] = D.41586_161;
  i_162 = i_36 + 1;
  # DEBUG i => i_162

<bb 107>:
  # i_36 = PHI <0(104), i_162(106)>
  # DEBUG i => i_36
  D.41522_158 = smh_90->mparams;
  D.41587_159 = D.41522_158->num_codecs;
  if (D.41587_159 > i_36)
    goto <bb 106>;
  else
    goto <bb 108>;

<bb 108>:
  if (sdp_type_163(D) == 0)
    goto <bb 109>;
  else
    goto <bb 128>;

<bb 109>:
  orig_session = 0B;
  switch_core_session_perform_get_partner (session_72(D), &orig_session, "src/switch_core_media.c", &__func__, 6108);
  # DEBUG i => 0
  goto <bb 125>;

<bb 110>:
  imp_167 = smh_90->codecs[i_37];
  # DEBUG imp => imp_167
  orig_pt = 0;
  orig_fmtp = 0B;
  D.41590_168 = smh_90->ianacodes[i_37];
  if (D.41590_168 > 64)
    goto <bb 111>;
  else
    goto <bb 124>;

<bb 111>:
  D.41522_169 = smh_90->mparams;
  D.41593_170 = D.41522_169->dtmf_type;
  if (D.41593_170 == 0)
    goto <bb 112>;
  else
    goto <bb 115>;

<bb 112>:
  D.41522_171 = smh_90->mparams;
  D.41596_172 = D.41522_171->te;
  if (D.41596_172 > 95)
    goto <bb 113>;
  else
    goto <bb 115>;

<bb 113>:
  D.41522_173 = smh_90->mparams;
  D.41596_174 = D.41522_173->te;
  D.41599_175 = (int) D.41596_174;
  D.41578_176 = smh_90->payload_space;
  if (D.41599_175 == D.41578_176)
    goto <bb 114>;
  else
    goto <bb 115>;

<bb 114>:
  D.41578_177 = smh_90->payload_space;
  D.41602_178 = D.41578_177 + 1;
  smh_90->payload_space = D.41602_178;

<bb 115>:
  D.41603_179 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.41603_179 == 0)
    goto <bb 116>;
  else
    goto <bb 119>;

<bb 116>:
  D.41522_180 = smh_90->mparams;
  D.41606_181 = D.41522_180->cng_pt;
  D.41607_182 = D.41606_181 != 0;
  D.41608_183 = use_cng_17 != 0;
  D.41609_184 = D.41607_182 && D.41608_183;
  if (D.41609_184 != 0)
    goto <bb 117>;
  else
    goto <bb 119>;

<bb 117>:
  D.41522_185 = smh_90->mparams;
  D.41606_186 = D.41522_185->cng_pt;
  D.41612_187 = (int) D.41606_186;
  D.41578_188 = smh_90->payload_space;
  if (D.41612_187 == D.41578_188)
    goto <bb 118>;
  else
    goto <bb 119>;

<bb 118>:
  D.41578_189 = smh_90->payload_space;
  D.41602_190 = D.41578_189 + 1;
  smh_90->payload_space = D.41602_190;

<bb 119>:
  orig_session.25_191 = orig_session;
  if (orig_session.25_191 != 0B)
    goto <bb 120>;
  else
    goto <bb 123>;

<bb 120>:
  orig_session.25_192 = orig_session;
  D.41619_193 = imp_167->codec_type;
  D.41620_194 = D.41619_193 != 0;
  D.41621_195 = imp_167->iananame;
  D.41622_196 = switch_core_session_get_payload_code (orig_session.25_192, D.41620_194, D.41621_195, &orig_pt, 0B, &orig_fmtp);
  if (D.41622_196 == 0)
    goto <bb 121>;
  else
    goto <bb 123>;

<bb 121>:
  orig_pt.26_197 = orig_pt;
  smh_90->ianacodes[i_37] = orig_pt.26_197;
  orig_fmtp.27_198 = orig_fmtp;
  if (orig_fmtp.27_198 != 0B)
    goto <bb 122>;
  else
    goto <bb 124>;

<bb 122>:
  orig_fmtp.27_199 = orig_fmtp;
  D.41628_200 = switch_core_perform_session_strdup (session_72(D), orig_fmtp.27_199, "src/switch_core_media.c", &__func__, 6133);
  smh_90->fmtps[i_37] = D.41628_200;
  goto <bb 124>;

<bb 123>:
  D.41578_201 = smh_90->payload_space;
  D.41629_202 = (unsigned char) D.41578_201;
  smh_90->ianacodes[i_37] = D.41629_202;
  D.41602_203 = D.41578_201 + 1;
  smh_90->payload_space = D.41602_203;

<bb 124>:
  D.41619_204 = imp_167->codec_type;
  D.41620_205 = D.41619_204 != 0;
  D.41621_206 = imp_167->iananame;
  D.41590_207 = smh_90->ianacodes[i_37];
  D.41630_208 = (uint32_t) D.41590_207;
  D.41631_209 = imp_167->samples_per_second;
  D.41632_210 = imp_167->microseconds_per_packet;
  D.41633_211 = D.41632_210 / 1000;
  D.41634_212 = (uint32_t) D.41633_211;
  switch_core_media_add_payload_map (session_72(D), D.41620_205, D.41621_206, 0B, sdp_type_163(D), D.41630_208, D.41631_209, D.41634_212, 0);
  i_213 = i_37 + 1;
  # DEBUG i => i_213

<bb 125>:
  # i_37 = PHI <0(109), i_213(124)>
  # DEBUG i => i_37
  D.41522_165 = smh_90->mparams;
  D.41587_166 = D.41522_165->num_codecs;
  if (D.41587_166 > i_37)
    goto <bb 110>;
  else
    goto <bb 126>;

<bb 126>:
  orig_session.25_214 = orig_session;
  if (orig_session.25_214 != 0B)
    goto <bb 127>;
  else
    goto <bb 128>;

<bb 127>:
  orig_session.25_215 = orig_session;
  switch_core_session_rwunlock (orig_session.25_215);

<bb 128>:
  if (fmtp_out_var_82 != 0B)
    goto <bb 129>;
  else
    goto <bb 130>;

<bb 129>:
  # DEBUG fmtp_out => fmtp_out_var_82

<bb 130>:
  # fmtp_out_21 = PHI <fmtp_out_141(128), fmtp_out_var_82(129)>
  # DEBUG fmtp_out => fmtp_out_21
  D.41512_217 = session_72(D)->channel;
  val_218 = switch_channel_get_variable_dup (D.41512_217, "verbose_sdp", 1, -1);
  # DEBUG val => val_218
  if (val_218 == 0B)
    goto <bb 143>;
  else
    goto <bb 131>;

<bb 131>:
  # DEBUG expr => val_218
  if (val_218 != 0B)
    goto <bb 132>;
  else
    goto <bb 141>;

<bb 132>:
  D.50443_1640 = strcasecmp (val_218, "yes");
  if (D.50443_1640 == 0)
    goto <bb 142>;
  else
    goto <bb 133>;

<bb 133>:
  D.50444_1641 = strcasecmp (val_218, "on");
  if (D.50444_1641 == 0)
    goto <bb 142>;
  else
    goto <bb 134>;

<bb 134>:
  D.50445_1642 = strcasecmp (val_218, "true");
  if (D.50445_1642 == 0)
    goto <bb 142>;
  else
    goto <bb 135>;

<bb 135>:
  D.50446_1643 = strcasecmp (val_218, "t");
  if (D.50446_1643 == 0)
    goto <bb 142>;
  else
    goto <bb 136>;

<bb 136>:
  D.50447_1644 = strcasecmp (val_218, "enabled");
  if (D.50447_1644 == 0)
    goto <bb 142>;
  else
    goto <bb 137>;

<bb 137>:
  D.50448_1645 = strcasecmp (val_218, "active");
  if (D.50448_1645 == 0)
    goto <bb 142>;
  else
    goto <bb 138>;

<bb 138>:
  D.50449_1646 = strcasecmp (val_218, "allow");
  if (D.50449_1646 == 0)
    goto <bb 142>;
  else
    goto <bb 139>;

<bb 139>:
  D.50450_1647 = switch_is_number (val_218);
  if (D.50450_1647 != 0)
    goto <bb 140>;
  else
    goto <bb 141>;

<bb 140>:
  # DEBUG __nptr => val_218
  D.50451_1648 = strtol (val_218, 0B, 10);
  if (D.50451_1648 != 0)
    goto <bb 142>;
  else
    goto <bb 141>;

<bb 141>:

<bb 142>:
  # D.50441_1649 = PHI <1(132), 1(133), 1(134), 1(135), 1(136), 1(137), 1(138), 1(140), 0(141)>
  D.50441_1720 = D.50441_1649;
  D.50441_219 = D.50441_1720;
  if (D.50441_219 != 0)
    goto <bb 143>;
  else
    goto <bb 144>;

<bb 143>:
  D.41512_220 = session_72(D)->channel;
  switch_channel_set_flag_value (D.41512_220, 110, 1);

<bb 144>:
  D.41645_222 = force_221(D) == 0;
  D.41646_224 = ip_223(D) == 0B;
  D.41647_225 = D.41645_222 && D.41646_224;
  if (D.41647_225 != 0)
    goto <bb 145>;
  else
    goto <bb 153>;

<bb 145>:
  # DEBUG s => sr_226(D)
  if (sr_226(D) == 0B)
    goto <bb 148>;
  else
    goto <bb 146>;

<bb 146>:
  D.48132_1516 = *sr_226(D);
  if (D.48132_1516 == 0)
    goto <bb 148>;
  else
    goto <bb 147>;

<bb 147>:

<bb 148>:
  # D.48131_1517 = PHI <1(145), 1(146), 0(147)>
  if (D.48131_1517 != 0)
    goto <bb 149>;
  else
    goto <bb 153>;

<bb 149>:
  D.41512_228 = session_72(D)->channel;
  D.41653_229 = switch_channel_test_flag (D.41512_228, 15);
  if (D.41653_229 != 0)
    goto <bb 151>;
  else
    goto <bb 150>;

<bb 150>:
  D.41512_230 = session_72(D)->channel;
  D.41655_231 = switch_channel_test_flag (D.41512_230, 29);
  if (D.41655_231 != 0)
    goto <bb 151>;
  else
    goto <bb 153>;

<bb 151>:
  if (buf_144 != 0B)
    goto <bb 152>;
  else
    goto <bb 552>;

<bb 152>:
  free (buf_144);
  # DEBUG buf => 0B
  goto <bb 552>;

<bb 153>:
  if (ip_223(D) == 0B)
    goto <bb 154>;
  else
    goto <bb 156>;

<bb 154>:
  ip_233 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].adv_sdp_ip;
  # DEBUG ip => ip_233
  if (ip_233 == 0B)
    goto <bb 155>;
  else
    goto <bb 156>;

<bb 155>:
  ip_234 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].proxy_sdp_ip;
  # DEBUG ip => ip_234

<bb 156>:
  # ip_1 = PHI <ip_223(D)(153), ip_233(154), ip_234(155)>
  # DEBUG ip => ip_1
  if (ip_1 == 0B)
    goto <bb 157>;
  else
    goto <bb 159>;

<bb 157>:
  D.41512_235 = session_72(D)->channel;
  D.41664_236 = switch_channel_get_name (D.41512_235);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 6182, 0B, 2, "%s NO IP!\n", D.41664_236);
  if (buf_144 != 0B)
    goto <bb 158>;
  else
    goto <bb 552>;

<bb 158>:
  free (buf_144);
  # DEBUG buf => 0B
  goto <bb 552>;

<bb 159>:
  if (port_238(D) == 0)
    goto <bb 160>;
  else
    goto <bb 162>;

<bb 160>:
  port_239 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].adv_sdp_port;
  # DEBUG port => port_239
  if (port_239 == 0)
    goto <bb 161>;
  else
    goto <bb 162>;

<bb 161>:
  port_240 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].proxy_sdp_port;
  # DEBUG port => port_240

<bb 162>:
  # port_2 = PHI <port_238(D)(159), port_239(160), port_240(161)>
  # DEBUG port => port_2
  if (port_2 == 0)
    goto <bb 163>;
  else
    goto <bb 165>;

<bb 163>:
  D.41512_241 = session_72(D)->channel;
  D.41673_242 = switch_channel_get_name (D.41512_241);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 6194, 0B, 2, "%s NO PORT!\n", D.41673_242);
  if (buf_144 != 0B)
    goto <bb 164>;
  else
    goto <bb 552>;

<bb 164>:
  free (buf_144);
  # DEBUG buf => 0B
  goto <bb 552>;

<bb 165>:
  # DEBUG s => sr_226(D)
  if (sr_226(D) == 0B)
    goto <bb 168>;
  else
    goto <bb 166>;

<bb 166>:
  D.48136_1518 = *sr_226(D);
  if (D.48136_1518 == 0)
    goto <bb 168>;
  else
    goto <bb 167>;

<bb 167>:

<bb 168>:
  # D.48135_1519 = PHI <1(165), 1(166), 0(167)>
  if (D.48135_1519 != 0)
    goto <bb 169>;
  else
    goto <bb 171>;

<bb 169>:
  D.41512_245 = session_72(D)->channel;
  var_val_246 = switch_channel_get_variable_dup (D.41512_245, "media_audio_mode", 1, -1);
  # DEBUG var_val => var_val_246
  if (var_val_246 != 0B)
    goto <bb 170>;
  else
    goto <bb 171>;

<bb 170>:
  # DEBUG sr => var_val_246

<bb 171>:
  # sr_3 = PHI <sr_226(D)(168), var_val_246(170), "sendrecv"(169)>
  # DEBUG sr => sr_3
  D.41682_249 = smh_90->owner_id;
  if (D.41682_249 == 0)
    goto <bb 172>;
  else
    goto <bb 173>;

<bb 172>:
  D.41685_250 = switch_epoch_time_now (0B);
  D.41686_251 = (unsigned int) D.41685_250;
  D.41687_252 = (unsigned int) port_2;
  D.41688_253 = D.41686_251 - D.41687_252;
  smh_90->owner_id = D.41688_253;

<bb 173>:
  D.41689_254 = smh_90->session_id;
  if (D.41689_254 == 0)
    goto <bb 174>;
  else
    goto <bb 175>;

<bb 174>:
  D.41682_255 = smh_90->owner_id;
  smh_90->session_id = D.41682_255;

<bb 175>:
  D.41512_256 = session_72(D)->channel;
  D.41692_257 = switch_channel_get_variable_dup (D.41512_256, "drop_dtmf", 0, -1);
  # DEBUG expr => D.41692_257
  if (D.41692_257 != 0B)
    goto <bb 176>;
  else
    goto <bb 185>;

<bb 176>:
  D.50455_1650 = strcasecmp (D.41692_257, "yes");
  if (D.50455_1650 == 0)
    goto <bb 186>;
  else
    goto <bb 177>;

<bb 177>:
  D.50456_1651 = strcasecmp (D.41692_257, "on");
  if (D.50456_1651 == 0)
    goto <bb 186>;
  else
    goto <bb 178>;

<bb 178>:
  D.50457_1652 = strcasecmp (D.41692_257, "true");
  if (D.50457_1652 == 0)
    goto <bb 186>;
  else
    goto <bb 179>;

<bb 179>:
  D.50458_1653 = strcasecmp (D.41692_257, "t");
  if (D.50458_1653 == 0)
    goto <bb 186>;
  else
    goto <bb 180>;

<bb 180>:
  D.50459_1654 = strcasecmp (D.41692_257, "enabled");
  if (D.50459_1654 == 0)
    goto <bb 186>;
  else
    goto <bb 181>;

<bb 181>:
  D.50460_1655 = strcasecmp (D.41692_257, "active");
  if (D.50460_1655 == 0)
    goto <bb 186>;
  else
    goto <bb 182>;

<bb 182>:
  D.50461_1656 = strcasecmp (D.41692_257, "allow");
  if (D.50461_1656 == 0)
    goto <bb 186>;
  else
    goto <bb 183>;

<bb 183>:
  D.50462_1657 = switch_is_number (D.41692_257);
  if (D.50462_1657 != 0)
    goto <bb 184>;
  else
    goto <bb 185>;

<bb 184>:
  # DEBUG __nptr => D.41692_257
  D.50463_1658 = strtol (D.41692_257, 0B, 10);
  if (D.50463_1658 != 0)
    goto <bb 186>;
  else
    goto <bb 185>;

<bb 185>:

<bb 186>:
  # D.50453_1659 = PHI <1(176), 1(177), 1(178), 1(179), 1(180), 1(181), 1(182), 1(184), 0(185)>
  D.50453_1723 = D.50453_1659;
  D.50453_258 = D.50453_1723;
  if (D.50453_258 != 0)
    goto <bb 187>;
  else
    goto <bb 188>;

<bb 187>:
  D.41512_259 = session_72(D)->channel;
  switch_channel_set_flag_value (D.41512_259, 102, 1);

<bb 188>:
  D.41689_260 = smh_90->session_id;
  D.41696_261 = D.41689_260 + 1;
  smh_90->session_id = D.41696_261;
  D.41522_262 = smh_90->mparams;
  D.41699_263 = D.41522_262->ndlb;
  D.41700_264 = D.41699_263 & 16;
  if (D.41700_264 != 0)
    goto <bb 202>;
  else
    goto <bb 189>;

<bb 189>:
  D.41512_265 = session_72(D)->channel;
  var_val_266 = switch_channel_get_variable_dup (D.41512_265, "ndlb_sendrecv_in_session", 1, -1);
  # DEBUG var_val => var_val_266
  if (var_val_266 != 0B)
    goto <bb 190>;
  else
    goto <bb 207>;

<bb 190>:
  # DEBUG expr => var_val_266
  if (var_val_266 != 0B)
    goto <bb 191>;
  else
    goto <bb 200>;

<bb 191>:
  D.50467_1660 = strcasecmp (var_val_266, "yes");
  if (D.50467_1660 == 0)
    goto <bb 201>;
  else
    goto <bb 192>;

<bb 192>:
  D.50468_1661 = strcasecmp (var_val_266, "on");
  if (D.50468_1661 == 0)
    goto <bb 201>;
  else
    goto <bb 193>;

<bb 193>:
  D.50469_1662 = strcasecmp (var_val_266, "true");
  if (D.50469_1662 == 0)
    goto <bb 201>;
  else
    goto <bb 194>;

<bb 194>:
  D.50470_1663 = strcasecmp (var_val_266, "t");
  if (D.50470_1663 == 0)
    goto <bb 201>;
  else
    goto <bb 195>;

<bb 195>:
  D.50471_1664 = strcasecmp (var_val_266, "enabled");
  if (D.50471_1664 == 0)
    goto <bb 201>;
  else
    goto <bb 196>;

<bb 196>:
  D.50472_1665 = strcasecmp (var_val_266, "active");
  if (D.50472_1665 == 0)
    goto <bb 201>;
  else
    goto <bb 197>;

<bb 197>:
  D.50473_1666 = strcasecmp (var_val_266, "allow");
  if (D.50473_1666 == 0)
    goto <bb 201>;
  else
    goto <bb 198>;

<bb 198>:
  D.50474_1667 = switch_is_number (var_val_266);
  if (D.50474_1667 != 0)
    goto <bb 199>;
  else
    goto <bb 200>;

<bb 199>:
  # DEBUG __nptr => var_val_266
  D.50475_1668 = strtol (var_val_266, 0B, 10);
  if (D.50475_1668 != 0)
    goto <bb 201>;
  else
    goto <bb 200>;

<bb 200>:

<bb 201>:
  # D.50465_1669 = PHI <1(191), 1(192), 1(193), 1(194), 1(195), 1(196), 1(197), 1(199), 0(200)>
  D.50465_1726 = D.50465_1669;
  D.50465_267 = D.50465_1726;
  if (D.50465_267 != 0)
    goto <bb 202>;
  else
    goto <bb 207>;

<bb 202>:
  # DEBUG s => sr_3
  if (sr_3 == 0B)
    goto <bb 205>;
  else
    goto <bb 203>;

<bb 203>:
  D.48140_1520 = *sr_3;
  if (D.48140_1520 == 0)
    goto <bb 205>;
  else
    goto <bb 204>;

<bb 204>:

<bb 205>:
  # D.48139_1521 = PHI <1(202), 1(203), 0(204)>
  if (D.48139_1521 == 0)
    goto <bb 206>;
  else
    goto <bb 207>;

<bb 206>:
  switch_snprintf (&srbuf, 128, "a=%s\n", sr_3);

<bb 207>:
  # sr_4 = PHI <sr_3(189), sr_3(201), 0B(206), 0B(205)>
  # DEBUG sr => sr_4
  D.41708_270 = __builtin_strchr (ip_1, 58);
  if (D.41708_270 != 0B)
    goto <bb 209>;
  else
    goto <bb 208>;

<bb 208>:

<bb 209>:
  # family_59 = PHI <"IP6"(207), "IP4"(208)>
  # DEBUG family => family_59
  D.41682_274 = smh_90->owner_id;
  D.41689_275 = smh_90->session_id;
  switch_snprintf (buf_144, 65536, "v=0\no=%s %010u %010u IN %s %s\ns=%s\nc=IN %s %s\nt=0 0\n%s", username_143, D.41682_274, D.41689_275, family_59, ip_1, username_143, family_59, ip_1, &srbuf);
  D.41534_276 = smh_90->session;
  D.41535_277 = D.41534_276->channel;
  D.41712_278 = switch_channel_test_flag (D.41535_277, 108);
  if (D.41712_278 != 0)
    goto <bb 210>;
  else
    goto <bb 211>;

<bb 210>:
  gen_ice (session_72(D), 0, ip_1, port_2);
  D.41715_279 = strlen (buf_144);
  D.41716_280 = buf_144 + D.41715_279;
  D.41717_281 = strlen (buf_144);
  D.41718_282 = 65536 - D.41717_281;
  D.41719_283 = smh_90->msid;
  switch_snprintf (D.41716_280, D.41718_282, "a=msid-semantic: WMS %s\n", D.41719_283);

<bb 211>:
  D.41720_284 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].codec_negotiated;
  if (D.41720_284 != 0)
    goto <bb 212>;
  else
    goto <bb 318>;

<bb 212>:
  D.41723_285 = strlen (buf_144);
  D.41724_286 = buf_144 + D.41723_285;
  D.41725_287 = strlen (buf_144);
  D.41726_288 = 65536 - D.41725_287;
  D.41727_289 = (int) port_2;
  D.41732_290 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].no_crypto;
  if (D.41732_290 == 0)
    goto <bb 213>;
  else
    goto <bb 216>;

<bb 213>:
  D.41512_291 = session_72(D)->channel;
  D.41734_292 = switch_channel_test_flag (D.41512_291, 109);
  if (D.41734_292 != 0)
    goto <bb 216>;
  else
    goto <bb 214>;

<bb 214>:
  D.41736_293 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].crypto_type;
  if (D.41736_293 != 9)
    goto <bb 216>;
  else
    goto <bb 215>;

<bb 215>:

<bb 216>:
  # iftmp.29_60 = PHI <1(214), 0(215), 1(213), 0(212)>
  D.41737_296 = get_media_profile_name (session_72(D), iftmp.29_60);
  switch_snprintf (D.41724_286, D.41726_288, "m=audio %d %s", D.41727_289, D.41737_296);
  D.41738_297 = strlen (buf_144);
  D.41739_298 = buf_144 + D.41738_297;
  D.41740_299 = strlen (buf_144);
  D.41741_300 = 65536 - D.41740_299;
  D.41566_301 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  D.41742_302 = D.41566_301->pt;
  D.41743_303 = (int) D.41742_302;
  switch_snprintf (D.41739_298, D.41741_300, " %d", D.41743_303);
  D.41744_304 = switch_media_handle_test_media_flag (smh_90, 15);
  if (D.41744_304 != 0)
    goto <bb 217>;
  else
    goto <bb 224>;

<bb 217>:
  D.41747_305 = smh_90->sdp_mutex;
  switch_mutex_lock (D.41747_305);
  pmap_306 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  # DEBUG pmap => pmap_306
  goto <bb 221>;

<bb 218>:
  D.41748_308 = pmap_34->pt;
  D.41566_309 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  D.41742_310 = D.41566_309->pt;
  if (D.41748_308 != D.41742_310)
    goto <bb 219>;
  else
    goto <bb 220>;

<bb 219>:
  D.41751_311 = strlen (buf_144);
  D.41752_312 = buf_144 + D.41751_311;
  D.41753_313 = strlen (buf_144);
  D.41754_314 = 65536 - D.41753_313;
  D.41748_315 = pmap_34->pt;
  D.41755_316 = (int) D.41748_315;
  switch_snprintf (D.41752_312, D.41754_314, " %d", D.41755_316);

<bb 220>:
  pmap_317 = pmap_34->next;
  # DEBUG pmap => pmap_317

<bb 221>:
  # pmap_34 = PHI <pmap_306(217), pmap_317(220)>
  # DEBUG pmap => pmap_34
  if (pmap_34 != 0B)
    goto <bb 222>;
  else
    goto <bb 223>;

<bb 222>:
  D.41757_307 = pmap_34->allocated;
  if (D.41757_307 != 0)
    goto <bb 218>;
  else
    goto <bb 223>;

<bb 223>:
  D.41747_318 = smh_90->sdp_mutex;
  switch_mutex_unlock (D.41747_318);

<bb 224>:
  D.41522_319 = smh_90->mparams;
  D.41593_320 = D.41522_319->dtmf_type;
  if (D.41593_320 == 0)
    goto <bb 227>;
  else
    goto <bb 225>;

<bb 225>:
  D.41761_321 = switch_media_handle_test_media_flag (smh_90, 8);
  if (D.41761_321 != 0)
    goto <bb 227>;
  else
    goto <bb 226>;

<bb 226>:
  D.41512_322 = session_72(D)->channel;
  D.41763_323 = switch_channel_test_flag (D.41512_322, 93);
  if (D.41763_323 != 0)
    goto <bb 227>;
  else
    goto <bb 229>;

<bb 227>:
  D.41522_324 = smh_90->mparams;
  D.41596_325 = D.41522_324->te;
  if (D.41596_325 > 95)
    goto <bb 228>;
  else
    goto <bb 229>;

<bb 228>:
  D.41766_326 = strlen (buf_144);
  D.41767_327 = buf_144 + D.41766_326;
  D.41768_328 = strlen (buf_144);
  D.41769_329 = 65536 - D.41768_328;
  D.41522_330 = smh_90->mparams;
  D.41596_331 = D.41522_330->te;
  D.41599_332 = (int) D.41596_331;
  switch_snprintf (D.41767_327, D.41769_329, " %d", D.41599_332);

<bb 229>:
  D.41770_333 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.41770_333 == 0)
    goto <bb 230>;
  else
    goto <bb 232>;

<bb 230>:
  D.41522_334 = smh_90->mparams;
  D.41606_335 = D.41522_334->cng_pt;
  D.41607_336 = D.41606_335 != 0;
  D.41608_337 = use_cng_17 != 0;
  D.41609_338 = D.41607_336 && D.41608_337;
  if (D.41609_338 != 0)
    goto <bb 231>;
  else
    goto <bb 232>;

<bb 231>:
  D.41775_339 = strlen (buf_144);
  D.41776_340 = buf_144 + D.41775_339;
  D.41777_341 = strlen (buf_144);
  D.41778_342 = 65536 - D.41777_341;
  D.41522_343 = smh_90->mparams;
  D.41606_344 = D.41522_343->cng_pt;
  D.41612_345 = (int) D.41606_344;
  switch_snprintf (D.41776_340, D.41778_342, " %d", D.41612_345);

<bb 232>:
  D.41779_346 = strlen (buf_144);
  D.41780_347 = buf_144 + D.41779_346;
  D.41781_348 = strlen (buf_144);
  D.41782_349 = 65536 - D.41781_348;
  switch_snprintf (D.41780_347, D.41782_349, "\n");
  D.41566_350 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  rate_351 = D.41566_350->adv_rm_rate;
  # DEBUG rate => rate_351
  D.41566_352 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  D.41783_353 = D.41566_352->adv_channels;
  if (D.41783_353 == 0)
    goto <bb 233>;
  else
    goto <bb 234>;

<bb 233>:
  D.41566_355 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  D.41786_356 = D.41566_355->rm_encoding;
  D.41787_357 = get_channels (D.41786_356, 1);
  D.41566_355->adv_channels = D.41787_357;

<bb 234>:
  D.41566_358 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  D.41783_359 = D.41566_358->adv_channels;
  if (D.41783_359 > 1)
    goto <bb 235>;
  else
    goto <bb 236>;

<bb 235>:
  D.41790_360 = strlen (buf_144);
  D.41791_361 = buf_144 + D.41790_360;
  D.41792_362 = strlen (buf_144);
  D.41793_363 = 65536 - D.41792_362;
  D.41566_364 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  D.41794_365 = D.41566_364->agreed_pt;
  D.41795_366 = (int) D.41794_365;
  D.41566_367 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  D.41786_368 = D.41566_367->rm_encoding;
  D.41566_369 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  D.41783_370 = D.41566_369->adv_channels;
  switch_snprintf (D.41791_361, D.41793_363, "a=rtpmap:%d %s/%d/%d\n", D.41795_366, D.41786_368, rate_351, D.41783_370);
  goto <bb 237>;

<bb 236>:
  D.41797_371 = strlen (buf_144);
  D.41798_372 = buf_144 + D.41797_371;
  D.41799_373 = strlen (buf_144);
  D.41800_374 = 65536 - D.41799_373;
  D.41566_375 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  D.41794_376 = D.41566_375->agreed_pt;
  D.41795_377 = (int) D.41794_376;
  D.41566_378 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  D.41786_379 = D.41566_378->rm_encoding;
  switch_snprintf (D.41798_372, D.41800_374, "a=rtpmap:%d %s/%d\n", D.41795_377, D.41786_379, rate_351);

<bb 237>:
  if (fmtp_out_21 != 0B)
    goto <bb 238>;
  else
    goto <bb 239>;

<bb 238>:
  D.41803_380 = strlen (buf_144);
  D.41804_381 = buf_144 + D.41803_380;
  D.41805_382 = strlen (buf_144);
  D.41806_383 = 65536 - D.41805_382;
  D.41566_384 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  D.41794_385 = D.41566_384->agreed_pt;
  D.41795_386 = (int) D.41794_385;
  switch_snprintf (D.41804_381, D.41806_383, "a=fmtp:%d %s\n", D.41795_386, fmtp_out_21);

<bb 239>:
  D.41807_387 = switch_media_handle_test_media_flag (smh_90, 15);
  if (D.41807_387 != 0)
    goto <bb 240>;
  else
    goto <bb 247>;

<bb 240>:
  D.41747_388 = smh_90->sdp_mutex;
  switch_mutex_lock (D.41747_388);
  pmap_389 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  # DEBUG pmap => pmap_389
  goto <bb 244>;

<bb 241>:
  D.41748_391 = pmap_35->pt;
  D.41566_392 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].cur_payload_map;
  D.41742_393 = D.41566_392->pt;
  if (D.41748_391 != D.41742_393)
    goto <bb 242>;
  else
    goto <bb 243>;

<bb 242>:
  D.41812_394 = strlen (buf_144);
  D.41813_395 = buf_144 + D.41812_394;
  D.41814_396 = strlen (buf_144);
  D.41815_397 = 65536 - D.41814_396;
  D.41748_398 = pmap_35->pt;
  D.41755_399 = (int) D.41748_398;
  D.41816_400 = pmap_35->iananame;
  D.41817_401 = pmap_35->rate;
  switch_snprintf (D.41813_395, D.41815_397, "a=rtpmap:%d %s/%ld\n", D.41755_399, D.41816_400, D.41817_401);

<bb 243>:
  pmap_402 = pmap_35->next;
  # DEBUG pmap => pmap_402

<bb 244>:
  # pmap_35 = PHI <pmap_389(240), pmap_402(243)>
  # DEBUG pmap => pmap_35
  if (pmap_35 != 0B)
    goto <bb 245>;
  else
    goto <bb 246>;

<bb 245>:
  D.41757_390 = pmap_35->allocated;
  if (D.41757_390 != 0)
    goto <bb 241>;
  else
    goto <bb 246>;

<bb 246>:
  D.41747_403 = smh_90->sdp_mutex;
  switch_mutex_unlock (D.41747_403);

<bb 247>:
  D.41819_404 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].read_codec.implementation;
  if (D.41819_404 != 0B)
    goto <bb 248>;
  else
    goto <bb 249>;

<bb 248>:
  D.41819_408 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].read_codec.implementation;
  D.41825_409 = D.41819_408->microseconds_per_packet;
  ptime_410 = D.41825_409 / 1000;
  # DEBUG ptime => ptime_410

<bb 249>:
  # ptime_5 = PHI <0(247), ptime_410(248)>
  # DEBUG ptime => ptime_5
  D.41522_411 = smh_90->mparams;
  D.41593_412 = D.41522_411->dtmf_type;
  if (D.41593_412 == 0)
    goto <bb 252>;
  else
    goto <bb 250>;

<bb 250>:
  D.41829_413 = switch_media_handle_test_media_flag (smh_90, 8);
  if (D.41829_413 != 0)
    goto <bb 252>;
  else
    goto <bb 251>;

<bb 251>:
  D.41512_414 = session_72(D)->channel;
  D.41831_415 = switch_channel_test_flag (D.41512_414, 93);
  if (D.41831_415 != 0)
    goto <bb 252>;
  else
    goto <bb 256>;

<bb 252>:
  D.41522_416 = smh_90->mparams;
  D.41596_417 = D.41522_416->te;
  if (D.41596_417 > 95)
    goto <bb 253>;
  else
    goto <bb 256>;

<bb 253>:
  D.41512_418 = session_72(D)->channel;
  D.41834_419 = switch_channel_test_flag (D.41512_418, 106);
  if (D.41834_419 != 0)
    goto <bb 254>;
  else
    goto <bb 255>;

<bb 254>:
  D.41837_420 = strlen (buf_144);
  D.41838_421 = buf_144 + D.41837_420;
  D.41839_422 = strlen (buf_144);
  D.41840_423 = 65536 - D.41839_422;
  D.41522_424 = smh_90->mparams;
  D.41596_425 = D.41522_424->te;
  D.41599_426 = (int) D.41596_425;
  switch_snprintf (D.41838_421, D.41840_423, "a=rtpmap:%d telephone-event/8000\n", D.41599_426);
  goto <bb 256>;

<bb 255>:
  D.41842_427 = strlen (buf_144);
  D.41843_428 = buf_144 + D.41842_427;
  D.41844_429 = strlen (buf_144);
  D.41845_430 = 65536 - D.41844_429;
  D.41522_434 = smh_90->mparams;
  D.41596_435 = D.41522_434->te;
  D.41599_436 = (int) D.41596_435;
  switch_snprintf (D.41843_428, D.41845_430, "a=rtpmap:%d telephone-event/8000\na=fmtp:%d 0-16\n", D.41599_436, D.41599_436);

<bb 256>:
  D.41846_437 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.41846_437 != 0)
    goto <bb 257>;
  else
    goto <bb 258>;

<bb 257>:
  D.41849_438 = strlen (buf_144);
  D.41850_439 = buf_144 + D.41849_438;
  D.41851_440 = strlen (buf_144);
  D.41852_441 = 65536 - D.41851_440;
  switch_snprintf (D.41850_439, D.41852_441, "a=silenceSupp:off - - - -\n");
  goto <bb 261>;

<bb 258>:
  D.41522_442 = smh_90->mparams;
  D.41606_443 = D.41522_442->cng_pt;
  D.41607_444 = D.41606_443 != 0;
  D.41608_445 = use_cng_17 != 0;
  D.41609_446 = D.41607_444 && D.41608_445;
  if (D.41609_446 != 0)
    goto <bb 259>;
  else
    goto <bb 261>;

<bb 259>:
  D.41856_447 = strlen (buf_144);
  D.41857_448 = buf_144 + D.41856_447;
  D.41858_449 = strlen (buf_144);
  D.41859_450 = 65536 - D.41858_449;
  D.41522_451 = smh_90->mparams;
  D.41606_452 = D.41522_451->cng_pt;
  D.41612_453 = (int) D.41606_452;
  switch_snprintf (D.41857_448, D.41859_450, "a=rtpmap:%d CN/8000\n", D.41612_453);
  D.41720_454 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].codec_negotiated;
  if (D.41720_454 == 0)
    goto <bb 260>;
  else
    goto <bb 261>;

<bb 260>:
  D.41522_455 = smh_90->mparams;
  D.41522_455->cng_pt = 0;

<bb 261>:
  if (append_audio_78 != 0B)
    goto <bb 262>;
  else
    goto <bb 267>;

<bb 262>:
  D.41864_456 = strlen (buf_144);
  D.41865_457 = buf_144 + D.41864_456;
  D.41866_458 = strlen (buf_144);
  D.41867_459 = 65536 - D.41866_458;
  D.41870_460 = *append_audio_78;
  if (D.41870_460 != 0)
    goto <bb 263>;
  else
    goto <bb 264>;

<bb 263>:
  D.41873_461 = strlen (append_audio_78);
  D.41874_462 = D.41873_461 + -1;
  append_audio_463 = append_audio_78 + D.41874_462;

<bb 264>:
  # append_audio_62 = PHI <append_audio_463(263), append_audio_78(262)>
  D.41876_465 = *append_audio_62;
  if (D.41876_465 == 10)
    goto <bb 266>;
  else
    goto <bb 265>;

<bb 265>:

<bb 266>:
  # iftmp.30_61 = PHI <""(264), "\n"(265)>
  switch_snprintf (D.41865_457, D.41867_459, "%s%s", append_audio_78, iftmp.30_61);

<bb 267>:
  if (ptime_5 != 0)
    goto <bb 268>;
  else
    goto <bb 269>;

<bb 268>:
  D.41882_468 = strlen (buf_144);
  D.41883_469 = buf_144 + D.41882_468;
  D.41884_470 = strlen (buf_144);
  D.41885_471 = 65536 - D.41884_470;
  switch_snprintf (D.41883_469, D.41885_471, "a=ptime:%d\n", ptime_5);

<bb 269>:
  if (local_sdp_audio_zrtp_hash_83 != 0B)
    goto <bb 270>;
  else
    goto <bb 271>;

<bb 270>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 6350, session_72(D), 7, "Adding audio a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_83);
  D.41888_472 = strlen (buf_144);
  D.41889_473 = buf_144 + D.41888_472;
  D.41890_474 = strlen (buf_144);
  D.41891_475 = 65536 - D.41890_474;
  switch_snprintf (D.41889_473, D.41891_475, "a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_83);

<bb 271>:
  # DEBUG s => sr_4
  if (sr_4 == 0B)
    goto <bb 274>;
  else
    goto <bb 272>;

<bb 272>:
  D.48144_1522 = *sr_4;
  if (D.48144_1522 == 0)
    goto <bb 274>;
  else
    goto <bb 273>;

<bb 273>:

<bb 274>:
  # D.48143_1523 = PHI <1(271), 1(272), 0(273)>
  if (D.48143_1523 == 0)
    goto <bb 275>;
  else
    goto <bb 276>;

<bb 275>:
  D.41895_477 = strlen (buf_144);
  D.41896_478 = buf_144 + D.41895_477;
  D.41897_479 = strlen (buf_144);
  D.41898_480 = 65536 - D.41897_479;
  switch_snprintf (D.41896_478, D.41898_480, "a=%s\n", sr_4);

<bb 276>:
  D.41899_481 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_dtls_fingerprint.type;
  # DEBUG s => D.41899_481
  if (D.41899_481 == 0B)
    goto <bb 279>;
  else
    goto <bb 277>;

<bb 277>:
  D.48148_1524 = MEM[(const char *)D.41899_481];
  if (D.48148_1524 == 0)
    goto <bb 279>;
  else
    goto <bb 278>;

<bb 278>:

<bb 279>:
  # D.48147_1525 = PHI <1(276), 1(277), 0(278)>
  if (D.48147_1525 == 0)
    goto <bb 280>;
  else
    goto <bb 281>;

<bb 280>:
  D.41903_483 = strlen (buf_144);
  D.41904_484 = buf_144 + D.41903_483;
  D.41905_485 = strlen (buf_144);
  D.41906_486 = 65536 - D.41905_485;
  D.41899_487 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_dtls_fingerprint.type;
  D.41907_488 = &MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_dtls_fingerprint.str;
  switch_snprintf (D.41904_484, D.41906_486, "a=fingerprint:%s %s\n", D.41899_487, D.41907_488);

<bb 281>:
  D.41522_489 = smh_90->mparams;
  D.41523_490 = D.41522_489->rtcp_audio_interval_msec;
  if (D.41523_490 != 0B)
    goto <bb 282>;
  else
    goto <bb 285>;

<bb 282>:
  D.41910_491 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].rtcp_mux;
  if (D.41910_491 > 0)
    goto <bb 283>;
  else
    goto <bb 284>;

<bb 283>:
  D.41913_492 = strlen (buf_144);
  D.41914_493 = buf_144 + D.41913_492;
  D.41915_494 = strlen (buf_144);
  D.41916_495 = 65536 - D.41915_494;
  switch_snprintf (D.41914_493, D.41916_495, "a=rtcp-mux\n");
  D.41917_496 = strlen (buf_144);
  D.41918_497 = buf_144 + D.41917_496;
  D.41919_498 = strlen (buf_144);
  D.41920_499 = 65536 - D.41919_498;
  D.41727_500 = (int) port_2;
  switch_snprintf (D.41918_497, D.41920_499, "a=rtcp:%d IN %s %s\n", D.41727_500, family_59, ip_1);
  goto <bb 285>;

<bb 284>:
  D.41922_501 = strlen (buf_144);
  D.41923_502 = buf_144 + D.41922_501;
  D.41924_503 = strlen (buf_144);
  D.41925_504 = 65536 - D.41924_503;
  D.41727_505 = (int) port_2;
  D.41926_506 = D.41727_505 + 1;
  switch_snprintf (D.41923_502, D.41925_504, "a=rtcp:%d IN %s %s\n", D.41926_506, family_59, ip_1);

<bb 285>:
  D.41927_507 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].ice_out.cands[0][0].ready;
  if (D.41927_507 != 0)
    goto <bb 286>;
  else
    goto <bb 310>;

<bb 286>:
  tmp1 = "";
  tmp2 = "";
  # DEBUG c1 => 659136
  # DEBUG c2 => 659134
  # DEBUG c3 => 659126
  # DEBUG c4 => 659124
  tmp1[10] = 0;
  tmp2[10] = 0;
  switch_stun_random_string (&tmp1, 10, "0123456789");
  switch_stun_random_string (&tmp2, 10, "0123456789");
  # DEBUG D#25 => &MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].ice_out
  # DEBUG ice_out => D#25
  D.41930_513 = strlen (buf_144);
  D.41931_514 = buf_144 + D.41930_513;
  D.41932_515 = strlen (buf_144);
  D.41933_516 = 65536 - D.41932_515;
  D.41934_517 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].ssrc;
  D.41935_518 = smh_90->cname;
  switch_snprintf (D.41931_514, D.41933_516, "a=ssrc:%u cname:%s\n", D.41934_517, D.41935_518);
  D.41936_519 = strlen (buf_144);
  D.41937_520 = buf_144 + D.41936_519;
  D.41938_521 = strlen (buf_144);
  D.41939_522 = 65536 - D.41938_521;
  D.41934_523 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].ssrc;
  D.41719_524 = smh_90->msid;
  switch_snprintf (D.41937_520, D.41939_522, "a=ssrc:%u msid:%s a0\n", D.41934_523, D.41719_524);
  D.41940_525 = strlen (buf_144);
  D.41941_526 = buf_144 + D.41940_525;
  D.41942_527 = strlen (buf_144);
  D.41943_528 = 65536 - D.41942_527;
  D.41934_529 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].ssrc;
  D.41719_530 = smh_90->msid;
  switch_snprintf (D.41941_526, D.41943_528, "a=ssrc:%u mslabel:%s\n", D.41934_529, D.41719_530);
  D.41944_531 = strlen (buf_144);
  D.41945_532 = buf_144 + D.41944_531;
  D.41946_533 = strlen (buf_144);
  D.41947_534 = 65536 - D.41946_533;
  D.41934_535 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].ssrc;
  D.41719_536 = smh_90->msid;
  switch_snprintf (D.41945_532, D.41947_534, "a=ssrc:%u label:%sa0\n", D.41934_535, D.41719_536);
  D.41948_537 = strlen (buf_144);
  D.41949_538 = buf_144 + D.41948_537;
  D.41950_539 = strlen (buf_144);
  D.41951_540 = 65536 - D.41950_539;
  D.41952_541 = MEM[(struct ice_t *)smh_90 + 6480B].ufrag;
  switch_snprintf (D.41949_538, D.41951_540, "a=ice-ufrag:%s\n", D.41952_541);
  D.41953_542 = strlen (buf_144);
  D.41954_543 = buf_144 + D.41953_542;
  D.41955_544 = strlen (buf_144);
  D.41956_545 = 65536 - D.41955_544;
  D.41957_546 = MEM[(struct ice_t *)smh_90 + 6480B].pwd;
  switch_snprintf (D.41954_543, D.41956_545, "a=ice-pwd:%s\n", D.41957_546);
  D.41958_547 = strlen (buf_144);
  D.41959_548 = buf_144 + D.41958_547;
  D.41960_549 = strlen (buf_144);
  D.41961_550 = 65536 - D.41960_549;
  D.41962_551 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].transport;
  D.41963_552 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_addr;
  D.41964_553 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_port;
  D.41965_554 = (int) D.41964_553;
  switch_snprintf (D.41959_548, D.41961_550, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_551, 659136, D.41963_552, D.41965_554);
  D.41966_555 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_sdp_ip;
  # DEBUG s => D.41966_555
  if (D.41966_555 == 0B)
    goto <bb 289>;
  else
    goto <bb 287>;

<bb 287>:
  D.48152_1526 = MEM[(const char *)D.41966_555];
  if (D.48152_1526 == 0)
    goto <bb 289>;
  else
    goto <bb 288>;

<bb 288>:

<bb 289>:
  # D.48151_1527 = PHI <1(286), 1(287), 0(288)>
  if (D.48151_1527 == 0)
    goto <bb 290>;
  else
    goto <bb 297>;

<bb 290>:
  D.41963_557 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_addr;
  # DEBUG s => D.41963_557
  if (D.41963_557 == 0B)
    goto <bb 293>;
  else
    goto <bb 291>;

<bb 291>:
  D.48156_1528 = MEM[(const char *)D.41963_557];
  if (D.48156_1528 == 0)
    goto <bb 293>;
  else
    goto <bb 292>;

<bb 292>:

<bb 293>:
  # D.48155_1529 = PHI <1(290), 1(291), 0(292)>
  if (D.48155_1529 == 0)
    goto <bb 294>;
  else
    goto <bb 297>;

<bb 294>:
  D.41966_559 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_sdp_ip;
  D.41963_560 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_addr;
  D.39598_561 = __builtin_strcmp (D.41966_559, D.41963_560);
  if (D.39598_561 != 0)
    goto <bb 295>;
  else
    goto <bb 297>;

<bb 295>:
  D.41975_562 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_sdp_port;
  D.41964_563 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_port;
  if (D.41975_562 != D.41964_563)
    goto <bb 296>;
  else
    goto <bb 297>;

<bb 296>:
  D.41978_564 = strlen (buf_144);
  D.41979_565 = buf_144 + D.41978_564;
  D.41980_566 = strlen (buf_144);
  D.41981_567 = 65536 - D.41980_566;
  D.41962_568 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].transport;
  D.41963_569 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_addr;
  D.41964_570 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_port;
  D.41965_571 = (int) D.41964_570;
  D.41966_572 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_sdp_ip;
  D.41975_573 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_sdp_port;
  D.41982_574 = (int) D.41975_573;
  switch_snprintf (D.41979_565, D.41981_567, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_568, 659126, D.41963_569, D.41965_571, D.41966_572, D.41982_574);

<bb 297>:
  D.41910_575 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].rtcp_mux;
  D.41985_576 = D.41910_575 <= 0;
  D.41986_577 = is_outbound_89 != 0;
  D.41987_578 = D.41985_576 || D.41986_577;
  if (D.41987_578 != 0)
    goto <bb 299>;
  else
    goto <bb 298>;

<bb 298>:
  D.41512_579 = session_72(D)->channel;
  D.41989_580 = switch_channel_test_flag (D.41512_579, 84);
  if (D.41989_580 != 0)
    goto <bb 299>;
  else
    goto <bb 310>;

<bb 299>:
  D.41990_581 = strlen (buf_144);
  D.41991_582 = buf_144 + D.41990_581;
  D.41992_583 = strlen (buf_144);
  D.41993_584 = 65536 - D.41992_583;
  D.41962_585 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].transport;
  D.41963_586 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_addr;
  D.41964_587 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_port;
  D.41965_588 = (int) D.41964_587;
  D.41910_589 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].rtcp_mux;
  D.41994_590 = D.41910_589 <= 0;
  D.41995_591 = D.41965_588 + D.41994_590;
  switch_snprintf (D.41991_582, D.41993_584, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_585, 659134, D.41963_586, D.41995_591);
  D.41966_592 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_sdp_ip;
  # DEBUG s => D.41966_592
  if (D.41966_592 == 0B)
    goto <bb 302>;
  else
    goto <bb 300>;

<bb 300>:
  D.48160_1530 = MEM[(const char *)D.41966_592];
  if (D.48160_1530 == 0)
    goto <bb 302>;
  else
    goto <bb 301>;

<bb 301>:

<bb 302>:
  # D.48159_1531 = PHI <1(299), 1(300), 0(301)>
  if (D.48159_1531 == 0)
    goto <bb 303>;
  else
    goto <bb 310>;

<bb 303>:
  D.41963_594 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_addr;
  # DEBUG s => D.41963_594
  if (D.41963_594 == 0B)
    goto <bb 306>;
  else
    goto <bb 304>;

<bb 304>:
  D.48164_1532 = MEM[(const char *)D.41963_594];
  if (D.48164_1532 == 0)
    goto <bb 306>;
  else
    goto <bb 305>;

<bb 305>:

<bb 306>:
  # D.48163_1533 = PHI <1(303), 1(304), 0(305)>
  if (D.48163_1533 == 0)
    goto <bb 307>;
  else
    goto <bb 310>;

<bb 307>:
  D.41966_596 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_sdp_ip;
  D.41963_597 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_addr;
  D.39607_598 = __builtin_strcmp (D.41966_596, D.41963_597);
  if (D.39607_598 != 0)
    goto <bb 308>;
  else
    goto <bb 310>;

<bb 308>:
  D.41975_599 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_sdp_port;
  D.41964_600 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_port;
  if (D.41975_599 != D.41964_600)
    goto <bb 309>;
  else
    goto <bb 310>;

<bb 309>:
  D.42006_601 = strlen (buf_144);
  D.42007_602 = buf_144 + D.42006_601;
  D.42008_603 = strlen (buf_144);
  D.42009_604 = 65536 - D.42008_603;
  D.41962_605 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].transport;
  D.41963_606 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_addr;
  D.41964_607 = MEM[(struct ice_t *)smh_90 + 6480B].cands[0][0].con_port;
  D.41965_608 = (int) D.41964_607;
  D.41910_609 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].rtcp_mux;
  D.41994_610 = D.41910_609 <= 0;
  D.41995_611 = D.41965_608 + D.41994_610;
  D.41966_612 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_sdp_ip;
  D.41975_613 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].local_sdp_port;
  D.41982_614 = (int) D.41975_613;
  D.41910_615 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].rtcp_mux;
  D.41994_616 = D.41910_615 <= 0;
  D.42010_617 = D.41982_614 + D.41994_616;
  switch_snprintf (D.42007_602, D.42009_604, "a=candidate:%s 2 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_605, 659124, D.41963_606, D.41995_611, D.41966_612, D.42010_617);

<bb 310>:
  D.41736_618 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].crypto_type;
  if (D.41736_618 != 9)
    goto <bb 311>;
  else
    goto <bb 365>;

<bb 311>:
  D.41512_619 = session_72(D)->channel;
  D.42013_620 = switch_channel_test_flag (D.41512_619, 109);
  if (D.42013_620 == 0)
    goto <bb 312>;
  else
    goto <bb 365>;

<bb 312>:
  D.41736_621 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].crypto_type;
  D.42016_622 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].ssec[D.41736_621].local_crypto_key;
  # DEBUG s => D.42016_622
  if (D.42016_622 == 0B)
    goto <bb 315>;
  else
    goto <bb 313>;

<bb 313>:
  D.48168_1534 = MEM[(const char *)D.42016_622];
  if (D.48168_1534 == 0)
    goto <bb 315>;
  else
    goto <bb 314>;

<bb 314>:

<bb 315>:
  # D.48167_1535 = PHI <1(312), 1(313), 0(314)>
  if (D.48167_1535 == 0)
    goto <bb 316>;
  else
    goto <bb 365>;

<bb 316>:
  D.41512_624 = session_72(D)->channel;
  D.42020_625 = switch_channel_test_flag (D.41512_624, 92);
  if (D.42020_625 != 0)
    goto <bb 317>;
  else
    goto <bb 365>;

<bb 317>:
  D.42023_626 = strlen (buf_144);
  D.42024_627 = buf_144 + D.42023_626;
  D.42025_628 = strlen (buf_144);
  D.42026_629 = 65536 - D.42025_628;
  D.41736_630 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].crypto_type;
  D.42016_631 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].ssec[D.41736_630].local_crypto_key;
  switch_snprintf (D.42024_627, D.42026_629, "a=crypto:%s\n", D.42016_631);
  goto <bb 365>;

<bb 318>:
  D.41522_632 = smh_90->mparams;
  D.41587_633 = D.41522_632->num_codecs;
  if (D.41587_633 != 0)
    goto <bb 319>;
  else
    goto <bb 365>;

<bb 319>:
  # DEBUG cur_ptime => 0
  # DEBUG this_ptime => 0
  # DEBUG cng_type => 0
  D.42030_637 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.42030_637 == 0)
    goto <bb 320>;
  else
    goto <bb 323>;

<bb 320>:
  D.41522_638 = smh_90->mparams;
  D.41606_639 = D.41522_638->cng_pt;
  D.41607_640 = D.41606_639 != 0;
  D.41608_641 = use_cng_17 != 0;
  D.41609_642 = D.41607_640 && D.41608_641;
  if (D.41609_642 != 0)
    goto <bb 321>;
  else
    goto <bb 323>;

<bb 321>:
  D.41522_643 = smh_90->mparams;
  D.41606_644 = D.41522_643->cng_pt;
  cng_type_645 = (int) D.41606_644;
  # DEBUG cng_type => cng_type_645
  D.41720_646 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].codec_negotiated;
  if (D.41720_646 == 0)
    goto <bb 322>;
  else
    goto <bb 323>;

<bb 322>:
  D.41522_647 = smh_90->mparams;
  D.41522_647->cng_pt = 0;

<bb 323>:
  # cng_type_42 = PHI <0(319), 0(320), cng_type_645(321), cng_type_645(322)>
  # DEBUG cng_type => cng_type_42
  D.41512_648 = session_72(D)->channel;
  mult_649 = switch_channel_get_variable_dup (D.41512_648, "sdp_m_per_ptime", 1, -1);
  # DEBUG mult => mult_649
  D.41512_650 = session_72(D)->channel;
  D.42039_651 = switch_channel_test_flag (D.41512_650, 106);
  if (D.42039_651 != 0)
    goto <bb 338>;
  else
    goto <bb 324>;

<bb 324>:
  if (mult_649 != 0B)
    goto <bb 325>;
  else
    goto <bb 337>;

<bb 325>:
  # DEBUG expr => mult_649
  if (mult_649 != 0B)
    goto <bb 326>;
  else
    goto <bb 335>;

<bb 326>:
  D.50479_1670 = strcasecmp (mult_649, "no");
  if (D.50479_1670 == 0)
    goto <bb 336>;
  else
    goto <bb 327>;

<bb 327>:
  D.50480_1671 = strcasecmp (mult_649, "off");
  if (D.50480_1671 == 0)
    goto <bb 336>;
  else
    goto <bb 328>;

<bb 328>:
  D.50481_1672 = strcasecmp (mult_649, "false");
  if (D.50481_1672 == 0)
    goto <bb 336>;
  else
    goto <bb 329>;

<bb 329>:
  D.50482_1673 = strcasecmp (mult_649, "f");
  if (D.50482_1673 == 0)
    goto <bb 336>;
  else
    goto <bb 330>;

<bb 330>:
  D.50483_1674 = strcasecmp (mult_649, "disabled");
  if (D.50483_1674 == 0)
    goto <bb 336>;
  else
    goto <bb 331>;

<bb 331>:
  D.50484_1675 = strcasecmp (mult_649, "inactive");
  if (D.50484_1675 == 0)
    goto <bb 336>;
  else
    goto <bb 332>;

<bb 332>:
  D.50485_1676 = strcasecmp (mult_649, "disallow");
  if (D.50485_1676 == 0)
    goto <bb 336>;
  else
    goto <bb 333>;

<bb 333>:
  D.50486_1677 = switch_is_number (mult_649);
  if (D.50486_1677 != 0)
    goto <bb 334>;
  else
    goto <bb 335>;

<bb 334>:
  # DEBUG __nptr => mult_649
  D.50487_1678 = strtol (mult_649, 0B, 10);
  if (D.50487_1678 == 0)
    goto <bb 336>;
  else
    goto <bb 335>;

<bb 335>:

<bb 336>:
  # D.50477_1679 = PHI <1(326), 1(327), 1(328), 1(329), 1(330), 1(331), 1(332), 1(334), 0(335)>
  D.50477_1729 = D.50477_1679;
  D.50477_652 = D.50477_1729;
  if (D.50477_652 != 0)
    goto <bb 338>;
  else
    goto <bb 337>;

<bb 337>:
  cur_ptime_1578 = 0;
  i_1104 = 0;
  goto <bb 364>;

<bb 338>:
  # DEBUG bp => buf_144
  D.41512_690 = session_72(D)->channel;
  D.42046_691 = switch_channel_test_flag (D.41512_690, 106);
  if (D.42046_691 == 0)
    goto <bb 339>;
  else
    goto <bb 341>;

<bb 339>:
  D.41512_692 = session_72(D)->channel;
  D.42048_693 = switch_channel_test_flag (D.41512_692, 109);
  if (D.42048_693 == 0)
    goto <bb 341>;
  else
    goto <bb 340>;

<bb 340>:

<bb 341>:
  # both_63 = PHI <1(339), 0(340), 0(338)>
  # DEBUG both => both_63
  D.41732_697 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].no_crypto;
  if (D.41732_697 == 0)
    goto <bb 342>;
  else
    goto <bb 343>;

<bb 342>:
  D.41512_698 = session_72(D)->channel;
  D.42054_699 = switch_channel_test_flag (D.41512_698, 92);
  if (D.42054_699 != 0)
    goto <bb 344>;
  else
    goto <bb 343>;

<bb 343>:
  D.41512_700 = session_72(D)->channel;
  D.42055_701 = switch_channel_test_flag (D.41512_700, 109);
  if (D.42055_701 != 0)
    goto <bb 344>;
  else
    goto <bb 346>;

<bb 344>:
  map.33_702 = map;
  generate_m.isra.4 (session_72(D), buf_144, 65536, port_2, family_59, ip_1, 0, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_702, 1);
  D.42057_703 = strlen (buf_144);
  bp_704 = buf_144 + D.42057_703;
  # DEBUG bp => bp_704
  D.42058_705 = smh_90->crypto_mode;
  if (D.42058_705 == 1)
    goto <bb 345>;
  else
    goto <bb 346>;

<bb 345>:
  # DEBUG both => 0

<bb 346>:
  # bp_43 = PHI <buf_144(343), bp_704(344), bp_704(345)>
  # both_44 = PHI <both_63(343), both_63(344), 0(345)>
  # DEBUG both => both_44
  # DEBUG bp => bp_43
  if (both_44 != 0)
    goto <bb 347>;
  else
    goto <bb 365>;

<bb 347>:
  D.42063_707 = strlen (buf_144);
  D.42064_708 = 65536 - D.42063_707;
  map.33_709 = map;
  generate_m.isra.4 (session_72(D), bp_43, D.42064_708, port_2, family_59, ip_1, 0, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_709, 0);
  goto <bb 365>;

<bb 348>:
  imp_656 = smh_90->codecs[i_38];
  # DEBUG imp => imp_656
  D.42065_657 = imp_656->codec_type;
  if (D.42065_657 != 0)
    goto <bb 363>;
  else
    goto <bb 349>;

<bb 349>:
  D.42068_658 = imp_656->microseconds_per_packet;
  this_ptime_659 = D.42068_658 / 1000;
  # DEBUG this_ptime => this_ptime_659
  D.42071_660 = imp_656->iananame;
  D.42072_661 = strcasecmp (D.42071_660, "ilbc");
  if (D.42072_661 == 0)
    goto <bb 351>;
  else
    goto <bb 350>;

<bb 350>:
  D.42071_662 = imp_656->iananame;
  D.42074_663 = strcasecmp (D.42071_662, "isac");
  if (D.42074_663 == 0)
    goto <bb 351>;
  else
    goto <bb 352>;

<bb 351>:
  # DEBUG this_ptime => 20

<bb 352>:
  # this_ptime_41 = PHI <this_ptime_659(350), 20(351)>
  # DEBUG this_ptime => this_ptime_41
  if (cur_ptime_40 != this_ptime_41)
    goto <bb 353>;
  else
    goto <bb 363>;

<bb 353>:
  # DEBUG bp => buf_144
  # DEBUG both => 1
  # DEBUG cur_ptime => this_ptime_41
  D.41732_668 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].no_crypto;
  if (D.41732_668 == 0)
    goto <bb 354>;
  else
    goto <bb 355>;

<bb 354>:
  D.41512_669 = session_72(D)->channel;
  D.42081_670 = switch_channel_test_flag (D.41512_669, 92);
  if (D.42081_670 != 0)
    goto <bb 356>;
  else
    goto <bb 355>;

<bb 355>:
  D.41512_671 = session_72(D)->channel;
  D.42082_672 = switch_channel_test_flag (D.41512_671, 109);
  if (D.42082_672 != 0)
    goto <bb 356>;
  else
    goto <bb 358>;

<bb 356>:
  D.42083_673 = strlen (buf_144);
  D.42084_674 = 65536 - D.42083_673;
  map.33_675 = map;
  generate_m.isra.4 (session_72(D), buf_144, D.42084_674, port_2, family_59, ip_1, this_ptime_41, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_675, 1);
  D.42085_676 = strlen (buf_144);
  bp_677 = buf_144 + D.42085_676;
  # DEBUG bp => bp_677
  D.42058_678 = smh_90->crypto_mode;
  if (D.42058_678 == 1)
    goto <bb 357>;
  else
    goto <bb 358>;

<bb 357>:
  # DEBUG both => 0

<bb 358>:
  # bp_45 = PHI <buf_144(355), bp_677(356), bp_677(357)>
  # both_46 = PHI <1(355), 1(356), 0(357)>
  # DEBUG both => both_46
  # DEBUG bp => bp_45
  D.41512_680 = session_72(D)->channel;
  D.42090_681 = switch_channel_test_flag (D.41512_680, 106);
  if (D.42090_681 != 0)
    goto <bb 361>;
  else
    goto <bb 359>;

<bb 359>:
  D.41512_682 = session_72(D)->channel;
  D.42092_683 = switch_channel_test_flag (D.41512_682, 109);
  if (D.42092_683 != 0)
    goto <bb 360>;
  else
    goto <bb 361>;

<bb 360>:

<bb 361>:
  # both_47 = PHI <both_46(359), 0(360), 0(358)>
  # DEBUG both => both_47
  if (both_47 != 0)
    goto <bb 362>;
  else
    goto <bb 363>;

<bb 362>:
  D.42095_685 = strlen (buf_144);
  D.42096_686 = 65536 - D.42095_685;
  map.33_687 = map;
  generate_m.isra.4 (session_72(D), bp_45, D.42096_686, port_2, family_59, ip_1, this_ptime_41, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_687, 0);

<bb 363>:
  # cur_ptime_39 = PHI <cur_ptime_40(348), cur_ptime_40(352), this_ptime_41(361), this_ptime_41(362)>
  # DEBUG cur_ptime => cur_ptime_39
  i_688 = i_38 + 1;
  # DEBUG i => i_688

<bb 364>:
  # i_38 = PHI <0(337), i_688(363)>
  # cur_ptime_40 = PHI <0(337), cur_ptime_39(363)>
  # DEBUG cur_ptime => cur_ptime_40
  # DEBUG i => i_38
  D.41522_654 = smh_90->mparams;
  D.41587_655 = D.41522_654->num_codecs;
  if (D.41587_655 > i_38)
    goto <bb 348>;
  else
    goto <bb 365>;

<bb 365>:
  # DEBUG rate => NULL
  # DEBUG ptime => NULL
  D.41512_710 = session_72(D)->channel;
  D.42097_711 = switch_channel_test_flag (D.41512_710, 98);
  if (D.42097_711 != 0)
    goto <bb 366>;
  else
    goto <bb 546>;

<bb 366>:
  D.41512_712 = session_72(D)->channel;
  D.42100_713 = switch_channel_direction (D.41512_712);
  if (D.42100_713 == 0)
    goto <bb 367>;
  else
    goto <bb 369>;

<bb 367>:
  D.41534_714 = smh_90->session;
  D.41535_715 = D.41534_714->channel;
  D.42103_716 = switch_channel_test_flag (D.41535_715, 109);
  if (D.42103_716 != 0)
    goto <bb 368>;
  else
    goto <bb 369>;

<bb 368>:
  MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].no_crypto = 1;

<bb 369>:
  D.42106_717 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_sdp_port;
  if (D.42106_717 == 0)
    goto <bb 370>;
  else
    goto <bb 371>;

<bb 370>:
  switch_core_media_choose_port (session_72(D), 1, 0);

<bb 371>:
  D.41512_718 = session_72(D)->channel;
  D.42109_719 = switch_channel_test_flag (D.41512_718, 106);
  if (D.42109_719 != 0)
    goto <bb 372>;
  else
    goto <bb 373>;

<bb 372>:
  switch_media_handle_set_media_flag (smh_90, 16);

<bb 373>:
  D.42112_720 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].adv_sdp_port;
  v_port_721 = (uint32_t) D.42112_720;
  # DEBUG v_port => v_port_721
  if (v_port_721 != 0)
    goto <bb 374>;
  else
    goto <bb 546>;

<bb 374>:
  # pass_fmtp_1164 = PHI <pass_fmtp_74(373)>
  loops_1201 = 0;
  red_1197 = 0;
  vp8_1192 = 0;
  goto <bb 545>;

<bb 375>:
  D.41534_723 = smh_90->session;
  D.41535_724 = D.41534_723->channel;
  D.42115_725 = switch_channel_test_flag (D.41535_724, 108);
  if (D.42115_725 != 0)
    goto <bb 376>;
  else
    goto <bb 377>;

<bb 376>:
  D.42118_726 = (short unsigned int) v_port_721;
  gen_ice (session_72(D), 1, ip_1, D.42118_726);

<bb 377>:
  D.42119_727 = strlen (buf_144);
  D.42120_728 = buf_144 + D.42119_727;
  D.42121_729 = strlen (buf_144);
  D.42122_730 = 65536 - D.42121_729;
  if (loops_48 == 0)
    goto <bb 378>;
  else
    goto <bb 380>;

<bb 378>:
  D.41512_731 = session_72(D)->channel;
  D.42129_732 = switch_channel_test_flag (D.41512_731, 92);
  if (D.42129_732 != 0)
    goto <bb 379>;
  else
    goto <bb 380>;

<bb 379>:
  D.41512_733 = session_72(D)->channel;
  D.42131_734 = switch_channel_direction (D.41512_733);
  if (D.42131_734 == 1)
    goto <bb 383>;
  else
    goto <bb 380>;

<bb 380>:
  D.41736_735 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].crypto_type;
  if (D.41736_735 != 9)
    goto <bb 383>;
  else
    goto <bb 381>;

<bb 381>:
  D.41512_736 = session_72(D)->channel;
  D.42133_737 = switch_channel_test_flag (D.41512_736, 109);
  if (D.42133_737 != 0)
    goto <bb 382>;
  else
    goto <bb 383>;

<bb 382>:

<bb 383>:
  # iftmp.34_64 = PHI <1(380), 0(381), 1(379), 1(382)>
  D.42134_740 = get_media_profile_name (session_72(D), iftmp.34_64);
  switch_snprintf (D.42120_728, D.42122_730, "m=video %d %s", v_port_721, D.42134_740);
  D.42135_741 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].codec_negotiated;
  if (D.42135_741 != 0)
    goto <bb 384>;
  else
    goto <bb 392>;

<bb 384>:
  switch_core_media_set_video_codec (session_72(D), 0);
  D.42138_742 = strlen (buf_144);
  D.42139_743 = buf_144 + D.42138_742;
  D.42140_744 = strlen (buf_144);
  D.42141_745 = 65536 - D.42140_744;
  D.42142_746 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  D.42143_747 = D.42142_746->agreed_pt;
  D.42144_748 = (int) D.42143_747;
  switch_snprintf (D.42139_743, D.42141_745, " %d", D.42144_748);
  D.42145_749 = switch_media_handle_test_media_flag (smh_90, 16);
  if (D.42145_749 != 0)
    goto <bb 385>;
  else
    goto <bb 403>;

<bb 385>:
  D.41747_750 = smh_90->sdp_mutex;
  switch_mutex_lock (D.41747_750);
  pmap_751 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  # DEBUG pmap => pmap_751
  goto <bb 389>;

<bb 386>:
  D.42148_753 = pmap_49->pt;
  D.42142_754 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  D.42149_755 = D.42142_754->pt;
  if (D.42148_753 != D.42149_755)
    goto <bb 387>;
  else
    goto <bb 388>;

<bb 387>:
  D.42152_756 = strlen (buf_144);
  D.42153_757 = buf_144 + D.42152_756;
  D.42154_758 = strlen (buf_144);
  D.42155_759 = 65536 - D.42154_758;
  D.42148_760 = pmap_49->pt;
  D.42156_761 = (int) D.42148_760;
  switch_snprintf (D.42153_757, D.42155_759, " %d", D.42156_761);

<bb 388>:
  pmap_762 = pmap_49->next;
  # DEBUG pmap => pmap_762

<bb 389>:
  # pmap_49 = PHI <pmap_751(385), pmap_762(388)>
  # DEBUG pmap => pmap_49
  if (pmap_49 != 0B)
    goto <bb 390>;
  else
    goto <bb 391>;

<bb 390>:
  D.42158_752 = pmap_49->allocated;
  if (D.42158_752 != 0)
    goto <bb 386>;
  else
    goto <bb 391>;

<bb 391>:
  D.41747_763 = smh_90->sdp_mutex;
  switch_mutex_unlock (D.41747_763);
  goto <bb 403>;

<bb 392>:
  D.41522_764 = smh_90->mparams;
  D.41587_765 = D.41522_764->num_codecs;
  if (D.41587_765 != 0)
    goto <bb 393>;
  else
    goto <bb 403>;

<bb 393>:
  already_did = {};
  # DEBUG i => 0
  goto <bb 402>;

<bb 394>:
  imp_769 = smh_90->codecs[i_50];
  # DEBUG imp => imp_769
  D.42162_770 = imp_769->codec_type;
  if (D.42162_770 != 1)
    goto <bb 401>;
  else
    goto <bb 395>;

<bb 395>:
  D.41512_771 = session_72(D)->channel;
  D.42165_772 = switch_channel_direction (D.41512_771);
  if (D.42165_772 == 0)
    goto <bb 396>;
  else
    goto <bb 397>;

<bb 396>:
  D.41512_773 = session_72(D)->channel;
  D.42168_774 = switch_channel_test_flag (D.41512_773, 114);
  if (D.42168_774 != 0)
    goto <bb 401>;
  else
    goto <bb 397>;

<bb 397>:
  D.42171_775 = smh_90->ianacodes[i_50];
  D.42172_776 = (signed char) D.42171_775;
  if (D.42172_776 >= 0)
    goto <bb 398>;
  else
    goto <bb 400>;

<bb 398>:
  D.42171_777 = smh_90->ianacodes[i_50];
  D.42175_778 = (int) D.42171_777;
  D.42176_779 = already_did[D.42175_778];
  if (D.42176_779 != 0)
    goto <bb 401>;
  else
    goto <bb 399>;

<bb 399>:
  D.42171_780 = smh_90->ianacodes[i_50];
  D.42175_781 = (int) D.42171_780;
  already_did[D.42175_781] = 1;

<bb 400>:
  D.42179_782 = strlen (buf_144);
  D.42180_783 = buf_144 + D.42179_782;
  D.42181_784 = strlen (buf_144);
  D.42182_785 = 65536 - D.42181_784;
  D.42171_786 = smh_90->ianacodes[i_50];
  D.42175_787 = (int) D.42171_786;
  switch_snprintf (D.42180_783, D.42182_785, " %d", D.42175_787);

<bb 401>:
  # DEBUG ptime => NULL
  i_790 = i_50 + 1;
  # DEBUG i => i_790

<bb 402>:
  # i_50 = PHI <0(393), i_790(401)>
  # DEBUG i => i_50
  # DEBUG ptime => NULL
  D.41522_767 = smh_90->mparams;
  D.41587_768 = D.41522_767->num_codecs;
  if (D.41587_768 > i_50)
    goto <bb 394>;
  else
    goto <bb 403>;

<bb 403>:
  # DEBUG ptime => NULL
  D.42186_791 = strlen (buf_144);
  D.42187_792 = buf_144 + D.42186_791;
  D.42188_793 = strlen (buf_144);
  D.42189_794 = 65536 - D.42188_793;
  switch_snprintf (D.42187_792, D.42189_794, "\n");
  D.42135_795 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].codec_negotiated;
  if (D.42135_795 != 0)
    goto <bb 404>;
  else
    goto <bb 431>;

<bb 404>:
  D.42142_796 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  D.42192_797 = D.42142_796->rm_encoding;
  D.42193_798 = strcasecmp (D.42192_797, "VP8");
  if (D.42193_798 == 0)
    goto <bb 405>;
  else
    goto <bb 406>;

<bb 405>:
  D.42142_799 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  D.42149_800 = D.42142_799->pt;
  vp8_801 = (int) D.42149_800;
  # DEBUG vp8 => vp8_801

<bb 406>:
  # vp8_22 = PHI <vp8_27(404), vp8_801(405)>
  # DEBUG vp8 => vp8_22
  D.42142_802 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  D.42192_803 = D.42142_802->rm_encoding;
  D.42196_804 = strcasecmp (D.42192_803, "red");
  if (D.42196_804 == 0)
    goto <bb 407>;
  else
    goto <bb 408>;

<bb 407>:
  D.42142_805 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  D.42149_806 = D.42142_805->pt;
  red_807 = (int) D.42149_806;
  # DEBUG red => red_807

<bb 408>:
  # red_28 = PHI <red_33(406), red_807(407)>
  # DEBUG red => red_28
  # DEBUG D#32 => MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map
  # DEBUG D#31 => D#32->rm_rate
  # DEBUG rate => D#31
  D.42199_810 = strlen (buf_144);
  D.42200_811 = buf_144 + D.42199_810;
  D.42201_812 = strlen (buf_144);
  D.42202_813 = 65536 - D.42201_812;
  D.42142_814 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  D.42149_815 = D.42142_814->pt;
  D.42203_816 = (int) D.42149_815;
  D.42142_817 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  D.42192_818 = D.42142_817->rm_encoding;
  D.42142_819 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  D.42204_820 = D.42142_819->rm_rate;
  switch_snprintf (D.42200_811, D.42202_813, "a=rtpmap:%d %s/%ld\n", D.42203_816, D.42192_818, D.42204_820);
  D.41512_821 = session_72(D)->channel;
  D.42205_822 = switch_channel_test_flag (D.41512_821, 84);
  if (D.42205_822 != 0)
    goto <bb 409>;
  else
    goto <bb 410>;

<bb 409>:
  D.42142_823 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  pass_fmtp_824 = D.42142_823->rm_fmtp;
  # DEBUG pass_fmtp => pass_fmtp_824
  goto <bb 414>;

<bb 410>:
  # DEBUG pass_fmtp => 0B
  D.41512_826 = session_72(D)->channel;
  D.42209_827 = switch_channel_get_partner_uuid (D.41512_826);
  if (D.42209_827 != 0B)
    goto <bb 411>;
  else
    goto <bb 412>;

<bb 411>:
  D.41512_828 = session_72(D)->channel;
  switch_channel_get_variable_partner (D.41512_828, "rtp_video_fmtp");
  # DEBUG of => NULL

<bb 412>:
  if (ov_fmtp_76 != 0B)
    goto <bb 414>;
  else
    goto <bb 413>;

<bb 413>:
  D.41512_832 = session_72(D)->channel;
  pass_fmtp_833 = switch_channel_get_variable_dup (D.41512_832, "rtp_video_fmtp", 1, -1);
  # DEBUG pass_fmtp => pass_fmtp_833

<bb 414>:
  # pass_fmtp_18 = PHI <pass_fmtp_824(409), ov_fmtp_76(412), pass_fmtp_833(413)>
  # DEBUG pass_fmtp => pass_fmtp_18
  if (pass_fmtp_18 != 0B)
    goto <bb 415>;
  else
    goto <bb 416>;

<bb 415>:
  D.42219_834 = strlen (buf_144);
  D.42220_835 = buf_144 + D.42219_834;
  D.42221_836 = strlen (buf_144);
  D.42222_837 = 65536 - D.42221_836;
  D.42142_838 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  D.42149_839 = D.42142_838->pt;
  D.42203_840 = (int) D.42149_839;
  switch_snprintf (D.42220_835, D.42222_837, "a=fmtp:%d %s\n", D.42203_840, pass_fmtp_18);

<bb 416>:
  D.42223_841 = switch_media_handle_test_media_flag (smh_90, 16);
  if (D.42223_841 != 0)
    goto <bb 417>;
  else
    goto <bb 425>;

<bb 417>:
  D.41747_842 = smh_90->sdp_mutex;
  switch_mutex_lock (D.41747_842);
  pmap_843 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  # DEBUG pmap => pmap_843
  goto <bb 422>;

<bb 418>:
  D.42226_845 = pmap_51->pt;
  D.42142_846 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].cur_payload_map;
  D.42149_847 = D.42142_846->pt;
  if (D.42226_845 != D.42149_847)
    goto <bb 419>;
  else
    goto <bb 421>;

<bb 419>:
  D.42229_848 = pmap_51->negotiated;
  if (D.42229_848 != 0)
    goto <bb 420>;
  else
    goto <bb 421>;

<bb 420>:
  D.42232_849 = strlen (buf_144);
  D.42233_850 = buf_144 + D.42232_849;
  D.42234_851 = strlen (buf_144);
  D.42235_852 = 65536 - D.42234_851;
  D.42226_853 = pmap_51->pt;
  D.42236_854 = (int) D.42226_853;
  D.42237_855 = pmap_51->iananame;
  D.42238_856 = pmap_51->rate;
  switch_snprintf (D.42233_850, D.42235_852, "a=rtpmap:%d %s/%ld\n", D.42236_854, D.42237_855, D.42238_856);

<bb 421>:
  pmap_857 = pmap_51->next;
  # DEBUG pmap => pmap_857

<bb 422>:
  # pmap_51 = PHI <pmap_843(417), pmap_857(421)>
  # DEBUG pmap => pmap_51
  if (pmap_51 != 0B)
    goto <bb 423>;
  else
    goto <bb 424>;

<bb 423>:
  D.42240_844 = pmap_51->allocated;
  if (D.42240_844 != 0)
    goto <bb 418>;
  else
    goto <bb 424>;

<bb 424>:
  D.41747_858 = smh_90->sdp_mutex;
  switch_mutex_unlock (D.41747_858);

<bb 425>:
  if (append_video_80 != 0B)
    goto <bb 426>;
  else
    goto <bb 472>;

<bb 426>:
  D.42243_859 = strlen (buf_144);
  D.42244_860 = buf_144 + D.42243_859;
  D.42245_861 = strlen (buf_144);
  D.42246_862 = 65536 - D.42245_861;
  D.42249_863 = *append_video_80;
  if (D.42249_863 != 0)
    goto <bb 427>;
  else
    goto <bb 428>;

<bb 427>:
  D.42252_864 = strlen (append_video_80);
  D.42253_865 = D.42252_864 + -1;
  append_video_866 = append_video_80 + D.42253_865;

<bb 428>:
  # append_video_66 = PHI <append_video_866(427), append_video_80(426)>
  D.42255_868 = *append_video_66;
  if (D.42255_868 == 10)
    goto <bb 430>;
  else
    goto <bb 429>;

<bb 429>:

<bb 430>:
  # iftmp.35_65 = PHI <""(428), "\n"(429)>
  switch_snprintf (D.42244_860, D.42246_862, "%s%s", append_video_80, iftmp.35_65);
  goto <bb 472>;

<bb 431>:
  D.41522_871 = smh_90->mparams;
  D.41587_872 = D.41522_871->num_codecs;
  if (D.41587_872 != 0)
    goto <bb 432>;
  else
    goto <bb 472>;

<bb 432>:
  already_did = {};
  # DEBUG i => 0
  goto <bb 471>;

<bb 433>:
  imp_876 = smh_90->codecs[i_52];
  # DEBUG imp => imp_876
  # DEBUG fmtp => 0B
  D.42262_878 = smh_90->ianacodes[i_52];
  ianacode_879 = (uint32_t) D.42262_878;
  # DEBUG ianacode => ianacode_879
  D.42263_880 = imp_876->codec_type;
  if (D.42263_880 != 1)
    goto <bb 470>;
  else
    goto <bb 434>;

<bb 434>:
  D.41512_881 = session_72(D)->channel;
  D.42266_882 = switch_channel_direction (D.41512_881);
  if (D.42266_882 == 0)
    goto <bb 435>;
  else
    goto <bb 436>;

<bb 435>:
  D.41512_883 = session_72(D)->channel;
  D.42269_884 = switch_channel_test_flag (D.41512_883, 114);
  if (D.42269_884 != 0)
    goto <bb 470>;
  else
    goto <bb 436>;

<bb 436>:
  if (ianacode_879 <= 127)
    goto <bb 437>;
  else
    goto <bb 439>;

<bb 437>:
  D.42274_885 = already_did[ianacode_879];
  if (D.42274_885 != 0)
    goto <bb 470>;
  else
    goto <bb 438>;

<bb 438>:
  already_did[ianacode_879] = 1;

<bb 439>:
  # DEBUG rate => NULL
  D.42279_887 = imp_876->iananame;
  D.42280_888 = imp_876->number_of_channels;
  D.42281_889 = (int) D.42280_888;
  channels_890 = get_channels (D.42279_887, D.42281_889);
  # DEBUG channels => channels_890
  D.42279_891 = imp_876->iananame;
  D.42282_892 = strcasecmp (D.42279_891, "VP8");
  if (D.42282_892 == 0)
    goto <bb 440>;
  else
    goto <bb 441>;

<bb 440>:
  vp8_893 = (int) ianacode_879;
  # DEBUG vp8 => vp8_893

<bb 441>:
  # vp8_23 = PHI <vp8_25(439), vp8_893(440)>
  # DEBUG vp8 => vp8_23
  D.42279_894 = imp_876->iananame;
  D.42285_895 = strcasecmp (D.42279_894, "red");
  if (D.42285_895 == 0)
    goto <bb 442>;
  else
    goto <bb 443>;

<bb 442>:
  red_896 = (int) ianacode_879;
  # DEBUG red => red_896

<bb 443>:
  # red_29 = PHI <red_31(441), red_896(442)>
  # DEBUG red => red_29
  if (channels_890 > 1)
    goto <bb 444>;
  else
    goto <bb 445>;

<bb 444>:
  D.42290_897 = strlen (buf_144);
  D.42291_898 = buf_144 + D.42290_897;
  D.42292_899 = strlen (buf_144);
  D.42293_900 = 65536 - D.42292_899;
  D.42279_901 = imp_876->iananame;
  D.42294_902 = imp_876->samples_per_second;
  switch_snprintf (D.42291_898, D.42293_900, "a=rtpmap:%d %s/%d/%d\n", ianacode_879, D.42279_901, D.42294_902, channels_890);
  goto <bb 446>;

<bb 445>:
  D.42296_903 = strlen (buf_144);
  D.42297_904 = buf_144 + D.42296_903;
  D.42298_905 = strlen (buf_144);
  D.42299_906 = 65536 - D.42298_905;
  D.42279_907 = imp_876->iananame;
  D.42294_908 = imp_876->samples_per_second;
  switch_snprintf (D.42297_904, D.42299_906, "a=rtpmap:%d %s/%d\n", ianacode_879, D.42279_907, D.42294_908);

<bb 446>:
  # DEBUG s => ov_fmtp_76
  if (ov_fmtp_76 == 0B)
    goto <bb 449>;
  else
    goto <bb 447>;

<bb 447>:
  D.48172_1536 = *ov_fmtp_76;
  if (D.48172_1536 == 0)
    goto <bb 449>;
  else
    goto <bb 448>;

<bb 448>:

<bb 449>:
  # D.48171_1537 = PHI <1(446), 1(447), 0(448)>
  if (D.48171_1537 == 0)
    goto <bb 464>;
  else
    goto <bb 450>;

<bb 450>:
  map.33_911 = map;
  if (map.33_911 != 0B)
    goto <bb 451>;
  else
    goto <bb 452>;

<bb 451>:
  map.33_912 = map;
  D.42279_913 = imp_876->iananame;
  fmtp_914 = switch_event_get_header_idx (map.33_912, D.42279_913, -1);
  # DEBUG fmtp => fmtp_914

<bb 452>:
  # fmtp_53 = PHI <0B(450), fmtp_914(451)>
  # DEBUG fmtp => fmtp_53
  D.42306_915 = smh_90->fmtps[i_52];
  if (D.42306_915 != 0B)
    goto <bb 453>;
  else
    goto <bb 454>;

<bb 453>:
  fmtp_916 = smh_90->fmtps[i_52];
  # DEBUG fmtp => fmtp_916

<bb 454>:
  # fmtp_54 = PHI <fmtp_53(452), fmtp_916(453)>
  # DEBUG fmtp => fmtp_54
  # DEBUG s => fmtp_54
  if (fmtp_54 == 0B)
    goto <bb 457>;
  else
    goto <bb 455>;

<bb 455>:
  D.48176_1538 = MEM[(const char *)fmtp_54];
  if (D.48176_1538 == 0)
    goto <bb 457>;
  else
    goto <bb 456>;

<bb 456>:

<bb 457>:
  # D.48175_1539 = PHI <1(454), 1(455), 0(456)>
  if (D.48175_1539 != 0)
    goto <bb 458>;
  else
    goto <bb 459>;

<bb 458>:
  fmtp_918 = imp_876->fmtp;
  # DEBUG fmtp => fmtp_918

<bb 459>:
  # fmtp_55 = PHI <fmtp_54(457), fmtp_918(458)>
  # DEBUG fmtp => fmtp_55
  # DEBUG s => fmtp_55
  if (fmtp_55 == 0B)
    goto <bb 462>;
  else
    goto <bb 460>;

<bb 460>:
  D.48180_1540 = MEM[(const char *)fmtp_55];
  if (D.48180_1540 == 0)
    goto <bb 462>;
  else
    goto <bb 461>;

<bb 461>:

<bb 462>:
  # D.48179_1541 = PHI <1(459), 1(460), 0(461)>
  if (D.48179_1541 != 0)
    goto <bb 463>;
  else
    goto <bb 464>;

<bb 463>:
  # DEBUG fmtp => pass_fmtp_20

<bb 464>:
  # fmtp_56 = PHI <ov_fmtp_76(449), fmtp_55(462), pass_fmtp_20(463)>
  # DEBUG fmtp => fmtp_56
  # DEBUG s => fmtp_56
  if (fmtp_56 == 0B)
    goto <bb 467>;
  else
    goto <bb 465>;

<bb 465>:
  D.48184_1542 = MEM[(const char *)fmtp_56];
  if (D.48184_1542 == 0)
    goto <bb 467>;
  else
    goto <bb 466>;

<bb 466>:

<bb 467>:
  # D.48183_1543 = PHI <1(464), 1(465), 0(466)>
  if (D.48183_1543 == 0)
    goto <bb 468>;
  else
    goto <bb 470>;

<bb 468>:
  D.42318_922 = strcasecmp (fmtp_56, "_blank_");
  if (D.42318_922 != 0)
    goto <bb 469>;
  else
    goto <bb 470>;

<bb 469>:
  D.42321_923 = strlen (buf_144);
  D.42322_924 = buf_144 + D.42321_923;
  D.42323_925 = strlen (buf_144);
  D.42324_926 = 65536 - D.42323_925;
  switch_snprintf (D.42322_924, D.42324_926, "a=fmtp:%d %s\n", ianacode_879, fmtp_56);

<bb 470>:
  # vp8_24 = PHI <vp8_25(433), vp8_25(435), vp8_25(437), vp8_23(467), vp8_23(468), vp8_23(469)>
  # red_30 = PHI <red_31(433), red_31(435), red_31(437), red_29(467), red_29(468), red_29(469)>
  # DEBUG red => red_30
  # DEBUG vp8 => vp8_24
  # DEBUG rate => NULL
  i_927 = i_52 + 1;
  # DEBUG i => i_927

<bb 471>:
  # vp8_25 = PHI <vp8_27(432), vp8_24(470)>
  # red_31 = PHI <red_33(432), red_30(470)>
  # i_52 = PHI <0(432), i_927(470)>
  # DEBUG i => i_52
  # DEBUG red => red_31
  # DEBUG vp8 => vp8_25
  # DEBUG rate => NULL
  D.41522_874 = smh_90->mparams;
  D.41587_875 = D.41522_874->num_codecs;
  if (D.41587_875 > i_52)
    goto <bb 433>;
  else
    goto <bb 472>;

<bb 472>:
  # pass_fmtp_19 = PHI <pass_fmtp_18(430), pass_fmtp_20(431), pass_fmtp_20(471), pass_fmtp_18(425)>
  # vp8_26 = PHI <vp8_22(430), vp8_27(431), vp8_25(471), vp8_22(425)>
  # red_32 = PHI <red_28(430), red_33(431), red_31(471), red_28(425)>
  # DEBUG red => red_32
  # DEBUG vp8 => vp8_26
  # DEBUG pass_fmtp => pass_fmtp_19
  # DEBUG rate => NULL
  if (is_outbound_89 != 0)
    goto <bb 474>;
  else
    goto <bb 473>;

<bb 473>:
  D.41512_928 = session_72(D)->channel;
  D.42328_929 = switch_channel_test_flag (D.41512_928, 84);
  if (D.42328_929 != 0)
    goto <bb 474>;
  else
    goto <bb 476>;

<bb 474>:
  D.41534_930 = smh_90->session;
  D.41535_931 = D.41534_930->channel;
  D.42329_932 = switch_channel_test_flag (D.41535_931, 109);
  if (D.42329_932 != 0)
    goto <bb 475>;
  else
    goto <bb 476>;

<bb 475>:
  generate_local_fingerprint (smh_90, 1);

<bb 476>:
  D.42332_933 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_dtls_fingerprint.type;
  # DEBUG s => D.42332_933
  if (D.42332_933 == 0B)
    goto <bb 479>;
  else
    goto <bb 477>;

<bb 477>:
  D.48188_1544 = MEM[(const char *)D.42332_933];
  if (D.48188_1544 == 0)
    goto <bb 479>;
  else
    goto <bb 478>;

<bb 478>:

<bb 479>:
  # D.48187_1545 = PHI <1(476), 1(477), 0(478)>
  if (D.48187_1545 == 0)
    goto <bb 480>;
  else
    goto <bb 481>;

<bb 480>:
  D.42336_935 = strlen (buf_144);
  D.42337_936 = buf_144 + D.42336_935;
  D.42338_937 = strlen (buf_144);
  D.42339_938 = 65536 - D.42338_937;
  D.42332_939 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_dtls_fingerprint.type;
  D.42340_940 = &MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_dtls_fingerprint.str;
  switch_snprintf (D.42337_936, D.42339_938, "a=fingerprint:%s %s\n", D.42332_939, D.42340_940);

<bb 481>:
  D.41522_941 = smh_90->mparams;
  D.41527_942 = D.41522_941->rtcp_video_interval_msec;
  if (D.41527_942 != 0B)
    goto <bb 482>;
  else
    goto <bb 485>;

<bb 482>:
  D.42343_943 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].rtcp_mux;
  if (D.42343_943 > 0)
    goto <bb 483>;
  else
    goto <bb 484>;

<bb 483>:
  D.42346_944 = strlen (buf_144);
  D.42347_945 = buf_144 + D.42346_944;
  D.42348_946 = strlen (buf_144);
  D.42349_947 = 65536 - D.42348_946;
  switch_snprintf (D.42347_945, D.42349_947, "a=rtcp-mux\n");
  D.42350_948 = strlen (buf_144);
  D.42351_949 = buf_144 + D.42350_948;
  D.42352_950 = strlen (buf_144);
  D.42353_951 = 65536 - D.42352_950;
  switch_snprintf (D.42351_949, D.42353_951, "a=rtcp:%d IN %s %s\n", v_port_721, family_59, ip_1);
  goto <bb 485>;

<bb 484>:
  D.42355_952 = strlen (buf_144);
  D.42356_953 = buf_144 + D.42355_952;
  D.42357_954 = strlen (buf_144);
  D.42358_955 = 65536 - D.42357_954;
  D.42359_956 = v_port_721 + 1;
  switch_snprintf (D.42356_953, D.42358_955, "a=rtcp:%d IN %s %s\n", D.42359_956, family_59, ip_1);

<bb 485>:
  D.42360_957 = BIT_FIELD_REF <MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B], 16, 91280>;
  D.42361_958 = D.42360_957 & 65535;
  if (D.42361_958 != 0)
    goto <bb 486>;
  else
    goto <bb 491>;

<bb 486>:
  D.42364_959 = strlen (buf_144);
  D.42365_960 = buf_144 + D.42364_959;
  D.42366_961 = strlen (buf_144);
  D.42367_962 = 65536 - D.42366_961;
  D.42369_963 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].fir;
  if (D.42369_963 != 0)
    goto <bb 488>;
  else
    goto <bb 487>;

<bb 487>:

<bb 488>:
  # iftmp.37_67 = PHI <"fir "(486), ""(487)>
  D.42374_966 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].pli;
  if (D.42374_966 != 0)
    goto <bb 490>;
  else
    goto <bb 489>;

<bb 489>:

<bb 490>:
  # iftmp.38_68 = PHI <"pli"(488), ""(489)>
  switch_snprintf (D.42365_960, D.42367_962, "a=rtcp-fb:* %s%s\n", iftmp.37_67, iftmp.38_68);

<bb 491>:
  D.42378_969 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].ice_out.cands[0][0].ready;
  if (D.42378_969 != 0)
    goto <bb 492>;
  else
    goto <bb 525>;

<bb 492>:
  tmp1 = "";
  tmp2 = "";
  # DEBUG c1 => 659136
  # DEBUG c2 => 659134
  # DEBUG c3 => 659126
  # DEBUG c4 => 659124
  # DEBUG bw => 256
  tmp1[10] = 0;
  tmp2[10] = 0;
  switch_stun_random_string (&tmp1, 10, "0123456789");
  switch_stun_random_string (&tmp2, 10, "0123456789");
  # DEBUG D#26 => &MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].ice_out
  # DEBUG ice_out => D#26
  D.41534_976 = smh_90->session;
  D.41535_977 = D.41534_976->channel;
  vbw_978 = switch_channel_get_variable_dup (D.41535_977, "rtp_video_max_bandwidth", 1, -1);
  # DEBUG vbw => vbw_978
  if (vbw_978 != 0B)
    goto <bb 493>;
  else
    goto <bb 494>;

<bb 493>:
  # DEBUG __nptr => vbw_978
  v_1546 = strtol (vbw_978, 0B, 10);
  # DEBUG v => NULL
  # DEBUG bw => v_1546

<bb 494>:
  # bw_57 = PHI <256(492), v_1546(493)>
  # DEBUG bw => bw_57
  if (bw_57 > 0)
    goto <bb 495>;
  else
    goto <bb 496>;

<bb 495>:
  D.42385_981 = strlen (buf_144);
  D.42386_982 = buf_144 + D.42385_981;
  D.42387_983 = strlen (buf_144);
  D.42388_984 = 65536 - D.42387_983;
  switch_snprintf (D.42386_982, D.42388_984, "b=AS:%d\n", bw_57);

<bb 496>:
  if (vp8_26 != 0)
    goto <bb 497>;
  else
    goto <bb 499>;

<bb 497>:
  D.41512_985 = session_72(D)->channel;
  D.42391_986 = switch_channel_test_flag (D.41512_985, 106);
  if (D.42391_986 != 0)
    goto <bb 498>;
  else
    goto <bb 499>;

<bb 498>:
  D.42394_987 = strlen (buf_144);
  D.42395_988 = buf_144 + D.42394_987;
  D.42396_989 = strlen (buf_144);
  D.42397_990 = 65536 - D.42396_989;
  switch_snprintf (D.42395_988, D.42397_990, "a=rtcp-fb:%d ccm fir\n", vp8_26);

<bb 499>:
  if (red_32 != 0)
    goto <bb 500>;
  else
    goto <bb 501>;

<bb 500>:
  D.42400_991 = strlen (buf_144);
  D.42401_992 = buf_144 + D.42400_991;
  D.42402_993 = strlen (buf_144);
  D.42403_994 = 65536 - D.42402_993;
  switch_snprintf (D.42401_992, D.42403_994, "a=rtcp-fb:%d nack\n", vp8_26);

<bb 501>:
  D.42404_995 = strlen (buf_144);
  D.42405_996 = buf_144 + D.42404_995;
  D.42406_997 = strlen (buf_144);
  D.42407_998 = 65536 - D.42406_997;
  D.42408_999 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].ssrc;
  D.41935_1000 = smh_90->cname;
  switch_snprintf (D.42405_996, D.42407_998, "a=ssrc:%u cname:%s\n", D.42408_999, D.41935_1000);
  D.42409_1001 = strlen (buf_144);
  D.42410_1002 = buf_144 + D.42409_1001;
  D.42411_1003 = strlen (buf_144);
  D.42412_1004 = 65536 - D.42411_1003;
  D.42408_1005 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].ssrc;
  D.41719_1006 = smh_90->msid;
  switch_snprintf (D.42410_1002, D.42412_1004, "a=ssrc:%u msid:%s v0\n", D.42408_1005, D.41719_1006);
  D.42413_1007 = strlen (buf_144);
  D.42414_1008 = buf_144 + D.42413_1007;
  D.42415_1009 = strlen (buf_144);
  D.42416_1010 = 65536 - D.42415_1009;
  D.42408_1011 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].ssrc;
  D.41719_1012 = smh_90->msid;
  switch_snprintf (D.42414_1008, D.42416_1010, "a=ssrc:%u mslabel:%s\n", D.42408_1011, D.41719_1012);
  D.42417_1013 = strlen (buf_144);
  D.42418_1014 = buf_144 + D.42417_1013;
  D.42419_1015 = strlen (buf_144);
  D.42420_1016 = 65536 - D.42419_1015;
  D.42408_1017 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].ssrc;
  D.41719_1018 = smh_90->msid;
  switch_snprintf (D.42418_1014, D.42420_1016, "a=ssrc:%u label:%sv0\n", D.42408_1017, D.41719_1018);
  D.42421_1019 = strlen (buf_144);
  D.42422_1020 = buf_144 + D.42421_1019;
  D.42423_1021 = strlen (buf_144);
  D.42424_1022 = 65536 - D.42423_1021;
  D.41952_1023 = MEM[(struct ice_t *)smh_90 + 17896B].ufrag;
  switch_snprintf (D.42422_1020, D.42424_1022, "a=ice-ufrag:%s\n", D.41952_1023);
  D.42425_1024 = strlen (buf_144);
  D.42426_1025 = buf_144 + D.42425_1024;
  D.42427_1026 = strlen (buf_144);
  D.42428_1027 = 65536 - D.42427_1026;
  D.41957_1028 = MEM[(struct ice_t *)smh_90 + 17896B].pwd;
  switch_snprintf (D.42426_1025, D.42428_1027, "a=ice-pwd:%s\n", D.41957_1028);
  D.42429_1029 = strlen (buf_144);
  D.42430_1030 = buf_144 + D.42429_1029;
  D.42431_1031 = strlen (buf_144);
  D.42432_1032 = 65536 - D.42431_1031;
  D.41962_1033 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].transport;
  D.41963_1034 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].con_addr;
  D.41964_1035 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].con_port;
  D.41965_1036 = (int) D.41964_1035;
  switch_snprintf (D.42430_1030, D.42432_1032, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_1033, 659136, D.41963_1034, D.41965_1036);
  D.42433_1037 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_sdp_ip;
  # DEBUG s => D.42433_1037
  if (D.42433_1037 == 0B)
    goto <bb 504>;
  else
    goto <bb 502>;

<bb 502>:
  D.48195_1547 = MEM[(const char *)D.42433_1037];
  if (D.48195_1547 == 0)
    goto <bb 504>;
  else
    goto <bb 503>;

<bb 503>:

<bb 504>:
  # D.48194_1548 = PHI <1(501), 1(502), 0(503)>
  if (D.48194_1548 == 0)
    goto <bb 505>;
  else
    goto <bb 512>;

<bb 505>:
  D.41963_1039 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].con_addr;
  # DEBUG s => D.41963_1039
  if (D.41963_1039 == 0B)
    goto <bb 508>;
  else
    goto <bb 506>;

<bb 506>:
  D.48199_1549 = MEM[(const char *)D.41963_1039];
  if (D.48199_1549 == 0)
    goto <bb 508>;
  else
    goto <bb 507>;

<bb 507>:

<bb 508>:
  # D.48198_1550 = PHI <1(505), 1(506), 0(507)>
  if (D.48198_1550 == 0)
    goto <bb 509>;
  else
    goto <bb 512>;

<bb 509>:
  D.42433_1041 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_sdp_ip;
  D.41963_1042 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].con_addr;
  D.39666_1043 = __builtin_strcmp (D.42433_1041, D.41963_1042);
  if (D.39666_1043 != 0)
    goto <bb 510>;
  else
    goto <bb 512>;

<bb 510>:
  D.42106_1044 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_sdp_port;
  D.41964_1045 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].con_port;
  if (D.42106_1044 != D.41964_1045)
    goto <bb 511>;
  else
    goto <bb 512>;

<bb 511>:
  D.42444_1046 = strlen (buf_144);
  D.42445_1047 = buf_144 + D.42444_1046;
  D.42446_1048 = strlen (buf_144);
  D.42447_1049 = 65536 - D.42446_1048;
  D.41962_1050 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].transport;
  D.41963_1051 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].con_addr;
  D.41964_1052 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].con_port;
  D.41965_1053 = (int) D.41964_1052;
  D.42433_1054 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_sdp_ip;
  D.42106_1055 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_sdp_port;
  D.42448_1056 = (int) D.42106_1055;
  switch_snprintf (D.42445_1047, D.42447_1049, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_1050, 659126, D.41963_1051, D.41965_1053, D.42433_1054, D.42448_1056);

<bb 512>:
  D.42343_1057 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].rtcp_mux;
  D.42451_1058 = D.42343_1057 <= 0;
  D.41986_1059 = is_outbound_89 != 0;
  D.42452_1060 = D.42451_1058 || D.41986_1059;
  if (D.42452_1060 != 0)
    goto <bb 514>;
  else
    goto <bb 513>;

<bb 513>:
  D.41512_1061 = session_72(D)->channel;
  D.42454_1062 = switch_channel_test_flag (D.41512_1061, 84);
  if (D.42454_1062 != 0)
    goto <bb 514>;
  else
    goto <bb 525>;

<bb 514>:
  D.42455_1063 = strlen (buf_144);
  D.42456_1064 = buf_144 + D.42455_1063;
  D.42457_1065 = strlen (buf_144);
  D.42458_1066 = 65536 - D.42457_1065;
  D.41962_1067 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].transport;
  D.41963_1068 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].con_addr;
  D.41964_1069 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].con_port;
  D.41965_1070 = (int) D.41964_1069;
  D.42343_1071 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].rtcp_mux;
  D.42459_1072 = D.42343_1071 <= 0;
  D.42460_1073 = D.41965_1070 + D.42459_1072;
  switch_snprintf (D.42456_1064, D.42458_1066, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_1067, 659134, D.41963_1068, D.42460_1073);
  D.42433_1074 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_sdp_ip;
  # DEBUG s => D.42433_1074
  if (D.42433_1074 == 0B)
    goto <bb 517>;
  else
    goto <bb 515>;

<bb 515>:
  D.48203_1551 = MEM[(const char *)D.42433_1074];
  if (D.48203_1551 == 0)
    goto <bb 517>;
  else
    goto <bb 516>;

<bb 516>:

<bb 517>:
  # D.48202_1552 = PHI <1(514), 1(515), 0(516)>
  if (D.48202_1552 == 0)
    goto <bb 518>;
  else
    goto <bb 525>;

<bb 518>:
  D.42464_1076 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][1].con_addr;
  # DEBUG s => D.42464_1076
  if (D.42464_1076 == 0B)
    goto <bb 521>;
  else
    goto <bb 519>;

<bb 519>:
  D.48207_1553 = MEM[(const char *)D.42464_1076];
  if (D.48207_1553 == 0)
    goto <bb 521>;
  else
    goto <bb 520>;

<bb 520>:

<bb 521>:
  # D.48206_1554 = PHI <1(518), 1(519), 0(520)>
  if (D.48206_1554 == 0)
    goto <bb 522>;
  else
    goto <bb 525>;

<bb 522>:
  D.42433_1078 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_sdp_ip;
  D.42464_1079 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][1].con_addr;
  D.39675_1080 = __builtin_strcmp (D.42433_1078, D.42464_1079);
  if (D.39675_1080 != 0)
    goto <bb 523>;
  else
    goto <bb 525>;

<bb 523>:
  D.42106_1081 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_sdp_port;
  D.42470_1082 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][1].con_port;
  if (D.42106_1081 != D.42470_1082)
    goto <bb 524>;
  else
    goto <bb 525>;

<bb 524>:
  D.42473_1083 = strlen (buf_144);
  D.42474_1084 = buf_144 + D.42473_1083;
  D.42475_1085 = strlen (buf_144);
  D.42476_1086 = 65536 - D.42475_1085;
  D.41962_1087 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].transport;
  D.41963_1088 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].con_addr;
  D.41964_1089 = MEM[(struct ice_t *)smh_90 + 17896B].cands[0][0].con_port;
  D.41965_1090 = (int) D.41964_1089;
  D.42343_1091 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].rtcp_mux;
  D.42459_1092 = D.42343_1091 <= 0;
  D.42460_1093 = D.41965_1090 + D.42459_1092;
  D.42433_1094 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_sdp_ip;
  D.42106_1095 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].local_sdp_port;
  D.42448_1096 = (int) D.42106_1095;
  D.42343_1097 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].rtcp_mux;
  D.42459_1098 = D.42343_1097 <= 0;
  D.42477_1099 = D.42448_1096 + D.42459_1098;
  switch_snprintf (D.42474_1084, D.42476_1086, "a=candidate:%s 2 %s %u %s %d typ srflx generation 0\n", &tmp2, D.41962_1087, 659124, D.41963_1088, D.42460_1093, D.42433_1094, D.42477_1099);

<bb 525>:
  if (loops_48 == 0)
    goto <bb 526>;
  else
    goto <bb 538>;

<bb 526>:
  D.41512_1100 = session_72(D)->channel;
  D.42480_1101 = switch_channel_test_flag (D.41512_1100, 92);
  if (D.42480_1101 != 0)
    goto <bb 527>;
  else
    goto <bb 538>;

<bb 527>:
  D.41512_1102 = session_72(D)->channel;
  D.42483_1103 = switch_channel_test_flag (D.41512_1102, 109);
  if (D.42483_1103 == 0)
    goto <bb 528>;
  else
    goto <bb 538>;

<bb 528>:
  i_1579 = 0;
  goto <bb 537>;

<bb 529>:
  D.42486_1106 = smh_90->crypto_suite_order[i_58];
  j_1107 = SUITES[D.42486_1106].type;
  # DEBUG j => j_1107
  D.41736_1108 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].crypto_type;
  if (D.41736_1108 == j_1107)
    goto <bb 531>;
  else
    goto <bb 530>;

<bb 530>:
  D.41736_1109 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].crypto_type;
  if (D.41736_1109 == 9)
    goto <bb 531>;
  else
    goto <bb 536>;

<bb 531>:
  D.42490_1110 = MEM[(struct switch_rtp_engine_t *)smh_90 + 80B].ssec[j_1107].local_crypto_key;
  # DEBUG s => D.42490_1110
  if (D.42490_1110 == 0B)
    goto <bb 534>;
  else
    goto <bb 532>;

<bb 532>:
  D.48211_1555 = MEM[(const char *)D.42490_1110];
  if (D.48211_1555 == 0)
    goto <bb 534>;
  else
    goto <bb 533>;

<bb 533>:

<bb 534>:
  # D.48210_1556 = PHI <1(531), 1(532), 0(533)>
  if (D.48210_1556 == 0)
    goto <bb 535>;
  else
    goto <bb 536>;

<bb 535>:
  D.42494_1112 = strlen (buf_144);
  D.42495_1113 = buf_144 + D.42494_1112;
  D.42496_1114 = strlen (buf_144);
  D.42497_1115 = 65536 - D.42496_1114;
  D.42498_1116 = MEM[(struct switch_rtp_engine_t *)smh_90 + 11496B].ssec[j_1107].local_crypto_key;
  switch_snprintf (D.42495_1113, D.42497_1115, "a=crypto:%s\n", D.42498_1116);

<bb 536>:
  i_1117 = i_58 + 1;
  # DEBUG i => i_1117

<bb 537>:
  # i_58 = PHI <0(528), i_1117(536)>
  # DEBUG i => i_58
  D.42486_1105 = smh_90->crypto_suite_order[i_58];
  if (D.42486_1105 != 9)
    goto <bb 529>;
  else
    goto <bb 538>;

<bb 538>:
  if (local_sdp_video_zrtp_hash_84 != 0B)
    goto <bb 539>;
  else
    goto <bb 540>;

<bb 539>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 6892, session_72(D), 7, "Adding video a=zrtp-hash:%s\n", local_sdp_video_zrtp_hash_84);
  D.42501_1118 = strlen (buf_144);
  D.42502_1119 = buf_144 + D.42501_1118;
  D.42503_1120 = strlen (buf_144);
  D.42504_1121 = 65536 - D.42503_1120;
  switch_snprintf (D.42502_1119, D.42504_1121, "a=zrtp-hash:%s\n", local_sdp_video_zrtp_hash_84);

<bb 540>:
  D.41512_1122 = session_72(D)->channel;
  D.42505_1123 = switch_channel_test_flag (D.41512_1122, 109);
  if (D.42505_1123 != 0)
    goto <bb 546>;
  else
    goto <bb 541>;

<bb 541>:
  D.41512_1124 = session_72(D)->channel;
  D.42507_1125 = switch_channel_test_flag (D.41512_1124, 92);
  if (D.42507_1125 == 0)
    goto <bb 546>;
  else
    goto <bb 542>;

<bb 542>:
  D.42058_1126 = smh_90->crypto_mode;
  if (D.42058_1126 == 1)
    goto <bb 546>;
  else
    goto <bb 543>;

<bb 543>:
  D.42058_1127 = smh_90->crypto_mode;
  if (D.42058_1127 == 2)
    goto <bb 546>;
  else
    goto <bb 544>;

<bb 544>:
  loops_1128 = loops_48 + 1;
  # DEBUG loops => loops_1128

<bb 545>:
  # pass_fmtp_20 = PHI <pass_fmtp_1164(374), pass_fmtp_19(544)>
  # vp8_27 = PHI <0(374), vp8_26(544)>
  # red_33 = PHI <0(374), red_32(544)>
  # loops_48 = PHI <0(374), loops_1128(544)>
  # DEBUG loops => loops_48
  # DEBUG red => red_33
  # DEBUG vp8 => vp8_27
  # DEBUG pass_fmtp => pass_fmtp_20
  # DEBUG rate => NULL
  # DEBUG ptime => NULL
  if (loops_48 <= 1)
    goto <bb 375>;
  else
    goto <bb 546>;

<bb 546>:
  map.33_1129 = map;
  if (map.33_1129 != 0B)
    goto <bb 547>;
  else
    goto <bb 548>;

<bb 547>:
  switch_event_destroy (&map);

<bb 548>:
  ptmap.39_1130 = ptmap;
  if (ptmap.39_1130 != 0B)
    goto <bb 549>;
  else
    goto <bb 550>;

<bb 549>:
  switch_event_destroy (&ptmap);

<bb 550>:
  switch_core_media_set_local_sdp (session_72(D), buf_144, 1);
  if (buf_144 != 0B)
    goto <bb 551>;
  else
    goto <bb 552>;

<bb 551>:
  free (buf_144);
  # DEBUG buf => 0B

<bb 552>:
  return;

}



;; Function switch_core_media_absorb_sdp (switch_core_media_absorb_sdp)

switch_core_media_absorb_sdp (struct switch_core_session_t * session)
{
  struct sdp_connection_t * connection;
  struct sdp_media_t * m;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  static const char __func__[29] = "switch_core_media_absorb_sdp";
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_absorb_sdp";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  const char * sdp_str;
  switch_port_t D.41509;
  char * D.41506;
  short unsigned int D.41505;
  char * D.41504;
  const char * D.41503;
  struct sdp_connection_t * D.41498;
  long unsigned int D.41497;
  sdp_media_e D.41495;
  int D.41488;
  size_t D.41487;
  struct switch_channel_t * D.41484;

<bb 2>:
  if (session_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 6930, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_4 = session_3(D)->media_handle;
  # DEBUG smh => smh_4
  if (smh_4 == 0B)
    goto <bb 22>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#33 => &smh_4->engines
  # DEBUG a_engine => D#33
  D.41484_6 = session_3(D)->channel;
  sdp_str_7 = switch_channel_get_variable_dup (D.41484_6, "switch_m_sdp", 1, -1);
  # DEBUG sdp_str => sdp_str_7
  if (sdp_str_7 != 0B)
    goto <bb 6>;
  else
    goto <bb 22>;

<bb 6>:
  D.41487_8 = strlen (sdp_str_7);
  D.41488_9 = (int) D.41487_8;
  parser_10 = sdp_parse (0B, sdp_str_7, D.41488_9, 0);
  # DEBUG parser => parser_10
  if (parser_10 != 0B)
    goto <bb 7>;
  else
    goto <bb 21>;

<bb 7>:
  sdp_11 = sdp_session (parser_10);
  # DEBUG sdp => sdp_11
  if (sdp_11 != 0B)
    goto <bb 8>;
  else
    goto <bb 20>;

<bb 8>:
  m_12 = sdp_11->sdp_media;
  # DEBUG m => m_12
  goto <bb 19>;

<bb 9>:
  D.41495_13 = m_1->m_type;
  if (D.41495_13 != 2)
    goto <bb 11>;
  else
    goto <bb 10>;

<bb 10>:
  D.41497_14 = m_1->m_port;
  if (D.41497_14 == 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  goto <bb 18>;

<bb 12>:
  connection_15 = sdp_11->sdp_connection;
  # DEBUG connection => connection_15
  D.41498_16 = m_1->m_connections;
  if (D.41498_16 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  connection_17 = m_1->m_connections;
  # DEBUG connection => connection_17

<bb 14>:
  # connection_2 = PHI <connection_15(12), connection_17(13)>
  # DEBUG connection => connection_2
  if (connection_2 != 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.41503_18 = connection_2->c_address;
  D.41504_19 = switch_core_perform_session_strdup (session_3(D), D.41503_18, "src/switch_core_media.c", &__func__, 6957);
  MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].proxy_sdp_ip = D.41504_19;

<bb 16>:
  D.41497_20 = m_1->m_port;
  D.41505_21 = (short unsigned int) D.41497_20;
  MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].proxy_sdp_port = D.41505_21;
  D.41506_22 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].proxy_sdp_ip;
  if (D.41506_22 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.41509_23 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].proxy_sdp_port;
  if (D.41509_23 != 0)
    goto <bb 20>;
  else
    goto <bb 18>;

<bb 18>:
  m_24 = m_1->m_next;
  # DEBUG m => m_24

<bb 19>:
  # m_1 = PHI <m_12(8), m_24(18)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 9>;
  else
    goto <bb 20>;

<bb 20>:
  sdp_parser_free (parser_10);

<bb 21>:
  switch_core_media_set_local_sdp (session_3(D), sdp_str_7, 1);

<bb 22>:
  return;

}



;; Function switch_core_media_set_udptl_image_sdp (switch_core_media_set_udptl_image_sdp)

switch_core_media_set_udptl_image_sdp (struct switch_core_session_t * session, struct switch_t38_options_t * t38_options, int insist)
{
  int D.50820;
  switch_bool_t D.50819;
  int D.50818;
  int D.50817;
  int D.50816;
  int D.50815;
  int D.50814;
  int D.50813;
  int D.50812;
  static const char __func__[38] = "switch_core_media_set_udptl_image_sdp";
  static const char __PRETTY_FUNCTION__[38] = "switch_core_media_set_udptl_image_sdp";
  struct switch_media_handle_t * smh;
  int broken_boolean;
  const char * var;
  const char * jbig_off;
  const char * jbig_on;
  const char * mmr_off;
  const char * mmr_on;
  const char * bit_removal_off;
  const char * bit_removal_on;
  const char * username;
  const char * family;
  uint32_t port;
  const char * ip;
  char max_data[128];
  char max_buf[128];
  char buf[2048];
  char * D.41478;
  char * D.41477;
  unsigned int D.41476;
  size_t D.41475;
  char * D.41474;
  size_t D.41473;
  const char * D.41470;
  const char * D.41469;
  switch_bool_t D.41465;
  switch_bool_t D.41460;
  switch_bool_t D.41455;
  uint32_t D.41453;
  int D.41452;
  uint16_t D.41451;
  unsigned int D.41450;
  size_t D.41449;
  char * D.41448;
  size_t D.41447;
  uint32_t D.41442;
  uint32_t D.41439;
  char * D.41435;
  uint32_t D.41433;
  uint32_t D.41430;
  unsigned int D.41429;
  unsigned int D.41428;
  time_t D.41427;
  uint32_t D.41424;
  char * D.41423;
  switch_port_t D.41420;
  switch_port_t D.41417;
  char * D.41414;
  struct switch_channel_t * D.41407;
  struct switch_core_media_params_t * D.41406;
  uint16_t D.41405;

<bb 2>:
  buf = "";
  max_buf = "";
  max_data = "";
  # DEBUG family => "IP4"
  # DEBUG bit_removal_on => "a=T38FaxFillBitRemoval\n"
  # DEBUG bit_removal_off => ""
  # DEBUG mmr_on => "a=T38FaxTranscodingMMR\n"
  # DEBUG mmr_off => ""
  # DEBUG jbig_on => "a=T38FaxTranscodingJBIG\n"
  # DEBUG jbig_off => ""
  if (session_20(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 6995, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_21 = session_20(D)->media_handle;
  # DEBUG smh => smh_21
  if (smh_21 == 0B)
    goto <bb 49>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#34 => &smh_21->engines
  # DEBUG a_engine => D#34
  if (t38_options_23(D) == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  __assert_fail ("t38_options", "src/switch_core_media.c", 7004, &__PRETTY_FUNCTION__);

<bb 7>:
  ip_24 = t38_options_23(D)->local_ip;
  # DEBUG ip => ip_24
  D.41405_25 = t38_options_23(D)->local_port;
  port_26 = (uint32_t) D.41405_25;
  # DEBUG port => port_26
  D.41406_27 = smh_21->mparams;
  username_28 = D.41406_27->sdp_username;
  # DEBUG username => username_28
  D.41407_29 = session_20(D)->channel;
  var_30 = switch_channel_get_variable_dup (D.41407_29, "t38_broken_boolean", 1, -1);
  # DEBUG var => var_30
  # DEBUG expr => var_30
  if (var_30 != 0B)
    goto <bb 8>;
  else
    goto <bb 17>;

<bb 8>:
  D.50812_120 = strcasecmp (var_30, "yes");
  if (D.50812_120 == 0)
    goto <bb 18>;
  else
    goto <bb 9>;

<bb 9>:
  D.50813_121 = strcasecmp (var_30, "on");
  if (D.50813_121 == 0)
    goto <bb 18>;
  else
    goto <bb 10>;

<bb 10>:
  D.50814_122 = strcasecmp (var_30, "true");
  if (D.50814_122 == 0)
    goto <bb 18>;
  else
    goto <bb 11>;

<bb 11>:
  D.50815_123 = strcasecmp (var_30, "t");
  if (D.50815_123 == 0)
    goto <bb 18>;
  else
    goto <bb 12>;

<bb 12>:
  D.50816_124 = strcasecmp (var_30, "enabled");
  if (D.50816_124 == 0)
    goto <bb 18>;
  else
    goto <bb 13>;

<bb 13>:
  D.50817_125 = strcasecmp (var_30, "active");
  if (D.50817_125 == 0)
    goto <bb 18>;
  else
    goto <bb 14>;

<bb 14>:
  D.50818_126 = strcasecmp (var_30, "allow");
  if (D.50818_126 == 0)
    goto <bb 18>;
  else
    goto <bb 15>;

<bb 15>:
  D.50819_127 = switch_is_number (var_30);
  if (D.50819_127 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  # DEBUG __nptr => var_30
  D.50820_128 = strtol (var_30, 0B, 10);
  if (D.50820_128 != 0)
    goto <bb 18>;
  else
    goto <bb 17>;

<bb 17>:

<bb 18>:
  # broken_boolean_129 = PHI <1(8), 1(9), 1(10), 1(11), 1(12), 1(13), 1(14), 1(16), 0(17)>
  broken_boolean_134 = broken_boolean_129;
  broken_boolean_31 = broken_boolean_134;
  # DEBUG broken_boolean => NULL
  if (ip_24 == 0B)
    goto <bb 19>;
  else
    goto <bb 21>;

<bb 19>:
  ip_32 = MEM[(struct switch_rtp_engine_t *)smh_21 + 80B].adv_sdp_ip;
  # DEBUG ip => ip_32
  if (ip_32 == 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  ip_33 = MEM[(struct switch_rtp_engine_t *)smh_21 + 80B].proxy_sdp_ip;
  # DEBUG ip => ip_33

<bb 21>:
  # ip_1 = PHI <ip_24(18), ip_32(19), ip_33(20)>
  # DEBUG ip => ip_1
  if (ip_1 == 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.41407_34 = session_20(D)->channel;
  D.41414_35 = switch_channel_get_name (D.41407_34);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 7022, 0B, 2, "%s NO IP!\n", D.41414_35);
  goto <bb 49>;

<bb 23>:
  if (port_26 == 0)
    goto <bb 24>;
  else
    goto <bb 26>;

<bb 24>:
  D.41417_36 = MEM[(struct switch_rtp_engine_t *)smh_21 + 80B].adv_sdp_port;
  port_37 = (uint32_t) D.41417_36;
  # DEBUG port => port_37
  if (port_37 == 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.41420_38 = MEM[(struct switch_rtp_engine_t *)smh_21 + 80B].proxy_sdp_port;
  port_39 = (uint32_t) D.41420_38;
  # DEBUG port => port_39

<bb 26>:
  # port_2 = PHI <port_26(23), port_37(24), port_39(25)>
  # DEBUG port => port_2
  if (port_2 == 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.41407_40 = session_20(D)->channel;
  D.41423_41 = switch_channel_get_name (D.41407_40);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 7033, 0B, 2, "%s NO PORT!\n", D.41423_41);
  goto <bb 49>;

<bb 28>:
  D.41424_42 = smh_21->owner_id;
  if (D.41424_42 == 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  D.41427_43 = switch_epoch_time_now (0B);
  D.41428_44 = (unsigned int) D.41427_43;
  D.41429_45 = D.41428_44 - port_2;
  smh_21->owner_id = D.41429_45;

<bb 30>:
  D.41430_46 = smh_21->session_id;
  if (D.41430_46 == 0)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  D.41424_47 = smh_21->owner_id;
  smh_21->session_id = D.41424_47;

<bb 32>:
  D.41430_48 = smh_21->session_id;
  D.41433_49 = D.41430_48 + 1;
  smh_21->session_id = D.41433_49;
  D.41435_50 = __builtin_strchr (ip_1, 58);
  if (D.41435_50 != 0B)
    goto <bb 34>;
  else
    goto <bb 33>;

<bb 33>:

<bb 34>:
  # family_9 = PHI <"IP6"(32), "IP4"(33)>
  # DEBUG family => family_9
  D.41424_54 = smh_21->owner_id;
  D.41430_55 = smh_21->session_id;
  switch_snprintf (&buf, 2048, "v=0\no=%s %010u %010u IN %s %s\ns=%s\nc=IN %s %s\nt=0 0\n", username_28, D.41424_54, D.41430_55, family_9, ip_1, username_28, family_9, ip_1);
  D.41439_56 = t38_options_23(D)->T38FaxMaxBuffer;
  if (D.41439_56 != 0)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  D.41439_57 = t38_options_23(D)->T38FaxMaxBuffer;
  switch_snprintf (&max_buf, 128, "a=T38FaxMaxBuffer:%d\n", D.41439_57);

<bb 36>:
  D.41442_58 = t38_options_23(D)->T38FaxMaxDatagram;
  if (D.41442_58 != 0)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  D.41442_59 = t38_options_23(D)->T38FaxMaxDatagram;
  switch_snprintf (&max_data, 128, "a=T38FaxMaxDatagram:%d\n", D.41442_59);

<bb 38>:
  if (broken_boolean_31 != 0)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  # DEBUG bit_removal_on => "a=T38FaxFillBitRemoval:1\n"
  # DEBUG bit_removal_off => "a=T38FaxFillBitRemoval:0\n"
  # DEBUG mmr_on => "a=T38FaxTranscodingMMR:1\n"
  # DEBUG mmr_off => "a=T38FaxTranscodingMMR:0\n"
  # DEBUG jbig_on => "a=T38FaxTranscodingJBIG:1\n"
  # DEBUG jbig_off => "a=T38FaxTranscodingJBIG:0\n"

<bb 40>:
  # bit_removal_on_3 = PHI <"a=T38FaxFillBitRemoval\n"(38), "a=T38FaxFillBitRemoval:1\n"(39)>
  # bit_removal_off_4 = PHI <""(38), "a=T38FaxFillBitRemoval:0\n"(39)>
  # mmr_on_5 = PHI <"a=T38FaxTranscodingMMR\n"(38), "a=T38FaxTranscodingMMR:1\n"(39)>
  # mmr_off_6 = PHI <""(38), "a=T38FaxTranscodingMMR:0\n"(39)>
  # jbig_on_7 = PHI <"a=T38FaxTranscodingJBIG\n"(38), "a=T38FaxTranscodingJBIG:1\n"(39)>
  # jbig_off_8 = PHI <""(38), "a=T38FaxTranscodingJBIG:0\n"(39)>
  # DEBUG jbig_off => jbig_off_8
  # DEBUG jbig_on => jbig_on_7
  # DEBUG mmr_off => mmr_off_6
  # DEBUG mmr_on => mmr_on_5
  # DEBUG bit_removal_off => bit_removal_off_4
  # DEBUG bit_removal_on => bit_removal_on_3
  D.41447_66 = strlen (&buf);
  D.41448_67 = &buf + D.41447_66;
  D.41449_68 = strlen (&buf);
  D.41450_69 = 2048 - D.41449_68;
  D.41451_70 = t38_options_23(D)->T38FaxVersion;
  D.41452_71 = (int) D.41451_70;
  D.41453_72 = t38_options_23(D)->T38MaxBitRate;
  D.41455_73 = t38_options_23(D)->T38FaxFillBitRemoval;
  if (D.41455_73 != 0)
    goto <bb 42>;
  else
    goto <bb 41>;

<bb 41>:

<bb 42>:
  # bit_removal_on_10 = PHI <bit_removal_on_3(40), bit_removal_off_4(41)>
  D.41460_76 = t38_options_23(D)->T38FaxTranscodingMMR;
  if (D.41460_76 != 0)
    goto <bb 44>;
  else
    goto <bb 43>;

<bb 43>:

<bb 44>:
  # mmr_on_11 = PHI <mmr_on_5(42), mmr_off_6(43)>
  D.41465_79 = t38_options_23(D)->T38FaxTranscodingJBIG;
  if (D.41465_79 != 0)
    goto <bb 46>;
  else
    goto <bb 45>;

<bb 45>:

<bb 46>:
  # jbig_on_12 = PHI <jbig_on_7(44), jbig_off_8(45)>
  D.41469_82 = t38_options_23(D)->T38FaxRateManagement;
  D.41470_83 = t38_options_23(D)->T38FaxUdpEC;
  switch_snprintf (D.41448_67, D.41450_69, "m=image %d udptl t38\na=T38FaxVersion:%d\na=T38MaxBitRate:%d\n%s%s%sa=T38FaxRateManagement:%s\n%s%sa=T38FaxUdpEC:%s\n", port_2, D.41452_71, D.41453_72, bit_removal_on_10, mmr_on_11, jbig_on_12, D.41469_82, &max_buf, &max_data, D.41470_83);
  if (insist_84(D) != 0)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.41473_85 = strlen (&buf);
  D.41474_86 = &buf + D.41473_85;
  D.41475_87 = strlen (&buf);
  D.41476_88 = 2048 - D.41475_87;
  switch_snprintf (D.41474_86, D.41476_88, "m=audio 0 RTP/AVP 19\n");

<bb 48>:
  switch_core_media_set_local_sdp (session_20(D), &buf, 1);
  D.41407_89 = session_20(D)->channel;
  D.41477_90 = switch_channel_get_name (D.41407_89);
  D.41406_91 = smh_21->mparams;
  D.41478_92 = D.41406_91->local_sdp_str;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7113, session_20(D), 7, "%s image media sdp:\n%s\n", D.41477_90, D.41478_92);

<bb 49>:
  return;

}



;; Function switch_core_media_patch_sdp (switch_core_media_patch_sdp)

switch_core_media_patch_sdp (struct switch_core_session_t * session)
{
  const char D.48223;
  int D.48222;
  const char D.48219;
  int D.48218;
  char s_line[1024];
  switch_size_t len;
  char * se;
  char o_line[1024];
  const char * family;
  switch_size_t len;
  char * oe;
  static const char __func__[28] = "switch_core_media_patch_sdp";
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_patch_sdp";
  struct switch_media_handle_t * smh;
  int bad;
  char * new_sdp;
  char vport_buf[25];
  char port_buf[25];
  int has_ip;
  int has_audio;
  int has_video;
  char * qe;
  char * pe;
  char * q;
  char * p;
  switch_size_t len;
  char * D.41397;
  char * D.41396;
  int D.41393;
  char * D.41392;
  switch_channel_state_t D.41391;
  int D.41389;
  size_t D.41367;
  size_t D.41366;
  uint8_t D.41359;
  struct switch_rtp_t * D.41358;
  int D.41355;
  int D.41354;
  switch_port_t D.41353;
  struct payload_map_t * D.41352;
  int D.41345;
  char D.41344;
  size_t D.41337;
  size_t D.41336;
  char D.41330;
  int D.41328;
  int D.41326;
  unsigned int D.41321;
  size_t D.41320;
  size_t D.41319;
  int D.41317;
  int se.20;
  int D.41309;
  unsigned int D.41307;
  size_t D.41306;
  size_t D.41305;
  char * D.41304;
  uint32_t D.41302;
  uint32_t D.41299;
  unsigned int D.41298;
  unsigned int D.41297;
  unsigned int D.41296;
  time_t D.41295;
  uint32_t D.41292;
  char * D.41288;
  char * D.41287;
  int D.41285;
  int p.18;
  int oe.17;
  int D.41276;
  char D.41275;
  char D.41273;
  _Bool D.41270;
  _Bool D.41269;
  _Bool D.41268;
  char D.41267;
  char D.41266;
  char D.41264;
  size_t D.41260;
  size_t D.41259;
  char * D.41255;
  char * D.41254;
  char[3] * iftmp.16;
  int D.41251;
  unsigned int D.41243;
  size_t D.41242;
  int D.41241;
  char * D.41240;
  struct payload_map_t * D.41239;
  char * D.41238;
  switch_status_t D.41235;
  switch_port_t D.41234;
  char * D.41231;
  const char * D.41228;
  const char * D.41226;
  uint32_t D.41223;
  struct switch_channel_t * D.41222;
  unsigned int D.41217;
  switch_core_media_NDLB_t D.41216;
  size_t D.41215;
  char * D.41211;
  struct switch_core_media_params_t * D.41210;

<bb 2>:
  # DEBUG has_video => 0
  # DEBUG has_audio => 0
  # DEBUG has_ip => 0
  port_buf = "";
  vport_buf = "";
  # DEBUG bad => 0
  if (session_23(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7134, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_24 = session_23(D)->media_handle;
  # DEBUG smh => smh_24
  if (smh_24 == 0B)
    goto <bb 101>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#35 => &smh_24->engines
  # DEBUG a_engine => D#35
  # DEBUG D#36 => &smh_24->engines[1]
  # DEBUG v_engine => D#36
  D.41210_27 = smh_24->mparams;
  D.41211_28 = D.41210_27->local_sdp_str;
  # DEBUG s => D.41211_28
  if (D.41211_28 == 0B)
    goto <bb 8>;
  else
    goto <bb 6>;

<bb 6>:
  D.48219_289 = MEM[(const char *)D.41211_28];
  if (D.48219_289 == 0)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:

<bb 8>:
  # D.48218_290 = PHI <1(5), 1(6), 0(7)>
  if (D.48218_290 != 0)
    goto <bb 101>;
  else
    goto <bb 9>;

<bb 9>:
  D.41210_30 = smh_24->mparams;
  D.41211_31 = D.41210_30->local_sdp_str;
  D.41215_32 = strlen (D.41211_31);
  len_33 = D.41215_32 * 2;
  # DEBUG len => len_33
  D.41210_34 = smh_24->mparams;
  D.41216_35 = D.41210_34->ndlb;
  D.41217_36 = D.41216_35 & 32;
  if (D.41217_36 == 0)
    goto <bb 10>;
  else
    goto <bb 14>;

<bb 10>:
  D.41222_37 = session_23(D)->channel;
  D.41223_38 = switch_channel_test_flag (D.41222_37, 1);
  if (D.41223_38 != 0)
    goto <bb 11>;
  else
    goto <bb 14>;

<bb 11>:
  D.41210_39 = smh_24->mparams;
  D.41211_40 = D.41210_39->local_sdp_str;
  D.41226_41 = switch_stristr ("sendonly", D.41211_40);
  if (D.41226_41 != 0B)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:
  D.41210_42 = smh_24->mparams;
  D.41211_43 = D.41210_42->local_sdp_str;
  D.41228_44 = switch_stristr ("0.0.0.0", D.41211_43);
  if (D.41228_44 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7152, session_23(D), 7, "Skip patch on hold SDP\n");
  goto <bb 101>;

<bb 14>:
  D.41231_45 = MEM[(struct switch_rtp_engine_t *)smh_24 + 80B].local_sdp_ip;
  # DEBUG s => D.41231_45
  if (D.41231_45 == 0B)
    goto <bb 17>;
  else
    goto <bb 15>;

<bb 15>:
  D.48223_291 = MEM[(const char *)D.41231_45];
  if (D.48223_291 == 0)
    goto <bb 17>;
  else
    goto <bb 16>;

<bb 16>:

<bb 17>:
  # D.48222_292 = PHI <1(14), 1(15), 0(16)>
  if (D.48222_292 != 0)
    goto <bb 19>;
  else
    goto <bb 18>;

<bb 18>:
  D.41234_47 = MEM[(struct switch_rtp_engine_t *)smh_24 + 80B].local_sdp_port;
  if (D.41234_47 == 0)
    goto <bb 19>;
  else
    goto <bb 22>;

<bb 19>:
  D.41235_48 = switch_core_media_choose_port (session_23(D), 0, 1);
  if (D.41235_48 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.41222_49 = session_23(D)->channel;
  D.41238_50 = switch_channel_get_name (D.41222_49);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7159, session_23(D), 3, "%s I/O Error\n", D.41238_50);
  goto <bb 101>;

<bb 21>:
  D.41239_51 = MEM[(struct switch_rtp_engine_t *)smh_24 + 80B].cur_payload_map;
  D.41240_52 = switch_core_perform_session_strdup (session_23(D), "PROXY", "src/switch_core_media.c", &__func__, 7163);
  D.41239_51->iananame = D.41240_52;
  D.41239_53 = MEM[(struct switch_rtp_engine_t *)smh_24 + 80B].cur_payload_map;
  D.41239_53->rm_rate = 8000;
  D.41239_54 = MEM[(struct switch_rtp_engine_t *)smh_24 + 80B].cur_payload_map;
  D.41239_54->adv_rm_rate = 8000;
  D.41239_55 = MEM[(struct switch_rtp_engine_t *)smh_24 + 80B].cur_payload_map;
  D.41239_55->codec_ms = 20;

<bb 22>:
  new_sdp_56 = switch_core_perform_session_alloc (session_23(D), len_33, "src/switch_core_media.c", &__func__, 7169);
  # DEBUG new_sdp => new_sdp_56
  D.41234_57 = MEM[(struct switch_rtp_engine_t *)smh_24 + 80B].local_sdp_port;
  D.41241_58 = (int) D.41234_57;
  switch_snprintf (&port_buf, 25, "%u", D.41241_58);
  D.41210_59 = smh_24->mparams;
  p_60 = D.41210_59->local_sdp_str;
  # DEBUG p => p_60
  # DEBUG q => new_sdp_56
  D.41242_62 = strlen (p_60);
  pe_63 = p_60 + D.41242_62;
  # DEBUG pe => pe_63
  D.41243_64 = len_33 + -1;
  qe_65 = new_sdp_56 + D.41243_64;
  # DEBUG qe => qe_65
  goto <bb 92>;

<bb 23>:
  if (p_5 >= pe_63)
    goto <bb 94> (end);
  else
    goto <bb 24>;

<bb 24>:
  if (q_7 >= qe_65)
    goto <bb 94> (end);
  else
    goto <bb 25>;

<bb 25>:
  D.41231_69 = MEM[(struct switch_rtp_engine_t *)smh_24 + 80B].local_sdp_ip;
  if (D.41231_69 != 0B)
    goto <bb 26>;
  else
    goto <bb 39>;

<bb 26>:
  D.41251_70 = strncmp ("c=IN IP", p_5, 7);
  if (D.41251_70 == 0)
    goto <bb 27>;
  else
    goto <bb 39>;

<bb 27>:
  __builtin_strncpy (q_7, p_5, 7);
  # DEBUG p => p_5 + 7
  q_72 = q_7 + 7;
  # DEBUG q => q_72
  D.41254_73 = MEM[(struct switch_rtp_engine_t *)smh_24 + 80B].adv_sdp_ip;
  D.41255_74 = __builtin_strchr (D.41254_73, 58);
  if (D.41255_74 != 0B)
    goto <bb 29>;
  else
    goto <bb 28>;

<bb 28>:

<bb 29>:
  # iftmp.16_17 = PHI <"6 "(27), "4 "(28)>
  __builtin_memcpy (q_72, iftmp.16_17, 2);
  p_77 = &MEM[(void *)p_5 + 9B];
  # DEBUG p => p_77
  q_78 = &MEM[(void *)q_7 + 9B];
  # DEBUG q => q_78
  D.41254_80 = MEM[(struct switch_rtp_engine_t *)smh_24 + 80B].adv_sdp_ip;
  D.41259_81 = strlen (D.41254_80);
  __builtin_strncpy (q_78, D.41254_80, D.41259_81);
  D.41254_82 = MEM[(struct switch_rtp_engine_t *)smh_24 + 80B].adv_sdp_ip;
  D.41260_83 = strlen (D.41254_82);
  q_84 = q_78 + D.41260_83;
  # DEBUG q => q_84
  goto <bb 32>;

<bb 30>:
  if (p_1 >= pe_63)
    goto <bb 94> (end);
  else
    goto <bb 31>;

<bb 31>:
  p_97 = p_1 + 1;
  # DEBUG p => p_97

<bb 32>:
  # p_1 = PHI <p_77(29), p_97(31)>
  # DEBUG p => p_1
  if (p_1 != 0B)
    goto <bb 33>;
  else
    goto <bb 38>;

<bb 33>:
  D.41264_85 = *p_1;
  if (D.41264_85 != 0)
    goto <bb 34>;
  else
    goto <bb 38>;

<bb 34>:
  D.41266_86 = *p_1;
  D.41267_87 = D.41266_86 + 208;
  D.41268_88 = D.41267_87 <= 9;
  D.41269_89 = D.41266_86 == 46;
  D.41270_90 = D.41268_88 || D.41269_89;
  if (D.41270_90 != 0)
    goto <bb 30>;
  else
    goto <bb 35>;

<bb 35>:
  D.41264_91 = *p_1;
  if (D.41264_91 == 58)
    goto <bb 30>;
  else
    goto <bb 36>;

<bb 36>:
  D.41264_92 = *p_1;
  D.41273_93 = D.41264_92 + 191;
  if (D.41273_93 <= 5)
    goto <bb 30>;
  else
    goto <bb 37>;

<bb 37>:
  D.41264_94 = *p_1;
  D.41275_95 = D.41264_94 + 159;
  if (D.41275_95 <= 5)
    goto <bb 30>;
  else
    goto <bb 38>;

<bb 38>:
  has_ip_98 = has_ip_14 + 1;
  # DEBUG has_ip => has_ip_98
  goto <bb 53>;

<bb 39>:
  D.41276_99 = strncmp ("o=", p_5, 2);
  if (D.41276_99 == 0)
    goto <bb 40>;
  else
    goto <bb 49>;

<bb 40>:
  oe_100 = __builtin_strchr (p_5, 10);
  # DEBUG oe => oe_100
  if (oe_100 != 0B)
    goto <bb 41>;
  else
    goto <bb 53>;

<bb 41>:
  # DEBUG family => "IP4"
  o_line = "";
  if (oe_100 >= pe_63)
    goto <bb 94> (end);
  else
    goto <bb 42>;

<bb 42>:
  oe.17_103 = (int) oe_100;
  p.18_104 = (int) p_5;
  D.41285_105 = oe.17_103 - p.18_104;
  len_106 = (switch_size_t) D.41285_105;
  # DEBUG len => len_106
  p_107 = p_5 + len_106;
  # DEBUG p => p_107
  D.41210_108 = smh_24->mparams;
  D.41287_109 = D.41210_108->sipip;
  D.41288_110 = __builtin_strchr (D.41287_109, 58);
  if (D.41288_110 != 0B)
    goto <bb 44>;
  else
    goto <bb 43>;

<bb 43>:

<bb 44>:
  # family_18 = PHI <"IP6"(42), "IP4"(43)>
  # DEBUG family => family_18
  D.41292_114 = smh_24->owner_id;
  if (D.41292_114 == 0)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  D.41295_115 = switch_epoch_time_now (0B);
  D.41296_116 = (unsigned int) D.41295_115;
  D.41297_117 = D.41296_116 * 31821;
  D.41298_118 = D.41297_117 + 13849;
  smh_24->owner_id = D.41298_118;

<bb 46>:
  D.41299_119 = smh_24->session_id;
  if (D.41299_119 == 0)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.41292_120 = smh_24->owner_id;
  smh_24->session_id = D.41292_120;

<bb 48>:
  D.41299_121 = smh_24->session_id;
  D.41302_122 = D.41299_121 + 1;
  smh_24->session_id = D.41302_122;
  D.41210_124 = smh_24->mparams;
  D.41304_125 = D.41210_124->sdp_username;
  D.41292_126 = smh_24->owner_id;
  D.41299_127 = smh_24->session_id;
  D.41210_128 = smh_24->mparams;
  D.41287_129 = D.41210_128->sipip;
  snprintf (&o_line, 1024, &"o=%s %010u %010u IN %s %s\n"[0], D.41304_125, D.41292_126, D.41299_127, family_18, D.41287_129);
  D.41305_130 = strlen (&o_line);
  __builtin_strncpy (q_7, &o_line, D.41305_130);
  D.41306_131 = strlen (&o_line);
  D.41307_132 = D.41306_131 + -1;
  q_133 = q_7 + D.41307_132;
  # DEBUG q => q_133
  goto <bb 53>;

<bb 49>:
  D.41309_134 = strncmp ("s=", p_5, 2);
  if (D.41309_134 == 0)
    goto <bb 50>;
  else
    goto <bb 54>;

<bb 50>:
  se_135 = __builtin_strchr (p_5, 10);
  # DEBUG se => se_135
  if (se_135 != 0B)
    goto <bb 51>;
  else
    goto <bb 53>;

<bb 51>:
  s_line = "";
  if (se_135 >= pe_63)
    goto <bb 94> (end);
  else
    goto <bb 52>;

<bb 52>:
  se.20_137 = (int) se_135;
  p.18_138 = (int) p_5;
  D.41317_139 = se.20_137 - p.18_138;
  len_140 = (switch_size_t) D.41317_139;
  # DEBUG len => len_140
  p_141 = p_5 + len_140;
  # DEBUG p => p_141
  D.41210_143 = smh_24->mparams;
  D.41304_144 = D.41210_143->sdp_username;
  snprintf (&s_line, 1024, &"s=%s\n"[0], D.41304_144);
  D.41319_145 = strlen (&s_line);
  __builtin_strncpy (q_7, &s_line, D.41319_145);
  D.41320_146 = strlen (&s_line);
  D.41321_147 = D.41320_146 + -1;
  q_148 = q_7 + D.41321_147;
  # DEBUG q => q_148

<bb 53>:
  # p_204 = PHI <p_107(48), p_141(52), p_1(38), p_5(50), p_5(40), p_3(82), p_5(68), p_5(67), p_2(66)>
  # q_203 = PHI <q_133(48), q_148(52), q_84(38), q_7(50), q_7(40), q_188(82), q_7(68), q_7(67), q_159(66)>
  # has_video_199 = PHI <has_video_9(48), has_video_9(52), has_video_9(38), has_video_9(50), has_video_9(40), has_video_195(82), has_video_9(68), has_video_9(67), has_video_9(66)>
  # has_audio_198 = PHI <has_audio_11(48), has_audio_11(52), has_audio_11(38), has_audio_11(50), has_audio_11(40), has_audio_11(82), has_audio_11(68), has_audio_11(67), has_audio_166(66)>
  # has_ip_193 = PHI <has_ip_14(48), has_ip_14(52), has_ip_98(38), has_ip_14(50), has_ip_14(40), has_ip_14(82), has_ip_14(68), has_ip_14(67), has_ip_14(66)>
  goto <bb 86>;

<bb 54>:
  D.41326_149 = strncmp ("m=audio ", p_5, 8);
  if (D.41326_149 == 0)
    goto <bb 56>;
  else
    goto <bb 55>;

<bb 55>:
  D.41328_150 = strncmp ("m=image ", p_5, 8);
  if (D.41328_150 == 0)
    goto <bb 56>;
  else
    goto <bb 67>;

<bb 56>:
  D.41330_152 = MEM[(char *)p_5 + 8B];
  if (D.41330_152 != 48)
    goto <bb 57>;
  else
    goto <bb 67>;

<bb 57>:
  __builtin_strncpy (q_7, p_5, 8);
  p_153 = p_5 + 8;
  # DEBUG p => p_153
  if (p_153 >= pe_63)
    goto <bb 94> (end);
  else
    goto <bb 58>;

<bb 58>:
  q_155 = q_7 + 8;
  # DEBUG q => q_155
  if (q_155 >= qe_65)
    goto <bb 94> (end);
  else
    goto <bb 59>;

<bb 59>:
  D.41336_157 = strlen (&port_buf);
  __builtin_strncpy (q_155, &port_buf, D.41336_157);
  D.41337_158 = strlen (&port_buf);
  q_159 = q_155 + D.41337_158;
  # DEBUG q => q_159
  if (q_159 >= qe_65)
    goto <bb 94> (end);
  else
    goto <bb 60>;

<bb 60>:
  # p_185 = PHI <p_153(59)>
  goto <bb 63>;

<bb 61>:
  if (p_2 >= pe_63)
    goto <bb 94> (end);
  else
    goto <bb 62>;

<bb 62>:
  p_165 = p_2 + 1;
  # DEBUG p => p_165

<bb 63>:
  # p_2 = PHI <p_185(60), p_165(62)>
  # DEBUG p => p_2
  if (p_2 != 0B)
    goto <bb 64>;
  else
    goto <bb 66>;

<bb 64>:
  D.41264_161 = *p_2;
  if (D.41264_161 != 0)
    goto <bb 65>;
  else
    goto <bb 66>;

<bb 65>:
  D.41264_162 = *p_2;
  D.41344_163 = D.41264_162 + 208;
  if (D.41344_163 <= 9)
    goto <bb 61>;
  else
    goto <bb 66>;

<bb 66>:
  has_audio_166 = has_audio_11 + 1;
  # DEBUG has_audio => has_audio_166
  goto <bb 53>;

<bb 67>:
  D.41345_167 = strncmp ("m=video ", p_5, 8);
  if (D.41345_167 == 0)
    goto <bb 68>;
  else
    goto <bb 53>;

<bb 68>:
  D.41330_169 = MEM[(char *)p_5 + 8B];
  if (D.41330_169 != 48)
    goto <bb 69>;
  else
    goto <bb 53>;

<bb 69>:
  if (has_video_9 == 0)
    goto <bb 70>;
  else
    goto <bb 73>;

<bb 70>:
  switch_core_media_choose_port (session_23(D), 1, 1);
  D.41352_170 = MEM[(struct switch_rtp_engine_t *)smh_24 + 11496B].cur_payload_map;
  D.41352_170->rm_encoding = "PROXY-VID";
  D.41352_171 = MEM[(struct switch_rtp_engine_t *)smh_24 + 11496B].cur_payload_map;
  D.41352_171->rm_rate = 90000;
  D.41352_172 = MEM[(struct switch_rtp_engine_t *)smh_24 + 11496B].cur_payload_map;
  D.41352_172->adv_rm_rate = 90000;
  D.41352_173 = MEM[(struct switch_rtp_engine_t *)smh_24 + 11496B].cur_payload_map;
  D.41352_173->codec_ms = 0;
  D.41353_174 = MEM[(struct switch_rtp_engine_t *)smh_24 + 11496B].adv_sdp_port;
  D.41354_175 = (int) D.41353_174;
  switch_snprintf (&vport_buf, 25, "%u", D.41354_175);
  D.41222_176 = session_23(D)->channel;
  D.41355_177 = switch_channel_test_ready (D.41222_176, 1, 1);
  if (D.41355_177 != 0)
    goto <bb 71>;
  else
    goto <bb 73>;

<bb 71>:
  D.41358_178 = MEM[(struct switch_rtp_engine_t *)smh_24 + 11496B].rtp_session;
  D.41359_179 = switch_rtp_ready (D.41358_178);
  if (D.41359_179 == 0)
    goto <bb 72>;
  else
    goto <bb 73>;

<bb 72>:
  D.41222_180 = session_23(D)->channel;
  switch_channel_set_flag_value (D.41222_180, 98, 1);
  D.41222_181 = session_23(D)->channel;
  switch_channel_set_flag_value (D.41222_181, 103, 1);
  switch_core_media_activate_rtp (session_23(D));

<bb 73>:
  __builtin_strncpy (q_7, p_5, 8);
  p_182 = p_5 + 8;
  # DEBUG p => p_182
  if (p_182 >= pe_63)
    goto <bb 94> (end);
  else
    goto <bb 74>;

<bb 74>:
  q_184 = q_7 + 8;
  # DEBUG q => q_184
  if (q_184 >= qe_65)
    goto <bb 94> (end);
  else
    goto <bb 75>;

<bb 75>:
  D.41366_186 = strlen (&vport_buf);
  __builtin_strncpy (q_184, &vport_buf, D.41366_186);
  D.41367_187 = strlen (&vport_buf);
  q_188 = q_184 + D.41367_187;
  # DEBUG q => q_188
  if (q_188 >= qe_65)
    goto <bb 94> (end);
  else
    goto <bb 76>;

<bb 76>:
  # p_183 = PHI <p_182(75)>
  goto <bb 79>;

<bb 77>:
  if (p_3 >= pe_63)
    goto <bb 94> (end);
  else
    goto <bb 78>;

<bb 78>:
  p_194 = p_3 + 1;
  # DEBUG p => p_194

<bb 79>:
  # p_3 = PHI <p_183(76), p_194(78)>
  # DEBUG p => p_3
  if (p_3 != 0B)
    goto <bb 80>;
  else
    goto <bb 82>;

<bb 80>:
  D.41264_190 = *p_3;
  if (D.41264_190 != 0)
    goto <bb 81>;
  else
    goto <bb 82>;

<bb 81>:
  D.41264_191 = *p_3;
  D.41344_192 = D.41264_191 + 208;
  if (D.41344_192 <= 9)
    goto <bb 77>;
  else
    goto <bb 82>;

<bb 82>:
  has_video_195 = has_video_9 + 1;
  # DEBUG has_video => has_video_195
  goto <bb 53>;

<bb 83>:
  if (p_4 >= pe_63)
    goto <bb 94> (end);
  else
    goto <bb 84>;

<bb 84>:
  if (q_6 >= qe_65)
    goto <bb 94> (end);
  else
    goto <bb 85>;

<bb 85>:
  D.41264_200 = *p_4;
  *q_6 = D.41264_200;
  q_201 = q_6 + 1;
  # DEBUG q => q_201
  p_202 = p_4 + 1;
  # DEBUG p => p_202

<bb 86>:
  # p_4 = PHI <p_204(53), p_202(85)>
  # q_6 = PHI <q_203(53), q_201(85)>
  # has_video_8 = PHI <has_video_199(53), has_video_8(85)>
  # has_audio_10 = PHI <has_audio_198(53), has_audio_10(85)>
  # has_ip_13 = PHI <has_ip_193(53), has_ip_13(85)>
  # DEBUG has_ip => has_ip_13
  # DEBUG has_audio => has_audio_10
  # DEBUG has_video => has_video_8
  # DEBUG q => q_6
  # DEBUG p => p_4
  if (p_4 != 0B)
    goto <bb 87>;
  else
    goto <bb 89>;

<bb 87>:
  D.41264_196 = *p_4;
  if (D.41264_196 != 0)
    goto <bb 88>;
  else
    goto <bb 89>;

<bb 88>:
  D.41264_197 = *p_4;
  if (D.41264_197 != 10)
    goto <bb 83>;
  else
    goto <bb 89>;

<bb 89>:
  if (p_4 >= pe_63)
    goto <bb 94> (end);
  else
    goto <bb 90>;

<bb 90>:
  if (q_6 >= qe_65)
    goto <bb 94> (end);
  else
    goto <bb 91>;

<bb 91>:
  D.41264_205 = *p_4;
  *q_6 = D.41264_205;
  q_206 = q_6 + 1;
  # DEBUG q => q_206
  p_207 = p_4 + 1;
  # DEBUG p => p_207

<bb 92>:
  # p_5 = PHI <p_60(22), p_207(91)>
  # q_7 = PHI <new_sdp_56(22), q_206(91)>
  # has_video_9 = PHI <0(22), has_video_8(91)>
  # has_audio_11 = PHI <0(22), has_audio_10(91)>
  # has_ip_14 = PHI <0(22), has_ip_13(91)>
  # DEBUG has_ip => has_ip_14
  # DEBUG has_audio => has_audio_11
  # DEBUG has_video => has_video_9
  # DEBUG q => q_7
  # DEBUG p => p_5
  if (p_5 != 0B)
    goto <bb 93>;
  else
    goto <bb 94> (end);

<bb 93>:
  D.41264_66 = *p_5;
  if (D.41264_66 != 0)
    goto <bb 23>;
  else
    goto <bb 94> (end);

  # has_audio_12 = PHI <has_audio_11(23), has_audio_11(24), has_audio_11(30), has_audio_11(41), has_audio_11(51), has_audio_11(57), has_audio_11(58), has_audio_11(59), has_audio_11(61), has_audio_11(73), has_audio_11(74), has_audio_11(75), has_audio_11(77), has_audio_10(83), has_audio_10(84), has_audio_10(89), has_audio_10(90), has_audio_11(92), has_audio_11(93)>
  # has_ip_15 = PHI <has_ip_14(23), has_ip_14(24), has_ip_14(30), has_ip_14(41), has_ip_14(51), has_ip_14(57), has_ip_14(58), has_ip_14(59), has_ip_14(61), has_ip_14(73), has_ip_14(74), has_ip_14(75), has_ip_14(77), has_ip_13(83), has_ip_13(84), has_ip_13(89), has_ip_13(90), has_ip_14(92), has_ip_14(93)>
  # bad_16 = PHI <1(23), 2(24), 3(30), 5(41), 5(51), 4(57), 5(58), 6(59), 7(61), 8(73), 9(74), 10(75), 11(77), 12(83), 13(84), 14(89), 15(90), 0(92), 0(93)>
end:
  # DEBUG bad => bad_16
  # DEBUG has_ip => has_ip_15
  # DEBUG has_audio => has_audio_12
  if (bad_16 != 0)
    goto <bb 101>;
  else
    goto <bb 95>;

<bb 95>:
  D.41222_208 = session_23(D)->channel;
  D.41389_209 = switch_channel_check_signal (D.41222_208, 1);
  if (D.41389_209 != 0)
    goto <bb 97>;
  else
    goto <bb 96>;

<bb 96>:
  D.41222_210 = session_23(D)->channel;
  D.41391_211 = switch_channel_get_state (D.41222_210);
  if (D.41391_211 > 9)
    goto <bb 97>;
  else
    goto <bb 98>;

<bb 97>:
  D.41222_221 = session_23(D)->channel;
  D.41392_222 = switch_channel_get_name (D.41222_221);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7394, session_23(D), 7, "%s too late.\n", D.41392_222);
  goto <bb 101>;

<bb 98>:
  D.41393_212 = has_ip_15 | has_audio_12;
  if (D.41393_212 == 0)
    goto <bb 99>;
  else
    goto <bb 100>;

<bb 99>:
  D.41222_213 = session_23(D)->channel;
  D.41396_214 = switch_channel_get_name (D.41222_213);
  D.41210_215 = smh_24->mparams;
  D.41211_216 = D.41210_215->local_sdp_str;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7400, session_23(D), 7, "%s SDP has no audio in it.\n%s\n", D.41396_214, D.41211_216);
  goto <bb 101>;

<bb 100>:
  D.41222_217 = session_23(D)->channel;
  D.41397_218 = switch_channel_get_name (D.41222_217);
  D.41210_219 = smh_24->mparams;
  D.41211_220 = D.41210_219->local_sdp_str;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7406, session_23(D), 7, "%s Patched SDP\n---\n%s\n+++\n%s\n", D.41397_218, D.41211_220, new_sdp_56);
  switch_core_media_set_local_sdp (session_23(D), new_sdp_56, 0);

<bb 101>:
  return;

}



;; Function switch_core_media_start_udptl (switch_core_media_start_udptl)

switch_core_media_start_udptl (struct switch_core_session_t * session, struct switch_t38_options_t * t38_options)
{
  int D.50957;
  switch_bool_t D.50956;
  int D.50955;
  int D.50954;
  int D.50953;
  int D.50952;
  int D.50951;
  int D.50950;
  int D.50949;
  int D.50947;
  const char * val;
  const char * err;
  switch_port_t remote_port;
  char * remote_host;
  static const char __func__[30] = "switch_core_media_start_udptl";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_start_udptl";
  struct switch_media_handle_t * smh;
  uint32_t D.41200;
  int32_t D.41197;
  const char * err.15;
  switch_status_t D.41190;
  int D.41189;
  int D.39841;
  uint16_t D.41184;
  _Bool D.41181;
  _Bool D.41180;
  _Bool D.41179;
  const char * D.41178;
  uint8_t D.41172;
  struct switch_rtp_t * D.41171;
  switch_channel_state_t D.41170;
  int D.41168;
  struct switch_channel_t * D.41167;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7419, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 33>;
  else
    goto <bb 5>;

<bb 5>:
  D.41167_3 = session_1(D)->channel;
  D.41168_4 = switch_channel_check_signal (D.41167_3, 1);
  if (D.41168_4 != 0)
    goto <bb 33>;
  else
    goto <bb 6>;

<bb 6>:
  D.41167_5 = session_1(D)->channel;
  D.41170_6 = switch_channel_get_state (D.41167_5);
  if (D.41170_6 > 9)
    goto <bb 33>;
  else
    goto <bb 7>;

<bb 7>:
  # DEBUG D#37 => &smh_2->engines
  # DEBUG a_engine => D#37
  D.41171_8 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtp_session;
  D.41172_9 = switch_rtp_ready (D.41171_8);
  if (D.41172_9 != 0)
    goto <bb 8>;
  else
    goto <bb 33>;

<bb 8>:
  D.41171_10 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtp_session;
  remote_host_11 = switch_rtp_get_remote_host (D.41171_10);
  # DEBUG remote_host => remote_host_11
  D.41171_12 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtp_session;
  remote_port_13 = switch_rtp_get_remote_port (D.41171_12);
  # DEBUG remote_port => remote_port_13
  D.41167_14 = session_1(D)->channel;
  switch_channel_clear_flag (D.41167_14, 99);
  D.41171_15 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtp_session;
  switch_rtp_udptl_mode (D.41171_15);
  if (t38_options_16(D) == 0B)
    goto <bb 10>;
  else
    goto <bb 9>;

<bb 9>:
  D.41178_17 = t38_options_16(D)->remote_ip;
  if (D.41178_17 == 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7441, session_1(D), 7, "No remote address\n");
  goto <bb 33>;

<bb 11>:
  D.41179_18 = remote_host_11 != 0B;
  D.41180_19 = remote_port_13 != 0;
  D.41181_20 = D.41179_18 && D.41180_19;
  if (D.41181_20 != 0)
    goto <bb 12>;
  else
    goto <bb 15>;

<bb 12>:
  D.41184_21 = t38_options_16(D)->remote_port;
  if (D.41184_21 == remote_port_13)
    goto <bb 13>;
  else
    goto <bb 15>;

<bb 13>:
  D.41178_22 = t38_options_16(D)->remote_ip;
  D.39841_23 = __builtin_strcmp (remote_host_11, D.41178_22);
  if (D.39841_23 == 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.41178_24 = t38_options_16(D)->remote_ip;
  D.41184_25 = t38_options_16(D)->remote_port;
  D.41189_26 = (int) D.41184_25;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7446, session_1(D), 7, "Remote address:port [%s:%d] has not changed.\n", D.41178_24, D.41189_26);
  goto <bb 33>;

<bb 15>:
  D.41171_27 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtp_session;
  D.41178_28 = t38_options_16(D)->remote_ip;
  D.41184_29 = t38_options_16(D)->remote_port;
  D.41190_30 = switch_rtp_set_remote_address (D.41171_27, D.41178_28, D.41184_29, 0, 1, &err);
  if (D.41190_30 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  err.15_31 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7453, session_1(D), 3, "IMAGE UDPTL REPORTS ERROR: [%s]\n", err.15_31);
  goto <bb 33>;

<bb 17>:
  D.41178_32 = t38_options_16(D)->remote_ip;
  D.41184_33 = t38_options_16(D)->remote_port;
  D.41189_34 = (int) D.41184_33;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7455, session_1(D), 7, "IMAGE UDPTL CHANGING DEST TO: [%s:%d]\n", D.41178_32, D.41189_34);
  D.41197_35 = switch_media_handle_test_media_flag (smh_2, 10);
  if (D.41197_35 == 0)
    goto <bb 18>;
  else
    goto <bb 33>;

<bb 18>:
  D.41167_36 = session_1(D)->channel;
  D.41200_37 = switch_channel_test_flag (D.41167_36, 106);
  if (D.41200_37 == 0)
    goto <bb 19>;
  else
    goto <bb 33>;

<bb 19>:
  D.41167_38 = session_1(D)->channel;
  val_39 = switch_channel_get_variable_dup (D.41167_38, "disable_udptl_auto_adjust", 1, -1);
  # DEBUG val => val_39
  if (val_39 == 0B)
    goto <bb 32>;
  else
    goto <bb 20>;

<bb 20>:
  # DEBUG expr => val_39
  if (val_39 != 0B)
    goto <bb 21>;
  else
    goto <bb 30>;

<bb 21>:
  D.50949_61 = strcasecmp (val_39, "yes");
  if (D.50949_61 == 0)
    goto <bb 31>;
  else
    goto <bb 22>;

<bb 22>:
  D.50950_62 = strcasecmp (val_39, "on");
  if (D.50950_62 == 0)
    goto <bb 31>;
  else
    goto <bb 23>;

<bb 23>:
  D.50951_63 = strcasecmp (val_39, "true");
  if (D.50951_63 == 0)
    goto <bb 31>;
  else
    goto <bb 24>;

<bb 24>:
  D.50952_64 = strcasecmp (val_39, "t");
  if (D.50952_64 == 0)
    goto <bb 31>;
  else
    goto <bb 25>;

<bb 25>:
  D.50953_65 = strcasecmp (val_39, "enabled");
  if (D.50953_65 == 0)
    goto <bb 31>;
  else
    goto <bb 26>;

<bb 26>:
  D.50954_66 = strcasecmp (val_39, "active");
  if (D.50954_66 == 0)
    goto <bb 31>;
  else
    goto <bb 27>;

<bb 27>:
  D.50955_67 = strcasecmp (val_39, "allow");
  if (D.50955_67 == 0)
    goto <bb 31>;
  else
    goto <bb 28>;

<bb 28>:
  D.50956_68 = switch_is_number (val_39);
  if (D.50956_68 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  # DEBUG __nptr => val_39
  D.50957_69 = strtol (val_39, 0B, 10);
  if (D.50957_69 != 0)
    goto <bb 31>;
  else
    goto <bb 30>;

<bb 30>:

<bb 31>:
  # D.50947_70 = PHI <1(21), 1(22), 1(23), 1(24), 1(25), 1(26), 1(27), 1(29), 0(30)>
  D.50947_75 = D.50947_70;
  D.50947_40 = D.50947_75;
  if (D.50947_40 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;

<bb 32>:
  D.41171_41 = MEM[(struct switch_rtp_engine_t *)smh_2 + 80B].rtp_session;
  switch_rtp_set_flag (D.41171_41, 7);

<bb 33>:
  return;

}



;; Function switch_core_media_receive_message (switch_core_media_receive_message)

switch_core_media_receive_message (struct switch_core_session_t * session, struct switch_core_session_message_t * msg)
{
  int D.51013;
  switch_bool_t D.51012;
  int D.51011;
  int D.51010;
  int D.51009;
  int D.51008;
  int D.51007;
  int D.51006;
  int D.51005;
  int D.51003;
  int D.51001;
  switch_bool_t D.51000;
  int D.50999;
  int D.50998;
  int D.50997;
  int D.50996;
  int D.50995;
  int D.50994;
  int D.50993;
  int D.50989;
  switch_bool_t D.50988;
  int D.50987;
  int D.50986;
  int D.50985;
  int D.50984;
  int D.50983;
  int D.50982;
  int D.50981;
  int D.50977;
  switch_bool_t D.50976;
  int D.50975;
  int D.50974;
  int D.50973;
  int D.50972;
  int D.50971;
  int D.50970;
  int D.50969;
  int D.50967;
  int D.48251;
  uint8_t D.48249;
  struct payload_map_t * pmap;
  uint8_t D.48246;
  struct payload_map_t * pmap;
  const char D.48242;
  int D.48241;
  const char D.48238;
  int D.48237;
  long int D.48234;
  struct switch_t38_options_t * t38_options;
  struct switch_core_session_t * nsession;
  const char * port;
  const char * ip;
  struct switch_channel_t * other_channel;
  struct switch_core_session_t * other_session;
  const char * uuid;
  int ok;
  const char * val;
  int set;
  int both;
  switch_rtp_flag_t flags[39];
  const char * direction;
  struct switch_rtp_t * rtp;
  register int __result;
  const char * s;
  char * q;
  char * p;
  int max_drift;
  int maxqlen;
  int qlen;
  int maxlen;
  int len;
  static const char __func__[34] = "switch_core_media_receive_message";
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_receive_message";
  switch_status_t status;
  struct switch_media_handle_t * smh;
  switch_channel_state_t D.41130;
  int D.41128;
  uint32_t D.41119;
  uint32_t D.41113;
  uint8_t D.41108;
  struct switch_core_session_t * nsession.13;
  switch_status_t D.41104;
  char * D.41101;
  struct payload_map_t * D.41100;
  char * iftmp.12;
  char * D.41092;
  struct payload_map_t * D.41091;
  char * iftmp.11;
  const char D.41086;
  switch_channel_state_t D.41083;
  int D.41081;
  struct switch_mutex_t * D.41076;
  char * D.41071;
  struct switch_core_media_params_t * D.41070;
  short unsigned int D.41069;
  _Bool D.41065;
  _Bool D.41064;
  _Bool D.41063;
  const char * D.41058;
  const char * D.41054;
  uint32_t D.41051;
  uint8_t D.41048;
  uint32_t D.41044;
  uint32_t D.41041;
  uint32_t D.41038;
  uint32_t D.41035;
  char * D.41034;
  uint32_t D.41031;
  char * D.41030;
  uint32_t D.41027;
  unsigned int D.41026;
  unsigned int D.41023;
  uint8_t D.41020;
  switch_core_media_flag_t D.41016;
  uint32_t D.41011;
  uint32_t D.41003;
  uint32_t D.41000;
  char * D.40996;
  uint32_t D.40993;
  uint32_t D.40990;
  unsigned int D.40989;
  smh_flag_t D.40988;
  char * D.40987;
  uint32_t D.40984;
  uint32_t D.40981;
  uint8_t D.40974;
  uint32_t D.40971;
  int D.40964;
  switch_rtp_flag_t D.40961;
  switch_rtp_flag_t D.40960;
  int D.40959;
  switch_rtp_flag_t D.40955;
  switch_rtp_flag_t D.40954;
  int D.40953;
  int D.40949;
  const char * D.40945;
  uint8_t D.40939;
  const char D.40936;
  int D.40929;
  const char * D.40928;
  switch_status_t D.40925;
  uint32_t max_drift.10;
  uint32_t D.40923;
  uint32_t D.40922;
  uint32_t maxqlen.9;
  uint32_t qlen.8;
  int D.40904;
  int D.40903;
  const unsigned char D.40893;
  int D.40884;
  const unsigned char D.40883;
  int D.40874;
  const unsigned char D.40873;
  int D.40863;
  const unsigned char D.40862;
  int D.40854;
  int D.40851;
  int D.40848;
  const char * D.40845;
  uint8_t D.40842;
  int D.40838;
  uint8_t D.40835;
  struct switch_rtp_t * D.40834;
  struct switch_rtp_t * D.40831;
  uint32_t D.40828;
  switch_core_session_message_types_t D.40827;
  switch_channel_state_t D.40826;
  int D.40824;
  struct switch_channel_t * D.40823;

<bb 2>:
  # DEBUG status => 0
  if (session_26(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7477, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_27 = session_26(D)->media_handle;
  # DEBUG smh => smh_27
  if (smh_27 == 0B)
    goto <bb 212>;
  else
    goto <bb 5>;

<bb 5>:
  D.40823_29 = session_26(D)->channel;
  D.40824_30 = switch_channel_check_signal (D.40823_29, 1);
  if (D.40824_30 != 0)
    goto <bb 212>;
  else
    goto <bb 6>;

<bb 6>:
  D.40823_31 = session_26(D)->channel;
  D.40826_32 = switch_channel_get_state (D.40823_31);
  if (D.40826_32 > 9)
    goto <bb 212>;
  else
    goto <bb 7>;

<bb 7>:
  # DEBUG D#39 => &smh_27->engines
  # DEBUG a_engine => D#39
  # DEBUG D#38 => &smh_27->engines[1]
  # DEBUG v_engine => D#38
  D.40827_36 = msg_35(D)->message_id;
  switch (D.40827_36) <default: <L211>, case 4: <L93>, case 5: <L126>, case 8: <L147>, case 9: <L150>, case 17: <L10>, case 19: <L88>, case 20: <L144>, case 24: <L65>, case 25: <L13>, case 32: <L19>, case 46: <L7>>

<L7>:
  D.40823_37 = session_26(D)->channel;
  D.40828_38 = switch_channel_test_flag (D.40823_37, 82);
  if (D.40828_38 != 0)
    goto <bb 9>;
  else
    goto <bb 179> (<L211>);

<bb 9>:
  D.40823_39 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_39, 122, 1);
  goto <bb 179> (<L211>);

<L10>:
  D.40831_40 = MEM[(struct switch_rtp_engine_t *)smh_27 + 11496B].rtp_session;
  if (D.40831_40 != 0B)
    goto <bb 11>;
  else
    goto <bb 179> (<L211>);

<bb 11>:
  D.40831_41 = MEM[(struct switch_rtp_engine_t *)smh_27 + 11496B].rtp_session;
  switch_rtp_video_refresh (D.40831_41);
  goto <bb 179> (<L211>);

<L13>:
  D.40834_42 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  D.40835_43 = switch_rtp_ready (D.40834_42);
  if (D.40835_43 != 0)
    goto <bb 13>;
  else
    goto <bb 179> (<L211>);

<bb 13>:
  D.40838_44 = msg_35(D)->numeric_arg;
  if (D.40838_44 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.40834_45 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_set_flag (D.40834_45, 19);
  goto <bb 179> (<L211>);

<bb 15>:
  D.40834_46 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_clear_flag (D.40834_46, 19);
  goto <bb 179> (<L211>);

<L19>:
  D.40834_47 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  D.40842_48 = switch_rtp_ready (D.40834_47);
  if (D.40842_48 != 0)
    goto <bb 17>;
  else
    goto <bb 179> (<L211>);

<bb 17>:
  # DEBUG len => 0
  # DEBUG maxlen => 0
  # DEBUG qlen => 0
  # DEBUG maxqlen => 50
  # DEBUG max_drift => 0
  D.40845_54 = msg_35(D)->string_arg;
  if (D.40845_54 != 0B)
    goto <bb 18>;
  else
    goto <bb 40>;

<bb 18>:
  D.40845_55 = msg_35(D)->string_arg;
  D.40848_56 = strcasecmp (D.40845_55, "pause");
  if (D.40848_56 == 0)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.40834_57 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_57, 1);
  goto <bb 208> (end);

<bb 20>:
  D.40845_58 = msg_35(D)->string_arg;
  D.40851_59 = strcasecmp (D.40845_58, "resume");
  if (D.40851_59 == 0)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.40834_60 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_60, 0);
  goto <bb 208> (end);

<bb 22>:
  D.40845_61 = msg_35(D)->string_arg;
  D.40854_62 = strncasecmp (D.40845_61, "debug:", 6);
  if (D.40854_62 == 0)
    goto <bb 23>;
  else
    goto <bb 31>;

<bb 23>:
  D.40845_63 = msg_35(D)->string_arg;
  s_64 = D.40845_63 + 6;
  # DEBUG s => s_64
  if (s_64 != 0B)
    goto <bb 24>;
  else
    goto <bb 30>;

<bb 24>:
  # DEBUG __s2_len => 3
  # DEBUG __s1 => s_64
  D.40862_67 = MEM[(const unsigned char *)D.40845_63 + 6B];
  D.40863_68 = (int) D.40862_67;
  __result_72 = D.40863_68 + -111;
  # DEBUG __result => __result_72
  if (__result_72 == 0)
    goto <bb 25>;
  else
    goto <bb 28>;

<bb 25>:
  D.40873_77 = MEM[(const unsigned char *)D.40845_63 + 7B];
  D.40874_78 = (int) D.40873_77;
  __result_82 = D.40874_78 + -102;
  # DEBUG __result => __result_82
  if (__result_82 == 0)
    goto <bb 26>;
  else
    goto <bb 28>;

<bb 26>:
  D.40883_87 = MEM[(const unsigned char *)D.40845_63 + 8B];
  D.40884_88 = (int) D.40883_87;
  __result_92 = D.40884_88 + -102;
  # DEBUG __result => __result_92
  if (__result_92 == 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.40893_97 = MEM[(const unsigned char *)D.40845_63 + 9B];
  __result_98 = (int) D.40893_97;
  # DEBUG __result => __result_98

<bb 28>:
  # __result_13 = PHI <__result_72(24), __result_82(25), __result_92(26), __result_98(27)>
  # DEBUG __result => __result_13
  if (__result_13 == 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  # DEBUG s => 0B

<bb 30>:
  # s_12 = PHI <s_64(23), s_64(28), 0B(29)>
  # DEBUG s => s_12
  D.40834_108 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  status_109 = switch_rtp_debug_jitter_buffer (D.40834_108, s_12);
  # DEBUG status => status_109
  goto <bb 208> (end);

<bb 31>:
  D.40845_110 = msg_35(D)->string_arg;
  # DEBUG __nptr => D.40845_110
  len_481 = strtol (D.40845_110, 0B, 10);
  # DEBUG len => NULL
  if (len_481 != 0)
    goto <bb 32>;
  else
    goto <bb 34>;

<bb 32>:
  D.40903_112 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].read_impl.microseconds_per_packet;
  D.40904_113 = D.40903_112 / 1000;
  qlen_114 = len_481 / D.40904_113;
  # DEBUG qlen => qlen_114
  if (qlen_114 <= 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  # DEBUG qlen => 3

<bb 34>:
  # qlen_6 = PHI <0(31), qlen_114(32), 3(33)>
  # DEBUG qlen => qlen_6
  if (qlen_6 != 0)
    goto <bb 35>;
  else
    goto <bb 38>;

<bb 35>:
  D.40845_116 = msg_35(D)->string_arg;
  p_117 = __builtin_strchr (D.40845_116, 58);
  # DEBUG p => p_117
  if (p_117 != 0B)
    goto <bb 36>;
  else
    goto <bb 38>;

<bb 36>:
  p_118 = p_117 + 1;
  # DEBUG p => p_118
  # DEBUG __nptr => p_118
  maxlen_482 = strtol (p_118, 0B, 10);
  # DEBUG maxlen => NULL
  q_120 = __builtin_strchr (p_118, 58);
  # DEBUG q => q_120
  if (q_120 != 0B)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  q_121 = q_120 + 1;
  # DEBUG q => q_121
  # DEBUG __nptr => q_121
  D.48234_483 = strtol (q_121, 0B, 10);
  max_drift_123 = ABS_EXPR <D.48234_483>;
  # DEBUG max_drift => max_drift_123

<bb 38>:
  # maxlen_5 = PHI <0(34), 0(35), maxlen_482(36), maxlen_482(37)>
  # max_drift_10 = PHI <0(34), 0(35), 0(36), max_drift_123(37)>
  # DEBUG max_drift => max_drift_10
  # DEBUG maxlen => maxlen_5
  if (maxlen_5 != 0)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.40903_124 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].read_impl.microseconds_per_packet;
  D.40904_125 = D.40903_124 / 1000;
  maxqlen_126 = maxlen_5 / D.40904_125;
  # DEBUG maxqlen => maxqlen_126

<bb 40>:
  # len_4 = PHI <0(17), len_481(38), len_481(39)>
  # qlen_7 = PHI <0(17), qlen_6(38), qlen_6(39)>
  # maxqlen_8 = PHI <50(17), 50(38), maxqlen_126(39)>
  # max_drift_11 = PHI <0(17), max_drift_10(38), max_drift_10(39)>
  # DEBUG max_drift => max_drift_11
  # DEBUG maxqlen => maxqlen_8
  # DEBUG qlen => qlen_7
  # DEBUG len => len_4
  if (qlen_7 != 0)
    goto <bb 41>;
  else
    goto <bb 47>;

<bb 41>:
  if (maxqlen_8 < qlen_7)
    goto <bb 42>;
  else
    goto <bb 43>;

<bb 42>:
  maxqlen_127 = qlen_7 * 5;
  # DEBUG maxqlen => maxqlen_127

<bb 43>:
  # maxqlen_9 = PHI <maxqlen_8(41), maxqlen_127(42)>
  # DEBUG maxqlen => maxqlen_9
  D.40834_128 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  qlen.8_129 = (uint32_t) qlen_7;
  maxqlen.9_130 = (uint32_t) maxqlen_9;
  D.40922_131 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].read_impl.samples_per_packet;
  D.40923_132 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].read_impl.samples_per_second;
  max_drift.10_133 = (uint32_t) max_drift_11;
  D.40925_134 = switch_rtp_activate_jitter_buffer (D.40834_128, qlen.8_129, maxqlen.9_130, D.40922_131, D.40923_132, max_drift.10_133);
  if (D.40925_134 == 0)
    goto <bb 44>;
  else
    goto <bb 46>;

<bb 44>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7577, session_26(D), 7, "Setting Jitterbuffer to %dms (%d frames) (%d max frames) (%d max drift)\n", len_4, qlen_7, maxqlen_9, max_drift_11);
  D.40823_135 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_135, 57, 1);
  D.40823_136 = session_26(D)->channel;
  D.40928_137 = switch_channel_get_variable_dup (D.40823_136, "rtp_jitter_buffer_plc", 1, -1);
  D.40929_138 = switch_false (D.40928_137);
  if (D.40929_138 == 0)
    goto <bb 45>;
  else
    goto <bb 179> (<L211>);

<bb 45>:
  D.40823_139 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_139, 58, 1);
  goto <bb 179> (<L211>);

<bb 46>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7585, session_26(D), 4, "Error Setting Jitterbuffer to %dms (%d frames)\n", len_4, qlen_7);
  goto <bb 179> (<L211>);

<bb 47>:
  D.40834_140 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_deactivate_jitter_buffer (D.40834_140);
  goto <bb 179> (<L211>);

<L65>:
  rtp_141 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  # DEBUG rtp => rtp_141
  direction_142 = msg_35(D)->string_array_arg[0];
  # DEBUG direction => direction_142
  if (direction_142 != 0B)
    goto <bb 49>;
  else
    goto <bb 51>;

<bb 49>:
  D.40936_143 = *direction_142;
  if (D.40936_143 == 118)
    goto <bb 50>;
  else
    goto <bb 51>;

<bb 50>:
  direction_144 = direction_142 + 1;
  # DEBUG direction => direction_144
  rtp_145 = MEM[(struct switch_rtp_engine_t *)smh_27 + 11496B].rtp_session;
  # DEBUG rtp => rtp_145

<bb 51>:
  # rtp_14 = PHI <rtp_141(48), rtp_141(49), rtp_145(50)>
  # direction_15 = PHI <direction_142(48), direction_142(49), direction_144(50)>
  # DEBUG direction => direction_15
  # DEBUG rtp => rtp_14
  D.40939_146 = switch_rtp_ready (rtp_14);
  if (D.40939_146 != 0)
    goto <bb 52>;
  else
    goto <bb 208> (end);

<bb 52>:
  # DEBUG s => direction_15
  if (direction_15 == 0B)
    goto <bb 55>;
  else
    goto <bb 53>;

<bb 53>:
  D.48238_484 = *direction_15;
  if (D.48238_484 == 0)
    goto <bb 55>;
  else
    goto <bb 54>;

<bb 54>:

<bb 55>:
  # D.48237_485 = PHI <1(52), 1(53), 0(54)>
  if (D.48237_485 == 0)
    goto <bb 56>;
  else
    goto <bb 208> (end);

<bb 56>:
  D.40945_148 = msg_35(D)->string_array_arg[1];
  # DEBUG s => D.40945_148
  if (D.40945_148 == 0B)
    goto <bb 59>;
  else
    goto <bb 57>;

<bb 57>:
  D.48242_486 = *D.40945_148;
  if (D.48242_486 == 0)
    goto <bb 59>;
  else
    goto <bb 58>;

<bb 58>:

<bb 59>:
  # D.48241_487 = PHI <1(56), 1(57), 0(58)>
  if (D.48241_487 == 0)
    goto <bb 60>;
  else
    goto <bb 208> (end);

<bb 60>:
  flags = {};
  D.40949_150 = strcasecmp (direction_15, "both");
  both_151 = D.40949_150 == 0;
  # DEBUG both => both_151
  # DEBUG set => 0
  if (both_151 != 0)
    goto <bb 62>;
  else
    goto <bb 61>;

<bb 61>:
  D.40953_153 = strcasecmp (direction_15, "read");
  if (D.40953_153 == 0)
    goto <bb 62>;
  else
    goto <bb 63>;

<bb 62>:
  D.40954_154 = flags[28];
  D.40955_155 = D.40954_154 + 1;
  flags[28] = D.40955_155;
  # DEBUG set => 1

<bb 63>:
  # set_16 = PHI <0(61), 1(62)>
  # DEBUG set => set_16
  if (both_151 != 0)
    goto <bb 65>;
  else
    goto <bb 64>;

<bb 64>:
  D.40959_157 = strcasecmp (direction_15, "write");
  if (D.40959_157 == 0)
    goto <bb 65>;
  else
    goto <bb 66>;

<bb 65>:
  D.40960_158 = flags[29];
  D.40961_159 = D.40960_158 + 1;
  flags[29] = D.40961_159;
  set_160 = set_16 + 1;
  # DEBUG set => set_160

<bb 66>:
  # set_17 = PHI <set_16(64), set_160(65)>
  # DEBUG set => set_17
  if (set_17 != 0)
    goto <bb 67>;
  else
    goto <bb 70>;

<bb 67>:
  D.40945_161 = msg_35(D)->string_array_arg[1];
  D.40964_162 = switch_true (D.40945_161);
  if (D.40964_162 != 0)
    goto <bb 68>;
  else
    goto <bb 69>;

<bb 68>:
  switch_rtp_set_flags (rtp_14, &flags);
  goto <bb 208> (end);

<bb 69>:
  switch_rtp_clear_flags (rtp_14, &flags);
  goto <bb 208> (end);

<bb 70>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7627, session_26(D), 3, "Invalid Options\n");
  goto <bb 208> (end);

<L88>:
  D.40834_163 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  if (D.40834_163 != 0B)
    goto <bb 72>;
  else
    goto <bb 208> (end);

<bb 72>:
  D.40834_164 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  D.40971_165 = switch_rtp_test_flag (D.40834_164, 15);
  if (D.40971_165 != 0)
    goto <bb 73>;
  else
    goto <bb 208> (end);

<bb 73>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7634, session_26(D), 4, "Pass 2833 mode may not work on a transcoded call.\n");
  goto <bb 208> (end);

<L93>:
  D.40834_166 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  D.40974_167 = switch_rtp_ready (D.40834_166);
  if (D.40974_167 != 0)
    goto <bb 75>;
  else
    goto <bb 208> (end);

<bb 75>:
  # DEBUG ok => 0
  D.40823_169 = session_26(D)->channel;
  val_170 = switch_channel_get_variable_dup (D.40823_169, "rtp_jitter_buffer_during_bridge", 1, -1);
  # DEBUG val => val_170
  if (val_170 == 0B)
    goto <bb 88>;
  else
    goto <bb 76>;

<bb 76>:
  # DEBUG expr => val_170
  if (val_170 != 0B)
    goto <bb 77>;
  else
    goto <bb 86>;

<bb 77>:
  D.50969_515 = strcasecmp (val_170, "no");
  if (D.50969_515 == 0)
    goto <bb 87>;
  else
    goto <bb 78>;

<bb 78>:
  D.50970_516 = strcasecmp (val_170, "off");
  if (D.50970_516 == 0)
    goto <bb 87>;
  else
    goto <bb 79>;

<bb 79>:
  D.50971_517 = strcasecmp (val_170, "false");
  if (D.50971_517 == 0)
    goto <bb 87>;
  else
    goto <bb 80>;

<bb 80>:
  D.50972_518 = strcasecmp (val_170, "f");
  if (D.50972_518 == 0)
    goto <bb 87>;
  else
    goto <bb 81>;

<bb 81>:
  D.50973_519 = strcasecmp (val_170, "disabled");
  if (D.50973_519 == 0)
    goto <bb 87>;
  else
    goto <bb 82>;

<bb 82>:
  D.50974_520 = strcasecmp (val_170, "inactive");
  if (D.50974_520 == 0)
    goto <bb 87>;
  else
    goto <bb 83>;

<bb 83>:
  D.50975_521 = strcasecmp (val_170, "disallow");
  if (D.50975_521 == 0)
    goto <bb 87>;
  else
    goto <bb 84>;

<bb 84>:
  D.50976_522 = switch_is_number (val_170);
  if (D.50976_522 != 0)
    goto <bb 85>;
  else
    goto <bb 86>;

<bb 85>:
  # DEBUG __nptr => val_170
  D.50977_523 = strtol (val_170, 0B, 10);
  if (D.50977_523 == 0)
    goto <bb 87>;
  else
    goto <bb 86>;

<bb 86>:

<bb 87>:
  # D.50967_524 = PHI <1(77), 1(78), 1(79), 1(80), 1(81), 1(82), 1(83), 1(85), 0(86)>
  D.50967_565 = D.50967_524;
  D.50967_171 = D.50967_565;
  if (D.50967_171 != 0)
    goto <bb 88>;
  else
    goto <bb 91>;

<bb 88>:
  D.40823_172 = session_26(D)->channel;
  D.40981_173 = switch_channel_test_flag (D.40823_172, 57);
  if (D.40981_173 != 0)
    goto <bb 89>;
  else
    goto <bb 91>;

<bb 89>:
  D.40823_174 = session_26(D)->channel;
  D.40984_175 = switch_channel_test_cap_partner (D.40823_174, 5);
  if (D.40984_175 != 0)
    goto <bb 90>;
  else
    goto <bb 91>;

<bb 90>:
  D.40823_176 = session_26(D)->channel;
  D.40987_177 = switch_channel_get_name (D.40823_176);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7647, session_26(D), 7, "%s PAUSE Jitterbuffer\n", D.40987_177);
  D.40834_178 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_178, 1);
  D.40988_179 = smh_27->flags;
  D.40989_180 = D.40988_179 | 4;
  smh_27->flags = D.40989_180;

<bb 91>:
  D.40823_181 = session_26(D)->channel;
  D.40990_182 = switch_channel_test_flag (D.40823_181, 100);
  if (D.40990_182 != 0)
    goto <bb 92>;
  else
    goto <bb 94>;

<bb 92>:
  D.40823_183 = session_26(D)->channel;
  D.40993_184 = switch_channel_test_flag_partner (D.40823_183, 36);
  if (D.40993_184 != 0)
    goto <bb 93>;
  else
    goto <bb 94>;

<bb 93>:
  D.40834_185 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_set_flag (D.40834_185, 15);
  D.40823_186 = session_26(D)->channel;
  D.40996_187 = switch_channel_get_name (D.40823_186);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7656, session_26(D), 7, "%s activate passthru 2833 mode.\n", D.40996_187);

<bb 94>:
  D.40823_188 = session_26(D)->channel;
  val_189 = switch_channel_get_variable_dup (D.40823_188, "rtp_notimer_during_bridge", 1, -1);
  # DEBUG val => val_189
  if (val_189 != 0B)
    goto <bb 95>;
  else
    goto <bb 107>;

<bb 95>:
  # DEBUG expr => val_189
  if (val_189 != 0B)
    goto <bb 96>;
  else
    goto <bb 105>;

<bb 96>:
  D.50981_525 = strcasecmp (val_189, "yes");
  if (D.50981_525 == 0)
    goto <bb 106>;
  else
    goto <bb 97>;

<bb 97>:
  D.50982_526 = strcasecmp (val_189, "on");
  if (D.50982_526 == 0)
    goto <bb 106>;
  else
    goto <bb 98>;

<bb 98>:
  D.50983_527 = strcasecmp (val_189, "true");
  if (D.50983_527 == 0)
    goto <bb 106>;
  else
    goto <bb 99>;

<bb 99>:
  D.50984_528 = strcasecmp (val_189, "t");
  if (D.50984_528 == 0)
    goto <bb 106>;
  else
    goto <bb 100>;

<bb 100>:
  D.50985_529 = strcasecmp (val_189, "enabled");
  if (D.50985_529 == 0)
    goto <bb 106>;
  else
    goto <bb 101>;

<bb 101>:
  D.50986_530 = strcasecmp (val_189, "active");
  if (D.50986_530 == 0)
    goto <bb 106>;
  else
    goto <bb 102>;

<bb 102>:
  D.50987_531 = strcasecmp (val_189, "allow");
  if (D.50987_531 == 0)
    goto <bb 106>;
  else
    goto <bb 103>;

<bb 103>:
  D.50988_532 = switch_is_number (val_189);
  if (D.50988_532 != 0)
    goto <bb 104>;
  else
    goto <bb 105>;

<bb 104>:
  # DEBUG __nptr => val_189
  D.50989_533 = strtol (val_189, 0B, 10);
  if (D.50989_533 != 0)
    goto <bb 106>;
  else
    goto <bb 105>;

<bb 105>:

<bb 106>:
  # ok_534 = PHI <1(96), 1(97), 1(98), 1(99), 1(100), 1(101), 1(102), 1(104), 0(105)>
  ok_568 = ok_534;
  ok_190 = ok_568;
  # DEBUG ok => NULL
  goto <bb 108>;

<bb 107>:
  D.40823_191 = session_26(D)->channel;
  D.41000_192 = switch_channel_test_flag (D.40823_191, 105);
  ok_193 = (int) D.41000_192;
  # DEBUG ok => ok_193

<bb 108>:
  # ok_18 = PHI <ok_190(106), ok_193(107)>
  # DEBUG ok => ok_18
  if (ok_18 != 0)
    goto <bb 109>;
  else
    goto <bb 111>;

<bb 109>:
  D.40834_194 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  D.41003_195 = switch_rtp_test_flag (D.40834_194, 3);
  if (D.41003_195 == 0)
    goto <bb 110>;
  else
    goto <bb 111>;

<bb 110>:
  # DEBUG ok => 0

<bb 111>:
  # ok_19 = PHI <ok_18(108), ok_18(109), 0(110)>
  # DEBUG ok => ok_19
  if (ok_19 != 0)
    goto <bb 112>;
  else
    goto <bb 113>;

<bb 112>:
  D.40834_197 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_clear_flag (D.40834_197, 3);
  D.40823_198 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_198, 99, 1);

<bb 113>:
  if (ok_19 != 0)
    goto <bb 114>;
  else
    goto <bb 115>;

<bb 114>:
  D.40823_199 = session_26(D)->channel;
  D.41011_200 = switch_channel_test_flag (D.40823_199, 99);
  if (D.41011_200 != 0)
    goto <bb 129>;
  else
    goto <bb 115>;

<bb 115>:
  D.40823_202 = session_26(D)->channel;
  val_203 = switch_channel_get_variable_dup (D.40823_202, "rtp_autoflush_during_bridge", 1, -1);
  # DEBUG val => val_203
  if (val_203 != 0B)
    goto <bb 116>;
  else
    goto <bb 128>;

<bb 116>:
  # DEBUG expr => val_203
  if (val_203 != 0B)
    goto <bb 117>;
  else
    goto <bb 126>;

<bb 117>:
  D.50993_535 = strcasecmp (val_203, "yes");
  if (D.50993_535 == 0)
    goto <bb 127>;
  else
    goto <bb 118>;

<bb 118>:
  D.50994_536 = strcasecmp (val_203, "on");
  if (D.50994_536 == 0)
    goto <bb 127>;
  else
    goto <bb 119>;

<bb 119>:
  D.50995_537 = strcasecmp (val_203, "true");
  if (D.50995_537 == 0)
    goto <bb 127>;
  else
    goto <bb 120>;

<bb 120>:
  D.50996_538 = strcasecmp (val_203, "t");
  if (D.50996_538 == 0)
    goto <bb 127>;
  else
    goto <bb 121>;

<bb 121>:
  D.50997_539 = strcasecmp (val_203, "enabled");
  if (D.50997_539 == 0)
    goto <bb 127>;
  else
    goto <bb 122>;

<bb 122>:
  D.50998_540 = strcasecmp (val_203, "active");
  if (D.50998_540 == 0)
    goto <bb 127>;
  else
    goto <bb 123>;

<bb 123>:
  D.50999_541 = strcasecmp (val_203, "allow");
  if (D.50999_541 == 0)
    goto <bb 127>;
  else
    goto <bb 124>;

<bb 124>:
  D.51000_542 = switch_is_number (val_203);
  if (D.51000_542 != 0)
    goto <bb 125>;
  else
    goto <bb 126>;

<bb 125>:
  # DEBUG __nptr => val_203
  D.51001_543 = strtol (val_203, 0B, 10);
  if (D.51001_543 != 0)
    goto <bb 127>;
  else
    goto <bb 126>;

<bb 126>:

<bb 127>:
  # ok_544 = PHI <1(117), 1(118), 1(119), 1(120), 1(121), 1(122), 1(123), 1(125), 0(126)>
  ok_571 = ok_544;
  ok_204 = ok_571;
  # DEBUG ok => NULL
  goto <bb 129>;

<bb 128>:
  D.41016_205 = smh_27->media_flags[14];
  ok_206 = (int) D.41016_205;
  # DEBUG ok => ok_206

<bb 129>:
  # ok_20 = PHI <0(114), ok_204(127), ok_206(128)>
  # DEBUG ok => ok_20
  if (ok_20 != 0)
    goto <bb 130>;
  else
    goto <bb 131>;

<bb 130>:
  D.40834_207 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  rtp_flush_read_buffer (D.40834_207, 1);
  D.40823_208 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_208, 104, 1);
  goto <bb 208> (end);

<bb 131>:
  D.40834_209 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  rtp_flush_read_buffer (D.40834_209, 0);
  goto <bb 208> (end);

<L126>:
  D.40834_210 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  D.41020_211 = switch_rtp_ready (D.40834_210);
  if (D.41020_211 != 0)
    goto <bb 133>;
  else
    goto <bb 208> (end);

<bb 133>:
  D.40988_212 = smh_27->flags;
  D.41023_213 = D.40988_212 & 4;
  if (D.41023_213 != 0)
    goto <bb 134>;
  else
    goto <bb 136>;

<bb 134>:
  D.40988_214 = smh_27->flags;
  D.41026_215 = D.40988_214 & 4294967291;
  smh_27->flags = D.41026_215;
  D.40823_216 = session_26(D)->channel;
  D.41027_217 = switch_channel_test_flag (D.40823_216, 57);
  if (D.41027_217 != 0)
    goto <bb 135>;
  else
    goto <bb 136>;

<bb 135>:
  D.40823_218 = session_26(D)->channel;
  D.41030_219 = switch_channel_get_name (D.40823_218);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7704, session_26(D), 7, "%s RESUME Jitterbuffer\n", D.41030_219);
  D.40834_220 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_220, 0);

<bb 136>:
  D.40834_221 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  D.41031_222 = switch_rtp_test_flag (D.40834_221, 15);
  if (D.41031_222 != 0)
    goto <bb 137>;
  else
    goto <bb 138>;

<bb 137>:
  D.40823_223 = session_26(D)->channel;
  D.41034_224 = switch_channel_get_name (D.40823_223);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7712, session_26(D), 7, "%s deactivate passthru 2833 mode.\n", D.41034_224);
  D.40834_225 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_clear_flag (D.40834_225, 15);

<bb 138>:
  D.40823_226 = session_26(D)->channel;
  D.41035_227 = switch_channel_test_flag (D.40823_226, 99);
  if (D.41035_227 != 0)
    goto <bb 139>;
  else
    goto <bb 143>;

<bb 139>:
  D.40834_228 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  D.41038_229 = switch_rtp_test_flag (D.40834_228, 12);
  if (D.41038_229 == 0)
    goto <bb 140>;
  else
    goto <bb 142>;

<bb 140>:
  D.40834_230 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  D.41041_231 = switch_rtp_test_flag (D.40834_230, 19);
  if (D.41041_231 == 0)
    goto <bb 141>;
  else
    goto <bb 142>;

<bb 141>:
  D.40834_232 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_set_flag (D.40834_232, 3);

<bb 142>:
  D.40823_233 = session_26(D)->channel;
  switch_channel_clear_flag (D.40823_233, 99);

<bb 143>:
  D.40823_234 = session_26(D)->channel;
  D.41044_235 = switch_channel_test_flag (D.40823_234, 104);
  if (D.41044_235 != 0)
    goto <bb 144>;
  else
    goto <bb 145>;

<bb 144>:
  D.40834_236 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  rtp_flush_read_buffer (D.40834_236, 2);
  D.40823_237 = session_26(D)->channel;
  switch_channel_clear_flag (D.40823_237, 104);
  goto <bb 208> (end);

<bb 145>:
  D.40834_238 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  rtp_flush_read_buffer (D.40834_238, 0);
  goto <bb 208> (end);

<L144>:
  D.40834_239 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  D.41048_240 = switch_rtp_ready (D.40834_239);
  if (D.41048_240 != 0)
    goto <bb 147>;
  else
    goto <bb 208> (end);

<bb 147>:
  D.40834_241 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  rtp_flush_read_buffer (D.40834_241, 0);
  goto <bb 208> (end);

<L147>:
  D.41051_242 = session_26(D)->track_duration;
  if (D.41051_242 != 0)
    goto <bb 149>;
  else
    goto <bb 179> (<L211>);

<bb 149>:
  D.41051_243 = session_26(D)->track_duration;
  switch_core_session_enable_heartbeat (session_26(D), D.41051_243);
  goto <bb 179> (<L211>);

<L150>:
  # DEBUG ip => 0B
  # DEBUG port => 0B
  D.40823_246 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_246, 15, 1);
  MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].codec_negotiated = 0;
  MEM[(struct switch_rtp_engine_t *)smh_27 + 11496B].codec_negotiated = 0;
  switch_core_media_set_local_sdp (session_26(D), 0B, 0);
  D.40823_247 = session_26(D)->channel;
  D.41054_248 = switch_channel_get_variable_dup (D.40823_247, "bypass_keep_codec", 1, -1);
  # DEBUG expr => D.41054_248
  if (D.41054_248 != 0B)
    goto <bb 151>;
  else
    goto <bb 160>;

<bb 151>:
  D.51005_545 = strcasecmp (D.41054_248, "yes");
  if (D.51005_545 == 0)
    goto <bb 161>;
  else
    goto <bb 152>;

<bb 152>:
  D.51006_546 = strcasecmp (D.41054_248, "on");
  if (D.51006_546 == 0)
    goto <bb 161>;
  else
    goto <bb 153>;

<bb 153>:
  D.51007_547 = strcasecmp (D.41054_248, "true");
  if (D.51007_547 == 0)
    goto <bb 161>;
  else
    goto <bb 154>;

<bb 154>:
  D.51008_548 = strcasecmp (D.41054_248, "t");
  if (D.51008_548 == 0)
    goto <bb 161>;
  else
    goto <bb 155>;

<bb 155>:
  D.51009_549 = strcasecmp (D.41054_248, "enabled");
  if (D.51009_549 == 0)
    goto <bb 161>;
  else
    goto <bb 156>;

<bb 156>:
  D.51010_550 = strcasecmp (D.41054_248, "active");
  if (D.51010_550 == 0)
    goto <bb 161>;
  else
    goto <bb 157>;

<bb 157>:
  D.51011_551 = strcasecmp (D.41054_248, "allow");
  if (D.51011_551 == 0)
    goto <bb 161>;
  else
    goto <bb 158>;

<bb 158>:
  D.51012_552 = switch_is_number (D.41054_248);
  if (D.51012_552 != 0)
    goto <bb 159>;
  else
    goto <bb 160>;

<bb 159>:
  # DEBUG __nptr => D.41054_248
  D.51013_553 = strtol (D.41054_248, 0B, 10);
  if (D.51013_553 != 0)
    goto <bb 161>;
  else
    goto <bb 160>;

<bb 160>:

<bb 161>:
  # D.51003_554 = PHI <1(151), 1(152), 1(153), 1(154), 1(155), 1(156), 1(157), 1(159), 0(160)>
  D.51003_574 = D.51003_554;
  D.51003_249 = D.51003_574;
  if (D.51003_249 != 0)
    goto <bb 162>;
  else
    goto <bb 163>;

<bb 162>:
  D.40823_251 = session_26(D)->channel;
  D.41058_252 = switch_channel_get_variable_dup (D.40823_251, "ep_codec_string", 1, -1);
  switch_channel_set_variable_var_check (D.40823_251, "absolute_codec_string", D.41058_252, 1);

<bb 163>:
  D.40823_253 = session_26(D)->channel;
  uuid_254 = switch_channel_get_partner_uuid (D.40823_253);
  # DEBUG uuid => uuid_254
  if (uuid_254 != 0B)
    goto <bb 164>;
  else
    goto <bb 175>;

<bb 164>:
  other_session_255 = switch_core_session_perform_locate (uuid_254, "src/switch_core_media.c", &__func__, 7768);
  # DEBUG other_session => other_session_255
  if (other_session_255 != 0B)
    goto <bb 165>;
  else
    goto <bb 175>;

<bb 165>:
  other_channel_256 = switch_core_session_get_channel (other_session_255);
  # DEBUG other_channel => other_channel_256
  ip_257 = switch_channel_get_variable_dup (other_channel_256, "remote_media_ip", 1, -1);
  # DEBUG ip => ip_257
  port_258 = switch_channel_get_variable_dup (other_channel_256, "remote_media_port", 1, -1);
  # DEBUG port => port_258
  switch_core_session_rwunlock (other_session_255);
  D.41063_259 = ip_257 != 0B;
  D.41064_260 = port_258 != 0B;
  D.41065_261 = D.41063_259 && D.41064_260;
  if (D.41065_261 != 0)
    goto <bb 166>;
  else
    goto <bb 175>;

<bb 166>:
  switch_core_media_prepare_codecs (session_26(D), 1);
  # DEBUG engine => D#39
  pmap_488 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].payload_map;
  # DEBUG pmap => pmap_488
  goto <bb 168>;

<bb 167>:
  pmap_489->negotiated = 0;
  pmap_489->current = 0;
  pmap_490 = pmap_489->next;
  # DEBUG pmap => pmap_490

<bb 168>:
  # pmap_489 = PHI <pmap_488(166), pmap_490(167)>
  # DEBUG pmap => pmap_489
  if (pmap_489 != 0B)
    goto <bb 169>;
  else
    goto <bb 170>;

<bb 169>:
  D.48246_491 = pmap_489->allocated;
  if (D.48246_491 != 0)
    goto <bb 167>;
  else
    goto <bb 170>;

<bb 170>:
  # DEBUG engine => D#38
  pmap_492 = MEM[(struct switch_rtp_engine_t *)smh_27 + 11496B].payload_map;
  # DEBUG pmap => pmap_492
  goto <bb 172>;

<bb 171>:
  pmap_493->negotiated = 0;
  pmap_493->current = 0;
  pmap_494 = pmap_493->next;
  # DEBUG pmap => pmap_494

<bb 172>:
  # pmap_493 = PHI <pmap_492(170), pmap_494(171)>
  # DEBUG pmap => pmap_493
  if (pmap_493 != 0B)
    goto <bb 173>;
  else
    goto <bb 174>;

<bb 173>:
  D.48249_495 = pmap_493->allocated;
  if (D.48249_495 != 0)
    goto <bb 171>;
  else
    goto <bb 174>;

<bb 174>:
  # DEBUG __nptr => port_258
  D.48251_496 = strtol (port_258, 0B, 10);
  D.41069_263 = (short unsigned int) D.48251_496;
  switch_core_media_gen_local_sdp (session_26(D), 0, ip_257, D.41069_263, 0B, 1);

<bb 175>:
  D.41070_264 = smh_27->mparams;
  D.41071_265 = D.41070_264->local_sdp_str;
  if (D.41071_265 == 0B)
    goto <bb 176>;
  else
    goto <bb 177>;

<bb 176>:
  switch_core_media_absorb_sdp (session_26(D));

<bb 177>:
  D.41051_266 = session_26(D)->track_duration;
  if (D.41051_266 != 0)
    goto <bb 178>;
  else
    goto <bb 179> (<L211>);

<bb 178>:
  D.41051_267 = session_26(D)->track_duration;
  switch_core_session_enable_heartbeat (session_26(D), D.41051_267);

<L211>:
  D.41076_268 = smh_27->mutex;
  if (D.41076_268 != 0B)
    goto <bb 180>;
  else
    goto <bb 181>;

<bb 180>:
  D.41076_269 = smh_27->mutex;
  switch_mutex_lock (D.41076_269);

<bb 181>:
  D.40823_270 = session_26(D)->channel;
  D.41081_271 = switch_channel_check_signal (D.40823_270, 1);
  if (D.41081_271 != 0)
    goto <bb 206> (end_lock);
  else
    goto <bb 182>;

<bb 182>:
  D.40823_272 = session_26(D)->channel;
  D.41083_273 = switch_channel_get_state (D.40823_272);
  if (D.41083_273 > 9)
    goto <bb 206> (end_lock);
  else
    goto <bb 183>;

<bb 183>:
  D.40827_274 = msg_35(D)->message_id;
  switch (D.40827_274) <default: end_lock, case 30: <L198>, case 37: <L186>, case 40: <L170>>

<L170>:
  D.40845_275 = msg_35(D)->string_arg;
  if (D.40845_275 != 0B)
    goto <bb 185>;
  else
    goto <bb 193>;

<bb 185>:
  D.40823_276 = session_26(D)->channel;
  switch_channel_set_variable_var_check (D.40823_276, "absolute_codec_string", 0B, 1);
  D.40845_277 = msg_35(D)->string_arg;
  D.41086_278 = *D.40845_277;
  if (D.41086_278 == 61)
    goto <bb 186>;
  else
    goto <bb 187>;

<bb 186>:
  D.40823_279 = session_26(D)->channel;
  D.40845_280 = msg_35(D)->string_arg;
  switch_channel_set_variable_var_check (D.40823_279, "codec_string", D.40845_280, 1);
  goto <bb 192>;

<bb 187>:
  D.40823_281 = session_26(D)->channel;
  D.41091_282 = MEM[(struct switch_rtp_engine_t *)smh_27 + 11496B].cur_payload_map;
  D.41092_283 = D.41091_282->rm_encoding;
  if (D.41092_283 != 0B)
    goto <bb 188>;
  else
    goto <bb 189>;

<bb 188>:
  D.41091_284 = MEM[(struct switch_rtp_engine_t *)smh_27 + 11496B].cur_payload_map;
  iftmp.11_285 = D.41091_284->rm_encoding;

<bb 189>:
  # iftmp.11_23 = PHI <iftmp.11_285(188), ""(187)>
  D.41091_287 = MEM[(struct switch_rtp_engine_t *)smh_27 + 11496B].cur_payload_map;
  D.41092_288 = D.41091_287->rm_encoding;
  if (D.41092_288 != 0B)
    goto <bb 191>;
  else
    goto <bb 190>;

<bb 190>:

<bb 191>:
  # iftmp.12_24 = PHI <","(189), ""(190)>
  D.41100_291 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].cur_payload_map;
  D.41101_292 = D.41100_291->rm_encoding;
  D.40845_293 = msg_35(D)->string_arg;
  switch_channel_set_variable_printf (D.40823_281, "codec_string", "=%s%s%s,%s", iftmp.11_23, iftmp.12_24, D.41101_292, D.40845_293);

<bb 192>:
  MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].codec_negotiated = 0;
  MEM[(struct switch_rtp_engine_t *)smh_27 + 11496B].codec_negotiated = 0;
  D.40823_294 = session_26(D)->channel;
  switch_channel_clear_flag (D.40823_294, 98);
  switch_core_media_prepare_codecs (session_26(D), 1);
  switch_core_media_check_video_codecs (session_26(D));
  switch_core_media_gen_local_sdp (session_26(D), 0, 0B, 0, 0B, 1);

<bb 193>:
  switch_media_handle_set_media_flag (smh_27, 7);
  D.40838_295 = msg_35(D)->numeric_arg;
  if (D.40838_295 != 0)
    goto <bb 194>;
  else
    goto <bb 206> (end_lock);

<bb 194>:
  D.41104_296 = switch_core_session_perform_get_partner (session_26(D), &nsession, "src/switch_core_media.c", &__func__, 7835);
  if (D.41104_296 == 0)
    goto <bb 195>;
  else
    goto <bb 206> (end_lock);

<bb 195>:
  msg_35(D)->numeric_arg = 0;
  nsession.13_297 = nsession;
  switch_core_session_perform_receive_message (nsession.13_297, msg_35(D), "src/switch_core_media.c", &__func__, 7837);
  nsession.13_298 = nsession;
  switch_core_session_rwunlock (nsession.13_298);
  goto <bb 206> (end_lock);

<L186>:
  D.40834_299 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  D.41108_300 = switch_rtp_ready (D.40834_299);
  if (D.41108_300 != 0)
    goto <bb 197>;
  else
    goto <bb 206> (end_lock);

<bb 197>:
  D.40838_301 = msg_35(D)->numeric_arg;
  if (D.40838_301 != 0)
    goto <bb 198>;
  else
    goto <bb 201>;

<bb 198>:
  D.40823_302 = session_26(D)->channel;
  D.41113_303 = switch_channel_test_flag (D.40823_302, 57);
  if (D.41113_303 != 0)
    goto <bb 199>;
  else
    goto <bb 200>;

<bb 199>:
  D.40834_304 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_304, 1);
  D.40988_305 = smh_27->flags;
  D.40989_306 = D.40988_305 | 4;
  smh_27->flags = D.40989_306;

<bb 200>:
  D.40834_307 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  rtp_flush_read_buffer (D.40834_307, 2);
  goto <bb 206> (end_lock);

<bb 201>:
  D.40988_308 = smh_27->flags;
  D.41023_309 = D.40988_308 & 4;
  if (D.41023_309 != 0)
    goto <bb 202>;
  else
    goto <bb 206> (end_lock);

<bb 202>:
  D.40988_310 = smh_27->flags;
  D.41026_311 = D.40988_310 & 4294967291;
  smh_27->flags = D.41026_311;
  D.40823_312 = session_26(D)->channel;
  D.41119_313 = switch_channel_test_flag (D.40823_312, 57);
  if (D.41119_313 != 0)
    goto <bb 203>;
  else
    goto <bb 206> (end_lock);

<bb 203>:
  D.40834_314 = MEM[(struct switch_rtp_engine_t *)smh_27 + 80B].rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_314, 0);
  goto <bb 206> (end_lock);

<L198>:
  D.40823_315 = session_26(D)->channel;
  t38_options_316 = switch_channel_get_private (D.40823_315, "t38_options");
  # DEBUG t38_options => t38_options_316
  if (t38_options_316 != 0B)
    goto <bb 205>;
  else
    goto <bb 206> (end_lock);

<bb 205>:
  switch_core_media_start_udptl (session_26(D), t38_options_316);

  # status_1 = PHI <1(182), 0(194), 0(200), 0(204), 0(193), 0(195), 0(196), 0(203), 0(202), 0(201), 0(183), 0(205), 1(181)>
end_lock:
  # DEBUG status => status_1
  D.41076_318 = smh_27->mutex;
  if (D.41076_318 != 0B)
    goto <bb 207>;
  else
    goto <bb 208> (end);

<bb 207>:
  D.41076_319 = smh_27->mutex;
  switch_mutex_unlock (D.41076_319);

  # status_2 = PHI <0(19), 0(21), status_109(30), 0(55), 0(72), 0(130), 0(144), 0(147), status_1(206), status_1(207), 0(51), 0(68), 0(70), 0(69), 0(59), 0(71), 0(73), 0(74), 0(131), 0(132), 0(145), 0(146)>
end:
  # DEBUG status => status_2
  D.40823_320 = session_26(D)->channel;
  D.41128_321 = switch_channel_check_signal (D.40823_320, 1);
  if (D.41128_321 != 0)
    goto <bb 210>;
  else
    goto <bb 209>;

<bb 209>:
  D.40823_322 = session_26(D)->channel;
  D.41130_323 = switch_channel_get_state (D.40823_322);
  if (D.41130_323 > 9)
    goto <bb 210>;
  else
    goto <bb 211>;

<bb 210>:
  # DEBUG status => 1

<bb 211>:
  # status_3 = PHI <status_2(209), 1(210)>
  # DEBUG status => status_3

<bb 212>:
  # status_21 = PHI <1(4), 1(6), status_3(211), 1(5)>
  return status_21;

}



;; Function switch_core_media_break (switch_core_media_break)

switch_core_media_break (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[24] = "switch_core_media_break";
  struct switch_media_handle_t * smh;
  uint8_t D.40812;
  struct switch_rtp_t * D.40811;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7902, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40811_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40812_5 = switch_rtp_ready (D.40811_4);
  if (D.40812_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40811_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_break (D.40811_6);

<bb 7>:
  return;

}



;; Function switch_core_media_kill_socket (switch_core_media_kill_socket)

switch_core_media_kill_socket (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_kill_socket";
  struct switch_media_handle_t * smh;
  uint8_t D.40803;
  struct switch_rtp_t * D.40802;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7918, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40802_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40803_5 = switch_rtp_ready (D.40802_4);
  if (D.40803_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40802_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_kill_socket (D.40802_6);

<bb 7>:
  return;

}



;; Function switch_core_media_queue_rfc2833 (switch_core_media_queue_rfc2833)

switch_core_media_queue_rfc2833 (struct switch_core_session_t * session, switch_media_type_t type, const struct switch_dtmf_t * dtmf)
{
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_queue_rfc2833";
  struct switch_media_handle_t * smh;
  uint8_t D.40794;
  struct switch_rtp_t * D.40793;
  switch_status_t D.40792;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7934, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40793_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40794_7 = switch_rtp_ready (D.40793_6);
  if (D.40794_7 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40793_8 = smh_3->engines[type_5(D)].rtp_session;
  D.40792_10 = switch_rtp_queue_rfc2833 (D.40793_8, dtmf_9(D));

<bb 7>:
  # D.40792_1 = PHI <1(4), D.40792_10(6), 1(5)>
  return D.40792_1;

}



;; Function switch_core_media_queue_rfc2833_in (switch_core_media_queue_rfc2833_in)

switch_core_media_queue_rfc2833_in (struct switch_core_session_t * session, switch_media_type_t type, const struct switch_dtmf_t * dtmf)
{
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_queue_rfc2833_in";
  struct switch_media_handle_t * smh;
  uint8_t D.40784;
  struct switch_rtp_t * D.40783;
  switch_status_t D.40782;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7952, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40783_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40784_7 = switch_rtp_ready (D.40783_6);
  if (D.40784_7 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40783_8 = smh_3->engines[type_5(D)].rtp_session;
  D.40782_10 = switch_rtp_queue_rfc2833_in (D.40783_8, dtmf_9(D));

<bb 7>:
  # D.40782_1 = PHI <1(4), D.40782_10(6), 1(5)>
  return D.40782_1;

}



;; Function switch_core_media_ready (switch_core_media_ready)

switch_core_media_ready (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[24] = "switch_core_media_ready";
  struct switch_media_handle_t * smh;
  struct switch_rtp_t * D.40776;
  uint8_t D.40775;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7970, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  D.40776_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40775_7 = switch_rtp_ready (D.40776_6);

<bb 6>:
  # D.40775_1 = PHI <0(4), D.40775_7(5)>
  return D.40775_1;

}



;; Function switch_core_media_set_rtp_flag (switch_core_media_set_rtp_flag)

switch_core_media_set_rtp_flag (struct switch_core_session_t * session, switch_media_type_t type, switch_rtp_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_set_rtp_flag";
  struct switch_media_handle_t * smh;
  uint8_t D.40767;
  struct switch_rtp_t * D.40766;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7984, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40766_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40767_5 = switch_rtp_ready (D.40766_4);
  if (D.40767_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40766_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_set_flag (D.40766_6, flag_7(D));

<bb 7>:
  return;

}



;; Function switch_core_media_clear_rtp_flag (switch_core_media_clear_rtp_flag)

switch_core_media_clear_rtp_flag (struct switch_core_session_t * session, switch_media_type_t type, switch_rtp_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_clear_rtp_flag";
  struct switch_media_handle_t * smh;
  uint8_t D.40758;
  struct switch_rtp_t * D.40757;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8000, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40757_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40758_5 = switch_rtp_ready (D.40757_4);
  if (D.40758_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40757_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_clear_flag (D.40757_6, flag_7(D));

<bb 7>:
  return;

}



;; Function switch_core_media_set_telephony_event (switch_core_media_set_telephony_event)

switch_core_media_set_telephony_event (struct switch_core_session_t * session, switch_media_type_t type, switch_payload_t te)
{
  static const char __PRETTY_FUNCTION__[38] = "switch_core_media_set_telephony_event";
  struct switch_media_handle_t * smh;
  uint8_t D.40749;
  struct switch_rtp_t * D.40748;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8016, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40748_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40749_5 = switch_rtp_ready (D.40748_4);
  if (D.40749_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40748_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_set_telephony_event (D.40748_6, te_7(D));

<bb 7>:
  return;

}



;; Function switch_core_media_set_telephony_recv_event (switch_core_media_set_telephony_recv_event)

switch_core_media_set_telephony_recv_event (struct switch_core_session_t * session, switch_media_type_t type, switch_payload_t te)
{
  static const char __PRETTY_FUNCTION__[43] = "switch_core_media_set_telephony_recv_event";
  struct switch_media_handle_t * smh;
  uint8_t D.40740;
  struct switch_rtp_t * D.40739;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8032, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40739_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40740_5 = switch_rtp_ready (D.40739_4);
  if (D.40740_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40739_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_set_telephony_recv_event (D.40739_6, te_7(D));

<bb 7>:
  return;

}



;; Function switch_core_media_get_stats (switch_core_media_get_stats)

switch_core_media_get_stats (struct switch_core_session_t * session, switch_media_type_t type, struct switch_memory_pool_t * pool)
{
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_get_stats";
  struct switch_media_handle_t * smh;
  struct switch_rtp_t * D.40731;
  struct switch_rtp_stats_t * D.40730;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8048, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40731_6 = smh_3->engines[type_5(D)].rtp_session;
  if (D.40731_6 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40731_7 = smh_3->engines[type_5(D)].rtp_session;
  D.40730_9 = switch_rtp_get_stats (D.40731_7, pool_8(D));

<bb 7>:
  # D.40730_1 = PHI <0B(4), D.40730_9(6), 0B(5)>
  return D.40730_1;

}



;; Function set_stats (set_stats)

set_stats (struct switch_core_session_t * session, switch_media_type_t type, const char * prefix)
{
  char var_val[35];
  char var_name[256];
  struct switch_channel_t * channel;
  struct switch_rtp_stats_t * stats;
  uint32_t D.46662;
  uint32_t D.46657;
  switch_size_t D.46652;
  switch_size_t D.46647;
  switch_size_t D.46642;
  switch_size_t D.46637;
  switch_size_t D.46632;
  switch_size_t D.46627;
  switch_size_t D.46622;
  double D.46617;
  double D.46612;
  switch_size_t D.46607;
  double D.46602;
  double D.46597;
  double D.46592;
  double D.46587;
  double D.46582;
  switch_size_t D.46577;
  switch_size_t D.46572;
  switch_size_t D.46567;
  switch_size_t D.46562;
  switch_size_t D.46557;
  switch_size_t D.46552;
  switch_size_t D.46547;
  switch_size_t D.46542;
  switch_size_t D.46537;
  switch_size_t D.46532;
  double D.46527;
  double D.46526;

<bb 2>:
  stats_30 = switch_core_media_get_stats (session_28(D), type_29(D), 0B);
  # DEBUG stats => stats_30
  channel_31 = switch_core_session_get_channel (session_28(D));
  # DEBUG channel => channel_31
  var_name = "";
  var_val = "";
  if (stats_30 != 0B)
    goto <bb 3>;
  else
    goto <bb 58>;

<bb 3>:
  D.46526_32 = stats_30->inbound.variance;
  D.46527_33 = sqrt (D.46526_32);
  stats_30->inbound.std_deviation = D.46527_33;
  if (prefix_34(D) != 0B)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:

<bb 5>:
  # prefix_1 = PHI <prefix_34(D)(4), ""(3)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_1, "in_raw_bytes");
  D.46532_37 = stats_30->inbound.raw_bytes;
  switch_snprintf (&var_val, 35, "%d", D.46532_37);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:

<bb 7>:
  # prefix_2 = PHI <prefix_34(D)(6), ""(5)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_2, "in_media_bytes");
  D.46537_40 = stats_30->inbound.media_bytes;
  switch_snprintf (&var_val, 35, "%d", D.46537_40);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:

<bb 9>:
  # prefix_3 = PHI <prefix_34(D)(8), ""(7)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_3, "in_packet_count");
  D.46542_43 = stats_30->inbound.packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46542_43);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:

<bb 11>:
  # prefix_4 = PHI <prefix_34(D)(10), ""(9)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_4, "in_media_packet_count");
  D.46547_46 = stats_30->inbound.media_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46547_46);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:

<bb 13>:
  # prefix_5 = PHI <prefix_34(D)(12), ""(11)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_5, "in_skip_packet_count");
  D.46552_49 = stats_30->inbound.skip_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46552_49);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:

<bb 15>:
  # prefix_6 = PHI <prefix_34(D)(14), ""(13)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_6, "in_jitter_packet_count");
  D.46557_52 = stats_30->inbound.jb_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46557_52);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:

<bb 17>:
  # prefix_7 = PHI <prefix_34(D)(16), ""(15)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_7, "in_dtmf_packet_count");
  D.46562_55 = stats_30->inbound.dtmf_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46562_55);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:

<bb 19>:
  # prefix_8 = PHI <prefix_34(D)(18), ""(17)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_8, "in_cng_packet_count");
  D.46567_58 = stats_30->inbound.cng_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46567_58);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:

<bb 21>:
  # prefix_9 = PHI <prefix_34(D)(20), ""(19)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_9, "in_flush_packet_count");
  D.46572_61 = stats_30->inbound.flush_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46572_61);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:

<bb 23>:
  # prefix_10 = PHI <prefix_34(D)(22), ""(21)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_10, "in_largest_jb_size");
  D.46577_64 = stats_30->inbound.largest_jb_size;
  switch_snprintf (&var_val, 35, "%d", D.46577_64);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:

<bb 25>:
  # prefix_11 = PHI <prefix_34(D)(24), ""(23)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_11, "in_jitter_min_variance");
  D.46582_67 = stats_30->inbound.min_variance;
  switch_snprintf (&var_val, 35, "%0.2f", D.46582_67);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:

<bb 27>:
  # prefix_12 = PHI <prefix_34(D)(26), ""(25)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_12, "in_jitter_max_variance");
  D.46587_70 = stats_30->inbound.max_variance;
  switch_snprintf (&var_val, 35, "%0.2f", D.46587_70);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:

<bb 29>:
  # prefix_13 = PHI <prefix_34(D)(28), ""(27)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_13, "in_jitter_loss_rate");
  D.46592_73 = stats_30->inbound.lossrate;
  switch_snprintf (&var_val, 35, "%0.2f", D.46592_73);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:

<bb 31>:
  # prefix_14 = PHI <prefix_34(D)(30), ""(29)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_14, "in_jitter_burst_rate");
  D.46597_76 = stats_30->inbound.burstrate;
  switch_snprintf (&var_val, 35, "%0.2f", D.46597_76);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 32>;
  else
    goto <bb 33>;

<bb 32>:

<bb 33>:
  # prefix_15 = PHI <prefix_34(D)(32), ""(31)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_15, "in_mean_interval");
  D.46602_79 = stats_30->inbound.mean_interval;
  switch_snprintf (&var_val, 35, "%0.2f", D.46602_79);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:

<bb 35>:
  # prefix_16 = PHI <prefix_34(D)(34), ""(33)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_16, "in_flaw_total");
  D.46607_82 = stats_30->inbound.flaws;
  switch_snprintf (&var_val, 35, "%d", D.46607_82);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:

<bb 37>:
  # prefix_17 = PHI <prefix_34(D)(36), ""(35)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_17, "in_quality_percentage");
  D.46612_85 = stats_30->inbound.R;
  switch_snprintf (&var_val, 35, "%0.2f", D.46612_85);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:

<bb 39>:
  # prefix_18 = PHI <prefix_34(D)(38), ""(37)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_18, "in_mos");
  D.46617_88 = stats_30->inbound.mos;
  switch_snprintf (&var_val, 35, "%0.2f", D.46617_88);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:

<bb 41>:
  # prefix_19 = PHI <prefix_34(D)(40), ""(39)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_19, "out_raw_bytes");
  D.46622_91 = stats_30->outbound.raw_bytes;
  switch_snprintf (&var_val, 35, "%d", D.46622_91);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 42>;
  else
    goto <bb 43>;

<bb 42>:

<bb 43>:
  # prefix_20 = PHI <prefix_34(D)(42), ""(41)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_20, "out_media_bytes");
  D.46627_94 = stats_30->outbound.media_bytes;
  switch_snprintf (&var_val, 35, "%d", D.46627_94);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:

<bb 45>:
  # prefix_21 = PHI <prefix_34(D)(44), ""(43)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_21, "out_packet_count");
  D.46632_97 = stats_30->outbound.packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46632_97);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:

<bb 47>:
  # prefix_22 = PHI <prefix_34(D)(46), ""(45)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_22, "out_media_packet_count");
  D.46637_100 = stats_30->outbound.media_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46637_100);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:

<bb 49>:
  # prefix_23 = PHI <prefix_34(D)(48), ""(47)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_23, "out_skip_packet_count");
  D.46642_103 = stats_30->outbound.skip_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46642_103);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 50>;
  else
    goto <bb 51>;

<bb 50>:

<bb 51>:
  # prefix_24 = PHI <prefix_34(D)(50), ""(49)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_24, "out_dtmf_packet_count");
  D.46647_106 = stats_30->outbound.dtmf_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46647_106);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 52>;
  else
    goto <bb 53>;

<bb 52>:

<bb 53>:
  # prefix_25 = PHI <prefix_34(D)(52), ""(51)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_25, "out_cng_packet_count");
  D.46652_109 = stats_30->outbound.cng_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46652_109);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 54>;
  else
    goto <bb 55>;

<bb 54>:

<bb 55>:
  # prefix_26 = PHI <prefix_34(D)(54), ""(53)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_26, "rtcp_packet_count");
  D.46657_112 = stats_30->rtcp.packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46657_112);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 56>;
  else
    goto <bb 57>;

<bb 56>:

<bb 57>:
  # prefix_27 = PHI <prefix_34(D)(56), ""(55)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", prefix_27, "rtcp_octet_count");
  D.46662_115 = stats_30->rtcp.octet_count;
  switch_snprintf (&var_val, 35, "%d", D.46662_115);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);

<bb 58>:
  return;

}



;; Function switch_core_media_set_stats (switch_core_media_set_stats)

switch_core_media_set_stats (struct switch_core_session_t * session)
{
  struct switch_media_handle_t * D.46520;

<bb 2>:
  D.46520_2 = session_1(D)->media_handle;
  if (D.46520_2 == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

<bb 3>:
  set_stats (session_1(D), 0, "audio");
  set_stats (session_1(D), 1, "video");

<bb 4>:
  return;

}



;; Function switch_core_media_udptl_mode (switch_core_media_udptl_mode)

switch_core_media_udptl_mode (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_udptl_mode";
  struct switch_media_handle_t * smh;
  uint8_t D.40722;
  struct switch_rtp_t * D.40721;
  switch_status_t D.40720;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8066, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40721_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40722_7 = switch_rtp_ready (D.40721_6);
  if (D.40722_7 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40721_8 = smh_3->engines[type_5(D)].rtp_session;
  D.40720_9 = switch_rtp_udptl_mode (D.40721_8);

<bb 7>:
  # D.40720_1 = PHI <1(4), D.40720_9(6), 1(5)>
  return D.40720_1;

}



;; Function switch_core_media_get_jb (switch_core_media_get_jb)

switch_core_media_get_jb (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[25] = "switch_core_media_get_jb";
  struct switch_media_handle_t * smh;
  uint8_t D.40712;
  struct switch_rtp_t * D.40711;
  struct stfu_instance_t * D.40710;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8084, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40711_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40712_7 = switch_rtp_ready (D.40711_6);
  if (D.40712_7 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40711_8 = smh_3->engines[type_5(D)].rtp_session;
  D.40710_9 = switch_rtp_get_jitter_buffer (D.40711_8);

<bb 7>:
  # D.40710_1 = PHI <0B(4), D.40710_9(6), 0B(5)>
  return D.40710_1;

}



;; Function switch_core_media_set_sdp_codec_string (switch_core_media_set_sdp_codec_string)

switch_core_media_set_sdp_codec_string (struct switch_core_session_t * session, const char * r_sdp, switch_sdp_type_t sdp_type)
{
  static const char __PRETTY_FUNCTION__[39] = "switch_core_media_set_sdp_codec_string";
  struct switch_media_handle_t * smh;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  const char * D.40404;
  int D.40399;
  size_t D.40398;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8105, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 9>;
  else
    goto <bb 5>;

<bb 5>:
  D.40398_4 = strlen (r_sdp_3(D));
  D.40399_5 = (int) D.40398_4;
  parser_6 = sdp_parse (0B, r_sdp_3(D), D.40399_5, 0);
  # DEBUG parser => parser_6
  if (parser_6 != 0B)
    goto <bb 6>;
  else
    goto <bb 9>;

<bb 6>:
  sdp_7 = sdp_session (parser_6);
  # DEBUG sdp => sdp_7
  if (sdp_7 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40404_8 = switch_core_media_get_codec_string (session_1(D));
  switch_core_media_set_r_sdp_codec_string (session_1(D), D.40404_8, sdp_7, sdp_type_9(D));

<bb 8>:
  sdp_parser_free (parser_6);

<bb 9>:
  return;

}



;; Function switch_core_media_codec_chosen (switch_core_media_codec_chosen)

switch_core_media_codec_chosen (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_codec_chosen";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  char * D.40390;
  struct payload_map_t * D.40389;
  switch_status_t D.40386;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8407, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  engine_8 = &smh_3->engines[type_6(D)]{lb: 0 sz: 11416};
  # DEBUG engine => engine_8
  D.40389_9 = engine_8->cur_payload_map;
  D.40390_10 = D.40389_9->iananame;
  if (D.40390_10 != 0B)
    goto <bb 7>;
  else
    goto <bb 6>;

<bb 6>:

<bb 7>:
  # D.40386_1 = PHI <1(4), 0(5), 1(6)>
  return D.40386_1;

}



;; Function switch_core_media_check_outgoing_proxy (switch_core_media_check_outgoing_proxy)

switch_core_media_check_outgoing_proxy (struct switch_core_session_t * session, struct switch_core_session_t * o_session)
{
  static const char __func__[39] = "switch_core_media_check_outgoing_proxy";
  static const char __PRETTY_FUNCTION__[39] = "switch_core_media_check_outgoing_proxy";
  const char * r_sdp;
  struct switch_media_handle_t * smh;
  struct payload_map_t * D.40380;
  const char * D.40377;
  char * D.40376;
  struct payload_map_t * D.40375;
  struct switch_channel_t * D.40374;
  uint32_t D.40369;
  struct switch_channel_t * D.40368;

<bb 2>:
  # DEBUG r_sdp => 0B
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8430, &__PRETTY_FUNCTION__);

<bb 4>:
  D.40368_4 = o_session_3(D)->channel;
  D.40369_5 = switch_channel_test_flag (D.40368_4, 29);
  if (D.40369_5 == 0)
    goto <bb 8>;
  else
    goto <bb 5>;

<bb 5>:
  smh_6 = session_2(D)->media_handle;
  # DEBUG smh => smh_6
  if (smh_6 == 0B)
    goto <bb 8>;
  else
    goto <bb 6>;

<bb 6>:
  D.40368_7 = o_session_3(D)->channel;
  r_sdp_8 = switch_channel_get_variable_dup (D.40368_7, "switch_r_sdp", 1, -1);
  # DEBUG r_sdp => r_sdp_8
  # DEBUG D#40 => &smh_6->engines
  # DEBUG a_engine => D#40
  # DEBUG D#41 => &smh_6->engines[1]
  # DEBUG v_engine => D#41
  D.40374_11 = session_2(D)->channel;
  switch_channel_set_flag_value (D.40374_11, 29, 1);
  D.40375_12 = MEM[(struct switch_rtp_engine_t *)smh_6 + 80B].cur_payload_map;
  D.40376_13 = switch_core_perform_session_strdup (session_2(D), "PROXY", "src/switch_core_media.c", &__func__, 8447);
  D.40375_12->iananame = D.40376_13;
  D.40375_14 = MEM[(struct switch_rtp_engine_t *)smh_6 + 80B].cur_payload_map;
  D.40375_14->rm_rate = 8000;
  D.40375_15 = MEM[(struct switch_rtp_engine_t *)smh_6 + 80B].cur_payload_map;
  D.40375_15->adv_rm_rate = 8000;
  D.40375_16 = MEM[(struct switch_rtp_engine_t *)smh_6 + 80B].cur_payload_map;
  D.40375_16->codec_ms = 20;
  D.40377_17 = switch_stristr ("m=video", r_sdp_8);
  if (D.40377_17 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  switch_core_media_choose_port (session_2(D), 1, 1);
  D.40380_18 = MEM[(struct switch_rtp_engine_t *)smh_6 + 11496B].cur_payload_map;
  D.40380_18->rm_encoding = "PROXY-VID";
  D.40380_19 = MEM[(struct switch_rtp_engine_t *)smh_6 + 11496B].cur_payload_map;
  D.40380_19->rm_rate = 90000;
  D.40380_20 = MEM[(struct switch_rtp_engine_t *)smh_6 + 11496B].cur_payload_map;
  D.40380_20->adv_rm_rate = 90000;
  D.40380_21 = MEM[(struct switch_rtp_engine_t *)smh_6 + 11496B].cur_payload_map;
  D.40380_21->codec_ms = 0;
  D.40374_22 = session_2(D)->channel;
  switch_channel_set_flag_value (D.40374_22, 23, 1);
  D.40374_23 = session_2(D)->channel;
  switch_channel_set_flag_value (D.40374_23, 98, 1);

<bb 8>:
  return;

}



;; Function switch_core_media_proxy_codec (switch_core_media_proxy_codec)

switch_core_media_proxy_codec (struct switch_core_session_t * session, const char * r_sdp)
{
  const char D.48273;
  int D.48272;
  struct sdp_rtpmap_t * map;
  static const char __func__[30] = "switch_core_media_proxy_codec";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_proxy_codec";
  struct switch_media_handle_t * smh;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  struct sdp_media_t * m;
  uint32_t D.40364;
  struct switch_core_media_params_t * D.40363;
  uint32_t ptime.4;
  long unsigned int D.40361;
  char * D.40360;
  const char * D.40359;
  struct payload_map_t * D.40358;
  int D.40347;
  sdp_proto_e D.40344;
  const char * D.40343;
  int D.40340;
  const char * D.40336;
  int D.40331;
  size_t D.40330;

<bb 2>:
  # DEBUG parser => 0B
  # DEBUG ptime => 0
  # DEBUG dptime => 0
  if (session_11(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8482, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_12 = session_11(D)->media_handle;
  # DEBUG smh => smh_12
  if (smh_12 == 0B)
    goto <bb 31>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#42 => &smh_12->engines
  # DEBUG a_engine => D#42
  D.40330_15 = strlen (r_sdp_14(D));
  D.40331_16 = (int) D.40330_15;
  parser_17 = sdp_parse (0B, r_sdp_14(D), D.40331_16, 0);
  # DEBUG parser => parser_17
  if (parser_17 == 0B)
    goto <bb 31>;
  else
    goto <bb 6>;

<bb 6>:
  sdp_18 = sdp_session (parser_17);
  # DEBUG sdp => sdp_18
  if (sdp_18 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  sdp_parser_free (parser_17);
  goto <bb 31>;

<bb 8>:
  attr_19 = sdp_18->sdp_attributes;
  # DEBUG attr => attr_19
  goto <bb 17>;

<bb 9>:
  D.40336_20 = attr_2->a_name;
  # DEBUG s => D.40336_20
  if (D.40336_20 == 0B)
    goto <bb 12>;
  else
    goto <bb 10>;

<bb 10>:
  D.48273_65 = *D.40336_20;
  if (D.48273_65 == 0)
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:

<bb 12>:
  # D.48272_66 = PHI <1(9), 1(10), 0(11)>
  if (D.48272_66 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  goto <bb 16>;

<bb 14>:
  D.40336_22 = attr_2->a_name;
  D.40340_23 = strcasecmp (D.40336_22, "ptime");
  if (D.40340_23 == 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.40343_24 = attr_2->a_value;
  # DEBUG __nptr => D.40343_24
  dptime_67 = strtol (D.40343_24, 0B, 10);
  # DEBUG dptime => NULL

<bb 16>:
  # dptime_6 = PHI <dptime_7(13), dptime_7(14), dptime_67(15)>
  # DEBUG dptime => dptime_6
  attr_26 = attr_2->a_next;
  # DEBUG attr => attr_26

<bb 17>:
  # attr_2 = PHI <attr_19(8), attr_26(16)>
  # dptime_7 = PHI <0(8), dptime_6(16)>
  # DEBUG dptime => dptime_7
  # DEBUG attr => attr_2
  if (attr_2 != 0B)
    goto <bb 9>;
  else
    goto <bb 18>;

<bb 18>:
  m_27 = sdp_18->sdp_media;
  # DEBUG m => m_27
  goto <bb 29>;

<bb 19>:
  # DEBUG ptime => dptime_7
  D.40344_29 = m_1->m_proto;
  if (D.40344_29 == 256)
    goto <bb 20>;
  else
    goto <bb 28>;

<bb 20>:
  attr_30 = m_1->m_attributes;
  # DEBUG attr => attr_30
  goto <bb 25>;

<bb 21>:
  D.40336_31 = attr_3->a_name;
  D.40347_32 = strcasecmp (D.40336_31, "ptime");
  if (D.40347_32 == 0)
    goto <bb 22>;
  else
    goto <bb 24>;

<bb 22>:
  D.40343_33 = attr_3->a_value;
  if (D.40343_33 != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  D.40343_34 = attr_3->a_value;
  # DEBUG __nptr => D.40343_34
  ptime_68 = strtol (D.40343_34, 0B, 10);
  # DEBUG ptime => NULL

<bb 24>:
  # ptime_4 = PHI <ptime_5(21), ptime_68(23), ptime_5(22)>
  # DEBUG ptime => ptime_4
  attr_39 = attr_3->a_next;
  # DEBUG attr => attr_39

<bb 25>:
  # attr_3 = PHI <attr_30(20), attr_39(24)>
  # ptime_5 = PHI <dptime_7(20), ptime_4(24)>
  # DEBUG ptime => ptime_5
  # DEBUG attr => attr_3
  if (attr_3 != 0B)
    goto <bb 21>;
  else
    goto <bb 26>;

<bb 26>:
  map_40 = m_1->m_rtpmaps;
  # DEBUG map => map_40
  if (map_40 != 0B)
    goto <bb 27>;
  else
    goto <bb 30>;

<bb 27>:
  D.40358_41 = MEM[(struct switch_rtp_engine_t *)smh_12 + 80B].cur_payload_map;
  D.40359_42 = map_40->rm_encoding;
  D.40360_43 = switch_core_perform_session_strdup (session_11(D), D.40359_42, "src/switch_core_media.c", &__func__, 8527);
  D.40358_41->iananame = D.40360_43;
  D.40358_44 = MEM[(struct switch_rtp_engine_t *)smh_12 + 80B].cur_payload_map;
  D.40361_45 = map_40->rm_rate;
  D.40358_44->rm_rate = D.40361_45;
  D.40358_46 = MEM[(struct switch_rtp_engine_t *)smh_12 + 80B].cur_payload_map;
  D.40361_47 = map_40->rm_rate;
  D.40358_46->adv_rm_rate = D.40361_47;
  D.40358_48 = MEM[(struct switch_rtp_engine_t *)smh_12 + 80B].cur_payload_map;
  ptime.4_49 = (uint32_t) ptime_5;
  D.40358_48->codec_ms = ptime.4_49;
  D.40363_50 = smh_12->mparams;
  D.40364_51 = D.40363_50->codec_flags;
  switch_core_media_set_codec (session_11(D), 0, D.40364_51);
  goto <bb 30>;

<bb 28>:
  m_52 = m_1->m_next;
  # DEBUG m => m_52

<bb 29>:
  # m_1 = PHI <m_27(18), m_52(28)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 19>;
  else
    goto <bb 30>;

<bb 30>:
  sdp_parser_free (parser_17);

<bb 31>:
  return;

}



;; Function switch_core_media_recover_session (switch_core_media_recover_session)

switch_core_media_recover_session (struct switch_core_session_t * session)
{
  int D.48330;
  int D.48327;
  int D.48324;
  int D.48321;
  int D.48318;
  int D.48315;
  int D.48312;
  const char D.48309;
  int D.48308;
  const char D.48305;
  int D.48304;
  int D.48301;
  int D.48298;
  int D.48295;
  int D.48292;
  int D.48289;
  int D.48286;
  int D.48283;
  int idx;
  char * tmp_codec_string;
  const char * vtmp;
  static const char __func__[34] = "switch_core_media_recover_session";
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_recover_session";
  struct switch_media_handle_t * smh;
  const char * tmp;
  const char * r_port;
  const char * r_ip;
  const char * a_ip;
  const char * port;
  const char * ip;
  switch_payload_t D.40294;
  switch_payload_t D.40293;
  uint8_t D.40290;
  unsigned char[64] * D.40289;
  uint32_t D.40288;
  int D.40287;
  switch_size_t D.40286;
  int D.40285;
  unsigned char[64] * D.40284;
  uint32_t idx.2;
  struct switch_rtp_t * D.40282;
  struct switch_channel_t * D.40281;
  char * D.40280;
  struct switch_secure_settings_t * D.40279;
  char * D.40276;
  char * D.40273;
  switch_rtp_crypto_key_type_t D.40272;
  switch_status_t D.40267;
  short unsigned int D.40266;
  switch_port_t D.40262;
  short unsigned int D.40261;
  uint32_t D.40259;
  long unsigned int D.40255;
  long unsigned int D.40254;
  const char * D.40250;
  const char * D.40249;
  unsigned char D.40248;
  switch_payload_t D.40244;
  unsigned char D.40243;
  struct payload_map_t * D.40241;
  uint32_t D.40236;
  short unsigned int D.40235;
  _Bool D.40231;
  _Bool D.40230;
  _Bool D.40229;
  char * D.40228;
  char * D.40224;
  char * D.40223;
  switch_port_t D.40219;
  short unsigned int D.40218;
  char * D.40216;
  uint32_t D.40215;
  unsigned char D.40214;
  switch_payload_t D.40210;
  unsigned char D.40209;
  uint32_t D.40205;
  long unsigned int D.40201;
  long unsigned int D.40200;
  unsigned char D.40196;
  unsigned char D.40192;
  int D.40188;
  int D.40187;
  const struct switch_codec_implementation_t *[50] * D.40186;
  int D.40185;
  unsigned int D.40184;
  char *[50] * D.40183;
  struct switch_core_session_t * D.40182;
  char * iftmp.0;
  char * D.40169;
  struct switch_core_media_params_t * D.40168;
  const char * D.40165;
  char * D.40164;
  const char * D.40163;
  struct payload_map_t * D.40162;
  _Bool D.40161;
  _Bool D.40160;
  _Bool D.40159;
  uint32_t D.40157;
  struct switch_channel_t * D.40154;

<bb 2>:
  if (session_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8557, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_4 = session_3(D)->media_handle;
  # DEBUG smh => smh_4
  if (smh_4 == 0B)
    goto <bb 58>;
  else
    goto <bb 5>;

<bb 5>:
  D.40154_5 = session_3(D)->channel;
  ip_6 = switch_channel_get_variable_dup (D.40154_5, "local_media_ip", 1, -1);
  # DEBUG ip => ip_6
  D.40154_7 = session_3(D)->channel;
  port_8 = switch_channel_get_variable_dup (D.40154_7, "local_media_port", 1, -1);
  # DEBUG port => port_8
  D.40154_9 = session_3(D)->channel;
  D.40157_10 = switch_channel_test_flag (D.40154_9, 15);
  if (D.40157_10 != 0)
    goto <bb 58>;
  else
    goto <bb 6>;

<bb 6>:
  D.40159_11 = ip_6 == 0B;
  D.40160_12 = port_8 == 0B;
  D.40161_13 = D.40159_11 || D.40160_12;
  if (D.40161_13 != 0)
    goto <bb 58>;
  else
    goto <bb 7>;

<bb 7>:
  D.40154_14 = session_3(D)->channel;
  a_ip_15 = switch_channel_get_variable_dup (D.40154_14, "advertised_media_ip", 1, -1);
  # DEBUG a_ip => a_ip_15
  D.40154_16 = session_3(D)->channel;
  r_ip_17 = switch_channel_get_variable_dup (D.40154_16, "remote_media_ip", 1, -1);
  # DEBUG r_ip => r_ip_17
  D.40154_18 = session_3(D)->channel;
  r_port_19 = switch_channel_get_variable_dup (D.40154_18, "remote_media_port", 1, -1);
  # DEBUG r_port => r_port_19
  # DEBUG D#44 => &smh_4->engines
  # DEBUG a_engine => D#44
  # DEBUG D#43 => &smh_4->engines[1]
  # DEBUG v_engine => D#43
  D.40162_23 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].cur_payload_map;
  D.40154_24 = session_3(D)->channel;
  D.40163_25 = switch_channel_get_variable_dup (D.40154_24, "rtp_use_codec_name", 1, -1);
  D.40162_23->rm_encoding = D.40163_25;
  D.40164_26 = D.40162_23->rm_encoding;
  D.40162_23->iananame = D.40164_26;
  D.40162_27 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].cur_payload_map;
  D.40154_28 = session_3(D)->channel;
  D.40165_29 = switch_channel_get_variable_dup (D.40154_28, "rtp_use_codec_fmtp", 1, -1);
  D.40162_27->rm_fmtp = D.40165_29;
  D.40154_30 = session_3(D)->channel;
  tmp_31 = switch_channel_get_variable_dup (D.40154_30, "switch_r_sdp", 1, -1);
  # DEBUG tmp => tmp_31
  if (tmp_31 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.40168_32 = smh_4->mparams;
  D.40169_33 = switch_core_perform_session_strdup (session_3(D), tmp_31, "src/switch_core_media.c", &__func__, 8581);
  D.40168_32->remote_sdp_str = D.40169_33;

<bb 9>:
  D.40154_34 = session_3(D)->channel;
  tmp_35 = switch_channel_get_variable_dup (D.40154_34, "rtp_last_audio_codec_string", 1, -1);
  # DEBUG tmp => tmp_35
  if (tmp_35 != 0B)
    goto <bb 10>;
  else
    goto <bb 15>;

<bb 10>:
  D.40154_36 = session_3(D)->channel;
  vtmp_37 = switch_channel_get_variable_dup (D.40154_36, "rtp_last_video_codec_string", 1, -1);
  # DEBUG vtmp => vtmp_37
  D.40154_38 = session_3(D)->channel;
  if (vtmp_37 != 0B)
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:

<bb 12>:
  # iftmp.0_1 = PHI <","(10), ""(11)>
  if (vtmp_37 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:

<bb 14>:
  # vtmp_2 = PHI <vtmp_37(13), ""(12)>
  switch_channel_set_variable_printf (D.40154_38, "rtp_use_codec_string", "%s%s%s", tmp_35, iftmp.0_1, vtmp_2);

<bb 15>:
  D.40154_43 = session_3(D)->channel;
  tmp_44 = switch_channel_get_variable_dup (D.40154_43, "rtp_use_codec_string", 1, -1);
  # DEBUG tmp => tmp_44
  if (tmp_44 != 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.40182_45 = smh_4->session;
  tmp_codec_string_46 = switch_core_perform_session_strdup (D.40182_45, tmp_44, "src/switch_core_media.c", &__func__, 8591);
  # DEBUG tmp_codec_string => tmp_codec_string_46
  D.40183_47 = &smh_4->codec_order;
  D.40184_48 = switch_separate_string (tmp_codec_string_46, 44, D.40183_47, 50);
  D.40185_49 = (int) D.40184_48;
  smh_4->codec_order_last = D.40185_49;
  D.40168_50 = smh_4->mparams;
  D.40186_51 = &smh_4->codecs;
  D.40183_52 = &smh_4->codec_order;
  D.40187_53 = smh_4->codec_order_last;
  D.40188_54 = switch_loadable_module_get_codecs_sorted (D.40186_51, 50, D.40183_52, D.40187_53);
  D.40168_50->num_codecs = D.40188_54;

<bb 17>:
  D.40154_55 = session_3(D)->channel;
  tmp_56 = switch_channel_get_variable_dup (D.40154_55, "rtp_2833_send_payload", 1, -1);
  # DEBUG tmp => tmp_56
  if (tmp_56 != 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.40168_57 = smh_4->mparams;
  # DEBUG __nptr => tmp_56
  D.48283_317 = strtol (tmp_56, 0B, 10);
  D.40192_59 = (unsigned char) D.48283_317;
  D.40168_57->te = D.40192_59;

<bb 19>:
  D.40154_60 = session_3(D)->channel;
  tmp_61 = switch_channel_get_variable_dup (D.40154_60, "rtp_2833_recv_payload", 1, -1);
  # DEBUG tmp => tmp_61
  if (tmp_61 != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.40168_62 = smh_4->mparams;
  # DEBUG __nptr => tmp_61
  D.48286_318 = strtol (tmp_61, 0B, 10);
  D.40196_64 = (unsigned char) D.48286_318;
  D.40168_62->recv_te = D.40196_64;

<bb 21>:
  D.40154_65 = session_3(D)->channel;
  tmp_66 = switch_channel_get_variable_dup (D.40154_65, "rtp_use_codec_rate", 1, -1);
  # DEBUG tmp => tmp_66
  if (tmp_66 != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.40162_67 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].cur_payload_map;
  # DEBUG __nptr => tmp_66
  D.48289_319 = strtol (tmp_66, 0B, 10);
  D.40200_69 = (long unsigned int) D.48289_319;
  D.40162_67->rm_rate = D.40200_69;
  D.40162_71 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].cur_payload_map;
  D.40201_72 = D.40162_71->rm_rate;
  D.40162_71->adv_rm_rate = D.40201_72;

<bb 23>:
  D.40154_73 = session_3(D)->channel;
  tmp_74 = switch_channel_get_variable_dup (D.40154_73, "rtp_use_codec_ptime", 1, -1);
  # DEBUG tmp => tmp_74
  if (tmp_74 != 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  D.40162_75 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].cur_payload_map;
  # DEBUG __nptr => tmp_74
  D.48292_320 = strtol (tmp_74, 0B, 10);
  D.40205_77 = (uint32_t) D.48292_320;
  D.40162_75->codec_ms = D.40205_77;

<bb 25>:
  D.40154_78 = session_3(D)->channel;
  tmp_79 = switch_channel_get_variable_dup (D.40154_78, "rtp_use_pt", 1, -1);
  # DEBUG tmp => tmp_79
  if (tmp_79 != 0B)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  D.40162_81 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].cur_payload_map;
  # DEBUG __nptr => tmp_79
  D.48295_321 = strtol (tmp_79, 0B, 10);
  D.40209_83 = (unsigned char) D.48295_321;
  D.40162_81->agreed_pt = D.40209_83;
  D.40210_84 = D.40162_81->agreed_pt;
  D.40162_81->pt = D.40210_84;

<bb 27>:
  D.40154_85 = session_3(D)->channel;
  tmp_86 = switch_channel_get_variable_dup (D.40154_85, "rtp_audio_recv_pt", 1, -1);
  # DEBUG tmp => tmp_86
  if (tmp_86 != 0B)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  D.40162_87 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].cur_payload_map;
  # DEBUG __nptr => tmp_86
  D.48298_322 = strtol (tmp_86, 0B, 10);
  D.40214_89 = (unsigned char) D.48298_322;
  D.40162_87->recv_pt = D.40214_89;

<bb 29>:
  D.40168_90 = smh_4->mparams;
  D.40215_91 = D.40168_90->codec_flags;
  switch_core_media_set_codec (session_3(D), 1, D.40215_91);
  D.40168_92 = smh_4->mparams;
  D.40168_92->extrtpip = ip_6;
  D.40216_93 = D.40168_92->extrtpip;
  MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].adv_sdp_ip = D.40216_93;
  # DEBUG __nptr => port_8
  D.48301_323 = strtol (port_8, 0B, 10);
  D.40218_95 = (short unsigned int) D.48301_323;
  MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].local_sdp_port = D.40218_95;
  D.40219_96 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].local_sdp_port;
  MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].adv_sdp_port = D.40219_96;
  # DEBUG s => ip_6
  if (ip_6 == 0B)
    goto <bb 32>;
  else
    goto <bb 30>;

<bb 30>:
  D.48305_324 = *ip_6;
  if (D.48305_324 == 0)
    goto <bb 32>;
  else
    goto <bb 31>;

<bb 31>:

<bb 32>:
  # D.48304_325 = PHI <1(29), 1(30), 0(31)>
  if (D.48304_325 == 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.40223_98 = switch_core_perform_session_strdup (session_3(D), ip_6, "src/switch_core_media.c", &__func__, 8627);
  MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].local_sdp_ip = D.40223_98;
  D.40168_99 = smh_4->mparams;
  D.40224_100 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].local_sdp_ip;
  D.40168_99->rtpip = D.40224_100;

<bb 34>:
  # DEBUG s => a_ip_15
  if (a_ip_15 == 0B)
    goto <bb 37>;
  else
    goto <bb 35>;

<bb 35>:
  D.48309_326 = *a_ip_15;
  if (D.48309_326 == 0)
    goto <bb 37>;
  else
    goto <bb 36>;

<bb 36>:

<bb 37>:
  # D.48308_327 = PHI <1(34), 1(35), 0(36)>
  if (D.48308_327 == 0)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.40228_102 = switch_core_perform_session_strdup (session_3(D), a_ip_15, "src/switch_core_media.c", &__func__, 8632);
  MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].adv_sdp_ip = D.40228_102;

<bb 39>:
  D.40229_103 = r_ip_17 != 0B;
  D.40230_104 = r_port_19 != 0B;
  D.40231_105 = D.40229_103 && D.40230_104;
  if (D.40231_105 != 0)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:
  D.40162_106 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].cur_payload_map;
  D.40162_106->remote_sdp_ip = r_ip_17;
  D.40162_107 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].cur_payload_map;
  # DEBUG __nptr => r_port_19
  D.48312_328 = strtol (r_port_19, 0B, 10);
  D.40235_109 = (short unsigned int) D.48312_328;
  D.40162_107->remote_sdp_port = D.40235_109;

<bb 41>:
  D.40154_110 = session_3(D)->channel;
  D.40236_111 = switch_channel_test_flag (D.40154_110, 23);
  if (D.40236_111 != 0)
    goto <bb 42>;
  else
    goto <bb 52>;

<bb 42>:
  D.40154_112 = session_3(D)->channel;
  tmp_113 = switch_channel_get_variable_dup (D.40154_112, "rtp_use_video_pt", 1, -1);
  # DEBUG tmp => tmp_113
  if (tmp_113 != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  D.40241_115 = MEM[(struct switch_rtp_engine_t *)smh_4 + 11496B].cur_payload_map;
  # DEBUG __nptr => tmp_113
  D.48315_329 = strtol (tmp_113, 0B, 10);
  D.40243_117 = (unsigned char) D.48315_329;
  D.40241_115->agreed_pt = D.40243_117;
  D.40244_118 = D.40241_115->agreed_pt;
  D.40241_115->pt = D.40244_118;

<bb 44>:
  D.40154_119 = session_3(D)->channel;
  tmp_120 = switch_channel_get_variable_dup (D.40154_119, "rtp_video_recv_pt", 1, -1);
  # DEBUG tmp => tmp_120
  if (tmp_120 != 0B)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  D.40241_121 = MEM[(struct switch_rtp_engine_t *)smh_4 + 11496B].cur_payload_map;
  # DEBUG __nptr => tmp_120
  D.48318_330 = strtol (tmp_120, 0B, 10);
  D.40248_123 = (unsigned char) D.48318_330;
  D.40241_121->recv_pt = D.40248_123;

<bb 46>:
  D.40241_124 = MEM[(struct switch_rtp_engine_t *)smh_4 + 11496B].cur_payload_map;
  D.40154_125 = session_3(D)->channel;
  D.40249_126 = switch_channel_get_variable_dup (D.40154_125, "rtp_use_video_codec_name", 1, -1);
  D.40241_124->rm_encoding = D.40249_126;
  D.40241_127 = MEM[(struct switch_rtp_engine_t *)smh_4 + 11496B].cur_payload_map;
  D.40154_128 = session_3(D)->channel;
  D.40250_129 = switch_channel_get_variable_dup (D.40154_128, "rtp_use_video_codec_fmtp", 1, -1);
  D.40241_127->rm_fmtp = D.40250_129;
  D.40154_130 = session_3(D)->channel;
  switch_channel_get_variable_dup (D.40154_130, "local_video_ip", 1, -1);
  # DEBUG ip => NULL
  D.40154_132 = session_3(D)->channel;
  port_133 = switch_channel_get_variable_dup (D.40154_132, "local_video_port", 1, -1);
  # DEBUG port => port_133
  D.40154_134 = session_3(D)->channel;
  r_ip_135 = switch_channel_get_variable_dup (D.40154_134, "remote_video_ip", 1, -1);
  # DEBUG r_ip => r_ip_135
  D.40154_136 = session_3(D)->channel;
  r_port_137 = switch_channel_get_variable_dup (D.40154_136, "remote_video_port", 1, -1);
  # DEBUG r_port => r_port_137
  D.40154_138 = session_3(D)->channel;
  switch_channel_set_flag_value (D.40154_138, 98, 1);
  D.40154_139 = session_3(D)->channel;
  tmp_140 = switch_channel_get_variable_dup (D.40154_139, "rtp_use_video_codec_rate", 1, -1);
  # DEBUG tmp => tmp_140
  if (tmp_140 != 0B)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.40241_141 = MEM[(struct switch_rtp_engine_t *)smh_4 + 11496B].cur_payload_map;
  # DEBUG __nptr => tmp_140
  D.48321_331 = strtol (tmp_140, 0B, 10);
  D.40254_143 = (long unsigned int) D.48321_331;
  D.40241_141->rm_rate = D.40254_143;
  D.40241_145 = MEM[(struct switch_rtp_engine_t *)smh_4 + 11496B].cur_payload_map;
  D.40255_146 = D.40241_145->rm_rate;
  D.40241_145->adv_rm_rate = D.40255_146;

<bb 48>:
  D.40154_147 = session_3(D)->channel;
  tmp_148 = switch_channel_get_variable_dup (D.40154_147, "rtp_use_video_codec_ptime", 1, -1);
  # DEBUG tmp => tmp_148
  if (tmp_148 != 0B)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  D.40241_149 = MEM[(struct switch_rtp_engine_t *)smh_4 + 11496B].cur_payload_map;
  # DEBUG __nptr => tmp_148
  D.48324_332 = strtol (tmp_148, 0B, 10);
  D.40259_151 = (uint32_t) D.48324_332;
  D.40241_149->codec_ms = D.40259_151;

<bb 50>:
  # DEBUG __nptr => port_133
  D.48327_333 = strtol (port_133, 0B, 10);
  D.40261_153 = (short unsigned int) D.48327_333;
  MEM[(struct switch_rtp_engine_t *)smh_4 + 11496B].local_sdp_port = D.40261_153;
  D.40262_154 = MEM[(struct switch_rtp_engine_t *)smh_4 + 11496B].local_sdp_port;
  MEM[(struct switch_rtp_engine_t *)smh_4 + 11496B].adv_sdp_port = D.40262_154;
  D.40229_155 = r_ip_135 != 0B;
  D.40230_156 = r_port_137 != 0B;
  D.40231_157 = D.40229_155 && D.40230_156;
  if (D.40231_157 != 0)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  D.40241_158 = MEM[(struct switch_rtp_engine_t *)smh_4 + 11496B].cur_payload_map;
  D.40241_158->remote_sdp_ip = r_ip_135;
  D.40241_159 = MEM[(struct switch_rtp_engine_t *)smh_4 + 11496B].cur_payload_map;
  # DEBUG __nptr => r_port_137
  D.48330_334 = strtol (r_port_137, 0B, 10);
  D.40266_161 = (short unsigned int) D.48330_334;
  D.40241_159->remote_sdp_port = D.40266_161;

<bb 52>:
  switch_core_media_gen_local_sdp (session_3(D), 0, 0B, 0, 0B, 1);
  switch_core_media_set_video_codec (session_3(D), 1);
  D.40267_162 = switch_core_media_activate_rtp (session_3(D));
  if (D.40267_162 != 0)
    goto <bb 58>;
  else
    goto <bb 53>;

<bb 53>:
  switch_core_session_get_recovery_crypto_key (session_3(D), 0);
  switch_core_session_get_recovery_crypto_key (session_3(D), 1);
  D.40154_163 = session_3(D)->channel;
  tmp_164 = switch_channel_get_variable_dup (D.40154_163, "rtp_last_audio_local_crypto_key", 1, -1);
  # DEBUG tmp => tmp_164
  if (tmp_164 != 0B)
    goto <bb 54>;
  else
    goto <bb 56>;

<bb 54>:
  D.40272_165 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].crypto_type;
  D.40273_166 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].ssec[D.40272_165].remote_crypto_key;
  if (D.40273_166 != 0B)
    goto <bb 55>;
  else
    goto <bb 56>;

<bb 55>:
  # DEBUG __nptr => tmp_164
  idx_335 = strtol (tmp_164, 0B, 10);
  # DEBUG idx => NULL
  D.40272_168 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].crypto_type;
  D.40276_169 = switch_core_perform_session_strdup (session_3(D), tmp_164, "src/switch_core_media.c", &__func__, 8690);
  MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].ssec[D.40272_168].local_crypto_key = D.40276_169;
  D.40272_171 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].crypto_type;
  D.40279_173 = &MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].ssec[D.40272_171]{lb: 0 sz: 144};
  D.40272_174 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].crypto_type;
  D.40280_175 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].ssec[D.40272_174].local_crypto_key;
  switch_core_media_add_crypto (D.40279_173, D.40280_175, 0);
  D.40272_177 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].crypto_type;
  D.40279_179 = &MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].ssec[D.40272_177]{lb: 0 sz: 144};
  D.40272_180 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].crypto_type;
  D.40273_181 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].ssec[D.40272_180].remote_crypto_key;
  switch_core_media_add_crypto (D.40279_179, D.40273_181, 1);
  D.40182_182 = smh_4->session;
  D.40281_183 = D.40182_182->channel;
  switch_channel_set_flag_value (D.40281_183, 92, 1);
  D.40282_184 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].rtp_session;
  idx.2_185 = (uint32_t) idx_335;
  D.40272_187 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].crypto_type;
  D.40284_188 = &MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].ssec[D.40272_187].local_raw_key;
  D.40272_189 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].crypto_type;
  D.40285_190 = SUITES[D.40272_189].keylen;
  D.40286_191 = (switch_size_t) D.40285_190;
  switch_rtp_add_crypto_key (D.40282_184, 0, idx.2_185, D.40272_189, D.40284_188, D.40286_191);
  D.40282_192 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].rtp_session;
  D.40272_193 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].crypto_type;
  D.40287_194 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].ssec[D.40272_193].crypto_tag;
  D.40288_195 = (uint32_t) D.40287_194;
  D.40272_197 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].crypto_type;
  D.40289_198 = &MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].ssec[D.40272_197].remote_raw_key;
  D.40272_199 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].crypto_type;
  D.40285_200 = SUITES[D.40272_199].keylen;
  D.40286_201 = (switch_size_t) D.40285_200;
  switch_rtp_add_crypto_key (D.40282_192, 1, D.40288_195, D.40272_199, D.40289_198, D.40286_201);

<bb 56>:
  D.40290_202 = switch_core_media_ready (session_3(D), 0);
  if (D.40290_202 != 0)
    goto <bb 57>;
  else
    goto <bb 58>;

<bb 57>:
  D.40282_203 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].rtp_session;
  D.40168_204 = smh_4->mparams;
  D.40293_205 = D.40168_204->te;
  switch_rtp_set_telephony_event (D.40282_203, D.40293_205);
  D.40282_206 = MEM[(struct switch_rtp_engine_t *)smh_4 + 80B].rtp_session;
  D.40168_207 = smh_4->mparams;
  D.40294_208 = D.40168_207->recv_te;
  switch_rtp_set_telephony_recv_event (D.40282_206, D.40294_208);

<bb 58>:
  return;

}



;; Function switch_core_media_init (switch_core_media_init)

switch_core_media_init ()
{
<bb 2>:
  switch_core_gen_certs ("dtls-srtp.pem");
  return;

}



;; Function switch_core_media_deinit (switch_core_media_deinit)

switch_core_media_deinit ()
{
<bb 2>:
  return;

}


