
;; Function atoi (atoi)



Renaming block #0



Renaming block #2

Renaming statement D.40324 = strtol (__nptr, 0B, 10);

Renaming statement return D.40324;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.40324_2 = strtol (__nptr_1(D), 0B, 10);



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 3
Number of blocks to update: 2 ( 67%)

Affected blocks: 0 2 


Scope blocks after cleanups:

{ Scope block #0 

}
atoi (const char * __nptr)
{
  int D.40324;

<bb 2>:
  D.40324_2 = strtol (__nptr_1(D), 0B, 10);
  return D.40324_2;

}



;; Function atol (atol)



Renaming block #0



Renaming block #2

Renaming statement D.41133 = strtol (__nptr, 0B, 10);

Renaming statement return D.41133;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.41133_2 = strtol (__nptr_1(D), 0B, 10);



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 3
Number of blocks to update: 2 ( 67%)

Affected blocks: 0 2 


Scope blocks after cleanups:

{ Scope block #0 

}
atol (const char * __nptr)
{
  long int D.41133;

<bb 2>:
  D.41133_2 = strtol (__nptr_1(D), 0B, 10);
  return D.41133_2;

}



;; Function switch_core_codec_ready (switch_core_codec_ready)



Renaming block #0



Renaming block #2

Renaming statement if (codec != 0B)



Renaming block #3

Renaming statement D.45449 = codec->flags;

Renaming statement D.45450 = D.45449 & 256;

Renaming statement if (D.45450 != 0)



Renaming block #4

Renaming statement D.45452 = codec->mutex;

Renaming statement if (D.45452 != 0B)



Renaming block #5

Renaming statement D.45454 = codec->codec_interface;

Renaming statement if (D.45454 != 0B)



Renaming block #6

Renaming statement D.45456 = codec->implementation;

Renaming statement if (D.45456 != 0B)



Renaming block #7

Renaming statement iftmp.104 = 1;



Renaming block #8

Renaming statement iftmp.104 = 0;



Renaming block #9

Renaming statement D.45444 = (switch_bool_t) iftmp.104;

Renaming statement return D.45444;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement D.45449_3 = codec_2(D)->flags;



Registering new PHI nodes in block #4

Updating SSA information for statement D.45452_5 = codec_2(D)->mutex;



Registering new PHI nodes in block #5

Updating SSA information for statement D.45454_6 = codec_2(D)->codec_interface;



Registering new PHI nodes in block #6

Updating SSA information for statement D.45456_7 = codec_2(D)->implementation;



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 

}
switch_core_codec_ready (struct switch_codec_t * codec)
{
  const struct switch_codec_implementation_t * D.45456;
  struct switch_codec_interface_t * D.45454;
  struct switch_mutex_t * D.45452;
  uint32_t D.45450;
  uint32_t D.45449;
  int iftmp.104;
  switch_bool_t D.45444;

<bb 2>:
  if (codec_2(D) != 0B)
    goto <bb 3>;
  else
    goto <bb 8>;

<bb 3>:
  D.45449_3 = codec_2(D)->flags;
  D.45450_4 = D.45449_3 & 256;
  if (D.45450_4 != 0)
    goto <bb 4>;
  else
    goto <bb 8>;

<bb 4>:
  D.45452_5 = codec_2(D)->mutex;
  if (D.45452_5 != 0B)
    goto <bb 5>;
  else
    goto <bb 8>;

<bb 5>:
  D.45454_6 = codec_2(D)->codec_interface;
  if (D.45454_6 != 0B)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  D.45456_7 = codec_2(D)->implementation;
  if (D.45456_7 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  iftmp.104_8 = 1;
  goto <bb 9>;

<bb 8>:
  iftmp.104_9 = 0;

<bb 9>:
  # iftmp.104_1 = PHI <iftmp.104_8(7), iftmp.104_9(8)>
  D.45444_10 = (switch_bool_t) iftmp.104_1;
  return D.45444_10;

}



;; Function _zstr (_zstr)



Renaming block #0



Renaming block #2

Renaming statement if (s == 0B)



Renaming block #3

Renaming statement D.40302 = *s;

Renaming statement if (D.40302 == 0)



Renaming block #5

Renaming statement iftmp.3 = 0;



Renaming block #4

Renaming statement iftmp.3 = 1;



Renaming block #6

Renaming statement D.40296 = iftmp.3;

Renaming statement return D.40296;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement D.40302_3 = *s_2(D);



Registering new PHI nodes in block #5



Registering new PHI nodes in block #4



Registering new PHI nodes in block #6



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)

Affected blocks: 0 2 3 4 5 6 


Scope blocks after cleanups:

{ Scope block #0 

}
_zstr (const char * s)
{
  const char D.40302;
  int iftmp.3;
  int D.40296;

<bb 2>:
  if (s_2(D) == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

<bb 3>:
  D.40302_3 = *s_2(D);
  if (D.40302_3 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  iftmp.3_5 = 1;
  goto <bb 6>;

<bb 5>:
  iftmp.3_4 = 0;

<bb 6>:
  # iftmp.3_1 = PHI <iftmp.3_5(4), iftmp.3_4(5)>
  D.40296_6 = iftmp.3_1;
  return D.40296_6;

}



;; Function switch_known_bitrate (switch_known_bitrate)



Renaming block #0



Renaming block #2

Renaming statement D.40702 = (int) payload;

Renaming statement switch (D.40702) <default: <L10>, case 0: <L0>, case 3: <L1>, case 4: <L2>, case 7: <L3>, case 8: <L4>, case 9: <L5>, case 18: <L6>>



Renaming block #3

Renaming statement D.40703 = 64000;



Renaming block #4

Renaming statement D.40703 = 13200;



Renaming block #5

Renaming statement D.40703 = 6300;



Renaming block #6

Renaming statement D.40703 = 2400;



Renaming block #7

Renaming statement D.40703 = 64000;



Renaming block #8

Renaming statement D.40703 = 64000;



Renaming block #9

Renaming statement D.40703 = 8000;



Renaming block #10

Renaming statement D.40703 = 0;



Renaming block #11

Renaming statement return D.40703;

Scope blocks after cleanups:

{ Scope block #0 

}
switch_known_bitrate (switch_payload_t payload)
{
  uint32_t D.40703;
  int D.40702;

<bb 2>:
  D.40702_3 = (int) payload_2(D);
  switch (D.40702_3) <default: <L10>, case 0: <L0>, case 3: <L1>, case 4: <L2>, case 7: <L3>, case 8: <L4>, case 9: <L5>, case 18: <L6>>

<L0>:
  D.40703_4 = 64000;
  goto <bb 11>;

<L1>:
  D.40703_5 = 13200;
  goto <bb 11>;

<L2>:
  D.40703_6 = 6300;
  goto <bb 11>;

<L3>:
  D.40703_7 = 2400;
  goto <bb 11>;

<L4>:
  D.40703_8 = 64000;
  goto <bb 11>;

<L5>:
  D.40703_9 = 64000;
  goto <bb 11>;

<L6>:
  D.40703_10 = 8000;
  goto <bb 11>;

<L10>:
  D.40703_11 = 0;

<bb 11>:
  # D.40703_1 = PHI <D.40703_4(3), D.40703_5(4), D.40703_6(5), D.40703_7(6), D.40703_8(7), D.40703_9(8), D.40703_10(9), D.40703_11(10)>
  return D.40703_1;

}



;; Function switch_safe_atoi (switch_safe_atoi)



Renaming block #0



Renaming block #2

Renaming statement if (nptr != 0B)



Renaming block #3

Renaming statement iftmp.100 = atoi (nptr);



Renaming block #4

Renaming statement iftmp.100 = dft;



Renaming block #5

Renaming statement D.45420 = iftmp.100;

Renaming statement return D.45420;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement iftmp.100_3 = atoi (nptr_2(D));



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)

Affected blocks: 0 2 3 4 5 


Scope blocks after cleanups:

{ Scope block #0 

}
switch_safe_atoi (const char * nptr, int dft)
{
  int iftmp.100;
  int D.45420;

<bb 2>:
  if (nptr_2(D) != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  iftmp.100_3 = atoi (nptr_2(D));
  goto <bb 5>;

<bb 4>:
  iftmp.100_5 = dft_4(D);

<bb 5>:
  # iftmp.100_1 = PHI <iftmp.100_3(3), iftmp.100_5(4)>
  D.45420_6 = iftmp.100_1;
  return D.45420_6;

}



;; Function switch_media_type2str (switch_media_type2str)



Renaming block #0



Renaming block #2

Renaming statement switch (type) <default: <L2>, case 0: <L0>, case 1: <L1>>



Renaming block #3

Renaming statement D.44061 = "audio";



Renaming block #4

Renaming statement D.44061 = "video";



Renaming block #5

Renaming statement D.44061 = "!ERR";



Renaming block #6

Renaming statement return D.44061;

Scope blocks after cleanups:

{ Scope block #0 

}
switch_media_type2str (switch_media_type_t type)
{
  const char * D.44061;

<bb 2>:
  switch (type_2(D)) <default: <L2>, case 0: <L0>, case 1: <L1>>

<L0>:
  D.44061_3 = "audio";
  goto <bb 6>;

<L1>:
  D.44061_4 = "video";
  goto <bb 6>;

<L2>:
  D.44061_5 = "!ERR";

<bb 6>:
  # D.44061_1 = PHI <D.44061_3(3), D.44061_4(4), D.44061_5(5)>
  return D.44061_1;

}



;; Function greedy_sort (greedy_sort)



Renaming block #0



Renaming block #2

Renaming statement j = 0;

Renaming statement f = 0;

Renaming statement j = 0;



Renaming block #4

Renaming statement if (j < m_idx)



Renaming block #3

Renaming statement j.101 = (unsigned int) j;

Renaming statement D.45427 = j.101 * 16;

Renaming statement D.45428 = &mtmp + D.45427;

Renaming statement j.101 = (unsigned int) j;

Renaming statement D.45427 = j.101 * 16;

Renaming statement D.45429 = matches + D.45427;

Renaming statement *D.45428 = *D.45429;

Renaming statement j = j + 1;



Renaming block #5

Renaming statement g = 0;



Renaming block #12

Renaming statement D.45439 = smh->mparams;

Renaming statement D.45440 = D.45439->num_codecs;

Renaming statement D.45441 = D.45440 > g;

Renaming statement D.45442 = g < total_codecs;

Renaming statement D.45443 = D.45441 && D.45442;

Renaming statement if (D.45443 != 0)



Renaming block #6

Renaming statement g.102 = (unsigned int) g;

Renaming statement D.45431 = g.102 * 4;

Renaming statement D.45432 = codec_array + D.45431;

Renaming statement imp = *D.45432;

Renaming statement j = 0;



Renaming block #10

Renaming statement if (j < m_idx)



Renaming block #7

Renaming statement D.45433 = mtmp[j].imp;

Renaming statement if (D.45433 == imp)



Renaming block #8

Renaming statement f.103 = (unsigned int) f;

Renaming statement D.45437 = f.103 * 16;

Renaming statement D.45438 = matches + D.45437;

Renaming statement j.101 = (unsigned int) j;

Renaming statement D.45427 = j.101 * 16;

Renaming statement D.45428 = &mtmp + D.45427;

Renaming statement *D.45438 = *D.45428;

Renaming statement f = f + 1;



Renaming block #9

Renaming statement j = j + 1;



Renaming block #11

Renaming statement g = g + 1;



Renaming block #13



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement mtmp = {};



Registering new PHI nodes in block #4



Registering new PHI nodes in block #3

Updating SSA information for statement *D.45428_13 = *D.45429_17;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #12

Updating SSA information for statement D.45439_21 = smh_20(D)->mparams;

Updating SSA information for statement D.45440_22 = D.45439_21->num_codecs;



Registering new PHI nodes in block #6

Updating SSA information for statement imp_31 = *D.45432_30;



Registering new PHI nodes in block #10



Registering new PHI nodes in block #7

Updating SSA information for statement D.45433_33 = mtmp[j_2].imp;



Registering new PHI nodes in block #8

Updating SSA information for statement *D.45438_36 = *D.45428_39;



Registering new PHI nodes in block #9



Registering new PHI nodes in block #11



Registering new PHI nodes in block #13



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 14
Number of blocks to update: 13 ( 93%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 


Scope blocks after cleanups:

{ Scope block #0 
  int j;
  int f;
  int g;
  struct matches mtmp[30];

  { Scope block #0 
    const struct switch_codec_implementation_t * imp;

  }

}
greedy_sort (struct switch_media_handle_t * smh, struct matches * matches, int m_idx, const struct switch_codec_implementation_t * * codec_array, int total_codecs)
{
  const struct switch_codec_implementation_t * imp;
  struct matches mtmp[30];
  int g;
  int f;
  int j;
  _Bool D.45443;
  _Bool D.45442;
  _Bool D.45441;
  int D.45440;
  struct switch_core_media_params_t * D.45439;
  struct matches * D.45438;
  unsigned int D.45437;
  unsigned int f.103;
  const struct switch_codec_implementation_t * D.45433;
  const struct switch_codec_implementation_t * * D.45432;
  unsigned int D.45431;
  unsigned int g.102;
  struct matches * D.45429;
  struct matches * D.45428;
  unsigned int D.45427;
  unsigned int j.101;

<bb 2>:
  j_7 = 0;
  # DEBUG j => j_7
  f_8 = 0;
  # DEBUG f => f_8
  mtmp = {};
  j_9 = 0;
  # DEBUG j => j_9
  goto <bb 4>;

<bb 3>:
  j.101_11 = (unsigned int) j_1;
  D.45427_12 = j.101_11 * 16;
  D.45428_13 = &mtmp + D.45427_12;
  j.101_14 = (unsigned int) j_1;
  D.45427_15 = j.101_14 * 16;
  D.45429_17 = matches_16(D) + D.45427_15;
  *D.45428_13 = *D.45429_17;
  j_18 = j_1 + 1;
  # DEBUG j => j_18

<bb 4>:
  # j_1 = PHI <j_9(2), j_18(3)>
  # DEBUG j => j_1
  if (j_1 < m_idx_10(D))
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 5>:
  g_19 = 0;
  # DEBUG g => g_19
  goto <bb 12>;

<bb 6>:
  g.102_27 = (unsigned int) g_6;
  D.45431_28 = g.102_27 * 4;
  D.45432_30 = codec_array_29(D) + D.45431_28;
  imp_31 = *D.45432_30;
  # DEBUG imp => imp_31
  j_32 = 0;
  # DEBUG j => j_32
  goto <bb 10>;

<bb 7>:
  D.45433_33 = mtmp[j_2].imp;
  if (D.45433_33 == imp_31)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  f.103_34 = (unsigned int) f_4;
  D.45437_35 = f.103_34 * 16;
  D.45438_36 = matches_16(D) + D.45437_35;
  j.101_37 = (unsigned int) j_2;
  D.45427_38 = j.101_37 * 16;
  D.45428_39 = &mtmp + D.45427_38;
  *D.45438_36 = *D.45428_39;
  f_40 = f_4 + 1;
  # DEBUG f => f_40

<bb 9>:
  # f_3 = PHI <f_4(7), f_40(8)>
  # DEBUG f => f_3
  j_41 = j_2 + 1;
  # DEBUG j => j_41

<bb 10>:
  # j_2 = PHI <j_32(6), j_41(9)>
  # f_4 = PHI <f_5(6), f_3(9)>
  # DEBUG f => f_4
  # DEBUG j => j_2
  if (j_2 < m_idx_10(D))
    goto <bb 7>;
  else
    goto <bb 11>;

<bb 11>:
  g_42 = g_6 + 1;
  # DEBUG g => g_42

<bb 12>:
  # f_5 = PHI <f_8(5), f_4(11)>
  # g_6 = PHI <g_19(5), g_42(11)>
  # DEBUG g => g_6
  # DEBUG f => f_5
  D.45439_21 = smh_20(D)->mparams;
  D.45440_22 = D.45439_21->num_codecs;
  D.45441_23 = D.45440_22 > g_6;
  D.45442_25 = g_6 < total_codecs_24(D);
  D.45443_26 = D.45441_23 && D.45442_25;
  if (D.45443_26 != 0)
    goto <bb 6>;
  else
    goto <bb 13>;

<bb 13>:
  return;

}



;; Function clear_pmaps (clear_pmaps)



Renaming block #0



Renaming block #2

Renaming statement pmap = engine->payload_map;



Renaming block #4

Renaming statement if (pmap != 0B)



Renaming block #5

Renaming statement D.41160 = pmap->allocated;

Renaming statement if (D.41160 != 0)



Renaming block #3

Renaming statement pmap->negotiated = 0;

Renaming statement pmap->current = 0;

Renaming statement pmap = pmap->next;



Renaming block #6



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement pmap_3 = engine_2(D)->payload_map;



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5

Updating SSA information for statement D.41160_4 = pmap_1->allocated;



Registering new PHI nodes in block #3

Updating SSA information for statement pmap_1->negotiated = 0;

Updating SSA information for statement pmap_1->current = 0;

Updating SSA information for statement pmap_5 = pmap_1->next;



Registering new PHI nodes in block #6



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)

Affected blocks: 0 2 3 4 5 6 


Scope blocks after cleanups:

{ Scope block #0 
  struct payload_map_t * pmap;

}
clear_pmaps (struct switch_rtp_engine_t * engine)
{
  struct payload_map_t * pmap;
  uint8_t D.41160;

<bb 2>:
  pmap_3 = engine_2(D)->payload_map;
  # DEBUG pmap => pmap_3
  goto <bb 4>;

<bb 3>:
  pmap_1->negotiated = 0;
  pmap_1->current = 0;
  pmap_5 = pmap_1->next;
  # DEBUG pmap => pmap_5

<bb 4>:
  # pmap_1 = PHI <pmap_3(2), pmap_5(3)>
  # DEBUG pmap => pmap_1
  if (pmap_1 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.41160_4 = pmap_1->allocated;
  if (D.41160_4 != 0)
    goto <bb 3>;
  else
    goto <bb 6>;

<bb 6>:
  return;

}



;; Function dtls_ok (dtls_ok)



Renaming block #0



Renaming block #2

Renaming statement D.42520 = session->channel;

Renaming statement D.42521 = switch_channel_test_flag (D.42520, 111);

Renaming statement D.42519 = (int) D.42521;

Renaming statement return D.42519;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.42520_2 = session_1(D)->channel;

Updating SSA information for statement D.42521_3 = switch_channel_test_flag (D.42520_2, 111);



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 3
Number of blocks to update: 2 ( 67%)

Affected blocks: 0 2 


Scope blocks after cleanups:

{ Scope block #0 

}
dtls_ok (struct switch_core_session_t * session)
{
  uint32_t D.42521;
  struct switch_channel_t * D.42520;
  int D.42519;

<bb 2>:
  D.42520_2 = session_1(D)->channel;
  D.42521_3 = switch_channel_test_flag (D.42520_2, 111);
  D.42519_4 = (int) D.42521_3;
  return D.42519_4;

}



;; Function get_media_profile_name (get_media_profile_name)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement D.42967 = session->channel;

Renaming statement D.42968 = switch_channel_test_flag (D.42967, 106);

Renaming statement if (D.42968 != 0)



Renaming block #5

Renaming statement D.42967 = session->channel;

Renaming statement D.42971 = switch_channel_test_flag (D.42967, 107);

Renaming statement if (D.42971 != 0)



Renaming block #6

Renaming statement D.42974 = "UDP/TLS/RTP/SAVPF";



Renaming block #7

Renaming statement D.42974 = "RTP/SAVPF";



Renaming block #8

Renaming statement if (secure != 0)



Renaming block #9

Renaming statement D.42974 = "RTP/SAVP";



Renaming block #10

Renaming statement D.42974 = "RTP/AVP";



Renaming block #11

Renaming statement return D.42974;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 5582, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement D.42967_3 = session_2(D)->channel;

Updating SSA information for statement D.42968_4 = switch_channel_test_flag (D.42967_3, 106);



Registering new PHI nodes in block #5

Updating SSA information for statement D.42967_5 = session_2(D)->channel;

Updating SSA information for statement D.42971_6 = switch_channel_test_flag (D.42967_5, 107);



Registering new PHI nodes in block #6



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 12
Number of blocks to update: 11 ( 92%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 


Scope blocks after cleanups:

{ Scope block #0 
  static const char __PRETTY_FUNCTION__[23] = "get_media_profile_name";

}
get_media_profile_name (struct switch_core_session_t * session, int secure)
{
  static const char __PRETTY_FUNCTION__[23] = "get_media_profile_name";
  const char * D.42974;
  uint32_t D.42971;
  uint32_t D.42968;
  struct switch_channel_t * D.42967;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 5582, &__PRETTY_FUNCTION__);

<bb 4>:
  D.42967_3 = session_2(D)->channel;
  D.42968_4 = switch_channel_test_flag (D.42967_3, 106);
  if (D.42968_4 != 0)
    goto <bb 5>;
  else
    goto <bb 8>;

<bb 5>:
  D.42967_5 = session_2(D)->channel;
  D.42971_6 = switch_channel_test_flag (D.42967_5, 107);
  if (D.42971_6 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.42974_7 = "UDP/TLS/RTP/SAVPF";
  goto <bb 11>;

<bb 7>:
  D.42974_8 = "RTP/SAVPF";
  goto <bb 11>;

<bb 8>:
  if (secure_9(D) != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.42974_10 = "RTP/SAVP";
  goto <bb 11>;

<bb 10>:
  D.42974_11 = "RTP/AVP";

<bb 11>:
  # D.42974_1 = PHI <D.42974_7(6), D.42974_8(7), D.42974_10(9), D.42974_11(10)>
  return D.42974_1;

}



;; Function switch_core_media_find_zrtp_hash (switch_core_media_find_zrtp_hash)



Renaming block #0



Renaming block #2

Renaming statement channel = switch_core_session_get_channel (session);

Renaming statement got_audio = 0;

Renaming statement got_video = 0;

Renaming statement D.40619 = session->media_handle;

Renaming statement if (D.40619 == 0B)



Renaming block #3

Renaming statement D.40619 = session->media_handle;

Renaming statement audio_engine = &D.40619->engines;

Renaming statement D.40619 = session->media_handle;

Renaming statement video_engine = &D.40619->engines[1];

Renaming statement D.40622 = switch_channel_get_session (channel);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 334, D.40622, 101, "Looking for zrtp-hash\n");

Renaming statement m = sdp->sdp_media;



Renaming block #22

Renaming statement if (m != 0B)



Renaming block #4

Renaming statement D.40623 = got_audio != 0;

Renaming statement D.40624 = got_video != 0;

Renaming statement D.40625 = D.40623 && D.40624;

Renaming statement if (D.40625 != 0)



Renaming block #5

Renaming statement D.40628 = m->m_port;

Renaming statement if (D.40628 != 0)



Renaming block #6

Renaming statement D.40631 = m->m_type;

Renaming statement D.40632 = D.40631 == 2;

Renaming statement D.40633 = got_audio == 0;

Renaming statement D.40634 = D.40632 && D.40633;

Renaming statement if (D.40634 != 0)



Renaming block #7

Renaming statement D.40631 = m->m_type;

Renaming statement D.40636 = D.40631 == 3;

Renaming statement D.40637 = got_video == 0;

Renaming statement D.40638 = D.40636 && D.40637;

Renaming statement if (D.40638 != 0)



Renaming block #8

Renaming statement attr = m->m_attributes;



Renaming block #20

Renaming statement if (attr != 0B)



Renaming block #9

Renaming statement D.40639 = attr->a_name;

Renaming statement D.40640 = _zstr (D.40639);

Renaming statement if (D.40640 != 0)



Renaming block #10



Renaming block #11

Renaming statement D.40639 = attr->a_name;

Renaming statement D.40645 = strcasecmp (D.40639, "zrtp-hash");

Renaming statement if (D.40645 != 0)



Renaming block #12

Renaming statement D.40647 = attr->a_value;

Renaming statement if (D.40647 == 0B)



Renaming block #14

Renaming statement D.40631 = m->m_type;

Renaming statement if (D.40631 == 2)



Renaming block #15

Renaming statement D.40650 = switch_channel_get_session (channel);

Renaming statement D.40647 = attr->a_value;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 343, D.40650, 7, "Found audio zrtp-hash; setting r_sdp_audio_zrtp_hash=%s\n", D.40647);

Renaming statement D.40647 = attr->a_value;

Renaming statement switch_channel_set_variable_var_check (channel, "r_sdp_audio_zrtp_hash", D.40647, 1);

Renaming statement D.40647 = attr->a_value;

Renaming statement D.40651 = switch_core_perform_session_strdup (session, D.40647, "src/switch_core_media.c", &__func__, 346);

Renaming statement audio_engine->remote_sdp_zrtp_hash = D.40651;

Renaming statement got_audio = got_audio + 1;



Renaming block #16

Renaming statement D.40631 = m->m_type;

Renaming statement if (D.40631 == 3)



Renaming block #17

Renaming statement D.40655 = switch_channel_get_session (channel);

Renaming statement D.40647 = attr->a_value;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 349, D.40655, 7, "Found video zrtp-hash; setting r_sdp_video_zrtp_hash=%s\n", D.40647);

Renaming statement D.40647 = attr->a_value;

Renaming statement switch_channel_set_variable_var_check (channel, "r_sdp_video_zrtp_hash", D.40647, 1);

Renaming statement D.40647 = attr->a_value;

Renaming statement D.40656 = switch_core_perform_session_strdup (session, D.40647, "src/switch_core_media.c", &__func__, 352);

Renaming statement video_engine->remote_sdp_zrtp_hash = D.40656;

Renaming statement got_video = got_video + 1;



Renaming block #18

Renaming statement switch_channel_set_flag_value (channel, 75, 1);



Renaming block #13



Renaming block #19

Renaming statement attr = attr->a_next;



Renaming block #21

Renaming statement m = m->m_next;



Renaming block #23



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement channel_10 = switch_core_session_get_channel (session_9(D));

Updating SSA information for statement D.40619_13 = session_9(D)->media_handle;



Registering new PHI nodes in block #3

Updating SSA information for statement D.40619_14 = session_9(D)->media_handle;

Updating SSA information for statement D.40619_16 = session_9(D)->media_handle;

Updating SSA information for statement D.40622_18 = switch_channel_get_session (channel_10);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 334, D.40622_18, 101, "Looking for zrtp-hash\n");

Updating SSA information for statement m_20 = sdp_19(D)->sdp_media;



Registering new PHI nodes in block #22



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5

Updating SSA information for statement D.40628_24 = m_1->m_port;



Registering new PHI nodes in block #6

Updating SSA information for statement D.40631_25 = m_1->m_type;



Registering new PHI nodes in block #7

Updating SSA information for statement D.40631_29 = m_1->m_type;



Registering new PHI nodes in block #8

Updating SSA information for statement attr_33 = m_1->m_attributes;



Registering new PHI nodes in block #20



Registering new PHI nodes in block #9

Updating SSA information for statement D.40639_34 = attr_2->a_name;

Updating SSA information for statement D.40640_35 = _zstr (D.40639_34);



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11

Updating SSA information for statement D.40639_36 = attr_2->a_name;

Updating SSA information for statement D.40645_37 = strcasecmp (D.40639_36, "zrtp-hash");



Registering new PHI nodes in block #12

Updating SSA information for statement D.40647_38 = attr_2->a_value;



Registering new PHI nodes in block #14

Updating SSA information for statement D.40631_39 = m_1->m_type;



Registering new PHI nodes in block #15

Updating SSA information for statement D.40650_40 = switch_channel_get_session (channel_10);

Updating SSA information for statement D.40647_41 = attr_2->a_value;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 343, D.40650_40, 7, "Found audio zrtp-hash; setting r_sdp_audio_zrtp_hash=%s\n", D.40647_41);

Updating SSA information for statement D.40647_42 = attr_2->a_value;

Updating SSA information for statement switch_channel_set_variable_var_check (channel_10, "r_sdp_audio_zrtp_hash", D.40647_42, 1);

Updating SSA information for statement D.40647_43 = attr_2->a_value;

Updating SSA information for statement D.40651_44 = switch_core_perform_session_strdup (session_9(D), D.40647_43, "src/switch_core_media.c", &__func__, 346);

Updating SSA information for statement audio_engine_15->remote_sdp_zrtp_hash = D.40651_44;



Registering new PHI nodes in block #16

Updating SSA information for statement D.40631_46 = m_1->m_type;



Registering new PHI nodes in block #17

Updating SSA information for statement D.40655_47 = switch_channel_get_session (channel_10);

Updating SSA information for statement D.40647_48 = attr_2->a_value;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 349, D.40655_47, 7, "Found video zrtp-hash; setting r_sdp_video_zrtp_hash=%s\n", D.40647_48);

Updating SSA information for statement D.40647_49 = attr_2->a_value;

Updating SSA information for statement switch_channel_set_variable_var_check (channel_10, "r_sdp_video_zrtp_hash", D.40647_49, 1);

Updating SSA information for statement D.40647_50 = attr_2->a_value;

Updating SSA information for statement D.40656_51 = switch_core_perform_session_strdup (session_9(D), D.40647_50, "src/switch_core_media.c", &__func__, 352);

Updating SSA information for statement video_engine_17->remote_sdp_zrtp_hash = D.40656_51;



Registering new PHI nodes in block #18

Updating SSA information for statement switch_channel_set_flag_value (channel_10, 75, 1);



Registering new PHI nodes in block #13



Registering new PHI nodes in block #19

Updating SSA information for statement attr_53 = attr_2->a_next;



Registering new PHI nodes in block #21

Updating SSA information for statement m_54 = m_1->m_next;



Registering new PHI nodes in block #23



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 24
Number of blocks to update: 23 ( 96%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_channel_t * channel;
  struct switch_rtp_engine_t * audio_engine;
  struct switch_rtp_engine_t * video_engine;
  struct sdp_media_t * m;
  struct sdp_attribute_t * attr;
  int got_audio;
  int got_video;
  static const char __func__[33] = "switch_core_media_find_zrtp_hash";

}
switch_core_media_find_zrtp_hash (struct switch_core_session_t * session, struct sdp_session_t * sdp)
{
  static const char __func__[33] = "switch_core_media_find_zrtp_hash";
  int got_video;
  int got_audio;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  struct switch_rtp_engine_t * video_engine;
  struct switch_rtp_engine_t * audio_engine;
  struct switch_channel_t * channel;
  char * D.40656;
  struct switch_core_session_t * D.40655;
  char * D.40651;
  struct switch_core_session_t * D.40650;
  const char * D.40647;
  int D.40645;
  int D.40640;
  const char * D.40639;
  _Bool D.40638;
  _Bool D.40637;
  _Bool D.40636;
  _Bool D.40634;
  _Bool D.40633;
  _Bool D.40632;
  sdp_media_e D.40631;
  long unsigned int D.40628;
  _Bool D.40625;
  _Bool D.40624;
  _Bool D.40623;
  struct switch_core_session_t * D.40622;
  struct switch_media_handle_t * D.40619;

<bb 2>:
  channel_10 = switch_core_session_get_channel (session_9(D));
  # DEBUG channel => channel_10
  got_audio_11 = 0;
  # DEBUG got_audio => got_audio_11
  got_video_12 = 0;
  # DEBUG got_video => got_video_12
  D.40619_13 = session_9(D)->media_handle;
  if (D.40619_13 == 0B)
    goto <bb 23>;
  else
    goto <bb 3>;

<bb 3>:
  D.40619_14 = session_9(D)->media_handle;
  audio_engine_15 = &D.40619_14->engines;
  # DEBUG audio_engine => audio_engine_15
  D.40619_16 = session_9(D)->media_handle;
  video_engine_17 = &D.40619_16->engines[1];
  # DEBUG video_engine => video_engine_17
  D.40622_18 = switch_channel_get_session (channel_10);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 334, D.40622_18, 101, "Looking for zrtp-hash\n");
  m_20 = sdp_19(D)->sdp_media;
  # DEBUG m => m_20
  goto <bb 22>;

<bb 4>:
  D.40623_21 = got_audio_5 != 0;
  D.40624_22 = got_video_8 != 0;
  D.40625_23 = D.40623_21 && D.40624_22;
  if (D.40625_23 != 0)
    goto <bb 23>;
  else
    goto <bb 5>;

<bb 5>:
  D.40628_24 = m_1->m_port;
  if (D.40628_24 != 0)
    goto <bb 6>;
  else
    goto <bb 21>;

<bb 6>:
  D.40631_25 = m_1->m_type;
  D.40632_26 = D.40631_25 == 2;
  D.40633_27 = got_audio_5 == 0;
  D.40634_28 = D.40632_26 && D.40633_27;
  if (D.40634_28 != 0)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:
  D.40631_29 = m_1->m_type;
  D.40636_30 = D.40631_29 == 3;
  D.40637_31 = got_video_8 == 0;
  D.40638_32 = D.40636_30 && D.40637_31;
  if (D.40638_32 != 0)
    goto <bb 8>;
  else
    goto <bb 21>;

<bb 8>:
  attr_33 = m_1->m_attributes;
  # DEBUG attr => attr_33
  goto <bb 20>;

<bb 9>:
  D.40639_34 = attr_2->a_name;
  D.40640_35 = _zstr (D.40639_34);
  if (D.40640_35 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  // predicted unlikely by continue predictor.
  goto <bb 19>;

<bb 11>:
  D.40639_36 = attr_2->a_name;
  D.40645_37 = strcasecmp (D.40639_36, "zrtp-hash");
  if (D.40645_37 != 0)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:
  D.40647_38 = attr_2->a_value;
  if (D.40647_38 == 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  // predicted unlikely by continue predictor.
  goto <bb 19>;

<bb 14>:
  D.40631_39 = m_1->m_type;
  if (D.40631_39 == 2)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.40650_40 = switch_channel_get_session (channel_10);
  D.40647_41 = attr_2->a_value;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 343, D.40650_40, 7, "Found audio zrtp-hash; setting r_sdp_audio_zrtp_hash=%s\n", D.40647_41);
  D.40647_42 = attr_2->a_value;
  switch_channel_set_variable_var_check (channel_10, "r_sdp_audio_zrtp_hash", D.40647_42, 1);
  D.40647_43 = attr_2->a_value;
  D.40651_44 = switch_core_perform_session_strdup (session_9(D), D.40647_43, "src/switch_core_media.c", &__func__, 346);
  audio_engine_15->remote_sdp_zrtp_hash = D.40651_44;
  got_audio_45 = got_audio_5 + 1;
  # DEBUG got_audio => got_audio_45
  goto <bb 18>;

<bb 16>:
  D.40631_46 = m_1->m_type;
  if (D.40631_46 == 3)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.40655_47 = switch_channel_get_session (channel_10);
  D.40647_48 = attr_2->a_value;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 349, D.40655_47, 7, "Found video zrtp-hash; setting r_sdp_video_zrtp_hash=%s\n", D.40647_48);
  D.40647_49 = attr_2->a_value;
  switch_channel_set_variable_var_check (channel_10, "r_sdp_video_zrtp_hash", D.40647_49, 1);
  D.40647_50 = attr_2->a_value;
  D.40656_51 = switch_core_perform_session_strdup (session_9(D), D.40647_50, "src/switch_core_media.c", &__func__, 352);
  video_engine_17->remote_sdp_zrtp_hash = D.40656_51;
  got_video_52 = got_video_8 + 1;
  # DEBUG got_video => got_video_52

<bb 18>:
  # got_audio_3 = PHI <got_audio_45(15), got_audio_5(16), got_audio_5(17)>
  # got_video_6 = PHI <got_video_8(15), got_video_8(16), got_video_52(17)>
  # DEBUG got_video => got_video_6
  # DEBUG got_audio => got_audio_3
  switch_channel_set_flag_value (channel_10, 75, 1);
  goto <bb 21>;

<bb 19>:
  attr_53 = attr_2->a_next;
  # DEBUG attr => attr_53

<bb 20>:
  # attr_2 = PHI <attr_33(8), attr_53(19)>
  # DEBUG attr => attr_2
  if (attr_2 != 0B)
    goto <bb 9>;
  else
    goto <bb 21>;

<bb 21>:
  # got_audio_4 = PHI <got_audio_5(5), got_audio_5(7), got_audio_3(18), got_audio_5(20)>
  # got_video_7 = PHI <got_video_8(5), got_video_8(7), got_video_6(18), got_video_8(20)>
  # DEBUG got_video => got_video_7
  # DEBUG got_audio => got_audio_4
  m_54 = m_1->m_next;
  # DEBUG m => m_54

<bb 22>:
  # m_1 = PHI <m_20(3), m_54(21)>
  # got_audio_5 = PHI <got_audio_11(3), got_audio_4(21)>
  # got_video_8 = PHI <got_video_12(3), got_video_7(21)>
  # DEBUG got_video => got_video_8
  # DEBUG got_audio => got_audio_5
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 4>;
  else
    goto <bb 23>;

<bb 23>:
  return;

}



;; Function _switch_core_media_pass_zrtp_hash2 (_switch_core_media_pass_zrtp_hash2)



Renaming block #0



Renaming block #2

Renaming statement D.47175 = aleg_session->media_handle;

Renaming statement if (D.47175 == 0B)



Renaming block #3

Renaming statement D.47177 = bleg_session->media_handle;

Renaming statement if (D.47177 == 0B)



Renaming block #4

Renaming statement D.47175 = aleg_session->media_handle;

Renaming statement D.47178 = &D.47175->engines;

Renaming statement D.47179 = type * 11416;

Renaming statement aleg_engine = D.47178 + D.47179;

Renaming statement D.47177 = bleg_session->media_handle;

Renaming statement D.47180 = &D.47177->engines;

Renaming statement D.47179 = type * 11416;

Renaming statement bleg_engine = D.47180 + D.47179;

Renaming statement D.47181 = aleg_session->channel;

Renaming statement D.47182 = switch_channel_get_session (D.47181);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 255, D.47182, 101, "Deciding whether to pass zrtp-hash between a-leg and b-leg\n");

Renaming statement D.47181 = aleg_session->channel;

Renaming statement D.47183 = switch_channel_test_flag (D.47181, 73);

Renaming statement if (D.47183 == 0)



Renaming block #5

Renaming statement D.47181 = aleg_session->channel;

Renaming statement D.47186 = switch_channel_get_session (D.47181);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 259, D.47186, 101, "CF_ZRTP_PASSTHRU_REQ not set on a-leg, so not propagating zrtp-hash\n");



Renaming block #6

Renaming statement D.47187 = aleg_engine->remote_sdp_zrtp_hash;

Renaming statement if (D.47187 != 0B)



Renaming block #7

Renaming statement D.47181 = aleg_session->channel;

Renaming statement D.47190 = switch_channel_get_session (D.47181);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 265, D.47190, 7, "Passing a-leg remote zrtp-hash (audio) to b-leg\n");

Renaming statement D.47187 = aleg_engine->remote_sdp_zrtp_hash;

Renaming statement D.47191 = switch_core_perform_session_strdup (bleg_session, D.47187, "src/switch_core_media.c", &__func__, 266);

Renaming statement bleg_engine->local_sdp_zrtp_hash = D.47191;

Renaming statement D.47192 = bleg_session->channel;

Renaming statement D.47193 = bleg_engine->local_sdp_zrtp_hash;

Renaming statement switch_channel_set_variable_var_check (D.47192, "l_sdp_audio_zrtp_hash", D.47193, 1);



Renaming block #8

Renaming statement D.47194 = bleg_engine->remote_sdp_zrtp_hash;

Renaming statement if (D.47194 != 0B)



Renaming block #9

Renaming statement D.47181 = aleg_session->channel;

Renaming statement D.47197 = switch_channel_get_session (D.47181);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 271, D.47197, 7, "Passing b-leg remote zrtp-hash (audio) to a-leg\n");

Renaming statement D.47194 = bleg_engine->remote_sdp_zrtp_hash;

Renaming statement D.47198 = switch_core_perform_session_strdup (aleg_session, D.47194, "src/switch_core_media.c", &__func__, 272);

Renaming statement aleg_engine->local_sdp_zrtp_hash = D.47198;

Renaming statement D.47181 = aleg_session->channel;

Renaming statement D.47199 = aleg_engine->local_sdp_zrtp_hash;

Renaming statement switch_channel_set_variable_var_check (D.47181, "l_sdp_audio_zrtp_hash", D.47199, 1);



Renaming block #10



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.47175_2 = aleg_session_1(D)->media_handle;



Registering new PHI nodes in block #3

Updating SSA information for statement D.47177_4 = bleg_session_3(D)->media_handle;



Registering new PHI nodes in block #4

Updating SSA information for statement D.47175_5 = aleg_session_1(D)->media_handle;

Updating SSA information for statement D.47177_10 = bleg_session_3(D)->media_handle;

Updating SSA information for statement D.47181_14 = aleg_session_1(D)->channel;

Updating SSA information for statement D.47182_15 = switch_channel_get_session (D.47181_14);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 255, D.47182_15, 101, "Deciding whether to pass zrtp-hash between a-leg and b-leg\n");

Updating SSA information for statement D.47181_16 = aleg_session_1(D)->channel;

Updating SSA information for statement D.47183_17 = switch_channel_test_flag (D.47181_16, 73);



Registering new PHI nodes in block #5

Updating SSA information for statement D.47181_18 = aleg_session_1(D)->channel;

Updating SSA information for statement D.47186_19 = switch_channel_get_session (D.47181_18);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 259, D.47186_19, 101, "CF_ZRTP_PASSTHRU_REQ not set on a-leg, so not propagating zrtp-hash\n");



Registering new PHI nodes in block #6

Updating SSA information for statement D.47187_20 = aleg_engine_9->remote_sdp_zrtp_hash;



Registering new PHI nodes in block #7

Updating SSA information for statement D.47181_21 = aleg_session_1(D)->channel;

Updating SSA information for statement D.47190_22 = switch_channel_get_session (D.47181_21);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 265, D.47190_22, 7, "Passing a-leg remote zrtp-hash (audio) to b-leg\n");

Updating SSA information for statement D.47187_23 = aleg_engine_9->remote_sdp_zrtp_hash;

Updating SSA information for statement D.47191_24 = switch_core_perform_session_strdup (bleg_session_3(D), D.47187_23, "src/switch_core_media.c", &__func__, 266);

Updating SSA information for statement bleg_engine_13->local_sdp_zrtp_hash = D.47191_24;

Updating SSA information for statement D.47192_25 = bleg_session_3(D)->channel;

Updating SSA information for statement D.47193_26 = bleg_engine_13->local_sdp_zrtp_hash;

Updating SSA information for statement switch_channel_set_variable_var_check (D.47192_25, "l_sdp_audio_zrtp_hash", D.47193_26, 1);



Registering new PHI nodes in block #8

Updating SSA information for statement D.47194_27 = bleg_engine_13->remote_sdp_zrtp_hash;



Registering new PHI nodes in block #9

Updating SSA information for statement D.47181_28 = aleg_session_1(D)->channel;

Updating SSA information for statement D.47197_29 = switch_channel_get_session (D.47181_28);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 271, D.47197_29, 7, "Passing b-leg remote zrtp-hash (audio) to a-leg\n");

Updating SSA information for statement D.47194_30 = bleg_engine_13->remote_sdp_zrtp_hash;

Updating SSA information for statement D.47198_31 = switch_core_perform_session_strdup (aleg_session_1(D), D.47194_30, "src/switch_core_media.c", &__func__, 272);

Updating SSA information for statement aleg_engine_9->local_sdp_zrtp_hash = D.47198_31;

Updating SSA information for statement D.47181_32 = aleg_session_1(D)->channel;

Updating SSA information for statement D.47199_33 = aleg_engine_9->local_sdp_zrtp_hash;

Updating SSA information for statement switch_channel_set_variable_var_check (D.47181_32, "l_sdp_audio_zrtp_hash", D.47199_33, 1);



Registering new PHI nodes in block #10



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 11
Number of blocks to update: 10 ( 91%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_engine_t * aleg_engine;
  struct switch_rtp_engine_t * bleg_engine;
  static const char __func__[35] = "_switch_core_media_pass_zrtp_hash2";

}
_switch_core_media_pass_zrtp_hash2 (struct switch_core_session_t * aleg_session, struct switch_core_session_t * bleg_session, switch_media_type_t type)
{
  static const char __func__[35] = "_switch_core_media_pass_zrtp_hash2";
  struct switch_rtp_engine_t * bleg_engine;
  struct switch_rtp_engine_t * aleg_engine;
  char * D.47199;
  char * D.47198;
  struct switch_core_session_t * D.47197;
  char * D.47194;
  char * D.47193;
  struct switch_channel_t * D.47192;
  char * D.47191;
  struct switch_core_session_t * D.47190;
  char * D.47187;
  struct switch_core_session_t * D.47186;
  uint32_t D.47183;
  struct switch_core_session_t * D.47182;
  struct switch_channel_t * D.47181;
  struct switch_rtp_engine_t[2] * D.47180;
  unsigned int D.47179;
  struct switch_rtp_engine_t[2] * D.47178;
  struct switch_media_handle_t * D.47177;
  struct switch_media_handle_t * D.47175;

<bb 2>:
  D.47175_2 = aleg_session_1(D)->media_handle;
  if (D.47175_2 == 0B)
    goto <bb 10>;
  else
    goto <bb 3>;

<bb 3>:
  D.47177_4 = bleg_session_3(D)->media_handle;
  if (D.47177_4 == 0B)
    goto <bb 10>;
  else
    goto <bb 4>;

<bb 4>:
  D.47175_5 = aleg_session_1(D)->media_handle;
  D.47178_6 = &D.47175_5->engines;
  D.47179_8 = type_7(D) * 11416;
  aleg_engine_9 = D.47178_6 + D.47179_8;
  # DEBUG aleg_engine => aleg_engine_9
  D.47177_10 = bleg_session_3(D)->media_handle;
  D.47180_11 = &D.47177_10->engines;
  D.47179_12 = type_7(D) * 11416;
  bleg_engine_13 = D.47180_11 + D.47179_12;
  # DEBUG bleg_engine => bleg_engine_13
  D.47181_14 = aleg_session_1(D)->channel;
  D.47182_15 = switch_channel_get_session (D.47181_14);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 255, D.47182_15, 101, "Deciding whether to pass zrtp-hash between a-leg and b-leg\n");
  D.47181_16 = aleg_session_1(D)->channel;
  D.47183_17 = switch_channel_test_flag (D.47181_16, 73);
  if (D.47183_17 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47181_18 = aleg_session_1(D)->channel;
  D.47186_19 = switch_channel_get_session (D.47181_18);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 259, D.47186_19, 101, "CF_ZRTP_PASSTHRU_REQ not set on a-leg, so not propagating zrtp-hash\n");
  goto <bb 10>;

<bb 6>:
  D.47187_20 = aleg_engine_9->remote_sdp_zrtp_hash;
  if (D.47187_20 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.47181_21 = aleg_session_1(D)->channel;
  D.47190_22 = switch_channel_get_session (D.47181_21);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 265, D.47190_22, 7, "Passing a-leg remote zrtp-hash (audio) to b-leg\n");
  D.47187_23 = aleg_engine_9->remote_sdp_zrtp_hash;
  D.47191_24 = switch_core_perform_session_strdup (bleg_session_3(D), D.47187_23, "src/switch_core_media.c", &__func__, 266);
  bleg_engine_13->local_sdp_zrtp_hash = D.47191_24;
  D.47192_25 = bleg_session_3(D)->channel;
  D.47193_26 = bleg_engine_13->local_sdp_zrtp_hash;
  switch_channel_set_variable_var_check (D.47192_25, "l_sdp_audio_zrtp_hash", D.47193_26, 1);

<bb 8>:
  D.47194_27 = bleg_engine_13->remote_sdp_zrtp_hash;
  if (D.47194_27 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.47181_28 = aleg_session_1(D)->channel;
  D.47197_29 = switch_channel_get_session (D.47181_28);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 271, D.47197_29, 7, "Passing b-leg remote zrtp-hash (audio) to a-leg\n");
  D.47194_30 = bleg_engine_13->remote_sdp_zrtp_hash;
  D.47198_31 = switch_core_perform_session_strdup (aleg_session_1(D), D.47194_30, "src/switch_core_media.c", &__func__, 272);
  aleg_engine_9->local_sdp_zrtp_hash = D.47198_31;
  D.47181_32 = aleg_session_1(D)->channel;
  D.47199_33 = aleg_engine_9->local_sdp_zrtp_hash;
  switch_channel_set_variable_var_check (D.47181_32, "l_sdp_audio_zrtp_hash", D.47199_33, 1);

<bb 10>:
  return;

}



;; Function switch_true (switch_true)



Renaming block #0



Renaming block #2

Renaming statement if (expr != 0B)



Renaming block #3

Renaming statement D.40601 = strcasecmp (expr, "yes");

Renaming statement if (D.40601 == 0)



Renaming block #4

Renaming statement D.40603 = strcasecmp (expr, "on");

Renaming statement if (D.40603 == 0)



Renaming block #5

Renaming statement D.40605 = strcasecmp (expr, "true");

Renaming statement if (D.40605 == 0)



Renaming block #6

Renaming statement D.40607 = strcasecmp (expr, "t");

Renaming statement if (D.40607 == 0)



Renaming block #7

Renaming statement D.40609 = strcasecmp (expr, "enabled");

Renaming statement if (D.40609 == 0)



Renaming block #8

Renaming statement D.40611 = strcasecmp (expr, "active");

Renaming statement if (D.40611 == 0)



Renaming block #9

Renaming statement D.40613 = strcasecmp (expr, "allow");

Renaming statement if (D.40613 == 0)



Renaming block #10

Renaming statement D.40615 = switch_is_number (expr);

Renaming statement if (D.40615 != 0)



Renaming block #11

Renaming statement D.40617 = atoi (expr);

Renaming statement if (D.40617 != 0)



Renaming block #12

Renaming statement iftmp.6 = 1;



Renaming block #13

Renaming statement iftmp.6 = 0;



Renaming block #14

Renaming statement D.40595 = iftmp.6;

Renaming statement return D.40595;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement D.40601_3 = strcasecmp (expr_2(D), "yes");



Registering new PHI nodes in block #4

Updating SSA information for statement D.40603_4 = strcasecmp (expr_2(D), "on");



Registering new PHI nodes in block #5

Updating SSA information for statement D.40605_5 = strcasecmp (expr_2(D), "true");



Registering new PHI nodes in block #6

Updating SSA information for statement D.40607_6 = strcasecmp (expr_2(D), "t");



Registering new PHI nodes in block #7

Updating SSA information for statement D.40609_7 = strcasecmp (expr_2(D), "enabled");



Registering new PHI nodes in block #8

Updating SSA information for statement D.40611_8 = strcasecmp (expr_2(D), "active");



Registering new PHI nodes in block #9

Updating SSA information for statement D.40613_9 = strcasecmp (expr_2(D), "allow");



Registering new PHI nodes in block #10

Updating SSA information for statement D.40615_10 = switch_is_number (expr_2(D));



Registering new PHI nodes in block #11

Updating SSA information for statement D.40617_11 = atoi (expr_2(D));



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 15
Number of blocks to update: 14 ( 93%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 


Scope blocks after cleanups:

{ Scope block #0 

}
switch_true (const char * expr)
{
  int D.40617;
  switch_bool_t D.40615;
  int D.40613;
  int D.40611;
  int D.40609;
  int D.40607;
  int D.40605;
  int D.40603;
  int D.40601;
  int iftmp.6;
  int D.40595;

<bb 2>:
  if (expr_2(D) != 0B)
    goto <bb 3>;
  else
    goto <bb 13>;

<bb 3>:
  D.40601_3 = strcasecmp (expr_2(D), "yes");
  if (D.40601_3 == 0)
    goto <bb 12>;
  else
    goto <bb 4>;

<bb 4>:
  D.40603_4 = strcasecmp (expr_2(D), "on");
  if (D.40603_4 == 0)
    goto <bb 12>;
  else
    goto <bb 5>;

<bb 5>:
  D.40605_5 = strcasecmp (expr_2(D), "true");
  if (D.40605_5 == 0)
    goto <bb 12>;
  else
    goto <bb 6>;

<bb 6>:
  D.40607_6 = strcasecmp (expr_2(D), "t");
  if (D.40607_6 == 0)
    goto <bb 12>;
  else
    goto <bb 7>;

<bb 7>:
  D.40609_7 = strcasecmp (expr_2(D), "enabled");
  if (D.40609_7 == 0)
    goto <bb 12>;
  else
    goto <bb 8>;

<bb 8>:
  D.40611_8 = strcasecmp (expr_2(D), "active");
  if (D.40611_8 == 0)
    goto <bb 12>;
  else
    goto <bb 9>;

<bb 9>:
  D.40613_9 = strcasecmp (expr_2(D), "allow");
  if (D.40613_9 == 0)
    goto <bb 12>;
  else
    goto <bb 10>;

<bb 10>:
  D.40615_10 = switch_is_number (expr_2(D));
  if (D.40615_10 != 0)
    goto <bb 11>;
  else
    goto <bb 13>;

<bb 11>:
  D.40617_11 = atoi (expr_2(D));
  if (D.40617_11 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  iftmp.6_12 = 1;
  goto <bb 14>;

<bb 13>:
  iftmp.6_13 = 0;

<bb 14>:
  # iftmp.6_1 = PHI <iftmp.6_12(12), iftmp.6_13(13)>
  D.40595_14 = iftmp.6_1;
  return D.40595_14;

}



;; Function switch_false (switch_false)



Renaming block #0



Renaming block #2

Renaming statement if (expr != 0B)



Renaming block #3

Renaming statement D.41141 = strcasecmp (expr, "no");

Renaming statement if (D.41141 == 0)



Renaming block #4

Renaming statement D.41143 = strcasecmp (expr, "off");

Renaming statement if (D.41143 == 0)



Renaming block #5

Renaming statement D.41145 = strcasecmp (expr, "false");

Renaming statement if (D.41145 == 0)



Renaming block #6

Renaming statement D.41147 = strcasecmp (expr, "f");

Renaming statement if (D.41147 == 0)



Renaming block #7

Renaming statement D.41149 = strcasecmp (expr, "disabled");

Renaming statement if (D.41149 == 0)



Renaming block #8

Renaming statement D.41151 = strcasecmp (expr, "inactive");

Renaming statement if (D.41151 == 0)



Renaming block #9

Renaming statement D.41153 = strcasecmp (expr, "disallow");

Renaming statement if (D.41153 == 0)



Renaming block #10

Renaming statement D.41155 = switch_is_number (expr);

Renaming statement if (D.41155 != 0)



Renaming block #11

Renaming statement D.41157 = atoi (expr);

Renaming statement if (D.41157 == 0)



Renaming block #12

Renaming statement iftmp.14 = 1;



Renaming block #13

Renaming statement iftmp.14 = 0;



Renaming block #14

Renaming statement D.41135 = iftmp.14;

Renaming statement return D.41135;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement D.41141_3 = strcasecmp (expr_2(D), "no");



Registering new PHI nodes in block #4

Updating SSA information for statement D.41143_4 = strcasecmp (expr_2(D), "off");



Registering new PHI nodes in block #5

Updating SSA information for statement D.41145_5 = strcasecmp (expr_2(D), "false");



Registering new PHI nodes in block #6

Updating SSA information for statement D.41147_6 = strcasecmp (expr_2(D), "f");



Registering new PHI nodes in block #7

Updating SSA information for statement D.41149_7 = strcasecmp (expr_2(D), "disabled");



Registering new PHI nodes in block #8

Updating SSA information for statement D.41151_8 = strcasecmp (expr_2(D), "inactive");



Registering new PHI nodes in block #9

Updating SSA information for statement D.41153_9 = strcasecmp (expr_2(D), "disallow");



Registering new PHI nodes in block #10

Updating SSA information for statement D.41155_10 = switch_is_number (expr_2(D));



Registering new PHI nodes in block #11

Updating SSA information for statement D.41157_11 = atoi (expr_2(D));



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 15
Number of blocks to update: 14 ( 93%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 


Scope blocks after cleanups:

{ Scope block #0 

}
switch_false (const char * expr)
{
  int D.41157;
  switch_bool_t D.41155;
  int D.41153;
  int D.41151;
  int D.41149;
  int D.41147;
  int D.41145;
  int D.41143;
  int D.41141;
  int iftmp.14;
  int D.41135;

<bb 2>:
  if (expr_2(D) != 0B)
    goto <bb 3>;
  else
    goto <bb 13>;

<bb 3>:
  D.41141_3 = strcasecmp (expr_2(D), "no");
  if (D.41141_3 == 0)
    goto <bb 12>;
  else
    goto <bb 4>;

<bb 4>:
  D.41143_4 = strcasecmp (expr_2(D), "off");
  if (D.41143_4 == 0)
    goto <bb 12>;
  else
    goto <bb 5>;

<bb 5>:
  D.41145_5 = strcasecmp (expr_2(D), "false");
  if (D.41145_5 == 0)
    goto <bb 12>;
  else
    goto <bb 6>;

<bb 6>:
  D.41147_6 = strcasecmp (expr_2(D), "f");
  if (D.41147_6 == 0)
    goto <bb 12>;
  else
    goto <bb 7>;

<bb 7>:
  D.41149_7 = strcasecmp (expr_2(D), "disabled");
  if (D.41149_7 == 0)
    goto <bb 12>;
  else
    goto <bb 8>;

<bb 8>:
  D.41151_8 = strcasecmp (expr_2(D), "inactive");
  if (D.41151_8 == 0)
    goto <bb 12>;
  else
    goto <bb 9>;

<bb 9>:
  D.41153_9 = strcasecmp (expr_2(D), "disallow");
  if (D.41153_9 == 0)
    goto <bb 12>;
  else
    goto <bb 10>;

<bb 10>:
  D.41155_10 = switch_is_number (expr_2(D));
  if (D.41155_10 != 0)
    goto <bb 11>;
  else
    goto <bb 13>;

<bb 11>:
  D.41157_11 = atoi (expr_2(D));
  if (D.41157_11 == 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  iftmp.14_12 = 1;
  goto <bb 14>;

<bb 13>:
  iftmp.14_13 = 0;

<bb 14>:
  # iftmp.14_1 = PHI <iftmp.14_12(12), iftmp.14_13(13)>
  D.41135_14 = iftmp.14_1;
  return D.41135_14;

}



;; Function add_audio_codec (add_audio_codec)



Renaming block #0



Renaming block #2

Renaming statement codec_ms = ptime;

Renaming statement map_bit_rate = 0;

Renaming statement if (codec_ms == 0)



Renaming block #3

Renaming statement D.40660 = map->rm_encoding;

Renaming statement D.40661 = map->rm_pt;

Renaming statement D.40662 = (uint32_t) D.40661;

Renaming statement D.40663 = switch_default_ptime (D.40660, D.40662);

Renaming statement codec_ms = (int) D.40663;



Renaming block #4

Renaming statement D.40661 = map->rm_pt;

Renaming statement D.40664 = (unsigned char) D.40661;

Renaming statement map_bit_rate = switch_known_bitrate (D.40664);

Renaming statement if (ptime == 0)



Renaming block #5

Renaming statement D.40660 = map->rm_encoding;

Renaming statement D.40667 = strcasecmp (D.40660, "g723");

Renaming statement if (D.40667 == 0)



Renaming block #6

Renaming statement codec_ms = 30;

Renaming statement ptime = codec_ms;



Renaming block #7

Renaming statement D.40670 = map->rm_fmtp;

Renaming statement D.40671 = _zstr (D.40670);

Renaming statement if (D.40671 != 0)



Renaming block #8

Renaming statement D.40660 = map->rm_encoding;

Renaming statement D.40674 = strcasecmp (D.40660, "ilbc");

Renaming statement if (D.40674 == 0)



Renaming block #9

Renaming statement codec_ms = 30;

Renaming statement ptime = codec_ms;

Renaming statement map_bit_rate = 13330;



Renaming block #10

Renaming statement D.40660 = map->rm_encoding;

Renaming statement D.40678 = strcasecmp (D.40660, "isac");

Renaming statement if (D.40678 == 0)



Renaming block #11

Renaming statement codec_ms = 30;

Renaming statement ptime = codec_ms;

Renaming statement map_bit_rate = 32000;



Renaming block #12

Renaming statement D.40660 = map->rm_encoding;

Renaming statement D.40670 = map->rm_fmtp;

Renaming statement D.40682 = map->rm_rate;

Renaming statement D.40683 = switch_core_codec_parse_fmtp (D.40660, D.40670, D.40682, &codec_fmtp);

Renaming statement if (D.40683 == 0)



Renaming block #13

Renaming statement D.40686 = codec_fmtp.bits_per_second;

Renaming statement if (D.40686 != 0)



Renaming block #14

Renaming statement D.40686 = codec_fmtp.bits_per_second;

Renaming statement map_bit_rate = (uint32_t) D.40686;



Renaming block #15

Renaming statement D.40689 = codec_fmtp.microseconds_per_packet;

Renaming statement if (D.40689 != 0)



Renaming block #16

Renaming statement D.40689 = codec_fmtp.microseconds_per_packet;

Renaming statement codec_ms = D.40689 / 1000;



Renaming block #17

Renaming statement D.40682 = map->rm_rate;

Renaming statement if (D.40682 != 0)



Renaming block #18

Renaming statement D.40682 = map->rm_rate;

Renaming statement switch_snprintf (&ratestr, 20, "@%uh", D.40682);



Renaming block #19

Renaming statement if (codec_ms != 0)



Renaming block #20

Renaming statement switch_snprintf (&ptstr, 20, "@%di", codec_ms);



Renaming block #21

Renaming statement if (map_bit_rate != 0)



Renaming block #22

Renaming statement switch_snprintf (&bitstr, 20, "@%db", map_bit_rate);



Renaming block #23

Renaming statement D.40698 = strlen (buf);

Renaming statement D.40699 = buf + D.40698;

Renaming statement D.40700 = strlen (buf);

Renaming statement D.40701 = buflen - D.40700;

Renaming statement D.40660 = map->rm_encoding;

Renaming statement switch_snprintf (D.40699, D.40701, ",%s%s%s%s", D.40660, &ratestr, &ptstr, &bitstr);



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement ptstr = "";

Updating SSA information for statement ratestr = "";

Updating SSA information for statement bitstr = "";

Updating SSA information for statement codec_fmtp = {};



Registering new PHI nodes in block #3

Updating SSA information for statement D.40660_10 = map_9(D)->rm_encoding;

Updating SSA information for statement D.40661_11 = map_9(D)->rm_pt;

Updating SSA information for statement D.40663_13 = switch_default_ptime (D.40660_10, D.40662_12);



Registering new PHI nodes in block #4

Updating SSA information for statement D.40661_15 = map_9(D)->rm_pt;



Registering new PHI nodes in block #5

Updating SSA information for statement D.40660_18 = map_9(D)->rm_encoding;

Updating SSA information for statement D.40667_19 = strcasecmp (D.40660_18, "g723");



Registering new PHI nodes in block #6



Registering new PHI nodes in block #7

Updating SSA information for statement D.40670_22 = map_9(D)->rm_fmtp;

Updating SSA information for statement D.40671_23 = _zstr (D.40670_22);



Registering new PHI nodes in block #8

Updating SSA information for statement D.40660_24 = map_9(D)->rm_encoding;

Updating SSA information for statement D.40674_25 = strcasecmp (D.40660_24, "ilbc");



Registering new PHI nodes in block #9



Registering new PHI nodes in block #10

Updating SSA information for statement D.40660_29 = map_9(D)->rm_encoding;

Updating SSA information for statement D.40678_30 = strcasecmp (D.40660_29, "isac");



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement D.40660_34 = map_9(D)->rm_encoding;

Updating SSA information for statement D.40670_35 = map_9(D)->rm_fmtp;

Updating SSA information for statement D.40682_36 = map_9(D)->rm_rate;

Updating SSA information for statement D.40683_37 = switch_core_codec_parse_fmtp (D.40660_34, D.40670_35, D.40682_36, &codec_fmtp);



Registering new PHI nodes in block #13

Updating SSA information for statement D.40686_38 = codec_fmtp.bits_per_second;



Registering new PHI nodes in block #14

Updating SSA information for statement D.40686_39 = codec_fmtp.bits_per_second;



Registering new PHI nodes in block #15

Updating SSA information for statement D.40689_41 = codec_fmtp.microseconds_per_packet;



Registering new PHI nodes in block #16

Updating SSA information for statement D.40689_42 = codec_fmtp.microseconds_per_packet;



Registering new PHI nodes in block #17

Updating SSA information for statement D.40682_44 = map_9(D)->rm_rate;



Registering new PHI nodes in block #18

Updating SSA information for statement D.40682_45 = map_9(D)->rm_rate;

Updating SSA information for statement switch_snprintf (&ratestr, 20, "@%uh", D.40682_45);



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20

Updating SSA information for statement switch_snprintf (&ptstr, 20, "@%di", codec_ms_3);



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22

Updating SSA information for statement switch_snprintf (&bitstr, 20, "@%db", map_bit_rate_5);



Registering new PHI nodes in block #23

Updating SSA information for statement D.40698_47 = strlen (buf_46(D));

Updating SSA information for statement D.40700_49 = strlen (buf_46(D));

Updating SSA information for statement D.40660_52 = map_9(D)->rm_encoding;

Updating SSA information for statement switch_snprintf (D.40699_48, D.40701_51, ",%s%s%s%s", D.40660_52, &ratestr, &ptstr, &bitstr);



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 24
Number of blocks to update: 23 ( 96%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 


Scope blocks after cleanups:

{ Scope block #0 
  int codec_ms;
  uint32_t map_bit_rate;
  char ptstr[20];
  char ratestr[20];
  char bitstr[20];
  struct switch_codec_fmtp_t codec_fmtp;

}
add_audio_codec (struct sdp_rtpmap_t * map, int ptime, char * buf, switch_size_t buflen)
{
  struct switch_codec_fmtp_t codec_fmtp;
  char bitstr[20];
  char ratestr[20];
  char ptstr[20];
  uint32_t map_bit_rate;
  int codec_ms;
  switch_size_t D.40701;
  size_t D.40700;
  char * D.40699;
  size_t D.40698;
  int D.40689;
  int D.40686;
  switch_status_t D.40683;
  long unsigned int D.40682;
  int D.40678;
  int D.40674;
  int D.40671;
  const char * D.40670;
  int D.40667;
  unsigned char D.40664;
  uint32_t D.40663;
  uint32_t D.40662;
  <unnamed-unsigned:7> D.40661;
  const char * D.40660;

<bb 2>:
  codec_ms_7 = ptime_6(D);
  # DEBUG codec_ms => codec_ms_7
  map_bit_rate_8 = 0;
  # DEBUG map_bit_rate => map_bit_rate_8
  ptstr = "";
  ratestr = "";
  bitstr = "";
  codec_fmtp = {};
  if (codec_ms_7 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.40660_10 = map_9(D)->rm_encoding;
  D.40661_11 = map_9(D)->rm_pt;
  D.40662_12 = (uint32_t) D.40661_11;
  D.40663_13 = switch_default_ptime (D.40660_10, D.40662_12);
  codec_ms_14 = (int) D.40663_13;
  # DEBUG codec_ms => codec_ms_14

<bb 4>:
  # codec_ms_1 = PHI <codec_ms_7(2), codec_ms_14(3)>
  # DEBUG codec_ms => codec_ms_1
  D.40661_15 = map_9(D)->rm_pt;
  D.40664_16 = (unsigned char) D.40661_15;
  map_bit_rate_17 = switch_known_bitrate (D.40664_16);
  # DEBUG map_bit_rate => map_bit_rate_17
  if (ptime_6(D) == 0)
    goto <bb 5>;
  else
    goto <bb 7>;

<bb 5>:
  D.40660_18 = map_9(D)->rm_encoding;
  D.40667_19 = strcasecmp (D.40660_18, "g723");
  if (D.40667_19 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  codec_ms_20 = 30;
  # DEBUG codec_ms => codec_ms_20
  ptime_21 = codec_ms_20;
  # DEBUG ptime => ptime_21

<bb 7>:
  # codec_ms_2 = PHI <codec_ms_1(4), codec_ms_1(5), codec_ms_20(6)>
  # DEBUG codec_ms => codec_ms_2
  D.40670_22 = map_9(D)->rm_fmtp;
  D.40671_23 = _zstr (D.40670_22);
  if (D.40671_23 != 0)
    goto <bb 8>;
  else
    goto <bb 12>;

<bb 8>:
  D.40660_24 = map_9(D)->rm_encoding;
  D.40674_25 = strcasecmp (D.40660_24, "ilbc");
  if (D.40674_25 == 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  codec_ms_26 = 30;
  # DEBUG codec_ms => codec_ms_26
  ptime_27 = codec_ms_26;
  # DEBUG ptime => ptime_27
  map_bit_rate_28 = 13330;
  # DEBUG map_bit_rate => map_bit_rate_28
  goto <bb 17>;

<bb 10>:
  D.40660_29 = map_9(D)->rm_encoding;
  D.40678_30 = strcasecmp (D.40660_29, "isac");
  if (D.40678_30 == 0)
    goto <bb 11>;
  else
    goto <bb 17>;

<bb 11>:
  codec_ms_31 = 30;
  # DEBUG codec_ms => codec_ms_31
  ptime_32 = codec_ms_31;
  # DEBUG ptime => ptime_32
  map_bit_rate_33 = 32000;
  # DEBUG map_bit_rate => map_bit_rate_33
  goto <bb 17>;

<bb 12>:
  D.40660_34 = map_9(D)->rm_encoding;
  D.40670_35 = map_9(D)->rm_fmtp;
  D.40682_36 = map_9(D)->rm_rate;
  D.40683_37 = switch_core_codec_parse_fmtp (D.40660_34, D.40670_35, D.40682_36, &codec_fmtp);
  if (D.40683_37 == 0)
    goto <bb 13>;
  else
    goto <bb 17>;

<bb 13>:
  D.40686_38 = codec_fmtp.bits_per_second;
  if (D.40686_38 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.40686_39 = codec_fmtp.bits_per_second;
  map_bit_rate_40 = (uint32_t) D.40686_39;
  # DEBUG map_bit_rate => map_bit_rate_40

<bb 15>:
  # map_bit_rate_4 = PHI <map_bit_rate_17(13), map_bit_rate_40(14)>
  # DEBUG map_bit_rate => map_bit_rate_4
  D.40689_41 = codec_fmtp.microseconds_per_packet;
  if (D.40689_41 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.40689_42 = codec_fmtp.microseconds_per_packet;
  codec_ms_43 = D.40689_42 / 1000;
  # DEBUG codec_ms => codec_ms_43

<bb 17>:
  # codec_ms_3 = PHI <codec_ms_2(10), codec_ms_2(12), codec_ms_2(15), codec_ms_43(16), codec_ms_26(9), codec_ms_31(11)>
  # map_bit_rate_5 = PHI <map_bit_rate_17(10), map_bit_rate_17(12), map_bit_rate_4(15), map_bit_rate_4(16), map_bit_rate_28(9), map_bit_rate_33(11)>
  # DEBUG map_bit_rate => map_bit_rate_5
  # DEBUG codec_ms => codec_ms_3
  D.40682_44 = map_9(D)->rm_rate;
  if (D.40682_44 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.40682_45 = map_9(D)->rm_rate;
  switch_snprintf (&ratestr, 20, "@%uh", D.40682_45);

<bb 19>:
  if (codec_ms_3 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  switch_snprintf (&ptstr, 20, "@%di", codec_ms_3);

<bb 21>:
  if (map_bit_rate_5 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  switch_snprintf (&bitstr, 20, "@%db", map_bit_rate_5);

<bb 23>:
  D.40698_47 = strlen (buf_46(D));
  D.40699_48 = buf_46(D) + D.40698_47;
  D.40700_49 = strlen (buf_46(D));
  D.40701_51 = buflen_50(D) - D.40700_49;
  D.40660_52 = map_9(D)->rm_encoding;
  switch_snprintf (D.40699_48, D.40701_51, ",%s%s%s%s", D.40660_52, &ratestr, &ptstr, &bitstr);
  return;

}



;; Function switch_core_session_parse_crypto_prefs (switch_core_session_parse_crypto_prefs)



Renaming block #0



Renaming block #2

Renaming statement var = 0B;

Renaming statement val = 0B;

Renaming statement suites = 0B;

Renaming statement argc = 0;

Renaming statement i = 0;

Renaming statement j = 0;

Renaming statement k = 0;

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #3

Renaming statement D.42525 = session->channel;

Renaming statement D.42526 = switch_channel_test_flag (D.42525, 106);

Renaming statement if (D.42526 != 0)



Renaming block #4

Renaming statement D.42525 = session->channel;

Renaming statement D.42529 = switch_channel_direction (D.42525);

Renaming statement if (D.42529 == 0)



Renaming block #5

Renaming statement var = "rtp_secure_media_inbound";



Renaming block #6

Renaming statement var = "rtp_secure_media_outbound";



Renaming block #7

Renaming statement D.42525 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.42525, var, 1, -1);

Renaming statement if (val == 0B)



Renaming block #8

Renaming statement var = "rtp_secure_media";

Renaming statement D.42525 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.42525, var, 1, -1);



Renaming block #9

Renaming statement D.42535 = _zstr (val);

Renaming statement if (D.42535 == 0)



Renaming block #10

Renaming statement suites = __builtin_strchr (val, 58);

Renaming statement if (suites != 0B)



Renaming block #11

Renaming statement *suites = 0;

Renaming statement suites = suites + 1;



Renaming block #12

Renaming statement D.42540 = _zstr (suites);

Renaming statement if (D.42540 != 0)



Renaming block #13

Renaming statement D.42525 = session->channel;

Renaming statement suites = switch_channel_get_variable_dup (D.42525, "rtp_secure_media_suites", 1, -1);



Renaming block #14

Renaming statement D.42543 = _zstr (val);

Renaming statement if (D.42543 != 0)



Renaming block #15

Renaming statement D.42525 = session->channel;

Renaming statement D.42548 = switch_channel_direction (D.42525);

Renaming statement if (D.42548 == 0)



Renaming block #16

Renaming statement D.42525 = session->channel;

Renaming statement D.42550 = switch_channel_test_flag (D.42525, 84);

Renaming statement if (D.42550 == 0)



Renaming block #17

Renaming statement val = "optional";



Renaming block #18

Renaming statement val = "forbidden";



Renaming block #19

Renaming statement D.42552 = strcasecmp (val, "optional");

Renaming statement if (D.42552 == 0)



Renaming block #20

Renaming statement smh->crypto_mode = 0;



Renaming block #21

Renaming statement D.42559 = switch_true (val);

Renaming statement if (D.42559 != 0)



Renaming block #22

Renaming statement D.42561 = strcasecmp (val, "mandatory");

Renaming statement if (D.42561 == 0)



Renaming block #24

Renaming statement smh->crypto_mode = 2;

Renaming statement D.42562 = switch_false (val);

Renaming statement if (D.42562 == 0)



Renaming block #25

Renaming statement D.42565 = strcasecmp (val, "forbidden");

Renaming statement if (D.42565 != 0)



Renaming block #26

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1123, session, 4, "INVALID VALUE FOR %s defaulting to \'forbidden\'\n", var);



Renaming block #23

Renaming statement smh->crypto_mode = 1;



Renaming block #27

Renaming statement D.42569 = smh->crypto_mode;

Renaming statement if (D.42569 != 2)



Renaming block #28

Renaming statement D.42571 = _zstr (suites);

Renaming statement if (D.42571 == 0)



Renaming block #29

Renaming statement D.42573 = switch_separate_string (suites, 58, &fields, 10);

Renaming statement argc = (int) D.42573;

Renaming statement i = 0;



Renaming block #38

Renaming statement if (i < argc)



Renaming block #30

Renaming statement ok = 0;

Renaming statement j = 0;



Renaming block #34

Renaming statement if (j <= 8)



Renaming block #31

Renaming statement D.42574 = fields[i];

Renaming statement D.42575 = SUITES[j].name;

Renaming statement D.42576 = strcasecmp (D.42574, D.42575);

Renaming statement if (D.42576 == 0)



Renaming block #32

Renaming statement D.42579 = SUITES[j].type;

Renaming statement smh->crypto_suite_order[k] = D.42579;

Renaming statement k = k + 1;

Renaming statement ok = ok + 1;



Renaming block #33

Renaming statement j = j + 1;



Renaming block #35

Renaming statement if (ok == 0)



Renaming block #36

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1142, session, 4, "INVALID SUITE SUPPLIED\n");



Renaming block #37

Renaming statement i = i + 1;



Renaming block #39

Renaming statement i = 0;



Renaming block #41

Renaming statement if (i <= 8)



Renaming block #40

Renaming statement D.42582 = SUITES[i].type;

Renaming statement smh->crypto_suite_order[k] = D.42582;

Renaming statement k = k + 1;

Renaming statement i = i + 1;



Renaming block #42



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement smh_22 = session_21(D)->media_handle;



Registering new PHI nodes in block #3

Updating SSA information for statement D.42525_23 = session_21(D)->channel;

Updating SSA information for statement D.42526_24 = switch_channel_test_flag (D.42525_23, 106);



Registering new PHI nodes in block #4

Updating SSA information for statement D.42525_25 = session_21(D)->channel;

Updating SSA information for statement D.42529_26 = switch_channel_direction (D.42525_25);



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6



Registering new PHI nodes in block #7

Updating SSA information for statement D.42525_29 = session_21(D)->channel;

Updating SSA information for statement val_30 = switch_channel_get_variable_dup (D.42525_29, var_1, 1, -1);



Registering new PHI nodes in block #8

Updating SSA information for statement D.42525_32 = session_21(D)->channel;

Updating SSA information for statement val_33 = switch_channel_get_variable_dup (D.42525_32, var_31, 1, -1);



Registering new PHI nodes in block #9

Updating SSA information for statement D.42535_34 = _zstr (val_3);



Registering new PHI nodes in block #10

Updating SSA information for statement suites_35 = __builtin_strchr (val_3, 58);



Registering new PHI nodes in block #11

Updating SSA information for statement *suites_35 = 0;



Registering new PHI nodes in block #12

Updating SSA information for statement D.42540_37 = _zstr (suites_5);



Registering new PHI nodes in block #13

Updating SSA information for statement D.42525_38 = session_21(D)->channel;

Updating SSA information for statement suites_39 = switch_channel_get_variable_dup (D.42525_38, "rtp_secure_media_suites", 1, -1);



Registering new PHI nodes in block #14

Updating SSA information for statement D.42543_40 = _zstr (val_3);



Registering new PHI nodes in block #15

Updating SSA information for statement D.42525_41 = session_21(D)->channel;

Updating SSA information for statement D.42548_42 = switch_channel_direction (D.42525_41);



Registering new PHI nodes in block #16

Updating SSA information for statement D.42525_43 = session_21(D)->channel;

Updating SSA information for statement D.42550_44 = switch_channel_test_flag (D.42525_43, 84);



Registering new PHI nodes in block #17



Registering new PHI nodes in block #18



Registering new PHI nodes in block #19

Updating SSA information for statement D.42552_47 = strcasecmp (val_4, "optional");



Registering new PHI nodes in block #20

Updating SSA information for statement smh_22->crypto_mode = 0;



Registering new PHI nodes in block #21

Updating SSA information for statement D.42559_48 = switch_true (val_4);



Registering new PHI nodes in block #22

Updating SSA information for statement D.42561_49 = strcasecmp (val_4, "mandatory");



Registering new PHI nodes in block #24

Updating SSA information for statement smh_22->crypto_mode = 2;

Updating SSA information for statement D.42562_50 = switch_false (val_4);



Registering new PHI nodes in block #25

Updating SSA information for statement D.42565_51 = strcasecmp (val_4, "forbidden");



Registering new PHI nodes in block #26

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1123, session_21(D), 4, "INVALID VALUE FOR %s defaulting to \'forbidden\'\n", var_2);



Registering new PHI nodes in block #23

Updating SSA information for statement smh_22->crypto_mode = 1;



Registering new PHI nodes in block #27

Updating SSA information for statement D.42569_52 = smh_22->crypto_mode;



Registering new PHI nodes in block #28

Updating SSA information for statement D.42571_53 = _zstr (suites_6);



Registering new PHI nodes in block #29

Updating SSA information for statement D.42573_54 = switch_separate_string (suites_6, 58, &fields, 10);



Registering new PHI nodes in block #38



Registering new PHI nodes in block #30



Registering new PHI nodes in block #34



Registering new PHI nodes in block #31

Updating SSA information for statement D.42574_59 = fields[i_7];

Updating SSA information for statement D.42575_60 = SUITES[j_9].name;

Updating SSA information for statement D.42576_61 = strcasecmp (D.42574_59, D.42575_60);



Registering new PHI nodes in block #32

Updating SSA information for statement D.42579_62 = SUITES[j_9].type;

Updating SSA information for statement smh_22->crypto_suite_order[k_11] = D.42579_62;



Registering new PHI nodes in block #33



Registering new PHI nodes in block #35



Registering new PHI nodes in block #36

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1142, session_21(D), 4, "INVALID SUITE SUPPLIED\n");



Registering new PHI nodes in block #37



Registering new PHI nodes in block #39



Registering new PHI nodes in block #41



Registering new PHI nodes in block #40

Updating SSA information for statement D.42582_68 = SUITES[i_8].type;

Updating SSA information for statement smh_22->crypto_suite_order[k_12] = D.42582_68;



Registering new PHI nodes in block #42



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 43
Number of blocks to update: 42 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 


Scope blocks after cleanups:

{ Scope block #0 
  const char * var;
  const char * val;
  char * suites;
  struct switch_media_handle_t * smh;
  char * fields[10];
  int argc;
  int i;
  int j;
  int k;
  static const char __func__[39] = "switch_core_session_parse_crypto_prefs";

  { Scope block #0 
    int ok;

  }

}
switch_core_session_parse_crypto_prefs (struct switch_core_session_t * session)
{
  int ok;
  static const char __func__[39] = "switch_core_session_parse_crypto_prefs";
  int k;
  int j;
  int i;
  int argc;
  char * fields[10];
  struct switch_media_handle_t * smh;
  char * suites;
  const char * val;
  const char * var;
  switch_rtp_crypto_key_type_t D.42582;
  switch_rtp_crypto_key_type_t D.42579;
  int D.42576;
  char * D.42575;
  char * D.42574;
  unsigned int D.42573;
  int D.42571;
  switch_rtp_crypto_mode_t D.42569;
  int D.42565;
  int D.42562;
  int D.42561;
  int D.42559;
  int D.42552;
  uint32_t D.42550;
  switch_call_direction_t D.42548;
  int D.42543;
  int D.42540;
  int D.42535;
  switch_call_direction_t D.42529;
  uint32_t D.42526;
  struct switch_channel_t * D.42525;

<bb 2>:
  var_14 = 0B;
  # DEBUG var => var_14
  val_15 = 0B;
  # DEBUG val => val_15
  suites_16 = 0B;
  # DEBUG suites => suites_16
  argc_17 = 0;
  # DEBUG argc => argc_17
  i_18 = 0;
  # DEBUG i => i_18
  j_19 = 0;
  # DEBUG j => j_19
  k_20 = 0;
  # DEBUG k => k_20
  smh_22 = session_21(D)->media_handle;
  # DEBUG smh => smh_22
  if (smh_22 == 0B)
    goto <bb 42>;
  else
    goto <bb 3>;

<bb 3>:
  D.42525_23 = session_21(D)->channel;
  D.42526_24 = switch_channel_test_flag (D.42525_23, 106);
  if (D.42526_24 != 0)
    goto <bb 42>;
  else
    goto <bb 4>;

<bb 4>:
  D.42525_25 = session_21(D)->channel;
  D.42529_26 = switch_channel_direction (D.42525_25);
  if (D.42529_26 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  var_27 = "rtp_secure_media_inbound";
  # DEBUG var => var_27
  goto <bb 7>;

<bb 6>:
  var_28 = "rtp_secure_media_outbound";
  # DEBUG var => var_28

<bb 7>:
  # var_1 = PHI <var_27(5), var_28(6)>
  # DEBUG var => var_1
  D.42525_29 = session_21(D)->channel;
  val_30 = switch_channel_get_variable_dup (D.42525_29, var_1, 1, -1);
  # DEBUG val => val_30
  if (val_30 == 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  var_31 = "rtp_secure_media";
  # DEBUG var => var_31
  D.42525_32 = session_21(D)->channel;
  val_33 = switch_channel_get_variable_dup (D.42525_32, var_31, 1, -1);
  # DEBUG val => val_33

<bb 9>:
  # var_2 = PHI <var_1(7), var_31(8)>
  # val_3 = PHI <val_30(7), val_33(8)>
  # DEBUG val => val_3
  # DEBUG var => var_2
  D.42535_34 = _zstr (val_3);
  if (D.42535_34 == 0)
    goto <bb 10>;
  else
    goto <bb 12>;

<bb 10>:
  suites_35 = __builtin_strchr (val_3, 58);
  # DEBUG suites => suites_35
  if (suites_35 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  *suites_35 = 0;
  suites_36 = suites_35 + 1;
  # DEBUG suites => suites_36

<bb 12>:
  # suites_5 = PHI <suites_16(9), suites_35(10), suites_36(11)>
  # DEBUG suites => suites_5
  D.42540_37 = _zstr (suites_5);
  if (D.42540_37 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.42525_38 = session_21(D)->channel;
  suites_39 = switch_channel_get_variable_dup (D.42525_38, "rtp_secure_media_suites", 1, -1);
  # DEBUG suites => suites_39

<bb 14>:
  # suites_6 = PHI <suites_5(12), suites_39(13)>
  # DEBUG suites => suites_6
  D.42543_40 = _zstr (val_3);
  if (D.42543_40 != 0)
    goto <bb 15>;
  else
    goto <bb 19>;

<bb 15>:
  D.42525_41 = session_21(D)->channel;
  D.42548_42 = switch_channel_direction (D.42525_41);
  if (D.42548_42 == 0)
    goto <bb 16>;
  else
    goto <bb 18>;

<bb 16>:
  D.42525_43 = session_21(D)->channel;
  D.42550_44 = switch_channel_test_flag (D.42525_43, 84);
  if (D.42550_44 == 0)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  val_45 = "optional";
  # DEBUG val => val_45
  goto <bb 19>;

<bb 18>:
  val_46 = "forbidden";
  # DEBUG val => val_46

<bb 19>:
  # val_4 = PHI <val_3(14), val_45(17), val_46(18)>
  # DEBUG val => val_4
  D.42552_47 = strcasecmp (val_4, "optional");
  if (D.42552_47 == 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  smh_22->crypto_mode = 0;
  goto <bb 27>;

<bb 21>:
  D.42559_48 = switch_true (val_4);
  if (D.42559_48 != 0)
    goto <bb 23>;
  else
    goto <bb 22>;

<bb 22>:
  D.42561_49 = strcasecmp (val_4, "mandatory");
  if (D.42561_49 == 0)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  smh_22->crypto_mode = 1;
  goto <bb 27>;

<bb 24>:
  smh_22->crypto_mode = 2;
  D.42562_50 = switch_false (val_4);
  if (D.42562_50 == 0)
    goto <bb 25>;
  else
    goto <bb 27>;

<bb 25>:
  D.42565_51 = strcasecmp (val_4, "forbidden");
  if (D.42565_51 != 0)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1123, session_21(D), 4, "INVALID VALUE FOR %s defaulting to \'forbidden\'\n", var_2);

<bb 27>:
  D.42569_52 = smh_22->crypto_mode;
  if (D.42569_52 != 2)
    goto <bb 28>;
  else
    goto <bb 39>;

<bb 28>:
  D.42571_53 = _zstr (suites_6);
  if (D.42571_53 == 0)
    goto <bb 29>;
  else
    goto <bb 39>;

<bb 29>:
  D.42573_54 = switch_separate_string (suites_6, 58, &fields, 10);
  argc_55 = (int) D.42573_54;
  # DEBUG argc => argc_55
  i_56 = 0;
  # DEBUG i => i_56
  goto <bb 38>;

<bb 30>:
  ok_57 = 0;
  # DEBUG ok => ok_57
  j_58 = 0;
  # DEBUG j => j_58
  goto <bb 34>;

<bb 31>:
  D.42574_59 = fields[i_7];
  D.42575_60 = SUITES[j_9].name;
  D.42576_61 = strcasecmp (D.42574_59, D.42575_60);
  if (D.42576_61 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;

<bb 32>:
  D.42579_62 = SUITES[j_9].type;
  smh_22->crypto_suite_order[k_11] = D.42579_62;
  k_63 = k_11 + 1;
  # DEBUG k => k_63
  ok_64 = ok_57 + 1;
  # DEBUG ok => ok_64
  goto <bb 35>;

<bb 33>:
  j_65 = j_9 + 1;
  # DEBUG j => j_65

<bb 34>:
  # j_9 = PHI <j_58(30), j_65(33)>
  # DEBUG j => j_9
  if (j_9 <= 8)
    goto <bb 31>;
  else
    goto <bb 35>;

<bb 35>:
  # k_10 = PHI <k_63(32), k_11(34)>
  # ok_13 = PHI <ok_64(32), ok_57(34)>
  # DEBUG ok => ok_13
  # DEBUG k => k_10
  if (ok_13 == 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1142, session_21(D), 4, "INVALID SUITE SUPPLIED\n");

<bb 37>:
  i_66 = i_7 + 1;
  # DEBUG i => i_66

<bb 38>:
  # i_7 = PHI <i_56(29), i_66(37)>
  # k_11 = PHI <k_20(29), k_10(37)>
  # DEBUG k => k_11
  # DEBUG i => i_7
  if (i_7 < argc_55)
    goto <bb 30>;
  else
    goto <bb 42>;

<bb 39>:
  i_67 = 0;
  # DEBUG i => i_67
  goto <bb 41>;

<bb 40>:
  D.42582_68 = SUITES[i_8].type;
  smh_22->crypto_suite_order[k_12] = D.42582_68;
  k_69 = k_12 + 1;
  # DEBUG k => k_69
  i_70 = i_8 + 1;
  # DEBUG i => i_70

<bb 41>:
  # i_8 = PHI <i_67(39), i_70(40)>
  # k_12 = PHI <k_20(39), k_69(40)>
  # DEBUG k => k_12
  # DEBUG i => i_8
  if (i_8 <= 8)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 42>:
  return;

}



;; Function gen_ice (gen_ice)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.42927 = &smh->engines;

Renaming statement D.42928 = type * 11416;

Renaming statement engine = D.42927 + D.42928;

Renaming statement D.42929 = engine->rtcp_mux;

Renaming statement if (D.42929 == 0)



Renaming block #6

Renaming statement engine->rtcp_mux = 1;



Renaming block #7

Renaming statement D.42932 = smh->msid;

Renaming statement if (D.42932 == 0B)



Renaming block #8

Renaming statement D.42935 = switch_core_perform_session_strdup (session, &tmp, "src/switch_core_media.c", &__func__, 4625);

Renaming statement smh->msid = D.42935;



Renaming block #9

Renaming statement D.42936 = smh->cname;

Renaming statement if (D.42936 == 0B)



Renaming block #10

Renaming statement D.42939 = switch_core_perform_session_strdup (session, &tmp, "src/switch_core_media.c", &__func__, 4631);

Renaming statement smh->cname = D.42939;



Renaming block #11

Renaming statement D.42940 = engine->ice_out.ufrag;

Renaming statement if (D.42940 == 0B)



Renaming block #12

Renaming statement D.42943 = switch_core_perform_session_strdup (session, &tmp, "src/switch_core_media.c", &__func__, 4637);

Renaming statement engine->ice_out.ufrag = D.42943;



Renaming block #13

Renaming statement D.42944 = engine->ice_out.pwd;

Renaming statement if (D.42944 == 0B)



Renaming block #14

Renaming statement D.42947 = switch_core_perform_session_strdup (session, &tmp, "src/switch_core_media.c", &__func__, 4642);

Renaming statement engine->ice_out.pwd = D.42947;



Renaming block #15

Renaming statement D.42948 = engine->ice_out.cands[0][0].foundation;

Renaming statement if (D.42948 == 0B)



Renaming block #16

Renaming statement D.42951 = switch_core_perform_session_strdup (session, &tmp, "src/switch_core_media.c", &__func__, 4648);

Renaming statement engine->ice_out.cands[0][0].foundation = D.42951;



Renaming block #17

Renaming statement engine->ice_out.cands[0][0].transport = "udp";

Renaming statement D.42952 = engine->ice_out.cands[0][0].component_id;

Renaming statement if (D.42952 == 0)



Renaming block #18

Renaming statement engine->ice_out.cands[0][0].component_id = 1;

Renaming statement D.42952 = engine->ice_out.cands[0][0].component_id;

Renaming statement D.42955 = 329569 - D.42952;

Renaming statement D.42956 = D.42955 * 2;

Renaming statement D.42957 = (uint32_t) D.42956;

Renaming statement engine->ice_out.cands[0][0].priority = D.42957;



Renaming block #19

Renaming statement D.42958 = _zstr (ip);

Renaming statement if (D.42958 == 0)



Renaming block #20

Renaming statement D.42961 = switch_core_perform_session_strdup (session, ip, "src/switch_core_media.c", &__func__, 4659);

Renaming statement engine->ice_out.cands[0][0].con_addr = D.42961;



Renaming block #21

Renaming statement if (port != 0)



Renaming block #22

Renaming statement engine->ice_out.cands[0][0].con_port = port;



Renaming block #23

Renaming statement engine->ice_out.cands[0][0].generation = "0";

Renaming statement engine->ice_out.cands[0][0].ready = 1;



Renaming block #24



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement tmp = "";



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4608, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.42929_7 = engine_6->rtcp_mux;



Registering new PHI nodes in block #6

Updating SSA information for statement engine_6->rtcp_mux = 1;



Registering new PHI nodes in block #7

Updating SSA information for statement D.42932_8 = smh_2->msid;



Registering new PHI nodes in block #8

Updating SSA information for statement switch_stun_random_string (&tmp, 32, 0B);

Updating SSA information for statement tmp[32] = 0;

Updating SSA information for statement D.42935_9 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4625);

Updating SSA information for statement smh_2->msid = D.42935_9;



Registering new PHI nodes in block #9

Updating SSA information for statement D.42936_10 = smh_2->cname;



Registering new PHI nodes in block #10

Updating SSA information for statement switch_stun_random_string (&tmp, 16, 0B);

Updating SSA information for statement tmp[16] = 0;

Updating SSA information for statement D.42939_11 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4631);

Updating SSA information for statement smh_2->cname = D.42939_11;



Registering new PHI nodes in block #11

Updating SSA information for statement D.42940_12 = engine_6->ice_out.ufrag;



Registering new PHI nodes in block #12

Updating SSA information for statement switch_stun_random_string (&tmp, 16, 0B);

Updating SSA information for statement tmp[16] = 0;

Updating SSA information for statement D.42943_13 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4637);

Updating SSA information for statement engine_6->ice_out.ufrag = D.42943_13;



Registering new PHI nodes in block #13

Updating SSA information for statement D.42944_14 = engine_6->ice_out.pwd;



Registering new PHI nodes in block #14

Updating SSA information for statement switch_stun_random_string (&tmp, 16, 0B);

Updating SSA information for statement D.42947_15 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4642);

Updating SSA information for statement engine_6->ice_out.pwd = D.42947_15;



Registering new PHI nodes in block #15

Updating SSA information for statement D.42948_16 = engine_6->ice_out.cands[0][0].foundation;



Registering new PHI nodes in block #16

Updating SSA information for statement switch_stun_random_string (&tmp, 10, "0123456789");

Updating SSA information for statement tmp[10] = 0;

Updating SSA information for statement D.42951_17 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4648);

Updating SSA information for statement engine_6->ice_out.cands[0][0].foundation = D.42951_17;



Registering new PHI nodes in block #17

Updating SSA information for statement engine_6->ice_out.cands[0][0].transport = "udp";

Updating SSA information for statement D.42952_18 = engine_6->ice_out.cands[0][0].component_id;



Registering new PHI nodes in block #18

Updating SSA information for statement engine_6->ice_out.cands[0][0].component_id = 1;

Updating SSA information for statement D.42952_19 = engine_6->ice_out.cands[0][0].component_id;

Updating SSA information for statement engine_6->ice_out.cands[0][0].priority = D.42957_22;



Registering new PHI nodes in block #19

Updating SSA information for statement D.42958_24 = _zstr (ip_23(D));



Registering new PHI nodes in block #20

Updating SSA information for statement D.42961_25 = switch_core_perform_session_strdup (session_1(D), ip_23(D), "src/switch_core_media.c", &__func__, 4659);

Updating SSA information for statement engine_6->ice_out.cands[0][0].con_addr = D.42961_25;



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22

Updating SSA information for statement engine_6->ice_out.cands[0][0].con_port = port_26(D);



Registering new PHI nodes in block #23

Updating SSA information for statement engine_6->ice_out.cands[0][0].generation = "0";

Updating SSA information for statement engine_6->ice_out.cands[0][0].ready = 1;



Registering new PHI nodes in block #24



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 25
Number of blocks to update: 24 ( 96%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  char tmp[33];
  static const char __PRETTY_FUNCTION__[8] = "gen_ice";
  static const char __func__[8] = "gen_ice";

}
gen_ice (struct switch_core_session_t * session, switch_media_type_t type, const char * ip, switch_port_t port)
{
  static const char __func__[8] = "gen_ice";
  static const char __PRETTY_FUNCTION__[8] = "gen_ice";
  char tmp[33];
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  char * D.42961;
  int D.42958;
  uint32_t D.42957;
  int D.42956;
  int D.42955;
  int D.42952;
  char * D.42951;
  char * D.42948;
  char * D.42947;
  char * D.42944;
  char * D.42943;
  char * D.42940;
  char * D.42939;
  char * D.42936;
  char * D.42935;
  char * D.42932;
  int8_t D.42929;
  unsigned int D.42928;
  struct switch_rtp_engine_t[2] * D.42927;

<bb 2>:
  tmp = "";
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4608, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 24>;
  else
    goto <bb 5>;

<bb 5>:
  D.42927_3 = &smh_2->engines;
  D.42928_5 = type_4(D) * 11416;
  engine_6 = D.42927_3 + D.42928_5;
  # DEBUG engine => engine_6
  D.42929_7 = engine_6->rtcp_mux;
  if (D.42929_7 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  engine_6->rtcp_mux = 1;

<bb 7>:
  D.42932_8 = smh_2->msid;
  if (D.42932_8 == 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  switch_stun_random_string (&tmp, 32, 0B);
  tmp[32] = 0;
  D.42935_9 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4625);
  smh_2->msid = D.42935_9;

<bb 9>:
  D.42936_10 = smh_2->cname;
  if (D.42936_10 == 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  switch_stun_random_string (&tmp, 16, 0B);
  tmp[16] = 0;
  D.42939_11 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4631);
  smh_2->cname = D.42939_11;

<bb 11>:
  D.42940_12 = engine_6->ice_out.ufrag;
  if (D.42940_12 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  switch_stun_random_string (&tmp, 16, 0B);
  tmp[16] = 0;
  D.42943_13 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4637);
  engine_6->ice_out.ufrag = D.42943_13;

<bb 13>:
  D.42944_14 = engine_6->ice_out.pwd;
  if (D.42944_14 == 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  switch_stun_random_string (&tmp, 16, 0B);
  D.42947_15 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4642);
  engine_6->ice_out.pwd = D.42947_15;

<bb 15>:
  D.42948_16 = engine_6->ice_out.cands[0][0].foundation;
  if (D.42948_16 == 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  switch_stun_random_string (&tmp, 10, "0123456789");
  tmp[10] = 0;
  D.42951_17 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4648);
  engine_6->ice_out.cands[0][0].foundation = D.42951_17;

<bb 17>:
  engine_6->ice_out.cands[0][0].transport = "udp";
  D.42952_18 = engine_6->ice_out.cands[0][0].component_id;
  if (D.42952_18 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  engine_6->ice_out.cands[0][0].component_id = 1;
  D.42952_19 = engine_6->ice_out.cands[0][0].component_id;
  D.42955_20 = 329569 - D.42952_19;
  D.42956_21 = D.42955_20 * 2;
  D.42957_22 = (uint32_t) D.42956_21;
  engine_6->ice_out.cands[0][0].priority = D.42957_22;

<bb 19>:
  D.42958_24 = _zstr (ip_23(D));
  if (D.42958_24 == 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.42961_25 = switch_core_perform_session_strdup (session_1(D), ip_23(D), "src/switch_core_media.c", &__func__, 4659);
  engine_6->ice_out.cands[0][0].con_addr = D.42961_25;

<bb 21>:
  if (port_26(D) != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  engine_6->ice_out.cands[0][0].con_port = port_26(D);

<bb 23>:
  engine_6->ice_out.cands[0][0].generation = "0";
  engine_6->ice_out.cands[0][0].ready = 1;

<bb 24>:
  return;

}



;; Function get_channels (get_channels)



Renaming block #0



Renaming block #2

Renaming statement D.42978 = switch_core_get_variable ("NDLB_broken_opus_sdp");

Renaming statement D.42979 = switch_true (D.42978);

Renaming statement if (D.42979 == 0)



Renaming block #3

Renaming statement D.42982 = strcasecmp (name, "opus");

Renaming statement if (D.42982 == 0)



Renaming block #4

Renaming statement D.42985 = 2;



Renaming block #5

Renaming statement if (dft != 0)



Renaming block #6

Renaming statement iftmp.43 = dft;



Renaming block #7

Renaming statement iftmp.43 = 1;



Renaming block #8

Renaming statement D.42985 = iftmp.43;



Renaming block #9

Renaming statement return D.42985;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.42978_3 = switch_core_get_variable ("NDLB_broken_opus_sdp");

Updating SSA information for statement D.42979_4 = switch_true (D.42978_3);



Registering new PHI nodes in block #3

Updating SSA information for statement D.42982_6 = strcasecmp (name_5(D), "opus");



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 

}
get_channels (const char * name, int dft)
{
  int iftmp.43;
  int D.42985;
  int D.42982;
  int D.42979;
  char * D.42978;

<bb 2>:
  D.42978_3 = switch_core_get_variable ("NDLB_broken_opus_sdp");
  D.42979_4 = switch_true (D.42978_3);
  if (D.42979_4 == 0)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 3>:
  D.42982_6 = strcasecmp (name_5(D), "opus");
  if (D.42982_6 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.42985_7 = 2;
  goto <bb 9>;

<bb 5>:
  if (dft_8(D) != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  iftmp.43_9 = dft_8(D);
  goto <bb 8>;

<bb 7>:
  iftmp.43_10 = 1;

<bb 8>:
  # iftmp.43_2 = PHI <iftmp.43_9(6), iftmp.43_10(7)>
  D.42985_11 = iftmp.43_2;

<bb 9>:
  # D.42985_1 = PHI <D.42985_7(4), D.42985_11(8)>
  return D.42985_1;

}



;; Function generate_local_fingerprint (generate_local_fingerprint)



Renaming block #0



Renaming block #2

Renaming statement D.42991 = &smh->engines;

Renaming statement D.42992 = type * 11416;

Renaming statement engine = D.42991 + D.42992;

Renaming statement D.42993 = engine->local_dtls_fingerprint.len;

Renaming statement if (D.42993 == 0)



Renaming block #3

Renaming statement D.42996 = engine->remote_dtls_fingerprint.type;

Renaming statement if (D.42996 != 0B)



Renaming block #4

Renaming statement D.42996 = engine->remote_dtls_fingerprint.type;

Renaming statement engine->local_dtls_fingerprint.type = D.42996;



Renaming block #5

Renaming statement engine->local_dtls_fingerprint.type = "sha-256";



Renaming block #6

Renaming statement D.43000 = &engine->local_dtls_fingerprint;

Renaming statement switch_core_cert_gen_fingerprint ("dtls-srtp", D.43000);



Renaming block #7



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.42993_6 = engine_5->local_dtls_fingerprint.len;



Registering new PHI nodes in block #3

Updating SSA information for statement D.42996_7 = engine_5->remote_dtls_fingerprint.type;



Registering new PHI nodes in block #4

Updating SSA information for statement D.42996_8 = engine_5->remote_dtls_fingerprint.type;

Updating SSA information for statement engine_5->local_dtls_fingerprint.type = D.42996_8;



Registering new PHI nodes in block #5

Updating SSA information for statement engine_5->local_dtls_fingerprint.type = "sha-256";



Registering new PHI nodes in block #6

Updating SSA information for statement switch_core_cert_gen_fingerprint ("dtls-srtp", D.43000_9);



Registering new PHI nodes in block #7



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)

Affected blocks: 0 2 3 4 5 6 7 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_engine_t * engine;

}
generate_local_fingerprint (struct switch_media_handle_t * smh, switch_media_type_t type)
{
  struct switch_rtp_engine_t * engine;
  struct dtls_fingerprint_t * D.43000;
  char * D.42996;
  uint32_t D.42993;
  unsigned int D.42992;
  struct switch_rtp_engine_t[2] * D.42991;

<bb 2>:
  D.42991_2 = &smh_1(D)->engines;
  D.42992_4 = type_3(D) * 11416;
  engine_5 = D.42991_2 + D.42992_4;
  # DEBUG engine => engine_5
  D.42993_6 = engine_5->local_dtls_fingerprint.len;
  if (D.42993_6 == 0)
    goto <bb 3>;
  else
    goto <bb 7>;

<bb 3>:
  D.42996_7 = engine_5->remote_dtls_fingerprint.type;
  if (D.42996_7 != 0B)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.42996_8 = engine_5->remote_dtls_fingerprint.type;
  engine_5->local_dtls_fingerprint.type = D.42996_8;
  goto <bb 6>;

<bb 5>:
  engine_5->local_dtls_fingerprint.type = "sha-256";

<bb 6>:
  D.43000_9 = &engine_5->local_dtls_fingerprint;
  switch_core_cert_gen_fingerprint ("dtls-srtp", D.43000_9);

<bb 7>:
  return;

}



;; Function start_video_thread (start_video_thread)



Renaming block #0



Renaming block #2

Renaming statement pool = switch_core_session_get_pool (session);

Renaming statement v_engine = 0B;

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #3

Renaming statement D.43797 = 1;



Renaming block #4

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.43798 = v_engine->media_thread;

Renaming statement if (D.43798 != 0B)



Renaming block #5

Renaming statement D.43797 = 1;



Renaming block #6

Renaming statement D.43801 = switch_core_session_get_channel (session);

Renaming statement D.43802 = switch_channel_get_name (D.43801);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4120, session, 5, "%s Starting Video thread\n", D.43802);

Renaming statement D.43803 = v_engine->rtp_session;

Renaming statement D.43804 = v_engine->cur_payload_map;

Renaming statement D.43805 = D.43804->agreed_pt;

Renaming statement switch_rtp_set_default_payload (D.43803, D.43805);

Renaming statement v_engine->mh.session = session;

Renaming statement switch_threadattr_create (&thd_attr, pool);

Renaming statement thd_attr.69 = thd_attr;

Renaming statement switch_threadattr_stacksize_set (thd_attr.69, 245760);

Renaming statement D.43807 = &v_engine->mh.cond;

Renaming statement switch_thread_cond_create (D.43807, pool);

Renaming statement D.43808 = &v_engine->mh.cond_mutex;

Renaming statement switch_mutex_init (D.43808, 1, pool);

Renaming statement D.43809 = &v_engine->read_mutex[1];

Renaming statement switch_mutex_init (D.43809, 1, pool);

Renaming statement D.43810 = &v_engine->media_thread;

Renaming statement thd_attr.69 = thd_attr;

Renaming statement D.43811 = &v_engine->mh;

Renaming statement D.43812 = switch_core_session_get_pool (session);

Renaming statement switch_thread_create (D.43810, thd_attr.69, video_helper_thread, D.43811, D.43812);

Renaming statement D.43797 = 0;



Renaming block #7

Renaming statement return D.43797;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement thd_attr = 0B;

Updating SSA information for statement pool_3 = switch_core_session_get_pool (session_2(D));

Updating SSA information for statement smh_5 = session_2(D)->media_handle;



Registering new PHI nodes in block #3



Registering new PHI nodes in block #4

Updating SSA information for statement D.43798_8 = v_engine_7->media_thread;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.43801_10 = switch_core_session_get_channel (session_2(D));

Updating SSA information for statement D.43802_11 = switch_channel_get_name (D.43801_10);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4120, session_2(D), 5, "%s Starting Video thread\n", D.43802_11);

Updating SSA information for statement D.43803_12 = v_engine_7->rtp_session;

Updating SSA information for statement D.43804_13 = v_engine_7->cur_payload_map;

Updating SSA information for statement D.43805_14 = D.43804_13->agreed_pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.43803_12, D.43805_14);

Updating SSA information for statement v_engine_7->mh.session = session_2(D);

Updating SSA information for statement switch_threadattr_create (&thd_attr, pool_3);

Updating SSA information for statement thd_attr.69_15 = thd_attr;

Updating SSA information for statement switch_threadattr_stacksize_set (thd_attr.69_15, 245760);

Updating SSA information for statement switch_thread_cond_create (D.43807_16, pool_3);

Updating SSA information for statement switch_mutex_init (D.43808_17, 1, pool_3);

Updating SSA information for statement switch_mutex_init (D.43809_18, 1, pool_3);

Updating SSA information for statement thd_attr.69_20 = thd_attr;

Updating SSA information for statement D.43812_22 = switch_core_session_get_pool (session_2(D));

Updating SSA information for statement switch_thread_create (D.43810_19, thd_attr.69_20, video_helper_thread, D.43811_21, D.43812_22);



Registering new PHI nodes in block #7



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)

Affected blocks: 0 2 3 4 5 6 7 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_threadattr_t * thd_attr;
  struct switch_memory_pool_t * pool;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  static const char __func__[19] = "start_video_thread";

}
start_video_thread (struct switch_core_session_t * session)
{
  static const char __func__[19] = "start_video_thread";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_memory_pool_t * pool;
  struct switch_threadattr_t * thd_attr;
  struct switch_memory_pool_t * D.43812;
  struct media_helper * D.43811;
  struct switch_thread_t * * D.43810;
  struct switch_mutex_t * * D.43809;
  struct switch_mutex_t * * D.43808;
  struct switch_thread_cond_t * * D.43807;
  struct switch_threadattr_t * thd_attr.69;
  switch_payload_t D.43805;
  struct payload_map_t * D.43804;
  struct switch_rtp_t * D.43803;
  char * D.43802;
  struct switch_channel_t * D.43801;
  struct switch_thread_t * D.43798;
  switch_status_t D.43797;

<bb 2>:
  thd_attr = 0B;
  pool_3 = switch_core_session_get_pool (session_2(D));
  # DEBUG pool => pool_3
  v_engine_4 = 0B;
  # DEBUG v_engine => v_engine_4
  smh_5 = session_2(D)->media_handle;
  # DEBUG smh => smh_5
  if (smh_5 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.43797_6 = 1;
  goto <bb 7>;

<bb 4>:
  v_engine_7 = &smh_5->engines[1];
  # DEBUG v_engine => v_engine_7
  D.43798_8 = v_engine_7->media_thread;
  if (D.43798_8 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.43797_9 = 1;
  goto <bb 7>;

<bb 6>:
  D.43801_10 = switch_core_session_get_channel (session_2(D));
  D.43802_11 = switch_channel_get_name (D.43801_10);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4120, session_2(D), 5, "%s Starting Video thread\n", D.43802_11);
  D.43803_12 = v_engine_7->rtp_session;
  D.43804_13 = v_engine_7->cur_payload_map;
  D.43805_14 = D.43804_13->agreed_pt;
  switch_rtp_set_default_payload (D.43803_12, D.43805_14);
  v_engine_7->mh.session = session_2(D);
  switch_threadattr_create (&thd_attr, pool_3);
  thd_attr.69_15 = thd_attr;
  switch_threadattr_stacksize_set (thd_attr.69_15, 245760);
  D.43807_16 = &v_engine_7->mh.cond;
  switch_thread_cond_create (D.43807_16, pool_3);
  D.43808_17 = &v_engine_7->mh.cond_mutex;
  switch_mutex_init (D.43808_17, 1, pool_3);
  D.43809_18 = &v_engine_7->read_mutex[1];
  switch_mutex_init (D.43809_18, 1, pool_3);
  D.43810_19 = &v_engine_7->media_thread;
  thd_attr.69_20 = thd_attr;
  D.43811_21 = &v_engine_7->mh;
  D.43812_22 = switch_core_session_get_pool (session_2(D));
  switch_thread_create (D.43810_19, thd_attr.69_20, video_helper_thread, D.43811_21, D.43812_22);
  D.43797_23 = 0;

<bb 7>:
  # D.43797_1 = PHI <D.43797_6(3), D.43797_9(5), D.43797_23(6)>
  return D.43797_1;

}



;; Function video_helper_thread (video_helper_thread)



Renaming block #0



Renaming block #2

Renaming statement mh = obj;

Renaming statement session = mh->session;

Renaming statement channel = switch_core_session_get_channel (session);

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #3

Renaming statement D.43816 = 0B;



Renaming block #4

Renaming statement switch_core_session_read_lock (session);

Renaming statement mh->up = 1;

Renaming statement D.43817 = mh->cond_mutex;

Renaming statement switch_mutex_lock (D.43817);

Renaming statement D.43818 = session->channel;

Renaming statement D.43819 = switch_channel_get_name (D.43818);

Renaming statement D.43821 = switch_channel_test_flag (channel, 115);

Renaming statement if (D.43821 != 0)



Renaming block #5

Renaming statement iftmp.70 = "on";



Renaming block #6

Renaming statement iftmp.70 = "off";



Renaming block #7

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4044, 0B, 7, "%s Video thread started. Echo is %s\n", D.43819, iftmp.70);

Renaming statement switch_core_session_refresh_video (session);



Renaming block #30

Renaming statement D.43870 = switch_channel_get_state (channel);

Renaming statement if (D.43870 <= 9)



Renaming block #8

Renaming statement D.43825 = switch_channel_test_flag (channel, 113);

Renaming statement if (D.43825 != 0)



Renaming block #9

Renaming statement D.43818 = session->channel;

Renaming statement D.43828 = switch_channel_get_name (D.43818);

Renaming statement D.43830 = switch_channel_test_flag (channel, 115);

Renaming statement if (D.43830 != 0)



Renaming block #10

Renaming statement iftmp.71 = "on";



Renaming block #11

Renaming statement iftmp.71 = "off";



Renaming block #12

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4051, 0B, 7, "%s Video thread paused. Echo is %s\n", D.43828, iftmp.71);

Renaming statement D.43834 = mh->cond;

Renaming statement D.43817 = mh->cond_mutex;

Renaming statement switch_thread_cond_wait (D.43834, D.43817);

Renaming statement D.43818 = session->channel;

Renaming statement D.43835 = switch_channel_get_name (D.43818);

Renaming statement D.43837 = switch_channel_test_flag (channel, 115);

Renaming statement if (D.43837 != 0)



Renaming block #13

Renaming statement iftmp.72 = "on";



Renaming block #14

Renaming statement iftmp.72 = "off";



Renaming block #15

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4054, 0B, 7, "%s Video thread resumed  Echo is %s\n", D.43835, iftmp.72);

Renaming statement switch_core_session_refresh_video (session);



Renaming block #16

Renaming statement D.43841 = switch_channel_test_flag (channel, 113);

Renaming statement if (D.43841 != 0)



Renaming block #17



Renaming block #18

Renaming statement D.43818 = session->channel;

Renaming statement D.43844 = switch_channel_test_flag (D.43818, 1);

Renaming statement if (D.43844 == 0)



Renaming block #19

Renaming statement D.43818 = session->channel;

Renaming statement D.43847 = switch_channel_test_flag (D.43818, 3);

Renaming statement if (D.43847 == 0)



Renaming block #20



Renaming block #21

Renaming statement status = switch_core_session_read_video_frame (session, &read_frame, 0, 0);

Renaming statement D.43850 = status != 0;

Renaming statement D.43851 = status != 11;

Renaming statement D.43852 = D.43850 && D.43851;

Renaming statement if (D.43852 != 0)



Renaming block #22

Renaming statement if (status != 10)



Renaming block #23



Renaming block #24

Renaming statement D.43857 = switch_channel_test_flag (channel, 70);

Renaming statement if (D.43857 != 0)



Renaming block #25

Renaming statement switch_core_session_refresh_video (session);

Renaming statement switch_channel_clear_flag (channel, 70);



Renaming block #26

Renaming statement read_frame.73 = read_frame;

Renaming statement D.43861 = read_frame.73->flags;

Renaming statement D.43862 = (int) D.43861;

Renaming statement D.43863 = D.43862 & 1;

Renaming statement D.43864 = (_Bool) D.43863;

Renaming statement if (D.43864 != 0)



Renaming block #27



Renaming block #28

Renaming statement D.43867 = switch_channel_test_flag (channel, 115);

Renaming statement if (D.43867 != 0)



Renaming block #29

Renaming statement read_frame.73 = read_frame;

Renaming statement switch_core_session_write_video_frame (session, read_frame.73, 0, 0);



Renaming block #31

Renaming statement D.43818 = session->channel;

Renaming statement D.43871 = switch_channel_get_name (D.43818);

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4093, 0B, 7, "%s Video thread ended\n", D.43871);

Renaming statement D.43817 = mh->cond_mutex;

Renaming statement switch_mutex_unlock (D.43817);

Renaming statement switch_core_session_rwunlock (session);

Renaming statement mh->up = 0;

Renaming statement D.43816 = 0B;



Renaming block #32

Renaming statement return D.43816;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement session_7 = mh_6->session;

Updating SSA information for statement channel_8 = switch_core_session_get_channel (session_7);

Updating SSA information for statement smh_9 = session_7->media_handle;



Registering new PHI nodes in block #3



Registering new PHI nodes in block #4

Updating SSA information for statement switch_core_session_read_lock (session_7);

Updating SSA information for statement mh_6->up = 1;

Updating SSA information for statement D.43817_11 = mh_6->cond_mutex;

Updating SSA information for statement switch_mutex_lock (D.43817_11);

Updating SSA information for statement D.43818_12 = session_7->channel;

Updating SSA information for statement D.43819_13 = switch_channel_get_name (D.43818_12);

Updating SSA information for statement D.43821_14 = switch_channel_test_flag (channel_8, 115);



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6



Registering new PHI nodes in block #7

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4044, 0B, 7, "%s Video thread started. Echo is %s\n", D.43819_13, iftmp.70_2);

Updating SSA information for statement switch_core_session_refresh_video (session_7);



Registering new PHI nodes in block #30

Updating SSA information for statement D.43870_17 = switch_channel_get_state (channel_8);



Registering new PHI nodes in block #8

Updating SSA information for statement D.43825_18 = switch_channel_test_flag (channel_8, 113);



Registering new PHI nodes in block #9

Updating SSA information for statement D.43818_19 = session_7->channel;

Updating SSA information for statement D.43828_20 = switch_channel_get_name (D.43818_19);

Updating SSA information for statement D.43830_21 = switch_channel_test_flag (channel_8, 115);



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4051, 0B, 7, "%s Video thread paused. Echo is %s\n", D.43828_20, iftmp.71_3);

Updating SSA information for statement D.43834_24 = mh_6->cond;

Updating SSA information for statement D.43817_25 = mh_6->cond_mutex;

Updating SSA information for statement switch_thread_cond_wait (D.43834_24, D.43817_25);

Updating SSA information for statement D.43818_26 = session_7->channel;

Updating SSA information for statement D.43835_27 = switch_channel_get_name (D.43818_26);

Updating SSA information for statement D.43837_28 = switch_channel_test_flag (channel_8, 115);



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4054, 0B, 7, "%s Video thread resumed  Echo is %s\n", D.43835_27, iftmp.72_4);

Updating SSA information for statement switch_core_session_refresh_video (session_7);



Registering new PHI nodes in block #16

Updating SSA information for statement D.43841_31 = switch_channel_test_flag (channel_8, 113);



Registering new PHI nodes in block #17



Registering new PHI nodes in block #18

Updating SSA information for statement D.43818_32 = session_7->channel;

Updating SSA information for statement D.43844_33 = switch_channel_test_flag (D.43818_32, 1);



Registering new PHI nodes in block #19

Updating SSA information for statement D.43818_34 = session_7->channel;

Updating SSA information for statement D.43847_35 = switch_channel_test_flag (D.43818_34, 3);



Registering new PHI nodes in block #20

Updating SSA information for statement switch_sleep (10000);



Registering new PHI nodes in block #21

Updating SSA information for statement status_36 = switch_core_session_read_video_frame (session_7, &read_frame, 0, 0);



Registering new PHI nodes in block #22



Registering new PHI nodes in block #23

Updating SSA information for statement switch_cond_next ();



Registering new PHI nodes in block #24

Updating SSA information for statement D.43857_40 = switch_channel_test_flag (channel_8, 70);



Registering new PHI nodes in block #25

Updating SSA information for statement switch_core_session_refresh_video (session_7);

Updating SSA information for statement switch_channel_clear_flag (channel_8, 70);



Registering new PHI nodes in block #26

Updating SSA information for statement read_frame.73_41 = read_frame;

Updating SSA information for statement D.43861_42 = read_frame.73_41->flags;



Registering new PHI nodes in block #27



Registering new PHI nodes in block #28

Updating SSA information for statement D.43867_46 = switch_channel_test_flag (channel_8, 115);



Registering new PHI nodes in block #29

Updating SSA information for statement read_frame.73_47 = read_frame;

Updating SSA information for statement switch_core_session_write_video_frame (session_7, read_frame.73_47, 0, 0);



Registering new PHI nodes in block #31

Updating SSA information for statement D.43818_48 = session_7->channel;

Updating SSA information for statement D.43871_49 = switch_channel_get_name (D.43818_48);

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4093, 0B, 7, "%s Video thread ended\n", D.43871_49);

Updating SSA information for statement D.43817_50 = mh_6->cond_mutex;

Updating SSA information for statement switch_mutex_unlock (D.43817_50);

Updating SSA information for statement switch_core_session_rwunlock (session_7);

Updating SSA information for statement mh_6->up = 0;



Registering new PHI nodes in block #32



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 33
Number of blocks to update: 32 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 


Scope blocks after cleanups:

{ Scope block #0 
  struct media_helper * mh;
  struct switch_core_session_t * session;
  struct switch_channel_t * channel;
  switch_status_t status;
  struct switch_frame_t * read_frame;
  struct switch_media_handle_t * smh;
  static const char __func__[20] = "video_helper_thread";

}
video_helper_thread (struct switch_thread_t * thread, void * obj)
{
  static const char __func__[20] = "video_helper_thread";
  struct switch_media_handle_t * smh;
  struct switch_frame_t * read_frame;
  switch_status_t status;
  struct switch_channel_t * channel;
  struct switch_core_session_t * session;
  struct media_helper * mh;
  char * D.43871;
  switch_channel_state_t D.43870;
  uint32_t D.43867;
  _Bool D.43864;
  int D.43863;
  int D.43862;
  switch_frame_flag_t D.43861;
  struct switch_frame_t * read_frame.73;
  uint32_t D.43857;
  _Bool D.43852;
  _Bool D.43851;
  _Bool D.43850;
  uint32_t D.43847;
  uint32_t D.43844;
  uint32_t D.43841;
  uint32_t D.43837;
  char * iftmp.72;
  char * D.43835;
  struct switch_thread_cond_t * D.43834;
  uint32_t D.43830;
  char * iftmp.71;
  char * D.43828;
  uint32_t D.43825;
  uint32_t D.43821;
  char * iftmp.70;
  char * D.43819;
  struct switch_channel_t * D.43818;
  struct switch_mutex_t * D.43817;
  void * D.43816;

<bb 2>:
  mh_6 = obj_5(D);
  # DEBUG mh => mh_6
  session_7 = mh_6->session;
  # DEBUG session => session_7
  channel_8 = switch_core_session_get_channel (session_7);
  # DEBUG channel => channel_8
  smh_9 = session_7->media_handle;
  # DEBUG smh => smh_9
  if (smh_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.43816_10 = 0B;
  goto <bb 32>;

<bb 4>:
  switch_core_session_read_lock (session_7);
  mh_6->up = 1;
  D.43817_11 = mh_6->cond_mutex;
  switch_mutex_lock (D.43817_11);
  D.43818_12 = session_7->channel;
  D.43819_13 = switch_channel_get_name (D.43818_12);
  D.43821_14 = switch_channel_test_flag (channel_8, 115);
  if (D.43821_14 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  iftmp.70_15 = "on";
  goto <bb 7>;

<bb 6>:
  iftmp.70_16 = "off";

<bb 7>:
  # iftmp.70_2 = PHI <iftmp.70_15(5), iftmp.70_16(6)>
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4044, 0B, 7, "%s Video thread started. Echo is %s\n", D.43819_13, iftmp.70_2);
  switch_core_session_refresh_video (session_7);
  goto <bb 30>;

<bb 8>:
  D.43825_18 = switch_channel_test_flag (channel_8, 113);
  if (D.43825_18 != 0)
    goto <bb 9>;
  else
    goto <bb 16>;

<bb 9>:
  D.43818_19 = session_7->channel;
  D.43828_20 = switch_channel_get_name (D.43818_19);
  D.43830_21 = switch_channel_test_flag (channel_8, 115);
  if (D.43830_21 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  iftmp.71_22 = "on";
  goto <bb 12>;

<bb 11>:
  iftmp.71_23 = "off";

<bb 12>:
  # iftmp.71_3 = PHI <iftmp.71_22(10), iftmp.71_23(11)>
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4051, 0B, 7, "%s Video thread paused. Echo is %s\n", D.43828_20, iftmp.71_3);
  D.43834_24 = mh_6->cond;
  D.43817_25 = mh_6->cond_mutex;
  switch_thread_cond_wait (D.43834_24, D.43817_25);
  D.43818_26 = session_7->channel;
  D.43835_27 = switch_channel_get_name (D.43818_26);
  D.43837_28 = switch_channel_test_flag (channel_8, 115);
  if (D.43837_28 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  iftmp.72_29 = "on";
  goto <bb 15>;

<bb 14>:
  iftmp.72_30 = "off";

<bb 15>:
  # iftmp.72_4 = PHI <iftmp.72_29(13), iftmp.72_30(14)>
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4054, 0B, 7, "%s Video thread resumed  Echo is %s\n", D.43835_27, iftmp.72_4);
  switch_core_session_refresh_video (session_7);

<bb 16>:
  D.43841_31 = switch_channel_test_flag (channel_8, 113);
  if (D.43841_31 != 0)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  // predicted unlikely by continue predictor.
  goto <bb 30>;

<bb 18>:
  D.43818_32 = session_7->channel;
  D.43844_33 = switch_channel_test_flag (D.43818_32, 1);
  if (D.43844_33 == 0)
    goto <bb 19>;
  else
    goto <bb 21>;

<bb 19>:
  D.43818_34 = session_7->channel;
  D.43847_35 = switch_channel_test_flag (D.43818_34, 3);
  if (D.43847_35 == 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  switch_sleep (10000);
  // predicted unlikely by continue predictor.
  goto <bb 30>;

<bb 21>:
  status_36 = switch_core_session_read_video_frame (session_7, &read_frame, 0, 0);
  # DEBUG status => status_36
  D.43850_37 = status_36 != 0;
  D.43851_38 = status_36 != 11;
  D.43852_39 = D.43850_37 && D.43851_38;
  if (D.43852_39 != 0)
    goto <bb 22>;
  else
    goto <bb 24>;

<bb 22>:
  if (status_36 != 10)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  switch_cond_next ();
  // predicted unlikely by continue predictor.
  goto <bb 30>;

<bb 24>:
  D.43857_40 = switch_channel_test_flag (channel_8, 70);
  if (D.43857_40 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  switch_core_session_refresh_video (session_7);
  switch_channel_clear_flag (channel_8, 70);

<bb 26>:
  read_frame.73_41 = read_frame;
  D.43861_42 = read_frame.73_41->flags;
  D.43862_43 = (int) D.43861_42;
  D.43863_44 = D.43862_43 & 1;
  D.43864_45 = (_Bool) D.43863_44;
  if (D.43864_45 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  // predicted unlikely by continue predictor.
  goto <bb 30>;

<bb 28>:
  D.43867_46 = switch_channel_test_flag (channel_8, 115);
  if (D.43867_46 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  read_frame.73_47 = read_frame;
  switch_core_session_write_video_frame (session_7, read_frame.73_47, 0, 0);

<bb 30>:
  D.43870_17 = switch_channel_get_state (channel_8);
  if (D.43870_17 <= 9)
    goto <bb 8>;
  else
    goto <bb 31>;

<bb 31>:
  D.43818_48 = session_7->channel;
  D.43871_49 = switch_channel_get_name (D.43818_48);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4093, 0B, 7, "%s Video thread ended\n", D.43871_49);
  D.43817_50 = mh_6->cond_mutex;
  switch_mutex_unlock (D.43817_50);
  switch_core_session_rwunlock (session_7);
  mh_6->up = 0;
  D.43816_51 = 0B;

<bb 32>:
  # D.43816_1 = PHI <D.43816_10(3), D.43816_51(31)>
  return D.43816_1;

}



;; Function switch_core_media_process_udptl (switch_core_media_process_udptl)



Renaming block #0



Renaming block #2

Renaming statement D.45323 = session->channel;

Renaming statement t38_options = switch_channel_get_private (D.45323, "t38_options");

Renaming statement if (t38_options == 0B)



Renaming block #3

Renaming statement t38_options = switch_core_perform_session_alloc (session, 60, "src/switch_core_media.c", &__func__, 369);

Renaming statement t38_options->T38FaxVersion = 0;

Renaming statement t38_options->T38MaxBitRate = 14400;

Renaming statement D.45326 = switch_core_perform_session_strdup (session, "transferredTCF", "src/switch_core_media.c", &__func__, 374);

Renaming statement t38_options->T38FaxRateManagement = D.45326;

Renaming statement D.45327 = switch_core_perform_session_strdup (session, "t38UDPRedundancy", "src/switch_core_media.c", &__func__, 375);

Renaming statement t38_options->T38FaxUdpEC = D.45327;

Renaming statement t38_options->T38FaxMaxBuffer = 500;

Renaming statement t38_options->T38FaxMaxDatagram = 500;



Renaming block #4

Renaming statement D.45328 = m->m_port;

Renaming statement D.45329 = (short unsigned int) D.45328;

Renaming statement t38_options->remote_port = D.45329;

Renaming statement D.45330 = sdp->sdp_origin;

Renaming statement if (D.45330 != 0B)



Renaming block #5

Renaming statement D.45330 = sdp->sdp_origin;

Renaming statement D.45333 = D.45330->o_username;

Renaming statement D.45334 = switch_core_perform_session_strdup (session, D.45333, "src/switch_core_media.c", &__func__, 383);

Renaming statement t38_options->sdp_o_line = D.45334;



Renaming block #6

Renaming statement t38_options->sdp_o_line = "unknown";



Renaming block #7

Renaming statement D.45338 = m->m_connections;

Renaming statement if (D.45338 != 0B)



Renaming block #8

Renaming statement D.45338 = m->m_connections;

Renaming statement D.45340 = D.45338->c_address;

Renaming statement if (D.45340 != 0B)



Renaming block #9

Renaming statement D.45338 = m->m_connections;

Renaming statement D.45340 = D.45338->c_address;

Renaming statement D.45342 = switch_core_perform_session_strdup (session, D.45340, "src/switch_core_media.c", &__func__, 389);

Renaming statement t38_options->remote_ip = D.45342;



Renaming block #10

Renaming statement if (sdp != 0B)



Renaming block #11

Renaming statement D.45345 = sdp->sdp_connection;

Renaming statement if (D.45345 != 0B)



Renaming block #12

Renaming statement D.45345 = sdp->sdp_connection;

Renaming statement D.45348 = D.45345->c_address;

Renaming statement if (D.45348 != 0B)



Renaming block #13

Renaming statement D.45345 = sdp->sdp_connection;

Renaming statement D.45348 = D.45345->c_address;

Renaming statement D.45351 = switch_core_perform_session_strdup (session, D.45348, "src/switch_core_media.c", &__func__, 391);

Renaming statement t38_options->remote_ip = D.45351;



Renaming block #14

Renaming statement attr = m->m_attributes;



Renaming block #43

Renaming statement if (attr != 0B)



Renaming block #15

Renaming statement D.45354 = attr->a_name;

Renaming statement D.45355 = strcasecmp (D.45354, "T38FaxVersion");

Renaming statement if (D.45355 == 0)



Renaming block #16

Renaming statement D.45357 = attr->a_value;

Renaming statement if (D.45357 != 0B)



Renaming block #17

Renaming statement D.45357 = attr->a_value;

Renaming statement D.45359 = atoi (D.45357);

Renaming statement D.45360 = (short unsigned int) D.45359;

Renaming statement t38_options->T38FaxVersion = D.45360;



Renaming block #18

Renaming statement D.45354 = attr->a_name;

Renaming statement D.45363 = strcasecmp (D.45354, "T38MaxBitRate");

Renaming statement if (D.45363 == 0)



Renaming block #19

Renaming statement D.45357 = attr->a_value;

Renaming statement if (D.45357 != 0B)



Renaming block #20

Renaming statement D.45357 = attr->a_value;

Renaming statement D.45366 = atoi (D.45357);

Renaming statement D.45367 = (unsigned int) D.45366;

Renaming statement t38_options->T38MaxBitRate = D.45367;



Renaming block #21

Renaming statement D.45354 = attr->a_name;

Renaming statement D.45368 = strcasecmp (D.45354, "T38FaxFillBitRemoval");

Renaming statement if (D.45368 == 0)



Renaming block #22

Renaming statement D.45357 = attr->a_value;

Renaming statement D.45371 = switch_safe_atoi (D.45357, 1);

Renaming statement D.45372 = (switch_bool_t) D.45371;

Renaming statement t38_options->T38FaxFillBitRemoval = D.45372;



Renaming block #23

Renaming statement D.45354 = attr->a_name;

Renaming statement D.45374 = strcasecmp (D.45354, "T38FaxTranscodingMMR");

Renaming statement if (D.45374 == 0)



Renaming block #24

Renaming statement D.45357 = attr->a_value;

Renaming statement D.45377 = switch_safe_atoi (D.45357, 1);

Renaming statement D.45378 = (switch_bool_t) D.45377;

Renaming statement t38_options->T38FaxTranscodingMMR = D.45378;



Renaming block #25

Renaming statement D.45354 = attr->a_name;

Renaming statement D.45380 = strcasecmp (D.45354, "T38FaxTranscodingJBIG");

Renaming statement if (D.45380 == 0)



Renaming block #26

Renaming statement D.45357 = attr->a_value;

Renaming statement D.45383 = switch_safe_atoi (D.45357, 1);

Renaming statement D.45384 = (switch_bool_t) D.45383;

Renaming statement t38_options->T38FaxTranscodingJBIG = D.45384;



Renaming block #27

Renaming statement D.45354 = attr->a_name;

Renaming statement D.45388 = strcasecmp (D.45354, "T38FaxRateManagement");

Renaming statement if (D.45388 == 0)



Renaming block #28

Renaming statement D.45357 = attr->a_value;

Renaming statement if (D.45357 != 0B)



Renaming block #29

Renaming statement D.45357 = attr->a_value;

Renaming statement D.45391 = switch_core_perform_session_strdup (session, D.45357, "src/switch_core_media.c", &__func__, 406);

Renaming statement t38_options->T38FaxRateManagement = D.45391;



Renaming block #30

Renaming statement D.45354 = attr->a_name;

Renaming statement D.45394 = strcasecmp (D.45354, "T38FaxMaxBuffer");

Renaming statement if (D.45394 == 0)



Renaming block #31

Renaming statement D.45357 = attr->a_value;

Renaming statement if (D.45357 != 0B)



Renaming block #32

Renaming statement D.45357 = attr->a_value;

Renaming statement D.45397 = atoi (D.45357);

Renaming statement D.45398 = (unsigned int) D.45397;

Renaming statement t38_options->T38FaxMaxBuffer = D.45398;



Renaming block #33

Renaming statement D.45354 = attr->a_name;

Renaming statement D.45401 = strcasecmp (D.45354, "T38FaxMaxDatagram");

Renaming statement if (D.45401 == 0)



Renaming block #34

Renaming statement D.45357 = attr->a_value;

Renaming statement if (D.45357 != 0B)



Renaming block #35

Renaming statement D.45357 = attr->a_value;

Renaming statement D.45404 = atoi (D.45357);

Renaming statement D.45405 = (unsigned int) D.45404;

Renaming statement t38_options->T38FaxMaxDatagram = D.45405;



Renaming block #36

Renaming statement D.45354 = attr->a_name;

Renaming statement D.45408 = strcasecmp (D.45354, "T38FaxUdpEC");

Renaming statement if (D.45408 == 0)



Renaming block #37

Renaming statement D.45357 = attr->a_value;

Renaming statement if (D.45357 != 0B)



Renaming block #38

Renaming statement D.45357 = attr->a_value;

Renaming statement D.45411 = switch_core_perform_session_strdup (session, D.45357, "src/switch_core_media.c", &__func__, 412);

Renaming statement t38_options->T38FaxUdpEC = D.45411;



Renaming block #39

Renaming statement D.45354 = attr->a_name;

Renaming statement D.45412 = strcasecmp (D.45354, "T38VendorInfo");

Renaming statement if (D.45412 == 0)



Renaming block #40

Renaming statement D.45357 = attr->a_value;

Renaming statement if (D.45357 != 0B)



Renaming block #41

Renaming statement D.45357 = attr->a_value;

Renaming statement D.45417 = switch_core_perform_session_strdup (session, D.45357, "src/switch_core_media.c", &__func__, 414);

Renaming statement t38_options->T38VendorInfo = D.45417;



Renaming block #42

Renaming statement attr = attr->a_next;



Renaming block #44

Renaming statement D.45323 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.45323, "has_t38", "true", 1);

Renaming statement D.45323 = session->channel;

Renaming statement switch_channel_set_private (D.45323, "t38_options", t38_options);

Renaming statement D.45323 = session->channel;

Renaming statement switch_channel_set_app_flag_key ("T38", D.45323, 2);

Renaming statement D.45323 = session->channel;

Renaming statement switch_channel_execute_on (D.45323, "sip_execute_on_image");

Renaming statement D.45323 = session->channel;

Renaming statement switch_channel_api_on (D.45323, "sip_api_on_image");

Renaming statement D.45418 = t38_options;

Renaming statement return D.45418;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.45323_4 = session_3(D)->channel;

Updating SSA information for statement t38_options_5 = switch_channel_get_private (D.45323_4, "t38_options");



Registering new PHI nodes in block #3

Updating SSA information for statement t38_options_6 = switch_core_perform_session_alloc (session_3(D), 60, "src/switch_core_media.c", &__func__, 369);

Updating SSA information for statement t38_options_6->T38FaxVersion = 0;

Updating SSA information for statement t38_options_6->T38MaxBitRate = 14400;

Updating SSA information for statement D.45326_7 = switch_core_perform_session_strdup (session_3(D), "transferredTCF", "src/switch_core_media.c", &__func__, 374);

Updating SSA information for statement t38_options_6->T38FaxRateManagement = D.45326_7;

Updating SSA information for statement D.45327_8 = switch_core_perform_session_strdup (session_3(D), "t38UDPRedundancy", "src/switch_core_media.c", &__func__, 375);

Updating SSA information for statement t38_options_6->T38FaxUdpEC = D.45327_8;

Updating SSA information for statement t38_options_6->T38FaxMaxBuffer = 500;

Updating SSA information for statement t38_options_6->T38FaxMaxDatagram = 500;



Registering new PHI nodes in block #4

Updating SSA information for statement D.45328_10 = m_9(D)->m_port;

Updating SSA information for statement t38_options_1->remote_port = D.45329_11;

Updating SSA information for statement D.45330_13 = sdp_12(D)->sdp_origin;



Registering new PHI nodes in block #5

Updating SSA information for statement D.45330_14 = sdp_12(D)->sdp_origin;

Updating SSA information for statement D.45333_15 = D.45330_14->o_username;

Updating SSA information for statement D.45334_16 = switch_core_perform_session_strdup (session_3(D), D.45333_15, "src/switch_core_media.c", &__func__, 383);

Updating SSA information for statement t38_options_1->sdp_o_line = D.45334_16;



Registering new PHI nodes in block #6

Updating SSA information for statement t38_options_1->sdp_o_line = "unknown";



Registering new PHI nodes in block #7

Updating SSA information for statement D.45338_17 = m_9(D)->m_connections;



Registering new PHI nodes in block #8

Updating SSA information for statement D.45338_18 = m_9(D)->m_connections;

Updating SSA information for statement D.45340_19 = D.45338_18->c_address;



Registering new PHI nodes in block #9

Updating SSA information for statement D.45338_20 = m_9(D)->m_connections;

Updating SSA information for statement D.45340_21 = D.45338_20->c_address;

Updating SSA information for statement D.45342_22 = switch_core_perform_session_strdup (session_3(D), D.45340_21, "src/switch_core_media.c", &__func__, 389);

Updating SSA information for statement t38_options_1->remote_ip = D.45342_22;



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11

Updating SSA information for statement D.45345_23 = sdp_12(D)->sdp_connection;



Registering new PHI nodes in block #12

Updating SSA information for statement D.45345_24 = sdp_12(D)->sdp_connection;

Updating SSA information for statement D.45348_25 = D.45345_24->c_address;



Registering new PHI nodes in block #13

Updating SSA information for statement D.45345_26 = sdp_12(D)->sdp_connection;

Updating SSA information for statement D.45348_27 = D.45345_26->c_address;

Updating SSA information for statement D.45351_28 = switch_core_perform_session_strdup (session_3(D), D.45348_27, "src/switch_core_media.c", &__func__, 391);

Updating SSA information for statement t38_options_1->remote_ip = D.45351_28;



Registering new PHI nodes in block #14

Updating SSA information for statement attr_29 = m_9(D)->m_attributes;



Registering new PHI nodes in block #43



Registering new PHI nodes in block #15

Updating SSA information for statement D.45354_30 = attr_2->a_name;

Updating SSA information for statement D.45355_31 = strcasecmp (D.45354_30, "T38FaxVersion");



Registering new PHI nodes in block #16

Updating SSA information for statement D.45357_32 = attr_2->a_value;



Registering new PHI nodes in block #17

Updating SSA information for statement D.45357_33 = attr_2->a_value;

Updating SSA information for statement D.45359_34 = atoi (D.45357_33);

Updating SSA information for statement t38_options_1->T38FaxVersion = D.45360_35;



Registering new PHI nodes in block #18

Updating SSA information for statement D.45354_36 = attr_2->a_name;

Updating SSA information for statement D.45363_37 = strcasecmp (D.45354_36, "T38MaxBitRate");



Registering new PHI nodes in block #19

Updating SSA information for statement D.45357_38 = attr_2->a_value;



Registering new PHI nodes in block #20

Updating SSA information for statement D.45357_39 = attr_2->a_value;

Updating SSA information for statement D.45366_40 = atoi (D.45357_39);

Updating SSA information for statement t38_options_1->T38MaxBitRate = D.45367_41;



Registering new PHI nodes in block #21

Updating SSA information for statement D.45354_42 = attr_2->a_name;

Updating SSA information for statement D.45368_43 = strcasecmp (D.45354_42, "T38FaxFillBitRemoval");



Registering new PHI nodes in block #22

Updating SSA information for statement D.45357_44 = attr_2->a_value;

Updating SSA information for statement D.45371_45 = switch_safe_atoi (D.45357_44, 1);

Updating SSA information for statement t38_options_1->T38FaxFillBitRemoval = D.45372_46;



Registering new PHI nodes in block #23

Updating SSA information for statement D.45354_47 = attr_2->a_name;

Updating SSA information for statement D.45374_48 = strcasecmp (D.45354_47, "T38FaxTranscodingMMR");



Registering new PHI nodes in block #24

Updating SSA information for statement D.45357_49 = attr_2->a_value;

Updating SSA information for statement D.45377_50 = switch_safe_atoi (D.45357_49, 1);

Updating SSA information for statement t38_options_1->T38FaxTranscodingMMR = D.45378_51;



Registering new PHI nodes in block #25

Updating SSA information for statement D.45354_52 = attr_2->a_name;

Updating SSA information for statement D.45380_53 = strcasecmp (D.45354_52, "T38FaxTranscodingJBIG");



Registering new PHI nodes in block #26

Updating SSA information for statement D.45357_54 = attr_2->a_value;

Updating SSA information for statement D.45383_55 = switch_safe_atoi (D.45357_54, 1);

Updating SSA information for statement t38_options_1->T38FaxTranscodingJBIG = D.45384_56;



Registering new PHI nodes in block #27

Updating SSA information for statement D.45354_57 = attr_2->a_name;

Updating SSA information for statement D.45388_58 = strcasecmp (D.45354_57, "T38FaxRateManagement");



Registering new PHI nodes in block #28

Updating SSA information for statement D.45357_59 = attr_2->a_value;



Registering new PHI nodes in block #29

Updating SSA information for statement D.45357_60 = attr_2->a_value;

Updating SSA information for statement D.45391_61 = switch_core_perform_session_strdup (session_3(D), D.45357_60, "src/switch_core_media.c", &__func__, 406);

Updating SSA information for statement t38_options_1->T38FaxRateManagement = D.45391_61;



Registering new PHI nodes in block #30

Updating SSA information for statement D.45354_62 = attr_2->a_name;

Updating SSA information for statement D.45394_63 = strcasecmp (D.45354_62, "T38FaxMaxBuffer");



Registering new PHI nodes in block #31

Updating SSA information for statement D.45357_64 = attr_2->a_value;



Registering new PHI nodes in block #32

Updating SSA information for statement D.45357_65 = attr_2->a_value;

Updating SSA information for statement D.45397_66 = atoi (D.45357_65);

Updating SSA information for statement t38_options_1->T38FaxMaxBuffer = D.45398_67;



Registering new PHI nodes in block #33

Updating SSA information for statement D.45354_68 = attr_2->a_name;

Updating SSA information for statement D.45401_69 = strcasecmp (D.45354_68, "T38FaxMaxDatagram");



Registering new PHI nodes in block #34

Updating SSA information for statement D.45357_70 = attr_2->a_value;



Registering new PHI nodes in block #35

Updating SSA information for statement D.45357_71 = attr_2->a_value;

Updating SSA information for statement D.45404_72 = atoi (D.45357_71);

Updating SSA information for statement t38_options_1->T38FaxMaxDatagram = D.45405_73;



Registering new PHI nodes in block #36

Updating SSA information for statement D.45354_74 = attr_2->a_name;

Updating SSA information for statement D.45408_75 = strcasecmp (D.45354_74, "T38FaxUdpEC");



Registering new PHI nodes in block #37

Updating SSA information for statement D.45357_76 = attr_2->a_value;



Registering new PHI nodes in block #38

Updating SSA information for statement D.45357_77 = attr_2->a_value;

Updating SSA information for statement D.45411_78 = switch_core_perform_session_strdup (session_3(D), D.45357_77, "src/switch_core_media.c", &__func__, 412);

Updating SSA information for statement t38_options_1->T38FaxUdpEC = D.45411_78;



Registering new PHI nodes in block #39

Updating SSA information for statement D.45354_79 = attr_2->a_name;

Updating SSA information for statement D.45412_80 = strcasecmp (D.45354_79, "T38VendorInfo");



Registering new PHI nodes in block #40

Updating SSA information for statement D.45357_81 = attr_2->a_value;



Registering new PHI nodes in block #41

Updating SSA information for statement D.45357_82 = attr_2->a_value;

Updating SSA information for statement D.45417_83 = switch_core_perform_session_strdup (session_3(D), D.45357_82, "src/switch_core_media.c", &__func__, 414);

Updating SSA information for statement t38_options_1->T38VendorInfo = D.45417_83;



Registering new PHI nodes in block #42

Updating SSA information for statement attr_84 = attr_2->a_next;



Registering new PHI nodes in block #44

Updating SSA information for statement D.45323_85 = session_3(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.45323_85, "has_t38", "true", 1);

Updating SSA information for statement D.45323_86 = session_3(D)->channel;

Updating SSA information for statement switch_channel_set_private (D.45323_86, "t38_options", t38_options_1);

Updating SSA information for statement D.45323_87 = session_3(D)->channel;

Updating SSA information for statement switch_channel_set_app_flag_key ("T38", D.45323_87, 2);

Updating SSA information for statement D.45323_88 = session_3(D)->channel;

Updating SSA information for statement switch_channel_execute_on (D.45323_88, "sip_execute_on_image");

Updating SSA information for statement D.45323_89 = session_3(D)->channel;

Updating SSA information for statement switch_channel_api_on (D.45323_89, "sip_api_on_image");



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 45
Number of blocks to update: 44 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_t38_options_t * t38_options;
  struct sdp_attribute_t * attr;
  static const char __func__[32] = "switch_core_media_process_udptl";

}
switch_core_media_process_udptl (struct switch_core_session_t * session, struct sdp_session_t * sdp, struct sdp_media_t * m)
{
  static const char __func__[32] = "switch_core_media_process_udptl";
  struct sdp_attribute_t * attr;
  struct switch_t38_options_t * t38_options;
  struct switch_t38_options_t * D.45418;
  char * D.45417;
  int D.45412;
  char * D.45411;
  int D.45408;
  unsigned int D.45405;
  int D.45404;
  int D.45401;
  unsigned int D.45398;
  int D.45397;
  int D.45394;
  char * D.45391;
  int D.45388;
  switch_bool_t D.45384;
  int D.45383;
  int D.45380;
  switch_bool_t D.45378;
  int D.45377;
  int D.45374;
  switch_bool_t D.45372;
  int D.45371;
  int D.45368;
  unsigned int D.45367;
  int D.45366;
  int D.45363;
  short unsigned int D.45360;
  int D.45359;
  const char * D.45357;
  int D.45355;
  const char * D.45354;
  char * D.45351;
  const char * D.45348;
  struct sdp_connection_t * D.45345;
  char * D.45342;
  const char * D.45340;
  struct sdp_connection_t * D.45338;
  char * D.45334;
  const char * D.45333;
  struct sdp_origin_t * D.45330;
  short unsigned int D.45329;
  long unsigned int D.45328;
  char * D.45327;
  char * D.45326;
  struct switch_channel_t * D.45323;

<bb 2>:
  D.45323_4 = session_3(D)->channel;
  t38_options_5 = switch_channel_get_private (D.45323_4, "t38_options");
  # DEBUG t38_options => t38_options_5
  if (t38_options_5 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  t38_options_6 = switch_core_perform_session_alloc (session_3(D), 60, "src/switch_core_media.c", &__func__, 369);
  # DEBUG t38_options => t38_options_6
  t38_options_6->T38FaxVersion = 0;
  t38_options_6->T38MaxBitRate = 14400;
  D.45326_7 = switch_core_perform_session_strdup (session_3(D), "transferredTCF", "src/switch_core_media.c", &__func__, 374);
  t38_options_6->T38FaxRateManagement = D.45326_7;
  D.45327_8 = switch_core_perform_session_strdup (session_3(D), "t38UDPRedundancy", "src/switch_core_media.c", &__func__, 375);
  t38_options_6->T38FaxUdpEC = D.45327_8;
  t38_options_6->T38FaxMaxBuffer = 500;
  t38_options_6->T38FaxMaxDatagram = 500;

<bb 4>:
  # t38_options_1 = PHI <t38_options_5(2), t38_options_6(3)>
  # DEBUG t38_options => t38_options_1
  D.45328_10 = m_9(D)->m_port;
  D.45329_11 = (short unsigned int) D.45328_10;
  t38_options_1->remote_port = D.45329_11;
  D.45330_13 = sdp_12(D)->sdp_origin;
  if (D.45330_13 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.45330_14 = sdp_12(D)->sdp_origin;
  D.45333_15 = D.45330_14->o_username;
  D.45334_16 = switch_core_perform_session_strdup (session_3(D), D.45333_15, "src/switch_core_media.c", &__func__, 383);
  t38_options_1->sdp_o_line = D.45334_16;
  goto <bb 7>;

<bb 6>:
  t38_options_1->sdp_o_line = "unknown";

<bb 7>:
  D.45338_17 = m_9(D)->m_connections;
  if (D.45338_17 != 0B)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  D.45338_18 = m_9(D)->m_connections;
  D.45340_19 = D.45338_18->c_address;
  if (D.45340_19 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.45338_20 = m_9(D)->m_connections;
  D.45340_21 = D.45338_20->c_address;
  D.45342_22 = switch_core_perform_session_strdup (session_3(D), D.45340_21, "src/switch_core_media.c", &__func__, 389);
  t38_options_1->remote_ip = D.45342_22;
  goto <bb 14>;

<bb 10>:
  if (sdp_12(D) != 0B)
    goto <bb 11>;
  else
    goto <bb 14>;

<bb 11>:
  D.45345_23 = sdp_12(D)->sdp_connection;
  if (D.45345_23 != 0B)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 12>:
  D.45345_24 = sdp_12(D)->sdp_connection;
  D.45348_25 = D.45345_24->c_address;
  if (D.45348_25 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.45345_26 = sdp_12(D)->sdp_connection;
  D.45348_27 = D.45345_26->c_address;
  D.45351_28 = switch_core_perform_session_strdup (session_3(D), D.45348_27, "src/switch_core_media.c", &__func__, 391);
  t38_options_1->remote_ip = D.45351_28;

<bb 14>:
  attr_29 = m_9(D)->m_attributes;
  # DEBUG attr => attr_29
  goto <bb 43>;

<bb 15>:
  D.45354_30 = attr_2->a_name;
  D.45355_31 = strcasecmp (D.45354_30, "T38FaxVersion");
  if (D.45355_31 == 0)
    goto <bb 16>;
  else
    goto <bb 18>;

<bb 16>:
  D.45357_32 = attr_2->a_value;
  if (D.45357_32 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.45357_33 = attr_2->a_value;
  D.45359_34 = atoi (D.45357_33);
  D.45360_35 = (short unsigned int) D.45359_34;
  t38_options_1->T38FaxVersion = D.45360_35;
  goto <bb 42>;

<bb 18>:
  D.45354_36 = attr_2->a_name;
  D.45363_37 = strcasecmp (D.45354_36, "T38MaxBitRate");
  if (D.45363_37 == 0)
    goto <bb 19>;
  else
    goto <bb 21>;

<bb 19>:
  D.45357_38 = attr_2->a_value;
  if (D.45357_38 != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.45357_39 = attr_2->a_value;
  D.45366_40 = atoi (D.45357_39);
  D.45367_41 = (unsigned int) D.45366_40;
  t38_options_1->T38MaxBitRate = D.45367_41;
  goto <bb 42>;

<bb 21>:
  D.45354_42 = attr_2->a_name;
  D.45368_43 = strcasecmp (D.45354_42, "T38FaxFillBitRemoval");
  if (D.45368_43 == 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.45357_44 = attr_2->a_value;
  D.45371_45 = switch_safe_atoi (D.45357_44, 1);
  D.45372_46 = (switch_bool_t) D.45371_45;
  t38_options_1->T38FaxFillBitRemoval = D.45372_46;
  goto <bb 42>;

<bb 23>:
  D.45354_47 = attr_2->a_name;
  D.45374_48 = strcasecmp (D.45354_47, "T38FaxTranscodingMMR");
  if (D.45374_48 == 0)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  D.45357_49 = attr_2->a_value;
  D.45377_50 = switch_safe_atoi (D.45357_49, 1);
  D.45378_51 = (switch_bool_t) D.45377_50;
  t38_options_1->T38FaxTranscodingMMR = D.45378_51;
  goto <bb 42>;

<bb 25>:
  D.45354_52 = attr_2->a_name;
  D.45380_53 = strcasecmp (D.45354_52, "T38FaxTranscodingJBIG");
  if (D.45380_53 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  D.45357_54 = attr_2->a_value;
  D.45383_55 = switch_safe_atoi (D.45357_54, 1);
  D.45384_56 = (switch_bool_t) D.45383_55;
  t38_options_1->T38FaxTranscodingJBIG = D.45384_56;
  goto <bb 42>;

<bb 27>:
  D.45354_57 = attr_2->a_name;
  D.45388_58 = strcasecmp (D.45354_57, "T38FaxRateManagement");
  if (D.45388_58 == 0)
    goto <bb 28>;
  else
    goto <bb 30>;

<bb 28>:
  D.45357_59 = attr_2->a_value;
  if (D.45357_59 != 0B)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  D.45357_60 = attr_2->a_value;
  D.45391_61 = switch_core_perform_session_strdup (session_3(D), D.45357_60, "src/switch_core_media.c", &__func__, 406);
  t38_options_1->T38FaxRateManagement = D.45391_61;
  goto <bb 42>;

<bb 30>:
  D.45354_62 = attr_2->a_name;
  D.45394_63 = strcasecmp (D.45354_62, "T38FaxMaxBuffer");
  if (D.45394_63 == 0)
    goto <bb 31>;
  else
    goto <bb 33>;

<bb 31>:
  D.45357_64 = attr_2->a_value;
  if (D.45357_64 != 0B)
    goto <bb 32>;
  else
    goto <bb 33>;

<bb 32>:
  D.45357_65 = attr_2->a_value;
  D.45397_66 = atoi (D.45357_65);
  D.45398_67 = (unsigned int) D.45397_66;
  t38_options_1->T38FaxMaxBuffer = D.45398_67;
  goto <bb 42>;

<bb 33>:
  D.45354_68 = attr_2->a_name;
  D.45401_69 = strcasecmp (D.45354_68, "T38FaxMaxDatagram");
  if (D.45401_69 == 0)
    goto <bb 34>;
  else
    goto <bb 36>;

<bb 34>:
  D.45357_70 = attr_2->a_value;
  if (D.45357_70 != 0B)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  D.45357_71 = attr_2->a_value;
  D.45404_72 = atoi (D.45357_71);
  D.45405_73 = (unsigned int) D.45404_72;
  t38_options_1->T38FaxMaxDatagram = D.45405_73;
  goto <bb 42>;

<bb 36>:
  D.45354_74 = attr_2->a_name;
  D.45408_75 = strcasecmp (D.45354_74, "T38FaxUdpEC");
  if (D.45408_75 == 0)
    goto <bb 37>;
  else
    goto <bb 39>;

<bb 37>:
  D.45357_76 = attr_2->a_value;
  if (D.45357_76 != 0B)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.45357_77 = attr_2->a_value;
  D.45411_78 = switch_core_perform_session_strdup (session_3(D), D.45357_77, "src/switch_core_media.c", &__func__, 412);
  t38_options_1->T38FaxUdpEC = D.45411_78;
  goto <bb 42>;

<bb 39>:
  D.45354_79 = attr_2->a_name;
  D.45412_80 = strcasecmp (D.45354_79, "T38VendorInfo");
  if (D.45412_80 == 0)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 40>:
  D.45357_81 = attr_2->a_value;
  if (D.45357_81 != 0B)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.45357_82 = attr_2->a_value;
  D.45417_83 = switch_core_perform_session_strdup (session_3(D), D.45357_82, "src/switch_core_media.c", &__func__, 414);
  t38_options_1->T38VendorInfo = D.45417_83;

<bb 42>:
  attr_84 = attr_2->a_next;
  # DEBUG attr => attr_84

<bb 43>:
  # attr_2 = PHI <attr_29(14), attr_84(42)>
  # DEBUG attr => attr_2
  if (attr_2 != 0B)
    goto <bb 15>;
  else
    goto <bb 44>;

<bb 44>:
  D.45323_85 = session_3(D)->channel;
  switch_channel_set_variable_var_check (D.45323_85, "has_t38", "true", 1);
  D.45323_86 = session_3(D)->channel;
  switch_channel_set_private (D.45323_86, "t38_options", t38_options_1);
  D.45323_87 = session_3(D)->channel;
  switch_channel_set_app_flag_key ("T38", D.45323_87, 2);
  D.45323_88 = session_3(D)->channel;
  switch_channel_execute_on (D.45323_88, "sip_execute_on_image");
  D.45323_89 = session_3(D)->channel;
  switch_channel_api_on (D.45323_89, "sip_api_on_image");
  D.45418_90 = t38_options_1;
  return D.45418_90;

}



;; Function switch_core_media_build_crypto (switch_core_media_build_crypto)



Renaming block #0



Renaming block #2

Renaming statement if (smh == 0B)



Renaming block #3



Renaming block #4

Renaming statement D.46676 = smh->session;

Renaming statement channel = switch_core_session_get_channel (D.46676);

Renaming statement D.46677 = &smh->engines;

Renaming statement D.46678 = type * 11416;

Renaming statement engine = D.46677 + D.46678;

Renaming statement if (force == 0)



Renaming block #5

Renaming statement D.46681 = engine->ssec[ctype].local_raw_key[0];

Renaming statement if (D.46681 != 0)



Renaming block #6

Renaming statement D.46684 = 0;



Renaming block #7

Renaming statement if (direction == 0)



Renaming block #8

Renaming statement key = &engine->ssec[ctype].local_raw_key;



Renaming block #9

Renaming statement key = &engine->ssec[ctype].remote_raw_key;



Renaming block #10

Renaming statement D.46688 = SUITES[ctype].keylen;

Renaming statement D.46689 = (uint32_t) D.46688;

Renaming statement switch_rtp_get_random (key, D.46689);

Renaming statement D.46688 = SUITES[ctype].keylen;

Renaming statement D.46690 = (switch_size_t) D.46688;

Renaming statement switch_b64_encode (key, D.46690, &b64_key, 512);

Renaming statement p = strrchr (&b64_key, 61);



Renaming block #12

Renaming statement if (p != 0B)



Renaming block #13

Renaming statement D.46692 = *p;

Renaming statement if (D.46692 != 0)



Renaming block #14

Renaming statement D.46692 = *p;

Renaming statement if (D.46692 == 61)



Renaming block #11

Renaming statement *p = 0;

Renaming statement p = p + -1;



Renaming block #15

Renaming statement if (index == 0)



Renaming block #16

Renaming statement D.46696 = ctype + 1;

Renaming statement index = (int) D.46696;



Renaming block #17

Renaming statement D.46676 = smh->session;

Renaming statement D.46697 = SUITES[ctype].name;

Renaming statement D.46698 = switch_core_session_sprintf (D.46676, "%d %s inline:%s", index, D.46697, &b64_key);

Renaming statement engine->ssec[ctype].local_crypto_key = D.46698;

Renaming statement D.46676 = smh->session;

Renaming statement D.46699 = D.46676->channel;

Renaming statement D.46700 = engine->ssec[ctype].local_crypto_key;

Renaming statement if (type == 1)



Renaming block #18

Renaming statement iftmp.164 = "video";



Renaming block #19

Renaming statement iftmp.164 = "audio";



Renaming block #20

Renaming statement switch_channel_set_variable_name_printf (D.46699, D.46700, "rtp_last_%s_local_crypto_key", iftmp.164);

Renaming statement D.46676 = smh->session;

Renaming statement D.46699 = D.46676->channel;

Renaming statement switch_channel_set_flag_value (D.46699, 92, 1);

Renaming statement D.46676 = smh->session;

Renaming statement if (type == 1)



Renaming block #21

Renaming statement iftmp.165 = "video";



Renaming block #22

Renaming statement iftmp.165 = "audio";



Renaming block #23

Renaming statement D.46700 = engine->ssec[ctype].local_crypto_key;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 916, D.46676, 7, "Set Local %s crypto Key [%s]\n", iftmp.165, D.46700);

Renaming statement D.46712 = smh->mparams;

Renaming statement D.46713 = D.46712->ndlb;

Renaming statement D.46714 = D.46713 & 8;

Renaming statement if (D.46714 == 0)



Renaming block #24

Renaming statement val = switch_channel_get_variable_dup (channel, "NDLB_support_asterisk_missing_srtp_auth", 1, -1);

Renaming statement if (val == 0B)



Renaming block #25

Renaming statement D.46717 = switch_true (val);

Renaming statement if (D.46717 == 0)



Renaming block #26

Renaming statement engine->ssec[ctype].crypto_type = ctype;



Renaming block #27

Renaming statement engine->ssec[ctype].crypto_type = 8;



Renaming block #28

Renaming statement D.46684 = 0;



Renaming block #29

Renaming statement return D.46684;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement b64_key = "";



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("smh", "src/switch_core_media.c", 869, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement D.46676_8 = smh_7(D)->session;

Updating SSA information for statement channel_9 = switch_core_session_get_channel (D.46676_8);



Registering new PHI nodes in block #5

Updating SSA information for statement D.46681_16 = engine_13->ssec[ctype_15(D)].local_raw_key[0];



Registering new PHI nodes in block #6



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9



Registering new PHI nodes in block #10

Updating SSA information for statement D.46688_21 = SUITES[ctype_15(D)].keylen;

Updating SSA information for statement switch_rtp_get_random (key_2, D.46689_22);

Updating SSA information for statement D.46688_23 = SUITES[ctype_15(D)].keylen;

Updating SSA information for statement switch_b64_encode (key_2, D.46690_24, &b64_key, 512);

Updating SSA information for statement p_25 = strrchr (&b64_key, 61);



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13

Updating SSA information for statement D.46692_26 = *p_3;



Registering new PHI nodes in block #14

Updating SSA information for statement D.46692_27 = *p_3;



Registering new PHI nodes in block #11

Updating SSA information for statement *p_3 = 0;



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17

Updating SSA information for statement D.46676_32 = smh_7(D)->session;

Updating SSA information for statement D.46697_33 = SUITES[ctype_15(D)].name;

Updating SSA information for statement D.46698_34 = switch_core_session_sprintf (D.46676_32, "%d %s inline:%s", index_1, D.46697_33, &b64_key);

Updating SSA information for statement engine_13->ssec[ctype_15(D)].local_crypto_key = D.46698_34;

Updating SSA information for statement D.46676_35 = smh_7(D)->session;

Updating SSA information for statement D.46699_36 = D.46676_35->channel;

Updating SSA information for statement D.46700_37 = engine_13->ssec[ctype_15(D)].local_crypto_key;



Registering new PHI nodes in block #18



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20

Updating SSA information for statement switch_channel_set_variable_name_printf (D.46699_36, D.46700_37, "rtp_last_%s_local_crypto_key", iftmp.164_5);

Updating SSA information for statement D.46676_40 = smh_7(D)->session;

Updating SSA information for statement D.46699_41 = D.46676_40->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.46699_41, 92, 1);

Updating SSA information for statement D.46676_42 = smh_7(D)->session;



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22



Registering new PHI nodes in block #23

Updating SSA information for statement D.46700_45 = engine_13->ssec[ctype_15(D)].local_crypto_key;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 916, D.46676_42, 7, "Set Local %s crypto Key [%s]\n", iftmp.165_6, D.46700_45);

Updating SSA information for statement D.46712_46 = smh_7(D)->mparams;

Updating SSA information for statement D.46713_47 = D.46712_46->ndlb;



Registering new PHI nodes in block #24

Updating SSA information for statement val_49 = switch_channel_get_variable_dup (channel_9, "NDLB_support_asterisk_missing_srtp_auth", 1, -1);



Registering new PHI nodes in block #25

Updating SSA information for statement D.46717_50 = switch_true (val_49);



Registering new PHI nodes in block #26

Updating SSA information for statement engine_13->ssec[ctype_15(D)].crypto_type = ctype_15(D);



Registering new PHI nodes in block #27

Updating SSA information for statement engine_13->ssec[ctype_15(D)].crypto_type = 8;



Registering new PHI nodes in block #28



Registering new PHI nodes in block #29



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 30
Number of blocks to update: 29 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 


Scope blocks after cleanups:

{ Scope block #0 
  unsigned char b64_key[512];
  unsigned char * key;
  const char * val;
  struct switch_channel_t * channel;
  char * p;
  struct switch_rtp_engine_t * engine;
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_build_crypto";
  static const char __func__[31] = "switch_core_media_build_crypto";

}
switch_core_media_build_crypto (struct switch_media_handle_t * smh, switch_media_type_t type, int index, switch_rtp_crypto_key_type_t ctype, switch_rtp_crypto_direction_t direction, int force)
{
  static const char __func__[31] = "switch_core_media_build_crypto";
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_build_crypto";
  struct switch_rtp_engine_t * engine;
  char * p;
  struct switch_channel_t * channel;
  const char * val;
  unsigned char * key;
  unsigned char b64_key[512];
  int D.46717;
  unsigned int D.46714;
  switch_core_media_NDLB_t D.46713;
  struct switch_core_media_params_t * D.46712;
  char * iftmp.165;
  char * iftmp.164;
  char * D.46700;
  struct switch_channel_t * D.46699;
  char * D.46698;
  char * D.46697;
  unsigned int D.46696;
  char D.46692;
  switch_size_t D.46690;
  uint32_t D.46689;
  int D.46688;
  switch_status_t D.46684;
  unsigned char D.46681;
  unsigned int D.46678;
  struct switch_rtp_engine_t[2] * D.46677;
  struct switch_core_session_t * D.46676;

<bb 2>:
  b64_key = "";
  if (smh_7(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 869, &__PRETTY_FUNCTION__);

<bb 4>:
  D.46676_8 = smh_7(D)->session;
  channel_9 = switch_core_session_get_channel (D.46676_8);
  # DEBUG channel => channel_9
  D.46677_10 = &smh_7(D)->engines;
  D.46678_12 = type_11(D) * 11416;
  engine_13 = D.46677_10 + D.46678_12;
  # DEBUG engine => engine_13
  if (force_14(D) == 0)
    goto <bb 5>;
  else
    goto <bb 7>;

<bb 5>:
  D.46681_16 = engine_13->ssec[ctype_15(D)].local_raw_key[0];
  if (D.46681_16 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.46684_17 = 0;
  goto <bb 29>;

<bb 7>:
  if (direction_18(D) == 0)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  key_19 = &engine_13->ssec[ctype_15(D)].local_raw_key;
  # DEBUG key => key_19
  goto <bb 10>;

<bb 9>:
  key_20 = &engine_13->ssec[ctype_15(D)].remote_raw_key;
  # DEBUG key => key_20

<bb 10>:
  # key_2 = PHI <key_19(8), key_20(9)>
  # DEBUG key => key_2
  D.46688_21 = SUITES[ctype_15(D)].keylen;
  D.46689_22 = (uint32_t) D.46688_21;
  switch_rtp_get_random (key_2, D.46689_22);
  D.46688_23 = SUITES[ctype_15(D)].keylen;
  D.46690_24 = (switch_size_t) D.46688_23;
  switch_b64_encode (key_2, D.46690_24, &b64_key, 512);
  p_25 = strrchr (&b64_key, 61);
  # DEBUG p => p_25
  goto <bb 12>;

<bb 11>:
  *p_3 = 0;
  p_28 = p_3 + -1;
  # DEBUG p => p_28

<bb 12>:
  # p_3 = PHI <p_25(10), p_28(11)>
  # DEBUG p => p_3
  if (p_3 != 0B)
    goto <bb 13>;
  else
    goto <bb 15>;

<bb 13>:
  D.46692_26 = *p_3;
  if (D.46692_26 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.46692_27 = *p_3;
  if (D.46692_27 == 61)
    goto <bb 11>;
  else
    goto <bb 15>;

<bb 15>:
  if (index_29(D) == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.46696_30 = ctype_15(D) + 1;
  index_31 = (int) D.46696_30;
  # DEBUG index => index_31

<bb 17>:
  # index_1 = PHI <index_29(D)(15), index_31(16)>
  # DEBUG index => index_1
  D.46676_32 = smh_7(D)->session;
  D.46697_33 = SUITES[ctype_15(D)].name;
  D.46698_34 = switch_core_session_sprintf (D.46676_32, "%d %s inline:%s", index_1, D.46697_33, &b64_key);
  engine_13->ssec[ctype_15(D)].local_crypto_key = D.46698_34;
  D.46676_35 = smh_7(D)->session;
  D.46699_36 = D.46676_35->channel;
  D.46700_37 = engine_13->ssec[ctype_15(D)].local_crypto_key;
  if (type_11(D) == 1)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  iftmp.164_38 = "video";
  goto <bb 20>;

<bb 19>:
  iftmp.164_39 = "audio";

<bb 20>:
  # iftmp.164_5 = PHI <iftmp.164_38(18), iftmp.164_39(19)>
  switch_channel_set_variable_name_printf (D.46699_36, D.46700_37, "rtp_last_%s_local_crypto_key", iftmp.164_5);
  D.46676_40 = smh_7(D)->session;
  D.46699_41 = D.46676_40->channel;
  switch_channel_set_flag_value (D.46699_41, 92, 1);
  D.46676_42 = smh_7(D)->session;
  if (type_11(D) == 1)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  iftmp.165_43 = "video";
  goto <bb 23>;

<bb 22>:
  iftmp.165_44 = "audio";

<bb 23>:
  # iftmp.165_6 = PHI <iftmp.165_43(21), iftmp.165_44(22)>
  D.46700_45 = engine_13->ssec[ctype_15(D)].local_crypto_key;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 916, D.46676_42, 7, "Set Local %s crypto Key [%s]\n", iftmp.165_6, D.46700_45);
  D.46712_46 = smh_7(D)->mparams;
  D.46713_47 = D.46712_46->ndlb;
  D.46714_48 = D.46713_47 & 8;
  if (D.46714_48 == 0)
    goto <bb 24>;
  else
    goto <bb 27>;

<bb 24>:
  val_49 = switch_channel_get_variable_dup (channel_9, "NDLB_support_asterisk_missing_srtp_auth", 1, -1);
  # DEBUG val => val_49
  if (val_49 == 0B)
    goto <bb 26>;
  else
    goto <bb 25>;

<bb 25>:
  D.46717_50 = switch_true (val_49);
  if (D.46717_50 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  engine_13->ssec[ctype_15(D)].crypto_type = ctype_15(D);
  goto <bb 28>;

<bb 27>:
  engine_13->ssec[ctype_15(D)].crypto_type = 8;

<bb 28>:
  D.46684_51 = 0;

<bb 29>:
  # D.46684_4 = PHI <D.46684_17(6), D.46684_51(28)>
  return D.46684_4;

}



;; Function switch_core_media_crypto_str2type (switch_core_media_crypto_str2type)



Renaming block #0



Renaming block #2

Renaming statement i = 0;



Renaming block #6

Renaming statement if (i <= 8)



Renaming block #3

Renaming statement D.47209 = SUITES[i].name;

Renaming statement D.47209 = SUITES[i].name;

Renaming statement D.47210 = strlen (D.47209);

Renaming statement D.47211 = strncasecmp (str, D.47209, D.47210);

Renaming statement if (D.47211 == 0)



Renaming block #4

Renaming statement D.47214 = SUITES[i].type;



Renaming block #5

Renaming statement i = i + 1;



Renaming block #7

Renaming statement D.47214 = 9;



Renaming block #8

Renaming statement return D.47214;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #6



Registering new PHI nodes in block #3

Updating SSA information for statement D.47209_4 = SUITES[i_1].name;

Updating SSA information for statement D.47209_5 = SUITES[i_1].name;

Updating SSA information for statement D.47210_6 = strlen (D.47209_5);

Updating SSA information for statement D.47211_8 = strncasecmp (str_7(D), D.47209_5, D.47210_6);



Registering new PHI nodes in block #4

Updating SSA information for statement D.47214_9 = SUITES[i_1].type;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)

Affected blocks: 0 2 3 4 5 6 7 8 


Scope blocks after cleanups:

{ Scope block #0 
  int i;

}
switch_core_media_crypto_str2type (const char * str)
{
  int i;
  switch_rtp_crypto_key_type_t D.47214;
  int D.47211;
  size_t D.47210;
  char * D.47209;

<bb 2>:
  i_3 = 0;
  # DEBUG i => i_3
  goto <bb 6>;

<bb 3>:
  D.47209_4 = SUITES[i_1].name;
  D.47209_5 = SUITES[i_1].name;
  D.47210_6 = strlen (D.47209_5);
  D.47211_8 = strncasecmp (str_7(D), D.47209_5, D.47210_6);
  if (D.47211_8 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.47214_9 = SUITES[i_1].type;
  goto <bb 8>;

<bb 5>:
  i_10 = i_1 + 1;
  # DEBUG i => i_10

<bb 6>:
  # i_1 = PHI <i_3(2), i_10(5)>
  # DEBUG i => i_1
  if (i_1 <= 8)
    goto <bb 3>;
  else
    goto <bb 7>;

<bb 7>:
  D.47214_11 = 9;

<bb 8>:
  # D.47214_2 = PHI <D.47214_9(4), D.47214_11(7)>
  return D.47214_2;

}



;; Function switch_core_session_get_recovery_crypto_key (switch_core_session_get_recovery_crypto_key)



Renaming block #0



Renaming block #2

Renaming statement D.40304 = session->media_handle;

Renaming statement if (D.40304 == 0B)



Renaming block #3

Renaming statement D.40304 = session->media_handle;

Renaming statement D.40307 = &D.40304->engines;

Renaming statement D.40308 = type * 11416;

Renaming statement engine = D.40307 + D.40308;

Renaming statement if (type == 0)



Renaming block #4

Renaming statement keyvar = "srtp_remote_audio_crypto_key";

Renaming statement tagvar = "srtp_remote_audio_crypto_tag";

Renaming statement ctypevar = "srtp_remote_audio_crypto_type";



Renaming block #5

Renaming statement keyvar = "srtp_remote_video_crypto_key";

Renaming statement tagvar = "srtp_remote_video_crypto_tag";

Renaming statement ctypevar = "srtp_remote_video_crypto_type";



Renaming block #6

Renaming statement D.40312 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40312, keyvar, 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #7

Renaming statement D.40312 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40312, ctypevar, 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #8

Renaming statement D.40317 = switch_core_media_crypto_str2type (tmp);

Renaming statement engine->crypto_type = D.40317;



Renaming block #9

Renaming statement D.40318 = engine->crypto_type;

Renaming statement D.40319 = switch_core_perform_session_strdup (session, tmp, "src/switch_core_media.c", &__func__, 1015);

Renaming statement engine->ssec[D.40318].remote_crypto_key = D.40319;

Renaming statement D.40312 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40312, tagvar, 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #10

Renaming statement tv = atoi (tmp);

Renaming statement D.40318 = engine->crypto_type;

Renaming statement engine->ssec[D.40318].crypto_tag = tv;



Renaming block #11

Renaming statement D.40318 = engine->crypto_type;

Renaming statement engine->ssec[D.40318].crypto_tag = 1;



Renaming block #12

Renaming statement D.40312 = session->channel;

Renaming statement switch_channel_set_flag_value (D.40312, 92, 1);



Renaming block #13



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.40304_5 = session_4(D)->media_handle;



Registering new PHI nodes in block #3

Updating SSA information for statement D.40304_6 = session_4(D)->media_handle;



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.40312_17 = session_4(D)->channel;

Updating SSA information for statement tmp_18 = switch_channel_get_variable_dup (D.40312_17, keyvar_1, 1, -1);



Registering new PHI nodes in block #7

Updating SSA information for statement D.40312_19 = session_4(D)->channel;

Updating SSA information for statement tmp_20 = switch_channel_get_variable_dup (D.40312_19, ctypevar_3, 1, -1);



Registering new PHI nodes in block #8

Updating SSA information for statement D.40317_21 = switch_core_media_crypto_str2type (tmp_20);

Updating SSA information for statement engine_10->crypto_type = D.40317_21;



Registering new PHI nodes in block #9

Updating SSA information for statement D.40318_22 = engine_10->crypto_type;

Updating SSA information for statement D.40319_23 = switch_core_perform_session_strdup (session_4(D), tmp_20, "src/switch_core_media.c", &__func__, 1015);

Updating SSA information for statement engine_10->ssec[D.40318_22].remote_crypto_key = D.40319_23;

Updating SSA information for statement D.40312_24 = session_4(D)->channel;

Updating SSA information for statement tmp_25 = switch_channel_get_variable_dup (D.40312_24, tagvar_2, 1, -1);



Registering new PHI nodes in block #10

Updating SSA information for statement tv_26 = atoi (tmp_25);

Updating SSA information for statement D.40318_27 = engine_10->crypto_type;

Updating SSA information for statement engine_10->ssec[D.40318_27].crypto_tag = tv_26;



Registering new PHI nodes in block #11

Updating SSA information for statement D.40318_28 = engine_10->crypto_type;

Updating SSA information for statement engine_10->ssec[D.40318_28].crypto_tag = 1;



Registering new PHI nodes in block #12

Updating SSA information for statement D.40312_29 = session_4(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40312_29, 92, 1);



Registering new PHI nodes in block #13



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 14
Number of blocks to update: 13 ( 93%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 


Scope blocks after cleanups:

{ Scope block #0 
  const char * tmp;
  struct switch_rtp_engine_t * engine;
  char * keyvar;
  char * tagvar;
  char * ctypevar;
  static const char __func__[44] = "switch_core_session_get_recovery_crypto_key";

  { Scope block #0 
    int tv;

  }

}
switch_core_session_get_recovery_crypto_key (struct switch_core_session_t * session, switch_media_type_t type)
{
  int tv;
  static const char __func__[44] = "switch_core_session_get_recovery_crypto_key";
  char * ctypevar;
  char * tagvar;
  char * keyvar;
  struct switch_rtp_engine_t * engine;
  const char * tmp;
  char * D.40319;
  switch_rtp_crypto_key_type_t D.40318;
  switch_rtp_crypto_key_type_t D.40317;
  struct switch_channel_t * D.40312;
  unsigned int D.40308;
  struct switch_rtp_engine_t[2] * D.40307;
  struct switch_media_handle_t * D.40304;

<bb 2>:
  D.40304_5 = session_4(D)->media_handle;
  if (D.40304_5 == 0B)
    goto <bb 13>;
  else
    goto <bb 3>;

<bb 3>:
  D.40304_6 = session_4(D)->media_handle;
  D.40307_7 = &D.40304_6->engines;
  D.40308_9 = type_8(D) * 11416;
  engine_10 = D.40307_7 + D.40308_9;
  # DEBUG engine => engine_10
  if (type_8(D) == 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  keyvar_11 = "srtp_remote_audio_crypto_key";
  # DEBUG keyvar => keyvar_11
  tagvar_12 = "srtp_remote_audio_crypto_tag";
  # DEBUG tagvar => tagvar_12
  ctypevar_13 = "srtp_remote_audio_crypto_type";
  # DEBUG ctypevar => ctypevar_13
  goto <bb 6>;

<bb 5>:
  keyvar_14 = "srtp_remote_video_crypto_key";
  # DEBUG keyvar => keyvar_14
  tagvar_15 = "srtp_remote_video_crypto_tag";
  # DEBUG tagvar => tagvar_15
  ctypevar_16 = "srtp_remote_video_crypto_type";
  # DEBUG ctypevar => ctypevar_16

<bb 6>:
  # keyvar_1 = PHI <keyvar_11(4), keyvar_14(5)>
  # tagvar_2 = PHI <tagvar_12(4), tagvar_15(5)>
  # ctypevar_3 = PHI <ctypevar_13(4), ctypevar_16(5)>
  # DEBUG ctypevar => ctypevar_3
  # DEBUG tagvar => tagvar_2
  # DEBUG keyvar => keyvar_1
  D.40312_17 = session_4(D)->channel;
  tmp_18 = switch_channel_get_variable_dup (D.40312_17, keyvar_1, 1, -1);
  # DEBUG tmp => tmp_18
  if (tmp_18 != 0B)
    goto <bb 7>;
  else
    goto <bb 13>;

<bb 7>:
  D.40312_19 = session_4(D)->channel;
  tmp_20 = switch_channel_get_variable_dup (D.40312_19, ctypevar_3, 1, -1);
  # DEBUG tmp => tmp_20
  if (tmp_20 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.40317_21 = switch_core_media_crypto_str2type (tmp_20);
  engine_10->crypto_type = D.40317_21;

<bb 9>:
  D.40318_22 = engine_10->crypto_type;
  D.40319_23 = switch_core_perform_session_strdup (session_4(D), tmp_20, "src/switch_core_media.c", &__func__, 1015);
  engine_10->ssec[D.40318_22].remote_crypto_key = D.40319_23;
  D.40312_24 = session_4(D)->channel;
  tmp_25 = switch_channel_get_variable_dup (D.40312_24, tagvar_2, 1, -1);
  # DEBUG tmp => tmp_25
  if (tmp_25 != 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  tv_26 = atoi (tmp_25);
  # DEBUG tv => tv_26
  D.40318_27 = engine_10->crypto_type;
  engine_10->ssec[D.40318_27].crypto_tag = tv_26;
  goto <bb 12>;

<bb 11>:
  D.40318_28 = engine_10->crypto_type;
  engine_10->ssec[D.40318_28].crypto_tag = 1;

<bb 12>:
  D.40312_29 = session_4(D)->channel;
  switch_channel_set_flag_value (D.40312_29, 92, 1);

<bb 13>:
  return;

}



;; Function switch_core_media_crypto_type2str (switch_core_media_crypto_type2str)



Renaming block #0



Renaming block #2

Renaming statement if (type > 8)



Renaming block #3



Renaming block #4

Renaming statement D.47207 = SUITES[type].name;

Renaming statement return D.47207;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("type < CRYPTO_INVALID", "src/switch_core_media.c", 222, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement D.47207_2 = SUITES[type_1(D)].name;



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)

Affected blocks: 0 2 3 4 


Scope blocks after cleanups:

{ Scope block #0 
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_crypto_type2str";

}
switch_core_media_crypto_type2str (switch_rtp_crypto_key_type_t type)
{
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_crypto_type2str";
  const char * D.47207;

<bb 2>:
  if (type_1(D) > 8)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("type < CRYPTO_INVALID", "src/switch_core_media.c", 222, &__PRETTY_FUNCTION__);

<bb 4>:
  D.47207_2 = SUITES[type_1(D)].name;
  return D.47207_2;

}



;; Function switch_core_media_crypto_keylen (switch_core_media_crypto_keylen)



Renaming block #0



Renaming block #2

Renaming statement if (type > 8)



Renaming block #3



Renaming block #4

Renaming statement D.47203 = SUITES[type].keylen;

Renaming statement return D.47203;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("type < CRYPTO_INVALID", "src/switch_core_media.c", 229, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement D.47203_2 = SUITES[type_1(D)].keylen;



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)

Affected blocks: 0 2 3 4 


Scope blocks after cleanups:

{ Scope block #0 
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_crypto_keylen";

}
switch_core_media_crypto_keylen (switch_rtp_crypto_key_type_t type)
{
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_crypto_keylen";
  int D.47203;

<bb 2>:
  if (type_1(D) > 8)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("type < CRYPTO_INVALID", "src/switch_core_media.c", 229, &__PRETTY_FUNCTION__);

<bb 4>:
  D.47203_2 = SUITES[type_1(D)].keylen;
  return D.47203_2;

}



;; Function switch_core_media_pass_zrtp_hash2 (switch_core_media_pass_zrtp_hash2)



Renaming block #0



Renaming block #2

Renaming statement _switch_core_media_pass_zrtp_hash2 (aleg_session, bleg_session, 0);

Renaming statement _switch_core_media_pass_zrtp_hash2 (aleg_session, bleg_session, 1);



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement _switch_core_media_pass_zrtp_hash2 (aleg_session_1(D), bleg_session_2(D), 0);

Updating SSA information for statement _switch_core_media_pass_zrtp_hash2 (aleg_session_1(D), bleg_session_2(D), 1);



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 3
Number of blocks to update: 2 ( 67%)

Affected blocks: 0 2 


Scope blocks after cleanups:

{ Scope block #0 

}
switch_core_media_pass_zrtp_hash2 (struct switch_core_session_t * aleg_session, struct switch_core_session_t * bleg_session)
{
<bb 2>:
  _switch_core_media_pass_zrtp_hash2 (aleg_session_1(D), bleg_session_2(D), 0);
  _switch_core_media_pass_zrtp_hash2 (aleg_session_1(D), bleg_session_2(D), 1);
  return;

}



;; Function switch_core_media_pass_zrtp_hash (switch_core_media_pass_zrtp_hash)



Renaming block #0



Renaming block #2

Renaming statement channel = switch_core_session_get_channel (session);

Renaming statement D.47161 = switch_channel_get_session (channel);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 289, D.47161, 101, "Deciding whether to pass zrtp-hash between legs\n");

Renaming statement D.47162 = switch_channel_test_flag (channel, 73);

Renaming statement if (D.47162 == 0)



Renaming block #3

Renaming statement D.47165 = switch_channel_get_session (channel);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 291, D.47165, 101, "CF_ZRTP_PASSTHRU_REQ not set, so not propagating zrtp-hash\n");



Renaming block #4

Renaming statement D.47166 = switch_core_session_perform_get_partner (session, &other_session, "src/switch_core_media.c", &__func__, 293);

Renaming statement if (D.47166 != 0)



Renaming block #5

Renaming statement D.47169 = switch_channel_get_session (channel);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 294, D.47169, 101, "No partner channel found, so not propagating zrtp-hash\n");



Renaming block #6

Renaming statement D.47170 = switch_channel_get_session (channel);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 297, D.47170, 101, "Found peer channel; propagating zrtp-hash if set\n");

Renaming statement other_session.172 = other_session;

Renaming statement switch_core_media_pass_zrtp_hash2 (session, other_session.172);

Renaming statement other_session.172 = other_session;

Renaming statement switch_core_session_rwunlock (other_session.172);



Renaming block #7



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement channel_2 = switch_core_session_get_channel (session_1(D));

Updating SSA information for statement D.47161_3 = switch_channel_get_session (channel_2);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 289, D.47161_3, 101, "Deciding whether to pass zrtp-hash between legs\n");

Updating SSA information for statement D.47162_4 = switch_channel_test_flag (channel_2, 73);



Registering new PHI nodes in block #3

Updating SSA information for statement D.47165_5 = switch_channel_get_session (channel_2);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 291, D.47165_5, 101, "CF_ZRTP_PASSTHRU_REQ not set, so not propagating zrtp-hash\n");



Registering new PHI nodes in block #4

Updating SSA information for statement D.47166_6 = switch_core_session_perform_get_partner (session_1(D), &other_session, "src/switch_core_media.c", &__func__, 293);



Registering new PHI nodes in block #5

Updating SSA information for statement D.47169_7 = switch_channel_get_session (channel_2);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 294, D.47169_7, 101, "No partner channel found, so not propagating zrtp-hash\n");



Registering new PHI nodes in block #6

Updating SSA information for statement D.47170_8 = switch_channel_get_session (channel_2);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 297, D.47170_8, 101, "Found peer channel; propagating zrtp-hash if set\n");

Updating SSA information for statement other_session.172_9 = other_session;

Updating SSA information for statement switch_core_media_pass_zrtp_hash2 (session_1(D), other_session.172_9);

Updating SSA information for statement other_session.172_10 = other_session;

Updating SSA information for statement switch_core_session_rwunlock (other_session.172_10);



Registering new PHI nodes in block #7



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)

Affected blocks: 0 2 3 4 5 6 7 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_channel_t * channel;
  struct switch_core_session_t * other_session;
  static const char __func__[33] = "switch_core_media_pass_zrtp_hash";

}
switch_core_media_pass_zrtp_hash (struct switch_core_session_t * session)
{
  static const char __func__[33] = "switch_core_media_pass_zrtp_hash";
  struct switch_core_session_t * other_session;
  struct switch_channel_t * channel;
  struct switch_core_session_t * other_session.172;
  struct switch_core_session_t * D.47170;
  struct switch_core_session_t * D.47169;
  switch_status_t D.47166;
  struct switch_core_session_t * D.47165;
  uint32_t D.47162;
  struct switch_core_session_t * D.47161;

<bb 2>:
  channel_2 = switch_core_session_get_channel (session_1(D));
  # DEBUG channel => channel_2
  D.47161_3 = switch_channel_get_session (channel_2);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 289, D.47161_3, 101, "Deciding whether to pass zrtp-hash between legs\n");
  D.47162_4 = switch_channel_test_flag (channel_2, 73);
  if (D.47162_4 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.47165_5 = switch_channel_get_session (channel_2);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 291, D.47165_5, 101, "CF_ZRTP_PASSTHRU_REQ not set, so not propagating zrtp-hash\n");
  goto <bb 7>;

<bb 4>:
  D.47166_6 = switch_core_session_perform_get_partner (session_1(D), &other_session, "src/switch_core_media.c", &__func__, 293);
  if (D.47166_6 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47169_7 = switch_channel_get_session (channel_2);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 294, D.47169_7, 101, "No partner channel found, so not propagating zrtp-hash\n");
  goto <bb 7>;

<bb 6>:
  D.47170_8 = switch_channel_get_session (channel_2);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 297, D.47170_8, 101, "Found peer channel; propagating zrtp-hash if set\n");
  other_session.172_9 = other_session;
  switch_core_media_pass_zrtp_hash2 (session_1(D), other_session.172_9);
  other_session.172_10 = other_session;
  switch_core_session_rwunlock (other_session.172_10);

<bb 7>:
  return;

}



;; Function switch_core_media_get_zrtp_hash (switch_core_media_get_zrtp_hash)



Renaming block #0



Renaming block #2

Renaming statement D.47152 = session->media_handle;

Renaming statement if (D.47152 == 0B)



Renaming block #3

Renaming statement D.47155 = 0B;



Renaming block #4

Renaming statement D.47152 = session->media_handle;

Renaming statement D.47156 = &D.47152->engines;

Renaming statement D.47157 = type * 11416;

Renaming statement engine = D.47156 + D.47157;

Renaming statement if (local != 0)



Renaming block #5

Renaming statement D.47155 = engine->local_sdp_zrtp_hash;



Renaming block #6

Renaming statement D.47155 = engine->remote_sdp_zrtp_hash;



Renaming block #7

Renaming statement return D.47155;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.47152_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #3



Registering new PHI nodes in block #4

Updating SSA information for statement D.47152_5 = session_2(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.47155_11 = engine_9->local_sdp_zrtp_hash;



Registering new PHI nodes in block #6

Updating SSA information for statement D.47155_12 = engine_9->remote_sdp_zrtp_hash;



Registering new PHI nodes in block #7



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)

Affected blocks: 0 2 3 4 5 6 7 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_engine_t * engine;

}
switch_core_media_get_zrtp_hash (struct switch_core_session_t * session, switch_media_type_t type, switch_bool_t local)
{
  struct switch_rtp_engine_t * engine;
  unsigned int D.47157;
  struct switch_rtp_engine_t[2] * D.47156;
  const char * D.47155;
  struct switch_media_handle_t * D.47152;

<bb 2>:
  D.47152_3 = session_2(D)->media_handle;
  if (D.47152_3 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.47155_4 = 0B;
  goto <bb 7>;

<bb 4>:
  D.47152_5 = session_2(D)->media_handle;
  D.47156_6 = &D.47152_5->engines;
  D.47157_8 = type_7(D) * 11416;
  engine_9 = D.47156_6 + D.47157_8;
  # DEBUG engine => engine_9
  if (local_10(D) != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47155_11 = engine_9->local_sdp_zrtp_hash;
  goto <bb 7>;

<bb 6>:
  D.47155_12 = engine_9->remote_sdp_zrtp_hash;

<bb 7>:
  # D.47155_1 = PHI <D.47155_4(3), D.47155_11(5), D.47155_12(6)>
  return D.47155_1;

}



;; Function switch_core_media_extract_t38_options (switch_core_media_extract_t38_options)



Renaming block #0



Renaming block #2

Renaming statement parser = 0B;

Renaming statement t38_options = 0B;

Renaming statement D.47135 = strlen (r_sdp);

Renaming statement D.47136 = (int) D.47135;

Renaming statement parser = sdp_parse (0B, r_sdp, D.47136, 0);

Renaming statement if (parser == 0B)



Renaming block #3

Renaming statement D.47139 = 0B;



Renaming block #4

Renaming statement sdp = sdp_session (parser);

Renaming statement if (sdp == 0B)



Renaming block #5

Renaming statement sdp_parser_free (parser);

Renaming statement D.47139 = 0B;



Renaming block #6

Renaming statement m = sdp->sdp_media;



Renaming block #12

Renaming statement if (m != 0B)



Renaming block #7

Renaming statement D.47142 = m->m_proto;

Renaming statement if (D.47142 == 258)



Renaming block #8

Renaming statement D.47145 = m->m_type;

Renaming statement if (D.47145 == 8)



Renaming block #9

Renaming statement D.47148 = m->m_port;

Renaming statement if (D.47148 != 0)



Renaming block #10

Renaming statement t38_options = switch_core_media_process_udptl (session, sdp, m);



Renaming block #11

Renaming statement m = m->m_next;



Renaming block #13

Renaming statement sdp_parser_free (parser);

Renaming statement D.47139 = t38_options;



Renaming block #14

Renaming statement return D.47139;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.47135_7 = strlen (r_sdp_6(D));

Updating SSA information for statement parser_9 = sdp_parse (0B, r_sdp_6(D), D.47136_8, 0);



Registering new PHI nodes in block #3



Registering new PHI nodes in block #4

Updating SSA information for statement sdp_11 = sdp_session (parser_9);



Registering new PHI nodes in block #5

Updating SSA information for statement sdp_parser_free (parser_9);



Registering new PHI nodes in block #6

Updating SSA information for statement m_13 = sdp_11->sdp_media;



Registering new PHI nodes in block #12



Registering new PHI nodes in block #7

Updating SSA information for statement D.47142_14 = m_1->m_proto;



Registering new PHI nodes in block #8

Updating SSA information for statement D.47145_15 = m_1->m_type;



Registering new PHI nodes in block #9

Updating SSA information for statement D.47148_16 = m_1->m_port;



Registering new PHI nodes in block #10

Updating SSA information for statement t38_options_18 = switch_core_media_process_udptl (session_17(D), sdp_11, m_1);



Registering new PHI nodes in block #11

Updating SSA information for statement m_19 = m_1->m_next;



Registering new PHI nodes in block #13

Updating SSA information for statement sdp_parser_free (parser_9);



Registering new PHI nodes in block #14



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 15
Number of blocks to update: 14 ( 93%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 


Scope blocks after cleanups:

{ Scope block #0 
  struct sdp_media_t * m;
  struct sdp_parser_t * parser;
  struct sdp_session_t * sdp;
  struct switch_t38_options_t * t38_options;

}
switch_core_media_extract_t38_options (struct switch_core_session_t * session, const char * r_sdp)
{
  struct switch_t38_options_t * t38_options;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  struct sdp_media_t * m;
  long unsigned int D.47148;
  sdp_media_e D.47145;
  sdp_proto_e D.47142;
  struct switch_t38_options_t * D.47139;
  int D.47136;
  size_t D.47135;

<bb 2>:
  parser_4 = 0B;
  # DEBUG parser => parser_4
  t38_options_5 = 0B;
  # DEBUG t38_options => t38_options_5
  D.47135_7 = strlen (r_sdp_6(D));
  D.47136_8 = (int) D.47135_7;
  parser_9 = sdp_parse (0B, r_sdp_6(D), D.47136_8, 0);
  # DEBUG parser => parser_9
  if (parser_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.47139_10 = 0B;
  goto <bb 14>;

<bb 4>:
  sdp_11 = sdp_session (parser_9);
  # DEBUG sdp => sdp_11
  if (sdp_11 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  sdp_parser_free (parser_9);
  D.47139_12 = 0B;
  goto <bb 14>;

<bb 6>:
  m_13 = sdp_11->sdp_media;
  # DEBUG m => m_13
  goto <bb 12>;

<bb 7>:
  D.47142_14 = m_1->m_proto;
  if (D.47142_14 == 258)
    goto <bb 8>;
  else
    goto <bb 11>;

<bb 8>:
  D.47145_15 = m_1->m_type;
  if (D.47145_15 == 8)
    goto <bb 9>;
  else
    goto <bb 11>;

<bb 9>:
  D.47148_16 = m_1->m_port;
  if (D.47148_16 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  t38_options_18 = switch_core_media_process_udptl (session_17(D), sdp_11, m_1);
  # DEBUG t38_options => t38_options_18
  goto <bb 13>;

<bb 11>:
  m_19 = m_1->m_next;
  # DEBUG m => m_19

<bb 12>:
  # m_1 = PHI <m_13(6), m_19(11)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 7>;
  else
    goto <bb 13>;

<bb 13>:
  # t38_options_2 = PHI <t38_options_18(10), t38_options_5(12)>
  # DEBUG t38_options => t38_options_2
  sdp_parser_free (parser_9);
  D.47139_20 = t38_options_2;

<bb 14>:
  # D.47139_3 = PHI <D.47139_10(3), D.47139_12(5), D.47139_20(13)>
  return D.47139_3;

}



;; Function switch_core_session_get_payload_code (switch_core_session_get_payload_code)



Renaming block #0



Renaming block #2

Renaming statement pt = 0;

Renaming statement recv_pt = 0;

Renaming statement found = 0;

Renaming statement fmtp = 0B;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.47082 = 1;



Renaming block #6

Renaming statement D.47083 = &smh->engines;

Renaming statement D.47084 = type * 11416;

Renaming statement engine = D.47083 + D.47084;

Renaming statement D.47085 = smh->sdp_mutex;

Renaming statement switch_mutex_lock (D.47085);

Renaming statement pmap = engine->payload_map;



Renaming block #12

Renaming statement if (pmap != 0B)



Renaming block #7

Renaming statement D.47086 = pmap->allocated;

Renaming statement if (D.47086 == 0)



Renaming block #8



Renaming block #9

Renaming statement D.47089 = pmap->iananame;

Renaming statement D.47090 = strcasecmp (D.47089, iananame);

Renaming statement if (D.47090 == 0)



Renaming block #10

Renaming statement pt = pmap->pt;

Renaming statement recv_pt = pmap->recv_pt;

Renaming statement fmtp = pmap->rm_fmtp;

Renaming statement found = found + 1;



Renaming block #11

Renaming statement pmap = pmap->next;



Renaming block #13

Renaming statement D.47085 = smh->sdp_mutex;

Renaming statement switch_mutex_unlock (D.47085);

Renaming statement if (found != 0)



Renaming block #14

Renaming statement if (ptP != 0B)



Renaming block #15

Renaming statement *ptP = pt;



Renaming block #16

Renaming statement if (recv_ptP != 0B)



Renaming block #17

Renaming statement *recv_ptP = recv_pt;



Renaming block #18

Renaming statement D.47099 = _zstr (fmtp);

Renaming statement if (D.47099 == 0)



Renaming block #19

Renaming statement if (fmtpP != 0B)



Renaming block #20

Renaming statement *fmtpP = fmtp;



Renaming block #21

Renaming statement D.47082 = 0;



Renaming block #22

Renaming statement D.47082 = 1;



Renaming block #23

Renaming statement return D.47082;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 530, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_12 = session_11(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.47085_18 = smh_12->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.47085_18);

Updating SSA information for statement pmap_19 = engine_17->payload_map;



Registering new PHI nodes in block #12



Registering new PHI nodes in block #7

Updating SSA information for statement D.47086_20 = pmap_1->allocated;



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9

Updating SSA information for statement D.47089_21 = pmap_1->iananame;

Updating SSA information for statement D.47090_23 = strcasecmp (D.47089_21, iananame_22(D));



Registering new PHI nodes in block #10

Updating SSA information for statement pt_24 = pmap_1->pt;

Updating SSA information for statement recv_pt_25 = pmap_1->recv_pt;

Updating SSA information for statement fmtp_26 = pmap_1->rm_fmtp;



Registering new PHI nodes in block #11

Updating SSA information for statement pmap_28 = pmap_1->next;



Registering new PHI nodes in block #13

Updating SSA information for statement D.47085_29 = smh_12->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.47085_29);



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement *ptP_30(D) = pt_2;



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17

Updating SSA information for statement *recv_ptP_31(D) = recv_pt_3;



Registering new PHI nodes in block #18

Updating SSA information for statement D.47099_32 = _zstr (fmtp_5);



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20

Updating SSA information for statement *fmtpP_33(D) = fmtp_5;



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22



Registering new PHI nodes in block #23



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 24
Number of blocks to update: 23 ( 96%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 


Scope blocks after cleanups:

{ Scope block #0 
  struct payload_map_t * pmap;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  switch_payload_t pt;
  switch_payload_t recv_pt;
  int found;
  char * fmtp;
  static const char __PRETTY_FUNCTION__[37] = "switch_core_session_get_payload_code";

}
switch_core_session_get_payload_code (struct switch_core_session_t * session, switch_media_type_t type, const char * iananame, switch_payload_t * ptP, switch_payload_t * recv_ptP, char * * fmtpP)
{
  static const char __PRETTY_FUNCTION__[37] = "switch_core_session_get_payload_code";
  char * fmtp;
  int found;
  switch_payload_t recv_pt;
  switch_payload_t pt;
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  struct payload_map_t * pmap;
  int D.47099;
  int D.47090;
  char * D.47089;
  uint8_t D.47086;
  struct switch_mutex_t * D.47085;
  unsigned int D.47084;
  struct switch_rtp_engine_t[2] * D.47083;
  switch_status_t D.47082;

<bb 2>:
  pt_7 = 0;
  # DEBUG pt => pt_7
  recv_pt_8 = 0;
  # DEBUG recv_pt => recv_pt_8
  found_9 = 0;
  # DEBUG found => found_9
  fmtp_10 = 0B;
  # DEBUG fmtp => fmtp_10
  if (session_11(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 530, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_12 = session_11(D)->media_handle;
  # DEBUG smh => smh_12
  if (smh_12 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47082_13 = 1;
  goto <bb 23>;

<bb 6>:
  D.47083_14 = &smh_12->engines;
  D.47084_16 = type_15(D) * 11416;
  engine_17 = D.47083_14 + D.47084_16;
  # DEBUG engine => engine_17
  D.47085_18 = smh_12->sdp_mutex;
  switch_mutex_lock (D.47085_18);
  pmap_19 = engine_17->payload_map;
  # DEBUG pmap => pmap_19
  goto <bb 12>;

<bb 7>:
  D.47086_20 = pmap_1->allocated;
  if (D.47086_20 == 0)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  // predicted unlikely by continue predictor.
  goto <bb 11>;

<bb 9>:
  D.47089_21 = pmap_1->iananame;
  D.47090_23 = strcasecmp (D.47089_21, iananame_22(D));
  if (D.47090_23 == 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  pt_24 = pmap_1->pt;
  # DEBUG pt => pt_24
  recv_pt_25 = pmap_1->recv_pt;
  # DEBUG recv_pt => recv_pt_25
  fmtp_26 = pmap_1->rm_fmtp;
  # DEBUG fmtp => fmtp_26
  found_27 = found_9 + 1;
  # DEBUG found => found_27
  goto <bb 13>;

<bb 11>:
  pmap_28 = pmap_1->next;
  # DEBUG pmap => pmap_28

<bb 12>:
  # pmap_1 = PHI <pmap_19(6), pmap_28(11)>
  # DEBUG pmap => pmap_1
  if (pmap_1 != 0B)
    goto <bb 7>;
  else
    goto <bb 13>;

<bb 13>:
  # pt_2 = PHI <pt_24(10), pt_7(12)>
  # recv_pt_3 = PHI <recv_pt_25(10), recv_pt_8(12)>
  # found_4 = PHI <found_27(10), found_9(12)>
  # fmtp_5 = PHI <fmtp_26(10), fmtp_10(12)>
  # DEBUG fmtp => fmtp_5
  # DEBUG found => found_4
  # DEBUG recv_pt => recv_pt_3
  # DEBUG pt => pt_2
  D.47085_29 = smh_12->sdp_mutex;
  switch_mutex_unlock (D.47085_29);
  if (found_4 != 0)
    goto <bb 14>;
  else
    goto <bb 22>;

<bb 14>:
  if (ptP_30(D) != 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  *ptP_30(D) = pt_2;

<bb 16>:
  if (recv_ptP_31(D) != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  *recv_ptP_31(D) = recv_pt_3;

<bb 18>:
  D.47099_32 = _zstr (fmtp_5);
  if (D.47099_32 == 0)
    goto <bb 19>;
  else
    goto <bb 21>;

<bb 19>:
  if (fmtpP_33(D) != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  *fmtpP_33(D) = fmtp_5;

<bb 21>:
  D.47082_34 = 0;
  goto <bb 23>;

<bb 22>:
  D.47082_35 = 1;

<bb 23>:
  # D.47082_6 = PHI <D.47082_13(5), D.47082_34(21), D.47082_35(22)>
  return D.47082_6;

}



;; Function switch_core_media_add_payload_map (switch_core_media_add_payload_map)



Renaming block #0



Renaming block #2

Renaming statement exists = 0;

Renaming statement local_pt = 0;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.47002 = 0B;



Renaming block #6

Renaming statement D.47003 = &smh->engines;

Renaming statement D.47004 = type * 11416;

Renaming statement engine = D.47003 + D.47004;

Renaming statement D.47005 = smh->sdp_mutex;

Renaming statement switch_mutex_lock (D.47005);

Renaming statement pmap = engine->payload_map;



Renaming block #20

Renaming statement if (pmap != 0B)



Renaming block #21

Renaming statement D.47031 = pmap->allocated;

Renaming statement if (D.47031 != 0)



Renaming block #7

Renaming statement D.47011 = pmap->iananame;

Renaming statement D.47012 = strcasecmp (name, D.47011);

Renaming statement if (D.47012 == 0)



Renaming block #8

Renaming statement D.47014 = pmap->rate;

Renaming statement if (D.47014 == 0)



Renaming block #9

Renaming statement D.47014 = pmap->rate;

Renaming statement if (D.47014 == rate)



Renaming block #10

Renaming statement D.47016 = pmap->ptime;

Renaming statement if (D.47016 == 0)



Renaming block #11

Renaming statement D.47016 = pmap->ptime;

Renaming statement if (D.47016 == ptime)



Renaming block #12

Renaming statement iftmp.169 = 1;



Renaming block #13

Renaming statement iftmp.169 = 0;



Renaming block #14

Renaming statement exists = iftmp.169;

Renaming statement if (exists != 0)



Renaming block #15

Renaming statement D.47020 = _zstr (fmtp);

Renaming statement if (D.47020 == 0)



Renaming block #16

Renaming statement D.47023 = pmap->rm_fmtp;

Renaming statement D.47024 = _zstr (D.47023);

Renaming statement if (D.47024 == 0)



Renaming block #17

Renaming statement D.47023 = pmap->rm_fmtp;

Renaming statement D.38476 = __builtin_strcmp (D.47023, fmtp);

Renaming statement if (D.38476 != 0)



Renaming block #18

Renaming statement exists = 0;

Renaming statement D.47029 = pmap->pt;

Renaming statement local_pt = (int) D.47029;



Renaming block #19

Renaming statement pmap = pmap->next;



Renaming block #22

Renaming statement if (exists == 0)



Renaming block #23

Renaming statement D.47036 = engine->payload_map;

Renaming statement if (D.47036 != 0B)



Renaming block #24

Renaming statement D.47036 = engine->payload_map;

Renaming statement D.47038 = D.47036->allocated;

Renaming statement if (D.47038 == 0)



Renaming block #25

Renaming statement pmap = engine->payload_map;



Renaming block #26

Renaming statement D.47040 = session->pool;

Renaming statement pmap = switch_core_perform_alloc (D.47040, 84, "src/switch_core_media.c", &__func__, 624);



Renaming block #27

Renaming statement pmap->type = type;

Renaming statement D.47040 = session->pool;

Renaming statement D.47041 = switch_core_perform_strdup (D.47040, name, "src/switch_core_media.c", &__func__, 628);

Renaming statement pmap->iananame = D.47041;

Renaming statement D.47011 = pmap->iananame;

Renaming statement pmap->rm_encoding = D.47011;

Renaming statement D.47011 = pmap->iananame;

Renaming statement D.47042 = switch_ci_hashfunc_default (D.47011, &hlen);

Renaming statement pmap->hash = D.47042;



Renaming block #28

Renaming statement pmap->sdp_type = sdp_type;

Renaming statement if (ptime != 0)



Renaming block #29

Renaming statement pmap->ptime = ptime;



Renaming block #30

Renaming statement if (rate != 0)



Renaming block #31

Renaming statement pmap->rate = rate;



Renaming block #32

Renaming statement D.47049 = _zstr (fmtp);

Renaming statement if (D.47049 == 0)



Renaming block #33

Renaming statement D.47023 = pmap->rm_fmtp;

Renaming statement D.47052 = _zstr (D.47023);

Renaming statement if (D.47052 != 0)



Renaming block #34

Renaming statement D.47023 = pmap->rm_fmtp;

Renaming statement D.38491 = __builtin_strcmp (D.47023, fmtp);

Renaming statement if (D.38491 != 0)



Renaming block #35

Renaming statement D.47040 = session->pool;

Renaming statement D.47054 = switch_core_perform_strdup (D.47040, fmtp, "src/switch_core_media.c", &__func__, 644);

Renaming statement pmap->rm_fmtp = D.47054;



Renaming block #36

Renaming statement pmap->allocated = 1;

Renaming statement D.47055 = (unsigned char) pt;

Renaming statement pmap->recv_pt = D.47055;

Renaming statement D.47056 = sdp_type == 0;

Renaming statement D.47057 = exists == 0;

Renaming statement D.47058 = D.47056 || D.47057;

Renaming statement if (D.47058 != 0)



Renaming block #37

Renaming statement if (local_pt != 0)



Renaming block #38

Renaming statement iftmp.170 = (unsigned char) local_pt;



Renaming block #39

Renaming statement iftmp.170 = (unsigned char) pt;



Renaming block #40

Renaming statement pmap->pt = iftmp.170;



Renaming block #41

Renaming statement if (negotiated != 0)



Renaming block #42

Renaming statement pmap->negotiated = negotiated;



Renaming block #43

Renaming statement if (exists == 0)



Renaming block #44

Renaming statement D.47036 = engine->payload_map;

Renaming statement if (D.47036 == pmap)



Renaming block #45

Renaming statement engine->pmap_tail = pmap;



Renaming block #46

Renaming statement D.47036 = engine->payload_map;

Renaming statement if (D.47036 == 0B)



Renaming block #47

Renaming statement engine->pmap_tail = pmap;

Renaming statement D.47074 = engine->pmap_tail;

Renaming statement engine->payload_map = D.47074;



Renaming block #48

Renaming statement D.47074 = engine->pmap_tail;

Renaming statement D.47074->next = pmap;

Renaming statement D.47074 = engine->pmap_tail;

Renaming statement D.47076 = D.47074->next;

Renaming statement engine->pmap_tail = D.47076;



Renaming block #49

Renaming statement D.47005 = smh->sdp_mutex;

Renaming statement switch_mutex_unlock (D.47005);

Renaming statement D.47002 = pmap;



Renaming block #50

Renaming statement return D.47002;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 589, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_15 = session_14(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.47005_21 = smh_15->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.47005_21);

Updating SSA information for statement pmap_22 = engine_20->payload_map;



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement D.47031_23 = pmap_1->allocated;



Registering new PHI nodes in block #7

Updating SSA information for statement D.47011_24 = pmap_1->iananame;

Updating SSA information for statement D.47012_26 = strcasecmp (name_25(D), D.47011_24);



Registering new PHI nodes in block #8

Updating SSA information for statement D.47014_27 = pmap_1->rate;



Registering new PHI nodes in block #9

Updating SSA information for statement D.47014_28 = pmap_1->rate;



Registering new PHI nodes in block #10

Updating SSA information for statement D.47016_30 = pmap_1->ptime;



Registering new PHI nodes in block #11

Updating SSA information for statement D.47016_31 = pmap_1->ptime;



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement D.47020_37 = _zstr (fmtp_36(D));



Registering new PHI nodes in block #16

Updating SSA information for statement D.47023_38 = pmap_1->rm_fmtp;

Updating SSA information for statement D.47024_39 = _zstr (D.47023_38);



Registering new PHI nodes in block #17

Updating SSA information for statement D.47023_40 = pmap_1->rm_fmtp;

Updating SSA information for statement D.38476_41 = __builtin_strcmp (D.47023_40, fmtp_36(D));



Registering new PHI nodes in block #18

Updating SSA information for statement D.47029_43 = pmap_1->pt;



Registering new PHI nodes in block #19

Updating SSA information for statement pmap_45 = pmap_1->next;



Registering new PHI nodes in block #22



Registering new PHI nodes in block #23

Updating SSA information for statement hlen = -1;

Updating SSA information for statement D.47036_46 = engine_20->payload_map;



Registering new PHI nodes in block #24

Updating SSA information for statement D.47036_47 = engine_20->payload_map;

Updating SSA information for statement D.47038_48 = D.47036_47->allocated;



Registering new PHI nodes in block #25

Updating SSA information for statement pmap_49 = engine_20->payload_map;



Registering new PHI nodes in block #26

Updating SSA information for statement D.47040_50 = session_14(D)->pool;

Updating SSA information for statement pmap_51 = switch_core_perform_alloc (D.47040_50, 84, "src/switch_core_media.c", &__func__, 624);



Registering new PHI nodes in block #27

Updating SSA information for statement pmap_2->type = type_18(D);

Updating SSA information for statement D.47040_52 = session_14(D)->pool;

Updating SSA information for statement D.47041_53 = switch_core_perform_strdup (D.47040_52, name_25(D), "src/switch_core_media.c", &__func__, 628);

Updating SSA information for statement pmap_2->iananame = D.47041_53;

Updating SSA information for statement D.47011_54 = pmap_2->iananame;

Updating SSA information for statement pmap_2->rm_encoding = D.47011_54;

Updating SSA information for statement D.47011_55 = pmap_2->iananame;

Updating SSA information for statement D.47042_56 = switch_ci_hashfunc_default (D.47011_55, &hlen);

Updating SSA information for statement pmap_2->hash = D.47042_56;



Registering new PHI nodes in block #28

Updating SSA information for statement pmap_3->sdp_type = sdp_type_57(D);



Registering new PHI nodes in block #29

Updating SSA information for statement pmap_3->ptime = ptime_32(D);



Registering new PHI nodes in block #30



Registering new PHI nodes in block #31

Updating SSA information for statement pmap_3->rate = rate_29(D);



Registering new PHI nodes in block #32

Updating SSA information for statement D.47049_58 = _zstr (fmtp_36(D));



Registering new PHI nodes in block #33

Updating SSA information for statement D.47023_59 = pmap_3->rm_fmtp;

Updating SSA information for statement D.47052_60 = _zstr (D.47023_59);



Registering new PHI nodes in block #34

Updating SSA information for statement D.47023_61 = pmap_3->rm_fmtp;

Updating SSA information for statement D.38491_62 = __builtin_strcmp (D.47023_61, fmtp_36(D));



Registering new PHI nodes in block #35

Updating SSA information for statement D.47040_63 = session_14(D)->pool;

Updating SSA information for statement D.47054_64 = switch_core_perform_strdup (D.47040_63, fmtp_36(D), "src/switch_core_media.c", &__func__, 644);

Updating SSA information for statement pmap_3->rm_fmtp = D.47054_64;



Registering new PHI nodes in block #36

Updating SSA information for statement pmap_3->allocated = 1;

Updating SSA information for statement pmap_3->recv_pt = D.47055_66;



Registering new PHI nodes in block #37



Registering new PHI nodes in block #38



Registering new PHI nodes in block #39



Registering new PHI nodes in block #40

Updating SSA information for statement pmap_3->pt = iftmp.170_11;



Registering new PHI nodes in block #41



Registering new PHI nodes in block #42

Updating SSA information for statement pmap_3->negotiated = negotiated_72(D);



Registering new PHI nodes in block #43



Registering new PHI nodes in block #44

Updating SSA information for statement D.47036_73 = engine_20->payload_map;



Registering new PHI nodes in block #45

Updating SSA information for statement engine_20->pmap_tail = pmap_3;



Registering new PHI nodes in block #46

Updating SSA information for statement D.47036_74 = engine_20->payload_map;



Registering new PHI nodes in block #47

Updating SSA information for statement engine_20->pmap_tail = pmap_3;

Updating SSA information for statement D.47074_75 = engine_20->pmap_tail;

Updating SSA information for statement engine_20->payload_map = D.47074_75;



Registering new PHI nodes in block #48

Updating SSA information for statement D.47074_76 = engine_20->pmap_tail;

Updating SSA information for statement D.47074_76->next = pmap_3;

Updating SSA information for statement D.47074_77 = engine_20->pmap_tail;

Updating SSA information for statement D.47076_78 = D.47074_77->next;

Updating SSA information for statement engine_20->pmap_tail = D.47076_78;



Registering new PHI nodes in block #49

Updating SSA information for statement D.47005_79 = smh_15->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.47005_79);



Registering new PHI nodes in block #50



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 51
Number of blocks to update: 50 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 


Scope blocks after cleanups:

{ Scope block #0 
  struct payload_map_t * pmap;
  int exists;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  int local_pt;
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_add_payload_map";
  static const char __func__[34] = "switch_core_media_add_payload_map";

  { Scope block #0 
    size_t __s1_len; (unused)
    size_t __s2_len; (unused)

  }

  { Scope block #0 
    switch_ssize_t hlen;

  }

  { Scope block #0 
    size_t __s1_len; (unused)
    size_t __s2_len; (unused)

  }

}
switch_core_media_add_payload_map (struct switch_core_session_t * session, switch_media_type_t type, const char * name, const char * fmtp, switch_sdp_type_t sdp_type, uint32_t pt, uint32_t rate, uint32_t ptime, uint8_t negotiated)
{
  switch_ssize_t hlen;
  static const char __func__[34] = "switch_core_media_add_payload_map";
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_add_payload_map";
  int local_pt;
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  int exists;
  struct payload_map_t * pmap;
  struct payload_map_s * D.47076;
  struct payload_map_t * D.47074;
  unsigned char iftmp.170;
  _Bool D.47058;
  _Bool D.47057;
  _Bool D.47056;
  unsigned char D.47055;
  char * D.47054;
  int D.38491;
  int D.47052;
  int D.47049;
  unsigned int D.47042;
  char * D.47041;
  struct switch_memory_pool_t * D.47040;
  uint8_t D.47038;
  struct payload_map_t * D.47036;
  uint8_t D.47031;
  switch_payload_t D.47029;
  int D.38476;
  int D.47024;
  char * D.47023;
  int D.47020;
  uint32_t D.47016;
  uint32_t D.47014;
  int D.47012;
  char * D.47011;
  int iftmp.169;
  struct switch_mutex_t * D.47005;
  unsigned int D.47004;
  struct switch_rtp_engine_t[2] * D.47003;
  struct payload_map_t * D.47002;

<bb 2>:
  exists_12 = 0;
  # DEBUG exists => exists_12
  local_pt_13 = 0;
  # DEBUG local_pt => local_pt_13
  if (session_14(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 589, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_15 = session_14(D)->media_handle;
  # DEBUG smh => smh_15
  if (smh_15 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47002_16 = 0B;
  goto <bb 50>;

<bb 6>:
  D.47003_17 = &smh_15->engines;
  D.47004_19 = type_18(D) * 11416;
  engine_20 = D.47003_17 + D.47004_19;
  # DEBUG engine => engine_20
  D.47005_21 = smh_15->sdp_mutex;
  switch_mutex_lock (D.47005_21);
  pmap_22 = engine_20->payload_map;
  # DEBUG pmap => pmap_22
  goto <bb 20>;

<bb 7>:
  D.47011_24 = pmap_1->iananame;
  D.47012_26 = strcasecmp (name_25(D), D.47011_24);
  if (D.47012_26 == 0)
    goto <bb 8>;
  else
    goto <bb 13>;

<bb 8>:
  D.47014_27 = pmap_1->rate;
  if (D.47014_27 == 0)
    goto <bb 10>;
  else
    goto <bb 9>;

<bb 9>:
  D.47014_28 = pmap_1->rate;
  if (D.47014_28 == rate_29(D))
    goto <bb 10>;
  else
    goto <bb 13>;

<bb 10>:
  D.47016_30 = pmap_1->ptime;
  if (D.47016_30 == 0)
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:
  D.47016_31 = pmap_1->ptime;
  if (D.47016_31 == ptime_32(D))
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  iftmp.169_33 = 1;
  goto <bb 14>;

<bb 13>:
  iftmp.169_34 = 0;

<bb 14>:
  # iftmp.169_10 = PHI <iftmp.169_33(12), iftmp.169_34(13)>
  exists_35 = iftmp.169_10;
  # DEBUG exists => exists_35
  if (exists_35 != 0)
    goto <bb 15>;
  else
    goto <bb 19>;

<bb 15>:
  D.47020_37 = _zstr (fmtp_36(D));
  if (D.47020_37 == 0)
    goto <bb 16>;
  else
    goto <bb 22>;

<bb 16>:
  D.47023_38 = pmap_1->rm_fmtp;
  D.47024_39 = _zstr (D.47023_38);
  if (D.47024_39 == 0)
    goto <bb 17>;
  else
    goto <bb 22>;

<bb 17>:
  D.47023_40 = pmap_1->rm_fmtp;
  D.38476_41 = __builtin_strcmp (D.47023_40, fmtp_36(D));
  if (D.38476_41 != 0)
    goto <bb 18>;
  else
    goto <bb 22>;

<bb 18>:
  exists_42 = 0;
  # DEBUG exists => exists_42
  D.47029_43 = pmap_1->pt;
  local_pt_44 = (int) D.47029_43;
  # DEBUG local_pt => local_pt_44
  // predicted unlikely by continue predictor.

<bb 19>:
  # exists_4 = PHI <exists_35(14), exists_42(18)>
  # local_pt_7 = PHI <local_pt_8(14), local_pt_44(18)>
  # DEBUG local_pt => local_pt_7
  # DEBUG exists => exists_4
  pmap_45 = pmap_1->next;
  # DEBUG pmap => pmap_45

<bb 20>:
  # pmap_1 = PHI <pmap_22(6), pmap_45(19)>
  # exists_5 = PHI <exists_12(6), exists_4(19)>
  # local_pt_8 = PHI <local_pt_13(6), local_pt_7(19)>
  # DEBUG local_pt => local_pt_8
  # DEBUG exists => exists_5
  # DEBUG pmap => pmap_1
  if (pmap_1 != 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.47031_23 = pmap_1->allocated;
  if (D.47031_23 != 0)
    goto <bb 7>;
  else
    goto <bb 22>;

<bb 22>:
  # exists_6 = PHI <exists_35(16), exists_5(20), exists_5(21), exists_35(15), exists_35(17)>
  # DEBUG exists => exists_6
  if (exists_6 == 0)
    goto <bb 23>;
  else
    goto <bb 28>;

<bb 23>:
  hlen = -1;
  D.47036_46 = engine_20->payload_map;
  if (D.47036_46 != 0B)
    goto <bb 24>;
  else
    goto <bb 26>;

<bb 24>:
  D.47036_47 = engine_20->payload_map;
  D.47038_48 = D.47036_47->allocated;
  if (D.47038_48 == 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  pmap_49 = engine_20->payload_map;
  # DEBUG pmap => pmap_49
  goto <bb 27>;

<bb 26>:
  D.47040_50 = session_14(D)->pool;
  pmap_51 = switch_core_perform_alloc (D.47040_50, 84, "src/switch_core_media.c", &__func__, 624);
  # DEBUG pmap => pmap_51

<bb 27>:
  # pmap_2 = PHI <pmap_49(25), pmap_51(26)>
  # DEBUG pmap => pmap_2
  pmap_2->type = type_18(D);
  D.47040_52 = session_14(D)->pool;
  D.47041_53 = switch_core_perform_strdup (D.47040_52, name_25(D), "src/switch_core_media.c", &__func__, 628);
  pmap_2->iananame = D.47041_53;
  D.47011_54 = pmap_2->iananame;
  pmap_2->rm_encoding = D.47011_54;
  D.47011_55 = pmap_2->iananame;
  D.47042_56 = switch_ci_hashfunc_default (D.47011_55, &hlen);
  pmap_2->hash = D.47042_56;

<bb 28>:
  # pmap_3 = PHI <pmap_1(22), pmap_2(27)>
  # DEBUG pmap => pmap_3
  pmap_3->sdp_type = sdp_type_57(D);
  if (ptime_32(D) != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  pmap_3->ptime = ptime_32(D);

<bb 30>:
  if (rate_29(D) != 0)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  pmap_3->rate = rate_29(D);

<bb 32>:
  D.47049_58 = _zstr (fmtp_36(D));
  if (D.47049_58 == 0)
    goto <bb 33>;
  else
    goto <bb 36>;

<bb 33>:
  D.47023_59 = pmap_3->rm_fmtp;
  D.47052_60 = _zstr (D.47023_59);
  if (D.47052_60 != 0)
    goto <bb 35>;
  else
    goto <bb 34>;

<bb 34>:
  D.47023_61 = pmap_3->rm_fmtp;
  D.38491_62 = __builtin_strcmp (D.47023_61, fmtp_36(D));
  if (D.38491_62 != 0)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  D.47040_63 = session_14(D)->pool;
  D.47054_64 = switch_core_perform_strdup (D.47040_63, fmtp_36(D), "src/switch_core_media.c", &__func__, 644);
  pmap_3->rm_fmtp = D.47054_64;

<bb 36>:
  pmap_3->allocated = 1;
  D.47055_66 = (unsigned char) pt_65(D);
  pmap_3->recv_pt = D.47055_66;
  D.47056_67 = sdp_type_57(D) == 0;
  D.47057_68 = exists_6 == 0;
  D.47058_69 = D.47056_67 || D.47057_68;
  if (D.47058_69 != 0)
    goto <bb 37>;
  else
    goto <bb 41>;

<bb 37>:
  if (local_pt_8 != 0)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  iftmp.170_70 = (unsigned char) local_pt_8;
  goto <bb 40>;

<bb 39>:
  iftmp.170_71 = (unsigned char) pt_65(D);

<bb 40>:
  # iftmp.170_11 = PHI <iftmp.170_70(38), iftmp.170_71(39)>
  pmap_3->pt = iftmp.170_11;

<bb 41>:
  if (negotiated_72(D) != 0)
    goto <bb 42>;
  else
    goto <bb 43>;

<bb 42>:
  pmap_3->negotiated = negotiated_72(D);

<bb 43>:
  if (exists_6 == 0)
    goto <bb 44>;
  else
    goto <bb 49>;

<bb 44>:
  D.47036_73 = engine_20->payload_map;
  if (D.47036_73 == pmap_3)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  engine_20->pmap_tail = pmap_3;
  goto <bb 49>;

<bb 46>:
  D.47036_74 = engine_20->payload_map;
  if (D.47036_74 == 0B)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  engine_20->pmap_tail = pmap_3;
  D.47074_75 = engine_20->pmap_tail;
  engine_20->payload_map = D.47074_75;
  goto <bb 49>;

<bb 48>:
  D.47074_76 = engine_20->pmap_tail;
  D.47074_76->next = pmap_3;
  D.47074_77 = engine_20->pmap_tail;
  D.47076_78 = D.47074_77->next;
  engine_20->pmap_tail = D.47076_78;

<bb 49>:
  D.47005_79 = smh_15->sdp_mutex;
  switch_mutex_unlock (D.47005_79);
  D.47002_80 = pmap_3;

<bb 50>:
  # D.47002_9 = PHI <D.47002_16(5), D.47002_80(49)>
  return D.47002_9;

}



;; Function switch_core_media_set_r_sdp_codec_string (switch_core_media_set_r_sdp_codec_string)



Renaming block #0



Renaming block #2

Renaming statement ptime = 0;

Renaming statement dptime = 0;

Renaming statement match = 0;

Renaming statement num_codecs = 0;

Renaming statement channel = switch_core_session_get_channel (session);

Renaming statement prefer_sdp = 0;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement var = switch_channel_get_variable_dup (channel, "ep_codec_prefer_sdp", 1, -1);

Renaming statement if (var != 0B)



Renaming block #6

Renaming statement D.40412 = switch_true (var);

Renaming statement if (D.40412 != 0)



Renaming block #7

Renaming statement prefer_sdp = 1;



Renaming block #8

Renaming statement D.40415 = _zstr (codec_string);

Renaming statement if (D.40415 == 0)



Renaming block #9

Renaming statement tmp_codec_string = __strdup (codec_string);

Renaming statement if (tmp_codec_string != 0B)



Renaming block #10

Renaming statement D.40420 = switch_separate_string (tmp_codec_string, 44, &codec_order, 50);

Renaming statement num_codecs = (int) D.40420;

Renaming statement num_codecs = switch_loadable_module_get_codecs_sorted (&codecs, 50, &codec_order, num_codecs);

Renaming statement if (tmp_codec_string != 0B)



Renaming block #11

Renaming statement free (tmp_codec_string);

Renaming statement tmp_codec_string = 0B;



Renaming block #12

Renaming statement num_codecs = switch_loadable_module_get_codecs (&codecs, 50);



Renaming block #13

Renaming statement D.40424 = channel == 0B;

Renaming statement D.40425 = num_codecs == 0;

Renaming statement D.40426 = D.40424 || D.40425;

Renaming statement if (D.40426 != 0)



Renaming block #14

Renaming statement attr = sdp->sdp_attributes;



Renaming block #20

Renaming statement if (attr != 0B)



Renaming block #15

Renaming statement D.40429 = attr->a_name;

Renaming statement D.40430 = _zstr (D.40429);

Renaming statement if (D.40430 != 0)



Renaming block #16



Renaming block #17

Renaming statement D.40429 = attr->a_name;

Renaming statement D.40433 = strcasecmp (D.40429, "ptime");

Renaming statement if (D.40433 == 0)



Renaming block #18

Renaming statement D.40436 = attr->a_value;

Renaming statement dptime = atoi (D.40436);



Renaming block #19

Renaming statement attr = attr->a_next;



Renaming block #21

Renaming statement switch_core_media_find_zrtp_hash (session, sdp);

Renaming statement switch_core_media_pass_zrtp_hash (session);

Renaming statement m = sdp->sdp_media;



Renaming block #36

Renaming statement if (m != 0B)



Renaming block #22

Renaming statement ptime = dptime;

Renaming statement D.40437 = m->m_type;

Renaming statement D.40438 = D.40437 + 4294967294;

Renaming statement if (D.40438 <= 1)



Renaming block #23

Renaming statement D.40441 = m->m_port;

Renaming statement if (D.40441 != 0)



Renaming block #24

Renaming statement map = m->m_rtpmaps;



Renaming block #34

Renaming statement if (map != 0B)



Renaming block #25

Renaming statement attr = m->m_attributes;



Renaming block #32

Renaming statement if (attr != 0B)



Renaming block #26

Renaming statement D.40429 = attr->a_name;

Renaming statement D.40444 = _zstr (D.40429);

Renaming statement if (D.40444 != 0)



Renaming block #27



Renaming block #28

Renaming statement D.40429 = attr->a_name;

Renaming statement D.40447 = strcasecmp (D.40429, "ptime");

Renaming statement if (D.40447 == 0)



Renaming block #29

Renaming statement D.40436 = attr->a_value;

Renaming statement if (D.40436 != 0B)



Renaming block #30

Renaming statement D.40436 = attr->a_value;

Renaming statement ptime = atoi (D.40436);



Renaming block #31

Renaming statement attr = attr->a_next;



Renaming block #33

Renaming statement D.40437 = m->m_type;

Renaming statement D.40452 = D.40437 != 2;

Renaming statement D.40453 = map->rm_encoding;

Renaming statement D.40454 = map->rm_fmtp;

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40456 = (uint32_t) D.40455;

Renaming statement D.40457 = map->rm_rate;

Renaming statement ptime.5 = (uint32_t) ptime;

Renaming statement switch_core_media_add_payload_map (session, D.40452, D.40453, D.40454, sdp_type, D.40456, D.40457, ptime.5, 0);

Renaming statement map = map->rm_next;



Renaming block #35

Renaming statement m = m->m_next;



Renaming block #37

Renaming statement m = sdp->sdp_media;



Renaming block #132

Renaming statement if (m != 0B)



Renaming block #38

Renaming statement ptime = dptime;

Renaming statement D.40437 = m->m_type;

Renaming statement if (D.40437 == 8)



Renaming block #39

Renaming statement D.40441 = m->m_port;

Renaming statement if (D.40441 != 0)



Renaming block #40

Renaming statement D.40463 = strlen (&buf);

Renaming statement D.40464 = &buf + D.40463;

Renaming statement D.40465 = strlen (&buf);

Renaming statement D.40466 = 1024 - D.40465;

Renaming statement switch_snprintf (D.40464, D.40466, ",t38");



Renaming block #41

Renaming statement D.40437 = m->m_type;

Renaming statement if (D.40437 == 2)



Renaming block #42

Renaming statement D.40441 = m->m_port;

Renaming statement if (D.40441 != 0)



Renaming block #43

Renaming statement attr = m->m_attributes;



Renaming block #50

Renaming statement if (attr != 0B)



Renaming block #44

Renaming statement D.40429 = attr->a_name;

Renaming statement D.40471 = _zstr (D.40429);

Renaming statement if (D.40471 != 0)



Renaming block #45



Renaming block #46

Renaming statement D.40429 = attr->a_name;

Renaming statement D.40474 = strcasecmp (D.40429, "ptime");

Renaming statement if (D.40474 == 0)



Renaming block #47

Renaming statement D.40436 = attr->a_value;

Renaming statement if (D.40436 != 0B)



Renaming block #48

Renaming statement D.40436 = attr->a_value;

Renaming statement ptime = atoi (D.40436);



Renaming block #49

Renaming statement attr = attr->a_next;



Renaming block #51

Renaming statement connection = sdp->sdp_connection;

Renaming statement D.40479 = m->m_connections;

Renaming statement if (D.40479 != 0B)



Renaming block #52

Renaming statement connection = m->m_connections;



Renaming block #53

Renaming statement if (connection == 0B)



Renaming block #54

Renaming statement D.40484 = switch_channel_get_session (channel);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 8285, D.40484, 3, "Cannot find a c= line in the sdp at media or session level!\n");



Renaming block #55

Renaming statement D.40487 = switch_channel_direction (channel);

Renaming statement if (D.40487 == 0)



Renaming block #56

Renaming statement if (prefer_sdp != 0)



Renaming block #75

Renaming statement i = 0;



Renaming block #96

Renaming statement if (i < num_codecs)



Renaming block #76

Renaming statement imp = codecs[i];

Renaming statement D.40516 = imp->codec_type;

Renaming statement if (D.40516 != 0)



Renaming block #77

Renaming statement D.40518 = imp->ianacode;

Renaming statement D.40519 = (signed char) D.40518;

Renaming statement if (D.40519 < 0)



Renaming block #78

Renaming statement D.40518 = imp->ianacode;

Renaming statement D.40521 = (int) D.40518;

Renaming statement D.40522 = already_did[D.40521];

Renaming statement if (D.40522 != 0)



Renaming block #80

Renaming statement map = m->m_rtpmaps;



Renaming block #94

Renaming statement if (map != 0B)



Renaming block #81

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40491 = (int) D.40455;

Renaming statement if (D.40491 > 127)



Renaming block #82

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40491 = (int) D.40455;

Renaming statement D.40493 = already_did[D.40491];

Renaming statement if (D.40493 != 0)



Renaming block #84

Renaming statement D.40453 = map->rm_encoding;

Renaming statement D.40529 = _zstr (D.40453);

Renaming statement if (D.40529 != 0)



Renaming block #85

Renaming statement D.40499 = smh->mparams;

Renaming statement D.40500 = D.40499->ndlb;

Renaming statement D.40501 = (int) D.40500;

Renaming statement D.40502 = D.40501 & 1;

Renaming statement D.40503 = (_Bool) D.40502;

Renaming statement if (D.40503 != 0)



Renaming block #86

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40491 = (int) D.40455;

Renaming statement if (D.40491 <= 95)



Renaming block #87

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40491 = (int) D.40455;

Renaming statement D.40518 = imp->ianacode;

Renaming statement D.40521 = (int) D.40518;

Renaming statement match = D.40491 == D.40521;



Renaming block #88

Renaming statement D.40453 = map->rm_encoding;

Renaming statement if (D.40453 != 0B)



Renaming block #89

Renaming statement D.40453 = map->rm_encoding;

Renaming statement D.40534 = imp->iananame;

Renaming statement D.40535 = strcasecmp (D.40453, D.40534);

Renaming statement match = D.40535 == 0;



Renaming block #90

Renaming statement match = 0;



Renaming block #91

Renaming statement if (match != 0)



Renaming block #92

Renaming statement add_audio_codec (map, ptime, &buf, 1024);



Renaming block #83



Renaming block #93

Renaming statement map = map->rm_next;



Renaming block #79



Renaming block #95

Renaming statement i = i + 1;



Renaming block #57

Renaming statement map = m->m_rtpmaps;



Renaming block #74

Renaming statement if (map != 0B)



Renaming block #58

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40491 = (int) D.40455;

Renaming statement if (D.40491 > 127)



Renaming block #59

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40491 = (int) D.40455;

Renaming statement D.40493 = already_did[D.40491];

Renaming statement if (D.40493 != 0)



Renaming block #61

Renaming statement i = 0;



Renaming block #72

Renaming statement if (i < num_codecs)



Renaming block #62

Renaming statement imp = codecs[i];

Renaming statement D.40453 = map->rm_encoding;

Renaming statement D.40497 = _zstr (D.40453);

Renaming statement if (D.40497 != 0)



Renaming block #63

Renaming statement D.40499 = smh->mparams;

Renaming statement D.40500 = D.40499->ndlb;

Renaming statement D.40501 = (int) D.40500;

Renaming statement D.40502 = D.40501 & 1;

Renaming statement D.40503 = (_Bool) D.40502;

Renaming statement if (D.40503 != 0)



Renaming block #64

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40491 = (int) D.40455;

Renaming statement if (D.40491 <= 95)



Renaming block #65

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40491 = (int) D.40455;

Renaming statement D.40505 = imp->ianacode;

Renaming statement D.40506 = (int) D.40505;

Renaming statement match = D.40491 == D.40506;



Renaming block #66

Renaming statement D.40453 = map->rm_encoding;

Renaming statement if (D.40453 != 0B)



Renaming block #67

Renaming statement D.40453 = map->rm_encoding;

Renaming statement D.40509 = imp->iananame;

Renaming statement D.40510 = strcasecmp (D.40453, D.40509);

Renaming statement match = D.40510 == 0;



Renaming block #68

Renaming statement match = 0;



Renaming block #69

Renaming statement if (match != 0)



Renaming block #70

Renaming statement add_audio_codec (map, ptime, &buf, 1024);



Renaming block #71

Renaming statement i = i + 1;



Renaming block #60



Renaming block #73

Renaming statement map = map->rm_next;



Renaming block #97

Renaming statement D.40437 = m->m_type;

Renaming statement if (D.40437 == 3)



Renaming block #98

Renaming statement D.40441 = m->m_port;

Renaming statement if (D.40441 != 0)



Renaming block #99

Renaming statement connection = sdp->sdp_connection;

Renaming statement D.40479 = m->m_connections;

Renaming statement if (D.40479 != 0B)



Renaming block #100

Renaming statement connection = m->m_connections;



Renaming block #101

Renaming statement if (connection == 0B)



Renaming block #102

Renaming statement D.40547 = switch_channel_get_session (channel);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 8352, D.40547, 3, "Cannot find a c= line in the sdp at media or session level!\n");



Renaming block #103

Renaming statement i = 0;



Renaming block #130

Renaming statement if (i < num_codecs)



Renaming block #104

Renaming statement imp = codecs[i];

Renaming statement D.40550 = imp->codec_type;

Renaming statement if (D.40550 != 1)



Renaming block #105

Renaming statement D.40552 = imp->ianacode;

Renaming statement D.40553 = (signed char) D.40552;

Renaming statement if (D.40553 < 0)



Renaming block #106

Renaming statement D.40552 = imp->ianacode;

Renaming statement D.40555 = (int) D.40552;

Renaming statement D.40556 = already_did[D.40555];

Renaming statement if (D.40556 != 0)



Renaming block #108

Renaming statement D.40557 = session->channel;

Renaming statement D.40558 = switch_channel_direction (D.40557);

Renaming statement if (D.40558 == 0)



Renaming block #109

Renaming statement D.40557 = session->channel;

Renaming statement D.40561 = switch_channel_test_flag (D.40557, 114);

Renaming statement if (D.40561 != 0)



Renaming block #110



Renaming block #111

Renaming statement map = m->m_rtpmaps;



Renaming block #128

Renaming statement if (map != 0B)



Renaming block #112

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40491 = (int) D.40455;

Renaming statement if (D.40491 > 127)



Renaming block #113

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40491 = (int) D.40455;

Renaming statement D.40493 = already_did[D.40491];

Renaming statement if (D.40493 != 0)



Renaming block #115

Renaming statement D.40453 = map->rm_encoding;

Renaming statement D.40570 = _zstr (D.40453);

Renaming statement if (D.40570 != 0)



Renaming block #116

Renaming statement D.40499 = smh->mparams;

Renaming statement D.40500 = D.40499->ndlb;

Renaming statement D.40501 = (int) D.40500;

Renaming statement D.40502 = D.40501 & 1;

Renaming statement D.40503 = (_Bool) D.40502;

Renaming statement if (D.40503 != 0)



Renaming block #117

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40491 = (int) D.40455;

Renaming statement if (D.40491 <= 95)



Renaming block #118

Renaming statement D.40455 = map->rm_pt;

Renaming statement D.40491 = (int) D.40455;

Renaming statement D.40552 = imp->ianacode;

Renaming statement D.40555 = (int) D.40552;

Renaming statement match = D.40491 == D.40555;



Renaming block #119

Renaming statement D.40453 = map->rm_encoding;

Renaming statement if (D.40453 != 0B)



Renaming block #120

Renaming statement D.40453 = map->rm_encoding;

Renaming statement D.40575 = imp->iananame;

Renaming statement D.40576 = strcasecmp (D.40453, D.40575);

Renaming statement match = D.40576 == 0;



Renaming block #121

Renaming statement match = 0;



Renaming block #122

Renaming statement if (match != 0)



Renaming block #123

Renaming statement if (ptime > 0)



Renaming block #124

Renaming statement D.40582 = strlen (&buf);

Renaming statement D.40583 = &buf + D.40582;

Renaming statement D.40584 = strlen (&buf);

Renaming statement D.40585 = 1024 - D.40584;

Renaming statement D.40575 = imp->iananame;

Renaming statement D.40457 = map->rm_rate;

Renaming statement switch_snprintf (D.40583, D.40585, ",%s@%uh@%di", D.40575, D.40457, ptime);



Renaming block #125

Renaming statement D.40587 = strlen (&buf);

Renaming statement D.40588 = &buf + D.40587;

Renaming statement D.40589 = strlen (&buf);

Renaming statement D.40590 = 1024 - D.40589;

Renaming statement D.40575 = imp->iananame;

Renaming statement D.40457 = map->rm_rate;

Renaming statement switch_snprintf (D.40588, D.40590, ",%s@%uh", D.40575, D.40457);



Renaming block #126

Renaming statement D.40552 = imp->ianacode;

Renaming statement D.40555 = (int) D.40552;

Renaming statement already_did[D.40555] = 1;



Renaming block #114



Renaming block #127

Renaming statement map = map->rm_next;



Renaming block #107



Renaming block #129

Renaming statement i = i + 1;



Renaming block #131

Renaming statement m = m->m_next;



Renaming block #133

Renaming statement D.40591 = buf[0];

Renaming statement if (D.40591 == 44)



Renaming block #134

Renaming statement switch_channel_set_variable_var_check (channel, "ep_codec_string", &buf[1], 1);



Renaming block #135



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement buf = {};

Updating SSA information for statement already_did = {};

Updating SSA information for statement codecs = {};

Updating SSA information for statement channel_29 = switch_core_session_get_channel (session_28(D));



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8198, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_31 = session_28(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement var_32 = switch_channel_get_variable_dup (channel_29, "ep_codec_prefer_sdp", 1, -1);



Registering new PHI nodes in block #6

Updating SSA information for statement D.40412_33 = switch_true (var_32);



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8

Updating SSA information for statement D.40415_36 = _zstr (codec_string_35(D));



Registering new PHI nodes in block #9

Updating SSA information for statement tmp_codec_string_37 = __strdup (codec_string_35(D));



Registering new PHI nodes in block #10

Updating SSA information for statement D.40420_38 = switch_separate_string (tmp_codec_string_37, 44, &codec_order, 50);

Updating SSA information for statement num_codecs_40 = switch_loadable_module_get_codecs_sorted (&codecs, 50, &codec_order, num_codecs_39);



Registering new PHI nodes in block #11

Updating SSA information for statement free (tmp_codec_string_37);



Registering new PHI nodes in block #12

Updating SSA information for statement num_codecs_42 = switch_loadable_module_get_codecs (&codecs, 50);



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement attr_47 = sdp_46(D)->sdp_attributes;



Registering new PHI nodes in block #20



Registering new PHI nodes in block #15

Updating SSA information for statement D.40429_48 = attr_3->a_name;

Updating SSA information for statement D.40430_49 = _zstr (D.40429_48);



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17

Updating SSA information for statement D.40429_50 = attr_3->a_name;

Updating SSA information for statement D.40433_51 = strcasecmp (D.40429_50, "ptime");



Registering new PHI nodes in block #18

Updating SSA information for statement D.40436_52 = attr_3->a_value;

Updating SSA information for statement dptime_53 = atoi (D.40436_52);



Registering new PHI nodes in block #19

Updating SSA information for statement attr_54 = attr_3->a_next;



Registering new PHI nodes in block #21

Updating SSA information for statement switch_core_media_find_zrtp_hash (session_28(D), sdp_46(D));

Updating SSA information for statement switch_core_media_pass_zrtp_hash (session_28(D));

Updating SSA information for statement m_55 = sdp_46(D)->sdp_media;



Registering new PHI nodes in block #36



Registering new PHI nodes in block #22

Updating SSA information for statement D.40437_57 = m_1->m_type;



Registering new PHI nodes in block #23

Updating SSA information for statement D.40441_59 = m_1->m_port;



Registering new PHI nodes in block #24

Updating SSA information for statement map_60 = m_1->m_rtpmaps;



Registering new PHI nodes in block #34



Registering new PHI nodes in block #25

Updating SSA information for statement attr_61 = m_1->m_attributes;



Registering new PHI nodes in block #32



Registering new PHI nodes in block #26

Updating SSA information for statement D.40429_62 = attr_4->a_name;

Updating SSA information for statement D.40444_63 = _zstr (D.40429_62);



Registering new PHI nodes in block #27



Registering new PHI nodes in block #28

Updating SSA information for statement D.40429_64 = attr_4->a_name;

Updating SSA information for statement D.40447_65 = strcasecmp (D.40429_64, "ptime");



Registering new PHI nodes in block #29

Updating SSA information for statement D.40436_66 = attr_4->a_value;



Registering new PHI nodes in block #30

Updating SSA information for statement D.40436_67 = attr_4->a_value;

Updating SSA information for statement ptime_68 = atoi (D.40436_67);



Registering new PHI nodes in block #31

Updating SSA information for statement attr_69 = attr_4->a_next;



Registering new PHI nodes in block #33

Updating SSA information for statement D.40437_70 = m_1->m_type;

Updating SSA information for statement D.40453_72 = map_12->rm_encoding;

Updating SSA information for statement D.40454_73 = map_12->rm_fmtp;

Updating SSA information for statement D.40455_74 = map_12->rm_pt;

Updating SSA information for statement D.40457_76 = map_12->rm_rate;

Updating SSA information for statement switch_core_media_add_payload_map (session_28(D), D.40452_71, D.40453_72, D.40454_73, sdp_type_78(D), D.40456_75, D.40457_76, ptime.5_77, 0);

Updating SSA information for statement map_79 = map_12->rm_next;



Registering new PHI nodes in block #35

Updating SSA information for statement m_80 = m_1->m_next;



Registering new PHI nodes in block #37

Updating SSA information for statement m_81 = sdp_46(D)->sdp_media;



Registering new PHI nodes in block #132



Registering new PHI nodes in block #38

Updating SSA information for statement D.40437_83 = m_2->m_type;



Registering new PHI nodes in block #39

Updating SSA information for statement D.40441_84 = m_2->m_port;



Registering new PHI nodes in block #40

Updating SSA information for statement D.40463_85 = strlen (&buf);

Updating SSA information for statement D.40465_87 = strlen (&buf);

Updating SSA information for statement switch_snprintf (D.40464_86, D.40466_88, ",t38");



Registering new PHI nodes in block #41

Updating SSA information for statement D.40437_89 = m_2->m_type;



Registering new PHI nodes in block #42

Updating SSA information for statement D.40441_90 = m_2->m_port;



Registering new PHI nodes in block #43

Updating SSA information for statement attr_91 = m_2->m_attributes;



Registering new PHI nodes in block #50



Registering new PHI nodes in block #44

Updating SSA information for statement D.40429_92 = attr_5->a_name;

Updating SSA information for statement D.40471_93 = _zstr (D.40429_92);



Registering new PHI nodes in block #45



Registering new PHI nodes in block #46

Updating SSA information for statement D.40429_94 = attr_5->a_name;

Updating SSA information for statement D.40474_95 = strcasecmp (D.40429_94, "ptime");



Registering new PHI nodes in block #47

Updating SSA information for statement D.40436_96 = attr_5->a_value;



Registering new PHI nodes in block #48

Updating SSA information for statement D.40436_97 = attr_5->a_value;

Updating SSA information for statement ptime_98 = atoi (D.40436_97);



Registering new PHI nodes in block #49

Updating SSA information for statement attr_99 = attr_5->a_next;



Registering new PHI nodes in block #51

Updating SSA information for statement connection_100 = sdp_46(D)->sdp_connection;

Updating SSA information for statement D.40479_101 = m_2->m_connections;



Registering new PHI nodes in block #52

Updating SSA information for statement connection_102 = m_2->m_connections;



Registering new PHI nodes in block #53



Registering new PHI nodes in block #54

Updating SSA information for statement D.40484_103 = switch_channel_get_session (channel_29);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 8285, D.40484_103, 3, "Cannot find a c= line in the sdp at media or session level!\n");



Registering new PHI nodes in block #55

Updating SSA information for statement D.40487_104 = switch_channel_direction (channel_29);



Registering new PHI nodes in block #56



Registering new PHI nodes in block #75



Registering new PHI nodes in block #96



Registering new PHI nodes in block #76

Updating SSA information for statement imp_106 = codecs[i_20];

Updating SSA information for statement D.40516_107 = imp_106->codec_type;



Registering new PHI nodes in block #77

Updating SSA information for statement D.40518_108 = imp_106->ianacode;



Registering new PHI nodes in block #78

Updating SSA information for statement D.40518_110 = imp_106->ianacode;

Updating SSA information for statement D.40522_112 = already_did[D.40521_111];



Registering new PHI nodes in block #80

Updating SSA information for statement map_113 = m_2->m_rtpmaps;



Registering new PHI nodes in block #94



Registering new PHI nodes in block #81

Updating SSA information for statement D.40455_114 = map_14->rm_pt;



Registering new PHI nodes in block #82

Updating SSA information for statement D.40455_116 = map_14->rm_pt;

Updating SSA information for statement D.40493_118 = already_did[D.40491_117];



Registering new PHI nodes in block #84

Updating SSA information for statement D.40453_119 = map_14->rm_encoding;

Updating SSA information for statement D.40529_120 = _zstr (D.40453_119);



Registering new PHI nodes in block #85

Updating SSA information for statement D.40499_121 = smh_31->mparams;

Updating SSA information for statement D.40500_122 = D.40499_121->ndlb;



Registering new PHI nodes in block #86

Updating SSA information for statement D.40455_126 = map_14->rm_pt;



Registering new PHI nodes in block #87

Updating SSA information for statement D.40455_128 = map_14->rm_pt;

Updating SSA information for statement D.40518_130 = imp_106->ianacode;



Registering new PHI nodes in block #88

Updating SSA information for statement D.40453_133 = map_14->rm_encoding;



Registering new PHI nodes in block #89

Updating SSA information for statement D.40453_134 = map_14->rm_encoding;

Updating SSA information for statement D.40534_135 = imp_106->iananame;

Updating SSA information for statement D.40535_136 = strcasecmp (D.40453_134, D.40534_135);



Registering new PHI nodes in block #90



Registering new PHI nodes in block #91



Registering new PHI nodes in block #92

Updating SSA information for statement add_audio_codec (map_14, ptime_8, &buf, 1024);



Registering new PHI nodes in block #83



Registering new PHI nodes in block #93

Updating SSA information for statement map_139 = map_14->rm_next;



Registering new PHI nodes in block #79



Registering new PHI nodes in block #95



Registering new PHI nodes in block #57

Updating SSA information for statement map_141 = m_2->m_rtpmaps;



Registering new PHI nodes in block #74



Registering new PHI nodes in block #58

Updating SSA information for statement D.40455_142 = map_13->rm_pt;



Registering new PHI nodes in block #59

Updating SSA information for statement D.40455_144 = map_13->rm_pt;

Updating SSA information for statement D.40493_146 = already_did[D.40491_145];



Registering new PHI nodes in block #61



Registering new PHI nodes in block #72



Registering new PHI nodes in block #62

Updating SSA information for statement imp_148 = codecs[i_19];

Updating SSA information for statement D.40453_149 = map_13->rm_encoding;

Updating SSA information for statement D.40497_150 = _zstr (D.40453_149);



Registering new PHI nodes in block #63

Updating SSA information for statement D.40499_151 = smh_31->mparams;

Updating SSA information for statement D.40500_152 = D.40499_151->ndlb;



Registering new PHI nodes in block #64

Updating SSA information for statement D.40455_156 = map_13->rm_pt;



Registering new PHI nodes in block #65

Updating SSA information for statement D.40455_158 = map_13->rm_pt;

Updating SSA information for statement D.40505_160 = imp_148->ianacode;



Registering new PHI nodes in block #66

Updating SSA information for statement D.40453_163 = map_13->rm_encoding;



Registering new PHI nodes in block #67

Updating SSA information for statement D.40453_164 = map_13->rm_encoding;

Updating SSA information for statement D.40509_165 = imp_148->iananame;

Updating SSA information for statement D.40510_166 = strcasecmp (D.40453_164, D.40509_165);



Registering new PHI nodes in block #68



Registering new PHI nodes in block #69



Registering new PHI nodes in block #70

Updating SSA information for statement add_audio_codec (map_13, ptime_8, &buf, 1024);



Registering new PHI nodes in block #71



Registering new PHI nodes in block #60



Registering new PHI nodes in block #73

Updating SSA information for statement map_170 = map_13->rm_next;



Registering new PHI nodes in block #97

Updating SSA information for statement D.40437_171 = m_2->m_type;



Registering new PHI nodes in block #98

Updating SSA information for statement D.40441_172 = m_2->m_port;



Registering new PHI nodes in block #99

Updating SSA information for statement connection_173 = sdp_46(D)->sdp_connection;

Updating SSA information for statement D.40479_174 = m_2->m_connections;



Registering new PHI nodes in block #100

Updating SSA information for statement connection_175 = m_2->m_connections;



Registering new PHI nodes in block #101



Registering new PHI nodes in block #102

Updating SSA information for statement D.40547_176 = switch_channel_get_session (channel_29);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 8352, D.40547_176, 3, "Cannot find a c= line in the sdp at media or session level!\n");



Registering new PHI nodes in block #103



Registering new PHI nodes in block #130



Registering new PHI nodes in block #104

Updating SSA information for statement imp_178 = codecs[i_21];

Updating SSA information for statement D.40550_179 = imp_178->codec_type;



Registering new PHI nodes in block #105

Updating SSA information for statement D.40552_180 = imp_178->ianacode;



Registering new PHI nodes in block #106

Updating SSA information for statement D.40552_182 = imp_178->ianacode;

Updating SSA information for statement D.40556_184 = already_did[D.40555_183];



Registering new PHI nodes in block #108

Updating SSA information for statement D.40557_185 = session_28(D)->channel;

Updating SSA information for statement D.40558_186 = switch_channel_direction (D.40557_185);



Registering new PHI nodes in block #109

Updating SSA information for statement D.40557_187 = session_28(D)->channel;

Updating SSA information for statement D.40561_188 = switch_channel_test_flag (D.40557_187, 114);



Registering new PHI nodes in block #110



Registering new PHI nodes in block #111

Updating SSA information for statement map_189 = m_2->m_rtpmaps;



Registering new PHI nodes in block #128



Registering new PHI nodes in block #112

Updating SSA information for statement D.40455_190 = map_15->rm_pt;



Registering new PHI nodes in block #113

Updating SSA information for statement D.40455_192 = map_15->rm_pt;

Updating SSA information for statement D.40493_194 = already_did[D.40491_193];



Registering new PHI nodes in block #115

Updating SSA information for statement D.40453_195 = map_15->rm_encoding;

Updating SSA information for statement D.40570_196 = _zstr (D.40453_195);



Registering new PHI nodes in block #116

Updating SSA information for statement D.40499_197 = smh_31->mparams;

Updating SSA information for statement D.40500_198 = D.40499_197->ndlb;



Registering new PHI nodes in block #117

Updating SSA information for statement D.40455_202 = map_15->rm_pt;



Registering new PHI nodes in block #118

Updating SSA information for statement D.40455_204 = map_15->rm_pt;

Updating SSA information for statement D.40552_206 = imp_178->ianacode;



Registering new PHI nodes in block #119

Updating SSA information for statement D.40453_209 = map_15->rm_encoding;



Registering new PHI nodes in block #120

Updating SSA information for statement D.40453_210 = map_15->rm_encoding;

Updating SSA information for statement D.40575_211 = imp_178->iananame;

Updating SSA information for statement D.40576_212 = strcasecmp (D.40453_210, D.40575_211);



Registering new PHI nodes in block #121



Registering new PHI nodes in block #122



Registering new PHI nodes in block #123



Registering new PHI nodes in block #124

Updating SSA information for statement D.40582_215 = strlen (&buf);

Updating SSA information for statement D.40584_217 = strlen (&buf);

Updating SSA information for statement D.40575_219 = imp_178->iananame;

Updating SSA information for statement D.40457_220 = map_15->rm_rate;

Updating SSA information for statement switch_snprintf (D.40583_216, D.40585_218, ",%s@%uh@%di", D.40575_219, D.40457_220, ptime_82);



Registering new PHI nodes in block #125

Updating SSA information for statement D.40587_221 = strlen (&buf);

Updating SSA information for statement D.40589_223 = strlen (&buf);

Updating SSA information for statement D.40575_225 = imp_178->iananame;

Updating SSA information for statement D.40457_226 = map_15->rm_rate;

Updating SSA information for statement switch_snprintf (D.40588_222, D.40590_224, ",%s@%uh", D.40575_225, D.40457_226);



Registering new PHI nodes in block #126

Updating SSA information for statement D.40552_227 = imp_178->ianacode;

Updating SSA information for statement already_did[D.40555_228] = 1;



Registering new PHI nodes in block #114



Registering new PHI nodes in block #127

Updating SSA information for statement map_229 = map_15->rm_next;



Registering new PHI nodes in block #107



Registering new PHI nodes in block #129



Registering new PHI nodes in block #131

Updating SSA information for statement m_231 = m_2->m_next;



Registering new PHI nodes in block #133

Updating SSA information for statement D.40591_232 = buf[0];



Registering new PHI nodes in block #134

Updating SSA information for statement switch_channel_set_variable_var_check (channel_29, "ep_codec_string", &buf[1], 1);



Registering new PHI nodes in block #135



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 136
Number of blocks to update: 135 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 


Scope blocks after cleanups:

{ Scope block #0 
  char buf[1024];
  struct sdp_media_t * m;
  struct sdp_attribute_t * attr;
  int ptime;
  int dptime;
  struct sdp_connection_t * connection;
  struct sdp_rtpmap_t * map;
  short int match;
  int i;
  int already_did[128];
  int num_codecs;
  char * codec_order[50];
  const struct switch_codec_implementation_t * codecs[50];
  struct switch_channel_t * channel;
  int prefer_sdp;
  const char * var;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[41] = "switch_core_media_set_r_sdp_codec_string";
  static const char __func__[41] = "switch_core_media_set_r_sdp_codec_string";

  { Scope block #0 
    char * tmp_codec_string;

  }

  { Scope block #0 
    const struct switch_codec_implementation_t * imp;

  }

  { Scope block #0 
    const struct switch_codec_implementation_t * imp;

  }

  { Scope block #0 
    const struct switch_codec_implementation_t * imp;

  }

}
switch_core_media_set_r_sdp_codec_string (struct switch_core_session_t * session, const char * codec_string, struct sdp_session_t * sdp, switch_sdp_type_t sdp_type)
{
  const struct switch_codec_implementation_t * imp;
  const struct switch_codec_implementation_t * imp;
  const struct switch_codec_implementation_t * imp;
  char * tmp_codec_string;
  static const char __func__[41] = "switch_core_media_set_r_sdp_codec_string";
  static const char __PRETTY_FUNCTION__[41] = "switch_core_media_set_r_sdp_codec_string";
  struct switch_media_handle_t * smh;
  const char * var;
  int prefer_sdp;
  struct switch_channel_t * channel;
  const struct switch_codec_implementation_t * codecs[50];
  char * codec_order[50];
  int num_codecs;
  int already_did[128];
  int i;
  short int match;
  struct sdp_rtpmap_t * map;
  struct sdp_connection_t * connection;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  char buf[1024];
  char D.40591;
  unsigned int D.40590;
  size_t D.40589;
  char * D.40588;
  size_t D.40587;
  unsigned int D.40585;
  size_t D.40584;
  char * D.40583;
  size_t D.40582;
  int D.40576;
  char * const D.40575;
  int D.40570;
  uint32_t D.40561;
  switch_call_direction_t D.40558;
  struct switch_channel_t * D.40557;
  int D.40556;
  int D.40555;
  signed char D.40553;
  const switch_payload_t D.40552;
  const switch_codec_type_t D.40550;
  struct switch_core_session_t * D.40547;
  int D.40535;
  char * const D.40534;
  int D.40529;
  int D.40522;
  int D.40521;
  signed char D.40519;
  const switch_payload_t D.40518;
  const switch_codec_type_t D.40516;
  int D.40510;
  char * const D.40509;
  int D.40506;
  const switch_payload_t D.40505;
  _Bool D.40503;
  int D.40502;
  int D.40501;
  switch_core_media_NDLB_t D.40500;
  struct switch_core_media_params_t * D.40499;
  int D.40497;
  int D.40493;
  int D.40491;
  switch_call_direction_t D.40487;
  struct switch_core_session_t * D.40484;
  struct sdp_connection_t * D.40479;
  int D.40474;
  int D.40471;
  unsigned int D.40466;
  size_t D.40465;
  char * D.40464;
  size_t D.40463;
  uint32_t ptime.5;
  long unsigned int D.40457;
  uint32_t D.40456;
  <unnamed-unsigned:7> D.40455;
  const char * D.40454;
  const char * D.40453;
  switch_media_type_t D.40452;
  int D.40447;
  int D.40444;
  long unsigned int D.40441;
  unsigned int D.40438;
  sdp_media_e D.40437;
  const char * D.40436;
  int D.40433;
  int D.40430;
  const char * D.40429;
  _Bool D.40426;
  _Bool D.40425;
  _Bool D.40424;
  unsigned int D.40420;
  int D.40415;
  int D.40412;

<bb 2>:
  buf = {};
  ptime_24 = 0;
  # DEBUG ptime => ptime_24
  dptime_25 = 0;
  # DEBUG dptime => dptime_25
  match_26 = 0;
  # DEBUG match => match_26
  already_did = {};
  num_codecs_27 = 0;
  # DEBUG num_codecs => num_codecs_27
  codecs = {};
  channel_29 = switch_core_session_get_channel (session_28(D));
  # DEBUG channel => channel_29
  prefer_sdp_30 = 0;
  # DEBUG prefer_sdp => prefer_sdp_30
  if (session_28(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8198, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_31 = session_28(D)->media_handle;
  # DEBUG smh => smh_31
  if (smh_31 == 0B)
    goto <bb 135>;
  else
    goto <bb 5>;

<bb 5>:
  var_32 = switch_channel_get_variable_dup (channel_29, "ep_codec_prefer_sdp", 1, -1);
  # DEBUG var => var_32
  if (var_32 != 0B)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  D.40412_33 = switch_true (var_32);
  if (D.40412_33 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  prefer_sdp_34 = 1;
  # DEBUG prefer_sdp => prefer_sdp_34

<bb 8>:
  # prefer_sdp_23 = PHI <prefer_sdp_30(5), prefer_sdp_30(6), prefer_sdp_34(7)>
  # DEBUG prefer_sdp => prefer_sdp_23
  D.40415_36 = _zstr (codec_string_35(D));
  if (D.40415_36 == 0)
    goto <bb 9>;
  else
    goto <bb 12>;

<bb 9>:
  tmp_codec_string_37 = __strdup (codec_string_35(D));
  # DEBUG tmp_codec_string => tmp_codec_string_37
  if (tmp_codec_string_37 != 0B)
    goto <bb 10>;
  else
    goto <bb 13>;

<bb 10>:
  D.40420_38 = switch_separate_string (tmp_codec_string_37, 44, &codec_order, 50);
  num_codecs_39 = (int) D.40420_38;
  # DEBUG num_codecs => num_codecs_39
  num_codecs_40 = switch_loadable_module_get_codecs_sorted (&codecs, 50, &codec_order, num_codecs_39);
  # DEBUG num_codecs => num_codecs_40
  if (tmp_codec_string_37 != 0B)
    goto <bb 11>;
  else
    goto <bb 13>;

<bb 11>:
  free (tmp_codec_string_37);
  tmp_codec_string_41 = 0B;
  # DEBUG tmp_codec_string => tmp_codec_string_41
  goto <bb 13>;

<bb 12>:
  num_codecs_42 = switch_loadable_module_get_codecs (&codecs, 50);
  # DEBUG num_codecs => num_codecs_42

<bb 13>:
  # num_codecs_22 = PHI <num_codecs_40(10), num_codecs_42(12), num_codecs_27(9), num_codecs_40(11)>
  # DEBUG num_codecs => num_codecs_22
  D.40424_43 = channel_29 == 0B;
  D.40425_44 = num_codecs_22 == 0;
  D.40426_45 = D.40424_43 || D.40425_44;
  if (D.40426_45 != 0)
    goto <bb 135>;
  else
    goto <bb 14>;

<bb 14>:
  attr_47 = sdp_46(D)->sdp_attributes;
  # DEBUG attr => attr_47
  goto <bb 20>;

<bb 15>:
  D.40429_48 = attr_3->a_name;
  D.40430_49 = _zstr (D.40429_48);
  if (D.40430_49 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  // predicted unlikely by continue predictor.
  goto <bb 19>;

<bb 17>:
  D.40429_50 = attr_3->a_name;
  D.40433_51 = strcasecmp (D.40429_50, "ptime");
  if (D.40433_51 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.40436_52 = attr_3->a_value;
  dptime_53 = atoi (D.40436_52);
  # DEBUG dptime => dptime_53
  goto <bb 21>;

<bb 19>:
  attr_54 = attr_3->a_next;
  # DEBUG attr => attr_54

<bb 20>:
  # attr_3 = PHI <attr_47(14), attr_54(19)>
  # DEBUG attr => attr_3
  if (attr_3 != 0B)
    goto <bb 15>;
  else
    goto <bb 21>;

<bb 21>:
  # dptime_9 = PHI <dptime_53(18), dptime_25(20)>
  # DEBUG dptime => dptime_9
  switch_core_media_find_zrtp_hash (session_28(D), sdp_46(D));
  switch_core_media_pass_zrtp_hash (session_28(D));
  m_55 = sdp_46(D)->sdp_media;
  # DEBUG m => m_55
  goto <bb 36>;

<bb 22>:
  ptime_56 = dptime_9;
  # DEBUG ptime => ptime_56
  D.40437_57 = m_1->m_type;
  D.40438_58 = D.40437_57 + 4294967294;
  if (D.40438_58 <= 1)
    goto <bb 23>;
  else
    goto <bb 35>;

<bb 23>:
  D.40441_59 = m_1->m_port;
  if (D.40441_59 != 0)
    goto <bb 24>;
  else
    goto <bb 35>;

<bb 24>:
  map_60 = m_1->m_rtpmaps;
  # DEBUG map => map_60
  goto <bb 34>;

<bb 25>:
  attr_61 = m_1->m_attributes;
  # DEBUG attr => attr_61
  goto <bb 32>;

<bb 26>:
  D.40429_62 = attr_4->a_name;
  D.40444_63 = _zstr (D.40429_62);
  if (D.40444_63 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  // predicted unlikely by continue predictor.
  goto <bb 31>;

<bb 28>:
  D.40429_64 = attr_4->a_name;
  D.40447_65 = strcasecmp (D.40429_64, "ptime");
  if (D.40447_65 == 0)
    goto <bb 29>;
  else
    goto <bb 31>;

<bb 29>:
  D.40436_66 = attr_4->a_value;
  if (D.40436_66 != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  D.40436_67 = attr_4->a_value;
  ptime_68 = atoi (D.40436_67);
  # DEBUG ptime => ptime_68
  goto <bb 33>;

<bb 31>:
  attr_69 = attr_4->a_next;
  # DEBUG attr => attr_69

<bb 32>:
  # attr_4 = PHI <attr_61(25), attr_69(31)>
  # DEBUG attr => attr_4
  if (attr_4 != 0B)
    goto <bb 26>;
  else
    goto <bb 33>;

<bb 33>:
  # ptime_6 = PHI <ptime_68(30), ptime_7(32)>
  # DEBUG ptime => ptime_6
  D.40437_70 = m_1->m_type;
  D.40452_71 = D.40437_70 != 2;
  D.40453_72 = map_12->rm_encoding;
  D.40454_73 = map_12->rm_fmtp;
  D.40455_74 = map_12->rm_pt;
  D.40456_75 = (uint32_t) D.40455_74;
  D.40457_76 = map_12->rm_rate;
  ptime.5_77 = (uint32_t) ptime_6;
  switch_core_media_add_payload_map (session_28(D), D.40452_71, D.40453_72, D.40454_73, sdp_type_78(D), D.40456_75, D.40457_76, ptime.5_77, 0);
  map_79 = map_12->rm_next;
  # DEBUG map => map_79

<bb 34>:
  # ptime_7 = PHI <ptime_56(24), ptime_6(33)>
  # map_12 = PHI <map_60(24), map_79(33)>
  # DEBUG map => map_12
  # DEBUG ptime => ptime_7
  if (map_12 != 0B)
    goto <bb 25>;
  else
    goto <bb 35>;

<bb 35>:
  m_80 = m_1->m_next;
  # DEBUG m => m_80

<bb 36>:
  # m_1 = PHI <m_55(21), m_80(35)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 22>;
  else
    goto <bb 37>;

<bb 37>:
  m_81 = sdp_46(D)->sdp_media;
  # DEBUG m => m_81
  goto <bb 132>;

<bb 38>:
  ptime_82 = dptime_9;
  # DEBUG ptime => ptime_82
  D.40437_83 = m_2->m_type;
  if (D.40437_83 == 8)
    goto <bb 39>;
  else
    goto <bb 41>;

<bb 39>:
  D.40441_84 = m_2->m_port;
  if (D.40441_84 != 0)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:
  D.40463_85 = strlen (&buf);
  D.40464_86 = &buf + D.40463_85;
  D.40465_87 = strlen (&buf);
  D.40466_88 = 1024 - D.40465_87;
  switch_snprintf (D.40464_86, D.40466_88, ",t38");
  goto <bb 131>;

<bb 41>:
  D.40437_89 = m_2->m_type;
  if (D.40437_89 == 2)
    goto <bb 42>;
  else
    goto <bb 97>;

<bb 42>:
  D.40441_90 = m_2->m_port;
  if (D.40441_90 != 0)
    goto <bb 43>;
  else
    goto <bb 97>;

<bb 43>:
  attr_91 = m_2->m_attributes;
  # DEBUG attr => attr_91
  goto <bb 50>;

<bb 44>:
  D.40429_92 = attr_5->a_name;
  D.40471_93 = _zstr (D.40429_92);
  if (D.40471_93 != 0)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  // predicted unlikely by continue predictor.
  goto <bb 49>;

<bb 46>:
  D.40429_94 = attr_5->a_name;
  D.40474_95 = strcasecmp (D.40429_94, "ptime");
  if (D.40474_95 == 0)
    goto <bb 47>;
  else
    goto <bb 49>;

<bb 47>:
  D.40436_96 = attr_5->a_value;
  if (D.40436_96 != 0B)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  D.40436_97 = attr_5->a_value;
  ptime_98 = atoi (D.40436_97);
  # DEBUG ptime => ptime_98
  goto <bb 51>;

<bb 49>:
  attr_99 = attr_5->a_next;
  # DEBUG attr => attr_99

<bb 50>:
  # attr_5 = PHI <attr_91(43), attr_99(49)>
  # DEBUG attr => attr_5
  if (attr_5 != 0B)
    goto <bb 44>;
  else
    goto <bb 51>;

<bb 51>:
  # ptime_8 = PHI <ptime_98(48), ptime_82(50)>
  # DEBUG ptime => ptime_8
  connection_100 = sdp_46(D)->sdp_connection;
  # DEBUG connection => connection_100
  D.40479_101 = m_2->m_connections;
  if (D.40479_101 != 0B)
    goto <bb 52>;
  else
    goto <bb 53>;

<bb 52>:
  connection_102 = m_2->m_connections;
  # DEBUG connection => connection_102

<bb 53>:
  # connection_10 = PHI <connection_100(51), connection_102(52)>
  # DEBUG connection => connection_10
  if (connection_10 == 0B)
    goto <bb 54>;
  else
    goto <bb 55>;

<bb 54>:
  D.40484_103 = switch_channel_get_session (channel_29);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 8285, D.40484_103, 3, "Cannot find a c= line in the sdp at media or session level!\n");
  goto <bb 133>;

<bb 55>:
  D.40487_104 = switch_channel_direction (channel_29);
  if (D.40487_104 == 0)
    goto <bb 57>;
  else
    goto <bb 56>;

<bb 56>:
  if (prefer_sdp_23 != 0)
    goto <bb 57>;
  else
    goto <bb 75>;

<bb 57>:
  map_141 = m_2->m_rtpmaps;
  # DEBUG map => map_141
  goto <bb 74>;

<bb 58>:
  D.40455_142 = map_13->rm_pt;
  D.40491_143 = (int) D.40455_142;
  if (D.40491_143 > 127)
    goto <bb 60>;
  else
    goto <bb 59>;

<bb 59>:
  D.40455_144 = map_13->rm_pt;
  D.40491_145 = (int) D.40455_144;
  D.40493_146 = already_did[D.40491_145];
  if (D.40493_146 != 0)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  // predicted unlikely by continue predictor.
  goto <bb 73>;

<bb 61>:
  i_147 = 0;
  # DEBUG i => i_147
  goto <bb 72>;

<bb 62>:
  imp_148 = codecs[i_19];
  # DEBUG imp => imp_148
  D.40453_149 = map_13->rm_encoding;
  D.40497_150 = _zstr (D.40453_149);
  if (D.40497_150 != 0)
    goto <bb 64>;
  else
    goto <bb 63>;

<bb 63>:
  D.40499_151 = smh_31->mparams;
  D.40500_152 = D.40499_151->ndlb;
  D.40501_153 = (int) D.40500_152;
  D.40502_154 = D.40501_153 & 1;
  D.40503_155 = (_Bool) D.40502_154;
  if (D.40503_155 != 0)
    goto <bb 64>;
  else
    goto <bb 66>;

<bb 64>:
  D.40455_156 = map_13->rm_pt;
  D.40491_157 = (int) D.40455_156;
  if (D.40491_157 <= 95)
    goto <bb 65>;
  else
    goto <bb 66>;

<bb 65>:
  D.40455_158 = map_13->rm_pt;
  D.40491_159 = (int) D.40455_158;
  D.40505_160 = imp_148->ianacode;
  D.40506_161 = (int) D.40505_160;
  match_162 = D.40491_159 == D.40506_161;
  # DEBUG match => match_162
  goto <bb 69>;

<bb 66>:
  D.40453_163 = map_13->rm_encoding;
  if (D.40453_163 != 0B)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  D.40453_164 = map_13->rm_encoding;
  D.40509_165 = imp_148->iananame;
  D.40510_166 = strcasecmp (D.40453_164, D.40509_165);
  match_167 = D.40510_166 == 0;
  # DEBUG match => match_167
  goto <bb 69>;

<bb 68>:
  match_168 = 0;
  # DEBUG match => match_168

<bb 69>:
  # match_16 = PHI <match_162(65), match_167(67), match_168(68)>
  # DEBUG match => match_16
  if (match_16 != 0)
    goto <bb 70>;
  else
    goto <bb 71>;

<bb 70>:
  add_audio_codec (map_13, ptime_8, &buf, 1024);
  goto <bb 73>;

<bb 71>:
  i_169 = i_19 + 1;
  # DEBUG i => i_169

<bb 72>:
  # i_19 = PHI <i_147(61), i_169(71)>
  # DEBUG i => i_19
  if (i_19 < num_codecs_22)
    goto <bb 62>;
  else
    goto <bb 73>;

<bb 73>:
  map_170 = map_13->rm_next;
  # DEBUG map => map_170

<bb 74>:
  # map_13 = PHI <map_141(57), map_170(73)>
  # DEBUG map => map_13
  if (map_13 != 0B)
    goto <bb 58>;
  else
    goto <bb 131>;

<bb 75>:
  i_105 = 0;
  # DEBUG i => i_105
  goto <bb 96>;

<bb 76>:
  imp_106 = codecs[i_20];
  # DEBUG imp => imp_106
  D.40516_107 = imp_106->codec_type;
  if (D.40516_107 != 0)
    goto <bb 79>;
  else
    goto <bb 77>;

<bb 77>:
  D.40518_108 = imp_106->ianacode;
  D.40519_109 = (signed char) D.40518_108;
  if (D.40519_109 < 0)
    goto <bb 79>;
  else
    goto <bb 78>;

<bb 78>:
  D.40518_110 = imp_106->ianacode;
  D.40521_111 = (int) D.40518_110;
  D.40522_112 = already_did[D.40521_111];
  if (D.40522_112 != 0)
    goto <bb 79>;
  else
    goto <bb 80>;

<bb 79>:
  // predicted unlikely by continue predictor.
  goto <bb 95>;

<bb 80>:
  map_113 = m_2->m_rtpmaps;
  # DEBUG map => map_113
  goto <bb 94>;

<bb 81>:
  D.40455_114 = map_14->rm_pt;
  D.40491_115 = (int) D.40455_114;
  if (D.40491_115 > 127)
    goto <bb 83>;
  else
    goto <bb 82>;

<bb 82>:
  D.40455_116 = map_14->rm_pt;
  D.40491_117 = (int) D.40455_116;
  D.40493_118 = already_did[D.40491_117];
  if (D.40493_118 != 0)
    goto <bb 83>;
  else
    goto <bb 84>;

<bb 83>:
  // predicted unlikely by continue predictor.
  goto <bb 93>;

<bb 84>:
  D.40453_119 = map_14->rm_encoding;
  D.40529_120 = _zstr (D.40453_119);
  if (D.40529_120 != 0)
    goto <bb 86>;
  else
    goto <bb 85>;

<bb 85>:
  D.40499_121 = smh_31->mparams;
  D.40500_122 = D.40499_121->ndlb;
  D.40501_123 = (int) D.40500_122;
  D.40502_124 = D.40501_123 & 1;
  D.40503_125 = (_Bool) D.40502_124;
  if (D.40503_125 != 0)
    goto <bb 86>;
  else
    goto <bb 88>;

<bb 86>:
  D.40455_126 = map_14->rm_pt;
  D.40491_127 = (int) D.40455_126;
  if (D.40491_127 <= 95)
    goto <bb 87>;
  else
    goto <bb 88>;

<bb 87>:
  D.40455_128 = map_14->rm_pt;
  D.40491_129 = (int) D.40455_128;
  D.40518_130 = imp_106->ianacode;
  D.40521_131 = (int) D.40518_130;
  match_132 = D.40491_129 == D.40521_131;
  # DEBUG match => match_132
  goto <bb 91>;

<bb 88>:
  D.40453_133 = map_14->rm_encoding;
  if (D.40453_133 != 0B)
    goto <bb 89>;
  else
    goto <bb 90>;

<bb 89>:
  D.40453_134 = map_14->rm_encoding;
  D.40534_135 = imp_106->iananame;
  D.40535_136 = strcasecmp (D.40453_134, D.40534_135);
  match_137 = D.40535_136 == 0;
  # DEBUG match => match_137
  goto <bb 91>;

<bb 90>:
  match_138 = 0;
  # DEBUG match => match_138

<bb 91>:
  # match_17 = PHI <match_132(87), match_137(89), match_138(90)>
  # DEBUG match => match_17
  if (match_17 != 0)
    goto <bb 92>;
  else
    goto <bb 93>;

<bb 92>:
  add_audio_codec (map_14, ptime_8, &buf, 1024);
  goto <bb 95>;

<bb 93>:
  map_139 = map_14->rm_next;
  # DEBUG map => map_139

<bb 94>:
  # map_14 = PHI <map_113(80), map_139(93)>
  # DEBUG map => map_14
  if (map_14 != 0B)
    goto <bb 81>;
  else
    goto <bb 95>;

<bb 95>:
  i_140 = i_20 + 1;
  # DEBUG i => i_140

<bb 96>:
  # i_20 = PHI <i_105(75), i_140(95)>
  # DEBUG i => i_20
  if (i_20 < num_codecs_22)
    goto <bb 76>;
  else
    goto <bb 131>;

<bb 97>:
  D.40437_171 = m_2->m_type;
  if (D.40437_171 == 3)
    goto <bb 98>;
  else
    goto <bb 131>;

<bb 98>:
  D.40441_172 = m_2->m_port;
  if (D.40441_172 != 0)
    goto <bb 99>;
  else
    goto <bb 131>;

<bb 99>:
  connection_173 = sdp_46(D)->sdp_connection;
  # DEBUG connection => connection_173
  D.40479_174 = m_2->m_connections;
  if (D.40479_174 != 0B)
    goto <bb 100>;
  else
    goto <bb 101>;

<bb 100>:
  connection_175 = m_2->m_connections;
  # DEBUG connection => connection_175

<bb 101>:
  # connection_11 = PHI <connection_173(99), connection_175(100)>
  # DEBUG connection => connection_11
  if (connection_11 == 0B)
    goto <bb 102>;
  else
    goto <bb 103>;

<bb 102>:
  D.40547_176 = switch_channel_get_session (channel_29);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 8352, D.40547_176, 3, "Cannot find a c= line in the sdp at media or session level!\n");
  goto <bb 133>;

<bb 103>:
  i_177 = 0;
  # DEBUG i => i_177
  goto <bb 130>;

<bb 104>:
  imp_178 = codecs[i_21];
  # DEBUG imp => imp_178
  D.40550_179 = imp_178->codec_type;
  if (D.40550_179 != 1)
    goto <bb 107>;
  else
    goto <bb 105>;

<bb 105>:
  D.40552_180 = imp_178->ianacode;
  D.40553_181 = (signed char) D.40552_180;
  if (D.40553_181 < 0)
    goto <bb 107>;
  else
    goto <bb 106>;

<bb 106>:
  D.40552_182 = imp_178->ianacode;
  D.40555_183 = (int) D.40552_182;
  D.40556_184 = already_did[D.40555_183];
  if (D.40556_184 != 0)
    goto <bb 107>;
  else
    goto <bb 108>;

<bb 107>:
  // predicted unlikely by continue predictor.
  goto <bb 129>;

<bb 108>:
  D.40557_185 = session_28(D)->channel;
  D.40558_186 = switch_channel_direction (D.40557_185);
  if (D.40558_186 == 0)
    goto <bb 109>;
  else
    goto <bb 111>;

<bb 109>:
  D.40557_187 = session_28(D)->channel;
  D.40561_188 = switch_channel_test_flag (D.40557_187, 114);
  if (D.40561_188 != 0)
    goto <bb 110>;
  else
    goto <bb 111>;

<bb 110>:
  // predicted unlikely by continue predictor.
  goto <bb 129>;

<bb 111>:
  map_189 = m_2->m_rtpmaps;
  # DEBUG map => map_189
  goto <bb 128>;

<bb 112>:
  D.40455_190 = map_15->rm_pt;
  D.40491_191 = (int) D.40455_190;
  if (D.40491_191 > 127)
    goto <bb 114>;
  else
    goto <bb 113>;

<bb 113>:
  D.40455_192 = map_15->rm_pt;
  D.40491_193 = (int) D.40455_192;
  D.40493_194 = already_did[D.40491_193];
  if (D.40493_194 != 0)
    goto <bb 114>;
  else
    goto <bb 115>;

<bb 114>:
  // predicted unlikely by continue predictor.
  goto <bb 127>;

<bb 115>:
  D.40453_195 = map_15->rm_encoding;
  D.40570_196 = _zstr (D.40453_195);
  if (D.40570_196 != 0)
    goto <bb 117>;
  else
    goto <bb 116>;

<bb 116>:
  D.40499_197 = smh_31->mparams;
  D.40500_198 = D.40499_197->ndlb;
  D.40501_199 = (int) D.40500_198;
  D.40502_200 = D.40501_199 & 1;
  D.40503_201 = (_Bool) D.40502_200;
  if (D.40503_201 != 0)
    goto <bb 117>;
  else
    goto <bb 119>;

<bb 117>:
  D.40455_202 = map_15->rm_pt;
  D.40491_203 = (int) D.40455_202;
  if (D.40491_203 <= 95)
    goto <bb 118>;
  else
    goto <bb 119>;

<bb 118>:
  D.40455_204 = map_15->rm_pt;
  D.40491_205 = (int) D.40455_204;
  D.40552_206 = imp_178->ianacode;
  D.40555_207 = (int) D.40552_206;
  match_208 = D.40491_205 == D.40555_207;
  # DEBUG match => match_208
  goto <bb 122>;

<bb 119>:
  D.40453_209 = map_15->rm_encoding;
  if (D.40453_209 != 0B)
    goto <bb 120>;
  else
    goto <bb 121>;

<bb 120>:
  D.40453_210 = map_15->rm_encoding;
  D.40575_211 = imp_178->iananame;
  D.40576_212 = strcasecmp (D.40453_210, D.40575_211);
  match_213 = D.40576_212 == 0;
  # DEBUG match => match_213
  goto <bb 122>;

<bb 121>:
  match_214 = 0;
  # DEBUG match => match_214

<bb 122>:
  # match_18 = PHI <match_208(118), match_213(120), match_214(121)>
  # DEBUG match => match_18
  if (match_18 != 0)
    goto <bb 123>;
  else
    goto <bb 127>;

<bb 123>:
  if (ptime_82 > 0)
    goto <bb 124>;
  else
    goto <bb 125>;

<bb 124>:
  D.40582_215 = strlen (&buf);
  D.40583_216 = &buf + D.40582_215;
  D.40584_217 = strlen (&buf);
  D.40585_218 = 1024 - D.40584_217;
  D.40575_219 = imp_178->iananame;
  D.40457_220 = map_15->rm_rate;
  switch_snprintf (D.40583_216, D.40585_218, ",%s@%uh@%di", D.40575_219, D.40457_220, ptime_82);
  goto <bb 126>;

<bb 125>:
  D.40587_221 = strlen (&buf);
  D.40588_222 = &buf + D.40587_221;
  D.40589_223 = strlen (&buf);
  D.40590_224 = 1024 - D.40589_223;
  D.40575_225 = imp_178->iananame;
  D.40457_226 = map_15->rm_rate;
  switch_snprintf (D.40588_222, D.40590_224, ",%s@%uh", D.40575_225, D.40457_226);

<bb 126>:
  D.40552_227 = imp_178->ianacode;
  D.40555_228 = (int) D.40552_227;
  already_did[D.40555_228] = 1;
  goto <bb 129>;

<bb 127>:
  map_229 = map_15->rm_next;
  # DEBUG map => map_229

<bb 128>:
  # map_15 = PHI <map_189(111), map_229(127)>
  # DEBUG map => map_15
  if (map_15 != 0B)
    goto <bb 112>;
  else
    goto <bb 129>;

<bb 129>:
  i_230 = i_21 + 1;
  # DEBUG i => i_230

<bb 130>:
  # i_21 = PHI <i_177(103), i_230(129)>
  # DEBUG i => i_21
  if (i_21 < num_codecs_22)
    goto <bb 104>;
  else
    goto <bb 131>;

<bb 131>:
  m_231 = m_2->m_next;
  # DEBUG m => m_231

<bb 132>:
  # m_2 = PHI <m_81(37), m_231(131)>
  # DEBUG m => m_2
  if (m_2 != 0B)
    goto <bb 38>;
  else
    goto <bb 133>;

<bb 133>:
  D.40591_232 = buf[0];
  if (D.40591_232 == 44)
    goto <bb 134>;
  else
    goto <bb 135>;

<bb 134>:
  switch_channel_set_variable_var_check (channel_29, "ep_codec_string", &buf[1], 1);

<bb 135>:
  return;

}



;; Function switch_core_media_get_codec_string (switch_core_media_get_codec_string)



Renaming block #0



Renaming block #2

Renaming statement preferred = 0B;

Renaming statement fallback = 0B;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement preferred = "PCMU";

Renaming statement fallback = "PCMU";



Renaming block #6

Renaming statement D.46981 = session->channel;

Renaming statement preferred = switch_channel_get_variable_dup (D.46981, "absolute_codec_string", 1, -1);

Renaming statement if (preferred == 0B)



Renaming block #7

Renaming statement D.46981 = session->channel;

Renaming statement preferred = switch_channel_get_variable_dup (D.46981, "codec_string", 1, -1);



Renaming block #8

Renaming statement if (preferred == 0B)



Renaming block #9

Renaming statement D.46981 = session->channel;

Renaming statement D.46986 = switch_channel_direction (D.46981);

Renaming statement if (D.46986 == 1)



Renaming block #10

Renaming statement D.46989 = smh->mparams;

Renaming statement preferred = D.46989->outbound_codec_string;

Renaming statement D.46989 = smh->mparams;

Renaming statement fallback = D.46989->inbound_codec_string;



Renaming block #11

Renaming statement D.46989 = smh->mparams;

Renaming statement preferred = D.46989->inbound_codec_string;

Renaming statement D.46989 = smh->mparams;

Renaming statement fallback = D.46989->outbound_codec_string;



Renaming block #12

Renaming statement D.46993 = _zstr (preferred);

Renaming statement if (D.46993 == 0)



Renaming block #13

Renaming statement iftmp.168 = preferred;



Renaming block #14

Renaming statement iftmp.168 = fallback;



Renaming block #15

Renaming statement D.46991 = iftmp.168;

Renaming statement return D.46991;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 685, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_8 = session_7(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.46981_11 = session_7(D)->channel;

Updating SSA information for statement preferred_12 = switch_channel_get_variable_dup (D.46981_11, "absolute_codec_string", 1, -1);



Registering new PHI nodes in block #7

Updating SSA information for statement D.46981_13 = session_7(D)->channel;

Updating SSA information for statement preferred_14 = switch_channel_get_variable_dup (D.46981_13, "codec_string", 1, -1);



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9

Updating SSA information for statement D.46981_15 = session_7(D)->channel;

Updating SSA information for statement D.46986_16 = switch_channel_direction (D.46981_15);



Registering new PHI nodes in block #10

Updating SSA information for statement D.46989_17 = smh_8->mparams;

Updating SSA information for statement preferred_18 = D.46989_17->outbound_codec_string;

Updating SSA information for statement D.46989_19 = smh_8->mparams;

Updating SSA information for statement fallback_20 = D.46989_19->inbound_codec_string;



Registering new PHI nodes in block #11

Updating SSA information for statement D.46989_21 = smh_8->mparams;

Updating SSA information for statement preferred_22 = D.46989_21->inbound_codec_string;

Updating SSA information for statement D.46989_23 = smh_8->mparams;

Updating SSA information for statement fallback_24 = D.46989_23->outbound_codec_string;



Registering new PHI nodes in block #12

Updating SSA information for statement D.46993_25 = _zstr (preferred_2);



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 16
Number of blocks to update: 15 ( 94%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 


Scope blocks after cleanups:

{ Scope block #0 
  const char * preferred;
  const char * fallback;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_get_codec_string";

}
switch_core_media_get_codec_string (struct switch_core_session_t * session)
{
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_get_codec_string";
  struct switch_media_handle_t * smh;
  const char * fallback;
  const char * preferred;
  int D.46993;
  const char * iftmp.168;
  const char * D.46991;
  struct switch_core_media_params_t * D.46989;
  switch_call_direction_t D.46986;
  struct switch_channel_t * D.46981;

<bb 2>:
  preferred_5 = 0B;
  # DEBUG preferred => preferred_5
  fallback_6 = 0B;
  # DEBUG fallback => fallback_6
  if (session_7(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 685, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_8 = session_7(D)->media_handle;
  # DEBUG smh => smh_8
  if (smh_8 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  preferred_9 = "PCMU";
  # DEBUG preferred => preferred_9
  fallback_10 = "PCMU";
  # DEBUG fallback => fallback_10
  goto <bb 12>;

<bb 6>:
  D.46981_11 = session_7(D)->channel;
  preferred_12 = switch_channel_get_variable_dup (D.46981_11, "absolute_codec_string", 1, -1);
  # DEBUG preferred => preferred_12
  if (preferred_12 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.46981_13 = session_7(D)->channel;
  preferred_14 = switch_channel_get_variable_dup (D.46981_13, "codec_string", 1, -1);
  # DEBUG preferred => preferred_14

<bb 8>:
  # preferred_1 = PHI <preferred_12(6), preferred_14(7)>
  # DEBUG preferred => preferred_1
  if (preferred_1 == 0B)
    goto <bb 9>;
  else
    goto <bb 12>;

<bb 9>:
  D.46981_15 = session_7(D)->channel;
  D.46986_16 = switch_channel_direction (D.46981_15);
  if (D.46986_16 == 1)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.46989_17 = smh_8->mparams;
  preferred_18 = D.46989_17->outbound_codec_string;
  # DEBUG preferred => preferred_18
  D.46989_19 = smh_8->mparams;
  fallback_20 = D.46989_19->inbound_codec_string;
  # DEBUG fallback => fallback_20
  goto <bb 12>;

<bb 11>:
  D.46989_21 = smh_8->mparams;
  preferred_22 = D.46989_21->inbound_codec_string;
  # DEBUG preferred => preferred_22
  D.46989_23 = smh_8->mparams;
  fallback_24 = D.46989_23->outbound_codec_string;
  # DEBUG fallback => fallback_24

<bb 12>:
  # preferred_2 = PHI <preferred_9(5), preferred_1(8), preferred_18(10), preferred_22(11)>
  # fallback_3 = PHI <fallback_10(5), fallback_6(8), fallback_20(10), fallback_24(11)>
  # DEBUG fallback => fallback_3
  # DEBUG preferred => preferred_2
  D.46993_25 = _zstr (preferred_2);
  if (D.46993_25 == 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  iftmp.168_26 = preferred_2;
  goto <bb 15>;

<bb 14>:
  iftmp.168_27 = fallback_3;

<bb 15>:
  # iftmp.168_4 = PHI <iftmp.168_26(13), iftmp.168_27(14)>
  D.46991_28 = iftmp.168_4;
  return D.46991_28;

}



;; Function switch_core_session_clear_crypto (switch_core_session_clear_crypto)



Renaming block #0



Renaming block #2

Renaming statement i = 0;



Renaming block #4

Renaming statement D.46966 = vars[i];

Renaming statement if (D.46966 != 0B)



Renaming block #3

Renaming statement D.46965 = session->channel;

Renaming statement D.46966 = vars[i];

Renaming statement switch_channel_set_variable_var_check (D.46965, D.46966, 0B, 1);

Renaming statement i = i + 1;



Renaming block #5

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #6

Renaming statement i = 0;



Renaming block #8

Renaming statement if (i <= 8)



Renaming block #7

Renaming statement D.46969 = &smh->engines[0].ssec;

Renaming statement i.167 = (unsigned int) i;

Renaming statement D.46971 = i.167 * 144;

Renaming statement D.46972 = D.46969 + D.46971;

Renaming statement memset (D.46972, 0, 144);

Renaming statement D.46973 = &smh->engines[1].ssec;

Renaming statement i.167 = (unsigned int) i;

Renaming statement D.46971 = i.167 * 144;

Renaming statement D.46974 = D.46973 + D.46971;

Renaming statement memset (D.46974, 0, 144);

Renaming statement i = i + 1;



Renaming block #9



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement vars = *.LC10;



Registering new PHI nodes in block #4

Updating SSA information for statement D.46966_4 = vars[i_1];



Registering new PHI nodes in block #3

Updating SSA information for statement D.46965_6 = session_5(D)->channel;

Updating SSA information for statement D.46966_7 = vars[i_1];

Updating SSA information for statement switch_channel_set_variable_var_check (D.46965_6, D.46966_7, 0B, 1);



Registering new PHI nodes in block #5

Updating SSA information for statement smh_9 = session_5(D)->media_handle;



Registering new PHI nodes in block #6



Registering new PHI nodes in block #8



Registering new PHI nodes in block #7

Updating SSA information for statement memset (D.46972_14, 0, 144);

Updating SSA information for statement memset (D.46974_18, 0, 144);



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 
  int i;
  struct switch_media_handle_t * smh;
  const char * vars[11];

}
switch_core_session_clear_crypto (struct switch_core_session_t * session)
{
  const char * vars[11];
  struct switch_media_handle_t * smh;
  int i;
  void * D.46974;
  struct switch_secure_settings_t[10] * D.46973;
  void * D.46972;
  unsigned int D.46971;
  unsigned int i.167;
  struct switch_secure_settings_t[10] * D.46969;
  const char * D.46966;
  struct switch_channel_t * D.46965;

<bb 2>:
  vars = *.LC10;
  i_3 = 0;
  # DEBUG i => i_3
  goto <bb 4>;

<bb 3>:
  D.46965_6 = session_5(D)->channel;
  D.46966_7 = vars[i_1];
  switch_channel_set_variable_var_check (D.46965_6, D.46966_7, 0B, 1);
  i_8 = i_1 + 1;
  # DEBUG i => i_8

<bb 4>:
  # i_1 = PHI <i_3(2), i_8(3)>
  # DEBUG i => i_1
  D.46966_4 = vars[i_1];
  if (D.46966_4 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 5>:
  smh_9 = session_5(D)->media_handle;
  # DEBUG smh => smh_9
  if (smh_9 == 0B)
    goto <bb 9>;
  else
    goto <bb 6>;

<bb 6>:
  i_10 = 0;
  # DEBUG i => i_10
  goto <bb 8>;

<bb 7>:
  D.46969_11 = &smh_9->engines[0].ssec;
  i.167_12 = (unsigned int) i_2;
  D.46971_13 = i.167_12 * 144;
  D.46972_14 = D.46969_11 + D.46971_13;
  memset (D.46972_14, 0, 144);
  D.46973_15 = &smh_9->engines[1].ssec;
  i.167_16 = (unsigned int) i_2;
  D.46971_17 = i.167_16 * 144;
  D.46974_18 = D.46973_15 + D.46971_17;
  memset (D.46974_18, 0, 144);
  i_19 = i_2 + 1;
  # DEBUG i => i_19

<bb 8>:
  # i_2 = PHI <i_10(6), i_19(7)>
  # DEBUG i => i_2
  if (i_2 <= 8)
    goto <bb 7>;
  else
    goto <bb 9>;

<bb 9>:
  return;

}



;; Function switch_core_session_local_crypto_key (switch_core_session_local_crypto_key)



Renaming block #0



Renaming block #2

Renaming statement D.46948 = session->media_handle;

Renaming statement if (D.46948 == 0B)



Renaming block #3

Renaming statement D.46951 = 0B;



Renaming block #4

Renaming statement D.46948 = session->media_handle;

Renaming statement D.46948 = session->media_handle;

Renaming statement D.46952 = D.46948->engines[type].crypto_type;

Renaming statement D.46951 = D.46948->engines[type].ssec[D.46952].local_crypto_key;



Renaming block #5

Renaming statement return D.46951;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.46948_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #3



Registering new PHI nodes in block #4

Updating SSA information for statement D.46948_5 = session_2(D)->media_handle;

Updating SSA information for statement D.46948_6 = session_2(D)->media_handle;

Updating SSA information for statement D.46952_8 = D.46948_6->engines[type_7(D)].crypto_type;

Updating SSA information for statement D.46951_9 = D.46948_6->engines[type_7(D)].ssec[D.46952_8].local_crypto_key;



Registering new PHI nodes in block #5



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)

Affected blocks: 0 2 3 4 5 


Scope blocks after cleanups:

{ Scope block #0 

}
switch_core_session_local_crypto_key (struct switch_core_session_t * session, switch_media_type_t type)
{
  switch_rtp_crypto_key_type_t D.46952;
  const char * D.46951;
  struct switch_media_handle_t * D.46948;

<bb 2>:
  D.46948_3 = session_2(D)->media_handle;
  if (D.46948_3 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.46951_4 = 0B;
  goto <bb 5>;

<bb 4>:
  D.46948_5 = session_2(D)->media_handle;
  D.46948_6 = session_2(D)->media_handle;
  D.46952_8 = D.46948_6->engines[type_7(D)].crypto_type;
  D.46951_9 = D.46948_6->engines[type_7(D)].ssec[D.46952_8].local_crypto_key;

<bb 5>:
  # D.46951_1 = PHI <D.46951_4(3), D.46951_9(4)>
  return D.46951_1;

}



;; Function switch_core_media_parse_rtp_bugs (switch_core_media_parse_rtp_bugs)



Renaming block #0



Renaming block #2

Renaming statement D.46848 = switch_stristr ("clear", str);

Renaming statement if (D.46848 != 0B)



Renaming block #3

Renaming statement *flag_pole = 0;



Renaming block #4

Renaming statement D.46851 = switch_stristr ("CISCO_SKIP_MARK_BIT_2833", str);

Renaming statement if (D.46851 != 0B)



Renaming block #5

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46855 = D.46854 | 1;

Renaming statement *flag_pole = D.46855;



Renaming block #6

Renaming statement D.46856 = switch_stristr ("~CISCO_SKIP_MARK_BIT_2833", str);

Renaming statement if (D.46856 != 0B)



Renaming block #7

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46859 = D.46854 & 4294967294;

Renaming statement *flag_pole = D.46859;



Renaming block #8

Renaming statement D.46860 = switch_stristr ("SONUS_SEND_INVALID_TIMESTAMP_2833", str);

Renaming statement if (D.46860 != 0B)



Renaming block #9

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46863 = D.46854 | 2;

Renaming statement *flag_pole = D.46863;



Renaming block #10

Renaming statement D.46864 = switch_stristr ("~SONUS_SEND_INVALID_TIMESTAMP_2833", str);

Renaming statement if (D.46864 != 0B)



Renaming block #11

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46867 = D.46854 & 4294967293;

Renaming statement *flag_pole = D.46867;



Renaming block #12

Renaming statement D.46868 = switch_stristr ("IGNORE_MARK_BIT", str);

Renaming statement if (D.46868 != 0B)



Renaming block #13

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46871 = D.46854 | 4;

Renaming statement *flag_pole = D.46871;



Renaming block #14

Renaming statement D.46872 = switch_stristr ("~IGNORE_MARK_BIT", str);

Renaming statement if (D.46872 != 0B)



Renaming block #15

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46875 = D.46854 & 4294967291;

Renaming statement *flag_pole = D.46875;



Renaming block #16

Renaming statement D.46876 = switch_stristr ("SEND_LINEAR_TIMESTAMPS", str);

Renaming statement if (D.46876 != 0B)



Renaming block #17

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46879 = D.46854 | 8;

Renaming statement *flag_pole = D.46879;



Renaming block #18

Renaming statement D.46880 = switch_stristr ("~SEND_LINEAR_TIMESTAMPS", str);

Renaming statement if (D.46880 != 0B)



Renaming block #19

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46883 = D.46854 & 4294967287;

Renaming statement *flag_pole = D.46883;



Renaming block #20

Renaming statement D.46884 = switch_stristr ("START_SEQ_AT_ZERO", str);

Renaming statement if (D.46884 != 0B)



Renaming block #21

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46887 = D.46854 | 16;

Renaming statement *flag_pole = D.46887;



Renaming block #22

Renaming statement D.46888 = switch_stristr ("~START_SEQ_AT_ZERO", str);

Renaming statement if (D.46888 != 0B)



Renaming block #23

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46891 = D.46854 & 4294967279;

Renaming statement *flag_pole = D.46891;



Renaming block #24

Renaming statement D.46892 = switch_stristr ("NEVER_SEND_MARKER", str);

Renaming statement if (D.46892 != 0B)



Renaming block #25

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46895 = D.46854 | 32;

Renaming statement *flag_pole = D.46895;



Renaming block #26

Renaming statement D.46896 = switch_stristr ("~NEVER_SEND_MARKER", str);

Renaming statement if (D.46896 != 0B)



Renaming block #27

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46899 = D.46854 & 4294967263;

Renaming statement *flag_pole = D.46899;



Renaming block #28

Renaming statement D.46900 = switch_stristr ("IGNORE_DTMF_DURATION", str);

Renaming statement if (D.46900 != 0B)



Renaming block #29

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46903 = D.46854 | 64;

Renaming statement *flag_pole = D.46903;



Renaming block #30

Renaming statement D.46904 = switch_stristr ("~IGNORE_DTMF_DURATION", str);

Renaming statement if (D.46904 != 0B)



Renaming block #31

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46907 = D.46854 & 4294967231;

Renaming statement *flag_pole = D.46907;



Renaming block #32

Renaming statement D.46908 = switch_stristr ("ACCEPT_ANY_PACKETS", str);

Renaming statement if (D.46908 != 0B)



Renaming block #33

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46911 = D.46854 | 128;

Renaming statement *flag_pole = D.46911;



Renaming block #34

Renaming statement D.46912 = switch_stristr ("~ACCEPT_ANY_PACKETS", str);

Renaming statement if (D.46912 != 0B)



Renaming block #35

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46915 = D.46854 & 4294967167;

Renaming statement *flag_pole = D.46915;



Renaming block #36

Renaming statement D.46916 = switch_stristr ("ACCEPT_ANY_PAYLOAD", str);

Renaming statement if (D.46916 != 0B)



Renaming block #37

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46919 = D.46854 | 2048;

Renaming statement *flag_pole = D.46919;



Renaming block #38

Renaming statement D.46920 = switch_stristr ("~ACCEPT_ANY_PAYLOAD", str);

Renaming statement if (D.46920 != 0B)



Renaming block #39

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46923 = D.46854 & 4294965247;

Renaming statement *flag_pole = D.46923;



Renaming block #40

Renaming statement D.46924 = switch_stristr ("GEN_ONE_GEN_ALL", str);

Renaming statement if (D.46924 != 0B)



Renaming block #41

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46927 = D.46854 | 256;

Renaming statement *flag_pole = D.46927;



Renaming block #42

Renaming statement D.46928 = switch_stristr ("~GEN_ONE_GEN_ALL", str);

Renaming statement if (D.46928 != 0B)



Renaming block #43

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46931 = D.46854 & 4294967039;

Renaming statement *flag_pole = D.46931;



Renaming block #44

Renaming statement D.46932 = switch_stristr ("CHANGE_SSRC_ON_MARKER", str);

Renaming statement if (D.46932 != 0B)



Renaming block #45

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46935 = D.46854 | 512;

Renaming statement *flag_pole = D.46935;



Renaming block #46

Renaming statement D.46936 = switch_stristr ("~CHANGE_SSRC_ON_MARKER", str);

Renaming statement if (D.46936 != 0B)



Renaming block #47

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46939 = D.46854 & 4294966783;

Renaming statement *flag_pole = D.46939;



Renaming block #48

Renaming statement D.46940 = switch_stristr ("FLUSH_JB_ON_DTMF", str);

Renaming statement if (D.46940 != 0B)



Renaming block #49

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46943 = D.46854 | 1024;

Renaming statement *flag_pole = D.46943;



Renaming block #50

Renaming statement D.46944 = switch_stristr ("~FLUSH_JB_ON_DTMF", str);

Renaming statement if (D.46944 != 0B)



Renaming block #51

Renaming statement D.46854 = *flag_pole;

Renaming statement D.46947 = D.46854 & 4294966271;

Renaming statement *flag_pole = D.46947;



Renaming block #52



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.46848_2 = switch_stristr ("clear", str_1(D));



Registering new PHI nodes in block #3

Updating SSA information for statement *flag_pole_3(D) = 0;



Registering new PHI nodes in block #4

Updating SSA information for statement D.46851_4 = switch_stristr ("CISCO_SKIP_MARK_BIT_2833", str_1(D));



Registering new PHI nodes in block #5

Updating SSA information for statement D.46854_5 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46855_6;



Registering new PHI nodes in block #6

Updating SSA information for statement D.46856_7 = switch_stristr ("~CISCO_SKIP_MARK_BIT_2833", str_1(D));



Registering new PHI nodes in block #7

Updating SSA information for statement D.46854_8 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46859_9;



Registering new PHI nodes in block #8

Updating SSA information for statement D.46860_10 = switch_stristr ("SONUS_SEND_INVALID_TIMESTAMP_2833", str_1(D));



Registering new PHI nodes in block #9

Updating SSA information for statement D.46854_11 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46863_12;



Registering new PHI nodes in block #10

Updating SSA information for statement D.46864_13 = switch_stristr ("~SONUS_SEND_INVALID_TIMESTAMP_2833", str_1(D));



Registering new PHI nodes in block #11

Updating SSA information for statement D.46854_14 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46867_15;



Registering new PHI nodes in block #12

Updating SSA information for statement D.46868_16 = switch_stristr ("IGNORE_MARK_BIT", str_1(D));



Registering new PHI nodes in block #13

Updating SSA information for statement D.46854_17 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46871_18;



Registering new PHI nodes in block #14

Updating SSA information for statement D.46872_19 = switch_stristr ("~IGNORE_MARK_BIT", str_1(D));



Registering new PHI nodes in block #15

Updating SSA information for statement D.46854_20 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46875_21;



Registering new PHI nodes in block #16

Updating SSA information for statement D.46876_22 = switch_stristr ("SEND_LINEAR_TIMESTAMPS", str_1(D));



Registering new PHI nodes in block #17

Updating SSA information for statement D.46854_23 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46879_24;



Registering new PHI nodes in block #18

Updating SSA information for statement D.46880_25 = switch_stristr ("~SEND_LINEAR_TIMESTAMPS", str_1(D));



Registering new PHI nodes in block #19

Updating SSA information for statement D.46854_26 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46883_27;



Registering new PHI nodes in block #20

Updating SSA information for statement D.46884_28 = switch_stristr ("START_SEQ_AT_ZERO", str_1(D));



Registering new PHI nodes in block #21

Updating SSA information for statement D.46854_29 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46887_30;



Registering new PHI nodes in block #22

Updating SSA information for statement D.46888_31 = switch_stristr ("~START_SEQ_AT_ZERO", str_1(D));



Registering new PHI nodes in block #23

Updating SSA information for statement D.46854_32 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46891_33;



Registering new PHI nodes in block #24

Updating SSA information for statement D.46892_34 = switch_stristr ("NEVER_SEND_MARKER", str_1(D));



Registering new PHI nodes in block #25

Updating SSA information for statement D.46854_35 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46895_36;



Registering new PHI nodes in block #26

Updating SSA information for statement D.46896_37 = switch_stristr ("~NEVER_SEND_MARKER", str_1(D));



Registering new PHI nodes in block #27

Updating SSA information for statement D.46854_38 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46899_39;



Registering new PHI nodes in block #28

Updating SSA information for statement D.46900_40 = switch_stristr ("IGNORE_DTMF_DURATION", str_1(D));



Registering new PHI nodes in block #29

Updating SSA information for statement D.46854_41 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46903_42;



Registering new PHI nodes in block #30

Updating SSA information for statement D.46904_43 = switch_stristr ("~IGNORE_DTMF_DURATION", str_1(D));



Registering new PHI nodes in block #31

Updating SSA information for statement D.46854_44 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46907_45;



Registering new PHI nodes in block #32

Updating SSA information for statement D.46908_46 = switch_stristr ("ACCEPT_ANY_PACKETS", str_1(D));



Registering new PHI nodes in block #33

Updating SSA information for statement D.46854_47 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46911_48;



Registering new PHI nodes in block #34

Updating SSA information for statement D.46912_49 = switch_stristr ("~ACCEPT_ANY_PACKETS", str_1(D));



Registering new PHI nodes in block #35

Updating SSA information for statement D.46854_50 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46915_51;



Registering new PHI nodes in block #36

Updating SSA information for statement D.46916_52 = switch_stristr ("ACCEPT_ANY_PAYLOAD", str_1(D));



Registering new PHI nodes in block #37

Updating SSA information for statement D.46854_53 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46919_54;



Registering new PHI nodes in block #38

Updating SSA information for statement D.46920_55 = switch_stristr ("~ACCEPT_ANY_PAYLOAD", str_1(D));



Registering new PHI nodes in block #39

Updating SSA information for statement D.46854_56 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46923_57;



Registering new PHI nodes in block #40

Updating SSA information for statement D.46924_58 = switch_stristr ("GEN_ONE_GEN_ALL", str_1(D));



Registering new PHI nodes in block #41

Updating SSA information for statement D.46854_59 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46927_60;



Registering new PHI nodes in block #42

Updating SSA information for statement D.46928_61 = switch_stristr ("~GEN_ONE_GEN_ALL", str_1(D));



Registering new PHI nodes in block #43

Updating SSA information for statement D.46854_62 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46931_63;



Registering new PHI nodes in block #44

Updating SSA information for statement D.46932_64 = switch_stristr ("CHANGE_SSRC_ON_MARKER", str_1(D));



Registering new PHI nodes in block #45

Updating SSA information for statement D.46854_65 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46935_66;



Registering new PHI nodes in block #46

Updating SSA information for statement D.46936_67 = switch_stristr ("~CHANGE_SSRC_ON_MARKER", str_1(D));



Registering new PHI nodes in block #47

Updating SSA information for statement D.46854_68 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46939_69;



Registering new PHI nodes in block #48

Updating SSA information for statement D.46940_70 = switch_stristr ("FLUSH_JB_ON_DTMF", str_1(D));



Registering new PHI nodes in block #49

Updating SSA information for statement D.46854_71 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46943_72;



Registering new PHI nodes in block #50

Updating SSA information for statement D.46944_73 = switch_stristr ("~FLUSH_JB_ON_DTMF", str_1(D));



Registering new PHI nodes in block #51

Updating SSA information for statement D.46854_74 = *flag_pole_3(D);

Updating SSA information for statement *flag_pole_3(D) = D.46947_75;



Registering new PHI nodes in block #52



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 53
Number of blocks to update: 52 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 


Scope blocks after cleanups:

{ Scope block #0 

}
switch_core_media_parse_rtp_bugs (switch_rtp_bug_flag_t * flag_pole, const char * str)
{
  unsigned int D.46947;
  const char * D.46944;
  unsigned int D.46943;
  const char * D.46940;
  unsigned int D.46939;
  const char * D.46936;
  unsigned int D.46935;
  const char * D.46932;
  unsigned int D.46931;
  const char * D.46928;
  unsigned int D.46927;
  const char * D.46924;
  unsigned int D.46923;
  const char * D.46920;
  unsigned int D.46919;
  const char * D.46916;
  unsigned int D.46915;
  const char * D.46912;
  unsigned int D.46911;
  const char * D.46908;
  unsigned int D.46907;
  const char * D.46904;
  unsigned int D.46903;
  const char * D.46900;
  unsigned int D.46899;
  const char * D.46896;
  unsigned int D.46895;
  const char * D.46892;
  unsigned int D.46891;
  const char * D.46888;
  unsigned int D.46887;
  const char * D.46884;
  unsigned int D.46883;
  const char * D.46880;
  unsigned int D.46879;
  const char * D.46876;
  unsigned int D.46875;
  const char * D.46872;
  unsigned int D.46871;
  const char * D.46868;
  unsigned int D.46867;
  const char * D.46864;
  unsigned int D.46863;
  const char * D.46860;
  unsigned int D.46859;
  const char * D.46856;
  unsigned int D.46855;
  switch_rtp_bug_flag_t D.46854;
  const char * D.46851;
  const char * D.46848;

<bb 2>:
  D.46848_2 = switch_stristr ("clear", str_1(D));
  if (D.46848_2 != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  *flag_pole_3(D) = 0;

<bb 4>:
  D.46851_4 = switch_stristr ("CISCO_SKIP_MARK_BIT_2833", str_1(D));
  if (D.46851_4 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.46854_5 = *flag_pole_3(D);
  D.46855_6 = D.46854_5 | 1;
  *flag_pole_3(D) = D.46855_6;

<bb 6>:
  D.46856_7 = switch_stristr ("~CISCO_SKIP_MARK_BIT_2833", str_1(D));
  if (D.46856_7 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.46854_8 = *flag_pole_3(D);
  D.46859_9 = D.46854_8 & 4294967294;
  *flag_pole_3(D) = D.46859_9;

<bb 8>:
  D.46860_10 = switch_stristr ("SONUS_SEND_INVALID_TIMESTAMP_2833", str_1(D));
  if (D.46860_10 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.46854_11 = *flag_pole_3(D);
  D.46863_12 = D.46854_11 | 2;
  *flag_pole_3(D) = D.46863_12;

<bb 10>:
  D.46864_13 = switch_stristr ("~SONUS_SEND_INVALID_TIMESTAMP_2833", str_1(D));
  if (D.46864_13 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.46854_14 = *flag_pole_3(D);
  D.46867_15 = D.46854_14 & 4294967293;
  *flag_pole_3(D) = D.46867_15;

<bb 12>:
  D.46868_16 = switch_stristr ("IGNORE_MARK_BIT", str_1(D));
  if (D.46868_16 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.46854_17 = *flag_pole_3(D);
  D.46871_18 = D.46854_17 | 4;
  *flag_pole_3(D) = D.46871_18;

<bb 14>:
  D.46872_19 = switch_stristr ("~IGNORE_MARK_BIT", str_1(D));
  if (D.46872_19 != 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.46854_20 = *flag_pole_3(D);
  D.46875_21 = D.46854_20 & 4294967291;
  *flag_pole_3(D) = D.46875_21;

<bb 16>:
  D.46876_22 = switch_stristr ("SEND_LINEAR_TIMESTAMPS", str_1(D));
  if (D.46876_22 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.46854_23 = *flag_pole_3(D);
  D.46879_24 = D.46854_23 | 8;
  *flag_pole_3(D) = D.46879_24;

<bb 18>:
  D.46880_25 = switch_stristr ("~SEND_LINEAR_TIMESTAMPS", str_1(D));
  if (D.46880_25 != 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.46854_26 = *flag_pole_3(D);
  D.46883_27 = D.46854_26 & 4294967287;
  *flag_pole_3(D) = D.46883_27;

<bb 20>:
  D.46884_28 = switch_stristr ("START_SEQ_AT_ZERO", str_1(D));
  if (D.46884_28 != 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.46854_29 = *flag_pole_3(D);
  D.46887_30 = D.46854_29 | 16;
  *flag_pole_3(D) = D.46887_30;

<bb 22>:
  D.46888_31 = switch_stristr ("~START_SEQ_AT_ZERO", str_1(D));
  if (D.46888_31 != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  D.46854_32 = *flag_pole_3(D);
  D.46891_33 = D.46854_32 & 4294967279;
  *flag_pole_3(D) = D.46891_33;

<bb 24>:
  D.46892_34 = switch_stristr ("NEVER_SEND_MARKER", str_1(D));
  if (D.46892_34 != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.46854_35 = *flag_pole_3(D);
  D.46895_36 = D.46854_35 | 32;
  *flag_pole_3(D) = D.46895_36;

<bb 26>:
  D.46896_37 = switch_stristr ("~NEVER_SEND_MARKER", str_1(D));
  if (D.46896_37 != 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.46854_38 = *flag_pole_3(D);
  D.46899_39 = D.46854_38 & 4294967263;
  *flag_pole_3(D) = D.46899_39;

<bb 28>:
  D.46900_40 = switch_stristr ("IGNORE_DTMF_DURATION", str_1(D));
  if (D.46900_40 != 0B)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  D.46854_41 = *flag_pole_3(D);
  D.46903_42 = D.46854_41 | 64;
  *flag_pole_3(D) = D.46903_42;

<bb 30>:
  D.46904_43 = switch_stristr ("~IGNORE_DTMF_DURATION", str_1(D));
  if (D.46904_43 != 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  D.46854_44 = *flag_pole_3(D);
  D.46907_45 = D.46854_44 & 4294967231;
  *flag_pole_3(D) = D.46907_45;

<bb 32>:
  D.46908_46 = switch_stristr ("ACCEPT_ANY_PACKETS", str_1(D));
  if (D.46908_46 != 0B)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.46854_47 = *flag_pole_3(D);
  D.46911_48 = D.46854_47 | 128;
  *flag_pole_3(D) = D.46911_48;

<bb 34>:
  D.46912_49 = switch_stristr ("~ACCEPT_ANY_PACKETS", str_1(D));
  if (D.46912_49 != 0B)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  D.46854_50 = *flag_pole_3(D);
  D.46915_51 = D.46854_50 & 4294967167;
  *flag_pole_3(D) = D.46915_51;

<bb 36>:
  D.46916_52 = switch_stristr ("ACCEPT_ANY_PAYLOAD", str_1(D));
  if (D.46916_52 != 0B)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  D.46854_53 = *flag_pole_3(D);
  D.46919_54 = D.46854_53 | 2048;
  *flag_pole_3(D) = D.46919_54;

<bb 38>:
  D.46920_55 = switch_stristr ("~ACCEPT_ANY_PAYLOAD", str_1(D));
  if (D.46920_55 != 0B)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.46854_56 = *flag_pole_3(D);
  D.46923_57 = D.46854_56 & 4294965247;
  *flag_pole_3(D) = D.46923_57;

<bb 40>:
  D.46924_58 = switch_stristr ("GEN_ONE_GEN_ALL", str_1(D));
  if (D.46924_58 != 0B)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.46854_59 = *flag_pole_3(D);
  D.46927_60 = D.46854_59 | 256;
  *flag_pole_3(D) = D.46927_60;

<bb 42>:
  D.46928_61 = switch_stristr ("~GEN_ONE_GEN_ALL", str_1(D));
  if (D.46928_61 != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  D.46854_62 = *flag_pole_3(D);
  D.46931_63 = D.46854_62 & 4294967039;
  *flag_pole_3(D) = D.46931_63;

<bb 44>:
  D.46932_64 = switch_stristr ("CHANGE_SSRC_ON_MARKER", str_1(D));
  if (D.46932_64 != 0B)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  D.46854_65 = *flag_pole_3(D);
  D.46935_66 = D.46854_65 | 512;
  *flag_pole_3(D) = D.46935_66;

<bb 46>:
  D.46936_67 = switch_stristr ("~CHANGE_SSRC_ON_MARKER", str_1(D));
  if (D.46936_67 != 0B)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.46854_68 = *flag_pole_3(D);
  D.46939_69 = D.46854_68 & 4294966783;
  *flag_pole_3(D) = D.46939_69;

<bb 48>:
  D.46940_70 = switch_stristr ("FLUSH_JB_ON_DTMF", str_1(D));
  if (D.46940_70 != 0B)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  D.46854_71 = *flag_pole_3(D);
  D.46943_72 = D.46854_71 | 1024;
  *flag_pole_3(D) = D.46943_72;

<bb 50>:
  D.46944_73 = switch_stristr ("~FLUSH_JB_ON_DTMF", str_1(D));
  if (D.46944_73 != 0B)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  D.46854_74 = *flag_pole_3(D);
  D.46947_75 = D.46854_74 & 4294966271;
  *flag_pole_3(D) = D.46947_75;

<bb 52>:
  return;

}



;; Function switch_core_media_add_crypto (switch_core_media_add_crypto)



Renaming block #0



Renaming block #2

Renaming statement p = __builtin_strchr (key_str, 32);

Renaming statement if (p != 0B)



Renaming block #3

Renaming statement D.46818 = *p;

Renaming statement if (D.46818 != 0)



Renaming block #4

Renaming statement D.46821 = p + 1;

Renaming statement D.46822 = *D.46821;

Renaming statement if (D.46822 != 0)



Renaming block #5

Renaming statement p = p + 1;

Renaming statement type = switch_core_media_crypto_str2type (p);

Renaming statement if (type == 9)



Renaming block #6

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 949, 0B, 3, "Parse Error near [%s]\n", p);



Renaming block #7

Renaming statement p = __builtin_strchr (p, 32);

Renaming statement if (p != 0B)



Renaming block #8

Renaming statement D.46818 = *p;

Renaming statement if (D.46818 != 0)



Renaming block #9

Renaming statement D.46821 = p + 1;

Renaming statement D.46822 = *D.46821;

Renaming statement if (D.46822 != 0)



Renaming block #10

Renaming statement p = p + 1;

Renaming statement D.46833 = strncasecmp (p, "inline:", 7);

Renaming statement if (D.46833 != 0)



Renaming block #11

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 957, 0B, 3, "Parse Error near [%s]\n", p);



Renaming block #12

Renaming statement p = p + 7;

Renaming statement switch_b64_decode (p, &key, 64);

Renaming statement if (direction == 0)



Renaming block #13

Renaming statement D.46838 = &ssec->local_raw_key[0];

Renaming statement D.46839 = (void * restrict) D.46838;

Renaming statement D.46840 = (const void * restrict) &key[0];

Renaming statement D.46841 = SUITES[type].keylen;

Renaming statement D.46842 = (size_t) D.46841;

Renaming statement memcpy (D.46839, D.46840, D.46842);



Renaming block #14

Renaming statement D.46844 = &ssec->remote_raw_key[0];

Renaming statement D.46845 = (void * restrict) D.46844;

Renaming statement D.46840 = (const void * restrict) &key[0];

Renaming statement D.46841 = SUITES[type].keylen;

Renaming statement D.46842 = (size_t) D.46841;

Renaming statement memcpy (D.46845, D.46840, D.46842);



Renaming block #15

Renaming statement D.46846 = 0;



Renaming block #16

Renaming statement D.46846 = 1;



Renaming block #17

Renaming statement return D.46846;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement p_3 = __builtin_strchr (key_str_2(D), 32);



Registering new PHI nodes in block #3

Updating SSA information for statement D.46818_4 = *p_3;



Registering new PHI nodes in block #4

Updating SSA information for statement D.46822_6 = *D.46821_5;



Registering new PHI nodes in block #5

Updating SSA information for statement type_8 = switch_core_media_crypto_str2type (p_7);



Registering new PHI nodes in block #6

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 949, 0B, 3, "Parse Error near [%s]\n", p_7);



Registering new PHI nodes in block #7

Updating SSA information for statement p_9 = __builtin_strchr (p_7, 32);



Registering new PHI nodes in block #8

Updating SSA information for statement D.46818_10 = *p_9;



Registering new PHI nodes in block #9

Updating SSA information for statement D.46822_12 = *D.46821_11;



Registering new PHI nodes in block #10

Updating SSA information for statement D.46833_14 = strncasecmp (p_13, "inline:", 7);



Registering new PHI nodes in block #11

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 957, 0B, 3, "Parse Error near [%s]\n", p_13);



Registering new PHI nodes in block #12

Updating SSA information for statement switch_b64_decode (p_15, &key, 64);



Registering new PHI nodes in block #13

Updating SSA information for statement D.46841_21 = SUITES[type_8].keylen;

Updating SSA information for statement memcpy (D.46839_19, D.46840_20, D.46842_22);



Registering new PHI nodes in block #14

Updating SSA information for statement D.46841_26 = SUITES[type_8].keylen;

Updating SSA information for statement memcpy (D.46845_24, D.46840_25, D.46842_27);



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 976, 0B, 3, "Error!\n");



Registering new PHI nodes in block #17



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 18
Number of blocks to update: 17 ( 94%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 


Scope blocks after cleanups:

{ Scope block #0 
  unsigned char key[64];
  switch_rtp_crypto_key_type_t type;
  char * p;
  static const char __func__[29] = "switch_core_media_add_crypto";
  void bad = <<< error >>>; (unused)

}
switch_core_media_add_crypto (struct switch_secure_settings_t * ssec, const char * key_str, switch_rtp_crypto_direction_t direction)
{
  static const char __func__[29] = "switch_core_media_add_crypto";
  char * p;
  switch_rtp_crypto_key_type_t type;
  unsigned char key[64];
  switch_status_t D.46846;
  void * restrict D.46845;
  unsigned char * D.46844;
  size_t D.46842;
  int D.46841;
  const void * restrict D.46840;
  void * restrict D.46839;
  unsigned char * D.46838;
  int D.46833;
  char D.46822;
  char * D.46821;
  char D.46818;

<bb 2>:
  p_3 = __builtin_strchr (key_str_2(D), 32);
  # DEBUG p => p_3
  if (p_3 != 0B)
    goto <bb 3>;
  else
    goto <bb 16> (bad);

<bb 3>:
  D.46818_4 = *p_3;
  if (D.46818_4 != 0)
    goto <bb 4>;
  else
    goto <bb 16> (bad);

<bb 4>:
  D.46821_5 = p_3 + 1;
  D.46822_6 = *D.46821_5;
  if (D.46822_6 != 0)
    goto <bb 5>;
  else
    goto <bb 16> (bad);

<bb 5>:
  p_7 = p_3 + 1;
  # DEBUG p => p_7
  type_8 = switch_core_media_crypto_str2type (p_7);
  # DEBUG type => type_8
  if (type_8 == 9)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 949, 0B, 3, "Parse Error near [%s]\n", p_7);
  goto <bb 16> (bad);

<bb 7>:
  p_9 = __builtin_strchr (p_7, 32);
  # DEBUG p => p_9
  if (p_9 != 0B)
    goto <bb 8>;
  else
    goto <bb 16> (bad);

<bb 8>:
  D.46818_10 = *p_9;
  if (D.46818_10 != 0)
    goto <bb 9>;
  else
    goto <bb 16> (bad);

<bb 9>:
  D.46821_11 = p_9 + 1;
  D.46822_12 = *D.46821_11;
  if (D.46822_12 != 0)
    goto <bb 10>;
  else
    goto <bb 16> (bad);

<bb 10>:
  p_13 = p_9 + 1;
  # DEBUG p => p_13
  D.46833_14 = strncasecmp (p_13, "inline:", 7);
  if (D.46833_14 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 957, 0B, 3, "Parse Error near [%s]\n", p_13);
  goto <bb 16> (bad);

<bb 12>:
  p_15 = p_13 + 7;
  # DEBUG p => p_15
  switch_b64_decode (p_15, &key, 64);
  if (direction_16(D) == 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.46838_18 = &ssec_17(D)->local_raw_key[0];
  D.46839_19 = (void * restrict) D.46838_18;
  D.46840_20 = (const void * restrict) &key[0];
  D.46841_21 = SUITES[type_8].keylen;
  D.46842_22 = (size_t) D.46841_21;
  memcpy (D.46839_19, D.46840_20, D.46842_22);
  goto <bb 15>;

<bb 14>:
  D.46844_23 = &ssec_17(D)->remote_raw_key[0];
  D.46845_24 = (void * restrict) D.46844_23;
  D.46840_25 = (const void * restrict) &key[0];
  D.46841_26 = SUITES[type_8].keylen;
  D.46842_27 = (size_t) D.46841_26;
  memcpy (D.46845_24, D.46840_25, D.46842_27);

<bb 15>:
  D.46846_28 = 0;
  goto <bb 17>;

bad:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 976, 0B, 3, "Error!\n");
  D.46846_29 = 1;

<bb 17>:
  # D.46846_1 = PHI <D.46846_28(15), D.46846_29(16)>
  return D.46846_1;

}



;; Function switch_core_session_apply_crypto (switch_core_session_apply_crypto)



Renaming block #0



Renaming block #2

Renaming statement if (type == 0)



Renaming block #3

Renaming statement varname = "rtp_secure_audio_confirmed";



Renaming block #4

Renaming statement varname = "rtp_secure_video_confirmed";



Renaming block #5

Renaming statement D.43876 = session->media_handle;

Renaming statement if (D.43876 == 0B)



Renaming block #6

Renaming statement D.43876 = session->media_handle;

Renaming statement D.43879 = &D.43876->engines;

Renaming statement D.43880 = type * 11416;

Renaming statement engine = D.43879 + D.43880;

Renaming statement D.43881 = session->channel;

Renaming statement D.43882 = switch_channel_test_flag (D.43881, 84);

Renaming statement if (D.43882 != 0)



Renaming block #7

Renaming statement D.43885 = engine->crypto_type;

Renaming statement D.43886 = engine->ssec[D.43885].remote_crypto_key;

Renaming statement if (D.43886 != 0B)



Renaming block #8

Renaming statement D.43881 = session->channel;

Renaming statement D.43889 = switch_channel_test_flag (D.43881, 92);

Renaming statement if (D.43889 != 0)



Renaming block #9

Renaming statement D.43892 = &engine->ssec;

Renaming statement D.43885 = engine->crypto_type;

Renaming statement D.43893 = D.43885 * 144;

Renaming statement D.43894 = D.43892 + D.43893;

Renaming statement D.43885 = engine->crypto_type;

Renaming statement D.43886 = engine->ssec[D.43885].remote_crypto_key;

Renaming statement switch_core_media_add_crypto (D.43894, D.43886, 1);

Renaming statement D.43895 = engine->rtp_session;

Renaming statement D.43885 = engine->crypto_type;

Renaming statement D.43896 = engine->ssec[D.43885].crypto_type;

Renaming statement D.43885 = engine->crypto_type;

Renaming statement D.43897 = &engine->ssec[D.43885].local_raw_key;

Renaming statement D.43885 = engine->crypto_type;

Renaming statement D.43896 = engine->ssec[D.43885].crypto_type;

Renaming statement D.43898 = SUITES[D.43896].keylen;

Renaming statement D.43899 = (switch_size_t) D.43898;

Renaming statement switch_rtp_add_crypto_key (D.43895, 0, 1, D.43896, D.43897, D.43899);

Renaming statement D.43895 = engine->rtp_session;

Renaming statement D.43885 = engine->crypto_type;

Renaming statement D.43900 = engine->ssec[D.43885].crypto_tag;

Renaming statement D.43901 = (uint32_t) D.43900;

Renaming statement D.43885 = engine->crypto_type;

Renaming statement D.43896 = engine->ssec[D.43885].crypto_type;

Renaming statement D.43885 = engine->crypto_type;

Renaming statement D.43902 = &engine->ssec[D.43885].remote_raw_key;

Renaming statement D.43885 = engine->crypto_type;

Renaming statement D.43896 = engine->ssec[D.43885].crypto_type;

Renaming statement D.43898 = SUITES[D.43896].keylen;

Renaming statement D.43899 = (switch_size_t) D.43898;

Renaming statement switch_rtp_add_crypto_key (D.43895, 1, D.43901, D.43896, D.43902, D.43899);

Renaming statement D.43881 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.43881, varname, "true", 1);

Renaming statement D.43881 = session->channel;

Renaming statement D.43885 = engine->crypto_type;

Renaming statement D.43903 = SUITES[D.43885].name;

Renaming statement switch_channel_set_variable_var_check (D.43881, "rtp_secure_media_negotiated", D.43903, 1);



Renaming block #10



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5

Updating SSA information for statement D.43876_6 = session_5(D)->media_handle;



Registering new PHI nodes in block #6

Updating SSA information for statement D.43876_7 = session_5(D)->media_handle;

Updating SSA information for statement D.43881_11 = session_5(D)->channel;

Updating SSA information for statement D.43882_12 = switch_channel_test_flag (D.43881_11, 84);



Registering new PHI nodes in block #7

Updating SSA information for statement D.43885_13 = engine_10->crypto_type;

Updating SSA information for statement D.43886_14 = engine_10->ssec[D.43885_13].remote_crypto_key;



Registering new PHI nodes in block #8

Updating SSA information for statement D.43881_15 = session_5(D)->channel;

Updating SSA information for statement D.43889_16 = switch_channel_test_flag (D.43881_15, 92);



Registering new PHI nodes in block #9

Updating SSA information for statement D.43885_18 = engine_10->crypto_type;

Updating SSA information for statement D.43885_21 = engine_10->crypto_type;

Updating SSA information for statement D.43886_22 = engine_10->ssec[D.43885_21].remote_crypto_key;

Updating SSA information for statement switch_core_media_add_crypto (D.43894_20, D.43886_22, 1);

Updating SSA information for statement D.43895_23 = engine_10->rtp_session;

Updating SSA information for statement D.43885_24 = engine_10->crypto_type;

Updating SSA information for statement D.43896_25 = engine_10->ssec[D.43885_24].crypto_type;

Updating SSA information for statement D.43885_26 = engine_10->crypto_type;

Updating SSA information for statement D.43885_28 = engine_10->crypto_type;

Updating SSA information for statement D.43896_29 = engine_10->ssec[D.43885_28].crypto_type;

Updating SSA information for statement D.43898_30 = SUITES[D.43896_29].keylen;

Updating SSA information for statement switch_rtp_add_crypto_key (D.43895_23, 0, 1, D.43896_29, D.43897_27, D.43899_31);

Updating SSA information for statement D.43895_32 = engine_10->rtp_session;

Updating SSA information for statement D.43885_33 = engine_10->crypto_type;

Updating SSA information for statement D.43900_34 = engine_10->ssec[D.43885_33].crypto_tag;

Updating SSA information for statement D.43885_36 = engine_10->crypto_type;

Updating SSA information for statement D.43896_37 = engine_10->ssec[D.43885_36].crypto_type;

Updating SSA information for statement D.43885_38 = engine_10->crypto_type;

Updating SSA information for statement D.43885_40 = engine_10->crypto_type;

Updating SSA information for statement D.43896_41 = engine_10->ssec[D.43885_40].crypto_type;

Updating SSA information for statement D.43898_42 = SUITES[D.43896_41].keylen;

Updating SSA information for statement switch_rtp_add_crypto_key (D.43895_32, 1, D.43901_35, D.43896_41, D.43902_39, D.43899_43);

Updating SSA information for statement D.43881_44 = session_5(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43881_44, varname_1, "true", 1);

Updating SSA information for statement D.43881_45 = session_5(D)->channel;

Updating SSA information for statement D.43885_46 = engine_10->crypto_type;

Updating SSA information for statement D.43903_47 = SUITES[D.43885_46].name;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43881_45, "rtp_secure_media_negotiated", D.43903_47, 1);



Registering new PHI nodes in block #10



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 11
Number of blocks to update: 10 ( 91%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_engine_t * engine;
  const char * varname;

}
switch_core_session_apply_crypto (struct switch_core_session_t * session, switch_media_type_t type)
{
  const char * varname;
  struct switch_rtp_engine_t * engine;
  char * D.43903;
  unsigned char[64] * D.43902;
  uint32_t D.43901;
  int D.43900;
  switch_size_t D.43899;
  int D.43898;
  unsigned char[64] * D.43897;
  switch_rtp_crypto_key_type_t D.43896;
  struct switch_rtp_t * D.43895;
  struct switch_secure_settings_t * D.43894;
  unsigned int D.43893;
  struct switch_secure_settings_t[10] * D.43892;
  uint32_t D.43889;
  char * D.43886;
  switch_rtp_crypto_key_type_t D.43885;
  uint32_t D.43882;
  struct switch_channel_t * D.43881;
  unsigned int D.43880;
  struct switch_rtp_engine_t[2] * D.43879;
  struct switch_media_handle_t * D.43876;

<bb 2>:
  if (type_2(D) == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  varname_3 = "rtp_secure_audio_confirmed";
  # DEBUG varname => varname_3
  goto <bb 5>;

<bb 4>:
  varname_4 = "rtp_secure_video_confirmed";
  # DEBUG varname => varname_4

<bb 5>:
  # varname_1 = PHI <varname_3(3), varname_4(4)>
  # DEBUG varname => varname_1
  D.43876_6 = session_5(D)->media_handle;
  if (D.43876_6 == 0B)
    goto <bb 10>;
  else
    goto <bb 6>;

<bb 6>:
  D.43876_7 = session_5(D)->media_handle;
  D.43879_8 = &D.43876_7->engines;
  D.43880_9 = type_2(D) * 11416;
  engine_10 = D.43879_8 + D.43880_9;
  # DEBUG engine => engine_10
  D.43881_11 = session_5(D)->channel;
  D.43882_12 = switch_channel_test_flag (D.43881_11, 84);
  if (D.43882_12 != 0)
    goto <bb 10>;
  else
    goto <bb 7>;

<bb 7>:
  D.43885_13 = engine_10->crypto_type;
  D.43886_14 = engine_10->ssec[D.43885_13].remote_crypto_key;
  if (D.43886_14 != 0B)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  D.43881_15 = session_5(D)->channel;
  D.43889_16 = switch_channel_test_flag (D.43881_15, 92);
  if (D.43889_16 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.43892_17 = &engine_10->ssec;
  D.43885_18 = engine_10->crypto_type;
  D.43893_19 = D.43885_18 * 144;
  D.43894_20 = D.43892_17 + D.43893_19;
  D.43885_21 = engine_10->crypto_type;
  D.43886_22 = engine_10->ssec[D.43885_21].remote_crypto_key;
  switch_core_media_add_crypto (D.43894_20, D.43886_22, 1);
  D.43895_23 = engine_10->rtp_session;
  D.43885_24 = engine_10->crypto_type;
  D.43896_25 = engine_10->ssec[D.43885_24].crypto_type;
  D.43885_26 = engine_10->crypto_type;
  D.43897_27 = &engine_10->ssec[D.43885_26].local_raw_key;
  D.43885_28 = engine_10->crypto_type;
  D.43896_29 = engine_10->ssec[D.43885_28].crypto_type;
  D.43898_30 = SUITES[D.43896_29].keylen;
  D.43899_31 = (switch_size_t) D.43898_30;
  switch_rtp_add_crypto_key (D.43895_23, 0, 1, D.43896_29, D.43897_27, D.43899_31);
  D.43895_32 = engine_10->rtp_session;
  D.43885_33 = engine_10->crypto_type;
  D.43900_34 = engine_10->ssec[D.43885_33].crypto_tag;
  D.43901_35 = (uint32_t) D.43900_34;
  D.43885_36 = engine_10->crypto_type;
  D.43896_37 = engine_10->ssec[D.43885_36].crypto_type;
  D.43885_38 = engine_10->crypto_type;
  D.43902_39 = &engine_10->ssec[D.43885_38].remote_raw_key;
  D.43885_40 = engine_10->crypto_type;
  D.43896_41 = engine_10->ssec[D.43885_40].crypto_type;
  D.43898_42 = SUITES[D.43896_41].keylen;
  D.43899_43 = (switch_size_t) D.43898_42;
  switch_rtp_add_crypto_key (D.43895_32, 1, D.43901_35, D.43896_41, D.43902_39, D.43899_43);
  D.43881_44 = session_5(D)->channel;
  switch_channel_set_variable_var_check (D.43881_44, varname_1, "true", 1);
  D.43881_45 = session_5(D)->channel;
  D.43885_46 = engine_10->crypto_type;
  D.43903_47 = SUITES[D.43885_46].name;
  switch_channel_set_variable_var_check (D.43881_45, "rtp_secure_media_negotiated", D.43903_47, 1);

<bb 10>:
  return;

}



;; Function switch_core_media_set_rtp_session (switch_core_media_set_rtp_session)



Renaming block #0



Renaming block #2

Renaming statement D.46810 = session->media_handle;

Renaming statement if (D.46810 == 0B)



Renaming block #3

Renaming statement D.46810 = session->media_handle;

Renaming statement D.46813 = &D.46810->engines;

Renaming statement D.46814 = type * 11416;

Renaming statement engine = D.46813 + D.46814;

Renaming statement engine->rtp_session = rtp_session;

Renaming statement engine->type = type;



Renaming block #4



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.46810_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #3

Updating SSA information for statement D.46810_3 = session_1(D)->media_handle;

Updating SSA information for statement engine_7->rtp_session = rtp_session_8(D);

Updating SSA information for statement engine_7->type = type_5(D);



Registering new PHI nodes in block #4



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)

Affected blocks: 0 2 3 4 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_engine_t * engine;

}
switch_core_media_set_rtp_session (struct switch_core_session_t * session, switch_media_type_t type, struct switch_rtp_t * rtp_session)
{
  struct switch_rtp_engine_t * engine;
  unsigned int D.46814;
  struct switch_rtp_engine_t[2] * D.46813;
  struct switch_media_handle_t * D.46810;

<bb 2>:
  D.46810_2 = session_1(D)->media_handle;
  if (D.46810_2 == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

<bb 3>:
  D.46810_3 = session_1(D)->media_handle;
  D.46813_4 = &D.46810_3->engines;
  D.46814_6 = type_5(D) * 11416;
  engine_7 = D.46813_4 + D.46814_6;
  # DEBUG engine => engine_7
  engine_7->rtp_session = rtp_session_8(D);
  engine_7->type = type_5(D);

<bb 4>:
  return;

}



;; Function switch_core_session_check_incoming_crypto (switch_core_session_check_incoming_crypto)



Renaming block #0



Renaming block #2

Renaming statement got_crypto = 0;

Renaming statement i = 0;

Renaming statement ctype = 0;

Renaming statement vval = 0B;

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #3

Renaming statement D.46721 = 0;



Renaming block #4

Renaming statement D.46722 = smh->crypto_mode;

Renaming statement if (D.46722 == 2)



Renaming block #5

Renaming statement D.46721 = -1;



Renaming block #6

Renaming statement D.46725 = session->media_handle;

Renaming statement D.46726 = &D.46725->engines;

Renaming statement D.46727 = type * 11416;

Renaming statement engine = D.46726 + D.46727;

Renaming statement i = 0;



Renaming block #10

Renaming statement D.46728 = smh->crypto_suite_order[i];

Renaming statement if (D.46728 != 9)



Renaming block #7

Renaming statement D.46728 = smh->crypto_suite_order[i];

Renaming statement j = SUITES[D.46728].type;

Renaming statement D.46729 = SUITES[j].name;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1179, session, 7, "looking for crypto suite [%s] in [%s]\n", D.46729, crypto);

Renaming statement D.46729 = SUITES[j].name;

Renaming statement D.46730 = switch_stristr (D.46729, crypto);

Renaming statement if (D.46730 != 0B)



Renaming block #8

Renaming statement D.46733 = SUITES[j].type;

Renaming statement ctype = (int) D.46733;

Renaming statement vval = SUITES[j].name;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1184, session, 7, "Found suite %s\n", vval);

Renaming statement D.46734 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.46734, "rtp_secure_media_negotiated", vval, 1);



Renaming block #9

Renaming statement i = i + 1;



Renaming block #11

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46738 = engine->ssec[D.46737].remote_crypto_key;

Renaming statement if (D.46738 != 0B)



Renaming block #12

Renaming statement D.46740 = engine->rtp_session;

Renaming statement D.46741 = switch_rtp_ready (D.46740);

Renaming statement if (D.46741 != 0)



Renaming block #13

Renaming statement if (crypto != 0B)



Renaming block #14

Renaming statement D.46737 = engine->crypto_type;

Renaming statement if (D.46737 != 9)



Renaming block #15

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46738 = engine->ssec[D.46737].remote_crypto_key;

Renaming statement D.38621 = __builtin_strcmp (crypto, D.46738);

Renaming statement if (D.38621 == 0)



Renaming block #16

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1193, session, 7, "Existing key is still valid.\n");

Renaming statement got_crypto = 1;



Renaming block #17

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46738 = engine->ssec[D.46737].remote_crypto_key;

Renaming statement a = switch_stristr ("AE", D.46738);

Renaming statement b = switch_stristr ("AE", crypto);

Renaming statement if (sdp_type == 0)



Renaming block #18

Renaming statement if (vval == 0B)



Renaming block #19

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1201, session, 7, "Unsupported Crypto [%s]\n", crypto);



Renaming block #20

Renaming statement D.46734 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.46734, varname, vval, 1);

Renaming statement D.46725 = session->media_handle;

Renaming statement ctype.166 = (switch_rtp_crypto_key_type_t) ctype;

Renaming statement switch_core_media_build_crypto (D.46725, type, crypto_tag, ctype.166, 0, 1);

Renaming statement D.46740 = engine->rtp_session;

Renaming statement D.46753 = atoi (crypto);

Renaming statement D.46754 = (uint32_t) D.46753;

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46755 = engine->ssec[D.46737].crypto_type;

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46756 = &engine->ssec[D.46737].local_raw_key;

Renaming statement D.46757 = SUITES[ctype].keylen;

Renaming statement D.46758 = (switch_size_t) D.46757;

Renaming statement switch_rtp_add_crypto_key (D.46740, 0, D.46754, D.46755, D.46756, D.46758);



Renaming block #21

Renaming statement D.46761 = a != 0B;

Renaming statement D.46762 = b != 0B;

Renaming statement D.46763 = D.46761 && D.46762;

Renaming statement if (D.46763 != 0)



Renaming block #22

Renaming statement D.46765 = strncasecmp (a, b, 23);

Renaming statement if (D.46765 == 0)



Renaming block #23

Renaming statement ctype.166 = (switch_rtp_crypto_key_type_t) ctype;

Renaming statement engine->crypto_type = ctype.166;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1214, session, 7, "Change Remote key to [%s]\n", crypto);

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46767 = switch_core_perform_session_strdup (session, crypto, "src/switch_core_media.c", &__func__, 1215);

Renaming statement engine->ssec[D.46737].remote_crypto_key = D.46767;

Renaming statement D.46768 = engine->type;

Renaming statement if (D.46768 == 0)



Renaming block #24

Renaming statement D.46734 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.46734, "srtp_remote_audio_crypto_key", crypto, 1);

Renaming statement D.46734 = session->channel;

Renaming statement switch_channel_set_variable_printf (D.46734, "srtp_remote_audio_crypto_tag", "%d", crypto_tag);

Renaming statement D.46734 = session->channel;

Renaming statement ctype.166 = (switch_rtp_crypto_key_type_t) ctype;

Renaming statement D.46771 = switch_core_media_crypto_type2str (ctype.166);

Renaming statement switch_channel_set_variable_printf (D.46734, "srtp_remote_audio_crypto_type", "%s", D.46771);



Renaming block #25

Renaming statement D.46768 = engine->type;

Renaming statement if (D.46768 == 1)



Renaming block #26

Renaming statement D.46734 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.46734, "srtp_remote_video_crypto_key", crypto, 1);

Renaming statement D.46734 = session->channel;

Renaming statement switch_channel_set_variable_printf (D.46734, "srtp_remote_video_crypto_tag", "%d", crypto_tag);

Renaming statement D.46734 = session->channel;

Renaming statement ctype.166 = (switch_rtp_crypto_key_type_t) ctype;

Renaming statement D.46775 = switch_core_media_crypto_type2str (ctype.166);

Renaming statement switch_channel_set_variable_printf (D.46734, "srtp_remote_video_crypto_type", "%s", D.46775);



Renaming block #27

Renaming statement D.46737 = engine->crypto_type;

Renaming statement engine->ssec[D.46737].crypto_tag = crypto_tag;

Renaming statement D.46740 = engine->rtp_session;

Renaming statement D.46776 = switch_rtp_ready (D.46740);

Renaming statement if (D.46776 != 0)



Renaming block #28

Renaming statement D.46734 = session->channel;

Renaming statement D.46779 = switch_channel_test_flag (D.46734, 92);

Renaming statement if (D.46779 != 0)



Renaming block #29

Renaming statement D.46782 = &engine->ssec;

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46783 = D.46737 * 144;

Renaming statement D.46784 = D.46782 + D.46783;

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46738 = engine->ssec[D.46737].remote_crypto_key;

Renaming statement switch_core_media_add_crypto (D.46784, D.46738, 1);

Renaming statement D.46740 = engine->rtp_session;

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46785 = engine->ssec[D.46737].crypto_tag;

Renaming statement D.46786 = (uint32_t) D.46785;

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46755 = engine->ssec[D.46737].crypto_type;

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46787 = &engine->ssec[D.46737].remote_raw_key;

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46755 = engine->ssec[D.46737].crypto_type;

Renaming statement D.46788 = SUITES[D.46755].keylen;

Renaming statement D.46789 = (switch_size_t) D.46788;

Renaming statement switch_rtp_add_crypto_key (D.46740, 1, D.46786, D.46755, D.46787, D.46789);



Renaming block #30

Renaming statement got_crypto = got_crypto + 1;



Renaming block #31

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1238, session, 7, "Ignoring unacceptable key\n");



Renaming block #32

Renaming statement D.46740 = engine->rtp_session;

Renaming statement D.46790 = switch_rtp_ready (D.46740);

Renaming statement if (D.46790 == 0)



Renaming block #33

Renaming statement if (vval == 0B)



Renaming block #34

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1244, session, 7, "Unsupported Crypto [%s]\n", crypto);



Renaming block #35

Renaming statement ctype.166 = (switch_rtp_crypto_key_type_t) ctype;

Renaming statement engine->crypto_type = ctype.166;

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46795 = switch_core_perform_session_strdup (session, crypto, "src/switch_core_media.c", &__func__, 1249);

Renaming statement engine->ssec[D.46737].remote_crypto_key = D.46795;

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46738 = engine->ssec[D.46737].remote_crypto_key;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1250, session, 7, "Set Remote Key [%s]\n", D.46738);

Renaming statement D.46768 = engine->type;

Renaming statement if (D.46768 == 0)



Renaming block #36

Renaming statement D.46734 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.46734, "srtp_remote_audio_crypto_key", crypto, 1);

Renaming statement D.46734 = session->channel;

Renaming statement ctype.166 = (switch_rtp_crypto_key_type_t) ctype;

Renaming statement D.46798 = switch_core_media_crypto_type2str (ctype.166);

Renaming statement switch_channel_set_variable_printf (D.46734, "srtp_remote_audio_crypto_type", "%s", D.46798);



Renaming block #37

Renaming statement D.46768 = engine->type;

Renaming statement if (D.46768 == 1)



Renaming block #38

Renaming statement D.46734 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.46734, "srtp_remote_video_crypto_key", crypto, 1);

Renaming statement D.46734 = session->channel;

Renaming statement ctype.166 = (switch_rtp_crypto_key_type_t) ctype;

Renaming statement D.46802 = switch_core_media_crypto_type2str (ctype.166);

Renaming statement switch_channel_set_variable_printf (D.46734, "srtp_remote_video_crypto_type", "%s", D.46802);



Renaming block #39

Renaming statement D.46737 = engine->crypto_type;

Renaming statement engine->ssec[D.46737].crypto_tag = crypto_tag;

Renaming statement got_crypto = got_crypto + 1;

Renaming statement D.46734 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.46734, varname, vval, 1);

Renaming statement D.46803 = smh->session;

Renaming statement D.46804 = D.46803->channel;

Renaming statement switch_channel_set_flag_value (D.46804, 92, 1);

Renaming statement D.46737 = engine->crypto_type;

Renaming statement D.46805 = engine->ssec[D.46737].local_crypto_key;

Renaming statement D.46806 = _zstr (D.46805);

Renaming statement if (D.46806 != 0)



Renaming block #40

Renaming statement D.46725 = session->media_handle;

Renaming statement ctype.166 = (switch_rtp_crypto_key_type_t) ctype;

Renaming statement switch_core_media_build_crypto (D.46725, type, crypto_tag, ctype.166, 0, 1);



Renaming block #41

Renaming statement D.46721 = got_crypto;



Renaming block #42

Renaming statement return D.46721;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement smh_11 = session_10(D)->media_handle;



Registering new PHI nodes in block #3



Registering new PHI nodes in block #4

Updating SSA information for statement D.46722_13 = smh_11->crypto_mode;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.46725_15 = session_10(D)->media_handle;



Registering new PHI nodes in block #10

Updating SSA information for statement D.46728_21 = smh_11->crypto_suite_order[i_2];



Registering new PHI nodes in block #7

Updating SSA information for statement D.46728_22 = smh_11->crypto_suite_order[i_2];

Updating SSA information for statement j_23 = SUITES[D.46728_22].type;

Updating SSA information for statement D.46729_24 = SUITES[j_23].name;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1179, session_10(D), 7, "looking for crypto suite [%s] in [%s]\n", D.46729_24, crypto_25(D));

Updating SSA information for statement D.46729_26 = SUITES[j_23].name;

Updating SSA information for statement D.46730_27 = switch_stristr (D.46729_26, crypto_25(D));



Registering new PHI nodes in block #8

Updating SSA information for statement D.46733_28 = SUITES[j_23].type;

Updating SSA information for statement vval_30 = SUITES[j_23].name;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1184, session_10(D), 7, "Found suite %s\n", vval_30);

Updating SSA information for statement D.46734_31 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46734_31, "rtp_secure_media_negotiated", vval_30, 1);



Registering new PHI nodes in block #9



Registering new PHI nodes in block #11

Updating SSA information for statement D.46737_33 = engine_19->crypto_type;

Updating SSA information for statement D.46738_34 = engine_19->ssec[D.46737_33].remote_crypto_key;



Registering new PHI nodes in block #12

Updating SSA information for statement D.46740_35 = engine_19->rtp_session;

Updating SSA information for statement D.46741_36 = switch_rtp_ready (D.46740_35);



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement D.46737_37 = engine_19->crypto_type;



Registering new PHI nodes in block #15

Updating SSA information for statement D.46737_38 = engine_19->crypto_type;

Updating SSA information for statement D.46738_39 = engine_19->ssec[D.46737_38].remote_crypto_key;

Updating SSA information for statement D.38621_40 = __builtin_strcmp (crypto_25(D), D.46738_39);



Registering new PHI nodes in block #16

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1193, session_10(D), 7, "Existing key is still valid.\n");



Registering new PHI nodes in block #17

Updating SSA information for statement D.46737_42 = engine_19->crypto_type;

Updating SSA information for statement D.46738_43 = engine_19->ssec[D.46737_42].remote_crypto_key;

Updating SSA information for statement a_44 = switch_stristr ("AE", D.46738_43);

Updating SSA information for statement b_45 = switch_stristr ("AE", crypto_25(D));



Registering new PHI nodes in block #18



Registering new PHI nodes in block #19

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1201, session_10(D), 7, "Unsupported Crypto [%s]\n", crypto_25(D));



Registering new PHI nodes in block #20

Updating SSA information for statement D.46734_47 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46734_47, varname_48(D), vval_4, 1);

Updating SSA information for statement D.46725_49 = session_10(D)->media_handle;

Updating SSA information for statement switch_core_media_build_crypto (D.46725_49, type_17(D), crypto_tag_51(D), ctype.166_50, 0, 1);

Updating SSA information for statement D.46740_52 = engine_19->rtp_session;

Updating SSA information for statement D.46753_53 = atoi (crypto_25(D));

Updating SSA information for statement D.46737_55 = engine_19->crypto_type;

Updating SSA information for statement D.46755_56 = engine_19->ssec[D.46737_55].crypto_type;

Updating SSA information for statement D.46737_57 = engine_19->crypto_type;

Updating SSA information for statement D.46757_59 = SUITES[ctype_3].keylen;

Updating SSA information for statement switch_rtp_add_crypto_key (D.46740_52, 0, D.46754_54, D.46755_56, D.46756_58, D.46758_60);



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22

Updating SSA information for statement D.46765_64 = strncasecmp (a_44, b_45, 23);



Registering new PHI nodes in block #23

Updating SSA information for statement engine_19->crypto_type = ctype.166_65;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1214, session_10(D), 7, "Change Remote key to [%s]\n", crypto_25(D));

Updating SSA information for statement D.46737_66 = engine_19->crypto_type;

Updating SSA information for statement D.46767_67 = switch_core_perform_session_strdup (session_10(D), crypto_25(D), "src/switch_core_media.c", &__func__, 1215);

Updating SSA information for statement engine_19->ssec[D.46737_66].remote_crypto_key = D.46767_67;

Updating SSA information for statement D.46768_68 = engine_19->type;



Registering new PHI nodes in block #24

Updating SSA information for statement D.46734_69 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46734_69, "srtp_remote_audio_crypto_key", crypto_25(D), 1);

Updating SSA information for statement D.46734_70 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_printf (D.46734_70, "srtp_remote_audio_crypto_tag", "%d", crypto_tag_51(D));

Updating SSA information for statement D.46734_71 = session_10(D)->channel;

Updating SSA information for statement D.46771_73 = switch_core_media_crypto_type2str (ctype.166_72);

Updating SSA information for statement switch_channel_set_variable_printf (D.46734_71, "srtp_remote_audio_crypto_type", "%s", D.46771_73);



Registering new PHI nodes in block #25

Updating SSA information for statement D.46768_74 = engine_19->type;



Registering new PHI nodes in block #26

Updating SSA information for statement D.46734_75 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46734_75, "srtp_remote_video_crypto_key", crypto_25(D), 1);

Updating SSA information for statement D.46734_76 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_printf (D.46734_76, "srtp_remote_video_crypto_tag", "%d", crypto_tag_51(D));

Updating SSA information for statement D.46734_77 = session_10(D)->channel;

Updating SSA information for statement D.46775_79 = switch_core_media_crypto_type2str (ctype.166_78);

Updating SSA information for statement switch_channel_set_variable_printf (D.46734_77, "srtp_remote_video_crypto_type", "%s", D.46775_79);



Registering new PHI nodes in block #27

Updating SSA information for statement D.46737_80 = engine_19->crypto_type;

Updating SSA information for statement engine_19->ssec[D.46737_80].crypto_tag = crypto_tag_51(D);

Updating SSA information for statement D.46740_81 = engine_19->rtp_session;

Updating SSA information for statement D.46776_82 = switch_rtp_ready (D.46740_81);



Registering new PHI nodes in block #28

Updating SSA information for statement D.46734_83 = session_10(D)->channel;

Updating SSA information for statement D.46779_84 = switch_channel_test_flag (D.46734_83, 92);



Registering new PHI nodes in block #29

Updating SSA information for statement D.46737_86 = engine_19->crypto_type;

Updating SSA information for statement D.46737_89 = engine_19->crypto_type;

Updating SSA information for statement D.46738_90 = engine_19->ssec[D.46737_89].remote_crypto_key;

Updating SSA information for statement switch_core_media_add_crypto (D.46784_88, D.46738_90, 1);

Updating SSA information for statement D.46740_91 = engine_19->rtp_session;

Updating SSA information for statement D.46737_92 = engine_19->crypto_type;

Updating SSA information for statement D.46785_93 = engine_19->ssec[D.46737_92].crypto_tag;

Updating SSA information for statement D.46737_95 = engine_19->crypto_type;

Updating SSA information for statement D.46755_96 = engine_19->ssec[D.46737_95].crypto_type;

Updating SSA information for statement D.46737_97 = engine_19->crypto_type;

Updating SSA information for statement D.46737_99 = engine_19->crypto_type;

Updating SSA information for statement D.46755_100 = engine_19->ssec[D.46737_99].crypto_type;

Updating SSA information for statement D.46788_101 = SUITES[D.46755_100].keylen;

Updating SSA information for statement switch_rtp_add_crypto_key (D.46740_91, 1, D.46786_94, D.46755_100, D.46787_98, D.46789_102);



Registering new PHI nodes in block #30



Registering new PHI nodes in block #31

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1238, session_10(D), 7, "Ignoring unacceptable key\n");



Registering new PHI nodes in block #32

Updating SSA information for statement D.46740_104 = engine_19->rtp_session;

Updating SSA information for statement D.46790_105 = switch_rtp_ready (D.46740_104);



Registering new PHI nodes in block #33



Registering new PHI nodes in block #34

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1244, session_10(D), 7, "Unsupported Crypto [%s]\n", crypto_25(D));



Registering new PHI nodes in block #35

Updating SSA information for statement engine_19->crypto_type = ctype.166_106;

Updating SSA information for statement D.46737_107 = engine_19->crypto_type;

Updating SSA information for statement D.46795_108 = switch_core_perform_session_strdup (session_10(D), crypto_25(D), "src/switch_core_media.c", &__func__, 1249);

Updating SSA information for statement engine_19->ssec[D.46737_107].remote_crypto_key = D.46795_108;

Updating SSA information for statement D.46737_109 = engine_19->crypto_type;

Updating SSA information for statement D.46738_110 = engine_19->ssec[D.46737_109].remote_crypto_key;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1250, session_10(D), 7, "Set Remote Key [%s]\n", D.46738_110);

Updating SSA information for statement D.46768_111 = engine_19->type;



Registering new PHI nodes in block #36

Updating SSA information for statement D.46734_112 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46734_112, "srtp_remote_audio_crypto_key", crypto_25(D), 1);

Updating SSA information for statement D.46734_113 = session_10(D)->channel;

Updating SSA information for statement D.46798_115 = switch_core_media_crypto_type2str (ctype.166_114);

Updating SSA information for statement switch_channel_set_variable_printf (D.46734_113, "srtp_remote_audio_crypto_type", "%s", D.46798_115);



Registering new PHI nodes in block #37

Updating SSA information for statement D.46768_116 = engine_19->type;



Registering new PHI nodes in block #38

Updating SSA information for statement D.46734_117 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46734_117, "srtp_remote_video_crypto_key", crypto_25(D), 1);

Updating SSA information for statement D.46734_118 = session_10(D)->channel;

Updating SSA information for statement D.46802_120 = switch_core_media_crypto_type2str (ctype.166_119);

Updating SSA information for statement switch_channel_set_variable_printf (D.46734_118, "srtp_remote_video_crypto_type", "%s", D.46802_120);



Registering new PHI nodes in block #39

Updating SSA information for statement D.46737_121 = engine_19->crypto_type;

Updating SSA information for statement engine_19->ssec[D.46737_121].crypto_tag = crypto_tag_51(D);

Updating SSA information for statement D.46734_123 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46734_123, varname_48(D), vval_4, 1);

Updating SSA information for statement D.46803_124 = smh_11->session;

Updating SSA information for statement D.46804_125 = D.46803_124->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.46804_125, 92, 1);

Updating SSA information for statement D.46737_126 = engine_19->crypto_type;

Updating SSA information for statement D.46805_127 = engine_19->ssec[D.46737_126].local_crypto_key;

Updating SSA information for statement D.46806_128 = _zstr (D.46805_127);



Registering new PHI nodes in block #40

Updating SSA information for statement D.46725_129 = session_10(D)->media_handle;

Updating SSA information for statement switch_core_media_build_crypto (D.46725_129, type_17(D), crypto_tag_51(D), ctype.166_130, 0, 1);



Registering new PHI nodes in block #41



Registering new PHI nodes in block #42



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 43
Number of blocks to update: 42 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 


Scope blocks after cleanups:

{ Scope block #0 
  int got_crypto;
  int i;
  int ctype;
  const char * vval;
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  static const char __func__[42] = "switch_core_session_check_incoming_crypto";
  void end = <<< error >>>; (unused)

  { Scope block #0 
    switch_rtp_crypto_key_type_t j;

  }

  { Scope block #0 
    size_t __s1_len; (unused)
    size_t __s2_len; (unused)

  }

  { Scope block #0 
    const char * a;
    const char * b;

  }

}
switch_core_session_check_incoming_crypto (struct switch_core_session_t * session, const char * varname, switch_media_type_t type, const char * crypto, int crypto_tag, switch_sdp_type_t sdp_type)
{
  const char * b;
  const char * a;
  switch_rtp_crypto_key_type_t j;
  static const char __func__[42] = "switch_core_session_check_incoming_crypto";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  const char * vval;
  int ctype;
  int i;
  int got_crypto;
  int D.46806;
  char * D.46805;
  struct switch_channel_t * D.46804;
  struct switch_core_session_t * D.46803;
  const char * D.46802;
  const char * D.46798;
  char * D.46795;
  uint8_t D.46790;
  switch_size_t D.46789;
  int D.46788;
  unsigned char[64] * D.46787;
  uint32_t D.46786;
  int D.46785;
  struct switch_secure_settings_t * D.46784;
  unsigned int D.46783;
  struct switch_secure_settings_t[10] * D.46782;
  uint32_t D.46779;
  uint8_t D.46776;
  const char * D.46775;
  const char * D.46771;
  switch_media_type_t D.46768;
  char * D.46767;
  int D.46765;
  _Bool D.46763;
  _Bool D.46762;
  _Bool D.46761;
  switch_size_t D.46758;
  int D.46757;
  unsigned char[64] * D.46756;
  switch_rtp_crypto_key_type_t D.46755;
  uint32_t D.46754;
  int D.46753;
  switch_rtp_crypto_key_type_t ctype.166;
  int D.38621;
  uint8_t D.46741;
  struct switch_rtp_t * D.46740;
  char * D.46738;
  switch_rtp_crypto_key_type_t D.46737;
  struct switch_channel_t * D.46734;
  switch_rtp_crypto_key_type_t D.46733;
  const char * D.46730;
  char * D.46729;
  switch_rtp_crypto_key_type_t D.46728;
  unsigned int D.46727;
  struct switch_rtp_engine_t[2] * D.46726;
  struct switch_media_handle_t * D.46725;
  switch_rtp_crypto_mode_t D.46722;
  int D.46721;

<bb 2>:
  got_crypto_6 = 0;
  # DEBUG got_crypto => got_crypto_6
  i_7 = 0;
  # DEBUG i => i_7
  ctype_8 = 0;
  # DEBUG ctype => ctype_8
  vval_9 = 0B;
  # DEBUG vval => vval_9
  smh_11 = session_10(D)->media_handle;
  # DEBUG smh => smh_11
  if (smh_11 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.46721_12 = 0;
  goto <bb 42>;

<bb 4>:
  D.46722_13 = smh_11->crypto_mode;
  if (D.46722_13 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.46721_14 = -1;
  goto <bb 42>;

<bb 6>:
  D.46725_15 = session_10(D)->media_handle;
  D.46726_16 = &D.46725_15->engines;
  D.46727_18 = type_17(D) * 11416;
  engine_19 = D.46726_16 + D.46727_18;
  # DEBUG engine => engine_19
  i_20 = 0;
  # DEBUG i => i_20
  goto <bb 10>;

<bb 7>:
  D.46728_22 = smh_11->crypto_suite_order[i_2];
  j_23 = SUITES[D.46728_22].type;
  # DEBUG j => j_23
  D.46729_24 = SUITES[j_23].name;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1179, session_10(D), 7, "looking for crypto suite [%s] in [%s]\n", D.46729_24, crypto_25(D));
  D.46729_26 = SUITES[j_23].name;
  D.46730_27 = switch_stristr (D.46729_26, crypto_25(D));
  if (D.46730_27 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.46733_28 = SUITES[j_23].type;
  ctype_29 = (int) D.46733_28;
  # DEBUG ctype => ctype_29
  vval_30 = SUITES[j_23].name;
  # DEBUG vval => vval_30
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1184, session_10(D), 7, "Found suite %s\n", vval_30);
  D.46734_31 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_31, "rtp_secure_media_negotiated", vval_30, 1);
  goto <bb 11>;

<bb 9>:
  i_32 = i_2 + 1;
  # DEBUG i => i_32

<bb 10>:
  # i_2 = PHI <i_20(6), i_32(9)>
  # DEBUG i => i_2
  D.46728_21 = smh_11->crypto_suite_order[i_2];
  if (D.46728_21 != 9)
    goto <bb 7>;
  else
    goto <bb 11>;

<bb 11>:
  # ctype_3 = PHI <ctype_29(8), ctype_8(10)>
  # vval_4 = PHI <vval_30(8), vval_9(10)>
  # DEBUG vval => vval_4
  # DEBUG ctype => ctype_3
  D.46737_33 = engine_19->crypto_type;
  D.46738_34 = engine_19->ssec[D.46737_33].remote_crypto_key;
  if (D.46738_34 != 0B)
    goto <bb 12>;
  else
    goto <bb 32>;

<bb 12>:
  D.46740_35 = engine_19->rtp_session;
  D.46741_36 = switch_rtp_ready (D.46740_35);
  if (D.46741_36 != 0)
    goto <bb 13>;
  else
    goto <bb 32>;

<bb 13>:
  if (crypto_25(D) != 0B)
    goto <bb 14>;
  else
    goto <bb 17>;

<bb 14>:
  D.46737_37 = engine_19->crypto_type;
  if (D.46737_37 != 9)
    goto <bb 15>;
  else
    goto <bb 17>;

<bb 15>:
  D.46737_38 = engine_19->crypto_type;
  D.46738_39 = engine_19->ssec[D.46737_38].remote_crypto_key;
  D.38621_40 = __builtin_strcmp (crypto_25(D), D.46738_39);
  if (D.38621_40 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1193, session_10(D), 7, "Existing key is still valid.\n");
  got_crypto_41 = 1;
  # DEBUG got_crypto => got_crypto_41
  goto <bb 41> (end);

<bb 17>:
  D.46737_42 = engine_19->crypto_type;
  D.46738_43 = engine_19->ssec[D.46737_42].remote_crypto_key;
  a_44 = switch_stristr ("AE", D.46738_43);
  # DEBUG a => a_44
  b_45 = switch_stristr ("AE", crypto_25(D));
  # DEBUG b => b_45
  if (sdp_type_46(D) == 0)
    goto <bb 18>;
  else
    goto <bb 21>;

<bb 18>:
  if (vval_4 == 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1201, session_10(D), 7, "Unsupported Crypto [%s]\n", crypto_25(D));
  goto <bb 41> (end);

<bb 20>:
  D.46734_47 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_47, varname_48(D), vval_4, 1);
  D.46725_49 = session_10(D)->media_handle;
  ctype.166_50 = (switch_rtp_crypto_key_type_t) ctype_3;
  switch_core_media_build_crypto (D.46725_49, type_17(D), crypto_tag_51(D), ctype.166_50, 0, 1);
  D.46740_52 = engine_19->rtp_session;
  D.46753_53 = atoi (crypto_25(D));
  D.46754_54 = (uint32_t) D.46753_53;
  D.46737_55 = engine_19->crypto_type;
  D.46755_56 = engine_19->ssec[D.46737_55].crypto_type;
  D.46737_57 = engine_19->crypto_type;
  D.46756_58 = &engine_19->ssec[D.46737_57].local_raw_key;
  D.46757_59 = SUITES[ctype_3].keylen;
  D.46758_60 = (switch_size_t) D.46757_59;
  switch_rtp_add_crypto_key (D.46740_52, 0, D.46754_54, D.46755_56, D.46756_58, D.46758_60);

<bb 21>:
  D.46761_61 = a_44 != 0B;
  D.46762_62 = b_45 != 0B;
  D.46763_63 = D.46761_61 && D.46762_62;
  if (D.46763_63 != 0)
    goto <bb 22>;
  else
    goto <bb 31>;

<bb 22>:
  D.46765_64 = strncasecmp (a_44, b_45, 23);
  if (D.46765_64 == 0)
    goto <bb 23>;
  else
    goto <bb 31>;

<bb 23>:
  ctype.166_65 = (switch_rtp_crypto_key_type_t) ctype_3;
  engine_19->crypto_type = ctype.166_65;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1214, session_10(D), 7, "Change Remote key to [%s]\n", crypto_25(D));
  D.46737_66 = engine_19->crypto_type;
  D.46767_67 = switch_core_perform_session_strdup (session_10(D), crypto_25(D), "src/switch_core_media.c", &__func__, 1215);
  engine_19->ssec[D.46737_66].remote_crypto_key = D.46767_67;
  D.46768_68 = engine_19->type;
  if (D.46768_68 == 0)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  D.46734_69 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_69, "srtp_remote_audio_crypto_key", crypto_25(D), 1);
  D.46734_70 = session_10(D)->channel;
  switch_channel_set_variable_printf (D.46734_70, "srtp_remote_audio_crypto_tag", "%d", crypto_tag_51(D));
  D.46734_71 = session_10(D)->channel;
  ctype.166_72 = (switch_rtp_crypto_key_type_t) ctype_3;
  D.46771_73 = switch_core_media_crypto_type2str (ctype.166_72);
  switch_channel_set_variable_printf (D.46734_71, "srtp_remote_audio_crypto_type", "%s", D.46771_73);
  goto <bb 27>;

<bb 25>:
  D.46768_74 = engine_19->type;
  if (D.46768_74 == 1)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  D.46734_75 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_75, "srtp_remote_video_crypto_key", crypto_25(D), 1);
  D.46734_76 = session_10(D)->channel;
  switch_channel_set_variable_printf (D.46734_76, "srtp_remote_video_crypto_tag", "%d", crypto_tag_51(D));
  D.46734_77 = session_10(D)->channel;
  ctype.166_78 = (switch_rtp_crypto_key_type_t) ctype_3;
  D.46775_79 = switch_core_media_crypto_type2str (ctype.166_78);
  switch_channel_set_variable_printf (D.46734_77, "srtp_remote_video_crypto_type", "%s", D.46775_79);

<bb 27>:
  D.46737_80 = engine_19->crypto_type;
  engine_19->ssec[D.46737_80].crypto_tag = crypto_tag_51(D);
  D.46740_81 = engine_19->rtp_session;
  D.46776_82 = switch_rtp_ready (D.46740_81);
  if (D.46776_82 != 0)
    goto <bb 28>;
  else
    goto <bb 30>;

<bb 28>:
  D.46734_83 = session_10(D)->channel;
  D.46779_84 = switch_channel_test_flag (D.46734_83, 92);
  if (D.46779_84 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  D.46782_85 = &engine_19->ssec;
  D.46737_86 = engine_19->crypto_type;
  D.46783_87 = D.46737_86 * 144;
  D.46784_88 = D.46782_85 + D.46783_87;
  D.46737_89 = engine_19->crypto_type;
  D.46738_90 = engine_19->ssec[D.46737_89].remote_crypto_key;
  switch_core_media_add_crypto (D.46784_88, D.46738_90, 1);
  D.46740_91 = engine_19->rtp_session;
  D.46737_92 = engine_19->crypto_type;
  D.46785_93 = engine_19->ssec[D.46737_92].crypto_tag;
  D.46786_94 = (uint32_t) D.46785_93;
  D.46737_95 = engine_19->crypto_type;
  D.46755_96 = engine_19->ssec[D.46737_95].crypto_type;
  D.46737_97 = engine_19->crypto_type;
  D.46787_98 = &engine_19->ssec[D.46737_97].remote_raw_key;
  D.46737_99 = engine_19->crypto_type;
  D.46755_100 = engine_19->ssec[D.46737_99].crypto_type;
  D.46788_101 = SUITES[D.46755_100].keylen;
  D.46789_102 = (switch_size_t) D.46788_101;
  switch_rtp_add_crypto_key (D.46740_91, 1, D.46786_94, D.46755_100, D.46787_98, D.46789_102);

<bb 30>:
  got_crypto_103 = got_crypto_6 + 1;
  # DEBUG got_crypto => got_crypto_103
  goto <bb 41> (end);

<bb 31>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1238, session_10(D), 7, "Ignoring unacceptable key\n");
  goto <bb 41> (end);

<bb 32>:
  D.46740_104 = engine_19->rtp_session;
  D.46790_105 = switch_rtp_ready (D.46740_104);
  if (D.46790_105 == 0)
    goto <bb 33>;
  else
    goto <bb 41> (end);

<bb 33>:
  if (vval_4 == 0B)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1244, session_10(D), 7, "Unsupported Crypto [%s]\n", crypto_25(D));
  goto <bb 41> (end);

<bb 35>:
  ctype.166_106 = (switch_rtp_crypto_key_type_t) ctype_3;
  engine_19->crypto_type = ctype.166_106;
  D.46737_107 = engine_19->crypto_type;
  D.46795_108 = switch_core_perform_session_strdup (session_10(D), crypto_25(D), "src/switch_core_media.c", &__func__, 1249);
  engine_19->ssec[D.46737_107].remote_crypto_key = D.46795_108;
  D.46737_109 = engine_19->crypto_type;
  D.46738_110 = engine_19->ssec[D.46737_109].remote_crypto_key;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1250, session_10(D), 7, "Set Remote Key [%s]\n", D.46738_110);
  D.46768_111 = engine_19->type;
  if (D.46768_111 == 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  D.46734_112 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_112, "srtp_remote_audio_crypto_key", crypto_25(D), 1);
  D.46734_113 = session_10(D)->channel;
  ctype.166_114 = (switch_rtp_crypto_key_type_t) ctype_3;
  D.46798_115 = switch_core_media_crypto_type2str (ctype.166_114);
  switch_channel_set_variable_printf (D.46734_113, "srtp_remote_audio_crypto_type", "%s", D.46798_115);
  goto <bb 39>;

<bb 37>:
  D.46768_116 = engine_19->type;
  if (D.46768_116 == 1)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.46734_117 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_117, "srtp_remote_video_crypto_key", crypto_25(D), 1);
  D.46734_118 = session_10(D)->channel;
  ctype.166_119 = (switch_rtp_crypto_key_type_t) ctype_3;
  D.46802_120 = switch_core_media_crypto_type2str (ctype.166_119);
  switch_channel_set_variable_printf (D.46734_118, "srtp_remote_video_crypto_type", "%s", D.46802_120);

<bb 39>:
  D.46737_121 = engine_19->crypto_type;
  engine_19->ssec[D.46737_121].crypto_tag = crypto_tag_51(D);
  got_crypto_122 = got_crypto_6 + 1;
  # DEBUG got_crypto => got_crypto_122
  D.46734_123 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46734_123, varname_48(D), vval_4, 1);
  D.46803_124 = smh_11->session;
  D.46804_125 = D.46803_124->channel;
  switch_channel_set_flag_value (D.46804_125, 92, 1);
  D.46737_126 = engine_19->crypto_type;
  D.46805_127 = engine_19->ssec[D.46737_126].local_crypto_key;
  D.46806_128 = _zstr (D.46805_127);
  if (D.46806_128 != 0)
    goto <bb 40>;
  else
    goto <bb 41> (end);

<bb 40>:
  D.46725_129 = session_10(D)->media_handle;
  ctype.166_130 = (switch_rtp_crypto_key_type_t) ctype_3;
  switch_core_media_build_crypto (D.46725_129, type_17(D), crypto_tag_51(D), ctype.166_130, 0, 1);

  # got_crypto_1 = PHI <got_crypto_6(19), got_crypto_103(30), got_crypto_6(32), got_crypto_6(34), got_crypto_122(39), got_crypto_122(40), got_crypto_41(16), got_crypto_6(31)>
end:
  # DEBUG got_crypto => got_crypto_1
  D.46721_131 = got_crypto_1;

<bb 42>:
  # D.46721_5 = PHI <D.46721_12(3), D.46721_14(5), D.46721_131(41)>
  return D.46721_5;

}



;; Function switch_media_handle_create (switch_media_handle_create)



Renaming block #0



Renaming block #2

Renaming statement status = 1;

Renaming statement smh = 0B;

Renaming statement *smhp = 0B;

Renaming statement D.46463 = params->sdp_username;

Renaming statement D.46464 = _zstr (D.46463);

Renaming statement if (D.46464 != 0)



Renaming block #3

Renaming statement params->sdp_username = "FreeSWITCH";



Renaming block #4

Renaming statement D.46467 = switch_core_perform_session_alloc (session, 23856, "src/switch_core_media.c", &__func__, 1426);

Renaming statement session->media_handle = D.46467;

Renaming statement D.46468 = session->media_handle;

Renaming statement if (D.46468 != 0B)



Renaming block #5

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468->session = session;

Renaming statement D.46468 = session->media_handle;

Renaming statement *smhp = D.46468;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46471 = D.46468->flags;

Renaming statement D.46472 = D.46471 | 1;

Renaming statement D.46468->flags = D.46472;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468->media_flags[0] = 1;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468->engines[0].read_frame.buflen = 16384;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468->engines[0].type = 0;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468->engines[0].crypto_type = 9;

Renaming statement i = 0;



Renaming block #7

Renaming statement if (i <= 8)



Renaming block #6

Renaming statement D.46468 = session->media_handle;

Renaming statement i.136 = (switch_rtp_crypto_key_type_t) i;

Renaming statement D.46468->engines[0].ssec[i].crypto_type = i.136;

Renaming statement i = i + 1;



Renaming block #8

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468->engines[1].read_frame.buflen = 16384;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468->engines[1].type = 1;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468->engines[1].crypto_type = 9;

Renaming statement i = 0;



Renaming block #10

Renaming statement if (i <= 8)



Renaming block #9

Renaming statement D.46468 = session->media_handle;

Renaming statement i.136 = (switch_rtp_crypto_key_type_t) i;

Renaming statement D.46468->engines[1].ssec[i].crypto_type = i.136;

Renaming statement i = i + 1;



Renaming block #11

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468->mparams = params;

Renaming statement i = 0;



Renaming block #13

Renaming statement if (i <= 9)



Renaming block #12

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468->crypto_suite_order[i] = 9;

Renaming statement i = i + 1;



Renaming block #14

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46474 = &D.46468->mutex;

Renaming statement D.46475 = switch_core_session_get_pool (session);

Renaming statement switch_mutex_init (D.46474, 1, D.46475);

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46476 = &D.46468->sdp_mutex;

Renaming statement D.46477 = switch_core_session_get_pool (session);

Renaming statement switch_mutex_init (D.46476, 1, D.46477);

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46478 = &D.46468->engines;

Renaming statement D.46479 = (unsigned int) D.46478;

Renaming statement D.46480 = time (0B);

Renaming statement D.46481 = (unsigned int) D.46480;

Renaming statement D.46482 = D.46479 + D.46481;

Renaming statement D.46468->engines[0].ssrc = D.46482;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46483 = &D.46468->engines[1];

Renaming statement D.46484 = (unsigned int) D.46483;

Renaming statement D.46485 = time (0B);

Renaming statement D.46486 = (unsigned int) D.46485;

Renaming statement D.46487 = D.46486 / 2;

Renaming statement D.46488 = D.46484 + D.46487;

Renaming statement D.46468->engines[1].ssrc = D.46488;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46489 = session->pool;

Renaming statement D.46490 = switch_core_perform_alloc (D.46489, 84, "src/switch_core_media.c", &__func__, 1464);

Renaming statement D.46468->engines[0].payload_map = D.46490;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46491 = D.46468->engines[0].payload_map;

Renaming statement D.46468->engines[0].cur_payload_map = D.46491;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46492 = D.46468->engines[0].cur_payload_map;

Renaming statement D.46492->current = 1;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46489 = session->pool;

Renaming statement D.46493 = switch_core_perform_alloc (D.46489, 84, "src/switch_core_media.c", &__func__, 1467);

Renaming statement D.46468->engines[1].payload_map = D.46493;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46494 = D.46468->engines[1].payload_map;

Renaming statement D.46468->engines[1].cur_payload_map = D.46494;

Renaming statement D.46468 = session->media_handle;

Renaming statement D.46495 = D.46468->engines[1].cur_payload_map;

Renaming statement D.46495->current = 1;

Renaming statement D.46496 = session->channel;

Renaming statement switch_channel_set_flag_value (D.46496, 111, 1);

Renaming statement status = 0;



Renaming block #15

Renaming statement D.46497 = status;

Renaming statement return D.46497;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement *smhp_7(D) = 0B;

Updating SSA information for statement D.46463_9 = params_8(D)->sdp_username;

Updating SSA information for statement D.46464_10 = _zstr (D.46463_9);



Registering new PHI nodes in block #3

Updating SSA information for statement params_8(D)->sdp_username = "FreeSWITCH";



Registering new PHI nodes in block #4

Updating SSA information for statement D.46467_12 = switch_core_perform_session_alloc (session_11(D), 23856, "src/switch_core_media.c", &__func__, 1426);

Updating SSA information for statement session_11(D)->media_handle = D.46467_12;

Updating SSA information for statement D.46468_13 = session_11(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.46468_14 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_14->session = session_11(D);

Updating SSA information for statement D.46468_15 = session_11(D)->media_handle;

Updating SSA information for statement *smhp_7(D) = D.46468_15;

Updating SSA information for statement D.46468_16 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_17 = session_11(D)->media_handle;

Updating SSA information for statement D.46471_18 = D.46468_17->flags;

Updating SSA information for statement D.46468_17->flags = D.46472_19;

Updating SSA information for statement D.46468_20 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_20->media_flags[0] = 1;

Updating SSA information for statement D.46468_21 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_21->engines[0].read_frame.buflen = 16384;

Updating SSA information for statement D.46468_22 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_22->engines[0].type = 0;

Updating SSA information for statement D.46468_23 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_23->engines[0].crypto_type = 9;



Registering new PHI nodes in block #7



Registering new PHI nodes in block #6

Updating SSA information for statement D.46468_25 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_25->engines[0].ssec[i_2].crypto_type = i.136_26;



Registering new PHI nodes in block #8

Updating SSA information for statement D.46468_28 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_28->engines[1].read_frame.buflen = 16384;

Updating SSA information for statement D.46468_29 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_29->engines[1].type = 1;

Updating SSA information for statement D.46468_30 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_30->engines[1].crypto_type = 9;



Registering new PHI nodes in block #10



Registering new PHI nodes in block #9

Updating SSA information for statement D.46468_32 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_32->engines[1].ssec[i_3].crypto_type = i.136_33;



Registering new PHI nodes in block #11

Updating SSA information for statement D.46468_35 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_35->mparams = params_8(D);



Registering new PHI nodes in block #13



Registering new PHI nodes in block #12

Updating SSA information for statement D.46468_37 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_37->crypto_suite_order[i_4] = 9;



Registering new PHI nodes in block #14

Updating SSA information for statement D.46468_39 = session_11(D)->media_handle;

Updating SSA information for statement D.46475_41 = switch_core_session_get_pool (session_11(D));

Updating SSA information for statement switch_mutex_init (D.46474_40, 1, D.46475_41);

Updating SSA information for statement D.46468_42 = session_11(D)->media_handle;

Updating SSA information for statement D.46477_44 = switch_core_session_get_pool (session_11(D));

Updating SSA information for statement switch_mutex_init (D.46476_43, 1, D.46477_44);

Updating SSA information for statement D.46468_45 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_46 = session_11(D)->media_handle;

Updating SSA information for statement D.46480_49 = time (0B);

Updating SSA information for statement D.46468_46->engines[0].ssrc = D.46482_51;

Updating SSA information for statement D.46468_52 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_53 = session_11(D)->media_handle;

Updating SSA information for statement D.46485_56 = time (0B);

Updating SSA information for statement D.46468_53->engines[1].ssrc = D.46488_59;

Updating SSA information for statement D.46468_60 = session_11(D)->media_handle;

Updating SSA information for statement D.46489_61 = session_11(D)->pool;

Updating SSA information for statement D.46490_62 = switch_core_perform_alloc (D.46489_61, 84, "src/switch_core_media.c", &__func__, 1464);

Updating SSA information for statement D.46468_60->engines[0].payload_map = D.46490_62;

Updating SSA information for statement D.46468_63 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_64 = session_11(D)->media_handle;

Updating SSA information for statement D.46491_65 = D.46468_64->engines[0].payload_map;

Updating SSA information for statement D.46468_64->engines[0].cur_payload_map = D.46491_65;

Updating SSA information for statement D.46468_66 = session_11(D)->media_handle;

Updating SSA information for statement D.46492_67 = D.46468_66->engines[0].cur_payload_map;

Updating SSA information for statement D.46492_67->current = 1;

Updating SSA information for statement D.46468_68 = session_11(D)->media_handle;

Updating SSA information for statement D.46489_69 = session_11(D)->pool;

Updating SSA information for statement D.46493_70 = switch_core_perform_alloc (D.46489_69, 84, "src/switch_core_media.c", &__func__, 1467);

Updating SSA information for statement D.46468_68->engines[1].payload_map = D.46493_70;

Updating SSA information for statement D.46468_71 = session_11(D)->media_handle;

Updating SSA information for statement D.46468_72 = session_11(D)->media_handle;

Updating SSA information for statement D.46494_73 = D.46468_72->engines[1].payload_map;

Updating SSA information for statement D.46468_72->engines[1].cur_payload_map = D.46494_73;

Updating SSA information for statement D.46468_74 = session_11(D)->media_handle;

Updating SSA information for statement D.46495_75 = D.46468_74->engines[1].cur_payload_map;

Updating SSA information for statement D.46495_75->current = 1;

Updating SSA information for statement D.46496_76 = session_11(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.46496_76, 111, 1);



Registering new PHI nodes in block #15



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 16
Number of blocks to update: 15 ( 94%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 


Scope blocks after cleanups:

{ Scope block #0 
  switch_status_t status;
  struct switch_media_handle_t * smh;
  int i;
  static const char __func__[27] = "switch_media_handle_create";

}
switch_media_handle_create (struct switch_media_handle_t * * smhp, struct switch_core_session_t * session, struct switch_core_media_params_t * params)
{
  static const char __func__[27] = "switch_media_handle_create";
  int i;
  struct switch_media_handle_t * smh;
  switch_status_t status;
  switch_status_t D.46497;
  struct switch_channel_t * D.46496;
  struct payload_map_t * D.46495;
  struct payload_map_t * D.46494;
  void * D.46493;
  struct payload_map_t * D.46492;
  struct payload_map_t * D.46491;
  void * D.46490;
  struct switch_memory_pool_t * D.46489;
  unsigned int D.46488;
  unsigned int D.46487;
  unsigned int D.46486;
  time_t D.46485;
  unsigned int D.46484;
  struct switch_rtp_engine_t * D.46483;
  unsigned int D.46482;
  unsigned int D.46481;
  time_t D.46480;
  unsigned int D.46479;
  struct switch_rtp_engine_t[2] * D.46478;
  struct switch_memory_pool_t * D.46477;
  struct switch_mutex_t * * D.46476;
  struct switch_memory_pool_t * D.46475;
  struct switch_mutex_t * * D.46474;
  switch_rtp_crypto_key_type_t i.136;
  unsigned int D.46472;
  smh_flag_t D.46471;
  struct switch_media_handle_t * D.46468;
  void * D.46467;
  int D.46464;
  char * D.46463;

<bb 2>:
  status_5 = 1;
  # DEBUG status => status_5
  smh_6 = 0B;
  # DEBUG smh => smh_6
  *smhp_7(D) = 0B;
  D.46463_9 = params_8(D)->sdp_username;
  D.46464_10 = _zstr (D.46463_9);
  if (D.46464_10 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  params_8(D)->sdp_username = "FreeSWITCH";

<bb 4>:
  D.46467_12 = switch_core_perform_session_alloc (session_11(D), 23856, "src/switch_core_media.c", &__func__, 1426);
  session_11(D)->media_handle = D.46467_12;
  D.46468_13 = session_11(D)->media_handle;
  if (D.46468_13 != 0B)
    goto <bb 5>;
  else
    goto <bb 15>;

<bb 5>:
  D.46468_14 = session_11(D)->media_handle;
  D.46468_14->session = session_11(D);
  D.46468_15 = session_11(D)->media_handle;
  *smhp_7(D) = D.46468_15;
  D.46468_16 = session_11(D)->media_handle;
  D.46468_17 = session_11(D)->media_handle;
  D.46471_18 = D.46468_17->flags;
  D.46472_19 = D.46471_18 | 1;
  D.46468_17->flags = D.46472_19;
  D.46468_20 = session_11(D)->media_handle;
  D.46468_20->media_flags[0] = 1;
  D.46468_21 = session_11(D)->media_handle;
  D.46468_21->engines[0].read_frame.buflen = 16384;
  D.46468_22 = session_11(D)->media_handle;
  D.46468_22->engines[0].type = 0;
  D.46468_23 = session_11(D)->media_handle;
  D.46468_23->engines[0].crypto_type = 9;
  i_24 = 0;
  # DEBUG i => i_24
  goto <bb 7>;

<bb 6>:
  D.46468_25 = session_11(D)->media_handle;
  i.136_26 = (switch_rtp_crypto_key_type_t) i_2;
  D.46468_25->engines[0].ssec[i_2].crypto_type = i.136_26;
  i_27 = i_2 + 1;
  # DEBUG i => i_27

<bb 7>:
  # i_2 = PHI <i_24(5), i_27(6)>
  # DEBUG i => i_2
  if (i_2 <= 8)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 8>:
  D.46468_28 = session_11(D)->media_handle;
  D.46468_28->engines[1].read_frame.buflen = 16384;
  D.46468_29 = session_11(D)->media_handle;
  D.46468_29->engines[1].type = 1;
  D.46468_30 = session_11(D)->media_handle;
  D.46468_30->engines[1].crypto_type = 9;
  i_31 = 0;
  # DEBUG i => i_31
  goto <bb 10>;

<bb 9>:
  D.46468_32 = session_11(D)->media_handle;
  i.136_33 = (switch_rtp_crypto_key_type_t) i_3;
  D.46468_32->engines[1].ssec[i_3].crypto_type = i.136_33;
  i_34 = i_3 + 1;
  # DEBUG i => i_34

<bb 10>:
  # i_3 = PHI <i_31(8), i_34(9)>
  # DEBUG i => i_3
  if (i_3 <= 8)
    goto <bb 9>;
  else
    goto <bb 11>;

<bb 11>:
  D.46468_35 = session_11(D)->media_handle;
  D.46468_35->mparams = params_8(D);
  i_36 = 0;
  # DEBUG i => i_36
  goto <bb 13>;

<bb 12>:
  D.46468_37 = session_11(D)->media_handle;
  D.46468_37->crypto_suite_order[i_4] = 9;
  i_38 = i_4 + 1;
  # DEBUG i => i_38

<bb 13>:
  # i_4 = PHI <i_36(11), i_38(12)>
  # DEBUG i => i_4
  if (i_4 <= 9)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 14>:
  D.46468_39 = session_11(D)->media_handle;
  D.46474_40 = &D.46468_39->mutex;
  D.46475_41 = switch_core_session_get_pool (session_11(D));
  switch_mutex_init (D.46474_40, 1, D.46475_41);
  D.46468_42 = session_11(D)->media_handle;
  D.46476_43 = &D.46468_42->sdp_mutex;
  D.46477_44 = switch_core_session_get_pool (session_11(D));
  switch_mutex_init (D.46476_43, 1, D.46477_44);
  D.46468_45 = session_11(D)->media_handle;
  D.46468_46 = session_11(D)->media_handle;
  D.46478_47 = &D.46468_46->engines;
  D.46479_48 = (unsigned int) D.46478_47;
  D.46480_49 = time (0B);
  D.46481_50 = (unsigned int) D.46480_49;
  D.46482_51 = D.46479_48 + D.46481_50;
  D.46468_46->engines[0].ssrc = D.46482_51;
  D.46468_52 = session_11(D)->media_handle;
  D.46468_53 = session_11(D)->media_handle;
  D.46483_54 = &D.46468_53->engines[1];
  D.46484_55 = (unsigned int) D.46483_54;
  D.46485_56 = time (0B);
  D.46486_57 = (unsigned int) D.46485_56;
  D.46487_58 = D.46486_57 / 2;
  D.46488_59 = D.46484_55 + D.46487_58;
  D.46468_53->engines[1].ssrc = D.46488_59;
  D.46468_60 = session_11(D)->media_handle;
  D.46489_61 = session_11(D)->pool;
  D.46490_62 = switch_core_perform_alloc (D.46489_61, 84, "src/switch_core_media.c", &__func__, 1464);
  D.46468_60->engines[0].payload_map = D.46490_62;
  D.46468_63 = session_11(D)->media_handle;
  D.46468_64 = session_11(D)->media_handle;
  D.46491_65 = D.46468_64->engines[0].payload_map;
  D.46468_64->engines[0].cur_payload_map = D.46491_65;
  D.46468_66 = session_11(D)->media_handle;
  D.46492_67 = D.46468_66->engines[0].cur_payload_map;
  D.46492_67->current = 1;
  D.46468_68 = session_11(D)->media_handle;
  D.46489_69 = session_11(D)->pool;
  D.46493_70 = switch_core_perform_alloc (D.46489_69, 84, "src/switch_core_media.c", &__func__, 1467);
  D.46468_68->engines[1].payload_map = D.46493_70;
  D.46468_71 = session_11(D)->media_handle;
  D.46468_72 = session_11(D)->media_handle;
  D.46494_73 = D.46468_72->engines[1].payload_map;
  D.46468_72->engines[1].cur_payload_map = D.46494_73;
  D.46468_74 = session_11(D)->media_handle;
  D.46495_75 = D.46468_74->engines[1].cur_payload_map;
  D.46495_75->current = 1;
  D.46496_76 = session_11(D)->channel;
  switch_channel_set_flag_value (D.46496_76, 111, 1);
  status_77 = 0;
  # DEBUG status => status_77

<bb 15>:
  # status_1 = PHI <status_5(4), status_77(14)>
  # DEBUG status => status_1
  D.46497_78 = status_1;
  return D.46497_78;

}



;; Function switch_media_handle_set_media_flag (switch_media_handle_set_media_flag)



Renaming block #0



Renaming block #2

Renaming statement if (smh == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh->media_flags[flag] = 1;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("smh", "src/switch_core_media.c", 1482, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_1(D)->media_flags[flag_2(D)] = 1;



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)

Affected blocks: 0 2 3 4 


Scope blocks after cleanups:

{ Scope block #0 
  static const char __PRETTY_FUNCTION__[35] = "switch_media_handle_set_media_flag";

}
switch_media_handle_set_media_flag (struct switch_media_handle_t * smh, switch_core_media_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[35] = "switch_media_handle_set_media_flag";

<bb 2>:
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1482, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_1(D)->media_flags[flag_2(D)] = 1;
  return;

}



;; Function switch_media_handle_set_media_flags (switch_media_handle_set_media_flags)



Renaming block #0



Renaming block #2

Renaming statement if (smh == 0B)



Renaming block #3



Renaming block #4

Renaming statement i = 0;



Renaming block #8

Renaming statement if (i <= 16)



Renaming block #5

Renaming statement i.135 = (unsigned int) i;

Renaming statement D.46456 = i.135 * 4;

Renaming statement D.46457 = flags + D.46456;

Renaming statement D.46458 = *D.46457;

Renaming statement if (D.46458 != 0)



Renaming block #6

Renaming statement i.135 = (unsigned int) i;

Renaming statement D.46456 = i.135 * 4;

Renaming statement D.46457 = flags + D.46456;

Renaming statement D.46458 = *D.46457;

Renaming statement smh->media_flags[i] = D.46458;



Renaming block #7

Renaming statement i = i + 1;



Renaming block #9



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("smh", "src/switch_core_media.c", 1491, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4



Registering new PHI nodes in block #8



Registering new PHI nodes in block #5

Updating SSA information for statement D.46458_8 = *D.46457_7;



Registering new PHI nodes in block #6

Updating SSA information for statement D.46458_12 = *D.46457_11;

Updating SSA information for statement smh_2(D)->media_flags[i_1] = D.46458_12;



Registering new PHI nodes in block #7



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 
  int i;
  static const char __PRETTY_FUNCTION__[36] = "switch_media_handle_set_media_flags";

}
switch_media_handle_set_media_flags (struct switch_media_handle_t * smh, switch_core_media_flag_t * flags)
{
  static const char __PRETTY_FUNCTION__[36] = "switch_media_handle_set_media_flags";
  int i;
  switch_core_media_flag_t D.46458;
  switch_core_media_flag_t * D.46457;
  unsigned int D.46456;
  unsigned int i.135;

<bb 2>:
  if (smh_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1491, &__PRETTY_FUNCTION__);

<bb 4>:
  i_3 = 0;
  # DEBUG i => i_3
  goto <bb 8>;

<bb 5>:
  i.135_4 = (unsigned int) i_1;
  D.46456_5 = i.135_4 * 4;
  D.46457_7 = flags_6(D) + D.46456_5;
  D.46458_8 = *D.46457_7;
  if (D.46458_8 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  i.135_9 = (unsigned int) i_1;
  D.46456_10 = i.135_9 * 4;
  D.46457_11 = flags_6(D) + D.46456_10;
  D.46458_12 = *D.46457_11;
  smh_2(D)->media_flags[i_1] = D.46458_12;

<bb 7>:
  i_13 = i_1 + 1;
  # DEBUG i => i_13

<bb 8>:
  # i_1 = PHI <i_3(4), i_13(7)>
  # DEBUG i => i_1
  if (i_1 <= 16)
    goto <bb 5>;
  else
    goto <bb 9>;

<bb 9>:
  return;

}



;; Function switch_media_handle_clear_media_flag (switch_media_handle_clear_media_flag)



Renaming block #0



Renaming block #2

Renaming statement if (smh == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh->media_flags[flag] = 0;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("smh", "src/switch_core_media.c", 1503, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_1(D)->media_flags[flag_2(D)] = 0;



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)

Affected blocks: 0 2 3 4 


Scope blocks after cleanups:

{ Scope block #0 
  static const char __PRETTY_FUNCTION__[37] = "switch_media_handle_clear_media_flag";

}
switch_media_handle_clear_media_flag (struct switch_media_handle_t * smh, switch_core_media_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[37] = "switch_media_handle_clear_media_flag";

<bb 2>:
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1503, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_1(D)->media_flags[flag_2(D)] = 0;
  return;

}



;; Function switch_media_handle_test_media_flag (switch_media_handle_test_media_flag)



Renaming block #0



Renaming block #2

Renaming statement if (smh == 0B)



Renaming block #3



Renaming block #4

Renaming statement D.46449 = smh->media_flags[flag];

Renaming statement D.46448 = (int32_t) D.46449;

Renaming statement return D.46448;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("smh", "src/switch_core_media.c", 1510, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement D.46449_3 = smh_1(D)->media_flags[flag_2(D)];



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)

Affected blocks: 0 2 3 4 


Scope blocks after cleanups:

{ Scope block #0 
  static const char __PRETTY_FUNCTION__[36] = "switch_media_handle_test_media_flag";

}
switch_media_handle_test_media_flag (struct switch_media_handle_t * smh, switch_core_media_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[36] = "switch_media_handle_test_media_flag";
  switch_core_media_flag_t D.46449;
  int32_t D.46448;

<bb 2>:
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1510, &__PRETTY_FUNCTION__);

<bb 4>:
  D.46449_3 = smh_1(D)->media_flags[flag_2(D)];
  D.46448_4 = (int32_t) D.46449_3;
  return D.46448_4;

}



;; Function generate_m (generate_m)



Renaming block #0



Renaming block #2

Renaming statement i = 0;

Renaming statement ptime = 0;

Renaming statement noptime = 0;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement a_engine = &smh->engines;

Renaming statement D.42588 = strlen (buf);

Renaming statement D.42589 = buf + D.42588;

Renaming statement D.42590 = strlen (buf);

Renaming statement D.42591 = buflen - D.42590;

Renaming statement D.42592 = (int) port;

Renaming statement if (secure != 0)



Renaming block #6

Renaming statement D.42599 = session->channel;

Renaming statement D.42600 = switch_channel_direction (D.42599);

Renaming statement if (D.42600 == 1)



Renaming block #7

Renaming statement D.42601 = a_engine->crypto_type;

Renaming statement if (D.42601 != 9)



Renaming block #9

Renaming statement iftmp.40 = 0;



Renaming block #8

Renaming statement iftmp.40 = 1;



Renaming block #10

Renaming statement D.42602 = get_media_profile_name (session, iftmp.40);

Renaming statement switch_snprintf (D.42589, D.42591, "m=audio %d %s", D.42592, D.42602);

Renaming statement i = 0;



Renaming block #28

Renaming statement D.42634 = smh->mparams;

Renaming statement D.42635 = D.42634->num_codecs;

Renaming statement if (D.42635 > i)



Renaming block #11

Renaming statement imp = smh->codecs[i];

Renaming statement D.42603 = imp->microseconds_per_packet;

Renaming statement this_ptime = D.42603 / 1000;

Renaming statement D.42606 = imp->iananame;

Renaming statement D.42607 = strcasecmp (D.42606, "ilbc");

Renaming statement if (D.42607 == 0)



Renaming block #12

Renaming statement D.42606 = imp->iananame;

Renaming statement D.42609 = strcasecmp (D.42606, "isac");

Renaming statement if (D.42609 == 0)



Renaming block #13

Renaming statement this_ptime = 20;



Renaming block #14

Renaming statement D.42610 = imp->codec_type;

Renaming statement if (D.42610 != 0)



Renaming block #15



Renaming block #16

Renaming statement if (noptime == 0)



Renaming block #17

Renaming statement if (cur_ptime == 0)



Renaming block #18

Renaming statement if (ptime == 0)



Renaming block #19

Renaming statement ptime = this_ptime;



Renaming block #20

Renaming statement if (this_ptime != cur_ptime)



Renaming block #21



Renaming block #22

Renaming statement D.42622 = smh->ianacodes[i];

Renaming statement D.42623 = (signed char) D.42622;

Renaming statement if (D.42623 >= 0)



Renaming block #23

Renaming statement D.42622 = smh->ianacodes[i];

Renaming statement D.42626 = (int) D.42622;

Renaming statement D.42627 = already_did[D.42626];

Renaming statement if (D.42627 != 0)



Renaming block #24



Renaming block #25

Renaming statement D.42622 = smh->ianacodes[i];

Renaming statement D.42626 = (int) D.42622;

Renaming statement already_did[D.42626] = 1;



Renaming block #26

Renaming statement D.42630 = strlen (buf);

Renaming statement D.42631 = buf + D.42630;

Renaming statement D.42632 = strlen (buf);

Renaming statement D.42633 = buflen - D.42632;

Renaming statement D.42622 = smh->ianacodes[i];

Renaming statement D.42626 = (int) D.42622;

Renaming statement switch_snprintf (D.42631, D.42633, " %d", D.42626);



Renaming block #27

Renaming statement i = i + 1;



Renaming block #29

Renaming statement D.42634 = smh->mparams;

Renaming statement D.42636 = D.42634->dtmf_type;

Renaming statement if (D.42636 == 0)



Renaming block #30

Renaming statement D.42634 = smh->mparams;

Renaming statement D.42639 = D.42634->te;

Renaming statement if (D.42639 > 95)



Renaming block #31

Renaming statement D.42642 = strlen (buf);

Renaming statement D.42643 = buf + D.42642;

Renaming statement D.42644 = strlen (buf);

Renaming statement D.42645 = buflen - D.42644;

Renaming statement D.42634 = smh->mparams;

Renaming statement D.42639 = D.42634->te;

Renaming statement D.42646 = (int) D.42639;

Renaming statement switch_snprintf (D.42643, D.42645, " %d", D.42646);



Renaming block #32

Renaming statement D.42647 = switch_media_handle_test_media_flag (smh, 9);

Renaming statement if (D.42647 == 0)



Renaming block #33

Renaming statement D.42650 = cng_type != 0;

Renaming statement D.42651 = use_cng != 0;

Renaming statement D.42652 = D.42650 && D.42651;

Renaming statement if (D.42652 != 0)



Renaming block #34

Renaming statement D.42655 = strlen (buf);

Renaming statement D.42656 = buf + D.42655;

Renaming statement D.42657 = strlen (buf);

Renaming statement D.42658 = buflen - D.42657;

Renaming statement switch_snprintf (D.42656, D.42658, " %d", cng_type);



Renaming block #35

Renaming statement D.42659 = strlen (buf);

Renaming statement D.42660 = buf + D.42659;

Renaming statement D.42661 = strlen (buf);

Renaming statement D.42662 = buflen - D.42661;

Renaming statement switch_snprintf (D.42660, D.42662, "\n");

Renaming statement i = 0;



Renaming block #65

Renaming statement D.42634 = smh->mparams;

Renaming statement D.42635 = D.42634->num_codecs;

Renaming statement if (D.42635 > i)



Renaming block #36

Renaming statement imp = smh->codecs[i];

Renaming statement fmtp = imp->fmtp;

Renaming statement D.42663 = imp->microseconds_per_packet;

Renaming statement this_ptime = D.42663 / 1000;

Renaming statement D.42664 = imp->codec_type;

Renaming statement if (D.42664 != 0)



Renaming block #37



Renaming block #38

Renaming statement D.42669 = imp->iananame;

Renaming statement D.42670 = strcasecmp (D.42669, "ilbc");

Renaming statement if (D.42670 == 0)



Renaming block #39

Renaming statement D.42669 = imp->iananame;

Renaming statement D.42672 = strcasecmp (D.42669, "isac");

Renaming statement if (D.42672 == 0)



Renaming block #40

Renaming statement this_ptime = 20;



Renaming block #41

Renaming statement if (noptime == 0)



Renaming block #42

Renaming statement if (cur_ptime == 0)



Renaming block #43

Renaming statement if (ptime == 0)



Renaming block #44

Renaming statement ptime = this_ptime;



Renaming block #45

Renaming statement if (this_ptime != cur_ptime)



Renaming block #46



Renaming block #47

Renaming statement D.42622 = smh->ianacodes[i];

Renaming statement D.42623 = (signed char) D.42622;

Renaming statement if (D.42623 >= 0)



Renaming block #48

Renaming statement D.42622 = smh->ianacodes[i];

Renaming statement D.42626 = (int) D.42622;

Renaming statement D.42627 = already_did[D.42626];

Renaming statement if (D.42627 != 0)



Renaming block #49



Renaming block #50

Renaming statement D.42622 = smh->ianacodes[i];

Renaming statement D.42626 = (int) D.42622;

Renaming statement already_did[D.42626] = 1;



Renaming block #51

Renaming statement D.42686 = imp->samples_per_second;

Renaming statement rate = (int) D.42686;

Renaming statement if (map != 0B)



Renaming block #52

Renaming statement check = 0B;

Renaming statement D.42669 = imp->iananame;

Renaming statement D.42689 = imp->bits_per_second;

Renaming statement switch_snprintf (&key, 128, "%s:%u", D.42669, D.42689);

Renaming statement check = switch_event_get_header_idx (map, &key, -1);

Renaming statement if (check != 0B)



Renaming block #53

Renaming statement D.42669 = imp->iananame;

Renaming statement check = switch_event_get_header_idx (map, D.42669, -1);

Renaming statement if (check != 0B)



Renaming block #54

Renaming statement fmtp = check;



Renaming block #55

Renaming statement D.42693 = smh->fmtps[i];

Renaming statement if (D.42693 != 0B)



Renaming block #56

Renaming statement fmtp = smh->fmtps[i];



Renaming block #57

Renaming statement D.42622 = smh->ianacodes[i];

Renaming statement if (D.42622 > 95)



Renaming block #58

Renaming statement D.42599 = session->channel;

Renaming statement D.42699 = switch_channel_test_flag (D.42599, 110);

Renaming statement if (D.42699 != 0)



Renaming block #59

Renaming statement D.42669 = imp->iananame;

Renaming statement D.42700 = imp->number_of_channels;

Renaming statement D.42701 = (int) D.42700;

Renaming statement channels = get_channels (D.42669, D.42701);

Renaming statement if (channels > 1)



Renaming block #60

Renaming statement D.42704 = strlen (buf);

Renaming statement D.42705 = buf + D.42704;

Renaming statement D.42706 = strlen (buf);

Renaming statement D.42707 = buflen - D.42706;

Renaming statement D.42622 = smh->ianacodes[i];

Renaming statement D.42626 = (int) D.42622;

Renaming statement D.42669 = imp->iananame;

Renaming statement switch_snprintf (D.42705, D.42707, "a=rtpmap:%d %s/%d/%d\n", D.42626, D.42669, rate, channels);



Renaming block #61

Renaming statement D.42709 = strlen (buf);

Renaming statement D.42710 = buf + D.42709;

Renaming statement D.42711 = strlen (buf);

Renaming statement D.42712 = buflen - D.42711;

Renaming statement D.42622 = smh->ianacodes[i];

Renaming statement D.42626 = (int) D.42622;

Renaming statement D.42669 = imp->iananame;

Renaming statement switch_snprintf (D.42710, D.42712, "a=rtpmap:%d %s/%d\n", D.42626, D.42669, rate);



Renaming block #62

Renaming statement if (fmtp != 0B)



Renaming block #63

Renaming statement D.42715 = strlen (buf);

Renaming statement D.42716 = buf + D.42715;

Renaming statement D.42717 = strlen (buf);

Renaming statement D.42718 = buflen - D.42717;

Renaming statement D.42622 = smh->ianacodes[i];

Renaming statement D.42626 = (int) D.42622;

Renaming statement switch_snprintf (D.42716, D.42718, "a=fmtp:%d %s\n", D.42626, fmtp);



Renaming block #64

Renaming statement i = i + 1;



Renaming block #66

Renaming statement D.42634 = smh->mparams;

Renaming statement D.42636 = D.42634->dtmf_type;

Renaming statement if (D.42636 == 0)



Renaming block #67

Renaming statement D.42722 = switch_media_handle_test_media_flag (smh, 8);

Renaming statement if (D.42722 != 0)



Renaming block #68

Renaming statement D.42599 = session->channel;

Renaming statement D.42724 = switch_channel_test_flag (D.42599, 93);

Renaming statement if (D.42724 != 0)



Renaming block #69

Renaming statement D.42634 = smh->mparams;

Renaming statement D.42639 = D.42634->te;

Renaming statement if (D.42639 > 95)



Renaming block #70

Renaming statement D.42599 = session->channel;

Renaming statement D.42727 = switch_channel_test_flag (D.42599, 106);

Renaming statement if (D.42727 != 0)



Renaming block #71

Renaming statement D.42730 = strlen (buf);

Renaming statement D.42731 = buf + D.42730;

Renaming statement D.42732 = strlen (buf);

Renaming statement D.42733 = buflen - D.42732;

Renaming statement D.42634 = smh->mparams;

Renaming statement D.42639 = D.42634->te;

Renaming statement D.42646 = (int) D.42639;

Renaming statement switch_snprintf (D.42731, D.42733, "a=rtpmap:%d telephone-event/8000\n", D.42646);



Renaming block #72

Renaming statement D.42735 = strlen (buf);

Renaming statement D.42736 = buf + D.42735;

Renaming statement D.42737 = strlen (buf);

Renaming statement D.42738 = buflen - D.42737;

Renaming statement D.42634 = smh->mparams;

Renaming statement D.42639 = D.42634->te;

Renaming statement D.42646 = (int) D.42639;

Renaming statement D.42634 = smh->mparams;

Renaming statement D.42639 = D.42634->te;

Renaming statement D.42646 = (int) D.42639;

Renaming statement switch_snprintf (D.42736, D.42738, "a=rtpmap:%d telephone-event/8000\na=fmtp:%d 0-16\n", D.42646, D.42646);



Renaming block #73

Renaming statement D.42739 = a_engine->local_dtls_fingerprint.type;

Renaming statement D.42740 = _zstr (D.42739);

Renaming statement if (D.42740 == 0)



Renaming block #74

Renaming statement if (secure != 0)



Renaming block #75

Renaming statement D.42745 = strlen (buf);

Renaming statement D.42746 = buf + D.42745;

Renaming statement D.42747 = strlen (buf);

Renaming statement D.42748 = buflen - D.42747;

Renaming statement D.42739 = a_engine->local_dtls_fingerprint.type;

Renaming statement D.42749 = &a_engine->local_dtls_fingerprint.str;

Renaming statement switch_snprintf (D.42746, D.42748, "a=fingerprint:%s %s\n", D.42739, D.42749);



Renaming block #76

Renaming statement D.42634 = smh->mparams;

Renaming statement D.42750 = D.42634->rtcp_audio_interval_msec;

Renaming statement if (D.42750 != 0B)



Renaming block #77

Renaming statement D.42753 = a_engine->rtcp_mux;

Renaming statement if (D.42753 > 0)



Renaming block #78

Renaming statement D.42756 = strlen (buf);

Renaming statement D.42757 = buf + D.42756;

Renaming statement D.42758 = strlen (buf);

Renaming statement D.42759 = buflen - D.42758;

Renaming statement switch_snprintf (D.42757, D.42759, "a=rtcp-mux\n");

Renaming statement D.42760 = strlen (buf);

Renaming statement D.42761 = buf + D.42760;

Renaming statement D.42762 = strlen (buf);

Renaming statement D.42763 = buflen - D.42762;

Renaming statement D.42592 = (int) port;

Renaming statement switch_snprintf (D.42761, D.42763, "a=rtcp:%d IN %s %s\n", D.42592, family, ip);



Renaming block #79

Renaming statement D.42765 = strlen (buf);

Renaming statement D.42766 = buf + D.42765;

Renaming statement D.42767 = strlen (buf);

Renaming statement D.42768 = buflen - D.42767;

Renaming statement D.42592 = (int) port;

Renaming statement D.42769 = D.42592 + 1;

Renaming statement switch_snprintf (D.42766, D.42768, "a=rtcp:%d IN %s %s\n", D.42769, family, ip);



Renaming block #80

Renaming statement D.42770 = a_engine->ice_out.cands[0][0].ready;

Renaming statement if (D.42770 != 0)



Renaming block #81

Renaming statement c1 = 659136;

Renaming statement c2 = 659134;

Renaming statement gen_ice (session, 0, 0B, 0);

Renaming statement ice_out = &a_engine->ice_out;

Renaming statement D.42773 = strlen (buf);

Renaming statement D.42774 = buf + D.42773;

Renaming statement D.42775 = strlen (buf);

Renaming statement D.42776 = buflen - D.42775;

Renaming statement D.42777 = a_engine->ssrc;

Renaming statement D.42778 = smh->cname;

Renaming statement switch_snprintf (D.42774, D.42776, "a=ssrc:%u cname:%s\n", D.42777, D.42778);

Renaming statement D.42779 = strlen (buf);

Renaming statement D.42780 = buf + D.42779;

Renaming statement D.42781 = strlen (buf);

Renaming statement D.42782 = buflen - D.42781;

Renaming statement D.42777 = a_engine->ssrc;

Renaming statement D.42783 = smh->msid;

Renaming statement switch_snprintf (D.42780, D.42782, "a=ssrc:%u msid:%s a0\n", D.42777, D.42783);

Renaming statement D.42784 = strlen (buf);

Renaming statement D.42785 = buf + D.42784;

Renaming statement D.42786 = strlen (buf);

Renaming statement D.42787 = buflen - D.42786;

Renaming statement D.42777 = a_engine->ssrc;

Renaming statement D.42783 = smh->msid;

Renaming statement switch_snprintf (D.42785, D.42787, "a=ssrc:%u mslabel:%s\n", D.42777, D.42783);

Renaming statement D.42788 = strlen (buf);

Renaming statement D.42789 = buf + D.42788;

Renaming statement D.42790 = strlen (buf);

Renaming statement D.42791 = buflen - D.42790;

Renaming statement D.42777 = a_engine->ssrc;

Renaming statement D.42783 = smh->msid;

Renaming statement switch_snprintf (D.42789, D.42791, "a=ssrc:%u label:%sa0\n", D.42777, D.42783);

Renaming statement D.42792 = strlen (buf);

Renaming statement D.42793 = buf + D.42792;

Renaming statement D.42794 = strlen (buf);

Renaming statement D.42795 = buflen - D.42794;

Renaming statement D.42796 = ice_out->ufrag;

Renaming statement switch_snprintf (D.42793, D.42795, "a=ice-ufrag:%s\n", D.42796);

Renaming statement D.42797 = strlen (buf);

Renaming statement D.42798 = buf + D.42797;

Renaming statement D.42799 = strlen (buf);

Renaming statement D.42800 = buflen - D.42799;

Renaming statement D.42801 = ice_out->pwd;

Renaming statement switch_snprintf (D.42798, D.42800, "a=ice-pwd:%s\n", D.42801);

Renaming statement D.42802 = strlen (buf);

Renaming statement D.42803 = buf + D.42802;

Renaming statement D.42804 = strlen (buf);

Renaming statement D.42805 = buflen - D.42804;

Renaming statement D.42806 = ice_out->cands[0][0].transport;

Renaming statement D.42807 = ice_out->cands[0][0].con_addr;

Renaming statement D.42808 = ice_out->cands[0][0].con_port;

Renaming statement D.42809 = (int) D.42808;

Renaming statement switch_snprintf (D.42803, D.42805, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.42806, c1, D.42807, D.42809);

Renaming statement D.42810 = a_engine->local_sdp_ip;

Renaming statement D.42811 = _zstr (D.42810);

Renaming statement if (D.42811 == 0)



Renaming block #82

Renaming statement D.42807 = ice_out->cands[0][0].con_addr;

Renaming statement D.42814 = _zstr (D.42807);

Renaming statement if (D.42814 == 0)



Renaming block #83

Renaming statement D.42810 = a_engine->local_sdp_ip;

Renaming statement D.42807 = ice_out->cands[0][0].con_addr;

Renaming statement D.39479 = __builtin_strcmp (D.42810, D.42807);

Renaming statement if (D.39479 != 0)



Renaming block #84

Renaming statement D.42819 = a_engine->local_sdp_port;

Renaming statement D.42808 = ice_out->cands[0][0].con_port;

Renaming statement if (D.42819 != D.42808)



Renaming block #85

Renaming statement D.42822 = strlen (buf);

Renaming statement D.42823 = buf + D.42822;

Renaming statement D.42824 = strlen (buf);

Renaming statement D.42825 = buflen - D.42824;

Renaming statement D.42806 = ice_out->cands[0][0].transport;

Renaming statement D.42807 = ice_out->cands[0][0].con_addr;

Renaming statement D.42808 = ice_out->cands[0][0].con_port;

Renaming statement D.42809 = (int) D.42808;

Renaming statement D.42810 = a_engine->local_sdp_ip;

Renaming statement D.42819 = a_engine->local_sdp_port;

Renaming statement D.42826 = (int) D.42819;

Renaming statement switch_snprintf (D.42823, D.42825, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.42806, c2, D.42807, D.42809, D.42810, D.42826);



Renaming block #86

Renaming statement D.42753 = a_engine->rtcp_mux;

Renaming statement if (D.42753 <= 0)



Renaming block #87

Renaming statement D.42599 = session->channel;

Renaming statement D.42830 = switch_channel_direction (D.42599);

Renaming statement if (D.42830 == 1)



Renaming block #88

Renaming statement D.42831 = strlen (buf);

Renaming statement D.42832 = buf + D.42831;

Renaming statement D.42833 = strlen (buf);

Renaming statement D.42834 = buflen - D.42833;

Renaming statement D.42806 = ice_out->cands[0][0].transport;

Renaming statement D.42807 = ice_out->cands[0][0].con_addr;

Renaming statement D.42808 = ice_out->cands[0][0].con_port;

Renaming statement D.42809 = (int) D.42808;

Renaming statement D.42753 = a_engine->rtcp_mux;

Renaming statement D.42835 = D.42753 <= 0;

Renaming statement D.42836 = D.42809 + D.42835;

Renaming statement switch_snprintf (D.42832, D.42834, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.42806, c1, D.42807, D.42836);

Renaming statement D.42810 = a_engine->local_sdp_ip;

Renaming statement D.42837 = _zstr (D.42810);

Renaming statement if (D.42837 == 0)



Renaming block #89

Renaming statement D.42840 = ice_out->cands[0][1].con_addr;

Renaming statement D.42841 = _zstr (D.42840);

Renaming statement if (D.42841 == 0)



Renaming block #90

Renaming statement D.42810 = a_engine->local_sdp_ip;

Renaming statement D.42840 = ice_out->cands[0][1].con_addr;

Renaming statement D.39488 = __builtin_strcmp (D.42810, D.42840);

Renaming statement if (D.39488 != 0)



Renaming block #91

Renaming statement D.42819 = a_engine->local_sdp_port;

Renaming statement D.42846 = ice_out->cands[0][1].con_port;

Renaming statement if (D.42819 != D.42846)



Renaming block #92

Renaming statement D.42849 = strlen (buf);

Renaming statement D.42850 = buf + D.42849;

Renaming statement D.42851 = strlen (buf);

Renaming statement D.42852 = buflen - D.42851;

Renaming statement D.42806 = ice_out->cands[0][0].transport;

Renaming statement D.42807 = ice_out->cands[0][0].con_addr;

Renaming statement D.42808 = ice_out->cands[0][0].con_port;

Renaming statement D.42809 = (int) D.42808;

Renaming statement D.42753 = a_engine->rtcp_mux;

Renaming statement D.42835 = D.42753 <= 0;

Renaming statement D.42836 = D.42809 + D.42835;

Renaming statement D.42810 = a_engine->local_sdp_ip;

Renaming statement D.42819 = a_engine->local_sdp_port;

Renaming statement D.42826 = (int) D.42819;

Renaming statement D.42753 = a_engine->rtcp_mux;

Renaming statement D.42835 = D.42753 <= 0;

Renaming statement D.42853 = D.42826 + D.42835;

Renaming statement switch_snprintf (D.42850, D.42852, "a=candidate:%s 2 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.42806, c2, D.42807, D.42836, D.42810, D.42853);



Renaming block #93

Renaming statement if (secure != 0)



Renaming block #94

Renaming statement D.42599 = session->channel;

Renaming statement D.42856 = switch_channel_test_flag (D.42599, 109);

Renaming statement if (D.42856 == 0)



Renaming block #95

Renaming statement i = 0;



Renaming block #101

Renaming statement D.42859 = smh->crypto_suite_order[i];

Renaming statement if (D.42859 != 9)



Renaming block #96

Renaming statement D.42859 = smh->crypto_suite_order[i];

Renaming statement j = SUITES[D.42859].type;

Renaming statement D.42601 = a_engine->crypto_type;

Renaming statement if (D.42601 == j)



Renaming block #97

Renaming statement D.42601 = a_engine->crypto_type;

Renaming statement if (D.42601 == 9)



Renaming block #98

Renaming statement D.42863 = a_engine->ssec[j].local_crypto_key;

Renaming statement D.42864 = _zstr (D.42863);

Renaming statement if (D.42864 == 0)



Renaming block #99

Renaming statement D.42867 = strlen (buf);

Renaming statement D.42868 = buf + D.42867;

Renaming statement D.42869 = strlen (buf);

Renaming statement D.42870 = buflen - D.42869;

Renaming statement D.42863 = a_engine->ssec[j].local_crypto_key;

Renaming statement switch_snprintf (D.42868, D.42870, "a=crypto:%s\n", D.42863);



Renaming block #100

Renaming statement i = i + 1;



Renaming block #102

Renaming statement if (cng_type == 0)



Renaming block #103

Renaming statement D.42873 = switch_media_handle_test_media_flag (smh, 9);

Renaming statement if (D.42873 != 0)



Renaming block #104

Renaming statement D.42876 = strlen (buf);

Renaming statement D.42877 = buf + D.42876;

Renaming statement D.42878 = strlen (buf);

Renaming statement D.42879 = buflen - D.42878;

Renaming statement switch_snprintf (D.42877, D.42879, "a=silenceSupp:off - - - -\n");



Renaming block #105

Renaming statement if (append_audio != 0B)



Renaming block #106

Renaming statement D.42882 = strlen (buf);

Renaming statement D.42883 = buf + D.42882;

Renaming statement D.42884 = strlen (buf);

Renaming statement D.42885 = buflen - D.42884;

Renaming statement D.42888 = *append_audio;

Renaming statement if (D.42888 != 0)



Renaming block #107

Renaming statement D.42891 = strlen (append_audio);

Renaming statement D.42892 = D.42891 + -1;

Renaming statement iftmp.42 = append_audio + D.42892;



Renaming block #108

Renaming statement iftmp.42 = append_audio;



Renaming block #109

Renaming statement D.42894 = *iftmp.42;

Renaming statement if (D.42894 == 10)



Renaming block #110

Renaming statement iftmp.41 = "";



Renaming block #111

Renaming statement iftmp.41 = "\n";



Renaming block #112

Renaming statement switch_snprintf (D.42883, D.42885, "%s%s", append_audio, iftmp.41);



Renaming block #113

Renaming statement if (cur_ptime == 0)



Renaming block #114

Renaming statement cur_ptime = ptime;



Renaming block #115

Renaming statement D.42900 = noptime == 0;

Renaming statement D.42901 = cur_ptime != 0;

Renaming statement D.42902 = D.42900 && D.42901;

Renaming statement if (D.42902 != 0)



Renaming block #116

Renaming statement D.42905 = strlen (buf);

Renaming statement D.42906 = buf + D.42905;

Renaming statement D.42907 = strlen (buf);

Renaming statement D.42908 = buflen - D.42907;

Renaming statement switch_snprintf (D.42906, D.42908, "a=ptime:%d\n", cur_ptime);



Renaming block #117

Renaming statement local_sdp_audio_zrtp_hash = switch_core_media_get_zrtp_hash (session, 0, 1);

Renaming statement if (local_sdp_audio_zrtp_hash != 0B)



Renaming block #118

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5882, session, 7, "Adding audio a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash);

Renaming statement D.42911 = strlen (buf);

Renaming statement D.42912 = buf + D.42911;

Renaming statement D.42913 = strlen (buf);

Renaming statement D.42914 = buflen - D.42913;

Renaming statement switch_snprintf (D.42912, D.42914, "a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash);



Renaming block #119

Renaming statement D.42915 = _zstr (sr);

Renaming statement if (D.42915 == 0)



Renaming block #120

Renaming statement D.42918 = strlen (buf);

Renaming statement D.42919 = buf + D.42918;

Renaming statement D.42920 = strlen (buf);

Renaming statement D.42921 = buflen - D.42920;

Renaming statement switch_snprintf (D.42919, D.42921, "a=%s\n", sr);



Renaming block #121



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement already_did = {};



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 5614, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_23 = session_22(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.42588_26 = strlen (buf_25(D));

Updating SSA information for statement D.42590_28 = strlen (buf_25(D));



Registering new PHI nodes in block #6

Updating SSA information for statement D.42599_34 = session_22(D)->channel;

Updating SSA information for statement D.42600_35 = switch_channel_direction (D.42599_34);



Registering new PHI nodes in block #7

Updating SSA information for statement D.42601_36 = a_engine_24->crypto_type;



Registering new PHI nodes in block #9



Registering new PHI nodes in block #8



Registering new PHI nodes in block #10

Updating SSA information for statement D.42602_39 = get_media_profile_name (session_22(D), iftmp.40_16);

Updating SSA information for statement switch_snprintf (D.42589_27, D.42591_30, "m=audio %d %s", D.42592_32, D.42602_39);



Registering new PHI nodes in block #28

Updating SSA information for statement D.42634_41 = smh_23->mparams;

Updating SSA information for statement D.42635_42 = D.42634_41->num_codecs;



Registering new PHI nodes in block #11

Updating SSA information for statement imp_43 = smh_23->codecs[i_2];

Updating SSA information for statement D.42603_44 = imp_43->microseconds_per_packet;

Updating SSA information for statement D.42606_46 = imp_43->iananame;

Updating SSA information for statement D.42607_47 = strcasecmp (D.42606_46, "ilbc");



Registering new PHI nodes in block #12

Updating SSA information for statement D.42606_48 = imp_43->iananame;

Updating SSA information for statement D.42609_49 = strcasecmp (D.42606_48, "isac");



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement D.42610_51 = imp_43->codec_type;



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17



Registering new PHI nodes in block #18



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22

Updating SSA information for statement D.42622_54 = smh_23->ianacodes[i_2];



Registering new PHI nodes in block #23

Updating SSA information for statement D.42622_56 = smh_23->ianacodes[i_2];

Updating SSA information for statement D.42627_58 = already_did[D.42626_57];



Registering new PHI nodes in block #24



Registering new PHI nodes in block #25

Updating SSA information for statement D.42622_59 = smh_23->ianacodes[i_2];

Updating SSA information for statement already_did[D.42626_60] = 1;



Registering new PHI nodes in block #26

Updating SSA information for statement D.42630_61 = strlen (buf_25(D));

Updating SSA information for statement D.42632_63 = strlen (buf_25(D));

Updating SSA information for statement D.42622_65 = smh_23->ianacodes[i_2];

Updating SSA information for statement switch_snprintf (D.42631_62, D.42633_64, " %d", D.42626_66);



Registering new PHI nodes in block #27



Registering new PHI nodes in block #29

Updating SSA information for statement D.42634_68 = smh_23->mparams;

Updating SSA information for statement D.42636_69 = D.42634_68->dtmf_type;



Registering new PHI nodes in block #30

Updating SSA information for statement D.42634_70 = smh_23->mparams;

Updating SSA information for statement D.42639_71 = D.42634_70->te;



Registering new PHI nodes in block #31

Updating SSA information for statement D.42642_72 = strlen (buf_25(D));

Updating SSA information for statement D.42644_74 = strlen (buf_25(D));

Updating SSA information for statement D.42634_76 = smh_23->mparams;

Updating SSA information for statement D.42639_77 = D.42634_76->te;

Updating SSA information for statement switch_snprintf (D.42643_73, D.42645_75, " %d", D.42646_78);



Registering new PHI nodes in block #32

Updating SSA information for statement D.42647_79 = switch_media_handle_test_media_flag (smh_23, 9);



Registering new PHI nodes in block #33



Registering new PHI nodes in block #34

Updating SSA information for statement D.42655_85 = strlen (buf_25(D));

Updating SSA information for statement D.42657_87 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42656_86, D.42658_88, " %d", cng_type_80(D));



Registering new PHI nodes in block #35

Updating SSA information for statement D.42659_89 = strlen (buf_25(D));

Updating SSA information for statement D.42661_91 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42660_90, D.42662_92, "\n");

Updating SSA information for statement memset (&already_did, 0, 512);



Registering new PHI nodes in block #65

Updating SSA information for statement D.42634_94 = smh_23->mparams;

Updating SSA information for statement D.42635_95 = D.42634_94->num_codecs;



Registering new PHI nodes in block #36

Updating SSA information for statement imp_96 = smh_23->codecs[i_3];

Updating SSA information for statement fmtp_97 = imp_96->fmtp;

Updating SSA information for statement D.42663_98 = imp_96->microseconds_per_packet;

Updating SSA information for statement D.42664_100 = imp_96->codec_type;



Registering new PHI nodes in block #37



Registering new PHI nodes in block #38

Updating SSA information for statement D.42669_101 = imp_96->iananame;

Updating SSA information for statement D.42670_102 = strcasecmp (D.42669_101, "ilbc");



Registering new PHI nodes in block #39

Updating SSA information for statement D.42669_103 = imp_96->iananame;

Updating SSA information for statement D.42672_104 = strcasecmp (D.42669_103, "isac");



Registering new PHI nodes in block #40



Registering new PHI nodes in block #41



Registering new PHI nodes in block #42



Registering new PHI nodes in block #43



Registering new PHI nodes in block #44



Registering new PHI nodes in block #45



Registering new PHI nodes in block #46



Registering new PHI nodes in block #47

Updating SSA information for statement D.42622_107 = smh_23->ianacodes[i_3];



Registering new PHI nodes in block #48

Updating SSA information for statement D.42622_109 = smh_23->ianacodes[i_3];

Updating SSA information for statement D.42627_111 = already_did[D.42626_110];



Registering new PHI nodes in block #49



Registering new PHI nodes in block #50

Updating SSA information for statement D.42622_112 = smh_23->ianacodes[i_3];

Updating SSA information for statement already_did[D.42626_113] = 1;



Registering new PHI nodes in block #51

Updating SSA information for statement D.42686_114 = imp_96->samples_per_second;



Registering new PHI nodes in block #52

Updating SSA information for statement key = "";

Updating SSA information for statement D.42669_118 = imp_96->iananame;

Updating SSA information for statement D.42689_119 = imp_96->bits_per_second;

Updating SSA information for statement switch_snprintf (&key, 128, "%s:%u", D.42669_118, D.42689_119);

Updating SSA information for statement check_120 = switch_event_get_header_idx (map_116(D), &key, -1);



Registering new PHI nodes in block #53

Updating SSA information for statement D.42669_121 = imp_96->iananame;

Updating SSA information for statement check_122 = switch_event_get_header_idx (map_116(D), D.42669_121, -1);



Registering new PHI nodes in block #54



Registering new PHI nodes in block #55

Updating SSA information for statement D.42693_124 = smh_23->fmtps[i_3];



Registering new PHI nodes in block #56

Updating SSA information for statement fmtp_125 = smh_23->fmtps[i_3];



Registering new PHI nodes in block #57

Updating SSA information for statement D.42622_126 = smh_23->ianacodes[i_3];



Registering new PHI nodes in block #58

Updating SSA information for statement D.42599_127 = session_22(D)->channel;

Updating SSA information for statement D.42699_128 = switch_channel_test_flag (D.42599_127, 110);



Registering new PHI nodes in block #59

Updating SSA information for statement D.42669_129 = imp_96->iananame;

Updating SSA information for statement D.42700_130 = imp_96->number_of_channels;

Updating SSA information for statement channels_132 = get_channels (D.42669_129, D.42701_131);



Registering new PHI nodes in block #60

Updating SSA information for statement D.42704_133 = strlen (buf_25(D));

Updating SSA information for statement D.42706_135 = strlen (buf_25(D));

Updating SSA information for statement D.42622_137 = smh_23->ianacodes[i_3];

Updating SSA information for statement D.42669_139 = imp_96->iananame;

Updating SSA information for statement switch_snprintf (D.42705_134, D.42707_136, "a=rtpmap:%d %s/%d/%d\n", D.42626_138, D.42669_139, rate_115, channels_132);



Registering new PHI nodes in block #61

Updating SSA information for statement D.42709_140 = strlen (buf_25(D));

Updating SSA information for statement D.42711_142 = strlen (buf_25(D));

Updating SSA information for statement D.42622_144 = smh_23->ianacodes[i_3];

Updating SSA information for statement D.42669_146 = imp_96->iananame;

Updating SSA information for statement switch_snprintf (D.42710_141, D.42712_143, "a=rtpmap:%d %s/%d\n", D.42626_145, D.42669_146, rate_115);



Registering new PHI nodes in block #62



Registering new PHI nodes in block #63

Updating SSA information for statement D.42715_147 = strlen (buf_25(D));

Updating SSA information for statement D.42717_149 = strlen (buf_25(D));

Updating SSA information for statement D.42622_151 = smh_23->ianacodes[i_3];

Updating SSA information for statement switch_snprintf (D.42716_148, D.42718_150, "a=fmtp:%d %s\n", D.42626_152, fmtp_12);



Registering new PHI nodes in block #64



Registering new PHI nodes in block #66

Updating SSA information for statement D.42634_154 = smh_23->mparams;

Updating SSA information for statement D.42636_155 = D.42634_154->dtmf_type;



Registering new PHI nodes in block #67

Updating SSA information for statement D.42722_156 = switch_media_handle_test_media_flag (smh_23, 8);



Registering new PHI nodes in block #68

Updating SSA information for statement D.42599_157 = session_22(D)->channel;

Updating SSA information for statement D.42724_158 = switch_channel_test_flag (D.42599_157, 93);



Registering new PHI nodes in block #69

Updating SSA information for statement D.42634_159 = smh_23->mparams;

Updating SSA information for statement D.42639_160 = D.42634_159->te;



Registering new PHI nodes in block #70

Updating SSA information for statement D.42599_161 = session_22(D)->channel;

Updating SSA information for statement D.42727_162 = switch_channel_test_flag (D.42599_161, 106);



Registering new PHI nodes in block #71

Updating SSA information for statement D.42730_163 = strlen (buf_25(D));

Updating SSA information for statement D.42732_165 = strlen (buf_25(D));

Updating SSA information for statement D.42634_167 = smh_23->mparams;

Updating SSA information for statement D.42639_168 = D.42634_167->te;

Updating SSA information for statement switch_snprintf (D.42731_164, D.42733_166, "a=rtpmap:%d telephone-event/8000\n", D.42646_169);



Registering new PHI nodes in block #72

Updating SSA information for statement D.42735_170 = strlen (buf_25(D));

Updating SSA information for statement D.42737_172 = strlen (buf_25(D));

Updating SSA information for statement D.42634_174 = smh_23->mparams;

Updating SSA information for statement D.42639_175 = D.42634_174->te;

Updating SSA information for statement D.42634_177 = smh_23->mparams;

Updating SSA information for statement D.42639_178 = D.42634_177->te;

Updating SSA information for statement switch_snprintf (D.42736_171, D.42738_173, "a=rtpmap:%d telephone-event/8000\na=fmtp:%d 0-16\n", D.42646_179, D.42646_179);



Registering new PHI nodes in block #73

Updating SSA information for statement D.42739_180 = a_engine_24->local_dtls_fingerprint.type;

Updating SSA information for statement D.42740_181 = _zstr (D.42739_180);



Registering new PHI nodes in block #74



Registering new PHI nodes in block #75

Updating SSA information for statement D.42745_182 = strlen (buf_25(D));

Updating SSA information for statement D.42747_184 = strlen (buf_25(D));

Updating SSA information for statement D.42739_186 = a_engine_24->local_dtls_fingerprint.type;

Updating SSA information for statement switch_snprintf (D.42746_183, D.42748_185, "a=fingerprint:%s %s\n", D.42739_186, D.42749_187);



Registering new PHI nodes in block #76

Updating SSA information for statement D.42634_188 = smh_23->mparams;

Updating SSA information for statement D.42750_189 = D.42634_188->rtcp_audio_interval_msec;



Registering new PHI nodes in block #77

Updating SSA information for statement D.42753_190 = a_engine_24->rtcp_mux;



Registering new PHI nodes in block #78

Updating SSA information for statement D.42756_191 = strlen (buf_25(D));

Updating SSA information for statement D.42758_193 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42757_192, D.42759_194, "a=rtcp-mux\n");

Updating SSA information for statement D.42760_195 = strlen (buf_25(D));

Updating SSA information for statement D.42762_197 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42761_196, D.42763_198, "a=rtcp:%d IN %s %s\n", D.42592_199, family_200(D), ip_201(D));



Registering new PHI nodes in block #79

Updating SSA information for statement D.42765_202 = strlen (buf_25(D));

Updating SSA information for statement D.42767_204 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42766_203, D.42768_205, "a=rtcp:%d IN %s %s\n", D.42769_207, family_200(D), ip_201(D));



Registering new PHI nodes in block #80

Updating SSA information for statement D.42770_208 = a_engine_24->ice_out.cands[0][0].ready;



Registering new PHI nodes in block #81

Updating SSA information for statement tmp1 = "";

Updating SSA information for statement tmp2 = "";

Updating SSA information for statement tmp1[10] = 0;

Updating SSA information for statement tmp2[10] = 0;

Updating SSA information for statement switch_stun_random_string (&tmp1, 10, "0123456789");

Updating SSA information for statement switch_stun_random_string (&tmp2, 10, "0123456789");

Updating SSA information for statement gen_ice (session_22(D), 0, 0B, 0);

Updating SSA information for statement D.42773_212 = strlen (buf_25(D));

Updating SSA information for statement D.42775_214 = strlen (buf_25(D));

Updating SSA information for statement D.42777_216 = a_engine_24->ssrc;

Updating SSA information for statement D.42778_217 = smh_23->cname;

Updating SSA information for statement switch_snprintf (D.42774_213, D.42776_215, "a=ssrc:%u cname:%s\n", D.42777_216, D.42778_217);

Updating SSA information for statement D.42779_218 = strlen (buf_25(D));

Updating SSA information for statement D.42781_220 = strlen (buf_25(D));

Updating SSA information for statement D.42777_222 = a_engine_24->ssrc;

Updating SSA information for statement D.42783_223 = smh_23->msid;

Updating SSA information for statement switch_snprintf (D.42780_219, D.42782_221, "a=ssrc:%u msid:%s a0\n", D.42777_222, D.42783_223);

Updating SSA information for statement D.42784_224 = strlen (buf_25(D));

Updating SSA information for statement D.42786_226 = strlen (buf_25(D));

Updating SSA information for statement D.42777_228 = a_engine_24->ssrc;

Updating SSA information for statement D.42783_229 = smh_23->msid;

Updating SSA information for statement switch_snprintf (D.42785_225, D.42787_227, "a=ssrc:%u mslabel:%s\n", D.42777_228, D.42783_229);

Updating SSA information for statement D.42788_230 = strlen (buf_25(D));

Updating SSA information for statement D.42790_232 = strlen (buf_25(D));

Updating SSA information for statement D.42777_234 = a_engine_24->ssrc;

Updating SSA information for statement D.42783_235 = smh_23->msid;

Updating SSA information for statement switch_snprintf (D.42789_231, D.42791_233, "a=ssrc:%u label:%sa0\n", D.42777_234, D.42783_235);

Updating SSA information for statement D.42792_236 = strlen (buf_25(D));

Updating SSA information for statement D.42794_238 = strlen (buf_25(D));

Updating SSA information for statement D.42796_240 = ice_out_211->ufrag;

Updating SSA information for statement switch_snprintf (D.42793_237, D.42795_239, "a=ice-ufrag:%s\n", D.42796_240);

Updating SSA information for statement D.42797_241 = strlen (buf_25(D));

Updating SSA information for statement D.42799_243 = strlen (buf_25(D));

Updating SSA information for statement D.42801_245 = ice_out_211->pwd;

Updating SSA information for statement switch_snprintf (D.42798_242, D.42800_244, "a=ice-pwd:%s\n", D.42801_245);

Updating SSA information for statement D.42802_246 = strlen (buf_25(D));

Updating SSA information for statement D.42804_248 = strlen (buf_25(D));

Updating SSA information for statement D.42806_250 = ice_out_211->cands[0][0].transport;

Updating SSA information for statement D.42807_251 = ice_out_211->cands[0][0].con_addr;

Updating SSA information for statement D.42808_252 = ice_out_211->cands[0][0].con_port;

Updating SSA information for statement switch_snprintf (D.42803_247, D.42805_249, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.42806_250, c1_209, D.42807_251, D.42809_253);

Updating SSA information for statement D.42810_254 = a_engine_24->local_sdp_ip;

Updating SSA information for statement D.42811_255 = _zstr (D.42810_254);



Registering new PHI nodes in block #82

Updating SSA information for statement D.42807_256 = ice_out_211->cands[0][0].con_addr;

Updating SSA information for statement D.42814_257 = _zstr (D.42807_256);



Registering new PHI nodes in block #83

Updating SSA information for statement D.42810_258 = a_engine_24->local_sdp_ip;

Updating SSA information for statement D.42807_259 = ice_out_211->cands[0][0].con_addr;

Updating SSA information for statement D.39479_260 = __builtin_strcmp (D.42810_258, D.42807_259);



Registering new PHI nodes in block #84

Updating SSA information for statement D.42819_261 = a_engine_24->local_sdp_port;

Updating SSA information for statement D.42808_262 = ice_out_211->cands[0][0].con_port;



Registering new PHI nodes in block #85

Updating SSA information for statement D.42822_263 = strlen (buf_25(D));

Updating SSA information for statement D.42824_265 = strlen (buf_25(D));

Updating SSA information for statement D.42806_267 = ice_out_211->cands[0][0].transport;

Updating SSA information for statement D.42807_268 = ice_out_211->cands[0][0].con_addr;

Updating SSA information for statement D.42808_269 = ice_out_211->cands[0][0].con_port;

Updating SSA information for statement D.42810_271 = a_engine_24->local_sdp_ip;

Updating SSA information for statement D.42819_272 = a_engine_24->local_sdp_port;

Updating SSA information for statement switch_snprintf (D.42823_264, D.42825_266, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.42806_267, c2_210, D.42807_268, D.42809_270, D.42810_271, D.42826_273);



Registering new PHI nodes in block #86

Updating SSA information for statement D.42753_274 = a_engine_24->rtcp_mux;



Registering new PHI nodes in block #87

Updating SSA information for statement D.42599_275 = session_22(D)->channel;

Updating SSA information for statement D.42830_276 = switch_channel_direction (D.42599_275);



Registering new PHI nodes in block #88

Updating SSA information for statement D.42831_277 = strlen (buf_25(D));

Updating SSA information for statement D.42833_279 = strlen (buf_25(D));

Updating SSA information for statement D.42806_281 = ice_out_211->cands[0][0].transport;

Updating SSA information for statement D.42807_282 = ice_out_211->cands[0][0].con_addr;

Updating SSA information for statement D.42808_283 = ice_out_211->cands[0][0].con_port;

Updating SSA information for statement D.42753_285 = a_engine_24->rtcp_mux;

Updating SSA information for statement switch_snprintf (D.42832_278, D.42834_280, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.42806_281, c1_209, D.42807_282, D.42836_287);

Updating SSA information for statement D.42810_288 = a_engine_24->local_sdp_ip;

Updating SSA information for statement D.42837_289 = _zstr (D.42810_288);



Registering new PHI nodes in block #89

Updating SSA information for statement D.42840_290 = ice_out_211->cands[0][1].con_addr;

Updating SSA information for statement D.42841_291 = _zstr (D.42840_290);



Registering new PHI nodes in block #90

Updating SSA information for statement D.42810_292 = a_engine_24->local_sdp_ip;

Updating SSA information for statement D.42840_293 = ice_out_211->cands[0][1].con_addr;

Updating SSA information for statement D.39488_294 = __builtin_strcmp (D.42810_292, D.42840_293);



Registering new PHI nodes in block #91

Updating SSA information for statement D.42819_295 = a_engine_24->local_sdp_port;

Updating SSA information for statement D.42846_296 = ice_out_211->cands[0][1].con_port;



Registering new PHI nodes in block #92

Updating SSA information for statement D.42849_297 = strlen (buf_25(D));

Updating SSA information for statement D.42851_299 = strlen (buf_25(D));

Updating SSA information for statement D.42806_301 = ice_out_211->cands[0][0].transport;

Updating SSA information for statement D.42807_302 = ice_out_211->cands[0][0].con_addr;

Updating SSA information for statement D.42808_303 = ice_out_211->cands[0][0].con_port;

Updating SSA information for statement D.42753_305 = a_engine_24->rtcp_mux;

Updating SSA information for statement D.42810_308 = a_engine_24->local_sdp_ip;

Updating SSA information for statement D.42819_309 = a_engine_24->local_sdp_port;

Updating SSA information for statement D.42753_311 = a_engine_24->rtcp_mux;

Updating SSA information for statement switch_snprintf (D.42850_298, D.42852_300, "a=candidate:%s 2 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.42806_301, c2_210, D.42807_302, D.42836_307, D.42810_308, D.42853_313);



Registering new PHI nodes in block #93



Registering new PHI nodes in block #94

Updating SSA information for statement D.42599_314 = session_22(D)->channel;

Updating SSA information for statement D.42856_315 = switch_channel_test_flag (D.42599_314, 109);



Registering new PHI nodes in block #95



Registering new PHI nodes in block #101

Updating SSA information for statement D.42859_317 = smh_23->crypto_suite_order[i_15];



Registering new PHI nodes in block #96

Updating SSA information for statement D.42859_318 = smh_23->crypto_suite_order[i_15];

Updating SSA information for statement j_319 = SUITES[D.42859_318].type;

Updating SSA information for statement D.42601_320 = a_engine_24->crypto_type;



Registering new PHI nodes in block #97

Updating SSA information for statement D.42601_321 = a_engine_24->crypto_type;



Registering new PHI nodes in block #98

Updating SSA information for statement D.42863_322 = a_engine_24->ssec[j_319].local_crypto_key;

Updating SSA information for statement D.42864_323 = _zstr (D.42863_322);



Registering new PHI nodes in block #99

Updating SSA information for statement D.42867_324 = strlen (buf_25(D));

Updating SSA information for statement D.42869_326 = strlen (buf_25(D));

Updating SSA information for statement D.42863_328 = a_engine_24->ssec[j_319].local_crypto_key;

Updating SSA information for statement switch_snprintf (D.42868_325, D.42870_327, "a=crypto:%s\n", D.42863_328);



Registering new PHI nodes in block #100



Registering new PHI nodes in block #102



Registering new PHI nodes in block #103

Updating SSA information for statement D.42873_330 = switch_media_handle_test_media_flag (smh_23, 9);



Registering new PHI nodes in block #104

Updating SSA information for statement D.42876_331 = strlen (buf_25(D));

Updating SSA information for statement D.42878_333 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42877_332, D.42879_334, "a=silenceSupp:off - - - -\n");



Registering new PHI nodes in block #105



Registering new PHI nodes in block #106

Updating SSA information for statement D.42882_336 = strlen (buf_25(D));

Updating SSA information for statement D.42884_338 = strlen (buf_25(D));

Updating SSA information for statement D.42888_340 = *append_audio_335(D);



Registering new PHI nodes in block #107

Updating SSA information for statement D.42891_341 = strlen (append_audio_335(D));



Registering new PHI nodes in block #108



Registering new PHI nodes in block #109

Updating SSA information for statement D.42894_345 = *iftmp.42_18;



Registering new PHI nodes in block #110



Registering new PHI nodes in block #111



Registering new PHI nodes in block #112

Updating SSA information for statement switch_snprintf (D.42883_337, D.42885_339, "%s%s", append_audio_335(D), iftmp.41_17);



Registering new PHI nodes in block #113



Registering new PHI nodes in block #114



Registering new PHI nodes in block #115



Registering new PHI nodes in block #116

Updating SSA information for statement D.42905_352 = strlen (buf_25(D));

Updating SSA information for statement D.42907_354 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42906_353, D.42908_355, "a=ptime:%d\n", cur_ptime_1);



Registering new PHI nodes in block #117

Updating SSA information for statement local_sdp_audio_zrtp_hash_356 = switch_core_media_get_zrtp_hash (session_22(D), 0, 1);



Registering new PHI nodes in block #118

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5882, session_22(D), 7, "Adding audio a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_356);

Updating SSA information for statement D.42911_357 = strlen (buf_25(D));

Updating SSA information for statement D.42913_359 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42912_358, D.42914_360, "a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_356);



Registering new PHI nodes in block #119

Updating SSA information for statement D.42915_362 = _zstr (sr_361(D));



Registering new PHI nodes in block #120

Updating SSA information for statement D.42918_363 = strlen (buf_25(D));

Updating SSA information for statement D.42920_365 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42919_364, D.42921_366, "a=%s\n", sr_361(D));



Registering new PHI nodes in block #121



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 122
Number of blocks to update: 121 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 


Scope blocks after cleanups:

{ Scope block #0 
  int i;
  int rate;
  int already_did[128];
  int ptime;
  int noptime;
  const char * local_sdp_audio_zrtp_hash;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  static const char __PRETTY_FUNCTION__[11] = "generate_m";
  static const char __func__[11] = "generate_m";

  { Scope block #0 
    const struct switch_codec_implementation_t * imp;
    int this_ptime;

  }

  { Scope block #0 
    const struct switch_codec_implementation_t * imp;
    char * fmtp;
    int this_ptime;

    { Scope block #0 
      char key[128];
      char * check;

    }

    { Scope block #0 
      int channels;

    }

  }

  { Scope block #0 
    char tmp1[11];
    char tmp2[11];
    uint32_t c1;
    uint32_t c2;
    struct ice_t * ice_out;

    { Scope block #0 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

    { Scope block #0 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

  }

  { Scope block #0 
    int i;

    { Scope block #0 
      switch_rtp_crypto_key_type_t j;

    }

  }

}
generate_m (struct switch_core_session_t * session, char * buf, size_t buflen, switch_port_t port, const char * family, const char * ip, int cur_ptime, const char * append_audio, const char * sr, int use_cng, int cng_type, struct switch_event_t * map, int secure, switch_sdp_type_t sdp_type)
{
  switch_rtp_crypto_key_type_t j;
  int i;
  struct ice_t * ice_out;
  uint32_t c2;
  uint32_t c1;
  char tmp2[11];
  char tmp1[11];
  int channels;
  char * check;
  char key[128];
  int this_ptime;
  char * fmtp;
  const struct switch_codec_implementation_t * imp;
  int this_ptime;
  const struct switch_codec_implementation_t * imp;
  static const char __func__[11] = "generate_m";
  static const char __PRETTY_FUNCTION__[11] = "generate_m";
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  const char * local_sdp_audio_zrtp_hash;
  int noptime;
  int ptime;
  int already_did[128];
  int rate;
  int i;
  size_t D.42921;
  size_t D.42920;
  char * D.42919;
  size_t D.42918;
  int D.42915;
  size_t D.42914;
  size_t D.42913;
  char * D.42912;
  size_t D.42911;
  size_t D.42908;
  size_t D.42907;
  char * D.42906;
  size_t D.42905;
  _Bool D.42902;
  _Bool D.42901;
  _Bool D.42900;
  const char D.42894;
  unsigned int D.42892;
  size_t D.42891;
  const char D.42888;
  const char * iftmp.42;
  char * iftmp.41;
  size_t D.42885;
  size_t D.42884;
  char * D.42883;
  size_t D.42882;
  size_t D.42879;
  size_t D.42878;
  char * D.42877;
  size_t D.42876;
  int32_t D.42873;
  size_t D.42870;
  size_t D.42869;
  char * D.42868;
  size_t D.42867;
  int D.42864;
  char * D.42863;
  switch_rtp_crypto_key_type_t D.42859;
  uint32_t D.42856;
  int D.42853;
  size_t D.42852;
  size_t D.42851;
  char * D.42850;
  size_t D.42849;
  switch_port_t D.42846;
  int D.39488;
  int D.42841;
  char * D.42840;
  int D.42837;
  int D.42836;
  int D.42835;
  size_t D.42834;
  size_t D.42833;
  char * D.42832;
  size_t D.42831;
  switch_call_direction_t D.42830;
  int D.42826;
  size_t D.42825;
  size_t D.42824;
  char * D.42823;
  size_t D.42822;
  switch_port_t D.42819;
  int D.39479;
  int D.42814;
  int D.42811;
  char * D.42810;
  int D.42809;
  switch_port_t D.42808;
  char * D.42807;
  char * D.42806;
  size_t D.42805;
  size_t D.42804;
  char * D.42803;
  size_t D.42802;
  char * D.42801;
  size_t D.42800;
  size_t D.42799;
  char * D.42798;
  size_t D.42797;
  char * D.42796;
  size_t D.42795;
  size_t D.42794;
  char * D.42793;
  size_t D.42792;
  size_t D.42791;
  size_t D.42790;
  char * D.42789;
  size_t D.42788;
  size_t D.42787;
  size_t D.42786;
  char * D.42785;
  size_t D.42784;
  char * D.42783;
  size_t D.42782;
  size_t D.42781;
  char * D.42780;
  size_t D.42779;
  char * D.42778;
  uint32_t D.42777;
  size_t D.42776;
  size_t D.42775;
  char * D.42774;
  size_t D.42773;
  uint8_t D.42770;
  int D.42769;
  size_t D.42768;
  size_t D.42767;
  char * D.42766;
  size_t D.42765;
  size_t D.42763;
  size_t D.42762;
  char * D.42761;
  size_t D.42760;
  size_t D.42759;
  size_t D.42758;
  char * D.42757;
  size_t D.42756;
  int8_t D.42753;
  char * D.42750;
  char[192] * D.42749;
  size_t D.42748;
  size_t D.42747;
  char * D.42746;
  size_t D.42745;
  int D.42740;
  char * D.42739;
  size_t D.42738;
  size_t D.42737;
  char * D.42736;
  size_t D.42735;
  size_t D.42733;
  size_t D.42732;
  char * D.42731;
  size_t D.42730;
  uint32_t D.42727;
  uint32_t D.42724;
  int32_t D.42722;
  size_t D.42718;
  size_t D.42717;
  char * D.42716;
  size_t D.42715;
  size_t D.42712;
  size_t D.42711;
  char * D.42710;
  size_t D.42709;
  size_t D.42707;
  size_t D.42706;
  char * D.42705;
  size_t D.42704;
  int D.42701;
  const uint8_t D.42700;
  uint32_t D.42699;
  char * D.42693;
  const int D.42689;
  const uint32_t D.42686;
  int D.42672;
  int D.42670;
  char * const D.42669;
  const switch_codec_type_t D.42664;
  const int D.42663;
  size_t D.42662;
  size_t D.42661;
  char * D.42660;
  size_t D.42659;
  size_t D.42658;
  size_t D.42657;
  char * D.42656;
  size_t D.42655;
  _Bool D.42652;
  _Bool D.42651;
  _Bool D.42650;
  int32_t D.42647;
  int D.42646;
  size_t D.42645;
  size_t D.42644;
  char * D.42643;
  size_t D.42642;
  switch_payload_t D.42639;
  switch_core_media_dtmf_t D.42636;
  int D.42635;
  struct switch_core_media_params_t * D.42634;
  size_t D.42633;
  size_t D.42632;
  char * D.42631;
  size_t D.42630;
  int D.42627;
  int D.42626;
  signed char D.42623;
  switch_payload_t D.42622;
  const switch_codec_type_t D.42610;
  int D.42609;
  int D.42607;
  char * const D.42606;
  const int D.42603;
  const char * D.42602;
  switch_rtp_crypto_key_type_t D.42601;
  switch_call_direction_t D.42600;
  struct switch_channel_t * D.42599;
  int iftmp.40;
  int D.42592;
  size_t D.42591;
  size_t D.42590;
  char * D.42589;
  size_t D.42588;

<bb 2>:
  i_19 = 0;
  # DEBUG i => i_19
  already_did = {};
  ptime_20 = 0;
  # DEBUG ptime => ptime_20
  noptime_21 = 0;
  # DEBUG noptime => noptime_21
  if (session_22(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 5614, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_23 = session_22(D)->media_handle;
  # DEBUG smh => smh_23
  if (smh_23 == 0B)
    goto <bb 121>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_24 = &smh_23->engines;
  # DEBUG a_engine => a_engine_24
  D.42588_26 = strlen (buf_25(D));
  D.42589_27 = buf_25(D) + D.42588_26;
  D.42590_28 = strlen (buf_25(D));
  D.42591_30 = buflen_29(D) - D.42590_28;
  D.42592_32 = (int) port_31(D);
  if (secure_33(D) != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.42599_34 = session_22(D)->channel;
  D.42600_35 = switch_channel_direction (D.42599_34);
  if (D.42600_35 == 1)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:
  D.42601_36 = a_engine_24->crypto_type;
  if (D.42601_36 != 9)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  iftmp.40_38 = 1;
  goto <bb 10>;

<bb 9>:
  iftmp.40_37 = 0;

<bb 10>:
  # iftmp.40_16 = PHI <iftmp.40_38(8), iftmp.40_37(9)>
  D.42602_39 = get_media_profile_name (session_22(D), iftmp.40_16);
  switch_snprintf (D.42589_27, D.42591_30, "m=audio %d %s", D.42592_32, D.42602_39);
  i_40 = 0;
  # DEBUG i => i_40
  goto <bb 28>;

<bb 11>:
  imp_43 = smh_23->codecs[i_2];
  # DEBUG imp => imp_43
  D.42603_44 = imp_43->microseconds_per_packet;
  this_ptime_45 = D.42603_44 / 1000;
  # DEBUG this_ptime => this_ptime_45
  D.42606_46 = imp_43->iananame;
  D.42607_47 = strcasecmp (D.42606_46, "ilbc");
  if (D.42607_47 == 0)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:
  D.42606_48 = imp_43->iananame;
  D.42609_49 = strcasecmp (D.42606_48, "isac");
  if (D.42609_49 == 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  this_ptime_50 = 20;
  # DEBUG this_ptime => this_ptime_50

<bb 14>:
  # this_ptime_10 = PHI <this_ptime_45(12), this_ptime_50(13)>
  # DEBUG this_ptime => this_ptime_10
  D.42610_51 = imp_43->codec_type;
  if (D.42610_51 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  // predicted unlikely by continue predictor.
  goto <bb 27>;

<bb 16>:
  if (noptime_21 == 0)
    goto <bb 17>;
  else
    goto <bb 22>;

<bb 17>:
  if (cur_ptime_52(D) == 0)
    goto <bb 18>;
  else
    goto <bb 20>;

<bb 18>:
  if (ptime_6 == 0)
    goto <bb 19>;
  else
    goto <bb 22>;

<bb 19>:
  ptime_53 = this_ptime_10;
  # DEBUG ptime => ptime_53
  goto <bb 22>;

<bb 20>:
  if (this_ptime_10 != cur_ptime_52(D))
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  // predicted unlikely by continue predictor.
  goto <bb 27>;

<bb 22>:
  # ptime_4 = PHI <ptime_6(16), ptime_53(19), ptime_6(20), ptime_6(18)>
  # DEBUG ptime => ptime_4
  D.42622_54 = smh_23->ianacodes[i_2];
  D.42623_55 = (signed char) D.42622_54;
  if (D.42623_55 >= 0)
    goto <bb 23>;
  else
    goto <bb 26>;

<bb 23>:
  D.42622_56 = smh_23->ianacodes[i_2];
  D.42626_57 = (int) D.42622_56;
  D.42627_58 = already_did[D.42626_57];
  if (D.42627_58 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  // predicted unlikely by continue predictor.
  goto <bb 27>;

<bb 25>:
  D.42622_59 = smh_23->ianacodes[i_2];
  D.42626_60 = (int) D.42622_59;
  already_did[D.42626_60] = 1;

<bb 26>:
  D.42630_61 = strlen (buf_25(D));
  D.42631_62 = buf_25(D) + D.42630_61;
  D.42632_63 = strlen (buf_25(D));
  D.42633_64 = buflen_29(D) - D.42632_63;
  D.42622_65 = smh_23->ianacodes[i_2];
  D.42626_66 = (int) D.42622_65;
  switch_snprintf (D.42631_62, D.42633_64, " %d", D.42626_66);

<bb 27>:
  # ptime_5 = PHI <ptime_6(15), ptime_6(21), ptime_4(24), ptime_4(26)>
  # DEBUG ptime => ptime_5
  i_67 = i_2 + 1;
  # DEBUG i => i_67

<bb 28>:
  # i_2 = PHI <i_40(10), i_67(27)>
  # ptime_6 = PHI <ptime_20(10), ptime_5(27)>
  # DEBUG ptime => ptime_6
  # DEBUG i => i_2
  D.42634_41 = smh_23->mparams;
  D.42635_42 = D.42634_41->num_codecs;
  if (D.42635_42 > i_2)
    goto <bb 11>;
  else
    goto <bb 29>;

<bb 29>:
  D.42634_68 = smh_23->mparams;
  D.42636_69 = D.42634_68->dtmf_type;
  if (D.42636_69 == 0)
    goto <bb 30>;
  else
    goto <bb 32>;

<bb 30>:
  D.42634_70 = smh_23->mparams;
  D.42639_71 = D.42634_70->te;
  if (D.42639_71 > 95)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  D.42642_72 = strlen (buf_25(D));
  D.42643_73 = buf_25(D) + D.42642_72;
  D.42644_74 = strlen (buf_25(D));
  D.42645_75 = buflen_29(D) - D.42644_74;
  D.42634_76 = smh_23->mparams;
  D.42639_77 = D.42634_76->te;
  D.42646_78 = (int) D.42639_77;
  switch_snprintf (D.42643_73, D.42645_75, " %d", D.42646_78);

<bb 32>:
  D.42647_79 = switch_media_handle_test_media_flag (smh_23, 9);
  if (D.42647_79 == 0)
    goto <bb 33>;
  else
    goto <bb 35>;

<bb 33>:
  D.42650_81 = cng_type_80(D) != 0;
  D.42651_83 = use_cng_82(D) != 0;
  D.42652_84 = D.42650_81 && D.42651_83;
  if (D.42652_84 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  D.42655_85 = strlen (buf_25(D));
  D.42656_86 = buf_25(D) + D.42655_85;
  D.42657_87 = strlen (buf_25(D));
  D.42658_88 = buflen_29(D) - D.42657_87;
  switch_snprintf (D.42656_86, D.42658_88, " %d", cng_type_80(D));

<bb 35>:
  D.42659_89 = strlen (buf_25(D));
  D.42660_90 = buf_25(D) + D.42659_89;
  D.42661_91 = strlen (buf_25(D));
  D.42662_92 = buflen_29(D) - D.42661_91;
  switch_snprintf (D.42660_90, D.42662_92, "\n");
  memset (&already_did, 0, 512);
  i_93 = 0;
  # DEBUG i => i_93
  goto <bb 65>;

<bb 36>:
  imp_96 = smh_23->codecs[i_3];
  # DEBUG imp => imp_96
  fmtp_97 = imp_96->fmtp;
  # DEBUG fmtp => fmtp_97
  D.42663_98 = imp_96->microseconds_per_packet;
  this_ptime_99 = D.42663_98 / 1000;
  # DEBUG this_ptime => this_ptime_99
  D.42664_100 = imp_96->codec_type;
  if (D.42664_100 != 0)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  // predicted unlikely by continue predictor.
  goto <bb 64>;

<bb 38>:
  D.42669_101 = imp_96->iananame;
  D.42670_102 = strcasecmp (D.42669_101, "ilbc");
  if (D.42670_102 == 0)
    goto <bb 40>;
  else
    goto <bb 39>;

<bb 39>:
  D.42669_103 = imp_96->iananame;
  D.42672_104 = strcasecmp (D.42669_103, "isac");
  if (D.42672_104 == 0)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:
  this_ptime_105 = 20;
  # DEBUG this_ptime => this_ptime_105

<bb 41>:
  # this_ptime_13 = PHI <this_ptime_99(39), this_ptime_105(40)>
  # DEBUG this_ptime => this_ptime_13
  if (noptime_21 == 0)
    goto <bb 42>;
  else
    goto <bb 47>;

<bb 42>:
  if (cur_ptime_52(D) == 0)
    goto <bb 43>;
  else
    goto <bb 45>;

<bb 43>:
  if (ptime_9 == 0)
    goto <bb 44>;
  else
    goto <bb 47>;

<bb 44>:
  ptime_106 = this_ptime_13;
  # DEBUG ptime => ptime_106
  goto <bb 47>;

<bb 45>:
  if (this_ptime_13 != cur_ptime_52(D))
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  // predicted unlikely by continue predictor.
  goto <bb 64>;

<bb 47>:
  # ptime_7 = PHI <ptime_9(41), ptime_106(44), ptime_9(45), ptime_9(43)>
  # DEBUG ptime => ptime_7
  D.42622_107 = smh_23->ianacodes[i_3];
  D.42623_108 = (signed char) D.42622_107;
  if (D.42623_108 >= 0)
    goto <bb 48>;
  else
    goto <bb 51>;

<bb 48>:
  D.42622_109 = smh_23->ianacodes[i_3];
  D.42626_110 = (int) D.42622_109;
  D.42627_111 = already_did[D.42626_110];
  if (D.42627_111 != 0)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  // predicted unlikely by continue predictor.
  goto <bb 64>;

<bb 50>:
  D.42622_112 = smh_23->ianacodes[i_3];
  D.42626_113 = (int) D.42622_112;
  already_did[D.42626_113] = 1;

<bb 51>:
  D.42686_114 = imp_96->samples_per_second;
  rate_115 = (int) D.42686_114;
  # DEBUG rate => rate_115
  if (map_116(D) != 0B)
    goto <bb 52>;
  else
    goto <bb 55>;

<bb 52>:
  key = "";
  check_117 = 0B;
  # DEBUG check => check_117
  D.42669_118 = imp_96->iananame;
  D.42689_119 = imp_96->bits_per_second;
  switch_snprintf (&key, 128, "%s:%u", D.42669_118, D.42689_119);
  check_120 = switch_event_get_header_idx (map_116(D), &key, -1);
  # DEBUG check => check_120
  if (check_120 != 0B)
    goto <bb 54>;
  else
    goto <bb 53>;

<bb 53>:
  D.42669_121 = imp_96->iananame;
  check_122 = switch_event_get_header_idx (map_116(D), D.42669_121, -1);
  # DEBUG check => check_122
  if (check_122 != 0B)
    goto <bb 54>;
  else
    goto <bb 55>;

<bb 54>:
  # check_14 = PHI <check_120(52), check_122(53)>
  # DEBUG check => check_14
  fmtp_123 = check_14;
  # DEBUG fmtp => fmtp_123

<bb 55>:
  # fmtp_11 = PHI <fmtp_97(51), fmtp_97(53), fmtp_123(54)>
  # DEBUG fmtp => fmtp_11
  D.42693_124 = smh_23->fmtps[i_3];
  if (D.42693_124 != 0B)
    goto <bb 56>;
  else
    goto <bb 57>;

<bb 56>:
  fmtp_125 = smh_23->fmtps[i_3];
  # DEBUG fmtp => fmtp_125

<bb 57>:
  # fmtp_12 = PHI <fmtp_11(55), fmtp_125(56)>
  # DEBUG fmtp => fmtp_12
  D.42622_126 = smh_23->ianacodes[i_3];
  if (D.42622_126 > 95)
    goto <bb 59>;
  else
    goto <bb 58>;

<bb 58>:
  D.42599_127 = session_22(D)->channel;
  D.42699_128 = switch_channel_test_flag (D.42599_127, 110);
  if (D.42699_128 != 0)
    goto <bb 59>;
  else
    goto <bb 62>;

<bb 59>:
  D.42669_129 = imp_96->iananame;
  D.42700_130 = imp_96->number_of_channels;
  D.42701_131 = (int) D.42700_130;
  channels_132 = get_channels (D.42669_129, D.42701_131);
  # DEBUG channels => channels_132
  if (channels_132 > 1)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  D.42704_133 = strlen (buf_25(D));
  D.42705_134 = buf_25(D) + D.42704_133;
  D.42706_135 = strlen (buf_25(D));
  D.42707_136 = buflen_29(D) - D.42706_135;
  D.42622_137 = smh_23->ianacodes[i_3];
  D.42626_138 = (int) D.42622_137;
  D.42669_139 = imp_96->iananame;
  switch_snprintf (D.42705_134, D.42707_136, "a=rtpmap:%d %s/%d/%d\n", D.42626_138, D.42669_139, rate_115, channels_132);
  goto <bb 62>;

<bb 61>:
  D.42709_140 = strlen (buf_25(D));
  D.42710_141 = buf_25(D) + D.42709_140;
  D.42711_142 = strlen (buf_25(D));
  D.42712_143 = buflen_29(D) - D.42711_142;
  D.42622_144 = smh_23->ianacodes[i_3];
  D.42626_145 = (int) D.42622_144;
  D.42669_146 = imp_96->iananame;
  switch_snprintf (D.42710_141, D.42712_143, "a=rtpmap:%d %s/%d\n", D.42626_145, D.42669_146, rate_115);

<bb 62>:
  if (fmtp_12 != 0B)
    goto <bb 63>;
  else
    goto <bb 64>;

<bb 63>:
  D.42715_147 = strlen (buf_25(D));
  D.42716_148 = buf_25(D) + D.42715_147;
  D.42717_149 = strlen (buf_25(D));
  D.42718_150 = buflen_29(D) - D.42717_149;
  D.42622_151 = smh_23->ianacodes[i_3];
  D.42626_152 = (int) D.42622_151;
  switch_snprintf (D.42716_148, D.42718_150, "a=fmtp:%d %s\n", D.42626_152, fmtp_12);

<bb 64>:
  # ptime_8 = PHI <ptime_9(37), ptime_9(46), ptime_7(49), ptime_7(62), ptime_7(63)>
  # DEBUG ptime => ptime_8
  i_153 = i_3 + 1;
  # DEBUG i => i_153

<bb 65>:
  # i_3 = PHI <i_93(35), i_153(64)>
  # ptime_9 = PHI <ptime_6(35), ptime_8(64)>
  # DEBUG ptime => ptime_9
  # DEBUG i => i_3
  D.42634_94 = smh_23->mparams;
  D.42635_95 = D.42634_94->num_codecs;
  if (D.42635_95 > i_3)
    goto <bb 36>;
  else
    goto <bb 66>;

<bb 66>:
  D.42634_154 = smh_23->mparams;
  D.42636_155 = D.42634_154->dtmf_type;
  if (D.42636_155 == 0)
    goto <bb 69>;
  else
    goto <bb 67>;

<bb 67>:
  D.42722_156 = switch_media_handle_test_media_flag (smh_23, 8);
  if (D.42722_156 != 0)
    goto <bb 69>;
  else
    goto <bb 68>;

<bb 68>:
  D.42599_157 = session_22(D)->channel;
  D.42724_158 = switch_channel_test_flag (D.42599_157, 93);
  if (D.42724_158 != 0)
    goto <bb 69>;
  else
    goto <bb 73>;

<bb 69>:
  D.42634_159 = smh_23->mparams;
  D.42639_160 = D.42634_159->te;
  if (D.42639_160 > 95)
    goto <bb 70>;
  else
    goto <bb 73>;

<bb 70>:
  D.42599_161 = session_22(D)->channel;
  D.42727_162 = switch_channel_test_flag (D.42599_161, 106);
  if (D.42727_162 != 0)
    goto <bb 71>;
  else
    goto <bb 72>;

<bb 71>:
  D.42730_163 = strlen (buf_25(D));
  D.42731_164 = buf_25(D) + D.42730_163;
  D.42732_165 = strlen (buf_25(D));
  D.42733_166 = buflen_29(D) - D.42732_165;
  D.42634_167 = smh_23->mparams;
  D.42639_168 = D.42634_167->te;
  D.42646_169 = (int) D.42639_168;
  switch_snprintf (D.42731_164, D.42733_166, "a=rtpmap:%d telephone-event/8000\n", D.42646_169);
  goto <bb 73>;

<bb 72>:
  D.42735_170 = strlen (buf_25(D));
  D.42736_171 = buf_25(D) + D.42735_170;
  D.42737_172 = strlen (buf_25(D));
  D.42738_173 = buflen_29(D) - D.42737_172;
  D.42634_174 = smh_23->mparams;
  D.42639_175 = D.42634_174->te;
  D.42646_176 = (int) D.42639_175;
  D.42634_177 = smh_23->mparams;
  D.42639_178 = D.42634_177->te;
  D.42646_179 = (int) D.42639_178;
  switch_snprintf (D.42736_171, D.42738_173, "a=rtpmap:%d telephone-event/8000\na=fmtp:%d 0-16\n", D.42646_179, D.42646_179);

<bb 73>:
  D.42739_180 = a_engine_24->local_dtls_fingerprint.type;
  D.42740_181 = _zstr (D.42739_180);
  if (D.42740_181 == 0)
    goto <bb 74>;
  else
    goto <bb 76>;

<bb 74>:
  if (secure_33(D) != 0)
    goto <bb 75>;
  else
    goto <bb 76>;

<bb 75>:
  D.42745_182 = strlen (buf_25(D));
  D.42746_183 = buf_25(D) + D.42745_182;
  D.42747_184 = strlen (buf_25(D));
  D.42748_185 = buflen_29(D) - D.42747_184;
  D.42739_186 = a_engine_24->local_dtls_fingerprint.type;
  D.42749_187 = &a_engine_24->local_dtls_fingerprint.str;
  switch_snprintf (D.42746_183, D.42748_185, "a=fingerprint:%s %s\n", D.42739_186, D.42749_187);

<bb 76>:
  D.42634_188 = smh_23->mparams;
  D.42750_189 = D.42634_188->rtcp_audio_interval_msec;
  if (D.42750_189 != 0B)
    goto <bb 77>;
  else
    goto <bb 80>;

<bb 77>:
  D.42753_190 = a_engine_24->rtcp_mux;
  if (D.42753_190 > 0)
    goto <bb 78>;
  else
    goto <bb 79>;

<bb 78>:
  D.42756_191 = strlen (buf_25(D));
  D.42757_192 = buf_25(D) + D.42756_191;
  D.42758_193 = strlen (buf_25(D));
  D.42759_194 = buflen_29(D) - D.42758_193;
  switch_snprintf (D.42757_192, D.42759_194, "a=rtcp-mux\n");
  D.42760_195 = strlen (buf_25(D));
  D.42761_196 = buf_25(D) + D.42760_195;
  D.42762_197 = strlen (buf_25(D));
  D.42763_198 = buflen_29(D) - D.42762_197;
  D.42592_199 = (int) port_31(D);
  switch_snprintf (D.42761_196, D.42763_198, "a=rtcp:%d IN %s %s\n", D.42592_199, family_200(D), ip_201(D));
  goto <bb 80>;

<bb 79>:
  D.42765_202 = strlen (buf_25(D));
  D.42766_203 = buf_25(D) + D.42765_202;
  D.42767_204 = strlen (buf_25(D));
  D.42768_205 = buflen_29(D) - D.42767_204;
  D.42592_206 = (int) port_31(D);
  D.42769_207 = D.42592_206 + 1;
  switch_snprintf (D.42766_203, D.42768_205, "a=rtcp:%d IN %s %s\n", D.42769_207, family_200(D), ip_201(D));

<bb 80>:
  D.42770_208 = a_engine_24->ice_out.cands[0][0].ready;
  if (D.42770_208 != 0)
    goto <bb 81>;
  else
    goto <bb 93>;

<bb 81>:
  tmp1 = "";
  tmp2 = "";
  c1_209 = 659136;
  # DEBUG c1 => c1_209
  c2_210 = 659134;
  # DEBUG c2 => c2_210
  tmp1[10] = 0;
  tmp2[10] = 0;
  switch_stun_random_string (&tmp1, 10, "0123456789");
  switch_stun_random_string (&tmp2, 10, "0123456789");
  gen_ice (session_22(D), 0, 0B, 0);
  ice_out_211 = &a_engine_24->ice_out;
  # DEBUG ice_out => ice_out_211
  D.42773_212 = strlen (buf_25(D));
  D.42774_213 = buf_25(D) + D.42773_212;
  D.42775_214 = strlen (buf_25(D));
  D.42776_215 = buflen_29(D) - D.42775_214;
  D.42777_216 = a_engine_24->ssrc;
  D.42778_217 = smh_23->cname;
  switch_snprintf (D.42774_213, D.42776_215, "a=ssrc:%u cname:%s\n", D.42777_216, D.42778_217);
  D.42779_218 = strlen (buf_25(D));
  D.42780_219 = buf_25(D) + D.42779_218;
  D.42781_220 = strlen (buf_25(D));
  D.42782_221 = buflen_29(D) - D.42781_220;
  D.42777_222 = a_engine_24->ssrc;
  D.42783_223 = smh_23->msid;
  switch_snprintf (D.42780_219, D.42782_221, "a=ssrc:%u msid:%s a0\n", D.42777_222, D.42783_223);
  D.42784_224 = strlen (buf_25(D));
  D.42785_225 = buf_25(D) + D.42784_224;
  D.42786_226 = strlen (buf_25(D));
  D.42787_227 = buflen_29(D) - D.42786_226;
  D.42777_228 = a_engine_24->ssrc;
  D.42783_229 = smh_23->msid;
  switch_snprintf (D.42785_225, D.42787_227, "a=ssrc:%u mslabel:%s\n", D.42777_228, D.42783_229);
  D.42788_230 = strlen (buf_25(D));
  D.42789_231 = buf_25(D) + D.42788_230;
  D.42790_232 = strlen (buf_25(D));
  D.42791_233 = buflen_29(D) - D.42790_232;
  D.42777_234 = a_engine_24->ssrc;
  D.42783_235 = smh_23->msid;
  switch_snprintf (D.42789_231, D.42791_233, "a=ssrc:%u label:%sa0\n", D.42777_234, D.42783_235);
  D.42792_236 = strlen (buf_25(D));
  D.42793_237 = buf_25(D) + D.42792_236;
  D.42794_238 = strlen (buf_25(D));
  D.42795_239 = buflen_29(D) - D.42794_238;
  D.42796_240 = ice_out_211->ufrag;
  switch_snprintf (D.42793_237, D.42795_239, "a=ice-ufrag:%s\n", D.42796_240);
  D.42797_241 = strlen (buf_25(D));
  D.42798_242 = buf_25(D) + D.42797_241;
  D.42799_243 = strlen (buf_25(D));
  D.42800_244 = buflen_29(D) - D.42799_243;
  D.42801_245 = ice_out_211->pwd;
  switch_snprintf (D.42798_242, D.42800_244, "a=ice-pwd:%s\n", D.42801_245);
  D.42802_246 = strlen (buf_25(D));
  D.42803_247 = buf_25(D) + D.42802_246;
  D.42804_248 = strlen (buf_25(D));
  D.42805_249 = buflen_29(D) - D.42804_248;
  D.42806_250 = ice_out_211->cands[0][0].transport;
  D.42807_251 = ice_out_211->cands[0][0].con_addr;
  D.42808_252 = ice_out_211->cands[0][0].con_port;
  D.42809_253 = (int) D.42808_252;
  switch_snprintf (D.42803_247, D.42805_249, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.42806_250, c1_209, D.42807_251, D.42809_253);
  D.42810_254 = a_engine_24->local_sdp_ip;
  D.42811_255 = _zstr (D.42810_254);
  if (D.42811_255 == 0)
    goto <bb 82>;
  else
    goto <bb 86>;

<bb 82>:
  D.42807_256 = ice_out_211->cands[0][0].con_addr;
  D.42814_257 = _zstr (D.42807_256);
  if (D.42814_257 == 0)
    goto <bb 83>;
  else
    goto <bb 86>;

<bb 83>:
  D.42810_258 = a_engine_24->local_sdp_ip;
  D.42807_259 = ice_out_211->cands[0][0].con_addr;
  D.39479_260 = __builtin_strcmp (D.42810_258, D.42807_259);
  if (D.39479_260 != 0)
    goto <bb 84>;
  else
    goto <bb 86>;

<bb 84>:
  D.42819_261 = a_engine_24->local_sdp_port;
  D.42808_262 = ice_out_211->cands[0][0].con_port;
  if (D.42819_261 != D.42808_262)
    goto <bb 85>;
  else
    goto <bb 86>;

<bb 85>:
  D.42822_263 = strlen (buf_25(D));
  D.42823_264 = buf_25(D) + D.42822_263;
  D.42824_265 = strlen (buf_25(D));
  D.42825_266 = buflen_29(D) - D.42824_265;
  D.42806_267 = ice_out_211->cands[0][0].transport;
  D.42807_268 = ice_out_211->cands[0][0].con_addr;
  D.42808_269 = ice_out_211->cands[0][0].con_port;
  D.42809_270 = (int) D.42808_269;
  D.42810_271 = a_engine_24->local_sdp_ip;
  D.42819_272 = a_engine_24->local_sdp_port;
  D.42826_273 = (int) D.42819_272;
  switch_snprintf (D.42823_264, D.42825_266, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.42806_267, c2_210, D.42807_268, D.42809_270, D.42810_271, D.42826_273);

<bb 86>:
  D.42753_274 = a_engine_24->rtcp_mux;
  if (D.42753_274 <= 0)
    goto <bb 88>;
  else
    goto <bb 87>;

<bb 87>:
  D.42599_275 = session_22(D)->channel;
  D.42830_276 = switch_channel_direction (D.42599_275);
  if (D.42830_276 == 1)
    goto <bb 88>;
  else
    goto <bb 93>;

<bb 88>:
  D.42831_277 = strlen (buf_25(D));
  D.42832_278 = buf_25(D) + D.42831_277;
  D.42833_279 = strlen (buf_25(D));
  D.42834_280 = buflen_29(D) - D.42833_279;
  D.42806_281 = ice_out_211->cands[0][0].transport;
  D.42807_282 = ice_out_211->cands[0][0].con_addr;
  D.42808_283 = ice_out_211->cands[0][0].con_port;
  D.42809_284 = (int) D.42808_283;
  D.42753_285 = a_engine_24->rtcp_mux;
  D.42835_286 = D.42753_285 <= 0;
  D.42836_287 = D.42809_284 + D.42835_286;
  switch_snprintf (D.42832_278, D.42834_280, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.42806_281, c1_209, D.42807_282, D.42836_287);
  D.42810_288 = a_engine_24->local_sdp_ip;
  D.42837_289 = _zstr (D.42810_288);
  if (D.42837_289 == 0)
    goto <bb 89>;
  else
    goto <bb 93>;

<bb 89>:
  D.42840_290 = ice_out_211->cands[0][1].con_addr;
  D.42841_291 = _zstr (D.42840_290);
  if (D.42841_291 == 0)
    goto <bb 90>;
  else
    goto <bb 93>;

<bb 90>:
  D.42810_292 = a_engine_24->local_sdp_ip;
  D.42840_293 = ice_out_211->cands[0][1].con_addr;
  D.39488_294 = __builtin_strcmp (D.42810_292, D.42840_293);
  if (D.39488_294 != 0)
    goto <bb 91>;
  else
    goto <bb 93>;

<bb 91>:
  D.42819_295 = a_engine_24->local_sdp_port;
  D.42846_296 = ice_out_211->cands[0][1].con_port;
  if (D.42819_295 != D.42846_296)
    goto <bb 92>;
  else
    goto <bb 93>;

<bb 92>:
  D.42849_297 = strlen (buf_25(D));
  D.42850_298 = buf_25(D) + D.42849_297;
  D.42851_299 = strlen (buf_25(D));
  D.42852_300 = buflen_29(D) - D.42851_299;
  D.42806_301 = ice_out_211->cands[0][0].transport;
  D.42807_302 = ice_out_211->cands[0][0].con_addr;
  D.42808_303 = ice_out_211->cands[0][0].con_port;
  D.42809_304 = (int) D.42808_303;
  D.42753_305 = a_engine_24->rtcp_mux;
  D.42835_306 = D.42753_305 <= 0;
  D.42836_307 = D.42809_304 + D.42835_306;
  D.42810_308 = a_engine_24->local_sdp_ip;
  D.42819_309 = a_engine_24->local_sdp_port;
  D.42826_310 = (int) D.42819_309;
  D.42753_311 = a_engine_24->rtcp_mux;
  D.42835_312 = D.42753_311 <= 0;
  D.42853_313 = D.42826_310 + D.42835_312;
  switch_snprintf (D.42850_298, D.42852_300, "a=candidate:%s 2 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.42806_301, c2_210, D.42807_302, D.42836_307, D.42810_308, D.42853_313);

<bb 93>:
  if (secure_33(D) != 0)
    goto <bb 94>;
  else
    goto <bb 102>;

<bb 94>:
  D.42599_314 = session_22(D)->channel;
  D.42856_315 = switch_channel_test_flag (D.42599_314, 109);
  if (D.42856_315 == 0)
    goto <bb 95>;
  else
    goto <bb 102>;

<bb 95>:
  i_316 = 0;
  # DEBUG i => i_316
  goto <bb 101>;

<bb 96>:
  D.42859_318 = smh_23->crypto_suite_order[i_15];
  j_319 = SUITES[D.42859_318].type;
  # DEBUG j => j_319
  D.42601_320 = a_engine_24->crypto_type;
  if (D.42601_320 == j_319)
    goto <bb 98>;
  else
    goto <bb 97>;

<bb 97>:
  D.42601_321 = a_engine_24->crypto_type;
  if (D.42601_321 == 9)
    goto <bb 98>;
  else
    goto <bb 100>;

<bb 98>:
  D.42863_322 = a_engine_24->ssec[j_319].local_crypto_key;
  D.42864_323 = _zstr (D.42863_322);
  if (D.42864_323 == 0)
    goto <bb 99>;
  else
    goto <bb 100>;

<bb 99>:
  D.42867_324 = strlen (buf_25(D));
  D.42868_325 = buf_25(D) + D.42867_324;
  D.42869_326 = strlen (buf_25(D));
  D.42870_327 = buflen_29(D) - D.42869_326;
  D.42863_328 = a_engine_24->ssec[j_319].local_crypto_key;
  switch_snprintf (D.42868_325, D.42870_327, "a=crypto:%s\n", D.42863_328);

<bb 100>:
  i_329 = i_15 + 1;
  # DEBUG i => i_329

<bb 101>:
  # i_15 = PHI <i_316(95), i_329(100)>
  # DEBUG i => i_15
  D.42859_317 = smh_23->crypto_suite_order[i_15];
  if (D.42859_317 != 9)
    goto <bb 96>;
  else
    goto <bb 102>;

<bb 102>:
  if (cng_type_80(D) == 0)
    goto <bb 103>;
  else
    goto <bb 105>;

<bb 103>:
  D.42873_330 = switch_media_handle_test_media_flag (smh_23, 9);
  if (D.42873_330 != 0)
    goto <bb 104>;
  else
    goto <bb 105>;

<bb 104>:
  D.42876_331 = strlen (buf_25(D));
  D.42877_332 = buf_25(D) + D.42876_331;
  D.42878_333 = strlen (buf_25(D));
  D.42879_334 = buflen_29(D) - D.42878_333;
  switch_snprintf (D.42877_332, D.42879_334, "a=silenceSupp:off - - - -\n");

<bb 105>:
  if (append_audio_335(D) != 0B)
    goto <bb 106>;
  else
    goto <bb 113>;

<bb 106>:
  D.42882_336 = strlen (buf_25(D));
  D.42883_337 = buf_25(D) + D.42882_336;
  D.42884_338 = strlen (buf_25(D));
  D.42885_339 = buflen_29(D) - D.42884_338;
  D.42888_340 = *append_audio_335(D);
  if (D.42888_340 != 0)
    goto <bb 107>;
  else
    goto <bb 108>;

<bb 107>:
  D.42891_341 = strlen (append_audio_335(D));
  D.42892_342 = D.42891_341 + -1;
  iftmp.42_343 = append_audio_335(D) + D.42892_342;
  goto <bb 109>;

<bb 108>:
  iftmp.42_344 = append_audio_335(D);

<bb 109>:
  # iftmp.42_18 = PHI <iftmp.42_343(107), iftmp.42_344(108)>
  D.42894_345 = *iftmp.42_18;
  if (D.42894_345 == 10)
    goto <bb 110>;
  else
    goto <bb 111>;

<bb 110>:
  iftmp.41_346 = "";
  goto <bb 112>;

<bb 111>:
  iftmp.41_347 = "\n";

<bb 112>:
  # iftmp.41_17 = PHI <iftmp.41_346(110), iftmp.41_347(111)>
  switch_snprintf (D.42883_337, D.42885_339, "%s%s", append_audio_335(D), iftmp.41_17);

<bb 113>:
  if (cur_ptime_52(D) == 0)
    goto <bb 114>;
  else
    goto <bb 115>;

<bb 114>:
  cur_ptime_348 = ptime_9;
  # DEBUG cur_ptime => cur_ptime_348

<bb 115>:
  # cur_ptime_1 = PHI <cur_ptime_52(D)(113), cur_ptime_348(114)>
  # DEBUG cur_ptime => cur_ptime_1
  D.42900_349 = noptime_21 == 0;
  D.42901_350 = cur_ptime_1 != 0;
  D.42902_351 = D.42900_349 && D.42901_350;
  if (D.42902_351 != 0)
    goto <bb 116>;
  else
    goto <bb 117>;

<bb 116>:
  D.42905_352 = strlen (buf_25(D));
  D.42906_353 = buf_25(D) + D.42905_352;
  D.42907_354 = strlen (buf_25(D));
  D.42908_355 = buflen_29(D) - D.42907_354;
  switch_snprintf (D.42906_353, D.42908_355, "a=ptime:%d\n", cur_ptime_1);

<bb 117>:
  local_sdp_audio_zrtp_hash_356 = switch_core_media_get_zrtp_hash (session_22(D), 0, 1);
  # DEBUG local_sdp_audio_zrtp_hash => local_sdp_audio_zrtp_hash_356
  if (local_sdp_audio_zrtp_hash_356 != 0B)
    goto <bb 118>;
  else
    goto <bb 119>;

<bb 118>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5882, session_22(D), 7, "Adding audio a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_356);
  D.42911_357 = strlen (buf_25(D));
  D.42912_358 = buf_25(D) + D.42911_357;
  D.42913_359 = strlen (buf_25(D));
  D.42914_360 = buflen_29(D) - D.42913_359;
  switch_snprintf (D.42912_358, D.42914_360, "a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_356);

<bb 119>:
  D.42915_362 = _zstr (sr_361(D));
  if (D.42915_362 == 0)
    goto <bb 120>;
  else
    goto <bb 121>;

<bb 120>:
  D.42918_363 = strlen (buf_25(D));
  D.42919_364 = buf_25(D) + D.42918_363;
  D.42920_365 = strlen (buf_25(D));
  D.42921_366 = buflen_29(D) - D.42920_365;
  switch_snprintf (D.42919_364, D.42921_366, "a=%s\n", sr_361(D));

<bb 121>:
  return;

}



;; Function switch_core_session_media_handle_ready (switch_core_session_media_handle_ready)



Renaming block #0



Renaming block #2

Renaming statement D.46435 = session->media_handle;

Renaming statement if (D.46435 != 0B)



Renaming block #3

Renaming statement D.46435 = session->media_handle;

Renaming statement D.46438 = D.46435->flags;

Renaming statement D.46439 = (int) D.46438;

Renaming statement D.46440 = D.46439 & 1;

Renaming statement D.46441 = (_Bool) D.46440;

Renaming statement if (D.46441 != 0)



Renaming block #4

Renaming statement D.46444 = 0;



Renaming block #5

Renaming statement D.46444 = 1;



Renaming block #6

Renaming statement return D.46444;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.46435_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #3

Updating SSA information for statement D.46435_4 = session_2(D)->media_handle;

Updating SSA information for statement D.46438_5 = D.46435_4->flags;



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)

Affected blocks: 0 2 3 4 5 6 


Scope blocks after cleanups:

{ Scope block #0 

}
switch_core_session_media_handle_ready (struct switch_core_session_t * session)
{
  switch_status_t D.46444;
  _Bool D.46441;
  int D.46440;
  int D.46439;
  smh_flag_t D.46438;
  struct switch_media_handle_t * D.46435;

<bb 2>:
  D.46435_3 = session_2(D)->media_handle;
  if (D.46435_3 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 3>:
  D.46435_4 = session_2(D)->media_handle;
  D.46438_5 = D.46435_4->flags;
  D.46439_6 = (int) D.46438_5;
  D.46440_7 = D.46439_6 & 1;
  D.46441_8 = (_Bool) D.46440_7;
  if (D.46441_8 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.46444_9 = 0;
  goto <bb 6>;

<bb 5>:
  D.46444_10 = 1;

<bb 6>:
  # D.46444_1 = PHI <D.46444_9(4), D.46444_10(5)>
  return D.46444_1;

}



;; Function switch_core_session_check_outgoing_crypto (switch_core_session_check_outgoing_crypto)



Renaming block #0



Renaming block #2

Renaming statement channel = switch_core_session_get_channel (session);

Renaming statement D.46663 = switch_core_session_media_handle_ready (session);

Renaming statement if (D.46663 != 0)



Renaming block #3

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #4

Renaming statement D.46668 = smh->crypto_mode;

Renaming statement if (D.46668 > 1)



Renaming block #5

Renaming statement switch_channel_set_flag_value (channel, 92, 1);

Renaming statement i = 0;



Renaming block #7

Renaming statement D.46672 = smh->crypto_suite_order[i];

Renaming statement if (D.46672 != 9)



Renaming block #6

Renaming statement D.46671 = session->media_handle;

Renaming statement D.46672 = smh->crypto_suite_order[i];

Renaming statement switch_core_media_build_crypto (D.46671, 0, 0, D.46672, 0, 0);

Renaming statement D.46671 = session->media_handle;

Renaming statement D.46672 = smh->crypto_suite_order[i];

Renaming statement switch_core_media_build_crypto (D.46671, 1, 0, D.46672, 0, 0);

Renaming statement i = i + 1;



Renaming block #8



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement channel_3 = switch_core_session_get_channel (session_2(D));

Updating SSA information for statement D.46663_4 = switch_core_session_media_handle_ready (session_2(D));



Registering new PHI nodes in block #3

Updating SSA information for statement smh_5 = session_2(D)->media_handle;



Registering new PHI nodes in block #4

Updating SSA information for statement D.46668_6 = smh_5->crypto_mode;



Registering new PHI nodes in block #5

Updating SSA information for statement switch_channel_set_flag_value (channel_3, 92, 1);



Registering new PHI nodes in block #7

Updating SSA information for statement D.46672_8 = smh_5->crypto_suite_order[i_1];



Registering new PHI nodes in block #6

Updating SSA information for statement D.46671_9 = session_2(D)->media_handle;

Updating SSA information for statement D.46672_10 = smh_5->crypto_suite_order[i_1];

Updating SSA information for statement switch_core_media_build_crypto (D.46671_9, 0, 0, D.46672_10, 0, 0);

Updating SSA information for statement D.46671_11 = session_2(D)->media_handle;

Updating SSA information for statement D.46672_12 = smh_5->crypto_suite_order[i_1];

Updating SSA information for statement switch_core_media_build_crypto (D.46671_11, 1, 0, D.46672_12, 0, 0);



Registering new PHI nodes in block #8



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)

Affected blocks: 0 2 3 4 5 6 7 8 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_channel_t * channel;
  struct switch_media_handle_t * smh;
  int i;

}
switch_core_session_check_outgoing_crypto (struct switch_core_session_t * session)
{
  int i;
  struct switch_media_handle_t * smh;
  struct switch_channel_t * channel;
  switch_rtp_crypto_key_type_t D.46672;
  struct switch_media_handle_t * D.46671;
  switch_rtp_crypto_mode_t D.46668;
  switch_status_t D.46663;

<bb 2>:
  channel_3 = switch_core_session_get_channel (session_2(D));
  # DEBUG channel => channel_3
  D.46663_4 = switch_core_session_media_handle_ready (session_2(D));
  if (D.46663_4 != 0)
    goto <bb 8>;
  else
    goto <bb 3>;

<bb 3>:
  smh_5 = session_2(D)->media_handle;
  # DEBUG smh => smh_5
  if (smh_5 == 0B)
    goto <bb 8>;
  else
    goto <bb 4>;

<bb 4>:
  D.46668_6 = smh_5->crypto_mode;
  if (D.46668_6 > 1)
    goto <bb 8>;
  else
    goto <bb 5>;

<bb 5>:
  switch_channel_set_flag_value (channel_3, 92, 1);
  i_7 = 0;
  # DEBUG i => i_7
  goto <bb 7>;

<bb 6>:
  D.46671_9 = session_2(D)->media_handle;
  D.46672_10 = smh_5->crypto_suite_order[i_1];
  switch_core_media_build_crypto (D.46671_9, 0, 0, D.46672_10, 0, 0);
  D.46671_11 = session_2(D)->media_handle;
  D.46672_12 = smh_5->crypto_suite_order[i_1];
  switch_core_media_build_crypto (D.46671_11, 1, 0, D.46672_12, 0, 0);
  i_13 = i_1 + 1;
  # DEBUG i => i_13

<bb 7>:
  # i_1 = PHI <i_7(5), i_13(6)>
  # DEBUG i => i_1
  D.46672_8 = smh_5->crypto_suite_order[i_1];
  if (D.46672_8 != 9)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 8>:
  return;

}



;; Function switch_core_session_get_media_handle (switch_core_session_get_media_handle)



Renaming block #0



Renaming block #2

Renaming statement D.46430 = switch_core_session_media_handle_ready (session);

Renaming statement if (D.46430 == 0)



Renaming block #3

Renaming statement D.46433 = session->media_handle;



Renaming block #4

Renaming statement D.46433 = 0B;



Renaming block #5

Renaming statement return D.46433;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.46430_3 = switch_core_session_media_handle_ready (session_2(D));



Registering new PHI nodes in block #3

Updating SSA information for statement D.46433_4 = session_2(D)->media_handle;



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)

Affected blocks: 0 2 3 4 5 


Scope blocks after cleanups:

{ Scope block #0 

}
switch_core_session_get_media_handle (struct switch_core_session_t * session)
{
  struct switch_media_handle_t * D.46433;
  switch_status_t D.46430;

<bb 2>:
  D.46430_3 = switch_core_session_media_handle_ready (session_2(D));
  if (D.46430_3 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.46433_4 = session_2(D)->media_handle;
  goto <bb 5>;

<bb 4>:
  D.46433_5 = 0B;

<bb 5>:
  # D.46433_1 = PHI <D.46433_4(3), D.46433_5(4)>
  return D.46433_1;

}



;; Function switch_core_session_clear_media_handle (switch_core_session_clear_media_handle)



Renaming block #0



Renaming block #2

Renaming statement D.46425 = session->media_handle;

Renaming statement if (D.46425 == 0B)



Renaming block #3

Renaming statement D.46428 = 1;



Renaming block #4

Renaming statement D.46428 = 0;



Renaming block #5

Renaming statement return D.46428;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.46425_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #3



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)

Affected blocks: 0 2 3 4 5 


Scope blocks after cleanups:

{ Scope block #0 

}
switch_core_session_clear_media_handle (struct switch_core_session_t * session)
{
  switch_status_t D.46428;
  struct switch_media_handle_t * D.46425;

<bb 2>:
  D.46425_3 = session_2(D)->media_handle;
  if (D.46425_3 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.46428_4 = 1;
  goto <bb 5>;

<bb 4>:
  D.46428_5 = 0;

<bb 5>:
  # D.46428_1 = PHI <D.46428_4(3), D.46428_5(4)>
  return D.46428_1;

}



;; Function switch_core_media_get_mparams (switch_core_media_get_mparams)



Renaming block #0



Renaming block #2

Renaming statement if (smh == 0B)



Renaming block #3



Renaming block #4

Renaming statement D.46423 = smh->mparams;

Renaming statement return D.46423;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("smh", "src/switch_core_media.c", 1545, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement D.46423_2 = smh_1(D)->mparams;



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)

Affected blocks: 0 2 3 4 


Scope blocks after cleanups:

{ Scope block #0 
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_get_mparams";

}
switch_core_media_get_mparams (struct switch_media_handle_t * smh)
{
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_get_mparams";
  struct switch_core_media_params_t * D.46423;

<bb 2>:
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1545, &__PRETTY_FUNCTION__);

<bb 4>:
  D.46423_2 = smh_1(D)->mparams;
  return D.46423_2;

}



;; Function switch_core_media_prepare_codecs (switch_core_media_prepare_codecs)



Renaming block #0



Renaming block #2

Renaming statement codec_string = 0B;

Renaming statement ocodec = 0B;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement if (force == 0)



Renaming block #6

Renaming statement D.46379 = session->channel;

Renaming statement D.46380 = switch_channel_test_flag (D.46379, 15);

Renaming statement if (D.46380 != 0)



Renaming block #7

Renaming statement D.46379 = session->channel;

Renaming statement D.46382 = switch_channel_test_flag (D.46379, 29);

Renaming statement if (D.46382 != 0)



Renaming block #8

Renaming statement if (force != 0)



Renaming block #9

Renaming statement D.46385 = smh->mparams;

Renaming statement D.46385->num_codecs = 0;



Renaming block #10

Renaming statement D.46385 = smh->mparams;

Renaming statement D.46386 = D.46385->num_codecs;

Renaming statement if (D.46386 != 0)



Renaming block #11

Renaming statement smh->payload_space = 0;

Renaming statement D.46389 = smh->session;

Renaming statement if (D.46389 == 0B)



Renaming block #12



Renaming block #13

Renaming statement D.46379 = session->channel;

Renaming statement abs = switch_channel_get_variable_dup (D.46379, "absolute_codec_string", 1, -1);

Renaming statement if (abs != 0B)



Renaming block #14

Renaming statement codec_string = abs;



Renaming block #15

Renaming statement D.46379 = session->channel;

Renaming statement codec_string = switch_channel_get_variable_dup (D.46379, "codec_string", 1, -1);

Renaming statement if (codec_string == 0B)



Renaming block #16

Renaming statement D.46389 = smh->session;

Renaming statement codec_string = switch_core_media_get_codec_string (D.46389);



Renaming block #17

Renaming statement if (codec_string != 0B)



Renaming block #18

Renaming statement D.46398 = *codec_string;

Renaming statement if (D.46398 == 61)



Renaming block #19

Renaming statement codec_string = codec_string + 1;



Renaming block #20

Renaming statement D.46379 = session->channel;

Renaming statement ocodec = switch_channel_get_variable_dup (D.46379, "originator_codec", 1, -1);

Renaming statement if (ocodec != 0B)



Renaming block #21

Renaming statement if (codec_string == 0B)



Renaming block #22

Renaming statement D.46407 = smh->media_flags[1];

Renaming statement if (D.46407 != 0)



Renaming block #24

Renaming statement D.46389 = smh->session;

Renaming statement codec_string = switch_core_session_sprintf (D.46389, "%s,%s", ocodec, codec_string);

Renaming statement if (codec_string == 0B)



Renaming block #25

Renaming statement codec_string = ocodec;



Renaming block #23

Renaming statement codec_string = ocodec;



Renaming block #26

Renaming statement if (codec_string != 0B)



Renaming block #27

Renaming statement D.46389 = smh->session;

Renaming statement tmp_codec_string = switch_core_perform_session_strdup (D.46389, codec_string, "src/switch_core_media.c", &__func__, 1603);

Renaming statement D.46379 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.46379, "rtp_use_codec_string", codec_string, 1);

Renaming statement D.46412 = &smh->codec_order;

Renaming statement D.46413 = switch_separate_string (tmp_codec_string, 44, D.46412, 50);

Renaming statement D.46414 = (int) D.46413;

Renaming statement smh->codec_order_last = D.46414;

Renaming statement D.46385 = smh->mparams;

Renaming statement D.46415 = &smh->codecs;

Renaming statement D.46412 = &smh->codec_order;

Renaming statement D.46416 = smh->codec_order_last;

Renaming statement D.46417 = switch_loadable_module_get_codecs_sorted (D.46415, 50, D.46412, D.46416);

Renaming statement D.46385->num_codecs = D.46417;



Renaming block #28

Renaming statement D.46385 = smh->mparams;

Renaming statement D.46415 = &smh->codecs;

Renaming statement D.46419 = switch_loadable_module_get_codecs (D.46415, 50);

Renaming statement D.46385->num_codecs = D.46419;



Renaming block #29



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 1555, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_6 = session_5(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.46379_8 = session_5(D)->channel;

Updating SSA information for statement D.46380_9 = switch_channel_test_flag (D.46379_8, 15);



Registering new PHI nodes in block #7

Updating SSA information for statement D.46379_10 = session_5(D)->channel;

Updating SSA information for statement D.46382_11 = switch_channel_test_flag (D.46379_10, 29);



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9

Updating SSA information for statement D.46385_12 = smh_6->mparams;

Updating SSA information for statement D.46385_12->num_codecs = 0;



Registering new PHI nodes in block #10

Updating SSA information for statement D.46385_13 = smh_6->mparams;

Updating SSA information for statement D.46386_14 = D.46385_13->num_codecs;



Registering new PHI nodes in block #11

Updating SSA information for statement smh_6->payload_space = 0;

Updating SSA information for statement D.46389_15 = smh_6->session;



Registering new PHI nodes in block #12

Updating SSA information for statement __assert_fail ("smh->session != ((void *)0)", "src/switch_core_media.c", 1575, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #13

Updating SSA information for statement D.46379_16 = session_5(D)->channel;

Updating SSA information for statement abs_17 = switch_channel_get_variable_dup (D.46379_16, "absolute_codec_string", 1, -1);



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement D.46379_19 = session_5(D)->channel;

Updating SSA information for statement codec_string_20 = switch_channel_get_variable_dup (D.46379_19, "codec_string", 1, -1);



Registering new PHI nodes in block #16

Updating SSA information for statement D.46389_21 = smh_6->session;

Updating SSA information for statement codec_string_22 = switch_core_media_get_codec_string (D.46389_21);



Registering new PHI nodes in block #17



Registering new PHI nodes in block #18

Updating SSA information for statement D.46398_23 = *codec_string_1;



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20

Updating SSA information for statement D.46379_25 = session_5(D)->channel;

Updating SSA information for statement ocodec_26 = switch_channel_get_variable_dup (D.46379_25, "originator_codec", 1, -1);



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22

Updating SSA information for statement D.46407_27 = smh_6->media_flags[1];



Registering new PHI nodes in block #24

Updating SSA information for statement D.46389_28 = smh_6->session;

Updating SSA information for statement codec_string_29 = switch_core_session_sprintf (D.46389_28, "%s,%s", ocodec_26, codec_string_1);



Registering new PHI nodes in block #25



Registering new PHI nodes in block #23



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27

Updating SSA information for statement D.46389_32 = smh_6->session;

Updating SSA information for statement tmp_codec_string_33 = switch_core_perform_session_strdup (D.46389_32, codec_string_2, "src/switch_core_media.c", &__func__, 1603);

Updating SSA information for statement D.46379_34 = session_5(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46379_34, "rtp_use_codec_string", codec_string_2, 1);

Updating SSA information for statement D.46413_36 = switch_separate_string (tmp_codec_string_33, 44, D.46412_35, 50);

Updating SSA information for statement smh_6->codec_order_last = D.46414_37;

Updating SSA information for statement D.46385_38 = smh_6->mparams;

Updating SSA information for statement D.46416_41 = smh_6->codec_order_last;

Updating SSA information for statement D.46417_42 = switch_loadable_module_get_codecs_sorted (D.46415_39, 50, D.46412_40, D.46416_41);

Updating SSA information for statement D.46385_38->num_codecs = D.46417_42;



Registering new PHI nodes in block #28

Updating SSA information for statement D.46385_43 = smh_6->mparams;

Updating SSA information for statement D.46419_45 = switch_loadable_module_get_codecs (D.46415_44, 50);

Updating SSA information for statement D.46385_43->num_codecs = D.46419_45;



Registering new PHI nodes in block #29



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 30
Number of blocks to update: 29 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 


Scope blocks after cleanups:

{ Scope block #0 
  const char * abs;
  const char * codec_string;
  const char * ocodec;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_prepare_codecs";
  void ready = <<< error >>>; (unused)
  static const char __func__[33] = "switch_core_media_prepare_codecs";

  { Scope block #0 
    char * tmp_codec_string;

  }

}
switch_core_media_prepare_codecs (struct switch_core_session_t * session, switch_bool_t force)
{
  char * tmp_codec_string;
  static const char __func__[33] = "switch_core_media_prepare_codecs";
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_prepare_codecs";
  struct switch_media_handle_t * smh;
  const char * ocodec;
  const char * codec_string;
  const char * abs;
  int D.46419;
  int D.46417;
  int D.46416;
  const struct switch_codec_implementation_t *[50] * D.46415;
  int D.46414;
  unsigned int D.46413;
  char *[50] * D.46412;
  switch_core_media_flag_t D.46407;
  const char D.46398;
  struct switch_core_session_t * D.46389;
  int D.46386;
  struct switch_core_media_params_t * D.46385;
  uint32_t D.46382;
  uint32_t D.46380;
  struct switch_channel_t * D.46379;

<bb 2>:
  codec_string_3 = 0B;
  # DEBUG codec_string => codec_string_3
  ocodec_4 = 0B;
  # DEBUG ocodec => ocodec_4
  if (session_5(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 1555, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_6 = session_5(D)->media_handle;
  # DEBUG smh => smh_6
  if (smh_6 == 0B)
    goto <bb 29>;
  else
    goto <bb 5>;

<bb 5>:
  if (force_7(D) == 0)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  D.46379_8 = session_5(D)->channel;
  D.46380_9 = switch_channel_test_flag (D.46379_8, 15);
  if (D.46380_9 != 0)
    goto <bb 29>;
  else
    goto <bb 7>;

<bb 7>:
  D.46379_10 = session_5(D)->channel;
  D.46382_11 = switch_channel_test_flag (D.46379_10, 29);
  if (D.46382_11 != 0)
    goto <bb 29>;
  else
    goto <bb 8>;

<bb 8>:
  if (force_7(D) != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.46385_12 = smh_6->mparams;
  D.46385_12->num_codecs = 0;

<bb 10>:
  D.46385_13 = smh_6->mparams;
  D.46386_14 = D.46385_13->num_codecs;
  if (D.46386_14 != 0)
    goto <bb 29>;
  else
    goto <bb 11>;

<bb 11>:
  smh_6->payload_space = 0;
  D.46389_15 = smh_6->session;
  if (D.46389_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  __assert_fail ("smh->session != ((void *)0)", "src/switch_core_media.c", 1575, &__PRETTY_FUNCTION__);

<bb 13>:
  D.46379_16 = session_5(D)->channel;
  abs_17 = switch_channel_get_variable_dup (D.46379_16, "absolute_codec_string", 1, -1);
  # DEBUG abs => abs_17
  if (abs_17 != 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  codec_string_18 = abs_17;
  # DEBUG codec_string => codec_string_18
  goto <bb 26> (ready);

<bb 15>:
  D.46379_19 = session_5(D)->channel;
  codec_string_20 = switch_channel_get_variable_dup (D.46379_19, "codec_string", 1, -1);
  # DEBUG codec_string => codec_string_20
  if (codec_string_20 == 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.46389_21 = smh_6->session;
  codec_string_22 = switch_core_media_get_codec_string (D.46389_21);
  # DEBUG codec_string => codec_string_22

<bb 17>:
  # codec_string_1 = PHI <codec_string_20(15), codec_string_22(16)>
  # DEBUG codec_string => codec_string_1
  if (codec_string_1 != 0B)
    goto <bb 18>;
  else
    goto <bb 20>;

<bb 18>:
  D.46398_23 = *codec_string_1;
  if (D.46398_23 == 61)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  codec_string_24 = codec_string_1 + 1;
  # DEBUG codec_string => codec_string_24
  goto <bb 26> (ready);

<bb 20>:
  D.46379_25 = session_5(D)->channel;
  ocodec_26 = switch_channel_get_variable_dup (D.46379_25, "originator_codec", 1, -1);
  # DEBUG ocodec => ocodec_26
  if (ocodec_26 != 0B)
    goto <bb 21>;
  else
    goto <bb 26> (ready);

<bb 21>:
  if (codec_string_1 == 0B)
    goto <bb 23>;
  else
    goto <bb 22>;

<bb 22>:
  D.46407_27 = smh_6->media_flags[1];
  if (D.46407_27 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  codec_string_31 = ocodec_26;
  # DEBUG codec_string => codec_string_31
  goto <bb 26> (ready);

<bb 24>:
  D.46389_28 = smh_6->session;
  codec_string_29 = switch_core_session_sprintf (D.46389_28, "%s,%s", ocodec_26, codec_string_1);
  # DEBUG codec_string => codec_string_29
  if (codec_string_29 == 0B)
    goto <bb 25>;
  else
    goto <bb 26> (ready);

<bb 25>:
  codec_string_30 = ocodec_26;
  # DEBUG codec_string => codec_string_30

  # codec_string_2 = PHI <codec_string_18(14), codec_string_24(19), codec_string_1(20), codec_string_31(23), codec_string_29(24), codec_string_30(25)>
ready:
  # DEBUG codec_string => codec_string_2
  if (codec_string_2 != 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.46389_32 = smh_6->session;
  tmp_codec_string_33 = switch_core_perform_session_strdup (D.46389_32, codec_string_2, "src/switch_core_media.c", &__func__, 1603);
  # DEBUG tmp_codec_string => tmp_codec_string_33
  D.46379_34 = session_5(D)->channel;
  switch_channel_set_variable_var_check (D.46379_34, "rtp_use_codec_string", codec_string_2, 1);
  D.46412_35 = &smh_6->codec_order;
  D.46413_36 = switch_separate_string (tmp_codec_string_33, 44, D.46412_35, 50);
  D.46414_37 = (int) D.46413_36;
  smh_6->codec_order_last = D.46414_37;
  D.46385_38 = smh_6->mparams;
  D.46415_39 = &smh_6->codecs;
  D.46412_40 = &smh_6->codec_order;
  D.46416_41 = smh_6->codec_order_last;
  D.46417_42 = switch_loadable_module_get_codecs_sorted (D.46415_39, 50, D.46412_40, D.46416_41);
  D.46385_38->num_codecs = D.46417_42;
  goto <bb 29>;

<bb 28>:
  D.46385_43 = smh_6->mparams;
  D.46415_44 = &smh_6->codecs;
  D.46419_45 = switch_loadable_module_get_codecs (D.46415_44, 50);
  D.46385_43->num_codecs = D.46419_45;

<bb 29>:
  return;

}



;; Function switch_core_media_write_frame (switch_core_media_write_frame)



Renaming block #0



Renaming block #2

Renaming statement status = 0;

Renaming statement bytes = 0;

Renaming statement samples = 0;

Renaming statement frames = 0;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.46080 = 1;



Renaming block #6

Renaming statement D.46081 = smh->media_flags[0];

Renaming statement if (D.46081 == 0)



Renaming block #7

Renaming statement D.46080 = 1;



Renaming block #8

Renaming statement D.46084 = &smh->engines;

Renaming statement D.46085 = type * 11416;

Renaming statement engine = D.46084 + D.46085;



Renaming block #12

Renaming statement D.46091 = engine->read_codec.implementation;

Renaming statement if (D.46091 == 0B)



Renaming block #13

Renaming statement D.46093 = engine->rtp_session;

Renaming statement D.46094 = switch_rtp_ready (D.46093);

Renaming statement if (D.46094 == 0)



Renaming block #14

Renaming statement D.46091 = engine->read_codec.implementation;

Renaming statement if (D.46091 == 0B)



Renaming block #15

Renaming statement D.46098 = &engine->read_codec;

Renaming statement D.46099 = switch_core_codec_ready (D.46098);

Renaming statement if (D.46099 == 0)



Renaming block #17

Renaming statement D.46091 = engine->read_codec.implementation;

Renaming statement if (D.46091 == 0B)



Renaming block #18

Renaming statement D.46098 = &engine->read_codec;

Renaming statement D.46103 = switch_core_codec_ready (D.46098);

Renaming statement if (D.46103 == 0)



Renaming block #20

Renaming statement D.46104 = BIT_FIELD_REF <*frame, 32, 480>;

Renaming statement D.46105 = D.46104 & 33;

Renaming statement if (D.46105 == 0)



Renaming block #21

Renaming statement D.46108 = engine->read_impl.encoded_bytes_per_packet;

Renaming statement if (D.46108 != 0)



Renaming block #22

Renaming statement D.46108 = engine->read_impl.encoded_bytes_per_packet;

Renaming statement bytes = (int) D.46108;

Renaming statement D.46111 = frame->datalen;

Renaming statement D.46112 = (int) D.46111;

Renaming statement frames = D.46112 / bytes;



Renaming block #23

Renaming statement frames = 1;



Renaming block #24

Renaming statement D.46114 = engine->read_impl.samples_per_packet;

Renaming statement frames.127 = (uint32_t) frames;

Renaming statement D.46116 = D.46114 * frames.127;

Renaming statement samples = (int) D.46116;



Renaming block #25

Renaming statement D.46117 = engine->timestamp_send;

Renaming statement samples.128 = (uint32_t) samples;

Renaming statement D.46119 = D.46117 + samples.128;

Renaming statement engine->timestamp_send = D.46119;

Renaming statement D.46093 = engine->rtp_session;

Renaming statement D.46120 = switch_rtp_write_frame (D.46093, frame);

Renaming statement if (D.46120 < 0)



Renaming block #26

Renaming statement status = 1;



Renaming block #27

Renaming statement D.46080 = status;



Renaming block #19

Renaming statement D.46080 = 1;



Renaming block #16

Renaming statement D.46080 = 9;



Renaming block #9

Renaming statement D.46086 = session->channel;

Renaming statement D.46087 = switch_channel_test_ready (D.46086, 1, 0);

Renaming statement if (D.46087 != 0)



Renaming block #10



Renaming block #11

Renaming statement D.46080 = 9;



Renaming block #28

Renaming statement return D.46080;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 1996, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_10 = session_9(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.46081_12 = smh_10->media_flags[0];



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Registering new PHI nodes in block #12

Updating SSA information for statement D.46091_18 = engine_17->read_codec.implementation;



Registering new PHI nodes in block #13

Updating SSA information for statement D.46093_19 = engine_17->rtp_session;

Updating SSA information for statement D.46094_20 = switch_rtp_ready (D.46093_19);



Registering new PHI nodes in block #14

Updating SSA information for statement D.46091_21 = engine_17->read_codec.implementation;



Registering new PHI nodes in block #15

Updating SSA information for statement D.46099_23 = switch_core_codec_ready (D.46098_22);



Registering new PHI nodes in block #17

Updating SSA information for statement D.46091_24 = engine_17->read_codec.implementation;



Registering new PHI nodes in block #18

Updating SSA information for statement D.46103_26 = switch_core_codec_ready (D.46098_25);



Registering new PHI nodes in block #20

Updating SSA information for statement D.46104_28 = BIT_FIELD_REF <*frame_27(D), 32, 480>;



Registering new PHI nodes in block #21

Updating SSA information for statement D.46108_30 = engine_17->read_impl.encoded_bytes_per_packet;



Registering new PHI nodes in block #22

Updating SSA information for statement D.46108_31 = engine_17->read_impl.encoded_bytes_per_packet;

Updating SSA information for statement D.46111_33 = frame_27(D)->datalen;



Registering new PHI nodes in block #23



Registering new PHI nodes in block #24

Updating SSA information for statement D.46114_37 = engine_17->read_impl.samples_per_packet;



Registering new PHI nodes in block #25

Updating SSA information for statement D.46117_41 = engine_17->timestamp_send;

Updating SSA information for statement engine_17->timestamp_send = D.46119_43;

Updating SSA information for statement D.46093_44 = engine_17->rtp_session;

Updating SSA information for statement D.46120_45 = switch_rtp_write_frame (D.46093_44, frame_27(D));



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27



Registering new PHI nodes in block #19



Registering new PHI nodes in block #16



Registering new PHI nodes in block #9

Updating SSA information for statement D.46086_50 = session_9(D)->channel;

Updating SSA information for statement D.46087_51 = switch_channel_test_ready (D.46086_50, 1, 0);



Registering new PHI nodes in block #10

Updating SSA information for statement switch_sleep (10000);



Registering new PHI nodes in block #11



Registering new PHI nodes in block #28



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 29
Number of blocks to update: 28 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 


Scope blocks after cleanups:

{ Scope block #0 
  switch_status_t status;
  int bytes;
  int samples;
  int frames;
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_write_frame";

}
switch_core_media_write_frame (struct switch_core_session_t * session, struct switch_frame_t * frame, switch_io_flag_t flags, int stream_id, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_write_frame";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  int frames;
  int samples;
  int bytes;
  switch_status_t status;
  int D.46120;
  uint32_t D.46119;
  uint32_t samples.128;
  uint32_t D.46117;
  uint32_t D.46116;
  uint32_t frames.127;
  uint32_t D.46114;
  int D.46112;
  uint32_t D.46111;
  uint32_t D.46108;
  unsigned int D.46105;
  unsigned int D.46104;
  switch_bool_t D.46103;
  switch_bool_t D.46099;
  struct switch_codec_t * D.46098;
  uint8_t D.46094;
  struct switch_rtp_t * D.46093;
  const struct switch_codec_implementation_t * D.46091;
  int D.46087;
  struct switch_channel_t * D.46086;
  unsigned int D.46085;
  struct switch_rtp_engine_t[2] * D.46084;
  switch_core_media_flag_t D.46081;
  switch_status_t D.46080;

<bb 2>:
  status_5 = 0;
  # DEBUG status => status_5
  bytes_6 = 0;
  # DEBUG bytes => bytes_6
  samples_7 = 0;
  # DEBUG samples => samples_7
  frames_8 = 0;
  # DEBUG frames => frames_8
  if (session_9(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 1996, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_10 = session_9(D)->media_handle;
  # DEBUG smh => smh_10
  if (smh_10 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.46080_11 = 1;
  goto <bb 28>;

<bb 6>:
  D.46081_12 = smh_10->media_flags[0];
  if (D.46081_12 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.46080_13 = 1;
  goto <bb 28>;

<bb 8>:
  D.46084_14 = &smh_10->engines;
  D.46085_16 = type_15(D) * 11416;
  engine_17 = D.46084_14 + D.46085_16;
  # DEBUG engine => engine_17
  goto <bb 12>;

<bb 9>:
  D.46086_50 = session_9(D)->channel;
  D.46087_51 = switch_channel_test_ready (D.46086_50, 1, 0);
  if (D.46087_51 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  switch_sleep (10000);
  goto <bb 12>;

<bb 11>:
  D.46080_52 = 9;
  goto <bb 28>;

<bb 12>:
  D.46091_18 = engine_17->read_codec.implementation;
  if (D.46091_18 == 0B)
    goto <bb 9>;
  else
    goto <bb 13>;

<bb 13>:
  D.46093_19 = engine_17->rtp_session;
  D.46094_20 = switch_rtp_ready (D.46093_19);
  if (D.46094_20 == 0)
    goto <bb 9>;
  else
    goto <bb 14>;

<bb 14>:
  D.46091_21 = engine_17->read_codec.implementation;
  if (D.46091_21 == 0B)
    goto <bb 16>;
  else
    goto <bb 15>;

<bb 15>:
  D.46098_22 = &engine_17->read_codec;
  D.46099_23 = switch_core_codec_ready (D.46098_22);
  if (D.46099_23 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.46080_49 = 9;
  goto <bb 28>;

<bb 17>:
  D.46091_24 = engine_17->read_codec.implementation;
  if (D.46091_24 == 0B)
    goto <bb 19>;
  else
    goto <bb 18>;

<bb 18>:
  D.46098_25 = &engine_17->read_codec;
  D.46103_26 = switch_core_codec_ready (D.46098_25);
  if (D.46103_26 == 0)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.46080_48 = 1;
  goto <bb 28>;

<bb 20>:
  D.46104_28 = BIT_FIELD_REF <*frame_27(D), 32, 480>;
  D.46105_29 = D.46104_28 & 33;
  if (D.46105_29 == 0)
    goto <bb 21>;
  else
    goto <bb 25>;

<bb 21>:
  D.46108_30 = engine_17->read_impl.encoded_bytes_per_packet;
  if (D.46108_30 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.46108_31 = engine_17->read_impl.encoded_bytes_per_packet;
  bytes_32 = (int) D.46108_31;
  # DEBUG bytes => bytes_32
  D.46111_33 = frame_27(D)->datalen;
  D.46112_34 = (int) D.46111_33;
  frames_35 = D.46112_34 / bytes_32;
  # DEBUG frames => frames_35
  goto <bb 24>;

<bb 23>:
  frames_36 = 1;
  # DEBUG frames => frames_36

<bb 24>:
  # frames_3 = PHI <frames_35(22), frames_36(23)>
  # DEBUG frames => frames_3
  D.46114_37 = engine_17->read_impl.samples_per_packet;
  frames.127_38 = (uint32_t) frames_3;
  D.46116_39 = D.46114_37 * frames.127_38;
  samples_40 = (int) D.46116_39;
  # DEBUG samples => samples_40

<bb 25>:
  # samples_2 = PHI <samples_7(20), samples_40(24)>
  # DEBUG samples => samples_2
  D.46117_41 = engine_17->timestamp_send;
  samples.128_42 = (uint32_t) samples_2;
  D.46119_43 = D.46117_41 + samples.128_42;
  engine_17->timestamp_send = D.46119_43;
  D.46093_44 = engine_17->rtp_session;
  D.46120_45 = switch_rtp_write_frame (D.46093_44, frame_27(D));
  if (D.46120_45 < 0)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  status_46 = 1;
  # DEBUG status => status_46

<bb 27>:
  # status_1 = PHI <status_5(25), status_46(26)>
  # DEBUG status => status_1
  D.46080_47 = status_1;

<bb 28>:
  # D.46080_4 = PHI <D.46080_11(5), D.46080_13(7), D.46080_52(11), D.46080_49(16), D.46080_48(19), D.46080_47(27)>
  return D.46080_4;

}



;; Function switch_core_media_copy_t38_options (switch_core_media_copy_t38_options)



Renaming block #0



Renaming block #2

Renaming statement channel = switch_core_session_get_channel (session);

Renaming statement local_t38_options = switch_channel_get_private (channel, "t38_options");

Renaming statement if (t38_options == 0B)



Renaming block #3



Renaming block #4

Renaming statement if (local_t38_options == 0B)



Renaming block #5

Renaming statement local_t38_options = switch_core_perform_session_alloc (session, 60, "src/switch_core_media.c", &__func__, 2055);



Renaming block #6

Renaming statement D.46061 = t38_options->T38MaxBitRate;

Renaming statement local_t38_options->T38MaxBitRate = D.46061;

Renaming statement D.46062 = t38_options->T38FaxFillBitRemoval;

Renaming statement local_t38_options->T38FaxFillBitRemoval = D.46062;

Renaming statement D.46063 = t38_options->T38FaxTranscodingMMR;

Renaming statement local_t38_options->T38FaxTranscodingMMR = D.46063;

Renaming statement D.46064 = t38_options->T38FaxTranscodingJBIG;

Renaming statement local_t38_options->T38FaxTranscodingJBIG = D.46064;

Renaming statement D.46065 = t38_options->T38FaxRateManagement;

Renaming statement D.46066 = switch_core_perform_session_strdup (session, D.46065, "src/switch_core_media.c", &__func__, 2062);

Renaming statement local_t38_options->T38FaxRateManagement = D.46066;

Renaming statement D.46067 = t38_options->T38FaxMaxBuffer;

Renaming statement local_t38_options->T38FaxMaxBuffer = D.46067;

Renaming statement D.46068 = t38_options->T38FaxMaxDatagram;

Renaming statement local_t38_options->T38FaxMaxDatagram = D.46068;

Renaming statement D.46069 = t38_options->T38FaxUdpEC;

Renaming statement D.46070 = switch_core_perform_session_strdup (session, D.46069, "src/switch_core_media.c", &__func__, 2065);

Renaming statement local_t38_options->T38FaxUdpEC = D.46070;

Renaming statement D.46071 = t38_options->T38VendorInfo;

Renaming statement D.46072 = switch_core_perform_session_strdup (session, D.46071, "src/switch_core_media.c", &__func__, 2066);

Renaming statement local_t38_options->T38VendorInfo = D.46072;

Renaming statement D.46073 = t38_options->remote_ip;

Renaming statement D.46074 = switch_core_perform_session_strdup (session, D.46073, "src/switch_core_media.c", &__func__, 2067);

Renaming statement local_t38_options->remote_ip = D.46074;

Renaming statement D.46075 = t38_options->remote_port;

Renaming statement local_t38_options->remote_port = D.46075;

Renaming statement switch_channel_set_private (channel, "t38_options", local_t38_options);



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement channel_3 = switch_core_session_get_channel (session_2(D));

Updating SSA information for statement local_t38_options_4 = switch_channel_get_private (channel_3, "t38_options");



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("t38_options", "src/switch_core_media.c", 2052, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5

Updating SSA information for statement local_t38_options_6 = switch_core_perform_session_alloc (session_2(D), 60, "src/switch_core_media.c", &__func__, 2055);



Registering new PHI nodes in block #6

Updating SSA information for statement D.46061_7 = t38_options_5(D)->T38MaxBitRate;

Updating SSA information for statement local_t38_options_1->T38MaxBitRate = D.46061_7;

Updating SSA information for statement D.46062_8 = t38_options_5(D)->T38FaxFillBitRemoval;

Updating SSA information for statement local_t38_options_1->T38FaxFillBitRemoval = D.46062_8;

Updating SSA information for statement D.46063_9 = t38_options_5(D)->T38FaxTranscodingMMR;

Updating SSA information for statement local_t38_options_1->T38FaxTranscodingMMR = D.46063_9;

Updating SSA information for statement D.46064_10 = t38_options_5(D)->T38FaxTranscodingJBIG;

Updating SSA information for statement local_t38_options_1->T38FaxTranscodingJBIG = D.46064_10;

Updating SSA information for statement D.46065_11 = t38_options_5(D)->T38FaxRateManagement;

Updating SSA information for statement D.46066_12 = switch_core_perform_session_strdup (session_2(D), D.46065_11, "src/switch_core_media.c", &__func__, 2062);

Updating SSA information for statement local_t38_options_1->T38FaxRateManagement = D.46066_12;

Updating SSA information for statement D.46067_13 = t38_options_5(D)->T38FaxMaxBuffer;

Updating SSA information for statement local_t38_options_1->T38FaxMaxBuffer = D.46067_13;

Updating SSA information for statement D.46068_14 = t38_options_5(D)->T38FaxMaxDatagram;

Updating SSA information for statement local_t38_options_1->T38FaxMaxDatagram = D.46068_14;

Updating SSA information for statement D.46069_15 = t38_options_5(D)->T38FaxUdpEC;

Updating SSA information for statement D.46070_16 = switch_core_perform_session_strdup (session_2(D), D.46069_15, "src/switch_core_media.c", &__func__, 2065);

Updating SSA information for statement local_t38_options_1->T38FaxUdpEC = D.46070_16;

Updating SSA information for statement D.46071_17 = t38_options_5(D)->T38VendorInfo;

Updating SSA information for statement D.46072_18 = switch_core_perform_session_strdup (session_2(D), D.46071_17, "src/switch_core_media.c", &__func__, 2066);

Updating SSA information for statement local_t38_options_1->T38VendorInfo = D.46072_18;

Updating SSA information for statement D.46073_19 = t38_options_5(D)->remote_ip;

Updating SSA information for statement D.46074_20 = switch_core_perform_session_strdup (session_2(D), D.46073_19, "src/switch_core_media.c", &__func__, 2067);

Updating SSA information for statement local_t38_options_1->remote_ip = D.46074_20;

Updating SSA information for statement D.46075_21 = t38_options_5(D)->remote_port;

Updating SSA information for statement local_t38_options_1->remote_port = D.46075_21;

Updating SSA information for statement switch_channel_set_private (channel_3, "t38_options", local_t38_options_1);



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)

Affected blocks: 0 2 3 4 5 6 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_channel_t * channel;
  struct switch_t38_options_t * local_t38_options;
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_copy_t38_options";
  static const char __func__[35] = "switch_core_media_copy_t38_options";

}
switch_core_media_copy_t38_options (struct switch_t38_options_t * t38_options, struct switch_core_session_t * session)
{
  static const char __func__[35] = "switch_core_media_copy_t38_options";
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_copy_t38_options";
  struct switch_t38_options_t * local_t38_options;
  struct switch_channel_t * channel;
  uint16_t D.46075;
  char * D.46074;
  const char * D.46073;
  char * D.46072;
  const char * D.46071;
  char * D.46070;
  const char * D.46069;
  uint32_t D.46068;
  uint32_t D.46067;
  char * D.46066;
  const char * D.46065;
  switch_bool_t D.46064;
  switch_bool_t D.46063;
  switch_bool_t D.46062;
  uint32_t D.46061;

<bb 2>:
  channel_3 = switch_core_session_get_channel (session_2(D));
  # DEBUG channel => channel_3
  local_t38_options_4 = switch_channel_get_private (channel_3, "t38_options");
  # DEBUG local_t38_options => local_t38_options_4
  if (t38_options_5(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("t38_options", "src/switch_core_media.c", 2052, &__PRETTY_FUNCTION__);

<bb 4>:
  if (local_t38_options_4 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  local_t38_options_6 = switch_core_perform_session_alloc (session_2(D), 60, "src/switch_core_media.c", &__func__, 2055);
  # DEBUG local_t38_options => local_t38_options_6

<bb 6>:
  # local_t38_options_1 = PHI <local_t38_options_4(4), local_t38_options_6(5)>
  # DEBUG local_t38_options => local_t38_options_1
  D.46061_7 = t38_options_5(D)->T38MaxBitRate;
  local_t38_options_1->T38MaxBitRate = D.46061_7;
  D.46062_8 = t38_options_5(D)->T38FaxFillBitRemoval;
  local_t38_options_1->T38FaxFillBitRemoval = D.46062_8;
  D.46063_9 = t38_options_5(D)->T38FaxTranscodingMMR;
  local_t38_options_1->T38FaxTranscodingMMR = D.46063_9;
  D.46064_10 = t38_options_5(D)->T38FaxTranscodingJBIG;
  local_t38_options_1->T38FaxTranscodingJBIG = D.46064_10;
  D.46065_11 = t38_options_5(D)->T38FaxRateManagement;
  D.46066_12 = switch_core_perform_session_strdup (session_2(D), D.46065_11, "src/switch_core_media.c", &__func__, 2062);
  local_t38_options_1->T38FaxRateManagement = D.46066_12;
  D.46067_13 = t38_options_5(D)->T38FaxMaxBuffer;
  local_t38_options_1->T38FaxMaxBuffer = D.46067_13;
  D.46068_14 = t38_options_5(D)->T38FaxMaxDatagram;
  local_t38_options_1->T38FaxMaxDatagram = D.46068_14;
  D.46069_15 = t38_options_5(D)->T38FaxUdpEC;
  D.46070_16 = switch_core_perform_session_strdup (session_2(D), D.46069_15, "src/switch_core_media.c", &__func__, 2065);
  local_t38_options_1->T38FaxUdpEC = D.46070_16;
  D.46071_17 = t38_options_5(D)->T38VendorInfo;
  D.46072_18 = switch_core_perform_session_strdup (session_2(D), D.46071_17, "src/switch_core_media.c", &__func__, 2066);
  local_t38_options_1->T38VendorInfo = D.46072_18;
  D.46073_19 = t38_options_5(D)->remote_ip;
  D.46074_20 = switch_core_perform_session_strdup (session_2(D), D.46073_19, "src/switch_core_media.c", &__func__, 2067);
  local_t38_options_1->remote_ip = D.46074_20;
  D.46075_21 = t38_options_5(D)->remote_port;
  local_t38_options_1->remote_port = D.46075_21;
  switch_channel_set_private (channel_3, "t38_options", local_t38_options_1);
  return;

}



;; Function switch_core_media_process_t38_passthru (switch_core_media_process_t38_passthru)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.47109 = 1;



Renaming block #6

Renaming statement a_engine = &smh->engines;

Renaming statement D.47110 = a_engine->rtp_session;

Renaming statement remote_host = switch_rtp_get_remote_host (D.47110);

Renaming statement D.47110 = a_engine->rtp_session;

Renaming statement remote_port = switch_rtp_get_remote_port (D.47110);

Renaming statement D.47111 = a_engine->cur_payload_map;

Renaming statement D.47112 = t38_options->remote_ip;

Renaming statement D.47113 = switch_core_perform_session_strdup (session, D.47112, "src/switch_core_media.c", &__func__, 484);

Renaming statement D.47111->remote_sdp_ip = D.47113;

Renaming statement D.47111 = a_engine->cur_payload_map;

Renaming statement D.47114 = t38_options->remote_port;

Renaming statement D.47111->remote_sdp_port = D.47114;

Renaming statement D.47117 = remote_host != 0B;

Renaming statement D.47118 = remote_port != 0;

Renaming statement D.47119 = D.47117 && D.47118;

Renaming statement if (D.47119 != 0)



Renaming block #7

Renaming statement D.47111 = a_engine->cur_payload_map;

Renaming statement D.47121 = D.47111->remote_sdp_ip;

Renaming statement D.38429 = __builtin_strcmp (remote_host, D.47121);

Renaming statement if (D.38429 == 0)



Renaming block #8

Renaming statement D.47111 = a_engine->cur_payload_map;

Renaming statement D.47123 = D.47111->remote_sdp_port;

Renaming statement if (D.47123 == remote_port)



Renaming block #9

Renaming statement D.47125 = session->channel;

Renaming statement D.47126 = switch_channel_get_name (D.47125);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 489, session, 7, "Audio params are unchanged for %s.\n", D.47126);



Renaming block #10

Renaming statement D.47125 = session->channel;

Renaming statement D.47127 = switch_channel_get_name (D.47125);

Renaming statement D.47128 = (int) remote_port;

Renaming statement D.47111 = a_engine->cur_payload_map;

Renaming statement D.47121 = D.47111->remote_sdp_ip;

Renaming statement D.47111 = a_engine->cur_payload_map;

Renaming statement D.47123 = D.47111->remote_sdp_port;

Renaming statement D.47129 = (int) D.47123;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 495, session, 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.47127, remote_host, D.47128, D.47121, D.47129);

Renaming statement D.47111 = a_engine->cur_payload_map;

Renaming statement D.47123 = D.47111->remote_sdp_port;

Renaming statement D.47129 = (int) D.47123;

Renaming statement switch_snprintf (&tmp, 32, "%d", D.47129);

Renaming statement D.47125 = session->channel;

Renaming statement D.47111 = a_engine->cur_payload_map;

Renaming statement D.47121 = D.47111->remote_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.47125, "remote_media_ip", D.47121, 1);

Renaming statement D.47125 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.47125, "remote_media_port", &tmp, 1);

Renaming statement D.47110 = a_engine->rtp_session;

Renaming statement D.47111 = a_engine->cur_payload_map;

Renaming statement D.47121 = D.47111->remote_sdp_ip;

Renaming statement D.47111 = a_engine->cur_payload_map;

Renaming statement D.47123 = D.47111->remote_sdp_port;

Renaming statement D.47130 = switch_rtp_set_remote_address (D.47110, D.47121, D.47123, 0, 1, &err);

Renaming statement if (D.47130 != 0)



Renaming block #11

Renaming statement err.171 = err;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 505, session, 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.171);

Renaming statement D.47125 = session->channel;

Renaming statement switch_channel_perform_hangup (D.47125, "src/switch_core_media.c", &__func__, 506, 88);



Renaming block #12

Renaming statement switch_core_media_copy_t38_options (t38_options, other_session);

Renaming statement D.47109 = 0;



Renaming block #13

Renaming statement return D.47109;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement tmp = "";



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 473, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.47110_6 = a_engine_5->rtp_session;

Updating SSA information for statement remote_host_7 = switch_rtp_get_remote_host (D.47110_6);

Updating SSA information for statement D.47110_8 = a_engine_5->rtp_session;

Updating SSA information for statement remote_port_9 = switch_rtp_get_remote_port (D.47110_8);

Updating SSA information for statement D.47111_10 = a_engine_5->cur_payload_map;

Updating SSA information for statement D.47112_12 = t38_options_11(D)->remote_ip;

Updating SSA information for statement D.47113_13 = switch_core_perform_session_strdup (session_2(D), D.47112_12, "src/switch_core_media.c", &__func__, 484);

Updating SSA information for statement D.47111_10->remote_sdp_ip = D.47113_13;

Updating SSA information for statement D.47111_14 = a_engine_5->cur_payload_map;

Updating SSA information for statement D.47114_15 = t38_options_11(D)->remote_port;

Updating SSA information for statement D.47111_14->remote_sdp_port = D.47114_15;



Registering new PHI nodes in block #7

Updating SSA information for statement D.47111_19 = a_engine_5->cur_payload_map;

Updating SSA information for statement D.47121_20 = D.47111_19->remote_sdp_ip;

Updating SSA information for statement D.38429_21 = __builtin_strcmp (remote_host_7, D.47121_20);



Registering new PHI nodes in block #8

Updating SSA information for statement D.47111_22 = a_engine_5->cur_payload_map;

Updating SSA information for statement D.47123_23 = D.47111_22->remote_sdp_port;



Registering new PHI nodes in block #9

Updating SSA information for statement D.47125_24 = session_2(D)->channel;

Updating SSA information for statement D.47126_25 = switch_channel_get_name (D.47125_24);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 489, session_2(D), 7, "Audio params are unchanged for %s.\n", D.47126_25);



Registering new PHI nodes in block #10

Updating SSA information for statement err = 0B;

Updating SSA information for statement D.47125_26 = session_2(D)->channel;

Updating SSA information for statement D.47127_27 = switch_channel_get_name (D.47125_26);

Updating SSA information for statement D.47111_29 = a_engine_5->cur_payload_map;

Updating SSA information for statement D.47121_30 = D.47111_29->remote_sdp_ip;

Updating SSA information for statement D.47111_31 = a_engine_5->cur_payload_map;

Updating SSA information for statement D.47123_32 = D.47111_31->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 495, session_2(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.47127_27, remote_host_7, D.47128_28, D.47121_30, D.47129_33);

Updating SSA information for statement D.47111_34 = a_engine_5->cur_payload_map;

Updating SSA information for statement D.47123_35 = D.47111_34->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 32, "%d", D.47129_36);

Updating SSA information for statement D.47125_37 = session_2(D)->channel;

Updating SSA information for statement D.47111_38 = a_engine_5->cur_payload_map;

Updating SSA information for statement D.47121_39 = D.47111_38->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.47125_37, "remote_media_ip", D.47121_39, 1);

Updating SSA information for statement D.47125_40 = session_2(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.47125_40, "remote_media_port", &tmp, 1);

Updating SSA information for statement D.47110_41 = a_engine_5->rtp_session;

Updating SSA information for statement D.47111_42 = a_engine_5->cur_payload_map;

Updating SSA information for statement D.47121_43 = D.47111_42->remote_sdp_ip;

Updating SSA information for statement D.47111_44 = a_engine_5->cur_payload_map;

Updating SSA information for statement D.47123_45 = D.47111_44->remote_sdp_port;

Updating SSA information for statement D.47130_46 = switch_rtp_set_remote_address (D.47110_41, D.47121_43, D.47123_45, 0, 1, &err);



Registering new PHI nodes in block #11

Updating SSA information for statement err.171_47 = err;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 505, session_2(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.171_47);

Updating SSA information for statement D.47125_48 = session_2(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.47125_48, "src/switch_core_media.c", &__func__, 506, 88);



Registering new PHI nodes in block #12

Updating SSA information for statement switch_core_media_copy_t38_options (t38_options_11(D), other_session_49(D));



Registering new PHI nodes in block #13



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 14
Number of blocks to update: 13 ( 93%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 


Scope blocks after cleanups:

{ Scope block #0 
  char * remote_host;
  switch_port_t remote_port;
  char tmp[32];
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[39] = "switch_core_media_process_t38_passthru";
  static const char __func__[39] = "switch_core_media_process_t38_passthru";

  { Scope block #0 
    size_t __s1_len; (unused)
    size_t __s2_len; (unused)

  }

  { Scope block #0 
    const char * err;

  }

}
switch_core_media_process_t38_passthru (struct switch_core_session_t * session, struct switch_core_session_t * other_session, struct switch_t38_options_t * t38_options)
{
  const char * err;
  static const char __func__[39] = "switch_core_media_process_t38_passthru";
  static const char __PRETTY_FUNCTION__[39] = "switch_core_media_process_t38_passthru";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  char tmp[32];
  switch_port_t remote_port;
  char * remote_host;
  const char * err.171;
  switch_status_t D.47130;
  int D.47129;
  int D.47128;
  char * D.47127;
  char * D.47126;
  struct switch_channel_t * D.47125;
  switch_port_t D.47123;
  char * D.47121;
  int D.38429;
  _Bool D.47119;
  _Bool D.47118;
  _Bool D.47117;
  uint16_t D.47114;
  char * D.47113;
  const char * D.47112;
  struct payload_map_t * D.47111;
  struct switch_rtp_t * D.47110;
  switch_status_t D.47109;

<bb 2>:
  tmp = "";
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 473, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47109_4 = 1;
  goto <bb 13>;

<bb 6>:
  a_engine_5 = &smh_3->engines;
  # DEBUG a_engine => a_engine_5
  D.47110_6 = a_engine_5->rtp_session;
  remote_host_7 = switch_rtp_get_remote_host (D.47110_6);
  # DEBUG remote_host => remote_host_7
  D.47110_8 = a_engine_5->rtp_session;
  remote_port_9 = switch_rtp_get_remote_port (D.47110_8);
  # DEBUG remote_port => remote_port_9
  D.47111_10 = a_engine_5->cur_payload_map;
  D.47112_12 = t38_options_11(D)->remote_ip;
  D.47113_13 = switch_core_perform_session_strdup (session_2(D), D.47112_12, "src/switch_core_media.c", &__func__, 484);
  D.47111_10->remote_sdp_ip = D.47113_13;
  D.47111_14 = a_engine_5->cur_payload_map;
  D.47114_15 = t38_options_11(D)->remote_port;
  D.47111_14->remote_sdp_port = D.47114_15;
  D.47117_16 = remote_host_7 != 0B;
  D.47118_17 = remote_port_9 != 0;
  D.47119_18 = D.47117_16 && D.47118_17;
  if (D.47119_18 != 0)
    goto <bb 7>;
  else
    goto <bb 10>;

<bb 7>:
  D.47111_19 = a_engine_5->cur_payload_map;
  D.47121_20 = D.47111_19->remote_sdp_ip;
  D.38429_21 = __builtin_strcmp (remote_host_7, D.47121_20);
  if (D.38429_21 == 0)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  D.47111_22 = a_engine_5->cur_payload_map;
  D.47123_23 = D.47111_22->remote_sdp_port;
  if (D.47123_23 == remote_port_9)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.47125_24 = session_2(D)->channel;
  D.47126_25 = switch_channel_get_name (D.47125_24);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 489, session_2(D), 7, "Audio params are unchanged for %s.\n", D.47126_25);
  goto <bb 12>;

<bb 10>:
  err = 0B;
  D.47125_26 = session_2(D)->channel;
  D.47127_27 = switch_channel_get_name (D.47125_26);
  D.47128_28 = (int) remote_port_9;
  D.47111_29 = a_engine_5->cur_payload_map;
  D.47121_30 = D.47111_29->remote_sdp_ip;
  D.47111_31 = a_engine_5->cur_payload_map;
  D.47123_32 = D.47111_31->remote_sdp_port;
  D.47129_33 = (int) D.47123_32;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 495, session_2(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.47127_27, remote_host_7, D.47128_28, D.47121_30, D.47129_33);
  D.47111_34 = a_engine_5->cur_payload_map;
  D.47123_35 = D.47111_34->remote_sdp_port;
  D.47129_36 = (int) D.47123_35;
  switch_snprintf (&tmp, 32, "%d", D.47129_36);
  D.47125_37 = session_2(D)->channel;
  D.47111_38 = a_engine_5->cur_payload_map;
  D.47121_39 = D.47111_38->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.47125_37, "remote_media_ip", D.47121_39, 1);
  D.47125_40 = session_2(D)->channel;
  switch_channel_set_variable_var_check (D.47125_40, "remote_media_port", &tmp, 1);
  D.47110_41 = a_engine_5->rtp_session;
  D.47111_42 = a_engine_5->cur_payload_map;
  D.47121_43 = D.47111_42->remote_sdp_ip;
  D.47111_44 = a_engine_5->cur_payload_map;
  D.47123_45 = D.47111_44->remote_sdp_port;
  D.47130_46 = switch_rtp_set_remote_address (D.47110_41, D.47121_43, D.47123_45, 0, 1, &err);
  if (D.47130_46 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  err.171_47 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 505, session_2(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.171_47);
  D.47125_48 = session_2(D)->channel;
  switch_channel_perform_hangup (D.47125_48, "src/switch_core_media.c", &__func__, 506, 88);

<bb 12>:
  switch_core_media_copy_t38_options (t38_options_11(D), other_session_49(D));
  D.47109_50 = 0;

<bb 13>:
  # D.47109_1 = PHI <D.47109_4(5), D.47109_50(12)>
  return D.47109_1;

}



;; Function switch_core_media_get_offered_pt (switch_core_media_get_offered_pt)



Renaming block #0



Renaming block #2

Renaming statement i = 0;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement if (mimp == 0B)



Renaming block #7

Renaming statement i = 0;



Renaming block #12

Renaming statement D.46054 = smh->mparams;

Renaming statement D.46055 = D.46054->num_codecs;

Renaming statement if (D.46055 > i)



Renaming block #8

Renaming statement imp = smh->codecs[i];

Renaming statement D.46044 = imp->iananame;

Renaming statement D.46045 = mimp->iananame;

Renaming statement D.46046 = strcasecmp (D.46044, D.46045);

Renaming statement if (D.46046 == 0)



Renaming block #9

Renaming statement D.46049 = imp->actual_samples_per_second;

Renaming statement D.46050 = mimp->actual_samples_per_second;

Renaming statement if (D.46049 == D.46050)



Renaming block #10

Renaming statement D.46053 = smh->ianacodes[i];

Renaming statement *pt = D.46053;

Renaming statement D.46043 = 0;



Renaming block #11

Renaming statement i = i + 1;



Renaming block #13

Renaming statement D.46043 = 1;



Renaming block #6

Renaming statement D.46043 = 1;



Renaming block #14

Renaming statement return D.46043;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 2081, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_5 = session_4(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #7



Registering new PHI nodes in block #12

Updating SSA information for statement D.46054_8 = smh_5->mparams;

Updating SSA information for statement D.46055_9 = D.46054_8->num_codecs;



Registering new PHI nodes in block #8

Updating SSA information for statement imp_10 = smh_5->codecs[i_1];

Updating SSA information for statement D.46044_11 = imp_10->iananame;

Updating SSA information for statement D.46045_12 = mimp_6(D)->iananame;

Updating SSA information for statement D.46046_13 = strcasecmp (D.46044_11, D.46045_12);



Registering new PHI nodes in block #9

Updating SSA information for statement D.46049_14 = imp_10->actual_samples_per_second;

Updating SSA information for statement D.46050_15 = mimp_6(D)->actual_samples_per_second;



Registering new PHI nodes in block #10

Updating SSA information for statement D.46053_16 = smh_5->ianacodes[i_1];

Updating SSA information for statement *pt_17(D) = D.46053_16;



Registering new PHI nodes in block #11



Registering new PHI nodes in block #13



Registering new PHI nodes in block #6



Registering new PHI nodes in block #14



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 15
Number of blocks to update: 14 ( 93%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 


Scope blocks after cleanups:

{ Scope block #0 
  int i;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_get_offered_pt";

  { Scope block #0 
    const struct switch_codec_implementation_t * imp;

  }

}
switch_core_media_get_offered_pt (struct switch_core_session_t * session, const struct switch_codec_implementation_t * mimp, switch_payload_t * pt)
{
  const struct switch_codec_implementation_t * imp;
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_get_offered_pt";
  struct switch_media_handle_t * smh;
  int i;
  int D.46055;
  struct switch_core_media_params_t * D.46054;
  switch_payload_t D.46053;
  const uint32_t D.46050;
  const uint32_t D.46049;
  int D.46046;
  char * const D.46045;
  char * const D.46044;
  switch_status_t D.46043;

<bb 2>:
  i_3 = 0;
  # DEBUG i => i_3
  if (session_4(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2081, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_5 = session_4(D)->media_handle;
  # DEBUG smh => smh_5
  if (smh_5 == 0B)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  if (mimp_6(D) == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.46043_21 = 1;
  goto <bb 14>;

<bb 7>:
  i_7 = 0;
  # DEBUG i => i_7
  goto <bb 12>;

<bb 8>:
  imp_10 = smh_5->codecs[i_1];
  # DEBUG imp => imp_10
  D.46044_11 = imp_10->iananame;
  D.46045_12 = mimp_6(D)->iananame;
  D.46046_13 = strcasecmp (D.46044_11, D.46045_12);
  if (D.46046_13 == 0)
    goto <bb 9>;
  else
    goto <bb 11>;

<bb 9>:
  D.46049_14 = imp_10->actual_samples_per_second;
  D.46050_15 = mimp_6(D)->actual_samples_per_second;
  if (D.46049_14 == D.46050_15)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.46053_16 = smh_5->ianacodes[i_1];
  *pt_17(D) = D.46053_16;
  D.46043_18 = 0;
  goto <bb 14>;

<bb 11>:
  i_19 = i_1 + 1;
  # DEBUG i => i_19

<bb 12>:
  # i_1 = PHI <i_7(7), i_19(11)>
  # DEBUG i => i_1
  D.46054_8 = smh_5->mparams;
  D.46055_9 = D.46054_8->num_codecs;
  if (D.46055_9 > i_1)
    goto <bb 8>;
  else
    goto <bb 13>;

<bb 13>:
  D.46043_20 = 1;

<bb 14>:
  # D.46043_2 = PHI <D.46043_21(6), D.46043_18(10), D.46043_20(13)>
  return D.46043_2;

}



;; Function switch_core_media_set_video_codec (switch_core_media_set_video_codec)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.45994 = 1;



Renaming block #6

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.45995 = v_engine->codec_negotiated;

Renaming statement if (D.45995 == 0)



Renaming block #7

Renaming statement D.45994 = 1;



Renaming block #8

Renaming statement D.45998 = v_engine->read_codec.implementation;

Renaming statement if (D.45998 != 0B)



Renaming block #9

Renaming statement D.46001 = &v_engine->read_codec;

Renaming statement D.46002 = switch_core_codec_ready (D.46001);

Renaming statement if (D.46002 != 0)



Renaming block #10

Renaming statement if (force == 0)



Renaming block #11

Renaming statement D.45994 = 0;



Renaming block #12

Renaming statement D.45998 = v_engine->read_codec.implementation;

Renaming statement D.46010 = D.45998->iananame;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46012 = D.46011->rm_encoding;

Renaming statement D.46013 = strcasecmp (D.46010, D.46012);

Renaming statement if (D.46013 != 0)



Renaming block #13

Renaming statement D.45998 = v_engine->read_codec.implementation;

Renaming statement D.46015 = D.45998->samples_per_second;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46016 = D.46011->rm_rate;

Renaming statement if (D.46015 != D.46016)



Renaming block #15

Renaming statement D.45998 = v_engine->read_codec.implementation;

Renaming statement D.46010 = D.45998->iananame;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2133, session, 7, "Already using %s\n", D.46010);

Renaming statement D.45994 = 0;



Renaming block #14

Renaming statement D.45998 = v_engine->read_codec.implementation;

Renaming statement D.46010 = D.45998->iananame;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46012 = D.46011->rm_encoding;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2128, session, 7, "Changing Codec from %s to %s\n", D.46010, D.46012);

Renaming statement D.46001 = &v_engine->read_codec;

Renaming statement switch_core_codec_destroy (D.46001);

Renaming statement D.46017 = &v_engine->write_codec;

Renaming statement switch_core_codec_destroy (D.46017);



Renaming block #16

Renaming statement D.46001 = &v_engine->read_codec;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46012 = D.46011->rm_encoding;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46018 = D.46011->rm_fmtp;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46016 = D.46011->rm_rate;

Renaming statement D.46019 = switch_core_session_get_pool (session);

Renaming statement D.46020 = switch_core_codec_init_with_bitrate (D.46001, D.46012, D.46018, D.46016, 0, 1, 0, 3, 0B, D.46019);

Renaming statement if (D.46020 != 0)



Renaming block #17

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2149, session, 3, "Can\'t load codec?\n");

Renaming statement D.45994 = 1;



Renaming block #18

Renaming statement D.46017 = &v_engine->write_codec;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46012 = D.46011->rm_encoding;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46018 = D.46011->rm_fmtp;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46016 = D.46011->rm_rate;

Renaming statement D.46023 = switch_core_session_get_pool (session);

Renaming statement D.46024 = switch_core_codec_init_with_bitrate (D.46017, D.46012, D.46018, D.46016, 0, 1, 0, 3, 0B, D.46023);

Renaming statement if (D.46024 != 0)



Renaming block #19

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2160, session, 3, "Can\'t load codec?\n");

Renaming statement D.45994 = 1;



Renaming block #20

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46016 = D.46011->rm_rate;

Renaming statement v_engine->read_frame.rate = D.46016;

Renaming statement D.46027 = session->channel;

Renaming statement D.46028 = switch_channel_get_name (D.46027);

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46012 = D.46011->rm_encoding;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46016 = D.46011->rm_rate;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46029 = D.46011->codec_ms;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2164, session, 7, "Set VIDEO Codec %s %s/%ld %d ms\n", D.46028, D.46012, D.46016, D.46029);

Renaming statement D.46001 = &v_engine->read_codec;

Renaming statement v_engine->read_frame.codec = D.46001;

Renaming statement D.46030 = v_engine->write_codec.fmtp_out;

Renaming statement D.46031 = switch_core_perform_session_strdup (session, D.46030, "src/switch_core_media.c", &__func__, 2169);

Renaming statement v_engine->write_codec.fmtp_out = D.46031;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46032 = D.46011->agreed_pt;

Renaming statement v_engine->write_codec.agreed_pt = D.46032;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46032 = D.46011->agreed_pt;

Renaming statement v_engine->read_codec.agreed_pt = D.46032;

Renaming statement D.46001 = &v_engine->read_codec;

Renaming statement switch_core_session_set_video_read_codec (session, D.46001);

Renaming statement D.46017 = &v_engine->write_codec;

Renaming statement switch_core_session_set_video_write_codec (session, D.46017);

Renaming statement D.46027 = session->channel;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46012 = D.46011->rm_encoding;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46016 = D.46011->rm_rate;

Renaming statement switch_channel_set_variable_printf (D.46027, "rtp_last_video_codec_string", "%s@%dh", D.46012, D.46016);

Renaming statement D.46033 = v_engine->rtp_session;

Renaming statement D.46034 = switch_rtp_ready (D.46033);

Renaming statement if (D.46034 != 0)



Renaming block #21

Renaming statement D.46033 = v_engine->rtp_session;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46032 = D.46011->agreed_pt;

Renaming statement switch_rtp_set_default_payload (D.46033, D.46032);

Renaming statement switch_core_session_perform_receive_message (session, &msg, "src/switch_core_media.c", &__func__, 2191);



Renaming block #22

Renaming statement D.46027 = session->channel;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46012 = D.46011->rm_encoding;

Renaming statement switch_channel_set_variable_var_check (D.46027, "rtp_use_video_codec_name", D.46012, 1);

Renaming statement D.46027 = session->channel;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46018 = D.46011->rm_fmtp;

Renaming statement switch_channel_set_variable_var_check (D.46027, "rtp_use_video_codec_fmtp", D.46018, 1);

Renaming statement D.46027 = session->channel;

Renaming statement D.46011 = v_engine->cur_payload_map;

Renaming statement D.46016 = D.46011->rm_rate;

Renaming statement switch_channel_set_variable_printf (D.46027, "rtp_use_video_codec_rate", "%d", D.46016);

Renaming statement D.46027 = session->channel;

Renaming statement switch_channel_set_variable_printf (D.46027, "rtp_use_video_codec_ptime", "%d", 0);

Renaming statement D.45994 = 0;



Renaming block #23

Renaming statement return D.45994;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 2109, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.45995_6 = v_engine_5->codec_negotiated;



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8

Updating SSA information for statement D.45998_8 = v_engine_5->read_codec.implementation;



Registering new PHI nodes in block #9

Updating SSA information for statement D.46002_10 = switch_core_codec_ready (D.46001_9);



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement D.45998_13 = v_engine_5->read_codec.implementation;

Updating SSA information for statement D.46010_14 = D.45998_13->iananame;

Updating SSA information for statement D.46011_15 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46012_16 = D.46011_15->rm_encoding;

Updating SSA information for statement D.46013_17 = strcasecmp (D.46010_14, D.46012_16);



Registering new PHI nodes in block #13

Updating SSA information for statement D.45998_18 = v_engine_5->read_codec.implementation;

Updating SSA information for statement D.46015_19 = D.45998_18->samples_per_second;

Updating SSA information for statement D.46011_20 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46016_21 = D.46011_20->rm_rate;



Registering new PHI nodes in block #15

Updating SSA information for statement D.45998_22 = v_engine_5->read_codec.implementation;

Updating SSA information for statement D.46010_23 = D.45998_22->iananame;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2133, session_2(D), 7, "Already using %s\n", D.46010_23);



Registering new PHI nodes in block #14

Updating SSA information for statement D.45998_25 = v_engine_5->read_codec.implementation;

Updating SSA information for statement D.46010_26 = D.45998_25->iananame;

Updating SSA information for statement D.46011_27 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46012_28 = D.46011_27->rm_encoding;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2128, session_2(D), 7, "Changing Codec from %s to %s\n", D.46010_26, D.46012_28);

Updating SSA information for statement switch_core_codec_destroy (D.46001_29);

Updating SSA information for statement switch_core_codec_destroy (D.46017_30);



Registering new PHI nodes in block #16

Updating SSA information for statement D.46011_32 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46012_33 = D.46011_32->rm_encoding;

Updating SSA information for statement D.46011_34 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46018_35 = D.46011_34->rm_fmtp;

Updating SSA information for statement D.46011_36 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46016_37 = D.46011_36->rm_rate;

Updating SSA information for statement D.46019_38 = switch_core_session_get_pool (session_2(D));

Updating SSA information for statement D.46020_39 = switch_core_codec_init_with_bitrate (D.46001_31, D.46012_33, D.46018_35, D.46016_37, 0, 1, 0, 3, 0B, D.46019_38);



Registering new PHI nodes in block #17

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2149, session_2(D), 3, "Can\'t load codec?\n");



Registering new PHI nodes in block #18

Updating SSA information for statement D.46011_42 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46012_43 = D.46011_42->rm_encoding;

Updating SSA information for statement D.46011_44 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46018_45 = D.46011_44->rm_fmtp;

Updating SSA information for statement D.46011_46 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46016_47 = D.46011_46->rm_rate;

Updating SSA information for statement D.46023_48 = switch_core_session_get_pool (session_2(D));

Updating SSA information for statement D.46024_49 = switch_core_codec_init_with_bitrate (D.46017_41, D.46012_43, D.46018_45, D.46016_47, 0, 1, 0, 3, 0B, D.46023_48);



Registering new PHI nodes in block #19

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2160, session_2(D), 3, "Can\'t load codec?\n");



Registering new PHI nodes in block #20

Updating SSA information for statement D.46011_51 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46016_52 = D.46011_51->rm_rate;

Updating SSA information for statement v_engine_5->read_frame.rate = D.46016_52;

Updating SSA information for statement D.46027_53 = session_2(D)->channel;

Updating SSA information for statement D.46028_54 = switch_channel_get_name (D.46027_53);

Updating SSA information for statement D.46011_55 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46012_56 = D.46011_55->rm_encoding;

Updating SSA information for statement D.46011_57 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46016_58 = D.46011_57->rm_rate;

Updating SSA information for statement D.46011_59 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46029_60 = D.46011_59->codec_ms;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2164, session_2(D), 7, "Set VIDEO Codec %s %s/%ld %d ms\n", D.46028_54, D.46012_56, D.46016_58, D.46029_60);

Updating SSA information for statement v_engine_5->read_frame.codec = D.46001_61;

Updating SSA information for statement D.46030_62 = v_engine_5->write_codec.fmtp_out;

Updating SSA information for statement D.46031_63 = switch_core_perform_session_strdup (session_2(D), D.46030_62, "src/switch_core_media.c", &__func__, 2169);

Updating SSA information for statement v_engine_5->write_codec.fmtp_out = D.46031_63;

Updating SSA information for statement D.46011_64 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46032_65 = D.46011_64->agreed_pt;

Updating SSA information for statement v_engine_5->write_codec.agreed_pt = D.46032_65;

Updating SSA information for statement D.46011_66 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46032_67 = D.46011_66->agreed_pt;

Updating SSA information for statement v_engine_5->read_codec.agreed_pt = D.46032_67;

Updating SSA information for statement switch_core_session_set_video_read_codec (session_2(D), D.46001_68);

Updating SSA information for statement switch_core_session_set_video_write_codec (session_2(D), D.46017_69);

Updating SSA information for statement D.46027_70 = session_2(D)->channel;

Updating SSA information for statement D.46011_71 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46012_72 = D.46011_71->rm_encoding;

Updating SSA information for statement D.46011_73 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46016_74 = D.46011_73->rm_rate;

Updating SSA information for statement switch_channel_set_variable_printf (D.46027_70, "rtp_last_video_codec_string", "%s@%dh", D.46012_72, D.46016_74);

Updating SSA information for statement D.46033_75 = v_engine_5->rtp_session;

Updating SSA information for statement D.46034_76 = switch_rtp_ready (D.46033_75);



Registering new PHI nodes in block #21

Updating SSA information for statement msg = {};

Updating SSA information for statement msg.from = "src/switch_core_media.c";

Updating SSA information for statement msg.message_id = 17;

Updating SSA information for statement D.46033_77 = v_engine_5->rtp_session;

Updating SSA information for statement D.46011_78 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46032_79 = D.46011_78->agreed_pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.46033_77, D.46032_79);

Updating SSA information for statement switch_core_session_perform_receive_message (session_2(D), &msg, "src/switch_core_media.c", &__func__, 2191);



Registering new PHI nodes in block #22

Updating SSA information for statement D.46027_80 = session_2(D)->channel;

Updating SSA information for statement D.46011_81 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46012_82 = D.46011_81->rm_encoding;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46027_80, "rtp_use_video_codec_name", D.46012_82, 1);

Updating SSA information for statement D.46027_83 = session_2(D)->channel;

Updating SSA information for statement D.46011_84 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46018_85 = D.46011_84->rm_fmtp;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46027_83, "rtp_use_video_codec_fmtp", D.46018_85, 1);

Updating SSA information for statement D.46027_86 = session_2(D)->channel;

Updating SSA information for statement D.46011_87 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46016_88 = D.46011_87->rm_rate;

Updating SSA information for statement switch_channel_set_variable_printf (D.46027_86, "rtp_use_video_codec_rate", "%d", D.46016_88);

Updating SSA information for statement D.46027_89 = session_2(D)->channel;

Updating SSA information for statement switch_channel_set_variable_printf (D.46027_89, "rtp_use_video_codec_ptime", "%d", 0);



Registering new PHI nodes in block #23



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 24
Number of blocks to update: 23 ( 96%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_set_video_codec";
  static const char __func__[34] = "switch_core_media_set_video_codec";

  { Scope block #0 
    struct switch_core_session_message_t msg;

  }

}
switch_core_media_set_video_codec (struct switch_core_session_t * session, int force)
{
  struct switch_core_session_message_t msg;
  static const char __func__[34] = "switch_core_media_set_video_codec";
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_set_video_codec";
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  uint8_t D.46034;
  struct switch_rtp_t * D.46033;
  switch_payload_t D.46032;
  char * D.46031;
  char * D.46030;
  uint32_t D.46029;
  char * D.46028;
  struct switch_channel_t * D.46027;
  switch_status_t D.46024;
  struct switch_memory_pool_t * D.46023;
  switch_status_t D.46020;
  struct switch_memory_pool_t * D.46019;
  char * D.46018;
  struct switch_codec_t * D.46017;
  long unsigned int D.46016;
  const uint32_t D.46015;
  int D.46013;
  char * D.46012;
  struct payload_map_t * D.46011;
  char * const D.46010;
  switch_bool_t D.46002;
  struct switch_codec_t * D.46001;
  const struct switch_codec_implementation_t * D.45998;
  uint8_t D.45995;
  switch_status_t D.45994;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2109, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.45994_4 = 1;
  goto <bb 23>;

<bb 6>:
  v_engine_5 = &smh_3->engines[1];
  # DEBUG v_engine => v_engine_5
  D.45995_6 = v_engine_5->codec_negotiated;
  if (D.45995_6 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.45994_7 = 1;
  goto <bb 23>;

<bb 8>:
  D.45998_8 = v_engine_5->read_codec.implementation;
  if (D.45998_8 != 0B)
    goto <bb 9>;
  else
    goto <bb 16>;

<bb 9>:
  D.46001_9 = &v_engine_5->read_codec;
  D.46002_10 = switch_core_codec_ready (D.46001_9);
  if (D.46002_10 != 0)
    goto <bb 10>;
  else
    goto <bb 16>;

<bb 10>:
  if (force_11(D) == 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.45994_12 = 0;
  goto <bb 23>;

<bb 12>:
  D.45998_13 = v_engine_5->read_codec.implementation;
  D.46010_14 = D.45998_13->iananame;
  D.46011_15 = v_engine_5->cur_payload_map;
  D.46012_16 = D.46011_15->rm_encoding;
  D.46013_17 = strcasecmp (D.46010_14, D.46012_16);
  if (D.46013_17 != 0)
    goto <bb 14>;
  else
    goto <bb 13>;

<bb 13>:
  D.45998_18 = v_engine_5->read_codec.implementation;
  D.46015_19 = D.45998_18->samples_per_second;
  D.46011_20 = v_engine_5->cur_payload_map;
  D.46016_21 = D.46011_20->rm_rate;
  if (D.46015_19 != D.46016_21)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.45998_25 = v_engine_5->read_codec.implementation;
  D.46010_26 = D.45998_25->iananame;
  D.46011_27 = v_engine_5->cur_payload_map;
  D.46012_28 = D.46011_27->rm_encoding;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2128, session_2(D), 7, "Changing Codec from %s to %s\n", D.46010_26, D.46012_28);
  D.46001_29 = &v_engine_5->read_codec;
  switch_core_codec_destroy (D.46001_29);
  D.46017_30 = &v_engine_5->write_codec;
  switch_core_codec_destroy (D.46017_30);
  goto <bb 16>;

<bb 15>:
  D.45998_22 = v_engine_5->read_codec.implementation;
  D.46010_23 = D.45998_22->iananame;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2133, session_2(D), 7, "Already using %s\n", D.46010_23);
  D.45994_24 = 0;
  goto <bb 23>;

<bb 16>:
  D.46001_31 = &v_engine_5->read_codec;
  D.46011_32 = v_engine_5->cur_payload_map;
  D.46012_33 = D.46011_32->rm_encoding;
  D.46011_34 = v_engine_5->cur_payload_map;
  D.46018_35 = D.46011_34->rm_fmtp;
  D.46011_36 = v_engine_5->cur_payload_map;
  D.46016_37 = D.46011_36->rm_rate;
  D.46019_38 = switch_core_session_get_pool (session_2(D));
  D.46020_39 = switch_core_codec_init_with_bitrate (D.46001_31, D.46012_33, D.46018_35, D.46016_37, 0, 1, 0, 3, 0B, D.46019_38);
  if (D.46020_39 != 0)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2149, session_2(D), 3, "Can\'t load codec?\n");
  D.45994_40 = 1;
  goto <bb 23>;

<bb 18>:
  D.46017_41 = &v_engine_5->write_codec;
  D.46011_42 = v_engine_5->cur_payload_map;
  D.46012_43 = D.46011_42->rm_encoding;
  D.46011_44 = v_engine_5->cur_payload_map;
  D.46018_45 = D.46011_44->rm_fmtp;
  D.46011_46 = v_engine_5->cur_payload_map;
  D.46016_47 = D.46011_46->rm_rate;
  D.46023_48 = switch_core_session_get_pool (session_2(D));
  D.46024_49 = switch_core_codec_init_with_bitrate (D.46017_41, D.46012_43, D.46018_45, D.46016_47, 0, 1, 0, 3, 0B, D.46023_48);
  if (D.46024_49 != 0)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2160, session_2(D), 3, "Can\'t load codec?\n");
  D.45994_50 = 1;
  goto <bb 23>;

<bb 20>:
  D.46011_51 = v_engine_5->cur_payload_map;
  D.46016_52 = D.46011_51->rm_rate;
  v_engine_5->read_frame.rate = D.46016_52;
  D.46027_53 = session_2(D)->channel;
  D.46028_54 = switch_channel_get_name (D.46027_53);
  D.46011_55 = v_engine_5->cur_payload_map;
  D.46012_56 = D.46011_55->rm_encoding;
  D.46011_57 = v_engine_5->cur_payload_map;
  D.46016_58 = D.46011_57->rm_rate;
  D.46011_59 = v_engine_5->cur_payload_map;
  D.46029_60 = D.46011_59->codec_ms;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2164, session_2(D), 7, "Set VIDEO Codec %s %s/%ld %d ms\n", D.46028_54, D.46012_56, D.46016_58, D.46029_60);
  D.46001_61 = &v_engine_5->read_codec;
  v_engine_5->read_frame.codec = D.46001_61;
  D.46030_62 = v_engine_5->write_codec.fmtp_out;
  D.46031_63 = switch_core_perform_session_strdup (session_2(D), D.46030_62, "src/switch_core_media.c", &__func__, 2169);
  v_engine_5->write_codec.fmtp_out = D.46031_63;
  D.46011_64 = v_engine_5->cur_payload_map;
  D.46032_65 = D.46011_64->agreed_pt;
  v_engine_5->write_codec.agreed_pt = D.46032_65;
  D.46011_66 = v_engine_5->cur_payload_map;
  D.46032_67 = D.46011_66->agreed_pt;
  v_engine_5->read_codec.agreed_pt = D.46032_67;
  D.46001_68 = &v_engine_5->read_codec;
  switch_core_session_set_video_read_codec (session_2(D), D.46001_68);
  D.46017_69 = &v_engine_5->write_codec;
  switch_core_session_set_video_write_codec (session_2(D), D.46017_69);
  D.46027_70 = session_2(D)->channel;
  D.46011_71 = v_engine_5->cur_payload_map;
  D.46012_72 = D.46011_71->rm_encoding;
  D.46011_73 = v_engine_5->cur_payload_map;
  D.46016_74 = D.46011_73->rm_rate;
  switch_channel_set_variable_printf (D.46027_70, "rtp_last_video_codec_string", "%s@%dh", D.46012_72, D.46016_74);
  D.46033_75 = v_engine_5->rtp_session;
  D.46034_76 = switch_rtp_ready (D.46033_75);
  if (D.46034_76 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  msg = {};
  msg.from = "src/switch_core_media.c";
  msg.message_id = 17;
  D.46033_77 = v_engine_5->rtp_session;
  D.46011_78 = v_engine_5->cur_payload_map;
  D.46032_79 = D.46011_78->agreed_pt;
  switch_rtp_set_default_payload (D.46033_77, D.46032_79);
  switch_core_session_perform_receive_message (session_2(D), &msg, "src/switch_core_media.c", &__func__, 2191);

<bb 22>:
  D.46027_80 = session_2(D)->channel;
  D.46011_81 = v_engine_5->cur_payload_map;
  D.46012_82 = D.46011_81->rm_encoding;
  switch_channel_set_variable_var_check (D.46027_80, "rtp_use_video_codec_name", D.46012_82, 1);
  D.46027_83 = session_2(D)->channel;
  D.46011_84 = v_engine_5->cur_payload_map;
  D.46018_85 = D.46011_84->rm_fmtp;
  switch_channel_set_variable_var_check (D.46027_83, "rtp_use_video_codec_fmtp", D.46018_85, 1);
  D.46027_86 = session_2(D)->channel;
  D.46011_87 = v_engine_5->cur_payload_map;
  D.46016_88 = D.46011_87->rm_rate;
  switch_channel_set_variable_printf (D.46027_86, "rtp_use_video_codec_rate", "%d", D.46016_88);
  D.46027_89 = session_2(D)->channel;
  switch_channel_set_variable_printf (D.46027_89, "rtp_use_video_codec_ptime", "%d", 0);
  D.45994_90 = 0;

<bb 23>:
  # D.45994_1 = PHI <D.45994_4(5), D.45994_7(7), D.45994_12(11), D.45994_24(15), D.45994_40(17), D.45994_50(19), D.45994_90(22)>
  return D.45994_1;

}



;; Function switch_core_media_set_codec (switch_core_media_set_codec)



Renaming block #0



Renaming block #2

Renaming statement status = 0;

Renaming statement resetting = 0;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.45906 = 1;



Renaming block #6

Renaming statement a_engine = &smh->engines;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45908 = D.45907->iananame;

Renaming statement if (D.45908 == 0B)



Renaming block #7

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2223, session, 7, "No audio codec available\n");

Renaming statement status = 1;



Renaming block #8

Renaming statement D.45911 = &a_engine->read_codec;

Renaming statement D.45912 = switch_core_codec_ready (D.45911);

Renaming statement if (D.45912 != 0)



Renaming block #9

Renaming statement if (force == 0)



Renaming block #10

Renaming statement status = 0;



Renaming block #11

Renaming statement D.45920 = a_engine->read_impl.iananame;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45908 = D.45907->iananame;

Renaming statement D.45921 = strcasecmp (D.45920, D.45908);

Renaming statement if (D.45921 != 0)



Renaming block #12

Renaming statement D.45923 = a_engine->read_impl.microseconds_per_packet;

Renaming statement D.45924 = (unsigned int) D.45923;

Renaming statement D.45925 = D.45924 / 1000;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45926 = D.45907->codec_ms;

Renaming statement if (D.45925 != D.45926)



Renaming block #13

Renaming statement D.45928 = a_engine->read_impl.samples_per_second;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45929 = D.45907->rm_rate;

Renaming statement if (D.45928 != D.45929)



Renaming block #19

Renaming statement D.45920 = a_engine->read_impl.iananame;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2271, session, 7, "Already using %s\n", D.45920);

Renaming statement status = 0;



Renaming block #14

Renaming statement D.45930 = session->read_resampler;

Renaming statement if (D.45930 != 0B)



Renaming block #15

Renaming statement D.45933 = session->resample_mutex;

Renaming statement switch_mutex_lock (D.45933);

Renaming statement D.45934 = &session->read_resampler;

Renaming statement switch_resample_destroy (D.45934);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2238, session, 5, "Deactivating read resampler\n");

Renaming statement D.45933 = session->resample_mutex;

Renaming statement switch_mutex_unlock (D.45933);



Renaming block #16

Renaming statement D.45935 = session->write_resampler;

Renaming statement if (D.45935 != 0B)



Renaming block #17

Renaming statement D.45933 = session->resample_mutex;

Renaming statement switch_mutex_lock (D.45933);

Renaming statement D.45938 = &session->write_resampler;

Renaming statement switch_resample_destroy (D.45938);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2245, session, 5, "Deactivating write resampler\n");

Renaming statement D.45933 = session->resample_mutex;

Renaming statement switch_mutex_unlock (D.45933);



Renaming block #18

Renaming statement switch_core_session_reset (session, 0, 0);

Renaming statement D.45939 = session->channel;

Renaming statement switch_channel_perform_audio_sync (D.45939, "src/switch_core_media.c", &__func__, 2250);

Renaming statement D.45920 = a_engine->read_impl.iananame;

Renaming statement D.45923 = a_engine->read_impl.microseconds_per_packet;

Renaming statement D.45940 = D.45923 / 1000;

Renaming statement D.45928 = a_engine->read_impl.samples_per_second;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45908 = D.45907->iananame;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45926 = D.45907->codec_ms;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45929 = D.45907->rm_rate;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2252, session, 7, "Changing Codec from %s@%dms@%dhz to %s@%dms@%luhz\n", D.45920, D.45940, D.45928, D.45908, D.45926, D.45929);

Renaming statement D.45923 = a_engine->read_impl.microseconds_per_packet;

Renaming statement D.45941 = (switch_interval_time_t) D.45923;

Renaming statement switch_sleep (D.45941);

Renaming statement switch_core_session_lock_codec_write (session);

Renaming statement switch_core_session_lock_codec_read (session);

Renaming statement resetting = 1;

Renaming statement D.45923 = a_engine->read_impl.microseconds_per_packet;

Renaming statement D.45941 = (switch_interval_time_t) D.45923;

Renaming statement switch_sleep (D.45941);

Renaming statement D.45911 = &a_engine->read_codec;

Renaming statement switch_core_codec_destroy (D.45911);

Renaming statement D.45942 = &a_engine->write_codec;

Renaming statement switch_core_codec_destroy (D.45942);

Renaming statement D.45939 = session->channel;

Renaming statement switch_channel_perform_audio_sync (D.45939, "src/switch_core_media.c", &__func__, 2269);



Renaming block #20

Renaming statement D.45911 = &a_engine->read_codec;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45908 = D.45907->iananame;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45943 = D.45907->rm_fmtp;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45929 = D.45907->rm_rate;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45926 = D.45907->codec_ms;

Renaming statement D.45944 = (int) D.45926;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45945 = D.45907->channels;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45946 = D.45907->bitrate;

Renaming statement D.45947 = codec_flags | 3;

Renaming statement D.45948 = switch_core_session_get_pool (session);

Renaming statement D.45949 = switch_core_codec_init_with_bitrate (D.45911, D.45908, D.45943, D.45929, D.45944, D.45945, D.45946, D.45947, 0B, D.45948);

Renaming statement if (D.45949 != 0)



Renaming block #21

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2285, session, 3, "Can\'t load codec?\n");

Renaming statement D.45939 = session->channel;

Renaming statement switch_channel_perform_hangup (D.45939, "src/switch_core_media.c", &__func__, 2286, 88);

Renaming statement status = 1;



Renaming block #22

Renaming statement a_engine->read_codec.session = session;

Renaming statement D.45942 = &a_engine->write_codec;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45908 = D.45907->iananame;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45943 = D.45907->rm_fmtp;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45929 = D.45907->rm_rate;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45926 = D.45907->codec_ms;

Renaming statement D.45944 = (int) D.45926;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45945 = D.45907->channels;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45946 = D.45907->bitrate;

Renaming statement D.45947 = codec_flags | 3;

Renaming statement D.45952 = switch_core_session_get_pool (session);

Renaming statement D.45953 = switch_core_codec_init_with_bitrate (D.45942, D.45908, D.45943, D.45929, D.45944, D.45945, D.45946, D.45947, 0B, D.45952);

Renaming statement if (D.45953 != 0)



Renaming block #23

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2302, session, 3, "Can\'t load codec?\n");

Renaming statement D.45939 = session->channel;

Renaming statement switch_channel_perform_hangup (D.45939, "src/switch_core_media.c", &__func__, 2303, 88);

Renaming statement status = 1;



Renaming block #24

Renaming statement a_engine->write_codec.session = session;

Renaming statement D.45939 = session->channel;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45908 = D.45907->iananame;

Renaming statement switch_channel_set_variable_var_check (D.45939, "rtp_use_codec_name", D.45908, 1);

Renaming statement D.45939 = session->channel;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45943 = D.45907->rm_fmtp;

Renaming statement switch_channel_set_variable_var_check (D.45939, "rtp_use_codec_fmtp", D.45943, 1);

Renaming statement D.45939 = session->channel;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45929 = D.45907->rm_rate;

Renaming statement switch_channel_set_variable_printf (D.45939, "rtp_use_codec_rate", "%d", D.45929);

Renaming statement D.45939 = session->channel;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45926 = D.45907->codec_ms;

Renaming statement switch_channel_set_variable_printf (D.45939, "rtp_use_codec_ptime", "%d", D.45926);

Renaming statement D.45939 = session->channel;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45908 = D.45907->iananame;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45929 = D.45907->rm_rate;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45926 = D.45907->codec_ms;

Renaming statement switch_channel_set_variable_printf (D.45939, "rtp_last_audio_codec_string", "%s@%dh@%di", D.45908, D.45929, D.45926);

Renaming statement D.45956 = a_engine->read_codec.implementation;

Renaming statement if (D.45956 == 0B)



Renaming block #25



Renaming block #26

Renaming statement D.45959 = a_engine->write_codec.implementation;

Renaming statement if (D.45959 == 0B)



Renaming block #27



Renaming block #28

Renaming statement D.45956 = a_engine->read_codec.implementation;

Renaming statement a_engine->read_impl = *D.45956;

Renaming statement D.45959 = a_engine->write_codec.implementation;

Renaming statement a_engine->write_impl = *D.45959;

Renaming statement D.45956 = a_engine->read_codec.implementation;

Renaming statement switch_core_session_set_read_impl (session, D.45956);

Renaming statement D.45959 = a_engine->write_codec.implementation;

Renaming statement switch_core_session_set_write_impl (session, D.45959);

Renaming statement D.45962 = a_engine->rtp_session;

Renaming statement D.45963 = switch_rtp_ready (D.45962);

Renaming statement if (D.45963 != 0)



Renaming block #29

Renaming statement D.45956 = a_engine->read_codec.implementation;

Renaming statement if (D.45956 == 0B)



Renaming block #30



Renaming block #31

Renaming statement D.45962 = a_engine->rtp_session;

Renaming statement D.45923 = a_engine->read_impl.microseconds_per_packet;

Renaming statement D.45968 = (uint32_t) D.45923;

Renaming statement D.45969 = a_engine->read_impl.samples_per_packet;

Renaming statement D.45970 = switch_rtp_change_interval (D.45962, D.45968, D.45969);

Renaming statement if (D.45970 != 0)



Renaming block #32

Renaming statement D.45939 = session->channel;

Renaming statement switch_channel_perform_hangup (D.45939, "src/switch_core_media.c", &__func__, 2331, 27);

Renaming statement status = 1;



Renaming block #33

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45929 = D.45907->rm_rate;

Renaming statement a_engine->read_frame.rate = D.45929;

Renaming statement D.45911 = &a_engine->read_codec;

Renaming statement D.45973 = switch_core_codec_ready (D.45911);

Renaming statement if (D.45973 == 0)



Renaming block #34

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2339, session, 3, "Can\'t load codec?\n");

Renaming statement status = 1;



Renaming block #35

Renaming statement D.45939 = session->channel;

Renaming statement D.45976 = switch_channel_get_name (D.45939);

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45908 = D.45907->iananame;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45929 = D.45907->rm_rate;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45926 = D.45907->codec_ms;

Renaming statement D.45969 = a_engine->read_impl.samples_per_packet;

Renaming statement D.45977 = a_engine->read_impl.bits_per_second;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2343, session, 7, "Set Codec %s %s/%ld %d ms %d samples %d bits\n", D.45976, D.45908, D.45929, D.45926, D.45969, D.45977);

Renaming statement D.45911 = &a_engine->read_codec;

Renaming statement a_engine->read_frame.codec = D.45911;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45978 = D.45907->agreed_pt;

Renaming statement a_engine->write_codec.agreed_pt = D.45978;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45978 = D.45907->agreed_pt;

Renaming statement a_engine->read_codec.agreed_pt = D.45978;

Renaming statement if (force != 2)



Renaming block #36

Renaming statement D.45911 = &a_engine->read_codec;

Renaming statement switch_core_session_set_real_read_codec (session, D.45911);

Renaming statement D.45942 = &a_engine->write_codec;

Renaming statement switch_core_session_set_write_codec (session, D.45942);



Renaming block #37

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45981 = a_engine->write_codec.fmtp_out;

Renaming statement D.45982 = switch_core_perform_session_strdup (session, D.45981, "src/switch_core_media.c", &__func__, 2357);

Renaming statement D.45907->fmtp_out = D.45982;

Renaming statement D.45962 = a_engine->rtp_session;

Renaming statement D.45983 = switch_rtp_ready (D.45962);

Renaming statement if (D.45983 != 0)



Renaming block #38

Renaming statement D.45962 = a_engine->rtp_session;

Renaming statement D.45907 = a_engine->cur_payload_map;

Renaming statement D.45986 = D.45907->pt;

Renaming statement switch_rtp_set_default_payload (D.45962, D.45986);



Renaming block #39

Renaming statement if (resetting != 0)



Renaming block #40

Renaming statement switch_core_session_unlock_codec_write (session);

Renaming statement switch_core_session_unlock_codec_read (session);



Renaming block #41

Renaming statement D.45906 = status;



Renaming block #42

Renaming statement return D.45906;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 2215, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_8 = session_7(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.45907_11 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45908_12 = D.45907_11->iananame;



Registering new PHI nodes in block #7

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2223, session_7(D), 7, "No audio codec available\n");



Registering new PHI nodes in block #8

Updating SSA information for statement D.45912_15 = switch_core_codec_ready (D.45911_14);



Registering new PHI nodes in block #9



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11

Updating SSA information for statement D.45920_18 = a_engine_10->read_impl.iananame;

Updating SSA information for statement D.45907_19 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45908_20 = D.45907_19->iananame;

Updating SSA information for statement D.45921_21 = strcasecmp (D.45920_18, D.45908_20);



Registering new PHI nodes in block #12

Updating SSA information for statement D.45923_22 = a_engine_10->read_impl.microseconds_per_packet;

Updating SSA information for statement D.45907_25 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45926_26 = D.45907_25->codec_ms;



Registering new PHI nodes in block #13

Updating SSA information for statement D.45928_27 = a_engine_10->read_impl.samples_per_second;

Updating SSA information for statement D.45907_28 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45929_29 = D.45907_28->rm_rate;



Registering new PHI nodes in block #19

Updating SSA information for statement D.45920_30 = a_engine_10->read_impl.iananame;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2271, session_7(D), 7, "Already using %s\n", D.45920_30);



Registering new PHI nodes in block #14

Updating SSA information for statement D.45930_32 = session_7(D)->read_resampler;



Registering new PHI nodes in block #15

Updating SSA information for statement D.45933_33 = session_7(D)->resample_mutex;

Updating SSA information for statement switch_mutex_lock (D.45933_33);

Updating SSA information for statement switch_resample_destroy (D.45934_34);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2238, session_7(D), 5, "Deactivating read resampler\n");

Updating SSA information for statement D.45933_35 = session_7(D)->resample_mutex;

Updating SSA information for statement switch_mutex_unlock (D.45933_35);



Registering new PHI nodes in block #16

Updating SSA information for statement D.45935_36 = session_7(D)->write_resampler;



Registering new PHI nodes in block #17

Updating SSA information for statement D.45933_37 = session_7(D)->resample_mutex;

Updating SSA information for statement switch_mutex_lock (D.45933_37);

Updating SSA information for statement switch_resample_destroy (D.45938_38);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2245, session_7(D), 5, "Deactivating write resampler\n");

Updating SSA information for statement D.45933_39 = session_7(D)->resample_mutex;

Updating SSA information for statement switch_mutex_unlock (D.45933_39);



Registering new PHI nodes in block #18

Updating SSA information for statement switch_core_session_reset (session_7(D), 0, 0);

Updating SSA information for statement D.45939_40 = session_7(D)->channel;

Updating SSA information for statement switch_channel_perform_audio_sync (D.45939_40, "src/switch_core_media.c", &__func__, 2250);

Updating SSA information for statement D.45920_41 = a_engine_10->read_impl.iananame;

Updating SSA information for statement D.45923_42 = a_engine_10->read_impl.microseconds_per_packet;

Updating SSA information for statement D.45928_44 = a_engine_10->read_impl.samples_per_second;

Updating SSA information for statement D.45907_45 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45908_46 = D.45907_45->iananame;

Updating SSA information for statement D.45907_47 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45926_48 = D.45907_47->codec_ms;

Updating SSA information for statement D.45907_49 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45929_50 = D.45907_49->rm_rate;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2252, session_7(D), 7, "Changing Codec from %s@%dms@%dhz to %s@%dms@%luhz\n", D.45920_41, D.45940_43, D.45928_44, D.45908_46, D.45926_48, D.45929_50);

Updating SSA information for statement D.45923_51 = a_engine_10->read_impl.microseconds_per_packet;

Updating SSA information for statement switch_sleep (D.45941_52);

Updating SSA information for statement switch_core_session_lock_codec_write (session_7(D));

Updating SSA information for statement switch_core_session_lock_codec_read (session_7(D));

Updating SSA information for statement D.45923_54 = a_engine_10->read_impl.microseconds_per_packet;

Updating SSA information for statement switch_sleep (D.45941_55);

Updating SSA information for statement switch_core_codec_destroy (D.45911_56);

Updating SSA information for statement switch_core_codec_destroy (D.45942_57);

Updating SSA information for statement D.45939_58 = session_7(D)->channel;

Updating SSA information for statement switch_channel_perform_audio_sync (D.45939_58, "src/switch_core_media.c", &__func__, 2269);



Registering new PHI nodes in block #20

Updating SSA information for statement D.45907_60 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45908_61 = D.45907_60->iananame;

Updating SSA information for statement D.45907_62 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45943_63 = D.45907_62->rm_fmtp;

Updating SSA information for statement D.45907_64 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45929_65 = D.45907_64->rm_rate;

Updating SSA information for statement D.45907_66 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45926_67 = D.45907_66->codec_ms;

Updating SSA information for statement D.45907_69 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45945_70 = D.45907_69->channels;

Updating SSA information for statement D.45907_71 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45946_72 = D.45907_71->bitrate;

Updating SSA information for statement D.45948_75 = switch_core_session_get_pool (session_7(D));

Updating SSA information for statement D.45949_76 = switch_core_codec_init_with_bitrate (D.45911_59, D.45908_61, D.45943_63, D.45929_65, D.45944_68, D.45945_70, D.45946_72, D.45947_74, 0B, D.45948_75);



Registering new PHI nodes in block #21

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2285, session_7(D), 3, "Can\'t load codec?\n");

Updating SSA information for statement D.45939_77 = session_7(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.45939_77, "src/switch_core_media.c", &__func__, 2286, 88);



Registering new PHI nodes in block #22

Updating SSA information for statement a_engine_10->read_codec.session = session_7(D);

Updating SSA information for statement D.45907_80 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45908_81 = D.45907_80->iananame;

Updating SSA information for statement D.45907_82 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45943_83 = D.45907_82->rm_fmtp;

Updating SSA information for statement D.45907_84 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45929_85 = D.45907_84->rm_rate;

Updating SSA information for statement D.45907_86 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45926_87 = D.45907_86->codec_ms;

Updating SSA information for statement D.45907_89 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45945_90 = D.45907_89->channels;

Updating SSA information for statement D.45907_91 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45946_92 = D.45907_91->bitrate;

Updating SSA information for statement D.45952_94 = switch_core_session_get_pool (session_7(D));

Updating SSA information for statement D.45953_95 = switch_core_codec_init_with_bitrate (D.45942_79, D.45908_81, D.45943_83, D.45929_85, D.45944_88, D.45945_90, D.45946_92, D.45947_93, 0B, D.45952_94);



Registering new PHI nodes in block #23

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2302, session_7(D), 3, "Can\'t load codec?\n");

Updating SSA information for statement D.45939_96 = session_7(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.45939_96, "src/switch_core_media.c", &__func__, 2303, 88);



Registering new PHI nodes in block #24

Updating SSA information for statement a_engine_10->write_codec.session = session_7(D);

Updating SSA information for statement D.45939_98 = session_7(D)->channel;

Updating SSA information for statement D.45907_99 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45908_100 = D.45907_99->iananame;

Updating SSA information for statement switch_channel_set_variable_var_check (D.45939_98, "rtp_use_codec_name", D.45908_100, 1);

Updating SSA information for statement D.45939_101 = session_7(D)->channel;

Updating SSA information for statement D.45907_102 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45943_103 = D.45907_102->rm_fmtp;

Updating SSA information for statement switch_channel_set_variable_var_check (D.45939_101, "rtp_use_codec_fmtp", D.45943_103, 1);

Updating SSA information for statement D.45939_104 = session_7(D)->channel;

Updating SSA information for statement D.45907_105 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45929_106 = D.45907_105->rm_rate;

Updating SSA information for statement switch_channel_set_variable_printf (D.45939_104, "rtp_use_codec_rate", "%d", D.45929_106);

Updating SSA information for statement D.45939_107 = session_7(D)->channel;

Updating SSA information for statement D.45907_108 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45926_109 = D.45907_108->codec_ms;

Updating SSA information for statement switch_channel_set_variable_printf (D.45939_107, "rtp_use_codec_ptime", "%d", D.45926_109);

Updating SSA information for statement D.45939_110 = session_7(D)->channel;

Updating SSA information for statement D.45907_111 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45908_112 = D.45907_111->iananame;

Updating SSA information for statement D.45907_113 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45929_114 = D.45907_113->rm_rate;

Updating SSA information for statement D.45907_115 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45926_116 = D.45907_115->codec_ms;

Updating SSA information for statement switch_channel_set_variable_printf (D.45939_110, "rtp_last_audio_codec_string", "%s@%dh@%di", D.45908_112, D.45929_114, D.45926_116);

Updating SSA information for statement D.45956_117 = a_engine_10->read_codec.implementation;



Registering new PHI nodes in block #25

Updating SSA information for statement __assert_fail ("a_engine->read_codec.implementation", "src/switch_core_media.c", 2316, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #26

Updating SSA information for statement D.45959_118 = a_engine_10->write_codec.implementation;



Registering new PHI nodes in block #27

Updating SSA information for statement __assert_fail ("a_engine->write_codec.implementation", "src/switch_core_media.c", 2317, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #28

Updating SSA information for statement D.45956_119 = a_engine_10->read_codec.implementation;

Updating SSA information for statement a_engine_10->read_impl = *D.45956_119;

Updating SSA information for statement D.45959_120 = a_engine_10->write_codec.implementation;

Updating SSA information for statement a_engine_10->write_impl = *D.45959_120;

Updating SSA information for statement D.45956_121 = a_engine_10->read_codec.implementation;

Updating SSA information for statement switch_core_session_set_read_impl (session_7(D), D.45956_121);

Updating SSA information for statement D.45959_122 = a_engine_10->write_codec.implementation;

Updating SSA information for statement switch_core_session_set_write_impl (session_7(D), D.45959_122);

Updating SSA information for statement D.45962_123 = a_engine_10->rtp_session;

Updating SSA information for statement D.45963_124 = switch_rtp_ready (D.45962_123);



Registering new PHI nodes in block #29

Updating SSA information for statement D.45956_125 = a_engine_10->read_codec.implementation;



Registering new PHI nodes in block #30

Updating SSA information for statement __assert_fail ("a_engine->read_codec.implementation", "src/switch_core_media.c", 2326, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #31

Updating SSA information for statement D.45962_126 = a_engine_10->rtp_session;

Updating SSA information for statement D.45923_127 = a_engine_10->read_impl.microseconds_per_packet;

Updating SSA information for statement D.45969_129 = a_engine_10->read_impl.samples_per_packet;

Updating SSA information for statement D.45970_130 = switch_rtp_change_interval (D.45962_126, D.45968_128, D.45969_129);



Registering new PHI nodes in block #32

Updating SSA information for statement D.45939_131 = session_7(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.45939_131, "src/switch_core_media.c", &__func__, 2331, 27);



Registering new PHI nodes in block #33

Updating SSA information for statement D.45907_133 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45929_134 = D.45907_133->rm_rate;

Updating SSA information for statement a_engine_10->read_frame.rate = D.45929_134;

Updating SSA information for statement D.45973_136 = switch_core_codec_ready (D.45911_135);



Registering new PHI nodes in block #34

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2339, session_7(D), 3, "Can\'t load codec?\n");



Registering new PHI nodes in block #35

Updating SSA information for statement D.45939_138 = session_7(D)->channel;

Updating SSA information for statement D.45976_139 = switch_channel_get_name (D.45939_138);

Updating SSA information for statement D.45907_140 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45908_141 = D.45907_140->iananame;

Updating SSA information for statement D.45907_142 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45929_143 = D.45907_142->rm_rate;

Updating SSA information for statement D.45907_144 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45926_145 = D.45907_144->codec_ms;

Updating SSA information for statement D.45969_146 = a_engine_10->read_impl.samples_per_packet;

Updating SSA information for statement D.45977_147 = a_engine_10->read_impl.bits_per_second;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2343, session_7(D), 7, "Set Codec %s %s/%ld %d ms %d samples %d bits\n", D.45976_139, D.45908_141, D.45929_143, D.45926_145, D.45969_146, D.45977_147);

Updating SSA information for statement a_engine_10->read_frame.codec = D.45911_148;

Updating SSA information for statement D.45907_149 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45978_150 = D.45907_149->agreed_pt;

Updating SSA information for statement a_engine_10->write_codec.agreed_pt = D.45978_150;

Updating SSA information for statement D.45907_151 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45978_152 = D.45907_151->agreed_pt;

Updating SSA information for statement a_engine_10->read_codec.agreed_pt = D.45978_152;



Registering new PHI nodes in block #36

Updating SSA information for statement switch_core_session_set_real_read_codec (session_7(D), D.45911_153);

Updating SSA information for statement switch_core_session_set_write_codec (session_7(D), D.45942_154);



Registering new PHI nodes in block #37

Updating SSA information for statement D.45907_155 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45981_156 = a_engine_10->write_codec.fmtp_out;

Updating SSA information for statement D.45982_157 = switch_core_perform_session_strdup (session_7(D), D.45981_156, "src/switch_core_media.c", &__func__, 2357);

Updating SSA information for statement D.45907_155->fmtp_out = D.45982_157;

Updating SSA information for statement D.45962_158 = a_engine_10->rtp_session;

Updating SSA information for statement D.45983_159 = switch_rtp_ready (D.45962_158);



Registering new PHI nodes in block #38

Updating SSA information for statement D.45962_160 = a_engine_10->rtp_session;

Updating SSA information for statement D.45907_161 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45986_162 = D.45907_161->pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.45962_160, D.45986_162);



Registering new PHI nodes in block #39



Registering new PHI nodes in block #40

Updating SSA information for statement switch_core_session_unlock_codec_write (session_7(D));

Updating SSA information for statement switch_core_session_unlock_codec_read (session_7(D));



Registering new PHI nodes in block #41



Registering new PHI nodes in block #42



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 43
Number of blocks to update: 42 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 


Scope blocks after cleanups:

{ Scope block #0 
  switch_status_t status;
  int resetting;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_set_codec";
  static const char __func__[28] = "switch_core_media_set_codec";
  void end = <<< error >>>; (unused)

}
switch_core_media_set_codec (struct switch_core_session_t * session, int force, uint32_t codec_flags)
{
  static const char __func__[28] = "switch_core_media_set_codec";
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_set_codec";
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  int resetting;
  switch_status_t status;
  switch_payload_t D.45986;
  uint8_t D.45983;
  char * D.45982;
  char * D.45981;
  switch_payload_t D.45978;
  int D.45977;
  char * D.45976;
  switch_bool_t D.45973;
  switch_status_t D.45970;
  uint32_t D.45969;
  uint32_t D.45968;
  uint8_t D.45963;
  struct switch_rtp_t * D.45962;
  const struct switch_codec_implementation_t * D.45959;
  const struct switch_codec_implementation_t * D.45956;
  switch_status_t D.45953;
  struct switch_memory_pool_t * D.45952;
  switch_status_t D.45949;
  struct switch_memory_pool_t * D.45948;
  uint32_t D.45947;
  uint32_t D.45946;
  int D.45945;
  int D.45944;
  char * D.45943;
  struct switch_codec_t * D.45942;
  switch_interval_time_t D.45941;
  int D.45940;
  struct switch_channel_t * D.45939;
  struct switch_audio_resampler_t * * D.45938;
  struct switch_audio_resampler_t * D.45935;
  struct switch_audio_resampler_t * * D.45934;
  struct switch_mutex_t * D.45933;
  struct switch_audio_resampler_t * D.45930;
  long unsigned int D.45929;
  uint32_t D.45928;
  uint32_t D.45926;
  unsigned int D.45925;
  unsigned int D.45924;
  int D.45923;
  int D.45921;
  char * D.45920;
  switch_bool_t D.45912;
  struct switch_codec_t * D.45911;
  char * D.45908;
  struct payload_map_t * D.45907;
  switch_status_t D.45906;

<bb 2>:
  status_5 = 0;
  # DEBUG status => status_5
  resetting_6 = 0;
  # DEBUG resetting => resetting_6
  if (session_7(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2215, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_8 = session_7(D)->media_handle;
  # DEBUG smh => smh_8
  if (smh_8 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.45906_9 = 1;
  goto <bb 42>;

<bb 6>:
  a_engine_10 = &smh_8->engines;
  # DEBUG a_engine => a_engine_10
  D.45907_11 = a_engine_10->cur_payload_map;
  D.45908_12 = D.45907_11->iananame;
  if (D.45908_12 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2223, session_7(D), 7, "No audio codec available\n");
  status_13 = 1;
  # DEBUG status => status_13
  goto <bb 39> (end);

<bb 8>:
  D.45911_14 = &a_engine_10->read_codec;
  D.45912_15 = switch_core_codec_ready (D.45911_14);
  if (D.45912_15 != 0)
    goto <bb 9>;
  else
    goto <bb 20>;

<bb 9>:
  if (force_16(D) == 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  status_17 = 0;
  # DEBUG status => status_17
  goto <bb 39> (end);

<bb 11>:
  D.45920_18 = a_engine_10->read_impl.iananame;
  D.45907_19 = a_engine_10->cur_payload_map;
  D.45908_20 = D.45907_19->iananame;
  D.45921_21 = strcasecmp (D.45920_18, D.45908_20);
  if (D.45921_21 != 0)
    goto <bb 14>;
  else
    goto <bb 12>;

<bb 12>:
  D.45923_22 = a_engine_10->read_impl.microseconds_per_packet;
  D.45924_23 = (unsigned int) D.45923_22;
  D.45925_24 = D.45924_23 / 1000;
  D.45907_25 = a_engine_10->cur_payload_map;
  D.45926_26 = D.45907_25->codec_ms;
  if (D.45925_24 != D.45926_26)
    goto <bb 14>;
  else
    goto <bb 13>;

<bb 13>:
  D.45928_27 = a_engine_10->read_impl.samples_per_second;
  D.45907_28 = a_engine_10->cur_payload_map;
  D.45929_29 = D.45907_28->rm_rate;
  if (D.45928_27 != D.45929_29)
    goto <bb 14>;
  else
    goto <bb 19>;

<bb 14>:
  D.45930_32 = session_7(D)->read_resampler;
  if (D.45930_32 != 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.45933_33 = session_7(D)->resample_mutex;
  switch_mutex_lock (D.45933_33);
  D.45934_34 = &session_7(D)->read_resampler;
  switch_resample_destroy (D.45934_34);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2238, session_7(D), 5, "Deactivating read resampler\n");
  D.45933_35 = session_7(D)->resample_mutex;
  switch_mutex_unlock (D.45933_35);

<bb 16>:
  D.45935_36 = session_7(D)->write_resampler;
  if (D.45935_36 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.45933_37 = session_7(D)->resample_mutex;
  switch_mutex_lock (D.45933_37);
  D.45938_38 = &session_7(D)->write_resampler;
  switch_resample_destroy (D.45938_38);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2245, session_7(D), 5, "Deactivating write resampler\n");
  D.45933_39 = session_7(D)->resample_mutex;
  switch_mutex_unlock (D.45933_39);

<bb 18>:
  switch_core_session_reset (session_7(D), 0, 0);
  D.45939_40 = session_7(D)->channel;
  switch_channel_perform_audio_sync (D.45939_40, "src/switch_core_media.c", &__func__, 2250);
  D.45920_41 = a_engine_10->read_impl.iananame;
  D.45923_42 = a_engine_10->read_impl.microseconds_per_packet;
  D.45940_43 = D.45923_42 / 1000;
  D.45928_44 = a_engine_10->read_impl.samples_per_second;
  D.45907_45 = a_engine_10->cur_payload_map;
  D.45908_46 = D.45907_45->iananame;
  D.45907_47 = a_engine_10->cur_payload_map;
  D.45926_48 = D.45907_47->codec_ms;
  D.45907_49 = a_engine_10->cur_payload_map;
  D.45929_50 = D.45907_49->rm_rate;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2252, session_7(D), 7, "Changing Codec from %s@%dms@%dhz to %s@%dms@%luhz\n", D.45920_41, D.45940_43, D.45928_44, D.45908_46, D.45926_48, D.45929_50);
  D.45923_51 = a_engine_10->read_impl.microseconds_per_packet;
  D.45941_52 = (switch_interval_time_t) D.45923_51;
  switch_sleep (D.45941_52);
  switch_core_session_lock_codec_write (session_7(D));
  switch_core_session_lock_codec_read (session_7(D));
  resetting_53 = 1;
  # DEBUG resetting => resetting_53
  D.45923_54 = a_engine_10->read_impl.microseconds_per_packet;
  D.45941_55 = (switch_interval_time_t) D.45923_54;
  switch_sleep (D.45941_55);
  D.45911_56 = &a_engine_10->read_codec;
  switch_core_codec_destroy (D.45911_56);
  D.45942_57 = &a_engine_10->write_codec;
  switch_core_codec_destroy (D.45942_57);
  D.45939_58 = session_7(D)->channel;
  switch_channel_perform_audio_sync (D.45939_58, "src/switch_core_media.c", &__func__, 2269);
  goto <bb 20>;

<bb 19>:
  D.45920_30 = a_engine_10->read_impl.iananame;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2271, session_7(D), 7, "Already using %s\n", D.45920_30);
  status_31 = 0;
  # DEBUG status => status_31
  goto <bb 39> (end);

<bb 20>:
  # resetting_2 = PHI <resetting_6(8), resetting_53(18)>
  # DEBUG resetting => resetting_2
  D.45911_59 = &a_engine_10->read_codec;
  D.45907_60 = a_engine_10->cur_payload_map;
  D.45908_61 = D.45907_60->iananame;
  D.45907_62 = a_engine_10->cur_payload_map;
  D.45943_63 = D.45907_62->rm_fmtp;
  D.45907_64 = a_engine_10->cur_payload_map;
  D.45929_65 = D.45907_64->rm_rate;
  D.45907_66 = a_engine_10->cur_payload_map;
  D.45926_67 = D.45907_66->codec_ms;
  D.45944_68 = (int) D.45926_67;
  D.45907_69 = a_engine_10->cur_payload_map;
  D.45945_70 = D.45907_69->channels;
  D.45907_71 = a_engine_10->cur_payload_map;
  D.45946_72 = D.45907_71->bitrate;
  D.45947_74 = codec_flags_73(D) | 3;
  D.45948_75 = switch_core_session_get_pool (session_7(D));
  D.45949_76 = switch_core_codec_init_with_bitrate (D.45911_59, D.45908_61, D.45943_63, D.45929_65, D.45944_68, D.45945_70, D.45946_72, D.45947_74, 0B, D.45948_75);
  if (D.45949_76 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2285, session_7(D), 3, "Can\'t load codec?\n");
  D.45939_77 = session_7(D)->channel;
  switch_channel_perform_hangup (D.45939_77, "src/switch_core_media.c", &__func__, 2286, 88);
  status_78 = 1;
  # DEBUG status => status_78
  goto <bb 39> (end);

<bb 22>:
  a_engine_10->read_codec.session = session_7(D);
  D.45942_79 = &a_engine_10->write_codec;
  D.45907_80 = a_engine_10->cur_payload_map;
  D.45908_81 = D.45907_80->iananame;
  D.45907_82 = a_engine_10->cur_payload_map;
  D.45943_83 = D.45907_82->rm_fmtp;
  D.45907_84 = a_engine_10->cur_payload_map;
  D.45929_85 = D.45907_84->rm_rate;
  D.45907_86 = a_engine_10->cur_payload_map;
  D.45926_87 = D.45907_86->codec_ms;
  D.45944_88 = (int) D.45926_87;
  D.45907_89 = a_engine_10->cur_payload_map;
  D.45945_90 = D.45907_89->channels;
  D.45907_91 = a_engine_10->cur_payload_map;
  D.45946_92 = D.45907_91->bitrate;
  D.45947_93 = codec_flags_73(D) | 3;
  D.45952_94 = switch_core_session_get_pool (session_7(D));
  D.45953_95 = switch_core_codec_init_with_bitrate (D.45942_79, D.45908_81, D.45943_83, D.45929_85, D.45944_88, D.45945_90, D.45946_92, D.45947_93, 0B, D.45952_94);
  if (D.45953_95 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2302, session_7(D), 3, "Can\'t load codec?\n");
  D.45939_96 = session_7(D)->channel;
  switch_channel_perform_hangup (D.45939_96, "src/switch_core_media.c", &__func__, 2303, 88);
  status_97 = 1;
  # DEBUG status => status_97
  goto <bb 39> (end);

<bb 24>:
  a_engine_10->write_codec.session = session_7(D);
  D.45939_98 = session_7(D)->channel;
  D.45907_99 = a_engine_10->cur_payload_map;
  D.45908_100 = D.45907_99->iananame;
  switch_channel_set_variable_var_check (D.45939_98, "rtp_use_codec_name", D.45908_100, 1);
  D.45939_101 = session_7(D)->channel;
  D.45907_102 = a_engine_10->cur_payload_map;
  D.45943_103 = D.45907_102->rm_fmtp;
  switch_channel_set_variable_var_check (D.45939_101, "rtp_use_codec_fmtp", D.45943_103, 1);
  D.45939_104 = session_7(D)->channel;
  D.45907_105 = a_engine_10->cur_payload_map;
  D.45929_106 = D.45907_105->rm_rate;
  switch_channel_set_variable_printf (D.45939_104, "rtp_use_codec_rate", "%d", D.45929_106);
  D.45939_107 = session_7(D)->channel;
  D.45907_108 = a_engine_10->cur_payload_map;
  D.45926_109 = D.45907_108->codec_ms;
  switch_channel_set_variable_printf (D.45939_107, "rtp_use_codec_ptime", "%d", D.45926_109);
  D.45939_110 = session_7(D)->channel;
  D.45907_111 = a_engine_10->cur_payload_map;
  D.45908_112 = D.45907_111->iananame;
  D.45907_113 = a_engine_10->cur_payload_map;
  D.45929_114 = D.45907_113->rm_rate;
  D.45907_115 = a_engine_10->cur_payload_map;
  D.45926_116 = D.45907_115->codec_ms;
  switch_channel_set_variable_printf (D.45939_110, "rtp_last_audio_codec_string", "%s@%dh@%di", D.45908_112, D.45929_114, D.45926_116);
  D.45956_117 = a_engine_10->read_codec.implementation;
  if (D.45956_117 == 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  __assert_fail ("a_engine->read_codec.implementation", "src/switch_core_media.c", 2316, &__PRETTY_FUNCTION__);

<bb 26>:
  D.45959_118 = a_engine_10->write_codec.implementation;
  if (D.45959_118 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  __assert_fail ("a_engine->write_codec.implementation", "src/switch_core_media.c", 2317, &__PRETTY_FUNCTION__);

<bb 28>:
  D.45956_119 = a_engine_10->read_codec.implementation;
  a_engine_10->read_impl = *D.45956_119;
  D.45959_120 = a_engine_10->write_codec.implementation;
  a_engine_10->write_impl = *D.45959_120;
  D.45956_121 = a_engine_10->read_codec.implementation;
  switch_core_session_set_read_impl (session_7(D), D.45956_121);
  D.45959_122 = a_engine_10->write_codec.implementation;
  switch_core_session_set_write_impl (session_7(D), D.45959_122);
  D.45962_123 = a_engine_10->rtp_session;
  D.45963_124 = switch_rtp_ready (D.45962_123);
  if (D.45963_124 != 0)
    goto <bb 29>;
  else
    goto <bb 33>;

<bb 29>:
  D.45956_125 = a_engine_10->read_codec.implementation;
  if (D.45956_125 == 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  __assert_fail ("a_engine->read_codec.implementation", "src/switch_core_media.c", 2326, &__PRETTY_FUNCTION__);

<bb 31>:
  D.45962_126 = a_engine_10->rtp_session;
  D.45923_127 = a_engine_10->read_impl.microseconds_per_packet;
  D.45968_128 = (uint32_t) D.45923_127;
  D.45969_129 = a_engine_10->read_impl.samples_per_packet;
  D.45970_130 = switch_rtp_change_interval (D.45962_126, D.45968_128, D.45969_129);
  if (D.45970_130 != 0)
    goto <bb 32>;
  else
    goto <bb 33>;

<bb 32>:
  D.45939_131 = session_7(D)->channel;
  switch_channel_perform_hangup (D.45939_131, "src/switch_core_media.c", &__func__, 2331, 27);
  status_132 = 1;
  # DEBUG status => status_132
  goto <bb 39> (end);

<bb 33>:
  D.45907_133 = a_engine_10->cur_payload_map;
  D.45929_134 = D.45907_133->rm_rate;
  a_engine_10->read_frame.rate = D.45929_134;
  D.45911_135 = &a_engine_10->read_codec;
  D.45973_136 = switch_core_codec_ready (D.45911_135);
  if (D.45973_136 == 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2339, session_7(D), 3, "Can\'t load codec?\n");
  status_137 = 1;
  # DEBUG status => status_137
  goto <bb 39> (end);

<bb 35>:
  D.45939_138 = session_7(D)->channel;
  D.45976_139 = switch_channel_get_name (D.45939_138);
  D.45907_140 = a_engine_10->cur_payload_map;
  D.45908_141 = D.45907_140->iananame;
  D.45907_142 = a_engine_10->cur_payload_map;
  D.45929_143 = D.45907_142->rm_rate;
  D.45907_144 = a_engine_10->cur_payload_map;
  D.45926_145 = D.45907_144->codec_ms;
  D.45969_146 = a_engine_10->read_impl.samples_per_packet;
  D.45977_147 = a_engine_10->read_impl.bits_per_second;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2343, session_7(D), 7, "Set Codec %s %s/%ld %d ms %d samples %d bits\n", D.45976_139, D.45908_141, D.45929_143, D.45926_145, D.45969_146, D.45977_147);
  D.45911_148 = &a_engine_10->read_codec;
  a_engine_10->read_frame.codec = D.45911_148;
  D.45907_149 = a_engine_10->cur_payload_map;
  D.45978_150 = D.45907_149->agreed_pt;
  a_engine_10->write_codec.agreed_pt = D.45978_150;
  D.45907_151 = a_engine_10->cur_payload_map;
  D.45978_152 = D.45907_151->agreed_pt;
  a_engine_10->read_codec.agreed_pt = D.45978_152;
  if (force_16(D) != 2)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  D.45911_153 = &a_engine_10->read_codec;
  switch_core_session_set_real_read_codec (session_7(D), D.45911_153);
  D.45942_154 = &a_engine_10->write_codec;
  switch_core_session_set_write_codec (session_7(D), D.45942_154);

<bb 37>:
  D.45907_155 = a_engine_10->cur_payload_map;
  D.45981_156 = a_engine_10->write_codec.fmtp_out;
  D.45982_157 = switch_core_perform_session_strdup (session_7(D), D.45981_156, "src/switch_core_media.c", &__func__, 2357);
  D.45907_155->fmtp_out = D.45982_157;
  D.45962_158 = a_engine_10->rtp_session;
  D.45983_159 = switch_rtp_ready (D.45962_158);
  if (D.45983_159 != 0)
    goto <bb 38>;
  else
    goto <bb 39> (end);

<bb 38>:
  D.45962_160 = a_engine_10->rtp_session;
  D.45907_161 = a_engine_10->cur_payload_map;
  D.45986_162 = D.45907_161->pt;
  switch_rtp_set_default_payload (D.45962_160, D.45986_162);

  # status_1 = PHI <status_13(7), status_17(10), status_31(19), status_78(21), status_97(23), status_132(32), status_137(34), status_5(37), status_5(38)>
  # resetting_3 = PHI <resetting_6(7), resetting_6(10), resetting_6(19), resetting_2(21), resetting_2(23), resetting_2(32), resetting_2(34), resetting_2(37), resetting_2(38)>
end:
  # DEBUG resetting => resetting_3
  # DEBUG status => status_1
  if (resetting_3 != 0)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:
  switch_core_session_unlock_codec_write (session_7(D));
  switch_core_session_unlock_codec_read (session_7(D));

<bb 41>:
  D.45906_163 = status_1;

<bb 42>:
  # D.45906_4 = PHI <D.45906_9(5), D.45906_163(41)>
  return D.45906_4;

}



;; Function switch_core_media_read_frame (switch_core_media_read_frame)



Renaming block #0



Renaming block #2

Renaming statement do_cng = 0;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.46128 = 1;



Renaming block #6

Renaming statement D.46129 = smh->media_flags[0];

Renaming statement if (D.46129 == 0)



Renaming block #7

Renaming statement D.46128 = 1;



Renaming block #8

Renaming statement D.46132 = &smh->engines;

Renaming statement D.46133 = type * 11416;

Renaming statement engine = D.46132 + D.46133;

Renaming statement engine->read_frame.datalen = 0;

Renaming statement D.46136 = engine->read_codec.implementation;

Renaming statement if (D.46136 == 0B)



Renaming block #9

Renaming statement D.46138 = &engine->read_codec;

Renaming statement D.46139 = switch_core_codec_ready (D.46138);

Renaming statement if (D.46139 == 0)



Renaming block #11

Renaming statement D.46140 = engine->rtp_session;

Renaming statement if (D.46140 == 0B)



Renaming block #12



Renaming block #13

Renaming statement engine->read_frame.datalen = 0;

Renaming statement D.46145 = session->channel;

Renaming statement D.46146 = switch_channel_get_state (D.46145);

Renaming statement if (D.46146 > 9)



Renaming block #14

Renaming statement D.46140 = engine->rtp_session;

Renaming statement D.46148 = switch_rtp_ready (D.46140);

Renaming statement if (D.46148 == 0)



Renaming block #15

Renaming statement D.46145 = session->channel;

Renaming statement D.46150 = switch_channel_test_flag (D.46145, 45);

Renaming statement if (D.46150 != 0)



Renaming block #17

Renaming statement D.46151 = engine->read_mutex[type];

Renaming statement if (D.46151 != 0B)



Renaming block #18

Renaming statement D.46151 = engine->read_mutex[type];

Renaming statement D.46154 = switch_mutex_trylock (D.46151);

Renaming statement if (D.46154 != 0)



Renaming block #19

Renaming statement D.46145 = session->channel;

Renaming statement D.46157 = switch_channel_get_name (D.46145);

Renaming statement if (type == 1)



Renaming block #20

Renaming statement iftmp.129 = "video";



Renaming block #21

Renaming statement iftmp.129 = "audio";



Renaming block #22

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1650, session, 101, "%s is already being read for %s\n", D.46157, iftmp.129);

Renaming statement D.46128 = 10;



Renaming block #111

Renaming statement D.46129 = smh->media_flags[0];

Renaming statement if (D.46129 != 0)



Renaming block #112

Renaming statement D.46263 = engine->read_frame.datalen;

Renaming statement if (D.46263 == 0)



Renaming block #23

Renaming statement engine->read_frame.flags = 0;

Renaming statement D.46140 = engine->rtp_session;

Renaming statement D.46162 = &engine->read_frame;

Renaming statement status = switch_rtp_zerocopy_read_frame (D.46140, D.46162, flags);

Renaming statement D.46163 = status != 0;

Renaming statement D.46164 = status != 11;

Renaming statement D.46165 = D.46163 && D.46164;

Renaming statement if (D.46165 != 0)



Renaming block #24

Renaming statement if (status == 2)



Renaming block #25

Renaming statement D.46145 = session->channel;

Renaming statement D.46170 = switch_channel_get_variable_dup (D.46145, "execute_on_media_timeout", 1, -1);

Renaming statement if (D.46170 != 0B)



Renaming block #26

Renaming statement D.46162 = &engine->read_frame;

Renaming statement *frame = D.46162;

Renaming statement D.46173 = *frame;

Renaming statement D.46173 = *frame;

Renaming statement D.46174 = D.46173->flags;

Renaming statement D.46175 = D.46174 | 1;

Renaming statement D.46173->flags = D.46175;

Renaming statement D.46173 = *frame;

Renaming statement D.46176 = engine->read_impl.encoded_bytes_per_packet;

Renaming statement D.46173->datalen = D.46176;

Renaming statement D.46173 = *frame;

Renaming statement D.46177 = D.46173->data;

Renaming statement D.46173 = *frame;

Renaming statement D.46178 = D.46173->datalen;

Renaming statement memset (D.46177, 0, D.46178);

Renaming statement D.46145 = session->channel;

Renaming statement switch_channel_execute_on (D.46145, "execute_on_media_timeout");

Renaming statement status = 0;



Renaming block #27

Renaming statement D.46145 = session->channel;

Renaming statement switch_channel_perform_hangup (D.46145, "src/switch_core_media.c", &__func__, 1674, 604);



Renaming block #28

Renaming statement D.46179 = engine->reset_codec;

Renaming statement if (D.46179 != 0)



Renaming block #29

Renaming statement rtp_timeout_sec = 0;

Renaming statement rtp_hold_timeout_sec = 0;

Renaming statement engine->reset_codec = 0;

Renaming statement D.46140 = engine->rtp_session;

Renaming statement D.46182 = switch_rtp_ready (D.46140);

Renaming statement if (D.46182 != 0)



Renaming block #30

Renaming statement if (type == 1)



Renaming block #31

Renaming statement switch_core_media_set_video_codec (session, 1);



Renaming block #32

Renaming statement D.46188 = switch_core_media_set_codec (session, 1, 0);

Renaming statement if (D.46188 != 0)



Renaming block #33

Renaming statement *frame = 0B;

Renaming statement status = 9;



Renaming block #34

Renaming statement D.46145 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.46145, "rtp_timeout_sec", 1, -1);

Renaming statement if (val != 0B)



Renaming block #35

Renaming statement v = atoi (val);

Renaming statement if (v >= 0)



Renaming block #36

Renaming statement rtp_timeout_sec = v;



Renaming block #37

Renaming statement D.46145 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.46145, "rtp_hold_timeout_sec", 1, -1);

Renaming statement if (val != 0B)



Renaming block #38

Renaming statement v = atoi (val);

Renaming statement if (v >= 0)



Renaming block #39

Renaming statement rtp_hold_timeout_sec = v;



Renaming block #40

Renaming statement if (rtp_timeout_sec != 0)



Renaming block #41

Renaming statement D.46201 = engine->read_impl.samples_per_second;

Renaming statement rtp_timeout_sec.130 = (uint32_t) rtp_timeout_sec;

Renaming statement D.46203 = D.46201 * rtp_timeout_sec.130;

Renaming statement D.46204 = engine->read_impl.samples_per_packet;

Renaming statement D.46205 = D.46203 / D.46204;

Renaming statement engine->max_missed_packets = D.46205;

Renaming statement D.46140 = engine->rtp_session;

Renaming statement D.46206 = engine->max_missed_packets;

Renaming statement switch_rtp_set_max_missed_packets (D.46140, D.46206);

Renaming statement if (rtp_hold_timeout_sec == 0)



Renaming block #42

Renaming statement rtp_hold_timeout_sec = rtp_timeout_sec * 10;



Renaming block #43

Renaming statement if (rtp_hold_timeout_sec != 0)



Renaming block #44

Renaming statement D.46201 = engine->read_impl.samples_per_second;

Renaming statement rtp_hold_timeout_sec.131 = (uint32_t) rtp_hold_timeout_sec;

Renaming statement D.46212 = D.46201 * rtp_hold_timeout_sec.131;

Renaming statement D.46204 = engine->read_impl.samples_per_packet;

Renaming statement D.46213 = D.46212 / D.46204;

Renaming statement engine->max_missed_hold_packets = D.46213;



Renaming block #45

Renaming statement engine->check_frames = 0;

Renaming statement engine->last_ts = 0;

Renaming statement do_cng = 1;



Renaming block #46

Renaming statement if (do_cng != 0)



Renaming block #47

Renaming statement D.46162 = &engine->read_frame;

Renaming statement *frame = D.46162;

Renaming statement D.46173 = *frame;

Renaming statement D.46173 = *frame;

Renaming statement D.46174 = D.46173->flags;

Renaming statement D.46175 = D.46174 | 1;

Renaming statement D.46173->flags = D.46175;

Renaming statement D.46173 = *frame;

Renaming statement D.46176 = engine->read_impl.encoded_bytes_per_packet;

Renaming statement D.46173->datalen = D.46176;

Renaming statement D.46173 = *frame;

Renaming statement D.46177 = D.46173->data;

Renaming statement D.46173 = *frame;

Renaming statement D.46178 = D.46173->datalen;

Renaming statement memset (D.46177, 0, D.46178);

Renaming statement status = 0;



Renaming block #48

Renaming statement D.46140 = engine->rtp_session;

Renaming statement D.46216 = switch_rtcp_zerocopy_read_frame (D.46140, &rtcp_frame);

Renaming statement if (D.46216 == 0)



Renaming block #49

Renaming statement D.46219 = switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 1747, &event, 71, 0B);

Renaming statement if (D.46219 == 0)



Renaming block #50

Renaming statement uuid = switch_core_session_get_uuid (session);

Renaming statement if (uuid != 0B)



Renaming block #51

Renaming statement event.132 = event;

Renaming statement D.46225 = switch_core_session_get_uuid (session);

Renaming statement switch_event_add_header_string (event.132, 1, "Unique-ID", D.46225);



Renaming block #52

Renaming statement D.46226 = (const char * restrict) &"%.8x"[0];

Renaming statement D.46227 = rtcp_frame.ssrc;

Renaming statement snprintf (&value, 30, D.46226, D.46227);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, "SSRC", &value);

Renaming statement D.46228 = (const char * restrict) &"%u"[0];

Renaming statement D.46229 = rtcp_frame.ntp_msw;

Renaming statement snprintf (&value, 30, D.46228, D.46229);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, "NTP-Most-Significant-Word", &value);

Renaming statement D.46228 = (const char * restrict) &"%u"[0];

Renaming statement D.46230 = rtcp_frame.ntp_lsw;

Renaming statement snprintf (&value, 30, D.46228, D.46230);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, "NTP-Least-Significant-Word", &value);

Renaming statement D.46228 = (const char * restrict) &"%u"[0];

Renaming statement D.46231 = rtcp_frame.timestamp;

Renaming statement snprintf (&value, 30, D.46228, D.46231);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, "RTP-Timestamp", &value);

Renaming statement D.46228 = (const char * restrict) &"%u"[0];

Renaming statement D.46232 = rtcp_frame.packet_count;

Renaming statement snprintf (&value, 30, D.46228, D.46232);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, "Sender-Packet-Count", &value);

Renaming statement D.46228 = (const char * restrict) &"%u"[0];

Renaming statement D.46233 = rtcp_frame.octect_count;

Renaming statement snprintf (&value, 30, D.46228, D.46233);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, "Octect-Packet-Count", &value);

Renaming statement D.46234 = (const char * restrict) &"%d"[0];

Renaming statement D.46235 = engine->read_frame.timestamp;

Renaming statement snprintf (&value, 30, D.46234, D.46235);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, "Last-RTP-Timestamp", &value);

Renaming statement D.46228 = (const char * restrict) &"%u"[0];

Renaming statement D.46236 = engine->read_frame.rate;

Renaming statement snprintf (&value, 30, D.46228, D.46236);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, "RTP-Rate", &value);

Renaming statement D.46237 = (const char * restrict) &"%lld"[0];

Renaming statement D.46238 = switch_time_now ();

Renaming statement snprintf (&value, 30, D.46237, D.46238);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, "Capture-Time", &value);

Renaming statement i = 0;



Renaming block #54

Renaming statement D.46254 = rtcp_frame.report_count;

Renaming statement D.46255 = (int) D.46254;

Renaming statement if (D.46255 > i)



Renaming block #53

Renaming statement D.46239 = (const char * restrict) &"Source%u-SSRC"[0];

Renaming statement snprintf (&header, 50, D.46239, i);

Renaming statement D.46226 = (const char * restrict) &"%.8x"[0];

Renaming statement D.46240 = rtcp_frame.reports[i].ssrc;

Renaming statement snprintf (&value, 30, D.46226, D.46240);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, &header, &value);

Renaming statement D.46241 = (const char * restrict) &"Source%u-Fraction"[0];

Renaming statement snprintf (&header, 50, D.46241, i);

Renaming statement D.46228 = (const char * restrict) &"%u"[0];

Renaming statement D.46242 = rtcp_frame.reports[i].fraction;

Renaming statement D.46243 = (int) D.46242;

Renaming statement snprintf (&value, 30, D.46228, D.46243);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, &header, &value);

Renaming statement D.46244 = (const char * restrict) &"Source%u-Lost"[0];

Renaming statement snprintf (&header, 50, D.46244, i);

Renaming statement D.46228 = (const char * restrict) &"%u"[0];

Renaming statement D.46245 = rtcp_frame.reports[i].lost;

Renaming statement snprintf (&value, 30, D.46228, D.46245);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, &header, &value);

Renaming statement D.46246 = (const char * restrict) &"Source%u-Highest-Sequence-Number-Received"[0];

Renaming statement snprintf (&header, 50, D.46246, i);

Renaming statement D.46228 = (const char * restrict) &"%u"[0];

Renaming statement D.46247 = rtcp_frame.reports[i].highest_sequence_number_received;

Renaming statement snprintf (&value, 30, D.46228, D.46247);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, &header, &value);

Renaming statement D.46248 = (const char * restrict) &"Source%u-Jitter"[0];

Renaming statement snprintf (&header, 50, D.46248, i);

Renaming statement D.46228 = (const char * restrict) &"%u"[0];

Renaming statement D.46249 = rtcp_frame.reports[i].jitter;

Renaming statement snprintf (&value, 30, D.46228, D.46249);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, &header, &value);

Renaming statement D.46250 = (const char * restrict) &"Source%u-LSR"[0];

Renaming statement snprintf (&header, 50, D.46250, i);

Renaming statement D.46228 = (const char * restrict) &"%u"[0];

Renaming statement D.46251 = rtcp_frame.reports[i].lsr;

Renaming statement snprintf (&value, 30, D.46228, D.46251);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, &header, &value);

Renaming statement D.46252 = (const char * restrict) &"Source%u-DLSR"[0];

Renaming statement snprintf (&header, 50, D.46252, i);

Renaming statement D.46228 = (const char * restrict) &"%u"[0];

Renaming statement D.46253 = rtcp_frame.reports[i].dlsr;

Renaming statement snprintf (&value, 30, D.46228, D.46253);

Renaming statement event.132 = event;

Renaming statement switch_event_add_header_string (event.132, 1, &header, &value);

Renaming statement i = i + 1;



Renaming block #55

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1810, session, 110, "Dispatched RTCP event\n");



Renaming block #56

Renaming statement D.46256 = engine->read_frame.flags;

Renaming statement D.46257 = D.46256 & 32;

Renaming statement if (D.46257 != 0)



Renaming block #57

Renaming statement D.46162 = &engine->read_frame;

Renaming statement *frame = D.46162;

Renaming statement status = 0;



Renaming block #58

Renaming statement D.46140 = engine->rtp_session;

Renaming statement D.46260 = switch_rtp_has_dtmf (D.46140);

Renaming statement if (D.46260 != 0)



Renaming block #59

Renaming statement D.46140 = engine->rtp_session;

Renaming statement switch_rtp_dequeue_dtmf (D.46140, &dtmf);

Renaming statement D.46145 = session->channel;

Renaming statement switch_channel_queue_dtmf (D.46145, &dtmf);



Renaming block #60

Renaming statement D.46263 = engine->read_frame.datalen;

Renaming statement if (D.46263 != 0)



Renaming block #61

Renaming statement bytes = 0;

Renaming statement frames = 1;

Renaming statement D.46256 = engine->read_frame.flags;

Renaming statement D.46266 = D.46256 & 1;

Renaming statement if (D.46266 == 0)



Renaming block #62

Renaming statement D.46136 = engine->read_codec.implementation;

Renaming statement if (D.46136 == 0B)



Renaming block #63

Renaming statement D.46138 = &engine->read_codec;

Renaming statement D.46272 = switch_core_codec_ready (D.46138);

Renaming statement if (D.46272 == 0)



Renaming block #65

Renaming statement D.46273 = smh->media_flags[2];

Renaming statement if (D.46273 != 0)



Renaming block #66

Renaming statement D.46276 = engine->check_frames;

Renaming statement if (D.46276 <= 49)



Renaming block #67

Renaming statement D.46276 = engine->check_frames;

Renaming statement D.46279 = D.46276 + 1;

Renaming statement engine->check_frames = D.46279;

Renaming statement D.46176 = engine->read_impl.encoded_bytes_per_packet;

Renaming statement if (D.46176 == 0)



Renaming block #68

Renaming statement engine->check_frames = 50;



Renaming block #69

Renaming statement D.46273 = smh->media_flags[2];

Renaming statement if (D.46273 != 0)



Renaming block #70

Renaming statement D.46263 = engine->read_frame.datalen;

Renaming statement D.46285 = D.46263 % 10;

Renaming statement if (D.46285 == 0)



Renaming block #71

Renaming statement D.46289 = engine->last_ts;

Renaming statement if (D.46289 != 0)



Renaming block #72

Renaming statement D.46263 = engine->read_frame.datalen;

Renaming statement D.46176 = engine->read_impl.encoded_bytes_per_packet;

Renaming statement if (D.46263 != D.46176)



Renaming block #73

Renaming statement D.46235 = engine->read_frame.timestamp;

Renaming statement D.46289 = engine->last_ts;

Renaming statement D.46292 = D.46235 - D.46289;

Renaming statement D.46201 = engine->read_impl.samples_per_second;

Renaming statement D.46293 = D.46201 / 1000;

Renaming statement codec_ms = D.46292 / D.46293;

Renaming statement D.46296 = codec_ms % 10;

Renaming statement if (D.46296 != 0)



Renaming block #74

Renaming statement D.46204 = engine->read_impl.samples_per_packet;

Renaming statement D.46298 = D.46204 * 10;

Renaming statement if (D.46298 < codec_ms)



Renaming block #76

Renaming statement D.46299 = engine->last_codec_ms;

Renaming statement if (D.46299 != 0)



Renaming block #77

Renaming statement D.46299 = engine->last_codec_ms;

Renaming statement if (D.46299 == codec_ms)



Renaming block #78

Renaming statement D.46304 = engine->mismatch_count;

Renaming statement D.46305 = D.46304 + 1;

Renaming statement engine->mismatch_count = D.46305;



Renaming block #79

Renaming statement engine->last_codec_ms = codec_ms;

Renaming statement D.46304 = engine->mismatch_count;

Renaming statement if (D.46304 > 5)



Renaming block #80

Renaming statement D.46308 = engine->cur_payload_map;

Renaming statement D.46309 = D.46308->codec_ms;

Renaming statement if (D.46309 != codec_ms)



Renaming block #81

Renaming statement if (codec_ms > 120)



Renaming block #82

Renaming statement codec_ms.133 = (int) codec_ms;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1871, session, 4, "Your phone is trying to send timestamps that suggest an increment of %dms per packet\nThat seems hard to believe so I am going to go on ahead and um ignore that, mmkay?\n", codec_ms.133);

Renaming statement engine->check_frames = 50;



Renaming block #83

Renaming statement engine->read_frame.datalen = 0;

Renaming statement D.46308 = engine->cur_payload_map;

Renaming statement D.46309 = D.46308->codec_ms;

Renaming statement if (D.46309 != codec_ms)



Renaming block #84

Renaming statement D.46308 = engine->cur_payload_map;

Renaming statement D.46309 = D.46308->codec_ms;

Renaming statement D.46317 = (int) D.46309;

Renaming statement codec_ms.133 = (int) codec_ms;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1882, session, 4, "Asynchronous PTIME not supported, changing our end from %d to %d\n", D.46317, codec_ms.133);

Renaming statement D.46145 = session->channel;

Renaming statement D.46308 = engine->cur_payload_map;

Renaming statement D.46309 = D.46308->codec_ms;

Renaming statement D.46317 = (int) D.46309;

Renaming statement codec_ms.133 = (int) codec_ms;

Renaming statement switch_channel_set_variable_printf (D.46145, "rtp_h_X-Broken-PTIME", "Adv=%d;Sent=%d", D.46317, codec_ms.133);

Renaming statement D.46308 = engine->cur_payload_map;

Renaming statement D.46308->codec_ms = codec_ms;

Renaming statement engine->reset_codec = 2;



Renaming block #75

Renaming statement engine->last_ts = 0;



Renaming block #85

Renaming statement engine->mismatch_count = 0;



Renaming block #86

Renaming statement D.46235 = engine->read_frame.timestamp;

Renaming statement engine->last_ts = D.46235;



Renaming block #87

Renaming statement engine->mismatch_count = 0;

Renaming statement engine->last_ts = 0;



Renaming block #88

Renaming statement D.46179 = engine->reset_codec;

Renaming statement if (D.46179 == 0)



Renaming block #89

Renaming statement D.46324 = engine->codec_negotiated;

Renaming statement if (D.46324 != 0)



Renaming block #90

Renaming statement D.46327 = smh->mparams;

Renaming statement D.46328 = D.46327->cng_pt;

Renaming statement if (D.46328 == 0)



Renaming block #91

Renaming statement D.46330 = engine->read_frame.payload;

Renaming statement D.46327 = smh->mparams;

Renaming statement D.46328 = D.46327->cng_pt;

Renaming statement if (D.46330 != D.46328)



Renaming block #92

Renaming statement D.46327 = smh->mparams;

Renaming statement D.46331 = D.46327->recv_te;

Renaming statement if (D.46331 == 0)



Renaming block #93

Renaming statement D.46330 = engine->read_frame.payload;

Renaming statement D.46327 = smh->mparams;

Renaming statement D.46331 = D.46327->recv_te;

Renaming statement if (D.46330 != D.46331)



Renaming block #94

Renaming statement D.46327 = smh->mparams;

Renaming statement D.46333 = D.46327->te;

Renaming statement if (D.46333 == 0)



Renaming block #95

Renaming statement D.46330 = engine->read_frame.payload;

Renaming statement D.46327 = smh->mparams;

Renaming statement D.46333 = D.46327->te;

Renaming statement if (D.46330 != D.46333)



Renaming block #96

Renaming statement D.46330 = engine->read_frame.payload;

Renaming statement D.46308 = engine->cur_payload_map;

Renaming statement D.46335 = D.46308->recv_pt;

Renaming statement if (D.46330 != D.46335)



Renaming block #97

Renaming statement D.46330 = engine->read_frame.payload;

Renaming statement D.46308 = engine->cur_payload_map;

Renaming statement D.46338 = D.46308->agreed_pt;

Renaming statement if (D.46330 != D.46338)



Renaming block #98

Renaming statement D.46330 = engine->read_frame.payload;

Renaming statement D.46308 = engine->cur_payload_map;

Renaming statement D.46341 = D.46308->pt;

Renaming statement if (D.46330 != D.46341)



Renaming block #99

Renaming statement D.46330 = engine->read_frame.payload;

Renaming statement D.46344 = (int) D.46330;

Renaming statement D.46308 = engine->cur_payload_map;

Renaming statement D.46338 = D.46308->agreed_pt;

Renaming statement D.46345 = (int) D.46338;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1926, session, 7, "alternate payload received (received %d, expecting %d)\n", D.46344, D.46345);

Renaming statement D.46346 = smh->sdp_mutex;

Renaming statement switch_mutex_lock (D.46346);

Renaming statement pmap = engine->payload_map;



Renaming block #104

Renaming statement if (pmap != 0B)



Renaming block #100

Renaming statement D.46330 = engine->read_frame.payload;

Renaming statement D.46347 = pmap->recv_pt;

Renaming statement if (D.46330 == D.46347)



Renaming block #101

Renaming statement D.46350 = pmap->negotiated;

Renaming statement if (D.46350 != 0)



Renaming block #102

Renaming statement engine->cur_payload_map = pmap;

Renaming statement D.46308 = engine->cur_payload_map;

Renaming statement D.46308->current = 1;

Renaming statement D.46353 = pmap->iananame;

Renaming statement D.46354 = pmap->pt;

Renaming statement D.46355 = (int) D.46354;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1937, session, 4, "Changing current codec to %s (payload type %d).\n", D.46353, D.46355);

Renaming statement engine->reset_codec = 1;



Renaming block #103

Renaming statement pmap = pmap->next;



Renaming block #105

Renaming statement D.46346 = smh->sdp_mutex;

Renaming statement switch_mutex_unlock (D.46346);

Renaming statement D.46179 = engine->reset_codec;

Renaming statement if (D.46179 == 0)



Renaming block #106

Renaming statement D.46330 = engine->read_frame.payload;

Renaming statement D.46344 = (int) D.46330;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1949, session, 4, "Could not change to payload type %d, ignoring...\n", D.46344);



Renaming block #107

Renaming statement bytes = engine->read_impl.encoded_bytes_per_packet;

Renaming statement if (bytes != 0)



Renaming block #108

Renaming statement D.46263 = engine->read_frame.datalen;

Renaming statement D.46360 = D.46263 / bytes;

Renaming statement frames = (int) D.46360;



Renaming block #109

Renaming statement D.46204 = engine->read_impl.samples_per_packet;

Renaming statement frames.134 = (uint32_t) frames;

Renaming statement D.46362 = D.46204 * frames.134;

Renaming statement engine->read_frame.samples = D.46362;

Renaming statement D.46263 = engine->read_frame.datalen;

Renaming statement if (D.46263 == 0)



Renaming block #110



Renaming block #64

Renaming statement *frame = 0B;

Renaming statement status = 9;



Renaming block #113

Renaming statement D.46263 = engine->read_frame.datalen;

Renaming statement if (D.46263 == 0)



Renaming block #114

Renaming statement *frame = 0B;



Renaming block #115

Renaming statement D.46162 = &engine->read_frame;

Renaming statement *frame = D.46162;

Renaming statement status = 0;



Renaming block #116

Renaming statement D.46151 = engine->read_mutex[type];

Renaming statement if (D.46151 != 0B)



Renaming block #117

Renaming statement D.46151 = engine->read_mutex[type];

Renaming statement switch_mutex_unlock (D.46151);



Renaming block #118

Renaming statement D.46128 = status;



Renaming block #16

Renaming statement D.46128 = 1;



Renaming block #10

Renaming statement D.46128 = 1;



Renaming block #119

Renaming statement return D.46128;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 1623, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_14 = session_13(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.46129_16 = smh_14->media_flags[0];



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8

Updating SSA information for statement engine_21->read_frame.datalen = 0;

Updating SSA information for statement D.46136_22 = engine_21->read_codec.implementation;



Registering new PHI nodes in block #9

Updating SSA information for statement D.46139_24 = switch_core_codec_ready (D.46138_23);



Registering new PHI nodes in block #11

Updating SSA information for statement D.46140_25 = engine_21->rtp_session;



Registering new PHI nodes in block #12

Updating SSA information for statement __assert_fail ("engine->rtp_session != ((void *)0)", "src/switch_core_media.c", 1641, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #13

Updating SSA information for statement engine_21->read_frame.datalen = 0;

Updating SSA information for statement D.46145_26 = session_13(D)->channel;

Updating SSA information for statement D.46146_27 = switch_channel_get_state (D.46145_26);



Registering new PHI nodes in block #14

Updating SSA information for statement D.46140_28 = engine_21->rtp_session;

Updating SSA information for statement D.46148_29 = switch_rtp_ready (D.46140_28);



Registering new PHI nodes in block #15

Updating SSA information for statement D.46145_30 = session_13(D)->channel;

Updating SSA information for statement D.46150_31 = switch_channel_test_flag (D.46145_30, 45);



Registering new PHI nodes in block #17

Updating SSA information for statement D.46151_32 = engine_21->read_mutex[type_19(D)];



Registering new PHI nodes in block #18

Updating SSA information for statement D.46151_33 = engine_21->read_mutex[type_19(D)];

Updating SSA information for statement D.46154_34 = switch_mutex_trylock (D.46151_33);



Registering new PHI nodes in block #19

Updating SSA information for statement D.46145_35 = session_13(D)->channel;

Updating SSA information for statement D.46157_36 = switch_channel_get_name (D.46145_35);



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1650, session_13(D), 101, "%s is already being read for %s\n", D.46157_36, iftmp.129_11);



Registering new PHI nodes in block #111

Updating SSA information for statement D.46129_40 = smh_14->media_flags[0];



Registering new PHI nodes in block #112

Updating SSA information for statement D.46263_41 = engine_21->read_frame.datalen;



Registering new PHI nodes in block #23

Updating SSA information for statement engine_21->read_frame.flags = 0;

Updating SSA information for statement D.46140_42 = engine_21->rtp_session;

Updating SSA information for statement status_45 = switch_rtp_zerocopy_read_frame (D.46140_42, D.46162_43, flags_44(D));



Registering new PHI nodes in block #24



Registering new PHI nodes in block #25

Updating SSA information for statement D.46145_49 = session_13(D)->channel;

Updating SSA information for statement D.46170_50 = switch_channel_get_variable_dup (D.46145_49, "execute_on_media_timeout", 1, -1);



Registering new PHI nodes in block #26

Updating SSA information for statement *frame_52(D) = D.46162_51;

Updating SSA information for statement D.46173_53 = *frame_52(D);

Updating SSA information for statement D.46173_54 = *frame_52(D);

Updating SSA information for statement D.46174_55 = D.46173_54->flags;

Updating SSA information for statement D.46173_54->flags = D.46175_56;

Updating SSA information for statement D.46173_57 = *frame_52(D);

Updating SSA information for statement D.46176_58 = engine_21->read_impl.encoded_bytes_per_packet;

Updating SSA information for statement D.46173_57->datalen = D.46176_58;

Updating SSA information for statement D.46173_59 = *frame_52(D);

Updating SSA information for statement D.46177_60 = D.46173_59->data;

Updating SSA information for statement D.46173_61 = *frame_52(D);

Updating SSA information for statement D.46178_62 = D.46173_61->datalen;

Updating SSA information for statement memset (D.46177_60, 0, D.46178_62);

Updating SSA information for statement D.46145_63 = session_13(D)->channel;

Updating SSA information for statement switch_channel_execute_on (D.46145_63, "execute_on_media_timeout");



Registering new PHI nodes in block #27

Updating SSA information for statement D.46145_65 = session_13(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.46145_65, "src/switch_core_media.c", &__func__, 1674, 604);



Registering new PHI nodes in block #28

Updating SSA information for statement D.46179_66 = engine_21->reset_codec;



Registering new PHI nodes in block #29

Updating SSA information for statement engine_21->reset_codec = 0;

Updating SSA information for statement D.46140_69 = engine_21->rtp_session;

Updating SSA information for statement D.46182_70 = switch_rtp_ready (D.46140_69);



Registering new PHI nodes in block #30



Registering new PHI nodes in block #31

Updating SSA information for statement switch_core_media_set_video_codec (session_13(D), 1);



Registering new PHI nodes in block #32

Updating SSA information for statement D.46188_71 = switch_core_media_set_codec (session_13(D), 1, 0);



Registering new PHI nodes in block #33

Updating SSA information for statement *frame_52(D) = 0B;



Registering new PHI nodes in block #34

Updating SSA information for statement D.46145_73 = session_13(D)->channel;

Updating SSA information for statement val_74 = switch_channel_get_variable_dup (D.46145_73, "rtp_timeout_sec", 1, -1);



Registering new PHI nodes in block #35

Updating SSA information for statement v_75 = atoi (val_74);



Registering new PHI nodes in block #36



Registering new PHI nodes in block #37

Updating SSA information for statement D.46145_77 = session_13(D)->channel;

Updating SSA information for statement val_78 = switch_channel_get_variable_dup (D.46145_77, "rtp_hold_timeout_sec", 1, -1);



Registering new PHI nodes in block #38

Updating SSA information for statement v_79 = atoi (val_78);



Registering new PHI nodes in block #39



Registering new PHI nodes in block #40



Registering new PHI nodes in block #41

Updating SSA information for statement D.46201_81 = engine_21->read_impl.samples_per_second;

Updating SSA information for statement D.46204_84 = engine_21->read_impl.samples_per_packet;

Updating SSA information for statement engine_21->max_missed_packets = D.46205_85;

Updating SSA information for statement D.46140_86 = engine_21->rtp_session;

Updating SSA information for statement D.46206_87 = engine_21->max_missed_packets;

Updating SSA information for statement switch_rtp_set_max_missed_packets (D.46140_86, D.46206_87);



Registering new PHI nodes in block #42



Registering new PHI nodes in block #43



Registering new PHI nodes in block #44

Updating SSA information for statement D.46201_89 = engine_21->read_impl.samples_per_second;

Updating SSA information for statement D.46204_92 = engine_21->read_impl.samples_per_packet;

Updating SSA information for statement engine_21->max_missed_hold_packets = D.46213_93;



Registering new PHI nodes in block #45

Updating SSA information for statement engine_21->check_frames = 0;

Updating SSA information for statement engine_21->last_ts = 0;



Registering new PHI nodes in block #46



Registering new PHI nodes in block #47

Updating SSA information for statement *frame_52(D) = D.46162_95;

Updating SSA information for statement D.46173_96 = *frame_52(D);

Updating SSA information for statement D.46173_97 = *frame_52(D);

Updating SSA information for statement D.46174_98 = D.46173_97->flags;

Updating SSA information for statement D.46173_97->flags = D.46175_99;

Updating SSA information for statement D.46173_100 = *frame_52(D);

Updating SSA information for statement D.46176_101 = engine_21->read_impl.encoded_bytes_per_packet;

Updating SSA information for statement D.46173_100->datalen = D.46176_101;

Updating SSA information for statement D.46173_102 = *frame_52(D);

Updating SSA information for statement D.46177_103 = D.46173_102->data;

Updating SSA information for statement D.46173_104 = *frame_52(D);

Updating SSA information for statement D.46178_105 = D.46173_104->datalen;

Updating SSA information for statement memset (D.46177_103, 0, D.46178_105);



Registering new PHI nodes in block #48

Updating SSA information for statement D.46140_107 = engine_21->rtp_session;

Updating SSA information for statement D.46216_108 = switch_rtcp_zerocopy_read_frame (D.46140_107, &rtcp_frame);



Registering new PHI nodes in block #49

Updating SSA information for statement D.46219_109 = switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 1747, &event, 71, 0B);



Registering new PHI nodes in block #50

Updating SSA information for statement uuid_110 = switch_core_session_get_uuid (session_13(D));



Registering new PHI nodes in block #51

Updating SSA information for statement event.132_111 = event;

Updating SSA information for statement D.46225_112 = switch_core_session_get_uuid (session_13(D));

Updating SSA information for statement switch_event_add_header_string (event.132_111, 1, "Unique-ID", D.46225_112);



Registering new PHI nodes in block #52

Updating SSA information for statement D.46227_114 = rtcp_frame.ssrc;

Updating SSA information for statement snprintf (&value, 30, D.46226_113, D.46227_114);

Updating SSA information for statement event.132_115 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_115, 1, "SSRC", &value);

Updating SSA information for statement D.46229_117 = rtcp_frame.ntp_msw;

Updating SSA information for statement snprintf (&value, 30, D.46228_116, D.46229_117);

Updating SSA information for statement event.132_118 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_118, 1, "NTP-Most-Significant-Word", &value);

Updating SSA information for statement D.46230_120 = rtcp_frame.ntp_lsw;

Updating SSA information for statement snprintf (&value, 30, D.46228_119, D.46230_120);

Updating SSA information for statement event.132_121 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_121, 1, "NTP-Least-Significant-Word", &value);

Updating SSA information for statement D.46231_123 = rtcp_frame.timestamp;

Updating SSA information for statement snprintf (&value, 30, D.46228_122, D.46231_123);

Updating SSA information for statement event.132_124 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_124, 1, "RTP-Timestamp", &value);

Updating SSA information for statement D.46232_126 = rtcp_frame.packet_count;

Updating SSA information for statement snprintf (&value, 30, D.46228_125, D.46232_126);

Updating SSA information for statement event.132_127 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_127, 1, "Sender-Packet-Count", &value);

Updating SSA information for statement D.46233_129 = rtcp_frame.octect_count;

Updating SSA information for statement snprintf (&value, 30, D.46228_128, D.46233_129);

Updating SSA information for statement event.132_130 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_130, 1, "Octect-Packet-Count", &value);

Updating SSA information for statement D.46235_132 = engine_21->read_frame.timestamp;

Updating SSA information for statement snprintf (&value, 30, D.46234_131, D.46235_132);

Updating SSA information for statement event.132_133 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_133, 1, "Last-RTP-Timestamp", &value);

Updating SSA information for statement D.46236_135 = engine_21->read_frame.rate;

Updating SSA information for statement snprintf (&value, 30, D.46228_134, D.46236_135);

Updating SSA information for statement event.132_136 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_136, 1, "RTP-Rate", &value);

Updating SSA information for statement D.46238_138 = switch_time_now ();

Updating SSA information for statement snprintf (&value, 30, D.46237_137, D.46238_138);

Updating SSA information for statement event.132_139 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_139, 1, "Capture-Time", &value);



Registering new PHI nodes in block #54

Updating SSA information for statement D.46254_141 = rtcp_frame.report_count;



Registering new PHI nodes in block #53

Updating SSA information for statement snprintf (&header, 50, D.46239_143, i_7);

Updating SSA information for statement D.46240_145 = rtcp_frame.reports[i_7].ssrc;

Updating SSA information for statement snprintf (&value, 30, D.46226_144, D.46240_145);

Updating SSA information for statement event.132_146 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_146, 1, &header, &value);

Updating SSA information for statement snprintf (&header, 50, D.46241_147, i_7);

Updating SSA information for statement D.46242_149 = rtcp_frame.reports[i_7].fraction;

Updating SSA information for statement snprintf (&value, 30, D.46228_148, D.46243_150);

Updating SSA information for statement event.132_151 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_151, 1, &header, &value);

Updating SSA information for statement snprintf (&header, 50, D.46244_152, i_7);

Updating SSA information for statement D.46245_154 = rtcp_frame.reports[i_7].lost;

Updating SSA information for statement snprintf (&value, 30, D.46228_153, D.46245_154);

Updating SSA information for statement event.132_155 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_155, 1, &header, &value);

Updating SSA information for statement snprintf (&header, 50, D.46246_156, i_7);

Updating SSA information for statement D.46247_158 = rtcp_frame.reports[i_7].highest_sequence_number_received;

Updating SSA information for statement snprintf (&value, 30, D.46228_157, D.46247_158);

Updating SSA information for statement event.132_159 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_159, 1, &header, &value);

Updating SSA information for statement snprintf (&header, 50, D.46248_160, i_7);

Updating SSA information for statement D.46249_162 = rtcp_frame.reports[i_7].jitter;

Updating SSA information for statement snprintf (&value, 30, D.46228_161, D.46249_162);

Updating SSA information for statement event.132_163 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_163, 1, &header, &value);

Updating SSA information for statement snprintf (&header, 50, D.46250_164, i_7);

Updating SSA information for statement D.46251_166 = rtcp_frame.reports[i_7].lsr;

Updating SSA information for statement snprintf (&value, 30, D.46228_165, D.46251_166);

Updating SSA information for statement event.132_167 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_167, 1, &header, &value);

Updating SSA information for statement snprintf (&header, 50, D.46252_168, i_7);

Updating SSA information for statement D.46253_170 = rtcp_frame.reports[i_7].dlsr;

Updating SSA information for statement snprintf (&value, 30, D.46228_169, D.46253_170);

Updating SSA information for statement event.132_171 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_171, 1, &header, &value);



Registering new PHI nodes in block #55

Updating SSA information for statement switch_event_fire_detailed ("src/switch_core_media.c", &__func__, 1809, &event, 0B);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1810, session_13(D), 110, "Dispatched RTCP event\n");



Registering new PHI nodes in block #56

Updating SSA information for statement D.46256_173 = engine_21->read_frame.flags;



Registering new PHI nodes in block #57

Updating SSA information for statement *frame_52(D) = D.46162_175;



Registering new PHI nodes in block #58

Updating SSA information for statement D.46140_177 = engine_21->rtp_session;

Updating SSA information for statement D.46260_178 = switch_rtp_has_dtmf (D.46140_177);



Registering new PHI nodes in block #59

Updating SSA information for statement dtmf = {};

Updating SSA information for statement D.46140_179 = engine_21->rtp_session;

Updating SSA information for statement switch_rtp_dequeue_dtmf (D.46140_179, &dtmf);

Updating SSA information for statement D.46145_180 = session_13(D)->channel;

Updating SSA information for statement switch_channel_queue_dtmf (D.46145_180, &dtmf);



Registering new PHI nodes in block #60

Updating SSA information for statement D.46263_181 = engine_21->read_frame.datalen;



Registering new PHI nodes in block #61

Updating SSA information for statement D.46256_184 = engine_21->read_frame.flags;



Registering new PHI nodes in block #62

Updating SSA information for statement D.46136_186 = engine_21->read_codec.implementation;



Registering new PHI nodes in block #63

Updating SSA information for statement D.46272_188 = switch_core_codec_ready (D.46138_187);



Registering new PHI nodes in block #65

Updating SSA information for statement D.46273_189 = smh_14->media_flags[2];



Registering new PHI nodes in block #66

Updating SSA information for statement D.46276_190 = engine_21->check_frames;



Registering new PHI nodes in block #67

Updating SSA information for statement D.46276_191 = engine_21->check_frames;

Updating SSA information for statement engine_21->check_frames = D.46279_192;

Updating SSA information for statement D.46176_193 = engine_21->read_impl.encoded_bytes_per_packet;



Registering new PHI nodes in block #68

Updating SSA information for statement engine_21->check_frames = 50;



Registering new PHI nodes in block #69

Updating SSA information for statement D.46273_194 = smh_14->media_flags[2];



Registering new PHI nodes in block #70

Updating SSA information for statement D.46263_195 = engine_21->read_frame.datalen;



Registering new PHI nodes in block #71

Updating SSA information for statement D.46289_197 = engine_21->last_ts;



Registering new PHI nodes in block #72

Updating SSA information for statement D.46263_198 = engine_21->read_frame.datalen;

Updating SSA information for statement D.46176_199 = engine_21->read_impl.encoded_bytes_per_packet;



Registering new PHI nodes in block #73

Updating SSA information for statement D.46235_200 = engine_21->read_frame.timestamp;

Updating SSA information for statement D.46289_201 = engine_21->last_ts;

Updating SSA information for statement D.46201_203 = engine_21->read_impl.samples_per_second;



Registering new PHI nodes in block #74

Updating SSA information for statement D.46204_207 = engine_21->read_impl.samples_per_packet;



Registering new PHI nodes in block #76

Updating SSA information for statement D.46299_209 = engine_21->last_codec_ms;



Registering new PHI nodes in block #77

Updating SSA information for statement D.46299_210 = engine_21->last_codec_ms;



Registering new PHI nodes in block #78

Updating SSA information for statement D.46304_211 = engine_21->mismatch_count;

Updating SSA information for statement engine_21->mismatch_count = D.46305_212;



Registering new PHI nodes in block #79

Updating SSA information for statement engine_21->last_codec_ms = codec_ms_205;

Updating SSA information for statement D.46304_213 = engine_21->mismatch_count;



Registering new PHI nodes in block #80

Updating SSA information for statement D.46308_214 = engine_21->cur_payload_map;

Updating SSA information for statement D.46309_215 = D.46308_214->codec_ms;



Registering new PHI nodes in block #81



Registering new PHI nodes in block #82

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1871, session_13(D), 4, "Your phone is trying to send timestamps that suggest an increment of %dms per packet\nThat seems hard to believe so I am going to go on ahead and um ignore that, mmkay?\n", codec_ms.133_216);

Updating SSA information for statement engine_21->check_frames = 50;



Registering new PHI nodes in block #83

Updating SSA information for statement engine_21->read_frame.datalen = 0;

Updating SSA information for statement D.46308_217 = engine_21->cur_payload_map;

Updating SSA information for statement D.46309_218 = D.46308_217->codec_ms;



Registering new PHI nodes in block #84

Updating SSA information for statement D.46308_219 = engine_21->cur_payload_map;

Updating SSA information for statement D.46309_220 = D.46308_219->codec_ms;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1882, session_13(D), 4, "Asynchronous PTIME not supported, changing our end from %d to %d\n", D.46317_221, codec_ms.133_222);

Updating SSA information for statement D.46145_223 = session_13(D)->channel;

Updating SSA information for statement D.46308_224 = engine_21->cur_payload_map;

Updating SSA information for statement D.46309_225 = D.46308_224->codec_ms;

Updating SSA information for statement switch_channel_set_variable_printf (D.46145_223, "rtp_h_X-Broken-PTIME", "Adv=%d;Sent=%d", D.46317_226, codec_ms.133_227);

Updating SSA information for statement D.46308_228 = engine_21->cur_payload_map;

Updating SSA information for statement D.46308_228->codec_ms = codec_ms_205;

Updating SSA information for statement engine_21->reset_codec = 2;



Registering new PHI nodes in block #75

Updating SSA information for statement engine_21->last_ts = 0;



Registering new PHI nodes in block #85

Updating SSA information for statement engine_21->mismatch_count = 0;



Registering new PHI nodes in block #86

Updating SSA information for statement D.46235_229 = engine_21->read_frame.timestamp;

Updating SSA information for statement engine_21->last_ts = D.46235_229;



Registering new PHI nodes in block #87

Updating SSA information for statement engine_21->mismatch_count = 0;

Updating SSA information for statement engine_21->last_ts = 0;



Registering new PHI nodes in block #88

Updating SSA information for statement D.46179_230 = engine_21->reset_codec;



Registering new PHI nodes in block #89

Updating SSA information for statement D.46324_231 = engine_21->codec_negotiated;



Registering new PHI nodes in block #90

Updating SSA information for statement D.46327_232 = smh_14->mparams;

Updating SSA information for statement D.46328_233 = D.46327_232->cng_pt;



Registering new PHI nodes in block #91

Updating SSA information for statement D.46330_234 = engine_21->read_frame.payload;

Updating SSA information for statement D.46327_235 = smh_14->mparams;

Updating SSA information for statement D.46328_236 = D.46327_235->cng_pt;



Registering new PHI nodes in block #92

Updating SSA information for statement D.46327_237 = smh_14->mparams;

Updating SSA information for statement D.46331_238 = D.46327_237->recv_te;



Registering new PHI nodes in block #93

Updating SSA information for statement D.46330_239 = engine_21->read_frame.payload;

Updating SSA information for statement D.46327_240 = smh_14->mparams;

Updating SSA information for statement D.46331_241 = D.46327_240->recv_te;



Registering new PHI nodes in block #94

Updating SSA information for statement D.46327_242 = smh_14->mparams;

Updating SSA information for statement D.46333_243 = D.46327_242->te;



Registering new PHI nodes in block #95

Updating SSA information for statement D.46330_244 = engine_21->read_frame.payload;

Updating SSA information for statement D.46327_245 = smh_14->mparams;

Updating SSA information for statement D.46333_246 = D.46327_245->te;



Registering new PHI nodes in block #96

Updating SSA information for statement D.46330_247 = engine_21->read_frame.payload;

Updating SSA information for statement D.46308_248 = engine_21->cur_payload_map;

Updating SSA information for statement D.46335_249 = D.46308_248->recv_pt;



Registering new PHI nodes in block #97

Updating SSA information for statement D.46330_250 = engine_21->read_frame.payload;

Updating SSA information for statement D.46308_251 = engine_21->cur_payload_map;

Updating SSA information for statement D.46338_252 = D.46308_251->agreed_pt;



Registering new PHI nodes in block #98

Updating SSA information for statement D.46330_253 = engine_21->read_frame.payload;

Updating SSA information for statement D.46308_254 = engine_21->cur_payload_map;

Updating SSA information for statement D.46341_255 = D.46308_254->pt;



Registering new PHI nodes in block #99

Updating SSA information for statement D.46330_256 = engine_21->read_frame.payload;

Updating SSA information for statement D.46308_258 = engine_21->cur_payload_map;

Updating SSA information for statement D.46338_259 = D.46308_258->agreed_pt;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1926, session_13(D), 7, "alternate payload received (received %d, expecting %d)\n", D.46344_257, D.46345_260);

Updating SSA information for statement D.46346_261 = smh_14->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.46346_261);

Updating SSA information for statement pmap_262 = engine_21->payload_map;



Registering new PHI nodes in block #104



Registering new PHI nodes in block #100

Updating SSA information for statement D.46330_263 = engine_21->read_frame.payload;

Updating SSA information for statement D.46347_264 = pmap_9->recv_pt;



Registering new PHI nodes in block #101

Updating SSA information for statement D.46350_265 = pmap_9->negotiated;



Registering new PHI nodes in block #102

Updating SSA information for statement engine_21->cur_payload_map = pmap_9;

Updating SSA information for statement D.46308_266 = engine_21->cur_payload_map;

Updating SSA information for statement D.46308_266->current = 1;

Updating SSA information for statement D.46353_267 = pmap_9->iananame;

Updating SSA information for statement D.46354_268 = pmap_9->pt;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1937, session_13(D), 4, "Changing current codec to %s (payload type %d).\n", D.46353_267, D.46355_269);

Updating SSA information for statement engine_21->reset_codec = 1;



Registering new PHI nodes in block #103

Updating SSA information for statement pmap_270 = pmap_9->next;



Registering new PHI nodes in block #105

Updating SSA information for statement D.46346_271 = smh_14->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.46346_271);

Updating SSA information for statement D.46179_272 = engine_21->reset_codec;



Registering new PHI nodes in block #106

Updating SSA information for statement D.46330_273 = engine_21->read_frame.payload;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1949, session_13(D), 4, "Could not change to payload type %d, ignoring...\n", D.46344_274);



Registering new PHI nodes in block #107

Updating SSA information for statement bytes_275 = engine_21->read_impl.encoded_bytes_per_packet;



Registering new PHI nodes in block #108

Updating SSA information for statement D.46263_276 = engine_21->read_frame.datalen;



Registering new PHI nodes in block #109

Updating SSA information for statement D.46204_279 = engine_21->read_impl.samples_per_packet;

Updating SSA information for statement engine_21->read_frame.samples = D.46362_281;

Updating SSA information for statement D.46263_282 = engine_21->read_frame.datalen;



Registering new PHI nodes in block #110



Registering new PHI nodes in block #64

Updating SSA information for statement *frame_52(D) = 0B;



Registering new PHI nodes in block #113

Updating SSA information for statement D.46263_284 = engine_21->read_frame.datalen;



Registering new PHI nodes in block #114

Updating SSA information for statement *frame_52(D) = 0B;



Registering new PHI nodes in block #115

Updating SSA information for statement *frame_52(D) = D.46162_285;



Registering new PHI nodes in block #116

Updating SSA information for statement D.46151_287 = engine_21->read_mutex[type_19(D)];



Registering new PHI nodes in block #117

Updating SSA information for statement D.46151_288 = engine_21->read_mutex[type_19(D)];

Updating SSA information for statement switch_mutex_unlock (D.46151_288);



Registering new PHI nodes in block #118



Registering new PHI nodes in block #16



Registering new PHI nodes in block #10



Registering new PHI nodes in block #119



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 120
Number of blocks to update: 119 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtcp_frame_t rtcp_frame;
  struct switch_rtp_engine_t * engine;
  switch_status_t status;
  struct switch_media_handle_t * smh;
  int do_cng;
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_read_frame";
  static const char __func__[29] = "switch_core_media_read_frame";
  void end = <<< error >>>; (unused)
  void skip = <<< error >>>; (unused)

  { Scope block #0 
    const char * val;
    int rtp_timeout_sec;
    int rtp_hold_timeout_sec;

    { Scope block #0 
      int v;

    }

    { Scope block #0 
      int v;

    }

  }

  { Scope block #0 
    struct switch_event_t * event;

    { Scope block #0 
      char value[30];
      char header[50];
      int i;
      char * uuid;

    }

  }

  { Scope block #0 
    struct switch_dtmf_t dtmf;

  }

  { Scope block #0 
    uint32_t bytes;
    int frames;

    { Scope block #0 
      uint32_t codec_ms;

    }

    { Scope block #0 
      struct payload_map_t * pmap;

    }

  }

}
switch_core_media_read_frame (struct switch_core_session_t * session, struct switch_frame_t * * frame, switch_io_flag_t flags, int stream_id, switch_media_type_t type)
{
  struct payload_map_t * pmap;
  uint32_t codec_ms;
  int frames;
  uint32_t bytes;
  struct switch_dtmf_t dtmf;
  char * uuid;
  int i;
  char header[50];
  char value[30];
  struct switch_event_t * event;
  int v;
  int v;
  int rtp_hold_timeout_sec;
  int rtp_timeout_sec;
  const char * val;
  static const char __func__[29] = "switch_core_media_read_frame";
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_read_frame";
  int do_cng;
  struct switch_media_handle_t * smh;
  switch_status_t status;
  struct switch_rtp_engine_t * engine;
  struct switch_rtcp_frame_t rtcp_frame;
  uint32_t D.46362;
  uint32_t frames.134;
  uint32_t D.46360;
  int D.46355;
  switch_payload_t D.46354;
  char * D.46353;
  uint8_t D.46350;
  switch_payload_t D.46347;
  struct switch_mutex_t * D.46346;
  int D.46345;
  int D.46344;
  switch_payload_t D.46341;
  switch_payload_t D.46338;
  switch_payload_t D.46335;
  switch_payload_t D.46333;
  switch_payload_t D.46331;
  switch_payload_t D.46330;
  switch_payload_t D.46328;
  struct switch_core_media_params_t * D.46327;
  uint8_t D.46324;
  int D.46317;
  int codec_ms.133;
  uint32_t D.46309;
  struct payload_map_t * D.46308;
  uint32_t D.46305;
  uint32_t D.46304;
  uint32_t D.46299;
  uint32_t D.46298;
  uint32_t D.46296;
  uint32_t D.46293;
  switch_size_t D.46292;
  switch_size_t D.46289;
  uint32_t D.46285;
  uint32_t D.46279;
  uint32_t D.46276;
  switch_core_media_flag_t D.46273;
  switch_bool_t D.46272;
  switch_frame_flag_t D.46266;
  uint32_t D.46263;
  switch_size_t D.46260;
  switch_frame_flag_t D.46257;
  switch_frame_flag_t D.46256;
  int D.46255;
  uint16_t D.46254;
  uint32_t D.46253;
  const char * restrict D.46252;
  uint32_t D.46251;
  const char * restrict D.46250;
  uint32_t D.46249;
  const char * restrict D.46248;
  uint32_t D.46247;
  const char * restrict D.46246;
  uint32_t D.46245;
  const char * restrict D.46244;
  int D.46243;
  uint8_t D.46242;
  const char * restrict D.46241;
  uint32_t D.46240;
  const char * restrict D.46239;
  switch_time_t D.46238;
  const char * restrict D.46237;
  uint32_t D.46236;
  switch_size_t D.46235;
  const char * restrict D.46234;
  uint32_t D.46233;
  uint32_t D.46232;
  uint32_t D.46231;
  uint32_t D.46230;
  uint32_t D.46229;
  const char * restrict D.46228;
  uint32_t D.46227;
  const char * restrict D.46226;
  char * D.46225;
  struct switch_event_t * event.132;
  switch_status_t D.46219;
  switch_status_t D.46216;
  uint32_t D.46213;
  uint32_t D.46212;
  uint32_t rtp_hold_timeout_sec.131;
  uint32_t D.46206;
  uint32_t D.46205;
  uint32_t D.46204;
  uint32_t D.46203;
  uint32_t rtp_timeout_sec.130;
  uint32_t D.46201;
  switch_status_t D.46188;
  uint8_t D.46182;
  uint8_t D.46179;
  uint32_t D.46178;
  void * D.46177;
  uint32_t D.46176;
  switch_frame_flag_t D.46175;
  switch_frame_flag_t D.46174;
  struct switch_frame_t * D.46173;
  const char * D.46170;
  _Bool D.46165;
  _Bool D.46164;
  _Bool D.46163;
  struct switch_frame_t * D.46162;
  char * iftmp.129;
  char * D.46157;
  switch_status_t D.46154;
  struct switch_mutex_t * D.46151;
  uint32_t D.46150;
  uint8_t D.46148;
  switch_channel_state_t D.46146;
  struct switch_channel_t * D.46145;
  struct switch_rtp_t * D.46140;
  switch_bool_t D.46139;
  struct switch_codec_t * D.46138;
  const struct switch_codec_implementation_t * D.46136;
  unsigned int D.46133;
  struct switch_rtp_engine_t[2] * D.46132;
  switch_core_media_flag_t D.46129;
  switch_status_t D.46128;

<bb 2>:
  do_cng_12 = 0;
  # DEBUG do_cng => do_cng_12
  if (session_13(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 1623, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_14 = session_13(D)->media_handle;
  # DEBUG smh => smh_14
  if (smh_14 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.46128_15 = 1;
  goto <bb 119>;

<bb 6>:
  D.46129_16 = smh_14->media_flags[0];
  if (D.46129_16 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.46128_17 = 1;
  goto <bb 119>;

<bb 8>:
  D.46132_18 = &smh_14->engines;
  D.46133_20 = type_19(D) * 11416;
  engine_21 = D.46132_18 + D.46133_20;
  # DEBUG engine => engine_21
  engine_21->read_frame.datalen = 0;
  D.46136_22 = engine_21->read_codec.implementation;
  if (D.46136_22 == 0B)
    goto <bb 10>;
  else
    goto <bb 9>;

<bb 9>:
  D.46138_23 = &engine_21->read_codec;
  D.46139_24 = switch_core_codec_ready (D.46138_23);
  if (D.46139_24 == 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.46128_291 = 1;
  goto <bb 119>;

<bb 11>:
  D.46140_25 = engine_21->rtp_session;
  if (D.46140_25 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  __assert_fail ("engine->rtp_session != ((void *)0)", "src/switch_core_media.c", 1641, &__PRETTY_FUNCTION__);

<bb 13>:
  engine_21->read_frame.datalen = 0;
  D.46145_26 = session_13(D)->channel;
  D.46146_27 = switch_channel_get_state (D.46145_26);
  if (D.46146_27 > 9)
    goto <bb 16>;
  else
    goto <bb 14>;

<bb 14>:
  D.46140_28 = engine_21->rtp_session;
  D.46148_29 = switch_rtp_ready (D.46140_28);
  if (D.46148_29 == 0)
    goto <bb 16>;
  else
    goto <bb 15>;

<bb 15>:
  D.46145_30 = session_13(D)->channel;
  D.46150_31 = switch_channel_test_flag (D.46145_30, 45);
  if (D.46150_31 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.46128_290 = 1;
  goto <bb 119>;

<bb 17>:
  D.46151_32 = engine_21->read_mutex[type_19(D)];
  if (D.46151_32 != 0B)
    goto <bb 18>;
  else
    goto <bb 111>;

<bb 18>:
  D.46151_33 = engine_21->read_mutex[type_19(D)];
  D.46154_34 = switch_mutex_trylock (D.46151_33);
  if (D.46154_34 != 0)
    goto <bb 19>;
  else
    goto <bb 111>;

<bb 19>:
  D.46145_35 = session_13(D)->channel;
  D.46157_36 = switch_channel_get_name (D.46145_35);
  if (type_19(D) == 1)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  iftmp.129_37 = "video";
  goto <bb 22>;

<bb 21>:
  iftmp.129_38 = "audio";

<bb 22>:
  # iftmp.129_11 = PHI <iftmp.129_37(20), iftmp.129_38(21)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1650, session_13(D), 101, "%s is already being read for %s\n", D.46157_36, iftmp.129_11);
  D.46128_39 = 10;
  goto <bb 119>;

<bb 23>:
  engine_21->read_frame.flags = 0;
  D.46140_42 = engine_21->rtp_session;
  D.46162_43 = &engine_21->read_frame;
  status_45 = switch_rtp_zerocopy_read_frame (D.46140_42, D.46162_43, flags_44(D));
  # DEBUG status => status_45
  D.46163_46 = status_45 != 0;
  D.46164_47 = status_45 != 11;
  D.46165_48 = D.46163_46 && D.46164_47;
  if (D.46165_48 != 0)
    goto <bb 24>;
  else
    goto <bb 28>;

<bb 24>:
  if (status_45 == 2)
    goto <bb 25>;
  else
    goto <bb 116> (end);

<bb 25>:
  D.46145_49 = session_13(D)->channel;
  D.46170_50 = switch_channel_get_variable_dup (D.46145_49, "execute_on_media_timeout", 1, -1);
  if (D.46170_50 != 0B)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  D.46162_51 = &engine_21->read_frame;
  *frame_52(D) = D.46162_51;
  D.46173_53 = *frame_52(D);
  D.46173_54 = *frame_52(D);
  D.46174_55 = D.46173_54->flags;
  D.46175_56 = D.46174_55 | 1;
  D.46173_54->flags = D.46175_56;
  D.46173_57 = *frame_52(D);
  D.46176_58 = engine_21->read_impl.encoded_bytes_per_packet;
  D.46173_57->datalen = D.46176_58;
  D.46173_59 = *frame_52(D);
  D.46177_60 = D.46173_59->data;
  D.46173_61 = *frame_52(D);
  D.46178_62 = D.46173_61->datalen;
  memset (D.46177_60, 0, D.46178_62);
  D.46145_63 = session_13(D)->channel;
  switch_channel_execute_on (D.46145_63, "execute_on_media_timeout");
  status_64 = 0;
  # DEBUG status => status_64
  goto <bb 116> (end);

<bb 27>:
  D.46145_65 = session_13(D)->channel;
  switch_channel_perform_hangup (D.46145_65, "src/switch_core_media.c", &__func__, 1674, 604);
  goto <bb 116> (end);

<bb 28>:
  D.46179_66 = engine_21->reset_codec;
  if (D.46179_66 != 0)
    goto <bb 29>;
  else
    goto <bb 46>;

<bb 29>:
  rtp_timeout_sec_67 = 0;
  # DEBUG rtp_timeout_sec => rtp_timeout_sec_67
  rtp_hold_timeout_sec_68 = 0;
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_68
  engine_21->reset_codec = 0;
  D.46140_69 = engine_21->rtp_session;
  D.46182_70 = switch_rtp_ready (D.46140_69);
  if (D.46182_70 != 0)
    goto <bb 30>;
  else
    goto <bb 45>;

<bb 30>:
  if (type_19(D) == 1)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  switch_core_media_set_video_codec (session_13(D), 1);
  goto <bb 34>;

<bb 32>:
  D.46188_71 = switch_core_media_set_codec (session_13(D), 1, 0);
  if (D.46188_71 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  *frame_52(D) = 0B;
  status_72 = 9;
  # DEBUG status => status_72
  goto <bb 116> (end);

<bb 34>:
  D.46145_73 = session_13(D)->channel;
  val_74 = switch_channel_get_variable_dup (D.46145_73, "rtp_timeout_sec", 1, -1);
  # DEBUG val => val_74
  if (val_74 != 0B)
    goto <bb 35>;
  else
    goto <bb 37>;

<bb 35>:
  v_75 = atoi (val_74);
  # DEBUG v => v_75
  if (v_75 >= 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  rtp_timeout_sec_76 = v_75;
  # DEBUG rtp_timeout_sec => rtp_timeout_sec_76

<bb 37>:
  # rtp_timeout_sec_4 = PHI <rtp_timeout_sec_67(34), rtp_timeout_sec_67(35), rtp_timeout_sec_76(36)>
  # DEBUG rtp_timeout_sec => rtp_timeout_sec_4
  D.46145_77 = session_13(D)->channel;
  val_78 = switch_channel_get_variable_dup (D.46145_77, "rtp_hold_timeout_sec", 1, -1);
  # DEBUG val => val_78
  if (val_78 != 0B)
    goto <bb 38>;
  else
    goto <bb 40>;

<bb 38>:
  v_79 = atoi (val_78);
  # DEBUG v => v_79
  if (v_79 >= 0)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  rtp_hold_timeout_sec_80 = v_79;
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_80

<bb 40>:
  # rtp_hold_timeout_sec_5 = PHI <rtp_hold_timeout_sec_68(37), rtp_hold_timeout_sec_68(38), rtp_hold_timeout_sec_80(39)>
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_5
  if (rtp_timeout_sec_4 != 0)
    goto <bb 41>;
  else
    goto <bb 43>;

<bb 41>:
  D.46201_81 = engine_21->read_impl.samples_per_second;
  rtp_timeout_sec.130_82 = (uint32_t) rtp_timeout_sec_4;
  D.46203_83 = D.46201_81 * rtp_timeout_sec.130_82;
  D.46204_84 = engine_21->read_impl.samples_per_packet;
  D.46205_85 = D.46203_83 / D.46204_84;
  engine_21->max_missed_packets = D.46205_85;
  D.46140_86 = engine_21->rtp_session;
  D.46206_87 = engine_21->max_missed_packets;
  switch_rtp_set_max_missed_packets (D.46140_86, D.46206_87);
  if (rtp_hold_timeout_sec_5 == 0)
    goto <bb 42>;
  else
    goto <bb 43>;

<bb 42>:
  rtp_hold_timeout_sec_88 = rtp_timeout_sec_4 * 10;
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_88

<bb 43>:
  # rtp_hold_timeout_sec_6 = PHI <rtp_hold_timeout_sec_5(40), rtp_hold_timeout_sec_5(41), rtp_hold_timeout_sec_88(42)>
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_6
  if (rtp_hold_timeout_sec_6 != 0)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  D.46201_89 = engine_21->read_impl.samples_per_second;
  rtp_hold_timeout_sec.131_90 = (uint32_t) rtp_hold_timeout_sec_6;
  D.46212_91 = D.46201_89 * rtp_hold_timeout_sec.131_90;
  D.46204_92 = engine_21->read_impl.samples_per_packet;
  D.46213_93 = D.46212_91 / D.46204_92;
  engine_21->max_missed_hold_packets = D.46213_93;

<bb 45>:
  engine_21->check_frames = 0;
  engine_21->last_ts = 0;
  do_cng_94 = 1;
  # DEBUG do_cng => do_cng_94

<bb 46>:
  # do_cng_2 = PHI <do_cng_3(28), do_cng_94(45)>
  # DEBUG do_cng => do_cng_2
  if (do_cng_2 != 0)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.46162_95 = &engine_21->read_frame;
  *frame_52(D) = D.46162_95;
  D.46173_96 = *frame_52(D);
  D.46173_97 = *frame_52(D);
  D.46174_98 = D.46173_97->flags;
  D.46175_99 = D.46174_98 | 1;
  D.46173_97->flags = D.46175_99;
  D.46173_100 = *frame_52(D);
  D.46176_101 = engine_21->read_impl.encoded_bytes_per_packet;
  D.46173_100->datalen = D.46176_101;
  D.46173_102 = *frame_52(D);
  D.46177_103 = D.46173_102->data;
  D.46173_104 = *frame_52(D);
  D.46178_105 = D.46173_104->datalen;
  memset (D.46177_103, 0, D.46178_105);
  status_106 = 0;
  # DEBUG status => status_106
  goto <bb 116> (end);

<bb 48>:
  D.46140_107 = engine_21->rtp_session;
  D.46216_108 = switch_rtcp_zerocopy_read_frame (D.46140_107, &rtcp_frame);
  if (D.46216_108 == 0)
    goto <bb 49>;
  else
    goto <bb 56>;

<bb 49>:
  D.46219_109 = switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 1747, &event, 71, 0B);
  if (D.46219_109 == 0)
    goto <bb 50>;
  else
    goto <bb 56>;

<bb 50>:
  uuid_110 = switch_core_session_get_uuid (session_13(D));
  # DEBUG uuid => uuid_110
  if (uuid_110 != 0B)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  event.132_111 = event;
  D.46225_112 = switch_core_session_get_uuid (session_13(D));
  switch_event_add_header_string (event.132_111, 1, "Unique-ID", D.46225_112);

<bb 52>:
  D.46226_113 = (const char * restrict) &"%.8x"[0];
  D.46227_114 = rtcp_frame.ssrc;
  snprintf (&value, 30, D.46226_113, D.46227_114);
  event.132_115 = event;
  switch_event_add_header_string (event.132_115, 1, "SSRC", &value);
  D.46228_116 = (const char * restrict) &"%u"[0];
  D.46229_117 = rtcp_frame.ntp_msw;
  snprintf (&value, 30, D.46228_116, D.46229_117);
  event.132_118 = event;
  switch_event_add_header_string (event.132_118, 1, "NTP-Most-Significant-Word", &value);
  D.46228_119 = (const char * restrict) &"%u"[0];
  D.46230_120 = rtcp_frame.ntp_lsw;
  snprintf (&value, 30, D.46228_119, D.46230_120);
  event.132_121 = event;
  switch_event_add_header_string (event.132_121, 1, "NTP-Least-Significant-Word", &value);
  D.46228_122 = (const char * restrict) &"%u"[0];
  D.46231_123 = rtcp_frame.timestamp;
  snprintf (&value, 30, D.46228_122, D.46231_123);
  event.132_124 = event;
  switch_event_add_header_string (event.132_124, 1, "RTP-Timestamp", &value);
  D.46228_125 = (const char * restrict) &"%u"[0];
  D.46232_126 = rtcp_frame.packet_count;
  snprintf (&value, 30, D.46228_125, D.46232_126);
  event.132_127 = event;
  switch_event_add_header_string (event.132_127, 1, "Sender-Packet-Count", &value);
  D.46228_128 = (const char * restrict) &"%u"[0];
  D.46233_129 = rtcp_frame.octect_count;
  snprintf (&value, 30, D.46228_128, D.46233_129);
  event.132_130 = event;
  switch_event_add_header_string (event.132_130, 1, "Octect-Packet-Count", &value);
  D.46234_131 = (const char * restrict) &"%d"[0];
  D.46235_132 = engine_21->read_frame.timestamp;
  snprintf (&value, 30, D.46234_131, D.46235_132);
  event.132_133 = event;
  switch_event_add_header_string (event.132_133, 1, "Last-RTP-Timestamp", &value);
  D.46228_134 = (const char * restrict) &"%u"[0];
  D.46236_135 = engine_21->read_frame.rate;
  snprintf (&value, 30, D.46228_134, D.46236_135);
  event.132_136 = event;
  switch_event_add_header_string (event.132_136, 1, "RTP-Rate", &value);
  D.46237_137 = (const char * restrict) &"%lld"[0];
  D.46238_138 = switch_time_now ();
  snprintf (&value, 30, D.46237_137, D.46238_138);
  event.132_139 = event;
  switch_event_add_header_string (event.132_139, 1, "Capture-Time", &value);
  i_140 = 0;
  # DEBUG i => i_140
  goto <bb 54>;

<bb 53>:
  D.46239_143 = (const char * restrict) &"Source%u-SSRC"[0];
  snprintf (&header, 50, D.46239_143, i_7);
  D.46226_144 = (const char * restrict) &"%.8x"[0];
  D.46240_145 = rtcp_frame.reports[i_7].ssrc;
  snprintf (&value, 30, D.46226_144, D.46240_145);
  event.132_146 = event;
  switch_event_add_header_string (event.132_146, 1, &header, &value);
  D.46241_147 = (const char * restrict) &"Source%u-Fraction"[0];
  snprintf (&header, 50, D.46241_147, i_7);
  D.46228_148 = (const char * restrict) &"%u"[0];
  D.46242_149 = rtcp_frame.reports[i_7].fraction;
  D.46243_150 = (int) D.46242_149;
  snprintf (&value, 30, D.46228_148, D.46243_150);
  event.132_151 = event;
  switch_event_add_header_string (event.132_151, 1, &header, &value);
  D.46244_152 = (const char * restrict) &"Source%u-Lost"[0];
  snprintf (&header, 50, D.46244_152, i_7);
  D.46228_153 = (const char * restrict) &"%u"[0];
  D.46245_154 = rtcp_frame.reports[i_7].lost;
  snprintf (&value, 30, D.46228_153, D.46245_154);
  event.132_155 = event;
  switch_event_add_header_string (event.132_155, 1, &header, &value);
  D.46246_156 = (const char * restrict) &"Source%u-Highest-Sequence-Number-Received"[0];
  snprintf (&header, 50, D.46246_156, i_7);
  D.46228_157 = (const char * restrict) &"%u"[0];
  D.46247_158 = rtcp_frame.reports[i_7].highest_sequence_number_received;
  snprintf (&value, 30, D.46228_157, D.46247_158);
  event.132_159 = event;
  switch_event_add_header_string (event.132_159, 1, &header, &value);
  D.46248_160 = (const char * restrict) &"Source%u-Jitter"[0];
  snprintf (&header, 50, D.46248_160, i_7);
  D.46228_161 = (const char * restrict) &"%u"[0];
  D.46249_162 = rtcp_frame.reports[i_7].jitter;
  snprintf (&value, 30, D.46228_161, D.46249_162);
  event.132_163 = event;
  switch_event_add_header_string (event.132_163, 1, &header, &value);
  D.46250_164 = (const char * restrict) &"Source%u-LSR"[0];
  snprintf (&header, 50, D.46250_164, i_7);
  D.46228_165 = (const char * restrict) &"%u"[0];
  D.46251_166 = rtcp_frame.reports[i_7].lsr;
  snprintf (&value, 30, D.46228_165, D.46251_166);
  event.132_167 = event;
  switch_event_add_header_string (event.132_167, 1, &header, &value);
  D.46252_168 = (const char * restrict) &"Source%u-DLSR"[0];
  snprintf (&header, 50, D.46252_168, i_7);
  D.46228_169 = (const char * restrict) &"%u"[0];
  D.46253_170 = rtcp_frame.reports[i_7].dlsr;
  snprintf (&value, 30, D.46228_169, D.46253_170);
  event.132_171 = event;
  switch_event_add_header_string (event.132_171, 1, &header, &value);
  i_172 = i_7 + 1;
  # DEBUG i => i_172

<bb 54>:
  # i_7 = PHI <i_140(52), i_172(53)>
  # DEBUG i => i_7
  D.46254_141 = rtcp_frame.report_count;
  D.46255_142 = (int) D.46254_141;
  if (D.46255_142 > i_7)
    goto <bb 53>;
  else
    goto <bb 55>;

<bb 55>:
  switch_event_fire_detailed ("src/switch_core_media.c", &__func__, 1809, &event, 0B);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1810, session_13(D), 110, "Dispatched RTCP event\n");

<bb 56>:
  D.46256_173 = engine_21->read_frame.flags;
  D.46257_174 = D.46256_173 & 32;
  if (D.46257_174 != 0)
    goto <bb 57>;
  else
    goto <bb 58>;

<bb 57>:
  D.46162_175 = &engine_21->read_frame;
  *frame_52(D) = D.46162_175;
  status_176 = 0;
  # DEBUG status => status_176
  goto <bb 116> (end);

<bb 58>:
  D.46140_177 = engine_21->rtp_session;
  D.46260_178 = switch_rtp_has_dtmf (D.46140_177);
  if (D.46260_178 != 0)
    goto <bb 59>;
  else
    goto <bb 60>;

<bb 59>:
  dtmf = {};
  D.46140_179 = engine_21->rtp_session;
  switch_rtp_dequeue_dtmf (D.46140_179, &dtmf);
  D.46145_180 = session_13(D)->channel;
  switch_channel_queue_dtmf (D.46145_180, &dtmf);

<bb 60>:
  D.46263_181 = engine_21->read_frame.datalen;
  if (D.46263_181 != 0)
    goto <bb 61>;
  else
    goto <bb 111>;

<bb 61>:
  bytes_182 = 0;
  # DEBUG bytes => bytes_182
  frames_183 = 1;
  # DEBUG frames => frames_183
  D.46256_184 = engine_21->read_frame.flags;
  D.46266_185 = D.46256_184 & 1;
  if (D.46266_185 == 0)
    goto <bb 62>;
  else
    goto <bb 113>;

<bb 62>:
  D.46136_186 = engine_21->read_codec.implementation;
  if (D.46136_186 == 0B)
    goto <bb 64>;
  else
    goto <bb 63>;

<bb 63>:
  D.46138_187 = &engine_21->read_codec;
  D.46272_188 = switch_core_codec_ready (D.46138_187);
  if (D.46272_188 == 0)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  *frame_52(D) = 0B;
  status_283 = 9;
  # DEBUG status => status_283
  goto <bb 116> (end);

<bb 65>:
  D.46273_189 = smh_14->media_flags[2];
  if (D.46273_189 != 0)
    goto <bb 66>;
  else
    goto <bb 88>;

<bb 66>:
  D.46276_190 = engine_21->check_frames;
  if (D.46276_190 <= 49)
    goto <bb 67>;
  else
    goto <bb 88>;

<bb 67>:
  D.46276_191 = engine_21->check_frames;
  D.46279_192 = D.46276_191 + 1;
  engine_21->check_frames = D.46279_192;
  D.46176_193 = engine_21->read_impl.encoded_bytes_per_packet;
  if (D.46176_193 == 0)
    goto <bb 68>;
  else
    goto <bb 69>;

<bb 68>:
  engine_21->check_frames = 50;
  goto <bb 107> (skip);

<bb 69>:
  D.46273_194 = smh_14->media_flags[2];
  if (D.46273_194 != 0)
    goto <bb 70>;
  else
    goto <bb 87>;

<bb 70>:
  D.46263_195 = engine_21->read_frame.datalen;
  D.46285_196 = D.46263_195 % 10;
  if (D.46285_196 == 0)
    goto <bb 71>;
  else
    goto <bb 87>;

<bb 71>:
  D.46289_197 = engine_21->last_ts;
  if (D.46289_197 != 0)
    goto <bb 72>;
  else
    goto <bb 85>;

<bb 72>:
  D.46263_198 = engine_21->read_frame.datalen;
  D.46176_199 = engine_21->read_impl.encoded_bytes_per_packet;
  if (D.46263_198 != D.46176_199)
    goto <bb 73>;
  else
    goto <bb 85>;

<bb 73>:
  D.46235_200 = engine_21->read_frame.timestamp;
  D.46289_201 = engine_21->last_ts;
  D.46292_202 = D.46235_200 - D.46289_201;
  D.46201_203 = engine_21->read_impl.samples_per_second;
  D.46293_204 = D.46201_203 / 1000;
  codec_ms_205 = D.46292_202 / D.46293_204;
  # DEBUG codec_ms => codec_ms_205
  D.46296_206 = codec_ms_205 % 10;
  if (D.46296_206 != 0)
    goto <bb 75>;
  else
    goto <bb 74>;

<bb 74>:
  D.46204_207 = engine_21->read_impl.samples_per_packet;
  D.46298_208 = D.46204_207 * 10;
  if (D.46298_208 < codec_ms_205)
    goto <bb 75>;
  else
    goto <bb 76>;

<bb 75>:
  engine_21->last_ts = 0;
  goto <bb 107> (skip);

<bb 76>:
  D.46299_209 = engine_21->last_codec_ms;
  if (D.46299_209 != 0)
    goto <bb 77>;
  else
    goto <bb 79>;

<bb 77>:
  D.46299_210 = engine_21->last_codec_ms;
  if (D.46299_210 == codec_ms_205)
    goto <bb 78>;
  else
    goto <bb 79>;

<bb 78>:
  D.46304_211 = engine_21->mismatch_count;
  D.46305_212 = D.46304_211 + 1;
  engine_21->mismatch_count = D.46305_212;

<bb 79>:
  engine_21->last_codec_ms = codec_ms_205;
  D.46304_213 = engine_21->mismatch_count;
  if (D.46304_213 > 5)
    goto <bb 80>;
  else
    goto <bb 86>;

<bb 80>:
  D.46308_214 = engine_21->cur_payload_map;
  D.46309_215 = D.46308_214->codec_ms;
  if (D.46309_215 != codec_ms_205)
    goto <bb 81>;
  else
    goto <bb 86>;

<bb 81>:
  if (codec_ms_205 > 120)
    goto <bb 82>;
  else
    goto <bb 83>;

<bb 82>:
  codec_ms.133_216 = (int) codec_ms_205;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1871, session_13(D), 4, "Your phone is trying to send timestamps that suggest an increment of %dms per packet\nThat seems hard to believe so I am going to go on ahead and um ignore that, mmkay?\n", codec_ms.133_216);
  engine_21->check_frames = 50;
  goto <bb 107> (skip);

<bb 83>:
  engine_21->read_frame.datalen = 0;
  D.46308_217 = engine_21->cur_payload_map;
  D.46309_218 = D.46308_217->codec_ms;
  if (D.46309_218 != codec_ms_205)
    goto <bb 84>;
  else
    goto <bb 86>;

<bb 84>:
  D.46308_219 = engine_21->cur_payload_map;
  D.46309_220 = D.46308_219->codec_ms;
  D.46317_221 = (int) D.46309_220;
  codec_ms.133_222 = (int) codec_ms_205;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1882, session_13(D), 4, "Asynchronous PTIME not supported, changing our end from %d to %d\n", D.46317_221, codec_ms.133_222);
  D.46145_223 = session_13(D)->channel;
  D.46308_224 = engine_21->cur_payload_map;
  D.46309_225 = D.46308_224->codec_ms;
  D.46317_226 = (int) D.46309_225;
  codec_ms.133_227 = (int) codec_ms_205;
  switch_channel_set_variable_printf (D.46145_223, "rtp_h_X-Broken-PTIME", "Adv=%d;Sent=%d", D.46317_226, codec_ms.133_227);
  D.46308_228 = engine_21->cur_payload_map;
  D.46308_228->codec_ms = codec_ms_205;
  engine_21->reset_codec = 2;
  goto <bb 86>;

<bb 85>:
  engine_21->mismatch_count = 0;

<bb 86>:
  D.46235_229 = engine_21->read_frame.timestamp;
  engine_21->last_ts = D.46235_229;
  goto <bb 88>;

<bb 87>:
  engine_21->mismatch_count = 0;
  engine_21->last_ts = 0;

<bb 88>:
  D.46179_230 = engine_21->reset_codec;
  if (D.46179_230 == 0)
    goto <bb 89>;
  else
    goto <bb 107> (skip);

<bb 89>:
  D.46324_231 = engine_21->codec_negotiated;
  if (D.46324_231 != 0)
    goto <bb 90>;
  else
    goto <bb 107> (skip);

<bb 90>:
  D.46327_232 = smh_14->mparams;
  D.46328_233 = D.46327_232->cng_pt;
  if (D.46328_233 == 0)
    goto <bb 92>;
  else
    goto <bb 91>;

<bb 91>:
  D.46330_234 = engine_21->read_frame.payload;
  D.46327_235 = smh_14->mparams;
  D.46328_236 = D.46327_235->cng_pt;
  if (D.46330_234 != D.46328_236)
    goto <bb 92>;
  else
    goto <bb 107> (skip);

<bb 92>:
  D.46327_237 = smh_14->mparams;
  D.46331_238 = D.46327_237->recv_te;
  if (D.46331_238 == 0)
    goto <bb 94>;
  else
    goto <bb 93>;

<bb 93>:
  D.46330_239 = engine_21->read_frame.payload;
  D.46327_240 = smh_14->mparams;
  D.46331_241 = D.46327_240->recv_te;
  if (D.46330_239 != D.46331_241)
    goto <bb 94>;
  else
    goto <bb 107> (skip);

<bb 94>:
  D.46327_242 = smh_14->mparams;
  D.46333_243 = D.46327_242->te;
  if (D.46333_243 == 0)
    goto <bb 96>;
  else
    goto <bb 95>;

<bb 95>:
  D.46330_244 = engine_21->read_frame.payload;
  D.46327_245 = smh_14->mparams;
  D.46333_246 = D.46327_245->te;
  if (D.46330_244 != D.46333_246)
    goto <bb 96>;
  else
    goto <bb 107> (skip);

<bb 96>:
  D.46330_247 = engine_21->read_frame.payload;
  D.46308_248 = engine_21->cur_payload_map;
  D.46335_249 = D.46308_248->recv_pt;
  if (D.46330_247 != D.46335_249)
    goto <bb 97>;
  else
    goto <bb 107> (skip);

<bb 97>:
  D.46330_250 = engine_21->read_frame.payload;
  D.46308_251 = engine_21->cur_payload_map;
  D.46338_252 = D.46308_251->agreed_pt;
  if (D.46330_250 != D.46338_252)
    goto <bb 98>;
  else
    goto <bb 107> (skip);

<bb 98>:
  D.46330_253 = engine_21->read_frame.payload;
  D.46308_254 = engine_21->cur_payload_map;
  D.46341_255 = D.46308_254->pt;
  if (D.46330_253 != D.46341_255)
    goto <bb 99>;
  else
    goto <bb 107> (skip);

<bb 99>:
  D.46330_256 = engine_21->read_frame.payload;
  D.46344_257 = (int) D.46330_256;
  D.46308_258 = engine_21->cur_payload_map;
  D.46338_259 = D.46308_258->agreed_pt;
  D.46345_260 = (int) D.46338_259;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1926, session_13(D), 7, "alternate payload received (received %d, expecting %d)\n", D.46344_257, D.46345_260);
  D.46346_261 = smh_14->sdp_mutex;
  switch_mutex_lock (D.46346_261);
  pmap_262 = engine_21->payload_map;
  # DEBUG pmap => pmap_262
  goto <bb 104>;

<bb 100>:
  D.46330_263 = engine_21->read_frame.payload;
  D.46347_264 = pmap_9->recv_pt;
  if (D.46330_263 == D.46347_264)
    goto <bb 101>;
  else
    goto <bb 103>;

<bb 101>:
  D.46350_265 = pmap_9->negotiated;
  if (D.46350_265 != 0)
    goto <bb 102>;
  else
    goto <bb 103>;

<bb 102>:
  engine_21->cur_payload_map = pmap_9;
  D.46308_266 = engine_21->cur_payload_map;
  D.46308_266->current = 1;
  D.46353_267 = pmap_9->iananame;
  D.46354_268 = pmap_9->pt;
  D.46355_269 = (int) D.46354_268;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1937, session_13(D), 4, "Changing current codec to %s (payload type %d).\n", D.46353_267, D.46355_269);
  engine_21->reset_codec = 1;
  goto <bb 105>;

<bb 103>:
  pmap_270 = pmap_9->next;
  # DEBUG pmap => pmap_270

<bb 104>:
  # pmap_9 = PHI <pmap_262(99), pmap_270(103)>
  # DEBUG pmap => pmap_9
  if (pmap_9 != 0B)
    goto <bb 100>;
  else
    goto <bb 105>;

<bb 105>:
  D.46346_271 = smh_14->sdp_mutex;
  switch_mutex_unlock (D.46346_271);
  D.46179_272 = engine_21->reset_codec;
  if (D.46179_272 == 0)
    goto <bb 106>;
  else
    goto <bb 107> (skip);

<bb 106>:
  D.46330_273 = engine_21->read_frame.payload;
  D.46344_274 = (int) D.46330_273;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1949, session_13(D), 4, "Could not change to payload type %d, ignoring...\n", D.46344_274);

skip:
  bytes_275 = engine_21->read_impl.encoded_bytes_per_packet;
  # DEBUG bytes => bytes_275
  if (bytes_275 != 0)
    goto <bb 108>;
  else
    goto <bb 109>;

<bb 108>:
  D.46263_276 = engine_21->read_frame.datalen;
  D.46360_277 = D.46263_276 / bytes_275;
  frames_278 = (int) D.46360_277;
  # DEBUG frames => frames_278

<bb 109>:
  # frames_8 = PHI <frames_183(107), frames_278(108)>
  # DEBUG frames => frames_8
  D.46204_279 = engine_21->read_impl.samples_per_packet;
  frames.134_280 = (uint32_t) frames_8;
  D.46362_281 = D.46204_279 * frames.134_280;
  engine_21->read_frame.samples = D.46362_281;
  D.46263_282 = engine_21->read_frame.datalen;
  if (D.46263_282 == 0)
    goto <bb 110>;
  else
    goto <bb 113>;

<bb 110>:
  // predicted unlikely by continue predictor.

<bb 111>:
  # do_cng_3 = PHI <do_cng_12(18), do_cng_2(60), do_cng_2(110), do_cng_12(17)>
  # DEBUG do_cng => do_cng_3
  D.46129_40 = smh_14->media_flags[0];
  if (D.46129_40 != 0)
    goto <bb 112>;
  else
    goto <bb 113>;

<bb 112>:
  D.46263_41 = engine_21->read_frame.datalen;
  if (D.46263_41 == 0)
    goto <bb 23>;
  else
    goto <bb 113>;

<bb 113>:
  D.46263_284 = engine_21->read_frame.datalen;
  if (D.46263_284 == 0)
    goto <bb 114>;
  else
    goto <bb 115>;

<bb 114>:
  *frame_52(D) = 0B;

<bb 115>:
  D.46162_285 = &engine_21->read_frame;
  *frame_52(D) = D.46162_285;
  status_286 = 0;
  # DEBUG status => status_286

  # status_1 = PHI <status_64(26), status_45(27), status_72(33), status_106(47), status_176(57), status_283(64), status_286(115), status_45(24)>
end:
  # DEBUG status => status_1
  D.46151_287 = engine_21->read_mutex[type_19(D)];
  if (D.46151_287 != 0B)
    goto <bb 117>;
  else
    goto <bb 118>;

<bb 117>:
  D.46151_288 = engine_21->read_mutex[type_19(D)];
  switch_mutex_unlock (D.46151_288);

<bb 118>:
  D.46128_289 = status_1;

<bb 119>:
  # D.46128_10 = PHI <D.46128_15(5), D.46128_17(7), D.46128_291(10), D.46128_290(16), D.46128_39(22), D.46128_289(118)>
  return D.46128_10;

}



;; Function switch_core_media_add_ice_acl (switch_core_media_add_ice_acl)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.45893 = 1;



Renaming block #6

Renaming statement D.45894 = &smh->engines;

Renaming statement D.45895 = type * 11416;

Renaming statement engine = D.45894 + D.45895;

Renaming statement D.45896 = engine->cand_acl_count;

Renaming statement if (D.45896 <= 24)



Renaming block #7

Renaming statement D.45896 = engine->cand_acl_count;

Renaming statement D.45900 = switch_core_perform_session_strdup (session, acl_name, "src/switch_core_media.c", &__func__, 2388);

Renaming statement engine->cand_acl[D.45896] = D.45900;

Renaming statement D.45899 = D.45896 + 1;

Renaming statement engine->cand_acl_count = D.45899;

Renaming statement D.45893 = 0;



Renaming block #8

Renaming statement D.45893 = 1;



Renaming block #9

Renaming statement return D.45893;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 2379, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.45896_9 = engine_8->cand_acl_count;



Registering new PHI nodes in block #7

Updating SSA information for statement D.45896_10 = engine_8->cand_acl_count;

Updating SSA information for statement D.45900_12 = switch_core_perform_session_strdup (session_2(D), acl_name_11(D), "src/switch_core_media.c", &__func__, 2388);

Updating SSA information for statement engine_8->cand_acl[D.45896_10] = D.45900_12;

Updating SSA information for statement engine_8->cand_acl_count = D.45899_13;



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_add_ice_acl";
  static const char __func__[30] = "switch_core_media_add_ice_acl";

}
switch_core_media_add_ice_acl (struct switch_core_session_t * session, switch_media_type_t type, const char * acl_name)
{
  static const char __func__[30] = "switch_core_media_add_ice_acl";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_add_ice_acl";
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  char * D.45900;
  int D.45899;
  int D.45896;
  unsigned int D.45895;
  struct switch_rtp_engine_t[2] * D.45894;
  switch_status_t D.45893;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2379, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.45893_4 = 1;
  goto <bb 9>;

<bb 6>:
  D.45894_5 = &smh_3->engines;
  D.45895_7 = type_6(D) * 11416;
  engine_8 = D.45894_5 + D.45895_7;
  # DEBUG engine => engine_8
  D.45896_9 = engine_8->cand_acl_count;
  if (D.45896_9 <= 24)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.45896_10 = engine_8->cand_acl_count;
  D.45900_12 = switch_core_perform_session_strdup (session_2(D), acl_name_11(D), "src/switch_core_media.c", &__func__, 2388);
  engine_8->cand_acl[D.45896_10] = D.45900_12;
  D.45899_13 = D.45896_10 + 1;
  engine_8->cand_acl_count = D.45899_13;
  D.45893_14 = 0;
  goto <bb 9>;

<bb 8>:
  D.45893_15 = 1;

<bb 9>:
  # D.45893_1 = PHI <D.45893_4(5), D.45893_14(7), D.45893_15(8)>
  return D.45893_1;

}



;; Function switch_core_media_check_video_codecs (switch_core_media_check_video_codecs)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.45866 = smh->mparams;

Renaming statement D.45867 = D.45866->num_codecs;

Renaming statement if (D.45867 != 0)



Renaming block #6

Renaming statement D.45870 = session->channel;

Renaming statement D.45871 = switch_channel_test_flag (D.45870, 98);

Renaming statement if (D.45871 == 0)



Renaming block #7

Renaming statement smh->video_count = 0;

Renaming statement i = 0;



Renaming block #14

Renaming statement D.45866 = smh->mparams;

Renaming statement D.45867 = D.45866->num_codecs;

Renaming statement if (D.45867 > i)



Renaming block #8

Renaming statement D.45874 = smh->codecs[i];

Renaming statement D.45875 = D.45874->codec_type;

Renaming statement if (D.45875 == 1)



Renaming block #9

Renaming statement D.45870 = session->channel;

Renaming statement D.45878 = switch_channel_direction (D.45870);

Renaming statement if (D.45878 == 0)



Renaming block #10

Renaming statement D.45870 = session->channel;

Renaming statement D.45881 = switch_channel_test_flag (D.45870, 114);

Renaming statement if (D.45881 != 0)



Renaming block #11



Renaming block #12

Renaming statement D.45884 = smh->video_count;

Renaming statement D.45885 = D.45884 + 1;

Renaming statement smh->video_count = D.45885;



Renaming block #13

Renaming statement i = i + 1;



Renaming block #15

Renaming statement D.45884 = smh->video_count;

Renaming statement if (D.45884 != 0)



Renaming block #16

Renaming statement D.45870 = session->channel;

Renaming statement switch_channel_set_flag_value (D.45870, 98, 1);



Renaming block #17



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 2400, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.45866_4 = smh_3->mparams;

Updating SSA information for statement D.45867_5 = D.45866_4->num_codecs;



Registering new PHI nodes in block #6

Updating SSA information for statement D.45870_6 = session_2(D)->channel;

Updating SSA information for statement D.45871_7 = switch_channel_test_flag (D.45870_6, 98);



Registering new PHI nodes in block #7

Updating SSA information for statement smh_3->video_count = 0;



Registering new PHI nodes in block #14

Updating SSA information for statement D.45866_9 = smh_3->mparams;

Updating SSA information for statement D.45867_10 = D.45866_9->num_codecs;



Registering new PHI nodes in block #8

Updating SSA information for statement D.45874_11 = smh_3->codecs[i_1];

Updating SSA information for statement D.45875_12 = D.45874_11->codec_type;



Registering new PHI nodes in block #9

Updating SSA information for statement D.45870_13 = session_2(D)->channel;

Updating SSA information for statement D.45878_14 = switch_channel_direction (D.45870_13);



Registering new PHI nodes in block #10

Updating SSA information for statement D.45870_15 = session_2(D)->channel;

Updating SSA information for statement D.45881_16 = switch_channel_test_flag (D.45870_15, 114);



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement D.45884_17 = smh_3->video_count;

Updating SSA information for statement smh_3->video_count = D.45885_18;



Registering new PHI nodes in block #13



Registering new PHI nodes in block #15

Updating SSA information for statement D.45884_20 = smh_3->video_count;



Registering new PHI nodes in block #16

Updating SSA information for statement D.45870_21 = session_2(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.45870_21, 98, 1);



Registering new PHI nodes in block #17



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 18
Number of blocks to update: 17 ( 94%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[37] = "switch_core_media_check_video_codecs";

  { Scope block #0 
    int i;

  }

}
switch_core_media_check_video_codecs (struct switch_core_session_t * session)
{
  int i;
  static const char __PRETTY_FUNCTION__[37] = "switch_core_media_check_video_codecs";
  struct switch_media_handle_t * smh;
  int D.45885;
  int D.45884;
  uint32_t D.45881;
  switch_call_direction_t D.45878;
  const switch_codec_type_t D.45875;
  const struct switch_codec_implementation_t * D.45874;
  uint32_t D.45871;
  struct switch_channel_t * D.45870;
  int D.45867;
  struct switch_core_media_params_t * D.45866;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2400, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 17>;
  else
    goto <bb 5>;

<bb 5>:
  D.45866_4 = smh_3->mparams;
  D.45867_5 = D.45866_4->num_codecs;
  if (D.45867_5 != 0)
    goto <bb 6>;
  else
    goto <bb 17>;

<bb 6>:
  D.45870_6 = session_2(D)->channel;
  D.45871_7 = switch_channel_test_flag (D.45870_6, 98);
  if (D.45871_7 == 0)
    goto <bb 7>;
  else
    goto <bb 17>;

<bb 7>:
  smh_3->video_count = 0;
  i_8 = 0;
  # DEBUG i => i_8
  goto <bb 14>;

<bb 8>:
  D.45874_11 = smh_3->codecs[i_1];
  D.45875_12 = D.45874_11->codec_type;
  if (D.45875_12 == 1)
    goto <bb 9>;
  else
    goto <bb 13>;

<bb 9>:
  D.45870_13 = session_2(D)->channel;
  D.45878_14 = switch_channel_direction (D.45870_13);
  if (D.45878_14 == 0)
    goto <bb 10>;
  else
    goto <bb 12>;

<bb 10>:
  D.45870_15 = session_2(D)->channel;
  D.45881_16 = switch_channel_test_flag (D.45870_15, 114);
  if (D.45881_16 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  // predicted unlikely by continue predictor.
  goto <bb 13>;

<bb 12>:
  D.45884_17 = smh_3->video_count;
  D.45885_18 = D.45884_17 + 1;
  smh_3->video_count = D.45885_18;

<bb 13>:
  i_19 = i_1 + 1;
  # DEBUG i => i_19

<bb 14>:
  # i_1 = PHI <i_8(7), i_19(13)>
  # DEBUG i => i_1
  D.45866_9 = smh_3->mparams;
  D.45867_10 = D.45866_9->num_codecs;
  if (D.45867_10 > i_1)
    goto <bb 8>;
  else
    goto <bb 15>;

<bb 15>:
  D.45884_20 = smh_3->video_count;
  if (D.45884_20 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.45870_21 = session_2(D)->channel;
  switch_channel_set_flag_value (D.45870_21, 98, 1);

<bb 17>:
  return;

}



;; Function switch_ice_direction (switch_ice_direction)



Renaming block #0



Renaming block #2

Renaming statement D.45848 = session->channel;

Renaming statement r = switch_channel_direction (D.45848);

Renaming statement D.45848 = session->channel;

Renaming statement D.45849 = switch_channel_test_flag (D.45848, 112);

Renaming statement if (D.45849 != 0)



Renaming block #3

Renaming statement r = r == 0;



Renaming block #4

Renaming statement D.45848 = session->channel;

Renaming statement D.45854 = switch_channel_test_flag (D.45848, 103);

Renaming statement if (D.45854 != 0)



Renaming block #5

Renaming statement D.45848 = session->channel;

Renaming statement D.45856 = switch_channel_test_flag (D.45848, 84);

Renaming statement if (D.45856 != 0)



Renaming block #6

Renaming statement D.45848 = session->channel;

Renaming statement D.45857 = switch_channel_test_flag (D.45848, 106);

Renaming statement if (D.45857 != 0)



Renaming block #7

Renaming statement r = 1;



Renaming block #8

Renaming statement D.45860 = r;

Renaming statement return D.45860;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.45848_4 = session_3(D)->channel;

Updating SSA information for statement r_5 = switch_channel_direction (D.45848_4);

Updating SSA information for statement D.45848_6 = session_3(D)->channel;

Updating SSA information for statement D.45849_7 = switch_channel_test_flag (D.45848_6, 112);



Registering new PHI nodes in block #3



Registering new PHI nodes in block #4

Updating SSA information for statement D.45848_9 = session_3(D)->channel;

Updating SSA information for statement D.45854_10 = switch_channel_test_flag (D.45848_9, 103);



Registering new PHI nodes in block #5

Updating SSA information for statement D.45848_11 = session_3(D)->channel;

Updating SSA information for statement D.45856_12 = switch_channel_test_flag (D.45848_11, 84);



Registering new PHI nodes in block #6

Updating SSA information for statement D.45848_13 = session_3(D)->channel;

Updating SSA information for statement D.45857_14 = switch_channel_test_flag (D.45848_13, 106);



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)

Affected blocks: 0 2 3 4 5 6 7 8 


Scope blocks after cleanups:

{ Scope block #0 
  switch_call_direction_t r;

}
switch_ice_direction (struct switch_core_session_t * session)
{
  switch_call_direction_t r;
  switch_call_direction_t D.45860;
  uint32_t D.45857;
  uint32_t D.45856;
  uint32_t D.45854;
  uint32_t D.45849;
  struct switch_channel_t * D.45848;

<bb 2>:
  D.45848_4 = session_3(D)->channel;
  r_5 = switch_channel_direction (D.45848_4);
  # DEBUG r => r_5
  D.45848_6 = session_3(D)->channel;
  D.45849_7 = switch_channel_test_flag (D.45848_6, 112);
  if (D.45849_7 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  r_8 = r_5 == 0;
  # DEBUG r => r_8

<bb 4>:
  # r_1 = PHI <r_5(2), r_8(3)>
  # DEBUG r => r_1
  D.45848_9 = session_3(D)->channel;
  D.45854_10 = switch_channel_test_flag (D.45848_9, 103);
  if (D.45854_10 != 0)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  D.45848_11 = session_3(D)->channel;
  D.45856_12 = switch_channel_test_flag (D.45848_11, 84);
  if (D.45856_12 != 0)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  D.45848_13 = session_3(D)->channel;
  D.45857_14 = switch_channel_test_flag (D.45848_13, 106);
  if (D.45857_14 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  r_15 = 1;
  # DEBUG r => r_15

<bb 8>:
  # r_2 = PHI <r_1(5), r_1(6), r_15(7)>
  # DEBUG r => r_2
  D.45860_16 = r_2;
  return D.45860_16;

}



;; Function check_dtls_reinvite (check_dtls_reinvite)



Renaming block #0



Renaming block #2

Renaming statement D.43905 = session->channel;

Renaming statement D.43906 = switch_channel_test_flag (D.43905, 103);

Renaming statement if (D.43906 != 0)



Renaming block #3

Renaming statement D.43909 = &engine->local_dtls_fingerprint.str;

Renaming statement D.43910 = _zstr (D.43909);

Renaming statement if (D.43910 == 0)



Renaming block #4

Renaming statement D.43913 = switch_rtp_has_dtls ();

Renaming statement if (D.43913 != 0)



Renaming block #5

Renaming statement D.43916 = dtls_ok (session);

Renaming statement if (D.43916 != 0)



Renaming block #6

Renaming statement D.43920 = switch_ice_direction (session);

Renaming statement if (D.43920 == 0)



Renaming block #7

Renaming statement iftmp.74 = 1;



Renaming block #8

Renaming statement iftmp.74 = 2;



Renaming block #9

Renaming statement dtype = iftmp.74;

Renaming statement D.43925 = engine->type;

Renaming statement if (D.43925 == 1)



Renaming block #10

Renaming statement iftmp.75 = "video";



Renaming block #11

Renaming statement iftmp.75 = "audio";



Renaming block #12

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4701, session, 6, "RE-SETTING %s DTLS\n", iftmp.75);

Renaming statement xtype = 4;

Renaming statement D.43929 = engine->rtcp_mux;

Renaming statement if (D.43929 > 0)



Renaming block #13

Renaming statement xtype = xtype | 8;



Renaming block #14

Renaming statement D.43932 = engine->rtp_session;

Renaming statement D.43933 = &engine->local_dtls_fingerprint;

Renaming statement D.43934 = &engine->remote_dtls_fingerprint;

Renaming statement D.43935 = dtype | xtype;

Renaming statement switch_rtp_add_dtls (D.43932, D.43933, D.43934, D.43935);

Renaming statement D.43929 = engine->rtcp_mux;

Renaming statement if (D.43929 <= 0)



Renaming block #15

Renaming statement xtype = 8;

Renaming statement D.43932 = engine->rtp_session;

Renaming statement D.43933 = &engine->local_dtls_fingerprint;

Renaming statement D.43934 = &engine->remote_dtls_fingerprint;

Renaming statement D.43935 = dtype | xtype;

Renaming statement switch_rtp_add_dtls (D.43932, D.43933, D.43934, D.43935);



Renaming block #16



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.43905_5 = session_4(D)->channel;

Updating SSA information for statement D.43906_6 = switch_channel_test_flag (D.43905_5, 103);



Registering new PHI nodes in block #3

Updating SSA information for statement D.43910_9 = _zstr (D.43909_8);



Registering new PHI nodes in block #4

Updating SSA information for statement D.43913_10 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #5

Updating SSA information for statement D.43916_11 = dtls_ok (session_4(D));



Registering new PHI nodes in block #6

Updating SSA information for statement D.43920_12 = switch_ice_direction (session_4(D));



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9

Updating SSA information for statement D.43925_16 = engine_7(D)->type;



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4701, session_4(D), 6, "RE-SETTING %s DTLS\n", iftmp.75_3);

Updating SSA information for statement D.43929_20 = engine_7(D)->rtcp_mux;



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement D.43932_22 = engine_7(D)->rtp_session;

Updating SSA information for statement switch_rtp_add_dtls (D.43932_22, D.43933_23, D.43934_24, D.43935_25);

Updating SSA information for statement D.43929_26 = engine_7(D)->rtcp_mux;



Registering new PHI nodes in block #15

Updating SSA information for statement D.43932_28 = engine_7(D)->rtp_session;

Updating SSA information for statement switch_rtp_add_dtls (D.43932_28, D.43933_29, D.43934_30, D.43935_31);



Registering new PHI nodes in block #16



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 17
Number of blocks to update: 16 ( 94%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 


Scope blocks after cleanups:

{ Scope block #0 
  static const char __func__[20] = "check_dtls_reinvite";

  { Scope block #0 
    dtls_type_t xtype;
    dtls_type_t dtype;

  }

}
check_dtls_reinvite (struct switch_core_session_t * session, struct switch_rtp_engine_t * engine)
{
  dtls_type_t dtype;
  dtls_type_t xtype;
  static const char __func__[20] = "check_dtls_reinvite";
  unsigned int D.43935;
  struct dtls_fingerprint_t * D.43934;
  struct dtls_fingerprint_t * D.43933;
  struct switch_rtp_t * D.43932;
  int8_t D.43929;
  switch_media_type_t D.43925;
  char * iftmp.75;
  switch_call_direction_t D.43920;
  dtls_type_t iftmp.74;
  int D.43916;
  int D.43913;
  int D.43910;
  char[192] * D.43909;
  uint32_t D.43906;
  struct switch_channel_t * D.43905;

<bb 2>:
  D.43905_5 = session_4(D)->channel;
  D.43906_6 = switch_channel_test_flag (D.43905_5, 103);
  if (D.43906_6 != 0)
    goto <bb 3>;
  else
    goto <bb 16>;

<bb 3>:
  D.43909_8 = &engine_7(D)->local_dtls_fingerprint.str;
  D.43910_9 = _zstr (D.43909_8);
  if (D.43910_9 == 0)
    goto <bb 4>;
  else
    goto <bb 16>;

<bb 4>:
  D.43913_10 = switch_rtp_has_dtls ();
  if (D.43913_10 != 0)
    goto <bb 5>;
  else
    goto <bb 16>;

<bb 5>:
  D.43916_11 = dtls_ok (session_4(D));
  if (D.43916_11 != 0)
    goto <bb 6>;
  else
    goto <bb 16>;

<bb 6>:
  D.43920_12 = switch_ice_direction (session_4(D));
  if (D.43920_12 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  iftmp.74_13 = 1;
  goto <bb 9>;

<bb 8>:
  iftmp.74_14 = 2;

<bb 9>:
  # iftmp.74_2 = PHI <iftmp.74_13(7), iftmp.74_14(8)>
  dtype_15 = iftmp.74_2;
  # DEBUG dtype => dtype_15
  D.43925_16 = engine_7(D)->type;
  if (D.43925_16 == 1)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  iftmp.75_17 = "video";
  goto <bb 12>;

<bb 11>:
  iftmp.75_18 = "audio";

<bb 12>:
  # iftmp.75_3 = PHI <iftmp.75_17(10), iftmp.75_18(11)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4701, session_4(D), 6, "RE-SETTING %s DTLS\n", iftmp.75_3);
  xtype_19 = 4;
  # DEBUG xtype => xtype_19
  D.43929_20 = engine_7(D)->rtcp_mux;
  if (D.43929_20 > 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  xtype_21 = xtype_19 | 8;
  # DEBUG xtype => xtype_21

<bb 14>:
  # xtype_1 = PHI <xtype_19(12), xtype_21(13)>
  # DEBUG xtype => xtype_1
  D.43932_22 = engine_7(D)->rtp_session;
  D.43933_23 = &engine_7(D)->local_dtls_fingerprint;
  D.43934_24 = &engine_7(D)->remote_dtls_fingerprint;
  D.43935_25 = dtype_15 | xtype_1;
  switch_rtp_add_dtls (D.43932_22, D.43933_23, D.43934_24, D.43935_25);
  D.43929_26 = engine_7(D)->rtcp_mux;
  if (D.43929_26 <= 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  xtype_27 = 8;
  # DEBUG xtype => xtype_27
  D.43932_28 = engine_7(D)->rtp_session;
  D.43933_29 = &engine_7(D)->local_dtls_fingerprint;
  D.43934_30 = &engine_7(D)->remote_dtls_fingerprint;
  D.43935_31 = dtype_15 | xtype_27;
  switch_rtp_add_dtls (D.43932_28, D.43933_29, D.43934_30, D.43935_31);

<bb 16>:
  return;

}



;; Function check_ice (check_ice)



Renaming block #0



Renaming block #2

Renaming statement D.45459 = &smh->engines;

Renaming statement D.45460 = type * 11416;

Renaming statement engine = D.45459 + D.45460;

Renaming statement i = 0;

Renaming statement got_rtcp_mux = 0;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement if (D.45461 != 0)



Renaming block #3

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement if (D.45464 != 0)



Renaming block #4

Renaming statement D.45467 = smh->session;

Renaming statement D.45468 = D.45467->channel;

Renaming statement D.45469 = switch_channel_test_flag (D.45468, 103);

Renaming statement if (D.45469 == 0)



Renaming block #5

Renaming statement engine->ice_in.chosen[0] = 0;

Renaming statement engine->ice_in.chosen[1] = 0;

Renaming statement engine->ice_in.cand_idx = 0;

Renaming statement if (m != 0B)



Renaming block #6

Renaming statement attr = m->m_attributes;



Renaming block #7

Renaming statement attr = sdp->sdp_attributes;



Renaming block #68

Renaming statement if (attr != 0B)



Renaming block #8

Renaming statement argc = 0;

Renaming statement j = 0;

Renaming statement cid = 0;

Renaming statement D.45475 = attr->a_name;

Renaming statement D.45476 = _zstr (D.45475);

Renaming statement if (D.45476 != 0)



Renaming block #9



Renaming block #10

Renaming statement D.45475 = attr->a_name;

Renaming statement D.45479 = strcasecmp (D.45475, "ice-ufrag");

Renaming statement if (D.45479 == 0)



Renaming block #11

Renaming statement D.45467 = smh->session;

Renaming statement D.45482 = attr->a_value;

Renaming statement D.45483 = switch_core_perform_session_strdup (D.45467, D.45482, "src/switch_core_media.c", &__func__, 2503);

Renaming statement engine->ice_in.ufrag = D.45483;



Renaming block #12

Renaming statement D.45475 = attr->a_name;

Renaming statement D.45485 = strcasecmp (D.45475, "ice-pwd");

Renaming statement if (D.45485 == 0)



Renaming block #13

Renaming statement D.45467 = smh->session;

Renaming statement D.45482 = attr->a_value;

Renaming statement D.45488 = switch_core_perform_session_strdup (D.45467, D.45482, "src/switch_core_media.c", &__func__, 2505);

Renaming statement engine->ice_in.pwd = D.45488;



Renaming block #14

Renaming statement D.45475 = attr->a_name;

Renaming statement D.45490 = strcasecmp (D.45475, "ice-options");

Renaming statement if (D.45490 == 0)



Renaming block #15

Renaming statement D.45467 = smh->session;

Renaming statement D.45482 = attr->a_value;

Renaming statement D.45493 = switch_core_perform_session_strdup (D.45467, D.45482, "src/switch_core_media.c", &__func__, 2507);

Renaming statement engine->ice_in.options = D.45493;



Renaming block #16

Renaming statement D.45497 = switch_rtp_has_dtls ();

Renaming statement if (D.45497 != 0)



Renaming block #17

Renaming statement D.45467 = smh->session;

Renaming statement D.45499 = dtls_ok (D.45467);

Renaming statement if (D.45499 != 0)



Renaming block #18

Renaming statement D.45475 = attr->a_name;

Renaming statement D.45501 = strcasecmp (D.45475, "fingerprint");

Renaming statement if (D.45501 == 0)



Renaming block #19

Renaming statement D.45482 = attr->a_value;

Renaming statement D.45503 = _zstr (D.45482);

Renaming statement if (D.45503 == 0)



Renaming block #20

Renaming statement D.45467 = smh->session;

Renaming statement D.45482 = attr->a_value;

Renaming statement D.45505 = switch_core_perform_session_strdup (D.45467, D.45482, "src/switch_core_media.c", &__func__, 2512);

Renaming statement engine->remote_dtls_fingerprint.type = D.45505;

Renaming statement D.45506 = engine->remote_dtls_fingerprint.type;

Renaming statement p = __builtin_strchr (D.45506, 32);

Renaming statement if (p != 0B)



Renaming block #21

Renaming statement *p = 0;

Renaming statement p = p + 1;

Renaming statement D.45509 = &engine->local_dtls_fingerprint.str;

Renaming statement switch_copy_string (D.45509, p, 192);



Renaming block #22

Renaming statement generate_local_fingerprint (smh, type);

Renaming statement D.45467 = smh->session;

Renaming statement D.45468 = D.45467->channel;

Renaming statement switch_channel_set_flag_value (D.45468, 109, 1);



Renaming block #23

Renaming statement D.45512 = engine->remote_ssrc;

Renaming statement if (D.45512 == 0)



Renaming block #24

Renaming statement D.45475 = attr->a_name;

Renaming statement D.45514 = strcasecmp (D.45475, "ssrc");

Renaming statement if (D.45514 == 0)



Renaming block #25

Renaming statement D.45482 = attr->a_value;

Renaming statement if (D.45482 != 0B)



Renaming block #26

Renaming statement D.45482 = attr->a_value;

Renaming statement D.45517 = atol (D.45482);

Renaming statement D.45518 = (unsigned int) D.45517;

Renaming statement engine->remote_ssrc = D.45518;

Renaming statement D.45519 = engine->rtp_session;

Renaming statement if (D.45519 != 0B)



Renaming block #27

Renaming statement D.45512 = engine->remote_ssrc;

Renaming statement if (D.45512 != 0)



Renaming block #28

Renaming statement D.45519 = engine->rtp_session;

Renaming statement D.45512 = engine->remote_ssrc;

Renaming statement switch_rtp_set_remote_ssrc (D.45519, D.45512);



Renaming block #29

Renaming statement D.45475 = attr->a_name;

Renaming statement D.45524 = strcasecmp (D.45475, "rtcp-mux");

Renaming statement if (D.45524 == 0)



Renaming block #30

Renaming statement engine->rtcp_mux = 1;

Renaming statement D.45527 = engine->cur_payload_map;

Renaming statement D.45528 = D.45527->remote_sdp_port;

Renaming statement engine->remote_rtcp_port = D.45528;

Renaming statement got_rtcp_mux = got_rtcp_mux + 1;



Renaming block #31

Renaming statement D.45475 = attr->a_name;

Renaming statement D.45530 = strcasecmp (D.45475, "candidate");

Renaming statement if (D.45530 == 0)



Renaming block #32

Renaming statement D.45467 = smh->session;

Renaming statement D.45468 = D.45467->channel;

Renaming statement switch_channel_set_flag_value (D.45468, 108, 1);

Renaming statement D.45533 = engine->cand_acl_count;

Renaming statement if (D.45533 == 0)



Renaming block #33

Renaming statement D.45533 = engine->cand_acl_count;

Renaming statement engine->cand_acl[D.45533] = "wan.auto";

Renaming statement D.45536 = D.45533 + 1;

Renaming statement engine->cand_acl_count = D.45536;

Renaming statement D.45467 = smh->session;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2548, D.45467, 4, "NO candidate ACL defined, Defaulting to wan.auto\n");



Renaming block #34

Renaming statement D.45482 = attr->a_value;

Renaming statement D.45537 = switch_stristr (" udp ", D.45482);

Renaming statement if (D.45537 == 0B)



Renaming block #35



Renaming block #36

Renaming statement D.45467 = smh->session;

Renaming statement D.45482 = attr->a_value;

Renaming statement data = switch_core_perform_session_strdup (D.45467, D.45482, "src/switch_core_media.c", &__func__, 2556);

Renaming statement D.45540 = switch_separate_string (data, 32, &fields, 15);

Renaming statement argc = (int) D.45540;

Renaming statement if (argc <= 4)



Renaming block #37

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement if (D.45544 > 48)



Renaming block #39

Renaming statement D.45545 = fields[1];

Renaming statement D.45546 = atoi (D.45545);

Renaming statement cid = D.45546 + -1;

Renaming statement i = 0;



Renaming block #41

Renaming statement if (i < argc)



Renaming block #40

Renaming statement D.45467 = smh->session;

Renaming statement D.45547 = fields[i];

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2569, D.45467, 101, "CAND %d [%s]\n", i, D.45547);

Renaming statement i = i + 1;



Renaming block #42

Renaming statement D.45467 = smh->session;

Renaming statement D.45548 = cid + 1;

Renaming statement D.45549 = fields[2];

Renaming statement D.45550 = fields[7];

Renaming statement D.45551 = fields[4];

Renaming statement D.45552 = fields[5];

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2572, D.45467, 7, "Checking Candidate cid: %d proto: %s type: %s addr: %s:%s\n", D.45548, D.45549, D.45550, D.45551, D.45552);

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement D.45553 = D.45544 + 1;

Renaming statement engine->ice_in.cand_idx = D.45553;

Renaming statement i = 0;

Renaming statement D.45533 = engine->cand_acl_count;

Renaming statement if (D.45533 > i)



Renaming block #43

Renaming statement D.45556 = engine->ice_in.chosen[cid];

Renaming statement if (D.45556 == 0)



Renaming block #44

Renaming statement D.45551 = fields[4];

Renaming statement D.45558 = engine->cand_acl[i];

Renaming statement D.45559 = switch_check_network_list_ip_token (D.45551, D.45558, 0B);

Renaming statement if (D.45559 != 0)



Renaming block #45

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement engine->ice_in.chosen[cid] = D.45544;

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #46

Renaming statement iftmp.105 = "video";



Renaming block #47

Renaming statement iftmp.105 = "audio";



Renaming block #48

Renaming statement D.45548 = cid + 1;

Renaming statement D.45549 = fields[2];

Renaming statement D.45550 = fields[7];

Renaming statement D.45551 = fields[4];

Renaming statement D.45552 = fields[5];

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2581, D.45467, 5, "Choose %s Candidate cid: %d proto: %s type: %s addr: %s:%s\n", iftmp.105, D.45548, D.45549, D.45550, D.45551, D.45552);



Renaming block #49

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #50

Renaming statement iftmp.106 = "video";



Renaming block #51

Renaming statement iftmp.106 = "audio";



Renaming block #52

Renaming statement D.45548 = cid + 1;

Renaming statement D.45549 = fields[2];

Renaming statement D.45550 = fields[7];

Renaming statement D.45551 = fields[4];

Renaming statement D.45552 = fields[5];

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2586, D.45467, 5, "Save %s Candidate cid: %d proto: %s type: %s addr: %s:%s\n", iftmp.106, D.45548, D.45549, D.45550, D.45551, D.45552);



Renaming block #53

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement D.45467 = smh->session;

Renaming statement D.45569 = fields[0];

Renaming statement D.45570 = switch_core_perform_session_strdup (D.45467, D.45569, "src/switch_core_media.c", &__func__, 2592);

Renaming statement engine->ice_in.cands[D.45544][cid].foundation = D.45570;

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement D.45545 = fields[1];

Renaming statement D.45571 = atoi (D.45545);

Renaming statement engine->ice_in.cands[D.45544][cid].component_id = D.45571;

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement D.45467 = smh->session;

Renaming statement D.45549 = fields[2];

Renaming statement D.45572 = switch_core_perform_session_strdup (D.45467, D.45549, "src/switch_core_media.c", &__func__, 2594);

Renaming statement engine->ice_in.cands[D.45544][cid].transport = D.45572;

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement D.45573 = fields[3];

Renaming statement D.45574 = atol (D.45573);

Renaming statement D.45575 = (uint32_t) D.45574;

Renaming statement engine->ice_in.cands[D.45544][cid].priority = D.45575;

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement D.45467 = smh->session;

Renaming statement D.45551 = fields[4];

Renaming statement D.45576 = switch_core_perform_session_strdup (D.45467, D.45551, "src/switch_core_media.c", &__func__, 2596);

Renaming statement engine->ice_in.cands[D.45544][cid].con_addr = D.45576;

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement D.45552 = fields[5];

Renaming statement D.45577 = atoi (D.45552);

Renaming statement D.45578 = (short unsigned int) D.45577;

Renaming statement engine->ice_in.cands[D.45544][cid].con_port = D.45578;

Renaming statement j = 6;



Renaming block #63

Renaming statement if (j < argc)



Renaming block #64

Renaming statement D.45583 = j + 1;

Renaming statement D.45584 = fields[D.45583];

Renaming statement if (D.45584 != 0B)



Renaming block #54

Renaming statement D.45579 = fields[j];

Renaming statement D.45580 = strcasecmp (D.45579, "typ");

Renaming statement if (D.45580 == 0)



Renaming block #55

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement D.45467 = smh->session;

Renaming statement D.45583 = j + 1;

Renaming statement D.45584 = fields[D.45583];

Renaming statement D.45585 = switch_core_perform_session_strdup (D.45467, D.45584, "src/switch_core_media.c", &__func__, 2604);

Renaming statement engine->ice_in.cands[D.45544][cid].cand_type = D.45585;



Renaming block #56

Renaming statement D.45579 = fields[j];

Renaming statement D.45587 = strcasecmp (D.45579, "raddr");

Renaming statement if (D.45587 == 0)



Renaming block #57

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement D.45467 = smh->session;

Renaming statement D.45583 = j + 1;

Renaming statement D.45584 = fields[D.45583];

Renaming statement D.45590 = switch_core_perform_session_strdup (D.45467, D.45584, "src/switch_core_media.c", &__func__, 2606);

Renaming statement engine->ice_in.cands[D.45544][cid].raddr = D.45590;



Renaming block #58

Renaming statement D.45579 = fields[j];

Renaming statement D.45592 = strcasecmp (D.45579, "rport");

Renaming statement if (D.45592 == 0)



Renaming block #59

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement D.45583 = j + 1;

Renaming statement D.45584 = fields[D.45583];

Renaming statement D.45595 = atoi (D.45584);

Renaming statement D.45596 = (short unsigned int) D.45595;

Renaming statement engine->ice_in.cands[D.45544][cid].rport = D.45596;



Renaming block #60

Renaming statement D.45579 = fields[j];

Renaming statement D.45598 = strcasecmp (D.45579, "generation");

Renaming statement if (D.45598 == 0)



Renaming block #61

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement D.45467 = smh->session;

Renaming statement D.45583 = j + 1;

Renaming statement D.45584 = fields[D.45583];

Renaming statement D.45601 = switch_core_perform_session_strdup (D.45467, D.45584, "src/switch_core_media.c", &__func__, 2610);

Renaming statement engine->ice_in.cands[D.45544][cid].generation = D.45601;



Renaming block #62

Renaming statement j = j + 2;



Renaming block #65

Renaming statement D.45556 = engine->ice_in.chosen[cid];

Renaming statement if (D.45556 != 0)



Renaming block #66

Renaming statement D.45556 = engine->ice_in.chosen[cid];

Renaming statement D.45605 = engine->ice_in.cands[D.45556][cid].ready;

Renaming statement D.45606 = D.45605 + 1;

Renaming statement engine->ice_in.cands[D.45556][cid].ready = D.45606;



Renaming block #38

Renaming statement D.45467 = smh->session;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2561, D.45467, 4, "Invalid data\n");



Renaming block #67

Renaming statement attr = attr->a_next;



Renaming block #69

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement if (D.45461 == 0)



Renaming block #70

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement if (D.45464 == 0)



Renaming block #71

Renaming statement i = 0;



Renaming block #89

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement if (D.45544 >= i)



Renaming block #90

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement if (D.45461 == 0)



Renaming block #91

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement if (D.45464 == 0)



Renaming block #72

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement if (D.45461 == 0)



Renaming block #73

Renaming statement D.45611 = engine->ice_in.cands[i][0].component_id;

Renaming statement if (D.45611 == 1)



Renaming block #74

Renaming statement D.45614 = engine->ice_in.cands[i][0].rport;

Renaming statement if (D.45614 == 0)



Renaming block #75

Renaming statement D.45617 = engine->ice_in.cands[i][0].con_addr;

Renaming statement D.45618 = switch_check_network_list_ip_token (D.45617, "localnet.auto", 0B);

Renaming statement if (D.45618 != 0)



Renaming block #76

Renaming statement engine->ice_in.chosen[0] = i;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45621 = engine->ice_in.cands[D.45461][0].ready;

Renaming statement D.45622 = D.45621 + 1;

Renaming statement engine->ice_in.cands[D.45461][0].ready = D.45622;

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #77

Renaming statement iftmp.107 = "video";



Renaming block #78

Renaming statement iftmp.107 = "audio";



Renaming block #79

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2636, D.45467, 5, "No %s RTP candidate found; defaulting to the first local one.\n", iftmp.107);



Renaming block #80

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement if (D.45464 == 0)



Renaming block #81

Renaming statement D.45629 = engine->ice_in.cands[i][1].component_id;

Renaming statement if (D.45629 == 2)



Renaming block #82

Renaming statement D.45632 = engine->ice_in.cands[i][1].rport;

Renaming statement if (D.45632 == 0)



Renaming block #83

Renaming statement D.45635 = engine->ice_in.cands[i][1].con_addr;

Renaming statement D.45636 = switch_check_network_list_ip_token (D.45635, "localnet.auto", 0B);

Renaming statement if (D.45636 != 0)



Renaming block #84

Renaming statement engine->ice_in.chosen[1] = i;

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45639 = engine->ice_in.cands[D.45464][1].ready;

Renaming statement D.45640 = D.45639 + 1;

Renaming statement engine->ice_in.cands[D.45464][1].ready = D.45640;

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #85

Renaming statement iftmp.108 = "video";



Renaming block #86

Renaming statement iftmp.108 = "audio";



Renaming block #87

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2643, D.45467, 5, "No %s RTCP candidate found; defaulting to the first local one.\n", iftmp.108);



Renaming block #88

Renaming statement i = i + 1;



Renaming block #92

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement if (D.45461 == 0)



Renaming block #93

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement if (D.45464 == 0)



Renaming block #94

Renaming statement i = 0;



Renaming block #110

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement if (D.45544 >= i)



Renaming block #111

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement if (D.45461 == 0)



Renaming block #112

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement if (D.45464 == 0)



Renaming block #95

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement if (D.45461 == 0)



Renaming block #96

Renaming statement D.45611 = engine->ice_in.cands[i][0].component_id;

Renaming statement if (D.45611 == 1)



Renaming block #97

Renaming statement D.45614 = engine->ice_in.cands[i][0].rport;

Renaming statement if (D.45614 != 0)



Renaming block #98

Renaming statement engine->ice_in.chosen[0] = i;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45621 = engine->ice_in.cands[D.45461][0].ready;

Renaming statement D.45622 = D.45621 + 1;

Renaming statement engine->ice_in.cands[D.45461][0].ready = D.45622;

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #99

Renaming statement iftmp.109 = "video";



Renaming block #100

Renaming statement iftmp.109 = "audio";



Renaming block #101

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2655, D.45467, 5, "No %s RTP candidate found; defaulting to the first srflx one.\n", iftmp.109);



Renaming block #102

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement if (D.45464 == 0)



Renaming block #103

Renaming statement D.45629 = engine->ice_in.cands[i][1].component_id;

Renaming statement if (D.45629 == 2)



Renaming block #104

Renaming statement D.45632 = engine->ice_in.cands[i][1].rport;

Renaming statement if (D.45632 != 0)



Renaming block #105

Renaming statement engine->ice_in.chosen[1] = i;

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45639 = engine->ice_in.cands[D.45464][1].ready;

Renaming statement D.45640 = D.45639 + 1;

Renaming statement engine->ice_in.cands[D.45464][1].ready = D.45640;

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #106

Renaming statement iftmp.110 = "video";



Renaming block #107

Renaming statement iftmp.110 = "audio";



Renaming block #108

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2661, D.45467, 5, "No %s RTCP candidate found; defaulting to the first srflx one.\n", iftmp.110);



Renaming block #109

Renaming statement i = i + 1;



Renaming block #113

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement if (D.45461 != 0)



Renaming block #114

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45673 = D.45464 == 0;

Renaming statement D.45674 = got_rtcp_mux != 0;

Renaming statement D.45675 = D.45673 && D.45674;

Renaming statement if (D.45675 != 0)



Renaming block #115

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement engine->ice_in.chosen[1] = D.45461;

Renaming statement D.45678 = &engine->ice_in.cands[0][0];

Renaming statement D.45679 = (void * restrict) D.45678;

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45680 = (unsigned int) D.45464;

Renaming statement D.45681 = D.45680 * 88;

Renaming statement D.45682 = D.45681 + 44;

Renaming statement D.45683 = D.45679 + D.45682;

Renaming statement D.45678 = &engine->ice_in.cands[0][0];

Renaming statement D.45684 = (const void * restrict) D.45678;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45685 = (unsigned int) D.45461;

Renaming statement D.45686 = D.45685 * 88;

Renaming statement D.45687 = D.45684 + D.45686;

Renaming statement memcpy (D.45683, D.45687, 44);

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45639 = engine->ice_in.cands[D.45464][1].ready;

Renaming statement D.45640 = D.45639 + 1;

Renaming statement engine->ice_in.cands[D.45464][1].ready = D.45640;

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #116

Renaming statement iftmp.111 = "video";



Renaming block #117

Renaming statement iftmp.111 = "audio";



Renaming block #118

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45692 = engine->ice_in.cands[D.45464][1].con_addr;

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45693 = engine->ice_in.cands[D.45464][1].con_port;

Renaming statement D.45694 = (int) D.45693;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2675, D.45467, 5, "No %s RTCP candidate found; defaulting to the same as RTP [%s:%d]\n", iftmp.111, D.45692, D.45694);



Renaming block #119

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement if (D.45461 == 0)



Renaming block #120

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement if (D.45464 == 0)



Renaming block #121

Renaming statement i = 0;



Renaming block #135

Renaming statement D.45544 = engine->ice_in.cand_idx;

Renaming statement if (D.45544 >= i)



Renaming block #136

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement if (D.45461 == 0)



Renaming block #137

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement if (D.45464 == 0)



Renaming block #122

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement if (D.45461 == 0)



Renaming block #123

Renaming statement D.45611 = engine->ice_in.cands[i][0].component_id;

Renaming statement if (D.45611 == 1)



Renaming block #124

Renaming statement engine->ice_in.chosen[0] = i;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45621 = engine->ice_in.cands[D.45461][0].ready;

Renaming statement D.45622 = D.45621 + 1;

Renaming statement engine->ice_in.cands[D.45461][0].ready = D.45622;

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #125

Renaming statement iftmp.112 = "video";



Renaming block #126

Renaming statement iftmp.112 = "audio";



Renaming block #127

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2686, D.45467, 5, "No %s RTP candidate found; defaulting to the first one.\n", iftmp.112);



Renaming block #128

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement if (D.45464 == 0)



Renaming block #129

Renaming statement D.45629 = engine->ice_in.cands[i][1].component_id;

Renaming statement if (D.45629 == 2)



Renaming block #130

Renaming statement engine->ice_in.chosen[1] = i;

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45639 = engine->ice_in.cands[D.45464][1].ready;

Renaming statement D.45640 = D.45639 + 1;

Renaming statement engine->ice_in.cands[D.45464][1].ready = D.45640;

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #131

Renaming statement iftmp.113 = "video";



Renaming block #132

Renaming statement iftmp.113 = "audio";



Renaming block #133

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2692, D.45467, 5, "No %s RTCP candidate found; defaulting to the first one.\n", iftmp.113);



Renaming block #134

Renaming statement i = i + 1;



Renaming block #138

Renaming statement i = 0;



Renaming block #144

Renaming statement if (i <= 1)



Renaming block #139

Renaming statement D.45715 = engine->ice_in.chosen[i];

Renaming statement D.45716 = engine->ice_in.cands[D.45715][i].ready;

Renaming statement if (D.45716 != 0)



Renaming block #140

Renaming statement D.45721 = engine->ice_in.ufrag;

Renaming statement D.45722 = _zstr (D.45721);

Renaming statement if (D.45722 != 0)



Renaming block #141

Renaming statement D.45724 = engine->ice_in.pwd;

Renaming statement D.45725 = _zstr (D.45724);

Renaming statement if (D.45725 != 0)



Renaming block #142

Renaming statement D.45715 = engine->ice_in.chosen[i];

Renaming statement engine->ice_in.cands[D.45715][i].ready = 0;



Renaming block #143

Renaming statement i = i + 1;



Renaming block #145

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45726 = engine->ice_in.cands[D.45461][0].con_addr;

Renaming statement if (D.45726 != 0B)



Renaming block #146

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45729 = engine->ice_in.cands[D.45461][0].con_port;

Renaming statement if (D.45729 != 0)



Renaming block #147

Renaming statement D.45527 = engine->cur_payload_map;

Renaming statement D.45467 = smh->session;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45726 = engine->ice_in.cands[D.45461][0].con_addr;

Renaming statement D.45732 = switch_core_perform_session_strdup (D.45467, D.45726, "src/switch_core_media.c", &__func__, 2709);

Renaming statement D.45527->remote_sdp_ip = D.45732;

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #148

Renaming statement iftmp.114 = "video";



Renaming block #149

Renaming statement iftmp.114 = "audio";



Renaming block #150

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45726 = engine->ice_in.cands[D.45461][0].con_addr;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45729 = engine->ice_in.cands[D.45461][0].con_port;

Renaming statement D.45737 = (int) D.45729;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2710, D.45467, 5, "setting remote %s ice addr to %s:%d based on candidate\n", iftmp.114, D.45726, D.45737);

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45621 = engine->ice_in.cands[D.45461][0].ready;

Renaming statement D.45622 = D.45621 + 1;

Renaming statement engine->ice_in.cands[D.45461][0].ready = D.45622;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45729 = engine->ice_in.cands[D.45461][0].con_port;

Renaming statement engine->remote_rtp_ice_port = D.45729;

Renaming statement D.45467 = smh->session;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45726 = engine->ice_in.cands[D.45461][0].con_addr;

Renaming statement D.45738 = switch_core_perform_session_strdup (D.45467, D.45726, "src/switch_core_media.c", &__func__, 2716);

Renaming statement engine->remote_rtp_ice_addr = D.45738;

Renaming statement D.45527 = engine->cur_payload_map;

Renaming statement D.45467 = smh->session;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45726 = engine->ice_in.cands[D.45461][0].con_addr;

Renaming statement D.45739 = switch_core_perform_session_strdup (D.45467, D.45726, "src/switch_core_media.c", &__func__, 2718);

Renaming statement D.45527->remote_sdp_ip = D.45739;

Renaming statement D.45527 = engine->cur_payload_map;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45729 = engine->ice_in.cands[D.45461][0].con_port;

Renaming statement D.45527->remote_sdp_port = D.45729;

Renaming statement D.45740 = engine->remote_rtcp_port;

Renaming statement if (D.45740 != 0)



Renaming block #151

Renaming statement D.45527 = engine->cur_payload_map;

Renaming statement D.45528 = D.45527->remote_sdp_port;

Renaming statement engine->remote_rtcp_port = D.45528;



Renaming block #152

Renaming statement D.45527 = engine->cur_payload_map;

Renaming statement D.45528 = D.45527->remote_sdp_port;

Renaming statement D.45743 = (int) D.45528;

Renaming statement switch_snprintf (&tmp, 80, "%d", D.45743);

Renaming statement D.45467 = smh->session;

Renaming statement D.45468 = D.45467->channel;

Renaming statement D.45527 = engine->cur_payload_map;

Renaming statement D.45744 = D.45527->remote_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.45468, "remote_media_ip", D.45744, 1);

Renaming statement D.45467 = smh->session;

Renaming statement D.45468 = D.45467->channel;

Renaming statement switch_channel_set_variable_var_check (D.45468, "remote_media_port", &tmp, 1);



Renaming block #153

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45693 = engine->ice_in.cands[D.45464][1].con_port;

Renaming statement if (D.45693 != 0)



Renaming block #154

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #155

Renaming statement iftmp.115 = "video";



Renaming block #156

Renaming statement iftmp.115 = "audio";



Renaming block #157

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45692 = engine->ice_in.cands[D.45464][1].con_addr;

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45693 = engine->ice_in.cands[D.45464][1].con_port;

Renaming statement D.45694 = (int) D.45693;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2730, D.45467, 5, "setting remote rtcp %s addr to %s:%d based on candidate\n", iftmp.115, D.45692, D.45694);

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45693 = engine->ice_in.cands[D.45464][1].con_port;

Renaming statement engine->remote_rtcp_ice_port = D.45693;

Renaming statement D.45467 = smh->session;

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45692 = engine->ice_in.cands[D.45464][1].con_addr;

Renaming statement D.45751 = switch_core_perform_session_strdup (D.45467, D.45692, "src/switch_core_media.c", &__func__, 2734);

Renaming statement engine->remote_rtcp_ice_addr = D.45751;

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45693 = engine->ice_in.cands[D.45464][1].con_port;

Renaming statement engine->remote_rtcp_port = D.45693;



Renaming block #158

Renaming statement D.45752 = m != 0B;

Renaming statement D.45753 = got_rtcp_mux == 0;

Renaming statement D.45754 = D.45752 && D.45753;

Renaming statement if (D.45754 != 0)



Renaming block #159

Renaming statement engine->rtcp_mux = -1;



Renaming block #160

Renaming statement D.45467 = smh->session;

Renaming statement D.45468 = D.45467->channel;

Renaming statement D.45757 = switch_channel_test_flag (D.45468, 103);

Renaming statement if (D.45757 != 0)



Renaming block #161

Renaming statement D.45519 = engine->rtp_session;

Renaming statement D.45760 = switch_rtp_ready (D.45519);

Renaming statement if (D.45760 != 0)



Renaming block #162

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45621 = engine->ice_in.cands[D.45461][0].ready;

Renaming statement if (D.45621 != 0)



Renaming block #163

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #164

Renaming statement iftmp.116 = "video";



Renaming block #165

Renaming statement iftmp.116 = "audio";



Renaming block #166

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2749, D.45467, 6, "RE-Activating %s ICE\n", iftmp.116);

Renaming statement D.45519 = engine->rtp_session;

Renaming statement D.45721 = engine->ice_in.ufrag;

Renaming statement D.45769 = engine->ice_out.ufrag;

Renaming statement D.45770 = engine->ice_out.pwd;

Renaming statement D.45724 = engine->ice_in.pwd;

Renaming statement D.45467 = smh->session;

Renaming statement D.45772 = switch_ice_direction (D.45467);

Renaming statement if (D.45772 == 1)



Renaming block #167

Renaming statement iftmp.117 = 2;



Renaming block #168

Renaming statement iftmp.117 = 6;



Renaming block #169

Renaming statement D.45776 = &engine->ice_in;

Renaming statement switch_rtp_activate_ice (D.45519, D.45721, D.45769, D.45770, D.45724, 0, iftmp.117, D.45776);



Renaming block #170

Renaming statement D.45519 = engine->rtp_session;

Renaming statement if (D.45519 != 0B)



Renaming block #171

Renaming statement D.45467 = smh->session;

Renaming statement D.45468 = D.45467->channel;

Renaming statement if (type == 1)



Renaming block #172

Renaming statement iftmp.118 = "rtcp_video_interval_msec";



Renaming block #173

Renaming statement iftmp.118 = "rtcp_audio_interval_msec";



Renaming block #174

Renaming statement val = switch_channel_get_variable_dup (D.45468, iftmp.118, 1, -1);

Renaming statement if (val != 0B)



Renaming block #175

Renaming statement if (type == 1)



Renaming block #176

Renaming statement D.45789 = smh->mparams;

Renaming statement iftmp.119 = D.45789->rtcp_video_interval_msec;



Renaming block #177

Renaming statement D.45789 = smh->mparams;

Renaming statement iftmp.119 = D.45789->rtcp_audio_interval_msec;



Renaming block #178

Renaming statement val = iftmp.119;

Renaming statement if (val != 0B)



Renaming block #179

Renaming statement D.45467 = smh->session;

Renaming statement D.45468 = D.45467->channel;

Renaming statement if (type == 1)



Renaming block #180

Renaming statement iftmp.120 = "rtp_remote_video_rtcp_port";



Renaming block #181

Renaming statement iftmp.120 = "rtp_remote_audio_rtcp_port";



Renaming block #182

Renaming statement rport = switch_channel_get_variable_dup (D.45468, iftmp.120, 1, -1);

Renaming statement remote_rtcp_port = engine->remote_rtcp_port;

Renaming statement D.45795 = remote_rtcp_port == 0;

Renaming statement D.45796 = rport != 0B;

Renaming statement D.45797 = D.45795 && D.45796;

Renaming statement if (D.45797 != 0)



Renaming block #183

Renaming statement D.45800 = atoi (rport);

Renaming statement remote_rtcp_port = (switch_port_t) D.45800;



Renaming block #184

Renaming statement D.45801 = strcasecmp (val, "passthru");

Renaming statement if (D.45801 == 0)



Renaming block #185

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #186

Renaming statement iftmp.121 = "video";



Renaming block #187

Renaming statement iftmp.121 = "audio";



Renaming block #188

Renaming statement D.45808 = (int) remote_rtcp_port;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2787, D.45467, 6, "Activating %s RTCP PASSTHRU PORT %d\n", iftmp.121, D.45808);

Renaming statement D.45519 = engine->rtp_session;

Renaming statement D.45809 = engine->rtcp_mux;

Renaming statement D.45810 = D.45809 > 0;

Renaming statement switch_rtp_activate_rtcp (D.45519, -1, remote_rtcp_port, D.45810);



Renaming block #189

Renaming statement interval = atoi (val);

Renaming statement interval.122 = (unsigned int) interval;

Renaming statement D.45813 = interval.122 + 4294967196;

Renaming statement if (D.45813 > 499900)



Renaming block #190

Renaming statement D.45467 = smh->session;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2793, D.45467, 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval);

Renaming statement interval = 10000;



Renaming block #191

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #192

Renaming statement iftmp.123 = "video";



Renaming block #193

Renaming statement iftmp.123 = "audio";



Renaming block #194

Renaming statement D.45808 = (int) remote_rtcp_port;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2798, D.45467, 6, "Activating %s RTCP PORT %d\n", iftmp.123, D.45808);

Renaming statement D.45519 = engine->rtp_session;

Renaming statement D.45809 = engine->rtcp_mux;

Renaming statement D.45810 = D.45809 > 0;

Renaming statement switch_rtp_activate_rtcp (D.45519, interval, remote_rtcp_port, D.45810);



Renaming block #195

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45639 = engine->ice_in.cands[D.45464][1].ready;

Renaming statement if (D.45639 != 0)



Renaming block #196

Renaming statement D.45809 = engine->rtcp_mux;

Renaming statement if (D.45809 > 0)



Renaming block #197

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45692 = engine->ice_in.cands[D.45464][1].con_addr;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45726 = engine->ice_in.cands[D.45461][0].con_addr;

Renaming statement D.38904 = __builtin_strcmp (D.45692, D.45726);

Renaming statement if (D.38904 == 0)



Renaming block #198

Renaming statement D.45464 = engine->ice_in.chosen[1];

Renaming statement D.45693 = engine->ice_in.cands[D.45464][1].con_port;

Renaming statement D.45461 = engine->ice_in.chosen[0];

Renaming statement D.45729 = engine->ice_in.cands[D.45461][0].con_port;

Renaming statement if (D.45693 == D.45729)



Renaming block #199

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #200

Renaming statement iftmp.124 = "video";



Renaming block #201

Renaming statement iftmp.124 = "audio";



Renaming block #202

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2806, D.45467, 6, "Skipping %s RTCP ICE (Same as RTP)\n", iftmp.124);



Renaming block #203

Renaming statement D.45467 = smh->session;

Renaming statement if (type == 1)



Renaming block #204

Renaming statement iftmp.125 = "video";



Renaming block #205

Renaming statement iftmp.125 = "audio";



Renaming block #206

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2808, D.45467, 6, "Activating %s RTCP ICE\n", iftmp.125);

Renaming statement D.45519 = engine->rtp_session;

Renaming statement D.45721 = engine->ice_in.ufrag;

Renaming statement D.45769 = engine->ice_out.ufrag;

Renaming statement D.45770 = engine->ice_out.pwd;

Renaming statement D.45724 = engine->ice_in.pwd;

Renaming statement D.45467 = smh->session;

Renaming statement D.45836 = switch_ice_direction (D.45467);

Renaming statement if (D.45836 == 1)



Renaming block #207

Renaming statement iftmp.126 = 2;



Renaming block #208

Renaming statement iftmp.126 = 6;



Renaming block #209

Renaming statement D.45776 = &engine->ice_in;

Renaming statement switch_rtp_activate_ice (D.45519, D.45721, D.45769, D.45770, D.45724, 1, iftmp.126, D.45776);



Renaming block #210



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.45461_41 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #3

Updating SSA information for statement D.45464_42 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #4

Updating SSA information for statement D.45467_43 = smh_34(D)->session;

Updating SSA information for statement D.45468_44 = D.45467_43->channel;

Updating SSA information for statement D.45469_45 = switch_channel_test_flag (D.45468_44, 103);



Registering new PHI nodes in block #5

Updating SSA information for statement engine_38->ice_in.chosen[0] = 0;

Updating SSA information for statement engine_38->ice_in.chosen[1] = 0;

Updating SSA information for statement engine_38->ice_in.cand_idx = 0;



Registering new PHI nodes in block #6

Updating SSA information for statement attr_47 = m_46(D)->m_attributes;



Registering new PHI nodes in block #7

Updating SSA information for statement attr_49 = sdp_48(D)->sdp_attributes;



Registering new PHI nodes in block #68



Registering new PHI nodes in block #8

Updating SSA information for statement D.45475_53 = attr_1->a_name;

Updating SSA information for statement D.45476_54 = _zstr (D.45475_53);



Registering new PHI nodes in block #9



Registering new PHI nodes in block #10

Updating SSA information for statement D.45475_55 = attr_1->a_name;

Updating SSA information for statement D.45479_56 = strcasecmp (D.45475_55, "ice-ufrag");



Registering new PHI nodes in block #11

Updating SSA information for statement D.45467_57 = smh_34(D)->session;

Updating SSA information for statement D.45482_58 = attr_1->a_value;

Updating SSA information for statement D.45483_59 = switch_core_perform_session_strdup (D.45467_57, D.45482_58, "src/switch_core_media.c", &__func__, 2503);

Updating SSA information for statement engine_38->ice_in.ufrag = D.45483_59;



Registering new PHI nodes in block #12

Updating SSA information for statement D.45475_60 = attr_1->a_name;

Updating SSA information for statement D.45485_61 = strcasecmp (D.45475_60, "ice-pwd");



Registering new PHI nodes in block #13

Updating SSA information for statement D.45467_62 = smh_34(D)->session;

Updating SSA information for statement D.45482_63 = attr_1->a_value;

Updating SSA information for statement D.45488_64 = switch_core_perform_session_strdup (D.45467_62, D.45482_63, "src/switch_core_media.c", &__func__, 2505);

Updating SSA information for statement engine_38->ice_in.pwd = D.45488_64;



Registering new PHI nodes in block #14

Updating SSA information for statement D.45475_65 = attr_1->a_name;

Updating SSA information for statement D.45490_66 = strcasecmp (D.45475_65, "ice-options");



Registering new PHI nodes in block #15

Updating SSA information for statement D.45467_67 = smh_34(D)->session;

Updating SSA information for statement D.45482_68 = attr_1->a_value;

Updating SSA information for statement D.45493_69 = switch_core_perform_session_strdup (D.45467_67, D.45482_68, "src/switch_core_media.c", &__func__, 2507);

Updating SSA information for statement engine_38->ice_in.options = D.45493_69;



Registering new PHI nodes in block #16

Updating SSA information for statement D.45497_70 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #17

Updating SSA information for statement D.45467_71 = smh_34(D)->session;

Updating SSA information for statement D.45499_72 = dtls_ok (D.45467_71);



Registering new PHI nodes in block #18

Updating SSA information for statement D.45475_73 = attr_1->a_name;

Updating SSA information for statement D.45501_74 = strcasecmp (D.45475_73, "fingerprint");



Registering new PHI nodes in block #19

Updating SSA information for statement D.45482_75 = attr_1->a_value;

Updating SSA information for statement D.45503_76 = _zstr (D.45482_75);



Registering new PHI nodes in block #20

Updating SSA information for statement D.45467_77 = smh_34(D)->session;

Updating SSA information for statement D.45482_78 = attr_1->a_value;

Updating SSA information for statement D.45505_79 = switch_core_perform_session_strdup (D.45467_77, D.45482_78, "src/switch_core_media.c", &__func__, 2512);

Updating SSA information for statement engine_38->remote_dtls_fingerprint.type = D.45505_79;

Updating SSA information for statement D.45506_80 = engine_38->remote_dtls_fingerprint.type;

Updating SSA information for statement p_81 = __builtin_strchr (D.45506_80, 32);



Registering new PHI nodes in block #21

Updating SSA information for statement *p_81 = 0;

Updating SSA information for statement switch_copy_string (D.45509_83, p_82, 192);



Registering new PHI nodes in block #22

Updating SSA information for statement generate_local_fingerprint (smh_34(D), type_36(D));

Updating SSA information for statement D.45467_84 = smh_34(D)->session;

Updating SSA information for statement D.45468_85 = D.45467_84->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.45468_85, 109, 1);



Registering new PHI nodes in block #23

Updating SSA information for statement D.45512_86 = engine_38->remote_ssrc;



Registering new PHI nodes in block #24

Updating SSA information for statement D.45475_87 = attr_1->a_name;

Updating SSA information for statement D.45514_88 = strcasecmp (D.45475_87, "ssrc");



Registering new PHI nodes in block #25

Updating SSA information for statement D.45482_89 = attr_1->a_value;



Registering new PHI nodes in block #26

Updating SSA information for statement D.45482_90 = attr_1->a_value;

Updating SSA information for statement D.45517_91 = atol (D.45482_90);

Updating SSA information for statement engine_38->remote_ssrc = D.45518_92;

Updating SSA information for statement D.45519_93 = engine_38->rtp_session;



Registering new PHI nodes in block #27

Updating SSA information for statement D.45512_94 = engine_38->remote_ssrc;



Registering new PHI nodes in block #28

Updating SSA information for statement D.45519_95 = engine_38->rtp_session;

Updating SSA information for statement D.45512_96 = engine_38->remote_ssrc;

Updating SSA information for statement switch_rtp_set_remote_ssrc (D.45519_95, D.45512_96);



Registering new PHI nodes in block #29

Updating SSA information for statement D.45475_97 = attr_1->a_name;

Updating SSA information for statement D.45524_98 = strcasecmp (D.45475_97, "rtcp-mux");



Registering new PHI nodes in block #30

Updating SSA information for statement engine_38->rtcp_mux = 1;

Updating SSA information for statement D.45527_99 = engine_38->cur_payload_map;

Updating SSA information for statement D.45528_100 = D.45527_99->remote_sdp_port;

Updating SSA information for statement engine_38->remote_rtcp_port = D.45528_100;



Registering new PHI nodes in block #31

Updating SSA information for statement D.45475_102 = attr_1->a_name;

Updating SSA information for statement D.45530_103 = strcasecmp (D.45475_102, "candidate");



Registering new PHI nodes in block #32

Updating SSA information for statement D.45467_104 = smh_34(D)->session;

Updating SSA information for statement D.45468_105 = D.45467_104->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.45468_105, 108, 1);

Updating SSA information for statement D.45533_106 = engine_38->cand_acl_count;



Registering new PHI nodes in block #33

Updating SSA information for statement D.45533_107 = engine_38->cand_acl_count;

Updating SSA information for statement engine_38->cand_acl[D.45533_107] = "wan.auto";

Updating SSA information for statement engine_38->cand_acl_count = D.45536_108;

Updating SSA information for statement D.45467_109 = smh_34(D)->session;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2548, D.45467_109, 4, "NO candidate ACL defined, Defaulting to wan.auto\n");



Registering new PHI nodes in block #34

Updating SSA information for statement D.45482_110 = attr_1->a_value;

Updating SSA information for statement D.45537_111 = switch_stristr (" udp ", D.45482_110);



Registering new PHI nodes in block #35



Registering new PHI nodes in block #36

Updating SSA information for statement D.45467_112 = smh_34(D)->session;

Updating SSA information for statement D.45482_113 = attr_1->a_value;

Updating SSA information for statement data_114 = switch_core_perform_session_strdup (D.45467_112, D.45482_113, "src/switch_core_media.c", &__func__, 2556);

Updating SSA information for statement D.45540_115 = switch_separate_string (data_114, 32, &fields, 15);



Registering new PHI nodes in block #37

Updating SSA information for statement D.45544_117 = engine_38->ice_in.cand_idx;



Registering new PHI nodes in block #39

Updating SSA information for statement D.45545_118 = fields[1];

Updating SSA information for statement D.45546_119 = atoi (D.45545_118);



Registering new PHI nodes in block #41



Registering new PHI nodes in block #40

Updating SSA information for statement D.45467_122 = smh_34(D)->session;

Updating SSA information for statement D.45547_123 = fields[i_2];

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2569, D.45467_122, 101, "CAND %d [%s]\n", i_2, D.45547_123);



Registering new PHI nodes in block #42

Updating SSA information for statement D.45467_125 = smh_34(D)->session;

Updating SSA information for statement D.45549_127 = fields[2];

Updating SSA information for statement D.45550_128 = fields[7];

Updating SSA information for statement D.45551_129 = fields[4];

Updating SSA information for statement D.45552_130 = fields[5];

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2572, D.45467_125, 7, "Checking Candidate cid: %d proto: %s type: %s addr: %s:%s\n", D.45548_126, D.45549_127, D.45550_128, D.45551_129, D.45552_130);

Updating SSA information for statement D.45544_131 = engine_38->ice_in.cand_idx;

Updating SSA information for statement engine_38->ice_in.cand_idx = D.45553_132;

Updating SSA information for statement D.45533_134 = engine_38->cand_acl_count;



Registering new PHI nodes in block #43

Updating SSA information for statement D.45556_135 = engine_38->ice_in.chosen[cid_120];



Registering new PHI nodes in block #44

Updating SSA information for statement D.45551_136 = fields[4];

Updating SSA information for statement D.45558_137 = engine_38->cand_acl[i_133];

Updating SSA information for statement D.45559_138 = switch_check_network_list_ip_token (D.45551_136, D.45558_137, 0B);



Registering new PHI nodes in block #45

Updating SSA information for statement D.45544_139 = engine_38->ice_in.cand_idx;

Updating SSA information for statement engine_38->ice_in.chosen[cid_120] = D.45544_139;

Updating SSA information for statement D.45467_140 = smh_34(D)->session;



Registering new PHI nodes in block #46



Registering new PHI nodes in block #47



Registering new PHI nodes in block #48

Updating SSA information for statement D.45549_144 = fields[2];

Updating SSA information for statement D.45550_145 = fields[7];

Updating SSA information for statement D.45551_146 = fields[4];

Updating SSA information for statement D.45552_147 = fields[5];

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2581, D.45467_140, 5, "Choose %s Candidate cid: %d proto: %s type: %s addr: %s:%s\n", iftmp.105_13, D.45548_143, D.45549_144, D.45550_145, D.45551_146, D.45552_147);



Registering new PHI nodes in block #49

Updating SSA information for statement D.45467_148 = smh_34(D)->session;



Registering new PHI nodes in block #50



Registering new PHI nodes in block #51



Registering new PHI nodes in block #52

Updating SSA information for statement D.45549_152 = fields[2];

Updating SSA information for statement D.45550_153 = fields[7];

Updating SSA information for statement D.45551_154 = fields[4];

Updating SSA information for statement D.45552_155 = fields[5];

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2586, D.45467_148, 5, "Save %s Candidate cid: %d proto: %s type: %s addr: %s:%s\n", iftmp.106_14, D.45548_151, D.45549_152, D.45550_153, D.45551_154, D.45552_155);



Registering new PHI nodes in block #53

Updating SSA information for statement D.45544_156 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45467_157 = smh_34(D)->session;

Updating SSA information for statement D.45569_158 = fields[0];

Updating SSA information for statement D.45570_159 = switch_core_perform_session_strdup (D.45467_157, D.45569_158, "src/switch_core_media.c", &__func__, 2592);

Updating SSA information for statement engine_38->ice_in.cands[D.45544_156][cid_120].foundation = D.45570_159;

Updating SSA information for statement D.45544_160 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45545_161 = fields[1];

Updating SSA information for statement D.45571_162 = atoi (D.45545_161);

Updating SSA information for statement engine_38->ice_in.cands[D.45544_160][cid_120].component_id = D.45571_162;

Updating SSA information for statement D.45544_163 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45467_164 = smh_34(D)->session;

Updating SSA information for statement D.45549_165 = fields[2];

Updating SSA information for statement D.45572_166 = switch_core_perform_session_strdup (D.45467_164, D.45549_165, "src/switch_core_media.c", &__func__, 2594);

Updating SSA information for statement engine_38->ice_in.cands[D.45544_163][cid_120].transport = D.45572_166;

Updating SSA information for statement D.45544_167 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45573_168 = fields[3];

Updating SSA information for statement D.45574_169 = atol (D.45573_168);

Updating SSA information for statement engine_38->ice_in.cands[D.45544_167][cid_120].priority = D.45575_170;

Updating SSA information for statement D.45544_171 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45467_172 = smh_34(D)->session;

Updating SSA information for statement D.45551_173 = fields[4];

Updating SSA information for statement D.45576_174 = switch_core_perform_session_strdup (D.45467_172, D.45551_173, "src/switch_core_media.c", &__func__, 2596);

Updating SSA information for statement engine_38->ice_in.cands[D.45544_171][cid_120].con_addr = D.45576_174;

Updating SSA information for statement D.45544_175 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45552_176 = fields[5];

Updating SSA information for statement D.45577_177 = atoi (D.45552_176);

Updating SSA information for statement engine_38->ice_in.cands[D.45544_175][cid_120].con_port = D.45578_178;



Registering new PHI nodes in block #63



Registering new PHI nodes in block #64

Updating SSA information for statement D.45584_181 = fields[D.45583_180];



Registering new PHI nodes in block #54

Updating SSA information for statement D.45579_182 = fields[j_10];

Updating SSA information for statement D.45580_183 = strcasecmp (D.45579_182, "typ");



Registering new PHI nodes in block #55

Updating SSA information for statement D.45544_184 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45467_185 = smh_34(D)->session;

Updating SSA information for statement D.45584_187 = fields[D.45583_186];

Updating SSA information for statement D.45585_188 = switch_core_perform_session_strdup (D.45467_185, D.45584_187, "src/switch_core_media.c", &__func__, 2604);

Updating SSA information for statement engine_38->ice_in.cands[D.45544_184][cid_120].cand_type = D.45585_188;



Registering new PHI nodes in block #56

Updating SSA information for statement D.45579_189 = fields[j_10];

Updating SSA information for statement D.45587_190 = strcasecmp (D.45579_189, "raddr");



Registering new PHI nodes in block #57

Updating SSA information for statement D.45544_191 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45467_192 = smh_34(D)->session;

Updating SSA information for statement D.45584_194 = fields[D.45583_193];

Updating SSA information for statement D.45590_195 = switch_core_perform_session_strdup (D.45467_192, D.45584_194, "src/switch_core_media.c", &__func__, 2606);

Updating SSA information for statement engine_38->ice_in.cands[D.45544_191][cid_120].raddr = D.45590_195;



Registering new PHI nodes in block #58

Updating SSA information for statement D.45579_196 = fields[j_10];

Updating SSA information for statement D.45592_197 = strcasecmp (D.45579_196, "rport");



Registering new PHI nodes in block #59

Updating SSA information for statement D.45544_198 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45584_200 = fields[D.45583_199];

Updating SSA information for statement D.45595_201 = atoi (D.45584_200);

Updating SSA information for statement engine_38->ice_in.cands[D.45544_198][cid_120].rport = D.45596_202;



Registering new PHI nodes in block #60

Updating SSA information for statement D.45579_203 = fields[j_10];

Updating SSA information for statement D.45598_204 = strcasecmp (D.45579_203, "generation");



Registering new PHI nodes in block #61

Updating SSA information for statement D.45544_205 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45467_206 = smh_34(D)->session;

Updating SSA information for statement D.45584_208 = fields[D.45583_207];

Updating SSA information for statement D.45601_209 = switch_core_perform_session_strdup (D.45467_206, D.45584_208, "src/switch_core_media.c", &__func__, 2610);

Updating SSA information for statement engine_38->ice_in.cands[D.45544_205][cid_120].generation = D.45601_209;



Registering new PHI nodes in block #62



Registering new PHI nodes in block #65

Updating SSA information for statement D.45556_211 = engine_38->ice_in.chosen[cid_120];



Registering new PHI nodes in block #66

Updating SSA information for statement D.45556_212 = engine_38->ice_in.chosen[cid_120];

Updating SSA information for statement D.45605_213 = engine_38->ice_in.cands[D.45556_212][cid_120].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45556_212][cid_120].ready = D.45606_214;



Registering new PHI nodes in block #38

Updating SSA information for statement D.45467_215 = smh_34(D)->session;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2561, D.45467_215, 4, "Invalid data\n");



Registering new PHI nodes in block #67

Updating SSA information for statement attr_216 = attr_1->a_next;



Registering new PHI nodes in block #69

Updating SSA information for statement D.45461_217 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #70

Updating SSA information for statement D.45464_218 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #71



Registering new PHI nodes in block #89

Updating SSA information for statement D.45544_220 = engine_38->ice_in.cand_idx;



Registering new PHI nodes in block #90

Updating SSA information for statement D.45461_221 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #91

Updating SSA information for statement D.45464_222 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #72

Updating SSA information for statement D.45461_223 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #73

Updating SSA information for statement D.45611_224 = engine_38->ice_in.cands[i_3][0].component_id;



Registering new PHI nodes in block #74

Updating SSA information for statement D.45614_225 = engine_38->ice_in.cands[i_3][0].rport;



Registering new PHI nodes in block #75

Updating SSA information for statement D.45617_226 = engine_38->ice_in.cands[i_3][0].con_addr;

Updating SSA information for statement D.45618_227 = switch_check_network_list_ip_token (D.45617_226, "localnet.auto", 0B);



Registering new PHI nodes in block #76

Updating SSA information for statement engine_38->ice_in.chosen[0] = i_3;

Updating SSA information for statement D.45461_228 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45621_229 = engine_38->ice_in.cands[D.45461_228][0].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45461_228][0].ready = D.45622_230;

Updating SSA information for statement D.45467_231 = smh_34(D)->session;



Registering new PHI nodes in block #77



Registering new PHI nodes in block #78



Registering new PHI nodes in block #79

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2636, D.45467_231, 5, "No %s RTP candidate found; defaulting to the first local one.\n", iftmp.107_15);



Registering new PHI nodes in block #80

Updating SSA information for statement D.45464_234 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #81

Updating SSA information for statement D.45629_235 = engine_38->ice_in.cands[i_3][1].component_id;



Registering new PHI nodes in block #82

Updating SSA information for statement D.45632_236 = engine_38->ice_in.cands[i_3][1].rport;



Registering new PHI nodes in block #83

Updating SSA information for statement D.45635_237 = engine_38->ice_in.cands[i_3][1].con_addr;

Updating SSA information for statement D.45636_238 = switch_check_network_list_ip_token (D.45635_237, "localnet.auto", 0B);



Registering new PHI nodes in block #84

Updating SSA information for statement engine_38->ice_in.chosen[1] = i_3;

Updating SSA information for statement D.45464_239 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45639_240 = engine_38->ice_in.cands[D.45464_239][1].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45464_239][1].ready = D.45640_241;

Updating SSA information for statement D.45467_242 = smh_34(D)->session;



Registering new PHI nodes in block #85



Registering new PHI nodes in block #86



Registering new PHI nodes in block #87

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2643, D.45467_242, 5, "No %s RTCP candidate found; defaulting to the first local one.\n", iftmp.108_16);



Registering new PHI nodes in block #88



Registering new PHI nodes in block #92

Updating SSA information for statement D.45461_246 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #93

Updating SSA information for statement D.45464_247 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #94



Registering new PHI nodes in block #110

Updating SSA information for statement D.45544_249 = engine_38->ice_in.cand_idx;



Registering new PHI nodes in block #111

Updating SSA information for statement D.45461_250 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #112

Updating SSA information for statement D.45464_251 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #95

Updating SSA information for statement D.45461_252 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #96

Updating SSA information for statement D.45611_253 = engine_38->ice_in.cands[i_4][0].component_id;



Registering new PHI nodes in block #97

Updating SSA information for statement D.45614_254 = engine_38->ice_in.cands[i_4][0].rport;



Registering new PHI nodes in block #98

Updating SSA information for statement engine_38->ice_in.chosen[0] = i_4;

Updating SSA information for statement D.45461_255 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45621_256 = engine_38->ice_in.cands[D.45461_255][0].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45461_255][0].ready = D.45622_257;

Updating SSA information for statement D.45467_258 = smh_34(D)->session;



Registering new PHI nodes in block #99



Registering new PHI nodes in block #100



Registering new PHI nodes in block #101

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2655, D.45467_258, 5, "No %s RTP candidate found; defaulting to the first srflx one.\n", iftmp.109_17);



Registering new PHI nodes in block #102

Updating SSA information for statement D.45464_261 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #103

Updating SSA information for statement D.45629_262 = engine_38->ice_in.cands[i_4][1].component_id;



Registering new PHI nodes in block #104

Updating SSA information for statement D.45632_263 = engine_38->ice_in.cands[i_4][1].rport;



Registering new PHI nodes in block #105

Updating SSA information for statement engine_38->ice_in.chosen[1] = i_4;

Updating SSA information for statement D.45464_264 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45639_265 = engine_38->ice_in.cands[D.45464_264][1].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45464_264][1].ready = D.45640_266;

Updating SSA information for statement D.45467_267 = smh_34(D)->session;



Registering new PHI nodes in block #106



Registering new PHI nodes in block #107



Registering new PHI nodes in block #108

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2661, D.45467_267, 5, "No %s RTCP candidate found; defaulting to the first srflx one.\n", iftmp.110_18);



Registering new PHI nodes in block #109



Registering new PHI nodes in block #113

Updating SSA information for statement D.45461_271 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #114

Updating SSA information for statement D.45464_272 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #115

Updating SSA information for statement D.45461_276 = engine_38->ice_in.chosen[0];

Updating SSA information for statement engine_38->ice_in.chosen[1] = D.45461_276;

Updating SSA information for statement D.45464_279 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45461_286 = engine_38->ice_in.chosen[0];

Updating SSA information for statement memcpy (D.45683_283, D.45687_289, 44);

Updating SSA information for statement D.45464_290 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45639_291 = engine_38->ice_in.cands[D.45464_290][1].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45464_290][1].ready = D.45640_292;

Updating SSA information for statement D.45467_293 = smh_34(D)->session;



Registering new PHI nodes in block #116



Registering new PHI nodes in block #117



Registering new PHI nodes in block #118

Updating SSA information for statement D.45464_296 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45692_297 = engine_38->ice_in.cands[D.45464_296][1].con_addr;

Updating SSA information for statement D.45464_298 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45693_299 = engine_38->ice_in.cands[D.45464_298][1].con_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2675, D.45467_293, 5, "No %s RTCP candidate found; defaulting to the same as RTP [%s:%d]\n", iftmp.111_19, D.45692_297, D.45694_300);



Registering new PHI nodes in block #119

Updating SSA information for statement D.45461_301 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #120

Updating SSA information for statement D.45464_302 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #121



Registering new PHI nodes in block #135

Updating SSA information for statement D.45544_304 = engine_38->ice_in.cand_idx;



Registering new PHI nodes in block #136

Updating SSA information for statement D.45461_305 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #137

Updating SSA information for statement D.45464_306 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #122

Updating SSA information for statement D.45461_307 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #123

Updating SSA information for statement D.45611_308 = engine_38->ice_in.cands[i_5][0].component_id;



Registering new PHI nodes in block #124

Updating SSA information for statement engine_38->ice_in.chosen[0] = i_5;

Updating SSA information for statement D.45461_309 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45621_310 = engine_38->ice_in.cands[D.45461_309][0].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45461_309][0].ready = D.45622_311;

Updating SSA information for statement D.45467_312 = smh_34(D)->session;



Registering new PHI nodes in block #125



Registering new PHI nodes in block #126



Registering new PHI nodes in block #127

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2686, D.45467_312, 5, "No %s RTP candidate found; defaulting to the first one.\n", iftmp.112_20);



Registering new PHI nodes in block #128

Updating SSA information for statement D.45464_315 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #129

Updating SSA information for statement D.45629_316 = engine_38->ice_in.cands[i_5][1].component_id;



Registering new PHI nodes in block #130

Updating SSA information for statement engine_38->ice_in.chosen[1] = i_5;

Updating SSA information for statement D.45464_317 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45639_318 = engine_38->ice_in.cands[D.45464_317][1].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45464_317][1].ready = D.45640_319;

Updating SSA information for statement D.45467_320 = smh_34(D)->session;



Registering new PHI nodes in block #131



Registering new PHI nodes in block #132



Registering new PHI nodes in block #133

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2692, D.45467_320, 5, "No %s RTCP candidate found; defaulting to the first one.\n", iftmp.113_21);



Registering new PHI nodes in block #134



Registering new PHI nodes in block #138



Registering new PHI nodes in block #144



Registering new PHI nodes in block #139

Updating SSA information for statement D.45715_325 = engine_38->ice_in.chosen[i_6];

Updating SSA information for statement D.45716_326 = engine_38->ice_in.cands[D.45715_325][i_6].ready;



Registering new PHI nodes in block #140

Updating SSA information for statement D.45721_327 = engine_38->ice_in.ufrag;

Updating SSA information for statement D.45722_328 = _zstr (D.45721_327);



Registering new PHI nodes in block #141

Updating SSA information for statement D.45724_329 = engine_38->ice_in.pwd;

Updating SSA information for statement D.45725_330 = _zstr (D.45724_329);



Registering new PHI nodes in block #142

Updating SSA information for statement D.45715_331 = engine_38->ice_in.chosen[i_6];

Updating SSA information for statement engine_38->ice_in.cands[D.45715_331][i_6].ready = 0;



Registering new PHI nodes in block #143



Registering new PHI nodes in block #145

Updating SSA information for statement D.45461_333 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45726_334 = engine_38->ice_in.cands[D.45461_333][0].con_addr;



Registering new PHI nodes in block #146

Updating SSA information for statement D.45461_335 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45729_336 = engine_38->ice_in.cands[D.45461_335][0].con_port;



Registering new PHI nodes in block #147

Updating SSA information for statement tmp = "";

Updating SSA information for statement D.45527_337 = engine_38->cur_payload_map;

Updating SSA information for statement D.45467_338 = smh_34(D)->session;

Updating SSA information for statement D.45461_339 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45726_340 = engine_38->ice_in.cands[D.45461_339][0].con_addr;

Updating SSA information for statement D.45732_341 = switch_core_perform_session_strdup (D.45467_338, D.45726_340, "src/switch_core_media.c", &__func__, 2709);

Updating SSA information for statement D.45527_337->remote_sdp_ip = D.45732_341;

Updating SSA information for statement D.45467_342 = smh_34(D)->session;



Registering new PHI nodes in block #148



Registering new PHI nodes in block #149



Registering new PHI nodes in block #150

Updating SSA information for statement D.45461_345 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45726_346 = engine_38->ice_in.cands[D.45461_345][0].con_addr;

Updating SSA information for statement D.45461_347 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45729_348 = engine_38->ice_in.cands[D.45461_347][0].con_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2710, D.45467_342, 5, "setting remote %s ice addr to %s:%d based on candidate\n", iftmp.114_22, D.45726_346, D.45737_349);

Updating SSA information for statement D.45461_350 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45621_351 = engine_38->ice_in.cands[D.45461_350][0].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45461_350][0].ready = D.45622_352;

Updating SSA information for statement D.45461_353 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45729_354 = engine_38->ice_in.cands[D.45461_353][0].con_port;

Updating SSA information for statement engine_38->remote_rtp_ice_port = D.45729_354;

Updating SSA information for statement D.45467_355 = smh_34(D)->session;

Updating SSA information for statement D.45461_356 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45726_357 = engine_38->ice_in.cands[D.45461_356][0].con_addr;

Updating SSA information for statement D.45738_358 = switch_core_perform_session_strdup (D.45467_355, D.45726_357, "src/switch_core_media.c", &__func__, 2716);

Updating SSA information for statement engine_38->remote_rtp_ice_addr = D.45738_358;

Updating SSA information for statement D.45527_359 = engine_38->cur_payload_map;

Updating SSA information for statement D.45467_360 = smh_34(D)->session;

Updating SSA information for statement D.45461_361 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45726_362 = engine_38->ice_in.cands[D.45461_361][0].con_addr;

Updating SSA information for statement D.45739_363 = switch_core_perform_session_strdup (D.45467_360, D.45726_362, "src/switch_core_media.c", &__func__, 2718);

Updating SSA information for statement D.45527_359->remote_sdp_ip = D.45739_363;

Updating SSA information for statement D.45527_364 = engine_38->cur_payload_map;

Updating SSA information for statement D.45461_365 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45729_366 = engine_38->ice_in.cands[D.45461_365][0].con_port;

Updating SSA information for statement D.45527_364->remote_sdp_port = D.45729_366;

Updating SSA information for statement D.45740_367 = engine_38->remote_rtcp_port;



Registering new PHI nodes in block #151

Updating SSA information for statement D.45527_368 = engine_38->cur_payload_map;

Updating SSA information for statement D.45528_369 = D.45527_368->remote_sdp_port;

Updating SSA information for statement engine_38->remote_rtcp_port = D.45528_369;



Registering new PHI nodes in block #152

Updating SSA information for statement D.45527_370 = engine_38->cur_payload_map;

Updating SSA information for statement D.45528_371 = D.45527_370->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 80, "%d", D.45743_372);

Updating SSA information for statement D.45467_373 = smh_34(D)->session;

Updating SSA information for statement D.45468_374 = D.45467_373->channel;

Updating SSA information for statement D.45527_375 = engine_38->cur_payload_map;

Updating SSA information for statement D.45744_376 = D.45527_375->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.45468_374, "remote_media_ip", D.45744_376, 1);

Updating SSA information for statement D.45467_377 = smh_34(D)->session;

Updating SSA information for statement D.45468_378 = D.45467_377->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.45468_378, "remote_media_port", &tmp, 1);



Registering new PHI nodes in block #153

Updating SSA information for statement D.45464_379 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45693_380 = engine_38->ice_in.cands[D.45464_379][1].con_port;



Registering new PHI nodes in block #154

Updating SSA information for statement D.45467_381 = smh_34(D)->session;



Registering new PHI nodes in block #155



Registering new PHI nodes in block #156



Registering new PHI nodes in block #157

Updating SSA information for statement D.45464_384 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45692_385 = engine_38->ice_in.cands[D.45464_384][1].con_addr;

Updating SSA information for statement D.45464_386 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45693_387 = engine_38->ice_in.cands[D.45464_386][1].con_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2730, D.45467_381, 5, "setting remote rtcp %s addr to %s:%d based on candidate\n", iftmp.115_23, D.45692_385, D.45694_388);

Updating SSA information for statement D.45464_389 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45693_390 = engine_38->ice_in.cands[D.45464_389][1].con_port;

Updating SSA information for statement engine_38->remote_rtcp_ice_port = D.45693_390;

Updating SSA information for statement D.45467_391 = smh_34(D)->session;

Updating SSA information for statement D.45464_392 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45692_393 = engine_38->ice_in.cands[D.45464_392][1].con_addr;

Updating SSA information for statement D.45751_394 = switch_core_perform_session_strdup (D.45467_391, D.45692_393, "src/switch_core_media.c", &__func__, 2734);

Updating SSA information for statement engine_38->remote_rtcp_ice_addr = D.45751_394;

Updating SSA information for statement D.45464_395 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45693_396 = engine_38->ice_in.cands[D.45464_395][1].con_port;

Updating SSA information for statement engine_38->remote_rtcp_port = D.45693_396;



Registering new PHI nodes in block #158



Registering new PHI nodes in block #159

Updating SSA information for statement engine_38->rtcp_mux = -1;



Registering new PHI nodes in block #160

Updating SSA information for statement D.45467_400 = smh_34(D)->session;

Updating SSA information for statement D.45468_401 = D.45467_400->channel;

Updating SSA information for statement D.45757_402 = switch_channel_test_flag (D.45468_401, 103);



Registering new PHI nodes in block #161

Updating SSA information for statement D.45519_403 = engine_38->rtp_session;

Updating SSA information for statement D.45760_404 = switch_rtp_ready (D.45519_403);



Registering new PHI nodes in block #162

Updating SSA information for statement D.45461_405 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45621_406 = engine_38->ice_in.cands[D.45461_405][0].ready;



Registering new PHI nodes in block #163

Updating SSA information for statement D.45467_407 = smh_34(D)->session;



Registering new PHI nodes in block #164



Registering new PHI nodes in block #165



Registering new PHI nodes in block #166

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2749, D.45467_407, 6, "RE-Activating %s ICE\n", iftmp.116_24);

Updating SSA information for statement D.45519_410 = engine_38->rtp_session;

Updating SSA information for statement D.45721_411 = engine_38->ice_in.ufrag;

Updating SSA information for statement D.45769_412 = engine_38->ice_out.ufrag;

Updating SSA information for statement D.45770_413 = engine_38->ice_out.pwd;

Updating SSA information for statement D.45724_414 = engine_38->ice_in.pwd;

Updating SSA information for statement D.45467_415 = smh_34(D)->session;

Updating SSA information for statement D.45772_416 = switch_ice_direction (D.45467_415);



Registering new PHI nodes in block #167



Registering new PHI nodes in block #168



Registering new PHI nodes in block #169

Updating SSA information for statement switch_rtp_activate_ice (D.45519_410, D.45721_411, D.45769_412, D.45770_413, D.45724_414, 0, iftmp.117_25, D.45776_419);



Registering new PHI nodes in block #170

Updating SSA information for statement D.45519_420 = engine_38->rtp_session;



Registering new PHI nodes in block #171

Updating SSA information for statement D.45467_421 = smh_34(D)->session;

Updating SSA information for statement D.45468_422 = D.45467_421->channel;



Registering new PHI nodes in block #172



Registering new PHI nodes in block #173



Registering new PHI nodes in block #174

Updating SSA information for statement val_425 = switch_channel_get_variable_dup (D.45468_422, iftmp.118_26, 1, -1);



Registering new PHI nodes in block #175



Registering new PHI nodes in block #176

Updating SSA information for statement D.45789_426 = smh_34(D)->mparams;

Updating SSA information for statement iftmp.119_427 = D.45789_426->rtcp_video_interval_msec;



Registering new PHI nodes in block #177

Updating SSA information for statement D.45789_428 = smh_34(D)->mparams;

Updating SSA information for statement iftmp.119_429 = D.45789_428->rtcp_audio_interval_msec;



Registering new PHI nodes in block #178



Registering new PHI nodes in block #179

Updating SSA information for statement D.45467_431 = smh_34(D)->session;

Updating SSA information for statement D.45468_432 = D.45467_431->channel;



Registering new PHI nodes in block #180



Registering new PHI nodes in block #181



Registering new PHI nodes in block #182

Updating SSA information for statement rport_435 = switch_channel_get_variable_dup (D.45468_432, iftmp.120_28, 1, -1);

Updating SSA information for statement remote_rtcp_port_436 = engine_38->remote_rtcp_port;



Registering new PHI nodes in block #183

Updating SSA information for statement D.45800_440 = atoi (rport_435);



Registering new PHI nodes in block #184

Updating SSA information for statement D.45801_442 = strcasecmp (val_9, "passthru");



Registering new PHI nodes in block #185

Updating SSA information for statement D.45467_443 = smh_34(D)->session;



Registering new PHI nodes in block #186



Registering new PHI nodes in block #187



Registering new PHI nodes in block #188

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2787, D.45467_443, 6, "Activating %s RTCP PASSTHRU PORT %d\n", iftmp.121_29, D.45808_446);

Updating SSA information for statement D.45519_447 = engine_38->rtp_session;

Updating SSA information for statement D.45809_448 = engine_38->rtcp_mux;

Updating SSA information for statement switch_rtp_activate_rtcp (D.45519_447, -1, remote_rtcp_port_11, D.45810_449);



Registering new PHI nodes in block #189

Updating SSA information for statement interval_450 = atoi (val_9);



Registering new PHI nodes in block #190

Updating SSA information for statement D.45467_453 = smh_34(D)->session;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2793, D.45467_453, 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_450);



Registering new PHI nodes in block #191

Updating SSA information for statement D.45467_455 = smh_34(D)->session;



Registering new PHI nodes in block #192



Registering new PHI nodes in block #193



Registering new PHI nodes in block #194

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2798, D.45467_455, 6, "Activating %s RTCP PORT %d\n", iftmp.123_30, D.45808_458);

Updating SSA information for statement D.45519_459 = engine_38->rtp_session;

Updating SSA information for statement D.45809_460 = engine_38->rtcp_mux;

Updating SSA information for statement switch_rtp_activate_rtcp (D.45519_459, interval_12, remote_rtcp_port_11, D.45810_461);



Registering new PHI nodes in block #195

Updating SSA information for statement D.45464_462 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45639_463 = engine_38->ice_in.cands[D.45464_462][1].ready;



Registering new PHI nodes in block #196

Updating SSA information for statement D.45809_464 = engine_38->rtcp_mux;



Registering new PHI nodes in block #197

Updating SSA information for statement D.45464_465 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45692_466 = engine_38->ice_in.cands[D.45464_465][1].con_addr;

Updating SSA information for statement D.45461_467 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45726_468 = engine_38->ice_in.cands[D.45461_467][0].con_addr;

Updating SSA information for statement D.38904_469 = __builtin_strcmp (D.45692_466, D.45726_468);



Registering new PHI nodes in block #198

Updating SSA information for statement D.45464_470 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45693_471 = engine_38->ice_in.cands[D.45464_470][1].con_port;

Updating SSA information for statement D.45461_472 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45729_473 = engine_38->ice_in.cands[D.45461_472][0].con_port;



Registering new PHI nodes in block #199

Updating SSA information for statement D.45467_474 = smh_34(D)->session;



Registering new PHI nodes in block #200



Registering new PHI nodes in block #201



Registering new PHI nodes in block #202

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2806, D.45467_474, 6, "Skipping %s RTCP ICE (Same as RTP)\n", iftmp.124_31);



Registering new PHI nodes in block #203

Updating SSA information for statement D.45467_477 = smh_34(D)->session;



Registering new PHI nodes in block #204



Registering new PHI nodes in block #205



Registering new PHI nodes in block #206

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2808, D.45467_477, 6, "Activating %s RTCP ICE\n", iftmp.125_32);

Updating SSA information for statement D.45519_480 = engine_38->rtp_session;

Updating SSA information for statement D.45721_481 = engine_38->ice_in.ufrag;

Updating SSA information for statement D.45769_482 = engine_38->ice_out.ufrag;

Updating SSA information for statement D.45770_483 = engine_38->ice_out.pwd;

Updating SSA information for statement D.45724_484 = engine_38->ice_in.pwd;

Updating SSA information for statement D.45467_485 = smh_34(D)->session;

Updating SSA information for statement D.45836_486 = switch_ice_direction (D.45467_485);



Registering new PHI nodes in block #207



Registering new PHI nodes in block #208



Registering new PHI nodes in block #209

Updating SSA information for statement switch_rtp_activate_ice (D.45519_480, D.45721_481, D.45769_482, D.45770_483, D.45724_484, 1, iftmp.126_33, D.45776_489);



Registering new PHI nodes in block #210



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 211
Number of blocks to update: 210 (100%)

Affected blocks


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_engine_t * engine;
  struct sdp_attribute_t * attr;
  int i;
  int got_rtcp_mux;
  const char * val;
  static const char __func__[10] = "check_ice";

  { Scope block #0 
    char * data;
    char * fields[15];
    int argc;
    int j;
    int cid;

    { Scope block #0 
      char * p;

    }

  }

  { Scope block #0 
    char tmp[80];

  }

  { Scope block #0 
    const char * rport;
    switch_port_t remote_rtcp_port;

    { Scope block #0 
      int interval;

    }

  }

  { Scope block #0 
    size_t __s1_len; (unused)
    size_t __s2_len; (unused)

  }

}
check_ice (struct switch_media_handle_t * smh, switch_media_type_t type, struct sdp_session_t * sdp, struct sdp_media_t * m)
{
  int interval;
  switch_port_t remote_rtcp_port;
  const char * rport;
  char tmp[80];
  char * p;
  int cid;
  int j;
  int argc;
  char * fields[15];
  char * data;
  static const char __func__[10] = "check_ice";
  const char * val;
  int got_rtcp_mux;
  int i;
  struct sdp_attribute_t * attr;
  struct switch_rtp_engine_t * engine;
  switch_call_direction_t D.45836;
  switch_core_media_ice_type_t iftmp.126;
  char * iftmp.125;
  char * iftmp.124;
  int D.38904;
  char * iftmp.123;
  unsigned int D.45813;
  unsigned int interval.122;
  switch_bool_t D.45810;
  int8_t D.45809;
  int D.45808;
  char * iftmp.121;
  int D.45801;
  int D.45800;
  _Bool D.45797;
  _Bool D.45796;
  _Bool D.45795;
  char[27] * iftmp.120;
  struct switch_core_media_params_t * D.45789;
  char * iftmp.119;
  char[25] * iftmp.118;
  struct ice_t * D.45776;
  switch_call_direction_t D.45772;
  switch_core_media_ice_type_t iftmp.117;
  char * D.45770;
  char * D.45769;
  char * iftmp.116;
  uint8_t D.45760;
  uint32_t D.45757;
  _Bool D.45754;
  _Bool D.45753;
  _Bool D.45752;
  char * D.45751;
  char * iftmp.115;
  char * D.45744;
  int D.45743;
  switch_port_t D.45740;
  char * D.45739;
  char * D.45738;
  int D.45737;
  char * iftmp.114;
  char * D.45732;
  switch_port_t D.45729;
  char * D.45726;
  int D.45725;
  char * D.45724;
  int D.45722;
  char * D.45721;
  uint8_t D.45716;
  int D.45715;
  char * iftmp.113;
  char * iftmp.112;
  int D.45694;
  switch_port_t D.45693;
  char * D.45692;
  char * iftmp.111;
  const void * restrict D.45687;
  unsigned int D.45686;
  unsigned int D.45685;
  const void * restrict D.45684;
  void * restrict D.45683;
  unsigned int D.45682;
  unsigned int D.45681;
  unsigned int D.45680;
  void * restrict D.45679;
  struct icand_t * D.45678;
  _Bool D.45675;
  _Bool D.45674;
  _Bool D.45673;
  char * iftmp.110;
  char * iftmp.109;
  char * iftmp.108;
  uint8_t D.45640;
  uint8_t D.45639;
  switch_bool_t D.45636;
  char * D.45635;
  switch_port_t D.45632;
  int D.45629;
  char * iftmp.107;
  uint8_t D.45622;
  uint8_t D.45621;
  switch_bool_t D.45618;
  char * D.45617;
  switch_port_t D.45614;
  int D.45611;
  uint8_t D.45606;
  uint8_t D.45605;
  char * D.45601;
  int D.45598;
  short unsigned int D.45596;
  int D.45595;
  int D.45592;
  char * D.45590;
  int D.45587;
  char * D.45585;
  char * D.45584;
  int D.45583;
  int D.45580;
  char * D.45579;
  short unsigned int D.45578;
  int D.45577;
  char * D.45576;
  uint32_t D.45575;
  long int D.45574;
  char * D.45573;
  char * D.45572;
  int D.45571;
  char * D.45570;
  char * D.45569;
  char * iftmp.106;
  char * iftmp.105;
  switch_bool_t D.45559;
  char * D.45558;
  int D.45556;
  int D.45553;
  char * D.45552;
  char * D.45551;
  char * D.45550;
  char * D.45549;
  int D.45548;
  char * D.45547;
  int D.45546;
  char * D.45545;
  int D.45544;
  unsigned int D.45540;
  const char * D.45537;
  int D.45536;
  int D.45533;
  int D.45530;
  switch_port_t D.45528;
  struct payload_map_t * D.45527;
  int D.45524;
  struct switch_rtp_t * D.45519;
  unsigned int D.45518;
  long int D.45517;
  int D.45514;
  uint32_t D.45512;
  char[192] * D.45509;
  char * D.45506;
  char * D.45505;
  int D.45503;
  int D.45501;
  int D.45499;
  int D.45497;
  char * D.45493;
  int D.45490;
  char * D.45488;
  int D.45485;
  char * D.45483;
  const char * D.45482;
  int D.45479;
  int D.45476;
  const char * D.45475;
  uint32_t D.45469;
  struct switch_channel_t * D.45468;
  struct switch_core_session_t * D.45467;
  int D.45464;
  int D.45461;
  unsigned int D.45460;
  struct switch_rtp_engine_t[2] * D.45459;

<bb 2>:
  D.45459_35 = &smh_34(D)->engines;
  D.45460_37 = type_36(D) * 11416;
  engine_38 = D.45459_35 + D.45460_37;
  # DEBUG engine => engine_38
  i_39 = 0;
  # DEBUG i => i_39
  got_rtcp_mux_40 = 0;
  # DEBUG got_rtcp_mux => got_rtcp_mux_40
  D.45461_41 = engine_38->ice_in.chosen[0];
  if (D.45461_41 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 3>:
  D.45464_42 = engine_38->ice_in.chosen[1];
  if (D.45464_42 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.45467_43 = smh_34(D)->session;
  D.45468_44 = D.45467_43->channel;
  D.45469_45 = switch_channel_test_flag (D.45468_44, 103);
  if (D.45469_45 == 0)
    goto <bb 210>;
  else
    goto <bb 5>;

<bb 5>:
  engine_38->ice_in.chosen[0] = 0;
  engine_38->ice_in.chosen[1] = 0;
  engine_38->ice_in.cand_idx = 0;
  if (m_46(D) != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  attr_47 = m_46(D)->m_attributes;
  # DEBUG attr => attr_47
  goto <bb 68>;

<bb 7>:
  attr_49 = sdp_48(D)->sdp_attributes;
  # DEBUG attr => attr_49
  goto <bb 68>;

<bb 8>:
  argc_50 = 0;
  # DEBUG argc => argc_50
  j_51 = 0;
  # DEBUG j => j_51
  cid_52 = 0;
  # DEBUG cid => cid_52
  D.45475_53 = attr_1->a_name;
  D.45476_54 = _zstr (D.45475_53);
  if (D.45476_54 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  // predicted unlikely by continue predictor.
  goto <bb 67>;

<bb 10>:
  D.45475_55 = attr_1->a_name;
  D.45479_56 = strcasecmp (D.45475_55, "ice-ufrag");
  if (D.45479_56 == 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.45467_57 = smh_34(D)->session;
  D.45482_58 = attr_1->a_value;
  D.45483_59 = switch_core_perform_session_strdup (D.45467_57, D.45482_58, "src/switch_core_media.c", &__func__, 2503);
  engine_38->ice_in.ufrag = D.45483_59;
  goto <bb 67>;

<bb 12>:
  D.45475_60 = attr_1->a_name;
  D.45485_61 = strcasecmp (D.45475_60, "ice-pwd");
  if (D.45485_61 == 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.45467_62 = smh_34(D)->session;
  D.45482_63 = attr_1->a_value;
  D.45488_64 = switch_core_perform_session_strdup (D.45467_62, D.45482_63, "src/switch_core_media.c", &__func__, 2505);
  engine_38->ice_in.pwd = D.45488_64;
  goto <bb 67>;

<bb 14>:
  D.45475_65 = attr_1->a_name;
  D.45490_66 = strcasecmp (D.45475_65, "ice-options");
  if (D.45490_66 == 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.45467_67 = smh_34(D)->session;
  D.45482_68 = attr_1->a_value;
  D.45493_69 = switch_core_perform_session_strdup (D.45467_67, D.45482_68, "src/switch_core_media.c", &__func__, 2507);
  engine_38->ice_in.options = D.45493_69;
  goto <bb 67>;

<bb 16>:
  D.45497_70 = switch_rtp_has_dtls ();
  if (D.45497_70 != 0)
    goto <bb 17>;
  else
    goto <bb 23>;

<bb 17>:
  D.45467_71 = smh_34(D)->session;
  D.45499_72 = dtls_ok (D.45467_71);
  if (D.45499_72 != 0)
    goto <bb 18>;
  else
    goto <bb 23>;

<bb 18>:
  D.45475_73 = attr_1->a_name;
  D.45501_74 = strcasecmp (D.45475_73, "fingerprint");
  if (D.45501_74 == 0)
    goto <bb 19>;
  else
    goto <bb 23>;

<bb 19>:
  D.45482_75 = attr_1->a_value;
  D.45503_76 = _zstr (D.45482_75);
  if (D.45503_76 == 0)
    goto <bb 20>;
  else
    goto <bb 23>;

<bb 20>:
  D.45467_77 = smh_34(D)->session;
  D.45482_78 = attr_1->a_value;
  D.45505_79 = switch_core_perform_session_strdup (D.45467_77, D.45482_78, "src/switch_core_media.c", &__func__, 2512);
  engine_38->remote_dtls_fingerprint.type = D.45505_79;
  D.45506_80 = engine_38->remote_dtls_fingerprint.type;
  p_81 = __builtin_strchr (D.45506_80, 32);
  # DEBUG p => p_81
  if (p_81 != 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  *p_81 = 0;
  p_82 = p_81 + 1;
  # DEBUG p => p_82
  D.45509_83 = &engine_38->local_dtls_fingerprint.str;
  switch_copy_string (D.45509_83, p_82, 192);

<bb 22>:
  generate_local_fingerprint (smh_34(D), type_36(D));
  D.45467_84 = smh_34(D)->session;
  D.45468_85 = D.45467_84->channel;
  switch_channel_set_flag_value (D.45468_85, 109, 1);
  goto <bb 67>;

<bb 23>:
  D.45512_86 = engine_38->remote_ssrc;
  if (D.45512_86 == 0)
    goto <bb 24>;
  else
    goto <bb 29>;

<bb 24>:
  D.45475_87 = attr_1->a_name;
  D.45514_88 = strcasecmp (D.45475_87, "ssrc");
  if (D.45514_88 == 0)
    goto <bb 25>;
  else
    goto <bb 29>;

<bb 25>:
  D.45482_89 = attr_1->a_value;
  if (D.45482_89 != 0B)
    goto <bb 26>;
  else
    goto <bb 29>;

<bb 26>:
  D.45482_90 = attr_1->a_value;
  D.45517_91 = atol (D.45482_90);
  D.45518_92 = (unsigned int) D.45517_91;
  engine_38->remote_ssrc = D.45518_92;
  D.45519_93 = engine_38->rtp_session;
  if (D.45519_93 != 0B)
    goto <bb 27>;
  else
    goto <bb 67>;

<bb 27>:
  D.45512_94 = engine_38->remote_ssrc;
  if (D.45512_94 != 0)
    goto <bb 28>;
  else
    goto <bb 67>;

<bb 28>:
  D.45519_95 = engine_38->rtp_session;
  D.45512_96 = engine_38->remote_ssrc;
  switch_rtp_set_remote_ssrc (D.45519_95, D.45512_96);
  goto <bb 67>;

<bb 29>:
  D.45475_97 = attr_1->a_name;
  D.45524_98 = strcasecmp (D.45475_97, "rtcp-mux");
  if (D.45524_98 == 0)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  engine_38->rtcp_mux = 1;
  D.45527_99 = engine_38->cur_payload_map;
  D.45528_100 = D.45527_99->remote_sdp_port;
  engine_38->remote_rtcp_port = D.45528_100;
  got_rtcp_mux_101 = got_rtcp_mux_8 + 1;
  # DEBUG got_rtcp_mux => got_rtcp_mux_101
  goto <bb 67>;

<bb 31>:
  D.45475_102 = attr_1->a_name;
  D.45530_103 = strcasecmp (D.45475_102, "candidate");
  if (D.45530_103 == 0)
    goto <bb 32>;
  else
    goto <bb 67>;

<bb 32>:
  D.45467_104 = smh_34(D)->session;
  D.45468_105 = D.45467_104->channel;
  switch_channel_set_flag_value (D.45468_105, 108, 1);
  D.45533_106 = engine_38->cand_acl_count;
  if (D.45533_106 == 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.45533_107 = engine_38->cand_acl_count;
  engine_38->cand_acl[D.45533_107] = "wan.auto";
  D.45536_108 = D.45533_107 + 1;
  engine_38->cand_acl_count = D.45536_108;
  D.45467_109 = smh_34(D)->session;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2548, D.45467_109, 4, "NO candidate ACL defined, Defaulting to wan.auto\n");

<bb 34>:
  D.45482_110 = attr_1->a_value;
  D.45537_111 = switch_stristr (" udp ", D.45482_110);
  if (D.45537_111 == 0B)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  // predicted unlikely by continue predictor.
  goto <bb 67>;

<bb 36>:
  D.45467_112 = smh_34(D)->session;
  D.45482_113 = attr_1->a_value;
  data_114 = switch_core_perform_session_strdup (D.45467_112, D.45482_113, "src/switch_core_media.c", &__func__, 2556);
  # DEBUG data => data_114
  D.45540_115 = switch_separate_string (data_114, 32, &fields, 15);
  argc_116 = (int) D.45540_115;
  # DEBUG argc => argc_116
  if (argc_116 <= 4)
    goto <bb 38>;
  else
    goto <bb 37>;

<bb 37>:
  D.45544_117 = engine_38->ice_in.cand_idx;
  if (D.45544_117 > 48)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.45467_215 = smh_34(D)->session;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2561, D.45467_215, 4, "Invalid data\n");
  // predicted unlikely by continue predictor.
  goto <bb 67>;

<bb 39>:
  D.45545_118 = fields[1];
  D.45546_119 = atoi (D.45545_118);
  cid_120 = D.45546_119 + -1;
  # DEBUG cid => cid_120
  i_121 = 0;
  # DEBUG i => i_121
  goto <bb 41>;

<bb 40>:
  D.45467_122 = smh_34(D)->session;
  D.45547_123 = fields[i_2];
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2569, D.45467_122, 101, "CAND %d [%s]\n", i_2, D.45547_123);
  i_124 = i_2 + 1;
  # DEBUG i => i_124

<bb 41>:
  # i_2 = PHI <i_121(39), i_124(40)>
  # DEBUG i => i_2
  if (i_2 < argc_116)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 42>:
  D.45467_125 = smh_34(D)->session;
  D.45548_126 = cid_120 + 1;
  D.45549_127 = fields[2];
  D.45550_128 = fields[7];
  D.45551_129 = fields[4];
  D.45552_130 = fields[5];
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2572, D.45467_125, 7, "Checking Candidate cid: %d proto: %s type: %s addr: %s:%s\n", D.45548_126, D.45549_127, D.45550_128, D.45551_129, D.45552_130);
  D.45544_131 = engine_38->ice_in.cand_idx;
  D.45553_132 = D.45544_131 + 1;
  engine_38->ice_in.cand_idx = D.45553_132;
  i_133 = 0;
  # DEBUG i => i_133
  D.45533_134 = engine_38->cand_acl_count;
  if (D.45533_134 > i_133)
    goto <bb 43>;
  else
    goto <bb 67>;

<bb 43>:
  D.45556_135 = engine_38->ice_in.chosen[cid_120];
  if (D.45556_135 == 0)
    goto <bb 44>;
  else
    goto <bb 49>;

<bb 44>:
  D.45551_136 = fields[4];
  D.45558_137 = engine_38->cand_acl[i_133];
  D.45559_138 = switch_check_network_list_ip_token (D.45551_136, D.45558_137, 0B);
  if (D.45559_138 != 0)
    goto <bb 45>;
  else
    goto <bb 49>;

<bb 45>:
  D.45544_139 = engine_38->ice_in.cand_idx;
  engine_38->ice_in.chosen[cid_120] = D.45544_139;
  D.45467_140 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  iftmp.105_141 = "video";
  goto <bb 48>;

<bb 47>:
  iftmp.105_142 = "audio";

<bb 48>:
  # iftmp.105_13 = PHI <iftmp.105_141(46), iftmp.105_142(47)>
  D.45548_143 = cid_120 + 1;
  D.45549_144 = fields[2];
  D.45550_145 = fields[7];
  D.45551_146 = fields[4];
  D.45552_147 = fields[5];
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2581, D.45467_140, 5, "Choose %s Candidate cid: %d proto: %s type: %s addr: %s:%s\n", iftmp.105_13, D.45548_143, D.45549_144, D.45550_145, D.45551_146, D.45552_147);
  goto <bb 53>;

<bb 49>:
  D.45467_148 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 50>;
  else
    goto <bb 51>;

<bb 50>:
  iftmp.106_149 = "video";
  goto <bb 52>;

<bb 51>:
  iftmp.106_150 = "audio";

<bb 52>:
  # iftmp.106_14 = PHI <iftmp.106_149(50), iftmp.106_150(51)>
  D.45548_151 = cid_120 + 1;
  D.45549_152 = fields[2];
  D.45550_153 = fields[7];
  D.45551_154 = fields[4];
  D.45552_155 = fields[5];
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2586, D.45467_148, 5, "Save %s Candidate cid: %d proto: %s type: %s addr: %s:%s\n", iftmp.106_14, D.45548_151, D.45549_152, D.45550_153, D.45551_154, D.45552_155);

<bb 53>:
  D.45544_156 = engine_38->ice_in.cand_idx;
  D.45467_157 = smh_34(D)->session;
  D.45569_158 = fields[0];
  D.45570_159 = switch_core_perform_session_strdup (D.45467_157, D.45569_158, "src/switch_core_media.c", &__func__, 2592);
  engine_38->ice_in.cands[D.45544_156][cid_120].foundation = D.45570_159;
  D.45544_160 = engine_38->ice_in.cand_idx;
  D.45545_161 = fields[1];
  D.45571_162 = atoi (D.45545_161);
  engine_38->ice_in.cands[D.45544_160][cid_120].component_id = D.45571_162;
  D.45544_163 = engine_38->ice_in.cand_idx;
  D.45467_164 = smh_34(D)->session;
  D.45549_165 = fields[2];
  D.45572_166 = switch_core_perform_session_strdup (D.45467_164, D.45549_165, "src/switch_core_media.c", &__func__, 2594);
  engine_38->ice_in.cands[D.45544_163][cid_120].transport = D.45572_166;
  D.45544_167 = engine_38->ice_in.cand_idx;
  D.45573_168 = fields[3];
  D.45574_169 = atol (D.45573_168);
  D.45575_170 = (uint32_t) D.45574_169;
  engine_38->ice_in.cands[D.45544_167][cid_120].priority = D.45575_170;
  D.45544_171 = engine_38->ice_in.cand_idx;
  D.45467_172 = smh_34(D)->session;
  D.45551_173 = fields[4];
  D.45576_174 = switch_core_perform_session_strdup (D.45467_172, D.45551_173, "src/switch_core_media.c", &__func__, 2596);
  engine_38->ice_in.cands[D.45544_171][cid_120].con_addr = D.45576_174;
  D.45544_175 = engine_38->ice_in.cand_idx;
  D.45552_176 = fields[5];
  D.45577_177 = atoi (D.45552_176);
  D.45578_178 = (short unsigned int) D.45577_177;
  engine_38->ice_in.cands[D.45544_175][cid_120].con_port = D.45578_178;
  j_179 = 6;
  # DEBUG j => j_179
  goto <bb 63>;

<bb 54>:
  D.45579_182 = fields[j_10];
  D.45580_183 = strcasecmp (D.45579_182, "typ");
  if (D.45580_183 == 0)
    goto <bb 55>;
  else
    goto <bb 56>;

<bb 55>:
  D.45544_184 = engine_38->ice_in.cand_idx;
  D.45467_185 = smh_34(D)->session;
  D.45583_186 = j_10 + 1;
  D.45584_187 = fields[D.45583_186];
  D.45585_188 = switch_core_perform_session_strdup (D.45467_185, D.45584_187, "src/switch_core_media.c", &__func__, 2604);
  engine_38->ice_in.cands[D.45544_184][cid_120].cand_type = D.45585_188;
  goto <bb 62>;

<bb 56>:
  D.45579_189 = fields[j_10];
  D.45587_190 = strcasecmp (D.45579_189, "raddr");
  if (D.45587_190 == 0)
    goto <bb 57>;
  else
    goto <bb 58>;

<bb 57>:
  D.45544_191 = engine_38->ice_in.cand_idx;
  D.45467_192 = smh_34(D)->session;
  D.45583_193 = j_10 + 1;
  D.45584_194 = fields[D.45583_193];
  D.45590_195 = switch_core_perform_session_strdup (D.45467_192, D.45584_194, "src/switch_core_media.c", &__func__, 2606);
  engine_38->ice_in.cands[D.45544_191][cid_120].raddr = D.45590_195;
  goto <bb 62>;

<bb 58>:
  D.45579_196 = fields[j_10];
  D.45592_197 = strcasecmp (D.45579_196, "rport");
  if (D.45592_197 == 0)
    goto <bb 59>;
  else
    goto <bb 60>;

<bb 59>:
  D.45544_198 = engine_38->ice_in.cand_idx;
  D.45583_199 = j_10 + 1;
  D.45584_200 = fields[D.45583_199];
  D.45595_201 = atoi (D.45584_200);
  D.45596_202 = (short unsigned int) D.45595_201;
  engine_38->ice_in.cands[D.45544_198][cid_120].rport = D.45596_202;
  goto <bb 62>;

<bb 60>:
  D.45579_203 = fields[j_10];
  D.45598_204 = strcasecmp (D.45579_203, "generation");
  if (D.45598_204 == 0)
    goto <bb 61>;
  else
    goto <bb 62>;

<bb 61>:
  D.45544_205 = engine_38->ice_in.cand_idx;
  D.45467_206 = smh_34(D)->session;
  D.45583_207 = j_10 + 1;
  D.45584_208 = fields[D.45583_207];
  D.45601_209 = switch_core_perform_session_strdup (D.45467_206, D.45584_208, "src/switch_core_media.c", &__func__, 2610);
  engine_38->ice_in.cands[D.45544_205][cid_120].generation = D.45601_209;

<bb 62>:
  j_210 = j_10 + 2;
  # DEBUG j => j_210

<bb 63>:
  # j_10 = PHI <j_179(53), j_210(62)>
  # DEBUG j => j_10
  if (j_10 < argc_116)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  D.45583_180 = j_10 + 1;
  D.45584_181 = fields[D.45583_180];
  if (D.45584_181 != 0B)
    goto <bb 54>;
  else
    goto <bb 65>;

<bb 65>:
  D.45556_211 = engine_38->ice_in.chosen[cid_120];
  if (D.45556_211 != 0)
    goto <bb 66>;
  else
    goto <bb 67>;

<bb 66>:
  D.45556_212 = engine_38->ice_in.chosen[cid_120];
  D.45605_213 = engine_38->ice_in.cands[D.45556_212][cid_120].ready;
  D.45606_214 = D.45605_213 + 1;
  engine_38->ice_in.cands[D.45556_212][cid_120].ready = D.45606_214;

<bb 67>:
  # got_rtcp_mux_7 = PHI <got_rtcp_mux_8(9), got_rtcp_mux_8(11), got_rtcp_mux_8(13), got_rtcp_mux_8(15), got_rtcp_mux_8(22), got_rtcp_mux_8(27), got_rtcp_mux_101(30), got_rtcp_mux_8(31), got_rtcp_mux_8(35), got_rtcp_mux_8(38), got_rtcp_mux_8(66), got_rtcp_mux_8(42), got_rtcp_mux_8(26), got_rtcp_mux_8(28), got_rtcp_mux_8(65)>
  # DEBUG got_rtcp_mux => got_rtcp_mux_7
  attr_216 = attr_1->a_next;
  # DEBUG attr => attr_216

<bb 68>:
  # attr_1 = PHI <attr_49(7), attr_216(67), attr_47(6)>
  # got_rtcp_mux_8 = PHI <got_rtcp_mux_40(7), got_rtcp_mux_7(67), got_rtcp_mux_40(6)>
  # DEBUG got_rtcp_mux => got_rtcp_mux_8
  # DEBUG attr => attr_1
  if (attr_1 != 0B)
    goto <bb 8>;
  else
    goto <bb 69>;

<bb 69>:
  D.45461_217 = engine_38->ice_in.chosen[0];
  if (D.45461_217 == 0)
    goto <bb 71>;
  else
    goto <bb 70>;

<bb 70>:
  D.45464_218 = engine_38->ice_in.chosen[1];
  if (D.45464_218 == 0)
    goto <bb 71>;
  else
    goto <bb 92>;

<bb 71>:
  i_219 = 0;
  # DEBUG i => i_219
  goto <bb 89>;

<bb 72>:
  D.45461_223 = engine_38->ice_in.chosen[0];
  if (D.45461_223 == 0)
    goto <bb 73>;
  else
    goto <bb 80>;

<bb 73>:
  D.45611_224 = engine_38->ice_in.cands[i_3][0].component_id;
  if (D.45611_224 == 1)
    goto <bb 74>;
  else
    goto <bb 80>;

<bb 74>:
  D.45614_225 = engine_38->ice_in.cands[i_3][0].rport;
  if (D.45614_225 == 0)
    goto <bb 75>;
  else
    goto <bb 80>;

<bb 75>:
  D.45617_226 = engine_38->ice_in.cands[i_3][0].con_addr;
  D.45618_227 = switch_check_network_list_ip_token (D.45617_226, "localnet.auto", 0B);
  if (D.45618_227 != 0)
    goto <bb 76>;
  else
    goto <bb 80>;

<bb 76>:
  engine_38->ice_in.chosen[0] = i_3;
  D.45461_228 = engine_38->ice_in.chosen[0];
  D.45621_229 = engine_38->ice_in.cands[D.45461_228][0].ready;
  D.45622_230 = D.45621_229 + 1;
  engine_38->ice_in.cands[D.45461_228][0].ready = D.45622_230;
  D.45467_231 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 77>;
  else
    goto <bb 78>;

<bb 77>:
  iftmp.107_232 = "video";
  goto <bb 79>;

<bb 78>:
  iftmp.107_233 = "audio";

<bb 79>:
  # iftmp.107_15 = PHI <iftmp.107_232(77), iftmp.107_233(78)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2636, D.45467_231, 5, "No %s RTP candidate found; defaulting to the first local one.\n", iftmp.107_15);

<bb 80>:
  D.45464_234 = engine_38->ice_in.chosen[1];
  if (D.45464_234 == 0)
    goto <bb 81>;
  else
    goto <bb 88>;

<bb 81>:
  D.45629_235 = engine_38->ice_in.cands[i_3][1].component_id;
  if (D.45629_235 == 2)
    goto <bb 82>;
  else
    goto <bb 88>;

<bb 82>:
  D.45632_236 = engine_38->ice_in.cands[i_3][1].rport;
  if (D.45632_236 == 0)
    goto <bb 83>;
  else
    goto <bb 88>;

<bb 83>:
  D.45635_237 = engine_38->ice_in.cands[i_3][1].con_addr;
  D.45636_238 = switch_check_network_list_ip_token (D.45635_237, "localnet.auto", 0B);
  if (D.45636_238 != 0)
    goto <bb 84>;
  else
    goto <bb 88>;

<bb 84>:
  engine_38->ice_in.chosen[1] = i_3;
  D.45464_239 = engine_38->ice_in.chosen[1];
  D.45639_240 = engine_38->ice_in.cands[D.45464_239][1].ready;
  D.45640_241 = D.45639_240 + 1;
  engine_38->ice_in.cands[D.45464_239][1].ready = D.45640_241;
  D.45467_242 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 85>;
  else
    goto <bb 86>;

<bb 85>:
  iftmp.108_243 = "video";
  goto <bb 87>;

<bb 86>:
  iftmp.108_244 = "audio";

<bb 87>:
  # iftmp.108_16 = PHI <iftmp.108_243(85), iftmp.108_244(86)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2643, D.45467_242, 5, "No %s RTCP candidate found; defaulting to the first local one.\n", iftmp.108_16);

<bb 88>:
  i_245 = i_3 + 1;
  # DEBUG i => i_245

<bb 89>:
  # i_3 = PHI <i_219(71), i_245(88)>
  # DEBUG i => i_3
  D.45544_220 = engine_38->ice_in.cand_idx;
  if (D.45544_220 >= i_3)
    goto <bb 90>;
  else
    goto <bb 92>;

<bb 90>:
  D.45461_221 = engine_38->ice_in.chosen[0];
  if (D.45461_221 == 0)
    goto <bb 72>;
  else
    goto <bb 91>;

<bb 91>:
  D.45464_222 = engine_38->ice_in.chosen[1];
  if (D.45464_222 == 0)
    goto <bb 72>;
  else
    goto <bb 92>;

<bb 92>:
  D.45461_246 = engine_38->ice_in.chosen[0];
  if (D.45461_246 == 0)
    goto <bb 94>;
  else
    goto <bb 93>;

<bb 93>:
  D.45464_247 = engine_38->ice_in.chosen[1];
  if (D.45464_247 == 0)
    goto <bb 94>;
  else
    goto <bb 113>;

<bb 94>:
  i_248 = 0;
  # DEBUG i => i_248
  goto <bb 110>;

<bb 95>:
  D.45461_252 = engine_38->ice_in.chosen[0];
  if (D.45461_252 == 0)
    goto <bb 96>;
  else
    goto <bb 102>;

<bb 96>:
  D.45611_253 = engine_38->ice_in.cands[i_4][0].component_id;
  if (D.45611_253 == 1)
    goto <bb 97>;
  else
    goto <bb 102>;

<bb 97>:
  D.45614_254 = engine_38->ice_in.cands[i_4][0].rport;
  if (D.45614_254 != 0)
    goto <bb 98>;
  else
    goto <bb 102>;

<bb 98>:
  engine_38->ice_in.chosen[0] = i_4;
  D.45461_255 = engine_38->ice_in.chosen[0];
  D.45621_256 = engine_38->ice_in.cands[D.45461_255][0].ready;
  D.45622_257 = D.45621_256 + 1;
  engine_38->ice_in.cands[D.45461_255][0].ready = D.45622_257;
  D.45467_258 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 99>;
  else
    goto <bb 100>;

<bb 99>:
  iftmp.109_259 = "video";
  goto <bb 101>;

<bb 100>:
  iftmp.109_260 = "audio";

<bb 101>:
  # iftmp.109_17 = PHI <iftmp.109_259(99), iftmp.109_260(100)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2655, D.45467_258, 5, "No %s RTP candidate found; defaulting to the first srflx one.\n", iftmp.109_17);

<bb 102>:
  D.45464_261 = engine_38->ice_in.chosen[1];
  if (D.45464_261 == 0)
    goto <bb 103>;
  else
    goto <bb 109>;

<bb 103>:
  D.45629_262 = engine_38->ice_in.cands[i_4][1].component_id;
  if (D.45629_262 == 2)
    goto <bb 104>;
  else
    goto <bb 109>;

<bb 104>:
  D.45632_263 = engine_38->ice_in.cands[i_4][1].rport;
  if (D.45632_263 != 0)
    goto <bb 105>;
  else
    goto <bb 109>;

<bb 105>:
  engine_38->ice_in.chosen[1] = i_4;
  D.45464_264 = engine_38->ice_in.chosen[1];
  D.45639_265 = engine_38->ice_in.cands[D.45464_264][1].ready;
  D.45640_266 = D.45639_265 + 1;
  engine_38->ice_in.cands[D.45464_264][1].ready = D.45640_266;
  D.45467_267 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 106>;
  else
    goto <bb 107>;

<bb 106>:
  iftmp.110_268 = "video";
  goto <bb 108>;

<bb 107>:
  iftmp.110_269 = "audio";

<bb 108>:
  # iftmp.110_18 = PHI <iftmp.110_268(106), iftmp.110_269(107)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2661, D.45467_267, 5, "No %s RTCP candidate found; defaulting to the first srflx one.\n", iftmp.110_18);

<bb 109>:
  i_270 = i_4 + 1;
  # DEBUG i => i_270

<bb 110>:
  # i_4 = PHI <i_248(94), i_270(109)>
  # DEBUG i => i_4
  D.45544_249 = engine_38->ice_in.cand_idx;
  if (D.45544_249 >= i_4)
    goto <bb 111>;
  else
    goto <bb 113>;

<bb 111>:
  D.45461_250 = engine_38->ice_in.chosen[0];
  if (D.45461_250 == 0)
    goto <bb 95>;
  else
    goto <bb 112>;

<bb 112>:
  D.45464_251 = engine_38->ice_in.chosen[1];
  if (D.45464_251 == 0)
    goto <bb 95>;
  else
    goto <bb 113>;

<bb 113>:
  D.45461_271 = engine_38->ice_in.chosen[0];
  if (D.45461_271 != 0)
    goto <bb 114>;
  else
    goto <bb 119>;

<bb 114>:
  D.45464_272 = engine_38->ice_in.chosen[1];
  D.45673_273 = D.45464_272 == 0;
  D.45674_274 = got_rtcp_mux_8 != 0;
  D.45675_275 = D.45673_273 && D.45674_274;
  if (D.45675_275 != 0)
    goto <bb 115>;
  else
    goto <bb 119>;

<bb 115>:
  D.45461_276 = engine_38->ice_in.chosen[0];
  engine_38->ice_in.chosen[1] = D.45461_276;
  D.45678_277 = &engine_38->ice_in.cands[0][0];
  D.45679_278 = (void * restrict) D.45678_277;
  D.45464_279 = engine_38->ice_in.chosen[1];
  D.45680_280 = (unsigned int) D.45464_279;
  D.45681_281 = D.45680_280 * 88;
  D.45682_282 = D.45681_281 + 44;
  D.45683_283 = D.45679_278 + D.45682_282;
  D.45678_284 = &engine_38->ice_in.cands[0][0];
  D.45684_285 = (const void * restrict) D.45678_284;
  D.45461_286 = engine_38->ice_in.chosen[0];
  D.45685_287 = (unsigned int) D.45461_286;
  D.45686_288 = D.45685_287 * 88;
  D.45687_289 = D.45684_285 + D.45686_288;
  memcpy (D.45683_283, D.45687_289, 44);
  D.45464_290 = engine_38->ice_in.chosen[1];
  D.45639_291 = engine_38->ice_in.cands[D.45464_290][1].ready;
  D.45640_292 = D.45639_291 + 1;
  engine_38->ice_in.cands[D.45464_290][1].ready = D.45640_292;
  D.45467_293 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 116>;
  else
    goto <bb 117>;

<bb 116>:
  iftmp.111_294 = "video";
  goto <bb 118>;

<bb 117>:
  iftmp.111_295 = "audio";

<bb 118>:
  # iftmp.111_19 = PHI <iftmp.111_294(116), iftmp.111_295(117)>
  D.45464_296 = engine_38->ice_in.chosen[1];
  D.45692_297 = engine_38->ice_in.cands[D.45464_296][1].con_addr;
  D.45464_298 = engine_38->ice_in.chosen[1];
  D.45693_299 = engine_38->ice_in.cands[D.45464_298][1].con_port;
  D.45694_300 = (int) D.45693_299;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2675, D.45467_293, 5, "No %s RTCP candidate found; defaulting to the same as RTP [%s:%d]\n", iftmp.111_19, D.45692_297, D.45694_300);

<bb 119>:
  D.45461_301 = engine_38->ice_in.chosen[0];
  if (D.45461_301 == 0)
    goto <bb 121>;
  else
    goto <bb 120>;

<bb 120>:
  D.45464_302 = engine_38->ice_in.chosen[1];
  if (D.45464_302 == 0)
    goto <bb 121>;
  else
    goto <bb 138>;

<bb 121>:
  i_303 = 0;
  # DEBUG i => i_303
  goto <bb 135>;

<bb 122>:
  D.45461_307 = engine_38->ice_in.chosen[0];
  if (D.45461_307 == 0)
    goto <bb 123>;
  else
    goto <bb 128>;

<bb 123>:
  D.45611_308 = engine_38->ice_in.cands[i_5][0].component_id;
  if (D.45611_308 == 1)
    goto <bb 124>;
  else
    goto <bb 128>;

<bb 124>:
  engine_38->ice_in.chosen[0] = i_5;
  D.45461_309 = engine_38->ice_in.chosen[0];
  D.45621_310 = engine_38->ice_in.cands[D.45461_309][0].ready;
  D.45622_311 = D.45621_310 + 1;
  engine_38->ice_in.cands[D.45461_309][0].ready = D.45622_311;
  D.45467_312 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 125>;
  else
    goto <bb 126>;

<bb 125>:
  iftmp.112_313 = "video";
  goto <bb 127>;

<bb 126>:
  iftmp.112_314 = "audio";

<bb 127>:
  # iftmp.112_20 = PHI <iftmp.112_313(125), iftmp.112_314(126)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2686, D.45467_312, 5, "No %s RTP candidate found; defaulting to the first one.\n", iftmp.112_20);

<bb 128>:
  D.45464_315 = engine_38->ice_in.chosen[1];
  if (D.45464_315 == 0)
    goto <bb 129>;
  else
    goto <bb 134>;

<bb 129>:
  D.45629_316 = engine_38->ice_in.cands[i_5][1].component_id;
  if (D.45629_316 == 2)
    goto <bb 130>;
  else
    goto <bb 134>;

<bb 130>:
  engine_38->ice_in.chosen[1] = i_5;
  D.45464_317 = engine_38->ice_in.chosen[1];
  D.45639_318 = engine_38->ice_in.cands[D.45464_317][1].ready;
  D.45640_319 = D.45639_318 + 1;
  engine_38->ice_in.cands[D.45464_317][1].ready = D.45640_319;
  D.45467_320 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 131>;
  else
    goto <bb 132>;

<bb 131>:
  iftmp.113_321 = "video";
  goto <bb 133>;

<bb 132>:
  iftmp.113_322 = "audio";

<bb 133>:
  # iftmp.113_21 = PHI <iftmp.113_321(131), iftmp.113_322(132)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2692, D.45467_320, 5, "No %s RTCP candidate found; defaulting to the first one.\n", iftmp.113_21);

<bb 134>:
  i_323 = i_5 + 1;
  # DEBUG i => i_323

<bb 135>:
  # i_5 = PHI <i_303(121), i_323(134)>
  # DEBUG i => i_5
  D.45544_304 = engine_38->ice_in.cand_idx;
  if (D.45544_304 >= i_5)
    goto <bb 136>;
  else
    goto <bb 138>;

<bb 136>:
  D.45461_305 = engine_38->ice_in.chosen[0];
  if (D.45461_305 == 0)
    goto <bb 122>;
  else
    goto <bb 137>;

<bb 137>:
  D.45464_306 = engine_38->ice_in.chosen[1];
  if (D.45464_306 == 0)
    goto <bb 122>;
  else
    goto <bb 138>;

<bb 138>:
  i_324 = 0;
  # DEBUG i => i_324
  goto <bb 144>;

<bb 139>:
  D.45715_325 = engine_38->ice_in.chosen[i_6];
  D.45716_326 = engine_38->ice_in.cands[D.45715_325][i_6].ready;
  if (D.45716_326 != 0)
    goto <bb 140>;
  else
    goto <bb 143>;

<bb 140>:
  D.45721_327 = engine_38->ice_in.ufrag;
  D.45722_328 = _zstr (D.45721_327);
  if (D.45722_328 != 0)
    goto <bb 142>;
  else
    goto <bb 141>;

<bb 141>:
  D.45724_329 = engine_38->ice_in.pwd;
  D.45725_330 = _zstr (D.45724_329);
  if (D.45725_330 != 0)
    goto <bb 142>;
  else
    goto <bb 143>;

<bb 142>:
  D.45715_331 = engine_38->ice_in.chosen[i_6];
  engine_38->ice_in.cands[D.45715_331][i_6].ready = 0;

<bb 143>:
  i_332 = i_6 + 1;
  # DEBUG i => i_332

<bb 144>:
  # i_6 = PHI <i_324(138), i_332(143)>
  # DEBUG i => i_6
  if (i_6 <= 1)
    goto <bb 139>;
  else
    goto <bb 145>;

<bb 145>:
  D.45461_333 = engine_38->ice_in.chosen[0];
  D.45726_334 = engine_38->ice_in.cands[D.45461_333][0].con_addr;
  if (D.45726_334 != 0B)
    goto <bb 146>;
  else
    goto <bb 153>;

<bb 146>:
  D.45461_335 = engine_38->ice_in.chosen[0];
  D.45729_336 = engine_38->ice_in.cands[D.45461_335][0].con_port;
  if (D.45729_336 != 0)
    goto <bb 147>;
  else
    goto <bb 153>;

<bb 147>:
  tmp = "";
  D.45527_337 = engine_38->cur_payload_map;
  D.45467_338 = smh_34(D)->session;
  D.45461_339 = engine_38->ice_in.chosen[0];
  D.45726_340 = engine_38->ice_in.cands[D.45461_339][0].con_addr;
  D.45732_341 = switch_core_perform_session_strdup (D.45467_338, D.45726_340, "src/switch_core_media.c", &__func__, 2709);
  D.45527_337->remote_sdp_ip = D.45732_341;
  D.45467_342 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 148>;
  else
    goto <bb 149>;

<bb 148>:
  iftmp.114_343 = "video";
  goto <bb 150>;

<bb 149>:
  iftmp.114_344 = "audio";

<bb 150>:
  # iftmp.114_22 = PHI <iftmp.114_343(148), iftmp.114_344(149)>
  D.45461_345 = engine_38->ice_in.chosen[0];
  D.45726_346 = engine_38->ice_in.cands[D.45461_345][0].con_addr;
  D.45461_347 = engine_38->ice_in.chosen[0];
  D.45729_348 = engine_38->ice_in.cands[D.45461_347][0].con_port;
  D.45737_349 = (int) D.45729_348;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2710, D.45467_342, 5, "setting remote %s ice addr to %s:%d based on candidate\n", iftmp.114_22, D.45726_346, D.45737_349);
  D.45461_350 = engine_38->ice_in.chosen[0];
  D.45621_351 = engine_38->ice_in.cands[D.45461_350][0].ready;
  D.45622_352 = D.45621_351 + 1;
  engine_38->ice_in.cands[D.45461_350][0].ready = D.45622_352;
  D.45461_353 = engine_38->ice_in.chosen[0];
  D.45729_354 = engine_38->ice_in.cands[D.45461_353][0].con_port;
  engine_38->remote_rtp_ice_port = D.45729_354;
  D.45467_355 = smh_34(D)->session;
  D.45461_356 = engine_38->ice_in.chosen[0];
  D.45726_357 = engine_38->ice_in.cands[D.45461_356][0].con_addr;
  D.45738_358 = switch_core_perform_session_strdup (D.45467_355, D.45726_357, "src/switch_core_media.c", &__func__, 2716);
  engine_38->remote_rtp_ice_addr = D.45738_358;
  D.45527_359 = engine_38->cur_payload_map;
  D.45467_360 = smh_34(D)->session;
  D.45461_361 = engine_38->ice_in.chosen[0];
  D.45726_362 = engine_38->ice_in.cands[D.45461_361][0].con_addr;
  D.45739_363 = switch_core_perform_session_strdup (D.45467_360, D.45726_362, "src/switch_core_media.c", &__func__, 2718);
  D.45527_359->remote_sdp_ip = D.45739_363;
  D.45527_364 = engine_38->cur_payload_map;
  D.45461_365 = engine_38->ice_in.chosen[0];
  D.45729_366 = engine_38->ice_in.cands[D.45461_365][0].con_port;
  D.45527_364->remote_sdp_port = D.45729_366;
  D.45740_367 = engine_38->remote_rtcp_port;
  if (D.45740_367 != 0)
    goto <bb 151>;
  else
    goto <bb 152>;

<bb 151>:
  D.45527_368 = engine_38->cur_payload_map;
  D.45528_369 = D.45527_368->remote_sdp_port;
  engine_38->remote_rtcp_port = D.45528_369;

<bb 152>:
  D.45527_370 = engine_38->cur_payload_map;
  D.45528_371 = D.45527_370->remote_sdp_port;
  D.45743_372 = (int) D.45528_371;
  switch_snprintf (&tmp, 80, "%d", D.45743_372);
  D.45467_373 = smh_34(D)->session;
  D.45468_374 = D.45467_373->channel;
  D.45527_375 = engine_38->cur_payload_map;
  D.45744_376 = D.45527_375->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.45468_374, "remote_media_ip", D.45744_376, 1);
  D.45467_377 = smh_34(D)->session;
  D.45468_378 = D.45467_377->channel;
  switch_channel_set_variable_var_check (D.45468_378, "remote_media_port", &tmp, 1);

<bb 153>:
  D.45464_379 = engine_38->ice_in.chosen[1];
  D.45693_380 = engine_38->ice_in.cands[D.45464_379][1].con_port;
  if (D.45693_380 != 0)
    goto <bb 154>;
  else
    goto <bb 158>;

<bb 154>:
  D.45467_381 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 155>;
  else
    goto <bb 156>;

<bb 155>:
  iftmp.115_382 = "video";
  goto <bb 157>;

<bb 156>:
  iftmp.115_383 = "audio";

<bb 157>:
  # iftmp.115_23 = PHI <iftmp.115_382(155), iftmp.115_383(156)>
  D.45464_384 = engine_38->ice_in.chosen[1];
  D.45692_385 = engine_38->ice_in.cands[D.45464_384][1].con_addr;
  D.45464_386 = engine_38->ice_in.chosen[1];
  D.45693_387 = engine_38->ice_in.cands[D.45464_386][1].con_port;
  D.45694_388 = (int) D.45693_387;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2730, D.45467_381, 5, "setting remote rtcp %s addr to %s:%d based on candidate\n", iftmp.115_23, D.45692_385, D.45694_388);
  D.45464_389 = engine_38->ice_in.chosen[1];
  D.45693_390 = engine_38->ice_in.cands[D.45464_389][1].con_port;
  engine_38->remote_rtcp_ice_port = D.45693_390;
  D.45467_391 = smh_34(D)->session;
  D.45464_392 = engine_38->ice_in.chosen[1];
  D.45692_393 = engine_38->ice_in.cands[D.45464_392][1].con_addr;
  D.45751_394 = switch_core_perform_session_strdup (D.45467_391, D.45692_393, "src/switch_core_media.c", &__func__, 2734);
  engine_38->remote_rtcp_ice_addr = D.45751_394;
  D.45464_395 = engine_38->ice_in.chosen[1];
  D.45693_396 = engine_38->ice_in.cands[D.45464_395][1].con_port;
  engine_38->remote_rtcp_port = D.45693_396;

<bb 158>:
  D.45752_397 = m_46(D) != 0B;
  D.45753_398 = got_rtcp_mux_8 == 0;
  D.45754_399 = D.45752_397 && D.45753_398;
  if (D.45754_399 != 0)
    goto <bb 159>;
  else
    goto <bb 160>;

<bb 159>:
  engine_38->rtcp_mux = -1;

<bb 160>:
  D.45467_400 = smh_34(D)->session;
  D.45468_401 = D.45467_400->channel;
  D.45757_402 = switch_channel_test_flag (D.45468_401, 103);
  if (D.45757_402 != 0)
    goto <bb 161>;
  else
    goto <bb 210>;

<bb 161>:
  D.45519_403 = engine_38->rtp_session;
  D.45760_404 = switch_rtp_ready (D.45519_403);
  if (D.45760_404 != 0)
    goto <bb 162>;
  else
    goto <bb 170>;

<bb 162>:
  D.45461_405 = engine_38->ice_in.chosen[0];
  D.45621_406 = engine_38->ice_in.cands[D.45461_405][0].ready;
  if (D.45621_406 != 0)
    goto <bb 163>;
  else
    goto <bb 170>;

<bb 163>:
  D.45467_407 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 164>;
  else
    goto <bb 165>;

<bb 164>:
  iftmp.116_408 = "video";
  goto <bb 166>;

<bb 165>:
  iftmp.116_409 = "audio";

<bb 166>:
  # iftmp.116_24 = PHI <iftmp.116_408(164), iftmp.116_409(165)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2749, D.45467_407, 6, "RE-Activating %s ICE\n", iftmp.116_24);
  D.45519_410 = engine_38->rtp_session;
  D.45721_411 = engine_38->ice_in.ufrag;
  D.45769_412 = engine_38->ice_out.ufrag;
  D.45770_413 = engine_38->ice_out.pwd;
  D.45724_414 = engine_38->ice_in.pwd;
  D.45467_415 = smh_34(D)->session;
  D.45772_416 = switch_ice_direction (D.45467_415);
  if (D.45772_416 == 1)
    goto <bb 167>;
  else
    goto <bb 168>;

<bb 167>:
  iftmp.117_417 = 2;
  goto <bb 169>;

<bb 168>:
  iftmp.117_418 = 6;

<bb 169>:
  # iftmp.117_25 = PHI <iftmp.117_417(167), iftmp.117_418(168)>
  D.45776_419 = &engine_38->ice_in;
  switch_rtp_activate_ice (D.45519_410, D.45721_411, D.45769_412, D.45770_413, D.45724_414, 0, iftmp.117_25, D.45776_419);

<bb 170>:
  D.45519_420 = engine_38->rtp_session;
  if (D.45519_420 != 0B)
    goto <bb 171>;
  else
    goto <bb 195>;

<bb 171>:
  D.45467_421 = smh_34(D)->session;
  D.45468_422 = D.45467_421->channel;
  if (type_36(D) == 1)
    goto <bb 172>;
  else
    goto <bb 173>;

<bb 172>:
  iftmp.118_423 = "rtcp_video_interval_msec";
  goto <bb 174>;

<bb 173>:
  iftmp.118_424 = "rtcp_audio_interval_msec";

<bb 174>:
  # iftmp.118_26 = PHI <iftmp.118_423(172), iftmp.118_424(173)>
  val_425 = switch_channel_get_variable_dup (D.45468_422, iftmp.118_26, 1, -1);
  # DEBUG val => val_425
  if (val_425 != 0B)
    goto <bb 179>;
  else
    goto <bb 175>;

<bb 175>:
  if (type_36(D) == 1)
    goto <bb 176>;
  else
    goto <bb 177>;

<bb 176>:
  D.45789_426 = smh_34(D)->mparams;
  iftmp.119_427 = D.45789_426->rtcp_video_interval_msec;
  goto <bb 178>;

<bb 177>:
  D.45789_428 = smh_34(D)->mparams;
  iftmp.119_429 = D.45789_428->rtcp_audio_interval_msec;

<bb 178>:
  # iftmp.119_27 = PHI <iftmp.119_427(176), iftmp.119_429(177)>
  val_430 = iftmp.119_27;
  # DEBUG val => val_430
  if (val_430 != 0B)
    goto <bb 179>;
  else
    goto <bb 195>;

<bb 179>:
  # val_9 = PHI <val_425(174), val_430(178)>
  # DEBUG val => val_9
  D.45467_431 = smh_34(D)->session;
  D.45468_432 = D.45467_431->channel;
  if (type_36(D) == 1)
    goto <bb 180>;
  else
    goto <bb 181>;

<bb 180>:
  iftmp.120_433 = "rtp_remote_video_rtcp_port";
  goto <bb 182>;

<bb 181>:
  iftmp.120_434 = "rtp_remote_audio_rtcp_port";

<bb 182>:
  # iftmp.120_28 = PHI <iftmp.120_433(180), iftmp.120_434(181)>
  rport_435 = switch_channel_get_variable_dup (D.45468_432, iftmp.120_28, 1, -1);
  # DEBUG rport => rport_435
  remote_rtcp_port_436 = engine_38->remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_436
  D.45795_437 = remote_rtcp_port_436 == 0;
  D.45796_438 = rport_435 != 0B;
  D.45797_439 = D.45795_437 && D.45796_438;
  if (D.45797_439 != 0)
    goto <bb 183>;
  else
    goto <bb 184>;

<bb 183>:
  D.45800_440 = atoi (rport_435);
  remote_rtcp_port_441 = (switch_port_t) D.45800_440;
  # DEBUG remote_rtcp_port => remote_rtcp_port_441

<bb 184>:
  # remote_rtcp_port_11 = PHI <remote_rtcp_port_436(182), remote_rtcp_port_441(183)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_11
  D.45801_442 = strcasecmp (val_9, "passthru");
  if (D.45801_442 == 0)
    goto <bb 185>;
  else
    goto <bb 189>;

<bb 185>:
  D.45467_443 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 186>;
  else
    goto <bb 187>;

<bb 186>:
  iftmp.121_444 = "video";
  goto <bb 188>;

<bb 187>:
  iftmp.121_445 = "audio";

<bb 188>:
  # iftmp.121_29 = PHI <iftmp.121_444(186), iftmp.121_445(187)>
  D.45808_446 = (int) remote_rtcp_port_11;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2787, D.45467_443, 6, "Activating %s RTCP PASSTHRU PORT %d\n", iftmp.121_29, D.45808_446);
  D.45519_447 = engine_38->rtp_session;
  D.45809_448 = engine_38->rtcp_mux;
  D.45810_449 = D.45809_448 > 0;
  switch_rtp_activate_rtcp (D.45519_447, -1, remote_rtcp_port_11, D.45810_449);
  goto <bb 195>;

<bb 189>:
  interval_450 = atoi (val_9);
  # DEBUG interval => interval_450
  interval.122_451 = (unsigned int) interval_450;
  D.45813_452 = interval.122_451 + 4294967196;
  if (D.45813_452 > 499900)
    goto <bb 190>;
  else
    goto <bb 191>;

<bb 190>:
  D.45467_453 = smh_34(D)->session;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2793, D.45467_453, 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_450);
  interval_454 = 10000;
  # DEBUG interval => interval_454

<bb 191>:
  # interval_12 = PHI <interval_450(189), interval_454(190)>
  # DEBUG interval => interval_12
  D.45467_455 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 192>;
  else
    goto <bb 193>;

<bb 192>:
  iftmp.123_456 = "video";
  goto <bb 194>;

<bb 193>:
  iftmp.123_457 = "audio";

<bb 194>:
  # iftmp.123_30 = PHI <iftmp.123_456(192), iftmp.123_457(193)>
  D.45808_458 = (int) remote_rtcp_port_11;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2798, D.45467_455, 6, "Activating %s RTCP PORT %d\n", iftmp.123_30, D.45808_458);
  D.45519_459 = engine_38->rtp_session;
  D.45809_460 = engine_38->rtcp_mux;
  D.45810_461 = D.45809_460 > 0;
  switch_rtp_activate_rtcp (D.45519_459, interval_12, remote_rtcp_port_11, D.45810_461);

<bb 195>:
  D.45464_462 = engine_38->ice_in.chosen[1];
  D.45639_463 = engine_38->ice_in.cands[D.45464_462][1].ready;
  if (D.45639_463 != 0)
    goto <bb 196>;
  else
    goto <bb 210>;

<bb 196>:
  D.45809_464 = engine_38->rtcp_mux;
  if (D.45809_464 > 0)
    goto <bb 197>;
  else
    goto <bb 203>;

<bb 197>:
  D.45464_465 = engine_38->ice_in.chosen[1];
  D.45692_466 = engine_38->ice_in.cands[D.45464_465][1].con_addr;
  D.45461_467 = engine_38->ice_in.chosen[0];
  D.45726_468 = engine_38->ice_in.cands[D.45461_467][0].con_addr;
  D.38904_469 = __builtin_strcmp (D.45692_466, D.45726_468);
  if (D.38904_469 == 0)
    goto <bb 198>;
  else
    goto <bb 203>;

<bb 198>:
  D.45464_470 = engine_38->ice_in.chosen[1];
  D.45693_471 = engine_38->ice_in.cands[D.45464_470][1].con_port;
  D.45461_472 = engine_38->ice_in.chosen[0];
  D.45729_473 = engine_38->ice_in.cands[D.45461_472][0].con_port;
  if (D.45693_471 == D.45729_473)
    goto <bb 199>;
  else
    goto <bb 203>;

<bb 199>:
  D.45467_474 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 200>;
  else
    goto <bb 201>;

<bb 200>:
  iftmp.124_475 = "video";
  goto <bb 202>;

<bb 201>:
  iftmp.124_476 = "audio";

<bb 202>:
  # iftmp.124_31 = PHI <iftmp.124_475(200), iftmp.124_476(201)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2806, D.45467_474, 6, "Skipping %s RTCP ICE (Same as RTP)\n", iftmp.124_31);
  goto <bb 210>;

<bb 203>:
  D.45467_477 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 204>;
  else
    goto <bb 205>;

<bb 204>:
  iftmp.125_478 = "video";
  goto <bb 206>;

<bb 205>:
  iftmp.125_479 = "audio";

<bb 206>:
  # iftmp.125_32 = PHI <iftmp.125_478(204), iftmp.125_479(205)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2808, D.45467_477, 6, "Activating %s RTCP ICE\n", iftmp.125_32);
  D.45519_480 = engine_38->rtp_session;
  D.45721_481 = engine_38->ice_in.ufrag;
  D.45769_482 = engine_38->ice_out.ufrag;
  D.45770_483 = engine_38->ice_out.pwd;
  D.45724_484 = engine_38->ice_in.pwd;
  D.45467_485 = smh_34(D)->session;
  D.45836_486 = switch_ice_direction (D.45467_485);
  if (D.45836_486 == 1)
    goto <bb 207>;
  else
    goto <bb 208>;

<bb 207>:
  iftmp.126_487 = 2;
  goto <bb 209>;

<bb 208>:
  iftmp.126_488 = 6;

<bb 209>:
  # iftmp.126_33 = PHI <iftmp.126_487(207), iftmp.126_488(208)>
  D.45776_489 = &engine_38->ice_in;
  switch_rtp_activate_ice (D.45519_480, D.45721_481, D.45769_482, D.45770_483, D.45724_484, 1, iftmp.126_33, D.45776_489);

<bb 210>:
  return;

}



;; Function switch_core_session_set_ice (switch_core_session_set_ice)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.45845 = session->channel;

Renaming statement switch_channel_set_flag_value (D.45845, 110, 1);

Renaming statement D.45845 = session->channel;

Renaming statement switch_channel_set_flag_value (D.45845, 106, 1);

Renaming statement D.45845 = session->channel;

Renaming statement switch_channel_set_flag_value (D.45845, 108, 1);

Renaming statement D.45846 = smh->mparams;

Renaming statement D.45846->rtcp_audio_interval_msec = "10000";

Renaming statement D.45846 = smh->mparams;

Renaming statement D.45846->rtcp_video_interval_msec = "10000";



Renaming block #6



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 2840, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.45845_3 = session_1(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.45845_3, 110, 1);

Updating SSA information for statement D.45845_4 = session_1(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.45845_4, 106, 1);

Updating SSA information for statement D.45845_5 = session_1(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.45845_5, 108, 1);

Updating SSA information for statement D.45846_6 = smh_2->mparams;

Updating SSA information for statement D.45846_6->rtcp_audio_interval_msec = "10000";

Updating SSA information for statement D.45846_7 = smh_2->mparams;

Updating SSA information for statement D.45846_7->rtcp_video_interval_msec = "10000";



Registering new PHI nodes in block #6



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)

Affected blocks: 0 2 3 4 5 6 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[28] = "switch_core_session_set_ice";

}
switch_core_session_set_ice (struct switch_core_session_t * session)
{
  static const char __PRETTY_FUNCTION__[28] = "switch_core_session_set_ice";
  struct switch_media_handle_t * smh;
  struct switch_core_media_params_t * D.45846;
  struct switch_channel_t * D.45845;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2840, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  D.45845_3 = session_1(D)->channel;
  switch_channel_set_flag_value (D.45845_3, 110, 1);
  D.45845_4 = session_1(D)->channel;
  switch_channel_set_flag_value (D.45845_4, 106, 1);
  D.45845_5 = session_1(D)->channel;
  switch_channel_set_flag_value (D.45845_5, 108, 1);
  D.45846_6 = smh_2->mparams;
  D.45846_6->rtcp_audio_interval_msec = "10000";
  D.45846_7 = smh_2->mparams;
  D.45846_7->rtcp_video_interval_msec = "10000";

<bb 6>:
  return;

}



;; Function switch_core_media_toggle_hold (switch_core_media_toggle_hold)



Renaming block #0



Renaming block #2

Renaming statement changed = 0;

Renaming statement b_channel = 0B;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.44359 = 0;



Renaming block #6

Renaming statement a_engine = &smh->engines;

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.44360 = switch_core_session_perform_get_partner (session, &b_session, "src/switch_core_media.c", &__func__, 3882);

Renaming statement if (D.44360 == 0)



Renaming block #7

Renaming statement b_session.86 = b_session;

Renaming statement b_channel = switch_core_session_get_channel (b_session.86);



Renaming block #8

Renaming statement if (sendonly != 0)



Renaming block #9

Renaming statement D.44367 = session->channel;

Renaming statement D.44368 = switch_channel_test_flag (D.44367, 1);

Renaming statement if (D.44368 != 0)



Renaming block #10

Renaming statement D.44367 = session->channel;

Renaming statement D.44370 = switch_channel_test_flag (D.44367, 96);

Renaming statement if (D.44370 == 0)



Renaming block #11

Renaming statement msg = "hold";

Renaming statement D.44367 = session->channel;

Renaming statement D.44376 = switch_channel_test_flag (D.44367, 94);

Renaming statement if (D.44376 != 0)



Renaming block #12

Renaming statement D.44367 = session->channel;

Renaming statement D.44378 = switch_channel_test_flag (D.44367, 95);

Renaming statement if (D.44378 != 0)



Renaming block #13

Renaming statement if (b_channel == 0B)



Renaming block #14

Renaming statement D.44380 = switch_channel_test_flag (b_channel, 25);

Renaming statement if (D.44380 != 0)



Renaming block #15

Renaming statement D.44367 = session->channel;

Renaming statement sendonly.87 = (switch_bool_t) sendonly;

Renaming statement switch_channel_mark_hold (D.44367, sendonly.87);

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_set_flag_value (D.44367, 96, 1);

Renaming statement changed = 0;



Renaming block #16

Renaming statement D.44367 = session->channel;

Renaming statement info = switch_channel_get_variable_dup (D.44367, "presence_call_info", 1, -1);

Renaming statement if (info != 0B)



Renaming block #17

Renaming statement D.44384 = switch_stristr ("private", info);

Renaming statement if (D.44384 != 0B)



Renaming block #18

Renaming statement msg = "hold-private";



Renaming block #19

Renaming statement D.44387 = a_engine->rtp_session;

Renaming statement if (D.44387 != 0B)



Renaming block #20

Renaming statement D.44387 = a_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.44387, 35);



Renaming block #21

Renaming statement D.44390 = v_engine->rtp_session;

Renaming statement if (D.44390 != 0B)



Renaming block #22

Renaming statement D.44390 = v_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.44390, 35);



Renaming block #23

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_set_flag_value (D.44367, 96, 1);

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_mark_hold (D.44367, 1);

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_perform_presence (D.44367, "unknown", msg, 0B, "src/switch_core_media.c", &__func__, 3918);

Renaming statement changed = 1;

Renaming statement D.44393 = a_engine->max_missed_hold_packets;

Renaming statement if (D.44393 != 0)



Renaming block #24

Renaming statement D.44387 = a_engine->rtp_session;

Renaming statement if (D.44387 != 0B)



Renaming block #25

Renaming statement D.44387 = a_engine->rtp_session;

Renaming statement D.44393 = a_engine->max_missed_hold_packets;

Renaming statement switch_rtp_set_max_missed_packets (D.44387, D.44393);



Renaming block #26

Renaming statement D.44367 = session->channel;

Renaming statement stream = switch_channel_get_hold_music (D.44367);

Renaming statement if (stream == 0B)



Renaming block #27

Renaming statement stream = "local_stream://moh";



Renaming block #28

Renaming statement if (stream != 0B)



Renaming block #29

Renaming statement D.44404 = strcasecmp (stream, "silence");

Renaming statement if (D.44404 != 0)



Renaming block #30

Renaming statement if (b_channel == 0B)



Renaming block #31

Renaming statement D.44408 = switch_channel_test_flag (b_channel, 25);

Renaming statement if (D.44408 == 0)



Renaming block #32

Renaming statement D.44409 = strcasecmp (stream, "indicate_hold");

Renaming statement if (D.44409 == 0)



Renaming block #33

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_set_flag_value (D.44367, 16, 1);

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_set_flag_value (D.44367, 10, 1);

Renaming statement b_session.86 = b_session;

Renaming statement D.44412 = switch_core_session_get_uuid (b_session.86);

Renaming statement switch_ivr_hold_uuid (D.44412, 0B, 0);



Renaming block #34

Renaming statement b_session.86 = b_session;

Renaming statement D.44414 = switch_core_session_get_uuid (b_session.86);

Renaming statement switch_ivr_broadcast (D.44414, stream, 274);



Renaming block #35

Renaming statement D.44367 = session->channel;

Renaming statement D.44415 = switch_channel_test_flag (D.44367, 97);

Renaming statement if (D.44415 != 0)



Renaming block #36

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_set_flag_value (D.44367, 96, 1);

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_mark_hold (D.44367, 1);

Renaming statement D.44387 = a_engine->rtp_session;

Renaming statement if (D.44387 != 0B)



Renaming block #37

Renaming statement D.44387 = a_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.44387, 35);



Renaming block #38

Renaming statement D.44390 = v_engine->rtp_session;

Renaming statement if (D.44390 != 0B)



Renaming block #39

Renaming statement D.44390 = v_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.44390, 35);



Renaming block #40

Renaming statement changed = 1;



Renaming block #41

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_clear_flag (D.44367, 97);

Renaming statement D.44367 = session->channel;

Renaming statement D.44422 = switch_channel_test_flag (D.44367, 96);

Renaming statement if (D.44422 != 0)



Renaming block #42

Renaming statement if (b_channel != 0B)



Renaming block #43

Renaming statement D.44367 = session->channel;

Renaming statement D.44429 = switch_channel_test_flag (D.44367, 120);

Renaming statement if (D.44429 != 0)



Renaming block #44

Renaming statement D.44431 = switch_channel_test_flag (b_channel, 120);

Renaming statement if (D.44431 != 0)



Renaming block #45

Renaming statement D.44432 = switch_core_session_get_uuid (session);

Renaming statement switch_ivr_nomedia (D.44432, 1);



Renaming block #46

Renaming statement D.44433 = a_engine->max_missed_packets;

Renaming statement if (D.44433 != 0)



Renaming block #47

Renaming statement D.44387 = a_engine->rtp_session;

Renaming statement if (D.44387 != 0B)



Renaming block #48

Renaming statement D.44387 = a_engine->rtp_session;

Renaming statement switch_rtp_reset_media_timer (D.44387);

Renaming statement D.44387 = a_engine->rtp_session;

Renaming statement D.44433 = a_engine->max_missed_packets;

Renaming statement switch_rtp_set_max_missed_packets (D.44387, D.44433);



Renaming block #49

Renaming statement if (b_channel != 0B)



Renaming block #50

Renaming statement D.44367 = session->channel;

Renaming statement D.44440 = switch_channel_test_flag (D.44367, 10);

Renaming statement if (D.44440 != 0)



Renaming block #51

Renaming statement b_session.86 = b_session;

Renaming statement switch_ivr_unhold (b_session.86);

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_clear_flag (D.44367, 16);

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_clear_flag (D.44367, 10);



Renaming block #52

Renaming statement D.44444 = switch_channel_test_flag (b_channel, 21);

Renaming statement if (D.44444 != 0)



Renaming block #53

Renaming statement switch_channel_set_flag_value (b_channel, 28, 1);

Renaming statement switch_channel_set_flag_value (b_channel, 20, 1);



Renaming block #54

Renaming statement switch_channel_wait_for_flag (b_channel, 21, 0, 5000, 0B);



Renaming block #55

Renaming statement D.44449 = switch_media_handle_test_media_flag (smh, 10);

Renaming statement if (D.44449 == 0)



Renaming block #56

Renaming statement D.44367 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.44367, "disable_rtp_auto_adjust", 1, -1);

Renaming statement if (val == 0B)



Renaming block #57

Renaming statement D.44453 = switch_true (val);

Renaming statement if (D.44453 == 0)



Renaming block #58

Renaming statement D.44367 = session->channel;

Renaming statement D.44454 = switch_channel_test_flag (D.44367, 106);

Renaming statement if (D.44454 == 0)



Renaming block #59

Renaming statement D.44387 = a_engine->rtp_session;

Renaming statement if (D.44387 != 0B)



Renaming block #60

Renaming statement D.44387 = a_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.44387, 7);



Renaming block #61

Renaming statement D.44390 = v_engine->rtp_session;

Renaming statement if (D.44390 != 0B)



Renaming block #62

Renaming statement D.44390 = v_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.44390, 7);



Renaming block #63

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_clear_flag (D.44367, 96);

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_mark_hold (D.44367, 0);

Renaming statement D.44367 = session->channel;

Renaming statement switch_channel_perform_presence (D.44367, "unknown", "unhold", 0B, "src/switch_core_media.c", &__func__, 4004);

Renaming statement D.44387 = a_engine->rtp_session;

Renaming statement switch_rtp_clear_flag (D.44387, 35);

Renaming statement D.44390 = v_engine->rtp_session;

Renaming statement if (D.44390 != 0B)



Renaming block #64

Renaming statement D.44390 = v_engine->rtp_session;

Renaming statement switch_rtp_clear_flag (D.44390, 35);



Renaming block #65

Renaming statement changed = 1;



Renaming block #66

Renaming statement b_session.86 = b_session;

Renaming statement if (b_session.86 != 0B)



Renaming block #67

Renaming statement b_session.86 = b_session;

Renaming statement switch_core_session_rwunlock (b_session.86);



Renaming block #68

Renaming statement D.44359 = changed;



Renaming block #69

Renaming statement return D.44359;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement b_session = 0B;



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 3872, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_10 = session_9(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.44360_14 = switch_core_session_perform_get_partner (session_9(D), &b_session, "src/switch_core_media.c", &__func__, 3882);



Registering new PHI nodes in block #7

Updating SSA information for statement b_session.86_15 = b_session;

Updating SSA information for statement b_channel_16 = switch_core_session_get_channel (b_session.86_15);



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9

Updating SSA information for statement D.44367_18 = session_9(D)->channel;

Updating SSA information for statement D.44368_19 = switch_channel_test_flag (D.44367_18, 1);



Registering new PHI nodes in block #10

Updating SSA information for statement D.44367_20 = session_9(D)->channel;

Updating SSA information for statement D.44370_21 = switch_channel_test_flag (D.44367_20, 96);



Registering new PHI nodes in block #11

Updating SSA information for statement D.44367_23 = session_9(D)->channel;

Updating SSA information for statement D.44376_24 = switch_channel_test_flag (D.44367_23, 94);



Registering new PHI nodes in block #12

Updating SSA information for statement D.44367_25 = session_9(D)->channel;

Updating SSA information for statement D.44378_26 = switch_channel_test_flag (D.44367_25, 95);



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement D.44380_27 = switch_channel_test_flag (b_channel_3, 25);



Registering new PHI nodes in block #15

Updating SSA information for statement D.44367_28 = session_9(D)->channel;

Updating SSA information for statement switch_channel_mark_hold (D.44367_28, sendonly.87_29);

Updating SSA information for statement D.44367_30 = session_9(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44367_30, 96, 1);



Registering new PHI nodes in block #16

Updating SSA information for statement D.44367_32 = session_9(D)->channel;

Updating SSA information for statement info_33 = switch_channel_get_variable_dup (D.44367_32, "presence_call_info", 1, -1);



Registering new PHI nodes in block #17

Updating SSA information for statement D.44384_34 = switch_stristr ("private", info_33);



Registering new PHI nodes in block #18



Registering new PHI nodes in block #19

Updating SSA information for statement D.44387_36 = a_engine_12->rtp_session;



Registering new PHI nodes in block #20

Updating SSA information for statement D.44387_37 = a_engine_12->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.44387_37, 35);



Registering new PHI nodes in block #21

Updating SSA information for statement D.44390_38 = v_engine_13->rtp_session;



Registering new PHI nodes in block #22

Updating SSA information for statement D.44390_39 = v_engine_13->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.44390_39, 35);



Registering new PHI nodes in block #23

Updating SSA information for statement D.44367_40 = session_9(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44367_40, 96, 1);

Updating SSA information for statement D.44367_41 = session_9(D)->channel;

Updating SSA information for statement switch_channel_mark_hold (D.44367_41, 1);

Updating SSA information for statement D.44367_42 = session_9(D)->channel;

Updating SSA information for statement switch_channel_perform_presence (D.44367_42, "unknown", msg_5, 0B, "src/switch_core_media.c", &__func__, 3918);

Updating SSA information for statement D.44393_44 = a_engine_12->max_missed_hold_packets;



Registering new PHI nodes in block #24

Updating SSA information for statement D.44387_45 = a_engine_12->rtp_session;



Registering new PHI nodes in block #25

Updating SSA information for statement D.44387_46 = a_engine_12->rtp_session;

Updating SSA information for statement D.44393_47 = a_engine_12->max_missed_hold_packets;

Updating SSA information for statement switch_rtp_set_max_missed_packets (D.44387_46, D.44393_47);



Registering new PHI nodes in block #26

Updating SSA information for statement D.44367_48 = session_9(D)->channel;

Updating SSA information for statement stream_49 = switch_channel_get_hold_music (D.44367_48);



Registering new PHI nodes in block #27



Registering new PHI nodes in block #28



Registering new PHI nodes in block #29

Updating SSA information for statement D.44404_51 = strcasecmp (stream_4, "silence");



Registering new PHI nodes in block #30



Registering new PHI nodes in block #31

Updating SSA information for statement D.44408_52 = switch_channel_test_flag (b_channel_3, 25);



Registering new PHI nodes in block #32

Updating SSA information for statement D.44409_53 = strcasecmp (stream_4, "indicate_hold");



Registering new PHI nodes in block #33

Updating SSA information for statement D.44367_54 = session_9(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44367_54, 16, 1);

Updating SSA information for statement D.44367_55 = session_9(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44367_55, 10, 1);

Updating SSA information for statement b_session.86_56 = b_session;

Updating SSA information for statement D.44412_57 = switch_core_session_get_uuid (b_session.86_56);

Updating SSA information for statement switch_ivr_hold_uuid (D.44412_57, 0B, 0);



Registering new PHI nodes in block #34

Updating SSA information for statement b_session.86_58 = b_session;

Updating SSA information for statement D.44414_59 = switch_core_session_get_uuid (b_session.86_58);

Updating SSA information for statement switch_ivr_broadcast (D.44414_59, stream_4, 274);

Updating SSA information for statement switch_sleep (250000);



Registering new PHI nodes in block #35

Updating SSA information for statement D.44367_60 = session_9(D)->channel;

Updating SSA information for statement D.44415_61 = switch_channel_test_flag (D.44367_60, 97);



Registering new PHI nodes in block #36

Updating SSA information for statement D.44367_62 = session_9(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44367_62, 96, 1);

Updating SSA information for statement D.44367_63 = session_9(D)->channel;

Updating SSA information for statement switch_channel_mark_hold (D.44367_63, 1);

Updating SSA information for statement D.44387_64 = a_engine_12->rtp_session;



Registering new PHI nodes in block #37

Updating SSA information for statement D.44387_65 = a_engine_12->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.44387_65, 35);



Registering new PHI nodes in block #38

Updating SSA information for statement D.44390_66 = v_engine_13->rtp_session;



Registering new PHI nodes in block #39

Updating SSA information for statement D.44390_67 = v_engine_13->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.44390_67, 35);



Registering new PHI nodes in block #40



Registering new PHI nodes in block #41

Updating SSA information for statement D.44367_69 = session_9(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.44367_69, 97);

Updating SSA information for statement D.44367_70 = session_9(D)->channel;

Updating SSA information for statement D.44422_71 = switch_channel_test_flag (D.44367_70, 96);



Registering new PHI nodes in block #42

Updating SSA information for statement switch_sleep (250000);



Registering new PHI nodes in block #43

Updating SSA information for statement D.44367_72 = session_9(D)->channel;

Updating SSA information for statement D.44429_73 = switch_channel_test_flag (D.44367_72, 120);



Registering new PHI nodes in block #44

Updating SSA information for statement D.44431_74 = switch_channel_test_flag (b_channel_3, 120);



Registering new PHI nodes in block #45

Updating SSA information for statement D.44432_75 = switch_core_session_get_uuid (session_9(D));

Updating SSA information for statement switch_ivr_nomedia (D.44432_75, 1);



Registering new PHI nodes in block #46

Updating SSA information for statement D.44433_76 = a_engine_12->max_missed_packets;



Registering new PHI nodes in block #47

Updating SSA information for statement D.44387_77 = a_engine_12->rtp_session;



Registering new PHI nodes in block #48

Updating SSA information for statement D.44387_78 = a_engine_12->rtp_session;

Updating SSA information for statement switch_rtp_reset_media_timer (D.44387_78);

Updating SSA information for statement D.44387_79 = a_engine_12->rtp_session;

Updating SSA information for statement D.44433_80 = a_engine_12->max_missed_packets;

Updating SSA information for statement switch_rtp_set_max_missed_packets (D.44387_79, D.44433_80);



Registering new PHI nodes in block #49



Registering new PHI nodes in block #50

Updating SSA information for statement D.44367_81 = session_9(D)->channel;

Updating SSA information for statement D.44440_82 = switch_channel_test_flag (D.44367_81, 10);



Registering new PHI nodes in block #51

Updating SSA information for statement b_session.86_83 = b_session;

Updating SSA information for statement switch_ivr_unhold (b_session.86_83);

Updating SSA information for statement D.44367_84 = session_9(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.44367_84, 16);

Updating SSA information for statement D.44367_85 = session_9(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.44367_85, 10);



Registering new PHI nodes in block #52

Updating SSA information for statement D.44444_86 = switch_channel_test_flag (b_channel_3, 21);



Registering new PHI nodes in block #53

Updating SSA information for statement switch_channel_set_flag_value (b_channel_3, 28, 1);

Updating SSA information for statement switch_channel_set_flag_value (b_channel_3, 20, 1);



Registering new PHI nodes in block #54

Updating SSA information for statement switch_channel_wait_for_flag (b_channel_3, 21, 0, 5000, 0B);



Registering new PHI nodes in block #55

Updating SSA information for statement D.44449_87 = switch_media_handle_test_media_flag (smh_10, 10);



Registering new PHI nodes in block #56

Updating SSA information for statement D.44367_88 = session_9(D)->channel;

Updating SSA information for statement val_89 = switch_channel_get_variable_dup (D.44367_88, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #57

Updating SSA information for statement D.44453_90 = switch_true (val_89);



Registering new PHI nodes in block #58

Updating SSA information for statement D.44367_91 = session_9(D)->channel;

Updating SSA information for statement D.44454_92 = switch_channel_test_flag (D.44367_91, 106);



Registering new PHI nodes in block #59

Updating SSA information for statement D.44387_93 = a_engine_12->rtp_session;



Registering new PHI nodes in block #60

Updating SSA information for statement D.44387_94 = a_engine_12->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.44387_94, 7);



Registering new PHI nodes in block #61

Updating SSA information for statement D.44390_95 = v_engine_13->rtp_session;



Registering new PHI nodes in block #62

Updating SSA information for statement D.44390_96 = v_engine_13->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.44390_96, 7);



Registering new PHI nodes in block #63

Updating SSA information for statement D.44367_97 = session_9(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.44367_97, 96);

Updating SSA information for statement D.44367_98 = session_9(D)->channel;

Updating SSA information for statement switch_channel_mark_hold (D.44367_98, 0);

Updating SSA information for statement D.44367_99 = session_9(D)->channel;

Updating SSA information for statement switch_channel_perform_presence (D.44367_99, "unknown", "unhold", 0B, "src/switch_core_media.c", &__func__, 4004);

Updating SSA information for statement D.44387_100 = a_engine_12->rtp_session;

Updating SSA information for statement switch_rtp_clear_flag (D.44387_100, 35);

Updating SSA information for statement D.44390_101 = v_engine_13->rtp_session;



Registering new PHI nodes in block #64

Updating SSA information for statement D.44390_102 = v_engine_13->rtp_session;

Updating SSA information for statement switch_rtp_clear_flag (D.44390_102, 35);



Registering new PHI nodes in block #65



Registering new PHI nodes in block #66

Updating SSA information for statement b_session.86_104 = b_session;



Registering new PHI nodes in block #67

Updating SSA information for statement b_session.86_105 = b_session;

Updating SSA information for statement switch_core_session_rwunlock (b_session.86_105);



Registering new PHI nodes in block #68



Registering new PHI nodes in block #69



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 70
Number of blocks to update: 69 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 


Scope blocks after cleanups:

{ Scope block #0 
  int changed;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  struct switch_core_session_t * b_session;
  struct switch_channel_t * b_channel;
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_toggle_hold";
  static const char __func__[30] = "switch_core_media_toggle_hold";
  void end = <<< error >>>; (unused)

  { Scope block #0 
    const char * stream;
    const char * msg;
    const char * info;

  }

  { Scope block #0 
    const char * val;

  }

}
switch_core_media_toggle_hold (struct switch_core_session_t * session, int sendonly)
{
  const char * val;
  const char * info;
  const char * msg;
  const char * stream;
  static const char __func__[30] = "switch_core_media_toggle_hold";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_toggle_hold";
  struct switch_channel_t * b_channel;
  struct switch_core_session_t * b_session;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  int changed;
  uint32_t D.44454;
  int D.44453;
  int32_t D.44449;
  uint32_t D.44444;
  uint32_t D.44440;
  uint32_t D.44433;
  char * D.44432;
  uint32_t D.44431;
  uint32_t D.44429;
  uint32_t D.44422;
  uint32_t D.44415;
  char * D.44414;
  char * D.44412;
  int D.44409;
  uint32_t D.44408;
  int D.44404;
  uint32_t D.44393;
  struct switch_rtp_t * D.44390;
  struct switch_rtp_t * D.44387;
  const char * D.44384;
  switch_bool_t sendonly.87;
  uint32_t D.44380;
  uint32_t D.44378;
  uint32_t D.44376;
  uint32_t D.44370;
  uint32_t D.44368;
  struct switch_channel_t * D.44367;
  struct switch_core_session_t * b_session.86;
  switch_status_t D.44360;
  int D.44359;

<bb 2>:
  changed_7 = 0;
  # DEBUG changed => changed_7
  b_session = 0B;
  b_channel_8 = 0B;
  # DEBUG b_channel => b_channel_8
  if (session_9(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 3872, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_10 = session_9(D)->media_handle;
  # DEBUG smh => smh_10
  if (smh_10 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.44359_11 = 0;
  goto <bb 69>;

<bb 6>:
  a_engine_12 = &smh_10->engines;
  # DEBUG a_engine => a_engine_12
  v_engine_13 = &smh_10->engines[1];
  # DEBUG v_engine => v_engine_13
  D.44360_14 = switch_core_session_perform_get_partner (session_9(D), &b_session, "src/switch_core_media.c", &__func__, 3882);
  if (D.44360_14 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  b_session.86_15 = b_session;
  b_channel_16 = switch_core_session_get_channel (b_session.86_15);
  # DEBUG b_channel => b_channel_16

<bb 8>:
  # b_channel_3 = PHI <b_channel_8(6), b_channel_16(7)>
  # DEBUG b_channel => b_channel_3
  if (sendonly_17(D) != 0)
    goto <bb 9>;
  else
    goto <bb 35>;

<bb 9>:
  D.44367_18 = session_9(D)->channel;
  D.44368_19 = switch_channel_test_flag (D.44367_18, 1);
  if (D.44368_19 != 0)
    goto <bb 10>;
  else
    goto <bb 35>;

<bb 10>:
  D.44367_20 = session_9(D)->channel;
  D.44370_21 = switch_channel_test_flag (D.44367_20, 96);
  if (D.44370_21 == 0)
    goto <bb 11>;
  else
    goto <bb 66> (end);

<bb 11>:
  msg_22 = "hold";
  # DEBUG msg => msg_22
  D.44367_23 = session_9(D)->channel;
  D.44376_24 = switch_channel_test_flag (D.44367_23, 94);
  if (D.44376_24 != 0)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:
  D.44367_25 = session_9(D)->channel;
  D.44378_26 = switch_channel_test_flag (D.44367_25, 95);
  if (D.44378_26 != 0)
    goto <bb 13>;
  else
    goto <bb 16>;

<bb 13>:
  if (b_channel_3 == 0B)
    goto <bb 15>;
  else
    goto <bb 14>;

<bb 14>:
  D.44380_27 = switch_channel_test_flag (b_channel_3, 25);
  if (D.44380_27 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.44367_28 = session_9(D)->channel;
  sendonly.87_29 = (switch_bool_t) sendonly_17(D);
  switch_channel_mark_hold (D.44367_28, sendonly.87_29);
  D.44367_30 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_30, 96, 1);
  changed_31 = 0;
  # DEBUG changed => changed_31
  goto <bb 66> (end);

<bb 16>:
  D.44367_32 = session_9(D)->channel;
  info_33 = switch_channel_get_variable_dup (D.44367_32, "presence_call_info", 1, -1);
  # DEBUG info => info_33
  if (info_33 != 0B)
    goto <bb 17>;
  else
    goto <bb 19>;

<bb 17>:
  D.44384_34 = switch_stristr ("private", info_33);
  if (D.44384_34 != 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  msg_35 = "hold-private";
  # DEBUG msg => msg_35

<bb 19>:
  # msg_5 = PHI <msg_22(16), msg_22(17), msg_35(18)>
  # DEBUG msg => msg_5
  D.44387_36 = a_engine_12->rtp_session;
  if (D.44387_36 != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.44387_37 = a_engine_12->rtp_session;
  switch_rtp_set_flag (D.44387_37, 35);

<bb 21>:
  D.44390_38 = v_engine_13->rtp_session;
  if (D.44390_38 != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.44390_39 = v_engine_13->rtp_session;
  switch_rtp_set_flag (D.44390_39, 35);

<bb 23>:
  D.44367_40 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_40, 96, 1);
  D.44367_41 = session_9(D)->channel;
  switch_channel_mark_hold (D.44367_41, 1);
  D.44367_42 = session_9(D)->channel;
  switch_channel_perform_presence (D.44367_42, "unknown", msg_5, 0B, "src/switch_core_media.c", &__func__, 3918);
  changed_43 = 1;
  # DEBUG changed => changed_43
  D.44393_44 = a_engine_12->max_missed_hold_packets;
  if (D.44393_44 != 0)
    goto <bb 24>;
  else
    goto <bb 26>;

<bb 24>:
  D.44387_45 = a_engine_12->rtp_session;
  if (D.44387_45 != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.44387_46 = a_engine_12->rtp_session;
  D.44393_47 = a_engine_12->max_missed_hold_packets;
  switch_rtp_set_max_missed_packets (D.44387_46, D.44393_47);

<bb 26>:
  D.44367_48 = session_9(D)->channel;
  stream_49 = switch_channel_get_hold_music (D.44367_48);
  # DEBUG stream => stream_49
  if (stream_49 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  stream_50 = "local_stream://moh";
  # DEBUG stream => stream_50

<bb 28>:
  # stream_4 = PHI <stream_49(26), stream_50(27)>
  # DEBUG stream => stream_4
  if (stream_4 != 0B)
    goto <bb 29>;
  else
    goto <bb 66> (end);

<bb 29>:
  D.44404_51 = strcasecmp (stream_4, "silence");
  if (D.44404_51 != 0)
    goto <bb 30>;
  else
    goto <bb 66> (end);

<bb 30>:
  if (b_channel_3 == 0B)
    goto <bb 32>;
  else
    goto <bb 31>;

<bb 31>:
  D.44408_52 = switch_channel_test_flag (b_channel_3, 25);
  if (D.44408_52 == 0)
    goto <bb 32>;
  else
    goto <bb 66> (end);

<bb 32>:
  D.44409_53 = strcasecmp (stream_4, "indicate_hold");
  if (D.44409_53 == 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.44367_54 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_54, 16, 1);
  D.44367_55 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_55, 10, 1);
  b_session.86_56 = b_session;
  D.44412_57 = switch_core_session_get_uuid (b_session.86_56);
  switch_ivr_hold_uuid (D.44412_57, 0B, 0);
  goto <bb 66> (end);

<bb 34>:
  b_session.86_58 = b_session;
  D.44414_59 = switch_core_session_get_uuid (b_session.86_58);
  switch_ivr_broadcast (D.44414_59, stream_4, 274);
  switch_sleep (250000);
  goto <bb 66> (end);

<bb 35>:
  D.44367_60 = session_9(D)->channel;
  D.44415_61 = switch_channel_test_flag (D.44367_60, 97);
  if (D.44415_61 != 0)
    goto <bb 36>;
  else
    goto <bb 41>;

<bb 36>:
  D.44367_62 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_62, 96, 1);
  D.44367_63 = session_9(D)->channel;
  switch_channel_mark_hold (D.44367_63, 1);
  D.44387_64 = a_engine_12->rtp_session;
  if (D.44387_64 != 0B)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  D.44387_65 = a_engine_12->rtp_session;
  switch_rtp_set_flag (D.44387_65, 35);

<bb 38>:
  D.44390_66 = v_engine_13->rtp_session;
  if (D.44390_66 != 0B)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.44390_67 = v_engine_13->rtp_session;
  switch_rtp_set_flag (D.44390_67, 35);

<bb 40>:
  changed_68 = 1;
  # DEBUG changed => changed_68

<bb 41>:
  # changed_1 = PHI <changed_7(35), changed_68(40)>
  # DEBUG changed => changed_1
  D.44367_69 = session_9(D)->channel;
  switch_channel_clear_flag (D.44367_69, 97);
  D.44367_70 = session_9(D)->channel;
  D.44422_71 = switch_channel_test_flag (D.44367_70, 96);
  if (D.44422_71 != 0)
    goto <bb 42>;
  else
    goto <bb 66> (end);

<bb 42>:
  switch_sleep (250000);
  if (b_channel_3 != 0B)
    goto <bb 43>;
  else
    goto <bb 46>;

<bb 43>:
  D.44367_72 = session_9(D)->channel;
  D.44429_73 = switch_channel_test_flag (D.44367_72, 120);
  if (D.44429_73 != 0)
    goto <bb 45>;
  else
    goto <bb 44>;

<bb 44>:
  D.44431_74 = switch_channel_test_flag (b_channel_3, 120);
  if (D.44431_74 != 0)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  D.44432_75 = switch_core_session_get_uuid (session_9(D));
  switch_ivr_nomedia (D.44432_75, 1);

<bb 46>:
  D.44433_76 = a_engine_12->max_missed_packets;
  if (D.44433_76 != 0)
    goto <bb 47>;
  else
    goto <bb 49>;

<bb 47>:
  D.44387_77 = a_engine_12->rtp_session;
  if (D.44387_77 != 0B)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  D.44387_78 = a_engine_12->rtp_session;
  switch_rtp_reset_media_timer (D.44387_78);
  D.44387_79 = a_engine_12->rtp_session;
  D.44433_80 = a_engine_12->max_missed_packets;
  switch_rtp_set_max_missed_packets (D.44387_79, D.44433_80);

<bb 49>:
  if (b_channel_3 != 0B)
    goto <bb 50>;
  else
    goto <bb 55>;

<bb 50>:
  D.44367_81 = session_9(D)->channel;
  D.44440_82 = switch_channel_test_flag (D.44367_81, 10);
  if (D.44440_82 != 0)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  b_session.86_83 = b_session;
  switch_ivr_unhold (b_session.86_83);
  D.44367_84 = session_9(D)->channel;
  switch_channel_clear_flag (D.44367_84, 16);
  D.44367_85 = session_9(D)->channel;
  switch_channel_clear_flag (D.44367_85, 10);
  goto <bb 55>;

<bb 52>:
  D.44444_86 = switch_channel_test_flag (b_channel_3, 21);
  if (D.44444_86 != 0)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  switch_channel_set_flag_value (b_channel_3, 28, 1);
  switch_channel_set_flag_value (b_channel_3, 20, 1);

<bb 54>:
  switch_channel_wait_for_flag (b_channel_3, 21, 0, 5000, 0B);

<bb 55>:
  D.44449_87 = switch_media_handle_test_media_flag (smh_10, 10);
  if (D.44449_87 == 0)
    goto <bb 56>;
  else
    goto <bb 63>;

<bb 56>:
  D.44367_88 = session_9(D)->channel;
  val_89 = switch_channel_get_variable_dup (D.44367_88, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_89
  if (val_89 == 0B)
    goto <bb 58>;
  else
    goto <bb 57>;

<bb 57>:
  D.44453_90 = switch_true (val_89);
  if (D.44453_90 == 0)
    goto <bb 58>;
  else
    goto <bb 63>;

<bb 58>:
  D.44367_91 = session_9(D)->channel;
  D.44454_92 = switch_channel_test_flag (D.44367_91, 106);
  if (D.44454_92 == 0)
    goto <bb 59>;
  else
    goto <bb 63>;

<bb 59>:
  D.44387_93 = a_engine_12->rtp_session;
  if (D.44387_93 != 0B)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  D.44387_94 = a_engine_12->rtp_session;
  switch_rtp_set_flag (D.44387_94, 7);

<bb 61>:
  D.44390_95 = v_engine_13->rtp_session;
  if (D.44390_95 != 0B)
    goto <bb 62>;
  else
    goto <bb 63>;

<bb 62>:
  D.44390_96 = v_engine_13->rtp_session;
  switch_rtp_set_flag (D.44390_96, 7);

<bb 63>:
  D.44367_97 = session_9(D)->channel;
  switch_channel_clear_flag (D.44367_97, 96);
  D.44367_98 = session_9(D)->channel;
  switch_channel_mark_hold (D.44367_98, 0);
  D.44367_99 = session_9(D)->channel;
  switch_channel_perform_presence (D.44367_99, "unknown", "unhold", 0B, "src/switch_core_media.c", &__func__, 4004);
  D.44387_100 = a_engine_12->rtp_session;
  switch_rtp_clear_flag (D.44387_100, 35);
  D.44390_101 = v_engine_13->rtp_session;
  if (D.44390_101 != 0B)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  D.44390_102 = v_engine_13->rtp_session;
  switch_rtp_clear_flag (D.44390_102, 35);

<bb 65>:
  changed_103 = 1;
  # DEBUG changed => changed_103

  # changed_2 = PHI <changed_31(15), changed_43(28), changed_1(41), changed_103(65), changed_7(10), changed_43(34), changed_43(33), changed_43(31), changed_43(29)>
end:
  # DEBUG changed => changed_2
  b_session.86_104 = b_session;
  if (b_session.86_104 != 0B)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  b_session.86_105 = b_session;
  switch_core_session_rwunlock (b_session.86_105);

<bb 68>:
  D.44359_106 = changed_2;

<bb 69>:
  # D.44359_6 = PHI <D.44359_11(5), D.44359_106(68)>
  return D.44359_6;

}



;; Function switch_core_media_negotiate_sdp (switch_core_media_negotiate_sdp)



Renaming block #0



Renaming block #2

Renaming statement match = 0;

Renaming statement best_te = 0;

Renaming statement te = 0;

Renaming statement cng_pt = 0;

Renaming statement ptime = 0;

Renaming statement dptime = 0;

Renaming statement maxptime = 0;

Renaming statement dmaxptime = 0;

Renaming statement sendonly = 0;

Renaming statement recvonly = 0;

Renaming statement greedy = 0;

Renaming statement x = 0;

Renaming statement skip = 0;

Renaming statement channel = switch_core_session_get_channel (session);

Renaming statement crypto = 0B;

Renaming statement got_crypto = 0;

Renaming statement got_video_crypto = 0;

Renaming statement got_audio = 0;

Renaming statement got_avp = 0;

Renaming statement got_video_avp = 0;

Renaming statement got_video_savp = 0;

Renaming statement got_savp = 0;

Renaming statement got_udptl = 0;

Renaming statement got_webrtc = 0;

Renaming statement scrooge = 0;

Renaming statement parser = 0B;

Renaming statement reneg = 1;

Renaming statement near_rate = 0;

Renaming statement mimp = 0B;

Renaming statement near_match = 0B;

Renaming statement mmap = 0B;

Renaming statement near_map = 0B;

Renaming statement codec_ms = 0;

Renaming statement remote_codec_rate = 0;

Renaming statement fmtp_remote_codec_rate = 0;

Renaming statement m_idx = 0;

Renaming statement nm_idx = 0;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.44470 = 0;



Renaming block #6

Renaming statement a_engine = &smh->engines;

Renaming statement v_engine = &smh->engines[1];

Renaming statement codec_array = &smh->codecs;

Renaming statement D.44471 = smh->mparams;

Renaming statement total_codecs = D.44471->num_codecs;

Renaming statement D.44472 = strlen (r_sdp);

Renaming statement D.44473 = (int) D.44472;

Renaming statement parser = sdp_parse (0B, r_sdp, D.44473, 0);

Renaming statement if (parser == 0B)



Renaming block #7

Renaming statement D.44470 = 0;



Renaming block #8

Renaming statement sdp = sdp_session (parser);

Renaming statement if (sdp == 0B)



Renaming block #9

Renaming statement sdp_parser_free (parser);

Renaming statement D.44470 = 0;



Renaming block #10

Renaming statement D.44478 = dtls_ok (session);

Renaming statement if (D.44478 != 0)



Renaming block #11

Renaming statement D.44481 = smh->session;

Renaming statement D.44482 = D.44481->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.44482, "webrtc_enable_dtls", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #12

Renaming statement D.44485 = switch_false (tmp);

Renaming statement if (D.44485 != 0)



Renaming block #13

Renaming statement D.44481 = smh->session;

Renaming statement D.44482 = D.44481->channel;

Renaming statement switch_channel_clear_flag (D.44482, 111);

Renaming statement D.44481 = smh->session;

Renaming statement D.44482 = D.44481->channel;

Renaming statement switch_channel_clear_flag (D.44482, 109);



Renaming block #14

Renaming statement switch_core_session_parse_crypto_prefs (session);

Renaming statement clear_pmaps (a_engine);

Renaming statement clear_pmaps (v_engine);

Renaming statement if (proceed != 0B)



Renaming block #15

Renaming statement *proceed = 1;



Renaming block #16

Renaming statement D.44490 = switch_media_handle_test_media_flag (smh, 3);

Renaming statement greedy = D.44490 != 0;

Renaming statement D.44491 = switch_media_handle_test_media_flag (smh, 4);

Renaming statement scrooge = D.44491 != 0;

Renaming statement val = switch_channel_get_variable_dup (channel, "rtp_codec_negotiation", 1, -1);

Renaming statement if (val != 0B)



Renaming block #17

Renaming statement D.44494 = strcasecmp (val, "generous");

Renaming statement if (D.44494 == 0)



Renaming block #18

Renaming statement greedy = 0;

Renaming statement scrooge = 0;



Renaming block #19

Renaming statement D.44498 = strcasecmp (val, "greedy");

Renaming statement if (D.44498 == 0)



Renaming block #20

Renaming statement greedy = 1;

Renaming statement scrooge = 0;



Renaming block #21

Renaming statement D.44502 = strcasecmp (val, "scrooge");

Renaming statement if (D.44502 == 0)



Renaming block #22

Renaming statement scrooge = 1;

Renaming statement greedy = 1;



Renaming block #23

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session, 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val);



Renaming block #24

Renaming statement D.44506 = sdp->sdp_origin;

Renaming statement D.44507 = D.44506->o_username;

Renaming statement D.44508 = switch_core_perform_session_strdup (session, D.44507, "src/switch_core_media.c", &__func__, 2973);

Renaming statement smh->origin = D.44508;

Renaming statement D.44509 = smh->origin;

Renaming statement if (D.44509 != 0B)



Renaming block #25

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44512 = D.44471->auto_rtp_bugs;

Renaming statement D.44513 = (int) D.44512;

Renaming statement D.44514 = D.44513 & 1;

Renaming statement D.44515 = (_Bool) D.44514;

Renaming statement if (D.44515 != 0)



Renaming block #26

Renaming statement D.44509 = smh->origin;

Renaming statement D.44518 = strstr (D.44509, "CiscoSystemsSIP-GW-UserAgent");

Renaming statement if (D.44518 != 0B)



Renaming block #27

Renaming statement D.44521 = a_engine->rtp_bugs;

Renaming statement D.44522 = D.44521 | 1;

Renaming statement a_engine->rtp_bugs = D.44522;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session, 7, "Activate Buggy RFC2833 Mode!\n");



Renaming block #28

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44512 = D.44471->auto_rtp_bugs;

Renaming statement D.44523 = D.44512 & 2;

Renaming statement if (D.44523 != 0)



Renaming block #29

Renaming statement D.44509 = smh->origin;

Renaming statement D.44526 = strstr (D.44509, "Sonus_UAC");

Renaming statement if (D.44526 != 0B)



Renaming block #30

Renaming statement D.44521 = a_engine->rtp_bugs;

Renaming statement D.44529 = D.44521 | 2;

Renaming statement a_engine->rtp_bugs = D.44529;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session, 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");



Renaming block #31

Renaming statement D.44530 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.44530, "rtp_liberal_dtmf", 1, -1);

Renaming statement if (val != 0B)



Renaming block #32

Renaming statement D.44533 = switch_true (val);

Renaming statement if (D.44533 != 0)



Renaming block #33

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_flag_value (D.44530, 93, 1);



Renaming block #34

Renaming statement m = sdp->sdp_media;

Renaming statement if (m != 0B)



Renaming block #35

Renaming statement D.44540 = BIT_FIELD_REF <*m, 8, 544>;

Renaming statement D.44541 = D.44540 & 6;

Renaming statement D.44542 = D.44541 == 2;

Renaming statement D.44543 = D.44541 == 0;

Renaming statement D.44544 = D.44542 || D.44543;

Renaming statement if (D.44544 != 0)



Renaming block #36

Renaming statement D.44546 = m->m_connections;

Renaming statement if (D.44546 != 0B)



Renaming block #37

Renaming statement D.44546 = m->m_connections;

Renaming statement D.44548 = D.44546->c_address;

Renaming statement if (D.44548 != 0B)



Renaming block #38

Renaming statement __s2_len = 7;

Renaming statement if (__s2_len <= 3)



Renaming block #39

Renaming statement D.44546 = m->m_connections;

Renaming statement __s1 = D.44546->c_address;

Renaming statement D.44553 = *__s1;

Renaming statement D.44554 = (int) D.44553;

Renaming statement D.44555 = "0.0.0.0";

Renaming statement D.44556 = MEM[(const unsigned char *)D.44555];

Renaming statement D.44557 = (int) D.44556;

Renaming statement __result = D.44554 - D.44557;

Renaming statement D.44558 = __s2_len != 0;

Renaming statement D.44559 = __result == 0;

Renaming statement D.44560 = D.44558 && D.44559;

Renaming statement if (D.44560 != 0)



Renaming block #40

Renaming statement D.44563 = __s1 + 1;

Renaming statement D.44564 = *D.44563;

Renaming statement D.44565 = (int) D.44564;

Renaming statement D.44566 = &"0.0.0.0"[1];

Renaming statement D.44567 = MEM[(const unsigned char *)D.44566];

Renaming statement D.44568 = (int) D.44567;

Renaming statement __result = D.44565 - D.44568;

Renaming statement D.44569 = __s2_len > 1;

Renaming statement D.44559 = __result == 0;

Renaming statement D.44570 = D.44569 && D.44559;

Renaming statement if (D.44570 != 0)



Renaming block #41

Renaming statement D.44573 = __s1 + 2;

Renaming statement D.44574 = *D.44573;

Renaming statement D.44575 = (int) D.44574;

Renaming statement D.44576 = &"0.0.0.0"[2];

Renaming statement D.44577 = MEM[(const unsigned char *)D.44576];

Renaming statement D.44578 = (int) D.44577;

Renaming statement __result = D.44575 - D.44578;

Renaming statement D.44579 = __s2_len > 2;

Renaming statement D.44559 = __result == 0;

Renaming statement D.44580 = D.44579 && D.44559;

Renaming statement if (D.44580 != 0)



Renaming block #42

Renaming statement D.44583 = __s1 + 3;

Renaming statement D.44584 = *D.44583;

Renaming statement D.44585 = (int) D.44584;

Renaming statement D.44586 = &"0.0.0.0"[3];

Renaming statement D.44587 = MEM[(const unsigned char *)D.44586];

Renaming statement D.44588 = (int) D.44587;

Renaming statement __result = D.44585 - D.44588;



Renaming block #43

Renaming statement D.39007 = __result;

Renaming statement iftmp.88 = D.39007;



Renaming block #44

Renaming statement D.44546 = m->m_connections;

Renaming statement D.44548 = D.44546->c_address;

Renaming statement iftmp.88 = __builtin_strcmp (D.44548, "0.0.0.0");



Renaming block #45

Renaming statement D.39008 = iftmp.88;

Renaming statement if (D.39008 == 0)



Renaming block #46

Renaming statement sendonly = 2;



Renaming block #47

Renaming statement attr = sdp->sdp_attributes;



Renaming block #66

Renaming statement if (attr != 0B)



Renaming block #48

Renaming statement D.44590 = attr->a_name;

Renaming statement D.44591 = _zstr (D.44590);

Renaming statement if (D.44591 != 0)



Renaming block #49



Renaming block #50

Renaming statement D.44590 = attr->a_name;

Renaming statement D.44594 = strcasecmp (D.44590, "sendonly");

Renaming statement if (D.44594 == 0)



Renaming block #51

Renaming statement sendonly = 1;

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "media_audio_mode", "recvonly", 1);



Renaming block #52

Renaming statement D.44590 = attr->a_name;

Renaming statement D.44598 = strcasecmp (D.44590, "inactive");

Renaming statement if (D.44598 == 0)



Renaming block #53

Renaming statement sendonly = 1;

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "media_audio_mode", "inactive", 1);



Renaming block #54

Renaming statement D.44590 = attr->a_name;

Renaming statement D.44602 = strcasecmp (D.44590, "recvonly");

Renaming statement if (D.44602 == 0)



Renaming block #55

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "media_audio_mode", "sendonly", 1);

Renaming statement recvonly = 1;

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement D.44606 = switch_rtp_ready (D.44605);

Renaming statement if (D.44606 != 0)



Renaming block #56

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement switch_rtp_set_max_missed_packets (D.44605, 0);

Renaming statement a_engine->max_missed_hold_packets = 0;

Renaming statement a_engine->max_missed_packets = 0;



Renaming block #57

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "rtp_timeout_sec", "0", 1);

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "rtp_hold_timeout_sec", "0", 1);



Renaming block #58

Renaming statement if (sendonly <= 1)



Renaming block #59

Renaming statement D.44590 = attr->a_name;

Renaming statement D.44614 = strcasecmp (D.44590, "sendrecv");

Renaming statement if (D.44614 == 0)



Renaming block #60

Renaming statement sendonly = 0;



Renaming block #61

Renaming statement D.44590 = attr->a_name;

Renaming statement D.44616 = strcasecmp (D.44590, "ptime");

Renaming statement if (D.44616 == 0)



Renaming block #62

Renaming statement D.44619 = attr->a_value;

Renaming statement dptime = atoi (D.44619);



Renaming block #63

Renaming statement D.44590 = attr->a_name;

Renaming statement D.44621 = strcasecmp (D.44590, "maxptime");

Renaming statement if (D.44621 == 0)



Renaming block #64

Renaming statement D.44619 = attr->a_value;

Renaming statement dmaxptime = atoi (D.44619);



Renaming block #65

Renaming statement attr = attr->a_next;



Renaming block #67

Renaming statement D.44624 = sendonly != 1;

Renaming statement D.44625 = recvonly != 1;

Renaming statement D.44626 = D.44624 && D.44625;

Renaming statement if (D.44626 != 0)



Renaming block #68

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "media_audio_mode", 0B, 1);



Renaming block #69

Renaming statement D.44631 = switch_media_handle_test_media_flag (smh, 5);

Renaming statement if (D.44631 == 0)



Renaming block #70

Renaming statement D.44530 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.44530, "rtp_disable_hold", 1, -1);

Renaming statement if (val == 0B)



Renaming block #71

Renaming statement D.44635 = switch_true (val);

Renaming statement if (D.44635 == 0)



Renaming block #72

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44636 = D.44471->hold_laps;

Renaming statement if (D.44636 == 0)



Renaming block #73

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44636 = D.44471->hold_laps;

Renaming statement D.44639 = D.44636 + 1;

Renaming statement D.44471->hold_laps = D.44639;

Renaming statement D.44640 = switch_core_media_toggle_hold (session, sendonly);

Renaming statement if (D.44640 != 0)



Renaming block #74

Renaming statement reneg = switch_media_handle_test_media_flag (smh, 6);

Renaming statement D.44530 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.44530, "rtp_renegotiate_codec_on_hold", 1, -1);

Renaming statement if (val != 0B)



Renaming block #75

Renaming statement reneg = switch_true (val);



Renaming block #76

Renaming statement if (reneg != 0)



Renaming block #77

Renaming statement reneg = switch_media_handle_test_media_flag (smh, 7);

Renaming statement D.44530 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.44530, "rtp_renegotiate_codec_on_reinvite", 1, -1);

Renaming statement if (val != 0B)



Renaming block #78

Renaming statement reneg = switch_true (val);



Renaming block #79

Renaming statement D.44649 = session->bugs;

Renaming statement if (D.44649 != 0B)



Renaming block #80

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session, 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");

Renaming statement reneg = 0;



Renaming block #81

Renaming statement if (reneg == 0)



Renaming block #82

Renaming statement D.44655 = smh->num_negotiated_codecs;

Renaming statement if (D.44655 != 0)



Renaming block #83

Renaming statement codec_array = &smh->negotiated_codecs;

Renaming statement total_codecs = smh->num_negotiated_codecs;



Renaming block #84

Renaming statement if (reneg != 0)



Renaming block #85

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->num_codecs = 0;

Renaming statement switch_core_media_prepare_codecs (session, 0);

Renaming statement codec_array = &smh->codecs;

Renaming statement D.44471 = smh->mparams;

Renaming statement total_codecs = D.44471->num_codecs;



Renaming block #86

Renaming statement D.44661 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp);

Renaming statement if (D.44661 != 0B)



Renaming block #87

Renaming statement D.44663 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp);

Renaming statement if (D.44663 != 0B)



Renaming block #88

Renaming statement D.44665 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp);

Renaming statement if (D.44665 != 0B)



Renaming block #89

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "t38_broken_boolean", "true", 1);



Renaming block #90

Renaming statement switch_core_media_find_zrtp_hash (session, sdp);

Renaming statement switch_core_media_pass_zrtp_hash (session);

Renaming statement check_ice (smh, 0, sdp, 0B);

Renaming statement check_ice (smh, 1, sdp, 0B);

Renaming statement m = sdp->sdp_media;



Renaming block #398

Renaming statement if (m != 0B)



Renaming block #91

Renaming statement ptime = dptime;

Renaming statement maxptime = dmaxptime;

Renaming statement D.44666 = m->m_proto;

Renaming statement if (D.44666 == 261)



Renaming block #92

Renaming statement got_webrtc = got_webrtc + 1;

Renaming statement switch_core_session_set_ice (session);



Renaming block #93

Renaming statement D.44669 = m->m_proto_name;

Renaming statement if (D.44669 != 0B)



Renaming block #94

Renaming statement D.44669 = m->m_proto_name;

Renaming statement D.44672 = strcasecmp (D.44669, "UDP/TLS/RTP/SAVPF");

Renaming statement if (D.44672 == 0)



Renaming block #95

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_flag_value (D.44530, 107, 1);



Renaming block #96

Renaming statement D.44675 = m->m_proto;

Renaming statement D.44676 = D.44675 == 257;

Renaming statement D.44677 = D.44675 == 261;

Renaming statement D.44678 = D.44676 || D.44677;

Renaming statement if (D.44678 != 0)



Renaming block #97

Renaming statement D.44681 = m->m_type;

Renaming statement if (D.44681 == 2)



Renaming block #98

Renaming statement got_savp = got_savp + 1;



Renaming block #99

Renaming statement got_video_savp = got_video_savp + 1;



Renaming block #100

Renaming statement D.44666 = m->m_proto;

Renaming statement if (D.44666 == 256)



Renaming block #101

Renaming statement D.44681 = m->m_type;

Renaming statement if (D.44681 == 2)



Renaming block #102

Renaming statement got_avp = got_avp + 1;



Renaming block #103

Renaming statement got_video_avp = got_video_avp + 1;



Renaming block #104

Renaming statement D.44666 = m->m_proto;

Renaming statement if (D.44666 == 258)



Renaming block #105

Renaming statement got_udptl = got_udptl + 1;



Renaming block #106

Renaming statement if (got_udptl != 0)



Renaming block #107

Renaming statement D.44681 = m->m_type;

Renaming statement if (D.44681 == 8)



Renaming block #108

Renaming statement D.44697 = m->m_port;

Renaming statement if (D.44697 != 0)



Renaming block #109

Renaming statement t38_options = switch_core_media_process_udptl (session, sdp, m);

Renaming statement D.44530 = session->channel;

Renaming statement D.44699 = switch_channel_test_app_flag_key ("T38", D.44530, 16);

Renaming statement if (D.44699 != 0)



Renaming block #110

Renaming statement match = 1;



Renaming block #111

Renaming statement D.44702 = switch_channel_get_variable_dup (channel, "refuse_t38", 1, -1);

Renaming statement D.44703 = switch_true (D.44702);

Renaming statement if (D.44703 != 0)



Renaming block #112

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_clear_app_flag_key ("T38", D.44530, 2);

Renaming statement match = 0;



Renaming block #113

Renaming statement var = switch_channel_get_variable_dup (channel, "t38_passthru", 1, -1);

Renaming statement D.44481 = smh->session;

Renaming statement D.44482 = D.44481->channel;

Renaming statement D.44706 = switch_channel_test_flag (D.44482, 101);

Renaming statement pass = (int) D.44706;

Renaming statement D.44530 = session->channel;

Renaming statement D.44707 = switch_channel_test_app_flag_key ("T38", D.44530, 2);

Renaming statement if (D.44707 != 0)



Renaming block #114

Renaming statement if (proceed != 0B)



Renaming block #115

Renaming statement *proceed = 0;



Renaming block #116

Renaming statement if (var != 0B)



Renaming block #117

Renaming statement pass = switch_true (var);

Renaming statement if (pass == 0)



Renaming block #118

Renaming statement D.44716 = strcasecmp (var, "once");

Renaming statement if (D.44716 == 0)



Renaming block #119

Renaming statement pass = 2;



Renaming block #120

Renaming statement if (pass == 2)



Renaming block #121

Renaming statement D.44481 = smh->session;

Renaming statement D.44482 = D.44481->channel;

Renaming statement D.44723 = switch_channel_test_flag (D.44482, 101);

Renaming statement if (D.44723 != 0)



Renaming block #122

Renaming statement D.44530 = session->channel;

Renaming statement D.44724 = switch_channel_test_flag (D.44530, 103);

Renaming statement if (D.44724 == 0)



Renaming block #123

Renaming statement D.44530 = session->channel;

Renaming statement D.44726 = switch_channel_test_flag (D.44530, 15);

Renaming statement if (D.44726 != 0)



Renaming block #124

Renaming statement D.44530 = session->channel;

Renaming statement D.44728 = switch_channel_test_flag (D.44530, 29);

Renaming statement if (D.44728 != 0)



Renaming block #125

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement D.44730 = switch_rtp_ready (D.44605);

Renaming statement if (D.44730 == 0)



Renaming block #126

Renaming statement pass = 0;



Renaming block #127

Renaming statement if (pass != 0)



Renaming block #128

Renaming statement D.44733 = switch_core_session_perform_get_partner (session, &other_session, "src/switch_core_media.c", &__func__, 3161);

Renaming statement if (D.44733 == 0)



Renaming block #129

Renaming statement other_session.89 = other_session;

Renaming statement other_channel = switch_core_session_get_channel (other_session.89);

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement remote_host = switch_rtp_get_remote_host (D.44605);

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement remote_port = switch_rtp_get_remote_port (D.44605);

Renaming statement D.44737 = switch_channel_test_flag (other_channel, 1);

Renaming statement if (D.44737 == 0)



Renaming block #130

Renaming statement D.44530 = session->channel;

Renaming statement D.44740 = switch_channel_get_name (D.44530);

Renaming statement D.44741 = switch_channel_get_name (other_channel);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session, 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740, D.44741);

Renaming statement other_session.89 = other_session;

Renaming statement switch_core_session_rwunlock (other_session.89);

Renaming statement pass = 0;

Renaming statement match = 0;



Renaming block #131

Renaming statement D.44530 = session->channel;

Renaming statement D.44742 = switch_channel_get_variable_dup (D.44530, "t38_broken_boolean", 1, -1);

Renaming statement D.44743 = switch_true (D.44742);

Renaming statement if (D.44743 != 0)



Renaming block #132

Renaming statement D.44530 = session->channel;

Renaming statement D.44746 = switch_channel_get_variable_dup (D.44530, "t38_pass_broken_boolean", 1, -1);

Renaming statement D.44747 = switch_true (D.44746);

Renaming statement if (D.44747 != 0)



Renaming block #133

Renaming statement switch_channel_set_variable_var_check (other_channel, "t38_broken_boolean", "true", 1);



Renaming block #134

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44751 = t38_options->remote_ip;

Renaming statement D.44752 = switch_core_perform_session_strdup (session, D.44751, "src/switch_core_media.c", &__func__, 3186);

Renaming statement D.44750->remote_sdp_ip = D.44752;

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44753 = t38_options->remote_port;

Renaming statement D.44750->remote_sdp_port = D.44753;

Renaming statement D.44756 = remote_host != 0B;

Renaming statement D.44757 = remote_port != 0;

Renaming statement D.44758 = D.44756 && D.44757;

Renaming statement if (D.44758 != 0)



Renaming block #135

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44760 = D.44750->remote_sdp_ip;

Renaming statement D.39032 = __builtin_strcmp (remote_host, D.44760);

Renaming statement if (D.39032 == 0)



Renaming block #136

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44762 = D.44750->remote_sdp_port;

Renaming statement if (D.44762 == remote_port)



Renaming block #137

Renaming statement D.44530 = session->channel;

Renaming statement D.44764 = switch_channel_get_name (D.44530);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session, 7, "Audio params are unchanged for %s.\n", D.44764);



Renaming block #138

Renaming statement D.44530 = session->channel;

Renaming statement D.44765 = switch_channel_get_name (D.44530);

Renaming statement D.44766 = (int) remote_port;

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44760 = D.44750->remote_sdp_ip;

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44762 = D.44750->remote_sdp_port;

Renaming statement D.44767 = (int) D.44762;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session, 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765, remote_host, D.44766, D.44760, D.44767);

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44762 = D.44750->remote_sdp_port;

Renaming statement D.44767 = (int) D.44762;

Renaming statement switch_snprintf (&tmp, 32, "%d", D.44767);

Renaming statement D.44530 = session->channel;

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44760 = D.44750->remote_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.44530, "remote_media_ip", D.44760, 1);

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "remote_media_port", &tmp, 1);

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44760 = D.44750->remote_sdp_ip;

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44762 = D.44750->remote_sdp_port;

Renaming statement D.44768 = switch_rtp_set_remote_address (D.44605, D.44760, D.44762, 0, 1, &err);

Renaming statement if (D.44768 != 0)



Renaming block #139

Renaming statement err.90 = err;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session, 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90);

Renaming statement switch_channel_perform_hangup (channel, "src/switch_core_media.c", &__func__, 3206, 88);



Renaming block #140

Renaming statement other_session.89 = other_session;

Renaming statement switch_core_media_copy_t38_options (t38_options, other_session.89);

Renaming statement D.44481 = smh->session;

Renaming statement D.44482 = D.44481->channel;

Renaming statement switch_channel_set_flag_value (D.44482, 101, 1);

Renaming statement other_session.89 = other_session;

Renaming statement D.44772 = other_session.89->channel;

Renaming statement switch_channel_set_flag_value (D.44772, 101, 1);

Renaming statement other_session.89 = other_session;

Renaming statement msg = switch_core_perform_session_alloc (other_session.89, 108, "src/switch_core_media.c", &__func__, 3218);

Renaming statement msg->message_id = 21;

Renaming statement msg->from = "src/switch_core_media.c";

Renaming statement other_session.89 = other_session;

Renaming statement D.44773 = switch_core_perform_session_strdup (other_session.89, r_sdp, "src/switch_core_media.c", &__func__, 3221);

Renaming statement msg->string_arg = D.44773;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session, 7, "Passing T38 req to other leg.\n%s\n", r_sdp);

Renaming statement other_session.89 = other_session;

Renaming statement switch_core_session_queue_message (other_session.89, msg);

Renaming statement other_session.89 = other_session;

Renaming statement switch_core_session_rwunlock (other_session.89);



Renaming block #141

Renaming statement match = 1;



Renaming block #142

Renaming statement D.44681 = m->m_type;

Renaming statement if (D.44681 == 2)



Renaming block #143

Renaming statement D.44697 = m->m_port;

Renaming statement D.44777 = D.44697 != 0;

Renaming statement D.44778 = got_audio == 0;

Renaming statement D.44779 = D.44777 && D.44778;

Renaming statement if (D.44779 != 0)



Renaming block #144

Renaming statement D.44781 = switch_rtp_has_dtls ();

Renaming statement if (D.44781 != 0)



Renaming block #145

Renaming statement D.44784 = dtls_ok (session);

Renaming statement if (D.44784 != 0)



Renaming block #146

Renaming statement attr = m->m_attributes;



Renaming block #151

Renaming statement if (attr != 0B)



Renaming block #147

Renaming statement D.44590 = attr->a_name;

Renaming statement D.44787 = strcasecmp (D.44590, "fingerprint");

Renaming statement if (D.44787 == 0)



Renaming block #148

Renaming statement D.44619 = attr->a_value;

Renaming statement D.44790 = _zstr (D.44619);

Renaming statement if (D.44790 == 0)



Renaming block #149

Renaming statement got_crypto = 1;



Renaming block #150

Renaming statement attr = attr->a_next;



Renaming block #152

Renaming statement attr = m->m_attributes;



Renaming block #172

Renaming statement if (attr != 0B)



Renaming block #153

Renaming statement D.44590 = attr->a_name;

Renaming statement D.44795 = strcasecmp (D.44590, "rtcp");

Renaming statement if (D.44795 == 0)



Renaming block #154

Renaming statement D.44619 = attr->a_value;

Renaming statement if (D.44619 != 0B)



Renaming block #155

Renaming statement D.44530 = session->channel;

Renaming statement D.44619 = attr->a_value;

Renaming statement switch_channel_set_variable_var_check (D.44530, "rtp_remote_audio_rtcp_port", D.44619, 1);

Renaming statement D.44619 = attr->a_value;

Renaming statement D.44798 = atoi (D.44619);

Renaming statement D.44799 = (short unsigned int) D.44798;

Renaming statement a_engine->remote_rtcp_port = D.44799;

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44800 = D.44471->rtcp_audio_interval_msec;

Renaming statement if (D.44800 == 0B)



Renaming block #156

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->rtcp_audio_interval_msec = "5000";



Renaming block #157

Renaming statement D.44590 = attr->a_name;

Renaming statement D.44805 = strcasecmp (D.44590, "ptime");

Renaming statement if (D.44805 == 0)



Renaming block #158

Renaming statement D.44619 = attr->a_value;

Renaming statement if (D.44619 != 0B)



Renaming block #159

Renaming statement D.44619 = attr->a_value;

Renaming statement ptime = atoi (D.44619);



Renaming block #160

Renaming statement D.44590 = attr->a_name;

Renaming statement D.44810 = strcasecmp (D.44590, "maxptime");

Renaming statement if (D.44810 == 0)



Renaming block #161

Renaming statement D.44619 = attr->a_value;

Renaming statement if (D.44619 != 0B)



Renaming block #162

Renaming statement D.44619 = attr->a_value;

Renaming statement maxptime = atoi (D.44619);



Renaming block #163

Renaming statement if (got_crypto <= 0)



Renaming block #164

Renaming statement D.44590 = attr->a_name;

Renaming statement D.44815 = strcasecmp (D.44590, "crypto");

Renaming statement if (D.44815 == 0)



Renaming block #165

Renaming statement D.44619 = attr->a_value;

Renaming statement D.44818 = _zstr (D.44619);

Renaming statement if (D.44818 == 0)



Renaming block #166

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44821 = D.44471->ndlb;

Renaming statement D.44822 = D.44821 & 4;

Renaming statement if (D.44822 == 0)



Renaming block #167

Renaming statement D.44530 = session->channel;

Renaming statement D.44825 = switch_channel_get_variable_dup (D.44530, "rtp_allow_crypto_in_avp", 1, -1);

Renaming statement D.44826 = switch_true (D.44825);

Renaming statement if (D.44826 == 0)



Renaming block #168

Renaming statement D.44666 = m->m_proto;

Renaming statement D.44829 = D.44666 != 257;

Renaming statement D.44830 = got_webrtc == 0;

Renaming statement D.44831 = D.44829 && D.44830;

Renaming statement if (D.44831 != 0)



Renaming block #169

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session, 3, "a=crypto in RTP/AVP, refer to rfc3711\n");

Renaming statement match = 0;



Renaming block #170

Renaming statement crypto = attr->a_value;

Renaming statement crypto_tag = atoi (crypto);

Renaming statement got_crypto = switch_core_session_check_incoming_crypto (session, "rtp_has_crypto", 0, crypto, crypto_tag, sdp_type);



Renaming block #171

Renaming statement attr = attr->a_next;



Renaming block #173

Renaming statement D.44834 = got_crypto == -1;

Renaming statement D.44835 = got_savp != 0;

Renaming statement D.44836 = D.44834 && D.44835;

Renaming statement if (D.44836 != 0)



Renaming block #174

Renaming statement D.44839 = got_avp | got_webrtc;

Renaming statement if (D.44839 == 0)



Renaming block #175

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session, 4, "Declining invite with only SAVP because secure media is administratively disabled\n");

Renaming statement match = 0;



Renaming block #176

Renaming statement connection = sdp->sdp_connection;

Renaming statement D.44546 = m->m_connections;

Renaming statement if (D.44546 != 0B)



Renaming block #177

Renaming statement connection = m->m_connections;



Renaming block #178

Renaming statement if (connection == 0B)



Renaming block #179

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session, 3, "Cannot find a c= line in the sdp at media or session level!\n");

Renaming statement match = 0;



Renaming block #180

Renaming statement x = 0;

Renaming statement map = m->m_rtpmaps;



Renaming block #256

Renaming statement if (map != 0B)



Renaming block #181

Renaming statement map_bit_rate = 0;

Renaming statement rm_encoding = map->rm_encoding;

Renaming statement if (rm_encoding == 0B)



Renaming block #182

Renaming statement rm_encoding = "";



Renaming block #183

Renaming statement D.44848 = strcasecmp (rm_encoding, "telephone-event");

Renaming statement if (D.44848 == 0)



Renaming block #184

Renaming statement if (best_te == 0)



Renaming block #185

Renaming statement D.44854 = map->rm_rate;

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44855 = D.44750->rm_rate;

Renaming statement if (D.44854 == D.44855)



Renaming block #186

Renaming statement D.44856 = map->rm_pt;

Renaming statement best_te = (switch_payload_t) D.44856;

Renaming statement D.44857 = (int) best_te;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session, 7, "Set telephone-event payload to %u\n", D.44857);



Renaming block #187



Renaming block #188

Renaming statement D.44858 = switch_media_handle_test_media_flag (smh, 9);

Renaming statement if (D.44858 == 0)



Renaming block #189

Renaming statement if (cng_pt == 0)



Renaming block #190

Renaming statement D.44863 = strcasecmp (rm_encoding, "CN");

Renaming statement if (D.44863 == 0)



Renaming block #191

Renaming statement D.44856 = map->rm_pt;

Renaming statement cng_pt = (switch_payload_t) D.44856;

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement if (D.44605 != 0B)



Renaming block #192

Renaming statement D.44868 = (int) cng_pt;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session, 7, "Set comfort noise payload to %u\n", D.44868);

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44869 = D.44471->cng_pt;

Renaming statement switch_rtp_set_cng_pt (D.44605, D.44869);



Renaming block #193



Renaming block #194

Renaming statement D.44870 = x < skip;

Renaming statement x = x + 1;

Renaming statement if (D.44870 != 0)



Renaming block #195



Renaming block #196

Renaming statement if (match != 0)



Renaming block #197



Renaming block #198

Renaming statement codec_ms = ptime;

Renaming statement if (maxptime != 0)



Renaming block #199

Renaming statement D.44877 = codec_ms == 0;

Renaming statement D.44878 = codec_ms > maxptime;

Renaming statement D.44879 = D.44877 || D.44878;

Renaming statement if (D.44879 != 0)



Renaming block #200

Renaming statement codec_ms = maxptime;



Renaming block #201

Renaming statement if (codec_ms == 0)



Renaming block #202

Renaming statement D.44856 = map->rm_pt;

Renaming statement D.44884 = (uint32_t) D.44856;

Renaming statement D.44885 = switch_default_ptime (rm_encoding, D.44884);

Renaming statement codec_ms = (int) D.44885;



Renaming block #203

Renaming statement D.44856 = map->rm_pt;

Renaming statement D.44886 = (unsigned char) D.44856;

Renaming statement map_bit_rate = switch_known_bitrate (D.44886);

Renaming statement if (ptime == 0)



Renaming block #204

Renaming statement D.44889 = map->rm_encoding;

Renaming statement D.44890 = strcasecmp (D.44889, "g723");

Renaming statement if (D.44890 == 0)



Renaming block #205

Renaming statement codec_ms = 33;



Renaming block #206

Renaming statement remote_codec_rate = map->rm_rate;

Renaming statement fmtp_remote_codec_rate = 0;

Renaming statement D.44893 = map->rm_fmtp;

Renaming statement D.44894 = _zstr (D.44893);

Renaming statement if (D.44894 != 0)



Renaming block #207

Renaming statement D.44889 = map->rm_encoding;

Renaming statement D.44897 = strcasecmp (D.44889, "ilbc");

Renaming statement if (D.44897 == 0)



Renaming block #208

Renaming statement codec_ms = 32;

Renaming statement map_bit_rate = 13332;



Renaming block #209

Renaming statement D.44889 = map->rm_encoding;

Renaming statement D.44901 = strcasecmp (D.44889, "isac");

Renaming statement if (D.44901 == 0)



Renaming block #210

Renaming statement codec_ms = 39;

Renaming statement map_bit_rate = 32001;



Renaming block #211

Renaming statement map_bit_rate = 32099;



Renaming block #212

Renaming statement D.44889 = map->rm_encoding;

Renaming statement D.44893 = map->rm_fmtp;

Renaming statement D.44854 = map->rm_rate;

Renaming statement D.44906 = switch_core_codec_parse_fmtp (D.44889, D.44893, D.44854, &codec_fmtp);

Renaming statement if (D.44906 == 0)



Renaming block #213

Renaming statement D.44909 = codec_fmtp.bits_per_second;

Renaming statement if (D.44909 != 0)



Renaming block #214

Renaming statement D.44909 = codec_fmtp.bits_per_second;

Renaming statement map_bit_rate = (uint32_t) D.44909;



Renaming block #215

Renaming statement D.44912 = codec_fmtp.microseconds_per_packet;

Renaming statement if (D.44912 != 0)



Renaming block #216

Renaming statement D.44912 = codec_fmtp.microseconds_per_packet;

Renaming statement codec_ms = D.44912 / 1000;



Renaming block #217

Renaming statement D.44915 = codec_fmtp.actual_samples_per_second;

Renaming statement if (D.44915 != 0)



Renaming block #218

Renaming statement fmtp_remote_codec_rate = codec_fmtp.actual_samples_per_second;



Renaming block #219

Renaming statement i = 0;



Renaming block #253

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44997 = D.44471->num_codecs;

Renaming statement D.44998 = D.44997 > i;

Renaming statement D.44999 = i < total_codecs;

Renaming statement D.45000 = D.44998 && D.44999;

Renaming statement if (D.45000 != 0)



Renaming block #220

Renaming statement i.91 = (unsigned int) i;

Renaming statement D.44919 = i.91 * 4;

Renaming statement D.44920 = codec_array + D.44919;

Renaming statement imp = *D.44920;

Renaming statement D.44921 = imp->bits_per_second;

Renaming statement bit_rate = (uint32_t) D.44921;

Renaming statement codec_rate = imp->samples_per_second;

Renaming statement D.44922 = imp->codec_type;

Renaming statement if (D.44922 != 0)



Renaming block #221



Renaming block #222

Renaming statement D.44856 = map->rm_pt;

Renaming statement D.44925 = (int) D.44856;

Renaming statement remote_codec_rate.92 = (int) remote_codec_rate;

Renaming statement D.44927 = imp->iananame;

Renaming statement D.44928 = imp->ianacode;

Renaming statement D.44929 = (int) D.44928;

Renaming statement D.44930 = imp->microseconds_per_packet;

Renaming statement D.44931 = D.44930 / 1000;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session, 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding, D.44925, remote_codec_rate.92, codec_ms, map_bit_rate, D.44927, D.44929, codec_rate, D.44931, bit_rate);

Renaming statement D.44889 = map->rm_encoding;

Renaming statement D.44935 = _zstr (D.44889);

Renaming statement if (D.44935 != 0)



Renaming block #223

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44821 = D.44471->ndlb;

Renaming statement D.44937 = (int) D.44821;

Renaming statement D.44938 = D.44937 & 1;

Renaming statement D.44939 = (_Bool) D.44938;

Renaming statement if (D.44939 != 0)



Renaming block #224

Renaming statement D.44856 = map->rm_pt;

Renaming statement D.44925 = (int) D.44856;

Renaming statement if (D.44925 <= 95)



Renaming block #225

Renaming statement D.44856 = map->rm_pt;

Renaming statement D.44925 = (int) D.44856;

Renaming statement D.44928 = imp->ianacode;

Renaming statement D.44929 = (int) D.44928;

Renaming statement match = D.44925 == D.44929;



Renaming block #226

Renaming statement D.44927 = imp->iananame;

Renaming statement D.44945 = strcasecmp (rm_encoding, D.44927);

Renaming statement if (D.44945 == 0)



Renaming block #227

Renaming statement if (remote_codec_rate == codec_rate)



Renaming block #228

Renaming statement D.44948 = imp->actual_samples_per_second;

Renaming statement if (D.44948 == fmtp_remote_codec_rate)



Renaming block #229

Renaming statement iftmp.93 = 1;



Renaming block #230

Renaming statement iftmp.93 = 0;



Renaming block #231

Renaming statement match = (uint8_t) iftmp.93;

Renaming statement if (fmtp_remote_codec_rate != 0)



Renaming block #232

Renaming statement remote_codec_rate = fmtp_remote_codec_rate;



Renaming block #233

Renaming statement D.44951 = match != 0;

Renaming statement D.44952 = bit_rate != 0;

Renaming statement D.44953 = D.44951 && D.44952;

Renaming statement if (D.44953 != 0)



Renaming block #234

Renaming statement D.44956 = map_bit_rate != 0;

Renaming statement D.44957 = map_bit_rate != bit_rate;

Renaming statement D.44958 = D.44956 && D.44957;

Renaming statement if (D.44958 != 0)



Renaming block #235

Renaming statement D.44889 = map->rm_encoding;

Renaming statement D.44961 = strcasecmp (D.44889, "ilbc");

Renaming statement if (D.44961 != 0)



Renaming block #236

Renaming statement D.44889 = map->rm_encoding;

Renaming statement D.44964 = strcasecmp (D.44889, "isac");

Renaming statement if (D.44964 != 0)



Renaming block #237

Renaming statement match = 0;



Renaming block #238

Renaming statement D.44951 = match != 0;

Renaming statement D.44969 = remote_codec_rate != 0;

Renaming statement D.44970 = D.44951 && D.44969;

Renaming statement if (D.44970 != 0)



Renaming block #239

Renaming statement D.44973 = codec_rate != 0;

Renaming statement D.44974 = remote_codec_rate != codec_rate;

Renaming statement D.44975 = D.44973 && D.44974;

Renaming statement if (D.44975 != 0)



Renaming block #240

Renaming statement D.44889 = map->rm_encoding;

Renaming statement D.44978 = strcasecmp (D.44889, "pcma");

Renaming statement if (D.44978 == 0)



Renaming block #241

Renaming statement D.44889 = map->rm_encoding;

Renaming statement D.44980 = strcasecmp (D.44889, "pcmu");

Renaming statement if (D.44980 == 0)



Renaming block #242

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session, 7, "sampling rates have to match for G.711\n");

Renaming statement match = 0;



Renaming block #243

Renaming statement if (match != 0)



Renaming block #244

Renaming statement if (scrooge != 0)



Renaming block #245

Renaming statement D.44927 = imp->iananame;

Renaming statement D.44985 = imp->samples_per_second;

Renaming statement D.44930 = imp->microseconds_per_packet;

Renaming statement D.44931 = D.44930 / 1000;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session, 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44927, D.44985, D.44931);



Renaming block #246

Renaming statement D.44990 = ptime != 0;

Renaming statement D.44991 = codec_ms != 0;

Renaming statement D.44992 = D.44990 && D.44991;

Renaming statement if (D.44992 != 0)



Renaming block #247

Renaming statement D.44994 = codec_ms * 1000;

Renaming statement D.44930 = imp->microseconds_per_packet;

Renaming statement if (D.44994 != D.44930)



Renaming block #248

Renaming statement if (remote_codec_rate != codec_rate)



Renaming block #249

Renaming statement match = 0;

Renaming statement D.44927 = imp->iananame;

Renaming statement D.44928 = imp->ianacode;

Renaming statement D.44929 = (int) D.44928;

Renaming statement D.44930 = imp->microseconds_per_packet;

Renaming statement D.44931 = D.44930 / 1000;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session, 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927, D.44929, codec_rate, D.44931, bit_rate);

Renaming statement near_matches[nm_idx].codec_idx = i;

Renaming statement remote_codec_rate.92 = (int) remote_codec_rate;

Renaming statement near_matches[nm_idx].rate = remote_codec_rate.92;

Renaming statement near_matches[nm_idx].imp = imp;

Renaming statement near_matches[nm_idx].map = map;

Renaming statement nm_idx = nm_idx + 1;



Renaming block #250

Renaming statement matches[m_idx].codec_idx = i;

Renaming statement codec_rate.94 = (int) codec_rate;

Renaming statement matches[m_idx].rate = codec_rate.94;

Renaming statement matches[m_idx].imp = imp;

Renaming statement matches[m_idx].map = map;

Renaming statement m_idx = m_idx + 1;

Renaming statement D.44927 = imp->iananame;

Renaming statement D.44928 = imp->ianacode;

Renaming statement D.44929 = (int) D.44928;

Renaming statement D.44930 = imp->microseconds_per_packet;

Renaming statement D.44931 = D.44930 / 1000;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session, 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927, D.44929, codec_rate, D.44931, bit_rate);

Renaming statement if (m_idx > 29)



Renaming block #251

Renaming statement match = 0;



Renaming block #252

Renaming statement i = i + 1;



Renaming block #254

Renaming statement if (m_idx > 29)



Renaming block #255

Renaming statement map = map->rm_next;



Renaming block #257

Renaming statement D.45002 = smh->crypto_mode;

Renaming statement D.45003 = D.45002 == 1;

Renaming statement D.45004 = got_crypto <= 0;

Renaming statement D.45005 = D.45003 && D.45004;

Renaming statement if (D.45005 != 0)



Renaming block #258

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session, 4, "Crypto not negotiated but required.\n");

Renaming statement match = 0;

Renaming statement nm_idx = 0;

Renaming statement m_idx = nm_idx;



Renaming block #259

Renaming statement D.45008 = m_idx == 0;

Renaming statement D.45009 = nm_idx != 0;

Renaming statement D.45010 = D.45008 && D.45009;

Renaming statement if (D.45010 != 0)



Renaming block #260

Renaming statement j = 0;



Renaming block #271

Renaming statement if (j < nm_idx)



Renaming block #261

Renaming statement timp = 0B;

Renaming statement D.45013 = near_matches[j].rate;

Renaming statement near_rate = (uint32_t) D.45013;

Renaming statement near_match = near_matches[j].imp;

Renaming statement near_map = near_matches[j].map;

Renaming statement D.45014 = near_match->iananame;

Renaming statement if (near_rate == 0)



Renaming block #262

Renaming statement iftmp.95 = near_match->samples_per_second;



Renaming block #263

Renaming statement iftmp.95 = near_rate;



Renaming block #264

Renaming statement switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45014, iftmp.95, codec_ms);

Renaming statement num = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);

Renaming statement if (num != 0)



Renaming block #265

Renaming statement timp = search[0];



Renaming block #266

Renaming statement timp = near_match;



Renaming block #267

Renaming statement if (maxptime == 0)



Renaming block #268

Renaming statement D.45025 = timp->microseconds_per_packet;

Renaming statement D.45026 = D.45025 / 1000;

Renaming statement if (D.45026 <= maxptime)



Renaming block #270

Renaming statement j = j + 1;



Renaming block #269

Renaming statement D.45027 = timp->iananame;

Renaming statement D.45025 = timp->microseconds_per_packet;

Renaming statement D.45026 = D.45025 / 1000;

Renaming statement D.45028 = timp->actual_samples_per_second;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session, 7, "Substituting codec %s@%ui@%uh\n", D.45027, D.45026, D.45028);

Renaming statement match = 1;

Renaming statement D.45029 = near_matches[j].codec_idx;

Renaming statement matches[m_idx].codec_idx = D.45029;

Renaming statement near_rate.96 = (int) near_rate;

Renaming statement matches[m_idx].rate = near_rate.96;

Renaming statement matches[m_idx].imp = timp;

Renaming statement matches[m_idx].map = near_map;

Renaming statement m_idx = m_idx + 1;



Renaming block #272

Renaming statement if (m_idx != 0)



Renaming block #273

Renaming statement if (greedy != 0)



Renaming block #274

Renaming statement greedy_sort (smh, &matches, m_idx, codec_array, total_codecs);



Renaming block #275

Renaming statement match = 1;

Renaming statement a_engine->codec_negotiated = 1;

Renaming statement smh->num_negotiated_codecs = 0;

Renaming statement j = 0;



Renaming block #294

Renaming statement if (j < m_idx)



Renaming block #276

Renaming statement D.45035 = matches[j].map;

Renaming statement D.45036 = D.45035->rm_encoding;

Renaming statement D.45035 = matches[j].map;

Renaming statement D.45037 = D.45035->rm_fmtp;

Renaming statement D.45035 = matches[j].map;

Renaming statement D.45038 = D.45035->rm_pt;

Renaming statement D.45039 = (uint32_t) D.45038;

Renaming statement D.45040 = matches[j].imp;

Renaming statement D.45041 = D.45040->samples_per_second;

Renaming statement D.45040 = matches[j].imp;

Renaming statement D.45042 = D.45040->microseconds_per_packet;

Renaming statement D.45043 = D.45042 / 1000;

Renaming statement D.45044 = (uint32_t) D.45043;

Renaming statement pmap = switch_core_media_add_payload_map (session, 0, D.45036, D.45037, sdp_type, D.45039, D.45041, D.45044, 1);

Renaming statement mimp = matches[j].imp;

Renaming statement mmap = matches[j].map;

Renaming statement if (j == 0)



Renaming block #277

Renaming statement a_engine->cur_payload_map = pmap;

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44750->current = 1;

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement if (D.44605 != 0B)



Renaming block #278

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement D.45049 = pmap->pt;

Renaming statement switch_rtp_set_default_payload (D.44605, D.45049);



Renaming block #279

Renaming statement D.45050 = mmap->rm_encoding;

Renaming statement D.45051 = switch_core_perform_session_strdup (session, D.45050, "src/switch_core_media.c", &__func__, 3535);

Renaming statement pmap->rm_encoding = D.45051;

Renaming statement D.45052 = mimp->iananame;

Renaming statement D.45053 = switch_core_perform_session_strdup (session, D.45052, "src/switch_core_media.c", &__func__, 3536);

Renaming statement pmap->iananame = D.45053;

Renaming statement D.45054 = mmap->rm_pt;

Renaming statement D.45055 = (unsigned char) D.45054;

Renaming statement pmap->recv_pt = D.45055;

Renaming statement D.45056 = mimp->samples_per_second;

Renaming statement pmap->rm_rate = D.45056;

Renaming statement D.45056 = mimp->samples_per_second;

Renaming statement pmap->adv_rm_rate = D.45056;

Renaming statement D.45052 = mimp->iananame;

Renaming statement D.45057 = strcasecmp (D.45052, "g722");

Renaming statement if (D.45057 != 0)



Renaming block #280

Renaming statement D.45060 = mimp->actual_samples_per_second;

Renaming statement pmap->rm_rate = D.45060;



Renaming block #281

Renaming statement D.45061 = mimp->microseconds_per_packet;

Renaming statement D.45062 = D.45061 / 1000;

Renaming statement D.45063 = (uint32_t) D.45062;

Renaming statement pmap->codec_ms = D.45063;

Renaming statement D.45064 = mimp->bits_per_second;

Renaming statement D.45065 = (uint32_t) D.45064;

Renaming statement pmap->bitrate = D.45065;

Renaming statement D.45067 = mmap->rm_params;

Renaming statement if (D.45067 != 0B)



Renaming block #282

Renaming statement D.45067 = mmap->rm_params;

Renaming statement iftmp.97 = atoi (D.45067);



Renaming block #283

Renaming statement iftmp.97 = 1;



Renaming block #284

Renaming statement pmap->channels = iftmp.97;

Renaming statement D.45050 = mmap->rm_encoding;

Renaming statement D.45071 = strcasecmp (D.45050, "opus");

Renaming statement if (D.45071 == 0)



Renaming block #285

Renaming statement D.45074 = pmap->channels;

Renaming statement if (D.45074 == 1)



Renaming block #286

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session, 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");

Renaming statement pmap->adv_channels = 1;



Renaming block #287

Renaming statement pmap->adv_channels = 2;



Renaming block #288

Renaming statement D.45080 = mmap->rm_fmtp;

Renaming statement D.45081 = _zstr (D.45080);

Renaming statement if (D.45081 == 0)



Renaming block #289

Renaming statement D.45080 = mmap->rm_fmtp;

Renaming statement D.45083 = switch_stristr ("stereo=1", D.45080);

Renaming statement if (D.45083 != 0B)



Renaming block #290

Renaming statement pmap->channels = 2;



Renaming block #291

Renaming statement pmap->channels = 1;



Renaming block #292

Renaming statement D.45074 = pmap->channels;

Renaming statement pmap->adv_channels = D.45074;



Renaming block #293

Renaming statement D.45086 = connection->c_address;

Renaming statement D.45087 = switch_core_perform_session_strdup (session, D.45086, "src/switch_core_media.c", &__func__, 3563);

Renaming statement pmap->remote_sdp_ip = D.45087;

Renaming statement D.44697 = m->m_port;

Renaming statement D.45088 = (short unsigned int) D.44697;

Renaming statement pmap->remote_sdp_port = D.45088;

Renaming statement D.45080 = mmap->rm_fmtp;

Renaming statement D.45089 = switch_core_perform_session_strdup (session, D.45080, "src/switch_core_media.c", &__func__, 3565);

Renaming statement pmap->rm_fmtp = D.45089;

Renaming statement D.45054 = mmap->rm_pt;

Renaming statement D.45055 = (unsigned char) D.45054;

Renaming statement pmap->agreed_pt = D.45055;

Renaming statement D.44655 = smh->num_negotiated_codecs;

Renaming statement smh->negotiated_codecs[D.44655] = mimp;

Renaming statement D.45090 = D.44655 + 1;

Renaming statement smh->num_negotiated_codecs = D.45090;

Renaming statement D.45054 = mmap->rm_pt;

Renaming statement D.45055 = (unsigned char) D.45054;

Renaming statement pmap->recv_pt = D.45055;

Renaming statement j = j + 1;



Renaming block #295

Renaming statement if (match != 0)



Renaming block #296

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44762 = D.44750->remote_sdp_port;

Renaming statement D.44767 = (int) D.44762;

Renaming statement switch_snprintf (&tmp, 50, "%d", D.44767);

Renaming statement D.44530 = session->channel;

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.44760 = D.44750->remote_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.44530, "remote_media_ip", D.44760, 1);

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "remote_media_port", &tmp, 1);

Renaming statement D.44750 = a_engine->cur_payload_map;

Renaming statement D.45093 = D.44750->recv_pt;

Renaming statement D.45094 = (int) D.45093;

Renaming statement switch_snprintf (&tmp, 50, "%d", D.45094);

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "rtp_audio_recv_pt", &tmp, 1);

Renaming statement D.45095 = &a_engine->read_codec;

Renaming statement D.45096 = switch_core_codec_ready (D.45095);

Renaming statement if (D.45096 != 0)



Renaming block #297

Renaming statement a_engine->reset_codec = 1;



Renaming block #298

Renaming statement D.44471 = smh->mparams;

Renaming statement D.45099 = D.44471->codec_flags;

Renaming statement D.45100 = switch_core_media_set_codec (session, 0, D.45099);

Renaming statement if (D.45100 == 0)



Renaming block #299

Renaming statement got_audio = 1;

Renaming statement check_ice (smh, 0, sdp, m);



Renaming block #300

Renaming statement match = 0;



Renaming block #301

Renaming statement if (best_te == 0)



Renaming block #302

Renaming statement D.45108 = switch_media_handle_test_media_flag (smh, 8);

Renaming statement if (D.45108 != 0)



Renaming block #303

Renaming statement D.44530 = session->channel;

Renaming statement D.45110 = switch_channel_test_flag (D.44530, 93);

Renaming statement if (D.45110 != 0)



Renaming block #304

Renaming statement D.44471 = smh->mparams;

Renaming statement D.45111 = D.44471->te;

Renaming statement D.45112 = (int) D.45111;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session, 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45112);

Renaming statement D.44471 = smh->mparams;

Renaming statement best_te = D.44471->te;



Renaming block #305

Renaming statement if (best_te != 0)



Renaming block #306

Renaming statement D.45115 = switch_channel_direction (channel);

Renaming statement if (D.45115 == 1)



Renaming block #307

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->te = best_te;

Renaming statement te = D.44471->te;

Renaming statement D.44857 = (int) best_te;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session, 7, "Set 2833 dtmf send payload to %u\n", D.44857);

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "dtmf_type", "rfc2833", 1);

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->dtmf_type = 0;

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement if (D.44605 != 0B)



Renaming block #308

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement switch_rtp_set_telephony_event (D.44605, best_te);

Renaming statement D.44530 = session->channel;

Renaming statement D.44857 = (int) best_te;

Renaming statement switch_channel_set_variable_printf (D.44530, "rtp_2833_send_payload", "%d", D.44857);



Renaming block #309

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->te = best_te;

Renaming statement D.45111 = D.44471->te;

Renaming statement D.44471->recv_te = D.45111;

Renaming statement te = D.44471->recv_te;

Renaming statement D.45121 = (int) te;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session, 7, "Set 2833 dtmf send/recv payload to %u\n", D.45121);

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "dtmf_type", "rfc2833", 1);

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->dtmf_type = 0;

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement if (D.44605 != 0B)



Renaming block #310

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement switch_rtp_set_telephony_event (D.44605, te);

Renaming statement D.44530 = session->channel;

Renaming statement D.45121 = (int) te;

Renaming statement switch_channel_set_variable_printf (D.44530, "rtp_2833_send_payload", "%d", D.45121);

Renaming statement D.44605 = a_engine->rtp_session;

Renaming statement switch_rtp_set_telephony_recv_event (D.44605, te);

Renaming statement D.44530 = session->channel;

Renaming statement D.45121 = (int) te;

Renaming statement switch_channel_set_variable_printf (D.44530, "rtp_2833_recv_payload", "%d", D.45121);



Renaming block #311

Renaming statement D.45125 = switch_channel_get_variable_dup (channel, "rtp_info_when_no_2833", 1, -1);

Renaming statement D.45126 = switch_false (D.45125);

Renaming statement if (D.45126 == 0)



Renaming block #312

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session, 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "dtmf_type", "info", 1);

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->dtmf_type = 1;

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->te = 0;

Renaming statement D.45111 = D.44471->te;

Renaming statement D.44471->recv_te = D.45111;

Renaming statement te = D.44471->recv_te;



Renaming block #313

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "dtmf_type", "none", 1);

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->dtmf_type = 2;

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->te = 0;

Renaming statement D.45111 = D.44471->te;

Renaming statement D.44471->recv_te = D.45111;

Renaming statement te = D.44471->recv_te;



Renaming block #314

Renaming statement D.44681 = m->m_type;

Renaming statement if (D.44681 == 3)



Renaming block #315

Renaming statement D.44697 = m->m_port;

Renaming statement if (D.44697 != 0)



Renaming block #316

Renaming statement mimp = 0B;

Renaming statement vmatch = 0;

Renaming statement nm_idx = 0;

Renaming statement m_idx = 0;

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "video_possible", "true", 1);

Renaming statement connection = sdp->sdp_connection;

Renaming statement D.44546 = m->m_connections;

Renaming statement if (D.44546 != 0B)



Renaming block #317

Renaming statement connection = m->m_connections;



Renaming block #318

Renaming statement if (connection == 0B)



Renaming block #319

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session, 3, "Cannot find a c= line in the sdp at media or session level!\n");

Renaming statement match = 0;



Renaming block #320

Renaming statement map = m->m_rtpmaps;



Renaming block #379

Renaming statement if (map != 0B)



Renaming block #321

Renaming statement D.45138 = switch_rtp_has_dtls ();

Renaming statement if (D.45138 != 0)



Renaming block #322

Renaming statement D.45141 = dtls_ok (session);

Renaming statement if (D.45141 != 0)



Renaming block #323

Renaming statement attr = m->m_attributes;



Renaming block #328

Renaming statement if (attr != 0B)



Renaming block #324

Renaming statement D.44590 = attr->a_name;

Renaming statement D.45144 = strcasecmp (D.44590, "fingerprint");

Renaming statement if (D.45144 == 0)



Renaming block #325

Renaming statement D.44619 = attr->a_value;

Renaming statement D.45147 = _zstr (D.44619);

Renaming statement if (D.45147 == 0)



Renaming block #326

Renaming statement got_video_crypto = 1;



Renaming block #327

Renaming statement attr = attr->a_next;



Renaming block #329

Renaming statement attr = m->m_attributes;



Renaming block #358

Renaming statement if (attr != 0B)



Renaming block #330

Renaming statement D.44590 = attr->a_name;

Renaming statement D.45152 = strcasecmp (D.44590, "framerate");

Renaming statement if (D.45152 == 0)



Renaming block #331

Renaming statement D.44619 = attr->a_value;

Renaming statement if (D.44619 != 0B)



Renaming block #332

Renaming statement D.44590 = attr->a_name;

Renaming statement D.45155 = strcasecmp (D.44590, "rtcp-fb");

Renaming statement if (D.45155 == 0)



Renaming block #333

Renaming statement D.44619 = attr->a_value;

Renaming statement D.45158 = _zstr (D.44619);

Renaming statement if (D.45158 == 0)



Renaming block #334

Renaming statement D.44619 = attr->a_value;

Renaming statement D.45161 = switch_stristr ("fir", D.44619);

Renaming statement if (D.45161 != 0B)



Renaming block #335

Renaming statement D.45164 = v_engine->fir;

Renaming statement D.45165 = D.45164 + 1;

Renaming statement v_engine->fir = D.45165;



Renaming block #336

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->rtcp_video_interval_msec = "10000";



Renaming block #337

Renaming statement D.44590 = attr->a_name;

Renaming statement D.45169 = strcasecmp (D.44590, "rtcp");

Renaming statement if (D.45169 == 0)



Renaming block #338

Renaming statement D.44619 = attr->a_value;

Renaming statement if (D.44619 != 0B)



Renaming block #339

Renaming statement __s2_len = 1;

Renaming statement if (__s2_len <= 3)



Renaming block #340

Renaming statement __s1 = attr->a_value;

Renaming statement D.45175 = *__s1;

Renaming statement D.45176 = (int) D.45175;

Renaming statement D.45177 = "1";

Renaming statement D.45178 = MEM[(const unsigned char *)D.45177];

Renaming statement D.45179 = (int) D.45178;

Renaming statement __result = D.45176 - D.45179;

Renaming statement D.45180 = __s2_len != 0;

Renaming statement D.45181 = __result == 0;

Renaming statement D.45182 = D.45180 && D.45181;

Renaming statement if (D.45182 != 0)



Renaming block #341

Renaming statement D.45185 = __s1 + 1;

Renaming statement D.45186 = *D.45185;

Renaming statement D.45187 = (int) D.45186;

Renaming statement D.45188 = &"1"[1];

Renaming statement D.45189 = MEM[(const unsigned char *)D.45188];

Renaming statement D.45190 = (int) D.45189;

Renaming statement __result = D.45187 - D.45190;

Renaming statement D.45191 = __s2_len > 1;

Renaming statement D.45181 = __result == 0;

Renaming statement D.45192 = D.45191 && D.45181;

Renaming statement if (D.45192 != 0)



Renaming block #342

Renaming statement D.45195 = __s1 + 2;

Renaming statement D.45196 = *D.45195;

Renaming statement D.45197 = (int) D.45196;

Renaming statement D.45198 = &"1"[2];

Renaming statement D.45199 = MEM[(const unsigned char *)D.45198];

Renaming statement D.45200 = (int) D.45199;

Renaming statement __result = D.45197 - D.45200;

Renaming statement D.45201 = __s2_len > 2;

Renaming statement D.45181 = __result == 0;

Renaming statement D.45202 = D.45201 && D.45181;

Renaming statement if (D.45202 != 0)



Renaming block #343

Renaming statement D.45205 = __s1 + 3;

Renaming statement D.45206 = *D.45205;

Renaming statement D.45207 = (int) D.45206;

Renaming statement D.45208 = &"1"[3];

Renaming statement D.45209 = MEM[(const unsigned char *)D.45208];

Renaming statement D.45210 = (int) D.45209;

Renaming statement __result = D.45207 - D.45210;



Renaming block #344

Renaming statement D.39088 = __result;

Renaming statement iftmp.98 = D.39088;



Renaming block #345

Renaming statement D.44619 = attr->a_value;

Renaming statement iftmp.98 = __builtin_strcmp (D.44619, "1");



Renaming block #346

Renaming statement D.39089 = iftmp.98;

Renaming statement if (D.39089 == 0)



Renaming block #347

Renaming statement D.44530 = session->channel;

Renaming statement D.44619 = attr->a_value;

Renaming statement switch_channel_set_variable_var_check (D.44530, "rtp_remote_video_rtcp_port", D.44619, 1);

Renaming statement D.44619 = attr->a_value;

Renaming statement D.45213 = atoi (D.44619);

Renaming statement D.45214 = (short unsigned int) D.45213;

Renaming statement v_engine->remote_rtcp_port = D.45214;

Renaming statement D.44471 = smh->mparams;

Renaming statement D.45215 = D.44471->rtcp_video_interval_msec;

Renaming statement if (D.45215 == 0B)



Renaming block #348

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->rtcp_video_interval_msec = "5000";



Renaming block #349

Renaming statement if (got_video_crypto == 0)



Renaming block #350

Renaming statement D.44590 = attr->a_name;

Renaming statement D.45220 = strcasecmp (D.44590, "crypto");

Renaming statement if (D.45220 == 0)



Renaming block #351

Renaming statement D.44619 = attr->a_value;

Renaming statement D.45223 = _zstr (D.44619);

Renaming statement if (D.45223 == 0)



Renaming block #352

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44821 = D.44471->ndlb;

Renaming statement D.44822 = D.44821 & 4;

Renaming statement if (D.44822 == 0)



Renaming block #353

Renaming statement D.44530 = session->channel;

Renaming statement D.45228 = switch_channel_get_variable_dup (D.44530, "rtp_allow_crypto_in_avp", 1, -1);

Renaming statement D.45229 = switch_true (D.45228);

Renaming statement if (D.45229 == 0)



Renaming block #354

Renaming statement D.44666 = m->m_proto;

Renaming statement D.44829 = D.44666 != 257;

Renaming statement D.44830 = got_webrtc == 0;

Renaming statement D.44831 = D.44829 && D.44830;

Renaming statement if (D.44831 != 0)



Renaming block #355

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session, 3, "a=crypto in RTP/AVP, refer to rfc3711\n");

Renaming statement match = 0;



Renaming block #356

Renaming statement crypto = attr->a_value;

Renaming statement crypto_tag = atoi (crypto);

Renaming statement got_video_crypto = switch_core_session_check_incoming_crypto (session, "rtp_has_video_crypto", 1, crypto, crypto_tag, sdp_type);



Renaming block #357

Renaming statement attr = attr->a_next;



Renaming block #359

Renaming statement rm_encoding = map->rm_encoding;

Renaming statement if (rm_encoding == 0B)



Renaming block #360

Renaming statement rm_encoding = "";



Renaming block #361

Renaming statement i = 0;



Renaming block #377

Renaming statement if (i < total_codecs)



Renaming block #362

Renaming statement i.99 = (unsigned int) i;

Renaming statement D.45237 = i.99 * 4;

Renaming statement D.45238 = codec_array + D.45237;

Renaming statement imp = *D.45238;

Renaming statement D.45239 = imp->codec_type;

Renaming statement if (D.45239 != 1)



Renaming block #363



Renaming block #364

Renaming statement D.44530 = session->channel;

Renaming statement D.45242 = switch_channel_direction (D.44530);

Renaming statement if (D.45242 == 0)



Renaming block #365

Renaming statement D.44530 = session->channel;

Renaming statement D.45245 = switch_channel_test_flag (D.44530, 114);

Renaming statement if (D.45245 != 0)



Renaming block #366



Renaming block #367

Renaming statement D.45248 = map->rm_pt;

Renaming statement D.45249 = (int) D.45248;

Renaming statement D.45250 = imp->iananame;

Renaming statement D.45251 = imp->ianacode;

Renaming statement D.45252 = (int) D.45251;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session, 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding, D.45249, D.45250, D.45252);

Renaming statement D.45256 = map->rm_encoding;

Renaming statement D.45257 = _zstr (D.45256);

Renaming statement if (D.45257 != 0)



Renaming block #368

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44821 = D.44471->ndlb;

Renaming statement D.44937 = (int) D.44821;

Renaming statement D.44938 = D.44937 & 1;

Renaming statement D.44939 = (_Bool) D.44938;

Renaming statement if (D.44939 != 0)



Renaming block #369

Renaming statement D.45248 = map->rm_pt;

Renaming statement D.45249 = (int) D.45248;

Renaming statement if (D.45249 <= 95)



Renaming block #370

Renaming statement D.45248 = map->rm_pt;

Renaming statement D.45249 = (int) D.45248;

Renaming statement D.45251 = imp->ianacode;

Renaming statement D.45252 = (int) D.45251;

Renaming statement vmatch = D.45249 == D.45252;



Renaming block #371

Renaming statement D.45250 = imp->iananame;

Renaming statement D.45260 = strcasecmp (rm_encoding, D.45250);

Renaming statement vmatch = D.45260 == 0;



Renaming block #372

Renaming statement if (vmatch != 0)



Renaming block #373

Renaming statement D.45263 = map->rm_rate;

Renaming statement D.45264 = imp->samples_per_second;

Renaming statement if (D.45263 == D.45264)



Renaming block #374

Renaming statement matches[m_idx].imp = imp;

Renaming statement matches[m_idx].map = map;

Renaming statement D.45250 = imp->iananame;

Renaming statement D.45251 = imp->ianacode;

Renaming statement D.45252 = (int) D.45251;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session, 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45250, D.45252);

Renaming statement m_idx = m_idx + 1;



Renaming block #375

Renaming statement vmatch = 0;



Renaming block #376

Renaming statement i = i + 1;



Renaming block #378

Renaming statement map = map->rm_next;



Renaming block #380

Renaming statement D.45002 = smh->crypto_mode;

Renaming statement D.45003 = D.45002 == 1;

Renaming statement D.45267 = got_video_crypto <= 0;

Renaming statement D.45268 = D.45003 && D.45267;

Renaming statement if (D.45268 != 0)



Renaming block #381

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session, 4, "Crypto not negotiated but required.\n");

Renaming statement vmatch = 0;

Renaming statement m_idx = 0;



Renaming block #382

Renaming statement if (m_idx != 0)



Renaming block #383

Renaming statement j = 0;

Renaming statement if (greedy != 0)



Renaming block #384

Renaming statement greedy_sort (smh, &matches, m_idx, codec_array, total_codecs);



Renaming block #385

Renaming statement vmatch = 1;

Renaming statement v_engine->codec_negotiated = 1;

Renaming statement j = 0;



Renaming block #390

Renaming statement if (j < m_idx)



Renaming block #386

Renaming statement D.45275 = matches[j].map;

Renaming statement D.45276 = D.45275->rm_encoding;

Renaming statement D.45275 = matches[j].map;

Renaming statement D.45277 = D.45275->rm_fmtp;

Renaming statement D.45275 = matches[j].map;

Renaming statement D.45278 = D.45275->rm_pt;

Renaming statement D.45279 = (uint32_t) D.45278;

Renaming statement D.45280 = matches[j].imp;

Renaming statement D.45281 = D.45280->samples_per_second;

Renaming statement D.45280 = matches[j].imp;

Renaming statement D.45282 = D.45280->microseconds_per_packet;

Renaming statement D.45283 = D.45282 / 1000;

Renaming statement D.45284 = (uint32_t) D.45283;

Renaming statement pmap = switch_core_media_add_payload_map (session, 1, D.45276, D.45277, sdp_type, D.45279, D.45281, D.45284, 1);

Renaming statement if (j == 0)



Renaming block #387

Renaming statement v_engine->cur_payload_map = pmap;

Renaming statement D.45287 = v_engine->cur_payload_map;

Renaming statement D.45287->current = 1;

Renaming statement D.45288 = v_engine->rtp_session;

Renaming statement if (D.45288 != 0B)



Renaming block #388

Renaming statement D.45288 = v_engine->rtp_session;

Renaming statement D.45291 = pmap->pt;

Renaming statement switch_rtp_set_default_payload (D.45288, D.45291);



Renaming block #389

Renaming statement mimp = matches[j].imp;

Renaming statement map = matches[j].map;

Renaming statement D.45256 = map->rm_encoding;

Renaming statement D.45292 = switch_core_perform_session_strdup (session, D.45256, "src/switch_core_media.c", &__func__, 3804);

Renaming statement pmap->rm_encoding = D.45292;

Renaming statement D.45248 = map->rm_pt;

Renaming statement D.45293 = (unsigned char) D.45248;

Renaming statement pmap->recv_pt = D.45293;

Renaming statement D.45263 = map->rm_rate;

Renaming statement pmap->rm_rate = D.45263;

Renaming statement D.45294 = mimp->microseconds_per_packet;

Renaming statement D.45295 = D.45294 / 1000;

Renaming statement D.45296 = (uint32_t) D.45295;

Renaming statement pmap->codec_ms = D.45296;

Renaming statement D.45086 = connection->c_address;

Renaming statement D.45297 = switch_core_perform_session_strdup (session, D.45086, "src/switch_core_media.c", &__func__, 3810);

Renaming statement pmap->remote_sdp_ip = D.45297;

Renaming statement D.44697 = m->m_port;

Renaming statement D.45088 = (short unsigned int) D.44697;

Renaming statement pmap->remote_sdp_port = D.45088;

Renaming statement D.45298 = map->rm_fmtp;

Renaming statement D.45299 = switch_core_perform_session_strdup (session, D.45298, "src/switch_core_media.c", &__func__, 3813);

Renaming statement pmap->rm_fmtp = D.45299;

Renaming statement D.45248 = map->rm_pt;

Renaming statement D.45293 = (unsigned char) D.45248;

Renaming statement pmap->agreed_pt = D.45293;

Renaming statement j = j + 1;



Renaming block #391

Renaming statement D.45287 = v_engine->cur_payload_map;

Renaming statement D.45300 = D.45287->remote_sdp_port;

Renaming statement D.45301 = (int) D.45300;

Renaming statement switch_snprintf (&tmp, 50, "%d", D.45301);

Renaming statement D.44530 = session->channel;

Renaming statement D.45287 = v_engine->cur_payload_map;

Renaming statement D.45302 = D.45287->remote_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.44530, "remote_video_ip", D.45302, 1);

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "remote_video_port", &tmp, 1);

Renaming statement D.44530 = session->channel;

Renaming statement D.45287 = v_engine->cur_payload_map;

Renaming statement D.45303 = D.45287->rm_fmtp;

Renaming statement switch_channel_set_variable_var_check (D.44530, "rtp_video_fmtp", D.45303, 1);

Renaming statement D.45287 = v_engine->cur_payload_map;

Renaming statement D.45304 = D.45287->agreed_pt;

Renaming statement D.45305 = (int) D.45304;

Renaming statement switch_snprintf (&tmp, 50, "%d", D.45305);

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "rtp_video_pt", &tmp, 1);

Renaming statement switch_core_media_check_video_codecs (session);

Renaming statement D.45287 = v_engine->cur_payload_map;

Renaming statement D.45306 = D.45287->recv_pt;

Renaming statement D.45307 = (int) D.45306;

Renaming statement switch_snprintf (&tmp, 50, "%d", D.45307);

Renaming statement D.44530 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.44530, "rtp_video_recv_pt", &tmp, 1);

Renaming statement D.45308 = match == 0;

Renaming statement D.45309 = vmatch != 0;

Renaming statement D.45310 = D.45308 && D.45309;

Renaming statement if (D.45310 != 0)



Renaming block #392

Renaming statement match = 1;



Renaming block #393

Renaming statement D.45313 = &v_engine->read_codec;

Renaming statement D.45314 = switch_core_codec_ready (D.45313);

Renaming statement if (D.45314 != 0)



Renaming block #394

Renaming statement v_engine->reset_codec = 1;



Renaming block #395

Renaming statement D.45317 = switch_core_media_set_video_codec (session, 0);

Renaming statement if (D.45317 == 0)



Renaming block #396

Renaming statement check_ice (smh, 1, sdp, m);



Renaming block #397

Renaming statement m = m->m_next;



Renaming block #399

Renaming statement if (parser != 0B)



Renaming block #400

Renaming statement sdp_parser_free (parser);



Renaming block #401

Renaming statement D.44471 = smh->mparams;

Renaming statement D.44471->cng_pt = cng_pt;

Renaming statement D.44470 = match;



Renaming block #402

Renaming statement return D.44470;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement channel_162 = switch_core_session_get_channel (session_161(D));

Updating SSA information for statement matches = {};

Updating SSA information for statement near_matches = {};



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_186 = session_161(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.44471_191 = smh_186->mparams;

Updating SSA information for statement total_codecs_192 = D.44471_191->num_codecs;

Updating SSA information for statement D.44472_194 = strlen (r_sdp_193(D));

Updating SSA information for statement parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8

Updating SSA information for statement sdp_198 = sdp_session (parser_196);



Registering new PHI nodes in block #9

Updating SSA information for statement sdp_parser_free (parser_196);



Registering new PHI nodes in block #10

Updating SSA information for statement D.44478_200 = dtls_ok (session_161(D));



Registering new PHI nodes in block #11

Updating SSA information for statement D.44481_201 = smh_186->session;

Updating SSA information for statement D.44482_202 = D.44481_201->channel;

Updating SSA information for statement tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);



Registering new PHI nodes in block #12

Updating SSA information for statement D.44485_204 = switch_false (tmp_203);



Registering new PHI nodes in block #13

Updating SSA information for statement D.44481_205 = smh_186->session;

Updating SSA information for statement D.44482_206 = D.44481_205->channel;

Updating SSA information for statement switch_channel_clear_flag (D.44482_206, 111);

Updating SSA information for statement D.44481_207 = smh_186->session;

Updating SSA information for statement D.44482_208 = D.44481_207->channel;

Updating SSA information for statement switch_channel_clear_flag (D.44482_208, 109);



Registering new PHI nodes in block #14

Updating SSA information for statement switch_core_session_parse_crypto_prefs (session_161(D));

Updating SSA information for statement clear_pmaps (a_engine_188);

Updating SSA information for statement clear_pmaps (v_engine_189);



Registering new PHI nodes in block #15

Updating SSA information for statement *proceed_209(D) = 1;



Registering new PHI nodes in block #16

Updating SSA information for statement D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);

Updating SSA information for statement D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);

Updating SSA information for statement val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);



Registering new PHI nodes in block #17

Updating SSA information for statement D.44494_215 = strcasecmp (val_214, "generous");



Registering new PHI nodes in block #18



Registering new PHI nodes in block #19

Updating SSA information for statement D.44498_218 = strcasecmp (val_214, "greedy");



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement D.44502_221 = strcasecmp (val_214, "scrooge");



Registering new PHI nodes in block #22



Registering new PHI nodes in block #23

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);



Registering new PHI nodes in block #24

Updating SSA information for statement D.44506_224 = sdp_198->sdp_origin;

Updating SSA information for statement D.44507_225 = D.44506_224->o_username;

Updating SSA information for statement D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);

Updating SSA information for statement smh_186->origin = D.44508_226;

Updating SSA information for statement D.44509_227 = smh_186->origin;



Registering new PHI nodes in block #25

Updating SSA information for statement D.44471_228 = smh_186->mparams;

Updating SSA information for statement D.44512_229 = D.44471_228->auto_rtp_bugs;



Registering new PHI nodes in block #26

Updating SSA information for statement D.44509_233 = smh_186->origin;

Updating SSA information for statement D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");



Registering new PHI nodes in block #27

Updating SSA information for statement D.44521_235 = a_engine_188->rtp_bugs;

Updating SSA information for statement a_engine_188->rtp_bugs = D.44522_236;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");



Registering new PHI nodes in block #28

Updating SSA information for statement D.44471_237 = smh_186->mparams;

Updating SSA information for statement D.44512_238 = D.44471_237->auto_rtp_bugs;



Registering new PHI nodes in block #29

Updating SSA information for statement D.44509_240 = smh_186->origin;

Updating SSA information for statement D.44526_241 = strstr (D.44509_240, "Sonus_UAC");



Registering new PHI nodes in block #30

Updating SSA information for statement D.44521_242 = a_engine_188->rtp_bugs;

Updating SSA information for statement a_engine_188->rtp_bugs = D.44529_243;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");



Registering new PHI nodes in block #31

Updating SSA information for statement D.44530_244 = session_161(D)->channel;

Updating SSA information for statement val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);



Registering new PHI nodes in block #32

Updating SSA information for statement D.44533_246 = switch_true (val_245);



Registering new PHI nodes in block #33

Updating SSA information for statement D.44530_247 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44530_247, 93, 1);



Registering new PHI nodes in block #34

Updating SSA information for statement m_248 = sdp_198->sdp_media;



Registering new PHI nodes in block #35

Updating SSA information for statement D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;



Registering new PHI nodes in block #36

Updating SSA information for statement D.44546_254 = m_248->m_connections;



Registering new PHI nodes in block #37

Updating SSA information for statement D.44546_255 = m_248->m_connections;

Updating SSA information for statement D.44548_256 = D.44546_255->c_address;



Registering new PHI nodes in block #38



Registering new PHI nodes in block #39

Updating SSA information for statement D.44546_258 = m_248->m_connections;

Updating SSA information for statement __s1_259 = D.44546_258->c_address;

Updating SSA information for statement D.44553_260 = *__s1_259;

Updating SSA information for statement D.44556_263 = MEM[(const unsigned char *)D.44555_262];



Registering new PHI nodes in block #40

Updating SSA information for statement D.44564_270 = *D.44563_269;

Updating SSA information for statement D.44567_273 = MEM[(const unsigned char *)D.44566_272];



Registering new PHI nodes in block #41

Updating SSA information for statement D.44574_280 = *D.44573_279;

Updating SSA information for statement D.44577_283 = MEM[(const unsigned char *)D.44576_282];



Registering new PHI nodes in block #42

Updating SSA information for statement D.44584_290 = *D.44583_289;

Updating SSA information for statement D.44587_293 = MEM[(const unsigned char *)D.44586_292];



Registering new PHI nodes in block #43



Registering new PHI nodes in block #44

Updating SSA information for statement D.44546_298 = m_248->m_connections;

Updating SSA information for statement D.44548_299 = D.44546_298->c_address;

Updating SSA information for statement iftmp.88_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");



Registering new PHI nodes in block #45



Registering new PHI nodes in block #46



Registering new PHI nodes in block #47

Updating SSA information for statement attr_303 = sdp_198->sdp_attributes;



Registering new PHI nodes in block #66



Registering new PHI nodes in block #48

Updating SSA information for statement D.44590_304 = attr_29->a_name;

Updating SSA information for statement D.44591_305 = _zstr (D.44590_304);



Registering new PHI nodes in block #49



Registering new PHI nodes in block #50

Updating SSA information for statement D.44590_306 = attr_29->a_name;

Updating SSA information for statement D.44594_307 = strcasecmp (D.44590_306, "sendonly");



Registering new PHI nodes in block #51

Updating SSA information for statement D.44530_309 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);



Registering new PHI nodes in block #52

Updating SSA information for statement D.44590_310 = attr_29->a_name;

Updating SSA information for statement D.44598_311 = strcasecmp (D.44590_310, "inactive");



Registering new PHI nodes in block #53

Updating SSA information for statement D.44530_313 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);



Registering new PHI nodes in block #54

Updating SSA information for statement D.44590_314 = attr_29->a_name;

Updating SSA information for statement D.44602_315 = strcasecmp (D.44590_314, "recvonly");



Registering new PHI nodes in block #55

Updating SSA information for statement D.44530_316 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);

Updating SSA information for statement D.44605_318 = a_engine_188->rtp_session;

Updating SSA information for statement D.44606_319 = switch_rtp_ready (D.44605_318);



Registering new PHI nodes in block #56

Updating SSA information for statement D.44605_320 = a_engine_188->rtp_session;

Updating SSA information for statement switch_rtp_set_max_missed_packets (D.44605_320, 0);

Updating SSA information for statement a_engine_188->max_missed_hold_packets = 0;

Updating SSA information for statement a_engine_188->max_missed_packets = 0;



Registering new PHI nodes in block #57

Updating SSA information for statement D.44530_321 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);

Updating SSA information for statement D.44530_322 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);



Registering new PHI nodes in block #58



Registering new PHI nodes in block #59

Updating SSA information for statement D.44590_323 = attr_29->a_name;

Updating SSA information for statement D.44614_324 = strcasecmp (D.44590_323, "sendrecv");



Registering new PHI nodes in block #60



Registering new PHI nodes in block #61

Updating SSA information for statement D.44590_326 = attr_29->a_name;

Updating SSA information for statement D.44616_327 = strcasecmp (D.44590_326, "ptime");



Registering new PHI nodes in block #62

Updating SSA information for statement D.44619_328 = attr_29->a_value;

Updating SSA information for statement dptime_329 = atoi (D.44619_328);



Registering new PHI nodes in block #63

Updating SSA information for statement D.44590_330 = attr_29->a_name;

Updating SSA information for statement D.44621_331 = strcasecmp (D.44590_330, "maxptime");



Registering new PHI nodes in block #64

Updating SSA information for statement D.44619_332 = attr_29->a_value;

Updating SSA information for statement dmaxptime_333 = atoi (D.44619_332);



Registering new PHI nodes in block #65

Updating SSA information for statement attr_334 = attr_29->a_next;



Registering new PHI nodes in block #67



Registering new PHI nodes in block #68

Updating SSA information for statement D.44530_338 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);



Registering new PHI nodes in block #69

Updating SSA information for statement D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);



Registering new PHI nodes in block #70

Updating SSA information for statement D.44530_340 = session_161(D)->channel;

Updating SSA information for statement val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);



Registering new PHI nodes in block #71

Updating SSA information for statement D.44635_342 = switch_true (val_341);



Registering new PHI nodes in block #72

Updating SSA information for statement D.44471_343 = smh_186->mparams;

Updating SSA information for statement D.44636_344 = D.44471_343->hold_laps;



Registering new PHI nodes in block #73

Updating SSA information for statement D.44471_345 = smh_186->mparams;

Updating SSA information for statement D.44636_346 = D.44471_345->hold_laps;

Updating SSA information for statement D.44471_345->hold_laps = D.44639_347;

Updating SSA information for statement D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);



Registering new PHI nodes in block #74

Updating SSA information for statement reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);

Updating SSA information for statement D.44530_350 = session_161(D)->channel;

Updating SSA information for statement val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);



Registering new PHI nodes in block #75

Updating SSA information for statement reneg_352 = switch_true (val_351);



Registering new PHI nodes in block #76



Registering new PHI nodes in block #77

Updating SSA information for statement reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);

Updating SSA information for statement D.44530_354 = session_161(D)->channel;

Updating SSA information for statement val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);



Registering new PHI nodes in block #78

Updating SSA information for statement reneg_356 = switch_true (val_355);



Registering new PHI nodes in block #79

Updating SSA information for statement D.44649_357 = session_161(D)->bugs;



Registering new PHI nodes in block #80

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");



Registering new PHI nodes in block #81



Registering new PHI nodes in block #82

Updating SSA information for statement D.44655_359 = smh_186->num_negotiated_codecs;



Registering new PHI nodes in block #83

Updating SSA information for statement total_codecs_361 = smh_186->num_negotiated_codecs;



Registering new PHI nodes in block #84



Registering new PHI nodes in block #85

Updating SSA information for statement D.44471_362 = smh_186->mparams;

Updating SSA information for statement D.44471_362->num_codecs = 0;

Updating SSA information for statement switch_core_media_prepare_codecs (session_161(D), 0);

Updating SSA information for statement D.44471_364 = smh_186->mparams;

Updating SSA information for statement total_codecs_365 = D.44471_364->num_codecs;



Registering new PHI nodes in block #86

Updating SSA information for statement D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));



Registering new PHI nodes in block #87

Updating SSA information for statement D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));



Registering new PHI nodes in block #88

Updating SSA information for statement D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));



Registering new PHI nodes in block #89

Updating SSA information for statement D.44530_369 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);



Registering new PHI nodes in block #90

Updating SSA information for statement switch_core_media_find_zrtp_hash (session_161(D), sdp_198);

Updating SSA information for statement switch_core_media_pass_zrtp_hash (session_161(D));

Updating SSA information for statement check_ice (smh_186, 0, sdp_198, 0B);

Updating SSA information for statement check_ice (smh_186, 1, sdp_198, 0B);

Updating SSA information for statement m_370 = sdp_198->sdp_media;



Registering new PHI nodes in block #398



Registering new PHI nodes in block #91

Updating SSA information for statement D.44666_373 = m_28->m_proto;



Registering new PHI nodes in block #92

Updating SSA information for statement switch_core_session_set_ice (session_161(D));



Registering new PHI nodes in block #93

Updating SSA information for statement D.44669_375 = m_28->m_proto_name;



Registering new PHI nodes in block #94

Updating SSA information for statement D.44669_376 = m_28->m_proto_name;

Updating SSA information for statement D.44672_377 = strcasecmp (D.44669_376, "UDP/TLS/RTP/SAVPF");



Registering new PHI nodes in block #95

Updating SSA information for statement D.44530_378 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44530_378, 107, 1);



Registering new PHI nodes in block #96

Updating SSA information for statement D.44675_379 = m_28->m_proto;



Registering new PHI nodes in block #97

Updating SSA information for statement D.44681_383 = m_28->m_type;



Registering new PHI nodes in block #98



Registering new PHI nodes in block #99



Registering new PHI nodes in block #100

Updating SSA information for statement D.44666_386 = m_28->m_proto;



Registering new PHI nodes in block #101

Updating SSA information for statement D.44681_387 = m_28->m_type;



Registering new PHI nodes in block #102



Registering new PHI nodes in block #103



Registering new PHI nodes in block #104

Updating SSA information for statement D.44666_390 = m_28->m_proto;



Registering new PHI nodes in block #105



Registering new PHI nodes in block #106



Registering new PHI nodes in block #107

Updating SSA information for statement D.44681_392 = m_28->m_type;



Registering new PHI nodes in block #108

Updating SSA information for statement D.44697_393 = m_28->m_port;



Registering new PHI nodes in block #109

Updating SSA information for statement t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);

Updating SSA information for statement D.44530_395 = session_161(D)->channel;

Updating SSA information for statement D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);



Registering new PHI nodes in block #110



Registering new PHI nodes in block #111

Updating SSA information for statement D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);

Updating SSA information for statement D.44703_399 = switch_true (D.44702_398);



Registering new PHI nodes in block #112

Updating SSA information for statement D.44530_400 = session_161(D)->channel;

Updating SSA information for statement switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);



Registering new PHI nodes in block #113

Updating SSA information for statement var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);

Updating SSA information for statement D.44481_403 = smh_186->session;

Updating SSA information for statement D.44482_404 = D.44481_403->channel;

Updating SSA information for statement D.44706_405 = switch_channel_test_flag (D.44482_404, 101);

Updating SSA information for statement D.44530_407 = session_161(D)->channel;

Updating SSA information for statement D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);



Registering new PHI nodes in block #114



Registering new PHI nodes in block #115

Updating SSA information for statement *proceed_209(D) = 0;



Registering new PHI nodes in block #116



Registering new PHI nodes in block #117

Updating SSA information for statement pass_409 = switch_true (var_402);



Registering new PHI nodes in block #118

Updating SSA information for statement D.44716_410 = strcasecmp (var_402, "once");



Registering new PHI nodes in block #119



Registering new PHI nodes in block #120



Registering new PHI nodes in block #121

Updating SSA information for statement D.44481_412 = smh_186->session;

Updating SSA information for statement D.44482_413 = D.44481_412->channel;

Updating SSA information for statement D.44723_414 = switch_channel_test_flag (D.44482_413, 101);



Registering new PHI nodes in block #122

Updating SSA information for statement D.44530_415 = session_161(D)->channel;

Updating SSA information for statement D.44724_416 = switch_channel_test_flag (D.44530_415, 103);



Registering new PHI nodes in block #123

Updating SSA information for statement D.44530_417 = session_161(D)->channel;

Updating SSA information for statement D.44726_418 = switch_channel_test_flag (D.44530_417, 15);



Registering new PHI nodes in block #124

Updating SSA information for statement D.44530_419 = session_161(D)->channel;

Updating SSA information for statement D.44728_420 = switch_channel_test_flag (D.44530_419, 29);



Registering new PHI nodes in block #125

Updating SSA information for statement D.44605_421 = a_engine_188->rtp_session;

Updating SSA information for statement D.44730_422 = switch_rtp_ready (D.44605_421);



Registering new PHI nodes in block #126



Registering new PHI nodes in block #127



Registering new PHI nodes in block #128

Updating SSA information for statement D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);



Registering new PHI nodes in block #129

Updating SSA information for statement other_session.89_425 = other_session;

Updating SSA information for statement other_channel_426 = switch_core_session_get_channel (other_session.89_425);

Updating SSA information for statement D.44605_427 = a_engine_188->rtp_session;

Updating SSA information for statement remote_host_428 = switch_rtp_get_remote_host (D.44605_427);

Updating SSA information for statement D.44605_429 = a_engine_188->rtp_session;

Updating SSA information for statement remote_port_430 = switch_rtp_get_remote_port (D.44605_429);

Updating SSA information for statement tmp = "";

Updating SSA information for statement D.44737_431 = switch_channel_test_flag (other_channel_426, 1);



Registering new PHI nodes in block #130

Updating SSA information for statement D.44530_432 = session_161(D)->channel;

Updating SSA information for statement D.44740_433 = switch_channel_get_name (D.44530_432);

Updating SSA information for statement D.44741_434 = switch_channel_get_name (other_channel_426);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

Updating SSA information for statement other_session.89_435 = other_session;

Updating SSA information for statement switch_core_session_rwunlock (other_session.89_435);



Registering new PHI nodes in block #131

Updating SSA information for statement D.44530_438 = session_161(D)->channel;

Updating SSA information for statement D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);

Updating SSA information for statement D.44743_440 = switch_true (D.44742_439);



Registering new PHI nodes in block #132

Updating SSA information for statement D.44530_441 = session_161(D)->channel;

Updating SSA information for statement D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);

Updating SSA information for statement D.44747_443 = switch_true (D.44746_442);



Registering new PHI nodes in block #133

Updating SSA information for statement switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);



Registering new PHI nodes in block #134

Updating SSA information for statement D.44750_444 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44751_445 = t38_options_394->remote_ip;

Updating SSA information for statement D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);

Updating SSA information for statement D.44750_444->remote_sdp_ip = D.44752_446;

Updating SSA information for statement D.44750_447 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44753_448 = t38_options_394->remote_port;

Updating SSA information for statement D.44750_447->remote_sdp_port = D.44753_448;



Registering new PHI nodes in block #135

Updating SSA information for statement D.44750_452 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44760_453 = D.44750_452->remote_sdp_ip;

Updating SSA information for statement D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);



Registering new PHI nodes in block #136

Updating SSA information for statement D.44750_455 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44762_456 = D.44750_455->remote_sdp_port;



Registering new PHI nodes in block #137

Updating SSA information for statement D.44530_457 = session_161(D)->channel;

Updating SSA information for statement D.44764_458 = switch_channel_get_name (D.44530_457);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);



Registering new PHI nodes in block #138

Updating SSA information for statement err = 0B;

Updating SSA information for statement D.44530_459 = session_161(D)->channel;

Updating SSA information for statement D.44765_460 = switch_channel_get_name (D.44530_459);

Updating SSA information for statement D.44750_462 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44760_463 = D.44750_462->remote_sdp_ip;

Updating SSA information for statement D.44750_464 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44762_465 = D.44750_464->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

Updating SSA information for statement D.44750_467 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44762_468 = D.44750_467->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 32, "%d", D.44767_469);

Updating SSA information for statement D.44530_470 = session_161(D)->channel;

Updating SSA information for statement D.44750_471 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44760_472 = D.44750_471->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);

Updating SSA information for statement D.44530_473 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);

Updating SSA information for statement D.44605_474 = a_engine_188->rtp_session;

Updating SSA information for statement D.44750_475 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44760_476 = D.44750_475->remote_sdp_ip;

Updating SSA information for statement D.44750_477 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44762_478 = D.44750_477->remote_sdp_port;

Updating SSA information for statement D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);



Registering new PHI nodes in block #139

Updating SSA information for statement err.90_480 = err;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);

Updating SSA information for statement switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);



Registering new PHI nodes in block #140

Updating SSA information for statement other_session.89_481 = other_session;

Updating SSA information for statement switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);

Updating SSA information for statement D.44481_482 = smh_186->session;

Updating SSA information for statement D.44482_483 = D.44481_482->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44482_483, 101, 1);

Updating SSA information for statement other_session.89_484 = other_session;

Updating SSA information for statement D.44772_485 = other_session.89_484->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44772_485, 101, 1);

Updating SSA information for statement other_session.89_486 = other_session;

Updating SSA information for statement msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);

Updating SSA information for statement msg_487->message_id = 21;

Updating SSA information for statement msg_487->from = "src/switch_core_media.c";

Updating SSA information for statement other_session.89_488 = other_session;

Updating SSA information for statement D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);

Updating SSA information for statement msg_487->string_arg = D.44773_489;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));

Updating SSA information for statement other_session.89_490 = other_session;

Updating SSA information for statement switch_core_session_queue_message (other_session.89_490, msg_487);

Updating SSA information for statement other_session.89_491 = other_session;

Updating SSA information for statement switch_core_session_rwunlock (other_session.89_491);



Registering new PHI nodes in block #141



Registering new PHI nodes in block #142

Updating SSA information for statement D.44681_493 = m_28->m_type;



Registering new PHI nodes in block #143

Updating SSA information for statement D.44697_494 = m_28->m_port;



Registering new PHI nodes in block #144

Updating SSA information for statement D.44781_498 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #145

Updating SSA information for statement D.44784_499 = dtls_ok (session_161(D));



Registering new PHI nodes in block #146

Updating SSA information for statement attr_500 = m_28->m_attributes;



Registering new PHI nodes in block #151



Registering new PHI nodes in block #147

Updating SSA information for statement D.44590_501 = attr_30->a_name;

Updating SSA information for statement D.44787_502 = strcasecmp (D.44590_501, "fingerprint");



Registering new PHI nodes in block #148

Updating SSA information for statement D.44619_503 = attr_30->a_value;

Updating SSA information for statement D.44790_504 = _zstr (D.44619_503);



Registering new PHI nodes in block #149



Registering new PHI nodes in block #150

Updating SSA information for statement attr_506 = attr_30->a_next;



Registering new PHI nodes in block #152

Updating SSA information for statement attr_507 = m_28->m_attributes;



Registering new PHI nodes in block #172



Registering new PHI nodes in block #153

Updating SSA information for statement D.44590_508 = attr_31->a_name;

Updating SSA information for statement D.44795_509 = strcasecmp (D.44590_508, "rtcp");



Registering new PHI nodes in block #154

Updating SSA information for statement D.44619_510 = attr_31->a_value;



Registering new PHI nodes in block #155

Updating SSA information for statement D.44530_511 = session_161(D)->channel;

Updating SSA information for statement D.44619_512 = attr_31->a_value;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);

Updating SSA information for statement D.44619_513 = attr_31->a_value;

Updating SSA information for statement D.44798_514 = atoi (D.44619_513);

Updating SSA information for statement a_engine_188->remote_rtcp_port = D.44799_515;

Updating SSA information for statement D.44471_516 = smh_186->mparams;

Updating SSA information for statement D.44800_517 = D.44471_516->rtcp_audio_interval_msec;



Registering new PHI nodes in block #156

Updating SSA information for statement D.44471_518 = smh_186->mparams;

Updating SSA information for statement D.44471_518->rtcp_audio_interval_msec = "5000";



Registering new PHI nodes in block #157

Updating SSA information for statement D.44590_519 = attr_31->a_name;

Updating SSA information for statement D.44805_520 = strcasecmp (D.44590_519, "ptime");



Registering new PHI nodes in block #158

Updating SSA information for statement D.44619_521 = attr_31->a_value;



Registering new PHI nodes in block #159

Updating SSA information for statement D.44619_522 = attr_31->a_value;

Updating SSA information for statement ptime_523 = atoi (D.44619_522);



Registering new PHI nodes in block #160

Updating SSA information for statement D.44590_524 = attr_31->a_name;

Updating SSA information for statement D.44810_525 = strcasecmp (D.44590_524, "maxptime");



Registering new PHI nodes in block #161

Updating SSA information for statement D.44619_526 = attr_31->a_value;



Registering new PHI nodes in block #162

Updating SSA information for statement D.44619_527 = attr_31->a_value;

Updating SSA information for statement maxptime_528 = atoi (D.44619_527);



Registering new PHI nodes in block #163



Registering new PHI nodes in block #164

Updating SSA information for statement D.44590_529 = attr_31->a_name;

Updating SSA information for statement D.44815_530 = strcasecmp (D.44590_529, "crypto");



Registering new PHI nodes in block #165

Updating SSA information for statement D.44619_531 = attr_31->a_value;

Updating SSA information for statement D.44818_532 = _zstr (D.44619_531);



Registering new PHI nodes in block #166

Updating SSA information for statement D.44471_533 = smh_186->mparams;

Updating SSA information for statement D.44821_534 = D.44471_533->ndlb;



Registering new PHI nodes in block #167

Updating SSA information for statement D.44530_536 = session_161(D)->channel;

Updating SSA information for statement D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);

Updating SSA information for statement D.44826_538 = switch_true (D.44825_537);



Registering new PHI nodes in block #168

Updating SSA information for statement D.44666_539 = m_28->m_proto;



Registering new PHI nodes in block #169

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");



Registering new PHI nodes in block #170

Updating SSA information for statement crypto_544 = attr_31->a_value;

Updating SSA information for statement crypto_tag_545 = atoi (crypto_544);

Updating SSA information for statement got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_545, sdp_type_546(D));



Registering new PHI nodes in block #171

Updating SSA information for statement attr_548 = attr_31->a_next;



Registering new PHI nodes in block #173



Registering new PHI nodes in block #174



Registering new PHI nodes in block #175

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");



Registering new PHI nodes in block #176

Updating SSA information for statement connection_554 = sdp_198->sdp_connection;

Updating SSA information for statement D.44546_555 = m_28->m_connections;



Registering new PHI nodes in block #177

Updating SSA information for statement connection_556 = m_28->m_connections;



Registering new PHI nodes in block #178



Registering new PHI nodes in block #179

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");



Registering new PHI nodes in block #180

Updating SSA information for statement map_559 = m_28->m_rtpmaps;



Registering new PHI nodes in block #256



Registering new PHI nodes in block #181

Updating SSA information for statement codec_fmtp = {};

Updating SSA information for statement rm_encoding_561 = map_128->rm_encoding;



Registering new PHI nodes in block #182



Registering new PHI nodes in block #183

Updating SSA information for statement D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");



Registering new PHI nodes in block #184



Registering new PHI nodes in block #185

Updating SSA information for statement D.44854_564 = map_128->rm_rate;

Updating SSA information for statement D.44750_565 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44855_566 = D.44750_565->rm_rate;



Registering new PHI nodes in block #186

Updating SSA information for statement D.44856_567 = map_128->rm_pt;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);



Registering new PHI nodes in block #187



Registering new PHI nodes in block #188

Updating SSA information for statement D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);



Registering new PHI nodes in block #189



Registering new PHI nodes in block #190

Updating SSA information for statement D.44863_571 = strcasecmp (rm_encoding_130, "CN");



Registering new PHI nodes in block #191

Updating SSA information for statement D.44856_572 = map_128->rm_pt;

Updating SSA information for statement D.44605_574 = a_engine_188->rtp_session;



Registering new PHI nodes in block #192

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);

Updating SSA information for statement D.44605_576 = a_engine_188->rtp_session;

Updating SSA information for statement D.44471_577 = smh_186->mparams;

Updating SSA information for statement D.44869_578 = D.44471_577->cng_pt;

Updating SSA information for statement switch_rtp_set_cng_pt (D.44605_576, D.44869_578);



Registering new PHI nodes in block #193



Registering new PHI nodes in block #194



Registering new PHI nodes in block #195



Registering new PHI nodes in block #196



Registering new PHI nodes in block #197



Registering new PHI nodes in block #198



Registering new PHI nodes in block #199



Registering new PHI nodes in block #200



Registering new PHI nodes in block #201



Registering new PHI nodes in block #202

Updating SSA information for statement D.44856_586 = map_128->rm_pt;

Updating SSA information for statement D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);



Registering new PHI nodes in block #203

Updating SSA information for statement D.44856_590 = map_128->rm_pt;



Registering new PHI nodes in block #204

Updating SSA information for statement D.44889_593 = map_128->rm_encoding;

Updating SSA information for statement D.44890_594 = strcasecmp (D.44889_593, "g723");



Registering new PHI nodes in block #205



Registering new PHI nodes in block #206

Updating SSA information for statement remote_codec_rate_596 = map_128->rm_rate;

Updating SSA information for statement memset (&codec_fmtp, 0, 16);

Updating SSA information for statement D.44893_598 = map_128->rm_fmtp;

Updating SSA information for statement D.44894_599 = _zstr (D.44893_598);



Registering new PHI nodes in block #207

Updating SSA information for statement D.44889_600 = map_128->rm_encoding;

Updating SSA information for statement D.44897_601 = strcasecmp (D.44889_600, "ilbc");



Registering new PHI nodes in block #208



Registering new PHI nodes in block #209

Updating SSA information for statement D.44889_604 = map_128->rm_encoding;

Updating SSA information for statement D.44901_605 = strcasecmp (D.44889_604, "isac");



Registering new PHI nodes in block #210



Registering new PHI nodes in block #211



Registering new PHI nodes in block #212

Updating SSA information for statement D.44889_609 = map_128->rm_encoding;

Updating SSA information for statement D.44893_610 = map_128->rm_fmtp;

Updating SSA information for statement D.44854_611 = map_128->rm_rate;

Updating SSA information for statement D.44906_612 = switch_core_codec_parse_fmtp (D.44889_609, D.44893_610, D.44854_611, &codec_fmtp);



Registering new PHI nodes in block #213

Updating SSA information for statement D.44909_613 = codec_fmtp.bits_per_second;



Registering new PHI nodes in block #214

Updating SSA information for statement D.44909_614 = codec_fmtp.bits_per_second;



Registering new PHI nodes in block #215

Updating SSA information for statement D.44912_616 = codec_fmtp.microseconds_per_packet;



Registering new PHI nodes in block #216

Updating SSA information for statement D.44912_617 = codec_fmtp.microseconds_per_packet;



Registering new PHI nodes in block #217

Updating SSA information for statement D.44915_619 = codec_fmtp.actual_samples_per_second;



Registering new PHI nodes in block #218

Updating SSA information for statement fmtp_remote_codec_rate_620 = codec_fmtp.actual_samples_per_second;



Registering new PHI nodes in block #219



Registering new PHI nodes in block #253

Updating SSA information for statement D.44471_622 = smh_186->mparams;

Updating SSA information for statement D.44997_623 = D.44471_622->num_codecs;



Registering new PHI nodes in block #220

Updating SSA information for statement imp_630 = *D.44920_629;

Updating SSA information for statement D.44921_631 = imp_630->bits_per_second;

Updating SSA information for statement codec_rate_633 = imp_630->samples_per_second;

Updating SSA information for statement D.44922_634 = imp_630->codec_type;



Registering new PHI nodes in block #221



Registering new PHI nodes in block #222

Updating SSA information for statement D.44856_635 = map_128->rm_pt;

Updating SSA information for statement D.44927_638 = imp_630->iananame;

Updating SSA information for statement D.44928_639 = imp_630->ianacode;

Updating SSA information for statement D.44930_641 = imp_630->microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);

Updating SSA information for statement D.44889_643 = map_128->rm_encoding;

Updating SSA information for statement D.44935_644 = _zstr (D.44889_643);



Registering new PHI nodes in block #223

Updating SSA information for statement D.44471_645 = smh_186->mparams;

Updating SSA information for statement D.44821_646 = D.44471_645->ndlb;



Registering new PHI nodes in block #224

Updating SSA information for statement D.44856_650 = map_128->rm_pt;



Registering new PHI nodes in block #225

Updating SSA information for statement D.44856_652 = map_128->rm_pt;

Updating SSA information for statement D.44928_654 = imp_630->ianacode;



Registering new PHI nodes in block #226

Updating SSA information for statement D.44927_657 = imp_630->iananame;

Updating SSA information for statement D.44945_658 = strcasecmp (rm_encoding_130, D.44927_657);



Registering new PHI nodes in block #227



Registering new PHI nodes in block #228

Updating SSA information for statement D.44948_659 = imp_630->actual_samples_per_second;



Registering new PHI nodes in block #229



Registering new PHI nodes in block #230



Registering new PHI nodes in block #231



Registering new PHI nodes in block #232



Registering new PHI nodes in block #233



Registering new PHI nodes in block #234



Registering new PHI nodes in block #235

Updating SSA information for statement D.44889_670 = map_128->rm_encoding;

Updating SSA information for statement D.44961_671 = strcasecmp (D.44889_670, "ilbc");



Registering new PHI nodes in block #236

Updating SSA information for statement D.44889_672 = map_128->rm_encoding;

Updating SSA information for statement D.44964_673 = strcasecmp (D.44889_672, "isac");



Registering new PHI nodes in block #237



Registering new PHI nodes in block #238



Registering new PHI nodes in block #239



Registering new PHI nodes in block #240

Updating SSA information for statement D.44889_681 = map_128->rm_encoding;

Updating SSA information for statement D.44978_682 = strcasecmp (D.44889_681, "pcma");



Registering new PHI nodes in block #241

Updating SSA information for statement D.44889_683 = map_128->rm_encoding;

Updating SSA information for statement D.44980_684 = strcasecmp (D.44889_683, "pcmu");



Registering new PHI nodes in block #242

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");



Registering new PHI nodes in block #243



Registering new PHI nodes in block #244



Registering new PHI nodes in block #245

Updating SSA information for statement D.44927_686 = imp_630->iananame;

Updating SSA information for statement D.44985_687 = imp_630->samples_per_second;

Updating SSA information for statement D.44930_688 = imp_630->microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44927_686, D.44985_687, D.44931_689);



Registering new PHI nodes in block #246



Registering new PHI nodes in block #247

Updating SSA information for statement D.44930_694 = imp_630->microseconds_per_packet;



Registering new PHI nodes in block #248



Registering new PHI nodes in block #249

Updating SSA information for statement D.44927_696 = imp_630->iananame;

Updating SSA information for statement D.44928_697 = imp_630->ianacode;

Updating SSA information for statement D.44930_699 = imp_630->microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927_696, D.44929_698, codec_rate_633, D.44931_700, bit_rate_632);

Updating SSA information for statement near_matches[nm_idx_116].codec_idx = i_129;

Updating SSA information for statement near_matches[nm_idx_116].rate = remote_codec_rate.92_701;

Updating SSA information for statement near_matches[nm_idx_116].imp = imp_630;

Updating SSA information for statement near_matches[nm_idx_116].map = map_128;



Registering new PHI nodes in block #250

Updating SSA information for statement matches[m_idx_101].codec_idx = i_129;

Updating SSA information for statement matches[m_idx_101].rate = codec_rate.94_703;

Updating SSA information for statement matches[m_idx_101].imp = imp_630;

Updating SSA information for statement matches[m_idx_101].map = map_128;

Updating SSA information for statement D.44927_705 = imp_630->iananame;

Updating SSA information for statement D.44928_706 = imp_630->ianacode;

Updating SSA information for statement D.44930_708 = imp_630->microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927_705, D.44929_707, codec_rate_633, D.44931_709, bit_rate_632);



Registering new PHI nodes in block #251



Registering new PHI nodes in block #252



Registering new PHI nodes in block #254



Registering new PHI nodes in block #255

Updating SSA information for statement map_712 = map_128->rm_next;



Registering new PHI nodes in block #257

Updating SSA information for statement D.45002_713 = smh_186->crypto_mode;



Registering new PHI nodes in block #258

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");



Registering new PHI nodes in block #259



Registering new PHI nodes in block #260



Registering new PHI nodes in block #271



Registering new PHI nodes in block #261

Updating SSA information for statement D.45013_725 = near_matches[j_133].rate;

Updating SSA information for statement near_match_727 = near_matches[j_133].imp;

Updating SSA information for statement near_map_728 = near_matches[j_133].map;

Updating SSA information for statement D.45014_729 = near_match_727->iananame;



Registering new PHI nodes in block #262

Updating SSA information for statement iftmp.95_730 = near_match_727->samples_per_second;



Registering new PHI nodes in block #263



Registering new PHI nodes in block #264

Updating SSA information for statement switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45014_729, iftmp.95_145, codec_ms_93);

Updating SSA information for statement prefs[0] = &tmp;

Updating SSA information for statement num_732 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);



Registering new PHI nodes in block #265

Updating SSA information for statement timp_733 = search[0];



Registering new PHI nodes in block #266



Registering new PHI nodes in block #267



Registering new PHI nodes in block #268

Updating SSA information for statement D.45025_735 = timp_134->microseconds_per_packet;



Registering new PHI nodes in block #270



Registering new PHI nodes in block #269

Updating SSA information for statement D.45027_738 = timp_134->iananame;

Updating SSA information for statement D.45025_739 = timp_134->microseconds_per_packet;

Updating SSA information for statement D.45028_741 = timp_134->actual_samples_per_second;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45027_738, D.45026_740, D.45028_741);

Updating SSA information for statement D.45029_743 = near_matches[j_133].codec_idx;

Updating SSA information for statement matches[m_idx_106].codec_idx = D.45029_743;

Updating SSA information for statement matches[m_idx_106].rate = near_rate.96_744;

Updating SSA information for statement matches[m_idx_106].imp = timp_134;

Updating SSA information for statement matches[m_idx_106].map = near_map_728;



Registering new PHI nodes in block #272



Registering new PHI nodes in block #273



Registering new PHI nodes in block #274

Updating SSA information for statement greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);



Registering new PHI nodes in block #275

Updating SSA information for statement a_engine_188->codec_negotiated = 1;

Updating SSA information for statement smh_186->num_negotiated_codecs = 0;



Registering new PHI nodes in block #294



Registering new PHI nodes in block #276

Updating SSA information for statement D.45035_748 = matches[j_135].map;

Updating SSA information for statement D.45036_749 = D.45035_748->rm_encoding;

Updating SSA information for statement D.45035_750 = matches[j_135].map;

Updating SSA information for statement D.45037_751 = D.45035_750->rm_fmtp;

Updating SSA information for statement D.45035_752 = matches[j_135].map;

Updating SSA information for statement D.45038_753 = D.45035_752->rm_pt;

Updating SSA information for statement D.45040_755 = matches[j_135].imp;

Updating SSA information for statement D.45041_756 = D.45040_755->samples_per_second;

Updating SSA information for statement D.45040_757 = matches[j_135].imp;

Updating SSA information for statement D.45042_758 = D.45040_757->microseconds_per_packet;

Updating SSA information for statement pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);

Updating SSA information for statement mimp_762 = matches[j_135].imp;

Updating SSA information for statement mmap_763 = matches[j_135].map;



Registering new PHI nodes in block #277

Updating SSA information for statement a_engine_188->cur_payload_map = pmap_761;

Updating SSA information for statement D.44750_764 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44750_764->current = 1;

Updating SSA information for statement D.44605_765 = a_engine_188->rtp_session;



Registering new PHI nodes in block #278

Updating SSA information for statement D.44605_766 = a_engine_188->rtp_session;

Updating SSA information for statement D.45049_767 = pmap_761->pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.44605_766, D.45049_767);



Registering new PHI nodes in block #279

Updating SSA information for statement D.45050_768 = mmap_763->rm_encoding;

Updating SSA information for statement D.45051_769 = switch_core_perform_session_strdup (session_161(D), D.45050_768, "src/switch_core_media.c", &__func__, 3535);

Updating SSA information for statement pmap_761->rm_encoding = D.45051_769;

Updating SSA information for statement D.45052_770 = mimp_762->iananame;

Updating SSA information for statement D.45053_771 = switch_core_perform_session_strdup (session_161(D), D.45052_770, "src/switch_core_media.c", &__func__, 3536);

Updating SSA information for statement pmap_761->iananame = D.45053_771;

Updating SSA information for statement D.45054_772 = mmap_763->rm_pt;

Updating SSA information for statement pmap_761->recv_pt = D.45055_773;

Updating SSA information for statement D.45056_774 = mimp_762->samples_per_second;

Updating SSA information for statement pmap_761->rm_rate = D.45056_774;

Updating SSA information for statement D.45056_775 = mimp_762->samples_per_second;

Updating SSA information for statement pmap_761->adv_rm_rate = D.45056_775;

Updating SSA information for statement D.45052_776 = mimp_762->iananame;

Updating SSA information for statement D.45057_777 = strcasecmp (D.45052_776, "g722");



Registering new PHI nodes in block #280

Updating SSA information for statement D.45060_778 = mimp_762->actual_samples_per_second;

Updating SSA information for statement pmap_761->rm_rate = D.45060_778;



Registering new PHI nodes in block #281

Updating SSA information for statement D.45061_779 = mimp_762->microseconds_per_packet;

Updating SSA information for statement pmap_761->codec_ms = D.45063_781;

Updating SSA information for statement D.45064_782 = mimp_762->bits_per_second;

Updating SSA information for statement pmap_761->bitrate = D.45065_783;

Updating SSA information for statement D.45067_784 = mmap_763->rm_params;



Registering new PHI nodes in block #282

Updating SSA information for statement D.45067_785 = mmap_763->rm_params;

Updating SSA information for statement iftmp.97_786 = atoi (D.45067_785);



Registering new PHI nodes in block #283



Registering new PHI nodes in block #284

Updating SSA information for statement pmap_761->channels = iftmp.97_146;

Updating SSA information for statement D.45050_788 = mmap_763->rm_encoding;

Updating SSA information for statement D.45071_789 = strcasecmp (D.45050_788, "opus");



Registering new PHI nodes in block #285

Updating SSA information for statement D.45074_790 = pmap_761->channels;



Registering new PHI nodes in block #286

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");

Updating SSA information for statement pmap_761->adv_channels = 1;



Registering new PHI nodes in block #287

Updating SSA information for statement pmap_761->adv_channels = 2;



Registering new PHI nodes in block #288

Updating SSA information for statement D.45080_791 = mmap_763->rm_fmtp;

Updating SSA information for statement D.45081_792 = _zstr (D.45080_791);



Registering new PHI nodes in block #289

Updating SSA information for statement D.45080_793 = mmap_763->rm_fmtp;

Updating SSA information for statement D.45083_794 = switch_stristr ("stereo=1", D.45080_793);



Registering new PHI nodes in block #290

Updating SSA information for statement pmap_761->channels = 2;



Registering new PHI nodes in block #291

Updating SSA information for statement pmap_761->channels = 1;



Registering new PHI nodes in block #292

Updating SSA information for statement D.45074_795 = pmap_761->channels;

Updating SSA information for statement pmap_761->adv_channels = D.45074_795;



Registering new PHI nodes in block #293

Updating SSA information for statement D.45086_796 = connection_124->c_address;

Updating SSA information for statement D.45087_797 = switch_core_perform_session_strdup (session_161(D), D.45086_796, "src/switch_core_media.c", &__func__, 3563);

Updating SSA information for statement pmap_761->remote_sdp_ip = D.45087_797;

Updating SSA information for statement D.44697_798 = m_28->m_port;

Updating SSA information for statement pmap_761->remote_sdp_port = D.45088_799;

Updating SSA information for statement D.45080_800 = mmap_763->rm_fmtp;

Updating SSA information for statement D.45089_801 = switch_core_perform_session_strdup (session_161(D), D.45080_800, "src/switch_core_media.c", &__func__, 3565);

Updating SSA information for statement pmap_761->rm_fmtp = D.45089_801;

Updating SSA information for statement D.45054_802 = mmap_763->rm_pt;

Updating SSA information for statement pmap_761->agreed_pt = D.45055_803;

Updating SSA information for statement D.44655_804 = smh_186->num_negotiated_codecs;

Updating SSA information for statement smh_186->negotiated_codecs[D.44655_804] = mimp_762;

Updating SSA information for statement smh_186->num_negotiated_codecs = D.45090_805;

Updating SSA information for statement D.45054_806 = mmap_763->rm_pt;

Updating SSA information for statement pmap_761->recv_pt = D.45055_807;



Registering new PHI nodes in block #295



Registering new PHI nodes in block #296

Updating SSA information for statement D.44750_809 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44762_810 = D.44750_809->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.44767_811);

Updating SSA information for statement D.44530_812 = session_161(D)->channel;

Updating SSA information for statement D.44750_813 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44760_814 = D.44750_813->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_812, "remote_media_ip", D.44760_814, 1);

Updating SSA information for statement D.44530_815 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_815, "remote_media_port", &tmp, 1);

Updating SSA information for statement D.44750_816 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.45093_817 = D.44750_816->recv_pt;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.45094_818);

Updating SSA information for statement D.44530_819 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_819, "rtp_audio_recv_pt", &tmp, 1);

Updating SSA information for statement D.45096_821 = switch_core_codec_ready (D.45095_820);



Registering new PHI nodes in block #297

Updating SSA information for statement a_engine_188->reset_codec = 1;



Registering new PHI nodes in block #298

Updating SSA information for statement D.44471_822 = smh_186->mparams;

Updating SSA information for statement D.45099_823 = D.44471_822->codec_flags;

Updating SSA information for statement D.45100_824 = switch_core_media_set_codec (session_161(D), 0, D.45099_823);



Registering new PHI nodes in block #299

Updating SSA information for statement check_ice (smh_186, 0, sdp_198, m_28);



Registering new PHI nodes in block #300



Registering new PHI nodes in block #301



Registering new PHI nodes in block #302

Updating SSA information for statement D.45108_827 = switch_media_handle_test_media_flag (smh_186, 8);



Registering new PHI nodes in block #303

Updating SSA information for statement D.44530_828 = session_161(D)->channel;

Updating SSA information for statement D.45110_829 = switch_channel_test_flag (D.44530_828, 93);



Registering new PHI nodes in block #304

Updating SSA information for statement D.44471_830 = smh_186->mparams;

Updating SSA information for statement D.45111_831 = D.44471_830->te;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45112_832);

Updating SSA information for statement D.44471_833 = smh_186->mparams;

Updating SSA information for statement best_te_834 = D.44471_833->te;



Registering new PHI nodes in block #305



Registering new PHI nodes in block #306

Updating SSA information for statement D.45115_835 = switch_channel_direction (channel_162);



Registering new PHI nodes in block #307

Updating SSA information for statement D.44471_836 = smh_186->mparams;

Updating SSA information for statement D.44471_836->te = best_te_21;

Updating SSA information for statement te_837 = D.44471_836->te;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_838);

Updating SSA information for statement D.44530_839 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_839, "dtmf_type", "rfc2833", 1);

Updating SSA information for statement D.44471_840 = smh_186->mparams;

Updating SSA information for statement D.44471_840->dtmf_type = 0;

Updating SSA information for statement D.44605_841 = a_engine_188->rtp_session;



Registering new PHI nodes in block #308

Updating SSA information for statement D.44605_842 = a_engine_188->rtp_session;

Updating SSA information for statement switch_rtp_set_telephony_event (D.44605_842, best_te_21);

Updating SSA information for statement D.44530_843 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_printf (D.44530_843, "rtp_2833_send_payload", "%d", D.44857_844);



Registering new PHI nodes in block #309

Updating SSA information for statement D.44471_845 = smh_186->mparams;

Updating SSA information for statement D.44471_846 = smh_186->mparams;

Updating SSA information for statement D.44471_846->te = best_te_21;

Updating SSA information for statement D.45111_847 = D.44471_846->te;

Updating SSA information for statement D.44471_846->recv_te = D.45111_847;

Updating SSA information for statement te_848 = D.44471_846->recv_te;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45121_849);

Updating SSA information for statement D.44530_850 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_850, "dtmf_type", "rfc2833", 1);

Updating SSA information for statement D.44471_851 = smh_186->mparams;

Updating SSA information for statement D.44471_851->dtmf_type = 0;

Updating SSA information for statement D.44605_852 = a_engine_188->rtp_session;



Registering new PHI nodes in block #310

Updating SSA information for statement D.44605_853 = a_engine_188->rtp_session;

Updating SSA information for statement switch_rtp_set_telephony_event (D.44605_853, te_848);

Updating SSA information for statement D.44530_854 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_printf (D.44530_854, "rtp_2833_send_payload", "%d", D.45121_855);

Updating SSA information for statement D.44605_856 = a_engine_188->rtp_session;

Updating SSA information for statement switch_rtp_set_telephony_recv_event (D.44605_856, te_848);

Updating SSA information for statement D.44530_857 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_printf (D.44530_857, "rtp_2833_recv_payload", "%d", D.45121_858);



Registering new PHI nodes in block #311

Updating SSA information for statement D.45125_859 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);

Updating SSA information for statement D.45126_860 = switch_false (D.45125_859);



Registering new PHI nodes in block #312

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");

Updating SSA information for statement D.44530_861 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_861, "dtmf_type", "info", 1);

Updating SSA information for statement D.44471_862 = smh_186->mparams;

Updating SSA information for statement D.44471_862->dtmf_type = 1;

Updating SSA information for statement D.44471_863 = smh_186->mparams;

Updating SSA information for statement D.44471_864 = smh_186->mparams;

Updating SSA information for statement D.44471_864->te = 0;

Updating SSA information for statement D.45111_865 = D.44471_864->te;

Updating SSA information for statement D.44471_864->recv_te = D.45111_865;

Updating SSA information for statement te_866 = D.44471_864->recv_te;



Registering new PHI nodes in block #313

Updating SSA information for statement D.44530_867 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_867, "dtmf_type", "none", 1);

Updating SSA information for statement D.44471_868 = smh_186->mparams;

Updating SSA information for statement D.44471_868->dtmf_type = 2;

Updating SSA information for statement D.44471_869 = smh_186->mparams;

Updating SSA information for statement D.44471_870 = smh_186->mparams;

Updating SSA information for statement D.44471_870->te = 0;

Updating SSA information for statement D.45111_871 = D.44471_870->te;

Updating SSA information for statement D.44471_870->recv_te = D.45111_871;

Updating SSA information for statement te_872 = D.44471_870->recv_te;



Registering new PHI nodes in block #314

Updating SSA information for statement D.44681_873 = m_28->m_type;



Registering new PHI nodes in block #315

Updating SSA information for statement D.44697_874 = m_28->m_port;



Registering new PHI nodes in block #316

Updating SSA information for statement memset (&matches, 0, 480);

Updating SSA information for statement memset (&near_matches, 0, 480);

Updating SSA information for statement D.44530_879 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_879, "video_possible", "true", 1);

Updating SSA information for statement connection_880 = sdp_198->sdp_connection;

Updating SSA information for statement D.44546_881 = m_28->m_connections;



Registering new PHI nodes in block #317

Updating SSA information for statement connection_882 = m_28->m_connections;



Registering new PHI nodes in block #318



Registering new PHI nodes in block #319

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");



Registering new PHI nodes in block #320

Updating SSA information for statement map_884 = m_28->m_rtpmaps;



Registering new PHI nodes in block #379



Registering new PHI nodes in block #321

Updating SSA information for statement D.45138_885 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #322

Updating SSA information for statement D.45141_886 = dtls_ok (session_161(D));



Registering new PHI nodes in block #323

Updating SSA information for statement attr_887 = m_28->m_attributes;



Registering new PHI nodes in block #328



Registering new PHI nodes in block #324

Updating SSA information for statement D.44590_888 = attr_32->a_name;

Updating SSA information for statement D.45144_889 = strcasecmp (D.44590_888, "fingerprint");



Registering new PHI nodes in block #325

Updating SSA information for statement D.44619_890 = attr_32->a_value;

Updating SSA information for statement D.45147_891 = _zstr (D.44619_890);



Registering new PHI nodes in block #326



Registering new PHI nodes in block #327

Updating SSA information for statement attr_893 = attr_32->a_next;



Registering new PHI nodes in block #329

Updating SSA information for statement attr_894 = m_28->m_attributes;



Registering new PHI nodes in block #358



Registering new PHI nodes in block #330

Updating SSA information for statement D.44590_895 = attr_33->a_name;

Updating SSA information for statement D.45152_896 = strcasecmp (D.44590_895, "framerate");



Registering new PHI nodes in block #331

Updating SSA information for statement D.44619_897 = attr_33->a_value;



Registering new PHI nodes in block #332

Updating SSA information for statement D.44590_898 = attr_33->a_name;

Updating SSA information for statement D.45155_899 = strcasecmp (D.44590_898, "rtcp-fb");



Registering new PHI nodes in block #333

Updating SSA information for statement D.44619_900 = attr_33->a_value;

Updating SSA information for statement D.45158_901 = _zstr (D.44619_900);



Registering new PHI nodes in block #334

Updating SSA information for statement D.44619_902 = attr_33->a_value;

Updating SSA information for statement D.45161_903 = switch_stristr ("fir", D.44619_902);



Registering new PHI nodes in block #335

Updating SSA information for statement D.45164_904 = v_engine_189->fir;

Updating SSA information for statement v_engine_189->fir = D.45165_905;



Registering new PHI nodes in block #336

Updating SSA information for statement D.44471_906 = smh_186->mparams;

Updating SSA information for statement D.44471_906->rtcp_video_interval_msec = "10000";



Registering new PHI nodes in block #337

Updating SSA information for statement D.44590_907 = attr_33->a_name;

Updating SSA information for statement D.45169_908 = strcasecmp (D.44590_907, "rtcp");



Registering new PHI nodes in block #338

Updating SSA information for statement D.44619_909 = attr_33->a_value;



Registering new PHI nodes in block #339



Registering new PHI nodes in block #340

Updating SSA information for statement __s1_911 = attr_33->a_value;

Updating SSA information for statement D.45175_912 = *__s1_911;

Updating SSA information for statement D.45178_915 = MEM[(const unsigned char *)D.45177_914];



Registering new PHI nodes in block #341

Updating SSA information for statement D.45186_922 = *D.45185_921;

Updating SSA information for statement D.45189_925 = MEM[(const unsigned char *)D.45188_924];



Registering new PHI nodes in block #342

Updating SSA information for statement D.45196_932 = *D.45195_931;

Updating SSA information for statement D.45199_935 = MEM[(const unsigned char *)D.45198_934];



Registering new PHI nodes in block #343

Updating SSA information for statement D.45206_942 = *D.45205_941;

Updating SSA information for statement D.45209_945 = MEM[(const unsigned char *)D.45208_944];



Registering new PHI nodes in block #344



Registering new PHI nodes in block #345

Updating SSA information for statement D.44619_950 = attr_33->a_value;

Updating SSA information for statement iftmp.98_951 = __builtin_strcmp (D.44619_950, "1");



Registering new PHI nodes in block #346



Registering new PHI nodes in block #347

Updating SSA information for statement D.44530_953 = session_161(D)->channel;

Updating SSA information for statement D.44619_954 = attr_33->a_value;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_953, "rtp_remote_video_rtcp_port", D.44619_954, 1);

Updating SSA information for statement D.44619_955 = attr_33->a_value;

Updating SSA information for statement D.45213_956 = atoi (D.44619_955);

Updating SSA information for statement v_engine_189->remote_rtcp_port = D.45214_957;

Updating SSA information for statement D.44471_958 = smh_186->mparams;

Updating SSA information for statement D.45215_959 = D.44471_958->rtcp_video_interval_msec;



Registering new PHI nodes in block #348

Updating SSA information for statement D.44471_960 = smh_186->mparams;

Updating SSA information for statement D.44471_960->rtcp_video_interval_msec = "5000";



Registering new PHI nodes in block #349



Registering new PHI nodes in block #350

Updating SSA information for statement D.44590_961 = attr_33->a_name;

Updating SSA information for statement D.45220_962 = strcasecmp (D.44590_961, "crypto");



Registering new PHI nodes in block #351

Updating SSA information for statement D.44619_963 = attr_33->a_value;

Updating SSA information for statement D.45223_964 = _zstr (D.44619_963);



Registering new PHI nodes in block #352

Updating SSA information for statement D.44471_965 = smh_186->mparams;

Updating SSA information for statement D.44821_966 = D.44471_965->ndlb;



Registering new PHI nodes in block #353

Updating SSA information for statement D.44530_968 = session_161(D)->channel;

Updating SSA information for statement D.45228_969 = switch_channel_get_variable_dup (D.44530_968, "rtp_allow_crypto_in_avp", 1, -1);

Updating SSA information for statement D.45229_970 = switch_true (D.45228_969);



Registering new PHI nodes in block #354

Updating SSA information for statement D.44666_971 = m_28->m_proto;



Registering new PHI nodes in block #355

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");



Registering new PHI nodes in block #356

Updating SSA information for statement crypto_976 = attr_33->a_value;

Updating SSA information for statement crypto_tag_977 = atoi (crypto_976);

Updating SSA information for statement got_video_crypto_978 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_976, crypto_tag_977, sdp_type_546(D));



Registering new PHI nodes in block #357

Updating SSA information for statement attr_979 = attr_33->a_next;



Registering new PHI nodes in block #359

Updating SSA information for statement rm_encoding_980 = map_136->rm_encoding;



Registering new PHI nodes in block #360



Registering new PHI nodes in block #361



Registering new PHI nodes in block #377



Registering new PHI nodes in block #362

Updating SSA information for statement imp_986 = *D.45238_985;

Updating SSA information for statement D.45239_987 = imp_986->codec_type;



Registering new PHI nodes in block #363



Registering new PHI nodes in block #364

Updating SSA information for statement D.44530_988 = session_161(D)->channel;

Updating SSA information for statement D.45242_989 = switch_channel_direction (D.44530_988);



Registering new PHI nodes in block #365

Updating SSA information for statement D.44530_990 = session_161(D)->channel;

Updating SSA information for statement D.45245_991 = switch_channel_test_flag (D.44530_990, 114);



Registering new PHI nodes in block #366



Registering new PHI nodes in block #367

Updating SSA information for statement D.45248_992 = map_136->rm_pt;

Updating SSA information for statement D.45250_994 = imp_986->iananame;

Updating SSA information for statement D.45251_995 = imp_986->ianacode;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45249_993, D.45250_994, D.45252_996);

Updating SSA information for statement D.45256_997 = map_136->rm_encoding;

Updating SSA information for statement D.45257_998 = _zstr (D.45256_997);



Registering new PHI nodes in block #368

Updating SSA information for statement D.44471_999 = smh_186->mparams;

Updating SSA information for statement D.44821_1000 = D.44471_999->ndlb;



Registering new PHI nodes in block #369

Updating SSA information for statement D.45248_1004 = map_136->rm_pt;



Registering new PHI nodes in block #370

Updating SSA information for statement D.45248_1006 = map_136->rm_pt;

Updating SSA information for statement D.45251_1008 = imp_986->ianacode;



Registering new PHI nodes in block #371

Updating SSA information for statement D.45250_1011 = imp_986->iananame;

Updating SSA information for statement D.45260_1012 = strcasecmp (rm_encoding_137, D.45250_1011);



Registering new PHI nodes in block #372



Registering new PHI nodes in block #373

Updating SSA information for statement D.45263_1014 = map_136->rm_rate;

Updating SSA information for statement D.45264_1015 = imp_986->samples_per_second;



Registering new PHI nodes in block #374

Updating SSA information for statement matches[m_idx_110].imp = imp_986;

Updating SSA information for statement matches[m_idx_110].map = map_136;

Updating SSA information for statement D.45250_1016 = imp_986->iananame;

Updating SSA information for statement D.45251_1017 = imp_986->ianacode;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45250_1016, D.45252_1018);



Registering new PHI nodes in block #375



Registering new PHI nodes in block #376



Registering new PHI nodes in block #378

Updating SSA information for statement map_1022 = map_136->rm_next;



Registering new PHI nodes in block #380

Updating SSA information for statement D.45002_1023 = smh_186->crypto_mode;



Registering new PHI nodes in block #381

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");



Registering new PHI nodes in block #382



Registering new PHI nodes in block #383



Registering new PHI nodes in block #384

Updating SSA information for statement greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);



Registering new PHI nodes in block #385

Updating SSA information for statement v_engine_189->codec_negotiated = 1;



Registering new PHI nodes in block #390



Registering new PHI nodes in block #386

Updating SSA information for statement D.45275_1032 = matches[j_141].map;

Updating SSA information for statement D.45276_1033 = D.45275_1032->rm_encoding;

Updating SSA information for statement D.45275_1034 = matches[j_141].map;

Updating SSA information for statement D.45277_1035 = D.45275_1034->rm_fmtp;

Updating SSA information for statement D.45275_1036 = matches[j_141].map;

Updating SSA information for statement D.45278_1037 = D.45275_1036->rm_pt;

Updating SSA information for statement D.45280_1039 = matches[j_141].imp;

Updating SSA information for statement D.45281_1040 = D.45280_1039->samples_per_second;

Updating SSA information for statement D.45280_1041 = matches[j_141].imp;

Updating SSA information for statement D.45282_1042 = D.45280_1041->microseconds_per_packet;

Updating SSA information for statement pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);



Registering new PHI nodes in block #387

Updating SSA information for statement v_engine_189->cur_payload_map = pmap_1045;

Updating SSA information for statement D.45287_1046 = v_engine_189->cur_payload_map;

Updating SSA information for statement D.45287_1046->current = 1;

Updating SSA information for statement D.45288_1047 = v_engine_189->rtp_session;



Registering new PHI nodes in block #388

Updating SSA information for statement D.45288_1048 = v_engine_189->rtp_session;

Updating SSA information for statement D.45291_1049 = pmap_1045->pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.45288_1048, D.45291_1049);



Registering new PHI nodes in block #389

Updating SSA information for statement mimp_1050 = matches[j_141].imp;

Updating SSA information for statement map_1051 = matches[j_141].map;

Updating SSA information for statement D.45256_1052 = map_1051->rm_encoding;

Updating SSA information for statement D.45292_1053 = switch_core_perform_session_strdup (session_161(D), D.45256_1052, "src/switch_core_media.c", &__func__, 3804);

Updating SSA information for statement pmap_1045->rm_encoding = D.45292_1053;

Updating SSA information for statement D.45248_1054 = map_1051->rm_pt;

Updating SSA information for statement pmap_1045->recv_pt = D.45293_1055;

Updating SSA information for statement D.45263_1056 = map_1051->rm_rate;

Updating SSA information for statement pmap_1045->rm_rate = D.45263_1056;

Updating SSA information for statement D.45294_1057 = mimp_1050->microseconds_per_packet;

Updating SSA information for statement pmap_1045->codec_ms = D.45296_1059;

Updating SSA information for statement D.45086_1060 = connection_125->c_address;

Updating SSA information for statement D.45297_1061 = switch_core_perform_session_strdup (session_161(D), D.45086_1060, "src/switch_core_media.c", &__func__, 3810);

Updating SSA information for statement pmap_1045->remote_sdp_ip = D.45297_1061;

Updating SSA information for statement D.44697_1062 = m_28->m_port;

Updating SSA information for statement pmap_1045->remote_sdp_port = D.45088_1063;

Updating SSA information for statement D.45298_1064 = map_1051->rm_fmtp;

Updating SSA information for statement D.45299_1065 = switch_core_perform_session_strdup (session_161(D), D.45298_1064, "src/switch_core_media.c", &__func__, 3813);

Updating SSA information for statement pmap_1045->rm_fmtp = D.45299_1065;

Updating SSA information for statement D.45248_1066 = map_1051->rm_pt;

Updating SSA information for statement pmap_1045->agreed_pt = D.45293_1067;



Registering new PHI nodes in block #391

Updating SSA information for statement D.45287_1069 = v_engine_189->cur_payload_map;

Updating SSA information for statement D.45300_1070 = D.45287_1069->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.45301_1071);

Updating SSA information for statement D.44530_1072 = session_161(D)->channel;

Updating SSA information for statement D.45287_1073 = v_engine_189->cur_payload_map;

Updating SSA information for statement D.45302_1074 = D.45287_1073->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_1072, "remote_video_ip", D.45302_1074, 1);

Updating SSA information for statement D.44530_1075 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_1075, "remote_video_port", &tmp, 1);

Updating SSA information for statement D.44530_1076 = session_161(D)->channel;

Updating SSA information for statement D.45287_1077 = v_engine_189->cur_payload_map;

Updating SSA information for statement D.45303_1078 = D.45287_1077->rm_fmtp;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_1076, "rtp_video_fmtp", D.45303_1078, 1);

Updating SSA information for statement D.45287_1079 = v_engine_189->cur_payload_map;

Updating SSA information for statement D.45304_1080 = D.45287_1079->agreed_pt;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.45305_1081);

Updating SSA information for statement D.44530_1082 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_1082, "rtp_video_pt", &tmp, 1);

Updating SSA information for statement switch_core_media_check_video_codecs (session_161(D));

Updating SSA information for statement D.45287_1083 = v_engine_189->cur_payload_map;

Updating SSA information for statement D.45306_1084 = D.45287_1083->recv_pt;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.45307_1085);

Updating SSA information for statement D.44530_1086 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_1086, "rtp_video_recv_pt", &tmp, 1);



Registering new PHI nodes in block #392



Registering new PHI nodes in block #393

Updating SSA information for statement D.45314_1092 = switch_core_codec_ready (D.45313_1091);



Registering new PHI nodes in block #394

Updating SSA information for statement v_engine_189->reset_codec = 1;



Registering new PHI nodes in block #395

Updating SSA information for statement D.45317_1093 = switch_core_media_set_video_codec (session_161(D), 0);



Registering new PHI nodes in block #396

Updating SSA information for statement check_ice (smh_186, 1, sdp_198, m_28);



Registering new PHI nodes in block #397

Updating SSA information for statement m_1094 = m_28->m_next;



Registering new PHI nodes in block #399



Registering new PHI nodes in block #400

Updating SSA information for statement sdp_parser_free (parser_196);



Registering new PHI nodes in block #401

Updating SSA information for statement D.44471_1095 = smh_186->mparams;

Updating SSA information for statement D.44471_1095->cng_pt = cng_pt_27;



Registering new PHI nodes in block #402



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 403
Number of blocks to update: 402 (100%)

Affected blocks


Scope blocks after cleanups:

{ Scope block #0 
  uint8_t match;
  switch_payload_t best_te;
  switch_payload_t te;
  switch_payload_t cng_pt;
  struct sdp_media_t * m;
  struct sdp_attribute_t * attr;
  int ptime;
  int dptime;
  int maxptime;
  int dmaxptime;
  int sendonly;
  int recvonly;
  int greedy;
  int x;
  int skip;
  struct switch_channel_t * channel;
  const char * val;
  const char * crypto;
  int got_crypto;
  int got_video_crypto;
  int got_audio;
  int got_avp;
  int got_video_avp;
  int got_video_savp;
  int got_savp;
  int got_udptl;
  int got_webrtc;
  int scrooge;
  struct sdp_parser_t * parser;
  struct sdp_session_t * sdp;
  int reneg;
  const struct switch_codec_implementation_t * * codec_array;
  int total_codecs;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  uint32_t near_rate;
  const struct switch_codec_implementation_t * mimp;
  const struct switch_codec_implementation_t * near_match;
  struct sdp_rtpmap_t * mmap;
  struct sdp_rtpmap_t * near_map;
  struct matches matches[30];
  struct matches near_matches[30];
  int codec_ms;
  uint32_t remote_codec_rate;
  uint32_t fmtp_remote_codec_rate;
  const char * tmp;
  int m_idx;
  int nm_idx;
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_negotiate_sdp";
  static const char __func__[32] = "switch_core_media_negotiate_sdp";
  void done = <<< error >>>; (unused)

  { Scope block #0 
    size_t __s1_len; (unused)
    size_t __s2_len;

    { Scope block #0 
      const unsigned char * __s1;
      register int __result;

    }

  }

  { Scope block #0 
    struct sdp_connection_t * connection;
    struct switch_core_session_t * other_session;

    { Scope block #0 
      struct switch_t38_options_t * t38_options;

      { Scope block #0 
        const char * var;
        int pass;

        { Scope block #0 
          struct switch_channel_t * other_channel;
          struct switch_core_session_message_t * msg;
          char * remote_host;
          switch_port_t remote_port;
          char tmp[32];

          { Scope block #0 
            size_t __s1_len; (unused)
            size_t __s2_len; (unused)

          }

          { Scope block #0 
            const char * err;

          }

        }

      }

    }

    { Scope block #0 
      struct sdp_rtpmap_t * map;

      { Scope block #0 
        int crypto_tag;

      }

      { Scope block #0 
        int32_t i;
        const char * rm_encoding;
        uint32_t map_bit_rate;
        struct switch_codec_fmtp_t codec_fmtp;

        { Scope block #0 
          const struct switch_codec_implementation_t * imp;
          uint32_t bit_rate;
          uint32_t codec_rate;

        }

      }

      { Scope block #0 
        int j;

        { Scope block #0 
          const struct switch_codec_implementation_t * search[1];
          char * prefs[1];
          char tmp[80];
          int num;
          const struct switch_codec_implementation_t * timp;

        }

      }

      { Scope block #0 
        int j;

        { Scope block #0 
          struct payload_map_t * pmap;

        }

      }

      { Scope block #0 
        char tmp[50];

      }

    }

    { Scope block #0 
      struct sdp_rtpmap_t * map;
      const char * rm_encoding;
      const struct switch_codec_implementation_t * mimp;
      int vmatch;
      int i;

      { Scope block #0 
        size_t __s1_len; (unused)
        size_t __s2_len;

        { Scope block #0 
          const unsigned char * __s1;
          register int __result;

        }

      }

      { Scope block #0 
        int crypto_tag;

      }

      { Scope block #0 
        const struct switch_codec_implementation_t * imp;

      }

      { Scope block #0 
        char tmp[50];
        int j;

        { Scope block #0 
          struct payload_map_t * pmap;

        }

      }

    }

  }

}
switch_core_media_negotiate_sdp (struct switch_core_session_t * session, const char * r_sdp, uint8_t * proceed, switch_sdp_type_t sdp_type)
{
  struct payload_map_t * pmap;
  int j;
  char tmp[50];
  const struct switch_codec_implementation_t * imp;
  int crypto_tag;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  int i;
  int vmatch;
  const struct switch_codec_implementation_t * mimp;
  const char * rm_encoding;
  struct sdp_rtpmap_t * map;
  char tmp[50];
  struct payload_map_t * pmap;
  int j;
  const struct switch_codec_implementation_t * timp;
  int num;
  char tmp[80];
  char * prefs[1];
  const struct switch_codec_implementation_t * search[1];
  int j;
  uint32_t codec_rate;
  uint32_t bit_rate;
  const struct switch_codec_implementation_t * imp;
  struct switch_codec_fmtp_t codec_fmtp;
  uint32_t map_bit_rate;
  const char * rm_encoding;
  int32_t i;
  int crypto_tag;
  struct sdp_rtpmap_t * map;
  const char * err;
  char tmp[32];
  switch_port_t remote_port;
  char * remote_host;
  struct switch_core_session_message_t * msg;
  struct switch_channel_t * other_channel;
  int pass;
  const char * var;
  struct switch_t38_options_t * t38_options;
  struct switch_core_session_t * other_session;
  struct sdp_connection_t * connection;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  static const char __func__[32] = "switch_core_media_negotiate_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_negotiate_sdp";
  int nm_idx;
  int m_idx;
  const char * tmp;
  uint32_t fmtp_remote_codec_rate;
  uint32_t remote_codec_rate;
  int codec_ms;
  struct matches near_matches[30];
  struct matches matches[30];
  struct sdp_rtpmap_t * near_map;
  struct sdp_rtpmap_t * mmap;
  const struct switch_codec_implementation_t * near_match;
  const struct switch_codec_implementation_t * mimp;
  uint32_t near_rate;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  int total_codecs;
  const struct switch_codec_implementation_t * * codec_array;
  int reneg;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  int scrooge;
  int got_webrtc;
  int got_udptl;
  int got_savp;
  int got_video_savp;
  int got_video_avp;
  int got_avp;
  int got_audio;
  int got_video_crypto;
  int got_crypto;
  const char * crypto;
  const char * val;
  struct switch_channel_t * channel;
  int skip;
  int x;
  int greedy;
  int recvonly;
  int sendonly;
  int dmaxptime;
  int maxptime;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  switch_payload_t cng_pt;
  switch_payload_t te;
  switch_payload_t best_te;
  uint8_t match;
  switch_status_t D.45317;
  switch_bool_t D.45314;
  struct switch_codec_t * D.45313;
  _Bool D.45310;
  _Bool D.45309;
  _Bool D.45308;
  int D.45307;
  switch_payload_t D.45306;
  int D.45305;
  switch_payload_t D.45304;
  char * D.45303;
  char * D.45302;
  int D.45301;
  switch_port_t D.45300;
  char * D.45299;
  const char * D.45298;
  char * D.45297;
  uint32_t D.45296;
  int D.45295;
  const int D.45294;
  unsigned char D.45293;
  char * D.45292;
  switch_payload_t D.45291;
  struct switch_rtp_t * D.45288;
  struct payload_map_t * D.45287;
  uint32_t D.45284;
  int D.45283;
  const int D.45282;
  const uint32_t D.45281;
  const struct switch_codec_implementation_t * D.45280;
  uint32_t D.45279;
  <unnamed-unsigned:7> D.45278;
  const char * D.45277;
  const char * D.45276;
  struct sdp_rtpmap_t * D.45275;
  _Bool D.45268;
  _Bool D.45267;
  const uint32_t D.45264;
  long unsigned int D.45263;
  int D.45260;
  int D.45257;
  const char * D.45256;
  int D.45252;
  const switch_payload_t D.45251;
  char * const D.45250;
  int D.45249;
  <unnamed-unsigned:7> D.45248;
  uint32_t D.45245;
  switch_call_direction_t D.45242;
  const switch_codec_type_t D.45239;
  const struct switch_codec_implementation_t * * D.45238;
  unsigned int D.45237;
  unsigned int i.99;
  int D.45229;
  const char * D.45228;
  int D.45223;
  int D.45220;
  char * D.45215;
  short unsigned int D.45214;
  int D.45213;
  int D.45210;
  const unsigned char D.45209;
  char * D.45208;
  int D.45207;
  const unsigned char D.45206;
  const unsigned char * D.45205;
  _Bool D.45202;
  _Bool D.45201;
  int D.45200;
  const unsigned char D.45199;
  char * D.45198;
  int D.45197;
  const unsigned char D.45196;
  const unsigned char * D.45195;
  _Bool D.45192;
  _Bool D.45191;
  int D.45190;
  const unsigned char D.45189;
  char * D.45188;
  int D.45187;
  const unsigned char D.45186;
  const unsigned char * D.45185;
  _Bool D.45182;
  _Bool D.45181;
  _Bool D.45180;
  int D.45179;
  const unsigned char D.45178;
  char[2] * D.45177;
  int D.45176;
  const unsigned char D.45175;
  int D.39088;
  int iftmp.98;
  int D.39089;
  int D.45169;
  uint8_t D.45165;
  uint8_t D.45164;
  const char * D.45161;
  int D.45158;
  int D.45155;
  int D.45152;
  int D.45147;
  int D.45144;
  int D.45141;
  int D.45138;
  int D.45126;
  const char * D.45125;
  int D.45121;
  switch_call_direction_t D.45115;
  int D.45112;
  switch_payload_t D.45111;
  uint32_t D.45110;
  int32_t D.45108;
  switch_status_t D.45100;
  uint32_t D.45099;
  switch_bool_t D.45096;
  struct switch_codec_t * D.45095;
  int D.45094;
  switch_payload_t D.45093;
  int D.45090;
  char * D.45089;
  short unsigned int D.45088;
  char * D.45087;
  const char * D.45086;
  const char * D.45083;
  int D.45081;
  const char * D.45080;
  int D.45074;
  int D.45071;
  const char * D.45067;
  int iftmp.97;
  uint32_t D.45065;
  const int D.45064;
  uint32_t D.45063;
  int D.45062;
  const int D.45061;
  const uint32_t D.45060;
  int D.45057;
  const uint32_t D.45056;
  unsigned char D.45055;
  <unnamed-unsigned:7> D.45054;
  char * D.45053;
  char * const D.45052;
  char * D.45051;
  const char * D.45050;
  switch_payload_t D.45049;
  uint32_t D.45044;
  int D.45043;
  const int D.45042;
  const uint32_t D.45041;
  const struct switch_codec_implementation_t * D.45040;
  uint32_t D.45039;
  <unnamed-unsigned:7> D.45038;
  const char * D.45037;
  const char * D.45036;
  struct sdp_rtpmap_t * D.45035;
  int near_rate.96;
  int D.45029;
  const uint32_t D.45028;
  char * const D.45027;
  int D.45026;
  const int D.45025;
  const unsigned int iftmp.95;
  char * const D.45014;
  int D.45013;
  _Bool D.45010;
  _Bool D.45009;
  _Bool D.45008;
  _Bool D.45005;
  _Bool D.45004;
  _Bool D.45003;
  switch_rtp_crypto_mode_t D.45002;
  _Bool D.45000;
  _Bool D.44999;
  _Bool D.44998;
  int D.44997;
  int codec_rate.94;
  int D.44994;
  _Bool D.44992;
  _Bool D.44991;
  _Bool D.44990;
  const uint32_t D.44985;
  int D.44980;
  int D.44978;
  _Bool D.44975;
  _Bool D.44974;
  _Bool D.44973;
  _Bool D.44970;
  _Bool D.44969;
  int D.44964;
  int D.44961;
  _Bool D.44958;
  _Bool D.44957;
  _Bool D.44956;
  _Bool D.44953;
  _Bool D.44952;
  _Bool D.44951;
  const uint32_t D.44948;
  int D.44945;
  int iftmp.93;
  _Bool D.44939;
  int D.44938;
  int D.44937;
  int D.44935;
  int D.44931;
  const int D.44930;
  int D.44929;
  const switch_payload_t D.44928;
  char * const D.44927;
  int remote_codec_rate.92;
  int D.44925;
  const switch_codec_type_t D.44922;
  const int D.44921;
  const struct switch_codec_implementation_t * * D.44920;
  unsigned int D.44919;
  unsigned int i.91;
  uint32_t D.44915;
  int D.44912;
  int D.44909;
  switch_status_t D.44906;
  int D.44901;
  int D.44897;
  int D.44894;
  const char * D.44893;
  int D.44890;
  const char * D.44889;
  unsigned char D.44886;
  uint32_t D.44885;
  uint32_t D.44884;
  _Bool D.44879;
  _Bool D.44878;
  _Bool D.44877;
  _Bool D.44870;
  switch_payload_t D.44869;
  int D.44868;
  int D.44863;
  int32_t D.44858;
  int D.44857;
  <unnamed-unsigned:7> D.44856;
  long unsigned int D.44855;
  long unsigned int D.44854;
  int D.44848;
  int D.44839;
  _Bool D.44836;
  _Bool D.44835;
  _Bool D.44834;
  _Bool D.44831;
  _Bool D.44830;
  _Bool D.44829;
  int D.44826;
  const char * D.44825;
  unsigned int D.44822;
  switch_core_media_NDLB_t D.44821;
  int D.44818;
  int D.44815;
  int D.44810;
  int D.44805;
  char * D.44800;
  short unsigned int D.44799;
  int D.44798;
  int D.44795;
  int D.44790;
  int D.44787;
  int D.44784;
  int D.44781;
  _Bool D.44779;
  _Bool D.44778;
  _Bool D.44777;
  char * D.44773;
  struct switch_channel_t * D.44772;
  const char * err.90;
  switch_status_t D.44768;
  int D.44767;
  int D.44766;
  char * D.44765;
  char * D.44764;
  switch_port_t D.44762;
  char * D.44760;
  int D.39032;
  _Bool D.44758;
  _Bool D.44757;
  _Bool D.44756;
  uint16_t D.44753;
  char * D.44752;
  const char * D.44751;
  struct payload_map_t * D.44750;
  int D.44747;
  const char * D.44746;
  int D.44743;
  const char * D.44742;
  char * D.44741;
  char * D.44740;
  uint32_t D.44737;
  struct switch_core_session_t * other_session.89;
  switch_status_t D.44733;
  uint8_t D.44730;
  uint32_t D.44728;
  uint32_t D.44726;
  uint32_t D.44724;
  uint32_t D.44723;
  int D.44716;
  int D.44707;
  uint32_t D.44706;
  int D.44703;
  const char * D.44702;
  int D.44699;
  long unsigned int D.44697;
  sdp_media_e D.44681;
  _Bool D.44678;
  _Bool D.44677;
  _Bool D.44676;
  sdp_proto_e D.44675;
  int D.44672;
  const char * D.44669;
  sdp_proto_e D.44666;
  const char * D.44665;
  const char * D.44663;
  const char * D.44661;
  int D.44655;
  struct switch_media_bug_t * D.44649;
  int D.44640;
  int D.44639;
  int D.44636;
  int D.44635;
  int32_t D.44631;
  _Bool D.44626;
  _Bool D.44625;
  _Bool D.44624;
  int D.44621;
  const char * D.44619;
  int D.44616;
  int D.44614;
  uint8_t D.44606;
  struct switch_rtp_t * D.44605;
  int D.44602;
  int D.44598;
  int D.44594;
  int D.44591;
  const char * D.44590;
  int D.44588;
  const unsigned char D.44587;
  char * D.44586;
  int D.44585;
  const unsigned char D.44584;
  const unsigned char * D.44583;
  _Bool D.44580;
  _Bool D.44579;
  int D.44578;
  const unsigned char D.44577;
  char * D.44576;
  int D.44575;
  const unsigned char D.44574;
  const unsigned char * D.44573;
  _Bool D.44570;
  _Bool D.44569;
  int D.44568;
  const unsigned char D.44567;
  char * D.44566;
  int D.44565;
  const unsigned char D.44564;
  const unsigned char * D.44563;
  _Bool D.44560;
  _Bool D.44559;
  _Bool D.44558;
  int D.44557;
  const unsigned char D.44556;
  char[8] * D.44555;
  int D.44554;
  const unsigned char D.44553;
  int D.39007;
  int iftmp.88;
  int D.39008;
  const char * D.44548;
  struct sdp_connection_t * D.44546;
  _Bool D.44544;
  _Bool D.44543;
  _Bool D.44542;
  unsigned char D.44541;
  unsigned char D.44540;
  int D.44533;
  struct switch_channel_t * D.44530;
  unsigned int D.44529;
  char * D.44526;
  unsigned int D.44523;
  unsigned int D.44522;
  switch_rtp_bug_flag_t D.44521;
  char * D.44518;
  _Bool D.44515;
  int D.44514;
  int D.44513;
  switch_rtp_bug_flag_t D.44512;
  char * D.44509;
  char * D.44508;
  const char * D.44507;
  struct sdp_origin_t * D.44506;
  int D.44502;
  int D.44498;
  int D.44494;
  int32_t D.44491;
  int32_t D.44490;
  int D.44485;
  struct switch_channel_t * D.44482;
  struct switch_core_session_t * D.44481;
  int D.44478;
  int D.44473;
  size_t D.44472;
  struct switch_core_media_params_t * D.44471;
  uint8_t D.44470;

<bb 2>:
  match_148 = 0;
  # DEBUG match => match_148
  best_te_149 = 0;
  # DEBUG best_te => best_te_149
  te_150 = 0;
  # DEBUG te => te_150
  cng_pt_151 = 0;
  # DEBUG cng_pt => cng_pt_151
  ptime_152 = 0;
  # DEBUG ptime => ptime_152
  dptime_153 = 0;
  # DEBUG dptime => dptime_153
  maxptime_154 = 0;
  # DEBUG maxptime => maxptime_154
  dmaxptime_155 = 0;
  # DEBUG dmaxptime => dmaxptime_155
  sendonly_156 = 0;
  # DEBUG sendonly => sendonly_156
  recvonly_157 = 0;
  # DEBUG recvonly => recvonly_157
  greedy_158 = 0;
  # DEBUG greedy => greedy_158
  x_159 = 0;
  # DEBUG x => x_159
  skip_160 = 0;
  # DEBUG skip => skip_160
  channel_162 = switch_core_session_get_channel (session_161(D));
  # DEBUG channel => channel_162
  crypto_163 = 0B;
  # DEBUG crypto => crypto_163
  got_crypto_164 = 0;
  # DEBUG got_crypto => got_crypto_164
  got_video_crypto_165 = 0;
  # DEBUG got_video_crypto => got_video_crypto_165
  got_audio_166 = 0;
  # DEBUG got_audio => got_audio_166
  got_avp_167 = 0;
  # DEBUG got_avp => got_avp_167
  got_video_avp_168 = 0;
  # DEBUG got_video_avp => got_video_avp_168
  got_video_savp_169 = 0;
  # DEBUG got_video_savp => got_video_savp_169
  got_savp_170 = 0;
  # DEBUG got_savp => got_savp_170
  got_udptl_171 = 0;
  # DEBUG got_udptl => got_udptl_171
  got_webrtc_172 = 0;
  # DEBUG got_webrtc => got_webrtc_172
  scrooge_173 = 0;
  # DEBUG scrooge => scrooge_173
  parser_174 = 0B;
  # DEBUG parser => parser_174
  reneg_175 = 1;
  # DEBUG reneg => reneg_175
  near_rate_176 = 0;
  # DEBUG near_rate => near_rate_176
  mimp_177 = 0B;
  # DEBUG mimp => mimp_177
  near_match_178 = 0B;
  # DEBUG near_match => near_match_178
  mmap_179 = 0B;
  # DEBUG mmap => mmap_179
  near_map_180 = 0B;
  # DEBUG near_map => near_map_180
  matches = {};
  near_matches = {};
  codec_ms_181 = 0;
  # DEBUG codec_ms => codec_ms_181
  remote_codec_rate_182 = 0;
  # DEBUG remote_codec_rate => remote_codec_rate_182
  fmtp_remote_codec_rate_183 = 0;
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_183
  m_idx_184 = 0;
  # DEBUG m_idx => m_idx_184
  nm_idx_185 = 0;
  # DEBUG nm_idx => nm_idx_185
  if (session_161(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_186 = session_161(D)->media_handle;
  # DEBUG smh => smh_186
  if (smh_186 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.44470_187 = 0;
  goto <bb 402>;

<bb 6>:
  a_engine_188 = &smh_186->engines;
  # DEBUG a_engine => a_engine_188
  v_engine_189 = &smh_186->engines[1];
  # DEBUG v_engine => v_engine_189
  codec_array_190 = &smh_186->codecs;
  # DEBUG codec_array => codec_array_190
  D.44471_191 = smh_186->mparams;
  total_codecs_192 = D.44471_191->num_codecs;
  # DEBUG total_codecs => total_codecs_192
  D.44472_194 = strlen (r_sdp_193(D));
  D.44473_195 = (int) D.44472_194;
  parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
  # DEBUG parser => parser_196
  if (parser_196 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.44470_197 = 0;
  goto <bb 402>;

<bb 8>:
  sdp_198 = sdp_session (parser_196);
  # DEBUG sdp => sdp_198
  if (sdp_198 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  sdp_parser_free (parser_196);
  D.44470_199 = 0;
  goto <bb 402>;

<bb 10>:
  D.44478_200 = dtls_ok (session_161(D));
  if (D.44478_200 != 0)
    goto <bb 11>;
  else
    goto <bb 14>;

<bb 11>:
  D.44481_201 = smh_186->session;
  D.44482_202 = D.44481_201->channel;
  tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
  # DEBUG tmp => tmp_203
  if (tmp_203 != 0B)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 12>:
  D.44485_204 = switch_false (tmp_203);
  if (D.44485_204 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.44481_205 = smh_186->session;
  D.44482_206 = D.44481_205->channel;
  switch_channel_clear_flag (D.44482_206, 111);
  D.44481_207 = smh_186->session;
  D.44482_208 = D.44481_207->channel;
  switch_channel_clear_flag (D.44482_208, 109);

<bb 14>:
  switch_core_session_parse_crypto_prefs (session_161(D));
  clear_pmaps (a_engine_188);
  clear_pmaps (v_engine_189);
  if (proceed_209(D) != 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  *proceed_209(D) = 1;

<bb 16>:
  D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
  greedy_211 = D.44490_210 != 0;
  # DEBUG greedy => greedy_211
  D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
  scrooge_213 = D.44491_212 != 0;
  # DEBUG scrooge => scrooge_213
  val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
  # DEBUG val => val_214
  if (val_214 != 0B)
    goto <bb 17>;
  else
    goto <bb 24>;

<bb 17>:
  D.44494_215 = strcasecmp (val_214, "generous");
  if (D.44494_215 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  greedy_216 = 0;
  # DEBUG greedy => greedy_216
  scrooge_217 = 0;
  # DEBUG scrooge => scrooge_217
  goto <bb 24>;

<bb 19>:
  D.44498_218 = strcasecmp (val_214, "greedy");
  if (D.44498_218 == 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  greedy_219 = 1;
  # DEBUG greedy => greedy_219
  scrooge_220 = 0;
  # DEBUG scrooge => scrooge_220
  goto <bb 24>;

<bb 21>:
  D.44502_221 = strcasecmp (val_214, "scrooge");
  if (D.44502_221 == 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  scrooge_222 = 1;
  # DEBUG scrooge => scrooge_222
  greedy_223 = 1;
  # DEBUG greedy => greedy_223
  goto <bb 24>;

<bb 23>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);

<bb 24>:
  # greedy_47 = PHI <greedy_211(16), greedy_216(18), greedy_219(20), greedy_223(22), greedy_211(23)>
  # scrooge_80 = PHI <scrooge_213(16), scrooge_217(18), scrooge_220(20), scrooge_222(22), scrooge_213(23)>
  # DEBUG scrooge => scrooge_80
  # DEBUG greedy => greedy_47
  D.44506_224 = sdp_198->sdp_origin;
  D.44507_225 = D.44506_224->o_username;
  D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
  smh_186->origin = D.44508_226;
  D.44509_227 = smh_186->origin;
  if (D.44509_227 != 0B)
    goto <bb 25>;
  else
    goto <bb 31>;

<bb 25>:
  D.44471_228 = smh_186->mparams;
  D.44512_229 = D.44471_228->auto_rtp_bugs;
  D.44513_230 = (int) D.44512_229;
  D.44514_231 = D.44513_230 & 1;
  D.44515_232 = (_Bool) D.44514_231;
  if (D.44515_232 != 0)
    goto <bb 26>;
  else
    goto <bb 28>;

<bb 26>:
  D.44509_233 = smh_186->origin;
  D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");
  if (D.44518_234 != 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.44521_235 = a_engine_188->rtp_bugs;
  D.44522_236 = D.44521_235 | 1;
  a_engine_188->rtp_bugs = D.44522_236;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");

<bb 28>:
  D.44471_237 = smh_186->mparams;
  D.44512_238 = D.44471_237->auto_rtp_bugs;
  D.44523_239 = D.44512_238 & 2;
  if (D.44523_239 != 0)
    goto <bb 29>;
  else
    goto <bb 31>;

<bb 29>:
  D.44509_240 = smh_186->origin;
  D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
  if (D.44526_241 != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  D.44521_242 = a_engine_188->rtp_bugs;
  D.44529_243 = D.44521_242 | 2;
  a_engine_188->rtp_bugs = D.44529_243;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");

<bb 31>:
  D.44530_244 = session_161(D)->channel;
  val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
  # DEBUG val => val_245
  if (val_245 != 0B)
    goto <bb 32>;
  else
    goto <bb 34>;

<bb 32>:
  D.44533_246 = switch_true (val_245);
  if (D.44533_246 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.44530_247 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_247, 93, 1);

<bb 34>:
  m_248 = sdp_198->sdp_media;
  # DEBUG m => m_248
  if (m_248 != 0B)
    goto <bb 35>;
  else
    goto <bb 47>;

<bb 35>:
  D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
  D.44541_250 = D.44540_249 & 6;
  D.44542_251 = D.44541_250 == 2;
  D.44543_252 = D.44541_250 == 0;
  D.44544_253 = D.44542_251 || D.44543_252;
  if (D.44544_253 != 0)
    goto <bb 46>;
  else
    goto <bb 36>;

<bb 36>:
  D.44546_254 = m_248->m_connections;
  if (D.44546_254 != 0B)
    goto <bb 37>;
  else
    goto <bb 47>;

<bb 37>:
  D.44546_255 = m_248->m_connections;
  D.44548_256 = D.44546_255->c_address;
  if (D.44548_256 != 0B)
    goto <bb 38>;
  else
    goto <bb 47>;

<bb 38>:
  __s2_len_257 = 7;
  # DEBUG __s2_len => __s2_len_257
  if (__s2_len_257 <= 3)
    goto <bb 39>;
  else
    goto <bb 44>;

<bb 39>:
  D.44546_258 = m_248->m_connections;
  __s1_259 = D.44546_258->c_address;
  # DEBUG __s1 => __s1_259
  D.44553_260 = *__s1_259;
  D.44554_261 = (int) D.44553_260;
  D.44555_262 = "0.0.0.0";
  D.44556_263 = MEM[(const unsigned char *)D.44555_262];
  D.44557_264 = (int) D.44556_263;
  __result_265 = D.44554_261 - D.44557_264;
  # DEBUG __result => __result_265
  D.44558_266 = __s2_len_257 != 0;
  D.44559_267 = __result_265 == 0;
  D.44560_268 = D.44558_266 && D.44559_267;
  if (D.44560_268 != 0)
    goto <bb 40>;
  else
    goto <bb 43>;

<bb 40>:
  D.44563_269 = __s1_259 + 1;
  D.44564_270 = *D.44563_269;
  D.44565_271 = (int) D.44564_270;
  D.44566_272 = &"0.0.0.0"[1];
  D.44567_273 = MEM[(const unsigned char *)D.44566_272];
  D.44568_274 = (int) D.44567_273;
  __result_275 = D.44565_271 - D.44568_274;
  # DEBUG __result => __result_275
  D.44569_276 = __s2_len_257 > 1;
  D.44559_277 = __result_275 == 0;
  D.44570_278 = D.44569_276 && D.44559_277;
  if (D.44570_278 != 0)
    goto <bb 41>;
  else
    goto <bb 43>;

<bb 41>:
  D.44573_279 = __s1_259 + 2;
  D.44574_280 = *D.44573_279;
  D.44575_281 = (int) D.44574_280;
  D.44576_282 = &"0.0.0.0"[2];
  D.44577_283 = MEM[(const unsigned char *)D.44576_282];
  D.44578_284 = (int) D.44577_283;
  __result_285 = D.44575_281 - D.44578_284;
  # DEBUG __result => __result_285
  D.44579_286 = __s2_len_257 > 2;
  D.44559_287 = __result_285 == 0;
  D.44580_288 = D.44579_286 && D.44559_287;
  if (D.44580_288 != 0)
    goto <bb 42>;
  else
    goto <bb 43>;

<bb 42>:
  D.44583_289 = __s1_259 + 3;
  D.44584_290 = *D.44583_289;
  D.44585_291 = (int) D.44584_290;
  D.44586_292 = &"0.0.0.0"[3];
  D.44587_293 = MEM[(const unsigned char *)D.44586_292];
  D.44588_294 = (int) D.44587_293;
  __result_295 = D.44585_291 - D.44588_294;
  # DEBUG __result => __result_295

<bb 43>:
  # __result_123 = PHI <__result_265(39), __result_275(40), __result_285(41), __result_295(42)>
  # DEBUG __result => __result_123
  D.39007_296 = __result_123;
  iftmp.88_297 = D.39007_296;
  goto <bb 45>;

<bb 44>:
  D.44546_298 = m_248->m_connections;
  D.44548_299 = D.44546_298->c_address;
  iftmp.88_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");

<bb 45>:
  # iftmp.88_143 = PHI <iftmp.88_297(43), iftmp.88_300(44)>
  D.39008_301 = iftmp.88_143;
  if (D.39008_301 == 0)
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  sendonly_302 = 2;
  # DEBUG sendonly => sendonly_302

<bb 47>:
  # sendonly_42 = PHI <sendonly_156(34), sendonly_156(36), sendonly_156(37), sendonly_156(45), sendonly_302(46)>
  # DEBUG sendonly => sendonly_42
  attr_303 = sdp_198->sdp_attributes;
  # DEBUG attr => attr_303
  goto <bb 66>;

<bb 48>:
  D.44590_304 = attr_29->a_name;
  D.44591_305 = _zstr (D.44590_304);
  if (D.44591_305 != 0)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  // predicted unlikely by continue predictor.
  goto <bb 65>;

<bb 50>:
  D.44590_306 = attr_29->a_name;
  D.44594_307 = strcasecmp (D.44590_306, "sendonly");
  if (D.44594_307 == 0)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  sendonly_308 = 1;
  # DEBUG sendonly => sendonly_308
  D.44530_309 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
  goto <bb 65>;

<bb 52>:
  D.44590_310 = attr_29->a_name;
  D.44598_311 = strcasecmp (D.44590_310, "inactive");
  if (D.44598_311 == 0)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  sendonly_312 = 1;
  # DEBUG sendonly => sendonly_312
  D.44530_313 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
  goto <bb 65>;

<bb 54>:
  D.44590_314 = attr_29->a_name;
  D.44602_315 = strcasecmp (D.44590_314, "recvonly");
  if (D.44602_315 == 0)
    goto <bb 55>;
  else
    goto <bb 58>;

<bb 55>:
  D.44530_316 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
  recvonly_317 = 1;
  # DEBUG recvonly => recvonly_317
  D.44605_318 = a_engine_188->rtp_session;
  D.44606_319 = switch_rtp_ready (D.44605_318);
  if (D.44606_319 != 0)
    goto <bb 56>;
  else
    goto <bb 57>;

<bb 56>:
  D.44605_320 = a_engine_188->rtp_session;
  switch_rtp_set_max_missed_packets (D.44605_320, 0);
  a_engine_188->max_missed_hold_packets = 0;
  a_engine_188->max_missed_packets = 0;
  goto <bb 65>;

<bb 57>:
  D.44530_321 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
  D.44530_322 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
  goto <bb 65>;

<bb 58>:
  if (sendonly_44 <= 1)
    goto <bb 59>;
  else
    goto <bb 61>;

<bb 59>:
  D.44590_323 = attr_29->a_name;
  D.44614_324 = strcasecmp (D.44590_323, "sendrecv");
  if (D.44614_324 == 0)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  sendonly_325 = 0;
  # DEBUG sendonly => sendonly_325
  goto <bb 65>;

<bb 61>:
  D.44590_326 = attr_29->a_name;
  D.44616_327 = strcasecmp (D.44590_326, "ptime");
  if (D.44616_327 == 0)
    goto <bb 62>;
  else
    goto <bb 63>;

<bb 62>:
  D.44619_328 = attr_29->a_value;
  dptime_329 = atoi (D.44619_328);
  # DEBUG dptime => dptime_329
  goto <bb 65>;

<bb 63>:
  D.44590_330 = attr_29->a_name;
  D.44621_331 = strcasecmp (D.44590_330, "maxptime");
  if (D.44621_331 == 0)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  D.44619_332 = attr_29->a_value;
  dmaxptime_333 = atoi (D.44619_332);
  # DEBUG dmaxptime => dmaxptime_333

<bb 65>:
  # dptime_36 = PHI <dptime_37(49), dptime_37(51), dptime_37(53), dptime_37(57), dptime_37(60), dptime_329(62), dptime_37(63), dptime_37(64), dptime_37(56)>
  # dmaxptime_40 = PHI <dmaxptime_41(49), dmaxptime_41(51), dmaxptime_41(53), dmaxptime_41(57), dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(63), dmaxptime_333(64), dmaxptime_41(56)>
  # sendonly_43 = PHI <sendonly_44(49), sendonly_308(51), sendonly_312(53), sendonly_44(57), sendonly_325(60), sendonly_44(62), sendonly_44(63), sendonly_44(64), sendonly_44(56)>
  # recvonly_45 = PHI <recvonly_46(49), recvonly_46(51), recvonly_46(53), recvonly_317(57), recvonly_46(60), recvonly_46(62), recvonly_46(63), recvonly_46(64), recvonly_317(56)>
  # DEBUG recvonly => recvonly_45
  # DEBUG sendonly => sendonly_43
  # DEBUG dmaxptime => dmaxptime_40
  # DEBUG dptime => dptime_36
  attr_334 = attr_29->a_next;
  # DEBUG attr => attr_334

<bb 66>:
  # attr_29 = PHI <attr_303(47), attr_334(65)>
  # dptime_37 = PHI <dptime_153(47), dptime_36(65)>
  # dmaxptime_41 = PHI <dmaxptime_155(47), dmaxptime_40(65)>
  # sendonly_44 = PHI <sendonly_42(47), sendonly_43(65)>
  # recvonly_46 = PHI <recvonly_157(47), recvonly_45(65)>
  # DEBUG recvonly => recvonly_46
  # DEBUG sendonly => sendonly_44
  # DEBUG dmaxptime => dmaxptime_41
  # DEBUG dptime => dptime_37
  # DEBUG attr => attr_29
  if (attr_29 != 0B)
    goto <bb 48>;
  else
    goto <bb 67>;

<bb 67>:
  D.44624_335 = sendonly_44 != 1;
  D.44625_336 = recvonly_46 != 1;
  D.44626_337 = D.44624_335 && D.44625_336;
  if (D.44626_337 != 0)
    goto <bb 68>;
  else
    goto <bb 69>;

<bb 68>:
  D.44530_338 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);

<bb 69>:
  D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
  if (D.44631_339 == 0)
    goto <bb 70>;
  else
    goto <bb 76>;

<bb 70>:
  D.44530_340 = session_161(D)->channel;
  val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
  # DEBUG val => val_341
  if (val_341 == 0B)
    goto <bb 72>;
  else
    goto <bb 71>;

<bb 71>:
  D.44635_342 = switch_true (val_341);
  if (D.44635_342 == 0)
    goto <bb 72>;
  else
    goto <bb 76>;

<bb 72>:
  D.44471_343 = smh_186->mparams;
  D.44636_344 = D.44471_343->hold_laps;
  if (D.44636_344 == 0)
    goto <bb 73>;
  else
    goto <bb 76>;

<bb 73>:
  D.44471_345 = smh_186->mparams;
  D.44636_346 = D.44471_345->hold_laps;
  D.44639_347 = D.44636_346 + 1;
  D.44471_345->hold_laps = D.44639_347;
  D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);
  if (D.44640_348 != 0)
    goto <bb 74>;
  else
    goto <bb 76>;

<bb 74>:
  reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
  # DEBUG reneg => reneg_349
  D.44530_350 = session_161(D)->channel;
  val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
  # DEBUG val => val_351
  if (val_351 != 0B)
    goto <bb 75>;
  else
    goto <bb 76>;

<bb 75>:
  reneg_352 = switch_true (val_351);
  # DEBUG reneg => reneg_352

<bb 76>:
  # reneg_81 = PHI <reneg_175(69), reneg_175(71), reneg_175(72), reneg_175(73), reneg_349(74), reneg_352(75)>
  # DEBUG reneg => reneg_81
  if (reneg_81 != 0)
    goto <bb 77>;
  else
    goto <bb 79>;

<bb 77>:
  reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
  # DEBUG reneg => reneg_353
  D.44530_354 = session_161(D)->channel;
  val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
  # DEBUG val => val_355
  if (val_355 != 0B)
    goto <bb 78>;
  else
    goto <bb 79>;

<bb 78>:
  reneg_356 = switch_true (val_355);
  # DEBUG reneg => reneg_356

<bb 79>:
  # reneg_82 = PHI <reneg_81(76), reneg_353(77), reneg_356(78)>
  # DEBUG reneg => reneg_82
  D.44649_357 = session_161(D)->bugs;
  if (D.44649_357 != 0B)
    goto <bb 80>;
  else
    goto <bb 81>;

<bb 80>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
  reneg_358 = 0;
  # DEBUG reneg => reneg_358

<bb 81>:
  # reneg_83 = PHI <reneg_82(79), reneg_358(80)>
  # DEBUG reneg => reneg_83
  if (reneg_83 == 0)
    goto <bb 82>;
  else
    goto <bb 84>;

<bb 82>:
  D.44655_359 = smh_186->num_negotiated_codecs;
  if (D.44655_359 != 0)
    goto <bb 83>;
  else
    goto <bb 84>;

<bb 83>:
  codec_array_360 = &smh_186->negotiated_codecs;
  # DEBUG codec_array => codec_array_360
  total_codecs_361 = smh_186->num_negotiated_codecs;
  # DEBUG total_codecs => total_codecs_361
  goto <bb 86>;

<bb 84>:
  if (reneg_83 != 0)
    goto <bb 85>;
  else
    goto <bb 86>;

<bb 85>:
  D.44471_362 = smh_186->mparams;
  D.44471_362->num_codecs = 0;
  switch_core_media_prepare_codecs (session_161(D), 0);
  codec_array_363 = &smh_186->codecs;
  # DEBUG codec_array => codec_array_363
  D.44471_364 = smh_186->mparams;
  total_codecs_365 = D.44471_364->num_codecs;
  # DEBUG total_codecs => total_codecs_365

<bb 86>:
  # codec_array_84 = PHI <codec_array_360(83), codec_array_190(84), codec_array_363(85)>
  # total_codecs_85 = PHI <total_codecs_361(83), total_codecs_192(84), total_codecs_365(85)>
  # DEBUG total_codecs => total_codecs_85
  # DEBUG codec_array => codec_array_84
  D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
  if (D.44661_366 != 0B)
    goto <bb 89>;
  else
    goto <bb 87>;

<bb 87>:
  D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
  if (D.44663_367 != 0B)
    goto <bb 89>;
  else
    goto <bb 88>;

<bb 88>:
  D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
  if (D.44665_368 != 0B)
    goto <bb 89>;
  else
    goto <bb 90>;

<bb 89>:
  D.44530_369 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);

<bb 90>:
  switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
  switch_core_media_pass_zrtp_hash (session_161(D));
  check_ice (smh_186, 0, sdp_198, 0B);
  check_ice (smh_186, 1, sdp_198, 0B);
  m_370 = sdp_198->sdp_media;
  # DEBUG m => m_370
  goto <bb 398>;

<bb 91>:
  ptime_371 = dptime_37;
  # DEBUG ptime => ptime_371
  maxptime_372 = dmaxptime_41;
  # DEBUG maxptime => maxptime_372
  D.44666_373 = m_28->m_proto;
  if (D.44666_373 == 261)
    goto <bb 92>;
  else
    goto <bb 93>;

<bb 92>:
  got_webrtc_374 = got_webrtc_79 + 1;
  # DEBUG got_webrtc => got_webrtc_374
  switch_core_session_set_ice (session_161(D));

<bb 93>:
  # got_webrtc_78 = PHI <got_webrtc_79(91), got_webrtc_374(92)>
  # DEBUG got_webrtc => got_webrtc_78
  D.44669_375 = m_28->m_proto_name;
  if (D.44669_375 != 0B)
    goto <bb 94>;
  else
    goto <bb 96>;

<bb 94>:
  D.44669_376 = m_28->m_proto_name;
  D.44672_377 = strcasecmp (D.44669_376, "UDP/TLS/RTP/SAVPF");
  if (D.44672_377 == 0)
    goto <bb 95>;
  else
    goto <bb 96>;

<bb 95>:
  D.44530_378 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_378, 107, 1);

<bb 96>:
  D.44675_379 = m_28->m_proto;
  D.44676_380 = D.44675_379 == 257;
  D.44677_381 = D.44675_379 == 261;
  D.44678_382 = D.44676_380 || D.44677_381;
  if (D.44678_382 != 0)
    goto <bb 97>;
  else
    goto <bb 100>;

<bb 97>:
  D.44681_383 = m_28->m_type;
  if (D.44681_383 == 2)
    goto <bb 98>;
  else
    goto <bb 99>;

<bb 98>:
  got_savp_384 = got_savp_75 + 1;
  # DEBUG got_savp => got_savp_384
  goto <bb 106>;

<bb 99>:
  got_video_savp_385 = got_video_savp_73 + 1;
  # DEBUG got_video_savp => got_video_savp_385
  goto <bb 106>;

<bb 100>:
  D.44666_386 = m_28->m_proto;
  if (D.44666_386 == 256)
    goto <bb 101>;
  else
    goto <bb 104>;

<bb 101>:
  D.44681_387 = m_28->m_type;
  if (D.44681_387 == 2)
    goto <bb 102>;
  else
    goto <bb 103>;

<bb 102>:
  got_avp_388 = got_avp_69 + 1;
  # DEBUG got_avp => got_avp_388
  goto <bb 106>;

<bb 103>:
  got_video_avp_389 = got_video_avp_71 + 1;
  # DEBUG got_video_avp => got_video_avp_389
  goto <bb 106>;

<bb 104>:
  D.44666_390 = m_28->m_proto;
  if (D.44666_390 == 258)
    goto <bb 105>;
  else
    goto <bb 106>;

<bb 105>:
  got_udptl_391 = got_udptl_77 + 1;
  # DEBUG got_udptl => got_udptl_391

<bb 106>:
  # got_avp_68 = PHI <got_avp_69(99), got_avp_69(103), got_avp_69(104), got_avp_69(105), got_avp_69(98), got_avp_388(102)>
  # got_video_avp_70 = PHI <got_video_avp_71(99), got_video_avp_389(103), got_video_avp_71(104), got_video_avp_71(105), got_video_avp_71(98), got_video_avp_71(102)>
  # got_video_savp_72 = PHI <got_video_savp_385(99), got_video_savp_73(103), got_video_savp_73(104), got_video_savp_73(105), got_video_savp_73(98), got_video_savp_73(102)>
  # got_savp_74 = PHI <got_savp_75(99), got_savp_75(103), got_savp_75(104), got_savp_75(105), got_savp_384(98), got_savp_75(102)>
  # got_udptl_76 = PHI <got_udptl_77(99), got_udptl_77(103), got_udptl_77(104), got_udptl_391(105), got_udptl_77(98), got_udptl_77(102)>
  # DEBUG got_udptl => got_udptl_76
  # DEBUG got_savp => got_savp_74
  # DEBUG got_video_savp => got_video_savp_72
  # DEBUG got_video_avp => got_video_avp_70
  # DEBUG got_avp => got_avp_68
  if (got_udptl_76 != 0)
    goto <bb 107>;
  else
    goto <bb 142>;

<bb 107>:
  D.44681_392 = m_28->m_type;
  if (D.44681_392 == 8)
    goto <bb 108>;
  else
    goto <bb 142>;

<bb 108>:
  D.44697_393 = m_28->m_port;
  if (D.44697_393 != 0)
    goto <bb 109>;
  else
    goto <bb 142>;

<bb 109>:
  t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
  # DEBUG t38_options => t38_options_394
  D.44530_395 = session_161(D)->channel;
  D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
  if (D.44699_396 != 0)
    goto <bb 110>;
  else
    goto <bb 111>;

<bb 110>:
  match_397 = 1;
  # DEBUG match => match_397
  goto <bb 399> (done);

<bb 111>:
  D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
  D.44703_399 = switch_true (D.44702_398);
  if (D.44703_399 != 0)
    goto <bb 112>;
  else
    goto <bb 113>;

<bb 112>:
  D.44530_400 = session_161(D)->channel;
  switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
  match_401 = 0;
  # DEBUG match => match_401
  goto <bb 399> (done);

<bb 113>:
  var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
  # DEBUG var => var_402
  D.44481_403 = smh_186->session;
  D.44482_404 = D.44481_403->channel;
  D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
  pass_406 = (int) D.44706_405;
  # DEBUG pass => pass_406
  D.44530_407 = session_161(D)->channel;
  D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
  if (D.44707_408 != 0)
    goto <bb 114>;
  else
    goto <bb 116>;

<bb 114>:
  if (proceed_209(D) != 0B)
    goto <bb 115>;
  else
    goto <bb 116>;

<bb 115>:
  *proceed_209(D) = 0;

<bb 116>:
  if (var_402 != 0B)
    goto <bb 117>;
  else
    goto <bb 120>;

<bb 117>:
  pass_409 = switch_true (var_402);
  # DEBUG pass => pass_409
  if (pass_409 == 0)
    goto <bb 118>;
  else
    goto <bb 120>;

<bb 118>:
  D.44716_410 = strcasecmp (var_402, "once");
  if (D.44716_410 == 0)
    goto <bb 119>;
  else
    goto <bb 120>;

<bb 119>:
  pass_411 = 2;
  # DEBUG pass => pass_411

<bb 120>:
  # pass_126 = PHI <pass_406(116), pass_409(117), pass_409(118), pass_411(119)>
  # DEBUG pass => pass_126
  if (pass_126 == 2)
    goto <bb 121>;
  else
    goto <bb 122>;

<bb 121>:
  D.44481_412 = smh_186->session;
  D.44482_413 = D.44481_412->channel;
  D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
  if (D.44723_414 != 0)
    goto <bb 126>;
  else
    goto <bb 122>;

<bb 122>:
  D.44530_415 = session_161(D)->channel;
  D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
  if (D.44724_416 == 0)
    goto <bb 126>;
  else
    goto <bb 123>;

<bb 123>:
  D.44530_417 = session_161(D)->channel;
  D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
  if (D.44726_418 != 0)
    goto <bb 126>;
  else
    goto <bb 124>;

<bb 124>:
  D.44530_419 = session_161(D)->channel;
  D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
  if (D.44728_420 != 0)
    goto <bb 126>;
  else
    goto <bb 125>;

<bb 125>:
  D.44605_421 = a_engine_188->rtp_session;
  D.44730_422 = switch_rtp_ready (D.44605_421);
  if (D.44730_422 == 0)
    goto <bb 126>;
  else
    goto <bb 127>;

<bb 126>:
  pass_423 = 0;
  # DEBUG pass => pass_423

<bb 127>:
  # pass_127 = PHI <pass_126(125), pass_423(126)>
  # DEBUG pass => pass_127
  if (pass_127 != 0)
    goto <bb 128>;
  else
    goto <bb 141>;

<bb 128>:
  D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
  if (D.44733_424 == 0)
    goto <bb 129>;
  else
    goto <bb 141>;

<bb 129>:
  other_session.89_425 = other_session;
  other_channel_426 = switch_core_session_get_channel (other_session.89_425);
  # DEBUG other_channel => other_channel_426
  D.44605_427 = a_engine_188->rtp_session;
  remote_host_428 = switch_rtp_get_remote_host (D.44605_427);
  # DEBUG remote_host => remote_host_428
  D.44605_429 = a_engine_188->rtp_session;
  remote_port_430 = switch_rtp_get_remote_port (D.44605_429);
  # DEBUG remote_port => remote_port_430
  tmp = "";
  D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
  if (D.44737_431 == 0)
    goto <bb 130>;
  else
    goto <bb 131>;

<bb 130>:
  D.44530_432 = session_161(D)->channel;
  D.44740_433 = switch_channel_get_name (D.44530_432);
  D.44741_434 = switch_channel_get_name (other_channel_426);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
  other_session.89_435 = other_session;
  switch_core_session_rwunlock (other_session.89_435);
  pass_436 = 0;
  # DEBUG pass => pass_436
  match_437 = 0;
  # DEBUG match => match_437
  goto <bb 399> (done);

<bb 131>:
  D.44530_438 = session_161(D)->channel;
  D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
  D.44743_440 = switch_true (D.44742_439);
  if (D.44743_440 != 0)
    goto <bb 132>;
  else
    goto <bb 134>;

<bb 132>:
  D.44530_441 = session_161(D)->channel;
  D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
  D.44747_443 = switch_true (D.44746_442);
  if (D.44747_443 != 0)
    goto <bb 133>;
  else
    goto <bb 134>;

<bb 133>:
  switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);

<bb 134>:
  D.44750_444 = a_engine_188->cur_payload_map;
  D.44751_445 = t38_options_394->remote_ip;
  D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
  D.44750_444->remote_sdp_ip = D.44752_446;
  D.44750_447 = a_engine_188->cur_payload_map;
  D.44753_448 = t38_options_394->remote_port;
  D.44750_447->remote_sdp_port = D.44753_448;
  D.44756_449 = remote_host_428 != 0B;
  D.44757_450 = remote_port_430 != 0;
  D.44758_451 = D.44756_449 && D.44757_450;
  if (D.44758_451 != 0)
    goto <bb 135>;
  else
    goto <bb 138>;

<bb 135>:
  D.44750_452 = a_engine_188->cur_payload_map;
  D.44760_453 = D.44750_452->remote_sdp_ip;
  D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
  if (D.39032_454 == 0)
    goto <bb 136>;
  else
    goto <bb 138>;

<bb 136>:
  D.44750_455 = a_engine_188->cur_payload_map;
  D.44762_456 = D.44750_455->remote_sdp_port;
  if (D.44762_456 == remote_port_430)
    goto <bb 137>;
  else
    goto <bb 138>;

<bb 137>:
  D.44530_457 = session_161(D)->channel;
  D.44764_458 = switch_channel_get_name (D.44530_457);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
  goto <bb 140>;

<bb 138>:
  err = 0B;
  D.44530_459 = session_161(D)->channel;
  D.44765_460 = switch_channel_get_name (D.44530_459);
  D.44766_461 = (int) remote_port_430;
  D.44750_462 = a_engine_188->cur_payload_map;
  D.44760_463 = D.44750_462->remote_sdp_ip;
  D.44750_464 = a_engine_188->cur_payload_map;
  D.44762_465 = D.44750_464->remote_sdp_port;
  D.44767_466 = (int) D.44762_465;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
  D.44750_467 = a_engine_188->cur_payload_map;
  D.44762_468 = D.44750_467->remote_sdp_port;
  D.44767_469 = (int) D.44762_468;
  switch_snprintf (&tmp, 32, "%d", D.44767_469);
  D.44530_470 = session_161(D)->channel;
  D.44750_471 = a_engine_188->cur_payload_map;
  D.44760_472 = D.44750_471->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
  D.44530_473 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
  D.44605_474 = a_engine_188->rtp_session;
  D.44750_475 = a_engine_188->cur_payload_map;
  D.44760_476 = D.44750_475->remote_sdp_ip;
  D.44750_477 = a_engine_188->cur_payload_map;
  D.44762_478 = D.44750_477->remote_sdp_port;
  D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
  if (D.44768_479 != 0)
    goto <bb 139>;
  else
    goto <bb 140>;

<bb 139>:
  err.90_480 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
  switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);

<bb 140>:
  other_session.89_481 = other_session;
  switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
  D.44481_482 = smh_186->session;
  D.44482_483 = D.44481_482->channel;
  switch_channel_set_flag_value (D.44482_483, 101, 1);
  other_session.89_484 = other_session;
  D.44772_485 = other_session.89_484->channel;
  switch_channel_set_flag_value (D.44772_485, 101, 1);
  other_session.89_486 = other_session;
  msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
  # DEBUG msg => msg_487
  msg_487->message_id = 21;
  msg_487->from = "src/switch_core_media.c";
  other_session.89_488 = other_session;
  D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
  msg_487->string_arg = D.44773_489;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
  other_session.89_490 = other_session;
  switch_core_session_queue_message (other_session.89_490, msg_487);
  other_session.89_491 = other_session;
  switch_core_session_rwunlock (other_session.89_491);

<bb 141>:
  match_492 = 1;
  # DEBUG match => match_492
  goto <bb 399> (done);

<bb 142>:
  D.44681_493 = m_28->m_type;
  if (D.44681_493 == 2)
    goto <bb 143>;
  else
    goto <bb 314>;

<bb 143>:
  D.44697_494 = m_28->m_port;
  D.44777_495 = D.44697_494 != 0;
  D.44778_496 = got_audio_67 == 0;
  D.44779_497 = D.44777_495 && D.44778_496;
  if (D.44779_497 != 0)
    goto <bb 144>;
  else
    goto <bb 314>;

<bb 144>:
  D.44781_498 = switch_rtp_has_dtls ();
  if (D.44781_498 != 0)
    goto <bb 145>;
  else
    goto <bb 152>;

<bb 145>:
  D.44784_499 = dtls_ok (session_161(D));
  if (D.44784_499 != 0)
    goto <bb 146>;
  else
    goto <bb 152>;

<bb 146>:
  attr_500 = m_28->m_attributes;
  # DEBUG attr => attr_500
  goto <bb 151>;

<bb 147>:
  D.44590_501 = attr_30->a_name;
  D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
  if (D.44787_502 == 0)
    goto <bb 148>;
  else
    goto <bb 150>;

<bb 148>:
  D.44619_503 = attr_30->a_value;
  D.44790_504 = _zstr (D.44619_503);
  if (D.44790_504 == 0)
    goto <bb 149>;
  else
    goto <bb 150>;

<bb 149>:
  got_crypto_505 = 1;
  # DEBUG got_crypto => got_crypto_505

<bb 150>:
  # got_crypto_50 = PHI <got_crypto_51(147), got_crypto_51(148), got_crypto_505(149)>
  # DEBUG got_crypto => got_crypto_50
  attr_506 = attr_30->a_next;
  # DEBUG attr => attr_506

<bb 151>:
  # attr_30 = PHI <attr_500(146), attr_506(150)>
  # got_crypto_51 = PHI <got_crypto_56(146), got_crypto_50(150)>
  # DEBUG got_crypto => got_crypto_51
  # DEBUG attr => attr_30
  if (attr_30 != 0B)
    goto <bb 147>;
  else
    goto <bb 152>;

<bb 152>:
  # got_crypto_52 = PHI <got_crypto_56(144), got_crypto_56(145), got_crypto_51(151)>
  # DEBUG got_crypto => got_crypto_52
  attr_507 = m_28->m_attributes;
  # DEBUG attr => attr_507
  goto <bb 172>;

<bb 153>:
  D.44590_508 = attr_31->a_name;
  D.44795_509 = strcasecmp (D.44590_508, "rtcp");
  if (D.44795_509 == 0)
    goto <bb 154>;
  else
    goto <bb 157>;

<bb 154>:
  D.44619_510 = attr_31->a_value;
  if (D.44619_510 != 0B)
    goto <bb 155>;
  else
    goto <bb 157>;

<bb 155>:
  D.44530_511 = session_161(D)->channel;
  D.44619_512 = attr_31->a_value;
  switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);
  D.44619_513 = attr_31->a_value;
  D.44798_514 = atoi (D.44619_513);
  D.44799_515 = (short unsigned int) D.44798_514;
  a_engine_188->remote_rtcp_port = D.44799_515;
  D.44471_516 = smh_186->mparams;
  D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
  if (D.44800_517 == 0B)
    goto <bb 156>;
  else
    goto <bb 171>;

<bb 156>:
  D.44471_518 = smh_186->mparams;
  D.44471_518->rtcp_audio_interval_msec = "5000";
  goto <bb 171>;

<bb 157>:
  D.44590_519 = attr_31->a_name;
  D.44805_520 = strcasecmp (D.44590_519, "ptime");
  if (D.44805_520 == 0)
    goto <bb 158>;
  else
    goto <bb 160>;

<bb 158>:
  D.44619_521 = attr_31->a_value;
  if (D.44619_521 != 0B)
    goto <bb 159>;
  else
    goto <bb 160>;

<bb 159>:
  D.44619_522 = attr_31->a_value;
  ptime_523 = atoi (D.44619_522);
  # DEBUG ptime => ptime_523
  goto <bb 171>;

<bb 160>:
  D.44590_524 = attr_31->a_name;
  D.44810_525 = strcasecmp (D.44590_524, "maxptime");
  if (D.44810_525 == 0)
    goto <bb 161>;
  else
    goto <bb 163>;

<bb 161>:
  D.44619_526 = attr_31->a_value;
  if (D.44619_526 != 0B)
    goto <bb 162>;
  else
    goto <bb 163>;

<bb 162>:
  D.44619_527 = attr_31->a_value;
  maxptime_528 = atoi (D.44619_527);
  # DEBUG maxptime => maxptime_528
  goto <bb 171>;

<bb 163>:
  if (got_crypto_54 <= 0)
    goto <bb 164>;
  else
    goto <bb 171>;

<bb 164>:
  D.44590_529 = attr_31->a_name;
  D.44815_530 = strcasecmp (D.44590_529, "crypto");
  if (D.44815_530 == 0)
    goto <bb 165>;
  else
    goto <bb 171>;

<bb 165>:
  D.44619_531 = attr_31->a_value;
  D.44818_532 = _zstr (D.44619_531);
  if (D.44818_532 == 0)
    goto <bb 166>;
  else
    goto <bb 171>;

<bb 166>:
  D.44471_533 = smh_186->mparams;
  D.44821_534 = D.44471_533->ndlb;
  D.44822_535 = D.44821_534 & 4;
  if (D.44822_535 == 0)
    goto <bb 167>;
  else
    goto <bb 170>;

<bb 167>:
  D.44530_536 = session_161(D)->channel;
  D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
  D.44826_538 = switch_true (D.44825_537);
  if (D.44826_538 == 0)
    goto <bb 168>;
  else
    goto <bb 170>;

<bb 168>:
  D.44666_539 = m_28->m_proto;
  D.44829_540 = D.44666_539 != 257;
  D.44830_541 = got_webrtc_78 == 0;
  D.44831_542 = D.44829_540 && D.44830_541;
  if (D.44831_542 != 0)
    goto <bb 169>;
  else
    goto <bb 170>;

<bb 169>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  match_543 = 0;
  # DEBUG match => match_543
  goto <bb 399> (done);

<bb 170>:
  crypto_544 = attr_31->a_value;
  # DEBUG crypto => crypto_544
  crypto_tag_545 = atoi (crypto_544);
  # DEBUG crypto_tag => crypto_tag_545
  got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_545, sdp_type_546(D));
  # DEBUG got_crypto => got_crypto_547

<bb 171>:
  # ptime_34 = PHI <ptime_35(156), ptime_523(159), ptime_35(162), ptime_35(163), ptime_35(164), ptime_35(165), ptime_35(170), ptime_35(155)>
  # maxptime_38 = PHI <maxptime_39(156), maxptime_39(159), maxptime_528(162), maxptime_39(163), maxptime_39(164), maxptime_39(165), maxptime_39(170), maxptime_39(155)>
  # got_crypto_53 = PHI <got_crypto_54(156), got_crypto_54(159), got_crypto_54(162), got_crypto_54(163), got_crypto_54(164), got_crypto_54(165), got_crypto_547(170), got_crypto_54(155)>
  # DEBUG got_crypto => got_crypto_53
  # DEBUG maxptime => maxptime_38
  # DEBUG ptime => ptime_34
  attr_548 = attr_31->a_next;
  # DEBUG attr => attr_548

<bb 172>:
  # attr_31 = PHI <attr_507(152), attr_548(171)>
  # ptime_35 = PHI <ptime_371(152), ptime_34(171)>
  # maxptime_39 = PHI <maxptime_372(152), maxptime_38(171)>
  # got_crypto_54 = PHI <got_crypto_52(152), got_crypto_53(171)>
  # DEBUG got_crypto => got_crypto_54
  # DEBUG maxptime => maxptime_39
  # DEBUG ptime => ptime_35
  # DEBUG attr => attr_31
  if (attr_31 != 0B)
    goto <bb 153>;
  else
    goto <bb 173>;

<bb 173>:
  D.44834_549 = got_crypto_54 == -1;
  D.44835_550 = got_savp_74 != 0;
  D.44836_551 = D.44834_549 && D.44835_550;
  if (D.44836_551 != 0)
    goto <bb 174>;
  else
    goto <bb 176>;

<bb 174>:
  D.44839_552 = got_avp_68 | got_webrtc_78;
  if (D.44839_552 == 0)
    goto <bb 175>;
  else
    goto <bb 176>;

<bb 175>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
  match_553 = 0;
  # DEBUG match => match_553
  goto <bb 399> (done);

<bb 176>:
  connection_554 = sdp_198->sdp_connection;
  # DEBUG connection => connection_554
  D.44546_555 = m_28->m_connections;
  if (D.44546_555 != 0B)
    goto <bb 177>;
  else
    goto <bb 178>;

<bb 177>:
  connection_556 = m_28->m_connections;
  # DEBUG connection => connection_556

<bb 178>:
  # connection_124 = PHI <connection_554(176), connection_556(177)>
  # DEBUG connection => connection_124
  if (connection_124 == 0B)
    goto <bb 179>;
  else
    goto <bb 180>;

<bb 179>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  match_557 = 0;
  # DEBUG match => match_557
  goto <bb 399> (done);

<bb 180>:
  x_558 = 0;
  # DEBUG x => x_558
  map_559 = m_28->m_rtpmaps;
  # DEBUG map => map_559
  goto <bb 256>;

<bb 181>:
  map_bit_rate_560 = 0;
  # DEBUG map_bit_rate => map_bit_rate_560
  codec_fmtp = {};
  rm_encoding_561 = map_128->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_561
  if (rm_encoding_561 == 0B)
    goto <bb 182>;
  else
    goto <bb 183>;

<bb 182>:
  rm_encoding_562 = "";
  # DEBUG rm_encoding => rm_encoding_562

<bb 183>:
  # rm_encoding_130 = PHI <rm_encoding_561(181), rm_encoding_562(182)>
  # DEBUG rm_encoding => rm_encoding_130
  D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
  if (D.44848_563 == 0)
    goto <bb 184>;
  else
    goto <bb 188>;

<bb 184>:
  if (best_te_20 == 0)
    goto <bb 186>;
  else
    goto <bb 185>;

<bb 185>:
  D.44854_564 = map_128->rm_rate;
  D.44750_565 = a_engine_188->cur_payload_map;
  D.44855_566 = D.44750_565->rm_rate;
  if (D.44854_564 == D.44855_566)
    goto <bb 186>;
  else
    goto <bb 187>;

<bb 186>:
  D.44856_567 = map_128->rm_pt;
  best_te_568 = (switch_payload_t) D.44856_567;
  # DEBUG best_te => best_te_568
  D.44857_569 = (int) best_te_568;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);

<bb 187>:
  # best_te_18 = PHI <best_te_20(185), best_te_568(186)>
  # DEBUG best_te => best_te_18
  // predicted unlikely by continue predictor.
  goto <bb 255>;

<bb 188>:
  D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
  if (D.44858_570 == 0)
    goto <bb 189>;
  else
    goto <bb 194>;

<bb 189>:
  if (cng_pt_25 == 0)
    goto <bb 190>;
  else
    goto <bb 194>;

<bb 190>:
  D.44863_571 = strcasecmp (rm_encoding_130, "CN");
  if (D.44863_571 == 0)
    goto <bb 191>;
  else
    goto <bb 194>;

<bb 191>:
  D.44856_572 = map_128->rm_pt;
  cng_pt_573 = (switch_payload_t) D.44856_572;
  # DEBUG cng_pt => cng_pt_573
  D.44605_574 = a_engine_188->rtp_session;
  if (D.44605_574 != 0B)
    goto <bb 192>;
  else
    goto <bb 193>;

<bb 192>:
  D.44868_575 = (int) cng_pt_573;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
  D.44605_576 = a_engine_188->rtp_session;
  D.44471_577 = smh_186->mparams;
  D.44869_578 = D.44471_577->cng_pt;
  switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

<bb 193>:
  // predicted unlikely by continue predictor.
  goto <bb 255>;

<bb 194>:
  D.44870_579 = x_49 < skip_160;
  x_580 = x_49 + 1;
  # DEBUG x => x_580
  if (D.44870_579 != 0)
    goto <bb 195>;
  else
    goto <bb 196>;

<bb 195>:
  // predicted unlikely by continue predictor.
  goto <bb 255>;

<bb 196>:
  if (match_8 != 0)
    goto <bb 197>;
  else
    goto <bb 198>;

<bb 197>:
  // predicted unlikely by continue predictor.
  goto <bb 255>;

<bb 198>:
  codec_ms_581 = ptime_35;
  # DEBUG codec_ms => codec_ms_581
  if (maxptime_39 != 0)
    goto <bb 199>;
  else
    goto <bb 201>;

<bb 199>:
  D.44877_582 = codec_ms_581 == 0;
  D.44878_583 = codec_ms_581 > maxptime_39;
  D.44879_584 = D.44877_582 || D.44878_583;
  if (D.44879_584 != 0)
    goto <bb 200>;
  else
    goto <bb 201>;

<bb 200>:
  codec_ms_585 = maxptime_39;
  # DEBUG codec_ms => codec_ms_585

<bb 201>:
  # codec_ms_86 = PHI <codec_ms_581(198), codec_ms_581(199), codec_ms_585(200)>
  # DEBUG codec_ms => codec_ms_86
  if (codec_ms_86 == 0)
    goto <bb 202>;
  else
    goto <bb 203>;

<bb 202>:
  D.44856_586 = map_128->rm_pt;
  D.44884_587 = (uint32_t) D.44856_586;
  D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
  codec_ms_589 = (int) D.44885_588;
  # DEBUG codec_ms => codec_ms_589

<bb 203>:
  # codec_ms_87 = PHI <codec_ms_86(201), codec_ms_589(202)>
  # DEBUG codec_ms => codec_ms_87
  D.44856_590 = map_128->rm_pt;
  D.44886_591 = (unsigned char) D.44856_590;
  map_bit_rate_592 = switch_known_bitrate (D.44886_591);
  # DEBUG map_bit_rate => map_bit_rate_592
  if (ptime_35 == 0)
    goto <bb 204>;
  else
    goto <bb 206>;

<bb 204>:
  D.44889_593 = map_128->rm_encoding;
  D.44890_594 = strcasecmp (D.44889_593, "g723");
  if (D.44890_594 == 0)
    goto <bb 205>;
  else
    goto <bb 206>;

<bb 205>:
  codec_ms_595 = 33;
  # DEBUG codec_ms => codec_ms_595

<bb 206>:
  # codec_ms_88 = PHI <codec_ms_87(203), codec_ms_87(204), codec_ms_595(205)>
  # DEBUG codec_ms => codec_ms_88
  remote_codec_rate_596 = map_128->rm_rate;
  # DEBUG remote_codec_rate => remote_codec_rate_596
  fmtp_remote_codec_rate_597 = 0;
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_597
  memset (&codec_fmtp, 0, 16);
  D.44893_598 = map_128->rm_fmtp;
  D.44894_599 = _zstr (D.44893_598);
  if (D.44894_599 != 0)
    goto <bb 207>;
  else
    goto <bb 212>;

<bb 207>:
  D.44889_600 = map_128->rm_encoding;
  D.44897_601 = strcasecmp (D.44889_600, "ilbc");
  if (D.44897_601 == 0)
    goto <bb 208>;
  else
    goto <bb 209>;

<bb 208>:
  codec_ms_602 = 32;
  # DEBUG codec_ms => codec_ms_602
  map_bit_rate_603 = 13332;
  # DEBUG map_bit_rate => map_bit_rate_603
  goto <bb 219>;

<bb 209>:
  D.44889_604 = map_128->rm_encoding;
  D.44901_605 = strcasecmp (D.44889_604, "isac");
  if (D.44901_605 == 0)
    goto <bb 210>;
  else
    goto <bb 211>;

<bb 210>:
  codec_ms_606 = 39;
  # DEBUG codec_ms => codec_ms_606
  map_bit_rate_607 = 32001;
  # DEBUG map_bit_rate => map_bit_rate_607
  goto <bb 219>;

<bb 211>:
  map_bit_rate_608 = 32099;
  # DEBUG map_bit_rate => map_bit_rate_608
  goto <bb 219>;

<bb 212>:
  D.44889_609 = map_128->rm_encoding;
  D.44893_610 = map_128->rm_fmtp;
  D.44854_611 = map_128->rm_rate;
  D.44906_612 = switch_core_codec_parse_fmtp (D.44889_609, D.44893_610, D.44854_611, &codec_fmtp);
  if (D.44906_612 == 0)
    goto <bb 213>;
  else
    goto <bb 219>;

<bb 213>:
  D.44909_613 = codec_fmtp.bits_per_second;
  if (D.44909_613 != 0)
    goto <bb 214>;
  else
    goto <bb 215>;

<bb 214>:
  D.44909_614 = codec_fmtp.bits_per_second;
  map_bit_rate_615 = (uint32_t) D.44909_614;
  # DEBUG map_bit_rate => map_bit_rate_615

<bb 215>:
  # map_bit_rate_131 = PHI <map_bit_rate_592(213), map_bit_rate_615(214)>
  # DEBUG map_bit_rate => map_bit_rate_131
  D.44912_616 = codec_fmtp.microseconds_per_packet;
  if (D.44912_616 != 0)
    goto <bb 216>;
  else
    goto <bb 217>;

<bb 216>:
  D.44912_617 = codec_fmtp.microseconds_per_packet;
  codec_ms_618 = D.44912_617 / 1000;
  # DEBUG codec_ms => codec_ms_618

<bb 217>:
  # codec_ms_89 = PHI <codec_ms_88(215), codec_ms_618(216)>
  # DEBUG codec_ms => codec_ms_89
  D.44915_619 = codec_fmtp.actual_samples_per_second;
  if (D.44915_619 != 0)
    goto <bb 218>;
  else
    goto <bb 219>;

<bb 218>:
  fmtp_remote_codec_rate_620 = codec_fmtp.actual_samples_per_second;
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_620

<bb 219>:
  # codec_ms_90 = PHI <codec_ms_606(210), codec_ms_88(212), codec_ms_89(217), codec_ms_89(218), codec_ms_602(208), codec_ms_88(211)>
  # fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(210), fmtp_remote_codec_rate_597(212), fmtp_remote_codec_rate_597(217), fmtp_remote_codec_rate_620(218), fmtp_remote_codec_rate_597(208), fmtp_remote_codec_rate_597(211)>
  # map_bit_rate_132 = PHI <map_bit_rate_607(210), map_bit_rate_592(212), map_bit_rate_131(217), map_bit_rate_131(218), map_bit_rate_603(208), map_bit_rate_608(211)>
  # DEBUG map_bit_rate => map_bit_rate_132
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99
  # DEBUG codec_ms => codec_ms_90
  i_621 = 0;
  # DEBUG i => i_621
  goto <bb 253>;

<bb 220>:
  i.91_627 = (unsigned int) i_129;
  D.44919_628 = i.91_627 * 4;
  D.44920_629 = codec_array_84 + D.44919_628;
  imp_630 = *D.44920_629;
  # DEBUG imp => imp_630
  D.44921_631 = imp_630->bits_per_second;
  bit_rate_632 = (uint32_t) D.44921_631;
  # DEBUG bit_rate => bit_rate_632
  codec_rate_633 = imp_630->samples_per_second;
  # DEBUG codec_rate => codec_rate_633
  D.44922_634 = imp_630->codec_type;
  if (D.44922_634 != 0)
    goto <bb 221>;
  else
    goto <bb 222>;

<bb 221>:
  // predicted unlikely by continue predictor.
  goto <bb 252>;

<bb 222>:
  D.44856_635 = map_128->rm_pt;
  D.44925_636 = (int) D.44856_635;
  remote_codec_rate.92_637 = (int) remote_codec_rate_98;
  D.44927_638 = imp_630->iananame;
  D.44928_639 = imp_630->ianacode;
  D.44929_640 = (int) D.44928_639;
  D.44930_641 = imp_630->microseconds_per_packet;
  D.44931_642 = D.44930_641 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44925_636, remote_codec_rate.92_637, codec_ms_90, map_bit_rate_132, D.44927_638, D.44929_640, codec_rate_633, D.44931_642, bit_rate_632);
  D.44889_643 = map_128->rm_encoding;
  D.44935_644 = _zstr (D.44889_643);
  if (D.44935_644 != 0)
    goto <bb 224>;
  else
    goto <bb 223>;

<bb 223>:
  D.44471_645 = smh_186->mparams;
  D.44821_646 = D.44471_645->ndlb;
  D.44937_647 = (int) D.44821_646;
  D.44938_648 = D.44937_647 & 1;
  D.44939_649 = (_Bool) D.44938_648;
  if (D.44939_649 != 0)
    goto <bb 224>;
  else
    goto <bb 226>;

<bb 224>:
  D.44856_650 = map_128->rm_pt;
  D.44925_651 = (int) D.44856_650;
  if (D.44925_651 <= 95)
    goto <bb 225>;
  else
    goto <bb 226>;

<bb 225>:
  D.44856_652 = map_128->rm_pt;
  D.44925_653 = (int) D.44856_652;
  D.44928_654 = imp_630->ianacode;
  D.44929_655 = (int) D.44928_654;
  match_656 = D.44925_653 == D.44929_655;
  # DEBUG match => match_656
  goto <bb 233>;

<bb 226>:
  D.44927_657 = imp_630->iananame;
  D.44945_658 = strcasecmp (rm_encoding_130, D.44927_657);
  if (D.44945_658 == 0)
    goto <bb 227>;
  else
    goto <bb 230>;

<bb 227>:
  if (remote_codec_rate_98 == codec_rate_633)
    goto <bb 229>;
  else
    goto <bb 228>;

<bb 228>:
  D.44948_659 = imp_630->actual_samples_per_second;
  if (D.44948_659 == fmtp_remote_codec_rate_99)
    goto <bb 229>;
  else
    goto <bb 230>;

<bb 229>:
  iftmp.93_660 = 1;
  goto <bb 231>;

<bb 230>:
  iftmp.93_661 = 0;

<bb 231>:
  # iftmp.93_144 = PHI <iftmp.93_660(229), iftmp.93_661(230)>
  match_662 = (uint8_t) iftmp.93_144;
  # DEBUG match => match_662
  if (fmtp_remote_codec_rate_99 != 0)
    goto <bb 232>;
  else
    goto <bb 233>;

<bb 232>:
  remote_codec_rate_663 = fmtp_remote_codec_rate_99;
  # DEBUG remote_codec_rate => remote_codec_rate_663

<bb 233>:
  # match_1 = PHI <match_656(225), match_662(231), match_662(232)>
  # remote_codec_rate_96 = PHI <remote_codec_rate_98(225), remote_codec_rate_98(231), remote_codec_rate_663(232)>
  # DEBUG remote_codec_rate => remote_codec_rate_96
  # DEBUG match => match_1
  D.44951_664 = match_1 != 0;
  D.44952_665 = bit_rate_632 != 0;
  D.44953_666 = D.44951_664 && D.44952_665;
  if (D.44953_666 != 0)
    goto <bb 234>;
  else
    goto <bb 238>;

<bb 234>:
  D.44956_667 = map_bit_rate_132 != 0;
  D.44957_668 = map_bit_rate_132 != bit_rate_632;
  D.44958_669 = D.44956_667 && D.44957_668;
  if (D.44958_669 != 0)
    goto <bb 235>;
  else
    goto <bb 238>;

<bb 235>:
  D.44889_670 = map_128->rm_encoding;
  D.44961_671 = strcasecmp (D.44889_670, "ilbc");
  if (D.44961_671 != 0)
    goto <bb 236>;
  else
    goto <bb 238>;

<bb 236>:
  D.44889_672 = map_128->rm_encoding;
  D.44964_673 = strcasecmp (D.44889_672, "isac");
  if (D.44964_673 != 0)
    goto <bb 237>;
  else
    goto <bb 238>;

<bb 237>:
  match_674 = 0;
  # DEBUG match => match_674

<bb 238>:
  # match_2 = PHI <match_1(233), match_1(234), match_1(235), match_1(236), match_674(237)>
  # DEBUG match => match_2
  D.44951_675 = match_2 != 0;
  D.44969_676 = remote_codec_rate_96 != 0;
  D.44970_677 = D.44951_675 && D.44969_676;
  if (D.44970_677 != 0)
    goto <bb 239>;
  else
    goto <bb 243>;

<bb 239>:
  D.44973_678 = codec_rate_633 != 0;
  D.44974_679 = remote_codec_rate_96 != codec_rate_633;
  D.44975_680 = D.44973_678 && D.44974_679;
  if (D.44975_680 != 0)
    goto <bb 240>;
  else
    goto <bb 243>;

<bb 240>:
  D.44889_681 = map_128->rm_encoding;
  D.44978_682 = strcasecmp (D.44889_681, "pcma");
  if (D.44978_682 == 0)
    goto <bb 242>;
  else
    goto <bb 241>;

<bb 241>:
  D.44889_683 = map_128->rm_encoding;
  D.44980_684 = strcasecmp (D.44889_683, "pcmu");
  if (D.44980_684 == 0)
    goto <bb 242>;
  else
    goto <bb 243>;

<bb 242>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
  match_685 = 0;
  # DEBUG match => match_685

<bb 243>:
  # match_3 = PHI <match_2(238), match_2(239), match_2(241), match_685(242)>
  # DEBUG match => match_3
  if (match_3 != 0)
    goto <bb 244>;
  else
    goto <bb 252>;

<bb 244>:
  if (scrooge_80 != 0)
    goto <bb 245>;
  else
    goto <bb 246>;

<bb 245>:
  D.44927_686 = imp_630->iananame;
  D.44985_687 = imp_630->samples_per_second;
  D.44930_688 = imp_630->microseconds_per_packet;
  D.44931_689 = D.44930_688 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44927_686, D.44985_687, D.44931_689);
  goto <bb 250>;

<bb 246>:
  D.44990_690 = ptime_35 != 0;
  D.44991_691 = codec_ms_90 != 0;
  D.44992_692 = D.44990_690 && D.44991_691;
  if (D.44992_692 != 0)
    goto <bb 247>;
  else
    goto <bb 248>;

<bb 247>:
  D.44994_693 = codec_ms_90 * 1000;
  D.44930_694 = imp_630->microseconds_per_packet;
  if (D.44994_693 != D.44930_694)
    goto <bb 249>;
  else
    goto <bb 248>;

<bb 248>:
  if (remote_codec_rate_96 != codec_rate_633)
    goto <bb 249>;
  else
    goto <bb 250>;

<bb 249>:
  match_695 = 0;
  # DEBUG match => match_695
  D.44927_696 = imp_630->iananame;
  D.44928_697 = imp_630->ianacode;
  D.44929_698 = (int) D.44928_697;
  D.44930_699 = imp_630->microseconds_per_packet;
  D.44931_700 = D.44930_699 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44927_696, D.44929_698, codec_rate_633, D.44931_700, bit_rate_632);
  near_matches[nm_idx_116].codec_idx = i_129;
  remote_codec_rate.92_701 = (int) remote_codec_rate_96;
  near_matches[nm_idx_116].rate = remote_codec_rate.92_701;
  near_matches[nm_idx_116].imp = imp_630;
  near_matches[nm_idx_116].map = map_128;
  nm_idx_702 = nm_idx_116 + 1;
  # DEBUG nm_idx => nm_idx_702
  // predicted unlikely by continue predictor.
  goto <bb 252>;

<bb 250>:
  matches[m_idx_101].codec_idx = i_129;
  codec_rate.94_703 = (int) codec_rate_633;
  matches[m_idx_101].rate = codec_rate.94_703;
  matches[m_idx_101].imp = imp_630;
  matches[m_idx_101].map = map_128;
  m_idx_704 = m_idx_101 + 1;
  # DEBUG m_idx => m_idx_704
  D.44927_705 = imp_630->iananame;
  D.44928_706 = imp_630->ianacode;
  D.44929_707 = (int) D.44928_706;
  D.44930_708 = imp_630->microseconds_per_packet;
  D.44931_709 = D.44930_708 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44927_705, D.44929_707, codec_rate_633, D.44931_709, bit_rate_632);
  if (m_idx_704 > 29)
    goto <bb 254>;
  else
    goto <bb 251>;

<bb 251>:
  match_710 = 0;
  # DEBUG match => match_710

<bb 252>:
  # match_4 = PHI <match_5(221), match_3(243), match_695(249), match_710(251)>
  # remote_codec_rate_97 = PHI <remote_codec_rate_98(221), remote_codec_rate_96(243), remote_codec_rate_96(249), remote_codec_rate_96(251)>
  # m_idx_100 = PHI <m_idx_101(221), m_idx_101(243), m_idx_101(249), m_idx_704(251)>
  # nm_idx_115 = PHI <nm_idx_116(221), nm_idx_116(243), nm_idx_702(249), nm_idx_116(251)>
  # DEBUG nm_idx => nm_idx_115
  # DEBUG m_idx => m_idx_100
  # DEBUG remote_codec_rate => remote_codec_rate_97
  # DEBUG match => match_4
  i_711 = i_129 + 1;
  # DEBUG i => i_711

<bb 253>:
  # match_5 = PHI <match_8(219), match_4(252)>
  # remote_codec_rate_98 = PHI <remote_codec_rate_596(219), remote_codec_rate_97(252)>
  # m_idx_101 = PHI <m_idx_104(219), m_idx_100(252)>
  # nm_idx_116 = PHI <nm_idx_118(219), nm_idx_115(252)>
  # i_129 = PHI <i_621(219), i_711(252)>
  # DEBUG i => i_129
  # DEBUG nm_idx => nm_idx_116
  # DEBUG m_idx => m_idx_101
  # DEBUG remote_codec_rate => remote_codec_rate_98
  # DEBUG match => match_5
  D.44471_622 = smh_186->mparams;
  D.44997_623 = D.44471_622->num_codecs;
  D.44998_624 = D.44997_623 > i_129;
  D.44999_625 = i_129 < total_codecs_85;
  D.45000_626 = D.44998_624 && D.44999_625;
  if (D.45000_626 != 0)
    goto <bb 220>;
  else
    goto <bb 254>;

<bb 254>:
  # match_6 = PHI <match_3(250), match_5(253)>
  # m_idx_102 = PHI <m_idx_704(250), m_idx_101(253)>
  # DEBUG m_idx => m_idx_102
  # DEBUG match => match_6
  if (m_idx_102 > 29)
    goto <bb 257>;
  else
    goto <bb 255>;

<bb 255>:
  # match_7 = PHI <match_8(187), match_8(193), match_8(195), match_8(197), match_6(254)>
  # best_te_19 = PHI <best_te_18(187), best_te_20(193), best_te_20(195), best_te_20(197), best_te_20(254)>
  # cng_pt_24 = PHI <cng_pt_25(187), cng_pt_573(193), cng_pt_25(195), cng_pt_25(197), cng_pt_25(254)>
  # x_48 = PHI <x_49(187), x_49(193), x_580(195), x_580(197), x_580(254)>
  # codec_ms_91 = PHI <codec_ms_92(187), codec_ms_92(193), codec_ms_92(195), codec_ms_92(197), codec_ms_90(254)>
  # m_idx_103 = PHI <m_idx_104(187), m_idx_104(193), m_idx_104(195), m_idx_104(197), m_idx_102(254)>
  # nm_idx_117 = PHI <nm_idx_118(187), nm_idx_118(193), nm_idx_118(195), nm_idx_118(197), nm_idx_116(254)>
  # DEBUG nm_idx => nm_idx_117
  # DEBUG m_idx => m_idx_103
  # DEBUG codec_ms => codec_ms_91
  # DEBUG x => x_48
  # DEBUG cng_pt => cng_pt_24
  # DEBUG best_te => best_te_19
  # DEBUG match => match_7
  map_712 = map_128->rm_next;
  # DEBUG map => map_712

<bb 256>:
  # match_8 = PHI <match_16(180), match_7(255)>
  # best_te_20 = PHI <best_te_23(180), best_te_19(255)>
  # cng_pt_25 = PHI <cng_pt_27(180), cng_pt_24(255)>
  # x_49 = PHI <x_558(180), x_48(255)>
  # codec_ms_92 = PHI <codec_ms_95(180), codec_ms_91(255)>
  # m_idx_104 = PHI <m_idx_114(180), m_idx_103(255)>
  # nm_idx_118 = PHI <nm_idx_122(180), nm_idx_117(255)>
  # map_128 = PHI <map_559(180), map_712(255)>
  # DEBUG map => map_128
  # DEBUG nm_idx => nm_idx_118
  # DEBUG m_idx => m_idx_104
  # DEBUG codec_ms => codec_ms_92
  # DEBUG x => x_49
  # DEBUG cng_pt => cng_pt_25
  # DEBUG best_te => best_te_20
  # DEBUG match => match_8
  if (map_128 != 0B)
    goto <bb 181>;
  else
    goto <bb 257>;

<bb 257>:
  # match_9 = PHI <match_6(254), match_8(256)>
  # codec_ms_93 = PHI <codec_ms_90(254), codec_ms_92(256)>
  # m_idx_105 = PHI <m_idx_102(254), m_idx_104(256)>
  # nm_idx_119 = PHI <nm_idx_116(254), nm_idx_118(256)>
  # DEBUG nm_idx => nm_idx_119
  # DEBUG m_idx => m_idx_105
  # DEBUG codec_ms => codec_ms_93
  # DEBUG match => match_9
  D.45002_713 = smh_186->crypto_mode;
  D.45003_714 = D.45002_713 == 1;
  D.45004_715 = got_crypto_54 <= 0;
  D.45005_716 = D.45003_714 && D.45004_715;
  if (D.45005_716 != 0)
    goto <bb 258>;
  else
    goto <bb 259>;

<bb 258>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
  match_717 = 0;
  # DEBUG match => match_717
  nm_idx_718 = 0;
  # DEBUG nm_idx => nm_idx_718
  m_idx_719 = nm_idx_718;
  # DEBUG m_idx => m_idx_719

<bb 259>:
  # match_10 = PHI <match_9(257), match_717(258)>
  # m_idx_106 = PHI <m_idx_105(257), m_idx_719(258)>
  # nm_idx_120 = PHI <nm_idx_119(257), nm_idx_718(258)>
  # DEBUG nm_idx => nm_idx_120
  # DEBUG m_idx => m_idx_106
  # DEBUG match => match_10
  D.45008_720 = m_idx_106 == 0;
  D.45009_721 = nm_idx_120 != 0;
  D.45010_722 = D.45008_720 && D.45009_721;
  if (D.45010_722 != 0)
    goto <bb 260>;
  else
    goto <bb 272>;

<bb 260>:
  j_723 = 0;
  # DEBUG j => j_723
  goto <bb 271>;

<bb 261>:
  timp_724 = 0B;
  # DEBUG timp => timp_724
  D.45013_725 = near_matches[j_133].rate;
  near_rate_726 = (uint32_t) D.45013_725;
  # DEBUG near_rate => near_rate_726
  near_match_727 = near_matches[j_133].imp;
  # DEBUG near_match => near_match_727
  near_map_728 = near_matches[j_133].map;
  # DEBUG near_map => near_map_728
  D.45014_729 = near_match_727->iananame;
  if (near_rate_726 == 0)
    goto <bb 262>;
  else
    goto <bb 263>;

<bb 262>:
  iftmp.95_730 = near_match_727->samples_per_second;
  goto <bb 264>;

<bb 263>:
  iftmp.95_731 = near_rate_726;

<bb 264>:
  # iftmp.95_145 = PHI <iftmp.95_730(262), iftmp.95_731(263)>
  switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45014_729, iftmp.95_145, codec_ms_93);
  prefs[0] = &tmp;
  num_732 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);
  # DEBUG num => num_732
  if (num_732 != 0)
    goto <bb 265>;
  else
    goto <bb 266>;

<bb 265>:
  timp_733 = search[0];
  # DEBUG timp => timp_733
  goto <bb 267>;

<bb 266>:
  timp_734 = near_match_727;
  # DEBUG timp => timp_734

<bb 267>:
  # timp_134 = PHI <timp_733(265), timp_734(266)>
  # DEBUG timp => timp_134
  if (maxptime_39 == 0)
    goto <bb 269>;
  else
    goto <bb 268>;

<bb 268>:
  D.45025_735 = timp_134->microseconds_per_packet;
  D.45026_736 = D.45025_735 / 1000;
  if (D.45026_736 <= maxptime_39)
    goto <bb 269>;
  else
    goto <bb 270>;

<bb 269>:
  D.45027_738 = timp_134->iananame;
  D.45025_739 = timp_134->microseconds_per_packet;
  D.45026_740 = D.45025_739 / 1000;
  D.45028_741 = timp_134->actual_samples_per_second;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45027_738, D.45026_740, D.45028_741);
  match_742 = 1;
  # DEBUG match => match_742
  D.45029_743 = near_matches[j_133].codec_idx;
  matches[m_idx_106].codec_idx = D.45029_743;
  near_rate.96_744 = (int) near_rate_726;
  matches[m_idx_106].rate = near_rate.96_744;
  matches[m_idx_106].imp = timp_134;
  matches[m_idx_106].map = near_map_728;
  m_idx_745 = m_idx_106 + 1;
  # DEBUG m_idx => m_idx_745
  goto <bb 272>;

<bb 270>:
  j_737 = j_133 + 1;
  # DEBUG j => j_737

<bb 271>:
  # j_133 = PHI <j_723(260), j_737(270)>
  # DEBUG j => j_133
  if (j_133 < nm_idx_120)
    goto <bb 261>;
  else
    goto <bb 272>;

<bb 272>:
  # match_11 = PHI <match_10(259), match_742(269), match_10(271)>
  # m_idx_107 = PHI <m_idx_106(259), m_idx_745(269), m_idx_106(271)>
  # DEBUG m_idx => m_idx_107
  # DEBUG match => match_11
  if (m_idx_107 != 0)
    goto <bb 273>;
  else
    goto <bb 295>;

<bb 273>:
  if (greedy_47 != 0)
    goto <bb 274>;
  else
    goto <bb 275>;

<bb 274>:
  greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);

<bb 275>:
  match_746 = 1;
  # DEBUG match => match_746
  a_engine_188->codec_negotiated = 1;
  smh_186->num_negotiated_codecs = 0;
  j_747 = 0;
  # DEBUG j => j_747
  goto <bb 294>;

<bb 276>:
  D.45035_748 = matches[j_135].map;
  D.45036_749 = D.45035_748->rm_encoding;
  D.45035_750 = matches[j_135].map;
  D.45037_751 = D.45035_750->rm_fmtp;
  D.45035_752 = matches[j_135].map;
  D.45038_753 = D.45035_752->rm_pt;
  D.45039_754 = (uint32_t) D.45038_753;
  D.45040_755 = matches[j_135].imp;
  D.45041_756 = D.45040_755->samples_per_second;
  D.45040_757 = matches[j_135].imp;
  D.45042_758 = D.45040_757->microseconds_per_packet;
  D.45043_759 = D.45042_758 / 1000;
  D.45044_760 = (uint32_t) D.45043_759;
  pmap_761 = switch_core_media_add_payload_map (session_161(D), 0, D.45036_749, D.45037_751, sdp_type_546(D), D.45039_754, D.45041_756, D.45044_760, 1);
  # DEBUG pmap => pmap_761
  mimp_762 = matches[j_135].imp;
  # DEBUG mimp => mimp_762
  mmap_763 = matches[j_135].map;
  # DEBUG mmap => mmap_763
  if (j_135 == 0)
    goto <bb 277>;
  else
    goto <bb 279>;

<bb 277>:
  a_engine_188->cur_payload_map = pmap_761;
  D.44750_764 = a_engine_188->cur_payload_map;
  D.44750_764->current = 1;
  D.44605_765 = a_engine_188->rtp_session;
  if (D.44605_765 != 0B)
    goto <bb 278>;
  else
    goto <bb 279>;

<bb 278>:
  D.44605_766 = a_engine_188->rtp_session;
  D.45049_767 = pmap_761->pt;
  switch_rtp_set_default_payload (D.44605_766, D.45049_767);

<bb 279>:
  D.45050_768 = mmap_763->rm_encoding;
  D.45051_769 = switch_core_perform_session_strdup (session_161(D), D.45050_768, "src/switch_core_media.c", &__func__, 3535);
  pmap_761->rm_encoding = D.45051_769;
  D.45052_770 = mimp_762->iananame;
  D.45053_771 = switch_core_perform_session_strdup (session_161(D), D.45052_770, "src/switch_core_media.c", &__func__, 3536);
  pmap_761->iananame = D.45053_771;
  D.45054_772 = mmap_763->rm_pt;
  D.45055_773 = (unsigned char) D.45054_772;
  pmap_761->recv_pt = D.45055_773;
  D.45056_774 = mimp_762->samples_per_second;
  pmap_761->rm_rate = D.45056_774;
  D.45056_775 = mimp_762->samples_per_second;
  pmap_761->adv_rm_rate = D.45056_775;
  D.45052_776 = mimp_762->iananame;
  D.45057_777 = strcasecmp (D.45052_776, "g722");
  if (D.45057_777 != 0)
    goto <bb 280>;
  else
    goto <bb 281>;

<bb 280>:
  D.45060_778 = mimp_762->actual_samples_per_second;
  pmap_761->rm_rate = D.45060_778;

<bb 281>:
  D.45061_779 = mimp_762->microseconds_per_packet;
  D.45062_780 = D.45061_779 / 1000;
  D.45063_781 = (uint32_t) D.45062_780;
  pmap_761->codec_ms = D.45063_781;
  D.45064_782 = mimp_762->bits_per_second;
  D.45065_783 = (uint32_t) D.45064_782;
  pmap_761->bitrate = D.45065_783;
  D.45067_784 = mmap_763->rm_params;
  if (D.45067_784 != 0B)
    goto <bb 282>;
  else
    goto <bb 283>;

<bb 282>:
  D.45067_785 = mmap_763->rm_params;
  iftmp.97_786 = atoi (D.45067_785);
  goto <bb 284>;

<bb 283>:
  iftmp.97_787 = 1;

<bb 284>:
  # iftmp.97_146 = PHI <iftmp.97_786(282), iftmp.97_787(283)>
  pmap_761->channels = iftmp.97_146;
  D.45050_788 = mmap_763->rm_encoding;
  D.45071_789 = strcasecmp (D.45050_788, "opus");
  if (D.45071_789 == 0)
    goto <bb 285>;
  else
    goto <bb 292>;

<bb 285>:
  D.45074_790 = pmap_761->channels;
  if (D.45074_790 == 1)
    goto <bb 286>;
  else
    goto <bb 287>;

<bb 286>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
  pmap_761->adv_channels = 1;
  goto <bb 288>;

<bb 287>:
  pmap_761->adv_channels = 2;

<bb 288>:
  D.45080_791 = mmap_763->rm_fmtp;
  D.45081_792 = _zstr (D.45080_791);
  if (D.45081_792 == 0)
    goto <bb 289>;
  else
    goto <bb 291>;

<bb 289>:
  D.45080_793 = mmap_763->rm_fmtp;
  D.45083_794 = switch_stristr ("stereo=1", D.45080_793);
  if (D.45083_794 != 0B)
    goto <bb 290>;
  else
    goto <bb 291>;

<bb 290>:
  pmap_761->channels = 2;
  goto <bb 293>;

<bb 291>:
  pmap_761->channels = 1;
  goto <bb 293>;

<bb 292>:
  D.45074_795 = pmap_761->channels;
  pmap_761->adv_channels = D.45074_795;

<bb 293>:
  D.45086_796 = connection_124->c_address;
  D.45087_797 = switch_core_perform_session_strdup (session_161(D), D.45086_796, "src/switch_core_media.c", &__func__, 3563);
  pmap_761->remote_sdp_ip = D.45087_797;
  D.44697_798 = m_28->m_port;
  D.45088_799 = (short unsigned int) D.44697_798;
  pmap_761->remote_sdp_port = D.45088_799;
  D.45080_800 = mmap_763->rm_fmtp;
  D.45089_801 = switch_core_perform_session_strdup (session_161(D), D.45080_800, "src/switch_core_media.c", &__func__, 3565);
  pmap_761->rm_fmtp = D.45089_801;
  D.45054_802 = mmap_763->rm_pt;
  D.45055_803 = (unsigned char) D.45054_802;
  pmap_761->agreed_pt = D.45055_803;
  D.44655_804 = smh_186->num_negotiated_codecs;
  smh_186->negotiated_codecs[D.44655_804] = mimp_762;
  D.45090_805 = D.44655_804 + 1;
  smh_186->num_negotiated_codecs = D.45090_805;
  D.45054_806 = mmap_763->rm_pt;
  D.45055_807 = (unsigned char) D.45054_806;
  pmap_761->recv_pt = D.45055_807;
  j_808 = j_135 + 1;
  # DEBUG j => j_808

<bb 294>:
  # j_135 = PHI <j_747(275), j_808(293)>
  # DEBUG j => j_135
  if (j_135 < m_idx_107)
    goto <bb 276>;
  else
    goto <bb 295>;

<bb 295>:
  # match_12 = PHI <match_11(272), match_746(294)>
  # DEBUG match => match_12
  if (match_12 != 0)
    goto <bb 296>;
  else
    goto <bb 301>;

<bb 296>:
  D.44750_809 = a_engine_188->cur_payload_map;
  D.44762_810 = D.44750_809->remote_sdp_port;
  D.44767_811 = (int) D.44762_810;
  switch_snprintf (&tmp, 50, "%d", D.44767_811);
  D.44530_812 = session_161(D)->channel;
  D.44750_813 = a_engine_188->cur_payload_map;
  D.44760_814 = D.44750_813->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_812, "remote_media_ip", D.44760_814, 1);
  D.44530_815 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_815, "remote_media_port", &tmp, 1);
  D.44750_816 = a_engine_188->cur_payload_map;
  D.45093_817 = D.44750_816->recv_pt;
  D.45094_818 = (int) D.45093_817;
  switch_snprintf (&tmp, 50, "%d", D.45094_818);
  D.44530_819 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_819, "rtp_audio_recv_pt", &tmp, 1);
  D.45095_820 = &a_engine_188->read_codec;
  D.45096_821 = switch_core_codec_ready (D.45095_820);
  if (D.45096_821 != 0)
    goto <bb 297>;
  else
    goto <bb 298>;

<bb 297>:
  a_engine_188->reset_codec = 1;

<bb 298>:
  D.44471_822 = smh_186->mparams;
  D.45099_823 = D.44471_822->codec_flags;
  D.45100_824 = switch_core_media_set_codec (session_161(D), 0, D.45099_823);
  if (D.45100_824 == 0)
    goto <bb 299>;
  else
    goto <bb 300>;

<bb 299>:
  got_audio_825 = 1;
  # DEBUG got_audio => got_audio_825
  check_ice (smh_186, 0, sdp_198, m_28);
  goto <bb 301>;

<bb 300>:
  match_826 = 0;
  # DEBUG match => match_826

<bb 301>:
  # match_13 = PHI <match_12(295), match_12(299), match_826(300)>
  # got_audio_65 = PHI <got_audio_67(295), got_audio_825(299), got_audio_67(300)>
  # DEBUG got_audio => got_audio_65
  # DEBUG match => match_13
  if (best_te_20 == 0)
    goto <bb 302>;
  else
    goto <bb 305>;

<bb 302>:
  D.45108_827 = switch_media_handle_test_media_flag (smh_186, 8);
  if (D.45108_827 != 0)
    goto <bb 304>;
  else
    goto <bb 303>;

<bb 303>:
  D.44530_828 = session_161(D)->channel;
  D.45110_829 = switch_channel_test_flag (D.44530_828, 93);
  if (D.45110_829 != 0)
    goto <bb 304>;
  else
    goto <bb 305>;

<bb 304>:
  D.44471_830 = smh_186->mparams;
  D.45111_831 = D.44471_830->te;
  D.45112_832 = (int) D.45111_831;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45112_832);
  D.44471_833 = smh_186->mparams;
  best_te_834 = D.44471_833->te;
  # DEBUG best_te => best_te_834

<bb 305>:
  # best_te_21 = PHI <best_te_20(301), best_te_20(303), best_te_834(304)>
  # DEBUG best_te => best_te_21
  if (best_te_21 != 0)
    goto <bb 306>;
  else
    goto <bb 311>;

<bb 306>:
  D.45115_835 = switch_channel_direction (channel_162);
  if (D.45115_835 == 1)
    goto <bb 307>;
  else
    goto <bb 309>;

<bb 307>:
  D.44471_836 = smh_186->mparams;
  D.44471_836->te = best_te_21;
  te_837 = D.44471_836->te;
  # DEBUG te => te_837
  D.44857_838 = (int) best_te_21;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_838);
  D.44530_839 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_839, "dtmf_type", "rfc2833", 1);
  D.44471_840 = smh_186->mparams;
  D.44471_840->dtmf_type = 0;
  D.44605_841 = a_engine_188->rtp_session;
  if (D.44605_841 != 0B)
    goto <bb 308>;
  else
    goto <bb 397>;

<bb 308>:
  D.44605_842 = a_engine_188->rtp_session;
  switch_rtp_set_telephony_event (D.44605_842, best_te_21);
  D.44530_843 = session_161(D)->channel;
  D.44857_844 = (int) best_te_21;
  switch_channel_set_variable_printf (D.44530_843, "rtp_2833_send_payload", "%d", D.44857_844);
  goto <bb 397>;

<bb 309>:
  D.44471_845 = smh_186->mparams;
  D.44471_846 = smh_186->mparams;
  D.44471_846->te = best_te_21;
  D.45111_847 = D.44471_846->te;
  D.44471_846->recv_te = D.45111_847;
  te_848 = D.44471_846->recv_te;
  # DEBUG te => te_848
  D.45121_849 = (int) te_848;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45121_849);
  D.44530_850 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_850, "dtmf_type", "rfc2833", 1);
  D.44471_851 = smh_186->mparams;
  D.44471_851->dtmf_type = 0;
  D.44605_852 = a_engine_188->rtp_session;
  if (D.44605_852 != 0B)
    goto <bb 310>;
  else
    goto <bb 397>;

<bb 310>:
  D.44605_853 = a_engine_188->rtp_session;
  switch_rtp_set_telephony_event (D.44605_853, te_848);
  D.44530_854 = session_161(D)->channel;
  D.45121_855 = (int) te_848;
  switch_channel_set_variable_printf (D.44530_854, "rtp_2833_send_payload", "%d", D.45121_855);
  D.44605_856 = a_engine_188->rtp_session;
  switch_rtp_set_telephony_recv_event (D.44605_856, te_848);
  D.44530_857 = session_161(D)->channel;
  D.45121_858 = (int) te_848;
  switch_channel_set_variable_printf (D.44530_857, "rtp_2833_recv_payload", "%d", D.45121_858);
  goto <bb 397>;

<bb 311>:
  D.45125_859 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
  D.45126_860 = switch_false (D.45125_859);
  if (D.45126_860 == 0)
    goto <bb 312>;
  else
    goto <bb 313>;

<bb 312>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
  D.44530_861 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_861, "dtmf_type", "info", 1);
  D.44471_862 = smh_186->mparams;
  D.44471_862->dtmf_type = 1;
  D.44471_863 = smh_186->mparams;
  D.44471_864 = smh_186->mparams;
  D.44471_864->te = 0;
  D.45111_865 = D.44471_864->te;
  D.44471_864->recv_te = D.45111_865;
  te_866 = D.44471_864->recv_te;
  # DEBUG te => te_866
  goto <bb 397>;

<bb 313>:
  D.44530_867 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_867, "dtmf_type", "none", 1);
  D.44471_868 = smh_186->mparams;
  D.44471_868->dtmf_type = 2;
  D.44471_869 = smh_186->mparams;
  D.44471_870 = smh_186->mparams;
  D.44471_870->te = 0;
  D.45111_871 = D.44471_870->te;
  D.44471_870->recv_te = D.45111_871;
  te_872 = D.44471_870->recv_te;
  # DEBUG te => te_872
  goto <bb 397>;

<bb 314>:
  D.44681_873 = m_28->m_type;
  if (D.44681_873 == 3)
    goto <bb 315>;
  else
    goto <bb 397>;

<bb 315>:
  D.44697_874 = m_28->m_port;
  if (D.44697_874 != 0)
    goto <bb 316>;
  else
    goto <bb 397>;

<bb 316>:
  mimp_875 = 0B;
  # DEBUG mimp => mimp_875
  vmatch_876 = 0;
  # DEBUG vmatch => vmatch_876
  nm_idx_877 = 0;
  # DEBUG nm_idx => nm_idx_877
  m_idx_878 = 0;
  # DEBUG m_idx => m_idx_878
  memset (&matches, 0, 480);
  memset (&near_matches, 0, 480);
  D.44530_879 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_879, "video_possible", "true", 1);
  connection_880 = sdp_198->sdp_connection;
  # DEBUG connection => connection_880
  D.44546_881 = m_28->m_connections;
  if (D.44546_881 != 0B)
    goto <bb 317>;
  else
    goto <bb 318>;

<bb 317>:
  connection_882 = m_28->m_connections;
  # DEBUG connection => connection_882

<bb 318>:
  # connection_125 = PHI <connection_880(316), connection_882(317)>
  # DEBUG connection => connection_125
  if (connection_125 == 0B)
    goto <bb 319>;
  else
    goto <bb 320>;

<bb 319>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  match_883 = 0;
  # DEBUG match => match_883
  goto <bb 399> (done);

<bb 320>:
  map_884 = m_28->m_rtpmaps;
  # DEBUG map => map_884
  goto <bb 379>;

<bb 321>:
  D.45138_885 = switch_rtp_has_dtls ();
  if (D.45138_885 != 0)
    goto <bb 322>;
  else
    goto <bb 329>;

<bb 322>:
  D.45141_886 = dtls_ok (session_161(D));
  if (D.45141_886 != 0)
    goto <bb 323>;
  else
    goto <bb 329>;

<bb 323>:
  attr_887 = m_28->m_attributes;
  # DEBUG attr => attr_887
  goto <bb 328>;

<bb 324>:
  D.44590_888 = attr_32->a_name;
  D.45144_889 = strcasecmp (D.44590_888, "fingerprint");
  if (D.45144_889 == 0)
    goto <bb 325>;
  else
    goto <bb 327>;

<bb 325>:
  D.44619_890 = attr_32->a_value;
  D.45147_891 = _zstr (D.44619_890);
  if (D.45147_891 == 0)
    goto <bb 326>;
  else
    goto <bb 327>;

<bb 326>:
  got_video_crypto_892 = 1;
  # DEBUG got_video_crypto => got_video_crypto_892

<bb 327>:
  # got_video_crypto_57 = PHI <got_video_crypto_58(324), got_video_crypto_58(325), got_video_crypto_892(326)>
  # DEBUG got_video_crypto => got_video_crypto_57
  attr_893 = attr_32->a_next;
  # DEBUG attr => attr_893

<bb 328>:
  # attr_32 = PHI <attr_887(323), attr_893(327)>
  # got_video_crypto_58 = PHI <got_video_crypto_62(323), got_video_crypto_57(327)>
  # DEBUG got_video_crypto => got_video_crypto_58
  # DEBUG attr => attr_32
  if (attr_32 != 0B)
    goto <bb 324>;
  else
    goto <bb 329>;

<bb 329>:
  # got_video_crypto_59 = PHI <got_video_crypto_62(321), got_video_crypto_62(322), got_video_crypto_58(328)>
  # DEBUG got_video_crypto => got_video_crypto_59
  attr_894 = m_28->m_attributes;
  # DEBUG attr => attr_894
  goto <bb 358>;

<bb 330>:
  D.44590_895 = attr_33->a_name;
  D.45152_896 = strcasecmp (D.44590_895, "framerate");
  if (D.45152_896 == 0)
    goto <bb 331>;
  else
    goto <bb 332>;

<bb 331>:
  D.44619_897 = attr_33->a_value;
  if (D.44619_897 != 0B)
    goto <bb 357>;
  else
    goto <bb 332>;

<bb 332>:
  D.44590_898 = attr_33->a_name;
  D.45155_899 = strcasecmp (D.44590_898, "rtcp-fb");
  if (D.45155_899 == 0)
    goto <bb 333>;
  else
    goto <bb 337>;

<bb 333>:
  D.44619_900 = attr_33->a_value;
  D.45158_901 = _zstr (D.44619_900);
  if (D.45158_901 == 0)
    goto <bb 334>;
  else
    goto <bb 357>;

<bb 334>:
  D.44619_902 = attr_33->a_value;
  D.45161_903 = switch_stristr ("fir", D.44619_902);
  if (D.45161_903 != 0B)
    goto <bb 335>;
  else
    goto <bb 336>;

<bb 335>:
  D.45164_904 = v_engine_189->fir;
  D.45165_905 = D.45164_904 + 1;
  v_engine_189->fir = D.45165_905;

<bb 336>:
  D.44471_906 = smh_186->mparams;
  D.44471_906->rtcp_video_interval_msec = "10000";
  goto <bb 357>;

<bb 337>:
  D.44590_907 = attr_33->a_name;
  D.45169_908 = strcasecmp (D.44590_907, "rtcp");
  if (D.45169_908 == 0)
    goto <bb 338>;
  else
    goto <bb 349>;

<bb 338>:
  D.44619_909 = attr_33->a_value;
  if (D.44619_909 != 0B)
    goto <bb 339>;
  else
    goto <bb 349>;

<bb 339>:
  __s2_len_910 = 1;
  # DEBUG __s2_len => __s2_len_910
  if (__s2_len_910 <= 3)
    goto <bb 340>;
  else
    goto <bb 345>;

<bb 340>:
  __s1_911 = attr_33->a_value;
  # DEBUG __s1 => __s1_911
  D.45175_912 = *__s1_911;
  D.45176_913 = (int) D.45175_912;
  D.45177_914 = "1";
  D.45178_915 = MEM[(const unsigned char *)D.45177_914];
  D.45179_916 = (int) D.45178_915;
  __result_917 = D.45176_913 - D.45179_916;
  # DEBUG __result => __result_917
  D.45180_918 = __s2_len_910 != 0;
  D.45181_919 = __result_917 == 0;
  D.45182_920 = D.45180_918 && D.45181_919;
  if (D.45182_920 != 0)
    goto <bb 341>;
  else
    goto <bb 344>;

<bb 341>:
  D.45185_921 = __s1_911 + 1;
  D.45186_922 = *D.45185_921;
  D.45187_923 = (int) D.45186_922;
  D.45188_924 = &"1"[1];
  D.45189_925 = MEM[(const unsigned char *)D.45188_924];
  D.45190_926 = (int) D.45189_925;
  __result_927 = D.45187_923 - D.45190_926;
  # DEBUG __result => __result_927
  D.45191_928 = __s2_len_910 > 1;
  D.45181_929 = __result_927 == 0;
  D.45192_930 = D.45191_928 && D.45181_929;
  if (D.45192_930 != 0)
    goto <bb 342>;
  else
    goto <bb 344>;

<bb 342>:
  D.45195_931 = __s1_911 + 2;
  D.45196_932 = *D.45195_931;
  D.45197_933 = (int) D.45196_932;
  D.45198_934 = &"1"[2];
  D.45199_935 = MEM[(const unsigned char *)D.45198_934];
  D.45200_936 = (int) D.45199_935;
  __result_937 = D.45197_933 - D.45200_936;
  # DEBUG __result => __result_937
  D.45201_938 = __s2_len_910 > 2;
  D.45181_939 = __result_937 == 0;
  D.45202_940 = D.45201_938 && D.45181_939;
  if (D.45202_940 != 0)
    goto <bb 343>;
  else
    goto <bb 344>;

<bb 343>:
  D.45205_941 = __s1_911 + 3;
  D.45206_942 = *D.45205_941;
  D.45207_943 = (int) D.45206_942;
  D.45208_944 = &"1"[3];
  D.45209_945 = MEM[(const unsigned char *)D.45208_944];
  D.45210_946 = (int) D.45209_945;
  __result_947 = D.45207_943 - D.45210_946;
  # DEBUG __result => __result_947

<bb 344>:
  # __result_140 = PHI <__result_917(340), __result_927(341), __result_937(342), __result_947(343)>
  # DEBUG __result => __result_140
  D.39088_948 = __result_140;
  iftmp.98_949 = D.39088_948;
  goto <bb 346>;

<bb 345>:
  D.44619_950 = attr_33->a_value;
  iftmp.98_951 = __builtin_strcmp (D.44619_950, "1");

<bb 346>:
  # iftmp.98_147 = PHI <iftmp.98_949(344), iftmp.98_951(345)>
  D.39089_952 = iftmp.98_147;
  if (D.39089_952 == 0)
    goto <bb 347>;
  else
    goto <bb 349>;

<bb 347>:
  D.44530_953 = session_161(D)->channel;
  D.44619_954 = attr_33->a_value;
  switch_channel_set_variable_var_check (D.44530_953, "rtp_remote_video_rtcp_port", D.44619_954, 1);
  D.44619_955 = attr_33->a_value;
  D.45213_956 = atoi (D.44619_955);
  D.45214_957 = (short unsigned int) D.45213_956;
  v_engine_189->remote_rtcp_port = D.45214_957;
  D.44471_958 = smh_186->mparams;
  D.45215_959 = D.44471_958->rtcp_video_interval_msec;
  if (D.45215_959 == 0B)
    goto <bb 348>;
  else
    goto <bb 357>;

<bb 348>:
  D.44471_960 = smh_186->mparams;
  D.44471_960->rtcp_video_interval_msec = "5000";
  goto <bb 357>;

<bb 349>:
  if (got_video_crypto_61 == 0)
    goto <bb 350>;
  else
    goto <bb 357>;

<bb 350>:
  D.44590_961 = attr_33->a_name;
  D.45220_962 = strcasecmp (D.44590_961, "crypto");
  if (D.45220_962 == 0)
    goto <bb 351>;
  else
    goto <bb 357>;

<bb 351>:
  D.44619_963 = attr_33->a_value;
  D.45223_964 = _zstr (D.44619_963);
  if (D.45223_964 == 0)
    goto <bb 352>;
  else
    goto <bb 357>;

<bb 352>:
  D.44471_965 = smh_186->mparams;
  D.44821_966 = D.44471_965->ndlb;
  D.44822_967 = D.44821_966 & 4;
  if (D.44822_967 == 0)
    goto <bb 353>;
  else
    goto <bb 356>;

<bb 353>:
  D.44530_968 = session_161(D)->channel;
  D.45228_969 = switch_channel_get_variable_dup (D.44530_968, "rtp_allow_crypto_in_avp", 1, -1);
  D.45229_970 = switch_true (D.45228_969);
  if (D.45229_970 == 0)
    goto <bb 354>;
  else
    goto <bb 356>;

<bb 354>:
  D.44666_971 = m_28->m_proto;
  D.44829_972 = D.44666_971 != 257;
  D.44830_973 = got_webrtc_78 == 0;
  D.44831_974 = D.44829_972 && D.44830_973;
  if (D.44831_974 != 0)
    goto <bb 355>;
  else
    goto <bb 356>;

<bb 355>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  match_975 = 0;
  # DEBUG match => match_975
  goto <bb 399> (done);

<bb 356>:
  crypto_976 = attr_33->a_value;
  # DEBUG crypto => crypto_976
  crypto_tag_977 = atoi (crypto_976);
  # DEBUG crypto_tag => crypto_tag_977
  got_video_crypto_978 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_976, crypto_tag_977, sdp_type_546(D));
  # DEBUG got_video_crypto => got_video_crypto_978

<bb 357>:
  # got_video_crypto_60 = PHI <got_video_crypto_61(331), got_video_crypto_61(336), got_video_crypto_61(348), got_video_crypto_61(349), got_video_crypto_61(350), got_video_crypto_61(351), got_video_crypto_978(356), got_video_crypto_61(333), got_video_crypto_61(347)>
  # DEBUG got_video_crypto => got_video_crypto_60
  attr_979 = attr_33->a_next;
  # DEBUG attr => attr_979

<bb 358>:
  # attr_33 = PHI <attr_894(329), attr_979(357)>
  # got_video_crypto_61 = PHI <got_video_crypto_59(329), got_video_crypto_60(357)>
  # DEBUG got_video_crypto => got_video_crypto_61
  # DEBUG attr => attr_33
  if (attr_33 != 0B)
    goto <bb 330>;
  else
    goto <bb 359>;

<bb 359>:
  rm_encoding_980 = map_136->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_980
  if (rm_encoding_980 == 0B)
    goto <bb 360>;
  else
    goto <bb 361>;

<bb 360>:
  rm_encoding_981 = "";
  # DEBUG rm_encoding => rm_encoding_981

<bb 361>:
  # rm_encoding_137 = PHI <rm_encoding_980(359), rm_encoding_981(360)>
  # DEBUG rm_encoding => rm_encoding_137
  i_982 = 0;
  # DEBUG i => i_982
  goto <bb 377>;

<bb 362>:
  i.99_983 = (unsigned int) i_139;
  D.45237_984 = i.99_983 * 4;
  D.45238_985 = codec_array_84 + D.45237_984;
  imp_986 = *D.45238_985;
  # DEBUG imp => imp_986
  D.45239_987 = imp_986->codec_type;
  if (D.45239_987 != 1)
    goto <bb 363>;
  else
    goto <bb 364>;

<bb 363>:
  // predicted unlikely by continue predictor.
  goto <bb 376>;

<bb 364>:
  D.44530_988 = session_161(D)->channel;
  D.45242_989 = switch_channel_direction (D.44530_988);
  if (D.45242_989 == 0)
    goto <bb 365>;
  else
    goto <bb 367>;

<bb 365>:
  D.44530_990 = session_161(D)->channel;
  D.45245_991 = switch_channel_test_flag (D.44530_990, 114);
  if (D.45245_991 != 0)
    goto <bb 366>;
  else
    goto <bb 367>;

<bb 366>:
  // predicted unlikely by continue predictor.
  goto <bb 376>;

<bb 367>:
  D.45248_992 = map_136->rm_pt;
  D.45249_993 = (int) D.45248_992;
  D.45250_994 = imp_986->iananame;
  D.45251_995 = imp_986->ianacode;
  D.45252_996 = (int) D.45251_995;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45249_993, D.45250_994, D.45252_996);
  D.45256_997 = map_136->rm_encoding;
  D.45257_998 = _zstr (D.45256_997);
  if (D.45257_998 != 0)
    goto <bb 369>;
  else
    goto <bb 368>;

<bb 368>:
  D.44471_999 = smh_186->mparams;
  D.44821_1000 = D.44471_999->ndlb;
  D.44937_1001 = (int) D.44821_1000;
  D.44938_1002 = D.44937_1001 & 1;
  D.44939_1003 = (_Bool) D.44938_1002;
  if (D.44939_1003 != 0)
    goto <bb 369>;
  else
    goto <bb 371>;

<bb 369>:
  D.45248_1004 = map_136->rm_pt;
  D.45249_1005 = (int) D.45248_1004;
  if (D.45249_1005 <= 95)
    goto <bb 370>;
  else
    goto <bb 371>;

<bb 370>:
  D.45248_1006 = map_136->rm_pt;
  D.45249_1007 = (int) D.45248_1006;
  D.45251_1008 = imp_986->ianacode;
  D.45252_1009 = (int) D.45251_1008;
  vmatch_1010 = D.45249_1007 == D.45252_1009;
  # DEBUG vmatch => vmatch_1010
  goto <bb 372>;

<bb 371>:
  D.45250_1011 = imp_986->iananame;
  D.45260_1012 = strcasecmp (rm_encoding_137, D.45250_1011);
  vmatch_1013 = D.45260_1012 == 0;
  # DEBUG vmatch => vmatch_1013

<bb 372>:
  # vmatch_138 = PHI <vmatch_1010(370), vmatch_1013(371)>
  # DEBUG vmatch => vmatch_138
  if (vmatch_138 != 0)
    goto <bb 373>;
  else
    goto <bb 375>;

<bb 373>:
  D.45263_1014 = map_136->rm_rate;
  D.45264_1015 = imp_986->samples_per_second;
  if (D.45263_1014 == D.45264_1015)
    goto <bb 374>;
  else
    goto <bb 375>;

<bb 374>:
  matches[m_idx_110].imp = imp_986;
  matches[m_idx_110].map = map_136;
  D.45250_1016 = imp_986->iananame;
  D.45251_1017 = imp_986->ianacode;
  D.45252_1018 = (int) D.45251_1017;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45250_1016, D.45252_1018);
  m_idx_1019 = m_idx_110 + 1;
  # DEBUG m_idx => m_idx_1019

<bb 375>:
  # m_idx_108 = PHI <m_idx_110(372), m_idx_110(373), m_idx_1019(374)>
  # DEBUG m_idx => m_idx_108
  vmatch_1020 = 0;
  # DEBUG vmatch => vmatch_1020

<bb 376>:
  # m_idx_109 = PHI <m_idx_110(363), m_idx_110(366), m_idx_108(375)>
  # DEBUG m_idx => m_idx_109
  i_1021 = i_139 + 1;
  # DEBUG i => i_1021

<bb 377>:
  # m_idx_110 = PHI <m_idx_111(361), m_idx_109(376)>
  # i_139 = PHI <i_982(361), i_1021(376)>
  # DEBUG i => i_139
  # DEBUG m_idx => m_idx_110
  if (i_139 < total_codecs_85)
    goto <bb 362>;
  else
    goto <bb 378>;

<bb 378>:
  map_1022 = map_136->rm_next;
  # DEBUG map => map_1022

<bb 379>:
  # got_video_crypto_62 = PHI <got_video_crypto_64(320), got_video_crypto_61(378)>
  # m_idx_111 = PHI <m_idx_878(320), m_idx_110(378)>
  # map_136 = PHI <map_884(320), map_1022(378)>
  # DEBUG map => map_136
  # DEBUG m_idx => m_idx_111
  # DEBUG got_video_crypto => got_video_crypto_62
  if (map_136 != 0B)
    goto <bb 321>;
  else
    goto <bb 380>;

<bb 380>:
  D.45002_1023 = smh_186->crypto_mode;
  D.45003_1024 = D.45002_1023 == 1;
  D.45267_1025 = got_video_crypto_62 <= 0;
  D.45268_1026 = D.45003_1024 && D.45267_1025;
  if (D.45268_1026 != 0)
    goto <bb 381>;
  else
    goto <bb 382>;

<bb 381>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
  vmatch_1027 = 0;
  # DEBUG vmatch => vmatch_1027
  m_idx_1028 = 0;
  # DEBUG m_idx => m_idx_1028

<bb 382>:
  # m_idx_112 = PHI <m_idx_111(380), m_idx_1028(381)>
  # DEBUG m_idx => m_idx_112
  if (m_idx_112 != 0)
    goto <bb 383>;
  else
    goto <bb 397>;

<bb 383>:
  j_1029 = 0;
  # DEBUG j => j_1029
  if (greedy_47 != 0)
    goto <bb 384>;
  else
    goto <bb 385>;

<bb 384>:
  greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);

<bb 385>:
  vmatch_1030 = 1;
  # DEBUG vmatch => vmatch_1030
  v_engine_189->codec_negotiated = 1;
  j_1031 = 0;
  # DEBUG j => j_1031
  goto <bb 390>;

<bb 386>:
  D.45275_1032 = matches[j_141].map;
  D.45276_1033 = D.45275_1032->rm_encoding;
  D.45275_1034 = matches[j_141].map;
  D.45277_1035 = D.45275_1034->rm_fmtp;
  D.45275_1036 = matches[j_141].map;
  D.45278_1037 = D.45275_1036->rm_pt;
  D.45279_1038 = (uint32_t) D.45278_1037;
  D.45280_1039 = matches[j_141].imp;
  D.45281_1040 = D.45280_1039->samples_per_second;
  D.45280_1041 = matches[j_141].imp;
  D.45282_1042 = D.45280_1041->microseconds_per_packet;
  D.45283_1043 = D.45282_1042 / 1000;
  D.45284_1044 = (uint32_t) D.45283_1043;
  pmap_1045 = switch_core_media_add_payload_map (session_161(D), 1, D.45276_1033, D.45277_1035, sdp_type_546(D), D.45279_1038, D.45281_1040, D.45284_1044, 1);
  # DEBUG pmap => pmap_1045
  if (j_141 == 0)
    goto <bb 387>;
  else
    goto <bb 389>;

<bb 387>:
  v_engine_189->cur_payload_map = pmap_1045;
  D.45287_1046 = v_engine_189->cur_payload_map;
  D.45287_1046->current = 1;
  D.45288_1047 = v_engine_189->rtp_session;
  if (D.45288_1047 != 0B)
    goto <bb 388>;
  else
    goto <bb 389>;

<bb 388>:
  D.45288_1048 = v_engine_189->rtp_session;
  D.45291_1049 = pmap_1045->pt;
  switch_rtp_set_default_payload (D.45288_1048, D.45291_1049);

<bb 389>:
  mimp_1050 = matches[j_141].imp;
  # DEBUG mimp => mimp_1050
  map_1051 = matches[j_141].map;
  # DEBUG map => map_1051
  D.45256_1052 = map_1051->rm_encoding;
  D.45292_1053 = switch_core_perform_session_strdup (session_161(D), D.45256_1052, "src/switch_core_media.c", &__func__, 3804);
  pmap_1045->rm_encoding = D.45292_1053;
  D.45248_1054 = map_1051->rm_pt;
  D.45293_1055 = (unsigned char) D.45248_1054;
  pmap_1045->recv_pt = D.45293_1055;
  D.45263_1056 = map_1051->rm_rate;
  pmap_1045->rm_rate = D.45263_1056;
  D.45294_1057 = mimp_1050->microseconds_per_packet;
  D.45295_1058 = D.45294_1057 / 1000;
  D.45296_1059 = (uint32_t) D.45295_1058;
  pmap_1045->codec_ms = D.45296_1059;
  D.45086_1060 = connection_125->c_address;
  D.45297_1061 = switch_core_perform_session_strdup (session_161(D), D.45086_1060, "src/switch_core_media.c", &__func__, 3810);
  pmap_1045->remote_sdp_ip = D.45297_1061;
  D.44697_1062 = m_28->m_port;
  D.45088_1063 = (short unsigned int) D.44697_1062;
  pmap_1045->remote_sdp_port = D.45088_1063;
  D.45298_1064 = map_1051->rm_fmtp;
  D.45299_1065 = switch_core_perform_session_strdup (session_161(D), D.45298_1064, "src/switch_core_media.c", &__func__, 3813);
  pmap_1045->rm_fmtp = D.45299_1065;
  D.45248_1066 = map_1051->rm_pt;
  D.45293_1067 = (unsigned char) D.45248_1066;
  pmap_1045->agreed_pt = D.45293_1067;
  j_1068 = j_141 + 1;
  # DEBUG j => j_1068

<bb 390>:
  # j_141 = PHI <j_1031(385), j_1068(389)>
  # DEBUG j => j_141
  if (j_141 < m_idx_112)
    goto <bb 386>;
  else
    goto <bb 391>;

<bb 391>:
  D.45287_1069 = v_engine_189->cur_payload_map;
  D.45300_1070 = D.45287_1069->remote_sdp_port;
  D.45301_1071 = (int) D.45300_1070;
  switch_snprintf (&tmp, 50, "%d", D.45301_1071);
  D.44530_1072 = session_161(D)->channel;
  D.45287_1073 = v_engine_189->cur_payload_map;
  D.45302_1074 = D.45287_1073->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_1072, "remote_video_ip", D.45302_1074, 1);
  D.44530_1075 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1075, "remote_video_port", &tmp, 1);
  D.44530_1076 = session_161(D)->channel;
  D.45287_1077 = v_engine_189->cur_payload_map;
  D.45303_1078 = D.45287_1077->rm_fmtp;
  switch_channel_set_variable_var_check (D.44530_1076, "rtp_video_fmtp", D.45303_1078, 1);
  D.45287_1079 = v_engine_189->cur_payload_map;
  D.45304_1080 = D.45287_1079->agreed_pt;
  D.45305_1081 = (int) D.45304_1080;
  switch_snprintf (&tmp, 50, "%d", D.45305_1081);
  D.44530_1082 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1082, "rtp_video_pt", &tmp, 1);
  switch_core_media_check_video_codecs (session_161(D));
  D.45287_1083 = v_engine_189->cur_payload_map;
  D.45306_1084 = D.45287_1083->recv_pt;
  D.45307_1085 = (int) D.45306_1084;
  switch_snprintf (&tmp, 50, "%d", D.45307_1085);
  D.44530_1086 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1086, "rtp_video_recv_pt", &tmp, 1);
  D.45308_1087 = match_16 == 0;
  D.45309_1088 = vmatch_1030 != 0;
  D.45310_1089 = D.45308_1087 && D.45309_1088;
  if (D.45310_1089 != 0)
    goto <bb 392>;
  else
    goto <bb 393>;

<bb 392>:
  match_1090 = 1;
  # DEBUG match => match_1090

<bb 393>:
  # match_14 = PHI <match_16(391), match_1090(392)>
  # DEBUG match => match_14
  D.45313_1091 = &v_engine_189->read_codec;
  D.45314_1092 = switch_core_codec_ready (D.45313_1091);
  if (D.45314_1092 != 0)
    goto <bb 394>;
  else
    goto <bb 395>;

<bb 394>:
  v_engine_189->reset_codec = 1;

<bb 395>:
  D.45317_1093 = switch_core_media_set_video_codec (session_161(D), 0);
  if (D.45317_1093 == 0)
    goto <bb 396>;
  else
    goto <bb 397>;

<bb 396>:
  check_ice (smh_186, 1, sdp_198, m_28);

<bb 397>:
  # match_15 = PHI <match_13(312), match_16(314), match_16(315), match_16(382), match_14(395), match_14(396), match_13(309), match_13(310), match_13(307), match_13(308), match_13(313)>
  # best_te_22 = PHI <best_te_21(312), best_te_23(314), best_te_23(315), best_te_23(382), best_te_23(395), best_te_23(396), best_te_21(309), best_te_21(310), best_te_21(307), best_te_21(308), best_te_21(313)>
  # cng_pt_26 = PHI <cng_pt_25(312), cng_pt_27(314), cng_pt_27(315), cng_pt_27(382), cng_pt_27(395), cng_pt_27(396), cng_pt_25(309), cng_pt_25(310), cng_pt_25(307), cng_pt_25(308), cng_pt_25(313)>
  # got_crypto_55 = PHI <got_crypto_54(312), got_crypto_56(314), got_crypto_56(315), got_crypto_56(382), got_crypto_56(395), got_crypto_56(396), got_crypto_54(309), got_crypto_54(310), got_crypto_54(307), got_crypto_54(308), got_crypto_54(313)>
  # got_video_crypto_63 = PHI <got_video_crypto_64(312), got_video_crypto_64(314), got_video_crypto_64(315), got_video_crypto_62(382), got_video_crypto_62(395), got_video_crypto_62(396), got_video_crypto_64(309), got_video_crypto_64(310), got_video_crypto_64(307), got_video_crypto_64(308), got_video_crypto_64(313)>
  # got_audio_66 = PHI <got_audio_65(312), got_audio_67(314), got_audio_67(315), got_audio_67(382), got_audio_67(395), got_audio_67(396), got_audio_65(309), got_audio_65(310), got_audio_65(307), got_audio_65(308), got_audio_65(313)>
  # codec_ms_94 = PHI <codec_ms_93(312), codec_ms_95(314), codec_ms_95(315), codec_ms_95(382), codec_ms_95(395), codec_ms_95(396), codec_ms_93(309), codec_ms_93(310), codec_ms_93(307), codec_ms_93(308), codec_ms_93(313)>
  # m_idx_113 = PHI <m_idx_107(312), m_idx_114(314), m_idx_114(315), m_idx_112(382), m_idx_112(395), m_idx_112(396), m_idx_107(309), m_idx_107(310), m_idx_107(307), m_idx_107(308), m_idx_107(313)>
  # nm_idx_121 = PHI <nm_idx_120(312), nm_idx_122(314), nm_idx_122(315), nm_idx_877(382), nm_idx_877(395), nm_idx_877(396), nm_idx_120(309), nm_idx_120(310), nm_idx_120(307), nm_idx_120(308), nm_idx_120(313)>
  # DEBUG nm_idx => nm_idx_121
  # DEBUG m_idx => m_idx_113
  # DEBUG codec_ms => codec_ms_94
  # DEBUG got_audio => got_audio_66
  # DEBUG got_video_crypto => got_video_crypto_63
  # DEBUG got_crypto => got_crypto_55
  # DEBUG cng_pt => cng_pt_26
  # DEBUG best_te => best_te_22
  # DEBUG match => match_15
  m_1094 = m_28->m_next;
  # DEBUG m => m_1094

<bb 398>:
  # match_16 = PHI <match_148(90), match_15(397)>
  # best_te_23 = PHI <best_te_149(90), best_te_22(397)>
  # cng_pt_27 = PHI <cng_pt_151(90), cng_pt_26(397)>
  # m_28 = PHI <m_370(90), m_1094(397)>
  # got_crypto_56 = PHI <got_crypto_164(90), got_crypto_55(397)>
  # got_video_crypto_64 = PHI <got_video_crypto_165(90), got_video_crypto_63(397)>
  # got_audio_67 = PHI <got_audio_166(90), got_audio_66(397)>
  # got_avp_69 = PHI <got_avp_167(90), got_avp_68(397)>
  # got_video_avp_71 = PHI <got_video_avp_168(90), got_video_avp_70(397)>
  # got_video_savp_73 = PHI <got_video_savp_169(90), got_video_savp_72(397)>
  # got_savp_75 = PHI <got_savp_170(90), got_savp_74(397)>
  # got_udptl_77 = PHI <got_udptl_171(90), got_udptl_76(397)>
  # got_webrtc_79 = PHI <got_webrtc_172(90), got_webrtc_78(397)>
  # codec_ms_95 = PHI <codec_ms_181(90), codec_ms_94(397)>
  # m_idx_114 = PHI <m_idx_184(90), m_idx_113(397)>
  # nm_idx_122 = PHI <nm_idx_185(90), nm_idx_121(397)>
  # DEBUG nm_idx => nm_idx_122
  # DEBUG m_idx => m_idx_114
  # DEBUG codec_ms => codec_ms_95
  # DEBUG got_webrtc => got_webrtc_79
  # DEBUG got_udptl => got_udptl_77
  # DEBUG got_savp => got_savp_75
  # DEBUG got_video_savp => got_video_savp_73
  # DEBUG got_video_avp => got_video_avp_71
  # DEBUG got_avp => got_avp_69
  # DEBUG got_audio => got_audio_67
  # DEBUG got_video_crypto => got_video_crypto_64
  # DEBUG got_crypto => got_crypto_56
  # DEBUG m => m_28
  # DEBUG cng_pt => cng_pt_27
  # DEBUG best_te => best_te_23
  # DEBUG match => match_16
  if (m_28 != 0B)
    goto <bb 91>;
  else
    goto <bb 399> (done);

  # match_17 = PHI <match_397(110), match_401(112), match_437(130), match_492(141), match_543(169), match_553(175), match_557(179), match_883(319), match_975(355), match_16(398)>
done:
  # DEBUG match => match_17
  if (parser_196 != 0B)
    goto <bb 400>;
  else
    goto <bb 401>;

<bb 400>:
  sdp_parser_free (parser_196);

<bb 401>:
  D.44471_1095 = smh_186->mparams;
  D.44471_1095->cng_pt = cng_pt_27;
  D.44470_1096 = match_17;

<bb 402>:
  # D.44470_142 = PHI <D.44470_187(5), D.44470_197(7), D.44470_199(9), D.44470_1096(401)>
  return D.44470_142;

}



;; Function switch_core_media_proxy_remote_addr (switch_core_media_proxy_remote_addr)



Renaming block #0



Renaming block #2

Renaming statement ip_ptr = 0B;

Renaming statement port_ptr = 0B;

Renaming statement vid_port_ptr = 0B;

Renaming statement status = 1;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.44137 = 1;



Renaming block #6

Renaming statement a_engine = &smh->engines;

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.44138 = _zstr (sdp_str);

Renaming statement if (D.44138 != 0)



Renaming block #7

Renaming statement D.44141 = smh->mparams;

Renaming statement sdp_str = D.44141->remote_sdp_str;



Renaming block #8

Renaming statement D.44142 = _zstr (sdp_str);

Renaming statement if (D.44142 != 0)



Renaming block #9

Renaming statement p = switch_stristr ("c=IN IP4 ", sdp_str);

Renaming statement if (p != 0B)



Renaming block #10

Renaming statement p = switch_stristr ("c=IN IP6 ", sdp_str);

Renaming statement if (p != 0B)



Renaming block #11

Renaming statement ip_ptr = p + 9;



Renaming block #12

Renaming statement p = switch_stristr ("m=audio ", sdp_str);

Renaming statement if (p != 0B)



Renaming block #13

Renaming statement port_ptr = p + 8;



Renaming block #14

Renaming statement p = switch_stristr ("m=image ", sdp_str);

Renaming statement if (p != 0B)



Renaming block #15

Renaming statement tmp = p + 8;

Renaming statement if (tmp != 0B)



Renaming block #16

Renaming statement D.44153 = atoi (tmp);

Renaming statement if (D.44153 != 0)



Renaming block #17

Renaming statement port_ptr = tmp;



Renaming block #18

Renaming statement p = switch_stristr ("m=video ", sdp_str);

Renaming statement if (p != 0B)



Renaming block #19

Renaming statement vid_port_ptr = p + 8;



Renaming block #20

Renaming statement D.44158 = ip_ptr == 0B;

Renaming statement D.44159 = port_ptr == 0B;

Renaming statement D.44160 = D.44158 || D.44159;

Renaming statement if (D.44160 != 0)



Renaming block #21

Renaming statement p = ip_ptr;

Renaming statement D.44162 = strlen (p);

Renaming statement pe = p + D.44162;

Renaming statement x = 0;



Renaming block #23

Renaming statement x.82 = (unsigned int) x;

Renaming statement D.44166 = x.82 <= 510;

Renaming statement D.44167 = p != 0B;

Renaming statement D.44168 = D.44166 && D.44167;

Renaming statement if (D.44168 != 0)



Renaming block #24

Renaming statement D.44163 = *p;

Renaming statement if (D.44163 != 0)



Renaming block #25

Renaming statement D.44171 = *p;

Renaming statement D.44172 = D.44171 + 208;

Renaming statement D.44173 = D.44172 <= 9;

Renaming statement D.44174 = D.44171 == 46;

Renaming statement D.44175 = D.44173 || D.44174;

Renaming statement if (D.44175 != 0)



Renaming block #26

Renaming statement D.44163 = *p;

Renaming statement if (D.44163 == 58)



Renaming block #27

Renaming statement D.44163 = *p;

Renaming statement D.44178 = D.44163 + 159;

Renaming statement if (D.44178 <= 5)



Renaming block #28

Renaming statement D.44163 = *p;

Renaming statement D.44180 = D.44163 + 191;

Renaming statement if (D.44180 <= 5)



Renaming block #22

Renaming statement D.44163 = *p;

Renaming statement rip[x] = D.44163;

Renaming statement x = x + 1;

Renaming statement p = p + 1;

Renaming statement if (p >= pe)



Renaming block #29

Renaming statement p = port_ptr;

Renaming statement x = 0;



Renaming block #31

Renaming statement x.82 = (unsigned int) x;

Renaming statement D.44166 = x.82 <= 510;

Renaming statement D.44167 = p != 0B;

Renaming statement D.44168 = D.44166 && D.44167;

Renaming statement if (D.44168 != 0)



Renaming block #32

Renaming statement D.44163 = *p;

Renaming statement if (D.44163 != 0)



Renaming block #33

Renaming statement D.44163 = *p;

Renaming statement D.44184 = D.44163 + 208;

Renaming statement if (D.44184 <= 9)



Renaming block #30

Renaming statement D.44163 = *p;

Renaming statement rp[x] = D.44163;

Renaming statement x = x + 1;

Renaming statement p = p + 1;

Renaming statement if (p >= pe)



Renaming block #34

Renaming statement p = vid_port_ptr;

Renaming statement x = 0;



Renaming block #36

Renaming statement x.82 = (unsigned int) x;

Renaming statement D.44166 = x.82 <= 510;

Renaming statement D.44167 = p != 0B;

Renaming statement D.44168 = D.44166 && D.44167;

Renaming statement if (D.44168 != 0)



Renaming block #37

Renaming statement D.44163 = *p;

Renaming statement if (D.44163 != 0)



Renaming block #38

Renaming statement D.44163 = *p;

Renaming statement D.44184 = D.44163 + 208;

Renaming statement if (D.44184 <= 9)



Renaming block #35

Renaming statement D.44163 = *p;

Renaming statement rvp[x] = D.44163;

Renaming statement x = x + 1;

Renaming statement p = p + 1;

Renaming statement if (p >= pe)



Renaming block #39

Renaming statement D.44190 = rip[0];

Renaming statement if (D.44190 == 0)



Renaming block #40

Renaming statement D.44192 = rp[0];

Renaming statement if (D.44192 == 0)



Renaming block #42

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement D.44194 = switch_core_perform_session_strdup (session, &rip, "src/switch_core_media.c", &__func__, 4229);

Renaming statement D.44193->remote_sdp_ip = D.44194;

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement D.44195 = atoi (&rp);

Renaming statement D.44196 = (short unsigned int) D.44195;

Renaming statement D.44193->remote_sdp_port = D.44196;

Renaming statement D.44197 = rvp[0];

Renaming statement if (D.44197 != 0)



Renaming block #43

Renaming statement D.44200 = v_engine->cur_payload_map;

Renaming statement D.44201 = switch_core_perform_session_strdup (session, &rip, "src/switch_core_media.c", &__func__, 4233);

Renaming statement D.44200->remote_sdp_ip = D.44201;

Renaming statement D.44200 = v_engine->cur_payload_map;

Renaming statement D.44202 = atoi (&rvp);

Renaming statement D.44203 = (short unsigned int) D.44202;

Renaming statement D.44200->remote_sdp_port = D.44203;

Renaming statement D.44204 = session->channel;

Renaming statement switch_channel_set_flag_value (D.44204, 98, 1);

Renaming statement D.44204 = session->channel;

Renaming statement switch_channel_set_flag_value (D.44204, 23, 1);



Renaming block #44

Renaming statement D.44200 = v_engine->cur_payload_map;

Renaming statement D.44205 = D.44200->remote_sdp_ip;

Renaming statement if (D.44205 != 0B)



Renaming block #45

Renaming statement D.44200 = v_engine->cur_payload_map;

Renaming statement D.44208 = D.44200->remote_sdp_port;

Renaming statement if (D.44208 != 0)



Renaming block #46

Renaming statement D.44200 = v_engine->cur_payload_map;

Renaming statement D.44205 = D.44200->remote_sdp_ip;

Renaming statement D.39191 = __builtin_strcmp (D.44205, &rip);

Renaming statement if (D.39191 == 0)



Renaming block #47

Renaming statement D.44214 = atoi (&rvp);

Renaming statement D.44200 = v_engine->cur_payload_map;

Renaming statement D.44208 = D.44200->remote_sdp_port;

Renaming statement D.44215 = (int) D.44208;

Renaming statement if (D.44214 == D.44215)



Renaming block #48

Renaming statement D.44200 = v_engine->cur_payload_map;

Renaming statement D.44205 = D.44200->remote_sdp_ip;

Renaming statement D.44200 = v_engine->cur_payload_map;

Renaming statement D.44208 = D.44200->remote_sdp_port;

Renaming statement D.44215 = (int) D.44208;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4241, session, 7, "Remote video address:port [%s:%d] has not changed.\n", D.44205, D.44215);



Renaming block #49

Renaming statement D.44204 = session->channel;

Renaming statement switch_channel_set_flag_value (D.44204, 98, 1);

Renaming statement D.44204 = session->channel;

Renaming statement switch_channel_set_flag_value (D.44204, 23, 1);

Renaming statement D.44217 = v_engine->rtp_session;

Renaming statement D.44218 = switch_rtp_ready (D.44217);

Renaming statement if (D.44218 != 0)



Renaming block #50

Renaming statement rport = 0B;

Renaming statement remote_rtcp_port = v_engine->remote_rtcp_port;

Renaming statement if (remote_rtcp_port == 0)



Renaming block #51

Renaming statement D.44204 = session->channel;

Renaming statement rport = switch_channel_get_variable_dup (D.44204, "rtp_remote_video_rtcp_port", 1, -1);

Renaming statement if (rport != 0B)



Renaming block #52

Renaming statement D.44225 = atoi (rport);

Renaming statement remote_rtcp_port = (switch_port_t) D.44225;



Renaming block #53

Renaming statement D.44217 = v_engine->rtp_session;

Renaming statement D.44200 = v_engine->cur_payload_map;

Renaming statement D.44205 = D.44200->remote_sdp_ip;

Renaming statement D.44200 = v_engine->cur_payload_map;

Renaming statement D.44208 = D.44200->remote_sdp_port;

Renaming statement D.44226 = switch_rtp_set_remote_address (D.44217, D.44205, D.44208, remote_rtcp_port, 1, &err);

Renaming statement if (D.44226 != 0)



Renaming block #54

Renaming statement err.83 = err;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4259, session, 3, "VIDEO RTP REPORTS ERROR: [%s]\n", err.83);



Renaming block #55

Renaming statement D.44200 = v_engine->cur_payload_map;

Renaming statement D.44205 = D.44200->remote_sdp_ip;

Renaming statement D.44200 = v_engine->cur_payload_map;

Renaming statement D.44208 = D.44200->remote_sdp_port;

Renaming statement D.44215 = (int) D.44208;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4261, session, 7, "VIDEO RTP CHANGING DEST TO: [%s:%d]\n", D.44205, D.44215);

Renaming statement D.44233 = switch_media_handle_test_media_flag (smh, 10);

Renaming statement if (D.44233 == 0)



Renaming block #56

Renaming statement D.44204 = session->channel;

Renaming statement D.44236 = switch_channel_test_flag (D.44204, 15);

Renaming statement if (D.44236 == 0)



Renaming block #57

Renaming statement D.44204 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.44204, "disable_rtp_auto_adjust", 1, -1);

Renaming statement if (val == 0B)



Renaming block #58

Renaming statement D.44240 = switch_true (val);

Renaming statement if (D.44240 == 0)



Renaming block #59

Renaming statement D.44204 = session->channel;

Renaming statement D.44241 = switch_channel_test_flag (D.44204, 106);

Renaming statement if (D.44241 == 0)



Renaming block #60

Renaming statement D.44217 = v_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.44217, 7);

Renaming statement start_video_thread (session);



Renaming block #61

Renaming statement D.44244 = switch_media_handle_test_media_flag (smh, 2);

Renaming statement if (D.44244 != 0)



Renaming block #62

Renaming statement v_engine->check_frames = 0;



Renaming block #63

Renaming statement D.44247 = a_engine->rtp_session;

Renaming statement D.44248 = switch_rtp_ready (D.44247);

Renaming statement if (D.44248 != 0)



Renaming block #64

Renaming statement D.44247 = a_engine->rtp_session;

Renaming statement remote_host = switch_rtp_get_remote_host (D.44247);

Renaming statement D.44247 = a_engine->rtp_session;

Renaming statement remote_port = switch_rtp_get_remote_port (D.44247);

Renaming statement rport = 0B;

Renaming statement remote_rtcp_port = 0;

Renaming statement D.44252 = remote_host != 0B;

Renaming statement D.44253 = remote_port != 0;

Renaming statement D.44254 = D.44252 && D.44253;

Renaming statement if (D.44254 != 0)



Renaming block #65

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement D.44256 = D.44193->remote_sdp_ip;

Renaming statement D.39206 = __builtin_strcmp (remote_host, D.44256);

Renaming statement if (D.39206 == 0)



Renaming block #66

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement D.44258 = D.44193->remote_sdp_port;

Renaming statement if (D.44258 == remote_port)



Renaming block #67

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement D.44256 = D.44193->remote_sdp_ip;

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement D.44258 = D.44193->remote_sdp_port;

Renaming statement D.44260 = (int) D.44258;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4286, session, 7, "Remote address:port [%s:%d] has not changed.\n", D.44256, D.44260);

Renaming statement status = 11;



Renaming block #68

Renaming statement if (remote_host != 0B)



Renaming block #69

Renaming statement __s2_len = 7;

Renaming statement if (__s2_len <= 3)



Renaming block #70

Renaming statement __s1 = remote_host;

Renaming statement D.44268 = *__s1;

Renaming statement D.44269 = (int) D.44268;

Renaming statement D.44270 = "0.0.0.0";

Renaming statement D.44271 = MEM[(const unsigned char *)D.44270];

Renaming statement D.44272 = (int) D.44271;

Renaming statement __result = D.44269 - D.44272;

Renaming statement D.44273 = __s2_len != 0;

Renaming statement D.44274 = __result == 0;

Renaming statement D.44275 = D.44273 && D.44274;

Renaming statement if (D.44275 != 0)



Renaming block #71

Renaming statement D.44278 = __s1 + 1;

Renaming statement D.44279 = *D.44278;

Renaming statement D.44280 = (int) D.44279;

Renaming statement D.44281 = &"0.0.0.0"[1];

Renaming statement D.44282 = MEM[(const unsigned char *)D.44281];

Renaming statement D.44283 = (int) D.44282;

Renaming statement __result = D.44280 - D.44283;

Renaming statement D.44284 = __s2_len > 1;

Renaming statement D.44274 = __result == 0;

Renaming statement D.44285 = D.44284 && D.44274;

Renaming statement if (D.44285 != 0)



Renaming block #72

Renaming statement D.44288 = __s1 + 2;

Renaming statement D.44289 = *D.44288;

Renaming statement D.44290 = (int) D.44289;

Renaming statement D.44291 = &"0.0.0.0"[2];

Renaming statement D.44292 = MEM[(const unsigned char *)D.44291];

Renaming statement D.44293 = (int) D.44292;

Renaming statement __result = D.44290 - D.44293;

Renaming statement D.44294 = __s2_len > 2;

Renaming statement D.44274 = __result == 0;

Renaming statement D.44295 = D.44294 && D.44274;

Renaming statement if (D.44295 != 0)



Renaming block #73

Renaming statement D.44298 = __s1 + 3;

Renaming statement D.44299 = *D.44298;

Renaming statement D.44300 = (int) D.44299;

Renaming statement D.44301 = &"0.0.0.0"[3];

Renaming statement D.44302 = MEM[(const unsigned char *)D.44301];

Renaming statement D.44303 = (int) D.44302;

Renaming statement __result = D.44300 - D.44303;



Renaming block #74

Renaming statement D.39214 = __result;

Renaming statement iftmp.84 = D.39214;



Renaming block #75

Renaming statement iftmp.84 = __builtin_strcmp (remote_host, "0.0.0.0");



Renaming block #76

Renaming statement D.39215 = iftmp.84;

Renaming statement if (D.39215 == 0)



Renaming block #77

Renaming statement __s2_len = 7;

Renaming statement if (__s2_len <= 3)



Renaming block #78

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement __s1 = D.44193->remote_sdp_ip;

Renaming statement D.44309 = *__s1;

Renaming statement D.44310 = (int) D.44309;

Renaming statement D.44270 = "0.0.0.0";

Renaming statement D.44271 = MEM[(const unsigned char *)D.44270];

Renaming statement D.44272 = (int) D.44271;

Renaming statement __result = D.44310 - D.44272;

Renaming statement D.44311 = __s2_len != 0;

Renaming statement D.44312 = __result == 0;

Renaming statement D.44313 = D.44311 && D.44312;

Renaming statement if (D.44313 != 0)



Renaming block #79

Renaming statement D.44316 = __s1 + 1;

Renaming statement D.44317 = *D.44316;

Renaming statement D.44318 = (int) D.44317;

Renaming statement D.44281 = &"0.0.0.0"[1];

Renaming statement D.44282 = MEM[(const unsigned char *)D.44281];

Renaming statement D.44283 = (int) D.44282;

Renaming statement __result = D.44318 - D.44283;

Renaming statement D.44319 = __s2_len > 1;

Renaming statement D.44312 = __result == 0;

Renaming statement D.44320 = D.44319 && D.44312;

Renaming statement if (D.44320 != 0)



Renaming block #80

Renaming statement D.44323 = __s1 + 2;

Renaming statement D.44324 = *D.44323;

Renaming statement D.44325 = (int) D.44324;

Renaming statement D.44291 = &"0.0.0.0"[2];

Renaming statement D.44292 = MEM[(const unsigned char *)D.44291];

Renaming statement D.44293 = (int) D.44292;

Renaming statement __result = D.44325 - D.44293;

Renaming statement D.44326 = __s2_len > 2;

Renaming statement D.44312 = __result == 0;

Renaming statement D.44327 = D.44326 && D.44312;

Renaming statement if (D.44327 != 0)



Renaming block #81

Renaming statement D.44330 = __s1 + 3;

Renaming statement D.44331 = *D.44330;

Renaming statement D.44332 = (int) D.44331;

Renaming statement D.44301 = &"0.0.0.0"[3];

Renaming statement D.44302 = MEM[(const unsigned char *)D.44301];

Renaming statement D.44303 = (int) D.44302;

Renaming statement __result = D.44332 - D.44303;



Renaming block #82

Renaming statement D.39223 = __result;

Renaming statement iftmp.85 = D.39223;



Renaming block #83

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement D.44256 = D.44193->remote_sdp_ip;

Renaming statement iftmp.85 = __builtin_strcmp (D.44256, "0.0.0.0");



Renaming block #84

Renaming statement D.39224 = iftmp.85;

Renaming statement if (D.39224 == 0)



Renaming block #85

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement D.44256 = D.44193->remote_sdp_ip;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4292, session, 7, "Remote address changed from [%s] to [%s]. Ignoring...\n", D.44256, remote_host);

Renaming statement status = 11;



Renaming block #86

Renaming statement D.44204 = session->channel;

Renaming statement rport = switch_channel_get_variable_dup (D.44204, "rtp_remote_audio_rtcp_port", 1, -1);

Renaming statement if (rport != 0B)



Renaming block #87

Renaming statement D.44336 = atoi (rport);

Renaming statement remote_rtcp_port = (switch_port_t) D.44336;



Renaming block #88

Renaming statement D.44247 = a_engine->rtp_session;

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement D.44256 = D.44193->remote_sdp_ip;

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement D.44258 = D.44193->remote_sdp_port;

Renaming statement D.44337 = switch_rtp_set_remote_address (D.44247, D.44256, D.44258, remote_rtcp_port, 1, &err);

Renaming statement if (D.44337 != 0)



Renaming block #89

Renaming statement err.83 = err;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4305, session, 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.83);

Renaming statement status = 9;



Renaming block #90

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement D.44256 = D.44193->remote_sdp_ip;

Renaming statement D.44193 = a_engine->cur_payload_map;

Renaming statement D.44258 = D.44193->remote_sdp_port;

Renaming statement D.44260 = (int) D.44258;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4308, session, 7, "AUDIO RTP CHANGING DEST TO: [%s:%d]\n", D.44256, D.44260);

Renaming statement D.44343 = switch_media_handle_test_media_flag (smh, 10);

Renaming statement if (D.44343 == 0)



Renaming block #91

Renaming statement D.44204 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.44204, "disable_rtp_auto_adjust", 1, -1);

Renaming statement if (val == 0B)



Renaming block #92

Renaming statement D.44347 = switch_true (val);

Renaming statement if (D.44347 == 0)



Renaming block #93

Renaming statement D.44204 = session->channel;

Renaming statement D.44348 = switch_channel_test_flag (D.44204, 106);

Renaming statement if (D.44348 == 0)



Renaming block #94

Renaming statement D.44247 = a_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.44247, 7);



Renaming block #95

Renaming statement D.44351 = switch_media_handle_test_media_flag (smh, 2);

Renaming statement if (D.44351 != 0)



Renaming block #96

Renaming statement a_engine->check_frames = 0;



Renaming block #97

Renaming statement status = 0;



Renaming block #41

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4225, session, 3, "invalid SDP\n");



Renaming block #98

Renaming statement D.44137 = status;



Renaming block #99

Renaming statement return D.44137;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement rip = "";

Updating SSA information for statement rp = "";

Updating SSA information for statement rvp = "";



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4152, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_26 = session_25(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.44138_31 = _zstr (sdp_str_30(D));



Registering new PHI nodes in block #7

Updating SSA information for statement D.44141_32 = smh_26->mparams;

Updating SSA information for statement sdp_str_33 = D.44141_32->remote_sdp_str;



Registering new PHI nodes in block #8

Updating SSA information for statement D.44142_34 = _zstr (sdp_str_1);



Registering new PHI nodes in block #9

Updating SSA information for statement p_35 = switch_stristr ("c=IN IP4 ", sdp_str_1);



Registering new PHI nodes in block #10

Updating SSA information for statement p_36 = switch_stristr ("c=IN IP6 ", sdp_str_1);



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement p_38 = switch_stristr ("m=audio ", sdp_str_1);



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement p_40 = switch_stristr ("m=image ", sdp_str_1);



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16

Updating SSA information for statement D.44153_42 = atoi (tmp_41);



Registering new PHI nodes in block #17



Registering new PHI nodes in block #18

Updating SSA information for statement p_44 = switch_stristr ("m=video ", sdp_str_1);



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement D.44162_50 = strlen (p_49);



Registering new PHI nodes in block #23



Registering new PHI nodes in block #24

Updating SSA information for statement D.44163_57 = *p_3;



Registering new PHI nodes in block #25

Updating SSA information for statement D.44171_58 = *p_3;



Registering new PHI nodes in block #26

Updating SSA information for statement D.44163_63 = *p_3;



Registering new PHI nodes in block #27

Updating SSA information for statement D.44163_64 = *p_3;



Registering new PHI nodes in block #28

Updating SSA information for statement D.44163_66 = *p_3;



Registering new PHI nodes in block #22

Updating SSA information for statement D.44163_68 = *p_3;

Updating SSA information for statement rip[x_10] = D.44163_68;



Registering new PHI nodes in block #29



Registering new PHI nodes in block #31



Registering new PHI nodes in block #32

Updating SSA information for statement D.44163_77 = *p_4;



Registering new PHI nodes in block #33

Updating SSA information for statement D.44163_78 = *p_4;



Registering new PHI nodes in block #30

Updating SSA information for statement D.44163_80 = *p_4;

Updating SSA information for statement rp[x_11] = D.44163_80;



Registering new PHI nodes in block #34



Registering new PHI nodes in block #36



Registering new PHI nodes in block #37

Updating SSA information for statement D.44163_89 = *p_5;



Registering new PHI nodes in block #38

Updating SSA information for statement D.44163_90 = *p_5;



Registering new PHI nodes in block #35

Updating SSA information for statement D.44163_92 = *p_5;

Updating SSA information for statement rvp[x_12] = D.44163_92;



Registering new PHI nodes in block #39

Updating SSA information for statement D.44190_95 = rip[0];



Registering new PHI nodes in block #40

Updating SSA information for statement D.44192_96 = rp[0];



Registering new PHI nodes in block #42

Updating SSA information for statement D.44193_97 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44194_98 = switch_core_perform_session_strdup (session_25(D), &rip, "src/switch_core_media.c", &__func__, 4229);

Updating SSA information for statement D.44193_97->remote_sdp_ip = D.44194_98;

Updating SSA information for statement D.44193_99 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44195_100 = atoi (&rp);

Updating SSA information for statement D.44193_99->remote_sdp_port = D.44196_101;

Updating SSA information for statement D.44197_102 = rvp[0];



Registering new PHI nodes in block #43

Updating SSA information for statement D.44200_103 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44201_104 = switch_core_perform_session_strdup (session_25(D), &rip, "src/switch_core_media.c", &__func__, 4233);

Updating SSA information for statement D.44200_103->remote_sdp_ip = D.44201_104;

Updating SSA information for statement D.44200_105 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44202_106 = atoi (&rvp);

Updating SSA information for statement D.44200_105->remote_sdp_port = D.44203_107;

Updating SSA information for statement D.44204_108 = session_25(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44204_108, 98, 1);

Updating SSA information for statement D.44204_109 = session_25(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44204_109, 23, 1);



Registering new PHI nodes in block #44

Updating SSA information for statement D.44200_110 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44205_111 = D.44200_110->remote_sdp_ip;



Registering new PHI nodes in block #45

Updating SSA information for statement D.44200_112 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44208_113 = D.44200_112->remote_sdp_port;



Registering new PHI nodes in block #46

Updating SSA information for statement D.44200_114 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44205_115 = D.44200_114->remote_sdp_ip;

Updating SSA information for statement D.39191_116 = __builtin_strcmp (D.44205_115, &rip);



Registering new PHI nodes in block #47

Updating SSA information for statement D.44214_117 = atoi (&rvp);

Updating SSA information for statement D.44200_118 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44208_119 = D.44200_118->remote_sdp_port;



Registering new PHI nodes in block #48

Updating SSA information for statement D.44200_121 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44205_122 = D.44200_121->remote_sdp_ip;

Updating SSA information for statement D.44200_123 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44208_124 = D.44200_123->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4241, session_25(D), 7, "Remote video address:port [%s:%d] has not changed.\n", D.44205_122, D.44215_125);



Registering new PHI nodes in block #49

Updating SSA information for statement D.44204_126 = session_25(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44204_126, 98, 1);

Updating SSA information for statement D.44204_127 = session_25(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44204_127, 23, 1);

Updating SSA information for statement D.44217_128 = v_engine_29->rtp_session;

Updating SSA information for statement D.44218_129 = switch_rtp_ready (D.44217_128);



Registering new PHI nodes in block #50

Updating SSA information for statement remote_rtcp_port_131 = v_engine_29->remote_rtcp_port;



Registering new PHI nodes in block #51

Updating SSA information for statement D.44204_132 = session_25(D)->channel;

Updating SSA information for statement rport_133 = switch_channel_get_variable_dup (D.44204_132, "rtp_remote_video_rtcp_port", 1, -1);



Registering new PHI nodes in block #52

Updating SSA information for statement D.44225_134 = atoi (rport_133);



Registering new PHI nodes in block #53

Updating SSA information for statement D.44217_136 = v_engine_29->rtp_session;

Updating SSA information for statement D.44200_137 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44205_138 = D.44200_137->remote_sdp_ip;

Updating SSA information for statement D.44200_139 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44208_140 = D.44200_139->remote_sdp_port;

Updating SSA information for statement D.44226_141 = switch_rtp_set_remote_address (D.44217_136, D.44205_138, D.44208_140, remote_rtcp_port_14, 1, &err);



Registering new PHI nodes in block #54

Updating SSA information for statement err.83_142 = err;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4259, session_25(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", err.83_142);



Registering new PHI nodes in block #55

Updating SSA information for statement D.44200_143 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44205_144 = D.44200_143->remote_sdp_ip;

Updating SSA information for statement D.44200_145 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44208_146 = D.44200_145->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4261, session_25(D), 7, "VIDEO RTP CHANGING DEST TO: [%s:%d]\n", D.44205_144, D.44215_147);

Updating SSA information for statement D.44233_148 = switch_media_handle_test_media_flag (smh_26, 10);



Registering new PHI nodes in block #56

Updating SSA information for statement D.44204_149 = session_25(D)->channel;

Updating SSA information for statement D.44236_150 = switch_channel_test_flag (D.44204_149, 15);



Registering new PHI nodes in block #57

Updating SSA information for statement D.44204_151 = session_25(D)->channel;

Updating SSA information for statement val_152 = switch_channel_get_variable_dup (D.44204_151, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #58

Updating SSA information for statement D.44240_153 = switch_true (val_152);



Registering new PHI nodes in block #59

Updating SSA information for statement D.44204_154 = session_25(D)->channel;

Updating SSA information for statement D.44241_155 = switch_channel_test_flag (D.44204_154, 106);



Registering new PHI nodes in block #60

Updating SSA information for statement D.44217_156 = v_engine_29->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.44217_156, 7);

Updating SSA information for statement start_video_thread (session_25(D));



Registering new PHI nodes in block #61

Updating SSA information for statement D.44244_157 = switch_media_handle_test_media_flag (smh_26, 2);



Registering new PHI nodes in block #62

Updating SSA information for statement v_engine_29->check_frames = 0;



Registering new PHI nodes in block #63

Updating SSA information for statement D.44247_158 = a_engine_28->rtp_session;

Updating SSA information for statement D.44248_159 = switch_rtp_ready (D.44247_158);



Registering new PHI nodes in block #64

Updating SSA information for statement D.44247_160 = a_engine_28->rtp_session;

Updating SSA information for statement remote_host_161 = switch_rtp_get_remote_host (D.44247_160);

Updating SSA information for statement D.44247_162 = a_engine_28->rtp_session;

Updating SSA information for statement remote_port_163 = switch_rtp_get_remote_port (D.44247_162);



Registering new PHI nodes in block #65

Updating SSA information for statement D.44193_169 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44256_170 = D.44193_169->remote_sdp_ip;

Updating SSA information for statement D.39206_171 = __builtin_strcmp (remote_host_161, D.44256_170);



Registering new PHI nodes in block #66

Updating SSA information for statement D.44193_172 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44258_173 = D.44193_172->remote_sdp_port;



Registering new PHI nodes in block #67

Updating SSA information for statement D.44193_174 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44256_175 = D.44193_174->remote_sdp_ip;

Updating SSA information for statement D.44193_176 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44258_177 = D.44193_176->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4286, session_25(D), 7, "Remote address:port [%s:%d] has not changed.\n", D.44256_175, D.44260_178);



Registering new PHI nodes in block #68



Registering new PHI nodes in block #69



Registering new PHI nodes in block #70

Updating SSA information for statement D.44268_182 = *__s1_181;

Updating SSA information for statement D.44271_185 = MEM[(const unsigned char *)D.44270_184];



Registering new PHI nodes in block #71

Updating SSA information for statement D.44279_192 = *D.44278_191;

Updating SSA information for statement D.44282_195 = MEM[(const unsigned char *)D.44281_194];



Registering new PHI nodes in block #72

Updating SSA information for statement D.44289_202 = *D.44288_201;

Updating SSA information for statement D.44292_205 = MEM[(const unsigned char *)D.44291_204];



Registering new PHI nodes in block #73

Updating SSA information for statement D.44299_212 = *D.44298_211;

Updating SSA information for statement D.44302_215 = MEM[(const unsigned char *)D.44301_214];



Registering new PHI nodes in block #74



Registering new PHI nodes in block #75

Updating SSA information for statement iftmp.84_220 = __builtin_strcmp (remote_host_161, "0.0.0.0");



Registering new PHI nodes in block #76



Registering new PHI nodes in block #77



Registering new PHI nodes in block #78

Updating SSA information for statement D.44193_223 = a_engine_28->cur_payload_map;

Updating SSA information for statement __s1_224 = D.44193_223->remote_sdp_ip;

Updating SSA information for statement D.44309_225 = *__s1_224;

Updating SSA information for statement D.44271_228 = MEM[(const unsigned char *)D.44270_227];



Registering new PHI nodes in block #79

Updating SSA information for statement D.44317_235 = *D.44316_234;

Updating SSA information for statement D.44282_238 = MEM[(const unsigned char *)D.44281_237];



Registering new PHI nodes in block #80

Updating SSA information for statement D.44324_245 = *D.44323_244;

Updating SSA information for statement D.44292_248 = MEM[(const unsigned char *)D.44291_247];



Registering new PHI nodes in block #81

Updating SSA information for statement D.44331_255 = *D.44330_254;

Updating SSA information for statement D.44302_258 = MEM[(const unsigned char *)D.44301_257];



Registering new PHI nodes in block #82



Registering new PHI nodes in block #83

Updating SSA information for statement D.44193_263 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44256_264 = D.44193_263->remote_sdp_ip;

Updating SSA information for statement iftmp.85_265 = __builtin_strcmp (D.44256_264, "0.0.0.0");



Registering new PHI nodes in block #84



Registering new PHI nodes in block #85

Updating SSA information for statement D.44193_267 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44256_268 = D.44193_267->remote_sdp_ip;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4292, session_25(D), 7, "Remote address changed from [%s] to [%s]. Ignoring...\n", D.44256_268, remote_host_161);



Registering new PHI nodes in block #86

Updating SSA information for statement D.44204_270 = session_25(D)->channel;

Updating SSA information for statement rport_271 = switch_channel_get_variable_dup (D.44204_270, "rtp_remote_audio_rtcp_port", 1, -1);



Registering new PHI nodes in block #87

Updating SSA information for statement D.44336_272 = atoi (rport_271);



Registering new PHI nodes in block #88

Updating SSA information for statement D.44247_274 = a_engine_28->rtp_session;

Updating SSA information for statement D.44193_275 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44256_276 = D.44193_275->remote_sdp_ip;

Updating SSA information for statement D.44193_277 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44258_278 = D.44193_277->remote_sdp_port;

Updating SSA information for statement D.44337_279 = switch_rtp_set_remote_address (D.44247_274, D.44256_276, D.44258_278, remote_rtcp_port_15, 1, &err);



Registering new PHI nodes in block #89

Updating SSA information for statement err.83_280 = err;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4305, session_25(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.83_280);



Registering new PHI nodes in block #90

Updating SSA information for statement D.44193_282 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44256_283 = D.44193_282->remote_sdp_ip;

Updating SSA information for statement D.44193_284 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44258_285 = D.44193_284->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4308, session_25(D), 7, "AUDIO RTP CHANGING DEST TO: [%s:%d]\n", D.44256_283, D.44260_286);

Updating SSA information for statement D.44343_287 = switch_media_handle_test_media_flag (smh_26, 10);



Registering new PHI nodes in block #91

Updating SSA information for statement D.44204_288 = session_25(D)->channel;

Updating SSA information for statement val_289 = switch_channel_get_variable_dup (D.44204_288, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #92

Updating SSA information for statement D.44347_290 = switch_true (val_289);



Registering new PHI nodes in block #93

Updating SSA information for statement D.44204_291 = session_25(D)->channel;

Updating SSA information for statement D.44348_292 = switch_channel_test_flag (D.44204_291, 106);



Registering new PHI nodes in block #94

Updating SSA information for statement D.44247_293 = a_engine_28->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.44247_293, 7);



Registering new PHI nodes in block #95

Updating SSA information for statement D.44351_294 = switch_media_handle_test_media_flag (smh_26, 2);



Registering new PHI nodes in block #96

Updating SSA information for statement a_engine_28->check_frames = 0;



Registering new PHI nodes in block #97



Registering new PHI nodes in block #41

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4225, session_25(D), 3, "invalid SDP\n");



Registering new PHI nodes in block #98



Registering new PHI nodes in block #99



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 100
Number of blocks to update: 99 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 


Scope blocks after cleanups:

{ Scope block #0 
  const char * err;
  char rip[512];
  char rp[512];
  char rvp[512];
  char * p;
  char * ip_ptr;
  char * port_ptr;
  char * vid_port_ptr;
  char * pe;
  int x;
  const char * val;
  switch_status_t status;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[36] = "switch_core_media_proxy_remote_addr";
  void end = <<< error >>>; (unused)
  static const char __func__[36] = "switch_core_media_proxy_remote_addr";

  { Scope block #0 
    char * tmp;

  }

  { Scope block #0 
    size_t __s1_len; (unused)
    size_t __s2_len; (unused)

  }

  { Scope block #0 
    const char * rport;
    switch_port_t remote_rtcp_port;

  }

  { Scope block #0 
    char * remote_host;
    switch_port_t remote_port;
    const char * rport;
    switch_port_t remote_rtcp_port;

    { Scope block #0 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

    { Scope block #0 
      size_t __s1_len; (unused)
      size_t __s2_len;

      { Scope block #0 
        const unsigned char * __s1;
        register int __result;

      }

    }

    { Scope block #0 
      size_t __s1_len; (unused)
      size_t __s2_len;

      { Scope block #0 
        const unsigned char * __s1;
        register int __result;

      }

    }

  }

}
switch_core_media_proxy_remote_addr (struct switch_core_session_t * session, const char * sdp_str)
{
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  switch_port_t remote_rtcp_port;
  const char * rport;
  switch_port_t remote_port;
  char * remote_host;
  switch_port_t remote_rtcp_port;
  const char * rport;
  char * tmp;
  static const char __func__[36] = "switch_core_media_proxy_remote_addr";
  static const char __PRETTY_FUNCTION__[36] = "switch_core_media_proxy_remote_addr";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  switch_status_t status;
  const char * val;
  int x;
  char * pe;
  char * vid_port_ptr;
  char * port_ptr;
  char * ip_ptr;
  char * p;
  char rvp[512];
  char rp[512];
  char rip[512];
  const char * err;
  int32_t D.44351;
  uint32_t D.44348;
  int D.44347;
  int32_t D.44343;
  switch_status_t D.44337;
  int D.44336;
  int D.44332;
  const unsigned char D.44331;
  const unsigned char * D.44330;
  _Bool D.44327;
  _Bool D.44326;
  int D.44325;
  const unsigned char D.44324;
  const unsigned char * D.44323;
  _Bool D.44320;
  _Bool D.44319;
  int D.44318;
  const unsigned char D.44317;
  const unsigned char * D.44316;
  _Bool D.44313;
  _Bool D.44312;
  _Bool D.44311;
  int D.44310;
  const unsigned char D.44309;
  int D.39223;
  int iftmp.85;
  int D.39224;
  int D.44303;
  const unsigned char D.44302;
  char * D.44301;
  int D.44300;
  const unsigned char D.44299;
  const unsigned char * D.44298;
  _Bool D.44295;
  _Bool D.44294;
  int D.44293;
  const unsigned char D.44292;
  char * D.44291;
  int D.44290;
  const unsigned char D.44289;
  const unsigned char * D.44288;
  _Bool D.44285;
  _Bool D.44284;
  int D.44283;
  const unsigned char D.44282;
  char * D.44281;
  int D.44280;
  const unsigned char D.44279;
  const unsigned char * D.44278;
  _Bool D.44275;
  _Bool D.44274;
  _Bool D.44273;
  int D.44272;
  const unsigned char D.44271;
  char[8] * D.44270;
  int D.44269;
  const unsigned char D.44268;
  int D.39214;
  int iftmp.84;
  int D.39215;
  int D.44260;
  switch_port_t D.44258;
  char * D.44256;
  int D.39206;
  _Bool D.44254;
  _Bool D.44253;
  _Bool D.44252;
  uint8_t D.44248;
  struct switch_rtp_t * D.44247;
  int32_t D.44244;
  uint32_t D.44241;
  int D.44240;
  uint32_t D.44236;
  int32_t D.44233;
  const char * err.83;
  switch_status_t D.44226;
  int D.44225;
  uint8_t D.44218;
  struct switch_rtp_t * D.44217;
  int D.44215;
  int D.44214;
  int D.39191;
  switch_port_t D.44208;
  char * D.44205;
  struct switch_channel_t * D.44204;
  short unsigned int D.44203;
  int D.44202;
  char * D.44201;
  struct payload_map_t * D.44200;
  char D.44197;
  short unsigned int D.44196;
  int D.44195;
  char * D.44194;
  struct payload_map_t * D.44193;
  char D.44192;
  char D.44190;
  char D.44184;
  char D.44180;
  char D.44178;
  _Bool D.44175;
  _Bool D.44174;
  _Bool D.44173;
  char D.44172;
  char D.44171;
  _Bool D.44168;
  _Bool D.44167;
  _Bool D.44166;
  unsigned int x.82;
  char D.44163;
  size_t D.44162;
  _Bool D.44160;
  _Bool D.44159;
  _Bool D.44158;
  int D.44153;
  int D.44142;
  struct switch_core_media_params_t * D.44141;
  int D.44138;
  switch_status_t D.44137;

<bb 2>:
  rip = "";
  rp = "";
  rvp = "";
  ip_ptr_21 = 0B;
  # DEBUG ip_ptr => ip_ptr_21
  port_ptr_22 = 0B;
  # DEBUG port_ptr => port_ptr_22
  vid_port_ptr_23 = 0B;
  # DEBUG vid_port_ptr => vid_port_ptr_23
  status_24 = 1;
  # DEBUG status => status_24
  if (session_25(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4152, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_26 = session_25(D)->media_handle;
  # DEBUG smh => smh_26
  if (smh_26 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.44137_27 = 1;
  goto <bb 99>;

<bb 6>:
  a_engine_28 = &smh_26->engines;
  # DEBUG a_engine => a_engine_28
  v_engine_29 = &smh_26->engines[1];
  # DEBUG v_engine => v_engine_29
  D.44138_31 = _zstr (sdp_str_30(D));
  if (D.44138_31 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.44141_32 = smh_26->mparams;
  sdp_str_33 = D.44141_32->remote_sdp_str;
  # DEBUG sdp_str => sdp_str_33

<bb 8>:
  # sdp_str_1 = PHI <sdp_str_30(D)(6), sdp_str_33(7)>
  # DEBUG sdp_str => sdp_str_1
  D.44142_34 = _zstr (sdp_str_1);
  if (D.44142_34 != 0)
    goto <bb 98> (end);
  else
    goto <bb 9>;

<bb 9>:
  p_35 = switch_stristr ("c=IN IP4 ", sdp_str_1);
  # DEBUG p => p_35
  if (p_35 != 0B)
    goto <bb 11>;
  else
    goto <bb 10>;

<bb 10>:
  p_36 = switch_stristr ("c=IN IP6 ", sdp_str_1);
  # DEBUG p => p_36
  if (p_36 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  # p_2 = PHI <p_35(9), p_36(10)>
  # DEBUG p => p_2
  ip_ptr_37 = p_2 + 9;
  # DEBUG ip_ptr => ip_ptr_37

<bb 12>:
  # ip_ptr_6 = PHI <ip_ptr_21(10), ip_ptr_37(11)>
  # DEBUG ip_ptr => ip_ptr_6
  p_38 = switch_stristr ("m=audio ", sdp_str_1);
  # DEBUG p => p_38
  if (p_38 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  port_ptr_39 = p_38 + 8;
  # DEBUG port_ptr => port_ptr_39

<bb 14>:
  # port_ptr_7 = PHI <port_ptr_22(12), port_ptr_39(13)>
  # DEBUG port_ptr => port_ptr_7
  p_40 = switch_stristr ("m=image ", sdp_str_1);
  # DEBUG p => p_40
  if (p_40 != 0B)
    goto <bb 15>;
  else
    goto <bb 18>;

<bb 15>:
  tmp_41 = p_40 + 8;
  # DEBUG tmp => tmp_41
  if (tmp_41 != 0B)
    goto <bb 16>;
  else
    goto <bb 18>;

<bb 16>:
  D.44153_42 = atoi (tmp_41);
  if (D.44153_42 != 0)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  port_ptr_43 = tmp_41;
  # DEBUG port_ptr => port_ptr_43

<bb 18>:
  # port_ptr_8 = PHI <port_ptr_7(14), port_ptr_7(15), port_ptr_7(16), port_ptr_43(17)>
  # DEBUG port_ptr => port_ptr_8
  p_44 = switch_stristr ("m=video ", sdp_str_1);
  # DEBUG p => p_44
  if (p_44 != 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  vid_port_ptr_45 = p_44 + 8;
  # DEBUG vid_port_ptr => vid_port_ptr_45

<bb 20>:
  # vid_port_ptr_9 = PHI <vid_port_ptr_23(18), vid_port_ptr_45(19)>
  # DEBUG vid_port_ptr => vid_port_ptr_9
  D.44158_46 = ip_ptr_6 == 0B;
  D.44159_47 = port_ptr_8 == 0B;
  D.44160_48 = D.44158_46 || D.44159_47;
  if (D.44160_48 != 0)
    goto <bb 98> (end);
  else
    goto <bb 21>;

<bb 21>:
  p_49 = ip_ptr_6;
  # DEBUG p => p_49
  D.44162_50 = strlen (p_49);
  pe_51 = p_49 + D.44162_50;
  # DEBUG pe => pe_51
  x_52 = 0;
  # DEBUG x => x_52
  goto <bb 23>;

<bb 22>:
  D.44163_68 = *p_3;
  rip[x_10] = D.44163_68;
  x_69 = x_10 + 1;
  # DEBUG x => x_69
  p_70 = p_3 + 1;
  # DEBUG p => p_70
  if (p_70 >= pe_51)
    goto <bb 98> (end);
  else
    goto <bb 23>;

<bb 23>:
  # p_3 = PHI <p_49(21), p_70(22)>
  # x_10 = PHI <x_52(21), x_69(22)>
  # DEBUG x => x_10
  # DEBUG p => p_3
  x.82_53 = (unsigned int) x_10;
  D.44166_54 = x.82_53 <= 510;
  D.44167_55 = p_3 != 0B;
  D.44168_56 = D.44166_54 && D.44167_55;
  if (D.44168_56 != 0)
    goto <bb 24>;
  else
    goto <bb 29>;

<bb 24>:
  D.44163_57 = *p_3;
  if (D.44163_57 != 0)
    goto <bb 25>;
  else
    goto <bb 29>;

<bb 25>:
  D.44171_58 = *p_3;
  D.44172_59 = D.44171_58 + 208;
  D.44173_60 = D.44172_59 <= 9;
  D.44174_61 = D.44171_58 == 46;
  D.44175_62 = D.44173_60 || D.44174_61;
  if (D.44175_62 != 0)
    goto <bb 22>;
  else
    goto <bb 26>;

<bb 26>:
  D.44163_63 = *p_3;
  if (D.44163_63 == 58)
    goto <bb 22>;
  else
    goto <bb 27>;

<bb 27>:
  D.44163_64 = *p_3;
  D.44178_65 = D.44163_64 + 159;
  if (D.44178_65 <= 5)
    goto <bb 22>;
  else
    goto <bb 28>;

<bb 28>:
  D.44163_66 = *p_3;
  D.44180_67 = D.44163_66 + 191;
  if (D.44180_67 <= 5)
    goto <bb 22>;
  else
    goto <bb 29>;

<bb 29>:
  p_71 = port_ptr_8;
  # DEBUG p => p_71
  x_72 = 0;
  # DEBUG x => x_72
  goto <bb 31>;

<bb 30>:
  D.44163_80 = *p_4;
  rp[x_11] = D.44163_80;
  x_81 = x_11 + 1;
  # DEBUG x => x_81
  p_82 = p_4 + 1;
  # DEBUG p => p_82
  if (p_82 >= pe_51)
    goto <bb 98> (end);
  else
    goto <bb 31>;

<bb 31>:
  # p_4 = PHI <p_71(29), p_82(30)>
  # x_11 = PHI <x_72(29), x_81(30)>
  # DEBUG x => x_11
  # DEBUG p => p_4
  x.82_73 = (unsigned int) x_11;
  D.44166_74 = x.82_73 <= 510;
  D.44167_75 = p_4 != 0B;
  D.44168_76 = D.44166_74 && D.44167_75;
  if (D.44168_76 != 0)
    goto <bb 32>;
  else
    goto <bb 34>;

<bb 32>:
  D.44163_77 = *p_4;
  if (D.44163_77 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.44163_78 = *p_4;
  D.44184_79 = D.44163_78 + 208;
  if (D.44184_79 <= 9)
    goto <bb 30>;
  else
    goto <bb 34>;

<bb 34>:
  p_83 = vid_port_ptr_9;
  # DEBUG p => p_83
  x_84 = 0;
  # DEBUG x => x_84
  goto <bb 36>;

<bb 35>:
  D.44163_92 = *p_5;
  rvp[x_12] = D.44163_92;
  x_93 = x_12 + 1;
  # DEBUG x => x_93
  p_94 = p_5 + 1;
  # DEBUG p => p_94
  if (p_94 >= pe_51)
    goto <bb 98> (end);
  else
    goto <bb 36>;

<bb 36>:
  # p_5 = PHI <p_83(34), p_94(35)>
  # x_12 = PHI <x_84(34), x_93(35)>
  # DEBUG x => x_12
  # DEBUG p => p_5
  x.82_85 = (unsigned int) x_12;
  D.44166_86 = x.82_85 <= 510;
  D.44167_87 = p_5 != 0B;
  D.44168_88 = D.44166_86 && D.44167_87;
  if (D.44168_88 != 0)
    goto <bb 37>;
  else
    goto <bb 39>;

<bb 37>:
  D.44163_89 = *p_5;
  if (D.44163_89 != 0)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.44163_90 = *p_5;
  D.44184_91 = D.44163_90 + 208;
  if (D.44184_91 <= 9)
    goto <bb 35>;
  else
    goto <bb 39>;

<bb 39>:
  D.44190_95 = rip[0];
  if (D.44190_95 == 0)
    goto <bb 41>;
  else
    goto <bb 40>;

<bb 40>:
  D.44192_96 = rp[0];
  if (D.44192_96 == 0)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4225, session_25(D), 3, "invalid SDP\n");
  goto <bb 98> (end);

<bb 42>:
  D.44193_97 = a_engine_28->cur_payload_map;
  D.44194_98 = switch_core_perform_session_strdup (session_25(D), &rip, "src/switch_core_media.c", &__func__, 4229);
  D.44193_97->remote_sdp_ip = D.44194_98;
  D.44193_99 = a_engine_28->cur_payload_map;
  D.44195_100 = atoi (&rp);
  D.44196_101 = (short unsigned int) D.44195_100;
  D.44193_99->remote_sdp_port = D.44196_101;
  D.44197_102 = rvp[0];
  if (D.44197_102 != 0)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  D.44200_103 = v_engine_29->cur_payload_map;
  D.44201_104 = switch_core_perform_session_strdup (session_25(D), &rip, "src/switch_core_media.c", &__func__, 4233);
  D.44200_103->remote_sdp_ip = D.44201_104;
  D.44200_105 = v_engine_29->cur_payload_map;
  D.44202_106 = atoi (&rvp);
  D.44203_107 = (short unsigned int) D.44202_106;
  D.44200_105->remote_sdp_port = D.44203_107;
  D.44204_108 = session_25(D)->channel;
  switch_channel_set_flag_value (D.44204_108, 98, 1);
  D.44204_109 = session_25(D)->channel;
  switch_channel_set_flag_value (D.44204_109, 23, 1);

<bb 44>:
  D.44200_110 = v_engine_29->cur_payload_map;
  D.44205_111 = D.44200_110->remote_sdp_ip;
  if (D.44205_111 != 0B)
    goto <bb 45>;
  else
    goto <bb 63>;

<bb 45>:
  D.44200_112 = v_engine_29->cur_payload_map;
  D.44208_113 = D.44200_112->remote_sdp_port;
  if (D.44208_113 != 0)
    goto <bb 46>;
  else
    goto <bb 63>;

<bb 46>:
  D.44200_114 = v_engine_29->cur_payload_map;
  D.44205_115 = D.44200_114->remote_sdp_ip;
  D.39191_116 = __builtin_strcmp (D.44205_115, &rip);
  if (D.39191_116 == 0)
    goto <bb 47>;
  else
    goto <bb 49>;

<bb 47>:
  D.44214_117 = atoi (&rvp);
  D.44200_118 = v_engine_29->cur_payload_map;
  D.44208_119 = D.44200_118->remote_sdp_port;
  D.44215_120 = (int) D.44208_119;
  if (D.44214_117 == D.44215_120)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  D.44200_121 = v_engine_29->cur_payload_map;
  D.44205_122 = D.44200_121->remote_sdp_ip;
  D.44200_123 = v_engine_29->cur_payload_map;
  D.44208_124 = D.44200_123->remote_sdp_port;
  D.44215_125 = (int) D.44208_124;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4241, session_25(D), 7, "Remote video address:port [%s:%d] has not changed.\n", D.44205_122, D.44215_125);
  goto <bb 63>;

<bb 49>:
  D.44204_126 = session_25(D)->channel;
  switch_channel_set_flag_value (D.44204_126, 98, 1);
  D.44204_127 = session_25(D)->channel;
  switch_channel_set_flag_value (D.44204_127, 23, 1);
  D.44217_128 = v_engine_29->rtp_session;
  D.44218_129 = switch_rtp_ready (D.44217_128);
  if (D.44218_129 != 0)
    goto <bb 50>;
  else
    goto <bb 63>;

<bb 50>:
  rport_130 = 0B;
  # DEBUG rport => rport_130
  remote_rtcp_port_131 = v_engine_29->remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_131
  if (remote_rtcp_port_131 == 0)
    goto <bb 51>;
  else
    goto <bb 53>;

<bb 51>:
  D.44204_132 = session_25(D)->channel;
  rport_133 = switch_channel_get_variable_dup (D.44204_132, "rtp_remote_video_rtcp_port", 1, -1);
  # DEBUG rport => rport_133
  if (rport_133 != 0B)
    goto <bb 52>;
  else
    goto <bb 53>;

<bb 52>:
  D.44225_134 = atoi (rport_133);
  remote_rtcp_port_135 = (switch_port_t) D.44225_134;
  # DEBUG remote_rtcp_port => remote_rtcp_port_135

<bb 53>:
  # remote_rtcp_port_14 = PHI <remote_rtcp_port_131(50), remote_rtcp_port_131(51), remote_rtcp_port_135(52)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_14
  D.44217_136 = v_engine_29->rtp_session;
  D.44200_137 = v_engine_29->cur_payload_map;
  D.44205_138 = D.44200_137->remote_sdp_ip;
  D.44200_139 = v_engine_29->cur_payload_map;
  D.44208_140 = D.44200_139->remote_sdp_port;
  D.44226_141 = switch_rtp_set_remote_address (D.44217_136, D.44205_138, D.44208_140, remote_rtcp_port_14, 1, &err);
  if (D.44226_141 != 0)
    goto <bb 54>;
  else
    goto <bb 55>;

<bb 54>:
  err.83_142 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4259, session_25(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", err.83_142);
  goto <bb 63>;

<bb 55>:
  D.44200_143 = v_engine_29->cur_payload_map;
  D.44205_144 = D.44200_143->remote_sdp_ip;
  D.44200_145 = v_engine_29->cur_payload_map;
  D.44208_146 = D.44200_145->remote_sdp_port;
  D.44215_147 = (int) D.44208_146;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4261, session_25(D), 7, "VIDEO RTP CHANGING DEST TO: [%s:%d]\n", D.44205_144, D.44215_147);
  D.44233_148 = switch_media_handle_test_media_flag (smh_26, 10);
  if (D.44233_148 == 0)
    goto <bb 56>;
  else
    goto <bb 61>;

<bb 56>:
  D.44204_149 = session_25(D)->channel;
  D.44236_150 = switch_channel_test_flag (D.44204_149, 15);
  if (D.44236_150 == 0)
    goto <bb 57>;
  else
    goto <bb 61>;

<bb 57>:
  D.44204_151 = session_25(D)->channel;
  val_152 = switch_channel_get_variable_dup (D.44204_151, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_152
  if (val_152 == 0B)
    goto <bb 59>;
  else
    goto <bb 58>;

<bb 58>:
  D.44240_153 = switch_true (val_152);
  if (D.44240_153 == 0)
    goto <bb 59>;
  else
    goto <bb 61>;

<bb 59>:
  D.44204_154 = session_25(D)->channel;
  D.44241_155 = switch_channel_test_flag (D.44204_154, 106);
  if (D.44241_155 == 0)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  D.44217_156 = v_engine_29->rtp_session;
  switch_rtp_set_flag (D.44217_156, 7);
  start_video_thread (session_25(D));

<bb 61>:
  D.44244_157 = switch_media_handle_test_media_flag (smh_26, 2);
  if (D.44244_157 != 0)
    goto <bb 62>;
  else
    goto <bb 63>;

<bb 62>:
  v_engine_29->check_frames = 0;

<bb 63>:
  D.44247_158 = a_engine_28->rtp_session;
  D.44248_159 = switch_rtp_ready (D.44247_158);
  if (D.44248_159 != 0)
    goto <bb 64>;
  else
    goto <bb 98> (end);

<bb 64>:
  D.44247_160 = a_engine_28->rtp_session;
  remote_host_161 = switch_rtp_get_remote_host (D.44247_160);
  # DEBUG remote_host => remote_host_161
  D.44247_162 = a_engine_28->rtp_session;
  remote_port_163 = switch_rtp_get_remote_port (D.44247_162);
  # DEBUG remote_port => remote_port_163
  rport_164 = 0B;
  # DEBUG rport => rport_164
  remote_rtcp_port_165 = 0;
  # DEBUG remote_rtcp_port => remote_rtcp_port_165
  D.44252_166 = remote_host_161 != 0B;
  D.44253_167 = remote_port_163 != 0;
  D.44254_168 = D.44252_166 && D.44253_167;
  if (D.44254_168 != 0)
    goto <bb 65>;
  else
    goto <bb 68>;

<bb 65>:
  D.44193_169 = a_engine_28->cur_payload_map;
  D.44256_170 = D.44193_169->remote_sdp_ip;
  D.39206_171 = __builtin_strcmp (remote_host_161, D.44256_170);
  if (D.39206_171 == 0)
    goto <bb 66>;
  else
    goto <bb 68>;

<bb 66>:
  D.44193_172 = a_engine_28->cur_payload_map;
  D.44258_173 = D.44193_172->remote_sdp_port;
  if (D.44258_173 == remote_port_163)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  D.44193_174 = a_engine_28->cur_payload_map;
  D.44256_175 = D.44193_174->remote_sdp_ip;
  D.44193_176 = a_engine_28->cur_payload_map;
  D.44258_177 = D.44193_176->remote_sdp_port;
  D.44260_178 = (int) D.44258_177;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4286, session_25(D), 7, "Remote address:port [%s:%d] has not changed.\n", D.44256_175, D.44260_178);
  status_179 = 11;
  # DEBUG status => status_179
  goto <bb 98> (end);

<bb 68>:
  if (remote_host_161 != 0B)
    goto <bb 69>;
  else
    goto <bb 86>;

<bb 69>:
  __s2_len_180 = 7;
  # DEBUG __s2_len => __s2_len_180
  if (__s2_len_180 <= 3)
    goto <bb 70>;
  else
    goto <bb 75>;

<bb 70>:
  __s1_181 = remote_host_161;
  # DEBUG __s1 => __s1_181
  D.44268_182 = *__s1_181;
  D.44269_183 = (int) D.44268_182;
  D.44270_184 = "0.0.0.0";
  D.44271_185 = MEM[(const unsigned char *)D.44270_184];
  D.44272_186 = (int) D.44271_185;
  __result_187 = D.44269_183 - D.44272_186;
  # DEBUG __result => __result_187
  D.44273_188 = __s2_len_180 != 0;
  D.44274_189 = __result_187 == 0;
  D.44275_190 = D.44273_188 && D.44274_189;
  if (D.44275_190 != 0)
    goto <bb 71>;
  else
    goto <bb 74>;

<bb 71>:
  D.44278_191 = __s1_181 + 1;
  D.44279_192 = *D.44278_191;
  D.44280_193 = (int) D.44279_192;
  D.44281_194 = &"0.0.0.0"[1];
  D.44282_195 = MEM[(const unsigned char *)D.44281_194];
  D.44283_196 = (int) D.44282_195;
  __result_197 = D.44280_193 - D.44283_196;
  # DEBUG __result => __result_197
  D.44284_198 = __s2_len_180 > 1;
  D.44274_199 = __result_197 == 0;
  D.44285_200 = D.44284_198 && D.44274_199;
  if (D.44285_200 != 0)
    goto <bb 72>;
  else
    goto <bb 74>;

<bb 72>:
  D.44288_201 = __s1_181 + 2;
  D.44289_202 = *D.44288_201;
  D.44290_203 = (int) D.44289_202;
  D.44291_204 = &"0.0.0.0"[2];
  D.44292_205 = MEM[(const unsigned char *)D.44291_204];
  D.44293_206 = (int) D.44292_205;
  __result_207 = D.44290_203 - D.44293_206;
  # DEBUG __result => __result_207
  D.44294_208 = __s2_len_180 > 2;
  D.44274_209 = __result_207 == 0;
  D.44295_210 = D.44294_208 && D.44274_209;
  if (D.44295_210 != 0)
    goto <bb 73>;
  else
    goto <bb 74>;

<bb 73>:
  D.44298_211 = __s1_181 + 3;
  D.44299_212 = *D.44298_211;
  D.44300_213 = (int) D.44299_212;
  D.44301_214 = &"0.0.0.0"[3];
  D.44302_215 = MEM[(const unsigned char *)D.44301_214];
  D.44303_216 = (int) D.44302_215;
  __result_217 = D.44300_213 - D.44303_216;
  # DEBUG __result => __result_217

<bb 74>:
  # __result_16 = PHI <__result_187(70), __result_197(71), __result_207(72), __result_217(73)>
  # DEBUG __result => __result_16
  D.39214_218 = __result_16;
  iftmp.84_219 = D.39214_218;
  goto <bb 76>;

<bb 75>:
  iftmp.84_220 = __builtin_strcmp (remote_host_161, "0.0.0.0");

<bb 76>:
  # iftmp.84_19 = PHI <iftmp.84_219(74), iftmp.84_220(75)>
  D.39215_221 = iftmp.84_19;
  if (D.39215_221 == 0)
    goto <bb 85>;
  else
    goto <bb 77>;

<bb 77>:
  __s2_len_222 = 7;
  # DEBUG __s2_len => __s2_len_222
  if (__s2_len_222 <= 3)
    goto <bb 78>;
  else
    goto <bb 83>;

<bb 78>:
  D.44193_223 = a_engine_28->cur_payload_map;
  __s1_224 = D.44193_223->remote_sdp_ip;
  # DEBUG __s1 => __s1_224
  D.44309_225 = *__s1_224;
  D.44310_226 = (int) D.44309_225;
  D.44270_227 = "0.0.0.0";
  D.44271_228 = MEM[(const unsigned char *)D.44270_227];
  D.44272_229 = (int) D.44271_228;
  __result_230 = D.44310_226 - D.44272_229;
  # DEBUG __result => __result_230
  D.44311_231 = __s2_len_222 != 0;
  D.44312_232 = __result_230 == 0;
  D.44313_233 = D.44311_231 && D.44312_232;
  if (D.44313_233 != 0)
    goto <bb 79>;
  else
    goto <bb 82>;

<bb 79>:
  D.44316_234 = __s1_224 + 1;
  D.44317_235 = *D.44316_234;
  D.44318_236 = (int) D.44317_235;
  D.44281_237 = &"0.0.0.0"[1];
  D.44282_238 = MEM[(const unsigned char *)D.44281_237];
  D.44283_239 = (int) D.44282_238;
  __result_240 = D.44318_236 - D.44283_239;
  # DEBUG __result => __result_240
  D.44319_241 = __s2_len_222 > 1;
  D.44312_242 = __result_240 == 0;
  D.44320_243 = D.44319_241 && D.44312_242;
  if (D.44320_243 != 0)
    goto <bb 80>;
  else
    goto <bb 82>;

<bb 80>:
  D.44323_244 = __s1_224 + 2;
  D.44324_245 = *D.44323_244;
  D.44325_246 = (int) D.44324_245;
  D.44291_247 = &"0.0.0.0"[2];
  D.44292_248 = MEM[(const unsigned char *)D.44291_247];
  D.44293_249 = (int) D.44292_248;
  __result_250 = D.44325_246 - D.44293_249;
  # DEBUG __result => __result_250
  D.44326_251 = __s2_len_222 > 2;
  D.44312_252 = __result_250 == 0;
  D.44327_253 = D.44326_251 && D.44312_252;
  if (D.44327_253 != 0)
    goto <bb 81>;
  else
    goto <bb 82>;

<bb 81>:
  D.44330_254 = __s1_224 + 3;
  D.44331_255 = *D.44330_254;
  D.44332_256 = (int) D.44331_255;
  D.44301_257 = &"0.0.0.0"[3];
  D.44302_258 = MEM[(const unsigned char *)D.44301_257];
  D.44303_259 = (int) D.44302_258;
  __result_260 = D.44332_256 - D.44303_259;
  # DEBUG __result => __result_260

<bb 82>:
  # __result_17 = PHI <__result_230(78), __result_240(79), __result_250(80), __result_260(81)>
  # DEBUG __result => __result_17
  D.39223_261 = __result_17;
  iftmp.85_262 = D.39223_261;
  goto <bb 84>;

<bb 83>:
  D.44193_263 = a_engine_28->cur_payload_map;
  D.44256_264 = D.44193_263->remote_sdp_ip;
  iftmp.85_265 = __builtin_strcmp (D.44256_264, "0.0.0.0");

<bb 84>:
  # iftmp.85_20 = PHI <iftmp.85_262(82), iftmp.85_265(83)>
  D.39224_266 = iftmp.85_20;
  if (D.39224_266 == 0)
    goto <bb 85>;
  else
    goto <bb 86>;

<bb 85>:
  D.44193_267 = a_engine_28->cur_payload_map;
  D.44256_268 = D.44193_267->remote_sdp_ip;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4292, session_25(D), 7, "Remote address changed from [%s] to [%s]. Ignoring...\n", D.44256_268, remote_host_161);
  status_269 = 11;
  # DEBUG status => status_269
  goto <bb 98> (end);

<bb 86>:
  D.44204_270 = session_25(D)->channel;
  rport_271 = switch_channel_get_variable_dup (D.44204_270, "rtp_remote_audio_rtcp_port", 1, -1);
  # DEBUG rport => rport_271
  if (rport_271 != 0B)
    goto <bb 87>;
  else
    goto <bb 88>;

<bb 87>:
  D.44336_272 = atoi (rport_271);
  remote_rtcp_port_273 = (switch_port_t) D.44336_272;
  # DEBUG remote_rtcp_port => remote_rtcp_port_273

<bb 88>:
  # remote_rtcp_port_15 = PHI <remote_rtcp_port_165(86), remote_rtcp_port_273(87)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_15
  D.44247_274 = a_engine_28->rtp_session;
  D.44193_275 = a_engine_28->cur_payload_map;
  D.44256_276 = D.44193_275->remote_sdp_ip;
  D.44193_277 = a_engine_28->cur_payload_map;
  D.44258_278 = D.44193_277->remote_sdp_port;
  D.44337_279 = switch_rtp_set_remote_address (D.44247_274, D.44256_276, D.44258_278, remote_rtcp_port_15, 1, &err);
  if (D.44337_279 != 0)
    goto <bb 89>;
  else
    goto <bb 90>;

<bb 89>:
  err.83_280 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4305, session_25(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.83_280);
  status_281 = 9;
  # DEBUG status => status_281
  goto <bb 98> (end);

<bb 90>:
  D.44193_282 = a_engine_28->cur_payload_map;
  D.44256_283 = D.44193_282->remote_sdp_ip;
  D.44193_284 = a_engine_28->cur_payload_map;
  D.44258_285 = D.44193_284->remote_sdp_port;
  D.44260_286 = (int) D.44258_285;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4308, session_25(D), 7, "AUDIO RTP CHANGING DEST TO: [%s:%d]\n", D.44256_283, D.44260_286);
  D.44343_287 = switch_media_handle_test_media_flag (smh_26, 10);
  if (D.44343_287 == 0)
    goto <bb 91>;
  else
    goto <bb 95>;

<bb 91>:
  D.44204_288 = session_25(D)->channel;
  val_289 = switch_channel_get_variable_dup (D.44204_288, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_289
  if (val_289 == 0B)
    goto <bb 93>;
  else
    goto <bb 92>;

<bb 92>:
  D.44347_290 = switch_true (val_289);
  if (D.44347_290 == 0)
    goto <bb 93>;
  else
    goto <bb 95>;

<bb 93>:
  D.44204_291 = session_25(D)->channel;
  D.44348_292 = switch_channel_test_flag (D.44204_291, 106);
  if (D.44348_292 == 0)
    goto <bb 94>;
  else
    goto <bb 95>;

<bb 94>:
  D.44247_293 = a_engine_28->rtp_session;
  switch_rtp_set_flag (D.44247_293, 7);

<bb 95>:
  D.44351_294 = switch_media_handle_test_media_flag (smh_26, 2);
  if (D.44351_294 != 0)
    goto <bb 96>;
  else
    goto <bb 97>;

<bb 96>:
  a_engine_28->check_frames = 0;

<bb 97>:
  status_295 = 0;
  # DEBUG status => status_295

  # status_13 = PHI <status_24(8), status_24(20), status_24(22), status_24(30), status_24(35), status_24(41), status_24(63), status_179(67), status_269(85), status_281(89), status_295(97)>
end:
  # DEBUG status => status_13
  D.44137_296 = status_13;

<bb 99>:
  # D.44137_18 = PHI <D.44137_27(5), D.44137_296(98)>
  return D.44137_18;

}



;; Function switch_core_media_check_nat (switch_core_media_check_nat)



Renaming block #0



Renaming block #2

Renaming statement if (network_ip == 0B)



Renaming block #3



Renaming block #4

Renaming statement D.44124 = smh->mparams;

Renaming statement D.44125 = D.44124->extsipip;

Renaming statement if (D.44125 != 0B)



Renaming block #5

Renaming statement D.44127 = switch_check_network_list_ip_token (network_ip, "loopback.auto", 0B);

Renaming statement if (D.44127 == 0)



Renaming block #6

Renaming statement D.44124 = smh->mparams;

Renaming statement D.44129 = D.44124->local_network;

Renaming statement D.44130 = switch_check_network_list_ip_token (network_ip, D.44129, 0B);

Renaming statement if (D.44130 == 0)



Renaming block #7

Renaming statement iftmp.81 = 1;



Renaming block #8

Renaming statement iftmp.81 = 0;



Renaming block #9

Renaming statement D.44120 = iftmp.81;

Renaming statement return D.44120;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("network_ip", "src/switch_core_media.c", 4331, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement D.44124_4 = smh_3(D)->mparams;

Updating SSA information for statement D.44125_5 = D.44124_4->extsipip;



Registering new PHI nodes in block #5

Updating SSA information for statement D.44127_6 = switch_check_network_list_ip_token (network_ip_2(D), "loopback.auto", 0B);



Registering new PHI nodes in block #6

Updating SSA information for statement D.44124_7 = smh_3(D)->mparams;

Updating SSA information for statement D.44129_8 = D.44124_7->local_network;

Updating SSA information for statement D.44130_9 = switch_check_network_list_ip_token (network_ip_2(D), D.44129_8, 0B);



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_check_nat";

}
switch_core_media_check_nat (struct switch_media_handle_t * smh, const char * network_ip)
{
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_check_nat";
  switch_bool_t D.44130;
  char * D.44129;
  switch_bool_t D.44127;
  char * D.44125;
  struct switch_core_media_params_t * D.44124;
  int iftmp.81;
  int D.44120;

<bb 2>:
  if (network_ip_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("network_ip", "src/switch_core_media.c", 4331, &__PRETTY_FUNCTION__);

<bb 4>:
  D.44124_4 = smh_3(D)->mparams;
  D.44125_5 = D.44124_4->extsipip;
  if (D.44125_5 != 0B)
    goto <bb 5>;
  else
    goto <bb 8>;

<bb 5>:
  D.44127_6 = switch_check_network_list_ip_token (network_ip_2(D), "loopback.auto", 0B);
  if (D.44127_6 == 0)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  D.44124_7 = smh_3(D)->mparams;
  D.44129_8 = D.44124_7->local_network;
  D.44130_9 = switch_check_network_list_ip_token (network_ip_2(D), D.44129_8, 0B);
  if (D.44130_9 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  iftmp.81_10 = 1;
  goto <bb 9>;

<bb 8>:
  iftmp.81_11 = 0;

<bb 9>:
  # iftmp.81_1 = PHI <iftmp.81_10(7), iftmp.81_11(8)>
  D.44120_12 = iftmp.81_1;
  return D.44120_12;

}



;; Function switch_core_media_ext_address_lookup (switch_core_media_ext_address_lookup)



Renaming block #0



Renaming block #2

Renaming statement status = 1;

Renaming statement myport = *port;

Renaming statement stun_port = 3478;

Renaming statement stun_ip = 0B;

Renaming statement pool = switch_core_session_get_pool (session);

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.44074 = 1;



Renaming block #6

Renaming statement if (sourceip == 0B)



Renaming block #7

Renaming statement D.44074 = status;



Renaming block #8

Renaming statement D.44077 = strncasecmp (sourceip, "host:", 5);

Renaming statement if (D.44077 == 0)



Renaming block #9

Renaming statement D.44080 = sourceip + 5;

Renaming statement D.44081 = switch_stun_host_lookup (D.44080, pool);

Renaming statement *ip = D.44081;

Renaming statement D.44082 = *ip;

Renaming statement status = D.44082 == 0B;



Renaming block #10

Renaming statement D.44084 = strncasecmp (sourceip, "stun:", 5);

Renaming statement if (D.44084 == 0)



Renaming block #11

Renaming statement D.44080 = sourceip + 5;

Renaming statement stun_ip = __strdup (D.44080);

Renaming statement p = __builtin_strchr (stun_ip, 58);

Renaming statement if (p != 0B)



Renaming block #12

Renaming statement *p = 0;

Renaming statement p = p + 1;

Renaming statement iport = atoi (p);

Renaming statement iport.79 = (unsigned int) iport;

Renaming statement D.44090 = iport.79 + 4294967295;

Renaming statement if (D.44090 <= 65533)



Renaming block #13

Renaming statement stun_port = (switch_port_t) iport;



Renaming block #14

Renaming statement D.44093 = _zstr (stun_ip);

Renaming statement if (D.44093 != 0)



Renaming block #15



Renaming block #16

Renaming statement x = 0;



Renaming block #19

Renaming statement if (x <= 4)



Renaming block #17

Renaming statement status = switch_stun_lookup (ip, port, stun_ip, stun_port, &error, pool);

Renaming statement if (status != 0)



Renaming block #18

Renaming statement x = x + 1;



Renaming block #20

Renaming statement if (status != 0)



Renaming block #21

Renaming statement D.44099 = (int) stun_port;

Renaming statement error.80 = error;

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4390, 0B, 3, "STUN Failed! %s:%d [%s]\n", stun_ip, D.44099, error.80);



Renaming block #22

Renaming statement D.44082 = *ip;

Renaming statement if (D.44082 == 0B)



Renaming block #23



Renaming block #24

Renaming statement D.44082 = *ip;

Renaming statement D.44103 = *port;

Renaming statement D.44104 = (int) D.44103;

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4397, 0B, 7, "STUN Success [%s]:[%d]\n", D.44082, D.44104);

Renaming statement status = 0;

Renaming statement D.44103 = *port;

Renaming statement if (D.44103 == myport)



Renaming block #25

Renaming statement D.44082 = *ip;

Renaming statement D.44108 = smh->mparams;

Renaming statement D.44109 = D.44108->rtpip;

Renaming statement D.39263 = __builtin_strcmp (D.44082, D.44109);

Renaming statement if (D.39263 == 0)



Renaming block #26

Renaming statement D.44082 = *ip;

Renaming statement D.44103 = *port;

Renaming statement D.44104 = (int) D.44103;

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4401, 0B, 7, "STUN Not Required ip and port match. [%s]:[%d]\n", D.44082, D.44104);



Renaming block #27

Renaming statement D.44108 = smh->mparams;

Renaming statement D.44111 = switch_core_perform_session_strdup (session, stun_ip, "src/switch_core_media.c", &__func__, 4403);

Renaming statement D.44108->stun_ip = D.44111;

Renaming statement D.44108 = smh->mparams;

Renaming statement D.44108->stun_port = stun_port;

Renaming statement D.44108 = smh->mparams;

Renaming statement D.44108 = smh->mparams;

Renaming statement D.44112 = D.44108->stun_flags;

Renaming statement D.44113 = D.44112 | 1;

Renaming statement D.44108->stun_flags = D.44113;



Renaming block #28

Renaming statement *ip = sourceip;

Renaming statement status = 0;



Renaming block #29

Renaming statement if (stun_ip != 0B)



Renaming block #30

Renaming statement free (stun_ip);

Renaming statement stun_ip = 0B;



Renaming block #31

Renaming statement D.44074 = status;



Renaming block #32

Renaming statement return D.44074;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement error = "";

Updating SSA information for statement myport_10 = *port_9(D);

Updating SSA information for statement pool_14 = switch_core_session_get_pool (session_13(D));



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4351, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_15 = session_13(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8

Updating SSA information for statement D.44077_19 = strncasecmp (sourceip_17(D), "host:", 5);



Registering new PHI nodes in block #9

Updating SSA information for statement D.44081_21 = switch_stun_host_lookup (D.44080_20, pool_14);

Updating SSA information for statement *ip_22(D) = D.44081_21;

Updating SSA information for statement D.44082_23 = *ip_22(D);



Registering new PHI nodes in block #10

Updating SSA information for statement D.44084_25 = strncasecmp (sourceip_17(D), "stun:", 5);



Registering new PHI nodes in block #11

Updating SSA information for statement stun_ip_27 = __strdup (D.44080_26);

Updating SSA information for statement p_28 = __builtin_strchr (stun_ip_27, 58);



Registering new PHI nodes in block #12

Updating SSA information for statement *p_28 = 0;

Updating SSA information for statement iport_30 = atoi (p_29);



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement D.44093_34 = _zstr (stun_ip_27);



Registering new PHI nodes in block #15

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4378, 0B, 3, "STUN Failed! NO STUN SERVER\n");



Registering new PHI nodes in block #16



Registering new PHI nodes in block #19



Registering new PHI nodes in block #17

Updating SSA information for statement status_36 = switch_stun_lookup (ip_22(D), port_9(D), stun_ip_27, stun_port_5, &error, pool_14);



Registering new PHI nodes in block #18

Updating SSA information for statement switch_sleep (100000);



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement error.80_39 = error;

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4390, 0B, 3, "STUN Failed! %s:%d [%s]\n", stun_ip_27, D.44099_38, error.80_39);



Registering new PHI nodes in block #22

Updating SSA information for statement D.44082_40 = *ip_22(D);



Registering new PHI nodes in block #23

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4394, 0B, 3, "STUN Failed! No IP returned\n");



Registering new PHI nodes in block #24

Updating SSA information for statement D.44082_41 = *ip_22(D);

Updating SSA information for statement D.44103_42 = *port_9(D);

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4397, 0B, 7, "STUN Success [%s]:[%d]\n", D.44082_41, D.44104_43);

Updating SSA information for statement D.44103_45 = *port_9(D);



Registering new PHI nodes in block #25

Updating SSA information for statement D.44082_46 = *ip_22(D);

Updating SSA information for statement D.44108_47 = smh_15->mparams;

Updating SSA information for statement D.44109_48 = D.44108_47->rtpip;

Updating SSA information for statement D.39263_49 = __builtin_strcmp (D.44082_46, D.44109_48);



Registering new PHI nodes in block #26

Updating SSA information for statement D.44082_50 = *ip_22(D);

Updating SSA information for statement D.44103_51 = *port_9(D);

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4401, 0B, 7, "STUN Not Required ip and port match. [%s]:[%d]\n", D.44082_50, D.44104_52);



Registering new PHI nodes in block #27

Updating SSA information for statement D.44108_53 = smh_15->mparams;

Updating SSA information for statement D.44111_54 = switch_core_perform_session_strdup (session_13(D), stun_ip_27, "src/switch_core_media.c", &__func__, 4403);

Updating SSA information for statement D.44108_53->stun_ip = D.44111_54;

Updating SSA information for statement D.44108_55 = smh_15->mparams;

Updating SSA information for statement D.44108_55->stun_port = stun_port_5;

Updating SSA information for statement D.44108_56 = smh_15->mparams;

Updating SSA information for statement D.44108_57 = smh_15->mparams;

Updating SSA information for statement D.44112_58 = D.44108_57->stun_flags;

Updating SSA information for statement D.44108_57->stun_flags = D.44113_59;



Registering new PHI nodes in block #28

Updating SSA information for statement *ip_22(D) = sourceip_17(D);



Registering new PHI nodes in block #29



Registering new PHI nodes in block #30

Updating SSA information for statement free (stun_ip_6);



Registering new PHI nodes in block #31



Registering new PHI nodes in block #32



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 33
Number of blocks to update: 32 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 


Scope blocks after cleanups:

{ Scope block #0 
  char * error;
  switch_status_t status;
  int x;
  switch_port_t myport;
  switch_port_t stun_port;
  char * stun_ip;
  struct switch_media_handle_t * smh;
  struct switch_memory_pool_t * pool;
  static const char __PRETTY_FUNCTION__[37] = "switch_core_media_ext_address_lookup";
  static const char __func__[37] = "switch_core_media_ext_address_lookup";
  void out = <<< error >>>; (unused)

  { Scope block #0 
    char * p;

    { Scope block #0 
      int iport;

    }

    { Scope block #0 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

  }

}
switch_core_media_ext_address_lookup (struct switch_core_session_t * session, char * * ip, switch_port_t * port, const char * sourceip)
{
  int iport;
  char * p;
  static const char __func__[37] = "switch_core_media_ext_address_lookup";
  static const char __PRETTY_FUNCTION__[37] = "switch_core_media_ext_address_lookup";
  struct switch_memory_pool_t * pool;
  struct switch_media_handle_t * smh;
  char * stun_ip;
  switch_port_t stun_port;
  switch_port_t myport;
  int x;
  switch_status_t status;
  char * error;
  uint32_t D.44113;
  uint32_t D.44112;
  char * D.44111;
  char * D.44109;
  struct switch_core_media_params_t * D.44108;
  int D.39263;
  int D.44104;
  switch_port_t D.44103;
  char * error.80;
  int D.44099;
  int D.44093;
  unsigned int D.44090;
  unsigned int iport.79;
  int D.44084;
  char * D.44082;
  char * D.44081;
  const char * D.44080;
  int D.44077;
  switch_status_t D.44074;

<bb 2>:
  error = "";
  status_8 = 1;
  # DEBUG status => status_8
  myport_10 = *port_9(D);
  # DEBUG myport => myport_10
  stun_port_11 = 3478;
  # DEBUG stun_port => stun_port_11
  stun_ip_12 = 0B;
  # DEBUG stun_ip => stun_ip_12
  pool_14 = switch_core_session_get_pool (session_13(D));
  # DEBUG pool => pool_14
  if (session_13(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4351, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_15 = session_13(D)->media_handle;
  # DEBUG smh => smh_15
  if (smh_15 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.44074_16 = 1;
  goto <bb 32>;

<bb 6>:
  if (sourceip_17(D) == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.44074_18 = status_8;
  goto <bb 32>;

<bb 8>:
  D.44077_19 = strncasecmp (sourceip_17(D), "host:", 5);
  if (D.44077_19 == 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.44080_20 = sourceip_17(D) + 5;
  D.44081_21 = switch_stun_host_lookup (D.44080_20, pool_14);
  *ip_22(D) = D.44081_21;
  D.44082_23 = *ip_22(D);
  status_24 = D.44082_23 == 0B;
  # DEBUG status => status_24
  goto <bb 29> (out);

<bb 10>:
  D.44084_25 = strncasecmp (sourceip_17(D), "stun:", 5);
  if (D.44084_25 == 0)
    goto <bb 11>;
  else
    goto <bb 28>;

<bb 11>:
  D.44080_26 = sourceip_17(D) + 5;
  stun_ip_27 = __strdup (D.44080_26);
  # DEBUG stun_ip => stun_ip_27
  p_28 = __builtin_strchr (stun_ip_27, 58);
  # DEBUG p => p_28
  if (p_28 != 0B)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 12>:
  *p_28 = 0;
  p_29 = p_28 + 1;
  # DEBUG p => p_29
  iport_30 = atoi (p_29);
  # DEBUG iport => iport_30
  iport.79_31 = (unsigned int) iport_30;
  D.44090_32 = iport.79_31 + 4294967295;
  if (D.44090_32 <= 65533)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  stun_port_33 = (switch_port_t) iport_30;
  # DEBUG stun_port => stun_port_33

<bb 14>:
  # stun_port_5 = PHI <stun_port_11(11), stun_port_11(12), stun_port_33(13)>
  # DEBUG stun_port => stun_port_5
  D.44093_34 = _zstr (stun_ip_27);
  if (D.44093_34 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4378, 0B, 3, "STUN Failed! NO STUN SERVER\n");
  goto <bb 29> (out);

<bb 16>:
  x_35 = 0;
  # DEBUG x => x_35
  goto <bb 19>;

<bb 17>:
  status_36 = switch_stun_lookup (ip_22(D), port_9(D), stun_ip_27, stun_port_5, &error, pool_14);
  # DEBUG status => status_36
  if (status_36 != 0)
    goto <bb 18>;
  else
    goto <bb 20>;

<bb 18>:
  switch_sleep (100000);
  x_37 = x_4 + 1;
  # DEBUG x => x_37

<bb 19>:
  # status_1 = PHI <status_8(16), status_36(18)>
  # x_4 = PHI <x_35(16), x_37(18)>
  # DEBUG x => x_4
  # DEBUG status => status_1
  if (x_4 <= 4)
    goto <bb 17>;
  else
    goto <bb 20>;

<bb 20>:
  # status_2 = PHI <status_36(17), status_1(19)>
  # DEBUG status => status_2
  if (status_2 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.44099_38 = (int) stun_port_5;
  error.80_39 = error;
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4390, 0B, 3, "STUN Failed! %s:%d [%s]\n", stun_ip_27, D.44099_38, error.80_39);
  goto <bb 29> (out);

<bb 22>:
  D.44082_40 = *ip_22(D);
  if (D.44082_40 == 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4394, 0B, 3, "STUN Failed! No IP returned\n");
  goto <bb 29> (out);

<bb 24>:
  D.44082_41 = *ip_22(D);
  D.44103_42 = *port_9(D);
  D.44104_43 = (int) D.44103_42;
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4397, 0B, 7, "STUN Success [%s]:[%d]\n", D.44082_41, D.44104_43);
  status_44 = 0;
  # DEBUG status => status_44
  D.44103_45 = *port_9(D);
  if (D.44103_45 == myport_10)
    goto <bb 25>;
  else
    goto <bb 27>;

<bb 25>:
  D.44082_46 = *ip_22(D);
  D.44108_47 = smh_15->mparams;
  D.44109_48 = D.44108_47->rtpip;
  D.39263_49 = __builtin_strcmp (D.44082_46, D.44109_48);
  if (D.39263_49 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  D.44082_50 = *ip_22(D);
  D.44103_51 = *port_9(D);
  D.44104_52 = (int) D.44103_51;
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4401, 0B, 7, "STUN Not Required ip and port match. [%s]:[%d]\n", D.44082_50, D.44104_52);
  goto <bb 29> (out);

<bb 27>:
  D.44108_53 = smh_15->mparams;
  D.44111_54 = switch_core_perform_session_strdup (session_13(D), stun_ip_27, "src/switch_core_media.c", &__func__, 4403);
  D.44108_53->stun_ip = D.44111_54;
  D.44108_55 = smh_15->mparams;
  D.44108_55->stun_port = stun_port_5;
  D.44108_56 = smh_15->mparams;
  D.44108_57 = smh_15->mparams;
  D.44112_58 = D.44108_57->stun_flags;
  D.44113_59 = D.44112_58 | 1;
  D.44108_57->stun_flags = D.44113_59;
  goto <bb 29> (out);

<bb 28>:
  *ip_22(D) = sourceip_17(D);
  status_60 = 0;
  # DEBUG status => status_60

  # status_3 = PHI <status_24(9), status_8(15), status_2(21), status_2(23), status_44(27), status_60(28), status_44(26)>
  # stun_ip_6 = PHI <stun_ip_12(9), stun_ip_27(15), stun_ip_27(21), stun_ip_27(23), stun_ip_27(27), stun_ip_12(28), stun_ip_27(26)>
out:
  # DEBUG stun_ip => stun_ip_6
  # DEBUG status => status_3
  if (stun_ip_6 != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  free (stun_ip_6);
  stun_ip_61 = 0B;
  # DEBUG stun_ip => stun_ip_61

<bb 31>:
  D.44074_62 = status_3;

<bb 32>:
  # D.44074_7 = PHI <D.44074_16(5), D.44074_18(7), D.44074_62(31)>
  return D.44074_7;

}



;; Function switch_core_media_reset_autofix (switch_core_media_reset_autofix)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.44067 = &smh->engines;

Renaming statement D.44068 = type * 11416;

Renaming statement engine = D.44067 + D.44068;

Renaming statement engine->check_frames = 0;

Renaming statement engine->last_ts = 0;



Renaming block #6



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4425, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement engine_6->check_frames = 0;

Updating SSA information for statement engine_6->last_ts = 0;



Registering new PHI nodes in block #6



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)

Affected blocks: 0 2 3 4 5 6 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_reset_autofix";

}
switch_core_media_reset_autofix (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_reset_autofix";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  unsigned int D.44068;
  struct switch_rtp_engine_t[2] * D.44067;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4425, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  D.44067_3 = &smh_2->engines;
  D.44068_5 = type_4(D) * 11416;
  engine_6 = D.44067_3 + D.44068_5;
  # DEBUG engine => engine_6
  engine_6->check_frames = 0;
  engine_6->last_ts = 0;

<bb 6>:
  return;

}



;; Function switch_core_media_choose_port (switch_core_media_choose_port)



Renaming block #0



Renaming block #2

Renaming statement use_ip = 0B;

Renaming statement tstr = switch_media_type2str (type);

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.44011 = 1;



Renaming block #6

Renaming statement D.44012 = &smh->engines;

Renaming statement D.44013 = type * 11416;

Renaming statement engine = D.44012 + D.44013;

Renaming statement D.44014 = smh->mparams;

Renaming statement lookup_rtpip.76 = D.44014->rtpip;

Renaming statement lookup_rtpip = lookup_rtpip.76;

Renaming statement if (force == 0)



Renaming block #7

Renaming statement D.44020 = session->channel;

Renaming statement D.44021 = switch_channel_test_flag (D.44020, 15);

Renaming statement if (D.44021 != 0)



Renaming block #8

Renaming statement D.44020 = session->channel;

Renaming statement D.44023 = switch_channel_test_flag (D.44020, 29);

Renaming statement if (D.44023 != 0)



Renaming block #9

Renaming statement D.44025 = engine->adv_sdp_port;

Renaming statement if (D.44025 != 0)



Renaming block #10

Renaming statement D.44011 = 0;



Renaming block #11

Renaming statement sdp_port.77 = engine->local_sdp_port;

Renaming statement if (sdp_port.77 != 0)



Renaming block #12

Renaming statement D.44014 = smh->mparams;

Renaming statement lookup_rtpip.76 = D.44014->rtpip;

Renaming statement sdp_port.77 = engine->local_sdp_port;

Renaming statement switch_rtp_release_port (lookup_rtpip.76, sdp_port.77);



Renaming block #13

Renaming statement D.44014 = smh->mparams;

Renaming statement lookup_rtpip.76 = D.44014->rtpip;

Renaming statement D.44029 = switch_rtp_request_port (lookup_rtpip.76);

Renaming statement engine->local_sdp_port = D.44029;

Renaming statement sdp_port.77 = engine->local_sdp_port;

Renaming statement if (sdp_port.77 == 0)



Renaming block #14

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4475, session, 2, "No %s RTP ports available!\n", tstr);

Renaming statement D.44011 = 1;



Renaming block #15

Renaming statement D.44014 = smh->mparams;

Renaming statement lookup_rtpip.76 = D.44014->rtpip;

Renaming statement engine->local_sdp_ip = lookup_rtpip.76;

Renaming statement sdp_port.77 = engine->local_sdp_port;

Renaming statement sdp_port = sdp_port.77;

Renaming statement D.44014 = smh->mparams;

Renaming statement D.44034 = D.44014->remote_ip;

Renaming statement D.44035 = _zstr (D.44034);

Renaming statement if (D.44035 == 0)



Renaming block #16

Renaming statement D.44014 = smh->mparams;

Renaming statement D.44034 = D.44014->remote_ip;

Renaming statement D.44037 = switch_core_media_check_nat (smh, D.44034);

Renaming statement if (D.44037 != 0)



Renaming block #17

Renaming statement sdp_port.77 = engine->local_sdp_port;

Renaming statement switch_nat_add_mapping (sdp_port.77, 0, &sdp_port, 0);

Renaming statement switch_snprintf (&vname, 128, "rtp_adv_%s_ip", tstr);

Renaming statement D.44020 = session->channel;

Renaming statement use_ip = switch_channel_get_variable_dup (D.44020, &vname, 1, -1);

Renaming statement if (use_ip == 0B)



Renaming block #18

Renaming statement D.44014 = smh->mparams;

Renaming statement D.44041 = D.44014->extrtpip;

Renaming statement D.44042 = _zstr (D.44041);

Renaming statement if (D.44042 == 0)



Renaming block #19

Renaming statement D.44014 = smh->mparams;

Renaming statement use_ip = D.44014->extrtpip;



Renaming block #20

Renaming statement if (use_ip != 0B)



Renaming block #21

Renaming statement D.44047 = switch_core_media_ext_address_lookup (session, &lookup_rtpip, &sdp_port, use_ip);

Renaming statement if (D.44047 != 0)



Renaming block #22

Renaming statement D.44011 = 1;



Renaming block #23

Renaming statement use_ip = lookup_rtpip;



Renaming block #24

Renaming statement D.44014 = smh->mparams;

Renaming statement use_ip = D.44014->rtpip;



Renaming block #25

Renaming statement D.44014 = smh->mparams;

Renaming statement use_ip = D.44014->rtpip;



Renaming block #26

Renaming statement sdp_port.78 = sdp_port;

Renaming statement engine->adv_sdp_port = sdp_port.78;

Renaming statement D.44014 = smh->mparams;

Renaming statement D.44014 = smh->mparams;

Renaming statement D.44052 = switch_core_perform_session_strdup (session, use_ip, "src/switch_core_media.c", &__func__, 4515);

Renaming statement D.44014->extrtpip = D.44052;

Renaming statement D.44041 = D.44014->extrtpip;

Renaming statement D.44014->adv_sdp_audio_ip = D.44041;

Renaming statement D.44053 = D.44014->adv_sdp_audio_ip;

Renaming statement engine->adv_sdp_ip = D.44053;

Renaming statement if (type == 0)



Renaming block #27

Renaming statement D.44020 = session->channel;

Renaming statement D.44056 = engine->local_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.44020, "local_media_ip", D.44056, 1);

Renaming statement D.44020 = session->channel;

Renaming statement sdp_port.78 = sdp_port;

Renaming statement D.44057 = (int) sdp_port.78;

Renaming statement switch_channel_set_variable_printf (D.44020, "local_media_port", "%d", D.44057);

Renaming statement D.44020 = session->channel;

Renaming statement D.44058 = engine->adv_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.44020, "advertised_media_ip", D.44058, 1);



Renaming block #28

Renaming statement D.44020 = session->channel;

Renaming statement D.44058 = engine->adv_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.44020, "local_video_ip", D.44058, 1);

Renaming statement D.44020 = session->channel;

Renaming statement sdp_port.78 = sdp_port;

Renaming statement D.44057 = (int) sdp_port.78;

Renaming statement switch_channel_set_variable_printf (D.44020, "local_video_port", "%d", D.44057);



Renaming block #29

Renaming statement D.44011 = 0;



Renaming block #30

Renaming statement return D.44011;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement vname = "";



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4450, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_8 = session_7(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.44014_13 = smh_8->mparams;

Updating SSA information for statement lookup_rtpip.76_14 = D.44014_13->rtpip;

Updating SSA information for statement lookup_rtpip = lookup_rtpip.76_14;



Registering new PHI nodes in block #7

Updating SSA information for statement D.44020_16 = session_7(D)->channel;

Updating SSA information for statement D.44021_17 = switch_channel_test_flag (D.44020_16, 15);



Registering new PHI nodes in block #8

Updating SSA information for statement D.44020_18 = session_7(D)->channel;

Updating SSA information for statement D.44023_19 = switch_channel_test_flag (D.44020_18, 29);



Registering new PHI nodes in block #9

Updating SSA information for statement D.44025_20 = engine_12->adv_sdp_port;



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11

Updating SSA information for statement sdp_port.77_22 = engine_12->local_sdp_port;



Registering new PHI nodes in block #12

Updating SSA information for statement D.44014_23 = smh_8->mparams;

Updating SSA information for statement lookup_rtpip.76_24 = D.44014_23->rtpip;

Updating SSA information for statement sdp_port.77_25 = engine_12->local_sdp_port;

Updating SSA information for statement switch_rtp_release_port (lookup_rtpip.76_24, sdp_port.77_25);



Registering new PHI nodes in block #13

Updating SSA information for statement D.44014_26 = smh_8->mparams;

Updating SSA information for statement lookup_rtpip.76_27 = D.44014_26->rtpip;

Updating SSA information for statement D.44029_28 = switch_rtp_request_port (lookup_rtpip.76_27);

Updating SSA information for statement engine_12->local_sdp_port = D.44029_28;

Updating SSA information for statement sdp_port.77_29 = engine_12->local_sdp_port;



Registering new PHI nodes in block #14

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4475, session_7(D), 2, "No %s RTP ports available!\n", tstr_6);



Registering new PHI nodes in block #15

Updating SSA information for statement D.44014_31 = smh_8->mparams;

Updating SSA information for statement lookup_rtpip.76_32 = D.44014_31->rtpip;

Updating SSA information for statement engine_12->local_sdp_ip = lookup_rtpip.76_32;

Updating SSA information for statement sdp_port.77_33 = engine_12->local_sdp_port;

Updating SSA information for statement sdp_port = sdp_port.77_33;

Updating SSA information for statement D.44014_34 = smh_8->mparams;

Updating SSA information for statement D.44034_35 = D.44014_34->remote_ip;

Updating SSA information for statement D.44035_36 = _zstr (D.44034_35);



Registering new PHI nodes in block #16

Updating SSA information for statement D.44014_37 = smh_8->mparams;

Updating SSA information for statement D.44034_38 = D.44014_37->remote_ip;

Updating SSA information for statement D.44037_39 = switch_core_media_check_nat (smh_8, D.44034_38);



Registering new PHI nodes in block #17

Updating SSA information for statement sdp_port.77_40 = engine_12->local_sdp_port;

Updating SSA information for statement switch_nat_add_mapping (sdp_port.77_40, 0, &sdp_port, 0);

Updating SSA information for statement switch_snprintf (&vname, 128, "rtp_adv_%s_ip", tstr_6);

Updating SSA information for statement D.44020_41 = session_7(D)->channel;

Updating SSA information for statement use_ip_42 = switch_channel_get_variable_dup (D.44020_41, &vname, 1, -1);



Registering new PHI nodes in block #18

Updating SSA information for statement D.44014_43 = smh_8->mparams;

Updating SSA information for statement D.44041_44 = D.44014_43->extrtpip;

Updating SSA information for statement D.44042_45 = _zstr (D.44041_44);



Registering new PHI nodes in block #19

Updating SSA information for statement D.44014_46 = smh_8->mparams;

Updating SSA information for statement use_ip_47 = D.44014_46->extrtpip;



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement D.44047_48 = switch_core_media_ext_address_lookup (session_7(D), &lookup_rtpip, &sdp_port, use_ip_1);



Registering new PHI nodes in block #22



Registering new PHI nodes in block #23

Updating SSA information for statement use_ip_50 = lookup_rtpip;



Registering new PHI nodes in block #24

Updating SSA information for statement D.44014_51 = smh_8->mparams;

Updating SSA information for statement use_ip_52 = D.44014_51->rtpip;



Registering new PHI nodes in block #25

Updating SSA information for statement D.44014_53 = smh_8->mparams;

Updating SSA information for statement use_ip_54 = D.44014_53->rtpip;



Registering new PHI nodes in block #26

Updating SSA information for statement sdp_port.78_55 = sdp_port;

Updating SSA information for statement engine_12->adv_sdp_port = sdp_port.78_55;

Updating SSA information for statement D.44014_56 = smh_8->mparams;

Updating SSA information for statement D.44014_57 = smh_8->mparams;

Updating SSA information for statement D.44052_58 = switch_core_perform_session_strdup (session_7(D), use_ip_2, "src/switch_core_media.c", &__func__, 4515);

Updating SSA information for statement D.44014_57->extrtpip = D.44052_58;

Updating SSA information for statement D.44041_59 = D.44014_57->extrtpip;

Updating SSA information for statement D.44014_57->adv_sdp_audio_ip = D.44041_59;

Updating SSA information for statement D.44053_60 = D.44014_57->adv_sdp_audio_ip;

Updating SSA information for statement engine_12->adv_sdp_ip = D.44053_60;



Registering new PHI nodes in block #27

Updating SSA information for statement D.44020_61 = session_7(D)->channel;

Updating SSA information for statement D.44056_62 = engine_12->local_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44020_61, "local_media_ip", D.44056_62, 1);

Updating SSA information for statement D.44020_63 = session_7(D)->channel;

Updating SSA information for statement sdp_port.78_64 = sdp_port;

Updating SSA information for statement switch_channel_set_variable_printf (D.44020_63, "local_media_port", "%d", D.44057_65);

Updating SSA information for statement D.44020_66 = session_7(D)->channel;

Updating SSA information for statement D.44058_67 = engine_12->adv_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44020_66, "advertised_media_ip", D.44058_67, 1);



Registering new PHI nodes in block #28

Updating SSA information for statement D.44020_68 = session_7(D)->channel;

Updating SSA information for statement D.44058_69 = engine_12->adv_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44020_68, "local_video_ip", D.44058_69, 1);

Updating SSA information for statement D.44020_70 = session_7(D)->channel;

Updating SSA information for statement sdp_port.78_71 = sdp_port;

Updating SSA information for statement switch_channel_set_variable_printf (D.44020_70, "local_video_port", "%d", D.44057_72);



Registering new PHI nodes in block #29



Registering new PHI nodes in block #30



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 31
Number of blocks to update: 30 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 


Scope blocks after cleanups:

{ Scope block #0 
  char * lookup_rtpip;
  switch_port_t sdp_port;
  const char * use_ip;
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  const char * tstr;
  char vname[128];
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_choose_port";
  static const char __func__[30] = "switch_core_media_choose_port";

}
switch_core_media_choose_port (struct switch_core_session_t * session, switch_media_type_t type, int force)
{
  static const char __func__[30] = "switch_core_media_choose_port";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_choose_port";
  char vname[128];
  const char * tstr;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  const char * use_ip;
  switch_port_t sdp_port;
  char * lookup_rtpip;
  char * D.44058;
  int D.44057;
  char * D.44056;
  char * D.44053;
  char * D.44052;
  switch_port_t sdp_port.78;
  switch_status_t D.44047;
  int D.44042;
  char * D.44041;
  int D.44037;
  int D.44035;
  char * D.44034;
  switch_port_t D.44029;
  switch_port_t sdp_port.77;
  switch_port_t D.44025;
  uint32_t D.44023;
  uint32_t D.44021;
  struct switch_channel_t * D.44020;
  char * lookup_rtpip.76;
  struct switch_core_media_params_t * D.44014;
  unsigned int D.44013;
  struct switch_rtp_engine_t[2] * D.44012;
  switch_status_t D.44011;

<bb 2>:
  use_ip_4 = 0B;
  # DEBUG use_ip => use_ip_4
  tstr_6 = switch_media_type2str (type_5(D));
  # DEBUG tstr => tstr_6
  vname = "";
  if (session_7(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4450, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_8 = session_7(D)->media_handle;
  # DEBUG smh => smh_8
  if (smh_8 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.44011_9 = 1;
  goto <bb 30>;

<bb 6>:
  D.44012_10 = &smh_8->engines;
  D.44013_11 = type_5(D) * 11416;
  engine_12 = D.44012_10 + D.44013_11;
  # DEBUG engine => engine_12
  D.44014_13 = smh_8->mparams;
  lookup_rtpip.76_14 = D.44014_13->rtpip;
  lookup_rtpip = lookup_rtpip.76_14;
  if (force_15(D) == 0)
    goto <bb 7>;
  else
    goto <bb 11>;

<bb 7>:
  D.44020_16 = session_7(D)->channel;
  D.44021_17 = switch_channel_test_flag (D.44020_16, 15);
  if (D.44021_17 != 0)
    goto <bb 10>;
  else
    goto <bb 8>;

<bb 8>:
  D.44020_18 = session_7(D)->channel;
  D.44023_19 = switch_channel_test_flag (D.44020_18, 29);
  if (D.44023_19 != 0)
    goto <bb 10>;
  else
    goto <bb 9>;

<bb 9>:
  D.44025_20 = engine_12->adv_sdp_port;
  if (D.44025_20 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.44011_21 = 0;
  goto <bb 30>;

<bb 11>:
  sdp_port.77_22 = engine_12->local_sdp_port;
  if (sdp_port.77_22 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  D.44014_23 = smh_8->mparams;
  lookup_rtpip.76_24 = D.44014_23->rtpip;
  sdp_port.77_25 = engine_12->local_sdp_port;
  switch_rtp_release_port (lookup_rtpip.76_24, sdp_port.77_25);

<bb 13>:
  D.44014_26 = smh_8->mparams;
  lookup_rtpip.76_27 = D.44014_26->rtpip;
  D.44029_28 = switch_rtp_request_port (lookup_rtpip.76_27);
  engine_12->local_sdp_port = D.44029_28;
  sdp_port.77_29 = engine_12->local_sdp_port;
  if (sdp_port.77_29 == 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4475, session_7(D), 2, "No %s RTP ports available!\n", tstr_6);
  D.44011_30 = 1;
  goto <bb 30>;

<bb 15>:
  D.44014_31 = smh_8->mparams;
  lookup_rtpip.76_32 = D.44014_31->rtpip;
  engine_12->local_sdp_ip = lookup_rtpip.76_32;
  sdp_port.77_33 = engine_12->local_sdp_port;
  sdp_port = sdp_port.77_33;
  D.44014_34 = smh_8->mparams;
  D.44034_35 = D.44014_34->remote_ip;
  D.44035_36 = _zstr (D.44034_35);
  if (D.44035_36 == 0)
    goto <bb 16>;
  else
    goto <bb 25>;

<bb 16>:
  D.44014_37 = smh_8->mparams;
  D.44034_38 = D.44014_37->remote_ip;
  D.44037_39 = switch_core_media_check_nat (smh_8, D.44034_38);
  if (D.44037_39 != 0)
    goto <bb 17>;
  else
    goto <bb 25>;

<bb 17>:
  sdp_port.77_40 = engine_12->local_sdp_port;
  switch_nat_add_mapping (sdp_port.77_40, 0, &sdp_port, 0);
  switch_snprintf (&vname, 128, "rtp_adv_%s_ip", tstr_6);
  D.44020_41 = session_7(D)->channel;
  use_ip_42 = switch_channel_get_variable_dup (D.44020_41, &vname, 1, -1);
  # DEBUG use_ip => use_ip_42
  if (use_ip_42 == 0B)
    goto <bb 18>;
  else
    goto <bb 20>;

<bb 18>:
  D.44014_43 = smh_8->mparams;
  D.44041_44 = D.44014_43->extrtpip;
  D.44042_45 = _zstr (D.44041_44);
  if (D.44042_45 == 0)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.44014_46 = smh_8->mparams;
  use_ip_47 = D.44014_46->extrtpip;
  # DEBUG use_ip => use_ip_47

<bb 20>:
  # use_ip_1 = PHI <use_ip_42(17), use_ip_42(18), use_ip_47(19)>
  # DEBUG use_ip => use_ip_1
  if (use_ip_1 != 0B)
    goto <bb 21>;
  else
    goto <bb 24>;

<bb 21>:
  D.44047_48 = switch_core_media_ext_address_lookup (session_7(D), &lookup_rtpip, &sdp_port, use_ip_1);
  if (D.44047_48 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.44011_49 = 1;
  goto <bb 30>;

<bb 23>:
  use_ip_50 = lookup_rtpip;
  # DEBUG use_ip => use_ip_50
  goto <bb 26>;

<bb 24>:
  D.44014_51 = smh_8->mparams;
  use_ip_52 = D.44014_51->rtpip;
  # DEBUG use_ip => use_ip_52
  goto <bb 26>;

<bb 25>:
  D.44014_53 = smh_8->mparams;
  use_ip_54 = D.44014_53->rtpip;
  # DEBUG use_ip => use_ip_54

<bb 26>:
  # use_ip_2 = PHI <use_ip_52(24), use_ip_54(25), use_ip_50(23)>
  # DEBUG use_ip => use_ip_2
  sdp_port.78_55 = sdp_port;
  engine_12->adv_sdp_port = sdp_port.78_55;
  D.44014_56 = smh_8->mparams;
  D.44014_57 = smh_8->mparams;
  D.44052_58 = switch_core_perform_session_strdup (session_7(D), use_ip_2, "src/switch_core_media.c", &__func__, 4515);
  D.44014_57->extrtpip = D.44052_58;
  D.44041_59 = D.44014_57->extrtpip;
  D.44014_57->adv_sdp_audio_ip = D.44041_59;
  D.44053_60 = D.44014_57->adv_sdp_audio_ip;
  engine_12->adv_sdp_ip = D.44053_60;
  if (type_5(D) == 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.44020_61 = session_7(D)->channel;
  D.44056_62 = engine_12->local_sdp_ip;
  switch_channel_set_variable_var_check (D.44020_61, "local_media_ip", D.44056_62, 1);
  D.44020_63 = session_7(D)->channel;
  sdp_port.78_64 = sdp_port;
  D.44057_65 = (int) sdp_port.78_64;
  switch_channel_set_variable_printf (D.44020_63, "local_media_port", "%d", D.44057_65);
  D.44020_66 = session_7(D)->channel;
  D.44058_67 = engine_12->adv_sdp_ip;
  switch_channel_set_variable_var_check (D.44020_66, "advertised_media_ip", D.44058_67, 1);
  goto <bb 29>;

<bb 28>:
  D.44020_68 = session_7(D)->channel;
  D.44058_69 = engine_12->adv_sdp_ip;
  switch_channel_set_variable_var_check (D.44020_68, "local_video_ip", D.44058_69, 1);
  D.44020_70 = session_7(D)->channel;
  sdp_port.78_71 = sdp_port;
  D.44057_72 = (int) sdp_port.78_71;
  switch_channel_set_variable_printf (D.44020_70, "local_video_port", "%d", D.44057_72);

<bb 29>:
  D.44011_73 = 0;

<bb 30>:
  # D.44011_3 = PHI <D.44011_9(5), D.44011_21(10), D.44011_30(14), D.44011_49(22), D.44011_73(29)>
  return D.44011_3;

}



;; Function switch_core_media_choose_ports (switch_core_media_choose_ports)



Renaming block #0



Renaming block #2

Renaming statement status = 0;

Renaming statement if (audio != 0)



Renaming block #3

Renaming statement status = switch_core_media_choose_port (session, 0, 0);

Renaming statement if (status == 0)



Renaming block #4

Renaming statement if (video != 0)



Renaming block #5

Renaming statement switch_core_media_check_video_codecs (session);

Renaming statement D.44001 = session->channel;

Renaming statement D.44002 = switch_channel_test_flag (D.44001, 98);

Renaming statement if (D.44002 != 0)



Renaming block #6

Renaming statement switch_core_media_choose_port (session, 1, 0);



Renaming block #7

Renaming statement D.44005 = status;

Renaming statement return D.44005;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement status_5 = switch_core_media_choose_port (session_4(D), 0, 0);



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5

Updating SSA information for statement switch_core_media_check_video_codecs (session_4(D));

Updating SSA information for statement D.44001_7 = session_4(D)->channel;

Updating SSA information for statement D.44002_8 = switch_channel_test_flag (D.44001_7, 98);



Registering new PHI nodes in block #6

Updating SSA information for statement switch_core_media_choose_port (session_4(D), 1, 0);



Registering new PHI nodes in block #7



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)

Affected blocks: 0 2 3 4 5 6 7 


Scope blocks after cleanups:

{ Scope block #0 
  switch_status_t status;

}
switch_core_media_choose_ports (struct switch_core_session_t * session, switch_bool_t audio, switch_bool_t video)
{
  switch_status_t status;
  switch_status_t D.44005;
  uint32_t D.44002;
  struct switch_channel_t * D.44001;

<bb 2>:
  status_2 = 0;
  # DEBUG status => status_2
  if (audio_3(D) != 0)
    goto <bb 3>;
  else
    goto <bb 7>;

<bb 3>:
  status_5 = switch_core_media_choose_port (session_4(D), 0, 0);
  # DEBUG status => status_5
  if (status_5 == 0)
    goto <bb 4>;
  else
    goto <bb 7>;

<bb 4>:
  if (video_6(D) != 0)
    goto <bb 5>;
  else
    goto <bb 7>;

<bb 5>:
  switch_core_media_check_video_codecs (session_4(D));
  D.44001_7 = session_4(D)->channel;
  D.44002_8 = switch_channel_test_flag (D.44001_7, 98);
  if (D.44002_8 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  switch_core_media_choose_port (session_4(D), 1, 0);

<bb 7>:
  # status_1 = PHI <status_2(2), status_5(3), status_5(4), status_5(5), status_5(6)>
  # DEBUG status => status_1
  D.44005_9 = status_1;
  return D.44005_9;

}



;; Function switch_core_media_deactivate_rtp (switch_core_media_deactivate_rtp)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement a_engine = &smh->engines;

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.43953 = v_engine->media_thread;

Renaming statement if (D.43953 != 0B)



Renaming block #6

Renaming statement D.43956 = session->channel;

Renaming statement switch_channel_clear_flag (D.43956, 113);

Renaming statement v_engine->mh.up = 0;

Renaming statement D.43953 = v_engine->media_thread;

Renaming statement switch_thread_join (&st, D.43953);

Renaming statement v_engine->media_thread = 0B;



Renaming block #7

Renaming statement D.43957 = v_engine->rtp_session;

Renaming statement if (D.43957 != 0B)



Renaming block #8

Renaming statement D.43960 = &v_engine->rtp_session;

Renaming statement switch_rtp_destroy (D.43960);



Renaming block #9

Renaming statement D.43962 = v_engine->local_sdp_port;

Renaming statement if (D.43962 != 0)



Renaming block #10

Renaming statement D.43965 = smh->mparams;

Renaming statement D.43966 = D.43965->rtpip;

Renaming statement D.43962 = v_engine->local_sdp_port;

Renaming statement switch_rtp_release_port (D.43966, D.43962);



Renaming block #11

Renaming statement D.43962 = v_engine->local_sdp_port;

Renaming statement if (D.43962 != 0)



Renaming block #12

Renaming statement D.43965 = smh->mparams;

Renaming statement D.43969 = D.43965->remote_ip;

Renaming statement D.43970 = _zstr (D.43969);

Renaming statement if (D.43970 == 0)



Renaming block #13

Renaming statement D.43965 = smh->mparams;

Renaming statement D.43969 = D.43965->remote_ip;

Renaming statement D.43973 = switch_core_media_check_nat (smh, D.43969);

Renaming statement if (D.43973 != 0)



Renaming block #14

Renaming statement D.43962 = v_engine->local_sdp_port;

Renaming statement switch_nat_del_mapping (D.43962, 0);

Renaming statement D.43962 = v_engine->local_sdp_port;

Renaming statement D.43976 = D.43962 + 1;

Renaming statement switch_nat_del_mapping (D.43976, 0);



Renaming block #15

Renaming statement D.43977 = a_engine->rtp_session;

Renaming statement if (D.43977 != 0B)



Renaming block #16

Renaming statement D.43980 = &a_engine->rtp_session;

Renaming statement switch_rtp_destroy (D.43980);



Renaming block #17

Renaming statement D.43982 = a_engine->local_sdp_port;

Renaming statement if (D.43982 != 0)



Renaming block #18

Renaming statement D.43965 = smh->mparams;

Renaming statement D.43966 = D.43965->rtpip;

Renaming statement D.43982 = a_engine->local_sdp_port;

Renaming statement switch_rtp_release_port (D.43966, D.43982);



Renaming block #19

Renaming statement D.43982 = a_engine->local_sdp_port;

Renaming statement if (D.43982 != 0)



Renaming block #20

Renaming statement D.43965 = smh->mparams;

Renaming statement D.43969 = D.43965->remote_ip;

Renaming statement D.43987 = _zstr (D.43969);

Renaming statement if (D.43987 == 0)



Renaming block #21

Renaming statement D.43965 = smh->mparams;

Renaming statement D.43969 = D.43965->remote_ip;

Renaming statement D.43990 = switch_core_media_check_nat (smh, D.43969);

Renaming statement if (D.43990 != 0)



Renaming block #22

Renaming statement D.43982 = a_engine->local_sdp_port;

Renaming statement switch_nat_del_mapping (D.43982, 0);

Renaming statement D.43982 = a_engine->local_sdp_port;

Renaming statement D.43993 = D.43982 + 1;

Renaming statement switch_nat_del_mapping (D.43993, 0);



Renaming block #23



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4554, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.43953_5 = v_engine_4->media_thread;



Registering new PHI nodes in block #6

Updating SSA information for statement D.43956_6 = session_1(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.43956_6, 113);

Updating SSA information for statement v_engine_4->mh.up = 0;

Updating SSA information for statement D.43953_7 = v_engine_4->media_thread;

Updating SSA information for statement switch_thread_join (&st, D.43953_7);

Updating SSA information for statement v_engine_4->media_thread = 0B;



Registering new PHI nodes in block #7

Updating SSA information for statement D.43957_8 = v_engine_4->rtp_session;



Registering new PHI nodes in block #8

Updating SSA information for statement switch_rtp_destroy (D.43960_9);



Registering new PHI nodes in block #9

Updating SSA information for statement D.43962_10 = v_engine_4->local_sdp_port;



Registering new PHI nodes in block #10

Updating SSA information for statement D.43965_11 = smh_2->mparams;

Updating SSA information for statement D.43966_12 = D.43965_11->rtpip;

Updating SSA information for statement D.43962_13 = v_engine_4->local_sdp_port;

Updating SSA information for statement switch_rtp_release_port (D.43966_12, D.43962_13);



Registering new PHI nodes in block #11

Updating SSA information for statement D.43962_14 = v_engine_4->local_sdp_port;



Registering new PHI nodes in block #12

Updating SSA information for statement D.43965_15 = smh_2->mparams;

Updating SSA information for statement D.43969_16 = D.43965_15->remote_ip;

Updating SSA information for statement D.43970_17 = _zstr (D.43969_16);



Registering new PHI nodes in block #13

Updating SSA information for statement D.43965_18 = smh_2->mparams;

Updating SSA information for statement D.43969_19 = D.43965_18->remote_ip;

Updating SSA information for statement D.43973_20 = switch_core_media_check_nat (smh_2, D.43969_19);



Registering new PHI nodes in block #14

Updating SSA information for statement D.43962_21 = v_engine_4->local_sdp_port;

Updating SSA information for statement switch_nat_del_mapping (D.43962_21, 0);

Updating SSA information for statement D.43962_22 = v_engine_4->local_sdp_port;

Updating SSA information for statement switch_nat_del_mapping (D.43976_23, 0);



Registering new PHI nodes in block #15

Updating SSA information for statement D.43977_24 = a_engine_3->rtp_session;



Registering new PHI nodes in block #16

Updating SSA information for statement switch_rtp_destroy (D.43980_25);



Registering new PHI nodes in block #17

Updating SSA information for statement D.43982_26 = a_engine_3->local_sdp_port;



Registering new PHI nodes in block #18

Updating SSA information for statement D.43965_27 = smh_2->mparams;

Updating SSA information for statement D.43966_28 = D.43965_27->rtpip;

Updating SSA information for statement D.43982_29 = a_engine_3->local_sdp_port;

Updating SSA information for statement switch_rtp_release_port (D.43966_28, D.43982_29);



Registering new PHI nodes in block #19

Updating SSA information for statement D.43982_30 = a_engine_3->local_sdp_port;



Registering new PHI nodes in block #20

Updating SSA information for statement D.43965_31 = smh_2->mparams;

Updating SSA information for statement D.43969_32 = D.43965_31->remote_ip;

Updating SSA information for statement D.43987_33 = _zstr (D.43969_32);



Registering new PHI nodes in block #21

Updating SSA information for statement D.43965_34 = smh_2->mparams;

Updating SSA information for statement D.43969_35 = D.43965_34->remote_ip;

Updating SSA information for statement D.43990_36 = switch_core_media_check_nat (smh_2, D.43969_35);



Registering new PHI nodes in block #22

Updating SSA information for statement D.43982_37 = a_engine_3->local_sdp_port;

Updating SSA information for statement switch_nat_del_mapping (D.43982_37, 0);

Updating SSA information for statement D.43982_38 = a_engine_3->local_sdp_port;

Updating SSA information for statement switch_nat_del_mapping (D.43993_39, 0);



Registering new PHI nodes in block #23



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 24
Number of blocks to update: 23 ( 96%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_deactivate_rtp";

  { Scope block #0 
    switch_status_t st;

  }

}
switch_core_media_deactivate_rtp (struct switch_core_session_t * session)
{
  switch_status_t st;
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_deactivate_rtp";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  switch_port_t D.43993;
  int D.43990;
  int D.43987;
  switch_port_t D.43982;
  struct switch_rtp_t * * D.43980;
  struct switch_rtp_t * D.43977;
  switch_port_t D.43976;
  int D.43973;
  int D.43970;
  char * D.43969;
  char * D.43966;
  struct switch_core_media_params_t * D.43965;
  switch_port_t D.43962;
  struct switch_rtp_t * * D.43960;
  struct switch_rtp_t * D.43957;
  struct switch_channel_t * D.43956;
  struct switch_thread_t * D.43953;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4554, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 23>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_3 = &smh_2->engines;
  # DEBUG a_engine => a_engine_3
  v_engine_4 = &smh_2->engines[1];
  # DEBUG v_engine => v_engine_4
  D.43953_5 = v_engine_4->media_thread;
  if (D.43953_5 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.43956_6 = session_1(D)->channel;
  switch_channel_clear_flag (D.43956_6, 113);
  v_engine_4->mh.up = 0;
  D.43953_7 = v_engine_4->media_thread;
  switch_thread_join (&st, D.43953_7);
  v_engine_4->media_thread = 0B;

<bb 7>:
  D.43957_8 = v_engine_4->rtp_session;
  if (D.43957_8 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.43960_9 = &v_engine_4->rtp_session;
  switch_rtp_destroy (D.43960_9);
  goto <bb 11>;

<bb 9>:
  D.43962_10 = v_engine_4->local_sdp_port;
  if (D.43962_10 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.43965_11 = smh_2->mparams;
  D.43966_12 = D.43965_11->rtpip;
  D.43962_13 = v_engine_4->local_sdp_port;
  switch_rtp_release_port (D.43966_12, D.43962_13);

<bb 11>:
  D.43962_14 = v_engine_4->local_sdp_port;
  if (D.43962_14 != 0)
    goto <bb 12>;
  else
    goto <bb 15>;

<bb 12>:
  D.43965_15 = smh_2->mparams;
  D.43969_16 = D.43965_15->remote_ip;
  D.43970_17 = _zstr (D.43969_16);
  if (D.43970_17 == 0)
    goto <bb 13>;
  else
    goto <bb 15>;

<bb 13>:
  D.43965_18 = smh_2->mparams;
  D.43969_19 = D.43965_18->remote_ip;
  D.43973_20 = switch_core_media_check_nat (smh_2, D.43969_19);
  if (D.43973_20 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.43962_21 = v_engine_4->local_sdp_port;
  switch_nat_del_mapping (D.43962_21, 0);
  D.43962_22 = v_engine_4->local_sdp_port;
  D.43976_23 = D.43962_22 + 1;
  switch_nat_del_mapping (D.43976_23, 0);

<bb 15>:
  D.43977_24 = a_engine_3->rtp_session;
  if (D.43977_24 != 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.43980_25 = &a_engine_3->rtp_session;
  switch_rtp_destroy (D.43980_25);
  goto <bb 19>;

<bb 17>:
  D.43982_26 = a_engine_3->local_sdp_port;
  if (D.43982_26 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.43965_27 = smh_2->mparams;
  D.43966_28 = D.43965_27->rtpip;
  D.43982_29 = a_engine_3->local_sdp_port;
  switch_rtp_release_port (D.43966_28, D.43982_29);

<bb 19>:
  D.43982_30 = a_engine_3->local_sdp_port;
  if (D.43982_30 != 0)
    goto <bb 20>;
  else
    goto <bb 23>;

<bb 20>:
  D.43965_31 = smh_2->mparams;
  D.43969_32 = D.43965_31->remote_ip;
  D.43987_33 = _zstr (D.43969_32);
  if (D.43987_33 == 0)
    goto <bb 21>;
  else
    goto <bb 23>;

<bb 21>:
  D.43965_34 = smh_2->mparams;
  D.43969_35 = D.43965_34->remote_ip;
  D.43990_36 = switch_core_media_check_nat (smh_2, D.43969_35);
  if (D.43990_36 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.43982_37 = a_engine_3->local_sdp_port;
  switch_nat_del_mapping (D.43982_37, 0);
  D.43982_38 = a_engine_3->local_sdp_port;
  D.43993_39 = D.43982_38 + 1;
  switch_nat_del_mapping (D.43993_39, 0);

<bb 23>:
  return;

}



;; Function switch_media_handle_destroy (switch_media_handle_destroy)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement a_engine = &smh->engines;

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.46503 = &a_engine->read_codec;

Renaming statement D.46504 = switch_core_codec_ready (D.46503);

Renaming statement if (D.46504 != 0)



Renaming block #6

Renaming statement D.46503 = &a_engine->read_codec;

Renaming statement switch_core_codec_destroy (D.46503);



Renaming block #7

Renaming statement D.46507 = &a_engine->write_codec;

Renaming statement D.46508 = switch_core_codec_ready (D.46507);

Renaming statement if (D.46508 != 0)



Renaming block #8

Renaming statement D.46507 = &a_engine->write_codec;

Renaming statement switch_core_codec_destroy (D.46507);



Renaming block #9

Renaming statement D.46511 = &v_engine->read_codec;

Renaming statement D.46512 = switch_core_codec_ready (D.46511);

Renaming statement if (D.46512 != 0)



Renaming block #10

Renaming statement D.46511 = &v_engine->read_codec;

Renaming statement switch_core_codec_destroy (D.46511);



Renaming block #11

Renaming statement D.46515 = &v_engine->write_codec;

Renaming statement D.46516 = switch_core_codec_ready (D.46515);

Renaming statement if (D.46516 != 0)



Renaming block #12

Renaming statement D.46515 = &v_engine->write_codec;

Renaming statement switch_core_codec_destroy (D.46515);



Renaming block #13

Renaming statement switch_core_session_unset_read_codec (session);

Renaming statement switch_core_session_unset_write_codec (session);

Renaming statement switch_core_media_deactivate_rtp (session);



Renaming block #14



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 1378, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.46504_6 = switch_core_codec_ready (D.46503_5);



Registering new PHI nodes in block #6

Updating SSA information for statement switch_core_codec_destroy (D.46503_7);



Registering new PHI nodes in block #7

Updating SSA information for statement D.46508_9 = switch_core_codec_ready (D.46507_8);



Registering new PHI nodes in block #8

Updating SSA information for statement switch_core_codec_destroy (D.46507_10);



Registering new PHI nodes in block #9

Updating SSA information for statement D.46512_12 = switch_core_codec_ready (D.46511_11);



Registering new PHI nodes in block #10

Updating SSA information for statement switch_core_codec_destroy (D.46511_13);



Registering new PHI nodes in block #11

Updating SSA information for statement D.46516_15 = switch_core_codec_ready (D.46515_14);



Registering new PHI nodes in block #12

Updating SSA information for statement switch_core_codec_destroy (D.46515_16);



Registering new PHI nodes in block #13

Updating SSA information for statement switch_core_session_unset_read_codec (session_1(D));

Updating SSA information for statement switch_core_session_unset_write_codec (session_1(D));

Updating SSA information for statement switch_core_media_deactivate_rtp (session_1(D));



Registering new PHI nodes in block #14



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 15
Number of blocks to update: 14 ( 93%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  static const char __PRETTY_FUNCTION__[28] = "switch_media_handle_destroy";

}
switch_media_handle_destroy (struct switch_core_session_t * session)
{
  static const char __PRETTY_FUNCTION__[28] = "switch_media_handle_destroy";
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  switch_bool_t D.46516;
  struct switch_codec_t * D.46515;
  switch_bool_t D.46512;
  struct switch_codec_t * D.46511;
  switch_bool_t D.46508;
  struct switch_codec_t * D.46507;
  switch_bool_t D.46504;
  struct switch_codec_t * D.46503;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 1378, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 14>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_3 = &smh_2->engines;
  # DEBUG a_engine => a_engine_3
  v_engine_4 = &smh_2->engines[1];
  # DEBUG v_engine => v_engine_4
  D.46503_5 = &a_engine_3->read_codec;
  D.46504_6 = switch_core_codec_ready (D.46503_5);
  if (D.46504_6 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.46503_7 = &a_engine_3->read_codec;
  switch_core_codec_destroy (D.46503_7);

<bb 7>:
  D.46507_8 = &a_engine_3->write_codec;
  D.46508_9 = switch_core_codec_ready (D.46507_8);
  if (D.46508_9 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.46507_10 = &a_engine_3->write_codec;
  switch_core_codec_destroy (D.46507_10);

<bb 9>:
  D.46511_11 = &v_engine_4->read_codec;
  D.46512_12 = switch_core_codec_ready (D.46511_11);
  if (D.46512_12 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.46511_13 = &v_engine_4->read_codec;
  switch_core_codec_destroy (D.46511_13);

<bb 11>:
  D.46515_14 = &v_engine_4->write_codec;
  D.46516_15 = switch_core_codec_ready (D.46515_14);
  if (D.46516_15 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  D.46515_16 = &v_engine_4->write_codec;
  switch_core_codec_destroy (D.46515_16);

<bb 13>:
  switch_core_session_unset_read_codec (session_1(D));
  switch_core_session_unset_write_codec (session_1(D));
  switch_core_media_deactivate_rtp (session_1(D));

<bb 14>:
  return;

}



;; Function switch_core_session_wake_video_thread (switch_core_session_wake_video_thread)



Renaming block #0



Renaming block #2

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #3

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.43940 = v_engine->rtp_session;

Renaming statement if (D.43940 == 0B)



Renaming block #4

Renaming statement D.43943 = v_engine->mh.cond_mutex;

Renaming statement D.43944 = switch_mutex_trylock (D.43943);

Renaming statement if (D.43944 == 0)



Renaming block #5

Renaming statement D.43947 = v_engine->mh.cond;

Renaming statement switch_thread_cond_broadcast (D.43947);

Renaming statement D.43943 = v_engine->mh.cond_mutex;

Renaming statement switch_mutex_unlock (D.43943);



Renaming block #6



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #3

Updating SSA information for statement D.43940_4 = v_engine_3->rtp_session;



Registering new PHI nodes in block #4

Updating SSA information for statement D.43943_5 = v_engine_3->mh.cond_mutex;

Updating SSA information for statement D.43944_6 = switch_mutex_trylock (D.43943_5);



Registering new PHI nodes in block #5

Updating SSA information for statement D.43947_7 = v_engine_3->mh.cond;

Updating SSA information for statement switch_thread_cond_broadcast (D.43947_7);

Updating SSA information for statement D.43943_8 = v_engine_3->mh.cond_mutex;

Updating SSA information for statement switch_mutex_unlock (D.43943_8);



Registering new PHI nodes in block #6



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 7
Number of blocks to update: 6 ( 86%)

Affected blocks: 0 2 3 4 5 6 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;

}
switch_core_session_wake_video_thread (struct switch_core_session_t * session)
{
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  struct switch_thread_cond_t * D.43947;
  switch_status_t D.43944;
  struct switch_mutex_t * D.43943;
  struct switch_rtp_t * D.43940;

<bb 2>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 6>;
  else
    goto <bb 3>;

<bb 3>:
  v_engine_3 = &smh_2->engines[1];
  # DEBUG v_engine => v_engine_3
  D.43940_4 = v_engine_3->rtp_session;
  if (D.43940_4 == 0B)
    goto <bb 6>;
  else
    goto <bb 4>;

<bb 4>:
  D.43943_5 = v_engine_3->mh.cond_mutex;
  D.43944_6 = switch_mutex_trylock (D.43943_5);
  if (D.43944_6 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.43947_7 = v_engine_3->mh.cond;
  switch_thread_cond_broadcast (D.43947_7);
  D.43943_8 = v_engine_3->mh.cond_mutex;
  switch_mutex_unlock (D.43943_8);

<bb 6>:
  return;

}



;; Function switch_core_media_activate_rtp (switch_core_media_activate_rtp)



Renaming block #0



Renaming block #2

Renaming statement val = 0B;

Renaming statement status = 0;

Renaming statement timer_name = 0B;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.43070 = 1;



Renaming block #6

Renaming statement a_engine = &smh->engines;

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.43073 = session->channel;

Renaming statement D.43074 = switch_channel_check_signal (D.43073, 1);

Renaming statement if (D.43074 != 0)



Renaming block #7

Renaming statement D.43073 = session->channel;

Renaming statement D.43076 = switch_channel_get_state (D.43073);

Renaming statement if (D.43076 > 9)



Renaming block #9

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43078 = switch_rtp_ready (D.43077);

Renaming statement if (D.43078 != 0)



Renaming block #10

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement switch_rtp_reset_media_timer (D.43077);



Renaming block #11

Renaming statement D.43081 = a_engine->crypto_type;

Renaming statement if (D.43081 != 9)



Renaming block #12

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_set_flag_value (D.43073, 92, 1);



Renaming block #13

Renaming statement D.43073 = session->channel;

Renaming statement D.43084 = switch_channel_test_flag (D.43073, 15);

Renaming statement if (D.43084 != 0)



Renaming block #14

Renaming statement status = 0;



Renaming block #15

Renaming statement D.43073 = session->channel;

Renaming statement D.43087 = switch_channel_test_flag (D.43073, 103);

Renaming statement if (D.43087 == 0)



Renaming block #16

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43090 = switch_rtp_ready (D.43077);

Renaming statement if (D.43090 != 0)



Renaming block #17

Renaming statement D.43073 = session->channel;

Renaming statement D.43093 = switch_channel_test_flag (D.43073, 98);

Renaming statement if (D.43093 != 0)



Renaming block #18

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43097 = switch_rtp_ready (D.43096);

Renaming statement if (D.43097 == 0)



Renaming block #19

Renaming statement status = 0;



Renaming block #20

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43100 = D.43099->codec_flags;

Renaming statement status = switch_core_media_set_codec (session, 0, D.43100);

Renaming statement if (status != 0)



Renaming block #21

Renaming statement switch_core_media_set_video_codec (session, 0);

Renaming statement D.43102 = flags[13];

Renaming statement D.43103 = D.43102 + 1;

Renaming statement flags[13] = D.43103;

Renaming statement D.43106 = switch_media_handle_test_media_flag (smh, 10);

Renaming statement if (D.43106 == 0)



Renaming block #22

Renaming statement D.43073 = session->channel;

Renaming statement D.43109 = switch_channel_test_flag (D.43073, 106);

Renaming statement if (D.43109 == 0)



Renaming block #23

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "disable_rtp_auto_adjust", 1, -1);

Renaming statement if (val == 0B)



Renaming block #24

Renaming statement D.43113 = switch_true (val);

Renaming statement if (D.43113 == 0)



Renaming block #25

Renaming statement D.43114 = flags[7];

Renaming statement D.43115 = D.43114 + 1;

Renaming statement flags[7] = D.43115;



Renaming block #26

Renaming statement D.43118 = switch_media_handle_test_media_flag (smh, 11);

Renaming statement if (D.43118 != 0)



Renaming block #27

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "pass_rfc2833", 1, -1);

Renaming statement if (val != 0B)



Renaming block #28

Renaming statement D.43121 = switch_true (val);

Renaming statement if (D.43121 != 0)



Renaming block #29

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_set_flag_value (D.43073, 100, 1);



Renaming block #30

Renaming statement D.43124 = switch_media_handle_test_media_flag (smh, 12);

Renaming statement if (D.43124 != 0)



Renaming block #31

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtp_autoflush", 1, -1);

Renaming statement if (val != 0B)



Renaming block #32

Renaming statement D.43127 = switch_true (val);

Renaming statement if (D.43127 != 0)



Renaming block #33

Renaming statement D.43128 = flags[22];

Renaming statement D.43129 = D.43128 + 1;

Renaming statement flags[22] = D.43129;



Renaming block #34

Renaming statement D.43132 = switch_media_handle_test_media_flag (smh, 13);

Renaming statement if (D.43132 == 0)



Renaming block #35

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtp_rewrite_timestamps", 1, -1);

Renaming statement if (val == 0B)



Renaming block #36

Renaming statement D.43136 = switch_true (val);

Renaming statement if (D.43136 == 0)



Renaming block #37

Renaming statement D.43137 = flags[8];

Renaming statement D.43138 = D.43137 + 1;

Renaming statement flags[8] = D.43138;



Renaming block #38

Renaming statement D.43139 = switch_media_handle_test_media_flag (smh, 9);

Renaming statement if (D.43139 != 0)



Renaming block #39

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43099->cng_pt = 0;



Renaming block #40

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43143 = D.43099->cng_pt;

Renaming statement if (D.43143 != 0)



Renaming block #41

Renaming statement D.43146 = flags[16];

Renaming statement D.43147 = D.43146 + 1;

Renaming statement flags[16] = D.43147;



Renaming block #42

Renaming statement D.43148 = a_engine->read_impl.iananame;

Renaming statement D.43149 = strcasecmp (D.43148, "L16");

Renaming statement if (D.43149 == 0)



Renaming block #43

Renaming statement D.43152 = flags[14];

Renaming statement D.43153 = D.43152 + 1;

Renaming statement flags[14] = D.43153;



Renaming block #44

Renaming statement D.43152 = flags[14];

Renaming statement if (D.43152 != 0)



Renaming block #45

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtp_disable_byteswap", 1, -1);

Renaming statement if (val != 0B)



Renaming block #46

Renaming statement D.43158 = switch_true (val);

Renaming statement if (D.43158 != 0)



Renaming block #47



Renaming block #48

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement if (D.43077 != 0B)



Renaming block #49

Renaming statement D.43073 = session->channel;

Renaming statement D.43163 = switch_channel_test_flag (D.43073, 103);

Renaming statement if (D.43163 != 0)



Renaming block #50

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement remote_host = switch_rtp_get_remote_host (D.43077);

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement remote_port = switch_rtp_get_remote_port (D.43077);

Renaming statement D.43167 = remote_host != 0B;

Renaming statement D.43168 = remote_port != 0;

Renaming statement D.43169 = D.43167 && D.43168;

Renaming statement if (D.43169 != 0)



Renaming block #51

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement D.39348 = __builtin_strcmp (remote_host, D.43172);

Renaming statement if (D.39348 == 0)



Renaming block #52

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43174 = D.43171->remote_sdp_port;

Renaming statement if (D.43174 == remote_port)



Renaming block #53

Renaming statement D.43073 = session->channel;

Renaming statement D.43176 = switch_channel_get_name (D.43073);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4825, session, 7, "Audio params are unchanged for %s.\n", D.43176);



Renaming block #54

Renaming statement D.43073 = session->channel;

Renaming statement D.43177 = switch_channel_get_name (D.43073);

Renaming statement D.43178 = (int) remote_port;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43174 = D.43171->remote_sdp_port;

Renaming statement D.43179 = (int) D.43174;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4830, session, 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.43177, remote_host, D.43178, D.43172, D.43179);

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43174 = D.43171->remote_sdp_port;

Renaming statement D.43179 = (int) D.43174;

Renaming statement switch_snprintf (&tmp, 50, "%d", D.43179);

Renaming statement D.43073 = session->channel;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.43073, "remote_media_ip", D.43172, 1);

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.43073, "remote_media_port", &tmp, 1);



Renaming block #55

Renaming statement D.43073 = session->channel;

Renaming statement D.43180 = switch_channel_test_flag (D.43073, 29);

Renaming statement if (D.43180 == 0)



Renaming block #56

Renaming statement D.43073 = session->channel;

Renaming statement D.43183 = switch_channel_get_name (D.43073);

Renaming statement D.43184 = a_engine->local_sdp_ip;

Renaming statement D.43185 = a_engine->local_sdp_port;

Renaming statement D.43186 = (int) D.43185;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43174 = D.43171->remote_sdp_port;

Renaming statement D.43179 = (int) D.43174;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43187 = D.43171->agreed_pt;

Renaming statement D.43188 = (int) D.43187;

Renaming statement D.43189 = a_engine->read_impl.microseconds_per_packet;

Renaming statement D.43190 = D.43189 / 1000;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4841, session, 7, "AUDIO RTP [%s] %s port %d -> %s port %d codec: %u ms: %d\n", D.43183, D.43184, D.43186, D.43172, D.43179, D.43188, D.43190);



Renaming block #57

Renaming statement D.43185 = a_engine->local_sdp_port;

Renaming statement D.43186 = (int) D.43185;

Renaming statement switch_snprintf (&tmp, 50, "%d", D.43186);

Renaming statement D.43073 = session->channel;

Renaming statement D.43184 = a_engine->local_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.43073, "local_media_ip", D.43184, 1);

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.43073, "local_media_port", &tmp, 1);

Renaming statement D.43073 = session->channel;

Renaming statement D.43191 = a_engine->adv_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.43073, "advertised_media_ip", D.43191, 1);

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement if (D.43077 != 0B)



Renaming block #58

Renaming statement D.43073 = session->channel;

Renaming statement D.43194 = switch_channel_test_flag (D.43073, 103);

Renaming statement if (D.43194 != 0)



Renaming block #59

Renaming statement rport = 0B;

Renaming statement remote_rtcp_port = a_engine->remote_rtcp_port;

Renaming statement if (remote_rtcp_port == 0)



Renaming block #60

Renaming statement D.43073 = session->channel;

Renaming statement rport = switch_channel_get_variable_dup (D.43073, "rtp_remote_audio_rtcp_port", 1, -1);

Renaming statement if (rport != 0B)



Renaming block #61

Renaming statement D.43201 = atoi (rport);

Renaming statement remote_rtcp_port = (switch_port_t) D.43201;



Renaming block #62

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43174 = D.43171->remote_sdp_port;

Renaming statement D.43202 = switch_rtp_set_remote_address (D.43077, D.43172, D.43174, remote_rtcp_port, 1, &err);

Renaming statement if (D.43202 != 0)



Renaming block #63

Renaming statement err.45 = err;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4868, session, 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.45);



Renaming block #64

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43174 = D.43171->remote_sdp_port;

Renaming statement D.43179 = (int) D.43174;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4870, session, 7, "AUDIO RTP CHANGING DEST TO: [%s:%d]\n", D.43172, D.43179);

Renaming statement D.43073 = session->channel;

Renaming statement D.43207 = switch_channel_test_flag (D.43073, 96);

Renaming statement if (D.43207 != 0)



Renaming block #65

Renaming statement __s2_len = 7;

Renaming statement if (__s2_len <= 3)



Renaming block #66

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement __s1 = D.43171->remote_sdp_ip;

Renaming statement D.43213 = *__s1;

Renaming statement D.43214 = (int) D.43213;

Renaming statement D.43215 = "0.0.0.0";

Renaming statement D.43216 = MEM[(const unsigned char *)D.43215];

Renaming statement D.43217 = (int) D.43216;

Renaming statement __result = D.43214 - D.43217;

Renaming statement D.43218 = __s2_len != 0;

Renaming statement D.43219 = __result == 0;

Renaming statement D.43220 = D.43218 && D.43219;

Renaming statement if (D.43220 != 0)



Renaming block #67

Renaming statement D.43223 = __s1 + 1;

Renaming statement D.43224 = *D.43223;

Renaming statement D.43225 = (int) D.43224;

Renaming statement D.43226 = &"0.0.0.0"[1];

Renaming statement D.43227 = MEM[(const unsigned char *)D.43226];

Renaming statement D.43228 = (int) D.43227;

Renaming statement __result = D.43225 - D.43228;

Renaming statement D.43229 = __s2_len > 1;

Renaming statement D.43219 = __result == 0;

Renaming statement D.43230 = D.43229 && D.43219;

Renaming statement if (D.43230 != 0)



Renaming block #68

Renaming statement D.43233 = __s1 + 2;

Renaming statement D.43234 = *D.43233;

Renaming statement D.43235 = (int) D.43234;

Renaming statement D.43236 = &"0.0.0.0"[2];

Renaming statement D.43237 = MEM[(const unsigned char *)D.43236];

Renaming statement D.43238 = (int) D.43237;

Renaming statement __result = D.43235 - D.43238;

Renaming statement D.43239 = __s2_len > 2;

Renaming statement D.43219 = __result == 0;

Renaming statement D.43240 = D.43239 && D.43219;

Renaming statement if (D.43240 != 0)



Renaming block #69

Renaming statement D.43243 = __s1 + 3;

Renaming statement D.43244 = *D.43243;

Renaming statement D.43245 = (int) D.43244;

Renaming statement D.43246 = &"0.0.0.0"[3];

Renaming statement D.43247 = MEM[(const unsigned char *)D.43246];

Renaming statement D.43248 = (int) D.43247;

Renaming statement __result = D.43245 - D.43248;



Renaming block #70

Renaming statement D.39359 = __result;

Renaming statement iftmp.46 = D.39359;



Renaming block #71

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement iftmp.46 = __builtin_strcmp (D.43172, "0.0.0.0");



Renaming block #72

Renaming statement D.39360 = iftmp.46;

Renaming statement if (D.39360 != 0)



Renaming block #73

Renaming statement switch_core_media_toggle_hold (session, 0);



Renaming block #74

Renaming statement D.43254 = switch_media_handle_test_media_flag (smh, 10);

Renaming statement if (D.43254 == 0)



Renaming block #75

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "disable_rtp_auto_adjust", 1, -1);

Renaming statement if (val == 0B)



Renaming block #76

Renaming statement D.43258 = switch_true (val);

Renaming statement if (D.43258 == 0)



Renaming block #77

Renaming statement D.43073 = session->channel;

Renaming statement D.43259 = switch_channel_test_flag (D.43073, 106);

Renaming statement if (D.43259 == 0)



Renaming block #78

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.43077, 7);



Renaming block #79

Renaming statement D.43262 = session != 0B;

Renaming statement D.43263 = a_engine != 0B;

Renaming statement D.43264 = D.43262 && D.43263;

Renaming statement if (D.43264 != 0)



Renaming block #80

Renaming statement check_dtls_reinvite (session, a_engine);



Renaming block #81

Renaming statement D.43073 = session->channel;

Renaming statement D.43267 = switch_channel_test_flag (D.43073, 29);

Renaming statement if (D.43267 != 0)



Renaming block #82

Renaming statement switch_core_media_proxy_remote_addr (session, 0B);

Renaming statement D.43102 = flags[13];

Renaming statement D.43103 = D.43102 + 1;

Renaming statement flags[13] = D.43103;

Renaming statement D.43270 = flags[19];

Renaming statement D.43271 = D.43270 + 1;

Renaming statement flags[19] = D.43271;

Renaming statement D.43274 = switch_media_handle_test_media_flag (smh, 10);

Renaming statement if (D.43274 == 0)



Renaming block #83

Renaming statement D.43073 = session->channel;

Renaming statement D.43277 = switch_channel_test_flag (D.43073, 106);

Renaming statement if (D.43277 == 0)



Renaming block #84

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "disable_rtp_auto_adjust", 1, -1);

Renaming statement if (val == 0B)



Renaming block #85

Renaming statement D.43281 = switch_true (val);

Renaming statement if (D.43281 == 0)



Renaming block #86

Renaming statement D.43114 = flags[7];

Renaming statement D.43115 = D.43114 + 1;

Renaming statement flags[7] = D.43115;



Renaming block #87

Renaming statement timer_name = 0B;

Renaming statement D.43073 = session->channel;

Renaming statement D.43282 = switch_channel_get_name (D.43073);

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43174 = D.43171->remote_sdp_port;

Renaming statement D.43179 = (int) D.43174;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43174 = D.43171->remote_sdp_port;

Renaming statement D.43179 = (int) D.43174;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43187 = D.43171->agreed_pt;

Renaming statement D.43188 = (int) D.43187;

Renaming statement D.43189 = a_engine->read_impl.microseconds_per_packet;

Renaming statement D.43190 = D.43189 / 1000;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4906, session, 7, "PROXY AUDIO RTP [%s] %s:%d->%s:%d codec: %u ms: %d\n", D.43282, D.43172, D.43179, D.43172, D.43179, D.43188, D.43190);

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43283 = switch_rtp_ready (D.43077);

Renaming statement if (D.43283 != 0)



Renaming block #88

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43187 = D.43171->agreed_pt;

Renaming statement switch_rtp_set_default_payload (D.43077, D.43187);



Renaming block #89

Renaming statement D.43099 = smh->mparams;

Renaming statement timer_name = D.43099->timer_name;

Renaming statement D.43073 = session->channel;

Renaming statement var = switch_channel_get_variable_dup (D.43073, "rtp_timer_name", 1, -1);

Renaming statement if (var != 0B)



Renaming block #90

Renaming statement timer_name = var;



Renaming block #91

Renaming statement D.43073 = session->channel;

Renaming statement D.43291 = switch_channel_check_signal (D.43073, 1);

Renaming statement if (D.43291 != 0)



Renaming block #92

Renaming statement D.43073 = session->channel;

Renaming statement D.43293 = switch_channel_get_state (D.43073);

Renaming statement if (D.43293 <= 9)



Renaming block #93

Renaming statement D.43184 = a_engine->local_sdp_ip;

Renaming statement D.43185 = a_engine->local_sdp_port;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43174 = D.43171->remote_sdp_port;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43187 = D.43171->agreed_pt;

Renaming statement D.43294 = a_engine->read_impl.samples_per_packet;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43295 = D.43171->codec_ms;

Renaming statement D.43296 = D.43295 * 1000;

Renaming statement D.43297 = switch_core_session_get_pool (session);

Renaming statement D.43298 = switch_rtp_new (D.43184, D.43185, D.43172, D.43174, D.43187, D.43294, D.43296, &flags, timer_name, &err, D.43297);

Renaming statement a_engine->rtp_session = D.43298;

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43299 = switch_rtp_ready (D.43077);

Renaming statement if (D.43299 != 0)



Renaming block #94

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43302 = &a_engine->payload_map;

Renaming statement switch_rtp_set_payload_map (D.43077, D.43302);



Renaming block #95

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43303 = switch_rtp_ready (D.43077);

Renaming statement if (D.43303 != 0)



Renaming block #96

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43306 = D.43099->vflags;

Renaming statement D.43307 = (uint8_t) D.43306;

Renaming statement vad_in = D.43307 & 1;

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43306 = D.43099->vflags;

Renaming statement D.43307 = (uint8_t) D.43306;

Renaming statement vad_out = D.43307 & 2;

Renaming statement D.43073 = session->channel;

Renaming statement D.43308 = switch_channel_direction (D.43073);

Renaming statement inb = D.43308 == 0;

Renaming statement D.43309 = &a_engine->read_mutex;

Renaming statement D.43310 = switch_core_session_get_pool (session);

Renaming statement switch_mutex_init (D.43309, 1, D.43310);

Renaming statement D.43073 = session->channel;

Renaming statement ssrc = switch_channel_get_variable_dup (D.43073, "rtp_use_ssrc", 1, -1);

Renaming statement if (ssrc != 0B)



Renaming block #97

Renaming statement ssrc_ul = strtoul (ssrc, 0B, 10);

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement switch_rtp_set_ssrc (D.43077, ssrc_ul);

Renaming statement a_engine->ssrc = ssrc_ul;



Renaming block #98

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43314 = a_engine->ssrc;

Renaming statement switch_rtp_set_ssrc (D.43077, D.43314);



Renaming block #99

Renaming statement D.43315 = a_engine->remote_ssrc;

Renaming statement if (D.43315 != 0)



Renaming block #100

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43315 = a_engine->remote_ssrc;

Renaming statement switch_rtp_set_remote_ssrc (D.43077, D.43315);



Renaming block #101

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_set_flag_value (D.43073, 36, 1);

Renaming statement D.43073 = session->channel;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43187 = D.43171->agreed_pt;

Renaming statement D.43188 = (int) D.43187;

Renaming statement switch_channel_set_variable_printf (D.43073, "rtp_use_pt", "%d", D.43188);

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtp_enable_vad_in", 1, -1);

Renaming statement if (val != 0B)



Renaming block #102

Renaming statement D.43320 = switch_true (val);

Renaming statement if (D.43320 != 0)



Renaming block #103

Renaming statement vad_in = 1;



Renaming block #104

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtp_enable_vad_out", 1, -1);

Renaming statement if (val != 0B)



Renaming block #105

Renaming statement D.43325 = switch_true (val);

Renaming statement if (D.43325 != 0)



Renaming block #106

Renaming statement vad_out = 1;



Renaming block #107

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtp_disable_vad_in", 1, -1);

Renaming statement if (val != 0B)



Renaming block #108

Renaming statement D.43330 = switch_true (val);

Renaming statement if (D.43330 != 0)



Renaming block #109

Renaming statement vad_in = 0;



Renaming block #110

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtp_disable_vad_out", 1, -1);

Renaming statement if (val != 0B)



Renaming block #111

Renaming statement D.43335 = switch_true (val);

Renaming statement if (D.43335 != 0)



Renaming block #112

Renaming statement vad_out = 0;



Renaming block #113

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43338 = switch_rtp_get_ssrc (D.43077);

Renaming statement a_engine->ssrc = D.43338;

Renaming statement D.43073 = session->channel;

Renaming statement D.43314 = a_engine->ssrc;

Renaming statement switch_channel_set_variable_printf (D.43073, "rtp_use_ssrc", "%u", D.43314);

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43339 = D.43099->auto_rtp_bugs;

Renaming statement D.43340 = D.43339 & 4;

Renaming statement if (D.43340 != 0)



Renaming block #114

Renaming statement D.43343 = a_engine->rtp_bugs;

Renaming statement D.43344 = D.43343 | 4;

Renaming statement a_engine->rtp_bugs = D.43344;



Renaming block #115

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtp_manual_rtp_bugs", 1, -1);

Renaming statement if (val != 0B)



Renaming block #116

Renaming statement D.43347 = &a_engine->rtp_bugs;

Renaming statement switch_core_media_parse_rtp_bugs (D.43347, val);



Renaming block #117

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43343 = a_engine->rtp_bugs;

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43348 = D.43099->manual_rtp_bugs;

Renaming statement D.43349 = D.43343 | D.43348;

Renaming statement switch_rtp_intentional_bugs (D.43077, D.43349);

Renaming statement D.43352 = vad_in != 0;

Renaming statement D.43353 = inb != 0;

Renaming statement D.43354 = D.43352 && D.43353;

Renaming statement if (D.43354 != 0)



Renaming block #118

Renaming statement D.43356 = vad_out != 0;

Renaming statement D.43357 = inb == 0;

Renaming statement D.43358 = D.43356 && D.43357;

Renaming statement if (D.43358 != 0)



Renaming block #119

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43359 = &a_engine->read_codec;

Renaming statement switch_rtp_enable_vad (D.43077, session, D.43359, 7);

Renaming statement D.43360 = switch_core_session_get_channel (session);

Renaming statement D.43361 = switch_channel_get_name (D.43360);

Renaming statement if (vad_in != 0)



Renaming block #120

Renaming statement iftmp.47 = "in";



Renaming block #121

Renaming statement iftmp.47 = "";



Renaming block #122

Renaming statement if (vad_out != 0)



Renaming block #123

Renaming statement iftmp.48 = "out";



Renaming block #124

Renaming statement iftmp.48 = "";



Renaming block #125

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5001, session, 7, "AUDIO RTP Engage VAD for %s ( %s %s )\n", D.43361, iftmp.47, iftmp.48);



Renaming block #126

Renaming statement D.43370 = a_engine->ice_in.chosen[0];

Renaming statement D.43371 = a_engine->ice_in.cands[D.43370][0].ready;

Renaming statement if (D.43371 != 0)



Renaming block #127

Renaming statement gen_ice (session, 0, 0B, 0);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5010, session, 6, "Activating Audio ICE\n");

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43374 = a_engine->ice_in.ufrag;

Renaming statement D.43375 = a_engine->ice_out.ufrag;

Renaming statement D.43376 = a_engine->ice_out.pwd;

Renaming statement D.43377 = a_engine->ice_in.pwd;

Renaming statement D.43379 = switch_ice_direction (session);

Renaming statement if (D.43379 == 1)



Renaming block #128

Renaming statement iftmp.49 = 2;



Renaming block #129

Renaming statement iftmp.49 = 6;



Renaming block #130

Renaming statement D.43383 = &a_engine->ice_in;

Renaming statement switch_rtp_activate_ice (D.43077, D.43374, D.43375, D.43376, D.43377, 0, iftmp.49, D.43383);



Renaming block #131

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtcp_audio_interval_msec", 1, -1);

Renaming statement if (val != 0B)



Renaming block #132

Renaming statement D.43099 = smh->mparams;

Renaming statement val = D.43099->rtcp_audio_interval_msec;

Renaming statement if (val != 0B)



Renaming block #133

Renaming statement D.43073 = session->channel;

Renaming statement rport = switch_channel_get_variable_dup (D.43073, "rtp_remote_audio_rtcp_port", 1, -1);

Renaming statement remote_rtcp_port = a_engine->remote_rtcp_port;

Renaming statement D.43387 = remote_rtcp_port == 0;

Renaming statement D.43388 = rport != 0B;

Renaming statement D.43389 = D.43387 && D.43388;

Renaming statement if (D.43389 != 0)



Renaming block #134

Renaming statement D.43392 = atoi (rport);

Renaming statement remote_rtcp_port = (switch_port_t) D.43392;



Renaming block #135

Renaming statement D.43393 = strcasecmp (val, "passthru");

Renaming statement if (D.43393 == 0)



Renaming block #136

Renaming statement D.43396 = (int) remote_rtcp_port;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5043, session, 6, "Activating RTCP PASSTHRU PORT %d\n", D.43396);

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43397 = a_engine->rtcp_mux;

Renaming statement D.43398 = D.43397 > 0;

Renaming statement switch_rtp_activate_rtcp (D.43077, -1, remote_rtcp_port, D.43398);



Renaming block #137

Renaming statement interval = atoi (val);

Renaming statement interval.50 = (unsigned int) interval;

Renaming statement D.43401 = interval.50 + 4294967196;

Renaming statement if (D.43401 > 499900)



Renaming block #138

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5048, session, 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval);

Renaming statement interval = 10000;



Renaming block #139

Renaming statement D.43396 = (int) remote_rtcp_port;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5053, session, 6, "Activating RTCP PORT %d\n", D.43396);

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43397 = a_engine->rtcp_mux;

Renaming statement D.43398 = D.43397 > 0;

Renaming statement switch_rtp_activate_rtcp (D.43077, interval, remote_rtcp_port, D.43398);



Renaming block #140

Renaming statement D.43404 = a_engine->ice_in.chosen[1];

Renaming statement D.43405 = a_engine->ice_in.cands[D.43404][1].ready;

Renaming statement if (D.43405 != 0)



Renaming block #141

Renaming statement D.43397 = a_engine->rtcp_mux;

Renaming statement if (D.43397 > 0)



Renaming block #142

Renaming statement D.43404 = a_engine->ice_in.chosen[1];

Renaming statement D.43411 = a_engine->ice_in.cands[D.43404][1].con_addr;

Renaming statement D.43370 = a_engine->ice_in.chosen[0];

Renaming statement D.43412 = a_engine->ice_in.cands[D.43370][0].con_addr;

Renaming statement D.39377 = __builtin_strcmp (D.43411, D.43412);

Renaming statement if (D.39377 == 0)



Renaming block #143

Renaming statement D.43404 = a_engine->ice_in.chosen[1];

Renaming statement D.43414 = a_engine->ice_in.cands[D.43404][1].con_port;

Renaming statement D.43370 = a_engine->ice_in.chosen[0];

Renaming statement D.43415 = a_engine->ice_in.cands[D.43370][0].con_port;

Renaming statement if (D.43414 == D.43415)



Renaming block #144

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5061, session, 6, "Skipping RTCP ICE (Same as RTP)\n");



Renaming block #145

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5063, session, 6, "Activating RTCP ICE\n");

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43374 = a_engine->ice_in.ufrag;

Renaming statement D.43375 = a_engine->ice_out.ufrag;

Renaming statement D.43376 = a_engine->ice_out.pwd;

Renaming statement D.43377 = a_engine->ice_in.pwd;

Renaming statement D.43418 = switch_ice_direction (session);

Renaming statement if (D.43418 == 1)



Renaming block #146

Renaming statement iftmp.51 = 2;



Renaming block #147

Renaming statement iftmp.51 = 6;



Renaming block #148

Renaming statement D.43383 = &a_engine->ice_in;

Renaming statement switch_rtp_activate_ice (D.43077, D.43374, D.43375, D.43376, D.43377, 1, iftmp.51, D.43383);



Renaming block #149

Renaming statement D.43422 = &a_engine->local_dtls_fingerprint.str;

Renaming statement D.43423 = _zstr (D.43422);

Renaming statement if (D.43423 == 0)



Renaming block #150

Renaming statement D.43426 = switch_rtp_has_dtls ();

Renaming statement if (D.43426 != 0)



Renaming block #151

Renaming statement D.43429 = smh->session;

Renaming statement D.43430 = dtls_ok (D.43429);

Renaming statement if (D.43430 != 0)



Renaming block #152

Renaming statement D.43429 = smh->session;

Renaming statement D.43434 = D.43429->channel;

Renaming statement D.43435 = switch_channel_direction (D.43434);

Renaming statement if (D.43435 == 0)



Renaming block #153

Renaming statement iftmp.52 = 1;



Renaming block #154

Renaming statement iftmp.52 = 2;



Renaming block #155

Renaming statement dtype = iftmp.52;

Renaming statement D.43429 = smh->session;

Renaming statement D.43434 = D.43429->channel;

Renaming statement D.43439 = switch_channel_test_flag (D.43434, 112);

Renaming statement if (D.43439 != 0)



Renaming block #156

Renaming statement if (dtype == 1)



Renaming block #157

Renaming statement iftmp.53 = 2;



Renaming block #158

Renaming statement iftmp.53 = 1;



Renaming block #159

Renaming statement dtype = iftmp.53;



Renaming block #160

Renaming statement xtype = 4;

Renaming statement D.43397 = a_engine->rtcp_mux;

Renaming statement if (D.43397 > 0)



Renaming block #161

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43448 = D.43099->rtcp_audio_interval_msec;

Renaming statement if (D.43448 != 0B)



Renaming block #162

Renaming statement xtype = xtype | 8;



Renaming block #163

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43451 = &a_engine->local_dtls_fingerprint;

Renaming statement D.43452 = &a_engine->remote_dtls_fingerprint;

Renaming statement D.43453 = dtype | xtype;

Renaming statement switch_rtp_add_dtls (D.43077, D.43451, D.43452, D.43453);

Renaming statement D.43397 = a_engine->rtcp_mux;

Renaming statement if (D.43397 <= 0)



Renaming block #164

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43448 = D.43099->rtcp_audio_interval_msec;

Renaming statement if (D.43448 != 0B)



Renaming block #165

Renaming statement xtype = 8;

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43451 = &a_engine->local_dtls_fingerprint;

Renaming statement D.43452 = &a_engine->remote_dtls_fingerprint;

Renaming statement D.43453 = dtype | xtype;

Renaming statement switch_rtp_add_dtls (D.43077, D.43451, D.43452, D.43453);



Renaming block #166

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "jitterbuffer_msec", 1, -1);

Renaming statement if (val != 0B)



Renaming block #167

Renaming statement D.43099 = smh->mparams;

Renaming statement val = D.43099->jb_msec;

Renaming statement if (val != 0B)



Renaming block #168

Renaming statement jb_msec = atoi (val);

Renaming statement maxlen = 0;

Renaming statement max_drift = 0;

Renaming statement p = __builtin_strchr (val, 58);

Renaming statement if (p != 0B)



Renaming block #169

Renaming statement p = p + 1;

Renaming statement maxlen = atoi (p);

Renaming statement q = __builtin_strchr (p, 58);

Renaming statement if (q != 0B)



Renaming block #170

Renaming statement q = q + 1;

Renaming statement D.43465 = atoi (q);

Renaming statement max_drift = ABS_EXPR <D.43465>;



Renaming block #171

Renaming statement jb_msec.54 = (unsigned int) jb_msec;

Renaming statement D.43467 = jb_msec.54 + 9;

Renaming statement if (D.43467 <= 8)



Renaming block #172

Renaming statement D.43470 = a_engine->read_codec.implementation;

Renaming statement D.43471 = D.43470->microseconds_per_packet;

Renaming statement D.43472 = D.43471 / 1000;

Renaming statement D.43473 = ABS_EXPR <jb_msec>;

Renaming statement jb_msec = D.43472 * D.43473;



Renaming block #173

Renaming statement jb_msec.54 = (unsigned int) jb_msec;

Renaming statement D.43474 = jb_msec.54 + 4294967276;

Renaming statement if (D.43474 > 9980)



Renaming block #174

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5125, session, 3, "Invalid Jitterbuffer spec [%d] must be between 20 and 10000\n", jb_msec);



Renaming block #175

Renaming statement maxqlen = 50;

Renaming statement D.43189 = a_engine->read_impl.microseconds_per_packet;

Renaming statement D.43190 = D.43189 / 1000;

Renaming statement qlen = jb_msec / D.43190;

Renaming statement if (qlen <= 0)



Renaming block #176

Renaming statement qlen = 3;



Renaming block #177

Renaming statement if (maxlen != 0)



Renaming block #178

Renaming statement D.43189 = a_engine->read_impl.microseconds_per_packet;

Renaming statement D.43190 = D.43189 / 1000;

Renaming statement maxqlen = maxlen / D.43190;



Renaming block #179

Renaming statement if (maxqlen < qlen)



Renaming block #180

Renaming statement maxqlen = qlen * 5;



Renaming block #181

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement qlen.55 = (uint32_t) qlen;

Renaming statement maxqlen.56 = (uint32_t) maxqlen;

Renaming statement D.43294 = a_engine->read_impl.samples_per_packet;

Renaming statement D.43486 = a_engine->read_impl.samples_per_second;

Renaming statement max_drift.57 = (uint32_t) max_drift;

Renaming statement D.43488 = switch_rtp_activate_jitter_buffer (D.43077, qlen.55, maxqlen.56, D.43294, D.43486, max_drift.57);

Renaming statement if (D.43488 == 0)



Renaming block #182

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5146, session, 7, "Setting Jitterbuffer to %dms (%d frames)\n", jb_msec, qlen);

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_set_flag_value (D.43073, 57, 1);

Renaming statement D.43073 = session->channel;

Renaming statement D.43491 = switch_channel_get_variable_dup (D.43073, "rtp_jitter_buffer_plc", 1, -1);

Renaming statement D.43492 = switch_false (D.43491);

Renaming statement if (D.43492 == 0)



Renaming block #183

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_set_flag_value (D.43073, 58, 1);



Renaming block #184

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5153, session, 4, "Error Setting Jitterbuffer to %dms (%d frames)\n", jb_msec, qlen);



Renaming block #185

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtp_timeout_sec", 1, -1);

Renaming statement if (val != 0B)



Renaming block #186

Renaming statement v = atoi (val);

Renaming statement if (v >= 0)



Renaming block #187

Renaming statement D.43099 = smh->mparams;

Renaming statement v.58 = (uint32_t) v;

Renaming statement D.43099->rtp_timeout_sec = v.58;



Renaming block #188

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtp_hold_timeout_sec", 1, -1);

Renaming statement if (val != 0B)



Renaming block #189

Renaming statement v = atoi (val);

Renaming statement if (v >= 0)



Renaming block #190

Renaming statement D.43099 = smh->mparams;

Renaming statement v.59 = (uint32_t) v;

Renaming statement D.43099->rtp_hold_timeout_sec = v.59;



Renaming block #191

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43506 = D.43099->rtp_timeout_sec;

Renaming statement if (D.43506 != 0)



Renaming block #192

Renaming statement D.43486 = a_engine->read_impl.samples_per_second;

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43506 = D.43099->rtp_timeout_sec;

Renaming statement D.43509 = D.43486 * D.43506;

Renaming statement D.43294 = a_engine->read_impl.samples_per_packet;

Renaming statement D.43510 = D.43509 / D.43294;

Renaming statement a_engine->max_missed_packets = D.43510;

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43511 = a_engine->max_missed_packets;

Renaming statement switch_rtp_set_max_missed_packets (D.43077, D.43511);

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43512 = D.43099->rtp_hold_timeout_sec;

Renaming statement if (D.43512 == 0)



Renaming block #193

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43506 = D.43099->rtp_timeout_sec;

Renaming statement D.43515 = D.43506 * 10;

Renaming statement D.43099->rtp_hold_timeout_sec = D.43515;



Renaming block #194

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43512 = D.43099->rtp_hold_timeout_sec;

Renaming statement if (D.43512 != 0)



Renaming block #195

Renaming statement D.43486 = a_engine->read_impl.samples_per_second;

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43512 = D.43099->rtp_hold_timeout_sec;

Renaming statement D.43518 = D.43486 * D.43512;

Renaming statement D.43294 = a_engine->read_impl.samples_per_packet;

Renaming statement D.43519 = D.43518 / D.43294;

Renaming statement a_engine->max_missed_hold_packets = D.43519;



Renaming block #196

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43520 = D.43099->te;

Renaming statement if (D.43520 != 0)



Renaming block #197

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43520 = D.43099->te;

Renaming statement D.43523 = (int) D.43520;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5188, session, 7, "Set 2833 dtmf send payload to %u\n", D.43523);

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43520 = D.43099->te;

Renaming statement switch_rtp_set_telephony_event (D.43077, D.43520);

Renaming statement D.43073 = session->channel;

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43520 = D.43099->te;

Renaming statement D.43523 = (int) D.43520;

Renaming statement switch_channel_set_variable_printf (D.43073, "rtp_2833_send_payload", "%d", D.43523);



Renaming block #198

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43524 = D.43099->recv_te;

Renaming statement if (D.43524 != 0)



Renaming block #199

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43524 = D.43099->recv_te;

Renaming statement D.43527 = (int) D.43524;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5194, session, 7, "Set 2833 dtmf receive payload to %u\n", D.43527);

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43524 = D.43099->recv_te;

Renaming statement switch_rtp_set_telephony_recv_event (D.43077, D.43524);

Renaming statement D.43073 = session->channel;

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43524 = D.43099->recv_te;

Renaming statement D.43527 = (int) D.43524;

Renaming statement switch_channel_set_variable_printf (D.43073, "rtp_2833_recv_payload", "%d", D.43527);



Renaming block #200

Renaming statement D.43531 = switch_media_handle_test_media_flag (smh, 9);

Renaming statement if (D.43531 != 0)



Renaming block #201

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "supress_cng", 1, -1);

Renaming statement if (val != 0B)



Renaming block #202

Renaming statement D.43534 = switch_true (val);

Renaming statement if (D.43534 != 0)



Renaming block #203

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "suppress_cng", 1, -1);

Renaming statement if (val != 0B)



Renaming block #204

Renaming statement D.43536 = switch_true (val);

Renaming statement if (D.43536 != 0)



Renaming block #205

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43099->cng_pt = 0;



Renaming block #206

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtp_digit_delay", 1, -1);

Renaming statement if (val != 0B)



Renaming block #207

Renaming statement delayi = atoi (val);

Renaming statement if (delayi < 0)



Renaming block #208

Renaming statement delayi = 0;



Renaming block #209

Renaming statement D.43099 = smh->mparams;

Renaming statement delayi.60 = (unsigned int) delayi;

Renaming statement D.43099->dtmf_delay = delayi.60;



Renaming block #210

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43542 = D.43099->dtmf_delay;

Renaming statement if (D.43542 != 0)



Renaming block #211

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43542 = D.43099->dtmf_delay;

Renaming statement switch_rtp_set_interdigit_delay (D.43077, D.43542);

Renaming statement D.43073 = session->channel;

Renaming statement D.43545 = switch_channel_get_name (D.43073);

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43542 = D.43099->dtmf_delay;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5216, session, 7, "%s Set rtp dtmf delay to %u\n", D.43545, D.43542);



Renaming block #212

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43143 = D.43099->cng_pt;

Renaming statement if (D.43143 != 0)



Renaming block #213

Renaming statement D.43548 = switch_media_handle_test_media_flag (smh, 9);

Renaming statement if (D.43548 == 0)



Renaming block #214

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43143 = D.43099->cng_pt;

Renaming statement D.43551 = (int) D.43143;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5222, session, 7, "Set comfort noise payload to %u\n", D.43551);

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43143 = D.43099->cng_pt;

Renaming statement switch_rtp_set_cng_pt (D.43077, D.43143);



Renaming block #215

Renaming statement switch_core_session_apply_crypto (session, 0);

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43174 = D.43171->remote_sdp_port;

Renaming statement D.43179 = (int) D.43174;

Renaming statement switch_snprintf (&tmp, 50, "%d", D.43179);

Renaming statement D.43073 = session->channel;

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.43073, "remote_media_ip", D.43172, 1);

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.43073, "remote_media_port", &tmp, 1);

Renaming statement D.43073 = session->channel;

Renaming statement D.43552 = switch_channel_test_flag (D.43073, 74);

Renaming statement if (D.43552 != 0)



Renaming block #216

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5234, session, 6, "Activating ZRTP PROXY MODE\n");

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5235, session, 7, "Disable NOTIMER_DURING_BRIDGE\n");

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_clear_flag (D.43073, 99);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5237, session, 7, "Activating audio UDPTL mode\n");

Renaming statement D.43077 = a_engine->rtp_session;

Renaming statement switch_rtp_udptl_mode (D.43077);



Renaming block #324

Renaming statement err.45 = err;

Renaming statement if (err.45 != 0B)



Renaming block #325

Renaming statement iftmp.68 = err;



Renaming block #326

Renaming statement iftmp.68 = "";



Renaming block #327

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5554, session, 3, "AUDIO RTP REPORTS ERROR: [%s]\n", iftmp.68);

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_perform_hangup (D.43073, "src/switch_core_media.c", &__func__, 5555, 27);

Renaming statement status = 1;



Renaming block #217

Renaming statement D.43073 = session->channel;

Renaming statement D.43555 = switch_channel_direction (D.43073);

Renaming statement if (D.43555 == 1)



Renaming block #218

Renaming statement switch_core_media_check_video_codecs (session);



Renaming block #219

Renaming statement D.43073 = session->channel;

Renaming statement D.43558 = switch_channel_test_flag (D.43073, 98);

Renaming statement if (D.43558 != 0)



Renaming block #220

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43562 = D.43561->rm_encoding;

Renaming statement if (D.43562 != 0B)



Renaming block #221

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43565 = D.43561->remote_sdp_port;

Renaming statement if (D.43565 != 0)



Renaming block #222

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement if (D.43096 != 0B)



Renaming block #223

Renaming statement D.43073 = session->channel;

Renaming statement D.43570 = switch_channel_test_flag (D.43073, 103);

Renaming statement if (D.43570 != 0)



Renaming block #224

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement remote_host = switch_rtp_get_remote_host (D.43096);

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement remote_port = switch_rtp_get_remote_port (D.43096);

Renaming statement D.43574 = remote_host != 0B;

Renaming statement D.43575 = remote_port != 0;

Renaming statement D.43576 = D.43574 && D.43575;

Renaming statement if (D.43576 != 0)



Renaming block #225

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43578 = D.43561->remote_sdp_ip;

Renaming statement D.39400 = __builtin_strcmp (remote_host, D.43578);

Renaming statement if (D.39400 == 0)



Renaming block #226

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43565 = D.43561->remote_sdp_port;

Renaming statement if (D.43565 == remote_port)



Renaming block #227

Renaming statement D.43073 = session->channel;

Renaming statement D.43581 = switch_channel_get_name (D.43073);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5263, session, 7, "Video params are unchanged for %s.\n", D.43581);



Renaming block #228

Renaming statement D.43073 = session->channel;

Renaming statement D.43582 = switch_channel_get_name (D.43073);

Renaming statement D.43583 = (int) remote_port;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43578 = D.43561->remote_sdp_ip;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43565 = D.43561->remote_sdp_port;

Renaming statement D.43584 = (int) D.43565;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5267, session, 7, "Video params changed for %s from %s:%d to %s:%d\n", D.43582, remote_host, D.43583, D.43578, D.43584);



Renaming block #229

Renaming statement D.43073 = session->channel;

Renaming statement D.43585 = switch_channel_test_flag (D.43073, 29);

Renaming statement if (D.43585 == 0)



Renaming block #230

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43588 = switch_rtp_ready (D.43096);

Renaming statement if (D.43588 != 0)



Renaming block #231

Renaming statement D.43073 = session->channel;

Renaming statement D.43591 = switch_channel_get_name (D.43073);

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement D.43592 = v_engine->local_sdp_port;

Renaming statement D.43593 = (int) D.43592;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43578 = D.43561->remote_sdp_ip;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43565 = D.43561->remote_sdp_port;

Renaming statement D.43584 = (int) D.43565;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43594 = D.43561->agreed_pt;

Renaming statement D.43595 = (int) D.43594;

Renaming statement D.43189 = a_engine->read_impl.microseconds_per_packet;

Renaming statement D.43190 = D.43189 / 1000;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5275, session, 7, "VIDEO RTP [%s] %s port %d -> %s port %d codec: %u ms: %d\n", D.43591, D.43172, D.43593, D.43578, D.43584, D.43595, D.43190);

Renaming statement start_video_thread (session);

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43594 = D.43561->agreed_pt;

Renaming statement switch_rtp_set_default_payload (D.43096, D.43594);



Renaming block #232

Renaming statement D.43592 = v_engine->local_sdp_port;

Renaming statement D.43593 = (int) D.43592;

Renaming statement switch_snprintf (&tmp, 50, "%d", D.43593);

Renaming statement D.43073 = session->channel;

Renaming statement D.43191 = a_engine->adv_sdp_ip;

Renaming statement switch_channel_set_variable_var_check (D.43073, "local_video_ip", D.43191, 1);

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.43073, "local_video_port", &tmp, 1);

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement if (D.43096 != 0B)



Renaming block #233

Renaming statement D.43073 = session->channel;

Renaming statement D.43598 = switch_channel_test_flag (D.43073, 103);

Renaming statement if (D.43598 != 0)



Renaming block #234

Renaming statement rport = 0B;

Renaming statement remote_rtcp_port = v_engine->remote_rtcp_port;

Renaming statement if (remote_rtcp_port == 0)



Renaming block #235

Renaming statement D.43073 = session->channel;

Renaming statement rport = switch_channel_get_variable_dup (D.43073, "rtp_remote_video_rtcp_port", 1, -1);

Renaming statement if (rport != 0B)



Renaming block #236

Renaming statement D.43605 = atoi (rport);

Renaming statement remote_rtcp_port = (switch_port_t) D.43605;



Renaming block #237

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43578 = D.43561->remote_sdp_ip;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43565 = D.43561->remote_sdp_port;

Renaming statement D.43606 = switch_rtp_set_remote_address (D.43096, D.43578, D.43565, remote_rtcp_port, 1, &err);

Renaming statement if (D.43606 != 0)



Renaming block #238

Renaming statement err.45 = err;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5306, session, 3, "VIDEO RTP REPORTS ERROR: [%s]\n", err.45);



Renaming block #239

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43578 = D.43561->remote_sdp_ip;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43565 = D.43561->remote_sdp_port;

Renaming statement D.43584 = (int) D.43565;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5308, session, 7, "VIDEO RTP CHANGING DEST TO: [%s:%d]\n", D.43578, D.43584);

Renaming statement D.43612 = switch_media_handle_test_media_flag (smh, 10);

Renaming statement if (D.43612 == 0)



Renaming block #240

Renaming statement D.43073 = session->channel;

Renaming statement D.43615 = switch_channel_test_flag (D.43073, 106);

Renaming statement if (D.43615 == 0)



Renaming block #241

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "disable_rtp_auto_adjust", 1, -1);

Renaming statement if (val == 0B)



Renaming block #242

Renaming statement D.43619 = switch_true (val);

Renaming statement if (D.43619 == 0)



Renaming block #243

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.43096, 7);

Renaming statement start_video_thread (session);



Renaming block #244

Renaming statement D.43073 = session->channel;

Renaming statement D.43620 = switch_channel_test_flag (D.43073, 29);

Renaming statement if (D.43620 != 0)



Renaming block #245

Renaming statement switch_core_media_proxy_remote_addr (session, 0B);

Renaming statement D.43270 = flags[19];

Renaming statement D.43271 = D.43270 + 1;

Renaming statement flags[19] = D.43271;

Renaming statement D.43102 = flags[13];

Renaming statement D.43103 = D.43102 + 1;

Renaming statement flags[13] = D.43103;

Renaming statement D.43625 = switch_media_handle_test_media_flag (smh, 10);

Renaming statement if (D.43625 == 0)



Renaming block #246

Renaming statement D.43073 = session->channel;

Renaming statement D.43628 = switch_channel_test_flag (D.43073, 106);

Renaming statement if (D.43628 == 0)



Renaming block #247

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "disable_rtp_auto_adjust", 1, -1);

Renaming statement if (val == 0B)



Renaming block #248

Renaming statement D.43632 = switch_true (val);

Renaming statement if (D.43632 == 0)



Renaming block #249

Renaming statement D.43114 = flags[7];

Renaming statement D.43115 = D.43114 + 1;

Renaming statement flags[7] = D.43115;



Renaming block #250

Renaming statement timer_name = 0B;

Renaming statement D.43073 = session->channel;

Renaming statement D.43633 = switch_channel_get_name (D.43073);

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement D.43592 = v_engine->local_sdp_port;

Renaming statement D.43593 = (int) D.43592;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43578 = D.43561->remote_sdp_ip;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43565 = D.43561->remote_sdp_port;

Renaming statement D.43584 = (int) D.43565;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43594 = D.43561->agreed_pt;

Renaming statement D.43595 = (int) D.43594;

Renaming statement D.43634 = v_engine->read_impl.microseconds_per_packet;

Renaming statement D.43635 = D.43634 / 1000;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5334, session, 7, "PROXY VIDEO RTP [%s] %s:%d->%s:%d codec: %u ms: %d\n", D.43633, D.43172, D.43593, D.43578, D.43584, D.43595, D.43635);

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43636 = switch_rtp_ready (D.43096);

Renaming statement if (D.43636 != 0)



Renaming block #251

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43594 = D.43561->agreed_pt;

Renaming statement switch_rtp_set_default_payload (D.43096, D.43594);



Renaming block #252

Renaming statement D.43099 = smh->mparams;

Renaming statement timer_name = D.43099->timer_name;

Renaming statement D.43073 = session->channel;

Renaming statement var = switch_channel_get_variable_dup (D.43073, "rtp_timer_name", 1, -1);

Renaming statement if (var != 0B)



Renaming block #253

Renaming statement timer_name = var;



Renaming block #254

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement if (D.43096 != 0B)



Renaming block #255

Renaming statement D.43592 = v_engine->local_sdp_port;

Renaming statement if (D.43592 == 0)



Renaming block #256

Renaming statement switch_core_media_choose_port (session, 1, 1);



Renaming block #257

Renaming statement D.43102 = flags[13];

Renaming statement D.43103 = D.43102 + 1;

Renaming statement flags[13] = D.43103;

Renaming statement D.43137 = flags[8];

Renaming statement D.43138 = D.43137 + 1;

Renaming statement flags[8] = D.43138;

Renaming statement D.43647 = switch_media_handle_test_media_flag (smh, 10);

Renaming statement if (D.43647 == 0)



Renaming block #258

Renaming statement D.43073 = session->channel;

Renaming statement D.43650 = switch_channel_test_flag (D.43073, 15);

Renaming statement if (D.43650 == 0)



Renaming block #259

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "disable_rtp_auto_adjust", 1, -1);

Renaming statement if (val == 0B)



Renaming block #260

Renaming statement D.43654 = switch_true (val);

Renaming statement if (D.43654 == 0)



Renaming block #261

Renaming statement D.43073 = session->channel;

Renaming statement D.43655 = switch_channel_test_flag (D.43073, 106);

Renaming statement if (D.43655 == 0)



Renaming block #262

Renaming statement D.43114 = flags[7];

Renaming statement D.43115 = D.43114 + 1;

Renaming statement flags[7] = D.43115;



Renaming block #263

Renaming statement D.43073 = session->channel;

Renaming statement D.43658 = switch_channel_test_flag (D.43073, 29);

Renaming statement if (D.43658 != 0)



Renaming block #264

Renaming statement D.43270 = flags[19];

Renaming statement D.43271 = D.43270 + 1;

Renaming statement flags[19] = D.43271;



Renaming block #265

Renaming statement switch_core_media_set_video_codec (session, 0);

Renaming statement D.43661 = flags[30];

Renaming statement D.43662 = D.43661 + 1;

Renaming statement flags[30] = D.43662;

Renaming statement D.43184 = a_engine->local_sdp_ip;

Renaming statement D.43592 = v_engine->local_sdp_port;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43578 = D.43561->remote_sdp_ip;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43565 = D.43561->remote_sdp_port;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43594 = D.43561->agreed_pt;

Renaming statement D.43663 = switch_core_session_get_pool (session);

Renaming statement D.43664 = switch_rtp_new (D.43184, D.43592, D.43578, D.43565, D.43594, 1, 90000, &flags, 0B, &err, D.43663);

Renaming statement v_engine->rtp_session = D.43664;

Renaming statement D.43073 = session->channel;

Renaming statement D.43666 = switch_channel_test_flag (D.43073, 29);

Renaming statement if (D.43666 != 0)



Renaming block #266

Renaming statement iftmp.61 = "PROXY ";



Renaming block #267

Renaming statement iftmp.61 = "";



Renaming block #268

Renaming statement D.43073 = session->channel;

Renaming statement D.43670 = switch_channel_get_name (D.43073);

Renaming statement D.43171 = a_engine->cur_payload_map;

Renaming statement D.43172 = D.43171->remote_sdp_ip;

Renaming statement D.43592 = v_engine->local_sdp_port;

Renaming statement D.43593 = (int) D.43592;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43578 = D.43561->remote_sdp_ip;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43565 = D.43561->remote_sdp_port;

Renaming statement D.43584 = (int) D.43565;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43594 = D.43561->agreed_pt;

Renaming statement D.43595 = (int) D.43594;

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43672 = switch_rtp_ready (D.43096);

Renaming statement if (D.43672 == 0)



Renaming block #269

Renaming statement iftmp.62 = err;



Renaming block #270

Renaming statement iftmp.62 = "SUCCESS";



Renaming block #271

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5391, session, 7, "%sVIDEO RTP [%s] %s:%d->%s:%d codec: %u ms: %d [%s]\n", iftmp.61, D.43670, D.43172, D.43593, D.43578, D.43584, D.43595, 0, iftmp.62);

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43676 = switch_rtp_ready (D.43096);

Renaming statement if (D.43676 != 0)



Renaming block #272

Renaming statement D.43679 = v_engine->fir;

Renaming statement if (D.43679 != 0)



Renaming block #273

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.43096, 36);



Renaming block #274

Renaming statement D.43682 = v_engine->pli;

Renaming statement if (D.43682 != 0)



Renaming block #275

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.43096, 37);



Renaming block #276

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43685 = &v_engine->payload_map;

Renaming statement switch_rtp_set_payload_map (D.43096, D.43685);

Renaming statement start_video_thread (session);

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_set_flag_value (D.43073, 23, 1);

Renaming statement D.43073 = session->channel;

Renaming statement ssrc = switch_channel_get_variable_dup (D.43073, "rtp_use_video_ssrc", 1, -1);

Renaming statement if (ssrc != 0B)



Renaming block #277

Renaming statement ssrc_ul = strtoul (ssrc, 0B, 10);

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement switch_rtp_set_ssrc (D.43096, ssrc_ul);

Renaming statement v_engine->ssrc = ssrc_ul;



Renaming block #278

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43689 = v_engine->ssrc;

Renaming statement switch_rtp_set_ssrc (D.43096, D.43689);



Renaming block #279

Renaming statement D.43690 = v_engine->remote_ssrc;

Renaming statement if (D.43690 != 0)



Renaming block #280

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43690 = v_engine->remote_ssrc;

Renaming statement switch_rtp_set_remote_ssrc (D.43096, D.43690);



Renaming block #281

Renaming statement D.43693 = v_engine->ice_in.chosen[0];

Renaming statement D.43694 = v_engine->ice_in.cands[D.43693][0].ready;

Renaming statement if (D.43694 != 0)



Renaming block #282

Renaming statement gen_ice (session, 1, 0B, 0);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5433, session, 6, "Activating Video ICE\n");

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43697 = v_engine->ice_in.ufrag;

Renaming statement D.43698 = v_engine->ice_out.ufrag;

Renaming statement D.43699 = v_engine->ice_out.pwd;

Renaming statement D.43700 = v_engine->ice_in.pwd;

Renaming statement D.43702 = switch_ice_direction (session);

Renaming statement if (D.43702 == 1)



Renaming block #283

Renaming statement iftmp.63 = 2;



Renaming block #284

Renaming statement iftmp.63 = 6;



Renaming block #285

Renaming statement D.43706 = &v_engine->ice_in;

Renaming statement switch_rtp_activate_ice (D.43096, D.43697, D.43698, D.43699, D.43700, 0, iftmp.63, D.43706);



Renaming block #286

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtcp_video_interval_msec", 1, -1);

Renaming statement if (val != 0B)



Renaming block #287

Renaming statement D.43099 = smh->mparams;

Renaming statement val = D.43099->rtcp_video_interval_msec;

Renaming statement if (val != 0B)



Renaming block #288

Renaming statement D.43073 = session->channel;

Renaming statement rport = switch_channel_get_variable_dup (D.43073, "rtp_remote_video_rtcp_port", 1, -1);

Renaming statement remote_port = v_engine->remote_rtcp_port;

Renaming statement if (rport != 0B)



Renaming block #289

Renaming statement D.43712 = atoi (rport);

Renaming statement remote_port = (switch_port_t) D.43712;



Renaming block #290

Renaming statement D.43713 = strcasecmp (val, "passthru");

Renaming statement if (D.43713 == 0)



Renaming block #291

Renaming statement D.43716 = (int) remote_port;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5462, session, 6, "Activating VIDEO RTCP PASSTHRU PORT %d\n", D.43716);

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43717 = v_engine->rtcp_mux;

Renaming statement D.43718 = D.43717 > 0;

Renaming statement switch_rtp_activate_rtcp (D.43096, -1, remote_port, D.43718);



Renaming block #292

Renaming statement interval = atoi (val);

Renaming statement interval.64 = (unsigned int) interval;

Renaming statement D.43721 = interval.64 + 4294967196;

Renaming statement if (D.43721 > 499900)



Renaming block #293

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5467, session, 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval);



Renaming block #294

Renaming statement interval = 10000;

Renaming statement D.43716 = (int) remote_port;

Renaming statement D.43717 = v_engine->rtcp_mux;

Renaming statement D.43724 = (int) D.43717;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5471, session, 6, "Activating VIDEO RTCP PORT %d mux %d\n", D.43716, D.43724);

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43717 = v_engine->rtcp_mux;

Renaming statement D.43718 = D.43717 > 0;

Renaming statement switch_rtp_activate_rtcp (D.43096, interval, remote_port, D.43718);



Renaming block #295

Renaming statement D.43725 = v_engine->ice_in.chosen[1];

Renaming statement D.43726 = v_engine->ice_in.cands[D.43725][1].ready;

Renaming statement if (D.43726 != 0)



Renaming block #296

Renaming statement D.43717 = v_engine->rtcp_mux;

Renaming statement if (D.43717 > 0)



Renaming block #297

Renaming statement D.43725 = v_engine->ice_in.chosen[1];

Renaming statement D.43732 = v_engine->ice_in.cands[D.43725][1].con_addr;

Renaming statement D.43693 = v_engine->ice_in.chosen[0];

Renaming statement D.43733 = v_engine->ice_in.cands[D.43693][0].con_addr;

Renaming statement D.39417 = __builtin_strcmp (D.43732, D.43733);

Renaming statement if (D.39417 == 0)



Renaming block #298

Renaming statement D.43725 = v_engine->ice_in.chosen[1];

Renaming statement D.43735 = v_engine->ice_in.cands[D.43725][1].con_port;

Renaming statement D.43693 = v_engine->ice_in.chosen[0];

Renaming statement D.43736 = v_engine->ice_in.cands[D.43693][0].con_port;

Renaming statement if (D.43735 == D.43736)



Renaming block #299

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5481, session, 6, "Skipping VIDEO RTCP ICE (Same as VIDEO RTP)\n");



Renaming block #300

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5484, session, 6, "Activating VIDEO RTCP ICE\n");

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43697 = v_engine->ice_in.ufrag;

Renaming statement D.43698 = v_engine->ice_out.ufrag;

Renaming statement D.43699 = v_engine->ice_out.pwd;

Renaming statement D.43700 = v_engine->ice_in.pwd;

Renaming statement D.43739 = switch_ice_direction (session);

Renaming statement if (D.43739 == 1)



Renaming block #301

Renaming statement iftmp.65 = 2;



Renaming block #302

Renaming statement iftmp.65 = 6;



Renaming block #303

Renaming statement D.43706 = &v_engine->ice_in;

Renaming statement switch_rtp_activate_ice (D.43096, D.43697, D.43698, D.43699, D.43700, 1, iftmp.65, D.43706);



Renaming block #304

Renaming statement D.43743 = &v_engine->local_dtls_fingerprint.str;

Renaming statement D.43744 = _zstr (D.43743);

Renaming statement if (D.43744 == 0)



Renaming block #305

Renaming statement D.43747 = switch_rtp_has_dtls ();

Renaming statement if (D.43747 != 0)



Renaming block #306

Renaming statement D.43429 = smh->session;

Renaming statement D.43750 = dtls_ok (D.43429);

Renaming statement if (D.43750 != 0)



Renaming block #307

Renaming statement D.43429 = smh->session;

Renaming statement D.43434 = D.43429->channel;

Renaming statement D.43754 = switch_channel_direction (D.43434);

Renaming statement if (D.43754 == 0)



Renaming block #308

Renaming statement iftmp.66 = 1;



Renaming block #309

Renaming statement iftmp.66 = 2;



Renaming block #310

Renaming statement dtype = iftmp.66;

Renaming statement xtype = 4;

Renaming statement D.43717 = v_engine->rtcp_mux;

Renaming statement if (D.43717 > 0)



Renaming block #311

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43760 = D.43099->rtcp_video_interval_msec;

Renaming statement if (D.43760 != 0B)



Renaming block #312

Renaming statement xtype = xtype | 8;



Renaming block #313

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43763 = &v_engine->local_dtls_fingerprint;

Renaming statement D.43764 = &v_engine->remote_dtls_fingerprint;

Renaming statement D.43765 = dtype | xtype;

Renaming statement switch_rtp_add_dtls (D.43096, D.43763, D.43764, D.43765);

Renaming statement D.43717 = v_engine->rtcp_mux;

Renaming statement if (D.43717 <= 0)



Renaming block #314

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43760 = D.43099->rtcp_video_interval_msec;

Renaming statement if (D.43760 != 0B)



Renaming block #315

Renaming statement xtype = 8;

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43763 = &v_engine->local_dtls_fingerprint;

Renaming statement D.43764 = &v_engine->remote_dtls_fingerprint;

Renaming statement D.43765 = dtype | xtype;

Renaming statement switch_rtp_add_dtls (D.43096, D.43763, D.43764, D.43765);



Renaming block #316

Renaming statement D.43073 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43073, "rtp_manual_video_rtp_bugs", 1, -1);

Renaming statement if (val != 0B)



Renaming block #317

Renaming statement D.43772 = &v_engine->rtp_bugs;

Renaming statement switch_core_media_parse_rtp_bugs (D.43772, val);



Renaming block #318

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43773 = v_engine->rtp_bugs;

Renaming statement D.43099 = smh->mparams;

Renaming statement D.43774 = D.43099->manual_video_rtp_bugs;

Renaming statement D.43775 = D.43773 | D.43774;

Renaming statement switch_rtp_intentional_bugs (D.43096, D.43775);

Renaming statement D.43073 = session->channel;

Renaming statement D.43561 = v_engine->cur_payload_map;

Renaming statement D.43594 = D.43561->agreed_pt;

Renaming statement D.43595 = (int) D.43594;

Renaming statement switch_channel_set_variable_printf (D.43073, "rtp_use_video_pt", "%d", D.43595);

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement D.43776 = switch_rtp_get_ssrc (D.43096);

Renaming statement v_engine->ssrc = D.43776;

Renaming statement D.43073 = session->channel;

Renaming statement D.43689 = v_engine->ssrc;

Renaming statement switch_channel_set_variable_printf (D.43073, "rtp_use_video_ssrc", "%u", D.43689);

Renaming statement switch_core_session_apply_crypto (session, 1);

Renaming statement D.43073 = session->channel;

Renaming statement D.43777 = switch_channel_test_flag (D.43073, 74);

Renaming statement if (D.43777 != 0)



Renaming block #319

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5542, session, 7, "Activating video UDPTL mode\n");

Renaming statement D.43096 = v_engine->rtp_session;

Renaming statement switch_rtp_udptl_mode (D.43096);



Renaming block #320

Renaming statement err.45 = err;

Renaming statement if (err.45 != 0B)



Renaming block #321

Renaming statement iftmp.67 = err;



Renaming block #322

Renaming statement iftmp.67 = "";



Renaming block #323

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5547, session, 3, "VIDEO RTP REPORTS ERROR: [%s]\n", iftmp.67);

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_perform_hangup (D.43073, "src/switch_core_media.c", &__func__, 5548, 27);



Renaming block #328

Renaming statement D.43262 = session != 0B;

Renaming statement D.43790 = v_engine != 0B;

Renaming statement D.43791 = D.43262 && D.43790;

Renaming statement if (D.43791 != 0)



Renaming block #329

Renaming statement check_dtls_reinvite (session, v_engine);



Renaming block #330

Renaming statement status = 0;



Renaming block #331

Renaming statement D.43073 = session->channel;

Renaming statement switch_channel_clear_flag (D.43073, 103);

Renaming statement switch_core_recovery_track (session);

Renaming statement D.43070 = status;



Renaming block #8

Renaming statement D.43070 = 1;



Renaming block #332

Renaming statement return D.43070;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement err = 0B;

Updating SSA information for statement flags = {};



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4731, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_46 = session_45(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.43073_50 = session_45(D)->channel;

Updating SSA information for statement D.43074_51 = switch_channel_check_signal (D.43073_50, 1);



Registering new PHI nodes in block #7

Updating SSA information for statement D.43073_52 = session_45(D)->channel;

Updating SSA information for statement D.43076_53 = switch_channel_get_state (D.43073_52);



Registering new PHI nodes in block #9

Updating SSA information for statement D.43077_54 = a_engine_48->rtp_session;

Updating SSA information for statement D.43078_55 = switch_rtp_ready (D.43077_54);



Registering new PHI nodes in block #10

Updating SSA information for statement D.43077_56 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_reset_media_timer (D.43077_56);



Registering new PHI nodes in block #11

Updating SSA information for statement D.43081_57 = a_engine_48->crypto_type;



Registering new PHI nodes in block #12

Updating SSA information for statement D.43073_58 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.43073_58, 92, 1);



Registering new PHI nodes in block #13

Updating SSA information for statement D.43073_59 = session_45(D)->channel;

Updating SSA information for statement D.43084_60 = switch_channel_test_flag (D.43073_59, 15);



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement D.43073_62 = session_45(D)->channel;

Updating SSA information for statement D.43087_63 = switch_channel_test_flag (D.43073_62, 103);



Registering new PHI nodes in block #16

Updating SSA information for statement D.43077_64 = a_engine_48->rtp_session;

Updating SSA information for statement D.43090_65 = switch_rtp_ready (D.43077_64);



Registering new PHI nodes in block #17

Updating SSA information for statement D.43073_66 = session_45(D)->channel;

Updating SSA information for statement D.43093_67 = switch_channel_test_flag (D.43073_66, 98);



Registering new PHI nodes in block #18

Updating SSA information for statement D.43096_68 = v_engine_49->rtp_session;

Updating SSA information for statement D.43097_69 = switch_rtp_ready (D.43096_68);



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20

Updating SSA information for statement D.43099_71 = smh_46->mparams;

Updating SSA information for statement D.43100_72 = D.43099_71->codec_flags;

Updating SSA information for statement status_73 = switch_core_media_set_codec (session_45(D), 0, D.43100_72);



Registering new PHI nodes in block #21

Updating SSA information for statement switch_core_media_set_video_codec (session_45(D), 0);

Updating SSA information for statement memset (&flags, 0, 156);

Updating SSA information for statement D.43102_74 = flags[13];

Updating SSA information for statement flags[13] = D.43103_75;

Updating SSA information for statement D.43106_76 = switch_media_handle_test_media_flag (smh_46, 10);



Registering new PHI nodes in block #22

Updating SSA information for statement D.43073_77 = session_45(D)->channel;

Updating SSA information for statement D.43109_78 = switch_channel_test_flag (D.43073_77, 106);



Registering new PHI nodes in block #23

Updating SSA information for statement D.43073_79 = session_45(D)->channel;

Updating SSA information for statement val_80 = switch_channel_get_variable_dup (D.43073_79, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #24

Updating SSA information for statement D.43113_81 = switch_true (val_80);



Registering new PHI nodes in block #25

Updating SSA information for statement D.43114_82 = flags[7];

Updating SSA information for statement flags[7] = D.43115_83;



Registering new PHI nodes in block #26

Updating SSA information for statement D.43118_84 = switch_media_handle_test_media_flag (smh_46, 11);



Registering new PHI nodes in block #27

Updating SSA information for statement D.43073_85 = session_45(D)->channel;

Updating SSA information for statement val_86 = switch_channel_get_variable_dup (D.43073_85, "pass_rfc2833", 1, -1);



Registering new PHI nodes in block #28

Updating SSA information for statement D.43121_87 = switch_true (val_86);



Registering new PHI nodes in block #29

Updating SSA information for statement D.43073_88 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.43073_88, 100, 1);



Registering new PHI nodes in block #30

Updating SSA information for statement D.43124_89 = switch_media_handle_test_media_flag (smh_46, 12);



Registering new PHI nodes in block #31

Updating SSA information for statement D.43073_90 = session_45(D)->channel;

Updating SSA information for statement val_91 = switch_channel_get_variable_dup (D.43073_90, "rtp_autoflush", 1, -1);



Registering new PHI nodes in block #32

Updating SSA information for statement D.43127_92 = switch_true (val_91);



Registering new PHI nodes in block #33

Updating SSA information for statement D.43128_93 = flags[22];

Updating SSA information for statement flags[22] = D.43129_94;



Registering new PHI nodes in block #34

Updating SSA information for statement D.43132_95 = switch_media_handle_test_media_flag (smh_46, 13);



Registering new PHI nodes in block #35

Updating SSA information for statement D.43073_96 = session_45(D)->channel;

Updating SSA information for statement val_97 = switch_channel_get_variable_dup (D.43073_96, "rtp_rewrite_timestamps", 1, -1);



Registering new PHI nodes in block #36

Updating SSA information for statement D.43136_98 = switch_true (val_97);



Registering new PHI nodes in block #37

Updating SSA information for statement D.43137_99 = flags[8];

Updating SSA information for statement flags[8] = D.43138_100;



Registering new PHI nodes in block #38

Updating SSA information for statement D.43139_101 = switch_media_handle_test_media_flag (smh_46, 9);



Registering new PHI nodes in block #39

Updating SSA information for statement D.43099_102 = smh_46->mparams;

Updating SSA information for statement D.43099_102->cng_pt = 0;



Registering new PHI nodes in block #40

Updating SSA information for statement D.43099_103 = smh_46->mparams;

Updating SSA information for statement D.43143_104 = D.43099_103->cng_pt;



Registering new PHI nodes in block #41

Updating SSA information for statement D.43146_105 = flags[16];

Updating SSA information for statement flags[16] = D.43147_106;



Registering new PHI nodes in block #42

Updating SSA information for statement D.43148_107 = a_engine_48->read_impl.iananame;

Updating SSA information for statement D.43149_108 = strcasecmp (D.43148_107, "L16");



Registering new PHI nodes in block #43

Updating SSA information for statement D.43152_109 = flags[14];

Updating SSA information for statement flags[14] = D.43153_110;



Registering new PHI nodes in block #44

Updating SSA information for statement D.43152_111 = flags[14];



Registering new PHI nodes in block #45

Updating SSA information for statement D.43073_112 = session_45(D)->channel;

Updating SSA information for statement val_113 = switch_channel_get_variable_dup (D.43073_112, "rtp_disable_byteswap", 1, -1);



Registering new PHI nodes in block #46

Updating SSA information for statement D.43158_114 = switch_true (val_113);



Registering new PHI nodes in block #47

Updating SSA information for statement flags[14] = 0;



Registering new PHI nodes in block #48

Updating SSA information for statement D.43077_115 = a_engine_48->rtp_session;



Registering new PHI nodes in block #49

Updating SSA information for statement D.43073_116 = session_45(D)->channel;

Updating SSA information for statement D.43163_117 = switch_channel_test_flag (D.43073_116, 103);



Registering new PHI nodes in block #50

Updating SSA information for statement D.43077_118 = a_engine_48->rtp_session;

Updating SSA information for statement remote_host_119 = switch_rtp_get_remote_host (D.43077_118);

Updating SSA information for statement D.43077_120 = a_engine_48->rtp_session;

Updating SSA information for statement remote_port_121 = switch_rtp_get_remote_port (D.43077_120);



Registering new PHI nodes in block #51

Updating SSA information for statement D.43171_125 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_126 = D.43171_125->remote_sdp_ip;

Updating SSA information for statement D.39348_127 = __builtin_strcmp (remote_host_119, D.43172_126);



Registering new PHI nodes in block #52

Updating SSA information for statement D.43171_128 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_129 = D.43171_128->remote_sdp_port;



Registering new PHI nodes in block #53

Updating SSA information for statement D.43073_130 = session_45(D)->channel;

Updating SSA information for statement D.43176_131 = switch_channel_get_name (D.43073_130);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4825, session_45(D), 7, "Audio params are unchanged for %s.\n", D.43176_131);



Registering new PHI nodes in block #54

Updating SSA information for statement D.43073_132 = session_45(D)->channel;

Updating SSA information for statement D.43177_133 = switch_channel_get_name (D.43073_132);

Updating SSA information for statement D.43171_135 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_136 = D.43171_135->remote_sdp_ip;

Updating SSA information for statement D.43171_137 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_138 = D.43171_137->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4830, session_45(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.43177_133, remote_host_119, D.43178_134, D.43172_136, D.43179_139);

Updating SSA information for statement D.43171_140 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_141 = D.43171_140->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.43179_142);

Updating SSA information for statement D.43073_143 = session_45(D)->channel;

Updating SSA information for statement D.43171_144 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_145 = D.43171_144->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_143, "remote_media_ip", D.43172_145, 1);

Updating SSA information for statement D.43073_146 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_146, "remote_media_port", &tmp, 1);



Registering new PHI nodes in block #55

Updating SSA information for statement D.43073_147 = session_45(D)->channel;

Updating SSA information for statement D.43180_148 = switch_channel_test_flag (D.43073_147, 29);



Registering new PHI nodes in block #56

Updating SSA information for statement D.43073_149 = session_45(D)->channel;

Updating SSA information for statement D.43183_150 = switch_channel_get_name (D.43073_149);

Updating SSA information for statement D.43184_151 = a_engine_48->local_sdp_ip;

Updating SSA information for statement D.43185_152 = a_engine_48->local_sdp_port;

Updating SSA information for statement D.43171_154 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_155 = D.43171_154->remote_sdp_ip;

Updating SSA information for statement D.43171_156 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_157 = D.43171_156->remote_sdp_port;

Updating SSA information for statement D.43171_159 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43187_160 = D.43171_159->agreed_pt;

Updating SSA information for statement D.43189_162 = a_engine_48->read_impl.microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4841, session_45(D), 7, "AUDIO RTP [%s] %s port %d -> %s port %d codec: %u ms: %d\n", D.43183_150, D.43184_151, D.43186_153, D.43172_155, D.43179_158, D.43188_161, D.43190_163);



Registering new PHI nodes in block #57

Updating SSA information for statement D.43185_164 = a_engine_48->local_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.43186_165);

Updating SSA information for statement D.43073_166 = session_45(D)->channel;

Updating SSA information for statement D.43184_167 = a_engine_48->local_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_166, "local_media_ip", D.43184_167, 1);

Updating SSA information for statement D.43073_168 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_168, "local_media_port", &tmp, 1);

Updating SSA information for statement D.43073_169 = session_45(D)->channel;

Updating SSA information for statement D.43191_170 = a_engine_48->adv_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_169, "advertised_media_ip", D.43191_170, 1);

Updating SSA information for statement D.43077_171 = a_engine_48->rtp_session;



Registering new PHI nodes in block #58

Updating SSA information for statement D.43073_172 = session_45(D)->channel;

Updating SSA information for statement D.43194_173 = switch_channel_test_flag (D.43073_172, 103);



Registering new PHI nodes in block #59

Updating SSA information for statement remote_rtcp_port_175 = a_engine_48->remote_rtcp_port;



Registering new PHI nodes in block #60

Updating SSA information for statement D.43073_176 = session_45(D)->channel;

Updating SSA information for statement rport_177 = switch_channel_get_variable_dup (D.43073_176, "rtp_remote_audio_rtcp_port", 1, -1);



Registering new PHI nodes in block #61

Updating SSA information for statement D.43201_178 = atoi (rport_177);



Registering new PHI nodes in block #62

Updating SSA information for statement D.43077_180 = a_engine_48->rtp_session;

Updating SSA information for statement D.43171_181 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_182 = D.43171_181->remote_sdp_ip;

Updating SSA information for statement D.43171_183 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_184 = D.43171_183->remote_sdp_port;

Updating SSA information for statement D.43202_185 = switch_rtp_set_remote_address (D.43077_180, D.43172_182, D.43174_184, remote_rtcp_port_7, 1, &err);



Registering new PHI nodes in block #63

Updating SSA information for statement err.45_186 = err;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4868, session_45(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.45_186);



Registering new PHI nodes in block #64

Updating SSA information for statement D.43171_187 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_188 = D.43171_187->remote_sdp_ip;

Updating SSA information for statement D.43171_189 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_190 = D.43171_189->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4870, session_45(D), 7, "AUDIO RTP CHANGING DEST TO: [%s:%d]\n", D.43172_188, D.43179_191);

Updating SSA information for statement D.43073_192 = session_45(D)->channel;

Updating SSA information for statement D.43207_193 = switch_channel_test_flag (D.43073_192, 96);



Registering new PHI nodes in block #65



Registering new PHI nodes in block #66

Updating SSA information for statement D.43171_195 = a_engine_48->cur_payload_map;

Updating SSA information for statement __s1_196 = D.43171_195->remote_sdp_ip;

Updating SSA information for statement D.43213_197 = *__s1_196;

Updating SSA information for statement D.43216_200 = MEM[(const unsigned char *)D.43215_199];



Registering new PHI nodes in block #67

Updating SSA information for statement D.43224_207 = *D.43223_206;

Updating SSA information for statement D.43227_210 = MEM[(const unsigned char *)D.43226_209];



Registering new PHI nodes in block #68

Updating SSA information for statement D.43234_217 = *D.43233_216;

Updating SSA information for statement D.43237_220 = MEM[(const unsigned char *)D.43236_219];



Registering new PHI nodes in block #69

Updating SSA information for statement D.43244_227 = *D.43243_226;

Updating SSA information for statement D.43247_230 = MEM[(const unsigned char *)D.43246_229];



Registering new PHI nodes in block #70



Registering new PHI nodes in block #71

Updating SSA information for statement D.43171_235 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_236 = D.43171_235->remote_sdp_ip;

Updating SSA information for statement iftmp.46_237 = __builtin_strcmp (D.43172_236, "0.0.0.0");



Registering new PHI nodes in block #72



Registering new PHI nodes in block #73

Updating SSA information for statement switch_core_media_toggle_hold (session_45(D), 0);



Registering new PHI nodes in block #74

Updating SSA information for statement D.43254_239 = switch_media_handle_test_media_flag (smh_46, 10);



Registering new PHI nodes in block #75

Updating SSA information for statement D.43073_240 = session_45(D)->channel;

Updating SSA information for statement val_241 = switch_channel_get_variable_dup (D.43073_240, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #76

Updating SSA information for statement D.43258_242 = switch_true (val_241);



Registering new PHI nodes in block #77

Updating SSA information for statement D.43073_243 = session_45(D)->channel;

Updating SSA information for statement D.43259_244 = switch_channel_test_flag (D.43073_243, 106);



Registering new PHI nodes in block #78

Updating SSA information for statement D.43077_245 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.43077_245, 7);



Registering new PHI nodes in block #79



Registering new PHI nodes in block #80

Updating SSA information for statement check_dtls_reinvite (session_45(D), a_engine_48);



Registering new PHI nodes in block #81

Updating SSA information for statement D.43073_249 = session_45(D)->channel;

Updating SSA information for statement D.43267_250 = switch_channel_test_flag (D.43073_249, 29);



Registering new PHI nodes in block #82

Updating SSA information for statement switch_core_media_proxy_remote_addr (session_45(D), 0B);

Updating SSA information for statement memset (&flags, 0, 156);

Updating SSA information for statement D.43102_251 = flags[13];

Updating SSA information for statement flags[13] = D.43103_252;

Updating SSA information for statement D.43270_253 = flags[19];

Updating SSA information for statement flags[19] = D.43271_254;

Updating SSA information for statement D.43274_255 = switch_media_handle_test_media_flag (smh_46, 10);



Registering new PHI nodes in block #83

Updating SSA information for statement D.43073_256 = session_45(D)->channel;

Updating SSA information for statement D.43277_257 = switch_channel_test_flag (D.43073_256, 106);



Registering new PHI nodes in block #84

Updating SSA information for statement D.43073_258 = session_45(D)->channel;

Updating SSA information for statement val_259 = switch_channel_get_variable_dup (D.43073_258, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #85

Updating SSA information for statement D.43281_260 = switch_true (val_259);



Registering new PHI nodes in block #86

Updating SSA information for statement D.43114_261 = flags[7];

Updating SSA information for statement flags[7] = D.43115_262;



Registering new PHI nodes in block #87

Updating SSA information for statement D.43073_264 = session_45(D)->channel;

Updating SSA information for statement D.43282_265 = switch_channel_get_name (D.43073_264);

Updating SSA information for statement D.43171_266 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_267 = D.43171_266->remote_sdp_ip;

Updating SSA information for statement D.43171_268 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_269 = D.43171_268->remote_sdp_port;

Updating SSA information for statement D.43171_271 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_272 = D.43171_271->remote_sdp_ip;

Updating SSA information for statement D.43171_273 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_274 = D.43171_273->remote_sdp_port;

Updating SSA information for statement D.43171_276 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43187_277 = D.43171_276->agreed_pt;

Updating SSA information for statement D.43189_279 = a_engine_48->read_impl.microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4906, session_45(D), 7, "PROXY AUDIO RTP [%s] %s:%d->%s:%d codec: %u ms: %d\n", D.43282_265, D.43172_272, D.43179_275, D.43172_272, D.43179_275, D.43188_278, D.43190_280);

Updating SSA information for statement D.43077_281 = a_engine_48->rtp_session;

Updating SSA information for statement D.43283_282 = switch_rtp_ready (D.43077_281);



Registering new PHI nodes in block #88

Updating SSA information for statement D.43077_283 = a_engine_48->rtp_session;

Updating SSA information for statement D.43171_284 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43187_285 = D.43171_284->agreed_pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.43077_283, D.43187_285);



Registering new PHI nodes in block #89

Updating SSA information for statement D.43099_286 = smh_46->mparams;

Updating SSA information for statement timer_name_287 = D.43099_286->timer_name;

Updating SSA information for statement D.43073_288 = session_45(D)->channel;

Updating SSA information for statement var_289 = switch_channel_get_variable_dup (D.43073_288, "rtp_timer_name", 1, -1);



Registering new PHI nodes in block #90



Registering new PHI nodes in block #91

Updating SSA information for statement D.43073_291 = session_45(D)->channel;

Updating SSA information for statement D.43291_292 = switch_channel_check_signal (D.43073_291, 1);



Registering new PHI nodes in block #92

Updating SSA information for statement D.43073_293 = session_45(D)->channel;

Updating SSA information for statement D.43293_294 = switch_channel_get_state (D.43073_293);



Registering new PHI nodes in block #93

Updating SSA information for statement D.43184_295 = a_engine_48->local_sdp_ip;

Updating SSA information for statement D.43185_296 = a_engine_48->local_sdp_port;

Updating SSA information for statement D.43171_297 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_298 = D.43171_297->remote_sdp_ip;

Updating SSA information for statement D.43171_299 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_300 = D.43171_299->remote_sdp_port;

Updating SSA information for statement D.43171_301 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43187_302 = D.43171_301->agreed_pt;

Updating SSA information for statement D.43294_303 = a_engine_48->read_impl.samples_per_packet;

Updating SSA information for statement D.43171_304 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43295_305 = D.43171_304->codec_ms;

Updating SSA information for statement D.43297_307 = switch_core_session_get_pool (session_45(D));

Updating SSA information for statement D.43298_308 = switch_rtp_new (D.43184_295, D.43185_296, D.43172_298, D.43174_300, D.43187_302, D.43294_303, D.43296_306, &flags, timer_name_6, &err, D.43297_307);

Updating SSA information for statement a_engine_48->rtp_session = D.43298_308;

Updating SSA information for statement D.43077_309 = a_engine_48->rtp_session;

Updating SSA information for statement D.43299_310 = switch_rtp_ready (D.43077_309);



Registering new PHI nodes in block #94

Updating SSA information for statement D.43077_311 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_set_payload_map (D.43077_311, D.43302_312);



Registering new PHI nodes in block #95

Updating SSA information for statement D.43077_313 = a_engine_48->rtp_session;

Updating SSA information for statement D.43303_314 = switch_rtp_ready (D.43077_313);



Registering new PHI nodes in block #96

Updating SSA information for statement D.43099_315 = smh_46->mparams;

Updating SSA information for statement D.43306_316 = D.43099_315->vflags;

Updating SSA information for statement D.43099_319 = smh_46->mparams;

Updating SSA information for statement D.43306_320 = D.43099_319->vflags;

Updating SSA information for statement D.43073_323 = session_45(D)->channel;

Updating SSA information for statement D.43308_324 = switch_channel_direction (D.43073_323);

Updating SSA information for statement D.43310_327 = switch_core_session_get_pool (session_45(D));

Updating SSA information for statement switch_mutex_init (D.43309_326, 1, D.43310_327);

Updating SSA information for statement D.43073_328 = session_45(D)->channel;

Updating SSA information for statement ssrc_329 = switch_channel_get_variable_dup (D.43073_328, "rtp_use_ssrc", 1, -1);



Registering new PHI nodes in block #97

Updating SSA information for statement ssrc_ul_330 = strtoul (ssrc_329, 0B, 10);

Updating SSA information for statement D.43077_331 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_set_ssrc (D.43077_331, ssrc_ul_330);

Updating SSA information for statement a_engine_48->ssrc = ssrc_ul_330;



Registering new PHI nodes in block #98

Updating SSA information for statement D.43077_332 = a_engine_48->rtp_session;

Updating SSA information for statement D.43314_333 = a_engine_48->ssrc;

Updating SSA information for statement switch_rtp_set_ssrc (D.43077_332, D.43314_333);



Registering new PHI nodes in block #99

Updating SSA information for statement D.43315_334 = a_engine_48->remote_ssrc;



Registering new PHI nodes in block #100

Updating SSA information for statement D.43077_335 = a_engine_48->rtp_session;

Updating SSA information for statement D.43315_336 = a_engine_48->remote_ssrc;

Updating SSA information for statement switch_rtp_set_remote_ssrc (D.43077_335, D.43315_336);



Registering new PHI nodes in block #101

Updating SSA information for statement D.43073_337 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.43073_337, 36, 1);

Updating SSA information for statement D.43073_338 = session_45(D)->channel;

Updating SSA information for statement D.43171_339 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43187_340 = D.43171_339->agreed_pt;

Updating SSA information for statement switch_channel_set_variable_printf (D.43073_338, "rtp_use_pt", "%d", D.43188_341);

Updating SSA information for statement D.43073_342 = session_45(D)->channel;

Updating SSA information for statement val_343 = switch_channel_get_variable_dup (D.43073_342, "rtp_enable_vad_in", 1, -1);



Registering new PHI nodes in block #102

Updating SSA information for statement D.43320_344 = switch_true (val_343);



Registering new PHI nodes in block #103



Registering new PHI nodes in block #104

Updating SSA information for statement D.43073_346 = session_45(D)->channel;

Updating SSA information for statement val_347 = switch_channel_get_variable_dup (D.43073_346, "rtp_enable_vad_out", 1, -1);



Registering new PHI nodes in block #105

Updating SSA information for statement D.43325_348 = switch_true (val_347);



Registering new PHI nodes in block #106



Registering new PHI nodes in block #107

Updating SSA information for statement D.43073_350 = session_45(D)->channel;

Updating SSA information for statement val_351 = switch_channel_get_variable_dup (D.43073_350, "rtp_disable_vad_in", 1, -1);



Registering new PHI nodes in block #108

Updating SSA information for statement D.43330_352 = switch_true (val_351);



Registering new PHI nodes in block #109



Registering new PHI nodes in block #110

Updating SSA information for statement D.43073_354 = session_45(D)->channel;

Updating SSA information for statement val_355 = switch_channel_get_variable_dup (D.43073_354, "rtp_disable_vad_out", 1, -1);



Registering new PHI nodes in block #111

Updating SSA information for statement D.43335_356 = switch_true (val_355);



Registering new PHI nodes in block #112



Registering new PHI nodes in block #113

Updating SSA information for statement D.43077_358 = a_engine_48->rtp_session;

Updating SSA information for statement D.43338_359 = switch_rtp_get_ssrc (D.43077_358);

Updating SSA information for statement a_engine_48->ssrc = D.43338_359;

Updating SSA information for statement D.43073_360 = session_45(D)->channel;

Updating SSA information for statement D.43314_361 = a_engine_48->ssrc;

Updating SSA information for statement switch_channel_set_variable_printf (D.43073_360, "rtp_use_ssrc", "%u", D.43314_361);

Updating SSA information for statement D.43099_362 = smh_46->mparams;

Updating SSA information for statement D.43339_363 = D.43099_362->auto_rtp_bugs;



Registering new PHI nodes in block #114

Updating SSA information for statement D.43343_365 = a_engine_48->rtp_bugs;

Updating SSA information for statement a_engine_48->rtp_bugs = D.43344_366;



Registering new PHI nodes in block #115

Updating SSA information for statement D.43073_367 = session_45(D)->channel;

Updating SSA information for statement val_368 = switch_channel_get_variable_dup (D.43073_367, "rtp_manual_rtp_bugs", 1, -1);



Registering new PHI nodes in block #116

Updating SSA information for statement switch_core_media_parse_rtp_bugs (D.43347_369, val_368);



Registering new PHI nodes in block #117

Updating SSA information for statement D.43077_370 = a_engine_48->rtp_session;

Updating SSA information for statement D.43343_371 = a_engine_48->rtp_bugs;

Updating SSA information for statement D.43099_372 = smh_46->mparams;

Updating SSA information for statement D.43348_373 = D.43099_372->manual_rtp_bugs;

Updating SSA information for statement switch_rtp_intentional_bugs (D.43077_370, D.43349_374);



Registering new PHI nodes in block #118



Registering new PHI nodes in block #119

Updating SSA information for statement D.43077_381 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_enable_vad (D.43077_381, session_45(D), D.43359_382, 7);

Updating SSA information for statement D.43360_383 = switch_core_session_get_channel (session_45(D));

Updating SSA information for statement D.43361_384 = switch_channel_get_name (D.43360_383);



Registering new PHI nodes in block #120



Registering new PHI nodes in block #121



Registering new PHI nodes in block #122



Registering new PHI nodes in block #123



Registering new PHI nodes in block #124



Registering new PHI nodes in block #125

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5001, session_45(D), 7, "AUDIO RTP Engage VAD for %s ( %s %s )\n", D.43361_384, iftmp.47_29, iftmp.48_30);



Registering new PHI nodes in block #126

Updating SSA information for statement D.43370_389 = a_engine_48->ice_in.chosen[0];

Updating SSA information for statement D.43371_390 = a_engine_48->ice_in.cands[D.43370_389][0].ready;



Registering new PHI nodes in block #127

Updating SSA information for statement gen_ice (session_45(D), 0, 0B, 0);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5010, session_45(D), 6, "Activating Audio ICE\n");

Updating SSA information for statement D.43077_391 = a_engine_48->rtp_session;

Updating SSA information for statement D.43374_392 = a_engine_48->ice_in.ufrag;

Updating SSA information for statement D.43375_393 = a_engine_48->ice_out.ufrag;

Updating SSA information for statement D.43376_394 = a_engine_48->ice_out.pwd;

Updating SSA information for statement D.43377_395 = a_engine_48->ice_in.pwd;

Updating SSA information for statement D.43379_396 = switch_ice_direction (session_45(D));



Registering new PHI nodes in block #128



Registering new PHI nodes in block #129



Registering new PHI nodes in block #130

Updating SSA information for statement switch_rtp_activate_ice (D.43077_391, D.43374_392, D.43375_393, D.43376_394, D.43377_395, 0, iftmp.49_31, D.43383_399);



Registering new PHI nodes in block #131

Updating SSA information for statement D.43073_400 = session_45(D)->channel;

Updating SSA information for statement val_401 = switch_channel_get_variable_dup (D.43073_400, "rtcp_audio_interval_msec", 1, -1);



Registering new PHI nodes in block #132

Updating SSA information for statement D.43099_402 = smh_46->mparams;

Updating SSA information for statement val_403 = D.43099_402->rtcp_audio_interval_msec;



Registering new PHI nodes in block #133

Updating SSA information for statement D.43073_404 = session_45(D)->channel;

Updating SSA information for statement rport_405 = switch_channel_get_variable_dup (D.43073_404, "rtp_remote_audio_rtcp_port", 1, -1);

Updating SSA information for statement remote_rtcp_port_406 = a_engine_48->remote_rtcp_port;



Registering new PHI nodes in block #134

Updating SSA information for statement D.43392_410 = atoi (rport_405);



Registering new PHI nodes in block #135

Updating SSA information for statement D.43393_412 = strcasecmp (val_1, "passthru");



Registering new PHI nodes in block #136

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5043, session_45(D), 6, "Activating RTCP PASSTHRU PORT %d\n", D.43396_413);

Updating SSA information for statement D.43077_414 = a_engine_48->rtp_session;

Updating SSA information for statement D.43397_415 = a_engine_48->rtcp_mux;

Updating SSA information for statement switch_rtp_activate_rtcp (D.43077_414, -1, remote_rtcp_port_13, D.43398_416);



Registering new PHI nodes in block #137

Updating SSA information for statement interval_417 = atoi (val_1);



Registering new PHI nodes in block #138

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5048, session_45(D), 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_417);



Registering new PHI nodes in block #139

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5053, session_45(D), 6, "Activating RTCP PORT %d\n", D.43396_421);

Updating SSA information for statement D.43077_422 = a_engine_48->rtp_session;

Updating SSA information for statement D.43397_423 = a_engine_48->rtcp_mux;

Updating SSA information for statement switch_rtp_activate_rtcp (D.43077_422, interval_14, remote_rtcp_port_13, D.43398_424);



Registering new PHI nodes in block #140

Updating SSA information for statement D.43404_425 = a_engine_48->ice_in.chosen[1];

Updating SSA information for statement D.43405_426 = a_engine_48->ice_in.cands[D.43404_425][1].ready;



Registering new PHI nodes in block #141

Updating SSA information for statement D.43397_427 = a_engine_48->rtcp_mux;



Registering new PHI nodes in block #142

Updating SSA information for statement D.43404_428 = a_engine_48->ice_in.chosen[1];

Updating SSA information for statement D.43411_429 = a_engine_48->ice_in.cands[D.43404_428][1].con_addr;

Updating SSA information for statement D.43370_430 = a_engine_48->ice_in.chosen[0];

Updating SSA information for statement D.43412_431 = a_engine_48->ice_in.cands[D.43370_430][0].con_addr;

Updating SSA information for statement D.39377_432 = __builtin_strcmp (D.43411_429, D.43412_431);



Registering new PHI nodes in block #143

Updating SSA information for statement D.43404_433 = a_engine_48->ice_in.chosen[1];

Updating SSA information for statement D.43414_434 = a_engine_48->ice_in.cands[D.43404_433][1].con_port;

Updating SSA information for statement D.43370_435 = a_engine_48->ice_in.chosen[0];

Updating SSA information for statement D.43415_436 = a_engine_48->ice_in.cands[D.43370_435][0].con_port;



Registering new PHI nodes in block #144

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5061, session_45(D), 6, "Skipping RTCP ICE (Same as RTP)\n");



Registering new PHI nodes in block #145

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5063, session_45(D), 6, "Activating RTCP ICE\n");

Updating SSA information for statement D.43077_437 = a_engine_48->rtp_session;

Updating SSA information for statement D.43374_438 = a_engine_48->ice_in.ufrag;

Updating SSA information for statement D.43375_439 = a_engine_48->ice_out.ufrag;

Updating SSA information for statement D.43376_440 = a_engine_48->ice_out.pwd;

Updating SSA information for statement D.43377_441 = a_engine_48->ice_in.pwd;

Updating SSA information for statement D.43418_442 = switch_ice_direction (session_45(D));



Registering new PHI nodes in block #146



Registering new PHI nodes in block #147



Registering new PHI nodes in block #148

Updating SSA information for statement switch_rtp_activate_ice (D.43077_437, D.43374_438, D.43375_439, D.43376_440, D.43377_441, 1, iftmp.51_32, D.43383_445);



Registering new PHI nodes in block #149

Updating SSA information for statement D.43423_447 = _zstr (D.43422_446);



Registering new PHI nodes in block #150

Updating SSA information for statement D.43426_448 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #151

Updating SSA information for statement D.43429_449 = smh_46->session;

Updating SSA information for statement D.43430_450 = dtls_ok (D.43429_449);



Registering new PHI nodes in block #152

Updating SSA information for statement D.43429_451 = smh_46->session;

Updating SSA information for statement D.43434_452 = D.43429_451->channel;

Updating SSA information for statement D.43435_453 = switch_channel_direction (D.43434_452);



Registering new PHI nodes in block #153



Registering new PHI nodes in block #154



Registering new PHI nodes in block #155

Updating SSA information for statement D.43429_457 = smh_46->session;

Updating SSA information for statement D.43434_458 = D.43429_457->channel;

Updating SSA information for statement D.43439_459 = switch_channel_test_flag (D.43434_458, 112);



Registering new PHI nodes in block #156



Registering new PHI nodes in block #157



Registering new PHI nodes in block #158



Registering new PHI nodes in block #159



Registering new PHI nodes in block #160

Updating SSA information for statement D.43397_464 = a_engine_48->rtcp_mux;



Registering new PHI nodes in block #161

Updating SSA information for statement D.43099_465 = smh_46->mparams;

Updating SSA information for statement D.43448_466 = D.43099_465->rtcp_audio_interval_msec;



Registering new PHI nodes in block #162



Registering new PHI nodes in block #163

Updating SSA information for statement D.43077_468 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_add_dtls (D.43077_468, D.43451_469, D.43452_470, D.43453_471);

Updating SSA information for statement D.43397_472 = a_engine_48->rtcp_mux;



Registering new PHI nodes in block #164

Updating SSA information for statement D.43099_473 = smh_46->mparams;

Updating SSA information for statement D.43448_474 = D.43099_473->rtcp_audio_interval_msec;



Registering new PHI nodes in block #165

Updating SSA information for statement D.43077_476 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_add_dtls (D.43077_476, D.43451_477, D.43452_478, D.43453_479);



Registering new PHI nodes in block #166

Updating SSA information for statement D.43073_480 = session_45(D)->channel;

Updating SSA information for statement val_481 = switch_channel_get_variable_dup (D.43073_480, "jitterbuffer_msec", 1, -1);



Registering new PHI nodes in block #167

Updating SSA information for statement D.43099_482 = smh_46->mparams;

Updating SSA information for statement val_483 = D.43099_482->jb_msec;



Registering new PHI nodes in block #168

Updating SSA information for statement jb_msec_484 = atoi (val_2);

Updating SSA information for statement p_487 = __builtin_strchr (val_2, 58);



Registering new PHI nodes in block #169

Updating SSA information for statement maxlen_489 = atoi (p_488);

Updating SSA information for statement q_490 = __builtin_strchr (p_488, 58);



Registering new PHI nodes in block #170

Updating SSA information for statement D.43465_492 = atoi (q_491);



Registering new PHI nodes in block #171



Registering new PHI nodes in block #172

Updating SSA information for statement D.43470_496 = a_engine_48->read_codec.implementation;

Updating SSA information for statement D.43471_497 = D.43470_496->microseconds_per_packet;



Registering new PHI nodes in block #173



Registering new PHI nodes in block #174

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5125, session_45(D), 3, "Invalid Jitterbuffer spec [%d] must be between 20 and 10000\n", jb_msec_17);



Registering new PHI nodes in block #175

Updating SSA information for statement D.43189_504 = a_engine_48->read_impl.microseconds_per_packet;



Registering new PHI nodes in block #176



Registering new PHI nodes in block #177



Registering new PHI nodes in block #178

Updating SSA information for statement D.43189_508 = a_engine_48->read_impl.microseconds_per_packet;



Registering new PHI nodes in block #179



Registering new PHI nodes in block #180



Registering new PHI nodes in block #181

Updating SSA information for statement D.43077_512 = a_engine_48->rtp_session;

Updating SSA information for statement D.43294_515 = a_engine_48->read_impl.samples_per_packet;

Updating SSA information for statement D.43486_516 = a_engine_48->read_impl.samples_per_second;

Updating SSA information for statement D.43488_518 = switch_rtp_activate_jitter_buffer (D.43077_512, qlen.55_513, maxqlen.56_514, D.43294_515, D.43486_516, max_drift.57_517);



Registering new PHI nodes in block #182

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5146, session_45(D), 7, "Setting Jitterbuffer to %dms (%d frames)\n", jb_msec_17, qlen_20);

Updating SSA information for statement D.43073_519 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.43073_519, 57, 1);

Updating SSA information for statement D.43073_520 = session_45(D)->channel;

Updating SSA information for statement D.43491_521 = switch_channel_get_variable_dup (D.43073_520, "rtp_jitter_buffer_plc", 1, -1);

Updating SSA information for statement D.43492_522 = switch_false (D.43491_521);



Registering new PHI nodes in block #183

Updating SSA information for statement D.43073_523 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.43073_523, 58, 1);



Registering new PHI nodes in block #184

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5153, session_45(D), 4, "Error Setting Jitterbuffer to %dms (%d frames)\n", jb_msec_17, qlen_20);



Registering new PHI nodes in block #185

Updating SSA information for statement D.43073_524 = session_45(D)->channel;

Updating SSA information for statement val_525 = switch_channel_get_variable_dup (D.43073_524, "rtp_timeout_sec", 1, -1);



Registering new PHI nodes in block #186

Updating SSA information for statement v_526 = atoi (val_525);



Registering new PHI nodes in block #187

Updating SSA information for statement D.43099_527 = smh_46->mparams;

Updating SSA information for statement D.43099_527->rtp_timeout_sec = v.58_528;



Registering new PHI nodes in block #188

Updating SSA information for statement D.43073_529 = session_45(D)->channel;

Updating SSA information for statement val_530 = switch_channel_get_variable_dup (D.43073_529, "rtp_hold_timeout_sec", 1, -1);



Registering new PHI nodes in block #189

Updating SSA information for statement v_531 = atoi (val_530);



Registering new PHI nodes in block #190

Updating SSA information for statement D.43099_532 = smh_46->mparams;

Updating SSA information for statement D.43099_532->rtp_hold_timeout_sec = v.59_533;



Registering new PHI nodes in block #191

Updating SSA information for statement D.43099_534 = smh_46->mparams;

Updating SSA information for statement D.43506_535 = D.43099_534->rtp_timeout_sec;



Registering new PHI nodes in block #192

Updating SSA information for statement D.43486_536 = a_engine_48->read_impl.samples_per_second;

Updating SSA information for statement D.43099_537 = smh_46->mparams;

Updating SSA information for statement D.43506_538 = D.43099_537->rtp_timeout_sec;

Updating SSA information for statement D.43294_540 = a_engine_48->read_impl.samples_per_packet;

Updating SSA information for statement a_engine_48->max_missed_packets = D.43510_541;

Updating SSA information for statement D.43077_542 = a_engine_48->rtp_session;

Updating SSA information for statement D.43511_543 = a_engine_48->max_missed_packets;

Updating SSA information for statement switch_rtp_set_max_missed_packets (D.43077_542, D.43511_543);

Updating SSA information for statement D.43099_544 = smh_46->mparams;

Updating SSA information for statement D.43512_545 = D.43099_544->rtp_hold_timeout_sec;



Registering new PHI nodes in block #193

Updating SSA information for statement D.43099_546 = smh_46->mparams;

Updating SSA information for statement D.43099_547 = smh_46->mparams;

Updating SSA information for statement D.43506_548 = D.43099_547->rtp_timeout_sec;

Updating SSA information for statement D.43099_547->rtp_hold_timeout_sec = D.43515_549;



Registering new PHI nodes in block #194

Updating SSA information for statement D.43099_550 = smh_46->mparams;

Updating SSA information for statement D.43512_551 = D.43099_550->rtp_hold_timeout_sec;



Registering new PHI nodes in block #195

Updating SSA information for statement D.43486_552 = a_engine_48->read_impl.samples_per_second;

Updating SSA information for statement D.43099_553 = smh_46->mparams;

Updating SSA information for statement D.43512_554 = D.43099_553->rtp_hold_timeout_sec;

Updating SSA information for statement D.43294_556 = a_engine_48->read_impl.samples_per_packet;

Updating SSA information for statement a_engine_48->max_missed_hold_packets = D.43519_557;



Registering new PHI nodes in block #196

Updating SSA information for statement D.43099_558 = smh_46->mparams;

Updating SSA information for statement D.43520_559 = D.43099_558->te;



Registering new PHI nodes in block #197

Updating SSA information for statement D.43099_560 = smh_46->mparams;

Updating SSA information for statement D.43520_561 = D.43099_560->te;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5188, session_45(D), 7, "Set 2833 dtmf send payload to %u\n", D.43523_562);

Updating SSA information for statement D.43077_563 = a_engine_48->rtp_session;

Updating SSA information for statement D.43099_564 = smh_46->mparams;

Updating SSA information for statement D.43520_565 = D.43099_564->te;

Updating SSA information for statement switch_rtp_set_telephony_event (D.43077_563, D.43520_565);

Updating SSA information for statement D.43073_566 = session_45(D)->channel;

Updating SSA information for statement D.43099_567 = smh_46->mparams;

Updating SSA information for statement D.43520_568 = D.43099_567->te;

Updating SSA information for statement switch_channel_set_variable_printf (D.43073_566, "rtp_2833_send_payload", "%d", D.43523_569);



Registering new PHI nodes in block #198

Updating SSA information for statement D.43099_570 = smh_46->mparams;

Updating SSA information for statement D.43524_571 = D.43099_570->recv_te;



Registering new PHI nodes in block #199

Updating SSA information for statement D.43099_572 = smh_46->mparams;

Updating SSA information for statement D.43524_573 = D.43099_572->recv_te;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5194, session_45(D), 7, "Set 2833 dtmf receive payload to %u\n", D.43527_574);

Updating SSA information for statement D.43077_575 = a_engine_48->rtp_session;

Updating SSA information for statement D.43099_576 = smh_46->mparams;

Updating SSA information for statement D.43524_577 = D.43099_576->recv_te;

Updating SSA information for statement switch_rtp_set_telephony_recv_event (D.43077_575, D.43524_577);

Updating SSA information for statement D.43073_578 = session_45(D)->channel;

Updating SSA information for statement D.43099_579 = smh_46->mparams;

Updating SSA information for statement D.43524_580 = D.43099_579->recv_te;

Updating SSA information for statement switch_channel_set_variable_printf (D.43073_578, "rtp_2833_recv_payload", "%d", D.43527_581);



Registering new PHI nodes in block #200

Updating SSA information for statement D.43531_582 = switch_media_handle_test_media_flag (smh_46, 9);



Registering new PHI nodes in block #201

Updating SSA information for statement D.43073_583 = session_45(D)->channel;

Updating SSA information for statement val_584 = switch_channel_get_variable_dup (D.43073_583, "supress_cng", 1, -1);



Registering new PHI nodes in block #202

Updating SSA information for statement D.43534_585 = switch_true (val_584);



Registering new PHI nodes in block #203

Updating SSA information for statement D.43073_586 = session_45(D)->channel;

Updating SSA information for statement val_587 = switch_channel_get_variable_dup (D.43073_586, "suppress_cng", 1, -1);



Registering new PHI nodes in block #204

Updating SSA information for statement D.43536_588 = switch_true (val_587);



Registering new PHI nodes in block #205

Updating SSA information for statement D.43099_589 = smh_46->mparams;

Updating SSA information for statement D.43099_589->cng_pt = 0;



Registering new PHI nodes in block #206

Updating SSA information for statement D.43073_590 = session_45(D)->channel;

Updating SSA information for statement val_591 = switch_channel_get_variable_dup (D.43073_590, "rtp_digit_delay", 1, -1);



Registering new PHI nodes in block #207

Updating SSA information for statement delayi_592 = atoi (val_591);



Registering new PHI nodes in block #208



Registering new PHI nodes in block #209

Updating SSA information for statement D.43099_594 = smh_46->mparams;

Updating SSA information for statement D.43099_594->dtmf_delay = delayi.60_595;



Registering new PHI nodes in block #210

Updating SSA information for statement D.43099_596 = smh_46->mparams;

Updating SSA information for statement D.43542_597 = D.43099_596->dtmf_delay;



Registering new PHI nodes in block #211

Updating SSA information for statement D.43077_598 = a_engine_48->rtp_session;

Updating SSA information for statement D.43099_599 = smh_46->mparams;

Updating SSA information for statement D.43542_600 = D.43099_599->dtmf_delay;

Updating SSA information for statement switch_rtp_set_interdigit_delay (D.43077_598, D.43542_600);

Updating SSA information for statement D.43073_601 = session_45(D)->channel;

Updating SSA information for statement D.43545_602 = switch_channel_get_name (D.43073_601);

Updating SSA information for statement D.43099_603 = smh_46->mparams;

Updating SSA information for statement D.43542_604 = D.43099_603->dtmf_delay;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5216, session_45(D), 7, "%s Set rtp dtmf delay to %u\n", D.43545_602, D.43542_604);



Registering new PHI nodes in block #212

Updating SSA information for statement D.43099_605 = smh_46->mparams;

Updating SSA information for statement D.43143_606 = D.43099_605->cng_pt;



Registering new PHI nodes in block #213

Updating SSA information for statement D.43548_607 = switch_media_handle_test_media_flag (smh_46, 9);



Registering new PHI nodes in block #214

Updating SSA information for statement D.43099_608 = smh_46->mparams;

Updating SSA information for statement D.43143_609 = D.43099_608->cng_pt;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5222, session_45(D), 7, "Set comfort noise payload to %u\n", D.43551_610);

Updating SSA information for statement D.43077_611 = a_engine_48->rtp_session;

Updating SSA information for statement D.43099_612 = smh_46->mparams;

Updating SSA information for statement D.43143_613 = D.43099_612->cng_pt;

Updating SSA information for statement switch_rtp_set_cng_pt (D.43077_611, D.43143_613);



Registering new PHI nodes in block #215

Updating SSA information for statement switch_core_session_apply_crypto (session_45(D), 0);

Updating SSA information for statement D.43171_614 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_615 = D.43171_614->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.43179_616);

Updating SSA information for statement D.43073_617 = session_45(D)->channel;

Updating SSA information for statement D.43171_618 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_619 = D.43171_618->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_617, "remote_media_ip", D.43172_619, 1);

Updating SSA information for statement D.43073_620 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_620, "remote_media_port", &tmp, 1);

Updating SSA information for statement D.43073_621 = session_45(D)->channel;

Updating SSA information for statement D.43552_622 = switch_channel_test_flag (D.43073_621, 74);



Registering new PHI nodes in block #216

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5234, session_45(D), 6, "Activating ZRTP PROXY MODE\n");

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5235, session_45(D), 7, "Disable NOTIMER_DURING_BRIDGE\n");

Updating SSA information for statement D.43073_623 = session_45(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.43073_623, 99);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5237, session_45(D), 7, "Activating audio UDPTL mode\n");

Updating SSA information for statement D.43077_624 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_udptl_mode (D.43077_624);



Registering new PHI nodes in block #324

Updating SSA information for statement err.45_625 = err;



Registering new PHI nodes in block #325

Updating SSA information for statement iftmp.68_626 = err;



Registering new PHI nodes in block #326



Registering new PHI nodes in block #327

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5554, session_45(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", iftmp.68_41);

Updating SSA information for statement D.43073_628 = session_45(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.43073_628, "src/switch_core_media.c", &__func__, 5555, 27);



Registering new PHI nodes in block #217

Updating SSA information for statement D.43073_630 = session_45(D)->channel;

Updating SSA information for statement D.43555_631 = switch_channel_direction (D.43073_630);



Registering new PHI nodes in block #218

Updating SSA information for statement switch_core_media_check_video_codecs (session_45(D));



Registering new PHI nodes in block #219

Updating SSA information for statement D.43073_632 = session_45(D)->channel;

Updating SSA information for statement D.43558_633 = switch_channel_test_flag (D.43073_632, 98);



Registering new PHI nodes in block #220

Updating SSA information for statement D.43561_634 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43562_635 = D.43561_634->rm_encoding;



Registering new PHI nodes in block #221

Updating SSA information for statement D.43561_636 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_637 = D.43561_636->remote_sdp_port;



Registering new PHI nodes in block #222

Updating SSA information for statement D.43096_638 = v_engine_49->rtp_session;



Registering new PHI nodes in block #223

Updating SSA information for statement D.43073_639 = session_45(D)->channel;

Updating SSA information for statement D.43570_640 = switch_channel_test_flag (D.43073_639, 103);



Registering new PHI nodes in block #224

Updating SSA information for statement D.43096_641 = v_engine_49->rtp_session;

Updating SSA information for statement remote_host_642 = switch_rtp_get_remote_host (D.43096_641);

Updating SSA information for statement D.43096_643 = v_engine_49->rtp_session;

Updating SSA information for statement remote_port_644 = switch_rtp_get_remote_port (D.43096_643);



Registering new PHI nodes in block #225

Updating SSA information for statement D.43561_648 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_649 = D.43561_648->remote_sdp_ip;

Updating SSA information for statement D.39400_650 = __builtin_strcmp (remote_host_642, D.43578_649);



Registering new PHI nodes in block #226

Updating SSA information for statement D.43561_651 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_652 = D.43561_651->remote_sdp_port;



Registering new PHI nodes in block #227

Updating SSA information for statement D.43073_653 = session_45(D)->channel;

Updating SSA information for statement D.43581_654 = switch_channel_get_name (D.43073_653);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5263, session_45(D), 7, "Video params are unchanged for %s.\n", D.43581_654);



Registering new PHI nodes in block #228

Updating SSA information for statement D.43073_655 = session_45(D)->channel;

Updating SSA information for statement D.43582_656 = switch_channel_get_name (D.43073_655);

Updating SSA information for statement D.43561_658 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_659 = D.43561_658->remote_sdp_ip;

Updating SSA information for statement D.43561_660 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_661 = D.43561_660->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5267, session_45(D), 7, "Video params changed for %s from %s:%d to %s:%d\n", D.43582_656, remote_host_642, D.43583_657, D.43578_659, D.43584_662);



Registering new PHI nodes in block #229

Updating SSA information for statement D.43073_663 = session_45(D)->channel;

Updating SSA information for statement D.43585_664 = switch_channel_test_flag (D.43073_663, 29);



Registering new PHI nodes in block #230

Updating SSA information for statement D.43096_665 = v_engine_49->rtp_session;

Updating SSA information for statement D.43588_666 = switch_rtp_ready (D.43096_665);



Registering new PHI nodes in block #231

Updating SSA information for statement D.43073_667 = session_45(D)->channel;

Updating SSA information for statement D.43591_668 = switch_channel_get_name (D.43073_667);

Updating SSA information for statement D.43171_669 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_670 = D.43171_669->remote_sdp_ip;

Updating SSA information for statement D.43592_671 = v_engine_49->local_sdp_port;

Updating SSA information for statement D.43561_673 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_674 = D.43561_673->remote_sdp_ip;

Updating SSA information for statement D.43561_675 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_676 = D.43561_675->remote_sdp_port;

Updating SSA information for statement D.43561_678 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_679 = D.43561_678->agreed_pt;

Updating SSA information for statement D.43189_681 = a_engine_48->read_impl.microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5275, session_45(D), 7, "VIDEO RTP [%s] %s port %d -> %s port %d codec: %u ms: %d\n", D.43591_668, D.43172_670, D.43593_672, D.43578_674, D.43584_677, D.43595_680, D.43190_682);

Updating SSA information for statement start_video_thread (session_45(D));

Updating SSA information for statement D.43096_683 = v_engine_49->rtp_session;

Updating SSA information for statement D.43561_684 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_685 = D.43561_684->agreed_pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.43096_683, D.43594_685);



Registering new PHI nodes in block #232

Updating SSA information for statement D.43592_686 = v_engine_49->local_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.43593_687);

Updating SSA information for statement D.43073_688 = session_45(D)->channel;

Updating SSA information for statement D.43191_689 = a_engine_48->adv_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_688, "local_video_ip", D.43191_689, 1);

Updating SSA information for statement D.43073_690 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_690, "local_video_port", &tmp, 1);

Updating SSA information for statement D.43096_691 = v_engine_49->rtp_session;



Registering new PHI nodes in block #233

Updating SSA information for statement D.43073_692 = session_45(D)->channel;

Updating SSA information for statement D.43598_693 = switch_channel_test_flag (D.43073_692, 103);



Registering new PHI nodes in block #234

Updating SSA information for statement remote_rtcp_port_695 = v_engine_49->remote_rtcp_port;



Registering new PHI nodes in block #235

Updating SSA information for statement D.43073_696 = session_45(D)->channel;

Updating SSA information for statement rport_697 = switch_channel_get_variable_dup (D.43073_696, "rtp_remote_video_rtcp_port", 1, -1);



Registering new PHI nodes in block #236

Updating SSA information for statement D.43605_698 = atoi (rport_697);



Registering new PHI nodes in block #237

Updating SSA information for statement D.43096_700 = v_engine_49->rtp_session;

Updating SSA information for statement D.43561_701 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_702 = D.43561_701->remote_sdp_ip;

Updating SSA information for statement D.43561_703 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_704 = D.43561_703->remote_sdp_port;

Updating SSA information for statement D.43606_705 = switch_rtp_set_remote_address (D.43096_700, D.43578_702, D.43565_704, remote_rtcp_port_24, 1, &err);



Registering new PHI nodes in block #238

Updating SSA information for statement err.45_706 = err;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5306, session_45(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", err.45_706);



Registering new PHI nodes in block #239

Updating SSA information for statement D.43561_707 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_708 = D.43561_707->remote_sdp_ip;

Updating SSA information for statement D.43561_709 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_710 = D.43561_709->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5308, session_45(D), 7, "VIDEO RTP CHANGING DEST TO: [%s:%d]\n", D.43578_708, D.43584_711);

Updating SSA information for statement D.43612_712 = switch_media_handle_test_media_flag (smh_46, 10);



Registering new PHI nodes in block #240

Updating SSA information for statement D.43073_713 = session_45(D)->channel;

Updating SSA information for statement D.43615_714 = switch_channel_test_flag (D.43073_713, 106);



Registering new PHI nodes in block #241

Updating SSA information for statement D.43073_715 = session_45(D)->channel;

Updating SSA information for statement val_716 = switch_channel_get_variable_dup (D.43073_715, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #242

Updating SSA information for statement D.43619_717 = switch_true (val_716);



Registering new PHI nodes in block #243

Updating SSA information for statement D.43096_718 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.43096_718, 7);

Updating SSA information for statement start_video_thread (session_45(D));



Registering new PHI nodes in block #244

Updating SSA information for statement D.43073_719 = session_45(D)->channel;

Updating SSA information for statement D.43620_720 = switch_channel_test_flag (D.43073_719, 29);



Registering new PHI nodes in block #245

Updating SSA information for statement switch_core_media_proxy_remote_addr (session_45(D), 0B);

Updating SSA information for statement memset (&flags, 0, 156);

Updating SSA information for statement D.43270_721 = flags[19];

Updating SSA information for statement flags[19] = D.43271_722;

Updating SSA information for statement D.43102_723 = flags[13];

Updating SSA information for statement flags[13] = D.43103_724;

Updating SSA information for statement D.43625_725 = switch_media_handle_test_media_flag (smh_46, 10);



Registering new PHI nodes in block #246

Updating SSA information for statement D.43073_726 = session_45(D)->channel;

Updating SSA information for statement D.43628_727 = switch_channel_test_flag (D.43073_726, 106);



Registering new PHI nodes in block #247

Updating SSA information for statement D.43073_728 = session_45(D)->channel;

Updating SSA information for statement val_729 = switch_channel_get_variable_dup (D.43073_728, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #248

Updating SSA information for statement D.43632_730 = switch_true (val_729);



Registering new PHI nodes in block #249

Updating SSA information for statement D.43114_731 = flags[7];

Updating SSA information for statement flags[7] = D.43115_732;



Registering new PHI nodes in block #250

Updating SSA information for statement D.43073_734 = session_45(D)->channel;

Updating SSA information for statement D.43633_735 = switch_channel_get_name (D.43073_734);

Updating SSA information for statement D.43171_736 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_737 = D.43171_736->remote_sdp_ip;

Updating SSA information for statement D.43592_738 = v_engine_49->local_sdp_port;

Updating SSA information for statement D.43561_740 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_741 = D.43561_740->remote_sdp_ip;

Updating SSA information for statement D.43561_742 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_743 = D.43561_742->remote_sdp_port;

Updating SSA information for statement D.43561_745 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_746 = D.43561_745->agreed_pt;

Updating SSA information for statement D.43634_748 = v_engine_49->read_impl.microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5334, session_45(D), 7, "PROXY VIDEO RTP [%s] %s:%d->%s:%d codec: %u ms: %d\n", D.43633_735, D.43172_737, D.43593_739, D.43578_741, D.43584_744, D.43595_747, D.43635_749);

Updating SSA information for statement D.43096_750 = v_engine_49->rtp_session;

Updating SSA information for statement D.43636_751 = switch_rtp_ready (D.43096_750);



Registering new PHI nodes in block #251

Updating SSA information for statement D.43096_752 = v_engine_49->rtp_session;

Updating SSA information for statement D.43561_753 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_754 = D.43561_753->agreed_pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.43096_752, D.43594_754);



Registering new PHI nodes in block #252

Updating SSA information for statement D.43099_755 = smh_46->mparams;

Updating SSA information for statement timer_name_756 = D.43099_755->timer_name;

Updating SSA information for statement D.43073_757 = session_45(D)->channel;

Updating SSA information for statement var_758 = switch_channel_get_variable_dup (D.43073_757, "rtp_timer_name", 1, -1);



Registering new PHI nodes in block #253



Registering new PHI nodes in block #254

Updating SSA information for statement D.43096_760 = v_engine_49->rtp_session;



Registering new PHI nodes in block #255

Updating SSA information for statement D.43592_761 = v_engine_49->local_sdp_port;



Registering new PHI nodes in block #256

Updating SSA information for statement switch_core_media_choose_port (session_45(D), 1, 1);



Registering new PHI nodes in block #257

Updating SSA information for statement memset (&flags, 0, 156);

Updating SSA information for statement D.43102_762 = flags[13];

Updating SSA information for statement flags[13] = D.43103_763;

Updating SSA information for statement D.43137_764 = flags[8];

Updating SSA information for statement flags[8] = D.43138_765;

Updating SSA information for statement D.43647_766 = switch_media_handle_test_media_flag (smh_46, 10);



Registering new PHI nodes in block #258

Updating SSA information for statement D.43073_767 = session_45(D)->channel;

Updating SSA information for statement D.43650_768 = switch_channel_test_flag (D.43073_767, 15);



Registering new PHI nodes in block #259

Updating SSA information for statement D.43073_769 = session_45(D)->channel;

Updating SSA information for statement val_770 = switch_channel_get_variable_dup (D.43073_769, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #260

Updating SSA information for statement D.43654_771 = switch_true (val_770);



Registering new PHI nodes in block #261

Updating SSA information for statement D.43073_772 = session_45(D)->channel;

Updating SSA information for statement D.43655_773 = switch_channel_test_flag (D.43073_772, 106);



Registering new PHI nodes in block #262

Updating SSA information for statement D.43114_774 = flags[7];

Updating SSA information for statement flags[7] = D.43115_775;



Registering new PHI nodes in block #263

Updating SSA information for statement D.43073_776 = session_45(D)->channel;

Updating SSA information for statement D.43658_777 = switch_channel_test_flag (D.43073_776, 29);



Registering new PHI nodes in block #264

Updating SSA information for statement D.43270_778 = flags[19];

Updating SSA information for statement flags[19] = D.43271_779;



Registering new PHI nodes in block #265

Updating SSA information for statement switch_core_media_set_video_codec (session_45(D), 0);

Updating SSA information for statement flags[3] = 0;

Updating SSA information for statement flags[0] = 0;

Updating SSA information for statement D.43661_780 = flags[30];

Updating SSA information for statement flags[30] = D.43662_781;

Updating SSA information for statement D.43184_782 = a_engine_48->local_sdp_ip;

Updating SSA information for statement D.43592_783 = v_engine_49->local_sdp_port;

Updating SSA information for statement D.43561_784 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_785 = D.43561_784->remote_sdp_ip;

Updating SSA information for statement D.43561_786 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_787 = D.43561_786->remote_sdp_port;

Updating SSA information for statement D.43561_788 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_789 = D.43561_788->agreed_pt;

Updating SSA information for statement D.43663_790 = switch_core_session_get_pool (session_45(D));

Updating SSA information for statement D.43664_791 = switch_rtp_new (D.43184_782, D.43592_783, D.43578_785, D.43565_787, D.43594_789, 1, 90000, &flags, 0B, &err, D.43663_790);

Updating SSA information for statement v_engine_49->rtp_session = D.43664_791;

Updating SSA information for statement D.43073_792 = session_45(D)->channel;

Updating SSA information for statement D.43666_793 = switch_channel_test_flag (D.43073_792, 29);



Registering new PHI nodes in block #266



Registering new PHI nodes in block #267



Registering new PHI nodes in block #268

Updating SSA information for statement D.43073_796 = session_45(D)->channel;

Updating SSA information for statement D.43670_797 = switch_channel_get_name (D.43073_796);

Updating SSA information for statement D.43171_798 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_799 = D.43171_798->remote_sdp_ip;

Updating SSA information for statement D.43592_800 = v_engine_49->local_sdp_port;

Updating SSA information for statement D.43561_802 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_803 = D.43561_802->remote_sdp_ip;

Updating SSA information for statement D.43561_804 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_805 = D.43561_804->remote_sdp_port;

Updating SSA information for statement D.43561_807 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_808 = D.43561_807->agreed_pt;

Updating SSA information for statement D.43096_810 = v_engine_49->rtp_session;

Updating SSA information for statement D.43672_811 = switch_rtp_ready (D.43096_810);



Registering new PHI nodes in block #269

Updating SSA information for statement iftmp.62_812 = err;



Registering new PHI nodes in block #270



Registering new PHI nodes in block #271

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5391, session_45(D), 7, "%sVIDEO RTP [%s] %s:%d->%s:%d codec: %u ms: %d [%s]\n", iftmp.61_35, D.43670_797, D.43172_799, D.43593_801, D.43578_803, D.43584_806, D.43595_809, 0, iftmp.62_36);

Updating SSA information for statement D.43096_814 = v_engine_49->rtp_session;

Updating SSA information for statement D.43676_815 = switch_rtp_ready (D.43096_814);



Registering new PHI nodes in block #272

Updating SSA information for statement D.43679_816 = v_engine_49->fir;



Registering new PHI nodes in block #273

Updating SSA information for statement D.43096_817 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.43096_817, 36);



Registering new PHI nodes in block #274

Updating SSA information for statement D.43682_818 = v_engine_49->pli;



Registering new PHI nodes in block #275

Updating SSA information for statement D.43096_819 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.43096_819, 37);



Registering new PHI nodes in block #276

Updating SSA information for statement D.43096_820 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_set_payload_map (D.43096_820, D.43685_821);

Updating SSA information for statement start_video_thread (session_45(D));

Updating SSA information for statement D.43073_822 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.43073_822, 23, 1);

Updating SSA information for statement D.43073_823 = session_45(D)->channel;

Updating SSA information for statement ssrc_824 = switch_channel_get_variable_dup (D.43073_823, "rtp_use_video_ssrc", 1, -1);



Registering new PHI nodes in block #277

Updating SSA information for statement ssrc_ul_825 = strtoul (ssrc_824, 0B, 10);

Updating SSA information for statement D.43096_826 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_set_ssrc (D.43096_826, ssrc_ul_825);

Updating SSA information for statement v_engine_49->ssrc = ssrc_ul_825;



Registering new PHI nodes in block #278

Updating SSA information for statement D.43096_827 = v_engine_49->rtp_session;

Updating SSA information for statement D.43689_828 = v_engine_49->ssrc;

Updating SSA information for statement switch_rtp_set_ssrc (D.43096_827, D.43689_828);



Registering new PHI nodes in block #279

Updating SSA information for statement D.43690_829 = v_engine_49->remote_ssrc;



Registering new PHI nodes in block #280

Updating SSA information for statement D.43096_830 = v_engine_49->rtp_session;

Updating SSA information for statement D.43690_831 = v_engine_49->remote_ssrc;

Updating SSA information for statement switch_rtp_set_remote_ssrc (D.43096_830, D.43690_831);



Registering new PHI nodes in block #281

Updating SSA information for statement D.43693_832 = v_engine_49->ice_in.chosen[0];

Updating SSA information for statement D.43694_833 = v_engine_49->ice_in.cands[D.43693_832][0].ready;



Registering new PHI nodes in block #282

Updating SSA information for statement gen_ice (session_45(D), 1, 0B, 0);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5433, session_45(D), 6, "Activating Video ICE\n");

Updating SSA information for statement D.43096_834 = v_engine_49->rtp_session;

Updating SSA information for statement D.43697_835 = v_engine_49->ice_in.ufrag;

Updating SSA information for statement D.43698_836 = v_engine_49->ice_out.ufrag;

Updating SSA information for statement D.43699_837 = v_engine_49->ice_out.pwd;

Updating SSA information for statement D.43700_838 = v_engine_49->ice_in.pwd;

Updating SSA information for statement D.43702_839 = switch_ice_direction (session_45(D));



Registering new PHI nodes in block #283



Registering new PHI nodes in block #284



Registering new PHI nodes in block #285

Updating SSA information for statement switch_rtp_activate_ice (D.43096_834, D.43697_835, D.43698_836, D.43699_837, D.43700_838, 0, iftmp.63_37, D.43706_842);



Registering new PHI nodes in block #286

Updating SSA information for statement D.43073_843 = session_45(D)->channel;

Updating SSA information for statement val_844 = switch_channel_get_variable_dup (D.43073_843, "rtcp_video_interval_msec", 1, -1);



Registering new PHI nodes in block #287

Updating SSA information for statement D.43099_845 = smh_46->mparams;

Updating SSA information for statement val_846 = D.43099_845->rtcp_video_interval_msec;



Registering new PHI nodes in block #288

Updating SSA information for statement D.43073_847 = session_45(D)->channel;

Updating SSA information for statement rport_848 = switch_channel_get_variable_dup (D.43073_847, "rtp_remote_video_rtcp_port", 1, -1);

Updating SSA information for statement remote_port_849 = v_engine_49->remote_rtcp_port;



Registering new PHI nodes in block #289

Updating SSA information for statement D.43712_850 = atoi (rport_848);



Registering new PHI nodes in block #290

Updating SSA information for statement D.43713_852 = strcasecmp (val_3, "passthru");



Registering new PHI nodes in block #291

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5462, session_45(D), 6, "Activating VIDEO RTCP PASSTHRU PORT %d\n", D.43716_853);

Updating SSA information for statement D.43096_854 = v_engine_49->rtp_session;

Updating SSA information for statement D.43717_855 = v_engine_49->rtcp_mux;

Updating SSA information for statement switch_rtp_activate_rtcp (D.43096_854, -1, remote_port_25, D.43718_856);



Registering new PHI nodes in block #292

Updating SSA information for statement interval_857 = atoi (val_3);



Registering new PHI nodes in block #293

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5467, session_45(D), 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_857);



Registering new PHI nodes in block #294

Updating SSA information for statement D.43717_862 = v_engine_49->rtcp_mux;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5471, session_45(D), 6, "Activating VIDEO RTCP PORT %d mux %d\n", D.43716_861, D.43724_863);

Updating SSA information for statement D.43096_864 = v_engine_49->rtp_session;

Updating SSA information for statement D.43717_865 = v_engine_49->rtcp_mux;

Updating SSA information for statement switch_rtp_activate_rtcp (D.43096_864, interval_860, remote_port_25, D.43718_866);



Registering new PHI nodes in block #295

Updating SSA information for statement D.43725_867 = v_engine_49->ice_in.chosen[1];

Updating SSA information for statement D.43726_868 = v_engine_49->ice_in.cands[D.43725_867][1].ready;



Registering new PHI nodes in block #296

Updating SSA information for statement D.43717_869 = v_engine_49->rtcp_mux;



Registering new PHI nodes in block #297

Updating SSA information for statement D.43725_870 = v_engine_49->ice_in.chosen[1];

Updating SSA information for statement D.43732_871 = v_engine_49->ice_in.cands[D.43725_870][1].con_addr;

Updating SSA information for statement D.43693_872 = v_engine_49->ice_in.chosen[0];

Updating SSA information for statement D.43733_873 = v_engine_49->ice_in.cands[D.43693_872][0].con_addr;

Updating SSA information for statement D.39417_874 = __builtin_strcmp (D.43732_871, D.43733_873);



Registering new PHI nodes in block #298

Updating SSA information for statement D.43725_875 = v_engine_49->ice_in.chosen[1];

Updating SSA information for statement D.43735_876 = v_engine_49->ice_in.cands[D.43725_875][1].con_port;

Updating SSA information for statement D.43693_877 = v_engine_49->ice_in.chosen[0];

Updating SSA information for statement D.43736_878 = v_engine_49->ice_in.cands[D.43693_877][0].con_port;



Registering new PHI nodes in block #299

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5481, session_45(D), 6, "Skipping VIDEO RTCP ICE (Same as VIDEO RTP)\n");



Registering new PHI nodes in block #300

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5484, session_45(D), 6, "Activating VIDEO RTCP ICE\n");

Updating SSA information for statement D.43096_879 = v_engine_49->rtp_session;

Updating SSA information for statement D.43697_880 = v_engine_49->ice_in.ufrag;

Updating SSA information for statement D.43698_881 = v_engine_49->ice_out.ufrag;

Updating SSA information for statement D.43699_882 = v_engine_49->ice_out.pwd;

Updating SSA information for statement D.43700_883 = v_engine_49->ice_in.pwd;

Updating SSA information for statement D.43739_884 = switch_ice_direction (session_45(D));



Registering new PHI nodes in block #301



Registering new PHI nodes in block #302



Registering new PHI nodes in block #303

Updating SSA information for statement switch_rtp_activate_ice (D.43096_879, D.43697_880, D.43698_881, D.43699_882, D.43700_883, 1, iftmp.65_38, D.43706_887);



Registering new PHI nodes in block #304

Updating SSA information for statement D.43744_889 = _zstr (D.43743_888);



Registering new PHI nodes in block #305

Updating SSA information for statement D.43747_890 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #306

Updating SSA information for statement D.43429_891 = smh_46->session;

Updating SSA information for statement D.43750_892 = dtls_ok (D.43429_891);



Registering new PHI nodes in block #307

Updating SSA information for statement D.43429_893 = smh_46->session;

Updating SSA information for statement D.43434_894 = D.43429_893->channel;

Updating SSA information for statement D.43754_895 = switch_channel_direction (D.43434_894);



Registering new PHI nodes in block #308



Registering new PHI nodes in block #309



Registering new PHI nodes in block #310

Updating SSA information for statement D.43717_900 = v_engine_49->rtcp_mux;



Registering new PHI nodes in block #311

Updating SSA information for statement D.43099_901 = smh_46->mparams;

Updating SSA information for statement D.43760_902 = D.43099_901->rtcp_video_interval_msec;



Registering new PHI nodes in block #312



Registering new PHI nodes in block #313

Updating SSA information for statement D.43096_904 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_add_dtls (D.43096_904, D.43763_905, D.43764_906, D.43765_907);

Updating SSA information for statement D.43717_908 = v_engine_49->rtcp_mux;



Registering new PHI nodes in block #314

Updating SSA information for statement D.43099_909 = smh_46->mparams;

Updating SSA information for statement D.43760_910 = D.43099_909->rtcp_video_interval_msec;



Registering new PHI nodes in block #315

Updating SSA information for statement D.43096_912 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_add_dtls (D.43096_912, D.43763_913, D.43764_914, D.43765_915);



Registering new PHI nodes in block #316

Updating SSA information for statement D.43073_916 = session_45(D)->channel;

Updating SSA information for statement val_917 = switch_channel_get_variable_dup (D.43073_916, "rtp_manual_video_rtp_bugs", 1, -1);



Registering new PHI nodes in block #317

Updating SSA information for statement switch_core_media_parse_rtp_bugs (D.43772_918, val_917);



Registering new PHI nodes in block #318

Updating SSA information for statement D.43096_919 = v_engine_49->rtp_session;

Updating SSA information for statement D.43773_920 = v_engine_49->rtp_bugs;

Updating SSA information for statement D.43099_921 = smh_46->mparams;

Updating SSA information for statement D.43774_922 = D.43099_921->manual_video_rtp_bugs;

Updating SSA information for statement switch_rtp_intentional_bugs (D.43096_919, D.43775_923);

Updating SSA information for statement D.43073_924 = session_45(D)->channel;

Updating SSA information for statement D.43561_925 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_926 = D.43561_925->agreed_pt;

Updating SSA information for statement switch_channel_set_variable_printf (D.43073_924, "rtp_use_video_pt", "%d", D.43595_927);

Updating SSA information for statement D.43096_928 = v_engine_49->rtp_session;

Updating SSA information for statement D.43776_929 = switch_rtp_get_ssrc (D.43096_928);

Updating SSA information for statement v_engine_49->ssrc = D.43776_929;

Updating SSA information for statement D.43073_930 = session_45(D)->channel;

Updating SSA information for statement D.43689_931 = v_engine_49->ssrc;

Updating SSA information for statement switch_channel_set_variable_printf (D.43073_930, "rtp_use_video_ssrc", "%u", D.43689_931);

Updating SSA information for statement switch_core_session_apply_crypto (session_45(D), 1);

Updating SSA information for statement D.43073_932 = session_45(D)->channel;

Updating SSA information for statement D.43777_933 = switch_channel_test_flag (D.43073_932, 74);



Registering new PHI nodes in block #319

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5542, session_45(D), 7, "Activating video UDPTL mode\n");

Updating SSA information for statement D.43096_934 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_udptl_mode (D.43096_934);



Registering new PHI nodes in block #320

Updating SSA information for statement err.45_935 = err;



Registering new PHI nodes in block #321

Updating SSA information for statement iftmp.67_936 = err;



Registering new PHI nodes in block #322



Registering new PHI nodes in block #323

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5547, session_45(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", iftmp.67_40);

Updating SSA information for statement D.43073_938 = session_45(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.43073_938, "src/switch_core_media.c", &__func__, 5548, 27);



Registering new PHI nodes in block #328



Registering new PHI nodes in block #329

Updating SSA information for statement check_dtls_reinvite (session_45(D), v_engine_49);



Registering new PHI nodes in block #330



Registering new PHI nodes in block #331

Updating SSA information for statement D.43073_943 = session_45(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.43073_943, 103);

Updating SSA information for statement switch_core_recovery_track (session_45(D));



Registering new PHI nodes in block #8



Registering new PHI nodes in block #332



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 333
Number of blocks to update: 332 (100%)

Affected blocks


Scope blocks after cleanups:

{ Scope block #0 
  const char * err;
  const char * val;
  switch_rtp_flag_t flags[39];
  switch_status_t status;
  char tmp[50];
  char * timer_name;
  const char * var;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_activate_rtp";
  void end = <<< error >>>; (unused)
  void video = <<< error >>>; (unused)
  static const char __func__[31] = "switch_core_media_activate_rtp";
  void video_up = <<< error >>>; (unused)

  { Scope block #0 
    char * remote_host;
    switch_port_t remote_port;

    { Scope block #0 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

  }

  { Scope block #0 
    const char * rport;
    switch_port_t remote_rtcp_port;

    { Scope block #0 
      size_t __s1_len; (unused)
      size_t __s2_len;

      { Scope block #0 
        const unsigned char * __s1;
        register int __result;

      }

    }

  }

  { Scope block #0 
    uint8_t vad_in;
    uint8_t vad_out;
    uint8_t inb;
    const char * ssrc;

    { Scope block #0 
      uint32_t ssrc_ul;

    }

    { Scope block #0 
      const char * rport;
      switch_port_t remote_rtcp_port;

      { Scope block #0 
        int interval;

      }

      { Scope block #0 
        size_t __s1_len; (unused)
        size_t __s2_len; (unused)

      }

    }

    { Scope block #0 
      dtls_type_t xtype;
      dtls_type_t dtype;

    }

    { Scope block #0 
      int jb_msec;
      int maxlen;
      int max_drift;
      char * p;
      char * q;

      { Scope block #0 
        int qlen;
        int maxqlen;

      }

    }

    { Scope block #0 
      int v;

    }

    { Scope block #0 
      int v;

    }

    { Scope block #0 
      int delayi;

    }

    { Scope block #0 
      char * remote_host;
      switch_port_t remote_port;

      { Scope block #0 
        size_t __s1_len; (unused)
        size_t __s2_len; (unused)

      }

    }

    { Scope block #0 
      const char * rport;
      switch_port_t remote_rtcp_port;

    }

    { Scope block #0 
      const char * ssrc;

      { Scope block #0 
        uint32_t ssrc_ul;

      }

      { Scope block #0 
        const char * rport;
        switch_port_t remote_port;

        { Scope block #0 
          int interval;

        }

        { Scope block #0 
          size_t __s1_len; (unused)
          size_t __s2_len; (unused)

        }

      }

      { Scope block #0 
        dtls_type_t xtype;
        dtls_type_t dtype;

      }

    }

  }

}
switch_core_media_activate_rtp (struct switch_core_session_t * session)
{
  dtls_type_t dtype;
  dtls_type_t xtype;
  int interval;
  switch_port_t remote_port;
  const char * rport;
  uint32_t ssrc_ul;
  const char * ssrc;
  switch_port_t remote_rtcp_port;
  const char * rport;
  switch_port_t remote_port;
  char * remote_host;
  int delayi;
  int v;
  int v;
  int maxqlen;
  int qlen;
  char * q;
  char * p;
  int max_drift;
  int maxlen;
  int jb_msec;
  dtls_type_t dtype;
  dtls_type_t xtype;
  int interval;
  switch_port_t remote_rtcp_port;
  const char * rport;
  uint32_t ssrc_ul;
  const char * ssrc;
  uint8_t inb;
  uint8_t vad_out;
  uint8_t vad_in;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  switch_port_t remote_rtcp_port;
  const char * rport;
  switch_port_t remote_port;
  char * remote_host;
  static const char __func__[31] = "switch_core_media_activate_rtp";
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_activate_rtp";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  const char * var;
  char * timer_name;
  char tmp[50];
  switch_status_t status;
  switch_rtp_flag_t flags[39];
  const char * val;
  const char * err;
  _Bool D.43791;
  _Bool D.43790;
  const char * iftmp.68;
  const char * iftmp.67;
  uint32_t D.43777;
  uint32_t D.43776;
  unsigned int D.43775;
  switch_rtp_bug_flag_t D.43774;
  switch_rtp_bug_flag_t D.43773;
  switch_rtp_bug_flag_t * D.43772;
  unsigned int D.43765;
  struct dtls_fingerprint_t * D.43764;
  struct dtls_fingerprint_t * D.43763;
  char * D.43760;
  switch_call_direction_t D.43754;
  dtls_type_t iftmp.66;
  int D.43750;
  int D.43747;
  int D.43744;
  char[192] * D.43743;
  switch_call_direction_t D.43739;
  switch_core_media_ice_type_t iftmp.65;
  switch_port_t D.43736;
  switch_port_t D.43735;
  char * D.43733;
  char * D.43732;
  int D.39417;
  uint8_t D.43726;
  int D.43725;
  int D.43724;
  unsigned int D.43721;
  unsigned int interval.64;
  switch_bool_t D.43718;
  int8_t D.43717;
  int D.43716;
  int D.43713;
  int D.43712;
  struct ice_t * D.43706;
  switch_call_direction_t D.43702;
  switch_core_media_ice_type_t iftmp.63;
  char * D.43700;
  char * D.43699;
  char * D.43698;
  char * D.43697;
  uint8_t D.43694;
  int D.43693;
  uint32_t D.43690;
  uint32_t D.43689;
  struct payload_map_t * * D.43685;
  uint8_t D.43682;
  uint8_t D.43679;
  uint8_t D.43676;
  uint8_t D.43672;
  const char * iftmp.62;
  char * D.43670;
  uint32_t D.43666;
  char * iftmp.61;
  struct switch_rtp_t * D.43664;
  struct switch_memory_pool_t * D.43663;
  switch_rtp_flag_t D.43662;
  switch_rtp_flag_t D.43661;
  uint32_t D.43658;
  uint32_t D.43655;
  int D.43654;
  uint32_t D.43650;
  int32_t D.43647;
  uint8_t D.43636;
  int D.43635;
  int D.43634;
  char * D.43633;
  int D.43632;
  uint32_t D.43628;
  int32_t D.43625;
  uint32_t D.43620;
  int D.43619;
  uint32_t D.43615;
  int32_t D.43612;
  switch_status_t D.43606;
  int D.43605;
  uint32_t D.43598;
  int D.43595;
  switch_payload_t D.43594;
  int D.43593;
  switch_port_t D.43592;
  char * D.43591;
  uint8_t D.43588;
  uint32_t D.43585;
  int D.43584;
  int D.43583;
  char * D.43582;
  char * D.43581;
  char * D.43578;
  int D.39400;
  _Bool D.43576;
  _Bool D.43575;
  _Bool D.43574;
  uint32_t D.43570;
  switch_port_t D.43565;
  char * D.43562;
  struct payload_map_t * D.43561;
  uint32_t D.43558;
  switch_call_direction_t D.43555;
  uint32_t D.43552;
  int D.43551;
  int32_t D.43548;
  char * D.43545;
  uint32_t D.43542;
  unsigned int delayi.60;
  int D.43536;
  int D.43534;
  int32_t D.43531;
  int D.43527;
  switch_payload_t D.43524;
  int D.43523;
  switch_payload_t D.43520;
  uint32_t D.43519;
  uint32_t D.43518;
  uint32_t D.43515;
  uint32_t D.43512;
  uint32_t D.43511;
  uint32_t D.43510;
  uint32_t D.43509;
  uint32_t D.43506;
  uint32_t v.59;
  uint32_t v.58;
  int D.43492;
  const char * D.43491;
  switch_status_t D.43488;
  uint32_t max_drift.57;
  uint32_t D.43486;
  uint32_t maxqlen.56;
  uint32_t qlen.55;
  unsigned int D.43474;
  int D.43473;
  int D.43472;
  const int D.43471;
  const struct switch_codec_implementation_t * D.43470;
  unsigned int D.43467;
  unsigned int jb_msec.54;
  int D.43465;
  unsigned int D.43453;
  struct dtls_fingerprint_t * D.43452;
  struct dtls_fingerprint_t * D.43451;
  char * D.43448;
  dtls_type_t iftmp.53;
  uint32_t D.43439;
  switch_call_direction_t D.43435;
  struct switch_channel_t * D.43434;
  dtls_type_t iftmp.52;
  int D.43430;
  struct switch_core_session_t * D.43429;
  int D.43426;
  int D.43423;
  char[192] * D.43422;
  switch_call_direction_t D.43418;
  switch_core_media_ice_type_t iftmp.51;
  switch_port_t D.43415;
  switch_port_t D.43414;
  char * D.43412;
  char * D.43411;
  int D.39377;
  uint8_t D.43405;
  int D.43404;
  unsigned int D.43401;
  unsigned int interval.50;
  switch_bool_t D.43398;
  int8_t D.43397;
  int D.43396;
  int D.43393;
  int D.43392;
  _Bool D.43389;
  _Bool D.43388;
  _Bool D.43387;
  struct ice_t * D.43383;
  switch_call_direction_t D.43379;
  switch_core_media_ice_type_t iftmp.49;
  char * D.43377;
  char * D.43376;
  char * D.43375;
  char * D.43374;
  uint8_t D.43371;
  int D.43370;
  char * iftmp.48;
  char * iftmp.47;
  char * D.43361;
  struct switch_channel_t * D.43360;
  struct switch_codec_t * D.43359;
  _Bool D.43358;
  _Bool D.43357;
  _Bool D.43356;
  _Bool D.43354;
  _Bool D.43353;
  _Bool D.43352;
  unsigned int D.43349;
  switch_rtp_bug_flag_t D.43348;
  switch_rtp_bug_flag_t * D.43347;
  unsigned int D.43344;
  switch_rtp_bug_flag_t D.43343;
  unsigned int D.43340;
  switch_rtp_bug_flag_t D.43339;
  uint32_t D.43338;
  int D.43335;
  int D.43330;
  int D.43325;
  int D.43320;
  uint32_t D.43315;
  uint32_t D.43314;
  struct switch_memory_pool_t * D.43310;
  struct switch_mutex_t *[2] * D.43309;
  switch_call_direction_t D.43308;
  uint8_t D.43307;
  switch_core_media_vflag_t D.43306;
  uint8_t D.43303;
  struct payload_map_t * * D.43302;
  uint8_t D.43299;
  struct switch_rtp_t * D.43298;
  struct switch_memory_pool_t * D.43297;
  uint32_t D.43296;
  uint32_t D.43295;
  uint32_t D.43294;
  switch_channel_state_t D.43293;
  int D.43291;
  uint8_t D.43283;
  char * D.43282;
  int D.43281;
  uint32_t D.43277;
  int32_t D.43274;
  switch_rtp_flag_t D.43271;
  switch_rtp_flag_t D.43270;
  uint32_t D.43267;
  _Bool D.43264;
  _Bool D.43263;
  _Bool D.43262;
  uint32_t D.43259;
  int D.43258;
  int32_t D.43254;
  int D.43248;
  const unsigned char D.43247;
  char * D.43246;
  int D.43245;
  const unsigned char D.43244;
  const unsigned char * D.43243;
  _Bool D.43240;
  _Bool D.43239;
  int D.43238;
  const unsigned char D.43237;
  char * D.43236;
  int D.43235;
  const unsigned char D.43234;
  const unsigned char * D.43233;
  _Bool D.43230;
  _Bool D.43229;
  int D.43228;
  const unsigned char D.43227;
  char * D.43226;
  int D.43225;
  const unsigned char D.43224;
  const unsigned char * D.43223;
  _Bool D.43220;
  _Bool D.43219;
  _Bool D.43218;
  int D.43217;
  const unsigned char D.43216;
  char[8] * D.43215;
  int D.43214;
  const unsigned char D.43213;
  int D.39359;
  int iftmp.46;
  int D.39360;
  uint32_t D.43207;
  const char * err.45;
  switch_status_t D.43202;
  int D.43201;
  uint32_t D.43194;
  char * D.43191;
  int D.43190;
  int D.43189;
  int D.43188;
  switch_payload_t D.43187;
  int D.43186;
  switch_port_t D.43185;
  char * D.43184;
  char * D.43183;
  uint32_t D.43180;
  int D.43179;
  int D.43178;
  char * D.43177;
  char * D.43176;
  switch_port_t D.43174;
  char * D.43172;
  struct payload_map_t * D.43171;
  int D.39348;
  _Bool D.43169;
  _Bool D.43168;
  _Bool D.43167;
  uint32_t D.43163;
  int D.43158;
  switch_rtp_flag_t D.43153;
  switch_rtp_flag_t D.43152;
  int D.43149;
  char * D.43148;
  switch_rtp_flag_t D.43147;
  switch_rtp_flag_t D.43146;
  switch_payload_t D.43143;
  int32_t D.43139;
  switch_rtp_flag_t D.43138;
  switch_rtp_flag_t D.43137;
  int D.43136;
  int32_t D.43132;
  switch_rtp_flag_t D.43129;
  switch_rtp_flag_t D.43128;
  int D.43127;
  int32_t D.43124;
  int D.43121;
  int32_t D.43118;
  switch_rtp_flag_t D.43115;
  switch_rtp_flag_t D.43114;
  int D.43113;
  uint32_t D.43109;
  int32_t D.43106;
  switch_rtp_flag_t D.43103;
  switch_rtp_flag_t D.43102;
  uint32_t D.43100;
  struct switch_core_media_params_t * D.43099;
  uint8_t D.43097;
  struct switch_rtp_t * D.43096;
  uint32_t D.43093;
  uint8_t D.43090;
  uint32_t D.43087;
  uint32_t D.43084;
  switch_rtp_crypto_key_type_t D.43081;
  uint8_t D.43078;
  struct switch_rtp_t * D.43077;
  switch_channel_state_t D.43076;
  int D.43074;
  struct switch_channel_t * D.43073;
  switch_status_t D.43070;

<bb 2>:
  err = 0B;
  val_42 = 0B;
  # DEBUG val => val_42
  flags = {};
  status_43 = 0;
  # DEBUG status => status_43
  timer_name_44 = 0B;
  # DEBUG timer_name => timer_name_44
  if (session_45(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4731, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_46 = session_45(D)->media_handle;
  # DEBUG smh => smh_46
  if (smh_46 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.43070_47 = 1;
  goto <bb 332>;

<bb 6>:
  a_engine_48 = &smh_46->engines;
  # DEBUG a_engine => a_engine_48
  v_engine_49 = &smh_46->engines[1];
  # DEBUG v_engine => v_engine_49
  D.43073_50 = session_45(D)->channel;
  D.43074_51 = switch_channel_check_signal (D.43073_50, 1);
  if (D.43074_51 != 0)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:
  D.43073_52 = session_45(D)->channel;
  D.43076_53 = switch_channel_get_state (D.43073_52);
  if (D.43076_53 > 9)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.43070_945 = 1;
  goto <bb 332>;

<bb 9>:
  D.43077_54 = a_engine_48->rtp_session;
  D.43078_55 = switch_rtp_ready (D.43077_54);
  if (D.43078_55 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.43077_56 = a_engine_48->rtp_session;
  switch_rtp_reset_media_timer (D.43077_56);

<bb 11>:
  D.43081_57 = a_engine_48->crypto_type;
  if (D.43081_57 != 9)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  D.43073_58 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_58, 92, 1);

<bb 13>:
  D.43073_59 = session_45(D)->channel;
  D.43084_60 = switch_channel_test_flag (D.43073_59, 15);
  if (D.43084_60 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  status_61 = 0;
  # DEBUG status => status_61
  goto <bb 331> (end);

<bb 15>:
  D.43073_62 = session_45(D)->channel;
  D.43087_63 = switch_channel_test_flag (D.43073_62, 103);
  if (D.43087_63 == 0)
    goto <bb 16>;
  else
    goto <bb 20>;

<bb 16>:
  D.43077_64 = a_engine_48->rtp_session;
  D.43090_65 = switch_rtp_ready (D.43077_64);
  if (D.43090_65 != 0)
    goto <bb 17>;
  else
    goto <bb 20>;

<bb 17>:
  D.43073_66 = session_45(D)->channel;
  D.43093_67 = switch_channel_test_flag (D.43073_66, 98);
  if (D.43093_67 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.43096_68 = v_engine_49->rtp_session;
  D.43097_69 = switch_rtp_ready (D.43096_68);
  if (D.43097_69 == 0)
    goto <bb 217> (video);
  else
    goto <bb 19>;

<bb 19>:
  status_70 = 0;
  # DEBUG status => status_70
  goto <bb 331> (end);

<bb 20>:
  D.43099_71 = smh_46->mparams;
  D.43100_72 = D.43099_71->codec_flags;
  status_73 = switch_core_media_set_codec (session_45(D), 0, D.43100_72);
  # DEBUG status => status_73
  if (status_73 != 0)
    goto <bb 331> (end);
  else
    goto <bb 21>;

<bb 21>:
  switch_core_media_set_video_codec (session_45(D), 0);
  memset (&flags, 0, 156);
  D.43102_74 = flags[13];
  D.43103_75 = D.43102_74 + 1;
  flags[13] = D.43103_75;
  D.43106_76 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43106_76 == 0)
    goto <bb 22>;
  else
    goto <bb 26>;

<bb 22>:
  D.43073_77 = session_45(D)->channel;
  D.43109_78 = switch_channel_test_flag (D.43073_77, 106);
  if (D.43109_78 == 0)
    goto <bb 23>;
  else
    goto <bb 26>;

<bb 23>:
  D.43073_79 = session_45(D)->channel;
  val_80 = switch_channel_get_variable_dup (D.43073_79, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_80
  if (val_80 == 0B)
    goto <bb 25>;
  else
    goto <bb 24>;

<bb 24>:
  D.43113_81 = switch_true (val_80);
  if (D.43113_81 == 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.43114_82 = flags[7];
  D.43115_83 = D.43114_82 + 1;
  flags[7] = D.43115_83;

<bb 26>:
  D.43118_84 = switch_media_handle_test_media_flag (smh_46, 11);
  if (D.43118_84 != 0)
    goto <bb 29>;
  else
    goto <bb 27>;

<bb 27>:
  D.43073_85 = session_45(D)->channel;
  val_86 = switch_channel_get_variable_dup (D.43073_85, "pass_rfc2833", 1, -1);
  # DEBUG val => val_86
  if (val_86 != 0B)
    goto <bb 28>;
  else
    goto <bb 30>;

<bb 28>:
  D.43121_87 = switch_true (val_86);
  if (D.43121_87 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  D.43073_88 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_88, 100, 1);

<bb 30>:
  D.43124_89 = switch_media_handle_test_media_flag (smh_46, 12);
  if (D.43124_89 != 0)
    goto <bb 33>;
  else
    goto <bb 31>;

<bb 31>:
  D.43073_90 = session_45(D)->channel;
  val_91 = switch_channel_get_variable_dup (D.43073_90, "rtp_autoflush", 1, -1);
  # DEBUG val => val_91
  if (val_91 != 0B)
    goto <bb 32>;
  else
    goto <bb 34>;

<bb 32>:
  D.43127_92 = switch_true (val_91);
  if (D.43127_92 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.43128_93 = flags[22];
  D.43129_94 = D.43128_93 + 1;
  flags[22] = D.43129_94;

<bb 34>:
  D.43132_95 = switch_media_handle_test_media_flag (smh_46, 13);
  if (D.43132_95 == 0)
    goto <bb 35>;
  else
    goto <bb 38>;

<bb 35>:
  D.43073_96 = session_45(D)->channel;
  val_97 = switch_channel_get_variable_dup (D.43073_96, "rtp_rewrite_timestamps", 1, -1);
  # DEBUG val => val_97
  if (val_97 == 0B)
    goto <bb 37>;
  else
    goto <bb 36>;

<bb 36>:
  D.43136_98 = switch_true (val_97);
  if (D.43136_98 == 0)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  D.43137_99 = flags[8];
  D.43138_100 = D.43137_99 + 1;
  flags[8] = D.43138_100;

<bb 38>:
  D.43139_101 = switch_media_handle_test_media_flag (smh_46, 9);
  if (D.43139_101 != 0)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.43099_102 = smh_46->mparams;
  D.43099_102->cng_pt = 0;
  goto <bb 42>;

<bb 40>:
  D.43099_103 = smh_46->mparams;
  D.43143_104 = D.43099_103->cng_pt;
  if (D.43143_104 != 0)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.43146_105 = flags[16];
  D.43147_106 = D.43146_105 + 1;
  flags[16] = D.43147_106;

<bb 42>:
  D.43148_107 = a_engine_48->read_impl.iananame;
  D.43149_108 = strcasecmp (D.43148_107, "L16");
  if (D.43149_108 == 0)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  D.43152_109 = flags[14];
  D.43153_110 = D.43152_109 + 1;
  flags[14] = D.43153_110;

<bb 44>:
  D.43152_111 = flags[14];
  if (D.43152_111 != 0)
    goto <bb 45>;
  else
    goto <bb 48>;

<bb 45>:
  D.43073_112 = session_45(D)->channel;
  val_113 = switch_channel_get_variable_dup (D.43073_112, "rtp_disable_byteswap", 1, -1);
  # DEBUG val => val_113
  if (val_113 != 0B)
    goto <bb 46>;
  else
    goto <bb 48>;

<bb 46>:
  D.43158_114 = switch_true (val_113);
  if (D.43158_114 != 0)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  flags[14] = 0;

<bb 48>:
  D.43077_115 = a_engine_48->rtp_session;
  if (D.43077_115 != 0B)
    goto <bb 49>;
  else
    goto <bb 55>;

<bb 49>:
  D.43073_116 = session_45(D)->channel;
  D.43163_117 = switch_channel_test_flag (D.43073_116, 103);
  if (D.43163_117 != 0)
    goto <bb 50>;
  else
    goto <bb 55>;

<bb 50>:
  D.43077_118 = a_engine_48->rtp_session;
  remote_host_119 = switch_rtp_get_remote_host (D.43077_118);
  # DEBUG remote_host => remote_host_119
  D.43077_120 = a_engine_48->rtp_session;
  remote_port_121 = switch_rtp_get_remote_port (D.43077_120);
  # DEBUG remote_port => remote_port_121
  D.43167_122 = remote_host_119 != 0B;
  D.43168_123 = remote_port_121 != 0;
  D.43169_124 = D.43167_122 && D.43168_123;
  if (D.43169_124 != 0)
    goto <bb 51>;
  else
    goto <bb 54>;

<bb 51>:
  D.43171_125 = a_engine_48->cur_payload_map;
  D.43172_126 = D.43171_125->remote_sdp_ip;
  D.39348_127 = __builtin_strcmp (remote_host_119, D.43172_126);
  if (D.39348_127 == 0)
    goto <bb 52>;
  else
    goto <bb 54>;

<bb 52>:
  D.43171_128 = a_engine_48->cur_payload_map;
  D.43174_129 = D.43171_128->remote_sdp_port;
  if (D.43174_129 == remote_port_121)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  D.43073_130 = session_45(D)->channel;
  D.43176_131 = switch_channel_get_name (D.43073_130);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4825, session_45(D), 7, "Audio params are unchanged for %s.\n", D.43176_131);
  goto <bb 217> (video);

<bb 54>:
  D.43073_132 = session_45(D)->channel;
  D.43177_133 = switch_channel_get_name (D.43073_132);
  D.43178_134 = (int) remote_port_121;
  D.43171_135 = a_engine_48->cur_payload_map;
  D.43172_136 = D.43171_135->remote_sdp_ip;
  D.43171_137 = a_engine_48->cur_payload_map;
  D.43174_138 = D.43171_137->remote_sdp_port;
  D.43179_139 = (int) D.43174_138;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4830, session_45(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.43177_133, remote_host_119, D.43178_134, D.43172_136, D.43179_139);
  D.43171_140 = a_engine_48->cur_payload_map;
  D.43174_141 = D.43171_140->remote_sdp_port;
  D.43179_142 = (int) D.43174_141;
  switch_snprintf (&tmp, 50, "%d", D.43179_142);
  D.43073_143 = session_45(D)->channel;
  D.43171_144 = a_engine_48->cur_payload_map;
  D.43172_145 = D.43171_144->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_143, "remote_media_ip", D.43172_145, 1);
  D.43073_146 = session_45(D)->channel;
  switch_channel_set_variable_var_check (D.43073_146, "remote_media_port", &tmp, 1);

<bb 55>:
  D.43073_147 = session_45(D)->channel;
  D.43180_148 = switch_channel_test_flag (D.43073_147, 29);
  if (D.43180_148 == 0)
    goto <bb 56>;
  else
    goto <bb 57>;

<bb 56>:
  D.43073_149 = session_45(D)->channel;
  D.43183_150 = switch_channel_get_name (D.43073_149);
  D.43184_151 = a_engine_48->local_sdp_ip;
  D.43185_152 = a_engine_48->local_sdp_port;
  D.43186_153 = (int) D.43185_152;
  D.43171_154 = a_engine_48->cur_payload_map;
  D.43172_155 = D.43171_154->remote_sdp_ip;
  D.43171_156 = a_engine_48->cur_payload_map;
  D.43174_157 = D.43171_156->remote_sdp_port;
  D.43179_158 = (int) D.43174_157;
  D.43171_159 = a_engine_48->cur_payload_map;
  D.43187_160 = D.43171_159->agreed_pt;
  D.43188_161 = (int) D.43187_160;
  D.43189_162 = a_engine_48->read_impl.microseconds_per_packet;
  D.43190_163 = D.43189_162 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4841, session_45(D), 7, "AUDIO RTP [%s] %s port %d -> %s port %d codec: %u ms: %d\n", D.43183_150, D.43184_151, D.43186_153, D.43172_155, D.43179_158, D.43188_161, D.43190_163);

<bb 57>:
  D.43185_164 = a_engine_48->local_sdp_port;
  D.43186_165 = (int) D.43185_164;
  switch_snprintf (&tmp, 50, "%d", D.43186_165);
  D.43073_166 = session_45(D)->channel;
  D.43184_167 = a_engine_48->local_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_166, "local_media_ip", D.43184_167, 1);
  D.43073_168 = session_45(D)->channel;
  switch_channel_set_variable_var_check (D.43073_168, "local_media_port", &tmp, 1);
  D.43073_169 = session_45(D)->channel;
  D.43191_170 = a_engine_48->adv_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_169, "advertised_media_ip", D.43191_170, 1);
  D.43077_171 = a_engine_48->rtp_session;
  if (D.43077_171 != 0B)
    goto <bb 58>;
  else
    goto <bb 81>;

<bb 58>:
  D.43073_172 = session_45(D)->channel;
  D.43194_173 = switch_channel_test_flag (D.43073_172, 103);
  if (D.43194_173 != 0)
    goto <bb 59>;
  else
    goto <bb 81>;

<bb 59>:
  rport_174 = 0B;
  # DEBUG rport => rport_174
  remote_rtcp_port_175 = a_engine_48->remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_175
  if (remote_rtcp_port_175 == 0)
    goto <bb 60>;
  else
    goto <bb 62>;

<bb 60>:
  D.43073_176 = session_45(D)->channel;
  rport_177 = switch_channel_get_variable_dup (D.43073_176, "rtp_remote_audio_rtcp_port", 1, -1);
  # DEBUG rport => rport_177
  if (rport_177 != 0B)
    goto <bb 61>;
  else
    goto <bb 62>;

<bb 61>:
  D.43201_178 = atoi (rport_177);
  remote_rtcp_port_179 = (switch_port_t) D.43201_178;
  # DEBUG remote_rtcp_port => remote_rtcp_port_179

<bb 62>:
  # remote_rtcp_port_7 = PHI <remote_rtcp_port_175(59), remote_rtcp_port_175(60), remote_rtcp_port_179(61)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_7
  D.43077_180 = a_engine_48->rtp_session;
  D.43171_181 = a_engine_48->cur_payload_map;
  D.43172_182 = D.43171_181->remote_sdp_ip;
  D.43171_183 = a_engine_48->cur_payload_map;
  D.43174_184 = D.43171_183->remote_sdp_port;
  D.43202_185 = switch_rtp_set_remote_address (D.43077_180, D.43172_182, D.43174_184, remote_rtcp_port_7, 1, &err);
  if (D.43202_185 != 0)
    goto <bb 63>;
  else
    goto <bb 64>;

<bb 63>:
  err.45_186 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4868, session_45(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.45_186);
  goto <bb 79>;

<bb 64>:
  D.43171_187 = a_engine_48->cur_payload_map;
  D.43172_188 = D.43171_187->remote_sdp_ip;
  D.43171_189 = a_engine_48->cur_payload_map;
  D.43174_190 = D.43171_189->remote_sdp_port;
  D.43179_191 = (int) D.43174_190;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4870, session_45(D), 7, "AUDIO RTP CHANGING DEST TO: [%s:%d]\n", D.43172_188, D.43179_191);
  D.43073_192 = session_45(D)->channel;
  D.43207_193 = switch_channel_test_flag (D.43073_192, 96);
  if (D.43207_193 != 0)
    goto <bb 65>;
  else
    goto <bb 74>;

<bb 65>:
  __s2_len_194 = 7;
  # DEBUG __s2_len => __s2_len_194
  if (__s2_len_194 <= 3)
    goto <bb 66>;
  else
    goto <bb 71>;

<bb 66>:
  D.43171_195 = a_engine_48->cur_payload_map;
  __s1_196 = D.43171_195->remote_sdp_ip;
  # DEBUG __s1 => __s1_196
  D.43213_197 = *__s1_196;
  D.43214_198 = (int) D.43213_197;
  D.43215_199 = "0.0.0.0";
  D.43216_200 = MEM[(const unsigned char *)D.43215_199];
  D.43217_201 = (int) D.43216_200;
  __result_202 = D.43214_198 - D.43217_201;
  # DEBUG __result => __result_202
  D.43218_203 = __s2_len_194 != 0;
  D.43219_204 = __result_202 == 0;
  D.43220_205 = D.43218_203 && D.43219_204;
  if (D.43220_205 != 0)
    goto <bb 67>;
  else
    goto <bb 70>;

<bb 67>:
  D.43223_206 = __s1_196 + 1;
  D.43224_207 = *D.43223_206;
  D.43225_208 = (int) D.43224_207;
  D.43226_209 = &"0.0.0.0"[1];
  D.43227_210 = MEM[(const unsigned char *)D.43226_209];
  D.43228_211 = (int) D.43227_210;
  __result_212 = D.43225_208 - D.43228_211;
  # DEBUG __result => __result_212
  D.43229_213 = __s2_len_194 > 1;
  D.43219_214 = __result_212 == 0;
  D.43230_215 = D.43229_213 && D.43219_214;
  if (D.43230_215 != 0)
    goto <bb 68>;
  else
    goto <bb 70>;

<bb 68>:
  D.43233_216 = __s1_196 + 2;
  D.43234_217 = *D.43233_216;
  D.43235_218 = (int) D.43234_217;
  D.43236_219 = &"0.0.0.0"[2];
  D.43237_220 = MEM[(const unsigned char *)D.43236_219];
  D.43238_221 = (int) D.43237_220;
  __result_222 = D.43235_218 - D.43238_221;
  # DEBUG __result => __result_222
  D.43239_223 = __s2_len_194 > 2;
  D.43219_224 = __result_222 == 0;
  D.43240_225 = D.43239_223 && D.43219_224;
  if (D.43240_225 != 0)
    goto <bb 69>;
  else
    goto <bb 70>;

<bb 69>:
  D.43243_226 = __s1_196 + 3;
  D.43244_227 = *D.43243_226;
  D.43245_228 = (int) D.43244_227;
  D.43246_229 = &"0.0.0.0"[3];
  D.43247_230 = MEM[(const unsigned char *)D.43246_229];
  D.43248_231 = (int) D.43247_230;
  __result_232 = D.43245_228 - D.43248_231;
  # DEBUG __result => __result_232

<bb 70>:
  # __result_8 = PHI <__result_202(66), __result_212(67), __result_222(68), __result_232(69)>
  # DEBUG __result => __result_8
  D.39359_233 = __result_8;
  iftmp.46_234 = D.39359_233;
  goto <bb 72>;

<bb 71>:
  D.43171_235 = a_engine_48->cur_payload_map;
  D.43172_236 = D.43171_235->remote_sdp_ip;
  iftmp.46_237 = __builtin_strcmp (D.43172_236, "0.0.0.0");

<bb 72>:
  # iftmp.46_28 = PHI <iftmp.46_234(70), iftmp.46_237(71)>
  D.39360_238 = iftmp.46_28;
  if (D.39360_238 != 0)
    goto <bb 73>;
  else
    goto <bb 74>;

<bb 73>:
  switch_core_media_toggle_hold (session_45(D), 0);

<bb 74>:
  D.43254_239 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43254_239 == 0)
    goto <bb 75>;
  else
    goto <bb 79>;

<bb 75>:
  D.43073_240 = session_45(D)->channel;
  val_241 = switch_channel_get_variable_dup (D.43073_240, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_241
  if (val_241 == 0B)
    goto <bb 77>;
  else
    goto <bb 76>;

<bb 76>:
  D.43258_242 = switch_true (val_241);
  if (D.43258_242 == 0)
    goto <bb 77>;
  else
    goto <bb 79>;

<bb 77>:
  D.43073_243 = session_45(D)->channel;
  D.43259_244 = switch_channel_test_flag (D.43073_243, 106);
  if (D.43259_244 == 0)
    goto <bb 78>;
  else
    goto <bb 79>;

<bb 78>:
  D.43077_245 = a_engine_48->rtp_session;
  switch_rtp_set_flag (D.43077_245, 7);

<bb 79>:
  D.43262_246 = session_45(D) != 0B;
  D.43263_247 = a_engine_48 != 0B;
  D.43264_248 = D.43262_246 && D.43263_247;
  if (D.43264_248 != 0)
    goto <bb 80>;
  else
    goto <bb 217> (video);

<bb 80>:
  check_dtls_reinvite (session_45(D), a_engine_48);
  goto <bb 217> (video);

<bb 81>:
  D.43073_249 = session_45(D)->channel;
  D.43267_250 = switch_channel_test_flag (D.43073_249, 29);
  if (D.43267_250 != 0)
    goto <bb 82>;
  else
    goto <bb 89>;

<bb 82>:
  switch_core_media_proxy_remote_addr (session_45(D), 0B);
  memset (&flags, 0, 156);
  D.43102_251 = flags[13];
  D.43103_252 = D.43102_251 + 1;
  flags[13] = D.43103_252;
  D.43270_253 = flags[19];
  D.43271_254 = D.43270_253 + 1;
  flags[19] = D.43271_254;
  D.43274_255 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43274_255 == 0)
    goto <bb 83>;
  else
    goto <bb 87>;

<bb 83>:
  D.43073_256 = session_45(D)->channel;
  D.43277_257 = switch_channel_test_flag (D.43073_256, 106);
  if (D.43277_257 == 0)
    goto <bb 84>;
  else
    goto <bb 87>;

<bb 84>:
  D.43073_258 = session_45(D)->channel;
  val_259 = switch_channel_get_variable_dup (D.43073_258, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_259
  if (val_259 == 0B)
    goto <bb 86>;
  else
    goto <bb 85>;

<bb 85>:
  D.43281_260 = switch_true (val_259);
  if (D.43281_260 == 0)
    goto <bb 86>;
  else
    goto <bb 87>;

<bb 86>:
  D.43114_261 = flags[7];
  D.43115_262 = D.43114_261 + 1;
  flags[7] = D.43115_262;

<bb 87>:
  timer_name_263 = 0B;
  # DEBUG timer_name => timer_name_263
  D.43073_264 = session_45(D)->channel;
  D.43282_265 = switch_channel_get_name (D.43073_264);
  D.43171_266 = a_engine_48->cur_payload_map;
  D.43172_267 = D.43171_266->remote_sdp_ip;
  D.43171_268 = a_engine_48->cur_payload_map;
  D.43174_269 = D.43171_268->remote_sdp_port;
  D.43179_270 = (int) D.43174_269;
  D.43171_271 = a_engine_48->cur_payload_map;
  D.43172_272 = D.43171_271->remote_sdp_ip;
  D.43171_273 = a_engine_48->cur_payload_map;
  D.43174_274 = D.43171_273->remote_sdp_port;
  D.43179_275 = (int) D.43174_274;
  D.43171_276 = a_engine_48->cur_payload_map;
  D.43187_277 = D.43171_276->agreed_pt;
  D.43188_278 = (int) D.43187_277;
  D.43189_279 = a_engine_48->read_impl.microseconds_per_packet;
  D.43190_280 = D.43189_279 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4906, session_45(D), 7, "PROXY AUDIO RTP [%s] %s:%d->%s:%d codec: %u ms: %d\n", D.43282_265, D.43172_272, D.43179_275, D.43172_272, D.43179_275, D.43188_278, D.43190_280);
  D.43077_281 = a_engine_48->rtp_session;
  D.43283_282 = switch_rtp_ready (D.43077_281);
  if (D.43283_282 != 0)
    goto <bb 88>;
  else
    goto <bb 91>;

<bb 88>:
  D.43077_283 = a_engine_48->rtp_session;
  D.43171_284 = a_engine_48->cur_payload_map;
  D.43187_285 = D.43171_284->agreed_pt;
  switch_rtp_set_default_payload (D.43077_283, D.43187_285);
  goto <bb 91>;

<bb 89>:
  D.43099_286 = smh_46->mparams;
  timer_name_287 = D.43099_286->timer_name;
  # DEBUG timer_name => timer_name_287
  D.43073_288 = session_45(D)->channel;
  var_289 = switch_channel_get_variable_dup (D.43073_288, "rtp_timer_name", 1, -1);
  # DEBUG var => var_289
  if (var_289 != 0B)
    goto <bb 90>;
  else
    goto <bb 91>;

<bb 90>:
  timer_name_290 = var_289;
  # DEBUG timer_name => timer_name_290

<bb 91>:
  # timer_name_6 = PHI <timer_name_263(88), timer_name_287(89), timer_name_290(90), timer_name_263(87)>
  # DEBUG timer_name => timer_name_6
  D.43073_291 = session_45(D)->channel;
  D.43291_292 = switch_channel_check_signal (D.43073_291, 1);
  if (D.43291_292 != 0)
    goto <bb 93>;
  else
    goto <bb 92>;

<bb 92>:
  D.43073_293 = session_45(D)->channel;
  D.43293_294 = switch_channel_get_state (D.43073_293);
  if (D.43293_294 <= 9)
    goto <bb 93>;
  else
    goto <bb 95>;

<bb 93>:
  D.43184_295 = a_engine_48->local_sdp_ip;
  D.43185_296 = a_engine_48->local_sdp_port;
  D.43171_297 = a_engine_48->cur_payload_map;
  D.43172_298 = D.43171_297->remote_sdp_ip;
  D.43171_299 = a_engine_48->cur_payload_map;
  D.43174_300 = D.43171_299->remote_sdp_port;
  D.43171_301 = a_engine_48->cur_payload_map;
  D.43187_302 = D.43171_301->agreed_pt;
  D.43294_303 = a_engine_48->read_impl.samples_per_packet;
  D.43171_304 = a_engine_48->cur_payload_map;
  D.43295_305 = D.43171_304->codec_ms;
  D.43296_306 = D.43295_305 * 1000;
  D.43297_307 = switch_core_session_get_pool (session_45(D));
  D.43298_308 = switch_rtp_new (D.43184_295, D.43185_296, D.43172_298, D.43174_300, D.43187_302, D.43294_303, D.43296_306, &flags, timer_name_6, &err, D.43297_307);
  a_engine_48->rtp_session = D.43298_308;
  D.43077_309 = a_engine_48->rtp_session;
  D.43299_310 = switch_rtp_ready (D.43077_309);
  if (D.43299_310 != 0)
    goto <bb 94>;
  else
    goto <bb 95>;

<bb 94>:
  D.43077_311 = a_engine_48->rtp_session;
  D.43302_312 = &a_engine_48->payload_map;
  switch_rtp_set_payload_map (D.43077_311, D.43302_312);

<bb 95>:
  D.43077_313 = a_engine_48->rtp_session;
  D.43303_314 = switch_rtp_ready (D.43077_313);
  if (D.43303_314 != 0)
    goto <bb 96>;
  else
    goto <bb 324>;

<bb 96>:
  D.43099_315 = smh_46->mparams;
  D.43306_316 = D.43099_315->vflags;
  D.43307_317 = (uint8_t) D.43306_316;
  vad_in_318 = D.43307_317 & 1;
  # DEBUG vad_in => vad_in_318
  D.43099_319 = smh_46->mparams;
  D.43306_320 = D.43099_319->vflags;
  D.43307_321 = (uint8_t) D.43306_320;
  vad_out_322 = D.43307_321 & 2;
  # DEBUG vad_out => vad_out_322
  D.43073_323 = session_45(D)->channel;
  D.43308_324 = switch_channel_direction (D.43073_323);
  inb_325 = D.43308_324 == 0;
  # DEBUG inb => inb_325
  D.43309_326 = &a_engine_48->read_mutex;
  D.43310_327 = switch_core_session_get_pool (session_45(D));
  switch_mutex_init (D.43309_326, 1, D.43310_327);
  D.43073_328 = session_45(D)->channel;
  ssrc_329 = switch_channel_get_variable_dup (D.43073_328, "rtp_use_ssrc", 1, -1);
  # DEBUG ssrc => ssrc_329
  if (ssrc_329 != 0B)
    goto <bb 97>;
  else
    goto <bb 98>;

<bb 97>:
  ssrc_ul_330 = strtoul (ssrc_329, 0B, 10);
  # DEBUG ssrc_ul => ssrc_ul_330
  D.43077_331 = a_engine_48->rtp_session;
  switch_rtp_set_ssrc (D.43077_331, ssrc_ul_330);
  a_engine_48->ssrc = ssrc_ul_330;
  goto <bb 99>;

<bb 98>:
  D.43077_332 = a_engine_48->rtp_session;
  D.43314_333 = a_engine_48->ssrc;
  switch_rtp_set_ssrc (D.43077_332, D.43314_333);

<bb 99>:
  D.43315_334 = a_engine_48->remote_ssrc;
  if (D.43315_334 != 0)
    goto <bb 100>;
  else
    goto <bb 101>;

<bb 100>:
  D.43077_335 = a_engine_48->rtp_session;
  D.43315_336 = a_engine_48->remote_ssrc;
  switch_rtp_set_remote_ssrc (D.43077_335, D.43315_336);

<bb 101>:
  D.43073_337 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_337, 36, 1);
  D.43073_338 = session_45(D)->channel;
  D.43171_339 = a_engine_48->cur_payload_map;
  D.43187_340 = D.43171_339->agreed_pt;
  D.43188_341 = (int) D.43187_340;
  switch_channel_set_variable_printf (D.43073_338, "rtp_use_pt", "%d", D.43188_341);
  D.43073_342 = session_45(D)->channel;
  val_343 = switch_channel_get_variable_dup (D.43073_342, "rtp_enable_vad_in", 1, -1);
  # DEBUG val => val_343
  if (val_343 != 0B)
    goto <bb 102>;
  else
    goto <bb 104>;

<bb 102>:
  D.43320_344 = switch_true (val_343);
  if (D.43320_344 != 0)
    goto <bb 103>;
  else
    goto <bb 104>;

<bb 103>:
  vad_in_345 = 1;
  # DEBUG vad_in => vad_in_345

<bb 104>:
  # vad_in_9 = PHI <vad_in_318(101), vad_in_318(102), vad_in_345(103)>
  # DEBUG vad_in => vad_in_9
  D.43073_346 = session_45(D)->channel;
  val_347 = switch_channel_get_variable_dup (D.43073_346, "rtp_enable_vad_out", 1, -1);
  # DEBUG val => val_347
  if (val_347 != 0B)
    goto <bb 105>;
  else
    goto <bb 107>;

<bb 105>:
  D.43325_348 = switch_true (val_347);
  if (D.43325_348 != 0)
    goto <bb 106>;
  else
    goto <bb 107>;

<bb 106>:
  vad_out_349 = 1;
  # DEBUG vad_out => vad_out_349

<bb 107>:
  # vad_out_11 = PHI <vad_out_322(104), vad_out_322(105), vad_out_349(106)>
  # DEBUG vad_out => vad_out_11
  D.43073_350 = session_45(D)->channel;
  val_351 = switch_channel_get_variable_dup (D.43073_350, "rtp_disable_vad_in", 1, -1);
  # DEBUG val => val_351
  if (val_351 != 0B)
    goto <bb 108>;
  else
    goto <bb 110>;

<bb 108>:
  D.43330_352 = switch_true (val_351);
  if (D.43330_352 != 0)
    goto <bb 109>;
  else
    goto <bb 110>;

<bb 109>:
  vad_in_353 = 0;
  # DEBUG vad_in => vad_in_353

<bb 110>:
  # vad_in_10 = PHI <vad_in_9(107), vad_in_9(108), vad_in_353(109)>
  # DEBUG vad_in => vad_in_10
  D.43073_354 = session_45(D)->channel;
  val_355 = switch_channel_get_variable_dup (D.43073_354, "rtp_disable_vad_out", 1, -1);
  # DEBUG val => val_355
  if (val_355 != 0B)
    goto <bb 111>;
  else
    goto <bb 113>;

<bb 111>:
  D.43335_356 = switch_true (val_355);
  if (D.43335_356 != 0)
    goto <bb 112>;
  else
    goto <bb 113>;

<bb 112>:
  vad_out_357 = 0;
  # DEBUG vad_out => vad_out_357

<bb 113>:
  # vad_out_12 = PHI <vad_out_11(110), vad_out_11(111), vad_out_357(112)>
  # DEBUG vad_out => vad_out_12
  D.43077_358 = a_engine_48->rtp_session;
  D.43338_359 = switch_rtp_get_ssrc (D.43077_358);
  a_engine_48->ssrc = D.43338_359;
  D.43073_360 = session_45(D)->channel;
  D.43314_361 = a_engine_48->ssrc;
  switch_channel_set_variable_printf (D.43073_360, "rtp_use_ssrc", "%u", D.43314_361);
  D.43099_362 = smh_46->mparams;
  D.43339_363 = D.43099_362->auto_rtp_bugs;
  D.43340_364 = D.43339_363 & 4;
  if (D.43340_364 != 0)
    goto <bb 114>;
  else
    goto <bb 115>;

<bb 114>:
  D.43343_365 = a_engine_48->rtp_bugs;
  D.43344_366 = D.43343_365 | 4;
  a_engine_48->rtp_bugs = D.43344_366;

<bb 115>:
  D.43073_367 = session_45(D)->channel;
  val_368 = switch_channel_get_variable_dup (D.43073_367, "rtp_manual_rtp_bugs", 1, -1);
  # DEBUG val => val_368
  if (val_368 != 0B)
    goto <bb 116>;
  else
    goto <bb 117>;

<bb 116>:
  D.43347_369 = &a_engine_48->rtp_bugs;
  switch_core_media_parse_rtp_bugs (D.43347_369, val_368);

<bb 117>:
  D.43077_370 = a_engine_48->rtp_session;
  D.43343_371 = a_engine_48->rtp_bugs;
  D.43099_372 = smh_46->mparams;
  D.43348_373 = D.43099_372->manual_rtp_bugs;
  D.43349_374 = D.43343_371 | D.43348_373;
  switch_rtp_intentional_bugs (D.43077_370, D.43349_374);
  D.43352_375 = vad_in_10 != 0;
  D.43353_376 = inb_325 != 0;
  D.43354_377 = D.43352_375 && D.43353_376;
  if (D.43354_377 != 0)
    goto <bb 119>;
  else
    goto <bb 118>;

<bb 118>:
  D.43356_378 = vad_out_12 != 0;
  D.43357_379 = inb_325 == 0;
  D.43358_380 = D.43356_378 && D.43357_379;
  if (D.43358_380 != 0)
    goto <bb 119>;
  else
    goto <bb 126>;

<bb 119>:
  D.43077_381 = a_engine_48->rtp_session;
  D.43359_382 = &a_engine_48->read_codec;
  switch_rtp_enable_vad (D.43077_381, session_45(D), D.43359_382, 7);
  D.43360_383 = switch_core_session_get_channel (session_45(D));
  D.43361_384 = switch_channel_get_name (D.43360_383);
  if (vad_in_10 != 0)
    goto <bb 120>;
  else
    goto <bb 121>;

<bb 120>:
  iftmp.47_385 = "in";
  goto <bb 122>;

<bb 121>:
  iftmp.47_386 = "";

<bb 122>:
  # iftmp.47_29 = PHI <iftmp.47_385(120), iftmp.47_386(121)>
  if (vad_out_12 != 0)
    goto <bb 123>;
  else
    goto <bb 124>;

<bb 123>:
  iftmp.48_387 = "out";
  goto <bb 125>;

<bb 124>:
  iftmp.48_388 = "";

<bb 125>:
  # iftmp.48_30 = PHI <iftmp.48_387(123), iftmp.48_388(124)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5001, session_45(D), 7, "AUDIO RTP Engage VAD for %s ( %s %s )\n", D.43361_384, iftmp.47_29, iftmp.48_30);

<bb 126>:
  D.43370_389 = a_engine_48->ice_in.chosen[0];
  D.43371_390 = a_engine_48->ice_in.cands[D.43370_389][0].ready;
  if (D.43371_390 != 0)
    goto <bb 127>;
  else
    goto <bb 131>;

<bb 127>:
  gen_ice (session_45(D), 0, 0B, 0);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5010, session_45(D), 6, "Activating Audio ICE\n");
  D.43077_391 = a_engine_48->rtp_session;
  D.43374_392 = a_engine_48->ice_in.ufrag;
  D.43375_393 = a_engine_48->ice_out.ufrag;
  D.43376_394 = a_engine_48->ice_out.pwd;
  D.43377_395 = a_engine_48->ice_in.pwd;
  D.43379_396 = switch_ice_direction (session_45(D));
  if (D.43379_396 == 1)
    goto <bb 128>;
  else
    goto <bb 129>;

<bb 128>:
  iftmp.49_397 = 2;
  goto <bb 130>;

<bb 129>:
  iftmp.49_398 = 6;

<bb 130>:
  # iftmp.49_31 = PHI <iftmp.49_397(128), iftmp.49_398(129)>
  D.43383_399 = &a_engine_48->ice_in;
  switch_rtp_activate_ice (D.43077_391, D.43374_392, D.43375_393, D.43376_394, D.43377_395, 0, iftmp.49_31, D.43383_399);

<bb 131>:
  D.43073_400 = session_45(D)->channel;
  val_401 = switch_channel_get_variable_dup (D.43073_400, "rtcp_audio_interval_msec", 1, -1);
  # DEBUG val => val_401
  if (val_401 != 0B)
    goto <bb 133>;
  else
    goto <bb 132>;

<bb 132>:
  D.43099_402 = smh_46->mparams;
  val_403 = D.43099_402->rtcp_audio_interval_msec;
  # DEBUG val => val_403
  if (val_403 != 0B)
    goto <bb 133>;
  else
    goto <bb 149>;

<bb 133>:
  # val_1 = PHI <val_401(131), val_403(132)>
  # DEBUG val => val_1
  D.43073_404 = session_45(D)->channel;
  rport_405 = switch_channel_get_variable_dup (D.43073_404, "rtp_remote_audio_rtcp_port", 1, -1);
  # DEBUG rport => rport_405
  remote_rtcp_port_406 = a_engine_48->remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_406
  D.43387_407 = remote_rtcp_port_406 == 0;
  D.43388_408 = rport_405 != 0B;
  D.43389_409 = D.43387_407 && D.43388_408;
  if (D.43389_409 != 0)
    goto <bb 134>;
  else
    goto <bb 135>;

<bb 134>:
  D.43392_410 = atoi (rport_405);
  remote_rtcp_port_411 = (switch_port_t) D.43392_410;
  # DEBUG remote_rtcp_port => remote_rtcp_port_411

<bb 135>:
  # remote_rtcp_port_13 = PHI <remote_rtcp_port_406(133), remote_rtcp_port_411(134)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_13
  D.43393_412 = strcasecmp (val_1, "passthru");
  if (D.43393_412 == 0)
    goto <bb 136>;
  else
    goto <bb 137>;

<bb 136>:
  D.43396_413 = (int) remote_rtcp_port_13;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5043, session_45(D), 6, "Activating RTCP PASSTHRU PORT %d\n", D.43396_413);
  D.43077_414 = a_engine_48->rtp_session;
  D.43397_415 = a_engine_48->rtcp_mux;
  D.43398_416 = D.43397_415 > 0;
  switch_rtp_activate_rtcp (D.43077_414, -1, remote_rtcp_port_13, D.43398_416);
  goto <bb 140>;

<bb 137>:
  interval_417 = atoi (val_1);
  # DEBUG interval => interval_417
  interval.50_418 = (unsigned int) interval_417;
  D.43401_419 = interval.50_418 + 4294967196;
  if (D.43401_419 > 499900)
    goto <bb 138>;
  else
    goto <bb 139>;

<bb 138>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5048, session_45(D), 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_417);
  interval_420 = 10000;
  # DEBUG interval => interval_420

<bb 139>:
  # interval_14 = PHI <interval_417(137), interval_420(138)>
  # DEBUG interval => interval_14
  D.43396_421 = (int) remote_rtcp_port_13;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5053, session_45(D), 6, "Activating RTCP PORT %d\n", D.43396_421);
  D.43077_422 = a_engine_48->rtp_session;
  D.43397_423 = a_engine_48->rtcp_mux;
  D.43398_424 = D.43397_423 > 0;
  switch_rtp_activate_rtcp (D.43077_422, interval_14, remote_rtcp_port_13, D.43398_424);

<bb 140>:
  D.43404_425 = a_engine_48->ice_in.chosen[1];
  D.43405_426 = a_engine_48->ice_in.cands[D.43404_425][1].ready;
  if (D.43405_426 != 0)
    goto <bb 141>;
  else
    goto <bb 149>;

<bb 141>:
  D.43397_427 = a_engine_48->rtcp_mux;
  if (D.43397_427 > 0)
    goto <bb 142>;
  else
    goto <bb 145>;

<bb 142>:
  D.43404_428 = a_engine_48->ice_in.chosen[1];
  D.43411_429 = a_engine_48->ice_in.cands[D.43404_428][1].con_addr;
  D.43370_430 = a_engine_48->ice_in.chosen[0];
  D.43412_431 = a_engine_48->ice_in.cands[D.43370_430][0].con_addr;
  D.39377_432 = __builtin_strcmp (D.43411_429, D.43412_431);
  if (D.39377_432 == 0)
    goto <bb 143>;
  else
    goto <bb 145>;

<bb 143>:
  D.43404_433 = a_engine_48->ice_in.chosen[1];
  D.43414_434 = a_engine_48->ice_in.cands[D.43404_433][1].con_port;
  D.43370_435 = a_engine_48->ice_in.chosen[0];
  D.43415_436 = a_engine_48->ice_in.cands[D.43370_435][0].con_port;
  if (D.43414_434 == D.43415_436)
    goto <bb 144>;
  else
    goto <bb 145>;

<bb 144>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5061, session_45(D), 6, "Skipping RTCP ICE (Same as RTP)\n");
  goto <bb 149>;

<bb 145>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5063, session_45(D), 6, "Activating RTCP ICE\n");
  D.43077_437 = a_engine_48->rtp_session;
  D.43374_438 = a_engine_48->ice_in.ufrag;
  D.43375_439 = a_engine_48->ice_out.ufrag;
  D.43376_440 = a_engine_48->ice_out.pwd;
  D.43377_441 = a_engine_48->ice_in.pwd;
  D.43418_442 = switch_ice_direction (session_45(D));
  if (D.43418_442 == 1)
    goto <bb 146>;
  else
    goto <bb 147>;

<bb 146>:
  iftmp.51_443 = 2;
  goto <bb 148>;

<bb 147>:
  iftmp.51_444 = 6;

<bb 148>:
  # iftmp.51_32 = PHI <iftmp.51_443(146), iftmp.51_444(147)>
  D.43383_445 = &a_engine_48->ice_in;
  switch_rtp_activate_ice (D.43077_437, D.43374_438, D.43375_439, D.43376_440, D.43377_441, 1, iftmp.51_32, D.43383_445);

<bb 149>:
  D.43422_446 = &a_engine_48->local_dtls_fingerprint.str;
  D.43423_447 = _zstr (D.43422_446);
  if (D.43423_447 == 0)
    goto <bb 150>;
  else
    goto <bb 166>;

<bb 150>:
  D.43426_448 = switch_rtp_has_dtls ();
  if (D.43426_448 != 0)
    goto <bb 151>;
  else
    goto <bb 166>;

<bb 151>:
  D.43429_449 = smh_46->session;
  D.43430_450 = dtls_ok (D.43429_449);
  if (D.43430_450 != 0)
    goto <bb 152>;
  else
    goto <bb 166>;

<bb 152>:
  D.43429_451 = smh_46->session;
  D.43434_452 = D.43429_451->channel;
  D.43435_453 = switch_channel_direction (D.43434_452);
  if (D.43435_453 == 0)
    goto <bb 153>;
  else
    goto <bb 154>;

<bb 153>:
  iftmp.52_454 = 1;
  goto <bb 155>;

<bb 154>:
  iftmp.52_455 = 2;

<bb 155>:
  # iftmp.52_33 = PHI <iftmp.52_454(153), iftmp.52_455(154)>
  dtype_456 = iftmp.52_33;
  # DEBUG dtype => dtype_456
  D.43429_457 = smh_46->session;
  D.43434_458 = D.43429_457->channel;
  D.43439_459 = switch_channel_test_flag (D.43434_458, 112);
  if (D.43439_459 != 0)
    goto <bb 156>;
  else
    goto <bb 160>;

<bb 156>:
  if (dtype_456 == 1)
    goto <bb 157>;
  else
    goto <bb 158>;

<bb 157>:
  iftmp.53_460 = 2;
  goto <bb 159>;

<bb 158>:
  iftmp.53_461 = 1;

<bb 159>:
  # iftmp.53_34 = PHI <iftmp.53_460(157), iftmp.53_461(158)>
  dtype_462 = iftmp.53_34;
  # DEBUG dtype => dtype_462

<bb 160>:
  # dtype_16 = PHI <dtype_456(155), dtype_462(159)>
  # DEBUG dtype => dtype_16
  xtype_463 = 4;
  # DEBUG xtype => xtype_463
  D.43397_464 = a_engine_48->rtcp_mux;
  if (D.43397_464 > 0)
    goto <bb 161>;
  else
    goto <bb 163>;

<bb 161>:
  D.43099_465 = smh_46->mparams;
  D.43448_466 = D.43099_465->rtcp_audio_interval_msec;
  if (D.43448_466 != 0B)
    goto <bb 162>;
  else
    goto <bb 163>;

<bb 162>:
  xtype_467 = xtype_463 | 8;
  # DEBUG xtype => xtype_467

<bb 163>:
  # xtype_15 = PHI <xtype_463(160), xtype_463(161), xtype_467(162)>
  # DEBUG xtype => xtype_15
  D.43077_468 = a_engine_48->rtp_session;
  D.43451_469 = &a_engine_48->local_dtls_fingerprint;
  D.43452_470 = &a_engine_48->remote_dtls_fingerprint;
  D.43453_471 = dtype_16 | xtype_15;
  switch_rtp_add_dtls (D.43077_468, D.43451_469, D.43452_470, D.43453_471);
  D.43397_472 = a_engine_48->rtcp_mux;
  if (D.43397_472 <= 0)
    goto <bb 164>;
  else
    goto <bb 166>;

<bb 164>:
  D.43099_473 = smh_46->mparams;
  D.43448_474 = D.43099_473->rtcp_audio_interval_msec;
  if (D.43448_474 != 0B)
    goto <bb 165>;
  else
    goto <bb 166>;

<bb 165>:
  xtype_475 = 8;
  # DEBUG xtype => xtype_475
  D.43077_476 = a_engine_48->rtp_session;
  D.43451_477 = &a_engine_48->local_dtls_fingerprint;
  D.43452_478 = &a_engine_48->remote_dtls_fingerprint;
  D.43453_479 = dtype_16 | xtype_475;
  switch_rtp_add_dtls (D.43077_476, D.43451_477, D.43452_478, D.43453_479);

<bb 166>:
  D.43073_480 = session_45(D)->channel;
  val_481 = switch_channel_get_variable_dup (D.43073_480, "jitterbuffer_msec", 1, -1);
  # DEBUG val => val_481
  if (val_481 != 0B)
    goto <bb 168>;
  else
    goto <bb 167>;

<bb 167>:
  D.43099_482 = smh_46->mparams;
  val_483 = D.43099_482->jb_msec;
  # DEBUG val => val_483
  if (val_483 != 0B)
    goto <bb 168>;
  else
    goto <bb 185>;

<bb 168>:
  # val_2 = PHI <val_481(166), val_483(167)>
  # DEBUG val => val_2
  jb_msec_484 = atoi (val_2);
  # DEBUG jb_msec => jb_msec_484
  maxlen_485 = 0;
  # DEBUG maxlen => maxlen_485
  max_drift_486 = 0;
  # DEBUG max_drift => max_drift_486
  p_487 = __builtin_strchr (val_2, 58);
  # DEBUG p => p_487
  if (p_487 != 0B)
    goto <bb 169>;
  else
    goto <bb 171>;

<bb 169>:
  p_488 = p_487 + 1;
  # DEBUG p => p_488
  maxlen_489 = atoi (p_488);
  # DEBUG maxlen => maxlen_489
  q_490 = __builtin_strchr (p_488, 58);
  # DEBUG q => q_490
  if (q_490 != 0B)
    goto <bb 170>;
  else
    goto <bb 171>;

<bb 170>:
  q_491 = q_490 + 1;
  # DEBUG q => q_491
  D.43465_492 = atoi (q_491);
  max_drift_493 = ABS_EXPR <D.43465_492>;
  # DEBUG max_drift => max_drift_493

<bb 171>:
  # maxlen_18 = PHI <maxlen_485(168), maxlen_489(169), maxlen_489(170)>
  # max_drift_19 = PHI <max_drift_486(168), max_drift_486(169), max_drift_493(170)>
  # DEBUG max_drift => max_drift_19
  # DEBUG maxlen => maxlen_18
  jb_msec.54_494 = (unsigned int) jb_msec_484;
  D.43467_495 = jb_msec.54_494 + 9;
  if (D.43467_495 <= 8)
    goto <bb 172>;
  else
    goto <bb 173>;

<bb 172>:
  D.43470_496 = a_engine_48->read_codec.implementation;
  D.43471_497 = D.43470_496->microseconds_per_packet;
  D.43472_498 = D.43471_497 / 1000;
  D.43473_499 = ABS_EXPR <jb_msec_484>;
  jb_msec_500 = D.43472_498 * D.43473_499;
  # DEBUG jb_msec => jb_msec_500

<bb 173>:
  # jb_msec_17 = PHI <jb_msec_484(171), jb_msec_500(172)>
  # DEBUG jb_msec => jb_msec_17
  jb_msec.54_501 = (unsigned int) jb_msec_17;
  D.43474_502 = jb_msec.54_501 + 4294967276;
  if (D.43474_502 > 9980)
    goto <bb 174>;
  else
    goto <bb 175>;

<bb 174>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5125, session_45(D), 3, "Invalid Jitterbuffer spec [%d] must be between 20 and 10000\n", jb_msec_17);
  goto <bb 185>;

<bb 175>:
  maxqlen_503 = 50;
  # DEBUG maxqlen => maxqlen_503
  D.43189_504 = a_engine_48->read_impl.microseconds_per_packet;
  D.43190_505 = D.43189_504 / 1000;
  qlen_506 = jb_msec_17 / D.43190_505;
  # DEBUG qlen => qlen_506
  if (qlen_506 <= 0)
    goto <bb 176>;
  else
    goto <bb 177>;

<bb 176>:
  qlen_507 = 3;
  # DEBUG qlen => qlen_507

<bb 177>:
  # qlen_20 = PHI <qlen_506(175), qlen_507(176)>
  # DEBUG qlen => qlen_20
  if (maxlen_18 != 0)
    goto <bb 178>;
  else
    goto <bb 179>;

<bb 178>:
  D.43189_508 = a_engine_48->read_impl.microseconds_per_packet;
  D.43190_509 = D.43189_508 / 1000;
  maxqlen_510 = maxlen_18 / D.43190_509;
  # DEBUG maxqlen => maxqlen_510

<bb 179>:
  # maxqlen_21 = PHI <maxqlen_503(177), maxqlen_510(178)>
  # DEBUG maxqlen => maxqlen_21
  if (maxqlen_21 < qlen_20)
    goto <bb 180>;
  else
    goto <bb 181>;

<bb 180>:
  maxqlen_511 = qlen_20 * 5;
  # DEBUG maxqlen => maxqlen_511

<bb 181>:
  # maxqlen_22 = PHI <maxqlen_21(179), maxqlen_511(180)>
  # DEBUG maxqlen => maxqlen_22
  D.43077_512 = a_engine_48->rtp_session;
  qlen.55_513 = (uint32_t) qlen_20;
  maxqlen.56_514 = (uint32_t) maxqlen_22;
  D.43294_515 = a_engine_48->read_impl.samples_per_packet;
  D.43486_516 = a_engine_48->read_impl.samples_per_second;
  max_drift.57_517 = (uint32_t) max_drift_19;
  D.43488_518 = switch_rtp_activate_jitter_buffer (D.43077_512, qlen.55_513, maxqlen.56_514, D.43294_515, D.43486_516, max_drift.57_517);
  if (D.43488_518 == 0)
    goto <bb 182>;
  else
    goto <bb 184>;

<bb 182>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5146, session_45(D), 7, "Setting Jitterbuffer to %dms (%d frames)\n", jb_msec_17, qlen_20);
  D.43073_519 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_519, 57, 1);
  D.43073_520 = session_45(D)->channel;
  D.43491_521 = switch_channel_get_variable_dup (D.43073_520, "rtp_jitter_buffer_plc", 1, -1);
  D.43492_522 = switch_false (D.43491_521);
  if (D.43492_522 == 0)
    goto <bb 183>;
  else
    goto <bb 185>;

<bb 183>:
  D.43073_523 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_523, 58, 1);
  goto <bb 185>;

<bb 184>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5153, session_45(D), 4, "Error Setting Jitterbuffer to %dms (%d frames)\n", jb_msec_17, qlen_20);

<bb 185>:
  D.43073_524 = session_45(D)->channel;
  val_525 = switch_channel_get_variable_dup (D.43073_524, "rtp_timeout_sec", 1, -1);
  # DEBUG val => val_525
  if (val_525 != 0B)
    goto <bb 186>;
  else
    goto <bb 188>;

<bb 186>:
  v_526 = atoi (val_525);
  # DEBUG v => v_526
  if (v_526 >= 0)
    goto <bb 187>;
  else
    goto <bb 188>;

<bb 187>:
  D.43099_527 = smh_46->mparams;
  v.58_528 = (uint32_t) v_526;
  D.43099_527->rtp_timeout_sec = v.58_528;

<bb 188>:
  D.43073_529 = session_45(D)->channel;
  val_530 = switch_channel_get_variable_dup (D.43073_529, "rtp_hold_timeout_sec", 1, -1);
  # DEBUG val => val_530
  if (val_530 != 0B)
    goto <bb 189>;
  else
    goto <bb 191>;

<bb 189>:
  v_531 = atoi (val_530);
  # DEBUG v => v_531
  if (v_531 >= 0)
    goto <bb 190>;
  else
    goto <bb 191>;

<bb 190>:
  D.43099_532 = smh_46->mparams;
  v.59_533 = (uint32_t) v_531;
  D.43099_532->rtp_hold_timeout_sec = v.59_533;

<bb 191>:
  D.43099_534 = smh_46->mparams;
  D.43506_535 = D.43099_534->rtp_timeout_sec;
  if (D.43506_535 != 0)
    goto <bb 192>;
  else
    goto <bb 194>;

<bb 192>:
  D.43486_536 = a_engine_48->read_impl.samples_per_second;
  D.43099_537 = smh_46->mparams;
  D.43506_538 = D.43099_537->rtp_timeout_sec;
  D.43509_539 = D.43486_536 * D.43506_538;
  D.43294_540 = a_engine_48->read_impl.samples_per_packet;
  D.43510_541 = D.43509_539 / D.43294_540;
  a_engine_48->max_missed_packets = D.43510_541;
  D.43077_542 = a_engine_48->rtp_session;
  D.43511_543 = a_engine_48->max_missed_packets;
  switch_rtp_set_max_missed_packets (D.43077_542, D.43511_543);
  D.43099_544 = smh_46->mparams;
  D.43512_545 = D.43099_544->rtp_hold_timeout_sec;
  if (D.43512_545 == 0)
    goto <bb 193>;
  else
    goto <bb 194>;

<bb 193>:
  D.43099_546 = smh_46->mparams;
  D.43099_547 = smh_46->mparams;
  D.43506_548 = D.43099_547->rtp_timeout_sec;
  D.43515_549 = D.43506_548 * 10;
  D.43099_547->rtp_hold_timeout_sec = D.43515_549;

<bb 194>:
  D.43099_550 = smh_46->mparams;
  D.43512_551 = D.43099_550->rtp_hold_timeout_sec;
  if (D.43512_551 != 0)
    goto <bb 195>;
  else
    goto <bb 196>;

<bb 195>:
  D.43486_552 = a_engine_48->read_impl.samples_per_second;
  D.43099_553 = smh_46->mparams;
  D.43512_554 = D.43099_553->rtp_hold_timeout_sec;
  D.43518_555 = D.43486_552 * D.43512_554;
  D.43294_556 = a_engine_48->read_impl.samples_per_packet;
  D.43519_557 = D.43518_555 / D.43294_556;
  a_engine_48->max_missed_hold_packets = D.43519_557;

<bb 196>:
  D.43099_558 = smh_46->mparams;
  D.43520_559 = D.43099_558->te;
  if (D.43520_559 != 0)
    goto <bb 197>;
  else
    goto <bb 198>;

<bb 197>:
  D.43099_560 = smh_46->mparams;
  D.43520_561 = D.43099_560->te;
  D.43523_562 = (int) D.43520_561;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5188, session_45(D), 7, "Set 2833 dtmf send payload to %u\n", D.43523_562);
  D.43077_563 = a_engine_48->rtp_session;
  D.43099_564 = smh_46->mparams;
  D.43520_565 = D.43099_564->te;
  switch_rtp_set_telephony_event (D.43077_563, D.43520_565);
  D.43073_566 = session_45(D)->channel;
  D.43099_567 = smh_46->mparams;
  D.43520_568 = D.43099_567->te;
  D.43523_569 = (int) D.43520_568;
  switch_channel_set_variable_printf (D.43073_566, "rtp_2833_send_payload", "%d", D.43523_569);

<bb 198>:
  D.43099_570 = smh_46->mparams;
  D.43524_571 = D.43099_570->recv_te;
  if (D.43524_571 != 0)
    goto <bb 199>;
  else
    goto <bb 200>;

<bb 199>:
  D.43099_572 = smh_46->mparams;
  D.43524_573 = D.43099_572->recv_te;
  D.43527_574 = (int) D.43524_573;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5194, session_45(D), 7, "Set 2833 dtmf receive payload to %u\n", D.43527_574);
  D.43077_575 = a_engine_48->rtp_session;
  D.43099_576 = smh_46->mparams;
  D.43524_577 = D.43099_576->recv_te;
  switch_rtp_set_telephony_recv_event (D.43077_575, D.43524_577);
  D.43073_578 = session_45(D)->channel;
  D.43099_579 = smh_46->mparams;
  D.43524_580 = D.43099_579->recv_te;
  D.43527_581 = (int) D.43524_580;
  switch_channel_set_variable_printf (D.43073_578, "rtp_2833_recv_payload", "%d", D.43527_581);

<bb 200>:
  D.43531_582 = switch_media_handle_test_media_flag (smh_46, 9);
  if (D.43531_582 != 0)
    goto <bb 205>;
  else
    goto <bb 201>;

<bb 201>:
  D.43073_583 = session_45(D)->channel;
  val_584 = switch_channel_get_variable_dup (D.43073_583, "supress_cng", 1, -1);
  # DEBUG val => val_584
  if (val_584 != 0B)
    goto <bb 202>;
  else
    goto <bb 203>;

<bb 202>:
  D.43534_585 = switch_true (val_584);
  if (D.43534_585 != 0)
    goto <bb 205>;
  else
    goto <bb 203>;

<bb 203>:
  D.43073_586 = session_45(D)->channel;
  val_587 = switch_channel_get_variable_dup (D.43073_586, "suppress_cng", 1, -1);
  # DEBUG val => val_587
  if (val_587 != 0B)
    goto <bb 204>;
  else
    goto <bb 206>;

<bb 204>:
  D.43536_588 = switch_true (val_587);
  if (D.43536_588 != 0)
    goto <bb 205>;
  else
    goto <bb 206>;

<bb 205>:
  D.43099_589 = smh_46->mparams;
  D.43099_589->cng_pt = 0;

<bb 206>:
  D.43073_590 = session_45(D)->channel;
  val_591 = switch_channel_get_variable_dup (D.43073_590, "rtp_digit_delay", 1, -1);
  # DEBUG val => val_591
  if (val_591 != 0B)
    goto <bb 207>;
  else
    goto <bb 210>;

<bb 207>:
  delayi_592 = atoi (val_591);
  # DEBUG delayi => delayi_592
  if (delayi_592 < 0)
    goto <bb 208>;
  else
    goto <bb 209>;

<bb 208>:
  delayi_593 = 0;
  # DEBUG delayi => delayi_593

<bb 209>:
  # delayi_23 = PHI <delayi_592(207), delayi_593(208)>
  # DEBUG delayi => delayi_23
  D.43099_594 = smh_46->mparams;
  delayi.60_595 = (unsigned int) delayi_23;
  D.43099_594->dtmf_delay = delayi.60_595;

<bb 210>:
  D.43099_596 = smh_46->mparams;
  D.43542_597 = D.43099_596->dtmf_delay;
  if (D.43542_597 != 0)
    goto <bb 211>;
  else
    goto <bb 212>;

<bb 211>:
  D.43077_598 = a_engine_48->rtp_session;
  D.43099_599 = smh_46->mparams;
  D.43542_600 = D.43099_599->dtmf_delay;
  switch_rtp_set_interdigit_delay (D.43077_598, D.43542_600);
  D.43073_601 = session_45(D)->channel;
  D.43545_602 = switch_channel_get_name (D.43073_601);
  D.43099_603 = smh_46->mparams;
  D.43542_604 = D.43099_603->dtmf_delay;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5216, session_45(D), 7, "%s Set rtp dtmf delay to %u\n", D.43545_602, D.43542_604);

<bb 212>:
  D.43099_605 = smh_46->mparams;
  D.43143_606 = D.43099_605->cng_pt;
  if (D.43143_606 != 0)
    goto <bb 213>;
  else
    goto <bb 215>;

<bb 213>:
  D.43548_607 = switch_media_handle_test_media_flag (smh_46, 9);
  if (D.43548_607 == 0)
    goto <bb 214>;
  else
    goto <bb 215>;

<bb 214>:
  D.43099_608 = smh_46->mparams;
  D.43143_609 = D.43099_608->cng_pt;
  D.43551_610 = (int) D.43143_609;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5222, session_45(D), 7, "Set comfort noise payload to %u\n", D.43551_610);
  D.43077_611 = a_engine_48->rtp_session;
  D.43099_612 = smh_46->mparams;
  D.43143_613 = D.43099_612->cng_pt;
  switch_rtp_set_cng_pt (D.43077_611, D.43143_613);

<bb 215>:
  switch_core_session_apply_crypto (session_45(D), 0);
  D.43171_614 = a_engine_48->cur_payload_map;
  D.43174_615 = D.43171_614->remote_sdp_port;
  D.43179_616 = (int) D.43174_615;
  switch_snprintf (&tmp, 50, "%d", D.43179_616);
  D.43073_617 = session_45(D)->channel;
  D.43171_618 = a_engine_48->cur_payload_map;
  D.43172_619 = D.43171_618->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_617, "remote_media_ip", D.43172_619, 1);
  D.43073_620 = session_45(D)->channel;
  switch_channel_set_variable_var_check (D.43073_620, "remote_media_port", &tmp, 1);
  D.43073_621 = session_45(D)->channel;
  D.43552_622 = switch_channel_test_flag (D.43073_621, 74);
  if (D.43552_622 != 0)
    goto <bb 216>;
  else
    goto <bb 217> (video);

<bb 216>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5234, session_45(D), 6, "Activating ZRTP PROXY MODE\n");
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5235, session_45(D), 7, "Disable NOTIMER_DURING_BRIDGE\n");
  D.43073_623 = session_45(D)->channel;
  switch_channel_clear_flag (D.43073_623, 99);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5237, session_45(D), 7, "Activating audio UDPTL mode\n");
  D.43077_624 = a_engine_48->rtp_session;
  switch_rtp_udptl_mode (D.43077_624);

  # status_4 = PHI <status_43(18), status_73(53), status_73(80), status_73(215), status_73(216), status_73(79)>
video:
  # DEBUG status => status_4
  D.43073_630 = session_45(D)->channel;
  D.43555_631 = switch_channel_direction (D.43073_630);
  if (D.43555_631 == 1)
    goto <bb 218>;
  else
    goto <bb 219>;

<bb 218>:
  switch_core_media_check_video_codecs (session_45(D));

<bb 219>:
  D.43073_632 = session_45(D)->channel;
  D.43558_633 = switch_channel_test_flag (D.43073_632, 98);
  if (D.43558_633 != 0)
    goto <bb 220>;
  else
    goto <bb 328> (video_up);

<bb 220>:
  D.43561_634 = v_engine_49->cur_payload_map;
  D.43562_635 = D.43561_634->rm_encoding;
  if (D.43562_635 != 0B)
    goto <bb 221>;
  else
    goto <bb 328> (video_up);

<bb 221>:
  D.43561_636 = v_engine_49->cur_payload_map;
  D.43565_637 = D.43561_636->remote_sdp_port;
  if (D.43565_637 != 0)
    goto <bb 222>;
  else
    goto <bb 328> (video_up);

<bb 222>:
  D.43096_638 = v_engine_49->rtp_session;
  if (D.43096_638 != 0B)
    goto <bb 223>;
  else
    goto <bb 229>;

<bb 223>:
  D.43073_639 = session_45(D)->channel;
  D.43570_640 = switch_channel_test_flag (D.43073_639, 103);
  if (D.43570_640 != 0)
    goto <bb 224>;
  else
    goto <bb 229>;

<bb 224>:
  D.43096_641 = v_engine_49->rtp_session;
  remote_host_642 = switch_rtp_get_remote_host (D.43096_641);
  # DEBUG remote_host => remote_host_642
  D.43096_643 = v_engine_49->rtp_session;
  remote_port_644 = switch_rtp_get_remote_port (D.43096_643);
  # DEBUG remote_port => remote_port_644
  D.43574_645 = remote_host_642 != 0B;
  D.43575_646 = remote_port_644 != 0;
  D.43576_647 = D.43574_645 && D.43575_646;
  if (D.43576_647 != 0)
    goto <bb 225>;
  else
    goto <bb 228>;

<bb 225>:
  D.43561_648 = v_engine_49->cur_payload_map;
  D.43578_649 = D.43561_648->remote_sdp_ip;
  D.39400_650 = __builtin_strcmp (remote_host_642, D.43578_649);
  if (D.39400_650 == 0)
    goto <bb 226>;
  else
    goto <bb 228>;

<bb 226>:
  D.43561_651 = v_engine_49->cur_payload_map;
  D.43565_652 = D.43561_651->remote_sdp_port;
  if (D.43565_652 == remote_port_644)
    goto <bb 227>;
  else
    goto <bb 228>;

<bb 227>:
  D.43073_653 = session_45(D)->channel;
  D.43581_654 = switch_channel_get_name (D.43073_653);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5263, session_45(D), 7, "Video params are unchanged for %s.\n", D.43581_654);
  goto <bb 328> (video_up);

<bb 228>:
  D.43073_655 = session_45(D)->channel;
  D.43582_656 = switch_channel_get_name (D.43073_655);
  D.43583_657 = (int) remote_port_644;
  D.43561_658 = v_engine_49->cur_payload_map;
  D.43578_659 = D.43561_658->remote_sdp_ip;
  D.43561_660 = v_engine_49->cur_payload_map;
  D.43565_661 = D.43561_660->remote_sdp_port;
  D.43584_662 = (int) D.43565_661;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5267, session_45(D), 7, "Video params changed for %s from %s:%d to %s:%d\n", D.43582_656, remote_host_642, D.43583_657, D.43578_659, D.43584_662);

<bb 229>:
  D.43073_663 = session_45(D)->channel;
  D.43585_664 = switch_channel_test_flag (D.43073_663, 29);
  if (D.43585_664 == 0)
    goto <bb 230>;
  else
    goto <bb 232>;

<bb 230>:
  D.43096_665 = v_engine_49->rtp_session;
  D.43588_666 = switch_rtp_ready (D.43096_665);
  if (D.43588_666 != 0)
    goto <bb 231>;
  else
    goto <bb 232>;

<bb 231>:
  D.43073_667 = session_45(D)->channel;
  D.43591_668 = switch_channel_get_name (D.43073_667);
  D.43171_669 = a_engine_48->cur_payload_map;
  D.43172_670 = D.43171_669->remote_sdp_ip;
  D.43592_671 = v_engine_49->local_sdp_port;
  D.43593_672 = (int) D.43592_671;
  D.43561_673 = v_engine_49->cur_payload_map;
  D.43578_674 = D.43561_673->remote_sdp_ip;
  D.43561_675 = v_engine_49->cur_payload_map;
  D.43565_676 = D.43561_675->remote_sdp_port;
  D.43584_677 = (int) D.43565_676;
  D.43561_678 = v_engine_49->cur_payload_map;
  D.43594_679 = D.43561_678->agreed_pt;
  D.43595_680 = (int) D.43594_679;
  D.43189_681 = a_engine_48->read_impl.microseconds_per_packet;
  D.43190_682 = D.43189_681 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5275, session_45(D), 7, "VIDEO RTP [%s] %s port %d -> %s port %d codec: %u ms: %d\n", D.43591_668, D.43172_670, D.43593_672, D.43578_674, D.43584_677, D.43595_680, D.43190_682);
  start_video_thread (session_45(D));
  D.43096_683 = v_engine_49->rtp_session;
  D.43561_684 = v_engine_49->cur_payload_map;
  D.43594_685 = D.43561_684->agreed_pt;
  switch_rtp_set_default_payload (D.43096_683, D.43594_685);

<bb 232>:
  D.43592_686 = v_engine_49->local_sdp_port;
  D.43593_687 = (int) D.43592_686;
  switch_snprintf (&tmp, 50, "%d", D.43593_687);
  D.43073_688 = session_45(D)->channel;
  D.43191_689 = a_engine_48->adv_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_688, "local_video_ip", D.43191_689, 1);
  D.43073_690 = session_45(D)->channel;
  switch_channel_set_variable_var_check (D.43073_690, "local_video_port", &tmp, 1);
  D.43096_691 = v_engine_49->rtp_session;
  if (D.43096_691 != 0B)
    goto <bb 233>;
  else
    goto <bb 244>;

<bb 233>:
  D.43073_692 = session_45(D)->channel;
  D.43598_693 = switch_channel_test_flag (D.43073_692, 103);
  if (D.43598_693 != 0)
    goto <bb 234>;
  else
    goto <bb 244>;

<bb 234>:
  rport_694 = 0B;
  # DEBUG rport => rport_694
  remote_rtcp_port_695 = v_engine_49->remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_695
  if (remote_rtcp_port_695 == 0)
    goto <bb 235>;
  else
    goto <bb 237>;

<bb 235>:
  D.43073_696 = session_45(D)->channel;
  rport_697 = switch_channel_get_variable_dup (D.43073_696, "rtp_remote_video_rtcp_port", 1, -1);
  # DEBUG rport => rport_697
  if (rport_697 != 0B)
    goto <bb 236>;
  else
    goto <bb 237>;

<bb 236>:
  D.43605_698 = atoi (rport_697);
  remote_rtcp_port_699 = (switch_port_t) D.43605_698;
  # DEBUG remote_rtcp_port => remote_rtcp_port_699

<bb 237>:
  # remote_rtcp_port_24 = PHI <remote_rtcp_port_695(234), remote_rtcp_port_695(235), remote_rtcp_port_699(236)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_24
  D.43096_700 = v_engine_49->rtp_session;
  D.43561_701 = v_engine_49->cur_payload_map;
  D.43578_702 = D.43561_701->remote_sdp_ip;
  D.43561_703 = v_engine_49->cur_payload_map;
  D.43565_704 = D.43561_703->remote_sdp_port;
  D.43606_705 = switch_rtp_set_remote_address (D.43096_700, D.43578_702, D.43565_704, remote_rtcp_port_24, 1, &err);
  if (D.43606_705 != 0)
    goto <bb 238>;
  else
    goto <bb 239>;

<bb 238>:
  err.45_706 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5306, session_45(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", err.45_706);
  goto <bb 328> (video_up);

<bb 239>:
  D.43561_707 = v_engine_49->cur_payload_map;
  D.43578_708 = D.43561_707->remote_sdp_ip;
  D.43561_709 = v_engine_49->cur_payload_map;
  D.43565_710 = D.43561_709->remote_sdp_port;
  D.43584_711 = (int) D.43565_710;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5308, session_45(D), 7, "VIDEO RTP CHANGING DEST TO: [%s:%d]\n", D.43578_708, D.43584_711);
  D.43612_712 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43612_712 == 0)
    goto <bb 240>;
  else
    goto <bb 328> (video_up);

<bb 240>:
  D.43073_713 = session_45(D)->channel;
  D.43615_714 = switch_channel_test_flag (D.43073_713, 106);
  if (D.43615_714 == 0)
    goto <bb 241>;
  else
    goto <bb 328> (video_up);

<bb 241>:
  D.43073_715 = session_45(D)->channel;
  val_716 = switch_channel_get_variable_dup (D.43073_715, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_716
  if (val_716 == 0B)
    goto <bb 243>;
  else
    goto <bb 242>;

<bb 242>:
  D.43619_717 = switch_true (val_716);
  if (D.43619_717 == 0)
    goto <bb 243>;
  else
    goto <bb 328> (video_up);

<bb 243>:
  D.43096_718 = v_engine_49->rtp_session;
  switch_rtp_set_flag (D.43096_718, 7);
  start_video_thread (session_45(D));
  goto <bb 328> (video_up);

<bb 244>:
  D.43073_719 = session_45(D)->channel;
  D.43620_720 = switch_channel_test_flag (D.43073_719, 29);
  if (D.43620_720 != 0)
    goto <bb 245>;
  else
    goto <bb 252>;

<bb 245>:
  switch_core_media_proxy_remote_addr (session_45(D), 0B);
  memset (&flags, 0, 156);
  D.43270_721 = flags[19];
  D.43271_722 = D.43270_721 + 1;
  flags[19] = D.43271_722;
  D.43102_723 = flags[13];
  D.43103_724 = D.43102_723 + 1;
  flags[13] = D.43103_724;
  D.43625_725 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43625_725 == 0)
    goto <bb 246>;
  else
    goto <bb 250>;

<bb 246>:
  D.43073_726 = session_45(D)->channel;
  D.43628_727 = switch_channel_test_flag (D.43073_726, 106);
  if (D.43628_727 == 0)
    goto <bb 247>;
  else
    goto <bb 250>;

<bb 247>:
  D.43073_728 = session_45(D)->channel;
  val_729 = switch_channel_get_variable_dup (D.43073_728, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_729
  if (val_729 == 0B)
    goto <bb 249>;
  else
    goto <bb 248>;

<bb 248>:
  D.43632_730 = switch_true (val_729);
  if (D.43632_730 == 0)
    goto <bb 249>;
  else
    goto <bb 250>;

<bb 249>:
  D.43114_731 = flags[7];
  D.43115_732 = D.43114_731 + 1;
  flags[7] = D.43115_732;

<bb 250>:
  timer_name_733 = 0B;
  # DEBUG timer_name => timer_name_733
  D.43073_734 = session_45(D)->channel;
  D.43633_735 = switch_channel_get_name (D.43073_734);
  D.43171_736 = a_engine_48->cur_payload_map;
  D.43172_737 = D.43171_736->remote_sdp_ip;
  D.43592_738 = v_engine_49->local_sdp_port;
  D.43593_739 = (int) D.43592_738;
  D.43561_740 = v_engine_49->cur_payload_map;
  D.43578_741 = D.43561_740->remote_sdp_ip;
  D.43561_742 = v_engine_49->cur_payload_map;
  D.43565_743 = D.43561_742->remote_sdp_port;
  D.43584_744 = (int) D.43565_743;
  D.43561_745 = v_engine_49->cur_payload_map;
  D.43594_746 = D.43561_745->agreed_pt;
  D.43595_747 = (int) D.43594_746;
  D.43634_748 = v_engine_49->read_impl.microseconds_per_packet;
  D.43635_749 = D.43634_748 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5334, session_45(D), 7, "PROXY VIDEO RTP [%s] %s:%d->%s:%d codec: %u ms: %d\n", D.43633_735, D.43172_737, D.43593_739, D.43578_741, D.43584_744, D.43595_747, D.43635_749);
  D.43096_750 = v_engine_49->rtp_session;
  D.43636_751 = switch_rtp_ready (D.43096_750);
  if (D.43636_751 != 0)
    goto <bb 251>;
  else
    goto <bb 254>;

<bb 251>:
  D.43096_752 = v_engine_49->rtp_session;
  D.43561_753 = v_engine_49->cur_payload_map;
  D.43594_754 = D.43561_753->agreed_pt;
  switch_rtp_set_default_payload (D.43096_752, D.43594_754);
  goto <bb 254>;

<bb 252>:
  D.43099_755 = smh_46->mparams;
  timer_name_756 = D.43099_755->timer_name;
  # DEBUG timer_name => timer_name_756
  D.43073_757 = session_45(D)->channel;
  var_758 = switch_channel_get_variable_dup (D.43073_757, "rtp_timer_name", 1, -1);
  # DEBUG var => var_758
  if (var_758 != 0B)
    goto <bb 253>;
  else
    goto <bb 254>;

<bb 253>:
  timer_name_759 = var_758;
  # DEBUG timer_name => timer_name_759

<bb 254>:
  D.43096_760 = v_engine_49->rtp_session;
  if (D.43096_760 != 0B)
    goto <bb 328> (video_up);
  else
    goto <bb 255>;

<bb 255>:
  D.43592_761 = v_engine_49->local_sdp_port;
  if (D.43592_761 == 0)
    goto <bb 256>;
  else
    goto <bb 257>;

<bb 256>:
  switch_core_media_choose_port (session_45(D), 1, 1);

<bb 257>:
  memset (&flags, 0, 156);
  D.43102_762 = flags[13];
  D.43103_763 = D.43102_762 + 1;
  flags[13] = D.43103_763;
  D.43137_764 = flags[8];
  D.43138_765 = D.43137_764 + 1;
  flags[8] = D.43138_765;
  D.43647_766 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43647_766 == 0)
    goto <bb 258>;
  else
    goto <bb 263>;

<bb 258>:
  D.43073_767 = session_45(D)->channel;
  D.43650_768 = switch_channel_test_flag (D.43073_767, 15);
  if (D.43650_768 == 0)
    goto <bb 259>;
  else
    goto <bb 263>;

<bb 259>:
  D.43073_769 = session_45(D)->channel;
  val_770 = switch_channel_get_variable_dup (D.43073_769, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_770
  if (val_770 == 0B)
    goto <bb 261>;
  else
    goto <bb 260>;

<bb 260>:
  D.43654_771 = switch_true (val_770);
  if (D.43654_771 == 0)
    goto <bb 261>;
  else
    goto <bb 263>;

<bb 261>:
  D.43073_772 = session_45(D)->channel;
  D.43655_773 = switch_channel_test_flag (D.43073_772, 106);
  if (D.43655_773 == 0)
    goto <bb 262>;
  else
    goto <bb 263>;

<bb 262>:
  D.43114_774 = flags[7];
  D.43115_775 = D.43114_774 + 1;
  flags[7] = D.43115_775;

<bb 263>:
  D.43073_776 = session_45(D)->channel;
  D.43658_777 = switch_channel_test_flag (D.43073_776, 29);
  if (D.43658_777 != 0)
    goto <bb 264>;
  else
    goto <bb 265>;

<bb 264>:
  D.43270_778 = flags[19];
  D.43271_779 = D.43270_778 + 1;
  flags[19] = D.43271_779;

<bb 265>:
  switch_core_media_set_video_codec (session_45(D), 0);
  flags[3] = 0;
  flags[0] = 0;
  D.43661_780 = flags[30];
  D.43662_781 = D.43661_780 + 1;
  flags[30] = D.43662_781;
  D.43184_782 = a_engine_48->local_sdp_ip;
  D.43592_783 = v_engine_49->local_sdp_port;
  D.43561_784 = v_engine_49->cur_payload_map;
  D.43578_785 = D.43561_784->remote_sdp_ip;
  D.43561_786 = v_engine_49->cur_payload_map;
  D.43565_787 = D.43561_786->remote_sdp_port;
  D.43561_788 = v_engine_49->cur_payload_map;
  D.43594_789 = D.43561_788->agreed_pt;
  D.43663_790 = switch_core_session_get_pool (session_45(D));
  D.43664_791 = switch_rtp_new (D.43184_782, D.43592_783, D.43578_785, D.43565_787, D.43594_789, 1, 90000, &flags, 0B, &err, D.43663_790);
  v_engine_49->rtp_session = D.43664_791;
  D.43073_792 = session_45(D)->channel;
  D.43666_793 = switch_channel_test_flag (D.43073_792, 29);
  if (D.43666_793 != 0)
    goto <bb 266>;
  else
    goto <bb 267>;

<bb 266>:
  iftmp.61_794 = "PROXY ";
  goto <bb 268>;

<bb 267>:
  iftmp.61_795 = "";

<bb 268>:
  # iftmp.61_35 = PHI <iftmp.61_794(266), iftmp.61_795(267)>
  D.43073_796 = session_45(D)->channel;
  D.43670_797 = switch_channel_get_name (D.43073_796);
  D.43171_798 = a_engine_48->cur_payload_map;
  D.43172_799 = D.43171_798->remote_sdp_ip;
  D.43592_800 = v_engine_49->local_sdp_port;
  D.43593_801 = (int) D.43592_800;
  D.43561_802 = v_engine_49->cur_payload_map;
  D.43578_803 = D.43561_802->remote_sdp_ip;
  D.43561_804 = v_engine_49->cur_payload_map;
  D.43565_805 = D.43561_804->remote_sdp_port;
  D.43584_806 = (int) D.43565_805;
  D.43561_807 = v_engine_49->cur_payload_map;
  D.43594_808 = D.43561_807->agreed_pt;
  D.43595_809 = (int) D.43594_808;
  D.43096_810 = v_engine_49->rtp_session;
  D.43672_811 = switch_rtp_ready (D.43096_810);
  if (D.43672_811 == 0)
    goto <bb 269>;
  else
    goto <bb 270>;

<bb 269>:
  iftmp.62_812 = err;
  goto <bb 271>;

<bb 270>:
  iftmp.62_813 = "SUCCESS";

<bb 271>:
  # iftmp.62_36 = PHI <iftmp.62_812(269), iftmp.62_813(270)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5391, session_45(D), 7, "%sVIDEO RTP [%s] %s:%d->%s:%d codec: %u ms: %d [%s]\n", iftmp.61_35, D.43670_797, D.43172_799, D.43593_801, D.43578_803, D.43584_806, D.43595_809, 0, iftmp.62_36);
  D.43096_814 = v_engine_49->rtp_session;
  D.43676_815 = switch_rtp_ready (D.43096_814);
  if (D.43676_815 != 0)
    goto <bb 272>;
  else
    goto <bb 320>;

<bb 272>:
  D.43679_816 = v_engine_49->fir;
  if (D.43679_816 != 0)
    goto <bb 273>;
  else
    goto <bb 274>;

<bb 273>:
  D.43096_817 = v_engine_49->rtp_session;
  switch_rtp_set_flag (D.43096_817, 36);

<bb 274>:
  D.43682_818 = v_engine_49->pli;
  if (D.43682_818 != 0)
    goto <bb 275>;
  else
    goto <bb 276>;

<bb 275>:
  D.43096_819 = v_engine_49->rtp_session;
  switch_rtp_set_flag (D.43096_819, 37);

<bb 276>:
  D.43096_820 = v_engine_49->rtp_session;
  D.43685_821 = &v_engine_49->payload_map;
  switch_rtp_set_payload_map (D.43096_820, D.43685_821);
  start_video_thread (session_45(D));
  D.43073_822 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_822, 23, 1);
  D.43073_823 = session_45(D)->channel;
  ssrc_824 = switch_channel_get_variable_dup (D.43073_823, "rtp_use_video_ssrc", 1, -1);
  # DEBUG ssrc => ssrc_824
  if (ssrc_824 != 0B)
    goto <bb 277>;
  else
    goto <bb 278>;

<bb 277>:
  ssrc_ul_825 = strtoul (ssrc_824, 0B, 10);
  # DEBUG ssrc_ul => ssrc_ul_825
  D.43096_826 = v_engine_49->rtp_session;
  switch_rtp_set_ssrc (D.43096_826, ssrc_ul_825);
  v_engine_49->ssrc = ssrc_ul_825;
  goto <bb 279>;

<bb 278>:
  D.43096_827 = v_engine_49->rtp_session;
  D.43689_828 = v_engine_49->ssrc;
  switch_rtp_set_ssrc (D.43096_827, D.43689_828);

<bb 279>:
  D.43690_829 = v_engine_49->remote_ssrc;
  if (D.43690_829 != 0)
    goto <bb 280>;
  else
    goto <bb 281>;

<bb 280>:
  D.43096_830 = v_engine_49->rtp_session;
  D.43690_831 = v_engine_49->remote_ssrc;
  switch_rtp_set_remote_ssrc (D.43096_830, D.43690_831);

<bb 281>:
  D.43693_832 = v_engine_49->ice_in.chosen[0];
  D.43694_833 = v_engine_49->ice_in.cands[D.43693_832][0].ready;
  if (D.43694_833 != 0)
    goto <bb 282>;
  else
    goto <bb 286>;

<bb 282>:
  gen_ice (session_45(D), 1, 0B, 0);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5433, session_45(D), 6, "Activating Video ICE\n");
  D.43096_834 = v_engine_49->rtp_session;
  D.43697_835 = v_engine_49->ice_in.ufrag;
  D.43698_836 = v_engine_49->ice_out.ufrag;
  D.43699_837 = v_engine_49->ice_out.pwd;
  D.43700_838 = v_engine_49->ice_in.pwd;
  D.43702_839 = switch_ice_direction (session_45(D));
  if (D.43702_839 == 1)
    goto <bb 283>;
  else
    goto <bb 284>;

<bb 283>:
  iftmp.63_840 = 2;
  goto <bb 285>;

<bb 284>:
  iftmp.63_841 = 6;

<bb 285>:
  # iftmp.63_37 = PHI <iftmp.63_840(283), iftmp.63_841(284)>
  D.43706_842 = &v_engine_49->ice_in;
  switch_rtp_activate_ice (D.43096_834, D.43697_835, D.43698_836, D.43699_837, D.43700_838, 0, iftmp.63_37, D.43706_842);

<bb 286>:
  D.43073_843 = session_45(D)->channel;
  val_844 = switch_channel_get_variable_dup (D.43073_843, "rtcp_video_interval_msec", 1, -1);
  # DEBUG val => val_844
  if (val_844 != 0B)
    goto <bb 288>;
  else
    goto <bb 287>;

<bb 287>:
  D.43099_845 = smh_46->mparams;
  val_846 = D.43099_845->rtcp_video_interval_msec;
  # DEBUG val => val_846
  if (val_846 != 0B)
    goto <bb 288>;
  else
    goto <bb 304>;

<bb 288>:
  # val_3 = PHI <val_844(286), val_846(287)>
  # DEBUG val => val_3
  D.43073_847 = session_45(D)->channel;
  rport_848 = switch_channel_get_variable_dup (D.43073_847, "rtp_remote_video_rtcp_port", 1, -1);
  # DEBUG rport => rport_848
  remote_port_849 = v_engine_49->remote_rtcp_port;
  # DEBUG remote_port => remote_port_849
  if (rport_848 != 0B)
    goto <bb 289>;
  else
    goto <bb 290>;

<bb 289>:
  D.43712_850 = atoi (rport_848);
  remote_port_851 = (switch_port_t) D.43712_850;
  # DEBUG remote_port => remote_port_851

<bb 290>:
  # remote_port_25 = PHI <remote_port_849(288), remote_port_851(289)>
  # DEBUG remote_port => remote_port_25
  D.43713_852 = strcasecmp (val_3, "passthru");
  if (D.43713_852 == 0)
    goto <bb 291>;
  else
    goto <bb 292>;

<bb 291>:
  D.43716_853 = (int) remote_port_25;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5462, session_45(D), 6, "Activating VIDEO RTCP PASSTHRU PORT %d\n", D.43716_853);
  D.43096_854 = v_engine_49->rtp_session;
  D.43717_855 = v_engine_49->rtcp_mux;
  D.43718_856 = D.43717_855 > 0;
  switch_rtp_activate_rtcp (D.43096_854, -1, remote_port_25, D.43718_856);
  goto <bb 295>;

<bb 292>:
  interval_857 = atoi (val_3);
  # DEBUG interval => interval_857
  interval.64_858 = (unsigned int) interval_857;
  D.43721_859 = interval.64_858 + 4294967196;
  if (D.43721_859 > 499900)
    goto <bb 293>;
  else
    goto <bb 294>;

<bb 293>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5467, session_45(D), 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_857);

<bb 294>:
  interval_860 = 10000;
  # DEBUG interval => interval_860
  D.43716_861 = (int) remote_port_25;
  D.43717_862 = v_engine_49->rtcp_mux;
  D.43724_863 = (int) D.43717_862;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5471, session_45(D), 6, "Activating VIDEO RTCP PORT %d mux %d\n", D.43716_861, D.43724_863);
  D.43096_864 = v_engine_49->rtp_session;
  D.43717_865 = v_engine_49->rtcp_mux;
  D.43718_866 = D.43717_865 > 0;
  switch_rtp_activate_rtcp (D.43096_864, interval_860, remote_port_25, D.43718_866);

<bb 295>:
  D.43725_867 = v_engine_49->ice_in.chosen[1];
  D.43726_868 = v_engine_49->ice_in.cands[D.43725_867][1].ready;
  if (D.43726_868 != 0)
    goto <bb 296>;
  else
    goto <bb 304>;

<bb 296>:
  D.43717_869 = v_engine_49->rtcp_mux;
  if (D.43717_869 > 0)
    goto <bb 297>;
  else
    goto <bb 300>;

<bb 297>:
  D.43725_870 = v_engine_49->ice_in.chosen[1];
  D.43732_871 = v_engine_49->ice_in.cands[D.43725_870][1].con_addr;
  D.43693_872 = v_engine_49->ice_in.chosen[0];
  D.43733_873 = v_engine_49->ice_in.cands[D.43693_872][0].con_addr;
  D.39417_874 = __builtin_strcmp (D.43732_871, D.43733_873);
  if (D.39417_874 == 0)
    goto <bb 298>;
  else
    goto <bb 300>;

<bb 298>:
  D.43725_875 = v_engine_49->ice_in.chosen[1];
  D.43735_876 = v_engine_49->ice_in.cands[D.43725_875][1].con_port;
  D.43693_877 = v_engine_49->ice_in.chosen[0];
  D.43736_878 = v_engine_49->ice_in.cands[D.43693_877][0].con_port;
  if (D.43735_876 == D.43736_878)
    goto <bb 299>;
  else
    goto <bb 300>;

<bb 299>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5481, session_45(D), 6, "Skipping VIDEO RTCP ICE (Same as VIDEO RTP)\n");
  goto <bb 304>;

<bb 300>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5484, session_45(D), 6, "Activating VIDEO RTCP ICE\n");
  D.43096_879 = v_engine_49->rtp_session;
  D.43697_880 = v_engine_49->ice_in.ufrag;
  D.43698_881 = v_engine_49->ice_out.ufrag;
  D.43699_882 = v_engine_49->ice_out.pwd;
  D.43700_883 = v_engine_49->ice_in.pwd;
  D.43739_884 = switch_ice_direction (session_45(D));
  if (D.43739_884 == 1)
    goto <bb 301>;
  else
    goto <bb 302>;

<bb 301>:
  iftmp.65_885 = 2;
  goto <bb 303>;

<bb 302>:
  iftmp.65_886 = 6;

<bb 303>:
  # iftmp.65_38 = PHI <iftmp.65_885(301), iftmp.65_886(302)>
  D.43706_887 = &v_engine_49->ice_in;
  switch_rtp_activate_ice (D.43096_879, D.43697_880, D.43698_881, D.43699_882, D.43700_883, 1, iftmp.65_38, D.43706_887);

<bb 304>:
  D.43743_888 = &v_engine_49->local_dtls_fingerprint.str;
  D.43744_889 = _zstr (D.43743_888);
  if (D.43744_889 == 0)
    goto <bb 305>;
  else
    goto <bb 316>;

<bb 305>:
  D.43747_890 = switch_rtp_has_dtls ();
  if (D.43747_890 != 0)
    goto <bb 306>;
  else
    goto <bb 316>;

<bb 306>:
  D.43429_891 = smh_46->session;
  D.43750_892 = dtls_ok (D.43429_891);
  if (D.43750_892 != 0)
    goto <bb 307>;
  else
    goto <bb 316>;

<bb 307>:
  D.43429_893 = smh_46->session;
  D.43434_894 = D.43429_893->channel;
  D.43754_895 = switch_channel_direction (D.43434_894);
  if (D.43754_895 == 0)
    goto <bb 308>;
  else
    goto <bb 309>;

<bb 308>:
  iftmp.66_896 = 1;
  goto <bb 310>;

<bb 309>:
  iftmp.66_897 = 2;

<bb 310>:
  # iftmp.66_39 = PHI <iftmp.66_896(308), iftmp.66_897(309)>
  dtype_898 = iftmp.66_39;
  # DEBUG dtype => dtype_898
  xtype_899 = 4;
  # DEBUG xtype => xtype_899
  D.43717_900 = v_engine_49->rtcp_mux;
  if (D.43717_900 > 0)
    goto <bb 311>;
  else
    goto <bb 313>;

<bb 311>:
  D.43099_901 = smh_46->mparams;
  D.43760_902 = D.43099_901->rtcp_video_interval_msec;
  if (D.43760_902 != 0B)
    goto <bb 312>;
  else
    goto <bb 313>;

<bb 312>:
  xtype_903 = xtype_899 | 8;
  # DEBUG xtype => xtype_903

<bb 313>:
  # xtype_26 = PHI <xtype_899(310), xtype_899(311), xtype_903(312)>
  # DEBUG xtype => xtype_26
  D.43096_904 = v_engine_49->rtp_session;
  D.43763_905 = &v_engine_49->local_dtls_fingerprint;
  D.43764_906 = &v_engine_49->remote_dtls_fingerprint;
  D.43765_907 = dtype_898 | xtype_26;
  switch_rtp_add_dtls (D.43096_904, D.43763_905, D.43764_906, D.43765_907);
  D.43717_908 = v_engine_49->rtcp_mux;
  if (D.43717_908 <= 0)
    goto <bb 314>;
  else
    goto <bb 316>;

<bb 314>:
  D.43099_909 = smh_46->mparams;
  D.43760_910 = D.43099_909->rtcp_video_interval_msec;
  if (D.43760_910 != 0B)
    goto <bb 315>;
  else
    goto <bb 316>;

<bb 315>:
  xtype_911 = 8;
  # DEBUG xtype => xtype_911
  D.43096_912 = v_engine_49->rtp_session;
  D.43763_913 = &v_engine_49->local_dtls_fingerprint;
  D.43764_914 = &v_engine_49->remote_dtls_fingerprint;
  D.43765_915 = dtype_898 | xtype_911;
  switch_rtp_add_dtls (D.43096_912, D.43763_913, D.43764_914, D.43765_915);

<bb 316>:
  D.43073_916 = session_45(D)->channel;
  val_917 = switch_channel_get_variable_dup (D.43073_916, "rtp_manual_video_rtp_bugs", 1, -1);
  # DEBUG val => val_917
  if (val_917 != 0B)
    goto <bb 317>;
  else
    goto <bb 318>;

<bb 317>:
  D.43772_918 = &v_engine_49->rtp_bugs;
  switch_core_media_parse_rtp_bugs (D.43772_918, val_917);

<bb 318>:
  D.43096_919 = v_engine_49->rtp_session;
  D.43773_920 = v_engine_49->rtp_bugs;
  D.43099_921 = smh_46->mparams;
  D.43774_922 = D.43099_921->manual_video_rtp_bugs;
  D.43775_923 = D.43773_920 | D.43774_922;
  switch_rtp_intentional_bugs (D.43096_919, D.43775_923);
  D.43073_924 = session_45(D)->channel;
  D.43561_925 = v_engine_49->cur_payload_map;
  D.43594_926 = D.43561_925->agreed_pt;
  D.43595_927 = (int) D.43594_926;
  switch_channel_set_variable_printf (D.43073_924, "rtp_use_video_pt", "%d", D.43595_927);
  D.43096_928 = v_engine_49->rtp_session;
  D.43776_929 = switch_rtp_get_ssrc (D.43096_928);
  v_engine_49->ssrc = D.43776_929;
  D.43073_930 = session_45(D)->channel;
  D.43689_931 = v_engine_49->ssrc;
  switch_channel_set_variable_printf (D.43073_930, "rtp_use_video_ssrc", "%u", D.43689_931);
  switch_core_session_apply_crypto (session_45(D), 1);
  D.43073_932 = session_45(D)->channel;
  D.43777_933 = switch_channel_test_flag (D.43073_932, 74);
  if (D.43777_933 != 0)
    goto <bb 319>;
  else
    goto <bb 328> (video_up);

<bb 319>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5542, session_45(D), 7, "Activating video UDPTL mode\n");
  D.43096_934 = v_engine_49->rtp_session;
  switch_rtp_udptl_mode (D.43096_934);
  goto <bb 328> (video_up);

<bb 320>:
  err.45_935 = err;
  if (err.45_935 != 0B)
    goto <bb 321>;
  else
    goto <bb 322>;

<bb 321>:
  iftmp.67_936 = err;
  goto <bb 323>;

<bb 322>:
  iftmp.67_937 = "";

<bb 323>:
  # iftmp.67_40 = PHI <iftmp.67_936(321), iftmp.67_937(322)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5547, session_45(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", iftmp.67_40);
  D.43073_938 = session_45(D)->channel;
  switch_channel_perform_hangup (D.43073_938, "src/switch_core_media.c", &__func__, 5548, 27);
  goto <bb 331> (end);

<bb 324>:
  err.45_625 = err;
  if (err.45_625 != 0B)
    goto <bb 325>;
  else
    goto <bb 326>;

<bb 325>:
  iftmp.68_626 = err;
  goto <bb 327>;

<bb 326>:
  iftmp.68_627 = "";

<bb 327>:
  # iftmp.68_41 = PHI <iftmp.68_626(325), iftmp.68_627(326)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5554, session_45(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", iftmp.68_41);
  D.43073_628 = session_45(D)->channel;
  switch_channel_perform_hangup (D.43073_628, "src/switch_core_media.c", &__func__, 5555, 27);
  status_629 = 1;
  # DEBUG status => status_629
  goto <bb 331> (end);

video_up:
  D.43262_939 = session_45(D) != 0B;
  D.43790_940 = v_engine_49 != 0B;
  D.43791_941 = D.43262_939 && D.43790_940;
  if (D.43791_941 != 0)
    goto <bb 329>;
  else
    goto <bb 330>;

<bb 329>:
  check_dtls_reinvite (session_45(D), v_engine_49);

<bb 330>:
  status_942 = 0;
  # DEBUG status => status_942

  # status_5 = PHI <status_61(14), status_70(19), status_73(20), status_4(323), status_629(327), status_942(330)>
end:
  # DEBUG status => status_5
  D.43073_943 = session_45(D)->channel;
  switch_channel_clear_flag (D.43073_943, 103);
  switch_core_recovery_track (session_45(D));
  D.43070_944 = status_5;

<bb 332>:
  # D.43070_27 = PHI <D.43070_47(5), D.43070_945(8), D.43070_944(331)>
  return D.43070_27;

}



;; Function switch_core_media_check_dtmf_type (switch_core_media_check_dtmf_type)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.43050 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.43050, "dtmf_type", 1, -1);

Renaming statement if (val != 0B)



Renaming block #6

Renaming statement D.43053 = strcasecmp (val, "rfc2833");

Renaming statement if (D.43053 == 0)



Renaming block #7

Renaming statement D.43056 = smh->mparams;

Renaming statement D.43056->dtmf_type = 0;



Renaming block #8

Renaming statement D.43058 = strcasecmp (val, "info");

Renaming statement if (D.43058 == 0)



Renaming block #9

Renaming statement D.43056 = smh->mparams;

Renaming statement D.43056->dtmf_type = 1;



Renaming block #10

Renaming statement D.43062 = strcasecmp (val, "none");

Renaming statement if (D.43062 == 0)



Renaming block #11

Renaming statement D.43056 = smh->mparams;

Renaming statement D.43056->dtmf_type = 2;



Renaming block #12



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 5897, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.43050_3 = session_1(D)->channel;

Updating SSA information for statement val_4 = switch_channel_get_variable_dup (D.43050_3, "dtmf_type", 1, -1);



Registering new PHI nodes in block #6

Updating SSA information for statement D.43053_5 = strcasecmp (val_4, "rfc2833");



Registering new PHI nodes in block #7

Updating SSA information for statement D.43056_6 = smh_2->mparams;

Updating SSA information for statement D.43056_6->dtmf_type = 0;



Registering new PHI nodes in block #8

Updating SSA information for statement D.43058_7 = strcasecmp (val_4, "info");



Registering new PHI nodes in block #9

Updating SSA information for statement D.43056_8 = smh_2->mparams;

Updating SSA information for statement D.43056_8->dtmf_type = 1;



Registering new PHI nodes in block #10

Updating SSA information for statement D.43062_9 = strcasecmp (val_4, "none");



Registering new PHI nodes in block #11

Updating SSA information for statement D.43056_10 = smh_2->mparams;

Updating SSA information for statement D.43056_10->dtmf_type = 2;



Registering new PHI nodes in block #12



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 13
Number of blocks to update: 12 ( 92%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 


Scope blocks after cleanups:

{ Scope block #0 
  const char * val;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_check_dtmf_type";

}
switch_core_media_check_dtmf_type (struct switch_core_session_t * session)
{
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_check_dtmf_type";
  struct switch_media_handle_t * smh;
  const char * val;
  int D.43062;
  int D.43058;
  struct switch_core_media_params_t * D.43056;
  int D.43053;
  struct switch_channel_t * D.43050;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 5897, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 12>;
  else
    goto <bb 5>;

<bb 5>:
  D.43050_3 = session_1(D)->channel;
  val_4 = switch_channel_get_variable_dup (D.43050_3, "dtmf_type", 1, -1);
  # DEBUG val => val_4
  if (val_4 != 0B)
    goto <bb 6>;
  else
    goto <bb 12>;

<bb 6>:
  D.43053_5 = strcasecmp (val_4, "rfc2833");
  if (D.43053_5 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.43056_6 = smh_2->mparams;
  D.43056_6->dtmf_type = 0;
  goto <bb 12>;

<bb 8>:
  D.43058_7 = strcasecmp (val_4, "info");
  if (D.43058_7 == 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.43056_8 = smh_2->mparams;
  D.43056_8->dtmf_type = 1;
  goto <bb 12>;

<bb 10>:
  D.43062_9 = strcasecmp (val_4, "none");
  if (D.43062_9 == 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.43056_10 = smh_2->mparams;
  D.43056_10->dtmf_type = 2;

<bb 12>:
  return;

}



;; Function switch_core_media_sdp_map (switch_core_media_sdp_map)



Renaming block #0



Renaming block #2

Renaming statement parser = 0B;

Renaming statement D.43018 = strlen (r_sdp);

Renaming statement D.43019 = (int) D.43018;

Renaming statement parser = sdp_parse (0B, r_sdp, D.43019, 0);

Renaming statement if (parser == 0B)



Renaming block #3

Renaming statement D.43022 = 1;



Renaming block #4

Renaming statement sdp = sdp_session (parser);

Renaming statement if (sdp == 0B)



Renaming block #5

Renaming statement sdp_parser_free (parser);

Renaming statement D.43022 = 1;



Renaming block #6

Renaming statement switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 5930, fmtp, 62, 0B);

Renaming statement switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 5931, pt, 62, 0B);

Renaming statement m = sdp->sdp_media;



Renaming block #21

Renaming statement if (m != 0B)



Renaming block #7

Renaming statement D.43025 = m->m_proto;

Renaming statement if (D.43025 == 256)



Renaming block #8

Renaming statement map = m->m_rtpmaps;



Renaming block #19

Renaming statement if (map != 0B)



Renaming block #9

Renaming statement D.43028 = map->rm_encoding;

Renaming statement if (D.43028 != 0B)



Renaming block #10

Renaming statement br = 0B;

Renaming statement D.43031 = map->rm_fmtp;

Renaming statement if (D.43031 != 0B)



Renaming block #11

Renaming statement D.43031 = map->rm_fmtp;

Renaming statement br = strstr (D.43031, "bitrate=");

Renaming statement if (br != 0B)



Renaming block #12

Renaming statement br = br + 8;



Renaming block #13

Renaming statement D.43036 = map->rm_pt;

Renaming statement D.43037 = (int) D.43036;

Renaming statement switch_snprintf (&buf, 25, "%d", D.43037);

Renaming statement if (br != 0B)



Renaming block #14

Renaming statement D.43028 = map->rm_encoding;

Renaming statement switch_snprintf (&key, 128, "%s:%s", D.43028, br);



Renaming block #15

Renaming statement D.43028 = map->rm_encoding;

Renaming statement switch_snprintf (&key, 128, "%s", D.43028);



Renaming block #16

Renaming statement D.43041 = *pt;

Renaming statement switch_event_add_header_string (D.43041, 1, &key, &buf);

Renaming statement D.43031 = map->rm_fmtp;

Renaming statement if (D.43031 != 0B)



Renaming block #17

Renaming statement D.43044 = *fmtp;

Renaming statement D.43031 = map->rm_fmtp;

Renaming statement switch_event_add_header_string (D.43044, 1, &key, D.43031);



Renaming block #18

Renaming statement map = map->rm_next;



Renaming block #20

Renaming statement m = m->m_next;



Renaming block #22

Renaming statement sdp_parser_free (parser);

Renaming statement D.43022 = 0;



Renaming block #23

Renaming statement return D.43022;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.43018_7 = strlen (r_sdp_6(D));

Updating SSA information for statement parser_9 = sdp_parse (0B, r_sdp_6(D), D.43019_8, 0);



Registering new PHI nodes in block #3



Registering new PHI nodes in block #4

Updating SSA information for statement sdp_11 = sdp_session (parser_9);



Registering new PHI nodes in block #5

Updating SSA information for statement sdp_parser_free (parser_9);



Registering new PHI nodes in block #6

Updating SSA information for statement switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 5930, fmtp_13(D), 62, 0B);

Updating SSA information for statement switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 5931, pt_14(D), 62, 0B);

Updating SSA information for statement m_15 = sdp_11->sdp_media;



Registering new PHI nodes in block #21



Registering new PHI nodes in block #7

Updating SSA information for statement D.43025_16 = m_1->m_proto;



Registering new PHI nodes in block #8

Updating SSA information for statement map_17 = m_1->m_rtpmaps;



Registering new PHI nodes in block #19



Registering new PHI nodes in block #9

Updating SSA information for statement D.43028_18 = map_2->rm_encoding;



Registering new PHI nodes in block #10

Updating SSA information for statement buf = "";

Updating SSA information for statement key = "";

Updating SSA information for statement D.43031_20 = map_2->rm_fmtp;



Registering new PHI nodes in block #11

Updating SSA information for statement D.43031_21 = map_2->rm_fmtp;

Updating SSA information for statement br_22 = strstr (D.43031_21, "bitrate=");



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13

Updating SSA information for statement D.43036_24 = map_2->rm_pt;

Updating SSA information for statement switch_snprintf (&buf, 25, "%d", D.43037_25);



Registering new PHI nodes in block #14

Updating SSA information for statement D.43028_26 = map_2->rm_encoding;

Updating SSA information for statement switch_snprintf (&key, 128, "%s:%s", D.43028_26, br_3);



Registering new PHI nodes in block #15

Updating SSA information for statement D.43028_27 = map_2->rm_encoding;

Updating SSA information for statement switch_snprintf (&key, 128, "%s", D.43028_27);



Registering new PHI nodes in block #16

Updating SSA information for statement D.43041_28 = *pt_14(D);

Updating SSA information for statement switch_event_add_header_string (D.43041_28, 1, &key, &buf);

Updating SSA information for statement D.43031_29 = map_2->rm_fmtp;



Registering new PHI nodes in block #17

Updating SSA information for statement D.43044_30 = *fmtp_13(D);

Updating SSA information for statement D.43031_31 = map_2->rm_fmtp;

Updating SSA information for statement switch_event_add_header_string (D.43044_30, 1, &key, D.43031_31);



Registering new PHI nodes in block #18

Updating SSA information for statement map_32 = map_2->rm_next;



Registering new PHI nodes in block #20

Updating SSA information for statement m_33 = m_1->m_next;



Registering new PHI nodes in block #22

Updating SSA information for statement sdp_parser_free (parser_9);



Registering new PHI nodes in block #23



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 24
Number of blocks to update: 23 ( 96%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 


Scope blocks after cleanups:

{ Scope block #0 
  struct sdp_media_t * m;
  struct sdp_parser_t * parser;
  struct sdp_session_t * sdp;
  static const char __func__[26] = "switch_core_media_sdp_map";

  { Scope block #0 
    struct sdp_rtpmap_t * map;

    { Scope block #0 
      char buf[25];
      char key[128];
      char * br;

    }

  }

}
switch_core_media_sdp_map (const char * r_sdp, struct switch_event_t * * fmtp, struct switch_event_t * * pt)
{
  char * br;
  char key[128];
  char buf[25];
  struct sdp_rtpmap_t * map;
  static const char __func__[26] = "switch_core_media_sdp_map";
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  struct sdp_media_t * m;
  struct switch_event_t * D.43044;
  struct switch_event_t * D.43041;
  int D.43037;
  <unnamed-unsigned:7> D.43036;
  const char * D.43031;
  const char * D.43028;
  sdp_proto_e D.43025;
  switch_status_t D.43022;
  int D.43019;
  size_t D.43018;

<bb 2>:
  parser_5 = 0B;
  # DEBUG parser => parser_5
  D.43018_7 = strlen (r_sdp_6(D));
  D.43019_8 = (int) D.43018_7;
  parser_9 = sdp_parse (0B, r_sdp_6(D), D.43019_8, 0);
  # DEBUG parser => parser_9
  if (parser_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.43022_10 = 1;
  goto <bb 23>;

<bb 4>:
  sdp_11 = sdp_session (parser_9);
  # DEBUG sdp => sdp_11
  if (sdp_11 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  sdp_parser_free (parser_9);
  D.43022_12 = 1;
  goto <bb 23>;

<bb 6>:
  switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 5930, fmtp_13(D), 62, 0B);
  switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 5931, pt_14(D), 62, 0B);
  m_15 = sdp_11->sdp_media;
  # DEBUG m => m_15
  goto <bb 21>;

<bb 7>:
  D.43025_16 = m_1->m_proto;
  if (D.43025_16 == 256)
    goto <bb 8>;
  else
    goto <bb 20>;

<bb 8>:
  map_17 = m_1->m_rtpmaps;
  # DEBUG map => map_17
  goto <bb 19>;

<bb 9>:
  D.43028_18 = map_2->rm_encoding;
  if (D.43028_18 != 0B)
    goto <bb 10>;
  else
    goto <bb 18>;

<bb 10>:
  buf = "";
  key = "";
  br_19 = 0B;
  # DEBUG br => br_19
  D.43031_20 = map_2->rm_fmtp;
  if (D.43031_20 != 0B)
    goto <bb 11>;
  else
    goto <bb 13>;

<bb 11>:
  D.43031_21 = map_2->rm_fmtp;
  br_22 = strstr (D.43031_21, "bitrate=");
  # DEBUG br => br_22
  if (br_22 != 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  br_23 = br_22 + 8;
  # DEBUG br => br_23

<bb 13>:
  # br_3 = PHI <br_19(10), br_22(11), br_23(12)>
  # DEBUG br => br_3
  D.43036_24 = map_2->rm_pt;
  D.43037_25 = (int) D.43036_24;
  switch_snprintf (&buf, 25, "%d", D.43037_25);
  if (br_3 != 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.43028_26 = map_2->rm_encoding;
  switch_snprintf (&key, 128, "%s:%s", D.43028_26, br_3);
  goto <bb 16>;

<bb 15>:
  D.43028_27 = map_2->rm_encoding;
  switch_snprintf (&key, 128, "%s", D.43028_27);

<bb 16>:
  D.43041_28 = *pt_14(D);
  switch_event_add_header_string (D.43041_28, 1, &key, &buf);
  D.43031_29 = map_2->rm_fmtp;
  if (D.43031_29 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.43044_30 = *fmtp_13(D);
  D.43031_31 = map_2->rm_fmtp;
  switch_event_add_header_string (D.43044_30, 1, &key, D.43031_31);

<bb 18>:
  map_32 = map_2->rm_next;
  # DEBUG map => map_32

<bb 19>:
  # map_2 = PHI <map_17(8), map_32(18)>
  # DEBUG map => map_2
  if (map_2 != 0B)
    goto <bb 9>;
  else
    goto <bb 20>;

<bb 20>:
  m_33 = m_1->m_next;
  # DEBUG m => m_33

<bb 21>:
  # m_1 = PHI <m_15(6), m_33(20)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 7>;
  else
    goto <bb 22>;

<bb 22>:
  sdp_parser_free (parser_9);
  D.43022_34 = 0;

<bb 23>:
  # D.43022_4 = PHI <D.43022_10(3), D.43022_12(5), D.43022_34(22)>
  return D.43022_4;

}



;; Function switch_core_media_set_local_sdp (switch_core_media_set_local_sdp)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.43005 = smh->sdp_mutex;

Renaming statement if (D.43005 != 0B)



Renaming block #6

Renaming statement D.43005 = smh->sdp_mutex;

Renaming statement switch_mutex_lock (D.43005);



Renaming block #7

Renaming statement D.43008 = smh->mparams;

Renaming statement if (dup != 0)



Renaming block #8

Renaming statement iftmp.44 = switch_core_perform_session_strdup (session, sdp_str, "src/switch_core_media.c", &__func__, 5985);



Renaming block #9

Renaming statement iftmp.44 = sdp_str;



Renaming block #10

Renaming statement D.43008->local_sdp_str = iftmp.44;

Renaming statement D.43013 = session->channel;

Renaming statement D.43008 = smh->mparams;

Renaming statement D.43014 = D.43008->local_sdp_str;

Renaming statement switch_channel_set_variable_var_check (D.43013, "rtp_local_sdp_str", D.43014, 1);

Renaming statement D.43005 = smh->sdp_mutex;

Renaming statement if (D.43005 != 0B)



Renaming block #11

Renaming statement D.43005 = smh->sdp_mutex;

Renaming statement switch_mutex_unlock (D.43005);



Renaming block #12



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 5978, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.43005_4 = smh_3->sdp_mutex;



Registering new PHI nodes in block #6

Updating SSA information for statement D.43005_5 = smh_3->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.43005_5);



Registering new PHI nodes in block #7

Updating SSA information for statement D.43008_6 = smh_3->mparams;



Registering new PHI nodes in block #8

Updating SSA information for statement iftmp.44_9 = switch_core_perform_session_strdup (session_2(D), sdp_str_8(D), "src/switch_core_media.c", &__func__, 5985);



Registering new PHI nodes in block #9



Registering new PHI nodes in block #10

Updating SSA information for statement D.43008_6->local_sdp_str = iftmp.44_1;

Updating SSA information for statement D.43013_11 = session_2(D)->channel;

Updating SSA information for statement D.43008_12 = smh_3->mparams;

Updating SSA information for statement D.43014_13 = D.43008_12->local_sdp_str;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43013_11, "rtp_local_sdp_str", D.43014_13, 1);

Updating SSA information for statement D.43005_14 = smh_3->sdp_mutex;



Registering new PHI nodes in block #11

Updating SSA information for statement D.43005_15 = smh_3->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.43005_15);



Registering new PHI nodes in block #12



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 13
Number of blocks to update: 12 ( 92%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_set_local_sdp";
  static const char __func__[32] = "switch_core_media_set_local_sdp";

}
switch_core_media_set_local_sdp (struct switch_core_session_t * session, const char * sdp_str, switch_bool_t dup)
{
  static const char __func__[32] = "switch_core_media_set_local_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_set_local_sdp";
  struct switch_media_handle_t * smh;
  char * D.43014;
  struct switch_channel_t * D.43013;
  char * iftmp.44;
  struct switch_core_media_params_t * D.43008;
  struct switch_mutex_t * D.43005;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 5978, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 12>;
  else
    goto <bb 5>;

<bb 5>:
  D.43005_4 = smh_3->sdp_mutex;
  if (D.43005_4 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.43005_5 = smh_3->sdp_mutex;
  switch_mutex_lock (D.43005_5);

<bb 7>:
  D.43008_6 = smh_3->mparams;
  if (dup_7(D) != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  iftmp.44_9 = switch_core_perform_session_strdup (session_2(D), sdp_str_8(D), "src/switch_core_media.c", &__func__, 5985);
  goto <bb 10>;

<bb 9>:
  iftmp.44_10 = sdp_str_8(D);

<bb 10>:
  # iftmp.44_1 = PHI <iftmp.44_9(8), iftmp.44_10(9)>
  D.43008_6->local_sdp_str = iftmp.44_1;
  D.43013_11 = session_2(D)->channel;
  D.43008_12 = smh_3->mparams;
  D.43014_13 = D.43008_12->local_sdp_str;
  switch_channel_set_variable_var_check (D.43013_11, "rtp_local_sdp_str", D.43014_13, 1);
  D.43005_14 = smh_3->sdp_mutex;
  if (D.43005_14 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.43005_15 = smh_3->sdp_mutex;
  switch_mutex_unlock (D.43005_15);

<bb 12>:
  return;

}



;; Function switch_core_media_gen_local_sdp (switch_core_media_gen_local_sdp)



Renaming block #0



Renaming block #2

Renaming statement ptime = 0;

Renaming statement rate = 0;

Renaming statement use_cng = 1;

Renaming statement D.41512 = session->channel;

Renaming statement pass_fmtp = switch_channel_get_variable_dup (D.41512, "rtp_video_fmtp", 1, -1);

Renaming statement D.41512 = session->channel;

Renaming statement ov_fmtp = switch_channel_get_variable_dup (D.41512, "rtp_force_video_fmtp", 1, -1);

Renaming statement D.41512 = session->channel;

Renaming statement append_audio = switch_channel_get_variable_dup (D.41512, "rtp_append_audio_sdp", 1, -1);

Renaming statement D.41512 = session->channel;

Renaming statement append_video = switch_channel_get_variable_dup (D.41512, "rtp_append_video_sdp", 1, -1);

Renaming statement D.41512 = session->channel;

Renaming statement fmtp_out_var = switch_channel_get_variable_dup (D.41512, "rtp_force_audio_fmtp", 1, -1);

Renaming statement local_sdp_audio_zrtp_hash = switch_core_media_get_zrtp_hash (session, 0, 1);

Renaming statement local_sdp_video_zrtp_hash = switch_core_media_get_zrtp_hash (session, 1, 1);

Renaming statement vp8 = 0;

Renaming statement red = 0;

Renaming statement D.41512 = session->channel;

Renaming statement D.41513 = switch_channel_direction (D.41512);

Renaming statement is_outbound = D.41513 == 1;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement a_engine = &smh->engines;

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.41512 = session->channel;

Renaming statement D.41518 = switch_channel_get_variable_dup (D.41512, "rtcp_mux", 1, -1);

Renaming statement D.41519 = switch_true (D.41518);

Renaming statement if (D.41519 != 0)



Renaming block #6

Renaming statement a_engine->rtcp_mux = 1;

Renaming statement v_engine->rtcp_mux = 1;



Renaming block #7

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41523 = D.41522->rtcp_audio_interval_msec;

Renaming statement if (D.41523 == 0B)



Renaming block #8

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41512 = session->channel;

Renaming statement D.41526 = switch_channel_get_variable_dup (D.41512, "rtcp_audio_interval_msec", 1, -1);

Renaming statement D.41522->rtcp_audio_interval_msec = D.41526;



Renaming block #9

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41527 = D.41522->rtcp_video_interval_msec;

Renaming statement if (D.41527 == 0B)



Renaming block #10

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41512 = session->channel;

Renaming statement D.41530 = switch_channel_get_variable_dup (D.41512, "rtcp_video_interval_msec", 1, -1);

Renaming statement D.41522->rtcp_video_interval_msec = D.41530;



Renaming block #11

Renaming statement D.41531 = dtls_ok (session);

Renaming statement if (D.41531 != 0)



Renaming block #12

Renaming statement D.41534 = smh->session;

Renaming statement D.41535 = D.41534->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.41535, "webrtc_enable_dtls", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #13

Renaming statement D.41538 = switch_false (tmp);

Renaming statement if (D.41538 != 0)



Renaming block #14

Renaming statement D.41534 = smh->session;

Renaming statement D.41535 = D.41534->channel;

Renaming statement switch_channel_clear_flag (D.41535, 111);

Renaming statement D.41534 = smh->session;

Renaming statement D.41535 = D.41534->channel;

Renaming statement switch_channel_clear_flag (D.41535, 109);



Renaming block #15

Renaming statement if (is_outbound != 0)



Renaming block #16

Renaming statement D.41512 = session->channel;

Renaming statement D.41544 = switch_channel_test_flag (D.41512, 84);

Renaming statement if (D.41544 != 0)



Renaming block #17

Renaming statement D.41512 = session->channel;

Renaming statement D.41546 = switch_channel_test_flag (D.41512, 112);

Renaming statement if (D.41546 != 0)



Renaming block #18

Renaming statement D.41512 = session->channel;

Renaming statement D.41547 = switch_channel_test_flag (D.41512, 106);

Renaming statement if (D.41547 == 0)



Renaming block #19

Renaming statement D.41512 = session->channel;

Renaming statement D.41550 = switch_channel_get_variable_dup (D.41512, "media_webrtc", 1, -1);

Renaming statement D.41551 = switch_true (D.41550);

Renaming statement if (D.41551 != 0)



Renaming block #20

Renaming statement D.41512 = session->channel;

Renaming statement switch_channel_set_flag_value (D.41512, 106, 1);

Renaming statement D.41512 = session->channel;

Renaming statement switch_channel_set_flag_value (D.41512, 108, 1);

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41522->rtcp_audio_interval_msec = "5000";

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41522->rtcp_video_interval_msec = "5000";



Renaming block #21

Renaming statement D.41554 = switch_rtp_has_dtls ();

Renaming statement if (D.41554 != 0)



Renaming block #22

Renaming statement D.41557 = dtls_ok (session);

Renaming statement if (D.41557 != 0)



Renaming block #23

Renaming statement D.41512 = session->channel;

Renaming statement D.41562 = switch_channel_test_flag (D.41512, 106);

Renaming statement if (D.41562 != 0)



Renaming block #24

Renaming statement D.41534 = smh->session;

Renaming statement D.41535 = D.41534->channel;

Renaming statement D.41564 = switch_channel_get_variable_dup (D.41535, "rtp_use_dtls", 1, -1);

Renaming statement D.41565 = switch_true (D.41564);

Renaming statement if (D.41565 != 0)



Renaming block #25

Renaming statement D.41534 = smh->session;

Renaming statement D.41535 = D.41534->channel;

Renaming statement switch_channel_set_flag_value (D.41535, 109, 1);

Renaming statement D.41534 = smh->session;

Renaming statement D.41535 = D.41534->channel;

Renaming statement switch_channel_set_flag_value (D.41535, 92, 1);

Renaming statement generate_local_fingerprint (smh, 0);



Renaming block #26

Renaming statement switch_core_session_parse_crypto_prefs (session);

Renaming statement switch_core_session_check_outgoing_crypto (session);



Renaming block #27

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement fmtp_out = D.41566->fmtp_out;

Renaming statement D.41522 = smh->mparams;

Renaming statement username = D.41522->sdp_username;

Renaming statement buf = calloc (1, 65536);

Renaming statement if (buf == 0B)



Renaming block #28



Renaming block #29

Renaming statement switch_core_media_check_dtmf_type (session);

Renaming statement D.41572 = switch_media_handle_test_media_flag (smh, 9);

Renaming statement if (D.41572 != 0)



Renaming block #30

Renaming statement D.41512 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.41512, "supress_cng", 1, -1);

Renaming statement if (val != 0B)



Renaming block #31

Renaming statement D.41575 = switch_true (val);

Renaming statement if (D.41575 != 0)



Renaming block #32

Renaming statement D.41512 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.41512, "suppress_cng", 1, -1);

Renaming statement if (val != 0B)



Renaming block #33

Renaming statement D.41577 = switch_true (val);

Renaming statement if (D.41577 != 0)



Renaming block #34

Renaming statement use_cng = 0;

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41522->cng_pt = 0;



Renaming block #35

Renaming statement D.41578 = smh->payload_space;

Renaming statement if (D.41578 == 0)



Renaming block #36

Renaming statement D.41512 = session->channel;

Renaming statement D.41581 = switch_channel_test_flag (D.41512, 106);

Renaming statement if (D.41581 != 0)



Renaming block #37

Renaming statement smh->payload_space = 102;



Renaming block #38

Renaming statement smh->payload_space = 98;



Renaming block #39

Renaming statement i = 0;



Renaming block #41

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41587 = D.41522->num_codecs;

Renaming statement if (D.41587 > i)



Renaming block #40

Renaming statement D.41585 = smh->codecs[i];

Renaming statement D.41586 = D.41585->ianacode;

Renaming statement smh->ianacodes[i] = D.41586;

Renaming statement i = i + 1;



Renaming block #42

Renaming statement if (sdp_type == 0)



Renaming block #43

Renaming statement switch_core_session_perform_get_partner (session, &orig_session, "src/switch_core_media.c", &__func__, 6108);

Renaming statement i = 0;



Renaming block #59

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41587 = D.41522->num_codecs;

Renaming statement if (D.41587 > i)



Renaming block #44

Renaming statement imp = smh->codecs[i];

Renaming statement D.41590 = smh->ianacodes[i];

Renaming statement if (D.41590 > 64)



Renaming block #45

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41593 = D.41522->dtmf_type;

Renaming statement if (D.41593 == 0)



Renaming block #46

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41596 = D.41522->te;

Renaming statement if (D.41596 > 95)



Renaming block #47

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41596 = D.41522->te;

Renaming statement D.41599 = (int) D.41596;

Renaming statement D.41578 = smh->payload_space;

Renaming statement if (D.41599 == D.41578)



Renaming block #48

Renaming statement D.41578 = smh->payload_space;

Renaming statement D.41602 = D.41578 + 1;

Renaming statement smh->payload_space = D.41602;



Renaming block #49

Renaming statement D.41603 = switch_media_handle_test_media_flag (smh, 9);

Renaming statement if (D.41603 == 0)



Renaming block #50

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41606 = D.41522->cng_pt;

Renaming statement D.41607 = D.41606 != 0;

Renaming statement D.41608 = use_cng != 0;

Renaming statement D.41609 = D.41607 && D.41608;

Renaming statement if (D.41609 != 0)



Renaming block #51

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41606 = D.41522->cng_pt;

Renaming statement D.41612 = (int) D.41606;

Renaming statement D.41578 = smh->payload_space;

Renaming statement if (D.41612 == D.41578)



Renaming block #52

Renaming statement D.41578 = smh->payload_space;

Renaming statement D.41602 = D.41578 + 1;

Renaming statement smh->payload_space = D.41602;



Renaming block #53

Renaming statement orig_session.25 = orig_session;

Renaming statement if (orig_session.25 != 0B)



Renaming block #54

Renaming statement orig_session.25 = orig_session;

Renaming statement D.41619 = imp->codec_type;

Renaming statement D.41620 = D.41619 != 0;

Renaming statement D.41621 = imp->iananame;

Renaming statement D.41622 = switch_core_session_get_payload_code (orig_session.25, D.41620, D.41621, &orig_pt, 0B, &orig_fmtp);

Renaming statement if (D.41622 == 0)



Renaming block #55

Renaming statement orig_pt.26 = orig_pt;

Renaming statement smh->ianacodes[i] = orig_pt.26;

Renaming statement orig_fmtp.27 = orig_fmtp;

Renaming statement if (orig_fmtp.27 != 0B)



Renaming block #56

Renaming statement orig_fmtp.27 = orig_fmtp;

Renaming statement D.41628 = switch_core_perform_session_strdup (session, orig_fmtp.27, "src/switch_core_media.c", &__func__, 6133);

Renaming statement smh->fmtps[i] = D.41628;



Renaming block #57

Renaming statement D.41578 = smh->payload_space;

Renaming statement D.41629 = (unsigned char) D.41578;

Renaming statement smh->ianacodes[i] = D.41629;

Renaming statement D.41602 = D.41578 + 1;

Renaming statement smh->payload_space = D.41602;



Renaming block #58

Renaming statement D.41619 = imp->codec_type;

Renaming statement D.41620 = D.41619 != 0;

Renaming statement D.41621 = imp->iananame;

Renaming statement D.41590 = smh->ianacodes[i];

Renaming statement D.41630 = (uint32_t) D.41590;

Renaming statement D.41631 = imp->samples_per_second;

Renaming statement D.41632 = imp->microseconds_per_packet;

Renaming statement D.41633 = D.41632 / 1000;

Renaming statement D.41634 = (uint32_t) D.41633;

Renaming statement switch_core_media_add_payload_map (session, D.41620, D.41621, 0B, sdp_type, D.41630, D.41631, D.41634, 0);

Renaming statement i = i + 1;



Renaming block #60

Renaming statement orig_session.25 = orig_session;

Renaming statement if (orig_session.25 != 0B)



Renaming block #61

Renaming statement orig_session.25 = orig_session;

Renaming statement switch_core_session_rwunlock (orig_session.25);



Renaming block #62

Renaming statement if (fmtp_out_var != 0B)



Renaming block #63

Renaming statement fmtp_out = fmtp_out_var;



Renaming block #64

Renaming statement D.41512 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.41512, "verbose_sdp", 1, -1);

Renaming statement if (val == 0B)



Renaming block #65

Renaming statement D.41642 = switch_true (val);

Renaming statement if (D.41642 != 0)



Renaming block #66

Renaming statement D.41512 = session->channel;

Renaming statement switch_channel_set_flag_value (D.41512, 110, 1);



Renaming block #67

Renaming statement D.41645 = force == 0;

Renaming statement D.41646 = ip == 0B;

Renaming statement D.41647 = D.41645 && D.41646;

Renaming statement if (D.41647 != 0)



Renaming block #68

Renaming statement D.41650 = _zstr (sr);

Renaming statement if (D.41650 != 0)



Renaming block #69

Renaming statement D.41512 = session->channel;

Renaming statement D.41653 = switch_channel_test_flag (D.41512, 15);

Renaming statement if (D.41653 != 0)



Renaming block #70

Renaming statement D.41512 = session->channel;

Renaming statement D.41655 = switch_channel_test_flag (D.41512, 29);

Renaming statement if (D.41655 != 0)



Renaming block #71

Renaming statement if (buf != 0B)



Renaming block #72

Renaming statement free (buf);

Renaming statement buf = 0B;



Renaming block #73

Renaming statement if (ip == 0B)



Renaming block #74

Renaming statement ip = a_engine->adv_sdp_ip;

Renaming statement if (ip == 0B)



Renaming block #75

Renaming statement ip = a_engine->proxy_sdp_ip;



Renaming block #76

Renaming statement if (ip == 0B)



Renaming block #77

Renaming statement D.41512 = session->channel;

Renaming statement D.41664 = switch_channel_get_name (D.41512);

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 6182, 0B, 2, "%s NO IP!\n", D.41664);

Renaming statement if (buf != 0B)



Renaming block #78

Renaming statement free (buf);

Renaming statement buf = 0B;



Renaming block #79

Renaming statement if (port == 0)



Renaming block #80

Renaming statement port = a_engine->adv_sdp_port;

Renaming statement if (port == 0)



Renaming block #81

Renaming statement port = a_engine->proxy_sdp_port;



Renaming block #82

Renaming statement if (port == 0)



Renaming block #83

Renaming statement D.41512 = session->channel;

Renaming statement D.41673 = switch_channel_get_name (D.41512);

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 6194, 0B, 2, "%s NO PORT!\n", D.41673);

Renaming statement if (buf != 0B)



Renaming block #84

Renaming statement free (buf);

Renaming statement buf = 0B;



Renaming block #85

Renaming statement D.41676 = _zstr (sr);

Renaming statement if (D.41676 != 0)



Renaming block #86

Renaming statement D.41512 = session->channel;

Renaming statement var_val = switch_channel_get_variable_dup (D.41512, "media_audio_mode", 1, -1);

Renaming statement if (var_val != 0B)



Renaming block #87

Renaming statement sr = var_val;



Renaming block #88

Renaming statement sr = "sendrecv";



Renaming block #89

Renaming statement D.41682 = smh->owner_id;

Renaming statement if (D.41682 == 0)



Renaming block #90

Renaming statement D.41685 = switch_epoch_time_now (0B);

Renaming statement D.41686 = (unsigned int) D.41685;

Renaming statement D.41687 = (unsigned int) port;

Renaming statement D.41688 = D.41686 - D.41687;

Renaming statement smh->owner_id = D.41688;



Renaming block #91

Renaming statement D.41689 = smh->session_id;

Renaming statement if (D.41689 == 0)



Renaming block #92

Renaming statement D.41682 = smh->owner_id;

Renaming statement smh->session_id = D.41682;



Renaming block #93

Renaming statement D.41512 = session->channel;

Renaming statement D.41692 = switch_channel_get_variable_dup (D.41512, "drop_dtmf", 0, -1);

Renaming statement D.41693 = switch_true (D.41692);

Renaming statement if (D.41693 != 0)



Renaming block #94

Renaming statement D.41512 = session->channel;

Renaming statement switch_channel_set_flag_value (D.41512, 102, 1);



Renaming block #95

Renaming statement D.41689 = smh->session_id;

Renaming statement D.41696 = D.41689 + 1;

Renaming statement smh->session_id = D.41696;

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41699 = D.41522->ndlb;

Renaming statement D.41700 = D.41699 & 16;

Renaming statement if (D.41700 != 0)



Renaming block #96

Renaming statement D.41512 = session->channel;

Renaming statement var_val = switch_channel_get_variable_dup (D.41512, "ndlb_sendrecv_in_session", 1, -1);

Renaming statement if (var_val != 0B)



Renaming block #97

Renaming statement D.41703 = switch_true (var_val);

Renaming statement if (D.41703 != 0)



Renaming block #98

Renaming statement D.41704 = _zstr (sr);

Renaming statement if (D.41704 == 0)



Renaming block #99

Renaming statement switch_snprintf (&srbuf, 128, "a=%s\n", sr);



Renaming block #100

Renaming statement sr = 0B;



Renaming block #101

Renaming statement D.41708 = __builtin_strchr (ip, 58);

Renaming statement if (D.41708 != 0B)



Renaming block #102

Renaming statement iftmp.28 = "IP6";



Renaming block #103

Renaming statement iftmp.28 = "IP4";



Renaming block #104

Renaming statement family = iftmp.28;

Renaming statement D.41682 = smh->owner_id;

Renaming statement D.41689 = smh->session_id;

Renaming statement switch_snprintf (buf, 65536, "v=0\no=%s %010u %010u IN %s %s\ns=%s\nc=IN %s %s\nt=0 0\n%s", username, D.41682, D.41689, family, ip, username, family, ip, &srbuf);

Renaming statement D.41534 = smh->session;

Renaming statement D.41535 = D.41534->channel;

Renaming statement D.41712 = switch_channel_test_flag (D.41535, 108);

Renaming statement if (D.41712 != 0)



Renaming block #105

Renaming statement gen_ice (session, 0, ip, port);

Renaming statement D.41715 = strlen (buf);

Renaming statement D.41716 = buf + D.41715;

Renaming statement D.41717 = strlen (buf);

Renaming statement D.41718 = 65536 - D.41717;

Renaming statement D.41719 = smh->msid;

Renaming statement switch_snprintf (D.41716, D.41718, "a=msid-semantic: WMS %s\n", D.41719);



Renaming block #106

Renaming statement D.41720 = a_engine->codec_negotiated;

Renaming statement if (D.41720 != 0)



Renaming block #107

Renaming statement D.41723 = strlen (buf);

Renaming statement D.41724 = buf + D.41723;

Renaming statement D.41725 = strlen (buf);

Renaming statement D.41726 = 65536 - D.41725;

Renaming statement D.41727 = (int) port;

Renaming statement D.41732 = a_engine->no_crypto;

Renaming statement if (D.41732 == 0)



Renaming block #108

Renaming statement D.41512 = session->channel;

Renaming statement D.41734 = switch_channel_test_flag (D.41512, 109);

Renaming statement if (D.41734 != 0)



Renaming block #109

Renaming statement D.41736 = a_engine->crypto_type;

Renaming statement if (D.41736 != 9)



Renaming block #110

Renaming statement iftmp.29 = 1;



Renaming block #111

Renaming statement iftmp.29 = 0;



Renaming block #112

Renaming statement D.41737 = get_media_profile_name (session, iftmp.29);

Renaming statement switch_snprintf (D.41724, D.41726, "m=audio %d %s", D.41727, D.41737);

Renaming statement D.41738 = strlen (buf);

Renaming statement D.41739 = buf + D.41738;

Renaming statement D.41740 = strlen (buf);

Renaming statement D.41741 = 65536 - D.41740;

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41742 = D.41566->pt;

Renaming statement D.41743 = (int) D.41742;

Renaming statement switch_snprintf (D.41739, D.41741, " %d", D.41743);

Renaming statement D.41744 = switch_media_handle_test_media_flag (smh, 15);

Renaming statement if (D.41744 != 0)



Renaming block #113

Renaming statement D.41747 = smh->sdp_mutex;

Renaming statement switch_mutex_lock (D.41747);

Renaming statement pmap = a_engine->cur_payload_map;



Renaming block #117

Renaming statement if (pmap != 0B)



Renaming block #118

Renaming statement D.41757 = pmap->allocated;

Renaming statement if (D.41757 != 0)



Renaming block #114

Renaming statement D.41748 = pmap->pt;

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41742 = D.41566->pt;

Renaming statement if (D.41748 != D.41742)



Renaming block #115

Renaming statement D.41751 = strlen (buf);

Renaming statement D.41752 = buf + D.41751;

Renaming statement D.41753 = strlen (buf);

Renaming statement D.41754 = 65536 - D.41753;

Renaming statement D.41748 = pmap->pt;

Renaming statement D.41755 = (int) D.41748;

Renaming statement switch_snprintf (D.41752, D.41754, " %d", D.41755);



Renaming block #116

Renaming statement pmap = pmap->next;



Renaming block #119

Renaming statement D.41747 = smh->sdp_mutex;

Renaming statement switch_mutex_unlock (D.41747);



Renaming block #120

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41593 = D.41522->dtmf_type;

Renaming statement if (D.41593 == 0)



Renaming block #121

Renaming statement D.41761 = switch_media_handle_test_media_flag (smh, 8);

Renaming statement if (D.41761 != 0)



Renaming block #122

Renaming statement D.41512 = session->channel;

Renaming statement D.41763 = switch_channel_test_flag (D.41512, 93);

Renaming statement if (D.41763 != 0)



Renaming block #123

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41596 = D.41522->te;

Renaming statement if (D.41596 > 95)



Renaming block #124

Renaming statement D.41766 = strlen (buf);

Renaming statement D.41767 = buf + D.41766;

Renaming statement D.41768 = strlen (buf);

Renaming statement D.41769 = 65536 - D.41768;

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41596 = D.41522->te;

Renaming statement D.41599 = (int) D.41596;

Renaming statement switch_snprintf (D.41767, D.41769, " %d", D.41599);



Renaming block #125

Renaming statement D.41770 = switch_media_handle_test_media_flag (smh, 9);

Renaming statement if (D.41770 == 0)



Renaming block #126

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41606 = D.41522->cng_pt;

Renaming statement D.41607 = D.41606 != 0;

Renaming statement D.41608 = use_cng != 0;

Renaming statement D.41609 = D.41607 && D.41608;

Renaming statement if (D.41609 != 0)



Renaming block #127

Renaming statement D.41775 = strlen (buf);

Renaming statement D.41776 = buf + D.41775;

Renaming statement D.41777 = strlen (buf);

Renaming statement D.41778 = 65536 - D.41777;

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41606 = D.41522->cng_pt;

Renaming statement D.41612 = (int) D.41606;

Renaming statement switch_snprintf (D.41776, D.41778, " %d", D.41612);



Renaming block #128

Renaming statement D.41779 = strlen (buf);

Renaming statement D.41780 = buf + D.41779;

Renaming statement D.41781 = strlen (buf);

Renaming statement D.41782 = 65536 - D.41781;

Renaming statement switch_snprintf (D.41780, D.41782, "\n");

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement rate = D.41566->adv_rm_rate;

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41783 = D.41566->adv_channels;

Renaming statement if (D.41783 == 0)



Renaming block #129

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41786 = D.41566->rm_encoding;

Renaming statement D.41787 = get_channels (D.41786, 1);

Renaming statement D.41566->adv_channels = D.41787;



Renaming block #130

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41783 = D.41566->adv_channels;

Renaming statement if (D.41783 > 1)



Renaming block #131

Renaming statement D.41790 = strlen (buf);

Renaming statement D.41791 = buf + D.41790;

Renaming statement D.41792 = strlen (buf);

Renaming statement D.41793 = 65536 - D.41792;

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41794 = D.41566->agreed_pt;

Renaming statement D.41795 = (int) D.41794;

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41786 = D.41566->rm_encoding;

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41783 = D.41566->adv_channels;

Renaming statement switch_snprintf (D.41791, D.41793, "a=rtpmap:%d %s/%d/%d\n", D.41795, D.41786, rate, D.41783);



Renaming block #132

Renaming statement D.41797 = strlen (buf);

Renaming statement D.41798 = buf + D.41797;

Renaming statement D.41799 = strlen (buf);

Renaming statement D.41800 = 65536 - D.41799;

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41794 = D.41566->agreed_pt;

Renaming statement D.41795 = (int) D.41794;

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41786 = D.41566->rm_encoding;

Renaming statement switch_snprintf (D.41798, D.41800, "a=rtpmap:%d %s/%d\n", D.41795, D.41786, rate);



Renaming block #133

Renaming statement if (fmtp_out != 0B)



Renaming block #134

Renaming statement D.41803 = strlen (buf);

Renaming statement D.41804 = buf + D.41803;

Renaming statement D.41805 = strlen (buf);

Renaming statement D.41806 = 65536 - D.41805;

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41794 = D.41566->agreed_pt;

Renaming statement D.41795 = (int) D.41794;

Renaming statement switch_snprintf (D.41804, D.41806, "a=fmtp:%d %s\n", D.41795, fmtp_out);



Renaming block #135

Renaming statement D.41807 = switch_media_handle_test_media_flag (smh, 15);

Renaming statement if (D.41807 != 0)



Renaming block #136

Renaming statement D.41747 = smh->sdp_mutex;

Renaming statement switch_mutex_lock (D.41747);

Renaming statement pmap = a_engine->cur_payload_map;



Renaming block #140

Renaming statement if (pmap != 0B)



Renaming block #141

Renaming statement D.41757 = pmap->allocated;

Renaming statement if (D.41757 != 0)



Renaming block #137

Renaming statement D.41748 = pmap->pt;

Renaming statement D.41566 = a_engine->cur_payload_map;

Renaming statement D.41742 = D.41566->pt;

Renaming statement if (D.41748 != D.41742)



Renaming block #138

Renaming statement D.41812 = strlen (buf);

Renaming statement D.41813 = buf + D.41812;

Renaming statement D.41814 = strlen (buf);

Renaming statement D.41815 = 65536 - D.41814;

Renaming statement D.41748 = pmap->pt;

Renaming statement D.41755 = (int) D.41748;

Renaming statement D.41816 = pmap->iananame;

Renaming statement D.41817 = pmap->rate;

Renaming statement switch_snprintf (D.41813, D.41815, "a=rtpmap:%d %s/%ld\n", D.41755, D.41816, D.41817);



Renaming block #139

Renaming statement pmap = pmap->next;



Renaming block #142

Renaming statement D.41747 = smh->sdp_mutex;

Renaming statement switch_mutex_unlock (D.41747);



Renaming block #143

Renaming statement D.41819 = a_engine->read_codec.implementation;

Renaming statement D.41820 = D.41819 != 0B;

Renaming statement D.41821 = ptime == 0;

Renaming statement D.41822 = D.41820 && D.41821;

Renaming statement if (D.41822 != 0)



Renaming block #144

Renaming statement D.41819 = a_engine->read_codec.implementation;

Renaming statement D.41825 = D.41819->microseconds_per_packet;

Renaming statement ptime = D.41825 / 1000;



Renaming block #145

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41593 = D.41522->dtmf_type;

Renaming statement if (D.41593 == 0)



Renaming block #146

Renaming statement D.41829 = switch_media_handle_test_media_flag (smh, 8);

Renaming statement if (D.41829 != 0)



Renaming block #147

Renaming statement D.41512 = session->channel;

Renaming statement D.41831 = switch_channel_test_flag (D.41512, 93);

Renaming statement if (D.41831 != 0)



Renaming block #148

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41596 = D.41522->te;

Renaming statement if (D.41596 > 95)



Renaming block #149

Renaming statement D.41512 = session->channel;

Renaming statement D.41834 = switch_channel_test_flag (D.41512, 106);

Renaming statement if (D.41834 != 0)



Renaming block #150

Renaming statement D.41837 = strlen (buf);

Renaming statement D.41838 = buf + D.41837;

Renaming statement D.41839 = strlen (buf);

Renaming statement D.41840 = 65536 - D.41839;

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41596 = D.41522->te;

Renaming statement D.41599 = (int) D.41596;

Renaming statement switch_snprintf (D.41838, D.41840, "a=rtpmap:%d telephone-event/8000\n", D.41599);



Renaming block #151

Renaming statement D.41842 = strlen (buf);

Renaming statement D.41843 = buf + D.41842;

Renaming statement D.41844 = strlen (buf);

Renaming statement D.41845 = 65536 - D.41844;

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41596 = D.41522->te;

Renaming statement D.41599 = (int) D.41596;

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41596 = D.41522->te;

Renaming statement D.41599 = (int) D.41596;

Renaming statement switch_snprintf (D.41843, D.41845, "a=rtpmap:%d telephone-event/8000\na=fmtp:%d 0-16\n", D.41599, D.41599);



Renaming block #152

Renaming statement D.41846 = switch_media_handle_test_media_flag (smh, 9);

Renaming statement if (D.41846 != 0)



Renaming block #153

Renaming statement D.41849 = strlen (buf);

Renaming statement D.41850 = buf + D.41849;

Renaming statement D.41851 = strlen (buf);

Renaming statement D.41852 = 65536 - D.41851;

Renaming statement switch_snprintf (D.41850, D.41852, "a=silenceSupp:off - - - -\n");



Renaming block #154

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41606 = D.41522->cng_pt;

Renaming statement D.41607 = D.41606 != 0;

Renaming statement D.41608 = use_cng != 0;

Renaming statement D.41609 = D.41607 && D.41608;

Renaming statement if (D.41609 != 0)



Renaming block #155

Renaming statement D.41856 = strlen (buf);

Renaming statement D.41857 = buf + D.41856;

Renaming statement D.41858 = strlen (buf);

Renaming statement D.41859 = 65536 - D.41858;

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41606 = D.41522->cng_pt;

Renaming statement D.41612 = (int) D.41606;

Renaming statement switch_snprintf (D.41857, D.41859, "a=rtpmap:%d CN/8000\n", D.41612);

Renaming statement D.41720 = a_engine->codec_negotiated;

Renaming statement if (D.41720 == 0)



Renaming block #156

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41522->cng_pt = 0;



Renaming block #157

Renaming statement if (append_audio != 0B)



Renaming block #158

Renaming statement D.41864 = strlen (buf);

Renaming statement D.41865 = buf + D.41864;

Renaming statement D.41866 = strlen (buf);

Renaming statement D.41867 = 65536 - D.41866;

Renaming statement D.41870 = *append_audio;

Renaming statement if (D.41870 != 0)



Renaming block #159

Renaming statement D.41873 = strlen (append_audio);

Renaming statement D.41874 = D.41873 + -1;

Renaming statement iftmp.31 = append_audio + D.41874;



Renaming block #160

Renaming statement iftmp.31 = append_audio;



Renaming block #161

Renaming statement D.41876 = *iftmp.31;

Renaming statement if (D.41876 == 10)



Renaming block #162

Renaming statement iftmp.30 = "";



Renaming block #163

Renaming statement iftmp.30 = "\n";



Renaming block #164

Renaming statement switch_snprintf (D.41865, D.41867, "%s%s", append_audio, iftmp.30);



Renaming block #165

Renaming statement if (ptime != 0)



Renaming block #166

Renaming statement D.41882 = strlen (buf);

Renaming statement D.41883 = buf + D.41882;

Renaming statement D.41884 = strlen (buf);

Renaming statement D.41885 = 65536 - D.41884;

Renaming statement switch_snprintf (D.41883, D.41885, "a=ptime:%d\n", ptime);



Renaming block #167

Renaming statement if (local_sdp_audio_zrtp_hash != 0B)



Renaming block #168

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 6350, session, 7, "Adding audio a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash);

Renaming statement D.41888 = strlen (buf);

Renaming statement D.41889 = buf + D.41888;

Renaming statement D.41890 = strlen (buf);

Renaming statement D.41891 = 65536 - D.41890;

Renaming statement switch_snprintf (D.41889, D.41891, "a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash);



Renaming block #169

Renaming statement D.41892 = _zstr (sr);

Renaming statement if (D.41892 == 0)



Renaming block #170

Renaming statement D.41895 = strlen (buf);

Renaming statement D.41896 = buf + D.41895;

Renaming statement D.41897 = strlen (buf);

Renaming statement D.41898 = 65536 - D.41897;

Renaming statement switch_snprintf (D.41896, D.41898, "a=%s\n", sr);



Renaming block #171

Renaming statement D.41899 = a_engine->local_dtls_fingerprint.type;

Renaming statement D.41900 = _zstr (D.41899);

Renaming statement if (D.41900 == 0)



Renaming block #172

Renaming statement D.41903 = strlen (buf);

Renaming statement D.41904 = buf + D.41903;

Renaming statement D.41905 = strlen (buf);

Renaming statement D.41906 = 65536 - D.41905;

Renaming statement D.41899 = a_engine->local_dtls_fingerprint.type;

Renaming statement D.41907 = &a_engine->local_dtls_fingerprint.str;

Renaming statement switch_snprintf (D.41904, D.41906, "a=fingerprint:%s %s\n", D.41899, D.41907);



Renaming block #173

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41523 = D.41522->rtcp_audio_interval_msec;

Renaming statement if (D.41523 != 0B)



Renaming block #174

Renaming statement D.41910 = a_engine->rtcp_mux;

Renaming statement if (D.41910 > 0)



Renaming block #175

Renaming statement D.41913 = strlen (buf);

Renaming statement D.41914 = buf + D.41913;

Renaming statement D.41915 = strlen (buf);

Renaming statement D.41916 = 65536 - D.41915;

Renaming statement switch_snprintf (D.41914, D.41916, "a=rtcp-mux\n");

Renaming statement D.41917 = strlen (buf);

Renaming statement D.41918 = buf + D.41917;

Renaming statement D.41919 = strlen (buf);

Renaming statement D.41920 = 65536 - D.41919;

Renaming statement D.41727 = (int) port;

Renaming statement switch_snprintf (D.41918, D.41920, "a=rtcp:%d IN %s %s\n", D.41727, family, ip);



Renaming block #176

Renaming statement D.41922 = strlen (buf);

Renaming statement D.41923 = buf + D.41922;

Renaming statement D.41924 = strlen (buf);

Renaming statement D.41925 = 65536 - D.41924;

Renaming statement D.41727 = (int) port;

Renaming statement D.41926 = D.41727 + 1;

Renaming statement switch_snprintf (D.41923, D.41925, "a=rtcp:%d IN %s %s\n", D.41926, family, ip);



Renaming block #177

Renaming statement D.41927 = a_engine->ice_out.cands[0][0].ready;

Renaming statement if (D.41927 != 0)



Renaming block #178

Renaming statement c1 = 659136;

Renaming statement c2 = 659134;

Renaming statement c3 = 659126;

Renaming statement c4 = 659124;

Renaming statement ice_out = &a_engine->ice_out;

Renaming statement D.41930 = strlen (buf);

Renaming statement D.41931 = buf + D.41930;

Renaming statement D.41932 = strlen (buf);

Renaming statement D.41933 = 65536 - D.41932;

Renaming statement D.41934 = a_engine->ssrc;

Renaming statement D.41935 = smh->cname;

Renaming statement switch_snprintf (D.41931, D.41933, "a=ssrc:%u cname:%s\n", D.41934, D.41935);

Renaming statement D.41936 = strlen (buf);

Renaming statement D.41937 = buf + D.41936;

Renaming statement D.41938 = strlen (buf);

Renaming statement D.41939 = 65536 - D.41938;

Renaming statement D.41934 = a_engine->ssrc;

Renaming statement D.41719 = smh->msid;

Renaming statement switch_snprintf (D.41937, D.41939, "a=ssrc:%u msid:%s a0\n", D.41934, D.41719);

Renaming statement D.41940 = strlen (buf);

Renaming statement D.41941 = buf + D.41940;

Renaming statement D.41942 = strlen (buf);

Renaming statement D.41943 = 65536 - D.41942;

Renaming statement D.41934 = a_engine->ssrc;

Renaming statement D.41719 = smh->msid;

Renaming statement switch_snprintf (D.41941, D.41943, "a=ssrc:%u mslabel:%s\n", D.41934, D.41719);

Renaming statement D.41944 = strlen (buf);

Renaming statement D.41945 = buf + D.41944;

Renaming statement D.41946 = strlen (buf);

Renaming statement D.41947 = 65536 - D.41946;

Renaming statement D.41934 = a_engine->ssrc;

Renaming statement D.41719 = smh->msid;

Renaming statement switch_snprintf (D.41945, D.41947, "a=ssrc:%u label:%sa0\n", D.41934, D.41719);

Renaming statement D.41948 = strlen (buf);

Renaming statement D.41949 = buf + D.41948;

Renaming statement D.41950 = strlen (buf);

Renaming statement D.41951 = 65536 - D.41950;

Renaming statement D.41952 = ice_out->ufrag;

Renaming statement switch_snprintf (D.41949, D.41951, "a=ice-ufrag:%s\n", D.41952);

Renaming statement D.41953 = strlen (buf);

Renaming statement D.41954 = buf + D.41953;

Renaming statement D.41955 = strlen (buf);

Renaming statement D.41956 = 65536 - D.41955;

Renaming statement D.41957 = ice_out->pwd;

Renaming statement switch_snprintf (D.41954, D.41956, "a=ice-pwd:%s\n", D.41957);

Renaming statement D.41958 = strlen (buf);

Renaming statement D.41959 = buf + D.41958;

Renaming statement D.41960 = strlen (buf);

Renaming statement D.41961 = 65536 - D.41960;

Renaming statement D.41962 = ice_out->cands[0][0].transport;

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.41964 = ice_out->cands[0][0].con_port;

Renaming statement D.41965 = (int) D.41964;

Renaming statement switch_snprintf (D.41959, D.41961, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.41962, c1, D.41963, D.41965);

Renaming statement D.41966 = a_engine->local_sdp_ip;

Renaming statement D.41967 = _zstr (D.41966);

Renaming statement if (D.41967 == 0)



Renaming block #179

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.41970 = _zstr (D.41963);

Renaming statement if (D.41970 == 0)



Renaming block #180

Renaming statement D.41966 = a_engine->local_sdp_ip;

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.39598 = __builtin_strcmp (D.41966, D.41963);

Renaming statement if (D.39598 != 0)



Renaming block #181

Renaming statement D.41975 = a_engine->local_sdp_port;

Renaming statement D.41964 = ice_out->cands[0][0].con_port;

Renaming statement if (D.41975 != D.41964)



Renaming block #182

Renaming statement D.41978 = strlen (buf);

Renaming statement D.41979 = buf + D.41978;

Renaming statement D.41980 = strlen (buf);

Renaming statement D.41981 = 65536 - D.41980;

Renaming statement D.41962 = ice_out->cands[0][0].transport;

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.41964 = ice_out->cands[0][0].con_port;

Renaming statement D.41965 = (int) D.41964;

Renaming statement D.41966 = a_engine->local_sdp_ip;

Renaming statement D.41975 = a_engine->local_sdp_port;

Renaming statement D.41982 = (int) D.41975;

Renaming statement switch_snprintf (D.41979, D.41981, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962, c3, D.41963, D.41965, D.41966, D.41982);



Renaming block #183

Renaming statement D.41910 = a_engine->rtcp_mux;

Renaming statement D.41985 = D.41910 <= 0;

Renaming statement D.41986 = is_outbound != 0;

Renaming statement D.41987 = D.41985 || D.41986;

Renaming statement if (D.41987 != 0)



Renaming block #184

Renaming statement D.41512 = session->channel;

Renaming statement D.41989 = switch_channel_test_flag (D.41512, 84);

Renaming statement if (D.41989 != 0)



Renaming block #185

Renaming statement D.41990 = strlen (buf);

Renaming statement D.41991 = buf + D.41990;

Renaming statement D.41992 = strlen (buf);

Renaming statement D.41993 = 65536 - D.41992;

Renaming statement D.41962 = ice_out->cands[0][0].transport;

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.41964 = ice_out->cands[0][0].con_port;

Renaming statement D.41965 = (int) D.41964;

Renaming statement D.41910 = a_engine->rtcp_mux;

Renaming statement D.41994 = D.41910 <= 0;

Renaming statement D.41995 = D.41965 + D.41994;

Renaming statement switch_snprintf (D.41991, D.41993, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.41962, c2, D.41963, D.41995);

Renaming statement D.41966 = a_engine->local_sdp_ip;

Renaming statement D.41996 = _zstr (D.41966);

Renaming statement if (D.41996 == 0)



Renaming block #186

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.41999 = _zstr (D.41963);

Renaming statement if (D.41999 == 0)



Renaming block #187

Renaming statement D.41966 = a_engine->local_sdp_ip;

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.39607 = __builtin_strcmp (D.41966, D.41963);

Renaming statement if (D.39607 != 0)



Renaming block #188

Renaming statement D.41975 = a_engine->local_sdp_port;

Renaming statement D.41964 = ice_out->cands[0][0].con_port;

Renaming statement if (D.41975 != D.41964)



Renaming block #189

Renaming statement D.42006 = strlen (buf);

Renaming statement D.42007 = buf + D.42006;

Renaming statement D.42008 = strlen (buf);

Renaming statement D.42009 = 65536 - D.42008;

Renaming statement D.41962 = ice_out->cands[0][0].transport;

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.41964 = ice_out->cands[0][0].con_port;

Renaming statement D.41965 = (int) D.41964;

Renaming statement D.41910 = a_engine->rtcp_mux;

Renaming statement D.41994 = D.41910 <= 0;

Renaming statement D.41995 = D.41965 + D.41994;

Renaming statement D.41966 = a_engine->local_sdp_ip;

Renaming statement D.41975 = a_engine->local_sdp_port;

Renaming statement D.41982 = (int) D.41975;

Renaming statement D.41910 = a_engine->rtcp_mux;

Renaming statement D.41994 = D.41910 <= 0;

Renaming statement D.42010 = D.41982 + D.41994;

Renaming statement switch_snprintf (D.42007, D.42009, "a=candidate:%s 2 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962, c4, D.41963, D.41995, D.41966, D.42010);



Renaming block #190

Renaming statement D.41736 = a_engine->crypto_type;

Renaming statement if (D.41736 != 9)



Renaming block #191

Renaming statement D.41512 = session->channel;

Renaming statement D.42013 = switch_channel_test_flag (D.41512, 109);

Renaming statement if (D.42013 == 0)



Renaming block #192

Renaming statement D.41736 = a_engine->crypto_type;

Renaming statement D.42016 = a_engine->ssec[D.41736].local_crypto_key;

Renaming statement D.42017 = _zstr (D.42016);

Renaming statement if (D.42017 == 0)



Renaming block #193

Renaming statement D.41512 = session->channel;

Renaming statement D.42020 = switch_channel_test_flag (D.41512, 92);

Renaming statement if (D.42020 != 0)



Renaming block #194

Renaming statement D.42023 = strlen (buf);

Renaming statement D.42024 = buf + D.42023;

Renaming statement D.42025 = strlen (buf);

Renaming statement D.42026 = 65536 - D.42025;

Renaming statement D.41736 = a_engine->crypto_type;

Renaming statement D.42016 = a_engine->ssec[D.41736].local_crypto_key;

Renaming statement switch_snprintf (D.42024, D.42026, "a=crypto:%s\n", D.42016);



Renaming block #195

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41587 = D.41522->num_codecs;

Renaming statement if (D.41587 != 0)



Renaming block #196

Renaming statement cur_ptime = 0;

Renaming statement this_ptime = 0;

Renaming statement cng_type = 0;

Renaming statement D.42030 = switch_media_handle_test_media_flag (smh, 9);

Renaming statement if (D.42030 == 0)



Renaming block #197

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41606 = D.41522->cng_pt;

Renaming statement D.41607 = D.41606 != 0;

Renaming statement D.41608 = use_cng != 0;

Renaming statement D.41609 = D.41607 && D.41608;

Renaming statement if (D.41609 != 0)



Renaming block #198

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41606 = D.41522->cng_pt;

Renaming statement cng_type = (int) D.41606;

Renaming statement D.41720 = a_engine->codec_negotiated;

Renaming statement if (D.41720 == 0)



Renaming block #199

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41522->cng_pt = 0;



Renaming block #200

Renaming statement D.41512 = session->channel;

Renaming statement mult = switch_channel_get_variable_dup (D.41512, "sdp_m_per_ptime", 1, -1);

Renaming statement D.41512 = session->channel;

Renaming statement D.42039 = switch_channel_test_flag (D.41512, 106);

Renaming statement if (D.42039 != 0)



Renaming block #201

Renaming statement if (mult != 0B)



Renaming block #202

Renaming statement D.42042 = switch_false (mult);

Renaming statement if (D.42042 != 0)



Renaming block #214

Renaming statement i = 0;



Renaming block #232

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41587 = D.41522->num_codecs;

Renaming statement if (D.41587 > i)



Renaming block #215

Renaming statement imp = smh->codecs[i];

Renaming statement D.42065 = imp->codec_type;

Renaming statement if (D.42065 != 0)



Renaming block #216



Renaming block #217

Renaming statement D.42068 = imp->microseconds_per_packet;

Renaming statement this_ptime = D.42068 / 1000;

Renaming statement D.42071 = imp->iananame;

Renaming statement D.42072 = strcasecmp (D.42071, "ilbc");

Renaming statement if (D.42072 == 0)



Renaming block #218

Renaming statement D.42071 = imp->iananame;

Renaming statement D.42074 = strcasecmp (D.42071, "isac");

Renaming statement if (D.42074 == 0)



Renaming block #219

Renaming statement this_ptime = 20;



Renaming block #220

Renaming statement if (cur_ptime != this_ptime)



Renaming block #221

Renaming statement bp = buf;

Renaming statement both = 1;

Renaming statement cur_ptime = this_ptime;

Renaming statement D.41732 = a_engine->no_crypto;

Renaming statement if (D.41732 == 0)



Renaming block #222

Renaming statement D.41512 = session->channel;

Renaming statement D.42081 = switch_channel_test_flag (D.41512, 92);

Renaming statement if (D.42081 != 0)



Renaming block #223

Renaming statement D.41512 = session->channel;

Renaming statement D.42082 = switch_channel_test_flag (D.41512, 109);

Renaming statement if (D.42082 != 0)



Renaming block #224

Renaming statement D.42083 = strlen (buf);

Renaming statement D.42084 = 65536 - D.42083;

Renaming statement map.33 = map;

Renaming statement generate_m.isra.4 (session, bp, D.42084, port, family, ip, cur_ptime, append_audio, sr, use_cng, cng_type, map.33, 1);

Renaming statement D.42085 = strlen (buf);

Renaming statement bp = buf + D.42085;

Renaming statement D.42058 = smh->crypto_mode;

Renaming statement if (D.42058 == 1)



Renaming block #225

Renaming statement both = 0;



Renaming block #226

Renaming statement D.41512 = session->channel;

Renaming statement D.42090 = switch_channel_test_flag (D.41512, 106);

Renaming statement if (D.42090 != 0)



Renaming block #227

Renaming statement D.41512 = session->channel;

Renaming statement D.42092 = switch_channel_test_flag (D.41512, 109);

Renaming statement if (D.42092 != 0)



Renaming block #228

Renaming statement both = 0;



Renaming block #229

Renaming statement if (both != 0)



Renaming block #230

Renaming statement D.42095 = strlen (buf);

Renaming statement D.42096 = 65536 - D.42095;

Renaming statement map.33 = map;

Renaming statement generate_m.isra.4 (session, bp, D.42096, port, family, ip, cur_ptime, append_audio, sr, use_cng, cng_type, map.33, 0);



Renaming block #231

Renaming statement i = i + 1;



Renaming block #203

Renaming statement bp = buf;

Renaming statement D.41512 = session->channel;

Renaming statement D.42046 = switch_channel_test_flag (D.41512, 106);

Renaming statement if (D.42046 == 0)



Renaming block #204

Renaming statement D.41512 = session->channel;

Renaming statement D.42048 = switch_channel_test_flag (D.41512, 109);

Renaming statement if (D.42048 == 0)



Renaming block #205

Renaming statement iftmp.32 = 1;



Renaming block #206

Renaming statement iftmp.32 = 0;



Renaming block #207

Renaming statement both = iftmp.32;

Renaming statement D.41732 = a_engine->no_crypto;

Renaming statement if (D.41732 == 0)



Renaming block #208

Renaming statement D.41512 = session->channel;

Renaming statement D.42054 = switch_channel_test_flag (D.41512, 92);

Renaming statement if (D.42054 != 0)



Renaming block #209

Renaming statement D.41512 = session->channel;

Renaming statement D.42055 = switch_channel_test_flag (D.41512, 109);

Renaming statement if (D.42055 != 0)



Renaming block #210

Renaming statement map.33 = map;

Renaming statement generate_m.isra.4 (session, buf, 65536, port, family, ip, 0, append_audio, sr, use_cng, cng_type, map.33, 1);

Renaming statement D.42057 = strlen (buf);

Renaming statement bp = buf + D.42057;

Renaming statement D.42058 = smh->crypto_mode;

Renaming statement if (D.42058 == 1)



Renaming block #211

Renaming statement both = 0;



Renaming block #212

Renaming statement if (both != 0)



Renaming block #213

Renaming statement D.42063 = strlen (buf);

Renaming statement D.42064 = 65536 - D.42063;

Renaming statement map.33 = map;

Renaming statement generate_m.isra.4 (session, bp, D.42064, port, family, ip, 0, append_audio, sr, use_cng, cng_type, map.33, 0);



Renaming block #233

Renaming statement D.41512 = session->channel;

Renaming statement D.42097 = switch_channel_test_flag (D.41512, 98);

Renaming statement if (D.42097 != 0)



Renaming block #234

Renaming statement D.41512 = session->channel;

Renaming statement D.42100 = switch_channel_direction (D.41512);

Renaming statement if (D.42100 == 0)



Renaming block #235

Renaming statement D.41534 = smh->session;

Renaming statement D.41535 = D.41534->channel;

Renaming statement D.42103 = switch_channel_test_flag (D.41535, 109);

Renaming statement if (D.42103 != 0)



Renaming block #236

Renaming statement v_engine->no_crypto = 1;



Renaming block #237

Renaming statement D.42106 = v_engine->local_sdp_port;

Renaming statement if (D.42106 == 0)



Renaming block #238

Renaming statement switch_core_media_choose_port (session, 1, 0);



Renaming block #239

Renaming statement D.41512 = session->channel;

Renaming statement D.42109 = switch_channel_test_flag (D.41512, 106);

Renaming statement if (D.42109 != 0)



Renaming block #240

Renaming statement switch_media_handle_set_media_flag (smh, 16);



Renaming block #241

Renaming statement D.42112 = v_engine->adv_sdp_port;

Renaming statement v_port = (uint32_t) D.42112;

Renaming statement if (v_port != 0)



Renaming block #242

Renaming statement loops = 0;



Renaming block #400

Renaming statement if (loops <= 1)



Renaming block #243

Renaming statement D.41534 = smh->session;

Renaming statement D.41535 = D.41534->channel;

Renaming statement D.42115 = switch_channel_test_flag (D.41535, 108);

Renaming statement if (D.42115 != 0)



Renaming block #244

Renaming statement D.42118 = (short unsigned int) v_port;

Renaming statement gen_ice (session, 1, ip, D.42118);



Renaming block #245

Renaming statement D.42119 = strlen (buf);

Renaming statement D.42120 = buf + D.42119;

Renaming statement D.42121 = strlen (buf);

Renaming statement D.42122 = 65536 - D.42121;

Renaming statement if (loops == 0)



Renaming block #246

Renaming statement D.41512 = session->channel;

Renaming statement D.42129 = switch_channel_test_flag (D.41512, 92);

Renaming statement if (D.42129 != 0)



Renaming block #247

Renaming statement D.41512 = session->channel;

Renaming statement D.42131 = switch_channel_direction (D.41512);

Renaming statement if (D.42131 == 1)



Renaming block #248

Renaming statement D.41736 = a_engine->crypto_type;

Renaming statement if (D.41736 != 9)



Renaming block #249

Renaming statement D.41512 = session->channel;

Renaming statement D.42133 = switch_channel_test_flag (D.41512, 109);

Renaming statement if (D.42133 != 0)



Renaming block #251

Renaming statement iftmp.34 = 0;



Renaming block #250

Renaming statement iftmp.34 = 1;



Renaming block #252

Renaming statement D.42134 = get_media_profile_name (session, iftmp.34);

Renaming statement switch_snprintf (D.42120, D.42122, "m=video %d %s", v_port, D.42134);

Renaming statement D.42135 = v_engine->codec_negotiated;

Renaming statement if (D.42135 != 0)



Renaming block #253

Renaming statement switch_core_media_set_video_codec (session, 0);

Renaming statement D.42138 = strlen (buf);

Renaming statement D.42139 = buf + D.42138;

Renaming statement D.42140 = strlen (buf);

Renaming statement D.42141 = 65536 - D.42140;

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement D.42143 = D.42142->agreed_pt;

Renaming statement D.42144 = (int) D.42143;

Renaming statement switch_snprintf (D.42139, D.42141, " %d", D.42144);

Renaming statement D.42145 = switch_media_handle_test_media_flag (smh, 16);

Renaming statement if (D.42145 != 0)



Renaming block #254

Renaming statement D.41747 = smh->sdp_mutex;

Renaming statement switch_mutex_lock (D.41747);

Renaming statement pmap = v_engine->cur_payload_map;



Renaming block #258

Renaming statement if (pmap != 0B)



Renaming block #259

Renaming statement D.42158 = pmap->allocated;

Renaming statement if (D.42158 != 0)



Renaming block #255

Renaming statement D.42148 = pmap->pt;

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement D.42149 = D.42142->pt;

Renaming statement if (D.42148 != D.42149)



Renaming block #256

Renaming statement D.42152 = strlen (buf);

Renaming statement D.42153 = buf + D.42152;

Renaming statement D.42154 = strlen (buf);

Renaming statement D.42155 = 65536 - D.42154;

Renaming statement D.42148 = pmap->pt;

Renaming statement D.42156 = (int) D.42148;

Renaming statement switch_snprintf (D.42153, D.42155, " %d", D.42156);



Renaming block #257

Renaming statement pmap = pmap->next;



Renaming block #260

Renaming statement D.41747 = smh->sdp_mutex;

Renaming statement switch_mutex_unlock (D.41747);



Renaming block #261

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41587 = D.41522->num_codecs;

Renaming statement if (D.41587 != 0)



Renaming block #262

Renaming statement i = 0;



Renaming block #275

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41587 = D.41522->num_codecs;

Renaming statement if (D.41587 > i)



Renaming block #263

Renaming statement imp = smh->codecs[i];

Renaming statement D.42162 = imp->codec_type;

Renaming statement if (D.42162 != 1)



Renaming block #264



Renaming block #265

Renaming statement D.41512 = session->channel;

Renaming statement D.42165 = switch_channel_direction (D.41512);

Renaming statement if (D.42165 == 0)



Renaming block #266

Renaming statement D.41512 = session->channel;

Renaming statement D.42168 = switch_channel_test_flag (D.41512, 114);

Renaming statement if (D.42168 != 0)



Renaming block #267



Renaming block #268

Renaming statement D.42171 = smh->ianacodes[i];

Renaming statement D.42172 = (signed char) D.42171;

Renaming statement if (D.42172 >= 0)



Renaming block #269

Renaming statement D.42171 = smh->ianacodes[i];

Renaming statement D.42175 = (int) D.42171;

Renaming statement D.42176 = already_did[D.42175];

Renaming statement if (D.42176 != 0)



Renaming block #270



Renaming block #271

Renaming statement D.42171 = smh->ianacodes[i];

Renaming statement D.42175 = (int) D.42171;

Renaming statement already_did[D.42175] = 1;



Renaming block #272

Renaming statement D.42179 = strlen (buf);

Renaming statement D.42180 = buf + D.42179;

Renaming statement D.42181 = strlen (buf);

Renaming statement D.42182 = 65536 - D.42181;

Renaming statement D.42171 = smh->ianacodes[i];

Renaming statement D.42175 = (int) D.42171;

Renaming statement switch_snprintf (D.42180, D.42182, " %d", D.42175);

Renaming statement if (ptime == 0)



Renaming block #273

Renaming statement D.42185 = imp->microseconds_per_packet;

Renaming statement ptime = D.42185 / 1000;



Renaming block #274

Renaming statement i = i + 1;



Renaming block #276

Renaming statement D.42186 = strlen (buf);

Renaming statement D.42187 = buf + D.42186;

Renaming statement D.42188 = strlen (buf);

Renaming statement D.42189 = 65536 - D.42188;

Renaming statement switch_snprintf (D.42187, D.42189, "\n");

Renaming statement D.42135 = v_engine->codec_negotiated;

Renaming statement if (D.42135 != 0)



Renaming block #277

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement D.42192 = D.42142->rm_encoding;

Renaming statement D.42193 = strcasecmp (D.42192, "VP8");

Renaming statement if (D.42193 == 0)



Renaming block #278

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement D.42149 = D.42142->pt;

Renaming statement vp8 = (int) D.42149;



Renaming block #279

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement D.42192 = D.42142->rm_encoding;

Renaming statement D.42196 = strcasecmp (D.42192, "red");

Renaming statement if (D.42196 == 0)



Renaming block #280

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement D.42149 = D.42142->pt;

Renaming statement red = (int) D.42149;



Renaming block #281

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement rate = D.42142->rm_rate;

Renaming statement D.42199 = strlen (buf);

Renaming statement D.42200 = buf + D.42199;

Renaming statement D.42201 = strlen (buf);

Renaming statement D.42202 = 65536 - D.42201;

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement D.42149 = D.42142->pt;

Renaming statement D.42203 = (int) D.42149;

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement D.42192 = D.42142->rm_encoding;

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement D.42204 = D.42142->rm_rate;

Renaming statement switch_snprintf (D.42200, D.42202, "a=rtpmap:%d %s/%ld\n", D.42203, D.42192, D.42204);

Renaming statement D.41512 = session->channel;

Renaming statement D.42205 = switch_channel_test_flag (D.41512, 84);

Renaming statement if (D.42205 != 0)



Renaming block #282

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement pass_fmtp = D.42142->rm_fmtp;



Renaming block #283

Renaming statement pass_fmtp = 0B;

Renaming statement D.41512 = session->channel;

Renaming statement D.42209 = switch_channel_get_partner_uuid (D.41512);

Renaming statement if (D.42209 != 0B)



Renaming block #284

Renaming statement D.41512 = session->channel;

Renaming statement of = switch_channel_get_variable_partner (D.41512, "rtp_video_fmtp");

Renaming statement if (of != 0B)



Renaming block #285

Renaming statement pass_fmtp = of;



Renaming block #286

Renaming statement if (ov_fmtp != 0B)



Renaming block #287

Renaming statement pass_fmtp = ov_fmtp;



Renaming block #288

Renaming statement D.41512 = session->channel;

Renaming statement pass_fmtp = switch_channel_get_variable_dup (D.41512, "rtp_video_fmtp", 1, -1);



Renaming block #289

Renaming statement if (pass_fmtp != 0B)



Renaming block #290

Renaming statement D.42219 = strlen (buf);

Renaming statement D.42220 = buf + D.42219;

Renaming statement D.42221 = strlen (buf);

Renaming statement D.42222 = 65536 - D.42221;

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement D.42149 = D.42142->pt;

Renaming statement D.42203 = (int) D.42149;

Renaming statement switch_snprintf (D.42220, D.42222, "a=fmtp:%d %s\n", D.42203, pass_fmtp);



Renaming block #291

Renaming statement D.42223 = switch_media_handle_test_media_flag (smh, 16);

Renaming statement if (D.42223 != 0)



Renaming block #292

Renaming statement D.41747 = smh->sdp_mutex;

Renaming statement switch_mutex_lock (D.41747);

Renaming statement pmap = v_engine->cur_payload_map;



Renaming block #297

Renaming statement if (pmap != 0B)



Renaming block #298

Renaming statement D.42240 = pmap->allocated;

Renaming statement if (D.42240 != 0)



Renaming block #293

Renaming statement D.42226 = pmap->pt;

Renaming statement D.42142 = v_engine->cur_payload_map;

Renaming statement D.42149 = D.42142->pt;

Renaming statement if (D.42226 != D.42149)



Renaming block #294

Renaming statement D.42229 = pmap->negotiated;

Renaming statement if (D.42229 != 0)



Renaming block #295

Renaming statement D.42232 = strlen (buf);

Renaming statement D.42233 = buf + D.42232;

Renaming statement D.42234 = strlen (buf);

Renaming statement D.42235 = 65536 - D.42234;

Renaming statement D.42226 = pmap->pt;

Renaming statement D.42236 = (int) D.42226;

Renaming statement D.42237 = pmap->iananame;

Renaming statement D.42238 = pmap->rate;

Renaming statement switch_snprintf (D.42233, D.42235, "a=rtpmap:%d %s/%ld\n", D.42236, D.42237, D.42238);



Renaming block #296

Renaming statement pmap = pmap->next;



Renaming block #299

Renaming statement D.41747 = smh->sdp_mutex;

Renaming statement switch_mutex_unlock (D.41747);



Renaming block #300

Renaming statement if (append_video != 0B)



Renaming block #301

Renaming statement D.42243 = strlen (buf);

Renaming statement D.42244 = buf + D.42243;

Renaming statement D.42245 = strlen (buf);

Renaming statement D.42246 = 65536 - D.42245;

Renaming statement D.42249 = *append_video;

Renaming statement if (D.42249 != 0)



Renaming block #302

Renaming statement D.42252 = strlen (append_video);

Renaming statement D.42253 = D.42252 + -1;

Renaming statement iftmp.36 = append_video + D.42253;



Renaming block #303

Renaming statement iftmp.36 = append_video;



Renaming block #304

Renaming statement D.42255 = *iftmp.36;

Renaming statement if (D.42255 == 10)



Renaming block #305

Renaming statement iftmp.35 = "";



Renaming block #306

Renaming statement iftmp.35 = "\n";



Renaming block #307

Renaming statement switch_snprintf (D.42244, D.42246, "%s%s", append_video, iftmp.35);



Renaming block #308

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41587 = D.41522->num_codecs;

Renaming statement if (D.41587 != 0)



Renaming block #309

Renaming statement i = 0;



Renaming block #342

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41587 = D.41522->num_codecs;

Renaming statement if (D.41587 > i)



Renaming block #310

Renaming statement imp = smh->codecs[i];

Renaming statement fmtp = 0B;

Renaming statement D.42262 = smh->ianacodes[i];

Renaming statement ianacode = (uint32_t) D.42262;

Renaming statement D.42263 = imp->codec_type;

Renaming statement if (D.42263 != 1)



Renaming block #311



Renaming block #312

Renaming statement D.41512 = session->channel;

Renaming statement D.42266 = switch_channel_direction (D.41512);

Renaming statement if (D.42266 == 0)



Renaming block #313

Renaming statement D.41512 = session->channel;

Renaming statement D.42269 = switch_channel_test_flag (D.41512, 114);

Renaming statement if (D.42269 != 0)



Renaming block #314



Renaming block #315

Renaming statement if (ianacode <= 127)



Renaming block #316

Renaming statement D.42274 = already_did[ianacode];

Renaming statement if (D.42274 != 0)



Renaming block #317



Renaming block #318

Renaming statement already_did[ianacode] = 1;



Renaming block #319

Renaming statement if (rate == 0)



Renaming block #320

Renaming statement rate = imp->samples_per_second;



Renaming block #321

Renaming statement D.42279 = imp->iananame;

Renaming statement D.42280 = imp->number_of_channels;

Renaming statement D.42281 = (int) D.42280;

Renaming statement channels = get_channels (D.42279, D.42281);

Renaming statement D.42279 = imp->iananame;

Renaming statement D.42282 = strcasecmp (D.42279, "VP8");

Renaming statement if (D.42282 == 0)



Renaming block #322

Renaming statement vp8 = (int) ianacode;



Renaming block #323

Renaming statement D.42279 = imp->iananame;

Renaming statement D.42285 = strcasecmp (D.42279, "red");

Renaming statement if (D.42285 == 0)



Renaming block #324

Renaming statement red = (int) ianacode;



Renaming block #325

Renaming statement if (channels > 1)



Renaming block #326

Renaming statement D.42290 = strlen (buf);

Renaming statement D.42291 = buf + D.42290;

Renaming statement D.42292 = strlen (buf);

Renaming statement D.42293 = 65536 - D.42292;

Renaming statement D.42279 = imp->iananame;

Renaming statement D.42294 = imp->samples_per_second;

Renaming statement switch_snprintf (D.42291, D.42293, "a=rtpmap:%d %s/%d/%d\n", ianacode, D.42279, D.42294, channels);



Renaming block #327

Renaming statement D.42296 = strlen (buf);

Renaming statement D.42297 = buf + D.42296;

Renaming statement D.42298 = strlen (buf);

Renaming statement D.42299 = 65536 - D.42298;

Renaming statement D.42279 = imp->iananame;

Renaming statement D.42294 = imp->samples_per_second;

Renaming statement switch_snprintf (D.42297, D.42299, "a=rtpmap:%d %s/%d\n", ianacode, D.42279, D.42294);



Renaming block #328

Renaming statement D.42300 = _zstr (ov_fmtp);

Renaming statement if (D.42300 == 0)



Renaming block #329

Renaming statement fmtp = ov_fmtp;



Renaming block #330

Renaming statement map.33 = map;

Renaming statement if (map.33 != 0B)



Renaming block #331

Renaming statement map.33 = map;

Renaming statement D.42279 = imp->iananame;

Renaming statement fmtp = switch_event_get_header_idx (map.33, D.42279, -1);



Renaming block #332

Renaming statement D.42306 = smh->fmtps[i];

Renaming statement if (D.42306 != 0B)



Renaming block #333

Renaming statement fmtp = smh->fmtps[i];



Renaming block #334

Renaming statement D.42309 = _zstr (fmtp);

Renaming statement if (D.42309 != 0)



Renaming block #335

Renaming statement fmtp = imp->fmtp;



Renaming block #336

Renaming statement D.42312 = _zstr (fmtp);

Renaming statement if (D.42312 != 0)



Renaming block #337

Renaming statement fmtp = pass_fmtp;



Renaming block #338

Renaming statement D.42315 = _zstr (fmtp);

Renaming statement if (D.42315 == 0)



Renaming block #339

Renaming statement D.42318 = strcasecmp (fmtp, "_blank_");

Renaming statement if (D.42318 != 0)



Renaming block #340

Renaming statement D.42321 = strlen (buf);

Renaming statement D.42322 = buf + D.42321;

Renaming statement D.42323 = strlen (buf);

Renaming statement D.42324 = 65536 - D.42323;

Renaming statement switch_snprintf (D.42322, D.42324, "a=fmtp:%d %s\n", ianacode, fmtp);



Renaming block #341

Renaming statement i = i + 1;



Renaming block #343

Renaming statement if (is_outbound != 0)



Renaming block #344

Renaming statement D.41512 = session->channel;

Renaming statement D.42328 = switch_channel_test_flag (D.41512, 84);

Renaming statement if (D.42328 != 0)



Renaming block #345

Renaming statement D.41534 = smh->session;

Renaming statement D.41535 = D.41534->channel;

Renaming statement D.42329 = switch_channel_test_flag (D.41535, 109);

Renaming statement if (D.42329 != 0)



Renaming block #346

Renaming statement generate_local_fingerprint (smh, 1);



Renaming block #347

Renaming statement D.42332 = v_engine->local_dtls_fingerprint.type;

Renaming statement D.42333 = _zstr (D.42332);

Renaming statement if (D.42333 == 0)



Renaming block #348

Renaming statement D.42336 = strlen (buf);

Renaming statement D.42337 = buf + D.42336;

Renaming statement D.42338 = strlen (buf);

Renaming statement D.42339 = 65536 - D.42338;

Renaming statement D.42332 = v_engine->local_dtls_fingerprint.type;

Renaming statement D.42340 = &v_engine->local_dtls_fingerprint.str;

Renaming statement switch_snprintf (D.42337, D.42339, "a=fingerprint:%s %s\n", D.42332, D.42340);



Renaming block #349

Renaming statement D.41522 = smh->mparams;

Renaming statement D.41527 = D.41522->rtcp_video_interval_msec;

Renaming statement if (D.41527 != 0B)



Renaming block #350

Renaming statement D.42343 = v_engine->rtcp_mux;

Renaming statement if (D.42343 > 0)



Renaming block #351

Renaming statement D.42346 = strlen (buf);

Renaming statement D.42347 = buf + D.42346;

Renaming statement D.42348 = strlen (buf);

Renaming statement D.42349 = 65536 - D.42348;

Renaming statement switch_snprintf (D.42347, D.42349, "a=rtcp-mux\n");

Renaming statement D.42350 = strlen (buf);

Renaming statement D.42351 = buf + D.42350;

Renaming statement D.42352 = strlen (buf);

Renaming statement D.42353 = 65536 - D.42352;

Renaming statement switch_snprintf (D.42351, D.42353, "a=rtcp:%d IN %s %s\n", v_port, family, ip);



Renaming block #352

Renaming statement D.42355 = strlen (buf);

Renaming statement D.42356 = buf + D.42355;

Renaming statement D.42357 = strlen (buf);

Renaming statement D.42358 = 65536 - D.42357;

Renaming statement D.42359 = v_port + 1;

Renaming statement switch_snprintf (D.42356, D.42358, "a=rtcp:%d IN %s %s\n", D.42359, family, ip);



Renaming block #353

Renaming statement D.42360 = BIT_FIELD_REF <*v_engine, 16, 91280>;

Renaming statement D.42361 = D.42360 & 65535;

Renaming statement if (D.42361 != 0)



Renaming block #354

Renaming statement D.42364 = strlen (buf);

Renaming statement D.42365 = buf + D.42364;

Renaming statement D.42366 = strlen (buf);

Renaming statement D.42367 = 65536 - D.42366;

Renaming statement D.42369 = v_engine->fir;

Renaming statement if (D.42369 != 0)



Renaming block #355

Renaming statement iftmp.37 = "fir ";



Renaming block #356

Renaming statement iftmp.37 = "";



Renaming block #357

Renaming statement D.42374 = v_engine->pli;

Renaming statement if (D.42374 != 0)



Renaming block #358

Renaming statement iftmp.38 = "pli";



Renaming block #359

Renaming statement iftmp.38 = "";



Renaming block #360

Renaming statement switch_snprintf (D.42365, D.42367, "a=rtcp-fb:* %s%s\n", iftmp.37, iftmp.38);



Renaming block #361

Renaming statement D.42378 = v_engine->ice_out.cands[0][0].ready;

Renaming statement if (D.42378 != 0)



Renaming block #362

Renaming statement c1 = 659136;

Renaming statement c2 = 659134;

Renaming statement c3 = 659126;

Renaming statement c4 = 659124;

Renaming statement bw = 256;

Renaming statement ice_out = &v_engine->ice_out;

Renaming statement D.41534 = smh->session;

Renaming statement D.41535 = D.41534->channel;

Renaming statement vbw = switch_channel_get_variable_dup (D.41535, "rtp_video_max_bandwidth", 1, -1);

Renaming statement if (vbw != 0B)



Renaming block #363

Renaming statement v = atoi (vbw);

Renaming statement bw = v;



Renaming block #364

Renaming statement if (bw > 0)



Renaming block #365

Renaming statement D.42385 = strlen (buf);

Renaming statement D.42386 = buf + D.42385;

Renaming statement D.42387 = strlen (buf);

Renaming statement D.42388 = 65536 - D.42387;

Renaming statement switch_snprintf (D.42386, D.42388, "b=AS:%d\n", bw);



Renaming block #366

Renaming statement if (vp8 != 0)



Renaming block #367

Renaming statement D.41512 = session->channel;

Renaming statement D.42391 = switch_channel_test_flag (D.41512, 106);

Renaming statement if (D.42391 != 0)



Renaming block #368

Renaming statement D.42394 = strlen (buf);

Renaming statement D.42395 = buf + D.42394;

Renaming statement D.42396 = strlen (buf);

Renaming statement D.42397 = 65536 - D.42396;

Renaming statement switch_snprintf (D.42395, D.42397, "a=rtcp-fb:%d ccm fir\n", vp8);



Renaming block #369

Renaming statement if (red != 0)



Renaming block #370

Renaming statement D.42400 = strlen (buf);

Renaming statement D.42401 = buf + D.42400;

Renaming statement D.42402 = strlen (buf);

Renaming statement D.42403 = 65536 - D.42402;

Renaming statement switch_snprintf (D.42401, D.42403, "a=rtcp-fb:%d nack\n", vp8);



Renaming block #371

Renaming statement D.42404 = strlen (buf);

Renaming statement D.42405 = buf + D.42404;

Renaming statement D.42406 = strlen (buf);

Renaming statement D.42407 = 65536 - D.42406;

Renaming statement D.42408 = v_engine->ssrc;

Renaming statement D.41935 = smh->cname;

Renaming statement switch_snprintf (D.42405, D.42407, "a=ssrc:%u cname:%s\n", D.42408, D.41935);

Renaming statement D.42409 = strlen (buf);

Renaming statement D.42410 = buf + D.42409;

Renaming statement D.42411 = strlen (buf);

Renaming statement D.42412 = 65536 - D.42411;

Renaming statement D.42408 = v_engine->ssrc;

Renaming statement D.41719 = smh->msid;

Renaming statement switch_snprintf (D.42410, D.42412, "a=ssrc:%u msid:%s v0\n", D.42408, D.41719);

Renaming statement D.42413 = strlen (buf);

Renaming statement D.42414 = buf + D.42413;

Renaming statement D.42415 = strlen (buf);

Renaming statement D.42416 = 65536 - D.42415;

Renaming statement D.42408 = v_engine->ssrc;

Renaming statement D.41719 = smh->msid;

Renaming statement switch_snprintf (D.42414, D.42416, "a=ssrc:%u mslabel:%s\n", D.42408, D.41719);

Renaming statement D.42417 = strlen (buf);

Renaming statement D.42418 = buf + D.42417;

Renaming statement D.42419 = strlen (buf);

Renaming statement D.42420 = 65536 - D.42419;

Renaming statement D.42408 = v_engine->ssrc;

Renaming statement D.41719 = smh->msid;

Renaming statement switch_snprintf (D.42418, D.42420, "a=ssrc:%u label:%sv0\n", D.42408, D.41719);

Renaming statement D.42421 = strlen (buf);

Renaming statement D.42422 = buf + D.42421;

Renaming statement D.42423 = strlen (buf);

Renaming statement D.42424 = 65536 - D.42423;

Renaming statement D.41952 = ice_out->ufrag;

Renaming statement switch_snprintf (D.42422, D.42424, "a=ice-ufrag:%s\n", D.41952);

Renaming statement D.42425 = strlen (buf);

Renaming statement D.42426 = buf + D.42425;

Renaming statement D.42427 = strlen (buf);

Renaming statement D.42428 = 65536 - D.42427;

Renaming statement D.41957 = ice_out->pwd;

Renaming statement switch_snprintf (D.42426, D.42428, "a=ice-pwd:%s\n", D.41957);

Renaming statement D.42429 = strlen (buf);

Renaming statement D.42430 = buf + D.42429;

Renaming statement D.42431 = strlen (buf);

Renaming statement D.42432 = 65536 - D.42431;

Renaming statement D.41962 = ice_out->cands[0][0].transport;

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.41964 = ice_out->cands[0][0].con_port;

Renaming statement D.41965 = (int) D.41964;

Renaming statement switch_snprintf (D.42430, D.42432, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.41962, c1, D.41963, D.41965);

Renaming statement D.42433 = v_engine->local_sdp_ip;

Renaming statement D.42434 = _zstr (D.42433);

Renaming statement if (D.42434 == 0)



Renaming block #372

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.42437 = _zstr (D.41963);

Renaming statement if (D.42437 == 0)



Renaming block #373

Renaming statement D.42433 = v_engine->local_sdp_ip;

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.39666 = __builtin_strcmp (D.42433, D.41963);

Renaming statement if (D.39666 != 0)



Renaming block #374

Renaming statement D.42106 = v_engine->local_sdp_port;

Renaming statement D.41964 = ice_out->cands[0][0].con_port;

Renaming statement if (D.42106 != D.41964)



Renaming block #375

Renaming statement D.42444 = strlen (buf);

Renaming statement D.42445 = buf + D.42444;

Renaming statement D.42446 = strlen (buf);

Renaming statement D.42447 = 65536 - D.42446;

Renaming statement D.41962 = ice_out->cands[0][0].transport;

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.41964 = ice_out->cands[0][0].con_port;

Renaming statement D.41965 = (int) D.41964;

Renaming statement D.42433 = v_engine->local_sdp_ip;

Renaming statement D.42106 = v_engine->local_sdp_port;

Renaming statement D.42448 = (int) D.42106;

Renaming statement switch_snprintf (D.42445, D.42447, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962, c3, D.41963, D.41965, D.42433, D.42448);



Renaming block #376

Renaming statement D.42343 = v_engine->rtcp_mux;

Renaming statement D.42451 = D.42343 <= 0;

Renaming statement D.41986 = is_outbound != 0;

Renaming statement D.42452 = D.42451 || D.41986;

Renaming statement if (D.42452 != 0)



Renaming block #377

Renaming statement D.41512 = session->channel;

Renaming statement D.42454 = switch_channel_test_flag (D.41512, 84);

Renaming statement if (D.42454 != 0)



Renaming block #378

Renaming statement D.42455 = strlen (buf);

Renaming statement D.42456 = buf + D.42455;

Renaming statement D.42457 = strlen (buf);

Renaming statement D.42458 = 65536 - D.42457;

Renaming statement D.41962 = ice_out->cands[0][0].transport;

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.41964 = ice_out->cands[0][0].con_port;

Renaming statement D.41965 = (int) D.41964;

Renaming statement D.42343 = v_engine->rtcp_mux;

Renaming statement D.42459 = D.42343 <= 0;

Renaming statement D.42460 = D.41965 + D.42459;

Renaming statement switch_snprintf (D.42456, D.42458, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.41962, c2, D.41963, D.42460);

Renaming statement D.42433 = v_engine->local_sdp_ip;

Renaming statement D.42461 = _zstr (D.42433);

Renaming statement if (D.42461 == 0)



Renaming block #379

Renaming statement D.42464 = ice_out->cands[0][1].con_addr;

Renaming statement D.42465 = _zstr (D.42464);

Renaming statement if (D.42465 == 0)



Renaming block #380

Renaming statement D.42433 = v_engine->local_sdp_ip;

Renaming statement D.42464 = ice_out->cands[0][1].con_addr;

Renaming statement D.39675 = __builtin_strcmp (D.42433, D.42464);

Renaming statement if (D.39675 != 0)



Renaming block #381

Renaming statement D.42106 = v_engine->local_sdp_port;

Renaming statement D.42470 = ice_out->cands[0][1].con_port;

Renaming statement if (D.42106 != D.42470)



Renaming block #382

Renaming statement D.42473 = strlen (buf);

Renaming statement D.42474 = buf + D.42473;

Renaming statement D.42475 = strlen (buf);

Renaming statement D.42476 = 65536 - D.42475;

Renaming statement D.41962 = ice_out->cands[0][0].transport;

Renaming statement D.41963 = ice_out->cands[0][0].con_addr;

Renaming statement D.41964 = ice_out->cands[0][0].con_port;

Renaming statement D.41965 = (int) D.41964;

Renaming statement D.42343 = v_engine->rtcp_mux;

Renaming statement D.42459 = D.42343 <= 0;

Renaming statement D.42460 = D.41965 + D.42459;

Renaming statement D.42433 = v_engine->local_sdp_ip;

Renaming statement D.42106 = v_engine->local_sdp_port;

Renaming statement D.42448 = (int) D.42106;

Renaming statement D.42343 = v_engine->rtcp_mux;

Renaming statement D.42459 = D.42343 <= 0;

Renaming statement D.42477 = D.42448 + D.42459;

Renaming statement switch_snprintf (D.42474, D.42476, "a=candidate:%s 2 %s %u %s %d typ srflx generation 0\n", &tmp2, D.41962, c4, D.41963, D.42460, D.42433, D.42477);



Renaming block #383

Renaming statement if (loops == 0)



Renaming block #384

Renaming statement D.41512 = session->channel;

Renaming statement D.42480 = switch_channel_test_flag (D.41512, 92);

Renaming statement if (D.42480 != 0)



Renaming block #385

Renaming statement D.41512 = session->channel;

Renaming statement D.42483 = switch_channel_test_flag (D.41512, 109);

Renaming statement if (D.42483 == 0)



Renaming block #386

Renaming statement i = 0;



Renaming block #392

Renaming statement D.42486 = smh->crypto_suite_order[i];

Renaming statement if (D.42486 != 9)



Renaming block #387

Renaming statement D.42486 = smh->crypto_suite_order[i];

Renaming statement j = SUITES[D.42486].type;

Renaming statement D.41736 = a_engine->crypto_type;

Renaming statement if (D.41736 == j)



Renaming block #388

Renaming statement D.41736 = a_engine->crypto_type;

Renaming statement if (D.41736 == 9)



Renaming block #389

Renaming statement D.42490 = a_engine->ssec[j].local_crypto_key;

Renaming statement D.42491 = _zstr (D.42490);

Renaming statement if (D.42491 == 0)



Renaming block #390

Renaming statement D.42494 = strlen (buf);

Renaming statement D.42495 = buf + D.42494;

Renaming statement D.42496 = strlen (buf);

Renaming statement D.42497 = 65536 - D.42496;

Renaming statement D.42498 = v_engine->ssec[j].local_crypto_key;

Renaming statement switch_snprintf (D.42495, D.42497, "a=crypto:%s\n", D.42498);



Renaming block #391

Renaming statement i = i + 1;



Renaming block #393

Renaming statement if (local_sdp_video_zrtp_hash != 0B)



Renaming block #394

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 6892, session, 7, "Adding video a=zrtp-hash:%s\n", local_sdp_video_zrtp_hash);

Renaming statement D.42501 = strlen (buf);

Renaming statement D.42502 = buf + D.42501;

Renaming statement D.42503 = strlen (buf);

Renaming statement D.42504 = 65536 - D.42503;

Renaming statement switch_snprintf (D.42502, D.42504, "a=zrtp-hash:%s\n", local_sdp_video_zrtp_hash);



Renaming block #395

Renaming statement D.41512 = session->channel;

Renaming statement D.42505 = switch_channel_test_flag (D.41512, 109);

Renaming statement if (D.42505 != 0)



Renaming block #396

Renaming statement D.41512 = session->channel;

Renaming statement D.42507 = switch_channel_test_flag (D.41512, 92);

Renaming statement if (D.42507 == 0)



Renaming block #397

Renaming statement D.42058 = smh->crypto_mode;

Renaming statement if (D.42058 == 1)



Renaming block #398

Renaming statement D.42058 = smh->crypto_mode;

Renaming statement if (D.42058 == 2)



Renaming block #399

Renaming statement loops = loops + 1;



Renaming block #401

Renaming statement map.33 = map;

Renaming statement if (map.33 != 0B)



Renaming block #402



Renaming block #403

Renaming statement ptmap.39 = ptmap;

Renaming statement if (ptmap.39 != 0B)



Renaming block #404



Renaming block #405

Renaming statement switch_core_media_set_local_sdp (session, buf, 1);

Renaming statement if (buf != 0B)



Renaming block #406

Renaming statement free (buf);

Renaming statement buf = 0B;



Renaming block #407



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.41512_73 = session_72(D)->channel;

Updating SSA information for statement pass_fmtp_74 = switch_channel_get_variable_dup (D.41512_73, "rtp_video_fmtp", 1, -1);

Updating SSA information for statement D.41512_75 = session_72(D)->channel;

Updating SSA information for statement ov_fmtp_76 = switch_channel_get_variable_dup (D.41512_75, "rtp_force_video_fmtp", 1, -1);

Updating SSA information for statement D.41512_77 = session_72(D)->channel;

Updating SSA information for statement append_audio_78 = switch_channel_get_variable_dup (D.41512_77, "rtp_append_audio_sdp", 1, -1);

Updating SSA information for statement D.41512_79 = session_72(D)->channel;

Updating SSA information for statement append_video_80 = switch_channel_get_variable_dup (D.41512_79, "rtp_append_video_sdp", 1, -1);

Updating SSA information for statement srbuf = "";

Updating SSA information for statement D.41512_81 = session_72(D)->channel;

Updating SSA information for statement fmtp_out_var_82 = switch_channel_get_variable_dup (D.41512_81, "rtp_force_audio_fmtp", 1, -1);

Updating SSA information for statement map = 0B;

Updating SSA information for statement ptmap = 0B;

Updating SSA information for statement local_sdp_audio_zrtp_hash_83 = switch_core_media_get_zrtp_hash (session_72(D), 0, 1);

Updating SSA information for statement local_sdp_video_zrtp_hash_84 = switch_core_media_get_zrtp_hash (session_72(D), 1, 1);

Updating SSA information for statement D.41512_87 = session_72(D)->channel;

Updating SSA information for statement D.41513_88 = switch_channel_direction (D.41512_87);



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 6025, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_90 = session_72(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.41512_93 = session_72(D)->channel;

Updating SSA information for statement D.41518_94 = switch_channel_get_variable_dup (D.41512_93, "rtcp_mux", 1, -1);

Updating SSA information for statement D.41519_95 = switch_true (D.41518_94);



Registering new PHI nodes in block #6

Updating SSA information for statement a_engine_91->rtcp_mux = 1;

Updating SSA information for statement v_engine_92->rtcp_mux = 1;



Registering new PHI nodes in block #7

Updating SSA information for statement D.41522_96 = smh_90->mparams;

Updating SSA information for statement D.41523_97 = D.41522_96->rtcp_audio_interval_msec;



Registering new PHI nodes in block #8

Updating SSA information for statement D.41522_98 = smh_90->mparams;

Updating SSA information for statement D.41512_99 = session_72(D)->channel;

Updating SSA information for statement D.41526_100 = switch_channel_get_variable_dup (D.41512_99, "rtcp_audio_interval_msec", 1, -1);

Updating SSA information for statement D.41522_98->rtcp_audio_interval_msec = D.41526_100;



Registering new PHI nodes in block #9

Updating SSA information for statement D.41522_101 = smh_90->mparams;

Updating SSA information for statement D.41527_102 = D.41522_101->rtcp_video_interval_msec;



Registering new PHI nodes in block #10

Updating SSA information for statement D.41522_103 = smh_90->mparams;

Updating SSA information for statement D.41512_104 = session_72(D)->channel;

Updating SSA information for statement D.41530_105 = switch_channel_get_variable_dup (D.41512_104, "rtcp_video_interval_msec", 1, -1);

Updating SSA information for statement D.41522_103->rtcp_video_interval_msec = D.41530_105;



Registering new PHI nodes in block #11

Updating SSA information for statement D.41531_106 = dtls_ok (session_72(D));



Registering new PHI nodes in block #12

Updating SSA information for statement D.41534_107 = smh_90->session;

Updating SSA information for statement D.41535_108 = D.41534_107->channel;

Updating SSA information for statement tmp_109 = switch_channel_get_variable_dup (D.41535_108, "webrtc_enable_dtls", 1, -1);



Registering new PHI nodes in block #13

Updating SSA information for statement D.41538_110 = switch_false (tmp_109);



Registering new PHI nodes in block #14

Updating SSA information for statement D.41534_111 = smh_90->session;

Updating SSA information for statement D.41535_112 = D.41534_111->channel;

Updating SSA information for statement switch_channel_clear_flag (D.41535_112, 111);

Updating SSA information for statement D.41534_113 = smh_90->session;

Updating SSA information for statement D.41535_114 = D.41534_113->channel;

Updating SSA information for statement switch_channel_clear_flag (D.41535_114, 109);



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16

Updating SSA information for statement D.41512_115 = session_72(D)->channel;

Updating SSA information for statement D.41544_116 = switch_channel_test_flag (D.41512_115, 84);



Registering new PHI nodes in block #17

Updating SSA information for statement D.41512_117 = session_72(D)->channel;

Updating SSA information for statement D.41546_118 = switch_channel_test_flag (D.41512_117, 112);



Registering new PHI nodes in block #18

Updating SSA information for statement D.41512_119 = session_72(D)->channel;

Updating SSA information for statement D.41547_120 = switch_channel_test_flag (D.41512_119, 106);



Registering new PHI nodes in block #19

Updating SSA information for statement D.41512_121 = session_72(D)->channel;

Updating SSA information for statement D.41550_122 = switch_channel_get_variable_dup (D.41512_121, "media_webrtc", 1, -1);

Updating SSA information for statement D.41551_123 = switch_true (D.41550_122);



Registering new PHI nodes in block #20

Updating SSA information for statement D.41512_124 = session_72(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41512_124, 106, 1);

Updating SSA information for statement D.41512_125 = session_72(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41512_125, 108, 1);

Updating SSA information for statement D.41522_126 = smh_90->mparams;

Updating SSA information for statement D.41522_126->rtcp_audio_interval_msec = "5000";

Updating SSA information for statement D.41522_127 = smh_90->mparams;

Updating SSA information for statement D.41522_127->rtcp_video_interval_msec = "5000";



Registering new PHI nodes in block #21

Updating SSA information for statement D.41554_128 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #22

Updating SSA information for statement D.41557_129 = dtls_ok (session_72(D));



Registering new PHI nodes in block #23

Updating SSA information for statement D.41512_130 = session_72(D)->channel;

Updating SSA information for statement D.41562_131 = switch_channel_test_flag (D.41512_130, 106);



Registering new PHI nodes in block #24

Updating SSA information for statement D.41534_132 = smh_90->session;

Updating SSA information for statement D.41535_133 = D.41534_132->channel;

Updating SSA information for statement D.41564_134 = switch_channel_get_variable_dup (D.41535_133, "rtp_use_dtls", 1, -1);

Updating SSA information for statement D.41565_135 = switch_true (D.41564_134);



Registering new PHI nodes in block #25

Updating SSA information for statement D.41534_136 = smh_90->session;

Updating SSA information for statement D.41535_137 = D.41534_136->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41535_137, 109, 1);

Updating SSA information for statement D.41534_138 = smh_90->session;

Updating SSA information for statement D.41535_139 = D.41534_138->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41535_139, 92, 1);

Updating SSA information for statement generate_local_fingerprint (smh_90, 0);



Registering new PHI nodes in block #26

Updating SSA information for statement switch_core_session_parse_crypto_prefs (session_72(D));

Updating SSA information for statement switch_core_session_check_outgoing_crypto (session_72(D));



Registering new PHI nodes in block #27

Updating SSA information for statement D.41566_140 = a_engine_91->cur_payload_map;

Updating SSA information for statement fmtp_out_141 = D.41566_140->fmtp_out;

Updating SSA information for statement D.41522_142 = smh_90->mparams;

Updating SSA information for statement username_143 = D.41522_142->sdp_username;

Updating SSA information for statement buf_144 = calloc (1, 65536);



Registering new PHI nodes in block #28

Updating SSA information for statement __assert_fail ("(buf = calloc(1, (65536)))", "src/switch_core_media.c", 6078, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #29

Updating SSA information for statement switch_core_media_check_dtmf_type (session_72(D));

Updating SSA information for statement D.41572_145 = switch_media_handle_test_media_flag (smh_90, 9);



Registering new PHI nodes in block #30

Updating SSA information for statement D.41512_146 = session_72(D)->channel;

Updating SSA information for statement val_147 = switch_channel_get_variable_dup (D.41512_146, "supress_cng", 1, -1);



Registering new PHI nodes in block #31

Updating SSA information for statement D.41575_148 = switch_true (val_147);



Registering new PHI nodes in block #32

Updating SSA information for statement D.41512_149 = session_72(D)->channel;

Updating SSA information for statement val_150 = switch_channel_get_variable_dup (D.41512_149, "suppress_cng", 1, -1);



Registering new PHI nodes in block #33

Updating SSA information for statement D.41577_151 = switch_true (val_150);



Registering new PHI nodes in block #34

Updating SSA information for statement D.41522_153 = smh_90->mparams;

Updating SSA information for statement D.41522_153->cng_pt = 0;



Registering new PHI nodes in block #35

Updating SSA information for statement D.41578_154 = smh_90->payload_space;



Registering new PHI nodes in block #36

Updating SSA information for statement D.41512_155 = session_72(D)->channel;

Updating SSA information for statement D.41581_156 = switch_channel_test_flag (D.41512_155, 106);



Registering new PHI nodes in block #37

Updating SSA information for statement smh_90->payload_space = 102;



Registering new PHI nodes in block #38

Updating SSA information for statement smh_90->payload_space = 98;



Registering new PHI nodes in block #39



Registering new PHI nodes in block #41

Updating SSA information for statement D.41522_158 = smh_90->mparams;

Updating SSA information for statement D.41587_159 = D.41522_158->num_codecs;



Registering new PHI nodes in block #40

Updating SSA information for statement D.41585_160 = smh_90->codecs[i_36];

Updating SSA information for statement D.41586_161 = D.41585_160->ianacode;

Updating SSA information for statement smh_90->ianacodes[i_36] = D.41586_161;



Registering new PHI nodes in block #42



Registering new PHI nodes in block #43

Updating SSA information for statement orig_session = 0B;

Updating SSA information for statement switch_core_session_perform_get_partner (session_72(D), &orig_session, "src/switch_core_media.c", &__func__, 6108);



Registering new PHI nodes in block #59

Updating SSA information for statement D.41522_165 = smh_90->mparams;

Updating SSA information for statement D.41587_166 = D.41522_165->num_codecs;



Registering new PHI nodes in block #44

Updating SSA information for statement imp_167 = smh_90->codecs[i_37];

Updating SSA information for statement orig_pt = 0;

Updating SSA information for statement orig_fmtp = 0B;

Updating SSA information for statement D.41590_168 = smh_90->ianacodes[i_37];



Registering new PHI nodes in block #45

Updating SSA information for statement D.41522_169 = smh_90->mparams;

Updating SSA information for statement D.41593_170 = D.41522_169->dtmf_type;



Registering new PHI nodes in block #46

Updating SSA information for statement D.41522_171 = smh_90->mparams;

Updating SSA information for statement D.41596_172 = D.41522_171->te;



Registering new PHI nodes in block #47

Updating SSA information for statement D.41522_173 = smh_90->mparams;

Updating SSA information for statement D.41596_174 = D.41522_173->te;

Updating SSA information for statement D.41578_176 = smh_90->payload_space;



Registering new PHI nodes in block #48

Updating SSA information for statement D.41578_177 = smh_90->payload_space;

Updating SSA information for statement smh_90->payload_space = D.41602_178;



Registering new PHI nodes in block #49

Updating SSA information for statement D.41603_179 = switch_media_handle_test_media_flag (smh_90, 9);



Registering new PHI nodes in block #50

Updating SSA information for statement D.41522_180 = smh_90->mparams;

Updating SSA information for statement D.41606_181 = D.41522_180->cng_pt;



Registering new PHI nodes in block #51

Updating SSA information for statement D.41522_185 = smh_90->mparams;

Updating SSA information for statement D.41606_186 = D.41522_185->cng_pt;

Updating SSA information for statement D.41578_188 = smh_90->payload_space;



Registering new PHI nodes in block #52

Updating SSA information for statement D.41578_189 = smh_90->payload_space;

Updating SSA information for statement smh_90->payload_space = D.41602_190;



Registering new PHI nodes in block #53

Updating SSA information for statement orig_session.25_191 = orig_session;



Registering new PHI nodes in block #54

Updating SSA information for statement orig_session.25_192 = orig_session;

Updating SSA information for statement D.41619_193 = imp_167->codec_type;

Updating SSA information for statement D.41621_195 = imp_167->iananame;

Updating SSA information for statement D.41622_196 = switch_core_session_get_payload_code (orig_session.25_192, D.41620_194, D.41621_195, &orig_pt, 0B, &orig_fmtp);



Registering new PHI nodes in block #55

Updating SSA information for statement orig_pt.26_197 = orig_pt;

Updating SSA information for statement smh_90->ianacodes[i_37] = orig_pt.26_197;

Updating SSA information for statement orig_fmtp.27_198 = orig_fmtp;



Registering new PHI nodes in block #56

Updating SSA information for statement orig_fmtp.27_199 = orig_fmtp;

Updating SSA information for statement D.41628_200 = switch_core_perform_session_strdup (session_72(D), orig_fmtp.27_199, "src/switch_core_media.c", &__func__, 6133);

Updating SSA information for statement smh_90->fmtps[i_37] = D.41628_200;



Registering new PHI nodes in block #57

Updating SSA information for statement D.41578_201 = smh_90->payload_space;

Updating SSA information for statement smh_90->ianacodes[i_37] = D.41629_202;

Updating SSA information for statement smh_90->payload_space = D.41602_203;



Registering new PHI nodes in block #58

Updating SSA information for statement D.41619_204 = imp_167->codec_type;

Updating SSA information for statement D.41621_206 = imp_167->iananame;

Updating SSA information for statement D.41590_207 = smh_90->ianacodes[i_37];

Updating SSA information for statement D.41631_209 = imp_167->samples_per_second;

Updating SSA information for statement D.41632_210 = imp_167->microseconds_per_packet;

Updating SSA information for statement switch_core_media_add_payload_map (session_72(D), D.41620_205, D.41621_206, 0B, sdp_type_163(D), D.41630_208, D.41631_209, D.41634_212, 0);



Registering new PHI nodes in block #60

Updating SSA information for statement orig_session.25_214 = orig_session;



Registering new PHI nodes in block #61

Updating SSA information for statement orig_session.25_215 = orig_session;

Updating SSA information for statement switch_core_session_rwunlock (orig_session.25_215);



Registering new PHI nodes in block #62



Registering new PHI nodes in block #63



Registering new PHI nodes in block #64

Updating SSA information for statement D.41512_217 = session_72(D)->channel;

Updating SSA information for statement val_218 = switch_channel_get_variable_dup (D.41512_217, "verbose_sdp", 1, -1);



Registering new PHI nodes in block #65

Updating SSA information for statement D.41642_219 = switch_true (val_218);



Registering new PHI nodes in block #66

Updating SSA information for statement D.41512_220 = session_72(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41512_220, 110, 1);



Registering new PHI nodes in block #67



Registering new PHI nodes in block #68

Updating SSA information for statement D.41650_227 = _zstr (sr_226(D));



Registering new PHI nodes in block #69

Updating SSA information for statement D.41512_228 = session_72(D)->channel;

Updating SSA information for statement D.41653_229 = switch_channel_test_flag (D.41512_228, 15);



Registering new PHI nodes in block #70

Updating SSA information for statement D.41512_230 = session_72(D)->channel;

Updating SSA information for statement D.41655_231 = switch_channel_test_flag (D.41512_230, 29);



Registering new PHI nodes in block #71



Registering new PHI nodes in block #72

Updating SSA information for statement free (buf_144);



Registering new PHI nodes in block #73



Registering new PHI nodes in block #74

Updating SSA information for statement ip_233 = a_engine_91->adv_sdp_ip;



Registering new PHI nodes in block #75

Updating SSA information for statement ip_234 = a_engine_91->proxy_sdp_ip;



Registering new PHI nodes in block #76



Registering new PHI nodes in block #77

Updating SSA information for statement D.41512_235 = session_72(D)->channel;

Updating SSA information for statement D.41664_236 = switch_channel_get_name (D.41512_235);

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 6182, 0B, 2, "%s NO IP!\n", D.41664_236);



Registering new PHI nodes in block #78

Updating SSA information for statement free (buf_144);



Registering new PHI nodes in block #79



Registering new PHI nodes in block #80

Updating SSA information for statement port_239 = a_engine_91->adv_sdp_port;



Registering new PHI nodes in block #81

Updating SSA information for statement port_240 = a_engine_91->proxy_sdp_port;



Registering new PHI nodes in block #82



Registering new PHI nodes in block #83

Updating SSA information for statement D.41512_241 = session_72(D)->channel;

Updating SSA information for statement D.41673_242 = switch_channel_get_name (D.41512_241);

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 6194, 0B, 2, "%s NO PORT!\n", D.41673_242);



Registering new PHI nodes in block #84

Updating SSA information for statement free (buf_144);



Registering new PHI nodes in block #85

Updating SSA information for statement D.41676_244 = _zstr (sr_226(D));



Registering new PHI nodes in block #86

Updating SSA information for statement D.41512_245 = session_72(D)->channel;

Updating SSA information for statement var_val_246 = switch_channel_get_variable_dup (D.41512_245, "media_audio_mode", 1, -1);



Registering new PHI nodes in block #87



Registering new PHI nodes in block #88



Registering new PHI nodes in block #89

Updating SSA information for statement D.41682_249 = smh_90->owner_id;



Registering new PHI nodes in block #90

Updating SSA information for statement D.41685_250 = switch_epoch_time_now (0B);

Updating SSA information for statement smh_90->owner_id = D.41688_253;



Registering new PHI nodes in block #91

Updating SSA information for statement D.41689_254 = smh_90->session_id;



Registering new PHI nodes in block #92

Updating SSA information for statement D.41682_255 = smh_90->owner_id;

Updating SSA information for statement smh_90->session_id = D.41682_255;



Registering new PHI nodes in block #93

Updating SSA information for statement D.41512_256 = session_72(D)->channel;

Updating SSA information for statement D.41692_257 = switch_channel_get_variable_dup (D.41512_256, "drop_dtmf", 0, -1);

Updating SSA information for statement D.41693_258 = switch_true (D.41692_257);



Registering new PHI nodes in block #94

Updating SSA information for statement D.41512_259 = session_72(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41512_259, 102, 1);



Registering new PHI nodes in block #95

Updating SSA information for statement D.41689_260 = smh_90->session_id;

Updating SSA information for statement smh_90->session_id = D.41696_261;

Updating SSA information for statement D.41522_262 = smh_90->mparams;

Updating SSA information for statement D.41699_263 = D.41522_262->ndlb;



Registering new PHI nodes in block #96

Updating SSA information for statement D.41512_265 = session_72(D)->channel;

Updating SSA information for statement var_val_266 = switch_channel_get_variable_dup (D.41512_265, "ndlb_sendrecv_in_session", 1, -1);



Registering new PHI nodes in block #97

Updating SSA information for statement D.41703_267 = switch_true (var_val_266);



Registering new PHI nodes in block #98

Updating SSA information for statement D.41704_268 = _zstr (sr_3);



Registering new PHI nodes in block #99

Updating SSA information for statement switch_snprintf (&srbuf, 128, "a=%s\n", sr_3);



Registering new PHI nodes in block #100



Registering new PHI nodes in block #101

Updating SSA information for statement D.41708_270 = __builtin_strchr (ip_1, 58);



Registering new PHI nodes in block #102



Registering new PHI nodes in block #103



Registering new PHI nodes in block #104

Updating SSA information for statement D.41682_274 = smh_90->owner_id;

Updating SSA information for statement D.41689_275 = smh_90->session_id;

Updating SSA information for statement switch_snprintf (buf_144, 65536, "v=0\no=%s %010u %010u IN %s %s\ns=%s\nc=IN %s %s\nt=0 0\n%s", username_143, D.41682_274, D.41689_275, family_273, ip_1, username_143, family_273, ip_1, &srbuf);

Updating SSA information for statement D.41534_276 = smh_90->session;

Updating SSA information for statement D.41535_277 = D.41534_276->channel;

Updating SSA information for statement D.41712_278 = switch_channel_test_flag (D.41535_277, 108);



Registering new PHI nodes in block #105

Updating SSA information for statement gen_ice (session_72(D), 0, ip_1, port_2);

Updating SSA information for statement D.41715_279 = strlen (buf_144);

Updating SSA information for statement D.41717_281 = strlen (buf_144);

Updating SSA information for statement D.41719_283 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.41716_280, D.41718_282, "a=msid-semantic: WMS %s\n", D.41719_283);



Registering new PHI nodes in block #106

Updating SSA information for statement D.41720_284 = a_engine_91->codec_negotiated;



Registering new PHI nodes in block #107

Updating SSA information for statement D.41723_285 = strlen (buf_144);

Updating SSA information for statement D.41725_287 = strlen (buf_144);

Updating SSA information for statement D.41732_290 = a_engine_91->no_crypto;



Registering new PHI nodes in block #108

Updating SSA information for statement D.41512_291 = session_72(D)->channel;

Updating SSA information for statement D.41734_292 = switch_channel_test_flag (D.41512_291, 109);



Registering new PHI nodes in block #109

Updating SSA information for statement D.41736_293 = a_engine_91->crypto_type;



Registering new PHI nodes in block #110



Registering new PHI nodes in block #111



Registering new PHI nodes in block #112

Updating SSA information for statement D.41737_296 = get_media_profile_name (session_72(D), iftmp.29_60);

Updating SSA information for statement switch_snprintf (D.41724_286, D.41726_288, "m=audio %d %s", D.41727_289, D.41737_296);

Updating SSA information for statement D.41738_297 = strlen (buf_144);

Updating SSA information for statement D.41740_299 = strlen (buf_144);

Updating SSA information for statement D.41566_301 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41742_302 = D.41566_301->pt;

Updating SSA information for statement switch_snprintf (D.41739_298, D.41741_300, " %d", D.41743_303);

Updating SSA information for statement D.41744_304 = switch_media_handle_test_media_flag (smh_90, 15);



Registering new PHI nodes in block #113

Updating SSA information for statement D.41747_305 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.41747_305);

Updating SSA information for statement pmap_306 = a_engine_91->cur_payload_map;



Registering new PHI nodes in block #117



Registering new PHI nodes in block #118

Updating SSA information for statement D.41757_307 = pmap_34->allocated;



Registering new PHI nodes in block #114

Updating SSA information for statement D.41748_308 = pmap_34->pt;

Updating SSA information for statement D.41566_309 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41742_310 = D.41566_309->pt;



Registering new PHI nodes in block #115

Updating SSA information for statement D.41751_311 = strlen (buf_144);

Updating SSA information for statement D.41753_313 = strlen (buf_144);

Updating SSA information for statement D.41748_315 = pmap_34->pt;

Updating SSA information for statement switch_snprintf (D.41752_312, D.41754_314, " %d", D.41755_316);



Registering new PHI nodes in block #116

Updating SSA information for statement pmap_317 = pmap_34->next;



Registering new PHI nodes in block #119

Updating SSA information for statement D.41747_318 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.41747_318);



Registering new PHI nodes in block #120

Updating SSA information for statement D.41522_319 = smh_90->mparams;

Updating SSA information for statement D.41593_320 = D.41522_319->dtmf_type;



Registering new PHI nodes in block #121

Updating SSA information for statement D.41761_321 = switch_media_handle_test_media_flag (smh_90, 8);



Registering new PHI nodes in block #122

Updating SSA information for statement D.41512_322 = session_72(D)->channel;

Updating SSA information for statement D.41763_323 = switch_channel_test_flag (D.41512_322, 93);



Registering new PHI nodes in block #123

Updating SSA information for statement D.41522_324 = smh_90->mparams;

Updating SSA information for statement D.41596_325 = D.41522_324->te;



Registering new PHI nodes in block #124

Updating SSA information for statement D.41766_326 = strlen (buf_144);

Updating SSA information for statement D.41768_328 = strlen (buf_144);

Updating SSA information for statement D.41522_330 = smh_90->mparams;

Updating SSA information for statement D.41596_331 = D.41522_330->te;

Updating SSA information for statement switch_snprintf (D.41767_327, D.41769_329, " %d", D.41599_332);



Registering new PHI nodes in block #125

Updating SSA information for statement D.41770_333 = switch_media_handle_test_media_flag (smh_90, 9);



Registering new PHI nodes in block #126

Updating SSA information for statement D.41522_334 = smh_90->mparams;

Updating SSA information for statement D.41606_335 = D.41522_334->cng_pt;



Registering new PHI nodes in block #127

Updating SSA information for statement D.41775_339 = strlen (buf_144);

Updating SSA information for statement D.41777_341 = strlen (buf_144);

Updating SSA information for statement D.41522_343 = smh_90->mparams;

Updating SSA information for statement D.41606_344 = D.41522_343->cng_pt;

Updating SSA information for statement switch_snprintf (D.41776_340, D.41778_342, " %d", D.41612_345);



Registering new PHI nodes in block #128

Updating SSA information for statement D.41779_346 = strlen (buf_144);

Updating SSA information for statement D.41781_348 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41780_347, D.41782_349, "\n");

Updating SSA information for statement D.41566_350 = a_engine_91->cur_payload_map;

Updating SSA information for statement rate_351 = D.41566_350->adv_rm_rate;

Updating SSA information for statement D.41566_352 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41783_353 = D.41566_352->adv_channels;



Registering new PHI nodes in block #129

Updating SSA information for statement D.41566_354 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41566_355 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41786_356 = D.41566_355->rm_encoding;

Updating SSA information for statement D.41787_357 = get_channels (D.41786_356, 1);

Updating SSA information for statement D.41566_355->adv_channels = D.41787_357;



Registering new PHI nodes in block #130

Updating SSA information for statement D.41566_358 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41783_359 = D.41566_358->adv_channels;



Registering new PHI nodes in block #131

Updating SSA information for statement D.41790_360 = strlen (buf_144);

Updating SSA information for statement D.41792_362 = strlen (buf_144);

Updating SSA information for statement D.41566_364 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41794_365 = D.41566_364->agreed_pt;

Updating SSA information for statement D.41566_367 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41786_368 = D.41566_367->rm_encoding;

Updating SSA information for statement D.41566_369 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41783_370 = D.41566_369->adv_channels;

Updating SSA information for statement switch_snprintf (D.41791_361, D.41793_363, "a=rtpmap:%d %s/%d/%d\n", D.41795_366, D.41786_368, rate_351, D.41783_370);



Registering new PHI nodes in block #132

Updating SSA information for statement D.41797_371 = strlen (buf_144);

Updating SSA information for statement D.41799_373 = strlen (buf_144);

Updating SSA information for statement D.41566_375 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41794_376 = D.41566_375->agreed_pt;

Updating SSA information for statement D.41566_378 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41786_379 = D.41566_378->rm_encoding;

Updating SSA information for statement switch_snprintf (D.41798_372, D.41800_374, "a=rtpmap:%d %s/%d\n", D.41795_377, D.41786_379, rate_351);



Registering new PHI nodes in block #133



Registering new PHI nodes in block #134

Updating SSA information for statement D.41803_380 = strlen (buf_144);

Updating SSA information for statement D.41805_382 = strlen (buf_144);

Updating SSA information for statement D.41566_384 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41794_385 = D.41566_384->agreed_pt;

Updating SSA information for statement switch_snprintf (D.41804_381, D.41806_383, "a=fmtp:%d %s\n", D.41795_386, fmtp_out_21);



Registering new PHI nodes in block #135

Updating SSA information for statement D.41807_387 = switch_media_handle_test_media_flag (smh_90, 15);



Registering new PHI nodes in block #136

Updating SSA information for statement D.41747_388 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.41747_388);

Updating SSA information for statement pmap_389 = a_engine_91->cur_payload_map;



Registering new PHI nodes in block #140



Registering new PHI nodes in block #141

Updating SSA information for statement D.41757_390 = pmap_35->allocated;



Registering new PHI nodes in block #137

Updating SSA information for statement D.41748_391 = pmap_35->pt;

Updating SSA information for statement D.41566_392 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41742_393 = D.41566_392->pt;



Registering new PHI nodes in block #138

Updating SSA information for statement D.41812_394 = strlen (buf_144);

Updating SSA information for statement D.41814_396 = strlen (buf_144);

Updating SSA information for statement D.41748_398 = pmap_35->pt;

Updating SSA information for statement D.41816_400 = pmap_35->iananame;

Updating SSA information for statement D.41817_401 = pmap_35->rate;

Updating SSA information for statement switch_snprintf (D.41813_395, D.41815_397, "a=rtpmap:%d %s/%ld\n", D.41755_399, D.41816_400, D.41817_401);



Registering new PHI nodes in block #139

Updating SSA information for statement pmap_402 = pmap_35->next;



Registering new PHI nodes in block #142

Updating SSA information for statement D.41747_403 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.41747_403);



Registering new PHI nodes in block #143

Updating SSA information for statement D.41819_404 = a_engine_91->read_codec.implementation;



Registering new PHI nodes in block #144

Updating SSA information for statement D.41819_408 = a_engine_91->read_codec.implementation;

Updating SSA information for statement D.41825_409 = D.41819_408->microseconds_per_packet;



Registering new PHI nodes in block #145

Updating SSA information for statement D.41522_411 = smh_90->mparams;

Updating SSA information for statement D.41593_412 = D.41522_411->dtmf_type;



Registering new PHI nodes in block #146

Updating SSA information for statement D.41829_413 = switch_media_handle_test_media_flag (smh_90, 8);



Registering new PHI nodes in block #147

Updating SSA information for statement D.41512_414 = session_72(D)->channel;

Updating SSA information for statement D.41831_415 = switch_channel_test_flag (D.41512_414, 93);



Registering new PHI nodes in block #148

Updating SSA information for statement D.41522_416 = smh_90->mparams;

Updating SSA information for statement D.41596_417 = D.41522_416->te;



Registering new PHI nodes in block #149

Updating SSA information for statement D.41512_418 = session_72(D)->channel;

Updating SSA information for statement D.41834_419 = switch_channel_test_flag (D.41512_418, 106);



Registering new PHI nodes in block #150

Updating SSA information for statement D.41837_420 = strlen (buf_144);

Updating SSA information for statement D.41839_422 = strlen (buf_144);

Updating SSA information for statement D.41522_424 = smh_90->mparams;

Updating SSA information for statement D.41596_425 = D.41522_424->te;

Updating SSA information for statement switch_snprintf (D.41838_421, D.41840_423, "a=rtpmap:%d telephone-event/8000\n", D.41599_426);



Registering new PHI nodes in block #151

Updating SSA information for statement D.41842_427 = strlen (buf_144);

Updating SSA information for statement D.41844_429 = strlen (buf_144);

Updating SSA information for statement D.41522_431 = smh_90->mparams;

Updating SSA information for statement D.41596_432 = D.41522_431->te;

Updating SSA information for statement D.41522_434 = smh_90->mparams;

Updating SSA information for statement D.41596_435 = D.41522_434->te;

Updating SSA information for statement switch_snprintf (D.41843_428, D.41845_430, "a=rtpmap:%d telephone-event/8000\na=fmtp:%d 0-16\n", D.41599_436, D.41599_436);



Registering new PHI nodes in block #152

Updating SSA information for statement D.41846_437 = switch_media_handle_test_media_flag (smh_90, 9);



Registering new PHI nodes in block #153

Updating SSA information for statement D.41849_438 = strlen (buf_144);

Updating SSA information for statement D.41851_440 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41850_439, D.41852_441, "a=silenceSupp:off - - - -\n");



Registering new PHI nodes in block #154

Updating SSA information for statement D.41522_442 = smh_90->mparams;

Updating SSA information for statement D.41606_443 = D.41522_442->cng_pt;



Registering new PHI nodes in block #155

Updating SSA information for statement D.41856_447 = strlen (buf_144);

Updating SSA information for statement D.41858_449 = strlen (buf_144);

Updating SSA information for statement D.41522_451 = smh_90->mparams;

Updating SSA information for statement D.41606_452 = D.41522_451->cng_pt;

Updating SSA information for statement switch_snprintf (D.41857_448, D.41859_450, "a=rtpmap:%d CN/8000\n", D.41612_453);

Updating SSA information for statement D.41720_454 = a_engine_91->codec_negotiated;



Registering new PHI nodes in block #156

Updating SSA information for statement D.41522_455 = smh_90->mparams;

Updating SSA information for statement D.41522_455->cng_pt = 0;



Registering new PHI nodes in block #157



Registering new PHI nodes in block #158

Updating SSA information for statement D.41864_456 = strlen (buf_144);

Updating SSA information for statement D.41866_458 = strlen (buf_144);

Updating SSA information for statement D.41870_460 = *append_audio_78;



Registering new PHI nodes in block #159

Updating SSA information for statement D.41873_461 = strlen (append_audio_78);



Registering new PHI nodes in block #160



Registering new PHI nodes in block #161

Updating SSA information for statement D.41876_465 = *iftmp.31_62;



Registering new PHI nodes in block #162



Registering new PHI nodes in block #163



Registering new PHI nodes in block #164

Updating SSA information for statement switch_snprintf (D.41865_457, D.41867_459, "%s%s", append_audio_78, iftmp.30_61);



Registering new PHI nodes in block #165



Registering new PHI nodes in block #166

Updating SSA information for statement D.41882_468 = strlen (buf_144);

Updating SSA information for statement D.41884_470 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41883_469, D.41885_471, "a=ptime:%d\n", ptime_5);



Registering new PHI nodes in block #167



Registering new PHI nodes in block #168

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 6350, session_72(D), 7, "Adding audio a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_83);

Updating SSA information for statement D.41888_472 = strlen (buf_144);

Updating SSA information for statement D.41890_474 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41889_473, D.41891_475, "a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_83);



Registering new PHI nodes in block #169

Updating SSA information for statement D.41892_476 = _zstr (sr_4);



Registering new PHI nodes in block #170

Updating SSA information for statement D.41895_477 = strlen (buf_144);

Updating SSA information for statement D.41897_479 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41896_478, D.41898_480, "a=%s\n", sr_4);



Registering new PHI nodes in block #171

Updating SSA information for statement D.41899_481 = a_engine_91->local_dtls_fingerprint.type;

Updating SSA information for statement D.41900_482 = _zstr (D.41899_481);



Registering new PHI nodes in block #172

Updating SSA information for statement D.41903_483 = strlen (buf_144);

Updating SSA information for statement D.41905_485 = strlen (buf_144);

Updating SSA information for statement D.41899_487 = a_engine_91->local_dtls_fingerprint.type;

Updating SSA information for statement switch_snprintf (D.41904_484, D.41906_486, "a=fingerprint:%s %s\n", D.41899_487, D.41907_488);



Registering new PHI nodes in block #173

Updating SSA information for statement D.41522_489 = smh_90->mparams;

Updating SSA information for statement D.41523_490 = D.41522_489->rtcp_audio_interval_msec;



Registering new PHI nodes in block #174

Updating SSA information for statement D.41910_491 = a_engine_91->rtcp_mux;



Registering new PHI nodes in block #175

Updating SSA information for statement D.41913_492 = strlen (buf_144);

Updating SSA information for statement D.41915_494 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41914_493, D.41916_495, "a=rtcp-mux\n");

Updating SSA information for statement D.41917_496 = strlen (buf_144);

Updating SSA information for statement D.41919_498 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41918_497, D.41920_499, "a=rtcp:%d IN %s %s\n", D.41727_500, family_273, ip_1);



Registering new PHI nodes in block #176

Updating SSA information for statement D.41922_501 = strlen (buf_144);

Updating SSA information for statement D.41924_503 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41923_502, D.41925_504, "a=rtcp:%d IN %s %s\n", D.41926_506, family_273, ip_1);



Registering new PHI nodes in block #177

Updating SSA information for statement D.41927_507 = a_engine_91->ice_out.cands[0][0].ready;



Registering new PHI nodes in block #178

Updating SSA information for statement tmp1 = "";

Updating SSA information for statement tmp2 = "";

Updating SSA information for statement tmp1[10] = 0;

Updating SSA information for statement tmp2[10] = 0;

Updating SSA information for statement switch_stun_random_string (&tmp1, 10, "0123456789");

Updating SSA information for statement switch_stun_random_string (&tmp2, 10, "0123456789");

Updating SSA information for statement D.41930_513 = strlen (buf_144);

Updating SSA information for statement D.41932_515 = strlen (buf_144);

Updating SSA information for statement D.41934_517 = a_engine_91->ssrc;

Updating SSA information for statement D.41935_518 = smh_90->cname;

Updating SSA information for statement switch_snprintf (D.41931_514, D.41933_516, "a=ssrc:%u cname:%s\n", D.41934_517, D.41935_518);

Updating SSA information for statement D.41936_519 = strlen (buf_144);

Updating SSA information for statement D.41938_521 = strlen (buf_144);

Updating SSA information for statement D.41934_523 = a_engine_91->ssrc;

Updating SSA information for statement D.41719_524 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.41937_520, D.41939_522, "a=ssrc:%u msid:%s a0\n", D.41934_523, D.41719_524);

Updating SSA information for statement D.41940_525 = strlen (buf_144);

Updating SSA information for statement D.41942_527 = strlen (buf_144);

Updating SSA information for statement D.41934_529 = a_engine_91->ssrc;

Updating SSA information for statement D.41719_530 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.41941_526, D.41943_528, "a=ssrc:%u mslabel:%s\n", D.41934_529, D.41719_530);

Updating SSA information for statement D.41944_531 = strlen (buf_144);

Updating SSA information for statement D.41946_533 = strlen (buf_144);

Updating SSA information for statement D.41934_535 = a_engine_91->ssrc;

Updating SSA information for statement D.41719_536 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.41945_532, D.41947_534, "a=ssrc:%u label:%sa0\n", D.41934_535, D.41719_536);

Updating SSA information for statement D.41948_537 = strlen (buf_144);

Updating SSA information for statement D.41950_539 = strlen (buf_144);

Updating SSA information for statement D.41952_541 = ice_out_512->ufrag;

Updating SSA information for statement switch_snprintf (D.41949_538, D.41951_540, "a=ice-ufrag:%s\n", D.41952_541);

Updating SSA information for statement D.41953_542 = strlen (buf_144);

Updating SSA information for statement D.41955_544 = strlen (buf_144);

Updating SSA information for statement D.41957_546 = ice_out_512->pwd;

Updating SSA information for statement switch_snprintf (D.41954_543, D.41956_545, "a=ice-pwd:%s\n", D.41957_546);

Updating SSA information for statement D.41958_547 = strlen (buf_144);

Updating SSA information for statement D.41960_549 = strlen (buf_144);

Updating SSA information for statement D.41962_551 = ice_out_512->cands[0][0].transport;

Updating SSA information for statement D.41963_552 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.41964_553 = ice_out_512->cands[0][0].con_port;

Updating SSA information for statement switch_snprintf (D.41959_548, D.41961_550, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_551, c1_508, D.41963_552, D.41965_554);

Updating SSA information for statement D.41966_555 = a_engine_91->local_sdp_ip;

Updating SSA information for statement D.41967_556 = _zstr (D.41966_555);



Registering new PHI nodes in block #179

Updating SSA information for statement D.41963_557 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.41970_558 = _zstr (D.41963_557);



Registering new PHI nodes in block #180

Updating SSA information for statement D.41966_559 = a_engine_91->local_sdp_ip;

Updating SSA information for statement D.41963_560 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.39598_561 = __builtin_strcmp (D.41966_559, D.41963_560);



Registering new PHI nodes in block #181

Updating SSA information for statement D.41975_562 = a_engine_91->local_sdp_port;

Updating SSA information for statement D.41964_563 = ice_out_512->cands[0][0].con_port;



Registering new PHI nodes in block #182

Updating SSA information for statement D.41978_564 = strlen (buf_144);

Updating SSA information for statement D.41980_566 = strlen (buf_144);

Updating SSA information for statement D.41962_568 = ice_out_512->cands[0][0].transport;

Updating SSA information for statement D.41963_569 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.41964_570 = ice_out_512->cands[0][0].con_port;

Updating SSA information for statement D.41966_572 = a_engine_91->local_sdp_ip;

Updating SSA information for statement D.41975_573 = a_engine_91->local_sdp_port;

Updating SSA information for statement switch_snprintf (D.41979_565, D.41981_567, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_568, c3_510, D.41963_569, D.41965_571, D.41966_572, D.41982_574);



Registering new PHI nodes in block #183

Updating SSA information for statement D.41910_575 = a_engine_91->rtcp_mux;



Registering new PHI nodes in block #184

Updating SSA information for statement D.41512_579 = session_72(D)->channel;

Updating SSA information for statement D.41989_580 = switch_channel_test_flag (D.41512_579, 84);



Registering new PHI nodes in block #185

Updating SSA information for statement D.41990_581 = strlen (buf_144);

Updating SSA information for statement D.41992_583 = strlen (buf_144);

Updating SSA information for statement D.41962_585 = ice_out_512->cands[0][0].transport;

Updating SSA information for statement D.41963_586 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.41964_587 = ice_out_512->cands[0][0].con_port;

Updating SSA information for statement D.41910_589 = a_engine_91->rtcp_mux;

Updating SSA information for statement switch_snprintf (D.41991_582, D.41993_584, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_585, c2_509, D.41963_586, D.41995_591);

Updating SSA information for statement D.41966_592 = a_engine_91->local_sdp_ip;

Updating SSA information for statement D.41996_593 = _zstr (D.41966_592);



Registering new PHI nodes in block #186

Updating SSA information for statement D.41963_594 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.41999_595 = _zstr (D.41963_594);



Registering new PHI nodes in block #187

Updating SSA information for statement D.41966_596 = a_engine_91->local_sdp_ip;

Updating SSA information for statement D.41963_597 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.39607_598 = __builtin_strcmp (D.41966_596, D.41963_597);



Registering new PHI nodes in block #188

Updating SSA information for statement D.41975_599 = a_engine_91->local_sdp_port;

Updating SSA information for statement D.41964_600 = ice_out_512->cands[0][0].con_port;



Registering new PHI nodes in block #189

Updating SSA information for statement D.42006_601 = strlen (buf_144);

Updating SSA information for statement D.42008_603 = strlen (buf_144);

Updating SSA information for statement D.41962_605 = ice_out_512->cands[0][0].transport;

Updating SSA information for statement D.41963_606 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.41964_607 = ice_out_512->cands[0][0].con_port;

Updating SSA information for statement D.41910_609 = a_engine_91->rtcp_mux;

Updating SSA information for statement D.41966_612 = a_engine_91->local_sdp_ip;

Updating SSA information for statement D.41975_613 = a_engine_91->local_sdp_port;

Updating SSA information for statement D.41910_615 = a_engine_91->rtcp_mux;

Updating SSA information for statement switch_snprintf (D.42007_602, D.42009_604, "a=candidate:%s 2 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_605, c4_511, D.41963_606, D.41995_611, D.41966_612, D.42010_617);



Registering new PHI nodes in block #190

Updating SSA information for statement D.41736_618 = a_engine_91->crypto_type;



Registering new PHI nodes in block #191

Updating SSA information for statement D.41512_619 = session_72(D)->channel;

Updating SSA information for statement D.42013_620 = switch_channel_test_flag (D.41512_619, 109);



Registering new PHI nodes in block #192

Updating SSA information for statement D.41736_621 = a_engine_91->crypto_type;

Updating SSA information for statement D.42016_622 = a_engine_91->ssec[D.41736_621].local_crypto_key;

Updating SSA information for statement D.42017_623 = _zstr (D.42016_622);



Registering new PHI nodes in block #193

Updating SSA information for statement D.41512_624 = session_72(D)->channel;

Updating SSA information for statement D.42020_625 = switch_channel_test_flag (D.41512_624, 92);



Registering new PHI nodes in block #194

Updating SSA information for statement D.42023_626 = strlen (buf_144);

Updating SSA information for statement D.42025_628 = strlen (buf_144);

Updating SSA information for statement D.41736_630 = a_engine_91->crypto_type;

Updating SSA information for statement D.42016_631 = a_engine_91->ssec[D.41736_630].local_crypto_key;

Updating SSA information for statement switch_snprintf (D.42024_627, D.42026_629, "a=crypto:%s\n", D.42016_631);



Registering new PHI nodes in block #195

Updating SSA information for statement D.41522_632 = smh_90->mparams;

Updating SSA information for statement D.41587_633 = D.41522_632->num_codecs;



Registering new PHI nodes in block #196

Updating SSA information for statement D.42030_637 = switch_media_handle_test_media_flag (smh_90, 9);



Registering new PHI nodes in block #197

Updating SSA information for statement D.41522_638 = smh_90->mparams;

Updating SSA information for statement D.41606_639 = D.41522_638->cng_pt;



Registering new PHI nodes in block #198

Updating SSA information for statement D.41522_643 = smh_90->mparams;

Updating SSA information for statement D.41606_644 = D.41522_643->cng_pt;

Updating SSA information for statement D.41720_646 = a_engine_91->codec_negotiated;



Registering new PHI nodes in block #199

Updating SSA information for statement D.41522_647 = smh_90->mparams;

Updating SSA information for statement D.41522_647->cng_pt = 0;



Registering new PHI nodes in block #200

Updating SSA information for statement D.41512_648 = session_72(D)->channel;

Updating SSA information for statement mult_649 = switch_channel_get_variable_dup (D.41512_648, "sdp_m_per_ptime", 1, -1);

Updating SSA information for statement D.41512_650 = session_72(D)->channel;

Updating SSA information for statement D.42039_651 = switch_channel_test_flag (D.41512_650, 106);



Registering new PHI nodes in block #201



Registering new PHI nodes in block #202

Updating SSA information for statement D.42042_652 = switch_false (mult_649);



Registering new PHI nodes in block #214



Registering new PHI nodes in block #232

Updating SSA information for statement D.41522_654 = smh_90->mparams;

Updating SSA information for statement D.41587_655 = D.41522_654->num_codecs;



Registering new PHI nodes in block #215

Updating SSA information for statement imp_656 = smh_90->codecs[i_38];

Updating SSA information for statement D.42065_657 = imp_656->codec_type;



Registering new PHI nodes in block #216



Registering new PHI nodes in block #217

Updating SSA information for statement D.42068_658 = imp_656->microseconds_per_packet;

Updating SSA information for statement D.42071_660 = imp_656->iananame;

Updating SSA information for statement D.42072_661 = strcasecmp (D.42071_660, "ilbc");



Registering new PHI nodes in block #218

Updating SSA information for statement D.42071_662 = imp_656->iananame;

Updating SSA information for statement D.42074_663 = strcasecmp (D.42071_662, "isac");



Registering new PHI nodes in block #219



Registering new PHI nodes in block #220



Registering new PHI nodes in block #221

Updating SSA information for statement D.41732_668 = a_engine_91->no_crypto;



Registering new PHI nodes in block #222

Updating SSA information for statement D.41512_669 = session_72(D)->channel;

Updating SSA information for statement D.42081_670 = switch_channel_test_flag (D.41512_669, 92);



Registering new PHI nodes in block #223

Updating SSA information for statement D.41512_671 = session_72(D)->channel;

Updating SSA information for statement D.42082_672 = switch_channel_test_flag (D.41512_671, 109);



Registering new PHI nodes in block #224

Updating SSA information for statement D.42083_673 = strlen (buf_144);

Updating SSA information for statement map.33_675 = map;

Updating SSA information for statement generate_m.isra.4 (session_72(D), bp_665, D.42084_674, port_2, family_273, ip_1, cur_ptime_667, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_675, 1);

Updating SSA information for statement D.42085_676 = strlen (buf_144);

Updating SSA information for statement D.42058_678 = smh_90->crypto_mode;



Registering new PHI nodes in block #225



Registering new PHI nodes in block #226

Updating SSA information for statement D.41512_680 = session_72(D)->channel;

Updating SSA information for statement D.42090_681 = switch_channel_test_flag (D.41512_680, 106);



Registering new PHI nodes in block #227

Updating SSA information for statement D.41512_682 = session_72(D)->channel;

Updating SSA information for statement D.42092_683 = switch_channel_test_flag (D.41512_682, 109);



Registering new PHI nodes in block #228



Registering new PHI nodes in block #229



Registering new PHI nodes in block #230

Updating SSA information for statement D.42095_685 = strlen (buf_144);

Updating SSA information for statement map.33_687 = map;

Updating SSA information for statement generate_m.isra.4 (session_72(D), bp_45, D.42096_686, port_2, family_273, ip_1, cur_ptime_667, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_687, 0);



Registering new PHI nodes in block #231



Registering new PHI nodes in block #203

Updating SSA information for statement D.41512_690 = session_72(D)->channel;

Updating SSA information for statement D.42046_691 = switch_channel_test_flag (D.41512_690, 106);



Registering new PHI nodes in block #204

Updating SSA information for statement D.41512_692 = session_72(D)->channel;

Updating SSA information for statement D.42048_693 = switch_channel_test_flag (D.41512_692, 109);



Registering new PHI nodes in block #205



Registering new PHI nodes in block #206



Registering new PHI nodes in block #207

Updating SSA information for statement D.41732_697 = a_engine_91->no_crypto;



Registering new PHI nodes in block #208

Updating SSA information for statement D.41512_698 = session_72(D)->channel;

Updating SSA information for statement D.42054_699 = switch_channel_test_flag (D.41512_698, 92);



Registering new PHI nodes in block #209

Updating SSA information for statement D.41512_700 = session_72(D)->channel;

Updating SSA information for statement D.42055_701 = switch_channel_test_flag (D.41512_700, 109);



Registering new PHI nodes in block #210

Updating SSA information for statement map.33_702 = map;

Updating SSA information for statement generate_m.isra.4 (session_72(D), buf_144, 65536, port_2, family_273, ip_1, 0, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_702, 1);

Updating SSA information for statement D.42057_703 = strlen (buf_144);

Updating SSA information for statement D.42058_705 = smh_90->crypto_mode;



Registering new PHI nodes in block #211



Registering new PHI nodes in block #212



Registering new PHI nodes in block #213

Updating SSA information for statement D.42063_707 = strlen (buf_144);

Updating SSA information for statement map.33_709 = map;

Updating SSA information for statement generate_m.isra.4 (session_72(D), bp_43, D.42064_708, port_2, family_273, ip_1, 0, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_709, 0);



Registering new PHI nodes in block #233

Updating SSA information for statement D.41512_710 = session_72(D)->channel;

Updating SSA information for statement D.42097_711 = switch_channel_test_flag (D.41512_710, 98);



Registering new PHI nodes in block #234

Updating SSA information for statement D.41512_712 = session_72(D)->channel;

Updating SSA information for statement D.42100_713 = switch_channel_direction (D.41512_712);



Registering new PHI nodes in block #235

Updating SSA information for statement D.41534_714 = smh_90->session;

Updating SSA information for statement D.41535_715 = D.41534_714->channel;

Updating SSA information for statement D.42103_716 = switch_channel_test_flag (D.41535_715, 109);



Registering new PHI nodes in block #236

Updating SSA information for statement v_engine_92->no_crypto = 1;



Registering new PHI nodes in block #237

Updating SSA information for statement D.42106_717 = v_engine_92->local_sdp_port;



Registering new PHI nodes in block #238

Updating SSA information for statement switch_core_media_choose_port (session_72(D), 1, 0);



Registering new PHI nodes in block #239

Updating SSA information for statement D.41512_718 = session_72(D)->channel;

Updating SSA information for statement D.42109_719 = switch_channel_test_flag (D.41512_718, 106);



Registering new PHI nodes in block #240

Updating SSA information for statement switch_media_handle_set_media_flag (smh_90, 16);



Registering new PHI nodes in block #241

Updating SSA information for statement D.42112_720 = v_engine_92->adv_sdp_port;



Registering new PHI nodes in block #242



Registering new PHI nodes in block #400



Registering new PHI nodes in block #243

Updating SSA information for statement D.41534_723 = smh_90->session;

Updating SSA information for statement D.41535_724 = D.41534_723->channel;

Updating SSA information for statement D.42115_725 = switch_channel_test_flag (D.41535_724, 108);



Registering new PHI nodes in block #244

Updating SSA information for statement gen_ice (session_72(D), 1, ip_1, D.42118_726);



Registering new PHI nodes in block #245

Updating SSA information for statement D.42119_727 = strlen (buf_144);

Updating SSA information for statement D.42121_729 = strlen (buf_144);



Registering new PHI nodes in block #246

Updating SSA information for statement D.41512_731 = session_72(D)->channel;

Updating SSA information for statement D.42129_732 = switch_channel_test_flag (D.41512_731, 92);



Registering new PHI nodes in block #247

Updating SSA information for statement D.41512_733 = session_72(D)->channel;

Updating SSA information for statement D.42131_734 = switch_channel_direction (D.41512_733);



Registering new PHI nodes in block #248

Updating SSA information for statement D.41736_735 = a_engine_91->crypto_type;



Registering new PHI nodes in block #249

Updating SSA information for statement D.41512_736 = session_72(D)->channel;

Updating SSA information for statement D.42133_737 = switch_channel_test_flag (D.41512_736, 109);



Registering new PHI nodes in block #251



Registering new PHI nodes in block #250



Registering new PHI nodes in block #252

Updating SSA information for statement D.42134_740 = get_media_profile_name (session_72(D), iftmp.34_64);

Updating SSA information for statement switch_snprintf (D.42120_728, D.42122_730, "m=video %d %s", v_port_721, D.42134_740);

Updating SSA information for statement D.42135_741 = v_engine_92->codec_negotiated;



Registering new PHI nodes in block #253

Updating SSA information for statement switch_core_media_set_video_codec (session_72(D), 0);

Updating SSA information for statement D.42138_742 = strlen (buf_144);

Updating SSA information for statement D.42140_744 = strlen (buf_144);

Updating SSA information for statement D.42142_746 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42143_747 = D.42142_746->agreed_pt;

Updating SSA information for statement switch_snprintf (D.42139_743, D.42141_745, " %d", D.42144_748);

Updating SSA information for statement D.42145_749 = switch_media_handle_test_media_flag (smh_90, 16);



Registering new PHI nodes in block #254

Updating SSA information for statement D.41747_750 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.41747_750);

Updating SSA information for statement pmap_751 = v_engine_92->cur_payload_map;



Registering new PHI nodes in block #258



Registering new PHI nodes in block #259

Updating SSA information for statement D.42158_752 = pmap_49->allocated;



Registering new PHI nodes in block #255

Updating SSA information for statement D.42148_753 = pmap_49->pt;

Updating SSA information for statement D.42142_754 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42149_755 = D.42142_754->pt;



Registering new PHI nodes in block #256

Updating SSA information for statement D.42152_756 = strlen (buf_144);

Updating SSA information for statement D.42154_758 = strlen (buf_144);

Updating SSA information for statement D.42148_760 = pmap_49->pt;

Updating SSA information for statement switch_snprintf (D.42153_757, D.42155_759, " %d", D.42156_761);



Registering new PHI nodes in block #257

Updating SSA information for statement pmap_762 = pmap_49->next;



Registering new PHI nodes in block #260

Updating SSA information for statement D.41747_763 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.41747_763);



Registering new PHI nodes in block #261

Updating SSA information for statement D.41522_764 = smh_90->mparams;

Updating SSA information for statement D.41587_765 = D.41522_764->num_codecs;



Registering new PHI nodes in block #262

Updating SSA information for statement already_did = {};



Registering new PHI nodes in block #275

Updating SSA information for statement D.41522_767 = smh_90->mparams;

Updating SSA information for statement D.41587_768 = D.41522_767->num_codecs;



Registering new PHI nodes in block #263

Updating SSA information for statement imp_769 = smh_90->codecs[i_50];

Updating SSA information for statement D.42162_770 = imp_769->codec_type;



Registering new PHI nodes in block #264



Registering new PHI nodes in block #265

Updating SSA information for statement D.41512_771 = session_72(D)->channel;

Updating SSA information for statement D.42165_772 = switch_channel_direction (D.41512_771);



Registering new PHI nodes in block #266

Updating SSA information for statement D.41512_773 = session_72(D)->channel;

Updating SSA information for statement D.42168_774 = switch_channel_test_flag (D.41512_773, 114);



Registering new PHI nodes in block #267



Registering new PHI nodes in block #268

Updating SSA information for statement D.42171_775 = smh_90->ianacodes[i_50];



Registering new PHI nodes in block #269

Updating SSA information for statement D.42171_777 = smh_90->ianacodes[i_50];

Updating SSA information for statement D.42176_779 = already_did[D.42175_778];



Registering new PHI nodes in block #270



Registering new PHI nodes in block #271

Updating SSA information for statement D.42171_780 = smh_90->ianacodes[i_50];

Updating SSA information for statement already_did[D.42175_781] = 1;



Registering new PHI nodes in block #272

Updating SSA information for statement D.42179_782 = strlen (buf_144);

Updating SSA information for statement D.42181_784 = strlen (buf_144);

Updating SSA information for statement D.42171_786 = smh_90->ianacodes[i_50];

Updating SSA information for statement switch_snprintf (D.42180_783, D.42182_785, " %d", D.42175_787);



Registering new PHI nodes in block #273

Updating SSA information for statement D.42185_788 = imp_769->microseconds_per_packet;



Registering new PHI nodes in block #274



Registering new PHI nodes in block #276

Updating SSA information for statement D.42186_791 = strlen (buf_144);

Updating SSA information for statement D.42188_793 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42187_792, D.42189_794, "\n");

Updating SSA information for statement D.42135_795 = v_engine_92->codec_negotiated;



Registering new PHI nodes in block #277

Updating SSA information for statement D.42142_796 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42192_797 = D.42142_796->rm_encoding;

Updating SSA information for statement D.42193_798 = strcasecmp (D.42192_797, "VP8");



Registering new PHI nodes in block #278

Updating SSA information for statement D.42142_799 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42149_800 = D.42142_799->pt;



Registering new PHI nodes in block #279

Updating SSA information for statement D.42142_802 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42192_803 = D.42142_802->rm_encoding;

Updating SSA information for statement D.42196_804 = strcasecmp (D.42192_803, "red");



Registering new PHI nodes in block #280

Updating SSA information for statement D.42142_805 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42149_806 = D.42142_805->pt;



Registering new PHI nodes in block #281

Updating SSA information for statement D.42142_808 = v_engine_92->cur_payload_map;

Updating SSA information for statement rate_809 = D.42142_808->rm_rate;

Updating SSA information for statement D.42199_810 = strlen (buf_144);

Updating SSA information for statement D.42201_812 = strlen (buf_144);

Updating SSA information for statement D.42142_814 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42149_815 = D.42142_814->pt;

Updating SSA information for statement D.42142_817 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42192_818 = D.42142_817->rm_encoding;

Updating SSA information for statement D.42142_819 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42204_820 = D.42142_819->rm_rate;

Updating SSA information for statement switch_snprintf (D.42200_811, D.42202_813, "a=rtpmap:%d %s/%ld\n", D.42203_816, D.42192_818, D.42204_820);

Updating SSA information for statement D.41512_821 = session_72(D)->channel;

Updating SSA information for statement D.42205_822 = switch_channel_test_flag (D.41512_821, 84);



Registering new PHI nodes in block #282

Updating SSA information for statement D.42142_823 = v_engine_92->cur_payload_map;

Updating SSA information for statement pass_fmtp_824 = D.42142_823->rm_fmtp;



Registering new PHI nodes in block #283

Updating SSA information for statement D.41512_826 = session_72(D)->channel;

Updating SSA information for statement D.42209_827 = switch_channel_get_partner_uuid (D.41512_826);



Registering new PHI nodes in block #284

Updating SSA information for statement D.41512_828 = session_72(D)->channel;

Updating SSA information for statement of_829 = switch_channel_get_variable_partner (D.41512_828, "rtp_video_fmtp");



Registering new PHI nodes in block #285



Registering new PHI nodes in block #286



Registering new PHI nodes in block #287



Registering new PHI nodes in block #288

Updating SSA information for statement D.41512_832 = session_72(D)->channel;

Updating SSA information for statement pass_fmtp_833 = switch_channel_get_variable_dup (D.41512_832, "rtp_video_fmtp", 1, -1);



Registering new PHI nodes in block #289



Registering new PHI nodes in block #290

Updating SSA information for statement D.42219_834 = strlen (buf_144);

Updating SSA information for statement D.42221_836 = strlen (buf_144);

Updating SSA information for statement D.42142_838 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42149_839 = D.42142_838->pt;

Updating SSA information for statement switch_snprintf (D.42220_835, D.42222_837, "a=fmtp:%d %s\n", D.42203_840, pass_fmtp_18);



Registering new PHI nodes in block #291

Updating SSA information for statement D.42223_841 = switch_media_handle_test_media_flag (smh_90, 16);



Registering new PHI nodes in block #292

Updating SSA information for statement D.41747_842 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.41747_842);

Updating SSA information for statement pmap_843 = v_engine_92->cur_payload_map;



Registering new PHI nodes in block #297



Registering new PHI nodes in block #298

Updating SSA information for statement D.42240_844 = pmap_51->allocated;



Registering new PHI nodes in block #293

Updating SSA information for statement D.42226_845 = pmap_51->pt;

Updating SSA information for statement D.42142_846 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42149_847 = D.42142_846->pt;



Registering new PHI nodes in block #294

Updating SSA information for statement D.42229_848 = pmap_51->negotiated;



Registering new PHI nodes in block #295

Updating SSA information for statement D.42232_849 = strlen (buf_144);

Updating SSA information for statement D.42234_851 = strlen (buf_144);

Updating SSA information for statement D.42226_853 = pmap_51->pt;

Updating SSA information for statement D.42237_855 = pmap_51->iananame;

Updating SSA information for statement D.42238_856 = pmap_51->rate;

Updating SSA information for statement switch_snprintf (D.42233_850, D.42235_852, "a=rtpmap:%d %s/%ld\n", D.42236_854, D.42237_855, D.42238_856);



Registering new PHI nodes in block #296

Updating SSA information for statement pmap_857 = pmap_51->next;



Registering new PHI nodes in block #299

Updating SSA information for statement D.41747_858 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.41747_858);



Registering new PHI nodes in block #300



Registering new PHI nodes in block #301

Updating SSA information for statement D.42243_859 = strlen (buf_144);

Updating SSA information for statement D.42245_861 = strlen (buf_144);

Updating SSA information for statement D.42249_863 = *append_video_80;



Registering new PHI nodes in block #302

Updating SSA information for statement D.42252_864 = strlen (append_video_80);



Registering new PHI nodes in block #303



Registering new PHI nodes in block #304

Updating SSA information for statement D.42255_868 = *iftmp.36_66;



Registering new PHI nodes in block #305



Registering new PHI nodes in block #306



Registering new PHI nodes in block #307

Updating SSA information for statement switch_snprintf (D.42244_860, D.42246_862, "%s%s", append_video_80, iftmp.35_65);



Registering new PHI nodes in block #308

Updating SSA information for statement D.41522_871 = smh_90->mparams;

Updating SSA information for statement D.41587_872 = D.41522_871->num_codecs;



Registering new PHI nodes in block #309

Updating SSA information for statement already_did = {};



Registering new PHI nodes in block #342

Updating SSA information for statement D.41522_874 = smh_90->mparams;

Updating SSA information for statement D.41587_875 = D.41522_874->num_codecs;



Registering new PHI nodes in block #310

Updating SSA information for statement imp_876 = smh_90->codecs[i_52];

Updating SSA information for statement D.42262_878 = smh_90->ianacodes[i_52];

Updating SSA information for statement D.42263_880 = imp_876->codec_type;



Registering new PHI nodes in block #311



Registering new PHI nodes in block #312

Updating SSA information for statement D.41512_881 = session_72(D)->channel;

Updating SSA information for statement D.42266_882 = switch_channel_direction (D.41512_881);



Registering new PHI nodes in block #313

Updating SSA information for statement D.41512_883 = session_72(D)->channel;

Updating SSA information for statement D.42269_884 = switch_channel_test_flag (D.41512_883, 114);



Registering new PHI nodes in block #314



Registering new PHI nodes in block #315



Registering new PHI nodes in block #316

Updating SSA information for statement D.42274_885 = already_did[ianacode_879];



Registering new PHI nodes in block #317



Registering new PHI nodes in block #318

Updating SSA information for statement already_did[ianacode_879] = 1;



Registering new PHI nodes in block #319



Registering new PHI nodes in block #320

Updating SSA information for statement rate_886 = imp_876->samples_per_second;



Registering new PHI nodes in block #321

Updating SSA information for statement D.42279_887 = imp_876->iananame;

Updating SSA information for statement D.42280_888 = imp_876->number_of_channels;

Updating SSA information for statement channels_890 = get_channels (D.42279_887, D.42281_889);

Updating SSA information for statement D.42279_891 = imp_876->iananame;

Updating SSA information for statement D.42282_892 = strcasecmp (D.42279_891, "VP8");



Registering new PHI nodes in block #322



Registering new PHI nodes in block #323

Updating SSA information for statement D.42279_894 = imp_876->iananame;

Updating SSA information for statement D.42285_895 = strcasecmp (D.42279_894, "red");



Registering new PHI nodes in block #324



Registering new PHI nodes in block #325



Registering new PHI nodes in block #326

Updating SSA information for statement D.42290_897 = strlen (buf_144);

Updating SSA information for statement D.42292_899 = strlen (buf_144);

Updating SSA information for statement D.42279_901 = imp_876->iananame;

Updating SSA information for statement D.42294_902 = imp_876->samples_per_second;

Updating SSA information for statement switch_snprintf (D.42291_898, D.42293_900, "a=rtpmap:%d %s/%d/%d\n", ianacode_879, D.42279_901, D.42294_902, channels_890);



Registering new PHI nodes in block #327

Updating SSA information for statement D.42296_903 = strlen (buf_144);

Updating SSA information for statement D.42298_905 = strlen (buf_144);

Updating SSA information for statement D.42279_907 = imp_876->iananame;

Updating SSA information for statement D.42294_908 = imp_876->samples_per_second;

Updating SSA information for statement switch_snprintf (D.42297_904, D.42299_906, "a=rtpmap:%d %s/%d\n", ianacode_879, D.42279_907, D.42294_908);



Registering new PHI nodes in block #328

Updating SSA information for statement D.42300_909 = _zstr (ov_fmtp_76);



Registering new PHI nodes in block #329



Registering new PHI nodes in block #330

Updating SSA information for statement map.33_911 = map;



Registering new PHI nodes in block #331

Updating SSA information for statement map.33_912 = map;

Updating SSA information for statement D.42279_913 = imp_876->iananame;

Updating SSA information for statement fmtp_914 = switch_event_get_header_idx (map.33_912, D.42279_913, -1);



Registering new PHI nodes in block #332

Updating SSA information for statement D.42306_915 = smh_90->fmtps[i_52];



Registering new PHI nodes in block #333

Updating SSA information for statement fmtp_916 = smh_90->fmtps[i_52];



Registering new PHI nodes in block #334

Updating SSA information for statement D.42309_917 = _zstr (fmtp_54);



Registering new PHI nodes in block #335

Updating SSA information for statement fmtp_918 = imp_876->fmtp;



Registering new PHI nodes in block #336

Updating SSA information for statement D.42312_919 = _zstr (fmtp_55);



Registering new PHI nodes in block #337



Registering new PHI nodes in block #338

Updating SSA information for statement D.42315_921 = _zstr (fmtp_56);



Registering new PHI nodes in block #339

Updating SSA information for statement D.42318_922 = strcasecmp (fmtp_56, "_blank_");



Registering new PHI nodes in block #340

Updating SSA information for statement D.42321_923 = strlen (buf_144);

Updating SSA information for statement D.42323_925 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42322_924, D.42324_926, "a=fmtp:%d %s\n", ianacode_879, fmtp_56);



Registering new PHI nodes in block #341



Registering new PHI nodes in block #343



Registering new PHI nodes in block #344

Updating SSA information for statement D.41512_928 = session_72(D)->channel;

Updating SSA information for statement D.42328_929 = switch_channel_test_flag (D.41512_928, 84);



Registering new PHI nodes in block #345

Updating SSA information for statement D.41534_930 = smh_90->session;

Updating SSA information for statement D.41535_931 = D.41534_930->channel;

Updating SSA information for statement D.42329_932 = switch_channel_test_flag (D.41535_931, 109);



Registering new PHI nodes in block #346

Updating SSA information for statement generate_local_fingerprint (smh_90, 1);



Registering new PHI nodes in block #347

Updating SSA information for statement D.42332_933 = v_engine_92->local_dtls_fingerprint.type;

Updating SSA information for statement D.42333_934 = _zstr (D.42332_933);



Registering new PHI nodes in block #348

Updating SSA information for statement D.42336_935 = strlen (buf_144);

Updating SSA information for statement D.42338_937 = strlen (buf_144);

Updating SSA information for statement D.42332_939 = v_engine_92->local_dtls_fingerprint.type;

Updating SSA information for statement switch_snprintf (D.42337_936, D.42339_938, "a=fingerprint:%s %s\n", D.42332_939, D.42340_940);



Registering new PHI nodes in block #349

Updating SSA information for statement D.41522_941 = smh_90->mparams;

Updating SSA information for statement D.41527_942 = D.41522_941->rtcp_video_interval_msec;



Registering new PHI nodes in block #350

Updating SSA information for statement D.42343_943 = v_engine_92->rtcp_mux;



Registering new PHI nodes in block #351

Updating SSA information for statement D.42346_944 = strlen (buf_144);

Updating SSA information for statement D.42348_946 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42347_945, D.42349_947, "a=rtcp-mux\n");

Updating SSA information for statement D.42350_948 = strlen (buf_144);

Updating SSA information for statement D.42352_950 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42351_949, D.42353_951, "a=rtcp:%d IN %s %s\n", v_port_721, family_273, ip_1);



Registering new PHI nodes in block #352

Updating SSA information for statement D.42355_952 = strlen (buf_144);

Updating SSA information for statement D.42357_954 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42356_953, D.42358_955, "a=rtcp:%d IN %s %s\n", D.42359_956, family_273, ip_1);



Registering new PHI nodes in block #353

Updating SSA information for statement D.42360_957 = BIT_FIELD_REF <*v_engine_92, 16, 91280>;



Registering new PHI nodes in block #354

Updating SSA information for statement D.42364_959 = strlen (buf_144);

Updating SSA information for statement D.42366_961 = strlen (buf_144);

Updating SSA information for statement D.42369_963 = v_engine_92->fir;



Registering new PHI nodes in block #355



Registering new PHI nodes in block #356



Registering new PHI nodes in block #357

Updating SSA information for statement D.42374_966 = v_engine_92->pli;



Registering new PHI nodes in block #358



Registering new PHI nodes in block #359



Registering new PHI nodes in block #360

Updating SSA information for statement switch_snprintf (D.42365_960, D.42367_962, "a=rtcp-fb:* %s%s\n", iftmp.37_67, iftmp.38_68);



Registering new PHI nodes in block #361

Updating SSA information for statement D.42378_969 = v_engine_92->ice_out.cands[0][0].ready;



Registering new PHI nodes in block #362

Updating SSA information for statement tmp1 = "";

Updating SSA information for statement tmp2 = "";

Updating SSA information for statement tmp1[10] = 0;

Updating SSA information for statement tmp2[10] = 0;

Updating SSA information for statement switch_stun_random_string (&tmp1, 10, "0123456789");

Updating SSA information for statement switch_stun_random_string (&tmp2, 10, "0123456789");

Updating SSA information for statement D.41534_976 = smh_90->session;

Updating SSA information for statement D.41535_977 = D.41534_976->channel;

Updating SSA information for statement vbw_978 = switch_channel_get_variable_dup (D.41535_977, "rtp_video_max_bandwidth", 1, -1);



Registering new PHI nodes in block #363

Updating SSA information for statement v_979 = atoi (vbw_978);



Registering new PHI nodes in block #364



Registering new PHI nodes in block #365

Updating SSA information for statement D.42385_981 = strlen (buf_144);

Updating SSA information for statement D.42387_983 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42386_982, D.42388_984, "b=AS:%d\n", bw_57);



Registering new PHI nodes in block #366



Registering new PHI nodes in block #367

Updating SSA information for statement D.41512_985 = session_72(D)->channel;

Updating SSA information for statement D.42391_986 = switch_channel_test_flag (D.41512_985, 106);



Registering new PHI nodes in block #368

Updating SSA information for statement D.42394_987 = strlen (buf_144);

Updating SSA information for statement D.42396_989 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42395_988, D.42397_990, "a=rtcp-fb:%d ccm fir\n", vp8_26);



Registering new PHI nodes in block #369



Registering new PHI nodes in block #370

Updating SSA information for statement D.42400_991 = strlen (buf_144);

Updating SSA information for statement D.42402_993 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42401_992, D.42403_994, "a=rtcp-fb:%d nack\n", vp8_26);



Registering new PHI nodes in block #371

Updating SSA information for statement D.42404_995 = strlen (buf_144);

Updating SSA information for statement D.42406_997 = strlen (buf_144);

Updating SSA information for statement D.42408_999 = v_engine_92->ssrc;

Updating SSA information for statement D.41935_1000 = smh_90->cname;

Updating SSA information for statement switch_snprintf (D.42405_996, D.42407_998, "a=ssrc:%u cname:%s\n", D.42408_999, D.41935_1000);

Updating SSA information for statement D.42409_1001 = strlen (buf_144);

Updating SSA information for statement D.42411_1003 = strlen (buf_144);

Updating SSA information for statement D.42408_1005 = v_engine_92->ssrc;

Updating SSA information for statement D.41719_1006 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.42410_1002, D.42412_1004, "a=ssrc:%u msid:%s v0\n", D.42408_1005, D.41719_1006);

Updating SSA information for statement D.42413_1007 = strlen (buf_144);

Updating SSA information for statement D.42415_1009 = strlen (buf_144);

Updating SSA information for statement D.42408_1011 = v_engine_92->ssrc;

Updating SSA information for statement D.41719_1012 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.42414_1008, D.42416_1010, "a=ssrc:%u mslabel:%s\n", D.42408_1011, D.41719_1012);

Updating SSA information for statement D.42417_1013 = strlen (buf_144);

Updating SSA information for statement D.42419_1015 = strlen (buf_144);

Updating SSA information for statement D.42408_1017 = v_engine_92->ssrc;

Updating SSA information for statement D.41719_1018 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.42418_1014, D.42420_1016, "a=ssrc:%u label:%sv0\n", D.42408_1017, D.41719_1018);

Updating SSA information for statement D.42421_1019 = strlen (buf_144);

Updating SSA information for statement D.42423_1021 = strlen (buf_144);

Updating SSA information for statement D.41952_1023 = ice_out_975->ufrag;

Updating SSA information for statement switch_snprintf (D.42422_1020, D.42424_1022, "a=ice-ufrag:%s\n", D.41952_1023);

Updating SSA information for statement D.42425_1024 = strlen (buf_144);

Updating SSA information for statement D.42427_1026 = strlen (buf_144);

Updating SSA information for statement D.41957_1028 = ice_out_975->pwd;

Updating SSA information for statement switch_snprintf (D.42426_1025, D.42428_1027, "a=ice-pwd:%s\n", D.41957_1028);

Updating SSA information for statement D.42429_1029 = strlen (buf_144);

Updating SSA information for statement D.42431_1031 = strlen (buf_144);

Updating SSA information for statement D.41962_1033 = ice_out_975->cands[0][0].transport;

Updating SSA information for statement D.41963_1034 = ice_out_975->cands[0][0].con_addr;

Updating SSA information for statement D.41964_1035 = ice_out_975->cands[0][0].con_port;

Updating SSA information for statement switch_snprintf (D.42430_1030, D.42432_1032, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_1033, c1_970, D.41963_1034, D.41965_1036);

Updating SSA information for statement D.42433_1037 = v_engine_92->local_sdp_ip;

Updating SSA information for statement D.42434_1038 = _zstr (D.42433_1037);



Registering new PHI nodes in block #372

Updating SSA information for statement D.41963_1039 = ice_out_975->cands[0][0].con_addr;

Updating SSA information for statement D.42437_1040 = _zstr (D.41963_1039);



Registering new PHI nodes in block #373

Updating SSA information for statement D.42433_1041 = v_engine_92->local_sdp_ip;

Updating SSA information for statement D.41963_1042 = ice_out_975->cands[0][0].con_addr;

Updating SSA information for statement D.39666_1043 = __builtin_strcmp (D.42433_1041, D.41963_1042);



Registering new PHI nodes in block #374

Updating SSA information for statement D.42106_1044 = v_engine_92->local_sdp_port;

Updating SSA information for statement D.41964_1045 = ice_out_975->cands[0][0].con_port;



Registering new PHI nodes in block #375

Updating SSA information for statement D.42444_1046 = strlen (buf_144);

Updating SSA information for statement D.42446_1048 = strlen (buf_144);

Updating SSA information for statement D.41962_1050 = ice_out_975->cands[0][0].transport;

Updating SSA information for statement D.41963_1051 = ice_out_975->cands[0][0].con_addr;

Updating SSA information for statement D.41964_1052 = ice_out_975->cands[0][0].con_port;

Updating SSA information for statement D.42433_1054 = v_engine_92->local_sdp_ip;

Updating SSA information for statement D.42106_1055 = v_engine_92->local_sdp_port;

Updating SSA information for statement switch_snprintf (D.42445_1047, D.42447_1049, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_1050, c3_972, D.41963_1051, D.41965_1053, D.42433_1054, D.42448_1056);



Registering new PHI nodes in block #376

Updating SSA information for statement D.42343_1057 = v_engine_92->rtcp_mux;



Registering new PHI nodes in block #377

Updating SSA information for statement D.41512_1061 = session_72(D)->channel;

Updating SSA information for statement D.42454_1062 = switch_channel_test_flag (D.41512_1061, 84);



Registering new PHI nodes in block #378

Updating SSA information for statement D.42455_1063 = strlen (buf_144);

Updating SSA information for statement D.42457_1065 = strlen (buf_144);

Updating SSA information for statement D.41962_1067 = ice_out_975->cands[0][0].transport;

Updating SSA information for statement D.41963_1068 = ice_out_975->cands[0][0].con_addr;

Updating SSA information for statement D.41964_1069 = ice_out_975->cands[0][0].con_port;

Updating SSA information for statement D.42343_1071 = v_engine_92->rtcp_mux;

Updating SSA information for statement switch_snprintf (D.42456_1064, D.42458_1066, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_1067, c2_971, D.41963_1068, D.42460_1073);

Updating SSA information for statement D.42433_1074 = v_engine_92->local_sdp_ip;

Updating SSA information for statement D.42461_1075 = _zstr (D.42433_1074);



Registering new PHI nodes in block #379

Updating SSA information for statement D.42464_1076 = ice_out_975->cands[0][1].con_addr;

Updating SSA information for statement D.42465_1077 = _zstr (D.42464_1076);



Registering new PHI nodes in block #380

Updating SSA information for statement D.42433_1078 = v_engine_92->local_sdp_ip;

Updating SSA information for statement D.42464_1079 = ice_out_975->cands[0][1].con_addr;

Updating SSA information for statement D.39675_1080 = __builtin_strcmp (D.42433_1078, D.42464_1079);



Registering new PHI nodes in block #381

Updating SSA information for statement D.42106_1081 = v_engine_92->local_sdp_port;

Updating SSA information for statement D.42470_1082 = ice_out_975->cands[0][1].con_port;



Registering new PHI nodes in block #382

Updating SSA information for statement D.42473_1083 = strlen (buf_144);

Updating SSA information for statement D.42475_1085 = strlen (buf_144);

Updating SSA information for statement D.41962_1087 = ice_out_975->cands[0][0].transport;

Updating SSA information for statement D.41963_1088 = ice_out_975->cands[0][0].con_addr;

Updating SSA information for statement D.41964_1089 = ice_out_975->cands[0][0].con_port;

Updating SSA information for statement D.42343_1091 = v_engine_92->rtcp_mux;

Updating SSA information for statement D.42433_1094 = v_engine_92->local_sdp_ip;

Updating SSA information for statement D.42106_1095 = v_engine_92->local_sdp_port;

Updating SSA information for statement D.42343_1097 = v_engine_92->rtcp_mux;

Updating SSA information for statement switch_snprintf (D.42474_1084, D.42476_1086, "a=candidate:%s 2 %s %u %s %d typ srflx generation 0\n", &tmp2, D.41962_1087, c4_973, D.41963_1088, D.42460_1093, D.42433_1094, D.42477_1099);



Registering new PHI nodes in block #383



Registering new PHI nodes in block #384

Updating SSA information for statement D.41512_1100 = session_72(D)->channel;

Updating SSA information for statement D.42480_1101 = switch_channel_test_flag (D.41512_1100, 92);



Registering new PHI nodes in block #385

Updating SSA information for statement D.41512_1102 = session_72(D)->channel;

Updating SSA information for statement D.42483_1103 = switch_channel_test_flag (D.41512_1102, 109);



Registering new PHI nodes in block #386



Registering new PHI nodes in block #392

Updating SSA information for statement D.42486_1105 = smh_90->crypto_suite_order[i_58];



Registering new PHI nodes in block #387

Updating SSA information for statement D.42486_1106 = smh_90->crypto_suite_order[i_58];

Updating SSA information for statement j_1107 = SUITES[D.42486_1106].type;

Updating SSA information for statement D.41736_1108 = a_engine_91->crypto_type;



Registering new PHI nodes in block #388

Updating SSA information for statement D.41736_1109 = a_engine_91->crypto_type;



Registering new PHI nodes in block #389

Updating SSA information for statement D.42490_1110 = a_engine_91->ssec[j_1107].local_crypto_key;

Updating SSA information for statement D.42491_1111 = _zstr (D.42490_1110);



Registering new PHI nodes in block #390

Updating SSA information for statement D.42494_1112 = strlen (buf_144);

Updating SSA information for statement D.42496_1114 = strlen (buf_144);

Updating SSA information for statement D.42498_1116 = v_engine_92->ssec[j_1107].local_crypto_key;

Updating SSA information for statement switch_snprintf (D.42495_1113, D.42497_1115, "a=crypto:%s\n", D.42498_1116);



Registering new PHI nodes in block #391



Registering new PHI nodes in block #393



Registering new PHI nodes in block #394

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 6892, session_72(D), 7, "Adding video a=zrtp-hash:%s\n", local_sdp_video_zrtp_hash_84);

Updating SSA information for statement D.42501_1118 = strlen (buf_144);

Updating SSA information for statement D.42503_1120 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42502_1119, D.42504_1121, "a=zrtp-hash:%s\n", local_sdp_video_zrtp_hash_84);



Registering new PHI nodes in block #395

Updating SSA information for statement D.41512_1122 = session_72(D)->channel;

Updating SSA information for statement D.42505_1123 = switch_channel_test_flag (D.41512_1122, 109);



Registering new PHI nodes in block #396

Updating SSA information for statement D.41512_1124 = session_72(D)->channel;

Updating SSA information for statement D.42507_1125 = switch_channel_test_flag (D.41512_1124, 92);



Registering new PHI nodes in block #397

Updating SSA information for statement D.42058_1126 = smh_90->crypto_mode;



Registering new PHI nodes in block #398

Updating SSA information for statement D.42058_1127 = smh_90->crypto_mode;



Registering new PHI nodes in block #399



Registering new PHI nodes in block #401

Updating SSA information for statement map.33_1129 = map;



Registering new PHI nodes in block #402

Updating SSA information for statement switch_event_destroy (&map);



Registering new PHI nodes in block #403

Updating SSA information for statement ptmap.39_1130 = ptmap;



Registering new PHI nodes in block #404

Updating SSA information for statement switch_event_destroy (&ptmap);



Registering new PHI nodes in block #405

Updating SSA information for statement switch_core_media_set_local_sdp (session_72(D), buf_144, 1);



Registering new PHI nodes in block #406

Updating SSA information for statement free (buf_144);



Registering new PHI nodes in block #407



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 408
Number of blocks to update: 407 (100%)

Affected blocks


Scope blocks after cleanups:

{ Scope block #0 
  char * buf;
  int ptime;
  uint32_t rate;
  uint32_t v_port;
  int use_cng;
  const char * val;
  const char * family;
  const char * pass_fmtp;
  const char * ov_fmtp;
  const char * append_audio;
  const char * append_video;
  char srbuf[128];
  const char * var_val;
  const char * username;
  const char * fmtp_out;
  const char * fmtp_out_var;
  struct switch_event_t * map;
  struct switch_event_t * ptmap;
  const char * local_sdp_audio_zrtp_hash;
  const char * local_sdp_video_zrtp_hash;
  const char * tmp;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  struct ice_t * ice_out;
  int vp8;
  int red;
  struct payload_map_t * pmap;
  int is_outbound;
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_gen_local_sdp";
  static const char __func__[32] = "switch_core_media_gen_local_sdp";

  { Scope block #0 
    int i;

    { Scope block #0 
      struct switch_core_session_t * orig_session;

      { Scope block #0 
        const struct switch_codec_implementation_t * imp;
        switch_payload_t orig_pt;
        char * orig_fmtp;

      }

    }

  }

  { Scope block #0 
    char tmp1[11];
    char tmp2[11];
    uint32_t c1;
    uint32_t c2;
    uint32_t c3;
    uint32_t c4;

    { Scope block #0 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

    { Scope block #0 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

  }

  { Scope block #0 
    int i;
    int cur_ptime;
    int this_ptime;
    int cng_type;
    const char * mult;

    { Scope block #0 
      char * bp;
      int both;

    }

    { Scope block #0 
      const struct switch_codec_implementation_t * imp;

      { Scope block #0 
        char * bp;
        int both;

      }

    }

  }

  { Scope block #0 
    int loops;

    { Scope block #0 
      struct payload_map_t * pmap;

    }

    { Scope block #0 
      int i;
      int already_did[128];

      { Scope block #0 
        const struct switch_codec_implementation_t * imp;

      }

    }

    { Scope block #0 
      const char * of;
      struct payload_map_t * pmap;

    }

    { Scope block #0 
      int i;
      int already_did[128];

      { Scope block #0 
        const struct switch_codec_implementation_t * imp;
        char * fmtp;
        uint32_t ianacode;
        int channels;

      }

    }

    { Scope block #0 
      char tmp1[11];
      char tmp2[11];
      uint32_t c1;
      uint32_t c2;
      uint32_t c3;
      uint32_t c4;
      const char * vbw;
      int bw;

      { Scope block #0 
        int v;

      }

      { Scope block #0 
        size_t __s1_len; (unused)
        size_t __s2_len; (unused)

      }

      { Scope block #0 
        size_t __s1_len; (unused)
        size_t __s2_len; (unused)

      }

    }

    { Scope block #0 
      int i;

      { Scope block #0 
        switch_rtp_crypto_key_type_t j;

      }

    }

  }

}
switch_core_media_gen_local_sdp (struct switch_core_session_t * session, switch_sdp_type_t sdp_type, const char * ip, switch_port_t port, const char * sr, int force)
{
  switch_rtp_crypto_key_type_t j;
  int i;
  int v;
  int bw;
  const char * vbw;
  uint32_t c4;
  uint32_t c3;
  uint32_t c2;
  uint32_t c1;
  char tmp2[11];
  char tmp1[11];
  int channels;
  uint32_t ianacode;
  char * fmtp;
  const struct switch_codec_implementation_t * imp;
  int already_did[128];
  int i;
  struct payload_map_t * pmap;
  const char * of;
  const struct switch_codec_implementation_t * imp;
  int already_did[128];
  int i;
  struct payload_map_t * pmap;
  int loops;
  int both;
  char * bp;
  const struct switch_codec_implementation_t * imp;
  int both;
  char * bp;
  const char * mult;
  int cng_type;
  int this_ptime;
  int cur_ptime;
  int i;
  uint32_t c4;
  uint32_t c3;
  uint32_t c2;
  uint32_t c1;
  char tmp2[11];
  char tmp1[11];
  char * orig_fmtp;
  switch_payload_t orig_pt;
  const struct switch_codec_implementation_t * imp;
  struct switch_core_session_t * orig_session;
  int i;
  static const char __func__[32] = "switch_core_media_gen_local_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_gen_local_sdp";
  int is_outbound;
  struct payload_map_t * pmap;
  int red;
  int vp8;
  struct ice_t * ice_out;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  const char * tmp;
  const char * local_sdp_video_zrtp_hash;
  const char * local_sdp_audio_zrtp_hash;
  struct switch_event_t * ptmap;
  struct switch_event_t * map;
  const char * fmtp_out_var;
  const char * fmtp_out;
  const char * username;
  const char * var_val;
  char srbuf[128];
  const char * append_video;
  const char * append_audio;
  const char * ov_fmtp;
  const char * pass_fmtp;
  const char * family;
  const char * val;
  int use_cng;
  uint32_t v_port;
  uint32_t rate;
  int ptime;
  char * buf;
  struct switch_event_t * ptmap.39;
  uint32_t D.42507;
  uint32_t D.42505;
  size_t D.42504;
  size_t D.42503;
  char * D.42502;
  size_t D.42501;
  char * D.42498;
  size_t D.42497;
  size_t D.42496;
  char * D.42495;
  size_t D.42494;
  int D.42491;
  char * D.42490;
  switch_rtp_crypto_key_type_t D.42486;
  uint32_t D.42483;
  uint32_t D.42480;
  int D.42477;
  size_t D.42476;
  size_t D.42475;
  char * D.42474;
  size_t D.42473;
  switch_port_t D.42470;
  int D.39675;
  int D.42465;
  char * D.42464;
  int D.42461;
  int D.42460;
  int D.42459;
  size_t D.42458;
  size_t D.42457;
  char * D.42456;
  size_t D.42455;
  uint32_t D.42454;
  _Bool D.42452;
  _Bool D.42451;
  int D.42448;
  size_t D.42447;
  size_t D.42446;
  char * D.42445;
  size_t D.42444;
  int D.39666;
  int D.42437;
  int D.42434;
  char * D.42433;
  size_t D.42432;
  size_t D.42431;
  char * D.42430;
  size_t D.42429;
  size_t D.42428;
  size_t D.42427;
  char * D.42426;
  size_t D.42425;
  size_t D.42424;
  size_t D.42423;
  char * D.42422;
  size_t D.42421;
  size_t D.42420;
  size_t D.42419;
  char * D.42418;
  size_t D.42417;
  size_t D.42416;
  size_t D.42415;
  char * D.42414;
  size_t D.42413;
  size_t D.42412;
  size_t D.42411;
  char * D.42410;
  size_t D.42409;
  uint32_t D.42408;
  size_t D.42407;
  size_t D.42406;
  char * D.42405;
  size_t D.42404;
  size_t D.42403;
  size_t D.42402;
  char * D.42401;
  size_t D.42400;
  size_t D.42397;
  size_t D.42396;
  char * D.42395;
  size_t D.42394;
  uint32_t D.42391;
  size_t D.42388;
  size_t D.42387;
  char * D.42386;
  size_t D.42385;
  uint8_t D.42378;
  uint8_t D.42374;
  char * iftmp.38;
  uint8_t D.42369;
  char * iftmp.37;
  size_t D.42367;
  size_t D.42366;
  char * D.42365;
  size_t D.42364;
  short unsigned int D.42361;
  short unsigned int D.42360;
  uint32_t D.42359;
  size_t D.42358;
  size_t D.42357;
  char * D.42356;
  size_t D.42355;
  size_t D.42353;
  size_t D.42352;
  char * D.42351;
  size_t D.42350;
  size_t D.42349;
  size_t D.42348;
  char * D.42347;
  size_t D.42346;
  int8_t D.42343;
  char[192] * D.42340;
  size_t D.42339;
  size_t D.42338;
  char * D.42337;
  size_t D.42336;
  int D.42333;
  char * D.42332;
  uint32_t D.42329;
  uint32_t D.42328;
  size_t D.42324;
  size_t D.42323;
  char * D.42322;
  size_t D.42321;
  int D.42318;
  int D.42315;
  int D.42312;
  int D.42309;
  char * D.42306;
  int D.42300;
  size_t D.42299;
  size_t D.42298;
  char * D.42297;
  size_t D.42296;
  const uint32_t D.42294;
  size_t D.42293;
  size_t D.42292;
  char * D.42291;
  size_t D.42290;
  int D.42285;
  int D.42282;
  int D.42281;
  const uint8_t D.42280;
  char * const D.42279;
  int D.42274;
  uint32_t D.42269;
  switch_call_direction_t D.42266;
  const switch_codec_type_t D.42263;
  switch_payload_t D.42262;
  const char D.42255;
  unsigned int D.42253;
  size_t D.42252;
  const char D.42249;
  const char * iftmp.36;
  char * iftmp.35;
  size_t D.42246;
  size_t D.42245;
  char * D.42244;
  size_t D.42243;
  uint8_t D.42240;
  uint32_t D.42238;
  char * D.42237;
  int D.42236;
  size_t D.42235;
  size_t D.42234;
  char * D.42233;
  size_t D.42232;
  uint8_t D.42229;
  switch_payload_t D.42226;
  int32_t D.42223;
  size_t D.42222;
  size_t D.42221;
  char * D.42220;
  size_t D.42219;
  const char * D.42209;
  uint32_t D.42205;
  long unsigned int D.42204;
  int D.42203;
  size_t D.42202;
  size_t D.42201;
  char * D.42200;
  size_t D.42199;
  int D.42196;
  int D.42193;
  char * D.42192;
  size_t D.42189;
  size_t D.42188;
  char * D.42187;
  size_t D.42186;
  const int D.42185;
  size_t D.42182;
  size_t D.42181;
  char * D.42180;
  size_t D.42179;
  int D.42176;
  int D.42175;
  signed char D.42172;
  switch_payload_t D.42171;
  uint32_t D.42168;
  switch_call_direction_t D.42165;
  const switch_codec_type_t D.42162;
  uint8_t D.42158;
  int D.42156;
  size_t D.42155;
  size_t D.42154;
  char * D.42153;
  size_t D.42152;
  switch_payload_t D.42149;
  switch_payload_t D.42148;
  int32_t D.42145;
  int D.42144;
  switch_payload_t D.42143;
  struct payload_map_t * D.42142;
  size_t D.42141;
  size_t D.42140;
  char * D.42139;
  size_t D.42138;
  uint8_t D.42135;
  const char * D.42134;
  uint32_t D.42133;
  switch_call_direction_t D.42131;
  uint32_t D.42129;
  int iftmp.34;
  size_t D.42122;
  size_t D.42121;
  char * D.42120;
  size_t D.42119;
  short unsigned int D.42118;
  uint32_t D.42115;
  switch_port_t D.42112;
  uint32_t D.42109;
  switch_port_t D.42106;
  uint32_t D.42103;
  switch_call_direction_t D.42100;
  uint32_t D.42097;
  size_t D.42096;
  size_t D.42095;
  uint32_t D.42092;
  uint32_t D.42090;
  size_t D.42085;
  size_t D.42084;
  size_t D.42083;
  uint32_t D.42082;
  uint32_t D.42081;
  int D.42074;
  int D.42072;
  char * const D.42071;
  const int D.42068;
  const switch_codec_type_t D.42065;
  size_t D.42064;
  size_t D.42063;
  switch_rtp_crypto_mode_t D.42058;
  size_t D.42057;
  struct switch_event_t * map.33;
  uint32_t D.42055;
  uint32_t D.42054;
  uint32_t D.42048;
  uint32_t D.42046;
  int iftmp.32;
  int D.42042;
  uint32_t D.42039;
  int32_t D.42030;
  size_t D.42026;
  size_t D.42025;
  char * D.42024;
  size_t D.42023;
  uint32_t D.42020;
  int D.42017;
  char * D.42016;
  uint32_t D.42013;
  int D.42010;
  size_t D.42009;
  size_t D.42008;
  char * D.42007;
  size_t D.42006;
  int D.39607;
  int D.41999;
  int D.41996;
  int D.41995;
  int D.41994;
  size_t D.41993;
  size_t D.41992;
  char * D.41991;
  size_t D.41990;
  uint32_t D.41989;
  _Bool D.41987;
  _Bool D.41986;
  _Bool D.41985;
  int D.41982;
  size_t D.41981;
  size_t D.41980;
  char * D.41979;
  size_t D.41978;
  switch_port_t D.41975;
  int D.39598;
  int D.41970;
  int D.41967;
  char * D.41966;
  int D.41965;
  switch_port_t D.41964;
  char * D.41963;
  char * D.41962;
  size_t D.41961;
  size_t D.41960;
  char * D.41959;
  size_t D.41958;
  char * D.41957;
  size_t D.41956;
  size_t D.41955;
  char * D.41954;
  size_t D.41953;
  char * D.41952;
  size_t D.41951;
  size_t D.41950;
  char * D.41949;
  size_t D.41948;
  size_t D.41947;
  size_t D.41946;
  char * D.41945;
  size_t D.41944;
  size_t D.41943;
  size_t D.41942;
  char * D.41941;
  size_t D.41940;
  size_t D.41939;
  size_t D.41938;
  char * D.41937;
  size_t D.41936;
  char * D.41935;
  uint32_t D.41934;
  size_t D.41933;
  size_t D.41932;
  char * D.41931;
  size_t D.41930;
  uint8_t D.41927;
  int D.41926;
  size_t D.41925;
  size_t D.41924;
  char * D.41923;
  size_t D.41922;
  size_t D.41920;
  size_t D.41919;
  char * D.41918;
  size_t D.41917;
  size_t D.41916;
  size_t D.41915;
  char * D.41914;
  size_t D.41913;
  int8_t D.41910;
  char[192] * D.41907;
  size_t D.41906;
  size_t D.41905;
  char * D.41904;
  size_t D.41903;
  int D.41900;
  char * D.41899;
  size_t D.41898;
  size_t D.41897;
  char * D.41896;
  size_t D.41895;
  int D.41892;
  size_t D.41891;
  size_t D.41890;
  char * D.41889;
  size_t D.41888;
  size_t D.41885;
  size_t D.41884;
  char * D.41883;
  size_t D.41882;
  const char D.41876;
  unsigned int D.41874;
  size_t D.41873;
  const char D.41870;
  const char * iftmp.31;
  char * iftmp.30;
  size_t D.41867;
  size_t D.41866;
  char * D.41865;
  size_t D.41864;
  size_t D.41859;
  size_t D.41858;
  char * D.41857;
  size_t D.41856;
  size_t D.41852;
  size_t D.41851;
  char * D.41850;
  size_t D.41849;
  int32_t D.41846;
  size_t D.41845;
  size_t D.41844;
  char * D.41843;
  size_t D.41842;
  size_t D.41840;
  size_t D.41839;
  char * D.41838;
  size_t D.41837;
  uint32_t D.41834;
  uint32_t D.41831;
  int32_t D.41829;
  const int D.41825;
  _Bool D.41822;
  _Bool D.41821;
  _Bool D.41820;
  const struct switch_codec_implementation_t * D.41819;
  uint32_t D.41817;
  char * D.41816;
  size_t D.41815;
  size_t D.41814;
  char * D.41813;
  size_t D.41812;
  int32_t D.41807;
  size_t D.41806;
  size_t D.41805;
  char * D.41804;
  size_t D.41803;
  size_t D.41800;
  size_t D.41799;
  char * D.41798;
  size_t D.41797;
  int D.41795;
  switch_payload_t D.41794;
  size_t D.41793;
  size_t D.41792;
  char * D.41791;
  size_t D.41790;
  int D.41787;
  char * D.41786;
  int D.41783;
  size_t D.41782;
  size_t D.41781;
  char * D.41780;
  size_t D.41779;
  size_t D.41778;
  size_t D.41777;
  char * D.41776;
  size_t D.41775;
  int32_t D.41770;
  size_t D.41769;
  size_t D.41768;
  char * D.41767;
  size_t D.41766;
  uint32_t D.41763;
  int32_t D.41761;
  uint8_t D.41757;
  int D.41755;
  size_t D.41754;
  size_t D.41753;
  char * D.41752;
  size_t D.41751;
  switch_payload_t D.41748;
  struct switch_mutex_t * D.41747;
  int32_t D.41744;
  int D.41743;
  switch_payload_t D.41742;
  size_t D.41741;
  size_t D.41740;
  char * D.41739;
  size_t D.41738;
  const char * D.41737;
  switch_rtp_crypto_key_type_t D.41736;
  uint32_t D.41734;
  uint8_t D.41732;
  int iftmp.29;
  int D.41727;
  size_t D.41726;
  size_t D.41725;
  char * D.41724;
  size_t D.41723;
  uint8_t D.41720;
  char * D.41719;
  size_t D.41718;
  size_t D.41717;
  char * D.41716;
  size_t D.41715;
  uint32_t D.41712;
  char * D.41708;
  char[4] * iftmp.28;
  int D.41704;
  int D.41703;
  unsigned int D.41700;
  switch_core_media_NDLB_t D.41699;
  uint32_t D.41696;
  int D.41693;
  const char * D.41692;
  uint32_t D.41689;
  unsigned int D.41688;
  unsigned int D.41687;
  unsigned int D.41686;
  time_t D.41685;
  uint32_t D.41682;
  int D.41676;
  char * D.41673;
  char * D.41664;
  uint32_t D.41655;
  uint32_t D.41653;
  int D.41650;
  _Bool D.41647;
  _Bool D.41646;
  _Bool D.41645;
  int D.41642;
  uint32_t D.41634;
  int D.41633;
  const int D.41632;
  const uint32_t D.41631;
  uint32_t D.41630;
  unsigned char D.41629;
  char * D.41628;
  char * orig_fmtp.27;
  switch_payload_t orig_pt.26;
  switch_status_t D.41622;
  char * const D.41621;
  switch_media_type_t D.41620;
  const switch_codec_type_t D.41619;
  struct switch_core_session_t * orig_session.25;
  int D.41612;
  _Bool D.41609;
  _Bool D.41608;
  _Bool D.41607;
  switch_payload_t D.41606;
  int32_t D.41603;
  int D.41602;
  int D.41599;
  switch_payload_t D.41596;
  switch_core_media_dtmf_t D.41593;
  switch_payload_t D.41590;
  int D.41587;
  const switch_payload_t D.41586;
  const struct switch_codec_implementation_t * D.41585;
  uint32_t D.41581;
  int D.41578;
  int D.41577;
  int D.41575;
  int32_t D.41572;
  struct payload_map_t * D.41566;
  int D.41565;
  const char * D.41564;
  uint32_t D.41562;
  int D.41557;
  int D.41554;
  int D.41551;
  const char * D.41550;
  uint32_t D.41547;
  uint32_t D.41546;
  uint32_t D.41544;
  int D.41538;
  struct switch_channel_t * D.41535;
  struct switch_core_session_t * D.41534;
  int D.41531;
  const char * D.41530;
  char * D.41527;
  const char * D.41526;
  char * D.41523;
  struct switch_core_media_params_t * D.41522;
  int D.41519;
  const char * D.41518;
  switch_call_direction_t D.41513;
  struct switch_channel_t * D.41512;

<bb 2>:
  ptime_69 = 0;
  # DEBUG ptime => ptime_69
  rate_70 = 0;
  # DEBUG rate => rate_70
  use_cng_71 = 1;
  # DEBUG use_cng => use_cng_71
  D.41512_73 = session_72(D)->channel;
  pass_fmtp_74 = switch_channel_get_variable_dup (D.41512_73, "rtp_video_fmtp", 1, -1);
  # DEBUG pass_fmtp => pass_fmtp_74
  D.41512_75 = session_72(D)->channel;
  ov_fmtp_76 = switch_channel_get_variable_dup (D.41512_75, "rtp_force_video_fmtp", 1, -1);
  # DEBUG ov_fmtp => ov_fmtp_76
  D.41512_77 = session_72(D)->channel;
  append_audio_78 = switch_channel_get_variable_dup (D.41512_77, "rtp_append_audio_sdp", 1, -1);
  # DEBUG append_audio => append_audio_78
  D.41512_79 = session_72(D)->channel;
  append_video_80 = switch_channel_get_variable_dup (D.41512_79, "rtp_append_video_sdp", 1, -1);
  # DEBUG append_video => append_video_80
  srbuf = "";
  D.41512_81 = session_72(D)->channel;
  fmtp_out_var_82 = switch_channel_get_variable_dup (D.41512_81, "rtp_force_audio_fmtp", 1, -1);
  # DEBUG fmtp_out_var => fmtp_out_var_82
  map = 0B;
  ptmap = 0B;
  local_sdp_audio_zrtp_hash_83 = switch_core_media_get_zrtp_hash (session_72(D), 0, 1);
  # DEBUG local_sdp_audio_zrtp_hash => local_sdp_audio_zrtp_hash_83
  local_sdp_video_zrtp_hash_84 = switch_core_media_get_zrtp_hash (session_72(D), 1, 1);
  # DEBUG local_sdp_video_zrtp_hash => local_sdp_video_zrtp_hash_84
  vp8_85 = 0;
  # DEBUG vp8 => vp8_85
  red_86 = 0;
  # DEBUG red => red_86
  D.41512_87 = session_72(D)->channel;
  D.41513_88 = switch_channel_direction (D.41512_87);
  is_outbound_89 = D.41513_88 == 1;
  # DEBUG is_outbound => is_outbound_89
  if (session_72(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 6025, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_90 = session_72(D)->media_handle;
  # DEBUG smh => smh_90
  if (smh_90 == 0B)
    goto <bb 407>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_91 = &smh_90->engines;
  # DEBUG a_engine => a_engine_91
  v_engine_92 = &smh_90->engines[1];
  # DEBUG v_engine => v_engine_92
  D.41512_93 = session_72(D)->channel;
  D.41518_94 = switch_channel_get_variable_dup (D.41512_93, "rtcp_mux", 1, -1);
  D.41519_95 = switch_true (D.41518_94);
  if (D.41519_95 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  a_engine_91->rtcp_mux = 1;
  v_engine_92->rtcp_mux = 1;

<bb 7>:
  D.41522_96 = smh_90->mparams;
  D.41523_97 = D.41522_96->rtcp_audio_interval_msec;
  if (D.41523_97 == 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.41522_98 = smh_90->mparams;
  D.41512_99 = session_72(D)->channel;
  D.41526_100 = switch_channel_get_variable_dup (D.41512_99, "rtcp_audio_interval_msec", 1, -1);
  D.41522_98->rtcp_audio_interval_msec = D.41526_100;

<bb 9>:
  D.41522_101 = smh_90->mparams;
  D.41527_102 = D.41522_101->rtcp_video_interval_msec;
  if (D.41527_102 == 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.41522_103 = smh_90->mparams;
  D.41512_104 = session_72(D)->channel;
  D.41530_105 = switch_channel_get_variable_dup (D.41512_104, "rtcp_video_interval_msec", 1, -1);
  D.41522_103->rtcp_video_interval_msec = D.41530_105;

<bb 11>:
  D.41531_106 = dtls_ok (session_72(D));
  if (D.41531_106 != 0)
    goto <bb 12>;
  else
    goto <bb 15>;

<bb 12>:
  D.41534_107 = smh_90->session;
  D.41535_108 = D.41534_107->channel;
  tmp_109 = switch_channel_get_variable_dup (D.41535_108, "webrtc_enable_dtls", 1, -1);
  # DEBUG tmp => tmp_109
  if (tmp_109 != 0B)
    goto <bb 13>;
  else
    goto <bb 15>;

<bb 13>:
  D.41538_110 = switch_false (tmp_109);
  if (D.41538_110 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.41534_111 = smh_90->session;
  D.41535_112 = D.41534_111->channel;
  switch_channel_clear_flag (D.41535_112, 111);
  D.41534_113 = smh_90->session;
  D.41535_114 = D.41534_113->channel;
  switch_channel_clear_flag (D.41535_114, 109);

<bb 15>:
  if (is_outbound_89 != 0)
    goto <bb 18>;
  else
    goto <bb 16>;

<bb 16>:
  D.41512_115 = session_72(D)->channel;
  D.41544_116 = switch_channel_test_flag (D.41512_115, 84);
  if (D.41544_116 != 0)
    goto <bb 18>;
  else
    goto <bb 17>;

<bb 17>:
  D.41512_117 = session_72(D)->channel;
  D.41546_118 = switch_channel_test_flag (D.41512_117, 112);
  if (D.41546_118 != 0)
    goto <bb 18>;
  else
    goto <bb 27>;

<bb 18>:
  D.41512_119 = session_72(D)->channel;
  D.41547_120 = switch_channel_test_flag (D.41512_119, 106);
  if (D.41547_120 == 0)
    goto <bb 19>;
  else
    goto <bb 21>;

<bb 19>:
  D.41512_121 = session_72(D)->channel;
  D.41550_122 = switch_channel_get_variable_dup (D.41512_121, "media_webrtc", 1, -1);
  D.41551_123 = switch_true (D.41550_122);
  if (D.41551_123 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.41512_124 = session_72(D)->channel;
  switch_channel_set_flag_value (D.41512_124, 106, 1);
  D.41512_125 = session_72(D)->channel;
  switch_channel_set_flag_value (D.41512_125, 108, 1);
  D.41522_126 = smh_90->mparams;
  D.41522_126->rtcp_audio_interval_msec = "5000";
  D.41522_127 = smh_90->mparams;
  D.41522_127->rtcp_video_interval_msec = "5000";

<bb 21>:
  D.41554_128 = switch_rtp_has_dtls ();
  if (D.41554_128 != 0)
    goto <bb 22>;
  else
    goto <bb 26>;

<bb 22>:
  D.41557_129 = dtls_ok (session_72(D));
  if (D.41557_129 != 0)
    goto <bb 23>;
  else
    goto <bb 26>;

<bb 23>:
  D.41512_130 = session_72(D)->channel;
  D.41562_131 = switch_channel_test_flag (D.41512_130, 106);
  if (D.41562_131 != 0)
    goto <bb 25>;
  else
    goto <bb 24>;

<bb 24>:
  D.41534_132 = smh_90->session;
  D.41535_133 = D.41534_132->channel;
  D.41564_134 = switch_channel_get_variable_dup (D.41535_133, "rtp_use_dtls", 1, -1);
  D.41565_135 = switch_true (D.41564_134);
  if (D.41565_135 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.41534_136 = smh_90->session;
  D.41535_137 = D.41534_136->channel;
  switch_channel_set_flag_value (D.41535_137, 109, 1);
  D.41534_138 = smh_90->session;
  D.41535_139 = D.41534_138->channel;
  switch_channel_set_flag_value (D.41535_139, 92, 1);
  generate_local_fingerprint (smh_90, 0);

<bb 26>:
  switch_core_session_parse_crypto_prefs (session_72(D));
  switch_core_session_check_outgoing_crypto (session_72(D));

<bb 27>:
  D.41566_140 = a_engine_91->cur_payload_map;
  fmtp_out_141 = D.41566_140->fmtp_out;
  # DEBUG fmtp_out => fmtp_out_141
  D.41522_142 = smh_90->mparams;
  username_143 = D.41522_142->sdp_username;
  # DEBUG username => username_143
  buf_144 = calloc (1, 65536);
  # DEBUG buf => buf_144
  if (buf_144 == 0B)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  __assert_fail ("(buf = calloc(1, (65536)))", "src/switch_core_media.c", 6078, &__PRETTY_FUNCTION__);

<bb 29>:
  switch_core_media_check_dtmf_type (session_72(D));
  D.41572_145 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.41572_145 != 0)
    goto <bb 34>;
  else
    goto <bb 30>;

<bb 30>:
  D.41512_146 = session_72(D)->channel;
  val_147 = switch_channel_get_variable_dup (D.41512_146, "supress_cng", 1, -1);
  # DEBUG val => val_147
  if (val_147 != 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  D.41575_148 = switch_true (val_147);
  if (D.41575_148 != 0)
    goto <bb 34>;
  else
    goto <bb 32>;

<bb 32>:
  D.41512_149 = session_72(D)->channel;
  val_150 = switch_channel_get_variable_dup (D.41512_149, "suppress_cng", 1, -1);
  # DEBUG val => val_150
  if (val_150 != 0B)
    goto <bb 33>;
  else
    goto <bb 35>;

<bb 33>:
  D.41577_151 = switch_true (val_150);
  if (D.41577_151 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  use_cng_152 = 0;
  # DEBUG use_cng => use_cng_152
  D.41522_153 = smh_90->mparams;
  D.41522_153->cng_pt = 0;

<bb 35>:
  # use_cng_17 = PHI <use_cng_71(32), use_cng_71(33), use_cng_152(34)>
  # DEBUG use_cng => use_cng_17
  D.41578_154 = smh_90->payload_space;
  if (D.41578_154 == 0)
    goto <bb 36>;
  else
    goto <bb 62>;

<bb 36>:
  D.41512_155 = session_72(D)->channel;
  D.41581_156 = switch_channel_test_flag (D.41512_155, 106);
  if (D.41581_156 != 0)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  smh_90->payload_space = 102;
  goto <bb 39>;

<bb 38>:
  smh_90->payload_space = 98;

<bb 39>:
  i_157 = 0;
  # DEBUG i => i_157
  goto <bb 41>;

<bb 40>:
  D.41585_160 = smh_90->codecs[i_36];
  D.41586_161 = D.41585_160->ianacode;
  smh_90->ianacodes[i_36] = D.41586_161;
  i_162 = i_36 + 1;
  # DEBUG i => i_162

<bb 41>:
  # i_36 = PHI <i_157(39), i_162(40)>
  # DEBUG i => i_36
  D.41522_158 = smh_90->mparams;
  D.41587_159 = D.41522_158->num_codecs;
  if (D.41587_159 > i_36)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 42>:
  if (sdp_type_163(D) == 0)
    goto <bb 43>;
  else
    goto <bb 62>;

<bb 43>:
  orig_session = 0B;
  switch_core_session_perform_get_partner (session_72(D), &orig_session, "src/switch_core_media.c", &__func__, 6108);
  i_164 = 0;
  # DEBUG i => i_164
  goto <bb 59>;

<bb 44>:
  imp_167 = smh_90->codecs[i_37];
  # DEBUG imp => imp_167
  orig_pt = 0;
  orig_fmtp = 0B;
  D.41590_168 = smh_90->ianacodes[i_37];
  if (D.41590_168 > 64)
    goto <bb 45>;
  else
    goto <bb 58>;

<bb 45>:
  D.41522_169 = smh_90->mparams;
  D.41593_170 = D.41522_169->dtmf_type;
  if (D.41593_170 == 0)
    goto <bb 46>;
  else
    goto <bb 49>;

<bb 46>:
  D.41522_171 = smh_90->mparams;
  D.41596_172 = D.41522_171->te;
  if (D.41596_172 > 95)
    goto <bb 47>;
  else
    goto <bb 49>;

<bb 47>:
  D.41522_173 = smh_90->mparams;
  D.41596_174 = D.41522_173->te;
  D.41599_175 = (int) D.41596_174;
  D.41578_176 = smh_90->payload_space;
  if (D.41599_175 == D.41578_176)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  D.41578_177 = smh_90->payload_space;
  D.41602_178 = D.41578_177 + 1;
  smh_90->payload_space = D.41602_178;

<bb 49>:
  D.41603_179 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.41603_179 == 0)
    goto <bb 50>;
  else
    goto <bb 53>;

<bb 50>:
  D.41522_180 = smh_90->mparams;
  D.41606_181 = D.41522_180->cng_pt;
  D.41607_182 = D.41606_181 != 0;
  D.41608_183 = use_cng_17 != 0;
  D.41609_184 = D.41607_182 && D.41608_183;
  if (D.41609_184 != 0)
    goto <bb 51>;
  else
    goto <bb 53>;

<bb 51>:
  D.41522_185 = smh_90->mparams;
  D.41606_186 = D.41522_185->cng_pt;
  D.41612_187 = (int) D.41606_186;
  D.41578_188 = smh_90->payload_space;
  if (D.41612_187 == D.41578_188)
    goto <bb 52>;
  else
    goto <bb 53>;

<bb 52>:
  D.41578_189 = smh_90->payload_space;
  D.41602_190 = D.41578_189 + 1;
  smh_90->payload_space = D.41602_190;

<bb 53>:
  orig_session.25_191 = orig_session;
  if (orig_session.25_191 != 0B)
    goto <bb 54>;
  else
    goto <bb 57>;

<bb 54>:
  orig_session.25_192 = orig_session;
  D.41619_193 = imp_167->codec_type;
  D.41620_194 = D.41619_193 != 0;
  D.41621_195 = imp_167->iananame;
  D.41622_196 = switch_core_session_get_payload_code (orig_session.25_192, D.41620_194, D.41621_195, &orig_pt, 0B, &orig_fmtp);
  if (D.41622_196 == 0)
    goto <bb 55>;
  else
    goto <bb 57>;

<bb 55>:
  orig_pt.26_197 = orig_pt;
  smh_90->ianacodes[i_37] = orig_pt.26_197;
  orig_fmtp.27_198 = orig_fmtp;
  if (orig_fmtp.27_198 != 0B)
    goto <bb 56>;
  else
    goto <bb 58>;

<bb 56>:
  orig_fmtp.27_199 = orig_fmtp;
  D.41628_200 = switch_core_perform_session_strdup (session_72(D), orig_fmtp.27_199, "src/switch_core_media.c", &__func__, 6133);
  smh_90->fmtps[i_37] = D.41628_200;
  goto <bb 58>;

<bb 57>:
  D.41578_201 = smh_90->payload_space;
  D.41629_202 = (unsigned char) D.41578_201;
  smh_90->ianacodes[i_37] = D.41629_202;
  D.41602_203 = D.41578_201 + 1;
  smh_90->payload_space = D.41602_203;

<bb 58>:
  D.41619_204 = imp_167->codec_type;
  D.41620_205 = D.41619_204 != 0;
  D.41621_206 = imp_167->iananame;
  D.41590_207 = smh_90->ianacodes[i_37];
  D.41630_208 = (uint32_t) D.41590_207;
  D.41631_209 = imp_167->samples_per_second;
  D.41632_210 = imp_167->microseconds_per_packet;
  D.41633_211 = D.41632_210 / 1000;
  D.41634_212 = (uint32_t) D.41633_211;
  switch_core_media_add_payload_map (session_72(D), D.41620_205, D.41621_206, 0B, sdp_type_163(D), D.41630_208, D.41631_209, D.41634_212, 0);
  i_213 = i_37 + 1;
  # DEBUG i => i_213

<bb 59>:
  # i_37 = PHI <i_164(43), i_213(58)>
  # DEBUG i => i_37
  D.41522_165 = smh_90->mparams;
  D.41587_166 = D.41522_165->num_codecs;
  if (D.41587_166 > i_37)
    goto <bb 44>;
  else
    goto <bb 60>;

<bb 60>:
  orig_session.25_214 = orig_session;
  if (orig_session.25_214 != 0B)
    goto <bb 61>;
  else
    goto <bb 62>;

<bb 61>:
  orig_session.25_215 = orig_session;
  switch_core_session_rwunlock (orig_session.25_215);

<bb 62>:
  if (fmtp_out_var_82 != 0B)
    goto <bb 63>;
  else
    goto <bb 64>;

<bb 63>:
  fmtp_out_216 = fmtp_out_var_82;
  # DEBUG fmtp_out => fmtp_out_216

<bb 64>:
  # fmtp_out_21 = PHI <fmtp_out_141(62), fmtp_out_216(63)>
  # DEBUG fmtp_out => fmtp_out_21
  D.41512_217 = session_72(D)->channel;
  val_218 = switch_channel_get_variable_dup (D.41512_217, "verbose_sdp", 1, -1);
  # DEBUG val => val_218
  if (val_218 == 0B)
    goto <bb 66>;
  else
    goto <bb 65>;

<bb 65>:
  D.41642_219 = switch_true (val_218);
  if (D.41642_219 != 0)
    goto <bb 66>;
  else
    goto <bb 67>;

<bb 66>:
  D.41512_220 = session_72(D)->channel;
  switch_channel_set_flag_value (D.41512_220, 110, 1);

<bb 67>:
  D.41645_222 = force_221(D) == 0;
  D.41646_224 = ip_223(D) == 0B;
  D.41647_225 = D.41645_222 && D.41646_224;
  if (D.41647_225 != 0)
    goto <bb 68>;
  else
    goto <bb 73>;

<bb 68>:
  D.41650_227 = _zstr (sr_226(D));
  if (D.41650_227 != 0)
    goto <bb 69>;
  else
    goto <bb 73>;

<bb 69>:
  D.41512_228 = session_72(D)->channel;
  D.41653_229 = switch_channel_test_flag (D.41512_228, 15);
  if (D.41653_229 != 0)
    goto <bb 71>;
  else
    goto <bb 70>;

<bb 70>:
  D.41512_230 = session_72(D)->channel;
  D.41655_231 = switch_channel_test_flag (D.41512_230, 29);
  if (D.41655_231 != 0)
    goto <bb 71>;
  else
    goto <bb 73>;

<bb 71>:
  if (buf_144 != 0B)
    goto <bb 72>;
  else
    goto <bb 407>;

<bb 72>:
  free (buf_144);
  buf_232 = 0B;
  # DEBUG buf => buf_232
  goto <bb 407>;

<bb 73>:
  if (ip_223(D) == 0B)
    goto <bb 74>;
  else
    goto <bb 76>;

<bb 74>:
  ip_233 = a_engine_91->adv_sdp_ip;
  # DEBUG ip => ip_233
  if (ip_233 == 0B)
    goto <bb 75>;
  else
    goto <bb 76>;

<bb 75>:
  ip_234 = a_engine_91->proxy_sdp_ip;
  # DEBUG ip => ip_234

<bb 76>:
  # ip_1 = PHI <ip_223(D)(73), ip_233(74), ip_234(75)>
  # DEBUG ip => ip_1
  if (ip_1 == 0B)
    goto <bb 77>;
  else
    goto <bb 79>;

<bb 77>:
  D.41512_235 = session_72(D)->channel;
  D.41664_236 = switch_channel_get_name (D.41512_235);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 6182, 0B, 2, "%s NO IP!\n", D.41664_236);
  if (buf_144 != 0B)
    goto <bb 78>;
  else
    goto <bb 407>;

<bb 78>:
  free (buf_144);
  buf_237 = 0B;
  # DEBUG buf => buf_237
  goto <bb 407>;

<bb 79>:
  if (port_238(D) == 0)
    goto <bb 80>;
  else
    goto <bb 82>;

<bb 80>:
  port_239 = a_engine_91->adv_sdp_port;
  # DEBUG port => port_239
  if (port_239 == 0)
    goto <bb 81>;
  else
    goto <bb 82>;

<bb 81>:
  port_240 = a_engine_91->proxy_sdp_port;
  # DEBUG port => port_240

<bb 82>:
  # port_2 = PHI <port_238(D)(79), port_239(80), port_240(81)>
  # DEBUG port => port_2
  if (port_2 == 0)
    goto <bb 83>;
  else
    goto <bb 85>;

<bb 83>:
  D.41512_241 = session_72(D)->channel;
  D.41673_242 = switch_channel_get_name (D.41512_241);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 6194, 0B, 2, "%s NO PORT!\n", D.41673_242);
  if (buf_144 != 0B)
    goto <bb 84>;
  else
    goto <bb 407>;

<bb 84>:
  free (buf_144);
  buf_243 = 0B;
  # DEBUG buf => buf_243
  goto <bb 407>;

<bb 85>:
  D.41676_244 = _zstr (sr_226(D));
  if (D.41676_244 != 0)
    goto <bb 86>;
  else
    goto <bb 89>;

<bb 86>:
  D.41512_245 = session_72(D)->channel;
  var_val_246 = switch_channel_get_variable_dup (D.41512_245, "media_audio_mode", 1, -1);
  # DEBUG var_val => var_val_246
  if (var_val_246 != 0B)
    goto <bb 87>;
  else
    goto <bb 88>;

<bb 87>:
  sr_247 = var_val_246;
  # DEBUG sr => sr_247
  goto <bb 89>;

<bb 88>:
  sr_248 = "sendrecv";
  # DEBUG sr => sr_248

<bb 89>:
  # sr_3 = PHI <sr_226(D)(85), sr_247(87), sr_248(88)>
  # DEBUG sr => sr_3
  D.41682_249 = smh_90->owner_id;
  if (D.41682_249 == 0)
    goto <bb 90>;
  else
    goto <bb 91>;

<bb 90>:
  D.41685_250 = switch_epoch_time_now (0B);
  D.41686_251 = (unsigned int) D.41685_250;
  D.41687_252 = (unsigned int) port_2;
  D.41688_253 = D.41686_251 - D.41687_252;
  smh_90->owner_id = D.41688_253;

<bb 91>:
  D.41689_254 = smh_90->session_id;
  if (D.41689_254 == 0)
    goto <bb 92>;
  else
    goto <bb 93>;

<bb 92>:
  D.41682_255 = smh_90->owner_id;
  smh_90->session_id = D.41682_255;

<bb 93>:
  D.41512_256 = session_72(D)->channel;
  D.41692_257 = switch_channel_get_variable_dup (D.41512_256, "drop_dtmf", 0, -1);
  D.41693_258 = switch_true (D.41692_257);
  if (D.41693_258 != 0)
    goto <bb 94>;
  else
    goto <bb 95>;

<bb 94>:
  D.41512_259 = session_72(D)->channel;
  switch_channel_set_flag_value (D.41512_259, 102, 1);

<bb 95>:
  D.41689_260 = smh_90->session_id;
  D.41696_261 = D.41689_260 + 1;
  smh_90->session_id = D.41696_261;
  D.41522_262 = smh_90->mparams;
  D.41699_263 = D.41522_262->ndlb;
  D.41700_264 = D.41699_263 & 16;
  if (D.41700_264 != 0)
    goto <bb 98>;
  else
    goto <bb 96>;

<bb 96>:
  D.41512_265 = session_72(D)->channel;
  var_val_266 = switch_channel_get_variable_dup (D.41512_265, "ndlb_sendrecv_in_session", 1, -1);
  # DEBUG var_val => var_val_266
  if (var_val_266 != 0B)
    goto <bb 97>;
  else
    goto <bb 101>;

<bb 97>:
  D.41703_267 = switch_true (var_val_266);
  if (D.41703_267 != 0)
    goto <bb 98>;
  else
    goto <bb 101>;

<bb 98>:
  D.41704_268 = _zstr (sr_3);
  if (D.41704_268 == 0)
    goto <bb 99>;
  else
    goto <bb 100>;

<bb 99>:
  switch_snprintf (&srbuf, 128, "a=%s\n", sr_3);

<bb 100>:
  sr_269 = 0B;
  # DEBUG sr => sr_269

<bb 101>:
  # sr_4 = PHI <sr_3(96), sr_3(97), sr_269(100)>
  # DEBUG sr => sr_4
  D.41708_270 = __builtin_strchr (ip_1, 58);
  if (D.41708_270 != 0B)
    goto <bb 102>;
  else
    goto <bb 103>;

<bb 102>:
  iftmp.28_271 = "IP6";
  goto <bb 104>;

<bb 103>:
  iftmp.28_272 = "IP4";

<bb 104>:
  # iftmp.28_59 = PHI <iftmp.28_271(102), iftmp.28_272(103)>
  family_273 = iftmp.28_59;
  # DEBUG family => family_273
  D.41682_274 = smh_90->owner_id;
  D.41689_275 = smh_90->session_id;
  switch_snprintf (buf_144, 65536, "v=0\no=%s %010u %010u IN %s %s\ns=%s\nc=IN %s %s\nt=0 0\n%s", username_143, D.41682_274, D.41689_275, family_273, ip_1, username_143, family_273, ip_1, &srbuf);
  D.41534_276 = smh_90->session;
  D.41535_277 = D.41534_276->channel;
  D.41712_278 = switch_channel_test_flag (D.41535_277, 108);
  if (D.41712_278 != 0)
    goto <bb 105>;
  else
    goto <bb 106>;

<bb 105>:
  gen_ice (session_72(D), 0, ip_1, port_2);
  D.41715_279 = strlen (buf_144);
  D.41716_280 = buf_144 + D.41715_279;
  D.41717_281 = strlen (buf_144);
  D.41718_282 = 65536 - D.41717_281;
  D.41719_283 = smh_90->msid;
  switch_snprintf (D.41716_280, D.41718_282, "a=msid-semantic: WMS %s\n", D.41719_283);

<bb 106>:
  D.41720_284 = a_engine_91->codec_negotiated;
  if (D.41720_284 != 0)
    goto <bb 107>;
  else
    goto <bb 195>;

<bb 107>:
  D.41723_285 = strlen (buf_144);
  D.41724_286 = buf_144 + D.41723_285;
  D.41725_287 = strlen (buf_144);
  D.41726_288 = 65536 - D.41725_287;
  D.41727_289 = (int) port_2;
  D.41732_290 = a_engine_91->no_crypto;
  if (D.41732_290 == 0)
    goto <bb 108>;
  else
    goto <bb 111>;

<bb 108>:
  D.41512_291 = session_72(D)->channel;
  D.41734_292 = switch_channel_test_flag (D.41512_291, 109);
  if (D.41734_292 != 0)
    goto <bb 110>;
  else
    goto <bb 109>;

<bb 109>:
  D.41736_293 = a_engine_91->crypto_type;
  if (D.41736_293 != 9)
    goto <bb 110>;
  else
    goto <bb 111>;

<bb 110>:
  iftmp.29_294 = 1;
  goto <bb 112>;

<bb 111>:
  iftmp.29_295 = 0;

<bb 112>:
  # iftmp.29_60 = PHI <iftmp.29_294(110), iftmp.29_295(111)>
  D.41737_296 = get_media_profile_name (session_72(D), iftmp.29_60);
  switch_snprintf (D.41724_286, D.41726_288, "m=audio %d %s", D.41727_289, D.41737_296);
  D.41738_297 = strlen (buf_144);
  D.41739_298 = buf_144 + D.41738_297;
  D.41740_299 = strlen (buf_144);
  D.41741_300 = 65536 - D.41740_299;
  D.41566_301 = a_engine_91->cur_payload_map;
  D.41742_302 = D.41566_301->pt;
  D.41743_303 = (int) D.41742_302;
  switch_snprintf (D.41739_298, D.41741_300, " %d", D.41743_303);
  D.41744_304 = switch_media_handle_test_media_flag (smh_90, 15);
  if (D.41744_304 != 0)
    goto <bb 113>;
  else
    goto <bb 120>;

<bb 113>:
  D.41747_305 = smh_90->sdp_mutex;
  switch_mutex_lock (D.41747_305);
  pmap_306 = a_engine_91->cur_payload_map;
  # DEBUG pmap => pmap_306
  goto <bb 117>;

<bb 114>:
  D.41748_308 = pmap_34->pt;
  D.41566_309 = a_engine_91->cur_payload_map;
  D.41742_310 = D.41566_309->pt;
  if (D.41748_308 != D.41742_310)
    goto <bb 115>;
  else
    goto <bb 116>;

<bb 115>:
  D.41751_311 = strlen (buf_144);
  D.41752_312 = buf_144 + D.41751_311;
  D.41753_313 = strlen (buf_144);
  D.41754_314 = 65536 - D.41753_313;
  D.41748_315 = pmap_34->pt;
  D.41755_316 = (int) D.41748_315;
  switch_snprintf (D.41752_312, D.41754_314, " %d", D.41755_316);

<bb 116>:
  pmap_317 = pmap_34->next;
  # DEBUG pmap => pmap_317

<bb 117>:
  # pmap_34 = PHI <pmap_306(113), pmap_317(116)>
  # DEBUG pmap => pmap_34
  if (pmap_34 != 0B)
    goto <bb 118>;
  else
    goto <bb 119>;

<bb 118>:
  D.41757_307 = pmap_34->allocated;
  if (D.41757_307 != 0)
    goto <bb 114>;
  else
    goto <bb 119>;

<bb 119>:
  D.41747_318 = smh_90->sdp_mutex;
  switch_mutex_unlock (D.41747_318);

<bb 120>:
  D.41522_319 = smh_90->mparams;
  D.41593_320 = D.41522_319->dtmf_type;
  if (D.41593_320 == 0)
    goto <bb 123>;
  else
    goto <bb 121>;

<bb 121>:
  D.41761_321 = switch_media_handle_test_media_flag (smh_90, 8);
  if (D.41761_321 != 0)
    goto <bb 123>;
  else
    goto <bb 122>;

<bb 122>:
  D.41512_322 = session_72(D)->channel;
  D.41763_323 = switch_channel_test_flag (D.41512_322, 93);
  if (D.41763_323 != 0)
    goto <bb 123>;
  else
    goto <bb 125>;

<bb 123>:
  D.41522_324 = smh_90->mparams;
  D.41596_325 = D.41522_324->te;
  if (D.41596_325 > 95)
    goto <bb 124>;
  else
    goto <bb 125>;

<bb 124>:
  D.41766_326 = strlen (buf_144);
  D.41767_327 = buf_144 + D.41766_326;
  D.41768_328 = strlen (buf_144);
  D.41769_329 = 65536 - D.41768_328;
  D.41522_330 = smh_90->mparams;
  D.41596_331 = D.41522_330->te;
  D.41599_332 = (int) D.41596_331;
  switch_snprintf (D.41767_327, D.41769_329, " %d", D.41599_332);

<bb 125>:
  D.41770_333 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.41770_333 == 0)
    goto <bb 126>;
  else
    goto <bb 128>;

<bb 126>:
  D.41522_334 = smh_90->mparams;
  D.41606_335 = D.41522_334->cng_pt;
  D.41607_336 = D.41606_335 != 0;
  D.41608_337 = use_cng_17 != 0;
  D.41609_338 = D.41607_336 && D.41608_337;
  if (D.41609_338 != 0)
    goto <bb 127>;
  else
    goto <bb 128>;

<bb 127>:
  D.41775_339 = strlen (buf_144);
  D.41776_340 = buf_144 + D.41775_339;
  D.41777_341 = strlen (buf_144);
  D.41778_342 = 65536 - D.41777_341;
  D.41522_343 = smh_90->mparams;
  D.41606_344 = D.41522_343->cng_pt;
  D.41612_345 = (int) D.41606_344;
  switch_snprintf (D.41776_340, D.41778_342, " %d", D.41612_345);

<bb 128>:
  D.41779_346 = strlen (buf_144);
  D.41780_347 = buf_144 + D.41779_346;
  D.41781_348 = strlen (buf_144);
  D.41782_349 = 65536 - D.41781_348;
  switch_snprintf (D.41780_347, D.41782_349, "\n");
  D.41566_350 = a_engine_91->cur_payload_map;
  rate_351 = D.41566_350->adv_rm_rate;
  # DEBUG rate => rate_351
  D.41566_352 = a_engine_91->cur_payload_map;
  D.41783_353 = D.41566_352->adv_channels;
  if (D.41783_353 == 0)
    goto <bb 129>;
  else
    goto <bb 130>;

<bb 129>:
  D.41566_354 = a_engine_91->cur_payload_map;
  D.41566_355 = a_engine_91->cur_payload_map;
  D.41786_356 = D.41566_355->rm_encoding;
  D.41787_357 = get_channels (D.41786_356, 1);
  D.41566_355->adv_channels = D.41787_357;

<bb 130>:
  D.41566_358 = a_engine_91->cur_payload_map;
  D.41783_359 = D.41566_358->adv_channels;
  if (D.41783_359 > 1)
    goto <bb 131>;
  else
    goto <bb 132>;

<bb 131>:
  D.41790_360 = strlen (buf_144);
  D.41791_361 = buf_144 + D.41790_360;
  D.41792_362 = strlen (buf_144);
  D.41793_363 = 65536 - D.41792_362;
  D.41566_364 = a_engine_91->cur_payload_map;
  D.41794_365 = D.41566_364->agreed_pt;
  D.41795_366 = (int) D.41794_365;
  D.41566_367 = a_engine_91->cur_payload_map;
  D.41786_368 = D.41566_367->rm_encoding;
  D.41566_369 = a_engine_91->cur_payload_map;
  D.41783_370 = D.41566_369->adv_channels;
  switch_snprintf (D.41791_361, D.41793_363, "a=rtpmap:%d %s/%d/%d\n", D.41795_366, D.41786_368, rate_351, D.41783_370);
  goto <bb 133>;

<bb 132>:
  D.41797_371 = strlen (buf_144);
  D.41798_372 = buf_144 + D.41797_371;
  D.41799_373 = strlen (buf_144);
  D.41800_374 = 65536 - D.41799_373;
  D.41566_375 = a_engine_91->cur_payload_map;
  D.41794_376 = D.41566_375->agreed_pt;
  D.41795_377 = (int) D.41794_376;
  D.41566_378 = a_engine_91->cur_payload_map;
  D.41786_379 = D.41566_378->rm_encoding;
  switch_snprintf (D.41798_372, D.41800_374, "a=rtpmap:%d %s/%d\n", D.41795_377, D.41786_379, rate_351);

<bb 133>:
  if (fmtp_out_21 != 0B)
    goto <bb 134>;
  else
    goto <bb 135>;

<bb 134>:
  D.41803_380 = strlen (buf_144);
  D.41804_381 = buf_144 + D.41803_380;
  D.41805_382 = strlen (buf_144);
  D.41806_383 = 65536 - D.41805_382;
  D.41566_384 = a_engine_91->cur_payload_map;
  D.41794_385 = D.41566_384->agreed_pt;
  D.41795_386 = (int) D.41794_385;
  switch_snprintf (D.41804_381, D.41806_383, "a=fmtp:%d %s\n", D.41795_386, fmtp_out_21);

<bb 135>:
  D.41807_387 = switch_media_handle_test_media_flag (smh_90, 15);
  if (D.41807_387 != 0)
    goto <bb 136>;
  else
    goto <bb 143>;

<bb 136>:
  D.41747_388 = smh_90->sdp_mutex;
  switch_mutex_lock (D.41747_388);
  pmap_389 = a_engine_91->cur_payload_map;
  # DEBUG pmap => pmap_389
  goto <bb 140>;

<bb 137>:
  D.41748_391 = pmap_35->pt;
  D.41566_392 = a_engine_91->cur_payload_map;
  D.41742_393 = D.41566_392->pt;
  if (D.41748_391 != D.41742_393)
    goto <bb 138>;
  else
    goto <bb 139>;

<bb 138>:
  D.41812_394 = strlen (buf_144);
  D.41813_395 = buf_144 + D.41812_394;
  D.41814_396 = strlen (buf_144);
  D.41815_397 = 65536 - D.41814_396;
  D.41748_398 = pmap_35->pt;
  D.41755_399 = (int) D.41748_398;
  D.41816_400 = pmap_35->iananame;
  D.41817_401 = pmap_35->rate;
  switch_snprintf (D.41813_395, D.41815_397, "a=rtpmap:%d %s/%ld\n", D.41755_399, D.41816_400, D.41817_401);

<bb 139>:
  pmap_402 = pmap_35->next;
  # DEBUG pmap => pmap_402

<bb 140>:
  # pmap_35 = PHI <pmap_389(136), pmap_402(139)>
  # DEBUG pmap => pmap_35
  if (pmap_35 != 0B)
    goto <bb 141>;
  else
    goto <bb 142>;

<bb 141>:
  D.41757_390 = pmap_35->allocated;
  if (D.41757_390 != 0)
    goto <bb 137>;
  else
    goto <bb 142>;

<bb 142>:
  D.41747_403 = smh_90->sdp_mutex;
  switch_mutex_unlock (D.41747_403);

<bb 143>:
  D.41819_404 = a_engine_91->read_codec.implementation;
  D.41820_405 = D.41819_404 != 0B;
  D.41821_406 = ptime_69 == 0;
  D.41822_407 = D.41820_405 && D.41821_406;
  if (D.41822_407 != 0)
    goto <bb 144>;
  else
    goto <bb 145>;

<bb 144>:
  D.41819_408 = a_engine_91->read_codec.implementation;
  D.41825_409 = D.41819_408->microseconds_per_packet;
  ptime_410 = D.41825_409 / 1000;
  # DEBUG ptime => ptime_410

<bb 145>:
  # ptime_5 = PHI <ptime_69(143), ptime_410(144)>
  # DEBUG ptime => ptime_5
  D.41522_411 = smh_90->mparams;
  D.41593_412 = D.41522_411->dtmf_type;
  if (D.41593_412 == 0)
    goto <bb 148>;
  else
    goto <bb 146>;

<bb 146>:
  D.41829_413 = switch_media_handle_test_media_flag (smh_90, 8);
  if (D.41829_413 != 0)
    goto <bb 148>;
  else
    goto <bb 147>;

<bb 147>:
  D.41512_414 = session_72(D)->channel;
  D.41831_415 = switch_channel_test_flag (D.41512_414, 93);
  if (D.41831_415 != 0)
    goto <bb 148>;
  else
    goto <bb 152>;

<bb 148>:
  D.41522_416 = smh_90->mparams;
  D.41596_417 = D.41522_416->te;
  if (D.41596_417 > 95)
    goto <bb 149>;
  else
    goto <bb 152>;

<bb 149>:
  D.41512_418 = session_72(D)->channel;
  D.41834_419 = switch_channel_test_flag (D.41512_418, 106);
  if (D.41834_419 != 0)
    goto <bb 150>;
  else
    goto <bb 151>;

<bb 150>:
  D.41837_420 = strlen (buf_144);
  D.41838_421 = buf_144 + D.41837_420;
  D.41839_422 = strlen (buf_144);
  D.41840_423 = 65536 - D.41839_422;
  D.41522_424 = smh_90->mparams;
  D.41596_425 = D.41522_424->te;
  D.41599_426 = (int) D.41596_425;
  switch_snprintf (D.41838_421, D.41840_423, "a=rtpmap:%d telephone-event/8000\n", D.41599_426);
  goto <bb 152>;

<bb 151>:
  D.41842_427 = strlen (buf_144);
  D.41843_428 = buf_144 + D.41842_427;
  D.41844_429 = strlen (buf_144);
  D.41845_430 = 65536 - D.41844_429;
  D.41522_431 = smh_90->mparams;
  D.41596_432 = D.41522_431->te;
  D.41599_433 = (int) D.41596_432;
  D.41522_434 = smh_90->mparams;
  D.41596_435 = D.41522_434->te;
  D.41599_436 = (int) D.41596_435;
  switch_snprintf (D.41843_428, D.41845_430, "a=rtpmap:%d telephone-event/8000\na=fmtp:%d 0-16\n", D.41599_436, D.41599_436);

<bb 152>:
  D.41846_437 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.41846_437 != 0)
    goto <bb 153>;
  else
    goto <bb 154>;

<bb 153>:
  D.41849_438 = strlen (buf_144);
  D.41850_439 = buf_144 + D.41849_438;
  D.41851_440 = strlen (buf_144);
  D.41852_441 = 65536 - D.41851_440;
  switch_snprintf (D.41850_439, D.41852_441, "a=silenceSupp:off - - - -\n");
  goto <bb 157>;

<bb 154>:
  D.41522_442 = smh_90->mparams;
  D.41606_443 = D.41522_442->cng_pt;
  D.41607_444 = D.41606_443 != 0;
  D.41608_445 = use_cng_17 != 0;
  D.41609_446 = D.41607_444 && D.41608_445;
  if (D.41609_446 != 0)
    goto <bb 155>;
  else
    goto <bb 157>;

<bb 155>:
  D.41856_447 = strlen (buf_144);
  D.41857_448 = buf_144 + D.41856_447;
  D.41858_449 = strlen (buf_144);
  D.41859_450 = 65536 - D.41858_449;
  D.41522_451 = smh_90->mparams;
  D.41606_452 = D.41522_451->cng_pt;
  D.41612_453 = (int) D.41606_452;
  switch_snprintf (D.41857_448, D.41859_450, "a=rtpmap:%d CN/8000\n", D.41612_453);
  D.41720_454 = a_engine_91->codec_negotiated;
  if (D.41720_454 == 0)
    goto <bb 156>;
  else
    goto <bb 157>;

<bb 156>:
  D.41522_455 = smh_90->mparams;
  D.41522_455->cng_pt = 0;

<bb 157>:
  if (append_audio_78 != 0B)
    goto <bb 158>;
  else
    goto <bb 165>;

<bb 158>:
  D.41864_456 = strlen (buf_144);
  D.41865_457 = buf_144 + D.41864_456;
  D.41866_458 = strlen (buf_144);
  D.41867_459 = 65536 - D.41866_458;
  D.41870_460 = *append_audio_78;
  if (D.41870_460 != 0)
    goto <bb 159>;
  else
    goto <bb 160>;

<bb 159>:
  D.41873_461 = strlen (append_audio_78);
  D.41874_462 = D.41873_461 + -1;
  iftmp.31_463 = append_audio_78 + D.41874_462;
  goto <bb 161>;

<bb 160>:
  iftmp.31_464 = append_audio_78;

<bb 161>:
  # iftmp.31_62 = PHI <iftmp.31_463(159), iftmp.31_464(160)>
  D.41876_465 = *iftmp.31_62;
  if (D.41876_465 == 10)
    goto <bb 162>;
  else
    goto <bb 163>;

<bb 162>:
  iftmp.30_466 = "";
  goto <bb 164>;

<bb 163>:
  iftmp.30_467 = "\n";

<bb 164>:
  # iftmp.30_61 = PHI <iftmp.30_466(162), iftmp.30_467(163)>
  switch_snprintf (D.41865_457, D.41867_459, "%s%s", append_audio_78, iftmp.30_61);

<bb 165>:
  if (ptime_5 != 0)
    goto <bb 166>;
  else
    goto <bb 167>;

<bb 166>:
  D.41882_468 = strlen (buf_144);
  D.41883_469 = buf_144 + D.41882_468;
  D.41884_470 = strlen (buf_144);
  D.41885_471 = 65536 - D.41884_470;
  switch_snprintf (D.41883_469, D.41885_471, "a=ptime:%d\n", ptime_5);

<bb 167>:
  if (local_sdp_audio_zrtp_hash_83 != 0B)
    goto <bb 168>;
  else
    goto <bb 169>;

<bb 168>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 6350, session_72(D), 7, "Adding audio a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_83);
  D.41888_472 = strlen (buf_144);
  D.41889_473 = buf_144 + D.41888_472;
  D.41890_474 = strlen (buf_144);
  D.41891_475 = 65536 - D.41890_474;
  switch_snprintf (D.41889_473, D.41891_475, "a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_83);

<bb 169>:
  D.41892_476 = _zstr (sr_4);
  if (D.41892_476 == 0)
    goto <bb 170>;
  else
    goto <bb 171>;

<bb 170>:
  D.41895_477 = strlen (buf_144);
  D.41896_478 = buf_144 + D.41895_477;
  D.41897_479 = strlen (buf_144);
  D.41898_480 = 65536 - D.41897_479;
  switch_snprintf (D.41896_478, D.41898_480, "a=%s\n", sr_4);

<bb 171>:
  D.41899_481 = a_engine_91->local_dtls_fingerprint.type;
  D.41900_482 = _zstr (D.41899_481);
  if (D.41900_482 == 0)
    goto <bb 172>;
  else
    goto <bb 173>;

<bb 172>:
  D.41903_483 = strlen (buf_144);
  D.41904_484 = buf_144 + D.41903_483;
  D.41905_485 = strlen (buf_144);
  D.41906_486 = 65536 - D.41905_485;
  D.41899_487 = a_engine_91->local_dtls_fingerprint.type;
  D.41907_488 = &a_engine_91->local_dtls_fingerprint.str;
  switch_snprintf (D.41904_484, D.41906_486, "a=fingerprint:%s %s\n", D.41899_487, D.41907_488);

<bb 173>:
  D.41522_489 = smh_90->mparams;
  D.41523_490 = D.41522_489->rtcp_audio_interval_msec;
  if (D.41523_490 != 0B)
    goto <bb 174>;
  else
    goto <bb 177>;

<bb 174>:
  D.41910_491 = a_engine_91->rtcp_mux;
  if (D.41910_491 > 0)
    goto <bb 175>;
  else
    goto <bb 176>;

<bb 175>:
  D.41913_492 = strlen (buf_144);
  D.41914_493 = buf_144 + D.41913_492;
  D.41915_494 = strlen (buf_144);
  D.41916_495 = 65536 - D.41915_494;
  switch_snprintf (D.41914_493, D.41916_495, "a=rtcp-mux\n");
  D.41917_496 = strlen (buf_144);
  D.41918_497 = buf_144 + D.41917_496;
  D.41919_498 = strlen (buf_144);
  D.41920_499 = 65536 - D.41919_498;
  D.41727_500 = (int) port_2;
  switch_snprintf (D.41918_497, D.41920_499, "a=rtcp:%d IN %s %s\n", D.41727_500, family_273, ip_1);
  goto <bb 177>;

<bb 176>:
  D.41922_501 = strlen (buf_144);
  D.41923_502 = buf_144 + D.41922_501;
  D.41924_503 = strlen (buf_144);
  D.41925_504 = 65536 - D.41924_503;
  D.41727_505 = (int) port_2;
  D.41926_506 = D.41727_505 + 1;
  switch_snprintf (D.41923_502, D.41925_504, "a=rtcp:%d IN %s %s\n", D.41926_506, family_273, ip_1);

<bb 177>:
  D.41927_507 = a_engine_91->ice_out.cands[0][0].ready;
  if (D.41927_507 != 0)
    goto <bb 178>;
  else
    goto <bb 190>;

<bb 178>:
  tmp1 = "";
  tmp2 = "";
  c1_508 = 659136;
  # DEBUG c1 => c1_508
  c2_509 = 659134;
  # DEBUG c2 => c2_509
  c3_510 = 659126;
  # DEBUG c3 => c3_510
  c4_511 = 659124;
  # DEBUG c4 => c4_511
  tmp1[10] = 0;
  tmp2[10] = 0;
  switch_stun_random_string (&tmp1, 10, "0123456789");
  switch_stun_random_string (&tmp2, 10, "0123456789");
  ice_out_512 = &a_engine_91->ice_out;
  # DEBUG ice_out => ice_out_512
  D.41930_513 = strlen (buf_144);
  D.41931_514 = buf_144 + D.41930_513;
  D.41932_515 = strlen (buf_144);
  D.41933_516 = 65536 - D.41932_515;
  D.41934_517 = a_engine_91->ssrc;
  D.41935_518 = smh_90->cname;
  switch_snprintf (D.41931_514, D.41933_516, "a=ssrc:%u cname:%s\n", D.41934_517, D.41935_518);
  D.41936_519 = strlen (buf_144);
  D.41937_520 = buf_144 + D.41936_519;
  D.41938_521 = strlen (buf_144);
  D.41939_522 = 65536 - D.41938_521;
  D.41934_523 = a_engine_91->ssrc;
  D.41719_524 = smh_90->msid;
  switch_snprintf (D.41937_520, D.41939_522, "a=ssrc:%u msid:%s a0\n", D.41934_523, D.41719_524);
  D.41940_525 = strlen (buf_144);
  D.41941_526 = buf_144 + D.41940_525;
  D.41942_527 = strlen (buf_144);
  D.41943_528 = 65536 - D.41942_527;
  D.41934_529 = a_engine_91->ssrc;
  D.41719_530 = smh_90->msid;
  switch_snprintf (D.41941_526, D.41943_528, "a=ssrc:%u mslabel:%s\n", D.41934_529, D.41719_530);
  D.41944_531 = strlen (buf_144);
  D.41945_532 = buf_144 + D.41944_531;
  D.41946_533 = strlen (buf_144);
  D.41947_534 = 65536 - D.41946_533;
  D.41934_535 = a_engine_91->ssrc;
  D.41719_536 = smh_90->msid;
  switch_snprintf (D.41945_532, D.41947_534, "a=ssrc:%u label:%sa0\n", D.41934_535, D.41719_536);
  D.41948_537 = strlen (buf_144);
  D.41949_538 = buf_144 + D.41948_537;
  D.41950_539 = strlen (buf_144);
  D.41951_540 = 65536 - D.41950_539;
  D.41952_541 = ice_out_512->ufrag;
  switch_snprintf (D.41949_538, D.41951_540, "a=ice-ufrag:%s\n", D.41952_541);
  D.41953_542 = strlen (buf_144);
  D.41954_543 = buf_144 + D.41953_542;
  D.41955_544 = strlen (buf_144);
  D.41956_545 = 65536 - D.41955_544;
  D.41957_546 = ice_out_512->pwd;
  switch_snprintf (D.41954_543, D.41956_545, "a=ice-pwd:%s\n", D.41957_546);
  D.41958_547 = strlen (buf_144);
  D.41959_548 = buf_144 + D.41958_547;
  D.41960_549 = strlen (buf_144);
  D.41961_550 = 65536 - D.41960_549;
  D.41962_551 = ice_out_512->cands[0][0].transport;
  D.41963_552 = ice_out_512->cands[0][0].con_addr;
  D.41964_553 = ice_out_512->cands[0][0].con_port;
  D.41965_554 = (int) D.41964_553;
  switch_snprintf (D.41959_548, D.41961_550, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_551, c1_508, D.41963_552, D.41965_554);
  D.41966_555 = a_engine_91->local_sdp_ip;
  D.41967_556 = _zstr (D.41966_555);
  if (D.41967_556 == 0)
    goto <bb 179>;
  else
    goto <bb 183>;

<bb 179>:
  D.41963_557 = ice_out_512->cands[0][0].con_addr;
  D.41970_558 = _zstr (D.41963_557);
  if (D.41970_558 == 0)
    goto <bb 180>;
  else
    goto <bb 183>;

<bb 180>:
  D.41966_559 = a_engine_91->local_sdp_ip;
  D.41963_560 = ice_out_512->cands[0][0].con_addr;
  D.39598_561 = __builtin_strcmp (D.41966_559, D.41963_560);
  if (D.39598_561 != 0)
    goto <bb 181>;
  else
    goto <bb 183>;

<bb 181>:
  D.41975_562 = a_engine_91->local_sdp_port;
  D.41964_563 = ice_out_512->cands[0][0].con_port;
  if (D.41975_562 != D.41964_563)
    goto <bb 182>;
  else
    goto <bb 183>;

<bb 182>:
  D.41978_564 = strlen (buf_144);
  D.41979_565 = buf_144 + D.41978_564;
  D.41980_566 = strlen (buf_144);
  D.41981_567 = 65536 - D.41980_566;
  D.41962_568 = ice_out_512->cands[0][0].transport;
  D.41963_569 = ice_out_512->cands[0][0].con_addr;
  D.41964_570 = ice_out_512->cands[0][0].con_port;
  D.41965_571 = (int) D.41964_570;
  D.41966_572 = a_engine_91->local_sdp_ip;
  D.41975_573 = a_engine_91->local_sdp_port;
  D.41982_574 = (int) D.41975_573;
  switch_snprintf (D.41979_565, D.41981_567, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_568, c3_510, D.41963_569, D.41965_571, D.41966_572, D.41982_574);

<bb 183>:
  D.41910_575 = a_engine_91->rtcp_mux;
  D.41985_576 = D.41910_575 <= 0;
  D.41986_577 = is_outbound_89 != 0;
  D.41987_578 = D.41985_576 || D.41986_577;
  if (D.41987_578 != 0)
    goto <bb 185>;
  else
    goto <bb 184>;

<bb 184>:
  D.41512_579 = session_72(D)->channel;
  D.41989_580 = switch_channel_test_flag (D.41512_579, 84);
  if (D.41989_580 != 0)
    goto <bb 185>;
  else
    goto <bb 190>;

<bb 185>:
  D.41990_581 = strlen (buf_144);
  D.41991_582 = buf_144 + D.41990_581;
  D.41992_583 = strlen (buf_144);
  D.41993_584 = 65536 - D.41992_583;
  D.41962_585 = ice_out_512->cands[0][0].transport;
  D.41963_586 = ice_out_512->cands[0][0].con_addr;
  D.41964_587 = ice_out_512->cands[0][0].con_port;
  D.41965_588 = (int) D.41964_587;
  D.41910_589 = a_engine_91->rtcp_mux;
  D.41994_590 = D.41910_589 <= 0;
  D.41995_591 = D.41965_588 + D.41994_590;
  switch_snprintf (D.41991_582, D.41993_584, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_585, c2_509, D.41963_586, D.41995_591);
  D.41966_592 = a_engine_91->local_sdp_ip;
  D.41996_593 = _zstr (D.41966_592);
  if (D.41996_593 == 0)
    goto <bb 186>;
  else
    goto <bb 190>;

<bb 186>:
  D.41963_594 = ice_out_512->cands[0][0].con_addr;
  D.41999_595 = _zstr (D.41963_594);
  if (D.41999_595 == 0)
    goto <bb 187>;
  else
    goto <bb 190>;

<bb 187>:
  D.41966_596 = a_engine_91->local_sdp_ip;
  D.41963_597 = ice_out_512->cands[0][0].con_addr;
  D.39607_598 = __builtin_strcmp (D.41966_596, D.41963_597);
  if (D.39607_598 != 0)
    goto <bb 188>;
  else
    goto <bb 190>;

<bb 188>:
  D.41975_599 = a_engine_91->local_sdp_port;
  D.41964_600 = ice_out_512->cands[0][0].con_port;
  if (D.41975_599 != D.41964_600)
    goto <bb 189>;
  else
    goto <bb 190>;

<bb 189>:
  D.42006_601 = strlen (buf_144);
  D.42007_602 = buf_144 + D.42006_601;
  D.42008_603 = strlen (buf_144);
  D.42009_604 = 65536 - D.42008_603;
  D.41962_605 = ice_out_512->cands[0][0].transport;
  D.41963_606 = ice_out_512->cands[0][0].con_addr;
  D.41964_607 = ice_out_512->cands[0][0].con_port;
  D.41965_608 = (int) D.41964_607;
  D.41910_609 = a_engine_91->rtcp_mux;
  D.41994_610 = D.41910_609 <= 0;
  D.41995_611 = D.41965_608 + D.41994_610;
  D.41966_612 = a_engine_91->local_sdp_ip;
  D.41975_613 = a_engine_91->local_sdp_port;
  D.41982_614 = (int) D.41975_613;
  D.41910_615 = a_engine_91->rtcp_mux;
  D.41994_616 = D.41910_615 <= 0;
  D.42010_617 = D.41982_614 + D.41994_616;
  switch_snprintf (D.42007_602, D.42009_604, "a=candidate:%s 2 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_605, c4_511, D.41963_606, D.41995_611, D.41966_612, D.42010_617);

<bb 190>:
  D.41736_618 = a_engine_91->crypto_type;
  if (D.41736_618 != 9)
    goto <bb 191>;
  else
    goto <bb 233>;

<bb 191>:
  D.41512_619 = session_72(D)->channel;
  D.42013_620 = switch_channel_test_flag (D.41512_619, 109);
  if (D.42013_620 == 0)
    goto <bb 192>;
  else
    goto <bb 233>;

<bb 192>:
  D.41736_621 = a_engine_91->crypto_type;
  D.42016_622 = a_engine_91->ssec[D.41736_621].local_crypto_key;
  D.42017_623 = _zstr (D.42016_622);
  if (D.42017_623 == 0)
    goto <bb 193>;
  else
    goto <bb 233>;

<bb 193>:
  D.41512_624 = session_72(D)->channel;
  D.42020_625 = switch_channel_test_flag (D.41512_624, 92);
  if (D.42020_625 != 0)
    goto <bb 194>;
  else
    goto <bb 233>;

<bb 194>:
  D.42023_626 = strlen (buf_144);
  D.42024_627 = buf_144 + D.42023_626;
  D.42025_628 = strlen (buf_144);
  D.42026_629 = 65536 - D.42025_628;
  D.41736_630 = a_engine_91->crypto_type;
  D.42016_631 = a_engine_91->ssec[D.41736_630].local_crypto_key;
  switch_snprintf (D.42024_627, D.42026_629, "a=crypto:%s\n", D.42016_631);
  goto <bb 233>;

<bb 195>:
  D.41522_632 = smh_90->mparams;
  D.41587_633 = D.41522_632->num_codecs;
  if (D.41587_633 != 0)
    goto <bb 196>;
  else
    goto <bb 233>;

<bb 196>:
  cur_ptime_634 = 0;
  # DEBUG cur_ptime => cur_ptime_634
  this_ptime_635 = 0;
  # DEBUG this_ptime => this_ptime_635
  cng_type_636 = 0;
  # DEBUG cng_type => cng_type_636
  D.42030_637 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.42030_637 == 0)
    goto <bb 197>;
  else
    goto <bb 200>;

<bb 197>:
  D.41522_638 = smh_90->mparams;
  D.41606_639 = D.41522_638->cng_pt;
  D.41607_640 = D.41606_639 != 0;
  D.41608_641 = use_cng_17 != 0;
  D.41609_642 = D.41607_640 && D.41608_641;
  if (D.41609_642 != 0)
    goto <bb 198>;
  else
    goto <bb 200>;

<bb 198>:
  D.41522_643 = smh_90->mparams;
  D.41606_644 = D.41522_643->cng_pt;
  cng_type_645 = (int) D.41606_644;
  # DEBUG cng_type => cng_type_645
  D.41720_646 = a_engine_91->codec_negotiated;
  if (D.41720_646 == 0)
    goto <bb 199>;
  else
    goto <bb 200>;

<bb 199>:
  D.41522_647 = smh_90->mparams;
  D.41522_647->cng_pt = 0;

<bb 200>:
  # cng_type_42 = PHI <cng_type_636(196), cng_type_636(197), cng_type_645(198), cng_type_645(199)>
  # DEBUG cng_type => cng_type_42
  D.41512_648 = session_72(D)->channel;
  mult_649 = switch_channel_get_variable_dup (D.41512_648, "sdp_m_per_ptime", 1, -1);
  # DEBUG mult => mult_649
  D.41512_650 = session_72(D)->channel;
  D.42039_651 = switch_channel_test_flag (D.41512_650, 106);
  if (D.42039_651 != 0)
    goto <bb 203>;
  else
    goto <bb 201>;

<bb 201>:
  if (mult_649 != 0B)
    goto <bb 202>;
  else
    goto <bb 214>;

<bb 202>:
  D.42042_652 = switch_false (mult_649);
  if (D.42042_652 != 0)
    goto <bb 203>;
  else
    goto <bb 214>;

<bb 203>:
  bp_689 = buf_144;
  # DEBUG bp => bp_689
  D.41512_690 = session_72(D)->channel;
  D.42046_691 = switch_channel_test_flag (D.41512_690, 106);
  if (D.42046_691 == 0)
    goto <bb 204>;
  else
    goto <bb 206>;

<bb 204>:
  D.41512_692 = session_72(D)->channel;
  D.42048_693 = switch_channel_test_flag (D.41512_692, 109);
  if (D.42048_693 == 0)
    goto <bb 205>;
  else
    goto <bb 206>;

<bb 205>:
  iftmp.32_694 = 1;
  goto <bb 207>;

<bb 206>:
  iftmp.32_695 = 0;

<bb 207>:
  # iftmp.32_63 = PHI <iftmp.32_694(205), iftmp.32_695(206)>
  both_696 = iftmp.32_63;
  # DEBUG both => both_696
  D.41732_697 = a_engine_91->no_crypto;
  if (D.41732_697 == 0)
    goto <bb 208>;
  else
    goto <bb 209>;

<bb 208>:
  D.41512_698 = session_72(D)->channel;
  D.42054_699 = switch_channel_test_flag (D.41512_698, 92);
  if (D.42054_699 != 0)
    goto <bb 210>;
  else
    goto <bb 209>;

<bb 209>:
  D.41512_700 = session_72(D)->channel;
  D.42055_701 = switch_channel_test_flag (D.41512_700, 109);
  if (D.42055_701 != 0)
    goto <bb 210>;
  else
    goto <bb 212>;

<bb 210>:
  map.33_702 = map;
  generate_m.isra.4 (session_72(D), buf_144, 65536, port_2, family_273, ip_1, 0, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_702, 1);
  D.42057_703 = strlen (buf_144);
  bp_704 = buf_144 + D.42057_703;
  # DEBUG bp => bp_704
  D.42058_705 = smh_90->crypto_mode;
  if (D.42058_705 == 1)
    goto <bb 211>;
  else
    goto <bb 212>;

<bb 211>:
  both_706 = 0;
  # DEBUG both => both_706

<bb 212>:
  # bp_43 = PHI <bp_689(209), bp_704(210), bp_704(211)>
  # both_44 = PHI <both_696(209), both_696(210), both_706(211)>
  # DEBUG both => both_44
  # DEBUG bp => bp_43
  if (both_44 != 0)
    goto <bb 213>;
  else
    goto <bb 233>;

<bb 213>:
  D.42063_707 = strlen (buf_144);
  D.42064_708 = 65536 - D.42063_707;
  map.33_709 = map;
  generate_m.isra.4 (session_72(D), bp_43, D.42064_708, port_2, family_273, ip_1, 0, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_709, 0);
  goto <bb 233>;

<bb 214>:
  i_653 = 0;
  # DEBUG i => i_653
  goto <bb 232>;

<bb 215>:
  imp_656 = smh_90->codecs[i_38];
  # DEBUG imp => imp_656
  D.42065_657 = imp_656->codec_type;
  if (D.42065_657 != 0)
    goto <bb 216>;
  else
    goto <bb 217>;

<bb 216>:
  // predicted unlikely by continue predictor.
  goto <bb 231>;

<bb 217>:
  D.42068_658 = imp_656->microseconds_per_packet;
  this_ptime_659 = D.42068_658 / 1000;
  # DEBUG this_ptime => this_ptime_659
  D.42071_660 = imp_656->iananame;
  D.42072_661 = strcasecmp (D.42071_660, "ilbc");
  if (D.42072_661 == 0)
    goto <bb 219>;
  else
    goto <bb 218>;

<bb 218>:
  D.42071_662 = imp_656->iananame;
  D.42074_663 = strcasecmp (D.42071_662, "isac");
  if (D.42074_663 == 0)
    goto <bb 219>;
  else
    goto <bb 220>;

<bb 219>:
  this_ptime_664 = 20;
  # DEBUG this_ptime => this_ptime_664

<bb 220>:
  # this_ptime_41 = PHI <this_ptime_659(218), this_ptime_664(219)>
  # DEBUG this_ptime => this_ptime_41
  if (cur_ptime_40 != this_ptime_41)
    goto <bb 221>;
  else
    goto <bb 231>;

<bb 221>:
  bp_665 = buf_144;
  # DEBUG bp => bp_665
  both_666 = 1;
  # DEBUG both => both_666
  cur_ptime_667 = this_ptime_41;
  # DEBUG cur_ptime => cur_ptime_667
  D.41732_668 = a_engine_91->no_crypto;
  if (D.41732_668 == 0)
    goto <bb 222>;
  else
    goto <bb 223>;

<bb 222>:
  D.41512_669 = session_72(D)->channel;
  D.42081_670 = switch_channel_test_flag (D.41512_669, 92);
  if (D.42081_670 != 0)
    goto <bb 224>;
  else
    goto <bb 223>;

<bb 223>:
  D.41512_671 = session_72(D)->channel;
  D.42082_672 = switch_channel_test_flag (D.41512_671, 109);
  if (D.42082_672 != 0)
    goto <bb 224>;
  else
    goto <bb 226>;

<bb 224>:
  D.42083_673 = strlen (buf_144);
  D.42084_674 = 65536 - D.42083_673;
  map.33_675 = map;
  generate_m.isra.4 (session_72(D), bp_665, D.42084_674, port_2, family_273, ip_1, cur_ptime_667, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_675, 1);
  D.42085_676 = strlen (buf_144);
  bp_677 = buf_144 + D.42085_676;
  # DEBUG bp => bp_677
  D.42058_678 = smh_90->crypto_mode;
  if (D.42058_678 == 1)
    goto <bb 225>;
  else
    goto <bb 226>;

<bb 225>:
  both_679 = 0;
  # DEBUG both => both_679

<bb 226>:
  # bp_45 = PHI <bp_665(223), bp_677(224), bp_677(225)>
  # both_46 = PHI <both_666(223), both_666(224), both_679(225)>
  # DEBUG both => both_46
  # DEBUG bp => bp_45
  D.41512_680 = session_72(D)->channel;
  D.42090_681 = switch_channel_test_flag (D.41512_680, 106);
  if (D.42090_681 != 0)
    goto <bb 228>;
  else
    goto <bb 227>;

<bb 227>:
  D.41512_682 = session_72(D)->channel;
  D.42092_683 = switch_channel_test_flag (D.41512_682, 109);
  if (D.42092_683 != 0)
    goto <bb 228>;
  else
    goto <bb 229>;

<bb 228>:
  both_684 = 0;
  # DEBUG both => both_684

<bb 229>:
  # both_47 = PHI <both_46(227), both_684(228)>
  # DEBUG both => both_47
  if (both_47 != 0)
    goto <bb 230>;
  else
    goto <bb 231>;

<bb 230>:
  D.42095_685 = strlen (buf_144);
  D.42096_686 = 65536 - D.42095_685;
  map.33_687 = map;
  generate_m.isra.4 (session_72(D), bp_45, D.42096_686, port_2, family_273, ip_1, cur_ptime_667, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_687, 0);

<bb 231>:
  # cur_ptime_39 = PHI <cur_ptime_40(216), cur_ptime_40(220), cur_ptime_667(229), cur_ptime_667(230)>
  # DEBUG cur_ptime => cur_ptime_39
  i_688 = i_38 + 1;
  # DEBUG i => i_688

<bb 232>:
  # i_38 = PHI <i_653(214), i_688(231)>
  # cur_ptime_40 = PHI <cur_ptime_634(214), cur_ptime_39(231)>
  # DEBUG cur_ptime => cur_ptime_40
  # DEBUG i => i_38
  D.41522_654 = smh_90->mparams;
  D.41587_655 = D.41522_654->num_codecs;
  if (D.41587_655 > i_38)
    goto <bb 215>;
  else
    goto <bb 233>;

<bb 233>:
  # ptime_6 = PHI <ptime_5(191), ptime_69(195), ptime_69(213), ptime_69(232), ptime_5(190), ptime_5(194), ptime_5(193), ptime_5(192), ptime_69(212)>
  # rate_11 = PHI <rate_351(191), rate_70(195), rate_70(213), rate_70(232), rate_351(190), rate_351(194), rate_351(193), rate_351(192), rate_70(212)>
  # DEBUG rate => rate_11
  # DEBUG ptime => ptime_6
  D.41512_710 = session_72(D)->channel;
  D.42097_711 = switch_channel_test_flag (D.41512_710, 98);
  if (D.42097_711 != 0)
    goto <bb 234>;
  else
    goto <bb 401>;

<bb 234>:
  D.41512_712 = session_72(D)->channel;
  D.42100_713 = switch_channel_direction (D.41512_712);
  if (D.42100_713 == 0)
    goto <bb 235>;
  else
    goto <bb 237>;

<bb 235>:
  D.41534_714 = smh_90->session;
  D.41535_715 = D.41534_714->channel;
  D.42103_716 = switch_channel_test_flag (D.41535_715, 109);
  if (D.42103_716 != 0)
    goto <bb 236>;
  else
    goto <bb 237>;

<bb 236>:
  v_engine_92->no_crypto = 1;

<bb 237>:
  D.42106_717 = v_engine_92->local_sdp_port;
  if (D.42106_717 == 0)
    goto <bb 238>;
  else
    goto <bb 239>;

<bb 238>:
  switch_core_media_choose_port (session_72(D), 1, 0);

<bb 239>:
  D.41512_718 = session_72(D)->channel;
  D.42109_719 = switch_channel_test_flag (D.41512_718, 106);
  if (D.42109_719 != 0)
    goto <bb 240>;
  else
    goto <bb 241>;

<bb 240>:
  switch_media_handle_set_media_flag (smh_90, 16);

<bb 241>:
  D.42112_720 = v_engine_92->adv_sdp_port;
  v_port_721 = (uint32_t) D.42112_720;
  # DEBUG v_port => v_port_721
  if (v_port_721 != 0)
    goto <bb 242>;
  else
    goto <bb 401>;

<bb 242>:
  loops_722 = 0;
  # DEBUG loops => loops_722
  goto <bb 400>;

<bb 243>:
  D.41534_723 = smh_90->session;
  D.41535_724 = D.41534_723->channel;
  D.42115_725 = switch_channel_test_flag (D.41535_724, 108);
  if (D.42115_725 != 0)
    goto <bb 244>;
  else
    goto <bb 245>;

<bb 244>:
  D.42118_726 = (short unsigned int) v_port_721;
  gen_ice (session_72(D), 1, ip_1, D.42118_726);

<bb 245>:
  D.42119_727 = strlen (buf_144);
  D.42120_728 = buf_144 + D.42119_727;
  D.42121_729 = strlen (buf_144);
  D.42122_730 = 65536 - D.42121_729;
  if (loops_48 == 0)
    goto <bb 246>;
  else
    goto <bb 248>;

<bb 246>:
  D.41512_731 = session_72(D)->channel;
  D.42129_732 = switch_channel_test_flag (D.41512_731, 92);
  if (D.42129_732 != 0)
    goto <bb 247>;
  else
    goto <bb 248>;

<bb 247>:
  D.41512_733 = session_72(D)->channel;
  D.42131_734 = switch_channel_direction (D.41512_733);
  if (D.42131_734 == 1)
    goto <bb 250>;
  else
    goto <bb 248>;

<bb 248>:
  D.41736_735 = a_engine_91->crypto_type;
  if (D.41736_735 != 9)
    goto <bb 250>;
  else
    goto <bb 249>;

<bb 249>:
  D.41512_736 = session_72(D)->channel;
  D.42133_737 = switch_channel_test_flag (D.41512_736, 109);
  if (D.42133_737 != 0)
    goto <bb 250>;
  else
    goto <bb 251>;

<bb 250>:
  iftmp.34_739 = 1;
  goto <bb 252>;

<bb 251>:
  iftmp.34_738 = 0;

<bb 252>:
  # iftmp.34_64 = PHI <iftmp.34_739(250), iftmp.34_738(251)>
  D.42134_740 = get_media_profile_name (session_72(D), iftmp.34_64);
  switch_snprintf (D.42120_728, D.42122_730, "m=video %d %s", v_port_721, D.42134_740);
  D.42135_741 = v_engine_92->codec_negotiated;
  if (D.42135_741 != 0)
    goto <bb 253>;
  else
    goto <bb 261>;

<bb 253>:
  switch_core_media_set_video_codec (session_72(D), 0);
  D.42138_742 = strlen (buf_144);
  D.42139_743 = buf_144 + D.42138_742;
  D.42140_744 = strlen (buf_144);
  D.42141_745 = 65536 - D.42140_744;
  D.42142_746 = v_engine_92->cur_payload_map;
  D.42143_747 = D.42142_746->agreed_pt;
  D.42144_748 = (int) D.42143_747;
  switch_snprintf (D.42139_743, D.42141_745, " %d", D.42144_748);
  D.42145_749 = switch_media_handle_test_media_flag (smh_90, 16);
  if (D.42145_749 != 0)
    goto <bb 254>;
  else
    goto <bb 276>;

<bb 254>:
  D.41747_750 = smh_90->sdp_mutex;
  switch_mutex_lock (D.41747_750);
  pmap_751 = v_engine_92->cur_payload_map;
  # DEBUG pmap => pmap_751
  goto <bb 258>;

<bb 255>:
  D.42148_753 = pmap_49->pt;
  D.42142_754 = v_engine_92->cur_payload_map;
  D.42149_755 = D.42142_754->pt;
  if (D.42148_753 != D.42149_755)
    goto <bb 256>;
  else
    goto <bb 257>;

<bb 256>:
  D.42152_756 = strlen (buf_144);
  D.42153_757 = buf_144 + D.42152_756;
  D.42154_758 = strlen (buf_144);
  D.42155_759 = 65536 - D.42154_758;
  D.42148_760 = pmap_49->pt;
  D.42156_761 = (int) D.42148_760;
  switch_snprintf (D.42153_757, D.42155_759, " %d", D.42156_761);

<bb 257>:
  pmap_762 = pmap_49->next;
  # DEBUG pmap => pmap_762

<bb 258>:
  # pmap_49 = PHI <pmap_751(254), pmap_762(257)>
  # DEBUG pmap => pmap_49
  if (pmap_49 != 0B)
    goto <bb 259>;
  else
    goto <bb 260>;

<bb 259>:
  D.42158_752 = pmap_49->allocated;
  if (D.42158_752 != 0)
    goto <bb 255>;
  else
    goto <bb 260>;

<bb 260>:
  D.41747_763 = smh_90->sdp_mutex;
  switch_mutex_unlock (D.41747_763);
  goto <bb 276>;

<bb 261>:
  D.41522_764 = smh_90->mparams;
  D.41587_765 = D.41522_764->num_codecs;
  if (D.41587_765 != 0)
    goto <bb 262>;
  else
    goto <bb 276>;

<bb 262>:
  already_did = {};
  i_766 = 0;
  # DEBUG i => i_766
  goto <bb 275>;

<bb 263>:
  imp_769 = smh_90->codecs[i_50];
  # DEBUG imp => imp_769
  D.42162_770 = imp_769->codec_type;
  if (D.42162_770 != 1)
    goto <bb 264>;
  else
    goto <bb 265>;

<bb 264>:
  // predicted unlikely by continue predictor.
  goto <bb 274>;

<bb 265>:
  D.41512_771 = session_72(D)->channel;
  D.42165_772 = switch_channel_direction (D.41512_771);
  if (D.42165_772 == 0)
    goto <bb 266>;
  else
    goto <bb 268>;

<bb 266>:
  D.41512_773 = session_72(D)->channel;
  D.42168_774 = switch_channel_test_flag (D.41512_773, 114);
  if (D.42168_774 != 0)
    goto <bb 267>;
  else
    goto <bb 268>;

<bb 267>:
  // predicted unlikely by continue predictor.
  goto <bb 274>;

<bb 268>:
  D.42171_775 = smh_90->ianacodes[i_50];
  D.42172_776 = (signed char) D.42171_775;
  if (D.42172_776 >= 0)
    goto <bb 269>;
  else
    goto <bb 272>;

<bb 269>:
  D.42171_777 = smh_90->ianacodes[i_50];
  D.42175_778 = (int) D.42171_777;
  D.42176_779 = already_did[D.42175_778];
  if (D.42176_779 != 0)
    goto <bb 270>;
  else
    goto <bb 271>;

<bb 270>:
  // predicted unlikely by continue predictor.
  goto <bb 274>;

<bb 271>:
  D.42171_780 = smh_90->ianacodes[i_50];
  D.42175_781 = (int) D.42171_780;
  already_did[D.42175_781] = 1;

<bb 272>:
  D.42179_782 = strlen (buf_144);
  D.42180_783 = buf_144 + D.42179_782;
  D.42181_784 = strlen (buf_144);
  D.42182_785 = 65536 - D.42181_784;
  D.42171_786 = smh_90->ianacodes[i_50];
  D.42175_787 = (int) D.42171_786;
  switch_snprintf (D.42180_783, D.42182_785, " %d", D.42175_787);
  if (ptime_8 == 0)
    goto <bb 273>;
  else
    goto <bb 274>;

<bb 273>:
  D.42185_788 = imp_769->microseconds_per_packet;
  ptime_789 = D.42185_788 / 1000;
  # DEBUG ptime => ptime_789

<bb 274>:
  # ptime_7 = PHI <ptime_8(264), ptime_8(267), ptime_8(270), ptime_8(272), ptime_789(273)>
  # DEBUG ptime => ptime_7
  i_790 = i_50 + 1;
  # DEBUG i => i_790

<bb 275>:
  # ptime_8 = PHI <ptime_10(262), ptime_7(274)>
  # i_50 = PHI <i_766(262), i_790(274)>
  # DEBUG i => i_50
  # DEBUG ptime => ptime_8
  D.41522_767 = smh_90->mparams;
  D.41587_768 = D.41522_767->num_codecs;
  if (D.41587_768 > i_50)
    goto <bb 263>;
  else
    goto <bb 276>;

<bb 276>:
  # ptime_9 = PHI <ptime_10(260), ptime_10(261), ptime_8(275), ptime_10(253)>
  # DEBUG ptime => ptime_9
  D.42186_791 = strlen (buf_144);
  D.42187_792 = buf_144 + D.42186_791;
  D.42188_793 = strlen (buf_144);
  D.42189_794 = 65536 - D.42188_793;
  switch_snprintf (D.42187_792, D.42189_794, "\n");
  D.42135_795 = v_engine_92->codec_negotiated;
  if (D.42135_795 != 0)
    goto <bb 277>;
  else
    goto <bb 308>;

<bb 277>:
  D.42142_796 = v_engine_92->cur_payload_map;
  D.42192_797 = D.42142_796->rm_encoding;
  D.42193_798 = strcasecmp (D.42192_797, "VP8");
  if (D.42193_798 == 0)
    goto <bb 278>;
  else
    goto <bb 279>;

<bb 278>:
  D.42142_799 = v_engine_92->cur_payload_map;
  D.42149_800 = D.42142_799->pt;
  vp8_801 = (int) D.42149_800;
  # DEBUG vp8 => vp8_801

<bb 279>:
  # vp8_22 = PHI <vp8_27(277), vp8_801(278)>
  # DEBUG vp8 => vp8_22
  D.42142_802 = v_engine_92->cur_payload_map;
  D.42192_803 = D.42142_802->rm_encoding;
  D.42196_804 = strcasecmp (D.42192_803, "red");
  if (D.42196_804 == 0)
    goto <bb 280>;
  else
    goto <bb 281>;

<bb 280>:
  D.42142_805 = v_engine_92->cur_payload_map;
  D.42149_806 = D.42142_805->pt;
  red_807 = (int) D.42149_806;
  # DEBUG red => red_807

<bb 281>:
  # red_28 = PHI <red_33(279), red_807(280)>
  # DEBUG red => red_28
  D.42142_808 = v_engine_92->cur_payload_map;
  rate_809 = D.42142_808->rm_rate;
  # DEBUG rate => rate_809
  D.42199_810 = strlen (buf_144);
  D.42200_811 = buf_144 + D.42199_810;
  D.42201_812 = strlen (buf_144);
  D.42202_813 = 65536 - D.42201_812;
  D.42142_814 = v_engine_92->cur_payload_map;
  D.42149_815 = D.42142_814->pt;
  D.42203_816 = (int) D.42149_815;
  D.42142_817 = v_engine_92->cur_payload_map;
  D.42192_818 = D.42142_817->rm_encoding;
  D.42142_819 = v_engine_92->cur_payload_map;
  D.42204_820 = D.42142_819->rm_rate;
  switch_snprintf (D.42200_811, D.42202_813, "a=rtpmap:%d %s/%ld\n", D.42203_816, D.42192_818, D.42204_820);
  D.41512_821 = session_72(D)->channel;
  D.42205_822 = switch_channel_test_flag (D.41512_821, 84);
  if (D.42205_822 != 0)
    goto <bb 282>;
  else
    goto <bb 283>;

<bb 282>:
  D.42142_823 = v_engine_92->cur_payload_map;
  pass_fmtp_824 = D.42142_823->rm_fmtp;
  # DEBUG pass_fmtp => pass_fmtp_824
  goto <bb 289>;

<bb 283>:
  pass_fmtp_825 = 0B;
  # DEBUG pass_fmtp => pass_fmtp_825
  D.41512_826 = session_72(D)->channel;
  D.42209_827 = switch_channel_get_partner_uuid (D.41512_826);
  if (D.42209_827 != 0B)
    goto <bb 284>;
  else
    goto <bb 286>;

<bb 284>:
  D.41512_828 = session_72(D)->channel;
  of_829 = switch_channel_get_variable_partner (D.41512_828, "rtp_video_fmtp");
  # DEBUG of => of_829
  if (of_829 != 0B)
    goto <bb 285>;
  else
    goto <bb 286>;

<bb 285>:
  pass_fmtp_830 = of_829;
  # DEBUG pass_fmtp => pass_fmtp_830

<bb 286>:
  if (ov_fmtp_76 != 0B)
    goto <bb 287>;
  else
    goto <bb 288>;

<bb 287>:
  pass_fmtp_831 = ov_fmtp_76;
  # DEBUG pass_fmtp => pass_fmtp_831
  goto <bb 289>;

<bb 288>:
  D.41512_832 = session_72(D)->channel;
  pass_fmtp_833 = switch_channel_get_variable_dup (D.41512_832, "rtp_video_fmtp", 1, -1);
  # DEBUG pass_fmtp => pass_fmtp_833

<bb 289>:
  # pass_fmtp_18 = PHI <pass_fmtp_824(282), pass_fmtp_831(287), pass_fmtp_833(288)>
  # DEBUG pass_fmtp => pass_fmtp_18
  if (pass_fmtp_18 != 0B)
    goto <bb 290>;
  else
    goto <bb 291>;

<bb 290>:
  D.42219_834 = strlen (buf_144);
  D.42220_835 = buf_144 + D.42219_834;
  D.42221_836 = strlen (buf_144);
  D.42222_837 = 65536 - D.42221_836;
  D.42142_838 = v_engine_92->cur_payload_map;
  D.42149_839 = D.42142_838->pt;
  D.42203_840 = (int) D.42149_839;
  switch_snprintf (D.42220_835, D.42222_837, "a=fmtp:%d %s\n", D.42203_840, pass_fmtp_18);

<bb 291>:
  D.42223_841 = switch_media_handle_test_media_flag (smh_90, 16);
  if (D.42223_841 != 0)
    goto <bb 292>;
  else
    goto <bb 300>;

<bb 292>:
  D.41747_842 = smh_90->sdp_mutex;
  switch_mutex_lock (D.41747_842);
  pmap_843 = v_engine_92->cur_payload_map;
  # DEBUG pmap => pmap_843
  goto <bb 297>;

<bb 293>:
  D.42226_845 = pmap_51->pt;
  D.42142_846 = v_engine_92->cur_payload_map;
  D.42149_847 = D.42142_846->pt;
  if (D.42226_845 != D.42149_847)
    goto <bb 294>;
  else
    goto <bb 296>;

<bb 294>:
  D.42229_848 = pmap_51->negotiated;
  if (D.42229_848 != 0)
    goto <bb 295>;
  else
    goto <bb 296>;

<bb 295>:
  D.42232_849 = strlen (buf_144);
  D.42233_850 = buf_144 + D.42232_849;
  D.42234_851 = strlen (buf_144);
  D.42235_852 = 65536 - D.42234_851;
  D.42226_853 = pmap_51->pt;
  D.42236_854 = (int) D.42226_853;
  D.42237_855 = pmap_51->iananame;
  D.42238_856 = pmap_51->rate;
  switch_snprintf (D.42233_850, D.42235_852, "a=rtpmap:%d %s/%ld\n", D.42236_854, D.42237_855, D.42238_856);

<bb 296>:
  pmap_857 = pmap_51->next;
  # DEBUG pmap => pmap_857

<bb 297>:
  # pmap_51 = PHI <pmap_843(292), pmap_857(296)>
  # DEBUG pmap => pmap_51
  if (pmap_51 != 0B)
    goto <bb 298>;
  else
    goto <bb 299>;

<bb 298>:
  D.42240_844 = pmap_51->allocated;
  if (D.42240_844 != 0)
    goto <bb 293>;
  else
    goto <bb 299>;

<bb 299>:
  D.41747_858 = smh_90->sdp_mutex;
  switch_mutex_unlock (D.41747_858);

<bb 300>:
  if (append_video_80 != 0B)
    goto <bb 301>;
  else
    goto <bb 343>;

<bb 301>:
  D.42243_859 = strlen (buf_144);
  D.42244_860 = buf_144 + D.42243_859;
  D.42245_861 = strlen (buf_144);
  D.42246_862 = 65536 - D.42245_861;
  D.42249_863 = *append_video_80;
  if (D.42249_863 != 0)
    goto <bb 302>;
  else
    goto <bb 303>;

<bb 302>:
  D.42252_864 = strlen (append_video_80);
  D.42253_865 = D.42252_864 + -1;
  iftmp.36_866 = append_video_80 + D.42253_865;
  goto <bb 304>;

<bb 303>:
  iftmp.36_867 = append_video_80;

<bb 304>:
  # iftmp.36_66 = PHI <iftmp.36_866(302), iftmp.36_867(303)>
  D.42255_868 = *iftmp.36_66;
  if (D.42255_868 == 10)
    goto <bb 305>;
  else
    goto <bb 306>;

<bb 305>:
  iftmp.35_869 = "";
  goto <bb 307>;

<bb 306>:
  iftmp.35_870 = "\n";

<bb 307>:
  # iftmp.35_65 = PHI <iftmp.35_869(305), iftmp.35_870(306)>
  switch_snprintf (D.42244_860, D.42246_862, "%s%s", append_video_80, iftmp.35_65);
  goto <bb 343>;

<bb 308>:
  D.41522_871 = smh_90->mparams;
  D.41587_872 = D.41522_871->num_codecs;
  if (D.41587_872 != 0)
    goto <bb 309>;
  else
    goto <bb 343>;

<bb 309>:
  already_did = {};
  i_873 = 0;
  # DEBUG i => i_873
  goto <bb 342>;

<bb 310>:
  imp_876 = smh_90->codecs[i_52];
  # DEBUG imp => imp_876
  fmtp_877 = 0B;
  # DEBUG fmtp => fmtp_877
  D.42262_878 = smh_90->ianacodes[i_52];
  ianacode_879 = (uint32_t) D.42262_878;
  # DEBUG ianacode => ianacode_879
  D.42263_880 = imp_876->codec_type;
  if (D.42263_880 != 1)
    goto <bb 311>;
  else
    goto <bb 312>;

<bb 311>:
  // predicted unlikely by continue predictor.
  goto <bb 341>;

<bb 312>:
  D.41512_881 = session_72(D)->channel;
  D.42266_882 = switch_channel_direction (D.41512_881);
  if (D.42266_882 == 0)
    goto <bb 313>;
  else
    goto <bb 315>;

<bb 313>:
  D.41512_883 = session_72(D)->channel;
  D.42269_884 = switch_channel_test_flag (D.41512_883, 114);
  if (D.42269_884 != 0)
    goto <bb 314>;
  else
    goto <bb 315>;

<bb 314>:
  // predicted unlikely by continue predictor.
  goto <bb 341>;

<bb 315>:
  if (ianacode_879 <= 127)
    goto <bb 316>;
  else
    goto <bb 319>;

<bb 316>:
  D.42274_885 = already_did[ianacode_879];
  if (D.42274_885 != 0)
    goto <bb 317>;
  else
    goto <bb 318>;

<bb 317>:
  // predicted unlikely by continue predictor.
  goto <bb 341>;

<bb 318>:
  already_did[ianacode_879] = 1;

<bb 319>:
  if (rate_14 == 0)
    goto <bb 320>;
  else
    goto <bb 321>;

<bb 320>:
  rate_886 = imp_876->samples_per_second;
  # DEBUG rate => rate_886

<bb 321>:
  # rate_12 = PHI <rate_14(319), rate_886(320)>
  # DEBUG rate => rate_12
  D.42279_887 = imp_876->iananame;
  D.42280_888 = imp_876->number_of_channels;
  D.42281_889 = (int) D.42280_888;
  channels_890 = get_channels (D.42279_887, D.42281_889);
  # DEBUG channels => channels_890
  D.42279_891 = imp_876->iananame;
  D.42282_892 = strcasecmp (D.42279_891, "VP8");
  if (D.42282_892 == 0)
    goto <bb 322>;
  else
    goto <bb 323>;

<bb 322>:
  vp8_893 = (int) ianacode_879;
  # DEBUG vp8 => vp8_893

<bb 323>:
  # vp8_23 = PHI <vp8_25(321), vp8_893(322)>
  # DEBUG vp8 => vp8_23
  D.42279_894 = imp_876->iananame;
  D.42285_895 = strcasecmp (D.42279_894, "red");
  if (D.42285_895 == 0)
    goto <bb 324>;
  else
    goto <bb 325>;

<bb 324>:
  red_896 = (int) ianacode_879;
  # DEBUG red => red_896

<bb 325>:
  # red_29 = PHI <red_31(323), red_896(324)>
  # DEBUG red => red_29
  if (channels_890 > 1)
    goto <bb 326>;
  else
    goto <bb 327>;

<bb 326>:
  D.42290_897 = strlen (buf_144);
  D.42291_898 = buf_144 + D.42290_897;
  D.42292_899 = strlen (buf_144);
  D.42293_900 = 65536 - D.42292_899;
  D.42279_901 = imp_876->iananame;
  D.42294_902 = imp_876->samples_per_second;
  switch_snprintf (D.42291_898, D.42293_900, "a=rtpmap:%d %s/%d/%d\n", ianacode_879, D.42279_901, D.42294_902, channels_890);
  goto <bb 328>;

<bb 327>:
  D.42296_903 = strlen (buf_144);
  D.42297_904 = buf_144 + D.42296_903;
  D.42298_905 = strlen (buf_144);
  D.42299_906 = 65536 - D.42298_905;
  D.42279_907 = imp_876->iananame;
  D.42294_908 = imp_876->samples_per_second;
  switch_snprintf (D.42297_904, D.42299_906, "a=rtpmap:%d %s/%d\n", ianacode_879, D.42279_907, D.42294_908);

<bb 328>:
  D.42300_909 = _zstr (ov_fmtp_76);
  if (D.42300_909 == 0)
    goto <bb 329>;
  else
    goto <bb 330>;

<bb 329>:
  fmtp_910 = ov_fmtp_76;
  # DEBUG fmtp => fmtp_910
  goto <bb 338>;

<bb 330>:
  map.33_911 = map;
  if (map.33_911 != 0B)
    goto <bb 331>;
  else
    goto <bb 332>;

<bb 331>:
  map.33_912 = map;
  D.42279_913 = imp_876->iananame;
  fmtp_914 = switch_event_get_header_idx (map.33_912, D.42279_913, -1);
  # DEBUG fmtp => fmtp_914

<bb 332>:
  # fmtp_53 = PHI <fmtp_877(330), fmtp_914(331)>
  # DEBUG fmtp => fmtp_53
  D.42306_915 = smh_90->fmtps[i_52];
  if (D.42306_915 != 0B)
    goto <bb 333>;
  else
    goto <bb 334>;

<bb 333>:
  fmtp_916 = smh_90->fmtps[i_52];
  # DEBUG fmtp => fmtp_916

<bb 334>:
  # fmtp_54 = PHI <fmtp_53(332), fmtp_916(333)>
  # DEBUG fmtp => fmtp_54
  D.42309_917 = _zstr (fmtp_54);
  if (D.42309_917 != 0)
    goto <bb 335>;
  else
    goto <bb 336>;

<bb 335>:
  fmtp_918 = imp_876->fmtp;
  # DEBUG fmtp => fmtp_918

<bb 336>:
  # fmtp_55 = PHI <fmtp_54(334), fmtp_918(335)>
  # DEBUG fmtp => fmtp_55
  D.42312_919 = _zstr (fmtp_55);
  if (D.42312_919 != 0)
    goto <bb 337>;
  else
    goto <bb 338>;

<bb 337>:
  fmtp_920 = pass_fmtp_20;
  # DEBUG fmtp => fmtp_920

<bb 338>:
  # fmtp_56 = PHI <fmtp_910(329), fmtp_55(336), fmtp_920(337)>
  # DEBUG fmtp => fmtp_56
  D.42315_921 = _zstr (fmtp_56);
  if (D.42315_921 == 0)
    goto <bb 339>;
  else
    goto <bb 341>;

<bb 339>:
  D.42318_922 = strcasecmp (fmtp_56, "_blank_");
  if (D.42318_922 != 0)
    goto <bb 340>;
  else
    goto <bb 341>;

<bb 340>:
  D.42321_923 = strlen (buf_144);
  D.42322_924 = buf_144 + D.42321_923;
  D.42323_925 = strlen (buf_144);
  D.42324_926 = 65536 - D.42323_925;
  switch_snprintf (D.42322_924, D.42324_926, "a=fmtp:%d %s\n", ianacode_879, fmtp_56);

<bb 341>:
  # rate_13 = PHI <rate_14(311), rate_14(314), rate_14(317), rate_12(338), rate_12(339), rate_12(340)>
  # vp8_24 = PHI <vp8_25(311), vp8_25(314), vp8_25(317), vp8_23(338), vp8_23(339), vp8_23(340)>
  # red_30 = PHI <red_31(311), red_31(314), red_31(317), red_29(338), red_29(339), red_29(340)>
  # DEBUG red => red_30
  # DEBUG vp8 => vp8_24
  # DEBUG rate => rate_13
  i_927 = i_52 + 1;
  # DEBUG i => i_927

<bb 342>:
  # rate_14 = PHI <rate_16(309), rate_13(341)>
  # vp8_25 = PHI <vp8_27(309), vp8_24(341)>
  # red_31 = PHI <red_33(309), red_30(341)>
  # i_52 = PHI <i_873(309), i_927(341)>
  # DEBUG i => i_52
  # DEBUG red => red_31
  # DEBUG vp8 => vp8_25
  # DEBUG rate => rate_14
  D.41522_874 = smh_90->mparams;
  D.41587_875 = D.41522_874->num_codecs;
  if (D.41587_875 > i_52)
    goto <bb 310>;
  else
    goto <bb 343>;

<bb 343>:
  # rate_15 = PHI <rate_809(307), rate_16(308), rate_14(342), rate_809(300)>
  # pass_fmtp_19 = PHI <pass_fmtp_18(307), pass_fmtp_20(308), pass_fmtp_20(342), pass_fmtp_18(300)>
  # vp8_26 = PHI <vp8_22(307), vp8_27(308), vp8_25(342), vp8_22(300)>
  # red_32 = PHI <red_28(307), red_33(308), red_31(342), red_28(300)>
  # DEBUG red => red_32
  # DEBUG vp8 => vp8_26
  # DEBUG pass_fmtp => pass_fmtp_19
  # DEBUG rate => rate_15
  if (is_outbound_89 != 0)
    goto <bb 345>;
  else
    goto <bb 344>;

<bb 344>:
  D.41512_928 = session_72(D)->channel;
  D.42328_929 = switch_channel_test_flag (D.41512_928, 84);
  if (D.42328_929 != 0)
    goto <bb 345>;
  else
    goto <bb 347>;

<bb 345>:
  D.41534_930 = smh_90->session;
  D.41535_931 = D.41534_930->channel;
  D.42329_932 = switch_channel_test_flag (D.41535_931, 109);
  if (D.42329_932 != 0)
    goto <bb 346>;
  else
    goto <bb 347>;

<bb 346>:
  generate_local_fingerprint (smh_90, 1);

<bb 347>:
  D.42332_933 = v_engine_92->local_dtls_fingerprint.type;
  D.42333_934 = _zstr (D.42332_933);
  if (D.42333_934 == 0)
    goto <bb 348>;
  else
    goto <bb 349>;

<bb 348>:
  D.42336_935 = strlen (buf_144);
  D.42337_936 = buf_144 + D.42336_935;
  D.42338_937 = strlen (buf_144);
  D.42339_938 = 65536 - D.42338_937;
  D.42332_939 = v_engine_92->local_dtls_fingerprint.type;
  D.42340_940 = &v_engine_92->local_dtls_fingerprint.str;
  switch_snprintf (D.42337_936, D.42339_938, "a=fingerprint:%s %s\n", D.42332_939, D.42340_940);

<bb 349>:
  D.41522_941 = smh_90->mparams;
  D.41527_942 = D.41522_941->rtcp_video_interval_msec;
  if (D.41527_942 != 0B)
    goto <bb 350>;
  else
    goto <bb 353>;

<bb 350>:
  D.42343_943 = v_engine_92->rtcp_mux;
  if (D.42343_943 > 0)
    goto <bb 351>;
  else
    goto <bb 352>;

<bb 351>:
  D.42346_944 = strlen (buf_144);
  D.42347_945 = buf_144 + D.42346_944;
  D.42348_946 = strlen (buf_144);
  D.42349_947 = 65536 - D.42348_946;
  switch_snprintf (D.42347_945, D.42349_947, "a=rtcp-mux\n");
  D.42350_948 = strlen (buf_144);
  D.42351_949 = buf_144 + D.42350_948;
  D.42352_950 = strlen (buf_144);
  D.42353_951 = 65536 - D.42352_950;
  switch_snprintf (D.42351_949, D.42353_951, "a=rtcp:%d IN %s %s\n", v_port_721, family_273, ip_1);
  goto <bb 353>;

<bb 352>:
  D.42355_952 = strlen (buf_144);
  D.42356_953 = buf_144 + D.42355_952;
  D.42357_954 = strlen (buf_144);
  D.42358_955 = 65536 - D.42357_954;
  D.42359_956 = v_port_721 + 1;
  switch_snprintf (D.42356_953, D.42358_955, "a=rtcp:%d IN %s %s\n", D.42359_956, family_273, ip_1);

<bb 353>:
  D.42360_957 = BIT_FIELD_REF <*v_engine_92, 16, 91280>;
  D.42361_958 = D.42360_957 & 65535;
  if (D.42361_958 != 0)
    goto <bb 354>;
  else
    goto <bb 361>;

<bb 354>:
  D.42364_959 = strlen (buf_144);
  D.42365_960 = buf_144 + D.42364_959;
  D.42366_961 = strlen (buf_144);
  D.42367_962 = 65536 - D.42366_961;
  D.42369_963 = v_engine_92->fir;
  if (D.42369_963 != 0)
    goto <bb 355>;
  else
    goto <bb 356>;

<bb 355>:
  iftmp.37_964 = "fir ";
  goto <bb 357>;

<bb 356>:
  iftmp.37_965 = "";

<bb 357>:
  # iftmp.37_67 = PHI <iftmp.37_964(355), iftmp.37_965(356)>
  D.42374_966 = v_engine_92->pli;
  if (D.42374_966 != 0)
    goto <bb 358>;
  else
    goto <bb 359>;

<bb 358>:
  iftmp.38_967 = "pli";
  goto <bb 360>;

<bb 359>:
  iftmp.38_968 = "";

<bb 360>:
  # iftmp.38_68 = PHI <iftmp.38_967(358), iftmp.38_968(359)>
  switch_snprintf (D.42365_960, D.42367_962, "a=rtcp-fb:* %s%s\n", iftmp.37_67, iftmp.38_68);

<bb 361>:
  D.42378_969 = v_engine_92->ice_out.cands[0][0].ready;
  if (D.42378_969 != 0)
    goto <bb 362>;
  else
    goto <bb 383>;

<bb 362>:
  tmp1 = "";
  tmp2 = "";
  c1_970 = 659136;
  # DEBUG c1 => c1_970
  c2_971 = 659134;
  # DEBUG c2 => c2_971
  c3_972 = 659126;
  # DEBUG c3 => c3_972
  c4_973 = 659124;
  # DEBUG c4 => c4_973
  bw_974 = 256;
  # DEBUG bw => bw_974
  tmp1[10] = 0;
  tmp2[10] = 0;
  switch_stun_random_string (&tmp1, 10, "0123456789");
  switch_stun_random_string (&tmp2, 10, "0123456789");
  ice_out_975 = &v_engine_92->ice_out;
  # DEBUG ice_out => ice_out_975
  D.41534_976 = smh_90->session;
  D.41535_977 = D.41534_976->channel;
  vbw_978 = switch_channel_get_variable_dup (D.41535_977, "rtp_video_max_bandwidth", 1, -1);
  # DEBUG vbw => vbw_978
  if (vbw_978 != 0B)
    goto <bb 363>;
  else
    goto <bb 364>;

<bb 363>:
  v_979 = atoi (vbw_978);
  # DEBUG v => v_979
  bw_980 = v_979;
  # DEBUG bw => bw_980

<bb 364>:
  # bw_57 = PHI <bw_974(362), bw_980(363)>
  # DEBUG bw => bw_57
  if (bw_57 > 0)
    goto <bb 365>;
  else
    goto <bb 366>;

<bb 365>:
  D.42385_981 = strlen (buf_144);
  D.42386_982 = buf_144 + D.42385_981;
  D.42387_983 = strlen (buf_144);
  D.42388_984 = 65536 - D.42387_983;
  switch_snprintf (D.42386_982, D.42388_984, "b=AS:%d\n", bw_57);

<bb 366>:
  if (vp8_26 != 0)
    goto <bb 367>;
  else
    goto <bb 369>;

<bb 367>:
  D.41512_985 = session_72(D)->channel;
  D.42391_986 = switch_channel_test_flag (D.41512_985, 106);
  if (D.42391_986 != 0)
    goto <bb 368>;
  else
    goto <bb 369>;

<bb 368>:
  D.42394_987 = strlen (buf_144);
  D.42395_988 = buf_144 + D.42394_987;
  D.42396_989 = strlen (buf_144);
  D.42397_990 = 65536 - D.42396_989;
  switch_snprintf (D.42395_988, D.42397_990, "a=rtcp-fb:%d ccm fir\n", vp8_26);

<bb 369>:
  if (red_32 != 0)
    goto <bb 370>;
  else
    goto <bb 371>;

<bb 370>:
  D.42400_991 = strlen (buf_144);
  D.42401_992 = buf_144 + D.42400_991;
  D.42402_993 = strlen (buf_144);
  D.42403_994 = 65536 - D.42402_993;
  switch_snprintf (D.42401_992, D.42403_994, "a=rtcp-fb:%d nack\n", vp8_26);

<bb 371>:
  D.42404_995 = strlen (buf_144);
  D.42405_996 = buf_144 + D.42404_995;
  D.42406_997 = strlen (buf_144);
  D.42407_998 = 65536 - D.42406_997;
  D.42408_999 = v_engine_92->ssrc;
  D.41935_1000 = smh_90->cname;
  switch_snprintf (D.42405_996, D.42407_998, "a=ssrc:%u cname:%s\n", D.42408_999, D.41935_1000);
  D.42409_1001 = strlen (buf_144);
  D.42410_1002 = buf_144 + D.42409_1001;
  D.42411_1003 = strlen (buf_144);
  D.42412_1004 = 65536 - D.42411_1003;
  D.42408_1005 = v_engine_92->ssrc;
  D.41719_1006 = smh_90->msid;
  switch_snprintf (D.42410_1002, D.42412_1004, "a=ssrc:%u msid:%s v0\n", D.42408_1005, D.41719_1006);
  D.42413_1007 = strlen (buf_144);
  D.42414_1008 = buf_144 + D.42413_1007;
  D.42415_1009 = strlen (buf_144);
  D.42416_1010 = 65536 - D.42415_1009;
  D.42408_1011 = v_engine_92->ssrc;
  D.41719_1012 = smh_90->msid;
  switch_snprintf (D.42414_1008, D.42416_1010, "a=ssrc:%u mslabel:%s\n", D.42408_1011, D.41719_1012);
  D.42417_1013 = strlen (buf_144);
  D.42418_1014 = buf_144 + D.42417_1013;
  D.42419_1015 = strlen (buf_144);
  D.42420_1016 = 65536 - D.42419_1015;
  D.42408_1017 = v_engine_92->ssrc;
  D.41719_1018 = smh_90->msid;
  switch_snprintf (D.42418_1014, D.42420_1016, "a=ssrc:%u label:%sv0\n", D.42408_1017, D.41719_1018);
  D.42421_1019 = strlen (buf_144);
  D.42422_1020 = buf_144 + D.42421_1019;
  D.42423_1021 = strlen (buf_144);
  D.42424_1022 = 65536 - D.42423_1021;
  D.41952_1023 = ice_out_975->ufrag;
  switch_snprintf (D.42422_1020, D.42424_1022, "a=ice-ufrag:%s\n", D.41952_1023);
  D.42425_1024 = strlen (buf_144);
  D.42426_1025 = buf_144 + D.42425_1024;
  D.42427_1026 = strlen (buf_144);
  D.42428_1027 = 65536 - D.42427_1026;
  D.41957_1028 = ice_out_975->pwd;
  switch_snprintf (D.42426_1025, D.42428_1027, "a=ice-pwd:%s\n", D.41957_1028);
  D.42429_1029 = strlen (buf_144);
  D.42430_1030 = buf_144 + D.42429_1029;
  D.42431_1031 = strlen (buf_144);
  D.42432_1032 = 65536 - D.42431_1031;
  D.41962_1033 = ice_out_975->cands[0][0].transport;
  D.41963_1034 = ice_out_975->cands[0][0].con_addr;
  D.41964_1035 = ice_out_975->cands[0][0].con_port;
  D.41965_1036 = (int) D.41964_1035;
  switch_snprintf (D.42430_1030, D.42432_1032, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_1033, c1_970, D.41963_1034, D.41965_1036);
  D.42433_1037 = v_engine_92->local_sdp_ip;
  D.42434_1038 = _zstr (D.42433_1037);
  if (D.42434_1038 == 0)
    goto <bb 372>;
  else
    goto <bb 376>;

<bb 372>:
  D.41963_1039 = ice_out_975->cands[0][0].con_addr;
  D.42437_1040 = _zstr (D.41963_1039);
  if (D.42437_1040 == 0)
    goto <bb 373>;
  else
    goto <bb 376>;

<bb 373>:
  D.42433_1041 = v_engine_92->local_sdp_ip;
  D.41963_1042 = ice_out_975->cands[0][0].con_addr;
  D.39666_1043 = __builtin_strcmp (D.42433_1041, D.41963_1042);
  if (D.39666_1043 != 0)
    goto <bb 374>;
  else
    goto <bb 376>;

<bb 374>:
  D.42106_1044 = v_engine_92->local_sdp_port;
  D.41964_1045 = ice_out_975->cands[0][0].con_port;
  if (D.42106_1044 != D.41964_1045)
    goto <bb 375>;
  else
    goto <bb 376>;

<bb 375>:
  D.42444_1046 = strlen (buf_144);
  D.42445_1047 = buf_144 + D.42444_1046;
  D.42446_1048 = strlen (buf_144);
  D.42447_1049 = 65536 - D.42446_1048;
  D.41962_1050 = ice_out_975->cands[0][0].transport;
  D.41963_1051 = ice_out_975->cands[0][0].con_addr;
  D.41964_1052 = ice_out_975->cands[0][0].con_port;
  D.41965_1053 = (int) D.41964_1052;
  D.42433_1054 = v_engine_92->local_sdp_ip;
  D.42106_1055 = v_engine_92->local_sdp_port;
  D.42448_1056 = (int) D.42106_1055;
  switch_snprintf (D.42445_1047, D.42447_1049, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_1050, c3_972, D.41963_1051, D.41965_1053, D.42433_1054, D.42448_1056);

<bb 376>:
  D.42343_1057 = v_engine_92->rtcp_mux;
  D.42451_1058 = D.42343_1057 <= 0;
  D.41986_1059 = is_outbound_89 != 0;
  D.42452_1060 = D.42451_1058 || D.41986_1059;
  if (D.42452_1060 != 0)
    goto <bb 378>;
  else
    goto <bb 377>;

<bb 377>:
  D.41512_1061 = session_72(D)->channel;
  D.42454_1062 = switch_channel_test_flag (D.41512_1061, 84);
  if (D.42454_1062 != 0)
    goto <bb 378>;
  else
    goto <bb 383>;

<bb 378>:
  D.42455_1063 = strlen (buf_144);
  D.42456_1064 = buf_144 + D.42455_1063;
  D.42457_1065 = strlen (buf_144);
  D.42458_1066 = 65536 - D.42457_1065;
  D.41962_1067 = ice_out_975->cands[0][0].transport;
  D.41963_1068 = ice_out_975->cands[0][0].con_addr;
  D.41964_1069 = ice_out_975->cands[0][0].con_port;
  D.41965_1070 = (int) D.41964_1069;
  D.42343_1071 = v_engine_92->rtcp_mux;
  D.42459_1072 = D.42343_1071 <= 0;
  D.42460_1073 = D.41965_1070 + D.42459_1072;
  switch_snprintf (D.42456_1064, D.42458_1066, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_1067, c2_971, D.41963_1068, D.42460_1073);
  D.42433_1074 = v_engine_92->local_sdp_ip;
  D.42461_1075 = _zstr (D.42433_1074);
  if (D.42461_1075 == 0)
    goto <bb 379>;
  else
    goto <bb 383>;

<bb 379>:
  D.42464_1076 = ice_out_975->cands[0][1].con_addr;
  D.42465_1077 = _zstr (D.42464_1076);
  if (D.42465_1077 == 0)
    goto <bb 380>;
  else
    goto <bb 383>;

<bb 380>:
  D.42433_1078 = v_engine_92->local_sdp_ip;
  D.42464_1079 = ice_out_975->cands[0][1].con_addr;
  D.39675_1080 = __builtin_strcmp (D.42433_1078, D.42464_1079);
  if (D.39675_1080 != 0)
    goto <bb 381>;
  else
    goto <bb 383>;

<bb 381>:
  D.42106_1081 = v_engine_92->local_sdp_port;
  D.42470_1082 = ice_out_975->cands[0][1].con_port;
  if (D.42106_1081 != D.42470_1082)
    goto <bb 382>;
  else
    goto <bb 383>;

<bb 382>:
  D.42473_1083 = strlen (buf_144);
  D.42474_1084 = buf_144 + D.42473_1083;
  D.42475_1085 = strlen (buf_144);
  D.42476_1086 = 65536 - D.42475_1085;
  D.41962_1087 = ice_out_975->cands[0][0].transport;
  D.41963_1088 = ice_out_975->cands[0][0].con_addr;
  D.41964_1089 = ice_out_975->cands[0][0].con_port;
  D.41965_1090 = (int) D.41964_1089;
  D.42343_1091 = v_engine_92->rtcp_mux;
  D.42459_1092 = D.42343_1091 <= 0;
  D.42460_1093 = D.41965_1090 + D.42459_1092;
  D.42433_1094 = v_engine_92->local_sdp_ip;
  D.42106_1095 = v_engine_92->local_sdp_port;
  D.42448_1096 = (int) D.42106_1095;
  D.42343_1097 = v_engine_92->rtcp_mux;
  D.42459_1098 = D.42343_1097 <= 0;
  D.42477_1099 = D.42448_1096 + D.42459_1098;
  switch_snprintf (D.42474_1084, D.42476_1086, "a=candidate:%s 2 %s %u %s %d typ srflx generation 0\n", &tmp2, D.41962_1087, c4_973, D.41963_1088, D.42460_1093, D.42433_1094, D.42477_1099);

<bb 383>:
  if (loops_48 == 0)
    goto <bb 384>;
  else
    goto <bb 393>;

<bb 384>:
  D.41512_1100 = session_72(D)->channel;
  D.42480_1101 = switch_channel_test_flag (D.41512_1100, 92);
  if (D.42480_1101 != 0)
    goto <bb 385>;
  else
    goto <bb 393>;

<bb 385>:
  D.41512_1102 = session_72(D)->channel;
  D.42483_1103 = switch_channel_test_flag (D.41512_1102, 109);
  if (D.42483_1103 == 0)
    goto <bb 386>;
  else
    goto <bb 393>;

<bb 386>:
  i_1104 = 0;
  # DEBUG i => i_1104
  goto <bb 392>;

<bb 387>:
  D.42486_1106 = smh_90->crypto_suite_order[i_58];
  j_1107 = SUITES[D.42486_1106].type;
  # DEBUG j => j_1107
  D.41736_1108 = a_engine_91->crypto_type;
  if (D.41736_1108 == j_1107)
    goto <bb 389>;
  else
    goto <bb 388>;

<bb 388>:
  D.41736_1109 = a_engine_91->crypto_type;
  if (D.41736_1109 == 9)
    goto <bb 389>;
  else
    goto <bb 391>;

<bb 389>:
  D.42490_1110 = a_engine_91->ssec[j_1107].local_crypto_key;
  D.42491_1111 = _zstr (D.42490_1110);
  if (D.42491_1111 == 0)
    goto <bb 390>;
  else
    goto <bb 391>;

<bb 390>:
  D.42494_1112 = strlen (buf_144);
  D.42495_1113 = buf_144 + D.42494_1112;
  D.42496_1114 = strlen (buf_144);
  D.42497_1115 = 65536 - D.42496_1114;
  D.42498_1116 = v_engine_92->ssec[j_1107].local_crypto_key;
  switch_snprintf (D.42495_1113, D.42497_1115, "a=crypto:%s\n", D.42498_1116);

<bb 391>:
  i_1117 = i_58 + 1;
  # DEBUG i => i_1117

<bb 392>:
  # i_58 = PHI <i_1104(386), i_1117(391)>
  # DEBUG i => i_58
  D.42486_1105 = smh_90->crypto_suite_order[i_58];
  if (D.42486_1105 != 9)
    goto <bb 387>;
  else
    goto <bb 393>;

<bb 393>:
  if (local_sdp_video_zrtp_hash_84 != 0B)
    goto <bb 394>;
  else
    goto <bb 395>;

<bb 394>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 6892, session_72(D), 7, "Adding video a=zrtp-hash:%s\n", local_sdp_video_zrtp_hash_84);
  D.42501_1118 = strlen (buf_144);
  D.42502_1119 = buf_144 + D.42501_1118;
  D.42503_1120 = strlen (buf_144);
  D.42504_1121 = 65536 - D.42503_1120;
  switch_snprintf (D.42502_1119, D.42504_1121, "a=zrtp-hash:%s\n", local_sdp_video_zrtp_hash_84);

<bb 395>:
  D.41512_1122 = session_72(D)->channel;
  D.42505_1123 = switch_channel_test_flag (D.41512_1122, 109);
  if (D.42505_1123 != 0)
    goto <bb 401>;
  else
    goto <bb 396>;

<bb 396>:
  D.41512_1124 = session_72(D)->channel;
  D.42507_1125 = switch_channel_test_flag (D.41512_1124, 92);
  if (D.42507_1125 == 0)
    goto <bb 401>;
  else
    goto <bb 397>;

<bb 397>:
  D.42058_1126 = smh_90->crypto_mode;
  if (D.42058_1126 == 1)
    goto <bb 401>;
  else
    goto <bb 398>;

<bb 398>:
  D.42058_1127 = smh_90->crypto_mode;
  if (D.42058_1127 == 2)
    goto <bb 401>;
  else
    goto <bb 399>;

<bb 399>:
  loops_1128 = loops_48 + 1;
  # DEBUG loops => loops_1128

<bb 400>:
  # ptime_10 = PHI <ptime_6(242), ptime_9(399)>
  # rate_16 = PHI <rate_11(242), rate_15(399)>
  # pass_fmtp_20 = PHI <pass_fmtp_74(242), pass_fmtp_19(399)>
  # vp8_27 = PHI <vp8_85(242), vp8_26(399)>
  # red_33 = PHI <red_86(242), red_32(399)>
  # loops_48 = PHI <loops_722(242), loops_1128(399)>
  # DEBUG loops => loops_48
  # DEBUG red => red_33
  # DEBUG vp8 => vp8_27
  # DEBUG pass_fmtp => pass_fmtp_20
  # DEBUG rate => rate_16
  # DEBUG ptime => ptime_10
  if (loops_48 <= 1)
    goto <bb 243>;
  else
    goto <bb 401>;

<bb 401>:
  map.33_1129 = map;
  if (map.33_1129 != 0B)
    goto <bb 402>;
  else
    goto <bb 403>;

<bb 402>:
  switch_event_destroy (&map);

<bb 403>:
  ptmap.39_1130 = ptmap;
  if (ptmap.39_1130 != 0B)
    goto <bb 404>;
  else
    goto <bb 405>;

<bb 404>:
  switch_event_destroy (&ptmap);

<bb 405>:
  switch_core_media_set_local_sdp (session_72(D), buf_144, 1);
  if (buf_144 != 0B)
    goto <bb 406>;
  else
    goto <bb 407>;

<bb 406>:
  free (buf_144);
  buf_1131 = 0B;
  # DEBUG buf => buf_1131

<bb 407>:
  return;

}



;; Function switch_core_media_absorb_sdp (switch_core_media_absorb_sdp)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement a_engine = &smh->engines;

Renaming statement D.41484 = session->channel;

Renaming statement sdp_str = switch_channel_get_variable_dup (D.41484, "switch_m_sdp", 1, -1);

Renaming statement if (sdp_str != 0B)



Renaming block #6

Renaming statement D.41487 = strlen (sdp_str);

Renaming statement D.41488 = (int) D.41487;

Renaming statement parser = sdp_parse (0B, sdp_str, D.41488, 0);

Renaming statement if (parser != 0B)



Renaming block #7

Renaming statement sdp = sdp_session (parser);

Renaming statement if (sdp != 0B)



Renaming block #8

Renaming statement m = sdp->sdp_media;



Renaming block #19

Renaming statement if (m != 0B)



Renaming block #9

Renaming statement D.41495 = m->m_type;

Renaming statement if (D.41495 != 2)



Renaming block #10

Renaming statement D.41497 = m->m_port;

Renaming statement if (D.41497 == 0)



Renaming block #12

Renaming statement connection = sdp->sdp_connection;

Renaming statement D.41498 = m->m_connections;

Renaming statement if (D.41498 != 0B)



Renaming block #13

Renaming statement connection = m->m_connections;



Renaming block #14

Renaming statement if (connection != 0B)



Renaming block #15

Renaming statement D.41503 = connection->c_address;

Renaming statement D.41504 = switch_core_perform_session_strdup (session, D.41503, "src/switch_core_media.c", &__func__, 6957);

Renaming statement a_engine->proxy_sdp_ip = D.41504;



Renaming block #16

Renaming statement D.41497 = m->m_port;

Renaming statement D.41505 = (short unsigned int) D.41497;

Renaming statement a_engine->proxy_sdp_port = D.41505;

Renaming statement D.41506 = a_engine->proxy_sdp_ip;

Renaming statement if (D.41506 != 0B)



Renaming block #17

Renaming statement D.41509 = a_engine->proxy_sdp_port;

Renaming statement if (D.41509 != 0)



Renaming block #11



Renaming block #18

Renaming statement m = m->m_next;



Renaming block #20

Renaming statement sdp_parser_free (parser);



Renaming block #21

Renaming statement switch_core_media_set_local_sdp (session, sdp_str, 1);



Renaming block #22



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 6930, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_4 = session_3(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.41484_6 = session_3(D)->channel;

Updating SSA information for statement sdp_str_7 = switch_channel_get_variable_dup (D.41484_6, "switch_m_sdp", 1, -1);



Registering new PHI nodes in block #6

Updating SSA information for statement D.41487_8 = strlen (sdp_str_7);

Updating SSA information for statement parser_10 = sdp_parse (0B, sdp_str_7, D.41488_9, 0);



Registering new PHI nodes in block #7

Updating SSA information for statement sdp_11 = sdp_session (parser_10);



Registering new PHI nodes in block #8

Updating SSA information for statement m_12 = sdp_11->sdp_media;



Registering new PHI nodes in block #19



Registering new PHI nodes in block #9

Updating SSA information for statement D.41495_13 = m_1->m_type;



Registering new PHI nodes in block #10

Updating SSA information for statement D.41497_14 = m_1->m_port;



Registering new PHI nodes in block #12

Updating SSA information for statement connection_15 = sdp_11->sdp_connection;

Updating SSA information for statement D.41498_16 = m_1->m_connections;



Registering new PHI nodes in block #13

Updating SSA information for statement connection_17 = m_1->m_connections;



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement D.41503_18 = connection_2->c_address;

Updating SSA information for statement D.41504_19 = switch_core_perform_session_strdup (session_3(D), D.41503_18, "src/switch_core_media.c", &__func__, 6957);

Updating SSA information for statement a_engine_5->proxy_sdp_ip = D.41504_19;



Registering new PHI nodes in block #16

Updating SSA information for statement D.41497_20 = m_1->m_port;

Updating SSA information for statement a_engine_5->proxy_sdp_port = D.41505_21;

Updating SSA information for statement D.41506_22 = a_engine_5->proxy_sdp_ip;



Registering new PHI nodes in block #17

Updating SSA information for statement D.41509_23 = a_engine_5->proxy_sdp_port;



Registering new PHI nodes in block #11



Registering new PHI nodes in block #18

Updating SSA information for statement m_24 = m_1->m_next;



Registering new PHI nodes in block #20

Updating SSA information for statement sdp_parser_free (parser_10);



Registering new PHI nodes in block #21

Updating SSA information for statement switch_core_media_set_local_sdp (session_3(D), sdp_str_7, 1);



Registering new PHI nodes in block #22



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 23
Number of blocks to update: 22 ( 96%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 


Scope blocks after cleanups:

{ Scope block #0 
  const char * sdp_str;
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_absorb_sdp";
  static const char __func__[29] = "switch_core_media_absorb_sdp";

  { Scope block #0 
    struct sdp_parser_t * parser;
    struct sdp_session_t * sdp;
    struct sdp_media_t * m;
    struct sdp_connection_t * connection;

  }

}
switch_core_media_absorb_sdp (struct switch_core_session_t * session)
{
  struct sdp_connection_t * connection;
  struct sdp_media_t * m;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  static const char __func__[29] = "switch_core_media_absorb_sdp";
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_absorb_sdp";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  const char * sdp_str;
  switch_port_t D.41509;
  char * D.41506;
  short unsigned int D.41505;
  char * D.41504;
  const char * D.41503;
  struct sdp_connection_t * D.41498;
  long unsigned int D.41497;
  sdp_media_e D.41495;
  int D.41488;
  size_t D.41487;
  struct switch_channel_t * D.41484;

<bb 2>:
  if (session_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 6930, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_4 = session_3(D)->media_handle;
  # DEBUG smh => smh_4
  if (smh_4 == 0B)
    goto <bb 22>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_5 = &smh_4->engines;
  # DEBUG a_engine => a_engine_5
  D.41484_6 = session_3(D)->channel;
  sdp_str_7 = switch_channel_get_variable_dup (D.41484_6, "switch_m_sdp", 1, -1);
  # DEBUG sdp_str => sdp_str_7
  if (sdp_str_7 != 0B)
    goto <bb 6>;
  else
    goto <bb 22>;

<bb 6>:
  D.41487_8 = strlen (sdp_str_7);
  D.41488_9 = (int) D.41487_8;
  parser_10 = sdp_parse (0B, sdp_str_7, D.41488_9, 0);
  # DEBUG parser => parser_10
  if (parser_10 != 0B)
    goto <bb 7>;
  else
    goto <bb 21>;

<bb 7>:
  sdp_11 = sdp_session (parser_10);
  # DEBUG sdp => sdp_11
  if (sdp_11 != 0B)
    goto <bb 8>;
  else
    goto <bb 20>;

<bb 8>:
  m_12 = sdp_11->sdp_media;
  # DEBUG m => m_12
  goto <bb 19>;

<bb 9>:
  D.41495_13 = m_1->m_type;
  if (D.41495_13 != 2)
    goto <bb 11>;
  else
    goto <bb 10>;

<bb 10>:
  D.41497_14 = m_1->m_port;
  if (D.41497_14 == 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  // predicted unlikely by continue predictor.
  goto <bb 18>;

<bb 12>:
  connection_15 = sdp_11->sdp_connection;
  # DEBUG connection => connection_15
  D.41498_16 = m_1->m_connections;
  if (D.41498_16 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  connection_17 = m_1->m_connections;
  # DEBUG connection => connection_17

<bb 14>:
  # connection_2 = PHI <connection_15(12), connection_17(13)>
  # DEBUG connection => connection_2
  if (connection_2 != 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.41503_18 = connection_2->c_address;
  D.41504_19 = switch_core_perform_session_strdup (session_3(D), D.41503_18, "src/switch_core_media.c", &__func__, 6957);
  a_engine_5->proxy_sdp_ip = D.41504_19;

<bb 16>:
  D.41497_20 = m_1->m_port;
  D.41505_21 = (short unsigned int) D.41497_20;
  a_engine_5->proxy_sdp_port = D.41505_21;
  D.41506_22 = a_engine_5->proxy_sdp_ip;
  if (D.41506_22 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.41509_23 = a_engine_5->proxy_sdp_port;
  if (D.41509_23 != 0)
    goto <bb 20>;
  else
    goto <bb 18>;

<bb 18>:
  m_24 = m_1->m_next;
  # DEBUG m => m_24

<bb 19>:
  # m_1 = PHI <m_12(8), m_24(18)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 9>;
  else
    goto <bb 20>;

<bb 20>:
  sdp_parser_free (parser_10);

<bb 21>:
  switch_core_media_set_local_sdp (session_3(D), sdp_str_7, 1);

<bb 22>:
  return;

}



;; Function switch_core_media_set_udptl_image_sdp (switch_core_media_set_udptl_image_sdp)



Renaming block #0



Renaming block #2

Renaming statement family = "IP4";

Renaming statement bit_removal_on = "a=T38FaxFillBitRemoval\n";

Renaming statement bit_removal_off = "";

Renaming statement mmr_on = "a=T38FaxTranscodingMMR\n";

Renaming statement mmr_off = "";

Renaming statement jbig_on = "a=T38FaxTranscodingJBIG\n";

Renaming statement jbig_off = "";

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement a_engine = &smh->engines;

Renaming statement if (t38_options == 0B)



Renaming block #6



Renaming block #7

Renaming statement ip = t38_options->local_ip;

Renaming statement D.41405 = t38_options->local_port;

Renaming statement port = (uint32_t) D.41405;

Renaming statement D.41406 = smh->mparams;

Renaming statement username = D.41406->sdp_username;

Renaming statement D.41407 = session->channel;

Renaming statement var = switch_channel_get_variable_dup (D.41407, "t38_broken_boolean", 1, -1);

Renaming statement broken_boolean = switch_true (var);

Renaming statement if (ip == 0B)



Renaming block #8

Renaming statement ip = a_engine->adv_sdp_ip;

Renaming statement if (ip == 0B)



Renaming block #9

Renaming statement ip = a_engine->proxy_sdp_ip;



Renaming block #10

Renaming statement if (ip == 0B)



Renaming block #11

Renaming statement D.41407 = session->channel;

Renaming statement D.41414 = switch_channel_get_name (D.41407);

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 7022, 0B, 2, "%s NO IP!\n", D.41414);



Renaming block #12

Renaming statement if (port == 0)



Renaming block #13

Renaming statement D.41417 = a_engine->adv_sdp_port;

Renaming statement port = (uint32_t) D.41417;

Renaming statement if (port == 0)



Renaming block #14

Renaming statement D.41420 = a_engine->proxy_sdp_port;

Renaming statement port = (uint32_t) D.41420;



Renaming block #15

Renaming statement if (port == 0)



Renaming block #16

Renaming statement D.41407 = session->channel;

Renaming statement D.41423 = switch_channel_get_name (D.41407);

Renaming statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 7033, 0B, 2, "%s NO PORT!\n", D.41423);



Renaming block #17

Renaming statement D.41424 = smh->owner_id;

Renaming statement if (D.41424 == 0)



Renaming block #18

Renaming statement D.41427 = switch_epoch_time_now (0B);

Renaming statement D.41428 = (unsigned int) D.41427;

Renaming statement D.41429 = D.41428 - port;

Renaming statement smh->owner_id = D.41429;



Renaming block #19

Renaming statement D.41430 = smh->session_id;

Renaming statement if (D.41430 == 0)



Renaming block #20

Renaming statement D.41424 = smh->owner_id;

Renaming statement smh->session_id = D.41424;



Renaming block #21

Renaming statement D.41430 = smh->session_id;

Renaming statement D.41433 = D.41430 + 1;

Renaming statement smh->session_id = D.41433;

Renaming statement D.41435 = __builtin_strchr (ip, 58);

Renaming statement if (D.41435 != 0B)



Renaming block #22

Renaming statement iftmp.21 = "IP6";



Renaming block #23

Renaming statement iftmp.21 = "IP4";



Renaming block #24

Renaming statement family = iftmp.21;

Renaming statement D.41424 = smh->owner_id;

Renaming statement D.41430 = smh->session_id;

Renaming statement switch_snprintf (&buf, 2048, "v=0\no=%s %010u %010u IN %s %s\ns=%s\nc=IN %s %s\nt=0 0\n", username, D.41424, D.41430, family, ip, username, family, ip);

Renaming statement D.41439 = t38_options->T38FaxMaxBuffer;

Renaming statement if (D.41439 != 0)



Renaming block #25

Renaming statement D.41439 = t38_options->T38FaxMaxBuffer;

Renaming statement switch_snprintf (&max_buf, 128, "a=T38FaxMaxBuffer:%d\n", D.41439);



Renaming block #26

Renaming statement D.41442 = t38_options->T38FaxMaxDatagram;

Renaming statement if (D.41442 != 0)



Renaming block #27

Renaming statement D.41442 = t38_options->T38FaxMaxDatagram;

Renaming statement switch_snprintf (&max_data, 128, "a=T38FaxMaxDatagram:%d\n", D.41442);



Renaming block #28

Renaming statement if (broken_boolean != 0)



Renaming block #29

Renaming statement bit_removal_on = "a=T38FaxFillBitRemoval:1\n";

Renaming statement bit_removal_off = "a=T38FaxFillBitRemoval:0\n";

Renaming statement mmr_on = "a=T38FaxTranscodingMMR:1\n";

Renaming statement mmr_off = "a=T38FaxTranscodingMMR:0\n";

Renaming statement jbig_on = "a=T38FaxTranscodingJBIG:1\n";

Renaming statement jbig_off = "a=T38FaxTranscodingJBIG:0\n";



Renaming block #30

Renaming statement D.41447 = strlen (&buf);

Renaming statement D.41448 = &buf + D.41447;

Renaming statement D.41449 = strlen (&buf);

Renaming statement D.41450 = 2048 - D.41449;

Renaming statement D.41451 = t38_options->T38FaxVersion;

Renaming statement D.41452 = (int) D.41451;

Renaming statement D.41453 = t38_options->T38MaxBitRate;

Renaming statement D.41455 = t38_options->T38FaxFillBitRemoval;

Renaming statement if (D.41455 != 0)



Renaming block #31

Renaming statement iftmp.22 = bit_removal_on;



Renaming block #32

Renaming statement iftmp.22 = bit_removal_off;



Renaming block #33

Renaming statement D.41460 = t38_options->T38FaxTranscodingMMR;

Renaming statement if (D.41460 != 0)



Renaming block #34

Renaming statement iftmp.23 = mmr_on;



Renaming block #35

Renaming statement iftmp.23 = mmr_off;



Renaming block #36

Renaming statement D.41465 = t38_options->T38FaxTranscodingJBIG;

Renaming statement if (D.41465 != 0)



Renaming block #37

Renaming statement iftmp.24 = jbig_on;



Renaming block #38

Renaming statement iftmp.24 = jbig_off;



Renaming block #39

Renaming statement D.41469 = t38_options->T38FaxRateManagement;

Renaming statement D.41470 = t38_options->T38FaxUdpEC;

Renaming statement switch_snprintf (D.41448, D.41450, "m=image %d udptl t38\na=T38FaxVersion:%d\na=T38MaxBitRate:%d\n%s%s%sa=T38FaxRateManagement:%s\n%s%sa=T38FaxUdpEC:%s\n", port, D.41452, D.41453, iftmp.22, iftmp.23, iftmp.24, D.41469, &max_buf, &max_data, D.41470);

Renaming statement if (insist != 0)



Renaming block #40

Renaming statement D.41473 = strlen (&buf);

Renaming statement D.41474 = &buf + D.41473;

Renaming statement D.41475 = strlen (&buf);

Renaming statement D.41476 = 2048 - D.41475;

Renaming statement switch_snprintf (D.41474, D.41476, "m=audio 0 RTP/AVP 19\n");



Renaming block #41

Renaming statement switch_core_media_set_local_sdp (session, &buf, 1);

Renaming statement D.41407 = session->channel;

Renaming statement D.41477 = switch_channel_get_name (D.41407);

Renaming statement D.41406 = smh->mparams;

Renaming statement D.41478 = D.41406->local_sdp_str;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7113, session, 7, "%s image media sdp:\n%s\n", D.41477, D.41478);



Renaming block #42



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement buf = "";

Updating SSA information for statement max_buf = "";

Updating SSA information for statement max_data = "";



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 6995, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_21 = session_20(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement __assert_fail ("t38_options", "src/switch_core_media.c", 7004, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #7

Updating SSA information for statement ip_24 = t38_options_23(D)->local_ip;

Updating SSA information for statement D.41405_25 = t38_options_23(D)->local_port;

Updating SSA information for statement D.41406_27 = smh_21->mparams;

Updating SSA information for statement username_28 = D.41406_27->sdp_username;

Updating SSA information for statement D.41407_29 = session_20(D)->channel;

Updating SSA information for statement var_30 = switch_channel_get_variable_dup (D.41407_29, "t38_broken_boolean", 1, -1);

Updating SSA information for statement broken_boolean_31 = switch_true (var_30);



Registering new PHI nodes in block #8

Updating SSA information for statement ip_32 = a_engine_22->adv_sdp_ip;



Registering new PHI nodes in block #9

Updating SSA information for statement ip_33 = a_engine_22->proxy_sdp_ip;



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11

Updating SSA information for statement D.41407_34 = session_20(D)->channel;

Updating SSA information for statement D.41414_35 = switch_channel_get_name (D.41407_34);

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 7022, 0B, 2, "%s NO IP!\n", D.41414_35);



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13

Updating SSA information for statement D.41417_36 = a_engine_22->adv_sdp_port;



Registering new PHI nodes in block #14

Updating SSA information for statement D.41420_38 = a_engine_22->proxy_sdp_port;



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16

Updating SSA information for statement D.41407_40 = session_20(D)->channel;

Updating SSA information for statement D.41423_41 = switch_channel_get_name (D.41407_40);

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 7033, 0B, 2, "%s NO PORT!\n", D.41423_41);



Registering new PHI nodes in block #17

Updating SSA information for statement D.41424_42 = smh_21->owner_id;



Registering new PHI nodes in block #18

Updating SSA information for statement D.41427_43 = switch_epoch_time_now (0B);

Updating SSA information for statement smh_21->owner_id = D.41429_45;



Registering new PHI nodes in block #19

Updating SSA information for statement D.41430_46 = smh_21->session_id;



Registering new PHI nodes in block #20

Updating SSA information for statement D.41424_47 = smh_21->owner_id;

Updating SSA information for statement smh_21->session_id = D.41424_47;



Registering new PHI nodes in block #21

Updating SSA information for statement D.41430_48 = smh_21->session_id;

Updating SSA information for statement smh_21->session_id = D.41433_49;

Updating SSA information for statement D.41435_50 = __builtin_strchr (ip_1, 58);



Registering new PHI nodes in block #22



Registering new PHI nodes in block #23



Registering new PHI nodes in block #24

Updating SSA information for statement D.41424_54 = smh_21->owner_id;

Updating SSA information for statement D.41430_55 = smh_21->session_id;

Updating SSA information for statement switch_snprintf (&buf, 2048, "v=0\no=%s %010u %010u IN %s %s\ns=%s\nc=IN %s %s\nt=0 0\n", username_28, D.41424_54, D.41430_55, family_53, ip_1, username_28, family_53, ip_1);

Updating SSA information for statement D.41439_56 = t38_options_23(D)->T38FaxMaxBuffer;



Registering new PHI nodes in block #25

Updating SSA information for statement D.41439_57 = t38_options_23(D)->T38FaxMaxBuffer;

Updating SSA information for statement switch_snprintf (&max_buf, 128, "a=T38FaxMaxBuffer:%d\n", D.41439_57);



Registering new PHI nodes in block #26

Updating SSA information for statement D.41442_58 = t38_options_23(D)->T38FaxMaxDatagram;



Registering new PHI nodes in block #27

Updating SSA information for statement D.41442_59 = t38_options_23(D)->T38FaxMaxDatagram;

Updating SSA information for statement switch_snprintf (&max_data, 128, "a=T38FaxMaxDatagram:%d\n", D.41442_59);



Registering new PHI nodes in block #28



Registering new PHI nodes in block #29



Registering new PHI nodes in block #30

Updating SSA information for statement D.41447_66 = strlen (&buf);

Updating SSA information for statement D.41449_68 = strlen (&buf);

Updating SSA information for statement D.41451_70 = t38_options_23(D)->T38FaxVersion;

Updating SSA information for statement D.41453_72 = t38_options_23(D)->T38MaxBitRate;

Updating SSA information for statement D.41455_73 = t38_options_23(D)->T38FaxFillBitRemoval;



Registering new PHI nodes in block #31



Registering new PHI nodes in block #32



Registering new PHI nodes in block #33

Updating SSA information for statement D.41460_76 = t38_options_23(D)->T38FaxTranscodingMMR;



Registering new PHI nodes in block #34



Registering new PHI nodes in block #35



Registering new PHI nodes in block #36

Updating SSA information for statement D.41465_79 = t38_options_23(D)->T38FaxTranscodingJBIG;



Registering new PHI nodes in block #37



Registering new PHI nodes in block #38



Registering new PHI nodes in block #39

Updating SSA information for statement D.41469_82 = t38_options_23(D)->T38FaxRateManagement;

Updating SSA information for statement D.41470_83 = t38_options_23(D)->T38FaxUdpEC;

Updating SSA information for statement switch_snprintf (D.41448_67, D.41450_69, "m=image %d udptl t38\na=T38FaxVersion:%d\na=T38MaxBitRate:%d\n%s%s%sa=T38FaxRateManagement:%s\n%s%sa=T38FaxUdpEC:%s\n", port_2, D.41452_71, D.41453_72, iftmp.22_10, iftmp.23_11, iftmp.24_12, D.41469_82, &max_buf, &max_data, D.41470_83);



Registering new PHI nodes in block #40

Updating SSA information for statement D.41473_85 = strlen (&buf);

Updating SSA information for statement D.41475_87 = strlen (&buf);

Updating SSA information for statement switch_snprintf (D.41474_86, D.41476_88, "m=audio 0 RTP/AVP 19\n");



Registering new PHI nodes in block #41

Updating SSA information for statement switch_core_media_set_local_sdp (session_20(D), &buf, 1);

Updating SSA information for statement D.41407_89 = session_20(D)->channel;

Updating SSA information for statement D.41477_90 = switch_channel_get_name (D.41407_89);

Updating SSA information for statement D.41406_91 = smh_21->mparams;

Updating SSA information for statement D.41478_92 = D.41406_91->local_sdp_str;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7113, session_20(D), 7, "%s image media sdp:\n%s\n", D.41477_90, D.41478_92);



Registering new PHI nodes in block #42



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 43
Number of blocks to update: 42 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 


Scope blocks after cleanups:

{ Scope block #0 
  char buf[2048];
  char max_buf[128];
  char max_data[128];
  const char * ip;
  uint32_t port;
  const char * family;
  const char * username;
  const char * bit_removal_on;
  const char * bit_removal_off;
  const char * mmr_on;
  const char * mmr_off;
  const char * jbig_on;
  const char * jbig_off;
  const char * var;
  int broken_boolean;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  static const char __PRETTY_FUNCTION__[38] = "switch_core_media_set_udptl_image_sdp";
  static const char __func__[38] = "switch_core_media_set_udptl_image_sdp";

}
switch_core_media_set_udptl_image_sdp (struct switch_core_session_t * session, struct switch_t38_options_t * t38_options, int insist)
{
  static const char __func__[38] = "switch_core_media_set_udptl_image_sdp";
  static const char __PRETTY_FUNCTION__[38] = "switch_core_media_set_udptl_image_sdp";
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  int broken_boolean;
  const char * var;
  const char * jbig_off;
  const char * jbig_on;
  const char * mmr_off;
  const char * mmr_on;
  const char * bit_removal_off;
  const char * bit_removal_on;
  const char * username;
  const char * family;
  uint32_t port;
  const char * ip;
  char max_data[128];
  char max_buf[128];
  char buf[2048];
  char * D.41478;
  char * D.41477;
  unsigned int D.41476;
  size_t D.41475;
  char * D.41474;
  size_t D.41473;
  const char * D.41470;
  const char * D.41469;
  switch_bool_t D.41465;
  const char * iftmp.24;
  switch_bool_t D.41460;
  const char * iftmp.23;
  switch_bool_t D.41455;
  const char * iftmp.22;
  uint32_t D.41453;
  int D.41452;
  uint16_t D.41451;
  unsigned int D.41450;
  size_t D.41449;
  char * D.41448;
  size_t D.41447;
  uint32_t D.41442;
  uint32_t D.41439;
  char * D.41435;
  char[4] * iftmp.21;
  uint32_t D.41433;
  uint32_t D.41430;
  unsigned int D.41429;
  unsigned int D.41428;
  time_t D.41427;
  uint32_t D.41424;
  char * D.41423;
  switch_port_t D.41420;
  switch_port_t D.41417;
  char * D.41414;
  struct switch_channel_t * D.41407;
  struct switch_core_media_params_t * D.41406;
  uint16_t D.41405;

<bb 2>:
  buf = "";
  max_buf = "";
  max_data = "";
  family_13 = "IP4";
  # DEBUG family => family_13
  bit_removal_on_14 = "a=T38FaxFillBitRemoval\n";
  # DEBUG bit_removal_on => bit_removal_on_14
  bit_removal_off_15 = "";
  # DEBUG bit_removal_off => bit_removal_off_15
  mmr_on_16 = "a=T38FaxTranscodingMMR\n";
  # DEBUG mmr_on => mmr_on_16
  mmr_off_17 = "";
  # DEBUG mmr_off => mmr_off_17
  jbig_on_18 = "a=T38FaxTranscodingJBIG\n";
  # DEBUG jbig_on => jbig_on_18
  jbig_off_19 = "";
  # DEBUG jbig_off => jbig_off_19
  if (session_20(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 6995, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_21 = session_20(D)->media_handle;
  # DEBUG smh => smh_21
  if (smh_21 == 0B)
    goto <bb 42>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_22 = &smh_21->engines;
  # DEBUG a_engine => a_engine_22
  if (t38_options_23(D) == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  __assert_fail ("t38_options", "src/switch_core_media.c", 7004, &__PRETTY_FUNCTION__);

<bb 7>:
  ip_24 = t38_options_23(D)->local_ip;
  # DEBUG ip => ip_24
  D.41405_25 = t38_options_23(D)->local_port;
  port_26 = (uint32_t) D.41405_25;
  # DEBUG port => port_26
  D.41406_27 = smh_21->mparams;
  username_28 = D.41406_27->sdp_username;
  # DEBUG username => username_28
  D.41407_29 = session_20(D)->channel;
  var_30 = switch_channel_get_variable_dup (D.41407_29, "t38_broken_boolean", 1, -1);
  # DEBUG var => var_30
  broken_boolean_31 = switch_true (var_30);
  # DEBUG broken_boolean => broken_boolean_31
  if (ip_24 == 0B)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  ip_32 = a_engine_22->adv_sdp_ip;
  # DEBUG ip => ip_32
  if (ip_32 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  ip_33 = a_engine_22->proxy_sdp_ip;
  # DEBUG ip => ip_33

<bb 10>:
  # ip_1 = PHI <ip_24(7), ip_32(8), ip_33(9)>
  # DEBUG ip => ip_1
  if (ip_1 == 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.41407_34 = session_20(D)->channel;
  D.41414_35 = switch_channel_get_name (D.41407_34);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 7022, 0B, 2, "%s NO IP!\n", D.41414_35);
  goto <bb 42>;

<bb 12>:
  if (port_26 == 0)
    goto <bb 13>;
  else
    goto <bb 15>;

<bb 13>:
  D.41417_36 = a_engine_22->adv_sdp_port;
  port_37 = (uint32_t) D.41417_36;
  # DEBUG port => port_37
  if (port_37 == 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.41420_38 = a_engine_22->proxy_sdp_port;
  port_39 = (uint32_t) D.41420_38;
  # DEBUG port => port_39

<bb 15>:
  # port_2 = PHI <port_26(12), port_37(13), port_39(14)>
  # DEBUG port => port_2
  if (port_2 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.41407_40 = session_20(D)->channel;
  D.41423_41 = switch_channel_get_name (D.41407_40);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 7033, 0B, 2, "%s NO PORT!\n", D.41423_41);
  goto <bb 42>;

<bb 17>:
  D.41424_42 = smh_21->owner_id;
  if (D.41424_42 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.41427_43 = switch_epoch_time_now (0B);
  D.41428_44 = (unsigned int) D.41427_43;
  D.41429_45 = D.41428_44 - port_2;
  smh_21->owner_id = D.41429_45;

<bb 19>:
  D.41430_46 = smh_21->session_id;
  if (D.41430_46 == 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.41424_47 = smh_21->owner_id;
  smh_21->session_id = D.41424_47;

<bb 21>:
  D.41430_48 = smh_21->session_id;
  D.41433_49 = D.41430_48 + 1;
  smh_21->session_id = D.41433_49;
  D.41435_50 = __builtin_strchr (ip_1, 58);
  if (D.41435_50 != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  iftmp.21_51 = "IP6";
  goto <bb 24>;

<bb 23>:
  iftmp.21_52 = "IP4";

<bb 24>:
  # iftmp.21_9 = PHI <iftmp.21_51(22), iftmp.21_52(23)>
  family_53 = iftmp.21_9;
  # DEBUG family => family_53
  D.41424_54 = smh_21->owner_id;
  D.41430_55 = smh_21->session_id;
  switch_snprintf (&buf, 2048, "v=0\no=%s %010u %010u IN %s %s\ns=%s\nc=IN %s %s\nt=0 0\n", username_28, D.41424_54, D.41430_55, family_53, ip_1, username_28, family_53, ip_1);
  D.41439_56 = t38_options_23(D)->T38FaxMaxBuffer;
  if (D.41439_56 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.41439_57 = t38_options_23(D)->T38FaxMaxBuffer;
  switch_snprintf (&max_buf, 128, "a=T38FaxMaxBuffer:%d\n", D.41439_57);

<bb 26>:
  D.41442_58 = t38_options_23(D)->T38FaxMaxDatagram;
  if (D.41442_58 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.41442_59 = t38_options_23(D)->T38FaxMaxDatagram;
  switch_snprintf (&max_data, 128, "a=T38FaxMaxDatagram:%d\n", D.41442_59);

<bb 28>:
  if (broken_boolean_31 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  bit_removal_on_60 = "a=T38FaxFillBitRemoval:1\n";
  # DEBUG bit_removal_on => bit_removal_on_60
  bit_removal_off_61 = "a=T38FaxFillBitRemoval:0\n";
  # DEBUG bit_removal_off => bit_removal_off_61
  mmr_on_62 = "a=T38FaxTranscodingMMR:1\n";
  # DEBUG mmr_on => mmr_on_62
  mmr_off_63 = "a=T38FaxTranscodingMMR:0\n";
  # DEBUG mmr_off => mmr_off_63
  jbig_on_64 = "a=T38FaxTranscodingJBIG:1\n";
  # DEBUG jbig_on => jbig_on_64
  jbig_off_65 = "a=T38FaxTranscodingJBIG:0\n";
  # DEBUG jbig_off => jbig_off_65

<bb 30>:
  # bit_removal_on_3 = PHI <bit_removal_on_14(28), bit_removal_on_60(29)>
  # bit_removal_off_4 = PHI <bit_removal_off_15(28), bit_removal_off_61(29)>
  # mmr_on_5 = PHI <mmr_on_16(28), mmr_on_62(29)>
  # mmr_off_6 = PHI <mmr_off_17(28), mmr_off_63(29)>
  # jbig_on_7 = PHI <jbig_on_18(28), jbig_on_64(29)>
  # jbig_off_8 = PHI <jbig_off_19(28), jbig_off_65(29)>
  # DEBUG jbig_off => jbig_off_8
  # DEBUG jbig_on => jbig_on_7
  # DEBUG mmr_off => mmr_off_6
  # DEBUG mmr_on => mmr_on_5
  # DEBUG bit_removal_off => bit_removal_off_4
  # DEBUG bit_removal_on => bit_removal_on_3
  D.41447_66 = strlen (&buf);
  D.41448_67 = &buf + D.41447_66;
  D.41449_68 = strlen (&buf);
  D.41450_69 = 2048 - D.41449_68;
  D.41451_70 = t38_options_23(D)->T38FaxVersion;
  D.41452_71 = (int) D.41451_70;
  D.41453_72 = t38_options_23(D)->T38MaxBitRate;
  D.41455_73 = t38_options_23(D)->T38FaxFillBitRemoval;
  if (D.41455_73 != 0)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  iftmp.22_74 = bit_removal_on_3;
  goto <bb 33>;

<bb 32>:
  iftmp.22_75 = bit_removal_off_4;

<bb 33>:
  # iftmp.22_10 = PHI <iftmp.22_74(31), iftmp.22_75(32)>
  D.41460_76 = t38_options_23(D)->T38FaxTranscodingMMR;
  if (D.41460_76 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  iftmp.23_77 = mmr_on_5;
  goto <bb 36>;

<bb 35>:
  iftmp.23_78 = mmr_off_6;

<bb 36>:
  # iftmp.23_11 = PHI <iftmp.23_77(34), iftmp.23_78(35)>
  D.41465_79 = t38_options_23(D)->T38FaxTranscodingJBIG;
  if (D.41465_79 != 0)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  iftmp.24_80 = jbig_on_7;
  goto <bb 39>;

<bb 38>:
  iftmp.24_81 = jbig_off_8;

<bb 39>:
  # iftmp.24_12 = PHI <iftmp.24_80(37), iftmp.24_81(38)>
  D.41469_82 = t38_options_23(D)->T38FaxRateManagement;
  D.41470_83 = t38_options_23(D)->T38FaxUdpEC;
  switch_snprintf (D.41448_67, D.41450_69, "m=image %d udptl t38\na=T38FaxVersion:%d\na=T38MaxBitRate:%d\n%s%s%sa=T38FaxRateManagement:%s\n%s%sa=T38FaxUdpEC:%s\n", port_2, D.41452_71, D.41453_72, iftmp.22_10, iftmp.23_11, iftmp.24_12, D.41469_82, &max_buf, &max_data, D.41470_83);
  if (insist_84(D) != 0)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:
  D.41473_85 = strlen (&buf);
  D.41474_86 = &buf + D.41473_85;
  D.41475_87 = strlen (&buf);
  D.41476_88 = 2048 - D.41475_87;
  switch_snprintf (D.41474_86, D.41476_88, "m=audio 0 RTP/AVP 19\n");

<bb 41>:
  switch_core_media_set_local_sdp (session_20(D), &buf, 1);
  D.41407_89 = session_20(D)->channel;
  D.41477_90 = switch_channel_get_name (D.41407_89);
  D.41406_91 = smh_21->mparams;
  D.41478_92 = D.41406_91->local_sdp_str;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7113, session_20(D), 7, "%s image media sdp:\n%s\n", D.41477_90, D.41478_92);

<bb 42>:
  return;

}



;; Function switch_core_media_patch_sdp (switch_core_media_patch_sdp)



Renaming block #0



Renaming block #2

Renaming statement has_video = 0;

Renaming statement has_audio = 0;

Renaming statement has_ip = 0;

Renaming statement bad = 0;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement a_engine = &smh->engines;

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.41210 = smh->mparams;

Renaming statement D.41211 = D.41210->local_sdp_str;

Renaming statement D.41212 = _zstr (D.41211);

Renaming statement if (D.41212 != 0)



Renaming block #6

Renaming statement D.41210 = smh->mparams;

Renaming statement D.41211 = D.41210->local_sdp_str;

Renaming statement D.41215 = strlen (D.41211);

Renaming statement len = D.41215 * 2;

Renaming statement D.41210 = smh->mparams;

Renaming statement D.41216 = D.41210->ndlb;

Renaming statement D.41217 = D.41216 & 32;

Renaming statement if (D.41217 == 0)



Renaming block #7

Renaming statement D.41222 = session->channel;

Renaming statement D.41223 = switch_channel_test_flag (D.41222, 1);

Renaming statement if (D.41223 != 0)



Renaming block #8

Renaming statement D.41210 = smh->mparams;

Renaming statement D.41211 = D.41210->local_sdp_str;

Renaming statement D.41226 = switch_stristr ("sendonly", D.41211);

Renaming statement if (D.41226 != 0B)



Renaming block #9

Renaming statement D.41210 = smh->mparams;

Renaming statement D.41211 = D.41210->local_sdp_str;

Renaming statement D.41228 = switch_stristr ("0.0.0.0", D.41211);

Renaming statement if (D.41228 != 0B)



Renaming block #10

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7152, session, 7, "Skip patch on hold SDP\n");



Renaming block #11

Renaming statement D.41231 = a_engine->local_sdp_ip;

Renaming statement D.41232 = _zstr (D.41231);

Renaming statement if (D.41232 != 0)



Renaming block #12

Renaming statement D.41234 = a_engine->local_sdp_port;

Renaming statement if (D.41234 == 0)



Renaming block #13

Renaming statement D.41235 = switch_core_media_choose_port (session, 0, 1);

Renaming statement if (D.41235 != 0)



Renaming block #14

Renaming statement D.41222 = session->channel;

Renaming statement D.41238 = switch_channel_get_name (D.41222);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7159, session, 3, "%s I/O Error\n", D.41238);



Renaming block #15

Renaming statement D.41239 = a_engine->cur_payload_map;

Renaming statement D.41240 = switch_core_perform_session_strdup (session, "PROXY", "src/switch_core_media.c", &__func__, 7163);

Renaming statement D.41239->iananame = D.41240;

Renaming statement D.41239 = a_engine->cur_payload_map;

Renaming statement D.41239->rm_rate = 8000;

Renaming statement D.41239 = a_engine->cur_payload_map;

Renaming statement D.41239->adv_rm_rate = 8000;

Renaming statement D.41239 = a_engine->cur_payload_map;

Renaming statement D.41239->codec_ms = 20;



Renaming block #16

Renaming statement new_sdp = switch_core_perform_session_alloc (session, len, "src/switch_core_media.c", &__func__, 7169);

Renaming statement D.41234 = a_engine->local_sdp_port;

Renaming statement D.41241 = (int) D.41234;

Renaming statement switch_snprintf (&port_buf, 25, "%u", D.41241);

Renaming statement D.41210 = smh->mparams;

Renaming statement p = D.41210->local_sdp_str;

Renaming statement q = new_sdp;

Renaming statement D.41242 = strlen (p);

Renaming statement pe = p + D.41242;

Renaming statement D.41243 = len + -1;

Renaming statement qe = q + D.41243;



Renaming block #102

Renaming statement if (p != 0B)



Renaming block #103

Renaming statement D.41264 = *p;

Renaming statement if (D.41264 != 0)



Renaming block #17

Renaming statement if (p >= pe)



Renaming block #18

Renaming statement bad = 1;



Renaming block #19

Renaming statement if (q >= qe)



Renaming block #20

Renaming statement bad = 2;



Renaming block #21

Renaming statement D.41231 = a_engine->local_sdp_ip;

Renaming statement if (D.41231 != 0B)



Renaming block #22

Renaming statement D.41251 = strncmp ("c=IN IP", p, 7);

Renaming statement if (D.41251 == 0)



Renaming block #23

Renaming statement __builtin_strncpy (q, p, 7);

Renaming statement p = p + 7;

Renaming statement q = q + 7;

Renaming statement D.41254 = a_engine->adv_sdp_ip;

Renaming statement D.41255 = __builtin_strchr (D.41254, 58);

Renaming statement if (D.41255 != 0B)



Renaming block #24

Renaming statement iftmp.16 = "6 ";



Renaming block #25

Renaming statement iftmp.16 = "4 ";



Renaming block #26

Renaming statement __builtin_memcpy (q, iftmp.16, 2);

Renaming statement p = p + 2;

Renaming statement q = q + 2;

Renaming statement D.41254 = a_engine->adv_sdp_ip;

Renaming statement D.41254 = a_engine->adv_sdp_ip;

Renaming statement D.41259 = strlen (D.41254);

Renaming statement __builtin_strncpy (q, D.41254, D.41259);

Renaming statement D.41254 = a_engine->adv_sdp_ip;

Renaming statement D.41260 = strlen (D.41254);

Renaming statement q = q + D.41260;



Renaming block #30

Renaming statement if (p != 0B)



Renaming block #31

Renaming statement D.41264 = *p;

Renaming statement if (D.41264 != 0)



Renaming block #32

Renaming statement D.41266 = *p;

Renaming statement D.41267 = D.41266 + 208;

Renaming statement D.41268 = D.41267 <= 9;

Renaming statement D.41269 = D.41266 == 46;

Renaming statement D.41270 = D.41268 || D.41269;

Renaming statement if (D.41270 != 0)



Renaming block #33

Renaming statement D.41264 = *p;

Renaming statement if (D.41264 == 58)



Renaming block #34

Renaming statement D.41264 = *p;

Renaming statement D.41273 = D.41264 + 191;

Renaming statement if (D.41273 <= 5)



Renaming block #35

Renaming statement D.41264 = *p;

Renaming statement D.41275 = D.41264 + 159;

Renaming statement if (D.41275 <= 5)



Renaming block #27

Renaming statement if (p >= pe)



Renaming block #28

Renaming statement bad = 3;



Renaming block #29

Renaming statement p = p + 1;



Renaming block #36

Renaming statement has_ip = has_ip + 1;



Renaming block #37

Renaming statement D.41276 = strncmp ("o=", p, 2);

Renaming statement if (D.41276 == 0)



Renaming block #38

Renaming statement oe = __builtin_strchr (p, 10);

Renaming statement if (oe != 0B)



Renaming block #39

Renaming statement family = "IP4";

Renaming statement if (oe >= pe)



Renaming block #40

Renaming statement bad = 5;



Renaming block #41

Renaming statement oe.17 = (int) oe;

Renaming statement p.18 = (int) p;

Renaming statement D.41285 = oe.17 - p.18;

Renaming statement len = (switch_size_t) D.41285;

Renaming statement p = p + len;

Renaming statement D.41210 = smh->mparams;

Renaming statement D.41287 = D.41210->sipip;

Renaming statement D.41288 = __builtin_strchr (D.41287, 58);

Renaming statement if (D.41288 != 0B)



Renaming block #42

Renaming statement iftmp.19 = "IP6";



Renaming block #43

Renaming statement iftmp.19 = "IP4";



Renaming block #44

Renaming statement family = iftmp.19;

Renaming statement D.41292 = smh->owner_id;

Renaming statement if (D.41292 == 0)



Renaming block #45

Renaming statement D.41295 = switch_epoch_time_now (0B);

Renaming statement D.41296 = (unsigned int) D.41295;

Renaming statement D.41297 = D.41296 * 31821;

Renaming statement D.41298 = D.41297 + 13849;

Renaming statement smh->owner_id = D.41298;



Renaming block #46

Renaming statement D.41299 = smh->session_id;

Renaming statement if (D.41299 == 0)



Renaming block #47

Renaming statement D.41292 = smh->owner_id;

Renaming statement smh->session_id = D.41292;



Renaming block #48

Renaming statement D.41299 = smh->session_id;

Renaming statement D.41302 = D.41299 + 1;

Renaming statement smh->session_id = D.41302;

Renaming statement D.41303 = (const char * restrict) &"o=%s %010u %010u IN %s %s\n"[0];

Renaming statement D.41210 = smh->mparams;

Renaming statement D.41304 = D.41210->sdp_username;

Renaming statement D.41292 = smh->owner_id;

Renaming statement D.41299 = smh->session_id;

Renaming statement D.41210 = smh->mparams;

Renaming statement D.41287 = D.41210->sipip;

Renaming statement snprintf (&o_line, 1024, D.41303, D.41304, D.41292, D.41299, family, D.41287);

Renaming statement D.41305 = strlen (&o_line);

Renaming statement __builtin_strncpy (q, &o_line, D.41305);

Renaming statement D.41306 = strlen (&o_line);

Renaming statement D.41307 = D.41306 + -1;

Renaming statement q = q + D.41307;



Renaming block #49

Renaming statement D.41309 = strncmp ("s=", p, 2);

Renaming statement if (D.41309 == 0)



Renaming block #50

Renaming statement se = __builtin_strchr (p, 10);

Renaming statement if (se != 0B)



Renaming block #51

Renaming statement if (se >= pe)



Renaming block #52

Renaming statement bad = 5;



Renaming block #53

Renaming statement se.20 = (int) se;

Renaming statement p.18 = (int) p;

Renaming statement D.41317 = se.20 - p.18;

Renaming statement len = (switch_size_t) D.41317;

Renaming statement p = p + len;

Renaming statement D.41318 = (const char * restrict) &"s=%s\n"[0];

Renaming statement D.41210 = smh->mparams;

Renaming statement D.41304 = D.41210->sdp_username;

Renaming statement snprintf (&s_line, 1024, D.41318, D.41304);

Renaming statement D.41319 = strlen (&s_line);

Renaming statement __builtin_strncpy (q, &s_line, D.41319);

Renaming statement D.41320 = strlen (&s_line);

Renaming statement D.41321 = D.41320 + -1;

Renaming statement q = q + D.41321;



Renaming block #54

Renaming statement D.41326 = strncmp ("m=audio ", p, 8);

Renaming statement if (D.41326 == 0)



Renaming block #55

Renaming statement D.41328 = strncmp ("m=image ", p, 8);

Renaming statement if (D.41328 == 0)



Renaming block #56

Renaming statement D.41329 = p + 8;

Renaming statement D.41330 = *D.41329;

Renaming statement if (D.41330 != 48)



Renaming block #57

Renaming statement __builtin_strncpy (q, p, 8);

Renaming statement p = p + 8;

Renaming statement if (p >= pe)



Renaming block #58

Renaming statement bad = 4;



Renaming block #59

Renaming statement q = q + 8;

Renaming statement if (q >= qe)



Renaming block #60

Renaming statement bad = 5;



Renaming block #61

Renaming statement D.41336 = strlen (&port_buf);

Renaming statement __builtin_strncpy (q, &port_buf, D.41336);

Renaming statement D.41337 = strlen (&port_buf);

Renaming statement q = q + D.41337;

Renaming statement if (q >= qe)



Renaming block #62

Renaming statement bad = 6;



Renaming block #66

Renaming statement if (p != 0B)



Renaming block #67

Renaming statement D.41264 = *p;

Renaming statement if (D.41264 != 0)



Renaming block #68

Renaming statement D.41264 = *p;

Renaming statement D.41344 = D.41264 + 208;

Renaming statement if (D.41344 <= 9)



Renaming block #63

Renaming statement if (p >= pe)



Renaming block #64

Renaming statement bad = 7;



Renaming block #65

Renaming statement p = p + 1;



Renaming block #69

Renaming statement has_audio = has_audio + 1;



Renaming block #70

Renaming statement D.41345 = strncmp ("m=video ", p, 8);

Renaming statement if (D.41345 == 0)



Renaming block #71

Renaming statement D.41329 = p + 8;

Renaming statement D.41330 = *D.41329;

Renaming statement if (D.41330 != 48)



Renaming block #72

Renaming statement if (has_video == 0)



Renaming block #73

Renaming statement switch_core_media_choose_port (session, 1, 1);

Renaming statement D.41352 = v_engine->cur_payload_map;

Renaming statement D.41352->rm_encoding = "PROXY-VID";

Renaming statement D.41352 = v_engine->cur_payload_map;

Renaming statement D.41352->rm_rate = 90000;

Renaming statement D.41352 = v_engine->cur_payload_map;

Renaming statement D.41352->adv_rm_rate = 90000;

Renaming statement D.41352 = v_engine->cur_payload_map;

Renaming statement D.41352->codec_ms = 0;

Renaming statement D.41353 = v_engine->adv_sdp_port;

Renaming statement D.41354 = (int) D.41353;

Renaming statement switch_snprintf (&vport_buf, 25, "%u", D.41354);

Renaming statement D.41222 = session->channel;

Renaming statement D.41355 = switch_channel_test_ready (D.41222, 1, 1);

Renaming statement if (D.41355 != 0)



Renaming block #74

Renaming statement D.41358 = v_engine->rtp_session;

Renaming statement D.41359 = switch_rtp_ready (D.41358);

Renaming statement if (D.41359 == 0)



Renaming block #75

Renaming statement D.41222 = session->channel;

Renaming statement switch_channel_set_flag_value (D.41222, 98, 1);

Renaming statement D.41222 = session->channel;

Renaming statement switch_channel_set_flag_value (D.41222, 103, 1);

Renaming statement switch_core_media_activate_rtp (session);



Renaming block #76

Renaming statement __builtin_strncpy (q, p, 8);

Renaming statement p = p + 8;

Renaming statement if (p >= pe)



Renaming block #77

Renaming statement bad = 8;



Renaming block #78

Renaming statement q = q + 8;

Renaming statement if (q >= qe)



Renaming block #79

Renaming statement bad = 9;



Renaming block #80

Renaming statement D.41366 = strlen (&vport_buf);

Renaming statement __builtin_strncpy (q, &vport_buf, D.41366);

Renaming statement D.41367 = strlen (&vport_buf);

Renaming statement q = q + D.41367;

Renaming statement if (q >= qe)



Renaming block #81

Renaming statement bad = 10;



Renaming block #85

Renaming statement if (p != 0B)



Renaming block #86

Renaming statement D.41264 = *p;

Renaming statement if (D.41264 != 0)



Renaming block #87

Renaming statement D.41264 = *p;

Renaming statement D.41344 = D.41264 + 208;

Renaming statement if (D.41344 <= 9)



Renaming block #82

Renaming statement if (p >= pe)



Renaming block #83

Renaming statement bad = 11;



Renaming block #84

Renaming statement p = p + 1;



Renaming block #88

Renaming statement has_video = has_video + 1;



Renaming block #94

Renaming statement if (p != 0B)



Renaming block #95

Renaming statement D.41264 = *p;

Renaming statement if (D.41264 != 0)



Renaming block #96

Renaming statement D.41264 = *p;

Renaming statement if (D.41264 != 10)



Renaming block #89

Renaming statement if (p >= pe)



Renaming block #90

Renaming statement bad = 12;



Renaming block #91

Renaming statement if (q >= qe)



Renaming block #92

Renaming statement bad = 13;



Renaming block #93

Renaming statement D.41264 = *p;

Renaming statement *q = D.41264;

Renaming statement q = q + 1;

Renaming statement p = p + 1;



Renaming block #97

Renaming statement if (p >= pe)



Renaming block #98

Renaming statement bad = 14;



Renaming block #99

Renaming statement if (q >= qe)



Renaming block #100

Renaming statement bad = 15;



Renaming block #101

Renaming statement D.41264 = *p;

Renaming statement *q = D.41264;

Renaming statement q = q + 1;

Renaming statement p = p + 1;



Renaming block #104

Renaming statement if (bad != 0)



Renaming block #105

Renaming statement D.41222 = session->channel;

Renaming statement D.41389 = switch_channel_check_signal (D.41222, 1);

Renaming statement if (D.41389 != 0)



Renaming block #106

Renaming statement D.41222 = session->channel;

Renaming statement D.41391 = switch_channel_get_state (D.41222);

Renaming statement if (D.41391 > 9)



Renaming block #108

Renaming statement D.41393 = has_ip | has_audio;

Renaming statement if (D.41393 == 0)



Renaming block #109

Renaming statement D.41222 = session->channel;

Renaming statement D.41396 = switch_channel_get_name (D.41222);

Renaming statement D.41210 = smh->mparams;

Renaming statement D.41211 = D.41210->local_sdp_str;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7400, session, 7, "%s SDP has no audio in it.\n%s\n", D.41396, D.41211);



Renaming block #110

Renaming statement D.41222 = session->channel;

Renaming statement D.41397 = switch_channel_get_name (D.41222);

Renaming statement D.41210 = smh->mparams;

Renaming statement D.41211 = D.41210->local_sdp_str;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7406, session, 7, "%s Patched SDP\n---\n%s\n+++\n%s\n", D.41397, D.41211, new_sdp);

Renaming statement switch_core_media_set_local_sdp (session, new_sdp, 0);



Renaming block #107

Renaming statement D.41222 = session->channel;

Renaming statement D.41392 = switch_channel_get_name (D.41222);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7394, session, 7, "%s too late.\n", D.41392);



Renaming block #111



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement port_buf = "";

Updating SSA information for statement vport_buf = "";



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 7134, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_24 = session_23(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.41210_27 = smh_24->mparams;

Updating SSA information for statement D.41211_28 = D.41210_27->local_sdp_str;

Updating SSA information for statement D.41212_29 = _zstr (D.41211_28);



Registering new PHI nodes in block #6

Updating SSA information for statement D.41210_30 = smh_24->mparams;

Updating SSA information for statement D.41211_31 = D.41210_30->local_sdp_str;

Updating SSA information for statement D.41215_32 = strlen (D.41211_31);

Updating SSA information for statement D.41210_34 = smh_24->mparams;

Updating SSA information for statement D.41216_35 = D.41210_34->ndlb;



Registering new PHI nodes in block #7

Updating SSA information for statement D.41222_37 = session_23(D)->channel;

Updating SSA information for statement D.41223_38 = switch_channel_test_flag (D.41222_37, 1);



Registering new PHI nodes in block #8

Updating SSA information for statement D.41210_39 = smh_24->mparams;

Updating SSA information for statement D.41211_40 = D.41210_39->local_sdp_str;

Updating SSA information for statement D.41226_41 = switch_stristr ("sendonly", D.41211_40);



Registering new PHI nodes in block #9

Updating SSA information for statement D.41210_42 = smh_24->mparams;

Updating SSA information for statement D.41211_43 = D.41210_42->local_sdp_str;

Updating SSA information for statement D.41228_44 = switch_stristr ("0.0.0.0", D.41211_43);



Registering new PHI nodes in block #10

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7152, session_23(D), 7, "Skip patch on hold SDP\n");



Registering new PHI nodes in block #11

Updating SSA information for statement D.41231_45 = a_engine_25->local_sdp_ip;

Updating SSA information for statement D.41232_46 = _zstr (D.41231_45);



Registering new PHI nodes in block #12

Updating SSA information for statement D.41234_47 = a_engine_25->local_sdp_port;



Registering new PHI nodes in block #13

Updating SSA information for statement D.41235_48 = switch_core_media_choose_port (session_23(D), 0, 1);



Registering new PHI nodes in block #14

Updating SSA information for statement D.41222_49 = session_23(D)->channel;

Updating SSA information for statement D.41238_50 = switch_channel_get_name (D.41222_49);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7159, session_23(D), 3, "%s I/O Error\n", D.41238_50);



Registering new PHI nodes in block #15

Updating SSA information for statement D.41239_51 = a_engine_25->cur_payload_map;

Updating SSA information for statement D.41240_52 = switch_core_perform_session_strdup (session_23(D), "PROXY", "src/switch_core_media.c", &__func__, 7163);

Updating SSA information for statement D.41239_51->iananame = D.41240_52;

Updating SSA information for statement D.41239_53 = a_engine_25->cur_payload_map;

Updating SSA information for statement D.41239_53->rm_rate = 8000;

Updating SSA information for statement D.41239_54 = a_engine_25->cur_payload_map;

Updating SSA information for statement D.41239_54->adv_rm_rate = 8000;

Updating SSA information for statement D.41239_55 = a_engine_25->cur_payload_map;

Updating SSA information for statement D.41239_55->codec_ms = 20;



Registering new PHI nodes in block #16

Updating SSA information for statement new_sdp_56 = switch_core_perform_session_alloc (session_23(D), len_33, "src/switch_core_media.c", &__func__, 7169);

Updating SSA information for statement D.41234_57 = a_engine_25->local_sdp_port;

Updating SSA information for statement switch_snprintf (&port_buf, 25, "%u", D.41241_58);

Updating SSA information for statement D.41210_59 = smh_24->mparams;

Updating SSA information for statement p_60 = D.41210_59->local_sdp_str;

Updating SSA information for statement D.41242_62 = strlen (p_60);



Registering new PHI nodes in block #102



Registering new PHI nodes in block #103

Updating SSA information for statement D.41264_66 = *p_5;



Registering new PHI nodes in block #17



Registering new PHI nodes in block #18



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement D.41231_69 = a_engine_25->local_sdp_ip;



Registering new PHI nodes in block #22

Updating SSA information for statement D.41251_70 = strncmp ("c=IN IP", p_5, 7);



Registering new PHI nodes in block #23

Updating SSA information for statement __builtin_strncpy (q_7, p_5, 7);

Updating SSA information for statement D.41254_73 = a_engine_25->adv_sdp_ip;

Updating SSA information for statement D.41255_74 = __builtin_strchr (D.41254_73, 58);



Registering new PHI nodes in block #24



Registering new PHI nodes in block #25



Registering new PHI nodes in block #26

Updating SSA information for statement __builtin_memcpy (q_72, iftmp.16_17, 2);

Updating SSA information for statement D.41254_79 = a_engine_25->adv_sdp_ip;

Updating SSA information for statement D.41254_80 = a_engine_25->adv_sdp_ip;

Updating SSA information for statement D.41259_81 = strlen (D.41254_80);

Updating SSA information for statement __builtin_strncpy (q_78, D.41254_80, D.41259_81);

Updating SSA information for statement D.41254_82 = a_engine_25->adv_sdp_ip;

Updating SSA information for statement D.41260_83 = strlen (D.41254_82);



Registering new PHI nodes in block #30



Registering new PHI nodes in block #31

Updating SSA information for statement D.41264_85 = *p_1;



Registering new PHI nodes in block #32

Updating SSA information for statement D.41266_86 = *p_1;



Registering new PHI nodes in block #33

Updating SSA information for statement D.41264_91 = *p_1;



Registering new PHI nodes in block #34

Updating SSA information for statement D.41264_92 = *p_1;



Registering new PHI nodes in block #35

Updating SSA information for statement D.41264_94 = *p_1;



Registering new PHI nodes in block #27



Registering new PHI nodes in block #28



Registering new PHI nodes in block #29



Registering new PHI nodes in block #36



Registering new PHI nodes in block #37

Updating SSA information for statement D.41276_99 = strncmp ("o=", p_5, 2);



Registering new PHI nodes in block #38

Updating SSA information for statement oe_100 = __builtin_strchr (p_5, 10);



Registering new PHI nodes in block #39

Updating SSA information for statement o_line = "";



Registering new PHI nodes in block #40



Registering new PHI nodes in block #41

Updating SSA information for statement D.41210_108 = smh_24->mparams;

Updating SSA information for statement D.41287_109 = D.41210_108->sipip;

Updating SSA information for statement D.41288_110 = __builtin_strchr (D.41287_109, 58);



Registering new PHI nodes in block #42



Registering new PHI nodes in block #43



Registering new PHI nodes in block #44

Updating SSA information for statement D.41292_114 = smh_24->owner_id;



Registering new PHI nodes in block #45

Updating SSA information for statement D.41295_115 = switch_epoch_time_now (0B);

Updating SSA information for statement smh_24->owner_id = D.41298_118;



Registering new PHI nodes in block #46

Updating SSA information for statement D.41299_119 = smh_24->session_id;



Registering new PHI nodes in block #47

Updating SSA information for statement D.41292_120 = smh_24->owner_id;

Updating SSA information for statement smh_24->session_id = D.41292_120;



Registering new PHI nodes in block #48

Updating SSA information for statement D.41299_121 = smh_24->session_id;

Updating SSA information for statement smh_24->session_id = D.41302_122;

Updating SSA information for statement D.41210_124 = smh_24->mparams;

Updating SSA information for statement D.41304_125 = D.41210_124->sdp_username;

Updating SSA information for statement D.41292_126 = smh_24->owner_id;

Updating SSA information for statement D.41299_127 = smh_24->session_id;

Updating SSA information for statement D.41210_128 = smh_24->mparams;

Updating SSA information for statement D.41287_129 = D.41210_128->sipip;

Updating SSA information for statement snprintf (&o_line, 1024, D.41303_123, D.41304_125, D.41292_126, D.41299_127, family_113, D.41287_129);

Updating SSA information for statement D.41305_130 = strlen (&o_line);

Updating SSA information for statement __builtin_strncpy (q_7, &o_line, D.41305_130);

Updating SSA information for statement D.41306_131 = strlen (&o_line);



Registering new PHI nodes in block #49

Updating SSA information for statement D.41309_134 = strncmp ("s=", p_5, 2);



Registering new PHI nodes in block #50

Updating SSA information for statement se_135 = __builtin_strchr (p_5, 10);



Registering new PHI nodes in block #51

Updating SSA information for statement s_line = "";



Registering new PHI nodes in block #52



Registering new PHI nodes in block #53

Updating SSA information for statement D.41210_143 = smh_24->mparams;

Updating SSA information for statement D.41304_144 = D.41210_143->sdp_username;

Updating SSA information for statement snprintf (&s_line, 1024, D.41318_142, D.41304_144);

Updating SSA information for statement D.41319_145 = strlen (&s_line);

Updating SSA information for statement __builtin_strncpy (q_7, &s_line, D.41319_145);

Updating SSA information for statement D.41320_146 = strlen (&s_line);



Registering new PHI nodes in block #54

Updating SSA information for statement D.41326_149 = strncmp ("m=audio ", p_5, 8);



Registering new PHI nodes in block #55

Updating SSA information for statement D.41328_150 = strncmp ("m=image ", p_5, 8);



Registering new PHI nodes in block #56

Updating SSA information for statement D.41330_152 = *D.41329_151;



Registering new PHI nodes in block #57

Updating SSA information for statement __builtin_strncpy (q_7, p_5, 8);



Registering new PHI nodes in block #58



Registering new PHI nodes in block #59



Registering new PHI nodes in block #60



Registering new PHI nodes in block #61

Updating SSA information for statement D.41336_157 = strlen (&port_buf);

Updating SSA information for statement __builtin_strncpy (q_155, &port_buf, D.41336_157);

Updating SSA information for statement D.41337_158 = strlen (&port_buf);



Registering new PHI nodes in block #62



Registering new PHI nodes in block #66



Registering new PHI nodes in block #67

Updating SSA information for statement D.41264_161 = *p_2;



Registering new PHI nodes in block #68

Updating SSA information for statement D.41264_162 = *p_2;



Registering new PHI nodes in block #63



Registering new PHI nodes in block #64



Registering new PHI nodes in block #65



Registering new PHI nodes in block #69



Registering new PHI nodes in block #70

Updating SSA information for statement D.41345_167 = strncmp ("m=video ", p_5, 8);



Registering new PHI nodes in block #71

Updating SSA information for statement D.41330_169 = *D.41329_168;



Registering new PHI nodes in block #72



Registering new PHI nodes in block #73

Updating SSA information for statement switch_core_media_choose_port (session_23(D), 1, 1);

Updating SSA information for statement D.41352_170 = v_engine_26->cur_payload_map;

Updating SSA information for statement D.41352_170->rm_encoding = "PROXY-VID";

Updating SSA information for statement D.41352_171 = v_engine_26->cur_payload_map;

Updating SSA information for statement D.41352_171->rm_rate = 90000;

Updating SSA information for statement D.41352_172 = v_engine_26->cur_payload_map;

Updating SSA information for statement D.41352_172->adv_rm_rate = 90000;

Updating SSA information for statement D.41352_173 = v_engine_26->cur_payload_map;

Updating SSA information for statement D.41352_173->codec_ms = 0;

Updating SSA information for statement D.41353_174 = v_engine_26->adv_sdp_port;

Updating SSA information for statement switch_snprintf (&vport_buf, 25, "%u", D.41354_175);

Updating SSA information for statement D.41222_176 = session_23(D)->channel;

Updating SSA information for statement D.41355_177 = switch_channel_test_ready (D.41222_176, 1, 1);



Registering new PHI nodes in block #74

Updating SSA information for statement D.41358_178 = v_engine_26->rtp_session;

Updating SSA information for statement D.41359_179 = switch_rtp_ready (D.41358_178);



Registering new PHI nodes in block #75

Updating SSA information for statement D.41222_180 = session_23(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41222_180, 98, 1);

Updating SSA information for statement D.41222_181 = session_23(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41222_181, 103, 1);

Updating SSA information for statement switch_core_media_activate_rtp (session_23(D));



Registering new PHI nodes in block #76

Updating SSA information for statement __builtin_strncpy (q_7, p_5, 8);



Registering new PHI nodes in block #77



Registering new PHI nodes in block #78



Registering new PHI nodes in block #79



Registering new PHI nodes in block #80

Updating SSA information for statement D.41366_186 = strlen (&vport_buf);

Updating SSA information for statement __builtin_strncpy (q_184, &vport_buf, D.41366_186);

Updating SSA information for statement D.41367_187 = strlen (&vport_buf);



Registering new PHI nodes in block #81



Registering new PHI nodes in block #85



Registering new PHI nodes in block #86

Updating SSA information for statement D.41264_190 = *p_3;



Registering new PHI nodes in block #87

Updating SSA information for statement D.41264_191 = *p_3;



Registering new PHI nodes in block #82



Registering new PHI nodes in block #83



Registering new PHI nodes in block #84



Registering new PHI nodes in block #88



Registering new PHI nodes in block #94



Registering new PHI nodes in block #95

Updating SSA information for statement D.41264_196 = *p_4;



Registering new PHI nodes in block #96

Updating SSA information for statement D.41264_197 = *p_4;



Registering new PHI nodes in block #89



Registering new PHI nodes in block #90



Registering new PHI nodes in block #91



Registering new PHI nodes in block #92



Registering new PHI nodes in block #93

Updating SSA information for statement D.41264_200 = *p_4;

Updating SSA information for statement *q_6 = D.41264_200;



Registering new PHI nodes in block #97



Registering new PHI nodes in block #98



Registering new PHI nodes in block #99



Registering new PHI nodes in block #100



Registering new PHI nodes in block #101

Updating SSA information for statement D.41264_205 = *p_4;

Updating SSA information for statement *q_6 = D.41264_205;



Registering new PHI nodes in block #104



Registering new PHI nodes in block #105

Updating SSA information for statement D.41222_208 = session_23(D)->channel;

Updating SSA information for statement D.41389_209 = switch_channel_check_signal (D.41222_208, 1);



Registering new PHI nodes in block #106

Updating SSA information for statement D.41222_210 = session_23(D)->channel;

Updating SSA information for statement D.41391_211 = switch_channel_get_state (D.41222_210);



Registering new PHI nodes in block #108



Registering new PHI nodes in block #109

Updating SSA information for statement D.41222_213 = session_23(D)->channel;

Updating SSA information for statement D.41396_214 = switch_channel_get_name (D.41222_213);

Updating SSA information for statement D.41210_215 = smh_24->mparams;

Updating SSA information for statement D.41211_216 = D.41210_215->local_sdp_str;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7400, session_23(D), 7, "%s SDP has no audio in it.\n%s\n", D.41396_214, D.41211_216);



Registering new PHI nodes in block #110

Updating SSA information for statement D.41222_217 = session_23(D)->channel;

Updating SSA information for statement D.41397_218 = switch_channel_get_name (D.41222_217);

Updating SSA information for statement D.41210_219 = smh_24->mparams;

Updating SSA information for statement D.41211_220 = D.41210_219->local_sdp_str;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7406, session_23(D), 7, "%s Patched SDP\n---\n%s\n+++\n%s\n", D.41397_218, D.41211_220, new_sdp_56);

Updating SSA information for statement switch_core_media_set_local_sdp (session_23(D), new_sdp_56, 0);



Registering new PHI nodes in block #107

Updating SSA information for statement D.41222_221 = session_23(D)->channel;

Updating SSA information for statement D.41392_222 = switch_channel_get_name (D.41222_221);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7394, session_23(D), 7, "%s too late.\n", D.41392_222);



Registering new PHI nodes in block #111



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 112
Number of blocks to update: 111 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 


Scope blocks after cleanups:

{ Scope block #0 
  switch_size_t len;
  char * p;
  char * q;
  char * pe;
  char * qe;
  int has_video;
  int has_audio;
  int has_ip;
  char port_buf[25];
  char vport_buf[25];
  char * new_sdp;
  int bad;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_patch_sdp";
  static const char __func__[28] = "switch_core_media_patch_sdp";
  void end = <<< error >>>; (unused)

  { Scope block #0 
    char * oe;
    switch_size_t len;

    { Scope block #0 
      const char * family;
      char o_line[1024];

    }

  }

  { Scope block #0 
    char * se;
    switch_size_t len;

    { Scope block #0 
      char s_line[1024];

    }

  }

}
switch_core_media_patch_sdp (struct switch_core_session_t * session)
{
  char s_line[1024];
  switch_size_t len;
  char * se;
  char o_line[1024];
  const char * family;
  switch_size_t len;
  char * oe;
  static const char __func__[28] = "switch_core_media_patch_sdp";
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_patch_sdp";
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  int bad;
  char * new_sdp;
  char vport_buf[25];
  char port_buf[25];
  int has_ip;
  int has_audio;
  int has_video;
  char * qe;
  char * pe;
  char * q;
  char * p;
  switch_size_t len;
  char * D.41397;
  char * D.41396;
  int D.41393;
  char * D.41392;
  switch_channel_state_t D.41391;
  int D.41389;
  size_t D.41367;
  size_t D.41366;
  uint8_t D.41359;
  struct switch_rtp_t * D.41358;
  int D.41355;
  int D.41354;
  switch_port_t D.41353;
  struct payload_map_t * D.41352;
  int D.41345;
  char D.41344;
  size_t D.41337;
  size_t D.41336;
  char D.41330;
  char * D.41329;
  int D.41328;
  int D.41326;
  unsigned int D.41321;
  size_t D.41320;
  size_t D.41319;
  const char * restrict D.41318;
  int D.41317;
  int se.20;
  int D.41309;
  unsigned int D.41307;
  size_t D.41306;
  size_t D.41305;
  char * D.41304;
  const char * restrict D.41303;
  uint32_t D.41302;
  uint32_t D.41299;
  unsigned int D.41298;
  unsigned int D.41297;
  unsigned int D.41296;
  time_t D.41295;
  uint32_t D.41292;
  char * D.41288;
  char * D.41287;
  char[4] * iftmp.19;
  int D.41285;
  int p.18;
  int oe.17;
  int D.41276;
  char D.41275;
  char D.41273;
  _Bool D.41270;
  _Bool D.41269;
  _Bool D.41268;
  char D.41267;
  char D.41266;
  char D.41264;
  size_t D.41260;
  size_t D.41259;
  char * D.41255;
  char * D.41254;
  char[3] * iftmp.16;
  int D.41251;
  unsigned int D.41243;
  size_t D.41242;
  int D.41241;
  char * D.41240;
  struct payload_map_t * D.41239;
  char * D.41238;
  switch_status_t D.41235;
  switch_port_t D.41234;
  int D.41232;
  char * D.41231;
  const char * D.41228;
  const char * D.41226;
  uint32_t D.41223;
  struct switch_channel_t * D.41222;
  unsigned int D.41217;
  switch_core_media_NDLB_t D.41216;
  size_t D.41215;
  int D.41212;
  char * D.41211;
  struct switch_core_media_params_t * D.41210;

<bb 2>:
  has_video_19 = 0;
  # DEBUG has_video => has_video_19
  has_audio_20 = 0;
  # DEBUG has_audio => has_audio_20
  has_ip_21 = 0;
  # DEBUG has_ip => has_ip_21
  port_buf = "";
  vport_buf = "";
  bad_22 = 0;
  # DEBUG bad => bad_22
  if (session_23(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7134, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_24 = session_23(D)->media_handle;
  # DEBUG smh => smh_24
  if (smh_24 == 0B)
    goto <bb 111>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_25 = &smh_24->engines;
  # DEBUG a_engine => a_engine_25
  v_engine_26 = &smh_24->engines[1];
  # DEBUG v_engine => v_engine_26
  D.41210_27 = smh_24->mparams;
  D.41211_28 = D.41210_27->local_sdp_str;
  D.41212_29 = _zstr (D.41211_28);
  if (D.41212_29 != 0)
    goto <bb 111>;
  else
    goto <bb 6>;

<bb 6>:
  D.41210_30 = smh_24->mparams;
  D.41211_31 = D.41210_30->local_sdp_str;
  D.41215_32 = strlen (D.41211_31);
  len_33 = D.41215_32 * 2;
  # DEBUG len => len_33
  D.41210_34 = smh_24->mparams;
  D.41216_35 = D.41210_34->ndlb;
  D.41217_36 = D.41216_35 & 32;
  if (D.41217_36 == 0)
    goto <bb 7>;
  else
    goto <bb 11>;

<bb 7>:
  D.41222_37 = session_23(D)->channel;
  D.41223_38 = switch_channel_test_flag (D.41222_37, 1);
  if (D.41223_38 != 0)
    goto <bb 8>;
  else
    goto <bb 11>;

<bb 8>:
  D.41210_39 = smh_24->mparams;
  D.41211_40 = D.41210_39->local_sdp_str;
  D.41226_41 = switch_stristr ("sendonly", D.41211_40);
  if (D.41226_41 != 0B)
    goto <bb 10>;
  else
    goto <bb 9>;

<bb 9>:
  D.41210_42 = smh_24->mparams;
  D.41211_43 = D.41210_42->local_sdp_str;
  D.41228_44 = switch_stristr ("0.0.0.0", D.41211_43);
  if (D.41228_44 != 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7152, session_23(D), 7, "Skip patch on hold SDP\n");
  goto <bb 111>;

<bb 11>:
  D.41231_45 = a_engine_25->local_sdp_ip;
  D.41232_46 = _zstr (D.41231_45);
  if (D.41232_46 != 0)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:
  D.41234_47 = a_engine_25->local_sdp_port;
  if (D.41234_47 == 0)
    goto <bb 13>;
  else
    goto <bb 16>;

<bb 13>:
  D.41235_48 = switch_core_media_choose_port (session_23(D), 0, 1);
  if (D.41235_48 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.41222_49 = session_23(D)->channel;
  D.41238_50 = switch_channel_get_name (D.41222_49);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7159, session_23(D), 3, "%s I/O Error\n", D.41238_50);
  goto <bb 111>;

<bb 15>:
  D.41239_51 = a_engine_25->cur_payload_map;
  D.41240_52 = switch_core_perform_session_strdup (session_23(D), "PROXY", "src/switch_core_media.c", &__func__, 7163);
  D.41239_51->iananame = D.41240_52;
  D.41239_53 = a_engine_25->cur_payload_map;
  D.41239_53->rm_rate = 8000;
  D.41239_54 = a_engine_25->cur_payload_map;
  D.41239_54->adv_rm_rate = 8000;
  D.41239_55 = a_engine_25->cur_payload_map;
  D.41239_55->codec_ms = 20;

<bb 16>:
  new_sdp_56 = switch_core_perform_session_alloc (session_23(D), len_33, "src/switch_core_media.c", &__func__, 7169);
  # DEBUG new_sdp => new_sdp_56
  D.41234_57 = a_engine_25->local_sdp_port;
  D.41241_58 = (int) D.41234_57;
  switch_snprintf (&port_buf, 25, "%u", D.41241_58);
  D.41210_59 = smh_24->mparams;
  p_60 = D.41210_59->local_sdp_str;
  # DEBUG p => p_60
  q_61 = new_sdp_56;
  # DEBUG q => q_61
  D.41242_62 = strlen (p_60);
  pe_63 = p_60 + D.41242_62;
  # DEBUG pe => pe_63
  D.41243_64 = len_33 + -1;
  qe_65 = q_61 + D.41243_64;
  # DEBUG qe => qe_65
  goto <bb 102>;

<bb 17>:
  if (p_5 >= pe_63)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  bad_67 = 1;
  # DEBUG bad => bad_67
  goto <bb 104> (end);

<bb 19>:
  if (q_7 >= qe_65)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  bad_68 = 2;
  # DEBUG bad => bad_68
  goto <bb 104> (end);

<bb 21>:
  D.41231_69 = a_engine_25->local_sdp_ip;
  if (D.41231_69 != 0B)
    goto <bb 22>;
  else
    goto <bb 37>;

<bb 22>:
  D.41251_70 = strncmp ("c=IN IP", p_5, 7);
  if (D.41251_70 == 0)
    goto <bb 23>;
  else
    goto <bb 37>;

<bb 23>:
  __builtin_strncpy (q_7, p_5, 7);
  p_71 = p_5 + 7;
  # DEBUG p => p_71
  q_72 = q_7 + 7;
  # DEBUG q => q_72
  D.41254_73 = a_engine_25->adv_sdp_ip;
  D.41255_74 = __builtin_strchr (D.41254_73, 58);
  if (D.41255_74 != 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  iftmp.16_75 = "6 ";
  goto <bb 26>;

<bb 25>:
  iftmp.16_76 = "4 ";

<bb 26>:
  # iftmp.16_17 = PHI <iftmp.16_75(24), iftmp.16_76(25)>
  __builtin_memcpy (q_72, iftmp.16_17, 2);
  p_77 = p_71 + 2;
  # DEBUG p => p_77
  q_78 = q_72 + 2;
  # DEBUG q => q_78
  D.41254_79 = a_engine_25->adv_sdp_ip;
  D.41254_80 = a_engine_25->adv_sdp_ip;
  D.41259_81 = strlen (D.41254_80);
  __builtin_strncpy (q_78, D.41254_80, D.41259_81);
  D.41254_82 = a_engine_25->adv_sdp_ip;
  D.41260_83 = strlen (D.41254_82);
  q_84 = q_78 + D.41260_83;
  # DEBUG q => q_84
  goto <bb 30>;

<bb 27>:
  if (p_1 >= pe_63)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  bad_96 = 3;
  # DEBUG bad => bad_96
  goto <bb 104> (end);

<bb 29>:
  p_97 = p_1 + 1;
  # DEBUG p => p_97

<bb 30>:
  # p_1 = PHI <p_77(26), p_97(29)>
  # DEBUG p => p_1
  if (p_1 != 0B)
    goto <bb 31>;
  else
    goto <bb 36>;

<bb 31>:
  D.41264_85 = *p_1;
  if (D.41264_85 != 0)
    goto <bb 32>;
  else
    goto <bb 36>;

<bb 32>:
  D.41266_86 = *p_1;
  D.41267_87 = D.41266_86 + 208;
  D.41268_88 = D.41267_87 <= 9;
  D.41269_89 = D.41266_86 == 46;
  D.41270_90 = D.41268_88 || D.41269_89;
  if (D.41270_90 != 0)
    goto <bb 27>;
  else
    goto <bb 33>;

<bb 33>:
  D.41264_91 = *p_1;
  if (D.41264_91 == 58)
    goto <bb 27>;
  else
    goto <bb 34>;

<bb 34>:
  D.41264_92 = *p_1;
  D.41273_93 = D.41264_92 + 191;
  if (D.41273_93 <= 5)
    goto <bb 27>;
  else
    goto <bb 35>;

<bb 35>:
  D.41264_94 = *p_1;
  D.41275_95 = D.41264_94 + 159;
  if (D.41275_95 <= 5)
    goto <bb 27>;
  else
    goto <bb 36>;

<bb 36>:
  has_ip_98 = has_ip_14 + 1;
  # DEBUG has_ip => has_ip_98
  goto <bb 94>;

<bb 37>:
  D.41276_99 = strncmp ("o=", p_5, 2);
  if (D.41276_99 == 0)
    goto <bb 38>;
  else
    goto <bb 49>;

<bb 38>:
  oe_100 = __builtin_strchr (p_5, 10);
  # DEBUG oe => oe_100
  if (oe_100 != 0B)
    goto <bb 39>;
  else
    goto <bb 94>;

<bb 39>:
  family_101 = "IP4";
  # DEBUG family => family_101
  o_line = "";
  if (oe_100 >= pe_63)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:
  bad_102 = 5;
  # DEBUG bad => bad_102
  goto <bb 104> (end);

<bb 41>:
  oe.17_103 = (int) oe_100;
  p.18_104 = (int) p_5;
  D.41285_105 = oe.17_103 - p.18_104;
  len_106 = (switch_size_t) D.41285_105;
  # DEBUG len => len_106
  p_107 = p_5 + len_106;
  # DEBUG p => p_107
  D.41210_108 = smh_24->mparams;
  D.41287_109 = D.41210_108->sipip;
  D.41288_110 = __builtin_strchr (D.41287_109, 58);
  if (D.41288_110 != 0B)
    goto <bb 42>;
  else
    goto <bb 43>;

<bb 42>:
  iftmp.19_111 = "IP6";
  goto <bb 44>;

<bb 43>:
  iftmp.19_112 = "IP4";

<bb 44>:
  # iftmp.19_18 = PHI <iftmp.19_111(42), iftmp.19_112(43)>
  family_113 = iftmp.19_18;
  # DEBUG family => family_113
  D.41292_114 = smh_24->owner_id;
  if (D.41292_114 == 0)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  D.41295_115 = switch_epoch_time_now (0B);
  D.41296_116 = (unsigned int) D.41295_115;
  D.41297_117 = D.41296_116 * 31821;
  D.41298_118 = D.41297_117 + 13849;
  smh_24->owner_id = D.41298_118;

<bb 46>:
  D.41299_119 = smh_24->session_id;
  if (D.41299_119 == 0)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.41292_120 = smh_24->owner_id;
  smh_24->session_id = D.41292_120;

<bb 48>:
  D.41299_121 = smh_24->session_id;
  D.41302_122 = D.41299_121 + 1;
  smh_24->session_id = D.41302_122;
  D.41303_123 = (const char * restrict) &"o=%s %010u %010u IN %s %s\n"[0];
  D.41210_124 = smh_24->mparams;
  D.41304_125 = D.41210_124->sdp_username;
  D.41292_126 = smh_24->owner_id;
  D.41299_127 = smh_24->session_id;
  D.41210_128 = smh_24->mparams;
  D.41287_129 = D.41210_128->sipip;
  snprintf (&o_line, 1024, D.41303_123, D.41304_125, D.41292_126, D.41299_127, family_113, D.41287_129);
  D.41305_130 = strlen (&o_line);
  __builtin_strncpy (q_7, &o_line, D.41305_130);
  D.41306_131 = strlen (&o_line);
  D.41307_132 = D.41306_131 + -1;
  q_133 = q_7 + D.41307_132;
  # DEBUG q => q_133
  goto <bb 94>;

<bb 49>:
  D.41309_134 = strncmp ("s=", p_5, 2);
  if (D.41309_134 == 0)
    goto <bb 50>;
  else
    goto <bb 54>;

<bb 50>:
  se_135 = __builtin_strchr (p_5, 10);
  # DEBUG se => se_135
  if (se_135 != 0B)
    goto <bb 51>;
  else
    goto <bb 94>;

<bb 51>:
  s_line = "";
  if (se_135 >= pe_63)
    goto <bb 52>;
  else
    goto <bb 53>;

<bb 52>:
  bad_136 = 5;
  # DEBUG bad => bad_136
  goto <bb 104> (end);

<bb 53>:
  se.20_137 = (int) se_135;
  p.18_138 = (int) p_5;
  D.41317_139 = se.20_137 - p.18_138;
  len_140 = (switch_size_t) D.41317_139;
  # DEBUG len => len_140
  p_141 = p_5 + len_140;
  # DEBUG p => p_141
  D.41318_142 = (const char * restrict) &"s=%s\n"[0];
  D.41210_143 = smh_24->mparams;
  D.41304_144 = D.41210_143->sdp_username;
  snprintf (&s_line, 1024, D.41318_142, D.41304_144);
  D.41319_145 = strlen (&s_line);
  __builtin_strncpy (q_7, &s_line, D.41319_145);
  D.41320_146 = strlen (&s_line);
  D.41321_147 = D.41320_146 + -1;
  q_148 = q_7 + D.41321_147;
  # DEBUG q => q_148
  goto <bb 94>;

<bb 54>:
  D.41326_149 = strncmp ("m=audio ", p_5, 8);
  if (D.41326_149 == 0)
    goto <bb 56>;
  else
    goto <bb 55>;

<bb 55>:
  D.41328_150 = strncmp ("m=image ", p_5, 8);
  if (D.41328_150 == 0)
    goto <bb 56>;
  else
    goto <bb 70>;

<bb 56>:
  D.41329_151 = p_5 + 8;
  D.41330_152 = *D.41329_151;
  if (D.41330_152 != 48)
    goto <bb 57>;
  else
    goto <bb 70>;

<bb 57>:
  __builtin_strncpy (q_7, p_5, 8);
  p_153 = p_5 + 8;
  # DEBUG p => p_153
  if (p_153 >= pe_63)
    goto <bb 58>;
  else
    goto <bb 59>;

<bb 58>:
  bad_154 = 4;
  # DEBUG bad => bad_154
  goto <bb 104> (end);

<bb 59>:
  q_155 = q_7 + 8;
  # DEBUG q => q_155
  if (q_155 >= qe_65)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  bad_156 = 5;
  # DEBUG bad => bad_156
  goto <bb 104> (end);

<bb 61>:
  D.41336_157 = strlen (&port_buf);
  __builtin_strncpy (q_155, &port_buf, D.41336_157);
  D.41337_158 = strlen (&port_buf);
  q_159 = q_155 + D.41337_158;
  # DEBUG q => q_159
  if (q_159 >= qe_65)
    goto <bb 62>;
  else
    goto <bb 66>;

<bb 62>:
  bad_160 = 6;
  # DEBUG bad => bad_160
  goto <bb 104> (end);

<bb 63>:
  if (p_2 >= pe_63)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  bad_164 = 7;
  # DEBUG bad => bad_164
  goto <bb 104> (end);

<bb 65>:
  p_165 = p_2 + 1;
  # DEBUG p => p_165

<bb 66>:
  # p_2 = PHI <p_153(61), p_165(65)>
  # DEBUG p => p_2
  if (p_2 != 0B)
    goto <bb 67>;
  else
    goto <bb 69>;

<bb 67>:
  D.41264_161 = *p_2;
  if (D.41264_161 != 0)
    goto <bb 68>;
  else
    goto <bb 69>;

<bb 68>:
  D.41264_162 = *p_2;
  D.41344_163 = D.41264_162 + 208;
  if (D.41344_163 <= 9)
    goto <bb 63>;
  else
    goto <bb 69>;

<bb 69>:
  has_audio_166 = has_audio_11 + 1;
  # DEBUG has_audio => has_audio_166
  goto <bb 94>;

<bb 70>:
  D.41345_167 = strncmp ("m=video ", p_5, 8);
  if (D.41345_167 == 0)
    goto <bb 71>;
  else
    goto <bb 94>;

<bb 71>:
  D.41329_168 = p_5 + 8;
  D.41330_169 = *D.41329_168;
  if (D.41330_169 != 48)
    goto <bb 72>;
  else
    goto <bb 94>;

<bb 72>:
  if (has_video_9 == 0)
    goto <bb 73>;
  else
    goto <bb 76>;

<bb 73>:
  switch_core_media_choose_port (session_23(D), 1, 1);
  D.41352_170 = v_engine_26->cur_payload_map;
  D.41352_170->rm_encoding = "PROXY-VID";
  D.41352_171 = v_engine_26->cur_payload_map;
  D.41352_171->rm_rate = 90000;
  D.41352_172 = v_engine_26->cur_payload_map;
  D.41352_172->adv_rm_rate = 90000;
  D.41352_173 = v_engine_26->cur_payload_map;
  D.41352_173->codec_ms = 0;
  D.41353_174 = v_engine_26->adv_sdp_port;
  D.41354_175 = (int) D.41353_174;
  switch_snprintf (&vport_buf, 25, "%u", D.41354_175);
  D.41222_176 = session_23(D)->channel;
  D.41355_177 = switch_channel_test_ready (D.41222_176, 1, 1);
  if (D.41355_177 != 0)
    goto <bb 74>;
  else
    goto <bb 76>;

<bb 74>:
  D.41358_178 = v_engine_26->rtp_session;
  D.41359_179 = switch_rtp_ready (D.41358_178);
  if (D.41359_179 == 0)
    goto <bb 75>;
  else
    goto <bb 76>;

<bb 75>:
  D.41222_180 = session_23(D)->channel;
  switch_channel_set_flag_value (D.41222_180, 98, 1);
  D.41222_181 = session_23(D)->channel;
  switch_channel_set_flag_value (D.41222_181, 103, 1);
  switch_core_media_activate_rtp (session_23(D));

<bb 76>:
  __builtin_strncpy (q_7, p_5, 8);
  p_182 = p_5 + 8;
  # DEBUG p => p_182
  if (p_182 >= pe_63)
    goto <bb 77>;
  else
    goto <bb 78>;

<bb 77>:
  bad_183 = 8;
  # DEBUG bad => bad_183
  goto <bb 104> (end);

<bb 78>:
  q_184 = q_7 + 8;
  # DEBUG q => q_184
  if (q_184 >= qe_65)
    goto <bb 79>;
  else
    goto <bb 80>;

<bb 79>:
  bad_185 = 9;
  # DEBUG bad => bad_185
  goto <bb 104> (end);

<bb 80>:
  D.41366_186 = strlen (&vport_buf);
  __builtin_strncpy (q_184, &vport_buf, D.41366_186);
  D.41367_187 = strlen (&vport_buf);
  q_188 = q_184 + D.41367_187;
  # DEBUG q => q_188
  if (q_188 >= qe_65)
    goto <bb 81>;
  else
    goto <bb 85>;

<bb 81>:
  bad_189 = 10;
  # DEBUG bad => bad_189
  goto <bb 104> (end);

<bb 82>:
  if (p_3 >= pe_63)
    goto <bb 83>;
  else
    goto <bb 84>;

<bb 83>:
  bad_193 = 11;
  # DEBUG bad => bad_193
  goto <bb 104> (end);

<bb 84>:
  p_194 = p_3 + 1;
  # DEBUG p => p_194

<bb 85>:
  # p_3 = PHI <p_182(80), p_194(84)>
  # DEBUG p => p_3
  if (p_3 != 0B)
    goto <bb 86>;
  else
    goto <bb 88>;

<bb 86>:
  D.41264_190 = *p_3;
  if (D.41264_190 != 0)
    goto <bb 87>;
  else
    goto <bb 88>;

<bb 87>:
  D.41264_191 = *p_3;
  D.41344_192 = D.41264_191 + 208;
  if (D.41344_192 <= 9)
    goto <bb 82>;
  else
    goto <bb 88>;

<bb 88>:
  has_video_195 = has_video_9 + 1;
  # DEBUG has_video => has_video_195
  goto <bb 94>;

<bb 89>:
  if (p_4 >= pe_63)
    goto <bb 90>;
  else
    goto <bb 91>;

<bb 90>:
  bad_198 = 12;
  # DEBUG bad => bad_198
  goto <bb 104> (end);

<bb 91>:
  if (q_6 >= qe_65)
    goto <bb 92>;
  else
    goto <bb 93>;

<bb 92>:
  bad_199 = 13;
  # DEBUG bad => bad_199
  goto <bb 104> (end);

<bb 93>:
  D.41264_200 = *p_4;
  *q_6 = D.41264_200;
  q_201 = q_6 + 1;
  # DEBUG q => q_201
  p_202 = p_4 + 1;
  # DEBUG p => p_202

<bb 94>:
  # p_4 = PHI <p_107(48), p_202(93), p_1(36), p_5(50), p_5(38), p_3(88), p_5(71), p_5(70), p_2(69), p_141(53)>
  # q_6 = PHI <q_133(48), q_201(93), q_84(36), q_7(50), q_7(38), q_188(88), q_7(71), q_7(70), q_159(69), q_148(53)>
  # has_video_8 = PHI <has_video_9(48), has_video_8(93), has_video_9(36), has_video_9(50), has_video_9(38), has_video_195(88), has_video_9(71), has_video_9(70), has_video_9(69), has_video_9(53)>
  # has_audio_10 = PHI <has_audio_11(48), has_audio_10(93), has_audio_11(36), has_audio_11(50), has_audio_11(38), has_audio_11(88), has_audio_11(71), has_audio_11(70), has_audio_166(69), has_audio_11(53)>
  # has_ip_13 = PHI <has_ip_14(48), has_ip_13(93), has_ip_98(36), has_ip_14(50), has_ip_14(38), has_ip_14(88), has_ip_14(71), has_ip_14(70), has_ip_14(69), has_ip_14(53)>
  # DEBUG has_ip => has_ip_13
  # DEBUG has_audio => has_audio_10
  # DEBUG has_video => has_video_8
  # DEBUG q => q_6
  # DEBUG p => p_4
  if (p_4 != 0B)
    goto <bb 95>;
  else
    goto <bb 97>;

<bb 95>:
  D.41264_196 = *p_4;
  if (D.41264_196 != 0)
    goto <bb 96>;
  else
    goto <bb 97>;

<bb 96>:
  D.41264_197 = *p_4;
  if (D.41264_197 != 10)
    goto <bb 89>;
  else
    goto <bb 97>;

<bb 97>:
  if (p_4 >= pe_63)
    goto <bb 98>;
  else
    goto <bb 99>;

<bb 98>:
  bad_203 = 14;
  # DEBUG bad => bad_203
  goto <bb 104> (end);

<bb 99>:
  if (q_6 >= qe_65)
    goto <bb 100>;
  else
    goto <bb 101>;

<bb 100>:
  bad_204 = 15;
  # DEBUG bad => bad_204
  goto <bb 104> (end);

<bb 101>:
  D.41264_205 = *p_4;
  *q_6 = D.41264_205;
  q_206 = q_6 + 1;
  # DEBUG q => q_206
  p_207 = p_4 + 1;
  # DEBUG p => p_207

<bb 102>:
  # p_5 = PHI <p_60(16), p_207(101)>
  # q_7 = PHI <q_61(16), q_206(101)>
  # has_video_9 = PHI <has_video_19(16), has_video_8(101)>
  # has_audio_11 = PHI <has_audio_20(16), has_audio_10(101)>
  # has_ip_14 = PHI <has_ip_21(16), has_ip_13(101)>
  # DEBUG has_ip => has_ip_14
  # DEBUG has_audio => has_audio_11
  # DEBUG has_video => has_video_9
  # DEBUG q => q_7
  # DEBUG p => p_5
  if (p_5 != 0B)
    goto <bb 103>;
  else
    goto <bb 104> (end);

<bb 103>:
  D.41264_66 = *p_5;
  if (D.41264_66 != 0)
    goto <bb 17>;
  else
    goto <bb 104> (end);

  # has_audio_12 = PHI <has_audio_11(18), has_audio_11(20), has_audio_11(28), has_audio_11(40), has_audio_11(52), has_audio_11(58), has_audio_11(60), has_audio_11(62), has_audio_11(64), has_audio_11(77), has_audio_11(79), has_audio_11(81), has_audio_11(83), has_audio_10(90), has_audio_10(92), has_audio_10(98), has_audio_10(100), has_audio_11(102), has_audio_11(103)>
  # has_ip_15 = PHI <has_ip_14(18), has_ip_14(20), has_ip_14(28), has_ip_14(40), has_ip_14(52), has_ip_14(58), has_ip_14(60), has_ip_14(62), has_ip_14(64), has_ip_14(77), has_ip_14(79), has_ip_14(81), has_ip_14(83), has_ip_13(90), has_ip_13(92), has_ip_13(98), has_ip_13(100), has_ip_14(102), has_ip_14(103)>
  # bad_16 = PHI <bad_67(18), bad_68(20), bad_96(28), bad_102(40), bad_136(52), bad_154(58), bad_156(60), bad_160(62), bad_164(64), bad_183(77), bad_185(79), bad_189(81), bad_193(83), bad_198(90), bad_199(92), bad_203(98), bad_204(100), bad_22(102), bad_22(103)>
end:
  # DEBUG bad => bad_16
  # DEBUG has_ip => has_ip_15
  # DEBUG has_audio => has_audio_12
  if (bad_16 != 0)
    goto <bb 111>;
  else
    goto <bb 105>;

<bb 105>:
  D.41222_208 = session_23(D)->channel;
  D.41389_209 = switch_channel_check_signal (D.41222_208, 1);
  if (D.41389_209 != 0)
    goto <bb 107>;
  else
    goto <bb 106>;

<bb 106>:
  D.41222_210 = session_23(D)->channel;
  D.41391_211 = switch_channel_get_state (D.41222_210);
  if (D.41391_211 > 9)
    goto <bb 107>;
  else
    goto <bb 108>;

<bb 107>:
  D.41222_221 = session_23(D)->channel;
  D.41392_222 = switch_channel_get_name (D.41222_221);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7394, session_23(D), 7, "%s too late.\n", D.41392_222);
  goto <bb 111>;

<bb 108>:
  D.41393_212 = has_ip_15 | has_audio_12;
  if (D.41393_212 == 0)
    goto <bb 109>;
  else
    goto <bb 110>;

<bb 109>:
  D.41222_213 = session_23(D)->channel;
  D.41396_214 = switch_channel_get_name (D.41222_213);
  D.41210_215 = smh_24->mparams;
  D.41211_216 = D.41210_215->local_sdp_str;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7400, session_23(D), 7, "%s SDP has no audio in it.\n%s\n", D.41396_214, D.41211_216);
  goto <bb 111>;

<bb 110>:
  D.41222_217 = session_23(D)->channel;
  D.41397_218 = switch_channel_get_name (D.41222_217);
  D.41210_219 = smh_24->mparams;
  D.41211_220 = D.41210_219->local_sdp_str;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7406, session_23(D), 7, "%s Patched SDP\n---\n%s\n+++\n%s\n", D.41397_218, D.41211_220, new_sdp_56);
  switch_core_media_set_local_sdp (session_23(D), new_sdp_56, 0);

<bb 111>:
  return;

}



;; Function switch_core_media_start_udptl (switch_core_media_start_udptl)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.41167 = session->channel;

Renaming statement D.41168 = switch_channel_check_signal (D.41167, 1);

Renaming statement if (D.41168 != 0)



Renaming block #6

Renaming statement D.41167 = session->channel;

Renaming statement D.41170 = switch_channel_get_state (D.41167);

Renaming statement if (D.41170 > 9)



Renaming block #7

Renaming statement a_engine = &smh->engines;

Renaming statement D.41171 = a_engine->rtp_session;

Renaming statement D.41172 = switch_rtp_ready (D.41171);

Renaming statement if (D.41172 != 0)



Renaming block #8

Renaming statement D.41171 = a_engine->rtp_session;

Renaming statement remote_host = switch_rtp_get_remote_host (D.41171);

Renaming statement D.41171 = a_engine->rtp_session;

Renaming statement remote_port = switch_rtp_get_remote_port (D.41171);

Renaming statement D.41167 = session->channel;

Renaming statement switch_channel_clear_flag (D.41167, 99);

Renaming statement D.41171 = a_engine->rtp_session;

Renaming statement switch_rtp_udptl_mode (D.41171);

Renaming statement if (t38_options == 0B)



Renaming block #9

Renaming statement D.41178 = t38_options->remote_ip;

Renaming statement if (D.41178 == 0B)



Renaming block #11

Renaming statement D.41179 = remote_host != 0B;

Renaming statement D.41180 = remote_port != 0;

Renaming statement D.41181 = D.41179 && D.41180;

Renaming statement if (D.41181 != 0)



Renaming block #12

Renaming statement D.41184 = t38_options->remote_port;

Renaming statement if (D.41184 == remote_port)



Renaming block #13

Renaming statement D.41178 = t38_options->remote_ip;

Renaming statement D.39841 = __builtin_strcmp (remote_host, D.41178);

Renaming statement if (D.39841 == 0)



Renaming block #14

Renaming statement D.41178 = t38_options->remote_ip;

Renaming statement D.41184 = t38_options->remote_port;

Renaming statement D.41189 = (int) D.41184;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7446, session, 7, "Remote address:port [%s:%d] has not changed.\n", D.41178, D.41189);



Renaming block #15

Renaming statement D.41171 = a_engine->rtp_session;

Renaming statement D.41178 = t38_options->remote_ip;

Renaming statement D.41184 = t38_options->remote_port;

Renaming statement D.41190 = switch_rtp_set_remote_address (D.41171, D.41178, D.41184, 0, 1, &err);

Renaming statement if (D.41190 != 0)



Renaming block #16

Renaming statement err.15 = err;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7453, session, 3, "IMAGE UDPTL REPORTS ERROR: [%s]\n", err.15);



Renaming block #17

Renaming statement D.41178 = t38_options->remote_ip;

Renaming statement D.41184 = t38_options->remote_port;

Renaming statement D.41189 = (int) D.41184;

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7455, session, 7, "IMAGE UDPTL CHANGING DEST TO: [%s:%d]\n", D.41178, D.41189);

Renaming statement D.41197 = switch_media_handle_test_media_flag (smh, 10);

Renaming statement if (D.41197 == 0)



Renaming block #18

Renaming statement D.41167 = session->channel;

Renaming statement D.41200 = switch_channel_test_flag (D.41167, 106);

Renaming statement if (D.41200 == 0)



Renaming block #19

Renaming statement D.41167 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.41167, "disable_udptl_auto_adjust", 1, -1);

Renaming statement if (val == 0B)



Renaming block #20

Renaming statement D.41204 = switch_true (val);

Renaming statement if (D.41204 == 0)



Renaming block #21

Renaming statement D.41171 = a_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.41171, 7);



Renaming block #10

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7441, session, 7, "No remote address\n");



Renaming block #22



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 7419, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.41167_3 = session_1(D)->channel;

Updating SSA information for statement D.41168_4 = switch_channel_check_signal (D.41167_3, 1);



Registering new PHI nodes in block #6

Updating SSA information for statement D.41167_5 = session_1(D)->channel;

Updating SSA information for statement D.41170_6 = switch_channel_get_state (D.41167_5);



Registering new PHI nodes in block #7

Updating SSA information for statement D.41171_8 = a_engine_7->rtp_session;

Updating SSA information for statement D.41172_9 = switch_rtp_ready (D.41171_8);



Registering new PHI nodes in block #8

Updating SSA information for statement D.41171_10 = a_engine_7->rtp_session;

Updating SSA information for statement remote_host_11 = switch_rtp_get_remote_host (D.41171_10);

Updating SSA information for statement D.41171_12 = a_engine_7->rtp_session;

Updating SSA information for statement remote_port_13 = switch_rtp_get_remote_port (D.41171_12);

Updating SSA information for statement D.41167_14 = session_1(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.41167_14, 99);

Updating SSA information for statement D.41171_15 = a_engine_7->rtp_session;

Updating SSA information for statement switch_rtp_udptl_mode (D.41171_15);



Registering new PHI nodes in block #9

Updating SSA information for statement D.41178_17 = t38_options_16(D)->remote_ip;



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement D.41184_21 = t38_options_16(D)->remote_port;



Registering new PHI nodes in block #13

Updating SSA information for statement D.41178_22 = t38_options_16(D)->remote_ip;

Updating SSA information for statement D.39841_23 = __builtin_strcmp (remote_host_11, D.41178_22);



Registering new PHI nodes in block #14

Updating SSA information for statement D.41178_24 = t38_options_16(D)->remote_ip;

Updating SSA information for statement D.41184_25 = t38_options_16(D)->remote_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7446, session_1(D), 7, "Remote address:port [%s:%d] has not changed.\n", D.41178_24, D.41189_26);



Registering new PHI nodes in block #15

Updating SSA information for statement D.41171_27 = a_engine_7->rtp_session;

Updating SSA information for statement D.41178_28 = t38_options_16(D)->remote_ip;

Updating SSA information for statement D.41184_29 = t38_options_16(D)->remote_port;

Updating SSA information for statement D.41190_30 = switch_rtp_set_remote_address (D.41171_27, D.41178_28, D.41184_29, 0, 1, &err);



Registering new PHI nodes in block #16

Updating SSA information for statement err.15_31 = err;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7453, session_1(D), 3, "IMAGE UDPTL REPORTS ERROR: [%s]\n", err.15_31);



Registering new PHI nodes in block #17

Updating SSA information for statement D.41178_32 = t38_options_16(D)->remote_ip;

Updating SSA information for statement D.41184_33 = t38_options_16(D)->remote_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7455, session_1(D), 7, "IMAGE UDPTL CHANGING DEST TO: [%s:%d]\n", D.41178_32, D.41189_34);

Updating SSA information for statement D.41197_35 = switch_media_handle_test_media_flag (smh_2, 10);



Registering new PHI nodes in block #18

Updating SSA information for statement D.41167_36 = session_1(D)->channel;

Updating SSA information for statement D.41200_37 = switch_channel_test_flag (D.41167_36, 106);



Registering new PHI nodes in block #19

Updating SSA information for statement D.41167_38 = session_1(D)->channel;

Updating SSA information for statement val_39 = switch_channel_get_variable_dup (D.41167_38, "disable_udptl_auto_adjust", 1, -1);



Registering new PHI nodes in block #20

Updating SSA information for statement D.41204_40 = switch_true (val_39);



Registering new PHI nodes in block #21

Updating SSA information for statement D.41171_41 = a_engine_7->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.41171_41, 7);



Registering new PHI nodes in block #10

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7441, session_1(D), 7, "No remote address\n");



Registering new PHI nodes in block #22



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 23
Number of blocks to update: 22 ( 96%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_start_udptl";
  static const char __func__[30] = "switch_core_media_start_udptl";

  { Scope block #0 
    char * remote_host;
    switch_port_t remote_port;
    const char * err;
    const char * val;

    { Scope block #0 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

  }

}
switch_core_media_start_udptl (struct switch_core_session_t * session, struct switch_t38_options_t * t38_options)
{
  const char * val;
  const char * err;
  switch_port_t remote_port;
  char * remote_host;
  static const char __func__[30] = "switch_core_media_start_udptl";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_start_udptl";
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  int D.41204;
  uint32_t D.41200;
  int32_t D.41197;
  const char * err.15;
  switch_status_t D.41190;
  int D.41189;
  int D.39841;
  uint16_t D.41184;
  _Bool D.41181;
  _Bool D.41180;
  _Bool D.41179;
  const char * D.41178;
  uint8_t D.41172;
  struct switch_rtp_t * D.41171;
  switch_channel_state_t D.41170;
  int D.41168;
  struct switch_channel_t * D.41167;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7419, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 22>;
  else
    goto <bb 5>;

<bb 5>:
  D.41167_3 = session_1(D)->channel;
  D.41168_4 = switch_channel_check_signal (D.41167_3, 1);
  if (D.41168_4 != 0)
    goto <bb 22>;
  else
    goto <bb 6>;

<bb 6>:
  D.41167_5 = session_1(D)->channel;
  D.41170_6 = switch_channel_get_state (D.41167_5);
  if (D.41170_6 > 9)
    goto <bb 22>;
  else
    goto <bb 7>;

<bb 7>:
  a_engine_7 = &smh_2->engines;
  # DEBUG a_engine => a_engine_7
  D.41171_8 = a_engine_7->rtp_session;
  D.41172_9 = switch_rtp_ready (D.41171_8);
  if (D.41172_9 != 0)
    goto <bb 8>;
  else
    goto <bb 22>;

<bb 8>:
  D.41171_10 = a_engine_7->rtp_session;
  remote_host_11 = switch_rtp_get_remote_host (D.41171_10);
  # DEBUG remote_host => remote_host_11
  D.41171_12 = a_engine_7->rtp_session;
  remote_port_13 = switch_rtp_get_remote_port (D.41171_12);
  # DEBUG remote_port => remote_port_13
  D.41167_14 = session_1(D)->channel;
  switch_channel_clear_flag (D.41167_14, 99);
  D.41171_15 = a_engine_7->rtp_session;
  switch_rtp_udptl_mode (D.41171_15);
  if (t38_options_16(D) == 0B)
    goto <bb 10>;
  else
    goto <bb 9>;

<bb 9>:
  D.41178_17 = t38_options_16(D)->remote_ip;
  if (D.41178_17 == 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7441, session_1(D), 7, "No remote address\n");
  goto <bb 22>;

<bb 11>:
  D.41179_18 = remote_host_11 != 0B;
  D.41180_19 = remote_port_13 != 0;
  D.41181_20 = D.41179_18 && D.41180_19;
  if (D.41181_20 != 0)
    goto <bb 12>;
  else
    goto <bb 15>;

<bb 12>:
  D.41184_21 = t38_options_16(D)->remote_port;
  if (D.41184_21 == remote_port_13)
    goto <bb 13>;
  else
    goto <bb 15>;

<bb 13>:
  D.41178_22 = t38_options_16(D)->remote_ip;
  D.39841_23 = __builtin_strcmp (remote_host_11, D.41178_22);
  if (D.39841_23 == 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.41178_24 = t38_options_16(D)->remote_ip;
  D.41184_25 = t38_options_16(D)->remote_port;
  D.41189_26 = (int) D.41184_25;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7446, session_1(D), 7, "Remote address:port [%s:%d] has not changed.\n", D.41178_24, D.41189_26);
  goto <bb 22>;

<bb 15>:
  D.41171_27 = a_engine_7->rtp_session;
  D.41178_28 = t38_options_16(D)->remote_ip;
  D.41184_29 = t38_options_16(D)->remote_port;
  D.41190_30 = switch_rtp_set_remote_address (D.41171_27, D.41178_28, D.41184_29, 0, 1, &err);
  if (D.41190_30 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  err.15_31 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7453, session_1(D), 3, "IMAGE UDPTL REPORTS ERROR: [%s]\n", err.15_31);
  goto <bb 22>;

<bb 17>:
  D.41178_32 = t38_options_16(D)->remote_ip;
  D.41184_33 = t38_options_16(D)->remote_port;
  D.41189_34 = (int) D.41184_33;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7455, session_1(D), 7, "IMAGE UDPTL CHANGING DEST TO: [%s:%d]\n", D.41178_32, D.41189_34);
  D.41197_35 = switch_media_handle_test_media_flag (smh_2, 10);
  if (D.41197_35 == 0)
    goto <bb 18>;
  else
    goto <bb 22>;

<bb 18>:
  D.41167_36 = session_1(D)->channel;
  D.41200_37 = switch_channel_test_flag (D.41167_36, 106);
  if (D.41200_37 == 0)
    goto <bb 19>;
  else
    goto <bb 22>;

<bb 19>:
  D.41167_38 = session_1(D)->channel;
  val_39 = switch_channel_get_variable_dup (D.41167_38, "disable_udptl_auto_adjust", 1, -1);
  # DEBUG val => val_39
  if (val_39 == 0B)
    goto <bb 21>;
  else
    goto <bb 20>;

<bb 20>:
  D.41204_40 = switch_true (val_39);
  if (D.41204_40 == 0)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.41171_41 = a_engine_7->rtp_session;
  switch_rtp_set_flag (D.41171_41, 7);

<bb 22>:
  return;

}



;; Function switch_core_media_receive_message (switch_core_media_receive_message)



Renaming block #0



Renaming block #2

Renaming statement status = 0;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40820 = 1;



Renaming block #6

Renaming statement D.40823 = session->channel;

Renaming statement D.40824 = switch_channel_check_signal (D.40823, 1);

Renaming statement if (D.40824 != 0)



Renaming block #7

Renaming statement D.40823 = session->channel;

Renaming statement D.40826 = switch_channel_get_state (D.40823);

Renaming statement if (D.40826 > 9)



Renaming block #9

Renaming statement a_engine = &smh->engines;

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.40827 = msg->message_id;

Renaming statement switch (D.40827) <default: <L211>, case 4: <L93>, case 5: <L126>, case 8: <L147>, case 9: <L150>, case 17: <L10>, case 19: <L88>, case 20: <L144>, case 24: <L65>, case 25: <L13>, case 32: <L19>, case 46: <L7>>



Renaming block #10

Renaming statement D.40823 = session->channel;

Renaming statement D.40828 = switch_channel_test_flag (D.40823, 82);

Renaming statement if (D.40828 != 0)



Renaming block #11

Renaming statement D.40823 = session->channel;

Renaming statement switch_channel_set_flag_value (D.40823, 122, 1);



Renaming block #12

Renaming statement D.40831 = v_engine->rtp_session;

Renaming statement if (D.40831 != 0B)



Renaming block #13

Renaming statement D.40831 = v_engine->rtp_session;

Renaming statement switch_rtp_video_refresh (D.40831);



Renaming block #14

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement D.40835 = switch_rtp_ready (D.40834);

Renaming statement if (D.40835 != 0)



Renaming block #15

Renaming statement D.40838 = msg->numeric_arg;

Renaming statement if (D.40838 != 0)



Renaming block #16

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.40834, 19);



Renaming block #17

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_clear_flag (D.40834, 19);



Renaming block #18

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement D.40842 = switch_rtp_ready (D.40834);

Renaming statement if (D.40842 != 0)



Renaming block #19

Renaming statement len = 0;

Renaming statement maxlen = 0;

Renaming statement qlen = 0;

Renaming statement maxqlen = 50;

Renaming statement max_drift = 0;

Renaming statement D.40845 = msg->string_arg;

Renaming statement if (D.40845 != 0B)



Renaming block #20

Renaming statement D.40845 = msg->string_arg;

Renaming statement D.40848 = strcasecmp (D.40845, "pause");

Renaming statement if (D.40848 == 0)



Renaming block #21

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_pause_jitter_buffer (D.40834, 1);



Renaming block #22

Renaming statement D.40845 = msg->string_arg;

Renaming statement D.40851 = strcasecmp (D.40845, "resume");

Renaming statement if (D.40851 == 0)



Renaming block #23

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_pause_jitter_buffer (D.40834, 0);



Renaming block #24

Renaming statement D.40845 = msg->string_arg;

Renaming statement D.40854 = strncasecmp (D.40845, "debug:", 6);

Renaming statement if (D.40854 == 0)



Renaming block #25

Renaming statement D.40845 = msg->string_arg;

Renaming statement s = D.40845 + 6;

Renaming statement if (s != 0B)



Renaming block #26

Renaming statement __s2_len = 3;

Renaming statement if (__s2_len <= 3)



Renaming block #27

Renaming statement __s1 = s;

Renaming statement D.40862 = *__s1;

Renaming statement D.40863 = (int) D.40862;

Renaming statement D.40864 = "off";

Renaming statement D.40865 = MEM[(const unsigned char *)D.40864];

Renaming statement D.40866 = (int) D.40865;

Renaming statement __result = D.40863 - D.40866;

Renaming statement D.40867 = __s2_len != 0;

Renaming statement D.40868 = __result == 0;

Renaming statement D.40869 = D.40867 && D.40868;

Renaming statement if (D.40869 != 0)



Renaming block #28

Renaming statement D.40872 = __s1 + 1;

Renaming statement D.40873 = *D.40872;

Renaming statement D.40874 = (int) D.40873;

Renaming statement D.40875 = &"off"[1];

Renaming statement D.40876 = MEM[(const unsigned char *)D.40875];

Renaming statement D.40877 = (int) D.40876;

Renaming statement __result = D.40874 - D.40877;

Renaming statement D.40878 = __s2_len > 1;

Renaming statement D.40868 = __result == 0;

Renaming statement D.40879 = D.40878 && D.40868;

Renaming statement if (D.40879 != 0)



Renaming block #29

Renaming statement D.40882 = __s1 + 2;

Renaming statement D.40883 = *D.40882;

Renaming statement D.40884 = (int) D.40883;

Renaming statement D.40885 = &"off"[2];

Renaming statement D.40886 = MEM[(const unsigned char *)D.40885];

Renaming statement D.40887 = (int) D.40886;

Renaming statement __result = D.40884 - D.40887;

Renaming statement D.40888 = __s2_len > 2;

Renaming statement D.40868 = __result == 0;

Renaming statement D.40889 = D.40888 && D.40868;

Renaming statement if (D.40889 != 0)



Renaming block #30

Renaming statement D.40892 = __s1 + 3;

Renaming statement D.40893 = *D.40892;

Renaming statement D.40894 = (int) D.40893;

Renaming statement D.40895 = &"off"[3];

Renaming statement D.40896 = MEM[(const unsigned char *)D.40895];

Renaming statement D.40897 = (int) D.40896;

Renaming statement __result = D.40894 - D.40897;



Renaming block #31

Renaming statement D.39872 = __result;

Renaming statement iftmp.7 = D.39872;



Renaming block #32

Renaming statement iftmp.7 = __builtin_strcmp (s, "off");



Renaming block #33

Renaming statement D.39873 = iftmp.7;

Renaming statement if (D.39873 == 0)



Renaming block #34

Renaming statement s = 0B;



Renaming block #35

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement status = switch_rtp_debug_jitter_buffer (D.40834, s);



Renaming block #36

Renaming statement D.40845 = msg->string_arg;

Renaming statement len = atoi (D.40845);

Renaming statement if (len != 0)



Renaming block #37

Renaming statement D.40903 = a_engine->read_impl.microseconds_per_packet;

Renaming statement D.40904 = D.40903 / 1000;

Renaming statement qlen = len / D.40904;

Renaming statement if (qlen <= 0)



Renaming block #38

Renaming statement qlen = 3;



Renaming block #39

Renaming statement if (qlen != 0)



Renaming block #40

Renaming statement D.40845 = msg->string_arg;

Renaming statement p = __builtin_strchr (D.40845, 58);

Renaming statement if (p != 0B)



Renaming block #41

Renaming statement p = p + 1;

Renaming statement maxlen = atol (p);

Renaming statement q = __builtin_strchr (p, 58);

Renaming statement if (q != 0B)



Renaming block #42

Renaming statement q = q + 1;

Renaming statement D.40913 = atol (q);

Renaming statement max_drift = ABS_EXPR <D.40913>;



Renaming block #43

Renaming statement if (maxlen != 0)



Renaming block #44

Renaming statement D.40903 = a_engine->read_impl.microseconds_per_packet;

Renaming statement D.40904 = D.40903 / 1000;

Renaming statement maxqlen = maxlen / D.40904;



Renaming block #45

Renaming statement if (qlen != 0)



Renaming block #46

Renaming statement if (maxqlen < qlen)



Renaming block #47

Renaming statement maxqlen = qlen * 5;



Renaming block #48

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement qlen.8 = (uint32_t) qlen;

Renaming statement maxqlen.9 = (uint32_t) maxqlen;

Renaming statement D.40922 = a_engine->read_impl.samples_per_packet;

Renaming statement D.40923 = a_engine->read_impl.samples_per_second;

Renaming statement max_drift.10 = (uint32_t) max_drift;

Renaming statement D.40925 = switch_rtp_activate_jitter_buffer (D.40834, qlen.8, maxqlen.9, D.40922, D.40923, max_drift.10);

Renaming statement if (D.40925 == 0)



Renaming block #49

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7577, session, 7, "Setting Jitterbuffer to %dms (%d frames) (%d max frames) (%d max drift)\n", len, qlen, maxqlen, max_drift);

Renaming statement D.40823 = session->channel;

Renaming statement switch_channel_set_flag_value (D.40823, 57, 1);

Renaming statement D.40823 = session->channel;

Renaming statement D.40928 = switch_channel_get_variable_dup (D.40823, "rtp_jitter_buffer_plc", 1, -1);

Renaming statement D.40929 = switch_false (D.40928);

Renaming statement if (D.40929 == 0)



Renaming block #50

Renaming statement D.40823 = session->channel;

Renaming statement switch_channel_set_flag_value (D.40823, 58, 1);



Renaming block #51

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7585, session, 4, "Error Setting Jitterbuffer to %dms (%d frames)\n", len, qlen);



Renaming block #52

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_deactivate_jitter_buffer (D.40834);



Renaming block #53

Renaming statement rtp = a_engine->rtp_session;

Renaming statement direction = msg->string_array_arg[0];

Renaming statement if (direction != 0B)



Renaming block #54

Renaming statement D.40936 = *direction;

Renaming statement if (D.40936 == 118)



Renaming block #55

Renaming statement direction = direction + 1;

Renaming statement rtp = v_engine->rtp_session;



Renaming block #56

Renaming statement D.40939 = switch_rtp_ready (rtp);

Renaming statement if (D.40939 != 0)



Renaming block #57

Renaming statement D.40942 = _zstr (direction);

Renaming statement if (D.40942 == 0)



Renaming block #58

Renaming statement D.40945 = msg->string_array_arg[1];

Renaming statement D.40946 = _zstr (D.40945);

Renaming statement if (D.40946 == 0)



Renaming block #59

Renaming statement D.40949 = strcasecmp (direction, "both");

Renaming statement both = D.40949 == 0;

Renaming statement set = 0;

Renaming statement if (both != 0)



Renaming block #60

Renaming statement D.40953 = strcasecmp (direction, "read");

Renaming statement if (D.40953 == 0)



Renaming block #61

Renaming statement D.40954 = flags[28];

Renaming statement D.40955 = D.40954 + 1;

Renaming statement flags[28] = D.40955;

Renaming statement set = set + 1;



Renaming block #62

Renaming statement if (both != 0)



Renaming block #63

Renaming statement D.40959 = strcasecmp (direction, "write");

Renaming statement if (D.40959 == 0)



Renaming block #64

Renaming statement D.40960 = flags[29];

Renaming statement D.40961 = D.40960 + 1;

Renaming statement flags[29] = D.40961;

Renaming statement set = set + 1;



Renaming block #65

Renaming statement if (set != 0)



Renaming block #66

Renaming statement D.40945 = msg->string_array_arg[1];

Renaming statement D.40964 = switch_true (D.40945);

Renaming statement if (D.40964 != 0)



Renaming block #67

Renaming statement switch_rtp_set_flags (rtp, &flags);



Renaming block #68

Renaming statement switch_rtp_clear_flags (rtp, &flags);



Renaming block #69

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7627, session, 3, "Invalid Options\n");



Renaming block #70

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement if (D.40834 != 0B)



Renaming block #71

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement D.40971 = switch_rtp_test_flag (D.40834, 15);

Renaming statement if (D.40971 != 0)



Renaming block #72

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7634, session, 4, "Pass 2833 mode may not work on a transcoded call.\n");



Renaming block #73

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement D.40974 = switch_rtp_ready (D.40834);

Renaming statement if (D.40974 != 0)



Renaming block #74

Renaming statement ok = 0;

Renaming statement D.40823 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.40823, "rtp_jitter_buffer_during_bridge", 1, -1);

Renaming statement if (val == 0B)



Renaming block #75

Renaming statement D.40980 = switch_false (val);

Renaming statement if (D.40980 != 0)



Renaming block #76

Renaming statement D.40823 = session->channel;

Renaming statement D.40981 = switch_channel_test_flag (D.40823, 57);

Renaming statement if (D.40981 != 0)



Renaming block #77

Renaming statement D.40823 = session->channel;

Renaming statement D.40984 = switch_channel_test_cap_partner (D.40823, 5);

Renaming statement if (D.40984 != 0)



Renaming block #78

Renaming statement D.40823 = session->channel;

Renaming statement D.40987 = switch_channel_get_name (D.40823);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7647, session, 7, "%s PAUSE Jitterbuffer\n", D.40987);

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_pause_jitter_buffer (D.40834, 1);

Renaming statement D.40988 = smh->flags;

Renaming statement D.40989 = D.40988 | 4;

Renaming statement smh->flags = D.40989;



Renaming block #79

Renaming statement D.40823 = session->channel;

Renaming statement D.40990 = switch_channel_test_flag (D.40823, 100);

Renaming statement if (D.40990 != 0)



Renaming block #80

Renaming statement D.40823 = session->channel;

Renaming statement D.40993 = switch_channel_test_flag_partner (D.40823, 36);

Renaming statement if (D.40993 != 0)



Renaming block #81

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.40834, 15);

Renaming statement D.40823 = session->channel;

Renaming statement D.40996 = switch_channel_get_name (D.40823);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7656, session, 7, "%s activate passthru 2833 mode.\n", D.40996);



Renaming block #82

Renaming statement D.40823 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.40823, "rtp_notimer_during_bridge", 1, -1);

Renaming statement if (val != 0B)



Renaming block #83

Renaming statement ok = switch_true (val);



Renaming block #84

Renaming statement D.40823 = session->channel;

Renaming statement D.41000 = switch_channel_test_flag (D.40823, 105);

Renaming statement ok = (int) D.41000;



Renaming block #85

Renaming statement if (ok != 0)



Renaming block #86

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement D.41003 = switch_rtp_test_flag (D.40834, 3);

Renaming statement if (D.41003 == 0)



Renaming block #87

Renaming statement ok = 0;



Renaming block #88

Renaming statement if (ok != 0)



Renaming block #89

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_clear_flag (D.40834, 3);

Renaming statement D.40823 = session->channel;

Renaming statement switch_channel_set_flag_value (D.40823, 99, 1);



Renaming block #90

Renaming statement if (ok != 0)



Renaming block #91

Renaming statement D.40823 = session->channel;

Renaming statement D.41011 = switch_channel_test_flag (D.40823, 99);

Renaming statement if (D.41011 != 0)



Renaming block #92

Renaming statement ok = 0;



Renaming block #93

Renaming statement D.40823 = session->channel;

Renaming statement val = switch_channel_get_variable_dup (D.40823, "rtp_autoflush_during_bridge", 1, -1);

Renaming statement if (val != 0B)



Renaming block #94

Renaming statement ok = switch_true (val);



Renaming block #95

Renaming statement D.41016 = smh->media_flags[14];

Renaming statement ok = (int) D.41016;



Renaming block #96

Renaming statement if (ok != 0)



Renaming block #97

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement rtp_flush_read_buffer (D.40834, 1);

Renaming statement D.40823 = session->channel;

Renaming statement switch_channel_set_flag_value (D.40823, 104, 1);



Renaming block #98

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement rtp_flush_read_buffer (D.40834, 0);



Renaming block #99

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement D.41020 = switch_rtp_ready (D.40834);

Renaming statement if (D.41020 != 0)



Renaming block #100

Renaming statement D.40988 = smh->flags;

Renaming statement D.41023 = D.40988 & 4;

Renaming statement if (D.41023 != 0)



Renaming block #101

Renaming statement D.40988 = smh->flags;

Renaming statement D.41026 = D.40988 & 4294967291;

Renaming statement smh->flags = D.41026;

Renaming statement D.40823 = session->channel;

Renaming statement D.41027 = switch_channel_test_flag (D.40823, 57);

Renaming statement if (D.41027 != 0)



Renaming block #102

Renaming statement D.40823 = session->channel;

Renaming statement D.41030 = switch_channel_get_name (D.40823);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7704, session, 7, "%s RESUME Jitterbuffer\n", D.41030);

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_pause_jitter_buffer (D.40834, 0);



Renaming block #103

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement D.41031 = switch_rtp_test_flag (D.40834, 15);

Renaming statement if (D.41031 != 0)



Renaming block #104

Renaming statement D.40823 = session->channel;

Renaming statement D.41034 = switch_channel_get_name (D.40823);

Renaming statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7712, session, 7, "%s deactivate passthru 2833 mode.\n", D.41034);

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_clear_flag (D.40834, 15);



Renaming block #105

Renaming statement D.40823 = session->channel;

Renaming statement D.41035 = switch_channel_test_flag (D.40823, 99);

Renaming statement if (D.41035 != 0)



Renaming block #106

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement D.41038 = switch_rtp_test_flag (D.40834, 12);

Renaming statement if (D.41038 == 0)



Renaming block #107

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement D.41041 = switch_rtp_test_flag (D.40834, 19);

Renaming statement if (D.41041 == 0)



Renaming block #108

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_set_flag (D.40834, 3);



Renaming block #109

Renaming statement D.40823 = session->channel;

Renaming statement switch_channel_clear_flag (D.40823, 99);



Renaming block #110

Renaming statement D.40823 = session->channel;

Renaming statement D.41044 = switch_channel_test_flag (D.40823, 104);

Renaming statement if (D.41044 != 0)



Renaming block #111

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement rtp_flush_read_buffer (D.40834, 2);

Renaming statement D.40823 = session->channel;

Renaming statement switch_channel_clear_flag (D.40823, 104);



Renaming block #112

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement rtp_flush_read_buffer (D.40834, 0);



Renaming block #113

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement D.41048 = switch_rtp_ready (D.40834);

Renaming statement if (D.41048 != 0)



Renaming block #114

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement rtp_flush_read_buffer (D.40834, 0);



Renaming block #115

Renaming statement D.41051 = session->track_duration;

Renaming statement if (D.41051 != 0)



Renaming block #116

Renaming statement D.41051 = session->track_duration;

Renaming statement switch_core_session_enable_heartbeat (session, D.41051);



Renaming block #117

Renaming statement ip = 0B;

Renaming statement port = 0B;

Renaming statement D.40823 = session->channel;

Renaming statement switch_channel_set_flag_value (D.40823, 15, 1);

Renaming statement a_engine->codec_negotiated = 0;

Renaming statement v_engine->codec_negotiated = 0;

Renaming statement switch_core_media_set_local_sdp (session, 0B, 0);

Renaming statement D.40823 = session->channel;

Renaming statement D.41054 = switch_channel_get_variable_dup (D.40823, "bypass_keep_codec", 1, -1);

Renaming statement D.41055 = switch_true (D.41054);

Renaming statement if (D.41055 != 0)



Renaming block #118

Renaming statement D.40823 = session->channel;

Renaming statement D.40823 = session->channel;

Renaming statement D.41058 = switch_channel_get_variable_dup (D.40823, "ep_codec_string", 1, -1);

Renaming statement switch_channel_set_variable_var_check (D.40823, "absolute_codec_string", D.41058, 1);



Renaming block #119

Renaming statement D.40823 = session->channel;

Renaming statement uuid = switch_channel_get_partner_uuid (D.40823);

Renaming statement if (uuid != 0B)



Renaming block #120

Renaming statement other_session = switch_core_session_perform_locate (uuid, "src/switch_core_media.c", &__func__, 7768);

Renaming statement if (other_session != 0B)



Renaming block #121

Renaming statement other_channel = switch_core_session_get_channel (other_session);

Renaming statement ip = switch_channel_get_variable_dup (other_channel, "remote_media_ip", 1, -1);

Renaming statement port = switch_channel_get_variable_dup (other_channel, "remote_media_port", 1, -1);

Renaming statement switch_core_session_rwunlock (other_session);

Renaming statement D.41063 = ip != 0B;

Renaming statement D.41064 = port != 0B;

Renaming statement D.41065 = D.41063 && D.41064;

Renaming statement if (D.41065 != 0)



Renaming block #122

Renaming statement switch_core_media_prepare_codecs (session, 1);

Renaming statement clear_pmaps (a_engine);

Renaming statement clear_pmaps (v_engine);

Renaming statement D.41068 = atoi (port);

Renaming statement D.41069 = (short unsigned int) D.41068;

Renaming statement switch_core_media_gen_local_sdp (session, 0, ip, D.41069, 0B, 1);



Renaming block #123

Renaming statement D.41070 = smh->mparams;

Renaming statement D.41071 = D.41070->local_sdp_str;

Renaming statement if (D.41071 == 0B)



Renaming block #124

Renaming statement switch_core_media_absorb_sdp (session);



Renaming block #125

Renaming statement D.41051 = session->track_duration;

Renaming statement if (D.41051 != 0)



Renaming block #126

Renaming statement D.41051 = session->track_duration;

Renaming statement switch_core_session_enable_heartbeat (session, D.41051);



Renaming block #127

Renaming statement D.41076 = smh->mutex;

Renaming statement if (D.41076 != 0B)



Renaming block #128

Renaming statement D.41076 = smh->mutex;

Renaming statement switch_mutex_lock (D.41076);



Renaming block #129

Renaming statement D.40823 = session->channel;

Renaming statement D.41081 = switch_channel_check_signal (D.40823, 1);

Renaming statement if (D.41081 != 0)



Renaming block #130

Renaming statement D.40823 = session->channel;

Renaming statement D.41083 = switch_channel_get_state (D.40823);

Renaming statement if (D.41083 > 9)



Renaming block #132

Renaming statement D.40827 = msg->message_id;

Renaming statement switch (D.40827) <default: end_lock, case 30: <L198>, case 37: <L186>, case 40: <L170>>



Renaming block #133

Renaming statement D.40845 = msg->string_arg;

Renaming statement if (D.40845 != 0B)



Renaming block #134

Renaming statement D.40823 = session->channel;

Renaming statement switch_channel_set_variable_var_check (D.40823, "absolute_codec_string", 0B, 1);

Renaming statement D.40845 = msg->string_arg;

Renaming statement D.41086 = *D.40845;

Renaming statement if (D.41086 == 61)



Renaming block #135

Renaming statement D.40823 = session->channel;

Renaming statement D.40845 = msg->string_arg;

Renaming statement switch_channel_set_variable_var_check (D.40823, "codec_string", D.40845, 1);



Renaming block #136

Renaming statement D.40823 = session->channel;

Renaming statement D.41091 = v_engine->cur_payload_map;

Renaming statement D.41092 = D.41091->rm_encoding;

Renaming statement if (D.41092 != 0B)



Renaming block #137

Renaming statement D.41091 = v_engine->cur_payload_map;

Renaming statement iftmp.11 = D.41091->rm_encoding;



Renaming block #138

Renaming statement iftmp.11 = "";



Renaming block #139

Renaming statement D.41091 = v_engine->cur_payload_map;

Renaming statement D.41092 = D.41091->rm_encoding;

Renaming statement if (D.41092 != 0B)



Renaming block #140

Renaming statement iftmp.12 = ",";



Renaming block #141

Renaming statement iftmp.12 = "";



Renaming block #142

Renaming statement D.41100 = a_engine->cur_payload_map;

Renaming statement D.41101 = D.41100->rm_encoding;

Renaming statement D.40845 = msg->string_arg;

Renaming statement switch_channel_set_variable_printf (D.40823, "codec_string", "=%s%s%s,%s", iftmp.11, iftmp.12, D.41101, D.40845);



Renaming block #143

Renaming statement a_engine->codec_negotiated = 0;

Renaming statement v_engine->codec_negotiated = 0;

Renaming statement D.40823 = session->channel;

Renaming statement switch_channel_clear_flag (D.40823, 98);

Renaming statement switch_core_media_prepare_codecs (session, 1);

Renaming statement switch_core_media_check_video_codecs (session);

Renaming statement switch_core_media_gen_local_sdp (session, 0, 0B, 0, 0B, 1);



Renaming block #144

Renaming statement switch_media_handle_set_media_flag (smh, 7);

Renaming statement D.40838 = msg->numeric_arg;

Renaming statement if (D.40838 != 0)



Renaming block #145

Renaming statement D.41104 = switch_core_session_perform_get_partner (session, &nsession, "src/switch_core_media.c", &__func__, 7835);

Renaming statement if (D.41104 == 0)



Renaming block #146

Renaming statement msg->numeric_arg = 0;

Renaming statement nsession.13 = nsession;

Renaming statement switch_core_session_perform_receive_message (nsession.13, msg, "src/switch_core_media.c", &__func__, 7837);

Renaming statement nsession.13 = nsession;

Renaming statement switch_core_session_rwunlock (nsession.13);



Renaming block #147

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement D.41108 = switch_rtp_ready (D.40834);

Renaming statement if (D.41108 != 0)



Renaming block #148

Renaming statement D.40838 = msg->numeric_arg;

Renaming statement if (D.40838 != 0)



Renaming block #149

Renaming statement D.40823 = session->channel;

Renaming statement D.41113 = switch_channel_test_flag (D.40823, 57);

Renaming statement if (D.41113 != 0)



Renaming block #150

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_pause_jitter_buffer (D.40834, 1);

Renaming statement D.40988 = smh->flags;

Renaming statement D.40989 = D.40988 | 4;

Renaming statement smh->flags = D.40989;



Renaming block #151

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement rtp_flush_read_buffer (D.40834, 2);



Renaming block #152

Renaming statement D.40988 = smh->flags;

Renaming statement D.41023 = D.40988 & 4;

Renaming statement if (D.41023 != 0)



Renaming block #153

Renaming statement D.40988 = smh->flags;

Renaming statement D.41026 = D.40988 & 4294967291;

Renaming statement smh->flags = D.41026;

Renaming statement D.40823 = session->channel;

Renaming statement D.41119 = switch_channel_test_flag (D.40823, 57);

Renaming statement if (D.41119 != 0)



Renaming block #154

Renaming statement D.40834 = a_engine->rtp_session;

Renaming statement switch_rtp_pause_jitter_buffer (D.40834, 0);



Renaming block #155

Renaming statement D.40823 = session->channel;

Renaming statement t38_options = switch_channel_get_private (D.40823, "t38_options");

Renaming statement if (t38_options != 0B)



Renaming block #156

Renaming statement switch_core_media_start_udptl (session, t38_options);



Renaming block #131

Renaming statement status = 1;



Renaming block #157

Renaming statement D.41076 = smh->mutex;

Renaming statement if (D.41076 != 0B)



Renaming block #158

Renaming statement D.41076 = smh->mutex;

Renaming statement switch_mutex_unlock (D.41076);



Renaming block #159

Renaming statement D.40823 = session->channel;

Renaming statement D.41128 = switch_channel_check_signal (D.40823, 1);

Renaming statement if (D.41128 != 0)



Renaming block #160

Renaming statement D.40823 = session->channel;

Renaming statement D.41130 = switch_channel_get_state (D.40823);

Renaming statement if (D.41130 > 9)



Renaming block #161

Renaming statement status = 1;



Renaming block #162

Renaming statement D.40820 = status;



Renaming block #8

Renaming statement D.40820 = 1;



Renaming block #163

Renaming statement return D.40820;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 7477, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_27 = session_26(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.40823_29 = session_26(D)->channel;

Updating SSA information for statement D.40824_30 = switch_channel_check_signal (D.40823_29, 1);



Registering new PHI nodes in block #7

Updating SSA information for statement D.40823_31 = session_26(D)->channel;

Updating SSA information for statement D.40826_32 = switch_channel_get_state (D.40823_31);



Registering new PHI nodes in block #9

Updating SSA information for statement D.40827_36 = msg_35(D)->message_id;



Registering new PHI nodes in block #10

Updating SSA information for statement D.40823_37 = session_26(D)->channel;

Updating SSA information for statement D.40828_38 = switch_channel_test_flag (D.40823_37, 82);



Registering new PHI nodes in block #11

Updating SSA information for statement D.40823_39 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40823_39, 122, 1);



Registering new PHI nodes in block #12

Updating SSA information for statement D.40831_40 = v_engine_34->rtp_session;



Registering new PHI nodes in block #13

Updating SSA information for statement D.40831_41 = v_engine_34->rtp_session;

Updating SSA information for statement switch_rtp_video_refresh (D.40831_41);



Registering new PHI nodes in block #14

Updating SSA information for statement D.40834_42 = a_engine_33->rtp_session;

Updating SSA information for statement D.40835_43 = switch_rtp_ready (D.40834_42);



Registering new PHI nodes in block #15

Updating SSA information for statement D.40838_44 = msg_35(D)->numeric_arg;



Registering new PHI nodes in block #16

Updating SSA information for statement D.40834_45 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.40834_45, 19);



Registering new PHI nodes in block #17

Updating SSA information for statement D.40834_46 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_clear_flag (D.40834_46, 19);



Registering new PHI nodes in block #18

Updating SSA information for statement D.40834_47 = a_engine_33->rtp_session;

Updating SSA information for statement D.40842_48 = switch_rtp_ready (D.40834_47);



Registering new PHI nodes in block #19

Updating SSA information for statement D.40845_54 = msg_35(D)->string_arg;



Registering new PHI nodes in block #20

Updating SSA information for statement D.40845_55 = msg_35(D)->string_arg;

Updating SSA information for statement D.40848_56 = strcasecmp (D.40845_55, "pause");



Registering new PHI nodes in block #21

Updating SSA information for statement D.40834_57 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_pause_jitter_buffer (D.40834_57, 1);



Registering new PHI nodes in block #22

Updating SSA information for statement D.40845_58 = msg_35(D)->string_arg;

Updating SSA information for statement D.40851_59 = strcasecmp (D.40845_58, "resume");



Registering new PHI nodes in block #23

Updating SSA information for statement D.40834_60 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_pause_jitter_buffer (D.40834_60, 0);



Registering new PHI nodes in block #24

Updating SSA information for statement D.40845_61 = msg_35(D)->string_arg;

Updating SSA information for statement D.40854_62 = strncasecmp (D.40845_61, "debug:", 6);



Registering new PHI nodes in block #25

Updating SSA information for statement D.40845_63 = msg_35(D)->string_arg;



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27

Updating SSA information for statement D.40862_67 = *__s1_66;

Updating SSA information for statement D.40865_70 = MEM[(const unsigned char *)D.40864_69];



Registering new PHI nodes in block #28

Updating SSA information for statement D.40873_77 = *D.40872_76;

Updating SSA information for statement D.40876_80 = MEM[(const unsigned char *)D.40875_79];



Registering new PHI nodes in block #29

Updating SSA information for statement D.40883_87 = *D.40882_86;

Updating SSA information for statement D.40886_90 = MEM[(const unsigned char *)D.40885_89];



Registering new PHI nodes in block #30

Updating SSA information for statement D.40893_97 = *D.40892_96;

Updating SSA information for statement D.40896_100 = MEM[(const unsigned char *)D.40895_99];



Registering new PHI nodes in block #31



Registering new PHI nodes in block #32

Updating SSA information for statement iftmp.7_105 = __builtin_strcmp (s_64, "off");



Registering new PHI nodes in block #33



Registering new PHI nodes in block #34



Registering new PHI nodes in block #35

Updating SSA information for statement D.40834_108 = a_engine_33->rtp_session;

Updating SSA information for statement status_109 = switch_rtp_debug_jitter_buffer (D.40834_108, s_12);



Registering new PHI nodes in block #36

Updating SSA information for statement D.40845_110 = msg_35(D)->string_arg;

Updating SSA information for statement len_111 = atoi (D.40845_110);



Registering new PHI nodes in block #37

Updating SSA information for statement D.40903_112 = a_engine_33->read_impl.microseconds_per_packet;



Registering new PHI nodes in block #38



Registering new PHI nodes in block #39



Registering new PHI nodes in block #40

Updating SSA information for statement D.40845_116 = msg_35(D)->string_arg;

Updating SSA information for statement p_117 = __builtin_strchr (D.40845_116, 58);



Registering new PHI nodes in block #41

Updating SSA information for statement maxlen_119 = atol (p_118);

Updating SSA information for statement q_120 = __builtin_strchr (p_118, 58);



Registering new PHI nodes in block #42

Updating SSA information for statement D.40913_122 = atol (q_121);



Registering new PHI nodes in block #43



Registering new PHI nodes in block #44

Updating SSA information for statement D.40903_124 = a_engine_33->read_impl.microseconds_per_packet;



Registering new PHI nodes in block #45



Registering new PHI nodes in block #46



Registering new PHI nodes in block #47



Registering new PHI nodes in block #48

Updating SSA information for statement D.40834_128 = a_engine_33->rtp_session;

Updating SSA information for statement D.40922_131 = a_engine_33->read_impl.samples_per_packet;

Updating SSA information for statement D.40923_132 = a_engine_33->read_impl.samples_per_second;

Updating SSA information for statement D.40925_134 = switch_rtp_activate_jitter_buffer (D.40834_128, qlen.8_129, maxqlen.9_130, D.40922_131, D.40923_132, max_drift.10_133);



Registering new PHI nodes in block #49

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7577, session_26(D), 7, "Setting Jitterbuffer to %dms (%d frames) (%d max frames) (%d max drift)\n", len_4, qlen_7, maxqlen_9, max_drift_11);

Updating SSA information for statement D.40823_135 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40823_135, 57, 1);

Updating SSA information for statement D.40823_136 = session_26(D)->channel;

Updating SSA information for statement D.40928_137 = switch_channel_get_variable_dup (D.40823_136, "rtp_jitter_buffer_plc", 1, -1);

Updating SSA information for statement D.40929_138 = switch_false (D.40928_137);



Registering new PHI nodes in block #50

Updating SSA information for statement D.40823_139 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40823_139, 58, 1);



Registering new PHI nodes in block #51

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7585, session_26(D), 4, "Error Setting Jitterbuffer to %dms (%d frames)\n", len_4, qlen_7);



Registering new PHI nodes in block #52

Updating SSA information for statement D.40834_140 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_deactivate_jitter_buffer (D.40834_140);



Registering new PHI nodes in block #53

Updating SSA information for statement rtp_141 = a_engine_33->rtp_session;

Updating SSA information for statement direction_142 = msg_35(D)->string_array_arg[0];



Registering new PHI nodes in block #54

Updating SSA information for statement D.40936_143 = *direction_142;



Registering new PHI nodes in block #55

Updating SSA information for statement rtp_145 = v_engine_34->rtp_session;



Registering new PHI nodes in block #56

Updating SSA information for statement D.40939_146 = switch_rtp_ready (rtp_14);



Registering new PHI nodes in block #57

Updating SSA information for statement D.40942_147 = _zstr (direction_15);



Registering new PHI nodes in block #58

Updating SSA information for statement D.40945_148 = msg_35(D)->string_array_arg[1];

Updating SSA information for statement D.40946_149 = _zstr (D.40945_148);



Registering new PHI nodes in block #59

Updating SSA information for statement flags = {};

Updating SSA information for statement D.40949_150 = strcasecmp (direction_15, "both");



Registering new PHI nodes in block #60

Updating SSA information for statement D.40953_153 = strcasecmp (direction_15, "read");



Registering new PHI nodes in block #61

Updating SSA information for statement D.40954_154 = flags[28];

Updating SSA information for statement flags[28] = D.40955_155;



Registering new PHI nodes in block #62



Registering new PHI nodes in block #63

Updating SSA information for statement D.40959_157 = strcasecmp (direction_15, "write");



Registering new PHI nodes in block #64

Updating SSA information for statement D.40960_158 = flags[29];

Updating SSA information for statement flags[29] = D.40961_159;



Registering new PHI nodes in block #65



Registering new PHI nodes in block #66

Updating SSA information for statement D.40945_161 = msg_35(D)->string_array_arg[1];

Updating SSA information for statement D.40964_162 = switch_true (D.40945_161);



Registering new PHI nodes in block #67

Updating SSA information for statement switch_rtp_set_flags (rtp_14, &flags);



Registering new PHI nodes in block #68

Updating SSA information for statement switch_rtp_clear_flags (rtp_14, &flags);



Registering new PHI nodes in block #69

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7627, session_26(D), 3, "Invalid Options\n");



Registering new PHI nodes in block #70

Updating SSA information for statement D.40834_163 = a_engine_33->rtp_session;



Registering new PHI nodes in block #71

Updating SSA information for statement D.40834_164 = a_engine_33->rtp_session;

Updating SSA information for statement D.40971_165 = switch_rtp_test_flag (D.40834_164, 15);



Registering new PHI nodes in block #72

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7634, session_26(D), 4, "Pass 2833 mode may not work on a transcoded call.\n");



Registering new PHI nodes in block #73

Updating SSA information for statement D.40834_166 = a_engine_33->rtp_session;

Updating SSA information for statement D.40974_167 = switch_rtp_ready (D.40834_166);



Registering new PHI nodes in block #74

Updating SSA information for statement D.40823_169 = session_26(D)->channel;

Updating SSA information for statement val_170 = switch_channel_get_variable_dup (D.40823_169, "rtp_jitter_buffer_during_bridge", 1, -1);



Registering new PHI nodes in block #75

Updating SSA information for statement D.40980_171 = switch_false (val_170);



Registering new PHI nodes in block #76

Updating SSA information for statement D.40823_172 = session_26(D)->channel;

Updating SSA information for statement D.40981_173 = switch_channel_test_flag (D.40823_172, 57);



Registering new PHI nodes in block #77

Updating SSA information for statement D.40823_174 = session_26(D)->channel;

Updating SSA information for statement D.40984_175 = switch_channel_test_cap_partner (D.40823_174, 5);



Registering new PHI nodes in block #78

Updating SSA information for statement D.40823_176 = session_26(D)->channel;

Updating SSA information for statement D.40987_177 = switch_channel_get_name (D.40823_176);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7647, session_26(D), 7, "%s PAUSE Jitterbuffer\n", D.40987_177);

Updating SSA information for statement D.40834_178 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_pause_jitter_buffer (D.40834_178, 1);

Updating SSA information for statement D.40988_179 = smh_27->flags;

Updating SSA information for statement smh_27->flags = D.40989_180;



Registering new PHI nodes in block #79

Updating SSA information for statement D.40823_181 = session_26(D)->channel;

Updating SSA information for statement D.40990_182 = switch_channel_test_flag (D.40823_181, 100);



Registering new PHI nodes in block #80

Updating SSA information for statement D.40823_183 = session_26(D)->channel;

Updating SSA information for statement D.40993_184 = switch_channel_test_flag_partner (D.40823_183, 36);



Registering new PHI nodes in block #81

Updating SSA information for statement D.40834_185 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.40834_185, 15);

Updating SSA information for statement D.40823_186 = session_26(D)->channel;

Updating SSA information for statement D.40996_187 = switch_channel_get_name (D.40823_186);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7656, session_26(D), 7, "%s activate passthru 2833 mode.\n", D.40996_187);



Registering new PHI nodes in block #82

Updating SSA information for statement D.40823_188 = session_26(D)->channel;

Updating SSA information for statement val_189 = switch_channel_get_variable_dup (D.40823_188, "rtp_notimer_during_bridge", 1, -1);



Registering new PHI nodes in block #83

Updating SSA information for statement ok_190 = switch_true (val_189);



Registering new PHI nodes in block #84

Updating SSA information for statement D.40823_191 = session_26(D)->channel;

Updating SSA information for statement D.41000_192 = switch_channel_test_flag (D.40823_191, 105);



Registering new PHI nodes in block #85



Registering new PHI nodes in block #86

Updating SSA information for statement D.40834_194 = a_engine_33->rtp_session;

Updating SSA information for statement D.41003_195 = switch_rtp_test_flag (D.40834_194, 3);



Registering new PHI nodes in block #87



Registering new PHI nodes in block #88



Registering new PHI nodes in block #89

Updating SSA information for statement D.40834_197 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_clear_flag (D.40834_197, 3);

Updating SSA information for statement D.40823_198 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40823_198, 99, 1);



Registering new PHI nodes in block #90



Registering new PHI nodes in block #91

Updating SSA information for statement D.40823_199 = session_26(D)->channel;

Updating SSA information for statement D.41011_200 = switch_channel_test_flag (D.40823_199, 99);



Registering new PHI nodes in block #92



Registering new PHI nodes in block #93

Updating SSA information for statement D.40823_202 = session_26(D)->channel;

Updating SSA information for statement val_203 = switch_channel_get_variable_dup (D.40823_202, "rtp_autoflush_during_bridge", 1, -1);



Registering new PHI nodes in block #94

Updating SSA information for statement ok_204 = switch_true (val_203);



Registering new PHI nodes in block #95

Updating SSA information for statement D.41016_205 = smh_27->media_flags[14];



Registering new PHI nodes in block #96



Registering new PHI nodes in block #97

Updating SSA information for statement D.40834_207 = a_engine_33->rtp_session;

Updating SSA information for statement rtp_flush_read_buffer (D.40834_207, 1);

Updating SSA information for statement D.40823_208 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40823_208, 104, 1);



Registering new PHI nodes in block #98

Updating SSA information for statement D.40834_209 = a_engine_33->rtp_session;

Updating SSA information for statement rtp_flush_read_buffer (D.40834_209, 0);



Registering new PHI nodes in block #99

Updating SSA information for statement D.40834_210 = a_engine_33->rtp_session;

Updating SSA information for statement D.41020_211 = switch_rtp_ready (D.40834_210);



Registering new PHI nodes in block #100

Updating SSA information for statement D.40988_212 = smh_27->flags;



Registering new PHI nodes in block #101

Updating SSA information for statement D.40988_214 = smh_27->flags;

Updating SSA information for statement smh_27->flags = D.41026_215;

Updating SSA information for statement D.40823_216 = session_26(D)->channel;

Updating SSA information for statement D.41027_217 = switch_channel_test_flag (D.40823_216, 57);



Registering new PHI nodes in block #102

Updating SSA information for statement D.40823_218 = session_26(D)->channel;

Updating SSA information for statement D.41030_219 = switch_channel_get_name (D.40823_218);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7704, session_26(D), 7, "%s RESUME Jitterbuffer\n", D.41030_219);

Updating SSA information for statement D.40834_220 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_pause_jitter_buffer (D.40834_220, 0);



Registering new PHI nodes in block #103

Updating SSA information for statement D.40834_221 = a_engine_33->rtp_session;

Updating SSA information for statement D.41031_222 = switch_rtp_test_flag (D.40834_221, 15);



Registering new PHI nodes in block #104

Updating SSA information for statement D.40823_223 = session_26(D)->channel;

Updating SSA information for statement D.41034_224 = switch_channel_get_name (D.40823_223);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7712, session_26(D), 7, "%s deactivate passthru 2833 mode.\n", D.41034_224);

Updating SSA information for statement D.40834_225 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_clear_flag (D.40834_225, 15);



Registering new PHI nodes in block #105

Updating SSA information for statement D.40823_226 = session_26(D)->channel;

Updating SSA information for statement D.41035_227 = switch_channel_test_flag (D.40823_226, 99);



Registering new PHI nodes in block #106

Updating SSA information for statement D.40834_228 = a_engine_33->rtp_session;

Updating SSA information for statement D.41038_229 = switch_rtp_test_flag (D.40834_228, 12);



Registering new PHI nodes in block #107

Updating SSA information for statement D.40834_230 = a_engine_33->rtp_session;

Updating SSA information for statement D.41041_231 = switch_rtp_test_flag (D.40834_230, 19);



Registering new PHI nodes in block #108

Updating SSA information for statement D.40834_232 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.40834_232, 3);



Registering new PHI nodes in block #109

Updating SSA information for statement D.40823_233 = session_26(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.40823_233, 99);



Registering new PHI nodes in block #110

Updating SSA information for statement D.40823_234 = session_26(D)->channel;

Updating SSA information for statement D.41044_235 = switch_channel_test_flag (D.40823_234, 104);



Registering new PHI nodes in block #111

Updating SSA information for statement D.40834_236 = a_engine_33->rtp_session;

Updating SSA information for statement rtp_flush_read_buffer (D.40834_236, 2);

Updating SSA information for statement D.40823_237 = session_26(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.40823_237, 104);



Registering new PHI nodes in block #112

Updating SSA information for statement D.40834_238 = a_engine_33->rtp_session;

Updating SSA information for statement rtp_flush_read_buffer (D.40834_238, 0);



Registering new PHI nodes in block #113

Updating SSA information for statement D.40834_239 = a_engine_33->rtp_session;

Updating SSA information for statement D.41048_240 = switch_rtp_ready (D.40834_239);



Registering new PHI nodes in block #114

Updating SSA information for statement D.40834_241 = a_engine_33->rtp_session;

Updating SSA information for statement rtp_flush_read_buffer (D.40834_241, 0);



Registering new PHI nodes in block #115

Updating SSA information for statement D.41051_242 = session_26(D)->track_duration;



Registering new PHI nodes in block #116

Updating SSA information for statement D.41051_243 = session_26(D)->track_duration;

Updating SSA information for statement switch_core_session_enable_heartbeat (session_26(D), D.41051_243);



Registering new PHI nodes in block #117

Updating SSA information for statement D.40823_246 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40823_246, 15, 1);

Updating SSA information for statement a_engine_33->codec_negotiated = 0;

Updating SSA information for statement v_engine_34->codec_negotiated = 0;

Updating SSA information for statement switch_core_media_set_local_sdp (session_26(D), 0B, 0);

Updating SSA information for statement D.40823_247 = session_26(D)->channel;

Updating SSA information for statement D.41054_248 = switch_channel_get_variable_dup (D.40823_247, "bypass_keep_codec", 1, -1);

Updating SSA information for statement D.41055_249 = switch_true (D.41054_248);



Registering new PHI nodes in block #118

Updating SSA information for statement D.40823_250 = session_26(D)->channel;

Updating SSA information for statement D.40823_251 = session_26(D)->channel;

Updating SSA information for statement D.41058_252 = switch_channel_get_variable_dup (D.40823_251, "ep_codec_string", 1, -1);

Updating SSA information for statement switch_channel_set_variable_var_check (D.40823_251, "absolute_codec_string", D.41058_252, 1);



Registering new PHI nodes in block #119

Updating SSA information for statement D.40823_253 = session_26(D)->channel;

Updating SSA information for statement uuid_254 = switch_channel_get_partner_uuid (D.40823_253);



Registering new PHI nodes in block #120

Updating SSA information for statement other_session_255 = switch_core_session_perform_locate (uuid_254, "src/switch_core_media.c", &__func__, 7768);



Registering new PHI nodes in block #121

Updating SSA information for statement other_channel_256 = switch_core_session_get_channel (other_session_255);

Updating SSA information for statement ip_257 = switch_channel_get_variable_dup (other_channel_256, "remote_media_ip", 1, -1);

Updating SSA information for statement port_258 = switch_channel_get_variable_dup (other_channel_256, "remote_media_port", 1, -1);

Updating SSA information for statement switch_core_session_rwunlock (other_session_255);



Registering new PHI nodes in block #122

Updating SSA information for statement switch_core_media_prepare_codecs (session_26(D), 1);

Updating SSA information for statement clear_pmaps (a_engine_33);

Updating SSA information for statement clear_pmaps (v_engine_34);

Updating SSA information for statement D.41068_262 = atoi (port_258);

Updating SSA information for statement switch_core_media_gen_local_sdp (session_26(D), 0, ip_257, D.41069_263, 0B, 1);



Registering new PHI nodes in block #123

Updating SSA information for statement D.41070_264 = smh_27->mparams;

Updating SSA information for statement D.41071_265 = D.41070_264->local_sdp_str;



Registering new PHI nodes in block #124

Updating SSA information for statement switch_core_media_absorb_sdp (session_26(D));



Registering new PHI nodes in block #125

Updating SSA information for statement D.41051_266 = session_26(D)->track_duration;



Registering new PHI nodes in block #126

Updating SSA information for statement D.41051_267 = session_26(D)->track_duration;

Updating SSA information for statement switch_core_session_enable_heartbeat (session_26(D), D.41051_267);



Registering new PHI nodes in block #127

Updating SSA information for statement D.41076_268 = smh_27->mutex;



Registering new PHI nodes in block #128

Updating SSA information for statement D.41076_269 = smh_27->mutex;

Updating SSA information for statement switch_mutex_lock (D.41076_269);



Registering new PHI nodes in block #129

Updating SSA information for statement D.40823_270 = session_26(D)->channel;

Updating SSA information for statement D.41081_271 = switch_channel_check_signal (D.40823_270, 1);



Registering new PHI nodes in block #130

Updating SSA information for statement D.40823_272 = session_26(D)->channel;

Updating SSA information for statement D.41083_273 = switch_channel_get_state (D.40823_272);



Registering new PHI nodes in block #132

Updating SSA information for statement D.40827_274 = msg_35(D)->message_id;



Registering new PHI nodes in block #133

Updating SSA information for statement D.40845_275 = msg_35(D)->string_arg;



Registering new PHI nodes in block #134

Updating SSA information for statement D.40823_276 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.40823_276, "absolute_codec_string", 0B, 1);

Updating SSA information for statement D.40845_277 = msg_35(D)->string_arg;

Updating SSA information for statement D.41086_278 = *D.40845_277;



Registering new PHI nodes in block #135

Updating SSA information for statement D.40823_279 = session_26(D)->channel;

Updating SSA information for statement D.40845_280 = msg_35(D)->string_arg;

Updating SSA information for statement switch_channel_set_variable_var_check (D.40823_279, "codec_string", D.40845_280, 1);



Registering new PHI nodes in block #136

Updating SSA information for statement D.40823_281 = session_26(D)->channel;

Updating SSA information for statement D.41091_282 = v_engine_34->cur_payload_map;

Updating SSA information for statement D.41092_283 = D.41091_282->rm_encoding;



Registering new PHI nodes in block #137

Updating SSA information for statement D.41091_284 = v_engine_34->cur_payload_map;

Updating SSA information for statement iftmp.11_285 = D.41091_284->rm_encoding;



Registering new PHI nodes in block #138



Registering new PHI nodes in block #139

Updating SSA information for statement D.41091_287 = v_engine_34->cur_payload_map;

Updating SSA information for statement D.41092_288 = D.41091_287->rm_encoding;



Registering new PHI nodes in block #140



Registering new PHI nodes in block #141



Registering new PHI nodes in block #142

Updating SSA information for statement D.41100_291 = a_engine_33->cur_payload_map;

Updating SSA information for statement D.41101_292 = D.41100_291->rm_encoding;

Updating SSA information for statement D.40845_293 = msg_35(D)->string_arg;

Updating SSA information for statement switch_channel_set_variable_printf (D.40823_281, "codec_string", "=%s%s%s,%s", iftmp.11_23, iftmp.12_24, D.41101_292, D.40845_293);



Registering new PHI nodes in block #143

Updating SSA information for statement a_engine_33->codec_negotiated = 0;

Updating SSA information for statement v_engine_34->codec_negotiated = 0;

Updating SSA information for statement D.40823_294 = session_26(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.40823_294, 98);

Updating SSA information for statement switch_core_media_prepare_codecs (session_26(D), 1);

Updating SSA information for statement switch_core_media_check_video_codecs (session_26(D));

Updating SSA information for statement switch_core_media_gen_local_sdp (session_26(D), 0, 0B, 0, 0B, 1);



Registering new PHI nodes in block #144

Updating SSA information for statement switch_media_handle_set_media_flag (smh_27, 7);

Updating SSA information for statement D.40838_295 = msg_35(D)->numeric_arg;



Registering new PHI nodes in block #145

Updating SSA information for statement D.41104_296 = switch_core_session_perform_get_partner (session_26(D), &nsession, "src/switch_core_media.c", &__func__, 7835);



Registering new PHI nodes in block #146

Updating SSA information for statement msg_35(D)->numeric_arg = 0;

Updating SSA information for statement nsession.13_297 = nsession;

Updating SSA information for statement switch_core_session_perform_receive_message (nsession.13_297, msg_35(D), "src/switch_core_media.c", &__func__, 7837);

Updating SSA information for statement nsession.13_298 = nsession;

Updating SSA information for statement switch_core_session_rwunlock (nsession.13_298);



Registering new PHI nodes in block #147

Updating SSA information for statement D.40834_299 = a_engine_33->rtp_session;

Updating SSA information for statement D.41108_300 = switch_rtp_ready (D.40834_299);



Registering new PHI nodes in block #148

Updating SSA information for statement D.40838_301 = msg_35(D)->numeric_arg;



Registering new PHI nodes in block #149

Updating SSA information for statement D.40823_302 = session_26(D)->channel;

Updating SSA information for statement D.41113_303 = switch_channel_test_flag (D.40823_302, 57);



Registering new PHI nodes in block #150

Updating SSA information for statement D.40834_304 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_pause_jitter_buffer (D.40834_304, 1);

Updating SSA information for statement D.40988_305 = smh_27->flags;

Updating SSA information for statement smh_27->flags = D.40989_306;



Registering new PHI nodes in block #151

Updating SSA information for statement D.40834_307 = a_engine_33->rtp_session;

Updating SSA information for statement rtp_flush_read_buffer (D.40834_307, 2);



Registering new PHI nodes in block #152

Updating SSA information for statement D.40988_308 = smh_27->flags;



Registering new PHI nodes in block #153

Updating SSA information for statement D.40988_310 = smh_27->flags;

Updating SSA information for statement smh_27->flags = D.41026_311;

Updating SSA information for statement D.40823_312 = session_26(D)->channel;

Updating SSA information for statement D.41119_313 = switch_channel_test_flag (D.40823_312, 57);



Registering new PHI nodes in block #154

Updating SSA information for statement D.40834_314 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_pause_jitter_buffer (D.40834_314, 0);



Registering new PHI nodes in block #155

Updating SSA information for statement D.40823_315 = session_26(D)->channel;

Updating SSA information for statement t38_options_316 = switch_channel_get_private (D.40823_315, "t38_options");



Registering new PHI nodes in block #156

Updating SSA information for statement switch_core_media_start_udptl (session_26(D), t38_options_316);



Registering new PHI nodes in block #131



Registering new PHI nodes in block #157

Updating SSA information for statement D.41076_318 = smh_27->mutex;



Registering new PHI nodes in block #158

Updating SSA information for statement D.41076_319 = smh_27->mutex;

Updating SSA information for statement switch_mutex_unlock (D.41076_319);



Registering new PHI nodes in block #159

Updating SSA information for statement D.40823_320 = session_26(D)->channel;

Updating SSA information for statement D.41128_321 = switch_channel_check_signal (D.40823_320, 1);



Registering new PHI nodes in block #160

Updating SSA information for statement D.40823_322 = session_26(D)->channel;

Updating SSA information for statement D.41130_323 = switch_channel_get_state (D.40823_322);



Registering new PHI nodes in block #161



Registering new PHI nodes in block #162



Registering new PHI nodes in block #8



Registering new PHI nodes in block #163



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 164
Number of blocks to update: 163 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  switch_status_t status;
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_receive_message";
  void end = <<< error >>>; (unused)
  static const char __func__[34] = "switch_core_media_receive_message";
  void end_lock = <<< error >>>; (unused)

  { Scope block #0 
    int len;
    int maxlen;
    int qlen;
    int maxqlen;
    int max_drift;

    { Scope block #0 
      char * p;
      char * q;
      const char * s;

      { Scope block #0 
        size_t __s1_len; (unused)
        size_t __s2_len;

        { Scope block #0 
          const unsigned char * __s1;
          register int __result;

        }

      }

    }

  }

  { Scope block #0 
    struct switch_rtp_t * rtp;
    const char * direction;

    { Scope block #0 
      switch_rtp_flag_t flags[39];
      int both;
      int set;

    }

  }

  { Scope block #0 
    const char * val;
    int ok;

  }

  { Scope block #0 
    const char * uuid;
    struct switch_core_session_t * other_session;
    struct switch_channel_t * other_channel;
    const char * ip;
    const char * port;

  }

  { Scope block #0 
    struct switch_core_session_t * nsession;

  }

  { Scope block #0 
    struct switch_t38_options_t * t38_options;

  }

}
switch_core_media_receive_message (struct switch_core_session_t * session, struct switch_core_session_message_t * msg)
{
  struct switch_t38_options_t * t38_options;
  struct switch_core_session_t * nsession;
  const char * port;
  const char * ip;
  struct switch_channel_t * other_channel;
  struct switch_core_session_t * other_session;
  const char * uuid;
  int ok;
  const char * val;
  int set;
  int both;
  switch_rtp_flag_t flags[39];
  const char * direction;
  struct switch_rtp_t * rtp;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  const char * s;
  char * q;
  char * p;
  int max_drift;
  int maxqlen;
  int qlen;
  int maxlen;
  int len;
  static const char __func__[34] = "switch_core_media_receive_message";
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_receive_message";
  switch_status_t status;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  switch_channel_state_t D.41130;
  int D.41128;
  uint32_t D.41119;
  uint32_t D.41113;
  uint8_t D.41108;
  struct switch_core_session_t * nsession.13;
  switch_status_t D.41104;
  char * D.41101;
  struct payload_map_t * D.41100;
  char * iftmp.12;
  char * D.41092;
  struct payload_map_t * D.41091;
  char * iftmp.11;
  const char D.41086;
  switch_channel_state_t D.41083;
  int D.41081;
  struct switch_mutex_t * D.41076;
  char * D.41071;
  struct switch_core_media_params_t * D.41070;
  short unsigned int D.41069;
  int D.41068;
  _Bool D.41065;
  _Bool D.41064;
  _Bool D.41063;
  const char * D.41058;
  int D.41055;
  const char * D.41054;
  uint32_t D.41051;
  uint8_t D.41048;
  uint32_t D.41044;
  uint32_t D.41041;
  uint32_t D.41038;
  uint32_t D.41035;
  char * D.41034;
  uint32_t D.41031;
  char * D.41030;
  uint32_t D.41027;
  unsigned int D.41026;
  unsigned int D.41023;
  uint8_t D.41020;
  switch_core_media_flag_t D.41016;
  uint32_t D.41011;
  uint32_t D.41003;
  uint32_t D.41000;
  char * D.40996;
  uint32_t D.40993;
  uint32_t D.40990;
  unsigned int D.40989;
  smh_flag_t D.40988;
  char * D.40987;
  uint32_t D.40984;
  uint32_t D.40981;
  int D.40980;
  uint8_t D.40974;
  uint32_t D.40971;
  int D.40964;
  switch_rtp_flag_t D.40961;
  switch_rtp_flag_t D.40960;
  int D.40959;
  switch_rtp_flag_t D.40955;
  switch_rtp_flag_t D.40954;
  int D.40953;
  int D.40949;
  int D.40946;
  const char * D.40945;
  int D.40942;
  uint8_t D.40939;
  const char D.40936;
  int D.40929;
  const char * D.40928;
  switch_status_t D.40925;
  uint32_t max_drift.10;
  uint32_t D.40923;
  uint32_t D.40922;
  uint32_t maxqlen.9;
  uint32_t qlen.8;
  long int D.40913;
  int D.40904;
  int D.40903;
  int D.40897;
  const unsigned char D.40896;
  char * D.40895;
  int D.40894;
  const unsigned char D.40893;
  const unsigned char * D.40892;
  _Bool D.40889;
  _Bool D.40888;
  int D.40887;
  const unsigned char D.40886;
  char * D.40885;
  int D.40884;
  const unsigned char D.40883;
  const unsigned char * D.40882;
  _Bool D.40879;
  _Bool D.40878;
  int D.40877;
  const unsigned char D.40876;
  char * D.40875;
  int D.40874;
  const unsigned char D.40873;
  const unsigned char * D.40872;
  _Bool D.40869;
  _Bool D.40868;
  _Bool D.40867;
  int D.40866;
  const unsigned char D.40865;
  char[4] * D.40864;
  int D.40863;
  const unsigned char D.40862;
  int D.39872;
  int iftmp.7;
  int D.39873;
  int D.40854;
  int D.40851;
  int D.40848;
  const char * D.40845;
  uint8_t D.40842;
  int D.40838;
  uint8_t D.40835;
  struct switch_rtp_t * D.40834;
  struct switch_rtp_t * D.40831;
  uint32_t D.40828;
  switch_core_session_message_types_t D.40827;
  switch_channel_state_t D.40826;
  int D.40824;
  struct switch_channel_t * D.40823;
  switch_status_t D.40820;

<bb 2>:
  status_25 = 0;
  # DEBUG status => status_25
  if (session_26(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7477, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_27 = session_26(D)->media_handle;
  # DEBUG smh => smh_27
  if (smh_27 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40820_28 = 1;
  goto <bb 163>;

<bb 6>:
  D.40823_29 = session_26(D)->channel;
  D.40824_30 = switch_channel_check_signal (D.40823_29, 1);
  if (D.40824_30 != 0)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:
  D.40823_31 = session_26(D)->channel;
  D.40826_32 = switch_channel_get_state (D.40823_31);
  if (D.40826_32 > 9)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.40820_326 = 1;
  goto <bb 163>;

<bb 9>:
  a_engine_33 = &smh_27->engines;
  # DEBUG a_engine => a_engine_33
  v_engine_34 = &smh_27->engines[1];
  # DEBUG v_engine => v_engine_34
  D.40827_36 = msg_35(D)->message_id;
  switch (D.40827_36) <default: <L211>, case 4: <L93>, case 5: <L126>, case 8: <L147>, case 9: <L150>, case 17: <L10>, case 19: <L88>, case 20: <L144>, case 24: <L65>, case 25: <L13>, case 32: <L19>, case 46: <L7>>

<L7>:
  D.40823_37 = session_26(D)->channel;
  D.40828_38 = switch_channel_test_flag (D.40823_37, 82);
  if (D.40828_38 != 0)
    goto <bb 11>;
  else
    goto <bb 127> (<L211>);

<bb 11>:
  D.40823_39 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_39, 122, 1);
  goto <bb 127> (<L211>);

<L10>:
  D.40831_40 = v_engine_34->rtp_session;
  if (D.40831_40 != 0B)
    goto <bb 13>;
  else
    goto <bb 127> (<L211>);

<bb 13>:
  D.40831_41 = v_engine_34->rtp_session;
  switch_rtp_video_refresh (D.40831_41);
  goto <bb 127> (<L211>);

<L13>:
  D.40834_42 = a_engine_33->rtp_session;
  D.40835_43 = switch_rtp_ready (D.40834_42);
  if (D.40835_43 != 0)
    goto <bb 15>;
  else
    goto <bb 127> (<L211>);

<bb 15>:
  D.40838_44 = msg_35(D)->numeric_arg;
  if (D.40838_44 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.40834_45 = a_engine_33->rtp_session;
  switch_rtp_set_flag (D.40834_45, 19);
  goto <bb 127> (<L211>);

<bb 17>:
  D.40834_46 = a_engine_33->rtp_session;
  switch_rtp_clear_flag (D.40834_46, 19);
  goto <bb 127> (<L211>);

<L19>:
  D.40834_47 = a_engine_33->rtp_session;
  D.40842_48 = switch_rtp_ready (D.40834_47);
  if (D.40842_48 != 0)
    goto <bb 19>;
  else
    goto <bb 127> (<L211>);

<bb 19>:
  len_49 = 0;
  # DEBUG len => len_49
  maxlen_50 = 0;
  # DEBUG maxlen => maxlen_50
  qlen_51 = 0;
  # DEBUG qlen => qlen_51
  maxqlen_52 = 50;
  # DEBUG maxqlen => maxqlen_52
  max_drift_53 = 0;
  # DEBUG max_drift => max_drift_53
  D.40845_54 = msg_35(D)->string_arg;
  if (D.40845_54 != 0B)
    goto <bb 20>;
  else
    goto <bb 45>;

<bb 20>:
  D.40845_55 = msg_35(D)->string_arg;
  D.40848_56 = strcasecmp (D.40845_55, "pause");
  if (D.40848_56 == 0)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.40834_57 = a_engine_33->rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_57, 1);
  goto <bb 159> (end);

<bb 22>:
  D.40845_58 = msg_35(D)->string_arg;
  D.40851_59 = strcasecmp (D.40845_58, "resume");
  if (D.40851_59 == 0)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  D.40834_60 = a_engine_33->rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_60, 0);
  goto <bb 159> (end);

<bb 24>:
  D.40845_61 = msg_35(D)->string_arg;
  D.40854_62 = strncasecmp (D.40845_61, "debug:", 6);
  if (D.40854_62 == 0)
    goto <bb 25>;
  else
    goto <bb 36>;

<bb 25>:
  D.40845_63 = msg_35(D)->string_arg;
  s_64 = D.40845_63 + 6;
  # DEBUG s => s_64
  if (s_64 != 0B)
    goto <bb 26>;
  else
    goto <bb 35>;

<bb 26>:
  __s2_len_65 = 3;
  # DEBUG __s2_len => __s2_len_65
  if (__s2_len_65 <= 3)
    goto <bb 27>;
  else
    goto <bb 32>;

<bb 27>:
  __s1_66 = s_64;
  # DEBUG __s1 => __s1_66
  D.40862_67 = *__s1_66;
  D.40863_68 = (int) D.40862_67;
  D.40864_69 = "off";
  D.40865_70 = MEM[(const unsigned char *)D.40864_69];
  D.40866_71 = (int) D.40865_70;
  __result_72 = D.40863_68 - D.40866_71;
  # DEBUG __result => __result_72
  D.40867_73 = __s2_len_65 != 0;
  D.40868_74 = __result_72 == 0;
  D.40869_75 = D.40867_73 && D.40868_74;
  if (D.40869_75 != 0)
    goto <bb 28>;
  else
    goto <bb 31>;

<bb 28>:
  D.40872_76 = __s1_66 + 1;
  D.40873_77 = *D.40872_76;
  D.40874_78 = (int) D.40873_77;
  D.40875_79 = &"off"[1];
  D.40876_80 = MEM[(const unsigned char *)D.40875_79];
  D.40877_81 = (int) D.40876_80;
  __result_82 = D.40874_78 - D.40877_81;
  # DEBUG __result => __result_82
  D.40878_83 = __s2_len_65 > 1;
  D.40868_84 = __result_82 == 0;
  D.40879_85 = D.40878_83 && D.40868_84;
  if (D.40879_85 != 0)
    goto <bb 29>;
  else
    goto <bb 31>;

<bb 29>:
  D.40882_86 = __s1_66 + 2;
  D.40883_87 = *D.40882_86;
  D.40884_88 = (int) D.40883_87;
  D.40885_89 = &"off"[2];
  D.40886_90 = MEM[(const unsigned char *)D.40885_89];
  D.40887_91 = (int) D.40886_90;
  __result_92 = D.40884_88 - D.40887_91;
  # DEBUG __result => __result_92
  D.40888_93 = __s2_len_65 > 2;
  D.40868_94 = __result_92 == 0;
  D.40889_95 = D.40888_93 && D.40868_94;
  if (D.40889_95 != 0)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  D.40892_96 = __s1_66 + 3;
  D.40893_97 = *D.40892_96;
  D.40894_98 = (int) D.40893_97;
  D.40895_99 = &"off"[3];
  D.40896_100 = MEM[(const unsigned char *)D.40895_99];
  D.40897_101 = (int) D.40896_100;
  __result_102 = D.40894_98 - D.40897_101;
  # DEBUG __result => __result_102

<bb 31>:
  # __result_13 = PHI <__result_72(27), __result_82(28), __result_92(29), __result_102(30)>
  # DEBUG __result => __result_13
  D.39872_103 = __result_13;
  iftmp.7_104 = D.39872_103;
  goto <bb 33>;

<bb 32>:
  iftmp.7_105 = __builtin_strcmp (s_64, "off");

<bb 33>:
  # iftmp.7_22 = PHI <iftmp.7_104(31), iftmp.7_105(32)>
  D.39873_106 = iftmp.7_22;
  if (D.39873_106 == 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  s_107 = 0B;
  # DEBUG s => s_107

<bb 35>:
  # s_12 = PHI <s_64(25), s_64(33), s_107(34)>
  # DEBUG s => s_12
  D.40834_108 = a_engine_33->rtp_session;
  status_109 = switch_rtp_debug_jitter_buffer (D.40834_108, s_12);
  # DEBUG status => status_109
  goto <bb 159> (end);

<bb 36>:
  D.40845_110 = msg_35(D)->string_arg;
  len_111 = atoi (D.40845_110);
  # DEBUG len => len_111
  if (len_111 != 0)
    goto <bb 37>;
  else
    goto <bb 39>;

<bb 37>:
  D.40903_112 = a_engine_33->read_impl.microseconds_per_packet;
  D.40904_113 = D.40903_112 / 1000;
  qlen_114 = len_111 / D.40904_113;
  # DEBUG qlen => qlen_114
  if (qlen_114 <= 0)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  qlen_115 = 3;
  # DEBUG qlen => qlen_115

<bb 39>:
  # qlen_6 = PHI <qlen_51(36), qlen_114(37), qlen_115(38)>
  # DEBUG qlen => qlen_6
  if (qlen_6 != 0)
    goto <bb 40>;
  else
    goto <bb 43>;

<bb 40>:
  D.40845_116 = msg_35(D)->string_arg;
  p_117 = __builtin_strchr (D.40845_116, 58);
  # DEBUG p => p_117
  if (p_117 != 0B)
    goto <bb 41>;
  else
    goto <bb 43>;

<bb 41>:
  p_118 = p_117 + 1;
  # DEBUG p => p_118
  maxlen_119 = atol (p_118);
  # DEBUG maxlen => maxlen_119
  q_120 = __builtin_strchr (p_118, 58);
  # DEBUG q => q_120
  if (q_120 != 0B)
    goto <bb 42>;
  else
    goto <bb 43>;

<bb 42>:
  q_121 = q_120 + 1;
  # DEBUG q => q_121
  D.40913_122 = atol (q_121);
  max_drift_123 = ABS_EXPR <D.40913_122>;
  # DEBUG max_drift => max_drift_123

<bb 43>:
  # maxlen_5 = PHI <maxlen_50(39), maxlen_50(40), maxlen_119(41), maxlen_119(42)>
  # max_drift_10 = PHI <max_drift_53(39), max_drift_53(40), max_drift_53(41), max_drift_123(42)>
  # DEBUG max_drift => max_drift_10
  # DEBUG maxlen => maxlen_5
  if (maxlen_5 != 0)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  D.40903_124 = a_engine_33->read_impl.microseconds_per_packet;
  D.40904_125 = D.40903_124 / 1000;
  maxqlen_126 = maxlen_5 / D.40904_125;
  # DEBUG maxqlen => maxqlen_126

<bb 45>:
  # len_4 = PHI <len_49(19), len_111(43), len_111(44)>
  # qlen_7 = PHI <qlen_51(19), qlen_6(43), qlen_6(44)>
  # maxqlen_8 = PHI <maxqlen_52(19), maxqlen_52(43), maxqlen_126(44)>
  # max_drift_11 = PHI <max_drift_53(19), max_drift_10(43), max_drift_10(44)>
  # DEBUG max_drift => max_drift_11
  # DEBUG maxqlen => maxqlen_8
  # DEBUG qlen => qlen_7
  # DEBUG len => len_4
  if (qlen_7 != 0)
    goto <bb 46>;
  else
    goto <bb 52>;

<bb 46>:
  if (maxqlen_8 < qlen_7)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  maxqlen_127 = qlen_7 * 5;
  # DEBUG maxqlen => maxqlen_127

<bb 48>:
  # maxqlen_9 = PHI <maxqlen_8(46), maxqlen_127(47)>
  # DEBUG maxqlen => maxqlen_9
  D.40834_128 = a_engine_33->rtp_session;
  qlen.8_129 = (uint32_t) qlen_7;
  maxqlen.9_130 = (uint32_t) maxqlen_9;
  D.40922_131 = a_engine_33->read_impl.samples_per_packet;
  D.40923_132 = a_engine_33->read_impl.samples_per_second;
  max_drift.10_133 = (uint32_t) max_drift_11;
  D.40925_134 = switch_rtp_activate_jitter_buffer (D.40834_128, qlen.8_129, maxqlen.9_130, D.40922_131, D.40923_132, max_drift.10_133);
  if (D.40925_134 == 0)
    goto <bb 49>;
  else
    goto <bb 51>;

<bb 49>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7577, session_26(D), 7, "Setting Jitterbuffer to %dms (%d frames) (%d max frames) (%d max drift)\n", len_4, qlen_7, maxqlen_9, max_drift_11);
  D.40823_135 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_135, 57, 1);
  D.40823_136 = session_26(D)->channel;
  D.40928_137 = switch_channel_get_variable_dup (D.40823_136, "rtp_jitter_buffer_plc", 1, -1);
  D.40929_138 = switch_false (D.40928_137);
  if (D.40929_138 == 0)
    goto <bb 50>;
  else
    goto <bb 127> (<L211>);

<bb 50>:
  D.40823_139 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_139, 58, 1);
  goto <bb 127> (<L211>);

<bb 51>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7585, session_26(D), 4, "Error Setting Jitterbuffer to %dms (%d frames)\n", len_4, qlen_7);
  goto <bb 127> (<L211>);

<bb 52>:
  D.40834_140 = a_engine_33->rtp_session;
  switch_rtp_deactivate_jitter_buffer (D.40834_140);
  goto <bb 127> (<L211>);

<L65>:
  rtp_141 = a_engine_33->rtp_session;
  # DEBUG rtp => rtp_141
  direction_142 = msg_35(D)->string_array_arg[0];
  # DEBUG direction => direction_142
  if (direction_142 != 0B)
    goto <bb 54>;
  else
    goto <bb 56>;

<bb 54>:
  D.40936_143 = *direction_142;
  if (D.40936_143 == 118)
    goto <bb 55>;
  else
    goto <bb 56>;

<bb 55>:
  direction_144 = direction_142 + 1;
  # DEBUG direction => direction_144
  rtp_145 = v_engine_34->rtp_session;
  # DEBUG rtp => rtp_145

<bb 56>:
  # rtp_14 = PHI <rtp_141(53), rtp_141(54), rtp_145(55)>
  # direction_15 = PHI <direction_142(53), direction_142(54), direction_144(55)>
  # DEBUG direction => direction_15
  # DEBUG rtp => rtp_14
  D.40939_146 = switch_rtp_ready (rtp_14);
  if (D.40939_146 != 0)
    goto <bb 57>;
  else
    goto <bb 159> (end);

<bb 57>:
  D.40942_147 = _zstr (direction_15);
  if (D.40942_147 == 0)
    goto <bb 58>;
  else
    goto <bb 159> (end);

<bb 58>:
  D.40945_148 = msg_35(D)->string_array_arg[1];
  D.40946_149 = _zstr (D.40945_148);
  if (D.40946_149 == 0)
    goto <bb 59>;
  else
    goto <bb 159> (end);

<bb 59>:
  flags = {};
  D.40949_150 = strcasecmp (direction_15, "both");
  both_151 = D.40949_150 == 0;
  # DEBUG both => both_151
  set_152 = 0;
  # DEBUG set => set_152
  if (both_151 != 0)
    goto <bb 61>;
  else
    goto <bb 60>;

<bb 60>:
  D.40953_153 = strcasecmp (direction_15, "read");
  if (D.40953_153 == 0)
    goto <bb 61>;
  else
    goto <bb 62>;

<bb 61>:
  D.40954_154 = flags[28];
  D.40955_155 = D.40954_154 + 1;
  flags[28] = D.40955_155;
  set_156 = set_152 + 1;
  # DEBUG set => set_156

<bb 62>:
  # set_16 = PHI <set_152(60), set_156(61)>
  # DEBUG set => set_16
  if (both_151 != 0)
    goto <bb 64>;
  else
    goto <bb 63>;

<bb 63>:
  D.40959_157 = strcasecmp (direction_15, "write");
  if (D.40959_157 == 0)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  D.40960_158 = flags[29];
  D.40961_159 = D.40960_158 + 1;
  flags[29] = D.40961_159;
  set_160 = set_16 + 1;
  # DEBUG set => set_160

<bb 65>:
  # set_17 = PHI <set_16(63), set_160(64)>
  # DEBUG set => set_17
  if (set_17 != 0)
    goto <bb 66>;
  else
    goto <bb 69>;

<bb 66>:
  D.40945_161 = msg_35(D)->string_array_arg[1];
  D.40964_162 = switch_true (D.40945_161);
  if (D.40964_162 != 0)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  switch_rtp_set_flags (rtp_14, &flags);
  goto <bb 159> (end);

<bb 68>:
  switch_rtp_clear_flags (rtp_14, &flags);
  goto <bb 159> (end);

<bb 69>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7627, session_26(D), 3, "Invalid Options\n");
  goto <bb 159> (end);

<L88>:
  D.40834_163 = a_engine_33->rtp_session;
  if (D.40834_163 != 0B)
    goto <bb 71>;
  else
    goto <bb 159> (end);

<bb 71>:
  D.40834_164 = a_engine_33->rtp_session;
  D.40971_165 = switch_rtp_test_flag (D.40834_164, 15);
  if (D.40971_165 != 0)
    goto <bb 72>;
  else
    goto <bb 159> (end);

<bb 72>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7634, session_26(D), 4, "Pass 2833 mode may not work on a transcoded call.\n");
  goto <bb 159> (end);

<L93>:
  D.40834_166 = a_engine_33->rtp_session;
  D.40974_167 = switch_rtp_ready (D.40834_166);
  if (D.40974_167 != 0)
    goto <bb 74>;
  else
    goto <bb 159> (end);

<bb 74>:
  ok_168 = 0;
  # DEBUG ok => ok_168
  D.40823_169 = session_26(D)->channel;
  val_170 = switch_channel_get_variable_dup (D.40823_169, "rtp_jitter_buffer_during_bridge", 1, -1);
  # DEBUG val => val_170
  if (val_170 == 0B)
    goto <bb 76>;
  else
    goto <bb 75>;

<bb 75>:
  D.40980_171 = switch_false (val_170);
  if (D.40980_171 != 0)
    goto <bb 76>;
  else
    goto <bb 79>;

<bb 76>:
  D.40823_172 = session_26(D)->channel;
  D.40981_173 = switch_channel_test_flag (D.40823_172, 57);
  if (D.40981_173 != 0)
    goto <bb 77>;
  else
    goto <bb 79>;

<bb 77>:
  D.40823_174 = session_26(D)->channel;
  D.40984_175 = switch_channel_test_cap_partner (D.40823_174, 5);
  if (D.40984_175 != 0)
    goto <bb 78>;
  else
    goto <bb 79>;

<bb 78>:
  D.40823_176 = session_26(D)->channel;
  D.40987_177 = switch_channel_get_name (D.40823_176);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7647, session_26(D), 7, "%s PAUSE Jitterbuffer\n", D.40987_177);
  D.40834_178 = a_engine_33->rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_178, 1);
  D.40988_179 = smh_27->flags;
  D.40989_180 = D.40988_179 | 4;
  smh_27->flags = D.40989_180;

<bb 79>:
  D.40823_181 = session_26(D)->channel;
  D.40990_182 = switch_channel_test_flag (D.40823_181, 100);
  if (D.40990_182 != 0)
    goto <bb 80>;
  else
    goto <bb 82>;

<bb 80>:
  D.40823_183 = session_26(D)->channel;
  D.40993_184 = switch_channel_test_flag_partner (D.40823_183, 36);
  if (D.40993_184 != 0)
    goto <bb 81>;
  else
    goto <bb 82>;

<bb 81>:
  D.40834_185 = a_engine_33->rtp_session;
  switch_rtp_set_flag (D.40834_185, 15);
  D.40823_186 = session_26(D)->channel;
  D.40996_187 = switch_channel_get_name (D.40823_186);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7656, session_26(D), 7, "%s activate passthru 2833 mode.\n", D.40996_187);

<bb 82>:
  D.40823_188 = session_26(D)->channel;
  val_189 = switch_channel_get_variable_dup (D.40823_188, "rtp_notimer_during_bridge", 1, -1);
  # DEBUG val => val_189
  if (val_189 != 0B)
    goto <bb 83>;
  else
    goto <bb 84>;

<bb 83>:
  ok_190 = switch_true (val_189);
  # DEBUG ok => ok_190
  goto <bb 85>;

<bb 84>:
  D.40823_191 = session_26(D)->channel;
  D.41000_192 = switch_channel_test_flag (D.40823_191, 105);
  ok_193 = (int) D.41000_192;
  # DEBUG ok => ok_193

<bb 85>:
  # ok_18 = PHI <ok_190(83), ok_193(84)>
  # DEBUG ok => ok_18
  if (ok_18 != 0)
    goto <bb 86>;
  else
    goto <bb 88>;

<bb 86>:
  D.40834_194 = a_engine_33->rtp_session;
  D.41003_195 = switch_rtp_test_flag (D.40834_194, 3);
  if (D.41003_195 == 0)
    goto <bb 87>;
  else
    goto <bb 88>;

<bb 87>:
  ok_196 = 0;
  # DEBUG ok => ok_196

<bb 88>:
  # ok_19 = PHI <ok_18(85), ok_18(86), ok_196(87)>
  # DEBUG ok => ok_19
  if (ok_19 != 0)
    goto <bb 89>;
  else
    goto <bb 90>;

<bb 89>:
  D.40834_197 = a_engine_33->rtp_session;
  switch_rtp_clear_flag (D.40834_197, 3);
  D.40823_198 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_198, 99, 1);

<bb 90>:
  if (ok_19 != 0)
    goto <bb 91>;
  else
    goto <bb 93>;

<bb 91>:
  D.40823_199 = session_26(D)->channel;
  D.41011_200 = switch_channel_test_flag (D.40823_199, 99);
  if (D.41011_200 != 0)
    goto <bb 92>;
  else
    goto <bb 93>;

<bb 92>:
  ok_201 = 0;
  # DEBUG ok => ok_201
  goto <bb 96>;

<bb 93>:
  D.40823_202 = session_26(D)->channel;
  val_203 = switch_channel_get_variable_dup (D.40823_202, "rtp_autoflush_during_bridge", 1, -1);
  # DEBUG val => val_203
  if (val_203 != 0B)
    goto <bb 94>;
  else
    goto <bb 95>;

<bb 94>:
  ok_204 = switch_true (val_203);
  # DEBUG ok => ok_204
  goto <bb 96>;

<bb 95>:
  D.41016_205 = smh_27->media_flags[14];
  ok_206 = (int) D.41016_205;
  # DEBUG ok => ok_206

<bb 96>:
  # ok_20 = PHI <ok_201(92), ok_204(94), ok_206(95)>
  # DEBUG ok => ok_20
  if (ok_20 != 0)
    goto <bb 97>;
  else
    goto <bb 98>;

<bb 97>:
  D.40834_207 = a_engine_33->rtp_session;
  rtp_flush_read_buffer (D.40834_207, 1);
  D.40823_208 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_208, 104, 1);
  goto <bb 159> (end);

<bb 98>:
  D.40834_209 = a_engine_33->rtp_session;
  rtp_flush_read_buffer (D.40834_209, 0);
  goto <bb 159> (end);

<L126>:
  D.40834_210 = a_engine_33->rtp_session;
  D.41020_211 = switch_rtp_ready (D.40834_210);
  if (D.41020_211 != 0)
    goto <bb 100>;
  else
    goto <bb 159> (end);

<bb 100>:
  D.40988_212 = smh_27->flags;
  D.41023_213 = D.40988_212 & 4;
  if (D.41023_213 != 0)
    goto <bb 101>;
  else
    goto <bb 103>;

<bb 101>:
  D.40988_214 = smh_27->flags;
  D.41026_215 = D.40988_214 & 4294967291;
  smh_27->flags = D.41026_215;
  D.40823_216 = session_26(D)->channel;
  D.41027_217 = switch_channel_test_flag (D.40823_216, 57);
  if (D.41027_217 != 0)
    goto <bb 102>;
  else
    goto <bb 103>;

<bb 102>:
  D.40823_218 = session_26(D)->channel;
  D.41030_219 = switch_channel_get_name (D.40823_218);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7704, session_26(D), 7, "%s RESUME Jitterbuffer\n", D.41030_219);
  D.40834_220 = a_engine_33->rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_220, 0);

<bb 103>:
  D.40834_221 = a_engine_33->rtp_session;
  D.41031_222 = switch_rtp_test_flag (D.40834_221, 15);
  if (D.41031_222 != 0)
    goto <bb 104>;
  else
    goto <bb 105>;

<bb 104>:
  D.40823_223 = session_26(D)->channel;
  D.41034_224 = switch_channel_get_name (D.40823_223);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7712, session_26(D), 7, "%s deactivate passthru 2833 mode.\n", D.41034_224);
  D.40834_225 = a_engine_33->rtp_session;
  switch_rtp_clear_flag (D.40834_225, 15);

<bb 105>:
  D.40823_226 = session_26(D)->channel;
  D.41035_227 = switch_channel_test_flag (D.40823_226, 99);
  if (D.41035_227 != 0)
    goto <bb 106>;
  else
    goto <bb 110>;

<bb 106>:
  D.40834_228 = a_engine_33->rtp_session;
  D.41038_229 = switch_rtp_test_flag (D.40834_228, 12);
  if (D.41038_229 == 0)
    goto <bb 107>;
  else
    goto <bb 109>;

<bb 107>:
  D.40834_230 = a_engine_33->rtp_session;
  D.41041_231 = switch_rtp_test_flag (D.40834_230, 19);
  if (D.41041_231 == 0)
    goto <bb 108>;
  else
    goto <bb 109>;

<bb 108>:
  D.40834_232 = a_engine_33->rtp_session;
  switch_rtp_set_flag (D.40834_232, 3);

<bb 109>:
  D.40823_233 = session_26(D)->channel;
  switch_channel_clear_flag (D.40823_233, 99);

<bb 110>:
  D.40823_234 = session_26(D)->channel;
  D.41044_235 = switch_channel_test_flag (D.40823_234, 104);
  if (D.41044_235 != 0)
    goto <bb 111>;
  else
    goto <bb 112>;

<bb 111>:
  D.40834_236 = a_engine_33->rtp_session;
  rtp_flush_read_buffer (D.40834_236, 2);
  D.40823_237 = session_26(D)->channel;
  switch_channel_clear_flag (D.40823_237, 104);
  goto <bb 159> (end);

<bb 112>:
  D.40834_238 = a_engine_33->rtp_session;
  rtp_flush_read_buffer (D.40834_238, 0);
  goto <bb 159> (end);

<L144>:
  D.40834_239 = a_engine_33->rtp_session;
  D.41048_240 = switch_rtp_ready (D.40834_239);
  if (D.41048_240 != 0)
    goto <bb 114>;
  else
    goto <bb 159> (end);

<bb 114>:
  D.40834_241 = a_engine_33->rtp_session;
  rtp_flush_read_buffer (D.40834_241, 0);
  goto <bb 159> (end);

<L147>:
  D.41051_242 = session_26(D)->track_duration;
  if (D.41051_242 != 0)
    goto <bb 116>;
  else
    goto <bb 127> (<L211>);

<bb 116>:
  D.41051_243 = session_26(D)->track_duration;
  switch_core_session_enable_heartbeat (session_26(D), D.41051_243);
  goto <bb 127> (<L211>);

<L150>:
  ip_244 = 0B;
  # DEBUG ip => ip_244
  port_245 = 0B;
  # DEBUG port => port_245
  D.40823_246 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_246, 15, 1);
  a_engine_33->codec_negotiated = 0;
  v_engine_34->codec_negotiated = 0;
  switch_core_media_set_local_sdp (session_26(D), 0B, 0);
  D.40823_247 = session_26(D)->channel;
  D.41054_248 = switch_channel_get_variable_dup (D.40823_247, "bypass_keep_codec", 1, -1);
  D.41055_249 = switch_true (D.41054_248);
  if (D.41055_249 != 0)
    goto <bb 118>;
  else
    goto <bb 119>;

<bb 118>:
  D.40823_250 = session_26(D)->channel;
  D.40823_251 = session_26(D)->channel;
  D.41058_252 = switch_channel_get_variable_dup (D.40823_251, "ep_codec_string", 1, -1);
  switch_channel_set_variable_var_check (D.40823_251, "absolute_codec_string", D.41058_252, 1);

<bb 119>:
  D.40823_253 = session_26(D)->channel;
  uuid_254 = switch_channel_get_partner_uuid (D.40823_253);
  # DEBUG uuid => uuid_254
  if (uuid_254 != 0B)
    goto <bb 120>;
  else
    goto <bb 123>;

<bb 120>:
  other_session_255 = switch_core_session_perform_locate (uuid_254, "src/switch_core_media.c", &__func__, 7768);
  # DEBUG other_session => other_session_255
  if (other_session_255 != 0B)
    goto <bb 121>;
  else
    goto <bb 123>;

<bb 121>:
  other_channel_256 = switch_core_session_get_channel (other_session_255);
  # DEBUG other_channel => other_channel_256
  ip_257 = switch_channel_get_variable_dup (other_channel_256, "remote_media_ip", 1, -1);
  # DEBUG ip => ip_257
  port_258 = switch_channel_get_variable_dup (other_channel_256, "remote_media_port", 1, -1);
  # DEBUG port => port_258
  switch_core_session_rwunlock (other_session_255);
  D.41063_259 = ip_257 != 0B;
  D.41064_260 = port_258 != 0B;
  D.41065_261 = D.41063_259 && D.41064_260;
  if (D.41065_261 != 0)
    goto <bb 122>;
  else
    goto <bb 123>;

<bb 122>:
  switch_core_media_prepare_codecs (session_26(D), 1);
  clear_pmaps (a_engine_33);
  clear_pmaps (v_engine_34);
  D.41068_262 = atoi (port_258);
  D.41069_263 = (short unsigned int) D.41068_262;
  switch_core_media_gen_local_sdp (session_26(D), 0, ip_257, D.41069_263, 0B, 1);

<bb 123>:
  D.41070_264 = smh_27->mparams;
  D.41071_265 = D.41070_264->local_sdp_str;
  if (D.41071_265 == 0B)
    goto <bb 124>;
  else
    goto <bb 125>;

<bb 124>:
  switch_core_media_absorb_sdp (session_26(D));

<bb 125>:
  D.41051_266 = session_26(D)->track_duration;
  if (D.41051_266 != 0)
    goto <bb 126>;
  else
    goto <bb 127> (<L211>);

<bb 126>:
  D.41051_267 = session_26(D)->track_duration;
  switch_core_session_enable_heartbeat (session_26(D), D.41051_267);

<L211>:
  D.41076_268 = smh_27->mutex;
  if (D.41076_268 != 0B)
    goto <bb 128>;
  else
    goto <bb 129>;

<bb 128>:
  D.41076_269 = smh_27->mutex;
  switch_mutex_lock (D.41076_269);

<bb 129>:
  D.40823_270 = session_26(D)->channel;
  D.41081_271 = switch_channel_check_signal (D.40823_270, 1);
  if (D.41081_271 != 0)
    goto <bb 131>;
  else
    goto <bb 130>;

<bb 130>:
  D.40823_272 = session_26(D)->channel;
  D.41083_273 = switch_channel_get_state (D.40823_272);
  if (D.41083_273 > 9)
    goto <bb 131>;
  else
    goto <bb 132>;

<bb 131>:
  status_317 = 1;
  # DEBUG status => status_317
  goto <bb 157> (end_lock);

<bb 132>:
  D.40827_274 = msg_35(D)->message_id;
  switch (D.40827_274) <default: end_lock, case 30: <L198>, case 37: <L186>, case 40: <L170>>

<L170>:
  D.40845_275 = msg_35(D)->string_arg;
  if (D.40845_275 != 0B)
    goto <bb 134>;
  else
    goto <bb 144>;

<bb 134>:
  D.40823_276 = session_26(D)->channel;
  switch_channel_set_variable_var_check (D.40823_276, "absolute_codec_string", 0B, 1);
  D.40845_277 = msg_35(D)->string_arg;
  D.41086_278 = *D.40845_277;
  if (D.41086_278 == 61)
    goto <bb 135>;
  else
    goto <bb 136>;

<bb 135>:
  D.40823_279 = session_26(D)->channel;
  D.40845_280 = msg_35(D)->string_arg;
  switch_channel_set_variable_var_check (D.40823_279, "codec_string", D.40845_280, 1);
  goto <bb 143>;

<bb 136>:
  D.40823_281 = session_26(D)->channel;
  D.41091_282 = v_engine_34->cur_payload_map;
  D.41092_283 = D.41091_282->rm_encoding;
  if (D.41092_283 != 0B)
    goto <bb 137>;
  else
    goto <bb 138>;

<bb 137>:
  D.41091_284 = v_engine_34->cur_payload_map;
  iftmp.11_285 = D.41091_284->rm_encoding;
  goto <bb 139>;

<bb 138>:
  iftmp.11_286 = "";

<bb 139>:
  # iftmp.11_23 = PHI <iftmp.11_285(137), iftmp.11_286(138)>
  D.41091_287 = v_engine_34->cur_payload_map;
  D.41092_288 = D.41091_287->rm_encoding;
  if (D.41092_288 != 0B)
    goto <bb 140>;
  else
    goto <bb 141>;

<bb 140>:
  iftmp.12_289 = ",";
  goto <bb 142>;

<bb 141>:
  iftmp.12_290 = "";

<bb 142>:
  # iftmp.12_24 = PHI <iftmp.12_289(140), iftmp.12_290(141)>
  D.41100_291 = a_engine_33->cur_payload_map;
  D.41101_292 = D.41100_291->rm_encoding;
  D.40845_293 = msg_35(D)->string_arg;
  switch_channel_set_variable_printf (D.40823_281, "codec_string", "=%s%s%s,%s", iftmp.11_23, iftmp.12_24, D.41101_292, D.40845_293);

<bb 143>:
  a_engine_33->codec_negotiated = 0;
  v_engine_34->codec_negotiated = 0;
  D.40823_294 = session_26(D)->channel;
  switch_channel_clear_flag (D.40823_294, 98);
  switch_core_media_prepare_codecs (session_26(D), 1);
  switch_core_media_check_video_codecs (session_26(D));
  switch_core_media_gen_local_sdp (session_26(D), 0, 0B, 0, 0B, 1);

<bb 144>:
  switch_media_handle_set_media_flag (smh_27, 7);
  D.40838_295 = msg_35(D)->numeric_arg;
  if (D.40838_295 != 0)
    goto <bb 145>;
  else
    goto <bb 157> (end_lock);

<bb 145>:
  D.41104_296 = switch_core_session_perform_get_partner (session_26(D), &nsession, "src/switch_core_media.c", &__func__, 7835);
  if (D.41104_296 == 0)
    goto <bb 146>;
  else
    goto <bb 157> (end_lock);

<bb 146>:
  msg_35(D)->numeric_arg = 0;
  nsession.13_297 = nsession;
  switch_core_session_perform_receive_message (nsession.13_297, msg_35(D), "src/switch_core_media.c", &__func__, 7837);
  nsession.13_298 = nsession;
  switch_core_session_rwunlock (nsession.13_298);
  goto <bb 157> (end_lock);

<L186>:
  D.40834_299 = a_engine_33->rtp_session;
  D.41108_300 = switch_rtp_ready (D.40834_299);
  if (D.41108_300 != 0)
    goto <bb 148>;
  else
    goto <bb 157> (end_lock);

<bb 148>:
  D.40838_301 = msg_35(D)->numeric_arg;
  if (D.40838_301 != 0)
    goto <bb 149>;
  else
    goto <bb 152>;

<bb 149>:
  D.40823_302 = session_26(D)->channel;
  D.41113_303 = switch_channel_test_flag (D.40823_302, 57);
  if (D.41113_303 != 0)
    goto <bb 150>;
  else
    goto <bb 151>;

<bb 150>:
  D.40834_304 = a_engine_33->rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_304, 1);
  D.40988_305 = smh_27->flags;
  D.40989_306 = D.40988_305 | 4;
  smh_27->flags = D.40989_306;

<bb 151>:
  D.40834_307 = a_engine_33->rtp_session;
  rtp_flush_read_buffer (D.40834_307, 2);
  goto <bb 157> (end_lock);

<bb 152>:
  D.40988_308 = smh_27->flags;
  D.41023_309 = D.40988_308 & 4;
  if (D.41023_309 != 0)
    goto <bb 153>;
  else
    goto <bb 157> (end_lock);

<bb 153>:
  D.40988_310 = smh_27->flags;
  D.41026_311 = D.40988_310 & 4294967291;
  smh_27->flags = D.41026_311;
  D.40823_312 = session_26(D)->channel;
  D.41119_313 = switch_channel_test_flag (D.40823_312, 57);
  if (D.41119_313 != 0)
    goto <bb 154>;
  else
    goto <bb 157> (end_lock);

<bb 154>:
  D.40834_314 = a_engine_33->rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_314, 0);
  goto <bb 157> (end_lock);

<L198>:
  D.40823_315 = session_26(D)->channel;
  t38_options_316 = switch_channel_get_private (D.40823_315, "t38_options");
  # DEBUG t38_options => t38_options_316
  if (t38_options_316 != 0B)
    goto <bb 156>;
  else
    goto <bb 157> (end_lock);

<bb 156>:
  switch_core_media_start_udptl (session_26(D), t38_options_316);

  # status_1 = PHI <status_317(131), status_25(145), status_25(151), status_25(155), status_25(144), status_25(146), status_25(147), status_25(154), status_25(153), status_25(152), status_25(132), status_25(156)>
end_lock:
  # DEBUG status => status_1
  D.41076_318 = smh_27->mutex;
  if (D.41076_318 != 0B)
    goto <bb 158>;
  else
    goto <bb 159> (end);

<bb 158>:
  D.41076_319 = smh_27->mutex;
  switch_mutex_unlock (D.41076_319);

  # status_2 = PHI <status_25(21), status_25(23), status_109(35), status_25(57), status_25(71), status_25(97), status_25(111), status_25(114), status_1(157), status_1(158), status_25(56), status_25(67), status_25(69), status_25(68), status_25(58), status_25(70), status_25(72), status_25(73), status_25(98), status_25(99), status_25(112), status_25(113)>
end:
  # DEBUG status => status_2
  D.40823_320 = session_26(D)->channel;
  D.41128_321 = switch_channel_check_signal (D.40823_320, 1);
  if (D.41128_321 != 0)
    goto <bb 161>;
  else
    goto <bb 160>;

<bb 160>:
  D.40823_322 = session_26(D)->channel;
  D.41130_323 = switch_channel_get_state (D.40823_322);
  if (D.41130_323 > 9)
    goto <bb 161>;
  else
    goto <bb 162>;

<bb 161>:
  status_324 = 1;
  # DEBUG status => status_324

<bb 162>:
  # status_3 = PHI <status_2(160), status_324(161)>
  # DEBUG status => status_3
  D.40820_325 = status_3;

<bb 163>:
  # D.40820_21 = PHI <D.40820_28(5), D.40820_326(8), D.40820_325(162)>
  return D.40820_21;

}



;; Function switch_core_media_break (switch_core_media_break)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40811 = smh->engines[type].rtp_session;

Renaming statement D.40812 = switch_rtp_ready (D.40811);

Renaming statement if (D.40812 != 0)



Renaming block #6

Renaming statement D.40811 = smh->engines[type].rtp_session;

Renaming statement switch_rtp_break (D.40811);



Renaming block #7



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 7902, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.40811_4 = smh_2->engines[type_3(D)].rtp_session;

Updating SSA information for statement D.40812_5 = switch_rtp_ready (D.40811_4);



Registering new PHI nodes in block #6

Updating SSA information for statement D.40811_6 = smh_2->engines[type_3(D)].rtp_session;

Updating SSA information for statement switch_rtp_break (D.40811_6);



Registering new PHI nodes in block #7



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)

Affected blocks: 0 2 3 4 5 6 7 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[24] = "switch_core_media_break";

}
switch_core_media_break (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[24] = "switch_core_media_break";
  struct switch_media_handle_t * smh;
  uint8_t D.40812;
  struct switch_rtp_t * D.40811;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7902, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40811_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40812_5 = switch_rtp_ready (D.40811_4);
  if (D.40812_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40811_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_break (D.40811_6);

<bb 7>:
  return;

}



;; Function switch_core_media_kill_socket (switch_core_media_kill_socket)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40802 = smh->engines[type].rtp_session;

Renaming statement D.40803 = switch_rtp_ready (D.40802);

Renaming statement if (D.40803 != 0)



Renaming block #6

Renaming statement D.40802 = smh->engines[type].rtp_session;

Renaming statement switch_rtp_kill_socket (D.40802);



Renaming block #7



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 7918, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.40802_4 = smh_2->engines[type_3(D)].rtp_session;

Updating SSA information for statement D.40803_5 = switch_rtp_ready (D.40802_4);



Registering new PHI nodes in block #6

Updating SSA information for statement D.40802_6 = smh_2->engines[type_3(D)].rtp_session;

Updating SSA information for statement switch_rtp_kill_socket (D.40802_6);



Registering new PHI nodes in block #7



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)

Affected blocks: 0 2 3 4 5 6 7 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_kill_socket";

}
switch_core_media_kill_socket (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_kill_socket";
  struct switch_media_handle_t * smh;
  uint8_t D.40803;
  struct switch_rtp_t * D.40802;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7918, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40802_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40803_5 = switch_rtp_ready (D.40802_4);
  if (D.40803_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40802_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_kill_socket (D.40802_6);

<bb 7>:
  return;

}



;; Function switch_core_media_queue_rfc2833 (switch_core_media_queue_rfc2833)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40792 = 1;



Renaming block #6

Renaming statement D.40793 = smh->engines[type].rtp_session;

Renaming statement D.40794 = switch_rtp_ready (D.40793);

Renaming statement if (D.40794 != 0)



Renaming block #7

Renaming statement D.40793 = smh->engines[type].rtp_session;

Renaming statement D.40792 = switch_rtp_queue_rfc2833 (D.40793, dtmf);



Renaming block #8

Renaming statement D.40792 = 1;



Renaming block #9

Renaming statement return D.40792;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 7934, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.40793_6 = smh_3->engines[type_5(D)].rtp_session;

Updating SSA information for statement D.40794_7 = switch_rtp_ready (D.40793_6);



Registering new PHI nodes in block #7

Updating SSA information for statement D.40793_8 = smh_3->engines[type_5(D)].rtp_session;

Updating SSA information for statement D.40792_10 = switch_rtp_queue_rfc2833 (D.40793_8, dtmf_9(D));



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_queue_rfc2833";

}
switch_core_media_queue_rfc2833 (struct switch_core_session_t * session, switch_media_type_t type, const struct switch_dtmf_t * dtmf)
{
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_queue_rfc2833";
  struct switch_media_handle_t * smh;
  uint8_t D.40794;
  struct switch_rtp_t * D.40793;
  switch_status_t D.40792;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7934, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40792_4 = 1;
  goto <bb 9>;

<bb 6>:
  D.40793_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40794_7 = switch_rtp_ready (D.40793_6);
  if (D.40794_7 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40793_8 = smh_3->engines[type_5(D)].rtp_session;
  D.40792_10 = switch_rtp_queue_rfc2833 (D.40793_8, dtmf_9(D));
  goto <bb 9>;

<bb 8>:
  D.40792_11 = 1;

<bb 9>:
  # D.40792_1 = PHI <D.40792_4(5), D.40792_10(7), D.40792_11(8)>
  return D.40792_1;

}



;; Function switch_core_media_queue_rfc2833_in (switch_core_media_queue_rfc2833_in)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40782 = 1;



Renaming block #6

Renaming statement D.40783 = smh->engines[type].rtp_session;

Renaming statement D.40784 = switch_rtp_ready (D.40783);

Renaming statement if (D.40784 != 0)



Renaming block #7

Renaming statement D.40783 = smh->engines[type].rtp_session;

Renaming statement D.40782 = switch_rtp_queue_rfc2833_in (D.40783, dtmf);



Renaming block #8

Renaming statement D.40782 = 1;



Renaming block #9

Renaming statement return D.40782;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 7952, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.40783_6 = smh_3->engines[type_5(D)].rtp_session;

Updating SSA information for statement D.40784_7 = switch_rtp_ready (D.40783_6);



Registering new PHI nodes in block #7

Updating SSA information for statement D.40783_8 = smh_3->engines[type_5(D)].rtp_session;

Updating SSA information for statement D.40782_10 = switch_rtp_queue_rfc2833_in (D.40783_8, dtmf_9(D));



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_queue_rfc2833_in";

}
switch_core_media_queue_rfc2833_in (struct switch_core_session_t * session, switch_media_type_t type, const struct switch_dtmf_t * dtmf)
{
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_queue_rfc2833_in";
  struct switch_media_handle_t * smh;
  uint8_t D.40784;
  struct switch_rtp_t * D.40783;
  switch_status_t D.40782;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7952, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40782_4 = 1;
  goto <bb 9>;

<bb 6>:
  D.40783_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40784_7 = switch_rtp_ready (D.40783_6);
  if (D.40784_7 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40783_8 = smh_3->engines[type_5(D)].rtp_session;
  D.40782_10 = switch_rtp_queue_rfc2833_in (D.40783_8, dtmf_9(D));
  goto <bb 9>;

<bb 8>:
  D.40782_11 = 1;

<bb 9>:
  # D.40782_1 = PHI <D.40782_4(5), D.40782_10(7), D.40782_11(8)>
  return D.40782_1;

}



;; Function switch_core_media_ready (switch_core_media_ready)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40775 = 0;



Renaming block #6

Renaming statement D.40776 = smh->engines[type].rtp_session;

Renaming statement D.40775 = switch_rtp_ready (D.40776);



Renaming block #7

Renaming statement return D.40775;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 7970, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.40776_6 = smh_3->engines[type_5(D)].rtp_session;

Updating SSA information for statement D.40775_7 = switch_rtp_ready (D.40776_6);



Registering new PHI nodes in block #7



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)

Affected blocks: 0 2 3 4 5 6 7 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[24] = "switch_core_media_ready";

}
switch_core_media_ready (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[24] = "switch_core_media_ready";
  struct switch_media_handle_t * smh;
  struct switch_rtp_t * D.40776;
  uint8_t D.40775;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7970, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40775_4 = 0;
  goto <bb 7>;

<bb 6>:
  D.40776_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40775_7 = switch_rtp_ready (D.40776_6);

<bb 7>:
  # D.40775_1 = PHI <D.40775_4(5), D.40775_7(6)>
  return D.40775_1;

}



;; Function switch_core_media_set_rtp_flag (switch_core_media_set_rtp_flag)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40766 = smh->engines[type].rtp_session;

Renaming statement D.40767 = switch_rtp_ready (D.40766);

Renaming statement if (D.40767 != 0)



Renaming block #6

Renaming statement D.40766 = smh->engines[type].rtp_session;

Renaming statement switch_rtp_set_flag (D.40766, flag);



Renaming block #7



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 7984, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.40766_4 = smh_2->engines[type_3(D)].rtp_session;

Updating SSA information for statement D.40767_5 = switch_rtp_ready (D.40766_4);



Registering new PHI nodes in block #6

Updating SSA information for statement D.40766_6 = smh_2->engines[type_3(D)].rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.40766_6, flag_7(D));



Registering new PHI nodes in block #7



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)

Affected blocks: 0 2 3 4 5 6 7 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_set_rtp_flag";

}
switch_core_media_set_rtp_flag (struct switch_core_session_t * session, switch_media_type_t type, switch_rtp_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_set_rtp_flag";
  struct switch_media_handle_t * smh;
  uint8_t D.40767;
  struct switch_rtp_t * D.40766;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7984, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40766_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40767_5 = switch_rtp_ready (D.40766_4);
  if (D.40767_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40766_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_set_flag (D.40766_6, flag_7(D));

<bb 7>:
  return;

}



;; Function switch_core_media_clear_rtp_flag (switch_core_media_clear_rtp_flag)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40757 = smh->engines[type].rtp_session;

Renaming statement D.40758 = switch_rtp_ready (D.40757);

Renaming statement if (D.40758 != 0)



Renaming block #6

Renaming statement D.40757 = smh->engines[type].rtp_session;

Renaming statement switch_rtp_clear_flag (D.40757, flag);



Renaming block #7



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8000, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.40757_4 = smh_2->engines[type_3(D)].rtp_session;

Updating SSA information for statement D.40758_5 = switch_rtp_ready (D.40757_4);



Registering new PHI nodes in block #6

Updating SSA information for statement D.40757_6 = smh_2->engines[type_3(D)].rtp_session;

Updating SSA information for statement switch_rtp_clear_flag (D.40757_6, flag_7(D));



Registering new PHI nodes in block #7



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)

Affected blocks: 0 2 3 4 5 6 7 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_clear_rtp_flag";

}
switch_core_media_clear_rtp_flag (struct switch_core_session_t * session, switch_media_type_t type, switch_rtp_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_clear_rtp_flag";
  struct switch_media_handle_t * smh;
  uint8_t D.40758;
  struct switch_rtp_t * D.40757;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8000, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40757_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40758_5 = switch_rtp_ready (D.40757_4);
  if (D.40758_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40757_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_clear_flag (D.40757_6, flag_7(D));

<bb 7>:
  return;

}



;; Function switch_core_media_set_telephony_event (switch_core_media_set_telephony_event)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40748 = smh->engines[type].rtp_session;

Renaming statement D.40749 = switch_rtp_ready (D.40748);

Renaming statement if (D.40749 != 0)



Renaming block #6

Renaming statement D.40748 = smh->engines[type].rtp_session;

Renaming statement switch_rtp_set_telephony_event (D.40748, te);



Renaming block #7



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8016, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.40748_4 = smh_2->engines[type_3(D)].rtp_session;

Updating SSA information for statement D.40749_5 = switch_rtp_ready (D.40748_4);



Registering new PHI nodes in block #6

Updating SSA information for statement D.40748_6 = smh_2->engines[type_3(D)].rtp_session;

Updating SSA information for statement switch_rtp_set_telephony_event (D.40748_6, te_7(D));



Registering new PHI nodes in block #7



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)

Affected blocks: 0 2 3 4 5 6 7 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[38] = "switch_core_media_set_telephony_event";

}
switch_core_media_set_telephony_event (struct switch_core_session_t * session, switch_media_type_t type, switch_payload_t te)
{
  static const char __PRETTY_FUNCTION__[38] = "switch_core_media_set_telephony_event";
  struct switch_media_handle_t * smh;
  uint8_t D.40749;
  struct switch_rtp_t * D.40748;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8016, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40748_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40749_5 = switch_rtp_ready (D.40748_4);
  if (D.40749_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40748_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_set_telephony_event (D.40748_6, te_7(D));

<bb 7>:
  return;

}



;; Function switch_core_media_set_telephony_recv_event (switch_core_media_set_telephony_recv_event)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40739 = smh->engines[type].rtp_session;

Renaming statement D.40740 = switch_rtp_ready (D.40739);

Renaming statement if (D.40740 != 0)



Renaming block #6

Renaming statement D.40739 = smh->engines[type].rtp_session;

Renaming statement switch_rtp_set_telephony_recv_event (D.40739, te);



Renaming block #7



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8032, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.40739_4 = smh_2->engines[type_3(D)].rtp_session;

Updating SSA information for statement D.40740_5 = switch_rtp_ready (D.40739_4);



Registering new PHI nodes in block #6

Updating SSA information for statement D.40739_6 = smh_2->engines[type_3(D)].rtp_session;

Updating SSA information for statement switch_rtp_set_telephony_recv_event (D.40739_6, te_7(D));



Registering new PHI nodes in block #7



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)

Affected blocks: 0 2 3 4 5 6 7 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[43] = "switch_core_media_set_telephony_recv_event";

}
switch_core_media_set_telephony_recv_event (struct switch_core_session_t * session, switch_media_type_t type, switch_payload_t te)
{
  static const char __PRETTY_FUNCTION__[43] = "switch_core_media_set_telephony_recv_event";
  struct switch_media_handle_t * smh;
  uint8_t D.40740;
  struct switch_rtp_t * D.40739;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8032, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40739_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40740_5 = switch_rtp_ready (D.40739_4);
  if (D.40740_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40739_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_set_telephony_recv_event (D.40739_6, te_7(D));

<bb 7>:
  return;

}



;; Function switch_core_media_get_stats (switch_core_media_get_stats)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40730 = 0B;



Renaming block #6

Renaming statement D.40731 = smh->engines[type].rtp_session;

Renaming statement if (D.40731 != 0B)



Renaming block #7

Renaming statement D.40731 = smh->engines[type].rtp_session;

Renaming statement D.40730 = switch_rtp_get_stats (D.40731, pool);



Renaming block #8

Renaming statement D.40730 = 0B;



Renaming block #9

Renaming statement return D.40730;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8048, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.40731_6 = smh_3->engines[type_5(D)].rtp_session;



Registering new PHI nodes in block #7

Updating SSA information for statement D.40731_7 = smh_3->engines[type_5(D)].rtp_session;

Updating SSA information for statement D.40730_9 = switch_rtp_get_stats (D.40731_7, pool_8(D));



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_get_stats";

}
switch_core_media_get_stats (struct switch_core_session_t * session, switch_media_type_t type, struct switch_memory_pool_t * pool)
{
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_get_stats";
  struct switch_media_handle_t * smh;
  struct switch_rtp_t * D.40731;
  struct switch_rtp_stats_t * D.40730;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8048, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40730_4 = 0B;
  goto <bb 9>;

<bb 6>:
  D.40731_6 = smh_3->engines[type_5(D)].rtp_session;
  if (D.40731_6 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40731_7 = smh_3->engines[type_5(D)].rtp_session;
  D.40730_9 = switch_rtp_get_stats (D.40731_7, pool_8(D));
  goto <bb 9>;

<bb 8>:
  D.40730_10 = 0B;

<bb 9>:
  # D.40730_1 = PHI <D.40730_4(5), D.40730_9(7), D.40730_10(8)>
  return D.40730_1;

}



;; Function set_stats (set_stats)



Renaming block #0



Renaming block #2

Renaming statement stats = switch_core_media_get_stats (session, type, 0B);

Renaming statement channel = switch_core_session_get_channel (session);

Renaming statement if (stats != 0B)



Renaming block #3

Renaming statement D.46526 = stats->inbound.variance;

Renaming statement D.46527 = sqrt (D.46526);

Renaming statement stats->inbound.std_deviation = D.46527;

Renaming statement if (prefix != 0B)



Renaming block #4

Renaming statement iftmp.137 = prefix;



Renaming block #5

Renaming statement iftmp.137 = "";



Renaming block #6

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.137, "in_raw_bytes");

Renaming statement D.46532 = stats->inbound.raw_bytes;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46532);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #7

Renaming statement iftmp.138 = prefix;



Renaming block #8

Renaming statement iftmp.138 = "";



Renaming block #9

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.138, "in_media_bytes");

Renaming statement D.46537 = stats->inbound.media_bytes;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46537);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #10

Renaming statement iftmp.139 = prefix;



Renaming block #11

Renaming statement iftmp.139 = "";



Renaming block #12

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.139, "in_packet_count");

Renaming statement D.46542 = stats->inbound.packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46542);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #13

Renaming statement iftmp.140 = prefix;



Renaming block #14

Renaming statement iftmp.140 = "";



Renaming block #15

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.140, "in_media_packet_count");

Renaming statement D.46547 = stats->inbound.media_packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46547);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #16

Renaming statement iftmp.141 = prefix;



Renaming block #17

Renaming statement iftmp.141 = "";



Renaming block #18

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.141, "in_skip_packet_count");

Renaming statement D.46552 = stats->inbound.skip_packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46552);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #19

Renaming statement iftmp.142 = prefix;



Renaming block #20

Renaming statement iftmp.142 = "";



Renaming block #21

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.142, "in_jitter_packet_count");

Renaming statement D.46557 = stats->inbound.jb_packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46557);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #22

Renaming statement iftmp.143 = prefix;



Renaming block #23

Renaming statement iftmp.143 = "";



Renaming block #24

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.143, "in_dtmf_packet_count");

Renaming statement D.46562 = stats->inbound.dtmf_packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46562);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #25

Renaming statement iftmp.144 = prefix;



Renaming block #26

Renaming statement iftmp.144 = "";



Renaming block #27

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.144, "in_cng_packet_count");

Renaming statement D.46567 = stats->inbound.cng_packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46567);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #28

Renaming statement iftmp.145 = prefix;



Renaming block #29

Renaming statement iftmp.145 = "";



Renaming block #30

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.145, "in_flush_packet_count");

Renaming statement D.46572 = stats->inbound.flush_packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46572);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #31

Renaming statement iftmp.146 = prefix;



Renaming block #32

Renaming statement iftmp.146 = "";



Renaming block #33

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.146, "in_largest_jb_size");

Renaming statement D.46577 = stats->inbound.largest_jb_size;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46577);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #34

Renaming statement iftmp.147 = prefix;



Renaming block #35

Renaming statement iftmp.147 = "";



Renaming block #36

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.147, "in_jitter_min_variance");

Renaming statement D.46582 = stats->inbound.min_variance;

Renaming statement switch_snprintf (&var_val, 35, "%0.2f", D.46582);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #37

Renaming statement iftmp.148 = prefix;



Renaming block #38

Renaming statement iftmp.148 = "";



Renaming block #39

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.148, "in_jitter_max_variance");

Renaming statement D.46587 = stats->inbound.max_variance;

Renaming statement switch_snprintf (&var_val, 35, "%0.2f", D.46587);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #40

Renaming statement iftmp.149 = prefix;



Renaming block #41

Renaming statement iftmp.149 = "";



Renaming block #42

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.149, "in_jitter_loss_rate");

Renaming statement D.46592 = stats->inbound.lossrate;

Renaming statement switch_snprintf (&var_val, 35, "%0.2f", D.46592);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #43

Renaming statement iftmp.150 = prefix;



Renaming block #44

Renaming statement iftmp.150 = "";



Renaming block #45

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.150, "in_jitter_burst_rate");

Renaming statement D.46597 = stats->inbound.burstrate;

Renaming statement switch_snprintf (&var_val, 35, "%0.2f", D.46597);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #46

Renaming statement iftmp.151 = prefix;



Renaming block #47

Renaming statement iftmp.151 = "";



Renaming block #48

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.151, "in_mean_interval");

Renaming statement D.46602 = stats->inbound.mean_interval;

Renaming statement switch_snprintf (&var_val, 35, "%0.2f", D.46602);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #49

Renaming statement iftmp.152 = prefix;



Renaming block #50

Renaming statement iftmp.152 = "";



Renaming block #51

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.152, "in_flaw_total");

Renaming statement D.46607 = stats->inbound.flaws;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46607);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #52

Renaming statement iftmp.153 = prefix;



Renaming block #53

Renaming statement iftmp.153 = "";



Renaming block #54

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.153, "in_quality_percentage");

Renaming statement D.46612 = stats->inbound.R;

Renaming statement switch_snprintf (&var_val, 35, "%0.2f", D.46612);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #55

Renaming statement iftmp.154 = prefix;



Renaming block #56

Renaming statement iftmp.154 = "";



Renaming block #57

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.154, "in_mos");

Renaming statement D.46617 = stats->inbound.mos;

Renaming statement switch_snprintf (&var_val, 35, "%0.2f", D.46617);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #58

Renaming statement iftmp.155 = prefix;



Renaming block #59

Renaming statement iftmp.155 = "";



Renaming block #60

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.155, "out_raw_bytes");

Renaming statement D.46622 = stats->outbound.raw_bytes;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46622);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #61

Renaming statement iftmp.156 = prefix;



Renaming block #62

Renaming statement iftmp.156 = "";



Renaming block #63

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.156, "out_media_bytes");

Renaming statement D.46627 = stats->outbound.media_bytes;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46627);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #64

Renaming statement iftmp.157 = prefix;



Renaming block #65

Renaming statement iftmp.157 = "";



Renaming block #66

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.157, "out_packet_count");

Renaming statement D.46632 = stats->outbound.packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46632);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #67

Renaming statement iftmp.158 = prefix;



Renaming block #68

Renaming statement iftmp.158 = "";



Renaming block #69

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.158, "out_media_packet_count");

Renaming statement D.46637 = stats->outbound.media_packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46637);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #70

Renaming statement iftmp.159 = prefix;



Renaming block #71

Renaming statement iftmp.159 = "";



Renaming block #72

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.159, "out_skip_packet_count");

Renaming statement D.46642 = stats->outbound.skip_packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46642);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #73

Renaming statement iftmp.160 = prefix;



Renaming block #74

Renaming statement iftmp.160 = "";



Renaming block #75

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.160, "out_dtmf_packet_count");

Renaming statement D.46647 = stats->outbound.dtmf_packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46647);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #76

Renaming statement iftmp.161 = prefix;



Renaming block #77

Renaming statement iftmp.161 = "";



Renaming block #78

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.161, "out_cng_packet_count");

Renaming statement D.46652 = stats->outbound.cng_packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46652);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #79

Renaming statement iftmp.162 = prefix;



Renaming block #80

Renaming statement iftmp.162 = "";



Renaming block #81

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.162, "rtcp_packet_count");

Renaming statement D.46657 = stats->rtcp.packet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46657);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);

Renaming statement if (prefix != 0B)



Renaming block #82

Renaming statement iftmp.163 = prefix;



Renaming block #83

Renaming statement iftmp.163 = "";



Renaming block #84

Renaming statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.163, "rtcp_octet_count");

Renaming statement D.46662 = stats->rtcp.octet_count;

Renaming statement switch_snprintf (&var_val, 35, "%d", D.46662);

Renaming statement switch_channel_set_variable_var_check (channel, &var_name, &var_val, 1);



Renaming block #85



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement stats_30 = switch_core_media_get_stats (session_28(D), type_29(D), 0B);

Updating SSA information for statement channel_31 = switch_core_session_get_channel (session_28(D));

Updating SSA information for statement var_name = "";

Updating SSA information for statement var_val = "";



Registering new PHI nodes in block #3

Updating SSA information for statement D.46526_32 = stats_30->inbound.variance;

Updating SSA information for statement D.46527_33 = sqrt (D.46526_32);

Updating SSA information for statement stats_30->inbound.std_deviation = D.46527_33;



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.137_1, "in_raw_bytes");

Updating SSA information for statement D.46532_37 = stats_30->inbound.raw_bytes;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46532_37);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.138_2, "in_media_bytes");

Updating SSA information for statement D.46537_40 = stats_30->inbound.media_bytes;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46537_40);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.139_3, "in_packet_count");

Updating SSA information for statement D.46542_43 = stats_30->inbound.packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46542_43);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.140_4, "in_media_packet_count");

Updating SSA information for statement D.46547_46 = stats_30->inbound.media_packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46547_46);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17



Registering new PHI nodes in block #18

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.141_5, "in_skip_packet_count");

Updating SSA information for statement D.46552_49 = stats_30->inbound.skip_packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46552_49);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.142_6, "in_jitter_packet_count");

Updating SSA information for statement D.46557_52 = stats_30->inbound.jb_packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46557_52);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #22



Registering new PHI nodes in block #23



Registering new PHI nodes in block #24

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.143_7, "in_dtmf_packet_count");

Updating SSA information for statement D.46562_55 = stats_30->inbound.dtmf_packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46562_55);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #25



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.144_8, "in_cng_packet_count");

Updating SSA information for statement D.46567_58 = stats_30->inbound.cng_packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46567_58);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #28



Registering new PHI nodes in block #29



Registering new PHI nodes in block #30

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.145_9, "in_flush_packet_count");

Updating SSA information for statement D.46572_61 = stats_30->inbound.flush_packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46572_61);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #31



Registering new PHI nodes in block #32



Registering new PHI nodes in block #33

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.146_10, "in_largest_jb_size");

Updating SSA information for statement D.46577_64 = stats_30->inbound.largest_jb_size;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46577_64);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #34



Registering new PHI nodes in block #35



Registering new PHI nodes in block #36

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.147_11, "in_jitter_min_variance");

Updating SSA information for statement D.46582_67 = stats_30->inbound.min_variance;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%0.2f", D.46582_67);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #37



Registering new PHI nodes in block #38



Registering new PHI nodes in block #39

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.148_12, "in_jitter_max_variance");

Updating SSA information for statement D.46587_70 = stats_30->inbound.max_variance;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%0.2f", D.46587_70);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #40



Registering new PHI nodes in block #41



Registering new PHI nodes in block #42

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.149_13, "in_jitter_loss_rate");

Updating SSA information for statement D.46592_73 = stats_30->inbound.lossrate;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%0.2f", D.46592_73);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #43



Registering new PHI nodes in block #44



Registering new PHI nodes in block #45

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.150_14, "in_jitter_burst_rate");

Updating SSA information for statement D.46597_76 = stats_30->inbound.burstrate;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%0.2f", D.46597_76);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #46



Registering new PHI nodes in block #47



Registering new PHI nodes in block #48

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.151_15, "in_mean_interval");

Updating SSA information for statement D.46602_79 = stats_30->inbound.mean_interval;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%0.2f", D.46602_79);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #49



Registering new PHI nodes in block #50



Registering new PHI nodes in block #51

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.152_16, "in_flaw_total");

Updating SSA information for statement D.46607_82 = stats_30->inbound.flaws;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46607_82);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #52



Registering new PHI nodes in block #53



Registering new PHI nodes in block #54

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.153_17, "in_quality_percentage");

Updating SSA information for statement D.46612_85 = stats_30->inbound.R;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%0.2f", D.46612_85);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #55



Registering new PHI nodes in block #56



Registering new PHI nodes in block #57

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.154_18, "in_mos");

Updating SSA information for statement D.46617_88 = stats_30->inbound.mos;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%0.2f", D.46617_88);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #58



Registering new PHI nodes in block #59



Registering new PHI nodes in block #60

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.155_19, "out_raw_bytes");

Updating SSA information for statement D.46622_91 = stats_30->outbound.raw_bytes;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46622_91);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #61



Registering new PHI nodes in block #62



Registering new PHI nodes in block #63

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.156_20, "out_media_bytes");

Updating SSA information for statement D.46627_94 = stats_30->outbound.media_bytes;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46627_94);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #64



Registering new PHI nodes in block #65



Registering new PHI nodes in block #66

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.157_21, "out_packet_count");

Updating SSA information for statement D.46632_97 = stats_30->outbound.packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46632_97);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #67



Registering new PHI nodes in block #68



Registering new PHI nodes in block #69

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.158_22, "out_media_packet_count");

Updating SSA information for statement D.46637_100 = stats_30->outbound.media_packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46637_100);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #70



Registering new PHI nodes in block #71



Registering new PHI nodes in block #72

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.159_23, "out_skip_packet_count");

Updating SSA information for statement D.46642_103 = stats_30->outbound.skip_packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46642_103);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #73



Registering new PHI nodes in block #74



Registering new PHI nodes in block #75

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.160_24, "out_dtmf_packet_count");

Updating SSA information for statement D.46647_106 = stats_30->outbound.dtmf_packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46647_106);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #76



Registering new PHI nodes in block #77



Registering new PHI nodes in block #78

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.161_25, "out_cng_packet_count");

Updating SSA information for statement D.46652_109 = stats_30->outbound.cng_packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46652_109);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #79



Registering new PHI nodes in block #80



Registering new PHI nodes in block #81

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.162_26, "rtcp_packet_count");

Updating SSA information for statement D.46657_112 = stats_30->rtcp.packet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46657_112);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #82



Registering new PHI nodes in block #83



Registering new PHI nodes in block #84

Updating SSA information for statement switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.163_27, "rtcp_octet_count");

Updating SSA information for statement D.46662_115 = stats_30->rtcp.octet_count;

Updating SSA information for statement switch_snprintf (&var_val, 35, "%d", D.46662_115);

Updating SSA information for statement switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);



Registering new PHI nodes in block #85



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 86
Number of blocks to update: 85 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_stats_t * stats;
  struct switch_channel_t * channel;
  char var_name[256];
  char var_val[35];

}
set_stats (struct switch_core_session_t * session, switch_media_type_t type, const char * prefix)
{
  char var_val[35];
  char var_name[256];
  struct switch_channel_t * channel;
  struct switch_rtp_stats_t * stats;
  uint32_t D.46662;
  const char * iftmp.163;
  uint32_t D.46657;
  const char * iftmp.162;
  switch_size_t D.46652;
  const char * iftmp.161;
  switch_size_t D.46647;
  const char * iftmp.160;
  switch_size_t D.46642;
  const char * iftmp.159;
  switch_size_t D.46637;
  const char * iftmp.158;
  switch_size_t D.46632;
  const char * iftmp.157;
  switch_size_t D.46627;
  const char * iftmp.156;
  switch_size_t D.46622;
  const char * iftmp.155;
  double D.46617;
  const char * iftmp.154;
  double D.46612;
  const char * iftmp.153;
  switch_size_t D.46607;
  const char * iftmp.152;
  double D.46602;
  const char * iftmp.151;
  double D.46597;
  const char * iftmp.150;
  double D.46592;
  const char * iftmp.149;
  double D.46587;
  const char * iftmp.148;
  double D.46582;
  const char * iftmp.147;
  switch_size_t D.46577;
  const char * iftmp.146;
  switch_size_t D.46572;
  const char * iftmp.145;
  switch_size_t D.46567;
  const char * iftmp.144;
  switch_size_t D.46562;
  const char * iftmp.143;
  switch_size_t D.46557;
  const char * iftmp.142;
  switch_size_t D.46552;
  const char * iftmp.141;
  switch_size_t D.46547;
  const char * iftmp.140;
  switch_size_t D.46542;
  const char * iftmp.139;
  switch_size_t D.46537;
  const char * iftmp.138;
  switch_size_t D.46532;
  const char * iftmp.137;
  double D.46527;
  double D.46526;

<bb 2>:
  stats_30 = switch_core_media_get_stats (session_28(D), type_29(D), 0B);
  # DEBUG stats => stats_30
  channel_31 = switch_core_session_get_channel (session_28(D));
  # DEBUG channel => channel_31
  var_name = "";
  var_val = "";
  if (stats_30 != 0B)
    goto <bb 3>;
  else
    goto <bb 85>;

<bb 3>:
  D.46526_32 = stats_30->inbound.variance;
  D.46527_33 = sqrt (D.46526_32);
  stats_30->inbound.std_deviation = D.46527_33;
  if (prefix_34(D) != 0B)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  iftmp.137_35 = prefix_34(D);
  goto <bb 6>;

<bb 5>:
  iftmp.137_36 = "";

<bb 6>:
  # iftmp.137_1 = PHI <iftmp.137_35(4), iftmp.137_36(5)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.137_1, "in_raw_bytes");
  D.46532_37 = stats_30->inbound.raw_bytes;
  switch_snprintf (&var_val, 35, "%d", D.46532_37);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  iftmp.138_38 = prefix_34(D);
  goto <bb 9>;

<bb 8>:
  iftmp.138_39 = "";

<bb 9>:
  # iftmp.138_2 = PHI <iftmp.138_38(7), iftmp.138_39(8)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.138_2, "in_media_bytes");
  D.46537_40 = stats_30->inbound.media_bytes;
  switch_snprintf (&var_val, 35, "%d", D.46537_40);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  iftmp.139_41 = prefix_34(D);
  goto <bb 12>;

<bb 11>:
  iftmp.139_42 = "";

<bb 12>:
  # iftmp.139_3 = PHI <iftmp.139_41(10), iftmp.139_42(11)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.139_3, "in_packet_count");
  D.46542_43 = stats_30->inbound.packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46542_43);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  iftmp.140_44 = prefix_34(D);
  goto <bb 15>;

<bb 14>:
  iftmp.140_45 = "";

<bb 15>:
  # iftmp.140_4 = PHI <iftmp.140_44(13), iftmp.140_45(14)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.140_4, "in_media_packet_count");
  D.46547_46 = stats_30->inbound.media_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46547_46);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  iftmp.141_47 = prefix_34(D);
  goto <bb 18>;

<bb 17>:
  iftmp.141_48 = "";

<bb 18>:
  # iftmp.141_5 = PHI <iftmp.141_47(16), iftmp.141_48(17)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.141_5, "in_skip_packet_count");
  D.46552_49 = stats_30->inbound.skip_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46552_49);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  iftmp.142_50 = prefix_34(D);
  goto <bb 21>;

<bb 20>:
  iftmp.142_51 = "";

<bb 21>:
  # iftmp.142_6 = PHI <iftmp.142_50(19), iftmp.142_51(20)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.142_6, "in_jitter_packet_count");
  D.46557_52 = stats_30->inbound.jb_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46557_52);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  iftmp.143_53 = prefix_34(D);
  goto <bb 24>;

<bb 23>:
  iftmp.143_54 = "";

<bb 24>:
  # iftmp.143_7 = PHI <iftmp.143_53(22), iftmp.143_54(23)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.143_7, "in_dtmf_packet_count");
  D.46562_55 = stats_30->inbound.dtmf_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46562_55);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  iftmp.144_56 = prefix_34(D);
  goto <bb 27>;

<bb 26>:
  iftmp.144_57 = "";

<bb 27>:
  # iftmp.144_8 = PHI <iftmp.144_56(25), iftmp.144_57(26)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.144_8, "in_cng_packet_count");
  D.46567_58 = stats_30->inbound.cng_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46567_58);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  iftmp.145_59 = prefix_34(D);
  goto <bb 30>;

<bb 29>:
  iftmp.145_60 = "";

<bb 30>:
  # iftmp.145_9 = PHI <iftmp.145_59(28), iftmp.145_60(29)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.145_9, "in_flush_packet_count");
  D.46572_61 = stats_30->inbound.flush_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46572_61);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  iftmp.146_62 = prefix_34(D);
  goto <bb 33>;

<bb 32>:
  iftmp.146_63 = "";

<bb 33>:
  # iftmp.146_10 = PHI <iftmp.146_62(31), iftmp.146_63(32)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.146_10, "in_largest_jb_size");
  D.46577_64 = stats_30->inbound.largest_jb_size;
  switch_snprintf (&var_val, 35, "%d", D.46577_64);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  iftmp.147_65 = prefix_34(D);
  goto <bb 36>;

<bb 35>:
  iftmp.147_66 = "";

<bb 36>:
  # iftmp.147_11 = PHI <iftmp.147_65(34), iftmp.147_66(35)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.147_11, "in_jitter_min_variance");
  D.46582_67 = stats_30->inbound.min_variance;
  switch_snprintf (&var_val, 35, "%0.2f", D.46582_67);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  iftmp.148_68 = prefix_34(D);
  goto <bb 39>;

<bb 38>:
  iftmp.148_69 = "";

<bb 39>:
  # iftmp.148_12 = PHI <iftmp.148_68(37), iftmp.148_69(38)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.148_12, "in_jitter_max_variance");
  D.46587_70 = stats_30->inbound.max_variance;
  switch_snprintf (&var_val, 35, "%0.2f", D.46587_70);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:
  iftmp.149_71 = prefix_34(D);
  goto <bb 42>;

<bb 41>:
  iftmp.149_72 = "";

<bb 42>:
  # iftmp.149_13 = PHI <iftmp.149_71(40), iftmp.149_72(41)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.149_13, "in_jitter_loss_rate");
  D.46592_73 = stats_30->inbound.lossrate;
  switch_snprintf (&var_val, 35, "%0.2f", D.46592_73);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  iftmp.150_74 = prefix_34(D);
  goto <bb 45>;

<bb 44>:
  iftmp.150_75 = "";

<bb 45>:
  # iftmp.150_14 = PHI <iftmp.150_74(43), iftmp.150_75(44)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.150_14, "in_jitter_burst_rate");
  D.46597_76 = stats_30->inbound.burstrate;
  switch_snprintf (&var_val, 35, "%0.2f", D.46597_76);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  iftmp.151_77 = prefix_34(D);
  goto <bb 48>;

<bb 47>:
  iftmp.151_78 = "";

<bb 48>:
  # iftmp.151_15 = PHI <iftmp.151_77(46), iftmp.151_78(47)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.151_15, "in_mean_interval");
  D.46602_79 = stats_30->inbound.mean_interval;
  switch_snprintf (&var_val, 35, "%0.2f", D.46602_79);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  iftmp.152_80 = prefix_34(D);
  goto <bb 51>;

<bb 50>:
  iftmp.152_81 = "";

<bb 51>:
  # iftmp.152_16 = PHI <iftmp.152_80(49), iftmp.152_81(50)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.152_16, "in_flaw_total");
  D.46607_82 = stats_30->inbound.flaws;
  switch_snprintf (&var_val, 35, "%d", D.46607_82);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 52>;
  else
    goto <bb 53>;

<bb 52>:
  iftmp.153_83 = prefix_34(D);
  goto <bb 54>;

<bb 53>:
  iftmp.153_84 = "";

<bb 54>:
  # iftmp.153_17 = PHI <iftmp.153_83(52), iftmp.153_84(53)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.153_17, "in_quality_percentage");
  D.46612_85 = stats_30->inbound.R;
  switch_snprintf (&var_val, 35, "%0.2f", D.46612_85);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 55>;
  else
    goto <bb 56>;

<bb 55>:
  iftmp.154_86 = prefix_34(D);
  goto <bb 57>;

<bb 56>:
  iftmp.154_87 = "";

<bb 57>:
  # iftmp.154_18 = PHI <iftmp.154_86(55), iftmp.154_87(56)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.154_18, "in_mos");
  D.46617_88 = stats_30->inbound.mos;
  switch_snprintf (&var_val, 35, "%0.2f", D.46617_88);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 58>;
  else
    goto <bb 59>;

<bb 58>:
  iftmp.155_89 = prefix_34(D);
  goto <bb 60>;

<bb 59>:
  iftmp.155_90 = "";

<bb 60>:
  # iftmp.155_19 = PHI <iftmp.155_89(58), iftmp.155_90(59)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.155_19, "out_raw_bytes");
  D.46622_91 = stats_30->outbound.raw_bytes;
  switch_snprintf (&var_val, 35, "%d", D.46622_91);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 61>;
  else
    goto <bb 62>;

<bb 61>:
  iftmp.156_92 = prefix_34(D);
  goto <bb 63>;

<bb 62>:
  iftmp.156_93 = "";

<bb 63>:
  # iftmp.156_20 = PHI <iftmp.156_92(61), iftmp.156_93(62)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.156_20, "out_media_bytes");
  D.46627_94 = stats_30->outbound.media_bytes;
  switch_snprintf (&var_val, 35, "%d", D.46627_94);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  iftmp.157_95 = prefix_34(D);
  goto <bb 66>;

<bb 65>:
  iftmp.157_96 = "";

<bb 66>:
  # iftmp.157_21 = PHI <iftmp.157_95(64), iftmp.157_96(65)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.157_21, "out_packet_count");
  D.46632_97 = stats_30->outbound.packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46632_97);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  iftmp.158_98 = prefix_34(D);
  goto <bb 69>;

<bb 68>:
  iftmp.158_99 = "";

<bb 69>:
  # iftmp.158_22 = PHI <iftmp.158_98(67), iftmp.158_99(68)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.158_22, "out_media_packet_count");
  D.46637_100 = stats_30->outbound.media_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46637_100);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 70>;
  else
    goto <bb 71>;

<bb 70>:
  iftmp.159_101 = prefix_34(D);
  goto <bb 72>;

<bb 71>:
  iftmp.159_102 = "";

<bb 72>:
  # iftmp.159_23 = PHI <iftmp.159_101(70), iftmp.159_102(71)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.159_23, "out_skip_packet_count");
  D.46642_103 = stats_30->outbound.skip_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46642_103);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 73>;
  else
    goto <bb 74>;

<bb 73>:
  iftmp.160_104 = prefix_34(D);
  goto <bb 75>;

<bb 74>:
  iftmp.160_105 = "";

<bb 75>:
  # iftmp.160_24 = PHI <iftmp.160_104(73), iftmp.160_105(74)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.160_24, "out_dtmf_packet_count");
  D.46647_106 = stats_30->outbound.dtmf_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46647_106);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 76>;
  else
    goto <bb 77>;

<bb 76>:
  iftmp.161_107 = prefix_34(D);
  goto <bb 78>;

<bb 77>:
  iftmp.161_108 = "";

<bb 78>:
  # iftmp.161_25 = PHI <iftmp.161_107(76), iftmp.161_108(77)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.161_25, "out_cng_packet_count");
  D.46652_109 = stats_30->outbound.cng_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46652_109);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 79>;
  else
    goto <bb 80>;

<bb 79>:
  iftmp.162_110 = prefix_34(D);
  goto <bb 81>;

<bb 80>:
  iftmp.162_111 = "";

<bb 81>:
  # iftmp.162_26 = PHI <iftmp.162_110(79), iftmp.162_111(80)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.162_26, "rtcp_packet_count");
  D.46657_112 = stats_30->rtcp.packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46657_112);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 82>;
  else
    goto <bb 83>;

<bb 82>:
  iftmp.163_113 = prefix_34(D);
  goto <bb 84>;

<bb 83>:
  iftmp.163_114 = "";

<bb 84>:
  # iftmp.163_27 = PHI <iftmp.163_113(82), iftmp.163_114(83)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.163_27, "rtcp_octet_count");
  D.46662_115 = stats_30->rtcp.octet_count;
  switch_snprintf (&var_val, 35, "%d", D.46662_115);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);

<bb 85>:
  return;

}



;; Function switch_core_media_set_stats (switch_core_media_set_stats)



Renaming block #0



Renaming block #2

Renaming statement D.46520 = session->media_handle;

Renaming statement if (D.46520 == 0B)



Renaming block #3

Renaming statement set_stats (session, 0, "audio");

Renaming statement set_stats (session, 1, "video");



Renaming block #4



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.46520_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #3

Updating SSA information for statement set_stats (session_1(D), 0, "audio");

Updating SSA information for statement set_stats (session_1(D), 1, "video");



Registering new PHI nodes in block #4



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)

Affected blocks: 0 2 3 4 


Scope blocks after cleanups:

{ Scope block #0 

}
switch_core_media_set_stats (struct switch_core_session_t * session)
{
  struct switch_media_handle_t * D.46520;

<bb 2>:
  D.46520_2 = session_1(D)->media_handle;
  if (D.46520_2 == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

<bb 3>:
  set_stats (session_1(D), 0, "audio");
  set_stats (session_1(D), 1, "video");

<bb 4>:
  return;

}



;; Function switch_core_media_udptl_mode (switch_core_media_udptl_mode)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40720 = 1;



Renaming block #6

Renaming statement D.40721 = smh->engines[type].rtp_session;

Renaming statement D.40722 = switch_rtp_ready (D.40721);

Renaming statement if (D.40722 != 0)



Renaming block #7

Renaming statement D.40721 = smh->engines[type].rtp_session;

Renaming statement D.40720 = switch_rtp_udptl_mode (D.40721);



Renaming block #8

Renaming statement D.40720 = 1;



Renaming block #9

Renaming statement return D.40720;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8066, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.40721_6 = smh_3->engines[type_5(D)].rtp_session;

Updating SSA information for statement D.40722_7 = switch_rtp_ready (D.40721_6);



Registering new PHI nodes in block #7

Updating SSA information for statement D.40721_8 = smh_3->engines[type_5(D)].rtp_session;

Updating SSA information for statement D.40720_9 = switch_rtp_udptl_mode (D.40721_8);



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_udptl_mode";

}
switch_core_media_udptl_mode (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_udptl_mode";
  struct switch_media_handle_t * smh;
  uint8_t D.40722;
  struct switch_rtp_t * D.40721;
  switch_status_t D.40720;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8066, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40720_4 = 1;
  goto <bb 9>;

<bb 6>:
  D.40721_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40722_7 = switch_rtp_ready (D.40721_6);
  if (D.40722_7 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40721_8 = smh_3->engines[type_5(D)].rtp_session;
  D.40720_9 = switch_rtp_udptl_mode (D.40721_8);
  goto <bb 9>;

<bb 8>:
  D.40720_10 = 1;

<bb 9>:
  # D.40720_1 = PHI <D.40720_4(5), D.40720_9(7), D.40720_10(8)>
  return D.40720_1;

}



;; Function switch_core_media_get_jb (switch_core_media_get_jb)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40710 = 0B;



Renaming block #6

Renaming statement D.40711 = smh->engines[type].rtp_session;

Renaming statement D.40712 = switch_rtp_ready (D.40711);

Renaming statement if (D.40712 != 0)



Renaming block #7

Renaming statement D.40711 = smh->engines[type].rtp_session;

Renaming statement D.40710 = switch_rtp_get_jitter_buffer (D.40711);



Renaming block #8

Renaming statement D.40710 = 0B;



Renaming block #9

Renaming statement return D.40710;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8084, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.40711_6 = smh_3->engines[type_5(D)].rtp_session;

Updating SSA information for statement D.40712_7 = switch_rtp_ready (D.40711_6);



Registering new PHI nodes in block #7

Updating SSA information for statement D.40711_8 = smh_3->engines[type_5(D)].rtp_session;

Updating SSA information for statement D.40710_9 = switch_rtp_get_jitter_buffer (D.40711_8);



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[25] = "switch_core_media_get_jb";

}
switch_core_media_get_jb (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[25] = "switch_core_media_get_jb";
  struct switch_media_handle_t * smh;
  uint8_t D.40712;
  struct switch_rtp_t * D.40711;
  struct stfu_instance_t * D.40710;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8084, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40710_4 = 0B;
  goto <bb 9>;

<bb 6>:
  D.40711_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40712_7 = switch_rtp_ready (D.40711_6);
  if (D.40712_7 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40711_8 = smh_3->engines[type_5(D)].rtp_session;
  D.40710_9 = switch_rtp_get_jitter_buffer (D.40711_8);
  goto <bb 9>;

<bb 8>:
  D.40710_10 = 0B;

<bb 9>:
  # D.40710_1 = PHI <D.40710_4(5), D.40710_9(7), D.40710_10(8)>
  return D.40710_1;

}



;; Function switch_core_media_set_sdp_codec_string (switch_core_media_set_sdp_codec_string)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40398 = strlen (r_sdp);

Renaming statement D.40399 = (int) D.40398;

Renaming statement parser = sdp_parse (0B, r_sdp, D.40399, 0);

Renaming statement if (parser != 0B)



Renaming block #6

Renaming statement sdp = sdp_session (parser);

Renaming statement if (sdp != 0B)



Renaming block #7

Renaming statement D.40404 = switch_core_media_get_codec_string (session);

Renaming statement switch_core_media_set_r_sdp_codec_string (session, D.40404, sdp, sdp_type);



Renaming block #8

Renaming statement sdp_parser_free (parser);



Renaming block #9



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8105, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.40398_4 = strlen (r_sdp_3(D));

Updating SSA information for statement parser_6 = sdp_parse (0B, r_sdp_3(D), D.40399_5, 0);



Registering new PHI nodes in block #6

Updating SSA information for statement sdp_7 = sdp_session (parser_6);



Registering new PHI nodes in block #7

Updating SSA information for statement D.40404_8 = switch_core_media_get_codec_string (session_1(D));

Updating SSA information for statement switch_core_media_set_r_sdp_codec_string (session_1(D), D.40404_8, sdp_7, sdp_type_9(D));



Registering new PHI nodes in block #8

Updating SSA information for statement sdp_parser_free (parser_6);



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 
  struct sdp_parser_t * parser;
  struct sdp_session_t * sdp;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[39] = "switch_core_media_set_sdp_codec_string";

}
switch_core_media_set_sdp_codec_string (struct switch_core_session_t * session, const char * r_sdp, switch_sdp_type_t sdp_type)
{
  static const char __PRETTY_FUNCTION__[39] = "switch_core_media_set_sdp_codec_string";
  struct switch_media_handle_t * smh;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  const char * D.40404;
  int D.40399;
  size_t D.40398;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8105, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 9>;
  else
    goto <bb 5>;

<bb 5>:
  D.40398_4 = strlen (r_sdp_3(D));
  D.40399_5 = (int) D.40398_4;
  parser_6 = sdp_parse (0B, r_sdp_3(D), D.40399_5, 0);
  # DEBUG parser => parser_6
  if (parser_6 != 0B)
    goto <bb 6>;
  else
    goto <bb 9>;

<bb 6>:
  sdp_7 = sdp_session (parser_6);
  # DEBUG sdp => sdp_7
  if (sdp_7 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40404_8 = switch_core_media_get_codec_string (session_1(D));
  switch_core_media_set_r_sdp_codec_string (session_1(D), D.40404_8, sdp_7, sdp_type_9(D));

<bb 8>:
  sdp_parser_free (parser_6);

<bb 9>:
  return;

}



;; Function switch_core_media_codec_chosen (switch_core_media_codec_chosen)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40386 = 1;



Renaming block #6

Renaming statement D.40387 = &smh->engines;

Renaming statement D.40388 = type * 11416;

Renaming statement engine = D.40387 + D.40388;

Renaming statement D.40389 = engine->cur_payload_map;

Renaming statement D.40390 = D.40389->iananame;

Renaming statement if (D.40390 != 0B)



Renaming block #7

Renaming statement D.40386 = 0;



Renaming block #8

Renaming statement D.40386 = 1;



Renaming block #9

Renaming statement return D.40386;



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8407, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.40389_9 = engine_8->cur_payload_map;

Updating SSA information for statement D.40390_10 = D.40389_9->iananame;



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)

Affected blocks: 0 2 3 4 5 6 7 8 9 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_codec_chosen";

}
switch_core_media_codec_chosen (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_codec_chosen";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  char * D.40390;
  struct payload_map_t * D.40389;
  unsigned int D.40388;
  struct switch_rtp_engine_t[2] * D.40387;
  switch_status_t D.40386;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8407, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40386_4 = 1;
  goto <bb 9>;

<bb 6>:
  D.40387_5 = &smh_3->engines;
  D.40388_7 = type_6(D) * 11416;
  engine_8 = D.40387_5 + D.40388_7;
  # DEBUG engine => engine_8
  D.40389_9 = engine_8->cur_payload_map;
  D.40390_10 = D.40389_9->iananame;
  if (D.40390_10 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40386_11 = 0;
  goto <bb 9>;

<bb 8>:
  D.40386_12 = 1;

<bb 9>:
  # D.40386_1 = PHI <D.40386_4(5), D.40386_11(7), D.40386_12(8)>
  return D.40386_1;

}



;; Function switch_core_media_check_outgoing_proxy (switch_core_media_check_outgoing_proxy)



Renaming block #0



Renaming block #2

Renaming statement r_sdp = 0B;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement D.40368 = o_session->channel;

Renaming statement D.40369 = switch_channel_test_flag (D.40368, 29);

Renaming statement if (D.40369 == 0)



Renaming block #5

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #6

Renaming statement D.40368 = o_session->channel;

Renaming statement r_sdp = switch_channel_get_variable_dup (D.40368, "switch_r_sdp", 1, -1);

Renaming statement a_engine = &smh->engines;

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.40374 = session->channel;

Renaming statement switch_channel_set_flag_value (D.40374, 29, 1);

Renaming statement D.40375 = a_engine->cur_payload_map;

Renaming statement D.40376 = switch_core_perform_session_strdup (session, "PROXY", "src/switch_core_media.c", &__func__, 8447);

Renaming statement D.40375->iananame = D.40376;

Renaming statement D.40375 = a_engine->cur_payload_map;

Renaming statement D.40375->rm_rate = 8000;

Renaming statement D.40375 = a_engine->cur_payload_map;

Renaming statement D.40375->adv_rm_rate = 8000;

Renaming statement D.40375 = a_engine->cur_payload_map;

Renaming statement D.40375->codec_ms = 20;

Renaming statement D.40377 = switch_stristr ("m=video", r_sdp);

Renaming statement if (D.40377 != 0B)



Renaming block #7

Renaming statement switch_core_media_choose_port (session, 1, 1);

Renaming statement D.40380 = v_engine->cur_payload_map;

Renaming statement D.40380->rm_encoding = "PROXY-VID";

Renaming statement D.40380 = v_engine->cur_payload_map;

Renaming statement D.40380->rm_rate = 90000;

Renaming statement D.40380 = v_engine->cur_payload_map;

Renaming statement D.40380->adv_rm_rate = 90000;

Renaming statement D.40380 = v_engine->cur_payload_map;

Renaming statement D.40380->codec_ms = 0;

Renaming statement D.40374 = session->channel;

Renaming statement switch_channel_set_flag_value (D.40374, 23, 1);

Renaming statement D.40374 = session->channel;

Renaming statement switch_channel_set_flag_value (D.40374, 98, 1);



Renaming block #8



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8430, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement D.40368_4 = o_session_3(D)->channel;

Updating SSA information for statement D.40369_5 = switch_channel_test_flag (D.40368_4, 29);



Registering new PHI nodes in block #5

Updating SSA information for statement smh_6 = session_2(D)->media_handle;



Registering new PHI nodes in block #6

Updating SSA information for statement D.40368_7 = o_session_3(D)->channel;

Updating SSA information for statement r_sdp_8 = switch_channel_get_variable_dup (D.40368_7, "switch_r_sdp", 1, -1);

Updating SSA information for statement D.40374_11 = session_2(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40374_11, 29, 1);

Updating SSA information for statement D.40375_12 = a_engine_9->cur_payload_map;

Updating SSA information for statement D.40376_13 = switch_core_perform_session_strdup (session_2(D), "PROXY", "src/switch_core_media.c", &__func__, 8447);

Updating SSA information for statement D.40375_12->iananame = D.40376_13;

Updating SSA information for statement D.40375_14 = a_engine_9->cur_payload_map;

Updating SSA information for statement D.40375_14->rm_rate = 8000;

Updating SSA information for statement D.40375_15 = a_engine_9->cur_payload_map;

Updating SSA information for statement D.40375_15->adv_rm_rate = 8000;

Updating SSA information for statement D.40375_16 = a_engine_9->cur_payload_map;

Updating SSA information for statement D.40375_16->codec_ms = 20;

Updating SSA information for statement D.40377_17 = switch_stristr ("m=video", r_sdp_8);



Registering new PHI nodes in block #7

Updating SSA information for statement switch_core_media_choose_port (session_2(D), 1, 1);

Updating SSA information for statement D.40380_18 = v_engine_10->cur_payload_map;

Updating SSA information for statement D.40380_18->rm_encoding = "PROXY-VID";

Updating SSA information for statement D.40380_19 = v_engine_10->cur_payload_map;

Updating SSA information for statement D.40380_19->rm_rate = 90000;

Updating SSA information for statement D.40380_20 = v_engine_10->cur_payload_map;

Updating SSA information for statement D.40380_20->adv_rm_rate = 90000;

Updating SSA information for statement D.40380_21 = v_engine_10->cur_payload_map;

Updating SSA information for statement D.40380_21->codec_ms = 0;

Updating SSA information for statement D.40374_22 = session_2(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40374_22, 23, 1);

Updating SSA information for statement D.40374_23 = session_2(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40374_23, 98, 1);



Registering new PHI nodes in block #8



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)

Affected blocks: 0 2 3 4 5 6 7 8 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  const char * r_sdp;
  static const char __PRETTY_FUNCTION__[39] = "switch_core_media_check_outgoing_proxy";
  static const char __func__[39] = "switch_core_media_check_outgoing_proxy";

}
switch_core_media_check_outgoing_proxy (struct switch_core_session_t * session, struct switch_core_session_t * o_session)
{
  static const char __func__[39] = "switch_core_media_check_outgoing_proxy";
  static const char __PRETTY_FUNCTION__[39] = "switch_core_media_check_outgoing_proxy";
  const char * r_sdp;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  struct payload_map_t * D.40380;
  const char * D.40377;
  char * D.40376;
  struct payload_map_t * D.40375;
  struct switch_channel_t * D.40374;
  uint32_t D.40369;
  struct switch_channel_t * D.40368;

<bb 2>:
  r_sdp_1 = 0B;
  # DEBUG r_sdp => r_sdp_1
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8430, &__PRETTY_FUNCTION__);

<bb 4>:
  D.40368_4 = o_session_3(D)->channel;
  D.40369_5 = switch_channel_test_flag (D.40368_4, 29);
  if (D.40369_5 == 0)
    goto <bb 8>;
  else
    goto <bb 5>;

<bb 5>:
  smh_6 = session_2(D)->media_handle;
  # DEBUG smh => smh_6
  if (smh_6 == 0B)
    goto <bb 8>;
  else
    goto <bb 6>;

<bb 6>:
  D.40368_7 = o_session_3(D)->channel;
  r_sdp_8 = switch_channel_get_variable_dup (D.40368_7, "switch_r_sdp", 1, -1);
  # DEBUG r_sdp => r_sdp_8
  a_engine_9 = &smh_6->engines;
  # DEBUG a_engine => a_engine_9
  v_engine_10 = &smh_6->engines[1];
  # DEBUG v_engine => v_engine_10
  D.40374_11 = session_2(D)->channel;
  switch_channel_set_flag_value (D.40374_11, 29, 1);
  D.40375_12 = a_engine_9->cur_payload_map;
  D.40376_13 = switch_core_perform_session_strdup (session_2(D), "PROXY", "src/switch_core_media.c", &__func__, 8447);
  D.40375_12->iananame = D.40376_13;
  D.40375_14 = a_engine_9->cur_payload_map;
  D.40375_14->rm_rate = 8000;
  D.40375_15 = a_engine_9->cur_payload_map;
  D.40375_15->adv_rm_rate = 8000;
  D.40375_16 = a_engine_9->cur_payload_map;
  D.40375_16->codec_ms = 20;
  D.40377_17 = switch_stristr ("m=video", r_sdp_8);
  if (D.40377_17 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  switch_core_media_choose_port (session_2(D), 1, 1);
  D.40380_18 = v_engine_10->cur_payload_map;
  D.40380_18->rm_encoding = "PROXY-VID";
  D.40380_19 = v_engine_10->cur_payload_map;
  D.40380_19->rm_rate = 90000;
  D.40380_20 = v_engine_10->cur_payload_map;
  D.40380_20->adv_rm_rate = 90000;
  D.40380_21 = v_engine_10->cur_payload_map;
  D.40380_21->codec_ms = 0;
  D.40374_22 = session_2(D)->channel;
  switch_channel_set_flag_value (D.40374_22, 23, 1);
  D.40374_23 = session_2(D)->channel;
  switch_channel_set_flag_value (D.40374_23, 98, 1);

<bb 8>:
  return;

}



;; Function switch_core_media_proxy_codec (switch_core_media_proxy_codec)



Renaming block #0



Renaming block #2

Renaming statement parser = 0B;

Renaming statement ptime = 0;

Renaming statement dptime = 0;

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement a_engine = &smh->engines;

Renaming statement D.40330 = strlen (r_sdp);

Renaming statement D.40331 = (int) D.40330;

Renaming statement parser = sdp_parse (0B, r_sdp, D.40331, 0);

Renaming statement if (parser == 0B)



Renaming block #6

Renaming statement sdp = sdp_session (parser);

Renaming statement if (sdp == 0B)



Renaming block #7

Renaming statement sdp_parser_free (parser);



Renaming block #8

Renaming statement attr = sdp->sdp_attributes;



Renaming block #14

Renaming statement if (attr != 0B)



Renaming block #9

Renaming statement D.40336 = attr->a_name;

Renaming statement D.40337 = _zstr (D.40336);

Renaming statement if (D.40337 != 0)



Renaming block #10



Renaming block #11

Renaming statement D.40336 = attr->a_name;

Renaming statement D.40340 = strcasecmp (D.40336, "ptime");

Renaming statement if (D.40340 == 0)



Renaming block #12

Renaming statement D.40343 = attr->a_value;

Renaming statement dptime = atoi (D.40343);



Renaming block #13

Renaming statement attr = attr->a_next;



Renaming block #15

Renaming statement m = sdp->sdp_media;



Renaming block #28

Renaming statement if (m != 0B)



Renaming block #16

Renaming statement ptime = dptime;

Renaming statement D.40344 = m->m_proto;

Renaming statement if (D.40344 == 256)



Renaming block #17

Renaming statement attr = m->m_attributes;



Renaming block #24

Renaming statement if (attr != 0B)



Renaming block #18

Renaming statement D.40336 = attr->a_name;

Renaming statement D.40347 = strcasecmp (D.40336, "ptime");

Renaming statement if (D.40347 == 0)



Renaming block #19

Renaming statement D.40343 = attr->a_value;

Renaming statement if (D.40343 != 0B)



Renaming block #20

Renaming statement D.40343 = attr->a_value;

Renaming statement ptime = atoi (D.40343);



Renaming block #21

Renaming statement D.40336 = attr->a_name;

Renaming statement D.40353 = strcasecmp (D.40336, "maxptime");

Renaming statement if (D.40353 == 0)



Renaming block #22

Renaming statement D.40343 = attr->a_value;



Renaming block #23

Renaming statement attr = attr->a_next;



Renaming block #25

Renaming statement map = m->m_rtpmaps;

Renaming statement if (map != 0B)



Renaming block #26

Renaming statement D.40358 = a_engine->cur_payload_map;

Renaming statement D.40359 = map->rm_encoding;

Renaming statement D.40360 = switch_core_perform_session_strdup (session, D.40359, "src/switch_core_media.c", &__func__, 8527);

Renaming statement D.40358->iananame = D.40360;

Renaming statement D.40358 = a_engine->cur_payload_map;

Renaming statement D.40361 = map->rm_rate;

Renaming statement D.40358->rm_rate = D.40361;

Renaming statement D.40358 = a_engine->cur_payload_map;

Renaming statement D.40361 = map->rm_rate;

Renaming statement D.40358->adv_rm_rate = D.40361;

Renaming statement D.40358 = a_engine->cur_payload_map;

Renaming statement ptime.4 = (uint32_t) ptime;

Renaming statement D.40358->codec_ms = ptime.4;

Renaming statement D.40363 = smh->mparams;

Renaming statement D.40364 = D.40363->codec_flags;

Renaming statement switch_core_media_set_codec (session, 0, D.40364);



Renaming block #27

Renaming statement m = m->m_next;



Renaming block #29

Renaming statement sdp_parser_free (parser);



Renaming block #30



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8482, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_12 = session_11(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.40330_15 = strlen (r_sdp_14(D));

Updating SSA information for statement parser_17 = sdp_parse (0B, r_sdp_14(D), D.40331_16, 0);



Registering new PHI nodes in block #6

Updating SSA information for statement sdp_18 = sdp_session (parser_17);



Registering new PHI nodes in block #7

Updating SSA information for statement sdp_parser_free (parser_17);



Registering new PHI nodes in block #8

Updating SSA information for statement attr_19 = sdp_18->sdp_attributes;



Registering new PHI nodes in block #14



Registering new PHI nodes in block #9

Updating SSA information for statement D.40336_20 = attr_2->a_name;

Updating SSA information for statement D.40337_21 = _zstr (D.40336_20);



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11

Updating SSA information for statement D.40336_22 = attr_2->a_name;

Updating SSA information for statement D.40340_23 = strcasecmp (D.40336_22, "ptime");



Registering new PHI nodes in block #12

Updating SSA information for statement D.40343_24 = attr_2->a_value;

Updating SSA information for statement dptime_25 = atoi (D.40343_24);



Registering new PHI nodes in block #13

Updating SSA information for statement attr_26 = attr_2->a_next;



Registering new PHI nodes in block #15

Updating SSA information for statement m_27 = sdp_18->sdp_media;



Registering new PHI nodes in block #28



Registering new PHI nodes in block #16

Updating SSA information for statement D.40344_29 = m_1->m_proto;



Registering new PHI nodes in block #17

Updating SSA information for statement attr_30 = m_1->m_attributes;



Registering new PHI nodes in block #24



Registering new PHI nodes in block #18

Updating SSA information for statement D.40336_31 = attr_3->a_name;

Updating SSA information for statement D.40347_32 = strcasecmp (D.40336_31, "ptime");



Registering new PHI nodes in block #19

Updating SSA information for statement D.40343_33 = attr_3->a_value;



Registering new PHI nodes in block #20

Updating SSA information for statement D.40343_34 = attr_3->a_value;

Updating SSA information for statement ptime_35 = atoi (D.40343_34);



Registering new PHI nodes in block #21

Updating SSA information for statement D.40336_36 = attr_3->a_name;

Updating SSA information for statement D.40353_37 = strcasecmp (D.40336_36, "maxptime");



Registering new PHI nodes in block #22

Updating SSA information for statement D.40343_38 = attr_3->a_value;



Registering new PHI nodes in block #23

Updating SSA information for statement attr_39 = attr_3->a_next;



Registering new PHI nodes in block #25

Updating SSA information for statement map_40 = m_1->m_rtpmaps;



Registering new PHI nodes in block #26

Updating SSA information for statement D.40358_41 = a_engine_13->cur_payload_map;

Updating SSA information for statement D.40359_42 = map_40->rm_encoding;

Updating SSA information for statement D.40360_43 = switch_core_perform_session_strdup (session_11(D), D.40359_42, "src/switch_core_media.c", &__func__, 8527);

Updating SSA information for statement D.40358_41->iananame = D.40360_43;

Updating SSA information for statement D.40358_44 = a_engine_13->cur_payload_map;

Updating SSA information for statement D.40361_45 = map_40->rm_rate;

Updating SSA information for statement D.40358_44->rm_rate = D.40361_45;

Updating SSA information for statement D.40358_46 = a_engine_13->cur_payload_map;

Updating SSA information for statement D.40361_47 = map_40->rm_rate;

Updating SSA information for statement D.40358_46->adv_rm_rate = D.40361_47;

Updating SSA information for statement D.40358_48 = a_engine_13->cur_payload_map;

Updating SSA information for statement D.40358_48->codec_ms = ptime.4_49;

Updating SSA information for statement D.40363_50 = smh_12->mparams;

Updating SSA information for statement D.40364_51 = D.40363_50->codec_flags;

Updating SSA information for statement switch_core_media_set_codec (session_11(D), 0, D.40364_51);



Registering new PHI nodes in block #27

Updating SSA information for statement m_52 = m_1->m_next;



Registering new PHI nodes in block #29

Updating SSA information for statement sdp_parser_free (parser_17);



Registering new PHI nodes in block #30



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 31
Number of blocks to update: 30 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 


Scope blocks after cleanups:

{ Scope block #0 
  struct sdp_media_t * m;
  struct sdp_parser_t * parser;
  struct sdp_session_t * sdp;
  struct sdp_attribute_t * attr;
  int ptime;
  int dptime;
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_proxy_codec";
  static const char __func__[30] = "switch_core_media_proxy_codec";

  { Scope block #0 
    struct sdp_rtpmap_t * map;

  }

}
switch_core_media_proxy_codec (struct switch_core_session_t * session, const char * r_sdp)
{
  struct sdp_rtpmap_t * map;
  static const char __func__[30] = "switch_core_media_proxy_codec";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_proxy_codec";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  struct sdp_media_t * m;
  uint32_t D.40364;
  struct switch_core_media_params_t * D.40363;
  uint32_t ptime.4;
  long unsigned int D.40361;
  char * D.40360;
  const char * D.40359;
  struct payload_map_t * D.40358;
  int D.40353;
  int D.40347;
  sdp_proto_e D.40344;
  const char * D.40343;
  int D.40340;
  int D.40337;
  const char * D.40336;
  int D.40331;
  size_t D.40330;

<bb 2>:
  parser_8 = 0B;
  # DEBUG parser => parser_8
  ptime_9 = 0;
  # DEBUG ptime => ptime_9
  dptime_10 = 0;
  # DEBUG dptime => dptime_10
  if (session_11(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8482, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_12 = session_11(D)->media_handle;
  # DEBUG smh => smh_12
  if (smh_12 == 0B)
    goto <bb 30>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_13 = &smh_12->engines;
  # DEBUG a_engine => a_engine_13
  D.40330_15 = strlen (r_sdp_14(D));
  D.40331_16 = (int) D.40330_15;
  parser_17 = sdp_parse (0B, r_sdp_14(D), D.40331_16, 0);
  # DEBUG parser => parser_17
  if (parser_17 == 0B)
    goto <bb 30>;
  else
    goto <bb 6>;

<bb 6>:
  sdp_18 = sdp_session (parser_17);
  # DEBUG sdp => sdp_18
  if (sdp_18 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  sdp_parser_free (parser_17);
  goto <bb 30>;

<bb 8>:
  attr_19 = sdp_18->sdp_attributes;
  # DEBUG attr => attr_19
  goto <bb 14>;

<bb 9>:
  D.40336_20 = attr_2->a_name;
  D.40337_21 = _zstr (D.40336_20);
  if (D.40337_21 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  // predicted unlikely by continue predictor.
  goto <bb 13>;

<bb 11>:
  D.40336_22 = attr_2->a_name;
  D.40340_23 = strcasecmp (D.40336_22, "ptime");
  if (D.40340_23 == 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  D.40343_24 = attr_2->a_value;
  dptime_25 = atoi (D.40343_24);
  # DEBUG dptime => dptime_25

<bb 13>:
  # dptime_6 = PHI <dptime_7(10), dptime_7(11), dptime_25(12)>
  # DEBUG dptime => dptime_6
  attr_26 = attr_2->a_next;
  # DEBUG attr => attr_26

<bb 14>:
  # attr_2 = PHI <attr_19(8), attr_26(13)>
  # dptime_7 = PHI <dptime_10(8), dptime_6(13)>
  # DEBUG dptime => dptime_7
  # DEBUG attr => attr_2
  if (attr_2 != 0B)
    goto <bb 9>;
  else
    goto <bb 15>;

<bb 15>:
  m_27 = sdp_18->sdp_media;
  # DEBUG m => m_27
  goto <bb 28>;

<bb 16>:
  ptime_28 = dptime_7;
  # DEBUG ptime => ptime_28
  D.40344_29 = m_1->m_proto;
  if (D.40344_29 == 256)
    goto <bb 17>;
  else
    goto <bb 27>;

<bb 17>:
  attr_30 = m_1->m_attributes;
  # DEBUG attr => attr_30
  goto <bb 24>;

<bb 18>:
  D.40336_31 = attr_3->a_name;
  D.40347_32 = strcasecmp (D.40336_31, "ptime");
  if (D.40347_32 == 0)
    goto <bb 19>;
  else
    goto <bb 23>;

<bb 19>:
  D.40343_33 = attr_3->a_value;
  if (D.40343_33 != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.40343_34 = attr_3->a_value;
  ptime_35 = atoi (D.40343_34);
  # DEBUG ptime => ptime_35
  goto <bb 23>;

<bb 21>:
  D.40336_36 = attr_3->a_name;
  D.40353_37 = strcasecmp (D.40336_36, "maxptime");
  if (D.40353_37 == 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.40343_38 = attr_3->a_value;

<bb 23>:
  # ptime_4 = PHI <ptime_5(18), ptime_35(20), ptime_5(21), ptime_5(22)>
  # DEBUG ptime => ptime_4
  attr_39 = attr_3->a_next;
  # DEBUG attr => attr_39

<bb 24>:
  # attr_3 = PHI <attr_30(17), attr_39(23)>
  # ptime_5 = PHI <ptime_28(17), ptime_4(23)>
  # DEBUG ptime => ptime_5
  # DEBUG attr => attr_3
  if (attr_3 != 0B)
    goto <bb 18>;
  else
    goto <bb 25>;

<bb 25>:
  map_40 = m_1->m_rtpmaps;
  # DEBUG map => map_40
  if (map_40 != 0B)
    goto <bb 26>;
  else
    goto <bb 29>;

<bb 26>:
  D.40358_41 = a_engine_13->cur_payload_map;
  D.40359_42 = map_40->rm_encoding;
  D.40360_43 = switch_core_perform_session_strdup (session_11(D), D.40359_42, "src/switch_core_media.c", &__func__, 8527);
  D.40358_41->iananame = D.40360_43;
  D.40358_44 = a_engine_13->cur_payload_map;
  D.40361_45 = map_40->rm_rate;
  D.40358_44->rm_rate = D.40361_45;
  D.40358_46 = a_engine_13->cur_payload_map;
  D.40361_47 = map_40->rm_rate;
  D.40358_46->adv_rm_rate = D.40361_47;
  D.40358_48 = a_engine_13->cur_payload_map;
  ptime.4_49 = (uint32_t) ptime_5;
  D.40358_48->codec_ms = ptime.4_49;
  D.40363_50 = smh_12->mparams;
  D.40364_51 = D.40363_50->codec_flags;
  switch_core_media_set_codec (session_11(D), 0, D.40364_51);
  goto <bb 29>;

<bb 27>:
  m_52 = m_1->m_next;
  # DEBUG m => m_52

<bb 28>:
  # m_1 = PHI <m_27(15), m_52(27)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 16>;
  else
    goto <bb 29>;

<bb 29>:
  sdp_parser_free (parser_17);

<bb 30>:
  return;

}



;; Function switch_core_media_recover_session (switch_core_media_recover_session)



Renaming block #0



Renaming block #2

Renaming statement if (session == 0B)



Renaming block #3



Renaming block #4

Renaming statement smh = session->media_handle;

Renaming statement if (smh == 0B)



Renaming block #5

Renaming statement D.40154 = session->channel;

Renaming statement ip = switch_channel_get_variable_dup (D.40154, "local_media_ip", 1, -1);

Renaming statement D.40154 = session->channel;

Renaming statement port = switch_channel_get_variable_dup (D.40154, "local_media_port", 1, -1);

Renaming statement D.40154 = session->channel;

Renaming statement D.40157 = switch_channel_test_flag (D.40154, 15);

Renaming statement if (D.40157 != 0)



Renaming block #6

Renaming statement D.40159 = ip == 0B;

Renaming statement D.40160 = port == 0B;

Renaming statement D.40161 = D.40159 || D.40160;

Renaming statement if (D.40161 != 0)



Renaming block #7

Renaming statement D.40154 = session->channel;

Renaming statement a_ip = switch_channel_get_variable_dup (D.40154, "advertised_media_ip", 1, -1);

Renaming statement D.40154 = session->channel;

Renaming statement r_ip = switch_channel_get_variable_dup (D.40154, "remote_media_ip", 1, -1);

Renaming statement D.40154 = session->channel;

Renaming statement r_port = switch_channel_get_variable_dup (D.40154, "remote_media_port", 1, -1);

Renaming statement a_engine = &smh->engines;

Renaming statement v_engine = &smh->engines[1];

Renaming statement D.40162 = a_engine->cur_payload_map;

Renaming statement D.40162 = a_engine->cur_payload_map;

Renaming statement D.40154 = session->channel;

Renaming statement D.40163 = switch_channel_get_variable_dup (D.40154, "rtp_use_codec_name", 1, -1);

Renaming statement D.40162->rm_encoding = D.40163;

Renaming statement D.40164 = D.40162->rm_encoding;

Renaming statement D.40162->iananame = D.40164;

Renaming statement D.40162 = a_engine->cur_payload_map;

Renaming statement D.40154 = session->channel;

Renaming statement D.40165 = switch_channel_get_variable_dup (D.40154, "rtp_use_codec_fmtp", 1, -1);

Renaming statement D.40162->rm_fmtp = D.40165;

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "switch_r_sdp", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #8

Renaming statement D.40168 = smh->mparams;

Renaming statement D.40169 = switch_core_perform_session_strdup (session, tmp, "src/switch_core_media.c", &__func__, 8581);

Renaming statement D.40168->remote_sdp_str = D.40169;



Renaming block #9

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_last_audio_codec_string", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #10

Renaming statement D.40154 = session->channel;

Renaming statement vtmp = switch_channel_get_variable_dup (D.40154, "rtp_last_video_codec_string", 1, -1);

Renaming statement D.40154 = session->channel;

Renaming statement if (vtmp != 0B)



Renaming block #11

Renaming statement iftmp.0 = ",";



Renaming block #12

Renaming statement iftmp.0 = "";



Renaming block #13

Renaming statement if (vtmp != 0B)



Renaming block #14

Renaming statement iftmp.1 = vtmp;



Renaming block #15

Renaming statement iftmp.1 = "";



Renaming block #16

Renaming statement switch_channel_set_variable_printf (D.40154, "rtp_use_codec_string", "%s%s%s", tmp, iftmp.0, iftmp.1);



Renaming block #17

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_use_codec_string", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #18

Renaming statement D.40182 = smh->session;

Renaming statement tmp_codec_string = switch_core_perform_session_strdup (D.40182, tmp, "src/switch_core_media.c", &__func__, 8591);

Renaming statement D.40183 = &smh->codec_order;

Renaming statement D.40184 = switch_separate_string (tmp_codec_string, 44, D.40183, 50);

Renaming statement D.40185 = (int) D.40184;

Renaming statement smh->codec_order_last = D.40185;

Renaming statement D.40168 = smh->mparams;

Renaming statement D.40186 = &smh->codecs;

Renaming statement D.40183 = &smh->codec_order;

Renaming statement D.40187 = smh->codec_order_last;

Renaming statement D.40188 = switch_loadable_module_get_codecs_sorted (D.40186, 50, D.40183, D.40187);

Renaming statement D.40168->num_codecs = D.40188;



Renaming block #19

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_2833_send_payload", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #20

Renaming statement D.40168 = smh->mparams;

Renaming statement D.40191 = atoi (tmp);

Renaming statement D.40192 = (unsigned char) D.40191;

Renaming statement D.40168->te = D.40192;



Renaming block #21

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_2833_recv_payload", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #22

Renaming statement D.40168 = smh->mparams;

Renaming statement D.40195 = atoi (tmp);

Renaming statement D.40196 = (unsigned char) D.40195;

Renaming statement D.40168->recv_te = D.40196;



Renaming block #23

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_use_codec_rate", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #24

Renaming statement D.40162 = a_engine->cur_payload_map;

Renaming statement D.40199 = atoi (tmp);

Renaming statement D.40200 = (long unsigned int) D.40199;

Renaming statement D.40162->rm_rate = D.40200;

Renaming statement D.40162 = a_engine->cur_payload_map;

Renaming statement D.40162 = a_engine->cur_payload_map;

Renaming statement D.40201 = D.40162->rm_rate;

Renaming statement D.40162->adv_rm_rate = D.40201;



Renaming block #25

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_use_codec_ptime", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #26

Renaming statement D.40162 = a_engine->cur_payload_map;

Renaming statement D.40204 = atoi (tmp);

Renaming statement D.40205 = (uint32_t) D.40204;

Renaming statement D.40162->codec_ms = D.40205;



Renaming block #27

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_use_pt", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #28

Renaming statement D.40162 = a_engine->cur_payload_map;

Renaming statement D.40162 = a_engine->cur_payload_map;

Renaming statement D.40208 = atoi (tmp);

Renaming statement D.40209 = (unsigned char) D.40208;

Renaming statement D.40162->agreed_pt = D.40209;

Renaming statement D.40210 = D.40162->agreed_pt;

Renaming statement D.40162->pt = D.40210;



Renaming block #29

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_audio_recv_pt", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #30

Renaming statement D.40162 = a_engine->cur_payload_map;

Renaming statement D.40213 = atoi (tmp);

Renaming statement D.40214 = (unsigned char) D.40213;

Renaming statement D.40162->recv_pt = D.40214;



Renaming block #31

Renaming statement D.40168 = smh->mparams;

Renaming statement D.40215 = D.40168->codec_flags;

Renaming statement switch_core_media_set_codec (session, 1, D.40215);

Renaming statement D.40168 = smh->mparams;

Renaming statement D.40168->extrtpip = ip;

Renaming statement D.40216 = D.40168->extrtpip;

Renaming statement a_engine->adv_sdp_ip = D.40216;

Renaming statement D.40217 = atoi (port);

Renaming statement D.40218 = (short unsigned int) D.40217;

Renaming statement a_engine->local_sdp_port = D.40218;

Renaming statement D.40219 = a_engine->local_sdp_port;

Renaming statement a_engine->adv_sdp_port = D.40219;

Renaming statement D.40220 = _zstr (ip);

Renaming statement if (D.40220 == 0)



Renaming block #32

Renaming statement D.40223 = switch_core_perform_session_strdup (session, ip, "src/switch_core_media.c", &__func__, 8627);

Renaming statement a_engine->local_sdp_ip = D.40223;

Renaming statement D.40168 = smh->mparams;

Renaming statement D.40224 = a_engine->local_sdp_ip;

Renaming statement D.40168->rtpip = D.40224;



Renaming block #33

Renaming statement D.40225 = _zstr (a_ip);

Renaming statement if (D.40225 == 0)



Renaming block #34

Renaming statement D.40228 = switch_core_perform_session_strdup (session, a_ip, "src/switch_core_media.c", &__func__, 8632);

Renaming statement a_engine->adv_sdp_ip = D.40228;



Renaming block #35

Renaming statement D.40229 = r_ip != 0B;

Renaming statement D.40230 = r_port != 0B;

Renaming statement D.40231 = D.40229 && D.40230;

Renaming statement if (D.40231 != 0)



Renaming block #36

Renaming statement D.40162 = a_engine->cur_payload_map;

Renaming statement D.40162->remote_sdp_ip = r_ip;

Renaming statement D.40162 = a_engine->cur_payload_map;

Renaming statement D.40234 = atoi (r_port);

Renaming statement D.40235 = (short unsigned int) D.40234;

Renaming statement D.40162->remote_sdp_port = D.40235;



Renaming block #37

Renaming statement D.40154 = session->channel;

Renaming statement D.40236 = switch_channel_test_flag (D.40154, 23);

Renaming statement if (D.40236 != 0)



Renaming block #38

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_use_video_pt", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #39

Renaming statement D.40241 = v_engine->cur_payload_map;

Renaming statement D.40241 = v_engine->cur_payload_map;

Renaming statement D.40242 = atoi (tmp);

Renaming statement D.40243 = (unsigned char) D.40242;

Renaming statement D.40241->agreed_pt = D.40243;

Renaming statement D.40244 = D.40241->agreed_pt;

Renaming statement D.40241->pt = D.40244;



Renaming block #40

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_video_recv_pt", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #41

Renaming statement D.40241 = v_engine->cur_payload_map;

Renaming statement D.40247 = atoi (tmp);

Renaming statement D.40248 = (unsigned char) D.40247;

Renaming statement D.40241->recv_pt = D.40248;



Renaming block #42

Renaming statement D.40241 = v_engine->cur_payload_map;

Renaming statement D.40154 = session->channel;

Renaming statement D.40249 = switch_channel_get_variable_dup (D.40154, "rtp_use_video_codec_name", 1, -1);

Renaming statement D.40241->rm_encoding = D.40249;

Renaming statement D.40241 = v_engine->cur_payload_map;

Renaming statement D.40154 = session->channel;

Renaming statement D.40250 = switch_channel_get_variable_dup (D.40154, "rtp_use_video_codec_fmtp", 1, -1);

Renaming statement D.40241->rm_fmtp = D.40250;

Renaming statement D.40154 = session->channel;

Renaming statement ip = switch_channel_get_variable_dup (D.40154, "local_video_ip", 1, -1);

Renaming statement D.40154 = session->channel;

Renaming statement port = switch_channel_get_variable_dup (D.40154, "local_video_port", 1, -1);

Renaming statement D.40154 = session->channel;

Renaming statement r_ip = switch_channel_get_variable_dup (D.40154, "remote_video_ip", 1, -1);

Renaming statement D.40154 = session->channel;

Renaming statement r_port = switch_channel_get_variable_dup (D.40154, "remote_video_port", 1, -1);

Renaming statement D.40154 = session->channel;

Renaming statement switch_channel_set_flag_value (D.40154, 98, 1);

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_use_video_codec_rate", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #43

Renaming statement D.40241 = v_engine->cur_payload_map;

Renaming statement D.40253 = atoi (tmp);

Renaming statement D.40254 = (long unsigned int) D.40253;

Renaming statement D.40241->rm_rate = D.40254;

Renaming statement D.40241 = v_engine->cur_payload_map;

Renaming statement D.40241 = v_engine->cur_payload_map;

Renaming statement D.40255 = D.40241->rm_rate;

Renaming statement D.40241->adv_rm_rate = D.40255;



Renaming block #44

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_use_video_codec_ptime", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #45

Renaming statement D.40241 = v_engine->cur_payload_map;

Renaming statement D.40258 = atoi (tmp);

Renaming statement D.40259 = (uint32_t) D.40258;

Renaming statement D.40241->codec_ms = D.40259;



Renaming block #46

Renaming statement D.40260 = atoi (port);

Renaming statement D.40261 = (short unsigned int) D.40260;

Renaming statement v_engine->local_sdp_port = D.40261;

Renaming statement D.40262 = v_engine->local_sdp_port;

Renaming statement v_engine->adv_sdp_port = D.40262;

Renaming statement D.40229 = r_ip != 0B;

Renaming statement D.40230 = r_port != 0B;

Renaming statement D.40231 = D.40229 && D.40230;

Renaming statement if (D.40231 != 0)



Renaming block #47

Renaming statement D.40241 = v_engine->cur_payload_map;

Renaming statement D.40241->remote_sdp_ip = r_ip;

Renaming statement D.40241 = v_engine->cur_payload_map;

Renaming statement D.40265 = atoi (r_port);

Renaming statement D.40266 = (short unsigned int) D.40265;

Renaming statement D.40241->remote_sdp_port = D.40266;



Renaming block #48

Renaming statement switch_core_media_gen_local_sdp (session, 0, 0B, 0, 0B, 1);

Renaming statement switch_core_media_set_video_codec (session, 1);

Renaming statement D.40267 = switch_core_media_activate_rtp (session);

Renaming statement if (D.40267 != 0)



Renaming block #49

Renaming statement switch_core_session_get_recovery_crypto_key (session, 0);

Renaming statement switch_core_session_get_recovery_crypto_key (session, 1);

Renaming statement D.40154 = session->channel;

Renaming statement tmp = switch_channel_get_variable_dup (D.40154, "rtp_last_audio_local_crypto_key", 1, -1);

Renaming statement if (tmp != 0B)



Renaming block #50

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40273 = a_engine->ssec[D.40272].remote_crypto_key;

Renaming statement if (D.40273 != 0B)



Renaming block #51

Renaming statement idx = atoi (tmp);

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40276 = switch_core_perform_session_strdup (session, tmp, "src/switch_core_media.c", &__func__, 8690);

Renaming statement a_engine->ssec[D.40272].local_crypto_key = D.40276;

Renaming statement D.40277 = &a_engine->ssec;

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40278 = D.40272 * 144;

Renaming statement D.40279 = D.40277 + D.40278;

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40280 = a_engine->ssec[D.40272].local_crypto_key;

Renaming statement switch_core_media_add_crypto (D.40279, D.40280, 0);

Renaming statement D.40277 = &a_engine->ssec;

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40278 = D.40272 * 144;

Renaming statement D.40279 = D.40277 + D.40278;

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40273 = a_engine->ssec[D.40272].remote_crypto_key;

Renaming statement switch_core_media_add_crypto (D.40279, D.40273, 1);

Renaming statement D.40182 = smh->session;

Renaming statement D.40281 = D.40182->channel;

Renaming statement switch_channel_set_flag_value (D.40281, 92, 1);

Renaming statement D.40282 = a_engine->rtp_session;

Renaming statement idx.2 = (uint32_t) idx;

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40284 = &a_engine->ssec[D.40272].local_raw_key;

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40285 = SUITES[D.40272].keylen;

Renaming statement D.40286 = (switch_size_t) D.40285;

Renaming statement switch_rtp_add_crypto_key (D.40282, 0, idx.2, D.40272, D.40284, D.40286);

Renaming statement D.40282 = a_engine->rtp_session;

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40287 = a_engine->ssec[D.40272].crypto_tag;

Renaming statement D.40288 = (uint32_t) D.40287;

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40289 = &a_engine->ssec[D.40272].remote_raw_key;

Renaming statement D.40272 = a_engine->crypto_type;

Renaming statement D.40285 = SUITES[D.40272].keylen;

Renaming statement D.40286 = (switch_size_t) D.40285;

Renaming statement switch_rtp_add_crypto_key (D.40282, 1, D.40288, D.40272, D.40289, D.40286);



Renaming block #52

Renaming statement D.40290 = switch_core_media_ready (session, 0);

Renaming statement if (D.40290 != 0)



Renaming block #53

Renaming statement D.40282 = a_engine->rtp_session;

Renaming statement D.40168 = smh->mparams;

Renaming statement D.40293 = D.40168->te;

Renaming statement switch_rtp_set_telephony_event (D.40282, D.40293);

Renaming statement D.40282 = a_engine->rtp_session;

Renaming statement D.40168 = smh->mparams;

Renaming statement D.40294 = D.40168->recv_te;

Renaming statement switch_rtp_set_telephony_recv_event (D.40282, D.40294);



Renaming block #54



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8557, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_4 = session_3(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.40154_5 = session_3(D)->channel;

Updating SSA information for statement ip_6 = switch_channel_get_variable_dup (D.40154_5, "local_media_ip", 1, -1);

Updating SSA information for statement D.40154_7 = session_3(D)->channel;

Updating SSA information for statement port_8 = switch_channel_get_variable_dup (D.40154_7, "local_media_port", 1, -1);

Updating SSA information for statement D.40154_9 = session_3(D)->channel;

Updating SSA information for statement D.40157_10 = switch_channel_test_flag (D.40154_9, 15);



Registering new PHI nodes in block #6



Registering new PHI nodes in block #7

Updating SSA information for statement D.40154_14 = session_3(D)->channel;

Updating SSA information for statement a_ip_15 = switch_channel_get_variable_dup (D.40154_14, "advertised_media_ip", 1, -1);

Updating SSA information for statement D.40154_16 = session_3(D)->channel;

Updating SSA information for statement r_ip_17 = switch_channel_get_variable_dup (D.40154_16, "remote_media_ip", 1, -1);

Updating SSA information for statement D.40154_18 = session_3(D)->channel;

Updating SSA information for statement r_port_19 = switch_channel_get_variable_dup (D.40154_18, "remote_media_port", 1, -1);

Updating SSA information for statement D.40162_22 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40162_23 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40154_24 = session_3(D)->channel;

Updating SSA information for statement D.40163_25 = switch_channel_get_variable_dup (D.40154_24, "rtp_use_codec_name", 1, -1);

Updating SSA information for statement D.40162_23->rm_encoding = D.40163_25;

Updating SSA information for statement D.40164_26 = D.40162_23->rm_encoding;

Updating SSA information for statement D.40162_23->iananame = D.40164_26;

Updating SSA information for statement D.40162_27 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40154_28 = session_3(D)->channel;

Updating SSA information for statement D.40165_29 = switch_channel_get_variable_dup (D.40154_28, "rtp_use_codec_fmtp", 1, -1);

Updating SSA information for statement D.40162_27->rm_fmtp = D.40165_29;

Updating SSA information for statement D.40154_30 = session_3(D)->channel;

Updating SSA information for statement tmp_31 = switch_channel_get_variable_dup (D.40154_30, "switch_r_sdp", 1, -1);



Registering new PHI nodes in block #8

Updating SSA information for statement D.40168_32 = smh_4->mparams;

Updating SSA information for statement D.40169_33 = switch_core_perform_session_strdup (session_3(D), tmp_31, "src/switch_core_media.c", &__func__, 8581);

Updating SSA information for statement D.40168_32->remote_sdp_str = D.40169_33;



Registering new PHI nodes in block #9

Updating SSA information for statement D.40154_34 = session_3(D)->channel;

Updating SSA information for statement tmp_35 = switch_channel_get_variable_dup (D.40154_34, "rtp_last_audio_codec_string", 1, -1);



Registering new PHI nodes in block #10

Updating SSA information for statement D.40154_36 = session_3(D)->channel;

Updating SSA information for statement vtmp_37 = switch_channel_get_variable_dup (D.40154_36, "rtp_last_video_codec_string", 1, -1);

Updating SSA information for statement D.40154_38 = session_3(D)->channel;



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16

Updating SSA information for statement switch_channel_set_variable_printf (D.40154_38, "rtp_use_codec_string", "%s%s%s", tmp_35, iftmp.0_1, iftmp.1_2);



Registering new PHI nodes in block #17

Updating SSA information for statement D.40154_43 = session_3(D)->channel;

Updating SSA information for statement tmp_44 = switch_channel_get_variable_dup (D.40154_43, "rtp_use_codec_string", 1, -1);



Registering new PHI nodes in block #18

Updating SSA information for statement D.40182_45 = smh_4->session;

Updating SSA information for statement tmp_codec_string_46 = switch_core_perform_session_strdup (D.40182_45, tmp_44, "src/switch_core_media.c", &__func__, 8591);

Updating SSA information for statement D.40184_48 = switch_separate_string (tmp_codec_string_46, 44, D.40183_47, 50);

Updating SSA information for statement smh_4->codec_order_last = D.40185_49;

Updating SSA information for statement D.40168_50 = smh_4->mparams;

Updating SSA information for statement D.40187_53 = smh_4->codec_order_last;

Updating SSA information for statement D.40188_54 = switch_loadable_module_get_codecs_sorted (D.40186_51, 50, D.40183_52, D.40187_53);

Updating SSA information for statement D.40168_50->num_codecs = D.40188_54;



Registering new PHI nodes in block #19

Updating SSA information for statement D.40154_55 = session_3(D)->channel;

Updating SSA information for statement tmp_56 = switch_channel_get_variable_dup (D.40154_55, "rtp_2833_send_payload", 1, -1);



Registering new PHI nodes in block #20

Updating SSA information for statement D.40168_57 = smh_4->mparams;

Updating SSA information for statement D.40191_58 = atoi (tmp_56);

Updating SSA information for statement D.40168_57->te = D.40192_59;



Registering new PHI nodes in block #21

Updating SSA information for statement D.40154_60 = session_3(D)->channel;

Updating SSA information for statement tmp_61 = switch_channel_get_variable_dup (D.40154_60, "rtp_2833_recv_payload", 1, -1);



Registering new PHI nodes in block #22

Updating SSA information for statement D.40168_62 = smh_4->mparams;

Updating SSA information for statement D.40195_63 = atoi (tmp_61);

Updating SSA information for statement D.40168_62->recv_te = D.40196_64;



Registering new PHI nodes in block #23

Updating SSA information for statement D.40154_65 = session_3(D)->channel;

Updating SSA information for statement tmp_66 = switch_channel_get_variable_dup (D.40154_65, "rtp_use_codec_rate", 1, -1);



Registering new PHI nodes in block #24

Updating SSA information for statement D.40162_67 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40199_68 = atoi (tmp_66);

Updating SSA information for statement D.40162_67->rm_rate = D.40200_69;

Updating SSA information for statement D.40162_70 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40162_71 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40201_72 = D.40162_71->rm_rate;

Updating SSA information for statement D.40162_71->adv_rm_rate = D.40201_72;



Registering new PHI nodes in block #25

Updating SSA information for statement D.40154_73 = session_3(D)->channel;

Updating SSA information for statement tmp_74 = switch_channel_get_variable_dup (D.40154_73, "rtp_use_codec_ptime", 1, -1);



Registering new PHI nodes in block #26

Updating SSA information for statement D.40162_75 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40204_76 = atoi (tmp_74);

Updating SSA information for statement D.40162_75->codec_ms = D.40205_77;



Registering new PHI nodes in block #27

Updating SSA information for statement D.40154_78 = session_3(D)->channel;

Updating SSA information for statement tmp_79 = switch_channel_get_variable_dup (D.40154_78, "rtp_use_pt", 1, -1);



Registering new PHI nodes in block #28

Updating SSA information for statement D.40162_80 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40162_81 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40208_82 = atoi (tmp_79);

Updating SSA information for statement D.40162_81->agreed_pt = D.40209_83;

Updating SSA information for statement D.40210_84 = D.40162_81->agreed_pt;

Updating SSA information for statement D.40162_81->pt = D.40210_84;



Registering new PHI nodes in block #29

Updating SSA information for statement D.40154_85 = session_3(D)->channel;

Updating SSA information for statement tmp_86 = switch_channel_get_variable_dup (D.40154_85, "rtp_audio_recv_pt", 1, -1);



Registering new PHI nodes in block #30

Updating SSA information for statement D.40162_87 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40213_88 = atoi (tmp_86);

Updating SSA information for statement D.40162_87->recv_pt = D.40214_89;



Registering new PHI nodes in block #31

Updating SSA information for statement D.40168_90 = smh_4->mparams;

Updating SSA information for statement D.40215_91 = D.40168_90->codec_flags;

Updating SSA information for statement switch_core_media_set_codec (session_3(D), 1, D.40215_91);

Updating SSA information for statement D.40168_92 = smh_4->mparams;

Updating SSA information for statement D.40168_92->extrtpip = ip_6;

Updating SSA information for statement D.40216_93 = D.40168_92->extrtpip;

Updating SSA information for statement a_engine_20->adv_sdp_ip = D.40216_93;

Updating SSA information for statement D.40217_94 = atoi (port_8);

Updating SSA information for statement a_engine_20->local_sdp_port = D.40218_95;

Updating SSA information for statement D.40219_96 = a_engine_20->local_sdp_port;

Updating SSA information for statement a_engine_20->adv_sdp_port = D.40219_96;

Updating SSA information for statement D.40220_97 = _zstr (ip_6);



Registering new PHI nodes in block #32

Updating SSA information for statement D.40223_98 = switch_core_perform_session_strdup (session_3(D), ip_6, "src/switch_core_media.c", &__func__, 8627);

Updating SSA information for statement a_engine_20->local_sdp_ip = D.40223_98;

Updating SSA information for statement D.40168_99 = smh_4->mparams;

Updating SSA information for statement D.40224_100 = a_engine_20->local_sdp_ip;

Updating SSA information for statement D.40168_99->rtpip = D.40224_100;



Registering new PHI nodes in block #33

Updating SSA information for statement D.40225_101 = _zstr (a_ip_15);



Registering new PHI nodes in block #34

Updating SSA information for statement D.40228_102 = switch_core_perform_session_strdup (session_3(D), a_ip_15, "src/switch_core_media.c", &__func__, 8632);

Updating SSA information for statement a_engine_20->adv_sdp_ip = D.40228_102;



Registering new PHI nodes in block #35



Registering new PHI nodes in block #36

Updating SSA information for statement D.40162_106 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40162_106->remote_sdp_ip = r_ip_17;

Updating SSA information for statement D.40162_107 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40234_108 = atoi (r_port_19);

Updating SSA information for statement D.40162_107->remote_sdp_port = D.40235_109;



Registering new PHI nodes in block #37

Updating SSA information for statement D.40154_110 = session_3(D)->channel;

Updating SSA information for statement D.40236_111 = switch_channel_test_flag (D.40154_110, 23);



Registering new PHI nodes in block #38

Updating SSA information for statement D.40154_112 = session_3(D)->channel;

Updating SSA information for statement tmp_113 = switch_channel_get_variable_dup (D.40154_112, "rtp_use_video_pt", 1, -1);



Registering new PHI nodes in block #39

Updating SSA information for statement D.40241_114 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40241_115 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40242_116 = atoi (tmp_113);

Updating SSA information for statement D.40241_115->agreed_pt = D.40243_117;

Updating SSA information for statement D.40244_118 = D.40241_115->agreed_pt;

Updating SSA information for statement D.40241_115->pt = D.40244_118;



Registering new PHI nodes in block #40

Updating SSA information for statement D.40154_119 = session_3(D)->channel;

Updating SSA information for statement tmp_120 = switch_channel_get_variable_dup (D.40154_119, "rtp_video_recv_pt", 1, -1);



Registering new PHI nodes in block #41

Updating SSA information for statement D.40241_121 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40247_122 = atoi (tmp_120);

Updating SSA information for statement D.40241_121->recv_pt = D.40248_123;



Registering new PHI nodes in block #42

Updating SSA information for statement D.40241_124 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40154_125 = session_3(D)->channel;

Updating SSA information for statement D.40249_126 = switch_channel_get_variable_dup (D.40154_125, "rtp_use_video_codec_name", 1, -1);

Updating SSA information for statement D.40241_124->rm_encoding = D.40249_126;

Updating SSA information for statement D.40241_127 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40154_128 = session_3(D)->channel;

Updating SSA information for statement D.40250_129 = switch_channel_get_variable_dup (D.40154_128, "rtp_use_video_codec_fmtp", 1, -1);

Updating SSA information for statement D.40241_127->rm_fmtp = D.40250_129;

Updating SSA information for statement D.40154_130 = session_3(D)->channel;

Updating SSA information for statement ip_131 = switch_channel_get_variable_dup (D.40154_130, "local_video_ip", 1, -1);

Updating SSA information for statement D.40154_132 = session_3(D)->channel;

Updating SSA information for statement port_133 = switch_channel_get_variable_dup (D.40154_132, "local_video_port", 1, -1);

Updating SSA information for statement D.40154_134 = session_3(D)->channel;

Updating SSA information for statement r_ip_135 = switch_channel_get_variable_dup (D.40154_134, "remote_video_ip", 1, -1);

Updating SSA information for statement D.40154_136 = session_3(D)->channel;

Updating SSA information for statement r_port_137 = switch_channel_get_variable_dup (D.40154_136, "remote_video_port", 1, -1);

Updating SSA information for statement D.40154_138 = session_3(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40154_138, 98, 1);

Updating SSA information for statement D.40154_139 = session_3(D)->channel;

Updating SSA information for statement tmp_140 = switch_channel_get_variable_dup (D.40154_139, "rtp_use_video_codec_rate", 1, -1);



Registering new PHI nodes in block #43

Updating SSA information for statement D.40241_141 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40253_142 = atoi (tmp_140);

Updating SSA information for statement D.40241_141->rm_rate = D.40254_143;

Updating SSA information for statement D.40241_144 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40241_145 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40255_146 = D.40241_145->rm_rate;

Updating SSA information for statement D.40241_145->adv_rm_rate = D.40255_146;



Registering new PHI nodes in block #44

Updating SSA information for statement D.40154_147 = session_3(D)->channel;

Updating SSA information for statement tmp_148 = switch_channel_get_variable_dup (D.40154_147, "rtp_use_video_codec_ptime", 1, -1);



Registering new PHI nodes in block #45

Updating SSA information for statement D.40241_149 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40258_150 = atoi (tmp_148);

Updating SSA information for statement D.40241_149->codec_ms = D.40259_151;



Registering new PHI nodes in block #46

Updating SSA information for statement D.40260_152 = atoi (port_133);

Updating SSA information for statement v_engine_21->local_sdp_port = D.40261_153;

Updating SSA information for statement D.40262_154 = v_engine_21->local_sdp_port;

Updating SSA information for statement v_engine_21->adv_sdp_port = D.40262_154;



Registering new PHI nodes in block #47

Updating SSA information for statement D.40241_158 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40241_158->remote_sdp_ip = r_ip_135;

Updating SSA information for statement D.40241_159 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40265_160 = atoi (r_port_137);

Updating SSA information for statement D.40241_159->remote_sdp_port = D.40266_161;



Registering new PHI nodes in block #48

Updating SSA information for statement switch_core_media_gen_local_sdp (session_3(D), 0, 0B, 0, 0B, 1);

Updating SSA information for statement switch_core_media_set_video_codec (session_3(D), 1);

Updating SSA information for statement D.40267_162 = switch_core_media_activate_rtp (session_3(D));



Registering new PHI nodes in block #49

Updating SSA information for statement switch_core_session_get_recovery_crypto_key (session_3(D), 0);

Updating SSA information for statement switch_core_session_get_recovery_crypto_key (session_3(D), 1);

Updating SSA information for statement D.40154_163 = session_3(D)->channel;

Updating SSA information for statement tmp_164 = switch_channel_get_variable_dup (D.40154_163, "rtp_last_audio_local_crypto_key", 1, -1);



Registering new PHI nodes in block #50

Updating SSA information for statement D.40272_165 = a_engine_20->crypto_type;

Updating SSA information for statement D.40273_166 = a_engine_20->ssec[D.40272_165].remote_crypto_key;



Registering new PHI nodes in block #51

Updating SSA information for statement idx_167 = atoi (tmp_164);

Updating SSA information for statement D.40272_168 = a_engine_20->crypto_type;

Updating SSA information for statement D.40276_169 = switch_core_perform_session_strdup (session_3(D), tmp_164, "src/switch_core_media.c", &__func__, 8690);

Updating SSA information for statement a_engine_20->ssec[D.40272_168].local_crypto_key = D.40276_169;

Updating SSA information for statement D.40272_171 = a_engine_20->crypto_type;

Updating SSA information for statement D.40272_174 = a_engine_20->crypto_type;

Updating SSA information for statement D.40280_175 = a_engine_20->ssec[D.40272_174].local_crypto_key;

Updating SSA information for statement switch_core_media_add_crypto (D.40279_173, D.40280_175, 0);

Updating SSA information for statement D.40272_177 = a_engine_20->crypto_type;

Updating SSA information for statement D.40272_180 = a_engine_20->crypto_type;

Updating SSA information for statement D.40273_181 = a_engine_20->ssec[D.40272_180].remote_crypto_key;

Updating SSA information for statement switch_core_media_add_crypto (D.40279_179, D.40273_181, 1);

Updating SSA information for statement D.40182_182 = smh_4->session;

Updating SSA information for statement D.40281_183 = D.40182_182->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40281_183, 92, 1);

Updating SSA information for statement D.40282_184 = a_engine_20->rtp_session;

Updating SSA information for statement D.40272_186 = a_engine_20->crypto_type;

Updating SSA information for statement D.40272_187 = a_engine_20->crypto_type;

Updating SSA information for statement D.40272_189 = a_engine_20->crypto_type;

Updating SSA information for statement D.40285_190 = SUITES[D.40272_189].keylen;

Updating SSA information for statement switch_rtp_add_crypto_key (D.40282_184, 0, idx.2_185, D.40272_189, D.40284_188, D.40286_191);

Updating SSA information for statement D.40282_192 = a_engine_20->rtp_session;

Updating SSA information for statement D.40272_193 = a_engine_20->crypto_type;

Updating SSA information for statement D.40287_194 = a_engine_20->ssec[D.40272_193].crypto_tag;

Updating SSA information for statement D.40272_196 = a_engine_20->crypto_type;

Updating SSA information for statement D.40272_197 = a_engine_20->crypto_type;

Updating SSA information for statement D.40272_199 = a_engine_20->crypto_type;

Updating SSA information for statement D.40285_200 = SUITES[D.40272_199].keylen;

Updating SSA information for statement switch_rtp_add_crypto_key (D.40282_192, 1, D.40288_195, D.40272_199, D.40289_198, D.40286_201);



Registering new PHI nodes in block #52

Updating SSA information for statement D.40290_202 = switch_core_media_ready (session_3(D), 0);



Registering new PHI nodes in block #53

Updating SSA information for statement D.40282_203 = a_engine_20->rtp_session;

Updating SSA information for statement D.40168_204 = smh_4->mparams;

Updating SSA information for statement D.40293_205 = D.40168_204->te;

Updating SSA information for statement switch_rtp_set_telephony_event (D.40282_203, D.40293_205);

Updating SSA information for statement D.40282_206 = a_engine_20->rtp_session;

Updating SSA information for statement D.40168_207 = smh_4->mparams;

Updating SSA information for statement D.40294_208 = D.40168_207->recv_te;

Updating SSA information for statement switch_rtp_set_telephony_recv_event (D.40282_206, D.40294_208);



Registering new PHI nodes in block #54



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 55
Number of blocks to update: 54 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 


Scope blocks after cleanups:

{ Scope block #0 
  const char * ip;
  const char * port;
  const char * a_ip;
  const char * r_ip;
  const char * r_port;
  const char * tmp;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_recover_session";
  static const char __func__[34] = "switch_core_media_recover_session";

  { Scope block #0 
    const char * vtmp;

  }

  { Scope block #0 
    char * tmp_codec_string;

  }

  { Scope block #0 
    int idx;

  }

}
switch_core_media_recover_session (struct switch_core_session_t * session)
{
  int idx;
  char * tmp_codec_string;
  const char * vtmp;
  static const char __func__[34] = "switch_core_media_recover_session";
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_recover_session";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  const char * tmp;
  const char * r_port;
  const char * r_ip;
  const char * a_ip;
  const char * port;
  const char * ip;
  switch_payload_t D.40294;
  switch_payload_t D.40293;
  uint8_t D.40290;
  unsigned char[64] * D.40289;
  uint32_t D.40288;
  int D.40287;
  switch_size_t D.40286;
  int D.40285;
  unsigned char[64] * D.40284;
  uint32_t idx.2;
  struct switch_rtp_t * D.40282;
  struct switch_channel_t * D.40281;
  char * D.40280;
  struct switch_secure_settings_t * D.40279;
  unsigned int D.40278;
  struct switch_secure_settings_t[10] * D.40277;
  char * D.40276;
  char * D.40273;
  switch_rtp_crypto_key_type_t D.40272;
  switch_status_t D.40267;
  short unsigned int D.40266;
  int D.40265;
  switch_port_t D.40262;
  short unsigned int D.40261;
  int D.40260;
  uint32_t D.40259;
  int D.40258;
  long unsigned int D.40255;
  long unsigned int D.40254;
  int D.40253;
  const char * D.40250;
  const char * D.40249;
  unsigned char D.40248;
  int D.40247;
  switch_payload_t D.40244;
  unsigned char D.40243;
  int D.40242;
  struct payload_map_t * D.40241;
  uint32_t D.40236;
  short unsigned int D.40235;
  int D.40234;
  _Bool D.40231;
  _Bool D.40230;
  _Bool D.40229;
  char * D.40228;
  int D.40225;
  char * D.40224;
  char * D.40223;
  int D.40220;
  switch_port_t D.40219;
  short unsigned int D.40218;
  int D.40217;
  char * D.40216;
  uint32_t D.40215;
  unsigned char D.40214;
  int D.40213;
  switch_payload_t D.40210;
  unsigned char D.40209;
  int D.40208;
  uint32_t D.40205;
  int D.40204;
  long unsigned int D.40201;
  long unsigned int D.40200;
  int D.40199;
  unsigned char D.40196;
  int D.40195;
  unsigned char D.40192;
  int D.40191;
  int D.40188;
  int D.40187;
  const struct switch_codec_implementation_t *[50] * D.40186;
  int D.40185;
  unsigned int D.40184;
  char *[50] * D.40183;
  struct switch_core_session_t * D.40182;
  const char * iftmp.1;
  char * iftmp.0;
  char * D.40169;
  struct switch_core_media_params_t * D.40168;
  const char * D.40165;
  char * D.40164;
  const char * D.40163;
  struct payload_map_t * D.40162;
  _Bool D.40161;
  _Bool D.40160;
  _Bool D.40159;
  uint32_t D.40157;
  struct switch_channel_t * D.40154;

<bb 2>:
  if (session_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8557, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_4 = session_3(D)->media_handle;
  # DEBUG smh => smh_4
  if (smh_4 == 0B)
    goto <bb 54>;
  else
    goto <bb 5>;

<bb 5>:
  D.40154_5 = session_3(D)->channel;
  ip_6 = switch_channel_get_variable_dup (D.40154_5, "local_media_ip", 1, -1);
  # DEBUG ip => ip_6
  D.40154_7 = session_3(D)->channel;
  port_8 = switch_channel_get_variable_dup (D.40154_7, "local_media_port", 1, -1);
  # DEBUG port => port_8
  D.40154_9 = session_3(D)->channel;
  D.40157_10 = switch_channel_test_flag (D.40154_9, 15);
  if (D.40157_10 != 0)
    goto <bb 54>;
  else
    goto <bb 6>;

<bb 6>:
  D.40159_11 = ip_6 == 0B;
  D.40160_12 = port_8 == 0B;
  D.40161_13 = D.40159_11 || D.40160_12;
  if (D.40161_13 != 0)
    goto <bb 54>;
  else
    goto <bb 7>;

<bb 7>:
  D.40154_14 = session_3(D)->channel;
  a_ip_15 = switch_channel_get_variable_dup (D.40154_14, "advertised_media_ip", 1, -1);
  # DEBUG a_ip => a_ip_15
  D.40154_16 = session_3(D)->channel;
  r_ip_17 = switch_channel_get_variable_dup (D.40154_16, "remote_media_ip", 1, -1);
  # DEBUG r_ip => r_ip_17
  D.40154_18 = session_3(D)->channel;
  r_port_19 = switch_channel_get_variable_dup (D.40154_18, "remote_media_port", 1, -1);
  # DEBUG r_port => r_port_19
  a_engine_20 = &smh_4->engines;
  # DEBUG a_engine => a_engine_20
  v_engine_21 = &smh_4->engines[1];
  # DEBUG v_engine => v_engine_21
  D.40162_22 = a_engine_20->cur_payload_map;
  D.40162_23 = a_engine_20->cur_payload_map;
  D.40154_24 = session_3(D)->channel;
  D.40163_25 = switch_channel_get_variable_dup (D.40154_24, "rtp_use_codec_name", 1, -1);
  D.40162_23->rm_encoding = D.40163_25;
  D.40164_26 = D.40162_23->rm_encoding;
  D.40162_23->iananame = D.40164_26;
  D.40162_27 = a_engine_20->cur_payload_map;
  D.40154_28 = session_3(D)->channel;
  D.40165_29 = switch_channel_get_variable_dup (D.40154_28, "rtp_use_codec_fmtp", 1, -1);
  D.40162_27->rm_fmtp = D.40165_29;
  D.40154_30 = session_3(D)->channel;
  tmp_31 = switch_channel_get_variable_dup (D.40154_30, "switch_r_sdp", 1, -1);
  # DEBUG tmp => tmp_31
  if (tmp_31 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.40168_32 = smh_4->mparams;
  D.40169_33 = switch_core_perform_session_strdup (session_3(D), tmp_31, "src/switch_core_media.c", &__func__, 8581);
  D.40168_32->remote_sdp_str = D.40169_33;

<bb 9>:
  D.40154_34 = session_3(D)->channel;
  tmp_35 = switch_channel_get_variable_dup (D.40154_34, "rtp_last_audio_codec_string", 1, -1);
  # DEBUG tmp => tmp_35
  if (tmp_35 != 0B)
    goto <bb 10>;
  else
    goto <bb 17>;

<bb 10>:
  D.40154_36 = session_3(D)->channel;
  vtmp_37 = switch_channel_get_variable_dup (D.40154_36, "rtp_last_video_codec_string", 1, -1);
  # DEBUG vtmp => vtmp_37
  D.40154_38 = session_3(D)->channel;
  if (vtmp_37 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  iftmp.0_39 = ",";
  goto <bb 13>;

<bb 12>:
  iftmp.0_40 = "";

<bb 13>:
  # iftmp.0_1 = PHI <iftmp.0_39(11), iftmp.0_40(12)>
  if (vtmp_37 != 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  iftmp.1_41 = vtmp_37;
  goto <bb 16>;

<bb 15>:
  iftmp.1_42 = "";

<bb 16>:
  # iftmp.1_2 = PHI <iftmp.1_41(14), iftmp.1_42(15)>
  switch_channel_set_variable_printf (D.40154_38, "rtp_use_codec_string", "%s%s%s", tmp_35, iftmp.0_1, iftmp.1_2);

<bb 17>:
  D.40154_43 = session_3(D)->channel;
  tmp_44 = switch_channel_get_variable_dup (D.40154_43, "rtp_use_codec_string", 1, -1);
  # DEBUG tmp => tmp_44
  if (tmp_44 != 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.40182_45 = smh_4->session;
  tmp_codec_string_46 = switch_core_perform_session_strdup (D.40182_45, tmp_44, "src/switch_core_media.c", &__func__, 8591);
  # DEBUG tmp_codec_string => tmp_codec_string_46
  D.40183_47 = &smh_4->codec_order;
  D.40184_48 = switch_separate_string (tmp_codec_string_46, 44, D.40183_47, 50);
  D.40185_49 = (int) D.40184_48;
  smh_4->codec_order_last = D.40185_49;
  D.40168_50 = smh_4->mparams;
  D.40186_51 = &smh_4->codecs;
  D.40183_52 = &smh_4->codec_order;
  D.40187_53 = smh_4->codec_order_last;
  D.40188_54 = switch_loadable_module_get_codecs_sorted (D.40186_51, 50, D.40183_52, D.40187_53);
  D.40168_50->num_codecs = D.40188_54;

<bb 19>:
  D.40154_55 = session_3(D)->channel;
  tmp_56 = switch_channel_get_variable_dup (D.40154_55, "rtp_2833_send_payload", 1, -1);
  # DEBUG tmp => tmp_56
  if (tmp_56 != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.40168_57 = smh_4->mparams;
  D.40191_58 = atoi (tmp_56);
  D.40192_59 = (unsigned char) D.40191_58;
  D.40168_57->te = D.40192_59;

<bb 21>:
  D.40154_60 = session_3(D)->channel;
  tmp_61 = switch_channel_get_variable_dup (D.40154_60, "rtp_2833_recv_payload", 1, -1);
  # DEBUG tmp => tmp_61
  if (tmp_61 != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.40168_62 = smh_4->mparams;
  D.40195_63 = atoi (tmp_61);
  D.40196_64 = (unsigned char) D.40195_63;
  D.40168_62->recv_te = D.40196_64;

<bb 23>:
  D.40154_65 = session_3(D)->channel;
  tmp_66 = switch_channel_get_variable_dup (D.40154_65, "rtp_use_codec_rate", 1, -1);
  # DEBUG tmp => tmp_66
  if (tmp_66 != 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  D.40162_67 = a_engine_20->cur_payload_map;
  D.40199_68 = atoi (tmp_66);
  D.40200_69 = (long unsigned int) D.40199_68;
  D.40162_67->rm_rate = D.40200_69;
  D.40162_70 = a_engine_20->cur_payload_map;
  D.40162_71 = a_engine_20->cur_payload_map;
  D.40201_72 = D.40162_71->rm_rate;
  D.40162_71->adv_rm_rate = D.40201_72;

<bb 25>:
  D.40154_73 = session_3(D)->channel;
  tmp_74 = switch_channel_get_variable_dup (D.40154_73, "rtp_use_codec_ptime", 1, -1);
  # DEBUG tmp => tmp_74
  if (tmp_74 != 0B)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  D.40162_75 = a_engine_20->cur_payload_map;
  D.40204_76 = atoi (tmp_74);
  D.40205_77 = (uint32_t) D.40204_76;
  D.40162_75->codec_ms = D.40205_77;

<bb 27>:
  D.40154_78 = session_3(D)->channel;
  tmp_79 = switch_channel_get_variable_dup (D.40154_78, "rtp_use_pt", 1, -1);
  # DEBUG tmp => tmp_79
  if (tmp_79 != 0B)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  D.40162_80 = a_engine_20->cur_payload_map;
  D.40162_81 = a_engine_20->cur_payload_map;
  D.40208_82 = atoi (tmp_79);
  D.40209_83 = (unsigned char) D.40208_82;
  D.40162_81->agreed_pt = D.40209_83;
  D.40210_84 = D.40162_81->agreed_pt;
  D.40162_81->pt = D.40210_84;

<bb 29>:
  D.40154_85 = session_3(D)->channel;
  tmp_86 = switch_channel_get_variable_dup (D.40154_85, "rtp_audio_recv_pt", 1, -1);
  # DEBUG tmp => tmp_86
  if (tmp_86 != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  D.40162_87 = a_engine_20->cur_payload_map;
  D.40213_88 = atoi (tmp_86);
  D.40214_89 = (unsigned char) D.40213_88;
  D.40162_87->recv_pt = D.40214_89;

<bb 31>:
  D.40168_90 = smh_4->mparams;
  D.40215_91 = D.40168_90->codec_flags;
  switch_core_media_set_codec (session_3(D), 1, D.40215_91);
  D.40168_92 = smh_4->mparams;
  D.40168_92->extrtpip = ip_6;
  D.40216_93 = D.40168_92->extrtpip;
  a_engine_20->adv_sdp_ip = D.40216_93;
  D.40217_94 = atoi (port_8);
  D.40218_95 = (short unsigned int) D.40217_94;
  a_engine_20->local_sdp_port = D.40218_95;
  D.40219_96 = a_engine_20->local_sdp_port;
  a_engine_20->adv_sdp_port = D.40219_96;
  D.40220_97 = _zstr (ip_6);
  if (D.40220_97 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;

<bb 32>:
  D.40223_98 = switch_core_perform_session_strdup (session_3(D), ip_6, "src/switch_core_media.c", &__func__, 8627);
  a_engine_20->local_sdp_ip = D.40223_98;
  D.40168_99 = smh_4->mparams;
  D.40224_100 = a_engine_20->local_sdp_ip;
  D.40168_99->rtpip = D.40224_100;

<bb 33>:
  D.40225_101 = _zstr (a_ip_15);
  if (D.40225_101 == 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  D.40228_102 = switch_core_perform_session_strdup (session_3(D), a_ip_15, "src/switch_core_media.c", &__func__, 8632);
  a_engine_20->adv_sdp_ip = D.40228_102;

<bb 35>:
  D.40229_103 = r_ip_17 != 0B;
  D.40230_104 = r_port_19 != 0B;
  D.40231_105 = D.40229_103 && D.40230_104;
  if (D.40231_105 != 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  D.40162_106 = a_engine_20->cur_payload_map;
  D.40162_106->remote_sdp_ip = r_ip_17;
  D.40162_107 = a_engine_20->cur_payload_map;
  D.40234_108 = atoi (r_port_19);
  D.40235_109 = (short unsigned int) D.40234_108;
  D.40162_107->remote_sdp_port = D.40235_109;

<bb 37>:
  D.40154_110 = session_3(D)->channel;
  D.40236_111 = switch_channel_test_flag (D.40154_110, 23);
  if (D.40236_111 != 0)
    goto <bb 38>;
  else
    goto <bb 48>;

<bb 38>:
  D.40154_112 = session_3(D)->channel;
  tmp_113 = switch_channel_get_variable_dup (D.40154_112, "rtp_use_video_pt", 1, -1);
  # DEBUG tmp => tmp_113
  if (tmp_113 != 0B)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.40241_114 = v_engine_21->cur_payload_map;
  D.40241_115 = v_engine_21->cur_payload_map;
  D.40242_116 = atoi (tmp_113);
  D.40243_117 = (unsigned char) D.40242_116;
  D.40241_115->agreed_pt = D.40243_117;
  D.40244_118 = D.40241_115->agreed_pt;
  D.40241_115->pt = D.40244_118;

<bb 40>:
  D.40154_119 = session_3(D)->channel;
  tmp_120 = switch_channel_get_variable_dup (D.40154_119, "rtp_video_recv_pt", 1, -1);
  # DEBUG tmp => tmp_120
  if (tmp_120 != 0B)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.40241_121 = v_engine_21->cur_payload_map;
  D.40247_122 = atoi (tmp_120);
  D.40248_123 = (unsigned char) D.40247_122;
  D.40241_121->recv_pt = D.40248_123;

<bb 42>:
  D.40241_124 = v_engine_21->cur_payload_map;
  D.40154_125 = session_3(D)->channel;
  D.40249_126 = switch_channel_get_variable_dup (D.40154_125, "rtp_use_video_codec_name", 1, -1);
  D.40241_124->rm_encoding = D.40249_126;
  D.40241_127 = v_engine_21->cur_payload_map;
  D.40154_128 = session_3(D)->channel;
  D.40250_129 = switch_channel_get_variable_dup (D.40154_128, "rtp_use_video_codec_fmtp", 1, -1);
  D.40241_127->rm_fmtp = D.40250_129;
  D.40154_130 = session_3(D)->channel;
  ip_131 = switch_channel_get_variable_dup (D.40154_130, "local_video_ip", 1, -1);
  # DEBUG ip => ip_131
  D.40154_132 = session_3(D)->channel;
  port_133 = switch_channel_get_variable_dup (D.40154_132, "local_video_port", 1, -1);
  # DEBUG port => port_133
  D.40154_134 = session_3(D)->channel;
  r_ip_135 = switch_channel_get_variable_dup (D.40154_134, "remote_video_ip", 1, -1);
  # DEBUG r_ip => r_ip_135
  D.40154_136 = session_3(D)->channel;
  r_port_137 = switch_channel_get_variable_dup (D.40154_136, "remote_video_port", 1, -1);
  # DEBUG r_port => r_port_137
  D.40154_138 = session_3(D)->channel;
  switch_channel_set_flag_value (D.40154_138, 98, 1);
  D.40154_139 = session_3(D)->channel;
  tmp_140 = switch_channel_get_variable_dup (D.40154_139, "rtp_use_video_codec_rate", 1, -1);
  # DEBUG tmp => tmp_140
  if (tmp_140 != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  D.40241_141 = v_engine_21->cur_payload_map;
  D.40253_142 = atoi (tmp_140);
  D.40254_143 = (long unsigned int) D.40253_142;
  D.40241_141->rm_rate = D.40254_143;
  D.40241_144 = v_engine_21->cur_payload_map;
  D.40241_145 = v_engine_21->cur_payload_map;
  D.40255_146 = D.40241_145->rm_rate;
  D.40241_145->adv_rm_rate = D.40255_146;

<bb 44>:
  D.40154_147 = session_3(D)->channel;
  tmp_148 = switch_channel_get_variable_dup (D.40154_147, "rtp_use_video_codec_ptime", 1, -1);
  # DEBUG tmp => tmp_148
  if (tmp_148 != 0B)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  D.40241_149 = v_engine_21->cur_payload_map;
  D.40258_150 = atoi (tmp_148);
  D.40259_151 = (uint32_t) D.40258_150;
  D.40241_149->codec_ms = D.40259_151;

<bb 46>:
  D.40260_152 = atoi (port_133);
  D.40261_153 = (short unsigned int) D.40260_152;
  v_engine_21->local_sdp_port = D.40261_153;
  D.40262_154 = v_engine_21->local_sdp_port;
  v_engine_21->adv_sdp_port = D.40262_154;
  D.40229_155 = r_ip_135 != 0B;
  D.40230_156 = r_port_137 != 0B;
  D.40231_157 = D.40229_155 && D.40230_156;
  if (D.40231_157 != 0)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.40241_158 = v_engine_21->cur_payload_map;
  D.40241_158->remote_sdp_ip = r_ip_135;
  D.40241_159 = v_engine_21->cur_payload_map;
  D.40265_160 = atoi (r_port_137);
  D.40266_161 = (short unsigned int) D.40265_160;
  D.40241_159->remote_sdp_port = D.40266_161;

<bb 48>:
  switch_core_media_gen_local_sdp (session_3(D), 0, 0B, 0, 0B, 1);
  switch_core_media_set_video_codec (session_3(D), 1);
  D.40267_162 = switch_core_media_activate_rtp (session_3(D));
  if (D.40267_162 != 0)
    goto <bb 54>;
  else
    goto <bb 49>;

<bb 49>:
  switch_core_session_get_recovery_crypto_key (session_3(D), 0);
  switch_core_session_get_recovery_crypto_key (session_3(D), 1);
  D.40154_163 = session_3(D)->channel;
  tmp_164 = switch_channel_get_variable_dup (D.40154_163, "rtp_last_audio_local_crypto_key", 1, -1);
  # DEBUG tmp => tmp_164
  if (tmp_164 != 0B)
    goto <bb 50>;
  else
    goto <bb 52>;

<bb 50>:
  D.40272_165 = a_engine_20->crypto_type;
  D.40273_166 = a_engine_20->ssec[D.40272_165].remote_crypto_key;
  if (D.40273_166 != 0B)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  idx_167 = atoi (tmp_164);
  # DEBUG idx => idx_167
  D.40272_168 = a_engine_20->crypto_type;
  D.40276_169 = switch_core_perform_session_strdup (session_3(D), tmp_164, "src/switch_core_media.c", &__func__, 8690);
  a_engine_20->ssec[D.40272_168].local_crypto_key = D.40276_169;
  D.40277_170 = &a_engine_20->ssec;
  D.40272_171 = a_engine_20->crypto_type;
  D.40278_172 = D.40272_171 * 144;
  D.40279_173 = D.40277_170 + D.40278_172;
  D.40272_174 = a_engine_20->crypto_type;
  D.40280_175 = a_engine_20->ssec[D.40272_174].local_crypto_key;
  switch_core_media_add_crypto (D.40279_173, D.40280_175, 0);
  D.40277_176 = &a_engine_20->ssec;
  D.40272_177 = a_engine_20->crypto_type;
  D.40278_178 = D.40272_177 * 144;
  D.40279_179 = D.40277_176 + D.40278_178;
  D.40272_180 = a_engine_20->crypto_type;
  D.40273_181 = a_engine_20->ssec[D.40272_180].remote_crypto_key;
  switch_core_media_add_crypto (D.40279_179, D.40273_181, 1);
  D.40182_182 = smh_4->session;
  D.40281_183 = D.40182_182->channel;
  switch_channel_set_flag_value (D.40281_183, 92, 1);
  D.40282_184 = a_engine_20->rtp_session;
  idx.2_185 = (uint32_t) idx_167;
  D.40272_186 = a_engine_20->crypto_type;
  D.40272_187 = a_engine_20->crypto_type;
  D.40284_188 = &a_engine_20->ssec[D.40272_187].local_raw_key;
  D.40272_189 = a_engine_20->crypto_type;
  D.40285_190 = SUITES[D.40272_189].keylen;
  D.40286_191 = (switch_size_t) D.40285_190;
  switch_rtp_add_crypto_key (D.40282_184, 0, idx.2_185, D.40272_189, D.40284_188, D.40286_191);
  D.40282_192 = a_engine_20->rtp_session;
  D.40272_193 = a_engine_20->crypto_type;
  D.40287_194 = a_engine_20->ssec[D.40272_193].crypto_tag;
  D.40288_195 = (uint32_t) D.40287_194;
  D.40272_196 = a_engine_20->crypto_type;
  D.40272_197 = a_engine_20->crypto_type;
  D.40289_198 = &a_engine_20->ssec[D.40272_197].remote_raw_key;
  D.40272_199 = a_engine_20->crypto_type;
  D.40285_200 = SUITES[D.40272_199].keylen;
  D.40286_201 = (switch_size_t) D.40285_200;
  switch_rtp_add_crypto_key (D.40282_192, 1, D.40288_195, D.40272_199, D.40289_198, D.40286_201);

<bb 52>:
  D.40290_202 = switch_core_media_ready (session_3(D), 0);
  if (D.40290_202 != 0)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  D.40282_203 = a_engine_20->rtp_session;
  D.40168_204 = smh_4->mparams;
  D.40293_205 = D.40168_204->te;
  switch_rtp_set_telephony_event (D.40282_203, D.40293_205);
  D.40282_206 = a_engine_20->rtp_session;
  D.40168_207 = smh_4->mparams;
  D.40294_208 = D.40168_207->recv_te;
  switch_rtp_set_telephony_recv_event (D.40282_206, D.40294_208);

<bb 54>:
  return;

}



;; Function switch_core_media_init (switch_core_media_init)



Renaming block #0



Renaming block #2



Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement switch_core_gen_certs ("dtls-srtp.pem");



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 3
Number of blocks to update: 2 ( 67%)

Affected blocks: 0 2 


Scope blocks after cleanups:

{ Scope block #0 

}
switch_core_media_init ()
{
<bb 2>:
  switch_core_gen_certs ("dtls-srtp.pem");
  return;

}



;; Function switch_core_media_deinit (switch_core_media_deinit)



Renaming block #0



Renaming block #2

Scope blocks after cleanups:

{ Scope block #0 

}
switch_core_media_deinit ()
{
<bb 2>:
  return;

}


