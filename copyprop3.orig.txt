
;; Function switch_core_media_negotiate_sdp (switch_core_media_negotiate_sdp)

Immediate_uses: 

match_1 : -->2 uses.
D.44950_663 = (_Bool) match_1;
match_2 = PHI <match_1(252), 1(253), 1(254), 1(255)>
# DEBUG match => match_1

match_2 : -->2 uses.
# DEBUG match => match_2
if (match_2 != 0)
D.44950_674 = (_Bool) match_2;
# DEBUG match => match_2

match_7 : -->2 uses.
match_1901 = PHI <match_7(271), match_1800(207)>
# DEBUG match => match_7
match_9 = PHI <1(268), match_7(271), 0(270), match_1800(207)>
# DEBUG match => match_7

match_9 : -->2 uses.
match_12 = PHI <match_9(282), match_9(283), 0(273)>
# DEBUG match => match_9
match_12 = PHI <match_9(282), match_9(283), 0(273)>
# DEBUG match => match_9
# DEBUG match => match_9

match_12 : -->2 uses.
match_1712 = PHI <match_12(304), 1(428)>
if (match_12 != 0)
# DEBUG match => match_12

match_13 : -->6 uses.
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
# DEBUG match => match_13

match_14 : -->2 uses.
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
# DEBUG match => match_14

match_15 : -->2 uses.
match_1800 = PHI <match_15(412), 0(117)>
# DEBUG match => match_15
match_17 = PHI <1(134), 0(136), 0(152), 1(150), 0(198), 0(203), 0(206), 0(336), 0(374), match_15(412), 1(149), 1(162), 1(420), 0(117)>
# DEBUG match => match_15

match_17 : --> single use.
match_142 = PHI <0(4), 0(5), 0(7), match_17(413)>
# DEBUG match => match_17

best_te_19 : -->2 uses.
best_te_1898 = PHI <best_te_19(271), best_te_680(207)>
# DEBUG best_te => best_te_19
best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>
# DEBUG best_te => best_te_19

best_te_22 : --> single use.
best_te_680 = PHI <best_te_22(412), 0(117)>
# DEBUG best_te => best_te_22
# DEBUG best_te => best_te_22

cng_pt_24 : -->2 uses.
cng_pt_1667 = PHI <cng_pt_24(271), cng_pt_1717(207)>
# DEBUG cng_pt => cng_pt_24
cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>
# DEBUG cng_pt => cng_pt_24

cng_pt_26 : -->2 uses.
cng_pt_1717 = PHI <cng_pt_26(412), 0(117)>
# DEBUG cng_pt => cng_pt_26
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
# DEBUG cng_pt => cng_pt_26

ptime_34 : -->2 uses.
ptime_1475 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(435)>
# DEBUG ptime => ptime_34
ptime_1033 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(167)>
# DEBUG ptime => ptime_34

dptime_36 : -->2 uses.
dptime_1671 = PHI <dptime_36(75), 0(59)>
# DEBUG dptime => dptime_36
dptime_1035 = PHI <dptime_36(75), 0(59)>
# DEBUG dptime => dptime_36

maxptime_38 : -->2 uses.
maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>
# DEBUG maxptime => maxptime_38
maxptime_1040 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(167)>
# DEBUG maxptime => maxptime_38

dmaxptime_40 : -->2 uses.
dmaxptime_1865 = PHI <dmaxptime_40(75), 0(59)>
# DEBUG dmaxptime => dmaxptime_40
dmaxptime_1005 = PHI <dmaxptime_40(75), 0(59)>
# DEBUG dmaxptime => dmaxptime_40

sendonly_42 : -->2 uses.
sendonly_1689 = PHI <sendonly_43(75), sendonly_42(59)>
# DEBUG sendonly => sendonly_42
sendonly_1006 = PHI <sendonly_43(75), sendonly_42(59)>
# DEBUG sendonly => sendonly_42

sendonly_43 : -->2 uses.
sendonly_1689 = PHI <sendonly_43(75), sendonly_42(59)>
# DEBUG sendonly => sendonly_43
sendonly_1006 = PHI <sendonly_43(75), sendonly_42(59)>
# DEBUG sendonly => sendonly_43

recvonly_45 : -->2 uses.
recvonly_1894 = PHI <recvonly_45(75), 0(59)>
# DEBUG recvonly => recvonly_45
recvonly_1654 = PHI <recvonly_45(75), 0(59)>
# DEBUG recvonly => recvonly_45

greedy_47 : -->2 uses.
if (greedy_47 != 0)
if (greedy_47 != 0)
# DEBUG greedy => greedy_47

.MEM_49 : -->2 uses.
.MEM_1135 = PHI <.MEM_1302(213), .MEM_1305(218), .MEM_1301(212), .MEM_1303(219), .MEM_49(270), .MEM_1303(217)>
.MEM_1137 = PHI <.MEM_1321(268), .MEM_1135(271), .MEM_49(270), .MEM_1579(207)>

got_crypto_50 : -->2 uses.
got_crypto_361 = PHI <got_crypto_50(171), got_crypto_1866(167)>
got_crypto_95 = PHI <got_crypto_50(171)>
# DEBUG got_crypto => got_crypto_50
# DEBUG got_crypto => got_crypto_50

got_crypto_53 : -->2 uses.
got_crypto_1118 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_95(435)>
# DEBUG got_crypto => got_crypto_53
got_crypto_969 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_1866(167)>
# DEBUG got_crypto => got_crypto_53

got_crypto_55 : --> single use.
got_crypto_1866 = PHI <got_crypto_55(412), 0(117)>
# DEBUG got_crypto => got_crypto_55
# DEBUG got_crypto => got_crypto_55

got_video_crypto_57 : -->2 uses.
got_video_crypto_1738 = PHI <got_video_crypto_57(344), got_video_crypto_556(340)>
got_video_crypto_136 = PHI <got_video_crypto_57(344)>
# DEBUG got_video_crypto => got_video_crypto_57
# DEBUG got_video_crypto => got_video_crypto_57

got_video_crypto_60 : -->2 uses.
got_video_crypto_1885 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_136(436)>
# DEBUG got_video_crypto => got_video_crypto_60
got_video_crypto_960 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_556(340)>
# DEBUG got_video_crypto => got_video_crypto_60

attr_62 : --> single use.
attr_619 = PHI <attr_978(376), attr_893(345), attr_62(436)>
# DEBUG attr => attr_62
# DEBUG attr => attr_62

got_video_crypto_63 : --> single use.
got_video_crypto_1674 = PHI <got_video_crypto_63(412), 0(117)>
# DEBUG got_video_crypto => got_video_crypto_63
# DEBUG got_video_crypto => got_video_crypto_63

got_audio_65 : -->6 uses.
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
# DEBUG got_audio => got_audio_65

got_audio_66 : --> single use.
got_audio_1693 = PHI <got_audio_66(412), 0(117)>
# DEBUG got_audio => got_audio_66
# DEBUG got_audio => got_audio_66

got_avp_68 : -->2 uses.
got_avp_1859 = PHI <got_avp_68(131), got_avp_1740(132), got_avp_1740(133)>
got_avp_1740 = PHI <got_avp_68(131), got_avp_671(130)>
# DEBUG got_avp => got_avp_68

got_savp_74 : -->2 uses.
got_savp_1739 = PHI <got_savp_74(131), got_savp_1711(132), got_savp_1711(133)>
got_savp_1711 = PHI <got_savp_74(131), got_savp_512(130)>
# DEBUG got_savp => got_savp_74

attr_77 : --> single use.
attr_1599 = PHI <attr_548(200), attr_507(172), attr_77(435)>
# DEBUG attr => attr_77
# DEBUG attr => attr_77

got_webrtc_78 : -->4 uses.
got_webrtc_452 = PHI <got_webrtc_78(412), 0(117)>
D.44830_972 = got_webrtc_78 == 0;
D.44830_541 = got_webrtc_78 == 0;
# DEBUG got_webrtc => got_webrtc_78
D.44839_552 = got_avp_1859 | got_webrtc_78;
# DEBUG got_webrtc => got_webrtc_78

scrooge_80 : --> single use.
if (scrooge_80 != 0)
# DEBUG scrooge => scrooge_80

reneg_81 : --> single use.
if (reneg_81 != 0)
# DEBUG reneg => reneg_81

reneg_82 : --> single use.
if (reneg_82 == 0)
# DEBUG reneg => reneg_82
# DEBUG reneg => reneg_82

codec_array_84 : -->4 uses.
greedy_sort (smh_186, &matches, m_idx_906, codec_array_84, total_codecs_85);
D.45237_984 = codec_array_84 + D.45236_983;
D.44919_628 = codec_array_84 + D.44918_627;
greedy_sort (smh_186, &matches, m_idx_1715, codec_array_84, total_codecs_85);
# DEBUG codec_array => codec_array_84

total_codecs_85 : -->6 uses.
greedy_sort (smh_186, &matches, m_idx_906, codec_array_84, total_codecs_85);
D.44998_624 = total_codecs_85 > i_710;
D.44998_1609 = total_codecs_85 > 0;
if (total_codecs_85 > i_1020)
if (total_codecs_85 > 0)
greedy_sort (smh_186, &matches, m_idx_1715, codec_array_84, total_codecs_85);
# DEBUG total_codecs => total_codecs_85

codec_ms_87 : -->2 uses.
codec_ms_88 = PHI <codec_ms_87(227), codec_ms_87(228), 33(229)>
codec_ms_88 = PHI <codec_ms_87(227), codec_ms_87(228), 33(229)>
# DEBUG codec_ms => codec_ms_87

codec_ms_88 : -->3 uses.
codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>
codec_ms_90 = PHI <codec_ms_88(233), codec_ms_88(425), codec_ms_89(239), codec_ms_89(240), 32(232), 39(234)>
codec_ms_90 = PHI <codec_ms_88(233), codec_ms_88(425), codec_ms_89(239), codec_ms_89(240), 32(232), 39(234)>
# DEBUG codec_ms => codec_ms_88

codec_ms_89 : -->2 uses.
codec_ms_90 = PHI <codec_ms_88(233), codec_ms_88(425), codec_ms_89(239), codec_ms_89(240), 32(232), 39(234)>
codec_ms_90 = PHI <codec_ms_88(233), codec_ms_88(425), codec_ms_89(239), codec_ms_89(240), 32(232), 39(234)>
# DEBUG codec_ms => codec_ms_89

codec_ms_90 : -->6 uses.
codec_ms_93 = PHI <codec_ms_90(268), codec_ms_91(271), codec_ms_90(270), codec_ms_477(207)>
codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>
codec_ms_93 = PHI <codec_ms_90(268), codec_ms_91(271), codec_ms_90(270), codec_ms_477(207)>
D.44993_692 = codec_ms_90 * 1000;
D.44990_690 = codec_ms_90 != 0;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# DEBUG codec_ms => codec_ms_90

codec_ms_91 : -->2 uses.
codec_ms_1720 = PHI <codec_ms_91(271), codec_ms_477(207)>
# DEBUG codec_ms => codec_ms_91
codec_ms_93 = PHI <codec_ms_90(268), codec_ms_91(271), codec_ms_90(270), codec_ms_477(207)>
# DEBUG codec_ms => codec_ms_91

codec_ms_93 : -->7 uses.
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);
# DEBUG codec_ms => codec_ms_93

codec_ms_94 : --> single use.
codec_ms_477 = PHI <codec_ms_94(412), 0(117)>
# DEBUG codec_ms => codec_ms_94
# DEBUG codec_ms => codec_ms_94

got_crypto_95 : --> single use.
got_crypto_1118 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_95(435)>
# DEBUG got_crypto => got_crypto_95
# DEBUG got_crypto => got_crypto_95

remote_codec_rate_96 : -->9 uses.
remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>
D.44968_675 = remote_codec_rate_96 != 0;
remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>
remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>
remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>
D.44973_678 = remote_codec_rate_96 != codec_rate_632;
remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>
remote_codec_rate.92_700 = (int) remote_codec_rate_96;
if (remote_codec_rate_96 != codec_rate_632)
# DEBUG remote_codec_rate => remote_codec_rate_96

remote_codec_rate_97 : --> single use.
remote_codec_rate_1493 = PHI <remote_codec_rate_97(269), remote_codec_rate_596(241)>
# DEBUG remote_codec_rate => remote_codec_rate_97
# DEBUG remote_codec_rate => remote_codec_rate_97

fmtp_remote_codec_rate_99 : -->3 uses.
iftmp.93_765 = fmtp_remote_codec_rate_99 == D.44947_658;
remote_codec_rate_96 = PHI <remote_codec_rate_1493(246), remote_codec_rate_1493(251), fmtp_remote_codec_rate_99(250)>
if (fmtp_remote_codec_rate_99 != 0)
# DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99

m_idx_100 : -->2 uses.
m_idx_1487 = PHI <m_idx_100(269), m_idx_792(241)>
# DEBUG m_idx => m_idx_100
m_idx_102 = PHI <m_idx_100(269), m_idx_792(241)>
# DEBUG m_idx => m_idx_100

m_idx_102 : -->3 uses.
m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
m_idx_105 = PHI <m_idx_703(268), m_idx_103(271), m_idx_102(270), m_idx_1869(207)>
if (m_idx_102 > 29)
# DEBUG m_idx => m_idx_102

m_idx_103 : -->2 uses.
m_idx_792 = PHI <m_idx_103(271), m_idx_1869(207)>
# DEBUG m_idx => m_idx_103
m_idx_105 = PHI <m_idx_703(268), m_idx_103(271), m_idx_102(270), m_idx_1869(207)>
# DEBUG m_idx => m_idx_103

m_idx_105 : -->4 uses.
# DEBUG m_idx => m_idx_105
if (m_idx_105 != 0)
m_idx_1715 = PHI <m_idx_105(283), 1(281)>
m_idx_1904 = PHI <0(282), m_idx_105(283), 0(273)>
D.45007_719 = m_idx_105 == 0;
# DEBUG m_idx => m_idx_105
# DEBUG m_idx => m_idx_105

m_idx_109 : -->2 uses.
m_idx_910 = PHI <m_idx_109(391), m_idx_819(379)>
# DEBUG m_idx => m_idx_109
m_idx_953 = PHI <m_idx_109(391), m_idx_819(379)>
# DEBUG m_idx => m_idx_109

connection_110 : --> single use.
D.45085_1059 = connection_110->c_address;

m_idx_113 : --> single use.
m_idx_1869 = PHI <m_idx_113(412), 0(117)>
# DEBUG m_idx => m_idx_113
# DEBUG m_idx => m_idx_113

nm_idx_115 : -->2 uses.
nm_idx_1139 = PHI <nm_idx_115(269), nm_idx_1755(241)>
# DEBUG nm_idx => nm_idx_115
nm_idx_901 = PHI <nm_idx_115(269), nm_idx_1755(241)>
# DEBUG nm_idx => nm_idx_115

nm_idx_117 : -->2 uses.
nm_idx_1755 = PHI <nm_idx_117(271), nm_idx_1749(207)>
# DEBUG nm_idx => nm_idx_117
nm_idx_119 = PHI <nm_idx_1139(268), nm_idx_117(271), nm_idx_901(270), nm_idx_1749(207)>
# DEBUG nm_idx => nm_idx_117

nm_idx_119 : -->5 uses.
nm_idx_1744 = PHI <nm_idx_119(282), nm_idx_119(283), 0(273)>
nm_idx_841 = PHI <nm_idx_1744(304), nm_idx_119(428)>
nm_idx_1744 = PHI <nm_idx_119(282), nm_idx_119(283), 0(273)>
if (nm_idx_119 > j_736)
D.45008_720 = nm_idx_119 != 0;
# DEBUG nm_idx => nm_idx_119
# DEBUG nm_idx => nm_idx_119

nm_idx_121 : --> single use.
nm_idx_1749 = PHI <nm_idx_121(412), 0(117)>
# DEBUG nm_idx => nm_idx_121
# DEBUG nm_idx => nm_idx_121

pass_126 : -->3 uses.
pass_1848 = PHI <0(142), pass_1664(144), pass_126(143)>
pass_1664 = PHI <pass_126(143), 2(142)>
if (pass_126 == 2)
# DEBUG pass => pass_126

rm_encoding_130 : -->5 uses.
D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
D.44863_571 = strcasecmp (rm_encoding_130, "CN");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
# DEBUG rm_encoding => rm_encoding_130

map_bit_rate_131 : -->2 uses.
map_bit_rate_132 = PHI <map_bit_rate_1480(233), map_bit_rate_1480(425), map_bit_rate_131(239), map_bit_rate_131(240), 13332(232), 32001(234)>
map_bit_rate_132 = PHI <map_bit_rate_1480(233), map_bit_rate_1480(425), map_bit_rate_131(239), map_bit_rate_131(240), 13332(232), 32001(234)>
# DEBUG map_bit_rate => map_bit_rate_131

map_bit_rate_132 : -->3 uses.
D.44956_667 = map_bit_rate_132 != bit_rate_631;
D.44955_666 = map_bit_rate_132 != 0;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# DEBUG map_bit_rate => map_bit_rate_132

timp_134 : -->3 uses.
timp_872 = PHI <timp_134(279), timp_134(280)>
timp_872 = PHI <timp_134(279), timp_134(280)>
D.45024_734 = timp_134->microseconds_per_packet;
# DEBUG timp => timp_134

got_video_crypto_136 : --> single use.
got_video_crypto_1885 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_136(436)>
# DEBUG got_video_crypto => got_video_crypto_136
# DEBUG got_video_crypto => got_video_crypto_136

rm_encoding_137 : -->2 uses.
D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
# DEBUG rm_encoding => rm_encoding_137

vmatch_138 : --> single use.
if (vmatch_138 != 0)
# DEBUG vmatch => vmatch_138

connection_139 : --> single use.
D.45085_795 = connection_139->c_address;

match_142 : --> single use.
return match_142;

iftmp.93_144 : --> single use.
match_661 = (uint8_t) iftmp.93_144;

near_rate_145 : --> single use.
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);

D.47922_146 : -->3 uses.
pmap_760->adv_channels = D.47922_146;
if (D.47922_146 == 1)
pmap_760->channels = D.47922_146;

session_161(D) : -->111 uses.
D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
D.44530_244 = session_161(D)->channel;
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);
D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
D.44530_814 = session_161(D)->channel;
D.44530_811 = session_161(D)->channel;
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
D.44530_470 = session_161(D)->channel;
D.44530_459 = session_161(D)->channel;
D.44530_415 = session_161(D)->channel;
D.44649_357 = session_161(D)->bugs;
D.44530_354 = session_161(D)->channel;
D.44530_1074 = session_161(D)->channel;
D.44530_1075 = session_161(D)->channel;
D.44530_1081 = session_161(D)->channel;
switch_core_media_check_video_codecs (session_161(D));
D.44530_1085 = session_161(D)->channel;
D.44530_989 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
D.45140_885 = dtls_ok (session_161(D));
D.44530_952 = session_161(D)->channel;
D.44530_967 = session_161(D)->channel;
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));
D.44530_987 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);
D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
D.44530_1071 = session_161(D)->channel;
D.44530_853 = session_161(D)->channel;
D.44530_856 = session_161(D)->channel;
D.44530_842 = session_161(D)->channel;
D.44530_818 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
D.44530_473 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
D.44530_441 = session_161(D)->channel;
D.44530_457 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
D.44530_417 = session_161(D)->channel;
D.44530_419 = session_161(D)->channel;
D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
D.44530_432 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
D.44530_438 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
switch_core_media_prepare_codecs (session_161(D), 0);
D.44530_369 = session_161(D)->channel;
switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
switch_core_media_pass_zrtp_hash (session_161(D));
switch_core_session_set_ice (session_161(D));
D.44530_378 = session_161(D)->channel;
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_1045);
D.44530_395 = session_161(D)->channel;
D.44530_400 = session_161(D)->channel;
D.44530_407 = session_161(D)->channel;
D.44784_499 = dtls_ok (session_161(D));
D.44530_511 = session_161(D)->channel;
D.44530_536 = session_161(D)->channel;
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
D.44530_827 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);
D.44530_838 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);
D.44530_849 = session_161(D)->channel;
D.44530_866 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
D.44530_860 = session_161(D)->channel;
D.44530_878 = session_161(D)->channel;
D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_1006);
D.44530_350 = session_161(D)->channel;
D.44530_321 = session_161(D)->channel;
D.44530_322 = session_161(D)->channel;
smh_186 = session_161(D)->media_handle;
D.44478_200 = dtls_ok (session_161(D));
switch_core_session_parse_crypto_prefs (session_161(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");
D.44530_247 = session_161(D)->channel;
D.44530_309 = session_161(D)->channel;
D.44530_313 = session_161(D)->channel;
D.44530_316 = session_161(D)->channel;
D.44530_338 = session_161(D)->channel;
D.44530_340 = session_161(D)->channel;
if (session_161(D) == 0B)
channel_162 = switch_core_session_get_channel (session_161(D));

channel_162 : -->6 uses.
val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
D.45114_834 = switch_channel_direction (channel_162);
D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);
var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
# DEBUG channel => channel_162

smh_186 : -->111 uses.
pmap_1457 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;
pmap_1461 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
D.45001_1022 = smh_186->crypto_mode;
D.47965_1505 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
greedy_sort (smh_186, &matches, m_idx_906, codec_array_84, total_codecs_85);
D.45001_712 = smh_186->crypto_mode;
D.44471_832 = smh_186->mparams;
D.44471_829 = smh_186->mparams;
D.44471_821 = smh_186->mparams;
D.44750_815 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_812 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_808 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44655_803 = smh_186->num_negotiated_codecs;
D.44471_621 = smh_186->mparams;
D.44471_1501 = smh_186->mparams;
D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44481_412 = smh_186->session;
total_codecs_359 = smh_186->num_negotiated_codecs;
reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
D.44471_343 = smh_186->mparams;
D.44471_237 = smh_186->mparams;
# DEBUG D#75 => &MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].read_codec
# DEBUG D#74 => &MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].read_codec
D.47963_1507 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
D.47962_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
D.47961_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
D.45286_1072 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.45286_1076 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.45286_1078 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.45286_1082 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;
check_ice (smh_186, 1, sdp_198, m_1764);
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1044;
D.45287_1046 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
D.45286_1068 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.44471_957 = smh_186->mparams;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45164_904;
D.44471_850 = smh_186->mparams;
D.44605_851 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_855 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44471_839 = smh_186->mparams;
D.44605_840 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.47932_1490 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
D.47931_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
D.47930_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
D.47934_1488 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;
check_ice (smh_186, 0, sdp_198, m_1764);
D.44605_764 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
greedy_sort (smh_186, &matches, m_idx_1715, codec_array_84, total_codecs_85);
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;
smh_186->num_negotiated_codecs = 0;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_760;
smh_186->negotiated_codecs[D.44655_803] = mimp_761;
smh_186->num_negotiated_codecs = D.45089_804;
D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);
D.44471_835 = smh_186->mparams;
D.44471_845 = smh_186->mparams;
D.44471_867 = smh_186->mparams;
D.44471_861 = smh_186->mparams;
D.44471_644 = smh_186->mparams;
D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44471_577 = smh_186->mparams;
D.44471_516 = smh_186->mparams;
D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44481_482 = smh_186->session;
D.44471_364 = smh_186->mparams;
codec_array_360 = &smh_186->negotiated_codecs;
reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
D.44509_240 = smh_186->origin;
D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
D.44481_205 = smh_186->session;
D.44481_207 = smh_186->session;
# DEBUG D#15 => &smh_186->engines
# DEBUG D#14 => &smh_186->engines[1]
codec_array_190 = &smh_186->codecs;
D.44471_191 = smh_186->mparams;
D.44481_201 = smh_186->session;
smh_186->origin = D.44508_226;
D.44471_228 = smh_186->mparams;
D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;
D.44471_362 = smh_186->mparams;
check_ice (smh_186, 0, sdp_198, 0B);
check_ice (smh_186, 1, sdp_198, 0B);
D.44481_403 = smh_186->session;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;
D.44471_533 = smh_186->mparams;
D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.45163_903 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
D.44471_905 = smh_186->mparams;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45213_956;
D.44471_964 = smh_186->mparams;
D.44471_998 = smh_186->mparams;
D.44471_1094 = smh_186->mparams;
if (smh_186 == 0B)
# DEBUG smh => smh_186

codec_array_190 : -->2 uses.
codec_array_84 = PHI <codec_array_360(111), codec_array_190(110), codec_array_190(112)>
codec_array_84 = PHI <codec_array_360(111), codec_array_190(110), codec_array_190(112)>
# DEBUG codec_array => codec_array_190
# DEBUG codec_array => codec_array_190

D.44471_191 : --> single use.
total_codecs_192 = D.44471_191->num_codecs;

total_codecs_192 : --> single use.
total_codecs_85 = PHI <total_codecs_359(111), total_codecs_192(110), total_codecs_365(112)>
# DEBUG total_codecs => total_codecs_192

r_sdp_193(D) : -->7 uses.
D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
D.44472_194 = strlen (r_sdp_193(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);

D.44472_194 : --> single use.
D.44473_195 = (int) D.44472_194;

D.44473_195 : --> single use.
parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);

parser_196 : -->4 uses.
sdp_198 = sdp_session (parser_196);
sdp_parser_free (parser_196);
sdp_parser_free (parser_196);
if (parser_196 == 0B)
# DEBUG parser => parser_196

sdp_198 : -->13 uses.
D.44506_224 = sdp_198->sdp_origin;
m_248 = sdp_198->sdp_media;
attr_303 = sdp_198->sdp_attributes;
connection_554 = sdp_198->sdp_connection;
m_370 = sdp_198->sdp_media;
check_ice (smh_186, 1, sdp_198, m_1764);
switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
check_ice (smh_186, 0, sdp_198, 0B);
check_ice (smh_186, 1, sdp_198, 0B);
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_1045);
check_ice (smh_186, 0, sdp_198, m_1764);
connection_879 = sdp_198->sdp_connection;
if (sdp_198 == 0B)
# DEBUG sdp => sdp_198

D.44478_200 : --> single use.
if (D.44478_200 != 0)

D.44481_201 : --> single use.
D.44482_202 = D.44481_201->channel;

D.44482_202 : --> single use.
tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);

tmp_203 : -->10 uses.
# DEBUG expr => tmp_203
D.49675_1550 = strcasecmp (tmp_203, "no");
D.49676_1551 = strcasecmp (tmp_203, "off");
D.49677_1552 = strcasecmp (tmp_203, "false");
D.49678_1553 = strcasecmp (tmp_203, "f");
D.49679_1554 = strcasecmp (tmp_203, "disabled");
D.49680_1555 = strcasecmp (tmp_203, "inactive");
D.49681_1556 = strcasecmp (tmp_203, "disallow");
D.49682_1557 = switch_is_number (tmp_203);
# DEBUG __nptr => tmp_203
D.49683_1558 = strtol (tmp_203, 0B, 10);
if (tmp_203 != 0B)
# DEBUG tmp => tmp_203

D.44481_205 : --> single use.
D.44482_206 = D.44481_205->channel;

D.44482_206 : --> single use.
switch_channel_clear_flag (D.44482_206, 111);

D.44481_207 : --> single use.
D.44482_208 = D.44481_207->channel;

D.44482_208 : --> single use.
switch_channel_clear_flag (D.44482_208, 109);

proceed_209(D) : -->4 uses.
*proceed_209(D) = 0;
*proceed_209(D) = 1;
if (proceed_209(D) != 0B)
if (proceed_209(D) != 0B)

D.44490_210 : --> single use.
greedy_211 = D.44490_210 != 0;

greedy_211 : -->2 uses.
greedy_47 = PHI <greedy_211(30), 0(31), 1(32), 1(33), greedy_211(34)>
greedy_47 = PHI <greedy_211(30), 0(31), 1(32), 1(33), greedy_211(34)>
# DEBUG greedy => greedy_211

D.44491_212 : --> single use.
scrooge_213 = D.44491_212 != 0;

scrooge_213 : -->2 uses.
scrooge_80 = PHI <scrooge_213(30), 0(31), 0(32), 1(33), scrooge_213(34)>
scrooge_80 = PHI <scrooge_213(30), 0(31), 0(32), 1(33), scrooge_213(34)>
# DEBUG scrooge => scrooge_213

val_214 : -->5 uses.
D.44494_215 = strcasecmp (val_214, "generous");
D.44498_218 = strcasecmp (val_214, "greedy");
D.44502_221 = strcasecmp (val_214, "scrooge");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
if (val_214 != 0B)
# DEBUG val => val_214

D.44494_215 : --> single use.
if (D.44494_215 == 0)

D.44498_218 : --> single use.
if (D.44498_218 == 0)

D.44502_221 : --> single use.
if (D.44502_221 == 0)

D.44506_224 : --> single use.
D.44507_225 = D.44506_224->o_username;

D.44507_225 : --> single use.
D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);

D.44508_226 : -->3 uses.
D.44518_234 = strstr (D.44508_226, "CiscoSystemsSIP-GW-UserAgent");
if (D.44508_226 != 0B)
smh_186->origin = D.44508_226;

D.44471_228 : --> single use.
D.44512_229 = D.44471_228->auto_rtp_bugs;

D.44512_229 : --> single use.
D.44513_230 = (int) D.44512_229;

D.44513_230 : --> single use.
D.44514_231 = D.44513_230 & 1;

D.44514_231 : --> single use.
if (D.44514_231 != 0)

D.44518_234 : --> single use.
if (D.44518_234 != 0B)

D.44521_235 : --> single use.
D.44522_236 = D.44521_235 | 1;

D.44522_236 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;

D.44471_237 : --> single use.
D.44512_238 = D.44471_237->auto_rtp_bugs;

D.44512_238 : --> single use.
D.44523_239 = D.44512_238 & 2;

D.44523_239 : --> single use.
if (D.44523_239 != 0)

D.44509_240 : --> single use.
D.44526_241 = strstr (D.44509_240, "Sonus_UAC");

D.44526_241 : --> single use.
if (D.44526_241 != 0B)

D.44521_242 : --> single use.
D.44529_243 = D.44521_242 | 2;

D.44529_243 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;

D.44530_244 : --> single use.
val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);

val_245 : -->10 uses.
# DEBUG expr => val_245
D.49687_1560 = strcasecmp (val_245, "yes");
D.49688_1561 = strcasecmp (val_245, "on");
D.49689_1562 = strcasecmp (val_245, "true");
D.49690_1563 = strcasecmp (val_245, "t");
D.49691_1564 = strcasecmp (val_245, "enabled");
D.49692_1565 = strcasecmp (val_245, "active");
D.49693_1566 = strcasecmp (val_245, "allow");
D.49694_1567 = switch_is_number (val_245);
# DEBUG __nptr => val_245
D.49695_1568 = strtol (val_245, 0B, 10);
if (val_245 != 0B)
# DEBUG val => val_245

D.44530_247 : --> single use.
switch_channel_set_flag_value (D.44530_247, 93, 1);

m_248 : -->3 uses.
D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
D.44546_254 = m_248->m_connections;
if (m_248 != 0B)
# DEBUG m => m_248

D.44540_249 : --> single use.
D.44541_250 = D.44540_249 & 6;

D.44541_250 : -->2 uses.
D.44543_252 = D.44541_250 == 0;
D.44542_251 = D.44541_250 == 2;

D.44542_251 : --> single use.
D.44544_253 = D.44543_252 | D.44542_251;

D.44543_252 : --> single use.
D.44544_253 = D.44543_252 | D.44542_251;

D.44544_253 : --> single use.
if (D.44544_253 != 0)

D.44546_254 : -->2 uses.
D.44548_256 = D.44546_254->c_address;
if (D.44546_254 != 0B)

D.44548_256 : -->2 uses.
__result_300 = __builtin_strcmp (D.44548_256, "0.0.0.0");
if (D.44548_256 != 0B)

__result_300 : --> single use.
if (__result_300 == 0)

attr_303 : -->2 uses.
attr_1666 = PHI <attr_334(75), attr_303(59)>
# DEBUG attr => attr_303
if (attr_303 != 0B)
# DEBUG attr => attr_303

D.44590_304 : -->8 uses.
D.44616_327 = strcasecmp (D.44590_304, "ptime");
D.47877_1465 = *D.44590_304;
D.44621_331 = strcasecmp (D.44590_304, "maxptime");
D.44614_324 = strcasecmp (D.44590_304, "sendrecv");
D.44602_315 = strcasecmp (D.44590_304, "recvonly");
D.44598_311 = strcasecmp (D.44590_304, "inactive");
D.44594_307 = strcasecmp (D.44590_304, "sendonly");
if (D.44590_304 == 0B)
# DEBUG s => D.44590_304

D.44594_307 : --> single use.
if (D.44594_307 == 0)

D.44530_309 : --> single use.
switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);

D.44598_311 : --> single use.
if (D.44598_311 == 0)

D.44530_313 : --> single use.
switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);

D.44602_315 : --> single use.
if (D.44602_315 == 0)

D.44530_316 : --> single use.
switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);

D.44605_318 : --> single use.
D.44606_319 = switch_rtp_ready (D.44605_318);

D.44606_319 : --> single use.
if (D.44606_319 != 0)

D.44605_320 : --> single use.
switch_rtp_set_max_missed_packets (D.44605_320, 0);

D.44530_321 : --> single use.
switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);

D.44530_322 : --> single use.
switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);

D.44614_324 : --> single use.
if (D.44614_324 == 0)

D.44616_327 : --> single use.
if (D.44616_327 == 0)

D.44619_328 : --> single use.
dptime_1467 = strtol (D.44619_328, 0B, 10);
# DEBUG __nptr => D.44619_328

D.44621_331 : --> single use.
if (D.44621_331 == 0)

D.44619_332 : --> single use.
dmaxptime_1468 = strtol (D.44619_332, 0B, 10);
# DEBUG __nptr => D.44619_332

attr_334 : -->2 uses.
attr_1666 = PHI <attr_334(75), attr_303(59)>
# DEBUG attr => attr_334
if (attr_334 != 0B)
# DEBUG attr => attr_334

D.44624_335 : --> single use.
D.44626_337 = D.44625_336 & D.44624_335;

D.44625_336 : --> single use.
D.44626_337 = D.44625_336 & D.44624_335;

D.44626_337 : --> single use.
if (D.44626_337 != 0)

D.44530_338 : --> single use.
switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);

D.44631_339 : --> single use.
if (D.44631_339 == 0)

D.44530_340 : --> single use.
val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);

val_341 : -->10 uses.
# DEBUG expr => val_341
D.49699_1570 = strcasecmp (val_341, "yes");
D.49700_1571 = strcasecmp (val_341, "on");
D.49701_1572 = strcasecmp (val_341, "true");
D.49702_1573 = strcasecmp (val_341, "t");
D.49703_1574 = strcasecmp (val_341, "enabled");
D.49704_1575 = strcasecmp (val_341, "active");
D.49705_1576 = strcasecmp (val_341, "allow");
D.49706_1577 = switch_is_number (val_341);
# DEBUG __nptr => val_341
D.49707_1578 = strtol (val_341, 0B, 10);
if (val_341 == 0B)
# DEBUG val => val_341

D.44471_343 : -->2 uses.
D.44636_344 = D.44471_343->hold_laps;
D.44471_343->hold_laps = 1;

D.44636_344 : --> single use.
if (D.44636_344 == 0)

D.44640_348 : --> single use.
if (D.44640_348 != 0)

reneg_349 : --> single use.
reneg_81 = PHI <reneg_349(92), reneg_352(93)>
# DEBUG reneg => reneg_349

D.44530_350 : --> single use.
val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);

val_351 : -->2 uses.
reneg_352 = switch_true (val_351);
if (val_351 != 0B)
# DEBUG val => val_351

reneg_352 : --> single use.
reneg_81 = PHI <reneg_349(92), reneg_352(93)>
# DEBUG reneg => reneg_352

reneg_353 : --> single use.
reneg_82 = PHI <0(94), reneg_353(95), reneg_1589(106)>
# DEBUG reneg => reneg_353

D.44530_354 : --> single use.
val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);

val_355 : -->10 uses.
# DEBUG expr => val_355
D.49711_1580 = strcasecmp (val_355, "yes");
D.49712_1581 = strcasecmp (val_355, "on");
D.49713_1582 = strcasecmp (val_355, "true");
D.49714_1583 = strcasecmp (val_355, "t");
D.49715_1584 = strcasecmp (val_355, "enabled");
D.49716_1585 = strcasecmp (val_355, "active");
D.49717_1586 = strcasecmp (val_355, "allow");
D.49718_1587 = switch_is_number (val_355);
# DEBUG __nptr => val_355
D.49719_1588 = strtol (val_355, 0B, 10);
if (val_355 != 0B)
# DEBUG val => val_355

D.44649_357 : --> single use.
if (D.44649_357 != 0B)

total_codecs_359 : -->2 uses.
# DEBUG total_codecs => total_codecs_359
total_codecs_85 = PHI <total_codecs_359(111), total_codecs_192(110), total_codecs_365(112)>
if (total_codecs_359 != 0)

codec_array_360 : --> single use.
codec_array_84 = PHI <codec_array_360(111), codec_array_190(110), codec_array_190(112)>
# DEBUG codec_array => codec_array_360

got_crypto_361 : -->3 uses.
got_crypto_50 = PHI <got_crypto_361(168), got_crypto_361(170), 1(421), got_crypto_361(169)>
got_crypto_50 = PHI <got_crypto_361(168), got_crypto_361(170), 1(421), got_crypto_361(169)>
got_crypto_50 = PHI <got_crypto_361(168), got_crypto_361(170), 1(421), got_crypto_361(169)>

D.44471_362 : --> single use.
D.44471_362->num_codecs = 0;

D.44471_364 : --> single use.
total_codecs_365 = D.44471_364->num_codecs;

total_codecs_365 : --> single use.
total_codecs_85 = PHI <total_codecs_359(111), total_codecs_192(110), total_codecs_365(112)>
# DEBUG total_codecs => total_codecs_365

D.44661_366 : --> single use.
if (D.44661_366 != 0B)

D.44663_367 : --> single use.
if (D.44663_367 != 0B)

D.44665_368 : --> single use.
if (D.44665_368 != 0B)

D.44530_369 : --> single use.
switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);

m_370 : -->2 uses.
m_1764 = PHI <m_1093(412), m_370(117)>
# DEBUG m => m_370
if (m_370 != 0B)
# DEBUG m => m_370

D.44666_373 : --> single use.
if (D.44666_373 == 261)

got_webrtc_374 : --> single use.
got_webrtc_78 = PHI <got_webrtc_452(118), got_webrtc_374(119)>
# DEBUG got_webrtc => got_webrtc_374

D.44669_375 : -->2 uses.
D.44672_377 = strcasecmp (D.44669_375, "UDP/TLS/RTP/SAVPF");
if (D.44669_375 != 0B)

D.44672_377 : --> single use.
if (D.44672_377 == 0)

D.44530_378 : --> single use.
switch_channel_set_flag_value (D.44530_378, 107, 1);

D.44675_379 : -->4 uses.
D.44677_381 = D.44675_379 == 261;
D.44676_380 = D.44675_379 == 257;
if (D.44675_379 == 258)
if (D.44675_379 == 256)

D.44676_380 : --> single use.
D.44678_382 = D.44677_381 | D.44676_380;

D.44677_381 : --> single use.
D.44678_382 = D.44677_381 | D.44676_380;

D.44678_382 : --> single use.
if (D.44678_382 != 0)

D.44681_383 : --> single use.
if (D.44681_383 == 2)

got_savp_384 : --> single use.
got_savp_74 = PHI <got_savp_512(124), got_savp_512(127), got_savp_512(129), got_savp_512(128), got_savp_384(125)>
# DEBUG got_savp => got_savp_384

D.44681_387 : --> single use.
if (D.44681_387 == 2)

got_avp_388 : --> single use.
got_avp_68 = PHI <got_avp_671(124), got_avp_671(127), got_avp_671(129), got_avp_388(128), got_avp_671(125)>
# DEBUG got_avp => got_avp_388

got_udptl_391 : --> single use.
# DEBUG got_udptl => got_udptl_391
got_udptl_774 = PHI <got_udptl_1868(131), got_udptl_391(130)>
# DEBUG got_udptl => got_udptl_391

D.44681_392 : --> single use.
if (D.44681_392 == 8)

D.44697_393 : --> single use.
if (D.44697_393 != 0)

t38_options_394 : -->3 uses.
D.44753_448 = t38_options_394->remote_port;
D.44751_445 = t38_options_394->remote_ip;
switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
# DEBUG t38_options => t38_options_394

D.44530_395 : --> single use.
D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);

D.44699_396 : --> single use.
if (D.44699_396 != 0)

D.44702_398 : --> single use.
D.44703_399 = switch_true (D.44702_398);

D.44703_399 : --> single use.
if (D.44703_399 != 0)

D.44530_400 : --> single use.
switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);

var_402 : -->3 uses.
pass_409 = switch_true (var_402);
D.44716_410 = strcasecmp (var_402, "once");
if (var_402 != 0B)
# DEBUG var => var_402

D.44481_403 : --> single use.
D.44482_404 = D.44481_403->channel;

D.44482_404 : --> single use.
D.44706_405 = switch_channel_test_flag (D.44482_404, 101);

D.44706_405 : --> single use.
pass_406 = (int) D.44706_405;

pass_406 : --> single use.
pass_126 = PHI <pass_406(140), pass_409(141)>
# DEBUG pass => pass_406

D.44530_407 : --> single use.
D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);

D.44707_408 : --> single use.
if (D.44707_408 != 0)

pass_409 : -->2 uses.
pass_126 = PHI <pass_406(140), pass_409(141)>
if (pass_409 == 0)
# DEBUG pass => pass_409

D.44716_410 : --> single use.
if (D.44716_410 == 0)

D.44481_412 : --> single use.
D.44482_413 = D.44481_412->channel;

D.44482_413 : --> single use.
D.44723_414 = switch_channel_test_flag (D.44482_413, 101);

D.44723_414 : --> single use.
if (D.44723_414 != 0)

D.44530_415 : --> single use.
D.44724_416 = switch_channel_test_flag (D.44530_415, 103);

D.44724_416 : --> single use.
if (D.44724_416 == 0)

D.44530_417 : --> single use.
D.44726_418 = switch_channel_test_flag (D.44530_417, 15);

D.44726_418 : --> single use.
if (D.44726_418 != 0)

D.44530_419 : --> single use.
D.44728_420 = switch_channel_test_flag (D.44530_419, 29);

D.44728_420 : --> single use.
if (D.44728_420 != 0)

D.44605_421 : --> single use.
D.44730_422 = switch_rtp_ready (D.44605_421);

D.44730_422 : --> single use.
if (D.44730_422 == 0)

D.44733_424 : --> single use.
if (D.44733_424 == 0)

other_session.89_425 : --> single use.
other_channel_426 = switch_core_session_get_channel (other_session.89_425);

other_channel_426 : -->3 uses.
switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);
D.44741_434 = switch_channel_get_name (other_channel_426);
D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
# DEBUG other_channel => other_channel_426

D.44605_427 : --> single use.
remote_host_428 = switch_rtp_get_remote_host (D.44605_427);

remote_host_428 : -->3 uses.
D.44756_449 = remote_host_428 != 0B;
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
# DEBUG remote_host => remote_host_428

D.44605_429 : --> single use.
remote_port_430 = switch_rtp_get_remote_port (D.44605_429);

remote_port_430 : -->3 uses.
D.44757_450 = remote_port_430 != 0;
D.44766_461 = (int) remote_port_430;
if (remote_port_430 == D.44753_448)
# DEBUG remote_port => remote_port_430

D.44737_431 : --> single use.
if (D.44737_431 == 0)

D.44530_432 : --> single use.
D.44740_433 = switch_channel_get_name (D.44530_432);

D.44740_433 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

D.44741_434 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

other_session.89_435 : --> single use.
switch_core_session_rwunlock (other_session.89_435);

D.44530_438 : --> single use.
D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);

D.44742_439 : --> single use.
D.44743_440 = switch_true (D.44742_439);

D.44743_440 : --> single use.
if (D.44743_440 != 0)

D.44530_441 : --> single use.
D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);

D.44746_442 : --> single use.
D.44747_443 = switch_true (D.44746_442);

D.44747_443 : --> single use.
if (D.44747_443 != 0)

D.44750_444 : --> single use.
D.44750_444->remote_sdp_ip = D.44752_446;

D.44751_445 : --> single use.
D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);

D.44752_446 : --> single use.
D.44750_444->remote_sdp_ip = D.44752_446;

D.44750_447 : -->2 uses.
D.44760_453 = D.44750_447->remote_sdp_ip;
D.44750_447->remote_sdp_port = D.44753_448;

D.44753_448 : -->2 uses.
if (remote_port_430 == D.44753_448)
D.44750_447->remote_sdp_port = D.44753_448;

D.44756_449 : --> single use.
D.44758_451 = D.44757_450 & D.44756_449;

D.44757_450 : --> single use.
D.44758_451 = D.44757_450 & D.44756_449;

D.44758_451 : --> single use.
if (D.44758_451 != 0)

got_webrtc_452 : -->2 uses.
got_webrtc_374 = got_webrtc_452 + 1;
got_webrtc_78 = PHI <got_webrtc_452(118), got_webrtc_374(119)>

D.44760_453 : --> single use.
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);

D.39032_454 : --> single use.
if (D.39032_454 == 0)

D.44530_457 : --> single use.
D.44764_458 = switch_channel_get_name (D.44530_457);

D.44764_458 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);

D.44530_459 : --> single use.
D.44765_460 = switch_channel_get_name (D.44530_459);

D.44765_460 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44766_461 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44750_462 : -->2 uses.
D.44762_465 = D.44750_462->remote_sdp_port;
D.44760_463 = D.44750_462->remote_sdp_ip;

D.44760_463 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44762_465 : --> single use.
D.44767_466 = (int) D.44762_465;

D.44767_466 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44750_467 : --> single use.
D.44762_468 = D.44750_467->remote_sdp_port;

D.44762_468 : --> single use.
D.44767_469 = (int) D.44762_468;

D.44767_469 : --> single use.
switch_snprintf (&tmp, 32, "%d", D.44767_469);

D.44530_470 : --> single use.
switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);

D.44750_471 : --> single use.
D.44760_472 = D.44750_471->remote_sdp_ip;

D.44760_472 : --> single use.
switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);

D.44530_473 : --> single use.
switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);

D.44605_474 : --> single use.
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);

D.44750_475 : -->2 uses.
D.44762_478 = D.44750_475->remote_sdp_port;
D.44760_476 = D.44750_475->remote_sdp_ip;

D.44760_476 : --> single use.
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);

codec_ms_477 : -->9 uses.
codec_ms_1720 = PHI <codec_ms_91(271), codec_ms_477(207)>
# DEBUG codec_ms => codec_ms_477
codec_ms_93 = PHI <codec_ms_90(268), codec_ms_91(271), codec_ms_90(270), codec_ms_477(207)>
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>

D.44762_478 : --> single use.
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);

D.44768_479 : --> single use.
if (D.44768_479 != 0)

err.90_480 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);

other_session.89_481 : --> single use.
switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);

D.44481_482 : --> single use.
D.44482_483 = D.44481_482->channel;

D.44482_483 : --> single use.
switch_channel_set_flag_value (D.44482_483, 101, 1);

other_session.89_484 : --> single use.
D.44772_485 = other_session.89_484->channel;

D.44772_485 : --> single use.
switch_channel_set_flag_value (D.44772_485, 101, 1);

other_session.89_486 : --> single use.
msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);

msg_487 : -->4 uses.
msg_487->from = "src/switch_core_media.c";
msg_487->string_arg = D.44773_489;
switch_core_session_queue_message (other_session.89_490, msg_487);
msg_487->message_id = 21;
# DEBUG msg => msg_487

other_session.89_488 : --> single use.
D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);

D.44773_489 : --> single use.
msg_487->string_arg = D.44773_489;

other_session.89_490 : --> single use.
switch_core_session_queue_message (other_session.89_490, msg_487);

other_session.89_491 : --> single use.
switch_core_session_rwunlock (other_session.89_491);

D.44681_493 : -->2 uses.
if (D.44681_493 == 3)
if (D.44681_493 == 2)

D.44697_494 : --> single use.
D.44777_495 = D.44697_494 != 0;

D.44777_495 : --> single use.
D.44779_497 = D.44778_496 & D.44777_495;

D.44778_496 : --> single use.
D.44779_497 = D.44778_496 & D.44777_495;

D.44779_497 : --> single use.
if (D.44779_497 != 0)

D.44781_498 : --> single use.
if (D.44781_498 != 0)

D.44784_499 : --> single use.
if (D.44784_499 != 0)

attr_500 : -->2 uses.
attr_1559 = PHI <attr_506(171), attr_500(167)>
# DEBUG attr => attr_500
if (attr_500 != 0B)
# DEBUG attr => attr_500

D.44590_501 : --> single use.
D.44787_502 = strcasecmp (D.44590_501, "fingerprint");

D.44787_502 : --> single use.
if (D.44787_502 == 0)

D.44619_503 : -->2 uses.
D.47887_1469 = *D.44619_503;
if (D.44619_503 == 0B)
# DEBUG s => D.44619_503

attr_506 : -->2 uses.
attr_1559 = PHI <attr_506(171), attr_500(167)>
# DEBUG attr => attr_506
if (attr_506 != 0B)
# DEBUG attr => attr_506

attr_507 : -->2 uses.
attr_1599 = PHI <attr_548(200), attr_507(172), attr_77(435)>
# DEBUG attr => attr_507
if (attr_507 != 0B)
# DEBUG attr => attr_507

D.44590_508 : -->4 uses.
D.44795_509 = strcasecmp (D.44590_508, "rtcp");
D.44805_520 = strcasecmp (D.44590_508, "ptime");
D.44810_525 = strcasecmp (D.44590_508, "maxptime");
D.44815_530 = strcasecmp (D.44590_508, "crypto");

D.44795_509 : --> single use.
if (D.44795_509 == 0)

D.44619_510 : -->2 uses.
switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_510, 1);
if (D.44619_510 != 0B)

D.44530_511 : --> single use.
switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_510, 1);

got_savp_512 : -->6 uses.
got_savp_1711 = PHI <got_savp_74(131), got_savp_512(130)>
# DEBUG got_savp => got_savp_512
got_savp_74 = PHI <got_savp_512(124), got_savp_512(127), got_savp_512(129), got_savp_512(128), got_savp_384(125)>
got_savp_74 = PHI <got_savp_512(124), got_savp_512(127), got_savp_512(129), got_savp_512(128), got_savp_384(125)>
got_savp_74 = PHI <got_savp_512(124), got_savp_512(127), got_savp_512(129), got_savp_512(128), got_savp_384(125)>
got_savp_384 = got_savp_512 + 1;
got_savp_74 = PHI <got_savp_512(124), got_savp_512(127), got_savp_512(129), got_savp_512(128), got_savp_384(125)>

D.44619_513 : --> single use.
D.47890_1471 = strtol (D.44619_513, 0B, 10);
# DEBUG __nptr => D.44619_513

D.44799_515 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;

D.44471_516 : -->2 uses.
D.44471_516->rtcp_audio_interval_msec = "5000";
D.44800_517 = D.44471_516->rtcp_audio_interval_msec;

D.44800_517 : --> single use.
if (D.44800_517 == 0B)

D.44805_520 : --> single use.
if (D.44805_520 == 0)

D.44619_521 : -->2 uses.
# DEBUG __nptr => D.44619_521
ptime_1472 = strtol (D.44619_521, 0B, 10);
if (D.44619_521 != 0B)

D.44810_525 : --> single use.
if (D.44810_525 == 0)

D.44619_526 : -->2 uses.
# DEBUG __nptr => D.44619_526
maxptime_1473 = strtol (D.44619_526, 0B, 10);
if (D.44619_526 != 0B)

D.44815_530 : --> single use.
if (D.44815_530 == 0)

D.44619_531 : -->2 uses.
D.47900_1474 = *D.44619_531;
if (D.44619_531 == 0B)
# DEBUG s => D.44619_531

D.44471_533 : --> single use.
D.44821_534 = D.44471_533->ndlb;

D.44821_534 : --> single use.
D.44822_535 = D.44821_534 & 4;

D.44822_535 : --> single use.
if (D.44822_535 == 0)

D.44530_536 : --> single use.
D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);

D.44825_537 : -->10 uses.
D.49723_1590 = strcasecmp (D.44825_537, "yes");
D.49724_1591 = strcasecmp (D.44825_537, "on");
D.49725_1592 = strcasecmp (D.44825_537, "true");
D.49726_1593 = strcasecmp (D.44825_537, "t");
D.49727_1594 = strcasecmp (D.44825_537, "enabled");
D.49728_1595 = strcasecmp (D.44825_537, "active");
D.49729_1596 = strcasecmp (D.44825_537, "allow");
D.49730_1597 = switch_is_number (D.44825_537);
# DEBUG __nptr => D.44825_537
D.49731_1598 = strtol (D.44825_537, 0B, 10);
if (D.44825_537 != 0B)
# DEBUG expr => D.44825_537

D.44666_539 : --> single use.
D.44829_540 = D.44666_539 != 257;

D.44829_540 : --> single use.
D.44831_542 = D.44830_541 & D.44829_540;

D.44830_541 : --> single use.
D.44831_542 = D.44830_541 & D.44829_540;

D.44831_542 : --> single use.
if (D.44831_542 != 0)

crypto_544 : -->2 uses.
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));
crypto_tag_1476 = strtol (crypto_544, 0B, 10);
# DEBUG __nptr => crypto_544
# DEBUG crypto => crypto_544

sdp_type_546(D) : -->4 uses.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));

got_crypto_547 : --> single use.
got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
# DEBUG got_crypto => got_crypto_547

attr_548 : -->2 uses.
attr_1599 = PHI <attr_548(200), attr_507(172), attr_77(435)>
# DEBUG attr => attr_548
if (attr_548 != 0B)
# DEBUG attr => attr_548

D.44834_549 : --> single use.
D.44836_551 = D.44834_549 & D.44835_550;

D.44835_550 : --> single use.
D.44836_551 = D.44834_549 & D.44835_550;

D.44836_551 : --> single use.
if (D.44836_551 != 0)

D.44839_552 : --> single use.
if (D.44839_552 == 0)

connection_554 : -->2 uses.
# DEBUG connection => connection_554
if (connection_554 == 0B)
connection_139 = PHI <connection_554(205), connection_555(204)>
# DEBUG connection => connection_554

connection_555 : -->2 uses.
connection_139 = PHI <connection_554(205), connection_555(204)>
if (connection_555 != 0B)

got_video_crypto_556 : -->4 uses.
got_video_crypto_960 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_556(340)>
# DEBUG got_video_crypto => got_video_crypto_556
# DEBUG got_video_crypto => got_video_crypto_556
got_video_crypto_1885 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_136(436)>
got_video_crypto_960 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_556(340)>
got_video_crypto_1738 = PHI <got_video_crypto_57(344), got_video_crypto_556(340)>
# DEBUG got_video_crypto => got_video_crypto_556

map_559 : -->2 uses.
map_1728 = PHI <map_711(271), map_559(207)>
# DEBUG map => map_559
if (map_559 != 0B)
# DEBUG map => map_559

rm_encoding_561 : -->2 uses.
rm_encoding_130 = PHI <rm_encoding_561(209), ""(208)>
if (rm_encoding_561 == 0B)
# DEBUG rm_encoding => rm_encoding_561

D.44848_563 : --> single use.
if (D.44848_563 == 0)

D.44854_564 : --> single use.
if (D.44854_564 == D.44855_566)

D.44750_565 : --> single use.
D.44855_566 = D.44750_565->rm_rate;

D.44855_566 : --> single use.
if (D.44854_564 == D.44855_566)

D.44856_567 : --> single use.
best_te_568 = (switch_payload_t) D.44856_567;

best_te_568 : -->2 uses.
best_te_19 = PHI <best_te_568(213), best_te_1898(218), best_te_1898(212), best_te_1898(219), best_te_1898(270), best_te_1898(217)>
D.44857_569 = (int) best_te_568;
# DEBUG best_te => best_te_568

D.44857_569 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);

D.44858_570 : --> single use.
if (D.44858_570 == 0)

D.44863_571 : --> single use.
if (D.44863_571 == 0)

D.44856_572 : --> single use.
cng_pt_573 = (switch_payload_t) D.44856_572;

cng_pt_573 : -->3 uses.
cng_pt_24 = PHI <cng_pt_1667(213), cng_pt_573(218), cng_pt_1667(212), cng_pt_1667(219), cng_pt_1667(270), cng_pt_573(217)>
cng_pt_24 = PHI <cng_pt_1667(213), cng_pt_573(218), cng_pt_1667(212), cng_pt_1667(219), cng_pt_1667(270), cng_pt_573(217)>
D.44868_575 = (int) cng_pt_573;
# DEBUG cng_pt => cng_pt_573

D.44605_574 : --> single use.
if (D.44605_574 != 0B)

D.44868_575 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);

D.44605_576 : --> single use.
switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

D.44471_577 : --> single use.
D.44869_578 = D.44471_577->cng_pt;

D.44869_578 : --> single use.
switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

D.44877_582 : --> single use.
D.44879_584 = D.44878_583 | D.44877_582;

D.44878_583 : --> single use.
D.44879_584 = D.44878_583 | D.44877_582;

D.44879_584 : --> single use.
if (D.44879_584 != 0)

D.44856_586 : --> single use.
D.44884_587 = (uint32_t) D.44856_586;

D.44884_587 : --> single use.
D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);

D.44885_588 : --> single use.
codec_ms_589 = (int) D.44885_588;

codec_ms_589 : --> single use.
codec_ms_87 = PHI <codec_ms_1883(424), codec_ms_589(224), ptime_1033(223)>
# DEBUG codec_ms => codec_ms_589

D.44856_590 : --> single use.
csui.173_591 = (unsigned char) D.44856_590;

csui.173_591 : -->2 uses.
map_bit_rate_1479 = CSWTCH.174[csui.173_591];
if (csui.173_591 <= 18)
# DEBUG payload => csui.173_591

D.44889_593 : --> single use.
D.44890_594 = strcasecmp (D.44889_593, "g723");

D.44890_594 : --> single use.
if (D.44890_594 == 0)

remote_codec_rate_596 : --> single use.
remote_codec_rate_1493 = PHI <remote_codec_rate_97(269), remote_codec_rate_596(241)>
# DEBUG remote_codec_rate => remote_codec_rate_596
# DEBUG remote_codec_rate => remote_codec_rate_596

D.44893_598 : -->3 uses.
D.47915_1481 = *D.44893_598;
D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_598, D.44854_610, &codec_fmtp);
if (D.44893_598 == 0B)
# DEBUG s => D.44893_598

D.44889_600 : -->2 uses.
D.44897_601 = strcasecmp (D.44889_600, "ilbc");
D.44901_605 = strcasecmp (D.44889_600, "isac");

D.44897_601 : --> single use.
if (D.44897_601 == 0)

D.44901_605 : --> single use.
if (D.44901_605 == 0)

D.44889_608 : --> single use.
D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_598, D.44854_610, &codec_fmtp);

D.44854_610 : --> single use.
D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_598, D.44854_610, &codec_fmtp);

D.44905_611 : --> single use.
if (D.44905_611 == 0)

D.44908_612 : -->2 uses.
map_bit_rate_614 = (uint32_t) D.44908_612;
if (D.44908_612 != 0)

map_bit_rate_614 : --> single use.
map_bit_rate_131 = PHI <map_bit_rate_1480(235), map_bit_rate_614(236)>
# DEBUG map_bit_rate => map_bit_rate_614

D.44911_615 : -->2 uses.
codec_ms_617 = D.44911_615 / 1000;
if (D.44911_615 != 0)

codec_ms_617 : --> single use.
codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>
# DEBUG codec_ms => codec_ms_617

fmtp_remote_codec_rate_618 : -->2 uses.
# DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_618
fmtp_remote_codec_rate_99 = PHI <0(233), 0(425), 0(239), fmtp_remote_codec_rate_618(240), 0(232), 0(234)>
if (fmtp_remote_codec_rate_618 != 0)

attr_619 : -->8 uses.
D.44590_894 = attr_619->a_name;
attr_978 = attr_619->a_next;
crypto_975 = attr_619->a_value;
D.44619_962 = attr_619->a_value;
D.44619_954 = attr_619->a_value;
D.44619_908 = attr_619->a_value;
D.44619_899 = attr_619->a_value;
D.44619_896 = attr_619->a_value;

D.44471_621 : --> single use.
D.44996_622 = D.44471_621->num_codecs;

D.44996_622 : --> single use.
D.44997_623 = D.44996_622 > i_710;

D.44997_623 : --> single use.
D.44999_625 = D.44998_624 & D.44997_623;

D.44998_624 : --> single use.
D.44999_625 = D.44998_624 & D.44997_623;

D.44999_625 : --> single use.
if (D.44999_625 != 0)

i.91_626 : --> single use.
D.44918_627 = i.91_626 * 4;

D.44918_627 : --> single use.
D.44919_628 = codec_array_84 + D.44918_627;

D.44919_628 : --> single use.
imp_629 = *D.44919_628;

imp_629 : -->21 uses.
D.44921_633 = imp_629->codec_type;
codec_rate_632 = imp_629->samples_per_second;
D.44920_630 = imp_629->bits_per_second;
D.44929_698 = imp_629->microseconds_per_packet;
D.44927_696 = imp_629->ianacode;
D.44926_695 = imp_629->iananame;
D.44929_707 = imp_629->microseconds_per_packet;
D.44927_705 = imp_629->ianacode;
D.44926_704 = imp_629->iananame;
D.44929_693 = imp_629->microseconds_per_packet;
D.44929_687 = imp_629->microseconds_per_packet;
D.44984_686 = imp_629->samples_per_second;
D.44926_685 = imp_629->iananame;
D.44926_656 = imp_629->iananame;
near_matches[nm_idx_1139].imp = imp_629;
D.44947_658 = imp_629->actual_samples_per_second;
D.44926_637 = imp_629->iananame;
D.44927_638 = imp_629->ianacode;
D.44929_640 = imp_629->microseconds_per_packet;
D.44927_653 = imp_629->ianacode;
matches[m_idx_1487].imp = imp_629;
# DEBUG imp => imp_629

D.44920_630 : --> single use.
bit_rate_631 = (uint32_t) D.44920_630;

bit_rate_631 : -->5 uses.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
D.44951_664 = bit_rate_631 != 0;
D.44956_667 = map_bit_rate_132 != bit_rate_631;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# DEBUG bit_rate => bit_rate_631

codec_rate_632 : -->8 uses.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
codec_rate.94_702 = (int) codec_rate_632;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
if (remote_codec_rate_96 != codec_rate_632)
D.44973_678 = remote_codec_rate_96 != codec_rate_632;
D.44972_677 = codec_rate_632 != 0;
if (remote_codec_rate_1493 == codec_rate_632)
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# DEBUG codec_rate => codec_rate_632

D.44921_633 : --> single use.
if (D.44921_633 != 0)

D.44856_634 : --> single use.
D.44924_635 = (int) D.44856_634;

D.44924_635 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

remote_codec_rate.92_636 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

D.44926_637 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

D.44927_638 : --> single use.
D.44928_639 = (int) D.44927_638;

D.44928_639 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

D.44929_640 : --> single use.
D.44930_641 = D.44929_640 / 1000;

D.44930_641 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

D.44889_642 : -->6 uses.
D.47919_1483 = *D.44889_642;
D.44979_683 = strcasecmp (D.44889_642, "pcmu");
D.44977_681 = strcasecmp (D.44889_642, "pcma");
D.44963_672 = strcasecmp (D.44889_642, "isac");
D.44960_670 = strcasecmp (D.44889_642, "ilbc");
if (D.44889_642 == 0B)
# DEBUG s => D.44889_642

D.44471_644 : --> single use.
D.44821_645 = D.44471_644->ndlb;

D.44821_645 : --> single use.
D.44936_646 = (int) D.44821_645;

D.44936_646 : --> single use.
D.44937_647 = D.44936_646 & 1;

D.44937_647 : --> single use.
if (D.44937_647 != 0)

D.44856_649 : --> single use.
D.44924_650 = (int) D.44856_649;

D.44924_650 : -->2 uses.
match_655 = D.44924_650 == D.44928_654;
if (D.44924_650 <= 95)

D.44927_653 : --> single use.
D.44928_654 = (int) D.44927_653;

D.44928_654 : --> single use.
match_655 = D.44924_650 == D.44928_654;

match_655 : --> single use.
match_1 = PHI <match_655(246), match_661(251), match_661(250)>
# DEBUG match => match_655

D.44926_656 : --> single use.
D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);

D.44944_657 : --> single use.
if (D.44944_657 == 0)

D.44947_658 : --> single use.
iftmp.93_765 = fmtp_remote_codec_rate_99 == D.44947_658;

match_661 : -->2 uses.
match_1 = PHI <match_655(246), match_661(251), match_661(250)>
match_1 = PHI <match_655(246), match_661(251), match_661(250)>
# DEBUG match => match_661

D.44950_663 : --> single use.
D.44952_665 = D.44950_663 & D.44951_664;

D.44951_664 : --> single use.
D.44952_665 = D.44950_663 & D.44951_664;

D.44952_665 : --> single use.
if (D.44952_665 != 0)

D.44955_666 : --> single use.
D.44957_668 = D.44956_667 & D.44955_666;

D.44956_667 : --> single use.
D.44957_668 = D.44956_667 & D.44955_666;

D.44957_668 : --> single use.
if (D.44957_668 != 0)

.MEM_669 : --> single use.
.MEM_1857 = PHI <.MEM_1106(94), .MEM_669(419)>

D.44960_670 : --> single use.
if (D.44960_670 != 0)

got_avp_671 : -->6 uses.
got_avp_1740 = PHI <got_avp_68(131), got_avp_671(130)>
# DEBUG got_avp => got_avp_671
got_avp_68 = PHI <got_avp_671(124), got_avp_671(127), got_avp_671(129), got_avp_388(128), got_avp_671(125)>
got_avp_388 = got_avp_671 + 1;
got_avp_68 = PHI <got_avp_671(124), got_avp_671(127), got_avp_671(129), got_avp_388(128), got_avp_671(125)>
got_avp_68 = PHI <got_avp_671(124), got_avp_671(127), got_avp_671(129), got_avp_388(128), got_avp_671(125)>
got_avp_68 = PHI <got_avp_671(124), got_avp_671(127), got_avp_671(129), got_avp_388(128), got_avp_671(125)>

D.44963_672 : --> single use.
if (D.44963_672 != 0)

D.44950_674 : --> single use.
D.44969_676 = D.44950_674 & D.44968_675;

D.44968_675 : --> single use.
D.44969_676 = D.44950_674 & D.44968_675;

D.44969_676 : --> single use.
if (D.44969_676 != 0)

D.44972_677 : --> single use.
D.44974_679 = D.44973_678 & D.44972_677;

D.44973_678 : --> single use.
D.44974_679 = D.44973_678 & D.44972_677;

D.44974_679 : --> single use.
if (D.44974_679 != 0)

best_te_680 : -->9 uses.
best_te_1898 = PHI <best_te_19(271), best_te_680(207)>
# DEBUG best_te => best_te_680
best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>
best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>

D.44977_681 : --> single use.
if (D.44977_681 == 0)

D.44979_683 : --> single use.
if (D.44979_683 == 0)

D.44926_685 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);

D.44984_686 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);

D.44929_687 : --> single use.
D.44930_688 = D.44929_687 / 1000;

D.44930_688 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);

D.44989_689 : --> single use.
D.44991_691 = D.44990_690 & D.44989_689;

D.44990_690 : --> single use.
D.44991_691 = D.44990_690 & D.44989_689;

D.44991_691 : --> single use.
if (D.44991_691 != 0)

D.44993_692 : --> single use.
if (D.44993_692 != D.44929_693)

D.44929_693 : --> single use.
if (D.44993_692 != D.44929_693)

D.44926_695 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);

D.44927_696 : --> single use.
D.44928_697 = (int) D.44927_696;

D.44928_697 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);

D.44929_698 : --> single use.
D.44930_699 = D.44929_698 / 1000;

D.44930_699 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);

remote_codec_rate.92_700 : --> single use.
near_matches[nm_idx_1139].rate = remote_codec_rate.92_700;

nm_idx_701 : --> single use.
nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
# DEBUG nm_idx => nm_idx_701

codec_rate.94_702 : --> single use.
matches[m_idx_1487].rate = codec_rate.94_702;

m_idx_703 : -->3 uses.
m_idx_105 = PHI <m_idx_703(268), m_idx_103(271), m_idx_102(270), m_idx_1869(207)>
m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>
if (m_idx_703 > 29)
# DEBUG m_idx => m_idx_703

D.44926_704 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);

D.44927_705 : --> single use.
D.44928_706 = (int) D.44927_705;

D.44928_706 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);

D.44929_707 : --> single use.
D.44930_708 = D.44929_707 / 1000;

D.44930_708 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);

i_710 : -->3 uses.
i_1622 = PHI <i_710(269), 0(241)>
D.44998_624 = total_codecs_85 > i_710;
D.44997_623 = D.44996_622 > i_710;
# DEBUG i => i_710
# DEBUG i => i_710

map_711 : -->2 uses.
map_1728 = PHI <map_711(271), map_559(207)>
# DEBUG map => map_711
if (map_711 != 0B)
# DEBUG map => map_711

D.45001_712 : --> single use.
D.45002_713 = D.45001_712 == 1;

D.45002_713 : --> single use.
D.45004_715 = D.45003_714 & D.45002_713;

D.45003_714 : --> single use.
D.45004_715 = D.45003_714 & D.45002_713;

D.45004_715 : --> single use.
if (D.45004_715 != 0)

D.45007_719 : --> single use.
D.45009_721 = D.45008_720 & D.45007_719;

D.45008_720 : --> single use.
D.45009_721 = D.45008_720 & D.45007_719;

D.45009_721 : --> single use.
if (D.45009_721 != 0)

near_rate.96_724 : -->3 uses.
near_rate_725 = (uint32_t) near_rate.96_724;
near_rate.96_869 = PHI <near_rate.96_724(279), near_rate.96_724(280)>
near_rate.96_869 = PHI <near_rate.96_724(279), near_rate.96_724(280)>

near_rate_725 : -->2 uses.
near_rate_145 = PHI <near_rate_729(276), near_rate_725(275)>
if (near_rate_725 == 0)
# DEBUG near_rate => near_rate_725

near_match_726 : -->3 uses.
D.45013_728 = near_match_726->iananame;
near_rate_729 = near_match_726->samples_per_second;
timp_134 = PHI <timp_732(278), near_match_726(277)>
# DEBUG near_match => near_match_726

near_map_727 : -->2 uses.
near_map_863 = PHI <near_map_727(279), near_map_727(280)>
near_map_863 = PHI <near_map_727(279), near_map_727(280)>
# DEBUG near_map => near_map_727

D.45013_728 : --> single use.
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);

near_rate_729 : --> single use.
near_rate_145 = PHI <near_rate_729(276), near_rate_725(275)>

num_731 : --> single use.
if (num_731 != 0)
# DEBUG num => num_731

timp_732 : --> single use.
timp_134 = PHI <timp_732(278), near_match_726(277)>
# DEBUG timp => timp_732

D.45024_734 : --> single use.
D.45025_735 = D.45024_734 / 1000;

D.45025_735 : --> single use.
if (D.45025_735 <= maxptime_1040)

j_736 : -->2 uses.
j_1845 = PHI <j_736(282), 0(274)>
if (nm_idx_119 > j_736)
# DEBUG j => j_736
# DEBUG j => j_736

D.45026_737 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);

D.45024_738 : --> single use.
D.45025_739 = D.45024_738 / 1000;

D.45025_739 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);

D.45027_740 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);

D.45028_742 : --> single use.
matches[0].codec_idx = D.45028_742;

D.45034_747 : -->3 uses.
D.45037_752 = D.45034_747->rm_pt;
D.45036_750 = D.45034_747->rm_fmtp;
D.45035_748 = D.45034_747->rm_encoding;

D.45035_748 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

D.45036_750 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

D.45037_752 : --> single use.
D.45038_753 = (uint32_t) D.45037_752;

D.45038_753 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

D.45039_754 : -->2 uses.
D.45041_757 = D.45039_754->microseconds_per_packet;
D.45040_755 = D.45039_754->samples_per_second;

D.45040_755 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

D.45041_757 : --> single use.
D.45042_758 = D.45041_757 / 1000;

D.45042_758 : --> single use.
D.45043_759 = (uint32_t) D.45042_758;

D.45043_759 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

pmap_760 : -->22 uses.
pmap_760->iananame = D.45052_770;
pmap_760->recv_pt = D.45054_772;
pmap_760->rm_rate = D.45055_773;
pmap_760->adv_rm_rate = D.45055_773;
pmap_760->rm_rate = D.45059_777;
pmap_760->codec_ms = D.45062_780;
pmap_760->bitrate = D.45064_782;
pmap_760->channels = D.47922_146;
pmap_760->adv_channels = 1;
pmap_760->adv_channels = 2;
pmap_760->channels = 2;
pmap_760->channels = 1;
pmap_760->adv_channels = D.47922_146;
pmap_760->remote_sdp_ip = D.45086_796;
pmap_760->remote_sdp_port = D.45087_798;
pmap_760->rm_fmtp = D.45088_800;
pmap_760->agreed_pt = D.45054_802;
pmap_760->recv_pt = D.45054_806;
D.45048_766 = pmap_760->pt;
pmap_760->current = 1;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_760;
pmap_760->rm_encoding = D.45050_768;
# DEBUG pmap => pmap_760

mimp_761 : -->7 uses.
D.45051_775 = mimp_761->iananame;
D.45055_773 = mimp_761->samples_per_second;
D.45051_769 = mimp_761->iananame;
D.45063_781 = mimp_761->bits_per_second;
D.45060_778 = mimp_761->microseconds_per_packet;
D.45059_777 = mimp_761->actual_samples_per_second;
smh_186->negotiated_codecs[D.44655_803] = mimp_761;
# DEBUG mimp => mimp_761

mmap_762 : -->8 uses.
D.45053_771 = mmap_762->rm_pt;
D.45049_767 = mmap_762->rm_encoding;
D.45066_783 = mmap_762->rm_params;
D.45049_787 = mmap_762->rm_encoding;
D.45053_801 = mmap_762->rm_pt;
D.45079_799 = mmap_762->rm_fmtp;
D.45079_790 = mmap_762->rm_fmtp;
D.45053_805 = mmap_762->rm_pt;
# DEBUG mmap => mmap_762

D.44605_764 : -->2 uses.
switch_rtp_set_default_payload (D.44605_764, D.45048_766);
if (D.44605_764 != 0B)

iftmp.93_765 : --> single use.
iftmp.93_144 = PHI <iftmp.93_765(249), 0(247), 1(248)>

D.45048_766 : --> single use.
switch_rtp_set_default_payload (D.44605_764, D.45048_766);

D.45049_767 : --> single use.
D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);

D.45050_768 : --> single use.
pmap_760->rm_encoding = D.45050_768;

D.45051_769 : --> single use.
D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);

D.45052_770 : --> single use.
pmap_760->iananame = D.45052_770;

D.45053_771 : --> single use.
D.45054_772 = (unsigned char) D.45053_771;

D.45054_772 : --> single use.
pmap_760->recv_pt = D.45054_772;

D.45055_773 : -->2 uses.
pmap_760->adv_rm_rate = D.45055_773;
pmap_760->rm_rate = D.45055_773;

got_udptl_774 : -->2 uses.
got_udptl_1743 = PHI <got_udptl_1868(131), got_udptl_774(132), got_udptl_774(133)>
got_udptl_1743 = PHI <got_udptl_1868(131), got_udptl_774(132), got_udptl_774(133)>

D.45051_775 : --> single use.
D.45056_776 = strcasecmp (D.45051_775, "g722");

D.45056_776 : --> single use.
if (D.45056_776 != 0)

D.45059_777 : --> single use.
pmap_760->rm_rate = D.45059_777;

D.45060_778 : --> single use.
D.45061_779 = D.45060_778 / 1000;

D.45061_779 : --> single use.
D.45062_780 = (uint32_t) D.45061_779;

D.45062_780 : --> single use.
pmap_760->codec_ms = D.45062_780;

D.45063_781 : --> single use.
D.45064_782 = (uint32_t) D.45063_781;

D.45064_782 : --> single use.
pmap_760->bitrate = D.45064_782;

D.45066_783 : -->2 uses.
# DEBUG __nptr => D.45066_783
D.47922_1485 = strtol (D.45066_783, 0B, 10);
if (D.45066_783 != 0B)

D.45049_787 : --> single use.
D.45070_788 = strcasecmp (D.45049_787, "opus");

D.45070_788 : --> single use.
if (D.45070_788 == 0)

D.45079_790 : -->3 uses.
D.47926_1486 = *D.45079_790;
D.45082_793 = switch_stristr ("stereo=1", D.45079_790);
if (D.45079_790 == 0B)
# DEBUG s => D.45079_790

m_idx_792 : -->7 uses.
m_idx_1487 = PHI <m_idx_100(269), m_idx_792(241)>
# DEBUG m_idx => m_idx_792
m_idx_102 = PHI <m_idx_100(269), m_idx_792(241)>
m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>

D.45082_793 : --> single use.
if (D.45082_793 != 0B)

.MEM_794 : --> single use.
.MEM_1101 = PHI <.MEM_1198(42), .MEM_794(416), .MEM_1200(52)>

D.45085_795 : --> single use.
D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);

D.45086_796 : --> single use.
pmap_760->remote_sdp_ip = D.45086_796;

D.44697_797 : --> single use.
D.45087_798 = (short unsigned int) D.44697_797;

D.45087_798 : --> single use.
pmap_760->remote_sdp_port = D.45087_798;

D.45079_799 : --> single use.
D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);

D.45088_800 : --> single use.
pmap_760->rm_fmtp = D.45088_800;

D.45053_801 : --> single use.
D.45054_802 = (unsigned char) D.45053_801;

D.45054_802 : --> single use.
pmap_760->agreed_pt = D.45054_802;

D.44655_803 : -->2 uses.
D.45089_804 = D.44655_803 + 1;
smh_186->negotiated_codecs[D.44655_803] = mimp_761;

D.45089_804 : --> single use.
smh_186->num_negotiated_codecs = D.45089_804;

D.45053_805 : --> single use.
D.45054_806 = (unsigned char) D.45053_805;

D.45054_806 : --> single use.
pmap_760->recv_pt = D.45054_806;

j_807 : -->2 uses.
j_1881 = PHI <j_807(303), 0(286)>
# DEBUG j => j_807
if (j_807 < m_idx_1715)
# DEBUG j => j_807

D.44750_808 : --> single use.
D.44762_809 = D.44750_808->remote_sdp_port;

D.44762_809 : --> single use.
D.44767_810 = (int) D.44762_809;

D.44767_810 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.44767_810);

D.44530_811 : --> single use.
switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);

D.44750_812 : --> single use.
D.44760_813 = D.44750_812->remote_sdp_ip;

D.44760_813 : --> single use.
switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);

D.44530_814 : --> single use.
switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);

D.44750_815 : --> single use.
D.45092_816 = D.44750_815->recv_pt;

D.45092_816 : --> single use.
D.45093_817 = (int) D.45092_816;

D.45093_817 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45093_817);

D.44530_818 : --> single use.
switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);

m_idx_819 : -->2 uses.
m_idx_910 = PHI <m_idx_109(391), m_idx_819(379)>
# DEBUG m_idx => m_idx_819
m_idx_953 = PHI <m_idx_109(391), m_idx_819(379)>

D.44471_821 : --> single use.
D.45098_822 = D.44471_821->codec_flags;

D.45098_822 : --> single use.
D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);

D.45099_823 : --> single use.
if (D.45099_823 == 0)

D.45107_826 : --> single use.
if (D.45107_826 != 0)

D.44530_827 : --> single use.
D.45109_828 = switch_channel_test_flag (D.44530_827, 93);

D.45109_828 : --> single use.
if (D.45109_828 != 0)

D.44471_829 : --> single use.
D.45110_830 = D.44471_829->te;

D.45110_830 : --> single use.
D.45111_831 = (int) D.45110_830;

D.45111_831 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);

D.44471_832 : --> single use.
best_te_833 = D.44471_832->te;

best_te_833 : -->2 uses.
# DEBUG best_te => best_te_833
if (best_te_833 != 0)
best_te_1860 = PHI <best_te_833(315), best_te_1624(312)>
# DEBUG best_te => best_te_833

D.45114_834 : --> single use.
if (D.45114_834 == 1)

D.44471_835 : --> single use.
# DEBUG D#11 => D.44471_835->te
D.44471_835->te = best_te_1860;

D.44857_837 : -->2 uses.
switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_837);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);

D.44530_838 : --> single use.
switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);

D.44471_839 : --> single use.
D.44471_839->dtmf_type = 0;

D.44605_840 : -->2 uses.
switch_rtp_set_telephony_event (D.44605_840, best_te_1860);
if (D.44605_840 != 0B)

nm_idx_841 : -->2 uses.
nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>
nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>

D.44530_842 : --> single use.
switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_837);

nm_idx_843 : -->6 uses.
nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>

D.44471_845 : -->2 uses.
D.44471_845->recv_te = best_te_1860;
D.44471_845->te = best_te_1860;

D.45120_848 : -->3 uses.
switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_848);
switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_848);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);

D.44530_849 : --> single use.
switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);

D.44471_850 : --> single use.
D.44471_850->dtmf_type = 0;

D.44605_851 : -->2 uses.
switch_rtp_set_telephony_event (D.44605_851, best_te_1860);
if (D.44605_851 != 0B)

D.44530_853 : --> single use.
switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_848);

D.44605_855 : --> single use.
switch_rtp_set_telephony_recv_event (D.44605_855, best_te_1860);

D.44530_856 : --> single use.
switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_848);

D.45124_858 : -->10 uses.
D.49735_1600 = strcasecmp (D.45124_858, "no");
D.49736_1601 = strcasecmp (D.45124_858, "off");
D.49737_1602 = strcasecmp (D.45124_858, "false");
D.49738_1603 = strcasecmp (D.45124_858, "f");
D.49739_1604 = strcasecmp (D.45124_858, "disabled");
D.49740_1605 = strcasecmp (D.45124_858, "inactive");
D.49741_1606 = strcasecmp (D.45124_858, "disallow");
D.49742_1607 = switch_is_number (D.45124_858);
# DEBUG __nptr => D.45124_858
D.49743_1608 = strtol (D.45124_858, 0B, 10);
if (D.45124_858 != 0B)
# DEBUG expr => D.45124_858

D.44530_860 : --> single use.
switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);

D.44471_861 : -->3 uses.
D.44471_861->te = 0;
# DEBUG D#12 => D.44471_861->recv_te
D.44471_861->recv_te = 0;
D.44471_861->dtmf_type = 1;

near_map_863 : --> single use.
matches[0].map = near_map_863;

i_864 : -->2 uses.
i.99_982 = (unsigned int) i_864;
i_1020 = i_864 + 1;

D.44530_866 : --> single use.
switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);

D.44471_867 : -->3 uses.
D.44471_867->te = 0;
# DEBUG D#13 => D.44471_867->recv_te
D.44471_867->recv_te = 0;
D.44471_867->dtmf_type = 2;

near_rate.96_869 : --> single use.
matches[0].rate = near_rate.96_869;

.MEM_870 : -->5 uses.
# VUSE <.MEM_870>
D.45238_986 = imp_985->codec_type;
# VUSE <.MEM_870>
imp_985 = *D.45237_984;
# .MEM_1419 = VDEF <.MEM_870>
D.45241_988 = switch_channel_direction (D.44530_987);
# VUSE <.MEM_870>
D.44530_987 = session_161(D)->channel;
.MEM_1160 = PHI <.MEM_870(380), .MEM_1420(382), .MEM_1421(389), .MEM_1421(388), .MEM_1424(390)>

timp_872 : -->4 uses.
D.45024_738 = timp_872->microseconds_per_packet;
D.45027_740 = timp_872->actual_samples_per_second;
matches[0].imp = timp_872;
D.45026_737 = timp_872->iananame;

D.44697_873 : --> single use.
if (D.44697_873 != 0)

D.44530_878 : --> single use.
switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);

connection_879 : -->2 uses.
# DEBUG connection => connection_879
if (connection_879 == 0B)
connection_110 = PHI <connection_879(335), connection_880(334)>
# DEBUG connection => connection_879

connection_880 : -->2 uses.
connection_110 = PHI <connection_879(335), connection_880(334)>
if (connection_880 != 0B)

map_883 : -->2 uses.
map_1620 = PHI <map_1021(392), map_883(337)>
# DEBUG map => map_883
if (map_883 != 0B)
# DEBUG map => map_883

D.45137_884 : --> single use.
if (D.45137_884 != 0)

D.45140_885 : --> single use.
if (D.45140_885 != 0)

attr_886 : -->2 uses.
attr_1850 = PHI <attr_892(344), attr_886(340)>
# DEBUG attr => attr_886
if (attr_886 != 0B)
# DEBUG attr => attr_886

D.44590_887 : --> single use.
D.45143_888 = strcasecmp (D.44590_887, "fingerprint");

D.45143_888 : --> single use.
if (D.45143_888 == 0)

D.44619_889 : -->2 uses.
D.47939_1495 = *D.44619_889;
if (D.44619_889 == 0B)
# DEBUG s => D.44619_889

attr_892 : -->2 uses.
attr_1850 = PHI <attr_892(344), attr_886(340)>
# DEBUG attr => attr_892
if (attr_892 != 0B)
# DEBUG attr => attr_892

attr_893 : -->2 uses.
attr_619 = PHI <attr_978(376), attr_893(345), attr_62(436)>
# DEBUG attr => attr_893
if (attr_893 != 0B)
# DEBUG attr => attr_893

D.44590_894 : -->4 uses.
D.45151_895 = strcasecmp (D.44590_894, "framerate");
D.45154_898 = strcasecmp (D.44590_894, "rtcp-fb");
D.45219_961 = strcasecmp (D.44590_894, "crypto");
D.45168_907 = strcasecmp (D.44590_894, "rtcp");

D.45151_895 : --> single use.
if (D.45151_895 == 0)

D.44619_896 : --> single use.
if (D.44619_896 != 0B)

j_897 : --> single use.
D.45028_742 = near_matches[j_897].codec_idx;

D.45154_898 : --> single use.
if (D.45154_898 == 0)

D.44619_899 : -->3 uses.
D.47943_1497 = *D.44619_899;
D.45160_902 = switch_stristr ("fir", D.44619_899);
if (D.44619_899 == 0B)
# DEBUG s => D.44619_899

nm_idx_901 : -->2 uses.
nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
nm_idx_119 = PHI <nm_idx_1139(268), nm_idx_117(271), nm_idx_901(270), nm_idx_1749(207)>

D.45160_902 : --> single use.
if (D.45160_902 != 0B)

D.45163_903 : --> single use.
D.45164_904 = D.45163_903 + 1;

D.45164_904 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45164_904;

D.44471_905 : --> single use.
D.44471_905->rtcp_video_interval_msec = "10000";

m_idx_906 : -->5 uses.
m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
if (m_idx_906 > j_1067)
greedy_sort (smh_186, &matches, m_idx_906, codec_array_84, total_codecs_85);
if (m_idx_906 != 0)
# DEBUG m_idx => m_idx_906

D.45168_907 : --> single use.
if (D.45168_907 == 0)

D.44619_908 : -->4 uses.
# DEBUG __s1 => D.44619_908
D.45174_911 = MEM[(const unsigned char *)D.44619_908];
D.45185_921 = MEM[(const unsigned char *)D.44619_908 + 1B];
switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_908, 1);
if (D.44619_908 != 0B)

m_idx_910 : -->7 uses.
m_idx_1018 = m_idx_910 + 1;
matches[m_idx_910].map = map_1620;
matches[m_idx_910].imp = imp_985;
m_idx_109 = PHI <m_idx_910(380), m_idx_910(382), m_idx_910(389), m_idx_910(388), m_idx_1018(390)>
m_idx_109 = PHI <m_idx_910(380), m_idx_910(382), m_idx_910(389), m_idx_910(388), m_idx_1018(390)>
m_idx_109 = PHI <m_idx_910(380), m_idx_910(382), m_idx_910(389), m_idx_910(388), m_idx_1018(390)>
m_idx_109 = PHI <m_idx_910(380), m_idx_910(382), m_idx_910(389), m_idx_910(388), m_idx_1018(390)>

D.45174_911 : --> single use.
# DEBUG D#78 => (int) D.45174_911
if (D.45174_911 == 49)

D.45185_921 : --> single use.
# DEBUG D#79 => (int) D.45185_921
if (D.45185_921 == 0)

D.44530_952 : --> single use.
switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_908, 1);

m_idx_953 : -->2 uses.
m_idx_819 = PHI <m_idx_953(392), 0(337)>
# DEBUG m_idx => m_idx_953
m_idx_906 = PHI <m_idx_953(392), 0(337)>

D.44619_954 : --> single use.
D.47946_1499 = strtol (D.44619_954, 0B, 10);
# DEBUG __nptr => D.44619_954

D.45213_956 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45213_956;

D.44471_957 : -->2 uses.
D.44471_957->rtcp_video_interval_msec = "5000";
D.45214_958 = D.44471_957->rtcp_video_interval_msec;

D.45214_958 : --> single use.
if (D.45214_958 == 0B)

got_video_crypto_959 : -->5 uses.
D.45266_1024 = got_video_crypto_959 <= 0;
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>

got_video_crypto_960 : -->2 uses.
got_video_crypto_556 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
# DEBUG got_video_crypto => got_video_crypto_960
got_video_crypto_959 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>

D.45219_961 : --> single use.
if (D.45219_961 == 0)

D.44619_962 : -->2 uses.
D.47950_1500 = *D.44619_962;
if (D.44619_962 == 0B)
# DEBUG s => D.44619_962

D.44471_964 : --> single use.
D.44821_965 = D.44471_964->ndlb;

D.44821_965 : --> single use.
D.44822_966 = D.44821_965 & 4;

D.44822_966 : --> single use.
if (D.44822_966 == 0)

D.44530_967 : --> single use.
D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);

D.45227_968 : -->10 uses.
D.49747_1610 = strcasecmp (D.45227_968, "yes");
D.49748_1611 = strcasecmp (D.45227_968, "on");
D.49749_1612 = strcasecmp (D.45227_968, "true");
D.49750_1613 = strcasecmp (D.45227_968, "t");
D.49751_1614 = strcasecmp (D.45227_968, "enabled");
D.49752_1615 = strcasecmp (D.45227_968, "active");
D.49753_1616 = strcasecmp (D.45227_968, "allow");
D.49754_1617 = switch_is_number (D.45227_968);
# DEBUG __nptr => D.45227_968
D.49755_1618 = strtol (D.45227_968, 0B, 10);
if (D.45227_968 != 0B)
# DEBUG expr => D.45227_968

got_crypto_969 : -->8 uses.
D.44834_549 = got_crypto_969 == -1;
D.45003_714 = got_crypto_969 <= 0;
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>

D.44666_970 : --> single use.
D.44829_971 = D.44666_970 != 257;

D.44829_971 : --> single use.
D.44831_973 = D.44830_972 & D.44829_971;

D.44830_972 : --> single use.
D.44831_973 = D.44830_972 & D.44829_971;

D.44831_973 : --> single use.
if (D.44831_973 != 0)

crypto_975 : -->2 uses.
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));
crypto_tag_1502 = strtol (crypto_975, 0B, 10);
# DEBUG __nptr => crypto_975
# DEBUG crypto => crypto_975

got_video_crypto_977 : --> single use.
got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
# DEBUG got_video_crypto => got_video_crypto_977

attr_978 : -->2 uses.
attr_619 = PHI <attr_978(376), attr_893(345), attr_62(436)>
# DEBUG attr => attr_978
if (attr_978 != 0B)
# DEBUG attr => attr_978

rm_encoding_979 : -->2 uses.
rm_encoding_137 = PHI <rm_encoding_979(378), ""(377)>
if (rm_encoding_979 == 0B)
# DEBUG rm_encoding => rm_encoding_979

i.99_982 : --> single use.
D.45236_983 = i.99_982 * 4;

D.45236_983 : --> single use.
D.45237_984 = codec_array_84 + D.45236_983;

D.45237_984 : --> single use.
imp_985 = *D.45237_984;

imp_985 : -->9 uses.
D.45238_986 = imp_985->codec_type;
D.45250_994 = imp_985->ianacode;
D.45249_993 = imp_985->iananame;
D.45250_1007 = imp_985->ianacode;
D.45249_1010 = imp_985->iananame;
D.45263_1014 = imp_985->samples_per_second;
matches[m_idx_910].imp = imp_985;
D.45249_1015 = imp_985->iananame;
D.45250_1016 = imp_985->ianacode;
# DEBUG imp => imp_985

D.45238_986 : --> single use.
if (D.45238_986 != 1)

D.44530_987 : --> single use.
D.45241_988 = switch_channel_direction (D.44530_987);

D.45241_988 : --> single use.
if (D.45241_988 == 0)

D.44530_989 : --> single use.
D.45244_990 = switch_channel_test_flag (D.44530_989, 114);

D.45244_990 : --> single use.
if (D.45244_990 != 0)

D.45247_991 : --> single use.
D.45248_992 = (int) D.45247_991;

D.45248_992 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);

D.45249_993 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);

D.45250_994 : --> single use.
D.45251_995 = (int) D.45250_994;

D.45251_995 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);

D.45255_996 : -->2 uses.
D.47957_1503 = *D.45255_996;
if (D.45255_996 == 0B)
# DEBUG s => D.45255_996

D.44471_998 : --> single use.
D.44821_999 = D.44471_998->ndlb;

D.44821_999 : --> single use.
D.44936_1000 = (int) D.44821_999;

D.44936_1000 : --> single use.
D.44937_1001 = D.44936_1000 & 1;

D.44937_1001 : --> single use.
if (D.44937_1001 != 0)

D.45247_1003 : --> single use.
D.45248_1004 = (int) D.45247_1003;

D.45248_1004 : -->2 uses.
vmatch_1009 = D.45248_1004 == D.45251_1008;
if (D.45248_1004 <= 95)

dmaxptime_1005 : -->4 uses.
maxptime_1040 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(167)>
maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>
# DEBUG maxptime => dmaxptime_1005
maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>
# DEBUG maxptime => dmaxptime_1005
maxptime_1040 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(167)>
# DEBUG maxptime => dmaxptime_1005

sendonly_1006 : -->2 uses.
D.44624_335 = sendonly_1006 != 1;
D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_1006);

D.45250_1007 : --> single use.
D.45251_1008 = (int) D.45250_1007;

D.45251_1008 : --> single use.
vmatch_1009 = D.45248_1004 == D.45251_1008;

vmatch_1009 : --> single use.
vmatch_138 = PHI <vmatch_1009(386), vmatch_1012(387)>
# DEBUG vmatch => vmatch_1009

D.45249_1010 : --> single use.
D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);

D.45259_1011 : --> single use.
vmatch_1012 = D.45259_1011 == 0;

vmatch_1012 : --> single use.
vmatch_138 = PHI <vmatch_1009(386), vmatch_1012(387)>
# DEBUG vmatch => vmatch_1012

D.45262_1013 : --> single use.
if (D.45262_1013 == D.45263_1014)

D.45263_1014 : --> single use.
if (D.45262_1013 == D.45263_1014)

D.45249_1015 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);

D.45250_1016 : --> single use.
D.45251_1017 = (int) D.45250_1016;

D.45251_1017 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);

m_idx_1018 : --> single use.
m_idx_109 = PHI <m_idx_910(380), m_idx_910(382), m_idx_910(389), m_idx_910(388), m_idx_1018(390)>
# DEBUG m_idx => m_idx_1018

i_1020 : -->2 uses.
i_864 = PHI <i_1020(391), 0(379)>
# DEBUG i => i_1020
if (total_codecs_85 > i_1020)
# DEBUG i => i_1020

map_1021 : -->2 uses.
map_1620 = PHI <map_1021(392), map_883(337)>
# DEBUG map => map_1021
if (map_1021 != 0B)
# DEBUG map => map_1021

D.45001_1022 : --> single use.
D.45002_1023 = D.45001_1022 == 1;

D.45002_1023 : --> single use.
D.45267_1025 = D.45266_1024 & D.45002_1023;

D.45266_1024 : --> single use.
D.45267_1025 = D.45266_1024 & D.45002_1023;

D.45267_1025 : --> single use.
if (D.45267_1025 != 0)

D.45274_1031 : -->3 uses.
D.45277_1036 = D.45274_1031->rm_pt;
D.45276_1034 = D.45274_1031->rm_fmtp;
D.45275_1032 = D.45274_1031->rm_encoding;

D.45275_1032 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

ptime_1033 : -->7 uses.
codec_ms_87 = PHI <codec_ms_1883(424), codec_ms_589(224), ptime_1033(223)>
if (ptime_1033 == 0)
# DEBUG codec_ms => ptime_1033
codec_ms_1883 = PHI <maxptime_1040(221), ptime_1033(222)>
D.44989_689 = ptime_1033 != 0;
if (ptime_1033 == 0)
D.44878_583 = ptime_1033 > maxptime_1040;
D.44877_582 = ptime_1033 == 0;
# DEBUG codec_ms => ptime_1033

D.45276_1034 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

dptime_1035 : -->4 uses.
ptime_1033 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(167)>
ptime_1475 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(435)>
# DEBUG ptime => dptime_1035
ptime_1475 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(435)>
# DEBUG ptime => dptime_1035
ptime_1033 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(167)>
# DEBUG ptime => dptime_1035

D.45277_1036 : --> single use.
D.45278_1037 = (uint32_t) D.45277_1036;

D.45278_1037 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

D.45279_1038 : -->2 uses.
D.45281_1041 = D.45279_1038->microseconds_per_packet;
D.45280_1039 = D.45279_1038->samples_per_second;

D.45280_1039 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

maxptime_1040 : -->5 uses.
codec_ms_1883 = PHI <maxptime_1040(221), ptime_1033(222)>
if (D.45025_735 <= maxptime_1040)
D.44878_583 = ptime_1033 > maxptime_1040;
if (maxptime_1040 == 0)
if (maxptime_1040 != 0)

D.45281_1041 : --> single use.
D.45282_1042 = D.45281_1041 / 1000;

D.45282_1042 : --> single use.
D.45283_1043 = (uint32_t) D.45282_1042;

D.45283_1043 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

pmap_1044 : -->11 uses.
pmap_1044->recv_pt = D.45292_1054;
pmap_1044->rm_rate = D.45262_1055;
pmap_1044->codec_ms = D.45295_1058;
pmap_1044->remote_sdp_ip = D.45296_1060;
pmap_1044->remote_sdp_port = D.45087_1062;
pmap_1044->rm_fmtp = D.45298_1064;
pmap_1044->agreed_pt = D.45292_1066;
D.45290_1048 = pmap_1044->pt;
pmap_1044->current = 1;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1044;
pmap_1044->rm_encoding = D.45291_1052;
# DEBUG pmap => pmap_1044

m_1045 : --> single use.
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_1045);

D.45287_1046 : -->2 uses.
switch_rtp_set_default_payload (D.45287_1046, D.45290_1048);
if (D.45287_1046 != 0B)

cng_pt_1047 : --> single use.
D.44471_1094->cng_pt = cng_pt_1047;

D.45290_1048 : --> single use.
switch_rtp_set_default_payload (D.45287_1046, D.45290_1048);

mimp_1049 : --> single use.
D.45293_1056 = mimp_1049->microseconds_per_packet;
# DEBUG mimp => mimp_1049

map_1050 : -->5 uses.
D.45262_1055 = map_1050->rm_rate;
D.45247_1053 = map_1050->rm_pt;
D.45255_1051 = map_1050->rm_encoding;
D.45297_1063 = map_1050->rm_fmtp;
D.45247_1065 = map_1050->rm_pt;
# DEBUG map => map_1050

D.45255_1051 : --> single use.
D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);

D.45291_1052 : --> single use.
pmap_1044->rm_encoding = D.45291_1052;

D.45247_1053 : --> single use.
D.45292_1054 = (unsigned char) D.45247_1053;

D.45292_1054 : --> single use.
pmap_1044->recv_pt = D.45292_1054;

D.45262_1055 : --> single use.
pmap_1044->rm_rate = D.45262_1055;

D.45293_1056 : --> single use.
D.45294_1057 = D.45293_1056 / 1000;

D.45294_1057 : --> single use.
D.45295_1058 = (uint32_t) D.45294_1057;

D.45295_1058 : --> single use.
pmap_1044->codec_ms = D.45295_1058;

D.45085_1059 : --> single use.
D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);

D.45296_1060 : --> single use.
pmap_1044->remote_sdp_ip = D.45296_1060;

D.44697_1061 : --> single use.
D.45087_1062 = (short unsigned int) D.44697_1061;

D.45087_1062 : --> single use.
pmap_1044->remote_sdp_port = D.45087_1062;

D.45297_1063 : --> single use.
D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);

D.45298_1064 : --> single use.
pmap_1044->rm_fmtp = D.45298_1064;

D.45247_1065 : --> single use.
D.45292_1066 = (unsigned char) D.45247_1065;

D.45292_1066 : --> single use.
pmap_1044->agreed_pt = D.45292_1066;

j_1067 : -->2 uses.
j_1844 = PHI <j_1067(402), 0(398)>
if (m_idx_906 > j_1067)
# DEBUG j => j_1067
# DEBUG j => j_1067

D.45286_1068 : --> single use.
D.45299_1069 = D.45286_1068->remote_sdp_port;

D.45299_1069 : --> single use.
D.45300_1070 = (int) D.45299_1069;

D.45300_1070 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45300_1070);

D.44530_1071 : --> single use.
switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);

D.45286_1072 : --> single use.
D.45301_1073 = D.45286_1072->remote_sdp_ip;

D.45301_1073 : --> single use.
switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);

D.44530_1074 : --> single use.
switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);

D.44530_1075 : --> single use.
switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);

D.45286_1076 : --> single use.
D.45302_1077 = D.45286_1076->rm_fmtp;

D.45302_1077 : --> single use.
switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);

D.45286_1078 : --> single use.
D.45303_1079 = D.45286_1078->agreed_pt;

D.45303_1079 : --> single use.
D.45304_1080 = (int) D.45303_1079;

D.45304_1080 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45304_1080);

D.44530_1081 : --> single use.
switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);

D.45286_1082 : --> single use.
D.45305_1083 = D.45286_1082->recv_pt;

D.45305_1083 : --> single use.
D.45306_1084 = (int) D.45305_1083;

D.45306_1084 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45306_1084);

D.44530_1085 : --> single use.
switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);

.MEM_1090 : -->3 uses.
.MEM_1872 = PHI <.MEM_1090(392), .MEM_1405(337)>
# VUSE <.MEM_1090>
map_1021 = map_1620->rm_next;
.MEM_1873 = PHI <.MEM_1090(392), .MEM_1405(337)>

D.45316_1092 : --> single use.
if (D.45316_1092 == 0)

m_1093 : -->2 uses.
m_1764 = PHI <m_1093(412), m_370(117)>
# DEBUG m => m_1093
if (m_1093 != 0B)
# DEBUG m => m_1093

D.44471_1094 : --> single use.
D.44471_1094->cng_pt = cng_pt_1047;

.MEM_1096 : --> single use.
# .MEM_1184 = VDEF <.MEM_1096>
switch_core_session_parse_crypto_prefs (session_161(D));

.MEM_1097 : --> single use.
# .MEM_1188 = VDEF <.MEM_1097>
D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);

.MEM_1098 : -->3 uses.
# .MEM_1192 = VDEF <.MEM_1098>
D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
# VUSE <.MEM_1098>
D.44507_225 = D.44506_224->o_username;
# VUSE <.MEM_1098>
D.44506_224 = sdp_198->sdp_origin;

.MEM_1099 : -->8 uses.
# VUSE <.MEM_1099>
D.44512_238 = D.44471_237->auto_rtp_bugs;
# VUSE <.MEM_1099>
D.44471_237 = smh_186->mparams;
.MEM_1100 = PHI <.MEM_1193(35), .MEM_1099(39), .MEM_1099(40), .MEM_1197(41)>
.MEM_1100 = PHI <.MEM_1193(35), .MEM_1099(39), .MEM_1099(40), .MEM_1197(41)>
# VUSE <.MEM_1099>
D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
# VUSE <.MEM_1099>
D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
# .MEM_1196 = VDEF <.MEM_1099>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
# VUSE <.MEM_1099>
D.44509_240 = smh_186->origin;

.MEM_1100 : -->2 uses.
# .MEM_1198 = VDEF <.MEM_1100>
val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
# VUSE <.MEM_1100>
D.44530_244 = session_161(D)->channel;

.MEM_1101 : -->8 uses.
# VUSE <.MEM_1101>
m_248 = sdp_198->sdp_media;
# VUSE <.MEM_1101>
attr_303 = sdp_198->sdp_attributes;
.MEM_1838 = PHI <.MEM_1102(75), .MEM_1101(59)>
.MEM_1839 = PHI <.MEM_1102(75), .MEM_1101(59)>
# VUSE <.MEM_1101>
__result_300 = __builtin_strcmp (D.44548_256, "0.0.0.0");
# VUSE <.MEM_1101>
D.44548_256 = D.44546_254->c_address;
# VUSE <.MEM_1101>
D.44546_254 = m_248->m_connections;
# VUSE <.MEM_1101>
D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;

.MEM_1102 : -->3 uses.
.MEM_1838 = PHI <.MEM_1102(75), .MEM_1101(59)>
# VUSE <.MEM_1102>
attr_334 = attr_1666->a_next;
.MEM_1839 = PHI <.MEM_1102(75), .MEM_1101(59)>

.MEM_1104 : --> single use.
# .MEM_1211 = VDEF <.MEM_1104>
D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);

.MEM_1105 : -->4 uses.
# VUSE <.MEM_1105>
D.44636_344 = D.44471_343->hold_laps;
# VUSE <.MEM_1105>
D.44471_343 = smh_186->mparams;
.MEM_669 = PHI <.MEM_1215(91), .MEM_1105(90), .MEM_1625(89), .MEM_1211(78)>
# .MEM_1214 = VDEF <.MEM_1105>
D.44471_343->hold_laps = 1;

.MEM_1106 : -->2 uses.
.MEM_1107 = PHI <.MEM_1106(94), .MEM_1220(95), .MEM_1627(106)>
.MEM_1857 = PHI <.MEM_1106(94), .MEM_669(419)>

.MEM_1107 : -->5 uses.
# VUSE <.MEM_1107>
D.44649_357 = session_161(D)->bugs;
# VUSE <.MEM_1107>
D.44471_362 = smh_186->mparams;
# .MEM_1223 = VDEF <.MEM_1107>
D.44471_362->num_codecs = 0;
.MEM_1858 = PHI <.MEM_1107(109), .MEM_1222(108)>
# .MEM_1222 = VDEF <.MEM_1107>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");

.MEM_1108 : -->23 uses.
# VUSE <.MEM_1108>
D.44795_509 = strcasecmp (D.44590_508, "rtcp");
# VUSE <.MEM_1108>
D.44590_508 = attr_1599->a_name;
# VUSE <.MEM_1108>
D.44805_520 = strcasecmp (D.44590_508, "ptime");
# VUSE <.MEM_1108>
D.44810_525 = strcasecmp (D.44590_508, "maxptime");
# .MEM_1295 = VDEF <.MEM_1108>
D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
# VUSE <.MEM_1108>
D.44530_536 = session_161(D)->channel;
.MEM_1123 = PHI <.MEM_1108(422), .MEM_1629(197), .MEM_1884(423)>
# VUSE <.MEM_1108>
D.44821_534 = D.44471_533->ndlb;
# VUSE <.MEM_1108>
D.44471_533 = smh_186->mparams;
.MEM_1124 = PHI <.MEM_1294(176), .MEM_1527(179), .MEM_1529(182), .MEM_1108(183), .MEM_1108(184), .MEM_1108(186), .MEM_1298(199), .MEM_1293(175), .MEM_1108(185)>
# VUSE <.MEM_1108>
D.47900_1474 = *D.44619_531;
.MEM_1124 = PHI <.MEM_1294(176), .MEM_1527(179), .MEM_1529(182), .MEM_1108(183), .MEM_1108(184), .MEM_1108(186), .MEM_1298(199), .MEM_1293(175), .MEM_1108(185)>
# VUSE <.MEM_1108>
D.44619_531 = attr_1599->a_value;
.MEM_1124 = PHI <.MEM_1294(176), .MEM_1527(179), .MEM_1529(182), .MEM_1108(183), .MEM_1108(184), .MEM_1108(186), .MEM_1298(199), .MEM_1293(175), .MEM_1108(185)>
# VUSE <.MEM_1108>
D.44815_530 = strcasecmp (D.44590_508, "crypto");
.MEM_1124 = PHI <.MEM_1294(176), .MEM_1527(179), .MEM_1529(182), .MEM_1108(183), .MEM_1108(184), .MEM_1108(186), .MEM_1298(199), .MEM_1293(175), .MEM_1108(185)>
# .MEM_1529 = VDEF <.MEM_1108>
maxptime_1473 = strtol (D.44619_526, 0B, 10);
# VUSE <.MEM_1108>
D.44619_526 = attr_1599->a_value;
# .MEM_1527 = VDEF <.MEM_1108>
ptime_1472 = strtol (D.44619_521, 0B, 10);
# VUSE <.MEM_1108>
D.44619_521 = attr_1599->a_value;
# .MEM_1292 = VDEF <.MEM_1108>
switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_510, 1);
# VUSE <.MEM_1108>
D.44530_511 = session_161(D)->channel;
# VUSE <.MEM_1108>
D.44619_510 = attr_1599->a_value;

.MEM_1109 : --> single use.
# .MEM_1225 = VDEF <.MEM_1109>
D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));

.MEM_1110 : -->2 uses.
# .MEM_1228 = VDEF <.MEM_1110>
switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);
# VUSE <.MEM_1110>
D.44530_369 = session_161(D)->channel;

.MEM_1111 : --> single use.
# .MEM_1229 = VDEF <.MEM_1111>
switch_core_media_find_zrtp_hash (session_161(D), sdp_198);

.MEM_1112 : -->6 uses.
# VUSE <.MEM_1112>
D.44669_375 = m_1764->m_proto_name;
# VUSE <.MEM_1112>
D.44672_377 = strcasecmp (D.44669_375, "UDP/TLS/RTP/SAVPF");
.MEM_1113 = PHI <.MEM_1112(120), .MEM_1112(121), .MEM_1234(122)>
.MEM_1113 = PHI <.MEM_1112(120), .MEM_1112(121), .MEM_1234(122)>
# .MEM_1234 = VDEF <.MEM_1112>
switch_channel_set_flag_value (D.44530_378, 107, 1);
# VUSE <.MEM_1112>
D.44530_378 = session_161(D)->channel;

.MEM_1113 : -->14 uses.
# VUSE <.MEM_1113>
D.44675_379 = m_1764->m_proto;
# VUSE <.MEM_1113>
D.44681_493 = m_1764->m_type;
# VUSE <.MEM_1113>
D.44681_392 = m_1764->m_type;
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>
# .MEM_1403 = VDEF <.MEM_1113>
memset (&matches, 0, 480);
# VUSE <.MEM_1113>
D.44697_873 = m_1764->m_port;
# .MEM_1290 = VDEF <.MEM_1113>
D.44781_498 = switch_rtp_has_dtls ();
# VUSE <.MEM_1113>
D.44697_494 = m_1764->m_port;
# .MEM_1235 = VDEF <.MEM_1113>
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_1045);
# VUSE <.MEM_1113>
D.44697_393 = m_1764->m_port;
# VUSE <.MEM_1113>
D.44681_387 = m_1764->m_type;
# VUSE <.MEM_1113>
D.44681_383 = m_1764->m_type;

.MEM_1114 : -->2 uses.
.MEM_1115 = PHI <.MEM_1114(140), .MEM_1244(141)>
# .MEM_1244 = VDEF <.MEM_1114>
pass_409 = switch_true (var_402);

.MEM_1115 : -->2 uses.
.MEM_1116 = PHI <.MEM_1244(142), .MEM_1245(144), .MEM_1115(143)>
.MEM_1854 = PHI <.MEM_1115(143), .MEM_1244(142)>

.MEM_1116 : -->2 uses.
# .MEM_1246 = VDEF <.MEM_1116>
D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
# VUSE <.MEM_1116>
D.44530_415 = session_161(D)->channel;

.MEM_1117 : --> single use.
.MEM_1096 = PHI <.MEM_1179(8), .MEM_1180(9), .MEM_1117(415), .MEM_1183(19)>

got_crypto_1118 : -->9 uses.
got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
if (got_crypto_1118 <= 0)
got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>

.MEM_1119 : -->3 uses.
# .MEM_1265 = VDEF <.MEM_1119>
D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
# VUSE <.MEM_1119>
D.44751_445 = t38_options_394->remote_ip;
# VUSE <.MEM_1119>
D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;

.MEM_1120 : -->2 uses.
# .MEM_1279 = VDEF <.MEM_1120>
switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
# VUSE <.MEM_1120>
other_session.89_481 = other_session;

.MEM_1122 : -->3 uses.
.MEM_1579 = PHI <.MEM_1124(200), .MEM_1122(172), .MEM_1291(167)>
.MEM_1108 = PHI <.MEM_1124(200), .MEM_1122(172), .MEM_1291(435)>
# VUSE <.MEM_1122>
attr_507 = m_1764->m_attributes;

.MEM_1123 : -->2 uses.
# .MEM_1532 = VDEF <.MEM_1123>
crypto_tag_1476 = strtol (crypto_544, 0B, 10);
# VUSE <.MEM_1123>
crypto_544 = attr_1599->a_value;

.MEM_1124 : -->3 uses.
.MEM_1108 = PHI <.MEM_1124(200), .MEM_1122(172), .MEM_1291(435)>
# VUSE <.MEM_1124>
attr_548 = attr_1599->a_next;
.MEM_1579 = PHI <.MEM_1124(200), .MEM_1122(172), .MEM_1291(167)>

.MEM_1128 : -->6 uses.
# VUSE <.MEM_1128>
remote_codec_rate_596 = map_1728->rm_rate;
# VUSE <.MEM_1128>
D.44856_590 = map_1728->rm_pt;
# VUSE <.MEM_1128>
D.44890_594 = strcasecmp (D.44889_593, "g723");
# VUSE <.MEM_1128>
map_bit_rate_1479 = CSWTCH.174[csui.173_591];
# .MEM_1307 = VDEF <.MEM_1128>
memset (&codec_fmtp, 0, 16);
# VUSE <.MEM_1128>
D.44889_593 = map_1728->rm_encoding;

.MEM_1129 : -->4 uses.
# VUSE <.MEM_1129>
D.44996_1498 = D.44471_1501->num_codecs;
# VUSE <.MEM_1129>
D.44471_1501 = smh_186->mparams;
.MEM_1138 = PHI <.MEM_1132(269), .MEM_1129(241)>
.MEM_49 = PHI <.MEM_1132(269), .MEM_1129(241)>

.MEM_1131 : --> single use.
# .MEM_1317 = VDEF <.MEM_1131>
matches[m_idx_1487].codec_idx = i_1622;

.MEM_1132 : -->4 uses.
.MEM_1138 = PHI <.MEM_1132(269), .MEM_1129(241)>
# VUSE <.MEM_1132>
D.44996_622 = D.44471_621->num_codecs;
# VUSE <.MEM_1132>
D.44471_621 = smh_186->mparams;
.MEM_49 = PHI <.MEM_1132(269), .MEM_1129(241)>

.MEM_1135 : -->3 uses.
.MEM_1171 = PHI <.MEM_1135(271), .MEM_1579(207)>
# VUSE <.MEM_1135>
map_711 = map_1728->rm_next;
.MEM_1137 = PHI <.MEM_1321(268), .MEM_1135(271), .MEM_49(270), .MEM_1579(207)>

.MEM_1137 : -->5 uses.
.MEM_1846 = PHI <.MEM_1325(282), .MEM_1137(274)>
.MEM_1856 = PHI <.MEM_1137(283), .MEM_1330(281)>
.MEM_1148 = PHI <.MEM_1325(282), .MEM_1137(283), .MEM_1322(273)>
# VUSE <.MEM_1137>
D.45001_712 = smh_186->crypto_mode;
# .MEM_1322 = VDEF <.MEM_1137>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");

.MEM_1138 : -->10 uses.
# VUSE <.MEM_1138>
D.44921_633 = imp_629->codec_type;
# VUSE <.MEM_1138>
codec_rate_632 = imp_629->samples_per_second;
# VUSE <.MEM_1138>
D.44920_630 = imp_629->bits_per_second;
# VUSE <.MEM_1138>
imp_629 = *D.44919_628;
# .MEM_1309 = VDEF <.MEM_1138>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# VUSE <.MEM_1138>
D.44929_640 = imp_629->microseconds_per_packet;
# VUSE <.MEM_1138>
D.44927_638 = imp_629->ianacode;
# VUSE <.MEM_1138>
D.44926_637 = imp_629->iananame;
# VUSE <.MEM_1138>
D.44856_634 = map_1728->rm_pt;
.MEM_1132 = PHI <.MEM_1138(242), .MEM_1310(260), .MEM_1316(267), .MEM_1321(268), .MEM_1309(261), .MEM_1309(255)>

nm_idx_1139 : -->11 uses.
nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
nm_idx_119 = PHI <nm_idx_1139(268), nm_idx_117(271), nm_idx_901(270), nm_idx_1749(207)>
nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
nm_idx_701 = nm_idx_1139 + 1;
near_matches[nm_idx_1139].map = map_1728;
near_matches[nm_idx_1139].imp = imp_629;
near_matches[nm_idx_1139].rate = remote_codec_rate.92_700;
near_matches[nm_idx_1139].codec_idx = i_1622;
nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>

.MEM_1141 : --> single use.
# .MEM_1332 = VDEF <.MEM_1141>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;

.MEM_1142 : -->2 uses.
# .MEM_1338 = VDEF <.MEM_1142>
D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
# VUSE <.MEM_1142>
D.45049_767 = mmap_762->rm_encoding;

.MEM_1143 : -->2 uses.
# VUSE <.MEM_1143>
D.45060_778 = mimp_761->microseconds_per_packet;
# .MEM_1346 = VDEF <.MEM_1143>
pmap_760->codec_ms = D.45062_780;

.MEM_1144 : -->5 uses.
# VUSE <.MEM_1144>
D.45079_790 = mmap_762->rm_fmtp;
.MEM_1145 = PHI <.MEM_1144(299), .MEM_1352(427), .MEM_1144(298)>
.MEM_1145 = PHI <.MEM_1144(299), .MEM_1352(427), .MEM_1144(298)>
# .MEM_1352 = VDEF <.MEM_1144>
D.45082_793 = switch_stristr ("stereo=1", D.45079_790);
# VUSE <.MEM_1144>
D.47926_1486 = *D.45079_790;

.MEM_1145 : --> single use.
# .MEM_1354 = VDEF <.MEM_1145>
pmap_760->channels = 1;

.MEM_1146 : -->2 uses.
# .MEM_1356 = VDEF <.MEM_1146>
D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
# VUSE <.MEM_1146>
D.45085_795 = connection_139->c_address;

.MEM_1148 : -->2 uses.
.MEM_1150 = PHI <.MEM_1148(304), .MEM_1372(311), .MEM_1371(310)>
.MEM_1849 = PHI <.MEM_1148(304), .MEM_1696(428)>

.MEM_1149 : -->3 uses.
# .MEM_1371 = VDEF <.MEM_1149>
D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
# VUSE <.MEM_1149>
D.45098_822 = D.44471_821->codec_flags;
# VUSE <.MEM_1149>
D.44471_821 = smh_186->mparams;

.MEM_1150 : -->2 uses.
.MEM_1852 = PHI <.MEM_1375(315), .MEM_1150(312)>
# .MEM_1373 = VDEF <.MEM_1150>
D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);

.MEM_1151 : -->3 uses.
# VUSE <.MEM_1151>
D.45110_830 = D.44471_829->te;
# VUSE <.MEM_1151>
D.44471_829 = smh_186->mparams;
# .MEM_1375 = VDEF <.MEM_1151>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);

D.44999_1152 : --> single use.
if (D.44999_1152 != 0)

.MEM_1153 : -->3 uses.
.MEM_1882 = PHI <.MEM_1156(376), .MEM_1153(345), .MEM_1408(340)>
.MEM_1719 = PHI <.MEM_1156(376), .MEM_1153(345), .MEM_1408(436)>
# VUSE <.MEM_1153>
attr_893 = m_1764->m_attributes;

.MEM_1154 : -->2 uses.
# .MEM_1411 = VDEF <.MEM_1154>
D.44471_905->rtcp_video_interval_msec = "10000";
# VUSE <.MEM_1154>
D.44471_905 = smh_186->mparams;

.MEM_1155 : -->2 uses.
# .MEM_1546 = VDEF <.MEM_1155>
crypto_tag_1502 = strtol (crypto_975, 0B, 10);
# VUSE <.MEM_1155>
crypto_975 = attr_619->a_value;

.MEM_1156 : -->3 uses.
.MEM_1719 = PHI <.MEM_1156(376), .MEM_1153(345), .MEM_1408(436)>
# VUSE <.MEM_1156>
attr_978 = attr_619->a_next;
.MEM_1882 = PHI <.MEM_1156(376), .MEM_1153(345), .MEM_1408(340)>

.MEM_1158 : -->4 uses.
# VUSE <.MEM_1158>
D.45250_994 = imp_985->ianacode;
# VUSE <.MEM_1158>
D.45249_993 = imp_985->iananame;
# VUSE <.MEM_1158>
D.45247_991 = map_1620->rm_pt;
# .MEM_1421 = VDEF <.MEM_1158>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);

.MEM_1160 : -->2 uses.
.MEM_870 = PHI <.MEM_1160(391), .MEM_1882(379)>
.MEM_1090 = PHI <.MEM_1160(391), .MEM_1882(379)>

.MEM_1164 : --> single use.
# .MEM_1427 = VDEF <.MEM_1164>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;

.MEM_1165 : -->4 uses.
# .MEM_1432 = VDEF <.MEM_1165>
D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
# VUSE <.MEM_1165>
D.45255_1051 = map_1050->rm_encoding;
# VUSE <.MEM_1165>
map_1050 = matches[j_1844].map;
# VUSE <.MEM_1165>
mimp_1049 = matches[j_1844].imp;

.MEM_1167 : --> single use.
# .MEM_1453 = VDEF <.MEM_1167>
D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);

.MEM_1168 : -->3 uses.
.MEM_1750 = PHI <.MEM_1168(412), .MEM_1232(117)>
# VUSE <.MEM_1168>
m_1093 = m_1764->m_next;
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>

.MEM_1170 : --> single use.
# .MEM_1455 = VDEF <.MEM_1170>
sdp_parser_free (parser_196);

.MEM_1171 : --> single use.
# .MEM_1301 = VDEF <.MEM_1171>
codec_fmtp = {};

.MEM_1172(D) : --> single use.
# .MEM_1173 = VDEF <.MEM_1172(D)>
channel_162 = switch_core_session_get_channel (session_161(D));

.MEM_1173 : --> single use.
# .MEM_1174 = VDEF <.MEM_1173>
matches = {};

.MEM_1174 : --> single use.
# .MEM_1175 = VDEF <.MEM_1174>
near_matches = {};

.MEM_1175 : -->6 uses.
# VUSE <.MEM_1175>
D.44472_194 = strlen (r_sdp_193(D));
# .MEM_1176 = VDEF <.MEM_1175>
parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
# VUSE <.MEM_1175>
total_codecs_192 = D.44471_191->num_codecs;
# VUSE <.MEM_1175>
D.44471_191 = smh_186->mparams;
# VUSE <.MEM_1175>
smh_186 = session_161(D)->media_handle;
# VUSE <.MEM_1175>
__assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

.MEM_1176 : --> single use.
# .MEM_1177 = VDEF <.MEM_1176>
sdp_198 = sdp_session (parser_196);

.MEM_1177 : -->2 uses.
# .MEM_1179 = VDEF <.MEM_1177>
D.44478_200 = dtls_ok (session_161(D));
# .MEM_1178 = VDEF <.MEM_1177>
sdp_parser_free (parser_196);

.MEM_1178 : --> no uses.

.MEM_1179 : -->4 uses.
.MEM_1096 = PHI <.MEM_1179(8), .MEM_1180(9), .MEM_1117(415), .MEM_1183(19)>
# .MEM_1180 = VDEF <.MEM_1179>
tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
# VUSE <.MEM_1179>
D.44482_202 = D.44481_201->channel;
# VUSE <.MEM_1179>
D.44481_201 = smh_186->session;

.MEM_1180 : -->16 uses.
# .MEM_1634 = VDEF <.MEM_1180>
D.49682_1557 = switch_is_number (tmp_203);
.MEM_1621 = PHI <.MEM_1180(10), .MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1635(18)>
# VUSE <.MEM_1180>
D.49681_1556 = strcasecmp (tmp_203, "disallow");
.MEM_1621 = PHI <.MEM_1180(10), .MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1635(18)>
# VUSE <.MEM_1180>
D.49680_1555 = strcasecmp (tmp_203, "inactive");
.MEM_1621 = PHI <.MEM_1180(10), .MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1635(18)>
# VUSE <.MEM_1180>
D.49679_1554 = strcasecmp (tmp_203, "disabled");
.MEM_1621 = PHI <.MEM_1180(10), .MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1635(18)>
# VUSE <.MEM_1180>
D.49678_1553 = strcasecmp (tmp_203, "f");
.MEM_1621 = PHI <.MEM_1180(10), .MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1635(18)>
# VUSE <.MEM_1180>
D.49677_1552 = strcasecmp (tmp_203, "false");
.MEM_1621 = PHI <.MEM_1180(10), .MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1635(18)>
# VUSE <.MEM_1180>
D.49676_1551 = strcasecmp (tmp_203, "off");
.MEM_1621 = PHI <.MEM_1180(10), .MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1635(18)>
# VUSE <.MEM_1180>
D.49675_1550 = strcasecmp (tmp_203, "no");
.MEM_1096 = PHI <.MEM_1179(8), .MEM_1180(9), .MEM_1117(415), .MEM_1183(19)>

.MEM_1181 : --> no uses.

.MEM_1182 : -->3 uses.
# .MEM_1183 = VDEF <.MEM_1182>
switch_channel_clear_flag (D.44482_208, 109);
# VUSE <.MEM_1182>
D.44482_208 = D.44481_207->channel;
# VUSE <.MEM_1182>
D.44481_207 = smh_186->session;

.MEM_1183 : --> single use.
.MEM_1096 = PHI <.MEM_1179(8), .MEM_1180(9), .MEM_1117(415), .MEM_1183(19)>

.MEM_1184 : -->5 uses.
# VUSE <.MEM_1184>
pmap_1457 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;
.MEM_1837 = PHI <.MEM_1516(23), .MEM_1184(21)>
.MEM_1836 = PHI <.MEM_1516(23), .MEM_1516(22), .MEM_1184(20), .MEM_1184(21)>
.MEM_1836 = PHI <.MEM_1516(23), .MEM_1516(22), .MEM_1184(20), .MEM_1184(21)>
# VUSE <.MEM_1184>
D.47871_1661 = pmap_1457->allocated;

.MEM_1185 : --> no uses.

.MEM_1186 : --> no uses.

.MEM_1187 : --> single use.
.MEM_1097 = PHI <.MEM_1878(28), .MEM_1187(29)>

.MEM_1188 : --> single use.
# .MEM_1189 = VDEF <.MEM_1188>
D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);

.MEM_1189 : --> single use.
# .MEM_1190 = VDEF <.MEM_1189>
val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);

.MEM_1190 : -->8 uses.
.MEM_1098 = PHI <.MEM_1190(30), .MEM_1190(31), .MEM_1190(32), .MEM_1190(33), .MEM_1191(34)>
.MEM_1098 = PHI <.MEM_1190(30), .MEM_1190(31), .MEM_1190(32), .MEM_1190(33), .MEM_1191(34)>
.MEM_1098 = PHI <.MEM_1190(30), .MEM_1190(31), .MEM_1190(32), .MEM_1190(33), .MEM_1191(34)>
.MEM_1098 = PHI <.MEM_1190(30), .MEM_1190(31), .MEM_1190(32), .MEM_1190(33), .MEM_1191(34)>
# VUSE <.MEM_1190>
D.44502_221 = strcasecmp (val_214, "scrooge");
# VUSE <.MEM_1190>
D.44498_218 = strcasecmp (val_214, "greedy");
# VUSE <.MEM_1190>
D.44494_215 = strcasecmp (val_214, "generous");
# .MEM_1191 = VDEF <.MEM_1190>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);

.MEM_1191 : --> single use.
.MEM_1098 = PHI <.MEM_1190(30), .MEM_1190(31), .MEM_1190(32), .MEM_1190(33), .MEM_1191(34)>

.MEM_1192 : --> single use.
# .MEM_1193 = VDEF <.MEM_1192>
smh_186->origin = D.44508_226;

.MEM_1193 : -->8 uses.
# VUSE <.MEM_1193>
D.44518_234 = strstr (D.44508_226, "CiscoSystemsSIP-GW-UserAgent");
.MEM_1099 = PHI <.MEM_1193(36), .MEM_1193(37), .MEM_1195(38)>
.MEM_1099 = PHI <.MEM_1193(36), .MEM_1193(37), .MEM_1195(38)>
.MEM_1100 = PHI <.MEM_1193(35), .MEM_1099(39), .MEM_1099(40), .MEM_1197(41)>
# VUSE <.MEM_1193>
D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
# .MEM_1194 = VDEF <.MEM_1193>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
# VUSE <.MEM_1193>
D.44512_229 = D.44471_228->auto_rtp_bugs;
# VUSE <.MEM_1193>
D.44471_228 = smh_186->mparams;

.MEM_1194 : --> single use.
# .MEM_1195 = VDEF <.MEM_1194>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");

.MEM_1195 : --> single use.
.MEM_1099 = PHI <.MEM_1193(36), .MEM_1193(37), .MEM_1195(38)>

.MEM_1196 : --> single use.
# .MEM_1197 = VDEF <.MEM_1196>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");

.MEM_1197 : --> single use.
.MEM_1100 = PHI <.MEM_1193(35), .MEM_1099(39), .MEM_1099(40), .MEM_1197(41)>

.MEM_1198 : -->16 uses.
# .MEM_1637 = VDEF <.MEM_1198>
D.49694_1567 = switch_is_number (val_245);
.MEM_1623 = PHI <.MEM_1198(43), .MEM_1198(44), .MEM_1198(45), .MEM_1198(46), .MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1638(51)>
# VUSE <.MEM_1198>
D.49693_1566 = strcasecmp (val_245, "allow");
.MEM_1623 = PHI <.MEM_1198(43), .MEM_1198(44), .MEM_1198(45), .MEM_1198(46), .MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1638(51)>
# VUSE <.MEM_1198>
D.49692_1565 = strcasecmp (val_245, "active");
.MEM_1623 = PHI <.MEM_1198(43), .MEM_1198(44), .MEM_1198(45), .MEM_1198(46), .MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1638(51)>
# VUSE <.MEM_1198>
D.49691_1564 = strcasecmp (val_245, "enabled");
.MEM_1623 = PHI <.MEM_1198(43), .MEM_1198(44), .MEM_1198(45), .MEM_1198(46), .MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1638(51)>
# VUSE <.MEM_1198>
D.49690_1563 = strcasecmp (val_245, "t");
.MEM_1623 = PHI <.MEM_1198(43), .MEM_1198(44), .MEM_1198(45), .MEM_1198(46), .MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1638(51)>
# VUSE <.MEM_1198>
D.49689_1562 = strcasecmp (val_245, "true");
.MEM_1623 = PHI <.MEM_1198(43), .MEM_1198(44), .MEM_1198(45), .MEM_1198(46), .MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1638(51)>
# VUSE <.MEM_1198>
D.49688_1561 = strcasecmp (val_245, "on");
.MEM_1623 = PHI <.MEM_1198(43), .MEM_1198(44), .MEM_1198(45), .MEM_1198(46), .MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1638(51)>
# VUSE <.MEM_1198>
D.49687_1560 = strcasecmp (val_245, "yes");
.MEM_1101 = PHI <.MEM_1198(42), .MEM_794(416), .MEM_1200(52)>

.MEM_1199 : --> no uses.

.MEM_1200 : --> single use.
.MEM_1101 = PHI <.MEM_1198(42), .MEM_794(416), .MEM_1200(52)>

.MEM_1201 : --> single use.
.MEM_1102 = PHI <.MEM_1838(61), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1838(70), .MEM_1520(72), .MEM_1838(73), .MEM_1522(74), .MEM_1207(67), .MEM_1838(60)>

.MEM_1202 : --> single use.
.MEM_1102 = PHI <.MEM_1838(61), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1838(70), .MEM_1520(72), .MEM_1838(73), .MEM_1522(74), .MEM_1207(67), .MEM_1838(60)>

.MEM_1203 : -->2 uses.
# VUSE <.MEM_1203>
D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1204 = VDEF <.MEM_1203>
D.44606_319 = switch_rtp_ready (D.44605_318);

.MEM_1204 : -->4 uses.
# VUSE <.MEM_1204>
D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1208 = VDEF <.MEM_1204>
switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
# VUSE <.MEM_1204>
D.44530_321 = session_161(D)->channel;
# .MEM_1205 = VDEF <.MEM_1204>
switch_rtp_set_max_missed_packets (D.44605_320, 0);

.MEM_1205 : --> single use.
# .MEM_1206 = VDEF <.MEM_1205>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;

.MEM_1206 : --> single use.
# .MEM_1207 = VDEF <.MEM_1206>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;

.MEM_1207 : --> single use.
.MEM_1102 = PHI <.MEM_1838(61), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1838(70), .MEM_1520(72), .MEM_1838(73), .MEM_1522(74), .MEM_1207(67), .MEM_1838(60)>

.MEM_1208 : -->2 uses.
# .MEM_1209 = VDEF <.MEM_1208>
switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
# VUSE <.MEM_1208>
D.44530_322 = session_161(D)->channel;

.MEM_1209 : --> single use.
.MEM_1102 = PHI <.MEM_1838(61), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1838(70), .MEM_1520(72), .MEM_1838(73), .MEM_1522(74), .MEM_1207(67), .MEM_1838(60)>

.MEM_1210 : --> single use.
.MEM_1104 = PHI <.MEM_1839(76), .MEM_1210(77)>

.MEM_1211 : -->3 uses.
.MEM_669 = PHI <.MEM_1215(91), .MEM_1105(90), .MEM_1625(89), .MEM_1211(78)>
# .MEM_1212 = VDEF <.MEM_1211>
val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
# VUSE <.MEM_1211>
D.44530_340 = session_161(D)->channel;

.MEM_1212 : -->16 uses.
# .MEM_1640 = VDEF <.MEM_1212>
D.49706_1577 = switch_is_number (val_341);
.MEM_1625 = PHI <.MEM_1212(80), .MEM_1212(81), .MEM_1212(82), .MEM_1212(83), .MEM_1212(84), .MEM_1212(85), .MEM_1212(86), .MEM_1641(88)>
# VUSE <.MEM_1212>
D.49705_1576 = strcasecmp (val_341, "allow");
.MEM_1625 = PHI <.MEM_1212(80), .MEM_1212(81), .MEM_1212(82), .MEM_1212(83), .MEM_1212(84), .MEM_1212(85), .MEM_1212(86), .MEM_1641(88)>
# VUSE <.MEM_1212>
D.49704_1575 = strcasecmp (val_341, "active");
.MEM_1625 = PHI <.MEM_1212(80), .MEM_1212(81), .MEM_1212(82), .MEM_1212(83), .MEM_1212(84), .MEM_1212(85), .MEM_1212(86), .MEM_1641(88)>
# VUSE <.MEM_1212>
D.49703_1574 = strcasecmp (val_341, "enabled");
.MEM_1625 = PHI <.MEM_1212(80), .MEM_1212(81), .MEM_1212(82), .MEM_1212(83), .MEM_1212(84), .MEM_1212(85), .MEM_1212(86), .MEM_1641(88)>
# VUSE <.MEM_1212>
D.49702_1573 = strcasecmp (val_341, "t");
.MEM_1625 = PHI <.MEM_1212(80), .MEM_1212(81), .MEM_1212(82), .MEM_1212(83), .MEM_1212(84), .MEM_1212(85), .MEM_1212(86), .MEM_1641(88)>
# VUSE <.MEM_1212>
D.49701_1572 = strcasecmp (val_341, "true");
.MEM_1625 = PHI <.MEM_1212(80), .MEM_1212(81), .MEM_1212(82), .MEM_1212(83), .MEM_1212(84), .MEM_1212(85), .MEM_1212(86), .MEM_1641(88)>
# VUSE <.MEM_1212>
D.49700_1571 = strcasecmp (val_341, "on");
.MEM_1625 = PHI <.MEM_1212(80), .MEM_1212(81), .MEM_1212(82), .MEM_1212(83), .MEM_1212(84), .MEM_1212(85), .MEM_1212(86), .MEM_1641(88)>
# VUSE <.MEM_1212>
D.49699_1570 = strcasecmp (val_341, "yes");
.MEM_1105 = PHI <.MEM_1212(79), .MEM_1754(418)>

.MEM_1213 : --> no uses.

.MEM_1214 : --> single use.
# .MEM_1215 = VDEF <.MEM_1214>
D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_1006);

.MEM_1215 : -->2 uses.
.MEM_669 = PHI <.MEM_1215(91), .MEM_1105(90), .MEM_1625(89), .MEM_1211(78)>
# .MEM_1216 = VDEF <.MEM_1215>
reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);

.MEM_1216 : -->2 uses.
# .MEM_1217 = VDEF <.MEM_1216>
val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
# VUSE <.MEM_1216>
D.44530_350 = session_161(D)->channel;

.MEM_1217 : -->2 uses.
.MEM_1106 = PHI <.MEM_1217(92), .MEM_1218(93)>
# .MEM_1218 = VDEF <.MEM_1217>
reneg_352 = switch_true (val_351);

.MEM_1218 : --> single use.
.MEM_1106 = PHI <.MEM_1217(92), .MEM_1218(93)>

.MEM_1219 : -->2 uses.
# .MEM_1220 = VDEF <.MEM_1219>
val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
# VUSE <.MEM_1219>
D.44530_354 = session_161(D)->channel;

.MEM_1220 : -->16 uses.
# .MEM_1643 = VDEF <.MEM_1220>
D.49718_1587 = switch_is_number (val_355);
.MEM_1627 = PHI <.MEM_1220(96), .MEM_1220(97), .MEM_1220(98), .MEM_1220(99), .MEM_1220(100), .MEM_1220(101), .MEM_1220(102), .MEM_1644(104), .MEM_1643(103), .MEM_1644(105)>
# VUSE <.MEM_1220>
D.49717_1586 = strcasecmp (val_355, "allow");
.MEM_1627 = PHI <.MEM_1220(96), .MEM_1220(97), .MEM_1220(98), .MEM_1220(99), .MEM_1220(100), .MEM_1220(101), .MEM_1220(102), .MEM_1644(104), .MEM_1643(103), .MEM_1644(105)>
# VUSE <.MEM_1220>
D.49716_1585 = strcasecmp (val_355, "active");
.MEM_1627 = PHI <.MEM_1220(96), .MEM_1220(97), .MEM_1220(98), .MEM_1220(99), .MEM_1220(100), .MEM_1220(101), .MEM_1220(102), .MEM_1644(104), .MEM_1643(103), .MEM_1644(105)>
# VUSE <.MEM_1220>
D.49715_1584 = strcasecmp (val_355, "enabled");
.MEM_1627 = PHI <.MEM_1220(96), .MEM_1220(97), .MEM_1220(98), .MEM_1220(99), .MEM_1220(100), .MEM_1220(101), .MEM_1220(102), .MEM_1644(104), .MEM_1643(103), .MEM_1644(105)>
# VUSE <.MEM_1220>
D.49714_1583 = strcasecmp (val_355, "t");
.MEM_1627 = PHI <.MEM_1220(96), .MEM_1220(97), .MEM_1220(98), .MEM_1220(99), .MEM_1220(100), .MEM_1220(101), .MEM_1220(102), .MEM_1644(104), .MEM_1643(103), .MEM_1644(105)>
# VUSE <.MEM_1220>
D.49713_1582 = strcasecmp (val_355, "true");
.MEM_1627 = PHI <.MEM_1220(96), .MEM_1220(97), .MEM_1220(98), .MEM_1220(99), .MEM_1220(100), .MEM_1220(101), .MEM_1220(102), .MEM_1644(104), .MEM_1643(103), .MEM_1644(105)>
# VUSE <.MEM_1220>
D.49712_1581 = strcasecmp (val_355, "on");
.MEM_1627 = PHI <.MEM_1220(96), .MEM_1220(97), .MEM_1220(98), .MEM_1220(99), .MEM_1220(100), .MEM_1220(101), .MEM_1220(102), .MEM_1644(104), .MEM_1643(103), .MEM_1644(105)>
# VUSE <.MEM_1220>
D.49711_1580 = strcasecmp (val_355, "yes");
.MEM_1107 = PHI <.MEM_1106(94), .MEM_1220(95), .MEM_1627(106)>

.MEM_1221 : --> no uses.

.MEM_1222 : --> single use.
.MEM_1858 = PHI <.MEM_1107(109), .MEM_1222(108)>

.MEM_1223 : --> single use.
# .MEM_1224 = VDEF <.MEM_1223>
switch_core_media_prepare_codecs (session_161(D), 0);

.MEM_1224 : -->3 uses.
.MEM_1109 = PHI <.MEM_1858(111), .MEM_1858(110), .MEM_1224(112)>
# VUSE <.MEM_1224>
total_codecs_365 = D.44471_364->num_codecs;
# VUSE <.MEM_1224>
D.44471_364 = smh_186->mparams;

.MEM_1225 : -->2 uses.
.MEM_1110 = PHI <.MEM_1225(113), .MEM_1226(114), .MEM_1227(115)>
# .MEM_1226 = VDEF <.MEM_1225>
D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));

.MEM_1226 : -->2 uses.
.MEM_1110 = PHI <.MEM_1225(113), .MEM_1226(114), .MEM_1227(115)>
# .MEM_1227 = VDEF <.MEM_1226>
D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));

.MEM_1227 : -->2 uses.
.MEM_1111 = PHI <.MEM_1227(115), .MEM_1228(116)>
.MEM_1110 = PHI <.MEM_1225(113), .MEM_1226(114), .MEM_1227(115)>

.MEM_1228 : --> single use.
.MEM_1111 = PHI <.MEM_1227(115), .MEM_1228(116)>

.MEM_1229 : --> single use.
# .MEM_1230 = VDEF <.MEM_1229>
switch_core_media_pass_zrtp_hash (session_161(D));

.MEM_1230 : --> single use.
# .MEM_1231 = VDEF <.MEM_1230>
check_ice (smh_186, 0, sdp_198, 0B);

.MEM_1231 : --> single use.
# .MEM_1232 = VDEF <.MEM_1231>
check_ice (smh_186, 1, sdp_198, 0B);

.MEM_1232 : -->3 uses.
# VUSE <.MEM_1232>
m_370 = sdp_198->sdp_media;
.MEM_1750 = PHI <.MEM_1168(412), .MEM_1232(117)>
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>

.MEM_1233 : --> single use.
.MEM_1112 = PHI <.MEM_1750(118), .MEM_1233(119)>

.MEM_1234 : --> single use.
.MEM_1113 = PHI <.MEM_1112(120), .MEM_1112(121), .MEM_1234(122)>

.MEM_1235 : -->2 uses.
# .MEM_1236 = VDEF <.MEM_1235>
D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
# VUSE <.MEM_1235>
D.44530_395 = session_161(D)->channel;

.MEM_1236 : -->2 uses.
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>
# .MEM_1237 = VDEF <.MEM_1236>
D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);

.MEM_1237 : --> single use.
# .MEM_1238 = VDEF <.MEM_1237>
D.44703_399 = switch_true (D.44702_398);

.MEM_1238 : -->3 uses.
# .MEM_1240 = VDEF <.MEM_1238>
var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
# .MEM_1239 = VDEF <.MEM_1238>
switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
# VUSE <.MEM_1238>
D.44530_400 = session_161(D)->channel;

.MEM_1239 : --> single use.
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>

.MEM_1240 : -->3 uses.
# .MEM_1241 = VDEF <.MEM_1240>
D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
# VUSE <.MEM_1240>
D.44482_404 = D.44481_403->channel;
# VUSE <.MEM_1240>
D.44481_403 = smh_186->session;

.MEM_1241 : -->2 uses.
# .MEM_1242 = VDEF <.MEM_1241>
D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
# VUSE <.MEM_1241>
D.44530_407 = session_161(D)->channel;

.MEM_1242 : -->3 uses.
.MEM_1114 = PHI <.MEM_1242(137), .MEM_1242(138), .MEM_1243(139)>
.MEM_1114 = PHI <.MEM_1242(137), .MEM_1242(138), .MEM_1243(139)>
# .MEM_1243 = VDEF <.MEM_1242>
*proceed_209(D) = 0;

.MEM_1243 : --> single use.
.MEM_1114 = PHI <.MEM_1242(137), .MEM_1242(138), .MEM_1243(139)>

.MEM_1244 : -->4 uses.
.MEM_1116 = PHI <.MEM_1244(142), .MEM_1245(144), .MEM_1115(143)>
.MEM_1854 = PHI <.MEM_1115(143), .MEM_1244(142)>
.MEM_1115 = PHI <.MEM_1114(140), .MEM_1244(141)>
# VUSE <.MEM_1244>
D.44716_410 = strcasecmp (var_402, "once");

.MEM_1245 : -->2 uses.
.MEM_1669 = PHI <.MEM_1247(146), .MEM_1248(147), .MEM_1249(148), .MEM_1245(144), .MEM_1246(145)>
.MEM_1116 = PHI <.MEM_1244(142), .MEM_1245(144), .MEM_1115(143)>

.MEM_1246 : -->3 uses.
.MEM_1669 = PHI <.MEM_1247(146), .MEM_1248(147), .MEM_1249(148), .MEM_1245(144), .MEM_1246(145)>
# .MEM_1247 = VDEF <.MEM_1246>
D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
# VUSE <.MEM_1246>
D.44530_417 = session_161(D)->channel;

.MEM_1247 : -->3 uses.
.MEM_1669 = PHI <.MEM_1247(146), .MEM_1248(147), .MEM_1249(148), .MEM_1245(144), .MEM_1246(145)>
# .MEM_1248 = VDEF <.MEM_1247>
D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
# VUSE <.MEM_1247>
D.44530_419 = session_161(D)->channel;

.MEM_1248 : -->3 uses.
.MEM_1669 = PHI <.MEM_1247(146), .MEM_1248(147), .MEM_1249(148), .MEM_1245(144), .MEM_1246(145)>
# VUSE <.MEM_1248>
D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1249 = VDEF <.MEM_1248>
D.44730_422 = switch_rtp_ready (D.44605_421);

.MEM_1249 : -->3 uses.
# .MEM_1250 = VDEF <.MEM_1249>
D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>
.MEM_1669 = PHI <.MEM_1247(146), .MEM_1248(147), .MEM_1249(148), .MEM_1245(144), .MEM_1246(145)>

.MEM_1250 : -->3 uses.
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>
# .MEM_1251 = VDEF <.MEM_1250>
other_channel_426 = switch_core_session_get_channel (other_session.89_425);
# VUSE <.MEM_1250>
other_session.89_425 = other_session;

.MEM_1251 : -->2 uses.
# VUSE <.MEM_1251>
D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1252 = VDEF <.MEM_1251>
remote_host_428 = switch_rtp_get_remote_host (D.44605_427);

.MEM_1252 : -->2 uses.
# VUSE <.MEM_1252>
D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1253 = VDEF <.MEM_1252>
remote_port_430 = switch_rtp_get_remote_port (D.44605_429);

.MEM_1253 : --> single use.
# .MEM_1254 = VDEF <.MEM_1253>
tmp = "";

.MEM_1254 : --> single use.
# .MEM_1255 = VDEF <.MEM_1254>
D.44737_431 = switch_channel_test_flag (other_channel_426, 1);

.MEM_1255 : -->4 uses.
# .MEM_1260 = VDEF <.MEM_1255>
D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
# VUSE <.MEM_1255>
D.44530_438 = session_161(D)->channel;
# .MEM_1256 = VDEF <.MEM_1255>
D.44740_433 = switch_channel_get_name (D.44530_432);
# VUSE <.MEM_1255>
D.44530_432 = session_161(D)->channel;

.MEM_1256 : --> single use.
# .MEM_1257 = VDEF <.MEM_1256>
D.44741_434 = switch_channel_get_name (other_channel_426);

.MEM_1257 : --> single use.
# .MEM_1258 = VDEF <.MEM_1257>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

.MEM_1258 : -->2 uses.
# .MEM_1259 = VDEF <.MEM_1258>
switch_core_session_rwunlock (other_session.89_435);
# VUSE <.MEM_1258>
other_session.89_435 = other_session;

.MEM_1259 : --> single use.
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>

.MEM_1260 : --> single use.
# .MEM_1261 = VDEF <.MEM_1260>
D.44743_440 = switch_true (D.44742_439);

.MEM_1261 : -->3 uses.
.MEM_1119 = PHI <.MEM_1261(153), .MEM_1263(154), .MEM_1264(155)>
# .MEM_1262 = VDEF <.MEM_1261>
D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
# VUSE <.MEM_1261>
D.44530_441 = session_161(D)->channel;

.MEM_1262 : --> single use.
# .MEM_1263 = VDEF <.MEM_1262>
D.44747_443 = switch_true (D.44746_442);

.MEM_1263 : -->2 uses.
.MEM_1119 = PHI <.MEM_1261(153), .MEM_1263(154), .MEM_1264(155)>
# .MEM_1264 = VDEF <.MEM_1263>
switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);

.MEM_1264 : --> single use.
.MEM_1119 = PHI <.MEM_1261(153), .MEM_1263(154), .MEM_1264(155)>

.MEM_1265 : --> single use.
# .MEM_1266 = VDEF <.MEM_1265>
D.44750_444->remote_sdp_ip = D.44752_446;

.MEM_1266 : -->3 uses.
# VUSE <.MEM_1266>
D.44753_448 = t38_options_394->remote_port;
# VUSE <.MEM_1266>
D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1267 = VDEF <.MEM_1266>
D.44750_447->remote_sdp_port = D.44753_448;

.MEM_1267 : -->5 uses.
# VUSE <.MEM_1267>
D.44760_453 = D.44750_447->remote_sdp_ip;
# VUSE <.MEM_1267>
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
# .MEM_1270 = VDEF <.MEM_1267>
err = 0B;
# .MEM_1268 = VDEF <.MEM_1267>
D.44764_458 = switch_channel_get_name (D.44530_457);
# VUSE <.MEM_1267>
D.44530_457 = session_161(D)->channel;

.MEM_1268 : --> single use.
# .MEM_1269 = VDEF <.MEM_1268>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);

.MEM_1269 : --> single use.
.MEM_1120 = PHI <.MEM_1269(159), .MEM_1276(160), .MEM_1278(161)>

.MEM_1270 : -->2 uses.
# .MEM_1271 = VDEF <.MEM_1270>
D.44765_460 = switch_channel_get_name (D.44530_459);
# VUSE <.MEM_1270>
D.44530_459 = session_161(D)->channel;

.MEM_1271 : -->4 uses.
# VUSE <.MEM_1271>
D.44762_465 = D.44750_462->remote_sdp_port;
# VUSE <.MEM_1271>
D.44760_463 = D.44750_462->remote_sdp_ip;
# VUSE <.MEM_1271>
D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1272 = VDEF <.MEM_1271>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

.MEM_1272 : -->3 uses.
# VUSE <.MEM_1272>
D.44762_468 = D.44750_467->remote_sdp_port;
# VUSE <.MEM_1272>
D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1273 = VDEF <.MEM_1272>
switch_snprintf (&tmp, 32, "%d", D.44767_469);

.MEM_1273 : -->4 uses.
# VUSE <.MEM_1273>
D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# VUSE <.MEM_1273>
D.44530_470 = session_161(D)->channel;
# .MEM_1274 = VDEF <.MEM_1273>
switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
# VUSE <.MEM_1273>
D.44760_472 = D.44750_471->remote_sdp_ip;

.MEM_1274 : -->2 uses.
# .MEM_1275 = VDEF <.MEM_1274>
switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
# VUSE <.MEM_1274>
D.44530_473 = session_161(D)->channel;

.MEM_1275 : -->5 uses.
# VUSE <.MEM_1275>
D.44762_478 = D.44750_475->remote_sdp_port;
# VUSE <.MEM_1275>
D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# VUSE <.MEM_1275>
D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1276 = VDEF <.MEM_1275>
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
# VUSE <.MEM_1275>
D.44760_476 = D.44750_475->remote_sdp_ip;

.MEM_1276 : -->3 uses.
.MEM_1120 = PHI <.MEM_1269(159), .MEM_1276(160), .MEM_1278(161)>
# .MEM_1277 = VDEF <.MEM_1276>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
# VUSE <.MEM_1276>
err.90_480 = err;

.MEM_1277 : --> single use.
# .MEM_1278 = VDEF <.MEM_1277>
switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);

.MEM_1278 : --> single use.
.MEM_1120 = PHI <.MEM_1269(159), .MEM_1276(160), .MEM_1278(161)>

.MEM_1279 : -->3 uses.
# .MEM_1280 = VDEF <.MEM_1279>
switch_channel_set_flag_value (D.44482_483, 101, 1);
# VUSE <.MEM_1279>
D.44482_483 = D.44481_482->channel;
# VUSE <.MEM_1279>
D.44481_482 = smh_186->session;

.MEM_1280 : -->3 uses.
# .MEM_1281 = VDEF <.MEM_1280>
switch_channel_set_flag_value (D.44772_485, 101, 1);
# VUSE <.MEM_1280>
D.44772_485 = other_session.89_484->channel;
# VUSE <.MEM_1280>
other_session.89_484 = other_session;

.MEM_1281 : -->2 uses.
# .MEM_1282 = VDEF <.MEM_1281>
msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
# VUSE <.MEM_1281>
other_session.89_486 = other_session;

.MEM_1282 : --> single use.
# .MEM_1283 = VDEF <.MEM_1282>
msg_487->message_id = 21;

.MEM_1283 : --> single use.
# .MEM_1284 = VDEF <.MEM_1283>
msg_487->from = "src/switch_core_media.c";

.MEM_1284 : -->2 uses.
# .MEM_1285 = VDEF <.MEM_1284>
D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
# VUSE <.MEM_1284>
other_session.89_488 = other_session;

.MEM_1285 : --> single use.
# .MEM_1286 = VDEF <.MEM_1285>
msg_487->string_arg = D.44773_489;

.MEM_1286 : --> single use.
# .MEM_1287 = VDEF <.MEM_1286>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));

.MEM_1287 : -->2 uses.
# .MEM_1288 = VDEF <.MEM_1287>
switch_core_session_queue_message (other_session.89_490, msg_487);
# VUSE <.MEM_1287>
other_session.89_490 = other_session;

.MEM_1288 : -->2 uses.
# .MEM_1289 = VDEF <.MEM_1288>
switch_core_session_rwunlock (other_session.89_491);
# VUSE <.MEM_1288>
other_session.89_491 = other_session;

.MEM_1289 : --> single use.
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>

.MEM_1290 : -->2 uses.
.MEM_1122 = PHI <.MEM_1290(165), .MEM_1291(166)>
# .MEM_1291 = VDEF <.MEM_1290>
D.44784_499 = dtls_ok (session_161(D));

.MEM_1291 : -->10 uses.
.MEM_1579 = PHI <.MEM_1124(200), .MEM_1122(172), .MEM_1291(167)>
# VUSE <.MEM_1291>
attr_77 = m_1764->m_attributes;
.MEM_1108 = PHI <.MEM_1124(200), .MEM_1122(172), .MEM_1291(435)>
# VUSE <.MEM_1291>
D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
# VUSE <.MEM_1291>
D.44590_501 = attr_1559->a_name;
# VUSE <.MEM_1291>
attr_506 = attr_1559->a_next;
.MEM_1122 = PHI <.MEM_1290(165), .MEM_1291(166)>
# VUSE <.MEM_1291>
D.47887_1469 = *D.44619_503;
# VUSE <.MEM_1291>
D.44619_503 = attr_1559->a_value;
# VUSE <.MEM_1291>
attr_500 = m_1764->m_attributes;

.MEM_1292 : -->2 uses.
# .MEM_1525 = VDEF <.MEM_1292>
D.47890_1471 = strtol (D.44619_513, 0B, 10);
# VUSE <.MEM_1292>
D.44619_513 = attr_1599->a_value;

.MEM_1293 : -->4 uses.
# .MEM_1294 = VDEF <.MEM_1293>
D.44471_516->rtcp_audio_interval_msec = "5000";
.MEM_1124 = PHI <.MEM_1294(176), .MEM_1527(179), .MEM_1529(182), .MEM_1108(183), .MEM_1108(184), .MEM_1108(186), .MEM_1298(199), .MEM_1293(175), .MEM_1108(185)>
# VUSE <.MEM_1293>
D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
# VUSE <.MEM_1293>
D.44471_516 = smh_186->mparams;

.MEM_1294 : --> single use.
.MEM_1124 = PHI <.MEM_1294(176), .MEM_1527(179), .MEM_1529(182), .MEM_1108(183), .MEM_1108(184), .MEM_1108(186), .MEM_1298(199), .MEM_1293(175), .MEM_1108(185)>

.MEM_1295 : -->16 uses.
.MEM_1884 = PHI <.MEM_1647(196), .MEM_1295(187), .MEM_1646(195)>
# .MEM_1646 = VDEF <.MEM_1295>
D.49730_1597 = switch_is_number (D.44825_537);
.MEM_1629 = PHI <.MEM_1295(188), .MEM_1295(189), .MEM_1295(190), .MEM_1295(191), .MEM_1295(192), .MEM_1295(193), .MEM_1295(194), .MEM_1647(196)>
# VUSE <.MEM_1295>
D.49729_1596 = strcasecmp (D.44825_537, "allow");
.MEM_1629 = PHI <.MEM_1295(188), .MEM_1295(189), .MEM_1295(190), .MEM_1295(191), .MEM_1295(192), .MEM_1295(193), .MEM_1295(194), .MEM_1647(196)>
# VUSE <.MEM_1295>
D.49728_1595 = strcasecmp (D.44825_537, "active");
.MEM_1629 = PHI <.MEM_1295(188), .MEM_1295(189), .MEM_1295(190), .MEM_1295(191), .MEM_1295(192), .MEM_1295(193), .MEM_1295(194), .MEM_1647(196)>
# VUSE <.MEM_1295>
D.49727_1594 = strcasecmp (D.44825_537, "enabled");
.MEM_1629 = PHI <.MEM_1295(188), .MEM_1295(189), .MEM_1295(190), .MEM_1295(191), .MEM_1295(192), .MEM_1295(193), .MEM_1295(194), .MEM_1647(196)>
# VUSE <.MEM_1295>
D.49726_1593 = strcasecmp (D.44825_537, "t");
.MEM_1629 = PHI <.MEM_1295(188), .MEM_1295(189), .MEM_1295(190), .MEM_1295(191), .MEM_1295(192), .MEM_1295(193), .MEM_1295(194), .MEM_1647(196)>
# VUSE <.MEM_1295>
D.49725_1592 = strcasecmp (D.44825_537, "true");
.MEM_1629 = PHI <.MEM_1295(188), .MEM_1295(189), .MEM_1295(190), .MEM_1295(191), .MEM_1295(192), .MEM_1295(193), .MEM_1295(194), .MEM_1647(196)>
# VUSE <.MEM_1295>
D.49724_1591 = strcasecmp (D.44825_537, "on");
.MEM_1629 = PHI <.MEM_1295(188), .MEM_1295(189), .MEM_1295(190), .MEM_1295(191), .MEM_1295(192), .MEM_1295(193), .MEM_1295(194), .MEM_1647(196)>
# VUSE <.MEM_1295>
D.49723_1590 = strcasecmp (D.44825_537, "yes");

.MEM_1296 : --> no uses.

.MEM_1297 : --> single use.
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>

.MEM_1298 : --> single use.
.MEM_1124 = PHI <.MEM_1294(176), .MEM_1527(179), .MEM_1529(182), .MEM_1108(183), .MEM_1108(184), .MEM_1108(186), .MEM_1298(199), .MEM_1293(175), .MEM_1108(185)>

.MEM_1299 : --> single use.
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>

.MEM_1300 : --> single use.
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>

.MEM_1301 : -->9 uses.
# VUSE <.MEM_1301>
rm_encoding_561 = map_1728->rm_encoding;
# VUSE <.MEM_1301>
D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
.MEM_1135 = PHI <.MEM_1302(213), .MEM_1305(218), .MEM_1301(212), .MEM_1303(219), .MEM_49(270), .MEM_1303(217)>
# VUSE <.MEM_1301>
D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1303 = VDEF <.MEM_1301>
D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
# .MEM_1302 = VDEF <.MEM_1301>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
# VUSE <.MEM_1301>
D.44856_567 = map_1728->rm_pt;
# VUSE <.MEM_1301>
D.44855_566 = D.44750_565->rm_rate;
# VUSE <.MEM_1301>
D.44854_564 = map_1728->rm_rate;

.MEM_1302 : --> single use.
.MEM_1135 = PHI <.MEM_1302(213), .MEM_1305(218), .MEM_1301(212), .MEM_1303(219), .MEM_49(270), .MEM_1303(217)>

.MEM_1303 : -->10 uses.
.MEM_1128 = PHI <.MEM_1303(424), .MEM_1306(224), .MEM_1303(223)>
.MEM_1128 = PHI <.MEM_1303(424), .MEM_1306(224), .MEM_1303(223)>
.MEM_1135 = PHI <.MEM_1302(213), .MEM_1305(218), .MEM_1301(212), .MEM_1303(219), .MEM_49(270), .MEM_1303(217)>
.MEM_1135 = PHI <.MEM_1302(213), .MEM_1305(218), .MEM_1301(212), .MEM_1303(219), .MEM_49(270), .MEM_1303(217)>
# VUSE <.MEM_1303>
D.44863_571 = strcasecmp (rm_encoding_130, "CN");
# VUSE <.MEM_1303>
D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1306 = VDEF <.MEM_1303>
D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
# VUSE <.MEM_1303>
D.44856_586 = map_1728->rm_pt;
# .MEM_1304 = VDEF <.MEM_1303>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
# VUSE <.MEM_1303>
D.44856_572 = map_1728->rm_pt;

.MEM_1304 : -->4 uses.
# VUSE <.MEM_1304>
D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1305 = VDEF <.MEM_1304>
switch_rtp_set_cng_pt (D.44605_576, D.44869_578);
# VUSE <.MEM_1304>
D.44869_578 = D.44471_577->cng_pt;
# VUSE <.MEM_1304>
D.44471_577 = smh_186->mparams;

.MEM_1305 : --> single use.
.MEM_1135 = PHI <.MEM_1302(213), .MEM_1305(218), .MEM_1301(212), .MEM_1303(219), .MEM_49(270), .MEM_1303(217)>

.MEM_1306 : --> single use.
.MEM_1128 = PHI <.MEM_1303(424), .MEM_1306(224), .MEM_1303(223)>

.MEM_1307 : -->11 uses.
# VUSE <.MEM_1307>
D.44893_598 = map_1728->rm_fmtp;
# VUSE <.MEM_1307>
D.44897_601 = strcasecmp (D.44889_600, "ilbc");
# VUSE <.MEM_1307>
D.44889_600 = map_1728->rm_encoding;
# .MEM_1308 = VDEF <.MEM_1307>
D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_598, D.44854_610, &codec_fmtp);
# VUSE <.MEM_1307>
D.44901_605 = strcasecmp (D.44889_600, "isac");
.MEM_1129 = PHI <.MEM_1307(233), .MEM_1308(425), .MEM_1308(239), .MEM_1308(240), .MEM_1307(232), .MEM_1307(234)>
.MEM_1129 = PHI <.MEM_1307(233), .MEM_1308(425), .MEM_1308(239), .MEM_1308(240), .MEM_1307(232), .MEM_1307(234)>
.MEM_1129 = PHI <.MEM_1307(233), .MEM_1308(425), .MEM_1308(239), .MEM_1308(240), .MEM_1307(232), .MEM_1307(234)>
# VUSE <.MEM_1307>
D.47915_1481 = *D.44893_598;
# VUSE <.MEM_1307>
D.44854_610 = map_1728->rm_rate;
# VUSE <.MEM_1307>
D.44889_608 = map_1728->rm_encoding;

.MEM_1308 : -->6 uses.
# VUSE <.MEM_1308>
D.44911_615 = codec_fmtp.microseconds_per_packet;
# VUSE <.MEM_1308>
fmtp_remote_codec_rate_618 = codec_fmtp.actual_samples_per_second;
.MEM_1129 = PHI <.MEM_1307(233), .MEM_1308(425), .MEM_1308(239), .MEM_1308(240), .MEM_1307(232), .MEM_1307(234)>
.MEM_1129 = PHI <.MEM_1307(233), .MEM_1308(425), .MEM_1308(239), .MEM_1308(240), .MEM_1307(232), .MEM_1307(234)>
.MEM_1129 = PHI <.MEM_1307(233), .MEM_1308(425), .MEM_1308(239), .MEM_1308(240), .MEM_1307(232), .MEM_1307(234)>
# VUSE <.MEM_1308>
D.44908_612 = codec_fmtp.bits_per_second;

.MEM_1309 : -->26 uses.
.MEM_1132 = PHI <.MEM_1138(242), .MEM_1310(260), .MEM_1316(267), .MEM_1321(268), .MEM_1309(261), .MEM_1309(255)>
# VUSE <.MEM_1309>
D.44856_649 = map_1728->rm_pt;
# .MEM_1312 = VDEF <.MEM_1309>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
# VUSE <.MEM_1309>
D.44929_698 = imp_629->microseconds_per_packet;
# VUSE <.MEM_1309>
D.44927_696 = imp_629->ianacode;
# VUSE <.MEM_1309>
D.44926_695 = imp_629->iananame;
.MEM_1131 = PHI <.MEM_1311(263), .MEM_1309(266)>
# VUSE <.MEM_1309>
D.44929_693 = imp_629->microseconds_per_packet;
# .MEM_1311 = VDEF <.MEM_1309>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
# VUSE <.MEM_1309>
D.44929_687 = imp_629->microseconds_per_packet;
# VUSE <.MEM_1309>
D.44984_686 = imp_629->samples_per_second;
# VUSE <.MEM_1309>
D.44926_685 = imp_629->iananame;
# VUSE <.MEM_1309>
D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
# VUSE <.MEM_1309>
D.44926_656 = imp_629->iananame;
.MEM_1132 = PHI <.MEM_1138(242), .MEM_1310(260), .MEM_1316(267), .MEM_1321(268), .MEM_1309(261), .MEM_1309(255)>
# VUSE <.MEM_1309>
D.44979_683 = strcasecmp (D.44889_642, "pcmu");
# VUSE <.MEM_1309>
D.44977_681 = strcasecmp (D.44889_642, "pcma");
# VUSE <.MEM_1309>
D.44963_672 = strcasecmp (D.44889_642, "isac");
# VUSE <.MEM_1309>
D.44960_670 = strcasecmp (D.44889_642, "ilbc");
# VUSE <.MEM_1309>
D.47919_1483 = *D.44889_642;
# .MEM_1310 = VDEF <.MEM_1309>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
# VUSE <.MEM_1309>
D.44947_658 = imp_629->actual_samples_per_second;
# VUSE <.MEM_1309>
D.44927_653 = imp_629->ianacode;
# VUSE <.MEM_1309>
D.44821_645 = D.44471_644->ndlb;
# VUSE <.MEM_1309>
D.44471_644 = smh_186->mparams;
# VUSE <.MEM_1309>
D.44889_642 = map_1728->rm_encoding;

.MEM_1310 : --> single use.
.MEM_1132 = PHI <.MEM_1138(242), .MEM_1310(260), .MEM_1316(267), .MEM_1321(268), .MEM_1309(261), .MEM_1309(255)>

.MEM_1311 : --> single use.
.MEM_1131 = PHI <.MEM_1311(263), .MEM_1309(266)>

.MEM_1312 : --> single use.
# .MEM_1313 = VDEF <.MEM_1312>
near_matches[nm_idx_1139].codec_idx = i_1622;

.MEM_1313 : --> single use.
# .MEM_1314 = VDEF <.MEM_1313>
near_matches[nm_idx_1139].rate = remote_codec_rate.92_700;

.MEM_1314 : --> single use.
# .MEM_1315 = VDEF <.MEM_1314>
near_matches[nm_idx_1139].imp = imp_629;

.MEM_1315 : --> single use.
# .MEM_1316 = VDEF <.MEM_1315>
near_matches[nm_idx_1139].map = map_1728;

.MEM_1316 : --> single use.
.MEM_1132 = PHI <.MEM_1138(242), .MEM_1310(260), .MEM_1316(267), .MEM_1321(268), .MEM_1309(261), .MEM_1309(255)>

.MEM_1317 : --> single use.
# .MEM_1318 = VDEF <.MEM_1317>
matches[m_idx_1487].rate = codec_rate.94_702;

.MEM_1318 : --> single use.
# .MEM_1319 = VDEF <.MEM_1318>
matches[m_idx_1487].imp = imp_629;

.MEM_1319 : --> single use.
# .MEM_1320 = VDEF <.MEM_1319>
matches[m_idx_1487].map = map_1728;

.MEM_1320 : -->4 uses.
# VUSE <.MEM_1320>
D.44929_707 = imp_629->microseconds_per_packet;
# VUSE <.MEM_1320>
D.44927_705 = imp_629->ianacode;
# VUSE <.MEM_1320>
D.44926_704 = imp_629->iananame;
# .MEM_1321 = VDEF <.MEM_1320>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);

.MEM_1321 : -->2 uses.
.MEM_1137 = PHI <.MEM_1321(268), .MEM_1135(271), .MEM_49(270), .MEM_1579(207)>
.MEM_1132 = PHI <.MEM_1138(242), .MEM_1310(260), .MEM_1316(267), .MEM_1321(268), .MEM_1309(261), .MEM_1309(255)>

.MEM_1322 : --> single use.
.MEM_1148 = PHI <.MEM_1325(282), .MEM_1137(283), .MEM_1322(273)>

.MEM_1323 : --> single use.
# .MEM_1324 = VDEF <.MEM_1323>
prefs[0] = &tmp;

.MEM_1324 : --> single use.
# .MEM_1325 = VDEF <.MEM_1324>
num_731 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);

.MEM_1325 : -->8 uses.
.MEM_1148 = PHI <.MEM_1325(282), .MEM_1137(283), .MEM_1322(273)>
.MEM_1846 = PHI <.MEM_1325(282), .MEM_1137(274)>
# .MEM_1326 = VDEF <.MEM_1325>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
# VUSE <.MEM_1325>
D.45027_740 = timp_872->actual_samples_per_second;
# VUSE <.MEM_1325>
D.45024_738 = timp_872->microseconds_per_packet;
# VUSE <.MEM_1325>
D.45026_737 = timp_872->iananame;
# VUSE <.MEM_1325>
D.45024_734 = timp_134->microseconds_per_packet;
# VUSE <.MEM_1325>
timp_732 = search[0];

.MEM_1326 : -->2 uses.
# .MEM_1327 = VDEF <.MEM_1326>
matches[0].codec_idx = D.45028_742;
# VUSE <.MEM_1326>
D.45028_742 = near_matches[j_897].codec_idx;

.MEM_1327 : --> single use.
# .MEM_1328 = VDEF <.MEM_1327>
matches[0].rate = near_rate.96_869;

.MEM_1328 : --> single use.
# .MEM_1329 = VDEF <.MEM_1328>
matches[0].imp = timp_872;

.MEM_1329 : --> single use.
# .MEM_1330 = VDEF <.MEM_1329>
matches[0].map = near_map_863;

.MEM_1330 : --> single use.
.MEM_1856 = PHI <.MEM_1137(283), .MEM_1330(281)>

.MEM_1331 : --> single use.
.MEM_1141 = PHI <.MEM_1856(284), .MEM_1331(285)>

.MEM_1332 : --> single use.
# .MEM_1333 = VDEF <.MEM_1332>
smh_186->num_negotiated_codecs = 0;

.MEM_1333 : -->2 uses.
.MEM_1880 = PHI <.MEM_1364(303), .MEM_1333(286)>
.MEM_1696 = PHI <.MEM_1364(303), .MEM_1333(286)>

.MEM_1334 : -->4 uses.
# VUSE <.MEM_1334>
mmap_762 = matches[j_1881].map;
# VUSE <.MEM_1334>
mimp_761 = matches[j_1881].imp;
.MEM_1142 = PHI <.MEM_1334(287), .MEM_1336(288), .MEM_1337(289)>
# .MEM_1335 = VDEF <.MEM_1334>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_760;

.MEM_1335 : --> single use.
# .MEM_1336 = VDEF <.MEM_1335>
pmap_760->current = 1;

.MEM_1336 : -->4 uses.
# .MEM_1337 = VDEF <.MEM_1336>
switch_rtp_set_default_payload (D.44605_764, D.45048_766);
.MEM_1142 = PHI <.MEM_1334(287), .MEM_1336(288), .MEM_1337(289)>
# VUSE <.MEM_1336>
D.44605_764 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# VUSE <.MEM_1336>
D.45048_766 = pmap_760->pt;

.MEM_1337 : --> single use.
.MEM_1142 = PHI <.MEM_1334(287), .MEM_1336(288), .MEM_1337(289)>

.MEM_1338 : --> single use.
# .MEM_1339 = VDEF <.MEM_1338>
pmap_760->rm_encoding = D.45050_768;

.MEM_1339 : -->2 uses.
# .MEM_1340 = VDEF <.MEM_1339>
D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
# VUSE <.MEM_1339>
D.45051_769 = mimp_761->iananame;

.MEM_1340 : --> single use.
# .MEM_1341 = VDEF <.MEM_1340>
pmap_760->iananame = D.45052_770;

.MEM_1341 : -->2 uses.
# VUSE <.MEM_1341>
D.45053_771 = mmap_762->rm_pt;
# .MEM_1342 = VDEF <.MEM_1341>
pmap_760->recv_pt = D.45054_772;

.MEM_1342 : -->2 uses.
# VUSE <.MEM_1342>
D.45055_773 = mimp_761->samples_per_second;
# .MEM_1343 = VDEF <.MEM_1342>
pmap_760->rm_rate = D.45055_773;

.MEM_1343 : --> single use.
# .MEM_1344 = VDEF <.MEM_1343>
pmap_760->adv_rm_rate = D.45055_773;

.MEM_1344 : -->5 uses.
# VUSE <.MEM_1344>
D.45056_776 = strcasecmp (D.45051_775, "g722");
# VUSE <.MEM_1344>
D.45051_775 = mimp_761->iananame;
.MEM_1143 = PHI <.MEM_1344(290), .MEM_1345(291)>
# .MEM_1345 = VDEF <.MEM_1344>
pmap_760->rm_rate = D.45059_777;
# VUSE <.MEM_1344>
D.45059_777 = mimp_761->actual_samples_per_second;

.MEM_1345 : --> single use.
.MEM_1143 = PHI <.MEM_1344(290), .MEM_1345(291)>

.MEM_1346 : -->2 uses.
# VUSE <.MEM_1346>
D.45063_781 = mimp_761->bits_per_second;
# .MEM_1347 = VDEF <.MEM_1346>
pmap_760->bitrate = D.45064_782;

.MEM_1347 : -->3 uses.
# VUSE <.MEM_1347>
D.45066_783 = mmap_762->rm_params;
# .MEM_1537 = VDEF <.MEM_1347>
D.47922_1485 = strtol (D.45066_783, 0B, 10);
.MEM_1514 = PHI <.MEM_1537(293), .MEM_1347(292)>

.MEM_1348 : -->5 uses.
# VUSE <.MEM_1348>
D.45070_788 = strcasecmp (D.45049_787, "opus");
# VUSE <.MEM_1348>
D.45049_787 = mmap_762->rm_encoding;
# .MEM_1355 = VDEF <.MEM_1348>
pmap_760->adv_channels = D.47922_146;
# .MEM_1351 = VDEF <.MEM_1348>
pmap_760->adv_channels = 2;
# .MEM_1349 = VDEF <.MEM_1348>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");

.MEM_1349 : --> single use.
# .MEM_1350 = VDEF <.MEM_1349>
pmap_760->adv_channels = 1;

.MEM_1350 : --> single use.
.MEM_1144 = PHI <.MEM_1350(296), .MEM_1351(297)>

.MEM_1351 : --> single use.
.MEM_1144 = PHI <.MEM_1350(296), .MEM_1351(297)>

.MEM_1352 : -->2 uses.
.MEM_1145 = PHI <.MEM_1144(299), .MEM_1352(427), .MEM_1144(298)>
# .MEM_1353 = VDEF <.MEM_1352>
pmap_760->channels = 2;

.MEM_1353 : --> single use.
.MEM_1146 = PHI <.MEM_1354(301), .MEM_1355(302), .MEM_1353(300)>

.MEM_1354 : --> single use.
.MEM_1146 = PHI <.MEM_1354(301), .MEM_1355(302), .MEM_1353(300)>

.MEM_1355 : --> single use.
.MEM_1146 = PHI <.MEM_1354(301), .MEM_1355(302), .MEM_1353(300)>

.MEM_1356 : --> single use.
# .MEM_1357 = VDEF <.MEM_1356>
pmap_760->remote_sdp_ip = D.45086_796;

.MEM_1357 : -->2 uses.
# VUSE <.MEM_1357>
D.44697_797 = m_1764->m_port;
# .MEM_1358 = VDEF <.MEM_1357>
pmap_760->remote_sdp_port = D.45087_798;

.MEM_1358 : -->2 uses.
# .MEM_1359 = VDEF <.MEM_1358>
D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
# VUSE <.MEM_1358>
D.45079_799 = mmap_762->rm_fmtp;

.MEM_1359 : --> single use.
# .MEM_1360 = VDEF <.MEM_1359>
pmap_760->rm_fmtp = D.45088_800;

.MEM_1360 : -->2 uses.
# VUSE <.MEM_1360>
D.45053_801 = mmap_762->rm_pt;
# .MEM_1361 = VDEF <.MEM_1360>
pmap_760->agreed_pt = D.45054_802;

.MEM_1361 : -->2 uses.
# VUSE <.MEM_1361>
D.44655_803 = smh_186->num_negotiated_codecs;
# .MEM_1362 = VDEF <.MEM_1361>
smh_186->negotiated_codecs[D.44655_803] = mimp_761;

.MEM_1362 : --> single use.
# .MEM_1363 = VDEF <.MEM_1362>
smh_186->num_negotiated_codecs = D.45089_804;

.MEM_1363 : -->2 uses.
# .MEM_1364 = VDEF <.MEM_1363>
pmap_760->recv_pt = D.45054_806;
# VUSE <.MEM_1363>
D.45053_805 = mmap_762->rm_pt;

.MEM_1364 : -->2 uses.
.MEM_1880 = PHI <.MEM_1364(303), .MEM_1333(286)>
.MEM_1696 = PHI <.MEM_1364(303), .MEM_1333(286)>

.MEM_1365 : -->4 uses.
# VUSE <.MEM_1365>
D.44760_813 = D.44750_812->remote_sdp_ip;
# VUSE <.MEM_1365>
D.44750_812 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# VUSE <.MEM_1365>
D.44530_811 = session_161(D)->channel;
# .MEM_1366 = VDEF <.MEM_1365>
switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);

.MEM_1366 : -->2 uses.
# VUSE <.MEM_1366>
D.44530_814 = session_161(D)->channel;
# .MEM_1367 = VDEF <.MEM_1366>
switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);

.MEM_1367 : -->3 uses.
# VUSE <.MEM_1367>
D.45092_816 = D.44750_815->recv_pt;
# VUSE <.MEM_1367>
D.44750_815 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1368 = VDEF <.MEM_1367>
switch_snprintf (&tmp, 50, "%d", D.45093_817);

.MEM_1368 : -->2 uses.
# .MEM_1369 = VDEF <.MEM_1368>
switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);
# VUSE <.MEM_1368>
D.44530_818 = session_161(D)->channel;

.MEM_1369 : -->9 uses.
.MEM_1149 = PHI <.MEM_1369(308), .MEM_1370(309), .MEM_1369(305), .MEM_1369(306), .MEM_1369(307)>
.MEM_1149 = PHI <.MEM_1369(308), .MEM_1370(309), .MEM_1369(305), .MEM_1369(306), .MEM_1369(307)>
.MEM_1149 = PHI <.MEM_1369(308), .MEM_1370(309), .MEM_1369(305), .MEM_1369(306), .MEM_1369(307)>
.MEM_1149 = PHI <.MEM_1369(308), .MEM_1370(309), .MEM_1369(305), .MEM_1369(306), .MEM_1369(307)>
# VUSE <.MEM_1369>
D.47934_1488 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
# VUSE <.MEM_1369>
D.47932_1490 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
# VUSE <.MEM_1369>
D.47931_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
# VUSE <.MEM_1369>
D.47930_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
# .MEM_1370 = VDEF <.MEM_1369>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;

.MEM_1370 : --> single use.
.MEM_1149 = PHI <.MEM_1369(308), .MEM_1370(309), .MEM_1369(305), .MEM_1369(306), .MEM_1369(307)>

.MEM_1371 : -->2 uses.
.MEM_1150 = PHI <.MEM_1148(304), .MEM_1372(311), .MEM_1371(310)>
# .MEM_1372 = VDEF <.MEM_1371>
check_ice (smh_186, 0, sdp_198, m_1764);

.MEM_1372 : --> single use.
.MEM_1150 = PHI <.MEM_1148(304), .MEM_1372(311), .MEM_1371(310)>

.MEM_1373 : -->3 uses.
.MEM_1151 = PHI <.MEM_1373(313), .MEM_1374(314)>
# .MEM_1374 = VDEF <.MEM_1373>
D.45109_828 = switch_channel_test_flag (D.44530_827, 93);
# VUSE <.MEM_1373>
D.44530_827 = session_161(D)->channel;

.MEM_1374 : -->2 uses.
.MEM_1851 = PHI <.MEM_1375(315), .MEM_1374(314)>
.MEM_1151 = PHI <.MEM_1373(313), .MEM_1374(314)>

.MEM_1375 : -->4 uses.
# VUSE <.MEM_1375>
best_te_833 = D.44471_832->te;
# VUSE <.MEM_1375>
D.44471_832 = smh_186->mparams;
.MEM_1852 = PHI <.MEM_1375(315), .MEM_1150(312)>
.MEM_1851 = PHI <.MEM_1375(315), .MEM_1374(314)>

.MEM_1376 : -->4 uses.
# .MEM_1383 = VDEF <.MEM_1376>
D.44471_845->te = best_te_1860;
# VUSE <.MEM_1376>
D.44471_845 = smh_186->mparams;
# .MEM_1377 = VDEF <.MEM_1376>
D.44471_835->te = best_te_1860;
# VUSE <.MEM_1376>
D.44471_835 = smh_186->mparams;

.MEM_1377 : --> single use.
# .MEM_1378 = VDEF <.MEM_1377>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);

.MEM_1378 : -->2 uses.
# .MEM_1379 = VDEF <.MEM_1378>
switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);
# VUSE <.MEM_1378>
D.44530_838 = session_161(D)->channel;

.MEM_1379 : -->2 uses.
# .MEM_1380 = VDEF <.MEM_1379>
D.44471_839->dtmf_type = 0;
# VUSE <.MEM_1379>
D.44471_839 = smh_186->mparams;

.MEM_1380 : -->3 uses.
# .MEM_1381 = VDEF <.MEM_1380>
switch_rtp_set_telephony_event (D.44605_840, best_te_1860);
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>
# VUSE <.MEM_1380>
D.44605_840 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;

.MEM_1381 : -->2 uses.
# .MEM_1382 = VDEF <.MEM_1381>
switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_837);
# VUSE <.MEM_1381>
D.44530_842 = session_161(D)->channel;

.MEM_1382 : --> single use.
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>

.MEM_1383 : --> single use.
# .MEM_1384 = VDEF <.MEM_1383>
D.44471_845->recv_te = best_te_1860;

.MEM_1384 : --> single use.
# .MEM_1385 = VDEF <.MEM_1384>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);

.MEM_1385 : -->2 uses.
# .MEM_1386 = VDEF <.MEM_1385>
switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);
# VUSE <.MEM_1385>
D.44530_849 = session_161(D)->channel;

.MEM_1386 : -->2 uses.
# .MEM_1387 = VDEF <.MEM_1386>
D.44471_850->dtmf_type = 0;
# VUSE <.MEM_1386>
D.44471_850 = smh_186->mparams;

.MEM_1387 : -->3 uses.
# .MEM_1388 = VDEF <.MEM_1387>
switch_rtp_set_telephony_event (D.44605_851, best_te_1860);
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>
# VUSE <.MEM_1387>
D.44605_851 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;

.MEM_1388 : -->2 uses.
# .MEM_1389 = VDEF <.MEM_1388>
switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_848);
# VUSE <.MEM_1388>
D.44530_853 = session_161(D)->channel;

.MEM_1389 : -->2 uses.
# .MEM_1390 = VDEF <.MEM_1389>
switch_rtp_set_telephony_recv_event (D.44605_855, best_te_1860);
# VUSE <.MEM_1389>
D.44605_855 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;

.MEM_1390 : -->2 uses.
# .MEM_1391 = VDEF <.MEM_1390>
switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_848);
# VUSE <.MEM_1390>
D.44530_856 = session_161(D)->channel;

.MEM_1391 : --> single use.
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>

.MEM_1392 : -->16 uses.
.MEM_1867 = PHI <.MEM_1650(330), .MEM_1392(321), .MEM_1649(329)>
# .MEM_1649 = VDEF <.MEM_1392>
D.49742_1607 = switch_is_number (D.45124_858);
.MEM_1631 = PHI <.MEM_1392(322), .MEM_1392(323), .MEM_1392(324), .MEM_1392(325), .MEM_1392(326), .MEM_1392(327), .MEM_1392(328), .MEM_1650(330)>
# VUSE <.MEM_1392>
D.49741_1606 = strcasecmp (D.45124_858, "disallow");
.MEM_1631 = PHI <.MEM_1392(322), .MEM_1392(323), .MEM_1392(324), .MEM_1392(325), .MEM_1392(326), .MEM_1392(327), .MEM_1392(328), .MEM_1650(330)>
# VUSE <.MEM_1392>
D.49740_1605 = strcasecmp (D.45124_858, "inactive");
.MEM_1631 = PHI <.MEM_1392(322), .MEM_1392(323), .MEM_1392(324), .MEM_1392(325), .MEM_1392(326), .MEM_1392(327), .MEM_1392(328), .MEM_1650(330)>
# VUSE <.MEM_1392>
D.49739_1604 = strcasecmp (D.45124_858, "disabled");
.MEM_1631 = PHI <.MEM_1392(322), .MEM_1392(323), .MEM_1392(324), .MEM_1392(325), .MEM_1392(326), .MEM_1392(327), .MEM_1392(328), .MEM_1650(330)>
# VUSE <.MEM_1392>
D.49738_1603 = strcasecmp (D.45124_858, "f");
.MEM_1631 = PHI <.MEM_1392(322), .MEM_1392(323), .MEM_1392(324), .MEM_1392(325), .MEM_1392(326), .MEM_1392(327), .MEM_1392(328), .MEM_1650(330)>
# VUSE <.MEM_1392>
D.49737_1602 = strcasecmp (D.45124_858, "false");
.MEM_1631 = PHI <.MEM_1392(322), .MEM_1392(323), .MEM_1392(324), .MEM_1392(325), .MEM_1392(326), .MEM_1392(327), .MEM_1392(328), .MEM_1650(330)>
# VUSE <.MEM_1392>
D.49736_1601 = strcasecmp (D.45124_858, "off");
.MEM_1631 = PHI <.MEM_1392(322), .MEM_1392(323), .MEM_1392(324), .MEM_1392(325), .MEM_1392(326), .MEM_1392(327), .MEM_1392(328), .MEM_1650(330)>
# VUSE <.MEM_1392>
D.49735_1600 = strcasecmp (D.45124_858, "no");

.MEM_1393 : --> no uses.

.MEM_1394 : -->2 uses.
# .MEM_1395 = VDEF <.MEM_1394>
switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);
# VUSE <.MEM_1394>
D.44530_860 = session_161(D)->channel;

.MEM_1395 : -->2 uses.
# .MEM_1396 = VDEF <.MEM_1395>
D.44471_861->dtmf_type = 1;
# VUSE <.MEM_1395>
D.44471_861 = smh_186->mparams;

.MEM_1396 : --> single use.
# .MEM_1397 = VDEF <.MEM_1396>
D.44471_861->te = 0;

.MEM_1397 : --> single use.
# .MEM_1398 = VDEF <.MEM_1397>
D.44471_861->recv_te = 0;

.MEM_1398 : --> single use.
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>

.MEM_1399 : -->2 uses.
# .MEM_1400 = VDEF <.MEM_1399>
D.44471_867->dtmf_type = 2;
# VUSE <.MEM_1399>
D.44471_867 = smh_186->mparams;

.MEM_1400 : --> single use.
# .MEM_1401 = VDEF <.MEM_1400>
D.44471_867->te = 0;

.MEM_1401 : --> single use.
# .MEM_1402 = VDEF <.MEM_1401>
D.44471_867->recv_te = 0;

.MEM_1402 : --> single use.
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>

.MEM_1403 : --> single use.
# .MEM_1404 = VDEF <.MEM_1403>
memset (&near_matches, 0, 480);

.MEM_1404 : -->2 uses.
# .MEM_1405 = VDEF <.MEM_1404>
switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);
# VUSE <.MEM_1404>
D.44530_878 = session_161(D)->channel;

.MEM_1405 : -->6 uses.
.MEM_1872 = PHI <.MEM_1090(392), .MEM_1405(337)>
.MEM_1873 = PHI <.MEM_1090(392), .MEM_1405(337)>
# VUSE <.MEM_1405>
map_883 = m_1764->m_rtpmaps;
# .MEM_1406 = VDEF <.MEM_1405>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
# VUSE <.MEM_1405>
connection_880 = m_1764->m_connections;
# VUSE <.MEM_1405>
connection_879 = sdp_198->sdp_connection;

.MEM_1406 : --> single use.
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>

.MEM_1407 : -->2 uses.
.MEM_1153 = PHI <.MEM_1407(338), .MEM_1408(339)>
# .MEM_1408 = VDEF <.MEM_1407>
D.45140_885 = dtls_ok (session_161(D));

.MEM_1408 : -->10 uses.
.MEM_1882 = PHI <.MEM_1156(376), .MEM_1153(345), .MEM_1408(340)>
# VUSE <.MEM_1408>
attr_62 = m_1764->m_attributes;
.MEM_1719 = PHI <.MEM_1156(376), .MEM_1153(345), .MEM_1408(436)>
# VUSE <.MEM_1408>
D.45143_888 = strcasecmp (D.44590_887, "fingerprint");
# VUSE <.MEM_1408>
D.44590_887 = attr_1850->a_name;
# VUSE <.MEM_1408>
attr_892 = attr_1850->a_next;
.MEM_1153 = PHI <.MEM_1407(338), .MEM_1408(339)>
# VUSE <.MEM_1408>
D.47939_1495 = *D.44619_889;
# VUSE <.MEM_1408>
D.44619_889 = attr_1850->a_value;
# VUSE <.MEM_1408>
attr_886 = m_1764->m_attributes;

.MEM_1409 : -->3 uses.
.MEM_1154 = PHI <.MEM_1409(431), .MEM_1410(351)>
# VUSE <.MEM_1409>
D.45163_903 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
# .MEM_1410 = VDEF <.MEM_1409>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45164_904;

.MEM_1410 : --> single use.
.MEM_1154 = PHI <.MEM_1409(431), .MEM_1410(351)>

.MEM_1411 : --> single use.
.MEM_1156 = PHI <.MEM_1719(347), .MEM_1411(352), .MEM_1414(358), .MEM_1719(359), .MEM_1719(360), .MEM_1719(362), .MEM_1418(375), .MEM_1719(350), .MEM_1413(357), .MEM_1719(349), .MEM_1719(361)>

.MEM_1412 : -->2 uses.
# .MEM_1543 = VDEF <.MEM_1412>
D.47946_1499 = strtol (D.44619_954, 0B, 10);
# VUSE <.MEM_1412>
D.44619_954 = attr_619->a_value;

.MEM_1413 : -->4 uses.
# .MEM_1414 = VDEF <.MEM_1413>
D.44471_957->rtcp_video_interval_msec = "5000";
.MEM_1156 = PHI <.MEM_1719(347), .MEM_1411(352), .MEM_1414(358), .MEM_1719(359), .MEM_1719(360), .MEM_1719(362), .MEM_1418(375), .MEM_1719(350), .MEM_1413(357), .MEM_1719(349), .MEM_1719(361)>
# VUSE <.MEM_1413>
D.45214_958 = D.44471_957->rtcp_video_interval_msec;
# VUSE <.MEM_1413>
D.44471_957 = smh_186->mparams;

.MEM_1414 : --> single use.
.MEM_1156 = PHI <.MEM_1719(347), .MEM_1411(352), .MEM_1414(358), .MEM_1719(359), .MEM_1719(360), .MEM_1719(362), .MEM_1418(375), .MEM_1719(350), .MEM_1413(357), .MEM_1719(349), .MEM_1719(361)>

.MEM_1415 : -->16 uses.
.MEM_1864 = PHI <.MEM_1653(372), .MEM_1415(363), .MEM_1652(371)>
# .MEM_1652 = VDEF <.MEM_1415>
D.49754_1617 = switch_is_number (D.45227_968);
.MEM_1633 = PHI <.MEM_1415(364), .MEM_1415(365), .MEM_1415(366), .MEM_1415(367), .MEM_1415(368), .MEM_1415(369), .MEM_1415(370), .MEM_1653(372)>
# VUSE <.MEM_1415>
D.49753_1616 = strcasecmp (D.45227_968, "allow");
.MEM_1633 = PHI <.MEM_1415(364), .MEM_1415(365), .MEM_1415(366), .MEM_1415(367), .MEM_1415(368), .MEM_1415(369), .MEM_1415(370), .MEM_1653(372)>
# VUSE <.MEM_1415>
D.49752_1615 = strcasecmp (D.45227_968, "active");
.MEM_1633 = PHI <.MEM_1415(364), .MEM_1415(365), .MEM_1415(366), .MEM_1415(367), .MEM_1415(368), .MEM_1415(369), .MEM_1415(370), .MEM_1653(372)>
# VUSE <.MEM_1415>
D.49751_1614 = strcasecmp (D.45227_968, "enabled");
.MEM_1633 = PHI <.MEM_1415(364), .MEM_1415(365), .MEM_1415(366), .MEM_1415(367), .MEM_1415(368), .MEM_1415(369), .MEM_1415(370), .MEM_1653(372)>
# VUSE <.MEM_1415>
D.49750_1613 = strcasecmp (D.45227_968, "t");
.MEM_1633 = PHI <.MEM_1415(364), .MEM_1415(365), .MEM_1415(366), .MEM_1415(367), .MEM_1415(368), .MEM_1415(369), .MEM_1415(370), .MEM_1653(372)>
# VUSE <.MEM_1415>
D.49749_1612 = strcasecmp (D.45227_968, "true");
.MEM_1633 = PHI <.MEM_1415(364), .MEM_1415(365), .MEM_1415(366), .MEM_1415(367), .MEM_1415(368), .MEM_1415(369), .MEM_1415(370), .MEM_1653(372)>
# VUSE <.MEM_1415>
D.49748_1611 = strcasecmp (D.45227_968, "on");
.MEM_1633 = PHI <.MEM_1415(364), .MEM_1415(365), .MEM_1415(366), .MEM_1415(367), .MEM_1415(368), .MEM_1415(369), .MEM_1415(370), .MEM_1653(372)>
# VUSE <.MEM_1415>
D.49747_1610 = strcasecmp (D.45227_968, "yes");

.MEM_1416 : --> no uses.

.MEM_1417 : --> single use.
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>

.MEM_1418 : --> single use.
.MEM_1156 = PHI <.MEM_1719(347), .MEM_1411(352), .MEM_1414(358), .MEM_1719(359), .MEM_1719(360), .MEM_1719(362), .MEM_1418(375), .MEM_1719(350), .MEM_1413(357), .MEM_1719(349), .MEM_1719(361)>

.MEM_1419 : -->3 uses.
.MEM_1158 = PHI <.MEM_1419(381), .MEM_1420(382)>
# .MEM_1420 = VDEF <.MEM_1419>
D.45244_990 = switch_channel_test_flag (D.44530_989, 114);
# VUSE <.MEM_1419>
D.44530_989 = session_161(D)->channel;

.MEM_1420 : -->2 uses.
.MEM_1160 = PHI <.MEM_870(380), .MEM_1420(382), .MEM_1421(389), .MEM_1421(388), .MEM_1424(390)>
.MEM_1158 = PHI <.MEM_1419(381), .MEM_1420(382)>

.MEM_1421 : -->13 uses.
# VUSE <.MEM_1421>
D.45255_996 = map_1620->rm_encoding;
# VUSE <.MEM_1421>
D.45247_1003 = map_1620->rm_pt;
.MEM_1160 = PHI <.MEM_870(380), .MEM_1420(382), .MEM_1421(389), .MEM_1421(388), .MEM_1424(390)>
.MEM_1160 = PHI <.MEM_870(380), .MEM_1420(382), .MEM_1421(389), .MEM_1421(388), .MEM_1424(390)>
# VUSE <.MEM_1421>
D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
# VUSE <.MEM_1421>
D.47957_1503 = *D.45255_996;
# .MEM_1422 = VDEF <.MEM_1421>
matches[m_idx_910].imp = imp_985;
# VUSE <.MEM_1421>
D.45263_1014 = imp_985->samples_per_second;
# VUSE <.MEM_1421>
D.45262_1013 = map_1620->rm_rate;
# VUSE <.MEM_1421>
D.45249_1010 = imp_985->iananame;
# VUSE <.MEM_1421>
D.45250_1007 = imp_985->ianacode;
# VUSE <.MEM_1421>
D.44821_999 = D.44471_998->ndlb;
# VUSE <.MEM_1421>
D.44471_998 = smh_186->mparams;

.MEM_1422 : --> single use.
# .MEM_1423 = VDEF <.MEM_1422>
matches[m_idx_910].map = map_1620;

.MEM_1423 : -->3 uses.
# .MEM_1424 = VDEF <.MEM_1423>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
# VUSE <.MEM_1423>
D.45250_1016 = imp_985->ianacode;
# VUSE <.MEM_1423>
D.45249_1015 = imp_985->iananame;

.MEM_1424 : --> single use.
.MEM_1160 = PHI <.MEM_870(380), .MEM_1420(382), .MEM_1421(389), .MEM_1421(388), .MEM_1424(390)>

.MEM_1425 : --> single use.
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>

.MEM_1426 : --> single use.
.MEM_1164 = PHI <.MEM_1873(396), .MEM_1426(397)>

.MEM_1427 : --> single use.
.MEM_1843 = PHI <.MEM_1442(402), .MEM_1427(398)>

.MEM_1428 : -->2 uses.
.MEM_1165 = PHI <.MEM_1428(399), .MEM_1430(400), .MEM_1431(401)>
# .MEM_1429 = VDEF <.MEM_1428>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1044;

.MEM_1429 : --> single use.
# .MEM_1430 = VDEF <.MEM_1429>
pmap_1044->current = 1;

.MEM_1430 : -->4 uses.
# .MEM_1431 = VDEF <.MEM_1430>
switch_rtp_set_default_payload (D.45287_1046, D.45290_1048);
.MEM_1165 = PHI <.MEM_1428(399), .MEM_1430(400), .MEM_1431(401)>
# VUSE <.MEM_1430>
D.45287_1046 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
# VUSE <.MEM_1430>
D.45290_1048 = pmap_1044->pt;

.MEM_1431 : --> single use.
.MEM_1165 = PHI <.MEM_1428(399), .MEM_1430(400), .MEM_1431(401)>

.MEM_1432 : --> single use.
# .MEM_1433 = VDEF <.MEM_1432>
pmap_1044->rm_encoding = D.45291_1052;

.MEM_1433 : -->2 uses.
# VUSE <.MEM_1433>
D.45247_1053 = map_1050->rm_pt;
# .MEM_1434 = VDEF <.MEM_1433>
pmap_1044->recv_pt = D.45292_1054;

.MEM_1434 : -->2 uses.
# VUSE <.MEM_1434>
D.45262_1055 = map_1050->rm_rate;
# .MEM_1435 = VDEF <.MEM_1434>
pmap_1044->rm_rate = D.45262_1055;

.MEM_1435 : -->2 uses.
# VUSE <.MEM_1435>
D.45293_1056 = mimp_1049->microseconds_per_packet;
# .MEM_1436 = VDEF <.MEM_1435>
pmap_1044->codec_ms = D.45295_1058;

.MEM_1436 : -->2 uses.
# VUSE <.MEM_1436>
D.45085_1059 = connection_110->c_address;
# .MEM_1437 = VDEF <.MEM_1436>
D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);

.MEM_1437 : --> single use.
# .MEM_1438 = VDEF <.MEM_1437>
pmap_1044->remote_sdp_ip = D.45296_1060;

.MEM_1438 : -->2 uses.
# .MEM_1439 = VDEF <.MEM_1438>
pmap_1044->remote_sdp_port = D.45087_1062;
# VUSE <.MEM_1438>
D.44697_1061 = m_1764->m_port;

.MEM_1439 : -->2 uses.
# .MEM_1440 = VDEF <.MEM_1439>
D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
# VUSE <.MEM_1439>
D.45297_1063 = map_1050->rm_fmtp;

.MEM_1440 : --> single use.
# .MEM_1441 = VDEF <.MEM_1440>
pmap_1044->rm_fmtp = D.45298_1064;

.MEM_1441 : -->2 uses.
# .MEM_1442 = VDEF <.MEM_1441>
pmap_1044->agreed_pt = D.45292_1066;
# VUSE <.MEM_1441>
D.45247_1065 = map_1050->rm_pt;

.MEM_1442 : -->4 uses.
.MEM_1843 = PHI <.MEM_1442(402), .MEM_1427(398)>
# VUSE <.MEM_1442>
D.45299_1069 = D.45286_1068->remote_sdp_port;
# .MEM_1443 = VDEF <.MEM_1442>
switch_snprintf (&tmp, 50, "%d", D.45300_1070);
# VUSE <.MEM_1442>
D.45286_1068 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;

.MEM_1443 : -->4 uses.
# VUSE <.MEM_1443>
D.45286_1072 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1444 = VDEF <.MEM_1443>
switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);
# VUSE <.MEM_1443>
D.45301_1073 = D.45286_1072->remote_sdp_ip;
# VUSE <.MEM_1443>
D.44530_1071 = session_161(D)->channel;

.MEM_1444 : -->2 uses.
# .MEM_1445 = VDEF <.MEM_1444>
switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);
# VUSE <.MEM_1444>
D.44530_1074 = session_161(D)->channel;

.MEM_1445 : -->4 uses.
# VUSE <.MEM_1445>
D.45286_1076 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1446 = VDEF <.MEM_1445>
switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);
# VUSE <.MEM_1445>
D.45302_1077 = D.45286_1076->rm_fmtp;
# VUSE <.MEM_1445>
D.44530_1075 = session_161(D)->channel;

.MEM_1446 : -->3 uses.
# VUSE <.MEM_1446>
D.45286_1078 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1447 = VDEF <.MEM_1446>
switch_snprintf (&tmp, 50, "%d", D.45304_1080);
# VUSE <.MEM_1446>
D.45303_1079 = D.45286_1078->agreed_pt;

.MEM_1447 : -->2 uses.
# .MEM_1448 = VDEF <.MEM_1447>
switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);
# VUSE <.MEM_1447>
D.44530_1081 = session_161(D)->channel;

.MEM_1448 : --> single use.
# .MEM_1449 = VDEF <.MEM_1448>
switch_core_media_check_video_codecs (session_161(D));

.MEM_1449 : -->3 uses.
# VUSE <.MEM_1449>
D.45286_1082 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1450 = VDEF <.MEM_1449>
switch_snprintf (&tmp, 50, "%d", D.45306_1084);
# VUSE <.MEM_1449>
D.45305_1083 = D.45286_1082->recv_pt;

.MEM_1450 : -->2 uses.
# .MEM_1451 = VDEF <.MEM_1450>
switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);
# VUSE <.MEM_1450>
D.44530_1085 = session_161(D)->channel;

.MEM_1451 : -->9 uses.
# VUSE <.MEM_1451>
D.47965_1505 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
.MEM_1167 = PHI <.MEM_1451(408), .MEM_1452(409), .MEM_1451(405), .MEM_1451(406), .MEM_1451(407)>
.MEM_1167 = PHI <.MEM_1451(408), .MEM_1452(409), .MEM_1451(405), .MEM_1451(406), .MEM_1451(407)>
.MEM_1167 = PHI <.MEM_1451(408), .MEM_1452(409), .MEM_1451(405), .MEM_1451(406), .MEM_1451(407)>
.MEM_1167 = PHI <.MEM_1451(408), .MEM_1452(409), .MEM_1451(405), .MEM_1451(406), .MEM_1451(407)>
# VUSE <.MEM_1451>
D.47963_1507 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
# VUSE <.MEM_1451>
D.47962_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
# VUSE <.MEM_1451>
D.47961_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
# .MEM_1452 = VDEF <.MEM_1451>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;

.MEM_1452 : --> single use.
.MEM_1167 = PHI <.MEM_1451(408), .MEM_1452(409), .MEM_1451(405), .MEM_1451(406), .MEM_1451(407)>

.MEM_1453 : -->2 uses.
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>
# .MEM_1454 = VDEF <.MEM_1453>
check_ice (smh_186, 1, sdp_198, m_1764);

.MEM_1454 : --> single use.
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>

.MEM_1455 : -->2 uses.
# VUSE <.MEM_1455>
D.44471_1094 = smh_186->mparams;
# .MEM_1456 = VDEF <.MEM_1455>
D.44471_1094->cng_pt = cng_pt_1047;

.MEM_1456 : --> no uses.

pmap_1457 : -->3 uses.
pmap_1747 = PHI <pmap_1459(23), pmap_1457(21)>
# DEBUG pmap => pmap_1457
if (pmap_1457 != 0B)
D.47871_1661 = pmap_1457->allocated;
# DEBUG pmap => pmap_1457

pmap_1459 : -->3 uses.
pmap_1747 = PHI <pmap_1459(23), pmap_1457(21)>
if (pmap_1459 != 0B)
# DEBUG pmap => pmap_1459
D.47871_1460 = pmap_1459->allocated;
# DEBUG pmap => pmap_1459

D.47871_1460 : --> single use.
if (D.47871_1460 != 0)

pmap_1461 : -->3 uses.
pmap_1672 = PHI <pmap_1463(27), pmap_1461(25)>
# DEBUG pmap => pmap_1461
if (pmap_1461 != 0B)
D.47874_1670 = pmap_1461->allocated;
# DEBUG pmap => pmap_1461

pmap_1463 : -->3 uses.
pmap_1672 = PHI <pmap_1463(27), pmap_1461(25)>
if (pmap_1463 != 0B)
# DEBUG pmap => pmap_1463
D.47874_1464 = pmap_1463->allocated;
# DEBUG pmap => pmap_1463

D.47874_1464 : --> single use.
if (D.47874_1464 != 0)

D.47877_1465 : --> single use.
if (D.47877_1465 == 0)

dptime_1467 : --> single use.
dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>

dmaxptime_1468 : --> single use.
dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>

D.47887_1469 : --> single use.
if (D.47887_1469 == 0)

maxptime_1470 : -->8 uses.
maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>
maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>
maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>
maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>
maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>
maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>
maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>
maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>

D.47890_1471 : --> single use.
D.44799_515 = (short unsigned int) D.47890_1471;

ptime_1472 : --> single use.
ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>

maxptime_1473 : --> single use.
maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>

D.47900_1474 : --> single use.
if (D.47900_1474 == 0)

ptime_1475 : -->8 uses.
ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>
ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>
ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>
ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>
ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>
ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>
ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>
ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>

crypto_tag_1476 : --> single use.
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));

map_bit_rate_1479 : --> single use.
map_bit_rate_1480 = PHI <0(225), map_bit_rate_1479(226)>

map_bit_rate_1480 : -->3 uses.
map_bit_rate_132 = PHI <map_bit_rate_1480(233), map_bit_rate_1480(425), map_bit_rate_131(239), map_bit_rate_131(240), 13332(232), 32001(234)>
map_bit_rate_132 = PHI <map_bit_rate_1480(233), map_bit_rate_1480(425), map_bit_rate_131(239), map_bit_rate_131(240), 13332(232), 32001(234)>
map_bit_rate_131 = PHI <map_bit_rate_1480(235), map_bit_rate_614(236)>

D.47915_1481 : --> single use.
if (D.47915_1481 == 0)

D.47919_1483 : --> single use.
if (D.47919_1483 == 0)

D.47922_1485 : --> single use.
D.47922_146 = PHI <D.47922_1485(293), 1(292)>

D.47926_1486 : --> single use.
if (D.47926_1486 == 0)

m_idx_1487 : -->10 uses.
m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>
m_idx_703 = m_idx_1487 + 1;
matches[m_idx_1487].map = map_1728;
matches[m_idx_1487].imp = imp_629;
matches[m_idx_1487].rate = codec_rate.94_702;
matches[m_idx_1487].codec_idx = i_1622;
m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>
m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>
m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>
m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>

D.47934_1488 : --> single use.
D.47933_1489 = D.47934_1488 & 256;

D.47933_1489 : --> single use.
if (D.47933_1489 != 0)

D.47932_1490 : --> single use.
if (D.47932_1490 != 0B)

D.47931_1491 : --> single use.
if (D.47931_1491 != 0B)

D.47930_1492 : --> single use.
if (D.47930_1492 != 0B)

remote_codec_rate_1493 : -->5 uses.
remote_codec_rate_96 = PHI <remote_codec_rate_1493(246), remote_codec_rate_1493(251), fmtp_remote_codec_rate_99(250)>
if (remote_codec_rate_1493 == codec_rate_632)
remote_codec_rate_96 = PHI <remote_codec_rate_1493(246), remote_codec_rate_1493(251), fmtp_remote_codec_rate_99(250)>
remote_codec_rate.92_636 = (int) remote_codec_rate_1493;
remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>

D.47939_1495 : --> single use.
if (D.47939_1495 == 0)

D.44997_1496 : --> single use.
D.44999_1152 = D.44998_1609 & D.44997_1496;

D.47943_1497 : --> single use.
if (D.47943_1497 == 0)

D.44996_1498 : --> single use.
D.44997_1496 = D.44996_1498 > 0;

D.47946_1499 : --> single use.
D.45213_956 = (short unsigned int) D.47946_1499;

D.47950_1500 : --> single use.
if (D.47950_1500 == 0)

D.44471_1501 : --> single use.
D.44996_1498 = D.44471_1501->num_codecs;

crypto_tag_1502 : --> single use.
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));

D.47957_1503 : --> single use.
if (D.47957_1503 == 0)

D.47965_1505 : --> single use.
D.47964_1506 = D.47965_1505 & 256;

D.47964_1506 : --> single use.
if (D.47964_1506 != 0)

D.47963_1507 : --> single use.
if (D.47963_1507 != 0B)

D.47962_1508 : --> single use.
if (D.47962_1508 != 0B)

D.47961_1509 : --> single use.
if (D.47961_1509 != 0B)

.MEM_1514 : --> single use.
# .MEM_1348 = VDEF <.MEM_1514>
pmap_760->channels = D.47922_146;

.MEM_1515 : --> single use.
# .MEM_1516 = VDEF <.MEM_1515>
pmap_1747->current = 0;

.MEM_1516 : -->5 uses.
.MEM_1837 = PHI <.MEM_1516(23), .MEM_1184(21)>
# VUSE <.MEM_1516>
pmap_1459 = pmap_1747->next;
.MEM_1836 = PHI <.MEM_1516(23), .MEM_1516(22), .MEM_1184(20), .MEM_1184(21)>
.MEM_1836 = PHI <.MEM_1516(23), .MEM_1516(22), .MEM_1184(20), .MEM_1184(21)>
# VUSE <.MEM_1516>
D.47871_1460 = pmap_1459->allocated;

.MEM_1517 : --> single use.
# .MEM_1518 = VDEF <.MEM_1517>
pmap_1672->current = 0;

.MEM_1518 : -->5 uses.
.MEM_1663 = PHI <.MEM_1518(27), .MEM_1836(25)>
# VUSE <.MEM_1518>
pmap_1463 = pmap_1672->next;
.MEM_1878 = PHI <.MEM_1518(27), .MEM_1518(26), .MEM_1836(24), .MEM_1836(25)>
.MEM_1878 = PHI <.MEM_1518(27), .MEM_1518(26), .MEM_1836(24), .MEM_1836(25)>
# VUSE <.MEM_1518>
D.47874_1464 = pmap_1463->allocated;

.MEM_1520 : --> single use.
.MEM_1102 = PHI <.MEM_1838(61), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1838(70), .MEM_1520(72), .MEM_1838(73), .MEM_1522(74), .MEM_1207(67), .MEM_1838(60)>

.MEM_1522 : --> single use.
.MEM_1102 = PHI <.MEM_1838(61), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1838(70), .MEM_1520(72), .MEM_1838(73), .MEM_1522(74), .MEM_1207(67), .MEM_1838(60)>

.MEM_1525 : --> single use.
# .MEM_1293 = VDEF <.MEM_1525>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;

.MEM_1527 : --> single use.
.MEM_1124 = PHI <.MEM_1294(176), .MEM_1527(179), .MEM_1529(182), .MEM_1108(183), .MEM_1108(184), .MEM_1108(186), .MEM_1298(199), .MEM_1293(175), .MEM_1108(185)>

.MEM_1529 : --> single use.
.MEM_1124 = PHI <.MEM_1294(176), .MEM_1527(179), .MEM_1529(182), .MEM_1108(183), .MEM_1108(184), .MEM_1108(186), .MEM_1298(199), .MEM_1293(175), .MEM_1108(185)>

.MEM_1532 : --> single use.
# .MEM_1298 = VDEF <.MEM_1532>
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));

.MEM_1537 : --> single use.
.MEM_1514 = PHI <.MEM_1537(293), .MEM_1347(292)>

.MEM_1543 : --> single use.
# .MEM_1413 = VDEF <.MEM_1543>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45213_956;

.MEM_1546 : --> single use.
# .MEM_1418 = VDEF <.MEM_1546>
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));

D.49675_1550 : --> single use.
if (D.49675_1550 == 0)

D.49676_1551 : --> single use.
if (D.49676_1551 == 0)

D.49677_1552 : --> single use.
if (D.49677_1552 == 0)

D.49678_1553 : --> single use.
if (D.49678_1553 == 0)

D.49679_1554 : --> single use.
if (D.49679_1554 == 0)

D.49680_1555 : --> single use.
if (D.49680_1555 == 0)

D.49681_1556 : --> single use.
if (D.49681_1556 == 0)

D.49682_1557 : --> single use.
if (D.49682_1557 != 0)

D.49683_1558 : --> single use.
if (D.49683_1558 == 0)

attr_1559 : -->3 uses.
D.44590_501 = attr_1559->a_name;
attr_506 = attr_1559->a_next;
D.44619_503 = attr_1559->a_value;

D.49687_1560 : --> single use.
if (D.49687_1560 == 0)

D.49688_1561 : --> single use.
if (D.49688_1561 == 0)

D.49689_1562 : --> single use.
if (D.49689_1562 == 0)

D.49690_1563 : --> single use.
if (D.49690_1563 == 0)

D.49691_1564 : --> single use.
if (D.49691_1564 == 0)

D.49692_1565 : --> single use.
if (D.49692_1565 == 0)

D.49693_1566 : --> single use.
if (D.49693_1566 == 0)

D.49694_1567 : --> single use.
if (D.49694_1567 != 0)

D.49695_1568 : --> single use.
if (D.49695_1568 != 0)

D.49699_1570 : --> single use.
if (D.49699_1570 == 0)

D.49700_1571 : --> single use.
if (D.49700_1571 == 0)

D.49701_1572 : --> single use.
if (D.49701_1572 == 0)

D.49702_1573 : --> single use.
if (D.49702_1573 == 0)

D.49703_1574 : --> single use.
if (D.49703_1574 == 0)

D.49704_1575 : --> single use.
if (D.49704_1575 == 0)

D.49705_1576 : --> single use.
if (D.49705_1576 == 0)

D.49706_1577 : --> single use.
if (D.49706_1577 != 0)

D.49707_1578 : --> single use.
if (D.49707_1578 != 0)

.MEM_1579 : -->7 uses.
# VUSE <.MEM_1579>
connection_555 = m_1764->m_connections;
# VUSE <.MEM_1579>
connection_554 = sdp_198->sdp_connection;
.MEM_1171 = PHI <.MEM_1135(271), .MEM_1579(207)>
.MEM_1137 = PHI <.MEM_1321(268), .MEM_1135(271), .MEM_49(270), .MEM_1579(207)>
# VUSE <.MEM_1579>
map_559 = m_1764->m_rtpmaps;
# .MEM_1300 = VDEF <.MEM_1579>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
# .MEM_1299 = VDEF <.MEM_1579>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");

D.49711_1580 : --> single use.
if (D.49711_1580 == 0)

D.49712_1581 : --> single use.
if (D.49712_1581 == 0)

D.49713_1582 : --> single use.
if (D.49713_1582 == 0)

D.49714_1583 : --> single use.
if (D.49714_1583 == 0)

D.49715_1584 : --> single use.
if (D.49715_1584 == 0)

D.49716_1585 : --> single use.
if (D.49716_1585 == 0)

D.49717_1586 : --> single use.
if (D.49717_1586 == 0)

D.49718_1587 : --> single use.
if (D.49718_1587 != 0)

D.49719_1588 : --> single use.
if (D.49719_1588 != 0)

reneg_1589 : --> single use.
reneg_82 = PHI <0(94), reneg_353(95), reneg_1589(106)>

D.49723_1590 : --> single use.
if (D.49723_1590 == 0)

D.49724_1591 : --> single use.
if (D.49724_1591 == 0)

D.49725_1592 : --> single use.
if (D.49725_1592 == 0)

D.49726_1593 : --> single use.
if (D.49726_1593 == 0)

D.49727_1594 : --> single use.
if (D.49727_1594 == 0)

D.49728_1595 : --> single use.
if (D.49728_1595 == 0)

D.49729_1596 : --> single use.
if (D.49729_1596 == 0)

D.49730_1597 : --> single use.
if (D.49730_1597 != 0)

D.49731_1598 : --> single use.
if (D.49731_1598 != 0)

attr_1599 : -->8 uses.
D.44590_508 = attr_1599->a_name;
attr_548 = attr_1599->a_next;
crypto_544 = attr_1599->a_value;
D.44619_531 = attr_1599->a_value;
D.44619_526 = attr_1599->a_value;
D.44619_521 = attr_1599->a_value;
D.44619_513 = attr_1599->a_value;
D.44619_510 = attr_1599->a_value;

D.49735_1600 : --> single use.
if (D.49735_1600 == 0)

D.49736_1601 : --> single use.
if (D.49736_1601 == 0)

D.49737_1602 : --> single use.
if (D.49737_1602 == 0)

D.49738_1603 : --> single use.
if (D.49738_1603 == 0)

D.49739_1604 : --> single use.
if (D.49739_1604 == 0)

D.49740_1605 : --> single use.
if (D.49740_1605 == 0)

D.49741_1606 : --> single use.
if (D.49741_1606 == 0)

D.49742_1607 : --> single use.
if (D.49742_1607 != 0)

D.49743_1608 : --> single use.
if (D.49743_1608 == 0)

D.44998_1609 : --> single use.
D.44999_1152 = D.44998_1609 & D.44997_1496;

D.49747_1610 : --> single use.
if (D.49747_1610 == 0)

D.49748_1611 : --> single use.
if (D.49748_1611 == 0)

D.49749_1612 : --> single use.
if (D.49749_1612 == 0)

D.49750_1613 : --> single use.
if (D.49750_1613 == 0)

D.49751_1614 : --> single use.
if (D.49751_1614 == 0)

D.49752_1615 : --> single use.
if (D.49752_1615 == 0)

D.49753_1616 : --> single use.
if (D.49753_1616 == 0)

D.49754_1617 : --> single use.
if (D.49754_1617 != 0)

D.49755_1618 : --> single use.
if (D.49755_1618 != 0)

map_1620 : -->7 uses.
rm_encoding_979 = map_1620->rm_encoding;
map_1021 = map_1620->rm_next;
D.45255_996 = map_1620->rm_encoding;
D.45247_991 = map_1620->rm_pt;
D.45247_1003 = map_1620->rm_pt;
matches[m_idx_910].map = map_1620;
D.45262_1013 = map_1620->rm_rate;

.MEM_1621 : -->3 uses.
# .MEM_1182 = VDEF <.MEM_1621>
switch_channel_clear_flag (D.44482_206, 111);
# VUSE <.MEM_1621>
D.44482_206 = D.44481_205->channel;
# VUSE <.MEM_1621>
D.44481_205 = smh_186->session;

i_1622 : -->4 uses.
i.91_626 = (unsigned int) i_1622;
i_710 = i_1622 + 1;
matches[m_idx_1487].codec_idx = i_1622;
near_matches[nm_idx_1139].codec_idx = i_1622;

.MEM_1623 : -->2 uses.
# .MEM_1200 = VDEF <.MEM_1623>
switch_channel_set_flag_value (D.44530_247, 93, 1);
# VUSE <.MEM_1623>
D.44530_247 = session_161(D)->channel;

best_te_1624 : -->2 uses.
best_te_1860 = PHI <best_te_833(315), best_te_1624(312)>
if (best_te_1624 == 0)

.MEM_1625 : --> single use.
.MEM_669 = PHI <.MEM_1215(91), .MEM_1105(90), .MEM_1625(89), .MEM_1211(78)>

cng_pt_1626 : -->6 uses.
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>

.MEM_1627 : --> single use.
.MEM_1107 = PHI <.MEM_1106(94), .MEM_1220(95), .MEM_1627(106)>

.MEM_1629 : --> single use.
.MEM_1123 = PHI <.MEM_1108(422), .MEM_1629(197), .MEM_1884(423)>

.MEM_1631 : -->2 uses.
# .MEM_1399 = VDEF <.MEM_1631>
switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);
# VUSE <.MEM_1631>
D.44530_866 = session_161(D)->channel;

.MEM_1633 : --> single use.
.MEM_1155 = PHI <.MEM_1719(432), .MEM_1633(373), .MEM_1864(433)>

.MEM_1634 : -->2 uses.
.MEM_1117 = PHI <.MEM_1635(18), .MEM_1634(17)>
# .MEM_1635 = VDEF <.MEM_1634>
D.49683_1558 = strtol (tmp_203, 0B, 10);

.MEM_1635 : -->2 uses.
.MEM_1117 = PHI <.MEM_1635(18), .MEM_1634(17)>
.MEM_1621 = PHI <.MEM_1180(10), .MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1635(18)>

.MEM_1637 : -->2 uses.
.MEM_794 = PHI <.MEM_1638(51), .MEM_1637(50)>
# .MEM_1638 = VDEF <.MEM_1637>
D.49695_1568 = strtol (val_245, 0B, 10);

.MEM_1638 : -->2 uses.
.MEM_794 = PHI <.MEM_1638(51), .MEM_1637(50)>
.MEM_1623 = PHI <.MEM_1198(43), .MEM_1198(44), .MEM_1198(45), .MEM_1198(46), .MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1638(51)>

.MEM_1640 : -->2 uses.
.MEM_1754 = PHI <.MEM_1641(88), .MEM_1640(87)>
# .MEM_1641 = VDEF <.MEM_1640>
D.49707_1578 = strtol (val_341, 0B, 10);

.MEM_1641 : -->2 uses.
.MEM_1754 = PHI <.MEM_1641(88), .MEM_1640(87)>
.MEM_1625 = PHI <.MEM_1212(80), .MEM_1212(81), .MEM_1212(82), .MEM_1212(83), .MEM_1212(84), .MEM_1212(85), .MEM_1212(86), .MEM_1641(88)>

.MEM_1643 : -->2 uses.
.MEM_1627 = PHI <.MEM_1220(96), .MEM_1220(97), .MEM_1220(98), .MEM_1220(99), .MEM_1220(100), .MEM_1220(101), .MEM_1220(102), .MEM_1644(104), .MEM_1643(103), .MEM_1644(105)>
# .MEM_1644 = VDEF <.MEM_1643>
D.49719_1588 = strtol (val_355, 0B, 10);

.MEM_1644 : -->2 uses.
.MEM_1627 = PHI <.MEM_1220(96), .MEM_1220(97), .MEM_1220(98), .MEM_1220(99), .MEM_1220(100), .MEM_1220(101), .MEM_1220(102), .MEM_1644(104), .MEM_1643(103), .MEM_1644(105)>
.MEM_1627 = PHI <.MEM_1220(96), .MEM_1220(97), .MEM_1220(98), .MEM_1220(99), .MEM_1220(100), .MEM_1220(101), .MEM_1220(102), .MEM_1644(104), .MEM_1643(103), .MEM_1644(105)>

.MEM_1646 : -->2 uses.
.MEM_1884 = PHI <.MEM_1647(196), .MEM_1295(187), .MEM_1646(195)>
# .MEM_1647 = VDEF <.MEM_1646>
D.49731_1598 = strtol (D.44825_537, 0B, 10);

.MEM_1647 : -->2 uses.
.MEM_1884 = PHI <.MEM_1647(196), .MEM_1295(187), .MEM_1646(195)>
.MEM_1629 = PHI <.MEM_1295(188), .MEM_1295(189), .MEM_1295(190), .MEM_1295(191), .MEM_1295(192), .MEM_1295(193), .MEM_1295(194), .MEM_1647(196)>

.MEM_1649 : -->2 uses.
.MEM_1867 = PHI <.MEM_1650(330), .MEM_1392(321), .MEM_1649(329)>
# .MEM_1650 = VDEF <.MEM_1649>
D.49743_1608 = strtol (D.45124_858, 0B, 10);

.MEM_1650 : -->2 uses.
.MEM_1867 = PHI <.MEM_1650(330), .MEM_1392(321), .MEM_1649(329)>
.MEM_1631 = PHI <.MEM_1392(322), .MEM_1392(323), .MEM_1392(324), .MEM_1392(325), .MEM_1392(326), .MEM_1392(327), .MEM_1392(328), .MEM_1650(330)>

.MEM_1652 : -->2 uses.
.MEM_1864 = PHI <.MEM_1653(372), .MEM_1415(363), .MEM_1652(371)>
# .MEM_1653 = VDEF <.MEM_1652>
D.49755_1618 = strtol (D.45227_968, 0B, 10);

.MEM_1653 : -->2 uses.
.MEM_1864 = PHI <.MEM_1653(372), .MEM_1415(363), .MEM_1652(371)>
.MEM_1633 = PHI <.MEM_1415(364), .MEM_1415(365), .MEM_1415(366), .MEM_1415(367), .MEM_1415(368), .MEM_1415(369), .MEM_1415(370), .MEM_1653(372)>

recvonly_1654 : --> single use.
D.44625_336 = recvonly_1654 != 1;

D.47871_1661 : --> single use.
if (D.47871_1661 != 0)

.MEM_1663 : --> single use.
# .MEM_1517 = VDEF <.MEM_1663>
pmap_1672->negotiated = 0;

pass_1664 : --> single use.
pass_1848 = PHI <0(142), pass_1664(144), pass_126(143)>

attr_1666 : -->4 uses.
D.44590_304 = attr_1666->a_name;
attr_334 = attr_1666->a_next;
D.44619_332 = attr_1666->a_value;
D.44619_328 = attr_1666->a_value;

cng_pt_1667 : -->7 uses.
cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>
cng_pt_24 = PHI <cng_pt_1667(213), cng_pt_573(218), cng_pt_1667(212), cng_pt_1667(219), cng_pt_1667(270), cng_pt_573(217)>
cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>
cng_pt_24 = PHI <cng_pt_1667(213), cng_pt_573(218), cng_pt_1667(212), cng_pt_1667(219), cng_pt_1667(270), cng_pt_573(217)>
if (cng_pt_1667 == 0)
cng_pt_24 = PHI <cng_pt_1667(213), cng_pt_573(218), cng_pt_1667(212), cng_pt_1667(219), cng_pt_1667(270), cng_pt_573(217)>
cng_pt_24 = PHI <cng_pt_1667(213), cng_pt_573(218), cng_pt_1667(212), cng_pt_1667(219), cng_pt_1667(270), cng_pt_573(217)>

.MEM_1669 : --> single use.
.MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>

D.47874_1670 : --> single use.
if (D.47874_1670 != 0)

dptime_1671 : -->9 uses.
dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>

pmap_1672 : -->3 uses.
pmap_1463 = pmap_1672->next;
pmap_1672->current = 0;
pmap_1672->negotiated = 0;

got_video_crypto_1674 : -->11 uses.
got_video_crypto_556 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
# DEBUG got_video_crypto => got_video_crypto_1674
got_video_crypto_959 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>

sendonly_1689 : -->8 uses.
sendonly_43 = PHI <sendonly_1689(61), 1(62), 1(64), sendonly_1689(68), 0(70), sendonly_1689(72), sendonly_1689(73), sendonly_1689(74), sendonly_1689(67), sendonly_1689(60)>
sendonly_43 = PHI <sendonly_1689(61), 1(62), 1(64), sendonly_1689(68), 0(70), sendonly_1689(72), sendonly_1689(73), sendonly_1689(74), sendonly_1689(67), sendonly_1689(60)>
sendonly_43 = PHI <sendonly_1689(61), 1(62), 1(64), sendonly_1689(68), 0(70), sendonly_1689(72), sendonly_1689(73), sendonly_1689(74), sendonly_1689(67), sendonly_1689(60)>
if (sendonly_1689 != 2)
sendonly_43 = PHI <sendonly_1689(61), 1(62), 1(64), sendonly_1689(68), 0(70), sendonly_1689(72), sendonly_1689(73), sendonly_1689(74), sendonly_1689(67), sendonly_1689(60)>
sendonly_43 = PHI <sendonly_1689(61), 1(62), 1(64), sendonly_1689(68), 0(70), sendonly_1689(72), sendonly_1689(73), sendonly_1689(74), sendonly_1689(67), sendonly_1689(60)>
sendonly_43 = PHI <sendonly_1689(61), 1(62), 1(64), sendonly_1689(68), 0(70), sendonly_1689(72), sendonly_1689(73), sendonly_1689(74), sendonly_1689(67), sendonly_1689(60)>
sendonly_43 = PHI <sendonly_1689(61), 1(62), 1(64), sendonly_1689(68), 0(70), sendonly_1689(72), sendonly_1689(73), sendonly_1689(74), sendonly_1689(67), sendonly_1689(60)>

got_audio_1693 : -->8 uses.
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
D.44778_496 = got_audio_1693 == 0;

.MEM_1696 : --> single use.
.MEM_1849 = PHI <.MEM_1148(304), .MEM_1696(428)>

got_savp_1711 : -->2 uses.
got_savp_1739 = PHI <got_savp_74(131), got_savp_1711(132), got_savp_1711(133)>
got_savp_1739 = PHI <got_savp_74(131), got_savp_1711(132), got_savp_1711(133)>

match_1712 : --> single use.
match_13 = PHI <0(304), match_1712(311), 0(310)>

m_idx_1715 : -->4 uses.
if (j_807 < m_idx_1715)
if (m_idx_1715 > 0)
m_idx_1905 = PHI <m_idx_1904(304), m_idx_1715(428)>
greedy_sort (smh_186, &matches, m_idx_1715, codec_array_84, total_codecs_85);

cng_pt_1717 : -->21 uses.
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
cng_pt_1667 = PHI <cng_pt_24(271), cng_pt_1717(207)>
# DEBUG cng_pt => cng_pt_1717
cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>

.MEM_1719 : -->28 uses.
# VUSE <.MEM_1719>
D.45151_895 = strcasecmp (D.44590_894, "framerate");
# VUSE <.MEM_1719>
D.44590_894 = attr_619->a_name;
# VUSE <.MEM_1719>
D.45154_898 = strcasecmp (D.44590_894, "rtcp-fb");
# .MEM_1415 = VDEF <.MEM_1719>
D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);
# VUSE <.MEM_1719>
D.44530_967 = session_161(D)->channel;
.MEM_1155 = PHI <.MEM_1719(432), .MEM_1633(373), .MEM_1864(433)>
# VUSE <.MEM_1719>
D.44821_965 = D.44471_964->ndlb;
# VUSE <.MEM_1719>
D.44471_964 = smh_186->mparams;
.MEM_1156 = PHI <.MEM_1719(347), .MEM_1411(352), .MEM_1414(358), .MEM_1719(359), .MEM_1719(360), .MEM_1719(362), .MEM_1418(375), .MEM_1719(350), .MEM_1413(357), .MEM_1719(349), .MEM_1719(361)>
# VUSE <.MEM_1719>
D.47950_1500 = *D.44619_962;
.MEM_1156 = PHI <.MEM_1719(347), .MEM_1411(352), .MEM_1414(358), .MEM_1719(359), .MEM_1719(360), .MEM_1719(362), .MEM_1418(375), .MEM_1719(350), .MEM_1413(357), .MEM_1719(349), .MEM_1719(361)>
# VUSE <.MEM_1719>
D.44619_962 = attr_619->a_value;
.MEM_1156 = PHI <.MEM_1719(347), .MEM_1411(352), .MEM_1414(358), .MEM_1719(359), .MEM_1719(360), .MEM_1719(362), .MEM_1418(375), .MEM_1719(350), .MEM_1413(357), .MEM_1719(349), .MEM_1719(361)>
# VUSE <.MEM_1719>
D.45219_961 = strcasecmp (D.44590_894, "crypto");
.MEM_1156 = PHI <.MEM_1719(347), .MEM_1411(352), .MEM_1414(358), .MEM_1719(359), .MEM_1719(360), .MEM_1719(362), .MEM_1418(375), .MEM_1719(350), .MEM_1413(357), .MEM_1719(349), .MEM_1719(361)>
# .MEM_1412 = VDEF <.MEM_1719>
switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_908, 1);
# VUSE <.MEM_1719>
D.44530_952 = session_161(D)->channel;
# VUSE <.MEM_1719>
D.45185_921 = MEM[(const unsigned char *)D.44619_908 + 1B];
# VUSE <.MEM_1719>
D.45174_911 = MEM[(const unsigned char *)D.44619_908];
# VUSE <.MEM_1719>
D.44619_908 = attr_619->a_value;
# VUSE <.MEM_1719>
D.45168_907 = strcasecmp (D.44590_894, "rtcp");
# .MEM_1409 = VDEF <.MEM_1719>
D.45160_902 = switch_stristr ("fir", D.44619_899);
.MEM_1156 = PHI <.MEM_1719(347), .MEM_1411(352), .MEM_1414(358), .MEM_1719(359), .MEM_1719(360), .MEM_1719(362), .MEM_1418(375), .MEM_1719(350), .MEM_1413(357), .MEM_1719(349), .MEM_1719(361)>
# VUSE <.MEM_1719>
D.47943_1497 = *D.44619_899;
.MEM_1156 = PHI <.MEM_1719(347), .MEM_1411(352), .MEM_1414(358), .MEM_1719(359), .MEM_1719(360), .MEM_1719(362), .MEM_1418(375), .MEM_1719(350), .MEM_1413(357), .MEM_1719(349), .MEM_1719(361)>
# VUSE <.MEM_1719>
D.44619_899 = attr_619->a_value;
.MEM_1156 = PHI <.MEM_1719(347), .MEM_1411(352), .MEM_1414(358), .MEM_1719(359), .MEM_1719(360), .MEM_1719(362), .MEM_1418(375), .MEM_1719(350), .MEM_1413(357), .MEM_1719(349), .MEM_1719(361)>
# VUSE <.MEM_1719>
D.44619_896 = attr_619->a_value;

codec_ms_1720 : -->5 uses.
codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>
codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>
codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>
codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>
codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>

map_1728 : -->18 uses.
rm_encoding_561 = map_1728->rm_encoding;
map_711 = map_1728->rm_next;
D.44893_598 = map_1728->rm_fmtp;
remote_codec_rate_596 = map_1728->rm_rate;
D.44889_600 = map_1728->rm_encoding;
D.44856_649 = map_1728->rm_pt;
D.44856_590 = map_1728->rm_pt;
matches[m_idx_1487].map = map_1728;
near_matches[nm_idx_1139].map = map_1728;
D.44889_642 = map_1728->rm_encoding;
D.44856_634 = map_1728->rm_pt;
D.44854_610 = map_1728->rm_rate;
D.44889_608 = map_1728->rm_encoding;
D.44889_593 = map_1728->rm_encoding;
D.44856_586 = map_1728->rm_pt;
D.44856_572 = map_1728->rm_pt;
D.44856_567 = map_1728->rm_pt;
D.44854_564 = map_1728->rm_rate;

got_video_crypto_1738 : -->3 uses.
got_video_crypto_57 = PHI <got_video_crypto_1738(341), got_video_crypto_1738(343), 1(430), got_video_crypto_1738(342)>
got_video_crypto_57 = PHI <got_video_crypto_1738(341), got_video_crypto_1738(343), 1(430), got_video_crypto_1738(342)>
got_video_crypto_57 = PHI <got_video_crypto_1738(341), got_video_crypto_1738(343), 1(430), got_video_crypto_1738(342)>

got_savp_1739 : -->2 uses.
got_savp_512 = PHI <got_savp_1739(412), 0(117)>
D.44835_550 = got_savp_1739 != 0;
# DEBUG got_savp => got_savp_1739

got_avp_1740 : -->2 uses.
got_avp_1859 = PHI <got_avp_68(131), got_avp_1740(132), got_avp_1740(133)>
got_avp_1859 = PHI <got_avp_68(131), got_avp_1740(132), got_avp_1740(133)>

got_udptl_1743 : --> single use.
got_udptl_1868 = PHI <got_udptl_1743(412), 0(117)>
# DEBUG got_udptl => got_udptl_1743

nm_idx_1744 : -->2 uses.
nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>
nm_idx_841 = PHI <nm_idx_1744(304), nm_idx_119(428)>

m_idx_1745 : -->6 uses.
m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>

pmap_1747 : -->3 uses.
pmap_1459 = pmap_1747->next;
pmap_1747->current = 0;
pmap_1747->negotiated = 0;

nm_idx_1749 : -->5 uses.
nm_idx_1755 = PHI <nm_idx_117(271), nm_idx_1749(207)>
# DEBUG nm_idx => nm_idx_1749
nm_idx_119 = PHI <nm_idx_1139(268), nm_idx_117(271), nm_idx_901(270), nm_idx_1749(207)>
nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>

.MEM_1750 : -->3 uses.
# VUSE <.MEM_1750>
D.44666_373 = m_1764->m_proto;
# .MEM_1233 = VDEF <.MEM_1750>
switch_core_session_set_ice (session_161(D));
.MEM_1112 = PHI <.MEM_1750(118), .MEM_1233(119)>

.MEM_1754 : --> single use.
.MEM_1105 = PHI <.MEM_1212(79), .MEM_1754(418)>

nm_idx_1755 : -->7 uses.
nm_idx_1139 = PHI <nm_idx_115(269), nm_idx_1755(241)>
# DEBUG nm_idx => nm_idx_1755
nm_idx_901 = PHI <nm_idx_115(269), nm_idx_1755(241)>
nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>

m_1764 : -->28 uses.
attr_62 = m_1764->m_attributes;
attr_77 = m_1764->m_attributes;
D.44666_373 = m_1764->m_proto;
D.44669_375 = m_1764->m_proto_name;
D.44675_379 = m_1764->m_proto;
m_1093 = m_1764->m_next;
attr_893 = m_1764->m_attributes;
D.44666_970 = m_1764->m_proto;
attr_507 = m_1764->m_attributes;
connection_555 = m_1764->m_connections;
D.44697_797 = m_1764->m_port;
D.44666_539 = m_1764->m_proto;
D.44681_493 = m_1764->m_type;
D.44681_392 = m_1764->m_type;
check_ice (smh_186, 1, sdp_198, m_1764);
D.44697_1061 = m_1764->m_port;
attr_886 = m_1764->m_attributes;
map_883 = m_1764->m_rtpmaps;
connection_880 = m_1764->m_connections;
D.44697_873 = m_1764->m_port;
check_ice (smh_186, 0, sdp_198, m_1764);
map_559 = m_1764->m_rtpmaps;
attr_500 = m_1764->m_attributes;
D.44697_494 = m_1764->m_port;
m_1045 = PHI <m_1764(133)>
D.44697_393 = m_1764->m_port;
D.44681_387 = m_1764->m_type;
D.44681_383 = m_1764->m_type;

match_1800 : -->9 uses.
match_1901 = PHI <match_7(271), match_1800(207)>
# DEBUG match => match_1800
match_9 = PHI <1(268), match_7(271), 0(270), match_1800(207)>
match_14 = PHI <match_1800(404), 1(403)>
if (match_1800 == 0)
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>

.MEM_1836 : -->5 uses.
# VUSE <.MEM_1836>
pmap_1461 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
.MEM_1663 = PHI <.MEM_1518(27), .MEM_1836(25)>
.MEM_1878 = PHI <.MEM_1518(27), .MEM_1518(26), .MEM_1836(24), .MEM_1836(25)>
.MEM_1878 = PHI <.MEM_1518(27), .MEM_1518(26), .MEM_1836(24), .MEM_1836(25)>
# VUSE <.MEM_1836>
D.47874_1670 = pmap_1461->allocated;

.MEM_1837 : --> single use.
# .MEM_1515 = VDEF <.MEM_1837>
pmap_1747->negotiated = 0;

.MEM_1838 : -->22 uses.
# VUSE <.MEM_1838>
D.44590_304 = attr_1666->a_name;
# VUSE <.MEM_1838>
D.44616_327 = strcasecmp (D.44590_304, "ptime");
# .MEM_1201 = VDEF <.MEM_1838>
switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
# VUSE <.MEM_1838>
D.44530_309 = session_161(D)->channel;
# .MEM_1522 = VDEF <.MEM_1838>
dmaxptime_1468 = strtol (D.44619_332, 0B, 10);
# VUSE <.MEM_1838>
D.44619_332 = attr_1666->a_value;
.MEM_1102 = PHI <.MEM_1838(61), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1838(70), .MEM_1520(72), .MEM_1838(73), .MEM_1522(74), .MEM_1207(67), .MEM_1838(60)>
# VUSE <.MEM_1838>
D.44621_331 = strcasecmp (D.44590_304, "maxptime");
# .MEM_1520 = VDEF <.MEM_1838>
dptime_1467 = strtol (D.44619_328, 0B, 10);
# VUSE <.MEM_1838>
D.44619_328 = attr_1666->a_value;
.MEM_1102 = PHI <.MEM_1838(61), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1838(70), .MEM_1520(72), .MEM_1838(73), .MEM_1522(74), .MEM_1207(67), .MEM_1838(60)>
# VUSE <.MEM_1838>
D.44614_324 = strcasecmp (D.44590_304, "sendrecv");
# .MEM_1203 = VDEF <.MEM_1838>
switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
# VUSE <.MEM_1838>
D.44530_316 = session_161(D)->channel;
# VUSE <.MEM_1838>
D.44602_315 = strcasecmp (D.44590_304, "recvonly");
# .MEM_1202 = VDEF <.MEM_1838>
switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
# VUSE <.MEM_1838>
D.44530_313 = session_161(D)->channel;
# VUSE <.MEM_1838>
D.44598_311 = strcasecmp (D.44590_304, "inactive");
# VUSE <.MEM_1838>
D.44594_307 = strcasecmp (D.44590_304, "sendonly");
.MEM_1102 = PHI <.MEM_1838(61), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1838(70), .MEM_1520(72), .MEM_1838(73), .MEM_1522(74), .MEM_1207(67), .MEM_1838(60)>
# VUSE <.MEM_1838>
D.47877_1465 = *D.44590_304;
.MEM_1102 = PHI <.MEM_1838(61), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1838(70), .MEM_1520(72), .MEM_1838(73), .MEM_1522(74), .MEM_1207(67), .MEM_1838(60)>

.MEM_1839 : -->3 uses.
# .MEM_1210 = VDEF <.MEM_1839>
switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);
# VUSE <.MEM_1839>
D.44530_338 = session_161(D)->channel;
.MEM_1104 = PHI <.MEM_1839(76), .MEM_1210(77)>

.MEM_1843 : -->8 uses.
# .MEM_1428 = VDEF <.MEM_1843>
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
# VUSE <.MEM_1843>
D.45281_1041 = D.45279_1038->microseconds_per_packet;
# VUSE <.MEM_1843>
D.45280_1039 = D.45279_1038->samples_per_second;
# VUSE <.MEM_1843>
D.45279_1038 = matches[j_1844].imp;
# VUSE <.MEM_1843>
D.45277_1036 = D.45274_1031->rm_pt;
# VUSE <.MEM_1843>
D.45276_1034 = D.45274_1031->rm_fmtp;
# VUSE <.MEM_1843>
D.45275_1032 = D.45274_1031->rm_encoding;
# VUSE <.MEM_1843>
D.45274_1031 = matches[j_1844].map;

j_1844 : -->6 uses.
D.45279_1038 = matches[j_1844].imp;
D.45274_1031 = matches[j_1844].map;
map_1050 = matches[j_1844].map;
mimp_1049 = matches[j_1844].imp;
j_1067 = j_1844 + 1;
if (j_1844 == 0)

j_1845 : -->6 uses.
near_map_727 = near_matches[j_1845].map;
near_match_726 = near_matches[j_1845].imp;
near_rate.96_724 = near_matches[j_1845].rate;
j_736 = j_1845 + 1;
j_897 = PHI <j_1845(279), j_1845(280)>
j_897 = PHI <j_1845(279), j_1845(280)>

.MEM_1846 : -->6 uses.
# VUSE <.MEM_1846>
D.45013_728 = near_match_726->iananame;
# VUSE <.MEM_1846>
near_map_727 = near_matches[j_1845].map;
# VUSE <.MEM_1846>
near_match_726 = near_matches[j_1845].imp;
# VUSE <.MEM_1846>
near_rate.96_724 = near_matches[j_1845].rate;
# .MEM_1323 = VDEF <.MEM_1846>
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);
# VUSE <.MEM_1846>
near_rate_729 = near_match_726->samples_per_second;

pass_1848 : --> single use.
if (pass_1848 != 0)
# DEBUG pass => pass_1848

.MEM_1849 : -->3 uses.
# VUSE <.MEM_1849>
D.44762_809 = D.44750_808->remote_sdp_port;
# VUSE <.MEM_1849>
D.44750_808 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1365 = VDEF <.MEM_1849>
switch_snprintf (&tmp, 50, "%d", D.44767_810);

attr_1850 : -->3 uses.
D.44590_887 = attr_1850->a_name;
attr_892 = attr_1850->a_next;
D.44619_889 = attr_1850->a_value;

.MEM_1851 : --> single use.
# .MEM_1392 = VDEF <.MEM_1851>
D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);

.MEM_1852 : --> single use.
# .MEM_1376 = VDEF <.MEM_1852>
D.45114_834 = switch_channel_direction (channel_162);

.MEM_1854 : -->3 uses.
# .MEM_1245 = VDEF <.MEM_1854>
D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
# VUSE <.MEM_1854>
D.44482_413 = D.44481_412->channel;
# VUSE <.MEM_1854>
D.44481_412 = smh_186->session;

.MEM_1856 : -->2 uses.
# .MEM_1331 = VDEF <.MEM_1856>
greedy_sort (smh_186, &matches, m_idx_1715, codec_array_84, total_codecs_85);
.MEM_1141 = PHI <.MEM_1856(284), .MEM_1331(285)>

.MEM_1857 : --> single use.
# .MEM_1219 = VDEF <.MEM_1857>
reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);

.MEM_1858 : -->3 uses.
# VUSE <.MEM_1858>
total_codecs_359 = smh_186->num_negotiated_codecs;
.MEM_1109 = PHI <.MEM_1858(111), .MEM_1858(110), .MEM_1224(112)>
.MEM_1109 = PHI <.MEM_1858(111), .MEM_1858(110), .MEM_1224(112)>

got_avp_1859 : -->2 uses.
got_avp_671 = PHI <got_avp_1859(412), 0(117)>
# DEBUG got_avp => got_avp_1859
D.44839_552 = got_avp_1859 | got_webrtc_78;

best_te_1860 : -->12 uses.
best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
switch_rtp_set_telephony_recv_event (D.44605_855, best_te_1860);
switch_rtp_set_telephony_event (D.44605_851, best_te_1860);
best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
D.45120_848 = (int) best_te_1860;
# DEBUG te => best_te_1860
D.44471_845->recv_te = best_te_1860;
D.44471_845->te = best_te_1860;
best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
switch_rtp_set_telephony_event (D.44605_840, best_te_1860);
best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
D.44857_837 = (int) best_te_1860;
D.44471_835->te = best_te_1860;

.MEM_1864 : -->3 uses.
# VUSE <.MEM_1864>
D.44666_970 = m_1764->m_proto;
# .MEM_1417 = VDEF <.MEM_1864>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
.MEM_1155 = PHI <.MEM_1719(432), .MEM_1633(373), .MEM_1864(433)>

dmaxptime_1865 : -->9 uses.
dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>

got_crypto_1866 : -->11 uses.
got_crypto_969 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_1866(167)>
# DEBUG got_crypto => got_crypto_1866
# DEBUG got_crypto => got_crypto_1866
got_crypto_1118 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_95(435)>
got_crypto_969 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_1866(167)>
got_crypto_361 = PHI <got_crypto_50(171), got_crypto_1866(167)>
# DEBUG got_crypto => got_crypto_1866
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>

.MEM_1867 : --> single use.
# .MEM_1394 = VDEF <.MEM_1867>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");

got_udptl_1868 : -->4 uses.
got_udptl_1743 = PHI <got_udptl_1868(131), got_udptl_774(132), got_udptl_774(133)>
got_udptl_774 = PHI <got_udptl_1868(131), got_udptl_391(130)>
if (got_udptl_1868 != 0)
# DEBUG got_udptl => got_udptl_1868
got_udptl_391 = got_udptl_1868 + 1;

m_idx_1869 : -->5 uses.
m_idx_792 = PHI <m_idx_103(271), m_idx_1869(207)>
# DEBUG m_idx => m_idx_1869
m_idx_105 = PHI <m_idx_703(268), m_idx_103(271), m_idx_102(270), m_idx_1869(207)>
m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>

.MEM_1872 : --> single use.
# .MEM_1407 = VDEF <.MEM_1872>
D.45137_884 = switch_rtp_has_dtls ();

.MEM_1873 : -->5 uses.
# VUSE <.MEM_1873>
D.45001_1022 = smh_186->crypto_mode;
# .MEM_1426 = VDEF <.MEM_1873>
greedy_sort (smh_186, &matches, m_idx_906, codec_array_84, total_codecs_85);
.MEM_1164 = PHI <.MEM_1873(396), .MEM_1426(397)>
.MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>
# .MEM_1425 = VDEF <.MEM_1873>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");

.MEM_1878 : -->2 uses.
# .MEM_1187 = VDEF <.MEM_1878>
*proceed_209(D) = 1;
.MEM_1097 = PHI <.MEM_1878(28), .MEM_1187(29)>

.MEM_1880 : -->8 uses.
# .MEM_1334 = VDEF <.MEM_1880>
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
# VUSE <.MEM_1880>
D.45041_757 = D.45039_754->microseconds_per_packet;
# VUSE <.MEM_1880>
D.45040_755 = D.45039_754->samples_per_second;
# VUSE <.MEM_1880>
D.45039_754 = matches[j_1881].imp;
# VUSE <.MEM_1880>
D.45037_752 = D.45034_747->rm_pt;
# VUSE <.MEM_1880>
D.45036_750 = D.45034_747->rm_fmtp;
# VUSE <.MEM_1880>
D.45035_748 = D.45034_747->rm_encoding;
# VUSE <.MEM_1880>
D.45034_747 = matches[j_1881].map;

j_1881 : -->6 uses.
mmap_762 = matches[j_1881].map;
mimp_761 = matches[j_1881].imp;
D.45039_754 = matches[j_1881].imp;
D.45034_747 = matches[j_1881].map;
j_807 = j_1881 + 1;
if (j_1881 == 0)

.MEM_1882 : -->3 uses.
# VUSE <.MEM_1882>
rm_encoding_979 = map_1620->rm_encoding;
.MEM_870 = PHI <.MEM_1160(391), .MEM_1882(379)>
.MEM_1090 = PHI <.MEM_1160(391), .MEM_1882(379)>

codec_ms_1883 : --> single use.
codec_ms_87 = PHI <codec_ms_1883(424), codec_ms_589(224), ptime_1033(223)>
# DEBUG codec_ms => codec_ms_1883

.MEM_1884 : -->3 uses.
# VUSE <.MEM_1884>
D.44666_539 = m_1764->m_proto;
# .MEM_1297 = VDEF <.MEM_1884>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
.MEM_1123 = PHI <.MEM_1108(422), .MEM_1629(197), .MEM_1884(423)>

got_video_crypto_1885 : -->8 uses.
got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
if (got_video_crypto_1885 == 0)
got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>

recvonly_1894 : -->8 uses.
recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>
recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>
recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>
recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>
recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>
recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>
recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>
recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>

best_te_1898 : -->8 uses.
best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>
best_te_19 = PHI <best_te_568(213), best_te_1898(218), best_te_1898(212), best_te_1898(219), best_te_1898(270), best_te_1898(217)>
best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>
best_te_19 = PHI <best_te_568(213), best_te_1898(218), best_te_1898(212), best_te_1898(219), best_te_1898(270), best_te_1898(217)>
best_te_19 = PHI <best_te_568(213), best_te_1898(218), best_te_1898(212), best_te_1898(219), best_te_1898(270), best_te_1898(217)>
best_te_19 = PHI <best_te_568(213), best_te_1898(218), best_te_1898(212), best_te_1898(219), best_te_1898(270), best_te_1898(217)>
best_te_19 = PHI <best_te_568(213), best_te_1898(218), best_te_1898(212), best_te_1898(219), best_te_1898(270), best_te_1898(217)>
if (best_te_1898 == 0)

match_1901 : -->6 uses.
match_7 = PHI <match_1901(213), match_1901(218), match_1901(212), match_1901(219), 0(270), match_1901(217)>
if (match_1901 != 0)
match_7 = PHI <match_1901(213), match_1901(218), match_1901(212), match_1901(219), 0(270), match_1901(217)>
match_7 = PHI <match_1901(213), match_1901(218), match_1901(212), match_1901(219), 0(270), match_1901(217)>
match_7 = PHI <match_1901(213), match_1901(218), match_1901(212), match_1901(219), 0(270), match_1901(217)>
match_7 = PHI <match_1901(213), match_1901(218), match_1901(212), match_1901(219), 0(270), match_1901(217)>

m_idx_1904 : -->2 uses.
m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>
m_idx_1905 = PHI <m_idx_1904(304), m_idx_1715(428)>

m_idx_1905 : -->2 uses.
m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>
m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>

Adding Destination of edge (0 -> 2) to worklist


Simulating block 2

Visiting statement:
if (session_161(D) == 0B)

No interesting values produced.
Adding Destination of edge (2 -> 3) to worklist

Adding Destination of edge (2 -> 4) to worklist


Simulating block 3

Visiting statement:
__assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

No interesting values produced.

Simulating block 4

Visiting statement:
if (smh_186 == 0B)

No interesting values produced.
Adding Destination of edge (4 -> 414) to worklist

Adding Destination of edge (4 -> 5) to worklist


Simulating block 5

Visiting statement:
if (parser_196 == 0B)

No interesting values produced.
Adding Destination of edge (5 -> 6) to worklist


Simulating block 6

Visiting statement:
if (sdp_198 == 0B)

No interesting values produced.
Adding Destination of edge (6 -> 7) to worklist

Adding Destination of edge (6 -> 8) to worklist


Simulating block 7

Simulating block 414

Visiting PHI node: match_142 = PHI <0(4), 0(5), 0(7), match_17(413)>
PHI node match_142 copy-of chain: match_142 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
return match_142;

No interesting values produced.

Simulating block 8

Visiting statement:
if (D.44478_200 != 0)

No interesting values produced.
Adding Destination of edge (8 -> 9) to worklist

Adding Destination of edge (8 -> 20) to worklist


Simulating block 9

Visiting statement:
if (tmp_203 != 0B)

No interesting values produced.
Adding Destination of edge (9 -> 10) to worklist


Simulating block 10

Visiting statement:
if (D.49675_1550 == 0)

No interesting values produced.
Adding Destination of edge (10 -> 19) to worklist

Adding Destination of edge (10 -> 11) to worklist


Simulating block 11

Visiting statement:
if (D.49676_1551 == 0)

No interesting values produced.
Adding Destination of edge (11 -> 12) to worklist


Simulating block 12

Visiting statement:
if (D.49677_1552 == 0)

No interesting values produced.
Adding Destination of edge (12 -> 13) to worklist


Simulating block 13

Visiting statement:
if (D.49678_1553 == 0)

No interesting values produced.
Adding Destination of edge (13 -> 14) to worklist


Simulating block 14

Visiting statement:
if (D.49679_1554 == 0)

No interesting values produced.
Adding Destination of edge (14 -> 15) to worklist


Simulating block 15

Visiting statement:
if (D.49680_1555 == 0)

No interesting values produced.
Adding Destination of edge (15 -> 16) to worklist


Simulating block 16

Visiting statement:
if (D.49681_1556 == 0)

No interesting values produced.
Adding Destination of edge (16 -> 17) to worklist


Simulating block 17

Visiting statement:
if (D.49682_1557 != 0)

No interesting values produced.
Adding Destination of edge (17 -> 18) to worklist

Adding Destination of edge (17 -> 415) to worklist


Simulating block 18

Visiting statement:
if (D.49683_1558 == 0)

No interesting values produced.

Simulating block 20

Visiting statement:
if (pmap_1457 != 0B)

No interesting values produced.
Adding Destination of edge (20 -> 21) to worklist

Adding Destination of edge (20 -> 24) to worklist


Simulating block 21

Visiting statement:
if (D.47871_1661 != 0)

No interesting values produced.
Adding Destination of edge (21 -> 22) to worklist


Simulating block 22

Visiting PHI node: pmap_1747 = PHI <pmap_1459(23), pmap_1457(21)>
	Argument #1: pmap_1457 copy-of chain: pmap_1457 [NOT A COPY]
PHI node pmap_1747 copy-of chain: pmap_1747 -> pmap_1457 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (pmap_1459 != 0B)

No interesting values produced.
Adding Destination of edge (22 -> 23) to worklist


Simulating block 23

Visiting statement:
if (D.47871_1460 != 0)

No interesting values produced.
Adding Destination of edge (23 -> 22) to worklist


Simulating block 22

Visiting PHI node: pmap_1747 = PHI <pmap_1459(23), pmap_1457(21)>
	Argument #0: pmap_1459 copy-of chain: pmap_1459 [NOT A COPY]
	Argument #1: pmap_1457 copy-of chain: pmap_1457 [NOT A COPY]
PHI node pmap_1747 copy-of chain: pmap_1747 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 19
Adding Destination of edge (19 -> 20) to worklist


Simulating block 415

Simulating block 24

Visiting statement:
if (pmap_1461 != 0B)

No interesting values produced.
Adding Destination of edge (24 -> 25) to worklist

Adding Destination of edge (24 -> 28) to worklist


Simulating block 25

Visiting statement:
if (D.47874_1670 != 0)

No interesting values produced.
Adding Destination of edge (25 -> 26) to worklist


Simulating block 26

Visiting PHI node: pmap_1672 = PHI <pmap_1463(27), pmap_1461(25)>
	Argument #1: pmap_1461 copy-of chain: pmap_1461 [NOT A COPY]
PHI node pmap_1672 copy-of chain: pmap_1672 -> pmap_1461 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (pmap_1463 != 0B)

No interesting values produced.
Adding Destination of edge (26 -> 27) to worklist


Simulating block 27

Visiting statement:
if (D.47874_1464 != 0)

No interesting values produced.
Adding Destination of edge (27 -> 26) to worklist


Simulating block 26

Visiting PHI node: pmap_1672 = PHI <pmap_1463(27), pmap_1461(25)>
	Argument #0: pmap_1463 copy-of chain: pmap_1463 [NOT A COPY]
	Argument #1: pmap_1461 copy-of chain: pmap_1461 [NOT A COPY]
PHI node pmap_1672 copy-of chain: pmap_1672 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 20

Simulating block 28

Visiting statement:
if (proceed_209(D) != 0B)

No interesting values produced.
Adding Destination of edge (28 -> 29) to worklist

Adding Destination of edge (28 -> 30) to worklist


Simulating block 29

Simulating block 30

Visiting statement:
if (val_214 != 0B)

No interesting values produced.
Adding Destination of edge (30 -> 31) to worklist

Adding Destination of edge (30 -> 35) to worklist


Simulating block 31

Visiting statement:
if (D.44494_215 == 0)

No interesting values produced.
Adding Destination of edge (31 -> 32) to worklist


Simulating block 32

Visiting statement:
if (D.44498_218 == 0)

No interesting values produced.
Adding Destination of edge (32 -> 33) to worklist


Simulating block 33

Visiting statement:
if (D.44502_221 == 0)

No interesting values produced.
Adding Destination of edge (33 -> 34) to worklist


Simulating block 34

Simulating block 35

Visiting PHI node: greedy_47 = PHI <greedy_211(30), 0(31), 1(32), 1(33), greedy_211(34)>
	Argument #0: greedy_211 copy-of chain: greedy_211 [NOT A COPY]
PHI node greedy_47 copy-of chain: greedy_47 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: scrooge_80 = PHI <scrooge_213(30), 0(31), 0(32), 1(33), scrooge_213(34)>
	Argument #0: scrooge_213 copy-of chain: scrooge_213 [NOT A COPY]
PHI node scrooge_80 copy-of chain: scrooge_80 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44508_226 != 0B)

No interesting values produced.
Adding Destination of edge (35 -> 36) to worklist

Adding Destination of edge (35 -> 42) to worklist


Simulating statement (from ssa_edges): if (scrooge_80 != 0)

Simulating statement (from ssa_edges): if (greedy_47 != 0)

Simulating statement (from ssa_edges): if (greedy_47 != 0)

Simulating block 36

Visiting statement:
if (D.44514_231 != 0)

No interesting values produced.
Adding Destination of edge (36 -> 37) to worklist

Adding Destination of edge (36 -> 39) to worklist


Simulating block 37

Visiting statement:
if (D.44518_234 != 0B)

No interesting values produced.
Adding Destination of edge (37 -> 38) to worklist


Simulating block 38

Simulating block 42

Visiting statement:
if (val_245 != 0B)

No interesting values produced.
Adding Destination of edge (42 -> 43) to worklist

Adding Destination of edge (42 -> 53) to worklist


Simulating block 43

Visiting statement:
if (D.49687_1560 == 0)

No interesting values produced.
Adding Destination of edge (43 -> 52) to worklist

Adding Destination of edge (43 -> 44) to worklist


Simulating block 44

Visiting statement:
if (D.49688_1561 == 0)

No interesting values produced.
Adding Destination of edge (44 -> 45) to worklist


Simulating block 45

Visiting statement:
if (D.49689_1562 == 0)

No interesting values produced.
Adding Destination of edge (45 -> 46) to worklist


Simulating block 46

Visiting statement:
if (D.49690_1563 == 0)

No interesting values produced.
Adding Destination of edge (46 -> 47) to worklist


Simulating block 47

Visiting statement:
if (D.49691_1564 == 0)

No interesting values produced.
Adding Destination of edge (47 -> 48) to worklist


Simulating block 48

Visiting statement:
if (D.49692_1565 == 0)

No interesting values produced.
Adding Destination of edge (48 -> 49) to worklist


Simulating block 49

Visiting statement:
if (D.49693_1566 == 0)

No interesting values produced.
Adding Destination of edge (49 -> 50) to worklist


Simulating block 50

Visiting statement:
if (D.49694_1567 != 0)

No interesting values produced.
Adding Destination of edge (50 -> 51) to worklist

Adding Destination of edge (50 -> 416) to worklist


Simulating block 51

Visiting statement:
if (D.49695_1568 != 0)

No interesting values produced.

Simulating block 39

Visiting statement:
if (D.44523_239 != 0)

No interesting values produced.
Adding Destination of edge (39 -> 40) to worklist

Adding Destination of edge (39 -> 42) to worklist


Simulating block 40

Visiting statement:
if (D.44526_241 != 0B)

No interesting values produced.
Adding Destination of edge (40 -> 41) to worklist


Simulating block 41

Simulating block 53

Visiting statement:
if (m_248 != 0B)

No interesting values produced.
Adding Destination of edge (53 -> 54) to worklist

Adding Destination of edge (53 -> 59) to worklist


Simulating block 54

Visiting statement:
if (D.44544_253 != 0)

No interesting values produced.
Adding Destination of edge (54 -> 58) to worklist

Adding Destination of edge (54 -> 55) to worklist


Simulating block 55

Visiting statement:
if (D.44546_254 != 0B)

No interesting values produced.
Adding Destination of edge (55 -> 56) to worklist


Simulating block 56

Visiting statement:
if (D.44548_256 != 0B)

No interesting values produced.
Adding Destination of edge (56 -> 57) to worklist


Simulating block 57

Visiting statement:
if (__result_300 == 0)

No interesting values produced.

Simulating block 58

Simulating block 52
Adding Destination of edge (52 -> 53) to worklist


Simulating block 416

Simulating block 42

Simulating block 59

Visiting PHI node: sendonly_42 = PHI <0(53), 0(55), 0(56), 0(57), 2(58)>
PHI node sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (attr_303 != 0B)

No interesting values produced.
Adding Destination of edge (59 -> 60) to worklist

Adding Destination of edge (59 -> 76) to worklist


Simulating statement (from ssa_edges): sendonly_1006 = PHI <sendonly_43(75), sendonly_42(59)>

Visiting PHI node: sendonly_1006 = PHI <sendonly_43(75), sendonly_42(59)>
	Argument #1: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_1006 copy-of chain: sendonly_1006 -> sendonly_42 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): sendonly_1689 = PHI <sendonly_43(75), sendonly_42(59)>

Visiting PHI node: sendonly_1689 = PHI <sendonly_43(75), sendonly_42(59)>
	Argument #1: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_1689 copy-of chain: sendonly_1689 -> sendonly_42 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (sendonly_1689 != 2)

Simulating statement (from ssa_edges): sendonly_43 = PHI <sendonly_1689(61), 1(62), 1(64), sendonly_1689(68), 0(70), sendonly_1689(72), sendonly_1689(73), sendonly_1689(74), sendonly_1689(67), sendonly_1689(60)>

Visiting PHI node: sendonly_43 = PHI <sendonly_1689(61), 1(62), 1(64), sendonly_1689(68), 0(70), sendonly_1689(72), sendonly_1689(73), sendonly_1689(74), sendonly_1689(67), sendonly_1689(60)>
PHI node sendonly_43 copy-of chain: sendonly_43 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 60

Visiting PHI node: attr_1666 = PHI <attr_334(75), attr_303(59)>
	Argument #1: attr_303 copy-of chain: attr_303 [NOT A COPY]
PHI node attr_1666 copy-of chain: attr_1666 -> attr_303 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: dptime_1671 = PHI <dptime_36(75), 0(59)>
PHI node dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: dmaxptime_1865 = PHI <dmaxptime_40(75), 0(59)>
PHI node dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: sendonly_1689 = PHI <sendonly_43(75), sendonly_42(59)>
	Argument #1: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_1689 copy-of chain: sendonly_1689 -> sendonly_42 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: recvonly_1894 = PHI <recvonly_45(75), 0(59)>
PHI node recvonly_1894 copy-of chain: recvonly_1894 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44590_304 == 0B)

No interesting values produced.
Adding Destination of edge (60 -> 75) to worklist

Adding Destination of edge (60 -> 61) to worklist


Simulating statement (from ssa_edges): recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>

Visiting PHI node: recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>
	Argument #9: recvonly_1894 copy-of chain: recvonly_1894 [NOT A COPY]
PHI node recvonly_45 copy-of chain: recvonly_45 -> recvonly_1894 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>

Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
	Argument #9: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 -> dmaxptime_1865 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>

Visiting PHI node: dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
	Argument #9: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
PHI node dptime_36 copy-of chain: dptime_36 -> dptime_1671 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): dptime_1035 = PHI <dptime_36(75), 0(59)>

Visiting PHI node: dptime_1035 = PHI <dptime_36(75), 0(59)>
PHI node dptime_1035 copy-of chain: dptime_1035 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): dmaxptime_1005 = PHI <dmaxptime_40(75), 0(59)>

Visiting PHI node: dmaxptime_1005 = PHI <dmaxptime_40(75), 0(59)>
PHI node dmaxptime_1005 copy-of chain: dmaxptime_1005 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): recvonly_1654 = PHI <recvonly_45(75), 0(59)>

Visiting PHI node: recvonly_1654 = PHI <recvonly_45(75), 0(59)>
PHI node recvonly_1654 copy-of chain: recvonly_1654 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 61

Visiting statement:
if (D.47877_1465 == 0)

No interesting values produced.
Adding Destination of edge (61 -> 417) to worklist


Simulating statement (from ssa_edges): maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>

Visiting PHI node: maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>
PHI node maxptime_1470 copy-of chain: maxptime_1470 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): maxptime_1040 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(167)>

Visiting PHI node: maxptime_1040 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(167)>
PHI node maxptime_1040 copy-of chain: maxptime_1040 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): ptime_1475 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(435)>

Visiting PHI node: ptime_1475 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(435)>
PHI node ptime_1475 copy-of chain: ptime_1475 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): ptime_1033 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(167)>

Visiting PHI node: ptime_1033 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(167)>
PHI node ptime_1033 copy-of chain: ptime_1033 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 417

Visiting statement:
if (D.44594_307 == 0)

No interesting values produced.
Adding Destination of edge (417 -> 62) to worklist

Adding Destination of edge (417 -> 63) to worklist


Simulating block 62

Simulating block 53

Simulating block 76

Visiting PHI node: sendonly_1006 = PHI <sendonly_43(75), sendonly_42(59)>
	Argument #1: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_1006 copy-of chain: sendonly_1006 -> sendonly_42 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (D.44626_337 != 0)

No interesting values produced.
Adding Destination of edge (76 -> 77) to worklist

Adding Destination of edge (76 -> 78) to worklist


Simulating block 77

Simulating block 75

Visiting PHI node: dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
	Argument #0: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
	Argument #1: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
	Argument #9: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
PHI node dptime_36 copy-of chain: dptime_36 -> dptime_1671 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
	Argument #0: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #1: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #9: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 -> dmaxptime_1865 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: sendonly_43 = PHI <sendonly_1689(61), 1(62), 1(64), sendonly_1689(68), 0(70), sendonly_1689(72), sendonly_1689(73), sendonly_1689(74), sendonly_1689(67), sendonly_1689(60)>
	Argument #0: sendonly_1689 copy-of chain: sendonly_1689 -> sendonly_42 [COPY]
PHI node sendonly_43 copy-of chain: sendonly_43 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>
	Argument #0: recvonly_1894 copy-of chain: recvonly_1894 [NOT A COPY]
	Argument #1: recvonly_1894 copy-of chain: recvonly_1894 [NOT A COPY]
	Argument #9: recvonly_1894 copy-of chain: recvonly_1894 [NOT A COPY]
PHI node recvonly_45 copy-of chain: recvonly_45 -> recvonly_1894 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (attr_334 != 0B)

No interesting values produced.
Adding Destination of edge (75 -> 60) to worklist

Adding Destination of edge (75 -> 76) to worklist


Simulating statement (from ssa_edges): sendonly_1006 = PHI <sendonly_43(75), sendonly_42(59)>

Visiting PHI node: sendonly_1006 = PHI <sendonly_43(75), sendonly_42(59)>
PHI node sendonly_1006 copy-of chain: sendonly_1006 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): sendonly_1689 = PHI <sendonly_43(75), sendonly_42(59)>

Visiting PHI node: sendonly_1689 = PHI <sendonly_43(75), sendonly_42(59)>
	Argument #0: sendonly_43 copy-of chain: sendonly_43 [NOT A COPY]
	Argument #1: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_1689 copy-of chain: sendonly_1689 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (sendonly_1689 != 2)

Simulating block 63

Visiting statement:
if (D.44598_311 == 0)

No interesting values produced.
Adding Destination of edge (63 -> 64) to worklist

Adding Destination of edge (63 -> 65) to worklist


Simulating block 64
Adding Destination of edge (64 -> 75) to worklist


Simulating block 78

Visiting statement:
if (D.44631_339 == 0)

No interesting values produced.
Adding Destination of edge (78 -> 79) to worklist

Adding Destination of edge (78 -> 419) to worklist


Simulating block 79

Visiting statement:
if (val_341 == 0B)

No interesting values produced.
Adding Destination of edge (79 -> 90) to worklist

Adding Destination of edge (79 -> 80) to worklist


Simulating block 80

Visiting statement:
if (D.49699_1570 == 0)

No interesting values produced.
Adding Destination of edge (80 -> 89) to worklist

Adding Destination of edge (80 -> 81) to worklist


Simulating block 81

Visiting statement:
if (D.49700_1571 == 0)

No interesting values produced.
Adding Destination of edge (81 -> 82) to worklist


Simulating block 82

Visiting statement:
if (D.49701_1572 == 0)

No interesting values produced.
Adding Destination of edge (82 -> 83) to worklist


Simulating block 83

Visiting statement:
if (D.49702_1573 == 0)

No interesting values produced.
Adding Destination of edge (83 -> 84) to worklist


Simulating block 84

Visiting statement:
if (D.49703_1574 == 0)

No interesting values produced.
Adding Destination of edge (84 -> 85) to worklist


Simulating block 85

Visiting statement:
if (D.49704_1575 == 0)

No interesting values produced.
Adding Destination of edge (85 -> 86) to worklist


Simulating block 86

Visiting statement:
if (D.49705_1576 == 0)

No interesting values produced.
Adding Destination of edge (86 -> 87) to worklist


Simulating block 87

Visiting statement:
if (D.49706_1577 != 0)

No interesting values produced.
Adding Destination of edge (87 -> 88) to worklist

Adding Destination of edge (87 -> 418) to worklist


Simulating block 88

Visiting statement:
if (D.49707_1578 != 0)

No interesting values produced.

Simulating block 60

Visiting PHI node: attr_1666 = PHI <attr_334(75), attr_303(59)>
	Argument #0: attr_334 copy-of chain: attr_334 [NOT A COPY]
	Argument #1: attr_303 copy-of chain: attr_303 [NOT A COPY]
PHI node attr_1666 copy-of chain: attr_1666 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 76

Simulating block 65

Visiting statement:
if (D.44602_315 == 0)

No interesting values produced.
Adding Destination of edge (65 -> 66) to worklist

Adding Destination of edge (65 -> 69) to worklist


Simulating block 66

Visiting statement:
if (D.44606_319 != 0)

No interesting values produced.
Adding Destination of edge (66 -> 67) to worklist

Adding Destination of edge (66 -> 68) to worklist


Simulating block 67

Simulating block 75

Visiting PHI node: dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
	Argument #0: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
	Argument #1: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
	Argument #2: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
	Argument #8: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
	Argument #9: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
PHI node dptime_36 copy-of chain: dptime_36 -> dptime_1671 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
	Argument #0: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #1: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #2: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #8: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #9: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 -> dmaxptime_1865 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>
	Argument #0: recvonly_1894 copy-of chain: recvonly_1894 [NOT A COPY]
	Argument #1: recvonly_1894 copy-of chain: recvonly_1894 [NOT A COPY]
	Argument #2: recvonly_1894 copy-of chain: recvonly_1894 [NOT A COPY]
PHI node recvonly_45 copy-of chain: recvonly_45 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 419
Adding Destination of edge (419 -> 95) to worklist


Simulating block 90

Visiting statement:
if (D.44636_344 == 0)

No interesting values produced.
Adding Destination of edge (90 -> 91) to worklist

Adding Destination of edge (90 -> 419) to worklist


Simulating block 91

Visiting statement:
if (D.44640_348 != 0)

No interesting values produced.
Adding Destination of edge (91 -> 92) to worklist


Simulating block 92

Visiting statement:
if (val_351 != 0B)

No interesting values produced.
Adding Destination of edge (92 -> 93) to worklist

Adding Destination of edge (92 -> 94) to worklist


Simulating block 93

Simulating block 89

Simulating block 418
Adding Destination of edge (418 -> 90) to worklist


Simulating block 69

Visiting statement:
if (sendonly_1689 != 2)

No interesting values produced.
Adding Destination of edge (69 -> 70) to worklist

Adding Destination of edge (69 -> 71) to worklist


Simulating block 68
Adding Destination of edge (68 -> 75) to worklist


Simulating block 95

Visiting statement:
if (val_355 != 0B)

No interesting values produced.
Adding Destination of edge (95 -> 96) to worklist

Adding Destination of edge (95 -> 107) to worklist


Simulating block 96

Visiting statement:
if (D.49711_1580 == 0)

No interesting values produced.
Adding Destination of edge (96 -> 106) to worklist

Adding Destination of edge (96 -> 97) to worklist


Simulating block 97

Visiting statement:
if (D.49712_1581 == 0)

No interesting values produced.
Adding Destination of edge (97 -> 98) to worklist


Simulating block 98

Visiting statement:
if (D.49713_1582 == 0)

No interesting values produced.
Adding Destination of edge (98 -> 99) to worklist


Simulating block 99

Visiting statement:
if (D.49714_1583 == 0)

No interesting values produced.
Adding Destination of edge (99 -> 100) to worklist


Simulating block 100

Visiting statement:
if (D.49715_1584 == 0)

No interesting values produced.
Adding Destination of edge (100 -> 101) to worklist


Simulating block 101

Visiting statement:
if (D.49716_1585 == 0)

No interesting values produced.
Adding Destination of edge (101 -> 102) to worklist


Simulating block 102

Visiting statement:
if (D.49717_1586 == 0)

No interesting values produced.
Adding Destination of edge (102 -> 103) to worklist


Simulating block 103

Visiting statement:
if (D.49718_1587 != 0)

No interesting values produced.
Adding Destination of edge (103 -> 104) to worklist


Simulating block 104

Visiting statement:
if (D.49719_1588 != 0)

No interesting values produced.
Adding Destination of edge (104 -> 105) to worklist


Simulating block 105

Simulating block 419

Simulating block 94

Visiting PHI node: reneg_81 = PHI <reneg_349(92), reneg_352(93)>
	Argument #0: reneg_349 copy-of chain: reneg_349 [NOT A COPY]
	Argument #1: reneg_352 copy-of chain: reneg_352 [NOT A COPY]
PHI node reneg_81 copy-of chain: reneg_81 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (reneg_81 != 0)

No interesting values produced.
Adding Destination of edge (94 -> 95) to worklist


Simulating block 90

Simulating block 70

Visiting statement:
if (D.44614_324 == 0)

No interesting values produced.

Simulating block 71

Visiting statement:
if (D.44616_327 == 0)

No interesting values produced.
Adding Destination of edge (71 -> 72) to worklist

Adding Destination of edge (71 -> 73) to worklist


Simulating block 72

Simulating block 75

Visiting PHI node: dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
	Argument #0: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
	Argument #1: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
	Argument #2: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
	Argument #3: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
	Argument #4: dptime_1671 copy-of chain: dptime_1671 [NOT A COPY]
	Argument #5: dptime_1467 copy-of chain: dptime_1467 [NOT A COPY]
PHI node dptime_36 copy-of chain: dptime_36 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
	Argument #0: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #1: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #2: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #3: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #4: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #5: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #8: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #9: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 -> dmaxptime_1865 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 107

Visiting PHI node: reneg_82 = PHI <0(94), reneg_353(95), reneg_1589(106)>
PHI node reneg_82 copy-of chain: reneg_82 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44649_357 != 0B)

No interesting values produced.
Adding Destination of edge (107 -> 108) to worklist

Adding Destination of edge (107 -> 109) to worklist


Simulating statement (from ssa_edges): if (reneg_82 == 0)

Simulating block 108
Adding Destination of edge (108 -> 110) to worklist


Simulating block 110

Visiting statement:
if (total_codecs_359 != 0)

No interesting values produced.
Adding Destination of edge (110 -> 111) to worklist

Adding Destination of edge (110 -> 113) to worklist


Simulating block 111

Simulating block 106

Visiting PHI node: reneg_1589 = PHI <1(96), 1(97), 1(98), 1(99), 1(100), 1(101), 1(102), 1(104), 0(103), 0(105)>
PHI node reneg_1589 copy-of chain: reneg_1589 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.

Adding Destination of edge (106 -> 107) to worklist


Simulating block 95

Simulating block 73

Visiting statement:
if (D.44621_331 == 0)

No interesting values produced.
Adding Destination of edge (73 -> 74) to worklist

Adding Destination of edge (73 -> 75) to worklist


Simulating block 109

Visiting statement:
if (reneg_82 == 0)

No interesting values produced.
Adding Destination of edge (109 -> 110) to worklist

Adding Destination of edge (109 -> 112) to worklist


Simulating block 112

Simulating block 110

Simulating block 113

Visiting PHI node: codec_array_84 = PHI <codec_array_360(111), codec_array_190(110), codec_array_190(112)>
	Argument #0: codec_array_360 copy-of chain: codec_array_360 [NOT A COPY]
	Argument #1: codec_array_190 copy-of chain: codec_array_190 [NOT A COPY]
PHI node codec_array_84 copy-of chain: codec_array_84 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: total_codecs_85 = PHI <total_codecs_359(111), total_codecs_192(110), total_codecs_365(112)>
	Argument #0: total_codecs_359 copy-of chain: total_codecs_359 [NOT A COPY]
	Argument #1: total_codecs_192 copy-of chain: total_codecs_192 [NOT A COPY]
PHI node total_codecs_85 copy-of chain: total_codecs_85 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44661_366 != 0B)

No interesting values produced.
Adding Destination of edge (113 -> 116) to worklist

Adding Destination of edge (113 -> 114) to worklist


Simulating statement (from ssa_edges): if (total_codecs_85 > 0)

Simulating statement (from ssa_edges): if (total_codecs_85 > i_1020)

Simulating block 114

Visiting statement:
if (D.44663_367 != 0B)

No interesting values produced.
Adding Destination of edge (114 -> 115) to worklist


Simulating block 115

Visiting statement:
if (D.44665_368 != 0B)

No interesting values produced.
Adding Destination of edge (115 -> 117) to worklist


Simulating block 117

Visiting statement:
if (m_370 != 0B)

No interesting values produced.
Adding Destination of edge (117 -> 118) to worklist

Adding Destination of edge (117 -> 413) to worklist


Simulating block 118

Visiting PHI node: match_1800 = PHI <match_15(412), 0(117)>
PHI node match_1800 copy-of chain: match_1800 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: best_te_680 = PHI <best_te_22(412), 0(117)>
PHI node best_te_680 copy-of chain: best_te_680 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: cng_pt_1717 = PHI <cng_pt_26(412), 0(117)>
PHI node cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_1764 = PHI <m_1093(412), m_370(117)>
	Argument #1: m_370 copy-of chain: m_370 [NOT A COPY]
PHI node m_1764 copy-of chain: m_1764 -> m_370 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_1866 = PHI <got_crypto_55(412), 0(117)>
PHI node got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_video_crypto_1674 = PHI <got_video_crypto_63(412), 0(117)>
PHI node got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_audio_1693 = PHI <got_audio_66(412), 0(117)>
PHI node got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_avp_671 = PHI <got_avp_1859(412), 0(117)>
PHI node got_avp_671 copy-of chain: got_avp_671 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_savp_512 = PHI <got_savp_1739(412), 0(117)>
PHI node got_savp_512 copy-of chain: got_savp_512 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_udptl_1868 = PHI <got_udptl_1743(412), 0(117)>
PHI node got_udptl_1868 copy-of chain: got_udptl_1868 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_webrtc_452 = PHI <got_webrtc_78(412), 0(117)>
PHI node got_webrtc_452 copy-of chain: got_webrtc_452 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_477 = PHI <codec_ms_94(412), 0(117)>
PHI node codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_1869 = PHI <m_idx_113(412), 0(117)>
PHI node m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_1749 = PHI <nm_idx_121(412), 0(117)>
PHI node nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44666_373 == 261)

No interesting values produced.
Adding Destination of edge (118 -> 119) to worklist

Adding Destination of edge (118 -> 120) to worklist


Simulating statement (from ssa_edges): nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>

Visiting PHI node: nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
PHI node nm_idx_121 copy-of chain: nm_idx_121 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_119 = PHI <nm_idx_1139(268), nm_idx_117(271), nm_idx_901(270), nm_idx_1749(207)>

Visiting PHI node: nm_idx_119 = PHI <nm_idx_1139(268), nm_idx_117(271), nm_idx_901(270), nm_idx_1749(207)>
PHI node nm_idx_119 copy-of chain: nm_idx_119 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_1755 = PHI <nm_idx_117(271), nm_idx_1749(207)>

Visiting PHI node: nm_idx_1755 = PHI <nm_idx_117(271), nm_idx_1749(207)>
PHI node nm_idx_1755 copy-of chain: nm_idx_1755 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>

Visiting PHI node: m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
PHI node m_idx_113 copy-of chain: m_idx_113 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_105 = PHI <m_idx_703(268), m_idx_103(271), m_idx_102(270), m_idx_1869(207)>

Visiting PHI node: m_idx_105 = PHI <m_idx_703(268), m_idx_103(271), m_idx_102(270), m_idx_1869(207)>
PHI node m_idx_105 copy-of chain: m_idx_105 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_792 = PHI <m_idx_103(271), m_idx_1869(207)>

Visiting PHI node: m_idx_792 = PHI <m_idx_103(271), m_idx_1869(207)>
PHI node m_idx_792 copy-of chain: m_idx_792 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>

Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
PHI node codec_ms_94 copy-of chain: codec_ms_94 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_93 = PHI <codec_ms_90(268), codec_ms_91(271), codec_ms_90(270), codec_ms_477(207)>

Visiting PHI node: codec_ms_93 = PHI <codec_ms_90(268), codec_ms_91(271), codec_ms_90(270), codec_ms_477(207)>
PHI node codec_ms_93 copy-of chain: codec_ms_93 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_1720 = PHI <codec_ms_91(271), codec_ms_477(207)>

Visiting PHI node: codec_ms_1720 = PHI <codec_ms_91(271), codec_ms_477(207)>
PHI node codec_ms_1720 copy-of chain: codec_ms_1720 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_452(118), got_webrtc_374(119)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_452(118), got_webrtc_374(119)>
	Argument #0: got_webrtc_452 copy-of chain: got_webrtc_452 [NOT A COPY]
PHI node got_webrtc_78 copy-of chain: got_webrtc_78 -> got_webrtc_452 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (got_udptl_1868 != 0)

Simulating statement (from ssa_edges): got_udptl_774 = PHI <got_udptl_1868(131), got_udptl_391(130)>

Visiting PHI node: got_udptl_774 = PHI <got_udptl_1868(131), got_udptl_391(130)>
PHI node got_udptl_774 copy-of chain: got_udptl_774 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_udptl_1743 = PHI <got_udptl_1868(131), got_udptl_774(132), got_udptl_774(133)>

Visiting PHI node: got_udptl_1743 = PHI <got_udptl_1868(131), got_udptl_774(132), got_udptl_774(133)>
PHI node got_udptl_1743 copy-of chain: got_udptl_1743 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_512(124), got_savp_512(127), got_savp_512(129), got_savp_512(128), got_savp_384(125)>

Visiting PHI node: got_savp_74 = PHI <got_savp_512(124), got_savp_512(127), got_savp_512(129), got_savp_512(128), got_savp_384(125)>
PHI node got_savp_74 copy-of chain: got_savp_74 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_savp_1711 = PHI <got_savp_74(131), got_savp_512(130)>

Visiting PHI node: got_savp_1711 = PHI <got_savp_74(131), got_savp_512(130)>
PHI node got_savp_1711 copy-of chain: got_savp_1711 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_671(124), got_avp_671(127), got_avp_671(129), got_avp_388(128), got_avp_671(125)>

Visiting PHI node: got_avp_68 = PHI <got_avp_671(124), got_avp_671(127), got_avp_671(129), got_avp_388(128), got_avp_671(125)>
PHI node got_avp_68 copy-of chain: got_avp_68 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_avp_1740 = PHI <got_avp_68(131), got_avp_671(130)>

Visiting PHI node: got_avp_1740 = PHI <got_avp_68(131), got_avp_671(130)>
PHI node got_avp_1740 copy-of chain: got_avp_1740 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>

Visiting PHI node: got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
PHI node got_audio_66 copy-of chain: got_audio_66 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_959 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>

Visiting PHI node: got_video_crypto_959 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
PHI node got_video_crypto_959 copy-of chain: got_video_crypto_959 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_556 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>

Visiting PHI node: got_video_crypto_556 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
PHI node got_video_crypto_556 copy-of chain: got_video_crypto_556 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
PHI node got_crypto_55 copy-of chain: got_crypto_55 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_361 = PHI <got_crypto_50(171), got_crypto_1866(167)>

Visiting PHI node: got_crypto_361 = PHI <got_crypto_50(171), got_crypto_1866(167)>
PHI node got_crypto_361 copy-of chain: got_crypto_361 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_1118 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_95(435)>

Visiting PHI node: got_crypto_1118 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_95(435)>
PHI node got_crypto_1118 copy-of chain: got_crypto_1118 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_969 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_1866(167)>

Visiting PHI node: got_crypto_969 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_1866(167)>
PHI node got_crypto_969 copy-of chain: got_crypto_969 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>

Visiting PHI node: cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
PHI node cng_pt_26 copy-of chain: cng_pt_26 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>

Visiting PHI node: cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>
PHI node cng_pt_1626 copy-of chain: cng_pt_1626 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): cng_pt_1667 = PHI <cng_pt_24(271), cng_pt_1717(207)>

Visiting PHI node: cng_pt_1667 = PHI <cng_pt_24(271), cng_pt_1717(207)>
PHI node cng_pt_1667 copy-of chain: cng_pt_1667 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>

Visiting PHI node: cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
PHI node cng_pt_1047 copy-of chain: cng_pt_1047 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>

Visiting PHI node: best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
PHI node best_te_22 copy-of chain: best_te_22 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>

Visiting PHI node: best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>
PHI node best_te_1624 copy-of chain: best_te_1624 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): best_te_1898 = PHI <best_te_19(271), best_te_680(207)>

Visiting PHI node: best_te_1898 = PHI <best_te_19(271), best_te_680(207)>
PHI node best_te_1898 copy-of chain: best_te_1898 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>

Visiting PHI node: match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
PHI node match_15 copy-of chain: match_15 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (match_1800 == 0)

Simulating statement (from ssa_edges): match_14 = PHI <match_1800(404), 1(403)>

Visiting PHI node: match_14 = PHI <match_1800(404), 1(403)>
PHI node match_14 copy-of chain: match_14 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_9 = PHI <1(268), match_7(271), 0(270), match_1800(207)>

Visiting PHI node: match_9 = PHI <1(268), match_7(271), 0(270), match_1800(207)>
PHI node match_9 copy-of chain: match_9 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_1901 = PHI <match_7(271), match_1800(207)>

Visiting PHI node: match_1901 = PHI <match_7(271), match_1800(207)>
PHI node match_1901 copy-of chain: match_1901 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_1045 = PHI <m_1764(133)>

Visiting PHI node: m_1045 = PHI <m_1764(133)>
PHI node m_1045 copy-of chain: m_1045 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 119

Simulating block 107

Simulating block 74

Simulating block 75

Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
	Argument #0: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #1: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #2: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #3: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #4: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #5: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #6: dmaxptime_1865 copy-of chain: dmaxptime_1865 [NOT A COPY]
	Argument #7: dmaxptime_1468 copy-of chain: dmaxptime_1468 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 116
Adding Destination of edge (116 -> 117) to worklist


Simulating block 117

Simulating block 413

Visiting PHI node: match_17 = PHI <1(134), 0(136), 0(152), 1(150), 0(198), 0(203), 0(206), 0(336), 0(374), match_15(412), 1(149), 1(162), 1(420), 0(117)>
PHI node match_17 copy-of chain: match_17 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.

Adding Destination of edge (413 -> 414) to worklist


Simulating block 120

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_452(118), got_webrtc_374(119)>
	Argument #0: got_webrtc_452 copy-of chain: got_webrtc_452 [NOT A COPY]
	Argument #1: got_webrtc_374 copy-of chain: got_webrtc_374 [NOT A COPY]
PHI node got_webrtc_78 copy-of chain: got_webrtc_78 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44669_375 != 0B)

No interesting values produced.
Adding Destination of edge (120 -> 121) to worklist

Adding Destination of edge (120 -> 123) to worklist


Simulating block 121

Visiting statement:
if (D.44672_377 == 0)

No interesting values produced.
Adding Destination of edge (121 -> 122) to worklist


Simulating block 122

Simulating block 414

Simulating block 123

Visiting statement:
if (D.44678_382 != 0)

No interesting values produced.
Adding Destination of edge (123 -> 124) to worklist

Adding Destination of edge (123 -> 126) to worklist


Simulating block 124

Visiting statement:
if (D.44681_383 == 2)

No interesting values produced.
Adding Destination of edge (124 -> 125) to worklist

Adding Destination of edge (124 -> 131) to worklist


Simulating block 126

Visiting statement:
if (D.44675_379 == 256)

No interesting values produced.
Adding Destination of edge (126 -> 127) to worklist

Adding Destination of edge (126 -> 129) to worklist


Simulating block 125

Simulating block 131

Visiting PHI node: got_avp_68 = PHI <got_avp_671(124), got_avp_671(127), got_avp_671(129), got_avp_388(128), got_avp_671(125)>
	Argument #0: got_avp_671 copy-of chain: got_avp_671 [NOT A COPY]
	Argument #4: got_avp_671 copy-of chain: got_avp_671 [NOT A COPY]
PHI node got_avp_68 copy-of chain: got_avp_68 -> got_avp_671 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_savp_74 = PHI <got_savp_512(124), got_savp_512(127), got_savp_512(129), got_savp_512(128), got_savp_384(125)>
	Argument #0: got_savp_512 copy-of chain: got_savp_512 [NOT A COPY]
	Argument #4: got_savp_384 copy-of chain: got_savp_384 [NOT A COPY]
PHI node got_savp_74 copy-of chain: got_savp_74 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (got_udptl_1868 != 0)

No interesting values produced.
Adding Destination of edge (131 -> 132) to worklist

Adding Destination of edge (131 -> 163) to worklist


Simulating statement (from ssa_edges): got_savp_1711 = PHI <got_savp_74(131), got_savp_512(130)>

Visiting PHI node: got_savp_1711 = PHI <got_savp_74(131), got_savp_512(130)>
	Argument #0: got_savp_74 copy-of chain: got_savp_74 [NOT A COPY]
PHI node got_savp_1711 copy-of chain: got_savp_1711 -> got_savp_74 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_savp_1739 = PHI <got_savp_74(131), got_savp_1711(132), got_savp_1711(133)>

Visiting PHI node: got_savp_1739 = PHI <got_savp_74(131), got_savp_1711(132), got_savp_1711(133)>
	Argument #0: got_savp_74 copy-of chain: got_savp_74 [NOT A COPY]
PHI node got_savp_1739 copy-of chain: got_savp_1739 -> got_savp_74 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_avp_1740 = PHI <got_avp_68(131), got_avp_671(130)>

Visiting PHI node: got_avp_1740 = PHI <got_avp_68(131), got_avp_671(130)>
	Argument #0: got_avp_68 copy-of chain: got_avp_68 -> got_avp_671 [COPY]
PHI node got_avp_1740 copy-of chain: got_avp_1740 -> got_avp_671 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_avp_1859 = PHI <got_avp_68(131), got_avp_1740(132), got_avp_1740(133)>

Visiting PHI node: got_avp_1859 = PHI <got_avp_68(131), got_avp_1740(132), got_avp_1740(133)>
	Argument #0: got_avp_68 copy-of chain: got_avp_68 -> got_avp_671 [COPY]
PHI node got_avp_1859 copy-of chain: got_avp_1859 -> got_avp_671 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating block 127

Visiting statement:
if (D.44681_387 == 2)

No interesting values produced.
Adding Destination of edge (127 -> 128) to worklist

Adding Destination of edge (127 -> 131) to worklist


Simulating block 129

Visiting statement:
if (D.44675_379 == 258)

No interesting values produced.
Adding Destination of edge (129 -> 130) to worklist


Simulating block 130

Simulating block 132

Visiting PHI node: got_avp_1740 = PHI <got_avp_68(131), got_avp_671(130)>
	Argument #0: got_avp_68 copy-of chain: got_avp_68 -> got_avp_671 [COPY]
	Argument #1: got_avp_671 copy-of chain: got_avp_671 [NOT A COPY]
PHI node got_avp_1740 copy-of chain: got_avp_1740 -> got_avp_671 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_savp_1711 = PHI <got_savp_74(131), got_savp_512(130)>
	Argument #0: got_savp_74 copy-of chain: got_savp_74 [NOT A COPY]
	Argument #1: got_savp_512 copy-of chain: got_savp_512 [NOT A COPY]
PHI node got_savp_1711 copy-of chain: got_savp_1711 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_udptl_774 = PHI <got_udptl_1868(131), got_udptl_391(130)>
	Argument #0: got_udptl_1868 copy-of chain: got_udptl_1868 [NOT A COPY]
	Argument #1: got_udptl_391 copy-of chain: got_udptl_391 [NOT A COPY]
PHI node got_udptl_774 copy-of chain: got_udptl_774 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44681_392 == 8)

No interesting values produced.
Adding Destination of edge (132 -> 133) to worklist


Simulating statement (from ssa_edges): got_udptl_1743 = PHI <got_udptl_1868(131), got_udptl_774(132), got_udptl_774(133)>

Visiting PHI node: got_udptl_1743 = PHI <got_udptl_1868(131), got_udptl_774(132), got_udptl_774(133)>
	Argument #0: got_udptl_1868 copy-of chain: got_udptl_1868 [NOT A COPY]
	Argument #1: got_udptl_774 copy-of chain: got_udptl_774 [NOT A COPY]
PHI node got_udptl_1743 copy-of chain: got_udptl_1743 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_savp_1739 = PHI <got_savp_74(131), got_savp_1711(132), got_savp_1711(133)>

Visiting PHI node: got_savp_1739 = PHI <got_savp_74(131), got_savp_1711(132), got_savp_1711(133)>
	Argument #0: got_savp_74 copy-of chain: got_savp_74 [NOT A COPY]
	Argument #1: got_savp_1711 copy-of chain: got_savp_1711 [NOT A COPY]
PHI node got_savp_1739 copy-of chain: got_savp_1739 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 133

Visiting statement:
if (D.44697_393 != 0)

No interesting values produced.
Adding Destination of edge (133 -> 134) to worklist


Simulating block 134

Visiting PHI node: m_1045 = PHI <m_1764(133)>
PHI node m_1045 copy-of chain: m_1045 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44699_396 != 0)

No interesting values produced.
Adding Destination of edge (134 -> 413) to worklist

Adding Destination of edge (134 -> 135) to worklist


Simulating block 135

Visiting statement:
if (D.44703_399 != 0)

No interesting values produced.
Adding Destination of edge (135 -> 136) to worklist

Adding Destination of edge (135 -> 137) to worklist


Simulating block 136

Simulating block 163

Visiting PHI node: got_avp_1859 = PHI <got_avp_68(131), got_avp_1740(132), got_avp_1740(133)>
	Argument #0: got_avp_68 copy-of chain: got_avp_68 -> got_avp_671 [COPY]
	Argument #1: got_avp_1740 copy-of chain: got_avp_1740 -> got_avp_671 [COPY]
	Argument #2: got_avp_1740 copy-of chain: got_avp_1740 -> got_avp_671 [COPY]
PHI node got_avp_1859 copy-of chain: got_avp_1859 -> got_avp_671 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (D.44681_493 == 2)

No interesting values produced.
Adding Destination of edge (163 -> 164) to worklist

Adding Destination of edge (163 -> 332) to worklist


Simulating block 128

Simulating block 131

Visiting PHI node: got_avp_68 = PHI <got_avp_671(124), got_avp_671(127), got_avp_671(129), got_avp_388(128), got_avp_671(125)>
	Argument #0: got_avp_671 copy-of chain: got_avp_671 [NOT A COPY]
	Argument #1: got_avp_671 copy-of chain: got_avp_671 [NOT A COPY]
	Argument #2: got_avp_671 copy-of chain: got_avp_671 [NOT A COPY]
	Argument #3: got_avp_388 copy-of chain: got_avp_388 [NOT A COPY]
PHI node got_avp_68 copy-of chain: got_avp_68 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_avp_1740 = PHI <got_avp_68(131), got_avp_671(130)>

Visiting PHI node: got_avp_1740 = PHI <got_avp_68(131), got_avp_671(130)>
	Argument #0: got_avp_68 copy-of chain: got_avp_68 [NOT A COPY]
	Argument #1: got_avp_671 copy-of chain: got_avp_671 [NOT A COPY]
PHI node got_avp_1740 copy-of chain: got_avp_1740 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_avp_1859 = PHI <got_avp_68(131), got_avp_1740(132), got_avp_1740(133)>

Visiting PHI node: got_avp_1859 = PHI <got_avp_68(131), got_avp_1740(132), got_avp_1740(133)>
	Argument #0: got_avp_68 copy-of chain: got_avp_68 [NOT A COPY]
	Argument #1: got_avp_1740 copy-of chain: got_avp_1740 [NOT A COPY]
PHI node got_avp_1859 copy-of chain: got_avp_1859 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 413

Simulating block 137

Visiting statement:
if (D.44707_408 != 0)

No interesting values produced.
Adding Destination of edge (137 -> 138) to worklist

Adding Destination of edge (137 -> 140) to worklist


Simulating block 164

Visiting statement:
if (D.44779_497 != 0)

No interesting values produced.
Adding Destination of edge (164 -> 165) to worklist

Adding Destination of edge (164 -> 412) to worklist


Simulating block 332

Visiting statement:
if (D.44681_493 == 3)

No interesting values produced.
Adding Destination of edge (332 -> 333) to worklist


Simulating block 138

Visiting statement:
if (proceed_209(D) != 0B)

No interesting values produced.
Adding Destination of edge (138 -> 139) to worklist


Simulating block 139

Simulating block 140

Visiting statement:
if (var_402 != 0B)

No interesting values produced.
Adding Destination of edge (140 -> 141) to worklist

Adding Destination of edge (140 -> 143) to worklist


Simulating block 165

Visiting statement:
if (D.44781_498 != 0)

No interesting values produced.
Adding Destination of edge (165 -> 166) to worklist

Adding Destination of edge (165 -> 172) to worklist


Simulating block 166

Visiting statement:
if (D.44784_499 != 0)

No interesting values produced.
Adding Destination of edge (166 -> 167) to worklist


Simulating block 167

Visiting statement:
if (attr_500 != 0B)

No interesting values produced.
Adding Destination of edge (167 -> 168) to worklist

Adding Destination of edge (167 -> 201) to worklist


Simulating block 168

Visiting PHI node: attr_1559 = PHI <attr_506(171), attr_500(167)>
	Argument #1: attr_500 copy-of chain: attr_500 [NOT A COPY]
PHI node attr_1559 copy-of chain: attr_1559 -> attr_500 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_361 = PHI <got_crypto_50(171), got_crypto_1866(167)>
	Argument #1: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
PHI node got_crypto_361 copy-of chain: got_crypto_361 -> got_crypto_1866 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.44787_502 == 0)

No interesting values produced.
Adding Destination of edge (168 -> 169) to worklist

Adding Destination of edge (168 -> 171) to worklist


Simulating statement (from ssa_edges): got_crypto_50 = PHI <got_crypto_361(168), got_crypto_361(170), 1(421), got_crypto_361(169)>

Visiting PHI node: got_crypto_50 = PHI <got_crypto_361(168), got_crypto_361(170), 1(421), got_crypto_361(169)>
	Argument #0: got_crypto_361 copy-of chain: got_crypto_361 -> got_crypto_1866 [COPY]
PHI node got_crypto_50 copy-of chain: got_crypto_50 -> got_crypto_1866 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_crypto_95 = PHI <got_crypto_50(171)>

Visiting PHI node: got_crypto_95 = PHI <got_crypto_50(171)>
PHI node got_crypto_95 copy-of chain: got_crypto_95 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_361 = PHI <got_crypto_50(171), got_crypto_1866(167)>

Visiting PHI node: got_crypto_361 = PHI <got_crypto_50(171), got_crypto_1866(167)>
	Argument #1: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
PHI node got_crypto_361 copy-of chain: got_crypto_361 -> got_crypto_1866 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 169

Visiting statement:
if (D.44619_503 == 0B)

No interesting values produced.
Adding Destination of edge (169 -> 170) to worklist


Simulating block 170

Visiting statement:
if (D.47887_1469 == 0)

No interesting values produced.
Adding Destination of edge (170 -> 421) to worklist


Simulating block 421

Simulating block 412

Visiting PHI node: match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
	Argument #1: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #11: match_1800 copy-of chain: match_1800 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_1800 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
	Argument #1: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #11: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 -> best_te_680 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
	Argument #1: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #11: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_1717 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
	Argument #1: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #11: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_1866 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
	Argument #1: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
	Argument #11: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 -> got_video_crypto_1674 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
	Argument #1: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #11: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 -> got_audio_1693 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #11: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 -> codec_ms_477 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
	Argument #1: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
	Argument #11: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
PHI node m_idx_113 copy-of chain: m_idx_113 -> m_idx_1869 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
	Argument #1: nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
	Argument #11: nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
PHI node nm_idx_121 copy-of chain: nm_idx_121 -> nm_idx_1749 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (m_1093 != 0B)

No interesting values produced.
Adding Destination of edge (412 -> 118) to worklist

Adding Destination of edge (412 -> 413) to worklist


Simulating block 333

Visiting statement:
if (D.44697_873 != 0)

No interesting values produced.
Adding Destination of edge (333 -> 334) to worklist

Adding Destination of edge (333 -> 412) to worklist


Simulating block 141

Visiting statement:
if (pass_409 == 0)

No interesting values produced.
Adding Destination of edge (141 -> 142) to worklist


Simulating block 142

Visiting statement:
if (D.44716_410 == 0)

No interesting values produced.
Adding Destination of edge (142 -> 144) to worklist

Adding Destination of edge (142 -> 145) to worklist


Simulating block 143

Visiting PHI node: pass_126 = PHI <pass_406(140), pass_409(141)>
	Argument #0: pass_406 copy-of chain: pass_406 [NOT A COPY]
	Argument #1: pass_409 copy-of chain: pass_409 [NOT A COPY]
PHI node pass_126 copy-of chain: pass_126 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (pass_126 == 2)

No interesting values produced.

Simulating statement (from ssa_edges): pass_1664 = PHI <pass_126(143), 2(142)>

Visiting PHI node: pass_1664 = PHI <pass_126(143), 2(142)>
	Argument #0: pass_126 copy-of chain: pass_126 [NOT A COPY]
PHI node pass_1664 copy-of chain: pass_1664 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): pass_1848 = PHI <0(142), pass_1664(144), pass_126(143)>

Visiting PHI node: pass_1848 = PHI <0(142), pass_1664(144), pass_126(143)>
PHI node pass_1848 copy-of chain: pass_1848 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (pass_1848 != 0)

Simulating block 172

Visiting statement:
if (attr_507 != 0B)

No interesting values produced.
Adding Destination of edge (172 -> 173) to worklist


Simulating block 201

Visiting PHI node: ptime_1033 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(167)>
	Argument #1: dptime_1035 copy-of chain: dptime_1035 [NOT A COPY]
	Argument #2: dptime_1035 copy-of chain: dptime_1035 [NOT A COPY]
PHI node ptime_1033 copy-of chain: ptime_1033 -> dptime_1035 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: maxptime_1040 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(167)>
	Argument #1: dmaxptime_1005 copy-of chain: dmaxptime_1005 [NOT A COPY]
	Argument #2: dmaxptime_1005 copy-of chain: dmaxptime_1005 [NOT A COPY]
PHI node maxptime_1040 copy-of chain: maxptime_1040 -> dmaxptime_1005 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_969 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_1866(167)>
	Argument #1: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #2: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
PHI node got_crypto_969 copy-of chain: got_crypto_969 -> got_crypto_1866 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.44836_551 != 0)

No interesting values produced.
Adding Destination of edge (201 -> 202) to worklist

Adding Destination of edge (201 -> 204) to worklist


Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
	Argument #1: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #2: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #11: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_1866 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (maxptime_1040 != 0)

Simulating statement (from ssa_edges): if (maxptime_1040 == 0)

Simulating statement (from ssa_edges): if (D.45025_735 <= maxptime_1040)

Simulating statement (from ssa_edges): if (ptime_1033 == 0)

Simulating statement (from ssa_edges): codec_ms_1883 = PHI <maxptime_1040(221), ptime_1033(222)>

Visiting PHI node: codec_ms_1883 = PHI <maxptime_1040(221), ptime_1033(222)>
PHI node codec_ms_1883 copy-of chain: codec_ms_1883 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (ptime_1033 == 0)

Simulating statement (from ssa_edges): codec_ms_87 = PHI <codec_ms_1883(424), codec_ms_589(224), ptime_1033(223)>

Visiting PHI node: codec_ms_87 = PHI <codec_ms_1883(424), codec_ms_589(224), ptime_1033(223)>
PHI node codec_ms_87 copy-of chain: codec_ms_87 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 202

Visiting statement:
if (D.44839_552 == 0)

No interesting values produced.
Adding Destination of edge (202 -> 203) to worklist


Simulating block 203

Simulating block 171

Visiting PHI node: got_crypto_50 = PHI <got_crypto_361(168), got_crypto_361(170), 1(421), got_crypto_361(169)>
	Argument #0: got_crypto_361 copy-of chain: got_crypto_361 -> got_crypto_1866 [COPY]
	Argument #1: got_crypto_361 copy-of chain: got_crypto_361 -> got_crypto_1866 [COPY]
PHI node got_crypto_50 copy-of chain: got_crypto_50 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (attr_506 != 0B)

No interesting values produced.
Adding Destination of edge (171 -> 168) to worklist

Adding Destination of edge (171 -> 435) to worklist


Simulating statement (from ssa_edges): got_crypto_95 = PHI <got_crypto_50(171)>

Visiting PHI node: got_crypto_95 = PHI <got_crypto_50(171)>
PHI node got_crypto_95 copy-of chain: got_crypto_95 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_crypto_1118 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_95(435)>

Visiting PHI node: got_crypto_1118 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_95(435)>
	Argument #1: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
PHI node got_crypto_1118 copy-of chain: got_crypto_1118 -> got_crypto_1866 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_crypto_361 = PHI <got_crypto_50(171), got_crypto_1866(167)>

Visiting PHI node: got_crypto_361 = PHI <got_crypto_50(171), got_crypto_1866(167)>
	Argument #0: got_crypto_50 copy-of chain: got_crypto_50 [NOT A COPY]
	Argument #1: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
PHI node got_crypto_361 copy-of chain: got_crypto_361 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (got_crypto_1118 <= 0)

Simulating statement (from ssa_edges): got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>

Visiting PHI node: got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
PHI node got_crypto_53 copy-of chain: got_crypto_53 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 435

Simulating block 118

Visiting PHI node: m_1764 = PHI <m_1093(412), m_370(117)>
	Argument #0: m_1093 copy-of chain: m_1093 [NOT A COPY]
	Argument #1: m_370 copy-of chain: m_370 [NOT A COPY]
PHI node m_1764 copy-of chain: m_1764 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 413

Simulating block 334

Visiting statement:
if (connection_880 != 0B)

No interesting values produced.
Adding Destination of edge (334 -> 337) to worklist

Adding Destination of edge (334 -> 335) to worklist


Simulating block 335

Visiting statement:
if (connection_879 == 0B)

No interesting values produced.
Adding Destination of edge (335 -> 336) to worklist


Simulating block 336
Adding Destination of edge (336 -> 413) to worklist


Simulating block 337

Visiting PHI node: connection_110 = PHI <connection_879(335), connection_880(334)>
	Argument #0: connection_879 copy-of chain: connection_879 [NOT A COPY]
	Argument #1: connection_880 copy-of chain: connection_880 [NOT A COPY]
PHI node connection_110 copy-of chain: connection_110 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (map_883 != 0B)

No interesting values produced.
Adding Destination of edge (337 -> 338) to worklist

Adding Destination of edge (337 -> 393) to worklist


Simulating block 338

Visiting PHI node: got_video_crypto_556 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
	Argument #1: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
PHI node got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1674 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_819 = PHI <m_idx_953(392), 0(337)>
PHI node m_idx_819 copy-of chain: m_idx_819 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: map_1620 = PHI <map_1021(392), map_883(337)>
	Argument #1: map_883 copy-of chain: map_883 [NOT A COPY]
PHI node map_1620 copy-of chain: map_1620 -> map_883 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.45137_884 != 0)

No interesting values produced.
Adding Destination of edge (338 -> 339) to worklist

Adding Destination of edge (338 -> 345) to worklist


Simulating statement (from ssa_edges): m_idx_953 = PHI <m_idx_109(391), m_idx_819(379)>

Visiting PHI node: m_idx_953 = PHI <m_idx_109(391), m_idx_819(379)>
PHI node m_idx_953 copy-of chain: m_idx_953 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_910 = PHI <m_idx_109(391), m_idx_819(379)>

Visiting PHI node: m_idx_910 = PHI <m_idx_109(391), m_idx_819(379)>
PHI node m_idx_910 copy-of chain: m_idx_910 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_1738 = PHI <got_video_crypto_57(344), got_video_crypto_556(340)>

Visiting PHI node: got_video_crypto_1738 = PHI <got_video_crypto_57(344), got_video_crypto_556(340)>
PHI node got_video_crypto_1738 copy-of chain: got_video_crypto_1738 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_1885 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_136(436)>

Visiting PHI node: got_video_crypto_1885 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_136(436)>
PHI node got_video_crypto_1885 copy-of chain: got_video_crypto_1885 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_960 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_556(340)>

Visiting PHI node: got_video_crypto_960 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_556(340)>
PHI node got_video_crypto_960 copy-of chain: got_video_crypto_960 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 339

Visiting statement:
if (D.45140_885 != 0)

No interesting values produced.
Adding Destination of edge (339 -> 340) to worklist


Simulating block 340

Visiting statement:
if (attr_886 != 0B)

No interesting values produced.
Adding Destination of edge (340 -> 341) to worklist

Adding Destination of edge (340 -> 377) to worklist


Simulating block 341

Visiting PHI node: attr_1850 = PHI <attr_892(344), attr_886(340)>
	Argument #1: attr_886 copy-of chain: attr_886 [NOT A COPY]
PHI node attr_1850 copy-of chain: attr_1850 -> attr_886 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_video_crypto_1738 = PHI <got_video_crypto_57(344), got_video_crypto_556(340)>
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1674 [COPY]
PHI node got_video_crypto_1738 copy-of chain: got_video_crypto_1738 -> got_video_crypto_1674 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.45143_888 == 0)

No interesting values produced.
Adding Destination of edge (341 -> 342) to worklist

Adding Destination of edge (341 -> 344) to worklist


Simulating statement (from ssa_edges): got_video_crypto_57 = PHI <got_video_crypto_1738(341), got_video_crypto_1738(343), 1(430), got_video_crypto_1738(342)>

Visiting PHI node: got_video_crypto_57 = PHI <got_video_crypto_1738(341), got_video_crypto_1738(343), 1(430), got_video_crypto_1738(342)>
	Argument #0: got_video_crypto_1738 copy-of chain: got_video_crypto_1738 -> got_video_crypto_1674 [COPY]
PHI node got_video_crypto_57 copy-of chain: got_video_crypto_57 -> got_video_crypto_1674 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_video_crypto_136 = PHI <got_video_crypto_57(344)>

Visiting PHI node: got_video_crypto_136 = PHI <got_video_crypto_57(344)>
PHI node got_video_crypto_136 copy-of chain: got_video_crypto_136 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_1738 = PHI <got_video_crypto_57(344), got_video_crypto_556(340)>

Visiting PHI node: got_video_crypto_1738 = PHI <got_video_crypto_57(344), got_video_crypto_556(340)>
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1674 [COPY]
PHI node got_video_crypto_1738 copy-of chain: got_video_crypto_1738 -> got_video_crypto_1674 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 342

Visiting statement:
if (D.44619_889 == 0B)

No interesting values produced.
Adding Destination of edge (342 -> 343) to worklist


Simulating block 343

Visiting statement:
if (D.47939_1495 == 0)

No interesting values produced.
Adding Destination of edge (343 -> 430) to worklist


Simulating block 430

Simulating block 412

Visiting PHI node: match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
	Argument #1: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #2: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #11: match_1800 copy-of chain: match_1800 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_1800 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
	Argument #1: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #2: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #11: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 -> best_te_680 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
	Argument #1: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #2: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #11: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_1717 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
	Argument #1: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #2: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #11: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_1866 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
	Argument #1: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
	Argument #2: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
	Argument #11: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 -> got_video_crypto_1674 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
	Argument #1: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #2: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #11: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 -> got_audio_1693 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #2: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #11: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
	Argument #1: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
	Argument #2: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
	Argument #11: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
PHI node m_idx_113 copy-of chain: m_idx_113 -> m_idx_1869 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
	Argument #1: nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
	Argument #2: nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
	Argument #11: nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
PHI node nm_idx_121 copy-of chain: nm_idx_121 -> nm_idx_1749 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 144

Visiting statement:
if (D.44723_414 != 0)

No interesting values produced.
Adding Destination of edge (144 -> 420) to worklist


Simulating block 145

Visiting statement:
if (D.44724_416 == 0)

No interesting values produced.
Adding Destination of edge (145 -> 146) to worklist


Simulating block 146

Visiting statement:
if (D.44726_418 != 0)

No interesting values produced.
Adding Destination of edge (146 -> 147) to worklist


Simulating block 147

Visiting statement:
if (D.44728_420 != 0)

No interesting values produced.
Adding Destination of edge (147 -> 148) to worklist


Simulating block 148

Visiting statement:
if (D.44730_422 == 0)

No interesting values produced.
Adding Destination of edge (148 -> 149) to worklist


Simulating block 149

Visiting statement:
if (pass_1848 != 0)

No interesting values produced.
Adding Destination of edge (149 -> 150) to worklist


Simulating block 150

Visiting statement:
if (D.44733_424 == 0)

No interesting values produced.
Adding Destination of edge (150 -> 151) to worklist


Simulating block 151

Visiting statement:
if (D.44737_431 == 0)

No interesting values produced.
Adding Destination of edge (151 -> 152) to worklist

Adding Destination of edge (151 -> 153) to worklist


Simulating block 152

Simulating block 173

Visiting PHI node: attr_1599 = PHI <attr_548(200), attr_507(172), attr_77(435)>
	Argument #1: attr_507 copy-of chain: attr_507 [NOT A COPY]
	Argument #2: attr_77 copy-of chain: attr_77 [NOT A COPY]
PHI node attr_1599 copy-of chain: attr_1599 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: ptime_1475 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(435)>
	Argument #1: dptime_1035 copy-of chain: dptime_1035 [NOT A COPY]
	Argument #2: dptime_1035 copy-of chain: dptime_1035 [NOT A COPY]
PHI node ptime_1475 copy-of chain: ptime_1475 -> dptime_1035 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>
	Argument #1: dmaxptime_1005 copy-of chain: dmaxptime_1005 [NOT A COPY]
	Argument #2: dmaxptime_1005 copy-of chain: dmaxptime_1005 [NOT A COPY]
PHI node maxptime_1470 copy-of chain: maxptime_1470 -> dmaxptime_1005 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_1118 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_95(435)>
	Argument #1: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #2: got_crypto_95 copy-of chain: got_crypto_95 [NOT A COPY]
PHI node got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44795_509 == 0)

No interesting values produced.
Adding Destination of edge (173 -> 174) to worklist

Adding Destination of edge (173 -> 177) to worklist


Simulating statement (from ssa_edges): if (got_crypto_1118 <= 0)

Simulating statement (from ssa_edges): got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>

Visiting PHI node: got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
PHI node got_crypto_53 copy-of chain: got_crypto_53 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>

Visiting PHI node: maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>
PHI node maxptime_38 copy-of chain: maxptime_38 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>

Visiting PHI node: ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>
PHI node ptime_34 copy-of chain: ptime_34 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 174

Visiting statement:
if (D.44619_510 != 0B)

No interesting values produced.
Adding Destination of edge (174 -> 175) to worklist


Simulating block 175

Visiting statement:
if (D.44800_517 == 0B)

No interesting values produced.
Adding Destination of edge (175 -> 176) to worklist

Adding Destination of edge (175 -> 200) to worklist


Simulating block 176

Simulating block 204

Visiting statement:
if (connection_555 != 0B)

No interesting values produced.
Adding Destination of edge (204 -> 207) to worklist

Adding Destination of edge (204 -> 205) to worklist


Simulating block 205

Visiting statement:
if (connection_554 == 0B)

No interesting values produced.
Adding Destination of edge (205 -> 206) to worklist


Simulating block 206

Simulating block 168

Visiting PHI node: attr_1559 = PHI <attr_506(171), attr_500(167)>
	Argument #0: attr_506 copy-of chain: attr_506 [NOT A COPY]
	Argument #1: attr_500 copy-of chain: attr_500 [NOT A COPY]
PHI node attr_1559 copy-of chain: attr_1559 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 413

Simulating block 393

Visiting PHI node: got_video_crypto_959 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
	Argument #1: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
PHI node got_video_crypto_959 copy-of chain: got_video_crypto_959 -> got_video_crypto_1674 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_906 = PHI <m_idx_953(392), 0(337)>
PHI node m_idx_906 copy-of chain: m_idx_906 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.45267_1025 != 0)

No interesting values produced.
Adding Destination of edge (393 -> 394) to worklist

Adding Destination of edge (393 -> 395) to worklist


Simulating statement (from ssa_edges): if (m_idx_906 != 0)

Simulating statement (from ssa_edges): if (m_idx_906 > j_1067)

Simulating statement (from ssa_edges): m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>

Visiting PHI node: m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
	Argument #1: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
	Argument #2: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
	Argument #11: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
PHI node m_idx_113 copy-of chain: m_idx_113 -> m_idx_1869 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
	Argument #1: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
	Argument #2: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
	Argument #11: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 -> got_video_crypto_1674 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 394
Adding Destination of edge (394 -> 412) to worklist


Simulating block 345

Visiting statement:
if (attr_893 != 0B)

No interesting values produced.
Adding Destination of edge (345 -> 346) to worklist


Simulating block 377

Visiting PHI node: got_video_crypto_960 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_556(340)>
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1674 [COPY]
	Argument #2: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1674 [COPY]
PHI node got_video_crypto_960 copy-of chain: got_video_crypto_960 -> got_video_crypto_1674 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (rm_encoding_979 == 0B)

No interesting values produced.
Adding Destination of edge (377 -> 379) to worklist

Adding Destination of edge (377 -> 378) to worklist


Simulating statement (from ssa_edges): got_video_crypto_959 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>

Visiting PHI node: got_video_crypto_959 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
	Argument #1: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
PHI node got_video_crypto_959 copy-of chain: got_video_crypto_959 -> got_video_crypto_1674 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_556 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>

Visiting PHI node: got_video_crypto_556 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
	Argument #1: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
PHI node got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1674 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 378

Simulating block 379

Visiting PHI node: rm_encoding_137 = PHI <rm_encoding_979(378), ""(377)>
	Argument #0: rm_encoding_979 copy-of chain: rm_encoding_979 [NOT A COPY]
PHI node rm_encoding_137 copy-of chain: rm_encoding_137 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (total_codecs_85 > 0)

No interesting values produced.
Adding Destination of edge (379 -> 380) to worklist

Adding Destination of edge (379 -> 392) to worklist


Simulating block 380

Visiting PHI node: m_idx_910 = PHI <m_idx_109(391), m_idx_819(379)>
	Argument #1: m_idx_819 copy-of chain: m_idx_819 [NOT A COPY]
PHI node m_idx_910 copy-of chain: m_idx_910 -> m_idx_819 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: i_864 = PHI <i_1020(391), 0(379)>
PHI node i_864 copy-of chain: i_864 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.45238_986 != 1)

No interesting values produced.
Adding Destination of edge (380 -> 391) to worklist

Adding Destination of edge (380 -> 381) to worklist


Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_910(380), m_idx_910(382), m_idx_910(389), m_idx_910(388), m_idx_1018(390)>

Visiting PHI node: m_idx_109 = PHI <m_idx_910(380), m_idx_910(382), m_idx_910(389), m_idx_910(388), m_idx_1018(390)>
	Argument #0: m_idx_910 copy-of chain: m_idx_910 -> m_idx_819 [COPY]
PHI node m_idx_109 copy-of chain: m_idx_109 -> m_idx_819 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): m_idx_953 = PHI <m_idx_109(391), m_idx_819(379)>

Visiting PHI node: m_idx_953 = PHI <m_idx_109(391), m_idx_819(379)>
	Argument #1: m_idx_819 copy-of chain: m_idx_819 [NOT A COPY]
PHI node m_idx_953 copy-of chain: m_idx_953 -> m_idx_819 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): m_idx_910 = PHI <m_idx_109(391), m_idx_819(379)>

Visiting PHI node: m_idx_910 = PHI <m_idx_109(391), m_idx_819(379)>
	Argument #1: m_idx_819 copy-of chain: m_idx_819 [NOT A COPY]
PHI node m_idx_910 copy-of chain: m_idx_910 -> m_idx_819 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 381

Visiting statement:
if (D.45241_988 == 0)

No interesting values produced.
Adding Destination of edge (381 -> 382) to worklist

Adding Destination of edge (381 -> 383) to worklist


Simulating block 382

Visiting statement:
if (D.45244_990 != 0)

No interesting values produced.

Simulating block 344

Visiting PHI node: got_video_crypto_57 = PHI <got_video_crypto_1738(341), got_video_crypto_1738(343), 1(430), got_video_crypto_1738(342)>
	Argument #0: got_video_crypto_1738 copy-of chain: got_video_crypto_1738 -> got_video_crypto_1674 [COPY]
	Argument #1: got_video_crypto_1738 copy-of chain: got_video_crypto_1738 -> got_video_crypto_1674 [COPY]
PHI node got_video_crypto_57 copy-of chain: got_video_crypto_57 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (attr_892 != 0B)

No interesting values produced.
Adding Destination of edge (344 -> 341) to worklist

Adding Destination of edge (344 -> 436) to worklist


Simulating statement (from ssa_edges): got_video_crypto_136 = PHI <got_video_crypto_57(344)>

Visiting PHI node: got_video_crypto_136 = PHI <got_video_crypto_57(344)>
PHI node got_video_crypto_136 copy-of chain: got_video_crypto_136 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_video_crypto_1885 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_136(436)>

Visiting PHI node: got_video_crypto_1885 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_136(436)>
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1674 [COPY]
PHI node got_video_crypto_1885 copy-of chain: got_video_crypto_1885 -> got_video_crypto_1674 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): got_video_crypto_1738 = PHI <got_video_crypto_57(344), got_video_crypto_556(340)>

Visiting PHI node: got_video_crypto_1738 = PHI <got_video_crypto_57(344), got_video_crypto_556(340)>
	Argument #0: got_video_crypto_57 copy-of chain: got_video_crypto_57 [NOT A COPY]
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1674 [COPY]
PHI node got_video_crypto_1738 copy-of chain: got_video_crypto_1738 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (got_video_crypto_1885 == 0)

Simulating statement (from ssa_edges): got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 436

Simulating block 341

Visiting PHI node: attr_1850 = PHI <attr_892(344), attr_886(340)>
	Argument #0: attr_892 copy-of chain: attr_892 [NOT A COPY]
	Argument #1: attr_886 copy-of chain: attr_886 [NOT A COPY]
PHI node attr_1850 copy-of chain: attr_1850 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 420
Adding Destination of edge (420 -> 413) to worklist


Simulating block 153

Visiting statement:
if (D.44743_440 != 0)

No interesting values produced.
Adding Destination of edge (153 -> 154) to worklist

Adding Destination of edge (153 -> 156) to worklist


Simulating block 154

Visiting statement:
if (D.44747_443 != 0)

No interesting values produced.
Adding Destination of edge (154 -> 155) to worklist


Simulating block 155

Simulating block 177

Visiting statement:
if (D.44805_520 == 0)

No interesting values produced.
Adding Destination of edge (177 -> 178) to worklist

Adding Destination of edge (177 -> 180) to worklist


Simulating block 178

Visiting statement:
if (D.44619_521 != 0B)

No interesting values produced.
Adding Destination of edge (178 -> 179) to worklist


Simulating block 179

Simulating block 200

Visiting PHI node: ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>
	Argument #0: ptime_1475 copy-of chain: ptime_1475 -> dptime_1035 [COPY]
	Argument #1: ptime_1472 copy-of chain: ptime_1472 [NOT A COPY]
PHI node ptime_34 copy-of chain: ptime_34 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>
	Argument #0: maxptime_1470 copy-of chain: maxptime_1470 -> dmaxptime_1005 [COPY]
	Argument #1: maxptime_1470 copy-of chain: maxptime_1470 -> dmaxptime_1005 [COPY]
	Argument #7: maxptime_1470 copy-of chain: maxptime_1470 -> dmaxptime_1005 [COPY]
PHI node maxptime_38 copy-of chain: maxptime_38 -> dmaxptime_1005 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
	Argument #0: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #1: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #7: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
PHI node got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_1118 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (attr_548 != 0B)

No interesting values produced.
Adding Destination of edge (200 -> 173) to worklist

Adding Destination of edge (200 -> 201) to worklist


Simulating statement (from ssa_edges): ptime_1033 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(167)>

Visiting PHI node: ptime_1033 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(167)>
PHI node ptime_1033 copy-of chain: ptime_1033 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (ptime_1033 == 0)

Simulating statement (from ssa_edges): codec_ms_1883 = PHI <maxptime_1040(221), ptime_1033(222)>

Visiting PHI node: codec_ms_1883 = PHI <maxptime_1040(221), ptime_1033(222)>
PHI node codec_ms_1883 copy-of chain: codec_ms_1883 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (ptime_1033 == 0)

Simulating statement (from ssa_edges): codec_ms_87 = PHI <codec_ms_1883(424), codec_ms_589(224), ptime_1033(223)>

Visiting PHI node: codec_ms_87 = PHI <codec_ms_1883(424), codec_ms_589(224), ptime_1033(223)>
PHI node codec_ms_87 copy-of chain: codec_ms_87 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): ptime_1475 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(435)>

Visiting PHI node: ptime_1475 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(435)>
	Argument #0: ptime_34 copy-of chain: ptime_34 [NOT A COPY]
	Argument #1: dptime_1035 copy-of chain: dptime_1035 [NOT A COPY]
PHI node ptime_1475 copy-of chain: ptime_1475 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_crypto_969 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_1866(167)>

Visiting PHI node: got_crypto_969 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_1866(167)>
PHI node got_crypto_969 copy-of chain: got_crypto_969 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): maxptime_1040 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(167)>

Visiting PHI node: maxptime_1040 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(167)>
PHI node maxptime_1040 copy-of chain: maxptime_1040 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>

Visiting PHI node: maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>
	Argument #0: maxptime_38 copy-of chain: maxptime_38 -> dmaxptime_1005 [COPY]
	Argument #1: dmaxptime_1005 copy-of chain: dmaxptime_1005 [NOT A COPY]
	Argument #2: dmaxptime_1005 copy-of chain: dmaxptime_1005 [NOT A COPY]
PHI node maxptime_1470 copy-of chain: maxptime_1470 -> dmaxptime_1005 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 207

Visiting PHI node: connection_139 = PHI <connection_554(205), connection_555(204)>
	Argument #0: connection_554 copy-of chain: connection_554 [NOT A COPY]
	Argument #1: connection_555 copy-of chain: connection_555 [NOT A COPY]
PHI node connection_139 copy-of chain: connection_139 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (map_559 != 0B)

No interesting values produced.
Adding Destination of edge (207 -> 208) to worklist

Adding Destination of edge (207 -> 272) to worklist


Simulating statement (from ssa_edges): if (maxptime_1040 != 0)

Simulating statement (from ssa_edges): if (maxptime_1040 == 0)

Simulating statement (from ssa_edges): if (D.45025_735 <= maxptime_1040)

Simulating statement (from ssa_edges): codec_ms_1883 = PHI <maxptime_1040(221), ptime_1033(222)>

Visiting PHI node: codec_ms_1883 = PHI <maxptime_1040(221), ptime_1033(222)>
PHI node codec_ms_1883 copy-of chain: codec_ms_1883 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
	Argument #1: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #2: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #3: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #11: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_1866 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 395

Visiting statement:
if (m_idx_906 != 0)

No interesting values produced.
Adding Destination of edge (395 -> 396) to worklist


Simulating block 396

Visiting statement:
if (greedy_47 != 0)

No interesting values produced.
Adding Destination of edge (396 -> 397) to worklist

Adding Destination of edge (396 -> 398) to worklist


Simulating block 397

Simulating block 412

Visiting PHI node: match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
	Argument #1: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #2: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #3: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #11: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #12: match_1800 copy-of chain: match_1800 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_1800 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
	Argument #1: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #2: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #3: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #11: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #12: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 -> best_te_680 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
	Argument #1: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #2: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #3: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #11: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #12: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_1717 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
	Argument #1: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #2: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #3: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #11: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #12: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_1866 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
	Argument #1: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
	Argument #2: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
	Argument #3: got_video_crypto_959 copy-of chain: got_video_crypto_959 -> got_video_crypto_1674 [COPY]
	Argument #11: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
	Argument #12: got_video_crypto_959 copy-of chain: got_video_crypto_959 -> got_video_crypto_1674 [COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 -> got_video_crypto_1674 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
	Argument #1: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #2: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #3: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #11: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #12: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 -> got_audio_1693 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #2: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #3: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #11: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #12: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
	Argument #1: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
	Argument #2: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
PHI node m_idx_113 copy-of chain: m_idx_113 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
	Argument #1: nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
	Argument #2: nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
PHI node nm_idx_121 copy-of chain: nm_idx_121 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 346

Visiting PHI node: attr_619 = PHI <attr_978(376), attr_893(345), attr_62(436)>
	Argument #1: attr_893 copy-of chain: attr_893 [NOT A COPY]
	Argument #2: attr_62 copy-of chain: attr_62 [NOT A COPY]
PHI node attr_619 copy-of chain: attr_619 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_video_crypto_1885 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_136(436)>
	Argument #1: got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1674 [COPY]
	Argument #2: got_video_crypto_136 copy-of chain: got_video_crypto_136 [NOT A COPY]
PHI node got_video_crypto_1885 copy-of chain: got_video_crypto_1885 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.45151_895 == 0)

No interesting values produced.
Adding Destination of edge (346 -> 347) to worklist

Adding Destination of edge (346 -> 348) to worklist


Simulating statement (from ssa_edges): if (got_video_crypto_1885 == 0)

Simulating statement (from ssa_edges): got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 347

Visiting statement:
if (D.44619_896 != 0B)

No interesting values produced.
Adding Destination of edge (347 -> 376) to worklist


Simulating block 392

Visiting PHI node: m_idx_953 = PHI <m_idx_109(391), m_idx_819(379)>
	Argument #1: m_idx_819 copy-of chain: m_idx_819 [NOT A COPY]
PHI node m_idx_953 copy-of chain: m_idx_953 -> m_idx_819 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (map_1021 != 0B)

No interesting values produced.
Adding Destination of edge (392 -> 338) to worklist

Adding Destination of edge (392 -> 393) to worklist


Simulating block 338

Visiting PHI node: got_video_crypto_556 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
	Argument #0: got_video_crypto_960 copy-of chain: got_video_crypto_960 -> got_video_crypto_1674 [COPY]
	Argument #1: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
PHI node got_video_crypto_556 copy-of chain: got_video_crypto_556 -> got_video_crypto_1674 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: map_1620 = PHI <map_1021(392), map_883(337)>
	Argument #0: map_1021 copy-of chain: map_1021 [NOT A COPY]
	Argument #1: map_883 copy-of chain: map_883 [NOT A COPY]
PHI node map_1620 copy-of chain: map_1620 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 391

Visiting PHI node: m_idx_109 = PHI <m_idx_910(380), m_idx_910(382), m_idx_910(389), m_idx_910(388), m_idx_1018(390)>
	Argument #0: m_idx_910 copy-of chain: m_idx_910 -> m_idx_819 [COPY]
	Argument #1: m_idx_910 copy-of chain: m_idx_910 -> m_idx_819 [COPY]
PHI node m_idx_109 copy-of chain: m_idx_109 -> m_idx_819 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (total_codecs_85 > i_1020)

Trying to determine truth value of predicate if (total_codecs_85 > i_1020)
No interesting values produced.
Adding Destination of edge (391 -> 380) to worklist

Adding Destination of edge (391 -> 392) to worklist


Simulating block 383

Visiting statement:
if (D.45255_996 == 0B)

No interesting values produced.
Adding Destination of edge (383 -> 385) to worklist

Adding Destination of edge (383 -> 384) to worklist


Simulating block 384

Visiting statement:
if (D.47957_1503 == 0)

No interesting values produced.
Adding Destination of edge (384 -> 434) to worklist


Simulating block 434

Visiting statement:
if (D.44937_1001 != 0)

No interesting values produced.
Adding Destination of edge (434 -> 387) to worklist


Simulating block 387
Adding Destination of edge (387 -> 388) to worklist


Simulating block 388

Visiting PHI node: vmatch_138 = PHI <vmatch_1009(386), vmatch_1012(387)>
	Argument #1: vmatch_1012 copy-of chain: vmatch_1012 [NOT A COPY]
PHI node vmatch_138 copy-of chain: vmatch_138 -> vmatch_1012 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (vmatch_138 != 0)

No interesting values produced.
Adding Destination of edge (388 -> 389) to worklist

Adding Destination of edge (388 -> 391) to worklist


Simulating block 389

Visiting statement:
if (D.45262_1013 == D.45263_1014)

Trying to determine truth value of predicate if (D.45262_1013 == D.45263_1014)
No interesting values produced.
Adding Destination of edge (389 -> 390) to worklist


Simulating block 390

Simulating block 385

Visiting statement:
if (D.45248_1004 <= 95)

No interesting values produced.
Adding Destination of edge (385 -> 386) to worklist

Adding Destination of edge (385 -> 387) to worklist


Simulating block 386
Adding Destination of edge (386 -> 388) to worklist


Simulating block 388

Visiting PHI node: vmatch_138 = PHI <vmatch_1009(386), vmatch_1012(387)>
	Argument #0: vmatch_1009 copy-of chain: vmatch_1009 [NOT A COPY]
	Argument #1: vmatch_1012 copy-of chain: vmatch_1012 [NOT A COPY]
PHI node vmatch_138 copy-of chain: vmatch_138 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 413

Simulating block 156

Visiting statement:
if (D.44758_451 != 0)

No interesting values produced.
Adding Destination of edge (156 -> 157) to worklist

Adding Destination of edge (156 -> 160) to worklist


Simulating block 157

Visiting statement:
if (D.39032_454 == 0)

No interesting values produced.
Adding Destination of edge (157 -> 158) to worklist


Simulating block 158

Visiting statement:
if (remote_port_430 == D.44753_448)

Trying to determine truth value of predicate if (remote_port_430 == D.44753_448)
No interesting values produced.
Adding Destination of edge (158 -> 159) to worklist


Simulating block 159
Adding Destination of edge (159 -> 162) to worklist


Simulating block 180

Visiting statement:
if (D.44810_525 == 0)

No interesting values produced.
Adding Destination of edge (180 -> 181) to worklist

Adding Destination of edge (180 -> 183) to worklist


Simulating block 181

Visiting statement:
if (D.44619_526 != 0B)

No interesting values produced.
Adding Destination of edge (181 -> 182) to worklist


Simulating block 182
Adding Destination of edge (182 -> 200) to worklist


Simulating block 173

Visiting PHI node: maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>
	Argument #0: maxptime_38 copy-of chain: maxptime_38 -> dmaxptime_1005 [COPY]
	Argument #1: dmaxptime_1005 copy-of chain: dmaxptime_1005 [NOT A COPY]
	Argument #2: dmaxptime_1005 copy-of chain: dmaxptime_1005 [NOT A COPY]
PHI node maxptime_1470 copy-of chain: maxptime_1470 -> dmaxptime_1005 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 201

Simulating block 208

Visiting PHI node: match_1901 = PHI <match_7(271), match_1800(207)>
	Argument #1: match_1800 copy-of chain: match_1800 [NOT A COPY]
PHI node match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: best_te_1898 = PHI <best_te_19(271), best_te_680(207)>
	Argument #1: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
PHI node best_te_1898 copy-of chain: best_te_1898 -> best_te_680 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: cng_pt_1667 = PHI <cng_pt_24(271), cng_pt_1717(207)>
	Argument #1: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
PHI node cng_pt_1667 copy-of chain: cng_pt_1667 -> cng_pt_1717 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: codec_ms_1720 = PHI <codec_ms_91(271), codec_ms_477(207)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_792 = PHI <m_idx_103(271), m_idx_1869(207)>
	Argument #1: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
PHI node m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_1755 = PHI <nm_idx_117(271), nm_idx_1749(207)>
	Argument #1: nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
PHI node nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: map_1728 = PHI <map_711(271), map_559(207)>
	Argument #1: map_559 copy-of chain: map_559 [NOT A COPY]
PHI node map_1728 copy-of chain: map_1728 -> map_559 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (rm_encoding_561 == 0B)

No interesting values produced.
Adding Destination of edge (208 -> 210) to worklist

Adding Destination of edge (208 -> 209) to worklist


Simulating statement (from ssa_edges): nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>

Visiting PHI node: nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
PHI node nm_idx_117 copy-of chain: nm_idx_117 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_901 = PHI <nm_idx_115(269), nm_idx_1755(241)>

Visiting PHI node: nm_idx_901 = PHI <nm_idx_115(269), nm_idx_1755(241)>
PHI node nm_idx_901 copy-of chain: nm_idx_901 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_1139 = PHI <nm_idx_115(269), nm_idx_1755(241)>

Visiting PHI node: nm_idx_1139 = PHI <nm_idx_115(269), nm_idx_1755(241)>
PHI node nm_idx_1139 copy-of chain: nm_idx_1139 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>

Visiting PHI node: m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
PHI node m_idx_103 copy-of chain: m_idx_103 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_102 = PHI <m_idx_100(269), m_idx_792(241)>

Visiting PHI node: m_idx_102 = PHI <m_idx_100(269), m_idx_792(241)>
PHI node m_idx_102 copy-of chain: m_idx_102 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_1487 = PHI <m_idx_100(269), m_idx_792(241)>

Visiting PHI node: m_idx_1487 = PHI <m_idx_100(269), m_idx_792(241)>
PHI node m_idx_1487 copy-of chain: m_idx_1487 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>

Visiting PHI node: codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>
PHI node codec_ms_91 copy-of chain: codec_ms_91 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (cng_pt_1667 == 0)

Simulating statement (from ssa_edges): cng_pt_24 = PHI <cng_pt_1667(213), cng_pt_573(218), cng_pt_1667(212), cng_pt_1667(219), cng_pt_1667(270), cng_pt_573(217)>

Visiting PHI node: cng_pt_24 = PHI <cng_pt_1667(213), cng_pt_573(218), cng_pt_1667(212), cng_pt_1667(219), cng_pt_1667(270), cng_pt_573(217)>
PHI node cng_pt_24 copy-of chain: cng_pt_24 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>

Visiting PHI node: cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>
	Argument #3: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
PHI node cng_pt_1626 copy-of chain: cng_pt_1626 -> cng_pt_1717 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>

Visiting PHI node: cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
	Argument #1: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #2: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #3: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #11: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #12: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_1717 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (best_te_1898 == 0)

Simulating statement (from ssa_edges): best_te_19 = PHI <best_te_568(213), best_te_1898(218), best_te_1898(212), best_te_1898(219), best_te_1898(270), best_te_1898(217)>

Visiting PHI node: best_te_19 = PHI <best_te_568(213), best_te_1898(218), best_te_1898(212), best_te_1898(219), best_te_1898(270), best_te_1898(217)>
PHI node best_te_19 copy-of chain: best_te_19 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>

Visiting PHI node: best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>
	Argument #3: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
PHI node best_te_1624 copy-of chain: best_te_1624 -> best_te_680 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (best_te_1624 == 0)

Simulating statement (from ssa_edges): best_te_1860 = PHI <best_te_833(315), best_te_1624(312)>

Visiting PHI node: best_te_1860 = PHI <best_te_833(315), best_te_1624(312)>
PHI node best_te_1860 copy-of chain: best_te_1860 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (match_1901 != 0)

Simulating statement (from ssa_edges): match_7 = PHI <match_1901(213), match_1901(218), match_1901(212), match_1901(219), 0(270), match_1901(217)>

Visiting PHI node: match_7 = PHI <match_1901(213), match_1901(218), match_1901(212), match_1901(219), 0(270), match_1901(217)>
PHI node match_7 copy-of chain: match_7 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 209

Simulating block 210

Visiting PHI node: rm_encoding_130 = PHI <rm_encoding_561(209), ""(208)>
	Argument #0: rm_encoding_561 copy-of chain: rm_encoding_561 [NOT A COPY]
PHI node rm_encoding_130 copy-of chain: rm_encoding_130 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44848_563 == 0)

No interesting values produced.
Adding Destination of edge (210 -> 211) to worklist

Adding Destination of edge (210 -> 214) to worklist


Simulating block 211

Visiting statement:
if (best_te_1898 == 0)

No interesting values produced.
Adding Destination of edge (211 -> 213) to worklist

Adding Destination of edge (211 -> 212) to worklist


Simulating block 212

Visiting statement:
if (D.44854_564 == D.44855_566)

Trying to determine truth value of predicate if (D.44854_564 == D.44855_566)
No interesting values produced.
Adding Destination of edge (212 -> 271) to worklist


Simulating block 213

Simulating block 272

Visiting PHI node: match_9 = PHI <1(268), match_7(271), 0(270), match_1800(207)>
	Argument #3: match_1800 copy-of chain: match_1800 [NOT A COPY]
PHI node match_9 copy-of chain: match_9 -> match_1800 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: codec_ms_93 = PHI <codec_ms_90(268), codec_ms_91(271), codec_ms_90(270), codec_ms_477(207)>
	Argument #3: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_93 copy-of chain: codec_ms_93 -> codec_ms_477 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_105 = PHI <m_idx_703(268), m_idx_103(271), m_idx_102(270), m_idx_1869(207)>
	Argument #3: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
PHI node m_idx_105 copy-of chain: m_idx_105 -> m_idx_1869 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_119 = PHI <nm_idx_1139(268), nm_idx_117(271), nm_idx_901(270), nm_idx_1749(207)>
	Argument #3: nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
PHI node nm_idx_119 copy-of chain: nm_idx_119 -> nm_idx_1749 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>
	Argument #3: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
PHI node best_te_1624 copy-of chain: best_te_1624 -> best_te_680 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>
	Argument #3: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
PHI node cng_pt_1626 copy-of chain: cng_pt_1626 -> cng_pt_1717 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (D.45004_715 != 0)

No interesting values produced.
Adding Destination of edge (272 -> 273) to worklist

Adding Destination of edge (272 -> 274) to worklist


Simulating statement (from ssa_edges): if (nm_idx_119 > j_736)

Simulating statement (from ssa_edges): nm_idx_841 = PHI <nm_idx_1744(304), nm_idx_119(428)>

Visiting PHI node: nm_idx_841 = PHI <nm_idx_1744(304), nm_idx_119(428)>
PHI node nm_idx_841 copy-of chain: nm_idx_841 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_1744 = PHI <nm_idx_119(282), nm_idx_119(283), 0(273)>

Visiting PHI node: nm_idx_1744 = PHI <nm_idx_119(282), nm_idx_119(283), 0(273)>
PHI node nm_idx_1744 copy-of chain: nm_idx_1744 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_1904 = PHI <0(282), m_idx_105(283), 0(273)>

Visiting PHI node: m_idx_1904 = PHI <0(282), m_idx_105(283), 0(273)>
PHI node m_idx_1904 copy-of chain: m_idx_1904 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_1715 = PHI <m_idx_105(283), 1(281)>

Visiting PHI node: m_idx_1715 = PHI <m_idx_105(283), 1(281)>
PHI node m_idx_1715 copy-of chain: m_idx_1715 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (m_idx_105 != 0)

Simulating statement (from ssa_edges): codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>

Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #2: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #3: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #11: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #12: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_12 = PHI <match_9(282), match_9(283), 0(273)>

Visiting PHI node: match_12 = PHI <match_9(282), match_9(283), 0(273)>
PHI node match_12 copy-of chain: match_12 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 273
Adding Destination of edge (273 -> 304) to worklist


Simulating block 398
Adding Destination of edge (398 -> 399) to worklist


Simulating block 348

Visiting statement:
if (D.45154_898 == 0)

No interesting values produced.
Adding Destination of edge (348 -> 349) to worklist

Adding Destination of edge (348 -> 353) to worklist


Simulating block 349

Visiting statement:
if (D.44619_899 == 0B)

No interesting values produced.
Adding Destination of edge (349 -> 350) to worklist


Simulating block 350

Visiting statement:
if (D.47943_1497 == 0)

No interesting values produced.
Adding Destination of edge (350 -> 431) to worklist


Simulating block 431

Visiting statement:
if (D.45160_902 != 0B)

No interesting values produced.
Adding Destination of edge (431 -> 351) to worklist

Adding Destination of edge (431 -> 352) to worklist


Simulating block 351

Simulating block 376

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
	Argument #0: got_video_crypto_1885 copy-of chain: got_video_crypto_1885 [NOT A COPY]
	Argument #7: got_video_crypto_1885 copy-of chain: got_video_crypto_1885 [NOT A COPY]
	Argument #9: got_video_crypto_1885 copy-of chain: got_video_crypto_1885 [NOT A COPY]
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 -> got_video_crypto_1885 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (attr_978 != 0B)

No interesting values produced.
Adding Destination of edge (376 -> 346) to worklist

Adding Destination of edge (376 -> 377) to worklist


Simulating statement (from ssa_edges): got_video_crypto_960 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_556(340)>

Visiting PHI node: got_video_crypto_960 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_556(340)>
PHI node got_video_crypto_960 copy-of chain: got_video_crypto_960 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 393

Visiting PHI node: got_video_crypto_959 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
PHI node got_video_crypto_959 copy-of chain: got_video_crypto_959 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
	Argument #1: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
	Argument #2: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
	Argument #3: got_video_crypto_959 copy-of chain: got_video_crypto_959 [NOT A COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_video_crypto_959 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>

Simulating statement (from ssa_edges): got_video_crypto_556 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>

Visiting PHI node: got_video_crypto_556 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
	Argument #0: got_video_crypto_960 copy-of chain: got_video_crypto_960 [NOT A COPY]
	Argument #1: got_video_crypto_1674 copy-of chain: got_video_crypto_1674 [NOT A COPY]
PHI node got_video_crypto_556 copy-of chain: got_video_crypto_556 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 380

Visiting PHI node: m_idx_910 = PHI <m_idx_109(391), m_idx_819(379)>
	Argument #0: m_idx_109 copy-of chain: m_idx_109 -> m_idx_819 [COPY]
	Argument #1: m_idx_819 copy-of chain: m_idx_819 [NOT A COPY]
PHI node m_idx_910 copy-of chain: m_idx_910 -> m_idx_819 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 392

Visiting PHI node: m_idx_953 = PHI <m_idx_109(391), m_idx_819(379)>
PHI node m_idx_953 copy-of chain: m_idx_953 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 391

Visiting PHI node: m_idx_109 = PHI <m_idx_910(380), m_idx_910(382), m_idx_910(389), m_idx_910(388), m_idx_1018(390)>
	Argument #0: m_idx_910 copy-of chain: m_idx_910 -> m_idx_819 [COPY]
	Argument #1: m_idx_910 copy-of chain: m_idx_910 -> m_idx_819 [COPY]
	Argument #2: m_idx_910 copy-of chain: m_idx_910 -> m_idx_819 [COPY]
	Argument #3: m_idx_910 copy-of chain: m_idx_910 -> m_idx_819 [COPY]
	Argument #4: m_idx_1018 copy-of chain: m_idx_1018 [NOT A COPY]
PHI node m_idx_109 copy-of chain: m_idx_109 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_910 = PHI <m_idx_109(391), m_idx_819(379)>

Visiting PHI node: m_idx_910 = PHI <m_idx_109(391), m_idx_819(379)>
	Argument #0: m_idx_109 copy-of chain: m_idx_109 [NOT A COPY]
	Argument #1: m_idx_819 copy-of chain: m_idx_819 [NOT A COPY]
PHI node m_idx_910 copy-of chain: m_idx_910 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 387

Simulating block 160

Visiting statement:
if (D.44768_479 != 0)

No interesting values produced.
Adding Destination of edge (160 -> 161) to worklist


Simulating block 161

Simulating block 162
Adding Destination of edge (162 -> 413) to worklist


Simulating block 183

Visiting statement:
if (got_crypto_1118 <= 0)

No interesting values produced.
Adding Destination of edge (183 -> 184) to worklist


Simulating block 184

Visiting statement:
if (D.44815_530 == 0)

No interesting values produced.
Adding Destination of edge (184 -> 185) to worklist


Simulating block 185

Visiting statement:
if (D.44619_531 == 0B)

No interesting values produced.
Adding Destination of edge (185 -> 186) to worklist


Simulating block 186

Visiting statement:
if (D.47900_1474 == 0)

No interesting values produced.
Adding Destination of edge (186 -> 422) to worklist


Simulating block 422

Visiting statement:
if (D.44822_535 == 0)

No interesting values produced.
Adding Destination of edge (422 -> 187) to worklist

Adding Destination of edge (422 -> 199) to worklist


Simulating block 187

Visiting statement:
if (D.44825_537 != 0B)

No interesting values produced.
Adding Destination of edge (187 -> 188) to worklist

Adding Destination of edge (187 -> 423) to worklist


Simulating block 188

Visiting statement:
if (D.49723_1590 == 0)

No interesting values produced.
Adding Destination of edge (188 -> 197) to worklist

Adding Destination of edge (188 -> 189) to worklist


Simulating block 189

Visiting statement:
if (D.49724_1591 == 0)

No interesting values produced.
Adding Destination of edge (189 -> 190) to worklist


Simulating block 190

Visiting statement:
if (D.49725_1592 == 0)

No interesting values produced.
Adding Destination of edge (190 -> 191) to worklist


Simulating block 191

Visiting statement:
if (D.49726_1593 == 0)

No interesting values produced.
Adding Destination of edge (191 -> 192) to worklist


Simulating block 192

Visiting statement:
if (D.49727_1594 == 0)

No interesting values produced.
Adding Destination of edge (192 -> 193) to worklist


Simulating block 193

Visiting statement:
if (D.49728_1595 == 0)

No interesting values produced.
Adding Destination of edge (193 -> 194) to worklist


Simulating block 194

Visiting statement:
if (D.49729_1596 == 0)

No interesting values produced.
Adding Destination of edge (194 -> 195) to worklist


Simulating block 195

Visiting statement:
if (D.49730_1597 != 0)

No interesting values produced.
Adding Destination of edge (195 -> 196) to worklist


Simulating block 196

Visiting statement:
if (D.49731_1598 != 0)

No interesting values produced.

Simulating block 197

Simulating block 200

Visiting PHI node: maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>
	Argument #0: maxptime_1470 copy-of chain: maxptime_1470 -> dmaxptime_1005 [COPY]
	Argument #1: maxptime_1470 copy-of chain: maxptime_1470 -> dmaxptime_1005 [COPY]
	Argument #2: maxptime_1473 copy-of chain: maxptime_1473 [NOT A COPY]
PHI node maxptime_38 copy-of chain: maxptime_38 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
	Argument #0: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #1: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #2: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #3: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #4: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #5: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #7: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #8: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
PHI node got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_1118 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>

Visiting PHI node: maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>
	Argument #0: maxptime_38 copy-of chain: maxptime_38 [NOT A COPY]
	Argument #1: dmaxptime_1005 copy-of chain: dmaxptime_1005 [NOT A COPY]
PHI node maxptime_1470 copy-of chain: maxptime_1470 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 214

Visiting statement:
if (D.44858_570 == 0)

No interesting values produced.
Adding Destination of edge (214 -> 215) to worklist

Adding Destination of edge (214 -> 219) to worklist


Simulating block 215

Visiting statement:
if (cng_pt_1667 == 0)

No interesting values produced.
Adding Destination of edge (215 -> 216) to worklist


Simulating block 216

Visiting statement:
if (D.44863_571 == 0)

No interesting values produced.
Adding Destination of edge (216 -> 217) to worklist


Simulating block 217

Visiting statement:
if (D.44605_574 != 0B)

No interesting values produced.
Adding Destination of edge (217 -> 218) to worklist


Simulating block 218

Simulating block 271

Visiting PHI node: match_7 = PHI <match_1901(213), match_1901(218), match_1901(212), match_1901(219), 0(270), match_1901(217)>
	Argument #0: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
	Argument #1: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
	Argument #2: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
	Argument #5: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
PHI node match_7 copy-of chain: match_7 -> match_1800 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: best_te_19 = PHI <best_te_568(213), best_te_1898(218), best_te_1898(212), best_te_1898(219), best_te_1898(270), best_te_1898(217)>
	Argument #0: best_te_568 copy-of chain: best_te_568 [NOT A COPY]
	Argument #1: best_te_1898 copy-of chain: best_te_1898 -> best_te_680 [COPY]
PHI node best_te_19 copy-of chain: best_te_19 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: cng_pt_24 = PHI <cng_pt_1667(213), cng_pt_573(218), cng_pt_1667(212), cng_pt_1667(219), cng_pt_1667(270), cng_pt_573(217)>
	Argument #0: cng_pt_1667 copy-of chain: cng_pt_1667 -> cng_pt_1717 [COPY]
	Argument #1: cng_pt_573 copy-of chain: cng_pt_573 [NOT A COPY]
PHI node cng_pt_24 copy-of chain: cng_pt_24 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>
	Argument #0: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #1: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #2: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #5: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
PHI node codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_477 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
	Argument #0: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #1: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #2: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #5: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 -> m_idx_1869 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
	Argument #0: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #1: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #2: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #5: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_1749 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (map_711 != 0B)

No interesting values produced.
Adding Destination of edge (271 -> 208) to worklist

Adding Destination of edge (271 -> 272) to worklist


Simulating statement (from ssa_edges): cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>

Visiting PHI node: cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>
PHI node cng_pt_1626 copy-of chain: cng_pt_1626 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>

Visiting PHI node: cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
	Argument #1: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #2: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #3: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #11: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #12: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_1717 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): cng_pt_1667 = PHI <cng_pt_24(271), cng_pt_1717(207)>

Visiting PHI node: cng_pt_1667 = PHI <cng_pt_24(271), cng_pt_1717(207)>
	Argument #0: cng_pt_24 copy-of chain: cng_pt_24 [NOT A COPY]
	Argument #1: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
PHI node cng_pt_1667 copy-of chain: cng_pt_1667 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>

Visiting PHI node: best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>
PHI node best_te_1624 copy-of chain: best_te_1624 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (best_te_1624 == 0)

Simulating statement (from ssa_edges): best_te_1860 = PHI <best_te_833(315), best_te_1624(312)>

Visiting PHI node: best_te_1860 = PHI <best_te_833(315), best_te_1624(312)>
PHI node best_te_1860 copy-of chain: best_te_1860 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): best_te_1898 = PHI <best_te_19(271), best_te_680(207)>

Visiting PHI node: best_te_1898 = PHI <best_te_19(271), best_te_680(207)>
	Argument #0: best_te_19 copy-of chain: best_te_19 [NOT A COPY]
	Argument #1: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
PHI node best_te_1898 copy-of chain: best_te_1898 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_119 = PHI <nm_idx_1139(268), nm_idx_117(271), nm_idx_901(270), nm_idx_1749(207)>

Visiting PHI node: nm_idx_119 = PHI <nm_idx_1139(268), nm_idx_117(271), nm_idx_901(270), nm_idx_1749(207)>
PHI node nm_idx_119 copy-of chain: nm_idx_119 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_1755 = PHI <nm_idx_117(271), nm_idx_1749(207)>

Visiting PHI node: nm_idx_1755 = PHI <nm_idx_117(271), nm_idx_1749(207)>
	Argument #0: nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_1749 [COPY]
	Argument #1: nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
PHI node nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_105 = PHI <m_idx_703(268), m_idx_103(271), m_idx_102(270), m_idx_1869(207)>

Visiting PHI node: m_idx_105 = PHI <m_idx_703(268), m_idx_103(271), m_idx_102(270), m_idx_1869(207)>
PHI node m_idx_105 copy-of chain: m_idx_105 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_792 = PHI <m_idx_103(271), m_idx_1869(207)>

Visiting PHI node: m_idx_792 = PHI <m_idx_103(271), m_idx_1869(207)>
	Argument #0: m_idx_103 copy-of chain: m_idx_103 -> m_idx_1869 [COPY]
	Argument #1: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
PHI node m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_93 = PHI <codec_ms_90(268), codec_ms_91(271), codec_ms_90(270), codec_ms_477(207)>

Visiting PHI node: codec_ms_93 = PHI <codec_ms_90(268), codec_ms_91(271), codec_ms_90(270), codec_ms_477(207)>
PHI node codec_ms_93 copy-of chain: codec_ms_93 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): codec_ms_1720 = PHI <codec_ms_91(271), codec_ms_477(207)>

Visiting PHI node: codec_ms_1720 = PHI <codec_ms_91(271), codec_ms_477(207)>
	Argument #0: codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_477 [COPY]
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_9 = PHI <1(268), match_7(271), 0(270), match_1800(207)>

Visiting PHI node: match_9 = PHI <1(268), match_7(271), 0(270), match_1800(207)>
PHI node match_9 copy-of chain: match_9 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): match_1901 = PHI <match_7(271), match_1800(207)>

Visiting PHI node: match_1901 = PHI <match_7(271), match_1800(207)>
	Argument #0: match_7 copy-of chain: match_7 -> match_1800 [COPY]
	Argument #1: match_1800 copy-of chain: match_1800 [NOT A COPY]
PHI node match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 274

Visiting statement:
if (D.45009_721 != 0)

No interesting values produced.
Adding Destination of edge (274 -> 275) to worklist

Adding Destination of edge (274 -> 283) to worklist


Simulating statement (from ssa_edges): match_12 = PHI <match_9(282), match_9(283), 0(273)>

Visiting PHI node: match_12 = PHI <match_9(282), match_9(283), 0(273)>
PHI node match_12 copy-of chain: match_12 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (match_12 != 0)

Simulating statement (from ssa_edges): match_1712 = PHI <match_12(304), 1(428)>

Visiting PHI node: match_1712 = PHI <match_12(304), 1(428)>
PHI node match_1712 copy-of chain: match_1712 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>

Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #2: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #3: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #11: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #12: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_1904 = PHI <0(282), m_idx_105(283), 0(273)>

Visiting PHI node: m_idx_1904 = PHI <0(282), m_idx_105(283), 0(273)>
PHI node m_idx_1904 copy-of chain: m_idx_1904 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_1905 = PHI <m_idx_1904(304), m_idx_1715(428)>

Visiting PHI node: m_idx_1905 = PHI <m_idx_1904(304), m_idx_1715(428)>
PHI node m_idx_1905 copy-of chain: m_idx_1905 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>

Visiting PHI node: m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>
PHI node m_idx_1745 copy-of chain: m_idx_1745 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_1715 = PHI <m_idx_105(283), 1(281)>

Visiting PHI node: m_idx_1715 = PHI <m_idx_105(283), 1(281)>
PHI node m_idx_1715 copy-of chain: m_idx_1715 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (m_idx_105 != 0)

Simulating statement (from ssa_edges): if (nm_idx_119 > j_736)

Simulating statement (from ssa_edges): nm_idx_841 = PHI <nm_idx_1744(304), nm_idx_119(428)>

Visiting PHI node: nm_idx_841 = PHI <nm_idx_1744(304), nm_idx_119(428)>
PHI node nm_idx_841 copy-of chain: nm_idx_841 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_1744 = PHI <nm_idx_119(282), nm_idx_119(283), 0(273)>

Visiting PHI node: nm_idx_1744 = PHI <nm_idx_119(282), nm_idx_119(283), 0(273)>
PHI node nm_idx_1744 copy-of chain: nm_idx_1744 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_841 = PHI <nm_idx_1744(304), nm_idx_119(428)>

Visiting PHI node: nm_idx_841 = PHI <nm_idx_1744(304), nm_idx_119(428)>
PHI node nm_idx_841 copy-of chain: nm_idx_841 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>

Visiting PHI node: nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>
PHI node nm_idx_843 copy-of chain: nm_idx_843 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 283

Visiting statement:
if (m_idx_105 != 0)

No interesting values produced.
Adding Destination of edge (283 -> 284) to worklist


Simulating block 275

Visiting PHI node: j_1845 = PHI <j_736(282), 0(274)>
PHI node j_1845 copy-of chain: j_1845 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (near_rate_725 == 0)

No interesting values produced.
Adding Destination of edge (275 -> 276) to worklist

Adding Destination of edge (275 -> 277) to worklist


Simulating statement (from ssa_edges): j_897 = PHI <j_1845(279), j_1845(280)>

Visiting PHI node: j_897 = PHI <j_1845(279), j_1845(280)>
PHI node j_897 copy-of chain: j_897 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 276

Simulating block 304

Visiting statement:
if (match_12 != 0)

No interesting values produced.
Adding Destination of edge (304 -> 305) to worklist

Adding Destination of edge (304 -> 312) to worklist


Simulating block 399

Visiting PHI node: j_1844 = PHI <j_1067(402), 0(398)>
PHI node j_1844 copy-of chain: j_1844 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (j_1844 == 0)

No interesting values produced.
Adding Destination of edge (399 -> 400) to worklist

Adding Destination of edge (399 -> 402) to worklist


Simulating block 353

Visiting statement:
if (D.45168_907 == 0)

No interesting values produced.
Adding Destination of edge (353 -> 354) to worklist

Adding Destination of edge (353 -> 359) to worklist


Simulating block 354

Visiting statement:
if (D.44619_908 != 0B)

No interesting values produced.
Adding Destination of edge (354 -> 355) to worklist


Simulating block 355

Visiting statement:
if (D.45174_911 == 49)

No interesting values produced.
Adding Destination of edge (355 -> 356) to worklist


Simulating block 356

Visiting statement:
if (D.45185_921 == 0)

No interesting values produced.
Adding Destination of edge (356 -> 357) to worklist


Simulating block 357

Visiting statement:
if (D.45214_958 == 0B)

No interesting values produced.
Adding Destination of edge (357 -> 358) to worklist

Adding Destination of edge (357 -> 376) to worklist


Simulating block 358

Simulating block 352

Simulating block 346

Simulating block 377

Simulating block 413

Simulating block 199
Adding Destination of edge (199 -> 200) to worklist


Simulating block 423

Visiting statement:
if (D.44831_542 != 0)

No interesting values produced.
Adding Destination of edge (423 -> 198) to worklist

Adding Destination of edge (423 -> 199) to worklist


Simulating block 198
Adding Destination of edge (198 -> 413) to worklist


Simulating block 219

Visiting statement:
if (match_1901 != 0)

No interesting values produced.
Adding Destination of edge (219 -> 271) to worklist

Adding Destination of edge (219 -> 220) to worklist


Simulating block 220

Visiting statement:
if (maxptime_1040 != 0)

No interesting values produced.
Adding Destination of edge (220 -> 221) to worklist

Adding Destination of edge (220 -> 223) to worklist


Simulating block 221

Visiting statement:
if (D.44879_584 != 0)

No interesting values produced.
Adding Destination of edge (221 -> 424) to worklist

Adding Destination of edge (221 -> 222) to worklist


Simulating block 222

Simulating block 208

Visiting PHI node: match_1901 = PHI <match_7(271), match_1800(207)>
	Argument #0: match_7 copy-of chain: match_7 -> match_1800 [COPY]
	Argument #1: match_1800 copy-of chain: match_1800 [NOT A COPY]
PHI node match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: codec_ms_1720 = PHI <codec_ms_91(271), codec_ms_477(207)>
	Argument #0: codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_477 [COPY]
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_792 = PHI <m_idx_103(271), m_idx_1869(207)>
	Argument #0: m_idx_103 copy-of chain: m_idx_103 -> m_idx_1869 [COPY]
	Argument #1: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
PHI node m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_1755 = PHI <nm_idx_117(271), nm_idx_1749(207)>
	Argument #0: nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_1749 [COPY]
	Argument #1: nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
PHI node nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: map_1728 = PHI <map_711(271), map_559(207)>
	Argument #0: map_711 copy-of chain: map_711 [NOT A COPY]
	Argument #1: map_559 copy-of chain: map_559 [NOT A COPY]
PHI node map_1728 copy-of chain: map_1728 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 272

Simulating block 284

Visiting PHI node: m_idx_1715 = PHI <m_idx_105(283), 1(281)>
	Argument #0: m_idx_105 copy-of chain: m_idx_105 [NOT A COPY]
PHI node m_idx_1715 copy-of chain: m_idx_1715 -> m_idx_105 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (greedy_47 != 0)

No interesting values produced.
Adding Destination of edge (284 -> 285) to worklist

Adding Destination of edge (284 -> 286) to worklist


Simulating statement (from ssa_edges): m_idx_1905 = PHI <m_idx_1904(304), m_idx_1715(428)>

Visiting PHI node: m_idx_1905 = PHI <m_idx_1904(304), m_idx_1715(428)>
	Argument #0: m_idx_1904 copy-of chain: m_idx_1904 [NOT A COPY]
PHI node m_idx_1905 copy-of chain: m_idx_1905 -> m_idx_1904 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>

Visiting PHI node: m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>
	Argument #0: m_idx_1904 copy-of chain: m_idx_1904 [NOT A COPY]
PHI node m_idx_1745 copy-of chain: m_idx_1745 -> m_idx_1904 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (m_idx_1715 > 0)

Simulating statement (from ssa_edges): if (j_807 < m_idx_1715)

Simulating block 285

Simulating block 277

Visiting PHI node: near_rate_145 = PHI <near_rate_729(276), near_rate_725(275)>
	Argument #0: near_rate_729 copy-of chain: near_rate_729 [NOT A COPY]
	Argument #1: near_rate_725 copy-of chain: near_rate_725 [NOT A COPY]
PHI node near_rate_145 copy-of chain: near_rate_145 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (num_731 != 0)

No interesting values produced.
Adding Destination of edge (277 -> 278) to worklist

Adding Destination of edge (277 -> 279) to worklist


Simulating block 278

Simulating block 305

Visiting PHI node: match_1712 = PHI <match_12(304), 1(428)>
	Argument #0: match_12 copy-of chain: match_12 [NOT A COPY]
PHI node match_1712 copy-of chain: match_1712 -> match_12 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_1905 = PHI <m_idx_1904(304), m_idx_1715(428)>
	Argument #0: m_idx_1904 copy-of chain: m_idx_1904 [NOT A COPY]
PHI node m_idx_1905 copy-of chain: m_idx_1905 -> m_idx_1904 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_841 = PHI <nm_idx_1744(304), nm_idx_119(428)>
	Argument #0: nm_idx_1744 copy-of chain: nm_idx_1744 [NOT A COPY]
PHI node nm_idx_841 copy-of chain: nm_idx_841 -> nm_idx_1744 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.47933_1489 != 0)

No interesting values produced.
Adding Destination of edge (305 -> 306) to worklist

Adding Destination of edge (305 -> 310) to worklist


Simulating statement (from ssa_edges): nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>

Visiting PHI node: nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>
	Argument #0: nm_idx_1744 copy-of chain: nm_idx_1744 [NOT A COPY]
PHI node nm_idx_843 copy-of chain: nm_idx_843 -> nm_idx_1744 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): match_13 = PHI <0(304), match_1712(311), 0(310)>

Visiting PHI node: match_13 = PHI <0(304), match_1712(311), 0(310)>
PHI node match_13 copy-of chain: match_13 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 306

Visiting statement:
if (D.47932_1490 != 0B)

No interesting values produced.
Adding Destination of edge (306 -> 307) to worklist


Simulating statement (from ssa_edges): match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>

Visiting PHI node: match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
	Argument #1: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #2: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #3: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #11: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #12: match_1800 copy-of chain: match_1800 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_1800 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 307

Visiting statement:
if (D.47931_1491 != 0B)

No interesting values produced.
Adding Destination of edge (307 -> 308) to worklist


Simulating block 308

Visiting statement:
if (D.47930_1492 != 0B)

No interesting values produced.
Adding Destination of edge (308 -> 309) to worklist


Simulating block 309

Simulating block 312

Visiting PHI node: got_audio_65 = PHI <0(304), 1(311), 0(310)>
PHI node got_audio_65 copy-of chain: got_audio_65 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>
	Argument #0: m_idx_1904 copy-of chain: m_idx_1904 [NOT A COPY]
PHI node m_idx_1745 copy-of chain: m_idx_1745 -> m_idx_1904 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>
	Argument #0: nm_idx_1744 copy-of chain: nm_idx_1744 [NOT A COPY]
PHI node nm_idx_843 copy-of chain: nm_idx_843 -> nm_idx_1744 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (best_te_1624 == 0)

No interesting values produced.
Adding Destination of edge (312 -> 313) to worklist

Adding Destination of edge (312 -> 316) to worklist


Simulating statement (from ssa_edges): got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>

Visiting PHI node: got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
	Argument #1: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #2: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #3: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #11: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #12: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 -> got_audio_1693 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 400

Visiting statement:
if (D.45287_1046 != 0B)

No interesting values produced.
Adding Destination of edge (400 -> 401) to worklist


Simulating block 401

Simulating block 402

Visiting statement:
if (m_idx_906 > j_1067)

Trying to determine truth value of predicate if (m_idx_906 > j_1067)
No interesting values produced.
Adding Destination of edge (402 -> 399) to worklist

Adding Destination of edge (402 -> 403) to worklist


Simulating block 403

Visiting statement:
if (match_1800 == 0)

No interesting values produced.
Adding Destination of edge (403 -> 405) to worklist

Adding Destination of edge (403 -> 404) to worklist


Simulating block 404

Simulating block 399

Simulating block 359

Visiting statement:
if (got_video_crypto_1885 == 0)

No interesting values produced.
Adding Destination of edge (359 -> 360) to worklist


Simulating block 360

Visiting statement:
if (D.45219_961 == 0)

No interesting values produced.
Adding Destination of edge (360 -> 361) to worklist


Simulating block 361

Visiting statement:
if (D.44619_962 == 0B)

No interesting values produced.
Adding Destination of edge (361 -> 362) to worklist


Simulating block 362

Visiting statement:
if (D.47950_1500 == 0)

No interesting values produced.
Adding Destination of edge (362 -> 432) to worklist


Simulating block 432

Visiting statement:
if (D.44822_966 == 0)

No interesting values produced.
Adding Destination of edge (432 -> 363) to worklist

Adding Destination of edge (432 -> 375) to worklist


Simulating block 363

Visiting statement:
if (D.45227_968 != 0B)

No interesting values produced.
Adding Destination of edge (363 -> 364) to worklist

Adding Destination of edge (363 -> 433) to worklist


Simulating block 364

Visiting statement:
if (D.49747_1610 == 0)

No interesting values produced.
Adding Destination of edge (364 -> 373) to worklist

Adding Destination of edge (364 -> 365) to worklist


Simulating block 365

Visiting statement:
if (D.49748_1611 == 0)

No interesting values produced.
Adding Destination of edge (365 -> 366) to worklist


Simulating block 366

Visiting statement:
if (D.49749_1612 == 0)

No interesting values produced.
Adding Destination of edge (366 -> 367) to worklist


Simulating block 367

Visiting statement:
if (D.49750_1613 == 0)

No interesting values produced.
Adding Destination of edge (367 -> 368) to worklist


Simulating block 368

Visiting statement:
if (D.49751_1614 == 0)

No interesting values produced.
Adding Destination of edge (368 -> 369) to worklist


Simulating block 369

Visiting statement:
if (D.49752_1615 == 0)

No interesting values produced.
Adding Destination of edge (369 -> 370) to worklist


Simulating block 370

Visiting statement:
if (D.49753_1616 == 0)

No interesting values produced.
Adding Destination of edge (370 -> 371) to worklist


Simulating block 371

Visiting statement:
if (D.49754_1617 != 0)

No interesting values produced.
Adding Destination of edge (371 -> 372) to worklist


Simulating block 372

Visiting statement:
if (D.49755_1618 != 0)

No interesting values produced.

Simulating block 373

Simulating block 376

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
	Argument #0: got_video_crypto_1885 copy-of chain: got_video_crypto_1885 [NOT A COPY]
	Argument #1: got_video_crypto_1885 copy-of chain: got_video_crypto_1885 [NOT A COPY]
	Argument #2: got_video_crypto_1885 copy-of chain: got_video_crypto_1885 [NOT A COPY]
	Argument #3: got_video_crypto_1885 copy-of chain: got_video_crypto_1885 [NOT A COPY]
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 200

Visiting PHI node: got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
	Argument #0: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #1: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #2: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #3: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #4: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #5: got_crypto_1118 copy-of chain: got_crypto_1118 [NOT A COPY]
	Argument #6: got_crypto_547 copy-of chain: got_crypto_547 [NOT A COPY]
PHI node got_crypto_53 copy-of chain: got_crypto_53 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 199

Simulating block 413

Simulating block 271

Visiting PHI node: match_7 = PHI <match_1901(213), match_1901(218), match_1901(212), match_1901(219), 0(270), match_1901(217)>
	Argument #0: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
	Argument #1: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
	Argument #2: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
	Argument #3: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
	Argument #5: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
PHI node match_7 copy-of chain: match_7 -> match_1800 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>
	Argument #0: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #1: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #2: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #3: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #5: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
PHI node codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
	Argument #0: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #1: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #2: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #3: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #5: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 -> m_idx_1869 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
	Argument #0: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #1: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #2: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #3: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #5: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_1749 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 223

Visiting statement:
if (ptime_1033 == 0)

No interesting values produced.
Adding Destination of edge (223 -> 224) to worklist

Adding Destination of edge (223 -> 225) to worklist


Simulating block 224

Simulating block 424

Visiting PHI node: codec_ms_1883 = PHI <maxptime_1040(221), ptime_1033(222)>
	Argument #0: maxptime_1040 copy-of chain: maxptime_1040 [NOT A COPY]
	Argument #1: ptime_1033 copy-of chain: ptime_1033 [NOT A COPY]
PHI node codec_ms_1883 copy-of chain: codec_ms_1883 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): codec_ms_87 = PHI <codec_ms_1883(424), codec_ms_589(224), ptime_1033(223)>

Visiting PHI node: codec_ms_87 = PHI <codec_ms_1883(424), codec_ms_589(224), ptime_1033(223)>
	Argument #0: codec_ms_1883 copy-of chain: codec_ms_1883 [NOT A COPY]
	Argument #1: codec_ms_589 copy-of chain: codec_ms_589 [NOT A COPY]
PHI node codec_ms_87 copy-of chain: codec_ms_87 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): codec_ms_88 = PHI <codec_ms_87(227), codec_ms_87(228), 33(229)>

Visiting PHI node: codec_ms_88 = PHI <codec_ms_87(227), codec_ms_87(228), 33(229)>
PHI node codec_ms_88 copy-of chain: codec_ms_88 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 286

Visiting statement:
if (m_idx_1715 > 0)

No interesting values produced.
Adding Destination of edge (286 -> 287) to worklist

Adding Destination of edge (286 -> 428) to worklist


Simulating block 279

Visiting PHI node: timp_134 = PHI <timp_732(278), near_match_726(277)>
	Argument #0: timp_732 copy-of chain: timp_732 [NOT A COPY]
	Argument #1: near_match_726 copy-of chain: near_match_726 [NOT A COPY]
PHI node timp_134 copy-of chain: timp_134 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (maxptime_1040 == 0)

No interesting values produced.
Adding Destination of edge (279 -> 281) to worklist

Adding Destination of edge (279 -> 280) to worklist


Simulating statement (from ssa_edges): timp_872 = PHI <timp_134(279), timp_134(280)>

Visiting PHI node: timp_872 = PHI <timp_134(279), timp_134(280)>
PHI node timp_872 copy-of chain: timp_872 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 280

Visiting statement:
if (D.45025_735 <= maxptime_1040)

Trying to determine truth value of predicate if (D.45025_735 <= maxptime_1040)
No interesting values produced.
Adding Destination of edge (280 -> 282) to worklist


Simulating block 282

Visiting statement:
if (nm_idx_119 > j_736)

Trying to determine truth value of predicate if (nm_idx_119 > j_736)
No interesting values produced.
Adding Destination of edge (282 -> 275) to worklist

Adding Destination of edge (282 -> 304) to worklist


Simulating block 281

Visiting PHI node: j_897 = PHI <j_1845(279), j_1845(280)>
PHI node j_897 copy-of chain: j_897 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: near_rate.96_869 = PHI <near_rate.96_724(279), near_rate.96_724(280)>
PHI node near_rate.96_869 copy-of chain: near_rate.96_869 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: near_map_863 = PHI <near_map_727(279), near_map_727(280)>
PHI node near_map_863 copy-of chain: near_map_863 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.

Adding Destination of edge (281 -> 284) to worklist


Simulating block 284

Visiting PHI node: m_idx_1715 = PHI <m_idx_105(283), 1(281)>
	Argument #0: m_idx_105 copy-of chain: m_idx_105 [NOT A COPY]
PHI node m_idx_1715 copy-of chain: m_idx_1715 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_1905 = PHI <m_idx_1904(304), m_idx_1715(428)>

Visiting PHI node: m_idx_1905 = PHI <m_idx_1904(304), m_idx_1715(428)>
	Argument #0: m_idx_1904 copy-of chain: m_idx_1904 [NOT A COPY]
PHI node m_idx_1905 copy-of chain: m_idx_1905 -> m_idx_1904 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (j_807 < m_idx_1715)

Simulating block 310

Visiting statement:
if (D.45099_823 == 0)

No interesting values produced.
Adding Destination of edge (310 -> 311) to worklist

Adding Destination of edge (310 -> 312) to worklist


Simulating block 313

Visiting statement:
if (D.45107_826 != 0)

No interesting values produced.
Adding Destination of edge (313 -> 315) to worklist

Adding Destination of edge (313 -> 314) to worklist


Simulating block 314

Visiting statement:
if (D.45109_828 != 0)

No interesting values produced.
Adding Destination of edge (314 -> 321) to worklist


Simulating block 316

Visiting PHI node: best_te_1860 = PHI <best_te_833(315), best_te_1624(312)>
	Argument #1: best_te_1624 copy-of chain: best_te_1624 [NOT A COPY]
PHI node best_te_1860 copy-of chain: best_te_1860 -> best_te_1624 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.45114_834 == 1)

No interesting values produced.
Adding Destination of edge (316 -> 317) to worklist

Adding Destination of edge (316 -> 319) to worklist


Simulating statement (from ssa_edges): best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>

Visiting PHI node: best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
	Argument #1: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #2: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #3: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #11: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #12: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 -> best_te_680 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 317

Visiting statement:
if (D.44605_840 != 0B)

No interesting values produced.
Adding Destination of edge (317 -> 318) to worklist

Adding Destination of edge (317 -> 412) to worklist


Simulating block 318

Simulating block 405

Visiting PHI node: match_14 = PHI <match_1800(404), 1(403)>
	Argument #0: match_1800 copy-of chain: match_1800 [NOT A COPY]
PHI node match_14 copy-of chain: match_14 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.47964_1506 != 0)

No interesting values produced.
Adding Destination of edge (405 -> 406) to worklist

Adding Destination of edge (405 -> 410) to worklist


Simulating statement (from ssa_edges): match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>

Visiting PHI node: match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
	Argument #1: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #2: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #3: match_1800 copy-of chain: match_1800 [NOT A COPY]
	Argument #8: match_13 copy-of chain: match_13 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 406

Visiting statement:
if (D.47963_1507 != 0B)

No interesting values produced.
Adding Destination of edge (406 -> 407) to worklist


Simulating block 407

Visiting statement:
if (D.47962_1508 != 0B)

No interesting values produced.
Adding Destination of edge (407 -> 408) to worklist


Simulating block 408

Visiting statement:
if (D.47961_1509 != 0B)

No interesting values produced.
Adding Destination of edge (408 -> 409) to worklist


Simulating block 409

Simulating block 375
Adding Destination of edge (375 -> 376) to worklist


Simulating block 433

Visiting statement:
if (D.44831_973 != 0)

No interesting values produced.
Adding Destination of edge (433 -> 374) to worklist

Adding Destination of edge (433 -> 375) to worklist


Simulating block 374
Adding Destination of edge (374 -> 413) to worklist


Simulating block 225

Visiting statement:
if (csui.173_591 <= 18)

No interesting values produced.
Adding Destination of edge (225 -> 227) to worklist

Adding Destination of edge (225 -> 226) to worklist


Simulating block 226

Simulating block 287

Visiting PHI node: j_1881 = PHI <j_807(303), 0(286)>
PHI node j_1881 copy-of chain: j_1881 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (j_1881 == 0)

No interesting values produced.
Adding Destination of edge (287 -> 288) to worklist

Adding Destination of edge (287 -> 290) to worklist


Simulating block 288

Visiting statement:
if (D.44605_764 != 0B)

No interesting values produced.
Adding Destination of edge (288 -> 289) to worklist


Simulating block 289

Simulating block 428
Adding Destination of edge (428 -> 305) to worklist


Simulating block 275

Simulating block 304

Simulating block 311

Simulating block 312

Visiting PHI node: m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>
	Argument #0: m_idx_1904 copy-of chain: m_idx_1904 [NOT A COPY]
	Argument #1: m_idx_1905 copy-of chain: m_idx_1905 -> m_idx_1904 [COPY]
	Argument #2: m_idx_1905 copy-of chain: m_idx_1905 -> m_idx_1904 [COPY]
PHI node m_idx_1745 copy-of chain: m_idx_1745 -> m_idx_1904 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>
	Argument #0: nm_idx_1744 copy-of chain: nm_idx_1744 [NOT A COPY]
	Argument #1: nm_idx_841 copy-of chain: nm_idx_841 -> nm_idx_1744 [COPY]
	Argument #2: nm_idx_841 copy-of chain: nm_idx_841 -> nm_idx_1744 [COPY]
PHI node nm_idx_843 copy-of chain: nm_idx_843 -> nm_idx_1744 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 315

Visiting statement:
if (best_te_833 != 0)

No interesting values produced.
Adding Destination of edge (315 -> 316) to worklist


Simulating block 321

Visiting statement:
if (D.45124_858 != 0B)

No interesting values produced.
Adding Destination of edge (321 -> 322) to worklist

Adding Destination of edge (321 -> 429) to worklist


Simulating block 319

Visiting statement:
if (D.44605_851 != 0B)

No interesting values produced.
Adding Destination of edge (319 -> 320) to worklist


Simulating block 320

Simulating block 412

Visiting PHI node: best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
	Argument #1: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #2: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #3: best_te_680 copy-of chain: best_te_680 [NOT A COPY]
	Argument #6: best_te_1860 copy-of chain: best_te_1860 -> best_te_1624 [COPY]
PHI node best_te_22 copy-of chain: best_te_22 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
	Argument #1: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #2: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #3: cng_pt_1717 copy-of chain: cng_pt_1717 [NOT A COPY]
	Argument #6: cng_pt_1626 copy-of chain: cng_pt_1626 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
	Argument #1: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #2: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #3: got_crypto_1866 copy-of chain: got_crypto_1866 [NOT A COPY]
	Argument #6: got_crypto_969 copy-of chain: got_crypto_969 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
	Argument #1: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #2: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #3: got_audio_1693 copy-of chain: got_audio_1693 [NOT A COPY]
	Argument #6: got_audio_65 copy-of chain: got_audio_65 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #2: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #3: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
	Argument #6: codec_ms_93 copy-of chain: codec_ms_93 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 410

Visiting statement:
if (D.45316_1092 == 0)

No interesting values produced.
Adding Destination of edge (410 -> 411) to worklist

Adding Destination of edge (410 -> 412) to worklist


Simulating block 411

Simulating block 376

Simulating block 375

Simulating block 413

Simulating block 227

Visiting PHI node: map_bit_rate_1480 = PHI <0(225), map_bit_rate_1479(226)>
PHI node map_bit_rate_1480 copy-of chain: map_bit_rate_1480 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (ptime_1033 == 0)

No interesting values produced.
Adding Destination of edge (227 -> 228) to worklist

Adding Destination of edge (227 -> 230) to worklist


Simulating statement (from ssa_edges): map_bit_rate_131 = PHI <map_bit_rate_1480(235), map_bit_rate_614(236)>

Visiting PHI node: map_bit_rate_131 = PHI <map_bit_rate_1480(235), map_bit_rate_614(236)>
PHI node map_bit_rate_131 copy-of chain: map_bit_rate_131 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): map_bit_rate_132 = PHI <map_bit_rate_1480(233), map_bit_rate_1480(425), map_bit_rate_131(239), map_bit_rate_131(240), 13332(232), 32001(234)>

Visiting PHI node: map_bit_rate_132 = PHI <map_bit_rate_1480(233), map_bit_rate_1480(425), map_bit_rate_131(239), map_bit_rate_131(240), 13332(232), 32001(234)>
PHI node map_bit_rate_132 copy-of chain: map_bit_rate_132 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 228

Visiting statement:
if (D.44890_594 == 0)

No interesting values produced.
Adding Destination of edge (228 -> 229) to worklist


Simulating block 229

Simulating block 290

Visiting statement:
if (D.45056_776 != 0)

No interesting values produced.
Adding Destination of edge (290 -> 291) to worklist

Adding Destination of edge (290 -> 292) to worklist


Simulating block 291

Simulating block 305

Visiting PHI node: match_1712 = PHI <match_12(304), 1(428)>
	Argument #0: match_12 copy-of chain: match_12 [NOT A COPY]
PHI node match_1712 copy-of chain: match_1712 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_1905 = PHI <m_idx_1904(304), m_idx_1715(428)>
	Argument #0: m_idx_1904 copy-of chain: m_idx_1904 [NOT A COPY]
	Argument #1: m_idx_1715 copy-of chain: m_idx_1715 [NOT A COPY]
PHI node m_idx_1905 copy-of chain: m_idx_1905 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_841 = PHI <nm_idx_1744(304), nm_idx_119(428)>
	Argument #0: nm_idx_1744 copy-of chain: nm_idx_1744 [NOT A COPY]
	Argument #1: nm_idx_119 copy-of chain: nm_idx_119 [NOT A COPY]
PHI node nm_idx_841 copy-of chain: nm_idx_841 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>

Visiting PHI node: nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>
	Argument #0: nm_idx_1744 copy-of chain: nm_idx_1744 [NOT A COPY]
	Argument #1: nm_idx_841 copy-of chain: nm_idx_841 [NOT A COPY]
PHI node nm_idx_843 copy-of chain: nm_idx_843 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>

Visiting PHI node: m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>
	Argument #0: m_idx_1904 copy-of chain: m_idx_1904 [NOT A COPY]
	Argument #1: m_idx_1905 copy-of chain: m_idx_1905 [NOT A COPY]
PHI node m_idx_1745 copy-of chain: m_idx_1745 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 316

Visiting PHI node: best_te_1860 = PHI <best_te_833(315), best_te_1624(312)>
	Argument #0: best_te_833 copy-of chain: best_te_833 [NOT A COPY]
	Argument #1: best_te_1624 copy-of chain: best_te_1624 [NOT A COPY]
PHI node best_te_1860 copy-of chain: best_te_1860 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 322

Visiting statement:
if (D.49735_1600 == 0)

No interesting values produced.
Adding Destination of edge (322 -> 331) to worklist

Adding Destination of edge (322 -> 323) to worklist


Simulating block 323

Visiting statement:
if (D.49736_1601 == 0)

No interesting values produced.
Adding Destination of edge (323 -> 324) to worklist


Simulating block 324

Visiting statement:
if (D.49737_1602 == 0)

No interesting values produced.
Adding Destination of edge (324 -> 325) to worklist


Simulating block 325

Visiting statement:
if (D.49738_1603 == 0)

No interesting values produced.
Adding Destination of edge (325 -> 326) to worklist


Simulating block 326

Visiting statement:
if (D.49739_1604 == 0)

No interesting values produced.
Adding Destination of edge (326 -> 327) to worklist


Simulating block 327

Visiting statement:
if (D.49740_1605 == 0)

No interesting values produced.
Adding Destination of edge (327 -> 328) to worklist


Simulating block 328

Visiting statement:
if (D.49741_1606 == 0)

No interesting values produced.
Adding Destination of edge (328 -> 329) to worklist


Simulating block 329

Visiting statement:
if (D.49742_1607 != 0)

No interesting values produced.
Adding Destination of edge (329 -> 330) to worklist


Simulating block 330

Visiting statement:
if (D.49743_1608 == 0)

No interesting values produced.

Simulating block 429

Simulating block 412

Simulating block 230

Visiting PHI node: codec_ms_88 = PHI <codec_ms_87(227), codec_ms_87(228), 33(229)>
	Argument #0: codec_ms_87 copy-of chain: codec_ms_87 [NOT A COPY]
	Argument #1: codec_ms_87 copy-of chain: codec_ms_87 [NOT A COPY]
PHI node codec_ms_88 copy-of chain: codec_ms_88 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44893_598 == 0B)

No interesting values produced.
Adding Destination of edge (230 -> 232) to worklist

Adding Destination of edge (230 -> 231) to worklist


Simulating statement (from ssa_edges): codec_ms_90 = PHI <codec_ms_88(233), codec_ms_88(425), codec_ms_89(239), codec_ms_89(240), 32(232), 39(234)>

Visiting PHI node: codec_ms_90 = PHI <codec_ms_88(233), codec_ms_88(425), codec_ms_89(239), codec_ms_89(240), 32(232), 39(234)>
PHI node codec_ms_90 copy-of chain: codec_ms_90 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>

Visiting PHI node: codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>
PHI node codec_ms_89 copy-of chain: codec_ms_89 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 231

Visiting statement:
if (D.47915_1481 == 0)

No interesting values produced.
Adding Destination of edge (231 -> 425) to worklist


Simulating block 425

Visiting statement:
if (D.44905_611 == 0)

No interesting values produced.
Adding Destination of edge (425 -> 235) to worklist

Adding Destination of edge (425 -> 241) to worklist


Simulating block 235

Visiting statement:
if (D.44908_612 != 0)

No interesting values produced.
Adding Destination of edge (235 -> 236) to worklist

Adding Destination of edge (235 -> 237) to worklist


Simulating block 236

Simulating block 292

Visiting statement:
if (D.45066_783 != 0B)

No interesting values produced.
Adding Destination of edge (292 -> 293) to worklist

Adding Destination of edge (292 -> 294) to worklist


Simulating block 293

Simulating block 331
Adding Destination of edge (331 -> 412) to worklist


Simulating block 232

Visiting statement:
if (D.44897_601 == 0)

No interesting values produced.
Adding Destination of edge (232 -> 233) to worklist


Simulating block 233

Visiting statement:
if (D.44901_605 == 0)

No interesting values produced.
Adding Destination of edge (233 -> 234) to worklist


Simulating block 234

Simulating block 241

Visiting PHI node: codec_ms_90 = PHI <codec_ms_88(233), codec_ms_88(425), codec_ms_89(239), codec_ms_89(240), 32(232), 39(234)>
	Argument #0: codec_ms_88 copy-of chain: codec_ms_88 [NOT A COPY]
	Argument #1: codec_ms_88 copy-of chain: codec_ms_88 [NOT A COPY]
PHI node codec_ms_90 copy-of chain: codec_ms_90 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: fmtp_remote_codec_rate_99 = PHI <0(233), 0(425), 0(239), fmtp_remote_codec_rate_618(240), 0(232), 0(234)>
PHI node fmtp_remote_codec_rate_99 copy-of chain: fmtp_remote_codec_rate_99 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: map_bit_rate_132 = PHI <map_bit_rate_1480(233), map_bit_rate_1480(425), map_bit_rate_131(239), map_bit_rate_131(240), 13332(232), 32001(234)>
	Argument #0: map_bit_rate_1480 copy-of chain: map_bit_rate_1480 [NOT A COPY]
	Argument #1: map_bit_rate_1480 copy-of chain: map_bit_rate_1480 [NOT A COPY]
PHI node map_bit_rate_132 copy-of chain: map_bit_rate_132 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44999_1152 != 0)

No interesting values produced.
Adding Destination of edge (241 -> 242) to worklist

Adding Destination of edge (241 -> 270) to worklist


Simulating statement (from ssa_edges): if (fmtp_remote_codec_rate_99 != 0)

Simulating statement (from ssa_edges): remote_codec_rate_96 = PHI <remote_codec_rate_1493(246), remote_codec_rate_1493(251), fmtp_remote_codec_rate_99(250)>

Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_1493(246), remote_codec_rate_1493(251), fmtp_remote_codec_rate_99(250)>
PHI node remote_codec_rate_96 copy-of chain: remote_codec_rate_96 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>

Visiting PHI node: codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>
	Argument #0: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #1: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #2: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #3: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #5: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
PHI node codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_477 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 237

Visiting PHI node: map_bit_rate_131 = PHI <map_bit_rate_1480(235), map_bit_rate_614(236)>
	Argument #0: map_bit_rate_1480 copy-of chain: map_bit_rate_1480 [NOT A COPY]
	Argument #1: map_bit_rate_614 copy-of chain: map_bit_rate_614 [NOT A COPY]
PHI node map_bit_rate_131 copy-of chain: map_bit_rate_131 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44911_615 != 0)

No interesting values produced.
Adding Destination of edge (237 -> 238) to worklist

Adding Destination of edge (237 -> 239) to worklist


Simulating block 238

Simulating block 294

Visiting PHI node: D.47922_146 = PHI <D.47922_1485(293), 1(292)>
	Argument #0: D.47922_1485 copy-of chain: D.47922_1485 [NOT A COPY]
PHI node D.47922_146 copy-of chain: D.47922_146 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.45070_788 == 0)

No interesting values produced.
Adding Destination of edge (294 -> 295) to worklist

Adding Destination of edge (294 -> 302) to worklist


Simulating statement (from ssa_edges): if (D.47922_146 == 1)

Simulating block 295

Visiting statement:
if (D.47922_146 == 1)

No interesting values produced.
Adding Destination of edge (295 -> 296) to worklist

Adding Destination of edge (295 -> 297) to worklist


Simulating block 296
Adding Destination of edge (296 -> 298) to worklist


Simulating block 298

Visiting statement:
if (D.45079_790 == 0B)

No interesting values produced.
Adding Destination of edge (298 -> 301) to worklist

Adding Destination of edge (298 -> 299) to worklist


Simulating block 299

Visiting statement:
if (D.47926_1486 == 0)

No interesting values produced.
Adding Destination of edge (299 -> 427) to worklist


Simulating block 427

Visiting statement:
if (D.45082_793 != 0B)

No interesting values produced.
Adding Destination of edge (427 -> 300) to worklist


Simulating block 300
Adding Destination of edge (300 -> 303) to worklist


Simulating block 301

Simulating block 412

Simulating block 242

Visiting PHI node: remote_codec_rate_1493 = PHI <remote_codec_rate_97(269), remote_codec_rate_596(241)>
	Argument #1: remote_codec_rate_596 copy-of chain: remote_codec_rate_596 [NOT A COPY]
PHI node remote_codec_rate_1493 copy-of chain: remote_codec_rate_1493 -> remote_codec_rate_596 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_1487 = PHI <m_idx_100(269), m_idx_792(241)>
	Argument #1: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
PHI node m_idx_1487 copy-of chain: m_idx_1487 -> m_idx_1869 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_1139 = PHI <nm_idx_115(269), nm_idx_1755(241)>
	Argument #1: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
PHI node nm_idx_1139 copy-of chain: nm_idx_1139 -> nm_idx_1749 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: i_1622 = PHI <i_710(269), 0(241)>
PHI node i_1622 copy-of chain: i_1622 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44921_633 != 0)

No interesting values produced.
Adding Destination of edge (242 -> 269) to worklist

Adding Destination of edge (242 -> 243) to worklist


Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
	Argument #0: nm_idx_1139 copy-of chain: nm_idx_1139 -> nm_idx_1749 [COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1749 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): nm_idx_901 = PHI <nm_idx_115(269), nm_idx_1755(241)>

Visiting PHI node: nm_idx_901 = PHI <nm_idx_115(269), nm_idx_1755(241)>
	Argument #1: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
PHI node nm_idx_901 copy-of chain: nm_idx_901 -> nm_idx_1749 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>

Visiting PHI node: nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
	Argument #0: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #1: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #2: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #3: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #5: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_1749 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_1139 = PHI <nm_idx_115(269), nm_idx_1755(241)>

Visiting PHI node: nm_idx_1139 = PHI <nm_idx_115(269), nm_idx_1755(241)>
	Argument #1: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
PHI node nm_idx_1139 copy-of chain: nm_idx_1139 -> nm_idx_1749 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>

Visiting PHI node: m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>
	Argument #0: m_idx_1487 copy-of chain: m_idx_1487 -> m_idx_1869 [COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 -> m_idx_1869 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): m_idx_102 = PHI <m_idx_100(269), m_idx_792(241)>

Visiting PHI node: m_idx_102 = PHI <m_idx_100(269), m_idx_792(241)>
	Argument #1: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
PHI node m_idx_102 copy-of chain: m_idx_102 -> m_idx_1869 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (m_idx_102 > 29)

Simulating statement (from ssa_edges): m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>

Visiting PHI node: m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
	Argument #0: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #1: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #2: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #3: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #5: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 -> m_idx_1869 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_1487 = PHI <m_idx_100(269), m_idx_792(241)>

Visiting PHI node: m_idx_1487 = PHI <m_idx_100(269), m_idx_792(241)>
	Argument #1: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
PHI node m_idx_1487 copy-of chain: m_idx_1487 -> m_idx_1869 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>
	Argument #0: remote_codec_rate_1493 copy-of chain: remote_codec_rate_1493 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): remote_codec_rate_1493 = PHI <remote_codec_rate_97(269), remote_codec_rate_596(241)>

Visiting PHI node: remote_codec_rate_1493 = PHI <remote_codec_rate_97(269), remote_codec_rate_596(241)>
	Argument #1: remote_codec_rate_596 copy-of chain: remote_codec_rate_596 [NOT A COPY]
PHI node remote_codec_rate_1493 copy-of chain: remote_codec_rate_1493 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (remote_codec_rate_1493 == codec_rate_632)

Simulating statement (from ssa_edges): remote_codec_rate_96 = PHI <remote_codec_rate_1493(246), remote_codec_rate_1493(251), fmtp_remote_codec_rate_99(250)>

Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_1493(246), remote_codec_rate_1493(251), fmtp_remote_codec_rate_99(250)>
PHI node remote_codec_rate_96 copy-of chain: remote_codec_rate_96 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 243

Visiting statement:
if (D.44889_642 == 0B)

No interesting values produced.
Adding Destination of edge (243 -> 245) to worklist

Adding Destination of edge (243 -> 244) to worklist


Simulating block 244

Visiting statement:
if (D.47919_1483 == 0)

No interesting values produced.
Adding Destination of edge (244 -> 426) to worklist


Simulating block 426

Visiting statement:
if (D.44937_647 != 0)

No interesting values produced.
Adding Destination of edge (426 -> 247) to worklist


Simulating block 270

Visiting PHI node: m_idx_102 = PHI <m_idx_100(269), m_idx_792(241)>
	Argument #1: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
PHI node m_idx_102 copy-of chain: m_idx_102 -> m_idx_1869 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_901 = PHI <nm_idx_115(269), nm_idx_1755(241)>
	Argument #1: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
PHI node nm_idx_901 copy-of chain: nm_idx_901 -> nm_idx_1749 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (m_idx_102 > 29)

No interesting values produced.
Adding Destination of edge (270 -> 272) to worklist

Adding Destination of edge (270 -> 271) to worklist


Simulating block 239

Visiting PHI node: codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>
	Argument #0: codec_ms_88 copy-of chain: codec_ms_88 [NOT A COPY]
	Argument #1: codec_ms_617 copy-of chain: codec_ms_617 [NOT A COPY]
PHI node codec_ms_89 copy-of chain: codec_ms_89 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (fmtp_remote_codec_rate_618 != 0)

No interesting values produced.
Adding Destination of edge (239 -> 240) to worklist

Adding Destination of edge (239 -> 241) to worklist


Simulating block 302

Simulating block 297
Adding Destination of edge (297 -> 298) to worklist


Simulating block 298

Simulating block 303

Visiting statement:
if (j_807 < m_idx_1715)

Trying to determine truth value of predicate if (j_807 < m_idx_1715)
No interesting values produced.
Adding Destination of edge (303 -> 287) to worklist

Adding Destination of edge (303 -> 428) to worklist


Simulating block 287

Simulating block 269

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>
	Argument #0: remote_codec_rate_1493 copy-of chain: remote_codec_rate_1493 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>
	Argument #0: m_idx_1487 copy-of chain: m_idx_1487 -> m_idx_1869 [COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 -> m_idx_1869 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
	Argument #0: nm_idx_1139 copy-of chain: nm_idx_1139 -> nm_idx_1749 [COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1749 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (D.44999_625 != 0)

No interesting values produced.
Adding Destination of edge (269 -> 242) to worklist

Adding Destination of edge (269 -> 270) to worklist


Simulating block 242

Visiting PHI node: remote_codec_rate_1493 = PHI <remote_codec_rate_97(269), remote_codec_rate_596(241)>
	Argument #0: remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
	Argument #1: remote_codec_rate_596 copy-of chain: remote_codec_rate_596 [NOT A COPY]
PHI node remote_codec_rate_1493 copy-of chain: remote_codec_rate_1493 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_1487 = PHI <m_idx_100(269), m_idx_792(241)>
	Argument #0: m_idx_100 copy-of chain: m_idx_100 -> m_idx_1869 [COPY]
	Argument #1: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
PHI node m_idx_1487 copy-of chain: m_idx_1487 -> m_idx_1869 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_1139 = PHI <nm_idx_115(269), nm_idx_1755(241)>
	Argument #0: nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1749 [COPY]
	Argument #1: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
PHI node nm_idx_1139 copy-of chain: nm_idx_1139 -> nm_idx_1749 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 245

Visiting statement:
if (D.44924_650 <= 95)

No interesting values produced.
Adding Destination of edge (245 -> 246) to worklist


Simulating block 246
Adding Destination of edge (246 -> 252) to worklist


Simulating block 247

Visiting statement:
if (D.44944_657 == 0)

No interesting values produced.
Adding Destination of edge (247 -> 248) to worklist

Adding Destination of edge (247 -> 250) to worklist


Simulating block 248

Visiting statement:
if (remote_codec_rate_1493 == codec_rate_632)

Trying to determine truth value of predicate if (remote_codec_rate_1493 == codec_rate_632)
No interesting values produced.
Adding Destination of edge (248 -> 249) to worklist


Simulating block 249

Simulating block 272

Simulating block 271

Visiting PHI node: match_7 = PHI <match_1901(213), match_1901(218), match_1901(212), match_1901(219), 0(270), match_1901(217)>
	Argument #0: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
	Argument #1: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
	Argument #2: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
	Argument #3: match_1901 copy-of chain: match_1901 -> match_1800 [COPY]
PHI node match_7 copy-of chain: match_7 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>
	Argument #0: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #1: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #2: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #3: codec_ms_1720 copy-of chain: codec_ms_1720 -> codec_ms_477 [COPY]
	Argument #4: codec_ms_90 copy-of chain: codec_ms_90 [NOT A COPY]
PHI node codec_ms_91 copy-of chain: codec_ms_91 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
	Argument #0: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #1: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #2: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #3: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #4: m_idx_102 copy-of chain: m_idx_102 -> m_idx_1869 [COPY]
	Argument #5: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 -> m_idx_1869 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
	Argument #0: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #1: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #2: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #3: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #4: nm_idx_901 copy-of chain: nm_idx_901 -> nm_idx_1749 [COPY]
	Argument #5: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_1749 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_1720 = PHI <codec_ms_91(271), codec_ms_477(207)>

Visiting PHI node: codec_ms_1720 = PHI <codec_ms_91(271), codec_ms_477(207)>
	Argument #0: codec_ms_91 copy-of chain: codec_ms_91 [NOT A COPY]
	Argument #1: codec_ms_477 copy-of chain: codec_ms_477 [NOT A COPY]
PHI node codec_ms_1720 copy-of chain: codec_ms_1720 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): match_1901 = PHI <match_7(271), match_1800(207)>

Visiting PHI node: match_1901 = PHI <match_7(271), match_1800(207)>
	Argument #0: match_7 copy-of chain: match_7 [NOT A COPY]
	Argument #1: match_1800 copy-of chain: match_1800 [NOT A COPY]
PHI node match_1901 copy-of chain: match_1901 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 240

Simulating block 241

Simulating block 428

Simulating block 270

Visiting PHI node: m_idx_102 = PHI <m_idx_100(269), m_idx_792(241)>
PHI node m_idx_102 copy-of chain: m_idx_102 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_901 = PHI <nm_idx_115(269), nm_idx_1755(241)>
PHI node nm_idx_901 copy-of chain: nm_idx_901 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>

Visiting PHI node: nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
	Argument #0: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #1: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #2: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #3: nm_idx_1755 copy-of chain: nm_idx_1755 -> nm_idx_1749 [COPY]
	Argument #4: nm_idx_901 copy-of chain: nm_idx_901 [NOT A COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_1755 = PHI <nm_idx_117(271), nm_idx_1749(207)>

Visiting PHI node: nm_idx_1755 = PHI <nm_idx_117(271), nm_idx_1749(207)>
	Argument #0: nm_idx_117 copy-of chain: nm_idx_117 [NOT A COPY]
	Argument #1: nm_idx_1749 copy-of chain: nm_idx_1749 [NOT A COPY]
PHI node nm_idx_1755 copy-of chain: nm_idx_1755 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_1139 = PHI <nm_idx_115(269), nm_idx_1755(241)>

Visiting PHI node: nm_idx_1139 = PHI <nm_idx_115(269), nm_idx_1755(241)>
	Argument #0: nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1749 [COPY]
	Argument #1: nm_idx_1755 copy-of chain: nm_idx_1755 [NOT A COPY]
PHI node nm_idx_1139 copy-of chain: nm_idx_1139 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
	Argument #0: nm_idx_1139 copy-of chain: nm_idx_1139 [NOT A COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1139 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>

Visiting PHI node: m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
	Argument #0: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #1: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #2: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #3: m_idx_792 copy-of chain: m_idx_792 -> m_idx_1869 [COPY]
	Argument #4: m_idx_102 copy-of chain: m_idx_102 [NOT A COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_792 = PHI <m_idx_103(271), m_idx_1869(207)>

Visiting PHI node: m_idx_792 = PHI <m_idx_103(271), m_idx_1869(207)>
	Argument #0: m_idx_103 copy-of chain: m_idx_103 [NOT A COPY]
	Argument #1: m_idx_1869 copy-of chain: m_idx_1869 [NOT A COPY]
PHI node m_idx_792 copy-of chain: m_idx_792 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_1487 = PHI <m_idx_100(269), m_idx_792(241)>

Visiting PHI node: m_idx_1487 = PHI <m_idx_100(269), m_idx_792(241)>
	Argument #0: m_idx_100 copy-of chain: m_idx_100 -> m_idx_1869 [COPY]
	Argument #1: m_idx_792 copy-of chain: m_idx_792 [NOT A COPY]
PHI node m_idx_1487 copy-of chain: m_idx_1487 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>

Visiting PHI node: m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>
	Argument #0: m_idx_1487 copy-of chain: m_idx_1487 [NOT A COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 -> m_idx_1487 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating block 252

Visiting PHI node: match_1 = PHI <match_655(246), match_661(251), match_661(250)>
	Argument #0: match_655 copy-of chain: match_655 [NOT A COPY]
PHI node match_1 copy-of chain: match_1 -> match_655 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_1493(246), remote_codec_rate_1493(251), fmtp_remote_codec_rate_99(250)>
	Argument #0: remote_codec_rate_1493 copy-of chain: remote_codec_rate_1493 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_96 copy-of chain: remote_codec_rate_96 -> remote_codec_rate_596 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.44952_665 != 0)

No interesting values produced.
Adding Destination of edge (252 -> 253) to worklist

Adding Destination of edge (252 -> 256) to worklist


Simulating statement (from ssa_edges): if (remote_codec_rate_96 != codec_rate_632)

Simulating statement (from ssa_edges): remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>
	Argument #0: remote_codec_rate_1493 copy-of chain: remote_codec_rate_1493 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_2 = PHI <match_1(252), 1(253), 1(254), 1(255)>

Visiting PHI node: match_2 = PHI <match_1(252), 1(253), 1(254), 1(255)>
	Argument #0: match_1 copy-of chain: match_1 -> match_655 [COPY]
PHI node match_2 copy-of chain: match_2 -> match_655 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (match_2 != 0)

Simulating block 253

Visiting statement:
if (D.44957_668 != 0)

No interesting values produced.
Adding Destination of edge (253 -> 254) to worklist


Simulating block 254

Visiting statement:
if (D.44960_670 != 0)

No interesting values produced.
Adding Destination of edge (254 -> 255) to worklist


Simulating block 255

Visiting statement:
if (D.44963_672 != 0)

No interesting values produced.
Adding Destination of edge (255 -> 269) to worklist


Simulating block 250

Visiting PHI node: iftmp.93_144 = PHI <iftmp.93_765(249), 0(247), 1(248)>
	Argument #0: iftmp.93_765 copy-of chain: iftmp.93_765 [NOT A COPY]
PHI node iftmp.93_144 copy-of chain: iftmp.93_144 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (fmtp_remote_codec_rate_99 != 0)

No interesting values produced.
Adding Destination of edge (250 -> 252) to worklist

Adding Destination of edge (250 -> 251) to worklist


Simulating block 251

Simulating block 252

Visiting PHI node: match_1 = PHI <match_655(246), match_661(251), match_661(250)>
	Argument #0: match_655 copy-of chain: match_655 [NOT A COPY]
	Argument #1: match_661 copy-of chain: match_661 [NOT A COPY]
PHI node match_1 copy-of chain: match_1 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_1493(246), remote_codec_rate_1493(251), fmtp_remote_codec_rate_99(250)>
	Argument #0: remote_codec_rate_1493 copy-of chain: remote_codec_rate_1493 -> remote_codec_rate_596 [COPY]
	Argument #1: remote_codec_rate_1493 copy-of chain: remote_codec_rate_1493 -> remote_codec_rate_596 [COPY]
	Argument #2: fmtp_remote_codec_rate_99 copy-of chain: fmtp_remote_codec_rate_99 [NOT A COPY]
PHI node remote_codec_rate_96 copy-of chain: remote_codec_rate_96 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (remote_codec_rate_96 != codec_rate_632)

Simulating statement (from ssa_edges): remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>
	Argument #0: remote_codec_rate_1493 copy-of chain: remote_codec_rate_1493 -> remote_codec_rate_596 [COPY]
	Argument #5: remote_codec_rate_96 copy-of chain: remote_codec_rate_96 [NOT A COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): remote_codec_rate_1493 = PHI <remote_codec_rate_97(269), remote_codec_rate_596(241)>

Visiting PHI node: remote_codec_rate_1493 = PHI <remote_codec_rate_97(269), remote_codec_rate_596(241)>
	Argument #0: remote_codec_rate_97 copy-of chain: remote_codec_rate_97 [NOT A COPY]
	Argument #1: remote_codec_rate_596 copy-of chain: remote_codec_rate_596 [NOT A COPY]
PHI node remote_codec_rate_1493 copy-of chain: remote_codec_rate_1493 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): match_2 = PHI <match_1(252), 1(253), 1(254), 1(255)>

Visiting PHI node: match_2 = PHI <match_1(252), 1(253), 1(254), 1(255)>
	Argument #0: match_1 copy-of chain: match_1 [NOT A COPY]
PHI node match_2 copy-of chain: match_2 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (match_2 != 0)

Simulating block 256

Visiting statement:
if (D.44969_676 != 0)

No interesting values produced.
Adding Destination of edge (256 -> 257) to worklist

Adding Destination of edge (256 -> 261) to worklist


Simulating block 257

Visiting statement:
if (D.44974_679 != 0)

No interesting values produced.
Adding Destination of edge (257 -> 258) to worklist

Adding Destination of edge (257 -> 262) to worklist


Simulating block 258

Visiting statement:
if (D.44977_681 == 0)

No interesting values produced.
Adding Destination of edge (258 -> 260) to worklist

Adding Destination of edge (258 -> 259) to worklist


Simulating block 259

Visiting statement:
if (D.44979_683 == 0)

No interesting values produced.

Simulating block 260

Simulating block 269

Visiting PHI node: m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>
	Argument #0: m_idx_1487 copy-of chain: m_idx_1487 [NOT A COPY]
	Argument #1: m_idx_1487 copy-of chain: m_idx_1487 [NOT A COPY]
	Argument #5: m_idx_1487 copy-of chain: m_idx_1487 [NOT A COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 -> m_idx_1487 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
	Argument #0: nm_idx_1139 copy-of chain: nm_idx_1139 [NOT A COPY]
	Argument #1: nm_idx_1139 copy-of chain: nm_idx_1139 [NOT A COPY]
	Argument #5: nm_idx_1139 copy-of chain: nm_idx_1139 [NOT A COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1139 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 261

Visiting statement:
if (match_2 != 0)

No interesting values produced.
Adding Destination of edge (261 -> 269) to worklist


Simulating block 262

Visiting statement:
if (scrooge_80 != 0)

No interesting values produced.
Adding Destination of edge (262 -> 263) to worklist

Adding Destination of edge (262 -> 264) to worklist


Simulating block 263
Adding Destination of edge (263 -> 268) to worklist


Simulating block 268

Visiting statement:
if (m_idx_703 > 29)

No interesting values produced.
Adding Destination of edge (268 -> 272) to worklist


Simulating block 272

Simulating block 269

Visiting PHI node: m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>
	Argument #0: m_idx_1487 copy-of chain: m_idx_1487 [NOT A COPY]
	Argument #1: m_idx_1487 copy-of chain: m_idx_1487 [NOT A COPY]
	Argument #3: m_idx_703 copy-of chain: m_idx_703 [NOT A COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
	Argument #0: nm_idx_1139 copy-of chain: nm_idx_1139 [NOT A COPY]
	Argument #1: nm_idx_1139 copy-of chain: nm_idx_1139 [NOT A COPY]
	Argument #3: nm_idx_1139 copy-of chain: nm_idx_1139 [NOT A COPY]
	Argument #4: nm_idx_1139 copy-of chain: nm_idx_1139 [NOT A COPY]
	Argument #5: nm_idx_1139 copy-of chain: nm_idx_1139 [NOT A COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_1139 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 264

Visiting statement:
if (D.44991_691 != 0)

No interesting values produced.
Adding Destination of edge (264 -> 265) to worklist

Adding Destination of edge (264 -> 266) to worklist


Simulating block 265

Visiting statement:
if (D.44993_692 != D.44929_693)

Trying to determine truth value of predicate if (D.44993_692 != D.44929_693)
No interesting values produced.
Adding Destination of edge (265 -> 267) to worklist


Simulating block 266

Visiting statement:
if (remote_codec_rate_96 != codec_rate_632)

Trying to determine truth value of predicate if (remote_codec_rate_96 != codec_rate_632)
No interesting values produced.
Adding Destination of edge (266 -> 268) to worklist


Simulating block 267
Adding Destination of edge (267 -> 269) to worklist


Simulating block 268

Simulating block 269

Visiting PHI node: nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
	Argument #0: nm_idx_1139 copy-of chain: nm_idx_1139 [NOT A COPY]
	Argument #1: nm_idx_1139 copy-of chain: nm_idx_1139 [NOT A COPY]
	Argument #2: nm_idx_701 copy-of chain: nm_idx_701 [NOT A COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Substituting values and folding statements

Folding statement: if (session_161(D) == 0B)
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => 0
Not folded
Folding statement: # DEBUG remote_codec_rate => 0
Not folded
Folding statement: # DEBUG codec_ms => 0
Not folded
Folding statement: near_matches = {};
Not folded
Folding statement: matches = {};
Not folded
Folding statement: # DEBUG near_map => 0B
Not folded
Folding statement: # DEBUG mmap => 0B
Not folded
Folding statement: # DEBUG near_match => 0B
Not folded
Folding statement: # DEBUG mimp => 0B
Not folded
Folding statement: # DEBUG near_rate => 0
Not folded
Folding statement: # DEBUG reneg => 1
Not folded
Folding statement: # DEBUG parser => 0B
Not folded
Folding statement: # DEBUG scrooge => 0
Not folded
Folding statement: # DEBUG got_webrtc => 0
Not folded
Folding statement: # DEBUG got_udptl => 0
Not folded
Folding statement: # DEBUG got_savp => 0
Not folded
Folding statement: # DEBUG got_video_savp => 0
Not folded
Folding statement: # DEBUG got_video_avp => 0
Not folded
Folding statement: # DEBUG got_avp => 0
Not folded
Folding statement: # DEBUG got_audio => 0
Not folded
Folding statement: # DEBUG got_video_crypto => 0
Not folded
Folding statement: # DEBUG got_crypto => 0
Not folded
Folding statement: # DEBUG crypto => 0B
Not folded
Folding statement: # DEBUG channel => channel_162
Not folded
Folding statement: channel_162 = switch_core_session_get_channel (session_161(D));
Not folded
Folding statement: # DEBUG skip => 0
Not folded
Folding statement: # DEBUG x => 0
Not folded
Folding statement: # DEBUG greedy => 0
Not folded
Folding statement: # DEBUG recvonly => 0
Not folded
Folding statement: # DEBUG sendonly => 0
Not folded
Folding statement: # DEBUG dmaxptime => 0
Not folded
Folding statement: # DEBUG maxptime => 0
Not folded
Folding statement: # DEBUG dptime => 0
Not folded
Folding statement: # DEBUG ptime => 0
Not folded
Folding statement: # DEBUG cng_pt => 0
Not folded
Folding statement: # DEBUG te => 0
Not folded
Folding statement: # DEBUG best_te => 0
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);
Not folded
Folding statement: if (smh_186 == 0B)
Not folded
Folding statement: # DEBUG smh => smh_186
Not folded
Folding statement: smh_186 = session_161(D)->media_handle;
Not folded
Folding statement: if (parser_196 == 0B)
Not folded
Folding statement: # DEBUG parser => parser_196
Not folded
Folding statement: parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
Not folded
Folding statement: D.44473_195 = (int) D.44472_194;
Not folded
Folding statement: D.44472_194 = strlen (r_sdp_193(D));
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_192
Not folded
Folding statement: total_codecs_192 = D.44471_191->num_codecs;
Not folded
Folding statement: D.44471_191 = smh_186->mparams;
Not folded
Folding statement: # DEBUG codec_array => codec_array_190
Not folded
Folding statement: codec_array_190 = &smh_186->codecs;
Not folded
Folding statement: # DEBUG v_engine => D#14
Not folded
Folding statement: # DEBUG D#14 => &smh_186->engines[1]
Not folded
Folding statement: # DEBUG a_engine => D#15
Not folded
Folding statement: # DEBUG D#15 => &smh_186->engines
Not folded
Folding statement: if (sdp_198 == 0B)
Not folded
Folding statement: # DEBUG sdp => sdp_198
Not folded
Folding statement: sdp_198 = sdp_session (parser_196);
Not folded
Folding statement: sdp_parser_free (parser_196);
Not folded
Folding statement: if (D.44478_200 != 0)
Not folded
Folding statement: D.44478_200 = dtls_ok (session_161(D));
Not folded
Folding statement: if (tmp_203 != 0B)
Not folded
Folding statement: # DEBUG tmp => tmp_203
Not folded
Folding statement: tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
Not folded
Folding statement: D.44482_202 = D.44481_201->channel;
Not folded
Folding statement: D.44481_201 = smh_186->session;
Not folded
Folding statement: if (D.49675_1550 == 0)
Not folded
Folding statement: D.49675_1550 = strcasecmp (tmp_203, "no");
Not folded
Folding statement: # DEBUG expr => tmp_203
Not folded
Folding statement: if (D.49676_1551 == 0)
Not folded
Folding statement: D.49676_1551 = strcasecmp (tmp_203, "off");
Not folded
Folding statement: if (D.49677_1552 == 0)
Not folded
Folding statement: D.49677_1552 = strcasecmp (tmp_203, "false");
Not folded
Folding statement: if (D.49678_1553 == 0)
Not folded
Folding statement: D.49678_1553 = strcasecmp (tmp_203, "f");
Not folded
Folding statement: if (D.49679_1554 == 0)
Not folded
Folding statement: D.49679_1554 = strcasecmp (tmp_203, "disabled");
Not folded
Folding statement: if (D.49680_1555 == 0)
Not folded
Folding statement: D.49680_1555 = strcasecmp (tmp_203, "inactive");
Not folded
Folding statement: if (D.49681_1556 == 0)
Not folded
Folding statement: D.49681_1556 = strcasecmp (tmp_203, "disallow");
Not folded
Folding statement: if (D.49682_1557 != 0)
Not folded
Folding statement: D.49682_1557 = switch_is_number (tmp_203);
Not folded
Folding statement: if (D.49683_1558 == 0)
Not folded
Folding statement: D.49683_1558 = strtol (tmp_203, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => tmp_203
Not folded
Folding PHI node: .MEM_1621 = PHI <.MEM_1180(10), .MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1635(18)>
No folding possible
Folding statement: switch_channel_clear_flag (D.44482_208, 109);
Not folded
Folding statement: D.44482_208 = D.44481_207->channel;
Not folded
Folding statement: D.44481_207 = smh_186->session;
Not folded
Folding statement: switch_channel_clear_flag (D.44482_206, 111);
Not folded
Folding statement: D.44482_206 = D.44481_205->channel;
Not folded
Folding statement: D.44481_205 = smh_186->session;
Not folded
Folding PHI node: .MEM_1096 = PHI <.MEM_1179(8), .MEM_1180(9), .MEM_1117(415), .MEM_1183(19)>
No folding possible
Folding statement: if (pmap_1457 != 0B)
Not folded
Folding statement: # DEBUG pmap => pmap_1457
Not folded
Folding statement: # DEBUG pmap => pmap_1457
Not folded
Folding statement: pmap_1457 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;
Not folded
Folding statement: # DEBUG engine => D#15
Not folded
Folding statement: switch_core_session_parse_crypto_prefs (session_161(D));
Not folded
Folding statement: if (D.47871_1661 != 0)
Not folded
Folding statement: D.47871_1661 = pmap_1457->allocated;
Not folded
Folding PHI node: pmap_1747 = PHI <pmap_1459(23), pmap_1457(21)>
No folding possible
Folding PHI node: .MEM_1837 = PHI <.MEM_1516(23), .MEM_1184(21)>
No folding possible
Folding statement: if (pmap_1459 != 0B)
Not folded
Folding statement: # DEBUG pmap => pmap_1459
Not folded
Folding statement: # DEBUG pmap => pmap_1459
Not folded
Folding statement: pmap_1459 = pmap_1747->next;
Not folded
Folding statement: pmap_1747->current = 0;
Not folded
Folding statement: pmap_1747->negotiated = 0;
Not folded
Folding statement: if (D.47871_1460 != 0)
Not folded
Folding statement: D.47871_1460 = pmap_1459->allocated;
Not folded
Folding PHI node: .MEM_1836 = PHI <.MEM_1516(23), .MEM_1516(22), .MEM_1184(20), .MEM_1184(21)>
No folding possible
Folding statement: if (pmap_1461 != 0B)
Not folded
Folding statement: # DEBUG pmap => pmap_1461
Not folded
Folding statement: # DEBUG pmap => pmap_1461
Not folded
Folding statement: pmap_1461 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
Not folded
Folding statement: # DEBUG engine => D#14
Not folded
Folding statement: if (D.47874_1670 != 0)
Not folded
Folding statement: D.47874_1670 = pmap_1461->allocated;
Not folded
Folding PHI node: pmap_1672 = PHI <pmap_1463(27), pmap_1461(25)>
No folding possible
Folding PHI node: .MEM_1663 = PHI <.MEM_1518(27), .MEM_1836(25)>
No folding possible
Folding statement: if (pmap_1463 != 0B)
Not folded
Folding statement: # DEBUG pmap => pmap_1463
Not folded
Folding statement: # DEBUG pmap => pmap_1463
Not folded
Folding statement: pmap_1463 = pmap_1672->next;
Not folded
Folding statement: pmap_1672->current = 0;
Not folded
Folding statement: pmap_1672->negotiated = 0;
Not folded
Folding statement: if (D.47874_1464 != 0)
Not folded
Folding statement: D.47874_1464 = pmap_1463->allocated;
Not folded
Folding PHI node: .MEM_1878 = PHI <.MEM_1518(27), .MEM_1518(26), .MEM_1836(24), .MEM_1836(25)>
No folding possible
Folding statement: if (proceed_209(D) != 0B)
Not folded
Folding statement: *proceed_209(D) = 1;
Not folded
Folding PHI node: .MEM_1097 = PHI <.MEM_1878(28), .MEM_1187(29)>
No folding possible
Folding statement: if (val_214 != 0B)
Not folded
Folding statement: # DEBUG val => val_214
Not folded
Folding statement: val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
Not folded
Folding statement: # DEBUG scrooge => scrooge_213
Not folded
Folding statement: scrooge_213 = D.44491_212 != 0;
Not folded
Folding statement: D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
Not folded
Folding statement: # DEBUG greedy => greedy_211
Not folded
Folding statement: greedy_211 = D.44490_210 != 0;
Not folded
Folding statement: D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
Not folded
Folding statement: if (D.44494_215 == 0)
Not folded
Folding statement: D.44494_215 = strcasecmp (val_214, "generous");
Not folded
Folding statement: if (D.44498_218 == 0)
Not folded
Folding statement: D.44498_218 = strcasecmp (val_214, "greedy");
Not folded
Folding statement: if (D.44502_221 == 0)
Not folded
Folding statement: D.44502_221 = strcasecmp (val_214, "scrooge");
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
Not folded
Folding PHI node: greedy_47 = PHI <greedy_211(30), 0(31), 1(32), 1(33), greedy_211(34)>
No folding possible
Folding PHI node: scrooge_80 = PHI <scrooge_213(30), 0(31), 0(32), 1(33), scrooge_213(34)>
No folding possible
Folding PHI node: .MEM_1098 = PHI <.MEM_1190(30), .MEM_1190(31), .MEM_1190(32), .MEM_1190(33), .MEM_1191(34)>
No folding possible
Folding statement: if (D.44508_226 != 0B)
Not folded
Folding statement: smh_186->origin = D.44508_226;
Not folded
Folding statement: D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
Not folded
Folding statement: D.44507_225 = D.44506_224->o_username;
Not folded
Folding statement: D.44506_224 = sdp_198->sdp_origin;
Not folded
Folding statement: # DEBUG greedy => greedy_47
Not folded
Folding statement: # DEBUG scrooge => scrooge_80
Not folded
Folding statement: if (D.44514_231 != 0)
Not folded
Folding statement: D.44514_231 = D.44513_230 & 1;
Not folded
Folding statement: D.44513_230 = (int) D.44512_229;
Not folded
Folding statement: D.44512_229 = D.44471_228->auto_rtp_bugs;
Not folded
Folding statement: D.44471_228 = smh_186->mparams;
Not folded
Folding statement: if (D.44518_234 != 0B)
Not folded
Folding statement: D.44518_234 = strstr (D.44508_226, "CiscoSystemsSIP-GW-UserAgent");
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
Not folded
Folding statement: D.44522_236 = D.44521_235 | 1;
Not folded
Folding statement: D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
Not folded
Folding PHI node: .MEM_1099 = PHI <.MEM_1193(36), .MEM_1193(37), .MEM_1195(38)>
No folding possible
Folding statement: if (D.44523_239 != 0)
Not folded
Folding statement: D.44523_239 = D.44512_238 & 2;
Not folded
Folding statement: D.44512_238 = D.44471_237->auto_rtp_bugs;
Not folded
Folding statement: D.44471_237 = smh_186->mparams;
Not folded
Folding statement: if (D.44526_241 != 0B)
Not folded
Folding statement: D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
Not folded
Folding statement: D.44509_240 = smh_186->origin;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
Not folded
Folding statement: D.44529_243 = D.44521_242 | 2;
Not folded
Folding statement: D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
Not folded
Folding PHI node: .MEM_1100 = PHI <.MEM_1193(35), .MEM_1099(39), .MEM_1099(40), .MEM_1197(41)>
No folding possible
Folding statement: if (val_245 != 0B)
Not folded
Folding statement: # DEBUG val => val_245
Not folded
Folding statement: val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
Not folded
Folding statement: D.44530_244 = session_161(D)->channel;
Not folded
Folding statement: if (D.49687_1560 == 0)
Not folded
Folding statement: D.49687_1560 = strcasecmp (val_245, "yes");
Not folded
Folding statement: # DEBUG expr => val_245
Not folded
Folding statement: if (D.49688_1561 == 0)
Not folded
Folding statement: D.49688_1561 = strcasecmp (val_245, "on");
Not folded
Folding statement: if (D.49689_1562 == 0)
Not folded
Folding statement: D.49689_1562 = strcasecmp (val_245, "true");
Not folded
Folding statement: if (D.49690_1563 == 0)
Not folded
Folding statement: D.49690_1563 = strcasecmp (val_245, "t");
Not folded
Folding statement: if (D.49691_1564 == 0)
Not folded
Folding statement: D.49691_1564 = strcasecmp (val_245, "enabled");
Not folded
Folding statement: if (D.49692_1565 == 0)
Not folded
Folding statement: D.49692_1565 = strcasecmp (val_245, "active");
Not folded
Folding statement: if (D.49693_1566 == 0)
Not folded
Folding statement: D.49693_1566 = strcasecmp (val_245, "allow");
Not folded
Folding statement: if (D.49694_1567 != 0)
Not folded
Folding statement: D.49694_1567 = switch_is_number (val_245);
Not folded
Folding statement: if (D.49695_1568 != 0)
Not folded
Folding statement: D.49695_1568 = strtol (val_245, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => val_245
Not folded
Folding PHI node: .MEM_1623 = PHI <.MEM_1198(43), .MEM_1198(44), .MEM_1198(45), .MEM_1198(46), .MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1638(51)>
No folding possible
Folding statement: switch_channel_set_flag_value (D.44530_247, 93, 1);
Not folded
Folding statement: D.44530_247 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1101 = PHI <.MEM_1198(42), .MEM_794(416), .MEM_1200(52)>
No folding possible
Folding statement: if (m_248 != 0B)
Not folded
Folding statement: # DEBUG m => m_248
Not folded
Folding statement: m_248 = sdp_198->sdp_media;
Not folded
Folding statement: if (D.44544_253 != 0)
Not folded
Folding statement: D.44544_253 = D.44543_252 | D.44542_251;
Not folded
Folding statement: D.44543_252 = D.44541_250 == 0;
Not folded
Folding statement: D.44542_251 = D.44541_250 == 2;
Not folded
Folding statement: D.44541_250 = D.44540_249 & 6;
Not folded
Folding statement: D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
Not folded
Folding statement: if (D.44546_254 != 0B)
Not folded
Folding statement: D.44546_254 = m_248->m_connections;
Not folded
Folding statement: if (D.44548_256 != 0B)
Not folded
Folding statement: D.44548_256 = D.44546_254->c_address;
Not folded
Folding statement: if (__result_300 == 0)
Not folded
Folding statement: __result_300 = __builtin_strcmp (D.44548_256, "0.0.0.0");
Not folded
Folding statement: # DEBUG __s2_len => 7
Not folded
Folding statement: # DEBUG sendonly => 2
Not folded
Folding PHI node: sendonly_42 = PHI <0(53), 0(55), 0(56), 0(57), 2(58)>
No folding possible
Folding statement: if (attr_303 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_303
Not folded
Folding statement: # DEBUG dptime => 0
Not folded
Folding statement: # DEBUG dmaxptime => 0
Not folded
Folding statement: # DEBUG sendonly => sendonly_42
Not folded
Folding statement: # DEBUG recvonly => 0
Not folded
Folding statement: # DEBUG attr => attr_303
Not folded
Folding statement: attr_303 = sdp_198->sdp_attributes;
Not folded
Folding statement: # DEBUG sendonly => sendonly_42
Not folded
Folding PHI node: attr_1666 = PHI <attr_334(75), attr_303(59)>
No folding possible
Folding PHI node: dptime_1671 = PHI <dptime_36(75), 0(59)>
No folding possible
Folding PHI node: dmaxptime_1865 = PHI <dmaxptime_40(75), 0(59)>
No folding possible
Folding PHI node: sendonly_1689 = PHI <sendonly_43(75), sendonly_42(59)>
No folding possible
Folding PHI node: recvonly_1894 = PHI <recvonly_45(75), 0(59)>
No folding possible
Folding PHI node: .MEM_1838 = PHI <.MEM_1102(75), .MEM_1101(59)>
No folding possible
Folding statement: if (D.44590_304 == 0B)
Not folded
Folding statement: # DEBUG s => D.44590_304
Not folded
Folding statement: D.44590_304 = attr_1666->a_name;
Not folded
Folding statement: if (D.47877_1465 == 0)
Not folded
Folding statement: D.47877_1465 = *D.44590_304;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
Not folded
Folding statement: D.44530_309 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG sendonly => 1
Not folded
Folding statement: if (D.44598_311 == 0)
Not folded
Folding statement: D.44598_311 = strcasecmp (D.44590_304, "inactive");
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
Not folded
Folding statement: D.44530_313 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG sendonly => 1
Not folded
Folding statement: if (D.44602_315 == 0)
Not folded
Folding statement: D.44602_315 = strcasecmp (D.44590_304, "recvonly");
Not folded
Folding statement: if (D.44606_319 != 0)
Not folded
Folding statement: D.44606_319 = switch_rtp_ready (D.44605_318);
Not folded
Folding statement: D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: # DEBUG recvonly => 1
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
Not folded
Folding statement: D.44530_316 = session_161(D)->channel;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;
Not folded
Folding statement: switch_rtp_set_max_missed_packets (D.44605_320, 0);
Not folded
Folding statement: D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
Not folded
Folding statement: D.44530_322 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
Not folded
Folding statement: D.44530_321 = session_161(D)->channel;
Not folded
Folding statement: if (sendonly_1689 != 2)
Not folded
Folding statement: if (D.44614_324 == 0)
Not folded
Folding statement: D.44614_324 = strcasecmp (D.44590_304, "sendrecv");
Not folded
Folding statement: if (D.44616_327 == 0)
Not folded
Folding statement: D.44616_327 = strcasecmp (D.44590_304, "ptime");
Not folded
Folding statement: # DEBUG dptime => NULL
Not folded
Folding statement: dptime_1467 = strtol (D.44619_328, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_328
Not folded
Folding statement: D.44619_328 = attr_1666->a_value;
Not folded
Folding statement: if (D.44621_331 == 0)
Not folded
Folding statement: D.44621_331 = strcasecmp (D.44590_304, "maxptime");
Not folded
Folding statement: # DEBUG dmaxptime => NULL
Not folded
Folding statement: dmaxptime_1468 = strtol (D.44619_332, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_332
Not folded
Folding statement: D.44619_332 = attr_1666->a_value;
Not folded
Folding PHI node: dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
No folding possible
Folding PHI node: dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
No folding possible
Folding PHI node: sendonly_43 = PHI <sendonly_1689(61), 1(62), 1(64), sendonly_1689(68), 0(70), sendonly_1689(72), sendonly_1689(73), sendonly_1689(74), sendonly_1689(67), sendonly_1689(60)>
No folding possible
Folding PHI node: recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>
No folding possible
Folding PHI node: .MEM_1102 = PHI <.MEM_1838(61), .MEM_1201(62), .MEM_1202(64), .MEM_1209(68), .MEM_1838(70), .MEM_1520(72), .MEM_1838(73), .MEM_1522(74), .MEM_1207(67), .MEM_1838(60)>
No folding possible
Folding statement: if (attr_334 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_334
Not folded
Folding statement: # DEBUG dptime => dptime_36
Not folded
Folding statement: # DEBUG dmaxptime => dmaxptime_40
Not folded
Folding statement: # DEBUG sendonly => sendonly_43
Not folded
Folding statement: # DEBUG recvonly => recvonly_45
Not folded
Folding statement: # DEBUG attr => attr_334
Not folded
Folding statement: attr_334 = attr_1666->a_next;
Not folded
Folding statement: # DEBUG dptime => dptime_36
Not folded
Folding statement: # DEBUG dmaxptime => dmaxptime_40
Not folded
Folding statement: # DEBUG sendonly => sendonly_43
Not folded
Folding statement: # DEBUG recvonly => recvonly_45
Not folded
Folding PHI node: dptime_1035 = PHI <dptime_36(75), 0(59)>
No folding possible
Folding PHI node: dmaxptime_1005 = PHI <dmaxptime_40(75), 0(59)>
No folding possible
Folding PHI node: sendonly_1006 = PHI <sendonly_43(75), sendonly_42(59)>
No folding possible
Folding PHI node: recvonly_1654 = PHI <recvonly_45(75), 0(59)>
No folding possible
Folding PHI node: .MEM_1839 = PHI <.MEM_1102(75), .MEM_1101(59)>
No folding possible
Folding statement: if (D.44626_337 != 0)
Not folded
Folding statement: D.44626_337 = D.44625_336 & D.44624_335;
Not folded
Folding statement: D.44625_336 = recvonly_1654 != 1;
Not folded
Folding statement: D.44624_335 = sendonly_1006 != 1;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);
Not folded
Folding statement: D.44530_338 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1104 = PHI <.MEM_1839(76), .MEM_1210(77)>
No folding possible
Folding statement: if (D.44631_339 == 0)
Not folded
Folding statement: D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
Not folded
Folding statement: if (val_341 == 0B)
Not folded
Folding statement: # DEBUG val => val_341
Not folded
Folding statement: val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
Not folded
Folding statement: D.44530_340 = session_161(D)->channel;
Not folded
Folding statement: if (D.49699_1570 == 0)
Not folded
Folding statement: D.49699_1570 = strcasecmp (val_341, "yes");
Not folded
Folding statement: # DEBUG expr => val_341
Not folded
Folding statement: if (D.49700_1571 == 0)
Not folded
Folding statement: D.49700_1571 = strcasecmp (val_341, "on");
Not folded
Folding statement: if (D.49701_1572 == 0)
Not folded
Folding statement: D.49701_1572 = strcasecmp (val_341, "true");
Not folded
Folding statement: if (D.49702_1573 == 0)
Not folded
Folding statement: D.49702_1573 = strcasecmp (val_341, "t");
Not folded
Folding statement: if (D.49703_1574 == 0)
Not folded
Folding statement: D.49703_1574 = strcasecmp (val_341, "enabled");
Not folded
Folding statement: if (D.49704_1575 == 0)
Not folded
Folding statement: D.49704_1575 = strcasecmp (val_341, "active");
Not folded
Folding statement: if (D.49705_1576 == 0)
Not folded
Folding statement: D.49705_1576 = strcasecmp (val_341, "allow");
Not folded
Folding statement: if (D.49706_1577 != 0)
Not folded
Folding statement: D.49706_1577 = switch_is_number (val_341);
Not folded
Folding statement: if (D.49707_1578 != 0)
Not folded
Folding statement: D.49707_1578 = strtol (val_341, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => val_341
Not folded
Folding PHI node: .MEM_1625 = PHI <.MEM_1212(80), .MEM_1212(81), .MEM_1212(82), .MEM_1212(83), .MEM_1212(84), .MEM_1212(85), .MEM_1212(86), .MEM_1641(88)>
No folding possible
Folding PHI node: .MEM_1105 = PHI <.MEM_1212(79), .MEM_1754(418)>
No folding possible
Folding statement: if (D.44636_344 == 0)
Not folded
Folding statement: D.44636_344 = D.44471_343->hold_laps;
Not folded
Folding statement: D.44471_343 = smh_186->mparams;
Not folded
Folding statement: if (D.44640_348 != 0)
Not folded
Folding statement: D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_1006);
Not folded
Folding statement: D.44471_343->hold_laps = 1;
Not folded
Folding statement: if (val_351 != 0B)
Not folded
Folding statement: # DEBUG val => val_351
Not folded
Folding statement: val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
Not folded
Folding statement: D.44530_350 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG reneg => reneg_349
Not folded
Folding statement: reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
Not folded
Folding statement: # DEBUG reneg => reneg_352
Not folded
Folding statement: reneg_352 = switch_true (val_351);
Not folded
Folding PHI node: reneg_81 = PHI <reneg_349(92), reneg_352(93)>
No folding possible
Folding PHI node: .MEM_1106 = PHI <.MEM_1217(92), .MEM_1218(93)>
No folding possible
Folding statement: if (reneg_81 != 0)
Not folded
Folding statement: # DEBUG reneg => reneg_81
Not folded
Folding PHI node: .MEM_1857 = PHI <.MEM_1106(94), .MEM_669(419)>
No folding possible
Folding statement: if (val_355 != 0B)
Not folded
Folding statement: # DEBUG val => val_355
Not folded
Folding statement: val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
Not folded
Folding statement: D.44530_354 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG reneg => reneg_353
Not folded
Folding statement: reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
Not folded
Folding statement: if (D.49711_1580 == 0)
Not folded
Folding statement: D.49711_1580 = strcasecmp (val_355, "yes");
Not folded
Folding statement: # DEBUG expr => val_355
Not folded
Folding statement: if (D.49712_1581 == 0)
Not folded
Folding statement: D.49712_1581 = strcasecmp (val_355, "on");
Not folded
Folding statement: if (D.49713_1582 == 0)
Not folded
Folding statement: D.49713_1582 = strcasecmp (val_355, "true");
Not folded
Folding statement: if (D.49714_1583 == 0)
Not folded
Folding statement: D.49714_1583 = strcasecmp (val_355, "t");
Not folded
Folding statement: if (D.49715_1584 == 0)
Not folded
Folding statement: D.49715_1584 = strcasecmp (val_355, "enabled");
Not folded
Folding statement: if (D.49716_1585 == 0)
Not folded
Folding statement: D.49716_1585 = strcasecmp (val_355, "active");
Not folded
Folding statement: if (D.49717_1586 == 0)
Not folded
Folding statement: D.49717_1586 = strcasecmp (val_355, "allow");
Not folded
Folding statement: if (D.49718_1587 != 0)
Not folded
Folding statement: D.49718_1587 = switch_is_number (val_355);
Not folded
Folding statement: if (D.49719_1588 != 0)
Not folded
Folding statement: D.49719_1588 = strtol (val_355, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => val_355
Not folded
Folding PHI node: reneg_1589 = PHI <1(96), 1(97), 1(98), 1(99), 1(100), 1(101), 1(102), 1(104), 0(103), 0(105)>
No folding possible
Folding PHI node: .MEM_1627 = PHI <.MEM_1220(96), .MEM_1220(97), .MEM_1220(98), .MEM_1220(99), .MEM_1220(100), .MEM_1220(101), .MEM_1220(102), .MEM_1644(104), .MEM_1643(103), .MEM_1644(105)>
No folding possible
Folding statement: # DEBUG reneg => NULL
Not folded
Folding PHI node: reneg_82 = PHI <0(94), reneg_353(95), reneg_1589(106)>
No folding possible
Folding PHI node: .MEM_1107 = PHI <.MEM_1106(94), .MEM_1220(95), .MEM_1627(106)>
No folding possible
Folding statement: if (D.44649_357 != 0B)
Not folded
Folding statement: D.44649_357 = session_161(D)->bugs;
Not folded
Folding statement: # DEBUG reneg => reneg_82
Not folded
Folding statement: # DEBUG reneg => 0
Not folded
Folding statement: # DEBUG reneg => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
Not folded
Folding statement: if (reneg_82 == 0)
Not folded
Folding statement: # DEBUG reneg => reneg_82
Not folded
Folding PHI node: .MEM_1858 = PHI <.MEM_1107(109), .MEM_1222(108)>
No folding possible
Folding statement: if (total_codecs_359 != 0)
Not folded
Folding statement: total_codecs_359 = smh_186->num_negotiated_codecs;
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_359
Not folded
Folding statement: # DEBUG codec_array => codec_array_360
Not folded
Folding statement: codec_array_360 = &smh_186->negotiated_codecs;
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_365
Not folded
Folding statement: total_codecs_365 = D.44471_364->num_codecs;
Not folded
Folding statement: D.44471_364 = smh_186->mparams;
Not folded
Folding statement: # DEBUG codec_array => codec_array_190
Not folded
Folding statement: switch_core_media_prepare_codecs (session_161(D), 0);
Not folded
Folding statement: D.44471_362->num_codecs = 0;
Not folded
Folding statement: D.44471_362 = smh_186->mparams;
Not folded
Folding PHI node: codec_array_84 = PHI <codec_array_360(111), codec_array_190(110), codec_array_190(112)>
No folding possible
Folding PHI node: total_codecs_85 = PHI <total_codecs_359(111), total_codecs_192(110), total_codecs_365(112)>
No folding possible
Folding PHI node: .MEM_1109 = PHI <.MEM_1858(111), .MEM_1858(110), .MEM_1224(112)>
No folding possible
Folding statement: if (D.44661_366 != 0B)
Not folded
Folding statement: D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
Not folded
Folding statement: # DEBUG codec_array => codec_array_84
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_85
Not folded
Folding statement: if (D.44663_367 != 0B)
Not folded
Folding statement: D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
Not folded
Folding statement: if (D.44665_368 != 0B)
Not folded
Folding statement: D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
Not folded
Folding PHI node: .MEM_1110 = PHI <.MEM_1225(113), .MEM_1226(114), .MEM_1227(115)>
No folding possible
Folding statement: switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);
Not folded
Folding statement: D.44530_369 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1111 = PHI <.MEM_1227(115), .MEM_1228(116)>
No folding possible
Folding statement: if (m_370 != 0B)
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG best_te => 0
Not folded
Folding statement: # DEBUG cng_pt => 0
Not folded
Folding statement: # DEBUG m => m_370
Not folded
Folding statement: # DEBUG got_crypto => 0
Not folded
Folding statement: # DEBUG got_video_crypto => 0
Not folded
Folding statement: # DEBUG got_audio => 0
Not folded
Folding statement: # DEBUG got_avp => 0
Not folded
Folding statement: # DEBUG got_video_avp => NULL
Not folded
Folding statement: # DEBUG got_video_savp => NULL
Not folded
Folding statement: # DEBUG got_savp => 0
Not folded
Folding statement: # DEBUG got_udptl => 0
Not folded
Folding statement: # DEBUG got_webrtc => 0
Not folded
Folding statement: # DEBUG codec_ms => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG m => m_370
Not folded
Folding statement: m_370 = sdp_198->sdp_media;
Not folded
Folding statement: check_ice (smh_186, 1, sdp_198, 0B);
Not folded
Folding statement: check_ice (smh_186, 0, sdp_198, 0B);
Not folded
Folding statement: switch_core_media_pass_zrtp_hash (session_161(D));
Not folded
Folding statement: switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
Not folded
Folding PHI node: match_1800 = PHI <match_15(412), 0(117)>
No folding possible
Folding PHI node: best_te_680 = PHI <best_te_22(412), 0(117)>
No folding possible
Folding PHI node: cng_pt_1717 = PHI <cng_pt_26(412), 0(117)>
No folding possible
Folding PHI node: m_1764 = PHI <m_1093(412), m_370(117)>
No folding possible
Folding PHI node: got_crypto_1866 = PHI <got_crypto_55(412), 0(117)>
No folding possible
Folding PHI node: got_video_crypto_1674 = PHI <got_video_crypto_63(412), 0(117)>
No folding possible
Folding PHI node: got_audio_1693 = PHI <got_audio_66(412), 0(117)>
No folding possible
Folding PHI node: got_avp_671 = PHI <got_avp_1859(412), 0(117)>
No folding possible
Folding PHI node: got_savp_512 = PHI <got_savp_1739(412), 0(117)>
No folding possible
Folding PHI node: got_udptl_1868 = PHI <got_udptl_1743(412), 0(117)>
No folding possible
Folding PHI node: got_webrtc_452 = PHI <got_webrtc_78(412), 0(117)>
No folding possible
Folding PHI node: codec_ms_477 = PHI <codec_ms_94(412), 0(117)>
No folding possible
Folding PHI node: m_idx_1869 = PHI <m_idx_113(412), 0(117)>
No folding possible
Folding PHI node: nm_idx_1749 = PHI <nm_idx_121(412), 0(117)>
No folding possible
Folding PHI node: .MEM_1750 = PHI <.MEM_1168(412), .MEM_1232(117)>
No folding possible
Folding statement: if (D.44666_373 == 261)
Not folded
Folding statement: D.44666_373 = m_1764->m_proto;
Not folded
Folding statement: # DEBUG maxptime => dmaxptime_1005
Not folded
Folding statement: # DEBUG ptime => dptime_1035
Not folded
Folding statement: switch_core_session_set_ice (session_161(D));
Not folded
Folding statement: # DEBUG got_webrtc => got_webrtc_374
Not folded
Folding statement: got_webrtc_374 = got_webrtc_452 + 1;
Not folded
Folding PHI node: got_webrtc_78 = PHI <got_webrtc_452(118), got_webrtc_374(119)>
No folding possible
Folding PHI node: .MEM_1112 = PHI <.MEM_1750(118), .MEM_1233(119)>
No folding possible
Folding statement: if (D.44669_375 != 0B)
Not folded
Folding statement: D.44669_375 = m_1764->m_proto_name;
Not folded
Folding statement: # DEBUG got_webrtc => got_webrtc_78
Not folded
Folding statement: if (D.44672_377 == 0)
Not folded
Folding statement: D.44672_377 = strcasecmp (D.44669_375, "UDP/TLS/RTP/SAVPF");
Not folded
Folding statement: switch_channel_set_flag_value (D.44530_378, 107, 1);
Not folded
Folding statement: D.44530_378 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1113 = PHI <.MEM_1112(120), .MEM_1112(121), .MEM_1234(122)>
No folding possible
Folding statement: if (D.44678_382 != 0)
Not folded
Folding statement: D.44678_382 = D.44677_381 | D.44676_380;
Not folded
Folding statement: D.44677_381 = D.44675_379 == 261;
Not folded
Folding statement: D.44676_380 = D.44675_379 == 257;
Not folded
Folding statement: D.44675_379 = m_1764->m_proto;
Not folded
Folding statement: if (D.44681_383 == 2)
Not folded
Folding statement: D.44681_383 = m_1764->m_type;
Not folded
Folding statement: # DEBUG got_savp => got_savp_384
Not folded
Folding statement: got_savp_384 = got_savp_512 + 1;
Not folded
Folding statement: if (D.44675_379 == 256)
Not folded
Folding statement: if (D.44681_387 == 2)
Not folded
Folding statement: D.44681_387 = m_1764->m_type;
Not folded
Folding statement: # DEBUG got_avp => got_avp_388
Not folded
Folding statement: got_avp_388 = got_avp_671 + 1;
Not folded
Folding statement: if (D.44675_379 == 258)
Not folded
Folding statement: # DEBUG got_avp => got_avp_671
Not folded
Folding statement: # DEBUG got_video_avp => NULL
Not folded
Folding statement: # DEBUG got_video_savp => NULL
Not folded
Folding statement: # DEBUG got_savp => got_savp_512
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_391
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_391
Not folded
Folding statement: got_udptl_391 = got_udptl_1868 + 1;
Not folded
Folding PHI node: got_avp_68 = PHI <got_avp_671(124), got_avp_671(127), got_avp_671(129), got_avp_388(128), got_avp_671(125)>
No folding possible
Folding PHI node: got_savp_74 = PHI <got_savp_512(124), got_savp_512(127), got_savp_512(129), got_savp_512(128), got_savp_384(125)>
No folding possible
Folding statement: if (got_udptl_1868 != 0)
Not folded
Folding statement: # DEBUG got_avp => got_avp_68
Not folded
Folding statement: # DEBUG got_video_avp => NULL
Not folded
Folding statement: # DEBUG got_video_savp => NULL
Not folded
Folding statement: # DEBUG got_savp => got_savp_74
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_1868
Not folded
Folding PHI node: got_avp_1740 = PHI <got_avp_68(131), got_avp_671(130)>
No folding possible
Folding PHI node: got_savp_1711 = PHI <got_savp_74(131), got_savp_512(130)>
No folding possible
Folding PHI node: got_udptl_774 = PHI <got_udptl_1868(131), got_udptl_391(130)>
No folding possible
Folding statement: if (D.44681_392 == 8)
Not folded
Folding statement: D.44681_392 = m_1764->m_type;
Not folded
Folding statement: if (D.44697_393 != 0)
Not folded
Folding statement: D.44697_393 = m_1764->m_port;
Not folded
Folding PHI node: m_1045 = PHI <m_1764(133)>
No folding possible
Folding statement: if (D.44699_396 != 0)
Not folded
Folding statement: D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
Not folded
Folding statement: D.44530_395 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG t38_options => t38_options_394
Not folded
Folding statement: t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_1045);
Not folded
Folding statement: if (D.44703_399 != 0)
Not folded
Folding statement: D.44703_399 = switch_true (D.44702_398);
Not folded
Folding statement: D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
Not folded
Folding statement: D.44530_400 = session_161(D)->channel;
Not folded
Folding statement: if (D.44707_408 != 0)
Not folded
Folding statement: D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
Not folded
Folding statement: D.44530_407 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG pass => pass_406
Not folded
Folding statement: pass_406 = (int) D.44706_405;
Not folded
Folding statement: D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
Not folded
Folding statement: D.44482_404 = D.44481_403->channel;
Not folded
Folding statement: D.44481_403 = smh_186->session;
Not folded
Folding statement: # DEBUG var => var_402
Not folded
Folding statement: var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
Not folded
Folding statement: if (proceed_209(D) != 0B)
Not folded
Folding statement: *proceed_209(D) = 0;
Not folded
Folding PHI node: .MEM_1114 = PHI <.MEM_1242(137), .MEM_1242(138), .MEM_1243(139)>
No folding possible
Folding statement: if (var_402 != 0B)
Not folded
Folding statement: if (pass_409 == 0)
Not folded
Folding statement: # DEBUG pass => pass_409
Not folded
Folding statement: pass_409 = switch_true (var_402);
Not folded
Folding statement: if (D.44716_410 == 0)
Not folded
Folding statement: D.44716_410 = strcasecmp (var_402, "once");
Not folded
Folding PHI node: pass_126 = PHI <pass_406(140), pass_409(141)>
No folding possible
Folding PHI node: .MEM_1115 = PHI <.MEM_1114(140), .MEM_1244(141)>
No folding possible
Folding statement: if (pass_126 == 2)
Not folded
Folding statement: # DEBUG pass => pass_126
Not folded
Folding PHI node: pass_1664 = PHI <pass_126(143), 2(142)>
No folding possible
Folding PHI node: .MEM_1854 = PHI <.MEM_1115(143), .MEM_1244(142)>
No folding possible
Folding statement: if (D.44723_414 != 0)
Not folded
Folding statement: D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
Not folded
Folding statement: D.44482_413 = D.44481_412->channel;
Not folded
Folding statement: D.44481_412 = smh_186->session;
Not folded
Folding PHI node: .MEM_1116 = PHI <.MEM_1244(142), .MEM_1245(144), .MEM_1115(143)>
No folding possible
Folding PHI node: pass_1848 = PHI <0(142), pass_1664(144), pass_126(143)>
No folding possible
Folding statement: if (D.44724_416 == 0)
Not folded
Folding statement: D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
Not folded
Folding statement: D.44530_415 = session_161(D)->channel;
Not folded
Folding statement: if (D.44726_418 != 0)
Not folded
Folding statement: D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
Not folded
Folding statement: D.44530_417 = session_161(D)->channel;
Not folded
Folding statement: if (D.44728_420 != 0)
Not folded
Folding statement: D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
Not folded
Folding statement: D.44530_419 = session_161(D)->channel;
Not folded
Folding statement: if (D.44730_422 == 0)
Not folded
Folding statement: D.44730_422 = switch_rtp_ready (D.44605_421);
Not folded
Folding statement: D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: if (pass_1848 != 0)
Not folded
Folding statement: # DEBUG pass => pass_1848
Not folded
Folding statement: if (D.44733_424 == 0)
Not folded
Folding statement: D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
Not folded
Folding statement: if (D.44737_431 == 0)
Not folded
Folding statement: D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
Not folded
Folding statement: tmp = "";
Not folded
Folding statement: # DEBUG remote_port => remote_port_430
Not folded
Folding statement: remote_port_430 = switch_rtp_get_remote_port (D.44605_429);
Not folded
Folding statement: D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: # DEBUG remote_host => remote_host_428
Not folded
Folding statement: remote_host_428 = switch_rtp_get_remote_host (D.44605_427);
Not folded
Folding statement: D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: # DEBUG other_channel => other_channel_426
Not folded
Folding statement: other_channel_426 = switch_core_session_get_channel (other_session.89_425);
Not folded
Folding statement: other_session.89_425 = other_session;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG pass => 0
Not folded
Folding statement: switch_core_session_rwunlock (other_session.89_435);
Not folded
Folding statement: other_session.89_435 = other_session;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
Not folded
Folding statement: D.44741_434 = switch_channel_get_name (other_channel_426);
Not folded
Folding statement: D.44740_433 = switch_channel_get_name (D.44530_432);
Not folded
Folding statement: D.44530_432 = session_161(D)->channel;
Not folded
Folding statement: if (D.44743_440 != 0)
Not folded
Folding statement: D.44743_440 = switch_true (D.44742_439);
Not folded
Folding statement: D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
Not folded
Folding statement: D.44530_438 = session_161(D)->channel;
Not folded
Folding statement: if (D.44747_443 != 0)
Not folded
Folding statement: D.44747_443 = switch_true (D.44746_442);
Not folded
Folding statement: D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
Not folded
Folding statement: D.44530_441 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);
Not folded
Folding PHI node: .MEM_1119 = PHI <.MEM_1261(153), .MEM_1263(154), .MEM_1264(155)>
No folding possible
Folding statement: if (D.44758_451 != 0)
Not folded
Folding statement: D.44758_451 = D.44757_450 & D.44756_449;
Not folded
Folding statement: D.44757_450 = remote_port_430 != 0;
Not folded
Folding statement: D.44756_449 = remote_host_428 != 0B;
Not folded
Folding statement: D.44750_447->remote_sdp_port = D.44753_448;
Not folded
Folding statement: D.44753_448 = t38_options_394->remote_port;
Not folded
Folding statement: D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44750_444->remote_sdp_ip = D.44752_446;
Not folded
Folding statement: D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
Not folded
Folding statement: D.44751_445 = t38_options_394->remote_ip;
Not folded
Folding statement: D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: if (D.39032_454 == 0)
Not folded
Folding statement: D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
Not folded
Folding statement: D.44760_453 = D.44750_447->remote_sdp_ip;
Not folded
Folding statement: if (remote_port_430 == D.44753_448)
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
Not folded
Folding statement: D.44764_458 = switch_channel_get_name (D.44530_457);
Not folded
Folding statement: D.44530_457 = session_161(D)->channel;
Not folded
Folding statement: if (D.44768_479 != 0)
Not folded
Folding statement: D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
Not folded
Folding statement: D.44762_478 = D.44750_475->remote_sdp_port;
Not folded
Folding statement: D.44760_476 = D.44750_475->remote_sdp_ip;
Not folded
Folding statement: D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
Not folded
Folding statement: D.44530_473 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
Not folded
Folding statement: D.44760_472 = D.44750_471->remote_sdp_ip;
Not folded
Folding statement: D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44530_470 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 32, "%d", D.44767_469);
Not folded
Folding statement: D.44767_469 = (int) D.44762_468;
Not folded
Folding statement: D.44762_468 = D.44750_467->remote_sdp_port;
Not folded
Folding statement: D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
Not folded
Folding statement: D.44767_466 = (int) D.44762_465;
Not folded
Folding statement: D.44762_465 = D.44750_462->remote_sdp_port;
Not folded
Folding statement: D.44760_463 = D.44750_462->remote_sdp_ip;
Not folded
Folding statement: D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44766_461 = (int) remote_port_430;
Not folded
Folding statement: D.44765_460 = switch_channel_get_name (D.44530_459);
Not folded
Folding statement: D.44530_459 = session_161(D)->channel;
Not folded
Folding statement: err = 0B;
Not folded
Folding statement: switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
Not folded
Folding statement: err.90_480 = err;
Not folded
Folding PHI node: .MEM_1120 = PHI <.MEM_1269(159), .MEM_1276(160), .MEM_1278(161)>
No folding possible
Folding statement: switch_core_session_rwunlock (other_session.89_491);
Not folded
Folding statement: other_session.89_491 = other_session;
Not folded
Folding statement: switch_core_session_queue_message (other_session.89_490, msg_487);
Not folded
Folding statement: other_session.89_490 = other_session;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
Not folded
Folding statement: msg_487->string_arg = D.44773_489;
Not folded
Folding statement: D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
Not folded
Folding statement: other_session.89_488 = other_session;
Not folded
Folding statement: msg_487->from = "src/switch_core_media.c";
Not folded
Folding statement: msg_487->message_id = 21;
Not folded
Folding statement: # DEBUG msg => msg_487
Not folded
Folding statement: msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
Not folded
Folding statement: other_session.89_486 = other_session;
Not folded
Folding statement: switch_channel_set_flag_value (D.44772_485, 101, 1);
Not folded
Folding statement: D.44772_485 = other_session.89_484->channel;
Not folded
Folding statement: other_session.89_484 = other_session;
Not folded
Folding statement: switch_channel_set_flag_value (D.44482_483, 101, 1);
Not folded
Folding statement: D.44482_483 = D.44481_482->channel;
Not folded
Folding statement: D.44481_482 = smh_186->session;
Not folded
Folding statement: switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
Not folded
Folding statement: other_session.89_481 = other_session;
Not folded
Folding PHI node: got_avp_1859 = PHI <got_avp_68(131), got_avp_1740(132), got_avp_1740(133)>
No folding possible
Folding PHI node: got_savp_1739 = PHI <got_savp_74(131), got_savp_1711(132), got_savp_1711(133)>
No folding possible
Folding PHI node: got_udptl_1743 = PHI <got_udptl_1868(131), got_udptl_774(132), got_udptl_774(133)>
No folding possible
Folding statement: if (D.44681_493 == 2)
Not folded
Folding statement: D.44681_493 = m_1764->m_type;
Not folded
Folding statement: if (D.44779_497 != 0)
Not folded
Folding statement: D.44779_497 = D.44778_496 & D.44777_495;
Not folded
Folding statement: D.44778_496 = got_audio_1693 == 0;
Not folded
Folding statement: D.44777_495 = D.44697_494 != 0;
Not folded
Folding statement: D.44697_494 = m_1764->m_port;
Not folded
Folding statement: if (D.44781_498 != 0)
Not folded
Folding statement: D.44781_498 = switch_rtp_has_dtls ();
Not folded
Folding statement: if (D.44784_499 != 0)
Not folded
Folding statement: D.44784_499 = dtls_ok (session_161(D));
Not folded
Folding statement: if (attr_500 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_500
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_1866
Not folded
Folding statement: # DEBUG attr => attr_500
Not folded
Folding statement: attr_500 = m_1764->m_attributes;
Not folded
Folding PHI node: attr_1559 = PHI <attr_506(171), attr_500(167)>
No folding possible
Folding PHI node: got_crypto_361 = PHI <got_crypto_50(171), got_crypto_1866(167)>
No folding possible
Folding statement: if (D.44787_502 == 0)
Not folded
Folding statement: D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
Not folded
Folding statement: D.44590_501 = attr_1559->a_name;
Not folded
Folding statement: if (D.44619_503 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_503
Not folded
Folding statement: D.44619_503 = attr_1559->a_value;
Not folded
Folding statement: if (D.47887_1469 == 0)
Not folded
Folding statement: D.47887_1469 = *D.44619_503;
Not folded
Folding PHI node: got_crypto_50 = PHI <got_crypto_361(168), got_crypto_361(170), 1(421), got_crypto_361(169)>
No folding possible
Folding statement: if (attr_506 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_506
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_50
Not folded
Folding statement: # DEBUG attr => attr_506
Not folded
Folding statement: attr_506 = attr_1559->a_next;
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_50
Not folded
Folding PHI node: .MEM_1122 = PHI <.MEM_1290(165), .MEM_1291(166)>
No folding possible
Folding statement: if (attr_507 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_507
Not folded
Folding statement: # DEBUG ptime => dptime_1035
Not folded
Folding statement: # DEBUG maxptime => dmaxptime_1005
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_1866
Not folded
Folding statement: # DEBUG attr => attr_507
Not folded
Folding statement: attr_507 = m_1764->m_attributes;
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_1866
Not folded
Folding PHI node: attr_1599 = PHI <attr_548(200), attr_507(172), attr_77(435)>
No folding possible
Folding PHI node: ptime_1475 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(435)>
No folding possible
Folding PHI node: maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>
No folding possible
Folding PHI node: got_crypto_1118 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_95(435)>
No folding possible
Folding PHI node: .MEM_1108 = PHI <.MEM_1124(200), .MEM_1122(172), .MEM_1291(435)>
No folding possible
Folding statement: if (D.44795_509 == 0)
Not folded
Folding statement: D.44795_509 = strcasecmp (D.44590_508, "rtcp");
Not folded
Folding statement: D.44590_508 = attr_1599->a_name;
Not folded
Folding statement: if (D.44619_510 != 0B)
Not folded
Folding statement: D.44619_510 = attr_1599->a_value;
Not folded
Folding statement: if (D.44800_517 == 0B)
Not folded
Folding statement: D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
Not folded
Folding statement: D.44471_516 = smh_186->mparams;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;
Not folded
Folding statement: D.44799_515 = (short unsigned int) D.47890_1471;
Not folded
Folding statement: D.47890_1471 = strtol (D.44619_513, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_513
Not folded
Folding statement: D.44619_513 = attr_1599->a_value;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_510, 1);
Not folded
Folding statement: D.44530_511 = session_161(D)->channel;
Not folded
Folding statement: D.44471_516->rtcp_audio_interval_msec = "5000";
Not folded
Folding statement: if (D.44805_520 == 0)
Not folded
Folding statement: D.44805_520 = strcasecmp (D.44590_508, "ptime");
Not folded
Folding statement: if (D.44619_521 != 0B)
Not folded
Folding statement: D.44619_521 = attr_1599->a_value;
Not folded
Folding statement: # DEBUG ptime => NULL
Not folded
Folding statement: ptime_1472 = strtol (D.44619_521, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_521
Not folded
Folding statement: if (D.44810_525 == 0)
Not folded
Folding statement: D.44810_525 = strcasecmp (D.44590_508, "maxptime");
Not folded
Folding statement: if (D.44619_526 != 0B)
Not folded
Folding statement: D.44619_526 = attr_1599->a_value;
Not folded
Folding statement: # DEBUG maxptime => NULL
Not folded
Folding statement: maxptime_1473 = strtol (D.44619_526, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_526
Not folded
Folding statement: if (got_crypto_1118 <= 0)
Not folded
Folding statement: if (D.44815_530 == 0)
Not folded
Folding statement: D.44815_530 = strcasecmp (D.44590_508, "crypto");
Not folded
Folding statement: if (D.44619_531 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_531
Not folded
Folding statement: D.44619_531 = attr_1599->a_value;
Not folded
Folding statement: if (D.47900_1474 == 0)
Not folded
Folding statement: D.47900_1474 = *D.44619_531;
Not folded
Folding statement: if (D.44825_537 != 0B)
Not folded
Folding statement: # DEBUG expr => D.44825_537
Not folded
Folding statement: D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
Not folded
Folding statement: D.44530_536 = session_161(D)->channel;
Not folded
Folding statement: if (D.49723_1590 == 0)
Not folded
Folding statement: D.49723_1590 = strcasecmp (D.44825_537, "yes");
Not folded
Folding statement: if (D.49724_1591 == 0)
Not folded
Folding statement: D.49724_1591 = strcasecmp (D.44825_537, "on");
Not folded
Folding statement: if (D.49725_1592 == 0)
Not folded
Folding statement: D.49725_1592 = strcasecmp (D.44825_537, "true");
Not folded
Folding statement: if (D.49726_1593 == 0)
Not folded
Folding statement: D.49726_1593 = strcasecmp (D.44825_537, "t");
Not folded
Folding statement: if (D.49727_1594 == 0)
Not folded
Folding statement: D.49727_1594 = strcasecmp (D.44825_537, "enabled");
Not folded
Folding statement: if (D.49728_1595 == 0)
Not folded
Folding statement: D.49728_1595 = strcasecmp (D.44825_537, "active");
Not folded
Folding statement: if (D.49729_1596 == 0)
Not folded
Folding statement: D.49729_1596 = strcasecmp (D.44825_537, "allow");
Not folded
Folding statement: if (D.49730_1597 != 0)
Not folded
Folding statement: D.49730_1597 = switch_is_number (D.44825_537);
Not folded
Folding statement: if (D.49731_1598 != 0)
Not folded
Folding statement: D.49731_1598 = strtol (D.44825_537, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44825_537
Not folded
Folding PHI node: .MEM_1629 = PHI <.MEM_1295(188), .MEM_1295(189), .MEM_1295(190), .MEM_1295(191), .MEM_1295(192), .MEM_1295(193), .MEM_1295(194), .MEM_1647(196)>
No folding possible
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
Not folded
Folding PHI node: .MEM_1123 = PHI <.MEM_1108(422), .MEM_1629(197), .MEM_1884(423)>
No folding possible
Folding statement: # DEBUG got_crypto => got_crypto_547
Not folded
Folding statement: got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));
Not folded
Folding statement: # DEBUG crypto_tag => NULL
Not folded
Folding statement: crypto_tag_1476 = strtol (crypto_544, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => crypto_544
Not folded
Folding statement: # DEBUG crypto => crypto_544
Not folded
Folding statement: crypto_544 = attr_1599->a_value;
Not folded
Folding PHI node: ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>
No folding possible
Folding PHI node: maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>
No folding possible
Folding PHI node: got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
No folding possible
Folding PHI node: .MEM_1124 = PHI <.MEM_1294(176), .MEM_1527(179), .MEM_1529(182), .MEM_1108(183), .MEM_1108(184), .MEM_1108(186), .MEM_1298(199), .MEM_1293(175), .MEM_1108(185)>
No folding possible
Folding statement: if (attr_548 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_548
Not folded
Folding statement: # DEBUG ptime => ptime_34
Not folded
Folding statement: # DEBUG maxptime => maxptime_38
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_53
Not folded
Folding statement: # DEBUG attr => attr_548
Not folded
Folding statement: attr_548 = attr_1599->a_next;
Not folded
Folding statement: # DEBUG ptime => ptime_34
Not folded
Folding statement: # DEBUG maxptime => maxptime_38
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_53
Not folded
Folding PHI node: ptime_1033 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(167)>
No folding possible
Folding PHI node: maxptime_1040 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(167)>
No folding possible
Folding PHI node: got_crypto_969 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_1866(167)>
No folding possible
Folding PHI node: .MEM_1579 = PHI <.MEM_1124(200), .MEM_1122(172), .MEM_1291(167)>
No folding possible
Folding statement: if (D.44836_551 != 0)
Not folded
Folding statement: D.44836_551 = D.44834_549 & D.44835_550;
Not folded
Folding statement: D.44835_550 = got_savp_1739 != 0;
Not folded
Folding statement: D.44834_549 = got_crypto_969 == -1;
Not folded
Folding statement: if (D.44839_552 == 0)
Not folded
Folding statement: D.44839_552 = got_avp_1859 | got_webrtc_78;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
Not folded
Folding statement: if (connection_555 != 0B)
Not folded
Folding statement: connection_555 = m_1764->m_connections;
Not folded
Folding statement: # DEBUG connection => connection_554
Not folded
Folding statement: connection_554 = sdp_198->sdp_connection;
Not folded
Folding statement: if (connection_554 == 0B)
Not folded
Folding statement: # DEBUG connection => connection_554
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
Not folded
Folding PHI node: connection_139 = PHI <connection_554(205), connection_555(204)>
No folding possible
Folding statement: if (map_559 != 0B)
Not folded
Folding statement: # DEBUG match => match_1800
Not folded
Folding statement: # DEBUG best_te => best_te_680
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_1717
Not folded
Folding statement: # DEBUG x => NULL
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_477
Not folded
Folding statement: # DEBUG m_idx => m_idx_1869
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_1749
Not folded
Folding statement: # DEBUG map => map_559
Not folded
Folding statement: # DEBUG map => map_559
Not folded
Folding statement: map_559 = m_1764->m_rtpmaps;
Not folded
Folding statement: # DEBUG x => 0
Not folded
Folding PHI node: match_1901 = PHI <match_7(271), match_1800(207)>
No folding possible
Folding PHI node: best_te_1898 = PHI <best_te_19(271), best_te_680(207)>
No folding possible
Folding PHI node: cng_pt_1667 = PHI <cng_pt_24(271), cng_pt_1717(207)>
No folding possible
Folding PHI node: codec_ms_1720 = PHI <codec_ms_91(271), codec_ms_477(207)>
No folding possible
Folding PHI node: m_idx_792 = PHI <m_idx_103(271), m_idx_1869(207)>
No folding possible
Folding PHI node: nm_idx_1755 = PHI <nm_idx_117(271), nm_idx_1749(207)>
No folding possible
Folding PHI node: map_1728 = PHI <map_711(271), map_559(207)>
No folding possible
Folding PHI node: .MEM_1171 = PHI <.MEM_1135(271), .MEM_1579(207)>
No folding possible
Folding statement: if (rm_encoding_561 == 0B)
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_561
Not folded
Folding statement: rm_encoding_561 = map_1728->rm_encoding;
Not folded
Folding statement: codec_fmtp = {};
Not folded
Folding statement: # DEBUG map_bit_rate => 0
Not folded
Folding PHI node: rm_encoding_130 = PHI <rm_encoding_561(209), ""(208)>
No folding possible
Folding statement: if (D.44848_563 == 0)
Not folded
Folding statement: D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_130
Not folded
Folding statement: if (best_te_1898 == 0)
Not folded
Folding statement: if (D.44854_564 == D.44855_566)
Not folded
Folding statement: D.44855_566 = D.44750_565->rm_rate;
Not folded
Folding statement: D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44854_564 = map_1728->rm_rate;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
Not folded
Folding statement: D.44857_569 = (int) best_te_568;
Not folded
Folding statement: # DEBUG best_te => best_te_568
Not folded
Folding statement: best_te_568 = (switch_payload_t) D.44856_567;
Not folded
Folding statement: D.44856_567 = map_1728->rm_pt;
Not folded
Folding statement: if (D.44858_570 == 0)
Not folded
Folding statement: D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
Not folded
Folding statement: if (cng_pt_1667 == 0)
Not folded
Folding statement: if (D.44863_571 == 0)
Not folded
Folding statement: D.44863_571 = strcasecmp (rm_encoding_130, "CN");
Not folded
Folding statement: if (D.44605_574 != 0B)
Not folded
Folding statement: D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_573
Not folded
Folding statement: cng_pt_573 = (switch_payload_t) D.44856_572;
Not folded
Folding statement: D.44856_572 = map_1728->rm_pt;
Not folded
Folding statement: switch_rtp_set_cng_pt (D.44605_576, D.44869_578);
Not folded
Folding statement: D.44869_578 = D.44471_577->cng_pt;
Not folded
Folding statement: D.44471_577 = smh_186->mparams;
Not folded
Folding statement: D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
Not folded
Folding statement: D.44868_575 = (int) cng_pt_573;
Not folded
Folding statement: if (match_1901 != 0)
Not folded
Folding statement: # DEBUG x => NULL
Not folded
Folding statement: if (maxptime_1040 != 0)
Not folded
Folding statement: # DEBUG codec_ms => ptime_1033
Not folded
Folding statement: if (D.44879_584 != 0)
Not folded
Folding statement: D.44879_584 = D.44878_583 | D.44877_582;
Not folded
Folding statement: D.44878_583 = ptime_1033 > maxptime_1040;
Not folded
Folding statement: D.44877_582 = ptime_1033 == 0;
Not folded
Folding statement: if (ptime_1033 == 0)
Not folded
Folding statement: # DEBUG codec_ms => ptime_1033
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_589
Not folded
Folding statement: codec_ms_589 = (int) D.44885_588;
Not folded
Folding statement: D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
Not folded
Folding statement: D.44884_587 = (uint32_t) D.44856_586;
Not folded
Folding statement: D.44856_586 = map_1728->rm_pt;
Not folded
Folding PHI node: codec_ms_87 = PHI <codec_ms_1883(424), codec_ms_589(224), ptime_1033(223)>
No folding possible
Folding PHI node: .MEM_1128 = PHI <.MEM_1303(424), .MEM_1306(224), .MEM_1303(223)>
No folding possible
Folding statement: if (csui.173_591 <= 18)
Not folded
Folding statement: # DEBUG payload => csui.173_591
Not folded
Folding statement: csui.173_591 = (unsigned char) D.44856_590;
Not folded
Folding statement: D.44856_590 = map_1728->rm_pt;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_87
Not folded
Folding statement: map_bit_rate_1479 = CSWTCH.174[csui.173_591];
Not folded
Folding statement: <L499>:
Not folded
Folding PHI node: map_bit_rate_1480 = PHI <0(225), map_bit_rate_1479(226)>
No folding possible
Folding statement: if (ptime_1033 == 0)
Not folded
Folding statement: # DEBUG map_bit_rate => NULL
Not folded
Folding statement: <L501>:
Not folded
Folding statement: <L500>:
Not folded
Folding statement: if (D.44890_594 == 0)
Not folded
Folding statement: D.44890_594 = strcasecmp (D.44889_593, "g723");
Not folded
Folding statement: D.44889_593 = map_1728->rm_encoding;
Not folded
Folding statement: # DEBUG codec_ms => 33
Not folded
Folding PHI node: codec_ms_88 = PHI <codec_ms_87(227), codec_ms_87(228), 33(229)>
No folding possible
Folding statement: if (D.44893_598 == 0B)
Not folded
Folding statement: # DEBUG s => D.44893_598
Not folded
Folding statement: D.44893_598 = map_1728->rm_fmtp;
Not folded
Folding statement: memset (&codec_fmtp, 0, 16);
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => 0
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_596
Not folded
Folding statement: remote_codec_rate_596 = map_1728->rm_rate;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_88
Not folded
Folding statement: if (D.47915_1481 == 0)
Not folded
Folding statement: D.47915_1481 = *D.44893_598;
Not folded
Folding statement: if (D.44897_601 == 0)
Not folded
Folding statement: D.44897_601 = strcasecmp (D.44889_600, "ilbc");
Not folded
Folding statement: D.44889_600 = map_1728->rm_encoding;
Not folded
Folding statement: if (D.44901_605 == 0)
Not folded
Folding statement: D.44901_605 = strcasecmp (D.44889_600, "isac");
Not folded
Folding statement: # DEBUG map_bit_rate => 32001
Not folded
Folding statement: # DEBUG codec_ms => 39
Not folded
Folding statement: if (D.44908_612 != 0)
Not folded
Folding statement: D.44908_612 = codec_fmtp.bits_per_second;
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_614
Not folded
Folding statement: map_bit_rate_614 = (uint32_t) D.44908_612;
Not folded
Folding PHI node: map_bit_rate_131 = PHI <map_bit_rate_1480(235), map_bit_rate_614(236)>
No folding possible
Folding statement: if (D.44911_615 != 0)
Not folded
Folding statement: D.44911_615 = codec_fmtp.microseconds_per_packet;
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_131
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_617
Not folded
Folding statement: codec_ms_617 = D.44911_615 / 1000;
Not folded
Folding PHI node: codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>
No folding possible
Folding statement: if (fmtp_remote_codec_rate_618 != 0)
Not folded
Folding statement: fmtp_remote_codec_rate_618 = codec_fmtp.actual_samples_per_second;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_89
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_618
Not folded
Folding PHI node: codec_ms_90 = PHI <codec_ms_88(233), codec_ms_88(425), codec_ms_89(239), codec_ms_89(240), 32(232), 39(234)>
No folding possible
Folding PHI node: fmtp_remote_codec_rate_99 = PHI <0(233), 0(425), 0(239), fmtp_remote_codec_rate_618(240), 0(232), 0(234)>
No folding possible
Folding PHI node: map_bit_rate_132 = PHI <map_bit_rate_1480(233), map_bit_rate_1480(425), map_bit_rate_131(239), map_bit_rate_131(240), 13332(232), 32001(234)>
No folding possible
Folding PHI node: .MEM_1129 = PHI <.MEM_1307(233), .MEM_1308(425), .MEM_1308(239), .MEM_1308(240), .MEM_1307(232), .MEM_1307(234)>
No folding possible
Folding statement: if (D.44999_1152 != 0)
Not folded
Folding statement: D.44999_1152 = D.44998_1609 & D.44997_1496;
Not folded
Folding statement: D.44998_1609 = total_codecs_85 > 0;
Not folded
Folding statement: D.44997_1496 = D.44996_1498 > 0;
Not folded
Folding statement: D.44996_1498 = D.44471_1501->num_codecs;
Not folded
Folding statement: D.44471_1501 = smh_186->mparams;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_596
Not folded
Folding statement: # DEBUG m_idx => m_idx_792
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_1755
Not folded
Folding statement: # DEBUG i => 0
Not folded
Folding statement: # DEBUG i => 0
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_90
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_132
Not folded
Folding PHI node: remote_codec_rate_1493 = PHI <remote_codec_rate_97(269), remote_codec_rate_596(241)>
No folding possible
Folding PHI node: m_idx_1487 = PHI <m_idx_100(269), m_idx_792(241)>
No folding possible
Folding PHI node: nm_idx_1139 = PHI <nm_idx_115(269), nm_idx_1755(241)>
No folding possible
Folding PHI node: i_1622 = PHI <i_710(269), 0(241)>
No folding possible
Folding PHI node: .MEM_1138 = PHI <.MEM_1132(269), .MEM_1129(241)>
No folding possible
Folding statement: if (D.44921_633 != 0)
Not folded
Folding statement: D.44921_633 = imp_629->codec_type;
Not folded
Folding statement: # DEBUG codec_rate => codec_rate_632
Not folded
Folding statement: codec_rate_632 = imp_629->samples_per_second;
Not folded
Folding statement: # DEBUG bit_rate => bit_rate_631
Not folded
Folding statement: bit_rate_631 = (uint32_t) D.44920_630;
Not folded
Folding statement: D.44920_630 = imp_629->bits_per_second;
Not folded
Folding statement: # DEBUG imp => imp_629
Not folded
Folding statement: imp_629 = *D.44919_628;
Not folded
Folding statement: D.44919_628 = codec_array_84 + D.44918_627;
Not folded
Folding statement: D.44918_627 = i.91_626 * 4;
Not folded
Folding statement: i.91_626 = (unsigned int) i_1622;
Not folded
Folding statement: if (D.44889_642 == 0B)
Not folded
Folding statement: # DEBUG s => D.44889_642
Not folded
Folding statement: D.44889_642 = map_1728->rm_encoding;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
Not folded
Folding statement: D.44930_641 = D.44929_640 / 1000;
Not folded
Folding statement: D.44929_640 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44928_639 = (int) D.44927_638;
Not folded
Folding statement: D.44927_638 = imp_629->ianacode;
Not folded
Folding statement: D.44926_637 = imp_629->iananame;
Not folded
Folding statement: remote_codec_rate.92_636 = (int) remote_codec_rate_1493;
Not folded
Folding statement: D.44924_635 = (int) D.44856_634;
Not folded
Folding statement: D.44856_634 = map_1728->rm_pt;
Not folded
Folding statement: if (D.47919_1483 == 0)
Not folded
Folding statement: D.47919_1483 = *D.44889_642;
Not folded
Folding statement: if (D.44924_650 <= 95)
Not folded
Folding statement: D.44924_650 = (int) D.44856_649;
Not folded
Folding statement: D.44856_649 = map_1728->rm_pt;
Not folded
Folding statement: # DEBUG match => match_655
Not folded
Folding statement: match_655 = D.44924_650 == D.44928_654;
Not folded
Folding statement: D.44928_654 = (int) D.44927_653;
Not folded
Folding statement: D.44927_653 = imp_629->ianacode;
Not folded
Folding statement: if (D.44944_657 == 0)
Not folded
Folding statement: D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
Not folded
Folding statement: D.44926_656 = imp_629->iananame;
Not folded
Folding statement: if (remote_codec_rate_1493 == codec_rate_632)
Not folded
Folding statement: iftmp.93_765 = fmtp_remote_codec_rate_99 == D.44947_658;
Not folded
Folding statement: D.44947_658 = imp_629->actual_samples_per_second;
Not folded
Folding PHI node: iftmp.93_144 = PHI <iftmp.93_765(249), 0(247), 1(248)>
No folding possible
Folding statement: if (fmtp_remote_codec_rate_99 != 0)
Not folded
Folding statement: # DEBUG match => match_661
Not folded
Folding statement: match_661 = (uint8_t) iftmp.93_144;
Not folded
Folding PHI node: match_1 = PHI <match_655(246), match_661(251), match_661(250)>
No folding possible
Folding PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_1493(246), remote_codec_rate_1493(251), fmtp_remote_codec_rate_99(250)>
No folding possible
Folding statement: if (D.44952_665 != 0)
Not folded
Folding statement: D.44952_665 = D.44950_663 & D.44951_664;
Not folded
Folding statement: D.44951_664 = bit_rate_631 != 0;
Not folded
Folding statement: D.44950_663 = (_Bool) match_1;
Not folded
Folding statement: # DEBUG match => match_1
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_96
Not folded
Folding statement: if (D.44957_668 != 0)
Not folded
Folding statement: D.44957_668 = D.44956_667 & D.44955_666;
Not folded
Folding statement: D.44956_667 = map_bit_rate_132 != bit_rate_631;
Not folded
Folding statement: D.44955_666 = map_bit_rate_132 != 0;
Not folded
Folding statement: if (D.44960_670 != 0)
Not folded
Folding statement: D.44960_670 = strcasecmp (D.44889_642, "ilbc");
Not folded
Folding statement: if (D.44963_672 != 0)
Not folded
Folding statement: D.44963_672 = strcasecmp (D.44889_642, "isac");
Not folded
Folding PHI node: match_2 = PHI <match_1(252), 1(253), 1(254), 1(255)>
No folding possible
Folding statement: if (D.44969_676 != 0)
Not folded
Folding statement: D.44969_676 = D.44950_674 & D.44968_675;
Not folded
Folding statement: D.44968_675 = remote_codec_rate_96 != 0;
Not folded
Folding statement: D.44950_674 = (_Bool) match_2;
Not folded
Folding statement: # DEBUG match => match_2
Not folded
Folding statement: if (D.44974_679 != 0)
Not folded
Folding statement: D.44974_679 = D.44973_678 & D.44972_677;
Not folded
Folding statement: D.44973_678 = remote_codec_rate_96 != codec_rate_632;
Not folded
Folding statement: D.44972_677 = codec_rate_632 != 0;
Not folded
Folding statement: if (D.44977_681 == 0)
Not folded
Folding statement: D.44977_681 = strcasecmp (D.44889_642, "pcma");
Not folded
Folding statement: if (D.44979_683 == 0)
Not folded
Folding statement: D.44979_683 = strcasecmp (D.44889_642, "pcmu");
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
Not folded
Folding statement: if (match_2 != 0)
Not folded
Folding statement: # DEBUG match => match_2
Not folded
Folding statement: if (scrooge_80 != 0)
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
Not folded
Folding statement: D.44930_688 = D.44929_687 / 1000;
Not folded
Folding statement: D.44929_687 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44984_686 = imp_629->samples_per_second;
Not folded
Folding statement: D.44926_685 = imp_629->iananame;
Not folded
Folding statement: if (D.44991_691 != 0)
Not folded
Folding statement: D.44991_691 = D.44990_690 & D.44989_689;
Not folded
Folding statement: D.44990_690 = codec_ms_90 != 0;
Not folded
Folding statement: D.44989_689 = ptime_1033 != 0;
Not folded
Folding statement: if (D.44993_692 != D.44929_693)
Not folded
Folding statement: D.44929_693 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44993_692 = codec_ms_90 * 1000;
Not folded
Folding statement: if (remote_codec_rate_96 != codec_rate_632)
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_701
Not folded
Folding statement: nm_idx_701 = nm_idx_1139 + 1;
Not folded
Folding statement: near_matches[nm_idx_1139].map = map_1728;
Not folded
Folding statement: near_matches[nm_idx_1139].imp = imp_629;
Not folded
Folding statement: near_matches[nm_idx_1139].rate = remote_codec_rate.92_700;
Not folded
Folding statement: remote_codec_rate.92_700 = (int) remote_codec_rate_96;
Not folded
Folding statement: near_matches[nm_idx_1139].codec_idx = i_1622;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
Not folded
Folding statement: D.44930_699 = D.44929_698 / 1000;
Not folded
Folding statement: D.44929_698 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44928_697 = (int) D.44927_696;
Not folded
Folding statement: D.44927_696 = imp_629->ianacode;
Not folded
Folding statement: D.44926_695 = imp_629->iananame;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding PHI node: .MEM_1131 = PHI <.MEM_1311(263), .MEM_1309(266)>
No folding possible
Folding statement: if (m_idx_703 > 29)
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
Not folded
Folding statement: D.44930_708 = D.44929_707 / 1000;
Not folded
Folding statement: D.44929_707 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44928_706 = (int) D.44927_705;
Not folded
Folding statement: D.44927_705 = imp_629->ianacode;
Not folded
Folding statement: D.44926_704 = imp_629->iananame;
Not folded
Folding statement: # DEBUG m_idx => m_idx_703
Not folded
Folding statement: m_idx_703 = m_idx_1487 + 1;
Not folded
Folding statement: matches[m_idx_1487].map = map_1728;
Not folded
Folding statement: matches[m_idx_1487].imp = imp_629;
Not folded
Folding statement: matches[m_idx_1487].rate = codec_rate.94_702;
Not folded
Folding statement: codec_rate.94_702 = (int) codec_rate_632;
Not folded
Folding statement: matches[m_idx_1487].codec_idx = i_1622;
Not folded
Folding PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>
No folding possible
Folding PHI node: m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>
No folding possible
Folding PHI node: nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
No folding possible
Folding PHI node: .MEM_1132 = PHI <.MEM_1138(242), .MEM_1310(260), .MEM_1316(267), .MEM_1321(268), .MEM_1309(261), .MEM_1309(255)>
No folding possible
Folding statement: if (D.44999_625 != 0)
Not folded
Folding statement: D.44999_625 = D.44998_624 & D.44997_623;
Not folded
Folding statement: D.44998_624 = total_codecs_85 > i_710;
Not folded
Folding statement: D.44997_623 = D.44996_622 > i_710;
Not folded
Folding statement: D.44996_622 = D.44471_621->num_codecs;
Not folded
Folding statement: D.44471_621 = smh_186->mparams;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_97
Not folded
Folding statement: # DEBUG m_idx => m_idx_100
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_115
Not folded
Folding statement: # DEBUG i => i_710
Not folded
Folding statement: # DEBUG i => i_710
Not folded
Folding statement: i_710 = i_1622 + 1;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_97
Not folded
Folding statement: # DEBUG m_idx => m_idx_100
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_115
Not folded
Folding PHI node: m_idx_102 = PHI <m_idx_100(269), m_idx_792(241)>
No folding possible
Folding PHI node: nm_idx_901 = PHI <nm_idx_115(269), nm_idx_1755(241)>
No folding possible
Folding PHI node: .MEM_49 = PHI <.MEM_1132(269), .MEM_1129(241)>
No folding possible
Folding statement: if (m_idx_102 > 29)
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG m_idx => m_idx_102
Not folded
Folding PHI node: match_7 = PHI <match_1901(213), match_1901(218), match_1901(212), match_1901(219), 0(270), match_1901(217)>
No folding possible
Folding PHI node: best_te_19 = PHI <best_te_568(213), best_te_1898(218), best_te_1898(212), best_te_1898(219), best_te_1898(270), best_te_1898(217)>
No folding possible
Folding PHI node: cng_pt_24 = PHI <cng_pt_1667(213), cng_pt_573(218), cng_pt_1667(212), cng_pt_1667(219), cng_pt_1667(270), cng_pt_573(217)>
No folding possible
Folding PHI node: codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>
No folding possible
Folding PHI node: m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
No folding possible
Folding PHI node: nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
No folding possible
Folding PHI node: .MEM_1135 = PHI <.MEM_1302(213), .MEM_1305(218), .MEM_1301(212), .MEM_1303(219), .MEM_49(270), .MEM_1303(217)>
No folding possible
Folding statement: if (map_711 != 0B)
Not folded
Folding statement: # DEBUG match => match_7
Not folded
Folding statement: # DEBUG best_te => best_te_19
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_24
Not folded
Folding statement: # DEBUG x => NULL
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_91
Not folded
Folding statement: # DEBUG m_idx => m_idx_103
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_117
Not folded
Folding statement: # DEBUG map => map_711
Not folded
Folding statement: # DEBUG map => map_711
Not folded
Folding statement: map_711 = map_1728->rm_next;
Not folded
Folding statement: # DEBUG match => match_7
Not folded
Folding statement: # DEBUG best_te => best_te_19
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_24
Not folded
Folding statement: # DEBUG x => NULL
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_91
Not folded
Folding statement: # DEBUG m_idx => m_idx_103
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_117
Not folded
Folding PHI node: match_9 = PHI <1(268), match_7(271), 0(270), match_1800(207)>
No folding possible
Folding PHI node: codec_ms_93 = PHI <codec_ms_90(268), codec_ms_91(271), codec_ms_90(270), codec_ms_477(207)>
No folding possible
Folding PHI node: m_idx_105 = PHI <m_idx_703(268), m_idx_103(271), m_idx_102(270), m_idx_1869(207)>
No folding possible
Folding PHI node: nm_idx_119 = PHI <nm_idx_1139(268), nm_idx_117(271), nm_idx_901(270), nm_idx_1749(207)>
No folding possible
Folding PHI node: .MEM_1137 = PHI <.MEM_1321(268), .MEM_1135(271), .MEM_49(270), .MEM_1579(207)>
No folding possible
Folding PHI node: best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>
No folding possible
Folding PHI node: cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>
No folding possible
Folding statement: if (D.45004_715 != 0)
Not folded
Folding statement: D.45004_715 = D.45003_714 & D.45002_713;
Not folded
Folding statement: D.45003_714 = got_crypto_969 <= 0;
Not folded
Folding statement: D.45002_713 = D.45001_712 == 1;
Not folded
Folding statement: D.45001_712 = smh_186->crypto_mode;
Not folded
Folding statement: # DEBUG match => match_9
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_93
Not folded
Folding statement: # DEBUG m_idx => m_idx_105
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_119
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
Not folded
Folding statement: if (D.45009_721 != 0)
Not folded
Folding statement: D.45009_721 = D.45008_720 & D.45007_719;
Not folded
Folding statement: D.45008_720 = nm_idx_119 != 0;
Not folded
Folding statement: D.45007_719 = m_idx_105 == 0;
Not folded
Folding statement: # DEBUG match => match_9
Not folded
Folding statement: # DEBUG m_idx => m_idx_105
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_119
Not folded
Folding PHI node: j_1845 = PHI <j_736(282), 0(274)>
No folding possible
Folding PHI node: .MEM_1846 = PHI <.MEM_1325(282), .MEM_1137(274)>
No folding possible
Folding statement: if (near_rate_725 == 0)
Not folded
Folding statement: D.45013_728 = near_match_726->iananame;
Not folded
Folding statement: # DEBUG near_map => near_map_727
Not folded
Folding statement: near_map_727 = near_matches[j_1845].map;
Not folded
Folding statement: # DEBUG near_match => near_match_726
Not folded
Folding statement: near_match_726 = near_matches[j_1845].imp;
Not folded
Folding statement: # DEBUG near_rate => near_rate_725
Not folded
Folding statement: near_rate_725 = (uint32_t) near_rate.96_724;
Not folded
Folding statement: near_rate.96_724 = near_matches[j_1845].rate;
Not folded
Folding statement: # DEBUG timp => 0B
Not folded
Folding statement: near_rate_729 = near_match_726->samples_per_second;
Not folded
Folding PHI node: near_rate_145 = PHI <near_rate_729(276), near_rate_725(275)>
No folding possible
Folding statement: if (num_731 != 0)
Not folded
Folding statement: # DEBUG num => num_731
Not folded
Folding statement: num_731 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);
Not folded
Folding statement: prefs[0] = &tmp;
Not folded
Folding statement: switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);
Not folded
Folding statement: # DEBUG timp => timp_732
Not folded
Folding statement: timp_732 = search[0];
Not folded
Folding PHI node: timp_134 = PHI <timp_732(278), near_match_726(277)>
No folding possible
Folding statement: if (maxptime_1040 == 0)
Not folded
Folding statement: # DEBUG timp => timp_134
Not folded
Folding statement: if (D.45025_735 <= maxptime_1040)
Not folded
Folding statement: D.45025_735 = D.45024_734 / 1000;
Not folded
Folding statement: D.45024_734 = timp_134->microseconds_per_packet;
Not folded
Folding PHI node: j_897 = PHI <j_1845(279), j_1845(280)>
No folding possible
Folding PHI node: timp_872 = PHI <timp_134(279), timp_134(280)>
No folding possible
Folding PHI node: near_rate.96_869 = PHI <near_rate.96_724(279), near_rate.96_724(280)>
No folding possible
Folding PHI node: near_map_863 = PHI <near_map_727(279), near_map_727(280)>
No folding possible
Folding statement: # DEBUG match => 1
Not folded
Folding statement: # DEBUG m_idx => 1
Not folded
Folding statement: # DEBUG m_idx => 1
Not folded
Folding statement: matches[0].map = near_map_863;
Not folded
Folding statement: matches[0].imp = timp_872;
Not folded
Folding statement: matches[0].rate = near_rate.96_869;
Not folded
Folding statement: matches[0].codec_idx = D.45028_742;
Not folded
Folding statement: D.45028_742 = near_matches[j_897].codec_idx;
Not folded
Folding statement: # DEBUG match => 1
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
Not folded
Folding statement: D.45027_740 = timp_872->actual_samples_per_second;
Not folded
Folding statement: D.45025_739 = D.45024_738 / 1000;
Not folded
Folding statement: D.45024_738 = timp_872->microseconds_per_packet;
Not folded
Folding statement: D.45026_737 = timp_872->iananame;
Not folded
Folding statement: if (nm_idx_119 > j_736)
Not folded
Folding statement: # DEBUG j => j_736
Not folded
Folding statement: # DEBUG j => j_736
Not folded
Folding statement: j_736 = j_1845 + 1;
Not folded
Folding statement: if (m_idx_105 != 0)
Not folded
Folding statement: # DEBUG match => match_9
Not folded
Folding statement: # DEBUG m_idx => m_idx_105
Not folded
Folding PHI node: m_idx_1715 = PHI <m_idx_105(283), 1(281)>
No folding possible
Folding PHI node: .MEM_1856 = PHI <.MEM_1137(283), .MEM_1330(281)>
No folding possible
Folding statement: if (greedy_47 != 0)
Not folded
Folding statement: greedy_sort (smh_186, &matches, m_idx_1715, codec_array_84, total_codecs_85);
Not folded
Folding PHI node: .MEM_1141 = PHI <.MEM_1856(284), .MEM_1331(285)>
No folding possible
Folding statement: if (m_idx_1715 > 0)
Not folded
Folding statement: # DEBUG j => 0
Not folded
Folding statement: # DEBUG j => 0
Not folded
Folding statement: smh_186->num_negotiated_codecs = 0;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;
Not folded
Folding statement: # DEBUG match => 1
Not folded
Folding PHI node: j_1881 = PHI <j_807(303), 0(286)>
No folding possible
Folding PHI node: .MEM_1880 = PHI <.MEM_1364(303), .MEM_1333(286)>
No folding possible
Folding statement: if (j_1881 == 0)
Not folded
Folding statement: # DEBUG mmap => mmap_762
Not folded
Folding statement: mmap_762 = matches[j_1881].map;
Not folded
Folding statement: # DEBUG mimp => mimp_761
Not folded
Folding statement: mimp_761 = matches[j_1881].imp;
Not folded
Folding statement: # DEBUG pmap => pmap_760
Not folded
Folding statement: pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
Not folded
Folding statement: D.45043_759 = (uint32_t) D.45042_758;
Not folded
Folding statement: D.45042_758 = D.45041_757 / 1000;
Not folded
Folding statement: D.45041_757 = D.45039_754->microseconds_per_packet;
Not folded
Folding statement: D.45040_755 = D.45039_754->samples_per_second;
Not folded
Folding statement: D.45039_754 = matches[j_1881].imp;
Not folded
Folding statement: D.45038_753 = (uint32_t) D.45037_752;
Not folded
Folding statement: D.45037_752 = D.45034_747->rm_pt;
Not folded
Folding statement: D.45036_750 = D.45034_747->rm_fmtp;
Not folded
Folding statement: D.45035_748 = D.45034_747->rm_encoding;
Not folded
Folding statement: D.45034_747 = matches[j_1881].map;
Not folded
Folding statement: if (D.44605_764 != 0B)
Not folded
Folding statement: D.44605_764 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: pmap_760->current = 1;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_760;
Not folded
Folding statement: switch_rtp_set_default_payload (D.44605_764, D.45048_766);
Not folded
Folding statement: D.45048_766 = pmap_760->pt;
Not folded
Folding PHI node: .MEM_1142 = PHI <.MEM_1334(287), .MEM_1336(288), .MEM_1337(289)>
No folding possible
Folding statement: if (D.45056_776 != 0)
Not folded
Folding statement: D.45056_776 = strcasecmp (D.45051_775, "g722");
Not folded
Folding statement: D.45051_775 = mimp_761->iananame;
Not folded
Folding statement: pmap_760->adv_rm_rate = D.45055_773;
Not folded
Folding statement: pmap_760->rm_rate = D.45055_773;
Not folded
Folding statement: D.45055_773 = mimp_761->samples_per_second;
Not folded
Folding statement: pmap_760->recv_pt = D.45054_772;
Not folded
Folding statement: D.45054_772 = (unsigned char) D.45053_771;
Not folded
Folding statement: D.45053_771 = mmap_762->rm_pt;
Not folded
Folding statement: pmap_760->iananame = D.45052_770;
Not folded
Folding statement: D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
Not folded
Folding statement: D.45051_769 = mimp_761->iananame;
Not folded
Folding statement: pmap_760->rm_encoding = D.45050_768;
Not folded
Folding statement: D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
Not folded
Folding statement: D.45049_767 = mmap_762->rm_encoding;
Not folded
Folding statement: pmap_760->rm_rate = D.45059_777;
Not folded
Folding statement: D.45059_777 = mimp_761->actual_samples_per_second;
Not folded
Folding PHI node: .MEM_1143 = PHI <.MEM_1344(290), .MEM_1345(291)>
No folding possible
Folding statement: if (D.45066_783 != 0B)
Not folded
Folding statement: D.45066_783 = mmap_762->rm_params;
Not folded
Folding statement: pmap_760->bitrate = D.45064_782;
Not folded
Folding statement: D.45064_782 = (uint32_t) D.45063_781;
Not folded
Folding statement: D.45063_781 = mimp_761->bits_per_second;
Not folded
Folding statement: pmap_760->codec_ms = D.45062_780;
Not folded
Folding statement: D.45062_780 = (uint32_t) D.45061_779;
Not folded
Folding statement: D.45061_779 = D.45060_778 / 1000;
Not folded
Folding statement: D.45060_778 = mimp_761->microseconds_per_packet;
Not folded
Folding statement: D.47922_1485 = strtol (D.45066_783, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.45066_783
Not folded
Folding PHI node: D.47922_146 = PHI <D.47922_1485(293), 1(292)>
No folding possible
Folding PHI node: .MEM_1514 = PHI <.MEM_1537(293), .MEM_1347(292)>
No folding possible
Folding statement: if (D.45070_788 == 0)
Not folded
Folding statement: D.45070_788 = strcasecmp (D.45049_787, "opus");
Not folded
Folding statement: D.45049_787 = mmap_762->rm_encoding;
Not folded
Folding statement: pmap_760->channels = D.47922_146;
Not folded
Folding statement: if (D.47922_146 == 1)
Not folded
Folding statement: pmap_760->adv_channels = 1;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
Not folded
Folding statement: pmap_760->adv_channels = 2;
Not folded
Folding PHI node: .MEM_1144 = PHI <.MEM_1350(296), .MEM_1351(297)>
No folding possible
Folding statement: if (D.45079_790 == 0B)
Not folded
Folding statement: # DEBUG s => D.45079_790
Not folded
Folding statement: D.45079_790 = mmap_762->rm_fmtp;
Not folded
Folding statement: if (D.47926_1486 == 0)
Not folded
Folding statement: D.47926_1486 = *D.45079_790;
Not folded
Folding statement: pmap_760->channels = 2;
Not folded
Folding PHI node: .MEM_1145 = PHI <.MEM_1144(299), .MEM_1352(427), .MEM_1144(298)>
No folding possible
Folding statement: pmap_760->channels = 1;
Not folded
Folding statement: pmap_760->adv_channels = D.47922_146;
Not folded
Folding PHI node: .MEM_1146 = PHI <.MEM_1354(301), .MEM_1355(302), .MEM_1353(300)>
No folding possible
Folding statement: if (j_807 < m_idx_1715)
Not folded
Folding statement: # DEBUG j => j_807
Not folded
Folding statement: # DEBUG j => j_807
Not folded
Folding statement: j_807 = j_1881 + 1;
Not folded
Folding statement: pmap_760->recv_pt = D.45054_806;
Not folded
Folding statement: D.45054_806 = (unsigned char) D.45053_805;
Not folded
Folding statement: D.45053_805 = mmap_762->rm_pt;
Not folded
Folding statement: smh_186->num_negotiated_codecs = D.45089_804;
Not folded
Folding statement: D.45089_804 = D.44655_803 + 1;
Not folded
Folding statement: smh_186->negotiated_codecs[D.44655_803] = mimp_761;
Not folded
Folding statement: D.44655_803 = smh_186->num_negotiated_codecs;
Not folded
Folding statement: pmap_760->agreed_pt = D.45054_802;
Not folded
Folding statement: D.45054_802 = (unsigned char) D.45053_801;
Not folded
Folding statement: D.45053_801 = mmap_762->rm_pt;
Not folded
Folding statement: pmap_760->rm_fmtp = D.45088_800;
Not folded
Folding statement: D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
Not folded
Folding statement: D.45079_799 = mmap_762->rm_fmtp;
Not folded
Folding statement: pmap_760->remote_sdp_port = D.45087_798;
Not folded
Folding statement: D.45087_798 = (short unsigned int) D.44697_797;
Not folded
Folding statement: D.44697_797 = m_1764->m_port;
Not folded
Folding statement: pmap_760->remote_sdp_ip = D.45086_796;
Not folded
Folding statement: D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
Not folded
Folding statement: D.45085_795 = connection_139->c_address;
Not folded
Folding PHI node: match_12 = PHI <match_9(282), match_9(283), 0(273)>
No folding possible
Folding PHI node: .MEM_1148 = PHI <.MEM_1325(282), .MEM_1137(283), .MEM_1322(273)>
No folding possible
Folding PHI node: m_idx_1904 = PHI <0(282), m_idx_105(283), 0(273)>
No folding possible
Folding PHI node: nm_idx_1744 = PHI <nm_idx_119(282), nm_idx_119(283), 0(273)>
No folding possible
Folding statement: if (match_12 != 0)
Not folded
Folding statement: # DEBUG match => match_12
Not folded
Folding PHI node: match_1712 = PHI <match_12(304), 1(428)>
No folding possible
Folding PHI node: m_idx_1905 = PHI <m_idx_1904(304), m_idx_1715(428)>
No folding possible
Folding PHI node: nm_idx_841 = PHI <nm_idx_1744(304), nm_idx_119(428)>
No folding possible
Folding PHI node: .MEM_1849 = PHI <.MEM_1148(304), .MEM_1696(428)>
No folding possible
Folding statement: if (D.47933_1489 != 0)
Not folded
Folding statement: D.47933_1489 = D.47934_1488 & 256;
Not folded
Folding statement: D.47934_1488 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
Not folded
Folding statement: # DEBUG codec => D#75
Not folded
Folding statement: # DEBUG D#75 => &MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].read_codec
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);
Not folded
Folding statement: D.44530_818 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45093_817);
Not folded
Folding statement: D.45093_817 = (int) D.45092_816;
Not folded
Folding statement: D.45092_816 = D.44750_815->recv_pt;
Not folded
Folding statement: D.44750_815 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);
Not folded
Folding statement: D.44530_814 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);
Not folded
Folding statement: D.44760_813 = D.44750_812->remote_sdp_ip;
Not folded
Folding statement: D.44750_812 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44530_811 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.44767_810);
Not folded
Folding statement: D.44767_810 = (int) D.44762_809;
Not folded
Folding statement: D.44762_809 = D.44750_808->remote_sdp_port;
Not folded
Folding statement: D.44750_808 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: if (D.47932_1490 != 0B)
Not folded
Folding statement: D.47932_1490 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
Not folded
Folding statement: if (D.47931_1491 != 0B)
Not folded
Folding statement: D.47931_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
Not folded
Folding statement: if (D.47930_1492 != 0B)
Not folded
Folding statement: D.47930_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;
Not folded
Folding PHI node: .MEM_1149 = PHI <.MEM_1369(308), .MEM_1370(309), .MEM_1369(305), .MEM_1369(306), .MEM_1369(307)>
No folding possible
Folding statement: if (D.45099_823 == 0)
Not folded
Folding statement: D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
Not folded
Folding statement: D.45098_822 = D.44471_821->codec_flags;
Not folded
Folding statement: D.44471_821 = smh_186->mparams;
Not folded
Folding statement: check_ice (smh_186, 0, sdp_198, m_1764);
Not folded
Folding statement: # DEBUG got_audio => 1
Not folded
Folding PHI node: match_13 = PHI <0(304), match_1712(311), 0(310)>
No folding possible
Folding PHI node: got_audio_65 = PHI <0(304), 1(311), 0(310)>
No folding possible
Folding PHI node: .MEM_1150 = PHI <.MEM_1148(304), .MEM_1372(311), .MEM_1371(310)>
No folding possible
Folding PHI node: m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>
No folding possible
Folding PHI node: nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>
No folding possible
Folding statement: if (best_te_1624 == 0)
Not folded
Folding statement: # DEBUG match => match_13
Not folded
Folding statement: # DEBUG got_audio => got_audio_65
Not folded
Folding statement: if (D.45107_826 != 0)
Not folded
Folding statement: D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);
Not folded
Folding statement: if (D.45109_828 != 0)
Not folded
Folding statement: D.45109_828 = switch_channel_test_flag (D.44530_827, 93);
Not folded
Folding statement: D.44530_827 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1151 = PHI <.MEM_1373(313), .MEM_1374(314)>
No folding possible
Folding statement: if (best_te_833 != 0)
Not folded
Folding statement: # DEBUG best_te => best_te_833
Not folded
Folding statement: # DEBUG best_te => best_te_833
Not folded
Folding statement: best_te_833 = D.44471_832->te;
Not folded
Folding statement: D.44471_832 = smh_186->mparams;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);
Not folded
Folding statement: D.45111_831 = (int) D.45110_830;
Not folded
Folding statement: D.45110_830 = D.44471_829->te;
Not folded
Folding statement: D.44471_829 = smh_186->mparams;
Not folded
Folding PHI node: best_te_1860 = PHI <best_te_833(315), best_te_1624(312)>
No folding possible
Folding PHI node: .MEM_1852 = PHI <.MEM_1375(315), .MEM_1150(312)>
No folding possible
Folding statement: if (D.45114_834 == 1)
Not folded
Folding statement: D.45114_834 = switch_channel_direction (channel_162);
Not folded
Folding statement: if (D.44605_840 != 0B)
Not folded
Folding statement: D.44605_840 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: D.44471_839->dtmf_type = 0;
Not folded
Folding statement: D.44471_839 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);
Not folded
Folding statement: D.44530_838 = session_161(D)->channel;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);
Not folded
Folding statement: D.44857_837 = (int) best_te_1860;
Not folded
Folding statement: # DEBUG te => D#11
Not folded
Folding statement: # DEBUG D#11 => D.44471_835->te
Not folded
Folding statement: D.44471_835->te = best_te_1860;
Not folded
Folding statement: D.44471_835 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_837);
Not folded
Folding statement: D.44530_842 = session_161(D)->channel;
Not folded
Folding statement: switch_rtp_set_telephony_event (D.44605_840, best_te_1860);
Not folded
Folding statement: if (D.44605_851 != 0B)
Not folded
Folding statement: D.44605_851 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: D.44471_850->dtmf_type = 0;
Not folded
Folding statement: D.44471_850 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);
Not folded
Folding statement: D.44530_849 = session_161(D)->channel;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);
Not folded
Folding statement: D.45120_848 = (int) best_te_1860;
Not folded
Folding statement: # DEBUG te => best_te_1860
Not folded
Folding statement: D.44471_845->recv_te = best_te_1860;
Not folded
Folding statement: D.44471_845->te = best_te_1860;
Not folded
Folding statement: D.44471_845 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_848);
Not folded
Folding statement: D.44530_856 = session_161(D)->channel;
Not folded
Folding statement: switch_rtp_set_telephony_recv_event (D.44605_855, best_te_1860);
Not folded
Folding statement: D.44605_855 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_848);
Not folded
Folding statement: D.44530_853 = session_161(D)->channel;
Not folded
Folding statement: switch_rtp_set_telephony_event (D.44605_851, best_te_1860);
Not folded
Folding PHI node: .MEM_1851 = PHI <.MEM_1375(315), .MEM_1374(314)>
No folding possible
Folding statement: if (D.45124_858 != 0B)
Not folded
Folding statement: # DEBUG expr => D.45124_858
Not folded
Folding statement: D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
Not folded
Folding statement: if (D.49735_1600 == 0)
Not folded
Folding statement: D.49735_1600 = strcasecmp (D.45124_858, "no");
Not folded
Folding statement: if (D.49736_1601 == 0)
Not folded
Folding statement: D.49736_1601 = strcasecmp (D.45124_858, "off");
Not folded
Folding statement: if (D.49737_1602 == 0)
Not folded
Folding statement: D.49737_1602 = strcasecmp (D.45124_858, "false");
Not folded
Folding statement: if (D.49738_1603 == 0)
Not folded
Folding statement: D.49738_1603 = strcasecmp (D.45124_858, "f");
Not folded
Folding statement: if (D.49739_1604 == 0)
Not folded
Folding statement: D.49739_1604 = strcasecmp (D.45124_858, "disabled");
Not folded
Folding statement: if (D.49740_1605 == 0)
Not folded
Folding statement: D.49740_1605 = strcasecmp (D.45124_858, "inactive");
Not folded
Folding statement: if (D.49741_1606 == 0)
Not folded
Folding statement: D.49741_1606 = strcasecmp (D.45124_858, "disallow");
Not folded
Folding statement: if (D.49742_1607 != 0)
Not folded
Folding statement: D.49742_1607 = switch_is_number (D.45124_858);
Not folded
Folding statement: if (D.49743_1608 == 0)
Not folded
Folding statement: D.49743_1608 = strtol (D.45124_858, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.45124_858
Not folded
Folding PHI node: .MEM_1631 = PHI <.MEM_1392(322), .MEM_1392(323), .MEM_1392(324), .MEM_1392(325), .MEM_1392(326), .MEM_1392(327), .MEM_1392(328), .MEM_1650(330)>
No folding possible
Folding statement: # DEBUG te => D#13
Not folded
Folding statement: # DEBUG D#13 => D.44471_867->recv_te
Not folded
Folding statement: D.44471_867->recv_te = 0;
Not folded
Folding statement: D.44471_867->te = 0;
Not folded
Folding statement: D.44471_867->dtmf_type = 2;
Not folded
Folding statement: D.44471_867 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);
Not folded
Folding statement: D.44530_866 = session_161(D)->channel;
Not folded
Folding statement: if (D.44681_493 == 3)
Not folded
Folding statement: if (D.44697_873 != 0)
Not folded
Folding statement: D.44697_873 = m_1764->m_port;
Not folded
Folding statement: if (connection_880 != 0B)
Not folded
Folding statement: connection_880 = m_1764->m_connections;
Not folded
Folding statement: # DEBUG connection => connection_879
Not folded
Folding statement: connection_879 = sdp_198->sdp_connection;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);
Not folded
Folding statement: D.44530_878 = session_161(D)->channel;
Not folded
Folding statement: memset (&near_matches, 0, 480);
Not folded
Folding statement: memset (&matches, 0, 480);
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG vmatch => 0
Not folded
Folding statement: # DEBUG mimp => 0B
Not folded
Folding statement: if (connection_879 == 0B)
Not folded
Folding statement: # DEBUG connection => connection_879
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
Not folded
Folding PHI node: connection_110 = PHI <connection_879(335), connection_880(334)>
No folding possible
Folding statement: if (map_883 != 0B)
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_1674
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG map => map_883
Not folded
Folding statement: # DEBUG map => map_883
Not folded
Folding statement: map_883 = m_1764->m_rtpmaps;
Not folded
Folding PHI node: got_video_crypto_556 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
No folding possible
Folding PHI node: m_idx_819 = PHI <m_idx_953(392), 0(337)>
No folding possible
Folding PHI node: map_1620 = PHI <map_1021(392), map_883(337)>
No folding possible
Folding PHI node: .MEM_1872 = PHI <.MEM_1090(392), .MEM_1405(337)>
No folding possible
Folding statement: if (D.45137_884 != 0)
Not folded
Folding statement: D.45137_884 = switch_rtp_has_dtls ();
Not folded
Folding statement: if (D.45140_885 != 0)
Not folded
Folding statement: D.45140_885 = dtls_ok (session_161(D));
Not folded
Folding statement: if (attr_886 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_886
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_556
Not folded
Folding statement: # DEBUG attr => attr_886
Not folded
Folding statement: attr_886 = m_1764->m_attributes;
Not folded
Folding PHI node: attr_1850 = PHI <attr_892(344), attr_886(340)>
No folding possible
Folding PHI node: got_video_crypto_1738 = PHI <got_video_crypto_57(344), got_video_crypto_556(340)>
No folding possible
Folding statement: if (D.45143_888 == 0)
Not folded
Folding statement: D.45143_888 = strcasecmp (D.44590_887, "fingerprint");
Not folded
Folding statement: D.44590_887 = attr_1850->a_name;
Not folded
Folding statement: if (D.44619_889 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_889
Not folded
Folding statement: D.44619_889 = attr_1850->a_value;
Not folded
Folding statement: if (D.47939_1495 == 0)
Not folded
Folding statement: D.47939_1495 = *D.44619_889;
Not folded
Folding PHI node: got_video_crypto_57 = PHI <got_video_crypto_1738(341), got_video_crypto_1738(343), 1(430), got_video_crypto_1738(342)>
No folding possible
Folding statement: if (attr_892 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_892
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_57
Not folded
Folding statement: # DEBUG attr => attr_892
Not folded
Folding statement: attr_892 = attr_1850->a_next;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_57
Not folded
Folding PHI node: .MEM_1153 = PHI <.MEM_1407(338), .MEM_1408(339)>
No folding possible
Folding statement: if (attr_893 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_893
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_556
Not folded
Folding statement: # DEBUG attr => attr_893
Not folded
Folding statement: attr_893 = m_1764->m_attributes;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_556
Not folded
Folding PHI node: attr_619 = PHI <attr_978(376), attr_893(345), attr_62(436)>
No folding possible
Folding PHI node: got_video_crypto_1885 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_136(436)>
No folding possible
Folding PHI node: .MEM_1719 = PHI <.MEM_1156(376), .MEM_1153(345), .MEM_1408(436)>
No folding possible
Folding statement: if (D.45151_895 == 0)
Not folded
Folding statement: D.45151_895 = strcasecmp (D.44590_894, "framerate");
Not folded
Folding statement: D.44590_894 = attr_619->a_name;
Not folded
Folding statement: if (D.44619_896 != 0B)
Not folded
Folding statement: D.44619_896 = attr_619->a_value;
Not folded
Folding statement: if (D.45154_898 == 0)
Not folded
Folding statement: D.45154_898 = strcasecmp (D.44590_894, "rtcp-fb");
Not folded
Folding statement: if (D.44619_899 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_899
Not folded
Folding statement: D.44619_899 = attr_619->a_value;
Not folded
Folding statement: if (D.47943_1497 == 0)
Not folded
Folding statement: D.47943_1497 = *D.44619_899;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45164_904;
Not folded
Folding statement: D.45164_904 = D.45163_903 + 1;
Not folded
Folding statement: D.45163_903 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
Not folded
Folding PHI node: .MEM_1154 = PHI <.MEM_1409(431), .MEM_1410(351)>
No folding possible
Folding statement: D.44471_905->rtcp_video_interval_msec = "10000";
Not folded
Folding statement: D.44471_905 = smh_186->mparams;
Not folded
Folding statement: if (D.45168_907 == 0)
Not folded
Folding statement: D.45168_907 = strcasecmp (D.44590_894, "rtcp");
Not folded
Folding statement: if (D.44619_908 != 0B)
Not folded
Folding statement: D.44619_908 = attr_619->a_value;
Not folded
Folding statement: if (D.45174_911 == 49)
Not folded
Folding statement: # DEBUG __result => D#78 + -49
Not folded
Folding statement: # DEBUG D#78 => (int) D.45174_911
Not folded
Folding statement: D.45174_911 = MEM[(const unsigned char *)D.44619_908];
Not folded
Folding statement: # DEBUG __s1 => D.44619_908
Not folded
Folding statement: # DEBUG __s2_len => 1
Not folded
Folding statement: if (D.45185_921 == 0)
Not folded
Folding statement: # DEBUG __result => D#79
Not folded
Folding statement: # DEBUG __result => D#79
Not folded
Folding statement: # DEBUG D#79 => (int) D.45185_921
Not folded
Folding statement: D.45185_921 = MEM[(const unsigned char *)D.44619_908 + 1B];
Not folded
Folding statement: if (D.45214_958 == 0B)
Not folded
Folding statement: D.45214_958 = D.44471_957->rtcp_video_interval_msec;
Not folded
Folding statement: D.44471_957 = smh_186->mparams;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45213_956;
Not folded
Folding statement: D.45213_956 = (short unsigned int) D.47946_1499;
Not folded
Folding statement: D.47946_1499 = strtol (D.44619_954, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_954
Not folded
Folding statement: D.44619_954 = attr_619->a_value;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_908, 1);
Not folded
Folding statement: D.44530_952 = session_161(D)->channel;
Not folded
Folding statement: D.44471_957->rtcp_video_interval_msec = "5000";
Not folded
Folding statement: if (got_video_crypto_1885 == 0)
Not folded
Folding statement: if (D.45219_961 == 0)
Not folded
Folding statement: D.45219_961 = strcasecmp (D.44590_894, "crypto");
Not folded
Folding statement: if (D.44619_962 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_962
Not folded
Folding statement: D.44619_962 = attr_619->a_value;
Not folded
Folding statement: if (D.47950_1500 == 0)
Not folded
Folding statement: D.47950_1500 = *D.44619_962;
Not folded
Folding statement: if (D.45227_968 != 0B)
Not folded
Folding statement: # DEBUG expr => D.45227_968
Not folded
Folding statement: D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);
Not folded
Folding statement: D.44530_967 = session_161(D)->channel;
Not folded
Folding statement: if (D.49747_1610 == 0)
Not folded
Folding statement: D.49747_1610 = strcasecmp (D.45227_968, "yes");
Not folded
Folding statement: if (D.49748_1611 == 0)
Not folded
Folding statement: D.49748_1611 = strcasecmp (D.45227_968, "on");
Not folded
Folding statement: if (D.49749_1612 == 0)
Not folded
Folding statement: D.49749_1612 = strcasecmp (D.45227_968, "true");
Not folded
Folding statement: if (D.49750_1613 == 0)
Not folded
Folding statement: D.49750_1613 = strcasecmp (D.45227_968, "t");
Not folded
Folding statement: if (D.49751_1614 == 0)
Not folded
Folding statement: D.49751_1614 = strcasecmp (D.45227_968, "enabled");
Not folded
Folding statement: if (D.49752_1615 == 0)
Not folded
Folding statement: D.49752_1615 = strcasecmp (D.45227_968, "active");
Not folded
Folding statement: if (D.49753_1616 == 0)
Not folded
Folding statement: D.49753_1616 = strcasecmp (D.45227_968, "allow");
Not folded
Folding statement: if (D.49754_1617 != 0)
Not folded
Folding statement: D.49754_1617 = switch_is_number (D.45227_968);
Not folded
Folding statement: if (D.49755_1618 != 0)
Not folded
Folding statement: D.49755_1618 = strtol (D.45227_968, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.45227_968
Not folded
Folding PHI node: .MEM_1633 = PHI <.MEM_1415(364), .MEM_1415(365), .MEM_1415(366), .MEM_1415(367), .MEM_1415(368), .MEM_1415(369), .MEM_1415(370), .MEM_1653(372)>
No folding possible
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
Not folded
Folding PHI node: .MEM_1155 = PHI <.MEM_1719(432), .MEM_1633(373), .MEM_1864(433)>
No folding possible
Folding statement: # DEBUG got_video_crypto => got_video_crypto_977
Not folded
Folding statement: got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));
Not folded
Folding statement: # DEBUG crypto_tag => NULL
Not folded
Folding statement: crypto_tag_1502 = strtol (crypto_975, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => crypto_975
Not folded
Folding statement: # DEBUG crypto => crypto_975
Not folded
Folding statement: crypto_975 = attr_619->a_value;
Not folded
Folding PHI node: got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
No folding possible
Folding PHI node: .MEM_1156 = PHI <.MEM_1719(347), .MEM_1411(352), .MEM_1414(358), .MEM_1719(359), .MEM_1719(360), .MEM_1719(362), .MEM_1418(375), .MEM_1719(350), .MEM_1413(357), .MEM_1719(349), .MEM_1719(361)>
No folding possible
Folding statement: if (attr_978 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_978
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_60
Not folded
Folding statement: # DEBUG attr => attr_978
Not folded
Folding statement: attr_978 = attr_619->a_next;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_60
Not folded
Folding PHI node: got_video_crypto_960 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_556(340)>
No folding possible
Folding PHI node: .MEM_1882 = PHI <.MEM_1156(376), .MEM_1153(345), .MEM_1408(340)>
No folding possible
Folding statement: if (rm_encoding_979 == 0B)
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_979
Not folded
Folding statement: rm_encoding_979 = map_1620->rm_encoding;
Not folded
Folding PHI node: rm_encoding_137 = PHI <rm_encoding_979(378), ""(377)>
No folding possible
Folding statement: if (total_codecs_85 > 0)
Not folded
Folding statement: # DEBUG m_idx => m_idx_819
Not folded
Folding statement: # DEBUG i => 0
Not folded
Folding statement: # DEBUG i => 0
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_137
Not folded
Folding PHI node: m_idx_910 = PHI <m_idx_109(391), m_idx_819(379)>
No folding possible
Folding PHI node: i_864 = PHI <i_1020(391), 0(379)>
No folding possible
Folding PHI node: .MEM_870 = PHI <.MEM_1160(391), .MEM_1882(379)>
No folding possible
Folding statement: if (D.45238_986 != 1)
Not folded
Folding statement: D.45238_986 = imp_985->codec_type;
Not folded
Folding statement: # DEBUG imp => imp_985
Not folded
Folding statement: imp_985 = *D.45237_984;
Not folded
Folding statement: D.45237_984 = codec_array_84 + D.45236_983;
Not folded
Folding statement: D.45236_983 = i.99_982 * 4;
Not folded
Folding statement: i.99_982 = (unsigned int) i_864;
Not folded
Folding statement: if (D.45241_988 == 0)
Not folded
Folding statement: D.45241_988 = switch_channel_direction (D.44530_987);
Not folded
Folding statement: D.44530_987 = session_161(D)->channel;
Not folded
Folding statement: if (D.45244_990 != 0)
Not folded
Folding statement: D.45244_990 = switch_channel_test_flag (D.44530_989, 114);
Not folded
Folding statement: D.44530_989 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1158 = PHI <.MEM_1419(381), .MEM_1420(382)>
No folding possible
Folding statement: if (D.45255_996 == 0B)
Not folded
Folding statement: # DEBUG s => D.45255_996
Not folded
Folding statement: D.45255_996 = map_1620->rm_encoding;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
Not folded
Folding statement: D.45251_995 = (int) D.45250_994;
Not folded
Folding statement: D.45250_994 = imp_985->ianacode;
Not folded
Folding statement: D.45249_993 = imp_985->iananame;
Not folded
Folding statement: D.45248_992 = (int) D.45247_991;
Not folded
Folding statement: D.45247_991 = map_1620->rm_pt;
Not folded
Folding statement: if (D.47957_1503 == 0)
Not folded
Folding statement: D.47957_1503 = *D.45255_996;
Not folded
Folding statement: if (D.45248_1004 <= 95)
Not folded
Folding statement: D.45248_1004 = (int) D.45247_1003;
Not folded
Folding statement: D.45247_1003 = map_1620->rm_pt;
Not folded
Folding statement: # DEBUG vmatch => vmatch_1009
Not folded
Folding statement: vmatch_1009 = D.45248_1004 == D.45251_1008;
Not folded
Folding statement: D.45251_1008 = (int) D.45250_1007;
Not folded
Folding statement: D.45250_1007 = imp_985->ianacode;
Not folded
Folding statement: # DEBUG vmatch => vmatch_1012
Not folded
Folding statement: vmatch_1012 = D.45259_1011 == 0;
Not folded
Folding statement: D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
Not folded
Folding statement: D.45249_1010 = imp_985->iananame;
Not folded
Folding PHI node: vmatch_138 = PHI <vmatch_1009(386), vmatch_1012(387)>
No folding possible
Folding statement: if (vmatch_138 != 0)
Not folded
Folding statement: # DEBUG vmatch => vmatch_138
Not folded
Folding statement: if (D.45262_1013 == D.45263_1014)
Not folded
Folding statement: D.45263_1014 = imp_985->samples_per_second;
Not folded
Folding statement: D.45262_1013 = map_1620->rm_rate;
Not folded
Folding statement: # DEBUG m_idx => m_idx_1018
Not folded
Folding statement: m_idx_1018 = m_idx_910 + 1;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
Not folded
Folding statement: D.45251_1017 = (int) D.45250_1016;
Not folded
Folding statement: D.45250_1016 = imp_985->ianacode;
Not folded
Folding statement: D.45249_1015 = imp_985->iananame;
Not folded
Folding statement: matches[m_idx_910].map = map_1620;
Not folded
Folding statement: matches[m_idx_910].imp = imp_985;
Not folded
Folding PHI node: m_idx_109 = PHI <m_idx_910(380), m_idx_910(382), m_idx_910(389), m_idx_910(388), m_idx_1018(390)>
No folding possible
Folding PHI node: .MEM_1160 = PHI <.MEM_870(380), .MEM_1420(382), .MEM_1421(389), .MEM_1421(388), .MEM_1424(390)>
No folding possible
Folding statement: if (total_codecs_85 > i_1020)
Not folded
Folding statement: # DEBUG m_idx => m_idx_109
Not folded
Folding statement: # DEBUG i => i_1020
Not folded
Folding statement: # DEBUG i => i_1020
Not folded
Folding statement: i_1020 = i_864 + 1;
Not folded
Folding statement: # DEBUG m_idx => m_idx_109
Not folded
Folding PHI node: m_idx_953 = PHI <m_idx_109(391), m_idx_819(379)>
No folding possible
Folding PHI node: .MEM_1090 = PHI <.MEM_1160(391), .MEM_1882(379)>
No folding possible
Folding statement: if (map_1021 != 0B)
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_960
Not folded
Folding statement: # DEBUG m_idx => m_idx_953
Not folded
Folding statement: # DEBUG map => map_1021
Not folded
Folding statement: # DEBUG map => map_1021
Not folded
Folding statement: map_1021 = map_1620->rm_next;
Not folded
Folding PHI node: got_video_crypto_959 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
No folding possible
Folding PHI node: m_idx_906 = PHI <m_idx_953(392), 0(337)>
No folding possible
Folding PHI node: .MEM_1873 = PHI <.MEM_1090(392), .MEM_1405(337)>
No folding possible
Folding statement: if (D.45267_1025 != 0)
Not folded
Folding statement: D.45267_1025 = D.45266_1024 & D.45002_1023;
Not folded
Folding statement: D.45266_1024 = got_video_crypto_959 <= 0;
Not folded
Folding statement: D.45002_1023 = D.45001_1022 == 1;
Not folded
Folding statement: D.45001_1022 = smh_186->crypto_mode;
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG vmatch => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
Not folded
Folding statement: if (m_idx_906 != 0)
Not folded
Folding statement: # DEBUG m_idx => m_idx_906
Not folded
Folding statement: if (greedy_47 != 0)
Not folded
Folding statement: # DEBUG j => 0
Not folded
Folding statement: greedy_sort (smh_186, &matches, m_idx_906, codec_array_84, total_codecs_85);
Not folded
Folding PHI node: .MEM_1164 = PHI <.MEM_1873(396), .MEM_1426(397)>
No folding possible
Folding statement: # DEBUG j => 0
Not folded
Folding statement: # DEBUG j => 0
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;
Not folded
Folding statement: # DEBUG vmatch => 1
Not folded
Folding PHI node: j_1844 = PHI <j_1067(402), 0(398)>
No folding possible
Folding PHI node: .MEM_1843 = PHI <.MEM_1442(402), .MEM_1427(398)>
No folding possible
Folding statement: if (j_1844 == 0)
Not folded
Folding statement: # DEBUG pmap => pmap_1044
Not folded
Folding statement: pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
Not folded
Folding statement: D.45283_1043 = (uint32_t) D.45282_1042;
Not folded
Folding statement: D.45282_1042 = D.45281_1041 / 1000;
Not folded
Folding statement: D.45281_1041 = D.45279_1038->microseconds_per_packet;
Not folded
Folding statement: D.45280_1039 = D.45279_1038->samples_per_second;
Not folded
Folding statement: D.45279_1038 = matches[j_1844].imp;
Not folded
Folding statement: D.45278_1037 = (uint32_t) D.45277_1036;
Not folded
Folding statement: D.45277_1036 = D.45274_1031->rm_pt;
Not folded
Folding statement: D.45276_1034 = D.45274_1031->rm_fmtp;
Not folded
Folding statement: D.45275_1032 = D.45274_1031->rm_encoding;
Not folded
Folding statement: D.45274_1031 = matches[j_1844].map;
Not folded
Folding statement: if (D.45287_1046 != 0B)
Not folded
Folding statement: D.45287_1046 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
Not folded
Folding statement: pmap_1044->current = 1;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1044;
Not folded
Folding statement: switch_rtp_set_default_payload (D.45287_1046, D.45290_1048);
Not folded
Folding statement: D.45290_1048 = pmap_1044->pt;
Not folded
Folding PHI node: .MEM_1165 = PHI <.MEM_1428(399), .MEM_1430(400), .MEM_1431(401)>
No folding possible
Folding statement: if (m_idx_906 > j_1067)
Not folded
Folding statement: # DEBUG j => j_1067
Not folded
Folding statement: # DEBUG j => j_1067
Not folded
Folding statement: j_1067 = j_1844 + 1;
Not folded
Folding statement: pmap_1044->agreed_pt = D.45292_1066;
Not folded
Folding statement: D.45292_1066 = (unsigned char) D.45247_1065;
Not folded
Folding statement: D.45247_1065 = map_1050->rm_pt;
Not folded
Folding statement: pmap_1044->rm_fmtp = D.45298_1064;
Not folded
Folding statement: D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
Not folded
Folding statement: D.45297_1063 = map_1050->rm_fmtp;
Not folded
Folding statement: pmap_1044->remote_sdp_port = D.45087_1062;
Not folded
Folding statement: D.45087_1062 = (short unsigned int) D.44697_1061;
Not folded
Folding statement: D.44697_1061 = m_1764->m_port;
Not folded
Folding statement: pmap_1044->remote_sdp_ip = D.45296_1060;
Not folded
Folding statement: D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);
Not folded
Folding statement: D.45085_1059 = connection_110->c_address;
Not folded
Folding statement: pmap_1044->codec_ms = D.45295_1058;
Not folded
Folding statement: D.45295_1058 = (uint32_t) D.45294_1057;
Not folded
Folding statement: D.45294_1057 = D.45293_1056 / 1000;
Not folded
Folding statement: D.45293_1056 = mimp_1049->microseconds_per_packet;
Not folded
Folding statement: pmap_1044->rm_rate = D.45262_1055;
Not folded
Folding statement: D.45262_1055 = map_1050->rm_rate;
Not folded
Folding statement: pmap_1044->recv_pt = D.45292_1054;
Not folded
Folding statement: D.45292_1054 = (unsigned char) D.45247_1053;
Not folded
Folding statement: D.45247_1053 = map_1050->rm_pt;
Not folded
Folding statement: pmap_1044->rm_encoding = D.45291_1052;
Not folded
Folding statement: D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
Not folded
Folding statement: D.45255_1051 = map_1050->rm_encoding;
Not folded
Folding statement: # DEBUG map => map_1050
Not folded
Folding statement: map_1050 = matches[j_1844].map;
Not folded
Folding statement: # DEBUG mimp => mimp_1049
Not folded
Folding statement: mimp_1049 = matches[j_1844].imp;
Not folded
Folding statement: if (match_1800 == 0)
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);
Not folded
Folding statement: D.44530_1085 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45306_1084);
Not folded
Folding statement: D.45306_1084 = (int) D.45305_1083;
Not folded
Folding statement: D.45305_1083 = D.45286_1082->recv_pt;
Not folded
Folding statement: D.45286_1082 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: switch_core_media_check_video_codecs (session_161(D));
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);
Not folded
Folding statement: D.44530_1081 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45304_1080);
Not folded
Folding statement: D.45304_1080 = (int) D.45303_1079;
Not folded
Folding statement: D.45303_1079 = D.45286_1078->agreed_pt;
Not folded
Folding statement: D.45286_1078 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);
Not folded
Folding statement: D.45302_1077 = D.45286_1076->rm_fmtp;
Not folded
Folding statement: D.45286_1076 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: D.44530_1075 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);
Not folded
Folding statement: D.44530_1074 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);
Not folded
Folding statement: D.45301_1073 = D.45286_1072->remote_sdp_ip;
Not folded
Folding statement: D.45286_1072 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: D.44530_1071 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45300_1070);
Not folded
Folding statement: D.45300_1070 = (int) D.45299_1069;
Not folded
Folding statement: D.45299_1069 = D.45286_1068->remote_sdp_port;
Not folded
Folding statement: D.45286_1068 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding PHI node: match_14 = PHI <match_1800(404), 1(403)>
No folding possible
Folding statement: if (D.47964_1506 != 0)
Not folded
Folding statement: D.47964_1506 = D.47965_1505 & 256;
Not folded
Folding statement: D.47965_1505 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
Not folded
Folding statement: # DEBUG codec => D#74
Not folded
Folding statement: # DEBUG D#74 => &MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].read_codec
Not folded
Folding statement: # DEBUG match => match_14
Not folded
Folding statement: if (D.47963_1507 != 0B)
Not folded
Folding statement: D.47963_1507 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
Not folded
Folding statement: if (D.47962_1508 != 0B)
Not folded
Folding statement: D.47962_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
Not folded
Folding statement: if (D.47961_1509 != 0B)
Not folded
Folding statement: D.47961_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;
Not folded
Folding PHI node: .MEM_1167 = PHI <.MEM_1451(408), .MEM_1452(409), .MEM_1451(405), .MEM_1451(406), .MEM_1451(407)>
No folding possible
Folding statement: if (D.45316_1092 == 0)
Not folded
Folding statement: D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);
Not folded
Folding statement: check_ice (smh_186, 1, sdp_198, m_1764);
Not folded
Folding PHI node: match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
No folding possible
Folding PHI node: best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
No folding possible
Folding PHI node: cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
No folding possible
Folding PHI node: got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
No folding possible
Folding PHI node: got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
No folding possible
Folding PHI node: got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
No folding possible
Folding PHI node: codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
No folding possible
Folding PHI node: m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
No folding possible
Folding PHI node: nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
No folding possible
Folding PHI node: .MEM_1168 = PHI <.MEM_1398(429), .MEM_1113(332), .MEM_1113(333), .MEM_1425(394), .MEM_1453(410), .MEM_1454(411), .MEM_1387(319), .MEM_1391(320), .MEM_1380(317), .MEM_1382(318), .MEM_1402(331), .MEM_1113(164), .MEM_1873(395)>
No folding possible
Folding statement: if (m_1093 != 0B)
Not folded
Folding statement: # DEBUG match => match_15
Not folded
Folding statement: # DEBUG best_te => best_te_22
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_26
Not folded
Folding statement: # DEBUG m => m_1093
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_55
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_63
Not folded
Folding statement: # DEBUG got_audio => got_audio_66
Not folded
Folding statement: # DEBUG got_avp => got_avp_1859
Not folded
Folding statement: # DEBUG got_video_avp => NULL
Not folded
Folding statement: # DEBUG got_video_savp => NULL
Not folded
Folding statement: # DEBUG got_savp => got_savp_1739
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_1743
Not folded
Folding statement: # DEBUG got_webrtc => got_webrtc_78
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_94
Not folded
Folding statement: # DEBUG m_idx => m_idx_113
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_121
Not folded
Folding statement: # DEBUG m => m_1093
Not folded
Folding statement: m_1093 = m_1764->m_next;
Not folded
Folding statement: # DEBUG match => match_15
Not folded
Folding statement: # DEBUG best_te => best_te_22
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_26
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_55
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_63
Not folded
Folding statement: # DEBUG got_audio => got_audio_66
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_94
Not folded
Folding statement: # DEBUG m_idx => m_idx_113
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_121
Not folded
Folding PHI node: match_17 = PHI <1(134), 0(136), 0(152), 1(150), 0(198), 0(203), 0(206), 0(336), 0(374), match_15(412), 1(149), 1(162), 1(420), 0(117)>
No folding possible
Folding PHI node: .MEM_1170 = PHI <.MEM_1236(134), .MEM_1239(136), .MEM_1259(152), .MEM_1250(150), .MEM_1297(198), .MEM_1299(203), .MEM_1300(206), .MEM_1406(336), .MEM_1417(374), .MEM_1168(412), .MEM_1249(149), .MEM_1289(162), .MEM_1669(420), .MEM_1232(117)>
No folding possible
Folding PHI node: cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
No folding possible
Folding statement: D.44471_1094->cng_pt = cng_pt_1047;
Not folded
Folding statement: D.44471_1094 = smh_186->mparams;
Not folded
Folding statement: sdp_parser_free (parser_196);
Not folded
Folding statement: # DEBUG match => match_17
Not folded
Folding statement: done:
Not folded
Folding PHI node: match_142 = PHI <0(4), 0(5), 0(7), match_17(413)>
No folding possible
Folding statement: return match_142;
Not folded
Folding PHI node: .MEM_1117 = PHI <.MEM_1635(18), .MEM_1634(17)>
No folding possible
Folding PHI node: .MEM_794 = PHI <.MEM_1638(51), .MEM_1637(50)>
No folding possible
Folding statement: if (D.44594_307 == 0)
Not folded
Folding statement: D.44594_307 = strcasecmp (D.44590_304, "sendonly");
Not folded
Folding PHI node: .MEM_1754 = PHI <.MEM_1641(88), .MEM_1640(87)>
No folding possible
Folding PHI node: .MEM_669 = PHI <.MEM_1215(91), .MEM_1105(90), .MEM_1625(89), .MEM_1211(78)>
No folding possible
Folding statement: # DEBUG reneg => 1
Not folded
Folding PHI node: .MEM_1669 = PHI <.MEM_1247(146), .MEM_1248(147), .MEM_1249(148), .MEM_1245(144), .MEM_1246(145)>
No folding possible
Folding statement: # DEBUG pass => 0
Not folded
Folding statement: if (D.44822_535 == 0)
Not folded
Folding statement: D.44822_535 = D.44821_534 & 4;
Not folded
Folding statement: D.44821_534 = D.44471_533->ndlb;
Not folded
Folding statement: D.44471_533 = smh_186->mparams;
Not folded
Folding PHI node: .MEM_1884 = PHI <.MEM_1647(196), .MEM_1295(187), .MEM_1646(195)>
No folding possible
Folding statement: if (D.44831_542 != 0)
Not folded
Folding statement: D.44831_542 = D.44830_541 & D.44829_540;
Not folded
Folding statement: D.44830_541 = got_webrtc_78 == 0;
Not folded
Folding statement: D.44829_540 = D.44666_539 != 257;
Not folded
Folding statement: D.44666_539 = m_1764->m_proto;
Not folded
Folding PHI node: codec_ms_1883 = PHI <maxptime_1040(221), ptime_1033(222)>
No folding possible
Folding statement: # DEBUG codec_ms => codec_ms_1883
Not folded
Folding statement: if (D.44905_611 == 0)
Not folded
Folding statement: D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_598, D.44854_610, &codec_fmtp);
Not folded
Folding statement: D.44854_610 = map_1728->rm_rate;
Not folded
Folding statement: D.44889_608 = map_1728->rm_encoding;
Not folded
Folding statement: if (D.44937_647 != 0)
Not folded
Folding statement: D.44937_647 = D.44936_646 & 1;
Not folded
Folding statement: D.44936_646 = (int) D.44821_645;
Not folded
Folding statement: D.44821_645 = D.44471_644->ndlb;
Not folded
Folding statement: D.44471_644 = smh_186->mparams;
Not folded
Folding statement: if (D.45082_793 != 0B)
Not folded
Folding statement: D.45082_793 = switch_stristr ("stereo=1", D.45079_790);
Not folded
Folding PHI node: .MEM_1696 = PHI <.MEM_1364(303), .MEM_1333(286)>
No folding possible
Folding statement: # DEBUG match => 1
Not folded
Folding PHI node: .MEM_1867 = PHI <.MEM_1650(330), .MEM_1392(321), .MEM_1649(329)>
No folding possible
Folding statement: # DEBUG te => D#12
Not folded
Folding statement: # DEBUG D#12 => D.44471_861->recv_te
Not folded
Folding statement: D.44471_861->recv_te = 0;
Not folded
Folding statement: D.44471_861->te = 0;
Not folded
Folding statement: D.44471_861->dtmf_type = 1;
Not folded
Folding statement: D.44471_861 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);
Not folded
Folding statement: D.44530_860 = session_161(D)->channel;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
Not folded
Folding statement: if (D.45160_902 != 0B)
Not folded
Folding statement: D.45160_902 = switch_stristr ("fir", D.44619_899);
Not folded
Folding statement: if (D.44822_966 == 0)
Not folded
Folding statement: D.44822_966 = D.44821_965 & 4;
Not folded
Folding statement: D.44821_965 = D.44471_964->ndlb;
Not folded
Folding statement: D.44471_964 = smh_186->mparams;
Not folded
Folding PHI node: .MEM_1864 = PHI <.MEM_1653(372), .MEM_1415(363), .MEM_1652(371)>
No folding possible
Folding statement: if (D.44831_973 != 0)
Not folded
Folding statement: D.44831_973 = D.44830_972 & D.44829_971;
Not folded
Folding statement: D.44830_972 = got_webrtc_78 == 0;
Not folded
Folding statement: D.44829_971 = D.44666_970 != 257;
Not folded
Folding statement: D.44666_970 = m_1764->m_proto;
Not folded
Folding statement: if (D.44937_1001 != 0)
Not folded
Folding statement: D.44937_1001 = D.44936_1000 & 1;
Not folded
Folding statement: D.44936_1000 = (int) D.44821_999;
Not folded
Folding statement: D.44821_999 = D.44471_998->ndlb;
Not folded
Folding statement: D.44471_998 = smh_186->mparams;
Not folded
Folding PHI node: got_crypto_95 = PHI <got_crypto_50(171)>
No folding possible
Folding statement: # DEBUG attr => attr_77
Not folded
Folding statement: # DEBUG ptime => dptime_1035
Not folded
Folding statement: # DEBUG maxptime => dmaxptime_1005
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_95
Not folded
Folding statement: # DEBUG attr => attr_77
Not folded
Folding statement: attr_77 = m_1764->m_attributes;
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_95
Not folded
Folding PHI node: got_video_crypto_136 = PHI <got_video_crypto_57(344)>
No folding possible
Folding statement: # DEBUG attr => attr_62
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_136
Not folded
Folding statement: # DEBUG attr => attr_62
Not folded
Folding statement: attr_62 = m_1764->m_attributes;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_136
Not folded
switch_core_media_negotiate_sdp (struct switch_core_session_t * session, const char * r_sdp, uint8_t * proceed, switch_sdp_type_t sdp_type)
{
  _Bool D.49757;
  int D.49755;
  switch_bool_t D.49754;
  int D.49753;
  int D.49752;
  int D.49751;
  int D.49750;
  int D.49749;
  int D.49748;
  int D.49747;
  int D.49743;
  switch_bool_t D.49742;
  int D.49741;
  int D.49740;
  int D.49739;
  int D.49738;
  int D.49737;
  int D.49736;
  int D.49735;
  int D.49731;
  switch_bool_t D.49730;
  int D.49729;
  int D.49728;
  int D.49727;
  int D.49726;
  int D.49725;
  int D.49724;
  int D.49723;
  int D.49719;
  switch_bool_t D.49718;
  int D.49717;
  int D.49716;
  int D.49715;
  int D.49714;
  int D.49713;
  int D.49712;
  int D.49711;
  int D.49707;
  switch_bool_t D.49706;
  int D.49705;
  int D.49704;
  int D.49703;
  int D.49702;
  int D.49701;
  int D.49700;
  int D.49699;
  int D.49695;
  switch_bool_t D.49694;
  int D.49693;
  int D.49692;
  int D.49691;
  int D.49690;
  int D.49689;
  int D.49688;
  int D.49687;
  int D.49683;
  switch_bool_t D.49682;
  int D.49681;
  int D.49680;
  int D.49679;
  int D.49678;
  int D.49677;
  int D.49676;
  int D.49675;
  uint32_t D.47965;
  uint32_t D.47964;
  struct switch_mutex_t * D.47963;
  struct switch_codec_interface_t * D.47962;
  const struct switch_codec_implementation_t * D.47961;
  const char D.47957;
  const char D.47950;
  int D.47946;
  const char D.47943;
  const char D.47939;
  uint32_t D.47934;
  uint32_t D.47933;
  struct switch_mutex_t * D.47932;
  struct switch_codec_interface_t * D.47931;
  const struct switch_codec_implementation_t * D.47930;
  const char D.47926;
  int D.47922;
  const char D.47919;
  const char D.47915;
  unsigned char csui.173;
  const char D.47900;
  int D.47890;
  const char D.47887;
  const char D.47877;
  uint8_t D.47874;
  struct payload_map_t * pmap;
  uint8_t D.47871;
  struct payload_map_t * pmap;
  struct payload_map_t * pmap;
  int j;
  char tmp[50];
  const struct switch_codec_implementation_t * imp;
  int crypto_tag;
  register int __result;
  int i;
  int vmatch;
  const struct switch_codec_implementation_t * mimp;
  const char * rm_encoding;
  struct sdp_rtpmap_t * map;
  char tmp[50];
  struct payload_map_t * pmap;
  int j;
  const struct switch_codec_implementation_t * timp;
  int num;
  char tmp[80];
  char * prefs[1];
  const struct switch_codec_implementation_t * search[1];
  int j;
  uint32_t codec_rate;
  uint32_t bit_rate;
  const struct switch_codec_implementation_t * imp;
  struct switch_codec_fmtp_t codec_fmtp;
  uint32_t map_bit_rate;
  const char * rm_encoding;
  int32_t i;
  int crypto_tag;
  struct sdp_rtpmap_t * map;
  const char * err;
  char tmp[32];
  switch_port_t remote_port;
  char * remote_host;
  struct switch_core_session_message_t * msg;
  struct switch_channel_t * other_channel;
  int pass;
  const char * var;
  struct switch_t38_options_t * t38_options;
  struct switch_core_session_t * other_session;
  struct sdp_connection_t * connection;
  register int __result;
  static const char __func__[32] = "switch_core_media_negotiate_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_negotiate_sdp";
  int nm_idx;
  int m_idx;
  const char * tmp;
  uint32_t fmtp_remote_codec_rate;
  uint32_t remote_codec_rate;
  int codec_ms;
  struct matches near_matches[30];
  struct matches matches[30];
  struct sdp_rtpmap_t * near_map;
  struct sdp_rtpmap_t * mmap;
  const struct switch_codec_implementation_t * near_match;
  const struct switch_codec_implementation_t * mimp;
  uint32_t near_rate;
  struct switch_media_handle_t * smh;
  int total_codecs;
  const struct switch_codec_implementation_t * * codec_array;
  int reneg;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  int scrooge;
  int got_webrtc;
  int got_udptl;
  int got_savp;
  int got_avp;
  int got_audio;
  int got_video_crypto;
  int got_crypto;
  const char * crypto;
  const char * val;
  struct switch_channel_t * channel;
  int greedy;
  int recvonly;
  int sendonly;
  int dmaxptime;
  int maxptime;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  switch_payload_t cng_pt;
  switch_payload_t best_te;
  uint8_t match;
  switch_status_t D.45316;
  int D.45306;
  switch_payload_t D.45305;
  int D.45304;
  switch_payload_t D.45303;
  char * D.45302;
  char * D.45301;
  int D.45300;
  switch_port_t D.45299;
  char * D.45298;
  const char * D.45297;
  char * D.45296;
  uint32_t D.45295;
  int D.45294;
  const int D.45293;
  unsigned char D.45292;
  char * D.45291;
  switch_payload_t D.45290;
  struct switch_rtp_t * D.45287;
  struct payload_map_t * D.45286;
  uint32_t D.45283;
  int D.45282;
  const int D.45281;
  const uint32_t D.45280;
  const struct switch_codec_implementation_t * D.45279;
  uint32_t D.45278;
  <unnamed-unsigned:7> D.45277;
  const char * D.45276;
  const char * D.45275;
  struct sdp_rtpmap_t * D.45274;
  _Bool D.45267;
  _Bool D.45266;
  const uint32_t D.45263;
  long unsigned int D.45262;
  int D.45259;
  const char * D.45255;
  int D.45251;
  const switch_payload_t D.45250;
  char * const D.45249;
  int D.45248;
  <unnamed-unsigned:7> D.45247;
  uint32_t D.45244;
  switch_call_direction_t D.45241;
  const switch_codec_type_t D.45238;
  const struct switch_codec_implementation_t * * D.45237;
  unsigned int D.45236;
  unsigned int i.99;
  const char * D.45227;
  int D.45219;
  char * D.45214;
  short unsigned int D.45213;
  const unsigned char D.45185;
  int D.45175;
  const unsigned char D.45174;
  int D.45168;
  uint8_t D.45164;
  uint8_t D.45163;
  const char * D.45160;
  int D.45154;
  int D.45151;
  int D.45143;
  int D.45140;
  int D.45137;
  const char * D.45124;
  int D.45120;
  switch_call_direction_t D.45114;
  int D.45111;
  switch_payload_t D.45110;
  uint32_t D.45109;
  int32_t D.45107;
  switch_status_t D.45099;
  uint32_t D.45098;
  int D.45093;
  switch_payload_t D.45092;
  int D.45089;
  char * D.45088;
  short unsigned int D.45087;
  char * D.45086;
  const char * D.45085;
  const char * D.45082;
  const char * D.45079;
  int D.45070;
  const char * D.45066;
  uint32_t D.45064;
  const int D.45063;
  uint32_t D.45062;
  int D.45061;
  const int D.45060;
  const uint32_t D.45059;
  int D.45056;
  const uint32_t D.45055;
  unsigned char D.45054;
  <unnamed-unsigned:7> D.45053;
  char * D.45052;
  char * const D.45051;
  char * D.45050;
  const char * D.45049;
  switch_payload_t D.45048;
  uint32_t D.45043;
  int D.45042;
  const int D.45041;
  const uint32_t D.45040;
  const struct switch_codec_implementation_t * D.45039;
  uint32_t D.45038;
  <unnamed-unsigned:7> D.45037;
  const char * D.45036;
  const char * D.45035;
  struct sdp_rtpmap_t * D.45034;
  int near_rate.96;
  int D.45028;
  const uint32_t D.45027;
  char * const D.45026;
  int D.45025;
  const int D.45024;
  char * const D.45013;
  _Bool D.45009;
  _Bool D.45008;
  _Bool D.45007;
  _Bool D.45004;
  _Bool D.45003;
  _Bool D.45002;
  switch_rtp_crypto_mode_t D.45001;
  _Bool D.44999;
  _Bool D.44998;
  _Bool D.44997;
  int D.44996;
  int codec_rate.94;
  int D.44993;
  _Bool D.44991;
  _Bool D.44990;
  _Bool D.44989;
  const uint32_t D.44984;
  int D.44979;
  int D.44977;
  _Bool D.44974;
  _Bool D.44973;
  _Bool D.44972;
  _Bool D.44969;
  _Bool D.44968;
  int D.44963;
  int D.44960;
  _Bool D.44957;
  _Bool D.44956;
  _Bool D.44955;
  _Bool D.44952;
  _Bool D.44951;
  _Bool D.44950;
  const uint32_t D.44947;
  int D.44944;
  int iftmp.93;
  int D.44937;
  int D.44936;
  int D.44930;
  const int D.44929;
  int D.44928;
  const switch_payload_t D.44927;
  char * const D.44926;
  int remote_codec_rate.92;
  int D.44924;
  const switch_codec_type_t D.44921;
  const int D.44920;
  const struct switch_codec_implementation_t * * D.44919;
  unsigned int D.44918;
  unsigned int i.91;
  int D.44911;
  int D.44908;
  switch_status_t D.44905;
  int D.44901;
  int D.44897;
  const char * D.44893;
  int D.44890;
  const char * D.44889;
  uint32_t D.44885;
  uint32_t D.44884;
  _Bool D.44879;
  _Bool D.44878;
  _Bool D.44877;
  switch_payload_t D.44869;
  int D.44868;
  int D.44863;
  int32_t D.44858;
  int D.44857;
  <unnamed-unsigned:7> D.44856;
  long unsigned int D.44855;
  long unsigned int D.44854;
  int D.44848;
  int D.44839;
  _Bool D.44836;
  _Bool D.44835;
  _Bool D.44834;
  _Bool D.44831;
  _Bool D.44830;
  _Bool D.44829;
  const char * D.44825;
  unsigned int D.44822;
  switch_core_media_NDLB_t D.44821;
  int D.44815;
  int D.44810;
  int D.44805;
  char * D.44800;
  short unsigned int D.44799;
  int D.44795;
  int D.44787;
  int D.44784;
  int D.44781;
  _Bool D.44779;
  _Bool D.44778;
  _Bool D.44777;
  char * D.44773;
  struct switch_channel_t * D.44772;
  const char * err.90;
  switch_status_t D.44768;
  int D.44767;
  int D.44766;
  char * D.44765;
  char * D.44764;
  switch_port_t D.44762;
  char * D.44760;
  int D.39032;
  _Bool D.44758;
  _Bool D.44757;
  _Bool D.44756;
  uint16_t D.44753;
  char * D.44752;
  const char * D.44751;
  struct payload_map_t * D.44750;
  int D.44747;
  const char * D.44746;
  int D.44743;
  const char * D.44742;
  char * D.44741;
  char * D.44740;
  uint32_t D.44737;
  struct switch_core_session_t * other_session.89;
  switch_status_t D.44733;
  uint8_t D.44730;
  uint32_t D.44728;
  uint32_t D.44726;
  uint32_t D.44724;
  uint32_t D.44723;
  int D.44716;
  int D.44707;
  uint32_t D.44706;
  int D.44703;
  const char * D.44702;
  int D.44699;
  long unsigned int D.44697;
  sdp_media_e D.44681;
  _Bool D.44678;
  _Bool D.44677;
  _Bool D.44676;
  sdp_proto_e D.44675;
  int D.44672;
  const char * D.44669;
  sdp_proto_e D.44666;
  const char * D.44665;
  const char * D.44663;
  const char * D.44661;
  int D.44655;
  struct switch_media_bug_t * D.44649;
  int D.44640;
  int D.44636;
  int32_t D.44631;
  _Bool D.44626;
  _Bool D.44625;
  _Bool D.44624;
  int D.44621;
  const char * D.44619;
  int D.44616;
  int D.44614;
  uint8_t D.44606;
  struct switch_rtp_t * D.44605;
  int D.44602;
  int D.44598;
  int D.44594;
  const char * D.44590;
  const char * D.44548;
  struct sdp_connection_t * D.44546;
  _Bool D.44544;
  _Bool D.44543;
  _Bool D.44542;
  unsigned char D.44541;
  unsigned char D.44540;
  struct switch_channel_t * D.44530;
  unsigned int D.44529;
  char * D.44526;
  unsigned int D.44523;
  unsigned int D.44522;
  switch_rtp_bug_flag_t D.44521;
  char * D.44518;
  int D.44514;
  int D.44513;
  switch_rtp_bug_flag_t D.44512;
  char * D.44509;
  char * D.44508;
  const char * D.44507;
  struct sdp_origin_t * D.44506;
  int D.44502;
  int D.44498;
  int D.44494;
  int32_t D.44491;
  int32_t D.44490;
  struct switch_channel_t * D.44482;
  struct switch_core_session_t * D.44481;
  int D.44478;
  int D.44473;
  size_t D.44472;
  struct switch_core_media_params_t * D.44471;

<bb 2>:
  # DEBUG match => 0
  # DEBUG best_te => 0
  # DEBUG te => 0
  # DEBUG cng_pt => 0
  # DEBUG ptime => 0
  # DEBUG dptime => 0
  # DEBUG maxptime => 0
  # DEBUG dmaxptime => 0
  # DEBUG sendonly => 0
  # DEBUG recvonly => 0
  # DEBUG greedy => 0
  # DEBUG x => 0
  # DEBUG skip => 0
  channel_162 = switch_core_session_get_channel (session_161(D));
  # DEBUG channel => channel_162
  # DEBUG crypto => 0B
  # DEBUG got_crypto => 0
  # DEBUG got_video_crypto => 0
  # DEBUG got_audio => 0
  # DEBUG got_avp => 0
  # DEBUG got_video_avp => 0
  # DEBUG got_video_savp => 0
  # DEBUG got_savp => 0
  # DEBUG got_udptl => 0
  # DEBUG got_webrtc => 0
  # DEBUG scrooge => 0
  # DEBUG parser => 0B
  # DEBUG reneg => 1
  # DEBUG near_rate => 0
  # DEBUG mimp => 0B
  # DEBUG near_match => 0B
  # DEBUG mmap => 0B
  # DEBUG near_map => 0B
  matches = {};
  near_matches = {};
  # DEBUG codec_ms => 0
  # DEBUG remote_codec_rate => 0
  # DEBUG fmtp_remote_codec_rate => 0
  # DEBUG m_idx => 0
  # DEBUG nm_idx => 0
  if (session_161(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_186 = session_161(D)->media_handle;
  # DEBUG smh => smh_186
  if (smh_186 == 0B)
    goto <bb 414>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#15 => &smh_186->engines
  # DEBUG a_engine => D#15
  # DEBUG D#14 => &smh_186->engines[1]
  # DEBUG v_engine => D#14
  codec_array_190 = &smh_186->codecs;
  # DEBUG codec_array => codec_array_190
  D.44471_191 = smh_186->mparams;
  total_codecs_192 = D.44471_191->num_codecs;
  # DEBUG total_codecs => total_codecs_192
  D.44472_194 = strlen (r_sdp_193(D));
  D.44473_195 = (int) D.44472_194;
  parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
  # DEBUG parser => parser_196
  if (parser_196 == 0B)
    goto <bb 414>;
  else
    goto <bb 6>;

<bb 6>:
  sdp_198 = sdp_session (parser_196);
  # DEBUG sdp => sdp_198
  if (sdp_198 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  sdp_parser_free (parser_196);
  goto <bb 414>;

<bb 8>:
  D.44478_200 = dtls_ok (session_161(D));
  if (D.44478_200 != 0)
    goto <bb 9>;
  else
    goto <bb 20>;

<bb 9>:
  D.44481_201 = smh_186->session;
  D.44482_202 = D.44481_201->channel;
  tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
  # DEBUG tmp => tmp_203
  if (tmp_203 != 0B)
    goto <bb 10>;
  else
    goto <bb 20>;

<bb 10>:
  # DEBUG expr => tmp_203
  D.49675_1550 = strcasecmp (tmp_203, "no");
  if (D.49675_1550 == 0)
    goto <bb 19>;
  else
    goto <bb 11>;

<bb 11>:
  D.49676_1551 = strcasecmp (tmp_203, "off");
  if (D.49676_1551 == 0)
    goto <bb 19>;
  else
    goto <bb 12>;

<bb 12>:
  D.49677_1552 = strcasecmp (tmp_203, "false");
  if (D.49677_1552 == 0)
    goto <bb 19>;
  else
    goto <bb 13>;

<bb 13>:
  D.49678_1553 = strcasecmp (tmp_203, "f");
  if (D.49678_1553 == 0)
    goto <bb 19>;
  else
    goto <bb 14>;

<bb 14>:
  D.49679_1554 = strcasecmp (tmp_203, "disabled");
  if (D.49679_1554 == 0)
    goto <bb 19>;
  else
    goto <bb 15>;

<bb 15>:
  D.49680_1555 = strcasecmp (tmp_203, "inactive");
  if (D.49680_1555 == 0)
    goto <bb 19>;
  else
    goto <bb 16>;

<bb 16>:
  D.49681_1556 = strcasecmp (tmp_203, "disallow");
  if (D.49681_1556 == 0)
    goto <bb 19>;
  else
    goto <bb 17>;

<bb 17>:
  D.49682_1557 = switch_is_number (tmp_203);
  if (D.49682_1557 != 0)
    goto <bb 18>;
  else
    goto <bb 415>;

<bb 18>:
  # DEBUG __nptr => tmp_203
  D.49683_1558 = strtol (tmp_203, 0B, 10);
  if (D.49683_1558 == 0)
    goto <bb 19>;
  else
    goto <bb 415>;

<bb 19>:
  D.44481_205 = smh_186->session;
  D.44482_206 = D.44481_205->channel;
  switch_channel_clear_flag (D.44482_206, 111);
  D.44481_207 = smh_186->session;
  D.44482_208 = D.44481_207->channel;
  switch_channel_clear_flag (D.44482_208, 109);

<bb 20>:
  switch_core_session_parse_crypto_prefs (session_161(D));
  # DEBUG engine => D#15
  pmap_1457 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;
  # DEBUG pmap => pmap_1457
  # DEBUG pmap => pmap_1457
  if (pmap_1457 != 0B)
    goto <bb 21>;
  else
    goto <bb 24>;

<bb 21>:
  D.47871_1661 = pmap_1457->allocated;
  if (D.47871_1661 != 0)
    goto <bb 22>;
  else
    goto <bb 24>;

<bb 22>:
  # pmap_1747 = PHI <pmap_1459(23), pmap_1457(21)>
  pmap_1747->negotiated = 0;
  pmap_1747->current = 0;
  pmap_1459 = pmap_1747->next;
  # DEBUG pmap => pmap_1459
  # DEBUG pmap => pmap_1459
  if (pmap_1459 != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  D.47871_1460 = pmap_1459->allocated;
  if (D.47871_1460 != 0)
    goto <bb 22>;
  else
    goto <bb 24>;

<bb 24>:
  # DEBUG engine => D#14
  pmap_1461 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
  # DEBUG pmap => pmap_1461
  # DEBUG pmap => pmap_1461
  if (pmap_1461 != 0B)
    goto <bb 25>;
  else
    goto <bb 28>;

<bb 25>:
  D.47874_1670 = pmap_1461->allocated;
  if (D.47874_1670 != 0)
    goto <bb 26>;
  else
    goto <bb 28>;

<bb 26>:
  # pmap_1672 = PHI <pmap_1463(27), pmap_1461(25)>
  pmap_1672->negotiated = 0;
  pmap_1672->current = 0;
  pmap_1463 = pmap_1672->next;
  # DEBUG pmap => pmap_1463
  # DEBUG pmap => pmap_1463
  if (pmap_1463 != 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.47874_1464 = pmap_1463->allocated;
  if (D.47874_1464 != 0)
    goto <bb 26>;
  else
    goto <bb 28>;

<bb 28>:
  if (proceed_209(D) != 0B)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  *proceed_209(D) = 1;

<bb 30>:
  D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
  greedy_211 = D.44490_210 != 0;
  # DEBUG greedy => greedy_211
  D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
  scrooge_213 = D.44491_212 != 0;
  # DEBUG scrooge => scrooge_213
  val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
  # DEBUG val => val_214
  if (val_214 != 0B)
    goto <bb 31>;
  else
    goto <bb 35>;

<bb 31>:
  D.44494_215 = strcasecmp (val_214, "generous");
  if (D.44494_215 == 0)
    goto <bb 35>;
  else
    goto <bb 32>;

<bb 32>:
  D.44498_218 = strcasecmp (val_214, "greedy");
  if (D.44498_218 == 0)
    goto <bb 35>;
  else
    goto <bb 33>;

<bb 33>:
  D.44502_221 = strcasecmp (val_214, "scrooge");
  if (D.44502_221 == 0)
    goto <bb 35>;
  else
    goto <bb 34>;

<bb 34>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);

<bb 35>:
  # greedy_47 = PHI <greedy_211(30), 0(31), 1(32), 1(33), greedy_211(34)>
  # scrooge_80 = PHI <scrooge_213(30), 0(31), 0(32), 1(33), scrooge_213(34)>
  # DEBUG scrooge => scrooge_80
  # DEBUG greedy => greedy_47
  D.44506_224 = sdp_198->sdp_origin;
  D.44507_225 = D.44506_224->o_username;
  D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
  smh_186->origin = D.44508_226;
  if (D.44508_226 != 0B)
    goto <bb 36>;
  else
    goto <bb 42>;

<bb 36>:
  D.44471_228 = smh_186->mparams;
  D.44512_229 = D.44471_228->auto_rtp_bugs;
  D.44513_230 = (int) D.44512_229;
  D.44514_231 = D.44513_230 & 1;
  if (D.44514_231 != 0)
    goto <bb 37>;
  else
    goto <bb 39>;

<bb 37>:
  D.44518_234 = strstr (D.44508_226, "CiscoSystemsSIP-GW-UserAgent");
  if (D.44518_234 != 0B)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
  D.44522_236 = D.44521_235 | 1;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");

<bb 39>:
  D.44471_237 = smh_186->mparams;
  D.44512_238 = D.44471_237->auto_rtp_bugs;
  D.44523_239 = D.44512_238 & 2;
  if (D.44523_239 != 0)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 40>:
  D.44509_240 = smh_186->origin;
  D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
  if (D.44526_241 != 0B)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
  D.44529_243 = D.44521_242 | 2;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");

<bb 42>:
  D.44530_244 = session_161(D)->channel;
  val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
  # DEBUG val => val_245
  if (val_245 != 0B)
    goto <bb 43>;
  else
    goto <bb 53>;

<bb 43>:
  # DEBUG expr => val_245
  D.49687_1560 = strcasecmp (val_245, "yes");
  if (D.49687_1560 == 0)
    goto <bb 52>;
  else
    goto <bb 44>;

<bb 44>:
  D.49688_1561 = strcasecmp (val_245, "on");
  if (D.49688_1561 == 0)
    goto <bb 52>;
  else
    goto <bb 45>;

<bb 45>:
  D.49689_1562 = strcasecmp (val_245, "true");
  if (D.49689_1562 == 0)
    goto <bb 52>;
  else
    goto <bb 46>;

<bb 46>:
  D.49690_1563 = strcasecmp (val_245, "t");
  if (D.49690_1563 == 0)
    goto <bb 52>;
  else
    goto <bb 47>;

<bb 47>:
  D.49691_1564 = strcasecmp (val_245, "enabled");
  if (D.49691_1564 == 0)
    goto <bb 52>;
  else
    goto <bb 48>;

<bb 48>:
  D.49692_1565 = strcasecmp (val_245, "active");
  if (D.49692_1565 == 0)
    goto <bb 52>;
  else
    goto <bb 49>;

<bb 49>:
  D.49693_1566 = strcasecmp (val_245, "allow");
  if (D.49693_1566 == 0)
    goto <bb 52>;
  else
    goto <bb 50>;

<bb 50>:
  D.49694_1567 = switch_is_number (val_245);
  if (D.49694_1567 != 0)
    goto <bb 51>;
  else
    goto <bb 416>;

<bb 51>:
  # DEBUG __nptr => val_245
  D.49695_1568 = strtol (val_245, 0B, 10);
  if (D.49695_1568 != 0)
    goto <bb 52>;
  else
    goto <bb 416>;

<bb 52>:
  D.44530_247 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_247, 93, 1);

<bb 53>:
  m_248 = sdp_198->sdp_media;
  # DEBUG m => m_248
  if (m_248 != 0B)
    goto <bb 54>;
  else
    goto <bb 59>;

<bb 54>:
  D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
  D.44541_250 = D.44540_249 & 6;
  D.44542_251 = D.44541_250 == 2;
  D.44543_252 = D.44541_250 == 0;
  D.44544_253 = D.44543_252 | D.44542_251;
  if (D.44544_253 != 0)
    goto <bb 58>;
  else
    goto <bb 55>;

<bb 55>:
  D.44546_254 = m_248->m_connections;
  if (D.44546_254 != 0B)
    goto <bb 56>;
  else
    goto <bb 59>;

<bb 56>:
  D.44548_256 = D.44546_254->c_address;
  if (D.44548_256 != 0B)
    goto <bb 57>;
  else
    goto <bb 59>;

<bb 57>:
  # DEBUG __s2_len => 7
  __result_300 = __builtin_strcmp (D.44548_256, "0.0.0.0");
  if (__result_300 == 0)
    goto <bb 58>;
  else
    goto <bb 59>;

<bb 58>:
  # DEBUG sendonly => 2

<bb 59>:
  # sendonly_42 = PHI <0(53), 0(55), 0(56), 0(57), 2(58)>
  # DEBUG sendonly => sendonly_42
  attr_303 = sdp_198->sdp_attributes;
  # DEBUG attr => attr_303
  # DEBUG recvonly => 0
  # DEBUG sendonly => sendonly_42
  # DEBUG dmaxptime => 0
  # DEBUG dptime => 0
  # DEBUG attr => attr_303
  if (attr_303 != 0B)
    goto <bb 60>;
  else
    goto <bb 76>;

<bb 60>:
  # attr_1666 = PHI <attr_334(75), attr_303(59)>
  # dptime_1671 = PHI <dptime_36(75), 0(59)>
  # dmaxptime_1865 = PHI <dmaxptime_40(75), 0(59)>
  # sendonly_1689 = PHI <sendonly_43(75), sendonly_42(59)>
  # recvonly_1894 = PHI <recvonly_45(75), 0(59)>
  D.44590_304 = attr_1666->a_name;
  # DEBUG s => D.44590_304
  if (D.44590_304 == 0B)
    goto <bb 75>;
  else
    goto <bb 61>;

<bb 61>:
  D.47877_1465 = *D.44590_304;
  if (D.47877_1465 == 0)
    goto <bb 75>;
  else
    goto <bb 417>;

<bb 62>:
  # DEBUG sendonly => 1
  D.44530_309 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
  goto <bb 75>;

<bb 63>:
  D.44598_311 = strcasecmp (D.44590_304, "inactive");
  if (D.44598_311 == 0)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  # DEBUG sendonly => 1
  D.44530_313 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
  goto <bb 75>;

<bb 65>:
  D.44602_315 = strcasecmp (D.44590_304, "recvonly");
  if (D.44602_315 == 0)
    goto <bb 66>;
  else
    goto <bb 69>;

<bb 66>:
  D.44530_316 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
  # DEBUG recvonly => 1
  D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44606_319 = switch_rtp_ready (D.44605_318);
  if (D.44606_319 != 0)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  switch_rtp_set_max_missed_packets (D.44605_320, 0);
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;
  goto <bb 75>;

<bb 68>:
  D.44530_321 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
  D.44530_322 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
  goto <bb 75>;

<bb 69>:
  if (sendonly_1689 != 2)
    goto <bb 70>;
  else
    goto <bb 71>;

<bb 70>:
  D.44614_324 = strcasecmp (D.44590_304, "sendrecv");
  if (D.44614_324 == 0)
    goto <bb 75>;
  else
    goto <bb 71>;

<bb 71>:
  D.44616_327 = strcasecmp (D.44590_304, "ptime");
  if (D.44616_327 == 0)
    goto <bb 72>;
  else
    goto <bb 73>;

<bb 72>:
  D.44619_328 = attr_1666->a_value;
  # DEBUG __nptr => D.44619_328
  dptime_1467 = strtol (D.44619_328, 0B, 10);
  # DEBUG dptime => NULL
  goto <bb 75>;

<bb 73>:
  D.44621_331 = strcasecmp (D.44590_304, "maxptime");
  if (D.44621_331 == 0)
    goto <bb 74>;
  else
    goto <bb 75>;

<bb 74>:
  D.44619_332 = attr_1666->a_value;
  # DEBUG __nptr => D.44619_332
  dmaxptime_1468 = strtol (D.44619_332, 0B, 10);
  # DEBUG dmaxptime => NULL

<bb 75>:
  # dptime_36 = PHI <dptime_1671(61), dptime_1671(62), dptime_1671(64), dptime_1671(68), dptime_1671(70), dptime_1467(72), dptime_1671(73), dptime_1671(74), dptime_1671(67), dptime_1671(60)>
  # dmaxptime_40 = PHI <dmaxptime_1865(61), dmaxptime_1865(62), dmaxptime_1865(64), dmaxptime_1865(68), dmaxptime_1865(70), dmaxptime_1865(72), dmaxptime_1865(73), dmaxptime_1468(74), dmaxptime_1865(67), dmaxptime_1865(60)>
  # sendonly_43 = PHI <sendonly_1689(61), 1(62), 1(64), sendonly_1689(68), 0(70), sendonly_1689(72), sendonly_1689(73), sendonly_1689(74), sendonly_1689(67), sendonly_1689(60)>
  # recvonly_45 = PHI <recvonly_1894(61), recvonly_1894(62), recvonly_1894(64), 1(68), recvonly_1894(70), recvonly_1894(72), recvonly_1894(73), recvonly_1894(74), 1(67), recvonly_1894(60)>
  # DEBUG recvonly => recvonly_45
  # DEBUG sendonly => sendonly_43
  # DEBUG dmaxptime => dmaxptime_40
  # DEBUG dptime => dptime_36
  attr_334 = attr_1666->a_next;
  # DEBUG attr => attr_334
  # DEBUG recvonly => recvonly_45
  # DEBUG sendonly => sendonly_43
  # DEBUG dmaxptime => dmaxptime_40
  # DEBUG dptime => dptime_36
  # DEBUG attr => attr_334
  if (attr_334 != 0B)
    goto <bb 60>;
  else
    goto <bb 76>;

<bb 76>:
  # dptime_1035 = PHI <dptime_36(75), 0(59)>
  # dmaxptime_1005 = PHI <dmaxptime_40(75), 0(59)>
  # sendonly_1006 = PHI <sendonly_43(75), sendonly_42(59)>
  # recvonly_1654 = PHI <recvonly_45(75), 0(59)>
  D.44624_335 = sendonly_1006 != 1;
  D.44625_336 = recvonly_1654 != 1;
  D.44626_337 = D.44625_336 & D.44624_335;
  if (D.44626_337 != 0)
    goto <bb 77>;
  else
    goto <bb 78>;

<bb 77>:
  D.44530_338 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);

<bb 78>:
  D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
  if (D.44631_339 == 0)
    goto <bb 79>;
  else
    goto <bb 419>;

<bb 79>:
  D.44530_340 = session_161(D)->channel;
  val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
  # DEBUG val => val_341
  if (val_341 == 0B)
    goto <bb 90>;
  else
    goto <bb 80>;

<bb 80>:
  # DEBUG expr => val_341
  D.49699_1570 = strcasecmp (val_341, "yes");
  if (D.49699_1570 == 0)
    goto <bb 89>;
  else
    goto <bb 81>;

<bb 81>:
  D.49700_1571 = strcasecmp (val_341, "on");
  if (D.49700_1571 == 0)
    goto <bb 89>;
  else
    goto <bb 82>;

<bb 82>:
  D.49701_1572 = strcasecmp (val_341, "true");
  if (D.49701_1572 == 0)
    goto <bb 89>;
  else
    goto <bb 83>;

<bb 83>:
  D.49702_1573 = strcasecmp (val_341, "t");
  if (D.49702_1573 == 0)
    goto <bb 89>;
  else
    goto <bb 84>;

<bb 84>:
  D.49703_1574 = strcasecmp (val_341, "enabled");
  if (D.49703_1574 == 0)
    goto <bb 89>;
  else
    goto <bb 85>;

<bb 85>:
  D.49704_1575 = strcasecmp (val_341, "active");
  if (D.49704_1575 == 0)
    goto <bb 89>;
  else
    goto <bb 86>;

<bb 86>:
  D.49705_1576 = strcasecmp (val_341, "allow");
  if (D.49705_1576 == 0)
    goto <bb 89>;
  else
    goto <bb 87>;

<bb 87>:
  D.49706_1577 = switch_is_number (val_341);
  if (D.49706_1577 != 0)
    goto <bb 88>;
  else
    goto <bb 418>;

<bb 88>:
  # DEBUG __nptr => val_341
  D.49707_1578 = strtol (val_341, 0B, 10);
  if (D.49707_1578 != 0)
    goto <bb 89>;
  else
    goto <bb 418>;

<bb 89>:
Invalid sum of outgoing probabilities 25.0%
  goto <bb 419>;

<bb 90>:
  D.44471_343 = smh_186->mparams;
  D.44636_344 = D.44471_343->hold_laps;
  if (D.44636_344 == 0)
    goto <bb 91>;
  else
    goto <bb 419>;

<bb 91>:
  D.44471_343->hold_laps = 1;
  D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_1006);
  if (D.44640_348 != 0)
    goto <bb 92>;
  else
    goto <bb 419>;

<bb 92>:
  reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
  # DEBUG reneg => reneg_349
  D.44530_350 = session_161(D)->channel;
  val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
  # DEBUG val => val_351
  if (val_351 != 0B)
    goto <bb 93>;
  else
    goto <bb 94>;

<bb 93>:
  reneg_352 = switch_true (val_351);
  # DEBUG reneg => reneg_352

<bb 94>:
  # reneg_81 = PHI <reneg_349(92), reneg_352(93)>
  # DEBUG reneg => reneg_81
  if (reneg_81 != 0)
    goto <bb 95>;
  else
    goto <bb 107>;

<bb 95>:
  reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
  # DEBUG reneg => reneg_353
  D.44530_354 = session_161(D)->channel;
  val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
  # DEBUG val => val_355
  if (val_355 != 0B)
    goto <bb 96>;
  else
    goto <bb 107>;

<bb 96>:
  # DEBUG expr => val_355
  D.49711_1580 = strcasecmp (val_355, "yes");
  if (D.49711_1580 == 0)
    goto <bb 106>;
  else
    goto <bb 97>;

<bb 97>:
  D.49712_1581 = strcasecmp (val_355, "on");
  if (D.49712_1581 == 0)
    goto <bb 106>;
  else
    goto <bb 98>;

<bb 98>:
  D.49713_1582 = strcasecmp (val_355, "true");
  if (D.49713_1582 == 0)
    goto <bb 106>;
  else
    goto <bb 99>;

<bb 99>:
  D.49714_1583 = strcasecmp (val_355, "t");
  if (D.49714_1583 == 0)
    goto <bb 106>;
  else
    goto <bb 100>;

<bb 100>:
  D.49715_1584 = strcasecmp (val_355, "enabled");
  if (D.49715_1584 == 0)
    goto <bb 106>;
  else
    goto <bb 101>;

<bb 101>:
  D.49716_1585 = strcasecmp (val_355, "active");
  if (D.49716_1585 == 0)
    goto <bb 106>;
  else
    goto <bb 102>;

<bb 102>:
  D.49717_1586 = strcasecmp (val_355, "allow");
  if (D.49717_1586 == 0)
    goto <bb 106>;
  else
    goto <bb 103>;

<bb 103>:
  D.49718_1587 = switch_is_number (val_355);
  if (D.49718_1587 != 0)
    goto <bb 104>;
  else
    goto <bb 106>;

<bb 104>:
  # DEBUG __nptr => val_355
  D.49719_1588 = strtol (val_355, 0B, 10);
  if (D.49719_1588 != 0)
    goto <bb 106>;
  else
    goto <bb 105>;

<bb 105>:

<bb 106>:
  # reneg_1589 = PHI <1(96), 1(97), 1(98), 1(99), 1(100), 1(101), 1(102), 1(104), 0(103), 0(105)>
  # DEBUG reneg => NULL

<bb 107>:
  # reneg_82 = PHI <0(94), reneg_353(95), reneg_1589(106)>
  # DEBUG reneg => reneg_82
  D.44649_357 = session_161(D)->bugs;
  if (D.44649_357 != 0B)
    goto <bb 108>;
  else
    goto <bb 109>;

<bb 108>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
  # DEBUG reneg => 0
  # DEBUG reneg => 0
  goto <bb 110>;

<bb 109>:
  # DEBUG reneg => reneg_82
  if (reneg_82 == 0)
    goto <bb 110>;
  else
    goto <bb 112>;

<bb 110>:
  total_codecs_359 = smh_186->num_negotiated_codecs;
  if (total_codecs_359 != 0)
    goto <bb 111>;
  else
    goto <bb 113>;

<bb 111>:
  codec_array_360 = &smh_186->negotiated_codecs;
  # DEBUG codec_array => codec_array_360
  # DEBUG total_codecs => total_codecs_359
  goto <bb 113>;

<bb 112>:
  D.44471_362 = smh_186->mparams;
  D.44471_362->num_codecs = 0;
  switch_core_media_prepare_codecs (session_161(D), 0);
  # DEBUG codec_array => codec_array_190
  D.44471_364 = smh_186->mparams;
  total_codecs_365 = D.44471_364->num_codecs;
  # DEBUG total_codecs => total_codecs_365

<bb 113>:
  # codec_array_84 = PHI <codec_array_360(111), codec_array_190(110), codec_array_190(112)>
  # total_codecs_85 = PHI <total_codecs_359(111), total_codecs_192(110), total_codecs_365(112)>
  # DEBUG total_codecs => total_codecs_85
  # DEBUG codec_array => codec_array_84
  D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
  if (D.44661_366 != 0B)
    goto <bb 116>;
  else
    goto <bb 114>;

<bb 114>:
  D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
  if (D.44663_367 != 0B)
    goto <bb 116>;
  else
    goto <bb 115>;

<bb 115>:
  D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
  if (D.44665_368 != 0B)
    goto <bb 116>;
  else
    goto <bb 117>;

<bb 116>:
  D.44530_369 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);

<bb 117>:
  switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
  switch_core_media_pass_zrtp_hash (session_161(D));
  check_ice (smh_186, 0, sdp_198, 0B);
  check_ice (smh_186, 1, sdp_198, 0B);
  m_370 = sdp_198->sdp_media;
  # DEBUG m => m_370
  # DEBUG nm_idx => 0
  # DEBUG m_idx => 0
  # DEBUG codec_ms => 0
  # DEBUG got_webrtc => 0
  # DEBUG got_udptl => 0
  # DEBUG got_savp => 0
  # DEBUG got_video_savp => NULL
  # DEBUG got_video_avp => NULL
  # DEBUG got_avp => 0
  # DEBUG got_audio => 0
  # DEBUG got_video_crypto => 0
  # DEBUG got_crypto => 0
  # DEBUG m => m_370
  # DEBUG cng_pt => 0
  # DEBUG best_te => 0
  # DEBUG match => 0
  if (m_370 != 0B)
    goto <bb 118>;
  else
    goto <bb 413> (done);

<bb 118>:
  # match_1800 = PHI <match_15(412), 0(117)>
  # best_te_680 = PHI <best_te_22(412), 0(117)>
  # cng_pt_1717 = PHI <cng_pt_26(412), 0(117)>
  # m_1764 = PHI <m_1093(412), m_370(117)>
  # got_crypto_1866 = PHI <got_crypto_55(412), 0(117)>
  # got_video_crypto_1674 = PHI <got_video_crypto_63(412), 0(117)>
  # got_audio_1693 = PHI <got_audio_66(412), 0(117)>
  # got_avp_671 = PHI <got_avp_1859(412), 0(117)>
  # got_savp_512 = PHI <got_savp_1739(412), 0(117)>
  # got_udptl_1868 = PHI <got_udptl_1743(412), 0(117)>
  # got_webrtc_452 = PHI <got_webrtc_78(412), 0(117)>
  # codec_ms_477 = PHI <codec_ms_94(412), 0(117)>
  # m_idx_1869 = PHI <m_idx_113(412), 0(117)>
  # nm_idx_1749 = PHI <nm_idx_121(412), 0(117)>
  # DEBUG ptime => dptime_1035
  # DEBUG maxptime => dmaxptime_1005
  D.44666_373 = m_1764->m_proto;
  if (D.44666_373 == 261)
    goto <bb 119>;
  else
    goto <bb 120>;

<bb 119>:
  got_webrtc_374 = got_webrtc_452 + 1;
  # DEBUG got_webrtc => got_webrtc_374
  switch_core_session_set_ice (session_161(D));

<bb 120>:
  # got_webrtc_78 = PHI <got_webrtc_452(118), got_webrtc_374(119)>
  # DEBUG got_webrtc => got_webrtc_78
  D.44669_375 = m_1764->m_proto_name;
  if (D.44669_375 != 0B)
    goto <bb 121>;
  else
    goto <bb 123>;

<bb 121>:
  D.44672_377 = strcasecmp (D.44669_375, "UDP/TLS/RTP/SAVPF");
  if (D.44672_377 == 0)
    goto <bb 122>;
  else
    goto <bb 123>;

<bb 122>:
  D.44530_378 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_378, 107, 1);

<bb 123>:
  D.44675_379 = m_1764->m_proto;
  D.44676_380 = D.44675_379 == 257;
  D.44677_381 = D.44675_379 == 261;
  D.44678_382 = D.44677_381 | D.44676_380;
  if (D.44678_382 != 0)
    goto <bb 124>;
  else
    goto <bb 126>;

<bb 124>:
  D.44681_383 = m_1764->m_type;
  if (D.44681_383 == 2)
    goto <bb 125>;
  else
    goto <bb 131>;

<bb 125>:
  got_savp_384 = got_savp_512 + 1;
  # DEBUG got_savp => got_savp_384
  goto <bb 131>;

<bb 126>:
  if (D.44675_379 == 256)
    goto <bb 127>;
  else
    goto <bb 129>;

<bb 127>:
  D.44681_387 = m_1764->m_type;
  if (D.44681_387 == 2)
    goto <bb 128>;
  else
    goto <bb 131>;

<bb 128>:
  got_avp_388 = got_avp_671 + 1;
  # DEBUG got_avp => got_avp_388
  goto <bb 131>;

<bb 129>:
  if (D.44675_379 == 258)
    goto <bb 130>;
  else
    goto <bb 131>;

<bb 130>:
  got_udptl_391 = got_udptl_1868 + 1;
  # DEBUG got_udptl => got_udptl_391
  # DEBUG got_udptl => got_udptl_391
  # DEBUG got_savp => got_savp_512
  # DEBUG got_video_savp => NULL
  # DEBUG got_video_avp => NULL
  # DEBUG got_avp => got_avp_671
  goto <bb 132>;

<bb 131>:
  # got_avp_68 = PHI <got_avp_671(124), got_avp_671(127), got_avp_671(129), got_avp_388(128), got_avp_671(125)>
  # got_savp_74 = PHI <got_savp_512(124), got_savp_512(127), got_savp_512(129), got_savp_512(128), got_savp_384(125)>
  # DEBUG got_udptl => got_udptl_1868
  # DEBUG got_savp => got_savp_74
  # DEBUG got_video_savp => NULL
  # DEBUG got_video_avp => NULL
  # DEBUG got_avp => got_avp_68
  if (got_udptl_1868 != 0)
    goto <bb 132>;
  else
    goto <bb 163>;

<bb 132>:
  # got_avp_1740 = PHI <got_avp_68(131), got_avp_671(130)>
  # got_savp_1711 = PHI <got_savp_74(131), got_savp_512(130)>
  # got_udptl_774 = PHI <got_udptl_1868(131), got_udptl_391(130)>
  D.44681_392 = m_1764->m_type;
  if (D.44681_392 == 8)
    goto <bb 133>;
  else
    goto <bb 163>;

<bb 133>:
  D.44697_393 = m_1764->m_port;
  if (D.44697_393 != 0)
    goto <bb 134>;
  else
    goto <bb 163>;

<bb 134>:
  # m_1045 = PHI <m_1764(133)>
  t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_1045);
  # DEBUG t38_options => t38_options_394
  D.44530_395 = session_161(D)->channel;
  D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
  if (D.44699_396 != 0)
    goto <bb 413> (done);
  else
    goto <bb 135>;

<bb 135>:
  D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
  D.44703_399 = switch_true (D.44702_398);
  if (D.44703_399 != 0)
    goto <bb 136>;
  else
    goto <bb 137>;

<bb 136>:
  D.44530_400 = session_161(D)->channel;
  switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
  # DEBUG match => 0
  goto <bb 413> (done);

<bb 137>:
  var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
  # DEBUG var => var_402
  D.44481_403 = smh_186->session;
  D.44482_404 = D.44481_403->channel;
  D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
  pass_406 = (int) D.44706_405;
  # DEBUG pass => pass_406
  D.44530_407 = session_161(D)->channel;
  D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
  if (D.44707_408 != 0)
    goto <bb 138>;
  else
    goto <bb 140>;

<bb 138>:
  if (proceed_209(D) != 0B)
    goto <bb 139>;
  else
    goto <bb 140>;

<bb 139>:
  *proceed_209(D) = 0;

<bb 140>:
  if (var_402 != 0B)
    goto <bb 141>;
  else
    goto <bb 143>;

<bb 141>:
  pass_409 = switch_true (var_402);
  # DEBUG pass => pass_409
  if (pass_409 == 0)
    goto <bb 142>;
  else
    goto <bb 143>;

<bb 142>:
  D.44716_410 = strcasecmp (var_402, "once");
  if (D.44716_410 == 0)
    goto <bb 144>;
  else
    goto <bb 145>;

<bb 143>:
  # pass_126 = PHI <pass_406(140), pass_409(141)>
  # DEBUG pass => pass_126
  if (pass_126 == 2)
    goto <bb 144>;
  else
    goto <bb 145>;

<bb 144>:
  # pass_1664 = PHI <pass_126(143), 2(142)>
  D.44481_412 = smh_186->session;
  D.44482_413 = D.44481_412->channel;
  D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
  if (D.44723_414 != 0)
    goto <bb 420>;
  else
    goto <bb 145>;

<bb 145>:
  # pass_1848 = PHI <0(142), pass_1664(144), pass_126(143)>
  D.44530_415 = session_161(D)->channel;
  D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
  if (D.44724_416 == 0)
    goto <bb 420>;
  else
    goto <bb 146>;

<bb 146>:
  D.44530_417 = session_161(D)->channel;
  D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
  if (D.44726_418 != 0)
    goto <bb 420>;
  else
    goto <bb 147>;

<bb 147>:
  D.44530_419 = session_161(D)->channel;
  D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
  if (D.44728_420 != 0)
    goto <bb 420>;
  else
    goto <bb 148>;

<bb 148>:
  D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44730_422 = switch_rtp_ready (D.44605_421);
  if (D.44730_422 == 0)
    goto <bb 420>;
  else
    goto <bb 149>;

<bb 149>:
  # DEBUG pass => pass_1848
  if (pass_1848 != 0)
    goto <bb 150>;
  else
    goto <bb 413> (done);

<bb 150>:
  D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
  if (D.44733_424 == 0)
    goto <bb 151>;
  else
    goto <bb 413> (done);

<bb 151>:
  other_session.89_425 = other_session;
  other_channel_426 = switch_core_session_get_channel (other_session.89_425);
  # DEBUG other_channel => other_channel_426
  D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  remote_host_428 = switch_rtp_get_remote_host (D.44605_427);
  # DEBUG remote_host => remote_host_428
  D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  remote_port_430 = switch_rtp_get_remote_port (D.44605_429);
  # DEBUG remote_port => remote_port_430
  tmp = "";
  D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
  if (D.44737_431 == 0)
    goto <bb 152>;
  else
    goto <bb 153>;

<bb 152>:
  D.44530_432 = session_161(D)->channel;
  D.44740_433 = switch_channel_get_name (D.44530_432);
  D.44741_434 = switch_channel_get_name (other_channel_426);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
  other_session.89_435 = other_session;
  switch_core_session_rwunlock (other_session.89_435);
  # DEBUG pass => 0
  # DEBUG match => 0
  goto <bb 413> (done);

<bb 153>:
  D.44530_438 = session_161(D)->channel;
  D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
  D.44743_440 = switch_true (D.44742_439);
  if (D.44743_440 != 0)
    goto <bb 154>;
  else
    goto <bb 156>;

<bb 154>:
  D.44530_441 = session_161(D)->channel;
  D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
  D.44747_443 = switch_true (D.44746_442);
  if (D.44747_443 != 0)
    goto <bb 155>;
  else
    goto <bb 156>;

<bb 155>:
  switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);

<bb 156>:
  D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44751_445 = t38_options_394->remote_ip;
  D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
  D.44750_444->remote_sdp_ip = D.44752_446;
  D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44753_448 = t38_options_394->remote_port;
  D.44750_447->remote_sdp_port = D.44753_448;
  D.44756_449 = remote_host_428 != 0B;
  D.44757_450 = remote_port_430 != 0;
  D.44758_451 = D.44757_450 & D.44756_449;
  if (D.44758_451 != 0)
    goto <bb 157>;
  else
    goto <bb 160>;

<bb 157>:
  D.44760_453 = D.44750_447->remote_sdp_ip;
  D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
  if (D.39032_454 == 0)
    goto <bb 158>;
  else
    goto <bb 160>;

<bb 158>:
  if (remote_port_430 == D.44753_448)
    goto <bb 159>;
  else
    goto <bb 160>;

<bb 159>:
  D.44530_457 = session_161(D)->channel;
  D.44764_458 = switch_channel_get_name (D.44530_457);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
  goto <bb 162>;

<bb 160>:
  err = 0B;
  D.44530_459 = session_161(D)->channel;
  D.44765_460 = switch_channel_get_name (D.44530_459);
  D.44766_461 = (int) remote_port_430;
  D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_463 = D.44750_462->remote_sdp_ip;
  D.44762_465 = D.44750_462->remote_sdp_port;
  D.44767_466 = (int) D.44762_465;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
  D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44762_468 = D.44750_467->remote_sdp_port;
  D.44767_469 = (int) D.44762_468;
  switch_snprintf (&tmp, 32, "%d", D.44767_469);
  D.44530_470 = session_161(D)->channel;
  D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_472 = D.44750_471->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
  D.44530_473 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
  D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_476 = D.44750_475->remote_sdp_ip;
  D.44762_478 = D.44750_475->remote_sdp_port;
  D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
  if (D.44768_479 != 0)
    goto <bb 161>;
  else
    goto <bb 162>;

<bb 161>:
  err.90_480 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
  switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);

<bb 162>:
  other_session.89_481 = other_session;
  switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
  D.44481_482 = smh_186->session;
  D.44482_483 = D.44481_482->channel;
  switch_channel_set_flag_value (D.44482_483, 101, 1);
  other_session.89_484 = other_session;
  D.44772_485 = other_session.89_484->channel;
  switch_channel_set_flag_value (D.44772_485, 101, 1);
  other_session.89_486 = other_session;
  msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
  # DEBUG msg => msg_487
  msg_487->message_id = 21;
  msg_487->from = "src/switch_core_media.c";
  other_session.89_488 = other_session;
  D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
  msg_487->string_arg = D.44773_489;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
  other_session.89_490 = other_session;
  switch_core_session_queue_message (other_session.89_490, msg_487);
  other_session.89_491 = other_session;
  switch_core_session_rwunlock (other_session.89_491);
  goto <bb 413> (done);

<bb 163>:
  # got_avp_1859 = PHI <got_avp_68(131), got_avp_1740(132), got_avp_1740(133)>
  # got_savp_1739 = PHI <got_savp_74(131), got_savp_1711(132), got_savp_1711(133)>
  # got_udptl_1743 = PHI <got_udptl_1868(131), got_udptl_774(132), got_udptl_774(133)>
  D.44681_493 = m_1764->m_type;
  if (D.44681_493 == 2)
    goto <bb 164>;
  else
    goto <bb 332>;

<bb 164>:
  D.44697_494 = m_1764->m_port;
  D.44777_495 = D.44697_494 != 0;
  D.44778_496 = got_audio_1693 == 0;
  D.44779_497 = D.44778_496 & D.44777_495;
  if (D.44779_497 != 0)
    goto <bb 165>;
  else
    goto <bb 412>;

<bb 165>:
  D.44781_498 = switch_rtp_has_dtls ();
  if (D.44781_498 != 0)
    goto <bb 166>;
  else
    goto <bb 172>;

<bb 166>:
  D.44784_499 = dtls_ok (session_161(D));
  if (D.44784_499 != 0)
    goto <bb 167>;
  else
    goto <bb 172>;

<bb 167>:
  attr_500 = m_1764->m_attributes;
  # DEBUG attr => attr_500
  # DEBUG got_crypto => got_crypto_1866
  # DEBUG attr => attr_500
  if (attr_500 != 0B)
    goto <bb 168>;
  else
    goto <bb 201>;

<bb 168>:
  # attr_1559 = PHI <attr_506(171), attr_500(167)>
  # got_crypto_361 = PHI <got_crypto_50(171), got_crypto_1866(167)>
  D.44590_501 = attr_1559->a_name;
  D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
  if (D.44787_502 == 0)
    goto <bb 169>;
  else
    goto <bb 171>;

<bb 169>:
  D.44619_503 = attr_1559->a_value;
  # DEBUG s => D.44619_503
  if (D.44619_503 == 0B)
    goto <bb 171>;
  else
    goto <bb 170>;

<bb 170>:
  D.47887_1469 = *D.44619_503;
  if (D.47887_1469 == 0)
    goto <bb 171>;
  else
    goto <bb 421>;

<bb 171>:
  # got_crypto_50 = PHI <got_crypto_361(168), got_crypto_361(170), 1(421), got_crypto_361(169)>
  # DEBUG got_crypto => got_crypto_50
  attr_506 = attr_1559->a_next;
  # DEBUG attr => attr_506
  # DEBUG got_crypto => got_crypto_50
  # DEBUG attr => attr_506
  if (attr_506 != 0B)
    goto <bb 168>;
  else
    goto <bb 435>;

<bb 172>:
  # DEBUG got_crypto => got_crypto_1866
  attr_507 = m_1764->m_attributes;
  # DEBUG attr => attr_507
  # DEBUG got_crypto => got_crypto_1866
  # DEBUG maxptime => dmaxptime_1005
  # DEBUG ptime => dptime_1035
  # DEBUG attr => attr_507
  if (attr_507 != 0B)
    goto <bb 173>;
  else
    goto <bb 201>;

<bb 173>:
  # attr_1599 = PHI <attr_548(200), attr_507(172), attr_77(435)>
  # ptime_1475 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(435)>
  # maxptime_1470 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(435)>
  # got_crypto_1118 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_95(435)>
  D.44590_508 = attr_1599->a_name;
  D.44795_509 = strcasecmp (D.44590_508, "rtcp");
  if (D.44795_509 == 0)
    goto <bb 174>;
  else
    goto <bb 177>;

<bb 174>:
  D.44619_510 = attr_1599->a_value;
  if (D.44619_510 != 0B)
    goto <bb 175>;
  else
    goto <bb 177>;

<bb 175>:
  D.44530_511 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_510, 1);
  D.44619_513 = attr_1599->a_value;
  # DEBUG __nptr => D.44619_513
  D.47890_1471 = strtol (D.44619_513, 0B, 10);
  D.44799_515 = (short unsigned int) D.47890_1471;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;
  D.44471_516 = smh_186->mparams;
  D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
  if (D.44800_517 == 0B)
    goto <bb 176>;
  else
    goto <bb 200>;

<bb 176>:
  D.44471_516->rtcp_audio_interval_msec = "5000";
  goto <bb 200>;

<bb 177>:
  D.44805_520 = strcasecmp (D.44590_508, "ptime");
  if (D.44805_520 == 0)
    goto <bb 178>;
  else
    goto <bb 180>;

<bb 178>:
  D.44619_521 = attr_1599->a_value;
  if (D.44619_521 != 0B)
    goto <bb 179>;
  else
    goto <bb 180>;

<bb 179>:
  # DEBUG __nptr => D.44619_521
  ptime_1472 = strtol (D.44619_521, 0B, 10);
  # DEBUG ptime => NULL
  goto <bb 200>;

<bb 180>:
  D.44810_525 = strcasecmp (D.44590_508, "maxptime");
  if (D.44810_525 == 0)
    goto <bb 181>;
  else
    goto <bb 183>;

<bb 181>:
  D.44619_526 = attr_1599->a_value;
  if (D.44619_526 != 0B)
    goto <bb 182>;
  else
    goto <bb 183>;

<bb 182>:
  # DEBUG __nptr => D.44619_526
  maxptime_1473 = strtol (D.44619_526, 0B, 10);
  # DEBUG maxptime => NULL
  goto <bb 200>;

<bb 183>:
  if (got_crypto_1118 <= 0)
    goto <bb 184>;
  else
    goto <bb 200>;

<bb 184>:
  D.44815_530 = strcasecmp (D.44590_508, "crypto");
  if (D.44815_530 == 0)
    goto <bb 185>;
  else
    goto <bb 200>;

<bb 185>:
  D.44619_531 = attr_1599->a_value;
  # DEBUG s => D.44619_531
  if (D.44619_531 == 0B)
    goto <bb 200>;
  else
    goto <bb 186>;

<bb 186>:
  D.47900_1474 = *D.44619_531;
  if (D.47900_1474 == 0)
    goto <bb 200>;
  else
    goto <bb 422>;

<bb 187>:
  D.44530_536 = session_161(D)->channel;
  D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
  # DEBUG expr => D.44825_537
  if (D.44825_537 != 0B)
    goto <bb 188>;
  else
    goto <bb 423>;

<bb 188>:
  D.49723_1590 = strcasecmp (D.44825_537, "yes");
  if (D.49723_1590 == 0)
    goto <bb 197>;
  else
    goto <bb 189>;

<bb 189>:
  D.49724_1591 = strcasecmp (D.44825_537, "on");
  if (D.49724_1591 == 0)
    goto <bb 197>;
  else
    goto <bb 190>;

<bb 190>:
  D.49725_1592 = strcasecmp (D.44825_537, "true");
  if (D.49725_1592 == 0)
    goto <bb 197>;
  else
    goto <bb 191>;

<bb 191>:
  D.49726_1593 = strcasecmp (D.44825_537, "t");
  if (D.49726_1593 == 0)
    goto <bb 197>;
  else
    goto <bb 192>;

<bb 192>:
  D.49727_1594 = strcasecmp (D.44825_537, "enabled");
  if (D.49727_1594 == 0)
    goto <bb 197>;
  else
    goto <bb 193>;

<bb 193>:
  D.49728_1595 = strcasecmp (D.44825_537, "active");
  if (D.49728_1595 == 0)
    goto <bb 197>;
  else
    goto <bb 194>;

<bb 194>:
  D.49729_1596 = strcasecmp (D.44825_537, "allow");
  if (D.49729_1596 == 0)
    goto <bb 197>;
  else
    goto <bb 195>;

<bb 195>:
  D.49730_1597 = switch_is_number (D.44825_537);
  if (D.49730_1597 != 0)
    goto <bb 196>;
  else
    goto <bb 423>;

<bb 196>:
  # DEBUG __nptr => D.44825_537
  D.49731_1598 = strtol (D.44825_537, 0B, 10);
  if (D.49731_1598 != 0)
    goto <bb 197>;
  else
    goto <bb 423>;

<bb 197>:
Invalid sum of outgoing probabilities 0.0%
  goto <bb 199>;

<bb 198>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  # DEBUG match => 0
  goto <bb 413> (done);

<bb 199>:
  crypto_544 = attr_1599->a_value;
  # DEBUG crypto => crypto_544
  # DEBUG __nptr => crypto_544
  crypto_tag_1476 = strtol (crypto_544, 0B, 10);
  # DEBUG crypto_tag => NULL
  got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));
  # DEBUG got_crypto => got_crypto_547

<bb 200>:
  # ptime_34 = PHI <ptime_1475(176), ptime_1472(179), ptime_1475(182), ptime_1475(183), ptime_1475(184), ptime_1475(186), ptime_1475(199), ptime_1475(175), ptime_1475(185)>
  # maxptime_38 = PHI <maxptime_1470(176), maxptime_1470(179), maxptime_1473(182), maxptime_1470(183), maxptime_1470(184), maxptime_1470(186), maxptime_1470(199), maxptime_1470(175), maxptime_1470(185)>
  # got_crypto_53 = PHI <got_crypto_1118(176), got_crypto_1118(179), got_crypto_1118(182), got_crypto_1118(183), got_crypto_1118(184), got_crypto_1118(186), got_crypto_547(199), got_crypto_1118(175), got_crypto_1118(185)>
  # DEBUG got_crypto => got_crypto_53
  # DEBUG maxptime => maxptime_38
  # DEBUG ptime => ptime_34
  attr_548 = attr_1599->a_next;
  # DEBUG attr => attr_548
  # DEBUG got_crypto => got_crypto_53
  # DEBUG maxptime => maxptime_38
  # DEBUG ptime => ptime_34
  # DEBUG attr => attr_548
  if (attr_548 != 0B)
    goto <bb 173>;
  else
    goto <bb 201>;

<bb 201>:
  # ptime_1033 = PHI <ptime_34(200), dptime_1035(172), dptime_1035(167)>
  # maxptime_1040 = PHI <maxptime_38(200), dmaxptime_1005(172), dmaxptime_1005(167)>
  # got_crypto_969 = PHI <got_crypto_53(200), got_crypto_1866(172), got_crypto_1866(167)>
  D.44834_549 = got_crypto_969 == -1;
  D.44835_550 = got_savp_1739 != 0;
  D.44836_551 = D.44834_549 & D.44835_550;
  if (D.44836_551 != 0)
    goto <bb 202>;
  else
    goto <bb 204>;

<bb 202>:
  D.44839_552 = got_avp_1859 | got_webrtc_78;
  if (D.44839_552 == 0)
    goto <bb 203>;
  else
    goto <bb 204>;

<bb 203>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
  # DEBUG match => 0
  goto <bb 413> (done);

<bb 204>:
  connection_554 = sdp_198->sdp_connection;
  # DEBUG connection => connection_554
  connection_555 = m_1764->m_connections;
  if (connection_555 != 0B)
    goto <bb 207>;
  else
    goto <bb 205>;

<bb 205>:
  # DEBUG connection => connection_554
  if (connection_554 == 0B)
    goto <bb 206>;
  else
    goto <bb 207>;

<bb 206>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  # DEBUG match => 0
  goto <bb 413> (done);

<bb 207>:
  # connection_139 = PHI <connection_554(205), connection_555(204)>
  # DEBUG x => 0
  map_559 = m_1764->m_rtpmaps;
  # DEBUG map => map_559
  # DEBUG map => map_559
  # DEBUG nm_idx => nm_idx_1749
  # DEBUG m_idx => m_idx_1869
  # DEBUG codec_ms => codec_ms_477
  # DEBUG x => NULL
  # DEBUG cng_pt => cng_pt_1717
  # DEBUG best_te => best_te_680
  # DEBUG match => match_1800
  if (map_559 != 0B)
    goto <bb 208>;
  else
    goto <bb 272>;

<bb 208>:
  # match_1901 = PHI <match_7(271), match_1800(207)>
  # best_te_1898 = PHI <best_te_19(271), best_te_680(207)>
  # cng_pt_1667 = PHI <cng_pt_24(271), cng_pt_1717(207)>
  # codec_ms_1720 = PHI <codec_ms_91(271), codec_ms_477(207)>
  # m_idx_792 = PHI <m_idx_103(271), m_idx_1869(207)>
  # nm_idx_1755 = PHI <nm_idx_117(271), nm_idx_1749(207)>
  # map_1728 = PHI <map_711(271), map_559(207)>
  # DEBUG map_bit_rate => 0
  codec_fmtp = {};
  rm_encoding_561 = map_1728->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_561
  if (rm_encoding_561 == 0B)
    goto <bb 210>;
  else
    goto <bb 209>;

<bb 209>:

<bb 210>:
  # rm_encoding_130 = PHI <rm_encoding_561(209), ""(208)>
  # DEBUG rm_encoding => rm_encoding_130
  D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
  if (D.44848_563 == 0)
    goto <bb 211>;
  else
    goto <bb 214>;

<bb 211>:
  if (best_te_1898 == 0)
    goto <bb 213>;
  else
    goto <bb 212>;

<bb 212>:
  D.44854_564 = map_1728->rm_rate;
  D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44855_566 = D.44750_565->rm_rate;
  if (D.44854_564 == D.44855_566)
    goto <bb 213>;
  else
    goto <bb 271>;

<bb 213>:
  D.44856_567 = map_1728->rm_pt;
  best_te_568 = (switch_payload_t) D.44856_567;
  # DEBUG best_te => best_te_568
  D.44857_569 = (int) best_te_568;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
  goto <bb 271>;

<bb 214>:
  D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
  if (D.44858_570 == 0)
    goto <bb 215>;
  else
    goto <bb 219>;

<bb 215>:
  if (cng_pt_1667 == 0)
    goto <bb 216>;
  else
    goto <bb 219>;

<bb 216>:
  D.44863_571 = strcasecmp (rm_encoding_130, "CN");
  if (D.44863_571 == 0)
    goto <bb 217>;
  else
    goto <bb 219>;

<bb 217>:
  D.44856_572 = map_1728->rm_pt;
  cng_pt_573 = (switch_payload_t) D.44856_572;
  # DEBUG cng_pt => cng_pt_573
  D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_574 != 0B)
    goto <bb 218>;
  else
    goto <bb 271>;

<bb 218>:
  D.44868_575 = (int) cng_pt_573;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
  D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44471_577 = smh_186->mparams;
  D.44869_578 = D.44471_577->cng_pt;
  switch_rtp_set_cng_pt (D.44605_576, D.44869_578);
  goto <bb 271>;

<bb 219>:
  # DEBUG x => NULL
  if (match_1901 != 0)
    goto <bb 271>;
  else
    goto <bb 220>;

<bb 220>:
  # DEBUG codec_ms => ptime_1033
  if (maxptime_1040 != 0)
    goto <bb 221>;
  else
    goto <bb 223>;

<bb 221>:
  D.44877_582 = ptime_1033 == 0;
  D.44878_583 = ptime_1033 > maxptime_1040;
  D.44879_584 = D.44878_583 | D.44877_582;
  if (D.44879_584 != 0)
    goto <bb 424>;
  else
    goto <bb 222>;

<bb 222>:
  goto <bb 424>;

<bb 223>:
  # DEBUG codec_ms => ptime_1033
  if (ptime_1033 == 0)
    goto <bb 224>;
  else
    goto <bb 225>;

<bb 224>:
  D.44856_586 = map_1728->rm_pt;
  D.44884_587 = (uint32_t) D.44856_586;
  D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
  codec_ms_589 = (int) D.44885_588;
  # DEBUG codec_ms => codec_ms_589

<bb 225>:
  # codec_ms_87 = PHI <codec_ms_1883(424), codec_ms_589(224), ptime_1033(223)>
  # DEBUG codec_ms => codec_ms_87
  D.44856_590 = map_1728->rm_pt;
  csui.173_591 = (unsigned char) D.44856_590;
  # DEBUG payload => csui.173_591
  if (csui.173_591 <= 18)
    goto <bb 226> (<L499>);
  else
    goto <bb 227> (<L500>);

<L499>:
  map_bit_rate_1479 = CSWTCH.174[csui.173_591];

  # map_bit_rate_1480 = PHI <0(225), map_bit_rate_1479(226)>
<L500>:
<L501>:
  # DEBUG map_bit_rate => NULL
  if (ptime_1033 == 0)
    goto <bb 228>;
  else
    goto <bb 230>;

<bb 228>:
  D.44889_593 = map_1728->rm_encoding;
  D.44890_594 = strcasecmp (D.44889_593, "g723");
  if (D.44890_594 == 0)
    goto <bb 229>;
  else
    goto <bb 230>;

<bb 229>:
  # DEBUG codec_ms => 33

<bb 230>:
  # codec_ms_88 = PHI <codec_ms_87(227), codec_ms_87(228), 33(229)>
  # DEBUG codec_ms => codec_ms_88
  remote_codec_rate_596 = map_1728->rm_rate;
  # DEBUG remote_codec_rate => remote_codec_rate_596
  # DEBUG fmtp_remote_codec_rate => 0
  memset (&codec_fmtp, 0, 16);
  D.44893_598 = map_1728->rm_fmtp;
  # DEBUG s => D.44893_598
  if (D.44893_598 == 0B)
    goto <bb 232>;
  else
    goto <bb 231>;

<bb 231>:
  D.47915_1481 = *D.44893_598;
  if (D.47915_1481 == 0)
    goto <bb 232>;
  else
    goto <bb 425>;

<bb 232>:
  D.44889_600 = map_1728->rm_encoding;
  D.44897_601 = strcasecmp (D.44889_600, "ilbc");
  if (D.44897_601 == 0)
    goto <bb 241>;
  else
    goto <bb 233>;

<bb 233>:
  D.44901_605 = strcasecmp (D.44889_600, "isac");
  if (D.44901_605 == 0)
    goto <bb 234>;
  else
    goto <bb 241>;

<bb 234>:
  # DEBUG codec_ms => 39
  # DEBUG map_bit_rate => 32001
  goto <bb 241>;

<bb 235>:
  D.44908_612 = codec_fmtp.bits_per_second;
  if (D.44908_612 != 0)
    goto <bb 236>;
  else
    goto <bb 237>;

<bb 236>:
  map_bit_rate_614 = (uint32_t) D.44908_612;
  # DEBUG map_bit_rate => map_bit_rate_614

<bb 237>:
  # map_bit_rate_131 = PHI <map_bit_rate_1480(235), map_bit_rate_614(236)>
  # DEBUG map_bit_rate => map_bit_rate_131
  D.44911_615 = codec_fmtp.microseconds_per_packet;
  if (D.44911_615 != 0)
    goto <bb 238>;
  else
    goto <bb 239>;

<bb 238>:
  codec_ms_617 = D.44911_615 / 1000;
  # DEBUG codec_ms => codec_ms_617

<bb 239>:
  # codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>
  # DEBUG codec_ms => codec_ms_89
  fmtp_remote_codec_rate_618 = codec_fmtp.actual_samples_per_second;
  if (fmtp_remote_codec_rate_618 != 0)
    goto <bb 240>;
  else
    goto <bb 241>;

<bb 240>:
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_618

<bb 241>:
  # codec_ms_90 = PHI <codec_ms_88(233), codec_ms_88(425), codec_ms_89(239), codec_ms_89(240), 32(232), 39(234)>
  # fmtp_remote_codec_rate_99 = PHI <0(233), 0(425), 0(239), fmtp_remote_codec_rate_618(240), 0(232), 0(234)>
  # map_bit_rate_132 = PHI <map_bit_rate_1480(233), map_bit_rate_1480(425), map_bit_rate_131(239), map_bit_rate_131(240), 13332(232), 32001(234)>
  # DEBUG map_bit_rate => map_bit_rate_132
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99
  # DEBUG codec_ms => codec_ms_90
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG nm_idx => nm_idx_1755
  # DEBUG m_idx => m_idx_792
  # DEBUG remote_codec_rate => remote_codec_rate_596
  # DEBUG match => 0
  D.44471_1501 = smh_186->mparams;
  D.44996_1498 = D.44471_1501->num_codecs;
  D.44997_1496 = D.44996_1498 > 0;
  D.44998_1609 = total_codecs_85 > 0;
  D.44999_1152 = D.44998_1609 & D.44997_1496;
  if (D.44999_1152 != 0)
    goto <bb 242>;
  else
    goto <bb 270>;

<bb 242>:
  # remote_codec_rate_1493 = PHI <remote_codec_rate_97(269), remote_codec_rate_596(241)>
  # m_idx_1487 = PHI <m_idx_100(269), m_idx_792(241)>
  # nm_idx_1139 = PHI <nm_idx_115(269), nm_idx_1755(241)>
  # i_1622 = PHI <i_710(269), 0(241)>
  i.91_626 = (unsigned int) i_1622;
  D.44918_627 = i.91_626 * 4;
  D.44919_628 = codec_array_84 + D.44918_627;
  imp_629 = *D.44919_628;
  # DEBUG imp => imp_629
  D.44920_630 = imp_629->bits_per_second;
  bit_rate_631 = (uint32_t) D.44920_630;
  # DEBUG bit_rate => bit_rate_631
  codec_rate_632 = imp_629->samples_per_second;
  # DEBUG codec_rate => codec_rate_632
  D.44921_633 = imp_629->codec_type;
  if (D.44921_633 != 0)
    goto <bb 269>;
  else
    goto <bb 243>;

<bb 243>:
  D.44856_634 = map_1728->rm_pt;
  D.44924_635 = (int) D.44856_634;
  remote_codec_rate.92_636 = (int) remote_codec_rate_1493;
  D.44926_637 = imp_629->iananame;
  D.44927_638 = imp_629->ianacode;
  D.44928_639 = (int) D.44927_638;
  D.44929_640 = imp_629->microseconds_per_packet;
  D.44930_641 = D.44929_640 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
  D.44889_642 = map_1728->rm_encoding;
  # DEBUG s => D.44889_642
  if (D.44889_642 == 0B)
    goto <bb 245>;
  else
    goto <bb 244>;

<bb 244>:
  D.47919_1483 = *D.44889_642;
  if (D.47919_1483 == 0)
    goto <bb 245>;
  else
    goto <bb 426>;

<bb 245>:
  D.44856_649 = map_1728->rm_pt;
  D.44924_650 = (int) D.44856_649;
  if (D.44924_650 <= 95)
    goto <bb 246>;
  else
    goto <bb 247>;

<bb 246>:
  D.44927_653 = imp_629->ianacode;
  D.44928_654 = (int) D.44927_653;
  match_655 = D.44924_650 == D.44928_654;
  # DEBUG match => match_655
  goto <bb 252>;

<bb 247>:
  D.44926_656 = imp_629->iananame;
  D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
  if (D.44944_657 == 0)
    goto <bb 248>;
  else
    goto <bb 250>;

<bb 248>:
  if (remote_codec_rate_1493 == codec_rate_632)
    goto <bb 250>;
  else
    goto <bb 249>;

<bb 249>:
  D.44947_658 = imp_629->actual_samples_per_second;
  iftmp.93_765 = fmtp_remote_codec_rate_99 == D.44947_658;

<bb 250>:
  # iftmp.93_144 = PHI <iftmp.93_765(249), 0(247), 1(248)>
  match_661 = (uint8_t) iftmp.93_144;
  # DEBUG match => match_661
  if (fmtp_remote_codec_rate_99 != 0)
    goto <bb 252>;
  else
    goto <bb 251>;

<bb 251>:

<bb 252>:
  # match_1 = PHI <match_655(246), match_661(251), match_661(250)>
  # remote_codec_rate_96 = PHI <remote_codec_rate_1493(246), remote_codec_rate_1493(251), fmtp_remote_codec_rate_99(250)>
  # DEBUG remote_codec_rate => remote_codec_rate_96
  # DEBUG match => match_1
  D.44950_663 = (_Bool) match_1;
  D.44951_664 = bit_rate_631 != 0;
  D.44952_665 = D.44950_663 & D.44951_664;
  if (D.44952_665 != 0)
    goto <bb 253>;
  else
    goto <bb 256>;

<bb 253>:
  D.44955_666 = map_bit_rate_132 != 0;
  D.44956_667 = map_bit_rate_132 != bit_rate_631;
  D.44957_668 = D.44956_667 & D.44955_666;
  if (D.44957_668 != 0)
    goto <bb 254>;
  else
    goto <bb 256>;

<bb 254>:
  D.44960_670 = strcasecmp (D.44889_642, "ilbc");
  if (D.44960_670 != 0)
    goto <bb 255>;
  else
    goto <bb 256>;

<bb 255>:
  D.44963_672 = strcasecmp (D.44889_642, "isac");
  if (D.44963_672 != 0)
    goto <bb 269>;
  else
    goto <bb 256>;

<bb 256>:
  # match_2 = PHI <match_1(252), 1(253), 1(254), 1(255)>
  # DEBUG match => match_2
  D.44950_674 = (_Bool) match_2;
  D.44968_675 = remote_codec_rate_96 != 0;
  D.44969_676 = D.44950_674 & D.44968_675;
  if (D.44969_676 != 0)
    goto <bb 257>;
  else
    goto <bb 261>;

<bb 257>:
  D.44972_677 = codec_rate_632 != 0;
  D.44973_678 = remote_codec_rate_96 != codec_rate_632;
  D.44974_679 = D.44973_678 & D.44972_677;
  if (D.44974_679 != 0)
    goto <bb 258>;
  else
    goto <bb 262>;

<bb 258>:
  D.44977_681 = strcasecmp (D.44889_642, "pcma");
  if (D.44977_681 == 0)
    goto <bb 260>;
  else
    goto <bb 259>;

<bb 259>:
  D.44979_683 = strcasecmp (D.44889_642, "pcmu");
  if (D.44979_683 == 0)
    goto <bb 260>;
  else
    goto <bb 262>;

<bb 260>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
  # DEBUG match => 0
  # DEBUG match => 0
  goto <bb 269>;

<bb 261>:
  # DEBUG match => match_2
  if (match_2 != 0)
    goto <bb 262>;
  else
    goto <bb 269>;

<bb 262>:
  if (scrooge_80 != 0)
    goto <bb 263>;
  else
    goto <bb 264>;

<bb 263>:
  D.44926_685 = imp_629->iananame;
  D.44984_686 = imp_629->samples_per_second;
  D.44929_687 = imp_629->microseconds_per_packet;
  D.44930_688 = D.44929_687 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
  goto <bb 268>;

<bb 264>:
  D.44989_689 = ptime_1033 != 0;
  D.44990_690 = codec_ms_90 != 0;
  D.44991_691 = D.44990_690 & D.44989_689;
  if (D.44991_691 != 0)
    goto <bb 265>;
  else
    goto <bb 266>;

<bb 265>:
  D.44993_692 = codec_ms_90 * 1000;
  D.44929_693 = imp_629->microseconds_per_packet;
  if (D.44993_692 != D.44929_693)
    goto <bb 267>;
  else
    goto <bb 266>;

<bb 266>:
  if (remote_codec_rate_96 != codec_rate_632)
    goto <bb 267>;
  else
    goto <bb 268>;

<bb 267>:
  # DEBUG match => 0
  D.44926_695 = imp_629->iananame;
  D.44927_696 = imp_629->ianacode;
  D.44928_697 = (int) D.44927_696;
  D.44929_698 = imp_629->microseconds_per_packet;
  D.44930_699 = D.44929_698 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
  near_matches[nm_idx_1139].codec_idx = i_1622;
  remote_codec_rate.92_700 = (int) remote_codec_rate_96;
  near_matches[nm_idx_1139].rate = remote_codec_rate.92_700;
  near_matches[nm_idx_1139].imp = imp_629;
  near_matches[nm_idx_1139].map = map_1728;
  nm_idx_701 = nm_idx_1139 + 1;
  # DEBUG nm_idx => nm_idx_701
  goto <bb 269>;

<bb 268>:
  matches[m_idx_1487].codec_idx = i_1622;
  codec_rate.94_702 = (int) codec_rate_632;
  matches[m_idx_1487].rate = codec_rate.94_702;
  matches[m_idx_1487].imp = imp_629;
  matches[m_idx_1487].map = map_1728;
  m_idx_703 = m_idx_1487 + 1;
  # DEBUG m_idx => m_idx_703
  D.44926_704 = imp_629->iananame;
  D.44927_705 = imp_629->ianacode;
  D.44928_706 = (int) D.44927_705;
  D.44929_707 = imp_629->microseconds_per_packet;
  D.44930_708 = D.44929_707 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
  if (m_idx_703 > 29)
    goto <bb 272>;
  else
    goto <bb 269>;

<bb 269>:
  # remote_codec_rate_97 = PHI <remote_codec_rate_1493(242), remote_codec_rate_96(260), remote_codec_rate_96(267), remote_codec_rate_96(268), remote_codec_rate_96(261), remote_codec_rate_96(255)>
  # m_idx_100 = PHI <m_idx_1487(242), m_idx_1487(260), m_idx_1487(267), m_idx_703(268), m_idx_1487(261), m_idx_1487(255)>
  # nm_idx_115 = PHI <nm_idx_1139(242), nm_idx_1139(260), nm_idx_701(267), nm_idx_1139(268), nm_idx_1139(261), nm_idx_1139(255)>
  # DEBUG nm_idx => nm_idx_115
  # DEBUG m_idx => m_idx_100
  # DEBUG remote_codec_rate => remote_codec_rate_97
  # DEBUG match => 0
  i_710 = i_1622 + 1;
  # DEBUG i => i_710
  # DEBUG i => i_710
  # DEBUG nm_idx => nm_idx_115
  # DEBUG m_idx => m_idx_100
  # DEBUG remote_codec_rate => remote_codec_rate_97
  # DEBUG match => 0
  D.44471_621 = smh_186->mparams;
  D.44996_622 = D.44471_621->num_codecs;
  D.44997_623 = D.44996_622 > i_710;
  D.44998_624 = total_codecs_85 > i_710;
  D.44999_625 = D.44998_624 & D.44997_623;
  if (D.44999_625 != 0)
    goto <bb 242>;
  else
    goto <bb 270>;

<bb 270>:
  # m_idx_102 = PHI <m_idx_100(269), m_idx_792(241)>
  # nm_idx_901 = PHI <nm_idx_115(269), nm_idx_1755(241)>
  # DEBUG m_idx => m_idx_102
  # DEBUG match => 0
  if (m_idx_102 > 29)
    goto <bb 272>;
  else
    goto <bb 271>;

<bb 271>:
  # match_7 = PHI <match_1901(213), match_1901(218), match_1901(212), match_1901(219), 0(270), match_1901(217)>
  # best_te_19 = PHI <best_te_568(213), best_te_1898(218), best_te_1898(212), best_te_1898(219), best_te_1898(270), best_te_1898(217)>
  # cng_pt_24 = PHI <cng_pt_1667(213), cng_pt_573(218), cng_pt_1667(212), cng_pt_1667(219), cng_pt_1667(270), cng_pt_573(217)>
  # codec_ms_91 = PHI <codec_ms_1720(213), codec_ms_1720(218), codec_ms_1720(212), codec_ms_1720(219), codec_ms_90(270), codec_ms_1720(217)>
  # m_idx_103 = PHI <m_idx_792(213), m_idx_792(218), m_idx_792(212), m_idx_792(219), m_idx_102(270), m_idx_792(217)>
  # nm_idx_117 = PHI <nm_idx_1755(213), nm_idx_1755(218), nm_idx_1755(212), nm_idx_1755(219), nm_idx_901(270), nm_idx_1755(217)>
  # DEBUG nm_idx => nm_idx_117
  # DEBUG m_idx => m_idx_103
  # DEBUG codec_ms => codec_ms_91
  # DEBUG x => NULL
  # DEBUG cng_pt => cng_pt_24
  # DEBUG best_te => best_te_19
  # DEBUG match => match_7
  map_711 = map_1728->rm_next;
  # DEBUG map => map_711
  # DEBUG map => map_711
  # DEBUG nm_idx => nm_idx_117
  # DEBUG m_idx => m_idx_103
  # DEBUG codec_ms => codec_ms_91
  # DEBUG x => NULL
  # DEBUG cng_pt => cng_pt_24
  # DEBUG best_te => best_te_19
  # DEBUG match => match_7
  if (map_711 != 0B)
    goto <bb 208>;
  else
    goto <bb 272>;

<bb 272>:
  # match_9 = PHI <1(268), match_7(271), 0(270), match_1800(207)>
  # codec_ms_93 = PHI <codec_ms_90(268), codec_ms_91(271), codec_ms_90(270), codec_ms_477(207)>
  # m_idx_105 = PHI <m_idx_703(268), m_idx_103(271), m_idx_102(270), m_idx_1869(207)>
  # nm_idx_119 = PHI <nm_idx_1139(268), nm_idx_117(271), nm_idx_901(270), nm_idx_1749(207)>
  # best_te_1624 = PHI <best_te_1898(268), best_te_19(271), best_te_1898(270), best_te_680(207)>
  # cng_pt_1626 = PHI <cng_pt_1667(268), cng_pt_24(271), cng_pt_1667(270), cng_pt_1717(207)>
  # DEBUG nm_idx => nm_idx_119
  # DEBUG m_idx => m_idx_105
  # DEBUG codec_ms => codec_ms_93
  # DEBUG match => match_9
  D.45001_712 = smh_186->crypto_mode;
  D.45002_713 = D.45001_712 == 1;
  D.45003_714 = got_crypto_969 <= 0;
  D.45004_715 = D.45003_714 & D.45002_713;
  if (D.45004_715 != 0)
    goto <bb 273>;
  else
    goto <bb 274>;

<bb 273>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
  # DEBUG match => 0
  # DEBUG nm_idx => 0
  # DEBUG m_idx => 0
  # DEBUG nm_idx => 0
  # DEBUG m_idx => 0
  # DEBUG match => 0
  # DEBUG m_idx => 0
  # DEBUG match => 0
  goto <bb 304>;

<bb 274>:
  # DEBUG nm_idx => nm_idx_119
  # DEBUG m_idx => m_idx_105
  # DEBUG match => match_9
  D.45007_719 = m_idx_105 == 0;
  D.45008_720 = nm_idx_119 != 0;
  D.45009_721 = D.45008_720 & D.45007_719;
  if (D.45009_721 != 0)
    goto <bb 275>;
  else
    goto <bb 283>;

<bb 275>:
  # j_1845 = PHI <j_736(282), 0(274)>
  # DEBUG timp => 0B
  near_rate.96_724 = near_matches[j_1845].rate;
  near_rate_725 = (uint32_t) near_rate.96_724;
  # DEBUG near_rate => near_rate_725
  near_match_726 = near_matches[j_1845].imp;
  # DEBUG near_match => near_match_726
  near_map_727 = near_matches[j_1845].map;
  # DEBUG near_map => near_map_727
  D.45013_728 = near_match_726->iananame;
  if (near_rate_725 == 0)
    goto <bb 276>;
  else
    goto <bb 277>;

<bb 276>:
  near_rate_729 = near_match_726->samples_per_second;

<bb 277>:
  # near_rate_145 = PHI <near_rate_729(276), near_rate_725(275)>
  switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);
  prefs[0] = &tmp;
  num_731 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);
  # DEBUG num => num_731
  if (num_731 != 0)
    goto <bb 278>;
  else
    goto <bb 279>;

<bb 278>:
  timp_732 = search[0];
  # DEBUG timp => timp_732

<bb 279>:
  # timp_134 = PHI <timp_732(278), near_match_726(277)>
  # DEBUG timp => timp_134
  if (maxptime_1040 == 0)
    goto <bb 281>;
  else
    goto <bb 280>;

<bb 280>:
  D.45024_734 = timp_134->microseconds_per_packet;
  D.45025_735 = D.45024_734 / 1000;
  if (D.45025_735 <= maxptime_1040)
    goto <bb 281>;
  else
    goto <bb 282>;

<bb 281>:
  # j_897 = PHI <j_1845(279), j_1845(280)>
  # timp_872 = PHI <timp_134(279), timp_134(280)>
  # near_rate.96_869 = PHI <near_rate.96_724(279), near_rate.96_724(280)>
  # near_map_863 = PHI <near_map_727(279), near_map_727(280)>
  D.45026_737 = timp_872->iananame;
  D.45024_738 = timp_872->microseconds_per_packet;
  D.45025_739 = D.45024_738 / 1000;
  D.45027_740 = timp_872->actual_samples_per_second;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
  # DEBUG match => 1
  D.45028_742 = near_matches[j_897].codec_idx;
  matches[0].codec_idx = D.45028_742;
  matches[0].rate = near_rate.96_869;
  matches[0].imp = timp_872;
  matches[0].map = near_map_863;
  # DEBUG m_idx => 1
  # DEBUG m_idx => 1
  # DEBUG match => 1
  goto <bb 284>;

<bb 282>:
  j_736 = j_1845 + 1;
  # DEBUG j => j_736
  # DEBUG j => j_736
  if (nm_idx_119 > j_736)
    goto <bb 275>;
  else
    goto <bb 304>;

<bb 283>:
  # DEBUG m_idx => m_idx_105
  # DEBUG match => match_9
  if (m_idx_105 != 0)
    goto <bb 284>;
  else
    goto <bb 304>;

<bb 284>:
  # m_idx_1715 = PHI <m_idx_105(283), 1(281)>
  if (greedy_47 != 0)
    goto <bb 285>;
  else
    goto <bb 286>;

<bb 285>:
  greedy_sort (smh_186, &matches, m_idx_1715, codec_array_84, total_codecs_85);

<bb 286>:
  # DEBUG match => 1
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;
  smh_186->num_negotiated_codecs = 0;
  # DEBUG j => 0
  # DEBUG j => 0
  if (m_idx_1715 > 0)
    goto <bb 287>;
  else
    goto <bb 428>;

<bb 287>:
  # j_1881 = PHI <j_807(303), 0(286)>
  D.45034_747 = matches[j_1881].map;
  D.45035_748 = D.45034_747->rm_encoding;
  D.45036_750 = D.45034_747->rm_fmtp;
  D.45037_752 = D.45034_747->rm_pt;
  D.45038_753 = (uint32_t) D.45037_752;
  D.45039_754 = matches[j_1881].imp;
  D.45040_755 = D.45039_754->samples_per_second;
  D.45041_757 = D.45039_754->microseconds_per_packet;
  D.45042_758 = D.45041_757 / 1000;
  D.45043_759 = (uint32_t) D.45042_758;
  pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
  # DEBUG pmap => pmap_760
  mimp_761 = matches[j_1881].imp;
  # DEBUG mimp => mimp_761
  mmap_762 = matches[j_1881].map;
  # DEBUG mmap => mmap_762
  if (j_1881 == 0)
    goto <bb 288>;
  else
    goto <bb 290>;

<bb 288>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_760;
  pmap_760->current = 1;
  D.44605_764 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_764 != 0B)
    goto <bb 289>;
  else
    goto <bb 290>;

<bb 289>:
  D.45048_766 = pmap_760->pt;
  switch_rtp_set_default_payload (D.44605_764, D.45048_766);

<bb 290>:
  D.45049_767 = mmap_762->rm_encoding;
  D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
  pmap_760->rm_encoding = D.45050_768;
  D.45051_769 = mimp_761->iananame;
  D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
  pmap_760->iananame = D.45052_770;
  D.45053_771 = mmap_762->rm_pt;
  D.45054_772 = (unsigned char) D.45053_771;
  pmap_760->recv_pt = D.45054_772;
  D.45055_773 = mimp_761->samples_per_second;
  pmap_760->rm_rate = D.45055_773;
  pmap_760->adv_rm_rate = D.45055_773;
  D.45051_775 = mimp_761->iananame;
  D.45056_776 = strcasecmp (D.45051_775, "g722");
  if (D.45056_776 != 0)
    goto <bb 291>;
  else
    goto <bb 292>;

<bb 291>:
  D.45059_777 = mimp_761->actual_samples_per_second;
  pmap_760->rm_rate = D.45059_777;

<bb 292>:
  D.45060_778 = mimp_761->microseconds_per_packet;
  D.45061_779 = D.45060_778 / 1000;
  D.45062_780 = (uint32_t) D.45061_779;
  pmap_760->codec_ms = D.45062_780;
  D.45063_781 = mimp_761->bits_per_second;
  D.45064_782 = (uint32_t) D.45063_781;
  pmap_760->bitrate = D.45064_782;
  D.45066_783 = mmap_762->rm_params;
  if (D.45066_783 != 0B)
    goto <bb 293>;
  else
    goto <bb 294>;

<bb 293>:
  # DEBUG __nptr => D.45066_783
  D.47922_1485 = strtol (D.45066_783, 0B, 10);

<bb 294>:
  # D.47922_146 = PHI <D.47922_1485(293), 1(292)>
  pmap_760->channels = D.47922_146;
  D.45049_787 = mmap_762->rm_encoding;
  D.45070_788 = strcasecmp (D.45049_787, "opus");
  if (D.45070_788 == 0)
    goto <bb 295>;
  else
    goto <bb 302>;

<bb 295>:
  if (D.47922_146 == 1)
    goto <bb 296>;
  else
    goto <bb 297>;

<bb 296>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
  pmap_760->adv_channels = 1;
  goto <bb 298>;

<bb 297>:
  pmap_760->adv_channels = 2;

<bb 298>:
  D.45079_790 = mmap_762->rm_fmtp;
  # DEBUG s => D.45079_790
  if (D.45079_790 == 0B)
    goto <bb 301>;
  else
    goto <bb 299>;

<bb 299>:
  D.47926_1486 = *D.45079_790;
  if (D.47926_1486 == 0)
    goto <bb 301>;
  else
    goto <bb 427>;

<bb 300>:
  pmap_760->channels = 2;
  goto <bb 303>;

<bb 301>:
  pmap_760->channels = 1;
  goto <bb 303>;

<bb 302>:
  pmap_760->adv_channels = D.47922_146;

<bb 303>:
  D.45085_795 = connection_139->c_address;
  D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
  pmap_760->remote_sdp_ip = D.45086_796;
  D.44697_797 = m_1764->m_port;
  D.45087_798 = (short unsigned int) D.44697_797;
  pmap_760->remote_sdp_port = D.45087_798;
  D.45079_799 = mmap_762->rm_fmtp;
  D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
  pmap_760->rm_fmtp = D.45088_800;
  D.45053_801 = mmap_762->rm_pt;
  D.45054_802 = (unsigned char) D.45053_801;
  pmap_760->agreed_pt = D.45054_802;
  D.44655_803 = smh_186->num_negotiated_codecs;
  smh_186->negotiated_codecs[D.44655_803] = mimp_761;
  D.45089_804 = D.44655_803 + 1;
  smh_186->num_negotiated_codecs = D.45089_804;
  D.45053_805 = mmap_762->rm_pt;
  D.45054_806 = (unsigned char) D.45053_805;
  pmap_760->recv_pt = D.45054_806;
  j_807 = j_1881 + 1;
  # DEBUG j => j_807
  # DEBUG j => j_807
  if (j_807 < m_idx_1715)
    goto <bb 287>;
  else
    goto <bb 428>;

<bb 304>:
  # match_12 = PHI <match_9(282), match_9(283), 0(273)>
  # m_idx_1904 = PHI <0(282), m_idx_105(283), 0(273)>
  # nm_idx_1744 = PHI <nm_idx_119(282), nm_idx_119(283), 0(273)>
  # DEBUG match => match_12
  if (match_12 != 0)
    goto <bb 305>;
  else
    goto <bb 312>;

<bb 305>:
  # match_1712 = PHI <match_12(304), 1(428)>
  # m_idx_1905 = PHI <m_idx_1904(304), m_idx_1715(428)>
  # nm_idx_841 = PHI <nm_idx_1744(304), nm_idx_119(428)>
  D.44750_808 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44762_809 = D.44750_808->remote_sdp_port;
  D.44767_810 = (int) D.44762_809;
  switch_snprintf (&tmp, 50, "%d", D.44767_810);
  D.44530_811 = session_161(D)->channel;
  D.44750_812 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_813 = D.44750_812->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);
  D.44530_814 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);
  D.44750_815 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.45092_816 = D.44750_815->recv_pt;
  D.45093_817 = (int) D.45092_816;
  switch_snprintf (&tmp, 50, "%d", D.45093_817);
  D.44530_818 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);
  # DEBUG D#75 => &MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].read_codec
  # DEBUG codec => D#75
  D.47934_1488 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
  D.47933_1489 = D.47934_1488 & 256;
  if (D.47933_1489 != 0)
    goto <bb 306>;
  else
    goto <bb 310>;

<bb 306>:
  D.47932_1490 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
  if (D.47932_1490 != 0B)
    goto <bb 307>;
  else
    goto <bb 310>;

<bb 307>:
  D.47931_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
  if (D.47931_1491 != 0B)
    goto <bb 308>;
  else
    goto <bb 310>;

<bb 308>:
  D.47930_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
  if (D.47930_1492 != 0B)
    goto <bb 309>;
  else
    goto <bb 310>;

<bb 309>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;

<bb 310>:
  D.44471_821 = smh_186->mparams;
  D.45098_822 = D.44471_821->codec_flags;
  D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
  if (D.45099_823 == 0)
    goto <bb 311>;
  else
    goto <bb 312>;

<bb 311>:
  # DEBUG got_audio => 1
  check_ice (smh_186, 0, sdp_198, m_1764);

<bb 312>:
  # match_13 = PHI <0(304), match_1712(311), 0(310)>
  # got_audio_65 = PHI <0(304), 1(311), 0(310)>
  # m_idx_1745 = PHI <m_idx_1904(304), m_idx_1905(311), m_idx_1905(310)>
  # nm_idx_843 = PHI <nm_idx_1744(304), nm_idx_841(311), nm_idx_841(310)>
  # DEBUG got_audio => got_audio_65
  # DEBUG match => match_13
  if (best_te_1624 == 0)
    goto <bb 313>;
  else
    goto <bb 316>;

<bb 313>:
  D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);
  if (D.45107_826 != 0)
    goto <bb 315>;
  else
    goto <bb 314>;

<bb 314>:
  D.44530_827 = session_161(D)->channel;
  D.45109_828 = switch_channel_test_flag (D.44530_827, 93);
  if (D.45109_828 != 0)
    goto <bb 315>;
  else
    goto <bb 321>;

<bb 315>:
  D.44471_829 = smh_186->mparams;
  D.45110_830 = D.44471_829->te;
  D.45111_831 = (int) D.45110_830;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);
  D.44471_832 = smh_186->mparams;
  best_te_833 = D.44471_832->te;
  # DEBUG best_te => best_te_833
  # DEBUG best_te => best_te_833
  if (best_te_833 != 0)
    goto <bb 316>;
  else
    goto <bb 321>;

<bb 316>:
  # best_te_1860 = PHI <best_te_833(315), best_te_1624(312)>
  D.45114_834 = switch_channel_direction (channel_162);
  if (D.45114_834 == 1)
    goto <bb 317>;
  else
    goto <bb 319>;

<bb 317>:
  D.44471_835 = smh_186->mparams;
  D.44471_835->te = best_te_1860;
  # DEBUG D#11 => D.44471_835->te
  # DEBUG te => D#11
  D.44857_837 = (int) best_te_1860;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);
  D.44530_838 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);
  D.44471_839 = smh_186->mparams;
  D.44471_839->dtmf_type = 0;
  D.44605_840 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_840 != 0B)
    goto <bb 318>;
  else
    goto <bb 412>;

<bb 318>:
  switch_rtp_set_telephony_event (D.44605_840, best_te_1860);
  D.44530_842 = session_161(D)->channel;
  switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_837);
  goto <bb 412>;

<bb 319>:
  D.44471_845 = smh_186->mparams;
  D.44471_845->te = best_te_1860;
  D.44471_845->recv_te = best_te_1860;
  # DEBUG te => best_te_1860
  D.45120_848 = (int) best_te_1860;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);
  D.44530_849 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);
  D.44471_850 = smh_186->mparams;
  D.44471_850->dtmf_type = 0;
  D.44605_851 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_851 != 0B)
    goto <bb 320>;
  else
    goto <bb 412>;

<bb 320>:
  switch_rtp_set_telephony_event (D.44605_851, best_te_1860);
  D.44530_853 = session_161(D)->channel;
  switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_848);
  D.44605_855 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  switch_rtp_set_telephony_recv_event (D.44605_855, best_te_1860);
  D.44530_856 = session_161(D)->channel;
  switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_848);
  goto <bb 412>;

<bb 321>:
  D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
  # DEBUG expr => D.45124_858
  if (D.45124_858 != 0B)
    goto <bb 322>;
  else
    goto <bb 429>;

<bb 322>:
  D.49735_1600 = strcasecmp (D.45124_858, "no");
  if (D.49735_1600 == 0)
    goto <bb 331>;
  else
    goto <bb 323>;

<bb 323>:
  D.49736_1601 = strcasecmp (D.45124_858, "off");
  if (D.49736_1601 == 0)
    goto <bb 331>;
  else
    goto <bb 324>;

<bb 324>:
  D.49737_1602 = strcasecmp (D.45124_858, "false");
  if (D.49737_1602 == 0)
    goto <bb 331>;
  else
    goto <bb 325>;

<bb 325>:
  D.49738_1603 = strcasecmp (D.45124_858, "f");
  if (D.49738_1603 == 0)
    goto <bb 331>;
  else
    goto <bb 326>;

<bb 326>:
  D.49739_1604 = strcasecmp (D.45124_858, "disabled");
  if (D.49739_1604 == 0)
    goto <bb 331>;
  else
    goto <bb 327>;

<bb 327>:
  D.49740_1605 = strcasecmp (D.45124_858, "inactive");
  if (D.49740_1605 == 0)
    goto <bb 331>;
  else
    goto <bb 328>;

<bb 328>:
  D.49741_1606 = strcasecmp (D.45124_858, "disallow");
  if (D.49741_1606 == 0)
    goto <bb 331>;
  else
    goto <bb 329>;

<bb 329>:
  D.49742_1607 = switch_is_number (D.45124_858);
  if (D.49742_1607 != 0)
    goto <bb 330>;
  else
    goto <bb 429>;

<bb 330>:
  # DEBUG __nptr => D.45124_858
  D.49743_1608 = strtol (D.45124_858, 0B, 10);
  if (D.49743_1608 == 0)
    goto <bb 331>;
  else
    goto <bb 429>;

<bb 331>:
  D.44530_866 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);
  D.44471_867 = smh_186->mparams;
  D.44471_867->dtmf_type = 2;
  D.44471_867->te = 0;
  D.44471_867->recv_te = 0;
  # DEBUG D#13 => D.44471_867->recv_te
  # DEBUG te => D#13
  goto <bb 412>;

<bb 332>:
  if (D.44681_493 == 3)
    goto <bb 333>;
  else
    goto <bb 412>;

<bb 333>:
  D.44697_873 = m_1764->m_port;
  if (D.44697_873 != 0)
    goto <bb 334>;
  else
    goto <bb 412>;

<bb 334>:
  # DEBUG mimp => 0B
  # DEBUG vmatch => 0
  # DEBUG nm_idx => 0
  # DEBUG m_idx => 0
  memset (&matches, 0, 480);
  memset (&near_matches, 0, 480);
  D.44530_878 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);
  connection_879 = sdp_198->sdp_connection;
  # DEBUG connection => connection_879
  connection_880 = m_1764->m_connections;
  if (connection_880 != 0B)
    goto <bb 337>;
  else
    goto <bb 335>;

<bb 335>:
  # DEBUG connection => connection_879
  if (connection_879 == 0B)
    goto <bb 336>;
  else
    goto <bb 337>;

<bb 336>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  # DEBUG match => 0
  goto <bb 413> (done);

<bb 337>:
  # connection_110 = PHI <connection_879(335), connection_880(334)>
  map_883 = m_1764->m_rtpmaps;
  # DEBUG map => map_883
  # DEBUG map => map_883
  # DEBUG m_idx => 0
  # DEBUG got_video_crypto => got_video_crypto_1674
  if (map_883 != 0B)
    goto <bb 338>;
  else
    goto <bb 393>;

<bb 338>:
  # got_video_crypto_556 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
  # m_idx_819 = PHI <m_idx_953(392), 0(337)>
  # map_1620 = PHI <map_1021(392), map_883(337)>
  D.45137_884 = switch_rtp_has_dtls ();
  if (D.45137_884 != 0)
    goto <bb 339>;
  else
    goto <bb 345>;

<bb 339>:
  D.45140_885 = dtls_ok (session_161(D));
  if (D.45140_885 != 0)
    goto <bb 340>;
  else
    goto <bb 345>;

<bb 340>:
  attr_886 = m_1764->m_attributes;
  # DEBUG attr => attr_886
  # DEBUG got_video_crypto => got_video_crypto_556
  # DEBUG attr => attr_886
  if (attr_886 != 0B)
    goto <bb 341>;
  else
    goto <bb 377>;

<bb 341>:
  # attr_1850 = PHI <attr_892(344), attr_886(340)>
  # got_video_crypto_1738 = PHI <got_video_crypto_57(344), got_video_crypto_556(340)>
  D.44590_887 = attr_1850->a_name;
  D.45143_888 = strcasecmp (D.44590_887, "fingerprint");
  if (D.45143_888 == 0)
    goto <bb 342>;
  else
    goto <bb 344>;

<bb 342>:
  D.44619_889 = attr_1850->a_value;
  # DEBUG s => D.44619_889
  if (D.44619_889 == 0B)
    goto <bb 344>;
  else
    goto <bb 343>;

<bb 343>:
  D.47939_1495 = *D.44619_889;
  if (D.47939_1495 == 0)
    goto <bb 344>;
  else
    goto <bb 430>;

<bb 344>:
  # got_video_crypto_57 = PHI <got_video_crypto_1738(341), got_video_crypto_1738(343), 1(430), got_video_crypto_1738(342)>
  # DEBUG got_video_crypto => got_video_crypto_57
  attr_892 = attr_1850->a_next;
  # DEBUG attr => attr_892
  # DEBUG got_video_crypto => got_video_crypto_57
  # DEBUG attr => attr_892
  if (attr_892 != 0B)
    goto <bb 341>;
  else
    goto <bb 436>;

<bb 345>:
  # DEBUG got_video_crypto => got_video_crypto_556
  attr_893 = m_1764->m_attributes;
  # DEBUG attr => attr_893
  # DEBUG got_video_crypto => got_video_crypto_556
  # DEBUG attr => attr_893
  if (attr_893 != 0B)
    goto <bb 346>;
  else
    goto <bb 377>;

<bb 346>:
  # attr_619 = PHI <attr_978(376), attr_893(345), attr_62(436)>
  # got_video_crypto_1885 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_136(436)>
  D.44590_894 = attr_619->a_name;
  D.45151_895 = strcasecmp (D.44590_894, "framerate");
  if (D.45151_895 == 0)
    goto <bb 347>;
  else
    goto <bb 348>;

<bb 347>:
  D.44619_896 = attr_619->a_value;
  if (D.44619_896 != 0B)
    goto <bb 376>;
  else
    goto <bb 348>;

<bb 348>:
  D.45154_898 = strcasecmp (D.44590_894, "rtcp-fb");
  if (D.45154_898 == 0)
    goto <bb 349>;
  else
    goto <bb 353>;

<bb 349>:
  D.44619_899 = attr_619->a_value;
  # DEBUG s => D.44619_899
  if (D.44619_899 == 0B)
    goto <bb 376>;
  else
    goto <bb 350>;

<bb 350>:
  D.47943_1497 = *D.44619_899;
  if (D.47943_1497 == 0)
    goto <bb 376>;
  else
    goto <bb 431>;

<bb 351>:
Invalid sum of incoming frequencies 992, should be 677
  D.45163_903 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
  D.45164_904 = D.45163_903 + 1;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45164_904;

<bb 352>:
  D.44471_905 = smh_186->mparams;
  D.44471_905->rtcp_video_interval_msec = "10000";
  goto <bb 376>;

<bb 353>:
  D.45168_907 = strcasecmp (D.44590_894, "rtcp");
  if (D.45168_907 == 0)
    goto <bb 354>;
  else
    goto <bb 359>;

<bb 354>:
  D.44619_908 = attr_619->a_value;
  if (D.44619_908 != 0B)
    goto <bb 355>;
  else
    goto <bb 359>;

<bb 355>:
  # DEBUG __s2_len => 1
  # DEBUG __s1 => D.44619_908
  D.45174_911 = MEM[(const unsigned char *)D.44619_908];
  # DEBUG D#78 => (int) D.45174_911
  # DEBUG __result => D#78 + -49
  if (D.45174_911 == 49)
    goto <bb 356>;
  else
    goto <bb 359>;

<bb 356>:
  D.45185_921 = MEM[(const unsigned char *)D.44619_908 + 1B];
  # DEBUG D#79 => (int) D.45185_921
  # DEBUG __result => D#79
  # DEBUG __result => D#79
  if (D.45185_921 == 0)
    goto <bb 357>;
  else
    goto <bb 359>;

<bb 357>:
  D.44530_952 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_908, 1);
  D.44619_954 = attr_619->a_value;
  # DEBUG __nptr => D.44619_954
  D.47946_1499 = strtol (D.44619_954, 0B, 10);
  D.45213_956 = (short unsigned int) D.47946_1499;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45213_956;
  D.44471_957 = smh_186->mparams;
  D.45214_958 = D.44471_957->rtcp_video_interval_msec;
  if (D.45214_958 == 0B)
    goto <bb 358>;
  else
    goto <bb 376>;

<bb 358>:
  D.44471_957->rtcp_video_interval_msec = "5000";
  goto <bb 376>;

<bb 359>:
  if (got_video_crypto_1885 == 0)
    goto <bb 360>;
  else
    goto <bb 376>;

<bb 360>:
  D.45219_961 = strcasecmp (D.44590_894, "crypto");
  if (D.45219_961 == 0)
    goto <bb 361>;
  else
    goto <bb 376>;

<bb 361>:
  D.44619_962 = attr_619->a_value;
  # DEBUG s => D.44619_962
  if (D.44619_962 == 0B)
    goto <bb 376>;
  else
    goto <bb 362>;

<bb 362>:
  D.47950_1500 = *D.44619_962;
  if (D.47950_1500 == 0)
    goto <bb 376>;
  else
    goto <bb 432>;

<bb 363>:
  D.44530_967 = session_161(D)->channel;
  D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);
  # DEBUG expr => D.45227_968
  if (D.45227_968 != 0B)
    goto <bb 364>;
  else
    goto <bb 433>;

<bb 364>:
  D.49747_1610 = strcasecmp (D.45227_968, "yes");
  if (D.49747_1610 == 0)
    goto <bb 373>;
  else
    goto <bb 365>;

<bb 365>:
  D.49748_1611 = strcasecmp (D.45227_968, "on");
  if (D.49748_1611 == 0)
    goto <bb 373>;
  else
    goto <bb 366>;

<bb 366>:
  D.49749_1612 = strcasecmp (D.45227_968, "true");
  if (D.49749_1612 == 0)
    goto <bb 373>;
  else
    goto <bb 367>;

<bb 367>:
  D.49750_1613 = strcasecmp (D.45227_968, "t");
  if (D.49750_1613 == 0)
    goto <bb 373>;
  else
    goto <bb 368>;

<bb 368>:
  D.49751_1614 = strcasecmp (D.45227_968, "enabled");
  if (D.49751_1614 == 0)
    goto <bb 373>;
  else
    goto <bb 369>;

<bb 369>:
  D.49752_1615 = strcasecmp (D.45227_968, "active");
  if (D.49752_1615 == 0)
    goto <bb 373>;
  else
    goto <bb 370>;

<bb 370>:
  D.49753_1616 = strcasecmp (D.45227_968, "allow");
  if (D.49753_1616 == 0)
    goto <bb 373>;
  else
    goto <bb 371>;

<bb 371>:
  D.49754_1617 = switch_is_number (D.45227_968);
  if (D.49754_1617 != 0)
    goto <bb 372>;
  else
    goto <bb 433>;

<bb 372>:
  # DEBUG __nptr => D.45227_968
  D.49755_1618 = strtol (D.45227_968, 0B, 10);
  if (D.49755_1618 != 0)
    goto <bb 373>;
  else
    goto <bb 433>;

<bb 373>:
Invalid sum of outgoing probabilities 0.0%
  goto <bb 375>;

<bb 374>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  # DEBUG match => 0
  goto <bb 413> (done);

<bb 375>:
Invalid sum of incoming frequencies 153, should be 298
  crypto_975 = attr_619->a_value;
  # DEBUG crypto => crypto_975
  # DEBUG __nptr => crypto_975
  crypto_tag_1502 = strtol (crypto_975, 0B, 10);
  # DEBUG crypto_tag => NULL
  got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));
  # DEBUG got_video_crypto => got_video_crypto_977

<bb 376>:
Invalid sum of incoming frequencies 9222, should be 9547
  # got_video_crypto_60 = PHI <got_video_crypto_1885(347), got_video_crypto_1885(352), got_video_crypto_1885(358), got_video_crypto_1885(359), 0(360), 0(362), got_video_crypto_977(375), got_video_crypto_1885(350), got_video_crypto_1885(357), got_video_crypto_1885(349), 0(361)>
  # DEBUG got_video_crypto => got_video_crypto_60
  attr_978 = attr_619->a_next;
  # DEBUG attr => attr_978
  # DEBUG got_video_crypto => got_video_crypto_60
  # DEBUG attr => attr_978
  if (attr_978 != 0B)
    goto <bb 346>;
  else
    goto <bb 377>;

<bb 377>:
  # got_video_crypto_960 = PHI <got_video_crypto_60(376), got_video_crypto_556(345), got_video_crypto_556(340)>
  rm_encoding_979 = map_1620->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_979
  if (rm_encoding_979 == 0B)
    goto <bb 379>;
  else
    goto <bb 378>;

<bb 378>:

<bb 379>:
  # rm_encoding_137 = PHI <rm_encoding_979(378), ""(377)>
  # DEBUG rm_encoding => rm_encoding_137
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG m_idx => m_idx_819
  if (total_codecs_85 > 0)
    goto <bb 380>;
  else
    goto <bb 392>;

<bb 380>:
  # m_idx_910 = PHI <m_idx_109(391), m_idx_819(379)>
  # i_864 = PHI <i_1020(391), 0(379)>
  i.99_982 = (unsigned int) i_864;
  D.45236_983 = i.99_982 * 4;
  D.45237_984 = codec_array_84 + D.45236_983;
  imp_985 = *D.45237_984;
  # DEBUG imp => imp_985
  D.45238_986 = imp_985->codec_type;
  if (D.45238_986 != 1)
    goto <bb 391>;
  else
    goto <bb 381>;

<bb 381>:
  D.44530_987 = session_161(D)->channel;
  D.45241_988 = switch_channel_direction (D.44530_987);
  if (D.45241_988 == 0)
    goto <bb 382>;
  else
    goto <bb 383>;

<bb 382>:
  D.44530_989 = session_161(D)->channel;
  D.45244_990 = switch_channel_test_flag (D.44530_989, 114);
  if (D.45244_990 != 0)
    goto <bb 391>;
  else
    goto <bb 383>;

<bb 383>:
  D.45247_991 = map_1620->rm_pt;
  D.45248_992 = (int) D.45247_991;
  D.45249_993 = imp_985->iananame;
  D.45250_994 = imp_985->ianacode;
  D.45251_995 = (int) D.45250_994;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
  D.45255_996 = map_1620->rm_encoding;
  # DEBUG s => D.45255_996
  if (D.45255_996 == 0B)
    goto <bb 385>;
  else
    goto <bb 384>;

<bb 384>:
  D.47957_1503 = *D.45255_996;
  if (D.47957_1503 == 0)
    goto <bb 385>;
  else
    goto <bb 434>;

<bb 385>:
  D.45247_1003 = map_1620->rm_pt;
  D.45248_1004 = (int) D.45247_1003;
  if (D.45248_1004 <= 95)
    goto <bb 386>;
  else
    goto <bb 387>;

<bb 386>:
  D.45250_1007 = imp_985->ianacode;
  D.45251_1008 = (int) D.45250_1007;
  vmatch_1009 = D.45248_1004 == D.45251_1008;
  # DEBUG vmatch => vmatch_1009
  goto <bb 388>;

<bb 387>:
  D.45249_1010 = imp_985->iananame;
  D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
  vmatch_1012 = D.45259_1011 == 0;
  # DEBUG vmatch => vmatch_1012

<bb 388>:
  # vmatch_138 = PHI <vmatch_1009(386), vmatch_1012(387)>
  # DEBUG vmatch => vmatch_138
  if (vmatch_138 != 0)
    goto <bb 389>;
  else
    goto <bb 391>;

<bb 389>:
  D.45262_1013 = map_1620->rm_rate;
  D.45263_1014 = imp_985->samples_per_second;
  if (D.45262_1013 == D.45263_1014)
    goto <bb 390>;
  else
    goto <bb 391>;

<bb 390>:
  matches[m_idx_910].imp = imp_985;
  matches[m_idx_910].map = map_1620;
  D.45249_1015 = imp_985->iananame;
  D.45250_1016 = imp_985->ianacode;
  D.45251_1017 = (int) D.45250_1016;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
  m_idx_1018 = m_idx_910 + 1;
  # DEBUG m_idx => m_idx_1018

<bb 391>:
  # m_idx_109 = PHI <m_idx_910(380), m_idx_910(382), m_idx_910(389), m_idx_910(388), m_idx_1018(390)>
  # DEBUG m_idx => m_idx_109
  i_1020 = i_864 + 1;
  # DEBUG i => i_1020
  # DEBUG i => i_1020
  # DEBUG m_idx => m_idx_109
  if (total_codecs_85 > i_1020)
    goto <bb 380>;
  else
    goto <bb 392>;

<bb 392>:
  # m_idx_953 = PHI <m_idx_109(391), m_idx_819(379)>
  map_1021 = map_1620->rm_next;
  # DEBUG map => map_1021
  # DEBUG map => map_1021
  # DEBUG m_idx => m_idx_953
  # DEBUG got_video_crypto => got_video_crypto_960
  if (map_1021 != 0B)
    goto <bb 338>;
  else
    goto <bb 393>;

<bb 393>:
  # got_video_crypto_959 = PHI <got_video_crypto_960(392), got_video_crypto_1674(337)>
  # m_idx_906 = PHI <m_idx_953(392), 0(337)>
  D.45001_1022 = smh_186->crypto_mode;
  D.45002_1023 = D.45001_1022 == 1;
  D.45266_1024 = got_video_crypto_959 <= 0;
  D.45267_1025 = D.45266_1024 & D.45002_1023;
  if (D.45267_1025 != 0)
    goto <bb 394>;
  else
    goto <bb 395>;

<bb 394>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
  # DEBUG vmatch => 0
  # DEBUG m_idx => 0
  # DEBUG m_idx => 0
  goto <bb 412>;

<bb 395>:
  # DEBUG m_idx => m_idx_906
  if (m_idx_906 != 0)
    goto <bb 396>;
  else
    goto <bb 412>;

<bb 396>:
  # DEBUG j => 0
  if (greedy_47 != 0)
    goto <bb 397>;
  else
    goto <bb 398>;

<bb 397>:
  greedy_sort (smh_186, &matches, m_idx_906, codec_array_84, total_codecs_85);

<bb 398>:
  # DEBUG vmatch => 1
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;
  # DEBUG j => 0
  # DEBUG j => 0

<bb 399>:
  # j_1844 = PHI <j_1067(402), 0(398)>
  D.45274_1031 = matches[j_1844].map;
  D.45275_1032 = D.45274_1031->rm_encoding;
  D.45276_1034 = D.45274_1031->rm_fmtp;
  D.45277_1036 = D.45274_1031->rm_pt;
  D.45278_1037 = (uint32_t) D.45277_1036;
  D.45279_1038 = matches[j_1844].imp;
  D.45280_1039 = D.45279_1038->samples_per_second;
  D.45281_1041 = D.45279_1038->microseconds_per_packet;
  D.45282_1042 = D.45281_1041 / 1000;
  D.45283_1043 = (uint32_t) D.45282_1042;
  pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
  # DEBUG pmap => pmap_1044
  if (j_1844 == 0)
    goto <bb 400>;
  else
    goto <bb 402>;

<bb 400>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1044;
  pmap_1044->current = 1;
  D.45287_1046 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
  if (D.45287_1046 != 0B)
    goto <bb 401>;
  else
    goto <bb 402>;

<bb 401>:
  D.45290_1048 = pmap_1044->pt;
  switch_rtp_set_default_payload (D.45287_1046, D.45290_1048);

<bb 402>:
  mimp_1049 = matches[j_1844].imp;
  # DEBUG mimp => mimp_1049
  map_1050 = matches[j_1844].map;
  # DEBUG map => map_1050
  D.45255_1051 = map_1050->rm_encoding;
  D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
  pmap_1044->rm_encoding = D.45291_1052;
  D.45247_1053 = map_1050->rm_pt;
  D.45292_1054 = (unsigned char) D.45247_1053;
  pmap_1044->recv_pt = D.45292_1054;
  D.45262_1055 = map_1050->rm_rate;
  pmap_1044->rm_rate = D.45262_1055;
  D.45293_1056 = mimp_1049->microseconds_per_packet;
  D.45294_1057 = D.45293_1056 / 1000;
  D.45295_1058 = (uint32_t) D.45294_1057;
  pmap_1044->codec_ms = D.45295_1058;
  D.45085_1059 = connection_110->c_address;
  D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);
  pmap_1044->remote_sdp_ip = D.45296_1060;
  D.44697_1061 = m_1764->m_port;
  D.45087_1062 = (short unsigned int) D.44697_1061;
  pmap_1044->remote_sdp_port = D.45087_1062;
  D.45297_1063 = map_1050->rm_fmtp;
  D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
  pmap_1044->rm_fmtp = D.45298_1064;
  D.45247_1065 = map_1050->rm_pt;
  D.45292_1066 = (unsigned char) D.45247_1065;
  pmap_1044->agreed_pt = D.45292_1066;
  j_1067 = j_1844 + 1;
  # DEBUG j => j_1067
  # DEBUG j => j_1067
  if (m_idx_906 > j_1067)
    goto <bb 399>;
  else
    goto <bb 403>;

<bb 403>:
  D.45286_1068 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45299_1069 = D.45286_1068->remote_sdp_port;
  D.45300_1070 = (int) D.45299_1069;
  switch_snprintf (&tmp, 50, "%d", D.45300_1070);
  D.44530_1071 = session_161(D)->channel;
  D.45286_1072 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45301_1073 = D.45286_1072->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);
  D.44530_1074 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);
  D.44530_1075 = session_161(D)->channel;
  D.45286_1076 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45302_1077 = D.45286_1076->rm_fmtp;
  switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);
  D.45286_1078 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45303_1079 = D.45286_1078->agreed_pt;
  D.45304_1080 = (int) D.45303_1079;
  switch_snprintf (&tmp, 50, "%d", D.45304_1080);
  D.44530_1081 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);
  switch_core_media_check_video_codecs (session_161(D));
  D.45286_1082 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45305_1083 = D.45286_1082->recv_pt;
  D.45306_1084 = (int) D.45305_1083;
  switch_snprintf (&tmp, 50, "%d", D.45306_1084);
  D.44530_1085 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);
  if (match_1800 == 0)
    goto <bb 405>;
  else
    goto <bb 404>;

<bb 404>:

<bb 405>:
  # match_14 = PHI <match_1800(404), 1(403)>
  # DEBUG match => match_14
  # DEBUG D#74 => &MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].read_codec
  # DEBUG codec => D#74
  D.47965_1505 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
  D.47964_1506 = D.47965_1505 & 256;
  if (D.47964_1506 != 0)
    goto <bb 406>;
  else
    goto <bb 410>;

<bb 406>:
  D.47963_1507 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
  if (D.47963_1507 != 0B)
    goto <bb 407>;
  else
    goto <bb 410>;

<bb 407>:
  D.47962_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
  if (D.47962_1508 != 0B)
    goto <bb 408>;
  else
    goto <bb 410>;

<bb 408>:
  D.47961_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
  if (D.47961_1509 != 0B)
    goto <bb 409>;
  else
    goto <bb 410>;

<bb 409>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;

<bb 410>:
  D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);
  if (D.45316_1092 == 0)
    goto <bb 411>;
  else
    goto <bb 412>;

<bb 411>:
  check_ice (smh_186, 1, sdp_198, m_1764);

<bb 412>:
  # match_15 = PHI <match_13(429), match_1800(332), match_1800(333), match_1800(394), match_14(410), match_14(411), match_13(319), match_13(320), match_13(317), match_13(318), match_13(331), match_1800(164), match_1800(395)>
  # best_te_22 = PHI <0(429), best_te_680(332), best_te_680(333), best_te_680(394), best_te_680(410), best_te_680(411), best_te_1860(319), best_te_1860(320), best_te_1860(317), best_te_1860(318), 0(331), best_te_680(164), best_te_680(395)>
  # cng_pt_26 = PHI <cng_pt_1626(429), cng_pt_1717(332), cng_pt_1717(333), cng_pt_1717(394), cng_pt_1717(410), cng_pt_1717(411), cng_pt_1626(319), cng_pt_1626(320), cng_pt_1626(317), cng_pt_1626(318), cng_pt_1626(331), cng_pt_1717(164), cng_pt_1717(395)>
  # got_crypto_55 = PHI <got_crypto_969(429), got_crypto_1866(332), got_crypto_1866(333), got_crypto_1866(394), got_crypto_1866(410), got_crypto_1866(411), got_crypto_969(319), got_crypto_969(320), got_crypto_969(317), got_crypto_969(318), got_crypto_969(331), got_crypto_1866(164), got_crypto_1866(395)>
  # got_video_crypto_63 = PHI <got_video_crypto_1674(429), got_video_crypto_1674(332), got_video_crypto_1674(333), got_video_crypto_959(394), got_video_crypto_959(410), got_video_crypto_959(411), got_video_crypto_1674(319), got_video_crypto_1674(320), got_video_crypto_1674(317), got_video_crypto_1674(318), got_video_crypto_1674(331), got_video_crypto_1674(164), got_video_crypto_959(395)>
  # got_audio_66 = PHI <got_audio_65(429), got_audio_1693(332), got_audio_1693(333), got_audio_1693(394), got_audio_1693(410), got_audio_1693(411), got_audio_65(319), got_audio_65(320), got_audio_65(317), got_audio_65(318), got_audio_65(331), got_audio_1693(164), got_audio_1693(395)>
  # codec_ms_94 = PHI <codec_ms_93(429), codec_ms_477(332), codec_ms_477(333), codec_ms_477(394), codec_ms_477(410), codec_ms_477(411), codec_ms_93(319), codec_ms_93(320), codec_ms_93(317), codec_ms_93(318), codec_ms_93(331), codec_ms_477(164), codec_ms_477(395)>
  # m_idx_113 = PHI <m_idx_1745(429), m_idx_1869(332), m_idx_1869(333), 0(394), m_idx_906(410), m_idx_906(411), m_idx_1745(319), m_idx_1745(320), m_idx_1745(317), m_idx_1745(318), m_idx_1745(331), m_idx_1869(164), 0(395)>
  # nm_idx_121 = PHI <nm_idx_843(429), nm_idx_1749(332), nm_idx_1749(333), 0(394), 0(410), 0(411), nm_idx_843(319), nm_idx_843(320), nm_idx_843(317), nm_idx_843(318), nm_idx_843(331), nm_idx_1749(164), 0(395)>
  # DEBUG nm_idx => nm_idx_121
  # DEBUG m_idx => m_idx_113
  # DEBUG codec_ms => codec_ms_94
  # DEBUG got_audio => got_audio_66
  # DEBUG got_video_crypto => got_video_crypto_63
  # DEBUG got_crypto => got_crypto_55
  # DEBUG cng_pt => cng_pt_26
  # DEBUG best_te => best_te_22
  # DEBUG match => match_15
  m_1093 = m_1764->m_next;
  # DEBUG m => m_1093
  # DEBUG nm_idx => nm_idx_121
  # DEBUG m_idx => m_idx_113
  # DEBUG codec_ms => codec_ms_94
  # DEBUG got_webrtc => got_webrtc_78
  # DEBUG got_udptl => got_udptl_1743
  # DEBUG got_savp => got_savp_1739
  # DEBUG got_video_savp => NULL
  # DEBUG got_video_avp => NULL
  # DEBUG got_avp => got_avp_1859
  # DEBUG got_audio => got_audio_66
  # DEBUG got_video_crypto => got_video_crypto_63
  # DEBUG got_crypto => got_crypto_55
  # DEBUG m => m_1093
  # DEBUG cng_pt => cng_pt_26
  # DEBUG best_te => best_te_22
  # DEBUG match => match_15
  if (m_1093 != 0B)
    goto <bb 118>;
  else
    goto <bb 413> (done);

  # match_17 = PHI <1(134), 0(136), 0(152), 1(150), 0(198), 0(203), 0(206), 0(336), 0(374), match_15(412), 1(149), 1(162), 1(420), 0(117)>
  # cng_pt_1047 = PHI <cng_pt_1717(134), cng_pt_1717(136), cng_pt_1717(152), cng_pt_1717(150), cng_pt_1717(198), cng_pt_1717(203), cng_pt_1717(206), cng_pt_1717(336), cng_pt_1717(374), cng_pt_26(412), cng_pt_1717(149), cng_pt_1717(162), cng_pt_1717(420), 0(117)>
done:
  # DEBUG match => match_17
  sdp_parser_free (parser_196);
  D.44471_1094 = smh_186->mparams;
  D.44471_1094->cng_pt = cng_pt_1047;

<bb 414>:
  # match_142 = PHI <0(4), 0(5), 0(7), match_17(413)>
  return match_142;

<bb 415>:
  goto <bb 20>;

<bb 416>:
  goto <bb 53>;

<bb 417>:
  D.44594_307 = strcasecmp (D.44590_304, "sendonly");
  if (D.44594_307 == 0)
    goto <bb 62>;
  else
    goto <bb 63>;

<bb 418>:
  goto <bb 90>;

<bb 419>:
  # DEBUG reneg => 1
  goto <bb 95>;

<bb 420>:
  # DEBUG pass => 0
  goto <bb 413> (done);

<bb 421>:
  goto <bb 171>;

<bb 422>:
  D.44471_533 = smh_186->mparams;
  D.44821_534 = D.44471_533->ndlb;
  D.44822_535 = D.44821_534 & 4;
  if (D.44822_535 == 0)
    goto <bb 187>;
  else
    goto <bb 199>;

<bb 423>:
  D.44666_539 = m_1764->m_proto;
  D.44829_540 = D.44666_539 != 257;
  D.44830_541 = got_webrtc_78 == 0;
  D.44831_542 = D.44830_541 & D.44829_540;
  if (D.44831_542 != 0)
    goto <bb 198>;
  else
    goto <bb 199>;

<bb 424>:
  # codec_ms_1883 = PHI <maxptime_1040(221), ptime_1033(222)>
  # DEBUG codec_ms => codec_ms_1883
  goto <bb 225>;

<bb 425>:
  D.44889_608 = map_1728->rm_encoding;
  D.44854_610 = map_1728->rm_rate;
  D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_598, D.44854_610, &codec_fmtp);
  if (D.44905_611 == 0)
    goto <bb 235>;
  else
    goto <bb 241>;

<bb 426>:
  D.44471_644 = smh_186->mparams;
  D.44821_645 = D.44471_644->ndlb;
  D.44936_646 = (int) D.44821_645;
  D.44937_647 = D.44936_646 & 1;
  if (D.44937_647 != 0)
    goto <bb 245>;
  else
    goto <bb 247>;

<bb 427>:
  D.45082_793 = switch_stristr ("stereo=1", D.45079_790);
  if (D.45082_793 != 0B)
    goto <bb 300>;
  else
    goto <bb 301>;

<bb 428>:
  # DEBUG match => 1
  goto <bb 305>;

<bb 429>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
  D.44530_860 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);
  D.44471_861 = smh_186->mparams;
  D.44471_861->dtmf_type = 1;
  D.44471_861->te = 0;
  D.44471_861->recv_te = 0;
  # DEBUG D#12 => D.44471_861->recv_te
  # DEBUG te => D#12
  goto <bb 412>;

<bb 430>:
  goto <bb 344>;

<bb 431>:
  D.45160_902 = switch_stristr ("fir", D.44619_899);
  if (D.45160_902 != 0B)
    goto <bb 351>;
  else
    goto <bb 352>;

<bb 432>:
  D.44471_964 = smh_186->mparams;
  D.44821_965 = D.44471_964->ndlb;
  D.44822_966 = D.44821_965 & 4;
  if (D.44822_966 == 0)
    goto <bb 363>;
  else
    goto <bb 375>;

<bb 433>:
  D.44666_970 = m_1764->m_proto;
  D.44829_971 = D.44666_970 != 257;
  D.44830_972 = got_webrtc_78 == 0;
  D.44831_973 = D.44830_972 & D.44829_971;
  if (D.44831_973 != 0)
    goto <bb 374>;
  else
    goto <bb 375>;

<bb 434>:
  D.44471_998 = smh_186->mparams;
  D.44821_999 = D.44471_998->ndlb;
  D.44936_1000 = (int) D.44821_999;
  D.44937_1001 = D.44936_1000 & 1;
  if (D.44937_1001 != 0)
    goto <bb 385>;
  else
    goto <bb 387>;

<bb 435>:
  # got_crypto_95 = PHI <got_crypto_50(171)>
  # DEBUG got_crypto => got_crypto_95
  attr_77 = m_1764->m_attributes;
  # DEBUG attr => attr_77
  # DEBUG got_crypto => got_crypto_95
  # DEBUG maxptime => dmaxptime_1005
  # DEBUG ptime => dptime_1035
  # DEBUG attr => attr_77
  goto <bb 173>;

<bb 436>:
  # got_video_crypto_136 = PHI <got_video_crypto_57(344)>
  # DEBUG got_video_crypto => got_video_crypto_136
  attr_62 = m_1764->m_attributes;
  # DEBUG attr => attr_62
  # DEBUG got_video_crypto => got_video_crypto_136
  # DEBUG attr => attr_62
  goto <bb 346>;

}
