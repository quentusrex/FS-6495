
;; Function atoi (atoi)

Iterations: 0
atoi (const char * __nptr)
{
  int D.40324;

<bb 2>:
  D.40324_2 = strtol (__nptr_1(D), 0B, 10);
  return D.40324_2;

}



;; Function atol (atol)

Iterations: 0
atol (const char * __nptr)
{
  long int D.41133;

<bb 2>:
  D.41133_2 = strtol (__nptr_1(D), 0B, 10);
  return D.41133_2;

}



;; Function switch_core_codec_ready (switch_core_codec_ready)

Iterations: 0
switch_core_codec_ready (struct switch_codec_t * codec)
{
  const struct switch_codec_implementation_t * D.45455;
  struct switch_codec_interface_t * D.45453;
  struct switch_mutex_t * D.45451;
  uint32_t D.45449;
  uint32_t D.45448;
  int iftmp.104;
  switch_bool_t D.45443;

<bb 2>:
  if (codec_2(D) != 0B)
    goto <bb 3>;
  else
    goto <bb 8>;

<bb 3>:
  D.45448_3 = codec_2(D)->flags;
  D.45449_4 = D.45448_3 & 256;
  if (D.45449_4 != 0)
    goto <bb 4>;
  else
    goto <bb 8>;

<bb 4>:
  D.45451_5 = codec_2(D)->mutex;
  if (D.45451_5 != 0B)
    goto <bb 5>;
  else
    goto <bb 8>;

<bb 5>:
  D.45453_6 = codec_2(D)->codec_interface;
  if (D.45453_6 != 0B)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  D.45455_7 = codec_2(D)->implementation;
  if (D.45455_7 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  iftmp.104_8 = 1;
  goto <bb 9>;

<bb 8>:
  iftmp.104_9 = 0;

<bb 9>:
  # iftmp.104_1 = PHI <iftmp.104_8(7), iftmp.104_9(8)>
  D.45443_10 = (switch_bool_t) iftmp.104_1;
  return D.45443_10;

}



;; Function _zstr (_zstr)

Iterations: 0
_zstr (const char * s)
{
  const char D.40302;
  int iftmp.3;
  int D.40296;

<bb 2>:
  if (s_2(D) == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

<bb 3>:
  D.40302_3 = *s_2(D);
  if (D.40302_3 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  iftmp.3_5 = 1;
  goto <bb 6>;

<bb 5>:
  iftmp.3_4 = 0;

<bb 6>:
  # iftmp.3_1 = PHI <iftmp.3_5(4), iftmp.3_4(5)>
  D.40296_6 = iftmp.3_1;
  return D.40296_6;

}



;; Function switch_known_bitrate (switch_known_bitrate)

Iterations: 0
switch_known_bitrate (switch_payload_t payload)
{
  uint32_t D.40703;
  int D.40702;

<bb 2>:
  D.40702_3 = (int) payload_2(D);
  switch (D.40702_3) <default: <L10>, case 0: <L0>, case 3: <L1>, case 4: <L2>, case 7: <L3>, case 8: <L4>, case 9: <L5>, case 18: <L6>>

<L0>:
  D.40703_4 = 64000;
  goto <bb 11>;

<L1>:
  D.40703_5 = 13200;
  goto <bb 11>;

<L2>:
  D.40703_6 = 6300;
  goto <bb 11>;

<L3>:
  D.40703_7 = 2400;
  goto <bb 11>;

<L4>:
  D.40703_8 = 64000;
  goto <bb 11>;

<L5>:
  D.40703_9 = 64000;
  goto <bb 11>;

<L6>:
  D.40703_10 = 8000;
  goto <bb 11>;

<L10>:
  D.40703_11 = 0;

<bb 11>:
  # D.40703_1 = PHI <D.40703_4(3), D.40703_5(4), D.40703_6(5), D.40703_7(6), D.40703_8(7), D.40703_9(8), D.40703_10(9), D.40703_11(10)>
  return D.40703_1;

}



;; Function switch_safe_atoi (switch_safe_atoi)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_safe_atoi.
Processing frequency atoi
  Called by switch_safe_atoi that is normal or hot
Inlining atoi to switch_safe_atoi with frequency 1000
Iterations: 1
Removing basic block 3
;; basic block 3, loop depth 0, count 0
;; prev block 2, next block 7
;; pred:      
;; succ:       7 [100.0%]  (fallthru,exec)
<bb 3>:


Merging blocks 7 and 6


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #4



Registering new PHI nodes in block #3

Updating SSA information for statement D.47229_8 = strtol (nptr_2(D), 0B, 10);

Updating SSA information for statement D.47228 = D.47229_8;

Updating SSA information for statement iftmp.100_3 = D.47228;



Registering new PHI nodes in block #5



Symbols to be put in SSA form

{ .MEM D.47228 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)

Affected blocks: 0 2 3 4 5 


Scope blocks after cleanups:

{ Scope block #0 

  { Scope block #2 ./src/include/switch_utils.h:735 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #3 Originating from :#0 

    }

  }

}
switch_safe_atoi (const char * nptr, int dft)
{
  int D.47229;
  int D.47228;
  int iftmp.100;
  int D.45419;

<bb 2>:
  if (nptr_2(D) != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  # DEBUG __nptr => nptr_2(D)
  D.47229_8 = strtol (nptr_2(D), 0B, 10);
  D.47228_10 = D.47229_8;
  iftmp.100_3 = D.47228_10;
  goto <bb 5>;

<bb 4>:
  iftmp.100_5 = dft_4(D);

<bb 5>:
  # iftmp.100_1 = PHI <iftmp.100_3(3), iftmp.100_5(4)>
  D.45419_6 = iftmp.100_1;
  return D.45419_6;

}



;; Function switch_media_type2str (switch_media_type2str)

Iterations: 0
switch_media_type2str (switch_media_type_t type)
{
  const char * D.44061;

<bb 2>:
  switch (type_2(D)) <default: <L2>, case 0: <L0>, case 1: <L1>>

<L0>:
  D.44061_3 = "audio";
  goto <bb 6>;

<L1>:
  D.44061_4 = "video";
  goto <bb 6>;

<L2>:
  D.44061_5 = "!ERR";

<bb 6>:
  # D.44061_1 = PHI <D.44061_3(3), D.44061_4(4), D.44061_5(5)>
  return D.44061_1;

}



;; Function greedy_sort (greedy_sort)

Iterations: 0
greedy_sort (struct switch_media_handle_t * smh, struct matches * matches, int m_idx, const struct switch_codec_implementation_t * * codec_array, int total_codecs)
{
  const struct switch_codec_implementation_t * imp;
  struct matches mtmp[30];
  int g;
  int f;
  int j;
  _Bool D.45442;
  _Bool D.45441;
  _Bool D.45440;
  int D.45439;
  struct switch_core_media_params_t * D.45438;
  struct matches * D.45437;
  unsigned int D.45436;
  unsigned int f.103;
  const struct switch_codec_implementation_t * D.45432;
  const struct switch_codec_implementation_t * * D.45431;
  unsigned int D.45430;
  unsigned int g.102;
  struct matches * D.45428;
  struct matches * D.45427;
  unsigned int D.45426;
  unsigned int j.101;

<bb 2>:
  j_7 = 0;
  # DEBUG j => j_7
  f_8 = 0;
  # DEBUG f => f_8
  mtmp = {};
  j_9 = 0;
  # DEBUG j => j_9
  goto <bb 4>;

<bb 3>:
  j.101_11 = (unsigned int) j_1;
  D.45426_12 = j.101_11 * 16;
  D.45427_13 = &mtmp + D.45426_12;
  j.101_14 = (unsigned int) j_1;
  D.45426_15 = j.101_14 * 16;
  D.45428_17 = matches_16(D) + D.45426_15;
  *D.45427_13 = *D.45428_17;
  j_18 = j_1 + 1;
  # DEBUG j => j_18

<bb 4>:
  # j_1 = PHI <j_9(2), j_18(3)>
  # DEBUG j => j_1
  if (j_1 < m_idx_10(D))
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 5>:
  g_19 = 0;
  # DEBUG g => g_19
  goto <bb 12>;

<bb 6>:
  g.102_27 = (unsigned int) g_6;
  D.45430_28 = g.102_27 * 4;
  D.45431_30 = codec_array_29(D) + D.45430_28;
  imp_31 = *D.45431_30;
  # DEBUG imp => imp_31
  j_32 = 0;
  # DEBUG j => j_32
  goto <bb 10>;

<bb 7>:
  D.45432_33 = mtmp[j_2].imp;
  if (D.45432_33 == imp_31)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  f.103_34 = (unsigned int) f_4;
  D.45436_35 = f.103_34 * 16;
  D.45437_36 = matches_16(D) + D.45436_35;
  j.101_37 = (unsigned int) j_2;
  D.45426_38 = j.101_37 * 16;
  D.45427_39 = &mtmp + D.45426_38;
  *D.45437_36 = *D.45427_39;
  f_40 = f_4 + 1;
  # DEBUG f => f_40

<bb 9>:
  # f_3 = PHI <f_4(7), f_40(8)>
  # DEBUG f => f_3
  j_41 = j_2 + 1;
  # DEBUG j => j_41

<bb 10>:
  # j_2 = PHI <j_32(6), j_41(9)>
  # f_4 = PHI <f_5(6), f_3(9)>
  # DEBUG f => f_4
  # DEBUG j => j_2
  if (j_2 < m_idx_10(D))
    goto <bb 7>;
  else
    goto <bb 11>;

<bb 11>:
  g_42 = g_6 + 1;
  # DEBUG g => g_42

<bb 12>:
  # f_5 = PHI <f_8(5), f_4(11)>
  # g_6 = PHI <g_19(5), g_42(11)>
  # DEBUG g => g_6
  # DEBUG f => f_5
  D.45438_21 = smh_20(D)->mparams;
  D.45439_22 = D.45438_21->num_codecs;
  D.45440_23 = D.45439_22 > g_6;
  D.45441_25 = g_6 < total_codecs_24(D);
  D.45442_26 = D.45440_23 && D.45441_25;
  if (D.45442_26 != 0)
    goto <bb 6>;
  else
    goto <bb 13>;

<bb 13>:
  return;

}



;; Function clear_pmaps (clear_pmaps)

Iterations: 0
clear_pmaps (struct switch_rtp_engine_t * engine)
{
  struct payload_map_t * pmap;
  uint8_t D.41160;

<bb 2>:
  pmap_3 = engine_2(D)->payload_map;
  # DEBUG pmap => pmap_3
  goto <bb 4>;

<bb 3>:
  pmap_1->negotiated = 0;
  pmap_1->current = 0;
  pmap_5 = pmap_1->next;
  # DEBUG pmap => pmap_5

<bb 4>:
  # pmap_1 = PHI <pmap_3(2), pmap_5(3)>
  # DEBUG pmap => pmap_1
  if (pmap_1 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.41160_4 = pmap_1->allocated;
  if (D.41160_4 != 0)
    goto <bb 3>;
  else
    goto <bb 6>;

<bb 6>:
  return;

}



;; Function dtls_ok (dtls_ok)

Iterations: 0
dtls_ok (struct switch_core_session_t * session)
{
  uint32_t D.42521;
  struct switch_channel_t * D.42520;
  int D.42519;

<bb 2>:
  D.42520_2 = session_1(D)->channel;
  D.42521_3 = switch_channel_test_flag (D.42520_2, 111);
  D.42519_4 = (int) D.42521_3;
  return D.42519_4;

}



;; Function get_media_profile_name (get_media_profile_name)

Iterations: 0
get_media_profile_name (struct switch_core_session_t * session, int secure)
{
  static const char __PRETTY_FUNCTION__[23] = "get_media_profile_name";
  const char * D.42974;
  uint32_t D.42971;
  uint32_t D.42968;
  struct switch_channel_t * D.42967;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 5582, &__PRETTY_FUNCTION__);

<bb 4>:
  D.42967_3 = session_2(D)->channel;
  D.42968_4 = switch_channel_test_flag (D.42967_3, 106);
  if (D.42968_4 != 0)
    goto <bb 5>;
  else
    goto <bb 8>;

<bb 5>:
  D.42967_5 = session_2(D)->channel;
  D.42971_6 = switch_channel_test_flag (D.42967_5, 107);
  if (D.42971_6 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.42974_7 = "UDP/TLS/RTP/SAVPF";
  goto <bb 11>;

<bb 7>:
  D.42974_8 = "RTP/SAVPF";
  goto <bb 11>;

<bb 8>:
  if (secure_9(D) != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.42974_10 = "RTP/SAVP";
  goto <bb 11>;

<bb 10>:
  D.42974_11 = "RTP/AVP";

<bb 11>:
  # D.42974_1 = PHI <D.42974_7(6), D.42974_8(7), D.42974_10(9), D.42974_11(10)>
  return D.42974_1;

}



;; Function switch_core_media_find_zrtp_hash (switch_core_media_find_zrtp_hash)

Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_find_zrtp_hash.
Processing frequency _zstr
  Called by switch_core_media_find_zrtp_hash that is normal or hot
Inlining _zstr to switch_core_media_find_zrtp_hash with frequency 1000
Iterations: 1
Merging blocks 9 and 25
Merging blocks 28 and 24


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement channel_10 = switch_core_session_get_channel (session_9(D));

Updating SSA information for statement D.40619_13 = session_9(D)->media_handle;



Registering new PHI nodes in block #3

Updating SSA information for statement D.40619_14 = session_9(D)->media_handle;

Updating SSA information for statement D.40619_16 = session_9(D)->media_handle;

Updating SSA information for statement D.40622_18 = switch_channel_get_session (channel_10);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 334, D.40622_18, 101, "Looking for zrtp-hash\n");

Updating SSA information for statement m_20 = sdp_19(D)->sdp_media;



Registering new PHI nodes in block #25



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5

Updating SSA information for statement D.40628_24 = m_1->m_port;



Registering new PHI nodes in block #6

Updating SSA information for statement D.40631_25 = m_1->m_type;



Registering new PHI nodes in block #7

Updating SSA information for statement D.40631_29 = m_1->m_type;



Registering new PHI nodes in block #8

Updating SSA information for statement attr_33 = m_1->m_attributes;



Registering new PHI nodes in block #23



Registering new PHI nodes in block #9

Updating SSA information for statement D.40639_34 = attr_2->a_name;



Registering new PHI nodes in block #10

Updating SSA information for statement D.47248_73 = *D.40639_34;



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement D.47247 = D.47249_74;

Updating SSA information for statement D.40640_35 = D.47247;



Registering new PHI nodes in block #14

Updating SSA information for statement D.40639_36 = attr_2->a_name;

Updating SSA information for statement D.40645_37 = strcasecmp (D.40639_36, "zrtp-hash");



Registering new PHI nodes in block #15

Updating SSA information for statement D.40647_38 = attr_2->a_value;



Registering new PHI nodes in block #17

Updating SSA information for statement D.40631_39 = m_1->m_type;



Registering new PHI nodes in block #18

Updating SSA information for statement D.40650_40 = switch_channel_get_session (channel_10);

Updating SSA information for statement D.40647_41 = attr_2->a_value;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 343, D.40650_40, 7, "Found audio zrtp-hash; setting r_sdp_audio_zrtp_hash=%s\n", D.40647_41);

Updating SSA information for statement D.40647_42 = attr_2->a_value;

Updating SSA information for statement switch_channel_set_variable_var_check (channel_10, "r_sdp_audio_zrtp_hash", D.40647_42, 1);

Updating SSA information for statement D.40647_43 = attr_2->a_value;

Updating SSA information for statement D.40651_44 = switch_core_perform_session_strdup (session_9(D), D.40647_43, "src/switch_core_media.c", &__func__, 346);

Updating SSA information for statement audio_engine_15->remote_sdp_zrtp_hash = D.40651_44;



Registering new PHI nodes in block #19

Updating SSA information for statement D.40631_46 = m_1->m_type;



Registering new PHI nodes in block #20

Updating SSA information for statement D.40655_47 = switch_channel_get_session (channel_10);

Updating SSA information for statement D.40647_48 = attr_2->a_value;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 349, D.40655_47, 7, "Found video zrtp-hash; setting r_sdp_video_zrtp_hash=%s\n", D.40647_48);

Updating SSA information for statement D.40647_49 = attr_2->a_value;

Updating SSA information for statement switch_channel_set_variable_var_check (channel_10, "r_sdp_video_zrtp_hash", D.40647_49, 1);

Updating SSA information for statement D.40647_50 = attr_2->a_value;

Updating SSA information for statement D.40656_51 = switch_core_perform_session_strdup (session_9(D), D.40647_50, "src/switch_core_media.c", &__func__, 352);

Updating SSA information for statement video_engine_17->remote_sdp_zrtp_hash = D.40656_51;



Registering new PHI nodes in block #21

Updating SSA information for statement switch_channel_set_flag_value (channel_10, 75, 1);



Registering new PHI nodes in block #16



Registering new PHI nodes in block #13



Registering new PHI nodes in block #22

Updating SSA information for statement attr_53 = attr_2->a_next;



Registering new PHI nodes in block #24

Updating SSA information for statement m_54 = m_1->m_next;



Registering new PHI nodes in block #26



Symbols to be put in SSA form

{ .MEM D.47247 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 27
Number of blocks to update: 26 ( 96%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_channel_t * channel;
  struct switch_rtp_engine_t * audio_engine;
  struct switch_rtp_engine_t * video_engine;
  struct sdp_media_t * m;
  struct sdp_attribute_t * attr;
  int got_audio;
  int got_video;
  static const char __func__[33] = "switch_core_media_find_zrtp_hash";

  { Scope block #4 src/switch_core_media.c:340 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #5 Originating from :#0 

    }

  }

}
switch_core_media_find_zrtp_hash (struct switch_core_session_t * session, struct sdp_session_t * sdp)
{
  int D.47249;
  const char D.47248;
  int D.47247;
  static const char __func__[33] = "switch_core_media_find_zrtp_hash";
  int got_video;
  int got_audio;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  struct switch_rtp_engine_t * video_engine;
  struct switch_rtp_engine_t * audio_engine;
  struct switch_channel_t * channel;
  char * D.40656;
  struct switch_core_session_t * D.40655;
  char * D.40651;
  struct switch_core_session_t * D.40650;
  const char * D.40647;
  int D.40645;
  int D.40640;
  const char * D.40639;
  _Bool D.40638;
  _Bool D.40637;
  _Bool D.40636;
  _Bool D.40634;
  _Bool D.40633;
  _Bool D.40632;
  sdp_media_e D.40631;
  long unsigned int D.40628;
  _Bool D.40625;
  _Bool D.40624;
  _Bool D.40623;
  struct switch_core_session_t * D.40622;
  struct switch_media_handle_t * D.40619;

<bb 2>:
  channel_10 = switch_core_session_get_channel (session_9(D));
  # DEBUG channel => channel_10
  got_audio_11 = 0;
  # DEBUG got_audio => got_audio_11
  got_video_12 = 0;
  # DEBUG got_video => got_video_12
  D.40619_13 = session_9(D)->media_handle;
  if (D.40619_13 == 0B)
    goto <bb 26>;
  else
    goto <bb 3>;

<bb 3>:
  D.40619_14 = session_9(D)->media_handle;
  audio_engine_15 = &D.40619_14->engines;
  # DEBUG audio_engine => audio_engine_15
  D.40619_16 = session_9(D)->media_handle;
  video_engine_17 = &D.40619_16->engines[1];
  # DEBUG video_engine => video_engine_17
  D.40622_18 = switch_channel_get_session (channel_10);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 334, D.40622_18, 101, "Looking for zrtp-hash\n");
  m_20 = sdp_19(D)->sdp_media;
  # DEBUG m => m_20
  goto <bb 25>;

<bb 4>:
  D.40623_21 = got_audio_5 != 0;
  D.40624_22 = got_video_8 != 0;
  D.40625_23 = D.40623_21 && D.40624_22;
  if (D.40625_23 != 0)
    goto <bb 26>;
  else
    goto <bb 5>;

<bb 5>:
  D.40628_24 = m_1->m_port;
  if (D.40628_24 != 0)
    goto <bb 6>;
  else
    goto <bb 24>;

<bb 6>:
  D.40631_25 = m_1->m_type;
  D.40632_26 = D.40631_25 == 2;
  D.40633_27 = got_audio_5 == 0;
  D.40634_28 = D.40632_26 && D.40633_27;
  if (D.40634_28 != 0)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:
  D.40631_29 = m_1->m_type;
  D.40636_30 = D.40631_29 == 3;
  D.40637_31 = got_video_8 == 0;
  D.40638_32 = D.40636_30 && D.40637_31;
  if (D.40638_32 != 0)
    goto <bb 8>;
  else
    goto <bb 24>;

<bb 8>:
  attr_33 = m_1->m_attributes;
  # DEBUG attr => attr_33
  goto <bb 23>;

<bb 9>:
  D.40639_34 = attr_2->a_name;
  # DEBUG s => D.40639_34
  if (D.40639_34 == 0B)
    goto <bb 12>;
  else
    goto <bb 10>;

<bb 10>:
  D.47248_73 = *D.40639_34;
  if (D.47248_73 == 0)
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:

<bb 12>:
  # D.47249_74 = PHI <1(9), 1(10), 0(11)>
  D.47247_75 = D.47249_74;
  D.40640_35 = D.47247_75;
  if (D.40640_35 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  // predicted unlikely by continue predictor.
  goto <bb 22>;

<bb 14>:
  D.40639_36 = attr_2->a_name;
  D.40645_37 = strcasecmp (D.40639_36, "zrtp-hash");
  if (D.40645_37 != 0)
    goto <bb 16>;
  else
    goto <bb 15>;

<bb 15>:
  D.40647_38 = attr_2->a_value;
  if (D.40647_38 == 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  // predicted unlikely by continue predictor.
  goto <bb 22>;

<bb 17>:
  D.40631_39 = m_1->m_type;
  if (D.40631_39 == 2)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.40650_40 = switch_channel_get_session (channel_10);
  D.40647_41 = attr_2->a_value;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 343, D.40650_40, 7, "Found audio zrtp-hash; setting r_sdp_audio_zrtp_hash=%s\n", D.40647_41);
  D.40647_42 = attr_2->a_value;
  switch_channel_set_variable_var_check (channel_10, "r_sdp_audio_zrtp_hash", D.40647_42, 1);
  D.40647_43 = attr_2->a_value;
  D.40651_44 = switch_core_perform_session_strdup (session_9(D), D.40647_43, "src/switch_core_media.c", &__func__, 346);
  audio_engine_15->remote_sdp_zrtp_hash = D.40651_44;
  got_audio_45 = got_audio_5 + 1;
  # DEBUG got_audio => got_audio_45
  goto <bb 21>;

<bb 19>:
  D.40631_46 = m_1->m_type;
  if (D.40631_46 == 3)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.40655_47 = switch_channel_get_session (channel_10);
  D.40647_48 = attr_2->a_value;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 349, D.40655_47, 7, "Found video zrtp-hash; setting r_sdp_video_zrtp_hash=%s\n", D.40647_48);
  D.40647_49 = attr_2->a_value;
  switch_channel_set_variable_var_check (channel_10, "r_sdp_video_zrtp_hash", D.40647_49, 1);
  D.40647_50 = attr_2->a_value;
  D.40656_51 = switch_core_perform_session_strdup (session_9(D), D.40647_50, "src/switch_core_media.c", &__func__, 352);
  video_engine_17->remote_sdp_zrtp_hash = D.40656_51;
  got_video_52 = got_video_8 + 1;
  # DEBUG got_video => got_video_52

<bb 21>:
  # got_audio_3 = PHI <got_audio_45(18), got_audio_5(19), got_audio_5(20)>
  # got_video_6 = PHI <got_video_8(18), got_video_8(19), got_video_52(20)>
  # DEBUG got_video => got_video_6
  # DEBUG got_audio => got_audio_3
  switch_channel_set_flag_value (channel_10, 75, 1);
  goto <bb 24>;

<bb 22>:
  attr_53 = attr_2->a_next;
  # DEBUG attr => attr_53

<bb 23>:
  # attr_2 = PHI <attr_33(8), attr_53(22)>
  # DEBUG attr => attr_2
  if (attr_2 != 0B)
    goto <bb 9>;
  else
    goto <bb 24>;

<bb 24>:
  # got_audio_4 = PHI <got_audio_5(5), got_audio_5(7), got_audio_3(21), got_audio_5(23)>
  # got_video_7 = PHI <got_video_8(5), got_video_8(7), got_video_6(21), got_video_8(23)>
  # DEBUG got_video => got_video_7
  # DEBUG got_audio => got_audio_4
  m_54 = m_1->m_next;
  # DEBUG m => m_54

<bb 25>:
  # m_1 = PHI <m_20(3), m_54(24)>
  # got_audio_5 = PHI <got_audio_11(3), got_audio_4(24)>
  # got_video_8 = PHI <got_video_12(3), got_video_7(24)>
  # DEBUG got_video => got_video_8
  # DEBUG got_audio => got_audio_5
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 4>;
  else
    goto <bb 26>;

<bb 26>:
  return;

}



;; Function _switch_core_media_pass_zrtp_hash2 (_switch_core_media_pass_zrtp_hash2)

Iterations: 0
_switch_core_media_pass_zrtp_hash2 (struct switch_core_session_t * aleg_session, struct switch_core_session_t * bleg_session, switch_media_type_t type)
{
  static const char __func__[35] = "_switch_core_media_pass_zrtp_hash2";
  struct switch_rtp_engine_t * bleg_engine;
  struct switch_rtp_engine_t * aleg_engine;
  char * D.47198;
  char * D.47197;
  struct switch_core_session_t * D.47196;
  char * D.47193;
  char * D.47192;
  struct switch_channel_t * D.47191;
  char * D.47190;
  struct switch_core_session_t * D.47189;
  char * D.47186;
  struct switch_core_session_t * D.47185;
  uint32_t D.47182;
  struct switch_core_session_t * D.47181;
  struct switch_channel_t * D.47180;
  struct switch_rtp_engine_t[2] * D.47179;
  unsigned int D.47178;
  struct switch_rtp_engine_t[2] * D.47177;
  struct switch_media_handle_t * D.47176;
  struct switch_media_handle_t * D.47174;

<bb 2>:
  D.47174_2 = aleg_session_1(D)->media_handle;
  if (D.47174_2 == 0B)
    goto <bb 10>;
  else
    goto <bb 3>;

<bb 3>:
  D.47176_4 = bleg_session_3(D)->media_handle;
  if (D.47176_4 == 0B)
    goto <bb 10>;
  else
    goto <bb 4>;

<bb 4>:
  D.47174_5 = aleg_session_1(D)->media_handle;
  D.47177_6 = &D.47174_5->engines;
  D.47178_8 = type_7(D) * 11416;
  aleg_engine_9 = D.47177_6 + D.47178_8;
  # DEBUG aleg_engine => aleg_engine_9
  D.47176_10 = bleg_session_3(D)->media_handle;
  D.47179_11 = &D.47176_10->engines;
  D.47178_12 = type_7(D) * 11416;
  bleg_engine_13 = D.47179_11 + D.47178_12;
  # DEBUG bleg_engine => bleg_engine_13
  D.47180_14 = aleg_session_1(D)->channel;
  D.47181_15 = switch_channel_get_session (D.47180_14);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 255, D.47181_15, 101, "Deciding whether to pass zrtp-hash between a-leg and b-leg\n");
  D.47180_16 = aleg_session_1(D)->channel;
  D.47182_17 = switch_channel_test_flag (D.47180_16, 73);
  if (D.47182_17 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47180_18 = aleg_session_1(D)->channel;
  D.47185_19 = switch_channel_get_session (D.47180_18);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 259, D.47185_19, 101, "CF_ZRTP_PASSTHRU_REQ not set on a-leg, so not propagating zrtp-hash\n");
  goto <bb 10>;

<bb 6>:
  D.47186_20 = aleg_engine_9->remote_sdp_zrtp_hash;
  if (D.47186_20 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.47180_21 = aleg_session_1(D)->channel;
  D.47189_22 = switch_channel_get_session (D.47180_21);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 265, D.47189_22, 7, "Passing a-leg remote zrtp-hash (audio) to b-leg\n");
  D.47186_23 = aleg_engine_9->remote_sdp_zrtp_hash;
  D.47190_24 = switch_core_perform_session_strdup (bleg_session_3(D), D.47186_23, "src/switch_core_media.c", &__func__, 266);
  bleg_engine_13->local_sdp_zrtp_hash = D.47190_24;
  D.47191_25 = bleg_session_3(D)->channel;
  D.47192_26 = bleg_engine_13->local_sdp_zrtp_hash;
  switch_channel_set_variable_var_check (D.47191_25, "l_sdp_audio_zrtp_hash", D.47192_26, 1);

<bb 8>:
  D.47193_27 = bleg_engine_13->remote_sdp_zrtp_hash;
  if (D.47193_27 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.47180_28 = aleg_session_1(D)->channel;
  D.47196_29 = switch_channel_get_session (D.47180_28);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 271, D.47196_29, 7, "Passing b-leg remote zrtp-hash (audio) to a-leg\n");
  D.47193_30 = bleg_engine_13->remote_sdp_zrtp_hash;
  D.47197_31 = switch_core_perform_session_strdup (aleg_session_1(D), D.47193_30, "src/switch_core_media.c", &__func__, 272);
  aleg_engine_9->local_sdp_zrtp_hash = D.47197_31;
  D.47180_32 = aleg_session_1(D)->channel;
  D.47198_33 = aleg_engine_9->local_sdp_zrtp_hash;
  switch_channel_set_variable_var_check (D.47180_32, "l_sdp_audio_zrtp_hash", D.47198_33, 1);

<bb 10>:
  return;

}



;; Function switch_true (switch_true)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_true.
Processing frequency atoi
  Called by switch_true that is normal or hot
Inlining atoi to switch_true with frequency 1000
Iterations: 1
Removing basic block 11
;; basic block 11, loop depth 0, count 0
;; prev block 10, next block 16
;; pred:      
;; succ:       16 [100.0%]  (fallthru,exec)
<bb 11>:


Merging blocks 16 and 15


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement D.40601_3 = strcasecmp (expr_2(D), "yes");



Registering new PHI nodes in block #4

Updating SSA information for statement D.40603_4 = strcasecmp (expr_2(D), "on");



Registering new PHI nodes in block #5

Updating SSA information for statement D.40605_5 = strcasecmp (expr_2(D), "true");



Registering new PHI nodes in block #6

Updating SSA information for statement D.40607_6 = strcasecmp (expr_2(D), "t");



Registering new PHI nodes in block #7

Updating SSA information for statement D.40609_7 = strcasecmp (expr_2(D), "enabled");



Registering new PHI nodes in block #8

Updating SSA information for statement D.40611_8 = strcasecmp (expr_2(D), "active");



Registering new PHI nodes in block #9

Updating SSA information for statement D.40613_9 = strcasecmp (expr_2(D), "allow");



Registering new PHI nodes in block #10

Updating SSA information for statement D.40615_10 = switch_is_number (expr_2(D));



Registering new PHI nodes in block #11

Updating SSA information for statement D.47254_17 = strtol (expr_2(D), 0B, 10);

Updating SSA information for statement D.47253 = D.47254_17;

Updating SSA information for statement D.40617_11 = D.47253;



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Symbols to be put in SSA form

{ .MEM D.47253 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 15
Number of blocks to update: 14 ( 93%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 


Scope blocks after cleanups:

{ Scope block #0 

  { Scope block #6 ./src/include/switch_utils.h:436 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #7 Originating from :#0 

    }

  }

}
switch_true (const char * expr)
{
  int D.47254;
  int D.47253;
  int D.40617;
  switch_bool_t D.40615;
  int D.40613;
  int D.40611;
  int D.40609;
  int D.40607;
  int D.40605;
  int D.40603;
  int D.40601;
  int iftmp.6;
  int D.40595;

<bb 2>:
  if (expr_2(D) != 0B)
    goto <bb 3>;
  else
    goto <bb 13>;

<bb 3>:
  D.40601_3 = strcasecmp (expr_2(D), "yes");
  if (D.40601_3 == 0)
    goto <bb 12>;
  else
    goto <bb 4>;

<bb 4>:
  D.40603_4 = strcasecmp (expr_2(D), "on");
  if (D.40603_4 == 0)
    goto <bb 12>;
  else
    goto <bb 5>;

<bb 5>:
  D.40605_5 = strcasecmp (expr_2(D), "true");
  if (D.40605_5 == 0)
    goto <bb 12>;
  else
    goto <bb 6>;

<bb 6>:
  D.40607_6 = strcasecmp (expr_2(D), "t");
  if (D.40607_6 == 0)
    goto <bb 12>;
  else
    goto <bb 7>;

<bb 7>:
  D.40609_7 = strcasecmp (expr_2(D), "enabled");
  if (D.40609_7 == 0)
    goto <bb 12>;
  else
    goto <bb 8>;

<bb 8>:
  D.40611_8 = strcasecmp (expr_2(D), "active");
  if (D.40611_8 == 0)
    goto <bb 12>;
  else
    goto <bb 9>;

<bb 9>:
  D.40613_9 = strcasecmp (expr_2(D), "allow");
  if (D.40613_9 == 0)
    goto <bb 12>;
  else
    goto <bb 10>;

<bb 10>:
  D.40615_10 = switch_is_number (expr_2(D));
  if (D.40615_10 != 0)
    goto <bb 11>;
  else
    goto <bb 13>;

<bb 11>:
  # DEBUG __nptr => expr_2(D)
  D.47254_17 = strtol (expr_2(D), 0B, 10);
  D.47253_19 = D.47254_17;
  D.40617_11 = D.47253_19;
  if (D.40617_11 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  iftmp.6_12 = 1;
  goto <bb 14>;

<bb 13>:
  iftmp.6_13 = 0;

<bb 14>:
  # iftmp.6_1 = PHI <iftmp.6_12(12), iftmp.6_13(13)>
  D.40595_14 = iftmp.6_1;
  return D.40595_14;

}



;; Function switch_false (switch_false)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_false.
Processing frequency atoi
  Called by switch_false that is normal or hot
Inlining atoi to switch_false with frequency 1000
Iterations: 1
Removing basic block 11
;; basic block 11, loop depth 0, count 0
;; prev block 10, next block 16
;; pred:      
;; succ:       16 [100.0%]  (fallthru,exec)
<bb 11>:


Merging blocks 16 and 15


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement D.41141_3 = strcasecmp (expr_2(D), "no");



Registering new PHI nodes in block #4

Updating SSA information for statement D.41143_4 = strcasecmp (expr_2(D), "off");



Registering new PHI nodes in block #5

Updating SSA information for statement D.41145_5 = strcasecmp (expr_2(D), "false");



Registering new PHI nodes in block #6

Updating SSA information for statement D.41147_6 = strcasecmp (expr_2(D), "f");



Registering new PHI nodes in block #7

Updating SSA information for statement D.41149_7 = strcasecmp (expr_2(D), "disabled");



Registering new PHI nodes in block #8

Updating SSA information for statement D.41151_8 = strcasecmp (expr_2(D), "inactive");



Registering new PHI nodes in block #9

Updating SSA information for statement D.41153_9 = strcasecmp (expr_2(D), "disallow");



Registering new PHI nodes in block #10

Updating SSA information for statement D.41155_10 = switch_is_number (expr_2(D));



Registering new PHI nodes in block #11

Updating SSA information for statement D.47258_17 = strtol (expr_2(D), 0B, 10);

Updating SSA information for statement D.47257 = D.47258_17;

Updating SSA information for statement D.41157_11 = D.47257;



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Symbols to be put in SSA form

{ .MEM D.47257 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 15
Number of blocks to update: 14 ( 93%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 


Scope blocks after cleanups:

{ Scope block #0 

  { Scope block #8 ./src/include/switch_utils.h:468 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #9 Originating from :#0 

    }

  }

}
switch_false (const char * expr)
{
  int D.47258;
  int D.47257;
  int D.41157;
  switch_bool_t D.41155;
  int D.41153;
  int D.41151;
  int D.41149;
  int D.41147;
  int D.41145;
  int D.41143;
  int D.41141;
  int iftmp.14;
  int D.41135;

<bb 2>:
  if (expr_2(D) != 0B)
    goto <bb 3>;
  else
    goto <bb 13>;

<bb 3>:
  D.41141_3 = strcasecmp (expr_2(D), "no");
  if (D.41141_3 == 0)
    goto <bb 12>;
  else
    goto <bb 4>;

<bb 4>:
  D.41143_4 = strcasecmp (expr_2(D), "off");
  if (D.41143_4 == 0)
    goto <bb 12>;
  else
    goto <bb 5>;

<bb 5>:
  D.41145_5 = strcasecmp (expr_2(D), "false");
  if (D.41145_5 == 0)
    goto <bb 12>;
  else
    goto <bb 6>;

<bb 6>:
  D.41147_6 = strcasecmp (expr_2(D), "f");
  if (D.41147_6 == 0)
    goto <bb 12>;
  else
    goto <bb 7>;

<bb 7>:
  D.41149_7 = strcasecmp (expr_2(D), "disabled");
  if (D.41149_7 == 0)
    goto <bb 12>;
  else
    goto <bb 8>;

<bb 8>:
  D.41151_8 = strcasecmp (expr_2(D), "inactive");
  if (D.41151_8 == 0)
    goto <bb 12>;
  else
    goto <bb 9>;

<bb 9>:
  D.41153_9 = strcasecmp (expr_2(D), "disallow");
  if (D.41153_9 == 0)
    goto <bb 12>;
  else
    goto <bb 10>;

<bb 10>:
  D.41155_10 = switch_is_number (expr_2(D));
  if (D.41155_10 != 0)
    goto <bb 11>;
  else
    goto <bb 13>;

<bb 11>:
  # DEBUG __nptr => expr_2(D)
  D.47258_17 = strtol (expr_2(D), 0B, 10);
  D.47257_19 = D.47258_17;
  D.41157_11 = D.47257_19;
  if (D.41157_11 == 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  iftmp.14_12 = 1;
  goto <bb 14>;

<bb 13>:
  iftmp.14_13 = 0;

<bb 14>:
  # iftmp.14_1 = PHI <iftmp.14_12(12), iftmp.14_13(13)>
  D.41135_14 = iftmp.14_1;
  return D.41135_14;

}



;; Function add_audio_codec (add_audio_codec)

Considering inline candidate _zstr.
 Inlining _zstr into add_audio_codec.
Processing frequency _zstr
  Called by add_audio_codec that is normal or hot
Considering inline candidate switch_known_bitrate.
 Inlining switch_known_bitrate into add_audio_codec.
Processing frequency switch_known_bitrate
  Called by add_audio_codec that is normal or hot
Inlining switch_known_bitrate to add_audio_codec with frequency 1000
Inlining _zstr to add_audio_codec with frequency 1000
Iterations: 1
Merging blocks 4 and 25
Merging blocks 7 and 30
Merging blocks 28 and 24
Merging blocks 33 and 29


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement ptstr = "";

Updating SSA information for statement ratestr = "";

Updating SSA information for statement bitstr = "";

Updating SSA information for statement codec_fmtp = {};



Registering new PHI nodes in block #3

Updating SSA information for statement D.40660_10 = map_9(D)->rm_encoding;

Updating SSA information for statement D.40661_11 = map_9(D)->rm_pt;

Updating SSA information for statement D.40663_13 = switch_default_ptime (D.40660_10, D.40662_12);



Registering new PHI nodes in block #4

Updating SSA information for statement D.40661_15 = map_9(D)->rm_pt;



Registering new PHI nodes in block #6

Updating SSA information for statement D.47263_71 = CSWTCH.174[csui.173_69];



Registering new PHI nodes in block #5



Registering new PHI nodes in block #7

Updating SSA information for statement D.47261 = D.47263_72;

Updating SSA information for statement map_bit_rate_17 = D.47261;



Registering new PHI nodes in block #8

Updating SSA information for statement D.40660_18 = map_9(D)->rm_encoding;

Updating SSA information for statement D.40667_19 = strcasecmp (D.40660_18, "g723");



Registering new PHI nodes in block #9



Registering new PHI nodes in block #10

Updating SSA information for statement D.40670_22 = map_9(D)->rm_fmtp;



Registering new PHI nodes in block #11

Updating SSA information for statement D.47270_73 = *D.40670_22;



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13

Updating SSA information for statement D.47269 = D.47271_74;

Updating SSA information for statement D.40671_23 = D.47269;



Registering new PHI nodes in block #18

Updating SSA information for statement D.40660_34 = map_9(D)->rm_encoding;

Updating SSA information for statement D.40670_35 = map_9(D)->rm_fmtp;

Updating SSA information for statement D.40682_36 = map_9(D)->rm_rate;

Updating SSA information for statement D.40683_37 = switch_core_codec_parse_fmtp (D.40660_34, D.40670_35, D.40682_36, &codec_fmtp);



Registering new PHI nodes in block #19

Updating SSA information for statement D.40686_38 = codec_fmtp.bits_per_second;



Registering new PHI nodes in block #20

Updating SSA information for statement D.40686_39 = codec_fmtp.bits_per_second;



Registering new PHI nodes in block #21

Updating SSA information for statement D.40689_41 = codec_fmtp.microseconds_per_packet;



Registering new PHI nodes in block #22

Updating SSA information for statement D.40689_42 = codec_fmtp.microseconds_per_packet;



Registering new PHI nodes in block #14

Updating SSA information for statement D.40660_24 = map_9(D)->rm_encoding;

Updating SSA information for statement D.40674_25 = strcasecmp (D.40660_24, "ilbc");



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16

Updating SSA information for statement D.40660_29 = map_9(D)->rm_encoding;

Updating SSA information for statement D.40678_30 = strcasecmp (D.40660_29, "isac");



Registering new PHI nodes in block #17



Registering new PHI nodes in block #23

Updating SSA information for statement D.40682_44 = map_9(D)->rm_rate;



Registering new PHI nodes in block #24

Updating SSA information for statement D.40682_45 = map_9(D)->rm_rate;

Updating SSA information for statement switch_snprintf (&ratestr, 20, "@%uh", D.40682_45);



Registering new PHI nodes in block #25



Registering new PHI nodes in block #26

Updating SSA information for statement switch_snprintf (&ptstr, 20, "@%di", codec_ms_3);



Registering new PHI nodes in block #27



Registering new PHI nodes in block #28

Updating SSA information for statement switch_snprintf (&bitstr, 20, "@%db", map_bit_rate_5);



Registering new PHI nodes in block #29

Updating SSA information for statement D.40698_47 = strlen (buf_46(D));

Updating SSA information for statement D.40700_49 = strlen (buf_46(D));

Updating SSA information for statement D.40660_52 = map_9(D)->rm_encoding;

Updating SSA information for statement switch_snprintf (D.40699_48, D.40701_51, ",%s%s%s%s", D.40660_52, &ratestr, &ptstr, &bitstr);



Symbols to be put in SSA form

{ .MEM D.47261 D.47269 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 30
Number of blocks to update: 29 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 


Scope blocks after cleanups:

{ Scope block #0 
  int codec_ms;
  uint32_t map_bit_rate;
  char ptstr[20];
  char ratestr[20];
  char bitstr[20];
  struct switch_codec_fmtp_t codec_fmtp;

  { Scope block #10 src/switch_core_media.c:8143 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #11 Originating from :#0 

    }

  }

  { Scope block #12 src/switch_core_media.c:8137 Originating from :  static uint32_t switch_known_bitrate (switch_payload_t); 
    switch_payload_t payload; (unused)

  }

}
add_audio_codec (struct sdp_rtpmap_t * map, int ptime, char * buf, switch_size_t buflen)
{
  int D.47271;
  const char D.47270;
  int D.47269;
  uint32_t D.47263;
  unsigned char csui.173;
  uint32_t D.47261;
  struct switch_codec_fmtp_t codec_fmtp;
  char bitstr[20];
  char ratestr[20];
  char ptstr[20];
  uint32_t map_bit_rate;
  int codec_ms;
  switch_size_t D.40701;
  size_t D.40700;
  char * D.40699;
  size_t D.40698;
  int D.40689;
  int D.40686;
  switch_status_t D.40683;
  long unsigned int D.40682;
  int D.40678;
  int D.40674;
  int D.40671;
  const char * D.40670;
  int D.40667;
  unsigned char D.40664;
  uint32_t D.40663;
  uint32_t D.40662;
  <unnamed-unsigned:7> D.40661;
  const char * D.40660;

<bb 2>:
  codec_ms_7 = ptime_6(D);
  # DEBUG codec_ms => codec_ms_7
  map_bit_rate_8 = 0;
  # DEBUG map_bit_rate => map_bit_rate_8
  ptstr = "";
  ratestr = "";
  bitstr = "";
  codec_fmtp = {};
  if (codec_ms_7 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.40660_10 = map_9(D)->rm_encoding;
  D.40661_11 = map_9(D)->rm_pt;
  D.40662_12 = (uint32_t) D.40661_11;
  D.40663_13 = switch_default_ptime (D.40660_10, D.40662_12);
  codec_ms_14 = (int) D.40663_13;
  # DEBUG codec_ms => codec_ms_14

<bb 4>:
  # codec_ms_1 = PHI <codec_ms_7(2), codec_ms_14(3)>
  # DEBUG codec_ms => codec_ms_1
  D.40661_15 = map_9(D)->rm_pt;
  D.40664_16 = (unsigned char) D.40661_15;
  # DEBUG payload => D.40664_16
  csui.173_69 = D.40664_16;
  if (csui.173_69 <= 18)
    goto <bb 6> (<L27>);
  else
    goto <bb 5> (<L26>);

<L26>:
  D.47263_70 = 0;
  goto <bb 7> (<L28>);

<L27>:
  D.47263_71 = CSWTCH.174[csui.173_69];

  # D.47263_72 = PHI <D.47263_70(5), D.47263_71(6)>
<L28>:
<L29>:
  D.47261_75 = D.47263_72;
  map_bit_rate_17 = D.47261_75;
  # DEBUG map_bit_rate => NULL
  if (ptime_6(D) == 0)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  D.40660_18 = map_9(D)->rm_encoding;
  D.40667_19 = strcasecmp (D.40660_18, "g723");
  if (D.40667_19 == 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  codec_ms_20 = 30;
  # DEBUG codec_ms => codec_ms_20
  ptime_21 = codec_ms_20;
  # DEBUG ptime => ptime_21

<bb 10>:
  # codec_ms_2 = PHI <codec_ms_1(7), codec_ms_1(8), codec_ms_20(9)>
  # DEBUG codec_ms => codec_ms_2
  D.40670_22 = map_9(D)->rm_fmtp;
  # DEBUG s => D.40670_22
  if (D.40670_22 == 0B)
    goto <bb 13>;
  else
    goto <bb 11>;

<bb 11>:
  D.47270_73 = *D.40670_22;
  if (D.47270_73 == 0)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:

<bb 13>:
  # D.47271_74 = PHI <1(10), 1(11), 0(12)>
  D.47269_76 = D.47271_74;
  D.40671_23 = D.47269_76;
  if (D.40671_23 != 0)
    goto <bb 14>;
  else
    goto <bb 18>;

<bb 14>:
  D.40660_24 = map_9(D)->rm_encoding;
  D.40674_25 = strcasecmp (D.40660_24, "ilbc");
  if (D.40674_25 == 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  codec_ms_26 = 30;
  # DEBUG codec_ms => codec_ms_26
  ptime_27 = codec_ms_26;
  # DEBUG ptime => ptime_27
  map_bit_rate_28 = 13330;
  # DEBUG map_bit_rate => map_bit_rate_28
  goto <bb 23>;

<bb 16>:
  D.40660_29 = map_9(D)->rm_encoding;
  D.40678_30 = strcasecmp (D.40660_29, "isac");
  if (D.40678_30 == 0)
    goto <bb 17>;
  else
    goto <bb 23>;

<bb 17>:
  codec_ms_31 = 30;
  # DEBUG codec_ms => codec_ms_31
  ptime_32 = codec_ms_31;
  # DEBUG ptime => ptime_32
  map_bit_rate_33 = 32000;
  # DEBUG map_bit_rate => map_bit_rate_33
  goto <bb 23>;

<bb 18>:
  D.40660_34 = map_9(D)->rm_encoding;
  D.40670_35 = map_9(D)->rm_fmtp;
  D.40682_36 = map_9(D)->rm_rate;
  D.40683_37 = switch_core_codec_parse_fmtp (D.40660_34, D.40670_35, D.40682_36, &codec_fmtp);
  if (D.40683_37 == 0)
    goto <bb 19>;
  else
    goto <bb 23>;

<bb 19>:
  D.40686_38 = codec_fmtp.bits_per_second;
  if (D.40686_38 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.40686_39 = codec_fmtp.bits_per_second;
  map_bit_rate_40 = (uint32_t) D.40686_39;
  # DEBUG map_bit_rate => map_bit_rate_40

<bb 21>:
  # map_bit_rate_4 = PHI <map_bit_rate_17(19), map_bit_rate_40(20)>
  # DEBUG map_bit_rate => map_bit_rate_4
  D.40689_41 = codec_fmtp.microseconds_per_packet;
  if (D.40689_41 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.40689_42 = codec_fmtp.microseconds_per_packet;
  codec_ms_43 = D.40689_42 / 1000;
  # DEBUG codec_ms => codec_ms_43

<bb 23>:
  # codec_ms_3 = PHI <codec_ms_2(16), codec_ms_2(18), codec_ms_2(21), codec_ms_43(22), codec_ms_26(15), codec_ms_31(17)>
  # map_bit_rate_5 = PHI <map_bit_rate_17(16), map_bit_rate_17(18), map_bit_rate_4(21), map_bit_rate_4(22), map_bit_rate_28(15), map_bit_rate_33(17)>
  # DEBUG map_bit_rate => map_bit_rate_5
  # DEBUG codec_ms => codec_ms_3
  D.40682_44 = map_9(D)->rm_rate;
  if (D.40682_44 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  D.40682_45 = map_9(D)->rm_rate;
  switch_snprintf (&ratestr, 20, "@%uh", D.40682_45);

<bb 25>:
  if (codec_ms_3 != 0)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  switch_snprintf (&ptstr, 20, "@%di", codec_ms_3);

<bb 27>:
  if (map_bit_rate_5 != 0)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  switch_snprintf (&bitstr, 20, "@%db", map_bit_rate_5);

<bb 29>:
  D.40698_47 = strlen (buf_46(D));
  D.40699_48 = buf_46(D) + D.40698_47;
  D.40700_49 = strlen (buf_46(D));
  D.40701_51 = buflen_50(D) - D.40700_49;
  D.40660_52 = map_9(D)->rm_encoding;
  switch_snprintf (D.40699_48, D.40701_51, ",%s%s%s%s", D.40660_52, &ratestr, &ptstr, &bitstr);
  return;

}



;; Function switch_core_session_parse_crypto_prefs (switch_core_session_parse_crypto_prefs)

Considering inline candidate _zstr.
 Inlining _zstr into switch_core_session_parse_crypto_prefs.
Processing frequency _zstr
  Called by switch_core_session_parse_crypto_prefs that is normal or hot
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_session_parse_crypto_prefs.
Processing frequency _zstr
  Called by switch_core_session_parse_crypto_prefs that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_session_parse_crypto_prefs.
Processing frequency _zstr
  Called by switch_core_session_parse_crypto_prefs that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_session_parse_crypto_prefs.
Processing frequency _zstr
  Called by switch_core_session_parse_crypto_prefs that is normal or hot
Inlining _zstr to switch_core_session_parse_crypto_prefs with frequency 1000
Inlining _zstr to switch_core_session_parse_crypto_prefs with frequency 1000
Inlining _zstr to switch_core_session_parse_crypto_prefs with frequency 1000
Inlining _zstr to switch_core_session_parse_crypto_prefs with frequency 1000
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Iterations: 1
Merging blocks 9 and 44
Merging blocks 12 and 49
Merging blocks 14 and 54
Removing basic block 28
;; basic block 28, loop depth 0, count 0
;; prev block 27, next block 59
;; pred:      
;; succ:       59 [100.0%]  (fallthru,exec)
<bb 28>:


Merging blocks 47 and 43
Merging blocks 52 and 48
Merging blocks 57 and 53
Merging blocks 62 and 58


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement smh_22 = session_21(D)->media_handle;



Registering new PHI nodes in block #3

Updating SSA information for statement D.42525_23 = session_21(D)->channel;

Updating SSA information for statement D.42526_24 = switch_channel_test_flag (D.42525_23, 106);



Registering new PHI nodes in block #4

Updating SSA information for statement D.42525_25 = session_21(D)->channel;

Updating SSA information for statement D.42529_26 = switch_channel_direction (D.42525_25);



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6



Registering new PHI nodes in block #7

Updating SSA information for statement D.42525_29 = session_21(D)->channel;

Updating SSA information for statement val_30 = switch_channel_get_variable_dup (D.42525_29, var_1, 1, -1);



Registering new PHI nodes in block #8

Updating SSA information for statement D.42525_32 = session_21(D)->channel;

Updating SSA information for statement val_33 = switch_channel_get_variable_dup (D.42525_32, var_31, 1, -1);



Registering new PHI nodes in block #9



Registering new PHI nodes in block #10

Updating SSA information for statement D.47275_100 = *val_3;



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement D.47274 = D.47276_101;

Updating SSA information for statement D.42535_34 = D.47274;



Registering new PHI nodes in block #13

Updating SSA information for statement suites_35 = __builtin_strchr (val_3, 58);



Registering new PHI nodes in block #14

Updating SSA information for statement *suites_35 = 0;



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16

Updating SSA information for statement D.47279_102 = MEM[(const char *)suites_5];



Registering new PHI nodes in block #17



Registering new PHI nodes in block #18

Updating SSA information for statement D.47278 = D.47280_103;

Updating SSA information for statement D.42540_37 = D.47278;



Registering new PHI nodes in block #19

Updating SSA information for statement D.42525_38 = session_21(D)->channel;

Updating SSA information for statement suites_39 = switch_channel_get_variable_dup (D.42525_38, "rtp_secure_media_suites", 1, -1);



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement D.47283_104 = *val_3;



Registering new PHI nodes in block #22



Registering new PHI nodes in block #23

Updating SSA information for statement D.47282 = D.47284_105;

Updating SSA information for statement D.42543_40 = D.47282;



Registering new PHI nodes in block #24

Updating SSA information for statement D.42525_41 = session_21(D)->channel;

Updating SSA information for statement D.42548_42 = switch_channel_direction (D.42525_41);



Registering new PHI nodes in block #25

Updating SSA information for statement D.42525_43 = session_21(D)->channel;

Updating SSA information for statement D.42550_44 = switch_channel_test_flag (D.42525_43, 84);



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27



Registering new PHI nodes in block #28

Updating SSA information for statement D.42552_47 = strcasecmp (val_4, "optional");



Registering new PHI nodes in block #29

Updating SSA information for statement smh_22->crypto_mode = 0;



Registering new PHI nodes in block #30

Updating SSA information for statement D.42559_48 = switch_true (val_4);



Registering new PHI nodes in block #31

Updating SSA information for statement D.42561_49 = strcasecmp (val_4, "mandatory");



Registering new PHI nodes in block #33

Updating SSA information for statement smh_22->crypto_mode = 2;

Updating SSA information for statement D.42562_50 = switch_false (val_4);



Registering new PHI nodes in block #34

Updating SSA information for statement D.42565_51 = strcasecmp (val_4, "forbidden");



Registering new PHI nodes in block #35

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1123, session_21(D), 4, "INVALID VALUE FOR %s defaulting to \'forbidden\'\n", var_2);



Registering new PHI nodes in block #32

Updating SSA information for statement smh_22->crypto_mode = 1;



Registering new PHI nodes in block #36

Updating SSA information for statement D.42569_52 = smh_22->crypto_mode;



Registering new PHI nodes in block #37



Registering new PHI nodes in block #38

Updating SSA information for statement D.47287_106 = MEM[(const char *)suites_6];



Registering new PHI nodes in block #39



Registering new PHI nodes in block #40

Updating SSA information for statement D.47286 = D.47288_107;

Updating SSA information for statement D.42571_53 = D.47286;



Registering new PHI nodes in block #41

Updating SSA information for statement D.42573_54 = switch_separate_string (suites_6, 58, &fields, 10);



Registering new PHI nodes in block #50



Registering new PHI nodes in block #42



Registering new PHI nodes in block #46



Registering new PHI nodes in block #43

Updating SSA information for statement D.42574_59 = fields[i_7];

Updating SSA information for statement D.42575_60 = SUITES[j_9].name;

Updating SSA information for statement D.42576_61 = strcasecmp (D.42574_59, D.42575_60);



Registering new PHI nodes in block #44

Updating SSA information for statement D.42579_62 = SUITES[j_9].type;

Updating SSA information for statement smh_22->crypto_suite_order[k_11] = D.42579_62;



Registering new PHI nodes in block #45



Registering new PHI nodes in block #47



Registering new PHI nodes in block #48

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1142, session_21(D), 4, "INVALID SUITE SUPPLIED\n");



Registering new PHI nodes in block #49



Registering new PHI nodes in block #51



Registering new PHI nodes in block #53



Registering new PHI nodes in block #52

Updating SSA information for statement D.42582_68 = SUITES[i_8].type;

Updating SSA information for statement smh_22->crypto_suite_order[k_12] = D.42582_68;



Registering new PHI nodes in block #54



Symbols to be put in SSA form

{ .MEM D.47274 D.47278 D.47282 D.47286 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 55
Number of blocks to update: 54 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 


Scope blocks after cleanups:

{ Scope block #0 
  const char * var;
  const char * val;
  char * suites;
  struct switch_media_handle_t * smh;
  char * fields[10];
  int argc;
  int i;
  int j;
  int k;
  static const char __func__[39] = "switch_core_session_parse_crypto_prefs";

  { Scope block #14 src/switch_core_media.c:1127 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #15 Originating from :#0 

    }

  }

  { Scope block #16 src/switch_core_media.c:1108 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #17 Originating from :#0 

    }

  }

  { Scope block #18 src/switch_core_media.c:1104 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #19 Originating from :#0 

    }

  }

  { Scope block #20 src/switch_core_media.c:1100 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #21 Originating from :#0 

    }

  }

  { Scope block #22 
    int ok;

  }

}
switch_core_session_parse_crypto_prefs (struct switch_core_session_t * session)
{
  int D.47288;
  const char D.47287;
  int D.47286;
  int D.47284;
  const char D.47283;
  int D.47282;
  int D.47280;
  const char D.47279;
  int D.47278;
  int D.47276;
  const char D.47275;
  int D.47274;
  int ok;
  static const char __func__[39] = "switch_core_session_parse_crypto_prefs";
  int k;
  int j;
  int i;
  int argc;
  char * fields[10];
  struct switch_media_handle_t * smh;
  char * suites;
  const char * val;
  const char * var;
  switch_rtp_crypto_key_type_t D.42582;
  switch_rtp_crypto_key_type_t D.42579;
  int D.42576;
  char * D.42575;
  char * D.42574;
  unsigned int D.42573;
  int D.42571;
  switch_rtp_crypto_mode_t D.42569;
  int D.42565;
  int D.42562;
  int D.42561;
  int D.42559;
  int D.42552;
  uint32_t D.42550;
  switch_call_direction_t D.42548;
  int D.42543;
  int D.42540;
  int D.42535;
  switch_call_direction_t D.42529;
  uint32_t D.42526;
  struct switch_channel_t * D.42525;

<bb 2>:
  var_14 = 0B;
  # DEBUG var => var_14
  val_15 = 0B;
  # DEBUG val => val_15
  suites_16 = 0B;
  # DEBUG suites => suites_16
  argc_17 = 0;
  # DEBUG argc => argc_17
  i_18 = 0;
  # DEBUG i => i_18
  j_19 = 0;
  # DEBUG j => j_19
  k_20 = 0;
  # DEBUG k => k_20
  smh_22 = session_21(D)->media_handle;
  # DEBUG smh => smh_22
  if (smh_22 == 0B)
    goto <bb 54>;
  else
    goto <bb 3>;

<bb 3>:
  D.42525_23 = session_21(D)->channel;
  D.42526_24 = switch_channel_test_flag (D.42525_23, 106);
  if (D.42526_24 != 0)
    goto <bb 54>;
  else
    goto <bb 4>;

<bb 4>:
  D.42525_25 = session_21(D)->channel;
  D.42529_26 = switch_channel_direction (D.42525_25);
  if (D.42529_26 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  var_27 = "rtp_secure_media_inbound";
  # DEBUG var => var_27
  goto <bb 7>;

<bb 6>:
  var_28 = "rtp_secure_media_outbound";
  # DEBUG var => var_28

<bb 7>:
  # var_1 = PHI <var_27(5), var_28(6)>
  # DEBUG var => var_1
  D.42525_29 = session_21(D)->channel;
  val_30 = switch_channel_get_variable_dup (D.42525_29, var_1, 1, -1);
  # DEBUG val => val_30
  if (val_30 == 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  var_31 = "rtp_secure_media";
  # DEBUG var => var_31
  D.42525_32 = session_21(D)->channel;
  val_33 = switch_channel_get_variable_dup (D.42525_32, var_31, 1, -1);
  # DEBUG val => val_33

<bb 9>:
  # var_2 = PHI <var_1(7), var_31(8)>
  # val_3 = PHI <val_30(7), val_33(8)>
  # DEBUG val => val_3
  # DEBUG var => var_2
  # DEBUG s => val_3
  if (val_3 == 0B)
    goto <bb 12>;
  else
    goto <bb 10>;

<bb 10>:
  D.47275_100 = *val_3;
  if (D.47275_100 == 0)
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:

<bb 12>:
  # D.47276_101 = PHI <1(9), 1(10), 0(11)>
  D.47274_108 = D.47276_101;
  D.42535_34 = D.47274_108;
  if (D.42535_34 == 0)
    goto <bb 13>;
  else
    goto <bb 15>;

<bb 13>:
  suites_35 = __builtin_strchr (val_3, 58);
  # DEBUG suites => suites_35
  if (suites_35 != 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  *suites_35 = 0;
  suites_36 = suites_35 + 1;
  # DEBUG suites => suites_36

<bb 15>:
  # suites_5 = PHI <suites_16(12), suites_35(13), suites_36(14)>
  # DEBUG suites => suites_5
  # DEBUG s => suites_5
  if (suites_5 == 0B)
    goto <bb 18>;
  else
    goto <bb 16>;

<bb 16>:
  D.47279_102 = MEM[(const char *)suites_5];
  if (D.47279_102 == 0)
    goto <bb 18>;
  else
    goto <bb 17>;

<bb 17>:

<bb 18>:
  # D.47280_103 = PHI <1(15), 1(16), 0(17)>
  D.47278_109 = D.47280_103;
  D.42540_37 = D.47278_109;
  if (D.42540_37 != 0)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.42525_38 = session_21(D)->channel;
  suites_39 = switch_channel_get_variable_dup (D.42525_38, "rtp_secure_media_suites", 1, -1);
  # DEBUG suites => suites_39

<bb 20>:
  # suites_6 = PHI <suites_5(18), suites_39(19)>
  # DEBUG suites => suites_6
  # DEBUG s => val_3
  if (val_3 == 0B)
    goto <bb 23>;
  else
    goto <bb 21>;

<bb 21>:
  D.47283_104 = *val_3;
  if (D.47283_104 == 0)
    goto <bb 23>;
  else
    goto <bb 22>;

<bb 22>:

<bb 23>:
  # D.47284_105 = PHI <1(20), 1(21), 0(22)>
  D.47282_110 = D.47284_105;
  D.42543_40 = D.47282_110;
  if (D.42543_40 != 0)
    goto <bb 24>;
  else
    goto <bb 28>;

<bb 24>:
  D.42525_41 = session_21(D)->channel;
  D.42548_42 = switch_channel_direction (D.42525_41);
  if (D.42548_42 == 0)
    goto <bb 25>;
  else
    goto <bb 27>;

<bb 25>:
  D.42525_43 = session_21(D)->channel;
  D.42550_44 = switch_channel_test_flag (D.42525_43, 84);
  if (D.42550_44 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  val_45 = "optional";
  # DEBUG val => val_45
  goto <bb 28>;

<bb 27>:
  val_46 = "forbidden";
  # DEBUG val => val_46

<bb 28>:
  # val_4 = PHI <val_3(23), val_45(26), val_46(27)>
  # DEBUG val => val_4
  D.42552_47 = strcasecmp (val_4, "optional");
  if (D.42552_47 == 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  smh_22->crypto_mode = 0;
  goto <bb 36>;

<bb 30>:
  D.42559_48 = switch_true (val_4);
  if (D.42559_48 != 0)
    goto <bb 32>;
  else
    goto <bb 31>;

<bb 31>:
  D.42561_49 = strcasecmp (val_4, "mandatory");
  if (D.42561_49 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;

<bb 32>:
  smh_22->crypto_mode = 1;
  goto <bb 36>;

<bb 33>:
  smh_22->crypto_mode = 2;
  D.42562_50 = switch_false (val_4);
  if (D.42562_50 == 0)
    goto <bb 34>;
  else
    goto <bb 36>;

<bb 34>:
  D.42565_51 = strcasecmp (val_4, "forbidden");
  if (D.42565_51 != 0)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1123, session_21(D), 4, "INVALID VALUE FOR %s defaulting to \'forbidden\'\n", var_2);

<bb 36>:
  D.42569_52 = smh_22->crypto_mode;
  if (D.42569_52 != 2)
    goto <bb 37>;
  else
    goto <bb 51>;

<bb 37>:
  # DEBUG s => suites_6
  if (suites_6 == 0B)
    goto <bb 40>;
  else
    goto <bb 38>;

<bb 38>:
  D.47287_106 = MEM[(const char *)suites_6];
  if (D.47287_106 == 0)
    goto <bb 40>;
  else
    goto <bb 39>;

<bb 39>:

<bb 40>:
  # D.47288_107 = PHI <1(37), 1(38), 0(39)>
  D.47286_111 = D.47288_107;
  D.42571_53 = D.47286_111;
  if (D.42571_53 == 0)
    goto <bb 41>;
  else
    goto <bb 51>;

<bb 41>:
  D.42573_54 = switch_separate_string (suites_6, 58, &fields, 10);
  argc_55 = (int) D.42573_54;
  # DEBUG argc => argc_55
  i_56 = 0;
  # DEBUG i => i_56
  goto <bb 50>;

<bb 42>:
  ok_57 = 0;
  # DEBUG ok => ok_57
  j_58 = 0;
  # DEBUG j => j_58
  goto <bb 46>;

<bb 43>:
  D.42574_59 = fields[i_7];
  D.42575_60 = SUITES[j_9].name;
  D.42576_61 = strcasecmp (D.42574_59, D.42575_60);
  if (D.42576_61 == 0)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  D.42579_62 = SUITES[j_9].type;
  smh_22->crypto_suite_order[k_11] = D.42579_62;
  k_63 = k_11 + 1;
  # DEBUG k => k_63
  ok_64 = ok_57 + 1;
  # DEBUG ok => ok_64
  goto <bb 47>;

<bb 45>:
  j_65 = j_9 + 1;
  # DEBUG j => j_65

<bb 46>:
  # j_9 = PHI <j_58(42), j_65(45)>
  # DEBUG j => j_9
  if (j_9 <= 8)
    goto <bb 43>;
  else
    goto <bb 47>;

<bb 47>:
  # k_10 = PHI <k_63(44), k_11(46)>
  # ok_13 = PHI <ok_64(44), ok_57(46)>
  # DEBUG ok => ok_13
  # DEBUG k => k_10
  if (ok_13 == 0)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1142, session_21(D), 4, "INVALID SUITE SUPPLIED\n");

<bb 49>:
  i_66 = i_7 + 1;
  # DEBUG i => i_66

<bb 50>:
  # i_7 = PHI <i_56(41), i_66(49)>
  # k_11 = PHI <k_20(41), k_10(49)>
  # DEBUG k => k_11
  # DEBUG i => i_7
  if (i_7 < argc_55)
    goto <bb 42>;
  else
    goto <bb 54>;

<bb 51>:
  i_67 = 0;
  # DEBUG i => i_67
  goto <bb 53>;

<bb 52>:
  D.42582_68 = SUITES[i_8].type;
  smh_22->crypto_suite_order[k_12] = D.42582_68;
  k_69 = k_12 + 1;
  # DEBUG k => k_69
  i_70 = i_8 + 1;
  # DEBUG i => i_70

<bb 53>:
  # i_8 = PHI <i_67(51), i_70(52)>
  # k_12 = PHI <k_20(51), k_69(52)>
  # DEBUG k => k_12
  # DEBUG i => i_8
  if (i_8 <= 8)
    goto <bb 52>;
  else
    goto <bb 54>;

<bb 54>:
  return;

}



;; Function gen_ice (gen_ice)

Considering inline candidate _zstr.
 Inlining _zstr into gen_ice.
Processing frequency _zstr
  Called by gen_ice that is normal or hot
Inlining _zstr to gen_ice with frequency 1000
Iterations: 1
Merging blocks 19 and 26
Merging blocks 29 and 25


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement tmp = "";



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4608, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.42929_7 = engine_6->rtcp_mux;



Registering new PHI nodes in block #6

Updating SSA information for statement engine_6->rtcp_mux = 1;



Registering new PHI nodes in block #7

Updating SSA information for statement D.42932_8 = smh_2->msid;



Registering new PHI nodes in block #8

Updating SSA information for statement switch_stun_random_string (&tmp, 32, 0B);

Updating SSA information for statement tmp[32] = 0;

Updating SSA information for statement D.42935_9 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4625);

Updating SSA information for statement smh_2->msid = D.42935_9;



Registering new PHI nodes in block #9

Updating SSA information for statement D.42936_10 = smh_2->cname;



Registering new PHI nodes in block #10

Updating SSA information for statement switch_stun_random_string (&tmp, 16, 0B);

Updating SSA information for statement tmp[16] = 0;

Updating SSA information for statement D.42939_11 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4631);

Updating SSA information for statement smh_2->cname = D.42939_11;



Registering new PHI nodes in block #11

Updating SSA information for statement D.42940_12 = engine_6->ice_out.ufrag;



Registering new PHI nodes in block #12

Updating SSA information for statement switch_stun_random_string (&tmp, 16, 0B);

Updating SSA information for statement tmp[16] = 0;

Updating SSA information for statement D.42943_13 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4637);

Updating SSA information for statement engine_6->ice_out.ufrag = D.42943_13;



Registering new PHI nodes in block #13

Updating SSA information for statement D.42944_14 = engine_6->ice_out.pwd;



Registering new PHI nodes in block #14

Updating SSA information for statement switch_stun_random_string (&tmp, 16, 0B);

Updating SSA information for statement D.42947_15 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4642);

Updating SSA information for statement engine_6->ice_out.pwd = D.42947_15;



Registering new PHI nodes in block #15

Updating SSA information for statement D.42948_16 = engine_6->ice_out.cands[0][0].foundation;



Registering new PHI nodes in block #16

Updating SSA information for statement switch_stun_random_string (&tmp, 10, "0123456789");

Updating SSA information for statement tmp[10] = 0;

Updating SSA information for statement D.42951_17 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4648);

Updating SSA information for statement engine_6->ice_out.cands[0][0].foundation = D.42951_17;



Registering new PHI nodes in block #17

Updating SSA information for statement engine_6->ice_out.cands[0][0].transport = "udp";

Updating SSA information for statement D.42952_18 = engine_6->ice_out.cands[0][0].component_id;



Registering new PHI nodes in block #18

Updating SSA information for statement engine_6->ice_out.cands[0][0].component_id = 1;

Updating SSA information for statement D.42952_19 = engine_6->ice_out.cands[0][0].component_id;

Updating SSA information for statement engine_6->ice_out.cands[0][0].priority = D.42957_22;



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20

Updating SSA information for statement D.47292_66 = *ip_23(D);



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22

Updating SSA information for statement D.47291 = D.47293_67;

Updating SSA information for statement D.42958_24 = D.47291;



Registering new PHI nodes in block #23

Updating SSA information for statement D.42961_25 = switch_core_perform_session_strdup (session_1(D), ip_23(D), "src/switch_core_media.c", &__func__, 4659);

Updating SSA information for statement engine_6->ice_out.cands[0][0].con_addr = D.42961_25;



Registering new PHI nodes in block #24



Registering new PHI nodes in block #25

Updating SSA information for statement engine_6->ice_out.cands[0][0].con_port = port_26(D);



Registering new PHI nodes in block #26

Updating SSA information for statement engine_6->ice_out.cands[0][0].generation = "0";

Updating SSA information for statement engine_6->ice_out.cands[0][0].ready = 1;



Registering new PHI nodes in block #27



Symbols to be put in SSA form

{ .MEM D.47291 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 28
Number of blocks to update: 27 ( 96%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  char tmp[33];
  static const char __PRETTY_FUNCTION__[8] = "gen_ice";
  static const char __func__[8] = "gen_ice";

  { Scope block #23 src/switch_core_media.c:4658 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #24 Originating from :#0 

    }

  }

}
gen_ice (struct switch_core_session_t * session, switch_media_type_t type, const char * ip, switch_port_t port)
{
  int D.47293;
  const char D.47292;
  int D.47291;
  static const char __func__[8] = "gen_ice";
  static const char __PRETTY_FUNCTION__[8] = "gen_ice";
  char tmp[33];
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  char * D.42961;
  int D.42958;
  uint32_t D.42957;
  int D.42956;
  int D.42955;
  int D.42952;
  char * D.42951;
  char * D.42948;
  char * D.42947;
  char * D.42944;
  char * D.42943;
  char * D.42940;
  char * D.42939;
  char * D.42936;
  char * D.42935;
  char * D.42932;
  int8_t D.42929;
  unsigned int D.42928;
  struct switch_rtp_engine_t[2] * D.42927;

<bb 2>:
  tmp = "";
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4608, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 27>;
  else
    goto <bb 5>;

<bb 5>:
  D.42927_3 = &smh_2->engines;
  D.42928_5 = type_4(D) * 11416;
  engine_6 = D.42927_3 + D.42928_5;
  # DEBUG engine => engine_6
  D.42929_7 = engine_6->rtcp_mux;
  if (D.42929_7 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  engine_6->rtcp_mux = 1;

<bb 7>:
  D.42932_8 = smh_2->msid;
  if (D.42932_8 == 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  switch_stun_random_string (&tmp, 32, 0B);
  tmp[32] = 0;
  D.42935_9 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4625);
  smh_2->msid = D.42935_9;

<bb 9>:
  D.42936_10 = smh_2->cname;
  if (D.42936_10 == 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  switch_stun_random_string (&tmp, 16, 0B);
  tmp[16] = 0;
  D.42939_11 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4631);
  smh_2->cname = D.42939_11;

<bb 11>:
  D.42940_12 = engine_6->ice_out.ufrag;
  if (D.42940_12 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  switch_stun_random_string (&tmp, 16, 0B);
  tmp[16] = 0;
  D.42943_13 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4637);
  engine_6->ice_out.ufrag = D.42943_13;

<bb 13>:
  D.42944_14 = engine_6->ice_out.pwd;
  if (D.42944_14 == 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  switch_stun_random_string (&tmp, 16, 0B);
  D.42947_15 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4642);
  engine_6->ice_out.pwd = D.42947_15;

<bb 15>:
  D.42948_16 = engine_6->ice_out.cands[0][0].foundation;
  if (D.42948_16 == 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  switch_stun_random_string (&tmp, 10, "0123456789");
  tmp[10] = 0;
  D.42951_17 = switch_core_perform_session_strdup (session_1(D), &tmp, "src/switch_core_media.c", &__func__, 4648);
  engine_6->ice_out.cands[0][0].foundation = D.42951_17;

<bb 17>:
  engine_6->ice_out.cands[0][0].transport = "udp";
  D.42952_18 = engine_6->ice_out.cands[0][0].component_id;
  if (D.42952_18 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  engine_6->ice_out.cands[0][0].component_id = 1;
  D.42952_19 = engine_6->ice_out.cands[0][0].component_id;
  D.42955_20 = 329569 - D.42952_19;
  D.42956_21 = D.42955_20 * 2;
  D.42957_22 = (uint32_t) D.42956_21;
  engine_6->ice_out.cands[0][0].priority = D.42957_22;

<bb 19>:
  # DEBUG s => ip_23(D)
  if (ip_23(D) == 0B)
    goto <bb 22>;
  else
    goto <bb 20>;

<bb 20>:
  D.47292_66 = *ip_23(D);
  if (D.47292_66 == 0)
    goto <bb 22>;
  else
    goto <bb 21>;

<bb 21>:

<bb 22>:
  # D.47293_67 = PHI <1(19), 1(20), 0(21)>
  D.47291_68 = D.47293_67;
  D.42958_24 = D.47291_68;
  if (D.42958_24 == 0)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  D.42961_25 = switch_core_perform_session_strdup (session_1(D), ip_23(D), "src/switch_core_media.c", &__func__, 4659);
  engine_6->ice_out.cands[0][0].con_addr = D.42961_25;

<bb 24>:
  if (port_26(D) != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  engine_6->ice_out.cands[0][0].con_port = port_26(D);

<bb 26>:
  engine_6->ice_out.cands[0][0].generation = "0";
  engine_6->ice_out.cands[0][0].ready = 1;

<bb 27>:
  return;

}



;; Function get_channels (get_channels)

Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Iterations: 0
get_channels (const char * name, int dft)
{
  int iftmp.43;
  int D.42985;
  int D.42982;
  int D.42979;
  char * D.42978;

<bb 2>:
  D.42978_3 = switch_core_get_variable ("NDLB_broken_opus_sdp");
  D.42979_4 = switch_true (D.42978_3);
  if (D.42979_4 == 0)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 3>:
  D.42982_6 = strcasecmp (name_5(D), "opus");
  if (D.42982_6 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.42985_7 = 2;
  goto <bb 9>;

<bb 5>:
  if (dft_8(D) != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  iftmp.43_9 = dft_8(D);
  goto <bb 8>;

<bb 7>:
  iftmp.43_10 = 1;

<bb 8>:
  # iftmp.43_2 = PHI <iftmp.43_9(6), iftmp.43_10(7)>
  D.42985_11 = iftmp.43_2;

<bb 9>:
  # D.42985_1 = PHI <D.42985_7(4), D.42985_11(8)>
  return D.42985_1;

}



;; Function generate_local_fingerprint (generate_local_fingerprint)

Iterations: 0
generate_local_fingerprint (struct switch_media_handle_t * smh, switch_media_type_t type)
{
  struct switch_rtp_engine_t * engine;
  struct dtls_fingerprint_t * D.43000;
  char * D.42996;
  uint32_t D.42993;
  unsigned int D.42992;
  struct switch_rtp_engine_t[2] * D.42991;

<bb 2>:
  D.42991_2 = &smh_1(D)->engines;
  D.42992_4 = type_3(D) * 11416;
  engine_5 = D.42991_2 + D.42992_4;
  # DEBUG engine => engine_5
  D.42993_6 = engine_5->local_dtls_fingerprint.len;
  if (D.42993_6 == 0)
    goto <bb 3>;
  else
    goto <bb 7>;

<bb 3>:
  D.42996_7 = engine_5->remote_dtls_fingerprint.type;
  if (D.42996_7 != 0B)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.42996_8 = engine_5->remote_dtls_fingerprint.type;
  engine_5->local_dtls_fingerprint.type = D.42996_8;
  goto <bb 6>;

<bb 5>:
  engine_5->local_dtls_fingerprint.type = "sha-256";

<bb 6>:
  D.43000_9 = &engine_5->local_dtls_fingerprint;
  switch_core_cert_gen_fingerprint ("dtls-srtp", D.43000_9);

<bb 7>:
  return;

}



;; Function start_video_thread (start_video_thread)

Iterations: 0
start_video_thread (struct switch_core_session_t * session)
{
  static const char __func__[19] = "start_video_thread";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_memory_pool_t * pool;
  struct switch_threadattr_t * thd_attr;
  struct switch_memory_pool_t * D.43812;
  struct media_helper * D.43811;
  struct switch_thread_t * * D.43810;
  struct switch_mutex_t * * D.43809;
  struct switch_mutex_t * * D.43808;
  struct switch_thread_cond_t * * D.43807;
  struct switch_threadattr_t * thd_attr.69;
  switch_payload_t D.43805;
  struct payload_map_t * D.43804;
  struct switch_rtp_t * D.43803;
  char * D.43802;
  struct switch_channel_t * D.43801;
  struct switch_thread_t * D.43798;
  switch_status_t D.43797;

<bb 2>:
  thd_attr = 0B;
  pool_3 = switch_core_session_get_pool (session_2(D));
  # DEBUG pool => pool_3
  v_engine_4 = 0B;
  # DEBUG v_engine => v_engine_4
  smh_5 = session_2(D)->media_handle;
  # DEBUG smh => smh_5
  if (smh_5 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.43797_6 = 1;
  goto <bb 7>;

<bb 4>:
  v_engine_7 = &smh_5->engines[1];
  # DEBUG v_engine => v_engine_7
  D.43798_8 = v_engine_7->media_thread;
  if (D.43798_8 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.43797_9 = 1;
  goto <bb 7>;

<bb 6>:
  D.43801_10 = switch_core_session_get_channel (session_2(D));
  D.43802_11 = switch_channel_get_name (D.43801_10);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4120, session_2(D), 5, "%s Starting Video thread\n", D.43802_11);
  D.43803_12 = v_engine_7->rtp_session;
  D.43804_13 = v_engine_7->cur_payload_map;
  D.43805_14 = D.43804_13->agreed_pt;
  switch_rtp_set_default_payload (D.43803_12, D.43805_14);
  v_engine_7->mh.session = session_2(D);
  switch_threadattr_create (&thd_attr, pool_3);
  thd_attr.69_15 = thd_attr;
  switch_threadattr_stacksize_set (thd_attr.69_15, 245760);
  D.43807_16 = &v_engine_7->mh.cond;
  switch_thread_cond_create (D.43807_16, pool_3);
  D.43808_17 = &v_engine_7->mh.cond_mutex;
  switch_mutex_init (D.43808_17, 1, pool_3);
  D.43809_18 = &v_engine_7->read_mutex[1];
  switch_mutex_init (D.43809_18, 1, pool_3);
  D.43810_19 = &v_engine_7->media_thread;
  thd_attr.69_20 = thd_attr;
  D.43811_21 = &v_engine_7->mh;
  D.43812_22 = switch_core_session_get_pool (session_2(D));
  switch_thread_create (D.43810_19, thd_attr.69_20, video_helper_thread, D.43811_21, D.43812_22);
  D.43797_23 = 0;

<bb 7>:
  # D.43797_1 = PHI <D.43797_6(3), D.43797_9(5), D.43797_23(6)>
  return D.43797_1;

}



;; Function video_helper_thread (video_helper_thread)

Iterations: 0
video_helper_thread (struct switch_thread_t * thread, void * obj)
{
  static const char __func__[20] = "video_helper_thread";
  struct switch_media_handle_t * smh;
  struct switch_frame_t * read_frame;
  switch_status_t status;
  struct switch_channel_t * channel;
  struct switch_core_session_t * session;
  struct media_helper * mh;
  char * D.43871;
  switch_channel_state_t D.43870;
  uint32_t D.43867;
  _Bool D.43864;
  int D.43863;
  int D.43862;
  switch_frame_flag_t D.43861;
  struct switch_frame_t * read_frame.73;
  uint32_t D.43857;
  _Bool D.43852;
  _Bool D.43851;
  _Bool D.43850;
  uint32_t D.43847;
  uint32_t D.43844;
  uint32_t D.43841;
  uint32_t D.43837;
  char * iftmp.72;
  char * D.43835;
  struct switch_thread_cond_t * D.43834;
  uint32_t D.43830;
  char * iftmp.71;
  char * D.43828;
  uint32_t D.43825;
  uint32_t D.43821;
  char * iftmp.70;
  char * D.43819;
  struct switch_channel_t * D.43818;
  struct switch_mutex_t * D.43817;
  void * D.43816;

<bb 2>:
  mh_6 = obj_5(D);
  # DEBUG mh => mh_6
  session_7 = mh_6->session;
  # DEBUG session => session_7
  channel_8 = switch_core_session_get_channel (session_7);
  # DEBUG channel => channel_8
  smh_9 = session_7->media_handle;
  # DEBUG smh => smh_9
  if (smh_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.43816_10 = 0B;
  goto <bb 32>;

<bb 4>:
  switch_core_session_read_lock (session_7);
  mh_6->up = 1;
  D.43817_11 = mh_6->cond_mutex;
  switch_mutex_lock (D.43817_11);
  D.43818_12 = session_7->channel;
  D.43819_13 = switch_channel_get_name (D.43818_12);
  D.43821_14 = switch_channel_test_flag (channel_8, 115);
  if (D.43821_14 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  iftmp.70_15 = "on";
  goto <bb 7>;

<bb 6>:
  iftmp.70_16 = "off";

<bb 7>:
  # iftmp.70_2 = PHI <iftmp.70_15(5), iftmp.70_16(6)>
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4044, 0B, 7, "%s Video thread started. Echo is %s\n", D.43819_13, iftmp.70_2);
  switch_core_session_refresh_video (session_7);
  goto <bb 30>;

<bb 8>:
  D.43825_18 = switch_channel_test_flag (channel_8, 113);
  if (D.43825_18 != 0)
    goto <bb 9>;
  else
    goto <bb 16>;

<bb 9>:
  D.43818_19 = session_7->channel;
  D.43828_20 = switch_channel_get_name (D.43818_19);
  D.43830_21 = switch_channel_test_flag (channel_8, 115);
  if (D.43830_21 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  iftmp.71_22 = "on";
  goto <bb 12>;

<bb 11>:
  iftmp.71_23 = "off";

<bb 12>:
  # iftmp.71_3 = PHI <iftmp.71_22(10), iftmp.71_23(11)>
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4051, 0B, 7, "%s Video thread paused. Echo is %s\n", D.43828_20, iftmp.71_3);
  D.43834_24 = mh_6->cond;
  D.43817_25 = mh_6->cond_mutex;
  switch_thread_cond_wait (D.43834_24, D.43817_25);
  D.43818_26 = session_7->channel;
  D.43835_27 = switch_channel_get_name (D.43818_26);
  D.43837_28 = switch_channel_test_flag (channel_8, 115);
  if (D.43837_28 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  iftmp.72_29 = "on";
  goto <bb 15>;

<bb 14>:
  iftmp.72_30 = "off";

<bb 15>:
  # iftmp.72_4 = PHI <iftmp.72_29(13), iftmp.72_30(14)>
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4054, 0B, 7, "%s Video thread resumed  Echo is %s\n", D.43835_27, iftmp.72_4);
  switch_core_session_refresh_video (session_7);

<bb 16>:
  D.43841_31 = switch_channel_test_flag (channel_8, 113);
  if (D.43841_31 != 0)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  // predicted unlikely by continue predictor.
  goto <bb 30>;

<bb 18>:
  D.43818_32 = session_7->channel;
  D.43844_33 = switch_channel_test_flag (D.43818_32, 1);
  if (D.43844_33 == 0)
    goto <bb 19>;
  else
    goto <bb 21>;

<bb 19>:
  D.43818_34 = session_7->channel;
  D.43847_35 = switch_channel_test_flag (D.43818_34, 3);
  if (D.43847_35 == 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  switch_sleep (10000);
  // predicted unlikely by continue predictor.
  goto <bb 30>;

<bb 21>:
  status_36 = switch_core_session_read_video_frame (session_7, &read_frame, 0, 0);
  # DEBUG status => status_36
  D.43850_37 = status_36 != 0;
  D.43851_38 = status_36 != 11;
  D.43852_39 = D.43850_37 && D.43851_38;
  if (D.43852_39 != 0)
    goto <bb 22>;
  else
    goto <bb 24>;

<bb 22>:
  if (status_36 != 10)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  switch_cond_next ();
  // predicted unlikely by continue predictor.
  goto <bb 30>;

<bb 24>:
  D.43857_40 = switch_channel_test_flag (channel_8, 70);
  if (D.43857_40 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  switch_core_session_refresh_video (session_7);
  switch_channel_clear_flag (channel_8, 70);

<bb 26>:
  read_frame.73_41 = read_frame;
  D.43861_42 = read_frame.73_41->flags;
  D.43862_43 = (int) D.43861_42;
  D.43863_44 = D.43862_43 & 1;
  D.43864_45 = (_Bool) D.43863_44;
  if (D.43864_45 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  // predicted unlikely by continue predictor.
  goto <bb 30>;

<bb 28>:
  D.43867_46 = switch_channel_test_flag (channel_8, 115);
  if (D.43867_46 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  read_frame.73_47 = read_frame;
  switch_core_session_write_video_frame (session_7, read_frame.73_47, 0, 0);

<bb 30>:
  D.43870_17 = switch_channel_get_state (channel_8);
  if (D.43870_17 <= 9)
    goto <bb 8>;
  else
    goto <bb 31>;

<bb 31>:
  D.43818_48 = session_7->channel;
  D.43871_49 = switch_channel_get_name (D.43818_48);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4093, 0B, 7, "%s Video thread ended\n", D.43871_49);
  D.43817_50 = mh_6->cond_mutex;
  switch_mutex_unlock (D.43817_50);
  switch_core_session_rwunlock (session_7);
  mh_6->up = 0;
  D.43816_51 = 0B;

<bb 32>:
  # D.43816_1 = PHI <D.43816_10(3), D.43816_51(31)>
  return D.43816_1;

}



;; Function switch_core_media_process_udptl (switch_core_media_process_udptl)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_process_udptl.
Processing frequency atoi
  Called by switch_core_media_process_udptl that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_process_udptl.
Processing frequency atoi
  Called by switch_core_media_process_udptl that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_process_udptl.
Processing frequency atoi
  Called by switch_core_media_process_udptl that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_process_udptl.
Processing frequency atoi
  Called by switch_core_media_process_udptl that is normal or hot
Considering inline candidate switch_safe_atoi.
 Inlining switch_safe_atoi into switch_core_media_process_udptl.
Processing frequency switch_safe_atoi
  Called by switch_core_media_process_udptl that is normal or hot
Considering inline candidate switch_safe_atoi.
 Inlining switch_safe_atoi into switch_core_media_process_udptl.
Processing frequency switch_safe_atoi
  Called by switch_core_media_process_udptl that is normal or hot
Considering inline candidate switch_safe_atoi.
 Inlining switch_safe_atoi into switch_core_media_process_udptl.
Processing frequency switch_safe_atoi
  Called by switch_core_media_process_udptl that is normal or hot
Inlining atoi to switch_core_media_process_udptl with frequency 1000
Inlining atoi to switch_core_media_process_udptl with frequency 1000
Inlining switch_safe_atoi to switch_core_media_process_udptl with frequency 1000
Inlining switch_safe_atoi to switch_core_media_process_udptl with frequency 1000
Inlining switch_safe_atoi to switch_core_media_process_udptl with frequency 1000
Inlining atoi to switch_core_media_process_udptl with frequency 1000
Inlining atoi to switch_core_media_process_udptl with frequency 1000
Iterations: 1
Merging blocks 17 and 46
Merging blocks 20 and 48
Merging blocks 22 and 50
Merging blocks 24 and 54
Merging blocks 26 and 58
Merging blocks 32 and 62
Merging blocks 35 and 64
Merging blocks 52 and 49
Merging blocks 56 and 53
Merging blocks 60 and 57
Merging blocks 17 and 45
Merging blocks 20 and 47
Merging blocks 32 and 61
Merging blocks 35 and 63


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.45322_4 = session_3(D)->channel;

Updating SSA information for statement t38_options_5 = switch_channel_get_private (D.45322_4, "t38_options");



Registering new PHI nodes in block #3

Updating SSA information for statement t38_options_6 = switch_core_perform_session_alloc (session_3(D), 60, "src/switch_core_media.c", &__func__, 369);

Updating SSA information for statement t38_options_6->T38FaxVersion = 0;

Updating SSA information for statement t38_options_6->T38MaxBitRate = 14400;

Updating SSA information for statement D.45325_7 = switch_core_perform_session_strdup (session_3(D), "transferredTCF", "src/switch_core_media.c", &__func__, 374);

Updating SSA information for statement t38_options_6->T38FaxRateManagement = D.45325_7;

Updating SSA information for statement D.45326_8 = switch_core_perform_session_strdup (session_3(D), "t38UDPRedundancy", "src/switch_core_media.c", &__func__, 375);

Updating SSA information for statement t38_options_6->T38FaxUdpEC = D.45326_8;

Updating SSA information for statement t38_options_6->T38FaxMaxBuffer = 500;

Updating SSA information for statement t38_options_6->T38FaxMaxDatagram = 500;



Registering new PHI nodes in block #4

Updating SSA information for statement D.45327_10 = m_9(D)->m_port;

Updating SSA information for statement t38_options_1->remote_port = D.45328_11;

Updating SSA information for statement D.45329_13 = sdp_12(D)->sdp_origin;



Registering new PHI nodes in block #5

Updating SSA information for statement D.45329_14 = sdp_12(D)->sdp_origin;

Updating SSA information for statement D.45332_15 = D.45329_14->o_username;

Updating SSA information for statement D.45333_16 = switch_core_perform_session_strdup (session_3(D), D.45332_15, "src/switch_core_media.c", &__func__, 383);

Updating SSA information for statement t38_options_1->sdp_o_line = D.45333_16;



Registering new PHI nodes in block #6

Updating SSA information for statement t38_options_1->sdp_o_line = "unknown";



Registering new PHI nodes in block #7

Updating SSA information for statement D.45337_17 = m_9(D)->m_connections;



Registering new PHI nodes in block #8

Updating SSA information for statement D.45337_18 = m_9(D)->m_connections;

Updating SSA information for statement D.45339_19 = D.45337_18->c_address;



Registering new PHI nodes in block #9

Updating SSA information for statement D.45337_20 = m_9(D)->m_connections;

Updating SSA information for statement D.45339_21 = D.45337_20->c_address;

Updating SSA information for statement D.45341_22 = switch_core_perform_session_strdup (session_3(D), D.45339_21, "src/switch_core_media.c", &__func__, 389);

Updating SSA information for statement t38_options_1->remote_ip = D.45341_22;



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11

Updating SSA information for statement D.45344_23 = sdp_12(D)->sdp_connection;



Registering new PHI nodes in block #12

Updating SSA information for statement D.45344_24 = sdp_12(D)->sdp_connection;

Updating SSA information for statement D.45347_25 = D.45344_24->c_address;



Registering new PHI nodes in block #13

Updating SSA information for statement D.45344_26 = sdp_12(D)->sdp_connection;

Updating SSA information for statement D.45347_27 = D.45344_26->c_address;

Updating SSA information for statement D.45350_28 = switch_core_perform_session_strdup (session_3(D), D.45347_27, "src/switch_core_media.c", &__func__, 391);

Updating SSA information for statement t38_options_1->remote_ip = D.45350_28;



Registering new PHI nodes in block #14

Updating SSA information for statement attr_29 = m_9(D)->m_attributes;



Registering new PHI nodes in block #49



Registering new PHI nodes in block #15

Updating SSA information for statement D.45353_30 = attr_2->a_name;

Updating SSA information for statement D.45354_31 = strcasecmp (D.45353_30, "T38FaxVersion");



Registering new PHI nodes in block #16

Updating SSA information for statement D.45356_32 = attr_2->a_value;



Registering new PHI nodes in block #17

Updating SSA information for statement D.45356_33 = attr_2->a_value;

Updating SSA information for statement D.47301_136 = strtol (D.45356_33, 0B, 10);

Updating SSA information for statement D.47300 = D.47301_136;

Updating SSA information for statement D.45358_34 = D.47300;

Updating SSA information for statement t38_options_1->T38FaxVersion = D.45359_35;



Registering new PHI nodes in block #18

Updating SSA information for statement D.45353_36 = attr_2->a_name;

Updating SSA information for statement D.45362_37 = strcasecmp (D.45353_36, "T38MaxBitRate");



Registering new PHI nodes in block #19

Updating SSA information for statement D.45356_38 = attr_2->a_value;



Registering new PHI nodes in block #20

Updating SSA information for statement D.45356_39 = attr_2->a_value;

Updating SSA information for statement D.47304_137 = strtol (D.45356_39, 0B, 10);

Updating SSA information for statement D.47303 = D.47304_137;

Updating SSA information for statement D.45365_40 = D.47303;

Updating SSA information for statement t38_options_1->T38MaxBitRate = D.45366_41;



Registering new PHI nodes in block #21

Updating SSA information for statement D.45353_42 = attr_2->a_name;

Updating SSA information for statement D.45367_43 = strcasecmp (D.45353_42, "T38FaxFillBitRemoval");



Registering new PHI nodes in block #22

Updating SSA information for statement D.45356_44 = attr_2->a_value;



Registering new PHI nodes in block #23

Updating SSA information for statement dft_138 = strtol (D.45356_44, 0B, 10);



Registering new PHI nodes in block #24

Updating SSA information for statement D.47307 = dft_139;

Updating SSA information for statement D.45370_45 = D.47307;

Updating SSA information for statement t38_options_1->T38FaxFillBitRemoval = D.45371_46;



Registering new PHI nodes in block #25

Updating SSA information for statement D.45353_47 = attr_2->a_name;

Updating SSA information for statement D.45373_48 = strcasecmp (D.45353_47, "T38FaxTranscodingMMR");



Registering new PHI nodes in block #26

Updating SSA information for statement D.45356_49 = attr_2->a_value;



Registering new PHI nodes in block #27

Updating SSA information for statement dft_140 = strtol (D.45356_49, 0B, 10);



Registering new PHI nodes in block #28

Updating SSA information for statement D.47310 = dft_141;

Updating SSA information for statement D.45376_50 = D.47310;

Updating SSA information for statement t38_options_1->T38FaxTranscodingMMR = D.45377_51;



Registering new PHI nodes in block #29

Updating SSA information for statement D.45353_52 = attr_2->a_name;

Updating SSA information for statement D.45379_53 = strcasecmp (D.45353_52, "T38FaxTranscodingJBIG");



Registering new PHI nodes in block #30

Updating SSA information for statement D.45356_54 = attr_2->a_value;



Registering new PHI nodes in block #31

Updating SSA information for statement dft_142 = strtol (D.45356_54, 0B, 10);



Registering new PHI nodes in block #32

Updating SSA information for statement D.47313 = dft_143;

Updating SSA information for statement D.45382_55 = D.47313;

Updating SSA information for statement t38_options_1->T38FaxTranscodingJBIG = D.45383_56;



Registering new PHI nodes in block #33

Updating SSA information for statement D.45353_57 = attr_2->a_name;

Updating SSA information for statement D.45387_58 = strcasecmp (D.45353_57, "T38FaxRateManagement");



Registering new PHI nodes in block #34

Updating SSA information for statement D.45356_59 = attr_2->a_value;



Registering new PHI nodes in block #35

Updating SSA information for statement D.45356_60 = attr_2->a_value;

Updating SSA information for statement D.45390_61 = switch_core_perform_session_strdup (session_3(D), D.45356_60, "src/switch_core_media.c", &__func__, 406);

Updating SSA information for statement t38_options_1->T38FaxRateManagement = D.45390_61;



Registering new PHI nodes in block #36

Updating SSA information for statement D.45353_62 = attr_2->a_name;

Updating SSA information for statement D.45393_63 = strcasecmp (D.45353_62, "T38FaxMaxBuffer");



Registering new PHI nodes in block #37

Updating SSA information for statement D.45356_64 = attr_2->a_value;



Registering new PHI nodes in block #38

Updating SSA information for statement D.45356_65 = attr_2->a_value;

Updating SSA information for statement D.47316_144 = strtol (D.45356_65, 0B, 10);

Updating SSA information for statement D.47315 = D.47316_144;

Updating SSA information for statement D.45396_66 = D.47315;

Updating SSA information for statement t38_options_1->T38FaxMaxBuffer = D.45397_67;



Registering new PHI nodes in block #39

Updating SSA information for statement D.45353_68 = attr_2->a_name;

Updating SSA information for statement D.45400_69 = strcasecmp (D.45353_68, "T38FaxMaxDatagram");



Registering new PHI nodes in block #40

Updating SSA information for statement D.45356_70 = attr_2->a_value;



Registering new PHI nodes in block #41

Updating SSA information for statement D.45356_71 = attr_2->a_value;

Updating SSA information for statement D.47319_145 = strtol (D.45356_71, 0B, 10);

Updating SSA information for statement D.47318 = D.47319_145;

Updating SSA information for statement D.45403_72 = D.47318;

Updating SSA information for statement t38_options_1->T38FaxMaxDatagram = D.45404_73;



Registering new PHI nodes in block #42

Updating SSA information for statement D.45353_74 = attr_2->a_name;

Updating SSA information for statement D.45407_75 = strcasecmp (D.45353_74, "T38FaxUdpEC");



Registering new PHI nodes in block #43

Updating SSA information for statement D.45356_76 = attr_2->a_value;



Registering new PHI nodes in block #44

Updating SSA information for statement D.45356_77 = attr_2->a_value;

Updating SSA information for statement D.45410_78 = switch_core_perform_session_strdup (session_3(D), D.45356_77, "src/switch_core_media.c", &__func__, 412);

Updating SSA information for statement t38_options_1->T38FaxUdpEC = D.45410_78;



Registering new PHI nodes in block #45

Updating SSA information for statement D.45353_79 = attr_2->a_name;

Updating SSA information for statement D.45411_80 = strcasecmp (D.45353_79, "T38VendorInfo");



Registering new PHI nodes in block #46

Updating SSA information for statement D.45356_81 = attr_2->a_value;



Registering new PHI nodes in block #47

Updating SSA information for statement D.45356_82 = attr_2->a_value;

Updating SSA information for statement D.45416_83 = switch_core_perform_session_strdup (session_3(D), D.45356_82, "src/switch_core_media.c", &__func__, 414);

Updating SSA information for statement t38_options_1->T38VendorInfo = D.45416_83;



Registering new PHI nodes in block #48

Updating SSA information for statement attr_84 = attr_2->a_next;



Registering new PHI nodes in block #50

Updating SSA information for statement D.45322_85 = session_3(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.45322_85, "has_t38", "true", 1);

Updating SSA information for statement D.45322_86 = session_3(D)->channel;

Updating SSA information for statement switch_channel_set_private (D.45322_86, "t38_options", t38_options_1);

Updating SSA information for statement D.45322_87 = session_3(D)->channel;

Updating SSA information for statement switch_channel_set_app_flag_key ("T38", D.45322_87, 2);

Updating SSA information for statement D.45322_88 = session_3(D)->channel;

Updating SSA information for statement switch_channel_execute_on (D.45322_88, "sip_execute_on_image");

Updating SSA information for statement D.45322_89 = session_3(D)->channel;

Updating SSA information for statement switch_channel_api_on (D.45322_89, "sip_api_on_image");



Symbols to be put in SSA form

{ .MEM D.47300 D.47303 D.47307 D.47310 D.47313 D.47315 D.47318 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 51
Number of blocks to update: 50 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_t38_options_t * t38_options;
  struct sdp_attribute_t * attr;
  static const char __func__[32] = "switch_core_media_process_udptl";

  { Scope block #25 src/switch_core_media.c:410 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #26 Originating from :#0 

    }

  }

  { Scope block #27 src/switch_core_media.c:408 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #28 Originating from :#0 

    }

  }

  { Scope block #29 src/switch_core_media.c:404 Originating from :  static int switch_safe_atoi (const char *, int); 
    int dft;
    const char * nptr; (unused)

    { Scope block #30 Originating from :#0 

      { Scope block #31 ./src/include/switch_utils.h:735 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (nonlocalized)

        { Scope block #32 Originating from :#0 

        }

      }

    }

  }

  { Scope block #33 src/switch_core_media.c:402 Originating from :  static int switch_safe_atoi (const char *, int); 
    int dft;
    const char * nptr; (unused)

    { Scope block #34 Originating from :#0 

      { Scope block #35 ./src/include/switch_utils.h:735 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (nonlocalized)

        { Scope block #36 Originating from :#0 

        }

      }

    }

  }

  { Scope block #37 src/switch_core_media.c:400 Originating from :  static int switch_safe_atoi (const char *, int); 
    int dft;
    const char * nptr; (unused)

    { Scope block #38 Originating from :#0 

      { Scope block #39 ./src/include/switch_utils.h:735 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (nonlocalized)

        { Scope block #40 Originating from :#0 

        }

      }

    }

  }

  { Scope block #41 src/switch_core_media.c:398 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #42 Originating from :#0 

    }

  }

  { Scope block #43 src/switch_core_media.c:396 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #44 Originating from :#0 

    }

  }

}
switch_core_media_process_udptl (struct switch_core_session_t * session, struct sdp_session_t * sdp, struct sdp_media_t * m)
{
  int D.47319;
  int D.47318;
  int D.47316;
  int D.47315;
  int D.47313;
  int dft;
  int D.47310;
  int dft;
  int D.47307;
  int dft;
  int D.47304;
  int D.47303;
  int D.47301;
  int D.47300;
  static const char __func__[32] = "switch_core_media_process_udptl";
  struct sdp_attribute_t * attr;
  struct switch_t38_options_t * t38_options;
  struct switch_t38_options_t * D.45417;
  char * D.45416;
  int D.45411;
  char * D.45410;
  int D.45407;
  unsigned int D.45404;
  int D.45403;
  int D.45400;
  unsigned int D.45397;
  int D.45396;
  int D.45393;
  char * D.45390;
  int D.45387;
  switch_bool_t D.45383;
  int D.45382;
  int D.45379;
  switch_bool_t D.45377;
  int D.45376;
  int D.45373;
  switch_bool_t D.45371;
  int D.45370;
  int D.45367;
  unsigned int D.45366;
  int D.45365;
  int D.45362;
  short unsigned int D.45359;
  int D.45358;
  const char * D.45356;
  int D.45354;
  const char * D.45353;
  char * D.45350;
  const char * D.45347;
  struct sdp_connection_t * D.45344;
  char * D.45341;
  const char * D.45339;
  struct sdp_connection_t * D.45337;
  char * D.45333;
  const char * D.45332;
  struct sdp_origin_t * D.45329;
  short unsigned int D.45328;
  long unsigned int D.45327;
  char * D.45326;
  char * D.45325;
  struct switch_channel_t * D.45322;

<bb 2>:
  D.45322_4 = session_3(D)->channel;
  t38_options_5 = switch_channel_get_private (D.45322_4, "t38_options");
  # DEBUG t38_options => t38_options_5
  if (t38_options_5 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  t38_options_6 = switch_core_perform_session_alloc (session_3(D), 60, "src/switch_core_media.c", &__func__, 369);
  # DEBUG t38_options => t38_options_6
  t38_options_6->T38FaxVersion = 0;
  t38_options_6->T38MaxBitRate = 14400;
  D.45325_7 = switch_core_perform_session_strdup (session_3(D), "transferredTCF", "src/switch_core_media.c", &__func__, 374);
  t38_options_6->T38FaxRateManagement = D.45325_7;
  D.45326_8 = switch_core_perform_session_strdup (session_3(D), "t38UDPRedundancy", "src/switch_core_media.c", &__func__, 375);
  t38_options_6->T38FaxUdpEC = D.45326_8;
  t38_options_6->T38FaxMaxBuffer = 500;
  t38_options_6->T38FaxMaxDatagram = 500;

<bb 4>:
  # t38_options_1 = PHI <t38_options_5(2), t38_options_6(3)>
  # DEBUG t38_options => t38_options_1
  D.45327_10 = m_9(D)->m_port;
  D.45328_11 = (short unsigned int) D.45327_10;
  t38_options_1->remote_port = D.45328_11;
  D.45329_13 = sdp_12(D)->sdp_origin;
  if (D.45329_13 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.45329_14 = sdp_12(D)->sdp_origin;
  D.45332_15 = D.45329_14->o_username;
  D.45333_16 = switch_core_perform_session_strdup (session_3(D), D.45332_15, "src/switch_core_media.c", &__func__, 383);
  t38_options_1->sdp_o_line = D.45333_16;
  goto <bb 7>;

<bb 6>:
  t38_options_1->sdp_o_line = "unknown";

<bb 7>:
  D.45337_17 = m_9(D)->m_connections;
  if (D.45337_17 != 0B)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  D.45337_18 = m_9(D)->m_connections;
  D.45339_19 = D.45337_18->c_address;
  if (D.45339_19 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.45337_20 = m_9(D)->m_connections;
  D.45339_21 = D.45337_20->c_address;
  D.45341_22 = switch_core_perform_session_strdup (session_3(D), D.45339_21, "src/switch_core_media.c", &__func__, 389);
  t38_options_1->remote_ip = D.45341_22;
  goto <bb 14>;

<bb 10>:
  if (sdp_12(D) != 0B)
    goto <bb 11>;
  else
    goto <bb 14>;

<bb 11>:
  D.45344_23 = sdp_12(D)->sdp_connection;
  if (D.45344_23 != 0B)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 12>:
  D.45344_24 = sdp_12(D)->sdp_connection;
  D.45347_25 = D.45344_24->c_address;
  if (D.45347_25 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.45344_26 = sdp_12(D)->sdp_connection;
  D.45347_27 = D.45344_26->c_address;
  D.45350_28 = switch_core_perform_session_strdup (session_3(D), D.45347_27, "src/switch_core_media.c", &__func__, 391);
  t38_options_1->remote_ip = D.45350_28;

<bb 14>:
  attr_29 = m_9(D)->m_attributes;
  # DEBUG attr => attr_29
  goto <bb 49>;

<bb 15>:
  D.45353_30 = attr_2->a_name;
  D.45354_31 = strcasecmp (D.45353_30, "T38FaxVersion");
  if (D.45354_31 == 0)
    goto <bb 16>;
  else
    goto <bb 18>;

<bb 16>:
  D.45356_32 = attr_2->a_value;
  if (D.45356_32 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.45356_33 = attr_2->a_value;
  # DEBUG __nptr => D.45356_33
  D.47301_136 = strtol (D.45356_33, 0B, 10);
  D.47300_150 = D.47301_136;
  D.45358_34 = D.47300_150;
  D.45359_35 = (short unsigned int) D.45358_34;
  t38_options_1->T38FaxVersion = D.45359_35;
  goto <bb 48>;

<bb 18>:
  D.45353_36 = attr_2->a_name;
  D.45362_37 = strcasecmp (D.45353_36, "T38MaxBitRate");
  if (D.45362_37 == 0)
    goto <bb 19>;
  else
    goto <bb 21>;

<bb 19>:
  D.45356_38 = attr_2->a_value;
  if (D.45356_38 != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.45356_39 = attr_2->a_value;
  # DEBUG __nptr => D.45356_39
  D.47304_137 = strtol (D.45356_39, 0B, 10);
  D.47303_152 = D.47304_137;
  D.45365_40 = D.47303_152;
  D.45366_41 = (unsigned int) D.45365_40;
  t38_options_1->T38MaxBitRate = D.45366_41;
  goto <bb 48>;

<bb 21>:
  D.45353_42 = attr_2->a_name;
  D.45367_43 = strcasecmp (D.45353_42, "T38FaxFillBitRemoval");
  if (D.45367_43 == 0)
    goto <bb 22>;
  else
    goto <bb 25>;

<bb 22>:
  D.45356_44 = attr_2->a_value;
  # DEBUG nptr => D.45356_44
  # DEBUG dft => 1
  if (D.45356_44 != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  # DEBUG __nptr => D.45356_44
  dft_138 = strtol (D.45356_44, 0B, 10);

<bb 24>:
  # dft_139 = PHI <1(22), dft_138(23)>
  D.47307_154 = dft_139;
  D.45370_45 = D.47307_154;
  D.45371_46 = (switch_bool_t) D.45370_45;
  t38_options_1->T38FaxFillBitRemoval = D.45371_46;
  goto <bb 48>;

<bb 25>:
  D.45353_47 = attr_2->a_name;
  D.45373_48 = strcasecmp (D.45353_47, "T38FaxTranscodingMMR");
  if (D.45373_48 == 0)
    goto <bb 26>;
  else
    goto <bb 29>;

<bb 26>:
  D.45356_49 = attr_2->a_value;
  # DEBUG nptr => D.45356_49
  # DEBUG dft => 1
  if (D.45356_49 != 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  # DEBUG __nptr => D.45356_49
  dft_140 = strtol (D.45356_49, 0B, 10);

<bb 28>:
  # dft_141 = PHI <1(26), dft_140(27)>
  D.47310_156 = dft_141;
  D.45376_50 = D.47310_156;
  D.45377_51 = (switch_bool_t) D.45376_50;
  t38_options_1->T38FaxTranscodingMMR = D.45377_51;
  goto <bb 48>;

<bb 29>:
  D.45353_52 = attr_2->a_name;
  D.45379_53 = strcasecmp (D.45353_52, "T38FaxTranscodingJBIG");
  if (D.45379_53 == 0)
    goto <bb 30>;
  else
    goto <bb 33>;

<bb 30>:
  D.45356_54 = attr_2->a_value;
  # DEBUG nptr => D.45356_54
  # DEBUG dft => 1
  if (D.45356_54 != 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  # DEBUG __nptr => D.45356_54
  dft_142 = strtol (D.45356_54, 0B, 10);

<bb 32>:
  # dft_143 = PHI <1(30), dft_142(31)>
  D.47313_158 = dft_143;
  D.45382_55 = D.47313_158;
  D.45383_56 = (switch_bool_t) D.45382_55;
  t38_options_1->T38FaxTranscodingJBIG = D.45383_56;
  goto <bb 48>;

<bb 33>:
  D.45353_57 = attr_2->a_name;
  D.45387_58 = strcasecmp (D.45353_57, "T38FaxRateManagement");
  if (D.45387_58 == 0)
    goto <bb 34>;
  else
    goto <bb 36>;

<bb 34>:
  D.45356_59 = attr_2->a_value;
  if (D.45356_59 != 0B)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  D.45356_60 = attr_2->a_value;
  D.45390_61 = switch_core_perform_session_strdup (session_3(D), D.45356_60, "src/switch_core_media.c", &__func__, 406);
  t38_options_1->T38FaxRateManagement = D.45390_61;
  goto <bb 48>;

<bb 36>:
  D.45353_62 = attr_2->a_name;
  D.45393_63 = strcasecmp (D.45353_62, "T38FaxMaxBuffer");
  if (D.45393_63 == 0)
    goto <bb 37>;
  else
    goto <bb 39>;

<bb 37>:
  D.45356_64 = attr_2->a_value;
  if (D.45356_64 != 0B)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.45356_65 = attr_2->a_value;
  # DEBUG __nptr => D.45356_65
  D.47316_144 = strtol (D.45356_65, 0B, 10);
  D.47315_160 = D.47316_144;
  D.45396_66 = D.47315_160;
  D.45397_67 = (unsigned int) D.45396_66;
  t38_options_1->T38FaxMaxBuffer = D.45397_67;
  goto <bb 48>;

<bb 39>:
  D.45353_68 = attr_2->a_name;
  D.45400_69 = strcasecmp (D.45353_68, "T38FaxMaxDatagram");
  if (D.45400_69 == 0)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 40>:
  D.45356_70 = attr_2->a_value;
  if (D.45356_70 != 0B)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.45356_71 = attr_2->a_value;
  # DEBUG __nptr => D.45356_71
  D.47319_145 = strtol (D.45356_71, 0B, 10);
  D.47318_162 = D.47319_145;
  D.45403_72 = D.47318_162;
  D.45404_73 = (unsigned int) D.45403_72;
  t38_options_1->T38FaxMaxDatagram = D.45404_73;
  goto <bb 48>;

<bb 42>:
  D.45353_74 = attr_2->a_name;
  D.45407_75 = strcasecmp (D.45353_74, "T38FaxUdpEC");
  if (D.45407_75 == 0)
    goto <bb 43>;
  else
    goto <bb 45>;

<bb 43>:
  D.45356_76 = attr_2->a_value;
  if (D.45356_76 != 0B)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  D.45356_77 = attr_2->a_value;
  D.45410_78 = switch_core_perform_session_strdup (session_3(D), D.45356_77, "src/switch_core_media.c", &__func__, 412);
  t38_options_1->T38FaxUdpEC = D.45410_78;
  goto <bb 48>;

<bb 45>:
  D.45353_79 = attr_2->a_name;
  D.45411_80 = strcasecmp (D.45353_79, "T38VendorInfo");
  if (D.45411_80 == 0)
    goto <bb 46>;
  else
    goto <bb 48>;

<bb 46>:
  D.45356_81 = attr_2->a_value;
  if (D.45356_81 != 0B)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.45356_82 = attr_2->a_value;
  D.45416_83 = switch_core_perform_session_strdup (session_3(D), D.45356_82, "src/switch_core_media.c", &__func__, 414);
  t38_options_1->T38VendorInfo = D.45416_83;

<bb 48>:
  attr_84 = attr_2->a_next;
  # DEBUG attr => attr_84

<bb 49>:
  # attr_2 = PHI <attr_29(14), attr_84(48)>
  # DEBUG attr => attr_2
  if (attr_2 != 0B)
    goto <bb 15>;
  else
    goto <bb 50>;

<bb 50>:
  D.45322_85 = session_3(D)->channel;
  switch_channel_set_variable_var_check (D.45322_85, "has_t38", "true", 1);
  D.45322_86 = session_3(D)->channel;
  switch_channel_set_private (D.45322_86, "t38_options", t38_options_1);
  D.45322_87 = session_3(D)->channel;
  switch_channel_set_app_flag_key ("T38", D.45322_87, 2);
  D.45322_88 = session_3(D)->channel;
  switch_channel_execute_on (D.45322_88, "sip_execute_on_image");
  D.45322_89 = session_3(D)->channel;
  switch_channel_api_on (D.45322_89, "sip_api_on_image");
  D.45417_90 = t38_options_1;
  return D.45417_90;

}



;; Function switch_core_media_build_crypto (switch_core_media_build_crypto)

Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Iterations: 0
switch_core_media_build_crypto (struct switch_media_handle_t * smh, switch_media_type_t type, int index, switch_rtp_crypto_key_type_t ctype, switch_rtp_crypto_direction_t direction, int force)
{
  static const char __func__[31] = "switch_core_media_build_crypto";
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_build_crypto";
  struct switch_rtp_engine_t * engine;
  char * p;
  struct switch_channel_t * channel;
  const char * val;
  unsigned char * key;
  unsigned char b64_key[512];
  int D.46716;
  unsigned int D.46713;
  switch_core_media_NDLB_t D.46712;
  struct switch_core_media_params_t * D.46711;
  char * iftmp.165;
  char * iftmp.164;
  char * D.46699;
  struct switch_channel_t * D.46698;
  char * D.46697;
  char * D.46696;
  unsigned int D.46695;
  char D.46691;
  switch_size_t D.46689;
  uint32_t D.46688;
  int D.46687;
  switch_status_t D.46683;
  unsigned char D.46680;
  unsigned int D.46677;
  struct switch_rtp_engine_t[2] * D.46676;
  struct switch_core_session_t * D.46675;

<bb 2>:
  b64_key = "";
  if (smh_7(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 869, &__PRETTY_FUNCTION__);

<bb 4>:
  D.46675_8 = smh_7(D)->session;
  channel_9 = switch_core_session_get_channel (D.46675_8);
  # DEBUG channel => channel_9
  D.46676_10 = &smh_7(D)->engines;
  D.46677_12 = type_11(D) * 11416;
  engine_13 = D.46676_10 + D.46677_12;
  # DEBUG engine => engine_13
  if (force_14(D) == 0)
    goto <bb 5>;
  else
    goto <bb 7>;

<bb 5>:
  D.46680_16 = engine_13->ssec[ctype_15(D)].local_raw_key[0];
  if (D.46680_16 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.46683_17 = 0;
  goto <bb 29>;

<bb 7>:
  if (direction_18(D) == 0)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  key_19 = &engine_13->ssec[ctype_15(D)].local_raw_key;
  # DEBUG key => key_19
  goto <bb 10>;

<bb 9>:
  key_20 = &engine_13->ssec[ctype_15(D)].remote_raw_key;
  # DEBUG key => key_20

<bb 10>:
  # key_2 = PHI <key_19(8), key_20(9)>
  # DEBUG key => key_2
  D.46687_21 = SUITES[ctype_15(D)].keylen;
  D.46688_22 = (uint32_t) D.46687_21;
  switch_rtp_get_random (key_2, D.46688_22);
  D.46687_23 = SUITES[ctype_15(D)].keylen;
  D.46689_24 = (switch_size_t) D.46687_23;
  switch_b64_encode (key_2, D.46689_24, &b64_key, 512);
  p_25 = strrchr (&b64_key, 61);
  # DEBUG p => p_25
  goto <bb 12>;

<bb 11>:
  *p_3 = 0;
  p_28 = p_3 + -1;
  # DEBUG p => p_28

<bb 12>:
  # p_3 = PHI <p_25(10), p_28(11)>
  # DEBUG p => p_3
  if (p_3 != 0B)
    goto <bb 13>;
  else
    goto <bb 15>;

<bb 13>:
  D.46691_26 = *p_3;
  if (D.46691_26 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.46691_27 = *p_3;
  if (D.46691_27 == 61)
    goto <bb 11>;
  else
    goto <bb 15>;

<bb 15>:
  if (index_29(D) == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.46695_30 = ctype_15(D) + 1;
  index_31 = (int) D.46695_30;
  # DEBUG index => index_31

<bb 17>:
  # index_1 = PHI <index_29(D)(15), index_31(16)>
  # DEBUG index => index_1
  D.46675_32 = smh_7(D)->session;
  D.46696_33 = SUITES[ctype_15(D)].name;
  D.46697_34 = switch_core_session_sprintf (D.46675_32, "%d %s inline:%s", index_1, D.46696_33, &b64_key);
  engine_13->ssec[ctype_15(D)].local_crypto_key = D.46697_34;
  D.46675_35 = smh_7(D)->session;
  D.46698_36 = D.46675_35->channel;
  D.46699_37 = engine_13->ssec[ctype_15(D)].local_crypto_key;
  if (type_11(D) == 1)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  iftmp.164_38 = "video";
  goto <bb 20>;

<bb 19>:
  iftmp.164_39 = "audio";

<bb 20>:
  # iftmp.164_5 = PHI <iftmp.164_38(18), iftmp.164_39(19)>
  switch_channel_set_variable_name_printf (D.46698_36, D.46699_37, "rtp_last_%s_local_crypto_key", iftmp.164_5);
  D.46675_40 = smh_7(D)->session;
  D.46698_41 = D.46675_40->channel;
  switch_channel_set_flag_value (D.46698_41, 92, 1);
  D.46675_42 = smh_7(D)->session;
  if (type_11(D) == 1)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  iftmp.165_43 = "video";
  goto <bb 23>;

<bb 22>:
  iftmp.165_44 = "audio";

<bb 23>:
  # iftmp.165_6 = PHI <iftmp.165_43(21), iftmp.165_44(22)>
  D.46699_45 = engine_13->ssec[ctype_15(D)].local_crypto_key;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 916, D.46675_42, 7, "Set Local %s crypto Key [%s]\n", iftmp.165_6, D.46699_45);
  D.46711_46 = smh_7(D)->mparams;
  D.46712_47 = D.46711_46->ndlb;
  D.46713_48 = D.46712_47 & 8;
  if (D.46713_48 == 0)
    goto <bb 24>;
  else
    goto <bb 27>;

<bb 24>:
  val_49 = switch_channel_get_variable_dup (channel_9, "NDLB_support_asterisk_missing_srtp_auth", 1, -1);
  # DEBUG val => val_49
  if (val_49 == 0B)
    goto <bb 26>;
  else
    goto <bb 25>;

<bb 25>:
  D.46716_50 = switch_true (val_49);
  if (D.46716_50 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  engine_13->ssec[ctype_15(D)].crypto_type = ctype_15(D);
  goto <bb 28>;

<bb 27>:
  engine_13->ssec[ctype_15(D)].crypto_type = 8;

<bb 28>:
  D.46683_51 = 0;

<bb 29>:
  # D.46683_4 = PHI <D.46683_17(6), D.46683_51(28)>
  return D.46683_4;

}



;; Function switch_core_media_crypto_str2type (switch_core_media_crypto_str2type)

Iterations: 0
switch_core_media_crypto_str2type (const char * str)
{
  int i;
  switch_rtp_crypto_key_type_t D.47213;
  int D.47210;
  size_t D.47209;
  char * D.47208;

<bb 2>:
  i_3 = 0;
  # DEBUG i => i_3
  goto <bb 6>;

<bb 3>:
  D.47208_4 = SUITES[i_1].name;
  D.47208_5 = SUITES[i_1].name;
  D.47209_6 = strlen (D.47208_5);
  D.47210_8 = strncasecmp (str_7(D), D.47208_5, D.47209_6);
  if (D.47210_8 == 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.47213_9 = SUITES[i_1].type;
  goto <bb 8>;

<bb 5>:
  i_10 = i_1 + 1;
  # DEBUG i => i_10

<bb 6>:
  # i_1 = PHI <i_3(2), i_10(5)>
  # DEBUG i => i_1
  if (i_1 <= 8)
    goto <bb 3>;
  else
    goto <bb 7>;

<bb 7>:
  D.47213_11 = 9;

<bb 8>:
  # D.47213_2 = PHI <D.47213_9(4), D.47213_11(7)>
  return D.47213_2;

}



;; Function switch_core_session_get_recovery_crypto_key (switch_core_session_get_recovery_crypto_key)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_session_get_recovery_crypto_key.
Processing frequency atoi
  Called by switch_core_session_get_recovery_crypto_key that is normal or hot
Considering inline candidate switch_core_media_crypto_str2type.
Not inlining: code size would grow by 12.
Inlining atoi to switch_core_session_get_recovery_crypto_key with frequency 1000
Considering inline candidate switch_core_media_crypto_str2type.
Not inlining: code size would grow by 12.
Iterations: 1
Removing basic block 10
;; basic block 10, loop depth 0, count 0
;; prev block 9, next block 15
;; pred:      
;; succ:       15 [100.0%]  (fallthru,exec)
<bb 10>:


Merging blocks 15 and 14


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.40304_5 = session_4(D)->media_handle;



Registering new PHI nodes in block #3

Updating SSA information for statement D.40304_6 = session_4(D)->media_handle;



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.40312_17 = session_4(D)->channel;

Updating SSA information for statement tmp_18 = switch_channel_get_variable_dup (D.40312_17, keyvar_1, 1, -1);



Registering new PHI nodes in block #7

Updating SSA information for statement D.40312_19 = session_4(D)->channel;

Updating SSA information for statement tmp_20 = switch_channel_get_variable_dup (D.40312_19, ctypevar_3, 1, -1);



Registering new PHI nodes in block #8

Updating SSA information for statement D.40317_21 = switch_core_media_crypto_str2type (tmp_20);

Updating SSA information for statement engine_10->crypto_type = D.40317_21;



Registering new PHI nodes in block #9

Updating SSA information for statement D.40318_22 = engine_10->crypto_type;

Updating SSA information for statement D.40319_23 = switch_core_perform_session_strdup (session_4(D), tmp_20, "src/switch_core_media.c", &__func__, 1015);

Updating SSA information for statement engine_10->ssec[D.40318_22].remote_crypto_key = D.40319_23;

Updating SSA information for statement D.40312_24 = session_4(D)->channel;

Updating SSA information for statement tmp_25 = switch_channel_get_variable_dup (D.40312_24, tagvar_2, 1, -1);



Registering new PHI nodes in block #11

Updating SSA information for statement D.40318_28 = engine_10->crypto_type;

Updating SSA information for statement engine_10->ssec[D.40318_28].crypto_tag = 1;



Registering new PHI nodes in block #10

Updating SSA information for statement D.47325_43 = strtol (tmp_25, 0B, 10);

Updating SSA information for statement D.47324 = D.47325_43;

Updating SSA information for statement tv_26 = D.47324;

Updating SSA information for statement D.40318_27 = engine_10->crypto_type;

Updating SSA information for statement engine_10->ssec[D.40318_27].crypto_tag = tv_26;



Registering new PHI nodes in block #12

Updating SSA information for statement D.40312_29 = session_4(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40312_29, 92, 1);



Registering new PHI nodes in block #13



Symbols to be put in SSA form

{ .MEM D.47324 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 14
Number of blocks to update: 13 ( 93%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 


Scope blocks after cleanups:

{ Scope block #0 
  const char * tmp;
  struct switch_rtp_engine_t * engine;
  char * keyvar;
  char * tagvar;
  char * ctypevar;
  static const char __func__[44] = "switch_core_session_get_recovery_crypto_key";

  { Scope block #45 
    int tv;

    { Scope block #46 src/switch_core_media.c:1018 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #47 Originating from :#0 

      }

    }

  }

}
switch_core_session_get_recovery_crypto_key (struct switch_core_session_t * session, switch_media_type_t type)
{
  int D.47325;
  int D.47324;
  int tv;
  static const char __func__[44] = "switch_core_session_get_recovery_crypto_key";
  char * ctypevar;
  char * tagvar;
  char * keyvar;
  struct switch_rtp_engine_t * engine;
  const char * tmp;
  char * D.40319;
  switch_rtp_crypto_key_type_t D.40318;
  switch_rtp_crypto_key_type_t D.40317;
  struct switch_channel_t * D.40312;
  unsigned int D.40308;
  struct switch_rtp_engine_t[2] * D.40307;
  struct switch_media_handle_t * D.40304;

<bb 2>:
  D.40304_5 = session_4(D)->media_handle;
  if (D.40304_5 == 0B)
    goto <bb 13>;
  else
    goto <bb 3>;

<bb 3>:
  D.40304_6 = session_4(D)->media_handle;
  D.40307_7 = &D.40304_6->engines;
  D.40308_9 = type_8(D) * 11416;
  engine_10 = D.40307_7 + D.40308_9;
  # DEBUG engine => engine_10
  if (type_8(D) == 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  keyvar_11 = "srtp_remote_audio_crypto_key";
  # DEBUG keyvar => keyvar_11
  tagvar_12 = "srtp_remote_audio_crypto_tag";
  # DEBUG tagvar => tagvar_12
  ctypevar_13 = "srtp_remote_audio_crypto_type";
  # DEBUG ctypevar => ctypevar_13
  goto <bb 6>;

<bb 5>:
  keyvar_14 = "srtp_remote_video_crypto_key";
  # DEBUG keyvar => keyvar_14
  tagvar_15 = "srtp_remote_video_crypto_tag";
  # DEBUG tagvar => tagvar_15
  ctypevar_16 = "srtp_remote_video_crypto_type";
  # DEBUG ctypevar => ctypevar_16

<bb 6>:
  # keyvar_1 = PHI <keyvar_11(4), keyvar_14(5)>
  # tagvar_2 = PHI <tagvar_12(4), tagvar_15(5)>
  # ctypevar_3 = PHI <ctypevar_13(4), ctypevar_16(5)>
  # DEBUG ctypevar => ctypevar_3
  # DEBUG tagvar => tagvar_2
  # DEBUG keyvar => keyvar_1
  D.40312_17 = session_4(D)->channel;
  tmp_18 = switch_channel_get_variable_dup (D.40312_17, keyvar_1, 1, -1);
  # DEBUG tmp => tmp_18
  if (tmp_18 != 0B)
    goto <bb 7>;
  else
    goto <bb 13>;

<bb 7>:
  D.40312_19 = session_4(D)->channel;
  tmp_20 = switch_channel_get_variable_dup (D.40312_19, ctypevar_3, 1, -1);
  # DEBUG tmp => tmp_20
  if (tmp_20 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.40317_21 = switch_core_media_crypto_str2type (tmp_20);
  engine_10->crypto_type = D.40317_21;

<bb 9>:
  D.40318_22 = engine_10->crypto_type;
  D.40319_23 = switch_core_perform_session_strdup (session_4(D), tmp_20, "src/switch_core_media.c", &__func__, 1015);
  engine_10->ssec[D.40318_22].remote_crypto_key = D.40319_23;
  D.40312_24 = session_4(D)->channel;
  tmp_25 = switch_channel_get_variable_dup (D.40312_24, tagvar_2, 1, -1);
  # DEBUG tmp => tmp_25
  if (tmp_25 != 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  # DEBUG __nptr => tmp_25
  D.47325_43 = strtol (tmp_25, 0B, 10);
  D.47324_45 = D.47325_43;
  tv_26 = D.47324_45;
  # DEBUG tv => NULL
  D.40318_27 = engine_10->crypto_type;
  engine_10->ssec[D.40318_27].crypto_tag = tv_26;
  goto <bb 12>;

<bb 11>:
  D.40318_28 = engine_10->crypto_type;
  engine_10->ssec[D.40318_28].crypto_tag = 1;

<bb 12>:
  D.40312_29 = session_4(D)->channel;
  switch_channel_set_flag_value (D.40312_29, 92, 1);

<bb 13>:
  return;

}



;; Function switch_core_media_crypto_type2str (switch_core_media_crypto_type2str)

Iterations: 0
switch_core_media_crypto_type2str (switch_rtp_crypto_key_type_t type)
{
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_crypto_type2str";
  const char * D.47206;

<bb 2>:
  if (type_1(D) > 8)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("type < CRYPTO_INVALID", "src/switch_core_media.c", 222, &__PRETTY_FUNCTION__);

<bb 4>:
  D.47206_2 = SUITES[type_1(D)].name;
  return D.47206_2;

}



;; Function switch_core_media_crypto_keylen (switch_core_media_crypto_keylen)

Iterations: 0
switch_core_media_crypto_keylen (switch_rtp_crypto_key_type_t type)
{
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_crypto_keylen";
  int D.47202;

<bb 2>:
  if (type_1(D) > 8)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("type < CRYPTO_INVALID", "src/switch_core_media.c", 229, &__PRETTY_FUNCTION__);

<bb 4>:
  D.47202_2 = SUITES[type_1(D)].keylen;
  return D.47202_2;

}



;; Function switch_core_media_pass_zrtp_hash2 (switch_core_media_pass_zrtp_hash2)

Considering inline candidate _switch_core_media_pass_zrtp_hash2.
Not inlining: code size would grow by 95.
Considering inline candidate _switch_core_media_pass_zrtp_hash2.
Not inlining: code size would grow by 95.
Iterations: 0
switch_core_media_pass_zrtp_hash2 (struct switch_core_session_t * aleg_session, struct switch_core_session_t * bleg_session)
{
<bb 2>:
  _switch_core_media_pass_zrtp_hash2 (aleg_session_1(D), bleg_session_2(D), 0);
  _switch_core_media_pass_zrtp_hash2 (aleg_session_1(D), bleg_session_2(D), 1);
  return;

}



;; Function switch_core_media_pass_zrtp_hash (switch_core_media_pass_zrtp_hash)

Considering inline candidate switch_core_media_pass_zrtp_hash2.
Not inlining: code size would grow by 5.
Iterations: 0
switch_core_media_pass_zrtp_hash (struct switch_core_session_t * session)
{
  static const char __func__[33] = "switch_core_media_pass_zrtp_hash";
  struct switch_core_session_t * other_session;
  struct switch_channel_t * channel;
  struct switch_core_session_t * other_session.172;
  struct switch_core_session_t * D.47169;
  struct switch_core_session_t * D.47168;
  switch_status_t D.47165;
  struct switch_core_session_t * D.47164;
  uint32_t D.47161;
  struct switch_core_session_t * D.47160;

<bb 2>:
  channel_2 = switch_core_session_get_channel (session_1(D));
  # DEBUG channel => channel_2
  D.47160_3 = switch_channel_get_session (channel_2);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 289, D.47160_3, 101, "Deciding whether to pass zrtp-hash between legs\n");
  D.47161_4 = switch_channel_test_flag (channel_2, 73);
  if (D.47161_4 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.47164_5 = switch_channel_get_session (channel_2);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 291, D.47164_5, 101, "CF_ZRTP_PASSTHRU_REQ not set, so not propagating zrtp-hash\n");
  goto <bb 7>;

<bb 4>:
  D.47165_6 = switch_core_session_perform_get_partner (session_1(D), &other_session, "src/switch_core_media.c", &__func__, 293);
  if (D.47165_6 != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47168_7 = switch_channel_get_session (channel_2);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 294, D.47168_7, 101, "No partner channel found, so not propagating zrtp-hash\n");
  goto <bb 7>;

<bb 6>:
  D.47169_8 = switch_channel_get_session (channel_2);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 297, D.47169_8, 101, "Found peer channel; propagating zrtp-hash if set\n");
  other_session.172_9 = other_session;
  switch_core_media_pass_zrtp_hash2 (session_1(D), other_session.172_9);
  other_session.172_10 = other_session;
  switch_core_session_rwunlock (other_session.172_10);

<bb 7>:
  return;

}



;; Function switch_core_media_get_zrtp_hash (switch_core_media_get_zrtp_hash)

Iterations: 0
switch_core_media_get_zrtp_hash (struct switch_core_session_t * session, switch_media_type_t type, switch_bool_t local)
{
  struct switch_rtp_engine_t * engine;
  unsigned int D.47156;
  struct switch_rtp_engine_t[2] * D.47155;
  const char * D.47154;
  struct switch_media_handle_t * D.47151;

<bb 2>:
  D.47151_3 = session_2(D)->media_handle;
  if (D.47151_3 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.47154_4 = 0B;
  goto <bb 7>;

<bb 4>:
  D.47151_5 = session_2(D)->media_handle;
  D.47155_6 = &D.47151_5->engines;
  D.47156_8 = type_7(D) * 11416;
  engine_9 = D.47155_6 + D.47156_8;
  # DEBUG engine => engine_9
  if (local_10(D) != 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47154_11 = engine_9->local_sdp_zrtp_hash;
  goto <bb 7>;

<bb 6>:
  D.47154_12 = engine_9->remote_sdp_zrtp_hash;

<bb 7>:
  # D.47154_1 = PHI <D.47154_4(3), D.47154_11(5), D.47154_12(6)>
  return D.47154_1;

}



;; Function switch_core_media_extract_t38_options (switch_core_media_extract_t38_options)

Considering inline candidate switch_core_media_process_udptl.
Not inlining: code size would grow by 278.
Iterations: 0
switch_core_media_extract_t38_options (struct switch_core_session_t * session, const char * r_sdp)
{
  struct switch_t38_options_t * t38_options;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  struct sdp_media_t * m;
  long unsigned int D.47147;
  sdp_media_e D.47144;
  sdp_proto_e D.47141;
  struct switch_t38_options_t * D.47138;
  int D.47135;
  size_t D.47134;

<bb 2>:
  parser_4 = 0B;
  # DEBUG parser => parser_4
  t38_options_5 = 0B;
  # DEBUG t38_options => t38_options_5
  D.47134_7 = strlen (r_sdp_6(D));
  D.47135_8 = (int) D.47134_7;
  parser_9 = sdp_parse (0B, r_sdp_6(D), D.47135_8, 0);
  # DEBUG parser => parser_9
  if (parser_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.47138_10 = 0B;
  goto <bb 14>;

<bb 4>:
  sdp_11 = sdp_session (parser_9);
  # DEBUG sdp => sdp_11
  if (sdp_11 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  sdp_parser_free (parser_9);
  D.47138_12 = 0B;
  goto <bb 14>;

<bb 6>:
  m_13 = sdp_11->sdp_media;
  # DEBUG m => m_13
  goto <bb 12>;

<bb 7>:
  D.47141_14 = m_1->m_proto;
  if (D.47141_14 == 258)
    goto <bb 8>;
  else
    goto <bb 11>;

<bb 8>:
  D.47144_15 = m_1->m_type;
  if (D.47144_15 == 8)
    goto <bb 9>;
  else
    goto <bb 11>;

<bb 9>:
  D.47147_16 = m_1->m_port;
  if (D.47147_16 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  t38_options_18 = switch_core_media_process_udptl (session_17(D), sdp_11, m_1);
  # DEBUG t38_options => t38_options_18
  goto <bb 13>;

<bb 11>:
  m_19 = m_1->m_next;
  # DEBUG m => m_19

<bb 12>:
  # m_1 = PHI <m_13(6), m_19(11)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 7>;
  else
    goto <bb 13>;

<bb 13>:
  # t38_options_2 = PHI <t38_options_18(10), t38_options_5(12)>
  # DEBUG t38_options => t38_options_2
  sdp_parser_free (parser_9);
  D.47138_20 = t38_options_2;

<bb 14>:
  # D.47138_3 = PHI <D.47138_10(3), D.47138_12(5), D.47138_20(13)>
  return D.47138_3;

}



;; Function switch_core_session_get_payload_code (switch_core_session_get_payload_code)

Considering inline candidate _zstr.
 Inlining _zstr into switch_core_session_get_payload_code.
Processing frequency _zstr
  Called by switch_core_session_get_payload_code that is normal or hot
Inlining _zstr to switch_core_session_get_payload_code with frequency 1000
Iterations: 1
Merging blocks 18 and 25
Merging blocks 28 and 24


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 530, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_12 = session_11(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.47084_18 = smh_12->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.47084_18);

Updating SSA information for statement pmap_19 = engine_17->payload_map;



Registering new PHI nodes in block #12



Registering new PHI nodes in block #7

Updating SSA information for statement D.47085_20 = pmap_1->allocated;



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9

Updating SSA information for statement D.47088_21 = pmap_1->iananame;

Updating SSA information for statement D.47089_23 = strcasecmp (D.47088_21, iananame_22(D));



Registering new PHI nodes in block #10

Updating SSA information for statement pt_24 = pmap_1->pt;

Updating SSA information for statement recv_pt_25 = pmap_1->recv_pt;

Updating SSA information for statement fmtp_26 = pmap_1->rm_fmtp;



Registering new PHI nodes in block #11

Updating SSA information for statement pmap_28 = pmap_1->next;



Registering new PHI nodes in block #13

Updating SSA information for statement D.47084_29 = smh_12->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.47084_29);



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement *ptP_30(D) = pt_2;



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17

Updating SSA information for statement *recv_ptP_31(D) = recv_pt_3;



Registering new PHI nodes in block #18



Registering new PHI nodes in block #19

Updating SSA information for statement D.47340_44 = MEM[(const char *)fmtp_5];



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement D.47339 = D.47341_45;

Updating SSA information for statement D.47098_32 = D.47339;



Registering new PHI nodes in block #22



Registering new PHI nodes in block #23

Updating SSA information for statement *fmtpP_33(D) = fmtp_5;



Registering new PHI nodes in block #24



Registering new PHI nodes in block #25



Registering new PHI nodes in block #26



Symbols to be put in SSA form

{ .MEM D.47339 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 27
Number of blocks to update: 26 ( 96%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 


Scope blocks after cleanups:

{ Scope block #0 
  struct payload_map_t * pmap;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  switch_payload_t pt;
  switch_payload_t recv_pt;
  int found;
  char * fmtp;
  static const char __PRETTY_FUNCTION__[37] = "switch_core_session_get_payload_code";

  { Scope block #48 src/switch_core_media.c:561 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #49 Originating from :#0 

    }

  }

}
switch_core_session_get_payload_code (struct switch_core_session_t * session, switch_media_type_t type, const char * iananame, switch_payload_t * ptP, switch_payload_t * recv_ptP, char * * fmtpP)
{
  int D.47341;
  const char D.47340;
  int D.47339;
  static const char __PRETTY_FUNCTION__[37] = "switch_core_session_get_payload_code";
  char * fmtp;
  int found;
  switch_payload_t recv_pt;
  switch_payload_t pt;
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  struct payload_map_t * pmap;
  int D.47098;
  int D.47089;
  char * D.47088;
  uint8_t D.47085;
  struct switch_mutex_t * D.47084;
  unsigned int D.47083;
  struct switch_rtp_engine_t[2] * D.47082;
  switch_status_t D.47081;

<bb 2>:
  pt_7 = 0;
  # DEBUG pt => pt_7
  recv_pt_8 = 0;
  # DEBUG recv_pt => recv_pt_8
  found_9 = 0;
  # DEBUG found => found_9
  fmtp_10 = 0B;
  # DEBUG fmtp => fmtp_10
  if (session_11(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 530, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_12 = session_11(D)->media_handle;
  # DEBUG smh => smh_12
  if (smh_12 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47081_13 = 1;
  goto <bb 26>;

<bb 6>:
  D.47082_14 = &smh_12->engines;
  D.47083_16 = type_15(D) * 11416;
  engine_17 = D.47082_14 + D.47083_16;
  # DEBUG engine => engine_17
  D.47084_18 = smh_12->sdp_mutex;
  switch_mutex_lock (D.47084_18);
  pmap_19 = engine_17->payload_map;
  # DEBUG pmap => pmap_19
  goto <bb 12>;

<bb 7>:
  D.47085_20 = pmap_1->allocated;
  if (D.47085_20 == 0)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  // predicted unlikely by continue predictor.
  goto <bb 11>;

<bb 9>:
  D.47088_21 = pmap_1->iananame;
  D.47089_23 = strcasecmp (D.47088_21, iananame_22(D));
  if (D.47089_23 == 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  pt_24 = pmap_1->pt;
  # DEBUG pt => pt_24
  recv_pt_25 = pmap_1->recv_pt;
  # DEBUG recv_pt => recv_pt_25
  fmtp_26 = pmap_1->rm_fmtp;
  # DEBUG fmtp => fmtp_26
  found_27 = found_9 + 1;
  # DEBUG found => found_27
  goto <bb 13>;

<bb 11>:
  pmap_28 = pmap_1->next;
  # DEBUG pmap => pmap_28

<bb 12>:
  # pmap_1 = PHI <pmap_19(6), pmap_28(11)>
  # DEBUG pmap => pmap_1
  if (pmap_1 != 0B)
    goto <bb 7>;
  else
    goto <bb 13>;

<bb 13>:
  # pt_2 = PHI <pt_24(10), pt_7(12)>
  # recv_pt_3 = PHI <recv_pt_25(10), recv_pt_8(12)>
  # found_4 = PHI <found_27(10), found_9(12)>
  # fmtp_5 = PHI <fmtp_26(10), fmtp_10(12)>
  # DEBUG fmtp => fmtp_5
  # DEBUG found => found_4
  # DEBUG recv_pt => recv_pt_3
  # DEBUG pt => pt_2
  D.47084_29 = smh_12->sdp_mutex;
  switch_mutex_unlock (D.47084_29);
  if (found_4 != 0)
    goto <bb 14>;
  else
    goto <bb 25>;

<bb 14>:
  if (ptP_30(D) != 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  *ptP_30(D) = pt_2;

<bb 16>:
  if (recv_ptP_31(D) != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  *recv_ptP_31(D) = recv_pt_3;

<bb 18>:
  # DEBUG s => fmtp_5
  if (fmtp_5 == 0B)
    goto <bb 21>;
  else
    goto <bb 19>;

<bb 19>:
  D.47340_44 = MEM[(const char *)fmtp_5];
  if (D.47340_44 == 0)
    goto <bb 21>;
  else
    goto <bb 20>;

<bb 20>:

<bb 21>:
  # D.47341_45 = PHI <1(18), 1(19), 0(20)>
  D.47339_46 = D.47341_45;
  D.47098_32 = D.47339_46;
  if (D.47098_32 == 0)
    goto <bb 22>;
  else
    goto <bb 24>;

<bb 22>:
  if (fmtpP_33(D) != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  *fmtpP_33(D) = fmtp_5;

<bb 24>:
  D.47081_34 = 0;
  goto <bb 26>;

<bb 25>:
  D.47081_35 = 1;

<bb 26>:
  # D.47081_6 = PHI <D.47081_13(5), D.47081_34(24), D.47081_35(25)>
  return D.47081_6;

}



;; Function switch_core_media_add_payload_map (switch_core_media_add_payload_map)

Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_add_payload_map.
Processing frequency _zstr
  Called by switch_core_media_add_payload_map that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_add_payload_map.
Processing frequency _zstr
  Called by switch_core_media_add_payload_map that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_add_payload_map.
Processing frequency _zstr
  Called by switch_core_media_add_payload_map that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_add_payload_map.
Processing frequency _zstr
  Called by switch_core_media_add_payload_map that is normal or hot
Inlining _zstr to switch_core_media_add_payload_map with frequency 1000
Inlining _zstr to switch_core_media_add_payload_map with frequency 1000
Inlining _zstr to switch_core_media_add_payload_map with frequency 1000
Inlining _zstr to switch_core_media_add_payload_map with frequency 1000
Iterations: 1
Removing basic block 15
;; basic block 15, loop depth 0, count 0
;; prev block 14, next block 52
;; pred:      
;; succ:       52 [100.0%]  (fallthru,exec)
<bb 15>:


Merging blocks 16 and 57
Merging blocks 32 and 62
Merging blocks 33 and 67
Merging blocks 55 and 51
Merging blocks 60 and 56
Merging blocks 65 and 61
Merging blocks 70 and 66


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 589, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_15 = session_14(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.47004_21 = smh_15->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.47004_21);

Updating SSA information for statement pmap_22 = engine_20->payload_map;



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27

Updating SSA information for statement D.47030_23 = pmap_1->allocated;



Registering new PHI nodes in block #7

Updating SSA information for statement D.47010_24 = pmap_1->iananame;

Updating SSA information for statement D.47011_26 = strcasecmp (name_25(D), D.47010_24);



Registering new PHI nodes in block #8

Updating SSA information for statement D.47013_27 = pmap_1->rate;



Registering new PHI nodes in block #9

Updating SSA information for statement D.47013_28 = pmap_1->rate;



Registering new PHI nodes in block #10

Updating SSA information for statement D.47015_30 = pmap_1->ptime;



Registering new PHI nodes in block #11

Updating SSA information for statement D.47015_31 = pmap_1->ptime;



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16

Updating SSA information for statement D.47345_114 = *fmtp_36(D);



Registering new PHI nodes in block #17



Registering new PHI nodes in block #18

Updating SSA information for statement D.47344 = D.47346_115;

Updating SSA information for statement D.47019_37 = D.47344;



Registering new PHI nodes in block #19

Updating SSA information for statement D.47022_38 = pmap_1->rm_fmtp;



Registering new PHI nodes in block #20

Updating SSA information for statement D.47349_116 = MEM[(const char *)D.47022_38];



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22

Updating SSA information for statement D.47348 = D.47350_117;

Updating SSA information for statement D.47023_39 = D.47348;



Registering new PHI nodes in block #23

Updating SSA information for statement D.47022_40 = pmap_1->rm_fmtp;

Updating SSA information for statement D.38476_41 = __builtin_strcmp (D.47022_40, fmtp_36(D));



Registering new PHI nodes in block #24

Updating SSA information for statement D.47028_43 = pmap_1->pt;



Registering new PHI nodes in block #25

Updating SSA information for statement pmap_45 = pmap_1->next;



Registering new PHI nodes in block #28



Registering new PHI nodes in block #29

Updating SSA information for statement hlen = -1;

Updating SSA information for statement D.47035_46 = engine_20->payload_map;



Registering new PHI nodes in block #30

Updating SSA information for statement D.47035_47 = engine_20->payload_map;

Updating SSA information for statement D.47037_48 = D.47035_47->allocated;



Registering new PHI nodes in block #31

Updating SSA information for statement pmap_49 = engine_20->payload_map;



Registering new PHI nodes in block #32

Updating SSA information for statement D.47039_50 = session_14(D)->pool;

Updating SSA information for statement pmap_51 = switch_core_perform_alloc (D.47039_50, 84, "src/switch_core_media.c", &__func__, 624);



Registering new PHI nodes in block #33

Updating SSA information for statement pmap_2->type = type_18(D);

Updating SSA information for statement D.47039_52 = session_14(D)->pool;

Updating SSA information for statement D.47040_53 = switch_core_perform_strdup (D.47039_52, name_25(D), "src/switch_core_media.c", &__func__, 628);

Updating SSA information for statement pmap_2->iananame = D.47040_53;

Updating SSA information for statement D.47010_54 = pmap_2->iananame;

Updating SSA information for statement pmap_2->rm_encoding = D.47010_54;

Updating SSA information for statement D.47010_55 = pmap_2->iananame;

Updating SSA information for statement D.47041_56 = switch_ci_hashfunc_default (D.47010_55, &hlen);

Updating SSA information for statement pmap_2->hash = D.47041_56;



Registering new PHI nodes in block #34

Updating SSA information for statement pmap_3->sdp_type = sdp_type_57(D);



Registering new PHI nodes in block #35

Updating SSA information for statement pmap_3->ptime = ptime_32(D);



Registering new PHI nodes in block #36



Registering new PHI nodes in block #37

Updating SSA information for statement pmap_3->rate = rate_29(D);



Registering new PHI nodes in block #38



Registering new PHI nodes in block #39

Updating SSA information for statement D.47353_118 = *fmtp_36(D);



Registering new PHI nodes in block #40



Registering new PHI nodes in block #41

Updating SSA information for statement D.47352 = D.47354_119;

Updating SSA information for statement D.47048_58 = D.47352;



Registering new PHI nodes in block #42

Updating SSA information for statement D.47022_59 = pmap_3->rm_fmtp;



Registering new PHI nodes in block #43

Updating SSA information for statement D.47357_120 = MEM[(const char *)D.47022_59];



Registering new PHI nodes in block #44



Registering new PHI nodes in block #45

Updating SSA information for statement D.47356 = D.47358_121;

Updating SSA information for statement D.47051_60 = D.47356;



Registering new PHI nodes in block #46

Updating SSA information for statement D.47022_61 = pmap_3->rm_fmtp;

Updating SSA information for statement D.38491_62 = __builtin_strcmp (D.47022_61, fmtp_36(D));



Registering new PHI nodes in block #47

Updating SSA information for statement D.47039_63 = session_14(D)->pool;

Updating SSA information for statement D.47053_64 = switch_core_perform_strdup (D.47039_63, fmtp_36(D), "src/switch_core_media.c", &__func__, 644);

Updating SSA information for statement pmap_3->rm_fmtp = D.47053_64;



Registering new PHI nodes in block #48

Updating SSA information for statement pmap_3->allocated = 1;

Updating SSA information for statement pmap_3->recv_pt = D.47054_66;



Registering new PHI nodes in block #49



Registering new PHI nodes in block #50



Registering new PHI nodes in block #51



Registering new PHI nodes in block #52

Updating SSA information for statement pmap_3->pt = iftmp.170_11;



Registering new PHI nodes in block #53



Registering new PHI nodes in block #54

Updating SSA information for statement pmap_3->negotiated = negotiated_72(D);



Registering new PHI nodes in block #55



Registering new PHI nodes in block #56

Updating SSA information for statement D.47035_73 = engine_20->payload_map;



Registering new PHI nodes in block #57

Updating SSA information for statement engine_20->pmap_tail = pmap_3;



Registering new PHI nodes in block #58

Updating SSA information for statement D.47035_74 = engine_20->payload_map;



Registering new PHI nodes in block #59

Updating SSA information for statement engine_20->pmap_tail = pmap_3;

Updating SSA information for statement D.47073_75 = engine_20->pmap_tail;

Updating SSA information for statement engine_20->payload_map = D.47073_75;



Registering new PHI nodes in block #60

Updating SSA information for statement D.47073_76 = engine_20->pmap_tail;

Updating SSA information for statement D.47073_76->next = pmap_3;

Updating SSA information for statement D.47073_77 = engine_20->pmap_tail;

Updating SSA information for statement D.47075_78 = D.47073_77->next;

Updating SSA information for statement engine_20->pmap_tail = D.47075_78;



Registering new PHI nodes in block #61

Updating SSA information for statement D.47004_79 = smh_15->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.47004_79);



Registering new PHI nodes in block #62



Symbols to be put in SSA form

{ .MEM D.47344 D.47348 D.47352 D.47356 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 63
Number of blocks to update: 62 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 


Scope blocks after cleanups:

{ Scope block #0 
  struct payload_map_t * pmap;
  int exists;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  int local_pt;
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_add_payload_map";
  static const char __func__[34] = "switch_core_media_add_payload_map";

  { Scope block #50 src/switch_core_media.c:643 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #51 Originating from :#0 

    }

  }

  { Scope block #52 src/switch_core_media.c:643 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #53 Originating from :#0 

    }

  }

  { Scope block #54 src/switch_core_media.c:605 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #55 Originating from :#0 

    }

  }

  { Scope block #56 src/switch_core_media.c:605 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #57 Originating from :#0 

    }

  }

  { Scope block #58 
    size_t __s1_len; (unused)
    size_t __s2_len; (unused)

  }

  { Scope block #59 
    switch_ssize_t hlen;

  }

  { Scope block #60 
    size_t __s1_len; (unused)
    size_t __s2_len; (unused)

  }

}
switch_core_media_add_payload_map (struct switch_core_session_t * session, switch_media_type_t type, const char * name, const char * fmtp, switch_sdp_type_t sdp_type, uint32_t pt, uint32_t rate, uint32_t ptime, uint8_t negotiated)
{
  int D.47358;
  const char D.47357;
  int D.47356;
  int D.47354;
  const char D.47353;
  int D.47352;
  int D.47350;
  const char D.47349;
  int D.47348;
  int D.47346;
  const char D.47345;
  int D.47344;
  switch_ssize_t hlen;
  static const char __func__[34] = "switch_core_media_add_payload_map";
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_add_payload_map";
  int local_pt;
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  int exists;
  struct payload_map_t * pmap;
  struct payload_map_s * D.47075;
  struct payload_map_t * D.47073;
  unsigned char iftmp.170;
  _Bool D.47057;
  _Bool D.47056;
  _Bool D.47055;
  unsigned char D.47054;
  char * D.47053;
  int D.38491;
  int D.47051;
  int D.47048;
  unsigned int D.47041;
  char * D.47040;
  struct switch_memory_pool_t * D.47039;
  uint8_t D.47037;
  struct payload_map_t * D.47035;
  uint8_t D.47030;
  switch_payload_t D.47028;
  int D.38476;
  int D.47023;
  char * D.47022;
  int D.47019;
  uint32_t D.47015;
  uint32_t D.47013;
  int D.47011;
  char * D.47010;
  int iftmp.169;
  struct switch_mutex_t * D.47004;
  unsigned int D.47003;
  struct switch_rtp_engine_t[2] * D.47002;
  struct payload_map_t * D.47001;

<bb 2>:
  exists_12 = 0;
  # DEBUG exists => exists_12
  local_pt_13 = 0;
  # DEBUG local_pt => local_pt_13
  if (session_14(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 589, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_15 = session_14(D)->media_handle;
  # DEBUG smh => smh_15
  if (smh_15 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47001_16 = 0B;
  goto <bb 62>;

<bb 6>:
  D.47002_17 = &smh_15->engines;
  D.47003_19 = type_18(D) * 11416;
  engine_20 = D.47002_17 + D.47003_19;
  # DEBUG engine => engine_20
  D.47004_21 = smh_15->sdp_mutex;
  switch_mutex_lock (D.47004_21);
  pmap_22 = engine_20->payload_map;
  # DEBUG pmap => pmap_22
  goto <bb 26>;

<bb 7>:
  D.47010_24 = pmap_1->iananame;
  D.47011_26 = strcasecmp (name_25(D), D.47010_24);
  if (D.47011_26 == 0)
    goto <bb 8>;
  else
    goto <bb 13>;

<bb 8>:
  D.47013_27 = pmap_1->rate;
  if (D.47013_27 == 0)
    goto <bb 10>;
  else
    goto <bb 9>;

<bb 9>:
  D.47013_28 = pmap_1->rate;
  if (D.47013_28 == rate_29(D))
    goto <bb 10>;
  else
    goto <bb 13>;

<bb 10>:
  D.47015_30 = pmap_1->ptime;
  if (D.47015_30 == 0)
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:
  D.47015_31 = pmap_1->ptime;
  if (D.47015_31 == ptime_32(D))
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  iftmp.169_33 = 1;
  goto <bb 14>;

<bb 13>:
  iftmp.169_34 = 0;

<bb 14>:
  # iftmp.169_10 = PHI <iftmp.169_33(12), iftmp.169_34(13)>
  exists_35 = iftmp.169_10;
  # DEBUG exists => exists_35
  if (exists_35 != 0)
    goto <bb 15>;
  else
    goto <bb 25>;

<bb 15>:
  # DEBUG s => fmtp_36(D)
  if (fmtp_36(D) == 0B)
    goto <bb 18>;
  else
    goto <bb 16>;

<bb 16>:
  D.47345_114 = *fmtp_36(D);
  if (D.47345_114 == 0)
    goto <bb 18>;
  else
    goto <bb 17>;

<bb 17>:

<bb 18>:
  # D.47346_115 = PHI <1(15), 1(16), 0(17)>
  D.47344_122 = D.47346_115;
  D.47019_37 = D.47344_122;
  if (D.47019_37 == 0)
    goto <bb 19>;
  else
    goto <bb 28>;

<bb 19>:
  D.47022_38 = pmap_1->rm_fmtp;
  # DEBUG s => D.47022_38
  if (D.47022_38 == 0B)
    goto <bb 22>;
  else
    goto <bb 20>;

<bb 20>:
  D.47349_116 = MEM[(const char *)D.47022_38];
  if (D.47349_116 == 0)
    goto <bb 22>;
  else
    goto <bb 21>;

<bb 21>:

<bb 22>:
  # D.47350_117 = PHI <1(19), 1(20), 0(21)>
  D.47348_123 = D.47350_117;
  D.47023_39 = D.47348_123;
  if (D.47023_39 == 0)
    goto <bb 23>;
  else
    goto <bb 28>;

<bb 23>:
  D.47022_40 = pmap_1->rm_fmtp;
  D.38476_41 = __builtin_strcmp (D.47022_40, fmtp_36(D));
  if (D.38476_41 != 0)
    goto <bb 24>;
  else
    goto <bb 28>;

<bb 24>:
  exists_42 = 0;
  # DEBUG exists => exists_42
  D.47028_43 = pmap_1->pt;
  local_pt_44 = (int) D.47028_43;
  # DEBUG local_pt => local_pt_44
  // predicted unlikely by continue predictor.

<bb 25>:
  # exists_4 = PHI <exists_35(14), exists_42(24)>
  # local_pt_7 = PHI <local_pt_8(14), local_pt_44(24)>
  # DEBUG local_pt => local_pt_7
  # DEBUG exists => exists_4
  pmap_45 = pmap_1->next;
  # DEBUG pmap => pmap_45

<bb 26>:
  # pmap_1 = PHI <pmap_22(6), pmap_45(25)>
  # exists_5 = PHI <exists_12(6), exists_4(25)>
  # local_pt_8 = PHI <local_pt_13(6), local_pt_7(25)>
  # DEBUG local_pt => local_pt_8
  # DEBUG exists => exists_5
  # DEBUG pmap => pmap_1
  if (pmap_1 != 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.47030_23 = pmap_1->allocated;
  if (D.47030_23 != 0)
    goto <bb 7>;
  else
    goto <bb 28>;

<bb 28>:
  # exists_6 = PHI <exists_35(22), exists_5(26), exists_5(27), exists_35(18), exists_35(23)>
  # DEBUG exists => exists_6
  if (exists_6 == 0)
    goto <bb 29>;
  else
    goto <bb 34>;

<bb 29>:
  hlen = -1;
  D.47035_46 = engine_20->payload_map;
  if (D.47035_46 != 0B)
    goto <bb 30>;
  else
    goto <bb 32>;

<bb 30>:
  D.47035_47 = engine_20->payload_map;
  D.47037_48 = D.47035_47->allocated;
  if (D.47037_48 == 0)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  pmap_49 = engine_20->payload_map;
  # DEBUG pmap => pmap_49
  goto <bb 33>;

<bb 32>:
  D.47039_50 = session_14(D)->pool;
  pmap_51 = switch_core_perform_alloc (D.47039_50, 84, "src/switch_core_media.c", &__func__, 624);
  # DEBUG pmap => pmap_51

<bb 33>:
  # pmap_2 = PHI <pmap_49(31), pmap_51(32)>
  # DEBUG pmap => pmap_2
  pmap_2->type = type_18(D);
  D.47039_52 = session_14(D)->pool;
  D.47040_53 = switch_core_perform_strdup (D.47039_52, name_25(D), "src/switch_core_media.c", &__func__, 628);
  pmap_2->iananame = D.47040_53;
  D.47010_54 = pmap_2->iananame;
  pmap_2->rm_encoding = D.47010_54;
  D.47010_55 = pmap_2->iananame;
  D.47041_56 = switch_ci_hashfunc_default (D.47010_55, &hlen);
  pmap_2->hash = D.47041_56;

<bb 34>:
  # pmap_3 = PHI <pmap_1(28), pmap_2(33)>
  # DEBUG pmap => pmap_3
  pmap_3->sdp_type = sdp_type_57(D);
  if (ptime_32(D) != 0)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  pmap_3->ptime = ptime_32(D);

<bb 36>:
  if (rate_29(D) != 0)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  pmap_3->rate = rate_29(D);

<bb 38>:
  # DEBUG s => fmtp_36(D)
  if (fmtp_36(D) == 0B)
    goto <bb 41>;
  else
    goto <bb 39>;

<bb 39>:
  D.47353_118 = *fmtp_36(D);
  if (D.47353_118 == 0)
    goto <bb 41>;
  else
    goto <bb 40>;

<bb 40>:

<bb 41>:
  # D.47354_119 = PHI <1(38), 1(39), 0(40)>
  D.47352_124 = D.47354_119;
  D.47048_58 = D.47352_124;
  if (D.47048_58 == 0)
    goto <bb 42>;
  else
    goto <bb 48>;

<bb 42>:
  D.47022_59 = pmap_3->rm_fmtp;
  # DEBUG s => D.47022_59
  if (D.47022_59 == 0B)
    goto <bb 45>;
  else
    goto <bb 43>;

<bb 43>:
  D.47357_120 = MEM[(const char *)D.47022_59];
  if (D.47357_120 == 0)
    goto <bb 45>;
  else
    goto <bb 44>;

<bb 44>:

<bb 45>:
  # D.47358_121 = PHI <1(42), 1(43), 0(44)>
  D.47356_125 = D.47358_121;
  D.47051_60 = D.47356_125;
  if (D.47051_60 != 0)
    goto <bb 47>;
  else
    goto <bb 46>;

<bb 46>:
  D.47022_61 = pmap_3->rm_fmtp;
  D.38491_62 = __builtin_strcmp (D.47022_61, fmtp_36(D));
  if (D.38491_62 != 0)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.47039_63 = session_14(D)->pool;
  D.47053_64 = switch_core_perform_strdup (D.47039_63, fmtp_36(D), "src/switch_core_media.c", &__func__, 644);
  pmap_3->rm_fmtp = D.47053_64;

<bb 48>:
  pmap_3->allocated = 1;
  D.47054_66 = (unsigned char) pt_65(D);
  pmap_3->recv_pt = D.47054_66;
  D.47055_67 = sdp_type_57(D) == 0;
  D.47056_68 = exists_6 == 0;
  D.47057_69 = D.47055_67 || D.47056_68;
  if (D.47057_69 != 0)
    goto <bb 49>;
  else
    goto <bb 53>;

<bb 49>:
  if (local_pt_8 != 0)
    goto <bb 50>;
  else
    goto <bb 51>;

<bb 50>:
  iftmp.170_70 = (unsigned char) local_pt_8;
  goto <bb 52>;

<bb 51>:
  iftmp.170_71 = (unsigned char) pt_65(D);

<bb 52>:
  # iftmp.170_11 = PHI <iftmp.170_70(50), iftmp.170_71(51)>
  pmap_3->pt = iftmp.170_11;

<bb 53>:
  if (negotiated_72(D) != 0)
    goto <bb 54>;
  else
    goto <bb 55>;

<bb 54>:
  pmap_3->negotiated = negotiated_72(D);

<bb 55>:
  if (exists_6 == 0)
    goto <bb 56>;
  else
    goto <bb 61>;

<bb 56>:
  D.47035_73 = engine_20->payload_map;
  if (D.47035_73 == pmap_3)
    goto <bb 57>;
  else
    goto <bb 58>;

<bb 57>:
  engine_20->pmap_tail = pmap_3;
  goto <bb 61>;

<bb 58>:
  D.47035_74 = engine_20->payload_map;
  if (D.47035_74 == 0B)
    goto <bb 59>;
  else
    goto <bb 60>;

<bb 59>:
  engine_20->pmap_tail = pmap_3;
  D.47073_75 = engine_20->pmap_tail;
  engine_20->payload_map = D.47073_75;
  goto <bb 61>;

<bb 60>:
  D.47073_76 = engine_20->pmap_tail;
  D.47073_76->next = pmap_3;
  D.47073_77 = engine_20->pmap_tail;
  D.47075_78 = D.47073_77->next;
  engine_20->pmap_tail = D.47075_78;

<bb 61>:
  D.47004_79 = smh_15->sdp_mutex;
  switch_mutex_unlock (D.47004_79);
  D.47001_80 = pmap_3;

<bb 62>:
  # D.47001_9 = PHI <D.47001_16(5), D.47001_80(61)>
  return D.47001_9;

}



;; Function switch_core_media_set_r_sdp_codec_string (switch_core_media_set_r_sdp_codec_string)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_set_r_sdp_codec_string.
Processing frequency atoi
  Called by switch_core_media_set_r_sdp_codec_string that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_set_r_sdp_codec_string.
Processing frequency atoi
  Called by switch_core_media_set_r_sdp_codec_string that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_set_r_sdp_codec_string.
Processing frequency atoi
  Called by switch_core_media_set_r_sdp_codec_string that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_set_r_sdp_codec_string.
Processing frequency _zstr
  Called by switch_core_media_set_r_sdp_codec_string that is normal or hot
Considering inline candidate add_audio_codec.
Not inlining: code size would grow by 115.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_set_r_sdp_codec_string.
Processing frequency _zstr
  Called by switch_core_media_set_r_sdp_codec_string that is normal or hot
Considering inline candidate add_audio_codec.
Not inlining: code size would grow by 115.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_set_r_sdp_codec_string.
Processing frequency _zstr
  Called by switch_core_media_set_r_sdp_codec_string that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_set_r_sdp_codec_string.
Processing frequency _zstr
  Called by switch_core_media_set_r_sdp_codec_string that is normal or hot
Considering inline candidate switch_core_media_add_payload_map.
Not inlining: code size would grow by 161.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_set_r_sdp_codec_string.
Processing frequency _zstr
  Called by switch_core_media_set_r_sdp_codec_string that is normal or hot
Considering inline candidate switch_core_media_pass_zrtp_hash.
Not inlining: code size would grow by 67.
Considering inline candidate switch_core_media_find_zrtp_hash.
Not inlining: code size would grow by 130.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_set_r_sdp_codec_string.
Processing frequency _zstr
  Called by switch_core_media_set_r_sdp_codec_string that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_set_r_sdp_codec_string.
Processing frequency _zstr
  Called by switch_core_media_set_r_sdp_codec_string that is normal or hot
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Inlining _zstr to switch_core_media_set_r_sdp_codec_string with frequency 1000
Inlining _zstr to switch_core_media_set_r_sdp_codec_string with frequency 1000
Inlining atoi to switch_core_media_set_r_sdp_codec_string with frequency 1000
Inlining _zstr to switch_core_media_set_r_sdp_codec_string with frequency 1000
Inlining atoi to switch_core_media_set_r_sdp_codec_string with frequency 1000
Inlining _zstr to switch_core_media_set_r_sdp_codec_string with frequency 1000
Inlining atoi to switch_core_media_set_r_sdp_codec_string with frequency 1000
Inlining _zstr to switch_core_media_set_r_sdp_codec_string with frequency 1000
Inlining _zstr to switch_core_media_set_r_sdp_codec_string with frequency 1000
Inlining _zstr to switch_core_media_set_r_sdp_codec_string with frequency 1000
Considering inline candidate add_audio_codec.
Not inlining: code size would grow by 115.
Considering inline candidate add_audio_codec.
Not inlining: code size would grow by 115.
Considering inline candidate switch_core_media_add_payload_map.
Not inlining: code size would grow by 161.
Considering inline candidate switch_core_media_pass_zrtp_hash.
Not inlining: code size would grow by 67.
Considering inline candidate switch_core_media_find_zrtp_hash.
Not inlining: code size would grow by 130.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Iterations: 1
Merging blocks 8 and 137
Merging blocks 15 and 142
Merging blocks 18 and 147
Merging blocks 26 and 149
Merging blocks 30 and 154
Merging blocks 44 and 156
Merging blocks 48 and 161
Merging blocks 62 and 163
Merging blocks 84 and 168
Merging blocks 115 and 173
Merging blocks 140 and 136
Merging blocks 145 and 141
Merging blocks 152 and 148
Merging blocks 159 and 155
Merging blocks 166 and 162
Merging blocks 171 and 167
Merging blocks 176 and 172
Merging blocks 18 and 146
Merging blocks 30 and 153
Merging blocks 48 and 160


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement buf = {};

Updating SSA information for statement already_did = {};

Updating SSA information for statement codecs = {};

Updating SSA information for statement channel_29 = switch_core_session_get_channel (session_28(D));



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8198, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_31 = session_28(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement var_32 = switch_channel_get_variable_dup (channel_29, "ep_codec_prefer_sdp", 1, -1);



Registering new PHI nodes in block #6

Updating SSA information for statement D.40412_33 = switch_true (var_32);



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9

Updating SSA information for statement D.47362_278 = *codec_string_35(D);



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11

Updating SSA information for statement D.47361 = D.47363_279;

Updating SSA information for statement D.40415_36 = D.47361;



Registering new PHI nodes in block #15

Updating SSA information for statement num_codecs_42 = switch_loadable_module_get_codecs (&codecs, 50);



Registering new PHI nodes in block #12

Updating SSA information for statement tmp_codec_string_37 = __strdup (codec_string_35(D));



Registering new PHI nodes in block #13

Updating SSA information for statement D.40420_38 = switch_separate_string (tmp_codec_string_37, 44, &codec_order, 50);

Updating SSA information for statement num_codecs_40 = switch_loadable_module_get_codecs_sorted (&codecs, 50, &codec_order, num_codecs_39);



Registering new PHI nodes in block #14

Updating SSA information for statement free (tmp_codec_string_37);



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17

Updating SSA information for statement attr_47 = sdp_46(D)->sdp_attributes;



Registering new PHI nodes in block #26



Registering new PHI nodes in block #18

Updating SSA information for statement D.40429_48 = attr_3->a_name;



Registering new PHI nodes in block #19

Updating SSA information for statement D.47366_280 = *D.40429_48;



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement D.47365 = D.47367_281;

Updating SSA information for statement D.40430_49 = D.47365;



Registering new PHI nodes in block #23

Updating SSA information for statement D.40429_50 = attr_3->a_name;

Updating SSA information for statement D.40433_51 = strcasecmp (D.40429_50, "ptime");



Registering new PHI nodes in block #24

Updating SSA information for statement D.40436_52 = attr_3->a_value;

Updating SSA information for statement D.47370_282 = strtol (D.40436_52, 0B, 10);

Updating SSA information for statement D.47369 = D.47370_282;

Updating SSA information for statement dptime_53 = D.47369;



Registering new PHI nodes in block #22



Registering new PHI nodes in block #25

Updating SSA information for statement attr_54 = attr_3->a_next;



Registering new PHI nodes in block #27

Updating SSA information for statement switch_core_media_find_zrtp_hash (session_28(D), sdp_46(D));

Updating SSA information for statement switch_core_media_pass_zrtp_hash (session_28(D));

Updating SSA information for statement m_55 = sdp_46(D)->sdp_media;



Registering new PHI nodes in block #45



Registering new PHI nodes in block #28

Updating SSA information for statement D.40437_57 = m_1->m_type;



Registering new PHI nodes in block #29

Updating SSA information for statement D.40441_59 = m_1->m_port;



Registering new PHI nodes in block #30

Updating SSA information for statement map_60 = m_1->m_rtpmaps;



Registering new PHI nodes in block #43



Registering new PHI nodes in block #31

Updating SSA information for statement attr_61 = m_1->m_attributes;



Registering new PHI nodes in block #41



Registering new PHI nodes in block #32

Updating SSA information for statement D.40429_62 = attr_4->a_name;



Registering new PHI nodes in block #33

Updating SSA information for statement D.47373_283 = *D.40429_62;



Registering new PHI nodes in block #34



Registering new PHI nodes in block #35

Updating SSA information for statement D.47372 = D.47374_284;

Updating SSA information for statement D.40444_63 = D.47372;



Registering new PHI nodes in block #37

Updating SSA information for statement D.40429_64 = attr_4->a_name;

Updating SSA information for statement D.40447_65 = strcasecmp (D.40429_64, "ptime");



Registering new PHI nodes in block #38

Updating SSA information for statement D.40436_66 = attr_4->a_value;



Registering new PHI nodes in block #39

Updating SSA information for statement D.40436_67 = attr_4->a_value;

Updating SSA information for statement D.47377_285 = strtol (D.40436_67, 0B, 10);

Updating SSA information for statement D.47376 = D.47377_285;

Updating SSA information for statement ptime_68 = D.47376;



Registering new PHI nodes in block #36



Registering new PHI nodes in block #40

Updating SSA information for statement attr_69 = attr_4->a_next;



Registering new PHI nodes in block #42

Updating SSA information for statement D.40437_70 = m_1->m_type;

Updating SSA information for statement D.40453_72 = map_12->rm_encoding;

Updating SSA information for statement D.40454_73 = map_12->rm_fmtp;

Updating SSA information for statement D.40455_74 = map_12->rm_pt;

Updating SSA information for statement D.40457_76 = map_12->rm_rate;

Updating SSA information for statement switch_core_media_add_payload_map (session_28(D), D.40452_71, D.40453_72, D.40454_73, sdp_type_78(D), D.40456_75, D.40457_76, ptime.5_77, 0);

Updating SSA information for statement map_79 = map_12->rm_next;



Registering new PHI nodes in block #44

Updating SSA information for statement m_80 = m_1->m_next;



Registering new PHI nodes in block #46

Updating SSA information for statement m_81 = sdp_46(D)->sdp_media;



Registering new PHI nodes in block #153



Registering new PHI nodes in block #47

Updating SSA information for statement D.40437_83 = m_2->m_type;



Registering new PHI nodes in block #48

Updating SSA information for statement D.40441_84 = m_2->m_port;



Registering new PHI nodes in block #49

Updating SSA information for statement D.40463_85 = strlen (&buf);

Updating SSA information for statement D.40465_87 = strlen (&buf);

Updating SSA information for statement switch_snprintf (D.40464_86, D.40466_88, ",t38");



Registering new PHI nodes in block #50

Updating SSA information for statement D.40437_89 = m_2->m_type;



Registering new PHI nodes in block #51

Updating SSA information for statement D.40441_90 = m_2->m_port;



Registering new PHI nodes in block #52

Updating SSA information for statement attr_91 = m_2->m_attributes;



Registering new PHI nodes in block #62



Registering new PHI nodes in block #53

Updating SSA information for statement D.40429_92 = attr_5->a_name;



Registering new PHI nodes in block #54

Updating SSA information for statement D.47380_286 = *D.40429_92;



Registering new PHI nodes in block #55



Registering new PHI nodes in block #56

Updating SSA information for statement D.47379 = D.47381_287;

Updating SSA information for statement D.40471_93 = D.47379;



Registering new PHI nodes in block #58

Updating SSA information for statement D.40429_94 = attr_5->a_name;

Updating SSA information for statement D.40474_95 = strcasecmp (D.40429_94, "ptime");



Registering new PHI nodes in block #59

Updating SSA information for statement D.40436_96 = attr_5->a_value;



Registering new PHI nodes in block #60

Updating SSA information for statement D.40436_97 = attr_5->a_value;

Updating SSA information for statement D.47384_288 = strtol (D.40436_97, 0B, 10);

Updating SSA information for statement D.47383 = D.47384_288;

Updating SSA information for statement ptime_98 = D.47383;



Registering new PHI nodes in block #57



Registering new PHI nodes in block #61

Updating SSA information for statement attr_99 = attr_5->a_next;



Registering new PHI nodes in block #63

Updating SSA information for statement connection_100 = sdp_46(D)->sdp_connection;

Updating SSA information for statement D.40479_101 = m_2->m_connections;



Registering new PHI nodes in block #64

Updating SSA information for statement connection_102 = m_2->m_connections;



Registering new PHI nodes in block #65



Registering new PHI nodes in block #66

Updating SSA information for statement D.40484_103 = switch_channel_get_session (channel_29);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 8285, D.40484_103, 3, "Cannot find a c= line in the sdp at media or session level!\n");



Registering new PHI nodes in block #67

Updating SSA information for statement D.40487_104 = switch_channel_direction (channel_29);



Registering new PHI nodes in block #68



Registering new PHI nodes in block #90



Registering new PHI nodes in block #114



Registering new PHI nodes in block #91

Updating SSA information for statement imp_106 = codecs[i_20];

Updating SSA information for statement D.40516_107 = imp_106->codec_type;



Registering new PHI nodes in block #92

Updating SSA information for statement D.40518_108 = imp_106->ianacode;



Registering new PHI nodes in block #93

Updating SSA information for statement D.40518_110 = imp_106->ianacode;

Updating SSA information for statement D.40522_112 = already_did[D.40521_111];



Registering new PHI nodes in block #95

Updating SSA information for statement map_113 = m_2->m_rtpmaps;



Registering new PHI nodes in block #112



Registering new PHI nodes in block #96

Updating SSA information for statement D.40455_114 = map_14->rm_pt;



Registering new PHI nodes in block #97

Updating SSA information for statement D.40455_116 = map_14->rm_pt;

Updating SSA information for statement D.40493_118 = already_did[D.40491_117];



Registering new PHI nodes in block #99

Updating SSA information for statement D.40453_119 = map_14->rm_encoding;



Registering new PHI nodes in block #100

Updating SSA information for statement D.47391_291 = *D.40453_119;



Registering new PHI nodes in block #101



Registering new PHI nodes in block #102

Updating SSA information for statement D.47390 = D.47392_292;

Updating SSA information for statement D.40529_120 = D.47390;



Registering new PHI nodes in block #103

Updating SSA information for statement D.40499_121 = smh_31->mparams;

Updating SSA information for statement D.40500_122 = D.40499_121->ndlb;



Registering new PHI nodes in block #104

Updating SSA information for statement D.40455_126 = map_14->rm_pt;



Registering new PHI nodes in block #105

Updating SSA information for statement D.40455_128 = map_14->rm_pt;

Updating SSA information for statement D.40518_130 = imp_106->ianacode;



Registering new PHI nodes in block #106

Updating SSA information for statement D.40453_133 = map_14->rm_encoding;



Registering new PHI nodes in block #107

Updating SSA information for statement D.40453_134 = map_14->rm_encoding;

Updating SSA information for statement D.40534_135 = imp_106->iananame;

Updating SSA information for statement D.40535_136 = strcasecmp (D.40453_134, D.40534_135);



Registering new PHI nodes in block #108



Registering new PHI nodes in block #109



Registering new PHI nodes in block #110

Updating SSA information for statement add_audio_codec (map_14, ptime_8, &buf, 1024);



Registering new PHI nodes in block #98



Registering new PHI nodes in block #111

Updating SSA information for statement map_139 = map_14->rm_next;



Registering new PHI nodes in block #94



Registering new PHI nodes in block #113



Registering new PHI nodes in block #69

Updating SSA information for statement map_141 = m_2->m_rtpmaps;



Registering new PHI nodes in block #89



Registering new PHI nodes in block #70

Updating SSA information for statement D.40455_142 = map_13->rm_pt;



Registering new PHI nodes in block #71

Updating SSA information for statement D.40455_144 = map_13->rm_pt;

Updating SSA information for statement D.40493_146 = already_did[D.40491_145];



Registering new PHI nodes in block #73



Registering new PHI nodes in block #87



Registering new PHI nodes in block #74

Updating SSA information for statement imp_148 = codecs[i_19];

Updating SSA information for statement D.40453_149 = map_13->rm_encoding;



Registering new PHI nodes in block #75

Updating SSA information for statement D.47387_289 = *D.40453_149;



Registering new PHI nodes in block #76



Registering new PHI nodes in block #77

Updating SSA information for statement D.47386 = D.47388_290;

Updating SSA information for statement D.40497_150 = D.47386;



Registering new PHI nodes in block #78

Updating SSA information for statement D.40499_151 = smh_31->mparams;

Updating SSA information for statement D.40500_152 = D.40499_151->ndlb;



Registering new PHI nodes in block #79

Updating SSA information for statement D.40455_156 = map_13->rm_pt;



Registering new PHI nodes in block #80

Updating SSA information for statement D.40455_158 = map_13->rm_pt;

Updating SSA information for statement D.40505_160 = imp_148->ianacode;



Registering new PHI nodes in block #81

Updating SSA information for statement D.40453_163 = map_13->rm_encoding;



Registering new PHI nodes in block #82

Updating SSA information for statement D.40453_164 = map_13->rm_encoding;

Updating SSA information for statement D.40509_165 = imp_148->iananame;

Updating SSA information for statement D.40510_166 = strcasecmp (D.40453_164, D.40509_165);



Registering new PHI nodes in block #83



Registering new PHI nodes in block #84



Registering new PHI nodes in block #85

Updating SSA information for statement add_audio_codec (map_13, ptime_8, &buf, 1024);



Registering new PHI nodes in block #86



Registering new PHI nodes in block #72



Registering new PHI nodes in block #88

Updating SSA information for statement map_170 = map_13->rm_next;



Registering new PHI nodes in block #115

Updating SSA information for statement D.40437_171 = m_2->m_type;



Registering new PHI nodes in block #116

Updating SSA information for statement D.40441_172 = m_2->m_port;



Registering new PHI nodes in block #117

Updating SSA information for statement connection_173 = sdp_46(D)->sdp_connection;

Updating SSA information for statement D.40479_174 = m_2->m_connections;



Registering new PHI nodes in block #118

Updating SSA information for statement connection_175 = m_2->m_connections;



Registering new PHI nodes in block #119



Registering new PHI nodes in block #120

Updating SSA information for statement D.40547_176 = switch_channel_get_session (channel_29);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 8352, D.40547_176, 3, "Cannot find a c= line in the sdp at media or session level!\n");



Registering new PHI nodes in block #121



Registering new PHI nodes in block #151



Registering new PHI nodes in block #122

Updating SSA information for statement imp_178 = codecs[i_21];

Updating SSA information for statement D.40550_179 = imp_178->codec_type;



Registering new PHI nodes in block #123

Updating SSA information for statement D.40552_180 = imp_178->ianacode;



Registering new PHI nodes in block #124

Updating SSA information for statement D.40552_182 = imp_178->ianacode;

Updating SSA information for statement D.40556_184 = already_did[D.40555_183];



Registering new PHI nodes in block #126

Updating SSA information for statement D.40557_185 = session_28(D)->channel;

Updating SSA information for statement D.40558_186 = switch_channel_direction (D.40557_185);



Registering new PHI nodes in block #127

Updating SSA information for statement D.40557_187 = session_28(D)->channel;

Updating SSA information for statement D.40561_188 = switch_channel_test_flag (D.40557_187, 114);



Registering new PHI nodes in block #128



Registering new PHI nodes in block #129

Updating SSA information for statement map_189 = m_2->m_rtpmaps;



Registering new PHI nodes in block #149



Registering new PHI nodes in block #130

Updating SSA information for statement D.40455_190 = map_15->rm_pt;



Registering new PHI nodes in block #131

Updating SSA information for statement D.40455_192 = map_15->rm_pt;

Updating SSA information for statement D.40493_194 = already_did[D.40491_193];



Registering new PHI nodes in block #133

Updating SSA information for statement D.40453_195 = map_15->rm_encoding;



Registering new PHI nodes in block #134

Updating SSA information for statement D.47395_293 = *D.40453_195;



Registering new PHI nodes in block #135



Registering new PHI nodes in block #136

Updating SSA information for statement D.47394 = D.47396_294;

Updating SSA information for statement D.40570_196 = D.47394;



Registering new PHI nodes in block #137

Updating SSA information for statement D.40499_197 = smh_31->mparams;

Updating SSA information for statement D.40500_198 = D.40499_197->ndlb;



Registering new PHI nodes in block #138

Updating SSA information for statement D.40455_202 = map_15->rm_pt;



Registering new PHI nodes in block #139

Updating SSA information for statement D.40455_204 = map_15->rm_pt;

Updating SSA information for statement D.40552_206 = imp_178->ianacode;



Registering new PHI nodes in block #140

Updating SSA information for statement D.40453_209 = map_15->rm_encoding;



Registering new PHI nodes in block #141

Updating SSA information for statement D.40453_210 = map_15->rm_encoding;

Updating SSA information for statement D.40575_211 = imp_178->iananame;

Updating SSA information for statement D.40576_212 = strcasecmp (D.40453_210, D.40575_211);



Registering new PHI nodes in block #142



Registering new PHI nodes in block #143



Registering new PHI nodes in block #144



Registering new PHI nodes in block #145

Updating SSA information for statement D.40582_215 = strlen (&buf);

Updating SSA information for statement D.40584_217 = strlen (&buf);

Updating SSA information for statement D.40575_219 = imp_178->iananame;

Updating SSA information for statement D.40457_220 = map_15->rm_rate;

Updating SSA information for statement switch_snprintf (D.40583_216, D.40585_218, ",%s@%uh@%di", D.40575_219, D.40457_220, ptime_82);



Registering new PHI nodes in block #146

Updating SSA information for statement D.40587_221 = strlen (&buf);

Updating SSA information for statement D.40589_223 = strlen (&buf);

Updating SSA information for statement D.40575_225 = imp_178->iananame;

Updating SSA information for statement D.40457_226 = map_15->rm_rate;

Updating SSA information for statement switch_snprintf (D.40588_222, D.40590_224, ",%s@%uh", D.40575_225, D.40457_226);



Registering new PHI nodes in block #147

Updating SSA information for statement D.40552_227 = imp_178->ianacode;

Updating SSA information for statement already_did[D.40555_228] = 1;



Registering new PHI nodes in block #132



Registering new PHI nodes in block #148

Updating SSA information for statement map_229 = map_15->rm_next;



Registering new PHI nodes in block #125



Registering new PHI nodes in block #150



Registering new PHI nodes in block #152

Updating SSA information for statement m_231 = m_2->m_next;



Registering new PHI nodes in block #154

Updating SSA information for statement D.40591_232 = buf[0];



Registering new PHI nodes in block #155

Updating SSA information for statement switch_channel_set_variable_var_check (channel_29, "ep_codec_string", &buf[1], 1);



Registering new PHI nodes in block #156



Symbols to be put in SSA form

{ .MEM D.47361 D.47365 D.47369 D.47372 D.47376 D.47379 D.47383 D.47386 D.47390 D.47394 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 157
Number of blocks to update: 156 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 


No longer having address taken: already_did
Scope blocks after cleanups:

{ Scope block #0 
  char buf[1024];
  struct sdp_media_t * m;
  struct sdp_attribute_t * attr;
  int ptime;
  int dptime;
  struct sdp_connection_t * connection;
  struct sdp_rtpmap_t * map;
  short int match;
  int i;
  int already_did[128];
  int num_codecs;
  char * codec_order[50];
  const struct switch_codec_implementation_t * codecs[50];
  struct switch_channel_t * channel;
  int prefer_sdp;
  const char * var;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[41] = "switch_core_media_set_r_sdp_codec_string";
  static const char __func__[41] = "switch_core_media_set_r_sdp_codec_string";

  { Scope block #61 src/switch_core_media.c:8275 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #62 Originating from :#0 

    }

  }

  { Scope block #63 src/switch_core_media.c:8271 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #64 Originating from :#0 

    }

  }

  { Scope block #65 src/switch_core_media.c:8247 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #66 Originating from :#0 

    }

  }

  { Scope block #67 src/switch_core_media.c:8243 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #68 Originating from :#0 

    }

  }

  { Scope block #69 src/switch_core_media.c:8229 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #70 Originating from :#0 

    }

  }

  { Scope block #71 src/switch_core_media.c:8225 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #72 Originating from :#0 

    }

  }

  { Scope block #73 src/switch_core_media.c:8209 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #74 Originating from :#0 

    }

  }

  { Scope block #75 
    char * tmp_codec_string;

  }

  { Scope block #76 
    const struct switch_codec_implementation_t * imp;

    { Scope block #77 src/switch_core_media.c:8298 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #78 Originating from :#0 

      }

    }

  }

  { Scope block #79 
    const struct switch_codec_implementation_t * imp;

    { Scope block #80 src/switch_core_media.c:8327 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #81 Originating from :#0 

      }

    }

  }

  { Scope block #82 
    const struct switch_codec_implementation_t * imp;

    { Scope block #83 src/switch_core_media.c:8372 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #84 Originating from :#0 

      }

    }

  }

}
switch_core_media_set_r_sdp_codec_string (struct switch_core_session_t * session, const char * codec_string, struct sdp_session_t * sdp, switch_sdp_type_t sdp_type)
{
  int D.47396;
  const char D.47395;
  int D.47394;
  int D.47392;
  const char D.47391;
  int D.47390;
  int D.47388;
  const char D.47387;
  int D.47386;
  int D.47384;
  int D.47383;
  int D.47381;
  const char D.47380;
  int D.47379;
  int D.47377;
  int D.47376;
  int D.47374;
  const char D.47373;
  int D.47372;
  int D.47370;
  int D.47369;
  int D.47367;
  const char D.47366;
  int D.47365;
  int D.47363;
  const char D.47362;
  int D.47361;
  const struct switch_codec_implementation_t * imp;
  const struct switch_codec_implementation_t * imp;
  const struct switch_codec_implementation_t * imp;
  char * tmp_codec_string;
  static const char __func__[41] = "switch_core_media_set_r_sdp_codec_string";
  static const char __PRETTY_FUNCTION__[41] = "switch_core_media_set_r_sdp_codec_string";
  struct switch_media_handle_t * smh;
  const char * var;
  int prefer_sdp;
  struct switch_channel_t * channel;
  const struct switch_codec_implementation_t * codecs[50];
  char * codec_order[50];
  int num_codecs;
  int already_did[128];
  int i;
  short int match;
  struct sdp_rtpmap_t * map;
  struct sdp_connection_t * connection;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  char buf[1024];
  char D.40591;
  unsigned int D.40590;
  size_t D.40589;
  char * D.40588;
  size_t D.40587;
  unsigned int D.40585;
  size_t D.40584;
  char * D.40583;
  size_t D.40582;
  int D.40576;
  char * const D.40575;
  int D.40570;
  uint32_t D.40561;
  switch_call_direction_t D.40558;
  struct switch_channel_t * D.40557;
  int D.40556;
  int D.40555;
  signed char D.40553;
  const switch_payload_t D.40552;
  const switch_codec_type_t D.40550;
  struct switch_core_session_t * D.40547;
  int D.40535;
  char * const D.40534;
  int D.40529;
  int D.40522;
  int D.40521;
  signed char D.40519;
  const switch_payload_t D.40518;
  const switch_codec_type_t D.40516;
  int D.40510;
  char * const D.40509;
  int D.40506;
  const switch_payload_t D.40505;
  _Bool D.40503;
  int D.40502;
  int D.40501;
  switch_core_media_NDLB_t D.40500;
  struct switch_core_media_params_t * D.40499;
  int D.40497;
  int D.40493;
  int D.40491;
  switch_call_direction_t D.40487;
  struct switch_core_session_t * D.40484;
  struct sdp_connection_t * D.40479;
  int D.40474;
  int D.40471;
  unsigned int D.40466;
  size_t D.40465;
  char * D.40464;
  size_t D.40463;
  uint32_t ptime.5;
  long unsigned int D.40457;
  uint32_t D.40456;
  <unnamed-unsigned:7> D.40455;
  const char * D.40454;
  const char * D.40453;
  switch_media_type_t D.40452;
  int D.40447;
  int D.40444;
  long unsigned int D.40441;
  unsigned int D.40438;
  sdp_media_e D.40437;
  const char * D.40436;
  int D.40433;
  int D.40430;
  const char * D.40429;
  _Bool D.40426;
  _Bool D.40425;
  _Bool D.40424;
  unsigned int D.40420;
  int D.40415;
  int D.40412;

<bb 2>:
  buf = {};
  ptime_24 = 0;
  # DEBUG ptime => ptime_24
  dptime_25 = 0;
  # DEBUG dptime => dptime_25
  match_26 = 0;
  # DEBUG match => match_26
  already_did = {};
  num_codecs_27 = 0;
  # DEBUG num_codecs => num_codecs_27
  codecs = {};
  channel_29 = switch_core_session_get_channel (session_28(D));
  # DEBUG channel => channel_29
  prefer_sdp_30 = 0;
  # DEBUG prefer_sdp => prefer_sdp_30
  if (session_28(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8198, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_31 = session_28(D)->media_handle;
  # DEBUG smh => smh_31
  if (smh_31 == 0B)
    goto <bb 156>;
  else
    goto <bb 5>;

<bb 5>:
  var_32 = switch_channel_get_variable_dup (channel_29, "ep_codec_prefer_sdp", 1, -1);
  # DEBUG var => var_32
  if (var_32 != 0B)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  D.40412_33 = switch_true (var_32);
  if (D.40412_33 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  prefer_sdp_34 = 1;
  # DEBUG prefer_sdp => prefer_sdp_34

<bb 8>:
  # prefer_sdp_23 = PHI <prefer_sdp_30(5), prefer_sdp_30(6), prefer_sdp_34(7)>
  # DEBUG prefer_sdp => prefer_sdp_23
  # DEBUG s => codec_string_35(D)
  if (codec_string_35(D) == 0B)
    goto <bb 11>;
  else
    goto <bb 9>;

<bb 9>:
  D.47362_278 = *codec_string_35(D);
  if (D.47362_278 == 0)
    goto <bb 11>;
  else
    goto <bb 10>;

<bb 10>:

<bb 11>:
  # D.47363_279 = PHI <1(8), 1(9), 0(10)>
  D.47361_298 = D.47363_279;
  D.40415_36 = D.47361_298;
  if (D.40415_36 == 0)
    goto <bb 12>;
  else
    goto <bb 15>;

<bb 12>:
  tmp_codec_string_37 = __strdup (codec_string_35(D));
  # DEBUG tmp_codec_string => tmp_codec_string_37
  if (tmp_codec_string_37 != 0B)
    goto <bb 13>;
  else
    goto <bb 16>;

<bb 13>:
  D.40420_38 = switch_separate_string (tmp_codec_string_37, 44, &codec_order, 50);
  num_codecs_39 = (int) D.40420_38;
  # DEBUG num_codecs => num_codecs_39
  num_codecs_40 = switch_loadable_module_get_codecs_sorted (&codecs, 50, &codec_order, num_codecs_39);
  # DEBUG num_codecs => num_codecs_40
  if (tmp_codec_string_37 != 0B)
    goto <bb 14>;
  else
    goto <bb 16>;

<bb 14>:
  free (tmp_codec_string_37);
  tmp_codec_string_41 = 0B;
  # DEBUG tmp_codec_string => tmp_codec_string_41
  goto <bb 16>;

<bb 15>:
  num_codecs_42 = switch_loadable_module_get_codecs (&codecs, 50);
  # DEBUG num_codecs => num_codecs_42

<bb 16>:
  # num_codecs_22 = PHI <num_codecs_40(13), num_codecs_42(15), num_codecs_27(12), num_codecs_40(14)>
  # DEBUG num_codecs => num_codecs_22
  D.40424_43 = channel_29 == 0B;
  D.40425_44 = num_codecs_22 == 0;
  D.40426_45 = D.40424_43 || D.40425_44;
  if (D.40426_45 != 0)
    goto <bb 156>;
  else
    goto <bb 17>;

<bb 17>:
  attr_47 = sdp_46(D)->sdp_attributes;
  # DEBUG attr => attr_47
  goto <bb 26>;

<bb 18>:
  D.40429_48 = attr_3->a_name;
  # DEBUG s => D.40429_48
  if (D.40429_48 == 0B)
    goto <bb 21>;
  else
    goto <bb 19>;

<bb 19>:
  D.47366_280 = *D.40429_48;
  if (D.47366_280 == 0)
    goto <bb 21>;
  else
    goto <bb 20>;

<bb 20>:

<bb 21>:
  # D.47367_281 = PHI <1(18), 1(19), 0(20)>
  D.47365_299 = D.47367_281;
  D.40430_49 = D.47365_299;
  if (D.40430_49 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  // predicted unlikely by continue predictor.
  goto <bb 25>;

<bb 23>:
  D.40429_50 = attr_3->a_name;
  D.40433_51 = strcasecmp (D.40429_50, "ptime");
  if (D.40433_51 == 0)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  D.40436_52 = attr_3->a_value;
  # DEBUG __nptr => D.40436_52
  D.47370_282 = strtol (D.40436_52, 0B, 10);
  D.47369_301 = D.47370_282;
  dptime_53 = D.47369_301;
  # DEBUG dptime => NULL
  goto <bb 27>;

<bb 25>:
  attr_54 = attr_3->a_next;
  # DEBUG attr => attr_54

<bb 26>:
  # attr_3 = PHI <attr_47(17), attr_54(25)>
  # DEBUG attr => attr_3
  if (attr_3 != 0B)
    goto <bb 18>;
  else
    goto <bb 27>;

<bb 27>:
  # dptime_9 = PHI <dptime_53(24), dptime_25(26)>
  # DEBUG dptime => dptime_9
  switch_core_media_find_zrtp_hash (session_28(D), sdp_46(D));
  switch_core_media_pass_zrtp_hash (session_28(D));
  m_55 = sdp_46(D)->sdp_media;
  # DEBUG m => m_55
  goto <bb 45>;

<bb 28>:
  ptime_56 = dptime_9;
  # DEBUG ptime => ptime_56
  D.40437_57 = m_1->m_type;
  D.40438_58 = D.40437_57 + 4294967294;
  if (D.40438_58 <= 1)
    goto <bb 29>;
  else
    goto <bb 44>;

<bb 29>:
  D.40441_59 = m_1->m_port;
  if (D.40441_59 != 0)
    goto <bb 30>;
  else
    goto <bb 44>;

<bb 30>:
  map_60 = m_1->m_rtpmaps;
  # DEBUG map => map_60
  goto <bb 43>;

<bb 31>:
  attr_61 = m_1->m_attributes;
  # DEBUG attr => attr_61
  goto <bb 41>;

<bb 32>:
  D.40429_62 = attr_4->a_name;
  # DEBUG s => D.40429_62
  if (D.40429_62 == 0B)
    goto <bb 35>;
  else
    goto <bb 33>;

<bb 33>:
  D.47373_283 = *D.40429_62;
  if (D.47373_283 == 0)
    goto <bb 35>;
  else
    goto <bb 34>;

<bb 34>:

<bb 35>:
  # D.47374_284 = PHI <1(32), 1(33), 0(34)>
  D.47372_302 = D.47374_284;
  D.40444_63 = D.47372_302;
  if (D.40444_63 != 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  // predicted unlikely by continue predictor.
  goto <bb 40>;

<bb 37>:
  D.40429_64 = attr_4->a_name;
  D.40447_65 = strcasecmp (D.40429_64, "ptime");
  if (D.40447_65 == 0)
    goto <bb 38>;
  else
    goto <bb 40>;

<bb 38>:
  D.40436_66 = attr_4->a_value;
  if (D.40436_66 != 0B)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.40436_67 = attr_4->a_value;
  # DEBUG __nptr => D.40436_67
  D.47377_285 = strtol (D.40436_67, 0B, 10);
  D.47376_304 = D.47377_285;
  ptime_68 = D.47376_304;
  # DEBUG ptime => NULL
  goto <bb 42>;

<bb 40>:
  attr_69 = attr_4->a_next;
  # DEBUG attr => attr_69

<bb 41>:
  # attr_4 = PHI <attr_61(31), attr_69(40)>
  # DEBUG attr => attr_4
  if (attr_4 != 0B)
    goto <bb 32>;
  else
    goto <bb 42>;

<bb 42>:
  # ptime_6 = PHI <ptime_68(39), ptime_7(41)>
  # DEBUG ptime => ptime_6
  D.40437_70 = m_1->m_type;
  D.40452_71 = D.40437_70 != 2;
  D.40453_72 = map_12->rm_encoding;
  D.40454_73 = map_12->rm_fmtp;
  D.40455_74 = map_12->rm_pt;
  D.40456_75 = (uint32_t) D.40455_74;
  D.40457_76 = map_12->rm_rate;
  ptime.5_77 = (uint32_t) ptime_6;
  switch_core_media_add_payload_map (session_28(D), D.40452_71, D.40453_72, D.40454_73, sdp_type_78(D), D.40456_75, D.40457_76, ptime.5_77, 0);
  map_79 = map_12->rm_next;
  # DEBUG map => map_79

<bb 43>:
  # ptime_7 = PHI <ptime_56(30), ptime_6(42)>
  # map_12 = PHI <map_60(30), map_79(42)>
  # DEBUG map => map_12
  # DEBUG ptime => ptime_7
  if (map_12 != 0B)
    goto <bb 31>;
  else
    goto <bb 44>;

<bb 44>:
  m_80 = m_1->m_next;
  # DEBUG m => m_80

<bb 45>:
  # m_1 = PHI <m_55(27), m_80(44)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 28>;
  else
    goto <bb 46>;

<bb 46>:
  m_81 = sdp_46(D)->sdp_media;
  # DEBUG m => m_81
  goto <bb 153>;

<bb 47>:
  ptime_82 = dptime_9;
  # DEBUG ptime => ptime_82
  D.40437_83 = m_2->m_type;
  if (D.40437_83 == 8)
    goto <bb 48>;
  else
    goto <bb 50>;

<bb 48>:
  D.40441_84 = m_2->m_port;
  if (D.40441_84 != 0)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  D.40463_85 = strlen (&buf);
  D.40464_86 = &buf + D.40463_85;
  D.40465_87 = strlen (&buf);
  D.40466_88 = 1024 - D.40465_87;
  switch_snprintf (D.40464_86, D.40466_88, ",t38");
  goto <bb 152>;

<bb 50>:
  D.40437_89 = m_2->m_type;
  if (D.40437_89 == 2)
    goto <bb 51>;
  else
    goto <bb 115>;

<bb 51>:
  D.40441_90 = m_2->m_port;
  if (D.40441_90 != 0)
    goto <bb 52>;
  else
    goto <bb 115>;

<bb 52>:
  attr_91 = m_2->m_attributes;
  # DEBUG attr => attr_91
  goto <bb 62>;

<bb 53>:
  D.40429_92 = attr_5->a_name;
  # DEBUG s => D.40429_92
  if (D.40429_92 == 0B)
    goto <bb 56>;
  else
    goto <bb 54>;

<bb 54>:
  D.47380_286 = *D.40429_92;
  if (D.47380_286 == 0)
    goto <bb 56>;
  else
    goto <bb 55>;

<bb 55>:

<bb 56>:
  # D.47381_287 = PHI <1(53), 1(54), 0(55)>
  D.47379_305 = D.47381_287;
  D.40471_93 = D.47379_305;
  if (D.40471_93 != 0)
    goto <bb 57>;
  else
    goto <bb 58>;

<bb 57>:
  // predicted unlikely by continue predictor.
  goto <bb 61>;

<bb 58>:
  D.40429_94 = attr_5->a_name;
  D.40474_95 = strcasecmp (D.40429_94, "ptime");
  if (D.40474_95 == 0)
    goto <bb 59>;
  else
    goto <bb 61>;

<bb 59>:
  D.40436_96 = attr_5->a_value;
  if (D.40436_96 != 0B)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  D.40436_97 = attr_5->a_value;
  # DEBUG __nptr => D.40436_97
  D.47384_288 = strtol (D.40436_97, 0B, 10);
  D.47383_307 = D.47384_288;
  ptime_98 = D.47383_307;
  # DEBUG ptime => NULL
  goto <bb 63>;

<bb 61>:
  attr_99 = attr_5->a_next;
  # DEBUG attr => attr_99

<bb 62>:
  # attr_5 = PHI <attr_91(52), attr_99(61)>
  # DEBUG attr => attr_5
  if (attr_5 != 0B)
    goto <bb 53>;
  else
    goto <bb 63>;

<bb 63>:
  # ptime_8 = PHI <ptime_98(60), ptime_82(62)>
  # DEBUG ptime => ptime_8
  connection_100 = sdp_46(D)->sdp_connection;
  # DEBUG connection => connection_100
  D.40479_101 = m_2->m_connections;
  if (D.40479_101 != 0B)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  connection_102 = m_2->m_connections;
  # DEBUG connection => connection_102

<bb 65>:
  # connection_10 = PHI <connection_100(63), connection_102(64)>
  # DEBUG connection => connection_10
  if (connection_10 == 0B)
    goto <bb 66>;
  else
    goto <bb 67>;

<bb 66>:
  D.40484_103 = switch_channel_get_session (channel_29);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 8285, D.40484_103, 3, "Cannot find a c= line in the sdp at media or session level!\n");
  goto <bb 154>;

<bb 67>:
  D.40487_104 = switch_channel_direction (channel_29);
  if (D.40487_104 == 0)
    goto <bb 69>;
  else
    goto <bb 68>;

<bb 68>:
  if (prefer_sdp_23 != 0)
    goto <bb 69>;
  else
    goto <bb 90>;

<bb 69>:
  map_141 = m_2->m_rtpmaps;
  # DEBUG map => map_141
  goto <bb 89>;

<bb 70>:
  D.40455_142 = map_13->rm_pt;
  D.40491_143 = (int) D.40455_142;
  if (D.40491_143 > 127)
    goto <bb 72>;
  else
    goto <bb 71>;

<bb 71>:
  D.40455_144 = map_13->rm_pt;
  D.40491_145 = (int) D.40455_144;
  D.40493_146 = already_did[D.40491_145];
  if (D.40493_146 != 0)
    goto <bb 72>;
  else
    goto <bb 73>;

<bb 72>:
  // predicted unlikely by continue predictor.
  goto <bb 88>;

<bb 73>:
  i_147 = 0;
  # DEBUG i => i_147
  goto <bb 87>;

<bb 74>:
  imp_148 = codecs[i_19];
  # DEBUG imp => imp_148
  D.40453_149 = map_13->rm_encoding;
  # DEBUG s => D.40453_149
  if (D.40453_149 == 0B)
    goto <bb 77>;
  else
    goto <bb 75>;

<bb 75>:
  D.47387_289 = *D.40453_149;
  if (D.47387_289 == 0)
    goto <bb 77>;
  else
    goto <bb 76>;

<bb 76>:

<bb 77>:
  # D.47388_290 = PHI <1(74), 1(75), 0(76)>
  D.47386_309 = D.47388_290;
  D.40497_150 = D.47386_309;
  if (D.40497_150 != 0)
    goto <bb 79>;
  else
    goto <bb 78>;

<bb 78>:
  D.40499_151 = smh_31->mparams;
  D.40500_152 = D.40499_151->ndlb;
  D.40501_153 = (int) D.40500_152;
  D.40502_154 = D.40501_153 & 1;
  D.40503_155 = (_Bool) D.40502_154;
  if (D.40503_155 != 0)
    goto <bb 79>;
  else
    goto <bb 81>;

<bb 79>:
  D.40455_156 = map_13->rm_pt;
  D.40491_157 = (int) D.40455_156;
  if (D.40491_157 <= 95)
    goto <bb 80>;
  else
    goto <bb 81>;

<bb 80>:
  D.40455_158 = map_13->rm_pt;
  D.40491_159 = (int) D.40455_158;
  D.40505_160 = imp_148->ianacode;
  D.40506_161 = (int) D.40505_160;
  match_162 = D.40491_159 == D.40506_161;
  # DEBUG match => match_162
  goto <bb 84>;

<bb 81>:
  D.40453_163 = map_13->rm_encoding;
  if (D.40453_163 != 0B)
    goto <bb 82>;
  else
    goto <bb 83>;

<bb 82>:
  D.40453_164 = map_13->rm_encoding;
  D.40509_165 = imp_148->iananame;
  D.40510_166 = strcasecmp (D.40453_164, D.40509_165);
  match_167 = D.40510_166 == 0;
  # DEBUG match => match_167
  goto <bb 84>;

<bb 83>:
  match_168 = 0;
  # DEBUG match => match_168

<bb 84>:
  # match_16 = PHI <match_162(80), match_167(82), match_168(83)>
  # DEBUG match => match_16
  if (match_16 != 0)
    goto <bb 85>;
  else
    goto <bb 86>;

<bb 85>:
  add_audio_codec (map_13, ptime_8, &buf, 1024);
  goto <bb 88>;

<bb 86>:
  i_169 = i_19 + 1;
  # DEBUG i => i_169

<bb 87>:
  # i_19 = PHI <i_147(73), i_169(86)>
  # DEBUG i => i_19
  if (i_19 < num_codecs_22)
    goto <bb 74>;
  else
    goto <bb 88>;

<bb 88>:
  map_170 = map_13->rm_next;
  # DEBUG map => map_170

<bb 89>:
  # map_13 = PHI <map_141(69), map_170(88)>
  # DEBUG map => map_13
  if (map_13 != 0B)
    goto <bb 70>;
  else
    goto <bb 152>;

<bb 90>:
  i_105 = 0;
  # DEBUG i => i_105
  goto <bb 114>;

<bb 91>:
  imp_106 = codecs[i_20];
  # DEBUG imp => imp_106
  D.40516_107 = imp_106->codec_type;
  if (D.40516_107 != 0)
    goto <bb 94>;
  else
    goto <bb 92>;

<bb 92>:
  D.40518_108 = imp_106->ianacode;
  D.40519_109 = (signed char) D.40518_108;
  if (D.40519_109 < 0)
    goto <bb 94>;
  else
    goto <bb 93>;

<bb 93>:
  D.40518_110 = imp_106->ianacode;
  D.40521_111 = (int) D.40518_110;
  D.40522_112 = already_did[D.40521_111];
  if (D.40522_112 != 0)
    goto <bb 94>;
  else
    goto <bb 95>;

<bb 94>:
  // predicted unlikely by continue predictor.
  goto <bb 113>;

<bb 95>:
  map_113 = m_2->m_rtpmaps;
  # DEBUG map => map_113
  goto <bb 112>;

<bb 96>:
  D.40455_114 = map_14->rm_pt;
  D.40491_115 = (int) D.40455_114;
  if (D.40491_115 > 127)
    goto <bb 98>;
  else
    goto <bb 97>;

<bb 97>:
  D.40455_116 = map_14->rm_pt;
  D.40491_117 = (int) D.40455_116;
  D.40493_118 = already_did[D.40491_117];
  if (D.40493_118 != 0)
    goto <bb 98>;
  else
    goto <bb 99>;

<bb 98>:
  // predicted unlikely by continue predictor.
  goto <bb 111>;

<bb 99>:
  D.40453_119 = map_14->rm_encoding;
  # DEBUG s => D.40453_119
  if (D.40453_119 == 0B)
    goto <bb 102>;
  else
    goto <bb 100>;

<bb 100>:
  D.47391_291 = *D.40453_119;
  if (D.47391_291 == 0)
    goto <bb 102>;
  else
    goto <bb 101>;

<bb 101>:

<bb 102>:
  # D.47392_292 = PHI <1(99), 1(100), 0(101)>
  D.47390_308 = D.47392_292;
  D.40529_120 = D.47390_308;
  if (D.40529_120 != 0)
    goto <bb 104>;
  else
    goto <bb 103>;

<bb 103>:
  D.40499_121 = smh_31->mparams;
  D.40500_122 = D.40499_121->ndlb;
  D.40501_123 = (int) D.40500_122;
  D.40502_124 = D.40501_123 & 1;
  D.40503_125 = (_Bool) D.40502_124;
  if (D.40503_125 != 0)
    goto <bb 104>;
  else
    goto <bb 106>;

<bb 104>:
  D.40455_126 = map_14->rm_pt;
  D.40491_127 = (int) D.40455_126;
  if (D.40491_127 <= 95)
    goto <bb 105>;
  else
    goto <bb 106>;

<bb 105>:
  D.40455_128 = map_14->rm_pt;
  D.40491_129 = (int) D.40455_128;
  D.40518_130 = imp_106->ianacode;
  D.40521_131 = (int) D.40518_130;
  match_132 = D.40491_129 == D.40521_131;
  # DEBUG match => match_132
  goto <bb 109>;

<bb 106>:
  D.40453_133 = map_14->rm_encoding;
  if (D.40453_133 != 0B)
    goto <bb 107>;
  else
    goto <bb 108>;

<bb 107>:
  D.40453_134 = map_14->rm_encoding;
  D.40534_135 = imp_106->iananame;
  D.40535_136 = strcasecmp (D.40453_134, D.40534_135);
  match_137 = D.40535_136 == 0;
  # DEBUG match => match_137
  goto <bb 109>;

<bb 108>:
  match_138 = 0;
  # DEBUG match => match_138

<bb 109>:
  # match_17 = PHI <match_132(105), match_137(107), match_138(108)>
  # DEBUG match => match_17
  if (match_17 != 0)
    goto <bb 110>;
  else
    goto <bb 111>;

<bb 110>:
  add_audio_codec (map_14, ptime_8, &buf, 1024);
  goto <bb 113>;

<bb 111>:
  map_139 = map_14->rm_next;
  # DEBUG map => map_139

<bb 112>:
  # map_14 = PHI <map_113(95), map_139(111)>
  # DEBUG map => map_14
  if (map_14 != 0B)
    goto <bb 96>;
  else
    goto <bb 113>;

<bb 113>:
  i_140 = i_20 + 1;
  # DEBUG i => i_140

<bb 114>:
  # i_20 = PHI <i_105(90), i_140(113)>
  # DEBUG i => i_20
  if (i_20 < num_codecs_22)
    goto <bb 91>;
  else
    goto <bb 152>;

<bb 115>:
  D.40437_171 = m_2->m_type;
  if (D.40437_171 == 3)
    goto <bb 116>;
  else
    goto <bb 152>;

<bb 116>:
  D.40441_172 = m_2->m_port;
  if (D.40441_172 != 0)
    goto <bb 117>;
  else
    goto <bb 152>;

<bb 117>:
  connection_173 = sdp_46(D)->sdp_connection;
  # DEBUG connection => connection_173
  D.40479_174 = m_2->m_connections;
  if (D.40479_174 != 0B)
    goto <bb 118>;
  else
    goto <bb 119>;

<bb 118>:
  connection_175 = m_2->m_connections;
  # DEBUG connection => connection_175

<bb 119>:
  # connection_11 = PHI <connection_173(117), connection_175(118)>
  # DEBUG connection => connection_11
  if (connection_11 == 0B)
    goto <bb 120>;
  else
    goto <bb 121>;

<bb 120>:
  D.40547_176 = switch_channel_get_session (channel_29);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 8352, D.40547_176, 3, "Cannot find a c= line in the sdp at media or session level!\n");
  goto <bb 154>;

<bb 121>:
  i_177 = 0;
  # DEBUG i => i_177
  goto <bb 151>;

<bb 122>:
  imp_178 = codecs[i_21];
  # DEBUG imp => imp_178
  D.40550_179 = imp_178->codec_type;
  if (D.40550_179 != 1)
    goto <bb 125>;
  else
    goto <bb 123>;

<bb 123>:
  D.40552_180 = imp_178->ianacode;
  D.40553_181 = (signed char) D.40552_180;
  if (D.40553_181 < 0)
    goto <bb 125>;
  else
    goto <bb 124>;

<bb 124>:
  D.40552_182 = imp_178->ianacode;
  D.40555_183 = (int) D.40552_182;
  D.40556_184 = already_did[D.40555_183];
  if (D.40556_184 != 0)
    goto <bb 125>;
  else
    goto <bb 126>;

<bb 125>:
  // predicted unlikely by continue predictor.
  goto <bb 150>;

<bb 126>:
  D.40557_185 = session_28(D)->channel;
  D.40558_186 = switch_channel_direction (D.40557_185);
  if (D.40558_186 == 0)
    goto <bb 127>;
  else
    goto <bb 129>;

<bb 127>:
  D.40557_187 = session_28(D)->channel;
  D.40561_188 = switch_channel_test_flag (D.40557_187, 114);
  if (D.40561_188 != 0)
    goto <bb 128>;
  else
    goto <bb 129>;

<bb 128>:
  // predicted unlikely by continue predictor.
  goto <bb 150>;

<bb 129>:
  map_189 = m_2->m_rtpmaps;
  # DEBUG map => map_189
  goto <bb 149>;

<bb 130>:
  D.40455_190 = map_15->rm_pt;
  D.40491_191 = (int) D.40455_190;
  if (D.40491_191 > 127)
    goto <bb 132>;
  else
    goto <bb 131>;

<bb 131>:
  D.40455_192 = map_15->rm_pt;
  D.40491_193 = (int) D.40455_192;
  D.40493_194 = already_did[D.40491_193];
  if (D.40493_194 != 0)
    goto <bb 132>;
  else
    goto <bb 133>;

<bb 132>:
  // predicted unlikely by continue predictor.
  goto <bb 148>;

<bb 133>:
  D.40453_195 = map_15->rm_encoding;
  # DEBUG s => D.40453_195
  if (D.40453_195 == 0B)
    goto <bb 136>;
  else
    goto <bb 134>;

<bb 134>:
  D.47395_293 = *D.40453_195;
  if (D.47395_293 == 0)
    goto <bb 136>;
  else
    goto <bb 135>;

<bb 135>:

<bb 136>:
  # D.47396_294 = PHI <1(133), 1(134), 0(135)>
  D.47394_310 = D.47396_294;
  D.40570_196 = D.47394_310;
  if (D.40570_196 != 0)
    goto <bb 138>;
  else
    goto <bb 137>;

<bb 137>:
  D.40499_197 = smh_31->mparams;
  D.40500_198 = D.40499_197->ndlb;
  D.40501_199 = (int) D.40500_198;
  D.40502_200 = D.40501_199 & 1;
  D.40503_201 = (_Bool) D.40502_200;
  if (D.40503_201 != 0)
    goto <bb 138>;
  else
    goto <bb 140>;

<bb 138>:
  D.40455_202 = map_15->rm_pt;
  D.40491_203 = (int) D.40455_202;
  if (D.40491_203 <= 95)
    goto <bb 139>;
  else
    goto <bb 140>;

<bb 139>:
  D.40455_204 = map_15->rm_pt;
  D.40491_205 = (int) D.40455_204;
  D.40552_206 = imp_178->ianacode;
  D.40555_207 = (int) D.40552_206;
  match_208 = D.40491_205 == D.40555_207;
  # DEBUG match => match_208
  goto <bb 143>;

<bb 140>:
  D.40453_209 = map_15->rm_encoding;
  if (D.40453_209 != 0B)
    goto <bb 141>;
  else
    goto <bb 142>;

<bb 141>:
  D.40453_210 = map_15->rm_encoding;
  D.40575_211 = imp_178->iananame;
  D.40576_212 = strcasecmp (D.40453_210, D.40575_211);
  match_213 = D.40576_212 == 0;
  # DEBUG match => match_213
  goto <bb 143>;

<bb 142>:
  match_214 = 0;
  # DEBUG match => match_214

<bb 143>:
  # match_18 = PHI <match_208(139), match_213(141), match_214(142)>
  # DEBUG match => match_18
  if (match_18 != 0)
    goto <bb 144>;
  else
    goto <bb 148>;

<bb 144>:
  if (ptime_82 > 0)
    goto <bb 145>;
  else
    goto <bb 146>;

<bb 145>:
  D.40582_215 = strlen (&buf);
  D.40583_216 = &buf + D.40582_215;
  D.40584_217 = strlen (&buf);
  D.40585_218 = 1024 - D.40584_217;
  D.40575_219 = imp_178->iananame;
  D.40457_220 = map_15->rm_rate;
  switch_snprintf (D.40583_216, D.40585_218, ",%s@%uh@%di", D.40575_219, D.40457_220, ptime_82);
  goto <bb 147>;

<bb 146>:
  D.40587_221 = strlen (&buf);
  D.40588_222 = &buf + D.40587_221;
  D.40589_223 = strlen (&buf);
  D.40590_224 = 1024 - D.40589_223;
  D.40575_225 = imp_178->iananame;
  D.40457_226 = map_15->rm_rate;
  switch_snprintf (D.40588_222, D.40590_224, ",%s@%uh", D.40575_225, D.40457_226);

<bb 147>:
  D.40552_227 = imp_178->ianacode;
  D.40555_228 = (int) D.40552_227;
  already_did[D.40555_228] = 1;
  goto <bb 150>;

<bb 148>:
  map_229 = map_15->rm_next;
  # DEBUG map => map_229

<bb 149>:
  # map_15 = PHI <map_189(129), map_229(148)>
  # DEBUG map => map_15
  if (map_15 != 0B)
    goto <bb 130>;
  else
    goto <bb 150>;

<bb 150>:
  i_230 = i_21 + 1;
  # DEBUG i => i_230

<bb 151>:
  # i_21 = PHI <i_177(121), i_230(150)>
  # DEBUG i => i_21
  if (i_21 < num_codecs_22)
    goto <bb 122>;
  else
    goto <bb 152>;

<bb 152>:
  m_231 = m_2->m_next;
  # DEBUG m => m_231

<bb 153>:
  # m_2 = PHI <m_81(46), m_231(152)>
  # DEBUG m => m_2
  if (m_2 != 0B)
    goto <bb 47>;
  else
    goto <bb 154>;

<bb 154>:
  D.40591_232 = buf[0];
  if (D.40591_232 == 44)
    goto <bb 155>;
  else
    goto <bb 156>;

<bb 155>:
  switch_channel_set_variable_var_check (channel_29, "ep_codec_string", &buf[1], 1);

<bb 156>:
  return;

}



;; Function switch_core_media_get_codec_string (switch_core_media_get_codec_string)

Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_get_codec_string.
Processing frequency _zstr
  Called by switch_core_media_get_codec_string that is normal or hot
Inlining _zstr to switch_core_media_get_codec_string with frequency 1000
Iterations: 1
Merging blocks 12 and 17
Merging blocks 20 and 16


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 685, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_8 = session_7(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.46980_11 = session_7(D)->channel;

Updating SSA information for statement preferred_12 = switch_channel_get_variable_dup (D.46980_11, "absolute_codec_string", 1, -1);



Registering new PHI nodes in block #7

Updating SSA information for statement D.46980_13 = session_7(D)->channel;

Updating SSA information for statement preferred_14 = switch_channel_get_variable_dup (D.46980_13, "codec_string", 1, -1);



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9

Updating SSA information for statement D.46980_15 = session_7(D)->channel;

Updating SSA information for statement D.46985_16 = switch_channel_direction (D.46980_15);



Registering new PHI nodes in block #10

Updating SSA information for statement D.46988_17 = smh_8->mparams;

Updating SSA information for statement preferred_18 = D.46988_17->outbound_codec_string;

Updating SSA information for statement D.46988_19 = smh_8->mparams;

Updating SSA information for statement fallback_20 = D.46988_19->inbound_codec_string;



Registering new PHI nodes in block #11

Updating SSA information for statement D.46988_21 = smh_8->mparams;

Updating SSA information for statement preferred_22 = D.46988_21->inbound_codec_string;

Updating SSA information for statement D.46988_23 = smh_8->mparams;

Updating SSA information for statement fallback_24 = D.46988_23->outbound_codec_string;



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13

Updating SSA information for statement D.47401_35 = *preferred_2;



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement D.47400 = D.47402_36;

Updating SSA information for statement D.46992_25 = D.47400;



Registering new PHI nodes in block #17



Registering new PHI nodes in block #16



Registering new PHI nodes in block #18



Symbols to be put in SSA form

{ .MEM D.47400 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 19
Number of blocks to update: 18 ( 95%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 


Scope blocks after cleanups:

{ Scope block #0 
  const char * preferred;
  const char * fallback;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_get_codec_string";

  { Scope block #85 src/switch_core_media.c:708 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #86 Originating from :#0 

    }

  }

}
switch_core_media_get_codec_string (struct switch_core_session_t * session)
{
  int D.47402;
  const char D.47401;
  int D.47400;
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_get_codec_string";
  struct switch_media_handle_t * smh;
  const char * fallback;
  const char * preferred;
  int D.46992;
  const char * iftmp.168;
  const char * D.46990;
  struct switch_core_media_params_t * D.46988;
  switch_call_direction_t D.46985;
  struct switch_channel_t * D.46980;

<bb 2>:
  preferred_5 = 0B;
  # DEBUG preferred => preferred_5
  fallback_6 = 0B;
  # DEBUG fallback => fallback_6
  if (session_7(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 685, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_8 = session_7(D)->media_handle;
  # DEBUG smh => smh_8
  if (smh_8 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  preferred_9 = "PCMU";
  # DEBUG preferred => preferred_9
  fallback_10 = "PCMU";
  # DEBUG fallback => fallback_10
  goto <bb 12>;

<bb 6>:
  D.46980_11 = session_7(D)->channel;
  preferred_12 = switch_channel_get_variable_dup (D.46980_11, "absolute_codec_string", 1, -1);
  # DEBUG preferred => preferred_12
  if (preferred_12 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.46980_13 = session_7(D)->channel;
  preferred_14 = switch_channel_get_variable_dup (D.46980_13, "codec_string", 1, -1);
  # DEBUG preferred => preferred_14

<bb 8>:
  # preferred_1 = PHI <preferred_12(6), preferred_14(7)>
  # DEBUG preferred => preferred_1
  if (preferred_1 == 0B)
    goto <bb 9>;
  else
    goto <bb 12>;

<bb 9>:
  D.46980_15 = session_7(D)->channel;
  D.46985_16 = switch_channel_direction (D.46980_15);
  if (D.46985_16 == 1)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.46988_17 = smh_8->mparams;
  preferred_18 = D.46988_17->outbound_codec_string;
  # DEBUG preferred => preferred_18
  D.46988_19 = smh_8->mparams;
  fallback_20 = D.46988_19->inbound_codec_string;
  # DEBUG fallback => fallback_20
  goto <bb 12>;

<bb 11>:
  D.46988_21 = smh_8->mparams;
  preferred_22 = D.46988_21->inbound_codec_string;
  # DEBUG preferred => preferred_22
  D.46988_23 = smh_8->mparams;
  fallback_24 = D.46988_23->outbound_codec_string;
  # DEBUG fallback => fallback_24

<bb 12>:
  # preferred_2 = PHI <preferred_9(5), preferred_1(8), preferred_18(10), preferred_22(11)>
  # fallback_3 = PHI <fallback_10(5), fallback_6(8), fallback_20(10), fallback_24(11)>
  # DEBUG fallback => fallback_3
  # DEBUG preferred => preferred_2
  # DEBUG s => preferred_2
  if (preferred_2 == 0B)
    goto <bb 15>;
  else
    goto <bb 13>;

<bb 13>:
  D.47401_35 = *preferred_2;
  if (D.47401_35 == 0)
    goto <bb 15>;
  else
    goto <bb 14>;

<bb 14>:

<bb 15>:
  # D.47402_36 = PHI <1(12), 1(13), 0(14)>
  D.47400_37 = D.47402_36;
  D.46992_25 = D.47400_37;
  if (D.46992_25 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  iftmp.168_26 = preferred_2;
  goto <bb 18>;

<bb 17>:
  iftmp.168_27 = fallback_3;

<bb 18>:
  # iftmp.168_4 = PHI <iftmp.168_26(16), iftmp.168_27(17)>
  D.46990_28 = iftmp.168_4;
  return D.46990_28;

}



;; Function switch_core_session_clear_crypto (switch_core_session_clear_crypto)

Iterations: 0
switch_core_session_clear_crypto (struct switch_core_session_t * session)
{
  const char * vars[11];
  struct switch_media_handle_t * smh;
  int i;
  void * D.46973;
  struct switch_secure_settings_t[10] * D.46972;
  void * D.46971;
  unsigned int D.46970;
  unsigned int i.167;
  struct switch_secure_settings_t[10] * D.46968;
  const char * D.46965;
  struct switch_channel_t * D.46964;

<bb 2>:
  vars = *.LC10;
  i_3 = 0;
  # DEBUG i => i_3
  goto <bb 4>;

<bb 3>:
  D.46964_6 = session_5(D)->channel;
  D.46965_7 = vars[i_1];
  switch_channel_set_variable_var_check (D.46964_6, D.46965_7, 0B, 1);
  i_8 = i_1 + 1;
  # DEBUG i => i_8

<bb 4>:
  # i_1 = PHI <i_3(2), i_8(3)>
  # DEBUG i => i_1
  D.46965_4 = vars[i_1];
  if (D.46965_4 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 5>:
  smh_9 = session_5(D)->media_handle;
  # DEBUG smh => smh_9
  if (smh_9 == 0B)
    goto <bb 9>;
  else
    goto <bb 6>;

<bb 6>:
  i_10 = 0;
  # DEBUG i => i_10
  goto <bb 8>;

<bb 7>:
  D.46968_11 = &smh_9->engines[0].ssec;
  i.167_12 = (unsigned int) i_2;
  D.46970_13 = i.167_12 * 144;
  D.46971_14 = D.46968_11 + D.46970_13;
  memset (D.46971_14, 0, 144);
  D.46972_15 = &smh_9->engines[1].ssec;
  i.167_16 = (unsigned int) i_2;
  D.46970_17 = i.167_16 * 144;
  D.46973_18 = D.46972_15 + D.46970_17;
  memset (D.46973_18, 0, 144);
  i_19 = i_2 + 1;
  # DEBUG i => i_19

<bb 8>:
  # i_2 = PHI <i_10(6), i_19(7)>
  # DEBUG i => i_2
  if (i_2 <= 8)
    goto <bb 7>;
  else
    goto <bb 9>;

<bb 9>:
  return;

}



;; Function switch_core_session_local_crypto_key (switch_core_session_local_crypto_key)

Iterations: 0
switch_core_session_local_crypto_key (struct switch_core_session_t * session, switch_media_type_t type)
{
  switch_rtp_crypto_key_type_t D.46951;
  const char * D.46950;
  struct switch_media_handle_t * D.46947;

<bb 2>:
  D.46947_3 = session_2(D)->media_handle;
  if (D.46947_3 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.46950_4 = 0B;
  goto <bb 5>;

<bb 4>:
  D.46947_5 = session_2(D)->media_handle;
  D.46947_6 = session_2(D)->media_handle;
  D.46951_8 = D.46947_6->engines[type_7(D)].crypto_type;
  D.46950_9 = D.46947_6->engines[type_7(D)].ssec[D.46951_8].local_crypto_key;

<bb 5>:
  # D.46950_1 = PHI <D.46950_4(3), D.46950_9(4)>
  return D.46950_1;

}



;; Function switch_core_media_parse_rtp_bugs (switch_core_media_parse_rtp_bugs)

Iterations: 0
switch_core_media_parse_rtp_bugs (switch_rtp_bug_flag_t * flag_pole, const char * str)
{
  unsigned int D.46946;
  const char * D.46943;
  unsigned int D.46942;
  const char * D.46939;
  unsigned int D.46938;
  const char * D.46935;
  unsigned int D.46934;
  const char * D.46931;
  unsigned int D.46930;
  const char * D.46927;
  unsigned int D.46926;
  const char * D.46923;
  unsigned int D.46922;
  const char * D.46919;
  unsigned int D.46918;
  const char * D.46915;
  unsigned int D.46914;
  const char * D.46911;
  unsigned int D.46910;
  const char * D.46907;
  unsigned int D.46906;
  const char * D.46903;
  unsigned int D.46902;
  const char * D.46899;
  unsigned int D.46898;
  const char * D.46895;
  unsigned int D.46894;
  const char * D.46891;
  unsigned int D.46890;
  const char * D.46887;
  unsigned int D.46886;
  const char * D.46883;
  unsigned int D.46882;
  const char * D.46879;
  unsigned int D.46878;
  const char * D.46875;
  unsigned int D.46874;
  const char * D.46871;
  unsigned int D.46870;
  const char * D.46867;
  unsigned int D.46866;
  const char * D.46863;
  unsigned int D.46862;
  const char * D.46859;
  unsigned int D.46858;
  const char * D.46855;
  unsigned int D.46854;
  switch_rtp_bug_flag_t D.46853;
  const char * D.46850;
  const char * D.46847;

<bb 2>:
  D.46847_2 = switch_stristr ("clear", str_1(D));
  if (D.46847_2 != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  *flag_pole_3(D) = 0;

<bb 4>:
  D.46850_4 = switch_stristr ("CISCO_SKIP_MARK_BIT_2833", str_1(D));
  if (D.46850_4 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.46853_5 = *flag_pole_3(D);
  D.46854_6 = D.46853_5 | 1;
  *flag_pole_3(D) = D.46854_6;

<bb 6>:
  D.46855_7 = switch_stristr ("~CISCO_SKIP_MARK_BIT_2833", str_1(D));
  if (D.46855_7 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.46853_8 = *flag_pole_3(D);
  D.46858_9 = D.46853_8 & 4294967294;
  *flag_pole_3(D) = D.46858_9;

<bb 8>:
  D.46859_10 = switch_stristr ("SONUS_SEND_INVALID_TIMESTAMP_2833", str_1(D));
  if (D.46859_10 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.46853_11 = *flag_pole_3(D);
  D.46862_12 = D.46853_11 | 2;
  *flag_pole_3(D) = D.46862_12;

<bb 10>:
  D.46863_13 = switch_stristr ("~SONUS_SEND_INVALID_TIMESTAMP_2833", str_1(D));
  if (D.46863_13 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.46853_14 = *flag_pole_3(D);
  D.46866_15 = D.46853_14 & 4294967293;
  *flag_pole_3(D) = D.46866_15;

<bb 12>:
  D.46867_16 = switch_stristr ("IGNORE_MARK_BIT", str_1(D));
  if (D.46867_16 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.46853_17 = *flag_pole_3(D);
  D.46870_18 = D.46853_17 | 4;
  *flag_pole_3(D) = D.46870_18;

<bb 14>:
  D.46871_19 = switch_stristr ("~IGNORE_MARK_BIT", str_1(D));
  if (D.46871_19 != 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.46853_20 = *flag_pole_3(D);
  D.46874_21 = D.46853_20 & 4294967291;
  *flag_pole_3(D) = D.46874_21;

<bb 16>:
  D.46875_22 = switch_stristr ("SEND_LINEAR_TIMESTAMPS", str_1(D));
  if (D.46875_22 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.46853_23 = *flag_pole_3(D);
  D.46878_24 = D.46853_23 | 8;
  *flag_pole_3(D) = D.46878_24;

<bb 18>:
  D.46879_25 = switch_stristr ("~SEND_LINEAR_TIMESTAMPS", str_1(D));
  if (D.46879_25 != 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.46853_26 = *flag_pole_3(D);
  D.46882_27 = D.46853_26 & 4294967287;
  *flag_pole_3(D) = D.46882_27;

<bb 20>:
  D.46883_28 = switch_stristr ("START_SEQ_AT_ZERO", str_1(D));
  if (D.46883_28 != 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.46853_29 = *flag_pole_3(D);
  D.46886_30 = D.46853_29 | 16;
  *flag_pole_3(D) = D.46886_30;

<bb 22>:
  D.46887_31 = switch_stristr ("~START_SEQ_AT_ZERO", str_1(D));
  if (D.46887_31 != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  D.46853_32 = *flag_pole_3(D);
  D.46890_33 = D.46853_32 & 4294967279;
  *flag_pole_3(D) = D.46890_33;

<bb 24>:
  D.46891_34 = switch_stristr ("NEVER_SEND_MARKER", str_1(D));
  if (D.46891_34 != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.46853_35 = *flag_pole_3(D);
  D.46894_36 = D.46853_35 | 32;
  *flag_pole_3(D) = D.46894_36;

<bb 26>:
  D.46895_37 = switch_stristr ("~NEVER_SEND_MARKER", str_1(D));
  if (D.46895_37 != 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.46853_38 = *flag_pole_3(D);
  D.46898_39 = D.46853_38 & 4294967263;
  *flag_pole_3(D) = D.46898_39;

<bb 28>:
  D.46899_40 = switch_stristr ("IGNORE_DTMF_DURATION", str_1(D));
  if (D.46899_40 != 0B)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  D.46853_41 = *flag_pole_3(D);
  D.46902_42 = D.46853_41 | 64;
  *flag_pole_3(D) = D.46902_42;

<bb 30>:
  D.46903_43 = switch_stristr ("~IGNORE_DTMF_DURATION", str_1(D));
  if (D.46903_43 != 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  D.46853_44 = *flag_pole_3(D);
  D.46906_45 = D.46853_44 & 4294967231;
  *flag_pole_3(D) = D.46906_45;

<bb 32>:
  D.46907_46 = switch_stristr ("ACCEPT_ANY_PACKETS", str_1(D));
  if (D.46907_46 != 0B)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.46853_47 = *flag_pole_3(D);
  D.46910_48 = D.46853_47 | 128;
  *flag_pole_3(D) = D.46910_48;

<bb 34>:
  D.46911_49 = switch_stristr ("~ACCEPT_ANY_PACKETS", str_1(D));
  if (D.46911_49 != 0B)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  D.46853_50 = *flag_pole_3(D);
  D.46914_51 = D.46853_50 & 4294967167;
  *flag_pole_3(D) = D.46914_51;

<bb 36>:
  D.46915_52 = switch_stristr ("ACCEPT_ANY_PAYLOAD", str_1(D));
  if (D.46915_52 != 0B)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  D.46853_53 = *flag_pole_3(D);
  D.46918_54 = D.46853_53 | 2048;
  *flag_pole_3(D) = D.46918_54;

<bb 38>:
  D.46919_55 = switch_stristr ("~ACCEPT_ANY_PAYLOAD", str_1(D));
  if (D.46919_55 != 0B)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.46853_56 = *flag_pole_3(D);
  D.46922_57 = D.46853_56 & 4294965247;
  *flag_pole_3(D) = D.46922_57;

<bb 40>:
  D.46923_58 = switch_stristr ("GEN_ONE_GEN_ALL", str_1(D));
  if (D.46923_58 != 0B)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.46853_59 = *flag_pole_3(D);
  D.46926_60 = D.46853_59 | 256;
  *flag_pole_3(D) = D.46926_60;

<bb 42>:
  D.46927_61 = switch_stristr ("~GEN_ONE_GEN_ALL", str_1(D));
  if (D.46927_61 != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  D.46853_62 = *flag_pole_3(D);
  D.46930_63 = D.46853_62 & 4294967039;
  *flag_pole_3(D) = D.46930_63;

<bb 44>:
  D.46931_64 = switch_stristr ("CHANGE_SSRC_ON_MARKER", str_1(D));
  if (D.46931_64 != 0B)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  D.46853_65 = *flag_pole_3(D);
  D.46934_66 = D.46853_65 | 512;
  *flag_pole_3(D) = D.46934_66;

<bb 46>:
  D.46935_67 = switch_stristr ("~CHANGE_SSRC_ON_MARKER", str_1(D));
  if (D.46935_67 != 0B)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.46853_68 = *flag_pole_3(D);
  D.46938_69 = D.46853_68 & 4294966783;
  *flag_pole_3(D) = D.46938_69;

<bb 48>:
  D.46939_70 = switch_stristr ("FLUSH_JB_ON_DTMF", str_1(D));
  if (D.46939_70 != 0B)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  D.46853_71 = *flag_pole_3(D);
  D.46942_72 = D.46853_71 | 1024;
  *flag_pole_3(D) = D.46942_72;

<bb 50>:
  D.46943_73 = switch_stristr ("~FLUSH_JB_ON_DTMF", str_1(D));
  if (D.46943_73 != 0B)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  D.46853_74 = *flag_pole_3(D);
  D.46946_75 = D.46853_74 & 4294966271;
  *flag_pole_3(D) = D.46946_75;

<bb 52>:
  return;

}



;; Function switch_core_media_add_crypto (switch_core_media_add_crypto)

Considering inline candidate switch_core_media_crypto_str2type.
Not inlining: code size would grow by 12.
Iterations: 0
switch_core_media_add_crypto (struct switch_secure_settings_t * ssec, const char * key_str, switch_rtp_crypto_direction_t direction)
{
  static const char __func__[29] = "switch_core_media_add_crypto";
  char * p;
  switch_rtp_crypto_key_type_t type;
  unsigned char key[64];
  switch_status_t D.46845;
  void * restrict D.46844;
  unsigned char * D.46843;
  size_t D.46841;
  int D.46840;
  const void * restrict D.46839;
  void * restrict D.46838;
  unsigned char * D.46837;
  int D.46832;
  char D.46821;
  char * D.46820;
  char D.46817;

<bb 2>:
  p_3 = __builtin_strchr (key_str_2(D), 32);
  # DEBUG p => p_3
  if (p_3 != 0B)
    goto <bb 3>;
  else
    goto <bb 16> (bad);

<bb 3>:
  D.46817_4 = *p_3;
  if (D.46817_4 != 0)
    goto <bb 4>;
  else
    goto <bb 16> (bad);

<bb 4>:
  D.46820_5 = p_3 + 1;
  D.46821_6 = *D.46820_5;
  if (D.46821_6 != 0)
    goto <bb 5>;
  else
    goto <bb 16> (bad);

<bb 5>:
  p_7 = p_3 + 1;
  # DEBUG p => p_7
  type_8 = switch_core_media_crypto_str2type (p_7);
  # DEBUG type => type_8
  if (type_8 == 9)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 949, 0B, 3, "Parse Error near [%s]\n", p_7);
  goto <bb 16> (bad);

<bb 7>:
  p_9 = __builtin_strchr (p_7, 32);
  # DEBUG p => p_9
  if (p_9 != 0B)
    goto <bb 8>;
  else
    goto <bb 16> (bad);

<bb 8>:
  D.46817_10 = *p_9;
  if (D.46817_10 != 0)
    goto <bb 9>;
  else
    goto <bb 16> (bad);

<bb 9>:
  D.46820_11 = p_9 + 1;
  D.46821_12 = *D.46820_11;
  if (D.46821_12 != 0)
    goto <bb 10>;
  else
    goto <bb 16> (bad);

<bb 10>:
  p_13 = p_9 + 1;
  # DEBUG p => p_13
  D.46832_14 = strncasecmp (p_13, "inline:", 7);
  if (D.46832_14 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 957, 0B, 3, "Parse Error near [%s]\n", p_13);
  goto <bb 16> (bad);

<bb 12>:
  p_15 = p_13 + 7;
  # DEBUG p => p_15
  switch_b64_decode (p_15, &key, 64);
  if (direction_16(D) == 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.46837_18 = &ssec_17(D)->local_raw_key[0];
  D.46838_19 = (void * restrict) D.46837_18;
  D.46839_20 = (const void * restrict) &key[0];
  D.46840_21 = SUITES[type_8].keylen;
  D.46841_22 = (size_t) D.46840_21;
  memcpy (D.46838_19, D.46839_20, D.46841_22);
  goto <bb 15>;

<bb 14>:
  D.46843_23 = &ssec_17(D)->remote_raw_key[0];
  D.46844_24 = (void * restrict) D.46843_23;
  D.46839_25 = (const void * restrict) &key[0];
  D.46840_26 = SUITES[type_8].keylen;
  D.46841_27 = (size_t) D.46840_26;
  memcpy (D.46844_24, D.46839_25, D.46841_27);

<bb 15>:
  D.46845_28 = 0;
  goto <bb 17>;

bad:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 976, 0B, 3, "Error!\n");
  D.46845_29 = 1;

<bb 17>:
  # D.46845_1 = PHI <D.46845_28(15), D.46845_29(16)>
  return D.46845_1;

}



;; Function switch_core_session_apply_crypto (switch_core_session_apply_crypto)

Considering inline candidate switch_core_media_add_crypto.
Not inlining: code size would grow by 80.
Iterations: 0
switch_core_session_apply_crypto (struct switch_core_session_t * session, switch_media_type_t type)
{
  const char * varname;
  struct switch_rtp_engine_t * engine;
  char * D.43903;
  unsigned char[64] * D.43902;
  uint32_t D.43901;
  int D.43900;
  switch_size_t D.43899;
  int D.43898;
  unsigned char[64] * D.43897;
  switch_rtp_crypto_key_type_t D.43896;
  struct switch_rtp_t * D.43895;
  struct switch_secure_settings_t * D.43894;
  unsigned int D.43893;
  struct switch_secure_settings_t[10] * D.43892;
  uint32_t D.43889;
  char * D.43886;
  switch_rtp_crypto_key_type_t D.43885;
  uint32_t D.43882;
  struct switch_channel_t * D.43881;
  unsigned int D.43880;
  struct switch_rtp_engine_t[2] * D.43879;
  struct switch_media_handle_t * D.43876;

<bb 2>:
  if (type_2(D) == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  varname_3 = "rtp_secure_audio_confirmed";
  # DEBUG varname => varname_3
  goto <bb 5>;

<bb 4>:
  varname_4 = "rtp_secure_video_confirmed";
  # DEBUG varname => varname_4

<bb 5>:
  # varname_1 = PHI <varname_3(3), varname_4(4)>
  # DEBUG varname => varname_1
  D.43876_6 = session_5(D)->media_handle;
  if (D.43876_6 == 0B)
    goto <bb 10>;
  else
    goto <bb 6>;

<bb 6>:
  D.43876_7 = session_5(D)->media_handle;
  D.43879_8 = &D.43876_7->engines;
  D.43880_9 = type_2(D) * 11416;
  engine_10 = D.43879_8 + D.43880_9;
  # DEBUG engine => engine_10
  D.43881_11 = session_5(D)->channel;
  D.43882_12 = switch_channel_test_flag (D.43881_11, 84);
  if (D.43882_12 != 0)
    goto <bb 10>;
  else
    goto <bb 7>;

<bb 7>:
  D.43885_13 = engine_10->crypto_type;
  D.43886_14 = engine_10->ssec[D.43885_13].remote_crypto_key;
  if (D.43886_14 != 0B)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  D.43881_15 = session_5(D)->channel;
  D.43889_16 = switch_channel_test_flag (D.43881_15, 92);
  if (D.43889_16 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.43892_17 = &engine_10->ssec;
  D.43885_18 = engine_10->crypto_type;
  D.43893_19 = D.43885_18 * 144;
  D.43894_20 = D.43892_17 + D.43893_19;
  D.43885_21 = engine_10->crypto_type;
  D.43886_22 = engine_10->ssec[D.43885_21].remote_crypto_key;
  switch_core_media_add_crypto (D.43894_20, D.43886_22, 1);
  D.43895_23 = engine_10->rtp_session;
  D.43885_24 = engine_10->crypto_type;
  D.43896_25 = engine_10->ssec[D.43885_24].crypto_type;
  D.43885_26 = engine_10->crypto_type;
  D.43897_27 = &engine_10->ssec[D.43885_26].local_raw_key;
  D.43885_28 = engine_10->crypto_type;
  D.43896_29 = engine_10->ssec[D.43885_28].crypto_type;
  D.43898_30 = SUITES[D.43896_29].keylen;
  D.43899_31 = (switch_size_t) D.43898_30;
  switch_rtp_add_crypto_key (D.43895_23, 0, 1, D.43896_29, D.43897_27, D.43899_31);
  D.43895_32 = engine_10->rtp_session;
  D.43885_33 = engine_10->crypto_type;
  D.43900_34 = engine_10->ssec[D.43885_33].crypto_tag;
  D.43901_35 = (uint32_t) D.43900_34;
  D.43885_36 = engine_10->crypto_type;
  D.43896_37 = engine_10->ssec[D.43885_36].crypto_type;
  D.43885_38 = engine_10->crypto_type;
  D.43902_39 = &engine_10->ssec[D.43885_38].remote_raw_key;
  D.43885_40 = engine_10->crypto_type;
  D.43896_41 = engine_10->ssec[D.43885_40].crypto_type;
  D.43898_42 = SUITES[D.43896_41].keylen;
  D.43899_43 = (switch_size_t) D.43898_42;
  switch_rtp_add_crypto_key (D.43895_32, 1, D.43901_35, D.43896_41, D.43902_39, D.43899_43);
  D.43881_44 = session_5(D)->channel;
  switch_channel_set_variable_var_check (D.43881_44, varname_1, "true", 1);
  D.43881_45 = session_5(D)->channel;
  D.43885_46 = engine_10->crypto_type;
  D.43903_47 = SUITES[D.43885_46].name;
  switch_channel_set_variable_var_check (D.43881_45, "rtp_secure_media_negotiated", D.43903_47, 1);

<bb 10>:
  return;

}



;; Function switch_core_media_set_rtp_session (switch_core_media_set_rtp_session)

Iterations: 0
switch_core_media_set_rtp_session (struct switch_core_session_t * session, switch_media_type_t type, struct switch_rtp_t * rtp_session)
{
  struct switch_rtp_engine_t * engine;
  unsigned int D.46813;
  struct switch_rtp_engine_t[2] * D.46812;
  struct switch_media_handle_t * D.46809;

<bb 2>:
  D.46809_2 = session_1(D)->media_handle;
  if (D.46809_2 == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

<bb 3>:
  D.46809_3 = session_1(D)->media_handle;
  D.46812_4 = &D.46809_3->engines;
  D.46813_6 = type_5(D) * 11416;
  engine_7 = D.46812_4 + D.46813_6;
  # DEBUG engine => engine_7
  engine_7->rtp_session = rtp_session_8(D);
  engine_7->type = type_5(D);

<bb 4>:
  return;

}



;; Function switch_core_session_check_incoming_crypto (switch_core_session_check_incoming_crypto)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_session_check_incoming_crypto.
Processing frequency atoi
  Called by switch_core_session_check_incoming_crypto that is normal or hot
Considering inline candidate switch_core_media_build_crypto.
Not inlining: code size would grow by 102.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_session_check_incoming_crypto.
Processing frequency _zstr
  Called by switch_core_session_check_incoming_crypto that is normal or hot
Considering inline candidate switch_core_media_crypto_type2str.
Not inlining: code size would grow by 2.
Considering inline candidate switch_core_media_crypto_type2str.
Not inlining: code size would grow by 2.
Considering inline candidate switch_core_media_add_crypto.
Not inlining: code size would grow by 80.
Considering inline candidate switch_core_media_crypto_type2str.
Not inlining: code size would grow by 2.
Considering inline candidate switch_core_media_crypto_type2str.
Not inlining: code size would grow by 2.
Considering inline candidate switch_core_media_build_crypto.
Not inlining: code size would grow by 102.
Inlining atoi to switch_core_session_check_incoming_crypto with frequency 1000
Inlining _zstr to switch_core_session_check_incoming_crypto with frequency 1000
Considering inline candidate switch_core_media_build_crypto.
Not inlining: code size would grow by 102.
Considering inline candidate switch_core_media_crypto_type2str.
Not inlining: code size would grow by 2.
Considering inline candidate switch_core_media_crypto_type2str.
Not inlining: code size would grow by 2.
Considering inline candidate switch_core_media_add_crypto.
Not inlining: code size would grow by 80.
Considering inline candidate switch_core_media_crypto_type2str.
Not inlining: code size would grow by 2.
Considering inline candidate switch_core_media_crypto_type2str.
Not inlining: code size would grow by 2.
Considering inline candidate switch_core_media_build_crypto.
Not inlining: code size would grow by 102.
Iterations: 1
Merging blocks 20 and 44
Merging blocks 39 and 46
Merging blocks 49 and 45
Merging blocks 20 and 43


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement smh_11 = session_10(D)->media_handle;



Registering new PHI nodes in block #3



Registering new PHI nodes in block #4

Updating SSA information for statement D.46721_13 = smh_11->crypto_mode;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.46724_15 = session_10(D)->media_handle;



Registering new PHI nodes in block #10

Updating SSA information for statement D.46727_21 = smh_11->crypto_suite_order[i_2];



Registering new PHI nodes in block #7

Updating SSA information for statement D.46727_22 = smh_11->crypto_suite_order[i_2];

Updating SSA information for statement j_23 = SUITES[D.46727_22].type;

Updating SSA information for statement D.46728_24 = SUITES[j_23].name;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1179, session_10(D), 7, "looking for crypto suite [%s] in [%s]\n", D.46728_24, crypto_25(D));

Updating SSA information for statement D.46728_26 = SUITES[j_23].name;

Updating SSA information for statement D.46729_27 = switch_stristr (D.46728_26, crypto_25(D));



Registering new PHI nodes in block #8

Updating SSA information for statement D.46732_28 = SUITES[j_23].type;

Updating SSA information for statement vval_30 = SUITES[j_23].name;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1184, session_10(D), 7, "Found suite %s\n", vval_30);

Updating SSA information for statement D.46733_31 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46733_31, "rtp_secure_media_negotiated", vval_30, 1);



Registering new PHI nodes in block #9



Registering new PHI nodes in block #11

Updating SSA information for statement D.46736_33 = engine_19->crypto_type;

Updating SSA information for statement D.46737_34 = engine_19->ssec[D.46736_33].remote_crypto_key;



Registering new PHI nodes in block #12

Updating SSA information for statement D.46739_35 = engine_19->rtp_session;

Updating SSA information for statement D.46740_36 = switch_rtp_ready (D.46739_35);



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement D.46736_37 = engine_19->crypto_type;



Registering new PHI nodes in block #15

Updating SSA information for statement D.46736_38 = engine_19->crypto_type;

Updating SSA information for statement D.46737_39 = engine_19->ssec[D.46736_38].remote_crypto_key;

Updating SSA information for statement D.38621_40 = __builtin_strcmp (crypto_25(D), D.46737_39);



Registering new PHI nodes in block #16

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1193, session_10(D), 7, "Existing key is still valid.\n");



Registering new PHI nodes in block #17

Updating SSA information for statement D.46736_42 = engine_19->crypto_type;

Updating SSA information for statement D.46737_43 = engine_19->ssec[D.46736_42].remote_crypto_key;

Updating SSA information for statement a_44 = switch_stristr ("AE", D.46737_43);

Updating SSA information for statement b_45 = switch_stristr ("AE", crypto_25(D));



Registering new PHI nodes in block #18



Registering new PHI nodes in block #19

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1201, session_10(D), 7, "Unsupported Crypto [%s]\n", crypto_25(D));



Registering new PHI nodes in block #20

Updating SSA information for statement D.46733_47 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46733_47, varname_48(D), vval_4, 1);

Updating SSA information for statement D.46724_49 = session_10(D)->media_handle;

Updating SSA information for statement switch_core_media_build_crypto (D.46724_49, type_17(D), crypto_tag_51(D), ctype.166_50, 0, 1);

Updating SSA information for statement D.46739_52 = engine_19->rtp_session;

Updating SSA information for statement D.47412_185 = strtol (crypto_25(D), 0B, 10);

Updating SSA information for statement D.47411 = D.47412_185;

Updating SSA information for statement D.46752_53 = D.47411;

Updating SSA information for statement D.46736_55 = engine_19->crypto_type;

Updating SSA information for statement D.46754_56 = engine_19->ssec[D.46736_55].crypto_type;

Updating SSA information for statement D.46736_57 = engine_19->crypto_type;

Updating SSA information for statement D.46756_59 = SUITES[ctype_3].keylen;

Updating SSA information for statement switch_rtp_add_crypto_key (D.46739_52, 0, D.46753_54, D.46754_56, D.46755_58, D.46757_60);



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22

Updating SSA information for statement D.46764_64 = strncasecmp (a_44, b_45, 23);



Registering new PHI nodes in block #23

Updating SSA information for statement engine_19->crypto_type = ctype.166_65;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1214, session_10(D), 7, "Change Remote key to [%s]\n", crypto_25(D));

Updating SSA information for statement D.46736_66 = engine_19->crypto_type;

Updating SSA information for statement D.46766_67 = switch_core_perform_session_strdup (session_10(D), crypto_25(D), "src/switch_core_media.c", &__func__, 1215);

Updating SSA information for statement engine_19->ssec[D.46736_66].remote_crypto_key = D.46766_67;

Updating SSA information for statement D.46767_68 = engine_19->type;



Registering new PHI nodes in block #24

Updating SSA information for statement D.46733_69 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46733_69, "srtp_remote_audio_crypto_key", crypto_25(D), 1);

Updating SSA information for statement D.46733_70 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_printf (D.46733_70, "srtp_remote_audio_crypto_tag", "%d", crypto_tag_51(D));

Updating SSA information for statement D.46733_71 = session_10(D)->channel;

Updating SSA information for statement D.46770_73 = switch_core_media_crypto_type2str (ctype.166_72);

Updating SSA information for statement switch_channel_set_variable_printf (D.46733_71, "srtp_remote_audio_crypto_type", "%s", D.46770_73);



Registering new PHI nodes in block #25

Updating SSA information for statement D.46767_74 = engine_19->type;



Registering new PHI nodes in block #26

Updating SSA information for statement D.46733_75 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46733_75, "srtp_remote_video_crypto_key", crypto_25(D), 1);

Updating SSA information for statement D.46733_76 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_printf (D.46733_76, "srtp_remote_video_crypto_tag", "%d", crypto_tag_51(D));

Updating SSA information for statement D.46733_77 = session_10(D)->channel;

Updating SSA information for statement D.46774_79 = switch_core_media_crypto_type2str (ctype.166_78);

Updating SSA information for statement switch_channel_set_variable_printf (D.46733_77, "srtp_remote_video_crypto_type", "%s", D.46774_79);



Registering new PHI nodes in block #27

Updating SSA information for statement D.46736_80 = engine_19->crypto_type;

Updating SSA information for statement engine_19->ssec[D.46736_80].crypto_tag = crypto_tag_51(D);

Updating SSA information for statement D.46739_81 = engine_19->rtp_session;

Updating SSA information for statement D.46775_82 = switch_rtp_ready (D.46739_81);



Registering new PHI nodes in block #28

Updating SSA information for statement D.46733_83 = session_10(D)->channel;

Updating SSA information for statement D.46778_84 = switch_channel_test_flag (D.46733_83, 92);



Registering new PHI nodes in block #29

Updating SSA information for statement D.46736_86 = engine_19->crypto_type;

Updating SSA information for statement D.46736_89 = engine_19->crypto_type;

Updating SSA information for statement D.46737_90 = engine_19->ssec[D.46736_89].remote_crypto_key;

Updating SSA information for statement switch_core_media_add_crypto (D.46783_88, D.46737_90, 1);

Updating SSA information for statement D.46739_91 = engine_19->rtp_session;

Updating SSA information for statement D.46736_92 = engine_19->crypto_type;

Updating SSA information for statement D.46784_93 = engine_19->ssec[D.46736_92].crypto_tag;

Updating SSA information for statement D.46736_95 = engine_19->crypto_type;

Updating SSA information for statement D.46754_96 = engine_19->ssec[D.46736_95].crypto_type;

Updating SSA information for statement D.46736_97 = engine_19->crypto_type;

Updating SSA information for statement D.46736_99 = engine_19->crypto_type;

Updating SSA information for statement D.46754_100 = engine_19->ssec[D.46736_99].crypto_type;

Updating SSA information for statement D.46787_101 = SUITES[D.46754_100].keylen;

Updating SSA information for statement switch_rtp_add_crypto_key (D.46739_91, 1, D.46785_94, D.46754_100, D.46786_98, D.46788_102);



Registering new PHI nodes in block #30



Registering new PHI nodes in block #31

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1238, session_10(D), 7, "Ignoring unacceptable key\n");



Registering new PHI nodes in block #32

Updating SSA information for statement D.46739_104 = engine_19->rtp_session;

Updating SSA information for statement D.46789_105 = switch_rtp_ready (D.46739_104);



Registering new PHI nodes in block #33



Registering new PHI nodes in block #34

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1244, session_10(D), 7, "Unsupported Crypto [%s]\n", crypto_25(D));



Registering new PHI nodes in block #35

Updating SSA information for statement engine_19->crypto_type = ctype.166_106;

Updating SSA information for statement D.46736_107 = engine_19->crypto_type;

Updating SSA information for statement D.46794_108 = switch_core_perform_session_strdup (session_10(D), crypto_25(D), "src/switch_core_media.c", &__func__, 1249);

Updating SSA information for statement engine_19->ssec[D.46736_107].remote_crypto_key = D.46794_108;

Updating SSA information for statement D.46736_109 = engine_19->crypto_type;

Updating SSA information for statement D.46737_110 = engine_19->ssec[D.46736_109].remote_crypto_key;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1250, session_10(D), 7, "Set Remote Key [%s]\n", D.46737_110);

Updating SSA information for statement D.46767_111 = engine_19->type;



Registering new PHI nodes in block #36

Updating SSA information for statement D.46733_112 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46733_112, "srtp_remote_audio_crypto_key", crypto_25(D), 1);

Updating SSA information for statement D.46733_113 = session_10(D)->channel;

Updating SSA information for statement D.46797_115 = switch_core_media_crypto_type2str (ctype.166_114);

Updating SSA information for statement switch_channel_set_variable_printf (D.46733_113, "srtp_remote_audio_crypto_type", "%s", D.46797_115);



Registering new PHI nodes in block #37

Updating SSA information for statement D.46767_116 = engine_19->type;



Registering new PHI nodes in block #38

Updating SSA information for statement D.46733_117 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46733_117, "srtp_remote_video_crypto_key", crypto_25(D), 1);

Updating SSA information for statement D.46733_118 = session_10(D)->channel;

Updating SSA information for statement D.46801_120 = switch_core_media_crypto_type2str (ctype.166_119);

Updating SSA information for statement switch_channel_set_variable_printf (D.46733_118, "srtp_remote_video_crypto_type", "%s", D.46801_120);



Registering new PHI nodes in block #39

Updating SSA information for statement D.46736_121 = engine_19->crypto_type;

Updating SSA information for statement engine_19->ssec[D.46736_121].crypto_tag = crypto_tag_51(D);

Updating SSA information for statement D.46733_123 = session_10(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46733_123, varname_48(D), vval_4, 1);

Updating SSA information for statement D.46802_124 = smh_11->session;

Updating SSA information for statement D.46803_125 = D.46802_124->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.46803_125, 92, 1);

Updating SSA information for statement D.46736_126 = engine_19->crypto_type;

Updating SSA information for statement D.46804_127 = engine_19->ssec[D.46736_126].local_crypto_key;



Registering new PHI nodes in block #40

Updating SSA information for statement D.47415_186 = MEM[(const char *)D.46804_127];



Registering new PHI nodes in block #41



Registering new PHI nodes in block #42

Updating SSA information for statement D.47414 = D.47416_187;

Updating SSA information for statement D.46805_128 = D.47414;



Registering new PHI nodes in block #43

Updating SSA information for statement D.46724_129 = session_10(D)->media_handle;

Updating SSA information for statement switch_core_media_build_crypto (D.46724_129, type_17(D), crypto_tag_51(D), ctype.166_130, 0, 1);



Registering new PHI nodes in block #44



Registering new PHI nodes in block #45



Symbols to be put in SSA form

{ .MEM D.47411 D.47414 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 46
Number of blocks to update: 45 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 


Scope blocks after cleanups:

{ Scope block #0 
  int got_crypto;
  int i;
  int ctype;
  const char * vval;
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  static const char __func__[42] = "switch_core_session_check_incoming_crypto";
  void end = <<< error >>>; (unused)

  { Scope block #87 src/switch_core_media.c:1265 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #88 Originating from :#0 

    }

  }

  { Scope block #89 
    switch_rtp_crypto_key_type_t j;

  }

  { Scope block #90 
    size_t __s1_len; (unused)
    size_t __s2_len; (unused)

  }

  { Scope block #91 
    const char * a;
    const char * b;

    { Scope block #92 src/switch_core_media.c:1207 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #93 Originating from :#0 

      }

    }

  }

}
switch_core_session_check_incoming_crypto (struct switch_core_session_t * session, const char * varname, switch_media_type_t type, const char * crypto, int crypto_tag, switch_sdp_type_t sdp_type)
{
  int D.47416;
  const char D.47415;
  int D.47414;
  int D.47412;
  int D.47411;
  const char * b;
  const char * a;
  switch_rtp_crypto_key_type_t j;
  static const char __func__[42] = "switch_core_session_check_incoming_crypto";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  const char * vval;
  int ctype;
  int i;
  int got_crypto;
  int D.46805;
  char * D.46804;
  struct switch_channel_t * D.46803;
  struct switch_core_session_t * D.46802;
  const char * D.46801;
  const char * D.46797;
  char * D.46794;
  uint8_t D.46789;
  switch_size_t D.46788;
  int D.46787;
  unsigned char[64] * D.46786;
  uint32_t D.46785;
  int D.46784;
  struct switch_secure_settings_t * D.46783;
  unsigned int D.46782;
  struct switch_secure_settings_t[10] * D.46781;
  uint32_t D.46778;
  uint8_t D.46775;
  const char * D.46774;
  const char * D.46770;
  switch_media_type_t D.46767;
  char * D.46766;
  int D.46764;
  _Bool D.46762;
  _Bool D.46761;
  _Bool D.46760;
  switch_size_t D.46757;
  int D.46756;
  unsigned char[64] * D.46755;
  switch_rtp_crypto_key_type_t D.46754;
  uint32_t D.46753;
  int D.46752;
  switch_rtp_crypto_key_type_t ctype.166;
  int D.38621;
  uint8_t D.46740;
  struct switch_rtp_t * D.46739;
  char * D.46737;
  switch_rtp_crypto_key_type_t D.46736;
  struct switch_channel_t * D.46733;
  switch_rtp_crypto_key_type_t D.46732;
  const char * D.46729;
  char * D.46728;
  switch_rtp_crypto_key_type_t D.46727;
  unsigned int D.46726;
  struct switch_rtp_engine_t[2] * D.46725;
  struct switch_media_handle_t * D.46724;
  switch_rtp_crypto_mode_t D.46721;
  int D.46720;

<bb 2>:
  got_crypto_6 = 0;
  # DEBUG got_crypto => got_crypto_6
  i_7 = 0;
  # DEBUG i => i_7
  ctype_8 = 0;
  # DEBUG ctype => ctype_8
  vval_9 = 0B;
  # DEBUG vval => vval_9
  smh_11 = session_10(D)->media_handle;
  # DEBUG smh => smh_11
  if (smh_11 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.46720_12 = 0;
  goto <bb 45>;

<bb 4>:
  D.46721_13 = smh_11->crypto_mode;
  if (D.46721_13 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.46720_14 = -1;
  goto <bb 45>;

<bb 6>:
  D.46724_15 = session_10(D)->media_handle;
  D.46725_16 = &D.46724_15->engines;
  D.46726_18 = type_17(D) * 11416;
  engine_19 = D.46725_16 + D.46726_18;
  # DEBUG engine => engine_19
  i_20 = 0;
  # DEBUG i => i_20
  goto <bb 10>;

<bb 7>:
  D.46727_22 = smh_11->crypto_suite_order[i_2];
  j_23 = SUITES[D.46727_22].type;
  # DEBUG j => j_23
  D.46728_24 = SUITES[j_23].name;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1179, session_10(D), 7, "looking for crypto suite [%s] in [%s]\n", D.46728_24, crypto_25(D));
  D.46728_26 = SUITES[j_23].name;
  D.46729_27 = switch_stristr (D.46728_26, crypto_25(D));
  if (D.46729_27 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.46732_28 = SUITES[j_23].type;
  ctype_29 = (int) D.46732_28;
  # DEBUG ctype => ctype_29
  vval_30 = SUITES[j_23].name;
  # DEBUG vval => vval_30
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1184, session_10(D), 7, "Found suite %s\n", vval_30);
  D.46733_31 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46733_31, "rtp_secure_media_negotiated", vval_30, 1);
  goto <bb 11>;

<bb 9>:
  i_32 = i_2 + 1;
  # DEBUG i => i_32

<bb 10>:
  # i_2 = PHI <i_20(6), i_32(9)>
  # DEBUG i => i_2
  D.46727_21 = smh_11->crypto_suite_order[i_2];
  if (D.46727_21 != 9)
    goto <bb 7>;
  else
    goto <bb 11>;

<bb 11>:
  # ctype_3 = PHI <ctype_29(8), ctype_8(10)>
  # vval_4 = PHI <vval_30(8), vval_9(10)>
  # DEBUG vval => vval_4
  # DEBUG ctype => ctype_3
  D.46736_33 = engine_19->crypto_type;
  D.46737_34 = engine_19->ssec[D.46736_33].remote_crypto_key;
  if (D.46737_34 != 0B)
    goto <bb 12>;
  else
    goto <bb 32>;

<bb 12>:
  D.46739_35 = engine_19->rtp_session;
  D.46740_36 = switch_rtp_ready (D.46739_35);
  if (D.46740_36 != 0)
    goto <bb 13>;
  else
    goto <bb 32>;

<bb 13>:
  if (crypto_25(D) != 0B)
    goto <bb 14>;
  else
    goto <bb 17>;

<bb 14>:
  D.46736_37 = engine_19->crypto_type;
  if (D.46736_37 != 9)
    goto <bb 15>;
  else
    goto <bb 17>;

<bb 15>:
  D.46736_38 = engine_19->crypto_type;
  D.46737_39 = engine_19->ssec[D.46736_38].remote_crypto_key;
  D.38621_40 = __builtin_strcmp (crypto_25(D), D.46737_39);
  if (D.38621_40 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1193, session_10(D), 7, "Existing key is still valid.\n");
  got_crypto_41 = 1;
  # DEBUG got_crypto => got_crypto_41
  goto <bb 44> (end);

<bb 17>:
  D.46736_42 = engine_19->crypto_type;
  D.46737_43 = engine_19->ssec[D.46736_42].remote_crypto_key;
  a_44 = switch_stristr ("AE", D.46737_43);
  # DEBUG a => a_44
  b_45 = switch_stristr ("AE", crypto_25(D));
  # DEBUG b => b_45
  if (sdp_type_46(D) == 0)
    goto <bb 18>;
  else
    goto <bb 21>;

<bb 18>:
  if (vval_4 == 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1201, session_10(D), 7, "Unsupported Crypto [%s]\n", crypto_25(D));
  goto <bb 44> (end);

<bb 20>:
  D.46733_47 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46733_47, varname_48(D), vval_4, 1);
  D.46724_49 = session_10(D)->media_handle;
  ctype.166_50 = (switch_rtp_crypto_key_type_t) ctype_3;
  switch_core_media_build_crypto (D.46724_49, type_17(D), crypto_tag_51(D), ctype.166_50, 0, 1);
  D.46739_52 = engine_19->rtp_session;
  # DEBUG __nptr => crypto_25(D)
  D.47412_185 = strtol (crypto_25(D), 0B, 10);
  D.47411_189 = D.47412_185;
  D.46752_53 = D.47411_189;
  D.46753_54 = (uint32_t) D.46752_53;
  D.46736_55 = engine_19->crypto_type;
  D.46754_56 = engine_19->ssec[D.46736_55].crypto_type;
  D.46736_57 = engine_19->crypto_type;
  D.46755_58 = &engine_19->ssec[D.46736_57].local_raw_key;
  D.46756_59 = SUITES[ctype_3].keylen;
  D.46757_60 = (switch_size_t) D.46756_59;
  switch_rtp_add_crypto_key (D.46739_52, 0, D.46753_54, D.46754_56, D.46755_58, D.46757_60);

<bb 21>:
  D.46760_61 = a_44 != 0B;
  D.46761_62 = b_45 != 0B;
  D.46762_63 = D.46760_61 && D.46761_62;
  if (D.46762_63 != 0)
    goto <bb 22>;
  else
    goto <bb 31>;

<bb 22>:
  D.46764_64 = strncasecmp (a_44, b_45, 23);
  if (D.46764_64 == 0)
    goto <bb 23>;
  else
    goto <bb 31>;

<bb 23>:
  ctype.166_65 = (switch_rtp_crypto_key_type_t) ctype_3;
  engine_19->crypto_type = ctype.166_65;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1214, session_10(D), 7, "Change Remote key to [%s]\n", crypto_25(D));
  D.46736_66 = engine_19->crypto_type;
  D.46766_67 = switch_core_perform_session_strdup (session_10(D), crypto_25(D), "src/switch_core_media.c", &__func__, 1215);
  engine_19->ssec[D.46736_66].remote_crypto_key = D.46766_67;
  D.46767_68 = engine_19->type;
  if (D.46767_68 == 0)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  D.46733_69 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46733_69, "srtp_remote_audio_crypto_key", crypto_25(D), 1);
  D.46733_70 = session_10(D)->channel;
  switch_channel_set_variable_printf (D.46733_70, "srtp_remote_audio_crypto_tag", "%d", crypto_tag_51(D));
  D.46733_71 = session_10(D)->channel;
  ctype.166_72 = (switch_rtp_crypto_key_type_t) ctype_3;
  D.46770_73 = switch_core_media_crypto_type2str (ctype.166_72);
  switch_channel_set_variable_printf (D.46733_71, "srtp_remote_audio_crypto_type", "%s", D.46770_73);
  goto <bb 27>;

<bb 25>:
  D.46767_74 = engine_19->type;
  if (D.46767_74 == 1)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  D.46733_75 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46733_75, "srtp_remote_video_crypto_key", crypto_25(D), 1);
  D.46733_76 = session_10(D)->channel;
  switch_channel_set_variable_printf (D.46733_76, "srtp_remote_video_crypto_tag", "%d", crypto_tag_51(D));
  D.46733_77 = session_10(D)->channel;
  ctype.166_78 = (switch_rtp_crypto_key_type_t) ctype_3;
  D.46774_79 = switch_core_media_crypto_type2str (ctype.166_78);
  switch_channel_set_variable_printf (D.46733_77, "srtp_remote_video_crypto_type", "%s", D.46774_79);

<bb 27>:
  D.46736_80 = engine_19->crypto_type;
  engine_19->ssec[D.46736_80].crypto_tag = crypto_tag_51(D);
  D.46739_81 = engine_19->rtp_session;
  D.46775_82 = switch_rtp_ready (D.46739_81);
  if (D.46775_82 != 0)
    goto <bb 28>;
  else
    goto <bb 30>;

<bb 28>:
  D.46733_83 = session_10(D)->channel;
  D.46778_84 = switch_channel_test_flag (D.46733_83, 92);
  if (D.46778_84 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  D.46781_85 = &engine_19->ssec;
  D.46736_86 = engine_19->crypto_type;
  D.46782_87 = D.46736_86 * 144;
  D.46783_88 = D.46781_85 + D.46782_87;
  D.46736_89 = engine_19->crypto_type;
  D.46737_90 = engine_19->ssec[D.46736_89].remote_crypto_key;
  switch_core_media_add_crypto (D.46783_88, D.46737_90, 1);
  D.46739_91 = engine_19->rtp_session;
  D.46736_92 = engine_19->crypto_type;
  D.46784_93 = engine_19->ssec[D.46736_92].crypto_tag;
  D.46785_94 = (uint32_t) D.46784_93;
  D.46736_95 = engine_19->crypto_type;
  D.46754_96 = engine_19->ssec[D.46736_95].crypto_type;
  D.46736_97 = engine_19->crypto_type;
  D.46786_98 = &engine_19->ssec[D.46736_97].remote_raw_key;
  D.46736_99 = engine_19->crypto_type;
  D.46754_100 = engine_19->ssec[D.46736_99].crypto_type;
  D.46787_101 = SUITES[D.46754_100].keylen;
  D.46788_102 = (switch_size_t) D.46787_101;
  switch_rtp_add_crypto_key (D.46739_91, 1, D.46785_94, D.46754_100, D.46786_98, D.46788_102);

<bb 30>:
  got_crypto_103 = got_crypto_6 + 1;
  # DEBUG got_crypto => got_crypto_103
  goto <bb 44> (end);

<bb 31>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1238, session_10(D), 7, "Ignoring unacceptable key\n");
  goto <bb 44> (end);

<bb 32>:
  D.46739_104 = engine_19->rtp_session;
  D.46789_105 = switch_rtp_ready (D.46739_104);
  if (D.46789_105 == 0)
    goto <bb 33>;
  else
    goto <bb 44> (end);

<bb 33>:
  if (vval_4 == 0B)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1244, session_10(D), 7, "Unsupported Crypto [%s]\n", crypto_25(D));
  goto <bb 44> (end);

<bb 35>:
  ctype.166_106 = (switch_rtp_crypto_key_type_t) ctype_3;
  engine_19->crypto_type = ctype.166_106;
  D.46736_107 = engine_19->crypto_type;
  D.46794_108 = switch_core_perform_session_strdup (session_10(D), crypto_25(D), "src/switch_core_media.c", &__func__, 1249);
  engine_19->ssec[D.46736_107].remote_crypto_key = D.46794_108;
  D.46736_109 = engine_19->crypto_type;
  D.46737_110 = engine_19->ssec[D.46736_109].remote_crypto_key;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1250, session_10(D), 7, "Set Remote Key [%s]\n", D.46737_110);
  D.46767_111 = engine_19->type;
  if (D.46767_111 == 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  D.46733_112 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46733_112, "srtp_remote_audio_crypto_key", crypto_25(D), 1);
  D.46733_113 = session_10(D)->channel;
  ctype.166_114 = (switch_rtp_crypto_key_type_t) ctype_3;
  D.46797_115 = switch_core_media_crypto_type2str (ctype.166_114);
  switch_channel_set_variable_printf (D.46733_113, "srtp_remote_audio_crypto_type", "%s", D.46797_115);
  goto <bb 39>;

<bb 37>:
  D.46767_116 = engine_19->type;
  if (D.46767_116 == 1)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.46733_117 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46733_117, "srtp_remote_video_crypto_key", crypto_25(D), 1);
  D.46733_118 = session_10(D)->channel;
  ctype.166_119 = (switch_rtp_crypto_key_type_t) ctype_3;
  D.46801_120 = switch_core_media_crypto_type2str (ctype.166_119);
  switch_channel_set_variable_printf (D.46733_118, "srtp_remote_video_crypto_type", "%s", D.46801_120);

<bb 39>:
  D.46736_121 = engine_19->crypto_type;
  engine_19->ssec[D.46736_121].crypto_tag = crypto_tag_51(D);
  got_crypto_122 = got_crypto_6 + 1;
  # DEBUG got_crypto => got_crypto_122
  D.46733_123 = session_10(D)->channel;
  switch_channel_set_variable_var_check (D.46733_123, varname_48(D), vval_4, 1);
  D.46802_124 = smh_11->session;
  D.46803_125 = D.46802_124->channel;
  switch_channel_set_flag_value (D.46803_125, 92, 1);
  D.46736_126 = engine_19->crypto_type;
  D.46804_127 = engine_19->ssec[D.46736_126].local_crypto_key;
  # DEBUG s => D.46804_127
  if (D.46804_127 == 0B)
    goto <bb 42>;
  else
    goto <bb 40>;

<bb 40>:
  D.47415_186 = MEM[(const char *)D.46804_127];
  if (D.47415_186 == 0)
    goto <bb 42>;
  else
    goto <bb 41>;

<bb 41>:

<bb 42>:
  # D.47416_187 = PHI <1(39), 1(40), 0(41)>
  D.47414_190 = D.47416_187;
  D.46805_128 = D.47414_190;
  if (D.46805_128 != 0)
    goto <bb 43>;
  else
    goto <bb 44> (end);

<bb 43>:
  D.46724_129 = session_10(D)->media_handle;
  ctype.166_130 = (switch_rtp_crypto_key_type_t) ctype_3;
  switch_core_media_build_crypto (D.46724_129, type_17(D), crypto_tag_51(D), ctype.166_130, 0, 1);

  # got_crypto_1 = PHI <got_crypto_6(19), got_crypto_103(30), got_crypto_6(32), got_crypto_6(34), got_crypto_122(42), got_crypto_122(43), got_crypto_41(16), got_crypto_6(31)>
end:
  # DEBUG got_crypto => got_crypto_1
  D.46720_131 = got_crypto_1;

<bb 45>:
  # D.46720_5 = PHI <D.46720_12(3), D.46720_14(5), D.46720_131(44)>
  return D.46720_5;

}



;; Function switch_media_handle_create (switch_media_handle_create)

Considering inline candidate _zstr.
 Inlining _zstr into switch_media_handle_create.
Processing frequency _zstr
  Called by switch_media_handle_create that is normal or hot
Inlining _zstr to switch_media_handle_create with frequency 1000
Iterations: 1
Merging blocks 2 and 17
Merging blocks 20 and 16


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement *smhp_7(D) = 0B;

Updating SSA information for statement D.46462_9 = params_8(D)->sdp_username;



Registering new PHI nodes in block #3

Updating SSA information for statement D.47420_119 = MEM[(const char *)D.46462_9];



Registering new PHI nodes in block #4



Registering new PHI nodes in block #5

Updating SSA information for statement D.47419 = D.47421_120;

Updating SSA information for statement D.46463_10 = D.47419;



Registering new PHI nodes in block #6

Updating SSA information for statement params_8(D)->sdp_username = "FreeSWITCH";



Registering new PHI nodes in block #7

Updating SSA information for statement D.46466_12 = switch_core_perform_session_alloc (session_11(D), 23856, "src/switch_core_media.c", &__func__, 1426);

Updating SSA information for statement session_11(D)->media_handle = D.46466_12;

Updating SSA information for statement D.46467_13 = session_11(D)->media_handle;



Registering new PHI nodes in block #8

Updating SSA information for statement D.46467_14 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_14->session = session_11(D);

Updating SSA information for statement D.46467_15 = session_11(D)->media_handle;

Updating SSA information for statement *smhp_7(D) = D.46467_15;

Updating SSA information for statement D.46467_16 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_17 = session_11(D)->media_handle;

Updating SSA information for statement D.46470_18 = D.46467_17->flags;

Updating SSA information for statement D.46467_17->flags = D.46471_19;

Updating SSA information for statement D.46467_20 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_20->media_flags[0] = 1;

Updating SSA information for statement D.46467_21 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_21->engines[0].read_frame.buflen = 16384;

Updating SSA information for statement D.46467_22 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_22->engines[0].type = 0;

Updating SSA information for statement D.46467_23 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_23->engines[0].crypto_type = 9;



Registering new PHI nodes in block #10



Registering new PHI nodes in block #9

Updating SSA information for statement D.46467_25 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_25->engines[0].ssec[i_2].crypto_type = i.136_26;



Registering new PHI nodes in block #11

Updating SSA information for statement D.46467_28 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_28->engines[1].read_frame.buflen = 16384;

Updating SSA information for statement D.46467_29 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_29->engines[1].type = 1;

Updating SSA information for statement D.46467_30 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_30->engines[1].crypto_type = 9;



Registering new PHI nodes in block #13



Registering new PHI nodes in block #12

Updating SSA information for statement D.46467_32 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_32->engines[1].ssec[i_3].crypto_type = i.136_33;



Registering new PHI nodes in block #14

Updating SSA information for statement D.46467_35 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_35->mparams = params_8(D);



Registering new PHI nodes in block #16



Registering new PHI nodes in block #15

Updating SSA information for statement D.46467_37 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_37->crypto_suite_order[i_4] = 9;



Registering new PHI nodes in block #17

Updating SSA information for statement D.46467_39 = session_11(D)->media_handle;

Updating SSA information for statement D.46474_41 = switch_core_session_get_pool (session_11(D));

Updating SSA information for statement switch_mutex_init (D.46473_40, 1, D.46474_41);

Updating SSA information for statement D.46467_42 = session_11(D)->media_handle;

Updating SSA information for statement D.46476_44 = switch_core_session_get_pool (session_11(D));

Updating SSA information for statement switch_mutex_init (D.46475_43, 1, D.46476_44);

Updating SSA information for statement D.46467_45 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_46 = session_11(D)->media_handle;

Updating SSA information for statement D.46479_49 = time (0B);

Updating SSA information for statement D.46467_46->engines[0].ssrc = D.46481_51;

Updating SSA information for statement D.46467_52 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_53 = session_11(D)->media_handle;

Updating SSA information for statement D.46484_56 = time (0B);

Updating SSA information for statement D.46467_53->engines[1].ssrc = D.46487_59;

Updating SSA information for statement D.46467_60 = session_11(D)->media_handle;

Updating SSA information for statement D.46488_61 = session_11(D)->pool;

Updating SSA information for statement D.46489_62 = switch_core_perform_alloc (D.46488_61, 84, "src/switch_core_media.c", &__func__, 1464);

Updating SSA information for statement D.46467_60->engines[0].payload_map = D.46489_62;

Updating SSA information for statement D.46467_63 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_64 = session_11(D)->media_handle;

Updating SSA information for statement D.46490_65 = D.46467_64->engines[0].payload_map;

Updating SSA information for statement D.46467_64->engines[0].cur_payload_map = D.46490_65;

Updating SSA information for statement D.46467_66 = session_11(D)->media_handle;

Updating SSA information for statement D.46491_67 = D.46467_66->engines[0].cur_payload_map;

Updating SSA information for statement D.46491_67->current = 1;

Updating SSA information for statement D.46467_68 = session_11(D)->media_handle;

Updating SSA information for statement D.46488_69 = session_11(D)->pool;

Updating SSA information for statement D.46492_70 = switch_core_perform_alloc (D.46488_69, 84, "src/switch_core_media.c", &__func__, 1467);

Updating SSA information for statement D.46467_68->engines[1].payload_map = D.46492_70;

Updating SSA information for statement D.46467_71 = session_11(D)->media_handle;

Updating SSA information for statement D.46467_72 = session_11(D)->media_handle;

Updating SSA information for statement D.46493_73 = D.46467_72->engines[1].payload_map;

Updating SSA information for statement D.46467_72->engines[1].cur_payload_map = D.46493_73;

Updating SSA information for statement D.46467_74 = session_11(D)->media_handle;

Updating SSA information for statement D.46494_75 = D.46467_74->engines[1].cur_payload_map;

Updating SSA information for statement D.46494_75->current = 1;

Updating SSA information for statement D.46495_76 = session_11(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.46495_76, 111, 1);



Registering new PHI nodes in block #18



Symbols to be put in SSA form

{ .MEM D.47419 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 19
Number of blocks to update: 18 ( 95%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 


Scope blocks after cleanups:

{ Scope block #0 
  switch_status_t status;
  struct switch_media_handle_t * smh;
  int i;
  static const char __func__[27] = "switch_media_handle_create";

  { Scope block #94 src/switch_core_media.c:1421 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #95 Originating from :#0 

    }

  }

}
switch_media_handle_create (struct switch_media_handle_t * * smhp, struct switch_core_session_t * session, struct switch_core_media_params_t * params)
{
  int D.47421;
  const char D.47420;
  int D.47419;
  static const char __func__[27] = "switch_media_handle_create";
  int i;
  struct switch_media_handle_t * smh;
  switch_status_t status;
  switch_status_t D.46496;
  struct switch_channel_t * D.46495;
  struct payload_map_t * D.46494;
  struct payload_map_t * D.46493;
  void * D.46492;
  struct payload_map_t * D.46491;
  struct payload_map_t * D.46490;
  void * D.46489;
  struct switch_memory_pool_t * D.46488;
  unsigned int D.46487;
  unsigned int D.46486;
  unsigned int D.46485;
  time_t D.46484;
  unsigned int D.46483;
  struct switch_rtp_engine_t * D.46482;
  unsigned int D.46481;
  unsigned int D.46480;
  time_t D.46479;
  unsigned int D.46478;
  struct switch_rtp_engine_t[2] * D.46477;
  struct switch_memory_pool_t * D.46476;
  struct switch_mutex_t * * D.46475;
  struct switch_memory_pool_t * D.46474;
  struct switch_mutex_t * * D.46473;
  switch_rtp_crypto_key_type_t i.136;
  unsigned int D.46471;
  smh_flag_t D.46470;
  struct switch_media_handle_t * D.46467;
  void * D.46466;
  int D.46463;
  char * D.46462;

<bb 2>:
  status_5 = 1;
  # DEBUG status => status_5
  smh_6 = 0B;
  # DEBUG smh => smh_6
  *smhp_7(D) = 0B;
  D.46462_9 = params_8(D)->sdp_username;
  # DEBUG s => D.46462_9
  if (D.46462_9 == 0B)
    goto <bb 5>;
  else
    goto <bb 3>;

<bb 3>:
  D.47420_119 = MEM[(const char *)D.46462_9];
  if (D.47420_119 == 0)
    goto <bb 5>;
  else
    goto <bb 4>;

<bb 4>:

<bb 5>:
  # D.47421_120 = PHI <1(2), 1(3), 0(4)>
  D.47419_121 = D.47421_120;
  D.46463_10 = D.47419_121;
  if (D.46463_10 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  params_8(D)->sdp_username = "FreeSWITCH";

<bb 7>:
  D.46466_12 = switch_core_perform_session_alloc (session_11(D), 23856, "src/switch_core_media.c", &__func__, 1426);
  session_11(D)->media_handle = D.46466_12;
  D.46467_13 = session_11(D)->media_handle;
  if (D.46467_13 != 0B)
    goto <bb 8>;
  else
    goto <bb 18>;

<bb 8>:
  D.46467_14 = session_11(D)->media_handle;
  D.46467_14->session = session_11(D);
  D.46467_15 = session_11(D)->media_handle;
  *smhp_7(D) = D.46467_15;
  D.46467_16 = session_11(D)->media_handle;
  D.46467_17 = session_11(D)->media_handle;
  D.46470_18 = D.46467_17->flags;
  D.46471_19 = D.46470_18 | 1;
  D.46467_17->flags = D.46471_19;
  D.46467_20 = session_11(D)->media_handle;
  D.46467_20->media_flags[0] = 1;
  D.46467_21 = session_11(D)->media_handle;
  D.46467_21->engines[0].read_frame.buflen = 16384;
  D.46467_22 = session_11(D)->media_handle;
  D.46467_22->engines[0].type = 0;
  D.46467_23 = session_11(D)->media_handle;
  D.46467_23->engines[0].crypto_type = 9;
  i_24 = 0;
  # DEBUG i => i_24
  goto <bb 10>;

<bb 9>:
  D.46467_25 = session_11(D)->media_handle;
  i.136_26 = (switch_rtp_crypto_key_type_t) i_2;
  D.46467_25->engines[0].ssec[i_2].crypto_type = i.136_26;
  i_27 = i_2 + 1;
  # DEBUG i => i_27

<bb 10>:
  # i_2 = PHI <i_24(8), i_27(9)>
  # DEBUG i => i_2
  if (i_2 <= 8)
    goto <bb 9>;
  else
    goto <bb 11>;

<bb 11>:
  D.46467_28 = session_11(D)->media_handle;
  D.46467_28->engines[1].read_frame.buflen = 16384;
  D.46467_29 = session_11(D)->media_handle;
  D.46467_29->engines[1].type = 1;
  D.46467_30 = session_11(D)->media_handle;
  D.46467_30->engines[1].crypto_type = 9;
  i_31 = 0;
  # DEBUG i => i_31
  goto <bb 13>;

<bb 12>:
  D.46467_32 = session_11(D)->media_handle;
  i.136_33 = (switch_rtp_crypto_key_type_t) i_3;
  D.46467_32->engines[1].ssec[i_3].crypto_type = i.136_33;
  i_34 = i_3 + 1;
  # DEBUG i => i_34

<bb 13>:
  # i_3 = PHI <i_31(11), i_34(12)>
  # DEBUG i => i_3
  if (i_3 <= 8)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 14>:
  D.46467_35 = session_11(D)->media_handle;
  D.46467_35->mparams = params_8(D);
  i_36 = 0;
  # DEBUG i => i_36
  goto <bb 16>;

<bb 15>:
  D.46467_37 = session_11(D)->media_handle;
  D.46467_37->crypto_suite_order[i_4] = 9;
  i_38 = i_4 + 1;
  # DEBUG i => i_38

<bb 16>:
  # i_4 = PHI <i_36(14), i_38(15)>
  # DEBUG i => i_4
  if (i_4 <= 9)
    goto <bb 15>;
  else
    goto <bb 17>;

<bb 17>:
  D.46467_39 = session_11(D)->media_handle;
  D.46473_40 = &D.46467_39->mutex;
  D.46474_41 = switch_core_session_get_pool (session_11(D));
  switch_mutex_init (D.46473_40, 1, D.46474_41);
  D.46467_42 = session_11(D)->media_handle;
  D.46475_43 = &D.46467_42->sdp_mutex;
  D.46476_44 = switch_core_session_get_pool (session_11(D));
  switch_mutex_init (D.46475_43, 1, D.46476_44);
  D.46467_45 = session_11(D)->media_handle;
  D.46467_46 = session_11(D)->media_handle;
  D.46477_47 = &D.46467_46->engines;
  D.46478_48 = (unsigned int) D.46477_47;
  D.46479_49 = time (0B);
  D.46480_50 = (unsigned int) D.46479_49;
  D.46481_51 = D.46478_48 + D.46480_50;
  D.46467_46->engines[0].ssrc = D.46481_51;
  D.46467_52 = session_11(D)->media_handle;
  D.46467_53 = session_11(D)->media_handle;
  D.46482_54 = &D.46467_53->engines[1];
  D.46483_55 = (unsigned int) D.46482_54;
  D.46484_56 = time (0B);
  D.46485_57 = (unsigned int) D.46484_56;
  D.46486_58 = D.46485_57 / 2;
  D.46487_59 = D.46483_55 + D.46486_58;
  D.46467_53->engines[1].ssrc = D.46487_59;
  D.46467_60 = session_11(D)->media_handle;
  D.46488_61 = session_11(D)->pool;
  D.46489_62 = switch_core_perform_alloc (D.46488_61, 84, "src/switch_core_media.c", &__func__, 1464);
  D.46467_60->engines[0].payload_map = D.46489_62;
  D.46467_63 = session_11(D)->media_handle;
  D.46467_64 = session_11(D)->media_handle;
  D.46490_65 = D.46467_64->engines[0].payload_map;
  D.46467_64->engines[0].cur_payload_map = D.46490_65;
  D.46467_66 = session_11(D)->media_handle;
  D.46491_67 = D.46467_66->engines[0].cur_payload_map;
  D.46491_67->current = 1;
  D.46467_68 = session_11(D)->media_handle;
  D.46488_69 = session_11(D)->pool;
  D.46492_70 = switch_core_perform_alloc (D.46488_69, 84, "src/switch_core_media.c", &__func__, 1467);
  D.46467_68->engines[1].payload_map = D.46492_70;
  D.46467_71 = session_11(D)->media_handle;
  D.46467_72 = session_11(D)->media_handle;
  D.46493_73 = D.46467_72->engines[1].payload_map;
  D.46467_72->engines[1].cur_payload_map = D.46493_73;
  D.46467_74 = session_11(D)->media_handle;
  D.46494_75 = D.46467_74->engines[1].cur_payload_map;
  D.46494_75->current = 1;
  D.46495_76 = session_11(D)->channel;
  switch_channel_set_flag_value (D.46495_76, 111, 1);
  status_77 = 0;
  # DEBUG status => status_77

<bb 18>:
  # status_1 = PHI <status_5(7), status_77(17)>
  # DEBUG status => status_1
  D.46496_78 = status_1;
  return D.46496_78;

}



;; Function switch_media_handle_set_media_flag (switch_media_handle_set_media_flag)

Iterations: 0
switch_media_handle_set_media_flag (struct switch_media_handle_t * smh, switch_core_media_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[35] = "switch_media_handle_set_media_flag";

<bb 2>:
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1482, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_1(D)->media_flags[flag_2(D)] = 1;
  return;

}



;; Function switch_media_handle_set_media_flags (switch_media_handle_set_media_flags)

Iterations: 0
switch_media_handle_set_media_flags (struct switch_media_handle_t * smh, switch_core_media_flag_t * flags)
{
  static const char __PRETTY_FUNCTION__[36] = "switch_media_handle_set_media_flags";
  int i;
  switch_core_media_flag_t D.46457;
  switch_core_media_flag_t * D.46456;
  unsigned int D.46455;
  unsigned int i.135;

<bb 2>:
  if (smh_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1491, &__PRETTY_FUNCTION__);

<bb 4>:
  i_3 = 0;
  # DEBUG i => i_3
  goto <bb 8>;

<bb 5>:
  i.135_4 = (unsigned int) i_1;
  D.46455_5 = i.135_4 * 4;
  D.46456_7 = flags_6(D) + D.46455_5;
  D.46457_8 = *D.46456_7;
  if (D.46457_8 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  i.135_9 = (unsigned int) i_1;
  D.46455_10 = i.135_9 * 4;
  D.46456_11 = flags_6(D) + D.46455_10;
  D.46457_12 = *D.46456_11;
  smh_2(D)->media_flags[i_1] = D.46457_12;

<bb 7>:
  i_13 = i_1 + 1;
  # DEBUG i => i_13

<bb 8>:
  # i_1 = PHI <i_3(4), i_13(7)>
  # DEBUG i => i_1
  if (i_1 <= 16)
    goto <bb 5>;
  else
    goto <bb 9>;

<bb 9>:
  return;

}



;; Function switch_media_handle_clear_media_flag (switch_media_handle_clear_media_flag)

Iterations: 0
switch_media_handle_clear_media_flag (struct switch_media_handle_t * smh, switch_core_media_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[37] = "switch_media_handle_clear_media_flag";

<bb 2>:
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1503, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_1(D)->media_flags[flag_2(D)] = 0;
  return;

}



;; Function switch_media_handle_test_media_flag (switch_media_handle_test_media_flag)

Iterations: 0
switch_media_handle_test_media_flag (struct switch_media_handle_t * smh, switch_core_media_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[36] = "switch_media_handle_test_media_flag";
  switch_core_media_flag_t D.46448;
  int32_t D.46447;

<bb 2>:
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1510, &__PRETTY_FUNCTION__);

<bb 4>:
  D.46448_3 = smh_1(D)->media_flags[flag_2(D)];
  D.46447_4 = (int32_t) D.46448_3;
  return D.46447_4;

}



;; Function generate_m (generate_m)

Considering inline candidate _zstr.
 Inlining _zstr into generate_m.
Processing frequency _zstr
  Called by generate_m that is normal or hot
Considering inline candidate switch_core_media_get_zrtp_hash.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate _zstr.
 Inlining _zstr into generate_m.
Processing frequency _zstr
  Called by generate_m that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into generate_m.
Processing frequency _zstr
  Called by generate_m that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into generate_m.
Processing frequency _zstr
  Called by generate_m that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into generate_m.
Processing frequency _zstr
  Called by generate_m that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into generate_m.
Processing frequency _zstr
  Called by generate_m that is normal or hot
Considering inline candidate gen_ice.
Not inlining: code size would grow by 121.
Considering inline candidate _zstr.
 Inlining _zstr into generate_m.
Processing frequency _zstr
  Called by generate_m that is normal or hot
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate get_channels.
Not inlining: code size would grow by 12.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate get_media_profile_name.
Not inlining: code size would grow by 15.
Inlining _zstr to generate_m with frequency 1000
Inlining _zstr to generate_m with frequency 1000
Inlining _zstr to generate_m with frequency 1000
Inlining _zstr to generate_m with frequency 1000
Inlining _zstr to generate_m with frequency 1000
Inlining _zstr to generate_m with frequency 1000
Inlining _zstr to generate_m with frequency 1000
Considering inline candidate switch_core_media_get_zrtp_hash.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate gen_ice.
Not inlining: code size would grow by 121.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate get_channels.
Not inlining: code size would grow by 12.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate get_media_profile_name.
Not inlining: code size would grow by 15.
Iterations: 1
Merging blocks 73 and 123
Merging blocks 81 and 128
Merging blocks 82 and 133
Merging blocks 88 and 138
Merging blocks 89 and 143
Merging blocks 98 and 148
Merging blocks 119 and 153
Merging blocks 126 and 122
Merging blocks 131 and 127
Merging blocks 136 and 132
Merging blocks 141 and 137
Merging blocks 146 and 142
Merging blocks 151 and 147
Merging blocks 156 and 152


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement already_did = {};



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 5614, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_23 = session_22(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.42588_26 = strlen (buf_25(D));

Updating SSA information for statement D.42590_28 = strlen (buf_25(D));



Registering new PHI nodes in block #6

Updating SSA information for statement D.42599_34 = session_22(D)->channel;

Updating SSA information for statement D.42600_35 = switch_channel_direction (D.42599_34);



Registering new PHI nodes in block #7

Updating SSA information for statement D.42601_36 = a_engine_24->crypto_type;



Registering new PHI nodes in block #9



Registering new PHI nodes in block #8



Registering new PHI nodes in block #10

Updating SSA information for statement D.42602_39 = get_media_profile_name (session_22(D), iftmp.40_16);

Updating SSA information for statement switch_snprintf (D.42589_27, D.42591_30, "m=audio %d %s", D.42592_32, D.42602_39);



Registering new PHI nodes in block #28

Updating SSA information for statement D.42634_41 = smh_23->mparams;

Updating SSA information for statement D.42635_42 = D.42634_41->num_codecs;



Registering new PHI nodes in block #11

Updating SSA information for statement imp_43 = smh_23->codecs[i_2];

Updating SSA information for statement D.42603_44 = imp_43->microseconds_per_packet;

Updating SSA information for statement D.42606_46 = imp_43->iananame;

Updating SSA information for statement D.42607_47 = strcasecmp (D.42606_46, "ilbc");



Registering new PHI nodes in block #12

Updating SSA information for statement D.42606_48 = imp_43->iananame;

Updating SSA information for statement D.42609_49 = strcasecmp (D.42606_48, "isac");



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement D.42610_51 = imp_43->codec_type;



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17



Registering new PHI nodes in block #18



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22

Updating SSA information for statement D.42622_54 = smh_23->ianacodes[i_2];



Registering new PHI nodes in block #23

Updating SSA information for statement D.42622_56 = smh_23->ianacodes[i_2];

Updating SSA information for statement D.42627_58 = already_did[D.42626_57];



Registering new PHI nodes in block #24



Registering new PHI nodes in block #25

Updating SSA information for statement D.42622_59 = smh_23->ianacodes[i_2];

Updating SSA information for statement already_did[D.42626_60] = 1;



Registering new PHI nodes in block #26

Updating SSA information for statement D.42630_61 = strlen (buf_25(D));

Updating SSA information for statement D.42632_63 = strlen (buf_25(D));

Updating SSA information for statement D.42622_65 = smh_23->ianacodes[i_2];

Updating SSA information for statement switch_snprintf (D.42631_62, D.42633_64, " %d", D.42626_66);



Registering new PHI nodes in block #27



Registering new PHI nodes in block #29

Updating SSA information for statement D.42634_68 = smh_23->mparams;

Updating SSA information for statement D.42636_69 = D.42634_68->dtmf_type;



Registering new PHI nodes in block #30

Updating SSA information for statement D.42634_70 = smh_23->mparams;

Updating SSA information for statement D.42639_71 = D.42634_70->te;



Registering new PHI nodes in block #31

Updating SSA information for statement D.42642_72 = strlen (buf_25(D));

Updating SSA information for statement D.42644_74 = strlen (buf_25(D));

Updating SSA information for statement D.42634_76 = smh_23->mparams;

Updating SSA information for statement D.42639_77 = D.42634_76->te;

Updating SSA information for statement switch_snprintf (D.42643_73, D.42645_75, " %d", D.42646_78);



Registering new PHI nodes in block #32

Updating SSA information for statement D.42647_79 = switch_media_handle_test_media_flag (smh_23, 9);



Registering new PHI nodes in block #33



Registering new PHI nodes in block #34

Updating SSA information for statement D.42655_85 = strlen (buf_25(D));

Updating SSA information for statement D.42657_87 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42656_86, D.42658_88, " %d", cng_type_80(D));



Registering new PHI nodes in block #35

Updating SSA information for statement D.42659_89 = strlen (buf_25(D));

Updating SSA information for statement D.42661_91 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42660_90, D.42662_92, "\n");

Updating SSA information for statement memset (&already_did, 0, 512);



Registering new PHI nodes in block #65

Updating SSA information for statement D.42634_94 = smh_23->mparams;

Updating SSA information for statement D.42635_95 = D.42634_94->num_codecs;



Registering new PHI nodes in block #36

Updating SSA information for statement imp_96 = smh_23->codecs[i_3];

Updating SSA information for statement fmtp_97 = imp_96->fmtp;

Updating SSA information for statement D.42663_98 = imp_96->microseconds_per_packet;

Updating SSA information for statement D.42664_100 = imp_96->codec_type;



Registering new PHI nodes in block #37



Registering new PHI nodes in block #38

Updating SSA information for statement D.42669_101 = imp_96->iananame;

Updating SSA information for statement D.42670_102 = strcasecmp (D.42669_101, "ilbc");



Registering new PHI nodes in block #39

Updating SSA information for statement D.42669_103 = imp_96->iananame;

Updating SSA information for statement D.42672_104 = strcasecmp (D.42669_103, "isac");



Registering new PHI nodes in block #40



Registering new PHI nodes in block #41



Registering new PHI nodes in block #42



Registering new PHI nodes in block #43



Registering new PHI nodes in block #44



Registering new PHI nodes in block #45



Registering new PHI nodes in block #46



Registering new PHI nodes in block #47

Updating SSA information for statement D.42622_107 = smh_23->ianacodes[i_3];



Registering new PHI nodes in block #48

Updating SSA information for statement D.42622_109 = smh_23->ianacodes[i_3];

Updating SSA information for statement D.42627_111 = already_did[D.42626_110];



Registering new PHI nodes in block #49



Registering new PHI nodes in block #50

Updating SSA information for statement D.42622_112 = smh_23->ianacodes[i_3];

Updating SSA information for statement already_did[D.42626_113] = 1;



Registering new PHI nodes in block #51

Updating SSA information for statement D.42686_114 = imp_96->samples_per_second;



Registering new PHI nodes in block #52

Updating SSA information for statement key = "";

Updating SSA information for statement D.42669_118 = imp_96->iananame;

Updating SSA information for statement D.42689_119 = imp_96->bits_per_second;

Updating SSA information for statement switch_snprintf (&key, 128, "%s:%u", D.42669_118, D.42689_119);

Updating SSA information for statement check_120 = switch_event_get_header_idx (map_116(D), &key, -1);



Registering new PHI nodes in block #53

Updating SSA information for statement D.42669_121 = imp_96->iananame;

Updating SSA information for statement check_122 = switch_event_get_header_idx (map_116(D), D.42669_121, -1);



Registering new PHI nodes in block #54



Registering new PHI nodes in block #55

Updating SSA information for statement D.42693_124 = smh_23->fmtps[i_3];



Registering new PHI nodes in block #56

Updating SSA information for statement fmtp_125 = smh_23->fmtps[i_3];



Registering new PHI nodes in block #57

Updating SSA information for statement D.42622_126 = smh_23->ianacodes[i_3];



Registering new PHI nodes in block #58

Updating SSA information for statement D.42599_127 = session_22(D)->channel;

Updating SSA information for statement D.42699_128 = switch_channel_test_flag (D.42599_127, 110);



Registering new PHI nodes in block #59

Updating SSA information for statement D.42669_129 = imp_96->iananame;

Updating SSA information for statement D.42700_130 = imp_96->number_of_channels;

Updating SSA information for statement channels_132 = get_channels (D.42669_129, D.42701_131);



Registering new PHI nodes in block #60

Updating SSA information for statement D.42704_133 = strlen (buf_25(D));

Updating SSA information for statement D.42706_135 = strlen (buf_25(D));

Updating SSA information for statement D.42622_137 = smh_23->ianacodes[i_3];

Updating SSA information for statement D.42669_139 = imp_96->iananame;

Updating SSA information for statement switch_snprintf (D.42705_134, D.42707_136, "a=rtpmap:%d %s/%d/%d\n", D.42626_138, D.42669_139, rate_115, channels_132);



Registering new PHI nodes in block #61

Updating SSA information for statement D.42709_140 = strlen (buf_25(D));

Updating SSA information for statement D.42711_142 = strlen (buf_25(D));

Updating SSA information for statement D.42622_144 = smh_23->ianacodes[i_3];

Updating SSA information for statement D.42669_146 = imp_96->iananame;

Updating SSA information for statement switch_snprintf (D.42710_141, D.42712_143, "a=rtpmap:%d %s/%d\n", D.42626_145, D.42669_146, rate_115);



Registering new PHI nodes in block #62



Registering new PHI nodes in block #63

Updating SSA information for statement D.42715_147 = strlen (buf_25(D));

Updating SSA information for statement D.42717_149 = strlen (buf_25(D));

Updating SSA information for statement D.42622_151 = smh_23->ianacodes[i_3];

Updating SSA information for statement switch_snprintf (D.42716_148, D.42718_150, "a=fmtp:%d %s\n", D.42626_152, fmtp_12);



Registering new PHI nodes in block #64



Registering new PHI nodes in block #66

Updating SSA information for statement D.42634_154 = smh_23->mparams;

Updating SSA information for statement D.42636_155 = D.42634_154->dtmf_type;



Registering new PHI nodes in block #67

Updating SSA information for statement D.42722_156 = switch_media_handle_test_media_flag (smh_23, 8);



Registering new PHI nodes in block #68

Updating SSA information for statement D.42599_157 = session_22(D)->channel;

Updating SSA information for statement D.42724_158 = switch_channel_test_flag (D.42599_157, 93);



Registering new PHI nodes in block #69

Updating SSA information for statement D.42634_159 = smh_23->mparams;

Updating SSA information for statement D.42639_160 = D.42634_159->te;



Registering new PHI nodes in block #70

Updating SSA information for statement D.42599_161 = session_22(D)->channel;

Updating SSA information for statement D.42727_162 = switch_channel_test_flag (D.42599_161, 106);



Registering new PHI nodes in block #71

Updating SSA information for statement D.42730_163 = strlen (buf_25(D));

Updating SSA information for statement D.42732_165 = strlen (buf_25(D));

Updating SSA information for statement D.42634_167 = smh_23->mparams;

Updating SSA information for statement D.42639_168 = D.42634_167->te;

Updating SSA information for statement switch_snprintf (D.42731_164, D.42733_166, "a=rtpmap:%d telephone-event/8000\n", D.42646_169);



Registering new PHI nodes in block #72

Updating SSA information for statement D.42735_170 = strlen (buf_25(D));

Updating SSA information for statement D.42737_172 = strlen (buf_25(D));

Updating SSA information for statement D.42634_174 = smh_23->mparams;

Updating SSA information for statement D.42639_175 = D.42634_174->te;

Updating SSA information for statement D.42634_177 = smh_23->mparams;

Updating SSA information for statement D.42639_178 = D.42634_177->te;

Updating SSA information for statement switch_snprintf (D.42736_171, D.42738_173, "a=rtpmap:%d telephone-event/8000\na=fmtp:%d 0-16\n", D.42646_179, D.42646_179);



Registering new PHI nodes in block #73

Updating SSA information for statement D.42739_180 = a_engine_24->local_dtls_fingerprint.type;



Registering new PHI nodes in block #74

Updating SSA information for statement D.47441_455 = MEM[(const char *)D.42739_180];



Registering new PHI nodes in block #75



Registering new PHI nodes in block #76

Updating SSA information for statement D.47440 = D.47442_456;

Updating SSA information for statement D.42740_181 = D.47440;



Registering new PHI nodes in block #77



Registering new PHI nodes in block #78

Updating SSA information for statement D.42745_182 = strlen (buf_25(D));

Updating SSA information for statement D.42747_184 = strlen (buf_25(D));

Updating SSA information for statement D.42739_186 = a_engine_24->local_dtls_fingerprint.type;

Updating SSA information for statement switch_snprintf (D.42746_183, D.42748_185, "a=fingerprint:%s %s\n", D.42739_186, D.42749_187);



Registering new PHI nodes in block #79

Updating SSA information for statement D.42634_188 = smh_23->mparams;

Updating SSA information for statement D.42750_189 = D.42634_188->rtcp_audio_interval_msec;



Registering new PHI nodes in block #80

Updating SSA information for statement D.42753_190 = a_engine_24->rtcp_mux;



Registering new PHI nodes in block #81

Updating SSA information for statement D.42756_191 = strlen (buf_25(D));

Updating SSA information for statement D.42758_193 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42757_192, D.42759_194, "a=rtcp-mux\n");

Updating SSA information for statement D.42760_195 = strlen (buf_25(D));

Updating SSA information for statement D.42762_197 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42761_196, D.42763_198, "a=rtcp:%d IN %s %s\n", D.42592_199, family_200(D), ip_201(D));



Registering new PHI nodes in block #82

Updating SSA information for statement D.42765_202 = strlen (buf_25(D));

Updating SSA information for statement D.42767_204 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42766_203, D.42768_205, "a=rtcp:%d IN %s %s\n", D.42769_207, family_200(D), ip_201(D));



Registering new PHI nodes in block #83

Updating SSA information for statement D.42770_208 = a_engine_24->ice_out.cands[0][0].ready;



Registering new PHI nodes in block #84

Updating SSA information for statement tmp1 = "";

Updating SSA information for statement tmp2 = "";

Updating SSA information for statement tmp1[10] = 0;

Updating SSA information for statement tmp2[10] = 0;

Updating SSA information for statement switch_stun_random_string (&tmp1, 10, "0123456789");

Updating SSA information for statement switch_stun_random_string (&tmp2, 10, "0123456789");

Updating SSA information for statement gen_ice (session_22(D), 0, 0B, 0);

Updating SSA information for statement D.42773_212 = strlen (buf_25(D));

Updating SSA information for statement D.42775_214 = strlen (buf_25(D));

Updating SSA information for statement D.42777_216 = a_engine_24->ssrc;

Updating SSA information for statement D.42778_217 = smh_23->cname;

Updating SSA information for statement switch_snprintf (D.42774_213, D.42776_215, "a=ssrc:%u cname:%s\n", D.42777_216, D.42778_217);

Updating SSA information for statement D.42779_218 = strlen (buf_25(D));

Updating SSA information for statement D.42781_220 = strlen (buf_25(D));

Updating SSA information for statement D.42777_222 = a_engine_24->ssrc;

Updating SSA information for statement D.42783_223 = smh_23->msid;

Updating SSA information for statement switch_snprintf (D.42780_219, D.42782_221, "a=ssrc:%u msid:%s a0\n", D.42777_222, D.42783_223);

Updating SSA information for statement D.42784_224 = strlen (buf_25(D));

Updating SSA information for statement D.42786_226 = strlen (buf_25(D));

Updating SSA information for statement D.42777_228 = a_engine_24->ssrc;

Updating SSA information for statement D.42783_229 = smh_23->msid;

Updating SSA information for statement switch_snprintf (D.42785_225, D.42787_227, "a=ssrc:%u mslabel:%s\n", D.42777_228, D.42783_229);

Updating SSA information for statement D.42788_230 = strlen (buf_25(D));

Updating SSA information for statement D.42790_232 = strlen (buf_25(D));

Updating SSA information for statement D.42777_234 = a_engine_24->ssrc;

Updating SSA information for statement D.42783_235 = smh_23->msid;

Updating SSA information for statement switch_snprintf (D.42789_231, D.42791_233, "a=ssrc:%u label:%sa0\n", D.42777_234, D.42783_235);

Updating SSA information for statement D.42792_236 = strlen (buf_25(D));

Updating SSA information for statement D.42794_238 = strlen (buf_25(D));

Updating SSA information for statement D.42796_240 = ice_out_211->ufrag;

Updating SSA information for statement switch_snprintf (D.42793_237, D.42795_239, "a=ice-ufrag:%s\n", D.42796_240);

Updating SSA information for statement D.42797_241 = strlen (buf_25(D));

Updating SSA information for statement D.42799_243 = strlen (buf_25(D));

Updating SSA information for statement D.42801_245 = ice_out_211->pwd;

Updating SSA information for statement switch_snprintf (D.42798_242, D.42800_244, "a=ice-pwd:%s\n", D.42801_245);

Updating SSA information for statement D.42802_246 = strlen (buf_25(D));

Updating SSA information for statement D.42804_248 = strlen (buf_25(D));

Updating SSA information for statement D.42806_250 = ice_out_211->cands[0][0].transport;

Updating SSA information for statement D.42807_251 = ice_out_211->cands[0][0].con_addr;

Updating SSA information for statement D.42808_252 = ice_out_211->cands[0][0].con_port;

Updating SSA information for statement switch_snprintf (D.42803_247, D.42805_249, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.42806_250, c1_209, D.42807_251, D.42809_253);

Updating SSA information for statement D.42810_254 = a_engine_24->local_sdp_ip;



Registering new PHI nodes in block #85

Updating SSA information for statement D.47445_457 = MEM[(const char *)D.42810_254];



Registering new PHI nodes in block #86



Registering new PHI nodes in block #87

Updating SSA information for statement D.47444 = D.47446_458;

Updating SSA information for statement D.42811_255 = D.47444;



Registering new PHI nodes in block #88

Updating SSA information for statement D.42807_256 = ice_out_211->cands[0][0].con_addr;



Registering new PHI nodes in block #89

Updating SSA information for statement D.47449_459 = MEM[(const char *)D.42807_256];



Registering new PHI nodes in block #90



Registering new PHI nodes in block #91

Updating SSA information for statement D.47448 = D.47450_460;

Updating SSA information for statement D.42814_257 = D.47448;



Registering new PHI nodes in block #92

Updating SSA information for statement D.42810_258 = a_engine_24->local_sdp_ip;

Updating SSA information for statement D.42807_259 = ice_out_211->cands[0][0].con_addr;

Updating SSA information for statement D.39479_260 = __builtin_strcmp (D.42810_258, D.42807_259);



Registering new PHI nodes in block #93

Updating SSA information for statement D.42819_261 = a_engine_24->local_sdp_port;

Updating SSA information for statement D.42808_262 = ice_out_211->cands[0][0].con_port;



Registering new PHI nodes in block #94

Updating SSA information for statement D.42822_263 = strlen (buf_25(D));

Updating SSA information for statement D.42824_265 = strlen (buf_25(D));

Updating SSA information for statement D.42806_267 = ice_out_211->cands[0][0].transport;

Updating SSA information for statement D.42807_268 = ice_out_211->cands[0][0].con_addr;

Updating SSA information for statement D.42808_269 = ice_out_211->cands[0][0].con_port;

Updating SSA information for statement D.42810_271 = a_engine_24->local_sdp_ip;

Updating SSA information for statement D.42819_272 = a_engine_24->local_sdp_port;

Updating SSA information for statement switch_snprintf (D.42823_264, D.42825_266, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.42806_267, c2_210, D.42807_268, D.42809_270, D.42810_271, D.42826_273);



Registering new PHI nodes in block #95

Updating SSA information for statement D.42753_274 = a_engine_24->rtcp_mux;



Registering new PHI nodes in block #96

Updating SSA information for statement D.42599_275 = session_22(D)->channel;

Updating SSA information for statement D.42830_276 = switch_channel_direction (D.42599_275);



Registering new PHI nodes in block #97

Updating SSA information for statement D.42831_277 = strlen (buf_25(D));

Updating SSA information for statement D.42833_279 = strlen (buf_25(D));

Updating SSA information for statement D.42806_281 = ice_out_211->cands[0][0].transport;

Updating SSA information for statement D.42807_282 = ice_out_211->cands[0][0].con_addr;

Updating SSA information for statement D.42808_283 = ice_out_211->cands[0][0].con_port;

Updating SSA information for statement D.42753_285 = a_engine_24->rtcp_mux;

Updating SSA information for statement switch_snprintf (D.42832_278, D.42834_280, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.42806_281, c1_209, D.42807_282, D.42836_287);

Updating SSA information for statement D.42810_288 = a_engine_24->local_sdp_ip;



Registering new PHI nodes in block #98

Updating SSA information for statement D.47453_461 = MEM[(const char *)D.42810_288];



Registering new PHI nodes in block #99



Registering new PHI nodes in block #100

Updating SSA information for statement D.47452 = D.47454_462;

Updating SSA information for statement D.42837_289 = D.47452;



Registering new PHI nodes in block #101

Updating SSA information for statement D.42840_290 = ice_out_211->cands[0][1].con_addr;



Registering new PHI nodes in block #102

Updating SSA information for statement D.47457_463 = MEM[(const char *)D.42840_290];



Registering new PHI nodes in block #103



Registering new PHI nodes in block #104

Updating SSA information for statement D.47456 = D.47458_464;

Updating SSA information for statement D.42841_291 = D.47456;



Registering new PHI nodes in block #105

Updating SSA information for statement D.42810_292 = a_engine_24->local_sdp_ip;

Updating SSA information for statement D.42840_293 = ice_out_211->cands[0][1].con_addr;

Updating SSA information for statement D.39488_294 = __builtin_strcmp (D.42810_292, D.42840_293);



Registering new PHI nodes in block #106

Updating SSA information for statement D.42819_295 = a_engine_24->local_sdp_port;

Updating SSA information for statement D.42846_296 = ice_out_211->cands[0][1].con_port;



Registering new PHI nodes in block #107

Updating SSA information for statement D.42849_297 = strlen (buf_25(D));

Updating SSA information for statement D.42851_299 = strlen (buf_25(D));

Updating SSA information for statement D.42806_301 = ice_out_211->cands[0][0].transport;

Updating SSA information for statement D.42807_302 = ice_out_211->cands[0][0].con_addr;

Updating SSA information for statement D.42808_303 = ice_out_211->cands[0][0].con_port;

Updating SSA information for statement D.42753_305 = a_engine_24->rtcp_mux;

Updating SSA information for statement D.42810_308 = a_engine_24->local_sdp_ip;

Updating SSA information for statement D.42819_309 = a_engine_24->local_sdp_port;

Updating SSA information for statement D.42753_311 = a_engine_24->rtcp_mux;

Updating SSA information for statement switch_snprintf (D.42850_298, D.42852_300, "a=candidate:%s 2 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.42806_301, c2_210, D.42807_302, D.42836_307, D.42810_308, D.42853_313);



Registering new PHI nodes in block #108



Registering new PHI nodes in block #109

Updating SSA information for statement D.42599_314 = session_22(D)->channel;

Updating SSA information for statement D.42856_315 = switch_channel_test_flag (D.42599_314, 109);



Registering new PHI nodes in block #110



Registering new PHI nodes in block #119

Updating SSA information for statement D.42859_317 = smh_23->crypto_suite_order[i_15];



Registering new PHI nodes in block #111

Updating SSA information for statement D.42859_318 = smh_23->crypto_suite_order[i_15];

Updating SSA information for statement j_319 = SUITES[D.42859_318].type;

Updating SSA information for statement D.42601_320 = a_engine_24->crypto_type;



Registering new PHI nodes in block #112

Updating SSA information for statement D.42601_321 = a_engine_24->crypto_type;



Registering new PHI nodes in block #113

Updating SSA information for statement D.42863_322 = a_engine_24->ssec[j_319].local_crypto_key;



Registering new PHI nodes in block #114

Updating SSA information for statement D.47461_465 = MEM[(const char *)D.42863_322];



Registering new PHI nodes in block #115



Registering new PHI nodes in block #116

Updating SSA information for statement D.47460 = D.47462_466;

Updating SSA information for statement D.42864_323 = D.47460;



Registering new PHI nodes in block #117

Updating SSA information for statement D.42867_324 = strlen (buf_25(D));

Updating SSA information for statement D.42869_326 = strlen (buf_25(D));

Updating SSA information for statement D.42863_328 = a_engine_24->ssec[j_319].local_crypto_key;

Updating SSA information for statement switch_snprintf (D.42868_325, D.42870_327, "a=crypto:%s\n", D.42863_328);



Registering new PHI nodes in block #118



Registering new PHI nodes in block #120



Registering new PHI nodes in block #121

Updating SSA information for statement D.42873_330 = switch_media_handle_test_media_flag (smh_23, 9);



Registering new PHI nodes in block #122

Updating SSA information for statement D.42876_331 = strlen (buf_25(D));

Updating SSA information for statement D.42878_333 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42877_332, D.42879_334, "a=silenceSupp:off - - - -\n");



Registering new PHI nodes in block #123



Registering new PHI nodes in block #124

Updating SSA information for statement D.42882_336 = strlen (buf_25(D));

Updating SSA information for statement D.42884_338 = strlen (buf_25(D));

Updating SSA information for statement D.42888_340 = *append_audio_335(D);



Registering new PHI nodes in block #125

Updating SSA information for statement D.42891_341 = strlen (append_audio_335(D));



Registering new PHI nodes in block #126



Registering new PHI nodes in block #127

Updating SSA information for statement D.42894_345 = *iftmp.42_18;



Registering new PHI nodes in block #128



Registering new PHI nodes in block #129



Registering new PHI nodes in block #130

Updating SSA information for statement switch_snprintf (D.42883_337, D.42885_339, "%s%s", append_audio_335(D), iftmp.41_17);



Registering new PHI nodes in block #131



Registering new PHI nodes in block #132



Registering new PHI nodes in block #133



Registering new PHI nodes in block #134

Updating SSA information for statement D.42905_352 = strlen (buf_25(D));

Updating SSA information for statement D.42907_354 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42906_353, D.42908_355, "a=ptime:%d\n", cur_ptime_1);



Registering new PHI nodes in block #135

Updating SSA information for statement local_sdp_audio_zrtp_hash_356 = switch_core_media_get_zrtp_hash (session_22(D), 0, 1);



Registering new PHI nodes in block #136

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5882, session_22(D), 7, "Adding audio a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_356);

Updating SSA information for statement D.42911_357 = strlen (buf_25(D));

Updating SSA information for statement D.42913_359 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42912_358, D.42914_360, "a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_356);



Registering new PHI nodes in block #137



Registering new PHI nodes in block #138

Updating SSA information for statement D.47465_467 = *sr_361(D);



Registering new PHI nodes in block #139



Registering new PHI nodes in block #140

Updating SSA information for statement D.47464 = D.47466_468;

Updating SSA information for statement D.42915_362 = D.47464;



Registering new PHI nodes in block #141

Updating SSA information for statement D.42918_363 = strlen (buf_25(D));

Updating SSA information for statement D.42920_365 = strlen (buf_25(D));

Updating SSA information for statement switch_snprintf (D.42919_364, D.42921_366, "a=%s\n", sr_361(D));



Registering new PHI nodes in block #142



Symbols to be put in SSA form

{ .MEM D.47440 D.47444 D.47448 D.47452 D.47456 D.47460 D.47464 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 143
Number of blocks to update: 142 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 


Scope blocks after cleanups:

{ Scope block #0 
  int i;
  int rate;
  int already_did[128];
  int ptime;
  int noptime;
  const char * local_sdp_audio_zrtp_hash;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  static const char __PRETTY_FUNCTION__[11] = "generate_m";
  static const char __func__[11] = "generate_m";

  { Scope block #96 src/switch_core_media.c:5886 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #97 Originating from :#0 

    }

  }

  { Scope block #98 src/switch_core_media.c:5758 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #99 Originating from :#0 

    }

  }

  { Scope block #100 
    const struct switch_codec_implementation_t * imp;
    int this_ptime;

  }

  { Scope block #101 
    const struct switch_codec_implementation_t * imp;
    char * fmtp;
    int this_ptime;

    { Scope block #102 
      char key[128];
      char * check;

    }

    { Scope block #103 
      int channels;

    }

  }

  { Scope block #104 
    char tmp1[11];
    char tmp2[11];
    uint32_t c1;
    uint32_t c2;
    struct ice_t * ice_out;

    { Scope block #105 src/switch_core_media.c:5826 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #106 Originating from :#0 

      }

    }

    { Scope block #107 src/switch_core_media.c:5826 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #108 Originating from :#0 

      }

    }

    { Scope block #109 src/switch_core_media.c:5807 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #110 Originating from :#0 

      }

    }

    { Scope block #111 src/switch_core_media.c:5807 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #112 Originating from :#0 

      }

    }

    { Scope block #113 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

    { Scope block #114 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

  }

  { Scope block #115 
    int i;

    { Scope block #116 
      switch_rtp_crypto_key_type_t j;

      { Scope block #117 src/switch_core_media.c:5852 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #118 Originating from :#0 

        }

      }

    }

  }

}
generate_m (struct switch_core_session_t * session, char * buf, size_t buflen, switch_port_t port, const char * family, const char * ip, int cur_ptime, const char * append_audio, const char * sr, int use_cng, int cng_type, struct switch_event_t * map, int secure, switch_sdp_type_t sdp_type)
{
  int D.47466;
  const char D.47465;
  int D.47464;
  int D.47462;
  const char D.47461;
  int D.47460;
  int D.47458;
  const char D.47457;
  int D.47456;
  int D.47454;
  const char D.47453;
  int D.47452;
  int D.47450;
  const char D.47449;
  int D.47448;
  int D.47446;
  const char D.47445;
  int D.47444;
  int D.47442;
  const char D.47441;
  int D.47440;
  switch_rtp_crypto_key_type_t j;
  int i;
  struct ice_t * ice_out;
  uint32_t c2;
  uint32_t c1;
  char tmp2[11];
  char tmp1[11];
  int channels;
  char * check;
  char key[128];
  int this_ptime;
  char * fmtp;
  const struct switch_codec_implementation_t * imp;
  int this_ptime;
  const struct switch_codec_implementation_t * imp;
  static const char __func__[11] = "generate_m";
  static const char __PRETTY_FUNCTION__[11] = "generate_m";
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  const char * local_sdp_audio_zrtp_hash;
  int noptime;
  int ptime;
  int already_did[128];
  int rate;
  int i;
  size_t D.42921;
  size_t D.42920;
  char * D.42919;
  size_t D.42918;
  int D.42915;
  size_t D.42914;
  size_t D.42913;
  char * D.42912;
  size_t D.42911;
  size_t D.42908;
  size_t D.42907;
  char * D.42906;
  size_t D.42905;
  _Bool D.42902;
  _Bool D.42901;
  _Bool D.42900;
  const char D.42894;
  unsigned int D.42892;
  size_t D.42891;
  const char D.42888;
  const char * iftmp.42;
  char * iftmp.41;
  size_t D.42885;
  size_t D.42884;
  char * D.42883;
  size_t D.42882;
  size_t D.42879;
  size_t D.42878;
  char * D.42877;
  size_t D.42876;
  int32_t D.42873;
  size_t D.42870;
  size_t D.42869;
  char * D.42868;
  size_t D.42867;
  int D.42864;
  char * D.42863;
  switch_rtp_crypto_key_type_t D.42859;
  uint32_t D.42856;
  int D.42853;
  size_t D.42852;
  size_t D.42851;
  char * D.42850;
  size_t D.42849;
  switch_port_t D.42846;
  int D.39488;
  int D.42841;
  char * D.42840;
  int D.42837;
  int D.42836;
  int D.42835;
  size_t D.42834;
  size_t D.42833;
  char * D.42832;
  size_t D.42831;
  switch_call_direction_t D.42830;
  int D.42826;
  size_t D.42825;
  size_t D.42824;
  char * D.42823;
  size_t D.42822;
  switch_port_t D.42819;
  int D.39479;
  int D.42814;
  int D.42811;
  char * D.42810;
  int D.42809;
  switch_port_t D.42808;
  char * D.42807;
  char * D.42806;
  size_t D.42805;
  size_t D.42804;
  char * D.42803;
  size_t D.42802;
  char * D.42801;
  size_t D.42800;
  size_t D.42799;
  char * D.42798;
  size_t D.42797;
  char * D.42796;
  size_t D.42795;
  size_t D.42794;
  char * D.42793;
  size_t D.42792;
  size_t D.42791;
  size_t D.42790;
  char * D.42789;
  size_t D.42788;
  size_t D.42787;
  size_t D.42786;
  char * D.42785;
  size_t D.42784;
  char * D.42783;
  size_t D.42782;
  size_t D.42781;
  char * D.42780;
  size_t D.42779;
  char * D.42778;
  uint32_t D.42777;
  size_t D.42776;
  size_t D.42775;
  char * D.42774;
  size_t D.42773;
  uint8_t D.42770;
  int D.42769;
  size_t D.42768;
  size_t D.42767;
  char * D.42766;
  size_t D.42765;
  size_t D.42763;
  size_t D.42762;
  char * D.42761;
  size_t D.42760;
  size_t D.42759;
  size_t D.42758;
  char * D.42757;
  size_t D.42756;
  int8_t D.42753;
  char * D.42750;
  char[192] * D.42749;
  size_t D.42748;
  size_t D.42747;
  char * D.42746;
  size_t D.42745;
  int D.42740;
  char * D.42739;
  size_t D.42738;
  size_t D.42737;
  char * D.42736;
  size_t D.42735;
  size_t D.42733;
  size_t D.42732;
  char * D.42731;
  size_t D.42730;
  uint32_t D.42727;
  uint32_t D.42724;
  int32_t D.42722;
  size_t D.42718;
  size_t D.42717;
  char * D.42716;
  size_t D.42715;
  size_t D.42712;
  size_t D.42711;
  char * D.42710;
  size_t D.42709;
  size_t D.42707;
  size_t D.42706;
  char * D.42705;
  size_t D.42704;
  int D.42701;
  const uint8_t D.42700;
  uint32_t D.42699;
  char * D.42693;
  const int D.42689;
  const uint32_t D.42686;
  int D.42672;
  int D.42670;
  char * const D.42669;
  const switch_codec_type_t D.42664;
  const int D.42663;
  size_t D.42662;
  size_t D.42661;
  char * D.42660;
  size_t D.42659;
  size_t D.42658;
  size_t D.42657;
  char * D.42656;
  size_t D.42655;
  _Bool D.42652;
  _Bool D.42651;
  _Bool D.42650;
  int32_t D.42647;
  int D.42646;
  size_t D.42645;
  size_t D.42644;
  char * D.42643;
  size_t D.42642;
  switch_payload_t D.42639;
  switch_core_media_dtmf_t D.42636;
  int D.42635;
  struct switch_core_media_params_t * D.42634;
  size_t D.42633;
  size_t D.42632;
  char * D.42631;
  size_t D.42630;
  int D.42627;
  int D.42626;
  signed char D.42623;
  switch_payload_t D.42622;
  const switch_codec_type_t D.42610;
  int D.42609;
  int D.42607;
  char * const D.42606;
  const int D.42603;
  const char * D.42602;
  switch_rtp_crypto_key_type_t D.42601;
  switch_call_direction_t D.42600;
  struct switch_channel_t * D.42599;
  int iftmp.40;
  int D.42592;
  size_t D.42591;
  size_t D.42590;
  char * D.42589;
  size_t D.42588;

<bb 2>:
  i_19 = 0;
  # DEBUG i => i_19
  already_did = {};
  ptime_20 = 0;
  # DEBUG ptime => ptime_20
  noptime_21 = 0;
  # DEBUG noptime => noptime_21
  if (session_22(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 5614, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_23 = session_22(D)->media_handle;
  # DEBUG smh => smh_23
  if (smh_23 == 0B)
    goto <bb 142>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_24 = &smh_23->engines;
  # DEBUG a_engine => a_engine_24
  D.42588_26 = strlen (buf_25(D));
  D.42589_27 = buf_25(D) + D.42588_26;
  D.42590_28 = strlen (buf_25(D));
  D.42591_30 = buflen_29(D) - D.42590_28;
  D.42592_32 = (int) port_31(D);
  if (secure_33(D) != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.42599_34 = session_22(D)->channel;
  D.42600_35 = switch_channel_direction (D.42599_34);
  if (D.42600_35 == 1)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:
  D.42601_36 = a_engine_24->crypto_type;
  if (D.42601_36 != 9)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  iftmp.40_38 = 1;
  goto <bb 10>;

<bb 9>:
  iftmp.40_37 = 0;

<bb 10>:
  # iftmp.40_16 = PHI <iftmp.40_38(8), iftmp.40_37(9)>
  D.42602_39 = get_media_profile_name (session_22(D), iftmp.40_16);
  switch_snprintf (D.42589_27, D.42591_30, "m=audio %d %s", D.42592_32, D.42602_39);
  i_40 = 0;
  # DEBUG i => i_40
  goto <bb 28>;

<bb 11>:
  imp_43 = smh_23->codecs[i_2];
  # DEBUG imp => imp_43
  D.42603_44 = imp_43->microseconds_per_packet;
  this_ptime_45 = D.42603_44 / 1000;
  # DEBUG this_ptime => this_ptime_45
  D.42606_46 = imp_43->iananame;
  D.42607_47 = strcasecmp (D.42606_46, "ilbc");
  if (D.42607_47 == 0)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:
  D.42606_48 = imp_43->iananame;
  D.42609_49 = strcasecmp (D.42606_48, "isac");
  if (D.42609_49 == 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  this_ptime_50 = 20;
  # DEBUG this_ptime => this_ptime_50

<bb 14>:
  # this_ptime_10 = PHI <this_ptime_45(12), this_ptime_50(13)>
  # DEBUG this_ptime => this_ptime_10
  D.42610_51 = imp_43->codec_type;
  if (D.42610_51 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  // predicted unlikely by continue predictor.
  goto <bb 27>;

<bb 16>:
  if (noptime_21 == 0)
    goto <bb 17>;
  else
    goto <bb 22>;

<bb 17>:
  if (cur_ptime_52(D) == 0)
    goto <bb 18>;
  else
    goto <bb 20>;

<bb 18>:
  if (ptime_6 == 0)
    goto <bb 19>;
  else
    goto <bb 22>;

<bb 19>:
  ptime_53 = this_ptime_10;
  # DEBUG ptime => ptime_53
  goto <bb 22>;

<bb 20>:
  if (this_ptime_10 != cur_ptime_52(D))
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  // predicted unlikely by continue predictor.
  goto <bb 27>;

<bb 22>:
  # ptime_4 = PHI <ptime_6(16), ptime_53(19), ptime_6(20), ptime_6(18)>
  # DEBUG ptime => ptime_4
  D.42622_54 = smh_23->ianacodes[i_2];
  D.42623_55 = (signed char) D.42622_54;
  if (D.42623_55 >= 0)
    goto <bb 23>;
  else
    goto <bb 26>;

<bb 23>:
  D.42622_56 = smh_23->ianacodes[i_2];
  D.42626_57 = (int) D.42622_56;
  D.42627_58 = already_did[D.42626_57];
  if (D.42627_58 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  // predicted unlikely by continue predictor.
  goto <bb 27>;

<bb 25>:
  D.42622_59 = smh_23->ianacodes[i_2];
  D.42626_60 = (int) D.42622_59;
  already_did[D.42626_60] = 1;

<bb 26>:
  D.42630_61 = strlen (buf_25(D));
  D.42631_62 = buf_25(D) + D.42630_61;
  D.42632_63 = strlen (buf_25(D));
  D.42633_64 = buflen_29(D) - D.42632_63;
  D.42622_65 = smh_23->ianacodes[i_2];
  D.42626_66 = (int) D.42622_65;
  switch_snprintf (D.42631_62, D.42633_64, " %d", D.42626_66);

<bb 27>:
  # ptime_5 = PHI <ptime_6(15), ptime_6(21), ptime_4(24), ptime_4(26)>
  # DEBUG ptime => ptime_5
  i_67 = i_2 + 1;
  # DEBUG i => i_67

<bb 28>:
  # i_2 = PHI <i_40(10), i_67(27)>
  # ptime_6 = PHI <ptime_20(10), ptime_5(27)>
  # DEBUG ptime => ptime_6
  # DEBUG i => i_2
  D.42634_41 = smh_23->mparams;
  D.42635_42 = D.42634_41->num_codecs;
  if (D.42635_42 > i_2)
    goto <bb 11>;
  else
    goto <bb 29>;

<bb 29>:
  D.42634_68 = smh_23->mparams;
  D.42636_69 = D.42634_68->dtmf_type;
  if (D.42636_69 == 0)
    goto <bb 30>;
  else
    goto <bb 32>;

<bb 30>:
  D.42634_70 = smh_23->mparams;
  D.42639_71 = D.42634_70->te;
  if (D.42639_71 > 95)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  D.42642_72 = strlen (buf_25(D));
  D.42643_73 = buf_25(D) + D.42642_72;
  D.42644_74 = strlen (buf_25(D));
  D.42645_75 = buflen_29(D) - D.42644_74;
  D.42634_76 = smh_23->mparams;
  D.42639_77 = D.42634_76->te;
  D.42646_78 = (int) D.42639_77;
  switch_snprintf (D.42643_73, D.42645_75, " %d", D.42646_78);

<bb 32>:
  D.42647_79 = switch_media_handle_test_media_flag (smh_23, 9);
  if (D.42647_79 == 0)
    goto <bb 33>;
  else
    goto <bb 35>;

<bb 33>:
  D.42650_81 = cng_type_80(D) != 0;
  D.42651_83 = use_cng_82(D) != 0;
  D.42652_84 = D.42650_81 && D.42651_83;
  if (D.42652_84 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  D.42655_85 = strlen (buf_25(D));
  D.42656_86 = buf_25(D) + D.42655_85;
  D.42657_87 = strlen (buf_25(D));
  D.42658_88 = buflen_29(D) - D.42657_87;
  switch_snprintf (D.42656_86, D.42658_88, " %d", cng_type_80(D));

<bb 35>:
  D.42659_89 = strlen (buf_25(D));
  D.42660_90 = buf_25(D) + D.42659_89;
  D.42661_91 = strlen (buf_25(D));
  D.42662_92 = buflen_29(D) - D.42661_91;
  switch_snprintf (D.42660_90, D.42662_92, "\n");
  memset (&already_did, 0, 512);
  i_93 = 0;
  # DEBUG i => i_93
  goto <bb 65>;

<bb 36>:
  imp_96 = smh_23->codecs[i_3];
  # DEBUG imp => imp_96
  fmtp_97 = imp_96->fmtp;
  # DEBUG fmtp => fmtp_97
  D.42663_98 = imp_96->microseconds_per_packet;
  this_ptime_99 = D.42663_98 / 1000;
  # DEBUG this_ptime => this_ptime_99
  D.42664_100 = imp_96->codec_type;
  if (D.42664_100 != 0)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  // predicted unlikely by continue predictor.
  goto <bb 64>;

<bb 38>:
  D.42669_101 = imp_96->iananame;
  D.42670_102 = strcasecmp (D.42669_101, "ilbc");
  if (D.42670_102 == 0)
    goto <bb 40>;
  else
    goto <bb 39>;

<bb 39>:
  D.42669_103 = imp_96->iananame;
  D.42672_104 = strcasecmp (D.42669_103, "isac");
  if (D.42672_104 == 0)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:
  this_ptime_105 = 20;
  # DEBUG this_ptime => this_ptime_105

<bb 41>:
  # this_ptime_13 = PHI <this_ptime_99(39), this_ptime_105(40)>
  # DEBUG this_ptime => this_ptime_13
  if (noptime_21 == 0)
    goto <bb 42>;
  else
    goto <bb 47>;

<bb 42>:
  if (cur_ptime_52(D) == 0)
    goto <bb 43>;
  else
    goto <bb 45>;

<bb 43>:
  if (ptime_9 == 0)
    goto <bb 44>;
  else
    goto <bb 47>;

<bb 44>:
  ptime_106 = this_ptime_13;
  # DEBUG ptime => ptime_106
  goto <bb 47>;

<bb 45>:
  if (this_ptime_13 != cur_ptime_52(D))
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  // predicted unlikely by continue predictor.
  goto <bb 64>;

<bb 47>:
  # ptime_7 = PHI <ptime_9(41), ptime_106(44), ptime_9(45), ptime_9(43)>
  # DEBUG ptime => ptime_7
  D.42622_107 = smh_23->ianacodes[i_3];
  D.42623_108 = (signed char) D.42622_107;
  if (D.42623_108 >= 0)
    goto <bb 48>;
  else
    goto <bb 51>;

<bb 48>:
  D.42622_109 = smh_23->ianacodes[i_3];
  D.42626_110 = (int) D.42622_109;
  D.42627_111 = already_did[D.42626_110];
  if (D.42627_111 != 0)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  // predicted unlikely by continue predictor.
  goto <bb 64>;

<bb 50>:
  D.42622_112 = smh_23->ianacodes[i_3];
  D.42626_113 = (int) D.42622_112;
  already_did[D.42626_113] = 1;

<bb 51>:
  D.42686_114 = imp_96->samples_per_second;
  rate_115 = (int) D.42686_114;
  # DEBUG rate => rate_115
  if (map_116(D) != 0B)
    goto <bb 52>;
  else
    goto <bb 55>;

<bb 52>:
  key = "";
  check_117 = 0B;
  # DEBUG check => check_117
  D.42669_118 = imp_96->iananame;
  D.42689_119 = imp_96->bits_per_second;
  switch_snprintf (&key, 128, "%s:%u", D.42669_118, D.42689_119);
  check_120 = switch_event_get_header_idx (map_116(D), &key, -1);
  # DEBUG check => check_120
  if (check_120 != 0B)
    goto <bb 54>;
  else
    goto <bb 53>;

<bb 53>:
  D.42669_121 = imp_96->iananame;
  check_122 = switch_event_get_header_idx (map_116(D), D.42669_121, -1);
  # DEBUG check => check_122
  if (check_122 != 0B)
    goto <bb 54>;
  else
    goto <bb 55>;

<bb 54>:
  # check_14 = PHI <check_120(52), check_122(53)>
  # DEBUG check => check_14
  fmtp_123 = check_14;
  # DEBUG fmtp => fmtp_123

<bb 55>:
  # fmtp_11 = PHI <fmtp_97(51), fmtp_97(53), fmtp_123(54)>
  # DEBUG fmtp => fmtp_11
  D.42693_124 = smh_23->fmtps[i_3];
  if (D.42693_124 != 0B)
    goto <bb 56>;
  else
    goto <bb 57>;

<bb 56>:
  fmtp_125 = smh_23->fmtps[i_3];
  # DEBUG fmtp => fmtp_125

<bb 57>:
  # fmtp_12 = PHI <fmtp_11(55), fmtp_125(56)>
  # DEBUG fmtp => fmtp_12
  D.42622_126 = smh_23->ianacodes[i_3];
  if (D.42622_126 > 95)
    goto <bb 59>;
  else
    goto <bb 58>;

<bb 58>:
  D.42599_127 = session_22(D)->channel;
  D.42699_128 = switch_channel_test_flag (D.42599_127, 110);
  if (D.42699_128 != 0)
    goto <bb 59>;
  else
    goto <bb 62>;

<bb 59>:
  D.42669_129 = imp_96->iananame;
  D.42700_130 = imp_96->number_of_channels;
  D.42701_131 = (int) D.42700_130;
  channels_132 = get_channels (D.42669_129, D.42701_131);
  # DEBUG channels => channels_132
  if (channels_132 > 1)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  D.42704_133 = strlen (buf_25(D));
  D.42705_134 = buf_25(D) + D.42704_133;
  D.42706_135 = strlen (buf_25(D));
  D.42707_136 = buflen_29(D) - D.42706_135;
  D.42622_137 = smh_23->ianacodes[i_3];
  D.42626_138 = (int) D.42622_137;
  D.42669_139 = imp_96->iananame;
  switch_snprintf (D.42705_134, D.42707_136, "a=rtpmap:%d %s/%d/%d\n", D.42626_138, D.42669_139, rate_115, channels_132);
  goto <bb 62>;

<bb 61>:
  D.42709_140 = strlen (buf_25(D));
  D.42710_141 = buf_25(D) + D.42709_140;
  D.42711_142 = strlen (buf_25(D));
  D.42712_143 = buflen_29(D) - D.42711_142;
  D.42622_144 = smh_23->ianacodes[i_3];
  D.42626_145 = (int) D.42622_144;
  D.42669_146 = imp_96->iananame;
  switch_snprintf (D.42710_141, D.42712_143, "a=rtpmap:%d %s/%d\n", D.42626_145, D.42669_146, rate_115);

<bb 62>:
  if (fmtp_12 != 0B)
    goto <bb 63>;
  else
    goto <bb 64>;

<bb 63>:
  D.42715_147 = strlen (buf_25(D));
  D.42716_148 = buf_25(D) + D.42715_147;
  D.42717_149 = strlen (buf_25(D));
  D.42718_150 = buflen_29(D) - D.42717_149;
  D.42622_151 = smh_23->ianacodes[i_3];
  D.42626_152 = (int) D.42622_151;
  switch_snprintf (D.42716_148, D.42718_150, "a=fmtp:%d %s\n", D.42626_152, fmtp_12);

<bb 64>:
  # ptime_8 = PHI <ptime_9(37), ptime_9(46), ptime_7(49), ptime_7(62), ptime_7(63)>
  # DEBUG ptime => ptime_8
  i_153 = i_3 + 1;
  # DEBUG i => i_153

<bb 65>:
  # i_3 = PHI <i_93(35), i_153(64)>
  # ptime_9 = PHI <ptime_6(35), ptime_8(64)>
  # DEBUG ptime => ptime_9
  # DEBUG i => i_3
  D.42634_94 = smh_23->mparams;
  D.42635_95 = D.42634_94->num_codecs;
  if (D.42635_95 > i_3)
    goto <bb 36>;
  else
    goto <bb 66>;

<bb 66>:
  D.42634_154 = smh_23->mparams;
  D.42636_155 = D.42634_154->dtmf_type;
  if (D.42636_155 == 0)
    goto <bb 69>;
  else
    goto <bb 67>;

<bb 67>:
  D.42722_156 = switch_media_handle_test_media_flag (smh_23, 8);
  if (D.42722_156 != 0)
    goto <bb 69>;
  else
    goto <bb 68>;

<bb 68>:
  D.42599_157 = session_22(D)->channel;
  D.42724_158 = switch_channel_test_flag (D.42599_157, 93);
  if (D.42724_158 != 0)
    goto <bb 69>;
  else
    goto <bb 73>;

<bb 69>:
  D.42634_159 = smh_23->mparams;
  D.42639_160 = D.42634_159->te;
  if (D.42639_160 > 95)
    goto <bb 70>;
  else
    goto <bb 73>;

<bb 70>:
  D.42599_161 = session_22(D)->channel;
  D.42727_162 = switch_channel_test_flag (D.42599_161, 106);
  if (D.42727_162 != 0)
    goto <bb 71>;
  else
    goto <bb 72>;

<bb 71>:
  D.42730_163 = strlen (buf_25(D));
  D.42731_164 = buf_25(D) + D.42730_163;
  D.42732_165 = strlen (buf_25(D));
  D.42733_166 = buflen_29(D) - D.42732_165;
  D.42634_167 = smh_23->mparams;
  D.42639_168 = D.42634_167->te;
  D.42646_169 = (int) D.42639_168;
  switch_snprintf (D.42731_164, D.42733_166, "a=rtpmap:%d telephone-event/8000\n", D.42646_169);
  goto <bb 73>;

<bb 72>:
  D.42735_170 = strlen (buf_25(D));
  D.42736_171 = buf_25(D) + D.42735_170;
  D.42737_172 = strlen (buf_25(D));
  D.42738_173 = buflen_29(D) - D.42737_172;
  D.42634_174 = smh_23->mparams;
  D.42639_175 = D.42634_174->te;
  D.42646_176 = (int) D.42639_175;
  D.42634_177 = smh_23->mparams;
  D.42639_178 = D.42634_177->te;
  D.42646_179 = (int) D.42639_178;
  switch_snprintf (D.42736_171, D.42738_173, "a=rtpmap:%d telephone-event/8000\na=fmtp:%d 0-16\n", D.42646_179, D.42646_179);

<bb 73>:
  D.42739_180 = a_engine_24->local_dtls_fingerprint.type;
  # DEBUG s => D.42739_180
  if (D.42739_180 == 0B)
    goto <bb 76>;
  else
    goto <bb 74>;

<bb 74>:
  D.47441_455 = MEM[(const char *)D.42739_180];
  if (D.47441_455 == 0)
    goto <bb 76>;
  else
    goto <bb 75>;

<bb 75>:

<bb 76>:
  # D.47442_456 = PHI <1(73), 1(74), 0(75)>
  D.47440_469 = D.47442_456;
  D.42740_181 = D.47440_469;
  if (D.42740_181 == 0)
    goto <bb 77>;
  else
    goto <bb 79>;

<bb 77>:
  if (secure_33(D) != 0)
    goto <bb 78>;
  else
    goto <bb 79>;

<bb 78>:
  D.42745_182 = strlen (buf_25(D));
  D.42746_183 = buf_25(D) + D.42745_182;
  D.42747_184 = strlen (buf_25(D));
  D.42748_185 = buflen_29(D) - D.42747_184;
  D.42739_186 = a_engine_24->local_dtls_fingerprint.type;
  D.42749_187 = &a_engine_24->local_dtls_fingerprint.str;
  switch_snprintf (D.42746_183, D.42748_185, "a=fingerprint:%s %s\n", D.42739_186, D.42749_187);

<bb 79>:
  D.42634_188 = smh_23->mparams;
  D.42750_189 = D.42634_188->rtcp_audio_interval_msec;
  if (D.42750_189 != 0B)
    goto <bb 80>;
  else
    goto <bb 83>;

<bb 80>:
  D.42753_190 = a_engine_24->rtcp_mux;
  if (D.42753_190 > 0)
    goto <bb 81>;
  else
    goto <bb 82>;

<bb 81>:
  D.42756_191 = strlen (buf_25(D));
  D.42757_192 = buf_25(D) + D.42756_191;
  D.42758_193 = strlen (buf_25(D));
  D.42759_194 = buflen_29(D) - D.42758_193;
  switch_snprintf (D.42757_192, D.42759_194, "a=rtcp-mux\n");
  D.42760_195 = strlen (buf_25(D));
  D.42761_196 = buf_25(D) + D.42760_195;
  D.42762_197 = strlen (buf_25(D));
  D.42763_198 = buflen_29(D) - D.42762_197;
  D.42592_199 = (int) port_31(D);
  switch_snprintf (D.42761_196, D.42763_198, "a=rtcp:%d IN %s %s\n", D.42592_199, family_200(D), ip_201(D));
  goto <bb 83>;

<bb 82>:
  D.42765_202 = strlen (buf_25(D));
  D.42766_203 = buf_25(D) + D.42765_202;
  D.42767_204 = strlen (buf_25(D));
  D.42768_205 = buflen_29(D) - D.42767_204;
  D.42592_206 = (int) port_31(D);
  D.42769_207 = D.42592_206 + 1;
  switch_snprintf (D.42766_203, D.42768_205, "a=rtcp:%d IN %s %s\n", D.42769_207, family_200(D), ip_201(D));

<bb 83>:
  D.42770_208 = a_engine_24->ice_out.cands[0][0].ready;
  if (D.42770_208 != 0)
    goto <bb 84>;
  else
    goto <bb 108>;

<bb 84>:
  tmp1 = "";
  tmp2 = "";
  c1_209 = 659136;
  # DEBUG c1 => c1_209
  c2_210 = 659134;
  # DEBUG c2 => c2_210
  tmp1[10] = 0;
  tmp2[10] = 0;
  switch_stun_random_string (&tmp1, 10, "0123456789");
  switch_stun_random_string (&tmp2, 10, "0123456789");
  gen_ice (session_22(D), 0, 0B, 0);
  ice_out_211 = &a_engine_24->ice_out;
  # DEBUG ice_out => ice_out_211
  D.42773_212 = strlen (buf_25(D));
  D.42774_213 = buf_25(D) + D.42773_212;
  D.42775_214 = strlen (buf_25(D));
  D.42776_215 = buflen_29(D) - D.42775_214;
  D.42777_216 = a_engine_24->ssrc;
  D.42778_217 = smh_23->cname;
  switch_snprintf (D.42774_213, D.42776_215, "a=ssrc:%u cname:%s\n", D.42777_216, D.42778_217);
  D.42779_218 = strlen (buf_25(D));
  D.42780_219 = buf_25(D) + D.42779_218;
  D.42781_220 = strlen (buf_25(D));
  D.42782_221 = buflen_29(D) - D.42781_220;
  D.42777_222 = a_engine_24->ssrc;
  D.42783_223 = smh_23->msid;
  switch_snprintf (D.42780_219, D.42782_221, "a=ssrc:%u msid:%s a0\n", D.42777_222, D.42783_223);
  D.42784_224 = strlen (buf_25(D));
  D.42785_225 = buf_25(D) + D.42784_224;
  D.42786_226 = strlen (buf_25(D));
  D.42787_227 = buflen_29(D) - D.42786_226;
  D.42777_228 = a_engine_24->ssrc;
  D.42783_229 = smh_23->msid;
  switch_snprintf (D.42785_225, D.42787_227, "a=ssrc:%u mslabel:%s\n", D.42777_228, D.42783_229);
  D.42788_230 = strlen (buf_25(D));
  D.42789_231 = buf_25(D) + D.42788_230;
  D.42790_232 = strlen (buf_25(D));
  D.42791_233 = buflen_29(D) - D.42790_232;
  D.42777_234 = a_engine_24->ssrc;
  D.42783_235 = smh_23->msid;
  switch_snprintf (D.42789_231, D.42791_233, "a=ssrc:%u label:%sa0\n", D.42777_234, D.42783_235);
  D.42792_236 = strlen (buf_25(D));
  D.42793_237 = buf_25(D) + D.42792_236;
  D.42794_238 = strlen (buf_25(D));
  D.42795_239 = buflen_29(D) - D.42794_238;
  D.42796_240 = ice_out_211->ufrag;
  switch_snprintf (D.42793_237, D.42795_239, "a=ice-ufrag:%s\n", D.42796_240);
  D.42797_241 = strlen (buf_25(D));
  D.42798_242 = buf_25(D) + D.42797_241;
  D.42799_243 = strlen (buf_25(D));
  D.42800_244 = buflen_29(D) - D.42799_243;
  D.42801_245 = ice_out_211->pwd;
  switch_snprintf (D.42798_242, D.42800_244, "a=ice-pwd:%s\n", D.42801_245);
  D.42802_246 = strlen (buf_25(D));
  D.42803_247 = buf_25(D) + D.42802_246;
  D.42804_248 = strlen (buf_25(D));
  D.42805_249 = buflen_29(D) - D.42804_248;
  D.42806_250 = ice_out_211->cands[0][0].transport;
  D.42807_251 = ice_out_211->cands[0][0].con_addr;
  D.42808_252 = ice_out_211->cands[0][0].con_port;
  D.42809_253 = (int) D.42808_252;
  switch_snprintf (D.42803_247, D.42805_249, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.42806_250, c1_209, D.42807_251, D.42809_253);
  D.42810_254 = a_engine_24->local_sdp_ip;
  # DEBUG s => D.42810_254
  if (D.42810_254 == 0B)
    goto <bb 87>;
  else
    goto <bb 85>;

<bb 85>:
  D.47445_457 = MEM[(const char *)D.42810_254];
  if (D.47445_457 == 0)
    goto <bb 87>;
  else
    goto <bb 86>;

<bb 86>:

<bb 87>:
  # D.47446_458 = PHI <1(84), 1(85), 0(86)>
  D.47444_470 = D.47446_458;
  D.42811_255 = D.47444_470;
  if (D.42811_255 == 0)
    goto <bb 88>;
  else
    goto <bb 95>;

<bb 88>:
  D.42807_256 = ice_out_211->cands[0][0].con_addr;
  # DEBUG s => D.42807_256
  if (D.42807_256 == 0B)
    goto <bb 91>;
  else
    goto <bb 89>;

<bb 89>:
  D.47449_459 = MEM[(const char *)D.42807_256];
  if (D.47449_459 == 0)
    goto <bb 91>;
  else
    goto <bb 90>;

<bb 90>:

<bb 91>:
  # D.47450_460 = PHI <1(88), 1(89), 0(90)>
  D.47448_471 = D.47450_460;
  D.42814_257 = D.47448_471;
  if (D.42814_257 == 0)
    goto <bb 92>;
  else
    goto <bb 95>;

<bb 92>:
  D.42810_258 = a_engine_24->local_sdp_ip;
  D.42807_259 = ice_out_211->cands[0][0].con_addr;
  D.39479_260 = __builtin_strcmp (D.42810_258, D.42807_259);
  if (D.39479_260 != 0)
    goto <bb 93>;
  else
    goto <bb 95>;

<bb 93>:
  D.42819_261 = a_engine_24->local_sdp_port;
  D.42808_262 = ice_out_211->cands[0][0].con_port;
  if (D.42819_261 != D.42808_262)
    goto <bb 94>;
  else
    goto <bb 95>;

<bb 94>:
  D.42822_263 = strlen (buf_25(D));
  D.42823_264 = buf_25(D) + D.42822_263;
  D.42824_265 = strlen (buf_25(D));
  D.42825_266 = buflen_29(D) - D.42824_265;
  D.42806_267 = ice_out_211->cands[0][0].transport;
  D.42807_268 = ice_out_211->cands[0][0].con_addr;
  D.42808_269 = ice_out_211->cands[0][0].con_port;
  D.42809_270 = (int) D.42808_269;
  D.42810_271 = a_engine_24->local_sdp_ip;
  D.42819_272 = a_engine_24->local_sdp_port;
  D.42826_273 = (int) D.42819_272;
  switch_snprintf (D.42823_264, D.42825_266, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.42806_267, c2_210, D.42807_268, D.42809_270, D.42810_271, D.42826_273);

<bb 95>:
  D.42753_274 = a_engine_24->rtcp_mux;
  if (D.42753_274 <= 0)
    goto <bb 97>;
  else
    goto <bb 96>;

<bb 96>:
  D.42599_275 = session_22(D)->channel;
  D.42830_276 = switch_channel_direction (D.42599_275);
  if (D.42830_276 == 1)
    goto <bb 97>;
  else
    goto <bb 108>;

<bb 97>:
  D.42831_277 = strlen (buf_25(D));
  D.42832_278 = buf_25(D) + D.42831_277;
  D.42833_279 = strlen (buf_25(D));
  D.42834_280 = buflen_29(D) - D.42833_279;
  D.42806_281 = ice_out_211->cands[0][0].transport;
  D.42807_282 = ice_out_211->cands[0][0].con_addr;
  D.42808_283 = ice_out_211->cands[0][0].con_port;
  D.42809_284 = (int) D.42808_283;
  D.42753_285 = a_engine_24->rtcp_mux;
  D.42835_286 = D.42753_285 <= 0;
  D.42836_287 = D.42809_284 + D.42835_286;
  switch_snprintf (D.42832_278, D.42834_280, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.42806_281, c1_209, D.42807_282, D.42836_287);
  D.42810_288 = a_engine_24->local_sdp_ip;
  # DEBUG s => D.42810_288
  if (D.42810_288 == 0B)
    goto <bb 100>;
  else
    goto <bb 98>;

<bb 98>:
  D.47453_461 = MEM[(const char *)D.42810_288];
  if (D.47453_461 == 0)
    goto <bb 100>;
  else
    goto <bb 99>;

<bb 99>:

<bb 100>:
  # D.47454_462 = PHI <1(97), 1(98), 0(99)>
  D.47452_472 = D.47454_462;
  D.42837_289 = D.47452_472;
  if (D.42837_289 == 0)
    goto <bb 101>;
  else
    goto <bb 108>;

<bb 101>:
  D.42840_290 = ice_out_211->cands[0][1].con_addr;
  # DEBUG s => D.42840_290
  if (D.42840_290 == 0B)
    goto <bb 104>;
  else
    goto <bb 102>;

<bb 102>:
  D.47457_463 = MEM[(const char *)D.42840_290];
  if (D.47457_463 == 0)
    goto <bb 104>;
  else
    goto <bb 103>;

<bb 103>:

<bb 104>:
  # D.47458_464 = PHI <1(101), 1(102), 0(103)>
  D.47456_473 = D.47458_464;
  D.42841_291 = D.47456_473;
  if (D.42841_291 == 0)
    goto <bb 105>;
  else
    goto <bb 108>;

<bb 105>:
  D.42810_292 = a_engine_24->local_sdp_ip;
  D.42840_293 = ice_out_211->cands[0][1].con_addr;
  D.39488_294 = __builtin_strcmp (D.42810_292, D.42840_293);
  if (D.39488_294 != 0)
    goto <bb 106>;
  else
    goto <bb 108>;

<bb 106>:
  D.42819_295 = a_engine_24->local_sdp_port;
  D.42846_296 = ice_out_211->cands[0][1].con_port;
  if (D.42819_295 != D.42846_296)
    goto <bb 107>;
  else
    goto <bb 108>;

<bb 107>:
  D.42849_297 = strlen (buf_25(D));
  D.42850_298 = buf_25(D) + D.42849_297;
  D.42851_299 = strlen (buf_25(D));
  D.42852_300 = buflen_29(D) - D.42851_299;
  D.42806_301 = ice_out_211->cands[0][0].transport;
  D.42807_302 = ice_out_211->cands[0][0].con_addr;
  D.42808_303 = ice_out_211->cands[0][0].con_port;
  D.42809_304 = (int) D.42808_303;
  D.42753_305 = a_engine_24->rtcp_mux;
  D.42835_306 = D.42753_305 <= 0;
  D.42836_307 = D.42809_304 + D.42835_306;
  D.42810_308 = a_engine_24->local_sdp_ip;
  D.42819_309 = a_engine_24->local_sdp_port;
  D.42826_310 = (int) D.42819_309;
  D.42753_311 = a_engine_24->rtcp_mux;
  D.42835_312 = D.42753_311 <= 0;
  D.42853_313 = D.42826_310 + D.42835_312;
  switch_snprintf (D.42850_298, D.42852_300, "a=candidate:%s 2 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.42806_301, c2_210, D.42807_302, D.42836_307, D.42810_308, D.42853_313);

<bb 108>:
  if (secure_33(D) != 0)
    goto <bb 109>;
  else
    goto <bb 120>;

<bb 109>:
  D.42599_314 = session_22(D)->channel;
  D.42856_315 = switch_channel_test_flag (D.42599_314, 109);
  if (D.42856_315 == 0)
    goto <bb 110>;
  else
    goto <bb 120>;

<bb 110>:
  i_316 = 0;
  # DEBUG i => i_316
  goto <bb 119>;

<bb 111>:
  D.42859_318 = smh_23->crypto_suite_order[i_15];
  j_319 = SUITES[D.42859_318].type;
  # DEBUG j => j_319
  D.42601_320 = a_engine_24->crypto_type;
  if (D.42601_320 == j_319)
    goto <bb 113>;
  else
    goto <bb 112>;

<bb 112>:
  D.42601_321 = a_engine_24->crypto_type;
  if (D.42601_321 == 9)
    goto <bb 113>;
  else
    goto <bb 118>;

<bb 113>:
  D.42863_322 = a_engine_24->ssec[j_319].local_crypto_key;
  # DEBUG s => D.42863_322
  if (D.42863_322 == 0B)
    goto <bb 116>;
  else
    goto <bb 114>;

<bb 114>:
  D.47461_465 = MEM[(const char *)D.42863_322];
  if (D.47461_465 == 0)
    goto <bb 116>;
  else
    goto <bb 115>;

<bb 115>:

<bb 116>:
  # D.47462_466 = PHI <1(113), 1(114), 0(115)>
  D.47460_474 = D.47462_466;
  D.42864_323 = D.47460_474;
  if (D.42864_323 == 0)
    goto <bb 117>;
  else
    goto <bb 118>;

<bb 117>:
  D.42867_324 = strlen (buf_25(D));
  D.42868_325 = buf_25(D) + D.42867_324;
  D.42869_326 = strlen (buf_25(D));
  D.42870_327 = buflen_29(D) - D.42869_326;
  D.42863_328 = a_engine_24->ssec[j_319].local_crypto_key;
  switch_snprintf (D.42868_325, D.42870_327, "a=crypto:%s\n", D.42863_328);

<bb 118>:
  i_329 = i_15 + 1;
  # DEBUG i => i_329

<bb 119>:
  # i_15 = PHI <i_316(110), i_329(118)>
  # DEBUG i => i_15
  D.42859_317 = smh_23->crypto_suite_order[i_15];
  if (D.42859_317 != 9)
    goto <bb 111>;
  else
    goto <bb 120>;

<bb 120>:
  if (cng_type_80(D) == 0)
    goto <bb 121>;
  else
    goto <bb 123>;

<bb 121>:
  D.42873_330 = switch_media_handle_test_media_flag (smh_23, 9);
  if (D.42873_330 != 0)
    goto <bb 122>;
  else
    goto <bb 123>;

<bb 122>:
  D.42876_331 = strlen (buf_25(D));
  D.42877_332 = buf_25(D) + D.42876_331;
  D.42878_333 = strlen (buf_25(D));
  D.42879_334 = buflen_29(D) - D.42878_333;
  switch_snprintf (D.42877_332, D.42879_334, "a=silenceSupp:off - - - -\n");

<bb 123>:
  if (append_audio_335(D) != 0B)
    goto <bb 124>;
  else
    goto <bb 131>;

<bb 124>:
  D.42882_336 = strlen (buf_25(D));
  D.42883_337 = buf_25(D) + D.42882_336;
  D.42884_338 = strlen (buf_25(D));
  D.42885_339 = buflen_29(D) - D.42884_338;
  D.42888_340 = *append_audio_335(D);
  if (D.42888_340 != 0)
    goto <bb 125>;
  else
    goto <bb 126>;

<bb 125>:
  D.42891_341 = strlen (append_audio_335(D));
  D.42892_342 = D.42891_341 + -1;
  iftmp.42_343 = append_audio_335(D) + D.42892_342;
  goto <bb 127>;

<bb 126>:
  iftmp.42_344 = append_audio_335(D);

<bb 127>:
  # iftmp.42_18 = PHI <iftmp.42_343(125), iftmp.42_344(126)>
  D.42894_345 = *iftmp.42_18;
  if (D.42894_345 == 10)
    goto <bb 128>;
  else
    goto <bb 129>;

<bb 128>:
  iftmp.41_346 = "";
  goto <bb 130>;

<bb 129>:
  iftmp.41_347 = "\n";

<bb 130>:
  # iftmp.41_17 = PHI <iftmp.41_346(128), iftmp.41_347(129)>
  switch_snprintf (D.42883_337, D.42885_339, "%s%s", append_audio_335(D), iftmp.41_17);

<bb 131>:
  if (cur_ptime_52(D) == 0)
    goto <bb 132>;
  else
    goto <bb 133>;

<bb 132>:
  cur_ptime_348 = ptime_9;
  # DEBUG cur_ptime => cur_ptime_348

<bb 133>:
  # cur_ptime_1 = PHI <cur_ptime_52(D)(131), cur_ptime_348(132)>
  # DEBUG cur_ptime => cur_ptime_1
  D.42900_349 = noptime_21 == 0;
  D.42901_350 = cur_ptime_1 != 0;
  D.42902_351 = D.42900_349 && D.42901_350;
  if (D.42902_351 != 0)
    goto <bb 134>;
  else
    goto <bb 135>;

<bb 134>:
  D.42905_352 = strlen (buf_25(D));
  D.42906_353 = buf_25(D) + D.42905_352;
  D.42907_354 = strlen (buf_25(D));
  D.42908_355 = buflen_29(D) - D.42907_354;
  switch_snprintf (D.42906_353, D.42908_355, "a=ptime:%d\n", cur_ptime_1);

<bb 135>:
  local_sdp_audio_zrtp_hash_356 = switch_core_media_get_zrtp_hash (session_22(D), 0, 1);
  # DEBUG local_sdp_audio_zrtp_hash => local_sdp_audio_zrtp_hash_356
  if (local_sdp_audio_zrtp_hash_356 != 0B)
    goto <bb 136>;
  else
    goto <bb 137>;

<bb 136>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5882, session_22(D), 7, "Adding audio a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_356);
  D.42911_357 = strlen (buf_25(D));
  D.42912_358 = buf_25(D) + D.42911_357;
  D.42913_359 = strlen (buf_25(D));
  D.42914_360 = buflen_29(D) - D.42913_359;
  switch_snprintf (D.42912_358, D.42914_360, "a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_356);

<bb 137>:
  # DEBUG s => sr_361(D)
  if (sr_361(D) == 0B)
    goto <bb 140>;
  else
    goto <bb 138>;

<bb 138>:
  D.47465_467 = *sr_361(D);
  if (D.47465_467 == 0)
    goto <bb 140>;
  else
    goto <bb 139>;

<bb 139>:

<bb 140>:
  # D.47466_468 = PHI <1(137), 1(138), 0(139)>
  D.47464_475 = D.47466_468;
  D.42915_362 = D.47464_475;
  if (D.42915_362 == 0)
    goto <bb 141>;
  else
    goto <bb 142>;

<bb 141>:
  D.42918_363 = strlen (buf_25(D));
  D.42919_364 = buf_25(D) + D.42918_363;
  D.42920_365 = strlen (buf_25(D));
  D.42921_366 = buflen_29(D) - D.42920_365;
  switch_snprintf (D.42919_364, D.42921_366, "a=%s\n", sr_361(D));

<bb 142>:
  return;

}



;; Function switch_core_session_media_handle_ready (switch_core_session_media_handle_ready)

Iterations: 0
switch_core_session_media_handle_ready (struct switch_core_session_t * session)
{
  switch_status_t D.46443;
  _Bool D.46440;
  int D.46439;
  int D.46438;
  smh_flag_t D.46437;
  struct switch_media_handle_t * D.46434;

<bb 2>:
  D.46434_3 = session_2(D)->media_handle;
  if (D.46434_3 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 3>:
  D.46434_4 = session_2(D)->media_handle;
  D.46437_5 = D.46434_4->flags;
  D.46438_6 = (int) D.46437_5;
  D.46439_7 = D.46438_6 & 1;
  D.46440_8 = (_Bool) D.46439_7;
  if (D.46440_8 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.46443_9 = 0;
  goto <bb 6>;

<bb 5>:
  D.46443_10 = 1;

<bb 6>:
  # D.46443_1 = PHI <D.46443_9(4), D.46443_10(5)>
  return D.46443_1;

}



;; Function switch_core_session_check_outgoing_crypto (switch_core_session_check_outgoing_crypto)

Considering inline candidate switch_core_media_build_crypto.
Not inlining: code size would grow by 102.
Considering inline candidate switch_core_media_build_crypto.
Not inlining: code size would grow by 102.
Considering inline candidate switch_core_session_media_handle_ready.
Iterations: 0
switch_core_session_check_outgoing_crypto (struct switch_core_session_t * session)
{
  int i;
  struct switch_media_handle_t * smh;
  struct switch_channel_t * channel;
  switch_rtp_crypto_key_type_t D.46671;
  struct switch_media_handle_t * D.46670;
  switch_rtp_crypto_mode_t D.46667;
  switch_status_t D.46662;

<bb 2>:
  channel_3 = switch_core_session_get_channel (session_2(D));
  # DEBUG channel => channel_3
  D.46662_4 = switch_core_session_media_handle_ready (session_2(D));
  if (D.46662_4 != 0)
    goto <bb 8>;
  else
    goto <bb 3>;

<bb 3>:
  smh_5 = session_2(D)->media_handle;
  # DEBUG smh => smh_5
  if (smh_5 == 0B)
    goto <bb 8>;
  else
    goto <bb 4>;

<bb 4>:
  D.46667_6 = smh_5->crypto_mode;
  if (D.46667_6 > 1)
    goto <bb 8>;
  else
    goto <bb 5>;

<bb 5>:
  switch_channel_set_flag_value (channel_3, 92, 1);
  i_7 = 0;
  # DEBUG i => i_7
  goto <bb 7>;

<bb 6>:
  D.46670_9 = session_2(D)->media_handle;
  D.46671_10 = smh_5->crypto_suite_order[i_1];
  switch_core_media_build_crypto (D.46670_9, 0, 0, D.46671_10, 0, 0);
  D.46670_11 = session_2(D)->media_handle;
  D.46671_12 = smh_5->crypto_suite_order[i_1];
  switch_core_media_build_crypto (D.46670_11, 1, 0, D.46671_12, 0, 0);
  i_13 = i_1 + 1;
  # DEBUG i => i_13

<bb 7>:
  # i_1 = PHI <i_7(5), i_13(6)>
  # DEBUG i => i_1
  D.46671_8 = smh_5->crypto_suite_order[i_1];
  if (D.46671_8 != 9)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 8>:
  return;

}



;; Function switch_core_session_get_media_handle (switch_core_session_get_media_handle)

Considering inline candidate switch_core_session_media_handle_ready.
Iterations: 0
switch_core_session_get_media_handle (struct switch_core_session_t * session)
{
  struct switch_media_handle_t * D.46432;
  switch_status_t D.46429;

<bb 2>:
  D.46429_3 = switch_core_session_media_handle_ready (session_2(D));
  if (D.46429_3 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.46432_4 = session_2(D)->media_handle;
  goto <bb 5>;

<bb 4>:
  D.46432_5 = 0B;

<bb 5>:
  # D.46432_1 = PHI <D.46432_4(3), D.46432_5(4)>
  return D.46432_1;

}



;; Function switch_core_session_clear_media_handle (switch_core_session_clear_media_handle)

Iterations: 0
switch_core_session_clear_media_handle (struct switch_core_session_t * session)
{
  switch_status_t D.46427;
  struct switch_media_handle_t * D.46424;

<bb 2>:
  D.46424_3 = session_2(D)->media_handle;
  if (D.46424_3 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.46427_4 = 1;
  goto <bb 5>;

<bb 4>:
  D.46427_5 = 0;

<bb 5>:
  # D.46427_1 = PHI <D.46427_4(3), D.46427_5(4)>
  return D.46427_1;

}



;; Function switch_core_media_get_mparams (switch_core_media_get_mparams)

Iterations: 0
switch_core_media_get_mparams (struct switch_media_handle_t * smh)
{
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_get_mparams";
  struct switch_core_media_params_t * D.46422;

<bb 2>:
  if (smh_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("smh", "src/switch_core_media.c", 1545, &__PRETTY_FUNCTION__);

<bb 4>:
  D.46422_2 = smh_1(D)->mparams;
  return D.46422_2;

}



;; Function switch_core_media_prepare_codecs (switch_core_media_prepare_codecs)

Considering inline candidate switch_core_media_get_codec_string.
Not inlining: code size would grow by 44.
Iterations: 0
switch_core_media_prepare_codecs (struct switch_core_session_t * session, switch_bool_t force)
{
  char * tmp_codec_string;
  static const char __func__[33] = "switch_core_media_prepare_codecs";
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_prepare_codecs";
  struct switch_media_handle_t * smh;
  const char * ocodec;
  const char * codec_string;
  const char * abs;
  int D.46418;
  int D.46416;
  int D.46415;
  const struct switch_codec_implementation_t *[50] * D.46414;
  int D.46413;
  unsigned int D.46412;
  char *[50] * D.46411;
  switch_core_media_flag_t D.46406;
  const char D.46397;
  struct switch_core_session_t * D.46388;
  int D.46385;
  struct switch_core_media_params_t * D.46384;
  uint32_t D.46381;
  uint32_t D.46379;
  struct switch_channel_t * D.46378;

<bb 2>:
  codec_string_3 = 0B;
  # DEBUG codec_string => codec_string_3
  ocodec_4 = 0B;
  # DEBUG ocodec => ocodec_4
  if (session_5(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 1555, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_6 = session_5(D)->media_handle;
  # DEBUG smh => smh_6
  if (smh_6 == 0B)
    goto <bb 29>;
  else
    goto <bb 5>;

<bb 5>:
  if (force_7(D) == 0)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  D.46378_8 = session_5(D)->channel;
  D.46379_9 = switch_channel_test_flag (D.46378_8, 15);
  if (D.46379_9 != 0)
    goto <bb 29>;
  else
    goto <bb 7>;

<bb 7>:
  D.46378_10 = session_5(D)->channel;
  D.46381_11 = switch_channel_test_flag (D.46378_10, 29);
  if (D.46381_11 != 0)
    goto <bb 29>;
  else
    goto <bb 8>;

<bb 8>:
  if (force_7(D) != 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.46384_12 = smh_6->mparams;
  D.46384_12->num_codecs = 0;

<bb 10>:
  D.46384_13 = smh_6->mparams;
  D.46385_14 = D.46384_13->num_codecs;
  if (D.46385_14 != 0)
    goto <bb 29>;
  else
    goto <bb 11>;

<bb 11>:
  smh_6->payload_space = 0;
  D.46388_15 = smh_6->session;
  if (D.46388_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  __assert_fail ("smh->session != ((void *)0)", "src/switch_core_media.c", 1575, &__PRETTY_FUNCTION__);

<bb 13>:
  D.46378_16 = session_5(D)->channel;
  abs_17 = switch_channel_get_variable_dup (D.46378_16, "absolute_codec_string", 1, -1);
  # DEBUG abs => abs_17
  if (abs_17 != 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  codec_string_18 = abs_17;
  # DEBUG codec_string => codec_string_18
  goto <bb 26> (ready);

<bb 15>:
  D.46378_19 = session_5(D)->channel;
  codec_string_20 = switch_channel_get_variable_dup (D.46378_19, "codec_string", 1, -1);
  # DEBUG codec_string => codec_string_20
  if (codec_string_20 == 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.46388_21 = smh_6->session;
  codec_string_22 = switch_core_media_get_codec_string (D.46388_21);
  # DEBUG codec_string => codec_string_22

<bb 17>:
  # codec_string_1 = PHI <codec_string_20(15), codec_string_22(16)>
  # DEBUG codec_string => codec_string_1
  if (codec_string_1 != 0B)
    goto <bb 18>;
  else
    goto <bb 20>;

<bb 18>:
  D.46397_23 = *codec_string_1;
  if (D.46397_23 == 61)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  codec_string_24 = codec_string_1 + 1;
  # DEBUG codec_string => codec_string_24
  goto <bb 26> (ready);

<bb 20>:
  D.46378_25 = session_5(D)->channel;
  ocodec_26 = switch_channel_get_variable_dup (D.46378_25, "originator_codec", 1, -1);
  # DEBUG ocodec => ocodec_26
  if (ocodec_26 != 0B)
    goto <bb 21>;
  else
    goto <bb 26> (ready);

<bb 21>:
  if (codec_string_1 == 0B)
    goto <bb 23>;
  else
    goto <bb 22>;

<bb 22>:
  D.46406_27 = smh_6->media_flags[1];
  if (D.46406_27 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  codec_string_31 = ocodec_26;
  # DEBUG codec_string => codec_string_31
  goto <bb 26> (ready);

<bb 24>:
  D.46388_28 = smh_6->session;
  codec_string_29 = switch_core_session_sprintf (D.46388_28, "%s,%s", ocodec_26, codec_string_1);
  # DEBUG codec_string => codec_string_29
  if (codec_string_29 == 0B)
    goto <bb 25>;
  else
    goto <bb 26> (ready);

<bb 25>:
  codec_string_30 = ocodec_26;
  # DEBUG codec_string => codec_string_30

  # codec_string_2 = PHI <codec_string_18(14), codec_string_24(19), codec_string_1(20), codec_string_31(23), codec_string_29(24), codec_string_30(25)>
ready:
  # DEBUG codec_string => codec_string_2
  if (codec_string_2 != 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.46388_32 = smh_6->session;
  tmp_codec_string_33 = switch_core_perform_session_strdup (D.46388_32, codec_string_2, "src/switch_core_media.c", &__func__, 1603);
  # DEBUG tmp_codec_string => tmp_codec_string_33
  D.46378_34 = session_5(D)->channel;
  switch_channel_set_variable_var_check (D.46378_34, "rtp_use_codec_string", codec_string_2, 1);
  D.46411_35 = &smh_6->codec_order;
  D.46412_36 = switch_separate_string (tmp_codec_string_33, 44, D.46411_35, 50);
  D.46413_37 = (int) D.46412_36;
  smh_6->codec_order_last = D.46413_37;
  D.46384_38 = smh_6->mparams;
  D.46414_39 = &smh_6->codecs;
  D.46411_40 = &smh_6->codec_order;
  D.46415_41 = smh_6->codec_order_last;
  D.46416_42 = switch_loadable_module_get_codecs_sorted (D.46414_39, 50, D.46411_40, D.46415_41);
  D.46384_38->num_codecs = D.46416_42;
  goto <bb 29>;

<bb 28>:
  D.46384_43 = smh_6->mparams;
  D.46414_44 = &smh_6->codecs;
  D.46418_45 = switch_loadable_module_get_codecs (D.46414_44, 50);
  D.46384_43->num_codecs = D.46418_45;

<bb 29>:
  return;

}



;; Function switch_core_media_write_frame (switch_core_media_write_frame)

Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_core_media_write_frame.
Processing frequency switch_core_codec_ready
  Called by switch_core_media_write_frame that is normal or hot
Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_core_media_write_frame.
Processing frequency switch_core_codec_ready
  Called by switch_core_media_write_frame that is normal or hot
Inlining switch_core_codec_ready to switch_core_media_write_frame with frequency 1000
Inlining switch_core_codec_ready to switch_core_media_write_frame with frequency 1000
Iterations: 1
Merging blocks 15 and 30
Merging blocks 18 and 38
Merging blocks 36 and 29
Merging blocks 44 and 37


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 1996, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_10 = session_9(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.46080_12 = smh_10->media_flags[0];



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8



Registering new PHI nodes in block #12

Updating SSA information for statement D.46090_18 = engine_17->read_codec.implementation;



Registering new PHI nodes in block #13

Updating SSA information for statement D.46092_19 = engine_17->rtp_session;

Updating SSA information for statement D.46093_20 = switch_rtp_ready (D.46092_19);



Registering new PHI nodes in block #14

Updating SSA information for statement D.46090_21 = engine_17->read_codec.implementation;



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16

Updating SSA information for statement D.47725_61 = D.46097_22->flags;



Registering new PHI nodes in block #17

Updating SSA information for statement D.47723_63 = D.46097_22->mutex;



Registering new PHI nodes in block #18

Updating SSA information for statement D.47722_64 = D.46097_22->codec_interface;



Registering new PHI nodes in block #19

Updating SSA information for statement D.47721_65 = D.46097_22->implementation;



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement D.47720 = D.47727_67;

Updating SSA information for statement D.46098_23 = D.47720;



Registering new PHI nodes in block #23

Updating SSA information for statement D.46090_24 = engine_17->read_codec.implementation;



Registering new PHI nodes in block #24



Registering new PHI nodes in block #25

Updating SSA information for statement D.47734_68 = D.46097_25->flags;



Registering new PHI nodes in block #26

Updating SSA information for statement D.47732_70 = D.46097_25->mutex;



Registering new PHI nodes in block #27

Updating SSA information for statement D.47731_71 = D.46097_25->codec_interface;



Registering new PHI nodes in block #28

Updating SSA information for statement D.47730_72 = D.46097_25->implementation;



Registering new PHI nodes in block #29



Registering new PHI nodes in block #30

Updating SSA information for statement D.47729 = D.47736_74;

Updating SSA information for statement D.46102_26 = D.47729;



Registering new PHI nodes in block #32

Updating SSA information for statement D.46103_28 = BIT_FIELD_REF <*frame_27(D), 32, 480>;



Registering new PHI nodes in block #33

Updating SSA information for statement D.46107_30 = engine_17->read_impl.encoded_bytes_per_packet;



Registering new PHI nodes in block #34

Updating SSA information for statement D.46107_31 = engine_17->read_impl.encoded_bytes_per_packet;

Updating SSA information for statement D.46110_33 = frame_27(D)->datalen;



Registering new PHI nodes in block #35



Registering new PHI nodes in block #36

Updating SSA information for statement D.46113_37 = engine_17->read_impl.samples_per_packet;



Registering new PHI nodes in block #37

Updating SSA information for statement D.46116_41 = engine_17->timestamp_send;

Updating SSA information for statement engine_17->timestamp_send = D.46118_43;

Updating SSA information for statement D.46092_44 = engine_17->rtp_session;

Updating SSA information for statement D.46119_45 = switch_rtp_write_frame (D.46092_44, frame_27(D));



Registering new PHI nodes in block #38



Registering new PHI nodes in block #39



Registering new PHI nodes in block #31



Registering new PHI nodes in block #22



Registering new PHI nodes in block #9

Updating SSA information for statement D.46085_50 = session_9(D)->channel;

Updating SSA information for statement D.46086_51 = switch_channel_test_ready (D.46085_50, 1, 0);



Registering new PHI nodes in block #10

Updating SSA information for statement switch_sleep (10000);



Registering new PHI nodes in block #11



Registering new PHI nodes in block #40



Symbols to be put in SSA form

{ .MEM D.47720 D.47729 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 41
Number of blocks to update: 40 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 


Scope blocks after cleanups:

{ Scope block #0 
  switch_status_t status;
  int bytes;
  int samples;
  int frames;
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_write_frame";

  { Scope block #142 src/switch_core_media.c:2021 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
    struct switch_codec_t * codec; (unused)

    { Scope block #143 Originating from :#0 

    }

  }

  { Scope block #144 src/switch_core_media.c:2016 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
    struct switch_codec_t * codec; (unused)

    { Scope block #145 Originating from :#0 

    }

  }

}
switch_core_media_write_frame (struct switch_core_session_t * session, struct switch_frame_t * frame, switch_io_flag_t flags, int stream_id, switch_media_type_t type)
{
  switch_bool_t D.47736;
  int iftmp.104;
  uint32_t D.47734;
  uint32_t D.47733;
  struct switch_mutex_t * D.47732;
  struct switch_codec_interface_t * D.47731;
  const struct switch_codec_implementation_t * D.47730;
  switch_bool_t D.47729;
  switch_bool_t D.47727;
  int iftmp.104;
  uint32_t D.47725;
  uint32_t D.47724;
  struct switch_mutex_t * D.47723;
  struct switch_codec_interface_t * D.47722;
  const struct switch_codec_implementation_t * D.47721;
  switch_bool_t D.47720;
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_write_frame";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  int frames;
  int samples;
  int bytes;
  switch_status_t status;
  int D.46119;
  uint32_t D.46118;
  uint32_t samples.128;
  uint32_t D.46116;
  uint32_t D.46115;
  uint32_t frames.127;
  uint32_t D.46113;
  int D.46111;
  uint32_t D.46110;
  uint32_t D.46107;
  unsigned int D.46104;
  unsigned int D.46103;
  switch_bool_t D.46102;
  switch_bool_t D.46098;
  struct switch_codec_t * D.46097;
  uint8_t D.46093;
  struct switch_rtp_t * D.46092;
  const struct switch_codec_implementation_t * D.46090;
  int D.46086;
  struct switch_channel_t * D.46085;
  unsigned int D.46084;
  struct switch_rtp_engine_t[2] * D.46083;
  switch_core_media_flag_t D.46080;
  switch_status_t D.46079;

<bb 2>:
  status_5 = 0;
  # DEBUG status => status_5
  bytes_6 = 0;
  # DEBUG bytes => bytes_6
  samples_7 = 0;
  # DEBUG samples => samples_7
  frames_8 = 0;
  # DEBUG frames => frames_8
  if (session_9(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 1996, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_10 = session_9(D)->media_handle;
  # DEBUG smh => smh_10
  if (smh_10 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.46079_11 = 1;
  goto <bb 40>;

<bb 6>:
  D.46080_12 = smh_10->media_flags[0];
  if (D.46080_12 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.46079_13 = 1;
  goto <bb 40>;

<bb 8>:
  D.46083_14 = &smh_10->engines;
  D.46084_16 = type_15(D) * 11416;
  engine_17 = D.46083_14 + D.46084_16;
  # DEBUG engine => engine_17
  goto <bb 12>;

<bb 9>:
  D.46085_50 = session_9(D)->channel;
  D.46086_51 = switch_channel_test_ready (D.46085_50, 1, 0);
  if (D.46086_51 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  switch_sleep (10000);
  goto <bb 12>;

<bb 11>:
  D.46079_52 = 9;
  goto <bb 40>;

<bb 12>:
  D.46090_18 = engine_17->read_codec.implementation;
  if (D.46090_18 == 0B)
    goto <bb 9>;
  else
    goto <bb 13>;

<bb 13>:
  D.46092_19 = engine_17->rtp_session;
  D.46093_20 = switch_rtp_ready (D.46092_19);
  if (D.46093_20 == 0)
    goto <bb 9>;
  else
    goto <bb 14>;

<bb 14>:
  D.46090_21 = engine_17->read_codec.implementation;
  if (D.46090_21 == 0B)
    goto <bb 22>;
  else
    goto <bb 15>;

<bb 15>:
  D.46097_22 = &engine_17->read_codec;
  # DEBUG codec => D.46097_22
  if (D.46097_22 != 0B)
    goto <bb 16>;
  else
    goto <bb 20>;

<bb 16>:
  D.47725_61 = D.46097_22->flags;
  D.47724_62 = D.47725_61 & 256;
  if (D.47724_62 != 0)
    goto <bb 17>;
  else
    goto <bb 20>;

<bb 17>:
  D.47723_63 = D.46097_22->mutex;
  if (D.47723_63 != 0B)
    goto <bb 18>;
  else
    goto <bb 20>;

<bb 18>:
  D.47722_64 = D.46097_22->codec_interface;
  if (D.47722_64 != 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.47721_65 = D.46097_22->implementation;
  if (D.47721_65 != 0B)
    goto <bb 21>;
  else
    goto <bb 20>;

<bb 20>:

<bb 21>:
  # iftmp.104_66 = PHI <1(19), 0(20)>
  D.47727_67 = (switch_bool_t) iftmp.104_66;
  D.47720_75 = D.47727_67;
  D.46098_23 = D.47720_75;
  if (D.46098_23 == 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.46079_49 = 9;
  goto <bb 40>;

<bb 23>:
  D.46090_24 = engine_17->read_codec.implementation;
  if (D.46090_24 == 0B)
    goto <bb 31>;
  else
    goto <bb 24>;

<bb 24>:
  D.46097_25 = &engine_17->read_codec;
  # DEBUG codec => D.46097_25
  if (D.46097_25 != 0B)
    goto <bb 25>;
  else
    goto <bb 29>;

<bb 25>:
  D.47734_68 = D.46097_25->flags;
  D.47733_69 = D.47734_68 & 256;
  if (D.47733_69 != 0)
    goto <bb 26>;
  else
    goto <bb 29>;

<bb 26>:
  D.47732_70 = D.46097_25->mutex;
  if (D.47732_70 != 0B)
    goto <bb 27>;
  else
    goto <bb 29>;

<bb 27>:
  D.47731_71 = D.46097_25->codec_interface;
  if (D.47731_71 != 0B)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  D.47730_72 = D.46097_25->implementation;
  if (D.47730_72 != 0B)
    goto <bb 30>;
  else
    goto <bb 29>;

<bb 29>:

<bb 30>:
  # iftmp.104_73 = PHI <1(28), 0(29)>
  D.47736_74 = (switch_bool_t) iftmp.104_73;
  D.47729_76 = D.47736_74;
  D.46102_26 = D.47729_76;
  if (D.46102_26 == 0)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  D.46079_48 = 1;
  goto <bb 40>;

<bb 32>:
  D.46103_28 = BIT_FIELD_REF <*frame_27(D), 32, 480>;
  D.46104_29 = D.46103_28 & 33;
  if (D.46104_29 == 0)
    goto <bb 33>;
  else
    goto <bb 37>;

<bb 33>:
  D.46107_30 = engine_17->read_impl.encoded_bytes_per_packet;
  if (D.46107_30 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  D.46107_31 = engine_17->read_impl.encoded_bytes_per_packet;
  bytes_32 = (int) D.46107_31;
  # DEBUG bytes => bytes_32
  D.46110_33 = frame_27(D)->datalen;
  D.46111_34 = (int) D.46110_33;
  frames_35 = D.46111_34 / bytes_32;
  # DEBUG frames => frames_35
  goto <bb 36>;

<bb 35>:
  frames_36 = 1;
  # DEBUG frames => frames_36

<bb 36>:
  # frames_3 = PHI <frames_35(34), frames_36(35)>
  # DEBUG frames => frames_3
  D.46113_37 = engine_17->read_impl.samples_per_packet;
  frames.127_38 = (uint32_t) frames_3;
  D.46115_39 = D.46113_37 * frames.127_38;
  samples_40 = (int) D.46115_39;
  # DEBUG samples => samples_40

<bb 37>:
  # samples_2 = PHI <samples_7(32), samples_40(36)>
  # DEBUG samples => samples_2
  D.46116_41 = engine_17->timestamp_send;
  samples.128_42 = (uint32_t) samples_2;
  D.46118_43 = D.46116_41 + samples.128_42;
  engine_17->timestamp_send = D.46118_43;
  D.46092_44 = engine_17->rtp_session;
  D.46119_45 = switch_rtp_write_frame (D.46092_44, frame_27(D));
  if (D.46119_45 < 0)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  status_46 = 1;
  # DEBUG status => status_46

<bb 39>:
  # status_1 = PHI <status_5(37), status_46(38)>
  # DEBUG status => status_1
  D.46079_47 = status_1;

<bb 40>:
  # D.46079_4 = PHI <D.46079_11(5), D.46079_13(7), D.46079_52(11), D.46079_49(22), D.46079_48(31), D.46079_47(39)>
  return D.46079_4;

}



;; Function switch_core_media_copy_t38_options (switch_core_media_copy_t38_options)

Iterations: 0
switch_core_media_copy_t38_options (struct switch_t38_options_t * t38_options, struct switch_core_session_t * session)
{
  static const char __func__[35] = "switch_core_media_copy_t38_options";
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_copy_t38_options";
  struct switch_t38_options_t * local_t38_options;
  struct switch_channel_t * channel;
  uint16_t D.46074;
  char * D.46073;
  const char * D.46072;
  char * D.46071;
  const char * D.46070;
  char * D.46069;
  const char * D.46068;
  uint32_t D.46067;
  uint32_t D.46066;
  char * D.46065;
  const char * D.46064;
  switch_bool_t D.46063;
  switch_bool_t D.46062;
  switch_bool_t D.46061;
  uint32_t D.46060;

<bb 2>:
  channel_3 = switch_core_session_get_channel (session_2(D));
  # DEBUG channel => channel_3
  local_t38_options_4 = switch_channel_get_private (channel_3, "t38_options");
  # DEBUG local_t38_options => local_t38_options_4
  if (t38_options_5(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("t38_options", "src/switch_core_media.c", 2052, &__PRETTY_FUNCTION__);

<bb 4>:
  if (local_t38_options_4 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  local_t38_options_6 = switch_core_perform_session_alloc (session_2(D), 60, "src/switch_core_media.c", &__func__, 2055);
  # DEBUG local_t38_options => local_t38_options_6

<bb 6>:
  # local_t38_options_1 = PHI <local_t38_options_4(4), local_t38_options_6(5)>
  # DEBUG local_t38_options => local_t38_options_1
  D.46060_7 = t38_options_5(D)->T38MaxBitRate;
  local_t38_options_1->T38MaxBitRate = D.46060_7;
  D.46061_8 = t38_options_5(D)->T38FaxFillBitRemoval;
  local_t38_options_1->T38FaxFillBitRemoval = D.46061_8;
  D.46062_9 = t38_options_5(D)->T38FaxTranscodingMMR;
  local_t38_options_1->T38FaxTranscodingMMR = D.46062_9;
  D.46063_10 = t38_options_5(D)->T38FaxTranscodingJBIG;
  local_t38_options_1->T38FaxTranscodingJBIG = D.46063_10;
  D.46064_11 = t38_options_5(D)->T38FaxRateManagement;
  D.46065_12 = switch_core_perform_session_strdup (session_2(D), D.46064_11, "src/switch_core_media.c", &__func__, 2062);
  local_t38_options_1->T38FaxRateManagement = D.46065_12;
  D.46066_13 = t38_options_5(D)->T38FaxMaxBuffer;
  local_t38_options_1->T38FaxMaxBuffer = D.46066_13;
  D.46067_14 = t38_options_5(D)->T38FaxMaxDatagram;
  local_t38_options_1->T38FaxMaxDatagram = D.46067_14;
  D.46068_15 = t38_options_5(D)->T38FaxUdpEC;
  D.46069_16 = switch_core_perform_session_strdup (session_2(D), D.46068_15, "src/switch_core_media.c", &__func__, 2065);
  local_t38_options_1->T38FaxUdpEC = D.46069_16;
  D.46070_17 = t38_options_5(D)->T38VendorInfo;
  D.46071_18 = switch_core_perform_session_strdup (session_2(D), D.46070_17, "src/switch_core_media.c", &__func__, 2066);
  local_t38_options_1->T38VendorInfo = D.46071_18;
  D.46072_19 = t38_options_5(D)->remote_ip;
  D.46073_20 = switch_core_perform_session_strdup (session_2(D), D.46072_19, "src/switch_core_media.c", &__func__, 2067);
  local_t38_options_1->remote_ip = D.46073_20;
  D.46074_21 = t38_options_5(D)->remote_port;
  local_t38_options_1->remote_port = D.46074_21;
  switch_channel_set_private (channel_3, "t38_options", local_t38_options_1);
  return;

}



;; Function switch_core_media_process_t38_passthru (switch_core_media_process_t38_passthru)

Considering inline candidate switch_core_media_copy_t38_options.
Not inlining: code size would grow by 69.
Iterations: 0
switch_core_media_process_t38_passthru (struct switch_core_session_t * session, struct switch_core_session_t * other_session, struct switch_t38_options_t * t38_options)
{
  const char * err;
  static const char __func__[39] = "switch_core_media_process_t38_passthru";
  static const char __PRETTY_FUNCTION__[39] = "switch_core_media_process_t38_passthru";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  char tmp[32];
  switch_port_t remote_port;
  char * remote_host;
  const char * err.171;
  switch_status_t D.47129;
  int D.47128;
  int D.47127;
  char * D.47126;
  char * D.47125;
  struct switch_channel_t * D.47124;
  switch_port_t D.47122;
  char * D.47120;
  int D.38429;
  _Bool D.47118;
  _Bool D.47117;
  _Bool D.47116;
  uint16_t D.47113;
  char * D.47112;
  const char * D.47111;
  struct payload_map_t * D.47110;
  struct switch_rtp_t * D.47109;
  switch_status_t D.47108;

<bb 2>:
  tmp = "";
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 473, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.47108_4 = 1;
  goto <bb 13>;

<bb 6>:
  a_engine_5 = &smh_3->engines;
  # DEBUG a_engine => a_engine_5
  D.47109_6 = a_engine_5->rtp_session;
  remote_host_7 = switch_rtp_get_remote_host (D.47109_6);
  # DEBUG remote_host => remote_host_7
  D.47109_8 = a_engine_5->rtp_session;
  remote_port_9 = switch_rtp_get_remote_port (D.47109_8);
  # DEBUG remote_port => remote_port_9
  D.47110_10 = a_engine_5->cur_payload_map;
  D.47111_12 = t38_options_11(D)->remote_ip;
  D.47112_13 = switch_core_perform_session_strdup (session_2(D), D.47111_12, "src/switch_core_media.c", &__func__, 484);
  D.47110_10->remote_sdp_ip = D.47112_13;
  D.47110_14 = a_engine_5->cur_payload_map;
  D.47113_15 = t38_options_11(D)->remote_port;
  D.47110_14->remote_sdp_port = D.47113_15;
  D.47116_16 = remote_host_7 != 0B;
  D.47117_17 = remote_port_9 != 0;
  D.47118_18 = D.47116_16 && D.47117_17;
  if (D.47118_18 != 0)
    goto <bb 7>;
  else
    goto <bb 10>;

<bb 7>:
  D.47110_19 = a_engine_5->cur_payload_map;
  D.47120_20 = D.47110_19->remote_sdp_ip;
  D.38429_21 = __builtin_strcmp (remote_host_7, D.47120_20);
  if (D.38429_21 == 0)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  D.47110_22 = a_engine_5->cur_payload_map;
  D.47122_23 = D.47110_22->remote_sdp_port;
  if (D.47122_23 == remote_port_9)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.47124_24 = session_2(D)->channel;
  D.47125_25 = switch_channel_get_name (D.47124_24);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 489, session_2(D), 7, "Audio params are unchanged for %s.\n", D.47125_25);
  goto <bb 12>;

<bb 10>:
  err = 0B;
  D.47124_26 = session_2(D)->channel;
  D.47126_27 = switch_channel_get_name (D.47124_26);
  D.47127_28 = (int) remote_port_9;
  D.47110_29 = a_engine_5->cur_payload_map;
  D.47120_30 = D.47110_29->remote_sdp_ip;
  D.47110_31 = a_engine_5->cur_payload_map;
  D.47122_32 = D.47110_31->remote_sdp_port;
  D.47128_33 = (int) D.47122_32;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 495, session_2(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.47126_27, remote_host_7, D.47127_28, D.47120_30, D.47128_33);
  D.47110_34 = a_engine_5->cur_payload_map;
  D.47122_35 = D.47110_34->remote_sdp_port;
  D.47128_36 = (int) D.47122_35;
  switch_snprintf (&tmp, 32, "%d", D.47128_36);
  D.47124_37 = session_2(D)->channel;
  D.47110_38 = a_engine_5->cur_payload_map;
  D.47120_39 = D.47110_38->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.47124_37, "remote_media_ip", D.47120_39, 1);
  D.47124_40 = session_2(D)->channel;
  switch_channel_set_variable_var_check (D.47124_40, "remote_media_port", &tmp, 1);
  D.47109_41 = a_engine_5->rtp_session;
  D.47110_42 = a_engine_5->cur_payload_map;
  D.47120_43 = D.47110_42->remote_sdp_ip;
  D.47110_44 = a_engine_5->cur_payload_map;
  D.47122_45 = D.47110_44->remote_sdp_port;
  D.47129_46 = switch_rtp_set_remote_address (D.47109_41, D.47120_43, D.47122_45, 0, 1, &err);
  if (D.47129_46 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  err.171_47 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 505, session_2(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.171_47);
  D.47124_48 = session_2(D)->channel;
  switch_channel_perform_hangup (D.47124_48, "src/switch_core_media.c", &__func__, 506, 88);

<bb 12>:
  switch_core_media_copy_t38_options (t38_options_11(D), other_session_49(D));
  D.47108_50 = 0;

<bb 13>:
  # D.47108_1 = PHI <D.47108_4(5), D.47108_50(12)>
  return D.47108_1;

}



;; Function switch_core_media_get_offered_pt (switch_core_media_get_offered_pt)

Iterations: 0
switch_core_media_get_offered_pt (struct switch_core_session_t * session, const struct switch_codec_implementation_t * mimp, switch_payload_t * pt)
{
  const struct switch_codec_implementation_t * imp;
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_get_offered_pt";
  struct switch_media_handle_t * smh;
  int i;
  int D.46054;
  struct switch_core_media_params_t * D.46053;
  switch_payload_t D.46052;
  const uint32_t D.46049;
  const uint32_t D.46048;
  int D.46045;
  char * const D.46044;
  char * const D.46043;
  switch_status_t D.46042;

<bb 2>:
  i_3 = 0;
  # DEBUG i => i_3
  if (session_4(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2081, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_5 = session_4(D)->media_handle;
  # DEBUG smh => smh_5
  if (smh_5 == 0B)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  if (mimp_6(D) == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.46042_21 = 1;
  goto <bb 14>;

<bb 7>:
  i_7 = 0;
  # DEBUG i => i_7
  goto <bb 12>;

<bb 8>:
  imp_10 = smh_5->codecs[i_1];
  # DEBUG imp => imp_10
  D.46043_11 = imp_10->iananame;
  D.46044_12 = mimp_6(D)->iananame;
  D.46045_13 = strcasecmp (D.46043_11, D.46044_12);
  if (D.46045_13 == 0)
    goto <bb 9>;
  else
    goto <bb 11>;

<bb 9>:
  D.46048_14 = imp_10->actual_samples_per_second;
  D.46049_15 = mimp_6(D)->actual_samples_per_second;
  if (D.46048_14 == D.46049_15)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.46052_16 = smh_5->ianacodes[i_1];
  *pt_17(D) = D.46052_16;
  D.46042_18 = 0;
  goto <bb 14>;

<bb 11>:
  i_19 = i_1 + 1;
  # DEBUG i => i_19

<bb 12>:
  # i_1 = PHI <i_7(7), i_19(11)>
  # DEBUG i => i_1
  D.46053_8 = smh_5->mparams;
  D.46054_9 = D.46053_8->num_codecs;
  if (D.46054_9 > i_1)
    goto <bb 8>;
  else
    goto <bb 13>;

<bb 13>:
  D.46042_20 = 1;

<bb 14>:
  # D.46042_2 = PHI <D.46042_21(6), D.46042_18(10), D.46042_20(13)>
  return D.46042_2;

}



;; Function switch_core_media_set_video_codec (switch_core_media_set_video_codec)

Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_core_media_set_video_codec.
Processing frequency switch_core_codec_ready
  Called by switch_core_media_set_video_codec that is normal or hot
Inlining switch_core_codec_ready to switch_core_media_set_video_codec with frequency 1000
Iterations: 1
Merging blocks 9 and 25
Merging blocks 31 and 24


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 2109, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_3 = session_2(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.45994_6 = v_engine_5->codec_negotiated;



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8

Updating SSA information for statement D.45997_8 = v_engine_5->read_codec.implementation;



Registering new PHI nodes in block #9



Registering new PHI nodes in block #10

Updating SSA information for statement D.47747_125 = D.46000_9->flags;



Registering new PHI nodes in block #11

Updating SSA information for statement D.47745_127 = D.46000_9->mutex;



Registering new PHI nodes in block #12

Updating SSA information for statement D.47744_128 = D.46000_9->codec_interface;



Registering new PHI nodes in block #13

Updating SSA information for statement D.47743_129 = D.46000_9->implementation;



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement D.47742 = D.47749_131;

Updating SSA information for statement D.46001_10 = D.47742;



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17



Registering new PHI nodes in block #18

Updating SSA information for statement D.45997_13 = v_engine_5->read_codec.implementation;

Updating SSA information for statement D.46009_14 = D.45997_13->iananame;

Updating SSA information for statement D.46010_15 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46011_16 = D.46010_15->rm_encoding;

Updating SSA information for statement D.46012_17 = strcasecmp (D.46009_14, D.46011_16);



Registering new PHI nodes in block #19

Updating SSA information for statement D.45997_18 = v_engine_5->read_codec.implementation;

Updating SSA information for statement D.46014_19 = D.45997_18->samples_per_second;

Updating SSA information for statement D.46010_20 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46015_21 = D.46010_20->rm_rate;



Registering new PHI nodes in block #21

Updating SSA information for statement D.45997_22 = v_engine_5->read_codec.implementation;

Updating SSA information for statement D.46009_23 = D.45997_22->iananame;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2133, session_2(D), 7, "Already using %s\n", D.46009_23);



Registering new PHI nodes in block #20

Updating SSA information for statement D.45997_25 = v_engine_5->read_codec.implementation;

Updating SSA information for statement D.46009_26 = D.45997_25->iananame;

Updating SSA information for statement D.46010_27 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46011_28 = D.46010_27->rm_encoding;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2128, session_2(D), 7, "Changing Codec from %s to %s\n", D.46009_26, D.46011_28);

Updating SSA information for statement switch_core_codec_destroy (D.46000_29);

Updating SSA information for statement switch_core_codec_destroy (D.46016_30);



Registering new PHI nodes in block #22

Updating SSA information for statement D.46010_32 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46011_33 = D.46010_32->rm_encoding;

Updating SSA information for statement D.46010_34 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46017_35 = D.46010_34->rm_fmtp;

Updating SSA information for statement D.46010_36 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46015_37 = D.46010_36->rm_rate;

Updating SSA information for statement D.46018_38 = switch_core_session_get_pool (session_2(D));

Updating SSA information for statement D.46019_39 = switch_core_codec_init_with_bitrate (D.46000_31, D.46011_33, D.46017_35, D.46015_37, 0, 1, 0, 3, 0B, D.46018_38);



Registering new PHI nodes in block #23

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2149, session_2(D), 3, "Can\'t load codec?\n");



Registering new PHI nodes in block #24

Updating SSA information for statement D.46010_42 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46011_43 = D.46010_42->rm_encoding;

Updating SSA information for statement D.46010_44 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46017_45 = D.46010_44->rm_fmtp;

Updating SSA information for statement D.46010_46 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46015_47 = D.46010_46->rm_rate;

Updating SSA information for statement D.46022_48 = switch_core_session_get_pool (session_2(D));

Updating SSA information for statement D.46023_49 = switch_core_codec_init_with_bitrate (D.46016_41, D.46011_43, D.46017_45, D.46015_47, 0, 1, 0, 3, 0B, D.46022_48);



Registering new PHI nodes in block #25

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2160, session_2(D), 3, "Can\'t load codec?\n");



Registering new PHI nodes in block #26

Updating SSA information for statement D.46010_51 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46015_52 = D.46010_51->rm_rate;

Updating SSA information for statement v_engine_5->read_frame.rate = D.46015_52;

Updating SSA information for statement D.46026_53 = session_2(D)->channel;

Updating SSA information for statement D.46027_54 = switch_channel_get_name (D.46026_53);

Updating SSA information for statement D.46010_55 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46011_56 = D.46010_55->rm_encoding;

Updating SSA information for statement D.46010_57 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46015_58 = D.46010_57->rm_rate;

Updating SSA information for statement D.46010_59 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46028_60 = D.46010_59->codec_ms;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2164, session_2(D), 7, "Set VIDEO Codec %s %s/%ld %d ms\n", D.46027_54, D.46011_56, D.46015_58, D.46028_60);

Updating SSA information for statement v_engine_5->read_frame.codec = D.46000_61;

Updating SSA information for statement D.46029_62 = v_engine_5->write_codec.fmtp_out;

Updating SSA information for statement D.46030_63 = switch_core_perform_session_strdup (session_2(D), D.46029_62, "src/switch_core_media.c", &__func__, 2169);

Updating SSA information for statement v_engine_5->write_codec.fmtp_out = D.46030_63;

Updating SSA information for statement D.46010_64 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46031_65 = D.46010_64->agreed_pt;

Updating SSA information for statement v_engine_5->write_codec.agreed_pt = D.46031_65;

Updating SSA information for statement D.46010_66 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46031_67 = D.46010_66->agreed_pt;

Updating SSA information for statement v_engine_5->read_codec.agreed_pt = D.46031_67;

Updating SSA information for statement switch_core_session_set_video_read_codec (session_2(D), D.46000_68);

Updating SSA information for statement switch_core_session_set_video_write_codec (session_2(D), D.46016_69);

Updating SSA information for statement D.46026_70 = session_2(D)->channel;

Updating SSA information for statement D.46010_71 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46011_72 = D.46010_71->rm_encoding;

Updating SSA information for statement D.46010_73 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46015_74 = D.46010_73->rm_rate;

Updating SSA information for statement switch_channel_set_variable_printf (D.46026_70, "rtp_last_video_codec_string", "%s@%dh", D.46011_72, D.46015_74);

Updating SSA information for statement D.46032_75 = v_engine_5->rtp_session;

Updating SSA information for statement D.46033_76 = switch_rtp_ready (D.46032_75);



Registering new PHI nodes in block #27

Updating SSA information for statement msg = {};

Updating SSA information for statement msg.from = "src/switch_core_media.c";

Updating SSA information for statement msg.message_id = 17;

Updating SSA information for statement D.46032_77 = v_engine_5->rtp_session;

Updating SSA information for statement D.46010_78 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46031_79 = D.46010_78->agreed_pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.46032_77, D.46031_79);

Updating SSA information for statement switch_core_session_perform_receive_message (session_2(D), &msg, "src/switch_core_media.c", &__func__, 2191);



Registering new PHI nodes in block #28

Updating SSA information for statement D.46026_80 = session_2(D)->channel;

Updating SSA information for statement D.46010_81 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46011_82 = D.46010_81->rm_encoding;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46026_80, "rtp_use_video_codec_name", D.46011_82, 1);

Updating SSA information for statement D.46026_83 = session_2(D)->channel;

Updating SSA information for statement D.46010_84 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46017_85 = D.46010_84->rm_fmtp;

Updating SSA information for statement switch_channel_set_variable_var_check (D.46026_83, "rtp_use_video_codec_fmtp", D.46017_85, 1);

Updating SSA information for statement D.46026_86 = session_2(D)->channel;

Updating SSA information for statement D.46010_87 = v_engine_5->cur_payload_map;

Updating SSA information for statement D.46015_88 = D.46010_87->rm_rate;

Updating SSA information for statement switch_channel_set_variable_printf (D.46026_86, "rtp_use_video_codec_rate", "%d", D.46015_88);

Updating SSA information for statement D.46026_89 = session_2(D)->channel;

Updating SSA information for statement switch_channel_set_variable_printf (D.46026_89, "rtp_use_video_codec_ptime", "%d", 0);



Registering new PHI nodes in block #29



Symbols to be put in SSA form

{ .MEM D.47742 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 30
Number of blocks to update: 29 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_set_video_codec";
  static const char __func__[34] = "switch_core_media_set_video_codec";

  { Scope block #146 src/switch_core_media.c:2121 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
    struct switch_codec_t * codec; (unused)

    { Scope block #147 Originating from :#0 

    }

  }

  { Scope block #148 
    struct switch_core_session_message_t msg;

  }

}
switch_core_media_set_video_codec (struct switch_core_session_t * session, int force)
{
  switch_bool_t D.47749;
  int iftmp.104;
  uint32_t D.47747;
  uint32_t D.47746;
  struct switch_mutex_t * D.47745;
  struct switch_codec_interface_t * D.47744;
  const struct switch_codec_implementation_t * D.47743;
  switch_bool_t D.47742;
  struct switch_core_session_message_t msg;
  static const char __func__[34] = "switch_core_media_set_video_codec";
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_set_video_codec";
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  uint8_t D.46033;
  struct switch_rtp_t * D.46032;
  switch_payload_t D.46031;
  char * D.46030;
  char * D.46029;
  uint32_t D.46028;
  char * D.46027;
  struct switch_channel_t * D.46026;
  switch_status_t D.46023;
  struct switch_memory_pool_t * D.46022;
  switch_status_t D.46019;
  struct switch_memory_pool_t * D.46018;
  char * D.46017;
  struct switch_codec_t * D.46016;
  long unsigned int D.46015;
  const uint32_t D.46014;
  int D.46012;
  char * D.46011;
  struct payload_map_t * D.46010;
  char * const D.46009;
  switch_bool_t D.46001;
  struct switch_codec_t * D.46000;
  const struct switch_codec_implementation_t * D.45997;
  uint8_t D.45994;
  switch_status_t D.45993;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2109, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.45993_4 = 1;
  goto <bb 29>;

<bb 6>:
  v_engine_5 = &smh_3->engines[1];
  # DEBUG v_engine => v_engine_5
  D.45994_6 = v_engine_5->codec_negotiated;
  if (D.45994_6 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.45993_7 = 1;
  goto <bb 29>;

<bb 8>:
  D.45997_8 = v_engine_5->read_codec.implementation;
  if (D.45997_8 != 0B)
    goto <bb 9>;
  else
    goto <bb 22>;

<bb 9>:
  D.46000_9 = &v_engine_5->read_codec;
  # DEBUG codec => D.46000_9
  if (D.46000_9 != 0B)
    goto <bb 10>;
  else
    goto <bb 14>;

<bb 10>:
  D.47747_125 = D.46000_9->flags;
  D.47746_126 = D.47747_125 & 256;
  if (D.47746_126 != 0)
    goto <bb 11>;
  else
    goto <bb 14>;

<bb 11>:
  D.47745_127 = D.46000_9->mutex;
  if (D.47745_127 != 0B)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 12>:
  D.47744_128 = D.46000_9->codec_interface;
  if (D.47744_128 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.47743_129 = D.46000_9->implementation;
  if (D.47743_129 != 0B)
    goto <bb 15>;
  else
    goto <bb 14>;

<bb 14>:

<bb 15>:
  # iftmp.104_130 = PHI <1(13), 0(14)>
  D.47749_131 = (switch_bool_t) iftmp.104_130;
  D.47742_132 = D.47749_131;
  D.46001_10 = D.47742_132;
  if (D.46001_10 != 0)
    goto <bb 16>;
  else
    goto <bb 22>;

<bb 16>:
  if (force_11(D) == 0)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.45993_12 = 0;
  goto <bb 29>;

<bb 18>:
  D.45997_13 = v_engine_5->read_codec.implementation;
  D.46009_14 = D.45997_13->iananame;
  D.46010_15 = v_engine_5->cur_payload_map;
  D.46011_16 = D.46010_15->rm_encoding;
  D.46012_17 = strcasecmp (D.46009_14, D.46011_16);
  if (D.46012_17 != 0)
    goto <bb 20>;
  else
    goto <bb 19>;

<bb 19>:
  D.45997_18 = v_engine_5->read_codec.implementation;
  D.46014_19 = D.45997_18->samples_per_second;
  D.46010_20 = v_engine_5->cur_payload_map;
  D.46015_21 = D.46010_20->rm_rate;
  if (D.46014_19 != D.46015_21)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.45997_25 = v_engine_5->read_codec.implementation;
  D.46009_26 = D.45997_25->iananame;
  D.46010_27 = v_engine_5->cur_payload_map;
  D.46011_28 = D.46010_27->rm_encoding;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2128, session_2(D), 7, "Changing Codec from %s to %s\n", D.46009_26, D.46011_28);
  D.46000_29 = &v_engine_5->read_codec;
  switch_core_codec_destroy (D.46000_29);
  D.46016_30 = &v_engine_5->write_codec;
  switch_core_codec_destroy (D.46016_30);
  goto <bb 22>;

<bb 21>:
  D.45997_22 = v_engine_5->read_codec.implementation;
  D.46009_23 = D.45997_22->iananame;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2133, session_2(D), 7, "Already using %s\n", D.46009_23);
  D.45993_24 = 0;
  goto <bb 29>;

<bb 22>:
  D.46000_31 = &v_engine_5->read_codec;
  D.46010_32 = v_engine_5->cur_payload_map;
  D.46011_33 = D.46010_32->rm_encoding;
  D.46010_34 = v_engine_5->cur_payload_map;
  D.46017_35 = D.46010_34->rm_fmtp;
  D.46010_36 = v_engine_5->cur_payload_map;
  D.46015_37 = D.46010_36->rm_rate;
  D.46018_38 = switch_core_session_get_pool (session_2(D));
  D.46019_39 = switch_core_codec_init_with_bitrate (D.46000_31, D.46011_33, D.46017_35, D.46015_37, 0, 1, 0, 3, 0B, D.46018_38);
  if (D.46019_39 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2149, session_2(D), 3, "Can\'t load codec?\n");
  D.45993_40 = 1;
  goto <bb 29>;

<bb 24>:
  D.46016_41 = &v_engine_5->write_codec;
  D.46010_42 = v_engine_5->cur_payload_map;
  D.46011_43 = D.46010_42->rm_encoding;
  D.46010_44 = v_engine_5->cur_payload_map;
  D.46017_45 = D.46010_44->rm_fmtp;
  D.46010_46 = v_engine_5->cur_payload_map;
  D.46015_47 = D.46010_46->rm_rate;
  D.46022_48 = switch_core_session_get_pool (session_2(D));
  D.46023_49 = switch_core_codec_init_with_bitrate (D.46016_41, D.46011_43, D.46017_45, D.46015_47, 0, 1, 0, 3, 0B, D.46022_48);
  if (D.46023_49 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2160, session_2(D), 3, "Can\'t load codec?\n");
  D.45993_50 = 1;
  goto <bb 29>;

<bb 26>:
  D.46010_51 = v_engine_5->cur_payload_map;
  D.46015_52 = D.46010_51->rm_rate;
  v_engine_5->read_frame.rate = D.46015_52;
  D.46026_53 = session_2(D)->channel;
  D.46027_54 = switch_channel_get_name (D.46026_53);
  D.46010_55 = v_engine_5->cur_payload_map;
  D.46011_56 = D.46010_55->rm_encoding;
  D.46010_57 = v_engine_5->cur_payload_map;
  D.46015_58 = D.46010_57->rm_rate;
  D.46010_59 = v_engine_5->cur_payload_map;
  D.46028_60 = D.46010_59->codec_ms;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2164, session_2(D), 7, "Set VIDEO Codec %s %s/%ld %d ms\n", D.46027_54, D.46011_56, D.46015_58, D.46028_60);
  D.46000_61 = &v_engine_5->read_codec;
  v_engine_5->read_frame.codec = D.46000_61;
  D.46029_62 = v_engine_5->write_codec.fmtp_out;
  D.46030_63 = switch_core_perform_session_strdup (session_2(D), D.46029_62, "src/switch_core_media.c", &__func__, 2169);
  v_engine_5->write_codec.fmtp_out = D.46030_63;
  D.46010_64 = v_engine_5->cur_payload_map;
  D.46031_65 = D.46010_64->agreed_pt;
  v_engine_5->write_codec.agreed_pt = D.46031_65;
  D.46010_66 = v_engine_5->cur_payload_map;
  D.46031_67 = D.46010_66->agreed_pt;
  v_engine_5->read_codec.agreed_pt = D.46031_67;
  D.46000_68 = &v_engine_5->read_codec;
  switch_core_session_set_video_read_codec (session_2(D), D.46000_68);
  D.46016_69 = &v_engine_5->write_codec;
  switch_core_session_set_video_write_codec (session_2(D), D.46016_69);
  D.46026_70 = session_2(D)->channel;
  D.46010_71 = v_engine_5->cur_payload_map;
  D.46011_72 = D.46010_71->rm_encoding;
  D.46010_73 = v_engine_5->cur_payload_map;
  D.46015_74 = D.46010_73->rm_rate;
  switch_channel_set_variable_printf (D.46026_70, "rtp_last_video_codec_string", "%s@%dh", D.46011_72, D.46015_74);
  D.46032_75 = v_engine_5->rtp_session;
  D.46033_76 = switch_rtp_ready (D.46032_75);
  if (D.46033_76 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  msg = {};
  msg.from = "src/switch_core_media.c";
  msg.message_id = 17;
  D.46032_77 = v_engine_5->rtp_session;
  D.46010_78 = v_engine_5->cur_payload_map;
  D.46031_79 = D.46010_78->agreed_pt;
  switch_rtp_set_default_payload (D.46032_77, D.46031_79);
  switch_core_session_perform_receive_message (session_2(D), &msg, "src/switch_core_media.c", &__func__, 2191);

<bb 28>:
  D.46026_80 = session_2(D)->channel;
  D.46010_81 = v_engine_5->cur_payload_map;
  D.46011_82 = D.46010_81->rm_encoding;
  switch_channel_set_variable_var_check (D.46026_80, "rtp_use_video_codec_name", D.46011_82, 1);
  D.46026_83 = session_2(D)->channel;
  D.46010_84 = v_engine_5->cur_payload_map;
  D.46017_85 = D.46010_84->rm_fmtp;
  switch_channel_set_variable_var_check (D.46026_83, "rtp_use_video_codec_fmtp", D.46017_85, 1);
  D.46026_86 = session_2(D)->channel;
  D.46010_87 = v_engine_5->cur_payload_map;
  D.46015_88 = D.46010_87->rm_rate;
  switch_channel_set_variable_printf (D.46026_86, "rtp_use_video_codec_rate", "%d", D.46015_88);
  D.46026_89 = session_2(D)->channel;
  switch_channel_set_variable_printf (D.46026_89, "rtp_use_video_codec_ptime", "%d", 0);
  D.45993_90 = 0;

<bb 29>:
  # D.45993_1 = PHI <D.45993_4(5), D.45993_7(7), D.45993_12(17), D.45993_24(21), D.45993_40(23), D.45993_50(25), D.45993_90(28)>
  return D.45993_1;

}



;; Function switch_core_media_set_codec (switch_core_media_set_codec)

Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_core_media_set_codec.
Processing frequency switch_core_codec_ready
  Called by switch_core_media_set_codec that is normal or hot
Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_core_media_set_codec.
Processing frequency switch_core_codec_ready
  Called by switch_core_media_set_codec that is normal or hot
Inlining switch_core_codec_ready to switch_core_media_set_codec with frequency 1000
Inlining switch_core_codec_ready to switch_core_media_set_codec with frequency 1000
Iterations: 1
Merging blocks 8 and 44
Merging blocks 33 and 52
Merging blocks 50 and 43
Merging blocks 58 and 51


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 2215, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_8 = session_7(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.45906_11 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45907_12 = D.45906_11->iananame;



Registering new PHI nodes in block #7

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2223, session_7(D), 7, "No audio codec available\n");



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9

Updating SSA information for statement D.47757_228 = D.45910_14->flags;



Registering new PHI nodes in block #10

Updating SSA information for statement D.47755_230 = D.45910_14->mutex;



Registering new PHI nodes in block #11

Updating SSA information for statement D.47754_231 = D.45910_14->codec_interface;



Registering new PHI nodes in block #12

Updating SSA information for statement D.47753_232 = D.45910_14->implementation;



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement D.47752 = D.47759_234;

Updating SSA information for statement D.45911_15 = D.47752;



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17

Updating SSA information for statement D.45919_18 = a_engine_10->read_impl.iananame;

Updating SSA information for statement D.45906_19 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45907_20 = D.45906_19->iananame;

Updating SSA information for statement D.45920_21 = strcasecmp (D.45919_18, D.45907_20);



Registering new PHI nodes in block #18

Updating SSA information for statement D.45922_22 = a_engine_10->read_impl.microseconds_per_packet;

Updating SSA information for statement D.45906_25 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45925_26 = D.45906_25->codec_ms;



Registering new PHI nodes in block #19

Updating SSA information for statement D.45927_27 = a_engine_10->read_impl.samples_per_second;

Updating SSA information for statement D.45906_28 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45928_29 = D.45906_28->rm_rate;



Registering new PHI nodes in block #25

Updating SSA information for statement D.45919_30 = a_engine_10->read_impl.iananame;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2271, session_7(D), 7, "Already using %s\n", D.45919_30);



Registering new PHI nodes in block #20

Updating SSA information for statement D.45929_32 = session_7(D)->read_resampler;



Registering new PHI nodes in block #21

Updating SSA information for statement D.45932_33 = session_7(D)->resample_mutex;

Updating SSA information for statement switch_mutex_lock (D.45932_33);

Updating SSA information for statement switch_resample_destroy (D.45933_34);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2238, session_7(D), 5, "Deactivating read resampler\n");

Updating SSA information for statement D.45932_35 = session_7(D)->resample_mutex;

Updating SSA information for statement switch_mutex_unlock (D.45932_35);



Registering new PHI nodes in block #22

Updating SSA information for statement D.45934_36 = session_7(D)->write_resampler;



Registering new PHI nodes in block #23

Updating SSA information for statement D.45932_37 = session_7(D)->resample_mutex;

Updating SSA information for statement switch_mutex_lock (D.45932_37);

Updating SSA information for statement switch_resample_destroy (D.45937_38);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2245, session_7(D), 5, "Deactivating write resampler\n");

Updating SSA information for statement D.45932_39 = session_7(D)->resample_mutex;

Updating SSA information for statement switch_mutex_unlock (D.45932_39);



Registering new PHI nodes in block #24

Updating SSA information for statement switch_core_session_reset (session_7(D), 0, 0);

Updating SSA information for statement D.45938_40 = session_7(D)->channel;

Updating SSA information for statement switch_channel_perform_audio_sync (D.45938_40, "src/switch_core_media.c", &__func__, 2250);

Updating SSA information for statement D.45919_41 = a_engine_10->read_impl.iananame;

Updating SSA information for statement D.45922_42 = a_engine_10->read_impl.microseconds_per_packet;

Updating SSA information for statement D.45927_44 = a_engine_10->read_impl.samples_per_second;

Updating SSA information for statement D.45906_45 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45907_46 = D.45906_45->iananame;

Updating SSA information for statement D.45906_47 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45925_48 = D.45906_47->codec_ms;

Updating SSA information for statement D.45906_49 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45928_50 = D.45906_49->rm_rate;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2252, session_7(D), 7, "Changing Codec from %s@%dms@%dhz to %s@%dms@%luhz\n", D.45919_41, D.45939_43, D.45927_44, D.45907_46, D.45925_48, D.45928_50);

Updating SSA information for statement D.45922_51 = a_engine_10->read_impl.microseconds_per_packet;

Updating SSA information for statement switch_sleep (D.45940_52);

Updating SSA information for statement switch_core_session_lock_codec_write (session_7(D));

Updating SSA information for statement switch_core_session_lock_codec_read (session_7(D));

Updating SSA information for statement D.45922_54 = a_engine_10->read_impl.microseconds_per_packet;

Updating SSA information for statement switch_sleep (D.45940_55);

Updating SSA information for statement switch_core_codec_destroy (D.45910_56);

Updating SSA information for statement switch_core_codec_destroy (D.45941_57);

Updating SSA information for statement D.45938_58 = session_7(D)->channel;

Updating SSA information for statement switch_channel_perform_audio_sync (D.45938_58, "src/switch_core_media.c", &__func__, 2269);



Registering new PHI nodes in block #26

Updating SSA information for statement D.45906_60 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45907_61 = D.45906_60->iananame;

Updating SSA information for statement D.45906_62 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45942_63 = D.45906_62->rm_fmtp;

Updating SSA information for statement D.45906_64 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45928_65 = D.45906_64->rm_rate;

Updating SSA information for statement D.45906_66 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45925_67 = D.45906_66->codec_ms;

Updating SSA information for statement D.45906_69 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45944_70 = D.45906_69->channels;

Updating SSA information for statement D.45906_71 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45945_72 = D.45906_71->bitrate;

Updating SSA information for statement D.45947_75 = switch_core_session_get_pool (session_7(D));

Updating SSA information for statement D.45948_76 = switch_core_codec_init_with_bitrate (D.45910_59, D.45907_61, D.45942_63, D.45928_65, D.45943_68, D.45944_70, D.45945_72, D.45946_74, 0B, D.45947_75);



Registering new PHI nodes in block #27

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2285, session_7(D), 3, "Can\'t load codec?\n");

Updating SSA information for statement D.45938_77 = session_7(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.45938_77, "src/switch_core_media.c", &__func__, 2286, 88);



Registering new PHI nodes in block #28

Updating SSA information for statement a_engine_10->read_codec.session = session_7(D);

Updating SSA information for statement D.45906_80 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45907_81 = D.45906_80->iananame;

Updating SSA information for statement D.45906_82 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45942_83 = D.45906_82->rm_fmtp;

Updating SSA information for statement D.45906_84 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45928_85 = D.45906_84->rm_rate;

Updating SSA information for statement D.45906_86 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45925_87 = D.45906_86->codec_ms;

Updating SSA information for statement D.45906_89 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45944_90 = D.45906_89->channels;

Updating SSA information for statement D.45906_91 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45945_92 = D.45906_91->bitrate;

Updating SSA information for statement D.45951_94 = switch_core_session_get_pool (session_7(D));

Updating SSA information for statement D.45952_95 = switch_core_codec_init_with_bitrate (D.45941_79, D.45907_81, D.45942_83, D.45928_85, D.45943_88, D.45944_90, D.45945_92, D.45946_93, 0B, D.45951_94);



Registering new PHI nodes in block #29

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2302, session_7(D), 3, "Can\'t load codec?\n");

Updating SSA information for statement D.45938_96 = session_7(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.45938_96, "src/switch_core_media.c", &__func__, 2303, 88);



Registering new PHI nodes in block #30

Updating SSA information for statement a_engine_10->write_codec.session = session_7(D);

Updating SSA information for statement D.45938_98 = session_7(D)->channel;

Updating SSA information for statement D.45906_99 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45907_100 = D.45906_99->iananame;

Updating SSA information for statement switch_channel_set_variable_var_check (D.45938_98, "rtp_use_codec_name", D.45907_100, 1);

Updating SSA information for statement D.45938_101 = session_7(D)->channel;

Updating SSA information for statement D.45906_102 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45942_103 = D.45906_102->rm_fmtp;

Updating SSA information for statement switch_channel_set_variable_var_check (D.45938_101, "rtp_use_codec_fmtp", D.45942_103, 1);

Updating SSA information for statement D.45938_104 = session_7(D)->channel;

Updating SSA information for statement D.45906_105 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45928_106 = D.45906_105->rm_rate;

Updating SSA information for statement switch_channel_set_variable_printf (D.45938_104, "rtp_use_codec_rate", "%d", D.45928_106);

Updating SSA information for statement D.45938_107 = session_7(D)->channel;

Updating SSA information for statement D.45906_108 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45925_109 = D.45906_108->codec_ms;

Updating SSA information for statement switch_channel_set_variable_printf (D.45938_107, "rtp_use_codec_ptime", "%d", D.45925_109);

Updating SSA information for statement D.45938_110 = session_7(D)->channel;

Updating SSA information for statement D.45906_111 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45907_112 = D.45906_111->iananame;

Updating SSA information for statement D.45906_113 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45928_114 = D.45906_113->rm_rate;

Updating SSA information for statement D.45906_115 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45925_116 = D.45906_115->codec_ms;

Updating SSA information for statement switch_channel_set_variable_printf (D.45938_110, "rtp_last_audio_codec_string", "%s@%dh@%di", D.45907_112, D.45928_114, D.45925_116);

Updating SSA information for statement D.45955_117 = a_engine_10->read_codec.implementation;



Registering new PHI nodes in block #31

Updating SSA information for statement __assert_fail ("a_engine->read_codec.implementation", "src/switch_core_media.c", 2316, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #32

Updating SSA information for statement D.45958_118 = a_engine_10->write_codec.implementation;



Registering new PHI nodes in block #33

Updating SSA information for statement __assert_fail ("a_engine->write_codec.implementation", "src/switch_core_media.c", 2317, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #34

Updating SSA information for statement D.45955_119 = a_engine_10->read_codec.implementation;

Updating SSA information for statement a_engine_10->read_impl = *D.45955_119;

Updating SSA information for statement D.45958_120 = a_engine_10->write_codec.implementation;

Updating SSA information for statement a_engine_10->write_impl = *D.45958_120;

Updating SSA information for statement D.45955_121 = a_engine_10->read_codec.implementation;

Updating SSA information for statement switch_core_session_set_read_impl (session_7(D), D.45955_121);

Updating SSA information for statement D.45958_122 = a_engine_10->write_codec.implementation;

Updating SSA information for statement switch_core_session_set_write_impl (session_7(D), D.45958_122);

Updating SSA information for statement D.45961_123 = a_engine_10->rtp_session;

Updating SSA information for statement D.45962_124 = switch_rtp_ready (D.45961_123);



Registering new PHI nodes in block #35

Updating SSA information for statement D.45955_125 = a_engine_10->read_codec.implementation;



Registering new PHI nodes in block #36

Updating SSA information for statement __assert_fail ("a_engine->read_codec.implementation", "src/switch_core_media.c", 2326, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #37

Updating SSA information for statement D.45961_126 = a_engine_10->rtp_session;

Updating SSA information for statement D.45922_127 = a_engine_10->read_impl.microseconds_per_packet;

Updating SSA information for statement D.45968_129 = a_engine_10->read_impl.samples_per_packet;

Updating SSA information for statement D.45969_130 = switch_rtp_change_interval (D.45961_126, D.45967_128, D.45968_129);



Registering new PHI nodes in block #38

Updating SSA information for statement D.45938_131 = session_7(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.45938_131, "src/switch_core_media.c", &__func__, 2331, 27);



Registering new PHI nodes in block #39

Updating SSA information for statement D.45906_133 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45928_134 = D.45906_133->rm_rate;

Updating SSA information for statement a_engine_10->read_frame.rate = D.45928_134;



Registering new PHI nodes in block #40

Updating SSA information for statement D.47766_235 = D.45910_135->flags;



Registering new PHI nodes in block #41

Updating SSA information for statement D.47764_237 = D.45910_135->mutex;



Registering new PHI nodes in block #42

Updating SSA information for statement D.47763_238 = D.45910_135->codec_interface;



Registering new PHI nodes in block #43

Updating SSA information for statement D.47762_239 = D.45910_135->implementation;



Registering new PHI nodes in block #44



Registering new PHI nodes in block #45

Updating SSA information for statement D.47761 = D.47768_241;

Updating SSA information for statement D.45972_136 = D.47761;



Registering new PHI nodes in block #47

Updating SSA information for statement D.45938_138 = session_7(D)->channel;

Updating SSA information for statement D.45975_139 = switch_channel_get_name (D.45938_138);

Updating SSA information for statement D.45906_140 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45907_141 = D.45906_140->iananame;

Updating SSA information for statement D.45906_142 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45928_143 = D.45906_142->rm_rate;

Updating SSA information for statement D.45906_144 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45925_145 = D.45906_144->codec_ms;

Updating SSA information for statement D.45968_146 = a_engine_10->read_impl.samples_per_packet;

Updating SSA information for statement D.45976_147 = a_engine_10->read_impl.bits_per_second;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2343, session_7(D), 7, "Set Codec %s %s/%ld %d ms %d samples %d bits\n", D.45975_139, D.45907_141, D.45928_143, D.45925_145, D.45968_146, D.45976_147);

Updating SSA information for statement a_engine_10->read_frame.codec = D.45910_148;

Updating SSA information for statement D.45906_149 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45977_150 = D.45906_149->agreed_pt;

Updating SSA information for statement a_engine_10->write_codec.agreed_pt = D.45977_150;

Updating SSA information for statement D.45906_151 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45977_152 = D.45906_151->agreed_pt;

Updating SSA information for statement a_engine_10->read_codec.agreed_pt = D.45977_152;



Registering new PHI nodes in block #48

Updating SSA information for statement switch_core_session_set_real_read_codec (session_7(D), D.45910_153);

Updating SSA information for statement switch_core_session_set_write_codec (session_7(D), D.45941_154);



Registering new PHI nodes in block #49

Updating SSA information for statement D.45906_155 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45980_156 = a_engine_10->write_codec.fmtp_out;

Updating SSA information for statement D.45981_157 = switch_core_perform_session_strdup (session_7(D), D.45980_156, "src/switch_core_media.c", &__func__, 2357);

Updating SSA information for statement D.45906_155->fmtp_out = D.45981_157;

Updating SSA information for statement D.45961_158 = a_engine_10->rtp_session;

Updating SSA information for statement D.45982_159 = switch_rtp_ready (D.45961_158);



Registering new PHI nodes in block #50

Updating SSA information for statement D.45961_160 = a_engine_10->rtp_session;

Updating SSA information for statement D.45906_161 = a_engine_10->cur_payload_map;

Updating SSA information for statement D.45985_162 = D.45906_161->pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.45961_160, D.45985_162);



Registering new PHI nodes in block #46

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2339, session_7(D), 3, "Can\'t load codec?\n");



Registering new PHI nodes in block #51



Registering new PHI nodes in block #52

Updating SSA information for statement switch_core_session_unlock_codec_write (session_7(D));

Updating SSA information for statement switch_core_session_unlock_codec_read (session_7(D));



Registering new PHI nodes in block #53



Registering new PHI nodes in block #54



Symbols to be put in SSA form

{ .MEM D.47752 D.47761 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 55
Number of blocks to update: 54 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 


Scope blocks after cleanups:

{ Scope block #0 
  switch_status_t status;
  int resetting;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_set_codec";
  static const char __func__[28] = "switch_core_media_set_codec";
  void end = <<< error >>>; (unused)

  { Scope block #149 src/switch_core_media.c:2338 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
    struct switch_codec_t * codec; (unused)

    { Scope block #150 Originating from :#0 

    }

  }

  { Scope block #151 src/switch_core_media.c:2227 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
    struct switch_codec_t * codec; (unused)

    { Scope block #152 Originating from :#0 

    }

  }

}
switch_core_media_set_codec (struct switch_core_session_t * session, int force, uint32_t codec_flags)
{
  switch_bool_t D.47768;
  int iftmp.104;
  uint32_t D.47766;
  uint32_t D.47765;
  struct switch_mutex_t * D.47764;
  struct switch_codec_interface_t * D.47763;
  const struct switch_codec_implementation_t * D.47762;
  switch_bool_t D.47761;
  switch_bool_t D.47759;
  int iftmp.104;
  uint32_t D.47757;
  uint32_t D.47756;
  struct switch_mutex_t * D.47755;
  struct switch_codec_interface_t * D.47754;
  const struct switch_codec_implementation_t * D.47753;
  switch_bool_t D.47752;
  static const char __func__[28] = "switch_core_media_set_codec";
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_set_codec";
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  int resetting;
  switch_status_t status;
  switch_payload_t D.45985;
  uint8_t D.45982;
  char * D.45981;
  char * D.45980;
  switch_payload_t D.45977;
  int D.45976;
  char * D.45975;
  switch_bool_t D.45972;
  switch_status_t D.45969;
  uint32_t D.45968;
  uint32_t D.45967;
  uint8_t D.45962;
  struct switch_rtp_t * D.45961;
  const struct switch_codec_implementation_t * D.45958;
  const struct switch_codec_implementation_t * D.45955;
  switch_status_t D.45952;
  struct switch_memory_pool_t * D.45951;
  switch_status_t D.45948;
  struct switch_memory_pool_t * D.45947;
  uint32_t D.45946;
  uint32_t D.45945;
  int D.45944;
  int D.45943;
  char * D.45942;
  struct switch_codec_t * D.45941;
  switch_interval_time_t D.45940;
  int D.45939;
  struct switch_channel_t * D.45938;
  struct switch_audio_resampler_t * * D.45937;
  struct switch_audio_resampler_t * D.45934;
  struct switch_audio_resampler_t * * D.45933;
  struct switch_mutex_t * D.45932;
  struct switch_audio_resampler_t * D.45929;
  long unsigned int D.45928;
  uint32_t D.45927;
  uint32_t D.45925;
  unsigned int D.45924;
  unsigned int D.45923;
  int D.45922;
  int D.45920;
  char * D.45919;
  switch_bool_t D.45911;
  struct switch_codec_t * D.45910;
  char * D.45907;
  struct payload_map_t * D.45906;
  switch_status_t D.45905;

<bb 2>:
  status_5 = 0;
  # DEBUG status => status_5
  resetting_6 = 0;
  # DEBUG resetting => resetting_6
  if (session_7(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2215, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_8 = session_7(D)->media_handle;
  # DEBUG smh => smh_8
  if (smh_8 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.45905_9 = 1;
  goto <bb 54>;

<bb 6>:
  a_engine_10 = &smh_8->engines;
  # DEBUG a_engine => a_engine_10
  D.45906_11 = a_engine_10->cur_payload_map;
  D.45907_12 = D.45906_11->iananame;
  if (D.45907_12 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2223, session_7(D), 7, "No audio codec available\n");
  status_13 = 1;
  # DEBUG status => status_13
  goto <bb 51> (end);

<bb 8>:
  D.45910_14 = &a_engine_10->read_codec;
  # DEBUG codec => D.45910_14
  if (D.45910_14 != 0B)
    goto <bb 9>;
  else
    goto <bb 13>;

<bb 9>:
  D.47757_228 = D.45910_14->flags;
  D.47756_229 = D.47757_228 & 256;
  if (D.47756_229 != 0)
    goto <bb 10>;
  else
    goto <bb 13>;

<bb 10>:
  D.47755_230 = D.45910_14->mutex;
  if (D.47755_230 != 0B)
    goto <bb 11>;
  else
    goto <bb 13>;

<bb 11>:
  D.47754_231 = D.45910_14->codec_interface;
  if (D.47754_231 != 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  D.47753_232 = D.45910_14->implementation;
  if (D.47753_232 != 0B)
    goto <bb 14>;
  else
    goto <bb 13>;

<bb 13>:

<bb 14>:
  # iftmp.104_233 = PHI <1(12), 0(13)>
  D.47759_234 = (switch_bool_t) iftmp.104_233;
  D.47752_242 = D.47759_234;
  D.45911_15 = D.47752_242;
  if (D.45911_15 != 0)
    goto <bb 15>;
  else
    goto <bb 26>;

<bb 15>:
  if (force_16(D) == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  status_17 = 0;
  # DEBUG status => status_17
  goto <bb 51> (end);

<bb 17>:
  D.45919_18 = a_engine_10->read_impl.iananame;
  D.45906_19 = a_engine_10->cur_payload_map;
  D.45907_20 = D.45906_19->iananame;
  D.45920_21 = strcasecmp (D.45919_18, D.45907_20);
  if (D.45920_21 != 0)
    goto <bb 20>;
  else
    goto <bb 18>;

<bb 18>:
  D.45922_22 = a_engine_10->read_impl.microseconds_per_packet;
  D.45923_23 = (unsigned int) D.45922_22;
  D.45924_24 = D.45923_23 / 1000;
  D.45906_25 = a_engine_10->cur_payload_map;
  D.45925_26 = D.45906_25->codec_ms;
  if (D.45924_24 != D.45925_26)
    goto <bb 20>;
  else
    goto <bb 19>;

<bb 19>:
  D.45927_27 = a_engine_10->read_impl.samples_per_second;
  D.45906_28 = a_engine_10->cur_payload_map;
  D.45928_29 = D.45906_28->rm_rate;
  if (D.45927_27 != D.45928_29)
    goto <bb 20>;
  else
    goto <bb 25>;

<bb 20>:
  D.45929_32 = session_7(D)->read_resampler;
  if (D.45929_32 != 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.45932_33 = session_7(D)->resample_mutex;
  switch_mutex_lock (D.45932_33);
  D.45933_34 = &session_7(D)->read_resampler;
  switch_resample_destroy (D.45933_34);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2238, session_7(D), 5, "Deactivating read resampler\n");
  D.45932_35 = session_7(D)->resample_mutex;
  switch_mutex_unlock (D.45932_35);

<bb 22>:
  D.45934_36 = session_7(D)->write_resampler;
  if (D.45934_36 != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  D.45932_37 = session_7(D)->resample_mutex;
  switch_mutex_lock (D.45932_37);
  D.45937_38 = &session_7(D)->write_resampler;
  switch_resample_destroy (D.45937_38);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2245, session_7(D), 5, "Deactivating write resampler\n");
  D.45932_39 = session_7(D)->resample_mutex;
  switch_mutex_unlock (D.45932_39);

<bb 24>:
  switch_core_session_reset (session_7(D), 0, 0);
  D.45938_40 = session_7(D)->channel;
  switch_channel_perform_audio_sync (D.45938_40, "src/switch_core_media.c", &__func__, 2250);
  D.45919_41 = a_engine_10->read_impl.iananame;
  D.45922_42 = a_engine_10->read_impl.microseconds_per_packet;
  D.45939_43 = D.45922_42 / 1000;
  D.45927_44 = a_engine_10->read_impl.samples_per_second;
  D.45906_45 = a_engine_10->cur_payload_map;
  D.45907_46 = D.45906_45->iananame;
  D.45906_47 = a_engine_10->cur_payload_map;
  D.45925_48 = D.45906_47->codec_ms;
  D.45906_49 = a_engine_10->cur_payload_map;
  D.45928_50 = D.45906_49->rm_rate;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2252, session_7(D), 7, "Changing Codec from %s@%dms@%dhz to %s@%dms@%luhz\n", D.45919_41, D.45939_43, D.45927_44, D.45907_46, D.45925_48, D.45928_50);
  D.45922_51 = a_engine_10->read_impl.microseconds_per_packet;
  D.45940_52 = (switch_interval_time_t) D.45922_51;
  switch_sleep (D.45940_52);
  switch_core_session_lock_codec_write (session_7(D));
  switch_core_session_lock_codec_read (session_7(D));
  resetting_53 = 1;
  # DEBUG resetting => resetting_53
  D.45922_54 = a_engine_10->read_impl.microseconds_per_packet;
  D.45940_55 = (switch_interval_time_t) D.45922_54;
  switch_sleep (D.45940_55);
  D.45910_56 = &a_engine_10->read_codec;
  switch_core_codec_destroy (D.45910_56);
  D.45941_57 = &a_engine_10->write_codec;
  switch_core_codec_destroy (D.45941_57);
  D.45938_58 = session_7(D)->channel;
  switch_channel_perform_audio_sync (D.45938_58, "src/switch_core_media.c", &__func__, 2269);
  goto <bb 26>;

<bb 25>:
  D.45919_30 = a_engine_10->read_impl.iananame;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2271, session_7(D), 7, "Already using %s\n", D.45919_30);
  status_31 = 0;
  # DEBUG status => status_31
  goto <bb 51> (end);

<bb 26>:
  # resetting_2 = PHI <resetting_6(14), resetting_53(24)>
  # DEBUG resetting => resetting_2
  D.45910_59 = &a_engine_10->read_codec;
  D.45906_60 = a_engine_10->cur_payload_map;
  D.45907_61 = D.45906_60->iananame;
  D.45906_62 = a_engine_10->cur_payload_map;
  D.45942_63 = D.45906_62->rm_fmtp;
  D.45906_64 = a_engine_10->cur_payload_map;
  D.45928_65 = D.45906_64->rm_rate;
  D.45906_66 = a_engine_10->cur_payload_map;
  D.45925_67 = D.45906_66->codec_ms;
  D.45943_68 = (int) D.45925_67;
  D.45906_69 = a_engine_10->cur_payload_map;
  D.45944_70 = D.45906_69->channels;
  D.45906_71 = a_engine_10->cur_payload_map;
  D.45945_72 = D.45906_71->bitrate;
  D.45946_74 = codec_flags_73(D) | 3;
  D.45947_75 = switch_core_session_get_pool (session_7(D));
  D.45948_76 = switch_core_codec_init_with_bitrate (D.45910_59, D.45907_61, D.45942_63, D.45928_65, D.45943_68, D.45944_70, D.45945_72, D.45946_74, 0B, D.45947_75);
  if (D.45948_76 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2285, session_7(D), 3, "Can\'t load codec?\n");
  D.45938_77 = session_7(D)->channel;
  switch_channel_perform_hangup (D.45938_77, "src/switch_core_media.c", &__func__, 2286, 88);
  status_78 = 1;
  # DEBUG status => status_78
  goto <bb 51> (end);

<bb 28>:
  a_engine_10->read_codec.session = session_7(D);
  D.45941_79 = &a_engine_10->write_codec;
  D.45906_80 = a_engine_10->cur_payload_map;
  D.45907_81 = D.45906_80->iananame;
  D.45906_82 = a_engine_10->cur_payload_map;
  D.45942_83 = D.45906_82->rm_fmtp;
  D.45906_84 = a_engine_10->cur_payload_map;
  D.45928_85 = D.45906_84->rm_rate;
  D.45906_86 = a_engine_10->cur_payload_map;
  D.45925_87 = D.45906_86->codec_ms;
  D.45943_88 = (int) D.45925_87;
  D.45906_89 = a_engine_10->cur_payload_map;
  D.45944_90 = D.45906_89->channels;
  D.45906_91 = a_engine_10->cur_payload_map;
  D.45945_92 = D.45906_91->bitrate;
  D.45946_93 = codec_flags_73(D) | 3;
  D.45951_94 = switch_core_session_get_pool (session_7(D));
  D.45952_95 = switch_core_codec_init_with_bitrate (D.45941_79, D.45907_81, D.45942_83, D.45928_85, D.45943_88, D.45944_90, D.45945_92, D.45946_93, 0B, D.45951_94);
  if (D.45952_95 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2302, session_7(D), 3, "Can\'t load codec?\n");
  D.45938_96 = session_7(D)->channel;
  switch_channel_perform_hangup (D.45938_96, "src/switch_core_media.c", &__func__, 2303, 88);
  status_97 = 1;
  # DEBUG status => status_97
  goto <bb 51> (end);

<bb 30>:
  a_engine_10->write_codec.session = session_7(D);
  D.45938_98 = session_7(D)->channel;
  D.45906_99 = a_engine_10->cur_payload_map;
  D.45907_100 = D.45906_99->iananame;
  switch_channel_set_variable_var_check (D.45938_98, "rtp_use_codec_name", D.45907_100, 1);
  D.45938_101 = session_7(D)->channel;
  D.45906_102 = a_engine_10->cur_payload_map;
  D.45942_103 = D.45906_102->rm_fmtp;
  switch_channel_set_variable_var_check (D.45938_101, "rtp_use_codec_fmtp", D.45942_103, 1);
  D.45938_104 = session_7(D)->channel;
  D.45906_105 = a_engine_10->cur_payload_map;
  D.45928_106 = D.45906_105->rm_rate;
  switch_channel_set_variable_printf (D.45938_104, "rtp_use_codec_rate", "%d", D.45928_106);
  D.45938_107 = session_7(D)->channel;
  D.45906_108 = a_engine_10->cur_payload_map;
  D.45925_109 = D.45906_108->codec_ms;
  switch_channel_set_variable_printf (D.45938_107, "rtp_use_codec_ptime", "%d", D.45925_109);
  D.45938_110 = session_7(D)->channel;
  D.45906_111 = a_engine_10->cur_payload_map;
  D.45907_112 = D.45906_111->iananame;
  D.45906_113 = a_engine_10->cur_payload_map;
  D.45928_114 = D.45906_113->rm_rate;
  D.45906_115 = a_engine_10->cur_payload_map;
  D.45925_116 = D.45906_115->codec_ms;
  switch_channel_set_variable_printf (D.45938_110, "rtp_last_audio_codec_string", "%s@%dh@%di", D.45907_112, D.45928_114, D.45925_116);
  D.45955_117 = a_engine_10->read_codec.implementation;
  if (D.45955_117 == 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  __assert_fail ("a_engine->read_codec.implementation", "src/switch_core_media.c", 2316, &__PRETTY_FUNCTION__);

<bb 32>:
  D.45958_118 = a_engine_10->write_codec.implementation;
  if (D.45958_118 == 0B)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  __assert_fail ("a_engine->write_codec.implementation", "src/switch_core_media.c", 2317, &__PRETTY_FUNCTION__);

<bb 34>:
  D.45955_119 = a_engine_10->read_codec.implementation;
  a_engine_10->read_impl = *D.45955_119;
  D.45958_120 = a_engine_10->write_codec.implementation;
  a_engine_10->write_impl = *D.45958_120;
  D.45955_121 = a_engine_10->read_codec.implementation;
  switch_core_session_set_read_impl (session_7(D), D.45955_121);
  D.45958_122 = a_engine_10->write_codec.implementation;
  switch_core_session_set_write_impl (session_7(D), D.45958_122);
  D.45961_123 = a_engine_10->rtp_session;
  D.45962_124 = switch_rtp_ready (D.45961_123);
  if (D.45962_124 != 0)
    goto <bb 35>;
  else
    goto <bb 39>;

<bb 35>:
  D.45955_125 = a_engine_10->read_codec.implementation;
  if (D.45955_125 == 0B)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  __assert_fail ("a_engine->read_codec.implementation", "src/switch_core_media.c", 2326, &__PRETTY_FUNCTION__);

<bb 37>:
  D.45961_126 = a_engine_10->rtp_session;
  D.45922_127 = a_engine_10->read_impl.microseconds_per_packet;
  D.45967_128 = (uint32_t) D.45922_127;
  D.45968_129 = a_engine_10->read_impl.samples_per_packet;
  D.45969_130 = switch_rtp_change_interval (D.45961_126, D.45967_128, D.45968_129);
  if (D.45969_130 != 0)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.45938_131 = session_7(D)->channel;
  switch_channel_perform_hangup (D.45938_131, "src/switch_core_media.c", &__func__, 2331, 27);
  status_132 = 1;
  # DEBUG status => status_132
  goto <bb 51> (end);

<bb 39>:
  D.45906_133 = a_engine_10->cur_payload_map;
  D.45928_134 = D.45906_133->rm_rate;
  a_engine_10->read_frame.rate = D.45928_134;
  D.45910_135 = &a_engine_10->read_codec;
  # DEBUG codec => D.45910_135
  if (D.45910_135 != 0B)
    goto <bb 40>;
  else
    goto <bb 44>;

<bb 40>:
  D.47766_235 = D.45910_135->flags;
  D.47765_236 = D.47766_235 & 256;
  if (D.47765_236 != 0)
    goto <bb 41>;
  else
    goto <bb 44>;

<bb 41>:
  D.47764_237 = D.45910_135->mutex;
  if (D.47764_237 != 0B)
    goto <bb 42>;
  else
    goto <bb 44>;

<bb 42>:
  D.47763_238 = D.45910_135->codec_interface;
  if (D.47763_238 != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  D.47762_239 = D.45910_135->implementation;
  if (D.47762_239 != 0B)
    goto <bb 45>;
  else
    goto <bb 44>;

<bb 44>:

<bb 45>:
  # iftmp.104_240 = PHI <1(43), 0(44)>
  D.47768_241 = (switch_bool_t) iftmp.104_240;
  D.47761_243 = D.47768_241;
  D.45972_136 = D.47761_243;
  if (D.45972_136 == 0)
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2339, session_7(D), 3, "Can\'t load codec?\n");
  status_137 = 1;
  # DEBUG status => status_137
  goto <bb 51> (end);

<bb 47>:
  D.45938_138 = session_7(D)->channel;
  D.45975_139 = switch_channel_get_name (D.45938_138);
  D.45906_140 = a_engine_10->cur_payload_map;
  D.45907_141 = D.45906_140->iananame;
  D.45906_142 = a_engine_10->cur_payload_map;
  D.45928_143 = D.45906_142->rm_rate;
  D.45906_144 = a_engine_10->cur_payload_map;
  D.45925_145 = D.45906_144->codec_ms;
  D.45968_146 = a_engine_10->read_impl.samples_per_packet;
  D.45976_147 = a_engine_10->read_impl.bits_per_second;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2343, session_7(D), 7, "Set Codec %s %s/%ld %d ms %d samples %d bits\n", D.45975_139, D.45907_141, D.45928_143, D.45925_145, D.45968_146, D.45976_147);
  D.45910_148 = &a_engine_10->read_codec;
  a_engine_10->read_frame.codec = D.45910_148;
  D.45906_149 = a_engine_10->cur_payload_map;
  D.45977_150 = D.45906_149->agreed_pt;
  a_engine_10->write_codec.agreed_pt = D.45977_150;
  D.45906_151 = a_engine_10->cur_payload_map;
  D.45977_152 = D.45906_151->agreed_pt;
  a_engine_10->read_codec.agreed_pt = D.45977_152;
  if (force_16(D) != 2)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  D.45910_153 = &a_engine_10->read_codec;
  switch_core_session_set_real_read_codec (session_7(D), D.45910_153);
  D.45941_154 = &a_engine_10->write_codec;
  switch_core_session_set_write_codec (session_7(D), D.45941_154);

<bb 49>:
  D.45906_155 = a_engine_10->cur_payload_map;
  D.45980_156 = a_engine_10->write_codec.fmtp_out;
  D.45981_157 = switch_core_perform_session_strdup (session_7(D), D.45980_156, "src/switch_core_media.c", &__func__, 2357);
  D.45906_155->fmtp_out = D.45981_157;
  D.45961_158 = a_engine_10->rtp_session;
  D.45982_159 = switch_rtp_ready (D.45961_158);
  if (D.45982_159 != 0)
    goto <bb 50>;
  else
    goto <bb 51> (end);

<bb 50>:
  D.45961_160 = a_engine_10->rtp_session;
  D.45906_161 = a_engine_10->cur_payload_map;
  D.45985_162 = D.45906_161->pt;
  switch_rtp_set_default_payload (D.45961_160, D.45985_162);

  # status_1 = PHI <status_13(7), status_17(16), status_31(25), status_78(27), status_97(29), status_132(38), status_137(46), status_5(49), status_5(50)>
  # resetting_3 = PHI <resetting_6(7), resetting_6(16), resetting_6(25), resetting_2(27), resetting_2(29), resetting_2(38), resetting_2(46), resetting_2(49), resetting_2(50)>
end:
  # DEBUG resetting => resetting_3
  # DEBUG status => status_1
  if (resetting_3 != 0)
    goto <bb 52>;
  else
    goto <bb 53>;

<bb 52>:
  switch_core_session_unlock_codec_write (session_7(D));
  switch_core_session_unlock_codec_read (session_7(D));

<bb 53>:
  D.45905_163 = status_1;

<bb 54>:
  # D.45905_4 = PHI <D.45905_9(5), D.45905_163(53)>
  return D.45905_4;

}



;; Function switch_core_media_read_frame (switch_core_media_read_frame)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_read_frame.
Processing frequency atoi
  Called by switch_core_media_read_frame that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_read_frame.
Processing frequency atoi
  Called by switch_core_media_read_frame that is normal or hot
Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_core_media_read_frame.
Processing frequency switch_core_codec_ready
  Called by switch_core_media_read_frame that is normal or hot
Considering inline candidate switch_core_media_set_codec.
Not inlining: code size would grow by 487.
Considering inline candidate switch_core_media_set_video_codec.
Not inlining: code size would grow by 268.
Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_core_media_read_frame.
Processing frequency switch_core_codec_ready
  Called by switch_core_media_read_frame that is normal or hot
Inlining switch_core_codec_ready to switch_core_media_read_frame with frequency 1000
Inlining atoi to switch_core_media_read_frame with frequency 1000
Inlining atoi to switch_core_media_read_frame with frequency 1000
Inlining switch_core_codec_ready to switch_core_media_read_frame with frequency 1000
Considering inline candidate switch_core_media_set_codec.
Not inlining: code size would grow by 487.
Considering inline candidate switch_core_media_set_video_codec.
Not inlining: code size would grow by 268.
Iterations: 1
Merging blocks 9 and 121
Removing basic block 35
;; basic block 35, loop depth 0, count 0
;; prev block 34, next block 129
;; pred:      
;; succ:       129 [100.0%]  (fallthru,exec)
<bb 35>:


Removing basic block 38
;; basic block 38, loop depth 0, count 0
;; prev block 37, next block 131
;; pred:      
;; succ:       131 [100.0%]  (fallthru,exec)
<bb 38>:


Merging blocks 63 and 133
Merging blocks 127 and 120
Merging blocks 129 and 128
Merging blocks 131 and 130
Merging blocks 139 and 132


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 1623, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_14 = session_13(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.46128_16 = smh_14->media_flags[0];



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8

Updating SSA information for statement engine_21->read_frame.datalen = 0;

Updating SSA information for statement D.46135_22 = engine_21->read_codec.implementation;



Registering new PHI nodes in block #9



Registering new PHI nodes in block #10

Updating SSA information for statement D.47776_424 = D.46137_23->flags;



Registering new PHI nodes in block #11

Updating SSA information for statement D.47774_426 = D.46137_23->mutex;



Registering new PHI nodes in block #12

Updating SSA information for statement D.47773_427 = D.46137_23->codec_interface;



Registering new PHI nodes in block #13

Updating SSA information for statement D.47772_428 = D.46137_23->implementation;



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement D.47771 = D.47778_430;

Updating SSA information for statement D.46138_24 = D.47771;



Registering new PHI nodes in block #17

Updating SSA information for statement D.46139_25 = engine_21->rtp_session;



Registering new PHI nodes in block #18

Updating SSA information for statement __assert_fail ("engine->rtp_session != ((void *)0)", "src/switch_core_media.c", 1641, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #19

Updating SSA information for statement engine_21->read_frame.datalen = 0;

Updating SSA information for statement D.46144_26 = session_13(D)->channel;

Updating SSA information for statement D.46145_27 = switch_channel_get_state (D.46144_26);



Registering new PHI nodes in block #20

Updating SSA information for statement D.46139_28 = engine_21->rtp_session;

Updating SSA information for statement D.46147_29 = switch_rtp_ready (D.46139_28);



Registering new PHI nodes in block #21

Updating SSA information for statement D.46144_30 = session_13(D)->channel;

Updating SSA information for statement D.46149_31 = switch_channel_test_flag (D.46144_30, 45);



Registering new PHI nodes in block #23

Updating SSA information for statement D.46150_32 = engine_21->read_mutex[type_19(D)];



Registering new PHI nodes in block #24

Updating SSA information for statement D.46150_33 = engine_21->read_mutex[type_19(D)];

Updating SSA information for statement D.46153_34 = switch_mutex_trylock (D.46150_33);



Registering new PHI nodes in block #25

Updating SSA information for statement D.46144_35 = session_13(D)->channel;

Updating SSA information for statement D.46156_36 = switch_channel_get_name (D.46144_35);



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27



Registering new PHI nodes in block #28

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1650, session_13(D), 101, "%s is already being read for %s\n", D.46156_36, iftmp.129_11);



Registering new PHI nodes in block #123

Updating SSA information for statement D.46128_40 = smh_14->media_flags[0];



Registering new PHI nodes in block #124

Updating SSA information for statement D.46262_41 = engine_21->read_frame.datalen;



Registering new PHI nodes in block #29

Updating SSA information for statement engine_21->read_frame.flags = 0;

Updating SSA information for statement D.46139_42 = engine_21->rtp_session;

Updating SSA information for statement status_45 = switch_rtp_zerocopy_read_frame (D.46139_42, D.46161_43, flags_44(D));



Registering new PHI nodes in block #30



Registering new PHI nodes in block #31

Updating SSA information for statement D.46144_49 = session_13(D)->channel;

Updating SSA information for statement D.46169_50 = switch_channel_get_variable_dup (D.46144_49, "execute_on_media_timeout", 1, -1);



Registering new PHI nodes in block #32

Updating SSA information for statement *frame_52(D) = D.46161_51;

Updating SSA information for statement D.46172_53 = *frame_52(D);

Updating SSA information for statement D.46172_54 = *frame_52(D);

Updating SSA information for statement D.46173_55 = D.46172_54->flags;

Updating SSA information for statement D.46172_54->flags = D.46174_56;

Updating SSA information for statement D.46172_57 = *frame_52(D);

Updating SSA information for statement D.46175_58 = engine_21->read_impl.encoded_bytes_per_packet;

Updating SSA information for statement D.46172_57->datalen = D.46175_58;

Updating SSA information for statement D.46172_59 = *frame_52(D);

Updating SSA information for statement D.46176_60 = D.46172_59->data;

Updating SSA information for statement D.46172_61 = *frame_52(D);

Updating SSA information for statement D.46177_62 = D.46172_61->datalen;

Updating SSA information for statement memset (D.46176_60, 0, D.46177_62);

Updating SSA information for statement D.46144_63 = session_13(D)->channel;

Updating SSA information for statement switch_channel_execute_on (D.46144_63, "execute_on_media_timeout");



Registering new PHI nodes in block #33

Updating SSA information for statement D.46144_65 = session_13(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.46144_65, "src/switch_core_media.c", &__func__, 1674, 604);



Registering new PHI nodes in block #34

Updating SSA information for statement D.46178_66 = engine_21->reset_codec;



Registering new PHI nodes in block #35

Updating SSA information for statement engine_21->reset_codec = 0;

Updating SSA information for statement D.46139_69 = engine_21->rtp_session;

Updating SSA information for statement D.46181_70 = switch_rtp_ready (D.46139_69);



Registering new PHI nodes in block #36



Registering new PHI nodes in block #37

Updating SSA information for statement switch_core_media_set_video_codec (session_13(D), 1);



Registering new PHI nodes in block #38

Updating SSA information for statement D.46187_71 = switch_core_media_set_codec (session_13(D), 1, 0);



Registering new PHI nodes in block #39

Updating SSA information for statement *frame_52(D) = 0B;



Registering new PHI nodes in block #40

Updating SSA information for statement D.46144_73 = session_13(D)->channel;

Updating SSA information for statement val_74 = switch_channel_get_variable_dup (D.46144_73, "rtp_timeout_sec", 1, -1);



Registering new PHI nodes in block #41

Updating SSA information for statement D.47781_431 = strtol (val_74, 0B, 10);

Updating SSA information for statement D.47780 = D.47781_431;

Updating SSA information for statement v_75 = D.47780;



Registering new PHI nodes in block #42



Registering new PHI nodes in block #43

Updating SSA information for statement D.46144_77 = session_13(D)->channel;

Updating SSA information for statement val_78 = switch_channel_get_variable_dup (D.46144_77, "rtp_hold_timeout_sec", 1, -1);



Registering new PHI nodes in block #44

Updating SSA information for statement D.47784_432 = strtol (val_78, 0B, 10);

Updating SSA information for statement D.47783 = D.47784_432;

Updating SSA information for statement v_79 = D.47783;



Registering new PHI nodes in block #45



Registering new PHI nodes in block #46



Registering new PHI nodes in block #47

Updating SSA information for statement D.46200_81 = engine_21->read_impl.samples_per_second;

Updating SSA information for statement D.46203_84 = engine_21->read_impl.samples_per_packet;

Updating SSA information for statement engine_21->max_missed_packets = D.46204_85;

Updating SSA information for statement D.46139_86 = engine_21->rtp_session;

Updating SSA information for statement D.46205_87 = engine_21->max_missed_packets;

Updating SSA information for statement switch_rtp_set_max_missed_packets (D.46139_86, D.46205_87);



Registering new PHI nodes in block #48



Registering new PHI nodes in block #49



Registering new PHI nodes in block #50

Updating SSA information for statement D.46200_89 = engine_21->read_impl.samples_per_second;

Updating SSA information for statement D.46203_92 = engine_21->read_impl.samples_per_packet;

Updating SSA information for statement engine_21->max_missed_hold_packets = D.46212_93;



Registering new PHI nodes in block #51

Updating SSA information for statement engine_21->check_frames = 0;

Updating SSA information for statement engine_21->last_ts = 0;



Registering new PHI nodes in block #52



Registering new PHI nodes in block #53

Updating SSA information for statement *frame_52(D) = D.46161_95;

Updating SSA information for statement D.46172_96 = *frame_52(D);

Updating SSA information for statement D.46172_97 = *frame_52(D);

Updating SSA information for statement D.46173_98 = D.46172_97->flags;

Updating SSA information for statement D.46172_97->flags = D.46174_99;

Updating SSA information for statement D.46172_100 = *frame_52(D);

Updating SSA information for statement D.46175_101 = engine_21->read_impl.encoded_bytes_per_packet;

Updating SSA information for statement D.46172_100->datalen = D.46175_101;

Updating SSA information for statement D.46172_102 = *frame_52(D);

Updating SSA information for statement D.46176_103 = D.46172_102->data;

Updating SSA information for statement D.46172_104 = *frame_52(D);

Updating SSA information for statement D.46177_105 = D.46172_104->datalen;

Updating SSA information for statement memset (D.46176_103, 0, D.46177_105);



Registering new PHI nodes in block #54

Updating SSA information for statement D.46139_107 = engine_21->rtp_session;

Updating SSA information for statement D.46215_108 = switch_rtcp_zerocopy_read_frame (D.46139_107, &rtcp_frame);



Registering new PHI nodes in block #55

Updating SSA information for statement D.46218_109 = switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 1747, &event, 71, 0B);



Registering new PHI nodes in block #56

Updating SSA information for statement uuid_110 = switch_core_session_get_uuid (session_13(D));



Registering new PHI nodes in block #57

Updating SSA information for statement event.132_111 = event;

Updating SSA information for statement D.46224_112 = switch_core_session_get_uuid (session_13(D));

Updating SSA information for statement switch_event_add_header_string (event.132_111, 1, "Unique-ID", D.46224_112);



Registering new PHI nodes in block #58

Updating SSA information for statement D.46226_114 = rtcp_frame.ssrc;

Updating SSA information for statement snprintf (&value, 30, D.46225_113, D.46226_114);

Updating SSA information for statement event.132_115 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_115, 1, "SSRC", &value);

Updating SSA information for statement D.46228_117 = rtcp_frame.ntp_msw;

Updating SSA information for statement snprintf (&value, 30, D.46227_116, D.46228_117);

Updating SSA information for statement event.132_118 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_118, 1, "NTP-Most-Significant-Word", &value);

Updating SSA information for statement D.46229_120 = rtcp_frame.ntp_lsw;

Updating SSA information for statement snprintf (&value, 30, D.46227_119, D.46229_120);

Updating SSA information for statement event.132_121 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_121, 1, "NTP-Least-Significant-Word", &value);

Updating SSA information for statement D.46230_123 = rtcp_frame.timestamp;

Updating SSA information for statement snprintf (&value, 30, D.46227_122, D.46230_123);

Updating SSA information for statement event.132_124 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_124, 1, "RTP-Timestamp", &value);

Updating SSA information for statement D.46231_126 = rtcp_frame.packet_count;

Updating SSA information for statement snprintf (&value, 30, D.46227_125, D.46231_126);

Updating SSA information for statement event.132_127 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_127, 1, "Sender-Packet-Count", &value);

Updating SSA information for statement D.46232_129 = rtcp_frame.octect_count;

Updating SSA information for statement snprintf (&value, 30, D.46227_128, D.46232_129);

Updating SSA information for statement event.132_130 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_130, 1, "Octect-Packet-Count", &value);

Updating SSA information for statement D.46234_132 = engine_21->read_frame.timestamp;

Updating SSA information for statement snprintf (&value, 30, D.46233_131, D.46234_132);

Updating SSA information for statement event.132_133 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_133, 1, "Last-RTP-Timestamp", &value);

Updating SSA information for statement D.46235_135 = engine_21->read_frame.rate;

Updating SSA information for statement snprintf (&value, 30, D.46227_134, D.46235_135);

Updating SSA information for statement event.132_136 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_136, 1, "RTP-Rate", &value);

Updating SSA information for statement D.46237_138 = switch_time_now ();

Updating SSA information for statement snprintf (&value, 30, D.46236_137, D.46237_138);

Updating SSA information for statement event.132_139 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_139, 1, "Capture-Time", &value);



Registering new PHI nodes in block #60

Updating SSA information for statement D.46253_141 = rtcp_frame.report_count;



Registering new PHI nodes in block #59

Updating SSA information for statement snprintf (&header, 50, D.46238_143, i_7);

Updating SSA information for statement D.46239_145 = rtcp_frame.reports[i_7].ssrc;

Updating SSA information for statement snprintf (&value, 30, D.46225_144, D.46239_145);

Updating SSA information for statement event.132_146 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_146, 1, &header, &value);

Updating SSA information for statement snprintf (&header, 50, D.46240_147, i_7);

Updating SSA information for statement D.46241_149 = rtcp_frame.reports[i_7].fraction;

Updating SSA information for statement snprintf (&value, 30, D.46227_148, D.46242_150);

Updating SSA information for statement event.132_151 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_151, 1, &header, &value);

Updating SSA information for statement snprintf (&header, 50, D.46243_152, i_7);

Updating SSA information for statement D.46244_154 = rtcp_frame.reports[i_7].lost;

Updating SSA information for statement snprintf (&value, 30, D.46227_153, D.46244_154);

Updating SSA information for statement event.132_155 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_155, 1, &header, &value);

Updating SSA information for statement snprintf (&header, 50, D.46245_156, i_7);

Updating SSA information for statement D.46246_158 = rtcp_frame.reports[i_7].highest_sequence_number_received;

Updating SSA information for statement snprintf (&value, 30, D.46227_157, D.46246_158);

Updating SSA information for statement event.132_159 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_159, 1, &header, &value);

Updating SSA information for statement snprintf (&header, 50, D.46247_160, i_7);

Updating SSA information for statement D.46248_162 = rtcp_frame.reports[i_7].jitter;

Updating SSA information for statement snprintf (&value, 30, D.46227_161, D.46248_162);

Updating SSA information for statement event.132_163 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_163, 1, &header, &value);

Updating SSA information for statement snprintf (&header, 50, D.46249_164, i_7);

Updating SSA information for statement D.46250_166 = rtcp_frame.reports[i_7].lsr;

Updating SSA information for statement snprintf (&value, 30, D.46227_165, D.46250_166);

Updating SSA information for statement event.132_167 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_167, 1, &header, &value);

Updating SSA information for statement snprintf (&header, 50, D.46251_168, i_7);

Updating SSA information for statement D.46252_170 = rtcp_frame.reports[i_7].dlsr;

Updating SSA information for statement snprintf (&value, 30, D.46227_169, D.46252_170);

Updating SSA information for statement event.132_171 = event;

Updating SSA information for statement switch_event_add_header_string (event.132_171, 1, &header, &value);



Registering new PHI nodes in block #61

Updating SSA information for statement switch_event_fire_detailed ("src/switch_core_media.c", &__func__, 1809, &event, 0B);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1810, session_13(D), 110, "Dispatched RTCP event\n");



Registering new PHI nodes in block #62

Updating SSA information for statement D.46255_173 = engine_21->read_frame.flags;



Registering new PHI nodes in block #63

Updating SSA information for statement *frame_52(D) = D.46161_175;



Registering new PHI nodes in block #64

Updating SSA information for statement D.46139_177 = engine_21->rtp_session;

Updating SSA information for statement D.46259_178 = switch_rtp_has_dtmf (D.46139_177);



Registering new PHI nodes in block #65

Updating SSA information for statement dtmf = {};

Updating SSA information for statement D.46139_179 = engine_21->rtp_session;

Updating SSA information for statement switch_rtp_dequeue_dtmf (D.46139_179, &dtmf);

Updating SSA information for statement D.46144_180 = session_13(D)->channel;

Updating SSA information for statement switch_channel_queue_dtmf (D.46144_180, &dtmf);



Registering new PHI nodes in block #66

Updating SSA information for statement D.46262_181 = engine_21->read_frame.datalen;



Registering new PHI nodes in block #67

Updating SSA information for statement D.46255_184 = engine_21->read_frame.flags;



Registering new PHI nodes in block #68

Updating SSA information for statement D.46135_186 = engine_21->read_codec.implementation;



Registering new PHI nodes in block #69



Registering new PHI nodes in block #70

Updating SSA information for statement D.47791_433 = D.46137_187->flags;



Registering new PHI nodes in block #71

Updating SSA information for statement D.47789_435 = D.46137_187->mutex;



Registering new PHI nodes in block #72

Updating SSA information for statement D.47788_436 = D.46137_187->codec_interface;



Registering new PHI nodes in block #73

Updating SSA information for statement D.47787_437 = D.46137_187->implementation;



Registering new PHI nodes in block #74



Registering new PHI nodes in block #75

Updating SSA information for statement D.47786 = D.47793_439;

Updating SSA information for statement D.46271_188 = D.47786;



Registering new PHI nodes in block #77

Updating SSA information for statement D.46272_189 = smh_14->media_flags[2];



Registering new PHI nodes in block #78

Updating SSA information for statement D.46275_190 = engine_21->check_frames;



Registering new PHI nodes in block #79

Updating SSA information for statement D.46275_191 = engine_21->check_frames;

Updating SSA information for statement engine_21->check_frames = D.46278_192;

Updating SSA information for statement D.46175_193 = engine_21->read_impl.encoded_bytes_per_packet;



Registering new PHI nodes in block #80

Updating SSA information for statement engine_21->check_frames = 50;



Registering new PHI nodes in block #81

Updating SSA information for statement D.46272_194 = smh_14->media_flags[2];



Registering new PHI nodes in block #82

Updating SSA information for statement D.46262_195 = engine_21->read_frame.datalen;



Registering new PHI nodes in block #83

Updating SSA information for statement D.46288_197 = engine_21->last_ts;



Registering new PHI nodes in block #84

Updating SSA information for statement D.46262_198 = engine_21->read_frame.datalen;

Updating SSA information for statement D.46175_199 = engine_21->read_impl.encoded_bytes_per_packet;



Registering new PHI nodes in block #85

Updating SSA information for statement D.46234_200 = engine_21->read_frame.timestamp;

Updating SSA information for statement D.46288_201 = engine_21->last_ts;

Updating SSA information for statement D.46200_203 = engine_21->read_impl.samples_per_second;



Registering new PHI nodes in block #86

Updating SSA information for statement D.46203_207 = engine_21->read_impl.samples_per_packet;



Registering new PHI nodes in block #88

Updating SSA information for statement D.46298_209 = engine_21->last_codec_ms;



Registering new PHI nodes in block #89

Updating SSA information for statement D.46298_210 = engine_21->last_codec_ms;



Registering new PHI nodes in block #90

Updating SSA information for statement D.46303_211 = engine_21->mismatch_count;

Updating SSA information for statement engine_21->mismatch_count = D.46304_212;



Registering new PHI nodes in block #91

Updating SSA information for statement engine_21->last_codec_ms = codec_ms_205;

Updating SSA information for statement D.46303_213 = engine_21->mismatch_count;



Registering new PHI nodes in block #92

Updating SSA information for statement D.46307_214 = engine_21->cur_payload_map;

Updating SSA information for statement D.46308_215 = D.46307_214->codec_ms;



Registering new PHI nodes in block #93



Registering new PHI nodes in block #94

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1871, session_13(D), 4, "Your phone is trying to send timestamps that suggest an increment of %dms per packet\nThat seems hard to believe so I am going to go on ahead and um ignore that, mmkay?\n", codec_ms.133_216);

Updating SSA information for statement engine_21->check_frames = 50;



Registering new PHI nodes in block #95

Updating SSA information for statement engine_21->read_frame.datalen = 0;

Updating SSA information for statement D.46307_217 = engine_21->cur_payload_map;

Updating SSA information for statement D.46308_218 = D.46307_217->codec_ms;



Registering new PHI nodes in block #96

Updating SSA information for statement D.46307_219 = engine_21->cur_payload_map;

Updating SSA information for statement D.46308_220 = D.46307_219->codec_ms;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1882, session_13(D), 4, "Asynchronous PTIME not supported, changing our end from %d to %d\n", D.46316_221, codec_ms.133_222);

Updating SSA information for statement D.46144_223 = session_13(D)->channel;

Updating SSA information for statement D.46307_224 = engine_21->cur_payload_map;

Updating SSA information for statement D.46308_225 = D.46307_224->codec_ms;

Updating SSA information for statement switch_channel_set_variable_printf (D.46144_223, "rtp_h_X-Broken-PTIME", "Adv=%d;Sent=%d", D.46316_226, codec_ms.133_227);

Updating SSA information for statement D.46307_228 = engine_21->cur_payload_map;

Updating SSA information for statement D.46307_228->codec_ms = codec_ms_205;

Updating SSA information for statement engine_21->reset_codec = 2;



Registering new PHI nodes in block #87

Updating SSA information for statement engine_21->last_ts = 0;



Registering new PHI nodes in block #97

Updating SSA information for statement engine_21->mismatch_count = 0;



Registering new PHI nodes in block #98

Updating SSA information for statement D.46234_229 = engine_21->read_frame.timestamp;

Updating SSA information for statement engine_21->last_ts = D.46234_229;



Registering new PHI nodes in block #99

Updating SSA information for statement engine_21->mismatch_count = 0;

Updating SSA information for statement engine_21->last_ts = 0;



Registering new PHI nodes in block #100

Updating SSA information for statement D.46178_230 = engine_21->reset_codec;



Registering new PHI nodes in block #101

Updating SSA information for statement D.46323_231 = engine_21->codec_negotiated;



Registering new PHI nodes in block #102

Updating SSA information for statement D.46326_232 = smh_14->mparams;

Updating SSA information for statement D.46327_233 = D.46326_232->cng_pt;



Registering new PHI nodes in block #103

Updating SSA information for statement D.46329_234 = engine_21->read_frame.payload;

Updating SSA information for statement D.46326_235 = smh_14->mparams;

Updating SSA information for statement D.46327_236 = D.46326_235->cng_pt;



Registering new PHI nodes in block #104

Updating SSA information for statement D.46326_237 = smh_14->mparams;

Updating SSA information for statement D.46330_238 = D.46326_237->recv_te;



Registering new PHI nodes in block #105

Updating SSA information for statement D.46329_239 = engine_21->read_frame.payload;

Updating SSA information for statement D.46326_240 = smh_14->mparams;

Updating SSA information for statement D.46330_241 = D.46326_240->recv_te;



Registering new PHI nodes in block #106

Updating SSA information for statement D.46326_242 = smh_14->mparams;

Updating SSA information for statement D.46332_243 = D.46326_242->te;



Registering new PHI nodes in block #107

Updating SSA information for statement D.46329_244 = engine_21->read_frame.payload;

Updating SSA information for statement D.46326_245 = smh_14->mparams;

Updating SSA information for statement D.46332_246 = D.46326_245->te;



Registering new PHI nodes in block #108

Updating SSA information for statement D.46329_247 = engine_21->read_frame.payload;

Updating SSA information for statement D.46307_248 = engine_21->cur_payload_map;

Updating SSA information for statement D.46334_249 = D.46307_248->recv_pt;



Registering new PHI nodes in block #109

Updating SSA information for statement D.46329_250 = engine_21->read_frame.payload;

Updating SSA information for statement D.46307_251 = engine_21->cur_payload_map;

Updating SSA information for statement D.46337_252 = D.46307_251->agreed_pt;



Registering new PHI nodes in block #110

Updating SSA information for statement D.46329_253 = engine_21->read_frame.payload;

Updating SSA information for statement D.46307_254 = engine_21->cur_payload_map;

Updating SSA information for statement D.46340_255 = D.46307_254->pt;



Registering new PHI nodes in block #111

Updating SSA information for statement D.46329_256 = engine_21->read_frame.payload;

Updating SSA information for statement D.46307_258 = engine_21->cur_payload_map;

Updating SSA information for statement D.46337_259 = D.46307_258->agreed_pt;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1926, session_13(D), 7, "alternate payload received (received %d, expecting %d)\n", D.46343_257, D.46344_260);

Updating SSA information for statement D.46345_261 = smh_14->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.46345_261);

Updating SSA information for statement pmap_262 = engine_21->payload_map;



Registering new PHI nodes in block #116



Registering new PHI nodes in block #112

Updating SSA information for statement D.46329_263 = engine_21->read_frame.payload;

Updating SSA information for statement D.46346_264 = pmap_9->recv_pt;



Registering new PHI nodes in block #113

Updating SSA information for statement D.46349_265 = pmap_9->negotiated;



Registering new PHI nodes in block #114

Updating SSA information for statement engine_21->cur_payload_map = pmap_9;

Updating SSA information for statement D.46307_266 = engine_21->cur_payload_map;

Updating SSA information for statement D.46307_266->current = 1;

Updating SSA information for statement D.46352_267 = pmap_9->iananame;

Updating SSA information for statement D.46353_268 = pmap_9->pt;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1937, session_13(D), 4, "Changing current codec to %s (payload type %d).\n", D.46352_267, D.46354_269);

Updating SSA information for statement engine_21->reset_codec = 1;



Registering new PHI nodes in block #115

Updating SSA information for statement pmap_270 = pmap_9->next;



Registering new PHI nodes in block #117

Updating SSA information for statement D.46345_271 = smh_14->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.46345_271);

Updating SSA information for statement D.46178_272 = engine_21->reset_codec;



Registering new PHI nodes in block #118

Updating SSA information for statement D.46329_273 = engine_21->read_frame.payload;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 1949, session_13(D), 4, "Could not change to payload type %d, ignoring...\n", D.46343_274);



Registering new PHI nodes in block #119

Updating SSA information for statement bytes_275 = engine_21->read_impl.encoded_bytes_per_packet;



Registering new PHI nodes in block #120

Updating SSA information for statement D.46262_276 = engine_21->read_frame.datalen;



Registering new PHI nodes in block #121

Updating SSA information for statement D.46203_279 = engine_21->read_impl.samples_per_packet;

Updating SSA information for statement engine_21->read_frame.samples = D.46361_281;

Updating SSA information for statement D.46262_282 = engine_21->read_frame.datalen;



Registering new PHI nodes in block #122



Registering new PHI nodes in block #76

Updating SSA information for statement *frame_52(D) = 0B;



Registering new PHI nodes in block #125

Updating SSA information for statement D.46262_284 = engine_21->read_frame.datalen;



Registering new PHI nodes in block #126

Updating SSA information for statement *frame_52(D) = 0B;



Registering new PHI nodes in block #127

Updating SSA information for statement *frame_52(D) = D.46161_285;



Registering new PHI nodes in block #128

Updating SSA information for statement D.46150_287 = engine_21->read_mutex[type_19(D)];



Registering new PHI nodes in block #129

Updating SSA information for statement D.46150_288 = engine_21->read_mutex[type_19(D)];

Updating SSA information for statement switch_mutex_unlock (D.46150_288);



Registering new PHI nodes in block #130



Registering new PHI nodes in block #22



Registering new PHI nodes in block #16



Registering new PHI nodes in block #131



Symbols to be put in SSA form

{ .MEM D.47771 D.47780 D.47783 D.47786 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 132
Number of blocks to update: 131 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtcp_frame_t rtcp_frame;
  struct switch_rtp_engine_t * engine;
  switch_status_t status;
  struct switch_media_handle_t * smh;
  int do_cng;
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_read_frame";
  static const char __func__[29] = "switch_core_media_read_frame";
  void end = <<< error >>>; (unused)
  void skip = <<< error >>>; (unused)

  { Scope block #153 src/switch_core_media.c:1637 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
    struct switch_codec_t * codec; (unused)

    { Scope block #154 Originating from :#0 

    }

  }

  { Scope block #155 
    const char * val;
    int rtp_timeout_sec;
    int rtp_hold_timeout_sec;

    { Scope block #156 
      int v;

      { Scope block #157 src/switch_core_media.c:1698 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #158 Originating from :#0 

        }

      }

    }

    { Scope block #159 
      int v;

      { Scope block #160 src/switch_core_media.c:1705 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #161 Originating from :#0 

        }

      }

    }

  }

  { Scope block #162 
    struct switch_event_t * event;

    { Scope block #163 
      char value[30];
      char header[50];
      int i;
      char * uuid;

    }

  }

  { Scope block #164 
    struct switch_dtmf_t dtmf;

  }

  { Scope block #165 
    uint32_t bytes;
    int frames;

    { Scope block #166 src/switch_core_media.c:1832 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
      struct switch_codec_t * codec; (unused)

      { Scope block #167 Originating from :#0 

      }

    }

    { Scope block #168 
      uint32_t codec_ms;

    }

    { Scope block #169 
      struct payload_map_t * pmap;

    }

  }

}
switch_core_media_read_frame (struct switch_core_session_t * session, struct switch_frame_t * * frame, switch_io_flag_t flags, int stream_id, switch_media_type_t type)
{
  switch_bool_t D.47793;
  int iftmp.104;
  uint32_t D.47791;
  uint32_t D.47790;
  struct switch_mutex_t * D.47789;
  struct switch_codec_interface_t * D.47788;
  const struct switch_codec_implementation_t * D.47787;
  switch_bool_t D.47786;
  int D.47784;
  int D.47783;
  int D.47781;
  int D.47780;
  switch_bool_t D.47778;
  int iftmp.104;
  uint32_t D.47776;
  uint32_t D.47775;
  struct switch_mutex_t * D.47774;
  struct switch_codec_interface_t * D.47773;
  const struct switch_codec_implementation_t * D.47772;
  switch_bool_t D.47771;
  struct payload_map_t * pmap;
  uint32_t codec_ms;
  int frames;
  uint32_t bytes;
  struct switch_dtmf_t dtmf;
  char * uuid;
  int i;
  char header[50];
  char value[30];
  struct switch_event_t * event;
  int v;
  int v;
  int rtp_hold_timeout_sec;
  int rtp_timeout_sec;
  const char * val;
  static const char __func__[29] = "switch_core_media_read_frame";
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_read_frame";
  int do_cng;
  struct switch_media_handle_t * smh;
  switch_status_t status;
  struct switch_rtp_engine_t * engine;
  struct switch_rtcp_frame_t rtcp_frame;
  uint32_t D.46361;
  uint32_t frames.134;
  uint32_t D.46359;
  int D.46354;
  switch_payload_t D.46353;
  char * D.46352;
  uint8_t D.46349;
  switch_payload_t D.46346;
  struct switch_mutex_t * D.46345;
  int D.46344;
  int D.46343;
  switch_payload_t D.46340;
  switch_payload_t D.46337;
  switch_payload_t D.46334;
  switch_payload_t D.46332;
  switch_payload_t D.46330;
  switch_payload_t D.46329;
  switch_payload_t D.46327;
  struct switch_core_media_params_t * D.46326;
  uint8_t D.46323;
  int D.46316;
  int codec_ms.133;
  uint32_t D.46308;
  struct payload_map_t * D.46307;
  uint32_t D.46304;
  uint32_t D.46303;
  uint32_t D.46298;
  uint32_t D.46297;
  uint32_t D.46295;
  uint32_t D.46292;
  switch_size_t D.46291;
  switch_size_t D.46288;
  uint32_t D.46284;
  uint32_t D.46278;
  uint32_t D.46275;
  switch_core_media_flag_t D.46272;
  switch_bool_t D.46271;
  switch_frame_flag_t D.46265;
  uint32_t D.46262;
  switch_size_t D.46259;
  switch_frame_flag_t D.46256;
  switch_frame_flag_t D.46255;
  int D.46254;
  uint16_t D.46253;
  uint32_t D.46252;
  const char * restrict D.46251;
  uint32_t D.46250;
  const char * restrict D.46249;
  uint32_t D.46248;
  const char * restrict D.46247;
  uint32_t D.46246;
  const char * restrict D.46245;
  uint32_t D.46244;
  const char * restrict D.46243;
  int D.46242;
  uint8_t D.46241;
  const char * restrict D.46240;
  uint32_t D.46239;
  const char * restrict D.46238;
  switch_time_t D.46237;
  const char * restrict D.46236;
  uint32_t D.46235;
  switch_size_t D.46234;
  const char * restrict D.46233;
  uint32_t D.46232;
  uint32_t D.46231;
  uint32_t D.46230;
  uint32_t D.46229;
  uint32_t D.46228;
  const char * restrict D.46227;
  uint32_t D.46226;
  const char * restrict D.46225;
  char * D.46224;
  struct switch_event_t * event.132;
  switch_status_t D.46218;
  switch_status_t D.46215;
  uint32_t D.46212;
  uint32_t D.46211;
  uint32_t rtp_hold_timeout_sec.131;
  uint32_t D.46205;
  uint32_t D.46204;
  uint32_t D.46203;
  uint32_t D.46202;
  uint32_t rtp_timeout_sec.130;
  uint32_t D.46200;
  switch_status_t D.46187;
  uint8_t D.46181;
  uint8_t D.46178;
  uint32_t D.46177;
  void * D.46176;
  uint32_t D.46175;
  switch_frame_flag_t D.46174;
  switch_frame_flag_t D.46173;
  struct switch_frame_t * D.46172;
  const char * D.46169;
  _Bool D.46164;
  _Bool D.46163;
  _Bool D.46162;
  struct switch_frame_t * D.46161;
  char * iftmp.129;
  char * D.46156;
  switch_status_t D.46153;
  struct switch_mutex_t * D.46150;
  uint32_t D.46149;
  uint8_t D.46147;
  switch_channel_state_t D.46145;
  struct switch_channel_t * D.46144;
  struct switch_rtp_t * D.46139;
  switch_bool_t D.46138;
  struct switch_codec_t * D.46137;
  const struct switch_codec_implementation_t * D.46135;
  unsigned int D.46132;
  struct switch_rtp_engine_t[2] * D.46131;
  switch_core_media_flag_t D.46128;
  switch_status_t D.46127;

<bb 2>:
  do_cng_12 = 0;
  # DEBUG do_cng => do_cng_12
  if (session_13(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 1623, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_14 = session_13(D)->media_handle;
  # DEBUG smh => smh_14
  if (smh_14 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.46127_15 = 1;
  goto <bb 131>;

<bb 6>:
  D.46128_16 = smh_14->media_flags[0];
  if (D.46128_16 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.46127_17 = 1;
  goto <bb 131>;

<bb 8>:
  D.46131_18 = &smh_14->engines;
  D.46132_20 = type_19(D) * 11416;
  engine_21 = D.46131_18 + D.46132_20;
  # DEBUG engine => engine_21
  engine_21->read_frame.datalen = 0;
  D.46135_22 = engine_21->read_codec.implementation;
  if (D.46135_22 == 0B)
    goto <bb 16>;
  else
    goto <bb 9>;

<bb 9>:
  D.46137_23 = &engine_21->read_codec;
  # DEBUG codec => D.46137_23
  if (D.46137_23 != 0B)
    goto <bb 10>;
  else
    goto <bb 14>;

<bb 10>:
  D.47776_424 = D.46137_23->flags;
  D.47775_425 = D.47776_424 & 256;
  if (D.47775_425 != 0)
    goto <bb 11>;
  else
    goto <bb 14>;

<bb 11>:
  D.47774_426 = D.46137_23->mutex;
  if (D.47774_426 != 0B)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 12>:
  D.47773_427 = D.46137_23->codec_interface;
  if (D.47773_427 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.47772_428 = D.46137_23->implementation;
  if (D.47772_428 != 0B)
    goto <bb 15>;
  else
    goto <bb 14>;

<bb 14>:

<bb 15>:
  # iftmp.104_429 = PHI <1(13), 0(14)>
  D.47778_430 = (switch_bool_t) iftmp.104_429;
  D.47771_442 = D.47778_430;
  D.46138_24 = D.47771_442;
  if (D.46138_24 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.46127_291 = 1;
  goto <bb 131>;

<bb 17>:
  D.46139_25 = engine_21->rtp_session;
  if (D.46139_25 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  __assert_fail ("engine->rtp_session != ((void *)0)", "src/switch_core_media.c", 1641, &__PRETTY_FUNCTION__);

<bb 19>:
  engine_21->read_frame.datalen = 0;
  D.46144_26 = session_13(D)->channel;
  D.46145_27 = switch_channel_get_state (D.46144_26);
  if (D.46145_27 > 9)
    goto <bb 22>;
  else
    goto <bb 20>;

<bb 20>:
  D.46139_28 = engine_21->rtp_session;
  D.46147_29 = switch_rtp_ready (D.46139_28);
  if (D.46147_29 == 0)
    goto <bb 22>;
  else
    goto <bb 21>;

<bb 21>:
  D.46144_30 = session_13(D)->channel;
  D.46149_31 = switch_channel_test_flag (D.46144_30, 45);
  if (D.46149_31 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.46127_290 = 1;
  goto <bb 131>;

<bb 23>:
  D.46150_32 = engine_21->read_mutex[type_19(D)];
  if (D.46150_32 != 0B)
    goto <bb 24>;
  else
    goto <bb 123>;

<bb 24>:
  D.46150_33 = engine_21->read_mutex[type_19(D)];
  D.46153_34 = switch_mutex_trylock (D.46150_33);
  if (D.46153_34 != 0)
    goto <bb 25>;
  else
    goto <bb 123>;

<bb 25>:
  D.46144_35 = session_13(D)->channel;
  D.46156_36 = switch_channel_get_name (D.46144_35);
  if (type_19(D) == 1)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  iftmp.129_37 = "video";
  goto <bb 28>;

<bb 27>:
  iftmp.129_38 = "audio";

<bb 28>:
  # iftmp.129_11 = PHI <iftmp.129_37(26), iftmp.129_38(27)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1650, session_13(D), 101, "%s is already being read for %s\n", D.46156_36, iftmp.129_11);
  D.46127_39 = 10;
  goto <bb 131>;

<bb 29>:
  engine_21->read_frame.flags = 0;
  D.46139_42 = engine_21->rtp_session;
  D.46161_43 = &engine_21->read_frame;
  status_45 = switch_rtp_zerocopy_read_frame (D.46139_42, D.46161_43, flags_44(D));
  # DEBUG status => status_45
  D.46162_46 = status_45 != 0;
  D.46163_47 = status_45 != 11;
  D.46164_48 = D.46162_46 && D.46163_47;
  if (D.46164_48 != 0)
    goto <bb 30>;
  else
    goto <bb 34>;

<bb 30>:
  if (status_45 == 2)
    goto <bb 31>;
  else
    goto <bb 128> (end);

<bb 31>:
  D.46144_49 = session_13(D)->channel;
  D.46169_50 = switch_channel_get_variable_dup (D.46144_49, "execute_on_media_timeout", 1, -1);
  if (D.46169_50 != 0B)
    goto <bb 32>;
  else
    goto <bb 33>;

<bb 32>:
  D.46161_51 = &engine_21->read_frame;
  *frame_52(D) = D.46161_51;
  D.46172_53 = *frame_52(D);
  D.46172_54 = *frame_52(D);
  D.46173_55 = D.46172_54->flags;
  D.46174_56 = D.46173_55 | 1;
  D.46172_54->flags = D.46174_56;
  D.46172_57 = *frame_52(D);
  D.46175_58 = engine_21->read_impl.encoded_bytes_per_packet;
  D.46172_57->datalen = D.46175_58;
  D.46172_59 = *frame_52(D);
  D.46176_60 = D.46172_59->data;
  D.46172_61 = *frame_52(D);
  D.46177_62 = D.46172_61->datalen;
  memset (D.46176_60, 0, D.46177_62);
  D.46144_63 = session_13(D)->channel;
  switch_channel_execute_on (D.46144_63, "execute_on_media_timeout");
  status_64 = 0;
  # DEBUG status => status_64
  goto <bb 128> (end);

<bb 33>:
  D.46144_65 = session_13(D)->channel;
  switch_channel_perform_hangup (D.46144_65, "src/switch_core_media.c", &__func__, 1674, 604);
  goto <bb 128> (end);

<bb 34>:
  D.46178_66 = engine_21->reset_codec;
  if (D.46178_66 != 0)
    goto <bb 35>;
  else
    goto <bb 52>;

<bb 35>:
  rtp_timeout_sec_67 = 0;
  # DEBUG rtp_timeout_sec => rtp_timeout_sec_67
  rtp_hold_timeout_sec_68 = 0;
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_68
  engine_21->reset_codec = 0;
  D.46139_69 = engine_21->rtp_session;
  D.46181_70 = switch_rtp_ready (D.46139_69);
  if (D.46181_70 != 0)
    goto <bb 36>;
  else
    goto <bb 51>;

<bb 36>:
  if (type_19(D) == 1)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  switch_core_media_set_video_codec (session_13(D), 1);
  goto <bb 40>;

<bb 38>:
  D.46187_71 = switch_core_media_set_codec (session_13(D), 1, 0);
  if (D.46187_71 != 0)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  *frame_52(D) = 0B;
  status_72 = 9;
  # DEBUG status => status_72
  goto <bb 128> (end);

<bb 40>:
  D.46144_73 = session_13(D)->channel;
  val_74 = switch_channel_get_variable_dup (D.46144_73, "rtp_timeout_sec", 1, -1);
  # DEBUG val => val_74
  if (val_74 != 0B)
    goto <bb 41>;
  else
    goto <bb 43>;

<bb 41>:
  # DEBUG __nptr => val_74
  D.47781_431 = strtol (val_74, 0B, 10);
  D.47780_444 = D.47781_431;
  v_75 = D.47780_444;
  # DEBUG v => NULL
  if (v_75 >= 0)
    goto <bb 42>;
  else
    goto <bb 43>;

<bb 42>:
  rtp_timeout_sec_76 = v_75;
  # DEBUG rtp_timeout_sec => rtp_timeout_sec_76

<bb 43>:
  # rtp_timeout_sec_4 = PHI <rtp_timeout_sec_67(40), rtp_timeout_sec_67(41), rtp_timeout_sec_76(42)>
  # DEBUG rtp_timeout_sec => rtp_timeout_sec_4
  D.46144_77 = session_13(D)->channel;
  val_78 = switch_channel_get_variable_dup (D.46144_77, "rtp_hold_timeout_sec", 1, -1);
  # DEBUG val => val_78
  if (val_78 != 0B)
    goto <bb 44>;
  else
    goto <bb 46>;

<bb 44>:
  # DEBUG __nptr => val_78
  D.47784_432 = strtol (val_78, 0B, 10);
  D.47783_446 = D.47784_432;
  v_79 = D.47783_446;
  # DEBUG v => NULL
  if (v_79 >= 0)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  rtp_hold_timeout_sec_80 = v_79;
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_80

<bb 46>:
  # rtp_hold_timeout_sec_5 = PHI <rtp_hold_timeout_sec_68(43), rtp_hold_timeout_sec_68(44), rtp_hold_timeout_sec_80(45)>
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_5
  if (rtp_timeout_sec_4 != 0)
    goto <bb 47>;
  else
    goto <bb 49>;

<bb 47>:
  D.46200_81 = engine_21->read_impl.samples_per_second;
  rtp_timeout_sec.130_82 = (uint32_t) rtp_timeout_sec_4;
  D.46202_83 = D.46200_81 * rtp_timeout_sec.130_82;
  D.46203_84 = engine_21->read_impl.samples_per_packet;
  D.46204_85 = D.46202_83 / D.46203_84;
  engine_21->max_missed_packets = D.46204_85;
  D.46139_86 = engine_21->rtp_session;
  D.46205_87 = engine_21->max_missed_packets;
  switch_rtp_set_max_missed_packets (D.46139_86, D.46205_87);
  if (rtp_hold_timeout_sec_5 == 0)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  rtp_hold_timeout_sec_88 = rtp_timeout_sec_4 * 10;
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_88

<bb 49>:
  # rtp_hold_timeout_sec_6 = PHI <rtp_hold_timeout_sec_5(46), rtp_hold_timeout_sec_5(47), rtp_hold_timeout_sec_88(48)>
  # DEBUG rtp_hold_timeout_sec => rtp_hold_timeout_sec_6
  if (rtp_hold_timeout_sec_6 != 0)
    goto <bb 50>;
  else
    goto <bb 51>;

<bb 50>:
  D.46200_89 = engine_21->read_impl.samples_per_second;
  rtp_hold_timeout_sec.131_90 = (uint32_t) rtp_hold_timeout_sec_6;
  D.46211_91 = D.46200_89 * rtp_hold_timeout_sec.131_90;
  D.46203_92 = engine_21->read_impl.samples_per_packet;
  D.46212_93 = D.46211_91 / D.46203_92;
  engine_21->max_missed_hold_packets = D.46212_93;

<bb 51>:
  engine_21->check_frames = 0;
  engine_21->last_ts = 0;
  do_cng_94 = 1;
  # DEBUG do_cng => do_cng_94

<bb 52>:
  # do_cng_2 = PHI <do_cng_3(34), do_cng_94(51)>
  # DEBUG do_cng => do_cng_2
  if (do_cng_2 != 0)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  D.46161_95 = &engine_21->read_frame;
  *frame_52(D) = D.46161_95;
  D.46172_96 = *frame_52(D);
  D.46172_97 = *frame_52(D);
  D.46173_98 = D.46172_97->flags;
  D.46174_99 = D.46173_98 | 1;
  D.46172_97->flags = D.46174_99;
  D.46172_100 = *frame_52(D);
  D.46175_101 = engine_21->read_impl.encoded_bytes_per_packet;
  D.46172_100->datalen = D.46175_101;
  D.46172_102 = *frame_52(D);
  D.46176_103 = D.46172_102->data;
  D.46172_104 = *frame_52(D);
  D.46177_105 = D.46172_104->datalen;
  memset (D.46176_103, 0, D.46177_105);
  status_106 = 0;
  # DEBUG status => status_106
  goto <bb 128> (end);

<bb 54>:
  D.46139_107 = engine_21->rtp_session;
  D.46215_108 = switch_rtcp_zerocopy_read_frame (D.46139_107, &rtcp_frame);
  if (D.46215_108 == 0)
    goto <bb 55>;
  else
    goto <bb 62>;

<bb 55>:
  D.46218_109 = switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 1747, &event, 71, 0B);
  if (D.46218_109 == 0)
    goto <bb 56>;
  else
    goto <bb 62>;

<bb 56>:
  uuid_110 = switch_core_session_get_uuid (session_13(D));
  # DEBUG uuid => uuid_110
  if (uuid_110 != 0B)
    goto <bb 57>;
  else
    goto <bb 58>;

<bb 57>:
  event.132_111 = event;
  D.46224_112 = switch_core_session_get_uuid (session_13(D));
  switch_event_add_header_string (event.132_111, 1, "Unique-ID", D.46224_112);

<bb 58>:
  D.46225_113 = (const char * restrict) &"%.8x"[0];
  D.46226_114 = rtcp_frame.ssrc;
  snprintf (&value, 30, D.46225_113, D.46226_114);
  event.132_115 = event;
  switch_event_add_header_string (event.132_115, 1, "SSRC", &value);
  D.46227_116 = (const char * restrict) &"%u"[0];
  D.46228_117 = rtcp_frame.ntp_msw;
  snprintf (&value, 30, D.46227_116, D.46228_117);
  event.132_118 = event;
  switch_event_add_header_string (event.132_118, 1, "NTP-Most-Significant-Word", &value);
  D.46227_119 = (const char * restrict) &"%u"[0];
  D.46229_120 = rtcp_frame.ntp_lsw;
  snprintf (&value, 30, D.46227_119, D.46229_120);
  event.132_121 = event;
  switch_event_add_header_string (event.132_121, 1, "NTP-Least-Significant-Word", &value);
  D.46227_122 = (const char * restrict) &"%u"[0];
  D.46230_123 = rtcp_frame.timestamp;
  snprintf (&value, 30, D.46227_122, D.46230_123);
  event.132_124 = event;
  switch_event_add_header_string (event.132_124, 1, "RTP-Timestamp", &value);
  D.46227_125 = (const char * restrict) &"%u"[0];
  D.46231_126 = rtcp_frame.packet_count;
  snprintf (&value, 30, D.46227_125, D.46231_126);
  event.132_127 = event;
  switch_event_add_header_string (event.132_127, 1, "Sender-Packet-Count", &value);
  D.46227_128 = (const char * restrict) &"%u"[0];
  D.46232_129 = rtcp_frame.octect_count;
  snprintf (&value, 30, D.46227_128, D.46232_129);
  event.132_130 = event;
  switch_event_add_header_string (event.132_130, 1, "Octect-Packet-Count", &value);
  D.46233_131 = (const char * restrict) &"%d"[0];
  D.46234_132 = engine_21->read_frame.timestamp;
  snprintf (&value, 30, D.46233_131, D.46234_132);
  event.132_133 = event;
  switch_event_add_header_string (event.132_133, 1, "Last-RTP-Timestamp", &value);
  D.46227_134 = (const char * restrict) &"%u"[0];
  D.46235_135 = engine_21->read_frame.rate;
  snprintf (&value, 30, D.46227_134, D.46235_135);
  event.132_136 = event;
  switch_event_add_header_string (event.132_136, 1, "RTP-Rate", &value);
  D.46236_137 = (const char * restrict) &"%lld"[0];
  D.46237_138 = switch_time_now ();
  snprintf (&value, 30, D.46236_137, D.46237_138);
  event.132_139 = event;
  switch_event_add_header_string (event.132_139, 1, "Capture-Time", &value);
  i_140 = 0;
  # DEBUG i => i_140
  goto <bb 60>;

<bb 59>:
  D.46238_143 = (const char * restrict) &"Source%u-SSRC"[0];
  snprintf (&header, 50, D.46238_143, i_7);
  D.46225_144 = (const char * restrict) &"%.8x"[0];
  D.46239_145 = rtcp_frame.reports[i_7].ssrc;
  snprintf (&value, 30, D.46225_144, D.46239_145);
  event.132_146 = event;
  switch_event_add_header_string (event.132_146, 1, &header, &value);
  D.46240_147 = (const char * restrict) &"Source%u-Fraction"[0];
  snprintf (&header, 50, D.46240_147, i_7);
  D.46227_148 = (const char * restrict) &"%u"[0];
  D.46241_149 = rtcp_frame.reports[i_7].fraction;
  D.46242_150 = (int) D.46241_149;
  snprintf (&value, 30, D.46227_148, D.46242_150);
  event.132_151 = event;
  switch_event_add_header_string (event.132_151, 1, &header, &value);
  D.46243_152 = (const char * restrict) &"Source%u-Lost"[0];
  snprintf (&header, 50, D.46243_152, i_7);
  D.46227_153 = (const char * restrict) &"%u"[0];
  D.46244_154 = rtcp_frame.reports[i_7].lost;
  snprintf (&value, 30, D.46227_153, D.46244_154);
  event.132_155 = event;
  switch_event_add_header_string (event.132_155, 1, &header, &value);
  D.46245_156 = (const char * restrict) &"Source%u-Highest-Sequence-Number-Received"[0];
  snprintf (&header, 50, D.46245_156, i_7);
  D.46227_157 = (const char * restrict) &"%u"[0];
  D.46246_158 = rtcp_frame.reports[i_7].highest_sequence_number_received;
  snprintf (&value, 30, D.46227_157, D.46246_158);
  event.132_159 = event;
  switch_event_add_header_string (event.132_159, 1, &header, &value);
  D.46247_160 = (const char * restrict) &"Source%u-Jitter"[0];
  snprintf (&header, 50, D.46247_160, i_7);
  D.46227_161 = (const char * restrict) &"%u"[0];
  D.46248_162 = rtcp_frame.reports[i_7].jitter;
  snprintf (&value, 30, D.46227_161, D.46248_162);
  event.132_163 = event;
  switch_event_add_header_string (event.132_163, 1, &header, &value);
  D.46249_164 = (const char * restrict) &"Source%u-LSR"[0];
  snprintf (&header, 50, D.46249_164, i_7);
  D.46227_165 = (const char * restrict) &"%u"[0];
  D.46250_166 = rtcp_frame.reports[i_7].lsr;
  snprintf (&value, 30, D.46227_165, D.46250_166);
  event.132_167 = event;
  switch_event_add_header_string (event.132_167, 1, &header, &value);
  D.46251_168 = (const char * restrict) &"Source%u-DLSR"[0];
  snprintf (&header, 50, D.46251_168, i_7);
  D.46227_169 = (const char * restrict) &"%u"[0];
  D.46252_170 = rtcp_frame.reports[i_7].dlsr;
  snprintf (&value, 30, D.46227_169, D.46252_170);
  event.132_171 = event;
  switch_event_add_header_string (event.132_171, 1, &header, &value);
  i_172 = i_7 + 1;
  # DEBUG i => i_172

<bb 60>:
  # i_7 = PHI <i_140(58), i_172(59)>
  # DEBUG i => i_7
  D.46253_141 = rtcp_frame.report_count;
  D.46254_142 = (int) D.46253_141;
  if (D.46254_142 > i_7)
    goto <bb 59>;
  else
    goto <bb 61>;

<bb 61>:
  switch_event_fire_detailed ("src/switch_core_media.c", &__func__, 1809, &event, 0B);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1810, session_13(D), 110, "Dispatched RTCP event\n");

<bb 62>:
  D.46255_173 = engine_21->read_frame.flags;
  D.46256_174 = D.46255_173 & 32;
  if (D.46256_174 != 0)
    goto <bb 63>;
  else
    goto <bb 64>;

<bb 63>:
  D.46161_175 = &engine_21->read_frame;
  *frame_52(D) = D.46161_175;
  status_176 = 0;
  # DEBUG status => status_176
  goto <bb 128> (end);

<bb 64>:
  D.46139_177 = engine_21->rtp_session;
  D.46259_178 = switch_rtp_has_dtmf (D.46139_177);
  if (D.46259_178 != 0)
    goto <bb 65>;
  else
    goto <bb 66>;

<bb 65>:
  dtmf = {};
  D.46139_179 = engine_21->rtp_session;
  switch_rtp_dequeue_dtmf (D.46139_179, &dtmf);
  D.46144_180 = session_13(D)->channel;
  switch_channel_queue_dtmf (D.46144_180, &dtmf);

<bb 66>:
  D.46262_181 = engine_21->read_frame.datalen;
  if (D.46262_181 != 0)
    goto <bb 67>;
  else
    goto <bb 123>;

<bb 67>:
  bytes_182 = 0;
  # DEBUG bytes => bytes_182
  frames_183 = 1;
  # DEBUG frames => frames_183
  D.46255_184 = engine_21->read_frame.flags;
  D.46265_185 = D.46255_184 & 1;
  if (D.46265_185 == 0)
    goto <bb 68>;
  else
    goto <bb 125>;

<bb 68>:
  D.46135_186 = engine_21->read_codec.implementation;
  if (D.46135_186 == 0B)
    goto <bb 76>;
  else
    goto <bb 69>;

<bb 69>:
  D.46137_187 = &engine_21->read_codec;
  # DEBUG codec => D.46137_187
  if (D.46137_187 != 0B)
    goto <bb 70>;
  else
    goto <bb 74>;

<bb 70>:
  D.47791_433 = D.46137_187->flags;
  D.47790_434 = D.47791_433 & 256;
  if (D.47790_434 != 0)
    goto <bb 71>;
  else
    goto <bb 74>;

<bb 71>:
  D.47789_435 = D.46137_187->mutex;
  if (D.47789_435 != 0B)
    goto <bb 72>;
  else
    goto <bb 74>;

<bb 72>:
  D.47788_436 = D.46137_187->codec_interface;
  if (D.47788_436 != 0B)
    goto <bb 73>;
  else
    goto <bb 74>;

<bb 73>:
  D.47787_437 = D.46137_187->implementation;
  if (D.47787_437 != 0B)
    goto <bb 75>;
  else
    goto <bb 74>;

<bb 74>:

<bb 75>:
  # iftmp.104_438 = PHI <1(73), 0(74)>
  D.47793_439 = (switch_bool_t) iftmp.104_438;
  D.47786_447 = D.47793_439;
  D.46271_188 = D.47786_447;
  if (D.46271_188 == 0)
    goto <bb 76>;
  else
    goto <bb 77>;

<bb 76>:
  *frame_52(D) = 0B;
  status_283 = 9;
  # DEBUG status => status_283
  goto <bb 128> (end);

<bb 77>:
  D.46272_189 = smh_14->media_flags[2];
  if (D.46272_189 != 0)
    goto <bb 78>;
  else
    goto <bb 100>;

<bb 78>:
  D.46275_190 = engine_21->check_frames;
  if (D.46275_190 <= 49)
    goto <bb 79>;
  else
    goto <bb 100>;

<bb 79>:
  D.46275_191 = engine_21->check_frames;
  D.46278_192 = D.46275_191 + 1;
  engine_21->check_frames = D.46278_192;
  D.46175_193 = engine_21->read_impl.encoded_bytes_per_packet;
  if (D.46175_193 == 0)
    goto <bb 80>;
  else
    goto <bb 81>;

<bb 80>:
  engine_21->check_frames = 50;
  goto <bb 119> (skip);

<bb 81>:
  D.46272_194 = smh_14->media_flags[2];
  if (D.46272_194 != 0)
    goto <bb 82>;
  else
    goto <bb 99>;

<bb 82>:
  D.46262_195 = engine_21->read_frame.datalen;
  D.46284_196 = D.46262_195 % 10;
  if (D.46284_196 == 0)
    goto <bb 83>;
  else
    goto <bb 99>;

<bb 83>:
  D.46288_197 = engine_21->last_ts;
  if (D.46288_197 != 0)
    goto <bb 84>;
  else
    goto <bb 97>;

<bb 84>:
  D.46262_198 = engine_21->read_frame.datalen;
  D.46175_199 = engine_21->read_impl.encoded_bytes_per_packet;
  if (D.46262_198 != D.46175_199)
    goto <bb 85>;
  else
    goto <bb 97>;

<bb 85>:
  D.46234_200 = engine_21->read_frame.timestamp;
  D.46288_201 = engine_21->last_ts;
  D.46291_202 = D.46234_200 - D.46288_201;
  D.46200_203 = engine_21->read_impl.samples_per_second;
  D.46292_204 = D.46200_203 / 1000;
  codec_ms_205 = D.46291_202 / D.46292_204;
  # DEBUG codec_ms => codec_ms_205
  D.46295_206 = codec_ms_205 % 10;
  if (D.46295_206 != 0)
    goto <bb 87>;
  else
    goto <bb 86>;

<bb 86>:
  D.46203_207 = engine_21->read_impl.samples_per_packet;
  D.46297_208 = D.46203_207 * 10;
  if (D.46297_208 < codec_ms_205)
    goto <bb 87>;
  else
    goto <bb 88>;

<bb 87>:
  engine_21->last_ts = 0;
  goto <bb 119> (skip);

<bb 88>:
  D.46298_209 = engine_21->last_codec_ms;
  if (D.46298_209 != 0)
    goto <bb 89>;
  else
    goto <bb 91>;

<bb 89>:
  D.46298_210 = engine_21->last_codec_ms;
  if (D.46298_210 == codec_ms_205)
    goto <bb 90>;
  else
    goto <bb 91>;

<bb 90>:
  D.46303_211 = engine_21->mismatch_count;
  D.46304_212 = D.46303_211 + 1;
  engine_21->mismatch_count = D.46304_212;

<bb 91>:
  engine_21->last_codec_ms = codec_ms_205;
  D.46303_213 = engine_21->mismatch_count;
  if (D.46303_213 > 5)
    goto <bb 92>;
  else
    goto <bb 98>;

<bb 92>:
  D.46307_214 = engine_21->cur_payload_map;
  D.46308_215 = D.46307_214->codec_ms;
  if (D.46308_215 != codec_ms_205)
    goto <bb 93>;
  else
    goto <bb 98>;

<bb 93>:
  if (codec_ms_205 > 120)
    goto <bb 94>;
  else
    goto <bb 95>;

<bb 94>:
  codec_ms.133_216 = (int) codec_ms_205;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1871, session_13(D), 4, "Your phone is trying to send timestamps that suggest an increment of %dms per packet\nThat seems hard to believe so I am going to go on ahead and um ignore that, mmkay?\n", codec_ms.133_216);
  engine_21->check_frames = 50;
  goto <bb 119> (skip);

<bb 95>:
  engine_21->read_frame.datalen = 0;
  D.46307_217 = engine_21->cur_payload_map;
  D.46308_218 = D.46307_217->codec_ms;
  if (D.46308_218 != codec_ms_205)
    goto <bb 96>;
  else
    goto <bb 98>;

<bb 96>:
  D.46307_219 = engine_21->cur_payload_map;
  D.46308_220 = D.46307_219->codec_ms;
  D.46316_221 = (int) D.46308_220;
  codec_ms.133_222 = (int) codec_ms_205;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1882, session_13(D), 4, "Asynchronous PTIME not supported, changing our end from %d to %d\n", D.46316_221, codec_ms.133_222);
  D.46144_223 = session_13(D)->channel;
  D.46307_224 = engine_21->cur_payload_map;
  D.46308_225 = D.46307_224->codec_ms;
  D.46316_226 = (int) D.46308_225;
  codec_ms.133_227 = (int) codec_ms_205;
  switch_channel_set_variable_printf (D.46144_223, "rtp_h_X-Broken-PTIME", "Adv=%d;Sent=%d", D.46316_226, codec_ms.133_227);
  D.46307_228 = engine_21->cur_payload_map;
  D.46307_228->codec_ms = codec_ms_205;
  engine_21->reset_codec = 2;
  goto <bb 98>;

<bb 97>:
  engine_21->mismatch_count = 0;

<bb 98>:
  D.46234_229 = engine_21->read_frame.timestamp;
  engine_21->last_ts = D.46234_229;
  goto <bb 100>;

<bb 99>:
  engine_21->mismatch_count = 0;
  engine_21->last_ts = 0;

<bb 100>:
  D.46178_230 = engine_21->reset_codec;
  if (D.46178_230 == 0)
    goto <bb 101>;
  else
    goto <bb 119> (skip);

<bb 101>:
  D.46323_231 = engine_21->codec_negotiated;
  if (D.46323_231 != 0)
    goto <bb 102>;
  else
    goto <bb 119> (skip);

<bb 102>:
  D.46326_232 = smh_14->mparams;
  D.46327_233 = D.46326_232->cng_pt;
  if (D.46327_233 == 0)
    goto <bb 104>;
  else
    goto <bb 103>;

<bb 103>:
  D.46329_234 = engine_21->read_frame.payload;
  D.46326_235 = smh_14->mparams;
  D.46327_236 = D.46326_235->cng_pt;
  if (D.46329_234 != D.46327_236)
    goto <bb 104>;
  else
    goto <bb 119> (skip);

<bb 104>:
  D.46326_237 = smh_14->mparams;
  D.46330_238 = D.46326_237->recv_te;
  if (D.46330_238 == 0)
    goto <bb 106>;
  else
    goto <bb 105>;

<bb 105>:
  D.46329_239 = engine_21->read_frame.payload;
  D.46326_240 = smh_14->mparams;
  D.46330_241 = D.46326_240->recv_te;
  if (D.46329_239 != D.46330_241)
    goto <bb 106>;
  else
    goto <bb 119> (skip);

<bb 106>:
  D.46326_242 = smh_14->mparams;
  D.46332_243 = D.46326_242->te;
  if (D.46332_243 == 0)
    goto <bb 108>;
  else
    goto <bb 107>;

<bb 107>:
  D.46329_244 = engine_21->read_frame.payload;
  D.46326_245 = smh_14->mparams;
  D.46332_246 = D.46326_245->te;
  if (D.46329_244 != D.46332_246)
    goto <bb 108>;
  else
    goto <bb 119> (skip);

<bb 108>:
  D.46329_247 = engine_21->read_frame.payload;
  D.46307_248 = engine_21->cur_payload_map;
  D.46334_249 = D.46307_248->recv_pt;
  if (D.46329_247 != D.46334_249)
    goto <bb 109>;
  else
    goto <bb 119> (skip);

<bb 109>:
  D.46329_250 = engine_21->read_frame.payload;
  D.46307_251 = engine_21->cur_payload_map;
  D.46337_252 = D.46307_251->agreed_pt;
  if (D.46329_250 != D.46337_252)
    goto <bb 110>;
  else
    goto <bb 119> (skip);

<bb 110>:
  D.46329_253 = engine_21->read_frame.payload;
  D.46307_254 = engine_21->cur_payload_map;
  D.46340_255 = D.46307_254->pt;
  if (D.46329_253 != D.46340_255)
    goto <bb 111>;
  else
    goto <bb 119> (skip);

<bb 111>:
  D.46329_256 = engine_21->read_frame.payload;
  D.46343_257 = (int) D.46329_256;
  D.46307_258 = engine_21->cur_payload_map;
  D.46337_259 = D.46307_258->agreed_pt;
  D.46344_260 = (int) D.46337_259;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1926, session_13(D), 7, "alternate payload received (received %d, expecting %d)\n", D.46343_257, D.46344_260);
  D.46345_261 = smh_14->sdp_mutex;
  switch_mutex_lock (D.46345_261);
  pmap_262 = engine_21->payload_map;
  # DEBUG pmap => pmap_262
  goto <bb 116>;

<bb 112>:
  D.46329_263 = engine_21->read_frame.payload;
  D.46346_264 = pmap_9->recv_pt;
  if (D.46329_263 == D.46346_264)
    goto <bb 113>;
  else
    goto <bb 115>;

<bb 113>:
  D.46349_265 = pmap_9->negotiated;
  if (D.46349_265 != 0)
    goto <bb 114>;
  else
    goto <bb 115>;

<bb 114>:
  engine_21->cur_payload_map = pmap_9;
  D.46307_266 = engine_21->cur_payload_map;
  D.46307_266->current = 1;
  D.46352_267 = pmap_9->iananame;
  D.46353_268 = pmap_9->pt;
  D.46354_269 = (int) D.46353_268;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1937, session_13(D), 4, "Changing current codec to %s (payload type %d).\n", D.46352_267, D.46354_269);
  engine_21->reset_codec = 1;
  goto <bb 117>;

<bb 115>:
  pmap_270 = pmap_9->next;
  # DEBUG pmap => pmap_270

<bb 116>:
  # pmap_9 = PHI <pmap_262(111), pmap_270(115)>
  # DEBUG pmap => pmap_9
  if (pmap_9 != 0B)
    goto <bb 112>;
  else
    goto <bb 117>;

<bb 117>:
  D.46345_271 = smh_14->sdp_mutex;
  switch_mutex_unlock (D.46345_271);
  D.46178_272 = engine_21->reset_codec;
  if (D.46178_272 == 0)
    goto <bb 118>;
  else
    goto <bb 119> (skip);

<bb 118>:
  D.46329_273 = engine_21->read_frame.payload;
  D.46343_274 = (int) D.46329_273;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 1949, session_13(D), 4, "Could not change to payload type %d, ignoring...\n", D.46343_274);

skip:
  bytes_275 = engine_21->read_impl.encoded_bytes_per_packet;
  # DEBUG bytes => bytes_275
  if (bytes_275 != 0)
    goto <bb 120>;
  else
    goto <bb 121>;

<bb 120>:
  D.46262_276 = engine_21->read_frame.datalen;
  D.46359_277 = D.46262_276 / bytes_275;
  frames_278 = (int) D.46359_277;
  # DEBUG frames => frames_278

<bb 121>:
  # frames_8 = PHI <frames_183(119), frames_278(120)>
  # DEBUG frames => frames_8
  D.46203_279 = engine_21->read_impl.samples_per_packet;
  frames.134_280 = (uint32_t) frames_8;
  D.46361_281 = D.46203_279 * frames.134_280;
  engine_21->read_frame.samples = D.46361_281;
  D.46262_282 = engine_21->read_frame.datalen;
  if (D.46262_282 == 0)
    goto <bb 122>;
  else
    goto <bb 125>;

<bb 122>:
  // predicted unlikely by continue predictor.

<bb 123>:
  # do_cng_3 = PHI <do_cng_12(24), do_cng_2(66), do_cng_2(122), do_cng_12(23)>
  # DEBUG do_cng => do_cng_3
  D.46128_40 = smh_14->media_flags[0];
  if (D.46128_40 != 0)
    goto <bb 124>;
  else
    goto <bb 125>;

<bb 124>:
  D.46262_41 = engine_21->read_frame.datalen;
  if (D.46262_41 == 0)
    goto <bb 29>;
  else
    goto <bb 125>;

<bb 125>:
  D.46262_284 = engine_21->read_frame.datalen;
  if (D.46262_284 == 0)
    goto <bb 126>;
  else
    goto <bb 127>;

<bb 126>:
  *frame_52(D) = 0B;

<bb 127>:
  D.46161_285 = &engine_21->read_frame;
  *frame_52(D) = D.46161_285;
  status_286 = 0;
  # DEBUG status => status_286

  # status_1 = PHI <status_64(32), status_45(33), status_72(39), status_106(53), status_176(63), status_283(76), status_286(127), status_45(30)>
end:
  # DEBUG status => status_1
  D.46150_287 = engine_21->read_mutex[type_19(D)];
  if (D.46150_287 != 0B)
    goto <bb 129>;
  else
    goto <bb 130>;

<bb 129>:
  D.46150_288 = engine_21->read_mutex[type_19(D)];
  switch_mutex_unlock (D.46150_288);

<bb 130>:
  D.46127_289 = status_1;

<bb 131>:
  # D.46127_10 = PHI <D.46127_15(5), D.46127_17(7), D.46127_291(16), D.46127_290(22), D.46127_39(28), D.46127_289(130)>
  return D.46127_10;

}



;; Function switch_core_media_add_ice_acl (switch_core_media_add_ice_acl)

Iterations: 0
switch_core_media_add_ice_acl (struct switch_core_session_t * session, switch_media_type_t type, const char * acl_name)
{
  static const char __func__[30] = "switch_core_media_add_ice_acl";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_add_ice_acl";
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  char * D.45899;
  int D.45898;
  int D.45895;
  unsigned int D.45894;
  struct switch_rtp_engine_t[2] * D.45893;
  switch_status_t D.45892;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2379, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.45892_4 = 1;
  goto <bb 9>;

<bb 6>:
  D.45893_5 = &smh_3->engines;
  D.45894_7 = type_6(D) * 11416;
  engine_8 = D.45893_5 + D.45894_7;
  # DEBUG engine => engine_8
  D.45895_9 = engine_8->cand_acl_count;
  if (D.45895_9 <= 24)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.45895_10 = engine_8->cand_acl_count;
  D.45899_12 = switch_core_perform_session_strdup (session_2(D), acl_name_11(D), "src/switch_core_media.c", &__func__, 2388);
  engine_8->cand_acl[D.45895_10] = D.45899_12;
  D.45898_13 = D.45895_10 + 1;
  engine_8->cand_acl_count = D.45898_13;
  D.45892_14 = 0;
  goto <bb 9>;

<bb 8>:
  D.45892_15 = 1;

<bb 9>:
  # D.45892_1 = PHI <D.45892_4(5), D.45892_14(7), D.45892_15(8)>
  return D.45892_1;

}



;; Function switch_core_media_check_video_codecs (switch_core_media_check_video_codecs)

Iterations: 0
switch_core_media_check_video_codecs (struct switch_core_session_t * session)
{
  int i;
  static const char __PRETTY_FUNCTION__[37] = "switch_core_media_check_video_codecs";
  struct switch_media_handle_t * smh;
  int D.45884;
  int D.45883;
  uint32_t D.45880;
  switch_call_direction_t D.45877;
  const switch_codec_type_t D.45874;
  const struct switch_codec_implementation_t * D.45873;
  uint32_t D.45870;
  struct switch_channel_t * D.45869;
  int D.45866;
  struct switch_core_media_params_t * D.45865;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2400, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 17>;
  else
    goto <bb 5>;

<bb 5>:
  D.45865_4 = smh_3->mparams;
  D.45866_5 = D.45865_4->num_codecs;
  if (D.45866_5 != 0)
    goto <bb 6>;
  else
    goto <bb 17>;

<bb 6>:
  D.45869_6 = session_2(D)->channel;
  D.45870_7 = switch_channel_test_flag (D.45869_6, 98);
  if (D.45870_7 == 0)
    goto <bb 7>;
  else
    goto <bb 17>;

<bb 7>:
  smh_3->video_count = 0;
  i_8 = 0;
  # DEBUG i => i_8
  goto <bb 14>;

<bb 8>:
  D.45873_11 = smh_3->codecs[i_1];
  D.45874_12 = D.45873_11->codec_type;
  if (D.45874_12 == 1)
    goto <bb 9>;
  else
    goto <bb 13>;

<bb 9>:
  D.45869_13 = session_2(D)->channel;
  D.45877_14 = switch_channel_direction (D.45869_13);
  if (D.45877_14 == 0)
    goto <bb 10>;
  else
    goto <bb 12>;

<bb 10>:
  D.45869_15 = session_2(D)->channel;
  D.45880_16 = switch_channel_test_flag (D.45869_15, 114);
  if (D.45880_16 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  // predicted unlikely by continue predictor.
  goto <bb 13>;

<bb 12>:
  D.45883_17 = smh_3->video_count;
  D.45884_18 = D.45883_17 + 1;
  smh_3->video_count = D.45884_18;

<bb 13>:
  i_19 = i_1 + 1;
  # DEBUG i => i_19

<bb 14>:
  # i_1 = PHI <i_8(7), i_19(13)>
  # DEBUG i => i_1
  D.45865_9 = smh_3->mparams;
  D.45866_10 = D.45865_9->num_codecs;
  if (D.45866_10 > i_1)
    goto <bb 8>;
  else
    goto <bb 15>;

<bb 15>:
  D.45883_20 = smh_3->video_count;
  if (D.45883_20 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.45869_21 = session_2(D)->channel;
  switch_channel_set_flag_value (D.45869_21, 98, 1);

<bb 17>:
  return;

}



;; Function switch_ice_direction (switch_ice_direction)

Iterations: 0
switch_ice_direction (struct switch_core_session_t * session)
{
  switch_call_direction_t r;
  switch_call_direction_t D.45859;
  uint32_t D.45856;
  uint32_t D.45855;
  uint32_t D.45853;
  uint32_t D.45848;
  struct switch_channel_t * D.45847;

<bb 2>:
  D.45847_4 = session_3(D)->channel;
  r_5 = switch_channel_direction (D.45847_4);
  # DEBUG r => r_5
  D.45847_6 = session_3(D)->channel;
  D.45848_7 = switch_channel_test_flag (D.45847_6, 112);
  if (D.45848_7 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  r_8 = r_5 == 0;
  # DEBUG r => r_8

<bb 4>:
  # r_1 = PHI <r_5(2), r_8(3)>
  # DEBUG r => r_1
  D.45847_9 = session_3(D)->channel;
  D.45853_10 = switch_channel_test_flag (D.45847_9, 103);
  if (D.45853_10 != 0)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  D.45847_11 = session_3(D)->channel;
  D.45855_12 = switch_channel_test_flag (D.45847_11, 84);
  if (D.45855_12 != 0)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  D.45847_13 = session_3(D)->channel;
  D.45856_14 = switch_channel_test_flag (D.45847_13, 106);
  if (D.45856_14 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  r_15 = 1;
  # DEBUG r => r_15

<bb 8>:
  # r_2 = PHI <r_1(5), r_1(6), r_15(7)>
  # DEBUG r => r_2
  D.45859_16 = r_2;
  return D.45859_16;

}



;; Function check_dtls_reinvite (check_dtls_reinvite)

Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate _zstr.
 Inlining _zstr into check_dtls_reinvite.
Processing frequency _zstr
  Called by check_dtls_reinvite that is normal or hot
Inlining _zstr to check_dtls_reinvite with frequency 1000
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Iterations: 1
Merging blocks 3 and 18
Merging blocks 21 and 17


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.43905_5 = session_4(D)->channel;

Updating SSA information for statement D.43906_6 = switch_channel_test_flag (D.43905_5, 103);



Registering new PHI nodes in block #3



Registering new PHI nodes in block #4

Updating SSA information for statement D.47800_40 = MEM[(const char *)D.43909_8];



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.47799 = D.47801_41;

Updating SSA information for statement D.43910_9 = D.47799;



Registering new PHI nodes in block #7

Updating SSA information for statement D.43913_10 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #8

Updating SSA information for statement D.43916_11 = dtls_ok (session_4(D));



Registering new PHI nodes in block #9

Updating SSA information for statement D.43920_12 = switch_ice_direction (session_4(D));



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement D.43925_16 = engine_7(D)->type;



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4701, session_4(D), 6, "RE-SETTING %s DTLS\n", iftmp.75_3);

Updating SSA information for statement D.43929_20 = engine_7(D)->rtcp_mux;



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17

Updating SSA information for statement D.43932_22 = engine_7(D)->rtp_session;

Updating SSA information for statement switch_rtp_add_dtls (D.43932_22, D.43933_23, D.43934_24, D.43935_25);

Updating SSA information for statement D.43929_26 = engine_7(D)->rtcp_mux;



Registering new PHI nodes in block #18

Updating SSA information for statement D.43932_28 = engine_7(D)->rtp_session;

Updating SSA information for statement switch_rtp_add_dtls (D.43932_28, D.43933_29, D.43934_30, D.43935_31);



Registering new PHI nodes in block #19



Symbols to be put in SSA form

{ .MEM D.47799 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 20
Number of blocks to update: 19 ( 95%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 


Scope blocks after cleanups:

{ Scope block #0 
  static const char __func__[20] = "check_dtls_reinvite";

  { Scope block #170 src/switch_core_media.c:4699 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #171 Originating from :#0 

    }

  }

  { Scope block #172 
    dtls_type_t xtype;
    dtls_type_t dtype;

  }

}
check_dtls_reinvite (struct switch_core_session_t * session, struct switch_rtp_engine_t * engine)
{
  int D.47801;
  const char D.47800;
  int D.47799;
  dtls_type_t dtype;
  dtls_type_t xtype;
  static const char __func__[20] = "check_dtls_reinvite";
  unsigned int D.43935;
  struct dtls_fingerprint_t * D.43934;
  struct dtls_fingerprint_t * D.43933;
  struct switch_rtp_t * D.43932;
  int8_t D.43929;
  switch_media_type_t D.43925;
  char * iftmp.75;
  switch_call_direction_t D.43920;
  dtls_type_t iftmp.74;
  int D.43916;
  int D.43913;
  int D.43910;
  char[192] * D.43909;
  uint32_t D.43906;
  struct switch_channel_t * D.43905;

<bb 2>:
  D.43905_5 = session_4(D)->channel;
  D.43906_6 = switch_channel_test_flag (D.43905_5, 103);
  if (D.43906_6 != 0)
    goto <bb 3>;
  else
    goto <bb 19>;

<bb 3>:
  D.43909_8 = &engine_7(D)->local_dtls_fingerprint.str;
  # DEBUG s => D.43909_8
  if (D.43909_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 4>;

<bb 4>:
  D.47800_40 = MEM[(const char *)D.43909_8];
  if (D.47800_40 == 0)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:

<bb 6>:
  # D.47801_41 = PHI <1(3), 1(4), 0(5)>
  D.47799_42 = D.47801_41;
  D.43910_9 = D.47799_42;
  if (D.43910_9 == 0)
    goto <bb 7>;
  else
    goto <bb 19>;

<bb 7>:
  D.43913_10 = switch_rtp_has_dtls ();
  if (D.43913_10 != 0)
    goto <bb 8>;
  else
    goto <bb 19>;

<bb 8>:
  D.43916_11 = dtls_ok (session_4(D));
  if (D.43916_11 != 0)
    goto <bb 9>;
  else
    goto <bb 19>;

<bb 9>:
  D.43920_12 = switch_ice_direction (session_4(D));
  if (D.43920_12 == 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  iftmp.74_13 = 1;
  goto <bb 12>;

<bb 11>:
  iftmp.74_14 = 2;

<bb 12>:
  # iftmp.74_2 = PHI <iftmp.74_13(10), iftmp.74_14(11)>
  dtype_15 = iftmp.74_2;
  # DEBUG dtype => dtype_15
  D.43925_16 = engine_7(D)->type;
  if (D.43925_16 == 1)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  iftmp.75_17 = "video";
  goto <bb 15>;

<bb 14>:
  iftmp.75_18 = "audio";

<bb 15>:
  # iftmp.75_3 = PHI <iftmp.75_17(13), iftmp.75_18(14)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4701, session_4(D), 6, "RE-SETTING %s DTLS\n", iftmp.75_3);
  xtype_19 = 4;
  # DEBUG xtype => xtype_19
  D.43929_20 = engine_7(D)->rtcp_mux;
  if (D.43929_20 > 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  xtype_21 = xtype_19 | 8;
  # DEBUG xtype => xtype_21

<bb 17>:
  # xtype_1 = PHI <xtype_19(15), xtype_21(16)>
  # DEBUG xtype => xtype_1
  D.43932_22 = engine_7(D)->rtp_session;
  D.43933_23 = &engine_7(D)->local_dtls_fingerprint;
  D.43934_24 = &engine_7(D)->remote_dtls_fingerprint;
  D.43935_25 = dtype_15 | xtype_1;
  switch_rtp_add_dtls (D.43932_22, D.43933_23, D.43934_24, D.43935_25);
  D.43929_26 = engine_7(D)->rtcp_mux;
  if (D.43929_26 <= 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  xtype_27 = 8;
  # DEBUG xtype => xtype_27
  D.43932_28 = engine_7(D)->rtp_session;
  D.43933_29 = &engine_7(D)->local_dtls_fingerprint;
  D.43934_30 = &engine_7(D)->remote_dtls_fingerprint;
  D.43935_31 = dtype_15 | xtype_27;
  switch_rtp_add_dtls (D.43932_28, D.43933_29, D.43934_30, D.43935_31);

<bb 19>:
  return;

}



;; Function check_ice (check_ice)

Considering to always inline inline candidate atoi.
 Inlining atoi into check_ice.
Processing frequency atoi
  Called by check_ice that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into check_ice.
Processing frequency atoi
  Called by check_ice that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into check_ice.
Processing frequency atoi
  Called by check_ice that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into check_ice.
Processing frequency atoi
  Called by check_ice that is normal or hot
Considering to always inline inline candidate atol.
 Inlining atol into check_ice.
Processing frequency atol
  Called by check_ice that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into check_ice.
Processing frequency atoi
  Called by check_ice that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into check_ice.
Processing frequency atoi
  Called by check_ice that is normal or hot
Considering to always inline inline candidate atol.
 Inlining atol into check_ice.
Processing frequency atol
  Called by check_ice that is normal or hot
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate _zstr.
 Inlining _zstr into check_ice.
Processing frequency _zstr
  Called by check_ice that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into check_ice.
Processing frequency _zstr
  Called by check_ice that is normal or hot
Considering inline candidate generate_local_fingerprint.
Not inlining: code size would grow by 11.
Considering inline candidate _zstr.
 Inlining _zstr into check_ice.
Processing frequency _zstr
  Called by check_ice that is normal or hot
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate _zstr.
 Inlining _zstr into check_ice.
Processing frequency _zstr
  Called by check_ice that is normal or hot
Inlining _zstr to check_ice with frequency 1000
Inlining _zstr to check_ice with frequency 1000
Inlining atol to check_ice with frequency 1000
Inlining atoi to check_ice with frequency 1000
Inlining atoi to check_ice with frequency 1000
Inlining atol to check_ice with frequency 1000
Inlining atoi to check_ice with frequency 1000
Inlining atoi to check_ice with frequency 1000
Inlining _zstr to check_ice with frequency 1000
Inlining _zstr to check_ice with frequency 1000
Inlining atoi to check_ice with frequency 1000
Inlining atoi to check_ice with frequency 1000
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate generate_local_fingerprint.
Not inlining: code size would grow by 11.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Iterations: 1
Merging blocks 8 and 212
Merging blocks 19 and 217
Merging blocks 26 and 222
Merging blocks 39 and 224
Merging blocks 53 and 226
Merging blocks 59 and 232
Merging blocks 140 and 234
Merging blocks 141 and 239
Removing basic block 183
;; basic block 183, loop depth 0, count 0
;; prev block 182, next block 244
;; pred:      
;; succ:       244 [100.0%]  (fallthru,exec)
<bb 183>:


Removing basic block 189
;; basic block 189, loop depth 0, count 0
;; prev block 188, next block 246
;; pred:      
;; succ:       246 [100.0%]  (fallthru,exec)
<bb 189>:


Merging blocks 215 and 211
Merging blocks 220 and 216
Merging blocks 225 and 228
Merging blocks 227 and 230
Merging blocks 237 and 233
Merging blocks 242 and 238
Merging blocks 244 and 243
Merging blocks 246 and 245
Merging blocks 26 and 221
Merging blocks 39 and 223
Merging blocks 53 and 225
Merging blocks 53 and 227
Merging blocks 53 and 229
Merging blocks 59 and 231


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.45460_41 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #3

Updating SSA information for statement D.45463_42 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #4

Updating SSA information for statement D.45466_43 = smh_34(D)->session;

Updating SSA information for statement D.45467_44 = D.45466_43->channel;

Updating SSA information for statement D.45468_45 = switch_channel_test_flag (D.45467_44, 103);



Registering new PHI nodes in block #5

Updating SSA information for statement engine_38->ice_in.chosen[0] = 0;

Updating SSA information for statement engine_38->ice_in.chosen[1] = 0;

Updating SSA information for statement engine_38->ice_in.cand_idx = 0;



Registering new PHI nodes in block #6

Updating SSA information for statement attr_47 = m_46(D)->m_attributes;



Registering new PHI nodes in block #7

Updating SSA information for statement attr_49 = sdp_48(D)->sdp_attributes;



Registering new PHI nodes in block #74



Registering new PHI nodes in block #8

Updating SSA information for statement D.45474_53 = attr_1->a_name;



Registering new PHI nodes in block #9

Updating SSA information for statement D.47828_640 = *D.45474_53;



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11

Updating SSA information for statement D.47827 = D.47829_641;

Updating SSA information for statement D.45475_54 = D.47827;



Registering new PHI nodes in block #13

Updating SSA information for statement D.45474_55 = attr_1->a_name;

Updating SSA information for statement D.45478_56 = strcasecmp (D.45474_55, "ice-ufrag");



Registering new PHI nodes in block #14

Updating SSA information for statement D.45466_57 = smh_34(D)->session;

Updating SSA information for statement D.45481_58 = attr_1->a_value;

Updating SSA information for statement D.45482_59 = switch_core_perform_session_strdup (D.45466_57, D.45481_58, "src/switch_core_media.c", &__func__, 2503);

Updating SSA information for statement engine_38->ice_in.ufrag = D.45482_59;



Registering new PHI nodes in block #15

Updating SSA information for statement D.45474_60 = attr_1->a_name;

Updating SSA information for statement D.45484_61 = strcasecmp (D.45474_60, "ice-pwd");



Registering new PHI nodes in block #16

Updating SSA information for statement D.45466_62 = smh_34(D)->session;

Updating SSA information for statement D.45481_63 = attr_1->a_value;

Updating SSA information for statement D.45487_64 = switch_core_perform_session_strdup (D.45466_62, D.45481_63, "src/switch_core_media.c", &__func__, 2505);

Updating SSA information for statement engine_38->ice_in.pwd = D.45487_64;



Registering new PHI nodes in block #17

Updating SSA information for statement D.45474_65 = attr_1->a_name;

Updating SSA information for statement D.45489_66 = strcasecmp (D.45474_65, "ice-options");



Registering new PHI nodes in block #18

Updating SSA information for statement D.45466_67 = smh_34(D)->session;

Updating SSA information for statement D.45481_68 = attr_1->a_value;

Updating SSA information for statement D.45492_69 = switch_core_perform_session_strdup (D.45466_67, D.45481_68, "src/switch_core_media.c", &__func__, 2507);

Updating SSA information for statement engine_38->ice_in.options = D.45492_69;



Registering new PHI nodes in block #19

Updating SSA information for statement D.45496_70 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #20

Updating SSA information for statement D.45466_71 = smh_34(D)->session;

Updating SSA information for statement D.45498_72 = dtls_ok (D.45466_71);



Registering new PHI nodes in block #21

Updating SSA information for statement D.45474_73 = attr_1->a_name;

Updating SSA information for statement D.45500_74 = strcasecmp (D.45474_73, "fingerprint");



Registering new PHI nodes in block #22

Updating SSA information for statement D.45481_75 = attr_1->a_value;



Registering new PHI nodes in block #23

Updating SSA information for statement D.47832_642 = *D.45481_75;



Registering new PHI nodes in block #24



Registering new PHI nodes in block #25

Updating SSA information for statement D.47831 = D.47833_643;

Updating SSA information for statement D.45502_76 = D.47831;



Registering new PHI nodes in block #26

Updating SSA information for statement D.45466_77 = smh_34(D)->session;

Updating SSA information for statement D.45481_78 = attr_1->a_value;

Updating SSA information for statement D.45504_79 = switch_core_perform_session_strdup (D.45466_77, D.45481_78, "src/switch_core_media.c", &__func__, 2512);

Updating SSA information for statement engine_38->remote_dtls_fingerprint.type = D.45504_79;

Updating SSA information for statement D.45505_80 = engine_38->remote_dtls_fingerprint.type;

Updating SSA information for statement p_81 = __builtin_strchr (D.45505_80, 32);



Registering new PHI nodes in block #27

Updating SSA information for statement *p_81 = 0;

Updating SSA information for statement switch_copy_string (D.45508_83, p_82, 192);



Registering new PHI nodes in block #28

Updating SSA information for statement generate_local_fingerprint (smh_34(D), type_36(D));

Updating SSA information for statement D.45466_84 = smh_34(D)->session;

Updating SSA information for statement D.45467_85 = D.45466_84->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.45467_85, 109, 1);



Registering new PHI nodes in block #29

Updating SSA information for statement D.45511_86 = engine_38->remote_ssrc;



Registering new PHI nodes in block #30

Updating SSA information for statement D.45474_87 = attr_1->a_name;

Updating SSA information for statement D.45513_88 = strcasecmp (D.45474_87, "ssrc");



Registering new PHI nodes in block #31

Updating SSA information for statement D.45481_89 = attr_1->a_value;



Registering new PHI nodes in block #32

Updating SSA information for statement D.45481_90 = attr_1->a_value;

Updating SSA information for statement D.47836_644 = strtol (D.45481_90, 0B, 10);

Updating SSA information for statement D.47835 = D.47836_644;

Updating SSA information for statement D.45516_91 = D.47835;

Updating SSA information for statement engine_38->remote_ssrc = D.45517_92;

Updating SSA information for statement D.45518_93 = engine_38->rtp_session;



Registering new PHI nodes in block #33

Updating SSA information for statement D.45511_94 = engine_38->remote_ssrc;



Registering new PHI nodes in block #34

Updating SSA information for statement D.45518_95 = engine_38->rtp_session;

Updating SSA information for statement D.45511_96 = engine_38->remote_ssrc;

Updating SSA information for statement switch_rtp_set_remote_ssrc (D.45518_95, D.45511_96);



Registering new PHI nodes in block #35

Updating SSA information for statement D.45474_97 = attr_1->a_name;

Updating SSA information for statement D.45523_98 = strcasecmp (D.45474_97, "rtcp-mux");



Registering new PHI nodes in block #36

Updating SSA information for statement engine_38->rtcp_mux = 1;

Updating SSA information for statement D.45526_99 = engine_38->cur_payload_map;

Updating SSA information for statement D.45527_100 = D.45526_99->remote_sdp_port;

Updating SSA information for statement engine_38->remote_rtcp_port = D.45527_100;



Registering new PHI nodes in block #37

Updating SSA information for statement D.45474_102 = attr_1->a_name;

Updating SSA information for statement D.45529_103 = strcasecmp (D.45474_102, "candidate");



Registering new PHI nodes in block #38

Updating SSA information for statement D.45466_104 = smh_34(D)->session;

Updating SSA information for statement D.45467_105 = D.45466_104->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.45467_105, 108, 1);

Updating SSA information for statement D.45532_106 = engine_38->cand_acl_count;



Registering new PHI nodes in block #39

Updating SSA information for statement D.45532_107 = engine_38->cand_acl_count;

Updating SSA information for statement engine_38->cand_acl[D.45532_107] = "wan.auto";

Updating SSA information for statement engine_38->cand_acl_count = D.45535_108;

Updating SSA information for statement D.45466_109 = smh_34(D)->session;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2548, D.45466_109, 4, "NO candidate ACL defined, Defaulting to wan.auto\n");



Registering new PHI nodes in block #40

Updating SSA information for statement D.45481_110 = attr_1->a_value;

Updating SSA information for statement D.45536_111 = switch_stristr (" udp ", D.45481_110);



Registering new PHI nodes in block #41



Registering new PHI nodes in block #42

Updating SSA information for statement D.45466_112 = smh_34(D)->session;

Updating SSA information for statement D.45481_113 = attr_1->a_value;

Updating SSA information for statement data_114 = switch_core_perform_session_strdup (D.45466_112, D.45481_113, "src/switch_core_media.c", &__func__, 2556);

Updating SSA information for statement D.45539_115 = switch_separate_string (data_114, 32, &fields, 15);



Registering new PHI nodes in block #43

Updating SSA information for statement D.45543_117 = engine_38->ice_in.cand_idx;



Registering new PHI nodes in block #45

Updating SSA information for statement D.45544_118 = fields[1];

Updating SSA information for statement D.47839_645 = strtol (D.45544_118, 0B, 10);

Updating SSA information for statement D.47838 = D.47839_645;

Updating SSA information for statement D.45545_119 = D.47838;



Registering new PHI nodes in block #47



Registering new PHI nodes in block #46

Updating SSA information for statement D.45466_122 = smh_34(D)->session;

Updating SSA information for statement D.45546_123 = fields[i_2];

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2569, D.45466_122, 101, "CAND %d [%s]\n", i_2, D.45546_123);



Registering new PHI nodes in block #48

Updating SSA information for statement D.45466_125 = smh_34(D)->session;

Updating SSA information for statement D.45548_127 = fields[2];

Updating SSA information for statement D.45549_128 = fields[7];

Updating SSA information for statement D.45550_129 = fields[4];

Updating SSA information for statement D.45551_130 = fields[5];

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2572, D.45466_125, 7, "Checking Candidate cid: %d proto: %s type: %s addr: %s:%s\n", D.45547_126, D.45548_127, D.45549_128, D.45550_129, D.45551_130);

Updating SSA information for statement D.45543_131 = engine_38->ice_in.cand_idx;

Updating SSA information for statement engine_38->ice_in.cand_idx = D.45552_132;

Updating SSA information for statement D.45532_134 = engine_38->cand_acl_count;



Registering new PHI nodes in block #49

Updating SSA information for statement D.45555_135 = engine_38->ice_in.chosen[cid_120];



Registering new PHI nodes in block #50

Updating SSA information for statement D.45550_136 = fields[4];

Updating SSA information for statement D.45557_137 = engine_38->cand_acl[i_133];

Updating SSA information for statement D.45558_138 = switch_check_network_list_ip_token (D.45550_136, D.45557_137, 0B);



Registering new PHI nodes in block #51

Updating SSA information for statement D.45543_139 = engine_38->ice_in.cand_idx;

Updating SSA information for statement engine_38->ice_in.chosen[cid_120] = D.45543_139;

Updating SSA information for statement D.45466_140 = smh_34(D)->session;



Registering new PHI nodes in block #52



Registering new PHI nodes in block #53



Registering new PHI nodes in block #54

Updating SSA information for statement D.45548_144 = fields[2];

Updating SSA information for statement D.45549_145 = fields[7];

Updating SSA information for statement D.45550_146 = fields[4];

Updating SSA information for statement D.45551_147 = fields[5];

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2581, D.45466_140, 5, "Choose %s Candidate cid: %d proto: %s type: %s addr: %s:%s\n", iftmp.105_13, D.45547_143, D.45548_144, D.45549_145, D.45550_146, D.45551_147);



Registering new PHI nodes in block #55

Updating SSA information for statement D.45466_148 = smh_34(D)->session;



Registering new PHI nodes in block #56



Registering new PHI nodes in block #57



Registering new PHI nodes in block #58

Updating SSA information for statement D.45548_152 = fields[2];

Updating SSA information for statement D.45549_153 = fields[7];

Updating SSA information for statement D.45550_154 = fields[4];

Updating SSA information for statement D.45551_155 = fields[5];

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2586, D.45466_148, 5, "Save %s Candidate cid: %d proto: %s type: %s addr: %s:%s\n", iftmp.106_14, D.45547_151, D.45548_152, D.45549_153, D.45550_154, D.45551_155);



Registering new PHI nodes in block #59

Updating SSA information for statement D.45543_156 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45466_157 = smh_34(D)->session;

Updating SSA information for statement D.45568_158 = fields[0];

Updating SSA information for statement D.45569_159 = switch_core_perform_session_strdup (D.45466_157, D.45568_158, "src/switch_core_media.c", &__func__, 2592);

Updating SSA information for statement engine_38->ice_in.cands[D.45543_156][cid_120].foundation = D.45569_159;

Updating SSA information for statement D.45543_160 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45544_161 = fields[1];

Updating SSA information for statement D.47842_646 = strtol (D.45544_161, 0B, 10);

Updating SSA information for statement D.47841 = D.47842_646;

Updating SSA information for statement D.45570_162 = D.47841;

Updating SSA information for statement engine_38->ice_in.cands[D.45543_160][cid_120].component_id = D.45570_162;

Updating SSA information for statement D.45543_163 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45466_164 = smh_34(D)->session;

Updating SSA information for statement D.45548_165 = fields[2];

Updating SSA information for statement D.45571_166 = switch_core_perform_session_strdup (D.45466_164, D.45548_165, "src/switch_core_media.c", &__func__, 2594);

Updating SSA information for statement engine_38->ice_in.cands[D.45543_163][cid_120].transport = D.45571_166;

Updating SSA information for statement D.45543_167 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45572_168 = fields[3];

Updating SSA information for statement D.47845_647 = strtol (D.45572_168, 0B, 10);

Updating SSA information for statement D.47844 = D.47845_647;

Updating SSA information for statement D.45573_169 = D.47844;

Updating SSA information for statement engine_38->ice_in.cands[D.45543_167][cid_120].priority = D.45574_170;

Updating SSA information for statement D.45543_171 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45466_172 = smh_34(D)->session;

Updating SSA information for statement D.45550_173 = fields[4];

Updating SSA information for statement D.45575_174 = switch_core_perform_session_strdup (D.45466_172, D.45550_173, "src/switch_core_media.c", &__func__, 2596);

Updating SSA information for statement engine_38->ice_in.cands[D.45543_171][cid_120].con_addr = D.45575_174;

Updating SSA information for statement D.45543_175 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45551_176 = fields[5];

Updating SSA information for statement D.47848_648 = strtol (D.45551_176, 0B, 10);

Updating SSA information for statement D.47847 = D.47848_648;

Updating SSA information for statement D.45576_177 = D.47847;

Updating SSA information for statement engine_38->ice_in.cands[D.45543_175][cid_120].con_port = D.45577_178;



Registering new PHI nodes in block #69



Registering new PHI nodes in block #70

Updating SSA information for statement D.45583_181 = fields[D.45582_180];



Registering new PHI nodes in block #60

Updating SSA information for statement D.45578_182 = fields[j_10];

Updating SSA information for statement D.45579_183 = strcasecmp (D.45578_182, "typ");



Registering new PHI nodes in block #61

Updating SSA information for statement D.45543_184 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45466_185 = smh_34(D)->session;

Updating SSA information for statement D.45583_187 = fields[D.45582_186];

Updating SSA information for statement D.45584_188 = switch_core_perform_session_strdup (D.45466_185, D.45583_187, "src/switch_core_media.c", &__func__, 2604);

Updating SSA information for statement engine_38->ice_in.cands[D.45543_184][cid_120].cand_type = D.45584_188;



Registering new PHI nodes in block #62

Updating SSA information for statement D.45578_189 = fields[j_10];

Updating SSA information for statement D.45586_190 = strcasecmp (D.45578_189, "raddr");



Registering new PHI nodes in block #63

Updating SSA information for statement D.45543_191 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45466_192 = smh_34(D)->session;

Updating SSA information for statement D.45583_194 = fields[D.45582_193];

Updating SSA information for statement D.45589_195 = switch_core_perform_session_strdup (D.45466_192, D.45583_194, "src/switch_core_media.c", &__func__, 2606);

Updating SSA information for statement engine_38->ice_in.cands[D.45543_191][cid_120].raddr = D.45589_195;



Registering new PHI nodes in block #64

Updating SSA information for statement D.45578_196 = fields[j_10];

Updating SSA information for statement D.45591_197 = strcasecmp (D.45578_196, "rport");



Registering new PHI nodes in block #65

Updating SSA information for statement D.45543_198 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45583_200 = fields[D.45582_199];

Updating SSA information for statement D.47851_649 = strtol (D.45583_200, 0B, 10);

Updating SSA information for statement D.47850 = D.47851_649;

Updating SSA information for statement D.45594_201 = D.47850;

Updating SSA information for statement engine_38->ice_in.cands[D.45543_198][cid_120].rport = D.45595_202;



Registering new PHI nodes in block #66

Updating SSA information for statement D.45578_203 = fields[j_10];

Updating SSA information for statement D.45597_204 = strcasecmp (D.45578_203, "generation");



Registering new PHI nodes in block #67

Updating SSA information for statement D.45543_205 = engine_38->ice_in.cand_idx;

Updating SSA information for statement D.45466_206 = smh_34(D)->session;

Updating SSA information for statement D.45583_208 = fields[D.45582_207];

Updating SSA information for statement D.45600_209 = switch_core_perform_session_strdup (D.45466_206, D.45583_208, "src/switch_core_media.c", &__func__, 2610);

Updating SSA information for statement engine_38->ice_in.cands[D.45543_205][cid_120].generation = D.45600_209;



Registering new PHI nodes in block #68



Registering new PHI nodes in block #71

Updating SSA information for statement D.45555_211 = engine_38->ice_in.chosen[cid_120];



Registering new PHI nodes in block #72

Updating SSA information for statement D.45555_212 = engine_38->ice_in.chosen[cid_120];

Updating SSA information for statement D.45604_213 = engine_38->ice_in.cands[D.45555_212][cid_120].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45555_212][cid_120].ready = D.45605_214;



Registering new PHI nodes in block #44

Updating SSA information for statement D.45466_215 = smh_34(D)->session;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2561, D.45466_215, 4, "Invalid data\n");



Registering new PHI nodes in block #12



Registering new PHI nodes in block #73

Updating SSA information for statement attr_216 = attr_1->a_next;



Registering new PHI nodes in block #75

Updating SSA information for statement D.45460_217 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #76

Updating SSA information for statement D.45463_218 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #77



Registering new PHI nodes in block #95

Updating SSA information for statement D.45543_220 = engine_38->ice_in.cand_idx;



Registering new PHI nodes in block #96

Updating SSA information for statement D.45460_221 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #97

Updating SSA information for statement D.45463_222 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #78

Updating SSA information for statement D.45460_223 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #79

Updating SSA information for statement D.45610_224 = engine_38->ice_in.cands[i_3][0].component_id;



Registering new PHI nodes in block #80

Updating SSA information for statement D.45613_225 = engine_38->ice_in.cands[i_3][0].rport;



Registering new PHI nodes in block #81

Updating SSA information for statement D.45616_226 = engine_38->ice_in.cands[i_3][0].con_addr;

Updating SSA information for statement D.45617_227 = switch_check_network_list_ip_token (D.45616_226, "localnet.auto", 0B);



Registering new PHI nodes in block #82

Updating SSA information for statement engine_38->ice_in.chosen[0] = i_3;

Updating SSA information for statement D.45460_228 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45620_229 = engine_38->ice_in.cands[D.45460_228][0].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45460_228][0].ready = D.45621_230;

Updating SSA information for statement D.45466_231 = smh_34(D)->session;



Registering new PHI nodes in block #83



Registering new PHI nodes in block #84



Registering new PHI nodes in block #85

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2636, D.45466_231, 5, "No %s RTP candidate found; defaulting to the first local one.\n", iftmp.107_15);



Registering new PHI nodes in block #86

Updating SSA information for statement D.45463_234 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #87

Updating SSA information for statement D.45628_235 = engine_38->ice_in.cands[i_3][1].component_id;



Registering new PHI nodes in block #88

Updating SSA information for statement D.45631_236 = engine_38->ice_in.cands[i_3][1].rport;



Registering new PHI nodes in block #89

Updating SSA information for statement D.45634_237 = engine_38->ice_in.cands[i_3][1].con_addr;

Updating SSA information for statement D.45635_238 = switch_check_network_list_ip_token (D.45634_237, "localnet.auto", 0B);



Registering new PHI nodes in block #90

Updating SSA information for statement engine_38->ice_in.chosen[1] = i_3;

Updating SSA information for statement D.45463_239 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45638_240 = engine_38->ice_in.cands[D.45463_239][1].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45463_239][1].ready = D.45639_241;

Updating SSA information for statement D.45466_242 = smh_34(D)->session;



Registering new PHI nodes in block #91



Registering new PHI nodes in block #92



Registering new PHI nodes in block #93

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2643, D.45466_242, 5, "No %s RTCP candidate found; defaulting to the first local one.\n", iftmp.108_16);



Registering new PHI nodes in block #94



Registering new PHI nodes in block #98

Updating SSA information for statement D.45460_246 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #99

Updating SSA information for statement D.45463_247 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #100



Registering new PHI nodes in block #116

Updating SSA information for statement D.45543_249 = engine_38->ice_in.cand_idx;



Registering new PHI nodes in block #117

Updating SSA information for statement D.45460_250 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #118

Updating SSA information for statement D.45463_251 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #101

Updating SSA information for statement D.45460_252 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #102

Updating SSA information for statement D.45610_253 = engine_38->ice_in.cands[i_4][0].component_id;



Registering new PHI nodes in block #103

Updating SSA information for statement D.45613_254 = engine_38->ice_in.cands[i_4][0].rport;



Registering new PHI nodes in block #104

Updating SSA information for statement engine_38->ice_in.chosen[0] = i_4;

Updating SSA information for statement D.45460_255 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45620_256 = engine_38->ice_in.cands[D.45460_255][0].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45460_255][0].ready = D.45621_257;

Updating SSA information for statement D.45466_258 = smh_34(D)->session;



Registering new PHI nodes in block #105



Registering new PHI nodes in block #106



Registering new PHI nodes in block #107

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2655, D.45466_258, 5, "No %s RTP candidate found; defaulting to the first srflx one.\n", iftmp.109_17);



Registering new PHI nodes in block #108

Updating SSA information for statement D.45463_261 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #109

Updating SSA information for statement D.45628_262 = engine_38->ice_in.cands[i_4][1].component_id;



Registering new PHI nodes in block #110

Updating SSA information for statement D.45631_263 = engine_38->ice_in.cands[i_4][1].rport;



Registering new PHI nodes in block #111

Updating SSA information for statement engine_38->ice_in.chosen[1] = i_4;

Updating SSA information for statement D.45463_264 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45638_265 = engine_38->ice_in.cands[D.45463_264][1].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45463_264][1].ready = D.45639_266;

Updating SSA information for statement D.45466_267 = smh_34(D)->session;



Registering new PHI nodes in block #112



Registering new PHI nodes in block #113



Registering new PHI nodes in block #114

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2661, D.45466_267, 5, "No %s RTCP candidate found; defaulting to the first srflx one.\n", iftmp.110_18);



Registering new PHI nodes in block #115



Registering new PHI nodes in block #119

Updating SSA information for statement D.45460_271 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #120

Updating SSA information for statement D.45463_272 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #121

Updating SSA information for statement D.45460_276 = engine_38->ice_in.chosen[0];

Updating SSA information for statement engine_38->ice_in.chosen[1] = D.45460_276;

Updating SSA information for statement D.45463_279 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45460_286 = engine_38->ice_in.chosen[0];

Updating SSA information for statement memcpy (D.45682_283, D.45686_289, 44);

Updating SSA information for statement D.45463_290 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45638_291 = engine_38->ice_in.cands[D.45463_290][1].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45463_290][1].ready = D.45639_292;

Updating SSA information for statement D.45466_293 = smh_34(D)->session;



Registering new PHI nodes in block #122



Registering new PHI nodes in block #123



Registering new PHI nodes in block #124

Updating SSA information for statement D.45463_296 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45691_297 = engine_38->ice_in.cands[D.45463_296][1].con_addr;

Updating SSA information for statement D.45463_298 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45692_299 = engine_38->ice_in.cands[D.45463_298][1].con_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2675, D.45466_293, 5, "No %s RTCP candidate found; defaulting to the same as RTP [%s:%d]\n", iftmp.111_19, D.45691_297, D.45693_300);



Registering new PHI nodes in block #125

Updating SSA information for statement D.45460_301 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #126

Updating SSA information for statement D.45463_302 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #127



Registering new PHI nodes in block #141

Updating SSA information for statement D.45543_304 = engine_38->ice_in.cand_idx;



Registering new PHI nodes in block #142

Updating SSA information for statement D.45460_305 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #143

Updating SSA information for statement D.45463_306 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #128

Updating SSA information for statement D.45460_307 = engine_38->ice_in.chosen[0];



Registering new PHI nodes in block #129

Updating SSA information for statement D.45610_308 = engine_38->ice_in.cands[i_5][0].component_id;



Registering new PHI nodes in block #130

Updating SSA information for statement engine_38->ice_in.chosen[0] = i_5;

Updating SSA information for statement D.45460_309 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45620_310 = engine_38->ice_in.cands[D.45460_309][0].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45460_309][0].ready = D.45621_311;

Updating SSA information for statement D.45466_312 = smh_34(D)->session;



Registering new PHI nodes in block #131



Registering new PHI nodes in block #132



Registering new PHI nodes in block #133

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2686, D.45466_312, 5, "No %s RTP candidate found; defaulting to the first one.\n", iftmp.112_20);



Registering new PHI nodes in block #134

Updating SSA information for statement D.45463_315 = engine_38->ice_in.chosen[1];



Registering new PHI nodes in block #135

Updating SSA information for statement D.45628_316 = engine_38->ice_in.cands[i_5][1].component_id;



Registering new PHI nodes in block #136

Updating SSA information for statement engine_38->ice_in.chosen[1] = i_5;

Updating SSA information for statement D.45463_317 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45638_318 = engine_38->ice_in.cands[D.45463_317][1].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45463_317][1].ready = D.45639_319;

Updating SSA information for statement D.45466_320 = smh_34(D)->session;



Registering new PHI nodes in block #137



Registering new PHI nodes in block #138



Registering new PHI nodes in block #139

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2692, D.45466_320, 5, "No %s RTCP candidate found; defaulting to the first one.\n", iftmp.113_21);



Registering new PHI nodes in block #140



Registering new PHI nodes in block #144



Registering new PHI nodes in block #156



Registering new PHI nodes in block #145

Updating SSA information for statement D.45714_325 = engine_38->ice_in.chosen[i_6];

Updating SSA information for statement D.45715_326 = engine_38->ice_in.cands[D.45714_325][i_6].ready;



Registering new PHI nodes in block #146

Updating SSA information for statement D.45720_327 = engine_38->ice_in.ufrag;



Registering new PHI nodes in block #147

Updating SSA information for statement D.47854_650 = MEM[(const char *)D.45720_327];



Registering new PHI nodes in block #148



Registering new PHI nodes in block #149

Updating SSA information for statement D.47853 = D.47855_651;

Updating SSA information for statement D.45721_328 = D.47853;



Registering new PHI nodes in block #150

Updating SSA information for statement D.45723_329 = engine_38->ice_in.pwd;



Registering new PHI nodes in block #151

Updating SSA information for statement D.47858_652 = MEM[(const char *)D.45723_329];



Registering new PHI nodes in block #152



Registering new PHI nodes in block #153

Updating SSA information for statement D.47857 = D.47859_653;

Updating SSA information for statement D.45724_330 = D.47857;



Registering new PHI nodes in block #154

Updating SSA information for statement D.45714_331 = engine_38->ice_in.chosen[i_6];

Updating SSA information for statement engine_38->ice_in.cands[D.45714_331][i_6].ready = 0;



Registering new PHI nodes in block #155



Registering new PHI nodes in block #157

Updating SSA information for statement D.45460_333 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45725_334 = engine_38->ice_in.cands[D.45460_333][0].con_addr;



Registering new PHI nodes in block #158

Updating SSA information for statement D.45460_335 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45728_336 = engine_38->ice_in.cands[D.45460_335][0].con_port;



Registering new PHI nodes in block #159

Updating SSA information for statement tmp = "";

Updating SSA information for statement D.45526_337 = engine_38->cur_payload_map;

Updating SSA information for statement D.45466_338 = smh_34(D)->session;

Updating SSA information for statement D.45460_339 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45725_340 = engine_38->ice_in.cands[D.45460_339][0].con_addr;

Updating SSA information for statement D.45731_341 = switch_core_perform_session_strdup (D.45466_338, D.45725_340, "src/switch_core_media.c", &__func__, 2709);

Updating SSA information for statement D.45526_337->remote_sdp_ip = D.45731_341;

Updating SSA information for statement D.45466_342 = smh_34(D)->session;



Registering new PHI nodes in block #160



Registering new PHI nodes in block #161



Registering new PHI nodes in block #162

Updating SSA information for statement D.45460_345 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45725_346 = engine_38->ice_in.cands[D.45460_345][0].con_addr;

Updating SSA information for statement D.45460_347 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45728_348 = engine_38->ice_in.cands[D.45460_347][0].con_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2710, D.45466_342, 5, "setting remote %s ice addr to %s:%d based on candidate\n", iftmp.114_22, D.45725_346, D.45736_349);

Updating SSA information for statement D.45460_350 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45620_351 = engine_38->ice_in.cands[D.45460_350][0].ready;

Updating SSA information for statement engine_38->ice_in.cands[D.45460_350][0].ready = D.45621_352;

Updating SSA information for statement D.45460_353 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45728_354 = engine_38->ice_in.cands[D.45460_353][0].con_port;

Updating SSA information for statement engine_38->remote_rtp_ice_port = D.45728_354;

Updating SSA information for statement D.45466_355 = smh_34(D)->session;

Updating SSA information for statement D.45460_356 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45725_357 = engine_38->ice_in.cands[D.45460_356][0].con_addr;

Updating SSA information for statement D.45737_358 = switch_core_perform_session_strdup (D.45466_355, D.45725_357, "src/switch_core_media.c", &__func__, 2716);

Updating SSA information for statement engine_38->remote_rtp_ice_addr = D.45737_358;

Updating SSA information for statement D.45526_359 = engine_38->cur_payload_map;

Updating SSA information for statement D.45466_360 = smh_34(D)->session;

Updating SSA information for statement D.45460_361 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45725_362 = engine_38->ice_in.cands[D.45460_361][0].con_addr;

Updating SSA information for statement D.45738_363 = switch_core_perform_session_strdup (D.45466_360, D.45725_362, "src/switch_core_media.c", &__func__, 2718);

Updating SSA information for statement D.45526_359->remote_sdp_ip = D.45738_363;

Updating SSA information for statement D.45526_364 = engine_38->cur_payload_map;

Updating SSA information for statement D.45460_365 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45728_366 = engine_38->ice_in.cands[D.45460_365][0].con_port;

Updating SSA information for statement D.45526_364->remote_sdp_port = D.45728_366;

Updating SSA information for statement D.45739_367 = engine_38->remote_rtcp_port;



Registering new PHI nodes in block #163

Updating SSA information for statement D.45526_368 = engine_38->cur_payload_map;

Updating SSA information for statement D.45527_369 = D.45526_368->remote_sdp_port;

Updating SSA information for statement engine_38->remote_rtcp_port = D.45527_369;



Registering new PHI nodes in block #164

Updating SSA information for statement D.45526_370 = engine_38->cur_payload_map;

Updating SSA information for statement D.45527_371 = D.45526_370->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 80, "%d", D.45742_372);

Updating SSA information for statement D.45466_373 = smh_34(D)->session;

Updating SSA information for statement D.45467_374 = D.45466_373->channel;

Updating SSA information for statement D.45526_375 = engine_38->cur_payload_map;

Updating SSA information for statement D.45743_376 = D.45526_375->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.45467_374, "remote_media_ip", D.45743_376, 1);

Updating SSA information for statement D.45466_377 = smh_34(D)->session;

Updating SSA information for statement D.45467_378 = D.45466_377->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.45467_378, "remote_media_port", &tmp, 1);



Registering new PHI nodes in block #165

Updating SSA information for statement D.45463_379 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45692_380 = engine_38->ice_in.cands[D.45463_379][1].con_port;



Registering new PHI nodes in block #166

Updating SSA information for statement D.45466_381 = smh_34(D)->session;



Registering new PHI nodes in block #167



Registering new PHI nodes in block #168



Registering new PHI nodes in block #169

Updating SSA information for statement D.45463_384 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45691_385 = engine_38->ice_in.cands[D.45463_384][1].con_addr;

Updating SSA information for statement D.45463_386 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45692_387 = engine_38->ice_in.cands[D.45463_386][1].con_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2730, D.45466_381, 5, "setting remote rtcp %s addr to %s:%d based on candidate\n", iftmp.115_23, D.45691_385, D.45693_388);

Updating SSA information for statement D.45463_389 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45692_390 = engine_38->ice_in.cands[D.45463_389][1].con_port;

Updating SSA information for statement engine_38->remote_rtcp_ice_port = D.45692_390;

Updating SSA information for statement D.45466_391 = smh_34(D)->session;

Updating SSA information for statement D.45463_392 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45691_393 = engine_38->ice_in.cands[D.45463_392][1].con_addr;

Updating SSA information for statement D.45750_394 = switch_core_perform_session_strdup (D.45466_391, D.45691_393, "src/switch_core_media.c", &__func__, 2734);

Updating SSA information for statement engine_38->remote_rtcp_ice_addr = D.45750_394;

Updating SSA information for statement D.45463_395 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45692_396 = engine_38->ice_in.cands[D.45463_395][1].con_port;

Updating SSA information for statement engine_38->remote_rtcp_port = D.45692_396;



Registering new PHI nodes in block #170



Registering new PHI nodes in block #171

Updating SSA information for statement engine_38->rtcp_mux = -1;



Registering new PHI nodes in block #172

Updating SSA information for statement D.45466_400 = smh_34(D)->session;

Updating SSA information for statement D.45467_401 = D.45466_400->channel;

Updating SSA information for statement D.45756_402 = switch_channel_test_flag (D.45467_401, 103);



Registering new PHI nodes in block #173

Updating SSA information for statement D.45518_403 = engine_38->rtp_session;

Updating SSA information for statement D.45759_404 = switch_rtp_ready (D.45518_403);



Registering new PHI nodes in block #174

Updating SSA information for statement D.45460_405 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45620_406 = engine_38->ice_in.cands[D.45460_405][0].ready;



Registering new PHI nodes in block #175

Updating SSA information for statement D.45466_407 = smh_34(D)->session;



Registering new PHI nodes in block #176



Registering new PHI nodes in block #177



Registering new PHI nodes in block #178

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2749, D.45466_407, 6, "RE-Activating %s ICE\n", iftmp.116_24);

Updating SSA information for statement D.45518_410 = engine_38->rtp_session;

Updating SSA information for statement D.45720_411 = engine_38->ice_in.ufrag;

Updating SSA information for statement D.45768_412 = engine_38->ice_out.ufrag;

Updating SSA information for statement D.45769_413 = engine_38->ice_out.pwd;

Updating SSA information for statement D.45723_414 = engine_38->ice_in.pwd;

Updating SSA information for statement D.45466_415 = smh_34(D)->session;

Updating SSA information for statement D.45771_416 = switch_ice_direction (D.45466_415);



Registering new PHI nodes in block #179



Registering new PHI nodes in block #180



Registering new PHI nodes in block #181

Updating SSA information for statement switch_rtp_activate_ice (D.45518_410, D.45720_411, D.45768_412, D.45769_413, D.45723_414, 0, iftmp.117_25, D.45775_419);



Registering new PHI nodes in block #182

Updating SSA information for statement D.45518_420 = engine_38->rtp_session;



Registering new PHI nodes in block #183

Updating SSA information for statement D.45466_421 = smh_34(D)->session;

Updating SSA information for statement D.45467_422 = D.45466_421->channel;



Registering new PHI nodes in block #184



Registering new PHI nodes in block #185



Registering new PHI nodes in block #186

Updating SSA information for statement val_425 = switch_channel_get_variable_dup (D.45467_422, iftmp.118_26, 1, -1);



Registering new PHI nodes in block #187



Registering new PHI nodes in block #188

Updating SSA information for statement D.45788_426 = smh_34(D)->mparams;

Updating SSA information for statement iftmp.119_427 = D.45788_426->rtcp_video_interval_msec;



Registering new PHI nodes in block #189

Updating SSA information for statement D.45788_428 = smh_34(D)->mparams;

Updating SSA information for statement iftmp.119_429 = D.45788_428->rtcp_audio_interval_msec;



Registering new PHI nodes in block #190



Registering new PHI nodes in block #191

Updating SSA information for statement D.45466_431 = smh_34(D)->session;

Updating SSA information for statement D.45467_432 = D.45466_431->channel;



Registering new PHI nodes in block #192



Registering new PHI nodes in block #193



Registering new PHI nodes in block #194

Updating SSA information for statement rport_435 = switch_channel_get_variable_dup (D.45467_432, iftmp.120_28, 1, -1);

Updating SSA information for statement remote_rtcp_port_436 = engine_38->remote_rtcp_port;



Registering new PHI nodes in block #195

Updating SSA information for statement D.47862_654 = strtol (rport_435, 0B, 10);

Updating SSA information for statement D.47861 = D.47862_654;

Updating SSA information for statement D.45799_440 = D.47861;



Registering new PHI nodes in block #196

Updating SSA information for statement D.45800_442 = strcasecmp (val_9, "passthru");



Registering new PHI nodes in block #197

Updating SSA information for statement D.45466_443 = smh_34(D)->session;



Registering new PHI nodes in block #198



Registering new PHI nodes in block #199



Registering new PHI nodes in block #200

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2787, D.45466_443, 6, "Activating %s RTCP PASSTHRU PORT %d\n", iftmp.121_29, D.45807_446);

Updating SSA information for statement D.45518_447 = engine_38->rtp_session;

Updating SSA information for statement D.45808_448 = engine_38->rtcp_mux;

Updating SSA information for statement switch_rtp_activate_rtcp (D.45518_447, -1, remote_rtcp_port_11, D.45809_449);



Registering new PHI nodes in block #201

Updating SSA information for statement D.47865_655 = strtol (val_9, 0B, 10);

Updating SSA information for statement D.47864 = D.47865_655;

Updating SSA information for statement interval_450 = D.47864;



Registering new PHI nodes in block #202

Updating SSA information for statement D.45466_453 = smh_34(D)->session;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2793, D.45466_453, 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_450);



Registering new PHI nodes in block #203

Updating SSA information for statement D.45466_455 = smh_34(D)->session;



Registering new PHI nodes in block #204



Registering new PHI nodes in block #205



Registering new PHI nodes in block #206

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2798, D.45466_455, 6, "Activating %s RTCP PORT %d\n", iftmp.123_30, D.45807_458);

Updating SSA information for statement D.45518_459 = engine_38->rtp_session;

Updating SSA information for statement D.45808_460 = engine_38->rtcp_mux;

Updating SSA information for statement switch_rtp_activate_rtcp (D.45518_459, interval_12, remote_rtcp_port_11, D.45809_461);



Registering new PHI nodes in block #207

Updating SSA information for statement D.45463_462 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45638_463 = engine_38->ice_in.cands[D.45463_462][1].ready;



Registering new PHI nodes in block #208

Updating SSA information for statement D.45808_464 = engine_38->rtcp_mux;



Registering new PHI nodes in block #209

Updating SSA information for statement D.45463_465 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45691_466 = engine_38->ice_in.cands[D.45463_465][1].con_addr;

Updating SSA information for statement D.45460_467 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45725_468 = engine_38->ice_in.cands[D.45460_467][0].con_addr;

Updating SSA information for statement D.38904_469 = __builtin_strcmp (D.45691_466, D.45725_468);



Registering new PHI nodes in block #210

Updating SSA information for statement D.45463_470 = engine_38->ice_in.chosen[1];

Updating SSA information for statement D.45692_471 = engine_38->ice_in.cands[D.45463_470][1].con_port;

Updating SSA information for statement D.45460_472 = engine_38->ice_in.chosen[0];

Updating SSA information for statement D.45728_473 = engine_38->ice_in.cands[D.45460_472][0].con_port;



Registering new PHI nodes in block #211

Updating SSA information for statement D.45466_474 = smh_34(D)->session;



Registering new PHI nodes in block #212



Registering new PHI nodes in block #213



Registering new PHI nodes in block #214

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2806, D.45466_474, 6, "Skipping %s RTCP ICE (Same as RTP)\n", iftmp.124_31);



Registering new PHI nodes in block #215

Updating SSA information for statement D.45466_477 = smh_34(D)->session;



Registering new PHI nodes in block #216



Registering new PHI nodes in block #217



Registering new PHI nodes in block #218

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2808, D.45466_477, 6, "Activating %s RTCP ICE\n", iftmp.125_32);

Updating SSA information for statement D.45518_480 = engine_38->rtp_session;

Updating SSA information for statement D.45720_481 = engine_38->ice_in.ufrag;

Updating SSA information for statement D.45768_482 = engine_38->ice_out.ufrag;

Updating SSA information for statement D.45769_483 = engine_38->ice_out.pwd;

Updating SSA information for statement D.45723_484 = engine_38->ice_in.pwd;

Updating SSA information for statement D.45466_485 = smh_34(D)->session;

Updating SSA information for statement D.45835_486 = switch_ice_direction (D.45466_485);



Registering new PHI nodes in block #219



Registering new PHI nodes in block #220



Registering new PHI nodes in block #221

Updating SSA information for statement switch_rtp_activate_ice (D.45518_480, D.45720_481, D.45768_482, D.45769_483, D.45723_484, 1, iftmp.126_33, D.45775_489);



Registering new PHI nodes in block #222



Symbols to be put in SSA form

{ .MEM D.47827 D.47831 D.47835 D.47838 D.47841 D.47844 D.47847 D.47850 D.47853 D.47857 D.47861 D.47864 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 223
Number of blocks to update: 222 (100%)

Affected blocks


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_engine_t * engine;
  struct sdp_attribute_t * attr;
  int i;
  int got_rtcp_mux;
  const char * val;
  static const char __func__[10] = "check_ice";

  { Scope block #176 src/switch_core_media.c:2700 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #177 Originating from :#0 

    }

  }

  { Scope block #178 src/switch_core_media.c:2700 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #179 Originating from :#0 

    }

  }

  { Scope block #180 
    char * data;
    char * fields[15];
    int argc;
    int j;
    int cid;

    { Scope block #181 src/switch_core_media.c:2608 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #182 Originating from :#0 

      }

    }

    { Scope block #183 src/switch_core_media.c:2597 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #184 Originating from :#0 

      }

    }

    { Scope block #185 src/switch_core_media.c:2595 Originating from :  extern long int atol (const char *); 
      const char * __nptr; (unused)

      { Scope block #186 Originating from :#0 

      }

    }

    { Scope block #187 src/switch_core_media.c:2593 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #188 Originating from :#0 

      }

    }

    { Scope block #189 src/switch_core_media.c:2565 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #190 Originating from :#0 

      }

    }

    { Scope block #191 src/switch_core_media.c:2530 Originating from :  extern long int atol (const char *); 
      const char * __nptr; (unused)

      { Scope block #192 Originating from :#0 

      }

    }

    { Scope block #193 src/switch_core_media.c:2509 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #194 Originating from :#0 

      }

    }

    { Scope block #195 src/switch_core_media.c:2498 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #196 Originating from :#0 

      }

    }

    { Scope block #197 
      char * p;

    }

  }

  { Scope block #198 
    char tmp[80];

  }

  { Scope block #199 
    const char * rport;
    switch_port_t remote_rtcp_port;

    { Scope block #200 src/switch_core_media.c:2783 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #201 Originating from :#0 

      }

    }

    { Scope block #202 
      int interval;

      { Scope block #203 src/switch_core_media.c:2791 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #204 Originating from :#0 

        }

      }

    }

  }

  { Scope block #205 
    size_t __s1_len; (unused)
    size_t __s2_len; (unused)

  }

}
check_ice (struct switch_media_handle_t * smh, switch_media_type_t type, struct sdp_session_t * sdp, struct sdp_media_t * m)
{
  int D.47865;
  int D.47864;
  int D.47862;
  int D.47861;
  int D.47859;
  const char D.47858;
  int D.47857;
  int D.47855;
  const char D.47854;
  int D.47853;
  int D.47851;
  int D.47850;
  int D.47848;
  int D.47847;
  long int D.47845;
  long int D.47844;
  int D.47842;
  int D.47841;
  int D.47839;
  int D.47838;
  long int D.47836;
  long int D.47835;
  int D.47833;
  const char D.47832;
  int D.47831;
  int D.47829;
  const char D.47828;
  int D.47827;
  int interval;
  switch_port_t remote_rtcp_port;
  const char * rport;
  char tmp[80];
  char * p;
  int cid;
  int j;
  int argc;
  char * fields[15];
  char * data;
  static const char __func__[10] = "check_ice";
  const char * val;
  int got_rtcp_mux;
  int i;
  struct sdp_attribute_t * attr;
  struct switch_rtp_engine_t * engine;
  switch_call_direction_t D.45835;
  switch_core_media_ice_type_t iftmp.126;
  char * iftmp.125;
  char * iftmp.124;
  int D.38904;
  char * iftmp.123;
  unsigned int D.45812;
  unsigned int interval.122;
  switch_bool_t D.45809;
  int8_t D.45808;
  int D.45807;
  char * iftmp.121;
  int D.45800;
  int D.45799;
  _Bool D.45796;
  _Bool D.45795;
  _Bool D.45794;
  char[27] * iftmp.120;
  struct switch_core_media_params_t * D.45788;
  char * iftmp.119;
  char[25] * iftmp.118;
  struct ice_t * D.45775;
  switch_call_direction_t D.45771;
  switch_core_media_ice_type_t iftmp.117;
  char * D.45769;
  char * D.45768;
  char * iftmp.116;
  uint8_t D.45759;
  uint32_t D.45756;
  _Bool D.45753;
  _Bool D.45752;
  _Bool D.45751;
  char * D.45750;
  char * iftmp.115;
  char * D.45743;
  int D.45742;
  switch_port_t D.45739;
  char * D.45738;
  char * D.45737;
  int D.45736;
  char * iftmp.114;
  char * D.45731;
  switch_port_t D.45728;
  char * D.45725;
  int D.45724;
  char * D.45723;
  int D.45721;
  char * D.45720;
  uint8_t D.45715;
  int D.45714;
  char * iftmp.113;
  char * iftmp.112;
  int D.45693;
  switch_port_t D.45692;
  char * D.45691;
  char * iftmp.111;
  const void * restrict D.45686;
  unsigned int D.45685;
  unsigned int D.45684;
  const void * restrict D.45683;
  void * restrict D.45682;
  unsigned int D.45681;
  unsigned int D.45680;
  unsigned int D.45679;
  void * restrict D.45678;
  struct icand_t * D.45677;
  _Bool D.45674;
  _Bool D.45673;
  _Bool D.45672;
  char * iftmp.110;
  char * iftmp.109;
  char * iftmp.108;
  uint8_t D.45639;
  uint8_t D.45638;
  switch_bool_t D.45635;
  char * D.45634;
  switch_port_t D.45631;
  int D.45628;
  char * iftmp.107;
  uint8_t D.45621;
  uint8_t D.45620;
  switch_bool_t D.45617;
  char * D.45616;
  switch_port_t D.45613;
  int D.45610;
  uint8_t D.45605;
  uint8_t D.45604;
  char * D.45600;
  int D.45597;
  short unsigned int D.45595;
  int D.45594;
  int D.45591;
  char * D.45589;
  int D.45586;
  char * D.45584;
  char * D.45583;
  int D.45582;
  int D.45579;
  char * D.45578;
  short unsigned int D.45577;
  int D.45576;
  char * D.45575;
  uint32_t D.45574;
  long int D.45573;
  char * D.45572;
  char * D.45571;
  int D.45570;
  char * D.45569;
  char * D.45568;
  char * iftmp.106;
  char * iftmp.105;
  switch_bool_t D.45558;
  char * D.45557;
  int D.45555;
  int D.45552;
  char * D.45551;
  char * D.45550;
  char * D.45549;
  char * D.45548;
  int D.45547;
  char * D.45546;
  int D.45545;
  char * D.45544;
  int D.45543;
  unsigned int D.45539;
  const char * D.45536;
  int D.45535;
  int D.45532;
  int D.45529;
  switch_port_t D.45527;
  struct payload_map_t * D.45526;
  int D.45523;
  struct switch_rtp_t * D.45518;
  unsigned int D.45517;
  long int D.45516;
  int D.45513;
  uint32_t D.45511;
  char[192] * D.45508;
  char * D.45505;
  char * D.45504;
  int D.45502;
  int D.45500;
  int D.45498;
  int D.45496;
  char * D.45492;
  int D.45489;
  char * D.45487;
  int D.45484;
  char * D.45482;
  const char * D.45481;
  int D.45478;
  int D.45475;
  const char * D.45474;
  uint32_t D.45468;
  struct switch_channel_t * D.45467;
  struct switch_core_session_t * D.45466;
  int D.45463;
  int D.45460;
  unsigned int D.45459;
  struct switch_rtp_engine_t[2] * D.45458;

<bb 2>:
  D.45458_35 = &smh_34(D)->engines;
  D.45459_37 = type_36(D) * 11416;
  engine_38 = D.45458_35 + D.45459_37;
  # DEBUG engine => engine_38
  i_39 = 0;
  # DEBUG i => i_39
  got_rtcp_mux_40 = 0;
  # DEBUG got_rtcp_mux => got_rtcp_mux_40
  D.45460_41 = engine_38->ice_in.chosen[0];
  if (D.45460_41 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 3>:
  D.45463_42 = engine_38->ice_in.chosen[1];
  if (D.45463_42 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  D.45466_43 = smh_34(D)->session;
  D.45467_44 = D.45466_43->channel;
  D.45468_45 = switch_channel_test_flag (D.45467_44, 103);
  if (D.45468_45 == 0)
    goto <bb 222>;
  else
    goto <bb 5>;

<bb 5>:
  engine_38->ice_in.chosen[0] = 0;
  engine_38->ice_in.chosen[1] = 0;
  engine_38->ice_in.cand_idx = 0;
  if (m_46(D) != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  attr_47 = m_46(D)->m_attributes;
  # DEBUG attr => attr_47
  goto <bb 74>;

<bb 7>:
  attr_49 = sdp_48(D)->sdp_attributes;
  # DEBUG attr => attr_49
  goto <bb 74>;

<bb 8>:
  argc_50 = 0;
  # DEBUG argc => argc_50
  j_51 = 0;
  # DEBUG j => j_51
  cid_52 = 0;
  # DEBUG cid => cid_52
  D.45474_53 = attr_1->a_name;
  # DEBUG s => D.45474_53
  if (D.45474_53 == 0B)
    goto <bb 11>;
  else
    goto <bb 9>;

<bb 9>:
  D.47828_640 = *D.45474_53;
  if (D.47828_640 == 0)
    goto <bb 11>;
  else
    goto <bb 10>;

<bb 10>:

<bb 11>:
  # D.47829_641 = PHI <1(8), 1(9), 0(10)>
  D.47827_657 = D.47829_641;
  D.45475_54 = D.47827_657;
  if (D.45475_54 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  // predicted unlikely by continue predictor.
  goto <bb 73>;

<bb 13>:
  D.45474_55 = attr_1->a_name;
  D.45478_56 = strcasecmp (D.45474_55, "ice-ufrag");
  if (D.45478_56 == 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.45466_57 = smh_34(D)->session;
  D.45481_58 = attr_1->a_value;
  D.45482_59 = switch_core_perform_session_strdup (D.45466_57, D.45481_58, "src/switch_core_media.c", &__func__, 2503);
  engine_38->ice_in.ufrag = D.45482_59;
  goto <bb 73>;

<bb 15>:
  D.45474_60 = attr_1->a_name;
  D.45484_61 = strcasecmp (D.45474_60, "ice-pwd");
  if (D.45484_61 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.45466_62 = smh_34(D)->session;
  D.45481_63 = attr_1->a_value;
  D.45487_64 = switch_core_perform_session_strdup (D.45466_62, D.45481_63, "src/switch_core_media.c", &__func__, 2505);
  engine_38->ice_in.pwd = D.45487_64;
  goto <bb 73>;

<bb 17>:
  D.45474_65 = attr_1->a_name;
  D.45489_66 = strcasecmp (D.45474_65, "ice-options");
  if (D.45489_66 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.45466_67 = smh_34(D)->session;
  D.45481_68 = attr_1->a_value;
  D.45492_69 = switch_core_perform_session_strdup (D.45466_67, D.45481_68, "src/switch_core_media.c", &__func__, 2507);
  engine_38->ice_in.options = D.45492_69;
  goto <bb 73>;

<bb 19>:
  D.45496_70 = switch_rtp_has_dtls ();
  if (D.45496_70 != 0)
    goto <bb 20>;
  else
    goto <bb 29>;

<bb 20>:
  D.45466_71 = smh_34(D)->session;
  D.45498_72 = dtls_ok (D.45466_71);
  if (D.45498_72 != 0)
    goto <bb 21>;
  else
    goto <bb 29>;

<bb 21>:
  D.45474_73 = attr_1->a_name;
  D.45500_74 = strcasecmp (D.45474_73, "fingerprint");
  if (D.45500_74 == 0)
    goto <bb 22>;
  else
    goto <bb 29>;

<bb 22>:
  D.45481_75 = attr_1->a_value;
  # DEBUG s => D.45481_75
  if (D.45481_75 == 0B)
    goto <bb 25>;
  else
    goto <bb 23>;

<bb 23>:
  D.47832_642 = *D.45481_75;
  if (D.47832_642 == 0)
    goto <bb 25>;
  else
    goto <bb 24>;

<bb 24>:

<bb 25>:
  # D.47833_643 = PHI <1(22), 1(23), 0(24)>
  D.47831_658 = D.47833_643;
  D.45502_76 = D.47831_658;
  if (D.45502_76 == 0)
    goto <bb 26>;
  else
    goto <bb 29>;

<bb 26>:
  D.45466_77 = smh_34(D)->session;
  D.45481_78 = attr_1->a_value;
  D.45504_79 = switch_core_perform_session_strdup (D.45466_77, D.45481_78, "src/switch_core_media.c", &__func__, 2512);
  engine_38->remote_dtls_fingerprint.type = D.45504_79;
  D.45505_80 = engine_38->remote_dtls_fingerprint.type;
  p_81 = __builtin_strchr (D.45505_80, 32);
  # DEBUG p => p_81
  if (p_81 != 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  *p_81 = 0;
  p_82 = p_81 + 1;
  # DEBUG p => p_82
  D.45508_83 = &engine_38->local_dtls_fingerprint.str;
  switch_copy_string (D.45508_83, p_82, 192);

<bb 28>:
  generate_local_fingerprint (smh_34(D), type_36(D));
  D.45466_84 = smh_34(D)->session;
  D.45467_85 = D.45466_84->channel;
  switch_channel_set_flag_value (D.45467_85, 109, 1);
  goto <bb 73>;

<bb 29>:
  D.45511_86 = engine_38->remote_ssrc;
  if (D.45511_86 == 0)
    goto <bb 30>;
  else
    goto <bb 35>;

<bb 30>:
  D.45474_87 = attr_1->a_name;
  D.45513_88 = strcasecmp (D.45474_87, "ssrc");
  if (D.45513_88 == 0)
    goto <bb 31>;
  else
    goto <bb 35>;

<bb 31>:
  D.45481_89 = attr_1->a_value;
  if (D.45481_89 != 0B)
    goto <bb 32>;
  else
    goto <bb 35>;

<bb 32>:
  D.45481_90 = attr_1->a_value;
  # DEBUG __nptr => D.45481_90
  D.47836_644 = strtol (D.45481_90, 0B, 10);
  D.47835_660 = D.47836_644;
  D.45516_91 = D.47835_660;
  D.45517_92 = (unsigned int) D.45516_91;
  engine_38->remote_ssrc = D.45517_92;
  D.45518_93 = engine_38->rtp_session;
  if (D.45518_93 != 0B)
    goto <bb 33>;
  else
    goto <bb 73>;

<bb 33>:
  D.45511_94 = engine_38->remote_ssrc;
  if (D.45511_94 != 0)
    goto <bb 34>;
  else
    goto <bb 73>;

<bb 34>:
  D.45518_95 = engine_38->rtp_session;
  D.45511_96 = engine_38->remote_ssrc;
  switch_rtp_set_remote_ssrc (D.45518_95, D.45511_96);
  goto <bb 73>;

<bb 35>:
  D.45474_97 = attr_1->a_name;
  D.45523_98 = strcasecmp (D.45474_97, "rtcp-mux");
  if (D.45523_98 == 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  engine_38->rtcp_mux = 1;
  D.45526_99 = engine_38->cur_payload_map;
  D.45527_100 = D.45526_99->remote_sdp_port;
  engine_38->remote_rtcp_port = D.45527_100;
  got_rtcp_mux_101 = got_rtcp_mux_8 + 1;
  # DEBUG got_rtcp_mux => got_rtcp_mux_101
  goto <bb 73>;

<bb 37>:
  D.45474_102 = attr_1->a_name;
  D.45529_103 = strcasecmp (D.45474_102, "candidate");
  if (D.45529_103 == 0)
    goto <bb 38>;
  else
    goto <bb 73>;

<bb 38>:
  D.45466_104 = smh_34(D)->session;
  D.45467_105 = D.45466_104->channel;
  switch_channel_set_flag_value (D.45467_105, 108, 1);
  D.45532_106 = engine_38->cand_acl_count;
  if (D.45532_106 == 0)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.45532_107 = engine_38->cand_acl_count;
  engine_38->cand_acl[D.45532_107] = "wan.auto";
  D.45535_108 = D.45532_107 + 1;
  engine_38->cand_acl_count = D.45535_108;
  D.45466_109 = smh_34(D)->session;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2548, D.45466_109, 4, "NO candidate ACL defined, Defaulting to wan.auto\n");

<bb 40>:
  D.45481_110 = attr_1->a_value;
  D.45536_111 = switch_stristr (" udp ", D.45481_110);
  if (D.45536_111 == 0B)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  // predicted unlikely by continue predictor.
  goto <bb 73>;

<bb 42>:
  D.45466_112 = smh_34(D)->session;
  D.45481_113 = attr_1->a_value;
  data_114 = switch_core_perform_session_strdup (D.45466_112, D.45481_113, "src/switch_core_media.c", &__func__, 2556);
  # DEBUG data => data_114
  D.45539_115 = switch_separate_string (data_114, 32, &fields, 15);
  argc_116 = (int) D.45539_115;
  # DEBUG argc => argc_116
  if (argc_116 <= 4)
    goto <bb 44>;
  else
    goto <bb 43>;

<bb 43>:
  D.45543_117 = engine_38->ice_in.cand_idx;
  if (D.45543_117 > 48)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  D.45466_215 = smh_34(D)->session;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2561, D.45466_215, 4, "Invalid data\n");
  // predicted unlikely by continue predictor.
  goto <bb 73>;

<bb 45>:
  D.45544_118 = fields[1];
  # DEBUG __nptr => D.45544_118
  D.47839_645 = strtol (D.45544_118, 0B, 10);
  D.47838_662 = D.47839_645;
  D.45545_119 = D.47838_662;
  cid_120 = D.45545_119 + -1;
  # DEBUG cid => cid_120
  i_121 = 0;
  # DEBUG i => i_121
  goto <bb 47>;

<bb 46>:
  D.45466_122 = smh_34(D)->session;
  D.45546_123 = fields[i_2];
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2569, D.45466_122, 101, "CAND %d [%s]\n", i_2, D.45546_123);
  i_124 = i_2 + 1;
  # DEBUG i => i_124

<bb 47>:
  # i_2 = PHI <i_121(45), i_124(46)>
  # DEBUG i => i_2
  if (i_2 < argc_116)
    goto <bb 46>;
  else
    goto <bb 48>;

<bb 48>:
  D.45466_125 = smh_34(D)->session;
  D.45547_126 = cid_120 + 1;
  D.45548_127 = fields[2];
  D.45549_128 = fields[7];
  D.45550_129 = fields[4];
  D.45551_130 = fields[5];
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2572, D.45466_125, 7, "Checking Candidate cid: %d proto: %s type: %s addr: %s:%s\n", D.45547_126, D.45548_127, D.45549_128, D.45550_129, D.45551_130);
  D.45543_131 = engine_38->ice_in.cand_idx;
  D.45552_132 = D.45543_131 + 1;
  engine_38->ice_in.cand_idx = D.45552_132;
  i_133 = 0;
  # DEBUG i => i_133
  D.45532_134 = engine_38->cand_acl_count;
  if (D.45532_134 > i_133)
    goto <bb 49>;
  else
    goto <bb 73>;

<bb 49>:
  D.45555_135 = engine_38->ice_in.chosen[cid_120];
  if (D.45555_135 == 0)
    goto <bb 50>;
  else
    goto <bb 55>;

<bb 50>:
  D.45550_136 = fields[4];
  D.45557_137 = engine_38->cand_acl[i_133];
  D.45558_138 = switch_check_network_list_ip_token (D.45550_136, D.45557_137, 0B);
  if (D.45558_138 != 0)
    goto <bb 51>;
  else
    goto <bb 55>;

<bb 51>:
  D.45543_139 = engine_38->ice_in.cand_idx;
  engine_38->ice_in.chosen[cid_120] = D.45543_139;
  D.45466_140 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 52>;
  else
    goto <bb 53>;

<bb 52>:
  iftmp.105_141 = "video";
  goto <bb 54>;

<bb 53>:
  iftmp.105_142 = "audio";

<bb 54>:
  # iftmp.105_13 = PHI <iftmp.105_141(52), iftmp.105_142(53)>
  D.45547_143 = cid_120 + 1;
  D.45548_144 = fields[2];
  D.45549_145 = fields[7];
  D.45550_146 = fields[4];
  D.45551_147 = fields[5];
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2581, D.45466_140, 5, "Choose %s Candidate cid: %d proto: %s type: %s addr: %s:%s\n", iftmp.105_13, D.45547_143, D.45548_144, D.45549_145, D.45550_146, D.45551_147);
  goto <bb 59>;

<bb 55>:
  D.45466_148 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 56>;
  else
    goto <bb 57>;

<bb 56>:
  iftmp.106_149 = "video";
  goto <bb 58>;

<bb 57>:
  iftmp.106_150 = "audio";

<bb 58>:
  # iftmp.106_14 = PHI <iftmp.106_149(56), iftmp.106_150(57)>
  D.45547_151 = cid_120 + 1;
  D.45548_152 = fields[2];
  D.45549_153 = fields[7];
  D.45550_154 = fields[4];
  D.45551_155 = fields[5];
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2586, D.45466_148, 5, "Save %s Candidate cid: %d proto: %s type: %s addr: %s:%s\n", iftmp.106_14, D.45547_151, D.45548_152, D.45549_153, D.45550_154, D.45551_155);

<bb 59>:
  D.45543_156 = engine_38->ice_in.cand_idx;
  D.45466_157 = smh_34(D)->session;
  D.45568_158 = fields[0];
  D.45569_159 = switch_core_perform_session_strdup (D.45466_157, D.45568_158, "src/switch_core_media.c", &__func__, 2592);
  engine_38->ice_in.cands[D.45543_156][cid_120].foundation = D.45569_159;
  D.45543_160 = engine_38->ice_in.cand_idx;
  D.45544_161 = fields[1];
  # DEBUG __nptr => D.45544_161
  D.47842_646 = strtol (D.45544_161, 0B, 10);
  D.47841_664 = D.47842_646;
  D.45570_162 = D.47841_664;
  engine_38->ice_in.cands[D.45543_160][cid_120].component_id = D.45570_162;
  D.45543_163 = engine_38->ice_in.cand_idx;
  D.45466_164 = smh_34(D)->session;
  D.45548_165 = fields[2];
  D.45571_166 = switch_core_perform_session_strdup (D.45466_164, D.45548_165, "src/switch_core_media.c", &__func__, 2594);
  engine_38->ice_in.cands[D.45543_163][cid_120].transport = D.45571_166;
  D.45543_167 = engine_38->ice_in.cand_idx;
  D.45572_168 = fields[3];
  # DEBUG __nptr => D.45572_168
  D.47845_647 = strtol (D.45572_168, 0B, 10);
  D.47844_666 = D.47845_647;
  D.45573_169 = D.47844_666;
  D.45574_170 = (uint32_t) D.45573_169;
  engine_38->ice_in.cands[D.45543_167][cid_120].priority = D.45574_170;
  D.45543_171 = engine_38->ice_in.cand_idx;
  D.45466_172 = smh_34(D)->session;
  D.45550_173 = fields[4];
  D.45575_174 = switch_core_perform_session_strdup (D.45466_172, D.45550_173, "src/switch_core_media.c", &__func__, 2596);
  engine_38->ice_in.cands[D.45543_171][cid_120].con_addr = D.45575_174;
  D.45543_175 = engine_38->ice_in.cand_idx;
  D.45551_176 = fields[5];
  # DEBUG __nptr => D.45551_176
  D.47848_648 = strtol (D.45551_176, 0B, 10);
  D.47847_668 = D.47848_648;
  D.45576_177 = D.47847_668;
  D.45577_178 = (short unsigned int) D.45576_177;
  engine_38->ice_in.cands[D.45543_175][cid_120].con_port = D.45577_178;
  j_179 = 6;
  # DEBUG j => j_179
  goto <bb 69>;

<bb 60>:
  D.45578_182 = fields[j_10];
  D.45579_183 = strcasecmp (D.45578_182, "typ");
  if (D.45579_183 == 0)
    goto <bb 61>;
  else
    goto <bb 62>;

<bb 61>:
  D.45543_184 = engine_38->ice_in.cand_idx;
  D.45466_185 = smh_34(D)->session;
  D.45582_186 = j_10 + 1;
  D.45583_187 = fields[D.45582_186];
  D.45584_188 = switch_core_perform_session_strdup (D.45466_185, D.45583_187, "src/switch_core_media.c", &__func__, 2604);
  engine_38->ice_in.cands[D.45543_184][cid_120].cand_type = D.45584_188;
  goto <bb 68>;

<bb 62>:
  D.45578_189 = fields[j_10];
  D.45586_190 = strcasecmp (D.45578_189, "raddr");
  if (D.45586_190 == 0)
    goto <bb 63>;
  else
    goto <bb 64>;

<bb 63>:
  D.45543_191 = engine_38->ice_in.cand_idx;
  D.45466_192 = smh_34(D)->session;
  D.45582_193 = j_10 + 1;
  D.45583_194 = fields[D.45582_193];
  D.45589_195 = switch_core_perform_session_strdup (D.45466_192, D.45583_194, "src/switch_core_media.c", &__func__, 2606);
  engine_38->ice_in.cands[D.45543_191][cid_120].raddr = D.45589_195;
  goto <bb 68>;

<bb 64>:
  D.45578_196 = fields[j_10];
  D.45591_197 = strcasecmp (D.45578_196, "rport");
  if (D.45591_197 == 0)
    goto <bb 65>;
  else
    goto <bb 66>;

<bb 65>:
  D.45543_198 = engine_38->ice_in.cand_idx;
  D.45582_199 = j_10 + 1;
  D.45583_200 = fields[D.45582_199];
  # DEBUG __nptr => D.45583_200
  D.47851_649 = strtol (D.45583_200, 0B, 10);
  D.47850_670 = D.47851_649;
  D.45594_201 = D.47850_670;
  D.45595_202 = (short unsigned int) D.45594_201;
  engine_38->ice_in.cands[D.45543_198][cid_120].rport = D.45595_202;
  goto <bb 68>;

<bb 66>:
  D.45578_203 = fields[j_10];
  D.45597_204 = strcasecmp (D.45578_203, "generation");
  if (D.45597_204 == 0)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  D.45543_205 = engine_38->ice_in.cand_idx;
  D.45466_206 = smh_34(D)->session;
  D.45582_207 = j_10 + 1;
  D.45583_208 = fields[D.45582_207];
  D.45600_209 = switch_core_perform_session_strdup (D.45466_206, D.45583_208, "src/switch_core_media.c", &__func__, 2610);
  engine_38->ice_in.cands[D.45543_205][cid_120].generation = D.45600_209;

<bb 68>:
  j_210 = j_10 + 2;
  # DEBUG j => j_210

<bb 69>:
  # j_10 = PHI <j_179(59), j_210(68)>
  # DEBUG j => j_10
  if (j_10 < argc_116)
    goto <bb 70>;
  else
    goto <bb 71>;

<bb 70>:
  D.45582_180 = j_10 + 1;
  D.45583_181 = fields[D.45582_180];
  if (D.45583_181 != 0B)
    goto <bb 60>;
  else
    goto <bb 71>;

<bb 71>:
  D.45555_211 = engine_38->ice_in.chosen[cid_120];
  if (D.45555_211 != 0)
    goto <bb 72>;
  else
    goto <bb 73>;

<bb 72>:
  D.45555_212 = engine_38->ice_in.chosen[cid_120];
  D.45604_213 = engine_38->ice_in.cands[D.45555_212][cid_120].ready;
  D.45605_214 = D.45604_213 + 1;
  engine_38->ice_in.cands[D.45555_212][cid_120].ready = D.45605_214;

<bb 73>:
  # got_rtcp_mux_7 = PHI <got_rtcp_mux_8(12), got_rtcp_mux_8(14), got_rtcp_mux_8(16), got_rtcp_mux_8(18), got_rtcp_mux_8(28), got_rtcp_mux_8(33), got_rtcp_mux_101(36), got_rtcp_mux_8(37), got_rtcp_mux_8(41), got_rtcp_mux_8(44), got_rtcp_mux_8(72), got_rtcp_mux_8(48), got_rtcp_mux_8(32), got_rtcp_mux_8(34), got_rtcp_mux_8(71)>
  # DEBUG got_rtcp_mux => got_rtcp_mux_7
  attr_216 = attr_1->a_next;
  # DEBUG attr => attr_216

<bb 74>:
  # attr_1 = PHI <attr_49(7), attr_216(73), attr_47(6)>
  # got_rtcp_mux_8 = PHI <got_rtcp_mux_40(7), got_rtcp_mux_7(73), got_rtcp_mux_40(6)>
  # DEBUG got_rtcp_mux => got_rtcp_mux_8
  # DEBUG attr => attr_1
  if (attr_1 != 0B)
    goto <bb 8>;
  else
    goto <bb 75>;

<bb 75>:
  D.45460_217 = engine_38->ice_in.chosen[0];
  if (D.45460_217 == 0)
    goto <bb 77>;
  else
    goto <bb 76>;

<bb 76>:
  D.45463_218 = engine_38->ice_in.chosen[1];
  if (D.45463_218 == 0)
    goto <bb 77>;
  else
    goto <bb 98>;

<bb 77>:
  i_219 = 0;
  # DEBUG i => i_219
  goto <bb 95>;

<bb 78>:
  D.45460_223 = engine_38->ice_in.chosen[0];
  if (D.45460_223 == 0)
    goto <bb 79>;
  else
    goto <bb 86>;

<bb 79>:
  D.45610_224 = engine_38->ice_in.cands[i_3][0].component_id;
  if (D.45610_224 == 1)
    goto <bb 80>;
  else
    goto <bb 86>;

<bb 80>:
  D.45613_225 = engine_38->ice_in.cands[i_3][0].rport;
  if (D.45613_225 == 0)
    goto <bb 81>;
  else
    goto <bb 86>;

<bb 81>:
  D.45616_226 = engine_38->ice_in.cands[i_3][0].con_addr;
  D.45617_227 = switch_check_network_list_ip_token (D.45616_226, "localnet.auto", 0B);
  if (D.45617_227 != 0)
    goto <bb 82>;
  else
    goto <bb 86>;

<bb 82>:
  engine_38->ice_in.chosen[0] = i_3;
  D.45460_228 = engine_38->ice_in.chosen[0];
  D.45620_229 = engine_38->ice_in.cands[D.45460_228][0].ready;
  D.45621_230 = D.45620_229 + 1;
  engine_38->ice_in.cands[D.45460_228][0].ready = D.45621_230;
  D.45466_231 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 83>;
  else
    goto <bb 84>;

<bb 83>:
  iftmp.107_232 = "video";
  goto <bb 85>;

<bb 84>:
  iftmp.107_233 = "audio";

<bb 85>:
  # iftmp.107_15 = PHI <iftmp.107_232(83), iftmp.107_233(84)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2636, D.45466_231, 5, "No %s RTP candidate found; defaulting to the first local one.\n", iftmp.107_15);

<bb 86>:
  D.45463_234 = engine_38->ice_in.chosen[1];
  if (D.45463_234 == 0)
    goto <bb 87>;
  else
    goto <bb 94>;

<bb 87>:
  D.45628_235 = engine_38->ice_in.cands[i_3][1].component_id;
  if (D.45628_235 == 2)
    goto <bb 88>;
  else
    goto <bb 94>;

<bb 88>:
  D.45631_236 = engine_38->ice_in.cands[i_3][1].rport;
  if (D.45631_236 == 0)
    goto <bb 89>;
  else
    goto <bb 94>;

<bb 89>:
  D.45634_237 = engine_38->ice_in.cands[i_3][1].con_addr;
  D.45635_238 = switch_check_network_list_ip_token (D.45634_237, "localnet.auto", 0B);
  if (D.45635_238 != 0)
    goto <bb 90>;
  else
    goto <bb 94>;

<bb 90>:
  engine_38->ice_in.chosen[1] = i_3;
  D.45463_239 = engine_38->ice_in.chosen[1];
  D.45638_240 = engine_38->ice_in.cands[D.45463_239][1].ready;
  D.45639_241 = D.45638_240 + 1;
  engine_38->ice_in.cands[D.45463_239][1].ready = D.45639_241;
  D.45466_242 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 91>;
  else
    goto <bb 92>;

<bb 91>:
  iftmp.108_243 = "video";
  goto <bb 93>;

<bb 92>:
  iftmp.108_244 = "audio";

<bb 93>:
  # iftmp.108_16 = PHI <iftmp.108_243(91), iftmp.108_244(92)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2643, D.45466_242, 5, "No %s RTCP candidate found; defaulting to the first local one.\n", iftmp.108_16);

<bb 94>:
  i_245 = i_3 + 1;
  # DEBUG i => i_245

<bb 95>:
  # i_3 = PHI <i_219(77), i_245(94)>
  # DEBUG i => i_3
  D.45543_220 = engine_38->ice_in.cand_idx;
  if (D.45543_220 >= i_3)
    goto <bb 96>;
  else
    goto <bb 98>;

<bb 96>:
  D.45460_221 = engine_38->ice_in.chosen[0];
  if (D.45460_221 == 0)
    goto <bb 78>;
  else
    goto <bb 97>;

<bb 97>:
  D.45463_222 = engine_38->ice_in.chosen[1];
  if (D.45463_222 == 0)
    goto <bb 78>;
  else
    goto <bb 98>;

<bb 98>:
  D.45460_246 = engine_38->ice_in.chosen[0];
  if (D.45460_246 == 0)
    goto <bb 100>;
  else
    goto <bb 99>;

<bb 99>:
  D.45463_247 = engine_38->ice_in.chosen[1];
  if (D.45463_247 == 0)
    goto <bb 100>;
  else
    goto <bb 119>;

<bb 100>:
  i_248 = 0;
  # DEBUG i => i_248
  goto <bb 116>;

<bb 101>:
  D.45460_252 = engine_38->ice_in.chosen[0];
  if (D.45460_252 == 0)
    goto <bb 102>;
  else
    goto <bb 108>;

<bb 102>:
  D.45610_253 = engine_38->ice_in.cands[i_4][0].component_id;
  if (D.45610_253 == 1)
    goto <bb 103>;
  else
    goto <bb 108>;

<bb 103>:
  D.45613_254 = engine_38->ice_in.cands[i_4][0].rport;
  if (D.45613_254 != 0)
    goto <bb 104>;
  else
    goto <bb 108>;

<bb 104>:
  engine_38->ice_in.chosen[0] = i_4;
  D.45460_255 = engine_38->ice_in.chosen[0];
  D.45620_256 = engine_38->ice_in.cands[D.45460_255][0].ready;
  D.45621_257 = D.45620_256 + 1;
  engine_38->ice_in.cands[D.45460_255][0].ready = D.45621_257;
  D.45466_258 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 105>;
  else
    goto <bb 106>;

<bb 105>:
  iftmp.109_259 = "video";
  goto <bb 107>;

<bb 106>:
  iftmp.109_260 = "audio";

<bb 107>:
  # iftmp.109_17 = PHI <iftmp.109_259(105), iftmp.109_260(106)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2655, D.45466_258, 5, "No %s RTP candidate found; defaulting to the first srflx one.\n", iftmp.109_17);

<bb 108>:
  D.45463_261 = engine_38->ice_in.chosen[1];
  if (D.45463_261 == 0)
    goto <bb 109>;
  else
    goto <bb 115>;

<bb 109>:
  D.45628_262 = engine_38->ice_in.cands[i_4][1].component_id;
  if (D.45628_262 == 2)
    goto <bb 110>;
  else
    goto <bb 115>;

<bb 110>:
  D.45631_263 = engine_38->ice_in.cands[i_4][1].rport;
  if (D.45631_263 != 0)
    goto <bb 111>;
  else
    goto <bb 115>;

<bb 111>:
  engine_38->ice_in.chosen[1] = i_4;
  D.45463_264 = engine_38->ice_in.chosen[1];
  D.45638_265 = engine_38->ice_in.cands[D.45463_264][1].ready;
  D.45639_266 = D.45638_265 + 1;
  engine_38->ice_in.cands[D.45463_264][1].ready = D.45639_266;
  D.45466_267 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 112>;
  else
    goto <bb 113>;

<bb 112>:
  iftmp.110_268 = "video";
  goto <bb 114>;

<bb 113>:
  iftmp.110_269 = "audio";

<bb 114>:
  # iftmp.110_18 = PHI <iftmp.110_268(112), iftmp.110_269(113)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2661, D.45466_267, 5, "No %s RTCP candidate found; defaulting to the first srflx one.\n", iftmp.110_18);

<bb 115>:
  i_270 = i_4 + 1;
  # DEBUG i => i_270

<bb 116>:
  # i_4 = PHI <i_248(100), i_270(115)>
  # DEBUG i => i_4
  D.45543_249 = engine_38->ice_in.cand_idx;
  if (D.45543_249 >= i_4)
    goto <bb 117>;
  else
    goto <bb 119>;

<bb 117>:
  D.45460_250 = engine_38->ice_in.chosen[0];
  if (D.45460_250 == 0)
    goto <bb 101>;
  else
    goto <bb 118>;

<bb 118>:
  D.45463_251 = engine_38->ice_in.chosen[1];
  if (D.45463_251 == 0)
    goto <bb 101>;
  else
    goto <bb 119>;

<bb 119>:
  D.45460_271 = engine_38->ice_in.chosen[0];
  if (D.45460_271 != 0)
    goto <bb 120>;
  else
    goto <bb 125>;

<bb 120>:
  D.45463_272 = engine_38->ice_in.chosen[1];
  D.45672_273 = D.45463_272 == 0;
  D.45673_274 = got_rtcp_mux_8 != 0;
  D.45674_275 = D.45672_273 && D.45673_274;
  if (D.45674_275 != 0)
    goto <bb 121>;
  else
    goto <bb 125>;

<bb 121>:
  D.45460_276 = engine_38->ice_in.chosen[0];
  engine_38->ice_in.chosen[1] = D.45460_276;
  D.45677_277 = &engine_38->ice_in.cands[0][0];
  D.45678_278 = (void * restrict) D.45677_277;
  D.45463_279 = engine_38->ice_in.chosen[1];
  D.45679_280 = (unsigned int) D.45463_279;
  D.45680_281 = D.45679_280 * 88;
  D.45681_282 = D.45680_281 + 44;
  D.45682_283 = D.45678_278 + D.45681_282;
  D.45677_284 = &engine_38->ice_in.cands[0][0];
  D.45683_285 = (const void * restrict) D.45677_284;
  D.45460_286 = engine_38->ice_in.chosen[0];
  D.45684_287 = (unsigned int) D.45460_286;
  D.45685_288 = D.45684_287 * 88;
  D.45686_289 = D.45683_285 + D.45685_288;
  memcpy (D.45682_283, D.45686_289, 44);
  D.45463_290 = engine_38->ice_in.chosen[1];
  D.45638_291 = engine_38->ice_in.cands[D.45463_290][1].ready;
  D.45639_292 = D.45638_291 + 1;
  engine_38->ice_in.cands[D.45463_290][1].ready = D.45639_292;
  D.45466_293 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 122>;
  else
    goto <bb 123>;

<bb 122>:
  iftmp.111_294 = "video";
  goto <bb 124>;

<bb 123>:
  iftmp.111_295 = "audio";

<bb 124>:
  # iftmp.111_19 = PHI <iftmp.111_294(122), iftmp.111_295(123)>
  D.45463_296 = engine_38->ice_in.chosen[1];
  D.45691_297 = engine_38->ice_in.cands[D.45463_296][1].con_addr;
  D.45463_298 = engine_38->ice_in.chosen[1];
  D.45692_299 = engine_38->ice_in.cands[D.45463_298][1].con_port;
  D.45693_300 = (int) D.45692_299;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2675, D.45466_293, 5, "No %s RTCP candidate found; defaulting to the same as RTP [%s:%d]\n", iftmp.111_19, D.45691_297, D.45693_300);

<bb 125>:
  D.45460_301 = engine_38->ice_in.chosen[0];
  if (D.45460_301 == 0)
    goto <bb 127>;
  else
    goto <bb 126>;

<bb 126>:
  D.45463_302 = engine_38->ice_in.chosen[1];
  if (D.45463_302 == 0)
    goto <bb 127>;
  else
    goto <bb 144>;

<bb 127>:
  i_303 = 0;
  # DEBUG i => i_303
  goto <bb 141>;

<bb 128>:
  D.45460_307 = engine_38->ice_in.chosen[0];
  if (D.45460_307 == 0)
    goto <bb 129>;
  else
    goto <bb 134>;

<bb 129>:
  D.45610_308 = engine_38->ice_in.cands[i_5][0].component_id;
  if (D.45610_308 == 1)
    goto <bb 130>;
  else
    goto <bb 134>;

<bb 130>:
  engine_38->ice_in.chosen[0] = i_5;
  D.45460_309 = engine_38->ice_in.chosen[0];
  D.45620_310 = engine_38->ice_in.cands[D.45460_309][0].ready;
  D.45621_311 = D.45620_310 + 1;
  engine_38->ice_in.cands[D.45460_309][0].ready = D.45621_311;
  D.45466_312 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 131>;
  else
    goto <bb 132>;

<bb 131>:
  iftmp.112_313 = "video";
  goto <bb 133>;

<bb 132>:
  iftmp.112_314 = "audio";

<bb 133>:
  # iftmp.112_20 = PHI <iftmp.112_313(131), iftmp.112_314(132)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2686, D.45466_312, 5, "No %s RTP candidate found; defaulting to the first one.\n", iftmp.112_20);

<bb 134>:
  D.45463_315 = engine_38->ice_in.chosen[1];
  if (D.45463_315 == 0)
    goto <bb 135>;
  else
    goto <bb 140>;

<bb 135>:
  D.45628_316 = engine_38->ice_in.cands[i_5][1].component_id;
  if (D.45628_316 == 2)
    goto <bb 136>;
  else
    goto <bb 140>;

<bb 136>:
  engine_38->ice_in.chosen[1] = i_5;
  D.45463_317 = engine_38->ice_in.chosen[1];
  D.45638_318 = engine_38->ice_in.cands[D.45463_317][1].ready;
  D.45639_319 = D.45638_318 + 1;
  engine_38->ice_in.cands[D.45463_317][1].ready = D.45639_319;
  D.45466_320 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 137>;
  else
    goto <bb 138>;

<bb 137>:
  iftmp.113_321 = "video";
  goto <bb 139>;

<bb 138>:
  iftmp.113_322 = "audio";

<bb 139>:
  # iftmp.113_21 = PHI <iftmp.113_321(137), iftmp.113_322(138)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2692, D.45466_320, 5, "No %s RTCP candidate found; defaulting to the first one.\n", iftmp.113_21);

<bb 140>:
  i_323 = i_5 + 1;
  # DEBUG i => i_323

<bb 141>:
  # i_5 = PHI <i_303(127), i_323(140)>
  # DEBUG i => i_5
  D.45543_304 = engine_38->ice_in.cand_idx;
  if (D.45543_304 >= i_5)
    goto <bb 142>;
  else
    goto <bb 144>;

<bb 142>:
  D.45460_305 = engine_38->ice_in.chosen[0];
  if (D.45460_305 == 0)
    goto <bb 128>;
  else
    goto <bb 143>;

<bb 143>:
  D.45463_306 = engine_38->ice_in.chosen[1];
  if (D.45463_306 == 0)
    goto <bb 128>;
  else
    goto <bb 144>;

<bb 144>:
  i_324 = 0;
  # DEBUG i => i_324
  goto <bb 156>;

<bb 145>:
  D.45714_325 = engine_38->ice_in.chosen[i_6];
  D.45715_326 = engine_38->ice_in.cands[D.45714_325][i_6].ready;
  if (D.45715_326 != 0)
    goto <bb 146>;
  else
    goto <bb 155>;

<bb 146>:
  D.45720_327 = engine_38->ice_in.ufrag;
  # DEBUG s => D.45720_327
  if (D.45720_327 == 0B)
    goto <bb 149>;
  else
    goto <bb 147>;

<bb 147>:
  D.47854_650 = MEM[(const char *)D.45720_327];
  if (D.47854_650 == 0)
    goto <bb 149>;
  else
    goto <bb 148>;

<bb 148>:

<bb 149>:
  # D.47855_651 = PHI <1(146), 1(147), 0(148)>
  D.47853_671 = D.47855_651;
  D.45721_328 = D.47853_671;
  if (D.45721_328 != 0)
    goto <bb 154>;
  else
    goto <bb 150>;

<bb 150>:
  D.45723_329 = engine_38->ice_in.pwd;
  # DEBUG s => D.45723_329
  if (D.45723_329 == 0B)
    goto <bb 153>;
  else
    goto <bb 151>;

<bb 151>:
  D.47858_652 = MEM[(const char *)D.45723_329];
  if (D.47858_652 == 0)
    goto <bb 153>;
  else
    goto <bb 152>;

<bb 152>:

<bb 153>:
  # D.47859_653 = PHI <1(150), 1(151), 0(152)>
  D.47857_672 = D.47859_653;
  D.45724_330 = D.47857_672;
  if (D.45724_330 != 0)
    goto <bb 154>;
  else
    goto <bb 155>;

<bb 154>:
  D.45714_331 = engine_38->ice_in.chosen[i_6];
  engine_38->ice_in.cands[D.45714_331][i_6].ready = 0;

<bb 155>:
  i_332 = i_6 + 1;
  # DEBUG i => i_332

<bb 156>:
  # i_6 = PHI <i_324(144), i_332(155)>
  # DEBUG i => i_6
  if (i_6 <= 1)
    goto <bb 145>;
  else
    goto <bb 157>;

<bb 157>:
  D.45460_333 = engine_38->ice_in.chosen[0];
  D.45725_334 = engine_38->ice_in.cands[D.45460_333][0].con_addr;
  if (D.45725_334 != 0B)
    goto <bb 158>;
  else
    goto <bb 165>;

<bb 158>:
  D.45460_335 = engine_38->ice_in.chosen[0];
  D.45728_336 = engine_38->ice_in.cands[D.45460_335][0].con_port;
  if (D.45728_336 != 0)
    goto <bb 159>;
  else
    goto <bb 165>;

<bb 159>:
  tmp = "";
  D.45526_337 = engine_38->cur_payload_map;
  D.45466_338 = smh_34(D)->session;
  D.45460_339 = engine_38->ice_in.chosen[0];
  D.45725_340 = engine_38->ice_in.cands[D.45460_339][0].con_addr;
  D.45731_341 = switch_core_perform_session_strdup (D.45466_338, D.45725_340, "src/switch_core_media.c", &__func__, 2709);
  D.45526_337->remote_sdp_ip = D.45731_341;
  D.45466_342 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 160>;
  else
    goto <bb 161>;

<bb 160>:
  iftmp.114_343 = "video";
  goto <bb 162>;

<bb 161>:
  iftmp.114_344 = "audio";

<bb 162>:
  # iftmp.114_22 = PHI <iftmp.114_343(160), iftmp.114_344(161)>
  D.45460_345 = engine_38->ice_in.chosen[0];
  D.45725_346 = engine_38->ice_in.cands[D.45460_345][0].con_addr;
  D.45460_347 = engine_38->ice_in.chosen[0];
  D.45728_348 = engine_38->ice_in.cands[D.45460_347][0].con_port;
  D.45736_349 = (int) D.45728_348;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2710, D.45466_342, 5, "setting remote %s ice addr to %s:%d based on candidate\n", iftmp.114_22, D.45725_346, D.45736_349);
  D.45460_350 = engine_38->ice_in.chosen[0];
  D.45620_351 = engine_38->ice_in.cands[D.45460_350][0].ready;
  D.45621_352 = D.45620_351 + 1;
  engine_38->ice_in.cands[D.45460_350][0].ready = D.45621_352;
  D.45460_353 = engine_38->ice_in.chosen[0];
  D.45728_354 = engine_38->ice_in.cands[D.45460_353][0].con_port;
  engine_38->remote_rtp_ice_port = D.45728_354;
  D.45466_355 = smh_34(D)->session;
  D.45460_356 = engine_38->ice_in.chosen[0];
  D.45725_357 = engine_38->ice_in.cands[D.45460_356][0].con_addr;
  D.45737_358 = switch_core_perform_session_strdup (D.45466_355, D.45725_357, "src/switch_core_media.c", &__func__, 2716);
  engine_38->remote_rtp_ice_addr = D.45737_358;
  D.45526_359 = engine_38->cur_payload_map;
  D.45466_360 = smh_34(D)->session;
  D.45460_361 = engine_38->ice_in.chosen[0];
  D.45725_362 = engine_38->ice_in.cands[D.45460_361][0].con_addr;
  D.45738_363 = switch_core_perform_session_strdup (D.45466_360, D.45725_362, "src/switch_core_media.c", &__func__, 2718);
  D.45526_359->remote_sdp_ip = D.45738_363;
  D.45526_364 = engine_38->cur_payload_map;
  D.45460_365 = engine_38->ice_in.chosen[0];
  D.45728_366 = engine_38->ice_in.cands[D.45460_365][0].con_port;
  D.45526_364->remote_sdp_port = D.45728_366;
  D.45739_367 = engine_38->remote_rtcp_port;
  if (D.45739_367 != 0)
    goto <bb 163>;
  else
    goto <bb 164>;

<bb 163>:
  D.45526_368 = engine_38->cur_payload_map;
  D.45527_369 = D.45526_368->remote_sdp_port;
  engine_38->remote_rtcp_port = D.45527_369;

<bb 164>:
  D.45526_370 = engine_38->cur_payload_map;
  D.45527_371 = D.45526_370->remote_sdp_port;
  D.45742_372 = (int) D.45527_371;
  switch_snprintf (&tmp, 80, "%d", D.45742_372);
  D.45466_373 = smh_34(D)->session;
  D.45467_374 = D.45466_373->channel;
  D.45526_375 = engine_38->cur_payload_map;
  D.45743_376 = D.45526_375->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.45467_374, "remote_media_ip", D.45743_376, 1);
  D.45466_377 = smh_34(D)->session;
  D.45467_378 = D.45466_377->channel;
  switch_channel_set_variable_var_check (D.45467_378, "remote_media_port", &tmp, 1);

<bb 165>:
  D.45463_379 = engine_38->ice_in.chosen[1];
  D.45692_380 = engine_38->ice_in.cands[D.45463_379][1].con_port;
  if (D.45692_380 != 0)
    goto <bb 166>;
  else
    goto <bb 170>;

<bb 166>:
  D.45466_381 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 167>;
  else
    goto <bb 168>;

<bb 167>:
  iftmp.115_382 = "video";
  goto <bb 169>;

<bb 168>:
  iftmp.115_383 = "audio";

<bb 169>:
  # iftmp.115_23 = PHI <iftmp.115_382(167), iftmp.115_383(168)>
  D.45463_384 = engine_38->ice_in.chosen[1];
  D.45691_385 = engine_38->ice_in.cands[D.45463_384][1].con_addr;
  D.45463_386 = engine_38->ice_in.chosen[1];
  D.45692_387 = engine_38->ice_in.cands[D.45463_386][1].con_port;
  D.45693_388 = (int) D.45692_387;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2730, D.45466_381, 5, "setting remote rtcp %s addr to %s:%d based on candidate\n", iftmp.115_23, D.45691_385, D.45693_388);
  D.45463_389 = engine_38->ice_in.chosen[1];
  D.45692_390 = engine_38->ice_in.cands[D.45463_389][1].con_port;
  engine_38->remote_rtcp_ice_port = D.45692_390;
  D.45466_391 = smh_34(D)->session;
  D.45463_392 = engine_38->ice_in.chosen[1];
  D.45691_393 = engine_38->ice_in.cands[D.45463_392][1].con_addr;
  D.45750_394 = switch_core_perform_session_strdup (D.45466_391, D.45691_393, "src/switch_core_media.c", &__func__, 2734);
  engine_38->remote_rtcp_ice_addr = D.45750_394;
  D.45463_395 = engine_38->ice_in.chosen[1];
  D.45692_396 = engine_38->ice_in.cands[D.45463_395][1].con_port;
  engine_38->remote_rtcp_port = D.45692_396;

<bb 170>:
  D.45751_397 = m_46(D) != 0B;
  D.45752_398 = got_rtcp_mux_8 == 0;
  D.45753_399 = D.45751_397 && D.45752_398;
  if (D.45753_399 != 0)
    goto <bb 171>;
  else
    goto <bb 172>;

<bb 171>:
  engine_38->rtcp_mux = -1;

<bb 172>:
  D.45466_400 = smh_34(D)->session;
  D.45467_401 = D.45466_400->channel;
  D.45756_402 = switch_channel_test_flag (D.45467_401, 103);
  if (D.45756_402 != 0)
    goto <bb 173>;
  else
    goto <bb 222>;

<bb 173>:
  D.45518_403 = engine_38->rtp_session;
  D.45759_404 = switch_rtp_ready (D.45518_403);
  if (D.45759_404 != 0)
    goto <bb 174>;
  else
    goto <bb 182>;

<bb 174>:
  D.45460_405 = engine_38->ice_in.chosen[0];
  D.45620_406 = engine_38->ice_in.cands[D.45460_405][0].ready;
  if (D.45620_406 != 0)
    goto <bb 175>;
  else
    goto <bb 182>;

<bb 175>:
  D.45466_407 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 176>;
  else
    goto <bb 177>;

<bb 176>:
  iftmp.116_408 = "video";
  goto <bb 178>;

<bb 177>:
  iftmp.116_409 = "audio";

<bb 178>:
  # iftmp.116_24 = PHI <iftmp.116_408(176), iftmp.116_409(177)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2749, D.45466_407, 6, "RE-Activating %s ICE\n", iftmp.116_24);
  D.45518_410 = engine_38->rtp_session;
  D.45720_411 = engine_38->ice_in.ufrag;
  D.45768_412 = engine_38->ice_out.ufrag;
  D.45769_413 = engine_38->ice_out.pwd;
  D.45723_414 = engine_38->ice_in.pwd;
  D.45466_415 = smh_34(D)->session;
  D.45771_416 = switch_ice_direction (D.45466_415);
  if (D.45771_416 == 1)
    goto <bb 179>;
  else
    goto <bb 180>;

<bb 179>:
  iftmp.117_417 = 2;
  goto <bb 181>;

<bb 180>:
  iftmp.117_418 = 6;

<bb 181>:
  # iftmp.117_25 = PHI <iftmp.117_417(179), iftmp.117_418(180)>
  D.45775_419 = &engine_38->ice_in;
  switch_rtp_activate_ice (D.45518_410, D.45720_411, D.45768_412, D.45769_413, D.45723_414, 0, iftmp.117_25, D.45775_419);

<bb 182>:
  D.45518_420 = engine_38->rtp_session;
  if (D.45518_420 != 0B)
    goto <bb 183>;
  else
    goto <bb 207>;

<bb 183>:
  D.45466_421 = smh_34(D)->session;
  D.45467_422 = D.45466_421->channel;
  if (type_36(D) == 1)
    goto <bb 184>;
  else
    goto <bb 185>;

<bb 184>:
  iftmp.118_423 = "rtcp_video_interval_msec";
  goto <bb 186>;

<bb 185>:
  iftmp.118_424 = "rtcp_audio_interval_msec";

<bb 186>:
  # iftmp.118_26 = PHI <iftmp.118_423(184), iftmp.118_424(185)>
  val_425 = switch_channel_get_variable_dup (D.45467_422, iftmp.118_26, 1, -1);
  # DEBUG val => val_425
  if (val_425 != 0B)
    goto <bb 191>;
  else
    goto <bb 187>;

<bb 187>:
  if (type_36(D) == 1)
    goto <bb 188>;
  else
    goto <bb 189>;

<bb 188>:
  D.45788_426 = smh_34(D)->mparams;
  iftmp.119_427 = D.45788_426->rtcp_video_interval_msec;
  goto <bb 190>;

<bb 189>:
  D.45788_428 = smh_34(D)->mparams;
  iftmp.119_429 = D.45788_428->rtcp_audio_interval_msec;

<bb 190>:
  # iftmp.119_27 = PHI <iftmp.119_427(188), iftmp.119_429(189)>
  val_430 = iftmp.119_27;
  # DEBUG val => val_430
  if (val_430 != 0B)
    goto <bb 191>;
  else
    goto <bb 207>;

<bb 191>:
  # val_9 = PHI <val_425(186), val_430(190)>
  # DEBUG val => val_9
  D.45466_431 = smh_34(D)->session;
  D.45467_432 = D.45466_431->channel;
  if (type_36(D) == 1)
    goto <bb 192>;
  else
    goto <bb 193>;

<bb 192>:
  iftmp.120_433 = "rtp_remote_video_rtcp_port";
  goto <bb 194>;

<bb 193>:
  iftmp.120_434 = "rtp_remote_audio_rtcp_port";

<bb 194>:
  # iftmp.120_28 = PHI <iftmp.120_433(192), iftmp.120_434(193)>
  rport_435 = switch_channel_get_variable_dup (D.45467_432, iftmp.120_28, 1, -1);
  # DEBUG rport => rport_435
  remote_rtcp_port_436 = engine_38->remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_436
  D.45794_437 = remote_rtcp_port_436 == 0;
  D.45795_438 = rport_435 != 0B;
  D.45796_439 = D.45794_437 && D.45795_438;
  if (D.45796_439 != 0)
    goto <bb 195>;
  else
    goto <bb 196>;

<bb 195>:
  # DEBUG __nptr => rport_435
  D.47862_654 = strtol (rport_435, 0B, 10);
  D.47861_674 = D.47862_654;
  D.45799_440 = D.47861_674;
  remote_rtcp_port_441 = (switch_port_t) D.45799_440;
  # DEBUG remote_rtcp_port => remote_rtcp_port_441

<bb 196>:
  # remote_rtcp_port_11 = PHI <remote_rtcp_port_436(194), remote_rtcp_port_441(195)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_11
  D.45800_442 = strcasecmp (val_9, "passthru");
  if (D.45800_442 == 0)
    goto <bb 197>;
  else
    goto <bb 201>;

<bb 197>:
  D.45466_443 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 198>;
  else
    goto <bb 199>;

<bb 198>:
  iftmp.121_444 = "video";
  goto <bb 200>;

<bb 199>:
  iftmp.121_445 = "audio";

<bb 200>:
  # iftmp.121_29 = PHI <iftmp.121_444(198), iftmp.121_445(199)>
  D.45807_446 = (int) remote_rtcp_port_11;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2787, D.45466_443, 6, "Activating %s RTCP PASSTHRU PORT %d\n", iftmp.121_29, D.45807_446);
  D.45518_447 = engine_38->rtp_session;
  D.45808_448 = engine_38->rtcp_mux;
  D.45809_449 = D.45808_448 > 0;
  switch_rtp_activate_rtcp (D.45518_447, -1, remote_rtcp_port_11, D.45809_449);
  goto <bb 207>;

<bb 201>:
  # DEBUG __nptr => val_9
  D.47865_655 = strtol (val_9, 0B, 10);
  D.47864_676 = D.47865_655;
  interval_450 = D.47864_676;
  # DEBUG interval => NULL
  interval.122_451 = (unsigned int) interval_450;
  D.45812_452 = interval.122_451 + 4294967196;
  if (D.45812_452 > 499900)
    goto <bb 202>;
  else
    goto <bb 203>;

<bb 202>:
  D.45466_453 = smh_34(D)->session;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2793, D.45466_453, 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_450);
  interval_454 = 10000;
  # DEBUG interval => interval_454

<bb 203>:
  # interval_12 = PHI <interval_450(201), interval_454(202)>
  # DEBUG interval => interval_12
  D.45466_455 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 204>;
  else
    goto <bb 205>;

<bb 204>:
  iftmp.123_456 = "video";
  goto <bb 206>;

<bb 205>:
  iftmp.123_457 = "audio";

<bb 206>:
  # iftmp.123_30 = PHI <iftmp.123_456(204), iftmp.123_457(205)>
  D.45807_458 = (int) remote_rtcp_port_11;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2798, D.45466_455, 6, "Activating %s RTCP PORT %d\n", iftmp.123_30, D.45807_458);
  D.45518_459 = engine_38->rtp_session;
  D.45808_460 = engine_38->rtcp_mux;
  D.45809_461 = D.45808_460 > 0;
  switch_rtp_activate_rtcp (D.45518_459, interval_12, remote_rtcp_port_11, D.45809_461);

<bb 207>:
  D.45463_462 = engine_38->ice_in.chosen[1];
  D.45638_463 = engine_38->ice_in.cands[D.45463_462][1].ready;
  if (D.45638_463 != 0)
    goto <bb 208>;
  else
    goto <bb 222>;

<bb 208>:
  D.45808_464 = engine_38->rtcp_mux;
  if (D.45808_464 > 0)
    goto <bb 209>;
  else
    goto <bb 215>;

<bb 209>:
  D.45463_465 = engine_38->ice_in.chosen[1];
  D.45691_466 = engine_38->ice_in.cands[D.45463_465][1].con_addr;
  D.45460_467 = engine_38->ice_in.chosen[0];
  D.45725_468 = engine_38->ice_in.cands[D.45460_467][0].con_addr;
  D.38904_469 = __builtin_strcmp (D.45691_466, D.45725_468);
  if (D.38904_469 == 0)
    goto <bb 210>;
  else
    goto <bb 215>;

<bb 210>:
  D.45463_470 = engine_38->ice_in.chosen[1];
  D.45692_471 = engine_38->ice_in.cands[D.45463_470][1].con_port;
  D.45460_472 = engine_38->ice_in.chosen[0];
  D.45728_473 = engine_38->ice_in.cands[D.45460_472][0].con_port;
  if (D.45692_471 == D.45728_473)
    goto <bb 211>;
  else
    goto <bb 215>;

<bb 211>:
  D.45466_474 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 212>;
  else
    goto <bb 213>;

<bb 212>:
  iftmp.124_475 = "video";
  goto <bb 214>;

<bb 213>:
  iftmp.124_476 = "audio";

<bb 214>:
  # iftmp.124_31 = PHI <iftmp.124_475(212), iftmp.124_476(213)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2806, D.45466_474, 6, "Skipping %s RTCP ICE (Same as RTP)\n", iftmp.124_31);
  goto <bb 222>;

<bb 215>:
  D.45466_477 = smh_34(D)->session;
  if (type_36(D) == 1)
    goto <bb 216>;
  else
    goto <bb 217>;

<bb 216>:
  iftmp.125_478 = "video";
  goto <bb 218>;

<bb 217>:
  iftmp.125_479 = "audio";

<bb 218>:
  # iftmp.125_32 = PHI <iftmp.125_478(216), iftmp.125_479(217)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2808, D.45466_477, 6, "Activating %s RTCP ICE\n", iftmp.125_32);
  D.45518_480 = engine_38->rtp_session;
  D.45720_481 = engine_38->ice_in.ufrag;
  D.45768_482 = engine_38->ice_out.ufrag;
  D.45769_483 = engine_38->ice_out.pwd;
  D.45723_484 = engine_38->ice_in.pwd;
  D.45466_485 = smh_34(D)->session;
  D.45835_486 = switch_ice_direction (D.45466_485);
  if (D.45835_486 == 1)
    goto <bb 219>;
  else
    goto <bb 220>;

<bb 219>:
  iftmp.126_487 = 2;
  goto <bb 221>;

<bb 220>:
  iftmp.126_488 = 6;

<bb 221>:
  # iftmp.126_33 = PHI <iftmp.126_487(219), iftmp.126_488(220)>
  D.45775_489 = &engine_38->ice_in;
  switch_rtp_activate_ice (D.45518_480, D.45720_481, D.45768_482, D.45769_483, D.45723_484, 1, iftmp.126_33, D.45775_489);

<bb 222>:
  return;

}



;; Function switch_core_session_set_ice (switch_core_session_set_ice)

Iterations: 0
switch_core_session_set_ice (struct switch_core_session_t * session)
{
  static const char __PRETTY_FUNCTION__[28] = "switch_core_session_set_ice";
  struct switch_media_handle_t * smh;
  struct switch_core_media_params_t * D.45845;
  struct switch_channel_t * D.45844;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2840, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  D.45844_3 = session_1(D)->channel;
  switch_channel_set_flag_value (D.45844_3, 110, 1);
  D.45844_4 = session_1(D)->channel;
  switch_channel_set_flag_value (D.45844_4, 106, 1);
  D.45844_5 = session_1(D)->channel;
  switch_channel_set_flag_value (D.45844_5, 108, 1);
  D.45845_6 = smh_2->mparams;
  D.45845_6->rtcp_audio_interval_msec = "10000";
  D.45845_7 = smh_2->mparams;
  D.45845_7->rtcp_video_interval_msec = "10000";

<bb 6>:
  return;

}



;; Function switch_core_media_toggle_hold (switch_core_media_toggle_hold)

Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Iterations: 0
switch_core_media_toggle_hold (struct switch_core_session_t * session, int sendonly)
{
  const char * val;
  const char * info;
  const char * msg;
  const char * stream;
  static const char __func__[30] = "switch_core_media_toggle_hold";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_toggle_hold";
  struct switch_channel_t * b_channel;
  struct switch_core_session_t * b_session;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  int changed;
  uint32_t D.44454;
  int D.44453;
  int32_t D.44449;
  uint32_t D.44444;
  uint32_t D.44440;
  uint32_t D.44433;
  char * D.44432;
  uint32_t D.44431;
  uint32_t D.44429;
  uint32_t D.44422;
  uint32_t D.44415;
  char * D.44414;
  char * D.44412;
  int D.44409;
  uint32_t D.44408;
  int D.44404;
  uint32_t D.44393;
  struct switch_rtp_t * D.44390;
  struct switch_rtp_t * D.44387;
  const char * D.44384;
  switch_bool_t sendonly.87;
  uint32_t D.44380;
  uint32_t D.44378;
  uint32_t D.44376;
  uint32_t D.44370;
  uint32_t D.44368;
  struct switch_channel_t * D.44367;
  struct switch_core_session_t * b_session.86;
  switch_status_t D.44360;
  int D.44359;

<bb 2>:
  changed_7 = 0;
  # DEBUG changed => changed_7
  b_session = 0B;
  b_channel_8 = 0B;
  # DEBUG b_channel => b_channel_8
  if (session_9(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 3872, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_10 = session_9(D)->media_handle;
  # DEBUG smh => smh_10
  if (smh_10 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.44359_11 = 0;
  goto <bb 69>;

<bb 6>:
  a_engine_12 = &smh_10->engines;
  # DEBUG a_engine => a_engine_12
  v_engine_13 = &smh_10->engines[1];
  # DEBUG v_engine => v_engine_13
  D.44360_14 = switch_core_session_perform_get_partner (session_9(D), &b_session, "src/switch_core_media.c", &__func__, 3882);
  if (D.44360_14 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  b_session.86_15 = b_session;
  b_channel_16 = switch_core_session_get_channel (b_session.86_15);
  # DEBUG b_channel => b_channel_16

<bb 8>:
  # b_channel_3 = PHI <b_channel_8(6), b_channel_16(7)>
  # DEBUG b_channel => b_channel_3
  if (sendonly_17(D) != 0)
    goto <bb 9>;
  else
    goto <bb 35>;

<bb 9>:
  D.44367_18 = session_9(D)->channel;
  D.44368_19 = switch_channel_test_flag (D.44367_18, 1);
  if (D.44368_19 != 0)
    goto <bb 10>;
  else
    goto <bb 35>;

<bb 10>:
  D.44367_20 = session_9(D)->channel;
  D.44370_21 = switch_channel_test_flag (D.44367_20, 96);
  if (D.44370_21 == 0)
    goto <bb 11>;
  else
    goto <bb 66> (end);

<bb 11>:
  msg_22 = "hold";
  # DEBUG msg => msg_22
  D.44367_23 = session_9(D)->channel;
  D.44376_24 = switch_channel_test_flag (D.44367_23, 94);
  if (D.44376_24 != 0)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:
  D.44367_25 = session_9(D)->channel;
  D.44378_26 = switch_channel_test_flag (D.44367_25, 95);
  if (D.44378_26 != 0)
    goto <bb 13>;
  else
    goto <bb 16>;

<bb 13>:
  if (b_channel_3 == 0B)
    goto <bb 15>;
  else
    goto <bb 14>;

<bb 14>:
  D.44380_27 = switch_channel_test_flag (b_channel_3, 25);
  if (D.44380_27 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.44367_28 = session_9(D)->channel;
  sendonly.87_29 = (switch_bool_t) sendonly_17(D);
  switch_channel_mark_hold (D.44367_28, sendonly.87_29);
  D.44367_30 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_30, 96, 1);
  changed_31 = 0;
  # DEBUG changed => changed_31
  goto <bb 66> (end);

<bb 16>:
  D.44367_32 = session_9(D)->channel;
  info_33 = switch_channel_get_variable_dup (D.44367_32, "presence_call_info", 1, -1);
  # DEBUG info => info_33
  if (info_33 != 0B)
    goto <bb 17>;
  else
    goto <bb 19>;

<bb 17>:
  D.44384_34 = switch_stristr ("private", info_33);
  if (D.44384_34 != 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  msg_35 = "hold-private";
  # DEBUG msg => msg_35

<bb 19>:
  # msg_5 = PHI <msg_22(16), msg_22(17), msg_35(18)>
  # DEBUG msg => msg_5
  D.44387_36 = a_engine_12->rtp_session;
  if (D.44387_36 != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.44387_37 = a_engine_12->rtp_session;
  switch_rtp_set_flag (D.44387_37, 35);

<bb 21>:
  D.44390_38 = v_engine_13->rtp_session;
  if (D.44390_38 != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.44390_39 = v_engine_13->rtp_session;
  switch_rtp_set_flag (D.44390_39, 35);

<bb 23>:
  D.44367_40 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_40, 96, 1);
  D.44367_41 = session_9(D)->channel;
  switch_channel_mark_hold (D.44367_41, 1);
  D.44367_42 = session_9(D)->channel;
  switch_channel_perform_presence (D.44367_42, "unknown", msg_5, 0B, "src/switch_core_media.c", &__func__, 3918);
  changed_43 = 1;
  # DEBUG changed => changed_43
  D.44393_44 = a_engine_12->max_missed_hold_packets;
  if (D.44393_44 != 0)
    goto <bb 24>;
  else
    goto <bb 26>;

<bb 24>:
  D.44387_45 = a_engine_12->rtp_session;
  if (D.44387_45 != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.44387_46 = a_engine_12->rtp_session;
  D.44393_47 = a_engine_12->max_missed_hold_packets;
  switch_rtp_set_max_missed_packets (D.44387_46, D.44393_47);

<bb 26>:
  D.44367_48 = session_9(D)->channel;
  stream_49 = switch_channel_get_hold_music (D.44367_48);
  # DEBUG stream => stream_49
  if (stream_49 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  stream_50 = "local_stream://moh";
  # DEBUG stream => stream_50

<bb 28>:
  # stream_4 = PHI <stream_49(26), stream_50(27)>
  # DEBUG stream => stream_4
  if (stream_4 != 0B)
    goto <bb 29>;
  else
    goto <bb 66> (end);

<bb 29>:
  D.44404_51 = strcasecmp (stream_4, "silence");
  if (D.44404_51 != 0)
    goto <bb 30>;
  else
    goto <bb 66> (end);

<bb 30>:
  if (b_channel_3 == 0B)
    goto <bb 32>;
  else
    goto <bb 31>;

<bb 31>:
  D.44408_52 = switch_channel_test_flag (b_channel_3, 25);
  if (D.44408_52 == 0)
    goto <bb 32>;
  else
    goto <bb 66> (end);

<bb 32>:
  D.44409_53 = strcasecmp (stream_4, "indicate_hold");
  if (D.44409_53 == 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.44367_54 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_54, 16, 1);
  D.44367_55 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_55, 10, 1);
  b_session.86_56 = b_session;
  D.44412_57 = switch_core_session_get_uuid (b_session.86_56);
  switch_ivr_hold_uuid (D.44412_57, 0B, 0);
  goto <bb 66> (end);

<bb 34>:
  b_session.86_58 = b_session;
  D.44414_59 = switch_core_session_get_uuid (b_session.86_58);
  switch_ivr_broadcast (D.44414_59, stream_4, 274);
  switch_sleep (250000);
  goto <bb 66> (end);

<bb 35>:
  D.44367_60 = session_9(D)->channel;
  D.44415_61 = switch_channel_test_flag (D.44367_60, 97);
  if (D.44415_61 != 0)
    goto <bb 36>;
  else
    goto <bb 41>;

<bb 36>:
  D.44367_62 = session_9(D)->channel;
  switch_channel_set_flag_value (D.44367_62, 96, 1);
  D.44367_63 = session_9(D)->channel;
  switch_channel_mark_hold (D.44367_63, 1);
  D.44387_64 = a_engine_12->rtp_session;
  if (D.44387_64 != 0B)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  D.44387_65 = a_engine_12->rtp_session;
  switch_rtp_set_flag (D.44387_65, 35);

<bb 38>:
  D.44390_66 = v_engine_13->rtp_session;
  if (D.44390_66 != 0B)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.44390_67 = v_engine_13->rtp_session;
  switch_rtp_set_flag (D.44390_67, 35);

<bb 40>:
  changed_68 = 1;
  # DEBUG changed => changed_68

<bb 41>:
  # changed_1 = PHI <changed_7(35), changed_68(40)>
  # DEBUG changed => changed_1
  D.44367_69 = session_9(D)->channel;
  switch_channel_clear_flag (D.44367_69, 97);
  D.44367_70 = session_9(D)->channel;
  D.44422_71 = switch_channel_test_flag (D.44367_70, 96);
  if (D.44422_71 != 0)
    goto <bb 42>;
  else
    goto <bb 66> (end);

<bb 42>:
  switch_sleep (250000);
  if (b_channel_3 != 0B)
    goto <bb 43>;
  else
    goto <bb 46>;

<bb 43>:
  D.44367_72 = session_9(D)->channel;
  D.44429_73 = switch_channel_test_flag (D.44367_72, 120);
  if (D.44429_73 != 0)
    goto <bb 45>;
  else
    goto <bb 44>;

<bb 44>:
  D.44431_74 = switch_channel_test_flag (b_channel_3, 120);
  if (D.44431_74 != 0)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  D.44432_75 = switch_core_session_get_uuid (session_9(D));
  switch_ivr_nomedia (D.44432_75, 1);

<bb 46>:
  D.44433_76 = a_engine_12->max_missed_packets;
  if (D.44433_76 != 0)
    goto <bb 47>;
  else
    goto <bb 49>;

<bb 47>:
  D.44387_77 = a_engine_12->rtp_session;
  if (D.44387_77 != 0B)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  D.44387_78 = a_engine_12->rtp_session;
  switch_rtp_reset_media_timer (D.44387_78);
  D.44387_79 = a_engine_12->rtp_session;
  D.44433_80 = a_engine_12->max_missed_packets;
  switch_rtp_set_max_missed_packets (D.44387_79, D.44433_80);

<bb 49>:
  if (b_channel_3 != 0B)
    goto <bb 50>;
  else
    goto <bb 55>;

<bb 50>:
  D.44367_81 = session_9(D)->channel;
  D.44440_82 = switch_channel_test_flag (D.44367_81, 10);
  if (D.44440_82 != 0)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  b_session.86_83 = b_session;
  switch_ivr_unhold (b_session.86_83);
  D.44367_84 = session_9(D)->channel;
  switch_channel_clear_flag (D.44367_84, 16);
  D.44367_85 = session_9(D)->channel;
  switch_channel_clear_flag (D.44367_85, 10);
  goto <bb 55>;

<bb 52>:
  D.44444_86 = switch_channel_test_flag (b_channel_3, 21);
  if (D.44444_86 != 0)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  switch_channel_set_flag_value (b_channel_3, 28, 1);
  switch_channel_set_flag_value (b_channel_3, 20, 1);

<bb 54>:
  switch_channel_wait_for_flag (b_channel_3, 21, 0, 5000, 0B);

<bb 55>:
  D.44449_87 = switch_media_handle_test_media_flag (smh_10, 10);
  if (D.44449_87 == 0)
    goto <bb 56>;
  else
    goto <bb 63>;

<bb 56>:
  D.44367_88 = session_9(D)->channel;
  val_89 = switch_channel_get_variable_dup (D.44367_88, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_89
  if (val_89 == 0B)
    goto <bb 58>;
  else
    goto <bb 57>;

<bb 57>:
  D.44453_90 = switch_true (val_89);
  if (D.44453_90 == 0)
    goto <bb 58>;
  else
    goto <bb 63>;

<bb 58>:
  D.44367_91 = session_9(D)->channel;
  D.44454_92 = switch_channel_test_flag (D.44367_91, 106);
  if (D.44454_92 == 0)
    goto <bb 59>;
  else
    goto <bb 63>;

<bb 59>:
  D.44387_93 = a_engine_12->rtp_session;
  if (D.44387_93 != 0B)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  D.44387_94 = a_engine_12->rtp_session;
  switch_rtp_set_flag (D.44387_94, 7);

<bb 61>:
  D.44390_95 = v_engine_13->rtp_session;
  if (D.44390_95 != 0B)
    goto <bb 62>;
  else
    goto <bb 63>;

<bb 62>:
  D.44390_96 = v_engine_13->rtp_session;
  switch_rtp_set_flag (D.44390_96, 7);

<bb 63>:
  D.44367_97 = session_9(D)->channel;
  switch_channel_clear_flag (D.44367_97, 96);
  D.44367_98 = session_9(D)->channel;
  switch_channel_mark_hold (D.44367_98, 0);
  D.44367_99 = session_9(D)->channel;
  switch_channel_perform_presence (D.44367_99, "unknown", "unhold", 0B, "src/switch_core_media.c", &__func__, 4004);
  D.44387_100 = a_engine_12->rtp_session;
  switch_rtp_clear_flag (D.44387_100, 35);
  D.44390_101 = v_engine_13->rtp_session;
  if (D.44390_101 != 0B)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  D.44390_102 = v_engine_13->rtp_session;
  switch_rtp_clear_flag (D.44390_102, 35);

<bb 65>:
  changed_103 = 1;
  # DEBUG changed => changed_103

  # changed_2 = PHI <changed_31(15), changed_43(28), changed_1(41), changed_103(65), changed_7(10), changed_43(34), changed_43(33), changed_43(31), changed_43(29)>
end:
  # DEBUG changed => changed_2
  b_session.86_104 = b_session;
  if (b_session.86_104 != 0B)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  b_session.86_105 = b_session;
  switch_core_session_rwunlock (b_session.86_105);

<bb 68>:
  D.44359_106 = changed_2;

<bb 69>:
  # D.44359_6 = PHI <D.44359_11(5), D.44359_106(68)>
  return D.44359_6;

}



;; Function switch_core_media_negotiate_sdp (switch_core_media_negotiate_sdp)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_negotiate_sdp.
Processing frequency atoi
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_negotiate_sdp.
Processing frequency atoi
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_negotiate_sdp.
Processing frequency atoi
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_negotiate_sdp.
Processing frequency atoi
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_negotiate_sdp.
Processing frequency atoi
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_negotiate_sdp.
Processing frequency atoi
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_negotiate_sdp.
Processing frequency atoi
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_negotiate_sdp.
Processing frequency atoi
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_negotiate_sdp.
Processing frequency atoi
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate check_ice.
Not inlining: code size would grow by 1139.
Considering inline candidate switch_core_media_set_video_codec.
Not inlining: code size would grow by 268.
Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_core_media_negotiate_sdp.
Processing frequency switch_core_codec_ready
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate switch_core_media_check_video_codecs.
Not inlining: code size would grow by 50.
Considering inline candidate switch_core_media_add_payload_map.
Not inlining: code size would grow by 161.
Considering inline candidate greedy_sort.
Not inlining: code size would grow by 42.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_negotiate_sdp.
Processing frequency _zstr
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate switch_core_session_check_incoming_crypto.
Not inlining: code size would grow by 366.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_negotiate_sdp.
Processing frequency _zstr
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_negotiate_sdp.
Processing frequency _zstr
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_negotiate_sdp.
Processing frequency _zstr
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate check_ice.
Not inlining: code size would grow by 1139.
Considering inline candidate switch_core_media_set_codec.
Not inlining: code size would grow by 487.
Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_core_media_negotiate_sdp.
Processing frequency switch_core_codec_ready
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_negotiate_sdp.
Processing frequency _zstr
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate switch_core_media_add_payload_map.
Not inlining: code size would grow by 161.
Considering inline candidate greedy_sort.
Not inlining: code size would grow by 42.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_negotiate_sdp.
Processing frequency _zstr
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_negotiate_sdp.
Processing frequency _zstr
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate switch_known_bitrate.
 Inlining switch_known_bitrate into switch_core_media_negotiate_sdp.
Processing frequency switch_known_bitrate
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_session_check_incoming_crypto.
Not inlining: code size would grow by 366.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_negotiate_sdp.
Processing frequency _zstr
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_negotiate_sdp.
Processing frequency _zstr
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate switch_core_media_copy_t38_options.
Not inlining: code size would grow by 69.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_core_media_process_udptl.
Not inlining: code size would grow by 278.
Considering inline candidate switch_core_session_set_ice.
Not inlining: code size would grow by 25.
Considering inline candidate check_ice.
Not inlining: code size would grow by 1139.
Considering inline candidate check_ice.
Not inlining: code size would grow by 1139.
Considering inline candidate switch_core_media_pass_zrtp_hash.
Not inlining: code size would grow by 67.
Considering inline candidate switch_core_media_find_zrtp_hash.
Not inlining: code size would grow by 130.
Considering inline candidate switch_core_media_prepare_codecs.
Not inlining: code size would grow by 130.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_toggle_hold.
Not inlining: code size would grow by 367.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_negotiate_sdp.
Processing frequency _zstr
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate clear_pmaps.
 Inlining clear_pmaps into switch_core_media_negotiate_sdp.
Processing frequency clear_pmaps
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate clear_pmaps.
 Inlining clear_pmaps into switch_core_media_negotiate_sdp.
Processing frequency clear_pmaps
  Called by switch_core_media_negotiate_sdp that is normal or hot
Considering inline candidate switch_core_session_parse_crypto_prefs.
Not inlining: code size would grow by 164.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Inlining clear_pmaps to switch_core_media_negotiate_sdp with frequency 1000
Inlining clear_pmaps to switch_core_media_negotiate_sdp with frequency 1000
Inlining _zstr to switch_core_media_negotiate_sdp with frequency 1000
Inlining atoi to switch_core_media_negotiate_sdp with frequency 1000
Inlining atoi to switch_core_media_negotiate_sdp with frequency 1000
Inlining _zstr to switch_core_media_negotiate_sdp with frequency 1000
Inlining atoi to switch_core_media_negotiate_sdp with frequency 1000
Inlining atoi to switch_core_media_negotiate_sdp with frequency 1000
Inlining atoi to switch_core_media_negotiate_sdp with frequency 1000
Inlining _zstr to switch_core_media_negotiate_sdp with frequency 1000
Inlining atoi to switch_core_media_negotiate_sdp with frequency 1000
Inlining switch_known_bitrate to switch_core_media_negotiate_sdp with frequency 1000
Inlining _zstr to switch_core_media_negotiate_sdp with frequency 1000
Inlining _zstr to switch_core_media_negotiate_sdp with frequency 1000
Inlining atoi to switch_core_media_negotiate_sdp with frequency 1000
Inlining _zstr to switch_core_media_negotiate_sdp with frequency 1000
Inlining switch_core_codec_ready to switch_core_media_negotiate_sdp with frequency 1000
Inlining _zstr to switch_core_media_negotiate_sdp with frequency 1000
Inlining _zstr to switch_core_media_negotiate_sdp with frequency 1000
Inlining atoi to switch_core_media_negotiate_sdp with frequency 1000
Inlining _zstr to switch_core_media_negotiate_sdp with frequency 1000
Inlining atoi to switch_core_media_negotiate_sdp with frequency 1000
Inlining _zstr to switch_core_media_negotiate_sdp with frequency 1000
Inlining switch_core_codec_ready to switch_core_media_negotiate_sdp with frequency 1000
Considering inline candidate check_ice.
Not inlining: code size would grow by 1139.
Considering inline candidate switch_core_media_set_video_codec.
Not inlining: code size would grow by 268.
Considering inline candidate switch_core_media_check_video_codecs.
Not inlining: code size would grow by 50.
Considering inline candidate switch_core_media_add_payload_map.
Not inlining: code size would grow by 161.
Considering inline candidate greedy_sort.
Not inlining: code size would grow by 42.
Considering inline candidate switch_core_session_check_incoming_crypto.
Not inlining: code size would grow by 366.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate check_ice.
Not inlining: code size would grow by 1139.
Considering inline candidate switch_core_media_set_codec.
Not inlining: code size would grow by 487.
Considering inline candidate switch_core_media_add_payload_map.
Not inlining: code size would grow by 161.
Considering inline candidate greedy_sort.
Not inlining: code size would grow by 42.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_session_check_incoming_crypto.
Not inlining: code size would grow by 366.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate switch_core_media_copy_t38_options.
Not inlining: code size would grow by 69.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_core_media_process_udptl.
Not inlining: code size would grow by 278.
Considering inline candidate switch_core_session_set_ice.
Not inlining: code size would grow by 25.
Considering inline candidate check_ice.
Not inlining: code size would grow by 1139.
Considering inline candidate check_ice.
Not inlining: code size would grow by 1139.
Considering inline candidate switch_core_media_pass_zrtp_hash.
Not inlining: code size would grow by 67.
Considering inline candidate switch_core_media_find_zrtp_hash.
Not inlining: code size would grow by 130.
Considering inline candidate switch_core_media_prepare_codecs.
Not inlining: code size would grow by 130.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_toggle_hold.
Not inlining: code size would grow by 367.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_session_parse_crypto_prefs.
Not inlining: code size would grow by 164.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Iterations: 1
Merging blocks 14 and 403
Merging blocks 48 and 415
Merging blocks 62 and 420
Merging blocks 64 and 422
Merging blocks 148 and 424
Merging blocks 155 and 429
Merging blocks 159 and 431
Merging blocks 162 and 433
Merging blocks 165 and 435
Merging blocks 170 and 440
Merging blocks 203 and 442
Merging blocks 206 and 447
Merging blocks 221 and 452
Merging blocks 281 and 457
Merging blocks 287 and 459
Merging blocks 295 and 464
Merging blocks 324 and 472
Merging blocks 332 and 477
Merging blocks 346 and 482
Merging blocks 350 and 484
Merging blocks 355 and 489
Merging blocks 366 and 491
Merging blocks 392 and 496
Removing basic block 402
;; basic block 402, loop depth 0, count 0
;; prev block 407, next block 409
;; pred:      
;; succ:       409 [100.0%]  (fallthru,exec)
<bb 402>:


Removing basic block 407
;; basic block 407, loop depth 0, count 0
;; prev block 406, next block 409
;; pred:      
;; succ:       409 [100.0%]  (fallthru)
<bb 407>:


Removing basic block 413
;; basic block 413, loop depth 0, count 0
;; prev block 412, next block 408
;; pred:      
;; succ:       408 [100.0%]  (fallthru)
<bb 413>:


Merging blocks 418 and 414
Merging blocks 427 and 423
Merging blocks 438 and 434
Merging blocks 445 and 441
Merging blocks 450 and 446
Merging blocks 455 and 451
Merging blocks 462 and 458
Merging blocks 470 and 463
Merging blocks 475 and 471
Merging blocks 480 and 476
Merging blocks 487 and 483
Merging blocks 494 and 490
Merging blocks 502 and 495
Merging blocks 62 and 419
Merging blocks 64 and 421
Merging blocks 155 and 428
Merging blocks 159 and 430
Merging blocks 162 and 432
Merging blocks 170 and 439
Merging blocks 281 and 456
Merging blocks 346 and 481
Merging blocks 355 and 488


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement channel_162 = switch_core_session_get_channel (session_161(D));

Updating SSA information for statement matches = {};

Updating SSA information for statement near_matches = {};



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_186 = session_161(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.44471_191 = smh_186->mparams;

Updating SSA information for statement total_codecs_192 = D.44471_191->num_codecs;

Updating SSA information for statement D.44472_194 = strlen (r_sdp_193(D));

Updating SSA information for statement parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8

Updating SSA information for statement sdp_198 = sdp_session (parser_196);



Registering new PHI nodes in block #9

Updating SSA information for statement sdp_parser_free (parser_196);



Registering new PHI nodes in block #10

Updating SSA information for statement D.44478_200 = dtls_ok (session_161(D));



Registering new PHI nodes in block #11

Updating SSA information for statement D.44481_201 = smh_186->session;

Updating SSA information for statement D.44482_202 = D.44481_201->channel;

Updating SSA information for statement tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);



Registering new PHI nodes in block #12

Updating SSA information for statement D.44485_204 = switch_false (tmp_203);



Registering new PHI nodes in block #13

Updating SSA information for statement D.44481_205 = smh_186->session;

Updating SSA information for statement D.44482_206 = D.44481_205->channel;

Updating SSA information for statement switch_channel_clear_flag (D.44482_206, 111);

Updating SSA information for statement D.44481_207 = smh_186->session;

Updating SSA information for statement D.44482_208 = D.44481_207->channel;

Updating SSA information for statement switch_channel_clear_flag (D.44482_208, 109);



Registering new PHI nodes in block #14

Updating SSA information for statement switch_core_session_parse_crypto_prefs (session_161(D));

Updating SSA information for statement pmap_1457 = a_engine_188->payload_map;



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17

Updating SSA information for statement D.47871_1460 = pmap_1458->allocated;



Registering new PHI nodes in block #15

Updating SSA information for statement pmap_1458->negotiated = 0;

Updating SSA information for statement pmap_1458->current = 0;

Updating SSA information for statement pmap_1459 = pmap_1458->next;



Registering new PHI nodes in block #18

Updating SSA information for statement pmap_1461 = v_engine_189->payload_map;



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement D.47874_1464 = pmap_1462->allocated;



Registering new PHI nodes in block #19

Updating SSA information for statement pmap_1462->negotiated = 0;

Updating SSA information for statement pmap_1462->current = 0;

Updating SSA information for statement pmap_1463 = pmap_1462->next;



Registering new PHI nodes in block #22



Registering new PHI nodes in block #23

Updating SSA information for statement *proceed_209(D) = 1;



Registering new PHI nodes in block #24

Updating SSA information for statement D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);

Updating SSA information for statement D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);

Updating SSA information for statement val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);



Registering new PHI nodes in block #25

Updating SSA information for statement D.44494_215 = strcasecmp (val_214, "generous");



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27

Updating SSA information for statement D.44498_218 = strcasecmp (val_214, "greedy");



Registering new PHI nodes in block #28



Registering new PHI nodes in block #29

Updating SSA information for statement D.44502_221 = strcasecmp (val_214, "scrooge");



Registering new PHI nodes in block #30



Registering new PHI nodes in block #31

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);



Registering new PHI nodes in block #32

Updating SSA information for statement D.44506_224 = sdp_198->sdp_origin;

Updating SSA information for statement D.44507_225 = D.44506_224->o_username;

Updating SSA information for statement D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);

Updating SSA information for statement smh_186->origin = D.44508_226;

Updating SSA information for statement D.44509_227 = smh_186->origin;



Registering new PHI nodes in block #33

Updating SSA information for statement D.44471_228 = smh_186->mparams;

Updating SSA information for statement D.44512_229 = D.44471_228->auto_rtp_bugs;



Registering new PHI nodes in block #34

Updating SSA information for statement D.44509_233 = smh_186->origin;

Updating SSA information for statement D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");



Registering new PHI nodes in block #35

Updating SSA information for statement D.44521_235 = a_engine_188->rtp_bugs;

Updating SSA information for statement a_engine_188->rtp_bugs = D.44522_236;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");



Registering new PHI nodes in block #36

Updating SSA information for statement D.44471_237 = smh_186->mparams;

Updating SSA information for statement D.44512_238 = D.44471_237->auto_rtp_bugs;



Registering new PHI nodes in block #37

Updating SSA information for statement D.44509_240 = smh_186->origin;

Updating SSA information for statement D.44526_241 = strstr (D.44509_240, "Sonus_UAC");



Registering new PHI nodes in block #38

Updating SSA information for statement D.44521_242 = a_engine_188->rtp_bugs;

Updating SSA information for statement a_engine_188->rtp_bugs = D.44529_243;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");



Registering new PHI nodes in block #39

Updating SSA information for statement D.44530_244 = session_161(D)->channel;

Updating SSA information for statement val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);



Registering new PHI nodes in block #40

Updating SSA information for statement D.44533_246 = switch_true (val_245);



Registering new PHI nodes in block #41

Updating SSA information for statement D.44530_247 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44530_247, 93, 1);



Registering new PHI nodes in block #42

Updating SSA information for statement m_248 = sdp_198->sdp_media;



Registering new PHI nodes in block #43

Updating SSA information for statement D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;



Registering new PHI nodes in block #44

Updating SSA information for statement D.44546_254 = m_248->m_connections;



Registering new PHI nodes in block #45

Updating SSA information for statement D.44546_255 = m_248->m_connections;

Updating SSA information for statement D.44548_256 = D.44546_255->c_address;



Registering new PHI nodes in block #46



Registering new PHI nodes in block #47

Updating SSA information for statement D.44546_258 = m_248->m_connections;

Updating SSA information for statement __s1_259 = D.44546_258->c_address;

Updating SSA information for statement D.44553_260 = *__s1_259;

Updating SSA information for statement D.44556_263 = MEM[(const unsigned char *)D.44555_262];



Registering new PHI nodes in block #48

Updating SSA information for statement D.44564_270 = *D.44563_269;

Updating SSA information for statement D.44567_273 = MEM[(const unsigned char *)D.44566_272];



Registering new PHI nodes in block #49

Updating SSA information for statement D.44574_280 = *D.44573_279;

Updating SSA information for statement D.44577_283 = MEM[(const unsigned char *)D.44576_282];



Registering new PHI nodes in block #50

Updating SSA information for statement D.44584_290 = *D.44583_289;

Updating SSA information for statement D.44587_293 = MEM[(const unsigned char *)D.44586_292];



Registering new PHI nodes in block #51



Registering new PHI nodes in block #52

Updating SSA information for statement D.44546_298 = m_248->m_connections;

Updating SSA information for statement D.44548_299 = D.44546_298->c_address;

Updating SSA information for statement iftmp.88_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");



Registering new PHI nodes in block #53



Registering new PHI nodes in block #54



Registering new PHI nodes in block #55

Updating SSA information for statement attr_303 = sdp_198->sdp_attributes;



Registering new PHI nodes in block #77



Registering new PHI nodes in block #56

Updating SSA information for statement D.44590_304 = attr_29->a_name;



Registering new PHI nodes in block #57

Updating SSA information for statement D.47877_1465 = *D.44590_304;



Registering new PHI nodes in block #58



Registering new PHI nodes in block #59

Updating SSA information for statement D.47876 = D.47878_1466;

Updating SSA information for statement D.44591_305 = D.47876;



Registering new PHI nodes in block #61

Updating SSA information for statement D.44590_306 = attr_29->a_name;

Updating SSA information for statement D.44594_307 = strcasecmp (D.44590_306, "sendonly");



Registering new PHI nodes in block #62

Updating SSA information for statement D.44530_309 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);



Registering new PHI nodes in block #63

Updating SSA information for statement D.44590_310 = attr_29->a_name;

Updating SSA information for statement D.44598_311 = strcasecmp (D.44590_310, "inactive");



Registering new PHI nodes in block #64

Updating SSA information for statement D.44530_313 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);



Registering new PHI nodes in block #65

Updating SSA information for statement D.44590_314 = attr_29->a_name;

Updating SSA information for statement D.44602_315 = strcasecmp (D.44590_314, "recvonly");



Registering new PHI nodes in block #66

Updating SSA information for statement D.44530_316 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);

Updating SSA information for statement D.44605_318 = a_engine_188->rtp_session;

Updating SSA information for statement D.44606_319 = switch_rtp_ready (D.44605_318);



Registering new PHI nodes in block #67

Updating SSA information for statement D.44605_320 = a_engine_188->rtp_session;

Updating SSA information for statement switch_rtp_set_max_missed_packets (D.44605_320, 0);

Updating SSA information for statement a_engine_188->max_missed_hold_packets = 0;

Updating SSA information for statement a_engine_188->max_missed_packets = 0;



Registering new PHI nodes in block #68

Updating SSA information for statement D.44530_321 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);

Updating SSA information for statement D.44530_322 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);



Registering new PHI nodes in block #69



Registering new PHI nodes in block #70

Updating SSA information for statement D.44590_323 = attr_29->a_name;

Updating SSA information for statement D.44614_324 = strcasecmp (D.44590_323, "sendrecv");



Registering new PHI nodes in block #71



Registering new PHI nodes in block #72

Updating SSA information for statement D.44590_326 = attr_29->a_name;

Updating SSA information for statement D.44616_327 = strcasecmp (D.44590_326, "ptime");



Registering new PHI nodes in block #73

Updating SSA information for statement D.44619_328 = attr_29->a_value;

Updating SSA information for statement D.47881_1467 = strtol (D.44619_328, 0B, 10);

Updating SSA information for statement D.47880 = D.47881_1467;

Updating SSA information for statement dptime_329 = D.47880;



Registering new PHI nodes in block #74

Updating SSA information for statement D.44590_330 = attr_29->a_name;

Updating SSA information for statement D.44621_331 = strcasecmp (D.44590_330, "maxptime");



Registering new PHI nodes in block #75

Updating SSA information for statement D.44619_332 = attr_29->a_value;

Updating SSA information for statement D.47884_1468 = strtol (D.44619_332, 0B, 10);

Updating SSA information for statement D.47883 = D.47884_1468;

Updating SSA information for statement dmaxptime_333 = D.47883;



Registering new PHI nodes in block #60



Registering new PHI nodes in block #76

Updating SSA information for statement attr_334 = attr_29->a_next;



Registering new PHI nodes in block #78



Registering new PHI nodes in block #79

Updating SSA information for statement D.44530_338 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);



Registering new PHI nodes in block #80

Updating SSA information for statement D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);



Registering new PHI nodes in block #81

Updating SSA information for statement D.44530_340 = session_161(D)->channel;

Updating SSA information for statement val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);



Registering new PHI nodes in block #82

Updating SSA information for statement D.44635_342 = switch_true (val_341);



Registering new PHI nodes in block #83

Updating SSA information for statement D.44471_343 = smh_186->mparams;

Updating SSA information for statement D.44636_344 = D.44471_343->hold_laps;



Registering new PHI nodes in block #84

Updating SSA information for statement D.44471_345 = smh_186->mparams;

Updating SSA information for statement D.44636_346 = D.44471_345->hold_laps;

Updating SSA information for statement D.44471_345->hold_laps = D.44639_347;

Updating SSA information for statement D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);



Registering new PHI nodes in block #85

Updating SSA information for statement reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);

Updating SSA information for statement D.44530_350 = session_161(D)->channel;

Updating SSA information for statement val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);



Registering new PHI nodes in block #86

Updating SSA information for statement reneg_352 = switch_true (val_351);



Registering new PHI nodes in block #87



Registering new PHI nodes in block #88

Updating SSA information for statement reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);

Updating SSA information for statement D.44530_354 = session_161(D)->channel;

Updating SSA information for statement val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);



Registering new PHI nodes in block #89

Updating SSA information for statement reneg_356 = switch_true (val_355);



Registering new PHI nodes in block #90

Updating SSA information for statement D.44649_357 = session_161(D)->bugs;



Registering new PHI nodes in block #91

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");



Registering new PHI nodes in block #92



Registering new PHI nodes in block #93

Updating SSA information for statement D.44655_359 = smh_186->num_negotiated_codecs;



Registering new PHI nodes in block #94

Updating SSA information for statement total_codecs_361 = smh_186->num_negotiated_codecs;



Registering new PHI nodes in block #95



Registering new PHI nodes in block #96

Updating SSA information for statement D.44471_362 = smh_186->mparams;

Updating SSA information for statement D.44471_362->num_codecs = 0;

Updating SSA information for statement switch_core_media_prepare_codecs (session_161(D), 0);

Updating SSA information for statement D.44471_364 = smh_186->mparams;

Updating SSA information for statement total_codecs_365 = D.44471_364->num_codecs;



Registering new PHI nodes in block #97

Updating SSA information for statement D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));



Registering new PHI nodes in block #98

Updating SSA information for statement D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));



Registering new PHI nodes in block #99

Updating SSA information for statement D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));



Registering new PHI nodes in block #100

Updating SSA information for statement D.44530_369 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);



Registering new PHI nodes in block #101

Updating SSA information for statement switch_core_media_find_zrtp_hash (session_161(D), sdp_198);

Updating SSA information for statement switch_core_media_pass_zrtp_hash (session_161(D));

Updating SSA information for statement check_ice (smh_186, 0, sdp_198, 0B);

Updating SSA information for statement check_ice (smh_186, 1, sdp_198, 0B);

Updating SSA information for statement m_370 = sdp_198->sdp_media;



Registering new PHI nodes in block #450



Registering new PHI nodes in block #102

Updating SSA information for statement D.44666_373 = m_28->m_proto;



Registering new PHI nodes in block #103

Updating SSA information for statement switch_core_session_set_ice (session_161(D));



Registering new PHI nodes in block #104

Updating SSA information for statement D.44669_375 = m_28->m_proto_name;



Registering new PHI nodes in block #105

Updating SSA information for statement D.44669_376 = m_28->m_proto_name;

Updating SSA information for statement D.44672_377 = strcasecmp (D.44669_376, "UDP/TLS/RTP/SAVPF");



Registering new PHI nodes in block #106

Updating SSA information for statement D.44530_378 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44530_378, 107, 1);



Registering new PHI nodes in block #107

Updating SSA information for statement D.44675_379 = m_28->m_proto;



Registering new PHI nodes in block #108

Updating SSA information for statement D.44681_383 = m_28->m_type;



Registering new PHI nodes in block #109



Registering new PHI nodes in block #110



Registering new PHI nodes in block #111

Updating SSA information for statement D.44666_386 = m_28->m_proto;



Registering new PHI nodes in block #112

Updating SSA information for statement D.44681_387 = m_28->m_type;



Registering new PHI nodes in block #113



Registering new PHI nodes in block #114



Registering new PHI nodes in block #115

Updating SSA information for statement D.44666_390 = m_28->m_proto;



Registering new PHI nodes in block #116



Registering new PHI nodes in block #117



Registering new PHI nodes in block #118

Updating SSA information for statement D.44681_392 = m_28->m_type;



Registering new PHI nodes in block #119

Updating SSA information for statement D.44697_393 = m_28->m_port;



Registering new PHI nodes in block #120

Updating SSA information for statement t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);

Updating SSA information for statement D.44530_395 = session_161(D)->channel;

Updating SSA information for statement D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);



Registering new PHI nodes in block #121



Registering new PHI nodes in block #122

Updating SSA information for statement D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);

Updating SSA information for statement D.44703_399 = switch_true (D.44702_398);



Registering new PHI nodes in block #123

Updating SSA information for statement D.44530_400 = session_161(D)->channel;

Updating SSA information for statement switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);



Registering new PHI nodes in block #124

Updating SSA information for statement var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);

Updating SSA information for statement D.44481_403 = smh_186->session;

Updating SSA information for statement D.44482_404 = D.44481_403->channel;

Updating SSA information for statement D.44706_405 = switch_channel_test_flag (D.44482_404, 101);

Updating SSA information for statement D.44530_407 = session_161(D)->channel;

Updating SSA information for statement D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);



Registering new PHI nodes in block #125



Registering new PHI nodes in block #126

Updating SSA information for statement *proceed_209(D) = 0;



Registering new PHI nodes in block #127



Registering new PHI nodes in block #128

Updating SSA information for statement pass_409 = switch_true (var_402);



Registering new PHI nodes in block #129

Updating SSA information for statement D.44716_410 = strcasecmp (var_402, "once");



Registering new PHI nodes in block #130



Registering new PHI nodes in block #131



Registering new PHI nodes in block #132

Updating SSA information for statement D.44481_412 = smh_186->session;

Updating SSA information for statement D.44482_413 = D.44481_412->channel;

Updating SSA information for statement D.44723_414 = switch_channel_test_flag (D.44482_413, 101);



Registering new PHI nodes in block #133

Updating SSA information for statement D.44530_415 = session_161(D)->channel;

Updating SSA information for statement D.44724_416 = switch_channel_test_flag (D.44530_415, 103);



Registering new PHI nodes in block #134

Updating SSA information for statement D.44530_417 = session_161(D)->channel;

Updating SSA information for statement D.44726_418 = switch_channel_test_flag (D.44530_417, 15);



Registering new PHI nodes in block #135

Updating SSA information for statement D.44530_419 = session_161(D)->channel;

Updating SSA information for statement D.44728_420 = switch_channel_test_flag (D.44530_419, 29);



Registering new PHI nodes in block #136

Updating SSA information for statement D.44605_421 = a_engine_188->rtp_session;

Updating SSA information for statement D.44730_422 = switch_rtp_ready (D.44605_421);



Registering new PHI nodes in block #137



Registering new PHI nodes in block #138



Registering new PHI nodes in block #139

Updating SSA information for statement D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);



Registering new PHI nodes in block #140

Updating SSA information for statement other_session.89_425 = other_session;

Updating SSA information for statement other_channel_426 = switch_core_session_get_channel (other_session.89_425);

Updating SSA information for statement D.44605_427 = a_engine_188->rtp_session;

Updating SSA information for statement remote_host_428 = switch_rtp_get_remote_host (D.44605_427);

Updating SSA information for statement D.44605_429 = a_engine_188->rtp_session;

Updating SSA information for statement remote_port_430 = switch_rtp_get_remote_port (D.44605_429);

Updating SSA information for statement tmp = "";

Updating SSA information for statement D.44737_431 = switch_channel_test_flag (other_channel_426, 1);



Registering new PHI nodes in block #141

Updating SSA information for statement D.44530_432 = session_161(D)->channel;

Updating SSA information for statement D.44740_433 = switch_channel_get_name (D.44530_432);

Updating SSA information for statement D.44741_434 = switch_channel_get_name (other_channel_426);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

Updating SSA information for statement other_session.89_435 = other_session;

Updating SSA information for statement switch_core_session_rwunlock (other_session.89_435);



Registering new PHI nodes in block #142

Updating SSA information for statement D.44530_438 = session_161(D)->channel;

Updating SSA information for statement D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);

Updating SSA information for statement D.44743_440 = switch_true (D.44742_439);



Registering new PHI nodes in block #143

Updating SSA information for statement D.44530_441 = session_161(D)->channel;

Updating SSA information for statement D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);

Updating SSA information for statement D.44747_443 = switch_true (D.44746_442);



Registering new PHI nodes in block #144

Updating SSA information for statement switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);



Registering new PHI nodes in block #145

Updating SSA information for statement D.44750_444 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44751_445 = t38_options_394->remote_ip;

Updating SSA information for statement D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);

Updating SSA information for statement D.44750_444->remote_sdp_ip = D.44752_446;

Updating SSA information for statement D.44750_447 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44753_448 = t38_options_394->remote_port;

Updating SSA information for statement D.44750_447->remote_sdp_port = D.44753_448;



Registering new PHI nodes in block #146

Updating SSA information for statement D.44750_452 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44760_453 = D.44750_452->remote_sdp_ip;

Updating SSA information for statement D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);



Registering new PHI nodes in block #147

Updating SSA information for statement D.44750_455 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44762_456 = D.44750_455->remote_sdp_port;



Registering new PHI nodes in block #148

Updating SSA information for statement D.44530_457 = session_161(D)->channel;

Updating SSA information for statement D.44764_458 = switch_channel_get_name (D.44530_457);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);



Registering new PHI nodes in block #149

Updating SSA information for statement err = 0B;

Updating SSA information for statement D.44530_459 = session_161(D)->channel;

Updating SSA information for statement D.44765_460 = switch_channel_get_name (D.44530_459);

Updating SSA information for statement D.44750_462 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44760_463 = D.44750_462->remote_sdp_ip;

Updating SSA information for statement D.44750_464 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44762_465 = D.44750_464->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

Updating SSA information for statement D.44750_467 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44762_468 = D.44750_467->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 32, "%d", D.44767_469);

Updating SSA information for statement D.44530_470 = session_161(D)->channel;

Updating SSA information for statement D.44750_471 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44760_472 = D.44750_471->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);

Updating SSA information for statement D.44530_473 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);

Updating SSA information for statement D.44605_474 = a_engine_188->rtp_session;

Updating SSA information for statement D.44750_475 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44760_476 = D.44750_475->remote_sdp_ip;

Updating SSA information for statement D.44750_477 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44762_478 = D.44750_477->remote_sdp_port;

Updating SSA information for statement D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);



Registering new PHI nodes in block #150

Updating SSA information for statement err.90_480 = err;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);

Updating SSA information for statement switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);



Registering new PHI nodes in block #151

Updating SSA information for statement other_session.89_481 = other_session;

Updating SSA information for statement switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);

Updating SSA information for statement D.44481_482 = smh_186->session;

Updating SSA information for statement D.44482_483 = D.44481_482->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44482_483, 101, 1);

Updating SSA information for statement other_session.89_484 = other_session;

Updating SSA information for statement D.44772_485 = other_session.89_484->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44772_485, 101, 1);

Updating SSA information for statement other_session.89_486 = other_session;

Updating SSA information for statement msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);

Updating SSA information for statement msg_487->message_id = 21;

Updating SSA information for statement msg_487->from = "src/switch_core_media.c";

Updating SSA information for statement other_session.89_488 = other_session;

Updating SSA information for statement D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);

Updating SSA information for statement msg_487->string_arg = D.44773_489;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));

Updating SSA information for statement other_session.89_490 = other_session;

Updating SSA information for statement switch_core_session_queue_message (other_session.89_490, msg_487);

Updating SSA information for statement other_session.89_491 = other_session;

Updating SSA information for statement switch_core_session_rwunlock (other_session.89_491);



Registering new PHI nodes in block #152



Registering new PHI nodes in block #153

Updating SSA information for statement D.44681_493 = m_28->m_type;



Registering new PHI nodes in block #154

Updating SSA information for statement D.44697_494 = m_28->m_port;



Registering new PHI nodes in block #155

Updating SSA information for statement D.44781_498 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #156

Updating SSA information for statement D.44784_499 = dtls_ok (session_161(D));



Registering new PHI nodes in block #157

Updating SSA information for statement attr_500 = m_28->m_attributes;



Registering new PHI nodes in block #165



Registering new PHI nodes in block #158

Updating SSA information for statement D.44590_501 = attr_30->a_name;

Updating SSA information for statement D.44787_502 = strcasecmp (D.44590_501, "fingerprint");



Registering new PHI nodes in block #159

Updating SSA information for statement D.44619_503 = attr_30->a_value;



Registering new PHI nodes in block #160

Updating SSA information for statement D.47887_1469 = *D.44619_503;



Registering new PHI nodes in block #161



Registering new PHI nodes in block #162

Updating SSA information for statement D.47886 = D.47888_1470;

Updating SSA information for statement D.44790_504 = D.47886;



Registering new PHI nodes in block #163



Registering new PHI nodes in block #164

Updating SSA information for statement attr_506 = attr_30->a_next;



Registering new PHI nodes in block #166

Updating SSA information for statement attr_507 = m_28->m_attributes;



Registering new PHI nodes in block #189



Registering new PHI nodes in block #167

Updating SSA information for statement D.44590_508 = attr_31->a_name;

Updating SSA information for statement D.44795_509 = strcasecmp (D.44590_508, "rtcp");



Registering new PHI nodes in block #168

Updating SSA information for statement D.44619_510 = attr_31->a_value;



Registering new PHI nodes in block #169

Updating SSA information for statement D.44530_511 = session_161(D)->channel;

Updating SSA information for statement D.44619_512 = attr_31->a_value;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);

Updating SSA information for statement D.44619_513 = attr_31->a_value;

Updating SSA information for statement D.47891_1471 = strtol (D.44619_513, 0B, 10);

Updating SSA information for statement D.47890 = D.47891_1471;

Updating SSA information for statement D.44798_514 = D.47890;

Updating SSA information for statement a_engine_188->remote_rtcp_port = D.44799_515;

Updating SSA information for statement D.44471_516 = smh_186->mparams;

Updating SSA information for statement D.44800_517 = D.44471_516->rtcp_audio_interval_msec;



Registering new PHI nodes in block #170

Updating SSA information for statement D.44471_518 = smh_186->mparams;

Updating SSA information for statement D.44471_518->rtcp_audio_interval_msec = "5000";



Registering new PHI nodes in block #171

Updating SSA information for statement D.44590_519 = attr_31->a_name;

Updating SSA information for statement D.44805_520 = strcasecmp (D.44590_519, "ptime");



Registering new PHI nodes in block #172

Updating SSA information for statement D.44619_521 = attr_31->a_value;



Registering new PHI nodes in block #173

Updating SSA information for statement D.44619_522 = attr_31->a_value;

Updating SSA information for statement D.47894_1472 = strtol (D.44619_522, 0B, 10);

Updating SSA information for statement D.47893 = D.47894_1472;

Updating SSA information for statement ptime_523 = D.47893;



Registering new PHI nodes in block #174

Updating SSA information for statement D.44590_524 = attr_31->a_name;

Updating SSA information for statement D.44810_525 = strcasecmp (D.44590_524, "maxptime");



Registering new PHI nodes in block #175

Updating SSA information for statement D.44619_526 = attr_31->a_value;



Registering new PHI nodes in block #176

Updating SSA information for statement D.44619_527 = attr_31->a_value;

Updating SSA information for statement D.47897_1473 = strtol (D.44619_527, 0B, 10);

Updating SSA information for statement D.47896 = D.47897_1473;

Updating SSA information for statement maxptime_528 = D.47896;



Registering new PHI nodes in block #177



Registering new PHI nodes in block #178

Updating SSA information for statement D.44590_529 = attr_31->a_name;

Updating SSA information for statement D.44815_530 = strcasecmp (D.44590_529, "crypto");



Registering new PHI nodes in block #179

Updating SSA information for statement D.44619_531 = attr_31->a_value;



Registering new PHI nodes in block #180

Updating SSA information for statement D.47900_1474 = *D.44619_531;



Registering new PHI nodes in block #181



Registering new PHI nodes in block #182

Updating SSA information for statement D.47899 = D.47901_1475;

Updating SSA information for statement D.44818_532 = D.47899;



Registering new PHI nodes in block #183

Updating SSA information for statement D.44471_533 = smh_186->mparams;

Updating SSA information for statement D.44821_534 = D.44471_533->ndlb;



Registering new PHI nodes in block #184

Updating SSA information for statement D.44530_536 = session_161(D)->channel;

Updating SSA information for statement D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);

Updating SSA information for statement D.44826_538 = switch_true (D.44825_537);



Registering new PHI nodes in block #185

Updating SSA information for statement D.44666_539 = m_28->m_proto;



Registering new PHI nodes in block #186

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");



Registering new PHI nodes in block #187

Updating SSA information for statement crypto_544 = attr_31->a_value;

Updating SSA information for statement D.47904_1476 = strtol (crypto_544, 0B, 10);

Updating SSA information for statement D.47903 = D.47904_1476;

Updating SSA information for statement crypto_tag_545 = D.47903;

Updating SSA information for statement got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_545, sdp_type_546(D));



Registering new PHI nodes in block #188

Updating SSA information for statement attr_548 = attr_31->a_next;



Registering new PHI nodes in block #190



Registering new PHI nodes in block #191



Registering new PHI nodes in block #192

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");



Registering new PHI nodes in block #193

Updating SSA information for statement connection_554 = sdp_198->sdp_connection;

Updating SSA information for statement D.44546_555 = m_28->m_connections;



Registering new PHI nodes in block #194

Updating SSA information for statement connection_556 = m_28->m_connections;



Registering new PHI nodes in block #195



Registering new PHI nodes in block #196

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");



Registering new PHI nodes in block #197

Updating SSA information for statement map_559 = m_28->m_rtpmaps;



Registering new PHI nodes in block #281



Registering new PHI nodes in block #198

Updating SSA information for statement codec_fmtp = {};

Updating SSA information for statement rm_encoding_561 = map_128->rm_encoding;



Registering new PHI nodes in block #199



Registering new PHI nodes in block #200

Updating SSA information for statement D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");



Registering new PHI nodes in block #201



Registering new PHI nodes in block #202

Updating SSA information for statement D.44854_564 = map_128->rm_rate;

Updating SSA information for statement D.44750_565 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44855_566 = D.44750_565->rm_rate;



Registering new PHI nodes in block #203

Updating SSA information for statement D.44856_567 = map_128->rm_pt;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);



Registering new PHI nodes in block #204



Registering new PHI nodes in block #205

Updating SSA information for statement D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);



Registering new PHI nodes in block #206



Registering new PHI nodes in block #207

Updating SSA information for statement D.44863_571 = strcasecmp (rm_encoding_130, "CN");



Registering new PHI nodes in block #208

Updating SSA information for statement D.44856_572 = map_128->rm_pt;

Updating SSA information for statement D.44605_574 = a_engine_188->rtp_session;



Registering new PHI nodes in block #209

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);

Updating SSA information for statement D.44605_576 = a_engine_188->rtp_session;

Updating SSA information for statement D.44471_577 = smh_186->mparams;

Updating SSA information for statement D.44869_578 = D.44471_577->cng_pt;

Updating SSA information for statement switch_rtp_set_cng_pt (D.44605_576, D.44869_578);



Registering new PHI nodes in block #210



Registering new PHI nodes in block #211



Registering new PHI nodes in block #212



Registering new PHI nodes in block #213



Registering new PHI nodes in block #214



Registering new PHI nodes in block #215



Registering new PHI nodes in block #216



Registering new PHI nodes in block #217



Registering new PHI nodes in block #218



Registering new PHI nodes in block #219

Updating SSA information for statement D.44856_586 = map_128->rm_pt;

Updating SSA information for statement D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);



Registering new PHI nodes in block #220

Updating SSA information for statement D.44856_590 = map_128->rm_pt;



Registering new PHI nodes in block #222

Updating SSA information for statement D.47908_1479 = CSWTCH.174[csui.173_1477];



Registering new PHI nodes in block #221



Registering new PHI nodes in block #223

Updating SSA information for statement D.47906 = D.47908_1480;

Updating SSA information for statement map_bit_rate_592 = D.47906;



Registering new PHI nodes in block #224

Updating SSA information for statement D.44889_593 = map_128->rm_encoding;

Updating SSA information for statement D.44890_594 = strcasecmp (D.44889_593, "g723");



Registering new PHI nodes in block #225



Registering new PHI nodes in block #226

Updating SSA information for statement remote_codec_rate_596 = map_128->rm_rate;

Updating SSA information for statement memset (&codec_fmtp, 0, 16);

Updating SSA information for statement D.44893_598 = map_128->rm_fmtp;



Registering new PHI nodes in block #227

Updating SSA information for statement D.47915_1481 = *D.44893_598;



Registering new PHI nodes in block #228



Registering new PHI nodes in block #229

Updating SSA information for statement D.47914 = D.47916_1482;

Updating SSA information for statement D.44894_599 = D.47914;



Registering new PHI nodes in block #234

Updating SSA information for statement D.44889_608 = map_128->rm_encoding;

Updating SSA information for statement D.44893_609 = map_128->rm_fmtp;

Updating SSA information for statement D.44854_610 = map_128->rm_rate;

Updating SSA information for statement D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);



Registering new PHI nodes in block #235

Updating SSA information for statement D.44908_612 = codec_fmtp.bits_per_second;



Registering new PHI nodes in block #236

Updating SSA information for statement D.44908_613 = codec_fmtp.bits_per_second;



Registering new PHI nodes in block #237

Updating SSA information for statement D.44911_615 = codec_fmtp.microseconds_per_packet;



Registering new PHI nodes in block #238

Updating SSA information for statement D.44911_616 = codec_fmtp.microseconds_per_packet;



Registering new PHI nodes in block #239

Updating SSA information for statement D.44914_618 = codec_fmtp.actual_samples_per_second;



Registering new PHI nodes in block #240

Updating SSA information for statement fmtp_remote_codec_rate_619 = codec_fmtp.actual_samples_per_second;



Registering new PHI nodes in block #230

Updating SSA information for statement D.44889_600 = map_128->rm_encoding;

Updating SSA information for statement D.44897_601 = strcasecmp (D.44889_600, "ilbc");



Registering new PHI nodes in block #231



Registering new PHI nodes in block #232

Updating SSA information for statement D.44889_604 = map_128->rm_encoding;

Updating SSA information for statement D.44901_605 = strcasecmp (D.44889_604, "isac");



Registering new PHI nodes in block #233



Registering new PHI nodes in block #241



Registering new PHI nodes in block #278

Updating SSA information for statement D.44471_621 = smh_186->mparams;

Updating SSA information for statement D.44996_622 = D.44471_621->num_codecs;



Registering new PHI nodes in block #242

Updating SSA information for statement imp_629 = *D.44919_628;

Updating SSA information for statement D.44920_630 = imp_629->bits_per_second;

Updating SSA information for statement codec_rate_632 = imp_629->samples_per_second;

Updating SSA information for statement D.44921_633 = imp_629->codec_type;



Registering new PHI nodes in block #243



Registering new PHI nodes in block #244

Updating SSA information for statement D.44856_634 = map_128->rm_pt;

Updating SSA information for statement D.44926_637 = imp_629->iananame;

Updating SSA information for statement D.44927_638 = imp_629->ianacode;

Updating SSA information for statement D.44929_640 = imp_629->microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

Updating SSA information for statement D.44889_642 = map_128->rm_encoding;



Registering new PHI nodes in block #245

Updating SSA information for statement D.47919_1483 = *D.44889_642;



Registering new PHI nodes in block #246



Registering new PHI nodes in block #247

Updating SSA information for statement D.47918 = D.47920_1484;

Updating SSA information for statement D.44934_643 = D.47918;



Registering new PHI nodes in block #248

Updating SSA information for statement D.44471_644 = smh_186->mparams;

Updating SSA information for statement D.44821_645 = D.44471_644->ndlb;



Registering new PHI nodes in block #249

Updating SSA information for statement D.44856_649 = map_128->rm_pt;



Registering new PHI nodes in block #250

Updating SSA information for statement D.44856_651 = map_128->rm_pt;

Updating SSA information for statement D.44927_653 = imp_629->ianacode;



Registering new PHI nodes in block #251

Updating SSA information for statement D.44926_656 = imp_629->iananame;

Updating SSA information for statement D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);



Registering new PHI nodes in block #252



Registering new PHI nodes in block #253

Updating SSA information for statement D.44947_658 = imp_629->actual_samples_per_second;



Registering new PHI nodes in block #254



Registering new PHI nodes in block #255



Registering new PHI nodes in block #256



Registering new PHI nodes in block #257



Registering new PHI nodes in block #258



Registering new PHI nodes in block #259



Registering new PHI nodes in block #260

Updating SSA information for statement D.44889_669 = map_128->rm_encoding;

Updating SSA information for statement D.44960_670 = strcasecmp (D.44889_669, "ilbc");



Registering new PHI nodes in block #261

Updating SSA information for statement D.44889_671 = map_128->rm_encoding;

Updating SSA information for statement D.44963_672 = strcasecmp (D.44889_671, "isac");



Registering new PHI nodes in block #262



Registering new PHI nodes in block #263



Registering new PHI nodes in block #264



Registering new PHI nodes in block #265

Updating SSA information for statement D.44889_680 = map_128->rm_encoding;

Updating SSA information for statement D.44977_681 = strcasecmp (D.44889_680, "pcma");



Registering new PHI nodes in block #266

Updating SSA information for statement D.44889_682 = map_128->rm_encoding;

Updating SSA information for statement D.44979_683 = strcasecmp (D.44889_682, "pcmu");



Registering new PHI nodes in block #267

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");



Registering new PHI nodes in block #268



Registering new PHI nodes in block #269



Registering new PHI nodes in block #270

Updating SSA information for statement D.44926_685 = imp_629->iananame;

Updating SSA information for statement D.44984_686 = imp_629->samples_per_second;

Updating SSA information for statement D.44929_687 = imp_629->microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);



Registering new PHI nodes in block #271



Registering new PHI nodes in block #272

Updating SSA information for statement D.44929_693 = imp_629->microseconds_per_packet;



Registering new PHI nodes in block #273



Registering new PHI nodes in block #274

Updating SSA information for statement D.44926_695 = imp_629->iananame;

Updating SSA information for statement D.44927_696 = imp_629->ianacode;

Updating SSA information for statement D.44929_698 = imp_629->microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);

Updating SSA information for statement near_matches[nm_idx_116].codec_idx = i_129;

Updating SSA information for statement near_matches[nm_idx_116].rate = remote_codec_rate.92_700;

Updating SSA information for statement near_matches[nm_idx_116].imp = imp_629;

Updating SSA information for statement near_matches[nm_idx_116].map = map_128;



Registering new PHI nodes in block #275

Updating SSA information for statement matches[m_idx_101].codec_idx = i_129;

Updating SSA information for statement matches[m_idx_101].rate = codec_rate.94_702;

Updating SSA information for statement matches[m_idx_101].imp = imp_629;

Updating SSA information for statement matches[m_idx_101].map = map_128;

Updating SSA information for statement D.44926_704 = imp_629->iananame;

Updating SSA information for statement D.44927_705 = imp_629->ianacode;

Updating SSA information for statement D.44929_707 = imp_629->microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);



Registering new PHI nodes in block #276



Registering new PHI nodes in block #277



Registering new PHI nodes in block #279



Registering new PHI nodes in block #280

Updating SSA information for statement map_711 = map_128->rm_next;



Registering new PHI nodes in block #282

Updating SSA information for statement D.45001_712 = smh_186->crypto_mode;



Registering new PHI nodes in block #283

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");



Registering new PHI nodes in block #284



Registering new PHI nodes in block #285



Registering new PHI nodes in block #296



Registering new PHI nodes in block #286

Updating SSA information for statement D.45012_724 = near_matches[j_133].rate;

Updating SSA information for statement near_match_726 = near_matches[j_133].imp;

Updating SSA information for statement near_map_727 = near_matches[j_133].map;

Updating SSA information for statement D.45013_728 = near_match_726->iananame;



Registering new PHI nodes in block #287

Updating SSA information for statement iftmp.95_729 = near_match_726->samples_per_second;



Registering new PHI nodes in block #288



Registering new PHI nodes in block #289

Updating SSA information for statement switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, iftmp.95_145, codec_ms_93);

Updating SSA information for statement prefs[0] = &tmp;

Updating SSA information for statement num_731 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);



Registering new PHI nodes in block #290

Updating SSA information for statement timp_732 = search[0];



Registering new PHI nodes in block #291



Registering new PHI nodes in block #292



Registering new PHI nodes in block #293

Updating SSA information for statement D.45024_734 = timp_134->microseconds_per_packet;



Registering new PHI nodes in block #295



Registering new PHI nodes in block #294

Updating SSA information for statement D.45026_737 = timp_134->iananame;

Updating SSA information for statement D.45024_738 = timp_134->microseconds_per_packet;

Updating SSA information for statement D.45027_740 = timp_134->actual_samples_per_second;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);

Updating SSA information for statement D.45028_742 = near_matches[j_133].codec_idx;

Updating SSA information for statement matches[m_idx_106].codec_idx = D.45028_742;

Updating SSA information for statement matches[m_idx_106].rate = near_rate.96_743;

Updating SSA information for statement matches[m_idx_106].imp = timp_134;

Updating SSA information for statement matches[m_idx_106].map = near_map_727;



Registering new PHI nodes in block #297



Registering new PHI nodes in block #298



Registering new PHI nodes in block #299

Updating SSA information for statement greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);



Registering new PHI nodes in block #300

Updating SSA information for statement a_engine_188->codec_negotiated = 1;

Updating SSA information for statement smh_186->num_negotiated_codecs = 0;



Registering new PHI nodes in block #322



Registering new PHI nodes in block #301

Updating SSA information for statement D.45034_747 = matches[j_135].map;

Updating SSA information for statement D.45035_748 = D.45034_747->rm_encoding;

Updating SSA information for statement D.45034_749 = matches[j_135].map;

Updating SSA information for statement D.45036_750 = D.45034_749->rm_fmtp;

Updating SSA information for statement D.45034_751 = matches[j_135].map;

Updating SSA information for statement D.45037_752 = D.45034_751->rm_pt;

Updating SSA information for statement D.45039_754 = matches[j_135].imp;

Updating SSA information for statement D.45040_755 = D.45039_754->samples_per_second;

Updating SSA information for statement D.45039_756 = matches[j_135].imp;

Updating SSA information for statement D.45041_757 = D.45039_756->microseconds_per_packet;

Updating SSA information for statement pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

Updating SSA information for statement mimp_761 = matches[j_135].imp;

Updating SSA information for statement mmap_762 = matches[j_135].map;



Registering new PHI nodes in block #302

Updating SSA information for statement a_engine_188->cur_payload_map = pmap_760;

Updating SSA information for statement D.44750_763 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44750_763->current = 1;

Updating SSA information for statement D.44605_764 = a_engine_188->rtp_session;



Registering new PHI nodes in block #303

Updating SSA information for statement D.44605_765 = a_engine_188->rtp_session;

Updating SSA information for statement D.45048_766 = pmap_760->pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.44605_765, D.45048_766);



Registering new PHI nodes in block #304

Updating SSA information for statement D.45049_767 = mmap_762->rm_encoding;

Updating SSA information for statement D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);

Updating SSA information for statement pmap_760->rm_encoding = D.45050_768;

Updating SSA information for statement D.45051_769 = mimp_761->iananame;

Updating SSA information for statement D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);

Updating SSA information for statement pmap_760->iananame = D.45052_770;

Updating SSA information for statement D.45053_771 = mmap_762->rm_pt;

Updating SSA information for statement pmap_760->recv_pt = D.45054_772;

Updating SSA information for statement D.45055_773 = mimp_761->samples_per_second;

Updating SSA information for statement pmap_760->rm_rate = D.45055_773;

Updating SSA information for statement D.45055_774 = mimp_761->samples_per_second;

Updating SSA information for statement pmap_760->adv_rm_rate = D.45055_774;

Updating SSA information for statement D.45051_775 = mimp_761->iananame;

Updating SSA information for statement D.45056_776 = strcasecmp (D.45051_775, "g722");



Registering new PHI nodes in block #305

Updating SSA information for statement D.45059_777 = mimp_761->actual_samples_per_second;

Updating SSA information for statement pmap_760->rm_rate = D.45059_777;



Registering new PHI nodes in block #306

Updating SSA information for statement D.45060_778 = mimp_761->microseconds_per_packet;

Updating SSA information for statement pmap_760->codec_ms = D.45062_780;

Updating SSA information for statement D.45063_781 = mimp_761->bits_per_second;

Updating SSA information for statement pmap_760->bitrate = D.45064_782;

Updating SSA information for statement D.45066_783 = mmap_762->rm_params;



Registering new PHI nodes in block #307

Updating SSA information for statement D.45066_784 = mmap_762->rm_params;

Updating SSA information for statement D.47923_1485 = strtol (D.45066_784, 0B, 10);

Updating SSA information for statement D.47922 = D.47923_1485;

Updating SSA information for statement iftmp.97_785 = D.47922;



Registering new PHI nodes in block #308



Registering new PHI nodes in block #309

Updating SSA information for statement pmap_760->channels = iftmp.97_146;

Updating SSA information for statement D.45049_787 = mmap_762->rm_encoding;

Updating SSA information for statement D.45070_788 = strcasecmp (D.45049_787, "opus");



Registering new PHI nodes in block #310

Updating SSA information for statement D.45073_789 = pmap_760->channels;



Registering new PHI nodes in block #311

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");

Updating SSA information for statement pmap_760->adv_channels = 1;



Registering new PHI nodes in block #312

Updating SSA information for statement pmap_760->adv_channels = 2;



Registering new PHI nodes in block #313

Updating SSA information for statement D.45079_790 = mmap_762->rm_fmtp;



Registering new PHI nodes in block #314

Updating SSA information for statement D.47926_1486 = *D.45079_790;



Registering new PHI nodes in block #315



Registering new PHI nodes in block #316

Updating SSA information for statement D.47925 = D.47927_1487;

Updating SSA information for statement D.45080_791 = D.47925;



Registering new PHI nodes in block #317

Updating SSA information for statement D.45079_792 = mmap_762->rm_fmtp;

Updating SSA information for statement D.45082_793 = switch_stristr ("stereo=1", D.45079_792);



Registering new PHI nodes in block #318

Updating SSA information for statement pmap_760->channels = 2;



Registering new PHI nodes in block #319

Updating SSA information for statement pmap_760->channels = 1;



Registering new PHI nodes in block #320

Updating SSA information for statement D.45073_794 = pmap_760->channels;

Updating SSA information for statement pmap_760->adv_channels = D.45073_794;



Registering new PHI nodes in block #321

Updating SSA information for statement D.45085_795 = connection_124->c_address;

Updating SSA information for statement D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);

Updating SSA information for statement pmap_760->remote_sdp_ip = D.45086_796;

Updating SSA information for statement D.44697_797 = m_28->m_port;

Updating SSA information for statement pmap_760->remote_sdp_port = D.45087_798;

Updating SSA information for statement D.45079_799 = mmap_762->rm_fmtp;

Updating SSA information for statement D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);

Updating SSA information for statement pmap_760->rm_fmtp = D.45088_800;

Updating SSA information for statement D.45053_801 = mmap_762->rm_pt;

Updating SSA information for statement pmap_760->agreed_pt = D.45054_802;

Updating SSA information for statement D.44655_803 = smh_186->num_negotiated_codecs;

Updating SSA information for statement smh_186->negotiated_codecs[D.44655_803] = mimp_761;

Updating SSA information for statement smh_186->num_negotiated_codecs = D.45089_804;

Updating SSA information for statement D.45053_805 = mmap_762->rm_pt;

Updating SSA information for statement pmap_760->recv_pt = D.45054_806;



Registering new PHI nodes in block #323



Registering new PHI nodes in block #324

Updating SSA information for statement D.44750_808 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44762_809 = D.44750_808->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.44767_810);

Updating SSA information for statement D.44530_811 = session_161(D)->channel;

Updating SSA information for statement D.44750_812 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.44760_813 = D.44750_812->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);

Updating SSA information for statement D.44530_814 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);

Updating SSA information for statement D.44750_815 = a_engine_188->cur_payload_map;

Updating SSA information for statement D.45092_816 = D.44750_815->recv_pt;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.45093_817);

Updating SSA information for statement D.44530_818 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);



Registering new PHI nodes in block #325

Updating SSA information for statement D.47934_1488 = D.45094_819->flags;



Registering new PHI nodes in block #326

Updating SSA information for statement D.47932_1490 = D.45094_819->mutex;



Registering new PHI nodes in block #327

Updating SSA information for statement D.47931_1491 = D.45094_819->codec_interface;



Registering new PHI nodes in block #328

Updating SSA information for statement D.47930_1492 = D.45094_819->implementation;



Registering new PHI nodes in block #329



Registering new PHI nodes in block #330

Updating SSA information for statement D.47929 = D.47936_1494;

Updating SSA information for statement D.45095_820 = D.47929;



Registering new PHI nodes in block #331

Updating SSA information for statement a_engine_188->reset_codec = 1;



Registering new PHI nodes in block #332

Updating SSA information for statement D.44471_821 = smh_186->mparams;

Updating SSA information for statement D.45098_822 = D.44471_821->codec_flags;

Updating SSA information for statement D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);



Registering new PHI nodes in block #333

Updating SSA information for statement check_ice (smh_186, 0, sdp_198, m_28);



Registering new PHI nodes in block #334



Registering new PHI nodes in block #335



Registering new PHI nodes in block #336

Updating SSA information for statement D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);



Registering new PHI nodes in block #337

Updating SSA information for statement D.44530_827 = session_161(D)->channel;

Updating SSA information for statement D.45109_828 = switch_channel_test_flag (D.44530_827, 93);



Registering new PHI nodes in block #338

Updating SSA information for statement D.44471_829 = smh_186->mparams;

Updating SSA information for statement D.45110_830 = D.44471_829->te;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);

Updating SSA information for statement D.44471_832 = smh_186->mparams;

Updating SSA information for statement best_te_833 = D.44471_832->te;



Registering new PHI nodes in block #339



Registering new PHI nodes in block #340

Updating SSA information for statement D.45114_834 = switch_channel_direction (channel_162);



Registering new PHI nodes in block #341

Updating SSA information for statement D.44471_835 = smh_186->mparams;

Updating SSA information for statement D.44471_835->te = best_te_21;

Updating SSA information for statement te_836 = D.44471_835->te;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);

Updating SSA information for statement D.44530_838 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);

Updating SSA information for statement D.44471_839 = smh_186->mparams;

Updating SSA information for statement D.44471_839->dtmf_type = 0;

Updating SSA information for statement D.44605_840 = a_engine_188->rtp_session;



Registering new PHI nodes in block #342

Updating SSA information for statement D.44605_841 = a_engine_188->rtp_session;

Updating SSA information for statement switch_rtp_set_telephony_event (D.44605_841, best_te_21);

Updating SSA information for statement D.44530_842 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_843);



Registering new PHI nodes in block #343

Updating SSA information for statement D.44471_844 = smh_186->mparams;

Updating SSA information for statement D.44471_845 = smh_186->mparams;

Updating SSA information for statement D.44471_845->te = best_te_21;

Updating SSA information for statement D.45110_846 = D.44471_845->te;

Updating SSA information for statement D.44471_845->recv_te = D.45110_846;

Updating SSA information for statement te_847 = D.44471_845->recv_te;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);

Updating SSA information for statement D.44530_849 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);

Updating SSA information for statement D.44471_850 = smh_186->mparams;

Updating SSA information for statement D.44471_850->dtmf_type = 0;

Updating SSA information for statement D.44605_851 = a_engine_188->rtp_session;



Registering new PHI nodes in block #344

Updating SSA information for statement D.44605_852 = a_engine_188->rtp_session;

Updating SSA information for statement switch_rtp_set_telephony_event (D.44605_852, te_847);

Updating SSA information for statement D.44530_853 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_854);

Updating SSA information for statement D.44605_855 = a_engine_188->rtp_session;

Updating SSA information for statement switch_rtp_set_telephony_recv_event (D.44605_855, te_847);

Updating SSA information for statement D.44530_856 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_857);



Registering new PHI nodes in block #345

Updating SSA information for statement D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);

Updating SSA information for statement D.45125_859 = switch_false (D.45124_858);



Registering new PHI nodes in block #346

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");

Updating SSA information for statement D.44530_860 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);

Updating SSA information for statement D.44471_861 = smh_186->mparams;

Updating SSA information for statement D.44471_861->dtmf_type = 1;

Updating SSA information for statement D.44471_862 = smh_186->mparams;

Updating SSA information for statement D.44471_863 = smh_186->mparams;

Updating SSA information for statement D.44471_863->te = 0;

Updating SSA information for statement D.45110_864 = D.44471_863->te;

Updating SSA information for statement D.44471_863->recv_te = D.45110_864;

Updating SSA information for statement te_865 = D.44471_863->recv_te;



Registering new PHI nodes in block #347

Updating SSA information for statement D.44530_866 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);

Updating SSA information for statement D.44471_867 = smh_186->mparams;

Updating SSA information for statement D.44471_867->dtmf_type = 2;

Updating SSA information for statement D.44471_868 = smh_186->mparams;

Updating SSA information for statement D.44471_869 = smh_186->mparams;

Updating SSA information for statement D.44471_869->te = 0;

Updating SSA information for statement D.45110_870 = D.44471_869->te;

Updating SSA information for statement D.44471_869->recv_te = D.45110_870;

Updating SSA information for statement te_871 = D.44471_869->recv_te;



Registering new PHI nodes in block #348

Updating SSA information for statement D.44681_872 = m_28->m_type;



Registering new PHI nodes in block #349

Updating SSA information for statement D.44697_873 = m_28->m_port;



Registering new PHI nodes in block #350

Updating SSA information for statement memset (&matches, 0, 480);

Updating SSA information for statement memset (&near_matches, 0, 480);

Updating SSA information for statement D.44530_878 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);

Updating SSA information for statement connection_879 = sdp_198->sdp_connection;

Updating SSA information for statement D.44546_880 = m_28->m_connections;



Registering new PHI nodes in block #351

Updating SSA information for statement connection_881 = m_28->m_connections;



Registering new PHI nodes in block #352



Registering new PHI nodes in block #353

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");



Registering new PHI nodes in block #354

Updating SSA information for statement map_883 = m_28->m_rtpmaps;



Registering new PHI nodes in block #425



Registering new PHI nodes in block #355

Updating SSA information for statement D.45137_884 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #356

Updating SSA information for statement D.45140_885 = dtls_ok (session_161(D));



Registering new PHI nodes in block #357

Updating SSA information for statement attr_886 = m_28->m_attributes;



Registering new PHI nodes in block #365



Registering new PHI nodes in block #358

Updating SSA information for statement D.44590_887 = attr_32->a_name;

Updating SSA information for statement D.45143_888 = strcasecmp (D.44590_887, "fingerprint");



Registering new PHI nodes in block #359

Updating SSA information for statement D.44619_889 = attr_32->a_value;



Registering new PHI nodes in block #360

Updating SSA information for statement D.47939_1495 = *D.44619_889;



Registering new PHI nodes in block #361



Registering new PHI nodes in block #362

Updating SSA information for statement D.47938 = D.47940_1496;

Updating SSA information for statement D.45146_890 = D.47938;



Registering new PHI nodes in block #363



Registering new PHI nodes in block #364

Updating SSA information for statement attr_892 = attr_32->a_next;



Registering new PHI nodes in block #366

Updating SSA information for statement attr_893 = m_28->m_attributes;



Registering new PHI nodes in block #401



Registering new PHI nodes in block #367

Updating SSA information for statement D.44590_894 = attr_33->a_name;

Updating SSA information for statement D.45151_895 = strcasecmp (D.44590_894, "framerate");



Registering new PHI nodes in block #368

Updating SSA information for statement D.44619_896 = attr_33->a_value;



Registering new PHI nodes in block #369

Updating SSA information for statement D.44590_897 = attr_33->a_name;

Updating SSA information for statement D.45154_898 = strcasecmp (D.44590_897, "rtcp-fb");



Registering new PHI nodes in block #370

Updating SSA information for statement D.44619_899 = attr_33->a_value;



Registering new PHI nodes in block #371

Updating SSA information for statement D.47943_1497 = *D.44619_899;



Registering new PHI nodes in block #372



Registering new PHI nodes in block #373

Updating SSA information for statement D.47942 = D.47944_1498;

Updating SSA information for statement D.45157_900 = D.47942;



Registering new PHI nodes in block #374

Updating SSA information for statement D.44619_901 = attr_33->a_value;

Updating SSA information for statement D.45160_902 = switch_stristr ("fir", D.44619_901);



Registering new PHI nodes in block #375

Updating SSA information for statement D.45163_903 = v_engine_189->fir;

Updating SSA information for statement v_engine_189->fir = D.45164_904;



Registering new PHI nodes in block #376

Updating SSA information for statement D.44471_905 = smh_186->mparams;

Updating SSA information for statement D.44471_905->rtcp_video_interval_msec = "10000";



Registering new PHI nodes in block #377

Updating SSA information for statement D.44590_906 = attr_33->a_name;

Updating SSA information for statement D.45168_907 = strcasecmp (D.44590_906, "rtcp");



Registering new PHI nodes in block #378

Updating SSA information for statement D.44619_908 = attr_33->a_value;



Registering new PHI nodes in block #379



Registering new PHI nodes in block #380

Updating SSA information for statement __s1_910 = attr_33->a_value;

Updating SSA information for statement D.45174_911 = *__s1_910;

Updating SSA information for statement D.45177_914 = MEM[(const unsigned char *)D.45176_913];



Registering new PHI nodes in block #381

Updating SSA information for statement D.45185_921 = *D.45184_920;

Updating SSA information for statement D.45188_924 = MEM[(const unsigned char *)D.45187_923];



Registering new PHI nodes in block #382

Updating SSA information for statement D.45195_931 = *D.45194_930;

Updating SSA information for statement D.45198_934 = MEM[(const unsigned char *)D.45197_933];



Registering new PHI nodes in block #383

Updating SSA information for statement D.45205_941 = *D.45204_940;

Updating SSA information for statement D.45208_944 = MEM[(const unsigned char *)D.45207_943];



Registering new PHI nodes in block #384



Registering new PHI nodes in block #385

Updating SSA information for statement D.44619_949 = attr_33->a_value;

Updating SSA information for statement iftmp.98_950 = __builtin_strcmp (D.44619_949, "1");



Registering new PHI nodes in block #386



Registering new PHI nodes in block #387

Updating SSA information for statement D.44530_952 = session_161(D)->channel;

Updating SSA information for statement D.44619_953 = attr_33->a_value;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_953, 1);

Updating SSA information for statement D.44619_954 = attr_33->a_value;

Updating SSA information for statement D.47947_1499 = strtol (D.44619_954, 0B, 10);

Updating SSA information for statement D.47946 = D.47947_1499;

Updating SSA information for statement D.45212_955 = D.47946;

Updating SSA information for statement v_engine_189->remote_rtcp_port = D.45213_956;

Updating SSA information for statement D.44471_957 = smh_186->mparams;

Updating SSA information for statement D.45214_958 = D.44471_957->rtcp_video_interval_msec;



Registering new PHI nodes in block #388

Updating SSA information for statement D.44471_959 = smh_186->mparams;

Updating SSA information for statement D.44471_959->rtcp_video_interval_msec = "5000";



Registering new PHI nodes in block #389



Registering new PHI nodes in block #390

Updating SSA information for statement D.44590_960 = attr_33->a_name;

Updating SSA information for statement D.45219_961 = strcasecmp (D.44590_960, "crypto");



Registering new PHI nodes in block #391

Updating SSA information for statement D.44619_962 = attr_33->a_value;



Registering new PHI nodes in block #392

Updating SSA information for statement D.47950_1500 = *D.44619_962;



Registering new PHI nodes in block #393



Registering new PHI nodes in block #394

Updating SSA information for statement D.47949 = D.47951_1501;

Updating SSA information for statement D.45222_963 = D.47949;



Registering new PHI nodes in block #395

Updating SSA information for statement D.44471_964 = smh_186->mparams;

Updating SSA information for statement D.44821_965 = D.44471_964->ndlb;



Registering new PHI nodes in block #396

Updating SSA information for statement D.44530_967 = session_161(D)->channel;

Updating SSA information for statement D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);

Updating SSA information for statement D.45228_969 = switch_true (D.45227_968);



Registering new PHI nodes in block #397

Updating SSA information for statement D.44666_970 = m_28->m_proto;



Registering new PHI nodes in block #398

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");



Registering new PHI nodes in block #399

Updating SSA information for statement crypto_975 = attr_33->a_value;

Updating SSA information for statement D.47954_1502 = strtol (crypto_975, 0B, 10);

Updating SSA information for statement D.47953 = D.47954_1502;

Updating SSA information for statement crypto_tag_976 = D.47953;

Updating SSA information for statement got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_976, sdp_type_546(D));



Registering new PHI nodes in block #400

Updating SSA information for statement attr_978 = attr_33->a_next;



Registering new PHI nodes in block #402

Updating SSA information for statement rm_encoding_979 = map_136->rm_encoding;



Registering new PHI nodes in block #403



Registering new PHI nodes in block #404



Registering new PHI nodes in block #423



Registering new PHI nodes in block #405

Updating SSA information for statement imp_985 = *D.45237_984;

Updating SSA information for statement D.45238_986 = imp_985->codec_type;



Registering new PHI nodes in block #406



Registering new PHI nodes in block #407

Updating SSA information for statement D.44530_987 = session_161(D)->channel;

Updating SSA information for statement D.45241_988 = switch_channel_direction (D.44530_987);



Registering new PHI nodes in block #408

Updating SSA information for statement D.44530_989 = session_161(D)->channel;

Updating SSA information for statement D.45244_990 = switch_channel_test_flag (D.44530_989, 114);



Registering new PHI nodes in block #409



Registering new PHI nodes in block #410

Updating SSA information for statement D.45247_991 = map_136->rm_pt;

Updating SSA information for statement D.45249_993 = imp_985->iananame;

Updating SSA information for statement D.45250_994 = imp_985->ianacode;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);

Updating SSA information for statement D.45255_996 = map_136->rm_encoding;



Registering new PHI nodes in block #411

Updating SSA information for statement D.47957_1503 = *D.45255_996;



Registering new PHI nodes in block #412



Registering new PHI nodes in block #413

Updating SSA information for statement D.47956 = D.47958_1504;

Updating SSA information for statement D.45256_997 = D.47956;



Registering new PHI nodes in block #414

Updating SSA information for statement D.44471_998 = smh_186->mparams;

Updating SSA information for statement D.44821_999 = D.44471_998->ndlb;



Registering new PHI nodes in block #415

Updating SSA information for statement D.45247_1003 = map_136->rm_pt;



Registering new PHI nodes in block #416

Updating SSA information for statement D.45247_1005 = map_136->rm_pt;

Updating SSA information for statement D.45250_1007 = imp_985->ianacode;



Registering new PHI nodes in block #417

Updating SSA information for statement D.45249_1010 = imp_985->iananame;

Updating SSA information for statement D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);



Registering new PHI nodes in block #418



Registering new PHI nodes in block #419

Updating SSA information for statement D.45262_1013 = map_136->rm_rate;

Updating SSA information for statement D.45263_1014 = imp_985->samples_per_second;



Registering new PHI nodes in block #420

Updating SSA information for statement matches[m_idx_110].imp = imp_985;

Updating SSA information for statement matches[m_idx_110].map = map_136;

Updating SSA information for statement D.45249_1015 = imp_985->iananame;

Updating SSA information for statement D.45250_1016 = imp_985->ianacode;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);



Registering new PHI nodes in block #421



Registering new PHI nodes in block #422



Registering new PHI nodes in block #424

Updating SSA information for statement map_1021 = map_136->rm_next;



Registering new PHI nodes in block #426

Updating SSA information for statement D.45001_1022 = smh_186->crypto_mode;



Registering new PHI nodes in block #427

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");



Registering new PHI nodes in block #428



Registering new PHI nodes in block #429



Registering new PHI nodes in block #430

Updating SSA information for statement greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);



Registering new PHI nodes in block #431

Updating SSA information for statement v_engine_189->codec_negotiated = 1;



Registering new PHI nodes in block #436



Registering new PHI nodes in block #432

Updating SSA information for statement D.45274_1031 = matches[j_141].map;

Updating SSA information for statement D.45275_1032 = D.45274_1031->rm_encoding;

Updating SSA information for statement D.45274_1033 = matches[j_141].map;

Updating SSA information for statement D.45276_1034 = D.45274_1033->rm_fmtp;

Updating SSA information for statement D.45274_1035 = matches[j_141].map;

Updating SSA information for statement D.45277_1036 = D.45274_1035->rm_pt;

Updating SSA information for statement D.45279_1038 = matches[j_141].imp;

Updating SSA information for statement D.45280_1039 = D.45279_1038->samples_per_second;

Updating SSA information for statement D.45279_1040 = matches[j_141].imp;

Updating SSA information for statement D.45281_1041 = D.45279_1040->microseconds_per_packet;

Updating SSA information for statement pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);



Registering new PHI nodes in block #433

Updating SSA information for statement v_engine_189->cur_payload_map = pmap_1044;

Updating SSA information for statement D.45286_1045 = v_engine_189->cur_payload_map;

Updating SSA information for statement D.45286_1045->current = 1;

Updating SSA information for statement D.45287_1046 = v_engine_189->rtp_session;



Registering new PHI nodes in block #434

Updating SSA information for statement D.45287_1047 = v_engine_189->rtp_session;

Updating SSA information for statement D.45290_1048 = pmap_1044->pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.45287_1047, D.45290_1048);



Registering new PHI nodes in block #435

Updating SSA information for statement mimp_1049 = matches[j_141].imp;

Updating SSA information for statement map_1050 = matches[j_141].map;

Updating SSA information for statement D.45255_1051 = map_1050->rm_encoding;

Updating SSA information for statement D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);

Updating SSA information for statement pmap_1044->rm_encoding = D.45291_1052;

Updating SSA information for statement D.45247_1053 = map_1050->rm_pt;

Updating SSA information for statement pmap_1044->recv_pt = D.45292_1054;

Updating SSA information for statement D.45262_1055 = map_1050->rm_rate;

Updating SSA information for statement pmap_1044->rm_rate = D.45262_1055;

Updating SSA information for statement D.45293_1056 = mimp_1049->microseconds_per_packet;

Updating SSA information for statement pmap_1044->codec_ms = D.45295_1058;

Updating SSA information for statement D.45085_1059 = connection_125->c_address;

Updating SSA information for statement D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);

Updating SSA information for statement pmap_1044->remote_sdp_ip = D.45296_1060;

Updating SSA information for statement D.44697_1061 = m_28->m_port;

Updating SSA information for statement pmap_1044->remote_sdp_port = D.45087_1062;

Updating SSA information for statement D.45297_1063 = map_1050->rm_fmtp;

Updating SSA information for statement D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);

Updating SSA information for statement pmap_1044->rm_fmtp = D.45298_1064;

Updating SSA information for statement D.45247_1065 = map_1050->rm_pt;

Updating SSA information for statement pmap_1044->agreed_pt = D.45292_1066;



Registering new PHI nodes in block #437

Updating SSA information for statement D.45286_1068 = v_engine_189->cur_payload_map;

Updating SSA information for statement D.45299_1069 = D.45286_1068->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.45300_1070);

Updating SSA information for statement D.44530_1071 = session_161(D)->channel;

Updating SSA information for statement D.45286_1072 = v_engine_189->cur_payload_map;

Updating SSA information for statement D.45301_1073 = D.45286_1072->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);

Updating SSA information for statement D.44530_1074 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);

Updating SSA information for statement D.44530_1075 = session_161(D)->channel;

Updating SSA information for statement D.45286_1076 = v_engine_189->cur_payload_map;

Updating SSA information for statement D.45302_1077 = D.45286_1076->rm_fmtp;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);

Updating SSA information for statement D.45286_1078 = v_engine_189->cur_payload_map;

Updating SSA information for statement D.45303_1079 = D.45286_1078->agreed_pt;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.45304_1080);

Updating SSA information for statement D.44530_1081 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);

Updating SSA information for statement switch_core_media_check_video_codecs (session_161(D));

Updating SSA information for statement D.45286_1082 = v_engine_189->cur_payload_map;

Updating SSA information for statement D.45305_1083 = D.45286_1082->recv_pt;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.45306_1084);

Updating SSA information for statement D.44530_1085 = session_161(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);



Registering new PHI nodes in block #438



Registering new PHI nodes in block #439



Registering new PHI nodes in block #440

Updating SSA information for statement D.47965_1505 = D.45312_1090->flags;



Registering new PHI nodes in block #441

Updating SSA information for statement D.47963_1507 = D.45312_1090->mutex;



Registering new PHI nodes in block #442

Updating SSA information for statement D.47962_1508 = D.45312_1090->codec_interface;



Registering new PHI nodes in block #443

Updating SSA information for statement D.47961_1509 = D.45312_1090->implementation;



Registering new PHI nodes in block #444



Registering new PHI nodes in block #445

Updating SSA information for statement D.47960 = D.47967_1511;

Updating SSA information for statement D.45313_1091 = D.47960;



Registering new PHI nodes in block #446

Updating SSA information for statement v_engine_189->reset_codec = 1;



Registering new PHI nodes in block #447

Updating SSA information for statement D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);



Registering new PHI nodes in block #448

Updating SSA information for statement check_ice (smh_186, 1, sdp_198, m_28);



Registering new PHI nodes in block #449

Updating SSA information for statement m_1093 = m_28->m_next;



Registering new PHI nodes in block #451



Registering new PHI nodes in block #452

Updating SSA information for statement sdp_parser_free (parser_196);



Registering new PHI nodes in block #453

Updating SSA information for statement D.44471_1094 = smh_186->mparams;

Updating SSA information for statement D.44471_1094->cng_pt = cng_pt_27;



Registering new PHI nodes in block #454



Symbols to be put in SSA form

{ .MEM D.47876 D.47880 D.47883 D.47886 D.47890 D.47893 D.47896 D.47899 D.47903 D.47906 D.47914 D.47918 D.47922 D.47925 D.47929 D.47938 D.47942 D.47946 D.47949 D.47953 D.47956 D.47960 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 455
Number of blocks to update: 454 (100%)

Affected blocks


Scope blocks after cleanups:

{ Scope block #0 
  uint8_t match;
  switch_payload_t best_te;
  switch_payload_t te;
  switch_payload_t cng_pt;
  struct sdp_media_t * m;
  struct sdp_attribute_t * attr;
  int ptime;
  int dptime;
  int maxptime;
  int dmaxptime;
  int sendonly;
  int recvonly;
  int greedy;
  int x;
  int skip;
  struct switch_channel_t * channel;
  const char * val;
  const char * crypto;
  int got_crypto;
  int got_video_crypto;
  int got_audio;
  int got_avp;
  int got_video_avp;
  int got_video_savp;
  int got_savp;
  int got_udptl;
  int got_webrtc;
  int scrooge;
  struct sdp_parser_t * parser;
  struct sdp_session_t * sdp;
  int reneg;
  const struct switch_codec_implementation_t * * codec_array;
  int total_codecs;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  uint32_t near_rate;
  const struct switch_codec_implementation_t * mimp;
  const struct switch_codec_implementation_t * near_match;
  struct sdp_rtpmap_t * mmap;
  struct sdp_rtpmap_t * near_map;
  struct matches matches[30];
  struct matches near_matches[30];
  int codec_ms;
  uint32_t remote_codec_rate;
  uint32_t fmtp_remote_codec_rate;
  const char * tmp;
  int m_idx;
  int nm_idx;
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_negotiate_sdp";
  static const char __func__[32] = "switch_core_media_negotiate_sdp";
  void done = <<< error >>>; (unused)

  { Scope block #206 src/switch_core_media.c:3033 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #207 Originating from :#0 

    }

  }

  { Scope block #208 src/switch_core_media.c:3031 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #209 Originating from :#0 

    }

  }

  { Scope block #210 src/switch_core_media.c:3006 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #211 Originating from :#0 

    }

  }

  { Scope block #212 src/switch_core_media.c:2951 Originating from :  static void clear_pmaps (struct switch_rtp_engine_t *); 
    struct switch_rtp_engine_t * engine; (unused)

    { Scope block #213 Originating from :#0 
      struct payload_map_t * pmap;

    }

  }

  { Scope block #214 src/switch_core_media.c:2950 Originating from :  static void clear_pmaps (struct switch_rtp_engine_t *); 
    struct switch_rtp_engine_t * engine; (unused)

    { Scope block #215 Originating from :#0 
      struct payload_map_t * pmap;

    }

  }

  { Scope block #216 
    size_t __s1_len; (unused)
    size_t __s2_len;

    { Scope block #217 
      const unsigned char * __s1;
      register int __result;

    }

  }

  { Scope block #218 
    struct sdp_connection_t * connection;
    struct switch_core_session_t * other_session;

    { Scope block #219 
      struct switch_t38_options_t * t38_options;

      { Scope block #220 
        const char * var;
        int pass;

        { Scope block #221 
          struct switch_channel_t * other_channel;
          struct switch_core_session_message_t * msg;
          char * remote_host;
          switch_port_t remote_port;
          char tmp[32];

          { Scope block #222 
            size_t __s1_len; (unused)
            size_t __s2_len; (unused)

          }

          { Scope block #223 
            const char * err;

          }

        }

      }

    }

    { Scope block #224 
      struct sdp_rtpmap_t * map;

      { Scope block #225 src/switch_core_media.c:3256 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #226 Originating from :#0 

        }

      }

      { Scope block #227 src/switch_core_media.c:3255 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #228 Originating from :#0 

        }

      }

      { Scope block #229 src/switch_core_media.c:3253 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #230 Originating from :#0 

        }

      }

      { Scope block #231 src/switch_core_media.c:3248 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #232 Originating from :#0 

        }

      }

      { Scope block #233 src/switch_core_media.c:3238 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #234 Originating from :#0 

        }

      }

      { Scope block #235 
        int crypto_tag;

        { Scope block #236 src/switch_core_media.c:3269 Originating from :  extern int atoi (const char *); 
          const char * __nptr; (unused)

          { Scope block #237 Originating from :#0 

          }

        }

      }

      { Scope block #238 
        int32_t i;
        const char * rm_encoding;
        uint32_t map_bit_rate;
        struct switch_codec_fmtp_t codec_fmtp;

        { Scope block #239 src/switch_core_media.c:3352 Originating from :  static int _zstr (const char *); 
          const char * s; (unused)

          { Scope block #240 Originating from :#0 

          }

        }

        { Scope block #241 src/switch_core_media.c:3342 Originating from :  static uint32_t switch_known_bitrate (switch_payload_t); 
          switch_payload_t payload; (unused)

        }

        { Scope block #243 
          const struct switch_codec_implementation_t * imp;
          uint32_t bit_rate;
          uint32_t codec_rate;

          { Scope block #244 src/switch_core_media.c:3386 Originating from :  static int _zstr (const char *); 
            const char * s; (unused)

            { Scope block #245 Originating from :#0 

            }

          }

        }

      }

      { Scope block #246 
        int j;

        { Scope block #247 
          const struct switch_codec_implementation_t * search[1];
          char * prefs[1];
          char tmp[80];
          int num;
          const struct switch_codec_implementation_t * timp;

        }

      }

      { Scope block #248 
        int j;

        { Scope block #249 
          struct payload_map_t * pmap;

          { Scope block #250 src/switch_core_media.c:3554 Originating from :  static int _zstr (const char *); 
            const char * s; (unused)

            { Scope block #251 Originating from :#0 

            }

          }

          { Scope block #252 src/switch_core_media.c:3545 Originating from :  extern int atoi (const char *); 
            const char * __nptr; (unused)

            { Scope block #253 Originating from :#0 

            }

          }

        }

      }

      { Scope block #254 
        char tmp[50];

        { Scope block #255 src/switch_core_media.c:3595 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
          struct switch_codec_t * codec; (unused)

          { Scope block #256 Originating from :#0 

          }

        }

      }

    }

    { Scope block #257 
      struct sdp_rtpmap_t * map;
      const char * rm_encoding;
      const struct switch_codec_implementation_t * mimp;
      int vmatch;
      int i;

      { Scope block #258 src/switch_core_media.c:3705 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #259 Originating from :#0 

        }

      }

      { Scope block #260 src/switch_core_media.c:3701 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #261 Originating from :#0 

        }

      }

      { Scope block #262 src/switch_core_media.c:3688 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #263 Originating from :#0 

        }

      }

      { Scope block #264 src/switch_core_media.c:3678 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #265 Originating from :#0 

        }

      }

      { Scope block #266 
        size_t __s1_len; (unused)
        size_t __s2_len;

        { Scope block #267 
          const unsigned char * __s1;
          register int __result;

        }

      }

      { Scope block #268 
        int crypto_tag;

        { Scope block #269 src/switch_core_media.c:3718 Originating from :  extern int atoi (const char *); 
          const char * __nptr; (unused)

          { Scope block #270 Originating from :#0 

          }

        }

      }

      { Scope block #271 
        const struct switch_codec_implementation_t * imp;

        { Scope block #272 src/switch_core_media.c:3745 Originating from :  static int _zstr (const char *); 
          const char * s; (unused)

          { Scope block #273 Originating from :#0 

          }

        }

      }

      { Scope block #274 
        char tmp[50];
        int j;

        { Scope block #275 src/switch_core_media.c:3838 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
          struct switch_codec_t * codec; (unused)

          { Scope block #276 Originating from :#0 

          }

        }

        { Scope block #277 
          struct payload_map_t * pmap;

        }

      }

    }

  }

}
switch_core_media_negotiate_sdp (struct switch_core_session_t * session, const char * r_sdp, uint8_t * proceed, switch_sdp_type_t sdp_type)
{
  switch_bool_t D.47967;
  int iftmp.104;
  uint32_t D.47965;
  uint32_t D.47964;
  struct switch_mutex_t * D.47963;
  struct switch_codec_interface_t * D.47962;
  const struct switch_codec_implementation_t * D.47961;
  switch_bool_t D.47960;
  int D.47958;
  const char D.47957;
  int D.47956;
  int D.47954;
  int D.47953;
  int D.47951;
  const char D.47950;
  int D.47949;
  int D.47947;
  int D.47946;
  int D.47944;
  const char D.47943;
  int D.47942;
  int D.47940;
  const char D.47939;
  int D.47938;
  switch_bool_t D.47936;
  int iftmp.104;
  uint32_t D.47934;
  uint32_t D.47933;
  struct switch_mutex_t * D.47932;
  struct switch_codec_interface_t * D.47931;
  const struct switch_codec_implementation_t * D.47930;
  switch_bool_t D.47929;
  int D.47927;
  const char D.47926;
  int D.47925;
  int D.47923;
  int D.47922;
  int D.47920;
  const char D.47919;
  int D.47918;
  int D.47916;
  const char D.47915;
  int D.47914;
  uint32_t D.47908;
  unsigned char csui.173;
  uint32_t D.47906;
  int D.47904;
  int D.47903;
  int D.47901;
  const char D.47900;
  int D.47899;
  int D.47897;
  int D.47896;
  int D.47894;
  int D.47893;
  int D.47891;
  int D.47890;
  int D.47888;
  const char D.47887;
  int D.47886;
  int D.47884;
  int D.47883;
  int D.47881;
  int D.47880;
  int D.47878;
  const char D.47877;
  int D.47876;
  uint8_t D.47874;
  struct payload_map_t * pmap;
  uint8_t D.47871;
  struct payload_map_t * pmap;
  struct payload_map_t * pmap;
  int j;
  char tmp[50];
  const struct switch_codec_implementation_t * imp;
  int crypto_tag;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  int i;
  int vmatch;
  const struct switch_codec_implementation_t * mimp;
  const char * rm_encoding;
  struct sdp_rtpmap_t * map;
  char tmp[50];
  struct payload_map_t * pmap;
  int j;
  const struct switch_codec_implementation_t * timp;
  int num;
  char tmp[80];
  char * prefs[1];
  const struct switch_codec_implementation_t * search[1];
  int j;
  uint32_t codec_rate;
  uint32_t bit_rate;
  const struct switch_codec_implementation_t * imp;
  struct switch_codec_fmtp_t codec_fmtp;
  uint32_t map_bit_rate;
  const char * rm_encoding;
  int32_t i;
  int crypto_tag;
  struct sdp_rtpmap_t * map;
  const char * err;
  char tmp[32];
  switch_port_t remote_port;
  char * remote_host;
  struct switch_core_session_message_t * msg;
  struct switch_channel_t * other_channel;
  int pass;
  const char * var;
  struct switch_t38_options_t * t38_options;
  struct switch_core_session_t * other_session;
  struct sdp_connection_t * connection;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  static const char __func__[32] = "switch_core_media_negotiate_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_negotiate_sdp";
  int nm_idx;
  int m_idx;
  const char * tmp;
  uint32_t fmtp_remote_codec_rate;
  uint32_t remote_codec_rate;
  int codec_ms;
  struct matches near_matches[30];
  struct matches matches[30];
  struct sdp_rtpmap_t * near_map;
  struct sdp_rtpmap_t * mmap;
  const struct switch_codec_implementation_t * near_match;
  const struct switch_codec_implementation_t * mimp;
  uint32_t near_rate;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  int total_codecs;
  const struct switch_codec_implementation_t * * codec_array;
  int reneg;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  int scrooge;
  int got_webrtc;
  int got_udptl;
  int got_savp;
  int got_video_savp;
  int got_video_avp;
  int got_avp;
  int got_audio;
  int got_video_crypto;
  int got_crypto;
  const char * crypto;
  const char * val;
  struct switch_channel_t * channel;
  int skip;
  int x;
  int greedy;
  int recvonly;
  int sendonly;
  int dmaxptime;
  int maxptime;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  switch_payload_t cng_pt;
  switch_payload_t te;
  switch_payload_t best_te;
  uint8_t match;
  switch_status_t D.45316;
  switch_bool_t D.45313;
  struct switch_codec_t * D.45312;
  _Bool D.45309;
  _Bool D.45308;
  _Bool D.45307;
  int D.45306;
  switch_payload_t D.45305;
  int D.45304;
  switch_payload_t D.45303;
  char * D.45302;
  char * D.45301;
  int D.45300;
  switch_port_t D.45299;
  char * D.45298;
  const char * D.45297;
  char * D.45296;
  uint32_t D.45295;
  int D.45294;
  const int D.45293;
  unsigned char D.45292;
  char * D.45291;
  switch_payload_t D.45290;
  struct switch_rtp_t * D.45287;
  struct payload_map_t * D.45286;
  uint32_t D.45283;
  int D.45282;
  const int D.45281;
  const uint32_t D.45280;
  const struct switch_codec_implementation_t * D.45279;
  uint32_t D.45278;
  <unnamed-unsigned:7> D.45277;
  const char * D.45276;
  const char * D.45275;
  struct sdp_rtpmap_t * D.45274;
  _Bool D.45267;
  _Bool D.45266;
  const uint32_t D.45263;
  long unsigned int D.45262;
  int D.45259;
  int D.45256;
  const char * D.45255;
  int D.45251;
  const switch_payload_t D.45250;
  char * const D.45249;
  int D.45248;
  <unnamed-unsigned:7> D.45247;
  uint32_t D.45244;
  switch_call_direction_t D.45241;
  const switch_codec_type_t D.45238;
  const struct switch_codec_implementation_t * * D.45237;
  unsigned int D.45236;
  unsigned int i.99;
  int D.45228;
  const char * D.45227;
  int D.45222;
  int D.45219;
  char * D.45214;
  short unsigned int D.45213;
  int D.45212;
  int D.45209;
  const unsigned char D.45208;
  char * D.45207;
  int D.45206;
  const unsigned char D.45205;
  const unsigned char * D.45204;
  _Bool D.45201;
  _Bool D.45200;
  int D.45199;
  const unsigned char D.45198;
  char * D.45197;
  int D.45196;
  const unsigned char D.45195;
  const unsigned char * D.45194;
  _Bool D.45191;
  _Bool D.45190;
  int D.45189;
  const unsigned char D.45188;
  char * D.45187;
  int D.45186;
  const unsigned char D.45185;
  const unsigned char * D.45184;
  _Bool D.45181;
  _Bool D.45180;
  _Bool D.45179;
  int D.45178;
  const unsigned char D.45177;
  char[2] * D.45176;
  int D.45175;
  const unsigned char D.45174;
  int D.39088;
  int iftmp.98;
  int D.39089;
  int D.45168;
  uint8_t D.45164;
  uint8_t D.45163;
  const char * D.45160;
  int D.45157;
  int D.45154;
  int D.45151;
  int D.45146;
  int D.45143;
  int D.45140;
  int D.45137;
  int D.45125;
  const char * D.45124;
  int D.45120;
  switch_call_direction_t D.45114;
  int D.45111;
  switch_payload_t D.45110;
  uint32_t D.45109;
  int32_t D.45107;
  switch_status_t D.45099;
  uint32_t D.45098;
  switch_bool_t D.45095;
  struct switch_codec_t * D.45094;
  int D.45093;
  switch_payload_t D.45092;
  int D.45089;
  char * D.45088;
  short unsigned int D.45087;
  char * D.45086;
  const char * D.45085;
  const char * D.45082;
  int D.45080;
  const char * D.45079;
  int D.45073;
  int D.45070;
  const char * D.45066;
  int iftmp.97;
  uint32_t D.45064;
  const int D.45063;
  uint32_t D.45062;
  int D.45061;
  const int D.45060;
  const uint32_t D.45059;
  int D.45056;
  const uint32_t D.45055;
  unsigned char D.45054;
  <unnamed-unsigned:7> D.45053;
  char * D.45052;
  char * const D.45051;
  char * D.45050;
  const char * D.45049;
  switch_payload_t D.45048;
  uint32_t D.45043;
  int D.45042;
  const int D.45041;
  const uint32_t D.45040;
  const struct switch_codec_implementation_t * D.45039;
  uint32_t D.45038;
  <unnamed-unsigned:7> D.45037;
  const char * D.45036;
  const char * D.45035;
  struct sdp_rtpmap_t * D.45034;
  int near_rate.96;
  int D.45028;
  const uint32_t D.45027;
  char * const D.45026;
  int D.45025;
  const int D.45024;
  const unsigned int iftmp.95;
  char * const D.45013;
  int D.45012;
  _Bool D.45009;
  _Bool D.45008;
  _Bool D.45007;
  _Bool D.45004;
  _Bool D.45003;
  _Bool D.45002;
  switch_rtp_crypto_mode_t D.45001;
  _Bool D.44999;
  _Bool D.44998;
  _Bool D.44997;
  int D.44996;
  int codec_rate.94;
  int D.44993;
  _Bool D.44991;
  _Bool D.44990;
  _Bool D.44989;
  const uint32_t D.44984;
  int D.44979;
  int D.44977;
  _Bool D.44974;
  _Bool D.44973;
  _Bool D.44972;
  _Bool D.44969;
  _Bool D.44968;
  int D.44963;
  int D.44960;
  _Bool D.44957;
  _Bool D.44956;
  _Bool D.44955;
  _Bool D.44952;
  _Bool D.44951;
  _Bool D.44950;
  const uint32_t D.44947;
  int D.44944;
  int iftmp.93;
  _Bool D.44938;
  int D.44937;
  int D.44936;
  int D.44934;
  int D.44930;
  const int D.44929;
  int D.44928;
  const switch_payload_t D.44927;
  char * const D.44926;
  int remote_codec_rate.92;
  int D.44924;
  const switch_codec_type_t D.44921;
  const int D.44920;
  const struct switch_codec_implementation_t * * D.44919;
  unsigned int D.44918;
  unsigned int i.91;
  uint32_t D.44914;
  int D.44911;
  int D.44908;
  switch_status_t D.44905;
  int D.44901;
  int D.44897;
  int D.44894;
  const char * D.44893;
  int D.44890;
  const char * D.44889;
  unsigned char D.44886;
  uint32_t D.44885;
  uint32_t D.44884;
  _Bool D.44879;
  _Bool D.44878;
  _Bool D.44877;
  _Bool D.44870;
  switch_payload_t D.44869;
  int D.44868;
  int D.44863;
  int32_t D.44858;
  int D.44857;
  <unnamed-unsigned:7> D.44856;
  long unsigned int D.44855;
  long unsigned int D.44854;
  int D.44848;
  int D.44839;
  _Bool D.44836;
  _Bool D.44835;
  _Bool D.44834;
  _Bool D.44831;
  _Bool D.44830;
  _Bool D.44829;
  int D.44826;
  const char * D.44825;
  unsigned int D.44822;
  switch_core_media_NDLB_t D.44821;
  int D.44818;
  int D.44815;
  int D.44810;
  int D.44805;
  char * D.44800;
  short unsigned int D.44799;
  int D.44798;
  int D.44795;
  int D.44790;
  int D.44787;
  int D.44784;
  int D.44781;
  _Bool D.44779;
  _Bool D.44778;
  _Bool D.44777;
  char * D.44773;
  struct switch_channel_t * D.44772;
  const char * err.90;
  switch_status_t D.44768;
  int D.44767;
  int D.44766;
  char * D.44765;
  char * D.44764;
  switch_port_t D.44762;
  char * D.44760;
  int D.39032;
  _Bool D.44758;
  _Bool D.44757;
  _Bool D.44756;
  uint16_t D.44753;
  char * D.44752;
  const char * D.44751;
  struct payload_map_t * D.44750;
  int D.44747;
  const char * D.44746;
  int D.44743;
  const char * D.44742;
  char * D.44741;
  char * D.44740;
  uint32_t D.44737;
  struct switch_core_session_t * other_session.89;
  switch_status_t D.44733;
  uint8_t D.44730;
  uint32_t D.44728;
  uint32_t D.44726;
  uint32_t D.44724;
  uint32_t D.44723;
  int D.44716;
  int D.44707;
  uint32_t D.44706;
  int D.44703;
  const char * D.44702;
  int D.44699;
  long unsigned int D.44697;
  sdp_media_e D.44681;
  _Bool D.44678;
  _Bool D.44677;
  _Bool D.44676;
  sdp_proto_e D.44675;
  int D.44672;
  const char * D.44669;
  sdp_proto_e D.44666;
  const char * D.44665;
  const char * D.44663;
  const char * D.44661;
  int D.44655;
  struct switch_media_bug_t * D.44649;
  int D.44640;
  int D.44639;
  int D.44636;
  int D.44635;
  int32_t D.44631;
  _Bool D.44626;
  _Bool D.44625;
  _Bool D.44624;
  int D.44621;
  const char * D.44619;
  int D.44616;
  int D.44614;
  uint8_t D.44606;
  struct switch_rtp_t * D.44605;
  int D.44602;
  int D.44598;
  int D.44594;
  int D.44591;
  const char * D.44590;
  int D.44588;
  const unsigned char D.44587;
  char * D.44586;
  int D.44585;
  const unsigned char D.44584;
  const unsigned char * D.44583;
  _Bool D.44580;
  _Bool D.44579;
  int D.44578;
  const unsigned char D.44577;
  char * D.44576;
  int D.44575;
  const unsigned char D.44574;
  const unsigned char * D.44573;
  _Bool D.44570;
  _Bool D.44569;
  int D.44568;
  const unsigned char D.44567;
  char * D.44566;
  int D.44565;
  const unsigned char D.44564;
  const unsigned char * D.44563;
  _Bool D.44560;
  _Bool D.44559;
  _Bool D.44558;
  int D.44557;
  const unsigned char D.44556;
  char[8] * D.44555;
  int D.44554;
  const unsigned char D.44553;
  int D.39007;
  int iftmp.88;
  int D.39008;
  const char * D.44548;
  struct sdp_connection_t * D.44546;
  _Bool D.44544;
  _Bool D.44543;
  _Bool D.44542;
  unsigned char D.44541;
  unsigned char D.44540;
  int D.44533;
  struct switch_channel_t * D.44530;
  unsigned int D.44529;
  char * D.44526;
  unsigned int D.44523;
  unsigned int D.44522;
  switch_rtp_bug_flag_t D.44521;
  char * D.44518;
  _Bool D.44515;
  int D.44514;
  int D.44513;
  switch_rtp_bug_flag_t D.44512;
  char * D.44509;
  char * D.44508;
  const char * D.44507;
  struct sdp_origin_t * D.44506;
  int D.44502;
  int D.44498;
  int D.44494;
  int32_t D.44491;
  int32_t D.44490;
  int D.44485;
  struct switch_channel_t * D.44482;
  struct switch_core_session_t * D.44481;
  int D.44478;
  int D.44473;
  size_t D.44472;
  struct switch_core_media_params_t * D.44471;
  uint8_t D.44470;

<bb 2>:
  match_148 = 0;
  # DEBUG match => match_148
  best_te_149 = 0;
  # DEBUG best_te => best_te_149
  te_150 = 0;
  # DEBUG te => te_150
  cng_pt_151 = 0;
  # DEBUG cng_pt => cng_pt_151
  ptime_152 = 0;
  # DEBUG ptime => ptime_152
  dptime_153 = 0;
  # DEBUG dptime => dptime_153
  maxptime_154 = 0;
  # DEBUG maxptime => maxptime_154
  dmaxptime_155 = 0;
  # DEBUG dmaxptime => dmaxptime_155
  sendonly_156 = 0;
  # DEBUG sendonly => sendonly_156
  recvonly_157 = 0;
  # DEBUG recvonly => recvonly_157
  greedy_158 = 0;
  # DEBUG greedy => greedy_158
  x_159 = 0;
  # DEBUG x => x_159
  skip_160 = 0;
  # DEBUG skip => skip_160
  channel_162 = switch_core_session_get_channel (session_161(D));
  # DEBUG channel => channel_162
  crypto_163 = 0B;
  # DEBUG crypto => crypto_163
  got_crypto_164 = 0;
  # DEBUG got_crypto => got_crypto_164
  got_video_crypto_165 = 0;
  # DEBUG got_video_crypto => got_video_crypto_165
  got_audio_166 = 0;
  # DEBUG got_audio => got_audio_166
  got_avp_167 = 0;
  # DEBUG got_avp => got_avp_167
  got_video_avp_168 = 0;
  # DEBUG got_video_avp => got_video_avp_168
  got_video_savp_169 = 0;
  # DEBUG got_video_savp => got_video_savp_169
  got_savp_170 = 0;
  # DEBUG got_savp => got_savp_170
  got_udptl_171 = 0;
  # DEBUG got_udptl => got_udptl_171
  got_webrtc_172 = 0;
  # DEBUG got_webrtc => got_webrtc_172
  scrooge_173 = 0;
  # DEBUG scrooge => scrooge_173
  parser_174 = 0B;
  # DEBUG parser => parser_174
  reneg_175 = 1;
  # DEBUG reneg => reneg_175
  near_rate_176 = 0;
  # DEBUG near_rate => near_rate_176
  mimp_177 = 0B;
  # DEBUG mimp => mimp_177
  near_match_178 = 0B;
  # DEBUG near_match => near_match_178
  mmap_179 = 0B;
  # DEBUG mmap => mmap_179
  near_map_180 = 0B;
  # DEBUG near_map => near_map_180
  matches = {};
  near_matches = {};
  codec_ms_181 = 0;
  # DEBUG codec_ms => codec_ms_181
  remote_codec_rate_182 = 0;
  # DEBUG remote_codec_rate => remote_codec_rate_182
  fmtp_remote_codec_rate_183 = 0;
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_183
  m_idx_184 = 0;
  # DEBUG m_idx => m_idx_184
  nm_idx_185 = 0;
  # DEBUG nm_idx => nm_idx_185
  if (session_161(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_186 = session_161(D)->media_handle;
  # DEBUG smh => smh_186
  if (smh_186 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.44470_187 = 0;
  goto <bb 454>;

<bb 6>:
  a_engine_188 = &smh_186->engines;
  # DEBUG a_engine => a_engine_188
  v_engine_189 = &smh_186->engines[1];
  # DEBUG v_engine => v_engine_189
  codec_array_190 = &smh_186->codecs;
  # DEBUG codec_array => codec_array_190
  D.44471_191 = smh_186->mparams;
  total_codecs_192 = D.44471_191->num_codecs;
  # DEBUG total_codecs => total_codecs_192
  D.44472_194 = strlen (r_sdp_193(D));
  D.44473_195 = (int) D.44472_194;
  parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
  # DEBUG parser => parser_196
  if (parser_196 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.44470_197 = 0;
  goto <bb 454>;

<bb 8>:
  sdp_198 = sdp_session (parser_196);
  # DEBUG sdp => sdp_198
  if (sdp_198 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  sdp_parser_free (parser_196);
  D.44470_199 = 0;
  goto <bb 454>;

<bb 10>:
  D.44478_200 = dtls_ok (session_161(D));
  if (D.44478_200 != 0)
    goto <bb 11>;
  else
    goto <bb 14>;

<bb 11>:
  D.44481_201 = smh_186->session;
  D.44482_202 = D.44481_201->channel;
  tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
  # DEBUG tmp => tmp_203
  if (tmp_203 != 0B)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 12>:
  D.44485_204 = switch_false (tmp_203);
  if (D.44485_204 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.44481_205 = smh_186->session;
  D.44482_206 = D.44481_205->channel;
  switch_channel_clear_flag (D.44482_206, 111);
  D.44481_207 = smh_186->session;
  D.44482_208 = D.44481_207->channel;
  switch_channel_clear_flag (D.44482_208, 109);

<bb 14>:
  switch_core_session_parse_crypto_prefs (session_161(D));
  # DEBUG engine => a_engine_188
  pmap_1457 = a_engine_188->payload_map;
  # DEBUG pmap => pmap_1457
  goto <bb 16>;

<bb 15>:
  pmap_1458->negotiated = 0;
  pmap_1458->current = 0;
  pmap_1459 = pmap_1458->next;
  # DEBUG pmap => pmap_1459

<bb 16>:
  # pmap_1458 = PHI <pmap_1457(14), pmap_1459(15)>
  # DEBUG pmap => pmap_1458
  if (pmap_1458 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.47871_1460 = pmap_1458->allocated;
  if (D.47871_1460 != 0)
    goto <bb 15>;
  else
    goto <bb 18>;

<bb 18>:
  # DEBUG engine => v_engine_189
  pmap_1461 = v_engine_189->payload_map;
  # DEBUG pmap => pmap_1461
  goto <bb 20>;

<bb 19>:
  pmap_1462->negotiated = 0;
  pmap_1462->current = 0;
  pmap_1463 = pmap_1462->next;
  # DEBUG pmap => pmap_1463

<bb 20>:
  # pmap_1462 = PHI <pmap_1461(18), pmap_1463(19)>
  # DEBUG pmap => pmap_1462
  if (pmap_1462 != 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.47874_1464 = pmap_1462->allocated;
  if (D.47874_1464 != 0)
    goto <bb 19>;
  else
    goto <bb 22>;

<bb 22>:
  if (proceed_209(D) != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  *proceed_209(D) = 1;

<bb 24>:
  D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
  greedy_211 = D.44490_210 != 0;
  # DEBUG greedy => greedy_211
  D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
  scrooge_213 = D.44491_212 != 0;
  # DEBUG scrooge => scrooge_213
  val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
  # DEBUG val => val_214
  if (val_214 != 0B)
    goto <bb 25>;
  else
    goto <bb 32>;

<bb 25>:
  D.44494_215 = strcasecmp (val_214, "generous");
  if (D.44494_215 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  greedy_216 = 0;
  # DEBUG greedy => greedy_216
  scrooge_217 = 0;
  # DEBUG scrooge => scrooge_217
  goto <bb 32>;

<bb 27>:
  D.44498_218 = strcasecmp (val_214, "greedy");
  if (D.44498_218 == 0)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  greedy_219 = 1;
  # DEBUG greedy => greedy_219
  scrooge_220 = 0;
  # DEBUG scrooge => scrooge_220
  goto <bb 32>;

<bb 29>:
  D.44502_221 = strcasecmp (val_214, "scrooge");
  if (D.44502_221 == 0)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  scrooge_222 = 1;
  # DEBUG scrooge => scrooge_222
  greedy_223 = 1;
  # DEBUG greedy => greedy_223
  goto <bb 32>;

<bb 31>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);

<bb 32>:
  # greedy_47 = PHI <greedy_211(24), greedy_216(26), greedy_219(28), greedy_223(30), greedy_211(31)>
  # scrooge_80 = PHI <scrooge_213(24), scrooge_217(26), scrooge_220(28), scrooge_222(30), scrooge_213(31)>
  # DEBUG scrooge => scrooge_80
  # DEBUG greedy => greedy_47
  D.44506_224 = sdp_198->sdp_origin;
  D.44507_225 = D.44506_224->o_username;
  D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
  smh_186->origin = D.44508_226;
  D.44509_227 = smh_186->origin;
  if (D.44509_227 != 0B)
    goto <bb 33>;
  else
    goto <bb 39>;

<bb 33>:
  D.44471_228 = smh_186->mparams;
  D.44512_229 = D.44471_228->auto_rtp_bugs;
  D.44513_230 = (int) D.44512_229;
  D.44514_231 = D.44513_230 & 1;
  D.44515_232 = (_Bool) D.44514_231;
  if (D.44515_232 != 0)
    goto <bb 34>;
  else
    goto <bb 36>;

<bb 34>:
  D.44509_233 = smh_186->origin;
  D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");
  if (D.44518_234 != 0B)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  D.44521_235 = a_engine_188->rtp_bugs;
  D.44522_236 = D.44521_235 | 1;
  a_engine_188->rtp_bugs = D.44522_236;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");

<bb 36>:
  D.44471_237 = smh_186->mparams;
  D.44512_238 = D.44471_237->auto_rtp_bugs;
  D.44523_239 = D.44512_238 & 2;
  if (D.44523_239 != 0)
    goto <bb 37>;
  else
    goto <bb 39>;

<bb 37>:
  D.44509_240 = smh_186->origin;
  D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
  if (D.44526_241 != 0B)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  D.44521_242 = a_engine_188->rtp_bugs;
  D.44529_243 = D.44521_242 | 2;
  a_engine_188->rtp_bugs = D.44529_243;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");

<bb 39>:
  D.44530_244 = session_161(D)->channel;
  val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
  # DEBUG val => val_245
  if (val_245 != 0B)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 40>:
  D.44533_246 = switch_true (val_245);
  if (D.44533_246 != 0)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.44530_247 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_247, 93, 1);

<bb 42>:
  m_248 = sdp_198->sdp_media;
  # DEBUG m => m_248
  if (m_248 != 0B)
    goto <bb 43>;
  else
    goto <bb 55>;

<bb 43>:
  D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
  D.44541_250 = D.44540_249 & 6;
  D.44542_251 = D.44541_250 == 2;
  D.44543_252 = D.44541_250 == 0;
  D.44544_253 = D.44542_251 || D.44543_252;
  if (D.44544_253 != 0)
    goto <bb 54>;
  else
    goto <bb 44>;

<bb 44>:
  D.44546_254 = m_248->m_connections;
  if (D.44546_254 != 0B)
    goto <bb 45>;
  else
    goto <bb 55>;

<bb 45>:
  D.44546_255 = m_248->m_connections;
  D.44548_256 = D.44546_255->c_address;
  if (D.44548_256 != 0B)
    goto <bb 46>;
  else
    goto <bb 55>;

<bb 46>:
  __s2_len_257 = 7;
  # DEBUG __s2_len => __s2_len_257
  if (__s2_len_257 <= 3)
    goto <bb 47>;
  else
    goto <bb 52>;

<bb 47>:
  D.44546_258 = m_248->m_connections;
  __s1_259 = D.44546_258->c_address;
  # DEBUG __s1 => __s1_259
  D.44553_260 = *__s1_259;
  D.44554_261 = (int) D.44553_260;
  D.44555_262 = "0.0.0.0";
  D.44556_263 = MEM[(const unsigned char *)D.44555_262];
  D.44557_264 = (int) D.44556_263;
  __result_265 = D.44554_261 - D.44557_264;
  # DEBUG __result => __result_265
  D.44558_266 = __s2_len_257 != 0;
  D.44559_267 = __result_265 == 0;
  D.44560_268 = D.44558_266 && D.44559_267;
  if (D.44560_268 != 0)
    goto <bb 48>;
  else
    goto <bb 51>;

<bb 48>:
  D.44563_269 = __s1_259 + 1;
  D.44564_270 = *D.44563_269;
  D.44565_271 = (int) D.44564_270;
  D.44566_272 = &"0.0.0.0"[1];
  D.44567_273 = MEM[(const unsigned char *)D.44566_272];
  D.44568_274 = (int) D.44567_273;
  __result_275 = D.44565_271 - D.44568_274;
  # DEBUG __result => __result_275
  D.44569_276 = __s2_len_257 > 1;
  D.44559_277 = __result_275 == 0;
  D.44570_278 = D.44569_276 && D.44559_277;
  if (D.44570_278 != 0)
    goto <bb 49>;
  else
    goto <bb 51>;

<bb 49>:
  D.44573_279 = __s1_259 + 2;
  D.44574_280 = *D.44573_279;
  D.44575_281 = (int) D.44574_280;
  D.44576_282 = &"0.0.0.0"[2];
  D.44577_283 = MEM[(const unsigned char *)D.44576_282];
  D.44578_284 = (int) D.44577_283;
  __result_285 = D.44575_281 - D.44578_284;
  # DEBUG __result => __result_285
  D.44579_286 = __s2_len_257 > 2;
  D.44559_287 = __result_285 == 0;
  D.44580_288 = D.44579_286 && D.44559_287;
  if (D.44580_288 != 0)
    goto <bb 50>;
  else
    goto <bb 51>;

<bb 50>:
  D.44583_289 = __s1_259 + 3;
  D.44584_290 = *D.44583_289;
  D.44585_291 = (int) D.44584_290;
  D.44586_292 = &"0.0.0.0"[3];
  D.44587_293 = MEM[(const unsigned char *)D.44586_292];
  D.44588_294 = (int) D.44587_293;
  __result_295 = D.44585_291 - D.44588_294;
  # DEBUG __result => __result_295

<bb 51>:
  # __result_123 = PHI <__result_265(47), __result_275(48), __result_285(49), __result_295(50)>
  # DEBUG __result => __result_123
  D.39007_296 = __result_123;
  iftmp.88_297 = D.39007_296;
  goto <bb 53>;

<bb 52>:
  D.44546_298 = m_248->m_connections;
  D.44548_299 = D.44546_298->c_address;
  iftmp.88_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");

<bb 53>:
  # iftmp.88_143 = PHI <iftmp.88_297(51), iftmp.88_300(52)>
  D.39008_301 = iftmp.88_143;
  if (D.39008_301 == 0)
    goto <bb 54>;
  else
    goto <bb 55>;

<bb 54>:
  sendonly_302 = 2;
  # DEBUG sendonly => sendonly_302

<bb 55>:
  # sendonly_42 = PHI <sendonly_156(42), sendonly_156(44), sendonly_156(45), sendonly_156(53), sendonly_302(54)>
  # DEBUG sendonly => sendonly_42
  attr_303 = sdp_198->sdp_attributes;
  # DEBUG attr => attr_303
  goto <bb 77>;

<bb 56>:
  D.44590_304 = attr_29->a_name;
  # DEBUG s => D.44590_304
  if (D.44590_304 == 0B)
    goto <bb 59>;
  else
    goto <bb 57>;

<bb 57>:
  D.47877_1465 = *D.44590_304;
  if (D.47877_1465 == 0)
    goto <bb 59>;
  else
    goto <bb 58>;

<bb 58>:

<bb 59>:
  # D.47878_1466 = PHI <1(56), 1(57), 0(58)>
  D.47876_1519 = D.47878_1466;
  D.44591_305 = D.47876_1519;
  if (D.44591_305 != 0)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  // predicted unlikely by continue predictor.
  goto <bb 76>;

<bb 61>:
  D.44590_306 = attr_29->a_name;
  D.44594_307 = strcasecmp (D.44590_306, "sendonly");
  if (D.44594_307 == 0)
    goto <bb 62>;
  else
    goto <bb 63>;

<bb 62>:
  sendonly_308 = 1;
  # DEBUG sendonly => sendonly_308
  D.44530_309 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
  goto <bb 76>;

<bb 63>:
  D.44590_310 = attr_29->a_name;
  D.44598_311 = strcasecmp (D.44590_310, "inactive");
  if (D.44598_311 == 0)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  sendonly_312 = 1;
  # DEBUG sendonly => sendonly_312
  D.44530_313 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
  goto <bb 76>;

<bb 65>:
  D.44590_314 = attr_29->a_name;
  D.44602_315 = strcasecmp (D.44590_314, "recvonly");
  if (D.44602_315 == 0)
    goto <bb 66>;
  else
    goto <bb 69>;

<bb 66>:
  D.44530_316 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
  recvonly_317 = 1;
  # DEBUG recvonly => recvonly_317
  D.44605_318 = a_engine_188->rtp_session;
  D.44606_319 = switch_rtp_ready (D.44605_318);
  if (D.44606_319 != 0)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  D.44605_320 = a_engine_188->rtp_session;
  switch_rtp_set_max_missed_packets (D.44605_320, 0);
  a_engine_188->max_missed_hold_packets = 0;
  a_engine_188->max_missed_packets = 0;
  goto <bb 76>;

<bb 68>:
  D.44530_321 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
  D.44530_322 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
  goto <bb 76>;

<bb 69>:
  if (sendonly_44 <= 1)
    goto <bb 70>;
  else
    goto <bb 72>;

<bb 70>:
  D.44590_323 = attr_29->a_name;
  D.44614_324 = strcasecmp (D.44590_323, "sendrecv");
  if (D.44614_324 == 0)
    goto <bb 71>;
  else
    goto <bb 72>;

<bb 71>:
  sendonly_325 = 0;
  # DEBUG sendonly => sendonly_325
  goto <bb 76>;

<bb 72>:
  D.44590_326 = attr_29->a_name;
  D.44616_327 = strcasecmp (D.44590_326, "ptime");
  if (D.44616_327 == 0)
    goto <bb 73>;
  else
    goto <bb 74>;

<bb 73>:
  D.44619_328 = attr_29->a_value;
  # DEBUG __nptr => D.44619_328
  D.47881_1467 = strtol (D.44619_328, 0B, 10);
  D.47880_1521 = D.47881_1467;
  dptime_329 = D.47880_1521;
  # DEBUG dptime => NULL
  goto <bb 76>;

<bb 74>:
  D.44590_330 = attr_29->a_name;
  D.44621_331 = strcasecmp (D.44590_330, "maxptime");
  if (D.44621_331 == 0)
    goto <bb 75>;
  else
    goto <bb 76>;

<bb 75>:
  D.44619_332 = attr_29->a_value;
  # DEBUG __nptr => D.44619_332
  D.47884_1468 = strtol (D.44619_332, 0B, 10);
  D.47883_1523 = D.47884_1468;
  dmaxptime_333 = D.47883_1523;
  # DEBUG dmaxptime => NULL

<bb 76>:
  # dptime_36 = PHI <dptime_37(60), dptime_37(62), dptime_37(64), dptime_37(68), dptime_37(71), dptime_329(73), dptime_37(74), dptime_37(75), dptime_37(67)>
  # dmaxptime_40 = PHI <dmaxptime_41(60), dmaxptime_41(62), dmaxptime_41(64), dmaxptime_41(68), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(74), dmaxptime_333(75), dmaxptime_41(67)>
  # sendonly_43 = PHI <sendonly_44(60), sendonly_308(62), sendonly_312(64), sendonly_44(68), sendonly_325(71), sendonly_44(73), sendonly_44(74), sendonly_44(75), sendonly_44(67)>
  # recvonly_45 = PHI <recvonly_46(60), recvonly_46(62), recvonly_46(64), recvonly_317(68), recvonly_46(71), recvonly_46(73), recvonly_46(74), recvonly_46(75), recvonly_317(67)>
  # DEBUG recvonly => recvonly_45
  # DEBUG sendonly => sendonly_43
  # DEBUG dmaxptime => dmaxptime_40
  # DEBUG dptime => dptime_36
  attr_334 = attr_29->a_next;
  # DEBUG attr => attr_334

<bb 77>:
  # attr_29 = PHI <attr_303(55), attr_334(76)>
  # dptime_37 = PHI <dptime_153(55), dptime_36(76)>
  # dmaxptime_41 = PHI <dmaxptime_155(55), dmaxptime_40(76)>
  # sendonly_44 = PHI <sendonly_42(55), sendonly_43(76)>
  # recvonly_46 = PHI <recvonly_157(55), recvonly_45(76)>
  # DEBUG recvonly => recvonly_46
  # DEBUG sendonly => sendonly_44
  # DEBUG dmaxptime => dmaxptime_41
  # DEBUG dptime => dptime_37
  # DEBUG attr => attr_29
  if (attr_29 != 0B)
    goto <bb 56>;
  else
    goto <bb 78>;

<bb 78>:
  D.44624_335 = sendonly_44 != 1;
  D.44625_336 = recvonly_46 != 1;
  D.44626_337 = D.44624_335 && D.44625_336;
  if (D.44626_337 != 0)
    goto <bb 79>;
  else
    goto <bb 80>;

<bb 79>:
  D.44530_338 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);

<bb 80>:
  D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
  if (D.44631_339 == 0)
    goto <bb 81>;
  else
    goto <bb 87>;

<bb 81>:
  D.44530_340 = session_161(D)->channel;
  val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
  # DEBUG val => val_341
  if (val_341 == 0B)
    goto <bb 83>;
  else
    goto <bb 82>;

<bb 82>:
  D.44635_342 = switch_true (val_341);
  if (D.44635_342 == 0)
    goto <bb 83>;
  else
    goto <bb 87>;

<bb 83>:
  D.44471_343 = smh_186->mparams;
  D.44636_344 = D.44471_343->hold_laps;
  if (D.44636_344 == 0)
    goto <bb 84>;
  else
    goto <bb 87>;

<bb 84>:
  D.44471_345 = smh_186->mparams;
  D.44636_346 = D.44471_345->hold_laps;
  D.44639_347 = D.44636_346 + 1;
  D.44471_345->hold_laps = D.44639_347;
  D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);
  if (D.44640_348 != 0)
    goto <bb 85>;
  else
    goto <bb 87>;

<bb 85>:
  reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
  # DEBUG reneg => reneg_349
  D.44530_350 = session_161(D)->channel;
  val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
  # DEBUG val => val_351
  if (val_351 != 0B)
    goto <bb 86>;
  else
    goto <bb 87>;

<bb 86>:
  reneg_352 = switch_true (val_351);
  # DEBUG reneg => reneg_352

<bb 87>:
  # reneg_81 = PHI <reneg_175(80), reneg_175(82), reneg_175(83), reneg_175(84), reneg_349(85), reneg_352(86)>
  # DEBUG reneg => reneg_81
  if (reneg_81 != 0)
    goto <bb 88>;
  else
    goto <bb 90>;

<bb 88>:
  reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
  # DEBUG reneg => reneg_353
  D.44530_354 = session_161(D)->channel;
  val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
  # DEBUG val => val_355
  if (val_355 != 0B)
    goto <bb 89>;
  else
    goto <bb 90>;

<bb 89>:
  reneg_356 = switch_true (val_355);
  # DEBUG reneg => reneg_356

<bb 90>:
  # reneg_82 = PHI <reneg_81(87), reneg_353(88), reneg_356(89)>
  # DEBUG reneg => reneg_82
  D.44649_357 = session_161(D)->bugs;
  if (D.44649_357 != 0B)
    goto <bb 91>;
  else
    goto <bb 92>;

<bb 91>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
  reneg_358 = 0;
  # DEBUG reneg => reneg_358

<bb 92>:
  # reneg_83 = PHI <reneg_82(90), reneg_358(91)>
  # DEBUG reneg => reneg_83
  if (reneg_83 == 0)
    goto <bb 93>;
  else
    goto <bb 95>;

<bb 93>:
  D.44655_359 = smh_186->num_negotiated_codecs;
  if (D.44655_359 != 0)
    goto <bb 94>;
  else
    goto <bb 95>;

<bb 94>:
  codec_array_360 = &smh_186->negotiated_codecs;
  # DEBUG codec_array => codec_array_360
  total_codecs_361 = smh_186->num_negotiated_codecs;
  # DEBUG total_codecs => total_codecs_361
  goto <bb 97>;

<bb 95>:
  if (reneg_83 != 0)
    goto <bb 96>;
  else
    goto <bb 97>;

<bb 96>:
  D.44471_362 = smh_186->mparams;
  D.44471_362->num_codecs = 0;
  switch_core_media_prepare_codecs (session_161(D), 0);
  codec_array_363 = &smh_186->codecs;
  # DEBUG codec_array => codec_array_363
  D.44471_364 = smh_186->mparams;
  total_codecs_365 = D.44471_364->num_codecs;
  # DEBUG total_codecs => total_codecs_365

<bb 97>:
  # codec_array_84 = PHI <codec_array_360(94), codec_array_190(95), codec_array_363(96)>
  # total_codecs_85 = PHI <total_codecs_361(94), total_codecs_192(95), total_codecs_365(96)>
  # DEBUG total_codecs => total_codecs_85
  # DEBUG codec_array => codec_array_84
  D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
  if (D.44661_366 != 0B)
    goto <bb 100>;
  else
    goto <bb 98>;

<bb 98>:
  D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
  if (D.44663_367 != 0B)
    goto <bb 100>;
  else
    goto <bb 99>;

<bb 99>:
  D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
  if (D.44665_368 != 0B)
    goto <bb 100>;
  else
    goto <bb 101>;

<bb 100>:
  D.44530_369 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);

<bb 101>:
  switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
  switch_core_media_pass_zrtp_hash (session_161(D));
  check_ice (smh_186, 0, sdp_198, 0B);
  check_ice (smh_186, 1, sdp_198, 0B);
  m_370 = sdp_198->sdp_media;
  # DEBUG m => m_370
  goto <bb 450>;

<bb 102>:
  ptime_371 = dptime_37;
  # DEBUG ptime => ptime_371
  maxptime_372 = dmaxptime_41;
  # DEBUG maxptime => maxptime_372
  D.44666_373 = m_28->m_proto;
  if (D.44666_373 == 261)
    goto <bb 103>;
  else
    goto <bb 104>;

<bb 103>:
  got_webrtc_374 = got_webrtc_79 + 1;
  # DEBUG got_webrtc => got_webrtc_374
  switch_core_session_set_ice (session_161(D));

<bb 104>:
  # got_webrtc_78 = PHI <got_webrtc_79(102), got_webrtc_374(103)>
  # DEBUG got_webrtc => got_webrtc_78
  D.44669_375 = m_28->m_proto_name;
  if (D.44669_375 != 0B)
    goto <bb 105>;
  else
    goto <bb 107>;

<bb 105>:
  D.44669_376 = m_28->m_proto_name;
  D.44672_377 = strcasecmp (D.44669_376, "UDP/TLS/RTP/SAVPF");
  if (D.44672_377 == 0)
    goto <bb 106>;
  else
    goto <bb 107>;

<bb 106>:
  D.44530_378 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_378, 107, 1);

<bb 107>:
  D.44675_379 = m_28->m_proto;
  D.44676_380 = D.44675_379 == 257;
  D.44677_381 = D.44675_379 == 261;
  D.44678_382 = D.44676_380 || D.44677_381;
  if (D.44678_382 != 0)
    goto <bb 108>;
  else
    goto <bb 111>;

<bb 108>:
  D.44681_383 = m_28->m_type;
  if (D.44681_383 == 2)
    goto <bb 109>;
  else
    goto <bb 110>;

<bb 109>:
  got_savp_384 = got_savp_75 + 1;
  # DEBUG got_savp => got_savp_384
  goto <bb 117>;

<bb 110>:
  got_video_savp_385 = got_video_savp_73 + 1;
  # DEBUG got_video_savp => got_video_savp_385
  goto <bb 117>;

<bb 111>:
  D.44666_386 = m_28->m_proto;
  if (D.44666_386 == 256)
    goto <bb 112>;
  else
    goto <bb 115>;

<bb 112>:
  D.44681_387 = m_28->m_type;
  if (D.44681_387 == 2)
    goto <bb 113>;
  else
    goto <bb 114>;

<bb 113>:
  got_avp_388 = got_avp_69 + 1;
  # DEBUG got_avp => got_avp_388
  goto <bb 117>;

<bb 114>:
  got_video_avp_389 = got_video_avp_71 + 1;
  # DEBUG got_video_avp => got_video_avp_389
  goto <bb 117>;

<bb 115>:
  D.44666_390 = m_28->m_proto;
  if (D.44666_390 == 258)
    goto <bb 116>;
  else
    goto <bb 117>;

<bb 116>:
  got_udptl_391 = got_udptl_77 + 1;
  # DEBUG got_udptl => got_udptl_391

<bb 117>:
  # got_avp_68 = PHI <got_avp_69(110), got_avp_69(114), got_avp_69(115), got_avp_69(116), got_avp_69(109), got_avp_388(113)>
  # got_video_avp_70 = PHI <got_video_avp_71(110), got_video_avp_389(114), got_video_avp_71(115), got_video_avp_71(116), got_video_avp_71(109), got_video_avp_71(113)>
  # got_video_savp_72 = PHI <got_video_savp_385(110), got_video_savp_73(114), got_video_savp_73(115), got_video_savp_73(116), got_video_savp_73(109), got_video_savp_73(113)>
  # got_savp_74 = PHI <got_savp_75(110), got_savp_75(114), got_savp_75(115), got_savp_75(116), got_savp_384(109), got_savp_75(113)>
  # got_udptl_76 = PHI <got_udptl_77(110), got_udptl_77(114), got_udptl_77(115), got_udptl_391(116), got_udptl_77(109), got_udptl_77(113)>
  # DEBUG got_udptl => got_udptl_76
  # DEBUG got_savp => got_savp_74
  # DEBUG got_video_savp => got_video_savp_72
  # DEBUG got_video_avp => got_video_avp_70
  # DEBUG got_avp => got_avp_68
  if (got_udptl_76 != 0)
    goto <bb 118>;
  else
    goto <bb 153>;

<bb 118>:
  D.44681_392 = m_28->m_type;
  if (D.44681_392 == 8)
    goto <bb 119>;
  else
    goto <bb 153>;

<bb 119>:
  D.44697_393 = m_28->m_port;
  if (D.44697_393 != 0)
    goto <bb 120>;
  else
    goto <bb 153>;

<bb 120>:
  t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
  # DEBUG t38_options => t38_options_394
  D.44530_395 = session_161(D)->channel;
  D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
  if (D.44699_396 != 0)
    goto <bb 121>;
  else
    goto <bb 122>;

<bb 121>:
  match_397 = 1;
  # DEBUG match => match_397
  goto <bb 451> (done);

<bb 122>:
  D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
  D.44703_399 = switch_true (D.44702_398);
  if (D.44703_399 != 0)
    goto <bb 123>;
  else
    goto <bb 124>;

<bb 123>:
  D.44530_400 = session_161(D)->channel;
  switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
  match_401 = 0;
  # DEBUG match => match_401
  goto <bb 451> (done);

<bb 124>:
  var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
  # DEBUG var => var_402
  D.44481_403 = smh_186->session;
  D.44482_404 = D.44481_403->channel;
  D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
  pass_406 = (int) D.44706_405;
  # DEBUG pass => pass_406
  D.44530_407 = session_161(D)->channel;
  D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
  if (D.44707_408 != 0)
    goto <bb 125>;
  else
    goto <bb 127>;

<bb 125>:
  if (proceed_209(D) != 0B)
    goto <bb 126>;
  else
    goto <bb 127>;

<bb 126>:
  *proceed_209(D) = 0;

<bb 127>:
  if (var_402 != 0B)
    goto <bb 128>;
  else
    goto <bb 131>;

<bb 128>:
  pass_409 = switch_true (var_402);
  # DEBUG pass => pass_409
  if (pass_409 == 0)
    goto <bb 129>;
  else
    goto <bb 131>;

<bb 129>:
  D.44716_410 = strcasecmp (var_402, "once");
  if (D.44716_410 == 0)
    goto <bb 130>;
  else
    goto <bb 131>;

<bb 130>:
  pass_411 = 2;
  # DEBUG pass => pass_411

<bb 131>:
  # pass_126 = PHI <pass_406(127), pass_409(128), pass_409(129), pass_411(130)>
  # DEBUG pass => pass_126
  if (pass_126 == 2)
    goto <bb 132>;
  else
    goto <bb 133>;

<bb 132>:
  D.44481_412 = smh_186->session;
  D.44482_413 = D.44481_412->channel;
  D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
  if (D.44723_414 != 0)
    goto <bb 137>;
  else
    goto <bb 133>;

<bb 133>:
  D.44530_415 = session_161(D)->channel;
  D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
  if (D.44724_416 == 0)
    goto <bb 137>;
  else
    goto <bb 134>;

<bb 134>:
  D.44530_417 = session_161(D)->channel;
  D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
  if (D.44726_418 != 0)
    goto <bb 137>;
  else
    goto <bb 135>;

<bb 135>:
  D.44530_419 = session_161(D)->channel;
  D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
  if (D.44728_420 != 0)
    goto <bb 137>;
  else
    goto <bb 136>;

<bb 136>:
  D.44605_421 = a_engine_188->rtp_session;
  D.44730_422 = switch_rtp_ready (D.44605_421);
  if (D.44730_422 == 0)
    goto <bb 137>;
  else
    goto <bb 138>;

<bb 137>:
  pass_423 = 0;
  # DEBUG pass => pass_423

<bb 138>:
  # pass_127 = PHI <pass_126(136), pass_423(137)>
  # DEBUG pass => pass_127
  if (pass_127 != 0)
    goto <bb 139>;
  else
    goto <bb 152>;

<bb 139>:
  D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
  if (D.44733_424 == 0)
    goto <bb 140>;
  else
    goto <bb 152>;

<bb 140>:
  other_session.89_425 = other_session;
  other_channel_426 = switch_core_session_get_channel (other_session.89_425);
  # DEBUG other_channel => other_channel_426
  D.44605_427 = a_engine_188->rtp_session;
  remote_host_428 = switch_rtp_get_remote_host (D.44605_427);
  # DEBUG remote_host => remote_host_428
  D.44605_429 = a_engine_188->rtp_session;
  remote_port_430 = switch_rtp_get_remote_port (D.44605_429);
  # DEBUG remote_port => remote_port_430
  tmp = "";
  D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
  if (D.44737_431 == 0)
    goto <bb 141>;
  else
    goto <bb 142>;

<bb 141>:
  D.44530_432 = session_161(D)->channel;
  D.44740_433 = switch_channel_get_name (D.44530_432);
  D.44741_434 = switch_channel_get_name (other_channel_426);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
  other_session.89_435 = other_session;
  switch_core_session_rwunlock (other_session.89_435);
  pass_436 = 0;
  # DEBUG pass => pass_436
  match_437 = 0;
  # DEBUG match => match_437
  goto <bb 451> (done);

<bb 142>:
  D.44530_438 = session_161(D)->channel;
  D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
  D.44743_440 = switch_true (D.44742_439);
  if (D.44743_440 != 0)
    goto <bb 143>;
  else
    goto <bb 145>;

<bb 143>:
  D.44530_441 = session_161(D)->channel;
  D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
  D.44747_443 = switch_true (D.44746_442);
  if (D.44747_443 != 0)
    goto <bb 144>;
  else
    goto <bb 145>;

<bb 144>:
  switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);

<bb 145>:
  D.44750_444 = a_engine_188->cur_payload_map;
  D.44751_445 = t38_options_394->remote_ip;
  D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
  D.44750_444->remote_sdp_ip = D.44752_446;
  D.44750_447 = a_engine_188->cur_payload_map;
  D.44753_448 = t38_options_394->remote_port;
  D.44750_447->remote_sdp_port = D.44753_448;
  D.44756_449 = remote_host_428 != 0B;
  D.44757_450 = remote_port_430 != 0;
  D.44758_451 = D.44756_449 && D.44757_450;
  if (D.44758_451 != 0)
    goto <bb 146>;
  else
    goto <bb 149>;

<bb 146>:
  D.44750_452 = a_engine_188->cur_payload_map;
  D.44760_453 = D.44750_452->remote_sdp_ip;
  D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
  if (D.39032_454 == 0)
    goto <bb 147>;
  else
    goto <bb 149>;

<bb 147>:
  D.44750_455 = a_engine_188->cur_payload_map;
  D.44762_456 = D.44750_455->remote_sdp_port;
  if (D.44762_456 == remote_port_430)
    goto <bb 148>;
  else
    goto <bb 149>;

<bb 148>:
  D.44530_457 = session_161(D)->channel;
  D.44764_458 = switch_channel_get_name (D.44530_457);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
  goto <bb 151>;

<bb 149>:
  err = 0B;
  D.44530_459 = session_161(D)->channel;
  D.44765_460 = switch_channel_get_name (D.44530_459);
  D.44766_461 = (int) remote_port_430;
  D.44750_462 = a_engine_188->cur_payload_map;
  D.44760_463 = D.44750_462->remote_sdp_ip;
  D.44750_464 = a_engine_188->cur_payload_map;
  D.44762_465 = D.44750_464->remote_sdp_port;
  D.44767_466 = (int) D.44762_465;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
  D.44750_467 = a_engine_188->cur_payload_map;
  D.44762_468 = D.44750_467->remote_sdp_port;
  D.44767_469 = (int) D.44762_468;
  switch_snprintf (&tmp, 32, "%d", D.44767_469);
  D.44530_470 = session_161(D)->channel;
  D.44750_471 = a_engine_188->cur_payload_map;
  D.44760_472 = D.44750_471->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
  D.44530_473 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
  D.44605_474 = a_engine_188->rtp_session;
  D.44750_475 = a_engine_188->cur_payload_map;
  D.44760_476 = D.44750_475->remote_sdp_ip;
  D.44750_477 = a_engine_188->cur_payload_map;
  D.44762_478 = D.44750_477->remote_sdp_port;
  D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
  if (D.44768_479 != 0)
    goto <bb 150>;
  else
    goto <bb 151>;

<bb 150>:
  err.90_480 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
  switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);

<bb 151>:
  other_session.89_481 = other_session;
  switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
  D.44481_482 = smh_186->session;
  D.44482_483 = D.44481_482->channel;
  switch_channel_set_flag_value (D.44482_483, 101, 1);
  other_session.89_484 = other_session;
  D.44772_485 = other_session.89_484->channel;
  switch_channel_set_flag_value (D.44772_485, 101, 1);
  other_session.89_486 = other_session;
  msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
  # DEBUG msg => msg_487
  msg_487->message_id = 21;
  msg_487->from = "src/switch_core_media.c";
  other_session.89_488 = other_session;
  D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
  msg_487->string_arg = D.44773_489;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
  other_session.89_490 = other_session;
  switch_core_session_queue_message (other_session.89_490, msg_487);
  other_session.89_491 = other_session;
  switch_core_session_rwunlock (other_session.89_491);

<bb 152>:
  match_492 = 1;
  # DEBUG match => match_492
  goto <bb 451> (done);

<bb 153>:
  D.44681_493 = m_28->m_type;
  if (D.44681_493 == 2)
    goto <bb 154>;
  else
    goto <bb 348>;

<bb 154>:
  D.44697_494 = m_28->m_port;
  D.44777_495 = D.44697_494 != 0;
  D.44778_496 = got_audio_67 == 0;
  D.44779_497 = D.44777_495 && D.44778_496;
  if (D.44779_497 != 0)
    goto <bb 155>;
  else
    goto <bb 348>;

<bb 155>:
  D.44781_498 = switch_rtp_has_dtls ();
  if (D.44781_498 != 0)
    goto <bb 156>;
  else
    goto <bb 166>;

<bb 156>:
  D.44784_499 = dtls_ok (session_161(D));
  if (D.44784_499 != 0)
    goto <bb 157>;
  else
    goto <bb 166>;

<bb 157>:
  attr_500 = m_28->m_attributes;
  # DEBUG attr => attr_500
  goto <bb 165>;

<bb 158>:
  D.44590_501 = attr_30->a_name;
  D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
  if (D.44787_502 == 0)
    goto <bb 159>;
  else
    goto <bb 164>;

<bb 159>:
  D.44619_503 = attr_30->a_value;
  # DEBUG s => D.44619_503
  if (D.44619_503 == 0B)
    goto <bb 162>;
  else
    goto <bb 160>;

<bb 160>:
  D.47887_1469 = *D.44619_503;
  if (D.47887_1469 == 0)
    goto <bb 162>;
  else
    goto <bb 161>;

<bb 161>:

<bb 162>:
  # D.47888_1470 = PHI <1(159), 1(160), 0(161)>
  D.47886_1524 = D.47888_1470;
  D.44790_504 = D.47886_1524;
  if (D.44790_504 == 0)
    goto <bb 163>;
  else
    goto <bb 164>;

<bb 163>:
  got_crypto_505 = 1;
  # DEBUG got_crypto => got_crypto_505

<bb 164>:
  # got_crypto_50 = PHI <got_crypto_51(158), got_crypto_51(162), got_crypto_505(163)>
  # DEBUG got_crypto => got_crypto_50
  attr_506 = attr_30->a_next;
  # DEBUG attr => attr_506

<bb 165>:
  # attr_30 = PHI <attr_500(157), attr_506(164)>
  # got_crypto_51 = PHI <got_crypto_56(157), got_crypto_50(164)>
  # DEBUG got_crypto => got_crypto_51
  # DEBUG attr => attr_30
  if (attr_30 != 0B)
    goto <bb 158>;
  else
    goto <bb 166>;

<bb 166>:
  # got_crypto_52 = PHI <got_crypto_56(155), got_crypto_56(156), got_crypto_51(165)>
  # DEBUG got_crypto => got_crypto_52
  attr_507 = m_28->m_attributes;
  # DEBUG attr => attr_507
  goto <bb 189>;

<bb 167>:
  D.44590_508 = attr_31->a_name;
  D.44795_509 = strcasecmp (D.44590_508, "rtcp");
  if (D.44795_509 == 0)
    goto <bb 168>;
  else
    goto <bb 171>;

<bb 168>:
  D.44619_510 = attr_31->a_value;
  if (D.44619_510 != 0B)
    goto <bb 169>;
  else
    goto <bb 171>;

<bb 169>:
  D.44530_511 = session_161(D)->channel;
  D.44619_512 = attr_31->a_value;
  switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);
  D.44619_513 = attr_31->a_value;
  # DEBUG __nptr => D.44619_513
  D.47891_1471 = strtol (D.44619_513, 0B, 10);
  D.47890_1526 = D.47891_1471;
  D.44798_514 = D.47890_1526;
  D.44799_515 = (short unsigned int) D.44798_514;
  a_engine_188->remote_rtcp_port = D.44799_515;
  D.44471_516 = smh_186->mparams;
  D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
  if (D.44800_517 == 0B)
    goto <bb 170>;
  else
    goto <bb 188>;

<bb 170>:
  D.44471_518 = smh_186->mparams;
  D.44471_518->rtcp_audio_interval_msec = "5000";
  goto <bb 188>;

<bb 171>:
  D.44590_519 = attr_31->a_name;
  D.44805_520 = strcasecmp (D.44590_519, "ptime");
  if (D.44805_520 == 0)
    goto <bb 172>;
  else
    goto <bb 174>;

<bb 172>:
  D.44619_521 = attr_31->a_value;
  if (D.44619_521 != 0B)
    goto <bb 173>;
  else
    goto <bb 174>;

<bb 173>:
  D.44619_522 = attr_31->a_value;
  # DEBUG __nptr => D.44619_522
  D.47894_1472 = strtol (D.44619_522, 0B, 10);
  D.47893_1528 = D.47894_1472;
  ptime_523 = D.47893_1528;
  # DEBUG ptime => NULL
  goto <bb 188>;

<bb 174>:
  D.44590_524 = attr_31->a_name;
  D.44810_525 = strcasecmp (D.44590_524, "maxptime");
  if (D.44810_525 == 0)
    goto <bb 175>;
  else
    goto <bb 177>;

<bb 175>:
  D.44619_526 = attr_31->a_value;
  if (D.44619_526 != 0B)
    goto <bb 176>;
  else
    goto <bb 177>;

<bb 176>:
  D.44619_527 = attr_31->a_value;
  # DEBUG __nptr => D.44619_527
  D.47897_1473 = strtol (D.44619_527, 0B, 10);
  D.47896_1530 = D.47897_1473;
  maxptime_528 = D.47896_1530;
  # DEBUG maxptime => NULL
  goto <bb 188>;

<bb 177>:
  if (got_crypto_54 <= 0)
    goto <bb 178>;
  else
    goto <bb 188>;

<bb 178>:
  D.44590_529 = attr_31->a_name;
  D.44815_530 = strcasecmp (D.44590_529, "crypto");
  if (D.44815_530 == 0)
    goto <bb 179>;
  else
    goto <bb 188>;

<bb 179>:
  D.44619_531 = attr_31->a_value;
  # DEBUG s => D.44619_531
  if (D.44619_531 == 0B)
    goto <bb 182>;
  else
    goto <bb 180>;

<bb 180>:
  D.47900_1474 = *D.44619_531;
  if (D.47900_1474 == 0)
    goto <bb 182>;
  else
    goto <bb 181>;

<bb 181>:

<bb 182>:
  # D.47901_1475 = PHI <1(179), 1(180), 0(181)>
  D.47899_1531 = D.47901_1475;
  D.44818_532 = D.47899_1531;
  if (D.44818_532 == 0)
    goto <bb 183>;
  else
    goto <bb 188>;

<bb 183>:
  D.44471_533 = smh_186->mparams;
  D.44821_534 = D.44471_533->ndlb;
  D.44822_535 = D.44821_534 & 4;
  if (D.44822_535 == 0)
    goto <bb 184>;
  else
    goto <bb 187>;

<bb 184>:
  D.44530_536 = session_161(D)->channel;
  D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
  D.44826_538 = switch_true (D.44825_537);
  if (D.44826_538 == 0)
    goto <bb 185>;
  else
    goto <bb 187>;

<bb 185>:
  D.44666_539 = m_28->m_proto;
  D.44829_540 = D.44666_539 != 257;
  D.44830_541 = got_webrtc_78 == 0;
  D.44831_542 = D.44829_540 && D.44830_541;
  if (D.44831_542 != 0)
    goto <bb 186>;
  else
    goto <bb 187>;

<bb 186>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  match_543 = 0;
  # DEBUG match => match_543
  goto <bb 451> (done);

<bb 187>:
  crypto_544 = attr_31->a_value;
  # DEBUG crypto => crypto_544
  # DEBUG __nptr => crypto_544
  D.47904_1476 = strtol (crypto_544, 0B, 10);
  D.47903_1533 = D.47904_1476;
  crypto_tag_545 = D.47903_1533;
  # DEBUG crypto_tag => NULL
  got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_545, sdp_type_546(D));
  # DEBUG got_crypto => got_crypto_547

<bb 188>:
  # ptime_34 = PHI <ptime_35(170), ptime_523(173), ptime_35(176), ptime_35(177), ptime_35(178), ptime_35(182), ptime_35(187), ptime_35(169)>
  # maxptime_38 = PHI <maxptime_39(170), maxptime_39(173), maxptime_528(176), maxptime_39(177), maxptime_39(178), maxptime_39(182), maxptime_39(187), maxptime_39(169)>
  # got_crypto_53 = PHI <got_crypto_54(170), got_crypto_54(173), got_crypto_54(176), got_crypto_54(177), got_crypto_54(178), got_crypto_54(182), got_crypto_547(187), got_crypto_54(169)>
  # DEBUG got_crypto => got_crypto_53
  # DEBUG maxptime => maxptime_38
  # DEBUG ptime => ptime_34
  attr_548 = attr_31->a_next;
  # DEBUG attr => attr_548

<bb 189>:
  # attr_31 = PHI <attr_507(166), attr_548(188)>
  # ptime_35 = PHI <ptime_371(166), ptime_34(188)>
  # maxptime_39 = PHI <maxptime_372(166), maxptime_38(188)>
  # got_crypto_54 = PHI <got_crypto_52(166), got_crypto_53(188)>
  # DEBUG got_crypto => got_crypto_54
  # DEBUG maxptime => maxptime_39
  # DEBUG ptime => ptime_35
  # DEBUG attr => attr_31
  if (attr_31 != 0B)
    goto <bb 167>;
  else
    goto <bb 190>;

<bb 190>:
  D.44834_549 = got_crypto_54 == -1;
  D.44835_550 = got_savp_74 != 0;
  D.44836_551 = D.44834_549 && D.44835_550;
  if (D.44836_551 != 0)
    goto <bb 191>;
  else
    goto <bb 193>;

<bb 191>:
  D.44839_552 = got_avp_68 | got_webrtc_78;
  if (D.44839_552 == 0)
    goto <bb 192>;
  else
    goto <bb 193>;

<bb 192>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
  match_553 = 0;
  # DEBUG match => match_553
  goto <bb 451> (done);

<bb 193>:
  connection_554 = sdp_198->sdp_connection;
  # DEBUG connection => connection_554
  D.44546_555 = m_28->m_connections;
  if (D.44546_555 != 0B)
    goto <bb 194>;
  else
    goto <bb 195>;

<bb 194>:
  connection_556 = m_28->m_connections;
  # DEBUG connection => connection_556

<bb 195>:
  # connection_124 = PHI <connection_554(193), connection_556(194)>
  # DEBUG connection => connection_124
  if (connection_124 == 0B)
    goto <bb 196>;
  else
    goto <bb 197>;

<bb 196>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  match_557 = 0;
  # DEBUG match => match_557
  goto <bb 451> (done);

<bb 197>:
  x_558 = 0;
  # DEBUG x => x_558
  map_559 = m_28->m_rtpmaps;
  # DEBUG map => map_559
  goto <bb 281>;

<bb 198>:
  map_bit_rate_560 = 0;
  # DEBUG map_bit_rate => map_bit_rate_560
  codec_fmtp = {};
  rm_encoding_561 = map_128->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_561
  if (rm_encoding_561 == 0B)
    goto <bb 199>;
  else
    goto <bb 200>;

<bb 199>:
  rm_encoding_562 = "";
  # DEBUG rm_encoding => rm_encoding_562

<bb 200>:
  # rm_encoding_130 = PHI <rm_encoding_561(198), rm_encoding_562(199)>
  # DEBUG rm_encoding => rm_encoding_130
  D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
  if (D.44848_563 == 0)
    goto <bb 201>;
  else
    goto <bb 205>;

<bb 201>:
  if (best_te_20 == 0)
    goto <bb 203>;
  else
    goto <bb 202>;

<bb 202>:
  D.44854_564 = map_128->rm_rate;
  D.44750_565 = a_engine_188->cur_payload_map;
  D.44855_566 = D.44750_565->rm_rate;
  if (D.44854_564 == D.44855_566)
    goto <bb 203>;
  else
    goto <bb 204>;

<bb 203>:
  D.44856_567 = map_128->rm_pt;
  best_te_568 = (switch_payload_t) D.44856_567;
  # DEBUG best_te => best_te_568
  D.44857_569 = (int) best_te_568;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);

<bb 204>:
  # best_te_18 = PHI <best_te_20(202), best_te_568(203)>
  # DEBUG best_te => best_te_18
  // predicted unlikely by continue predictor.
  goto <bb 280>;

<bb 205>:
  D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
  if (D.44858_570 == 0)
    goto <bb 206>;
  else
    goto <bb 211>;

<bb 206>:
  if (cng_pt_25 == 0)
    goto <bb 207>;
  else
    goto <bb 211>;

<bb 207>:
  D.44863_571 = strcasecmp (rm_encoding_130, "CN");
  if (D.44863_571 == 0)
    goto <bb 208>;
  else
    goto <bb 211>;

<bb 208>:
  D.44856_572 = map_128->rm_pt;
  cng_pt_573 = (switch_payload_t) D.44856_572;
  # DEBUG cng_pt => cng_pt_573
  D.44605_574 = a_engine_188->rtp_session;
  if (D.44605_574 != 0B)
    goto <bb 209>;
  else
    goto <bb 210>;

<bb 209>:
  D.44868_575 = (int) cng_pt_573;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
  D.44605_576 = a_engine_188->rtp_session;
  D.44471_577 = smh_186->mparams;
  D.44869_578 = D.44471_577->cng_pt;
  switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

<bb 210>:
  // predicted unlikely by continue predictor.
  goto <bb 280>;

<bb 211>:
  D.44870_579 = x_49 < skip_160;
  x_580 = x_49 + 1;
  # DEBUG x => x_580
  if (D.44870_579 != 0)
    goto <bb 212>;
  else
    goto <bb 213>;

<bb 212>:
  // predicted unlikely by continue predictor.
  goto <bb 280>;

<bb 213>:
  if (match_8 != 0)
    goto <bb 214>;
  else
    goto <bb 215>;

<bb 214>:
  // predicted unlikely by continue predictor.
  goto <bb 280>;

<bb 215>:
  codec_ms_581 = ptime_35;
  # DEBUG codec_ms => codec_ms_581
  if (maxptime_39 != 0)
    goto <bb 216>;
  else
    goto <bb 218>;

<bb 216>:
  D.44877_582 = codec_ms_581 == 0;
  D.44878_583 = codec_ms_581 > maxptime_39;
  D.44879_584 = D.44877_582 || D.44878_583;
  if (D.44879_584 != 0)
    goto <bb 217>;
  else
    goto <bb 218>;

<bb 217>:
  codec_ms_585 = maxptime_39;
  # DEBUG codec_ms => codec_ms_585

<bb 218>:
  # codec_ms_86 = PHI <codec_ms_581(215), codec_ms_581(216), codec_ms_585(217)>
  # DEBUG codec_ms => codec_ms_86
  if (codec_ms_86 == 0)
    goto <bb 219>;
  else
    goto <bb 220>;

<bb 219>:
  D.44856_586 = map_128->rm_pt;
  D.44884_587 = (uint32_t) D.44856_586;
  D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
  codec_ms_589 = (int) D.44885_588;
  # DEBUG codec_ms => codec_ms_589

<bb 220>:
  # codec_ms_87 = PHI <codec_ms_86(218), codec_ms_589(219)>
  # DEBUG codec_ms => codec_ms_87
  D.44856_590 = map_128->rm_pt;
  D.44886_591 = (unsigned char) D.44856_590;
  # DEBUG payload => D.44886_591
  csui.173_1477 = D.44886_591;
  if (csui.173_1477 <= 18)
    goto <bb 222> (<L499>);
  else
    goto <bb 221> (<L498>);

<L498>:
  D.47908_1478 = 0;
  goto <bb 223> (<L500>);

<L499>:
  D.47908_1479 = CSWTCH.174[csui.173_1477];

  # D.47908_1480 = PHI <D.47908_1478(221), D.47908_1479(222)>
<L500>:
<L501>:
  D.47906_1534 = D.47908_1480;
  map_bit_rate_592 = D.47906_1534;
  # DEBUG map_bit_rate => NULL
  if (ptime_35 == 0)
    goto <bb 224>;
  else
    goto <bb 226>;

<bb 224>:
  D.44889_593 = map_128->rm_encoding;
  D.44890_594 = strcasecmp (D.44889_593, "g723");
  if (D.44890_594 == 0)
    goto <bb 225>;
  else
    goto <bb 226>;

<bb 225>:
  codec_ms_595 = 33;
  # DEBUG codec_ms => codec_ms_595

<bb 226>:
  # codec_ms_88 = PHI <codec_ms_87(223), codec_ms_87(224), codec_ms_595(225)>
  # DEBUG codec_ms => codec_ms_88
  remote_codec_rate_596 = map_128->rm_rate;
  # DEBUG remote_codec_rate => remote_codec_rate_596
  fmtp_remote_codec_rate_597 = 0;
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_597
  memset (&codec_fmtp, 0, 16);
  D.44893_598 = map_128->rm_fmtp;
  # DEBUG s => D.44893_598
  if (D.44893_598 == 0B)
    goto <bb 229>;
  else
    goto <bb 227>;

<bb 227>:
  D.47915_1481 = *D.44893_598;
  if (D.47915_1481 == 0)
    goto <bb 229>;
  else
    goto <bb 228>;

<bb 228>:

<bb 229>:
  # D.47916_1482 = PHI <1(226), 1(227), 0(228)>
  D.47914_1535 = D.47916_1482;
  D.44894_599 = D.47914_1535;
  if (D.44894_599 != 0)
    goto <bb 230>;
  else
    goto <bb 234>;

<bb 230>:
  D.44889_600 = map_128->rm_encoding;
  D.44897_601 = strcasecmp (D.44889_600, "ilbc");
  if (D.44897_601 == 0)
    goto <bb 231>;
  else
    goto <bb 232>;

<bb 231>:
  codec_ms_602 = 32;
  # DEBUG codec_ms => codec_ms_602
  map_bit_rate_603 = 13332;
  # DEBUG map_bit_rate => map_bit_rate_603
  goto <bb 241>;

<bb 232>:
  D.44889_604 = map_128->rm_encoding;
  D.44901_605 = strcasecmp (D.44889_604, "isac");
  if (D.44901_605 == 0)
    goto <bb 233>;
  else
    goto <bb 241>;

<bb 233>:
  codec_ms_606 = 39;
  # DEBUG codec_ms => codec_ms_606
  map_bit_rate_607 = 32001;
  # DEBUG map_bit_rate => map_bit_rate_607
  goto <bb 241>;

<bb 234>:
  D.44889_608 = map_128->rm_encoding;
  D.44893_609 = map_128->rm_fmtp;
  D.44854_610 = map_128->rm_rate;
  D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);
  if (D.44905_611 == 0)
    goto <bb 235>;
  else
    goto <bb 241>;

<bb 235>:
  D.44908_612 = codec_fmtp.bits_per_second;
  if (D.44908_612 != 0)
    goto <bb 236>;
  else
    goto <bb 237>;

<bb 236>:
  D.44908_613 = codec_fmtp.bits_per_second;
  map_bit_rate_614 = (uint32_t) D.44908_613;
  # DEBUG map_bit_rate => map_bit_rate_614

<bb 237>:
  # map_bit_rate_131 = PHI <map_bit_rate_592(235), map_bit_rate_614(236)>
  # DEBUG map_bit_rate => map_bit_rate_131
  D.44911_615 = codec_fmtp.microseconds_per_packet;
  if (D.44911_615 != 0)
    goto <bb 238>;
  else
    goto <bb 239>;

<bb 238>:
  D.44911_616 = codec_fmtp.microseconds_per_packet;
  codec_ms_617 = D.44911_616 / 1000;
  # DEBUG codec_ms => codec_ms_617

<bb 239>:
  # codec_ms_89 = PHI <codec_ms_88(237), codec_ms_617(238)>
  # DEBUG codec_ms => codec_ms_89
  D.44914_618 = codec_fmtp.actual_samples_per_second;
  if (D.44914_618 != 0)
    goto <bb 240>;
  else
    goto <bb 241>;

<bb 240>:
  fmtp_remote_codec_rate_619 = codec_fmtp.actual_samples_per_second;
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_619

<bb 241>:
  # codec_ms_90 = PHI <codec_ms_88(232), codec_ms_88(234), codec_ms_89(239), codec_ms_89(240), codec_ms_602(231), codec_ms_606(233)>
  # fmtp_remote_codec_rate_99 = PHI <fmtp_remote_codec_rate_597(232), fmtp_remote_codec_rate_597(234), fmtp_remote_codec_rate_597(239), fmtp_remote_codec_rate_619(240), fmtp_remote_codec_rate_597(231), fmtp_remote_codec_rate_597(233)>
  # map_bit_rate_132 = PHI <map_bit_rate_592(232), map_bit_rate_592(234), map_bit_rate_131(239), map_bit_rate_131(240), map_bit_rate_603(231), map_bit_rate_607(233)>
  # DEBUG map_bit_rate => map_bit_rate_132
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99
  # DEBUG codec_ms => codec_ms_90
  i_620 = 0;
  # DEBUG i => i_620
  goto <bb 278>;

<bb 242>:
  i.91_626 = (unsigned int) i_129;
  D.44918_627 = i.91_626 * 4;
  D.44919_628 = codec_array_84 + D.44918_627;
  imp_629 = *D.44919_628;
  # DEBUG imp => imp_629
  D.44920_630 = imp_629->bits_per_second;
  bit_rate_631 = (uint32_t) D.44920_630;
  # DEBUG bit_rate => bit_rate_631
  codec_rate_632 = imp_629->samples_per_second;
  # DEBUG codec_rate => codec_rate_632
  D.44921_633 = imp_629->codec_type;
  if (D.44921_633 != 0)
    goto <bb 243>;
  else
    goto <bb 244>;

<bb 243>:
  // predicted unlikely by continue predictor.
  goto <bb 277>;

<bb 244>:
  D.44856_634 = map_128->rm_pt;
  D.44924_635 = (int) D.44856_634;
  remote_codec_rate.92_636 = (int) remote_codec_rate_98;
  D.44926_637 = imp_629->iananame;
  D.44927_638 = imp_629->ianacode;
  D.44928_639 = (int) D.44927_638;
  D.44929_640 = imp_629->microseconds_per_packet;
  D.44930_641 = D.44929_640 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
  D.44889_642 = map_128->rm_encoding;
  # DEBUG s => D.44889_642
  if (D.44889_642 == 0B)
    goto <bb 247>;
  else
    goto <bb 245>;

<bb 245>:
  D.47919_1483 = *D.44889_642;
  if (D.47919_1483 == 0)
    goto <bb 247>;
  else
    goto <bb 246>;

<bb 246>:

<bb 247>:
  # D.47920_1484 = PHI <1(244), 1(245), 0(246)>
  D.47918_1536 = D.47920_1484;
  D.44934_643 = D.47918_1536;
  if (D.44934_643 != 0)
    goto <bb 249>;
  else
    goto <bb 248>;

<bb 248>:
  D.44471_644 = smh_186->mparams;
  D.44821_645 = D.44471_644->ndlb;
  D.44936_646 = (int) D.44821_645;
  D.44937_647 = D.44936_646 & 1;
  D.44938_648 = (_Bool) D.44937_647;
  if (D.44938_648 != 0)
    goto <bb 249>;
  else
    goto <bb 251>;

<bb 249>:
  D.44856_649 = map_128->rm_pt;
  D.44924_650 = (int) D.44856_649;
  if (D.44924_650 <= 95)
    goto <bb 250>;
  else
    goto <bb 251>;

<bb 250>:
  D.44856_651 = map_128->rm_pt;
  D.44924_652 = (int) D.44856_651;
  D.44927_653 = imp_629->ianacode;
  D.44928_654 = (int) D.44927_653;
  match_655 = D.44924_652 == D.44928_654;
  # DEBUG match => match_655
  goto <bb 258>;

<bb 251>:
  D.44926_656 = imp_629->iananame;
  D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
  if (D.44944_657 == 0)
    goto <bb 252>;
  else
    goto <bb 255>;

<bb 252>:
  if (remote_codec_rate_98 == codec_rate_632)
    goto <bb 254>;
  else
    goto <bb 253>;

<bb 253>:
  D.44947_658 = imp_629->actual_samples_per_second;
  if (D.44947_658 == fmtp_remote_codec_rate_99)
    goto <bb 254>;
  else
    goto <bb 255>;

<bb 254>:
  iftmp.93_659 = 1;
  goto <bb 256>;

<bb 255>:
  iftmp.93_660 = 0;

<bb 256>:
  # iftmp.93_144 = PHI <iftmp.93_659(254), iftmp.93_660(255)>
  match_661 = (uint8_t) iftmp.93_144;
  # DEBUG match => match_661
  if (fmtp_remote_codec_rate_99 != 0)
    goto <bb 257>;
  else
    goto <bb 258>;

<bb 257>:
  remote_codec_rate_662 = fmtp_remote_codec_rate_99;
  # DEBUG remote_codec_rate => remote_codec_rate_662

<bb 258>:
  # match_1 = PHI <match_655(250), match_661(256), match_661(257)>
  # remote_codec_rate_96 = PHI <remote_codec_rate_98(250), remote_codec_rate_98(256), remote_codec_rate_662(257)>
  # DEBUG remote_codec_rate => remote_codec_rate_96
  # DEBUG match => match_1
  D.44950_663 = match_1 != 0;
  D.44951_664 = bit_rate_631 != 0;
  D.44952_665 = D.44950_663 && D.44951_664;
  if (D.44952_665 != 0)
    goto <bb 259>;
  else
    goto <bb 263>;

<bb 259>:
  D.44955_666 = map_bit_rate_132 != 0;
  D.44956_667 = map_bit_rate_132 != bit_rate_631;
  D.44957_668 = D.44955_666 && D.44956_667;
  if (D.44957_668 != 0)
    goto <bb 260>;
  else
    goto <bb 263>;

<bb 260>:
  D.44889_669 = map_128->rm_encoding;
  D.44960_670 = strcasecmp (D.44889_669, "ilbc");
  if (D.44960_670 != 0)
    goto <bb 261>;
  else
    goto <bb 263>;

<bb 261>:
  D.44889_671 = map_128->rm_encoding;
  D.44963_672 = strcasecmp (D.44889_671, "isac");
  if (D.44963_672 != 0)
    goto <bb 262>;
  else
    goto <bb 263>;

<bb 262>:
  match_673 = 0;
  # DEBUG match => match_673

<bb 263>:
  # match_2 = PHI <match_1(258), match_1(259), match_1(260), match_1(261), match_673(262)>
  # DEBUG match => match_2
  D.44950_674 = match_2 != 0;
  D.44968_675 = remote_codec_rate_96 != 0;
  D.44969_676 = D.44950_674 && D.44968_675;
  if (D.44969_676 != 0)
    goto <bb 264>;
  else
    goto <bb 268>;

<bb 264>:
  D.44972_677 = codec_rate_632 != 0;
  D.44973_678 = remote_codec_rate_96 != codec_rate_632;
  D.44974_679 = D.44972_677 && D.44973_678;
  if (D.44974_679 != 0)
    goto <bb 265>;
  else
    goto <bb 268>;

<bb 265>:
  D.44889_680 = map_128->rm_encoding;
  D.44977_681 = strcasecmp (D.44889_680, "pcma");
  if (D.44977_681 == 0)
    goto <bb 267>;
  else
    goto <bb 266>;

<bb 266>:
  D.44889_682 = map_128->rm_encoding;
  D.44979_683 = strcasecmp (D.44889_682, "pcmu");
  if (D.44979_683 == 0)
    goto <bb 267>;
  else
    goto <bb 268>;

<bb 267>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
  match_684 = 0;
  # DEBUG match => match_684

<bb 268>:
  # match_3 = PHI <match_2(263), match_2(264), match_2(266), match_684(267)>
  # DEBUG match => match_3
  if (match_3 != 0)
    goto <bb 269>;
  else
    goto <bb 277>;

<bb 269>:
  if (scrooge_80 != 0)
    goto <bb 270>;
  else
    goto <bb 271>;

<bb 270>:
  D.44926_685 = imp_629->iananame;
  D.44984_686 = imp_629->samples_per_second;
  D.44929_687 = imp_629->microseconds_per_packet;
  D.44930_688 = D.44929_687 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
  goto <bb 275>;

<bb 271>:
  D.44989_689 = ptime_35 != 0;
  D.44990_690 = codec_ms_90 != 0;
  D.44991_691 = D.44989_689 && D.44990_690;
  if (D.44991_691 != 0)
    goto <bb 272>;
  else
    goto <bb 273>;

<bb 272>:
  D.44993_692 = codec_ms_90 * 1000;
  D.44929_693 = imp_629->microseconds_per_packet;
  if (D.44993_692 != D.44929_693)
    goto <bb 274>;
  else
    goto <bb 273>;

<bb 273>:
  if (remote_codec_rate_96 != codec_rate_632)
    goto <bb 274>;
  else
    goto <bb 275>;

<bb 274>:
  match_694 = 0;
  # DEBUG match => match_694
  D.44926_695 = imp_629->iananame;
  D.44927_696 = imp_629->ianacode;
  D.44928_697 = (int) D.44927_696;
  D.44929_698 = imp_629->microseconds_per_packet;
  D.44930_699 = D.44929_698 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
  near_matches[nm_idx_116].codec_idx = i_129;
  remote_codec_rate.92_700 = (int) remote_codec_rate_96;
  near_matches[nm_idx_116].rate = remote_codec_rate.92_700;
  near_matches[nm_idx_116].imp = imp_629;
  near_matches[nm_idx_116].map = map_128;
  nm_idx_701 = nm_idx_116 + 1;
  # DEBUG nm_idx => nm_idx_701
  // predicted unlikely by continue predictor.
  goto <bb 277>;

<bb 275>:
  matches[m_idx_101].codec_idx = i_129;
  codec_rate.94_702 = (int) codec_rate_632;
  matches[m_idx_101].rate = codec_rate.94_702;
  matches[m_idx_101].imp = imp_629;
  matches[m_idx_101].map = map_128;
  m_idx_703 = m_idx_101 + 1;
  # DEBUG m_idx => m_idx_703
  D.44926_704 = imp_629->iananame;
  D.44927_705 = imp_629->ianacode;
  D.44928_706 = (int) D.44927_705;
  D.44929_707 = imp_629->microseconds_per_packet;
  D.44930_708 = D.44929_707 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
  if (m_idx_703 > 29)
    goto <bb 279>;
  else
    goto <bb 276>;

<bb 276>:
  match_709 = 0;
  # DEBUG match => match_709

<bb 277>:
  # match_4 = PHI <match_5(243), match_3(268), match_694(274), match_709(276)>
  # remote_codec_rate_97 = PHI <remote_codec_rate_98(243), remote_codec_rate_96(268), remote_codec_rate_96(274), remote_codec_rate_96(276)>
  # m_idx_100 = PHI <m_idx_101(243), m_idx_101(268), m_idx_101(274), m_idx_703(276)>
  # nm_idx_115 = PHI <nm_idx_116(243), nm_idx_116(268), nm_idx_701(274), nm_idx_116(276)>
  # DEBUG nm_idx => nm_idx_115
  # DEBUG m_idx => m_idx_100
  # DEBUG remote_codec_rate => remote_codec_rate_97
  # DEBUG match => match_4
  i_710 = i_129 + 1;
  # DEBUG i => i_710

<bb 278>:
  # match_5 = PHI <match_8(241), match_4(277)>
  # remote_codec_rate_98 = PHI <remote_codec_rate_596(241), remote_codec_rate_97(277)>
  # m_idx_101 = PHI <m_idx_104(241), m_idx_100(277)>
  # nm_idx_116 = PHI <nm_idx_118(241), nm_idx_115(277)>
  # i_129 = PHI <i_620(241), i_710(277)>
  # DEBUG i => i_129
  # DEBUG nm_idx => nm_idx_116
  # DEBUG m_idx => m_idx_101
  # DEBUG remote_codec_rate => remote_codec_rate_98
  # DEBUG match => match_5
  D.44471_621 = smh_186->mparams;
  D.44996_622 = D.44471_621->num_codecs;
  D.44997_623 = D.44996_622 > i_129;
  D.44998_624 = i_129 < total_codecs_85;
  D.44999_625 = D.44997_623 && D.44998_624;
  if (D.44999_625 != 0)
    goto <bb 242>;
  else
    goto <bb 279>;

<bb 279>:
  # match_6 = PHI <match_3(275), match_5(278)>
  # m_idx_102 = PHI <m_idx_703(275), m_idx_101(278)>
  # DEBUG m_idx => m_idx_102
  # DEBUG match => match_6
  if (m_idx_102 > 29)
    goto <bb 282>;
  else
    goto <bb 280>;

<bb 280>:
  # match_7 = PHI <match_8(204), match_8(210), match_8(212), match_8(214), match_6(279)>
  # best_te_19 = PHI <best_te_18(204), best_te_20(210), best_te_20(212), best_te_20(214), best_te_20(279)>
  # cng_pt_24 = PHI <cng_pt_25(204), cng_pt_573(210), cng_pt_25(212), cng_pt_25(214), cng_pt_25(279)>
  # x_48 = PHI <x_49(204), x_49(210), x_580(212), x_580(214), x_580(279)>
  # codec_ms_91 = PHI <codec_ms_92(204), codec_ms_92(210), codec_ms_92(212), codec_ms_92(214), codec_ms_90(279)>
  # m_idx_103 = PHI <m_idx_104(204), m_idx_104(210), m_idx_104(212), m_idx_104(214), m_idx_102(279)>
  # nm_idx_117 = PHI <nm_idx_118(204), nm_idx_118(210), nm_idx_118(212), nm_idx_118(214), nm_idx_116(279)>
  # DEBUG nm_idx => nm_idx_117
  # DEBUG m_idx => m_idx_103
  # DEBUG codec_ms => codec_ms_91
  # DEBUG x => x_48
  # DEBUG cng_pt => cng_pt_24
  # DEBUG best_te => best_te_19
  # DEBUG match => match_7
  map_711 = map_128->rm_next;
  # DEBUG map => map_711

<bb 281>:
  # match_8 = PHI <match_16(197), match_7(280)>
  # best_te_20 = PHI <best_te_23(197), best_te_19(280)>
  # cng_pt_25 = PHI <cng_pt_27(197), cng_pt_24(280)>
  # x_49 = PHI <x_558(197), x_48(280)>
  # codec_ms_92 = PHI <codec_ms_95(197), codec_ms_91(280)>
  # m_idx_104 = PHI <m_idx_114(197), m_idx_103(280)>
  # nm_idx_118 = PHI <nm_idx_122(197), nm_idx_117(280)>
  # map_128 = PHI <map_559(197), map_711(280)>
  # DEBUG map => map_128
  # DEBUG nm_idx => nm_idx_118
  # DEBUG m_idx => m_idx_104
  # DEBUG codec_ms => codec_ms_92
  # DEBUG x => x_49
  # DEBUG cng_pt => cng_pt_25
  # DEBUG best_te => best_te_20
  # DEBUG match => match_8
  if (map_128 != 0B)
    goto <bb 198>;
  else
    goto <bb 282>;

<bb 282>:
  # match_9 = PHI <match_6(279), match_8(281)>
  # codec_ms_93 = PHI <codec_ms_90(279), codec_ms_92(281)>
  # m_idx_105 = PHI <m_idx_102(279), m_idx_104(281)>
  # nm_idx_119 = PHI <nm_idx_116(279), nm_idx_118(281)>
  # DEBUG nm_idx => nm_idx_119
  # DEBUG m_idx => m_idx_105
  # DEBUG codec_ms => codec_ms_93
  # DEBUG match => match_9
  D.45001_712 = smh_186->crypto_mode;
  D.45002_713 = D.45001_712 == 1;
  D.45003_714 = got_crypto_54 <= 0;
  D.45004_715 = D.45002_713 && D.45003_714;
  if (D.45004_715 != 0)
    goto <bb 283>;
  else
    goto <bb 284>;

<bb 283>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
  match_716 = 0;
  # DEBUG match => match_716
  nm_idx_717 = 0;
  # DEBUG nm_idx => nm_idx_717
  m_idx_718 = nm_idx_717;
  # DEBUG m_idx => m_idx_718

<bb 284>:
  # match_10 = PHI <match_9(282), match_716(283)>
  # m_idx_106 = PHI <m_idx_105(282), m_idx_718(283)>
  # nm_idx_120 = PHI <nm_idx_119(282), nm_idx_717(283)>
  # DEBUG nm_idx => nm_idx_120
  # DEBUG m_idx => m_idx_106
  # DEBUG match => match_10
  D.45007_719 = m_idx_106 == 0;
  D.45008_720 = nm_idx_120 != 0;
  D.45009_721 = D.45007_719 && D.45008_720;
  if (D.45009_721 != 0)
    goto <bb 285>;
  else
    goto <bb 297>;

<bb 285>:
  j_722 = 0;
  # DEBUG j => j_722
  goto <bb 296>;

<bb 286>:
  timp_723 = 0B;
  # DEBUG timp => timp_723
  D.45012_724 = near_matches[j_133].rate;
  near_rate_725 = (uint32_t) D.45012_724;
  # DEBUG near_rate => near_rate_725
  near_match_726 = near_matches[j_133].imp;
  # DEBUG near_match => near_match_726
  near_map_727 = near_matches[j_133].map;
  # DEBUG near_map => near_map_727
  D.45013_728 = near_match_726->iananame;
  if (near_rate_725 == 0)
    goto <bb 287>;
  else
    goto <bb 288>;

<bb 287>:
  iftmp.95_729 = near_match_726->samples_per_second;
  goto <bb 289>;

<bb 288>:
  iftmp.95_730 = near_rate_725;

<bb 289>:
  # iftmp.95_145 = PHI <iftmp.95_729(287), iftmp.95_730(288)>
  switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, iftmp.95_145, codec_ms_93);
  prefs[0] = &tmp;
  num_731 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);
  # DEBUG num => num_731
  if (num_731 != 0)
    goto <bb 290>;
  else
    goto <bb 291>;

<bb 290>:
  timp_732 = search[0];
  # DEBUG timp => timp_732
  goto <bb 292>;

<bb 291>:
  timp_733 = near_match_726;
  # DEBUG timp => timp_733

<bb 292>:
  # timp_134 = PHI <timp_732(290), timp_733(291)>
  # DEBUG timp => timp_134
  if (maxptime_39 == 0)
    goto <bb 294>;
  else
    goto <bb 293>;

<bb 293>:
  D.45024_734 = timp_134->microseconds_per_packet;
  D.45025_735 = D.45024_734 / 1000;
  if (D.45025_735 <= maxptime_39)
    goto <bb 294>;
  else
    goto <bb 295>;

<bb 294>:
  D.45026_737 = timp_134->iananame;
  D.45024_738 = timp_134->microseconds_per_packet;
  D.45025_739 = D.45024_738 / 1000;
  D.45027_740 = timp_134->actual_samples_per_second;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
  match_741 = 1;
  # DEBUG match => match_741
  D.45028_742 = near_matches[j_133].codec_idx;
  matches[m_idx_106].codec_idx = D.45028_742;
  near_rate.96_743 = (int) near_rate_725;
  matches[m_idx_106].rate = near_rate.96_743;
  matches[m_idx_106].imp = timp_134;
  matches[m_idx_106].map = near_map_727;
  m_idx_744 = m_idx_106 + 1;
  # DEBUG m_idx => m_idx_744
  goto <bb 297>;

<bb 295>:
  j_736 = j_133 + 1;
  # DEBUG j => j_736

<bb 296>:
  # j_133 = PHI <j_722(285), j_736(295)>
  # DEBUG j => j_133
  if (j_133 < nm_idx_120)
    goto <bb 286>;
  else
    goto <bb 297>;

<bb 297>:
  # match_11 = PHI <match_10(284), match_741(294), match_10(296)>
  # m_idx_107 = PHI <m_idx_106(284), m_idx_744(294), m_idx_106(296)>
  # DEBUG m_idx => m_idx_107
  # DEBUG match => match_11
  if (m_idx_107 != 0)
    goto <bb 298>;
  else
    goto <bb 323>;

<bb 298>:
  if (greedy_47 != 0)
    goto <bb 299>;
  else
    goto <bb 300>;

<bb 299>:
  greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);

<bb 300>:
  match_745 = 1;
  # DEBUG match => match_745
  a_engine_188->codec_negotiated = 1;
  smh_186->num_negotiated_codecs = 0;
  j_746 = 0;
  # DEBUG j => j_746
  goto <bb 322>;

<bb 301>:
  D.45034_747 = matches[j_135].map;
  D.45035_748 = D.45034_747->rm_encoding;
  D.45034_749 = matches[j_135].map;
  D.45036_750 = D.45034_749->rm_fmtp;
  D.45034_751 = matches[j_135].map;
  D.45037_752 = D.45034_751->rm_pt;
  D.45038_753 = (uint32_t) D.45037_752;
  D.45039_754 = matches[j_135].imp;
  D.45040_755 = D.45039_754->samples_per_second;
  D.45039_756 = matches[j_135].imp;
  D.45041_757 = D.45039_756->microseconds_per_packet;
  D.45042_758 = D.45041_757 / 1000;
  D.45043_759 = (uint32_t) D.45042_758;
  pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
  # DEBUG pmap => pmap_760
  mimp_761 = matches[j_135].imp;
  # DEBUG mimp => mimp_761
  mmap_762 = matches[j_135].map;
  # DEBUG mmap => mmap_762
  if (j_135 == 0)
    goto <bb 302>;
  else
    goto <bb 304>;

<bb 302>:
  a_engine_188->cur_payload_map = pmap_760;
  D.44750_763 = a_engine_188->cur_payload_map;
  D.44750_763->current = 1;
  D.44605_764 = a_engine_188->rtp_session;
  if (D.44605_764 != 0B)
    goto <bb 303>;
  else
    goto <bb 304>;

<bb 303>:
  D.44605_765 = a_engine_188->rtp_session;
  D.45048_766 = pmap_760->pt;
  switch_rtp_set_default_payload (D.44605_765, D.45048_766);

<bb 304>:
  D.45049_767 = mmap_762->rm_encoding;
  D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
  pmap_760->rm_encoding = D.45050_768;
  D.45051_769 = mimp_761->iananame;
  D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
  pmap_760->iananame = D.45052_770;
  D.45053_771 = mmap_762->rm_pt;
  D.45054_772 = (unsigned char) D.45053_771;
  pmap_760->recv_pt = D.45054_772;
  D.45055_773 = mimp_761->samples_per_second;
  pmap_760->rm_rate = D.45055_773;
  D.45055_774 = mimp_761->samples_per_second;
  pmap_760->adv_rm_rate = D.45055_774;
  D.45051_775 = mimp_761->iananame;
  D.45056_776 = strcasecmp (D.45051_775, "g722");
  if (D.45056_776 != 0)
    goto <bb 305>;
  else
    goto <bb 306>;

<bb 305>:
  D.45059_777 = mimp_761->actual_samples_per_second;
  pmap_760->rm_rate = D.45059_777;

<bb 306>:
  D.45060_778 = mimp_761->microseconds_per_packet;
  D.45061_779 = D.45060_778 / 1000;
  D.45062_780 = (uint32_t) D.45061_779;
  pmap_760->codec_ms = D.45062_780;
  D.45063_781 = mimp_761->bits_per_second;
  D.45064_782 = (uint32_t) D.45063_781;
  pmap_760->bitrate = D.45064_782;
  D.45066_783 = mmap_762->rm_params;
  if (D.45066_783 != 0B)
    goto <bb 307>;
  else
    goto <bb 308>;

<bb 307>:
  D.45066_784 = mmap_762->rm_params;
  # DEBUG __nptr => D.45066_784
  D.47923_1485 = strtol (D.45066_784, 0B, 10);
  D.47922_1538 = D.47923_1485;
  iftmp.97_785 = D.47922_1538;
  goto <bb 309>;

<bb 308>:
  iftmp.97_786 = 1;

<bb 309>:
  # iftmp.97_146 = PHI <iftmp.97_785(307), iftmp.97_786(308)>
  pmap_760->channels = iftmp.97_146;
  D.45049_787 = mmap_762->rm_encoding;
  D.45070_788 = strcasecmp (D.45049_787, "opus");
  if (D.45070_788 == 0)
    goto <bb 310>;
  else
    goto <bb 320>;

<bb 310>:
  D.45073_789 = pmap_760->channels;
  if (D.45073_789 == 1)
    goto <bb 311>;
  else
    goto <bb 312>;

<bb 311>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
  pmap_760->adv_channels = 1;
  goto <bb 313>;

<bb 312>:
  pmap_760->adv_channels = 2;

<bb 313>:
  D.45079_790 = mmap_762->rm_fmtp;
  # DEBUG s => D.45079_790
  if (D.45079_790 == 0B)
    goto <bb 316>;
  else
    goto <bb 314>;

<bb 314>:
  D.47926_1486 = *D.45079_790;
  if (D.47926_1486 == 0)
    goto <bb 316>;
  else
    goto <bb 315>;

<bb 315>:

<bb 316>:
  # D.47927_1487 = PHI <1(313), 1(314), 0(315)>
  D.47925_1539 = D.47927_1487;
  D.45080_791 = D.47925_1539;
  if (D.45080_791 == 0)
    goto <bb 317>;
  else
    goto <bb 319>;

<bb 317>:
  D.45079_792 = mmap_762->rm_fmtp;
  D.45082_793 = switch_stristr ("stereo=1", D.45079_792);
  if (D.45082_793 != 0B)
    goto <bb 318>;
  else
    goto <bb 319>;

<bb 318>:
  pmap_760->channels = 2;
  goto <bb 321>;

<bb 319>:
  pmap_760->channels = 1;
  goto <bb 321>;

<bb 320>:
  D.45073_794 = pmap_760->channels;
  pmap_760->adv_channels = D.45073_794;

<bb 321>:
  D.45085_795 = connection_124->c_address;
  D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
  pmap_760->remote_sdp_ip = D.45086_796;
  D.44697_797 = m_28->m_port;
  D.45087_798 = (short unsigned int) D.44697_797;
  pmap_760->remote_sdp_port = D.45087_798;
  D.45079_799 = mmap_762->rm_fmtp;
  D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
  pmap_760->rm_fmtp = D.45088_800;
  D.45053_801 = mmap_762->rm_pt;
  D.45054_802 = (unsigned char) D.45053_801;
  pmap_760->agreed_pt = D.45054_802;
  D.44655_803 = smh_186->num_negotiated_codecs;
  smh_186->negotiated_codecs[D.44655_803] = mimp_761;
  D.45089_804 = D.44655_803 + 1;
  smh_186->num_negotiated_codecs = D.45089_804;
  D.45053_805 = mmap_762->rm_pt;
  D.45054_806 = (unsigned char) D.45053_805;
  pmap_760->recv_pt = D.45054_806;
  j_807 = j_135 + 1;
  # DEBUG j => j_807

<bb 322>:
  # j_135 = PHI <j_746(300), j_807(321)>
  # DEBUG j => j_135
  if (j_135 < m_idx_107)
    goto <bb 301>;
  else
    goto <bb 323>;

<bb 323>:
  # match_12 = PHI <match_11(297), match_745(322)>
  # DEBUG match => match_12
  if (match_12 != 0)
    goto <bb 324>;
  else
    goto <bb 335>;

<bb 324>:
  D.44750_808 = a_engine_188->cur_payload_map;
  D.44762_809 = D.44750_808->remote_sdp_port;
  D.44767_810 = (int) D.44762_809;
  switch_snprintf (&tmp, 50, "%d", D.44767_810);
  D.44530_811 = session_161(D)->channel;
  D.44750_812 = a_engine_188->cur_payload_map;
  D.44760_813 = D.44750_812->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);
  D.44530_814 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);
  D.44750_815 = a_engine_188->cur_payload_map;
  D.45092_816 = D.44750_815->recv_pt;
  D.45093_817 = (int) D.45092_816;
  switch_snprintf (&tmp, 50, "%d", D.45093_817);
  D.44530_818 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);
  D.45094_819 = &a_engine_188->read_codec;
  # DEBUG codec => D.45094_819
  if (D.45094_819 != 0B)
    goto <bb 325>;
  else
    goto <bb 329>;

<bb 325>:
  D.47934_1488 = D.45094_819->flags;
  D.47933_1489 = D.47934_1488 & 256;
  if (D.47933_1489 != 0)
    goto <bb 326>;
  else
    goto <bb 329>;

<bb 326>:
  D.47932_1490 = D.45094_819->mutex;
  if (D.47932_1490 != 0B)
    goto <bb 327>;
  else
    goto <bb 329>;

<bb 327>:
  D.47931_1491 = D.45094_819->codec_interface;
  if (D.47931_1491 != 0B)
    goto <bb 328>;
  else
    goto <bb 329>;

<bb 328>:
  D.47930_1492 = D.45094_819->implementation;
  if (D.47930_1492 != 0B)
    goto <bb 330>;
  else
    goto <bb 329>;

<bb 329>:

<bb 330>:
  # iftmp.104_1493 = PHI <1(328), 0(329)>
  D.47936_1494 = (switch_bool_t) iftmp.104_1493;
  D.47929_1540 = D.47936_1494;
  D.45095_820 = D.47929_1540;
  if (D.45095_820 != 0)
    goto <bb 331>;
  else
    goto <bb 332>;

<bb 331>:
  a_engine_188->reset_codec = 1;

<bb 332>:
  D.44471_821 = smh_186->mparams;
  D.45098_822 = D.44471_821->codec_flags;
  D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
  if (D.45099_823 == 0)
    goto <bb 333>;
  else
    goto <bb 334>;

<bb 333>:
  got_audio_824 = 1;
  # DEBUG got_audio => got_audio_824
  check_ice (smh_186, 0, sdp_198, m_28);
  goto <bb 335>;

<bb 334>:
  match_825 = 0;
  # DEBUG match => match_825

<bb 335>:
  # match_13 = PHI <match_12(323), match_12(333), match_825(334)>
  # got_audio_65 = PHI <got_audio_67(323), got_audio_824(333), got_audio_67(334)>
  # DEBUG got_audio => got_audio_65
  # DEBUG match => match_13
  if (best_te_20 == 0)
    goto <bb 336>;
  else
    goto <bb 339>;

<bb 336>:
  D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);
  if (D.45107_826 != 0)
    goto <bb 338>;
  else
    goto <bb 337>;

<bb 337>:
  D.44530_827 = session_161(D)->channel;
  D.45109_828 = switch_channel_test_flag (D.44530_827, 93);
  if (D.45109_828 != 0)
    goto <bb 338>;
  else
    goto <bb 339>;

<bb 338>:
  D.44471_829 = smh_186->mparams;
  D.45110_830 = D.44471_829->te;
  D.45111_831 = (int) D.45110_830;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);
  D.44471_832 = smh_186->mparams;
  best_te_833 = D.44471_832->te;
  # DEBUG best_te => best_te_833

<bb 339>:
  # best_te_21 = PHI <best_te_20(335), best_te_20(337), best_te_833(338)>
  # DEBUG best_te => best_te_21
  if (best_te_21 != 0)
    goto <bb 340>;
  else
    goto <bb 345>;

<bb 340>:
  D.45114_834 = switch_channel_direction (channel_162);
  if (D.45114_834 == 1)
    goto <bb 341>;
  else
    goto <bb 343>;

<bb 341>:
  D.44471_835 = smh_186->mparams;
  D.44471_835->te = best_te_21;
  te_836 = D.44471_835->te;
  # DEBUG te => te_836
  D.44857_837 = (int) best_te_21;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);
  D.44530_838 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);
  D.44471_839 = smh_186->mparams;
  D.44471_839->dtmf_type = 0;
  D.44605_840 = a_engine_188->rtp_session;
  if (D.44605_840 != 0B)
    goto <bb 342>;
  else
    goto <bb 449>;

<bb 342>:
  D.44605_841 = a_engine_188->rtp_session;
  switch_rtp_set_telephony_event (D.44605_841, best_te_21);
  D.44530_842 = session_161(D)->channel;
  D.44857_843 = (int) best_te_21;
  switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_843);
  goto <bb 449>;

<bb 343>:
  D.44471_844 = smh_186->mparams;
  D.44471_845 = smh_186->mparams;
  D.44471_845->te = best_te_21;
  D.45110_846 = D.44471_845->te;
  D.44471_845->recv_te = D.45110_846;
  te_847 = D.44471_845->recv_te;
  # DEBUG te => te_847
  D.45120_848 = (int) te_847;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);
  D.44530_849 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);
  D.44471_850 = smh_186->mparams;
  D.44471_850->dtmf_type = 0;
  D.44605_851 = a_engine_188->rtp_session;
  if (D.44605_851 != 0B)
    goto <bb 344>;
  else
    goto <bb 449>;

<bb 344>:
  D.44605_852 = a_engine_188->rtp_session;
  switch_rtp_set_telephony_event (D.44605_852, te_847);
  D.44530_853 = session_161(D)->channel;
  D.45120_854 = (int) te_847;
  switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_854);
  D.44605_855 = a_engine_188->rtp_session;
  switch_rtp_set_telephony_recv_event (D.44605_855, te_847);
  D.44530_856 = session_161(D)->channel;
  D.45120_857 = (int) te_847;
  switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_857);
  goto <bb 449>;

<bb 345>:
  D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
  D.45125_859 = switch_false (D.45124_858);
  if (D.45125_859 == 0)
    goto <bb 346>;
  else
    goto <bb 347>;

<bb 346>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
  D.44530_860 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);
  D.44471_861 = smh_186->mparams;
  D.44471_861->dtmf_type = 1;
  D.44471_862 = smh_186->mparams;
  D.44471_863 = smh_186->mparams;
  D.44471_863->te = 0;
  D.45110_864 = D.44471_863->te;
  D.44471_863->recv_te = D.45110_864;
  te_865 = D.44471_863->recv_te;
  # DEBUG te => te_865
  goto <bb 449>;

<bb 347>:
  D.44530_866 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);
  D.44471_867 = smh_186->mparams;
  D.44471_867->dtmf_type = 2;
  D.44471_868 = smh_186->mparams;
  D.44471_869 = smh_186->mparams;
  D.44471_869->te = 0;
  D.45110_870 = D.44471_869->te;
  D.44471_869->recv_te = D.45110_870;
  te_871 = D.44471_869->recv_te;
  # DEBUG te => te_871
  goto <bb 449>;

<bb 348>:
  D.44681_872 = m_28->m_type;
  if (D.44681_872 == 3)
    goto <bb 349>;
  else
    goto <bb 449>;

<bb 349>:
  D.44697_873 = m_28->m_port;
  if (D.44697_873 != 0)
    goto <bb 350>;
  else
    goto <bb 449>;

<bb 350>:
  mimp_874 = 0B;
  # DEBUG mimp => mimp_874
  vmatch_875 = 0;
  # DEBUG vmatch => vmatch_875
  nm_idx_876 = 0;
  # DEBUG nm_idx => nm_idx_876
  m_idx_877 = 0;
  # DEBUG m_idx => m_idx_877
  memset (&matches, 0, 480);
  memset (&near_matches, 0, 480);
  D.44530_878 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);
  connection_879 = sdp_198->sdp_connection;
  # DEBUG connection => connection_879
  D.44546_880 = m_28->m_connections;
  if (D.44546_880 != 0B)
    goto <bb 351>;
  else
    goto <bb 352>;

<bb 351>:
  connection_881 = m_28->m_connections;
  # DEBUG connection => connection_881

<bb 352>:
  # connection_125 = PHI <connection_879(350), connection_881(351)>
  # DEBUG connection => connection_125
  if (connection_125 == 0B)
    goto <bb 353>;
  else
    goto <bb 354>;

<bb 353>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  match_882 = 0;
  # DEBUG match => match_882
  goto <bb 451> (done);

<bb 354>:
  map_883 = m_28->m_rtpmaps;
  # DEBUG map => map_883
  goto <bb 425>;

<bb 355>:
  D.45137_884 = switch_rtp_has_dtls ();
  if (D.45137_884 != 0)
    goto <bb 356>;
  else
    goto <bb 366>;

<bb 356>:
  D.45140_885 = dtls_ok (session_161(D));
  if (D.45140_885 != 0)
    goto <bb 357>;
  else
    goto <bb 366>;

<bb 357>:
  attr_886 = m_28->m_attributes;
  # DEBUG attr => attr_886
  goto <bb 365>;

<bb 358>:
  D.44590_887 = attr_32->a_name;
  D.45143_888 = strcasecmp (D.44590_887, "fingerprint");
  if (D.45143_888 == 0)
    goto <bb 359>;
  else
    goto <bb 364>;

<bb 359>:
  D.44619_889 = attr_32->a_value;
  # DEBUG s => D.44619_889
  if (D.44619_889 == 0B)
    goto <bb 362>;
  else
    goto <bb 360>;

<bb 360>:
  D.47939_1495 = *D.44619_889;
  if (D.47939_1495 == 0)
    goto <bb 362>;
  else
    goto <bb 361>;

<bb 361>:

<bb 362>:
  # D.47940_1496 = PHI <1(359), 1(360), 0(361)>
  D.47938_1541 = D.47940_1496;
  D.45146_890 = D.47938_1541;
  if (D.45146_890 == 0)
    goto <bb 363>;
  else
    goto <bb 364>;

<bb 363>:
  got_video_crypto_891 = 1;
  # DEBUG got_video_crypto => got_video_crypto_891

<bb 364>:
  # got_video_crypto_57 = PHI <got_video_crypto_58(358), got_video_crypto_58(362), got_video_crypto_891(363)>
  # DEBUG got_video_crypto => got_video_crypto_57
  attr_892 = attr_32->a_next;
  # DEBUG attr => attr_892

<bb 365>:
  # attr_32 = PHI <attr_886(357), attr_892(364)>
  # got_video_crypto_58 = PHI <got_video_crypto_62(357), got_video_crypto_57(364)>
  # DEBUG got_video_crypto => got_video_crypto_58
  # DEBUG attr => attr_32
  if (attr_32 != 0B)
    goto <bb 358>;
  else
    goto <bb 366>;

<bb 366>:
  # got_video_crypto_59 = PHI <got_video_crypto_62(355), got_video_crypto_62(356), got_video_crypto_58(365)>
  # DEBUG got_video_crypto => got_video_crypto_59
  attr_893 = m_28->m_attributes;
  # DEBUG attr => attr_893
  goto <bb 401>;

<bb 367>:
  D.44590_894 = attr_33->a_name;
  D.45151_895 = strcasecmp (D.44590_894, "framerate");
  if (D.45151_895 == 0)
    goto <bb 368>;
  else
    goto <bb 369>;

<bb 368>:
  D.44619_896 = attr_33->a_value;
  if (D.44619_896 != 0B)
    goto <bb 400>;
  else
    goto <bb 369>;

<bb 369>:
  D.44590_897 = attr_33->a_name;
  D.45154_898 = strcasecmp (D.44590_897, "rtcp-fb");
  if (D.45154_898 == 0)
    goto <bb 370>;
  else
    goto <bb 377>;

<bb 370>:
  D.44619_899 = attr_33->a_value;
  # DEBUG s => D.44619_899
  if (D.44619_899 == 0B)
    goto <bb 373>;
  else
    goto <bb 371>;

<bb 371>:
  D.47943_1497 = *D.44619_899;
  if (D.47943_1497 == 0)
    goto <bb 373>;
  else
    goto <bb 372>;

<bb 372>:

<bb 373>:
  # D.47944_1498 = PHI <1(370), 1(371), 0(372)>
  D.47942_1542 = D.47944_1498;
  D.45157_900 = D.47942_1542;
  if (D.45157_900 == 0)
    goto <bb 374>;
  else
    goto <bb 400>;

<bb 374>:
  D.44619_901 = attr_33->a_value;
  D.45160_902 = switch_stristr ("fir", D.44619_901);
  if (D.45160_902 != 0B)
    goto <bb 375>;
  else
    goto <bb 376>;

<bb 375>:
  D.45163_903 = v_engine_189->fir;
  D.45164_904 = D.45163_903 + 1;
  v_engine_189->fir = D.45164_904;

<bb 376>:
  D.44471_905 = smh_186->mparams;
  D.44471_905->rtcp_video_interval_msec = "10000";
  goto <bb 400>;

<bb 377>:
  D.44590_906 = attr_33->a_name;
  D.45168_907 = strcasecmp (D.44590_906, "rtcp");
  if (D.45168_907 == 0)
    goto <bb 378>;
  else
    goto <bb 389>;

<bb 378>:
  D.44619_908 = attr_33->a_value;
  if (D.44619_908 != 0B)
    goto <bb 379>;
  else
    goto <bb 389>;

<bb 379>:
  __s2_len_909 = 1;
  # DEBUG __s2_len => __s2_len_909
  if (__s2_len_909 <= 3)
    goto <bb 380>;
  else
    goto <bb 385>;

<bb 380>:
  __s1_910 = attr_33->a_value;
  # DEBUG __s1 => __s1_910
  D.45174_911 = *__s1_910;
  D.45175_912 = (int) D.45174_911;
  D.45176_913 = "1";
  D.45177_914 = MEM[(const unsigned char *)D.45176_913];
  D.45178_915 = (int) D.45177_914;
  __result_916 = D.45175_912 - D.45178_915;
  # DEBUG __result => __result_916
  D.45179_917 = __s2_len_909 != 0;
  D.45180_918 = __result_916 == 0;
  D.45181_919 = D.45179_917 && D.45180_918;
  if (D.45181_919 != 0)
    goto <bb 381>;
  else
    goto <bb 384>;

<bb 381>:
  D.45184_920 = __s1_910 + 1;
  D.45185_921 = *D.45184_920;
  D.45186_922 = (int) D.45185_921;
  D.45187_923 = &"1"[1];
  D.45188_924 = MEM[(const unsigned char *)D.45187_923];
  D.45189_925 = (int) D.45188_924;
  __result_926 = D.45186_922 - D.45189_925;
  # DEBUG __result => __result_926
  D.45190_927 = __s2_len_909 > 1;
  D.45180_928 = __result_926 == 0;
  D.45191_929 = D.45190_927 && D.45180_928;
  if (D.45191_929 != 0)
    goto <bb 382>;
  else
    goto <bb 384>;

<bb 382>:
  D.45194_930 = __s1_910 + 2;
  D.45195_931 = *D.45194_930;
  D.45196_932 = (int) D.45195_931;
  D.45197_933 = &"1"[2];
  D.45198_934 = MEM[(const unsigned char *)D.45197_933];
  D.45199_935 = (int) D.45198_934;
  __result_936 = D.45196_932 - D.45199_935;
  # DEBUG __result => __result_936
  D.45200_937 = __s2_len_909 > 2;
  D.45180_938 = __result_936 == 0;
  D.45201_939 = D.45200_937 && D.45180_938;
  if (D.45201_939 != 0)
    goto <bb 383>;
  else
    goto <bb 384>;

<bb 383>:
  D.45204_940 = __s1_910 + 3;
  D.45205_941 = *D.45204_940;
  D.45206_942 = (int) D.45205_941;
  D.45207_943 = &"1"[3];
  D.45208_944 = MEM[(const unsigned char *)D.45207_943];
  D.45209_945 = (int) D.45208_944;
  __result_946 = D.45206_942 - D.45209_945;
  # DEBUG __result => __result_946

<bb 384>:
  # __result_140 = PHI <__result_916(380), __result_926(381), __result_936(382), __result_946(383)>
  # DEBUG __result => __result_140
  D.39088_947 = __result_140;
  iftmp.98_948 = D.39088_947;
  goto <bb 386>;

<bb 385>:
  D.44619_949 = attr_33->a_value;
  iftmp.98_950 = __builtin_strcmp (D.44619_949, "1");

<bb 386>:
  # iftmp.98_147 = PHI <iftmp.98_948(384), iftmp.98_950(385)>
  D.39089_951 = iftmp.98_147;
  if (D.39089_951 == 0)
    goto <bb 387>;
  else
    goto <bb 389>;

<bb 387>:
  D.44530_952 = session_161(D)->channel;
  D.44619_953 = attr_33->a_value;
  switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_953, 1);
  D.44619_954 = attr_33->a_value;
  # DEBUG __nptr => D.44619_954
  D.47947_1499 = strtol (D.44619_954, 0B, 10);
  D.47946_1544 = D.47947_1499;
  D.45212_955 = D.47946_1544;
  D.45213_956 = (short unsigned int) D.45212_955;
  v_engine_189->remote_rtcp_port = D.45213_956;
  D.44471_957 = smh_186->mparams;
  D.45214_958 = D.44471_957->rtcp_video_interval_msec;
  if (D.45214_958 == 0B)
    goto <bb 388>;
  else
    goto <bb 400>;

<bb 388>:
  D.44471_959 = smh_186->mparams;
  D.44471_959->rtcp_video_interval_msec = "5000";
  goto <bb 400>;

<bb 389>:
  if (got_video_crypto_61 == 0)
    goto <bb 390>;
  else
    goto <bb 400>;

<bb 390>:
  D.44590_960 = attr_33->a_name;
  D.45219_961 = strcasecmp (D.44590_960, "crypto");
  if (D.45219_961 == 0)
    goto <bb 391>;
  else
    goto <bb 400>;

<bb 391>:
  D.44619_962 = attr_33->a_value;
  # DEBUG s => D.44619_962
  if (D.44619_962 == 0B)
    goto <bb 394>;
  else
    goto <bb 392>;

<bb 392>:
  D.47950_1500 = *D.44619_962;
  if (D.47950_1500 == 0)
    goto <bb 394>;
  else
    goto <bb 393>;

<bb 393>:

<bb 394>:
  # D.47951_1501 = PHI <1(391), 1(392), 0(393)>
  D.47949_1545 = D.47951_1501;
  D.45222_963 = D.47949_1545;
  if (D.45222_963 == 0)
    goto <bb 395>;
  else
    goto <bb 400>;

<bb 395>:
  D.44471_964 = smh_186->mparams;
  D.44821_965 = D.44471_964->ndlb;
  D.44822_966 = D.44821_965 & 4;
  if (D.44822_966 == 0)
    goto <bb 396>;
  else
    goto <bb 399>;

<bb 396>:
  D.44530_967 = session_161(D)->channel;
  D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);
  D.45228_969 = switch_true (D.45227_968);
  if (D.45228_969 == 0)
    goto <bb 397>;
  else
    goto <bb 399>;

<bb 397>:
  D.44666_970 = m_28->m_proto;
  D.44829_971 = D.44666_970 != 257;
  D.44830_972 = got_webrtc_78 == 0;
  D.44831_973 = D.44829_971 && D.44830_972;
  if (D.44831_973 != 0)
    goto <bb 398>;
  else
    goto <bb 399>;

<bb 398>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  match_974 = 0;
  # DEBUG match => match_974
  goto <bb 451> (done);

<bb 399>:
  crypto_975 = attr_33->a_value;
  # DEBUG crypto => crypto_975
  # DEBUG __nptr => crypto_975
  D.47954_1502 = strtol (crypto_975, 0B, 10);
  D.47953_1547 = D.47954_1502;
  crypto_tag_976 = D.47953_1547;
  # DEBUG crypto_tag => NULL
  got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_976, sdp_type_546(D));
  # DEBUG got_video_crypto => got_video_crypto_977

<bb 400>:
  # got_video_crypto_60 = PHI <got_video_crypto_61(368), got_video_crypto_61(376), got_video_crypto_61(388), got_video_crypto_61(389), got_video_crypto_61(390), got_video_crypto_61(394), got_video_crypto_977(399), got_video_crypto_61(373), got_video_crypto_61(387)>
  # DEBUG got_video_crypto => got_video_crypto_60
  attr_978 = attr_33->a_next;
  # DEBUG attr => attr_978

<bb 401>:
  # attr_33 = PHI <attr_893(366), attr_978(400)>
  # got_video_crypto_61 = PHI <got_video_crypto_59(366), got_video_crypto_60(400)>
  # DEBUG got_video_crypto => got_video_crypto_61
  # DEBUG attr => attr_33
  if (attr_33 != 0B)
    goto <bb 367>;
  else
    goto <bb 402>;

<bb 402>:
  rm_encoding_979 = map_136->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_979
  if (rm_encoding_979 == 0B)
    goto <bb 403>;
  else
    goto <bb 404>;

<bb 403>:
  rm_encoding_980 = "";
  # DEBUG rm_encoding => rm_encoding_980

<bb 404>:
  # rm_encoding_137 = PHI <rm_encoding_979(402), rm_encoding_980(403)>
  # DEBUG rm_encoding => rm_encoding_137
  i_981 = 0;
  # DEBUG i => i_981
  goto <bb 423>;

<bb 405>:
  i.99_982 = (unsigned int) i_139;
  D.45236_983 = i.99_982 * 4;
  D.45237_984 = codec_array_84 + D.45236_983;
  imp_985 = *D.45237_984;
  # DEBUG imp => imp_985
  D.45238_986 = imp_985->codec_type;
  if (D.45238_986 != 1)
    goto <bb 406>;
  else
    goto <bb 407>;

<bb 406>:
  // predicted unlikely by continue predictor.
  goto <bb 422>;

<bb 407>:
  D.44530_987 = session_161(D)->channel;
  D.45241_988 = switch_channel_direction (D.44530_987);
  if (D.45241_988 == 0)
    goto <bb 408>;
  else
    goto <bb 410>;

<bb 408>:
  D.44530_989 = session_161(D)->channel;
  D.45244_990 = switch_channel_test_flag (D.44530_989, 114);
  if (D.45244_990 != 0)
    goto <bb 409>;
  else
    goto <bb 410>;

<bb 409>:
  // predicted unlikely by continue predictor.
  goto <bb 422>;

<bb 410>:
  D.45247_991 = map_136->rm_pt;
  D.45248_992 = (int) D.45247_991;
  D.45249_993 = imp_985->iananame;
  D.45250_994 = imp_985->ianacode;
  D.45251_995 = (int) D.45250_994;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
  D.45255_996 = map_136->rm_encoding;
  # DEBUG s => D.45255_996
  if (D.45255_996 == 0B)
    goto <bb 413>;
  else
    goto <bb 411>;

<bb 411>:
  D.47957_1503 = *D.45255_996;
  if (D.47957_1503 == 0)
    goto <bb 413>;
  else
    goto <bb 412>;

<bb 412>:

<bb 413>:
  # D.47958_1504 = PHI <1(410), 1(411), 0(412)>
  D.47956_1548 = D.47958_1504;
  D.45256_997 = D.47956_1548;
  if (D.45256_997 != 0)
    goto <bb 415>;
  else
    goto <bb 414>;

<bb 414>:
  D.44471_998 = smh_186->mparams;
  D.44821_999 = D.44471_998->ndlb;
  D.44936_1000 = (int) D.44821_999;
  D.44937_1001 = D.44936_1000 & 1;
  D.44938_1002 = (_Bool) D.44937_1001;
  if (D.44938_1002 != 0)
    goto <bb 415>;
  else
    goto <bb 417>;

<bb 415>:
  D.45247_1003 = map_136->rm_pt;
  D.45248_1004 = (int) D.45247_1003;
  if (D.45248_1004 <= 95)
    goto <bb 416>;
  else
    goto <bb 417>;

<bb 416>:
  D.45247_1005 = map_136->rm_pt;
  D.45248_1006 = (int) D.45247_1005;
  D.45250_1007 = imp_985->ianacode;
  D.45251_1008 = (int) D.45250_1007;
  vmatch_1009 = D.45248_1006 == D.45251_1008;
  # DEBUG vmatch => vmatch_1009
  goto <bb 418>;

<bb 417>:
  D.45249_1010 = imp_985->iananame;
  D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
  vmatch_1012 = D.45259_1011 == 0;
  # DEBUG vmatch => vmatch_1012

<bb 418>:
  # vmatch_138 = PHI <vmatch_1009(416), vmatch_1012(417)>
  # DEBUG vmatch => vmatch_138
  if (vmatch_138 != 0)
    goto <bb 419>;
  else
    goto <bb 421>;

<bb 419>:
  D.45262_1013 = map_136->rm_rate;
  D.45263_1014 = imp_985->samples_per_second;
  if (D.45262_1013 == D.45263_1014)
    goto <bb 420>;
  else
    goto <bb 421>;

<bb 420>:
  matches[m_idx_110].imp = imp_985;
  matches[m_idx_110].map = map_136;
  D.45249_1015 = imp_985->iananame;
  D.45250_1016 = imp_985->ianacode;
  D.45251_1017 = (int) D.45250_1016;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
  m_idx_1018 = m_idx_110 + 1;
  # DEBUG m_idx => m_idx_1018

<bb 421>:
  # m_idx_108 = PHI <m_idx_110(418), m_idx_110(419), m_idx_1018(420)>
  # DEBUG m_idx => m_idx_108
  vmatch_1019 = 0;
  # DEBUG vmatch => vmatch_1019

<bb 422>:
  # m_idx_109 = PHI <m_idx_110(406), m_idx_110(409), m_idx_108(421)>
  # DEBUG m_idx => m_idx_109
  i_1020 = i_139 + 1;
  # DEBUG i => i_1020

<bb 423>:
  # m_idx_110 = PHI <m_idx_111(404), m_idx_109(422)>
  # i_139 = PHI <i_981(404), i_1020(422)>
  # DEBUG i => i_139
  # DEBUG m_idx => m_idx_110
  if (i_139 < total_codecs_85)
    goto <bb 405>;
  else
    goto <bb 424>;

<bb 424>:
  map_1021 = map_136->rm_next;
  # DEBUG map => map_1021

<bb 425>:
  # got_video_crypto_62 = PHI <got_video_crypto_64(354), got_video_crypto_61(424)>
  # m_idx_111 = PHI <m_idx_877(354), m_idx_110(424)>
  # map_136 = PHI <map_883(354), map_1021(424)>
  # DEBUG map => map_136
  # DEBUG m_idx => m_idx_111
  # DEBUG got_video_crypto => got_video_crypto_62
  if (map_136 != 0B)
    goto <bb 355>;
  else
    goto <bb 426>;

<bb 426>:
  D.45001_1022 = smh_186->crypto_mode;
  D.45002_1023 = D.45001_1022 == 1;
  D.45266_1024 = got_video_crypto_62 <= 0;
  D.45267_1025 = D.45002_1023 && D.45266_1024;
  if (D.45267_1025 != 0)
    goto <bb 427>;
  else
    goto <bb 428>;

<bb 427>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
  vmatch_1026 = 0;
  # DEBUG vmatch => vmatch_1026
  m_idx_1027 = 0;
  # DEBUG m_idx => m_idx_1027

<bb 428>:
  # m_idx_112 = PHI <m_idx_111(426), m_idx_1027(427)>
  # DEBUG m_idx => m_idx_112
  if (m_idx_112 != 0)
    goto <bb 429>;
  else
    goto <bb 449>;

<bb 429>:
  j_1028 = 0;
  # DEBUG j => j_1028
  if (greedy_47 != 0)
    goto <bb 430>;
  else
    goto <bb 431>;

<bb 430>:
  greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);

<bb 431>:
  vmatch_1029 = 1;
  # DEBUG vmatch => vmatch_1029
  v_engine_189->codec_negotiated = 1;
  j_1030 = 0;
  # DEBUG j => j_1030
  goto <bb 436>;

<bb 432>:
  D.45274_1031 = matches[j_141].map;
  D.45275_1032 = D.45274_1031->rm_encoding;
  D.45274_1033 = matches[j_141].map;
  D.45276_1034 = D.45274_1033->rm_fmtp;
  D.45274_1035 = matches[j_141].map;
  D.45277_1036 = D.45274_1035->rm_pt;
  D.45278_1037 = (uint32_t) D.45277_1036;
  D.45279_1038 = matches[j_141].imp;
  D.45280_1039 = D.45279_1038->samples_per_second;
  D.45279_1040 = matches[j_141].imp;
  D.45281_1041 = D.45279_1040->microseconds_per_packet;
  D.45282_1042 = D.45281_1041 / 1000;
  D.45283_1043 = (uint32_t) D.45282_1042;
  pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
  # DEBUG pmap => pmap_1044
  if (j_141 == 0)
    goto <bb 433>;
  else
    goto <bb 435>;

<bb 433>:
  v_engine_189->cur_payload_map = pmap_1044;
  D.45286_1045 = v_engine_189->cur_payload_map;
  D.45286_1045->current = 1;
  D.45287_1046 = v_engine_189->rtp_session;
  if (D.45287_1046 != 0B)
    goto <bb 434>;
  else
    goto <bb 435>;

<bb 434>:
  D.45287_1047 = v_engine_189->rtp_session;
  D.45290_1048 = pmap_1044->pt;
  switch_rtp_set_default_payload (D.45287_1047, D.45290_1048);

<bb 435>:
  mimp_1049 = matches[j_141].imp;
  # DEBUG mimp => mimp_1049
  map_1050 = matches[j_141].map;
  # DEBUG map => map_1050
  D.45255_1051 = map_1050->rm_encoding;
  D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
  pmap_1044->rm_encoding = D.45291_1052;
  D.45247_1053 = map_1050->rm_pt;
  D.45292_1054 = (unsigned char) D.45247_1053;
  pmap_1044->recv_pt = D.45292_1054;
  D.45262_1055 = map_1050->rm_rate;
  pmap_1044->rm_rate = D.45262_1055;
  D.45293_1056 = mimp_1049->microseconds_per_packet;
  D.45294_1057 = D.45293_1056 / 1000;
  D.45295_1058 = (uint32_t) D.45294_1057;
  pmap_1044->codec_ms = D.45295_1058;
  D.45085_1059 = connection_125->c_address;
  D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);
  pmap_1044->remote_sdp_ip = D.45296_1060;
  D.44697_1061 = m_28->m_port;
  D.45087_1062 = (short unsigned int) D.44697_1061;
  pmap_1044->remote_sdp_port = D.45087_1062;
  D.45297_1063 = map_1050->rm_fmtp;
  D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
  pmap_1044->rm_fmtp = D.45298_1064;
  D.45247_1065 = map_1050->rm_pt;
  D.45292_1066 = (unsigned char) D.45247_1065;
  pmap_1044->agreed_pt = D.45292_1066;
  j_1067 = j_141 + 1;
  # DEBUG j => j_1067

<bb 436>:
  # j_141 = PHI <j_1030(431), j_1067(435)>
  # DEBUG j => j_141
  if (j_141 < m_idx_112)
    goto <bb 432>;
  else
    goto <bb 437>;

<bb 437>:
  D.45286_1068 = v_engine_189->cur_payload_map;
  D.45299_1069 = D.45286_1068->remote_sdp_port;
  D.45300_1070 = (int) D.45299_1069;
  switch_snprintf (&tmp, 50, "%d", D.45300_1070);
  D.44530_1071 = session_161(D)->channel;
  D.45286_1072 = v_engine_189->cur_payload_map;
  D.45301_1073 = D.45286_1072->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);
  D.44530_1074 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);
  D.44530_1075 = session_161(D)->channel;
  D.45286_1076 = v_engine_189->cur_payload_map;
  D.45302_1077 = D.45286_1076->rm_fmtp;
  switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);
  D.45286_1078 = v_engine_189->cur_payload_map;
  D.45303_1079 = D.45286_1078->agreed_pt;
  D.45304_1080 = (int) D.45303_1079;
  switch_snprintf (&tmp, 50, "%d", D.45304_1080);
  D.44530_1081 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);
  switch_core_media_check_video_codecs (session_161(D));
  D.45286_1082 = v_engine_189->cur_payload_map;
  D.45305_1083 = D.45286_1082->recv_pt;
  D.45306_1084 = (int) D.45305_1083;
  switch_snprintf (&tmp, 50, "%d", D.45306_1084);
  D.44530_1085 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);
  D.45307_1086 = match_16 == 0;
  D.45308_1087 = vmatch_1029 != 0;
  D.45309_1088 = D.45307_1086 && D.45308_1087;
  if (D.45309_1088 != 0)
    goto <bb 438>;
  else
    goto <bb 439>;

<bb 438>:
  match_1089 = 1;
  # DEBUG match => match_1089

<bb 439>:
  # match_14 = PHI <match_16(437), match_1089(438)>
  # DEBUG match => match_14
  D.45312_1090 = &v_engine_189->read_codec;
  # DEBUG codec => D.45312_1090
  if (D.45312_1090 != 0B)
    goto <bb 440>;
  else
    goto <bb 444>;

<bb 440>:
  D.47965_1505 = D.45312_1090->flags;
  D.47964_1506 = D.47965_1505 & 256;
  if (D.47964_1506 != 0)
    goto <bb 441>;
  else
    goto <bb 444>;

<bb 441>:
  D.47963_1507 = D.45312_1090->mutex;
  if (D.47963_1507 != 0B)
    goto <bb 442>;
  else
    goto <bb 444>;

<bb 442>:
  D.47962_1508 = D.45312_1090->codec_interface;
  if (D.47962_1508 != 0B)
    goto <bb 443>;
  else
    goto <bb 444>;

<bb 443>:
  D.47961_1509 = D.45312_1090->implementation;
  if (D.47961_1509 != 0B)
    goto <bb 445>;
  else
    goto <bb 444>;

<bb 444>:

<bb 445>:
  # iftmp.104_1510 = PHI <1(443), 0(444)>
  D.47967_1511 = (switch_bool_t) iftmp.104_1510;
  D.47960_1549 = D.47967_1511;
  D.45313_1091 = D.47960_1549;
  if (D.45313_1091 != 0)
    goto <bb 446>;
  else
    goto <bb 447>;

<bb 446>:
  v_engine_189->reset_codec = 1;

<bb 447>:
  D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);
  if (D.45316_1092 == 0)
    goto <bb 448>;
  else
    goto <bb 449>;

<bb 448>:
  check_ice (smh_186, 1, sdp_198, m_28);

<bb 449>:
  # match_15 = PHI <match_13(346), match_16(348), match_16(349), match_16(428), match_14(447), match_14(448), match_13(343), match_13(344), match_13(341), match_13(342), match_13(347)>
  # best_te_22 = PHI <best_te_21(346), best_te_23(348), best_te_23(349), best_te_23(428), best_te_23(447), best_te_23(448), best_te_21(343), best_te_21(344), best_te_21(341), best_te_21(342), best_te_21(347)>
  # cng_pt_26 = PHI <cng_pt_25(346), cng_pt_27(348), cng_pt_27(349), cng_pt_27(428), cng_pt_27(447), cng_pt_27(448), cng_pt_25(343), cng_pt_25(344), cng_pt_25(341), cng_pt_25(342), cng_pt_25(347)>
  # got_crypto_55 = PHI <got_crypto_54(346), got_crypto_56(348), got_crypto_56(349), got_crypto_56(428), got_crypto_56(447), got_crypto_56(448), got_crypto_54(343), got_crypto_54(344), got_crypto_54(341), got_crypto_54(342), got_crypto_54(347)>
  # got_video_crypto_63 = PHI <got_video_crypto_64(346), got_video_crypto_64(348), got_video_crypto_64(349), got_video_crypto_62(428), got_video_crypto_62(447), got_video_crypto_62(448), got_video_crypto_64(343), got_video_crypto_64(344), got_video_crypto_64(341), got_video_crypto_64(342), got_video_crypto_64(347)>
  # got_audio_66 = PHI <got_audio_65(346), got_audio_67(348), got_audio_67(349), got_audio_67(428), got_audio_67(447), got_audio_67(448), got_audio_65(343), got_audio_65(344), got_audio_65(341), got_audio_65(342), got_audio_65(347)>
  # codec_ms_94 = PHI <codec_ms_93(346), codec_ms_95(348), codec_ms_95(349), codec_ms_95(428), codec_ms_95(447), codec_ms_95(448), codec_ms_93(343), codec_ms_93(344), codec_ms_93(341), codec_ms_93(342), codec_ms_93(347)>
  # m_idx_113 = PHI <m_idx_107(346), m_idx_114(348), m_idx_114(349), m_idx_112(428), m_idx_112(447), m_idx_112(448), m_idx_107(343), m_idx_107(344), m_idx_107(341), m_idx_107(342), m_idx_107(347)>
  # nm_idx_121 = PHI <nm_idx_120(346), nm_idx_122(348), nm_idx_122(349), nm_idx_876(428), nm_idx_876(447), nm_idx_876(448), nm_idx_120(343), nm_idx_120(344), nm_idx_120(341), nm_idx_120(342), nm_idx_120(347)>
  # DEBUG nm_idx => nm_idx_121
  # DEBUG m_idx => m_idx_113
  # DEBUG codec_ms => codec_ms_94
  # DEBUG got_audio => got_audio_66
  # DEBUG got_video_crypto => got_video_crypto_63
  # DEBUG got_crypto => got_crypto_55
  # DEBUG cng_pt => cng_pt_26
  # DEBUG best_te => best_te_22
  # DEBUG match => match_15
  m_1093 = m_28->m_next;
  # DEBUG m => m_1093

<bb 450>:
  # match_16 = PHI <match_148(101), match_15(449)>
  # best_te_23 = PHI <best_te_149(101), best_te_22(449)>
  # cng_pt_27 = PHI <cng_pt_151(101), cng_pt_26(449)>
  # m_28 = PHI <m_370(101), m_1093(449)>
  # got_crypto_56 = PHI <got_crypto_164(101), got_crypto_55(449)>
  # got_video_crypto_64 = PHI <got_video_crypto_165(101), got_video_crypto_63(449)>
  # got_audio_67 = PHI <got_audio_166(101), got_audio_66(449)>
  # got_avp_69 = PHI <got_avp_167(101), got_avp_68(449)>
  # got_video_avp_71 = PHI <got_video_avp_168(101), got_video_avp_70(449)>
  # got_video_savp_73 = PHI <got_video_savp_169(101), got_video_savp_72(449)>
  # got_savp_75 = PHI <got_savp_170(101), got_savp_74(449)>
  # got_udptl_77 = PHI <got_udptl_171(101), got_udptl_76(449)>
  # got_webrtc_79 = PHI <got_webrtc_172(101), got_webrtc_78(449)>
  # codec_ms_95 = PHI <codec_ms_181(101), codec_ms_94(449)>
  # m_idx_114 = PHI <m_idx_184(101), m_idx_113(449)>
  # nm_idx_122 = PHI <nm_idx_185(101), nm_idx_121(449)>
  # DEBUG nm_idx => nm_idx_122
  # DEBUG m_idx => m_idx_114
  # DEBUG codec_ms => codec_ms_95
  # DEBUG got_webrtc => got_webrtc_79
  # DEBUG got_udptl => got_udptl_77
  # DEBUG got_savp => got_savp_75
  # DEBUG got_video_savp => got_video_savp_73
  # DEBUG got_video_avp => got_video_avp_71
  # DEBUG got_avp => got_avp_69
  # DEBUG got_audio => got_audio_67
  # DEBUG got_video_crypto => got_video_crypto_64
  # DEBUG got_crypto => got_crypto_56
  # DEBUG m => m_28
  # DEBUG cng_pt => cng_pt_27
  # DEBUG best_te => best_te_23
  # DEBUG match => match_16
  if (m_28 != 0B)
    goto <bb 102>;
  else
    goto <bb 451> (done);

  # match_17 = PHI <match_397(121), match_401(123), match_437(141), match_492(152), match_543(186), match_553(192), match_557(196), match_882(353), match_974(398), match_16(450)>
done:
  # DEBUG match => match_17
  if (parser_196 != 0B)
    goto <bb 452>;
  else
    goto <bb 453>;

<bb 452>:
  sdp_parser_free (parser_196);

<bb 453>:
  D.44471_1094 = smh_186->mparams;
  D.44471_1094->cng_pt = cng_pt_27;
  D.44470_1095 = match_17;

<bb 454>:
  # D.44470_142 = PHI <D.44470_187(5), D.44470_197(7), D.44470_199(9), D.44470_1095(453)>
  return D.44470_142;

}



;; Function switch_core_media_proxy_remote_addr (switch_core_media_proxy_remote_addr)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_proxy_remote_addr.
Processing frequency atoi
  Called by switch_core_media_proxy_remote_addr that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_proxy_remote_addr.
Processing frequency atoi
  Called by switch_core_media_proxy_remote_addr that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_proxy_remote_addr.
Processing frequency atoi
  Called by switch_core_media_proxy_remote_addr that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_proxy_remote_addr.
Processing frequency atoi
  Called by switch_core_media_proxy_remote_addr that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_proxy_remote_addr.
Processing frequency atoi
  Called by switch_core_media_proxy_remote_addr that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_proxy_remote_addr.
Processing frequency atoi
  Called by switch_core_media_proxy_remote_addr that is normal or hot
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate start_video_thread.
Not inlining: code size would grow by 67.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_proxy_remote_addr.
Processing frequency _zstr
  Called by switch_core_media_proxy_remote_addr that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_proxy_remote_addr.
Processing frequency _zstr
  Called by switch_core_media_proxy_remote_addr that is normal or hot
Inlining _zstr to switch_core_media_proxy_remote_addr with frequency 1000
Inlining _zstr to switch_core_media_proxy_remote_addr with frequency 1000
Inlining atoi to switch_core_media_proxy_remote_addr with frequency 1000
Inlining atoi to switch_core_media_proxy_remote_addr with frequency 1000
Inlining atoi to switch_core_media_proxy_remote_addr with frequency 1000
Inlining atoi to switch_core_media_proxy_remote_addr with frequency 1000
Inlining atoi to switch_core_media_proxy_remote_addr with frequency 1000
Inlining atoi to switch_core_media_proxy_remote_addr with frequency 1000
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate start_video_thread.
Not inlining: code size would grow by 67.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Iterations: 1
Merging blocks 6 and 101
Merging blocks 8 and 106
Removing basic block 16
;; basic block 16, loop depth 0, count 0
;; prev block 15, next block 111
;; pred:      
;; succ:       111 [100.0%]  (fallthru,exec)
<bb 16>:


Merging blocks 42 and 113
Merging blocks 43 and 115
Removing basic block 47
;; basic block 47, loop depth 0, count 0
;; prev block 46, next block 117
;; pred:      
;; succ:       117 [100.0%]  (fallthru,exec)
<bb 47>:


Removing basic block 52
;; basic block 52, loop depth 0, count 0
;; prev block 51, next block 119
;; pred:      
;; succ:       119 [100.0%]  (fallthru,exec)
<bb 52>:


Removing basic block 87
;; basic block 87, loop depth 0, count 0
;; prev block 86, next block 121
;; pred:      
;; succ:       121 [100.0%]  (fallthru,exec)
<bb 87>:


Merging blocks 104 and 100
Merging blocks 109 and 105
Merging blocks 111 and 110
Merging blocks 117 and 116
Merging blocks 119 and 118
Merging blocks 121 and 120
Merging blocks 42 and 112
Merging blocks 43 and 114


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement rip = "";

Updating SSA information for statement rp = "";

Updating SSA information for statement rvp = "";



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4152, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_26 = session_25(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6



Registering new PHI nodes in block #7

Updating SSA information for statement D.47971_363 = *sdp_str_30(D);



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9

Updating SSA information for statement D.47970 = D.47972_364;

Updating SSA information for statement D.44138_31 = D.47970;



Registering new PHI nodes in block #10

Updating SSA information for statement D.44141_32 = smh_26->mparams;

Updating SSA information for statement sdp_str_33 = D.44141_32->remote_sdp_str;



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement D.47975_365 = *sdp_str_1;



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement D.47974 = D.47976_366;

Updating SSA information for statement D.44142_34 = D.47974;



Registering new PHI nodes in block #15

Updating SSA information for statement p_35 = switch_stristr ("c=IN IP4 ", sdp_str_1);



Registering new PHI nodes in block #16

Updating SSA information for statement p_36 = switch_stristr ("c=IN IP6 ", sdp_str_1);



Registering new PHI nodes in block #17



Registering new PHI nodes in block #18

Updating SSA information for statement p_38 = switch_stristr ("m=audio ", sdp_str_1);



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20

Updating SSA information for statement p_40 = switch_stristr ("m=image ", sdp_str_1);



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22

Updating SSA information for statement D.47979_367 = strtol (tmp_41, 0B, 10);

Updating SSA information for statement D.47978 = D.47979_367;

Updating SSA information for statement D.44153_42 = D.47978;



Registering new PHI nodes in block #23



Registering new PHI nodes in block #24

Updating SSA information for statement p_44 = switch_stristr ("m=video ", sdp_str_1);



Registering new PHI nodes in block #25



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27

Updating SSA information for statement D.44162_50 = strlen (p_49);



Registering new PHI nodes in block #29



Registering new PHI nodes in block #30

Updating SSA information for statement D.44163_57 = *p_3;



Registering new PHI nodes in block #31

Updating SSA information for statement D.44171_58 = *p_3;



Registering new PHI nodes in block #32

Updating SSA information for statement D.44163_63 = *p_3;



Registering new PHI nodes in block #33

Updating SSA information for statement D.44163_64 = *p_3;



Registering new PHI nodes in block #34

Updating SSA information for statement D.44163_66 = *p_3;



Registering new PHI nodes in block #28

Updating SSA information for statement D.44163_68 = *p_3;

Updating SSA information for statement rip[x_10] = D.44163_68;



Registering new PHI nodes in block #35



Registering new PHI nodes in block #37



Registering new PHI nodes in block #38

Updating SSA information for statement D.44163_77 = *p_4;



Registering new PHI nodes in block #39

Updating SSA information for statement D.44163_78 = *p_4;



Registering new PHI nodes in block #36

Updating SSA information for statement D.44163_80 = *p_4;

Updating SSA information for statement rp[x_11] = D.44163_80;



Registering new PHI nodes in block #40



Registering new PHI nodes in block #42



Registering new PHI nodes in block #43

Updating SSA information for statement D.44163_89 = *p_5;



Registering new PHI nodes in block #44

Updating SSA information for statement D.44163_90 = *p_5;



Registering new PHI nodes in block #41

Updating SSA information for statement D.44163_92 = *p_5;

Updating SSA information for statement rvp[x_12] = D.44163_92;



Registering new PHI nodes in block #45

Updating SSA information for statement D.44190_95 = rip[0];



Registering new PHI nodes in block #46

Updating SSA information for statement D.44192_96 = rp[0];



Registering new PHI nodes in block #48

Updating SSA information for statement D.44193_97 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44194_98 = switch_core_perform_session_strdup (session_25(D), &rip, "src/switch_core_media.c", &__func__, 4229);

Updating SSA information for statement D.44193_97->remote_sdp_ip = D.44194_98;

Updating SSA information for statement D.44193_99 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.47982_368 = strtol (&rp, 0B, 10);

Updating SSA information for statement D.47981 = D.47982_368;

Updating SSA information for statement D.44195_100 = D.47981;

Updating SSA information for statement D.44193_99->remote_sdp_port = D.44196_101;

Updating SSA information for statement D.44197_102 = rvp[0];



Registering new PHI nodes in block #49

Updating SSA information for statement D.44200_103 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44201_104 = switch_core_perform_session_strdup (session_25(D), &rip, "src/switch_core_media.c", &__func__, 4233);

Updating SSA information for statement D.44200_103->remote_sdp_ip = D.44201_104;

Updating SSA information for statement D.44200_105 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.47985_369 = strtol (&rvp, 0B, 10);

Updating SSA information for statement D.47984 = D.47985_369;

Updating SSA information for statement D.44202_106 = D.47984;

Updating SSA information for statement D.44200_105->remote_sdp_port = D.44203_107;

Updating SSA information for statement D.44204_108 = session_25(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44204_108, 98, 1);

Updating SSA information for statement D.44204_109 = session_25(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44204_109, 23, 1);



Registering new PHI nodes in block #50

Updating SSA information for statement D.44200_110 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44205_111 = D.44200_110->remote_sdp_ip;



Registering new PHI nodes in block #51

Updating SSA information for statement D.44200_112 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44208_113 = D.44200_112->remote_sdp_port;



Registering new PHI nodes in block #52

Updating SSA information for statement D.44200_114 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44205_115 = D.44200_114->remote_sdp_ip;

Updating SSA information for statement D.39191_116 = __builtin_strcmp (D.44205_115, &rip);



Registering new PHI nodes in block #53

Updating SSA information for statement D.47988_370 = strtol (&rvp, 0B, 10);

Updating SSA information for statement D.47987 = D.47988_370;

Updating SSA information for statement D.44214_117 = D.47987;

Updating SSA information for statement D.44200_118 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44208_119 = D.44200_118->remote_sdp_port;



Registering new PHI nodes in block #54

Updating SSA information for statement D.44200_121 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44205_122 = D.44200_121->remote_sdp_ip;

Updating SSA information for statement D.44200_123 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44208_124 = D.44200_123->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4241, session_25(D), 7, "Remote video address:port [%s:%d] has not changed.\n", D.44205_122, D.44215_125);



Registering new PHI nodes in block #55

Updating SSA information for statement D.44204_126 = session_25(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44204_126, 98, 1);

Updating SSA information for statement D.44204_127 = session_25(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.44204_127, 23, 1);

Updating SSA information for statement D.44217_128 = v_engine_29->rtp_session;

Updating SSA information for statement D.44218_129 = switch_rtp_ready (D.44217_128);



Registering new PHI nodes in block #56

Updating SSA information for statement remote_rtcp_port_131 = v_engine_29->remote_rtcp_port;



Registering new PHI nodes in block #57

Updating SSA information for statement D.44204_132 = session_25(D)->channel;

Updating SSA information for statement rport_133 = switch_channel_get_variable_dup (D.44204_132, "rtp_remote_video_rtcp_port", 1, -1);



Registering new PHI nodes in block #58

Updating SSA information for statement D.47991_371 = strtol (rport_133, 0B, 10);

Updating SSA information for statement D.47990 = D.47991_371;

Updating SSA information for statement D.44225_134 = D.47990;



Registering new PHI nodes in block #59

Updating SSA information for statement D.44217_136 = v_engine_29->rtp_session;

Updating SSA information for statement D.44200_137 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44205_138 = D.44200_137->remote_sdp_ip;

Updating SSA information for statement D.44200_139 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44208_140 = D.44200_139->remote_sdp_port;

Updating SSA information for statement D.44226_141 = switch_rtp_set_remote_address (D.44217_136, D.44205_138, D.44208_140, remote_rtcp_port_14, 1, &err);



Registering new PHI nodes in block #60

Updating SSA information for statement err.83_142 = err;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4259, session_25(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", err.83_142);



Registering new PHI nodes in block #61

Updating SSA information for statement D.44200_143 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44205_144 = D.44200_143->remote_sdp_ip;

Updating SSA information for statement D.44200_145 = v_engine_29->cur_payload_map;

Updating SSA information for statement D.44208_146 = D.44200_145->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4261, session_25(D), 7, "VIDEO RTP CHANGING DEST TO: [%s:%d]\n", D.44205_144, D.44215_147);

Updating SSA information for statement D.44233_148 = switch_media_handle_test_media_flag (smh_26, 10);



Registering new PHI nodes in block #62

Updating SSA information for statement D.44204_149 = session_25(D)->channel;

Updating SSA information for statement D.44236_150 = switch_channel_test_flag (D.44204_149, 15);



Registering new PHI nodes in block #63

Updating SSA information for statement D.44204_151 = session_25(D)->channel;

Updating SSA information for statement val_152 = switch_channel_get_variable_dup (D.44204_151, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #64

Updating SSA information for statement D.44240_153 = switch_true (val_152);



Registering new PHI nodes in block #65

Updating SSA information for statement D.44204_154 = session_25(D)->channel;

Updating SSA information for statement D.44241_155 = switch_channel_test_flag (D.44204_154, 106);



Registering new PHI nodes in block #66

Updating SSA information for statement D.44217_156 = v_engine_29->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.44217_156, 7);

Updating SSA information for statement start_video_thread (session_25(D));



Registering new PHI nodes in block #67

Updating SSA information for statement D.44244_157 = switch_media_handle_test_media_flag (smh_26, 2);



Registering new PHI nodes in block #68

Updating SSA information for statement v_engine_29->check_frames = 0;



Registering new PHI nodes in block #69

Updating SSA information for statement D.44247_158 = a_engine_28->rtp_session;

Updating SSA information for statement D.44248_159 = switch_rtp_ready (D.44247_158);



Registering new PHI nodes in block #70

Updating SSA information for statement D.44247_160 = a_engine_28->rtp_session;

Updating SSA information for statement remote_host_161 = switch_rtp_get_remote_host (D.44247_160);

Updating SSA information for statement D.44247_162 = a_engine_28->rtp_session;

Updating SSA information for statement remote_port_163 = switch_rtp_get_remote_port (D.44247_162);



Registering new PHI nodes in block #71

Updating SSA information for statement D.44193_169 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44256_170 = D.44193_169->remote_sdp_ip;

Updating SSA information for statement D.39206_171 = __builtin_strcmp (remote_host_161, D.44256_170);



Registering new PHI nodes in block #72

Updating SSA information for statement D.44193_172 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44258_173 = D.44193_172->remote_sdp_port;



Registering new PHI nodes in block #73

Updating SSA information for statement D.44193_174 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44256_175 = D.44193_174->remote_sdp_ip;

Updating SSA information for statement D.44193_176 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44258_177 = D.44193_176->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4286, session_25(D), 7, "Remote address:port [%s:%d] has not changed.\n", D.44256_175, D.44260_178);



Registering new PHI nodes in block #74



Registering new PHI nodes in block #75



Registering new PHI nodes in block #76

Updating SSA information for statement D.44268_182 = *__s1_181;

Updating SSA information for statement D.44271_185 = MEM[(const unsigned char *)D.44270_184];



Registering new PHI nodes in block #77

Updating SSA information for statement D.44279_192 = *D.44278_191;

Updating SSA information for statement D.44282_195 = MEM[(const unsigned char *)D.44281_194];



Registering new PHI nodes in block #78

Updating SSA information for statement D.44289_202 = *D.44288_201;

Updating SSA information for statement D.44292_205 = MEM[(const unsigned char *)D.44291_204];



Registering new PHI nodes in block #79

Updating SSA information for statement D.44299_212 = *D.44298_211;

Updating SSA information for statement D.44302_215 = MEM[(const unsigned char *)D.44301_214];



Registering new PHI nodes in block #80



Registering new PHI nodes in block #81

Updating SSA information for statement iftmp.84_220 = __builtin_strcmp (remote_host_161, "0.0.0.0");



Registering new PHI nodes in block #82



Registering new PHI nodes in block #83



Registering new PHI nodes in block #84

Updating SSA information for statement D.44193_223 = a_engine_28->cur_payload_map;

Updating SSA information for statement __s1_224 = D.44193_223->remote_sdp_ip;

Updating SSA information for statement D.44309_225 = *__s1_224;

Updating SSA information for statement D.44271_228 = MEM[(const unsigned char *)D.44270_227];



Registering new PHI nodes in block #85

Updating SSA information for statement D.44317_235 = *D.44316_234;

Updating SSA information for statement D.44282_238 = MEM[(const unsigned char *)D.44281_237];



Registering new PHI nodes in block #86

Updating SSA information for statement D.44324_245 = *D.44323_244;

Updating SSA information for statement D.44292_248 = MEM[(const unsigned char *)D.44291_247];



Registering new PHI nodes in block #87

Updating SSA information for statement D.44331_255 = *D.44330_254;

Updating SSA information for statement D.44302_258 = MEM[(const unsigned char *)D.44301_257];



Registering new PHI nodes in block #88



Registering new PHI nodes in block #89

Updating SSA information for statement D.44193_263 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44256_264 = D.44193_263->remote_sdp_ip;

Updating SSA information for statement iftmp.85_265 = __builtin_strcmp (D.44256_264, "0.0.0.0");



Registering new PHI nodes in block #90



Registering new PHI nodes in block #91

Updating SSA information for statement D.44193_267 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44256_268 = D.44193_267->remote_sdp_ip;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4292, session_25(D), 7, "Remote address changed from [%s] to [%s]. Ignoring...\n", D.44256_268, remote_host_161);



Registering new PHI nodes in block #92

Updating SSA information for statement D.44204_270 = session_25(D)->channel;

Updating SSA information for statement rport_271 = switch_channel_get_variable_dup (D.44204_270, "rtp_remote_audio_rtcp_port", 1, -1);



Registering new PHI nodes in block #93

Updating SSA information for statement D.47994_372 = strtol (rport_271, 0B, 10);

Updating SSA information for statement D.47993 = D.47994_372;

Updating SSA information for statement D.44336_272 = D.47993;



Registering new PHI nodes in block #94

Updating SSA information for statement D.44247_274 = a_engine_28->rtp_session;

Updating SSA information for statement D.44193_275 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44256_276 = D.44193_275->remote_sdp_ip;

Updating SSA information for statement D.44193_277 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44258_278 = D.44193_277->remote_sdp_port;

Updating SSA information for statement D.44337_279 = switch_rtp_set_remote_address (D.44247_274, D.44256_276, D.44258_278, remote_rtcp_port_15, 1, &err);



Registering new PHI nodes in block #95

Updating SSA information for statement err.83_280 = err;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4305, session_25(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.83_280);



Registering new PHI nodes in block #96

Updating SSA information for statement D.44193_282 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44256_283 = D.44193_282->remote_sdp_ip;

Updating SSA information for statement D.44193_284 = a_engine_28->cur_payload_map;

Updating SSA information for statement D.44258_285 = D.44193_284->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4308, session_25(D), 7, "AUDIO RTP CHANGING DEST TO: [%s:%d]\n", D.44256_283, D.44260_286);

Updating SSA information for statement D.44343_287 = switch_media_handle_test_media_flag (smh_26, 10);



Registering new PHI nodes in block #97

Updating SSA information for statement D.44204_288 = session_25(D)->channel;

Updating SSA information for statement val_289 = switch_channel_get_variable_dup (D.44204_288, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #98

Updating SSA information for statement D.44347_290 = switch_true (val_289);



Registering new PHI nodes in block #99

Updating SSA information for statement D.44204_291 = session_25(D)->channel;

Updating SSA information for statement D.44348_292 = switch_channel_test_flag (D.44204_291, 106);



Registering new PHI nodes in block #100

Updating SSA information for statement D.44247_293 = a_engine_28->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.44247_293, 7);



Registering new PHI nodes in block #101

Updating SSA information for statement D.44351_294 = switch_media_handle_test_media_flag (smh_26, 2);



Registering new PHI nodes in block #102

Updating SSA information for statement a_engine_28->check_frames = 0;



Registering new PHI nodes in block #103



Registering new PHI nodes in block #47

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4225, session_25(D), 3, "invalid SDP\n");



Registering new PHI nodes in block #104



Registering new PHI nodes in block #105



Symbols to be put in SSA form

{ .MEM D.47970 D.47974 D.47978 D.47981 D.47984 D.47987 D.47990 D.47993 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 106
Number of blocks to update: 105 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 


Scope blocks after cleanups:

{ Scope block #0 
  const char * err;
  char rip[512];
  char rp[512];
  char rvp[512];
  char * p;
  char * ip_ptr;
  char * port_ptr;
  char * vid_port_ptr;
  char * pe;
  int x;
  const char * val;
  switch_status_t status;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[36] = "switch_core_media_proxy_remote_addr";
  void end = <<< error >>>; (unused)
  static const char __func__[36] = "switch_core_media_proxy_remote_addr";

  { Scope block #278 src/switch_core_media.c:4240 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #279 Originating from :#0 

    }

  }

  { Scope block #280 src/switch_core_media.c:4234 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #281 Originating from :#0 

    }

  }

  { Scope block #282 src/switch_core_media.c:4230 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #283 Originating from :#0 

    }

  }

  { Scope block #284 src/switch_core_media.c:4165 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #285 Originating from :#0 

    }

  }

  { Scope block #286 src/switch_core_media.c:4161 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #287 Originating from :#0 

    }

  }

  { Scope block #288 
    char * tmp;

    { Scope block #289 src/switch_core_media.c:4180 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #290 Originating from :#0 

      }

    }

  }

  { Scope block #291 
    size_t __s1_len; (unused)
    size_t __s2_len; (unused)

  }

  { Scope block #292 
    const char * rport;
    switch_port_t remote_rtcp_port;

    { Scope block #293 src/switch_core_media.c:4252 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #294 Originating from :#0 

      }

    }

  }

  { Scope block #295 
    char * remote_host;
    switch_port_t remote_port;
    const char * rport;
    switch_port_t remote_rtcp_port;

    { Scope block #296 src/switch_core_media.c:4299 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #297 Originating from :#0 

      }

    }

    { Scope block #298 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

    { Scope block #299 
      size_t __s1_len; (unused)
      size_t __s2_len;

      { Scope block #300 
        const unsigned char * __s1;
        register int __result;

      }

    }

    { Scope block #301 
      size_t __s1_len; (unused)
      size_t __s2_len;

      { Scope block #302 
        const unsigned char * __s1;
        register int __result;

      }

    }

  }

}
switch_core_media_proxy_remote_addr (struct switch_core_session_t * session, const char * sdp_str)
{
  int D.47994;
  int D.47993;
  int D.47991;
  int D.47990;
  int D.47988;
  int D.47987;
  int D.47985;
  int D.47984;
  int D.47982;
  int D.47981;
  int D.47979;
  int D.47978;
  int D.47976;
  const char D.47975;
  int D.47974;
  int D.47972;
  const char D.47971;
  int D.47970;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  switch_port_t remote_rtcp_port;
  const char * rport;
  switch_port_t remote_port;
  char * remote_host;
  switch_port_t remote_rtcp_port;
  const char * rport;
  char * tmp;
  static const char __func__[36] = "switch_core_media_proxy_remote_addr";
  static const char __PRETTY_FUNCTION__[36] = "switch_core_media_proxy_remote_addr";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  switch_status_t status;
  const char * val;
  int x;
  char * pe;
  char * vid_port_ptr;
  char * port_ptr;
  char * ip_ptr;
  char * p;
  char rvp[512];
  char rp[512];
  char rip[512];
  const char * err;
  int32_t D.44351;
  uint32_t D.44348;
  int D.44347;
  int32_t D.44343;
  switch_status_t D.44337;
  int D.44336;
  int D.44332;
  const unsigned char D.44331;
  const unsigned char * D.44330;
  _Bool D.44327;
  _Bool D.44326;
  int D.44325;
  const unsigned char D.44324;
  const unsigned char * D.44323;
  _Bool D.44320;
  _Bool D.44319;
  int D.44318;
  const unsigned char D.44317;
  const unsigned char * D.44316;
  _Bool D.44313;
  _Bool D.44312;
  _Bool D.44311;
  int D.44310;
  const unsigned char D.44309;
  int D.39223;
  int iftmp.85;
  int D.39224;
  int D.44303;
  const unsigned char D.44302;
  char * D.44301;
  int D.44300;
  const unsigned char D.44299;
  const unsigned char * D.44298;
  _Bool D.44295;
  _Bool D.44294;
  int D.44293;
  const unsigned char D.44292;
  char * D.44291;
  int D.44290;
  const unsigned char D.44289;
  const unsigned char * D.44288;
  _Bool D.44285;
  _Bool D.44284;
  int D.44283;
  const unsigned char D.44282;
  char * D.44281;
  int D.44280;
  const unsigned char D.44279;
  const unsigned char * D.44278;
  _Bool D.44275;
  _Bool D.44274;
  _Bool D.44273;
  int D.44272;
  const unsigned char D.44271;
  char[8] * D.44270;
  int D.44269;
  const unsigned char D.44268;
  int D.39214;
  int iftmp.84;
  int D.39215;
  int D.44260;
  switch_port_t D.44258;
  char * D.44256;
  int D.39206;
  _Bool D.44254;
  _Bool D.44253;
  _Bool D.44252;
  uint8_t D.44248;
  struct switch_rtp_t * D.44247;
  int32_t D.44244;
  uint32_t D.44241;
  int D.44240;
  uint32_t D.44236;
  int32_t D.44233;
  const char * err.83;
  switch_status_t D.44226;
  int D.44225;
  uint8_t D.44218;
  struct switch_rtp_t * D.44217;
  int D.44215;
  int D.44214;
  int D.39191;
  switch_port_t D.44208;
  char * D.44205;
  struct switch_channel_t * D.44204;
  short unsigned int D.44203;
  int D.44202;
  char * D.44201;
  struct payload_map_t * D.44200;
  char D.44197;
  short unsigned int D.44196;
  int D.44195;
  char * D.44194;
  struct payload_map_t * D.44193;
  char D.44192;
  char D.44190;
  char D.44184;
  char D.44180;
  char D.44178;
  _Bool D.44175;
  _Bool D.44174;
  _Bool D.44173;
  char D.44172;
  char D.44171;
  _Bool D.44168;
  _Bool D.44167;
  _Bool D.44166;
  unsigned int x.82;
  char D.44163;
  size_t D.44162;
  _Bool D.44160;
  _Bool D.44159;
  _Bool D.44158;
  int D.44153;
  int D.44142;
  struct switch_core_media_params_t * D.44141;
  int D.44138;
  switch_status_t D.44137;

<bb 2>:
  rip = "";
  rp = "";
  rvp = "";
  ip_ptr_21 = 0B;
  # DEBUG ip_ptr => ip_ptr_21
  port_ptr_22 = 0B;
  # DEBUG port_ptr => port_ptr_22
  vid_port_ptr_23 = 0B;
  # DEBUG vid_port_ptr => vid_port_ptr_23
  status_24 = 1;
  # DEBUG status => status_24
  if (session_25(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4152, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_26 = session_25(D)->media_handle;
  # DEBUG smh => smh_26
  if (smh_26 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.44137_27 = 1;
  goto <bb 105>;

<bb 6>:
  a_engine_28 = &smh_26->engines;
  # DEBUG a_engine => a_engine_28
  v_engine_29 = &smh_26->engines[1];
  # DEBUG v_engine => v_engine_29
  # DEBUG s => sdp_str_30(D)
  if (sdp_str_30(D) == 0B)
    goto <bb 9>;
  else
    goto <bb 7>;

<bb 7>:
  D.47971_363 = *sdp_str_30(D);
  if (D.47971_363 == 0)
    goto <bb 9>;
  else
    goto <bb 8>;

<bb 8>:

<bb 9>:
  # D.47972_364 = PHI <1(6), 1(7), 0(8)>
  D.47970_376 = D.47972_364;
  D.44138_31 = D.47970_376;
  if (D.44138_31 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.44141_32 = smh_26->mparams;
  sdp_str_33 = D.44141_32->remote_sdp_str;
  # DEBUG sdp_str => sdp_str_33

<bb 11>:
  # sdp_str_1 = PHI <sdp_str_30(D)(9), sdp_str_33(10)>
  # DEBUG sdp_str => sdp_str_1
  # DEBUG s => sdp_str_1
  if (sdp_str_1 == 0B)
    goto <bb 14>;
  else
    goto <bb 12>;

<bb 12>:
  D.47975_365 = *sdp_str_1;
  if (D.47975_365 == 0)
    goto <bb 14>;
  else
    goto <bb 13>;

<bb 13>:

<bb 14>:
  # D.47976_366 = PHI <1(11), 1(12), 0(13)>
  D.47974_377 = D.47976_366;
  D.44142_34 = D.47974_377;
  if (D.44142_34 != 0)
    goto <bb 104> (end);
  else
    goto <bb 15>;

<bb 15>:
  p_35 = switch_stristr ("c=IN IP4 ", sdp_str_1);
  # DEBUG p => p_35
  if (p_35 != 0B)
    goto <bb 17>;
  else
    goto <bb 16>;

<bb 16>:
  p_36 = switch_stristr ("c=IN IP6 ", sdp_str_1);
  # DEBUG p => p_36
  if (p_36 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  # p_2 = PHI <p_35(15), p_36(16)>
  # DEBUG p => p_2
  ip_ptr_37 = p_2 + 9;
  # DEBUG ip_ptr => ip_ptr_37

<bb 18>:
  # ip_ptr_6 = PHI <ip_ptr_21(16), ip_ptr_37(17)>
  # DEBUG ip_ptr => ip_ptr_6
  p_38 = switch_stristr ("m=audio ", sdp_str_1);
  # DEBUG p => p_38
  if (p_38 != 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  port_ptr_39 = p_38 + 8;
  # DEBUG port_ptr => port_ptr_39

<bb 20>:
  # port_ptr_7 = PHI <port_ptr_22(18), port_ptr_39(19)>
  # DEBUG port_ptr => port_ptr_7
  p_40 = switch_stristr ("m=image ", sdp_str_1);
  # DEBUG p => p_40
  if (p_40 != 0B)
    goto <bb 21>;
  else
    goto <bb 24>;

<bb 21>:
  tmp_41 = p_40 + 8;
  # DEBUG tmp => tmp_41
  if (tmp_41 != 0B)
    goto <bb 22>;
  else
    goto <bb 24>;

<bb 22>:
  # DEBUG __nptr => tmp_41
  D.47979_367 = strtol (tmp_41, 0B, 10);
  D.47978_379 = D.47979_367;
  D.44153_42 = D.47978_379;
  if (D.44153_42 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  port_ptr_43 = tmp_41;
  # DEBUG port_ptr => port_ptr_43

<bb 24>:
  # port_ptr_8 = PHI <port_ptr_7(20), port_ptr_7(21), port_ptr_7(22), port_ptr_43(23)>
  # DEBUG port_ptr => port_ptr_8
  p_44 = switch_stristr ("m=video ", sdp_str_1);
  # DEBUG p => p_44
  if (p_44 != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  vid_port_ptr_45 = p_44 + 8;
  # DEBUG vid_port_ptr => vid_port_ptr_45

<bb 26>:
  # vid_port_ptr_9 = PHI <vid_port_ptr_23(24), vid_port_ptr_45(25)>
  # DEBUG vid_port_ptr => vid_port_ptr_9
  D.44158_46 = ip_ptr_6 == 0B;
  D.44159_47 = port_ptr_8 == 0B;
  D.44160_48 = D.44158_46 || D.44159_47;
  if (D.44160_48 != 0)
    goto <bb 104> (end);
  else
    goto <bb 27>;

<bb 27>:
  p_49 = ip_ptr_6;
  # DEBUG p => p_49
  D.44162_50 = strlen (p_49);
  pe_51 = p_49 + D.44162_50;
  # DEBUG pe => pe_51
  x_52 = 0;
  # DEBUG x => x_52
  goto <bb 29>;

<bb 28>:
  D.44163_68 = *p_3;
  rip[x_10] = D.44163_68;
  x_69 = x_10 + 1;
  # DEBUG x => x_69
  p_70 = p_3 + 1;
  # DEBUG p => p_70
  if (p_70 >= pe_51)
    goto <bb 104> (end);
  else
    goto <bb 29>;

<bb 29>:
  # p_3 = PHI <p_49(27), p_70(28)>
  # x_10 = PHI <x_52(27), x_69(28)>
  # DEBUG x => x_10
  # DEBUG p => p_3
  x.82_53 = (unsigned int) x_10;
  D.44166_54 = x.82_53 <= 510;
  D.44167_55 = p_3 != 0B;
  D.44168_56 = D.44166_54 && D.44167_55;
  if (D.44168_56 != 0)
    goto <bb 30>;
  else
    goto <bb 35>;

<bb 30>:
  D.44163_57 = *p_3;
  if (D.44163_57 != 0)
    goto <bb 31>;
  else
    goto <bb 35>;

<bb 31>:
  D.44171_58 = *p_3;
  D.44172_59 = D.44171_58 + 208;
  D.44173_60 = D.44172_59 <= 9;
  D.44174_61 = D.44171_58 == 46;
  D.44175_62 = D.44173_60 || D.44174_61;
  if (D.44175_62 != 0)
    goto <bb 28>;
  else
    goto <bb 32>;

<bb 32>:
  D.44163_63 = *p_3;
  if (D.44163_63 == 58)
    goto <bb 28>;
  else
    goto <bb 33>;

<bb 33>:
  D.44163_64 = *p_3;
  D.44178_65 = D.44163_64 + 159;
  if (D.44178_65 <= 5)
    goto <bb 28>;
  else
    goto <bb 34>;

<bb 34>:
  D.44163_66 = *p_3;
  D.44180_67 = D.44163_66 + 191;
  if (D.44180_67 <= 5)
    goto <bb 28>;
  else
    goto <bb 35>;

<bb 35>:
  p_71 = port_ptr_8;
  # DEBUG p => p_71
  x_72 = 0;
  # DEBUG x => x_72
  goto <bb 37>;

<bb 36>:
  D.44163_80 = *p_4;
  rp[x_11] = D.44163_80;
  x_81 = x_11 + 1;
  # DEBUG x => x_81
  p_82 = p_4 + 1;
  # DEBUG p => p_82
  if (p_82 >= pe_51)
    goto <bb 104> (end);
  else
    goto <bb 37>;

<bb 37>:
  # p_4 = PHI <p_71(35), p_82(36)>
  # x_11 = PHI <x_72(35), x_81(36)>
  # DEBUG x => x_11
  # DEBUG p => p_4
  x.82_73 = (unsigned int) x_11;
  D.44166_74 = x.82_73 <= 510;
  D.44167_75 = p_4 != 0B;
  D.44168_76 = D.44166_74 && D.44167_75;
  if (D.44168_76 != 0)
    goto <bb 38>;
  else
    goto <bb 40>;

<bb 38>:
  D.44163_77 = *p_4;
  if (D.44163_77 != 0)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.44163_78 = *p_4;
  D.44184_79 = D.44163_78 + 208;
  if (D.44184_79 <= 9)
    goto <bb 36>;
  else
    goto <bb 40>;

<bb 40>:
  p_83 = vid_port_ptr_9;
  # DEBUG p => p_83
  x_84 = 0;
  # DEBUG x => x_84
  goto <bb 42>;

<bb 41>:
  D.44163_92 = *p_5;
  rvp[x_12] = D.44163_92;
  x_93 = x_12 + 1;
  # DEBUG x => x_93
  p_94 = p_5 + 1;
  # DEBUG p => p_94
  if (p_94 >= pe_51)
    goto <bb 104> (end);
  else
    goto <bb 42>;

<bb 42>:
  # p_5 = PHI <p_83(40), p_94(41)>
  # x_12 = PHI <x_84(40), x_93(41)>
  # DEBUG x => x_12
  # DEBUG p => p_5
  x.82_85 = (unsigned int) x_12;
  D.44166_86 = x.82_85 <= 510;
  D.44167_87 = p_5 != 0B;
  D.44168_88 = D.44166_86 && D.44167_87;
  if (D.44168_88 != 0)
    goto <bb 43>;
  else
    goto <bb 45>;

<bb 43>:
  D.44163_89 = *p_5;
  if (D.44163_89 != 0)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  D.44163_90 = *p_5;
  D.44184_91 = D.44163_90 + 208;
  if (D.44184_91 <= 9)
    goto <bb 41>;
  else
    goto <bb 45>;

<bb 45>:
  D.44190_95 = rip[0];
  if (D.44190_95 == 0)
    goto <bb 47>;
  else
    goto <bb 46>;

<bb 46>:
  D.44192_96 = rp[0];
  if (D.44192_96 == 0)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4225, session_25(D), 3, "invalid SDP\n");
  goto <bb 104> (end);

<bb 48>:
  D.44193_97 = a_engine_28->cur_payload_map;
  D.44194_98 = switch_core_perform_session_strdup (session_25(D), &rip, "src/switch_core_media.c", &__func__, 4229);
  D.44193_97->remote_sdp_ip = D.44194_98;
  D.44193_99 = a_engine_28->cur_payload_map;
  # DEBUG __nptr => &rp
  D.47982_368 = strtol (&rp, 0B, 10);
  D.47981_381 = D.47982_368;
  D.44195_100 = D.47981_381;
  D.44196_101 = (short unsigned int) D.44195_100;
  D.44193_99->remote_sdp_port = D.44196_101;
  D.44197_102 = rvp[0];
  if (D.44197_102 != 0)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  D.44200_103 = v_engine_29->cur_payload_map;
  D.44201_104 = switch_core_perform_session_strdup (session_25(D), &rip, "src/switch_core_media.c", &__func__, 4233);
  D.44200_103->remote_sdp_ip = D.44201_104;
  D.44200_105 = v_engine_29->cur_payload_map;
  # DEBUG __nptr => &rvp
  D.47985_369 = strtol (&rvp, 0B, 10);
  D.47984_383 = D.47985_369;
  D.44202_106 = D.47984_383;
  D.44203_107 = (short unsigned int) D.44202_106;
  D.44200_105->remote_sdp_port = D.44203_107;
  D.44204_108 = session_25(D)->channel;
  switch_channel_set_flag_value (D.44204_108, 98, 1);
  D.44204_109 = session_25(D)->channel;
  switch_channel_set_flag_value (D.44204_109, 23, 1);

<bb 50>:
  D.44200_110 = v_engine_29->cur_payload_map;
  D.44205_111 = D.44200_110->remote_sdp_ip;
  if (D.44205_111 != 0B)
    goto <bb 51>;
  else
    goto <bb 69>;

<bb 51>:
  D.44200_112 = v_engine_29->cur_payload_map;
  D.44208_113 = D.44200_112->remote_sdp_port;
  if (D.44208_113 != 0)
    goto <bb 52>;
  else
    goto <bb 69>;

<bb 52>:
  D.44200_114 = v_engine_29->cur_payload_map;
  D.44205_115 = D.44200_114->remote_sdp_ip;
  D.39191_116 = __builtin_strcmp (D.44205_115, &rip);
  if (D.39191_116 == 0)
    goto <bb 53>;
  else
    goto <bb 55>;

<bb 53>:
  # DEBUG __nptr => &rvp
  D.47988_370 = strtol (&rvp, 0B, 10);
  D.47987_385 = D.47988_370;
  D.44214_117 = D.47987_385;
  D.44200_118 = v_engine_29->cur_payload_map;
  D.44208_119 = D.44200_118->remote_sdp_port;
  D.44215_120 = (int) D.44208_119;
  if (D.44214_117 == D.44215_120)
    goto <bb 54>;
  else
    goto <bb 55>;

<bb 54>:
  D.44200_121 = v_engine_29->cur_payload_map;
  D.44205_122 = D.44200_121->remote_sdp_ip;
  D.44200_123 = v_engine_29->cur_payload_map;
  D.44208_124 = D.44200_123->remote_sdp_port;
  D.44215_125 = (int) D.44208_124;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4241, session_25(D), 7, "Remote video address:port [%s:%d] has not changed.\n", D.44205_122, D.44215_125);
  goto <bb 69>;

<bb 55>:
  D.44204_126 = session_25(D)->channel;
  switch_channel_set_flag_value (D.44204_126, 98, 1);
  D.44204_127 = session_25(D)->channel;
  switch_channel_set_flag_value (D.44204_127, 23, 1);
  D.44217_128 = v_engine_29->rtp_session;
  D.44218_129 = switch_rtp_ready (D.44217_128);
  if (D.44218_129 != 0)
    goto <bb 56>;
  else
    goto <bb 69>;

<bb 56>:
  rport_130 = 0B;
  # DEBUG rport => rport_130
  remote_rtcp_port_131 = v_engine_29->remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_131
  if (remote_rtcp_port_131 == 0)
    goto <bb 57>;
  else
    goto <bb 59>;

<bb 57>:
  D.44204_132 = session_25(D)->channel;
  rport_133 = switch_channel_get_variable_dup (D.44204_132, "rtp_remote_video_rtcp_port", 1, -1);
  # DEBUG rport => rport_133
  if (rport_133 != 0B)
    goto <bb 58>;
  else
    goto <bb 59>;

<bb 58>:
  # DEBUG __nptr => rport_133
  D.47991_371 = strtol (rport_133, 0B, 10);
  D.47990_387 = D.47991_371;
  D.44225_134 = D.47990_387;
  remote_rtcp_port_135 = (switch_port_t) D.44225_134;
  # DEBUG remote_rtcp_port => remote_rtcp_port_135

<bb 59>:
  # remote_rtcp_port_14 = PHI <remote_rtcp_port_131(56), remote_rtcp_port_131(57), remote_rtcp_port_135(58)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_14
  D.44217_136 = v_engine_29->rtp_session;
  D.44200_137 = v_engine_29->cur_payload_map;
  D.44205_138 = D.44200_137->remote_sdp_ip;
  D.44200_139 = v_engine_29->cur_payload_map;
  D.44208_140 = D.44200_139->remote_sdp_port;
  D.44226_141 = switch_rtp_set_remote_address (D.44217_136, D.44205_138, D.44208_140, remote_rtcp_port_14, 1, &err);
  if (D.44226_141 != 0)
    goto <bb 60>;
  else
    goto <bb 61>;

<bb 60>:
  err.83_142 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4259, session_25(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", err.83_142);
  goto <bb 69>;

<bb 61>:
  D.44200_143 = v_engine_29->cur_payload_map;
  D.44205_144 = D.44200_143->remote_sdp_ip;
  D.44200_145 = v_engine_29->cur_payload_map;
  D.44208_146 = D.44200_145->remote_sdp_port;
  D.44215_147 = (int) D.44208_146;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4261, session_25(D), 7, "VIDEO RTP CHANGING DEST TO: [%s:%d]\n", D.44205_144, D.44215_147);
  D.44233_148 = switch_media_handle_test_media_flag (smh_26, 10);
  if (D.44233_148 == 0)
    goto <bb 62>;
  else
    goto <bb 67>;

<bb 62>:
  D.44204_149 = session_25(D)->channel;
  D.44236_150 = switch_channel_test_flag (D.44204_149, 15);
  if (D.44236_150 == 0)
    goto <bb 63>;
  else
    goto <bb 67>;

<bb 63>:
  D.44204_151 = session_25(D)->channel;
  val_152 = switch_channel_get_variable_dup (D.44204_151, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_152
  if (val_152 == 0B)
    goto <bb 65>;
  else
    goto <bb 64>;

<bb 64>:
  D.44240_153 = switch_true (val_152);
  if (D.44240_153 == 0)
    goto <bb 65>;
  else
    goto <bb 67>;

<bb 65>:
  D.44204_154 = session_25(D)->channel;
  D.44241_155 = switch_channel_test_flag (D.44204_154, 106);
  if (D.44241_155 == 0)
    goto <bb 66>;
  else
    goto <bb 67>;

<bb 66>:
  D.44217_156 = v_engine_29->rtp_session;
  switch_rtp_set_flag (D.44217_156, 7);
  start_video_thread (session_25(D));

<bb 67>:
  D.44244_157 = switch_media_handle_test_media_flag (smh_26, 2);
  if (D.44244_157 != 0)
    goto <bb 68>;
  else
    goto <bb 69>;

<bb 68>:
  v_engine_29->check_frames = 0;

<bb 69>:
  D.44247_158 = a_engine_28->rtp_session;
  D.44248_159 = switch_rtp_ready (D.44247_158);
  if (D.44248_159 != 0)
    goto <bb 70>;
  else
    goto <bb 104> (end);

<bb 70>:
  D.44247_160 = a_engine_28->rtp_session;
  remote_host_161 = switch_rtp_get_remote_host (D.44247_160);
  # DEBUG remote_host => remote_host_161
  D.44247_162 = a_engine_28->rtp_session;
  remote_port_163 = switch_rtp_get_remote_port (D.44247_162);
  # DEBUG remote_port => remote_port_163
  rport_164 = 0B;
  # DEBUG rport => rport_164
  remote_rtcp_port_165 = 0;
  # DEBUG remote_rtcp_port => remote_rtcp_port_165
  D.44252_166 = remote_host_161 != 0B;
  D.44253_167 = remote_port_163 != 0;
  D.44254_168 = D.44252_166 && D.44253_167;
  if (D.44254_168 != 0)
    goto <bb 71>;
  else
    goto <bb 74>;

<bb 71>:
  D.44193_169 = a_engine_28->cur_payload_map;
  D.44256_170 = D.44193_169->remote_sdp_ip;
  D.39206_171 = __builtin_strcmp (remote_host_161, D.44256_170);
  if (D.39206_171 == 0)
    goto <bb 72>;
  else
    goto <bb 74>;

<bb 72>:
  D.44193_172 = a_engine_28->cur_payload_map;
  D.44258_173 = D.44193_172->remote_sdp_port;
  if (D.44258_173 == remote_port_163)
    goto <bb 73>;
  else
    goto <bb 74>;

<bb 73>:
  D.44193_174 = a_engine_28->cur_payload_map;
  D.44256_175 = D.44193_174->remote_sdp_ip;
  D.44193_176 = a_engine_28->cur_payload_map;
  D.44258_177 = D.44193_176->remote_sdp_port;
  D.44260_178 = (int) D.44258_177;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4286, session_25(D), 7, "Remote address:port [%s:%d] has not changed.\n", D.44256_175, D.44260_178);
  status_179 = 11;
  # DEBUG status => status_179
  goto <bb 104> (end);

<bb 74>:
  if (remote_host_161 != 0B)
    goto <bb 75>;
  else
    goto <bb 92>;

<bb 75>:
  __s2_len_180 = 7;
  # DEBUG __s2_len => __s2_len_180
  if (__s2_len_180 <= 3)
    goto <bb 76>;
  else
    goto <bb 81>;

<bb 76>:
  __s1_181 = remote_host_161;
  # DEBUG __s1 => __s1_181
  D.44268_182 = *__s1_181;
  D.44269_183 = (int) D.44268_182;
  D.44270_184 = "0.0.0.0";
  D.44271_185 = MEM[(const unsigned char *)D.44270_184];
  D.44272_186 = (int) D.44271_185;
  __result_187 = D.44269_183 - D.44272_186;
  # DEBUG __result => __result_187
  D.44273_188 = __s2_len_180 != 0;
  D.44274_189 = __result_187 == 0;
  D.44275_190 = D.44273_188 && D.44274_189;
  if (D.44275_190 != 0)
    goto <bb 77>;
  else
    goto <bb 80>;

<bb 77>:
  D.44278_191 = __s1_181 + 1;
  D.44279_192 = *D.44278_191;
  D.44280_193 = (int) D.44279_192;
  D.44281_194 = &"0.0.0.0"[1];
  D.44282_195 = MEM[(const unsigned char *)D.44281_194];
  D.44283_196 = (int) D.44282_195;
  __result_197 = D.44280_193 - D.44283_196;
  # DEBUG __result => __result_197
  D.44284_198 = __s2_len_180 > 1;
  D.44274_199 = __result_197 == 0;
  D.44285_200 = D.44284_198 && D.44274_199;
  if (D.44285_200 != 0)
    goto <bb 78>;
  else
    goto <bb 80>;

<bb 78>:
  D.44288_201 = __s1_181 + 2;
  D.44289_202 = *D.44288_201;
  D.44290_203 = (int) D.44289_202;
  D.44291_204 = &"0.0.0.0"[2];
  D.44292_205 = MEM[(const unsigned char *)D.44291_204];
  D.44293_206 = (int) D.44292_205;
  __result_207 = D.44290_203 - D.44293_206;
  # DEBUG __result => __result_207
  D.44294_208 = __s2_len_180 > 2;
  D.44274_209 = __result_207 == 0;
  D.44295_210 = D.44294_208 && D.44274_209;
  if (D.44295_210 != 0)
    goto <bb 79>;
  else
    goto <bb 80>;

<bb 79>:
  D.44298_211 = __s1_181 + 3;
  D.44299_212 = *D.44298_211;
  D.44300_213 = (int) D.44299_212;
  D.44301_214 = &"0.0.0.0"[3];
  D.44302_215 = MEM[(const unsigned char *)D.44301_214];
  D.44303_216 = (int) D.44302_215;
  __result_217 = D.44300_213 - D.44303_216;
  # DEBUG __result => __result_217

<bb 80>:
  # __result_16 = PHI <__result_187(76), __result_197(77), __result_207(78), __result_217(79)>
  # DEBUG __result => __result_16
  D.39214_218 = __result_16;
  iftmp.84_219 = D.39214_218;
  goto <bb 82>;

<bb 81>:
  iftmp.84_220 = __builtin_strcmp (remote_host_161, "0.0.0.0");

<bb 82>:
  # iftmp.84_19 = PHI <iftmp.84_219(80), iftmp.84_220(81)>
  D.39215_221 = iftmp.84_19;
  if (D.39215_221 == 0)
    goto <bb 91>;
  else
    goto <bb 83>;

<bb 83>:
  __s2_len_222 = 7;
  # DEBUG __s2_len => __s2_len_222
  if (__s2_len_222 <= 3)
    goto <bb 84>;
  else
    goto <bb 89>;

<bb 84>:
  D.44193_223 = a_engine_28->cur_payload_map;
  __s1_224 = D.44193_223->remote_sdp_ip;
  # DEBUG __s1 => __s1_224
  D.44309_225 = *__s1_224;
  D.44310_226 = (int) D.44309_225;
  D.44270_227 = "0.0.0.0";
  D.44271_228 = MEM[(const unsigned char *)D.44270_227];
  D.44272_229 = (int) D.44271_228;
  __result_230 = D.44310_226 - D.44272_229;
  # DEBUG __result => __result_230
  D.44311_231 = __s2_len_222 != 0;
  D.44312_232 = __result_230 == 0;
  D.44313_233 = D.44311_231 && D.44312_232;
  if (D.44313_233 != 0)
    goto <bb 85>;
  else
    goto <bb 88>;

<bb 85>:
  D.44316_234 = __s1_224 + 1;
  D.44317_235 = *D.44316_234;
  D.44318_236 = (int) D.44317_235;
  D.44281_237 = &"0.0.0.0"[1];
  D.44282_238 = MEM[(const unsigned char *)D.44281_237];
  D.44283_239 = (int) D.44282_238;
  __result_240 = D.44318_236 - D.44283_239;
  # DEBUG __result => __result_240
  D.44319_241 = __s2_len_222 > 1;
  D.44312_242 = __result_240 == 0;
  D.44320_243 = D.44319_241 && D.44312_242;
  if (D.44320_243 != 0)
    goto <bb 86>;
  else
    goto <bb 88>;

<bb 86>:
  D.44323_244 = __s1_224 + 2;
  D.44324_245 = *D.44323_244;
  D.44325_246 = (int) D.44324_245;
  D.44291_247 = &"0.0.0.0"[2];
  D.44292_248 = MEM[(const unsigned char *)D.44291_247];
  D.44293_249 = (int) D.44292_248;
  __result_250 = D.44325_246 - D.44293_249;
  # DEBUG __result => __result_250
  D.44326_251 = __s2_len_222 > 2;
  D.44312_252 = __result_250 == 0;
  D.44327_253 = D.44326_251 && D.44312_252;
  if (D.44327_253 != 0)
    goto <bb 87>;
  else
    goto <bb 88>;

<bb 87>:
  D.44330_254 = __s1_224 + 3;
  D.44331_255 = *D.44330_254;
  D.44332_256 = (int) D.44331_255;
  D.44301_257 = &"0.0.0.0"[3];
  D.44302_258 = MEM[(const unsigned char *)D.44301_257];
  D.44303_259 = (int) D.44302_258;
  __result_260 = D.44332_256 - D.44303_259;
  # DEBUG __result => __result_260

<bb 88>:
  # __result_17 = PHI <__result_230(84), __result_240(85), __result_250(86), __result_260(87)>
  # DEBUG __result => __result_17
  D.39223_261 = __result_17;
  iftmp.85_262 = D.39223_261;
  goto <bb 90>;

<bb 89>:
  D.44193_263 = a_engine_28->cur_payload_map;
  D.44256_264 = D.44193_263->remote_sdp_ip;
  iftmp.85_265 = __builtin_strcmp (D.44256_264, "0.0.0.0");

<bb 90>:
  # iftmp.85_20 = PHI <iftmp.85_262(88), iftmp.85_265(89)>
  D.39224_266 = iftmp.85_20;
  if (D.39224_266 == 0)
    goto <bb 91>;
  else
    goto <bb 92>;

<bb 91>:
  D.44193_267 = a_engine_28->cur_payload_map;
  D.44256_268 = D.44193_267->remote_sdp_ip;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4292, session_25(D), 7, "Remote address changed from [%s] to [%s]. Ignoring...\n", D.44256_268, remote_host_161);
  status_269 = 11;
  # DEBUG status => status_269
  goto <bb 104> (end);

<bb 92>:
  D.44204_270 = session_25(D)->channel;
  rport_271 = switch_channel_get_variable_dup (D.44204_270, "rtp_remote_audio_rtcp_port", 1, -1);
  # DEBUG rport => rport_271
  if (rport_271 != 0B)
    goto <bb 93>;
  else
    goto <bb 94>;

<bb 93>:
  # DEBUG __nptr => rport_271
  D.47994_372 = strtol (rport_271, 0B, 10);
  D.47993_389 = D.47994_372;
  D.44336_272 = D.47993_389;
  remote_rtcp_port_273 = (switch_port_t) D.44336_272;
  # DEBUG remote_rtcp_port => remote_rtcp_port_273

<bb 94>:
  # remote_rtcp_port_15 = PHI <remote_rtcp_port_165(92), remote_rtcp_port_273(93)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_15
  D.44247_274 = a_engine_28->rtp_session;
  D.44193_275 = a_engine_28->cur_payload_map;
  D.44256_276 = D.44193_275->remote_sdp_ip;
  D.44193_277 = a_engine_28->cur_payload_map;
  D.44258_278 = D.44193_277->remote_sdp_port;
  D.44337_279 = switch_rtp_set_remote_address (D.44247_274, D.44256_276, D.44258_278, remote_rtcp_port_15, 1, &err);
  if (D.44337_279 != 0)
    goto <bb 95>;
  else
    goto <bb 96>;

<bb 95>:
  err.83_280 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4305, session_25(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.83_280);
  status_281 = 9;
  # DEBUG status => status_281
  goto <bb 104> (end);

<bb 96>:
  D.44193_282 = a_engine_28->cur_payload_map;
  D.44256_283 = D.44193_282->remote_sdp_ip;
  D.44193_284 = a_engine_28->cur_payload_map;
  D.44258_285 = D.44193_284->remote_sdp_port;
  D.44260_286 = (int) D.44258_285;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4308, session_25(D), 7, "AUDIO RTP CHANGING DEST TO: [%s:%d]\n", D.44256_283, D.44260_286);
  D.44343_287 = switch_media_handle_test_media_flag (smh_26, 10);
  if (D.44343_287 == 0)
    goto <bb 97>;
  else
    goto <bb 101>;

<bb 97>:
  D.44204_288 = session_25(D)->channel;
  val_289 = switch_channel_get_variable_dup (D.44204_288, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_289
  if (val_289 == 0B)
    goto <bb 99>;
  else
    goto <bb 98>;

<bb 98>:
  D.44347_290 = switch_true (val_289);
  if (D.44347_290 == 0)
    goto <bb 99>;
  else
    goto <bb 101>;

<bb 99>:
  D.44204_291 = session_25(D)->channel;
  D.44348_292 = switch_channel_test_flag (D.44204_291, 106);
  if (D.44348_292 == 0)
    goto <bb 100>;
  else
    goto <bb 101>;

<bb 100>:
  D.44247_293 = a_engine_28->rtp_session;
  switch_rtp_set_flag (D.44247_293, 7);

<bb 101>:
  D.44351_294 = switch_media_handle_test_media_flag (smh_26, 2);
  if (D.44351_294 != 0)
    goto <bb 102>;
  else
    goto <bb 103>;

<bb 102>:
  a_engine_28->check_frames = 0;

<bb 103>:
  status_295 = 0;
  # DEBUG status => status_295

  # status_13 = PHI <status_24(14), status_24(26), status_24(28), status_24(36), status_24(41), status_24(47), status_24(69), status_179(73), status_269(91), status_281(95), status_295(103)>
end:
  # DEBUG status => status_13
  D.44137_296 = status_13;

<bb 105>:
  # D.44137_18 = PHI <D.44137_27(5), D.44137_296(104)>
  return D.44137_18;

}



;; Function switch_core_media_check_nat (switch_core_media_check_nat)

Iterations: 0
switch_core_media_check_nat (struct switch_media_handle_t * smh, const char * network_ip)
{
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_check_nat";
  switch_bool_t D.44130;
  char * D.44129;
  switch_bool_t D.44127;
  char * D.44125;
  struct switch_core_media_params_t * D.44124;
  int iftmp.81;
  int D.44120;

<bb 2>:
  if (network_ip_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("network_ip", "src/switch_core_media.c", 4331, &__PRETTY_FUNCTION__);

<bb 4>:
  D.44124_4 = smh_3(D)->mparams;
  D.44125_5 = D.44124_4->extsipip;
  if (D.44125_5 != 0B)
    goto <bb 5>;
  else
    goto <bb 8>;

<bb 5>:
  D.44127_6 = switch_check_network_list_ip_token (network_ip_2(D), "loopback.auto", 0B);
  if (D.44127_6 == 0)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 6>:
  D.44124_7 = smh_3(D)->mparams;
  D.44129_8 = D.44124_7->local_network;
  D.44130_9 = switch_check_network_list_ip_token (network_ip_2(D), D.44129_8, 0B);
  if (D.44130_9 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  iftmp.81_10 = 1;
  goto <bb 9>;

<bb 8>:
  iftmp.81_11 = 0;

<bb 9>:
  # iftmp.81_1 = PHI <iftmp.81_10(7), iftmp.81_11(8)>
  D.44120_12 = iftmp.81_1;
  return D.44120_12;

}



;; Function switch_core_media_ext_address_lookup (switch_core_media_ext_address_lookup)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_ext_address_lookup.
Processing frequency atoi
  Called by switch_core_media_ext_address_lookup that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_ext_address_lookup.
Processing frequency _zstr
  Called by switch_core_media_ext_address_lookup that is normal or hot
Inlining atoi to switch_core_media_ext_address_lookup with frequency 1000
Inlining _zstr to switch_core_media_ext_address_lookup with frequency 1000
Iterations: 1
Merging blocks 12 and 34
Merging blocks 14 and 36
Merging blocks 39 and 35
Merging blocks 12 and 33


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement error = "";

Updating SSA information for statement myport_10 = *port_9(D);

Updating SSA information for statement pool_14 = switch_core_session_get_pool (session_13(D));



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4351, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_15 = session_13(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8

Updating SSA information for statement D.44077_19 = strncasecmp (sourceip_17(D), "host:", 5);



Registering new PHI nodes in block #9

Updating SSA information for statement D.44081_21 = switch_stun_host_lookup (D.44080_20, pool_14);

Updating SSA information for statement *ip_22(D) = D.44081_21;

Updating SSA information for statement D.44082_23 = *ip_22(D);



Registering new PHI nodes in block #10

Updating SSA information for statement D.44084_25 = strncasecmp (sourceip_17(D), "stun:", 5);



Registering new PHI nodes in block #11

Updating SSA information for statement stun_ip_27 = __strdup (D.44080_26);

Updating SSA information for statement p_28 = __builtin_strchr (stun_ip_27, 58);



Registering new PHI nodes in block #12

Updating SSA information for statement *p_28 = 0;

Updating SSA information for statement D.48010_87 = strtol (p_29, 0B, 10);

Updating SSA information for statement D.48009 = D.48010_87;

Updating SSA information for statement iport_30 = D.48009;



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement D.48013_88 = MEM[(const char *)stun_ip_27];



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17

Updating SSA information for statement D.48012 = D.48014_89;

Updating SSA information for statement D.44093_34 = D.48012;



Registering new PHI nodes in block #19



Registering new PHI nodes in block #22



Registering new PHI nodes in block #20

Updating SSA information for statement status_36 = switch_stun_lookup (ip_22(D), port_9(D), stun_ip_27, stun_port_5, &error, pool_14);



Registering new PHI nodes in block #21

Updating SSA information for statement switch_sleep (100000);



Registering new PHI nodes in block #23



Registering new PHI nodes in block #24

Updating SSA information for statement error.80_39 = error;

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4390, 0B, 3, "STUN Failed! %s:%d [%s]\n", stun_ip_27, D.44099_38, error.80_39);



Registering new PHI nodes in block #25

Updating SSA information for statement D.44082_40 = *ip_22(D);



Registering new PHI nodes in block #26

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4394, 0B, 3, "STUN Failed! No IP returned\n");



Registering new PHI nodes in block #27

Updating SSA information for statement D.44082_41 = *ip_22(D);

Updating SSA information for statement D.44103_42 = *port_9(D);

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4397, 0B, 7, "STUN Success [%s]:[%d]\n", D.44082_41, D.44104_43);

Updating SSA information for statement D.44103_45 = *port_9(D);



Registering new PHI nodes in block #28

Updating SSA information for statement D.44082_46 = *ip_22(D);

Updating SSA information for statement D.44108_47 = smh_15->mparams;

Updating SSA information for statement D.44109_48 = D.44108_47->rtpip;

Updating SSA information for statement D.39263_49 = __builtin_strcmp (D.44082_46, D.44109_48);



Registering new PHI nodes in block #29

Updating SSA information for statement D.44082_50 = *ip_22(D);

Updating SSA information for statement D.44103_51 = *port_9(D);

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4401, 0B, 7, "STUN Not Required ip and port match. [%s]:[%d]\n", D.44082_50, D.44104_52);



Registering new PHI nodes in block #30

Updating SSA information for statement D.44108_53 = smh_15->mparams;

Updating SSA information for statement D.44111_54 = switch_core_perform_session_strdup (session_13(D), stun_ip_27, "src/switch_core_media.c", &__func__, 4403);

Updating SSA information for statement D.44108_53->stun_ip = D.44111_54;

Updating SSA information for statement D.44108_55 = smh_15->mparams;

Updating SSA information for statement D.44108_55->stun_port = stun_port_5;

Updating SSA information for statement D.44108_56 = smh_15->mparams;

Updating SSA information for statement D.44108_57 = smh_15->mparams;

Updating SSA information for statement D.44112_58 = D.44108_57->stun_flags;

Updating SSA information for statement D.44108_57->stun_flags = D.44113_59;



Registering new PHI nodes in block #18

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 4378, 0B, 3, "STUN Failed! NO STUN SERVER\n");



Registering new PHI nodes in block #31

Updating SSA information for statement *ip_22(D) = sourceip_17(D);



Registering new PHI nodes in block #32



Registering new PHI nodes in block #33

Updating SSA information for statement free (stun_ip_6);



Registering new PHI nodes in block #34



Registering new PHI nodes in block #35



Symbols to be put in SSA form

{ .MEM D.48009 D.48012 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 36
Number of blocks to update: 35 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 


Scope blocks after cleanups:

{ Scope block #0 
  char * error;
  switch_status_t status;
  int x;
  switch_port_t myport;
  switch_port_t stun_port;
  char * stun_ip;
  struct switch_media_handle_t * smh;
  struct switch_memory_pool_t * pool;
  static const char __PRETTY_FUNCTION__[37] = "switch_core_media_ext_address_lookup";
  static const char __func__[37] = "switch_core_media_ext_address_lookup";
  void out = <<< error >>>; (unused)

  { Scope block #303 
    char * p;

    { Scope block #304 src/switch_core_media.c:4377 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #305 Originating from :#0 

      }

    }

    { Scope block #306 
      int iport;

      { Scope block #307 src/switch_core_media.c:4371 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #308 Originating from :#0 

        }

      }

    }

    { Scope block #309 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

  }

}
switch_core_media_ext_address_lookup (struct switch_core_session_t * session, char * * ip, switch_port_t * port, const char * sourceip)
{
  int D.48014;
  const char D.48013;
  int D.48012;
  int D.48010;
  int D.48009;
  int iport;
  char * p;
  static const char __func__[37] = "switch_core_media_ext_address_lookup";
  static const char __PRETTY_FUNCTION__[37] = "switch_core_media_ext_address_lookup";
  struct switch_memory_pool_t * pool;
  struct switch_media_handle_t * smh;
  char * stun_ip;
  switch_port_t stun_port;
  switch_port_t myport;
  int x;
  switch_status_t status;
  char * error;
  uint32_t D.44113;
  uint32_t D.44112;
  char * D.44111;
  char * D.44109;
  struct switch_core_media_params_t * D.44108;
  int D.39263;
  int D.44104;
  switch_port_t D.44103;
  char * error.80;
  int D.44099;
  int D.44093;
  unsigned int D.44090;
  unsigned int iport.79;
  int D.44084;
  char * D.44082;
  char * D.44081;
  const char * D.44080;
  int D.44077;
  switch_status_t D.44074;

<bb 2>:
  error = "";
  status_8 = 1;
  # DEBUG status => status_8
  myport_10 = *port_9(D);
  # DEBUG myport => myport_10
  stun_port_11 = 3478;
  # DEBUG stun_port => stun_port_11
  stun_ip_12 = 0B;
  # DEBUG stun_ip => stun_ip_12
  pool_14 = switch_core_session_get_pool (session_13(D));
  # DEBUG pool => pool_14
  if (session_13(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4351, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_15 = session_13(D)->media_handle;
  # DEBUG smh => smh_15
  if (smh_15 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.44074_16 = 1;
  goto <bb 35>;

<bb 6>:
  if (sourceip_17(D) == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.44074_18 = status_8;
  goto <bb 35>;

<bb 8>:
  D.44077_19 = strncasecmp (sourceip_17(D), "host:", 5);
  if (D.44077_19 == 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.44080_20 = sourceip_17(D) + 5;
  D.44081_21 = switch_stun_host_lookup (D.44080_20, pool_14);
  *ip_22(D) = D.44081_21;
  D.44082_23 = *ip_22(D);
  status_24 = D.44082_23 == 0B;
  # DEBUG status => status_24
  goto <bb 32> (out);

<bb 10>:
  D.44084_25 = strncasecmp (sourceip_17(D), "stun:", 5);
  if (D.44084_25 == 0)
    goto <bb 11>;
  else
    goto <bb 31>;

<bb 11>:
  D.44080_26 = sourceip_17(D) + 5;
  stun_ip_27 = __strdup (D.44080_26);
  # DEBUG stun_ip => stun_ip_27
  p_28 = __builtin_strchr (stun_ip_27, 58);
  # DEBUG p => p_28
  if (p_28 != 0B)
    goto <bb 12>;
  else
    goto <bb 14>;

<bb 12>:
  *p_28 = 0;
  p_29 = p_28 + 1;
  # DEBUG p => p_29
  # DEBUG __nptr => p_29
  D.48010_87 = strtol (p_29, 0B, 10);
  D.48009_91 = D.48010_87;
  iport_30 = D.48009_91;
  # DEBUG iport => NULL
  iport.79_31 = (unsigned int) iport_30;
  D.44090_32 = iport.79_31 + 4294967295;
  if (D.44090_32 <= 65533)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  stun_port_33 = (switch_port_t) iport_30;
  # DEBUG stun_port => stun_port_33

<bb 14>:
  # stun_port_5 = PHI <stun_port_11(11), stun_port_11(12), stun_port_33(13)>
  # DEBUG stun_port => stun_port_5
  # DEBUG s => stun_ip_27
  if (stun_ip_27 == 0B)
    goto <bb 17>;
  else
    goto <bb 15>;

<bb 15>:
  D.48013_88 = MEM[(const char *)stun_ip_27];
  if (D.48013_88 == 0)
    goto <bb 17>;
  else
    goto <bb 16>;

<bb 16>:

<bb 17>:
  # D.48014_89 = PHI <1(14), 1(15), 0(16)>
  D.48012_92 = D.48014_89;
  D.44093_34 = D.48012_92;
  if (D.44093_34 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4378, 0B, 3, "STUN Failed! NO STUN SERVER\n");
  goto <bb 32> (out);

<bb 19>:
  x_35 = 0;
  # DEBUG x => x_35
  goto <bb 22>;

<bb 20>:
  status_36 = switch_stun_lookup (ip_22(D), port_9(D), stun_ip_27, stun_port_5, &error, pool_14);
  # DEBUG status => status_36
  if (status_36 != 0)
    goto <bb 21>;
  else
    goto <bb 23>;

<bb 21>:
  switch_sleep (100000);
  x_37 = x_4 + 1;
  # DEBUG x => x_37

<bb 22>:
  # status_1 = PHI <status_8(19), status_36(21)>
  # x_4 = PHI <x_35(19), x_37(21)>
  # DEBUG x => x_4
  # DEBUG status => status_1
  if (x_4 <= 4)
    goto <bb 20>;
  else
    goto <bb 23>;

<bb 23>:
  # status_2 = PHI <status_36(20), status_1(22)>
  # DEBUG status => status_2
  if (status_2 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  D.44099_38 = (int) stun_port_5;
  error.80_39 = error;
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4390, 0B, 3, "STUN Failed! %s:%d [%s]\n", stun_ip_27, D.44099_38, error.80_39);
  goto <bb 32> (out);

<bb 25>:
  D.44082_40 = *ip_22(D);
  if (D.44082_40 == 0B)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4394, 0B, 3, "STUN Failed! No IP returned\n");
  goto <bb 32> (out);

<bb 27>:
  D.44082_41 = *ip_22(D);
  D.44103_42 = *port_9(D);
  D.44104_43 = (int) D.44103_42;
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4397, 0B, 7, "STUN Success [%s]:[%d]\n", D.44082_41, D.44104_43);
  status_44 = 0;
  # DEBUG status => status_44
  D.44103_45 = *port_9(D);
  if (D.44103_45 == myport_10)
    goto <bb 28>;
  else
    goto <bb 30>;

<bb 28>:
  D.44082_46 = *ip_22(D);
  D.44108_47 = smh_15->mparams;
  D.44109_48 = D.44108_47->rtpip;
  D.39263_49 = __builtin_strcmp (D.44082_46, D.44109_48);
  if (D.39263_49 == 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  D.44082_50 = *ip_22(D);
  D.44103_51 = *port_9(D);
  D.44104_52 = (int) D.44103_51;
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 4401, 0B, 7, "STUN Not Required ip and port match. [%s]:[%d]\n", D.44082_50, D.44104_52);
  goto <bb 32> (out);

<bb 30>:
  D.44108_53 = smh_15->mparams;
  D.44111_54 = switch_core_perform_session_strdup (session_13(D), stun_ip_27, "src/switch_core_media.c", &__func__, 4403);
  D.44108_53->stun_ip = D.44111_54;
  D.44108_55 = smh_15->mparams;
  D.44108_55->stun_port = stun_port_5;
  D.44108_56 = smh_15->mparams;
  D.44108_57 = smh_15->mparams;
  D.44112_58 = D.44108_57->stun_flags;
  D.44113_59 = D.44112_58 | 1;
  D.44108_57->stun_flags = D.44113_59;
  goto <bb 32> (out);

<bb 31>:
  *ip_22(D) = sourceip_17(D);
  status_60 = 0;
  # DEBUG status => status_60

  # status_3 = PHI <status_24(9), status_8(18), status_2(24), status_2(26), status_44(30), status_60(31), status_44(29)>
  # stun_ip_6 = PHI <stun_ip_12(9), stun_ip_27(18), stun_ip_27(24), stun_ip_27(26), stun_ip_27(30), stun_ip_12(31), stun_ip_27(29)>
out:
  # DEBUG stun_ip => stun_ip_6
  # DEBUG status => status_3
  if (stun_ip_6 != 0B)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  free (stun_ip_6);
  stun_ip_61 = 0B;
  # DEBUG stun_ip => stun_ip_61

<bb 34>:
  D.44074_62 = status_3;

<bb 35>:
  # D.44074_7 = PHI <D.44074_16(5), D.44074_18(7), D.44074_62(34)>
  return D.44074_7;

}



;; Function switch_core_media_reset_autofix (switch_core_media_reset_autofix)

Iterations: 0
switch_core_media_reset_autofix (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_reset_autofix";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  unsigned int D.44068;
  struct switch_rtp_engine_t[2] * D.44067;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4425, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 6>;
  else
    goto <bb 5>;

<bb 5>:
  D.44067_3 = &smh_2->engines;
  D.44068_5 = type_4(D) * 11416;
  engine_6 = D.44067_3 + D.44068_5;
  # DEBUG engine => engine_6
  engine_6->check_frames = 0;
  engine_6->last_ts = 0;

<bb 6>:
  return;

}



;; Function switch_core_media_choose_port (switch_core_media_choose_port)

Considering inline candidate switch_core_media_ext_address_lookup.
Not inlining: code size would grow by 159.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_choose_port.
Processing frequency _zstr
  Called by switch_core_media_choose_port that is normal or hot
Considering inline candidate switch_core_media_check_nat.
Not inlining: code size would grow by 19.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_choose_port.
Processing frequency _zstr
  Called by switch_core_media_choose_port that is normal or hot
Considering inline candidate switch_media_type2str.
 Inlining switch_media_type2str into switch_core_media_choose_port.
Processing frequency switch_media_type2str
  Called by switch_core_media_choose_port that is normal or hot
Inlining switch_media_type2str to switch_core_media_choose_port with frequency 1000
Inlining _zstr to switch_core_media_choose_port with frequency 1000
Inlining _zstr to switch_core_media_choose_port with frequency 1000
Considering inline candidate switch_core_media_ext_address_lookup.
Not inlining: code size would grow by 159.
Considering inline candidate switch_core_media_check_nat.
Not inlining: code size would grow by 19.
Iterations: 1
Merging blocks 2 and 32
Merging blocks 15 and 37
Merging blocks 18 and 42
Merging blocks 35 and 31
Merging blocks 40 and 36
Merging blocks 45 and 41


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #4



Registering new PHI nodes in block #3



Registering new PHI nodes in block #5

Updating SSA information for statement D.48019 = D.48020_104;

Updating SSA information for statement tstr_6 = D.48019;

Updating SSA information for statement vname = "";



Registering new PHI nodes in block #7

Updating SSA information for statement smh_8 = session_7(D)->media_handle;



Registering new PHI nodes in block #8



Registering new PHI nodes in block #9

Updating SSA information for statement D.44014_13 = smh_8->mparams;

Updating SSA information for statement lookup_rtpip.76_14 = D.44014_13->rtpip;

Updating SSA information for statement lookup_rtpip = lookup_rtpip.76_14;



Registering new PHI nodes in block #10

Updating SSA information for statement D.44020_16 = session_7(D)->channel;

Updating SSA information for statement D.44021_17 = switch_channel_test_flag (D.44020_16, 15);



Registering new PHI nodes in block #11

Updating SSA information for statement D.44020_18 = session_7(D)->channel;

Updating SSA information for statement D.44023_19 = switch_channel_test_flag (D.44020_18, 29);



Registering new PHI nodes in block #12

Updating SSA information for statement D.44025_20 = engine_12->adv_sdp_port;



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement sdp_port.77_22 = engine_12->local_sdp_port;



Registering new PHI nodes in block #15

Updating SSA information for statement D.44014_23 = smh_8->mparams;

Updating SSA information for statement lookup_rtpip.76_24 = D.44014_23->rtpip;

Updating SSA information for statement sdp_port.77_25 = engine_12->local_sdp_port;

Updating SSA information for statement switch_rtp_release_port (lookup_rtpip.76_24, sdp_port.77_25);



Registering new PHI nodes in block #16

Updating SSA information for statement D.44014_26 = smh_8->mparams;

Updating SSA information for statement lookup_rtpip.76_27 = D.44014_26->rtpip;

Updating SSA information for statement D.44029_28 = switch_rtp_request_port (lookup_rtpip.76_27);

Updating SSA information for statement engine_12->local_sdp_port = D.44029_28;

Updating SSA information for statement sdp_port.77_29 = engine_12->local_sdp_port;



Registering new PHI nodes in block #17

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4475, session_7(D), 2, "No %s RTP ports available!\n", tstr_6);



Registering new PHI nodes in block #18

Updating SSA information for statement D.44014_31 = smh_8->mparams;

Updating SSA information for statement lookup_rtpip.76_32 = D.44014_31->rtpip;

Updating SSA information for statement engine_12->local_sdp_ip = lookup_rtpip.76_32;

Updating SSA information for statement sdp_port.77_33 = engine_12->local_sdp_port;

Updating SSA information for statement sdp_port = sdp_port.77_33;

Updating SSA information for statement D.44014_34 = smh_8->mparams;

Updating SSA information for statement D.44034_35 = D.44014_34->remote_ip;



Registering new PHI nodes in block #19

Updating SSA information for statement D.48026_105 = MEM[(const char *)D.44034_35];



Registering new PHI nodes in block #20



Registering new PHI nodes in block #21

Updating SSA information for statement D.48025 = D.48027_106;

Updating SSA information for statement D.44035_36 = D.48025;



Registering new PHI nodes in block #22

Updating SSA information for statement D.44014_37 = smh_8->mparams;

Updating SSA information for statement D.44034_38 = D.44014_37->remote_ip;

Updating SSA information for statement D.44037_39 = switch_core_media_check_nat (smh_8, D.44034_38);



Registering new PHI nodes in block #23

Updating SSA information for statement sdp_port.77_40 = engine_12->local_sdp_port;

Updating SSA information for statement switch_nat_add_mapping (sdp_port.77_40, 0, &sdp_port, 0);

Updating SSA information for statement switch_snprintf (&vname, 128, "rtp_adv_%s_ip", tstr_6);

Updating SSA information for statement D.44020_41 = session_7(D)->channel;

Updating SSA information for statement use_ip_42 = switch_channel_get_variable_dup (D.44020_41, &vname, 1, -1);



Registering new PHI nodes in block #24

Updating SSA information for statement D.44014_43 = smh_8->mparams;

Updating SSA information for statement D.44041_44 = D.44014_43->extrtpip;



Registering new PHI nodes in block #25

Updating SSA information for statement D.48030_107 = MEM[(const char *)D.44041_44];



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27

Updating SSA information for statement D.48029 = D.48031_108;

Updating SSA information for statement D.44042_45 = D.48029;



Registering new PHI nodes in block #28

Updating SSA information for statement D.44014_46 = smh_8->mparams;

Updating SSA information for statement use_ip_47 = D.44014_46->extrtpip;



Registering new PHI nodes in block #29



Registering new PHI nodes in block #30

Updating SSA information for statement D.44047_48 = switch_core_media_ext_address_lookup (session_7(D), &lookup_rtpip, &sdp_port, use_ip_1);



Registering new PHI nodes in block #31



Registering new PHI nodes in block #32

Updating SSA information for statement use_ip_50 = lookup_rtpip;



Registering new PHI nodes in block #33

Updating SSA information for statement D.44014_51 = smh_8->mparams;

Updating SSA information for statement use_ip_52 = D.44014_51->rtpip;



Registering new PHI nodes in block #34

Updating SSA information for statement D.44014_53 = smh_8->mparams;

Updating SSA information for statement use_ip_54 = D.44014_53->rtpip;



Registering new PHI nodes in block #35

Updating SSA information for statement sdp_port.78_55 = sdp_port;

Updating SSA information for statement engine_12->adv_sdp_port = sdp_port.78_55;

Updating SSA information for statement D.44014_56 = smh_8->mparams;

Updating SSA information for statement D.44014_57 = smh_8->mparams;

Updating SSA information for statement D.44052_58 = switch_core_perform_session_strdup (session_7(D), use_ip_2, "src/switch_core_media.c", &__func__, 4515);

Updating SSA information for statement D.44014_57->extrtpip = D.44052_58;

Updating SSA information for statement D.44041_59 = D.44014_57->extrtpip;

Updating SSA information for statement D.44014_57->adv_sdp_audio_ip = D.44041_59;

Updating SSA information for statement D.44053_60 = D.44014_57->adv_sdp_audio_ip;

Updating SSA information for statement engine_12->adv_sdp_ip = D.44053_60;



Registering new PHI nodes in block #36

Updating SSA information for statement D.44020_61 = session_7(D)->channel;

Updating SSA information for statement D.44056_62 = engine_12->local_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44020_61, "local_media_ip", D.44056_62, 1);

Updating SSA information for statement D.44020_63 = session_7(D)->channel;

Updating SSA information for statement sdp_port.78_64 = sdp_port;

Updating SSA information for statement switch_channel_set_variable_printf (D.44020_63, "local_media_port", "%d", D.44057_65);

Updating SSA information for statement D.44020_66 = session_7(D)->channel;

Updating SSA information for statement D.44058_67 = engine_12->adv_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44020_66, "advertised_media_ip", D.44058_67, 1);



Registering new PHI nodes in block #37

Updating SSA information for statement D.44020_68 = session_7(D)->channel;

Updating SSA information for statement D.44058_69 = engine_12->adv_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.44020_68, "local_video_ip", D.44058_69, 1);

Updating SSA information for statement D.44020_70 = session_7(D)->channel;

Updating SSA information for statement sdp_port.78_71 = sdp_port;

Updating SSA information for statement switch_channel_set_variable_printf (D.44020_70, "local_video_port", "%d", D.44057_72);



Registering new PHI nodes in block #38



Registering new PHI nodes in block #39



Registering new PHI nodes in block #6

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4450, &__PRETTY_FUNCTION__);



Symbols to be put in SSA form

{ .MEM D.48019 D.48025 D.48029 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 40
Number of blocks to update: 39 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 


Scope blocks after cleanups:

{ Scope block #0 
  char * lookup_rtpip;
  switch_port_t sdp_port;
  const char * use_ip;
  struct switch_rtp_engine_t * engine;
  struct switch_media_handle_t * smh;
  const char * tstr;
  char vname[128];
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_choose_port";
  static const char __func__[30] = "switch_core_media_choose_port";

  { Scope block #310 src/switch_core_media.c:4493 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #311 Originating from :#0 

    }

  }

  { Scope block #312 src/switch_core_media.c:4485 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #313 Originating from :#0 

    }

  }

  { Scope block #314 src/switch_core_media.c:4447 Originating from :  static const char * switch_media_type2str (switch_media_type_t); 
    switch_media_type_t type; (unused)

    { Scope block #315 Originating from :#0 

    }

  }

}
switch_core_media_choose_port (struct switch_core_session_t * session, switch_media_type_t type, int force)
{
  int D.48031;
  const char D.48030;
  int D.48029;
  int D.48027;
  const char D.48026;
  int D.48025;
  const char * D.48020;
  const char * D.48019;
  static const char __func__[30] = "switch_core_media_choose_port";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_choose_port";
  char vname[128];
  const char * tstr;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  const char * use_ip;
  switch_port_t sdp_port;
  char * lookup_rtpip;
  char * D.44058;
  int D.44057;
  char * D.44056;
  char * D.44053;
  char * D.44052;
  switch_port_t sdp_port.78;
  switch_status_t D.44047;
  int D.44042;
  char * D.44041;
  int D.44037;
  int D.44035;
  char * D.44034;
  switch_port_t D.44029;
  switch_port_t sdp_port.77;
  switch_port_t D.44025;
  uint32_t D.44023;
  uint32_t D.44021;
  struct switch_channel_t * D.44020;
  char * lookup_rtpip.76;
  struct switch_core_media_params_t * D.44014;
  unsigned int D.44013;
  struct switch_rtp_engine_t[2] * D.44012;
  switch_status_t D.44011;

<bb 2>:
  use_ip_4 = 0B;
  # DEBUG use_ip => use_ip_4
  # DEBUG type => type_5(D)
  switch (type_5(D)) <default: <L32>, case 0: <L33>, case 1: <L31>>

<L31>:
  goto <bb 5> (<L33>);

<L32>:

  # D.48020_104 = PHI <"audio"(2), "video"(3), "!ERR"(4)>
<L33>:
  D.48019_109 = D.48020_104;
  tstr_6 = D.48019_109;
  # DEBUG tstr => NULL
  vname = "";
  if (session_7(D) == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  __assert_fail ("session", "src/switch_core_media.c", 4450, &__PRETTY_FUNCTION__);

<bb 7>:
  smh_8 = session_7(D)->media_handle;
  # DEBUG smh => smh_8
  if (smh_8 == 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.44011_9 = 1;
  goto <bb 39>;

<bb 9>:
  D.44012_10 = &smh_8->engines;
  D.44013_11 = type_5(D) * 11416;
  engine_12 = D.44012_10 + D.44013_11;
  # DEBUG engine => engine_12
  D.44014_13 = smh_8->mparams;
  lookup_rtpip.76_14 = D.44014_13->rtpip;
  lookup_rtpip = lookup_rtpip.76_14;
  if (force_15(D) == 0)
    goto <bb 10>;
  else
    goto <bb 14>;

<bb 10>:
  D.44020_16 = session_7(D)->channel;
  D.44021_17 = switch_channel_test_flag (D.44020_16, 15);
  if (D.44021_17 != 0)
    goto <bb 13>;
  else
    goto <bb 11>;

<bb 11>:
  D.44020_18 = session_7(D)->channel;
  D.44023_19 = switch_channel_test_flag (D.44020_18, 29);
  if (D.44023_19 != 0)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:
  D.44025_20 = engine_12->adv_sdp_port;
  if (D.44025_20 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  D.44011_21 = 0;
  goto <bb 39>;

<bb 14>:
  sdp_port.77_22 = engine_12->local_sdp_port;
  if (sdp_port.77_22 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.44014_23 = smh_8->mparams;
  lookup_rtpip.76_24 = D.44014_23->rtpip;
  sdp_port.77_25 = engine_12->local_sdp_port;
  switch_rtp_release_port (lookup_rtpip.76_24, sdp_port.77_25);

<bb 16>:
  D.44014_26 = smh_8->mparams;
  lookup_rtpip.76_27 = D.44014_26->rtpip;
  D.44029_28 = switch_rtp_request_port (lookup_rtpip.76_27);
  engine_12->local_sdp_port = D.44029_28;
  sdp_port.77_29 = engine_12->local_sdp_port;
  if (sdp_port.77_29 == 0)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4475, session_7(D), 2, "No %s RTP ports available!\n", tstr_6);
  D.44011_30 = 1;
  goto <bb 39>;

<bb 18>:
  D.44014_31 = smh_8->mparams;
  lookup_rtpip.76_32 = D.44014_31->rtpip;
  engine_12->local_sdp_ip = lookup_rtpip.76_32;
  sdp_port.77_33 = engine_12->local_sdp_port;
  sdp_port = sdp_port.77_33;
  D.44014_34 = smh_8->mparams;
  D.44034_35 = D.44014_34->remote_ip;
  # DEBUG s => D.44034_35
  if (D.44034_35 == 0B)
    goto <bb 21>;
  else
    goto <bb 19>;

<bb 19>:
  D.48026_105 = MEM[(const char *)D.44034_35];
  if (D.48026_105 == 0)
    goto <bb 21>;
  else
    goto <bb 20>;

<bb 20>:

<bb 21>:
  # D.48027_106 = PHI <1(18), 1(19), 0(20)>
  D.48025_110 = D.48027_106;
  D.44035_36 = D.48025_110;
  if (D.44035_36 == 0)
    goto <bb 22>;
  else
    goto <bb 34>;

<bb 22>:
  D.44014_37 = smh_8->mparams;
  D.44034_38 = D.44014_37->remote_ip;
  D.44037_39 = switch_core_media_check_nat (smh_8, D.44034_38);
  if (D.44037_39 != 0)
    goto <bb 23>;
  else
    goto <bb 34>;

<bb 23>:
  sdp_port.77_40 = engine_12->local_sdp_port;
  switch_nat_add_mapping (sdp_port.77_40, 0, &sdp_port, 0);
  switch_snprintf (&vname, 128, "rtp_adv_%s_ip", tstr_6);
  D.44020_41 = session_7(D)->channel;
  use_ip_42 = switch_channel_get_variable_dup (D.44020_41, &vname, 1, -1);
  # DEBUG use_ip => use_ip_42
  if (use_ip_42 == 0B)
    goto <bb 24>;
  else
    goto <bb 29>;

<bb 24>:
  D.44014_43 = smh_8->mparams;
  D.44041_44 = D.44014_43->extrtpip;
  # DEBUG s => D.44041_44
  if (D.44041_44 == 0B)
    goto <bb 27>;
  else
    goto <bb 25>;

<bb 25>:
  D.48030_107 = MEM[(const char *)D.44041_44];
  if (D.48030_107 == 0)
    goto <bb 27>;
  else
    goto <bb 26>;

<bb 26>:

<bb 27>:
  # D.48031_108 = PHI <1(24), 1(25), 0(26)>
  D.48029_111 = D.48031_108;
  D.44042_45 = D.48029_111;
  if (D.44042_45 == 0)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  D.44014_46 = smh_8->mparams;
  use_ip_47 = D.44014_46->extrtpip;
  # DEBUG use_ip => use_ip_47

<bb 29>:
  # use_ip_1 = PHI <use_ip_42(23), use_ip_42(27), use_ip_47(28)>
  # DEBUG use_ip => use_ip_1
  if (use_ip_1 != 0B)
    goto <bb 30>;
  else
    goto <bb 33>;

<bb 30>:
  D.44047_48 = switch_core_media_ext_address_lookup (session_7(D), &lookup_rtpip, &sdp_port, use_ip_1);
  if (D.44047_48 != 0)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  D.44011_49 = 1;
  goto <bb 39>;

<bb 32>:
  use_ip_50 = lookup_rtpip;
  # DEBUG use_ip => use_ip_50
  goto <bb 35>;

<bb 33>:
  D.44014_51 = smh_8->mparams;
  use_ip_52 = D.44014_51->rtpip;
  # DEBUG use_ip => use_ip_52
  goto <bb 35>;

<bb 34>:
  D.44014_53 = smh_8->mparams;
  use_ip_54 = D.44014_53->rtpip;
  # DEBUG use_ip => use_ip_54

<bb 35>:
  # use_ip_2 = PHI <use_ip_52(33), use_ip_54(34), use_ip_50(32)>
  # DEBUG use_ip => use_ip_2
  sdp_port.78_55 = sdp_port;
  engine_12->adv_sdp_port = sdp_port.78_55;
  D.44014_56 = smh_8->mparams;
  D.44014_57 = smh_8->mparams;
  D.44052_58 = switch_core_perform_session_strdup (session_7(D), use_ip_2, "src/switch_core_media.c", &__func__, 4515);
  D.44014_57->extrtpip = D.44052_58;
  D.44041_59 = D.44014_57->extrtpip;
  D.44014_57->adv_sdp_audio_ip = D.44041_59;
  D.44053_60 = D.44014_57->adv_sdp_audio_ip;
  engine_12->adv_sdp_ip = D.44053_60;
  if (type_5(D) == 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  D.44020_61 = session_7(D)->channel;
  D.44056_62 = engine_12->local_sdp_ip;
  switch_channel_set_variable_var_check (D.44020_61, "local_media_ip", D.44056_62, 1);
  D.44020_63 = session_7(D)->channel;
  sdp_port.78_64 = sdp_port;
  D.44057_65 = (int) sdp_port.78_64;
  switch_channel_set_variable_printf (D.44020_63, "local_media_port", "%d", D.44057_65);
  D.44020_66 = session_7(D)->channel;
  D.44058_67 = engine_12->adv_sdp_ip;
  switch_channel_set_variable_var_check (D.44020_66, "advertised_media_ip", D.44058_67, 1);
  goto <bb 38>;

<bb 37>:
  D.44020_68 = session_7(D)->channel;
  D.44058_69 = engine_12->adv_sdp_ip;
  switch_channel_set_variable_var_check (D.44020_68, "local_video_ip", D.44058_69, 1);
  D.44020_70 = session_7(D)->channel;
  sdp_port.78_71 = sdp_port;
  D.44057_72 = (int) sdp_port.78_71;
  switch_channel_set_variable_printf (D.44020_70, "local_video_port", "%d", D.44057_72);

<bb 38>:
  D.44011_73 = 0;

<bb 39>:
  # D.44011_3 = PHI <D.44011_9(8), D.44011_21(13), D.44011_30(17), D.44011_49(31), D.44011_73(38)>
  return D.44011_3;

}



;; Function switch_core_media_choose_ports (switch_core_media_choose_ports)

Considering inline candidate switch_core_media_choose_port.
Not inlining: code size would grow by 187.
Considering inline candidate switch_core_media_check_video_codecs.
Not inlining: code size would grow by 50.
Considering inline candidate switch_core_media_choose_port.
Not inlining: code size would grow by 187.
Iterations: 0
switch_core_media_choose_ports (struct switch_core_session_t * session, switch_bool_t audio, switch_bool_t video)
{
  switch_status_t status;
  switch_status_t D.44005;
  uint32_t D.44002;
  struct switch_channel_t * D.44001;

<bb 2>:
  status_2 = 0;
  # DEBUG status => status_2
  if (audio_3(D) != 0)
    goto <bb 3>;
  else
    goto <bb 7>;

<bb 3>:
  status_5 = switch_core_media_choose_port (session_4(D), 0, 0);
  # DEBUG status => status_5
  if (status_5 == 0)
    goto <bb 4>;
  else
    goto <bb 7>;

<bb 4>:
  if (video_6(D) != 0)
    goto <bb 5>;
  else
    goto <bb 7>;

<bb 5>:
  switch_core_media_check_video_codecs (session_4(D));
  D.44001_7 = session_4(D)->channel;
  D.44002_8 = switch_channel_test_flag (D.44001_7, 98);
  if (D.44002_8 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  switch_core_media_choose_port (session_4(D), 1, 0);

<bb 7>:
  # status_1 = PHI <status_2(2), status_5(3), status_5(4), status_5(5), status_5(6)>
  # DEBUG status => status_1
  D.44005_9 = status_1;
  return D.44005_9;

}



;; Function switch_core_media_deactivate_rtp (switch_core_media_deactivate_rtp)

Considering inline candidate switch_core_media_check_nat.
Not inlining: code size would grow by 19.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_deactivate_rtp.
Processing frequency _zstr
  Called by switch_core_media_deactivate_rtp that is normal or hot
Considering inline candidate switch_core_media_check_nat.
Not inlining: code size would grow by 19.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_deactivate_rtp.
Processing frequency _zstr
  Called by switch_core_media_deactivate_rtp that is normal or hot
Inlining _zstr to switch_core_media_deactivate_rtp with frequency 1000
Inlining _zstr to switch_core_media_deactivate_rtp with frequency 1000
Considering inline candidate switch_core_media_check_nat.
Not inlining: code size would grow by 19.
Considering inline candidate switch_core_media_check_nat.
Not inlining: code size would grow by 19.
Iterations: 1
Merging blocks 12 and 25
Merging blocks 20 and 30
Merging blocks 28 and 24
Merging blocks 33 and 29


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4554, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.43953_5 = v_engine_4->media_thread;



Registering new PHI nodes in block #6

Updating SSA information for statement D.43956_6 = session_1(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.43956_6, 113);

Updating SSA information for statement v_engine_4->mh.up = 0;

Updating SSA information for statement D.43953_7 = v_engine_4->media_thread;

Updating SSA information for statement switch_thread_join (&st, D.43953_7);

Updating SSA information for statement v_engine_4->media_thread = 0B;



Registering new PHI nodes in block #7

Updating SSA information for statement D.43957_8 = v_engine_4->rtp_session;



Registering new PHI nodes in block #8

Updating SSA information for statement switch_rtp_destroy (D.43960_9);



Registering new PHI nodes in block #9

Updating SSA information for statement D.43962_10 = v_engine_4->local_sdp_port;



Registering new PHI nodes in block #10

Updating SSA information for statement D.43965_11 = smh_2->mparams;

Updating SSA information for statement D.43966_12 = D.43965_11->rtpip;

Updating SSA information for statement D.43962_13 = v_engine_4->local_sdp_port;

Updating SSA information for statement switch_rtp_release_port (D.43966_12, D.43962_13);



Registering new PHI nodes in block #11

Updating SSA information for statement D.43962_14 = v_engine_4->local_sdp_port;



Registering new PHI nodes in block #12

Updating SSA information for statement D.43965_15 = smh_2->mparams;

Updating SSA information for statement D.43969_16 = D.43965_15->remote_ip;



Registering new PHI nodes in block #13

Updating SSA information for statement D.48036_59 = MEM[(const char *)D.43969_16];



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement D.48035 = D.48037_60;

Updating SSA information for statement D.43970_17 = D.48035;



Registering new PHI nodes in block #16

Updating SSA information for statement D.43965_18 = smh_2->mparams;

Updating SSA information for statement D.43969_19 = D.43965_18->remote_ip;

Updating SSA information for statement D.43973_20 = switch_core_media_check_nat (smh_2, D.43969_19);



Registering new PHI nodes in block #17

Updating SSA information for statement D.43962_21 = v_engine_4->local_sdp_port;

Updating SSA information for statement switch_nat_del_mapping (D.43962_21, 0);

Updating SSA information for statement D.43962_22 = v_engine_4->local_sdp_port;

Updating SSA information for statement switch_nat_del_mapping (D.43976_23, 0);



Registering new PHI nodes in block #18

Updating SSA information for statement D.43977_24 = a_engine_3->rtp_session;



Registering new PHI nodes in block #19

Updating SSA information for statement switch_rtp_destroy (D.43980_25);



Registering new PHI nodes in block #20

Updating SSA information for statement D.43982_26 = a_engine_3->local_sdp_port;



Registering new PHI nodes in block #21

Updating SSA information for statement D.43965_27 = smh_2->mparams;

Updating SSA information for statement D.43966_28 = D.43965_27->rtpip;

Updating SSA information for statement D.43982_29 = a_engine_3->local_sdp_port;

Updating SSA information for statement switch_rtp_release_port (D.43966_28, D.43982_29);



Registering new PHI nodes in block #22

Updating SSA information for statement D.43982_30 = a_engine_3->local_sdp_port;



Registering new PHI nodes in block #23

Updating SSA information for statement D.43965_31 = smh_2->mparams;

Updating SSA information for statement D.43969_32 = D.43965_31->remote_ip;



Registering new PHI nodes in block #24

Updating SSA information for statement D.48040_61 = MEM[(const char *)D.43969_32];



Registering new PHI nodes in block #25



Registering new PHI nodes in block #26

Updating SSA information for statement D.48039 = D.48041_62;

Updating SSA information for statement D.43987_33 = D.48039;



Registering new PHI nodes in block #27

Updating SSA information for statement D.43965_34 = smh_2->mparams;

Updating SSA information for statement D.43969_35 = D.43965_34->remote_ip;

Updating SSA information for statement D.43990_36 = switch_core_media_check_nat (smh_2, D.43969_35);



Registering new PHI nodes in block #28

Updating SSA information for statement D.43982_37 = a_engine_3->local_sdp_port;

Updating SSA information for statement switch_nat_del_mapping (D.43982_37, 0);

Updating SSA information for statement D.43982_38 = a_engine_3->local_sdp_port;

Updating SSA information for statement switch_nat_del_mapping (D.43993_39, 0);



Registering new PHI nodes in block #29



Symbols to be put in SSA form

{ .MEM D.48035 D.48039 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 30
Number of blocks to update: 29 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_deactivate_rtp";

  { Scope block #316 src/switch_core_media.c:4592 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #317 Originating from :#0 

    }

  }

  { Scope block #318 src/switch_core_media.c:4579 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #319 Originating from :#0 

    }

  }

  { Scope block #320 
    switch_status_t st;

  }

}
switch_core_media_deactivate_rtp (struct switch_core_session_t * session)
{
  int D.48041;
  const char D.48040;
  int D.48039;
  int D.48037;
  const char D.48036;
  int D.48035;
  switch_status_t st;
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_deactivate_rtp";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  switch_port_t D.43993;
  int D.43990;
  int D.43987;
  switch_port_t D.43982;
  struct switch_rtp_t * * D.43980;
  struct switch_rtp_t * D.43977;
  switch_port_t D.43976;
  int D.43973;
  int D.43970;
  char * D.43969;
  char * D.43966;
  struct switch_core_media_params_t * D.43965;
  switch_port_t D.43962;
  struct switch_rtp_t * * D.43960;
  struct switch_rtp_t * D.43957;
  struct switch_channel_t * D.43956;
  struct switch_thread_t * D.43953;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4554, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 29>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_3 = &smh_2->engines;
  # DEBUG a_engine => a_engine_3
  v_engine_4 = &smh_2->engines[1];
  # DEBUG v_engine => v_engine_4
  D.43953_5 = v_engine_4->media_thread;
  if (D.43953_5 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.43956_6 = session_1(D)->channel;
  switch_channel_clear_flag (D.43956_6, 113);
  v_engine_4->mh.up = 0;
  D.43953_7 = v_engine_4->media_thread;
  switch_thread_join (&st, D.43953_7);
  v_engine_4->media_thread = 0B;

<bb 7>:
  D.43957_8 = v_engine_4->rtp_session;
  if (D.43957_8 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.43960_9 = &v_engine_4->rtp_session;
  switch_rtp_destroy (D.43960_9);
  goto <bb 11>;

<bb 9>:
  D.43962_10 = v_engine_4->local_sdp_port;
  if (D.43962_10 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.43965_11 = smh_2->mparams;
  D.43966_12 = D.43965_11->rtpip;
  D.43962_13 = v_engine_4->local_sdp_port;
  switch_rtp_release_port (D.43966_12, D.43962_13);

<bb 11>:
  D.43962_14 = v_engine_4->local_sdp_port;
  if (D.43962_14 != 0)
    goto <bb 12>;
  else
    goto <bb 18>;

<bb 12>:
  D.43965_15 = smh_2->mparams;
  D.43969_16 = D.43965_15->remote_ip;
  # DEBUG s => D.43969_16
  if (D.43969_16 == 0B)
    goto <bb 15>;
  else
    goto <bb 13>;

<bb 13>:
  D.48036_59 = MEM[(const char *)D.43969_16];
  if (D.48036_59 == 0)
    goto <bb 15>;
  else
    goto <bb 14>;

<bb 14>:

<bb 15>:
  # D.48037_60 = PHI <1(12), 1(13), 0(14)>
  D.48035_63 = D.48037_60;
  D.43970_17 = D.48035_63;
  if (D.43970_17 == 0)
    goto <bb 16>;
  else
    goto <bb 18>;

<bb 16>:
  D.43965_18 = smh_2->mparams;
  D.43969_19 = D.43965_18->remote_ip;
  D.43973_20 = switch_core_media_check_nat (smh_2, D.43969_19);
  if (D.43973_20 != 0)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.43962_21 = v_engine_4->local_sdp_port;
  switch_nat_del_mapping (D.43962_21, 0);
  D.43962_22 = v_engine_4->local_sdp_port;
  D.43976_23 = D.43962_22 + 1;
  switch_nat_del_mapping (D.43976_23, 0);

<bb 18>:
  D.43977_24 = a_engine_3->rtp_session;
  if (D.43977_24 != 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  D.43980_25 = &a_engine_3->rtp_session;
  switch_rtp_destroy (D.43980_25);
  goto <bb 22>;

<bb 20>:
  D.43982_26 = a_engine_3->local_sdp_port;
  if (D.43982_26 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.43965_27 = smh_2->mparams;
  D.43966_28 = D.43965_27->rtpip;
  D.43982_29 = a_engine_3->local_sdp_port;
  switch_rtp_release_port (D.43966_28, D.43982_29);

<bb 22>:
  D.43982_30 = a_engine_3->local_sdp_port;
  if (D.43982_30 != 0)
    goto <bb 23>;
  else
    goto <bb 29>;

<bb 23>:
  D.43965_31 = smh_2->mparams;
  D.43969_32 = D.43965_31->remote_ip;
  # DEBUG s => D.43969_32
  if (D.43969_32 == 0B)
    goto <bb 26>;
  else
    goto <bb 24>;

<bb 24>:
  D.48040_61 = MEM[(const char *)D.43969_32];
  if (D.48040_61 == 0)
    goto <bb 26>;
  else
    goto <bb 25>;

<bb 25>:

<bb 26>:
  # D.48041_62 = PHI <1(23), 1(24), 0(25)>
  D.48039_64 = D.48041_62;
  D.43987_33 = D.48039_64;
  if (D.43987_33 == 0)
    goto <bb 27>;
  else
    goto <bb 29>;

<bb 27>:
  D.43965_34 = smh_2->mparams;
  D.43969_35 = D.43965_34->remote_ip;
  D.43990_36 = switch_core_media_check_nat (smh_2, D.43969_35);
  if (D.43990_36 != 0)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  D.43982_37 = a_engine_3->local_sdp_port;
  switch_nat_del_mapping (D.43982_37, 0);
  D.43982_38 = a_engine_3->local_sdp_port;
  D.43993_39 = D.43982_38 + 1;
  switch_nat_del_mapping (D.43993_39, 0);

<bb 29>:
  return;

}



;; Function switch_media_handle_destroy (switch_media_handle_destroy)

Considering inline candidate switch_core_media_deactivate_rtp.
Not inlining: code size would grow by 113.
Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_media_handle_destroy.
Processing frequency switch_core_codec_ready
  Called by switch_media_handle_destroy that is normal or hot
Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_media_handle_destroy.
Processing frequency switch_core_codec_ready
  Called by switch_media_handle_destroy that is normal or hot
Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_media_handle_destroy.
Processing frequency switch_core_codec_ready
  Called by switch_media_handle_destroy that is normal or hot
Considering inline candidate switch_core_codec_ready.
 Inlining switch_core_codec_ready into switch_media_handle_destroy.
Processing frequency switch_core_codec_ready
  Called by switch_media_handle_destroy that is normal or hot
Inlining switch_core_codec_ready to switch_media_handle_destroy with frequency 1000
Inlining switch_core_codec_ready to switch_media_handle_destroy with frequency 1000
Inlining switch_core_codec_ready to switch_media_handle_destroy with frequency 1000
Inlining switch_core_codec_ready to switch_media_handle_destroy with frequency 1000
Considering inline candidate switch_core_media_deactivate_rtp.
Not inlining: code size would grow by 113.
Iterations: 1
Merging blocks 5 and 16
Merging blocks 7 and 24
Merging blocks 9 and 32
Merging blocks 11 and 40
Merging blocks 22 and 15
Merging blocks 30 and 23
Merging blocks 38 and 31
Merging blocks 46 and 39


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 1378, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_2 = session_1(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.48049_29 = D.46502_5->flags;



Registering new PHI nodes in block #7

Updating SSA information for statement D.48047_31 = D.46502_5->mutex;



Registering new PHI nodes in block #8

Updating SSA information for statement D.48046_32 = D.46502_5->codec_interface;



Registering new PHI nodes in block #9

Updating SSA information for statement D.48045_33 = D.46502_5->implementation;



Registering new PHI nodes in block #10



Registering new PHI nodes in block #11

Updating SSA information for statement D.48044 = D.48051_35;

Updating SSA information for statement D.46503_6 = D.48044;



Registering new PHI nodes in block #12

Updating SSA information for statement switch_core_codec_destroy (D.46502_7);



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14

Updating SSA information for statement D.48058_36 = D.46506_8->flags;



Registering new PHI nodes in block #15

Updating SSA information for statement D.48056_38 = D.46506_8->mutex;



Registering new PHI nodes in block #16

Updating SSA information for statement D.48055_39 = D.46506_8->codec_interface;



Registering new PHI nodes in block #17

Updating SSA information for statement D.48054_40 = D.46506_8->implementation;



Registering new PHI nodes in block #18



Registering new PHI nodes in block #19

Updating SSA information for statement D.48053 = D.48060_42;

Updating SSA information for statement D.46507_9 = D.48053;



Registering new PHI nodes in block #20

Updating SSA information for statement switch_core_codec_destroy (D.46506_10);



Registering new PHI nodes in block #21



Registering new PHI nodes in block #22

Updating SSA information for statement D.48067_43 = D.46510_11->flags;



Registering new PHI nodes in block #23

Updating SSA information for statement D.48065_45 = D.46510_11->mutex;



Registering new PHI nodes in block #24

Updating SSA information for statement D.48064_46 = D.46510_11->codec_interface;



Registering new PHI nodes in block #25

Updating SSA information for statement D.48063_47 = D.46510_11->implementation;



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27

Updating SSA information for statement D.48062 = D.48069_49;

Updating SSA information for statement D.46511_12 = D.48062;



Registering new PHI nodes in block #28

Updating SSA information for statement switch_core_codec_destroy (D.46510_13);



Registering new PHI nodes in block #29



Registering new PHI nodes in block #30

Updating SSA information for statement D.48076_50 = D.46514_14->flags;



Registering new PHI nodes in block #31

Updating SSA information for statement D.48074_52 = D.46514_14->mutex;



Registering new PHI nodes in block #32

Updating SSA information for statement D.48073_53 = D.46514_14->codec_interface;



Registering new PHI nodes in block #33

Updating SSA information for statement D.48072_54 = D.46514_14->implementation;



Registering new PHI nodes in block #34



Registering new PHI nodes in block #35

Updating SSA information for statement D.48071 = D.48078_56;

Updating SSA information for statement D.46515_15 = D.48071;



Registering new PHI nodes in block #36

Updating SSA information for statement switch_core_codec_destroy (D.46514_16);



Registering new PHI nodes in block #37

Updating SSA information for statement switch_core_session_unset_read_codec (session_1(D));

Updating SSA information for statement switch_core_session_unset_write_codec (session_1(D));

Updating SSA information for statement switch_core_media_deactivate_rtp (session_1(D));



Registering new PHI nodes in block #38



Symbols to be put in SSA form

{ .MEM D.48044 D.48053 D.48062 D.48071 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 39
Number of blocks to update: 38 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  static const char __PRETTY_FUNCTION__[28] = "switch_media_handle_destroy";

  { Scope block #321 src/switch_core_media.c:1400 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
    struct switch_codec_t * codec; (unused)

    { Scope block #322 Originating from :#0 

    }

  }

  { Scope block #323 src/switch_core_media.c:1396 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
    struct switch_codec_t * codec; (unused)

    { Scope block #324 Originating from :#0 

    }

  }

  { Scope block #325 src/switch_core_media.c:1392 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
    struct switch_codec_t * codec; (unused)

    { Scope block #326 Originating from :#0 

    }

  }

  { Scope block #327 src/switch_core_media.c:1388 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
    struct switch_codec_t * codec; (unused)

    { Scope block #328 Originating from :#0 

    }

  }

}
switch_media_handle_destroy (struct switch_core_session_t * session)
{
  switch_bool_t D.48078;
  int iftmp.104;
  uint32_t D.48076;
  uint32_t D.48075;
  struct switch_mutex_t * D.48074;
  struct switch_codec_interface_t * D.48073;
  const struct switch_codec_implementation_t * D.48072;
  switch_bool_t D.48071;
  switch_bool_t D.48069;
  int iftmp.104;
  uint32_t D.48067;
  uint32_t D.48066;
  struct switch_mutex_t * D.48065;
  struct switch_codec_interface_t * D.48064;
  const struct switch_codec_implementation_t * D.48063;
  switch_bool_t D.48062;
  switch_bool_t D.48060;
  int iftmp.104;
  uint32_t D.48058;
  uint32_t D.48057;
  struct switch_mutex_t * D.48056;
  struct switch_codec_interface_t * D.48055;
  const struct switch_codec_implementation_t * D.48054;
  switch_bool_t D.48053;
  switch_bool_t D.48051;
  int iftmp.104;
  uint32_t D.48049;
  uint32_t D.48048;
  struct switch_mutex_t * D.48047;
  struct switch_codec_interface_t * D.48046;
  const struct switch_codec_implementation_t * D.48045;
  switch_bool_t D.48044;
  static const char __PRETTY_FUNCTION__[28] = "switch_media_handle_destroy";
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  switch_bool_t D.46515;
  struct switch_codec_t * D.46514;
  switch_bool_t D.46511;
  struct switch_codec_t * D.46510;
  switch_bool_t D.46507;
  struct switch_codec_t * D.46506;
  switch_bool_t D.46503;
  struct switch_codec_t * D.46502;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 1378, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 38>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_3 = &smh_2->engines;
  # DEBUG a_engine => a_engine_3
  v_engine_4 = &smh_2->engines[1];
  # DEBUG v_engine => v_engine_4
  D.46502_5 = &a_engine_3->read_codec;
  # DEBUG codec => D.46502_5
  if (D.46502_5 != 0B)
    goto <bb 6>;
  else
    goto <bb 10>;

<bb 6>:
  D.48049_29 = D.46502_5->flags;
  D.48048_30 = D.48049_29 & 256;
  if (D.48048_30 != 0)
    goto <bb 7>;
  else
    goto <bb 10>;

<bb 7>:
  D.48047_31 = D.46502_5->mutex;
  if (D.48047_31 != 0B)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  D.48046_32 = D.46502_5->codec_interface;
  if (D.48046_32 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.48045_33 = D.46502_5->implementation;
  if (D.48045_33 != 0B)
    goto <bb 11>;
  else
    goto <bb 10>;

<bb 10>:

<bb 11>:
  # iftmp.104_34 = PHI <1(9), 0(10)>
  D.48051_35 = (switch_bool_t) iftmp.104_34;
  D.48044_57 = D.48051_35;
  D.46503_6 = D.48044_57;
  if (D.46503_6 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  D.46502_7 = &a_engine_3->read_codec;
  switch_core_codec_destroy (D.46502_7);

<bb 13>:
  D.46506_8 = &a_engine_3->write_codec;
  # DEBUG codec => D.46506_8
  if (D.46506_8 != 0B)
    goto <bb 14>;
  else
    goto <bb 18>;

<bb 14>:
  D.48058_36 = D.46506_8->flags;
  D.48057_37 = D.48058_36 & 256;
  if (D.48057_37 != 0)
    goto <bb 15>;
  else
    goto <bb 18>;

<bb 15>:
  D.48056_38 = D.46506_8->mutex;
  if (D.48056_38 != 0B)
    goto <bb 16>;
  else
    goto <bb 18>;

<bb 16>:
  D.48055_39 = D.46506_8->codec_interface;
  if (D.48055_39 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.48054_40 = D.46506_8->implementation;
  if (D.48054_40 != 0B)
    goto <bb 19>;
  else
    goto <bb 18>;

<bb 18>:

<bb 19>:
  # iftmp.104_41 = PHI <1(17), 0(18)>
  D.48060_42 = (switch_bool_t) iftmp.104_41;
  D.48053_58 = D.48060_42;
  D.46507_9 = D.48053_58;
  if (D.46507_9 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.46506_10 = &a_engine_3->write_codec;
  switch_core_codec_destroy (D.46506_10);

<bb 21>:
  D.46510_11 = &v_engine_4->read_codec;
  # DEBUG codec => D.46510_11
  if (D.46510_11 != 0B)
    goto <bb 22>;
  else
    goto <bb 26>;

<bb 22>:
  D.48067_43 = D.46510_11->flags;
  D.48066_44 = D.48067_43 & 256;
  if (D.48066_44 != 0)
    goto <bb 23>;
  else
    goto <bb 26>;

<bb 23>:
  D.48065_45 = D.46510_11->mutex;
  if (D.48065_45 != 0B)
    goto <bb 24>;
  else
    goto <bb 26>;

<bb 24>:
  D.48064_46 = D.46510_11->codec_interface;
  if (D.48064_46 != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.48063_47 = D.46510_11->implementation;
  if (D.48063_47 != 0B)
    goto <bb 27>;
  else
    goto <bb 26>;

<bb 26>:

<bb 27>:
  # iftmp.104_48 = PHI <1(25), 0(26)>
  D.48069_49 = (switch_bool_t) iftmp.104_48;
  D.48062_59 = D.48069_49;
  D.46511_12 = D.48062_59;
  if (D.46511_12 != 0)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  D.46510_13 = &v_engine_4->read_codec;
  switch_core_codec_destroy (D.46510_13);

<bb 29>:
  D.46514_14 = &v_engine_4->write_codec;
  # DEBUG codec => D.46514_14
  if (D.46514_14 != 0B)
    goto <bb 30>;
  else
    goto <bb 34>;

<bb 30>:
  D.48076_50 = D.46514_14->flags;
  D.48075_51 = D.48076_50 & 256;
  if (D.48075_51 != 0)
    goto <bb 31>;
  else
    goto <bb 34>;

<bb 31>:
  D.48074_52 = D.46514_14->mutex;
  if (D.48074_52 != 0B)
    goto <bb 32>;
  else
    goto <bb 34>;

<bb 32>:
  D.48073_53 = D.46514_14->codec_interface;
  if (D.48073_53 != 0B)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.48072_54 = D.46514_14->implementation;
  if (D.48072_54 != 0B)
    goto <bb 35>;
  else
    goto <bb 34>;

<bb 34>:

<bb 35>:
  # iftmp.104_55 = PHI <1(33), 0(34)>
  D.48078_56 = (switch_bool_t) iftmp.104_55;
  D.48071_60 = D.48078_56;
  D.46515_15 = D.48071_60;
  if (D.46515_15 != 0)
    goto <bb 36>;
  else
    goto <bb 37>;

<bb 36>:
  D.46514_16 = &v_engine_4->write_codec;
  switch_core_codec_destroy (D.46514_16);

<bb 37>:
  switch_core_session_unset_read_codec (session_1(D));
  switch_core_session_unset_write_codec (session_1(D));
  switch_core_media_deactivate_rtp (session_1(D));

<bb 38>:
  return;

}



;; Function switch_core_session_wake_video_thread (switch_core_session_wake_video_thread)

Iterations: 0
switch_core_session_wake_video_thread (struct switch_core_session_t * session)
{
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  struct switch_thread_cond_t * D.43947;
  switch_status_t D.43944;
  struct switch_mutex_t * D.43943;
  struct switch_rtp_t * D.43940;

<bb 2>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 6>;
  else
    goto <bb 3>;

<bb 3>:
  v_engine_3 = &smh_2->engines[1];
  # DEBUG v_engine => v_engine_3
  D.43940_4 = v_engine_3->rtp_session;
  if (D.43940_4 == 0B)
    goto <bb 6>;
  else
    goto <bb 4>;

<bb 4>:
  D.43943_5 = v_engine_3->mh.cond_mutex;
  D.43944_6 = switch_mutex_trylock (D.43943_5);
  if (D.43944_6 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.43947_7 = v_engine_3->mh.cond;
  switch_thread_cond_broadcast (D.43947_7);
  D.43943_8 = v_engine_3->mh.cond_mutex;
  switch_mutex_unlock (D.43943_8);

<bb 6>:
  return;

}



;; Function switch_core_media_activate_rtp (switch_core_media_activate_rtp)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_activate_rtp.
Processing frequency atoi
  Called by switch_core_media_activate_rtp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_activate_rtp.
Processing frequency atoi
  Called by switch_core_media_activate_rtp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_activate_rtp.
Processing frequency atoi
  Called by switch_core_media_activate_rtp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_activate_rtp.
Processing frequency atoi
  Called by switch_core_media_activate_rtp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_activate_rtp.
Processing frequency atoi
  Called by switch_core_media_activate_rtp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_activate_rtp.
Processing frequency atoi
  Called by switch_core_media_activate_rtp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_activate_rtp.
Processing frequency atoi
  Called by switch_core_media_activate_rtp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_activate_rtp.
Processing frequency atoi
  Called by switch_core_media_activate_rtp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_activate_rtp.
Processing frequency atoi
  Called by switch_core_media_activate_rtp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_activate_rtp.
Processing frequency atoi
  Called by switch_core_media_activate_rtp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_activate_rtp.
Processing frequency atoi
  Called by switch_core_media_activate_rtp that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_activate_rtp.
Processing frequency atoi
  Called by switch_core_media_activate_rtp that is normal or hot
Considering inline candidate check_dtls_reinvite.
Not inlining: code size would grow by 22.
Considering inline candidate switch_core_session_apply_crypto.
Not inlining: code size would grow by 74.
Considering inline candidate switch_core_media_parse_rtp_bugs.
Not inlining: code size would grow by 195.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_activate_rtp.
Processing frequency _zstr
  Called by switch_core_media_activate_rtp that is normal or hot
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate gen_ice.
Not inlining: code size would grow by 121.
Considering inline candidate start_video_thread.
Not inlining: code size would grow by 67.
Considering inline candidate switch_core_media_set_video_codec.
Not inlining: code size would grow by 268.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_choose_port.
Not inlining: code size would grow by 187.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_proxy_remote_addr.
Not inlining: code size would grow by 529.
Considering inline candidate start_video_thread.
Not inlining: code size would grow by 67.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate start_video_thread.
Not inlining: code size would grow by 67.
Considering inline candidate switch_core_media_check_video_codecs.
Not inlining: code size would grow by 50.
Considering inline candidate switch_core_session_apply_crypto.
Not inlining: code size would grow by 74.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_activate_rtp.
Processing frequency _zstr
  Called by switch_core_media_activate_rtp that is normal or hot
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate gen_ice.
Not inlining: code size would grow by 121.
Considering inline candidate switch_core_media_parse_rtp_bugs.
Not inlining: code size would grow by 195.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_proxy_remote_addr.
Not inlining: code size would grow by 529.
Considering inline candidate check_dtls_reinvite.
Not inlining: code size would grow by 22.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_toggle_hold.
Not inlining: code size would grow by 367.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_set_video_codec.
Not inlining: code size would grow by 268.
Considering inline candidate switch_core_media_set_codec.
Not inlining: code size would grow by 487.
Inlining atoi to switch_core_media_activate_rtp with frequency 1000
Inlining atoi to switch_core_media_activate_rtp with frequency 1000
Inlining atoi to switch_core_media_activate_rtp with frequency 1000
Inlining _zstr to switch_core_media_activate_rtp with frequency 1000
Inlining atoi to switch_core_media_activate_rtp with frequency 1000
Inlining atoi to switch_core_media_activate_rtp with frequency 1000
Inlining atoi to switch_core_media_activate_rtp with frequency 1000
Inlining atoi to switch_core_media_activate_rtp with frequency 1000
Inlining atoi to switch_core_media_activate_rtp with frequency 1000
Inlining atoi to switch_core_media_activate_rtp with frequency 1000
Inlining atoi to switch_core_media_activate_rtp with frequency 1000
Inlining atoi to switch_core_media_activate_rtp with frequency 1000
Inlining atoi to switch_core_media_activate_rtp with frequency 1000
Inlining _zstr to switch_core_media_activate_rtp with frequency 1000
Considering inline candidate check_dtls_reinvite.
Not inlining: code size would grow by 22.
Considering inline candidate switch_core_session_apply_crypto.
Not inlining: code size would grow by 74.
Considering inline candidate switch_core_media_parse_rtp_bugs.
Not inlining: code size would grow by 195.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate gen_ice.
Not inlining: code size would grow by 121.
Considering inline candidate start_video_thread.
Not inlining: code size would grow by 67.
Considering inline candidate switch_core_media_set_video_codec.
Not inlining: code size would grow by 268.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_choose_port.
Not inlining: code size would grow by 187.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_proxy_remote_addr.
Not inlining: code size would grow by 529.
Considering inline candidate start_video_thread.
Not inlining: code size would grow by 67.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate start_video_thread.
Not inlining: code size would grow by 67.
Considering inline candidate switch_core_media_check_video_codecs.
Not inlining: code size would grow by 50.
Considering inline candidate switch_core_session_apply_crypto.
Not inlining: code size would grow by 74.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate switch_ice_direction.
Not inlining: code size would grow by 27.
Considering inline candidate gen_ice.
Not inlining: code size would grow by 121.
Considering inline candidate switch_core_media_parse_rtp_bugs.
Not inlining: code size would grow by 195.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_proxy_remote_addr.
Not inlining: code size would grow by 529.
Considering inline candidate check_dtls_reinvite.
Not inlining: code size would grow by 22.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_toggle_hold.
Not inlining: code size would grow by 367.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_set_video_codec.
Not inlining: code size would grow by 268.
Considering inline candidate switch_core_media_set_codec.
Not inlining: code size would grow by 487.
Iterations: 1
Removing basic block 61
;; basic block 61, loop depth 0, count 0
;; prev block 60, next block 334
;; pred:      
;; succ:       334 [100.0%]  (fallthru,exec)
<bb 61>:


Removing basic block 134
;; basic block 134, loop depth 0, count 0
;; prev block 133, next block 336
;; pred:      
;; succ:       336 [100.0%]  (fallthru,exec)
<bb 134>:


Removing basic block 137
;; basic block 137, loop depth 0, count 0
;; prev block 136, next block 338
;; pred:      
;; succ:       338 [100.0%]  (fallthru,exec)
<bb 137>:


Merging blocks 149 and 340
Merging blocks 168 and 345
Merging blocks 169 and 347
Merging blocks 170 and 349
Removing basic block 186
;; basic block 186, loop depth 0, count 0
;; prev block 185, next block 351
;; pred:      
;; succ:       351 [100.0%]  (fallthru,exec)
<bb 186>:


Removing basic block 189
;; basic block 189, loop depth 0, count 0
;; prev block 188, next block 353
;; pred:      
;; succ:       353 [100.0%]  (fallthru,exec)
<bb 189>:


Removing basic block 207
;; basic block 207, loop depth 0, count 0
;; prev block 206, next block 355
;; pred:      
;; succ:       355 [100.0%]  (fallthru,exec)
<bb 207>:


Removing basic block 236
;; basic block 236, loop depth 0, count 0
;; prev block 235, next block 357
;; pred:      
;; succ:       357 [100.0%]  (fallthru,exec)
<bb 236>:


Removing basic block 289
;; basic block 289, loop depth 0, count 0
;; prev block 288, next block 359
;; pred:      
;; succ:       359 [100.0%]  (fallthru,exec)
<bb 289>:


Removing basic block 292
;; basic block 292, loop depth 0, count 0
;; prev block 291, next block 361
;; pred:      
;; succ:       361 [100.0%]  (fallthru,exec)
<bb 292>:


Merging blocks 304 and 363
Merging blocks 334 and 333
Merging blocks 336 and 335
Merging blocks 338 and 337
Merging blocks 343 and 339
Merging blocks 351 and 350
Merging blocks 353 and 352
Merging blocks 355 and 354
Merging blocks 357 and 356
Merging blocks 359 and 358
Merging blocks 361 and 360
Merging blocks 366 and 362
Merging blocks 168 and 344
Merging blocks 169 and 346
Merging blocks 170 and 348


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement err = 0B;

Updating SSA information for statement flags = {};



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 4731, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_46 = session_45(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.43073_50 = session_45(D)->channel;

Updating SSA information for statement D.43074_51 = switch_channel_check_signal (D.43073_50, 1);



Registering new PHI nodes in block #7

Updating SSA information for statement D.43073_52 = session_45(D)->channel;

Updating SSA information for statement D.43076_53 = switch_channel_get_state (D.43073_52);



Registering new PHI nodes in block #9

Updating SSA information for statement D.43077_54 = a_engine_48->rtp_session;

Updating SSA information for statement D.43078_55 = switch_rtp_ready (D.43077_54);



Registering new PHI nodes in block #10

Updating SSA information for statement D.43077_56 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_reset_media_timer (D.43077_56);



Registering new PHI nodes in block #11

Updating SSA information for statement D.43081_57 = a_engine_48->crypto_type;



Registering new PHI nodes in block #12

Updating SSA information for statement D.43073_58 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.43073_58, 92, 1);



Registering new PHI nodes in block #13

Updating SSA information for statement D.43073_59 = session_45(D)->channel;

Updating SSA information for statement D.43084_60 = switch_channel_test_flag (D.43073_59, 15);



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15

Updating SSA information for statement D.43073_62 = session_45(D)->channel;

Updating SSA information for statement D.43087_63 = switch_channel_test_flag (D.43073_62, 103);



Registering new PHI nodes in block #16

Updating SSA information for statement D.43077_64 = a_engine_48->rtp_session;

Updating SSA information for statement D.43090_65 = switch_rtp_ready (D.43077_64);



Registering new PHI nodes in block #17

Updating SSA information for statement D.43073_66 = session_45(D)->channel;

Updating SSA information for statement D.43093_67 = switch_channel_test_flag (D.43073_66, 98);



Registering new PHI nodes in block #18

Updating SSA information for statement D.43096_68 = v_engine_49->rtp_session;

Updating SSA information for statement D.43097_69 = switch_rtp_ready (D.43096_68);



Registering new PHI nodes in block #19



Registering new PHI nodes in block #20

Updating SSA information for statement D.43099_71 = smh_46->mparams;

Updating SSA information for statement D.43100_72 = D.43099_71->codec_flags;

Updating SSA information for statement status_73 = switch_core_media_set_codec (session_45(D), 0, D.43100_72);



Registering new PHI nodes in block #21

Updating SSA information for statement switch_core_media_set_video_codec (session_45(D), 0);

Updating SSA information for statement memset (&flags, 0, 156);

Updating SSA information for statement D.43102_74 = flags[13];

Updating SSA information for statement flags[13] = D.43103_75;

Updating SSA information for statement D.43106_76 = switch_media_handle_test_media_flag (smh_46, 10);



Registering new PHI nodes in block #22

Updating SSA information for statement D.43073_77 = session_45(D)->channel;

Updating SSA information for statement D.43109_78 = switch_channel_test_flag (D.43073_77, 106);



Registering new PHI nodes in block #23

Updating SSA information for statement D.43073_79 = session_45(D)->channel;

Updating SSA information for statement val_80 = switch_channel_get_variable_dup (D.43073_79, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #24

Updating SSA information for statement D.43113_81 = switch_true (val_80);



Registering new PHI nodes in block #25

Updating SSA information for statement D.43114_82 = flags[7];

Updating SSA information for statement flags[7] = D.43115_83;



Registering new PHI nodes in block #26

Updating SSA information for statement D.43118_84 = switch_media_handle_test_media_flag (smh_46, 11);



Registering new PHI nodes in block #27

Updating SSA information for statement D.43073_85 = session_45(D)->channel;

Updating SSA information for statement val_86 = switch_channel_get_variable_dup (D.43073_85, "pass_rfc2833", 1, -1);



Registering new PHI nodes in block #28

Updating SSA information for statement D.43121_87 = switch_true (val_86);



Registering new PHI nodes in block #29

Updating SSA information for statement D.43073_88 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.43073_88, 100, 1);



Registering new PHI nodes in block #30

Updating SSA information for statement D.43124_89 = switch_media_handle_test_media_flag (smh_46, 12);



Registering new PHI nodes in block #31

Updating SSA information for statement D.43073_90 = session_45(D)->channel;

Updating SSA information for statement val_91 = switch_channel_get_variable_dup (D.43073_90, "rtp_autoflush", 1, -1);



Registering new PHI nodes in block #32

Updating SSA information for statement D.43127_92 = switch_true (val_91);



Registering new PHI nodes in block #33

Updating SSA information for statement D.43128_93 = flags[22];

Updating SSA information for statement flags[22] = D.43129_94;



Registering new PHI nodes in block #34

Updating SSA information for statement D.43132_95 = switch_media_handle_test_media_flag (smh_46, 13);



Registering new PHI nodes in block #35

Updating SSA information for statement D.43073_96 = session_45(D)->channel;

Updating SSA information for statement val_97 = switch_channel_get_variable_dup (D.43073_96, "rtp_rewrite_timestamps", 1, -1);



Registering new PHI nodes in block #36

Updating SSA information for statement D.43136_98 = switch_true (val_97);



Registering new PHI nodes in block #37

Updating SSA information for statement D.43137_99 = flags[8];

Updating SSA information for statement flags[8] = D.43138_100;



Registering new PHI nodes in block #38

Updating SSA information for statement D.43139_101 = switch_media_handle_test_media_flag (smh_46, 9);



Registering new PHI nodes in block #39

Updating SSA information for statement D.43099_102 = smh_46->mparams;

Updating SSA information for statement D.43099_102->cng_pt = 0;



Registering new PHI nodes in block #40

Updating SSA information for statement D.43099_103 = smh_46->mparams;

Updating SSA information for statement D.43143_104 = D.43099_103->cng_pt;



Registering new PHI nodes in block #41

Updating SSA information for statement D.43146_105 = flags[16];

Updating SSA information for statement flags[16] = D.43147_106;



Registering new PHI nodes in block #42

Updating SSA information for statement D.43148_107 = a_engine_48->read_impl.iananame;

Updating SSA information for statement D.43149_108 = strcasecmp (D.43148_107, "L16");



Registering new PHI nodes in block #43

Updating SSA information for statement D.43152_109 = flags[14];

Updating SSA information for statement flags[14] = D.43153_110;



Registering new PHI nodes in block #44

Updating SSA information for statement D.43152_111 = flags[14];



Registering new PHI nodes in block #45

Updating SSA information for statement D.43073_112 = session_45(D)->channel;

Updating SSA information for statement val_113 = switch_channel_get_variable_dup (D.43073_112, "rtp_disable_byteswap", 1, -1);



Registering new PHI nodes in block #46

Updating SSA information for statement D.43158_114 = switch_true (val_113);



Registering new PHI nodes in block #47

Updating SSA information for statement flags[14] = 0;



Registering new PHI nodes in block #48

Updating SSA information for statement D.43077_115 = a_engine_48->rtp_session;



Registering new PHI nodes in block #49

Updating SSA information for statement D.43073_116 = session_45(D)->channel;

Updating SSA information for statement D.43163_117 = switch_channel_test_flag (D.43073_116, 103);



Registering new PHI nodes in block #50

Updating SSA information for statement D.43077_118 = a_engine_48->rtp_session;

Updating SSA information for statement remote_host_119 = switch_rtp_get_remote_host (D.43077_118);

Updating SSA information for statement D.43077_120 = a_engine_48->rtp_session;

Updating SSA information for statement remote_port_121 = switch_rtp_get_remote_port (D.43077_120);



Registering new PHI nodes in block #51

Updating SSA information for statement D.43171_125 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_126 = D.43171_125->remote_sdp_ip;

Updating SSA information for statement D.39348_127 = __builtin_strcmp (remote_host_119, D.43172_126);



Registering new PHI nodes in block #52

Updating SSA information for statement D.43171_128 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_129 = D.43171_128->remote_sdp_port;



Registering new PHI nodes in block #53

Updating SSA information for statement D.43073_130 = session_45(D)->channel;

Updating SSA information for statement D.43176_131 = switch_channel_get_name (D.43073_130);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4825, session_45(D), 7, "Audio params are unchanged for %s.\n", D.43176_131);



Registering new PHI nodes in block #54

Updating SSA information for statement D.43073_132 = session_45(D)->channel;

Updating SSA information for statement D.43177_133 = switch_channel_get_name (D.43073_132);

Updating SSA information for statement D.43171_135 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_136 = D.43171_135->remote_sdp_ip;

Updating SSA information for statement D.43171_137 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_138 = D.43171_137->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4830, session_45(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.43177_133, remote_host_119, D.43178_134, D.43172_136, D.43179_139);

Updating SSA information for statement D.43171_140 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_141 = D.43171_140->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.43179_142);

Updating SSA information for statement D.43073_143 = session_45(D)->channel;

Updating SSA information for statement D.43171_144 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_145 = D.43171_144->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_143, "remote_media_ip", D.43172_145, 1);

Updating SSA information for statement D.43073_146 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_146, "remote_media_port", &tmp, 1);



Registering new PHI nodes in block #55

Updating SSA information for statement D.43073_147 = session_45(D)->channel;

Updating SSA information for statement D.43180_148 = switch_channel_test_flag (D.43073_147, 29);



Registering new PHI nodes in block #56

Updating SSA information for statement D.43073_149 = session_45(D)->channel;

Updating SSA information for statement D.43183_150 = switch_channel_get_name (D.43073_149);

Updating SSA information for statement D.43184_151 = a_engine_48->local_sdp_ip;

Updating SSA information for statement D.43185_152 = a_engine_48->local_sdp_port;

Updating SSA information for statement D.43171_154 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_155 = D.43171_154->remote_sdp_ip;

Updating SSA information for statement D.43171_156 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_157 = D.43171_156->remote_sdp_port;

Updating SSA information for statement D.43171_159 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43187_160 = D.43171_159->agreed_pt;

Updating SSA information for statement D.43189_162 = a_engine_48->read_impl.microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4841, session_45(D), 7, "AUDIO RTP [%s] %s port %d -> %s port %d codec: %u ms: %d\n", D.43183_150, D.43184_151, D.43186_153, D.43172_155, D.43179_158, D.43188_161, D.43190_163);



Registering new PHI nodes in block #57

Updating SSA information for statement D.43185_164 = a_engine_48->local_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.43186_165);

Updating SSA information for statement D.43073_166 = session_45(D)->channel;

Updating SSA information for statement D.43184_167 = a_engine_48->local_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_166, "local_media_ip", D.43184_167, 1);

Updating SSA information for statement D.43073_168 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_168, "local_media_port", &tmp, 1);

Updating SSA information for statement D.43073_169 = session_45(D)->channel;

Updating SSA information for statement D.43191_170 = a_engine_48->adv_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_169, "advertised_media_ip", D.43191_170, 1);

Updating SSA information for statement D.43077_171 = a_engine_48->rtp_session;



Registering new PHI nodes in block #58

Updating SSA information for statement D.43073_172 = session_45(D)->channel;

Updating SSA information for statement D.43194_173 = switch_channel_test_flag (D.43073_172, 103);



Registering new PHI nodes in block #59

Updating SSA information for statement remote_rtcp_port_175 = a_engine_48->remote_rtcp_port;



Registering new PHI nodes in block #60

Updating SSA information for statement D.43073_176 = session_45(D)->channel;

Updating SSA information for statement rport_177 = switch_channel_get_variable_dup (D.43073_176, "rtp_remote_audio_rtcp_port", 1, -1);



Registering new PHI nodes in block #61

Updating SSA information for statement D.48083_1337 = strtol (rport_177, 0B, 10);

Updating SSA information for statement D.48082 = D.48083_1337;

Updating SSA information for statement D.43201_178 = D.48082;



Registering new PHI nodes in block #62

Updating SSA information for statement D.43077_180 = a_engine_48->rtp_session;

Updating SSA information for statement D.43171_181 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_182 = D.43171_181->remote_sdp_ip;

Updating SSA information for statement D.43171_183 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_184 = D.43171_183->remote_sdp_port;

Updating SSA information for statement D.43202_185 = switch_rtp_set_remote_address (D.43077_180, D.43172_182, D.43174_184, remote_rtcp_port_7, 1, &err);



Registering new PHI nodes in block #63

Updating SSA information for statement err.45_186 = err;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4868, session_45(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.45_186);



Registering new PHI nodes in block #64

Updating SSA information for statement D.43171_187 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_188 = D.43171_187->remote_sdp_ip;

Updating SSA information for statement D.43171_189 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_190 = D.43171_189->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4870, session_45(D), 7, "AUDIO RTP CHANGING DEST TO: [%s:%d]\n", D.43172_188, D.43179_191);

Updating SSA information for statement D.43073_192 = session_45(D)->channel;

Updating SSA information for statement D.43207_193 = switch_channel_test_flag (D.43073_192, 96);



Registering new PHI nodes in block #65



Registering new PHI nodes in block #66

Updating SSA information for statement D.43171_195 = a_engine_48->cur_payload_map;

Updating SSA information for statement __s1_196 = D.43171_195->remote_sdp_ip;

Updating SSA information for statement D.43213_197 = *__s1_196;

Updating SSA information for statement D.43216_200 = MEM[(const unsigned char *)D.43215_199];



Registering new PHI nodes in block #67

Updating SSA information for statement D.43224_207 = *D.43223_206;

Updating SSA information for statement D.43227_210 = MEM[(const unsigned char *)D.43226_209];



Registering new PHI nodes in block #68

Updating SSA information for statement D.43234_217 = *D.43233_216;

Updating SSA information for statement D.43237_220 = MEM[(const unsigned char *)D.43236_219];



Registering new PHI nodes in block #69

Updating SSA information for statement D.43244_227 = *D.43243_226;

Updating SSA information for statement D.43247_230 = MEM[(const unsigned char *)D.43246_229];



Registering new PHI nodes in block #70



Registering new PHI nodes in block #71

Updating SSA information for statement D.43171_235 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_236 = D.43171_235->remote_sdp_ip;

Updating SSA information for statement iftmp.46_237 = __builtin_strcmp (D.43172_236, "0.0.0.0");



Registering new PHI nodes in block #72



Registering new PHI nodes in block #73

Updating SSA information for statement switch_core_media_toggle_hold (session_45(D), 0);



Registering new PHI nodes in block #74

Updating SSA information for statement D.43254_239 = switch_media_handle_test_media_flag (smh_46, 10);



Registering new PHI nodes in block #75

Updating SSA information for statement D.43073_240 = session_45(D)->channel;

Updating SSA information for statement val_241 = switch_channel_get_variable_dup (D.43073_240, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #76

Updating SSA information for statement D.43258_242 = switch_true (val_241);



Registering new PHI nodes in block #77

Updating SSA information for statement D.43073_243 = session_45(D)->channel;

Updating SSA information for statement D.43259_244 = switch_channel_test_flag (D.43073_243, 106);



Registering new PHI nodes in block #78

Updating SSA information for statement D.43077_245 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.43077_245, 7);



Registering new PHI nodes in block #79



Registering new PHI nodes in block #80

Updating SSA information for statement check_dtls_reinvite (session_45(D), a_engine_48);



Registering new PHI nodes in block #81

Updating SSA information for statement D.43073_249 = session_45(D)->channel;

Updating SSA information for statement D.43267_250 = switch_channel_test_flag (D.43073_249, 29);



Registering new PHI nodes in block #82

Updating SSA information for statement switch_core_media_proxy_remote_addr (session_45(D), 0B);

Updating SSA information for statement memset (&flags, 0, 156);

Updating SSA information for statement D.43102_251 = flags[13];

Updating SSA information for statement flags[13] = D.43103_252;

Updating SSA information for statement D.43270_253 = flags[19];

Updating SSA information for statement flags[19] = D.43271_254;

Updating SSA information for statement D.43274_255 = switch_media_handle_test_media_flag (smh_46, 10);



Registering new PHI nodes in block #83

Updating SSA information for statement D.43073_256 = session_45(D)->channel;

Updating SSA information for statement D.43277_257 = switch_channel_test_flag (D.43073_256, 106);



Registering new PHI nodes in block #84

Updating SSA information for statement D.43073_258 = session_45(D)->channel;

Updating SSA information for statement val_259 = switch_channel_get_variable_dup (D.43073_258, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #85

Updating SSA information for statement D.43281_260 = switch_true (val_259);



Registering new PHI nodes in block #86

Updating SSA information for statement D.43114_261 = flags[7];

Updating SSA information for statement flags[7] = D.43115_262;



Registering new PHI nodes in block #87

Updating SSA information for statement D.43073_264 = session_45(D)->channel;

Updating SSA information for statement D.43282_265 = switch_channel_get_name (D.43073_264);

Updating SSA information for statement D.43171_266 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_267 = D.43171_266->remote_sdp_ip;

Updating SSA information for statement D.43171_268 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_269 = D.43171_268->remote_sdp_port;

Updating SSA information for statement D.43171_271 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_272 = D.43171_271->remote_sdp_ip;

Updating SSA information for statement D.43171_273 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_274 = D.43171_273->remote_sdp_port;

Updating SSA information for statement D.43171_276 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43187_277 = D.43171_276->agreed_pt;

Updating SSA information for statement D.43189_279 = a_engine_48->read_impl.microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 4906, session_45(D), 7, "PROXY AUDIO RTP [%s] %s:%d->%s:%d codec: %u ms: %d\n", D.43282_265, D.43172_272, D.43179_275, D.43172_272, D.43179_275, D.43188_278, D.43190_280);

Updating SSA information for statement D.43077_281 = a_engine_48->rtp_session;

Updating SSA information for statement D.43283_282 = switch_rtp_ready (D.43077_281);



Registering new PHI nodes in block #88

Updating SSA information for statement D.43077_283 = a_engine_48->rtp_session;

Updating SSA information for statement D.43171_284 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43187_285 = D.43171_284->agreed_pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.43077_283, D.43187_285);



Registering new PHI nodes in block #89

Updating SSA information for statement D.43099_286 = smh_46->mparams;

Updating SSA information for statement timer_name_287 = D.43099_286->timer_name;

Updating SSA information for statement D.43073_288 = session_45(D)->channel;

Updating SSA information for statement var_289 = switch_channel_get_variable_dup (D.43073_288, "rtp_timer_name", 1, -1);



Registering new PHI nodes in block #90



Registering new PHI nodes in block #91

Updating SSA information for statement D.43073_291 = session_45(D)->channel;

Updating SSA information for statement D.43291_292 = switch_channel_check_signal (D.43073_291, 1);



Registering new PHI nodes in block #92

Updating SSA information for statement D.43073_293 = session_45(D)->channel;

Updating SSA information for statement D.43293_294 = switch_channel_get_state (D.43073_293);



Registering new PHI nodes in block #93

Updating SSA information for statement D.43184_295 = a_engine_48->local_sdp_ip;

Updating SSA information for statement D.43185_296 = a_engine_48->local_sdp_port;

Updating SSA information for statement D.43171_297 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_298 = D.43171_297->remote_sdp_ip;

Updating SSA information for statement D.43171_299 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_300 = D.43171_299->remote_sdp_port;

Updating SSA information for statement D.43171_301 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43187_302 = D.43171_301->agreed_pt;

Updating SSA information for statement D.43294_303 = a_engine_48->read_impl.samples_per_packet;

Updating SSA information for statement D.43171_304 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43295_305 = D.43171_304->codec_ms;

Updating SSA information for statement D.43297_307 = switch_core_session_get_pool (session_45(D));

Updating SSA information for statement D.43298_308 = switch_rtp_new (D.43184_295, D.43185_296, D.43172_298, D.43174_300, D.43187_302, D.43294_303, D.43296_306, &flags, timer_name_6, &err, D.43297_307);

Updating SSA information for statement a_engine_48->rtp_session = D.43298_308;

Updating SSA information for statement D.43077_309 = a_engine_48->rtp_session;

Updating SSA information for statement D.43299_310 = switch_rtp_ready (D.43077_309);



Registering new PHI nodes in block #94

Updating SSA information for statement D.43077_311 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_set_payload_map (D.43077_311, D.43302_312);



Registering new PHI nodes in block #95

Updating SSA information for statement D.43077_313 = a_engine_48->rtp_session;

Updating SSA information for statement D.43303_314 = switch_rtp_ready (D.43077_313);



Registering new PHI nodes in block #96

Updating SSA information for statement D.43099_315 = smh_46->mparams;

Updating SSA information for statement D.43306_316 = D.43099_315->vflags;

Updating SSA information for statement D.43099_319 = smh_46->mparams;

Updating SSA information for statement D.43306_320 = D.43099_319->vflags;

Updating SSA information for statement D.43073_323 = session_45(D)->channel;

Updating SSA information for statement D.43308_324 = switch_channel_direction (D.43073_323);

Updating SSA information for statement D.43310_327 = switch_core_session_get_pool (session_45(D));

Updating SSA information for statement switch_mutex_init (D.43309_326, 1, D.43310_327);

Updating SSA information for statement D.43073_328 = session_45(D)->channel;

Updating SSA information for statement ssrc_329 = switch_channel_get_variable_dup (D.43073_328, "rtp_use_ssrc", 1, -1);



Registering new PHI nodes in block #97

Updating SSA information for statement ssrc_ul_330 = strtoul (ssrc_329, 0B, 10);

Updating SSA information for statement D.43077_331 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_set_ssrc (D.43077_331, ssrc_ul_330);

Updating SSA information for statement a_engine_48->ssrc = ssrc_ul_330;



Registering new PHI nodes in block #98

Updating SSA information for statement D.43077_332 = a_engine_48->rtp_session;

Updating SSA information for statement D.43314_333 = a_engine_48->ssrc;

Updating SSA information for statement switch_rtp_set_ssrc (D.43077_332, D.43314_333);



Registering new PHI nodes in block #99

Updating SSA information for statement D.43315_334 = a_engine_48->remote_ssrc;



Registering new PHI nodes in block #100

Updating SSA information for statement D.43077_335 = a_engine_48->rtp_session;

Updating SSA information for statement D.43315_336 = a_engine_48->remote_ssrc;

Updating SSA information for statement switch_rtp_set_remote_ssrc (D.43077_335, D.43315_336);



Registering new PHI nodes in block #101

Updating SSA information for statement D.43073_337 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.43073_337, 36, 1);

Updating SSA information for statement D.43073_338 = session_45(D)->channel;

Updating SSA information for statement D.43171_339 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43187_340 = D.43171_339->agreed_pt;

Updating SSA information for statement switch_channel_set_variable_printf (D.43073_338, "rtp_use_pt", "%d", D.43188_341);

Updating SSA information for statement D.43073_342 = session_45(D)->channel;

Updating SSA information for statement val_343 = switch_channel_get_variable_dup (D.43073_342, "rtp_enable_vad_in", 1, -1);



Registering new PHI nodes in block #102

Updating SSA information for statement D.43320_344 = switch_true (val_343);



Registering new PHI nodes in block #103



Registering new PHI nodes in block #104

Updating SSA information for statement D.43073_346 = session_45(D)->channel;

Updating SSA information for statement val_347 = switch_channel_get_variable_dup (D.43073_346, "rtp_enable_vad_out", 1, -1);



Registering new PHI nodes in block #105

Updating SSA information for statement D.43325_348 = switch_true (val_347);



Registering new PHI nodes in block #106



Registering new PHI nodes in block #107

Updating SSA information for statement D.43073_350 = session_45(D)->channel;

Updating SSA information for statement val_351 = switch_channel_get_variable_dup (D.43073_350, "rtp_disable_vad_in", 1, -1);



Registering new PHI nodes in block #108

Updating SSA information for statement D.43330_352 = switch_true (val_351);



Registering new PHI nodes in block #109



Registering new PHI nodes in block #110

Updating SSA information for statement D.43073_354 = session_45(D)->channel;

Updating SSA information for statement val_355 = switch_channel_get_variable_dup (D.43073_354, "rtp_disable_vad_out", 1, -1);



Registering new PHI nodes in block #111

Updating SSA information for statement D.43335_356 = switch_true (val_355);



Registering new PHI nodes in block #112



Registering new PHI nodes in block #113

Updating SSA information for statement D.43077_358 = a_engine_48->rtp_session;

Updating SSA information for statement D.43338_359 = switch_rtp_get_ssrc (D.43077_358);

Updating SSA information for statement a_engine_48->ssrc = D.43338_359;

Updating SSA information for statement D.43073_360 = session_45(D)->channel;

Updating SSA information for statement D.43314_361 = a_engine_48->ssrc;

Updating SSA information for statement switch_channel_set_variable_printf (D.43073_360, "rtp_use_ssrc", "%u", D.43314_361);

Updating SSA information for statement D.43099_362 = smh_46->mparams;

Updating SSA information for statement D.43339_363 = D.43099_362->auto_rtp_bugs;



Registering new PHI nodes in block #114

Updating SSA information for statement D.43343_365 = a_engine_48->rtp_bugs;

Updating SSA information for statement a_engine_48->rtp_bugs = D.43344_366;



Registering new PHI nodes in block #115

Updating SSA information for statement D.43073_367 = session_45(D)->channel;

Updating SSA information for statement val_368 = switch_channel_get_variable_dup (D.43073_367, "rtp_manual_rtp_bugs", 1, -1);



Registering new PHI nodes in block #116

Updating SSA information for statement switch_core_media_parse_rtp_bugs (D.43347_369, val_368);



Registering new PHI nodes in block #117

Updating SSA information for statement D.43077_370 = a_engine_48->rtp_session;

Updating SSA information for statement D.43343_371 = a_engine_48->rtp_bugs;

Updating SSA information for statement D.43099_372 = smh_46->mparams;

Updating SSA information for statement D.43348_373 = D.43099_372->manual_rtp_bugs;

Updating SSA information for statement switch_rtp_intentional_bugs (D.43077_370, D.43349_374);



Registering new PHI nodes in block #118



Registering new PHI nodes in block #119

Updating SSA information for statement D.43077_381 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_enable_vad (D.43077_381, session_45(D), D.43359_382, 7);

Updating SSA information for statement D.43360_383 = switch_core_session_get_channel (session_45(D));

Updating SSA information for statement D.43361_384 = switch_channel_get_name (D.43360_383);



Registering new PHI nodes in block #120



Registering new PHI nodes in block #121



Registering new PHI nodes in block #122



Registering new PHI nodes in block #123



Registering new PHI nodes in block #124



Registering new PHI nodes in block #125

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5001, session_45(D), 7, "AUDIO RTP Engage VAD for %s ( %s %s )\n", D.43361_384, iftmp.47_29, iftmp.48_30);



Registering new PHI nodes in block #126

Updating SSA information for statement D.43370_389 = a_engine_48->ice_in.chosen[0];

Updating SSA information for statement D.43371_390 = a_engine_48->ice_in.cands[D.43370_389][0].ready;



Registering new PHI nodes in block #127

Updating SSA information for statement gen_ice (session_45(D), 0, 0B, 0);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5010, session_45(D), 6, "Activating Audio ICE\n");

Updating SSA information for statement D.43077_391 = a_engine_48->rtp_session;

Updating SSA information for statement D.43374_392 = a_engine_48->ice_in.ufrag;

Updating SSA information for statement D.43375_393 = a_engine_48->ice_out.ufrag;

Updating SSA information for statement D.43376_394 = a_engine_48->ice_out.pwd;

Updating SSA information for statement D.43377_395 = a_engine_48->ice_in.pwd;

Updating SSA information for statement D.43379_396 = switch_ice_direction (session_45(D));



Registering new PHI nodes in block #128



Registering new PHI nodes in block #129



Registering new PHI nodes in block #130

Updating SSA information for statement switch_rtp_activate_ice (D.43077_391, D.43374_392, D.43375_393, D.43376_394, D.43377_395, 0, iftmp.49_31, D.43383_399);



Registering new PHI nodes in block #131

Updating SSA information for statement D.43073_400 = session_45(D)->channel;

Updating SSA information for statement val_401 = switch_channel_get_variable_dup (D.43073_400, "rtcp_audio_interval_msec", 1, -1);



Registering new PHI nodes in block #132

Updating SSA information for statement D.43099_402 = smh_46->mparams;

Updating SSA information for statement val_403 = D.43099_402->rtcp_audio_interval_msec;



Registering new PHI nodes in block #133

Updating SSA information for statement D.43073_404 = session_45(D)->channel;

Updating SSA information for statement rport_405 = switch_channel_get_variable_dup (D.43073_404, "rtp_remote_audio_rtcp_port", 1, -1);

Updating SSA information for statement remote_rtcp_port_406 = a_engine_48->remote_rtcp_port;



Registering new PHI nodes in block #134

Updating SSA information for statement D.48086_1338 = strtol (rport_405, 0B, 10);

Updating SSA information for statement D.48085 = D.48086_1338;

Updating SSA information for statement D.43392_410 = D.48085;



Registering new PHI nodes in block #135

Updating SSA information for statement D.43393_412 = strcasecmp (val_1, "passthru");



Registering new PHI nodes in block #136

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5043, session_45(D), 6, "Activating RTCP PASSTHRU PORT %d\n", D.43396_413);

Updating SSA information for statement D.43077_414 = a_engine_48->rtp_session;

Updating SSA information for statement D.43397_415 = a_engine_48->rtcp_mux;

Updating SSA information for statement switch_rtp_activate_rtcp (D.43077_414, -1, remote_rtcp_port_13, D.43398_416);



Registering new PHI nodes in block #137

Updating SSA information for statement D.48089_1339 = strtol (val_1, 0B, 10);

Updating SSA information for statement D.48088 = D.48089_1339;

Updating SSA information for statement interval_417 = D.48088;



Registering new PHI nodes in block #138

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5048, session_45(D), 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_417);



Registering new PHI nodes in block #139

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5053, session_45(D), 6, "Activating RTCP PORT %d\n", D.43396_421);

Updating SSA information for statement D.43077_422 = a_engine_48->rtp_session;

Updating SSA information for statement D.43397_423 = a_engine_48->rtcp_mux;

Updating SSA information for statement switch_rtp_activate_rtcp (D.43077_422, interval_14, remote_rtcp_port_13, D.43398_424);



Registering new PHI nodes in block #140

Updating SSA information for statement D.43404_425 = a_engine_48->ice_in.chosen[1];

Updating SSA information for statement D.43405_426 = a_engine_48->ice_in.cands[D.43404_425][1].ready;



Registering new PHI nodes in block #141

Updating SSA information for statement D.43397_427 = a_engine_48->rtcp_mux;



Registering new PHI nodes in block #142

Updating SSA information for statement D.43404_428 = a_engine_48->ice_in.chosen[1];

Updating SSA information for statement D.43411_429 = a_engine_48->ice_in.cands[D.43404_428][1].con_addr;

Updating SSA information for statement D.43370_430 = a_engine_48->ice_in.chosen[0];

Updating SSA information for statement D.43412_431 = a_engine_48->ice_in.cands[D.43370_430][0].con_addr;

Updating SSA information for statement D.39377_432 = __builtin_strcmp (D.43411_429, D.43412_431);



Registering new PHI nodes in block #143

Updating SSA information for statement D.43404_433 = a_engine_48->ice_in.chosen[1];

Updating SSA information for statement D.43414_434 = a_engine_48->ice_in.cands[D.43404_433][1].con_port;

Updating SSA information for statement D.43370_435 = a_engine_48->ice_in.chosen[0];

Updating SSA information for statement D.43415_436 = a_engine_48->ice_in.cands[D.43370_435][0].con_port;



Registering new PHI nodes in block #144

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5061, session_45(D), 6, "Skipping RTCP ICE (Same as RTP)\n");



Registering new PHI nodes in block #145

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5063, session_45(D), 6, "Activating RTCP ICE\n");

Updating SSA information for statement D.43077_437 = a_engine_48->rtp_session;

Updating SSA information for statement D.43374_438 = a_engine_48->ice_in.ufrag;

Updating SSA information for statement D.43375_439 = a_engine_48->ice_out.ufrag;

Updating SSA information for statement D.43376_440 = a_engine_48->ice_out.pwd;

Updating SSA information for statement D.43377_441 = a_engine_48->ice_in.pwd;

Updating SSA information for statement D.43418_442 = switch_ice_direction (session_45(D));



Registering new PHI nodes in block #146



Registering new PHI nodes in block #147



Registering new PHI nodes in block #148

Updating SSA information for statement switch_rtp_activate_ice (D.43077_437, D.43374_438, D.43375_439, D.43376_440, D.43377_441, 1, iftmp.51_32, D.43383_445);



Registering new PHI nodes in block #149



Registering new PHI nodes in block #150

Updating SSA information for statement D.48092_1340 = MEM[(const char *)D.43422_446];



Registering new PHI nodes in block #151



Registering new PHI nodes in block #152

Updating SSA information for statement D.48091 = D.48093_1341;

Updating SSA information for statement D.43423_447 = D.48091;



Registering new PHI nodes in block #153

Updating SSA information for statement D.43426_448 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #154

Updating SSA information for statement D.43429_449 = smh_46->session;

Updating SSA information for statement D.43430_450 = dtls_ok (D.43429_449);



Registering new PHI nodes in block #155

Updating SSA information for statement D.43429_451 = smh_46->session;

Updating SSA information for statement D.43434_452 = D.43429_451->channel;

Updating SSA information for statement D.43435_453 = switch_channel_direction (D.43434_452);



Registering new PHI nodes in block #156



Registering new PHI nodes in block #157



Registering new PHI nodes in block #158

Updating SSA information for statement D.43429_457 = smh_46->session;

Updating SSA information for statement D.43434_458 = D.43429_457->channel;

Updating SSA information for statement D.43439_459 = switch_channel_test_flag (D.43434_458, 112);



Registering new PHI nodes in block #159



Registering new PHI nodes in block #160



Registering new PHI nodes in block #161



Registering new PHI nodes in block #162



Registering new PHI nodes in block #163

Updating SSA information for statement D.43397_464 = a_engine_48->rtcp_mux;



Registering new PHI nodes in block #164

Updating SSA information for statement D.43099_465 = smh_46->mparams;

Updating SSA information for statement D.43448_466 = D.43099_465->rtcp_audio_interval_msec;



Registering new PHI nodes in block #165



Registering new PHI nodes in block #166

Updating SSA information for statement D.43077_468 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_add_dtls (D.43077_468, D.43451_469, D.43452_470, D.43453_471);

Updating SSA information for statement D.43397_472 = a_engine_48->rtcp_mux;



Registering new PHI nodes in block #167

Updating SSA information for statement D.43099_473 = smh_46->mparams;

Updating SSA information for statement D.43448_474 = D.43099_473->rtcp_audio_interval_msec;



Registering new PHI nodes in block #168

Updating SSA information for statement D.43077_476 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_add_dtls (D.43077_476, D.43451_477, D.43452_478, D.43453_479);



Registering new PHI nodes in block #169

Updating SSA information for statement D.43073_480 = session_45(D)->channel;

Updating SSA information for statement val_481 = switch_channel_get_variable_dup (D.43073_480, "jitterbuffer_msec", 1, -1);



Registering new PHI nodes in block #170

Updating SSA information for statement D.43099_482 = smh_46->mparams;

Updating SSA information for statement val_483 = D.43099_482->jb_msec;



Registering new PHI nodes in block #171

Updating SSA information for statement D.48096_1342 = strtol (val_2, 0B, 10);

Updating SSA information for statement D.48095 = D.48096_1342;

Updating SSA information for statement jb_msec_484 = D.48095;

Updating SSA information for statement p_487 = __builtin_strchr (val_2, 58);



Registering new PHI nodes in block #172

Updating SSA information for statement D.48099_1343 = strtol (p_488, 0B, 10);

Updating SSA information for statement D.48098 = D.48099_1343;

Updating SSA information for statement maxlen_489 = D.48098;

Updating SSA information for statement q_490 = __builtin_strchr (p_488, 58);



Registering new PHI nodes in block #173

Updating SSA information for statement D.48102_1344 = strtol (q_491, 0B, 10);

Updating SSA information for statement D.48101 = D.48102_1344;

Updating SSA information for statement D.43465_492 = D.48101;



Registering new PHI nodes in block #174



Registering new PHI nodes in block #175

Updating SSA information for statement D.43470_496 = a_engine_48->read_codec.implementation;

Updating SSA information for statement D.43471_497 = D.43470_496->microseconds_per_packet;



Registering new PHI nodes in block #176



Registering new PHI nodes in block #177

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5125, session_45(D), 3, "Invalid Jitterbuffer spec [%d] must be between 20 and 10000\n", jb_msec_17);



Registering new PHI nodes in block #178

Updating SSA information for statement D.43189_504 = a_engine_48->read_impl.microseconds_per_packet;



Registering new PHI nodes in block #179



Registering new PHI nodes in block #180



Registering new PHI nodes in block #181

Updating SSA information for statement D.43189_508 = a_engine_48->read_impl.microseconds_per_packet;



Registering new PHI nodes in block #182



Registering new PHI nodes in block #183



Registering new PHI nodes in block #184

Updating SSA information for statement D.43077_512 = a_engine_48->rtp_session;

Updating SSA information for statement D.43294_515 = a_engine_48->read_impl.samples_per_packet;

Updating SSA information for statement D.43486_516 = a_engine_48->read_impl.samples_per_second;

Updating SSA information for statement D.43488_518 = switch_rtp_activate_jitter_buffer (D.43077_512, qlen.55_513, maxqlen.56_514, D.43294_515, D.43486_516, max_drift.57_517);



Registering new PHI nodes in block #185

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5146, session_45(D), 7, "Setting Jitterbuffer to %dms (%d frames)\n", jb_msec_17, qlen_20);

Updating SSA information for statement D.43073_519 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.43073_519, 57, 1);

Updating SSA information for statement D.43073_520 = session_45(D)->channel;

Updating SSA information for statement D.43491_521 = switch_channel_get_variable_dup (D.43073_520, "rtp_jitter_buffer_plc", 1, -1);

Updating SSA information for statement D.43492_522 = switch_false (D.43491_521);



Registering new PHI nodes in block #186

Updating SSA information for statement D.43073_523 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.43073_523, 58, 1);



Registering new PHI nodes in block #187

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5153, session_45(D), 4, "Error Setting Jitterbuffer to %dms (%d frames)\n", jb_msec_17, qlen_20);



Registering new PHI nodes in block #188

Updating SSA information for statement D.43073_524 = session_45(D)->channel;

Updating SSA information for statement val_525 = switch_channel_get_variable_dup (D.43073_524, "rtp_timeout_sec", 1, -1);



Registering new PHI nodes in block #189

Updating SSA information for statement D.48105_1345 = strtol (val_525, 0B, 10);

Updating SSA information for statement D.48104 = D.48105_1345;

Updating SSA information for statement v_526 = D.48104;



Registering new PHI nodes in block #190

Updating SSA information for statement D.43099_527 = smh_46->mparams;

Updating SSA information for statement D.43099_527->rtp_timeout_sec = v.58_528;



Registering new PHI nodes in block #191

Updating SSA information for statement D.43073_529 = session_45(D)->channel;

Updating SSA information for statement val_530 = switch_channel_get_variable_dup (D.43073_529, "rtp_hold_timeout_sec", 1, -1);



Registering new PHI nodes in block #192

Updating SSA information for statement D.48108_1346 = strtol (val_530, 0B, 10);

Updating SSA information for statement D.48107 = D.48108_1346;

Updating SSA information for statement v_531 = D.48107;



Registering new PHI nodes in block #193

Updating SSA information for statement D.43099_532 = smh_46->mparams;

Updating SSA information for statement D.43099_532->rtp_hold_timeout_sec = v.59_533;



Registering new PHI nodes in block #194

Updating SSA information for statement D.43099_534 = smh_46->mparams;

Updating SSA information for statement D.43506_535 = D.43099_534->rtp_timeout_sec;



Registering new PHI nodes in block #195

Updating SSA information for statement D.43486_536 = a_engine_48->read_impl.samples_per_second;

Updating SSA information for statement D.43099_537 = smh_46->mparams;

Updating SSA information for statement D.43506_538 = D.43099_537->rtp_timeout_sec;

Updating SSA information for statement D.43294_540 = a_engine_48->read_impl.samples_per_packet;

Updating SSA information for statement a_engine_48->max_missed_packets = D.43510_541;

Updating SSA information for statement D.43077_542 = a_engine_48->rtp_session;

Updating SSA information for statement D.43511_543 = a_engine_48->max_missed_packets;

Updating SSA information for statement switch_rtp_set_max_missed_packets (D.43077_542, D.43511_543);

Updating SSA information for statement D.43099_544 = smh_46->mparams;

Updating SSA information for statement D.43512_545 = D.43099_544->rtp_hold_timeout_sec;



Registering new PHI nodes in block #196

Updating SSA information for statement D.43099_546 = smh_46->mparams;

Updating SSA information for statement D.43099_547 = smh_46->mparams;

Updating SSA information for statement D.43506_548 = D.43099_547->rtp_timeout_sec;

Updating SSA information for statement D.43099_547->rtp_hold_timeout_sec = D.43515_549;



Registering new PHI nodes in block #197

Updating SSA information for statement D.43099_550 = smh_46->mparams;

Updating SSA information for statement D.43512_551 = D.43099_550->rtp_hold_timeout_sec;



Registering new PHI nodes in block #198

Updating SSA information for statement D.43486_552 = a_engine_48->read_impl.samples_per_second;

Updating SSA information for statement D.43099_553 = smh_46->mparams;

Updating SSA information for statement D.43512_554 = D.43099_553->rtp_hold_timeout_sec;

Updating SSA information for statement D.43294_556 = a_engine_48->read_impl.samples_per_packet;

Updating SSA information for statement a_engine_48->max_missed_hold_packets = D.43519_557;



Registering new PHI nodes in block #199

Updating SSA information for statement D.43099_558 = smh_46->mparams;

Updating SSA information for statement D.43520_559 = D.43099_558->te;



Registering new PHI nodes in block #200

Updating SSA information for statement D.43099_560 = smh_46->mparams;

Updating SSA information for statement D.43520_561 = D.43099_560->te;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5188, session_45(D), 7, "Set 2833 dtmf send payload to %u\n", D.43523_562);

Updating SSA information for statement D.43077_563 = a_engine_48->rtp_session;

Updating SSA information for statement D.43099_564 = smh_46->mparams;

Updating SSA information for statement D.43520_565 = D.43099_564->te;

Updating SSA information for statement switch_rtp_set_telephony_event (D.43077_563, D.43520_565);

Updating SSA information for statement D.43073_566 = session_45(D)->channel;

Updating SSA information for statement D.43099_567 = smh_46->mparams;

Updating SSA information for statement D.43520_568 = D.43099_567->te;

Updating SSA information for statement switch_channel_set_variable_printf (D.43073_566, "rtp_2833_send_payload", "%d", D.43523_569);



Registering new PHI nodes in block #201

Updating SSA information for statement D.43099_570 = smh_46->mparams;

Updating SSA information for statement D.43524_571 = D.43099_570->recv_te;



Registering new PHI nodes in block #202

Updating SSA information for statement D.43099_572 = smh_46->mparams;

Updating SSA information for statement D.43524_573 = D.43099_572->recv_te;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5194, session_45(D), 7, "Set 2833 dtmf receive payload to %u\n", D.43527_574);

Updating SSA information for statement D.43077_575 = a_engine_48->rtp_session;

Updating SSA information for statement D.43099_576 = smh_46->mparams;

Updating SSA information for statement D.43524_577 = D.43099_576->recv_te;

Updating SSA information for statement switch_rtp_set_telephony_recv_event (D.43077_575, D.43524_577);

Updating SSA information for statement D.43073_578 = session_45(D)->channel;

Updating SSA information for statement D.43099_579 = smh_46->mparams;

Updating SSA information for statement D.43524_580 = D.43099_579->recv_te;

Updating SSA information for statement switch_channel_set_variable_printf (D.43073_578, "rtp_2833_recv_payload", "%d", D.43527_581);



Registering new PHI nodes in block #203

Updating SSA information for statement D.43531_582 = switch_media_handle_test_media_flag (smh_46, 9);



Registering new PHI nodes in block #204

Updating SSA information for statement D.43073_583 = session_45(D)->channel;

Updating SSA information for statement val_584 = switch_channel_get_variable_dup (D.43073_583, "supress_cng", 1, -1);



Registering new PHI nodes in block #205

Updating SSA information for statement D.43534_585 = switch_true (val_584);



Registering new PHI nodes in block #206

Updating SSA information for statement D.43073_586 = session_45(D)->channel;

Updating SSA information for statement val_587 = switch_channel_get_variable_dup (D.43073_586, "suppress_cng", 1, -1);



Registering new PHI nodes in block #207

Updating SSA information for statement D.43536_588 = switch_true (val_587);



Registering new PHI nodes in block #208

Updating SSA information for statement D.43099_589 = smh_46->mparams;

Updating SSA information for statement D.43099_589->cng_pt = 0;



Registering new PHI nodes in block #209

Updating SSA information for statement D.43073_590 = session_45(D)->channel;

Updating SSA information for statement val_591 = switch_channel_get_variable_dup (D.43073_590, "rtp_digit_delay", 1, -1);



Registering new PHI nodes in block #210

Updating SSA information for statement D.48111_1347 = strtol (val_591, 0B, 10);

Updating SSA information for statement D.48110 = D.48111_1347;

Updating SSA information for statement delayi_592 = D.48110;



Registering new PHI nodes in block #211



Registering new PHI nodes in block #212

Updating SSA information for statement D.43099_594 = smh_46->mparams;

Updating SSA information for statement D.43099_594->dtmf_delay = delayi.60_595;



Registering new PHI nodes in block #213

Updating SSA information for statement D.43099_596 = smh_46->mparams;

Updating SSA information for statement D.43542_597 = D.43099_596->dtmf_delay;



Registering new PHI nodes in block #214

Updating SSA information for statement D.43077_598 = a_engine_48->rtp_session;

Updating SSA information for statement D.43099_599 = smh_46->mparams;

Updating SSA information for statement D.43542_600 = D.43099_599->dtmf_delay;

Updating SSA information for statement switch_rtp_set_interdigit_delay (D.43077_598, D.43542_600);

Updating SSA information for statement D.43073_601 = session_45(D)->channel;

Updating SSA information for statement D.43545_602 = switch_channel_get_name (D.43073_601);

Updating SSA information for statement D.43099_603 = smh_46->mparams;

Updating SSA information for statement D.43542_604 = D.43099_603->dtmf_delay;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5216, session_45(D), 7, "%s Set rtp dtmf delay to %u\n", D.43545_602, D.43542_604);



Registering new PHI nodes in block #215

Updating SSA information for statement D.43099_605 = smh_46->mparams;

Updating SSA information for statement D.43143_606 = D.43099_605->cng_pt;



Registering new PHI nodes in block #216

Updating SSA information for statement D.43548_607 = switch_media_handle_test_media_flag (smh_46, 9);



Registering new PHI nodes in block #217

Updating SSA information for statement D.43099_608 = smh_46->mparams;

Updating SSA information for statement D.43143_609 = D.43099_608->cng_pt;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5222, session_45(D), 7, "Set comfort noise payload to %u\n", D.43551_610);

Updating SSA information for statement D.43077_611 = a_engine_48->rtp_session;

Updating SSA information for statement D.43099_612 = smh_46->mparams;

Updating SSA information for statement D.43143_613 = D.43099_612->cng_pt;

Updating SSA information for statement switch_rtp_set_cng_pt (D.43077_611, D.43143_613);



Registering new PHI nodes in block #218

Updating SSA information for statement switch_core_session_apply_crypto (session_45(D), 0);

Updating SSA information for statement D.43171_614 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43174_615 = D.43171_614->remote_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.43179_616);

Updating SSA information for statement D.43073_617 = session_45(D)->channel;

Updating SSA information for statement D.43171_618 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_619 = D.43171_618->remote_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_617, "remote_media_ip", D.43172_619, 1);

Updating SSA information for statement D.43073_620 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_620, "remote_media_port", &tmp, 1);

Updating SSA information for statement D.43073_621 = session_45(D)->channel;

Updating SSA information for statement D.43552_622 = switch_channel_test_flag (D.43073_621, 74);



Registering new PHI nodes in block #219

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5234, session_45(D), 6, "Activating ZRTP PROXY MODE\n");

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5235, session_45(D), 7, "Disable NOTIMER_DURING_BRIDGE\n");

Updating SSA information for statement D.43073_623 = session_45(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.43073_623, 99);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5237, session_45(D), 7, "Activating audio UDPTL mode\n");

Updating SSA information for statement D.43077_624 = a_engine_48->rtp_session;

Updating SSA information for statement switch_rtp_udptl_mode (D.43077_624);



Registering new PHI nodes in block #330

Updating SSA information for statement err.45_625 = err;



Registering new PHI nodes in block #331

Updating SSA information for statement iftmp.68_626 = err;



Registering new PHI nodes in block #332



Registering new PHI nodes in block #333

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5554, session_45(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", iftmp.68_41);

Updating SSA information for statement D.43073_628 = session_45(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.43073_628, "src/switch_core_media.c", &__func__, 5555, 27);



Registering new PHI nodes in block #220

Updating SSA information for statement D.43073_630 = session_45(D)->channel;

Updating SSA information for statement D.43555_631 = switch_channel_direction (D.43073_630);



Registering new PHI nodes in block #221

Updating SSA information for statement switch_core_media_check_video_codecs (session_45(D));



Registering new PHI nodes in block #222

Updating SSA information for statement D.43073_632 = session_45(D)->channel;

Updating SSA information for statement D.43558_633 = switch_channel_test_flag (D.43073_632, 98);



Registering new PHI nodes in block #223

Updating SSA information for statement D.43561_634 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43562_635 = D.43561_634->rm_encoding;



Registering new PHI nodes in block #224

Updating SSA information for statement D.43561_636 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_637 = D.43561_636->remote_sdp_port;



Registering new PHI nodes in block #225

Updating SSA information for statement D.43096_638 = v_engine_49->rtp_session;



Registering new PHI nodes in block #226

Updating SSA information for statement D.43073_639 = session_45(D)->channel;

Updating SSA information for statement D.43570_640 = switch_channel_test_flag (D.43073_639, 103);



Registering new PHI nodes in block #227

Updating SSA information for statement D.43096_641 = v_engine_49->rtp_session;

Updating SSA information for statement remote_host_642 = switch_rtp_get_remote_host (D.43096_641);

Updating SSA information for statement D.43096_643 = v_engine_49->rtp_session;

Updating SSA information for statement remote_port_644 = switch_rtp_get_remote_port (D.43096_643);



Registering new PHI nodes in block #228

Updating SSA information for statement D.43561_648 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_649 = D.43561_648->remote_sdp_ip;

Updating SSA information for statement D.39400_650 = __builtin_strcmp (remote_host_642, D.43578_649);



Registering new PHI nodes in block #229

Updating SSA information for statement D.43561_651 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_652 = D.43561_651->remote_sdp_port;



Registering new PHI nodes in block #230

Updating SSA information for statement D.43073_653 = session_45(D)->channel;

Updating SSA information for statement D.43581_654 = switch_channel_get_name (D.43073_653);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5263, session_45(D), 7, "Video params are unchanged for %s.\n", D.43581_654);



Registering new PHI nodes in block #231

Updating SSA information for statement D.43073_655 = session_45(D)->channel;

Updating SSA information for statement D.43582_656 = switch_channel_get_name (D.43073_655);

Updating SSA information for statement D.43561_658 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_659 = D.43561_658->remote_sdp_ip;

Updating SSA information for statement D.43561_660 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_661 = D.43561_660->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5267, session_45(D), 7, "Video params changed for %s from %s:%d to %s:%d\n", D.43582_656, remote_host_642, D.43583_657, D.43578_659, D.43584_662);



Registering new PHI nodes in block #232

Updating SSA information for statement D.43073_663 = session_45(D)->channel;

Updating SSA information for statement D.43585_664 = switch_channel_test_flag (D.43073_663, 29);



Registering new PHI nodes in block #233

Updating SSA information for statement D.43096_665 = v_engine_49->rtp_session;

Updating SSA information for statement D.43588_666 = switch_rtp_ready (D.43096_665);



Registering new PHI nodes in block #234

Updating SSA information for statement D.43073_667 = session_45(D)->channel;

Updating SSA information for statement D.43591_668 = switch_channel_get_name (D.43073_667);

Updating SSA information for statement D.43171_669 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_670 = D.43171_669->remote_sdp_ip;

Updating SSA information for statement D.43592_671 = v_engine_49->local_sdp_port;

Updating SSA information for statement D.43561_673 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_674 = D.43561_673->remote_sdp_ip;

Updating SSA information for statement D.43561_675 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_676 = D.43561_675->remote_sdp_port;

Updating SSA information for statement D.43561_678 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_679 = D.43561_678->agreed_pt;

Updating SSA information for statement D.43189_681 = a_engine_48->read_impl.microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5275, session_45(D), 7, "VIDEO RTP [%s] %s port %d -> %s port %d codec: %u ms: %d\n", D.43591_668, D.43172_670, D.43593_672, D.43578_674, D.43584_677, D.43595_680, D.43190_682);

Updating SSA information for statement start_video_thread (session_45(D));

Updating SSA information for statement D.43096_683 = v_engine_49->rtp_session;

Updating SSA information for statement D.43561_684 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_685 = D.43561_684->agreed_pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.43096_683, D.43594_685);



Registering new PHI nodes in block #235

Updating SSA information for statement D.43592_686 = v_engine_49->local_sdp_port;

Updating SSA information for statement switch_snprintf (&tmp, 50, "%d", D.43593_687);

Updating SSA information for statement D.43073_688 = session_45(D)->channel;

Updating SSA information for statement D.43191_689 = a_engine_48->adv_sdp_ip;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_688, "local_video_ip", D.43191_689, 1);

Updating SSA information for statement D.43073_690 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.43073_690, "local_video_port", &tmp, 1);

Updating SSA information for statement D.43096_691 = v_engine_49->rtp_session;



Registering new PHI nodes in block #236

Updating SSA information for statement D.43073_692 = session_45(D)->channel;

Updating SSA information for statement D.43598_693 = switch_channel_test_flag (D.43073_692, 103);



Registering new PHI nodes in block #237

Updating SSA information for statement remote_rtcp_port_695 = v_engine_49->remote_rtcp_port;



Registering new PHI nodes in block #238

Updating SSA information for statement D.43073_696 = session_45(D)->channel;

Updating SSA information for statement rport_697 = switch_channel_get_variable_dup (D.43073_696, "rtp_remote_video_rtcp_port", 1, -1);



Registering new PHI nodes in block #239

Updating SSA information for statement D.48114_1348 = strtol (rport_697, 0B, 10);

Updating SSA information for statement D.48113 = D.48114_1348;

Updating SSA information for statement D.43605_698 = D.48113;



Registering new PHI nodes in block #240

Updating SSA information for statement D.43096_700 = v_engine_49->rtp_session;

Updating SSA information for statement D.43561_701 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_702 = D.43561_701->remote_sdp_ip;

Updating SSA information for statement D.43561_703 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_704 = D.43561_703->remote_sdp_port;

Updating SSA information for statement D.43606_705 = switch_rtp_set_remote_address (D.43096_700, D.43578_702, D.43565_704, remote_rtcp_port_24, 1, &err);



Registering new PHI nodes in block #241

Updating SSA information for statement err.45_706 = err;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5306, session_45(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", err.45_706);



Registering new PHI nodes in block #242

Updating SSA information for statement D.43561_707 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_708 = D.43561_707->remote_sdp_ip;

Updating SSA information for statement D.43561_709 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_710 = D.43561_709->remote_sdp_port;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5308, session_45(D), 7, "VIDEO RTP CHANGING DEST TO: [%s:%d]\n", D.43578_708, D.43584_711);

Updating SSA information for statement D.43612_712 = switch_media_handle_test_media_flag (smh_46, 10);



Registering new PHI nodes in block #243

Updating SSA information for statement D.43073_713 = session_45(D)->channel;

Updating SSA information for statement D.43615_714 = switch_channel_test_flag (D.43073_713, 106);



Registering new PHI nodes in block #244

Updating SSA information for statement D.43073_715 = session_45(D)->channel;

Updating SSA information for statement val_716 = switch_channel_get_variable_dup (D.43073_715, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #245

Updating SSA information for statement D.43619_717 = switch_true (val_716);



Registering new PHI nodes in block #246

Updating SSA information for statement D.43096_718 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.43096_718, 7);

Updating SSA information for statement start_video_thread (session_45(D));



Registering new PHI nodes in block #247

Updating SSA information for statement D.43073_719 = session_45(D)->channel;

Updating SSA information for statement D.43620_720 = switch_channel_test_flag (D.43073_719, 29);



Registering new PHI nodes in block #248

Updating SSA information for statement switch_core_media_proxy_remote_addr (session_45(D), 0B);

Updating SSA information for statement memset (&flags, 0, 156);

Updating SSA information for statement D.43270_721 = flags[19];

Updating SSA information for statement flags[19] = D.43271_722;

Updating SSA information for statement D.43102_723 = flags[13];

Updating SSA information for statement flags[13] = D.43103_724;

Updating SSA information for statement D.43625_725 = switch_media_handle_test_media_flag (smh_46, 10);



Registering new PHI nodes in block #249

Updating SSA information for statement D.43073_726 = session_45(D)->channel;

Updating SSA information for statement D.43628_727 = switch_channel_test_flag (D.43073_726, 106);



Registering new PHI nodes in block #250

Updating SSA information for statement D.43073_728 = session_45(D)->channel;

Updating SSA information for statement val_729 = switch_channel_get_variable_dup (D.43073_728, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #251

Updating SSA information for statement D.43632_730 = switch_true (val_729);



Registering new PHI nodes in block #252

Updating SSA information for statement D.43114_731 = flags[7];

Updating SSA information for statement flags[7] = D.43115_732;



Registering new PHI nodes in block #253

Updating SSA information for statement D.43073_734 = session_45(D)->channel;

Updating SSA information for statement D.43633_735 = switch_channel_get_name (D.43073_734);

Updating SSA information for statement D.43171_736 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_737 = D.43171_736->remote_sdp_ip;

Updating SSA information for statement D.43592_738 = v_engine_49->local_sdp_port;

Updating SSA information for statement D.43561_740 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_741 = D.43561_740->remote_sdp_ip;

Updating SSA information for statement D.43561_742 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_743 = D.43561_742->remote_sdp_port;

Updating SSA information for statement D.43561_745 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_746 = D.43561_745->agreed_pt;

Updating SSA information for statement D.43634_748 = v_engine_49->read_impl.microseconds_per_packet;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5334, session_45(D), 7, "PROXY VIDEO RTP [%s] %s:%d->%s:%d codec: %u ms: %d\n", D.43633_735, D.43172_737, D.43593_739, D.43578_741, D.43584_744, D.43595_747, D.43635_749);

Updating SSA information for statement D.43096_750 = v_engine_49->rtp_session;

Updating SSA information for statement D.43636_751 = switch_rtp_ready (D.43096_750);



Registering new PHI nodes in block #254

Updating SSA information for statement D.43096_752 = v_engine_49->rtp_session;

Updating SSA information for statement D.43561_753 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_754 = D.43561_753->agreed_pt;

Updating SSA information for statement switch_rtp_set_default_payload (D.43096_752, D.43594_754);



Registering new PHI nodes in block #255

Updating SSA information for statement D.43099_755 = smh_46->mparams;

Updating SSA information for statement timer_name_756 = D.43099_755->timer_name;

Updating SSA information for statement D.43073_757 = session_45(D)->channel;

Updating SSA information for statement var_758 = switch_channel_get_variable_dup (D.43073_757, "rtp_timer_name", 1, -1);



Registering new PHI nodes in block #256



Registering new PHI nodes in block #257

Updating SSA information for statement D.43096_760 = v_engine_49->rtp_session;



Registering new PHI nodes in block #258

Updating SSA information for statement D.43592_761 = v_engine_49->local_sdp_port;



Registering new PHI nodes in block #259

Updating SSA information for statement switch_core_media_choose_port (session_45(D), 1, 1);



Registering new PHI nodes in block #260

Updating SSA information for statement memset (&flags, 0, 156);

Updating SSA information for statement D.43102_762 = flags[13];

Updating SSA information for statement flags[13] = D.43103_763;

Updating SSA information for statement D.43137_764 = flags[8];

Updating SSA information for statement flags[8] = D.43138_765;

Updating SSA information for statement D.43647_766 = switch_media_handle_test_media_flag (smh_46, 10);



Registering new PHI nodes in block #261

Updating SSA information for statement D.43073_767 = session_45(D)->channel;

Updating SSA information for statement D.43650_768 = switch_channel_test_flag (D.43073_767, 15);



Registering new PHI nodes in block #262

Updating SSA information for statement D.43073_769 = session_45(D)->channel;

Updating SSA information for statement val_770 = switch_channel_get_variable_dup (D.43073_769, "disable_rtp_auto_adjust", 1, -1);



Registering new PHI nodes in block #263

Updating SSA information for statement D.43654_771 = switch_true (val_770);



Registering new PHI nodes in block #264

Updating SSA information for statement D.43073_772 = session_45(D)->channel;

Updating SSA information for statement D.43655_773 = switch_channel_test_flag (D.43073_772, 106);



Registering new PHI nodes in block #265

Updating SSA information for statement D.43114_774 = flags[7];

Updating SSA information for statement flags[7] = D.43115_775;



Registering new PHI nodes in block #266

Updating SSA information for statement D.43073_776 = session_45(D)->channel;

Updating SSA information for statement D.43658_777 = switch_channel_test_flag (D.43073_776, 29);



Registering new PHI nodes in block #267

Updating SSA information for statement D.43270_778 = flags[19];

Updating SSA information for statement flags[19] = D.43271_779;



Registering new PHI nodes in block #268

Updating SSA information for statement switch_core_media_set_video_codec (session_45(D), 0);

Updating SSA information for statement flags[3] = 0;

Updating SSA information for statement flags[0] = 0;

Updating SSA information for statement D.43661_780 = flags[30];

Updating SSA information for statement flags[30] = D.43662_781;

Updating SSA information for statement D.43184_782 = a_engine_48->local_sdp_ip;

Updating SSA information for statement D.43592_783 = v_engine_49->local_sdp_port;

Updating SSA information for statement D.43561_784 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_785 = D.43561_784->remote_sdp_ip;

Updating SSA information for statement D.43561_786 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_787 = D.43561_786->remote_sdp_port;

Updating SSA information for statement D.43561_788 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_789 = D.43561_788->agreed_pt;

Updating SSA information for statement D.43663_790 = switch_core_session_get_pool (session_45(D));

Updating SSA information for statement D.43664_791 = switch_rtp_new (D.43184_782, D.43592_783, D.43578_785, D.43565_787, D.43594_789, 1, 90000, &flags, 0B, &err, D.43663_790);

Updating SSA information for statement v_engine_49->rtp_session = D.43664_791;

Updating SSA information for statement D.43073_792 = session_45(D)->channel;

Updating SSA information for statement D.43666_793 = switch_channel_test_flag (D.43073_792, 29);



Registering new PHI nodes in block #269



Registering new PHI nodes in block #270



Registering new PHI nodes in block #271

Updating SSA information for statement D.43073_796 = session_45(D)->channel;

Updating SSA information for statement D.43670_797 = switch_channel_get_name (D.43073_796);

Updating SSA information for statement D.43171_798 = a_engine_48->cur_payload_map;

Updating SSA information for statement D.43172_799 = D.43171_798->remote_sdp_ip;

Updating SSA information for statement D.43592_800 = v_engine_49->local_sdp_port;

Updating SSA information for statement D.43561_802 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43578_803 = D.43561_802->remote_sdp_ip;

Updating SSA information for statement D.43561_804 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43565_805 = D.43561_804->remote_sdp_port;

Updating SSA information for statement D.43561_807 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_808 = D.43561_807->agreed_pt;

Updating SSA information for statement D.43096_810 = v_engine_49->rtp_session;

Updating SSA information for statement D.43672_811 = switch_rtp_ready (D.43096_810);



Registering new PHI nodes in block #272

Updating SSA information for statement iftmp.62_812 = err;



Registering new PHI nodes in block #273



Registering new PHI nodes in block #274

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5391, session_45(D), 7, "%sVIDEO RTP [%s] %s:%d->%s:%d codec: %u ms: %d [%s]\n", iftmp.61_35, D.43670_797, D.43172_799, D.43593_801, D.43578_803, D.43584_806, D.43595_809, 0, iftmp.62_36);

Updating SSA information for statement D.43096_814 = v_engine_49->rtp_session;

Updating SSA information for statement D.43676_815 = switch_rtp_ready (D.43096_814);



Registering new PHI nodes in block #275

Updating SSA information for statement D.43679_816 = v_engine_49->fir;



Registering new PHI nodes in block #276

Updating SSA information for statement D.43096_817 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.43096_817, 36);



Registering new PHI nodes in block #277

Updating SSA information for statement D.43682_818 = v_engine_49->pli;



Registering new PHI nodes in block #278

Updating SSA information for statement D.43096_819 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.43096_819, 37);



Registering new PHI nodes in block #279

Updating SSA information for statement D.43096_820 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_set_payload_map (D.43096_820, D.43685_821);

Updating SSA information for statement start_video_thread (session_45(D));

Updating SSA information for statement D.43073_822 = session_45(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.43073_822, 23, 1);

Updating SSA information for statement D.43073_823 = session_45(D)->channel;

Updating SSA information for statement ssrc_824 = switch_channel_get_variable_dup (D.43073_823, "rtp_use_video_ssrc", 1, -1);



Registering new PHI nodes in block #280

Updating SSA information for statement ssrc_ul_825 = strtoul (ssrc_824, 0B, 10);

Updating SSA information for statement D.43096_826 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_set_ssrc (D.43096_826, ssrc_ul_825);

Updating SSA information for statement v_engine_49->ssrc = ssrc_ul_825;



Registering new PHI nodes in block #281

Updating SSA information for statement D.43096_827 = v_engine_49->rtp_session;

Updating SSA information for statement D.43689_828 = v_engine_49->ssrc;

Updating SSA information for statement switch_rtp_set_ssrc (D.43096_827, D.43689_828);



Registering new PHI nodes in block #282

Updating SSA information for statement D.43690_829 = v_engine_49->remote_ssrc;



Registering new PHI nodes in block #283

Updating SSA information for statement D.43096_830 = v_engine_49->rtp_session;

Updating SSA information for statement D.43690_831 = v_engine_49->remote_ssrc;

Updating SSA information for statement switch_rtp_set_remote_ssrc (D.43096_830, D.43690_831);



Registering new PHI nodes in block #284

Updating SSA information for statement D.43693_832 = v_engine_49->ice_in.chosen[0];

Updating SSA information for statement D.43694_833 = v_engine_49->ice_in.cands[D.43693_832][0].ready;



Registering new PHI nodes in block #285

Updating SSA information for statement gen_ice (session_45(D), 1, 0B, 0);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5433, session_45(D), 6, "Activating Video ICE\n");

Updating SSA information for statement D.43096_834 = v_engine_49->rtp_session;

Updating SSA information for statement D.43697_835 = v_engine_49->ice_in.ufrag;

Updating SSA information for statement D.43698_836 = v_engine_49->ice_out.ufrag;

Updating SSA information for statement D.43699_837 = v_engine_49->ice_out.pwd;

Updating SSA information for statement D.43700_838 = v_engine_49->ice_in.pwd;

Updating SSA information for statement D.43702_839 = switch_ice_direction (session_45(D));



Registering new PHI nodes in block #286



Registering new PHI nodes in block #287



Registering new PHI nodes in block #288

Updating SSA information for statement switch_rtp_activate_ice (D.43096_834, D.43697_835, D.43698_836, D.43699_837, D.43700_838, 0, iftmp.63_37, D.43706_842);



Registering new PHI nodes in block #289

Updating SSA information for statement D.43073_843 = session_45(D)->channel;

Updating SSA information for statement val_844 = switch_channel_get_variable_dup (D.43073_843, "rtcp_video_interval_msec", 1, -1);



Registering new PHI nodes in block #290

Updating SSA information for statement D.43099_845 = smh_46->mparams;

Updating SSA information for statement val_846 = D.43099_845->rtcp_video_interval_msec;



Registering new PHI nodes in block #291

Updating SSA information for statement D.43073_847 = session_45(D)->channel;

Updating SSA information for statement rport_848 = switch_channel_get_variable_dup (D.43073_847, "rtp_remote_video_rtcp_port", 1, -1);

Updating SSA information for statement remote_port_849 = v_engine_49->remote_rtcp_port;



Registering new PHI nodes in block #292

Updating SSA information for statement D.48117_1349 = strtol (rport_848, 0B, 10);

Updating SSA information for statement D.48116 = D.48117_1349;

Updating SSA information for statement D.43712_850 = D.48116;



Registering new PHI nodes in block #293

Updating SSA information for statement D.43713_852 = strcasecmp (val_3, "passthru");



Registering new PHI nodes in block #294

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5462, session_45(D), 6, "Activating VIDEO RTCP PASSTHRU PORT %d\n", D.43716_853);

Updating SSA information for statement D.43096_854 = v_engine_49->rtp_session;

Updating SSA information for statement D.43717_855 = v_engine_49->rtcp_mux;

Updating SSA information for statement switch_rtp_activate_rtcp (D.43096_854, -1, remote_port_25, D.43718_856);



Registering new PHI nodes in block #295

Updating SSA information for statement D.48120_1350 = strtol (val_3, 0B, 10);

Updating SSA information for statement D.48119 = D.48120_1350;

Updating SSA information for statement interval_857 = D.48119;



Registering new PHI nodes in block #296

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5467, session_45(D), 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_857);



Registering new PHI nodes in block #297

Updating SSA information for statement D.43717_862 = v_engine_49->rtcp_mux;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5471, session_45(D), 6, "Activating VIDEO RTCP PORT %d mux %d\n", D.43716_861, D.43724_863);

Updating SSA information for statement D.43096_864 = v_engine_49->rtp_session;

Updating SSA information for statement D.43717_865 = v_engine_49->rtcp_mux;

Updating SSA information for statement switch_rtp_activate_rtcp (D.43096_864, interval_860, remote_port_25, D.43718_866);



Registering new PHI nodes in block #298

Updating SSA information for statement D.43725_867 = v_engine_49->ice_in.chosen[1];

Updating SSA information for statement D.43726_868 = v_engine_49->ice_in.cands[D.43725_867][1].ready;



Registering new PHI nodes in block #299

Updating SSA information for statement D.43717_869 = v_engine_49->rtcp_mux;



Registering new PHI nodes in block #300

Updating SSA information for statement D.43725_870 = v_engine_49->ice_in.chosen[1];

Updating SSA information for statement D.43732_871 = v_engine_49->ice_in.cands[D.43725_870][1].con_addr;

Updating SSA information for statement D.43693_872 = v_engine_49->ice_in.chosen[0];

Updating SSA information for statement D.43733_873 = v_engine_49->ice_in.cands[D.43693_872][0].con_addr;

Updating SSA information for statement D.39417_874 = __builtin_strcmp (D.43732_871, D.43733_873);



Registering new PHI nodes in block #301

Updating SSA information for statement D.43725_875 = v_engine_49->ice_in.chosen[1];

Updating SSA information for statement D.43735_876 = v_engine_49->ice_in.cands[D.43725_875][1].con_port;

Updating SSA information for statement D.43693_877 = v_engine_49->ice_in.chosen[0];

Updating SSA information for statement D.43736_878 = v_engine_49->ice_in.cands[D.43693_877][0].con_port;



Registering new PHI nodes in block #302

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5481, session_45(D), 6, "Skipping VIDEO RTCP ICE (Same as VIDEO RTP)\n");



Registering new PHI nodes in block #303

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5484, session_45(D), 6, "Activating VIDEO RTCP ICE\n");

Updating SSA information for statement D.43096_879 = v_engine_49->rtp_session;

Updating SSA information for statement D.43697_880 = v_engine_49->ice_in.ufrag;

Updating SSA information for statement D.43698_881 = v_engine_49->ice_out.ufrag;

Updating SSA information for statement D.43699_882 = v_engine_49->ice_out.pwd;

Updating SSA information for statement D.43700_883 = v_engine_49->ice_in.pwd;

Updating SSA information for statement D.43739_884 = switch_ice_direction (session_45(D));



Registering new PHI nodes in block #304



Registering new PHI nodes in block #305



Registering new PHI nodes in block #306

Updating SSA information for statement switch_rtp_activate_ice (D.43096_879, D.43697_880, D.43698_881, D.43699_882, D.43700_883, 1, iftmp.65_38, D.43706_887);



Registering new PHI nodes in block #307



Registering new PHI nodes in block #308

Updating SSA information for statement D.48123_1351 = MEM[(const char *)D.43743_888];



Registering new PHI nodes in block #309



Registering new PHI nodes in block #310

Updating SSA information for statement D.48122 = D.48124_1352;

Updating SSA information for statement D.43744_889 = D.48122;



Registering new PHI nodes in block #311

Updating SSA information for statement D.43747_890 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #312

Updating SSA information for statement D.43429_891 = smh_46->session;

Updating SSA information for statement D.43750_892 = dtls_ok (D.43429_891);



Registering new PHI nodes in block #313

Updating SSA information for statement D.43429_893 = smh_46->session;

Updating SSA information for statement D.43434_894 = D.43429_893->channel;

Updating SSA information for statement D.43754_895 = switch_channel_direction (D.43434_894);



Registering new PHI nodes in block #314



Registering new PHI nodes in block #315



Registering new PHI nodes in block #316

Updating SSA information for statement D.43717_900 = v_engine_49->rtcp_mux;



Registering new PHI nodes in block #317

Updating SSA information for statement D.43099_901 = smh_46->mparams;

Updating SSA information for statement D.43760_902 = D.43099_901->rtcp_video_interval_msec;



Registering new PHI nodes in block #318



Registering new PHI nodes in block #319

Updating SSA information for statement D.43096_904 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_add_dtls (D.43096_904, D.43763_905, D.43764_906, D.43765_907);

Updating SSA information for statement D.43717_908 = v_engine_49->rtcp_mux;



Registering new PHI nodes in block #320

Updating SSA information for statement D.43099_909 = smh_46->mparams;

Updating SSA information for statement D.43760_910 = D.43099_909->rtcp_video_interval_msec;



Registering new PHI nodes in block #321

Updating SSA information for statement D.43096_912 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_add_dtls (D.43096_912, D.43763_913, D.43764_914, D.43765_915);



Registering new PHI nodes in block #322

Updating SSA information for statement D.43073_916 = session_45(D)->channel;

Updating SSA information for statement val_917 = switch_channel_get_variable_dup (D.43073_916, "rtp_manual_video_rtp_bugs", 1, -1);



Registering new PHI nodes in block #323

Updating SSA information for statement switch_core_media_parse_rtp_bugs (D.43772_918, val_917);



Registering new PHI nodes in block #324

Updating SSA information for statement D.43096_919 = v_engine_49->rtp_session;

Updating SSA information for statement D.43773_920 = v_engine_49->rtp_bugs;

Updating SSA information for statement D.43099_921 = smh_46->mparams;

Updating SSA information for statement D.43774_922 = D.43099_921->manual_video_rtp_bugs;

Updating SSA information for statement switch_rtp_intentional_bugs (D.43096_919, D.43775_923);

Updating SSA information for statement D.43073_924 = session_45(D)->channel;

Updating SSA information for statement D.43561_925 = v_engine_49->cur_payload_map;

Updating SSA information for statement D.43594_926 = D.43561_925->agreed_pt;

Updating SSA information for statement switch_channel_set_variable_printf (D.43073_924, "rtp_use_video_pt", "%d", D.43595_927);

Updating SSA information for statement D.43096_928 = v_engine_49->rtp_session;

Updating SSA information for statement D.43776_929 = switch_rtp_get_ssrc (D.43096_928);

Updating SSA information for statement v_engine_49->ssrc = D.43776_929;

Updating SSA information for statement D.43073_930 = session_45(D)->channel;

Updating SSA information for statement D.43689_931 = v_engine_49->ssrc;

Updating SSA information for statement switch_channel_set_variable_printf (D.43073_930, "rtp_use_video_ssrc", "%u", D.43689_931);

Updating SSA information for statement switch_core_session_apply_crypto (session_45(D), 1);

Updating SSA information for statement D.43073_932 = session_45(D)->channel;

Updating SSA information for statement D.43777_933 = switch_channel_test_flag (D.43073_932, 74);



Registering new PHI nodes in block #325

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5542, session_45(D), 7, "Activating video UDPTL mode\n");

Updating SSA information for statement D.43096_934 = v_engine_49->rtp_session;

Updating SSA information for statement switch_rtp_udptl_mode (D.43096_934);



Registering new PHI nodes in block #326

Updating SSA information for statement err.45_935 = err;



Registering new PHI nodes in block #327

Updating SSA information for statement iftmp.67_936 = err;



Registering new PHI nodes in block #328



Registering new PHI nodes in block #329

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 5547, session_45(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", iftmp.67_40);

Updating SSA information for statement D.43073_938 = session_45(D)->channel;

Updating SSA information for statement switch_channel_perform_hangup (D.43073_938, "src/switch_core_media.c", &__func__, 5548, 27);



Registering new PHI nodes in block #334



Registering new PHI nodes in block #335

Updating SSA information for statement check_dtls_reinvite (session_45(D), v_engine_49);



Registering new PHI nodes in block #336



Registering new PHI nodes in block #337

Updating SSA information for statement D.43073_943 = session_45(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.43073_943, 103);

Updating SSA information for statement switch_core_recovery_track (session_45(D));



Registering new PHI nodes in block #8



Registering new PHI nodes in block #338



Symbols to be put in SSA form

{ .MEM D.48082 D.48085 D.48088 D.48091 D.48095 D.48098 D.48101 D.48104 D.48107 D.48110 D.48113 D.48116 D.48119 D.48122 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 339
Number of blocks to update: 338 (100%)

Affected blocks


Scope blocks after cleanups:

{ Scope block #0 
  const char * err;
  const char * val;
  switch_rtp_flag_t flags[39];
  switch_status_t status;
  char tmp[50];
  char * timer_name;
  const char * var;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_activate_rtp";
  void end = <<< error >>>; (unused)
  void video = <<< error >>>; (unused)
  static const char __func__[31] = "switch_core_media_activate_rtp";
  void video_up = <<< error >>>; (unused)

  { Scope block #329 
    char * remote_host;
    switch_port_t remote_port;

    { Scope block #330 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

  }

  { Scope block #331 
    const char * rport;
    switch_port_t remote_rtcp_port;

    { Scope block #332 src/switch_core_media.c:4862 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #333 Originating from :#0 

      }

    }

    { Scope block #334 
      size_t __s1_len; (unused)
      size_t __s2_len;

      { Scope block #335 
        const unsigned char * __s1;
        register int __result;

      }

    }

  }

  { Scope block #336 
    uint8_t vad_in;
    uint8_t vad_out;
    uint8_t inb;
    const char * ssrc;

    { Scope block #337 src/switch_core_media.c:5085 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #338 Originating from :#0 

      }

    }

    { Scope block #339 
      uint32_t ssrc_ul;

    }

    { Scope block #340 
      const char * rport;
      switch_port_t remote_rtcp_port;

      { Scope block #341 src/switch_core_media.c:5039 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #342 Originating from :#0 

        }

      }

      { Scope block #343 
        int interval;

        { Scope block #344 src/switch_core_media.c:5046 Originating from :  extern int atoi (const char *); 
          const char * __nptr; (unused)

          { Scope block #345 Originating from :#0 

          }

        }

      }

      { Scope block #346 
        size_t __s1_len; (unused)
        size_t __s2_len; (unused)

      }

    }

    { Scope block #347 
      dtls_type_t xtype;
      dtls_type_t dtype;

    }

    { Scope block #348 
      int jb_msec;
      int maxlen;
      int max_drift;
      char * p;
      char * q;

      { Scope block #349 src/switch_core_media.c:5116 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #350 Originating from :#0 

        }

      }

      { Scope block #351 src/switch_core_media.c:5113 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #352 Originating from :#0 

        }

      }

      { Scope block #353 src/switch_core_media.c:5107 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #354 Originating from :#0 

        }

      }

      { Scope block #355 
        int qlen;
        int maxqlen;

      }

    }

    { Scope block #356 
      int v;

      { Scope block #357 src/switch_core_media.c:5161 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #358 Originating from :#0 

        }

      }

    }

    { Scope block #359 
      int v;

      { Scope block #360 src/switch_core_media.c:5168 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #361 Originating from :#0 

        }

      }

    }

    { Scope block #362 
      int delayi;

      { Scope block #363 src/switch_core_media.c:5208 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #364 Originating from :#0 

        }

      }

    }

    { Scope block #365 
      char * remote_host;
      switch_port_t remote_port;

      { Scope block #366 
        size_t __s1_len; (unused)
        size_t __s2_len; (unused)

      }

    }

    { Scope block #367 
      const char * rport;
      switch_port_t remote_rtcp_port;

      { Scope block #368 src/switch_core_media.c:5299 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #369 Originating from :#0 

        }

      }

    }

    { Scope block #370 
      const char * ssrc;

      { Scope block #371 src/switch_core_media.c:5509 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #372 Originating from :#0 

        }

      }

      { Scope block #373 
        uint32_t ssrc_ul;

      }

      { Scope block #374 
        const char * rport;
        switch_port_t remote_port;

        { Scope block #375 src/switch_core_media.c:5459 Originating from :  extern int atoi (const char *); 
          const char * __nptr; (unused)

          { Scope block #376 Originating from :#0 

          }

        }

        { Scope block #377 
          int interval;

          { Scope block #378 src/switch_core_media.c:5465 Originating from :  extern int atoi (const char *); 
            const char * __nptr; (unused)

            { Scope block #379 Originating from :#0 

            }

          }

        }

        { Scope block #380 
          size_t __s1_len; (unused)
          size_t __s2_len; (unused)

        }

      }

      { Scope block #381 
        dtls_type_t xtype;
        dtls_type_t dtype;

      }

    }

  }

}
switch_core_media_activate_rtp (struct switch_core_session_t * session)
{
  int D.48124;
  const char D.48123;
  int D.48122;
  int D.48120;
  int D.48119;
  int D.48117;
  int D.48116;
  int D.48114;
  int D.48113;
  int D.48111;
  int D.48110;
  int D.48108;
  int D.48107;
  int D.48105;
  int D.48104;
  int D.48102;
  int D.48101;
  int D.48099;
  int D.48098;
  int D.48096;
  int D.48095;
  int D.48093;
  const char D.48092;
  int D.48091;
  int D.48089;
  int D.48088;
  int D.48086;
  int D.48085;
  int D.48083;
  int D.48082;
  dtls_type_t dtype;
  dtls_type_t xtype;
  int interval;
  switch_port_t remote_port;
  const char * rport;
  uint32_t ssrc_ul;
  const char * ssrc;
  switch_port_t remote_rtcp_port;
  const char * rport;
  switch_port_t remote_port;
  char * remote_host;
  int delayi;
  int v;
  int v;
  int maxqlen;
  int qlen;
  char * q;
  char * p;
  int max_drift;
  int maxlen;
  int jb_msec;
  dtls_type_t dtype;
  dtls_type_t xtype;
  int interval;
  switch_port_t remote_rtcp_port;
  const char * rport;
  uint32_t ssrc_ul;
  const char * ssrc;
  uint8_t inb;
  uint8_t vad_out;
  uint8_t vad_in;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  switch_port_t remote_rtcp_port;
  const char * rport;
  switch_port_t remote_port;
  char * remote_host;
  static const char __func__[31] = "switch_core_media_activate_rtp";
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_activate_rtp";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  const char * var;
  char * timer_name;
  char tmp[50];
  switch_status_t status;
  switch_rtp_flag_t flags[39];
  const char * val;
  const char * err;
  _Bool D.43791;
  _Bool D.43790;
  const char * iftmp.68;
  const char * iftmp.67;
  uint32_t D.43777;
  uint32_t D.43776;
  unsigned int D.43775;
  switch_rtp_bug_flag_t D.43774;
  switch_rtp_bug_flag_t D.43773;
  switch_rtp_bug_flag_t * D.43772;
  unsigned int D.43765;
  struct dtls_fingerprint_t * D.43764;
  struct dtls_fingerprint_t * D.43763;
  char * D.43760;
  switch_call_direction_t D.43754;
  dtls_type_t iftmp.66;
  int D.43750;
  int D.43747;
  int D.43744;
  char[192] * D.43743;
  switch_call_direction_t D.43739;
  switch_core_media_ice_type_t iftmp.65;
  switch_port_t D.43736;
  switch_port_t D.43735;
  char * D.43733;
  char * D.43732;
  int D.39417;
  uint8_t D.43726;
  int D.43725;
  int D.43724;
  unsigned int D.43721;
  unsigned int interval.64;
  switch_bool_t D.43718;
  int8_t D.43717;
  int D.43716;
  int D.43713;
  int D.43712;
  struct ice_t * D.43706;
  switch_call_direction_t D.43702;
  switch_core_media_ice_type_t iftmp.63;
  char * D.43700;
  char * D.43699;
  char * D.43698;
  char * D.43697;
  uint8_t D.43694;
  int D.43693;
  uint32_t D.43690;
  uint32_t D.43689;
  struct payload_map_t * * D.43685;
  uint8_t D.43682;
  uint8_t D.43679;
  uint8_t D.43676;
  uint8_t D.43672;
  const char * iftmp.62;
  char * D.43670;
  uint32_t D.43666;
  char * iftmp.61;
  struct switch_rtp_t * D.43664;
  struct switch_memory_pool_t * D.43663;
  switch_rtp_flag_t D.43662;
  switch_rtp_flag_t D.43661;
  uint32_t D.43658;
  uint32_t D.43655;
  int D.43654;
  uint32_t D.43650;
  int32_t D.43647;
  uint8_t D.43636;
  int D.43635;
  int D.43634;
  char * D.43633;
  int D.43632;
  uint32_t D.43628;
  int32_t D.43625;
  uint32_t D.43620;
  int D.43619;
  uint32_t D.43615;
  int32_t D.43612;
  switch_status_t D.43606;
  int D.43605;
  uint32_t D.43598;
  int D.43595;
  switch_payload_t D.43594;
  int D.43593;
  switch_port_t D.43592;
  char * D.43591;
  uint8_t D.43588;
  uint32_t D.43585;
  int D.43584;
  int D.43583;
  char * D.43582;
  char * D.43581;
  char * D.43578;
  int D.39400;
  _Bool D.43576;
  _Bool D.43575;
  _Bool D.43574;
  uint32_t D.43570;
  switch_port_t D.43565;
  char * D.43562;
  struct payload_map_t * D.43561;
  uint32_t D.43558;
  switch_call_direction_t D.43555;
  uint32_t D.43552;
  int D.43551;
  int32_t D.43548;
  char * D.43545;
  uint32_t D.43542;
  unsigned int delayi.60;
  int D.43536;
  int D.43534;
  int32_t D.43531;
  int D.43527;
  switch_payload_t D.43524;
  int D.43523;
  switch_payload_t D.43520;
  uint32_t D.43519;
  uint32_t D.43518;
  uint32_t D.43515;
  uint32_t D.43512;
  uint32_t D.43511;
  uint32_t D.43510;
  uint32_t D.43509;
  uint32_t D.43506;
  uint32_t v.59;
  uint32_t v.58;
  int D.43492;
  const char * D.43491;
  switch_status_t D.43488;
  uint32_t max_drift.57;
  uint32_t D.43486;
  uint32_t maxqlen.56;
  uint32_t qlen.55;
  unsigned int D.43474;
  int D.43473;
  int D.43472;
  const int D.43471;
  const struct switch_codec_implementation_t * D.43470;
  unsigned int D.43467;
  unsigned int jb_msec.54;
  int D.43465;
  unsigned int D.43453;
  struct dtls_fingerprint_t * D.43452;
  struct dtls_fingerprint_t * D.43451;
  char * D.43448;
  dtls_type_t iftmp.53;
  uint32_t D.43439;
  switch_call_direction_t D.43435;
  struct switch_channel_t * D.43434;
  dtls_type_t iftmp.52;
  int D.43430;
  struct switch_core_session_t * D.43429;
  int D.43426;
  int D.43423;
  char[192] * D.43422;
  switch_call_direction_t D.43418;
  switch_core_media_ice_type_t iftmp.51;
  switch_port_t D.43415;
  switch_port_t D.43414;
  char * D.43412;
  char * D.43411;
  int D.39377;
  uint8_t D.43405;
  int D.43404;
  unsigned int D.43401;
  unsigned int interval.50;
  switch_bool_t D.43398;
  int8_t D.43397;
  int D.43396;
  int D.43393;
  int D.43392;
  _Bool D.43389;
  _Bool D.43388;
  _Bool D.43387;
  struct ice_t * D.43383;
  switch_call_direction_t D.43379;
  switch_core_media_ice_type_t iftmp.49;
  char * D.43377;
  char * D.43376;
  char * D.43375;
  char * D.43374;
  uint8_t D.43371;
  int D.43370;
  char * iftmp.48;
  char * iftmp.47;
  char * D.43361;
  struct switch_channel_t * D.43360;
  struct switch_codec_t * D.43359;
  _Bool D.43358;
  _Bool D.43357;
  _Bool D.43356;
  _Bool D.43354;
  _Bool D.43353;
  _Bool D.43352;
  unsigned int D.43349;
  switch_rtp_bug_flag_t D.43348;
  switch_rtp_bug_flag_t * D.43347;
  unsigned int D.43344;
  switch_rtp_bug_flag_t D.43343;
  unsigned int D.43340;
  switch_rtp_bug_flag_t D.43339;
  uint32_t D.43338;
  int D.43335;
  int D.43330;
  int D.43325;
  int D.43320;
  uint32_t D.43315;
  uint32_t D.43314;
  struct switch_memory_pool_t * D.43310;
  struct switch_mutex_t *[2] * D.43309;
  switch_call_direction_t D.43308;
  uint8_t D.43307;
  switch_core_media_vflag_t D.43306;
  uint8_t D.43303;
  struct payload_map_t * * D.43302;
  uint8_t D.43299;
  struct switch_rtp_t * D.43298;
  struct switch_memory_pool_t * D.43297;
  uint32_t D.43296;
  uint32_t D.43295;
  uint32_t D.43294;
  switch_channel_state_t D.43293;
  int D.43291;
  uint8_t D.43283;
  char * D.43282;
  int D.43281;
  uint32_t D.43277;
  int32_t D.43274;
  switch_rtp_flag_t D.43271;
  switch_rtp_flag_t D.43270;
  uint32_t D.43267;
  _Bool D.43264;
  _Bool D.43263;
  _Bool D.43262;
  uint32_t D.43259;
  int D.43258;
  int32_t D.43254;
  int D.43248;
  const unsigned char D.43247;
  char * D.43246;
  int D.43245;
  const unsigned char D.43244;
  const unsigned char * D.43243;
  _Bool D.43240;
  _Bool D.43239;
  int D.43238;
  const unsigned char D.43237;
  char * D.43236;
  int D.43235;
  const unsigned char D.43234;
  const unsigned char * D.43233;
  _Bool D.43230;
  _Bool D.43229;
  int D.43228;
  const unsigned char D.43227;
  char * D.43226;
  int D.43225;
  const unsigned char D.43224;
  const unsigned char * D.43223;
  _Bool D.43220;
  _Bool D.43219;
  _Bool D.43218;
  int D.43217;
  const unsigned char D.43216;
  char[8] * D.43215;
  int D.43214;
  const unsigned char D.43213;
  int D.39359;
  int iftmp.46;
  int D.39360;
  uint32_t D.43207;
  const char * err.45;
  switch_status_t D.43202;
  int D.43201;
  uint32_t D.43194;
  char * D.43191;
  int D.43190;
  int D.43189;
  int D.43188;
  switch_payload_t D.43187;
  int D.43186;
  switch_port_t D.43185;
  char * D.43184;
  char * D.43183;
  uint32_t D.43180;
  int D.43179;
  int D.43178;
  char * D.43177;
  char * D.43176;
  switch_port_t D.43174;
  char * D.43172;
  struct payload_map_t * D.43171;
  int D.39348;
  _Bool D.43169;
  _Bool D.43168;
  _Bool D.43167;
  uint32_t D.43163;
  int D.43158;
  switch_rtp_flag_t D.43153;
  switch_rtp_flag_t D.43152;
  int D.43149;
  char * D.43148;
  switch_rtp_flag_t D.43147;
  switch_rtp_flag_t D.43146;
  switch_payload_t D.43143;
  int32_t D.43139;
  switch_rtp_flag_t D.43138;
  switch_rtp_flag_t D.43137;
  int D.43136;
  int32_t D.43132;
  switch_rtp_flag_t D.43129;
  switch_rtp_flag_t D.43128;
  int D.43127;
  int32_t D.43124;
  int D.43121;
  int32_t D.43118;
  switch_rtp_flag_t D.43115;
  switch_rtp_flag_t D.43114;
  int D.43113;
  uint32_t D.43109;
  int32_t D.43106;
  switch_rtp_flag_t D.43103;
  switch_rtp_flag_t D.43102;
  uint32_t D.43100;
  struct switch_core_media_params_t * D.43099;
  uint8_t D.43097;
  struct switch_rtp_t * D.43096;
  uint32_t D.43093;
  uint8_t D.43090;
  uint32_t D.43087;
  uint32_t D.43084;
  switch_rtp_crypto_key_type_t D.43081;
  uint8_t D.43078;
  struct switch_rtp_t * D.43077;
  switch_channel_state_t D.43076;
  int D.43074;
  struct switch_channel_t * D.43073;
  switch_status_t D.43070;

<bb 2>:
  err = 0B;
  val_42 = 0B;
  # DEBUG val => val_42
  flags = {};
  status_43 = 0;
  # DEBUG status => status_43
  timer_name_44 = 0B;
  # DEBUG timer_name => timer_name_44
  if (session_45(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 4731, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_46 = session_45(D)->media_handle;
  # DEBUG smh => smh_46
  if (smh_46 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.43070_47 = 1;
  goto <bb 338>;

<bb 6>:
  a_engine_48 = &smh_46->engines;
  # DEBUG a_engine => a_engine_48
  v_engine_49 = &smh_46->engines[1];
  # DEBUG v_engine => v_engine_49
  D.43073_50 = session_45(D)->channel;
  D.43074_51 = switch_channel_check_signal (D.43073_50, 1);
  if (D.43074_51 != 0)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:
  D.43073_52 = session_45(D)->channel;
  D.43076_53 = switch_channel_get_state (D.43073_52);
  if (D.43076_53 > 9)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.43070_945 = 1;
  goto <bb 338>;

<bb 9>:
  D.43077_54 = a_engine_48->rtp_session;
  D.43078_55 = switch_rtp_ready (D.43077_54);
  if (D.43078_55 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.43077_56 = a_engine_48->rtp_session;
  switch_rtp_reset_media_timer (D.43077_56);

<bb 11>:
  D.43081_57 = a_engine_48->crypto_type;
  if (D.43081_57 != 9)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  D.43073_58 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_58, 92, 1);

<bb 13>:
  D.43073_59 = session_45(D)->channel;
  D.43084_60 = switch_channel_test_flag (D.43073_59, 15);
  if (D.43084_60 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  status_61 = 0;
  # DEBUG status => status_61
  goto <bb 337> (end);

<bb 15>:
  D.43073_62 = session_45(D)->channel;
  D.43087_63 = switch_channel_test_flag (D.43073_62, 103);
  if (D.43087_63 == 0)
    goto <bb 16>;
  else
    goto <bb 20>;

<bb 16>:
  D.43077_64 = a_engine_48->rtp_session;
  D.43090_65 = switch_rtp_ready (D.43077_64);
  if (D.43090_65 != 0)
    goto <bb 17>;
  else
    goto <bb 20>;

<bb 17>:
  D.43073_66 = session_45(D)->channel;
  D.43093_67 = switch_channel_test_flag (D.43073_66, 98);
  if (D.43093_67 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.43096_68 = v_engine_49->rtp_session;
  D.43097_69 = switch_rtp_ready (D.43096_68);
  if (D.43097_69 == 0)
    goto <bb 220> (video);
  else
    goto <bb 19>;

<bb 19>:
  status_70 = 0;
  # DEBUG status => status_70
  goto <bb 337> (end);

<bb 20>:
  D.43099_71 = smh_46->mparams;
  D.43100_72 = D.43099_71->codec_flags;
  status_73 = switch_core_media_set_codec (session_45(D), 0, D.43100_72);
  # DEBUG status => status_73
  if (status_73 != 0)
    goto <bb 337> (end);
  else
    goto <bb 21>;

<bb 21>:
  switch_core_media_set_video_codec (session_45(D), 0);
  memset (&flags, 0, 156);
  D.43102_74 = flags[13];
  D.43103_75 = D.43102_74 + 1;
  flags[13] = D.43103_75;
  D.43106_76 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43106_76 == 0)
    goto <bb 22>;
  else
    goto <bb 26>;

<bb 22>:
  D.43073_77 = session_45(D)->channel;
  D.43109_78 = switch_channel_test_flag (D.43073_77, 106);
  if (D.43109_78 == 0)
    goto <bb 23>;
  else
    goto <bb 26>;

<bb 23>:
  D.43073_79 = session_45(D)->channel;
  val_80 = switch_channel_get_variable_dup (D.43073_79, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_80
  if (val_80 == 0B)
    goto <bb 25>;
  else
    goto <bb 24>;

<bb 24>:
  D.43113_81 = switch_true (val_80);
  if (D.43113_81 == 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.43114_82 = flags[7];
  D.43115_83 = D.43114_82 + 1;
  flags[7] = D.43115_83;

<bb 26>:
  D.43118_84 = switch_media_handle_test_media_flag (smh_46, 11);
  if (D.43118_84 != 0)
    goto <bb 29>;
  else
    goto <bb 27>;

<bb 27>:
  D.43073_85 = session_45(D)->channel;
  val_86 = switch_channel_get_variable_dup (D.43073_85, "pass_rfc2833", 1, -1);
  # DEBUG val => val_86
  if (val_86 != 0B)
    goto <bb 28>;
  else
    goto <bb 30>;

<bb 28>:
  D.43121_87 = switch_true (val_86);
  if (D.43121_87 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  D.43073_88 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_88, 100, 1);

<bb 30>:
  D.43124_89 = switch_media_handle_test_media_flag (smh_46, 12);
  if (D.43124_89 != 0)
    goto <bb 33>;
  else
    goto <bb 31>;

<bb 31>:
  D.43073_90 = session_45(D)->channel;
  val_91 = switch_channel_get_variable_dup (D.43073_90, "rtp_autoflush", 1, -1);
  # DEBUG val => val_91
  if (val_91 != 0B)
    goto <bb 32>;
  else
    goto <bb 34>;

<bb 32>:
  D.43127_92 = switch_true (val_91);
  if (D.43127_92 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

<bb 33>:
  D.43128_93 = flags[22];
  D.43129_94 = D.43128_93 + 1;
  flags[22] = D.43129_94;

<bb 34>:
  D.43132_95 = switch_media_handle_test_media_flag (smh_46, 13);
  if (D.43132_95 == 0)
    goto <bb 35>;
  else
    goto <bb 38>;

<bb 35>:
  D.43073_96 = session_45(D)->channel;
  val_97 = switch_channel_get_variable_dup (D.43073_96, "rtp_rewrite_timestamps", 1, -1);
  # DEBUG val => val_97
  if (val_97 == 0B)
    goto <bb 37>;
  else
    goto <bb 36>;

<bb 36>:
  D.43136_98 = switch_true (val_97);
  if (D.43136_98 == 0)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  D.43137_99 = flags[8];
  D.43138_100 = D.43137_99 + 1;
  flags[8] = D.43138_100;

<bb 38>:
  D.43139_101 = switch_media_handle_test_media_flag (smh_46, 9);
  if (D.43139_101 != 0)
    goto <bb 39>;
  else
    goto <bb 40>;

<bb 39>:
  D.43099_102 = smh_46->mparams;
  D.43099_102->cng_pt = 0;
  goto <bb 42>;

<bb 40>:
  D.43099_103 = smh_46->mparams;
  D.43143_104 = D.43099_103->cng_pt;
  if (D.43143_104 != 0)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.43146_105 = flags[16];
  D.43147_106 = D.43146_105 + 1;
  flags[16] = D.43147_106;

<bb 42>:
  D.43148_107 = a_engine_48->read_impl.iananame;
  D.43149_108 = strcasecmp (D.43148_107, "L16");
  if (D.43149_108 == 0)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  D.43152_109 = flags[14];
  D.43153_110 = D.43152_109 + 1;
  flags[14] = D.43153_110;

<bb 44>:
  D.43152_111 = flags[14];
  if (D.43152_111 != 0)
    goto <bb 45>;
  else
    goto <bb 48>;

<bb 45>:
  D.43073_112 = session_45(D)->channel;
  val_113 = switch_channel_get_variable_dup (D.43073_112, "rtp_disable_byteswap", 1, -1);
  # DEBUG val => val_113
  if (val_113 != 0B)
    goto <bb 46>;
  else
    goto <bb 48>;

<bb 46>:
  D.43158_114 = switch_true (val_113);
  if (D.43158_114 != 0)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  flags[14] = 0;

<bb 48>:
  D.43077_115 = a_engine_48->rtp_session;
  if (D.43077_115 != 0B)
    goto <bb 49>;
  else
    goto <bb 55>;

<bb 49>:
  D.43073_116 = session_45(D)->channel;
  D.43163_117 = switch_channel_test_flag (D.43073_116, 103);
  if (D.43163_117 != 0)
    goto <bb 50>;
  else
    goto <bb 55>;

<bb 50>:
  D.43077_118 = a_engine_48->rtp_session;
  remote_host_119 = switch_rtp_get_remote_host (D.43077_118);
  # DEBUG remote_host => remote_host_119
  D.43077_120 = a_engine_48->rtp_session;
  remote_port_121 = switch_rtp_get_remote_port (D.43077_120);
  # DEBUG remote_port => remote_port_121
  D.43167_122 = remote_host_119 != 0B;
  D.43168_123 = remote_port_121 != 0;
  D.43169_124 = D.43167_122 && D.43168_123;
  if (D.43169_124 != 0)
    goto <bb 51>;
  else
    goto <bb 54>;

<bb 51>:
  D.43171_125 = a_engine_48->cur_payload_map;
  D.43172_126 = D.43171_125->remote_sdp_ip;
  D.39348_127 = __builtin_strcmp (remote_host_119, D.43172_126);
  if (D.39348_127 == 0)
    goto <bb 52>;
  else
    goto <bb 54>;

<bb 52>:
  D.43171_128 = a_engine_48->cur_payload_map;
  D.43174_129 = D.43171_128->remote_sdp_port;
  if (D.43174_129 == remote_port_121)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  D.43073_130 = session_45(D)->channel;
  D.43176_131 = switch_channel_get_name (D.43073_130);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4825, session_45(D), 7, "Audio params are unchanged for %s.\n", D.43176_131);
  goto <bb 220> (video);

<bb 54>:
  D.43073_132 = session_45(D)->channel;
  D.43177_133 = switch_channel_get_name (D.43073_132);
  D.43178_134 = (int) remote_port_121;
  D.43171_135 = a_engine_48->cur_payload_map;
  D.43172_136 = D.43171_135->remote_sdp_ip;
  D.43171_137 = a_engine_48->cur_payload_map;
  D.43174_138 = D.43171_137->remote_sdp_port;
  D.43179_139 = (int) D.43174_138;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4830, session_45(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.43177_133, remote_host_119, D.43178_134, D.43172_136, D.43179_139);
  D.43171_140 = a_engine_48->cur_payload_map;
  D.43174_141 = D.43171_140->remote_sdp_port;
  D.43179_142 = (int) D.43174_141;
  switch_snprintf (&tmp, 50, "%d", D.43179_142);
  D.43073_143 = session_45(D)->channel;
  D.43171_144 = a_engine_48->cur_payload_map;
  D.43172_145 = D.43171_144->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_143, "remote_media_ip", D.43172_145, 1);
  D.43073_146 = session_45(D)->channel;
  switch_channel_set_variable_var_check (D.43073_146, "remote_media_port", &tmp, 1);

<bb 55>:
  D.43073_147 = session_45(D)->channel;
  D.43180_148 = switch_channel_test_flag (D.43073_147, 29);
  if (D.43180_148 == 0)
    goto <bb 56>;
  else
    goto <bb 57>;

<bb 56>:
  D.43073_149 = session_45(D)->channel;
  D.43183_150 = switch_channel_get_name (D.43073_149);
  D.43184_151 = a_engine_48->local_sdp_ip;
  D.43185_152 = a_engine_48->local_sdp_port;
  D.43186_153 = (int) D.43185_152;
  D.43171_154 = a_engine_48->cur_payload_map;
  D.43172_155 = D.43171_154->remote_sdp_ip;
  D.43171_156 = a_engine_48->cur_payload_map;
  D.43174_157 = D.43171_156->remote_sdp_port;
  D.43179_158 = (int) D.43174_157;
  D.43171_159 = a_engine_48->cur_payload_map;
  D.43187_160 = D.43171_159->agreed_pt;
  D.43188_161 = (int) D.43187_160;
  D.43189_162 = a_engine_48->read_impl.microseconds_per_packet;
  D.43190_163 = D.43189_162 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4841, session_45(D), 7, "AUDIO RTP [%s] %s port %d -> %s port %d codec: %u ms: %d\n", D.43183_150, D.43184_151, D.43186_153, D.43172_155, D.43179_158, D.43188_161, D.43190_163);

<bb 57>:
  D.43185_164 = a_engine_48->local_sdp_port;
  D.43186_165 = (int) D.43185_164;
  switch_snprintf (&tmp, 50, "%d", D.43186_165);
  D.43073_166 = session_45(D)->channel;
  D.43184_167 = a_engine_48->local_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_166, "local_media_ip", D.43184_167, 1);
  D.43073_168 = session_45(D)->channel;
  switch_channel_set_variable_var_check (D.43073_168, "local_media_port", &tmp, 1);
  D.43073_169 = session_45(D)->channel;
  D.43191_170 = a_engine_48->adv_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_169, "advertised_media_ip", D.43191_170, 1);
  D.43077_171 = a_engine_48->rtp_session;
  if (D.43077_171 != 0B)
    goto <bb 58>;
  else
    goto <bb 81>;

<bb 58>:
  D.43073_172 = session_45(D)->channel;
  D.43194_173 = switch_channel_test_flag (D.43073_172, 103);
  if (D.43194_173 != 0)
    goto <bb 59>;
  else
    goto <bb 81>;

<bb 59>:
  rport_174 = 0B;
  # DEBUG rport => rport_174
  remote_rtcp_port_175 = a_engine_48->remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_175
  if (remote_rtcp_port_175 == 0)
    goto <bb 60>;
  else
    goto <bb 62>;

<bb 60>:
  D.43073_176 = session_45(D)->channel;
  rport_177 = switch_channel_get_variable_dup (D.43073_176, "rtp_remote_audio_rtcp_port", 1, -1);
  # DEBUG rport => rport_177
  if (rport_177 != 0B)
    goto <bb 61>;
  else
    goto <bb 62>;

<bb 61>:
  # DEBUG __nptr => rport_177
  D.48083_1337 = strtol (rport_177, 0B, 10);
  D.48082_1357 = D.48083_1337;
  D.43201_178 = D.48082_1357;
  remote_rtcp_port_179 = (switch_port_t) D.43201_178;
  # DEBUG remote_rtcp_port => remote_rtcp_port_179

<bb 62>:
  # remote_rtcp_port_7 = PHI <remote_rtcp_port_175(59), remote_rtcp_port_175(60), remote_rtcp_port_179(61)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_7
  D.43077_180 = a_engine_48->rtp_session;
  D.43171_181 = a_engine_48->cur_payload_map;
  D.43172_182 = D.43171_181->remote_sdp_ip;
  D.43171_183 = a_engine_48->cur_payload_map;
  D.43174_184 = D.43171_183->remote_sdp_port;
  D.43202_185 = switch_rtp_set_remote_address (D.43077_180, D.43172_182, D.43174_184, remote_rtcp_port_7, 1, &err);
  if (D.43202_185 != 0)
    goto <bb 63>;
  else
    goto <bb 64>;

<bb 63>:
  err.45_186 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4868, session_45(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.45_186);
  goto <bb 79>;

<bb 64>:
  D.43171_187 = a_engine_48->cur_payload_map;
  D.43172_188 = D.43171_187->remote_sdp_ip;
  D.43171_189 = a_engine_48->cur_payload_map;
  D.43174_190 = D.43171_189->remote_sdp_port;
  D.43179_191 = (int) D.43174_190;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4870, session_45(D), 7, "AUDIO RTP CHANGING DEST TO: [%s:%d]\n", D.43172_188, D.43179_191);
  D.43073_192 = session_45(D)->channel;
  D.43207_193 = switch_channel_test_flag (D.43073_192, 96);
  if (D.43207_193 != 0)
    goto <bb 65>;
  else
    goto <bb 74>;

<bb 65>:
  __s2_len_194 = 7;
  # DEBUG __s2_len => __s2_len_194
  if (__s2_len_194 <= 3)
    goto <bb 66>;
  else
    goto <bb 71>;

<bb 66>:
  D.43171_195 = a_engine_48->cur_payload_map;
  __s1_196 = D.43171_195->remote_sdp_ip;
  # DEBUG __s1 => __s1_196
  D.43213_197 = *__s1_196;
  D.43214_198 = (int) D.43213_197;
  D.43215_199 = "0.0.0.0";
  D.43216_200 = MEM[(const unsigned char *)D.43215_199];
  D.43217_201 = (int) D.43216_200;
  __result_202 = D.43214_198 - D.43217_201;
  # DEBUG __result => __result_202
  D.43218_203 = __s2_len_194 != 0;
  D.43219_204 = __result_202 == 0;
  D.43220_205 = D.43218_203 && D.43219_204;
  if (D.43220_205 != 0)
    goto <bb 67>;
  else
    goto <bb 70>;

<bb 67>:
  D.43223_206 = __s1_196 + 1;
  D.43224_207 = *D.43223_206;
  D.43225_208 = (int) D.43224_207;
  D.43226_209 = &"0.0.0.0"[1];
  D.43227_210 = MEM[(const unsigned char *)D.43226_209];
  D.43228_211 = (int) D.43227_210;
  __result_212 = D.43225_208 - D.43228_211;
  # DEBUG __result => __result_212
  D.43229_213 = __s2_len_194 > 1;
  D.43219_214 = __result_212 == 0;
  D.43230_215 = D.43229_213 && D.43219_214;
  if (D.43230_215 != 0)
    goto <bb 68>;
  else
    goto <bb 70>;

<bb 68>:
  D.43233_216 = __s1_196 + 2;
  D.43234_217 = *D.43233_216;
  D.43235_218 = (int) D.43234_217;
  D.43236_219 = &"0.0.0.0"[2];
  D.43237_220 = MEM[(const unsigned char *)D.43236_219];
  D.43238_221 = (int) D.43237_220;
  __result_222 = D.43235_218 - D.43238_221;
  # DEBUG __result => __result_222
  D.43239_223 = __s2_len_194 > 2;
  D.43219_224 = __result_222 == 0;
  D.43240_225 = D.43239_223 && D.43219_224;
  if (D.43240_225 != 0)
    goto <bb 69>;
  else
    goto <bb 70>;

<bb 69>:
  D.43243_226 = __s1_196 + 3;
  D.43244_227 = *D.43243_226;
  D.43245_228 = (int) D.43244_227;
  D.43246_229 = &"0.0.0.0"[3];
  D.43247_230 = MEM[(const unsigned char *)D.43246_229];
  D.43248_231 = (int) D.43247_230;
  __result_232 = D.43245_228 - D.43248_231;
  # DEBUG __result => __result_232

<bb 70>:
  # __result_8 = PHI <__result_202(66), __result_212(67), __result_222(68), __result_232(69)>
  # DEBUG __result => __result_8
  D.39359_233 = __result_8;
  iftmp.46_234 = D.39359_233;
  goto <bb 72>;

<bb 71>:
  D.43171_235 = a_engine_48->cur_payload_map;
  D.43172_236 = D.43171_235->remote_sdp_ip;
  iftmp.46_237 = __builtin_strcmp (D.43172_236, "0.0.0.0");

<bb 72>:
  # iftmp.46_28 = PHI <iftmp.46_234(70), iftmp.46_237(71)>
  D.39360_238 = iftmp.46_28;
  if (D.39360_238 != 0)
    goto <bb 73>;
  else
    goto <bb 74>;

<bb 73>:
  switch_core_media_toggle_hold (session_45(D), 0);

<bb 74>:
  D.43254_239 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43254_239 == 0)
    goto <bb 75>;
  else
    goto <bb 79>;

<bb 75>:
  D.43073_240 = session_45(D)->channel;
  val_241 = switch_channel_get_variable_dup (D.43073_240, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_241
  if (val_241 == 0B)
    goto <bb 77>;
  else
    goto <bb 76>;

<bb 76>:
  D.43258_242 = switch_true (val_241);
  if (D.43258_242 == 0)
    goto <bb 77>;
  else
    goto <bb 79>;

<bb 77>:
  D.43073_243 = session_45(D)->channel;
  D.43259_244 = switch_channel_test_flag (D.43073_243, 106);
  if (D.43259_244 == 0)
    goto <bb 78>;
  else
    goto <bb 79>;

<bb 78>:
  D.43077_245 = a_engine_48->rtp_session;
  switch_rtp_set_flag (D.43077_245, 7);

<bb 79>:
  D.43262_246 = session_45(D) != 0B;
  D.43263_247 = a_engine_48 != 0B;
  D.43264_248 = D.43262_246 && D.43263_247;
  if (D.43264_248 != 0)
    goto <bb 80>;
  else
    goto <bb 220> (video);

<bb 80>:
  check_dtls_reinvite (session_45(D), a_engine_48);
  goto <bb 220> (video);

<bb 81>:
  D.43073_249 = session_45(D)->channel;
  D.43267_250 = switch_channel_test_flag (D.43073_249, 29);
  if (D.43267_250 != 0)
    goto <bb 82>;
  else
    goto <bb 89>;

<bb 82>:
  switch_core_media_proxy_remote_addr (session_45(D), 0B);
  memset (&flags, 0, 156);
  D.43102_251 = flags[13];
  D.43103_252 = D.43102_251 + 1;
  flags[13] = D.43103_252;
  D.43270_253 = flags[19];
  D.43271_254 = D.43270_253 + 1;
  flags[19] = D.43271_254;
  D.43274_255 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43274_255 == 0)
    goto <bb 83>;
  else
    goto <bb 87>;

<bb 83>:
  D.43073_256 = session_45(D)->channel;
  D.43277_257 = switch_channel_test_flag (D.43073_256, 106);
  if (D.43277_257 == 0)
    goto <bb 84>;
  else
    goto <bb 87>;

<bb 84>:
  D.43073_258 = session_45(D)->channel;
  val_259 = switch_channel_get_variable_dup (D.43073_258, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_259
  if (val_259 == 0B)
    goto <bb 86>;
  else
    goto <bb 85>;

<bb 85>:
  D.43281_260 = switch_true (val_259);
  if (D.43281_260 == 0)
    goto <bb 86>;
  else
    goto <bb 87>;

<bb 86>:
  D.43114_261 = flags[7];
  D.43115_262 = D.43114_261 + 1;
  flags[7] = D.43115_262;

<bb 87>:
  timer_name_263 = 0B;
  # DEBUG timer_name => timer_name_263
  D.43073_264 = session_45(D)->channel;
  D.43282_265 = switch_channel_get_name (D.43073_264);
  D.43171_266 = a_engine_48->cur_payload_map;
  D.43172_267 = D.43171_266->remote_sdp_ip;
  D.43171_268 = a_engine_48->cur_payload_map;
  D.43174_269 = D.43171_268->remote_sdp_port;
  D.43179_270 = (int) D.43174_269;
  D.43171_271 = a_engine_48->cur_payload_map;
  D.43172_272 = D.43171_271->remote_sdp_ip;
  D.43171_273 = a_engine_48->cur_payload_map;
  D.43174_274 = D.43171_273->remote_sdp_port;
  D.43179_275 = (int) D.43174_274;
  D.43171_276 = a_engine_48->cur_payload_map;
  D.43187_277 = D.43171_276->agreed_pt;
  D.43188_278 = (int) D.43187_277;
  D.43189_279 = a_engine_48->read_impl.microseconds_per_packet;
  D.43190_280 = D.43189_279 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 4906, session_45(D), 7, "PROXY AUDIO RTP [%s] %s:%d->%s:%d codec: %u ms: %d\n", D.43282_265, D.43172_272, D.43179_275, D.43172_272, D.43179_275, D.43188_278, D.43190_280);
  D.43077_281 = a_engine_48->rtp_session;
  D.43283_282 = switch_rtp_ready (D.43077_281);
  if (D.43283_282 != 0)
    goto <bb 88>;
  else
    goto <bb 91>;

<bb 88>:
  D.43077_283 = a_engine_48->rtp_session;
  D.43171_284 = a_engine_48->cur_payload_map;
  D.43187_285 = D.43171_284->agreed_pt;
  switch_rtp_set_default_payload (D.43077_283, D.43187_285);
  goto <bb 91>;

<bb 89>:
  D.43099_286 = smh_46->mparams;
  timer_name_287 = D.43099_286->timer_name;
  # DEBUG timer_name => timer_name_287
  D.43073_288 = session_45(D)->channel;
  var_289 = switch_channel_get_variable_dup (D.43073_288, "rtp_timer_name", 1, -1);
  # DEBUG var => var_289
  if (var_289 != 0B)
    goto <bb 90>;
  else
    goto <bb 91>;

<bb 90>:
  timer_name_290 = var_289;
  # DEBUG timer_name => timer_name_290

<bb 91>:
  # timer_name_6 = PHI <timer_name_263(88), timer_name_287(89), timer_name_290(90), timer_name_263(87)>
  # DEBUG timer_name => timer_name_6
  D.43073_291 = session_45(D)->channel;
  D.43291_292 = switch_channel_check_signal (D.43073_291, 1);
  if (D.43291_292 != 0)
    goto <bb 93>;
  else
    goto <bb 92>;

<bb 92>:
  D.43073_293 = session_45(D)->channel;
  D.43293_294 = switch_channel_get_state (D.43073_293);
  if (D.43293_294 <= 9)
    goto <bb 93>;
  else
    goto <bb 95>;

<bb 93>:
  D.43184_295 = a_engine_48->local_sdp_ip;
  D.43185_296 = a_engine_48->local_sdp_port;
  D.43171_297 = a_engine_48->cur_payload_map;
  D.43172_298 = D.43171_297->remote_sdp_ip;
  D.43171_299 = a_engine_48->cur_payload_map;
  D.43174_300 = D.43171_299->remote_sdp_port;
  D.43171_301 = a_engine_48->cur_payload_map;
  D.43187_302 = D.43171_301->agreed_pt;
  D.43294_303 = a_engine_48->read_impl.samples_per_packet;
  D.43171_304 = a_engine_48->cur_payload_map;
  D.43295_305 = D.43171_304->codec_ms;
  D.43296_306 = D.43295_305 * 1000;
  D.43297_307 = switch_core_session_get_pool (session_45(D));
  D.43298_308 = switch_rtp_new (D.43184_295, D.43185_296, D.43172_298, D.43174_300, D.43187_302, D.43294_303, D.43296_306, &flags, timer_name_6, &err, D.43297_307);
  a_engine_48->rtp_session = D.43298_308;
  D.43077_309 = a_engine_48->rtp_session;
  D.43299_310 = switch_rtp_ready (D.43077_309);
  if (D.43299_310 != 0)
    goto <bb 94>;
  else
    goto <bb 95>;

<bb 94>:
  D.43077_311 = a_engine_48->rtp_session;
  D.43302_312 = &a_engine_48->payload_map;
  switch_rtp_set_payload_map (D.43077_311, D.43302_312);

<bb 95>:
  D.43077_313 = a_engine_48->rtp_session;
  D.43303_314 = switch_rtp_ready (D.43077_313);
  if (D.43303_314 != 0)
    goto <bb 96>;
  else
    goto <bb 330>;

<bb 96>:
  D.43099_315 = smh_46->mparams;
  D.43306_316 = D.43099_315->vflags;
  D.43307_317 = (uint8_t) D.43306_316;
  vad_in_318 = D.43307_317 & 1;
  # DEBUG vad_in => vad_in_318
  D.43099_319 = smh_46->mparams;
  D.43306_320 = D.43099_319->vflags;
  D.43307_321 = (uint8_t) D.43306_320;
  vad_out_322 = D.43307_321 & 2;
  # DEBUG vad_out => vad_out_322
  D.43073_323 = session_45(D)->channel;
  D.43308_324 = switch_channel_direction (D.43073_323);
  inb_325 = D.43308_324 == 0;
  # DEBUG inb => inb_325
  D.43309_326 = &a_engine_48->read_mutex;
  D.43310_327 = switch_core_session_get_pool (session_45(D));
  switch_mutex_init (D.43309_326, 1, D.43310_327);
  D.43073_328 = session_45(D)->channel;
  ssrc_329 = switch_channel_get_variable_dup (D.43073_328, "rtp_use_ssrc", 1, -1);
  # DEBUG ssrc => ssrc_329
  if (ssrc_329 != 0B)
    goto <bb 97>;
  else
    goto <bb 98>;

<bb 97>:
  ssrc_ul_330 = strtoul (ssrc_329, 0B, 10);
  # DEBUG ssrc_ul => ssrc_ul_330
  D.43077_331 = a_engine_48->rtp_session;
  switch_rtp_set_ssrc (D.43077_331, ssrc_ul_330);
  a_engine_48->ssrc = ssrc_ul_330;
  goto <bb 99>;

<bb 98>:
  D.43077_332 = a_engine_48->rtp_session;
  D.43314_333 = a_engine_48->ssrc;
  switch_rtp_set_ssrc (D.43077_332, D.43314_333);

<bb 99>:
  D.43315_334 = a_engine_48->remote_ssrc;
  if (D.43315_334 != 0)
    goto <bb 100>;
  else
    goto <bb 101>;

<bb 100>:
  D.43077_335 = a_engine_48->rtp_session;
  D.43315_336 = a_engine_48->remote_ssrc;
  switch_rtp_set_remote_ssrc (D.43077_335, D.43315_336);

<bb 101>:
  D.43073_337 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_337, 36, 1);
  D.43073_338 = session_45(D)->channel;
  D.43171_339 = a_engine_48->cur_payload_map;
  D.43187_340 = D.43171_339->agreed_pt;
  D.43188_341 = (int) D.43187_340;
  switch_channel_set_variable_printf (D.43073_338, "rtp_use_pt", "%d", D.43188_341);
  D.43073_342 = session_45(D)->channel;
  val_343 = switch_channel_get_variable_dup (D.43073_342, "rtp_enable_vad_in", 1, -1);
  # DEBUG val => val_343
  if (val_343 != 0B)
    goto <bb 102>;
  else
    goto <bb 104>;

<bb 102>:
  D.43320_344 = switch_true (val_343);
  if (D.43320_344 != 0)
    goto <bb 103>;
  else
    goto <bb 104>;

<bb 103>:
  vad_in_345 = 1;
  # DEBUG vad_in => vad_in_345

<bb 104>:
  # vad_in_9 = PHI <vad_in_318(101), vad_in_318(102), vad_in_345(103)>
  # DEBUG vad_in => vad_in_9
  D.43073_346 = session_45(D)->channel;
  val_347 = switch_channel_get_variable_dup (D.43073_346, "rtp_enable_vad_out", 1, -1);
  # DEBUG val => val_347
  if (val_347 != 0B)
    goto <bb 105>;
  else
    goto <bb 107>;

<bb 105>:
  D.43325_348 = switch_true (val_347);
  if (D.43325_348 != 0)
    goto <bb 106>;
  else
    goto <bb 107>;

<bb 106>:
  vad_out_349 = 1;
  # DEBUG vad_out => vad_out_349

<bb 107>:
  # vad_out_11 = PHI <vad_out_322(104), vad_out_322(105), vad_out_349(106)>
  # DEBUG vad_out => vad_out_11
  D.43073_350 = session_45(D)->channel;
  val_351 = switch_channel_get_variable_dup (D.43073_350, "rtp_disable_vad_in", 1, -1);
  # DEBUG val => val_351
  if (val_351 != 0B)
    goto <bb 108>;
  else
    goto <bb 110>;

<bb 108>:
  D.43330_352 = switch_true (val_351);
  if (D.43330_352 != 0)
    goto <bb 109>;
  else
    goto <bb 110>;

<bb 109>:
  vad_in_353 = 0;
  # DEBUG vad_in => vad_in_353

<bb 110>:
  # vad_in_10 = PHI <vad_in_9(107), vad_in_9(108), vad_in_353(109)>
  # DEBUG vad_in => vad_in_10
  D.43073_354 = session_45(D)->channel;
  val_355 = switch_channel_get_variable_dup (D.43073_354, "rtp_disable_vad_out", 1, -1);
  # DEBUG val => val_355
  if (val_355 != 0B)
    goto <bb 111>;
  else
    goto <bb 113>;

<bb 111>:
  D.43335_356 = switch_true (val_355);
  if (D.43335_356 != 0)
    goto <bb 112>;
  else
    goto <bb 113>;

<bb 112>:
  vad_out_357 = 0;
  # DEBUG vad_out => vad_out_357

<bb 113>:
  # vad_out_12 = PHI <vad_out_11(110), vad_out_11(111), vad_out_357(112)>
  # DEBUG vad_out => vad_out_12
  D.43077_358 = a_engine_48->rtp_session;
  D.43338_359 = switch_rtp_get_ssrc (D.43077_358);
  a_engine_48->ssrc = D.43338_359;
  D.43073_360 = session_45(D)->channel;
  D.43314_361 = a_engine_48->ssrc;
  switch_channel_set_variable_printf (D.43073_360, "rtp_use_ssrc", "%u", D.43314_361);
  D.43099_362 = smh_46->mparams;
  D.43339_363 = D.43099_362->auto_rtp_bugs;
  D.43340_364 = D.43339_363 & 4;
  if (D.43340_364 != 0)
    goto <bb 114>;
  else
    goto <bb 115>;

<bb 114>:
  D.43343_365 = a_engine_48->rtp_bugs;
  D.43344_366 = D.43343_365 | 4;
  a_engine_48->rtp_bugs = D.43344_366;

<bb 115>:
  D.43073_367 = session_45(D)->channel;
  val_368 = switch_channel_get_variable_dup (D.43073_367, "rtp_manual_rtp_bugs", 1, -1);
  # DEBUG val => val_368
  if (val_368 != 0B)
    goto <bb 116>;
  else
    goto <bb 117>;

<bb 116>:
  D.43347_369 = &a_engine_48->rtp_bugs;
  switch_core_media_parse_rtp_bugs (D.43347_369, val_368);

<bb 117>:
  D.43077_370 = a_engine_48->rtp_session;
  D.43343_371 = a_engine_48->rtp_bugs;
  D.43099_372 = smh_46->mparams;
  D.43348_373 = D.43099_372->manual_rtp_bugs;
  D.43349_374 = D.43343_371 | D.43348_373;
  switch_rtp_intentional_bugs (D.43077_370, D.43349_374);
  D.43352_375 = vad_in_10 != 0;
  D.43353_376 = inb_325 != 0;
  D.43354_377 = D.43352_375 && D.43353_376;
  if (D.43354_377 != 0)
    goto <bb 119>;
  else
    goto <bb 118>;

<bb 118>:
  D.43356_378 = vad_out_12 != 0;
  D.43357_379 = inb_325 == 0;
  D.43358_380 = D.43356_378 && D.43357_379;
  if (D.43358_380 != 0)
    goto <bb 119>;
  else
    goto <bb 126>;

<bb 119>:
  D.43077_381 = a_engine_48->rtp_session;
  D.43359_382 = &a_engine_48->read_codec;
  switch_rtp_enable_vad (D.43077_381, session_45(D), D.43359_382, 7);
  D.43360_383 = switch_core_session_get_channel (session_45(D));
  D.43361_384 = switch_channel_get_name (D.43360_383);
  if (vad_in_10 != 0)
    goto <bb 120>;
  else
    goto <bb 121>;

<bb 120>:
  iftmp.47_385 = "in";
  goto <bb 122>;

<bb 121>:
  iftmp.47_386 = "";

<bb 122>:
  # iftmp.47_29 = PHI <iftmp.47_385(120), iftmp.47_386(121)>
  if (vad_out_12 != 0)
    goto <bb 123>;
  else
    goto <bb 124>;

<bb 123>:
  iftmp.48_387 = "out";
  goto <bb 125>;

<bb 124>:
  iftmp.48_388 = "";

<bb 125>:
  # iftmp.48_30 = PHI <iftmp.48_387(123), iftmp.48_388(124)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5001, session_45(D), 7, "AUDIO RTP Engage VAD for %s ( %s %s )\n", D.43361_384, iftmp.47_29, iftmp.48_30);

<bb 126>:
  D.43370_389 = a_engine_48->ice_in.chosen[0];
  D.43371_390 = a_engine_48->ice_in.cands[D.43370_389][0].ready;
  if (D.43371_390 != 0)
    goto <bb 127>;
  else
    goto <bb 131>;

<bb 127>:
  gen_ice (session_45(D), 0, 0B, 0);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5010, session_45(D), 6, "Activating Audio ICE\n");
  D.43077_391 = a_engine_48->rtp_session;
  D.43374_392 = a_engine_48->ice_in.ufrag;
  D.43375_393 = a_engine_48->ice_out.ufrag;
  D.43376_394 = a_engine_48->ice_out.pwd;
  D.43377_395 = a_engine_48->ice_in.pwd;
  D.43379_396 = switch_ice_direction (session_45(D));
  if (D.43379_396 == 1)
    goto <bb 128>;
  else
    goto <bb 129>;

<bb 128>:
  iftmp.49_397 = 2;
  goto <bb 130>;

<bb 129>:
  iftmp.49_398 = 6;

<bb 130>:
  # iftmp.49_31 = PHI <iftmp.49_397(128), iftmp.49_398(129)>
  D.43383_399 = &a_engine_48->ice_in;
  switch_rtp_activate_ice (D.43077_391, D.43374_392, D.43375_393, D.43376_394, D.43377_395, 0, iftmp.49_31, D.43383_399);

<bb 131>:
  D.43073_400 = session_45(D)->channel;
  val_401 = switch_channel_get_variable_dup (D.43073_400, "rtcp_audio_interval_msec", 1, -1);
  # DEBUG val => val_401
  if (val_401 != 0B)
    goto <bb 133>;
  else
    goto <bb 132>;

<bb 132>:
  D.43099_402 = smh_46->mparams;
  val_403 = D.43099_402->rtcp_audio_interval_msec;
  # DEBUG val => val_403
  if (val_403 != 0B)
    goto <bb 133>;
  else
    goto <bb 149>;

<bb 133>:
  # val_1 = PHI <val_401(131), val_403(132)>
  # DEBUG val => val_1
  D.43073_404 = session_45(D)->channel;
  rport_405 = switch_channel_get_variable_dup (D.43073_404, "rtp_remote_audio_rtcp_port", 1, -1);
  # DEBUG rport => rport_405
  remote_rtcp_port_406 = a_engine_48->remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_406
  D.43387_407 = remote_rtcp_port_406 == 0;
  D.43388_408 = rport_405 != 0B;
  D.43389_409 = D.43387_407 && D.43388_408;
  if (D.43389_409 != 0)
    goto <bb 134>;
  else
    goto <bb 135>;

<bb 134>:
  # DEBUG __nptr => rport_405
  D.48086_1338 = strtol (rport_405, 0B, 10);
  D.48085_1359 = D.48086_1338;
  D.43392_410 = D.48085_1359;
  remote_rtcp_port_411 = (switch_port_t) D.43392_410;
  # DEBUG remote_rtcp_port => remote_rtcp_port_411

<bb 135>:
  # remote_rtcp_port_13 = PHI <remote_rtcp_port_406(133), remote_rtcp_port_411(134)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_13
  D.43393_412 = strcasecmp (val_1, "passthru");
  if (D.43393_412 == 0)
    goto <bb 136>;
  else
    goto <bb 137>;

<bb 136>:
  D.43396_413 = (int) remote_rtcp_port_13;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5043, session_45(D), 6, "Activating RTCP PASSTHRU PORT %d\n", D.43396_413);
  D.43077_414 = a_engine_48->rtp_session;
  D.43397_415 = a_engine_48->rtcp_mux;
  D.43398_416 = D.43397_415 > 0;
  switch_rtp_activate_rtcp (D.43077_414, -1, remote_rtcp_port_13, D.43398_416);
  goto <bb 140>;

<bb 137>:
  # DEBUG __nptr => val_1
  D.48089_1339 = strtol (val_1, 0B, 10);
  D.48088_1361 = D.48089_1339;
  interval_417 = D.48088_1361;
  # DEBUG interval => NULL
  interval.50_418 = (unsigned int) interval_417;
  D.43401_419 = interval.50_418 + 4294967196;
  if (D.43401_419 > 499900)
    goto <bb 138>;
  else
    goto <bb 139>;

<bb 138>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5048, session_45(D), 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_417);
  interval_420 = 10000;
  # DEBUG interval => interval_420

<bb 139>:
  # interval_14 = PHI <interval_417(137), interval_420(138)>
  # DEBUG interval => interval_14
  D.43396_421 = (int) remote_rtcp_port_13;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5053, session_45(D), 6, "Activating RTCP PORT %d\n", D.43396_421);
  D.43077_422 = a_engine_48->rtp_session;
  D.43397_423 = a_engine_48->rtcp_mux;
  D.43398_424 = D.43397_423 > 0;
  switch_rtp_activate_rtcp (D.43077_422, interval_14, remote_rtcp_port_13, D.43398_424);

<bb 140>:
  D.43404_425 = a_engine_48->ice_in.chosen[1];
  D.43405_426 = a_engine_48->ice_in.cands[D.43404_425][1].ready;
  if (D.43405_426 != 0)
    goto <bb 141>;
  else
    goto <bb 149>;

<bb 141>:
  D.43397_427 = a_engine_48->rtcp_mux;
  if (D.43397_427 > 0)
    goto <bb 142>;
  else
    goto <bb 145>;

<bb 142>:
  D.43404_428 = a_engine_48->ice_in.chosen[1];
  D.43411_429 = a_engine_48->ice_in.cands[D.43404_428][1].con_addr;
  D.43370_430 = a_engine_48->ice_in.chosen[0];
  D.43412_431 = a_engine_48->ice_in.cands[D.43370_430][0].con_addr;
  D.39377_432 = __builtin_strcmp (D.43411_429, D.43412_431);
  if (D.39377_432 == 0)
    goto <bb 143>;
  else
    goto <bb 145>;

<bb 143>:
  D.43404_433 = a_engine_48->ice_in.chosen[1];
  D.43414_434 = a_engine_48->ice_in.cands[D.43404_433][1].con_port;
  D.43370_435 = a_engine_48->ice_in.chosen[0];
  D.43415_436 = a_engine_48->ice_in.cands[D.43370_435][0].con_port;
  if (D.43414_434 == D.43415_436)
    goto <bb 144>;
  else
    goto <bb 145>;

<bb 144>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5061, session_45(D), 6, "Skipping RTCP ICE (Same as RTP)\n");
  goto <bb 149>;

<bb 145>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5063, session_45(D), 6, "Activating RTCP ICE\n");
  D.43077_437 = a_engine_48->rtp_session;
  D.43374_438 = a_engine_48->ice_in.ufrag;
  D.43375_439 = a_engine_48->ice_out.ufrag;
  D.43376_440 = a_engine_48->ice_out.pwd;
  D.43377_441 = a_engine_48->ice_in.pwd;
  D.43418_442 = switch_ice_direction (session_45(D));
  if (D.43418_442 == 1)
    goto <bb 146>;
  else
    goto <bb 147>;

<bb 146>:
  iftmp.51_443 = 2;
  goto <bb 148>;

<bb 147>:
  iftmp.51_444 = 6;

<bb 148>:
  # iftmp.51_32 = PHI <iftmp.51_443(146), iftmp.51_444(147)>
  D.43383_445 = &a_engine_48->ice_in;
  switch_rtp_activate_ice (D.43077_437, D.43374_438, D.43375_439, D.43376_440, D.43377_441, 1, iftmp.51_32, D.43383_445);

<bb 149>:
  D.43422_446 = &a_engine_48->local_dtls_fingerprint.str;
  # DEBUG s => D.43422_446
  if (D.43422_446 == 0B)
    goto <bb 152>;
  else
    goto <bb 150>;

<bb 150>:
  D.48092_1340 = MEM[(const char *)D.43422_446];
  if (D.48092_1340 == 0)
    goto <bb 152>;
  else
    goto <bb 151>;

<bb 151>:

<bb 152>:
  # D.48093_1341 = PHI <1(149), 1(150), 0(151)>
  D.48091_1362 = D.48093_1341;
  D.43423_447 = D.48091_1362;
  if (D.43423_447 == 0)
    goto <bb 153>;
  else
    goto <bb 169>;

<bb 153>:
  D.43426_448 = switch_rtp_has_dtls ();
  if (D.43426_448 != 0)
    goto <bb 154>;
  else
    goto <bb 169>;

<bb 154>:
  D.43429_449 = smh_46->session;
  D.43430_450 = dtls_ok (D.43429_449);
  if (D.43430_450 != 0)
    goto <bb 155>;
  else
    goto <bb 169>;

<bb 155>:
  D.43429_451 = smh_46->session;
  D.43434_452 = D.43429_451->channel;
  D.43435_453 = switch_channel_direction (D.43434_452);
  if (D.43435_453 == 0)
    goto <bb 156>;
  else
    goto <bb 157>;

<bb 156>:
  iftmp.52_454 = 1;
  goto <bb 158>;

<bb 157>:
  iftmp.52_455 = 2;

<bb 158>:
  # iftmp.52_33 = PHI <iftmp.52_454(156), iftmp.52_455(157)>
  dtype_456 = iftmp.52_33;
  # DEBUG dtype => dtype_456
  D.43429_457 = smh_46->session;
  D.43434_458 = D.43429_457->channel;
  D.43439_459 = switch_channel_test_flag (D.43434_458, 112);
  if (D.43439_459 != 0)
    goto <bb 159>;
  else
    goto <bb 163>;

<bb 159>:
  if (dtype_456 == 1)
    goto <bb 160>;
  else
    goto <bb 161>;

<bb 160>:
  iftmp.53_460 = 2;
  goto <bb 162>;

<bb 161>:
  iftmp.53_461 = 1;

<bb 162>:
  # iftmp.53_34 = PHI <iftmp.53_460(160), iftmp.53_461(161)>
  dtype_462 = iftmp.53_34;
  # DEBUG dtype => dtype_462

<bb 163>:
  # dtype_16 = PHI <dtype_456(158), dtype_462(162)>
  # DEBUG dtype => dtype_16
  xtype_463 = 4;
  # DEBUG xtype => xtype_463
  D.43397_464 = a_engine_48->rtcp_mux;
  if (D.43397_464 > 0)
    goto <bb 164>;
  else
    goto <bb 166>;

<bb 164>:
  D.43099_465 = smh_46->mparams;
  D.43448_466 = D.43099_465->rtcp_audio_interval_msec;
  if (D.43448_466 != 0B)
    goto <bb 165>;
  else
    goto <bb 166>;

<bb 165>:
  xtype_467 = xtype_463 | 8;
  # DEBUG xtype => xtype_467

<bb 166>:
  # xtype_15 = PHI <xtype_463(163), xtype_463(164), xtype_467(165)>
  # DEBUG xtype => xtype_15
  D.43077_468 = a_engine_48->rtp_session;
  D.43451_469 = &a_engine_48->local_dtls_fingerprint;
  D.43452_470 = &a_engine_48->remote_dtls_fingerprint;
  D.43453_471 = dtype_16 | xtype_15;
  switch_rtp_add_dtls (D.43077_468, D.43451_469, D.43452_470, D.43453_471);
  D.43397_472 = a_engine_48->rtcp_mux;
  if (D.43397_472 <= 0)
    goto <bb 167>;
  else
    goto <bb 169>;

<bb 167>:
  D.43099_473 = smh_46->mparams;
  D.43448_474 = D.43099_473->rtcp_audio_interval_msec;
  if (D.43448_474 != 0B)
    goto <bb 168>;
  else
    goto <bb 169>;

<bb 168>:
  xtype_475 = 8;
  # DEBUG xtype => xtype_475
  D.43077_476 = a_engine_48->rtp_session;
  D.43451_477 = &a_engine_48->local_dtls_fingerprint;
  D.43452_478 = &a_engine_48->remote_dtls_fingerprint;
  D.43453_479 = dtype_16 | xtype_475;
  switch_rtp_add_dtls (D.43077_476, D.43451_477, D.43452_478, D.43453_479);

<bb 169>:
  D.43073_480 = session_45(D)->channel;
  val_481 = switch_channel_get_variable_dup (D.43073_480, "jitterbuffer_msec", 1, -1);
  # DEBUG val => val_481
  if (val_481 != 0B)
    goto <bb 171>;
  else
    goto <bb 170>;

<bb 170>:
  D.43099_482 = smh_46->mparams;
  val_483 = D.43099_482->jb_msec;
  # DEBUG val => val_483
  if (val_483 != 0B)
    goto <bb 171>;
  else
    goto <bb 188>;

<bb 171>:
  # val_2 = PHI <val_481(169), val_483(170)>
  # DEBUG val => val_2
  # DEBUG __nptr => val_2
  D.48096_1342 = strtol (val_2, 0B, 10);
  D.48095_1364 = D.48096_1342;
  jb_msec_484 = D.48095_1364;
  # DEBUG jb_msec => NULL
  maxlen_485 = 0;
  # DEBUG maxlen => maxlen_485
  max_drift_486 = 0;
  # DEBUG max_drift => max_drift_486
  p_487 = __builtin_strchr (val_2, 58);
  # DEBUG p => p_487
  if (p_487 != 0B)
    goto <bb 172>;
  else
    goto <bb 174>;

<bb 172>:
  p_488 = p_487 + 1;
  # DEBUG p => p_488
  # DEBUG __nptr => p_488
  D.48099_1343 = strtol (p_488, 0B, 10);
  D.48098_1366 = D.48099_1343;
  maxlen_489 = D.48098_1366;
  # DEBUG maxlen => NULL
  q_490 = __builtin_strchr (p_488, 58);
  # DEBUG q => q_490
  if (q_490 != 0B)
    goto <bb 173>;
  else
    goto <bb 174>;

<bb 173>:
  q_491 = q_490 + 1;
  # DEBUG q => q_491
  # DEBUG __nptr => q_491
  D.48102_1344 = strtol (q_491, 0B, 10);
  D.48101_1368 = D.48102_1344;
  D.43465_492 = D.48101_1368;
  max_drift_493 = ABS_EXPR <D.43465_492>;
  # DEBUG max_drift => max_drift_493

<bb 174>:
  # maxlen_18 = PHI <maxlen_485(171), maxlen_489(172), maxlen_489(173)>
  # max_drift_19 = PHI <max_drift_486(171), max_drift_486(172), max_drift_493(173)>
  # DEBUG max_drift => max_drift_19
  # DEBUG maxlen => maxlen_18
  jb_msec.54_494 = (unsigned int) jb_msec_484;
  D.43467_495 = jb_msec.54_494 + 9;
  if (D.43467_495 <= 8)
    goto <bb 175>;
  else
    goto <bb 176>;

<bb 175>:
  D.43470_496 = a_engine_48->read_codec.implementation;
  D.43471_497 = D.43470_496->microseconds_per_packet;
  D.43472_498 = D.43471_497 / 1000;
  D.43473_499 = ABS_EXPR <jb_msec_484>;
  jb_msec_500 = D.43472_498 * D.43473_499;
  # DEBUG jb_msec => jb_msec_500

<bb 176>:
  # jb_msec_17 = PHI <jb_msec_484(174), jb_msec_500(175)>
  # DEBUG jb_msec => jb_msec_17
  jb_msec.54_501 = (unsigned int) jb_msec_17;
  D.43474_502 = jb_msec.54_501 + 4294967276;
  if (D.43474_502 > 9980)
    goto <bb 177>;
  else
    goto <bb 178>;

<bb 177>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5125, session_45(D), 3, "Invalid Jitterbuffer spec [%d] must be between 20 and 10000\n", jb_msec_17);
  goto <bb 188>;

<bb 178>:
  maxqlen_503 = 50;
  # DEBUG maxqlen => maxqlen_503
  D.43189_504 = a_engine_48->read_impl.microseconds_per_packet;
  D.43190_505 = D.43189_504 / 1000;
  qlen_506 = jb_msec_17 / D.43190_505;
  # DEBUG qlen => qlen_506
  if (qlen_506 <= 0)
    goto <bb 179>;
  else
    goto <bb 180>;

<bb 179>:
  qlen_507 = 3;
  # DEBUG qlen => qlen_507

<bb 180>:
  # qlen_20 = PHI <qlen_506(178), qlen_507(179)>
  # DEBUG qlen => qlen_20
  if (maxlen_18 != 0)
    goto <bb 181>;
  else
    goto <bb 182>;

<bb 181>:
  D.43189_508 = a_engine_48->read_impl.microseconds_per_packet;
  D.43190_509 = D.43189_508 / 1000;
  maxqlen_510 = maxlen_18 / D.43190_509;
  # DEBUG maxqlen => maxqlen_510

<bb 182>:
  # maxqlen_21 = PHI <maxqlen_503(180), maxqlen_510(181)>
  # DEBUG maxqlen => maxqlen_21
  if (maxqlen_21 < qlen_20)
    goto <bb 183>;
  else
    goto <bb 184>;

<bb 183>:
  maxqlen_511 = qlen_20 * 5;
  # DEBUG maxqlen => maxqlen_511

<bb 184>:
  # maxqlen_22 = PHI <maxqlen_21(182), maxqlen_511(183)>
  # DEBUG maxqlen => maxqlen_22
  D.43077_512 = a_engine_48->rtp_session;
  qlen.55_513 = (uint32_t) qlen_20;
  maxqlen.56_514 = (uint32_t) maxqlen_22;
  D.43294_515 = a_engine_48->read_impl.samples_per_packet;
  D.43486_516 = a_engine_48->read_impl.samples_per_second;
  max_drift.57_517 = (uint32_t) max_drift_19;
  D.43488_518 = switch_rtp_activate_jitter_buffer (D.43077_512, qlen.55_513, maxqlen.56_514, D.43294_515, D.43486_516, max_drift.57_517);
  if (D.43488_518 == 0)
    goto <bb 185>;
  else
    goto <bb 187>;

<bb 185>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5146, session_45(D), 7, "Setting Jitterbuffer to %dms (%d frames)\n", jb_msec_17, qlen_20);
  D.43073_519 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_519, 57, 1);
  D.43073_520 = session_45(D)->channel;
  D.43491_521 = switch_channel_get_variable_dup (D.43073_520, "rtp_jitter_buffer_plc", 1, -1);
  D.43492_522 = switch_false (D.43491_521);
  if (D.43492_522 == 0)
    goto <bb 186>;
  else
    goto <bb 188>;

<bb 186>:
  D.43073_523 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_523, 58, 1);
  goto <bb 188>;

<bb 187>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5153, session_45(D), 4, "Error Setting Jitterbuffer to %dms (%d frames)\n", jb_msec_17, qlen_20);

<bb 188>:
  D.43073_524 = session_45(D)->channel;
  val_525 = switch_channel_get_variable_dup (D.43073_524, "rtp_timeout_sec", 1, -1);
  # DEBUG val => val_525
  if (val_525 != 0B)
    goto <bb 189>;
  else
    goto <bb 191>;

<bb 189>:
  # DEBUG __nptr => val_525
  D.48105_1345 = strtol (val_525, 0B, 10);
  D.48104_1370 = D.48105_1345;
  v_526 = D.48104_1370;
  # DEBUG v => NULL
  if (v_526 >= 0)
    goto <bb 190>;
  else
    goto <bb 191>;

<bb 190>:
  D.43099_527 = smh_46->mparams;
  v.58_528 = (uint32_t) v_526;
  D.43099_527->rtp_timeout_sec = v.58_528;

<bb 191>:
  D.43073_529 = session_45(D)->channel;
  val_530 = switch_channel_get_variable_dup (D.43073_529, "rtp_hold_timeout_sec", 1, -1);
  # DEBUG val => val_530
  if (val_530 != 0B)
    goto <bb 192>;
  else
    goto <bb 194>;

<bb 192>:
  # DEBUG __nptr => val_530
  D.48108_1346 = strtol (val_530, 0B, 10);
  D.48107_1372 = D.48108_1346;
  v_531 = D.48107_1372;
  # DEBUG v => NULL
  if (v_531 >= 0)
    goto <bb 193>;
  else
    goto <bb 194>;

<bb 193>:
  D.43099_532 = smh_46->mparams;
  v.59_533 = (uint32_t) v_531;
  D.43099_532->rtp_hold_timeout_sec = v.59_533;

<bb 194>:
  D.43099_534 = smh_46->mparams;
  D.43506_535 = D.43099_534->rtp_timeout_sec;
  if (D.43506_535 != 0)
    goto <bb 195>;
  else
    goto <bb 197>;

<bb 195>:
  D.43486_536 = a_engine_48->read_impl.samples_per_second;
  D.43099_537 = smh_46->mparams;
  D.43506_538 = D.43099_537->rtp_timeout_sec;
  D.43509_539 = D.43486_536 * D.43506_538;
  D.43294_540 = a_engine_48->read_impl.samples_per_packet;
  D.43510_541 = D.43509_539 / D.43294_540;
  a_engine_48->max_missed_packets = D.43510_541;
  D.43077_542 = a_engine_48->rtp_session;
  D.43511_543 = a_engine_48->max_missed_packets;
  switch_rtp_set_max_missed_packets (D.43077_542, D.43511_543);
  D.43099_544 = smh_46->mparams;
  D.43512_545 = D.43099_544->rtp_hold_timeout_sec;
  if (D.43512_545 == 0)
    goto <bb 196>;
  else
    goto <bb 197>;

<bb 196>:
  D.43099_546 = smh_46->mparams;
  D.43099_547 = smh_46->mparams;
  D.43506_548 = D.43099_547->rtp_timeout_sec;
  D.43515_549 = D.43506_548 * 10;
  D.43099_547->rtp_hold_timeout_sec = D.43515_549;

<bb 197>:
  D.43099_550 = smh_46->mparams;
  D.43512_551 = D.43099_550->rtp_hold_timeout_sec;
  if (D.43512_551 != 0)
    goto <bb 198>;
  else
    goto <bb 199>;

<bb 198>:
  D.43486_552 = a_engine_48->read_impl.samples_per_second;
  D.43099_553 = smh_46->mparams;
  D.43512_554 = D.43099_553->rtp_hold_timeout_sec;
  D.43518_555 = D.43486_552 * D.43512_554;
  D.43294_556 = a_engine_48->read_impl.samples_per_packet;
  D.43519_557 = D.43518_555 / D.43294_556;
  a_engine_48->max_missed_hold_packets = D.43519_557;

<bb 199>:
  D.43099_558 = smh_46->mparams;
  D.43520_559 = D.43099_558->te;
  if (D.43520_559 != 0)
    goto <bb 200>;
  else
    goto <bb 201>;

<bb 200>:
  D.43099_560 = smh_46->mparams;
  D.43520_561 = D.43099_560->te;
  D.43523_562 = (int) D.43520_561;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5188, session_45(D), 7, "Set 2833 dtmf send payload to %u\n", D.43523_562);
  D.43077_563 = a_engine_48->rtp_session;
  D.43099_564 = smh_46->mparams;
  D.43520_565 = D.43099_564->te;
  switch_rtp_set_telephony_event (D.43077_563, D.43520_565);
  D.43073_566 = session_45(D)->channel;
  D.43099_567 = smh_46->mparams;
  D.43520_568 = D.43099_567->te;
  D.43523_569 = (int) D.43520_568;
  switch_channel_set_variable_printf (D.43073_566, "rtp_2833_send_payload", "%d", D.43523_569);

<bb 201>:
  D.43099_570 = smh_46->mparams;
  D.43524_571 = D.43099_570->recv_te;
  if (D.43524_571 != 0)
    goto <bb 202>;
  else
    goto <bb 203>;

<bb 202>:
  D.43099_572 = smh_46->mparams;
  D.43524_573 = D.43099_572->recv_te;
  D.43527_574 = (int) D.43524_573;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5194, session_45(D), 7, "Set 2833 dtmf receive payload to %u\n", D.43527_574);
  D.43077_575 = a_engine_48->rtp_session;
  D.43099_576 = smh_46->mparams;
  D.43524_577 = D.43099_576->recv_te;
  switch_rtp_set_telephony_recv_event (D.43077_575, D.43524_577);
  D.43073_578 = session_45(D)->channel;
  D.43099_579 = smh_46->mparams;
  D.43524_580 = D.43099_579->recv_te;
  D.43527_581 = (int) D.43524_580;
  switch_channel_set_variable_printf (D.43073_578, "rtp_2833_recv_payload", "%d", D.43527_581);

<bb 203>:
  D.43531_582 = switch_media_handle_test_media_flag (smh_46, 9);
  if (D.43531_582 != 0)
    goto <bb 208>;
  else
    goto <bb 204>;

<bb 204>:
  D.43073_583 = session_45(D)->channel;
  val_584 = switch_channel_get_variable_dup (D.43073_583, "supress_cng", 1, -1);
  # DEBUG val => val_584
  if (val_584 != 0B)
    goto <bb 205>;
  else
    goto <bb 206>;

<bb 205>:
  D.43534_585 = switch_true (val_584);
  if (D.43534_585 != 0)
    goto <bb 208>;
  else
    goto <bb 206>;

<bb 206>:
  D.43073_586 = session_45(D)->channel;
  val_587 = switch_channel_get_variable_dup (D.43073_586, "suppress_cng", 1, -1);
  # DEBUG val => val_587
  if (val_587 != 0B)
    goto <bb 207>;
  else
    goto <bb 209>;

<bb 207>:
  D.43536_588 = switch_true (val_587);
  if (D.43536_588 != 0)
    goto <bb 208>;
  else
    goto <bb 209>;

<bb 208>:
  D.43099_589 = smh_46->mparams;
  D.43099_589->cng_pt = 0;

<bb 209>:
  D.43073_590 = session_45(D)->channel;
  val_591 = switch_channel_get_variable_dup (D.43073_590, "rtp_digit_delay", 1, -1);
  # DEBUG val => val_591
  if (val_591 != 0B)
    goto <bb 210>;
  else
    goto <bb 213>;

<bb 210>:
  # DEBUG __nptr => val_591
  D.48111_1347 = strtol (val_591, 0B, 10);
  D.48110_1374 = D.48111_1347;
  delayi_592 = D.48110_1374;
  # DEBUG delayi => NULL
  if (delayi_592 < 0)
    goto <bb 211>;
  else
    goto <bb 212>;

<bb 211>:
  delayi_593 = 0;
  # DEBUG delayi => delayi_593

<bb 212>:
  # delayi_23 = PHI <delayi_592(210), delayi_593(211)>
  # DEBUG delayi => delayi_23
  D.43099_594 = smh_46->mparams;
  delayi.60_595 = (unsigned int) delayi_23;
  D.43099_594->dtmf_delay = delayi.60_595;

<bb 213>:
  D.43099_596 = smh_46->mparams;
  D.43542_597 = D.43099_596->dtmf_delay;
  if (D.43542_597 != 0)
    goto <bb 214>;
  else
    goto <bb 215>;

<bb 214>:
  D.43077_598 = a_engine_48->rtp_session;
  D.43099_599 = smh_46->mparams;
  D.43542_600 = D.43099_599->dtmf_delay;
  switch_rtp_set_interdigit_delay (D.43077_598, D.43542_600);
  D.43073_601 = session_45(D)->channel;
  D.43545_602 = switch_channel_get_name (D.43073_601);
  D.43099_603 = smh_46->mparams;
  D.43542_604 = D.43099_603->dtmf_delay;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5216, session_45(D), 7, "%s Set rtp dtmf delay to %u\n", D.43545_602, D.43542_604);

<bb 215>:
  D.43099_605 = smh_46->mparams;
  D.43143_606 = D.43099_605->cng_pt;
  if (D.43143_606 != 0)
    goto <bb 216>;
  else
    goto <bb 218>;

<bb 216>:
  D.43548_607 = switch_media_handle_test_media_flag (smh_46, 9);
  if (D.43548_607 == 0)
    goto <bb 217>;
  else
    goto <bb 218>;

<bb 217>:
  D.43099_608 = smh_46->mparams;
  D.43143_609 = D.43099_608->cng_pt;
  D.43551_610 = (int) D.43143_609;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5222, session_45(D), 7, "Set comfort noise payload to %u\n", D.43551_610);
  D.43077_611 = a_engine_48->rtp_session;
  D.43099_612 = smh_46->mparams;
  D.43143_613 = D.43099_612->cng_pt;
  switch_rtp_set_cng_pt (D.43077_611, D.43143_613);

<bb 218>:
  switch_core_session_apply_crypto (session_45(D), 0);
  D.43171_614 = a_engine_48->cur_payload_map;
  D.43174_615 = D.43171_614->remote_sdp_port;
  D.43179_616 = (int) D.43174_615;
  switch_snprintf (&tmp, 50, "%d", D.43179_616);
  D.43073_617 = session_45(D)->channel;
  D.43171_618 = a_engine_48->cur_payload_map;
  D.43172_619 = D.43171_618->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_617, "remote_media_ip", D.43172_619, 1);
  D.43073_620 = session_45(D)->channel;
  switch_channel_set_variable_var_check (D.43073_620, "remote_media_port", &tmp, 1);
  D.43073_621 = session_45(D)->channel;
  D.43552_622 = switch_channel_test_flag (D.43073_621, 74);
  if (D.43552_622 != 0)
    goto <bb 219>;
  else
    goto <bb 220> (video);

<bb 219>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5234, session_45(D), 6, "Activating ZRTP PROXY MODE\n");
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5235, session_45(D), 7, "Disable NOTIMER_DURING_BRIDGE\n");
  D.43073_623 = session_45(D)->channel;
  switch_channel_clear_flag (D.43073_623, 99);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5237, session_45(D), 7, "Activating audio UDPTL mode\n");
  D.43077_624 = a_engine_48->rtp_session;
  switch_rtp_udptl_mode (D.43077_624);

  # status_4 = PHI <status_43(18), status_73(53), status_73(80), status_73(218), status_73(219), status_73(79)>
video:
  # DEBUG status => status_4
  D.43073_630 = session_45(D)->channel;
  D.43555_631 = switch_channel_direction (D.43073_630);
  if (D.43555_631 == 1)
    goto <bb 221>;
  else
    goto <bb 222>;

<bb 221>:
  switch_core_media_check_video_codecs (session_45(D));

<bb 222>:
  D.43073_632 = session_45(D)->channel;
  D.43558_633 = switch_channel_test_flag (D.43073_632, 98);
  if (D.43558_633 != 0)
    goto <bb 223>;
  else
    goto <bb 334> (video_up);

<bb 223>:
  D.43561_634 = v_engine_49->cur_payload_map;
  D.43562_635 = D.43561_634->rm_encoding;
  if (D.43562_635 != 0B)
    goto <bb 224>;
  else
    goto <bb 334> (video_up);

<bb 224>:
  D.43561_636 = v_engine_49->cur_payload_map;
  D.43565_637 = D.43561_636->remote_sdp_port;
  if (D.43565_637 != 0)
    goto <bb 225>;
  else
    goto <bb 334> (video_up);

<bb 225>:
  D.43096_638 = v_engine_49->rtp_session;
  if (D.43096_638 != 0B)
    goto <bb 226>;
  else
    goto <bb 232>;

<bb 226>:
  D.43073_639 = session_45(D)->channel;
  D.43570_640 = switch_channel_test_flag (D.43073_639, 103);
  if (D.43570_640 != 0)
    goto <bb 227>;
  else
    goto <bb 232>;

<bb 227>:
  D.43096_641 = v_engine_49->rtp_session;
  remote_host_642 = switch_rtp_get_remote_host (D.43096_641);
  # DEBUG remote_host => remote_host_642
  D.43096_643 = v_engine_49->rtp_session;
  remote_port_644 = switch_rtp_get_remote_port (D.43096_643);
  # DEBUG remote_port => remote_port_644
  D.43574_645 = remote_host_642 != 0B;
  D.43575_646 = remote_port_644 != 0;
  D.43576_647 = D.43574_645 && D.43575_646;
  if (D.43576_647 != 0)
    goto <bb 228>;
  else
    goto <bb 231>;

<bb 228>:
  D.43561_648 = v_engine_49->cur_payload_map;
  D.43578_649 = D.43561_648->remote_sdp_ip;
  D.39400_650 = __builtin_strcmp (remote_host_642, D.43578_649);
  if (D.39400_650 == 0)
    goto <bb 229>;
  else
    goto <bb 231>;

<bb 229>:
  D.43561_651 = v_engine_49->cur_payload_map;
  D.43565_652 = D.43561_651->remote_sdp_port;
  if (D.43565_652 == remote_port_644)
    goto <bb 230>;
  else
    goto <bb 231>;

<bb 230>:
  D.43073_653 = session_45(D)->channel;
  D.43581_654 = switch_channel_get_name (D.43073_653);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5263, session_45(D), 7, "Video params are unchanged for %s.\n", D.43581_654);
  goto <bb 334> (video_up);

<bb 231>:
  D.43073_655 = session_45(D)->channel;
  D.43582_656 = switch_channel_get_name (D.43073_655);
  D.43583_657 = (int) remote_port_644;
  D.43561_658 = v_engine_49->cur_payload_map;
  D.43578_659 = D.43561_658->remote_sdp_ip;
  D.43561_660 = v_engine_49->cur_payload_map;
  D.43565_661 = D.43561_660->remote_sdp_port;
  D.43584_662 = (int) D.43565_661;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5267, session_45(D), 7, "Video params changed for %s from %s:%d to %s:%d\n", D.43582_656, remote_host_642, D.43583_657, D.43578_659, D.43584_662);

<bb 232>:
  D.43073_663 = session_45(D)->channel;
  D.43585_664 = switch_channel_test_flag (D.43073_663, 29);
  if (D.43585_664 == 0)
    goto <bb 233>;
  else
    goto <bb 235>;

<bb 233>:
  D.43096_665 = v_engine_49->rtp_session;
  D.43588_666 = switch_rtp_ready (D.43096_665);
  if (D.43588_666 != 0)
    goto <bb 234>;
  else
    goto <bb 235>;

<bb 234>:
  D.43073_667 = session_45(D)->channel;
  D.43591_668 = switch_channel_get_name (D.43073_667);
  D.43171_669 = a_engine_48->cur_payload_map;
  D.43172_670 = D.43171_669->remote_sdp_ip;
  D.43592_671 = v_engine_49->local_sdp_port;
  D.43593_672 = (int) D.43592_671;
  D.43561_673 = v_engine_49->cur_payload_map;
  D.43578_674 = D.43561_673->remote_sdp_ip;
  D.43561_675 = v_engine_49->cur_payload_map;
  D.43565_676 = D.43561_675->remote_sdp_port;
  D.43584_677 = (int) D.43565_676;
  D.43561_678 = v_engine_49->cur_payload_map;
  D.43594_679 = D.43561_678->agreed_pt;
  D.43595_680 = (int) D.43594_679;
  D.43189_681 = a_engine_48->read_impl.microseconds_per_packet;
  D.43190_682 = D.43189_681 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5275, session_45(D), 7, "VIDEO RTP [%s] %s port %d -> %s port %d codec: %u ms: %d\n", D.43591_668, D.43172_670, D.43593_672, D.43578_674, D.43584_677, D.43595_680, D.43190_682);
  start_video_thread (session_45(D));
  D.43096_683 = v_engine_49->rtp_session;
  D.43561_684 = v_engine_49->cur_payload_map;
  D.43594_685 = D.43561_684->agreed_pt;
  switch_rtp_set_default_payload (D.43096_683, D.43594_685);

<bb 235>:
  D.43592_686 = v_engine_49->local_sdp_port;
  D.43593_687 = (int) D.43592_686;
  switch_snprintf (&tmp, 50, "%d", D.43593_687);
  D.43073_688 = session_45(D)->channel;
  D.43191_689 = a_engine_48->adv_sdp_ip;
  switch_channel_set_variable_var_check (D.43073_688, "local_video_ip", D.43191_689, 1);
  D.43073_690 = session_45(D)->channel;
  switch_channel_set_variable_var_check (D.43073_690, "local_video_port", &tmp, 1);
  D.43096_691 = v_engine_49->rtp_session;
  if (D.43096_691 != 0B)
    goto <bb 236>;
  else
    goto <bb 247>;

<bb 236>:
  D.43073_692 = session_45(D)->channel;
  D.43598_693 = switch_channel_test_flag (D.43073_692, 103);
  if (D.43598_693 != 0)
    goto <bb 237>;
  else
    goto <bb 247>;

<bb 237>:
  rport_694 = 0B;
  # DEBUG rport => rport_694
  remote_rtcp_port_695 = v_engine_49->remote_rtcp_port;
  # DEBUG remote_rtcp_port => remote_rtcp_port_695
  if (remote_rtcp_port_695 == 0)
    goto <bb 238>;
  else
    goto <bb 240>;

<bb 238>:
  D.43073_696 = session_45(D)->channel;
  rport_697 = switch_channel_get_variable_dup (D.43073_696, "rtp_remote_video_rtcp_port", 1, -1);
  # DEBUG rport => rport_697
  if (rport_697 != 0B)
    goto <bb 239>;
  else
    goto <bb 240>;

<bb 239>:
  # DEBUG __nptr => rport_697
  D.48114_1348 = strtol (rport_697, 0B, 10);
  D.48113_1376 = D.48114_1348;
  D.43605_698 = D.48113_1376;
  remote_rtcp_port_699 = (switch_port_t) D.43605_698;
  # DEBUG remote_rtcp_port => remote_rtcp_port_699

<bb 240>:
  # remote_rtcp_port_24 = PHI <remote_rtcp_port_695(237), remote_rtcp_port_695(238), remote_rtcp_port_699(239)>
  # DEBUG remote_rtcp_port => remote_rtcp_port_24
  D.43096_700 = v_engine_49->rtp_session;
  D.43561_701 = v_engine_49->cur_payload_map;
  D.43578_702 = D.43561_701->remote_sdp_ip;
  D.43561_703 = v_engine_49->cur_payload_map;
  D.43565_704 = D.43561_703->remote_sdp_port;
  D.43606_705 = switch_rtp_set_remote_address (D.43096_700, D.43578_702, D.43565_704, remote_rtcp_port_24, 1, &err);
  if (D.43606_705 != 0)
    goto <bb 241>;
  else
    goto <bb 242>;

<bb 241>:
  err.45_706 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5306, session_45(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", err.45_706);
  goto <bb 334> (video_up);

<bb 242>:
  D.43561_707 = v_engine_49->cur_payload_map;
  D.43578_708 = D.43561_707->remote_sdp_ip;
  D.43561_709 = v_engine_49->cur_payload_map;
  D.43565_710 = D.43561_709->remote_sdp_port;
  D.43584_711 = (int) D.43565_710;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5308, session_45(D), 7, "VIDEO RTP CHANGING DEST TO: [%s:%d]\n", D.43578_708, D.43584_711);
  D.43612_712 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43612_712 == 0)
    goto <bb 243>;
  else
    goto <bb 334> (video_up);

<bb 243>:
  D.43073_713 = session_45(D)->channel;
  D.43615_714 = switch_channel_test_flag (D.43073_713, 106);
  if (D.43615_714 == 0)
    goto <bb 244>;
  else
    goto <bb 334> (video_up);

<bb 244>:
  D.43073_715 = session_45(D)->channel;
  val_716 = switch_channel_get_variable_dup (D.43073_715, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_716
  if (val_716 == 0B)
    goto <bb 246>;
  else
    goto <bb 245>;

<bb 245>:
  D.43619_717 = switch_true (val_716);
  if (D.43619_717 == 0)
    goto <bb 246>;
  else
    goto <bb 334> (video_up);

<bb 246>:
  D.43096_718 = v_engine_49->rtp_session;
  switch_rtp_set_flag (D.43096_718, 7);
  start_video_thread (session_45(D));
  goto <bb 334> (video_up);

<bb 247>:
  D.43073_719 = session_45(D)->channel;
  D.43620_720 = switch_channel_test_flag (D.43073_719, 29);
  if (D.43620_720 != 0)
    goto <bb 248>;
  else
    goto <bb 255>;

<bb 248>:
  switch_core_media_proxy_remote_addr (session_45(D), 0B);
  memset (&flags, 0, 156);
  D.43270_721 = flags[19];
  D.43271_722 = D.43270_721 + 1;
  flags[19] = D.43271_722;
  D.43102_723 = flags[13];
  D.43103_724 = D.43102_723 + 1;
  flags[13] = D.43103_724;
  D.43625_725 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43625_725 == 0)
    goto <bb 249>;
  else
    goto <bb 253>;

<bb 249>:
  D.43073_726 = session_45(D)->channel;
  D.43628_727 = switch_channel_test_flag (D.43073_726, 106);
  if (D.43628_727 == 0)
    goto <bb 250>;
  else
    goto <bb 253>;

<bb 250>:
  D.43073_728 = session_45(D)->channel;
  val_729 = switch_channel_get_variable_dup (D.43073_728, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_729
  if (val_729 == 0B)
    goto <bb 252>;
  else
    goto <bb 251>;

<bb 251>:
  D.43632_730 = switch_true (val_729);
  if (D.43632_730 == 0)
    goto <bb 252>;
  else
    goto <bb 253>;

<bb 252>:
  D.43114_731 = flags[7];
  D.43115_732 = D.43114_731 + 1;
  flags[7] = D.43115_732;

<bb 253>:
  timer_name_733 = 0B;
  # DEBUG timer_name => timer_name_733
  D.43073_734 = session_45(D)->channel;
  D.43633_735 = switch_channel_get_name (D.43073_734);
  D.43171_736 = a_engine_48->cur_payload_map;
  D.43172_737 = D.43171_736->remote_sdp_ip;
  D.43592_738 = v_engine_49->local_sdp_port;
  D.43593_739 = (int) D.43592_738;
  D.43561_740 = v_engine_49->cur_payload_map;
  D.43578_741 = D.43561_740->remote_sdp_ip;
  D.43561_742 = v_engine_49->cur_payload_map;
  D.43565_743 = D.43561_742->remote_sdp_port;
  D.43584_744 = (int) D.43565_743;
  D.43561_745 = v_engine_49->cur_payload_map;
  D.43594_746 = D.43561_745->agreed_pt;
  D.43595_747 = (int) D.43594_746;
  D.43634_748 = v_engine_49->read_impl.microseconds_per_packet;
  D.43635_749 = D.43634_748 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5334, session_45(D), 7, "PROXY VIDEO RTP [%s] %s:%d->%s:%d codec: %u ms: %d\n", D.43633_735, D.43172_737, D.43593_739, D.43578_741, D.43584_744, D.43595_747, D.43635_749);
  D.43096_750 = v_engine_49->rtp_session;
  D.43636_751 = switch_rtp_ready (D.43096_750);
  if (D.43636_751 != 0)
    goto <bb 254>;
  else
    goto <bb 257>;

<bb 254>:
  D.43096_752 = v_engine_49->rtp_session;
  D.43561_753 = v_engine_49->cur_payload_map;
  D.43594_754 = D.43561_753->agreed_pt;
  switch_rtp_set_default_payload (D.43096_752, D.43594_754);
  goto <bb 257>;

<bb 255>:
  D.43099_755 = smh_46->mparams;
  timer_name_756 = D.43099_755->timer_name;
  # DEBUG timer_name => timer_name_756
  D.43073_757 = session_45(D)->channel;
  var_758 = switch_channel_get_variable_dup (D.43073_757, "rtp_timer_name", 1, -1);
  # DEBUG var => var_758
  if (var_758 != 0B)
    goto <bb 256>;
  else
    goto <bb 257>;

<bb 256>:
  timer_name_759 = var_758;
  # DEBUG timer_name => timer_name_759

<bb 257>:
  D.43096_760 = v_engine_49->rtp_session;
  if (D.43096_760 != 0B)
    goto <bb 334> (video_up);
  else
    goto <bb 258>;

<bb 258>:
  D.43592_761 = v_engine_49->local_sdp_port;
  if (D.43592_761 == 0)
    goto <bb 259>;
  else
    goto <bb 260>;

<bb 259>:
  switch_core_media_choose_port (session_45(D), 1, 1);

<bb 260>:
  memset (&flags, 0, 156);
  D.43102_762 = flags[13];
  D.43103_763 = D.43102_762 + 1;
  flags[13] = D.43103_763;
  D.43137_764 = flags[8];
  D.43138_765 = D.43137_764 + 1;
  flags[8] = D.43138_765;
  D.43647_766 = switch_media_handle_test_media_flag (smh_46, 10);
  if (D.43647_766 == 0)
    goto <bb 261>;
  else
    goto <bb 266>;

<bb 261>:
  D.43073_767 = session_45(D)->channel;
  D.43650_768 = switch_channel_test_flag (D.43073_767, 15);
  if (D.43650_768 == 0)
    goto <bb 262>;
  else
    goto <bb 266>;

<bb 262>:
  D.43073_769 = session_45(D)->channel;
  val_770 = switch_channel_get_variable_dup (D.43073_769, "disable_rtp_auto_adjust", 1, -1);
  # DEBUG val => val_770
  if (val_770 == 0B)
    goto <bb 264>;
  else
    goto <bb 263>;

<bb 263>:
  D.43654_771 = switch_true (val_770);
  if (D.43654_771 == 0)
    goto <bb 264>;
  else
    goto <bb 266>;

<bb 264>:
  D.43073_772 = session_45(D)->channel;
  D.43655_773 = switch_channel_test_flag (D.43073_772, 106);
  if (D.43655_773 == 0)
    goto <bb 265>;
  else
    goto <bb 266>;

<bb 265>:
  D.43114_774 = flags[7];
  D.43115_775 = D.43114_774 + 1;
  flags[7] = D.43115_775;

<bb 266>:
  D.43073_776 = session_45(D)->channel;
  D.43658_777 = switch_channel_test_flag (D.43073_776, 29);
  if (D.43658_777 != 0)
    goto <bb 267>;
  else
    goto <bb 268>;

<bb 267>:
  D.43270_778 = flags[19];
  D.43271_779 = D.43270_778 + 1;
  flags[19] = D.43271_779;

<bb 268>:
  switch_core_media_set_video_codec (session_45(D), 0);
  flags[3] = 0;
  flags[0] = 0;
  D.43661_780 = flags[30];
  D.43662_781 = D.43661_780 + 1;
  flags[30] = D.43662_781;
  D.43184_782 = a_engine_48->local_sdp_ip;
  D.43592_783 = v_engine_49->local_sdp_port;
  D.43561_784 = v_engine_49->cur_payload_map;
  D.43578_785 = D.43561_784->remote_sdp_ip;
  D.43561_786 = v_engine_49->cur_payload_map;
  D.43565_787 = D.43561_786->remote_sdp_port;
  D.43561_788 = v_engine_49->cur_payload_map;
  D.43594_789 = D.43561_788->agreed_pt;
  D.43663_790 = switch_core_session_get_pool (session_45(D));
  D.43664_791 = switch_rtp_new (D.43184_782, D.43592_783, D.43578_785, D.43565_787, D.43594_789, 1, 90000, &flags, 0B, &err, D.43663_790);
  v_engine_49->rtp_session = D.43664_791;
  D.43073_792 = session_45(D)->channel;
  D.43666_793 = switch_channel_test_flag (D.43073_792, 29);
  if (D.43666_793 != 0)
    goto <bb 269>;
  else
    goto <bb 270>;

<bb 269>:
  iftmp.61_794 = "PROXY ";
  goto <bb 271>;

<bb 270>:
  iftmp.61_795 = "";

<bb 271>:
  # iftmp.61_35 = PHI <iftmp.61_794(269), iftmp.61_795(270)>
  D.43073_796 = session_45(D)->channel;
  D.43670_797 = switch_channel_get_name (D.43073_796);
  D.43171_798 = a_engine_48->cur_payload_map;
  D.43172_799 = D.43171_798->remote_sdp_ip;
  D.43592_800 = v_engine_49->local_sdp_port;
  D.43593_801 = (int) D.43592_800;
  D.43561_802 = v_engine_49->cur_payload_map;
  D.43578_803 = D.43561_802->remote_sdp_ip;
  D.43561_804 = v_engine_49->cur_payload_map;
  D.43565_805 = D.43561_804->remote_sdp_port;
  D.43584_806 = (int) D.43565_805;
  D.43561_807 = v_engine_49->cur_payload_map;
  D.43594_808 = D.43561_807->agreed_pt;
  D.43595_809 = (int) D.43594_808;
  D.43096_810 = v_engine_49->rtp_session;
  D.43672_811 = switch_rtp_ready (D.43096_810);
  if (D.43672_811 == 0)
    goto <bb 272>;
  else
    goto <bb 273>;

<bb 272>:
  iftmp.62_812 = err;
  goto <bb 274>;

<bb 273>:
  iftmp.62_813 = "SUCCESS";

<bb 274>:
  # iftmp.62_36 = PHI <iftmp.62_812(272), iftmp.62_813(273)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5391, session_45(D), 7, "%sVIDEO RTP [%s] %s:%d->%s:%d codec: %u ms: %d [%s]\n", iftmp.61_35, D.43670_797, D.43172_799, D.43593_801, D.43578_803, D.43584_806, D.43595_809, 0, iftmp.62_36);
  D.43096_814 = v_engine_49->rtp_session;
  D.43676_815 = switch_rtp_ready (D.43096_814);
  if (D.43676_815 != 0)
    goto <bb 275>;
  else
    goto <bb 326>;

<bb 275>:
  D.43679_816 = v_engine_49->fir;
  if (D.43679_816 != 0)
    goto <bb 276>;
  else
    goto <bb 277>;

<bb 276>:
  D.43096_817 = v_engine_49->rtp_session;
  switch_rtp_set_flag (D.43096_817, 36);

<bb 277>:
  D.43682_818 = v_engine_49->pli;
  if (D.43682_818 != 0)
    goto <bb 278>;
  else
    goto <bb 279>;

<bb 278>:
  D.43096_819 = v_engine_49->rtp_session;
  switch_rtp_set_flag (D.43096_819, 37);

<bb 279>:
  D.43096_820 = v_engine_49->rtp_session;
  D.43685_821 = &v_engine_49->payload_map;
  switch_rtp_set_payload_map (D.43096_820, D.43685_821);
  start_video_thread (session_45(D));
  D.43073_822 = session_45(D)->channel;
  switch_channel_set_flag_value (D.43073_822, 23, 1);
  D.43073_823 = session_45(D)->channel;
  ssrc_824 = switch_channel_get_variable_dup (D.43073_823, "rtp_use_video_ssrc", 1, -1);
  # DEBUG ssrc => ssrc_824
  if (ssrc_824 != 0B)
    goto <bb 280>;
  else
    goto <bb 281>;

<bb 280>:
  ssrc_ul_825 = strtoul (ssrc_824, 0B, 10);
  # DEBUG ssrc_ul => ssrc_ul_825
  D.43096_826 = v_engine_49->rtp_session;
  switch_rtp_set_ssrc (D.43096_826, ssrc_ul_825);
  v_engine_49->ssrc = ssrc_ul_825;
  goto <bb 282>;

<bb 281>:
  D.43096_827 = v_engine_49->rtp_session;
  D.43689_828 = v_engine_49->ssrc;
  switch_rtp_set_ssrc (D.43096_827, D.43689_828);

<bb 282>:
  D.43690_829 = v_engine_49->remote_ssrc;
  if (D.43690_829 != 0)
    goto <bb 283>;
  else
    goto <bb 284>;

<bb 283>:
  D.43096_830 = v_engine_49->rtp_session;
  D.43690_831 = v_engine_49->remote_ssrc;
  switch_rtp_set_remote_ssrc (D.43096_830, D.43690_831);

<bb 284>:
  D.43693_832 = v_engine_49->ice_in.chosen[0];
  D.43694_833 = v_engine_49->ice_in.cands[D.43693_832][0].ready;
  if (D.43694_833 != 0)
    goto <bb 285>;
  else
    goto <bb 289>;

<bb 285>:
  gen_ice (session_45(D), 1, 0B, 0);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5433, session_45(D), 6, "Activating Video ICE\n");
  D.43096_834 = v_engine_49->rtp_session;
  D.43697_835 = v_engine_49->ice_in.ufrag;
  D.43698_836 = v_engine_49->ice_out.ufrag;
  D.43699_837 = v_engine_49->ice_out.pwd;
  D.43700_838 = v_engine_49->ice_in.pwd;
  D.43702_839 = switch_ice_direction (session_45(D));
  if (D.43702_839 == 1)
    goto <bb 286>;
  else
    goto <bb 287>;

<bb 286>:
  iftmp.63_840 = 2;
  goto <bb 288>;

<bb 287>:
  iftmp.63_841 = 6;

<bb 288>:
  # iftmp.63_37 = PHI <iftmp.63_840(286), iftmp.63_841(287)>
  D.43706_842 = &v_engine_49->ice_in;
  switch_rtp_activate_ice (D.43096_834, D.43697_835, D.43698_836, D.43699_837, D.43700_838, 0, iftmp.63_37, D.43706_842);

<bb 289>:
  D.43073_843 = session_45(D)->channel;
  val_844 = switch_channel_get_variable_dup (D.43073_843, "rtcp_video_interval_msec", 1, -1);
  # DEBUG val => val_844
  if (val_844 != 0B)
    goto <bb 291>;
  else
    goto <bb 290>;

<bb 290>:
  D.43099_845 = smh_46->mparams;
  val_846 = D.43099_845->rtcp_video_interval_msec;
  # DEBUG val => val_846
  if (val_846 != 0B)
    goto <bb 291>;
  else
    goto <bb 307>;

<bb 291>:
  # val_3 = PHI <val_844(289), val_846(290)>
  # DEBUG val => val_3
  D.43073_847 = session_45(D)->channel;
  rport_848 = switch_channel_get_variable_dup (D.43073_847, "rtp_remote_video_rtcp_port", 1, -1);
  # DEBUG rport => rport_848
  remote_port_849 = v_engine_49->remote_rtcp_port;
  # DEBUG remote_port => remote_port_849
  if (rport_848 != 0B)
    goto <bb 292>;
  else
    goto <bb 293>;

<bb 292>:
  # DEBUG __nptr => rport_848
  D.48117_1349 = strtol (rport_848, 0B, 10);
  D.48116_1378 = D.48117_1349;
  D.43712_850 = D.48116_1378;
  remote_port_851 = (switch_port_t) D.43712_850;
  # DEBUG remote_port => remote_port_851

<bb 293>:
  # remote_port_25 = PHI <remote_port_849(291), remote_port_851(292)>
  # DEBUG remote_port => remote_port_25
  D.43713_852 = strcasecmp (val_3, "passthru");
  if (D.43713_852 == 0)
    goto <bb 294>;
  else
    goto <bb 295>;

<bb 294>:
  D.43716_853 = (int) remote_port_25;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5462, session_45(D), 6, "Activating VIDEO RTCP PASSTHRU PORT %d\n", D.43716_853);
  D.43096_854 = v_engine_49->rtp_session;
  D.43717_855 = v_engine_49->rtcp_mux;
  D.43718_856 = D.43717_855 > 0;
  switch_rtp_activate_rtcp (D.43096_854, -1, remote_port_25, D.43718_856);
  goto <bb 298>;

<bb 295>:
  # DEBUG __nptr => val_3
  D.48120_1350 = strtol (val_3, 0B, 10);
  D.48119_1380 = D.48120_1350;
  interval_857 = D.48119_1380;
  # DEBUG interval => NULL
  interval.64_858 = (unsigned int) interval_857;
  D.43721_859 = interval.64_858 + 4294967196;
  if (D.43721_859 > 499900)
    goto <bb 296>;
  else
    goto <bb 297>;

<bb 296>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5467, session_45(D), 3, "Invalid rtcp interval spec [%d] must be between 100 and 500000\n", interval_857);

<bb 297>:
  interval_860 = 10000;
  # DEBUG interval => interval_860
  D.43716_861 = (int) remote_port_25;
  D.43717_862 = v_engine_49->rtcp_mux;
  D.43724_863 = (int) D.43717_862;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5471, session_45(D), 6, "Activating VIDEO RTCP PORT %d mux %d\n", D.43716_861, D.43724_863);
  D.43096_864 = v_engine_49->rtp_session;
  D.43717_865 = v_engine_49->rtcp_mux;
  D.43718_866 = D.43717_865 > 0;
  switch_rtp_activate_rtcp (D.43096_864, interval_860, remote_port_25, D.43718_866);

<bb 298>:
  D.43725_867 = v_engine_49->ice_in.chosen[1];
  D.43726_868 = v_engine_49->ice_in.cands[D.43725_867][1].ready;
  if (D.43726_868 != 0)
    goto <bb 299>;
  else
    goto <bb 307>;

<bb 299>:
  D.43717_869 = v_engine_49->rtcp_mux;
  if (D.43717_869 > 0)
    goto <bb 300>;
  else
    goto <bb 303>;

<bb 300>:
  D.43725_870 = v_engine_49->ice_in.chosen[1];
  D.43732_871 = v_engine_49->ice_in.cands[D.43725_870][1].con_addr;
  D.43693_872 = v_engine_49->ice_in.chosen[0];
  D.43733_873 = v_engine_49->ice_in.cands[D.43693_872][0].con_addr;
  D.39417_874 = __builtin_strcmp (D.43732_871, D.43733_873);
  if (D.39417_874 == 0)
    goto <bb 301>;
  else
    goto <bb 303>;

<bb 301>:
  D.43725_875 = v_engine_49->ice_in.chosen[1];
  D.43735_876 = v_engine_49->ice_in.cands[D.43725_875][1].con_port;
  D.43693_877 = v_engine_49->ice_in.chosen[0];
  D.43736_878 = v_engine_49->ice_in.cands[D.43693_877][0].con_port;
  if (D.43735_876 == D.43736_878)
    goto <bb 302>;
  else
    goto <bb 303>;

<bb 302>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5481, session_45(D), 6, "Skipping VIDEO RTCP ICE (Same as VIDEO RTP)\n");
  goto <bb 307>;

<bb 303>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5484, session_45(D), 6, "Activating VIDEO RTCP ICE\n");
  D.43096_879 = v_engine_49->rtp_session;
  D.43697_880 = v_engine_49->ice_in.ufrag;
  D.43698_881 = v_engine_49->ice_out.ufrag;
  D.43699_882 = v_engine_49->ice_out.pwd;
  D.43700_883 = v_engine_49->ice_in.pwd;
  D.43739_884 = switch_ice_direction (session_45(D));
  if (D.43739_884 == 1)
    goto <bb 304>;
  else
    goto <bb 305>;

<bb 304>:
  iftmp.65_885 = 2;
  goto <bb 306>;

<bb 305>:
  iftmp.65_886 = 6;

<bb 306>:
  # iftmp.65_38 = PHI <iftmp.65_885(304), iftmp.65_886(305)>
  D.43706_887 = &v_engine_49->ice_in;
  switch_rtp_activate_ice (D.43096_879, D.43697_880, D.43698_881, D.43699_882, D.43700_883, 1, iftmp.65_38, D.43706_887);

<bb 307>:
  D.43743_888 = &v_engine_49->local_dtls_fingerprint.str;
  # DEBUG s => D.43743_888
  if (D.43743_888 == 0B)
    goto <bb 310>;
  else
    goto <bb 308>;

<bb 308>:
  D.48123_1351 = MEM[(const char *)D.43743_888];
  if (D.48123_1351 == 0)
    goto <bb 310>;
  else
    goto <bb 309>;

<bb 309>:

<bb 310>:
  # D.48124_1352 = PHI <1(307), 1(308), 0(309)>
  D.48122_1381 = D.48124_1352;
  D.43744_889 = D.48122_1381;
  if (D.43744_889 == 0)
    goto <bb 311>;
  else
    goto <bb 322>;

<bb 311>:
  D.43747_890 = switch_rtp_has_dtls ();
  if (D.43747_890 != 0)
    goto <bb 312>;
  else
    goto <bb 322>;

<bb 312>:
  D.43429_891 = smh_46->session;
  D.43750_892 = dtls_ok (D.43429_891);
  if (D.43750_892 != 0)
    goto <bb 313>;
  else
    goto <bb 322>;

<bb 313>:
  D.43429_893 = smh_46->session;
  D.43434_894 = D.43429_893->channel;
  D.43754_895 = switch_channel_direction (D.43434_894);
  if (D.43754_895 == 0)
    goto <bb 314>;
  else
    goto <bb 315>;

<bb 314>:
  iftmp.66_896 = 1;
  goto <bb 316>;

<bb 315>:
  iftmp.66_897 = 2;

<bb 316>:
  # iftmp.66_39 = PHI <iftmp.66_896(314), iftmp.66_897(315)>
  dtype_898 = iftmp.66_39;
  # DEBUG dtype => dtype_898
  xtype_899 = 4;
  # DEBUG xtype => xtype_899
  D.43717_900 = v_engine_49->rtcp_mux;
  if (D.43717_900 > 0)
    goto <bb 317>;
  else
    goto <bb 319>;

<bb 317>:
  D.43099_901 = smh_46->mparams;
  D.43760_902 = D.43099_901->rtcp_video_interval_msec;
  if (D.43760_902 != 0B)
    goto <bb 318>;
  else
    goto <bb 319>;

<bb 318>:
  xtype_903 = xtype_899 | 8;
  # DEBUG xtype => xtype_903

<bb 319>:
  # xtype_26 = PHI <xtype_899(316), xtype_899(317), xtype_903(318)>
  # DEBUG xtype => xtype_26
  D.43096_904 = v_engine_49->rtp_session;
  D.43763_905 = &v_engine_49->local_dtls_fingerprint;
  D.43764_906 = &v_engine_49->remote_dtls_fingerprint;
  D.43765_907 = dtype_898 | xtype_26;
  switch_rtp_add_dtls (D.43096_904, D.43763_905, D.43764_906, D.43765_907);
  D.43717_908 = v_engine_49->rtcp_mux;
  if (D.43717_908 <= 0)
    goto <bb 320>;
  else
    goto <bb 322>;

<bb 320>:
  D.43099_909 = smh_46->mparams;
  D.43760_910 = D.43099_909->rtcp_video_interval_msec;
  if (D.43760_910 != 0B)
    goto <bb 321>;
  else
    goto <bb 322>;

<bb 321>:
  xtype_911 = 8;
  # DEBUG xtype => xtype_911
  D.43096_912 = v_engine_49->rtp_session;
  D.43763_913 = &v_engine_49->local_dtls_fingerprint;
  D.43764_914 = &v_engine_49->remote_dtls_fingerprint;
  D.43765_915 = dtype_898 | xtype_911;
  switch_rtp_add_dtls (D.43096_912, D.43763_913, D.43764_914, D.43765_915);

<bb 322>:
  D.43073_916 = session_45(D)->channel;
  val_917 = switch_channel_get_variable_dup (D.43073_916, "rtp_manual_video_rtp_bugs", 1, -1);
  # DEBUG val => val_917
  if (val_917 != 0B)
    goto <bb 323>;
  else
    goto <bb 324>;

<bb 323>:
  D.43772_918 = &v_engine_49->rtp_bugs;
  switch_core_media_parse_rtp_bugs (D.43772_918, val_917);

<bb 324>:
  D.43096_919 = v_engine_49->rtp_session;
  D.43773_920 = v_engine_49->rtp_bugs;
  D.43099_921 = smh_46->mparams;
  D.43774_922 = D.43099_921->manual_video_rtp_bugs;
  D.43775_923 = D.43773_920 | D.43774_922;
  switch_rtp_intentional_bugs (D.43096_919, D.43775_923);
  D.43073_924 = session_45(D)->channel;
  D.43561_925 = v_engine_49->cur_payload_map;
  D.43594_926 = D.43561_925->agreed_pt;
  D.43595_927 = (int) D.43594_926;
  switch_channel_set_variable_printf (D.43073_924, "rtp_use_video_pt", "%d", D.43595_927);
  D.43096_928 = v_engine_49->rtp_session;
  D.43776_929 = switch_rtp_get_ssrc (D.43096_928);
  v_engine_49->ssrc = D.43776_929;
  D.43073_930 = session_45(D)->channel;
  D.43689_931 = v_engine_49->ssrc;
  switch_channel_set_variable_printf (D.43073_930, "rtp_use_video_ssrc", "%u", D.43689_931);
  switch_core_session_apply_crypto (session_45(D), 1);
  D.43073_932 = session_45(D)->channel;
  D.43777_933 = switch_channel_test_flag (D.43073_932, 74);
  if (D.43777_933 != 0)
    goto <bb 325>;
  else
    goto <bb 334> (video_up);

<bb 325>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5542, session_45(D), 7, "Activating video UDPTL mode\n");
  D.43096_934 = v_engine_49->rtp_session;
  switch_rtp_udptl_mode (D.43096_934);
  goto <bb 334> (video_up);

<bb 326>:
  err.45_935 = err;
  if (err.45_935 != 0B)
    goto <bb 327>;
  else
    goto <bb 328>;

<bb 327>:
  iftmp.67_936 = err;
  goto <bb 329>;

<bb 328>:
  iftmp.67_937 = "";

<bb 329>:
  # iftmp.67_40 = PHI <iftmp.67_936(327), iftmp.67_937(328)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5547, session_45(D), 3, "VIDEO RTP REPORTS ERROR: [%s]\n", iftmp.67_40);
  D.43073_938 = session_45(D)->channel;
  switch_channel_perform_hangup (D.43073_938, "src/switch_core_media.c", &__func__, 5548, 27);
  goto <bb 337> (end);

<bb 330>:
  err.45_625 = err;
  if (err.45_625 != 0B)
    goto <bb 331>;
  else
    goto <bb 332>;

<bb 331>:
  iftmp.68_626 = err;
  goto <bb 333>;

<bb 332>:
  iftmp.68_627 = "";

<bb 333>:
  # iftmp.68_41 = PHI <iftmp.68_626(331), iftmp.68_627(332)>
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 5554, session_45(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", iftmp.68_41);
  D.43073_628 = session_45(D)->channel;
  switch_channel_perform_hangup (D.43073_628, "src/switch_core_media.c", &__func__, 5555, 27);
  status_629 = 1;
  # DEBUG status => status_629
  goto <bb 337> (end);

video_up:
  D.43262_939 = session_45(D) != 0B;
  D.43790_940 = v_engine_49 != 0B;
  D.43791_941 = D.43262_939 && D.43790_940;
  if (D.43791_941 != 0)
    goto <bb 335>;
  else
    goto <bb 336>;

<bb 335>:
  check_dtls_reinvite (session_45(D), v_engine_49);

<bb 336>:
  status_942 = 0;
  # DEBUG status => status_942

  # status_5 = PHI <status_61(14), status_70(19), status_73(20), status_4(329), status_629(333), status_942(336)>
end:
  # DEBUG status => status_5
  D.43073_943 = session_45(D)->channel;
  switch_channel_clear_flag (D.43073_943, 103);
  switch_core_recovery_track (session_45(D));
  D.43070_944 = status_5;

<bb 338>:
  # D.43070_27 = PHI <D.43070_47(5), D.43070_945(8), D.43070_944(337)>
  return D.43070_27;

}



;; Function switch_core_media_check_dtmf_type (switch_core_media_check_dtmf_type)

Iterations: 0
switch_core_media_check_dtmf_type (struct switch_core_session_t * session)
{
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_check_dtmf_type";
  struct switch_media_handle_t * smh;
  const char * val;
  int D.43062;
  int D.43058;
  struct switch_core_media_params_t * D.43056;
  int D.43053;
  struct switch_channel_t * D.43050;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 5897, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 12>;
  else
    goto <bb 5>;

<bb 5>:
  D.43050_3 = session_1(D)->channel;
  val_4 = switch_channel_get_variable_dup (D.43050_3, "dtmf_type", 1, -1);
  # DEBUG val => val_4
  if (val_4 != 0B)
    goto <bb 6>;
  else
    goto <bb 12>;

<bb 6>:
  D.43053_5 = strcasecmp (val_4, "rfc2833");
  if (D.43053_5 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.43056_6 = smh_2->mparams;
  D.43056_6->dtmf_type = 0;
  goto <bb 12>;

<bb 8>:
  D.43058_7 = strcasecmp (val_4, "info");
  if (D.43058_7 == 0)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  D.43056_8 = smh_2->mparams;
  D.43056_8->dtmf_type = 1;
  goto <bb 12>;

<bb 10>:
  D.43062_9 = strcasecmp (val_4, "none");
  if (D.43062_9 == 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.43056_10 = smh_2->mparams;
  D.43056_10->dtmf_type = 2;

<bb 12>:
  return;

}



;; Function switch_core_media_sdp_map (switch_core_media_sdp_map)

Iterations: 0
switch_core_media_sdp_map (const char * r_sdp, struct switch_event_t * * fmtp, struct switch_event_t * * pt)
{
  char * br;
  char key[128];
  char buf[25];
  struct sdp_rtpmap_t * map;
  static const char __func__[26] = "switch_core_media_sdp_map";
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  struct sdp_media_t * m;
  struct switch_event_t * D.43044;
  struct switch_event_t * D.43041;
  int D.43037;
  <unnamed-unsigned:7> D.43036;
  const char * D.43031;
  const char * D.43028;
  sdp_proto_e D.43025;
  switch_status_t D.43022;
  int D.43019;
  size_t D.43018;

<bb 2>:
  parser_5 = 0B;
  # DEBUG parser => parser_5
  D.43018_7 = strlen (r_sdp_6(D));
  D.43019_8 = (int) D.43018_7;
  parser_9 = sdp_parse (0B, r_sdp_6(D), D.43019_8, 0);
  # DEBUG parser => parser_9
  if (parser_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.43022_10 = 1;
  goto <bb 23>;

<bb 4>:
  sdp_11 = sdp_session (parser_9);
  # DEBUG sdp => sdp_11
  if (sdp_11 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  sdp_parser_free (parser_9);
  D.43022_12 = 1;
  goto <bb 23>;

<bb 6>:
  switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 5930, fmtp_13(D), 62, 0B);
  switch_event_create_subclass_detailed ("src/switch_core_media.c", &__func__, 5931, pt_14(D), 62, 0B);
  m_15 = sdp_11->sdp_media;
  # DEBUG m => m_15
  goto <bb 21>;

<bb 7>:
  D.43025_16 = m_1->m_proto;
  if (D.43025_16 == 256)
    goto <bb 8>;
  else
    goto <bb 20>;

<bb 8>:
  map_17 = m_1->m_rtpmaps;
  # DEBUG map => map_17
  goto <bb 19>;

<bb 9>:
  D.43028_18 = map_2->rm_encoding;
  if (D.43028_18 != 0B)
    goto <bb 10>;
  else
    goto <bb 18>;

<bb 10>:
  buf = "";
  key = "";
  br_19 = 0B;
  # DEBUG br => br_19
  D.43031_20 = map_2->rm_fmtp;
  if (D.43031_20 != 0B)
    goto <bb 11>;
  else
    goto <bb 13>;

<bb 11>:
  D.43031_21 = map_2->rm_fmtp;
  br_22 = strstr (D.43031_21, "bitrate=");
  # DEBUG br => br_22
  if (br_22 != 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  br_23 = br_22 + 8;
  # DEBUG br => br_23

<bb 13>:
  # br_3 = PHI <br_19(10), br_22(11), br_23(12)>
  # DEBUG br => br_3
  D.43036_24 = map_2->rm_pt;
  D.43037_25 = (int) D.43036_24;
  switch_snprintf (&buf, 25, "%d", D.43037_25);
  if (br_3 != 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.43028_26 = map_2->rm_encoding;
  switch_snprintf (&key, 128, "%s:%s", D.43028_26, br_3);
  goto <bb 16>;

<bb 15>:
  D.43028_27 = map_2->rm_encoding;
  switch_snprintf (&key, 128, "%s", D.43028_27);

<bb 16>:
  D.43041_28 = *pt_14(D);
  switch_event_add_header_string (D.43041_28, 1, &key, &buf);
  D.43031_29 = map_2->rm_fmtp;
  if (D.43031_29 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.43044_30 = *fmtp_13(D);
  D.43031_31 = map_2->rm_fmtp;
  switch_event_add_header_string (D.43044_30, 1, &key, D.43031_31);

<bb 18>:
  map_32 = map_2->rm_next;
  # DEBUG map => map_32

<bb 19>:
  # map_2 = PHI <map_17(8), map_32(18)>
  # DEBUG map => map_2
  if (map_2 != 0B)
    goto <bb 9>;
  else
    goto <bb 20>;

<bb 20>:
  m_33 = m_1->m_next;
  # DEBUG m => m_33

<bb 21>:
  # m_1 = PHI <m_15(6), m_33(20)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 7>;
  else
    goto <bb 22>;

<bb 22>:
  sdp_parser_free (parser_9);
  D.43022_34 = 0;

<bb 23>:
  # D.43022_4 = PHI <D.43022_10(3), D.43022_12(5), D.43022_34(22)>
  return D.43022_4;

}



;; Function switch_core_media_set_local_sdp (switch_core_media_set_local_sdp)

Iterations: 0
switch_core_media_set_local_sdp (struct switch_core_session_t * session, const char * sdp_str, switch_bool_t dup)
{
  static const char __func__[32] = "switch_core_media_set_local_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_set_local_sdp";
  struct switch_media_handle_t * smh;
  char * D.43014;
  struct switch_channel_t * D.43013;
  char * iftmp.44;
  struct switch_core_media_params_t * D.43008;
  struct switch_mutex_t * D.43005;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 5978, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 12>;
  else
    goto <bb 5>;

<bb 5>:
  D.43005_4 = smh_3->sdp_mutex;
  if (D.43005_4 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.43005_5 = smh_3->sdp_mutex;
  switch_mutex_lock (D.43005_5);

<bb 7>:
  D.43008_6 = smh_3->mparams;
  if (dup_7(D) != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  iftmp.44_9 = switch_core_perform_session_strdup (session_2(D), sdp_str_8(D), "src/switch_core_media.c", &__func__, 5985);
  goto <bb 10>;

<bb 9>:
  iftmp.44_10 = sdp_str_8(D);

<bb 10>:
  # iftmp.44_1 = PHI <iftmp.44_9(8), iftmp.44_10(9)>
  D.43008_6->local_sdp_str = iftmp.44_1;
  D.43013_11 = session_2(D)->channel;
  D.43008_12 = smh_3->mparams;
  D.43014_13 = D.43008_12->local_sdp_str;
  switch_channel_set_variable_var_check (D.43013_11, "rtp_local_sdp_str", D.43014_13, 1);
  D.43005_14 = smh_3->sdp_mutex;
  if (D.43005_14 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.43005_15 = smh_3->sdp_mutex;
  switch_mutex_unlock (D.43005_15);

<bb 12>:
  return;

}



;; Function switch_core_media_gen_local_sdp (switch_core_media_gen_local_sdp)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_gen_local_sdp.
Processing frequency atoi
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate switch_core_media_set_local_sdp.
Not inlining: code size would grow by 39.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate generate_local_fingerprint.
Not inlining: code size would grow by 11.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate get_channels.
Not inlining: code size would grow by 12.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_set_video_codec.
Not inlining: code size would grow by 268.
Considering inline candidate get_media_profile_name.
Not inlining: code size would grow by 15.
Considering inline candidate gen_ice.
Not inlining: code size would grow by 121.
Considering inline candidate switch_media_handle_set_media_flag.
Considering inline candidate switch_core_media_choose_port.
Not inlining: code size would grow by 187.
Considering inline candidate generate_m.isra.4.
Not inlining: code size would grow by 893.
Considering inline candidate generate_m.isra.4.
Not inlining: code size would grow by 893.
Considering inline candidate generate_m.isra.4.
Not inlining: code size would grow by 893.
Considering inline candidate generate_m.isra.4.
Not inlining: code size would grow by 893.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate get_channels.
Not inlining: code size would grow by 12.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate get_media_profile_name.
Not inlining: code size would grow by 15.
Considering inline candidate gen_ice.
Not inlining: code size would grow by 121.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_gen_local_sdp.
Processing frequency _zstr
  Called by switch_core_media_gen_local_sdp that is normal or hot
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_core_media_add_payload_map.
Not inlining: code size would grow by 161.
Considering inline candidate switch_core_session_get_payload_code.
Not inlining: code size would grow by 44.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_check_dtmf_type.
Not inlining: code size would grow by 40.
Considering inline candidate switch_core_session_check_outgoing_crypto.
Not inlining: code size would grow by 38.
Considering inline candidate switch_core_session_parse_crypto_prefs.
Not inlining: code size would grow by 164.
Considering inline candidate generate_local_fingerprint.
Not inlining: code size would grow by 11.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_core_media_get_zrtp_hash.
Considering inline candidate switch_core_media_get_zrtp_hash.
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining atoi to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Inlining _zstr to switch_core_media_gen_local_sdp with frequency 1000
Considering inline candidate switch_core_media_set_local_sdp.
Not inlining: code size would grow by 39.
Considering inline candidate generate_local_fingerprint.
Not inlining: code size would grow by 11.
Considering inline candidate get_channels.
Not inlining: code size would grow by 12.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_set_video_codec.
Not inlining: code size would grow by 268.
Considering inline candidate get_media_profile_name.
Not inlining: code size would grow by 15.
Considering inline candidate gen_ice.
Not inlining: code size would grow by 121.
Considering inline candidate switch_media_handle_set_media_flag.
Considering inline candidate switch_core_media_choose_port.
Not inlining: code size would grow by 187.
Considering inline candidate generate_m.isra.4.
Not inlining: code size would grow by 893.
Considering inline candidate generate_m.isra.4.
Not inlining: code size would grow by 893.
Considering inline candidate generate_m.isra.4.
Not inlining: code size would grow by 893.
Considering inline candidate generate_m.isra.4.
Not inlining: code size would grow by 893.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate get_channels.
Not inlining: code size would grow by 12.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate get_media_profile_name.
Not inlining: code size would grow by 15.
Considering inline candidate gen_ice.
Not inlining: code size would grow by 121.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_core_media_add_payload_map.
Not inlining: code size would grow by 161.
Considering inline candidate switch_core_session_get_payload_code.
Not inlining: code size would grow by 44.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Considering inline candidate switch_core_media_check_dtmf_type.
Not inlining: code size would grow by 40.
Considering inline candidate switch_core_session_check_outgoing_crypto.
Not inlining: code size would grow by 38.
Considering inline candidate switch_core_session_parse_crypto_prefs.
Not inlining: code size would grow by 164.
Considering inline candidate generate_local_fingerprint.
Not inlining: code size would grow by 11.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate dtls_ok.
Not inlining: code size would grow by 1.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_core_media_get_zrtp_hash.
Considering inline candidate switch_core_media_get_zrtp_hash.
Iterations: 1
Removing basic block 68
;; basic block 68, loop depth 0, count 0
;; prev block 67, next block 409
;; pred:      
;; succ:       409 [100.0%]  (fallthru,exec)
<bb 68>:


Removing basic block 85
;; basic block 85, loop depth 0, count 0
;; prev block 84, next block 414
;; pred:      
;; succ:       414 [100.0%]  (fallthru,exec)
<bb 85>:


Merging blocks 98 and 419
Merging blocks 169 and 424
Merging blocks 171 and 429
Merging blocks 178 and 434
Merging blocks 179 and 439
Merging blocks 185 and 444
Merging blocks 186 and 449
Merging blocks 192 and 454
Merging blocks 328 and 459
Merging blocks 334 and 464
Merging blocks 336 and 469
Merging blocks 338 and 474
Merging blocks 347 and 479
Removing basic block 363
;; basic block 363, loop depth 0, count 0
;; prev block 362, next block 484
;; pred:      
;; succ:       484 [100.0%]  (fallthru,exec)
<bb 363>:


Merging blocks 371 and 486
Merging blocks 372 and 491
Merging blocks 378 and 496
Merging blocks 379 and 501
Merging blocks 389 and 506
Merging blocks 412 and 408
Merging blocks 417 and 413
Merging blocks 422 and 418
Merging blocks 427 and 423
Merging blocks 432 and 428
Merging blocks 437 and 433
Merging blocks 442 and 438
Merging blocks 447 and 443
Merging blocks 452 and 448
Merging blocks 457 and 453
Merging blocks 462 and 458
Merging blocks 467 and 463
Merging blocks 472 and 468
Merging blocks 477 and 473
Merging blocks 482 and 478
Merging blocks 484 and 483
Merging blocks 489 and 485
Merging blocks 494 and 490
Merging blocks 499 and 495
Merging blocks 504 and 500
Merging blocks 509 and 505


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement D.41512_73 = session_72(D)->channel;

Updating SSA information for statement pass_fmtp_74 = switch_channel_get_variable_dup (D.41512_73, "rtp_video_fmtp", 1, -1);

Updating SSA information for statement D.41512_75 = session_72(D)->channel;

Updating SSA information for statement ov_fmtp_76 = switch_channel_get_variable_dup (D.41512_75, "rtp_force_video_fmtp", 1, -1);

Updating SSA information for statement D.41512_77 = session_72(D)->channel;

Updating SSA information for statement append_audio_78 = switch_channel_get_variable_dup (D.41512_77, "rtp_append_audio_sdp", 1, -1);

Updating SSA information for statement D.41512_79 = session_72(D)->channel;

Updating SSA information for statement append_video_80 = switch_channel_get_variable_dup (D.41512_79, "rtp_append_video_sdp", 1, -1);

Updating SSA information for statement srbuf = "";

Updating SSA information for statement D.41512_81 = session_72(D)->channel;

Updating SSA information for statement fmtp_out_var_82 = switch_channel_get_variable_dup (D.41512_81, "rtp_force_audio_fmtp", 1, -1);

Updating SSA information for statement map = 0B;

Updating SSA information for statement ptmap = 0B;

Updating SSA information for statement local_sdp_audio_zrtp_hash_83 = switch_core_media_get_zrtp_hash (session_72(D), 0, 1);

Updating SSA information for statement local_sdp_video_zrtp_hash_84 = switch_core_media_get_zrtp_hash (session_72(D), 1, 1);

Updating SSA information for statement D.41512_87 = session_72(D)->channel;

Updating SSA information for statement D.41513_88 = switch_channel_direction (D.41512_87);



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 6025, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_90 = session_72(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.41512_93 = session_72(D)->channel;

Updating SSA information for statement D.41518_94 = switch_channel_get_variable_dup (D.41512_93, "rtcp_mux", 1, -1);

Updating SSA information for statement D.41519_95 = switch_true (D.41518_94);



Registering new PHI nodes in block #6

Updating SSA information for statement a_engine_91->rtcp_mux = 1;

Updating SSA information for statement v_engine_92->rtcp_mux = 1;



Registering new PHI nodes in block #7

Updating SSA information for statement D.41522_96 = smh_90->mparams;

Updating SSA information for statement D.41523_97 = D.41522_96->rtcp_audio_interval_msec;



Registering new PHI nodes in block #8

Updating SSA information for statement D.41522_98 = smh_90->mparams;

Updating SSA information for statement D.41512_99 = session_72(D)->channel;

Updating SSA information for statement D.41526_100 = switch_channel_get_variable_dup (D.41512_99, "rtcp_audio_interval_msec", 1, -1);

Updating SSA information for statement D.41522_98->rtcp_audio_interval_msec = D.41526_100;



Registering new PHI nodes in block #9

Updating SSA information for statement D.41522_101 = smh_90->mparams;

Updating SSA information for statement D.41527_102 = D.41522_101->rtcp_video_interval_msec;



Registering new PHI nodes in block #10

Updating SSA information for statement D.41522_103 = smh_90->mparams;

Updating SSA information for statement D.41512_104 = session_72(D)->channel;

Updating SSA information for statement D.41530_105 = switch_channel_get_variable_dup (D.41512_104, "rtcp_video_interval_msec", 1, -1);

Updating SSA information for statement D.41522_103->rtcp_video_interval_msec = D.41530_105;



Registering new PHI nodes in block #11

Updating SSA information for statement D.41531_106 = dtls_ok (session_72(D));



Registering new PHI nodes in block #12

Updating SSA information for statement D.41534_107 = smh_90->session;

Updating SSA information for statement D.41535_108 = D.41534_107->channel;

Updating SSA information for statement tmp_109 = switch_channel_get_variable_dup (D.41535_108, "webrtc_enable_dtls", 1, -1);



Registering new PHI nodes in block #13

Updating SSA information for statement D.41538_110 = switch_false (tmp_109);



Registering new PHI nodes in block #14

Updating SSA information for statement D.41534_111 = smh_90->session;

Updating SSA information for statement D.41535_112 = D.41534_111->channel;

Updating SSA information for statement switch_channel_clear_flag (D.41535_112, 111);

Updating SSA information for statement D.41534_113 = smh_90->session;

Updating SSA information for statement D.41535_114 = D.41534_113->channel;

Updating SSA information for statement switch_channel_clear_flag (D.41535_114, 109);



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16

Updating SSA information for statement D.41512_115 = session_72(D)->channel;

Updating SSA information for statement D.41544_116 = switch_channel_test_flag (D.41512_115, 84);



Registering new PHI nodes in block #17

Updating SSA information for statement D.41512_117 = session_72(D)->channel;

Updating SSA information for statement D.41546_118 = switch_channel_test_flag (D.41512_117, 112);



Registering new PHI nodes in block #18

Updating SSA information for statement D.41512_119 = session_72(D)->channel;

Updating SSA information for statement D.41547_120 = switch_channel_test_flag (D.41512_119, 106);



Registering new PHI nodes in block #19

Updating SSA information for statement D.41512_121 = session_72(D)->channel;

Updating SSA information for statement D.41550_122 = switch_channel_get_variable_dup (D.41512_121, "media_webrtc", 1, -1);

Updating SSA information for statement D.41551_123 = switch_true (D.41550_122);



Registering new PHI nodes in block #20

Updating SSA information for statement D.41512_124 = session_72(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41512_124, 106, 1);

Updating SSA information for statement D.41512_125 = session_72(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41512_125, 108, 1);

Updating SSA information for statement D.41522_126 = smh_90->mparams;

Updating SSA information for statement D.41522_126->rtcp_audio_interval_msec = "5000";

Updating SSA information for statement D.41522_127 = smh_90->mparams;

Updating SSA information for statement D.41522_127->rtcp_video_interval_msec = "5000";



Registering new PHI nodes in block #21

Updating SSA information for statement D.41554_128 = switch_rtp_has_dtls ();



Registering new PHI nodes in block #22

Updating SSA information for statement D.41557_129 = dtls_ok (session_72(D));



Registering new PHI nodes in block #23

Updating SSA information for statement D.41512_130 = session_72(D)->channel;

Updating SSA information for statement D.41562_131 = switch_channel_test_flag (D.41512_130, 106);



Registering new PHI nodes in block #24

Updating SSA information for statement D.41534_132 = smh_90->session;

Updating SSA information for statement D.41535_133 = D.41534_132->channel;

Updating SSA information for statement D.41564_134 = switch_channel_get_variable_dup (D.41535_133, "rtp_use_dtls", 1, -1);

Updating SSA information for statement D.41565_135 = switch_true (D.41564_134);



Registering new PHI nodes in block #25

Updating SSA information for statement D.41534_136 = smh_90->session;

Updating SSA information for statement D.41535_137 = D.41534_136->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41535_137, 109, 1);

Updating SSA information for statement D.41534_138 = smh_90->session;

Updating SSA information for statement D.41535_139 = D.41534_138->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41535_139, 92, 1);

Updating SSA information for statement generate_local_fingerprint (smh_90, 0);



Registering new PHI nodes in block #26

Updating SSA information for statement switch_core_session_parse_crypto_prefs (session_72(D));

Updating SSA information for statement switch_core_session_check_outgoing_crypto (session_72(D));



Registering new PHI nodes in block #27

Updating SSA information for statement D.41566_140 = a_engine_91->cur_payload_map;

Updating SSA information for statement fmtp_out_141 = D.41566_140->fmtp_out;

Updating SSA information for statement D.41522_142 = smh_90->mparams;

Updating SSA information for statement username_143 = D.41522_142->sdp_username;

Updating SSA information for statement buf_144 = calloc (1, 65536);



Registering new PHI nodes in block #28

Updating SSA information for statement __assert_fail ("(buf = calloc(1, (65536)))", "src/switch_core_media.c", 6078, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #29

Updating SSA information for statement switch_core_media_check_dtmf_type (session_72(D));

Updating SSA information for statement D.41572_145 = switch_media_handle_test_media_flag (smh_90, 9);



Registering new PHI nodes in block #30

Updating SSA information for statement D.41512_146 = session_72(D)->channel;

Updating SSA information for statement val_147 = switch_channel_get_variable_dup (D.41512_146, "supress_cng", 1, -1);



Registering new PHI nodes in block #31

Updating SSA information for statement D.41575_148 = switch_true (val_147);



Registering new PHI nodes in block #32

Updating SSA information for statement D.41512_149 = session_72(D)->channel;

Updating SSA information for statement val_150 = switch_channel_get_variable_dup (D.41512_149, "suppress_cng", 1, -1);



Registering new PHI nodes in block #33

Updating SSA information for statement D.41577_151 = switch_true (val_150);



Registering new PHI nodes in block #34

Updating SSA information for statement D.41522_153 = smh_90->mparams;

Updating SSA information for statement D.41522_153->cng_pt = 0;



Registering new PHI nodes in block #35

Updating SSA information for statement D.41578_154 = smh_90->payload_space;



Registering new PHI nodes in block #36

Updating SSA information for statement D.41512_155 = session_72(D)->channel;

Updating SSA information for statement D.41581_156 = switch_channel_test_flag (D.41512_155, 106);



Registering new PHI nodes in block #37

Updating SSA information for statement smh_90->payload_space = 102;



Registering new PHI nodes in block #38

Updating SSA information for statement smh_90->payload_space = 98;



Registering new PHI nodes in block #39



Registering new PHI nodes in block #41

Updating SSA information for statement D.41522_158 = smh_90->mparams;

Updating SSA information for statement D.41587_159 = D.41522_158->num_codecs;



Registering new PHI nodes in block #40

Updating SSA information for statement D.41585_160 = smh_90->codecs[i_36];

Updating SSA information for statement D.41586_161 = D.41585_160->ianacode;

Updating SSA information for statement smh_90->ianacodes[i_36] = D.41586_161;



Registering new PHI nodes in block #42



Registering new PHI nodes in block #43

Updating SSA information for statement orig_session = 0B;

Updating SSA information for statement switch_core_session_perform_get_partner (session_72(D), &orig_session, "src/switch_core_media.c", &__func__, 6108);



Registering new PHI nodes in block #59

Updating SSA information for statement D.41522_165 = smh_90->mparams;

Updating SSA information for statement D.41587_166 = D.41522_165->num_codecs;



Registering new PHI nodes in block #44

Updating SSA information for statement imp_167 = smh_90->codecs[i_37];

Updating SSA information for statement orig_pt = 0;

Updating SSA information for statement orig_fmtp = 0B;

Updating SSA information for statement D.41590_168 = smh_90->ianacodes[i_37];



Registering new PHI nodes in block #45

Updating SSA information for statement D.41522_169 = smh_90->mparams;

Updating SSA information for statement D.41593_170 = D.41522_169->dtmf_type;



Registering new PHI nodes in block #46

Updating SSA information for statement D.41522_171 = smh_90->mparams;

Updating SSA information for statement D.41596_172 = D.41522_171->te;



Registering new PHI nodes in block #47

Updating SSA information for statement D.41522_173 = smh_90->mparams;

Updating SSA information for statement D.41596_174 = D.41522_173->te;

Updating SSA information for statement D.41578_176 = smh_90->payload_space;



Registering new PHI nodes in block #48

Updating SSA information for statement D.41578_177 = smh_90->payload_space;

Updating SSA information for statement smh_90->payload_space = D.41602_178;



Registering new PHI nodes in block #49

Updating SSA information for statement D.41603_179 = switch_media_handle_test_media_flag (smh_90, 9);



Registering new PHI nodes in block #50

Updating SSA information for statement D.41522_180 = smh_90->mparams;

Updating SSA information for statement D.41606_181 = D.41522_180->cng_pt;



Registering new PHI nodes in block #51

Updating SSA information for statement D.41522_185 = smh_90->mparams;

Updating SSA information for statement D.41606_186 = D.41522_185->cng_pt;

Updating SSA information for statement D.41578_188 = smh_90->payload_space;



Registering new PHI nodes in block #52

Updating SSA information for statement D.41578_189 = smh_90->payload_space;

Updating SSA information for statement smh_90->payload_space = D.41602_190;



Registering new PHI nodes in block #53

Updating SSA information for statement orig_session.25_191 = orig_session;



Registering new PHI nodes in block #54

Updating SSA information for statement orig_session.25_192 = orig_session;

Updating SSA information for statement D.41619_193 = imp_167->codec_type;

Updating SSA information for statement D.41621_195 = imp_167->iananame;

Updating SSA information for statement D.41622_196 = switch_core_session_get_payload_code (orig_session.25_192, D.41620_194, D.41621_195, &orig_pt, 0B, &orig_fmtp);



Registering new PHI nodes in block #55

Updating SSA information for statement orig_pt.26_197 = orig_pt;

Updating SSA information for statement smh_90->ianacodes[i_37] = orig_pt.26_197;

Updating SSA information for statement orig_fmtp.27_198 = orig_fmtp;



Registering new PHI nodes in block #56

Updating SSA information for statement orig_fmtp.27_199 = orig_fmtp;

Updating SSA information for statement D.41628_200 = switch_core_perform_session_strdup (session_72(D), orig_fmtp.27_199, "src/switch_core_media.c", &__func__, 6133);

Updating SSA information for statement smh_90->fmtps[i_37] = D.41628_200;



Registering new PHI nodes in block #57

Updating SSA information for statement D.41578_201 = smh_90->payload_space;

Updating SSA information for statement smh_90->ianacodes[i_37] = D.41629_202;

Updating SSA information for statement smh_90->payload_space = D.41602_203;



Registering new PHI nodes in block #58

Updating SSA information for statement D.41619_204 = imp_167->codec_type;

Updating SSA information for statement D.41621_206 = imp_167->iananame;

Updating SSA information for statement D.41590_207 = smh_90->ianacodes[i_37];

Updating SSA information for statement D.41631_209 = imp_167->samples_per_second;

Updating SSA information for statement D.41632_210 = imp_167->microseconds_per_packet;

Updating SSA information for statement switch_core_media_add_payload_map (session_72(D), D.41620_205, D.41621_206, 0B, sdp_type_163(D), D.41630_208, D.41631_209, D.41634_212, 0);



Registering new PHI nodes in block #60

Updating SSA information for statement orig_session.25_214 = orig_session;



Registering new PHI nodes in block #61

Updating SSA information for statement orig_session.25_215 = orig_session;

Updating SSA information for statement switch_core_session_rwunlock (orig_session.25_215);



Registering new PHI nodes in block #62



Registering new PHI nodes in block #63



Registering new PHI nodes in block #64

Updating SSA information for statement D.41512_217 = session_72(D)->channel;

Updating SSA information for statement val_218 = switch_channel_get_variable_dup (D.41512_217, "verbose_sdp", 1, -1);



Registering new PHI nodes in block #65

Updating SSA information for statement D.41642_219 = switch_true (val_218);



Registering new PHI nodes in block #66

Updating SSA information for statement D.41512_220 = session_72(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41512_220, 110, 1);



Registering new PHI nodes in block #67



Registering new PHI nodes in block #68



Registering new PHI nodes in block #69

Updating SSA information for statement D.48131_1516 = *sr_226(D);



Registering new PHI nodes in block #70



Registering new PHI nodes in block #71

Updating SSA information for statement D.48130 = D.48132_1517;

Updating SSA information for statement D.41650_227 = D.48130;



Registering new PHI nodes in block #72

Updating SSA information for statement D.41512_228 = session_72(D)->channel;

Updating SSA information for statement D.41653_229 = switch_channel_test_flag (D.41512_228, 15);



Registering new PHI nodes in block #73

Updating SSA information for statement D.41512_230 = session_72(D)->channel;

Updating SSA information for statement D.41655_231 = switch_channel_test_flag (D.41512_230, 29);



Registering new PHI nodes in block #74



Registering new PHI nodes in block #75

Updating SSA information for statement free (buf_144);



Registering new PHI nodes in block #76



Registering new PHI nodes in block #77

Updating SSA information for statement ip_233 = a_engine_91->adv_sdp_ip;



Registering new PHI nodes in block #78

Updating SSA information for statement ip_234 = a_engine_91->proxy_sdp_ip;



Registering new PHI nodes in block #79



Registering new PHI nodes in block #80

Updating SSA information for statement D.41512_235 = session_72(D)->channel;

Updating SSA information for statement D.41664_236 = switch_channel_get_name (D.41512_235);

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 6182, 0B, 2, "%s NO IP!\n", D.41664_236);



Registering new PHI nodes in block #81

Updating SSA information for statement free (buf_144);



Registering new PHI nodes in block #82



Registering new PHI nodes in block #83

Updating SSA information for statement port_239 = a_engine_91->adv_sdp_port;



Registering new PHI nodes in block #84

Updating SSA information for statement port_240 = a_engine_91->proxy_sdp_port;



Registering new PHI nodes in block #85



Registering new PHI nodes in block #86

Updating SSA information for statement D.41512_241 = session_72(D)->channel;

Updating SSA information for statement D.41673_242 = switch_channel_get_name (D.41512_241);

Updating SSA information for statement switch_log_printf (0, "src/switch_core_media.c", &__func__, 6194, 0B, 2, "%s NO PORT!\n", D.41673_242);



Registering new PHI nodes in block #87

Updating SSA information for statement free (buf_144);



Registering new PHI nodes in block #88



Registering new PHI nodes in block #89

Updating SSA information for statement D.48135_1518 = *sr_226(D);



Registering new PHI nodes in block #90



Registering new PHI nodes in block #91

Updating SSA information for statement D.48134 = D.48136_1519;

Updating SSA information for statement D.41676_244 = D.48134;



Registering new PHI nodes in block #92

Updating SSA information for statement D.41512_245 = session_72(D)->channel;

Updating SSA information for statement var_val_246 = switch_channel_get_variable_dup (D.41512_245, "media_audio_mode", 1, -1);



Registering new PHI nodes in block #93



Registering new PHI nodes in block #94



Registering new PHI nodes in block #95

Updating SSA information for statement D.41682_249 = smh_90->owner_id;



Registering new PHI nodes in block #96

Updating SSA information for statement D.41685_250 = switch_epoch_time_now (0B);

Updating SSA information for statement smh_90->owner_id = D.41688_253;



Registering new PHI nodes in block #97

Updating SSA information for statement D.41689_254 = smh_90->session_id;



Registering new PHI nodes in block #98

Updating SSA information for statement D.41682_255 = smh_90->owner_id;

Updating SSA information for statement smh_90->session_id = D.41682_255;



Registering new PHI nodes in block #99

Updating SSA information for statement D.41512_256 = session_72(D)->channel;

Updating SSA information for statement D.41692_257 = switch_channel_get_variable_dup (D.41512_256, "drop_dtmf", 0, -1);

Updating SSA information for statement D.41693_258 = switch_true (D.41692_257);



Registering new PHI nodes in block #100

Updating SSA information for statement D.41512_259 = session_72(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41512_259, 102, 1);



Registering new PHI nodes in block #101

Updating SSA information for statement D.41689_260 = smh_90->session_id;

Updating SSA information for statement smh_90->session_id = D.41696_261;

Updating SSA information for statement D.41522_262 = smh_90->mparams;

Updating SSA information for statement D.41699_263 = D.41522_262->ndlb;



Registering new PHI nodes in block #102

Updating SSA information for statement D.41512_265 = session_72(D)->channel;

Updating SSA information for statement var_val_266 = switch_channel_get_variable_dup (D.41512_265, "ndlb_sendrecv_in_session", 1, -1);



Registering new PHI nodes in block #103

Updating SSA information for statement D.41703_267 = switch_true (var_val_266);



Registering new PHI nodes in block #104



Registering new PHI nodes in block #105

Updating SSA information for statement D.48139_1520 = *sr_3;



Registering new PHI nodes in block #106



Registering new PHI nodes in block #107

Updating SSA information for statement D.48138 = D.48140_1521;

Updating SSA information for statement D.41704_268 = D.48138;



Registering new PHI nodes in block #108

Updating SSA information for statement switch_snprintf (&srbuf, 128, "a=%s\n", sr_3);



Registering new PHI nodes in block #109



Registering new PHI nodes in block #110

Updating SSA information for statement D.41708_270 = __builtin_strchr (ip_1, 58);



Registering new PHI nodes in block #111



Registering new PHI nodes in block #112



Registering new PHI nodes in block #113

Updating SSA information for statement D.41682_274 = smh_90->owner_id;

Updating SSA information for statement D.41689_275 = smh_90->session_id;

Updating SSA information for statement switch_snprintf (buf_144, 65536, "v=0\no=%s %010u %010u IN %s %s\ns=%s\nc=IN %s %s\nt=0 0\n%s", username_143, D.41682_274, D.41689_275, family_273, ip_1, username_143, family_273, ip_1, &srbuf);

Updating SSA information for statement D.41534_276 = smh_90->session;

Updating SSA information for statement D.41535_277 = D.41534_276->channel;

Updating SSA information for statement D.41712_278 = switch_channel_test_flag (D.41535_277, 108);



Registering new PHI nodes in block #114

Updating SSA information for statement gen_ice (session_72(D), 0, ip_1, port_2);

Updating SSA information for statement D.41715_279 = strlen (buf_144);

Updating SSA information for statement D.41717_281 = strlen (buf_144);

Updating SSA information for statement D.41719_283 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.41716_280, D.41718_282, "a=msid-semantic: WMS %s\n", D.41719_283);



Registering new PHI nodes in block #115

Updating SSA information for statement D.41720_284 = a_engine_91->codec_negotiated;



Registering new PHI nodes in block #116

Updating SSA information for statement D.41723_285 = strlen (buf_144);

Updating SSA information for statement D.41725_287 = strlen (buf_144);

Updating SSA information for statement D.41732_290 = a_engine_91->no_crypto;



Registering new PHI nodes in block #117

Updating SSA information for statement D.41512_291 = session_72(D)->channel;

Updating SSA information for statement D.41734_292 = switch_channel_test_flag (D.41512_291, 109);



Registering new PHI nodes in block #118

Updating SSA information for statement D.41736_293 = a_engine_91->crypto_type;



Registering new PHI nodes in block #119



Registering new PHI nodes in block #120



Registering new PHI nodes in block #121

Updating SSA information for statement D.41737_296 = get_media_profile_name (session_72(D), iftmp.29_60);

Updating SSA information for statement switch_snprintf (D.41724_286, D.41726_288, "m=audio %d %s", D.41727_289, D.41737_296);

Updating SSA information for statement D.41738_297 = strlen (buf_144);

Updating SSA information for statement D.41740_299 = strlen (buf_144);

Updating SSA information for statement D.41566_301 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41742_302 = D.41566_301->pt;

Updating SSA information for statement switch_snprintf (D.41739_298, D.41741_300, " %d", D.41743_303);

Updating SSA information for statement D.41744_304 = switch_media_handle_test_media_flag (smh_90, 15);



Registering new PHI nodes in block #122

Updating SSA information for statement D.41747_305 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.41747_305);

Updating SSA information for statement pmap_306 = a_engine_91->cur_payload_map;



Registering new PHI nodes in block #126



Registering new PHI nodes in block #127

Updating SSA information for statement D.41757_307 = pmap_34->allocated;



Registering new PHI nodes in block #123

Updating SSA information for statement D.41748_308 = pmap_34->pt;

Updating SSA information for statement D.41566_309 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41742_310 = D.41566_309->pt;



Registering new PHI nodes in block #124

Updating SSA information for statement D.41751_311 = strlen (buf_144);

Updating SSA information for statement D.41753_313 = strlen (buf_144);

Updating SSA information for statement D.41748_315 = pmap_34->pt;

Updating SSA information for statement switch_snprintf (D.41752_312, D.41754_314, " %d", D.41755_316);



Registering new PHI nodes in block #125

Updating SSA information for statement pmap_317 = pmap_34->next;



Registering new PHI nodes in block #128

Updating SSA information for statement D.41747_318 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.41747_318);



Registering new PHI nodes in block #129

Updating SSA information for statement D.41522_319 = smh_90->mparams;

Updating SSA information for statement D.41593_320 = D.41522_319->dtmf_type;



Registering new PHI nodes in block #130

Updating SSA information for statement D.41761_321 = switch_media_handle_test_media_flag (smh_90, 8);



Registering new PHI nodes in block #131

Updating SSA information for statement D.41512_322 = session_72(D)->channel;

Updating SSA information for statement D.41763_323 = switch_channel_test_flag (D.41512_322, 93);



Registering new PHI nodes in block #132

Updating SSA information for statement D.41522_324 = smh_90->mparams;

Updating SSA information for statement D.41596_325 = D.41522_324->te;



Registering new PHI nodes in block #133

Updating SSA information for statement D.41766_326 = strlen (buf_144);

Updating SSA information for statement D.41768_328 = strlen (buf_144);

Updating SSA information for statement D.41522_330 = smh_90->mparams;

Updating SSA information for statement D.41596_331 = D.41522_330->te;

Updating SSA information for statement switch_snprintf (D.41767_327, D.41769_329, " %d", D.41599_332);



Registering new PHI nodes in block #134

Updating SSA information for statement D.41770_333 = switch_media_handle_test_media_flag (smh_90, 9);



Registering new PHI nodes in block #135

Updating SSA information for statement D.41522_334 = smh_90->mparams;

Updating SSA information for statement D.41606_335 = D.41522_334->cng_pt;



Registering new PHI nodes in block #136

Updating SSA information for statement D.41775_339 = strlen (buf_144);

Updating SSA information for statement D.41777_341 = strlen (buf_144);

Updating SSA information for statement D.41522_343 = smh_90->mparams;

Updating SSA information for statement D.41606_344 = D.41522_343->cng_pt;

Updating SSA information for statement switch_snprintf (D.41776_340, D.41778_342, " %d", D.41612_345);



Registering new PHI nodes in block #137

Updating SSA information for statement D.41779_346 = strlen (buf_144);

Updating SSA information for statement D.41781_348 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41780_347, D.41782_349, "\n");

Updating SSA information for statement D.41566_350 = a_engine_91->cur_payload_map;

Updating SSA information for statement rate_351 = D.41566_350->adv_rm_rate;

Updating SSA information for statement D.41566_352 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41783_353 = D.41566_352->adv_channels;



Registering new PHI nodes in block #138

Updating SSA information for statement D.41566_354 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41566_355 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41786_356 = D.41566_355->rm_encoding;

Updating SSA information for statement D.41787_357 = get_channels (D.41786_356, 1);

Updating SSA information for statement D.41566_355->adv_channels = D.41787_357;



Registering new PHI nodes in block #139

Updating SSA information for statement D.41566_358 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41783_359 = D.41566_358->adv_channels;



Registering new PHI nodes in block #140

Updating SSA information for statement D.41790_360 = strlen (buf_144);

Updating SSA information for statement D.41792_362 = strlen (buf_144);

Updating SSA information for statement D.41566_364 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41794_365 = D.41566_364->agreed_pt;

Updating SSA information for statement D.41566_367 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41786_368 = D.41566_367->rm_encoding;

Updating SSA information for statement D.41566_369 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41783_370 = D.41566_369->adv_channels;

Updating SSA information for statement switch_snprintf (D.41791_361, D.41793_363, "a=rtpmap:%d %s/%d/%d\n", D.41795_366, D.41786_368, rate_351, D.41783_370);



Registering new PHI nodes in block #141

Updating SSA information for statement D.41797_371 = strlen (buf_144);

Updating SSA information for statement D.41799_373 = strlen (buf_144);

Updating SSA information for statement D.41566_375 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41794_376 = D.41566_375->agreed_pt;

Updating SSA information for statement D.41566_378 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41786_379 = D.41566_378->rm_encoding;

Updating SSA information for statement switch_snprintf (D.41798_372, D.41800_374, "a=rtpmap:%d %s/%d\n", D.41795_377, D.41786_379, rate_351);



Registering new PHI nodes in block #142



Registering new PHI nodes in block #143

Updating SSA information for statement D.41803_380 = strlen (buf_144);

Updating SSA information for statement D.41805_382 = strlen (buf_144);

Updating SSA information for statement D.41566_384 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41794_385 = D.41566_384->agreed_pt;

Updating SSA information for statement switch_snprintf (D.41804_381, D.41806_383, "a=fmtp:%d %s\n", D.41795_386, fmtp_out_21);



Registering new PHI nodes in block #144

Updating SSA information for statement D.41807_387 = switch_media_handle_test_media_flag (smh_90, 15);



Registering new PHI nodes in block #145

Updating SSA information for statement D.41747_388 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.41747_388);

Updating SSA information for statement pmap_389 = a_engine_91->cur_payload_map;



Registering new PHI nodes in block #149



Registering new PHI nodes in block #150

Updating SSA information for statement D.41757_390 = pmap_35->allocated;



Registering new PHI nodes in block #146

Updating SSA information for statement D.41748_391 = pmap_35->pt;

Updating SSA information for statement D.41566_392 = a_engine_91->cur_payload_map;

Updating SSA information for statement D.41742_393 = D.41566_392->pt;



Registering new PHI nodes in block #147

Updating SSA information for statement D.41812_394 = strlen (buf_144);

Updating SSA information for statement D.41814_396 = strlen (buf_144);

Updating SSA information for statement D.41748_398 = pmap_35->pt;

Updating SSA information for statement D.41816_400 = pmap_35->iananame;

Updating SSA information for statement D.41817_401 = pmap_35->rate;

Updating SSA information for statement switch_snprintf (D.41813_395, D.41815_397, "a=rtpmap:%d %s/%ld\n", D.41755_399, D.41816_400, D.41817_401);



Registering new PHI nodes in block #148

Updating SSA information for statement pmap_402 = pmap_35->next;



Registering new PHI nodes in block #151

Updating SSA information for statement D.41747_403 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.41747_403);



Registering new PHI nodes in block #152

Updating SSA information for statement D.41819_404 = a_engine_91->read_codec.implementation;



Registering new PHI nodes in block #153

Updating SSA information for statement D.41819_408 = a_engine_91->read_codec.implementation;

Updating SSA information for statement D.41825_409 = D.41819_408->microseconds_per_packet;



Registering new PHI nodes in block #154

Updating SSA information for statement D.41522_411 = smh_90->mparams;

Updating SSA information for statement D.41593_412 = D.41522_411->dtmf_type;



Registering new PHI nodes in block #155

Updating SSA information for statement D.41829_413 = switch_media_handle_test_media_flag (smh_90, 8);



Registering new PHI nodes in block #156

Updating SSA information for statement D.41512_414 = session_72(D)->channel;

Updating SSA information for statement D.41831_415 = switch_channel_test_flag (D.41512_414, 93);



Registering new PHI nodes in block #157

Updating SSA information for statement D.41522_416 = smh_90->mparams;

Updating SSA information for statement D.41596_417 = D.41522_416->te;



Registering new PHI nodes in block #158

Updating SSA information for statement D.41512_418 = session_72(D)->channel;

Updating SSA information for statement D.41834_419 = switch_channel_test_flag (D.41512_418, 106);



Registering new PHI nodes in block #159

Updating SSA information for statement D.41837_420 = strlen (buf_144);

Updating SSA information for statement D.41839_422 = strlen (buf_144);

Updating SSA information for statement D.41522_424 = smh_90->mparams;

Updating SSA information for statement D.41596_425 = D.41522_424->te;

Updating SSA information for statement switch_snprintf (D.41838_421, D.41840_423, "a=rtpmap:%d telephone-event/8000\n", D.41599_426);



Registering new PHI nodes in block #160

Updating SSA information for statement D.41842_427 = strlen (buf_144);

Updating SSA information for statement D.41844_429 = strlen (buf_144);

Updating SSA information for statement D.41522_431 = smh_90->mparams;

Updating SSA information for statement D.41596_432 = D.41522_431->te;

Updating SSA information for statement D.41522_434 = smh_90->mparams;

Updating SSA information for statement D.41596_435 = D.41522_434->te;

Updating SSA information for statement switch_snprintf (D.41843_428, D.41845_430, "a=rtpmap:%d telephone-event/8000\na=fmtp:%d 0-16\n", D.41599_436, D.41599_436);



Registering new PHI nodes in block #161

Updating SSA information for statement D.41846_437 = switch_media_handle_test_media_flag (smh_90, 9);



Registering new PHI nodes in block #162

Updating SSA information for statement D.41849_438 = strlen (buf_144);

Updating SSA information for statement D.41851_440 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41850_439, D.41852_441, "a=silenceSupp:off - - - -\n");



Registering new PHI nodes in block #163

Updating SSA information for statement D.41522_442 = smh_90->mparams;

Updating SSA information for statement D.41606_443 = D.41522_442->cng_pt;



Registering new PHI nodes in block #164

Updating SSA information for statement D.41856_447 = strlen (buf_144);

Updating SSA information for statement D.41858_449 = strlen (buf_144);

Updating SSA information for statement D.41522_451 = smh_90->mparams;

Updating SSA information for statement D.41606_452 = D.41522_451->cng_pt;

Updating SSA information for statement switch_snprintf (D.41857_448, D.41859_450, "a=rtpmap:%d CN/8000\n", D.41612_453);

Updating SSA information for statement D.41720_454 = a_engine_91->codec_negotiated;



Registering new PHI nodes in block #165

Updating SSA information for statement D.41522_455 = smh_90->mparams;

Updating SSA information for statement D.41522_455->cng_pt = 0;



Registering new PHI nodes in block #166



Registering new PHI nodes in block #167

Updating SSA information for statement D.41864_456 = strlen (buf_144);

Updating SSA information for statement D.41866_458 = strlen (buf_144);

Updating SSA information for statement D.41870_460 = *append_audio_78;



Registering new PHI nodes in block #168

Updating SSA information for statement D.41873_461 = strlen (append_audio_78);



Registering new PHI nodes in block #169



Registering new PHI nodes in block #170

Updating SSA information for statement D.41876_465 = *iftmp.31_62;



Registering new PHI nodes in block #171



Registering new PHI nodes in block #172



Registering new PHI nodes in block #173

Updating SSA information for statement switch_snprintf (D.41865_457, D.41867_459, "%s%s", append_audio_78, iftmp.30_61);



Registering new PHI nodes in block #174



Registering new PHI nodes in block #175

Updating SSA information for statement D.41882_468 = strlen (buf_144);

Updating SSA information for statement D.41884_470 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41883_469, D.41885_471, "a=ptime:%d\n", ptime_5);



Registering new PHI nodes in block #176



Registering new PHI nodes in block #177

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 6350, session_72(D), 7, "Adding audio a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_83);

Updating SSA information for statement D.41888_472 = strlen (buf_144);

Updating SSA information for statement D.41890_474 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41889_473, D.41891_475, "a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_83);



Registering new PHI nodes in block #178



Registering new PHI nodes in block #179

Updating SSA information for statement D.48143_1522 = *sr_4;



Registering new PHI nodes in block #180



Registering new PHI nodes in block #181

Updating SSA information for statement D.48142 = D.48144_1523;

Updating SSA information for statement D.41892_476 = D.48142;



Registering new PHI nodes in block #182

Updating SSA information for statement D.41895_477 = strlen (buf_144);

Updating SSA information for statement D.41897_479 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41896_478, D.41898_480, "a=%s\n", sr_4);



Registering new PHI nodes in block #183

Updating SSA information for statement D.41899_481 = a_engine_91->local_dtls_fingerprint.type;



Registering new PHI nodes in block #184

Updating SSA information for statement D.48147_1524 = MEM[(const char *)D.41899_481];



Registering new PHI nodes in block #185



Registering new PHI nodes in block #186

Updating SSA information for statement D.48146 = D.48148_1525;

Updating SSA information for statement D.41900_482 = D.48146;



Registering new PHI nodes in block #187

Updating SSA information for statement D.41903_483 = strlen (buf_144);

Updating SSA information for statement D.41905_485 = strlen (buf_144);

Updating SSA information for statement D.41899_487 = a_engine_91->local_dtls_fingerprint.type;

Updating SSA information for statement switch_snprintf (D.41904_484, D.41906_486, "a=fingerprint:%s %s\n", D.41899_487, D.41907_488);



Registering new PHI nodes in block #188

Updating SSA information for statement D.41522_489 = smh_90->mparams;

Updating SSA information for statement D.41523_490 = D.41522_489->rtcp_audio_interval_msec;



Registering new PHI nodes in block #189

Updating SSA information for statement D.41910_491 = a_engine_91->rtcp_mux;



Registering new PHI nodes in block #190

Updating SSA information for statement D.41913_492 = strlen (buf_144);

Updating SSA information for statement D.41915_494 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41914_493, D.41916_495, "a=rtcp-mux\n");

Updating SSA information for statement D.41917_496 = strlen (buf_144);

Updating SSA information for statement D.41919_498 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41918_497, D.41920_499, "a=rtcp:%d IN %s %s\n", D.41727_500, family_273, ip_1);



Registering new PHI nodes in block #191

Updating SSA information for statement D.41922_501 = strlen (buf_144);

Updating SSA information for statement D.41924_503 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.41923_502, D.41925_504, "a=rtcp:%d IN %s %s\n", D.41926_506, family_273, ip_1);



Registering new PHI nodes in block #192

Updating SSA information for statement D.41927_507 = a_engine_91->ice_out.cands[0][0].ready;



Registering new PHI nodes in block #193

Updating SSA information for statement tmp1 = "";

Updating SSA information for statement tmp2 = "";

Updating SSA information for statement tmp1[10] = 0;

Updating SSA information for statement tmp2[10] = 0;

Updating SSA information for statement switch_stun_random_string (&tmp1, 10, "0123456789");

Updating SSA information for statement switch_stun_random_string (&tmp2, 10, "0123456789");

Updating SSA information for statement D.41930_513 = strlen (buf_144);

Updating SSA information for statement D.41932_515 = strlen (buf_144);

Updating SSA information for statement D.41934_517 = a_engine_91->ssrc;

Updating SSA information for statement D.41935_518 = smh_90->cname;

Updating SSA information for statement switch_snprintf (D.41931_514, D.41933_516, "a=ssrc:%u cname:%s\n", D.41934_517, D.41935_518);

Updating SSA information for statement D.41936_519 = strlen (buf_144);

Updating SSA information for statement D.41938_521 = strlen (buf_144);

Updating SSA information for statement D.41934_523 = a_engine_91->ssrc;

Updating SSA information for statement D.41719_524 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.41937_520, D.41939_522, "a=ssrc:%u msid:%s a0\n", D.41934_523, D.41719_524);

Updating SSA information for statement D.41940_525 = strlen (buf_144);

Updating SSA information for statement D.41942_527 = strlen (buf_144);

Updating SSA information for statement D.41934_529 = a_engine_91->ssrc;

Updating SSA information for statement D.41719_530 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.41941_526, D.41943_528, "a=ssrc:%u mslabel:%s\n", D.41934_529, D.41719_530);

Updating SSA information for statement D.41944_531 = strlen (buf_144);

Updating SSA information for statement D.41946_533 = strlen (buf_144);

Updating SSA information for statement D.41934_535 = a_engine_91->ssrc;

Updating SSA information for statement D.41719_536 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.41945_532, D.41947_534, "a=ssrc:%u label:%sa0\n", D.41934_535, D.41719_536);

Updating SSA information for statement D.41948_537 = strlen (buf_144);

Updating SSA information for statement D.41950_539 = strlen (buf_144);

Updating SSA information for statement D.41952_541 = ice_out_512->ufrag;

Updating SSA information for statement switch_snprintf (D.41949_538, D.41951_540, "a=ice-ufrag:%s\n", D.41952_541);

Updating SSA information for statement D.41953_542 = strlen (buf_144);

Updating SSA information for statement D.41955_544 = strlen (buf_144);

Updating SSA information for statement D.41957_546 = ice_out_512->pwd;

Updating SSA information for statement switch_snprintf (D.41954_543, D.41956_545, "a=ice-pwd:%s\n", D.41957_546);

Updating SSA information for statement D.41958_547 = strlen (buf_144);

Updating SSA information for statement D.41960_549 = strlen (buf_144);

Updating SSA information for statement D.41962_551 = ice_out_512->cands[0][0].transport;

Updating SSA information for statement D.41963_552 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.41964_553 = ice_out_512->cands[0][0].con_port;

Updating SSA information for statement switch_snprintf (D.41959_548, D.41961_550, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_551, c1_508, D.41963_552, D.41965_554);

Updating SSA information for statement D.41966_555 = a_engine_91->local_sdp_ip;



Registering new PHI nodes in block #194

Updating SSA information for statement D.48151_1526 = MEM[(const char *)D.41966_555];



Registering new PHI nodes in block #195



Registering new PHI nodes in block #196

Updating SSA information for statement D.48150 = D.48152_1527;

Updating SSA information for statement D.41967_556 = D.48150;



Registering new PHI nodes in block #197

Updating SSA information for statement D.41963_557 = ice_out_512->cands[0][0].con_addr;



Registering new PHI nodes in block #198

Updating SSA information for statement D.48155_1528 = MEM[(const char *)D.41963_557];



Registering new PHI nodes in block #199



Registering new PHI nodes in block #200

Updating SSA information for statement D.48154 = D.48156_1529;

Updating SSA information for statement D.41970_558 = D.48154;



Registering new PHI nodes in block #201

Updating SSA information for statement D.41966_559 = a_engine_91->local_sdp_ip;

Updating SSA information for statement D.41963_560 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.39598_561 = __builtin_strcmp (D.41966_559, D.41963_560);



Registering new PHI nodes in block #202

Updating SSA information for statement D.41975_562 = a_engine_91->local_sdp_port;

Updating SSA information for statement D.41964_563 = ice_out_512->cands[0][0].con_port;



Registering new PHI nodes in block #203

Updating SSA information for statement D.41978_564 = strlen (buf_144);

Updating SSA information for statement D.41980_566 = strlen (buf_144);

Updating SSA information for statement D.41962_568 = ice_out_512->cands[0][0].transport;

Updating SSA information for statement D.41963_569 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.41964_570 = ice_out_512->cands[0][0].con_port;

Updating SSA information for statement D.41966_572 = a_engine_91->local_sdp_ip;

Updating SSA information for statement D.41975_573 = a_engine_91->local_sdp_port;

Updating SSA information for statement switch_snprintf (D.41979_565, D.41981_567, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_568, c3_510, D.41963_569, D.41965_571, D.41966_572, D.41982_574);



Registering new PHI nodes in block #204

Updating SSA information for statement D.41910_575 = a_engine_91->rtcp_mux;



Registering new PHI nodes in block #205

Updating SSA information for statement D.41512_579 = session_72(D)->channel;

Updating SSA information for statement D.41989_580 = switch_channel_test_flag (D.41512_579, 84);



Registering new PHI nodes in block #206

Updating SSA information for statement D.41990_581 = strlen (buf_144);

Updating SSA information for statement D.41992_583 = strlen (buf_144);

Updating SSA information for statement D.41962_585 = ice_out_512->cands[0][0].transport;

Updating SSA information for statement D.41963_586 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.41964_587 = ice_out_512->cands[0][0].con_port;

Updating SSA information for statement D.41910_589 = a_engine_91->rtcp_mux;

Updating SSA information for statement switch_snprintf (D.41991_582, D.41993_584, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_585, c2_509, D.41963_586, D.41995_591);

Updating SSA information for statement D.41966_592 = a_engine_91->local_sdp_ip;



Registering new PHI nodes in block #207

Updating SSA information for statement D.48159_1530 = MEM[(const char *)D.41966_592];



Registering new PHI nodes in block #208



Registering new PHI nodes in block #209

Updating SSA information for statement D.48158 = D.48160_1531;

Updating SSA information for statement D.41996_593 = D.48158;



Registering new PHI nodes in block #210

Updating SSA information for statement D.41963_594 = ice_out_512->cands[0][0].con_addr;



Registering new PHI nodes in block #211

Updating SSA information for statement D.48163_1532 = MEM[(const char *)D.41963_594];



Registering new PHI nodes in block #212



Registering new PHI nodes in block #213

Updating SSA information for statement D.48162 = D.48164_1533;

Updating SSA information for statement D.41999_595 = D.48162;



Registering new PHI nodes in block #214

Updating SSA information for statement D.41966_596 = a_engine_91->local_sdp_ip;

Updating SSA information for statement D.41963_597 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.39607_598 = __builtin_strcmp (D.41966_596, D.41963_597);



Registering new PHI nodes in block #215

Updating SSA information for statement D.41975_599 = a_engine_91->local_sdp_port;

Updating SSA information for statement D.41964_600 = ice_out_512->cands[0][0].con_port;



Registering new PHI nodes in block #216

Updating SSA information for statement D.42006_601 = strlen (buf_144);

Updating SSA information for statement D.42008_603 = strlen (buf_144);

Updating SSA information for statement D.41962_605 = ice_out_512->cands[0][0].transport;

Updating SSA information for statement D.41963_606 = ice_out_512->cands[0][0].con_addr;

Updating SSA information for statement D.41964_607 = ice_out_512->cands[0][0].con_port;

Updating SSA information for statement D.41910_609 = a_engine_91->rtcp_mux;

Updating SSA information for statement D.41966_612 = a_engine_91->local_sdp_ip;

Updating SSA information for statement D.41975_613 = a_engine_91->local_sdp_port;

Updating SSA information for statement D.41910_615 = a_engine_91->rtcp_mux;

Updating SSA information for statement switch_snprintf (D.42007_602, D.42009_604, "a=candidate:%s 2 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_605, c4_511, D.41963_606, D.41995_611, D.41966_612, D.42010_617);



Registering new PHI nodes in block #217

Updating SSA information for statement D.41736_618 = a_engine_91->crypto_type;



Registering new PHI nodes in block #218

Updating SSA information for statement D.41512_619 = session_72(D)->channel;

Updating SSA information for statement D.42013_620 = switch_channel_test_flag (D.41512_619, 109);



Registering new PHI nodes in block #219

Updating SSA information for statement D.41736_621 = a_engine_91->crypto_type;

Updating SSA information for statement D.42016_622 = a_engine_91->ssec[D.41736_621].local_crypto_key;



Registering new PHI nodes in block #220

Updating SSA information for statement D.48167_1534 = MEM[(const char *)D.42016_622];



Registering new PHI nodes in block #221



Registering new PHI nodes in block #222

Updating SSA information for statement D.48166 = D.48168_1535;

Updating SSA information for statement D.42017_623 = D.48166;



Registering new PHI nodes in block #223

Updating SSA information for statement D.41512_624 = session_72(D)->channel;

Updating SSA information for statement D.42020_625 = switch_channel_test_flag (D.41512_624, 92);



Registering new PHI nodes in block #224

Updating SSA information for statement D.42023_626 = strlen (buf_144);

Updating SSA information for statement D.42025_628 = strlen (buf_144);

Updating SSA information for statement D.41736_630 = a_engine_91->crypto_type;

Updating SSA information for statement D.42016_631 = a_engine_91->ssec[D.41736_630].local_crypto_key;

Updating SSA information for statement switch_snprintf (D.42024_627, D.42026_629, "a=crypto:%s\n", D.42016_631);



Registering new PHI nodes in block #225

Updating SSA information for statement D.41522_632 = smh_90->mparams;

Updating SSA information for statement D.41587_633 = D.41522_632->num_codecs;



Registering new PHI nodes in block #226

Updating SSA information for statement D.42030_637 = switch_media_handle_test_media_flag (smh_90, 9);



Registering new PHI nodes in block #227

Updating SSA information for statement D.41522_638 = smh_90->mparams;

Updating SSA information for statement D.41606_639 = D.41522_638->cng_pt;



Registering new PHI nodes in block #228

Updating SSA information for statement D.41522_643 = smh_90->mparams;

Updating SSA information for statement D.41606_644 = D.41522_643->cng_pt;

Updating SSA information for statement D.41720_646 = a_engine_91->codec_negotiated;



Registering new PHI nodes in block #229

Updating SSA information for statement D.41522_647 = smh_90->mparams;

Updating SSA information for statement D.41522_647->cng_pt = 0;



Registering new PHI nodes in block #230

Updating SSA information for statement D.41512_648 = session_72(D)->channel;

Updating SSA information for statement mult_649 = switch_channel_get_variable_dup (D.41512_648, "sdp_m_per_ptime", 1, -1);

Updating SSA information for statement D.41512_650 = session_72(D)->channel;

Updating SSA information for statement D.42039_651 = switch_channel_test_flag (D.41512_650, 106);



Registering new PHI nodes in block #231



Registering new PHI nodes in block #232

Updating SSA information for statement D.42042_652 = switch_false (mult_649);



Registering new PHI nodes in block #244



Registering new PHI nodes in block #262

Updating SSA information for statement D.41522_654 = smh_90->mparams;

Updating SSA information for statement D.41587_655 = D.41522_654->num_codecs;



Registering new PHI nodes in block #245

Updating SSA information for statement imp_656 = smh_90->codecs[i_38];

Updating SSA information for statement D.42065_657 = imp_656->codec_type;



Registering new PHI nodes in block #246



Registering new PHI nodes in block #247

Updating SSA information for statement D.42068_658 = imp_656->microseconds_per_packet;

Updating SSA information for statement D.42071_660 = imp_656->iananame;

Updating SSA information for statement D.42072_661 = strcasecmp (D.42071_660, "ilbc");



Registering new PHI nodes in block #248

Updating SSA information for statement D.42071_662 = imp_656->iananame;

Updating SSA information for statement D.42074_663 = strcasecmp (D.42071_662, "isac");



Registering new PHI nodes in block #249



Registering new PHI nodes in block #250



Registering new PHI nodes in block #251

Updating SSA information for statement D.41732_668 = a_engine_91->no_crypto;



Registering new PHI nodes in block #252

Updating SSA information for statement D.41512_669 = session_72(D)->channel;

Updating SSA information for statement D.42081_670 = switch_channel_test_flag (D.41512_669, 92);



Registering new PHI nodes in block #253

Updating SSA information for statement D.41512_671 = session_72(D)->channel;

Updating SSA information for statement D.42082_672 = switch_channel_test_flag (D.41512_671, 109);



Registering new PHI nodes in block #254

Updating SSA information for statement D.42083_673 = strlen (buf_144);

Updating SSA information for statement map.33_675 = map;

Updating SSA information for statement generate_m.isra.4 (session_72(D), bp_665, D.42084_674, port_2, family_273, ip_1, cur_ptime_667, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_675, 1);

Updating SSA information for statement D.42085_676 = strlen (buf_144);

Updating SSA information for statement D.42058_678 = smh_90->crypto_mode;



Registering new PHI nodes in block #255



Registering new PHI nodes in block #256

Updating SSA information for statement D.41512_680 = session_72(D)->channel;

Updating SSA information for statement D.42090_681 = switch_channel_test_flag (D.41512_680, 106);



Registering new PHI nodes in block #257

Updating SSA information for statement D.41512_682 = session_72(D)->channel;

Updating SSA information for statement D.42092_683 = switch_channel_test_flag (D.41512_682, 109);



Registering new PHI nodes in block #258



Registering new PHI nodes in block #259



Registering new PHI nodes in block #260

Updating SSA information for statement D.42095_685 = strlen (buf_144);

Updating SSA information for statement map.33_687 = map;

Updating SSA information for statement generate_m.isra.4 (session_72(D), bp_45, D.42096_686, port_2, family_273, ip_1, cur_ptime_667, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_687, 0);



Registering new PHI nodes in block #261



Registering new PHI nodes in block #233

Updating SSA information for statement D.41512_690 = session_72(D)->channel;

Updating SSA information for statement D.42046_691 = switch_channel_test_flag (D.41512_690, 106);



Registering new PHI nodes in block #234

Updating SSA information for statement D.41512_692 = session_72(D)->channel;

Updating SSA information for statement D.42048_693 = switch_channel_test_flag (D.41512_692, 109);



Registering new PHI nodes in block #235



Registering new PHI nodes in block #236



Registering new PHI nodes in block #237

Updating SSA information for statement D.41732_697 = a_engine_91->no_crypto;



Registering new PHI nodes in block #238

Updating SSA information for statement D.41512_698 = session_72(D)->channel;

Updating SSA information for statement D.42054_699 = switch_channel_test_flag (D.41512_698, 92);



Registering new PHI nodes in block #239

Updating SSA information for statement D.41512_700 = session_72(D)->channel;

Updating SSA information for statement D.42055_701 = switch_channel_test_flag (D.41512_700, 109);



Registering new PHI nodes in block #240

Updating SSA information for statement map.33_702 = map;

Updating SSA information for statement generate_m.isra.4 (session_72(D), buf_144, 65536, port_2, family_273, ip_1, 0, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_702, 1);

Updating SSA information for statement D.42057_703 = strlen (buf_144);

Updating SSA information for statement D.42058_705 = smh_90->crypto_mode;



Registering new PHI nodes in block #241



Registering new PHI nodes in block #242



Registering new PHI nodes in block #243

Updating SSA information for statement D.42063_707 = strlen (buf_144);

Updating SSA information for statement map.33_709 = map;

Updating SSA information for statement generate_m.isra.4 (session_72(D), bp_43, D.42064_708, port_2, family_273, ip_1, 0, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_709, 0);



Registering new PHI nodes in block #263

Updating SSA information for statement D.41512_710 = session_72(D)->channel;

Updating SSA information for statement D.42097_711 = switch_channel_test_flag (D.41512_710, 98);



Registering new PHI nodes in block #264

Updating SSA information for statement D.41512_712 = session_72(D)->channel;

Updating SSA information for statement D.42100_713 = switch_channel_direction (D.41512_712);



Registering new PHI nodes in block #265

Updating SSA information for statement D.41534_714 = smh_90->session;

Updating SSA information for statement D.41535_715 = D.41534_714->channel;

Updating SSA information for statement D.42103_716 = switch_channel_test_flag (D.41535_715, 109);



Registering new PHI nodes in block #266

Updating SSA information for statement v_engine_92->no_crypto = 1;



Registering new PHI nodes in block #267

Updating SSA information for statement D.42106_717 = v_engine_92->local_sdp_port;



Registering new PHI nodes in block #268

Updating SSA information for statement switch_core_media_choose_port (session_72(D), 1, 0);



Registering new PHI nodes in block #269

Updating SSA information for statement D.41512_718 = session_72(D)->channel;

Updating SSA information for statement D.42109_719 = switch_channel_test_flag (D.41512_718, 106);



Registering new PHI nodes in block #270

Updating SSA information for statement switch_media_handle_set_media_flag (smh_90, 16);



Registering new PHI nodes in block #271

Updating SSA information for statement D.42112_720 = v_engine_92->adv_sdp_port;



Registering new PHI nodes in block #272



Registering new PHI nodes in block #460



Registering new PHI nodes in block #273

Updating SSA information for statement D.41534_723 = smh_90->session;

Updating SSA information for statement D.41535_724 = D.41534_723->channel;

Updating SSA information for statement D.42115_725 = switch_channel_test_flag (D.41535_724, 108);



Registering new PHI nodes in block #274

Updating SSA information for statement gen_ice (session_72(D), 1, ip_1, D.42118_726);



Registering new PHI nodes in block #275

Updating SSA information for statement D.42119_727 = strlen (buf_144);

Updating SSA information for statement D.42121_729 = strlen (buf_144);



Registering new PHI nodes in block #276

Updating SSA information for statement D.41512_731 = session_72(D)->channel;

Updating SSA information for statement D.42129_732 = switch_channel_test_flag (D.41512_731, 92);



Registering new PHI nodes in block #277

Updating SSA information for statement D.41512_733 = session_72(D)->channel;

Updating SSA information for statement D.42131_734 = switch_channel_direction (D.41512_733);



Registering new PHI nodes in block #278

Updating SSA information for statement D.41736_735 = a_engine_91->crypto_type;



Registering new PHI nodes in block #279

Updating SSA information for statement D.41512_736 = session_72(D)->channel;

Updating SSA information for statement D.42133_737 = switch_channel_test_flag (D.41512_736, 109);



Registering new PHI nodes in block #281



Registering new PHI nodes in block #280



Registering new PHI nodes in block #282

Updating SSA information for statement D.42134_740 = get_media_profile_name (session_72(D), iftmp.34_64);

Updating SSA information for statement switch_snprintf (D.42120_728, D.42122_730, "m=video %d %s", v_port_721, D.42134_740);

Updating SSA information for statement D.42135_741 = v_engine_92->codec_negotiated;



Registering new PHI nodes in block #283

Updating SSA information for statement switch_core_media_set_video_codec (session_72(D), 0);

Updating SSA information for statement D.42138_742 = strlen (buf_144);

Updating SSA information for statement D.42140_744 = strlen (buf_144);

Updating SSA information for statement D.42142_746 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42143_747 = D.42142_746->agreed_pt;

Updating SSA information for statement switch_snprintf (D.42139_743, D.42141_745, " %d", D.42144_748);

Updating SSA information for statement D.42145_749 = switch_media_handle_test_media_flag (smh_90, 16);



Registering new PHI nodes in block #284

Updating SSA information for statement D.41747_750 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.41747_750);

Updating SSA information for statement pmap_751 = v_engine_92->cur_payload_map;



Registering new PHI nodes in block #288



Registering new PHI nodes in block #289

Updating SSA information for statement D.42158_752 = pmap_49->allocated;



Registering new PHI nodes in block #285

Updating SSA information for statement D.42148_753 = pmap_49->pt;

Updating SSA information for statement D.42142_754 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42149_755 = D.42142_754->pt;



Registering new PHI nodes in block #286

Updating SSA information for statement D.42152_756 = strlen (buf_144);

Updating SSA information for statement D.42154_758 = strlen (buf_144);

Updating SSA information for statement D.42148_760 = pmap_49->pt;

Updating SSA information for statement switch_snprintf (D.42153_757, D.42155_759, " %d", D.42156_761);



Registering new PHI nodes in block #287

Updating SSA information for statement pmap_762 = pmap_49->next;



Registering new PHI nodes in block #290

Updating SSA information for statement D.41747_763 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.41747_763);



Registering new PHI nodes in block #291

Updating SSA information for statement D.41522_764 = smh_90->mparams;

Updating SSA information for statement D.41587_765 = D.41522_764->num_codecs;



Registering new PHI nodes in block #292

Updating SSA information for statement already_did = {};



Registering new PHI nodes in block #305

Updating SSA information for statement D.41522_767 = smh_90->mparams;

Updating SSA information for statement D.41587_768 = D.41522_767->num_codecs;



Registering new PHI nodes in block #293

Updating SSA information for statement imp_769 = smh_90->codecs[i_50];

Updating SSA information for statement D.42162_770 = imp_769->codec_type;



Registering new PHI nodes in block #294



Registering new PHI nodes in block #295

Updating SSA information for statement D.41512_771 = session_72(D)->channel;

Updating SSA information for statement D.42165_772 = switch_channel_direction (D.41512_771);



Registering new PHI nodes in block #296

Updating SSA information for statement D.41512_773 = session_72(D)->channel;

Updating SSA information for statement D.42168_774 = switch_channel_test_flag (D.41512_773, 114);



Registering new PHI nodes in block #297



Registering new PHI nodes in block #298

Updating SSA information for statement D.42171_775 = smh_90->ianacodes[i_50];



Registering new PHI nodes in block #299

Updating SSA information for statement D.42171_777 = smh_90->ianacodes[i_50];

Updating SSA information for statement D.42176_779 = already_did[D.42175_778];



Registering new PHI nodes in block #300



Registering new PHI nodes in block #301

Updating SSA information for statement D.42171_780 = smh_90->ianacodes[i_50];

Updating SSA information for statement already_did[D.42175_781] = 1;



Registering new PHI nodes in block #302

Updating SSA information for statement D.42179_782 = strlen (buf_144);

Updating SSA information for statement D.42181_784 = strlen (buf_144);

Updating SSA information for statement D.42171_786 = smh_90->ianacodes[i_50];

Updating SSA information for statement switch_snprintf (D.42180_783, D.42182_785, " %d", D.42175_787);



Registering new PHI nodes in block #303

Updating SSA information for statement D.42185_788 = imp_769->microseconds_per_packet;



Registering new PHI nodes in block #304



Registering new PHI nodes in block #306

Updating SSA information for statement D.42186_791 = strlen (buf_144);

Updating SSA information for statement D.42188_793 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42187_792, D.42189_794, "\n");

Updating SSA information for statement D.42135_795 = v_engine_92->codec_negotiated;



Registering new PHI nodes in block #307

Updating SSA information for statement D.42142_796 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42192_797 = D.42142_796->rm_encoding;

Updating SSA information for statement D.42193_798 = strcasecmp (D.42192_797, "VP8");



Registering new PHI nodes in block #308

Updating SSA information for statement D.42142_799 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42149_800 = D.42142_799->pt;



Registering new PHI nodes in block #309

Updating SSA information for statement D.42142_802 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42192_803 = D.42142_802->rm_encoding;

Updating SSA information for statement D.42196_804 = strcasecmp (D.42192_803, "red");



Registering new PHI nodes in block #310

Updating SSA information for statement D.42142_805 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42149_806 = D.42142_805->pt;



Registering new PHI nodes in block #311

Updating SSA information for statement D.42142_808 = v_engine_92->cur_payload_map;

Updating SSA information for statement rate_809 = D.42142_808->rm_rate;

Updating SSA information for statement D.42199_810 = strlen (buf_144);

Updating SSA information for statement D.42201_812 = strlen (buf_144);

Updating SSA information for statement D.42142_814 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42149_815 = D.42142_814->pt;

Updating SSA information for statement D.42142_817 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42192_818 = D.42142_817->rm_encoding;

Updating SSA information for statement D.42142_819 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42204_820 = D.42142_819->rm_rate;

Updating SSA information for statement switch_snprintf (D.42200_811, D.42202_813, "a=rtpmap:%d %s/%ld\n", D.42203_816, D.42192_818, D.42204_820);

Updating SSA information for statement D.41512_821 = session_72(D)->channel;

Updating SSA information for statement D.42205_822 = switch_channel_test_flag (D.41512_821, 84);



Registering new PHI nodes in block #312

Updating SSA information for statement D.42142_823 = v_engine_92->cur_payload_map;

Updating SSA information for statement pass_fmtp_824 = D.42142_823->rm_fmtp;



Registering new PHI nodes in block #313

Updating SSA information for statement D.41512_826 = session_72(D)->channel;

Updating SSA information for statement D.42209_827 = switch_channel_get_partner_uuid (D.41512_826);



Registering new PHI nodes in block #314

Updating SSA information for statement D.41512_828 = session_72(D)->channel;

Updating SSA information for statement of_829 = switch_channel_get_variable_partner (D.41512_828, "rtp_video_fmtp");



Registering new PHI nodes in block #315



Registering new PHI nodes in block #316



Registering new PHI nodes in block #317



Registering new PHI nodes in block #318

Updating SSA information for statement D.41512_832 = session_72(D)->channel;

Updating SSA information for statement pass_fmtp_833 = switch_channel_get_variable_dup (D.41512_832, "rtp_video_fmtp", 1, -1);



Registering new PHI nodes in block #319



Registering new PHI nodes in block #320

Updating SSA information for statement D.42219_834 = strlen (buf_144);

Updating SSA information for statement D.42221_836 = strlen (buf_144);

Updating SSA information for statement D.42142_838 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42149_839 = D.42142_838->pt;

Updating SSA information for statement switch_snprintf (D.42220_835, D.42222_837, "a=fmtp:%d %s\n", D.42203_840, pass_fmtp_18);



Registering new PHI nodes in block #321

Updating SSA information for statement D.42223_841 = switch_media_handle_test_media_flag (smh_90, 16);



Registering new PHI nodes in block #322

Updating SSA information for statement D.41747_842 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_lock (D.41747_842);

Updating SSA information for statement pmap_843 = v_engine_92->cur_payload_map;



Registering new PHI nodes in block #327



Registering new PHI nodes in block #328

Updating SSA information for statement D.42240_844 = pmap_51->allocated;



Registering new PHI nodes in block #323

Updating SSA information for statement D.42226_845 = pmap_51->pt;

Updating SSA information for statement D.42142_846 = v_engine_92->cur_payload_map;

Updating SSA information for statement D.42149_847 = D.42142_846->pt;



Registering new PHI nodes in block #324

Updating SSA information for statement D.42229_848 = pmap_51->negotiated;



Registering new PHI nodes in block #325

Updating SSA information for statement D.42232_849 = strlen (buf_144);

Updating SSA information for statement D.42234_851 = strlen (buf_144);

Updating SSA information for statement D.42226_853 = pmap_51->pt;

Updating SSA information for statement D.42237_855 = pmap_51->iananame;

Updating SSA information for statement D.42238_856 = pmap_51->rate;

Updating SSA information for statement switch_snprintf (D.42233_850, D.42235_852, "a=rtpmap:%d %s/%ld\n", D.42236_854, D.42237_855, D.42238_856);



Registering new PHI nodes in block #326

Updating SSA information for statement pmap_857 = pmap_51->next;



Registering new PHI nodes in block #329

Updating SSA information for statement D.41747_858 = smh_90->sdp_mutex;

Updating SSA information for statement switch_mutex_unlock (D.41747_858);



Registering new PHI nodes in block #330



Registering new PHI nodes in block #331

Updating SSA information for statement D.42243_859 = strlen (buf_144);

Updating SSA information for statement D.42245_861 = strlen (buf_144);

Updating SSA information for statement D.42249_863 = *append_video_80;



Registering new PHI nodes in block #332

Updating SSA information for statement D.42252_864 = strlen (append_video_80);



Registering new PHI nodes in block #333



Registering new PHI nodes in block #334

Updating SSA information for statement D.42255_868 = *iftmp.36_66;



Registering new PHI nodes in block #335



Registering new PHI nodes in block #336



Registering new PHI nodes in block #337

Updating SSA information for statement switch_snprintf (D.42244_860, D.42246_862, "%s%s", append_video_80, iftmp.35_65);



Registering new PHI nodes in block #338

Updating SSA information for statement D.41522_871 = smh_90->mparams;

Updating SSA information for statement D.41587_872 = D.41522_871->num_codecs;



Registering new PHI nodes in block #339

Updating SSA information for statement already_did = {};



Registering new PHI nodes in block #384

Updating SSA information for statement D.41522_874 = smh_90->mparams;

Updating SSA information for statement D.41587_875 = D.41522_874->num_codecs;



Registering new PHI nodes in block #340

Updating SSA information for statement imp_876 = smh_90->codecs[i_52];

Updating SSA information for statement D.42262_878 = smh_90->ianacodes[i_52];

Updating SSA information for statement D.42263_880 = imp_876->codec_type;



Registering new PHI nodes in block #341



Registering new PHI nodes in block #342

Updating SSA information for statement D.41512_881 = session_72(D)->channel;

Updating SSA information for statement D.42266_882 = switch_channel_direction (D.41512_881);



Registering new PHI nodes in block #343

Updating SSA information for statement D.41512_883 = session_72(D)->channel;

Updating SSA information for statement D.42269_884 = switch_channel_test_flag (D.41512_883, 114);



Registering new PHI nodes in block #344



Registering new PHI nodes in block #345



Registering new PHI nodes in block #346

Updating SSA information for statement D.42274_885 = already_did[ianacode_879];



Registering new PHI nodes in block #347



Registering new PHI nodes in block #348

Updating SSA information for statement already_did[ianacode_879] = 1;



Registering new PHI nodes in block #349



Registering new PHI nodes in block #350

Updating SSA information for statement rate_886 = imp_876->samples_per_second;



Registering new PHI nodes in block #351

Updating SSA information for statement D.42279_887 = imp_876->iananame;

Updating SSA information for statement D.42280_888 = imp_876->number_of_channels;

Updating SSA information for statement channels_890 = get_channels (D.42279_887, D.42281_889);

Updating SSA information for statement D.42279_891 = imp_876->iananame;

Updating SSA information for statement D.42282_892 = strcasecmp (D.42279_891, "VP8");



Registering new PHI nodes in block #352



Registering new PHI nodes in block #353

Updating SSA information for statement D.42279_894 = imp_876->iananame;

Updating SSA information for statement D.42285_895 = strcasecmp (D.42279_894, "red");



Registering new PHI nodes in block #354



Registering new PHI nodes in block #355



Registering new PHI nodes in block #356

Updating SSA information for statement D.42290_897 = strlen (buf_144);

Updating SSA information for statement D.42292_899 = strlen (buf_144);

Updating SSA information for statement D.42279_901 = imp_876->iananame;

Updating SSA information for statement D.42294_902 = imp_876->samples_per_second;

Updating SSA information for statement switch_snprintf (D.42291_898, D.42293_900, "a=rtpmap:%d %s/%d/%d\n", ianacode_879, D.42279_901, D.42294_902, channels_890);



Registering new PHI nodes in block #357

Updating SSA information for statement D.42296_903 = strlen (buf_144);

Updating SSA information for statement D.42298_905 = strlen (buf_144);

Updating SSA information for statement D.42279_907 = imp_876->iananame;

Updating SSA information for statement D.42294_908 = imp_876->samples_per_second;

Updating SSA information for statement switch_snprintf (D.42297_904, D.42299_906, "a=rtpmap:%d %s/%d\n", ianacode_879, D.42279_907, D.42294_908);



Registering new PHI nodes in block #358



Registering new PHI nodes in block #359

Updating SSA information for statement D.48171_1536 = *ov_fmtp_76;



Registering new PHI nodes in block #360



Registering new PHI nodes in block #361

Updating SSA information for statement D.48170 = D.48172_1537;

Updating SSA information for statement D.42300_909 = D.48170;



Registering new PHI nodes in block #363

Updating SSA information for statement map.33_911 = map;



Registering new PHI nodes in block #364

Updating SSA information for statement map.33_912 = map;

Updating SSA information for statement D.42279_913 = imp_876->iananame;

Updating SSA information for statement fmtp_914 = switch_event_get_header_idx (map.33_912, D.42279_913, -1);



Registering new PHI nodes in block #365

Updating SSA information for statement D.42306_915 = smh_90->fmtps[i_52];



Registering new PHI nodes in block #366

Updating SSA information for statement fmtp_916 = smh_90->fmtps[i_52];



Registering new PHI nodes in block #367



Registering new PHI nodes in block #368

Updating SSA information for statement D.48175_1538 = MEM[(const char *)fmtp_54];



Registering new PHI nodes in block #369



Registering new PHI nodes in block #370

Updating SSA information for statement D.48174 = D.48176_1539;

Updating SSA information for statement D.42309_917 = D.48174;



Registering new PHI nodes in block #371

Updating SSA information for statement fmtp_918 = imp_876->fmtp;



Registering new PHI nodes in block #372



Registering new PHI nodes in block #373

Updating SSA information for statement D.48179_1540 = MEM[(const char *)fmtp_55];



Registering new PHI nodes in block #374



Registering new PHI nodes in block #375

Updating SSA information for statement D.48178 = D.48180_1541;

Updating SSA information for statement D.42312_919 = D.48178;



Registering new PHI nodes in block #376



Registering new PHI nodes in block #362



Registering new PHI nodes in block #377



Registering new PHI nodes in block #378

Updating SSA information for statement D.48183_1542 = MEM[(const char *)fmtp_56];



Registering new PHI nodes in block #379



Registering new PHI nodes in block #380

Updating SSA information for statement D.48182 = D.48184_1543;

Updating SSA information for statement D.42315_921 = D.48182;



Registering new PHI nodes in block #381

Updating SSA information for statement D.42318_922 = strcasecmp (fmtp_56, "_blank_");



Registering new PHI nodes in block #382

Updating SSA information for statement D.42321_923 = strlen (buf_144);

Updating SSA information for statement D.42323_925 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42322_924, D.42324_926, "a=fmtp:%d %s\n", ianacode_879, fmtp_56);



Registering new PHI nodes in block #383



Registering new PHI nodes in block #385



Registering new PHI nodes in block #386

Updating SSA information for statement D.41512_928 = session_72(D)->channel;

Updating SSA information for statement D.42328_929 = switch_channel_test_flag (D.41512_928, 84);



Registering new PHI nodes in block #387

Updating SSA information for statement D.41534_930 = smh_90->session;

Updating SSA information for statement D.41535_931 = D.41534_930->channel;

Updating SSA information for statement D.42329_932 = switch_channel_test_flag (D.41535_931, 109);



Registering new PHI nodes in block #388

Updating SSA information for statement generate_local_fingerprint (smh_90, 1);



Registering new PHI nodes in block #389

Updating SSA information for statement D.42332_933 = v_engine_92->local_dtls_fingerprint.type;



Registering new PHI nodes in block #390

Updating SSA information for statement D.48187_1544 = MEM[(const char *)D.42332_933];



Registering new PHI nodes in block #391



Registering new PHI nodes in block #392

Updating SSA information for statement D.48186 = D.48188_1545;

Updating SSA information for statement D.42333_934 = D.48186;



Registering new PHI nodes in block #393

Updating SSA information for statement D.42336_935 = strlen (buf_144);

Updating SSA information for statement D.42338_937 = strlen (buf_144);

Updating SSA information for statement D.42332_939 = v_engine_92->local_dtls_fingerprint.type;

Updating SSA information for statement switch_snprintf (D.42337_936, D.42339_938, "a=fingerprint:%s %s\n", D.42332_939, D.42340_940);



Registering new PHI nodes in block #394

Updating SSA information for statement D.41522_941 = smh_90->mparams;

Updating SSA information for statement D.41527_942 = D.41522_941->rtcp_video_interval_msec;



Registering new PHI nodes in block #395

Updating SSA information for statement D.42343_943 = v_engine_92->rtcp_mux;



Registering new PHI nodes in block #396

Updating SSA information for statement D.42346_944 = strlen (buf_144);

Updating SSA information for statement D.42348_946 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42347_945, D.42349_947, "a=rtcp-mux\n");

Updating SSA information for statement D.42350_948 = strlen (buf_144);

Updating SSA information for statement D.42352_950 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42351_949, D.42353_951, "a=rtcp:%d IN %s %s\n", v_port_721, family_273, ip_1);



Registering new PHI nodes in block #397

Updating SSA information for statement D.42355_952 = strlen (buf_144);

Updating SSA information for statement D.42357_954 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42356_953, D.42358_955, "a=rtcp:%d IN %s %s\n", D.42359_956, family_273, ip_1);



Registering new PHI nodes in block #398

Updating SSA information for statement D.42360_957 = BIT_FIELD_REF <*v_engine_92, 16, 91280>;



Registering new PHI nodes in block #399

Updating SSA information for statement D.42364_959 = strlen (buf_144);

Updating SSA information for statement D.42366_961 = strlen (buf_144);

Updating SSA information for statement D.42369_963 = v_engine_92->fir;



Registering new PHI nodes in block #400



Registering new PHI nodes in block #401



Registering new PHI nodes in block #402

Updating SSA information for statement D.42374_966 = v_engine_92->pli;



Registering new PHI nodes in block #403



Registering new PHI nodes in block #404



Registering new PHI nodes in block #405

Updating SSA information for statement switch_snprintf (D.42365_960, D.42367_962, "a=rtcp-fb:* %s%s\n", iftmp.37_67, iftmp.38_68);



Registering new PHI nodes in block #406

Updating SSA information for statement D.42378_969 = v_engine_92->ice_out.cands[0][0].ready;



Registering new PHI nodes in block #407

Updating SSA information for statement tmp1 = "";

Updating SSA information for statement tmp2 = "";

Updating SSA information for statement tmp1[10] = 0;

Updating SSA information for statement tmp2[10] = 0;

Updating SSA information for statement switch_stun_random_string (&tmp1, 10, "0123456789");

Updating SSA information for statement switch_stun_random_string (&tmp2, 10, "0123456789");

Updating SSA information for statement D.41534_976 = smh_90->session;

Updating SSA information for statement D.41535_977 = D.41534_976->channel;

Updating SSA information for statement vbw_978 = switch_channel_get_variable_dup (D.41535_977, "rtp_video_max_bandwidth", 1, -1);



Registering new PHI nodes in block #408

Updating SSA information for statement D.48191_1546 = strtol (vbw_978, 0B, 10);

Updating SSA information for statement D.48190 = D.48191_1546;

Updating SSA information for statement v_979 = D.48190;



Registering new PHI nodes in block #409



Registering new PHI nodes in block #410

Updating SSA information for statement D.42385_981 = strlen (buf_144);

Updating SSA information for statement D.42387_983 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42386_982, D.42388_984, "b=AS:%d\n", bw_57);



Registering new PHI nodes in block #411



Registering new PHI nodes in block #412

Updating SSA information for statement D.41512_985 = session_72(D)->channel;

Updating SSA information for statement D.42391_986 = switch_channel_test_flag (D.41512_985, 106);



Registering new PHI nodes in block #413

Updating SSA information for statement D.42394_987 = strlen (buf_144);

Updating SSA information for statement D.42396_989 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42395_988, D.42397_990, "a=rtcp-fb:%d ccm fir\n", vp8_26);



Registering new PHI nodes in block #414



Registering new PHI nodes in block #415

Updating SSA information for statement D.42400_991 = strlen (buf_144);

Updating SSA information for statement D.42402_993 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42401_992, D.42403_994, "a=rtcp-fb:%d nack\n", vp8_26);



Registering new PHI nodes in block #416

Updating SSA information for statement D.42404_995 = strlen (buf_144);

Updating SSA information for statement D.42406_997 = strlen (buf_144);

Updating SSA information for statement D.42408_999 = v_engine_92->ssrc;

Updating SSA information for statement D.41935_1000 = smh_90->cname;

Updating SSA information for statement switch_snprintf (D.42405_996, D.42407_998, "a=ssrc:%u cname:%s\n", D.42408_999, D.41935_1000);

Updating SSA information for statement D.42409_1001 = strlen (buf_144);

Updating SSA information for statement D.42411_1003 = strlen (buf_144);

Updating SSA information for statement D.42408_1005 = v_engine_92->ssrc;

Updating SSA information for statement D.41719_1006 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.42410_1002, D.42412_1004, "a=ssrc:%u msid:%s v0\n", D.42408_1005, D.41719_1006);

Updating SSA information for statement D.42413_1007 = strlen (buf_144);

Updating SSA information for statement D.42415_1009 = strlen (buf_144);

Updating SSA information for statement D.42408_1011 = v_engine_92->ssrc;

Updating SSA information for statement D.41719_1012 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.42414_1008, D.42416_1010, "a=ssrc:%u mslabel:%s\n", D.42408_1011, D.41719_1012);

Updating SSA information for statement D.42417_1013 = strlen (buf_144);

Updating SSA information for statement D.42419_1015 = strlen (buf_144);

Updating SSA information for statement D.42408_1017 = v_engine_92->ssrc;

Updating SSA information for statement D.41719_1018 = smh_90->msid;

Updating SSA information for statement switch_snprintf (D.42418_1014, D.42420_1016, "a=ssrc:%u label:%sv0\n", D.42408_1017, D.41719_1018);

Updating SSA information for statement D.42421_1019 = strlen (buf_144);

Updating SSA information for statement D.42423_1021 = strlen (buf_144);

Updating SSA information for statement D.41952_1023 = ice_out_975->ufrag;

Updating SSA information for statement switch_snprintf (D.42422_1020, D.42424_1022, "a=ice-ufrag:%s\n", D.41952_1023);

Updating SSA information for statement D.42425_1024 = strlen (buf_144);

Updating SSA information for statement D.42427_1026 = strlen (buf_144);

Updating SSA information for statement D.41957_1028 = ice_out_975->pwd;

Updating SSA information for statement switch_snprintf (D.42426_1025, D.42428_1027, "a=ice-pwd:%s\n", D.41957_1028);

Updating SSA information for statement D.42429_1029 = strlen (buf_144);

Updating SSA information for statement D.42431_1031 = strlen (buf_144);

Updating SSA information for statement D.41962_1033 = ice_out_975->cands[0][0].transport;

Updating SSA information for statement D.41963_1034 = ice_out_975->cands[0][0].con_addr;

Updating SSA information for statement D.41964_1035 = ice_out_975->cands[0][0].con_port;

Updating SSA information for statement switch_snprintf (D.42430_1030, D.42432_1032, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_1033, c1_970, D.41963_1034, D.41965_1036);

Updating SSA information for statement D.42433_1037 = v_engine_92->local_sdp_ip;



Registering new PHI nodes in block #417

Updating SSA information for statement D.48194_1547 = MEM[(const char *)D.42433_1037];



Registering new PHI nodes in block #418



Registering new PHI nodes in block #419

Updating SSA information for statement D.48193 = D.48195_1548;

Updating SSA information for statement D.42434_1038 = D.48193;



Registering new PHI nodes in block #420

Updating SSA information for statement D.41963_1039 = ice_out_975->cands[0][0].con_addr;



Registering new PHI nodes in block #421

Updating SSA information for statement D.48198_1549 = MEM[(const char *)D.41963_1039];



Registering new PHI nodes in block #422



Registering new PHI nodes in block #423

Updating SSA information for statement D.48197 = D.48199_1550;

Updating SSA information for statement D.42437_1040 = D.48197;



Registering new PHI nodes in block #424

Updating SSA information for statement D.42433_1041 = v_engine_92->local_sdp_ip;

Updating SSA information for statement D.41963_1042 = ice_out_975->cands[0][0].con_addr;

Updating SSA information for statement D.39666_1043 = __builtin_strcmp (D.42433_1041, D.41963_1042);



Registering new PHI nodes in block #425

Updating SSA information for statement D.42106_1044 = v_engine_92->local_sdp_port;

Updating SSA information for statement D.41964_1045 = ice_out_975->cands[0][0].con_port;



Registering new PHI nodes in block #426

Updating SSA information for statement D.42444_1046 = strlen (buf_144);

Updating SSA information for statement D.42446_1048 = strlen (buf_144);

Updating SSA information for statement D.41962_1050 = ice_out_975->cands[0][0].transport;

Updating SSA information for statement D.41963_1051 = ice_out_975->cands[0][0].con_addr;

Updating SSA information for statement D.41964_1052 = ice_out_975->cands[0][0].con_port;

Updating SSA information for statement D.42433_1054 = v_engine_92->local_sdp_ip;

Updating SSA information for statement D.42106_1055 = v_engine_92->local_sdp_port;

Updating SSA information for statement switch_snprintf (D.42445_1047, D.42447_1049, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_1050, c3_972, D.41963_1051, D.41965_1053, D.42433_1054, D.42448_1056);



Registering new PHI nodes in block #427

Updating SSA information for statement D.42343_1057 = v_engine_92->rtcp_mux;



Registering new PHI nodes in block #428

Updating SSA information for statement D.41512_1061 = session_72(D)->channel;

Updating SSA information for statement D.42454_1062 = switch_channel_test_flag (D.41512_1061, 84);



Registering new PHI nodes in block #429

Updating SSA information for statement D.42455_1063 = strlen (buf_144);

Updating SSA information for statement D.42457_1065 = strlen (buf_144);

Updating SSA information for statement D.41962_1067 = ice_out_975->cands[0][0].transport;

Updating SSA information for statement D.41963_1068 = ice_out_975->cands[0][0].con_addr;

Updating SSA information for statement D.41964_1069 = ice_out_975->cands[0][0].con_port;

Updating SSA information for statement D.42343_1071 = v_engine_92->rtcp_mux;

Updating SSA information for statement switch_snprintf (D.42456_1064, D.42458_1066, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_1067, c2_971, D.41963_1068, D.42460_1073);

Updating SSA information for statement D.42433_1074 = v_engine_92->local_sdp_ip;



Registering new PHI nodes in block #430

Updating SSA information for statement D.48202_1551 = MEM[(const char *)D.42433_1074];



Registering new PHI nodes in block #431



Registering new PHI nodes in block #432

Updating SSA information for statement D.48201 = D.48203_1552;

Updating SSA information for statement D.42461_1075 = D.48201;



Registering new PHI nodes in block #433

Updating SSA information for statement D.42464_1076 = ice_out_975->cands[0][1].con_addr;



Registering new PHI nodes in block #434

Updating SSA information for statement D.48206_1553 = MEM[(const char *)D.42464_1076];



Registering new PHI nodes in block #435



Registering new PHI nodes in block #436

Updating SSA information for statement D.48205 = D.48207_1554;

Updating SSA information for statement D.42465_1077 = D.48205;



Registering new PHI nodes in block #437

Updating SSA information for statement D.42433_1078 = v_engine_92->local_sdp_ip;

Updating SSA information for statement D.42464_1079 = ice_out_975->cands[0][1].con_addr;

Updating SSA information for statement D.39675_1080 = __builtin_strcmp (D.42433_1078, D.42464_1079);



Registering new PHI nodes in block #438

Updating SSA information for statement D.42106_1081 = v_engine_92->local_sdp_port;

Updating SSA information for statement D.42470_1082 = ice_out_975->cands[0][1].con_port;



Registering new PHI nodes in block #439

Updating SSA information for statement D.42473_1083 = strlen (buf_144);

Updating SSA information for statement D.42475_1085 = strlen (buf_144);

Updating SSA information for statement D.41962_1087 = ice_out_975->cands[0][0].transport;

Updating SSA information for statement D.41963_1088 = ice_out_975->cands[0][0].con_addr;

Updating SSA information for statement D.41964_1089 = ice_out_975->cands[0][0].con_port;

Updating SSA information for statement D.42343_1091 = v_engine_92->rtcp_mux;

Updating SSA information for statement D.42433_1094 = v_engine_92->local_sdp_ip;

Updating SSA information for statement D.42106_1095 = v_engine_92->local_sdp_port;

Updating SSA information for statement D.42343_1097 = v_engine_92->rtcp_mux;

Updating SSA information for statement switch_snprintf (D.42474_1084, D.42476_1086, "a=candidate:%s 2 %s %u %s %d typ srflx generation 0\n", &tmp2, D.41962_1087, c4_973, D.41963_1088, D.42460_1093, D.42433_1094, D.42477_1099);



Registering new PHI nodes in block #440



Registering new PHI nodes in block #441

Updating SSA information for statement D.41512_1100 = session_72(D)->channel;

Updating SSA information for statement D.42480_1101 = switch_channel_test_flag (D.41512_1100, 92);



Registering new PHI nodes in block #442

Updating SSA information for statement D.41512_1102 = session_72(D)->channel;

Updating SSA information for statement D.42483_1103 = switch_channel_test_flag (D.41512_1102, 109);



Registering new PHI nodes in block #443



Registering new PHI nodes in block #452

Updating SSA information for statement D.42486_1105 = smh_90->crypto_suite_order[i_58];



Registering new PHI nodes in block #444

Updating SSA information for statement D.42486_1106 = smh_90->crypto_suite_order[i_58];

Updating SSA information for statement j_1107 = SUITES[D.42486_1106].type;

Updating SSA information for statement D.41736_1108 = a_engine_91->crypto_type;



Registering new PHI nodes in block #445

Updating SSA information for statement D.41736_1109 = a_engine_91->crypto_type;



Registering new PHI nodes in block #446

Updating SSA information for statement D.42490_1110 = a_engine_91->ssec[j_1107].local_crypto_key;



Registering new PHI nodes in block #447

Updating SSA information for statement D.48210_1555 = MEM[(const char *)D.42490_1110];



Registering new PHI nodes in block #448



Registering new PHI nodes in block #449

Updating SSA information for statement D.48209 = D.48211_1556;

Updating SSA information for statement D.42491_1111 = D.48209;



Registering new PHI nodes in block #450

Updating SSA information for statement D.42494_1112 = strlen (buf_144);

Updating SSA information for statement D.42496_1114 = strlen (buf_144);

Updating SSA information for statement D.42498_1116 = v_engine_92->ssec[j_1107].local_crypto_key;

Updating SSA information for statement switch_snprintf (D.42495_1113, D.42497_1115, "a=crypto:%s\n", D.42498_1116);



Registering new PHI nodes in block #451



Registering new PHI nodes in block #453



Registering new PHI nodes in block #454

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 6892, session_72(D), 7, "Adding video a=zrtp-hash:%s\n", local_sdp_video_zrtp_hash_84);

Updating SSA information for statement D.42501_1118 = strlen (buf_144);

Updating SSA information for statement D.42503_1120 = strlen (buf_144);

Updating SSA information for statement switch_snprintf (D.42502_1119, D.42504_1121, "a=zrtp-hash:%s\n", local_sdp_video_zrtp_hash_84);



Registering new PHI nodes in block #455

Updating SSA information for statement D.41512_1122 = session_72(D)->channel;

Updating SSA information for statement D.42505_1123 = switch_channel_test_flag (D.41512_1122, 109);



Registering new PHI nodes in block #456

Updating SSA information for statement D.41512_1124 = session_72(D)->channel;

Updating SSA information for statement D.42507_1125 = switch_channel_test_flag (D.41512_1124, 92);



Registering new PHI nodes in block #457

Updating SSA information for statement D.42058_1126 = smh_90->crypto_mode;



Registering new PHI nodes in block #458

Updating SSA information for statement D.42058_1127 = smh_90->crypto_mode;



Registering new PHI nodes in block #459



Registering new PHI nodes in block #461

Updating SSA information for statement map.33_1129 = map;



Registering new PHI nodes in block #462

Updating SSA information for statement switch_event_destroy (&map);



Registering new PHI nodes in block #463

Updating SSA information for statement ptmap.39_1130 = ptmap;



Registering new PHI nodes in block #464

Updating SSA information for statement switch_event_destroy (&ptmap);



Registering new PHI nodes in block #465

Updating SSA information for statement switch_core_media_set_local_sdp (session_72(D), buf_144, 1);



Registering new PHI nodes in block #466

Updating SSA information for statement free (buf_144);



Registering new PHI nodes in block #467



Symbols to be put in SSA form

{ .MEM D.48130 D.48134 D.48138 D.48142 D.48146 D.48150 D.48154 D.48158 D.48162 D.48166 D.48170 D.48174 D.48178 D.48182 D.48186 D.48190 D.48193 D.48197 D.48201 D.48205 D.48209 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 468
Number of blocks to update: 467 (100%)

Affected blocks


No longer having address taken: already_did
No longer having address taken: already_did
Scope blocks after cleanups:

{ Scope block #0 
  char * buf;
  int ptime;
  uint32_t rate;
  uint32_t v_port;
  int use_cng;
  const char * val;
  const char * family;
  const char * pass_fmtp;
  const char * ov_fmtp;
  const char * append_audio;
  const char * append_video;
  char srbuf[128];
  const char * var_val;
  const char * username;
  const char * fmtp_out;
  const char * fmtp_out_var;
  struct switch_event_t * map;
  struct switch_event_t * ptmap;
  const char * local_sdp_audio_zrtp_hash;
  const char * local_sdp_video_zrtp_hash;
  const char * tmp;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  struct ice_t * ice_out;
  int vp8;
  int red;
  struct payload_map_t * pmap;
  int is_outbound;
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_gen_local_sdp";
  static const char __func__[32] = "switch_core_media_gen_local_sdp";

  { Scope block #382 src/switch_core_media.c:6449 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #383 Originating from :#0 

    }

  }

  { Scope block #384 src/switch_core_media.c:6361 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #385 Originating from :#0 

    }

  }

  { Scope block #386 src/switch_core_media.c:6356 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #387 Originating from :#0 

    }

  }

  { Scope block #388 src/switch_core_media.c:6227 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #389 Originating from :#0 

    }

  }

  { Scope block #390 src/switch_core_media.c:6203 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #391 Originating from :#0 

    }

  }

  { Scope block #392 src/switch_core_media.c:6169 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #393 Originating from :#0 

    }

  }

  { Scope block #394 
    int i;

    { Scope block #395 
      struct switch_core_session_t * orig_session;

      { Scope block #396 
        const struct switch_codec_implementation_t * imp;
        switch_payload_t orig_pt;
        char * orig_fmtp;

      }

    }

  }

  { Scope block #397 
    char tmp1[11];
    char tmp2[11];
    uint32_t c1;
    uint32_t c2;
    uint32_t c3;
    uint32_t c4;

    { Scope block #398 src/switch_core_media.c:6430 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #399 Originating from :#0 

      }

    }

    { Scope block #400 src/switch_core_media.c:6430 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #401 Originating from :#0 

      }

    }

    { Scope block #402 src/switch_core_media.c:6408 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #403 Originating from :#0 

      }

    }

    { Scope block #404 src/switch_core_media.c:6408 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #405 Originating from :#0 

      }

    }

    { Scope block #406 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

    { Scope block #407 
      size_t __s1_len; (unused)
      size_t __s2_len; (unused)

    }

  }

  { Scope block #408 
    int i;
    int cur_ptime;
    int this_ptime;
    int cng_type;
    const char * mult;

    { Scope block #409 
      char * bp;
      int both;

    }

    { Scope block #410 
      const struct switch_codec_implementation_t * imp;

      { Scope block #411 
        char * bp;
        int both;

      }

    }

  }

  { Scope block #412 
    int loops;

    { Scope block #413 src/switch_core_media.c:6759 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #414 Originating from :#0 

      }

    }

    { Scope block #415 
      struct payload_map_t * pmap;

    }

    { Scope block #416 
      int i;
      int already_did[128];

      { Scope block #417 
        const struct switch_codec_implementation_t * imp;

      }

    }

    { Scope block #418 
      const char * of;
      struct payload_map_t * pmap;

    }

    { Scope block #419 
      int i;
      int already_did[128];

      { Scope block #420 
        const struct switch_codec_implementation_t * imp;
        char * fmtp;
        uint32_t ianacode;
        int channels;

        { Scope block #421 src/switch_core_media.c:6746 Originating from :  static int _zstr (const char *); 
          const char * s; (unused)

          { Scope block #422 Originating from :#0 

          }

        }

        { Scope block #423 src/switch_core_media.c:6743 Originating from :  static int _zstr (const char *); 
          const char * s; (unused)

          { Scope block #424 Originating from :#0 

          }

        }

        { Scope block #425 src/switch_core_media.c:6741 Originating from :  static int _zstr (const char *); 
          const char * s; (unused)

          { Scope block #426 Originating from :#0 

          }

        }

        { Scope block #427 src/switch_core_media.c:6729 Originating from :  static int _zstr (const char *); 
          const char * s; (unused)

          { Scope block #428 Originating from :#0 

          }

        }

      }

    }

    { Scope block #429 
      char tmp1[11];
      char tmp2[11];
      uint32_t c1;
      uint32_t c2;
      uint32_t c3;
      uint32_t c4;
      const char * vbw;
      int bw;

      { Scope block #430 src/switch_core_media.c:6856 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #431 Originating from :#0 

        }

      }

      { Scope block #432 src/switch_core_media.c:6856 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #433 Originating from :#0 

        }

      }

      { Scope block #434 src/switch_core_media.c:6835 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #435 Originating from :#0 

        }

      }

      { Scope block #436 src/switch_core_media.c:6835 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #437 Originating from :#0 

        }

      }

      { Scope block #438 
        int v;

        { Scope block #439 src/switch_core_media.c:6801 Originating from :  extern int atoi (const char *); 
          const char * __nptr; (unused)

          { Scope block #440 Originating from :#0 

          }

        }

      }

      { Scope block #441 
        size_t __s1_len; (unused)
        size_t __s2_len; (unused)

      }

      { Scope block #442 
        size_t __s1_len; (unused)
        size_t __s2_len; (unused)

      }

    }

    { Scope block #443 
      int i;

      { Scope block #444 
        switch_rtp_crypto_key_type_t j;

        { Scope block #445 src/switch_core_media.c:6883 Originating from :  static int _zstr (const char *); 
          const char * s; (unused)

          { Scope block #446 Originating from :#0 

          }

        }

      }

    }

  }

}
switch_core_media_gen_local_sdp (struct switch_core_session_t * session, switch_sdp_type_t sdp_type, const char * ip, switch_port_t port, const char * sr, int force)
{
  int D.48211;
  const char D.48210;
  int D.48209;
  int D.48207;
  const char D.48206;
  int D.48205;
  int D.48203;
  const char D.48202;
  int D.48201;
  int D.48199;
  const char D.48198;
  int D.48197;
  int D.48195;
  const char D.48194;
  int D.48193;
  int D.48191;
  int D.48190;
  int D.48188;
  const char D.48187;
  int D.48186;
  int D.48184;
  const char D.48183;
  int D.48182;
  int D.48180;
  const char D.48179;
  int D.48178;
  int D.48176;
  const char D.48175;
  int D.48174;
  int D.48172;
  const char D.48171;
  int D.48170;
  int D.48168;
  const char D.48167;
  int D.48166;
  int D.48164;
  const char D.48163;
  int D.48162;
  int D.48160;
  const char D.48159;
  int D.48158;
  int D.48156;
  const char D.48155;
  int D.48154;
  int D.48152;
  const char D.48151;
  int D.48150;
  int D.48148;
  const char D.48147;
  int D.48146;
  int D.48144;
  const char D.48143;
  int D.48142;
  int D.48140;
  const char D.48139;
  int D.48138;
  int D.48136;
  const char D.48135;
  int D.48134;
  int D.48132;
  const char D.48131;
  int D.48130;
  switch_rtp_crypto_key_type_t j;
  int i;
  int v;
  int bw;
  const char * vbw;
  uint32_t c4;
  uint32_t c3;
  uint32_t c2;
  uint32_t c1;
  char tmp2[11];
  char tmp1[11];
  int channels;
  uint32_t ianacode;
  char * fmtp;
  const struct switch_codec_implementation_t * imp;
  int already_did[128];
  int i;
  struct payload_map_t * pmap;
  const char * of;
  const struct switch_codec_implementation_t * imp;
  int already_did[128];
  int i;
  struct payload_map_t * pmap;
  int loops;
  int both;
  char * bp;
  const struct switch_codec_implementation_t * imp;
  int both;
  char * bp;
  const char * mult;
  int cng_type;
  int this_ptime;
  int cur_ptime;
  int i;
  uint32_t c4;
  uint32_t c3;
  uint32_t c2;
  uint32_t c1;
  char tmp2[11];
  char tmp1[11];
  char * orig_fmtp;
  switch_payload_t orig_pt;
  const struct switch_codec_implementation_t * imp;
  struct switch_core_session_t * orig_session;
  int i;
  static const char __func__[32] = "switch_core_media_gen_local_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_gen_local_sdp";
  int is_outbound;
  struct payload_map_t * pmap;
  int red;
  int vp8;
  struct ice_t * ice_out;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  const char * tmp;
  const char * local_sdp_video_zrtp_hash;
  const char * local_sdp_audio_zrtp_hash;
  struct switch_event_t * ptmap;
  struct switch_event_t * map;
  const char * fmtp_out_var;
  const char * fmtp_out;
  const char * username;
  const char * var_val;
  char srbuf[128];
  const char * append_video;
  const char * append_audio;
  const char * ov_fmtp;
  const char * pass_fmtp;
  const char * family;
  const char * val;
  int use_cng;
  uint32_t v_port;
  uint32_t rate;
  int ptime;
  char * buf;
  struct switch_event_t * ptmap.39;
  uint32_t D.42507;
  uint32_t D.42505;
  size_t D.42504;
  size_t D.42503;
  char * D.42502;
  size_t D.42501;
  char * D.42498;
  size_t D.42497;
  size_t D.42496;
  char * D.42495;
  size_t D.42494;
  int D.42491;
  char * D.42490;
  switch_rtp_crypto_key_type_t D.42486;
  uint32_t D.42483;
  uint32_t D.42480;
  int D.42477;
  size_t D.42476;
  size_t D.42475;
  char * D.42474;
  size_t D.42473;
  switch_port_t D.42470;
  int D.39675;
  int D.42465;
  char * D.42464;
  int D.42461;
  int D.42460;
  int D.42459;
  size_t D.42458;
  size_t D.42457;
  char * D.42456;
  size_t D.42455;
  uint32_t D.42454;
  _Bool D.42452;
  _Bool D.42451;
  int D.42448;
  size_t D.42447;
  size_t D.42446;
  char * D.42445;
  size_t D.42444;
  int D.39666;
  int D.42437;
  int D.42434;
  char * D.42433;
  size_t D.42432;
  size_t D.42431;
  char * D.42430;
  size_t D.42429;
  size_t D.42428;
  size_t D.42427;
  char * D.42426;
  size_t D.42425;
  size_t D.42424;
  size_t D.42423;
  char * D.42422;
  size_t D.42421;
  size_t D.42420;
  size_t D.42419;
  char * D.42418;
  size_t D.42417;
  size_t D.42416;
  size_t D.42415;
  char * D.42414;
  size_t D.42413;
  size_t D.42412;
  size_t D.42411;
  char * D.42410;
  size_t D.42409;
  uint32_t D.42408;
  size_t D.42407;
  size_t D.42406;
  char * D.42405;
  size_t D.42404;
  size_t D.42403;
  size_t D.42402;
  char * D.42401;
  size_t D.42400;
  size_t D.42397;
  size_t D.42396;
  char * D.42395;
  size_t D.42394;
  uint32_t D.42391;
  size_t D.42388;
  size_t D.42387;
  char * D.42386;
  size_t D.42385;
  uint8_t D.42378;
  uint8_t D.42374;
  char * iftmp.38;
  uint8_t D.42369;
  char * iftmp.37;
  size_t D.42367;
  size_t D.42366;
  char * D.42365;
  size_t D.42364;
  short unsigned int D.42361;
  short unsigned int D.42360;
  uint32_t D.42359;
  size_t D.42358;
  size_t D.42357;
  char * D.42356;
  size_t D.42355;
  size_t D.42353;
  size_t D.42352;
  char * D.42351;
  size_t D.42350;
  size_t D.42349;
  size_t D.42348;
  char * D.42347;
  size_t D.42346;
  int8_t D.42343;
  char[192] * D.42340;
  size_t D.42339;
  size_t D.42338;
  char * D.42337;
  size_t D.42336;
  int D.42333;
  char * D.42332;
  uint32_t D.42329;
  uint32_t D.42328;
  size_t D.42324;
  size_t D.42323;
  char * D.42322;
  size_t D.42321;
  int D.42318;
  int D.42315;
  int D.42312;
  int D.42309;
  char * D.42306;
  int D.42300;
  size_t D.42299;
  size_t D.42298;
  char * D.42297;
  size_t D.42296;
  const uint32_t D.42294;
  size_t D.42293;
  size_t D.42292;
  char * D.42291;
  size_t D.42290;
  int D.42285;
  int D.42282;
  int D.42281;
  const uint8_t D.42280;
  char * const D.42279;
  int D.42274;
  uint32_t D.42269;
  switch_call_direction_t D.42266;
  const switch_codec_type_t D.42263;
  switch_payload_t D.42262;
  const char D.42255;
  unsigned int D.42253;
  size_t D.42252;
  const char D.42249;
  const char * iftmp.36;
  char * iftmp.35;
  size_t D.42246;
  size_t D.42245;
  char * D.42244;
  size_t D.42243;
  uint8_t D.42240;
  uint32_t D.42238;
  char * D.42237;
  int D.42236;
  size_t D.42235;
  size_t D.42234;
  char * D.42233;
  size_t D.42232;
  uint8_t D.42229;
  switch_payload_t D.42226;
  int32_t D.42223;
  size_t D.42222;
  size_t D.42221;
  char * D.42220;
  size_t D.42219;
  const char * D.42209;
  uint32_t D.42205;
  long unsigned int D.42204;
  int D.42203;
  size_t D.42202;
  size_t D.42201;
  char * D.42200;
  size_t D.42199;
  int D.42196;
  int D.42193;
  char * D.42192;
  size_t D.42189;
  size_t D.42188;
  char * D.42187;
  size_t D.42186;
  const int D.42185;
  size_t D.42182;
  size_t D.42181;
  char * D.42180;
  size_t D.42179;
  int D.42176;
  int D.42175;
  signed char D.42172;
  switch_payload_t D.42171;
  uint32_t D.42168;
  switch_call_direction_t D.42165;
  const switch_codec_type_t D.42162;
  uint8_t D.42158;
  int D.42156;
  size_t D.42155;
  size_t D.42154;
  char * D.42153;
  size_t D.42152;
  switch_payload_t D.42149;
  switch_payload_t D.42148;
  int32_t D.42145;
  int D.42144;
  switch_payload_t D.42143;
  struct payload_map_t * D.42142;
  size_t D.42141;
  size_t D.42140;
  char * D.42139;
  size_t D.42138;
  uint8_t D.42135;
  const char * D.42134;
  uint32_t D.42133;
  switch_call_direction_t D.42131;
  uint32_t D.42129;
  int iftmp.34;
  size_t D.42122;
  size_t D.42121;
  char * D.42120;
  size_t D.42119;
  short unsigned int D.42118;
  uint32_t D.42115;
  switch_port_t D.42112;
  uint32_t D.42109;
  switch_port_t D.42106;
  uint32_t D.42103;
  switch_call_direction_t D.42100;
  uint32_t D.42097;
  size_t D.42096;
  size_t D.42095;
  uint32_t D.42092;
  uint32_t D.42090;
  size_t D.42085;
  size_t D.42084;
  size_t D.42083;
  uint32_t D.42082;
  uint32_t D.42081;
  int D.42074;
  int D.42072;
  char * const D.42071;
  const int D.42068;
  const switch_codec_type_t D.42065;
  size_t D.42064;
  size_t D.42063;
  switch_rtp_crypto_mode_t D.42058;
  size_t D.42057;
  struct switch_event_t * map.33;
  uint32_t D.42055;
  uint32_t D.42054;
  uint32_t D.42048;
  uint32_t D.42046;
  int iftmp.32;
  int D.42042;
  uint32_t D.42039;
  int32_t D.42030;
  size_t D.42026;
  size_t D.42025;
  char * D.42024;
  size_t D.42023;
  uint32_t D.42020;
  int D.42017;
  char * D.42016;
  uint32_t D.42013;
  int D.42010;
  size_t D.42009;
  size_t D.42008;
  char * D.42007;
  size_t D.42006;
  int D.39607;
  int D.41999;
  int D.41996;
  int D.41995;
  int D.41994;
  size_t D.41993;
  size_t D.41992;
  char * D.41991;
  size_t D.41990;
  uint32_t D.41989;
  _Bool D.41987;
  _Bool D.41986;
  _Bool D.41985;
  int D.41982;
  size_t D.41981;
  size_t D.41980;
  char * D.41979;
  size_t D.41978;
  switch_port_t D.41975;
  int D.39598;
  int D.41970;
  int D.41967;
  char * D.41966;
  int D.41965;
  switch_port_t D.41964;
  char * D.41963;
  char * D.41962;
  size_t D.41961;
  size_t D.41960;
  char * D.41959;
  size_t D.41958;
  char * D.41957;
  size_t D.41956;
  size_t D.41955;
  char * D.41954;
  size_t D.41953;
  char * D.41952;
  size_t D.41951;
  size_t D.41950;
  char * D.41949;
  size_t D.41948;
  size_t D.41947;
  size_t D.41946;
  char * D.41945;
  size_t D.41944;
  size_t D.41943;
  size_t D.41942;
  char * D.41941;
  size_t D.41940;
  size_t D.41939;
  size_t D.41938;
  char * D.41937;
  size_t D.41936;
  char * D.41935;
  uint32_t D.41934;
  size_t D.41933;
  size_t D.41932;
  char * D.41931;
  size_t D.41930;
  uint8_t D.41927;
  int D.41926;
  size_t D.41925;
  size_t D.41924;
  char * D.41923;
  size_t D.41922;
  size_t D.41920;
  size_t D.41919;
  char * D.41918;
  size_t D.41917;
  size_t D.41916;
  size_t D.41915;
  char * D.41914;
  size_t D.41913;
  int8_t D.41910;
  char[192] * D.41907;
  size_t D.41906;
  size_t D.41905;
  char * D.41904;
  size_t D.41903;
  int D.41900;
  char * D.41899;
  size_t D.41898;
  size_t D.41897;
  char * D.41896;
  size_t D.41895;
  int D.41892;
  size_t D.41891;
  size_t D.41890;
  char * D.41889;
  size_t D.41888;
  size_t D.41885;
  size_t D.41884;
  char * D.41883;
  size_t D.41882;
  const char D.41876;
  unsigned int D.41874;
  size_t D.41873;
  const char D.41870;
  const char * iftmp.31;
  char * iftmp.30;
  size_t D.41867;
  size_t D.41866;
  char * D.41865;
  size_t D.41864;
  size_t D.41859;
  size_t D.41858;
  char * D.41857;
  size_t D.41856;
  size_t D.41852;
  size_t D.41851;
  char * D.41850;
  size_t D.41849;
  int32_t D.41846;
  size_t D.41845;
  size_t D.41844;
  char * D.41843;
  size_t D.41842;
  size_t D.41840;
  size_t D.41839;
  char * D.41838;
  size_t D.41837;
  uint32_t D.41834;
  uint32_t D.41831;
  int32_t D.41829;
  const int D.41825;
  _Bool D.41822;
  _Bool D.41821;
  _Bool D.41820;
  const struct switch_codec_implementation_t * D.41819;
  uint32_t D.41817;
  char * D.41816;
  size_t D.41815;
  size_t D.41814;
  char * D.41813;
  size_t D.41812;
  int32_t D.41807;
  size_t D.41806;
  size_t D.41805;
  char * D.41804;
  size_t D.41803;
  size_t D.41800;
  size_t D.41799;
  char * D.41798;
  size_t D.41797;
  int D.41795;
  switch_payload_t D.41794;
  size_t D.41793;
  size_t D.41792;
  char * D.41791;
  size_t D.41790;
  int D.41787;
  char * D.41786;
  int D.41783;
  size_t D.41782;
  size_t D.41781;
  char * D.41780;
  size_t D.41779;
  size_t D.41778;
  size_t D.41777;
  char * D.41776;
  size_t D.41775;
  int32_t D.41770;
  size_t D.41769;
  size_t D.41768;
  char * D.41767;
  size_t D.41766;
  uint32_t D.41763;
  int32_t D.41761;
  uint8_t D.41757;
  int D.41755;
  size_t D.41754;
  size_t D.41753;
  char * D.41752;
  size_t D.41751;
  switch_payload_t D.41748;
  struct switch_mutex_t * D.41747;
  int32_t D.41744;
  int D.41743;
  switch_payload_t D.41742;
  size_t D.41741;
  size_t D.41740;
  char * D.41739;
  size_t D.41738;
  const char * D.41737;
  switch_rtp_crypto_key_type_t D.41736;
  uint32_t D.41734;
  uint8_t D.41732;
  int iftmp.29;
  int D.41727;
  size_t D.41726;
  size_t D.41725;
  char * D.41724;
  size_t D.41723;
  uint8_t D.41720;
  char * D.41719;
  size_t D.41718;
  size_t D.41717;
  char * D.41716;
  size_t D.41715;
  uint32_t D.41712;
  char * D.41708;
  char[4] * iftmp.28;
  int D.41704;
  int D.41703;
  unsigned int D.41700;
  switch_core_media_NDLB_t D.41699;
  uint32_t D.41696;
  int D.41693;
  const char * D.41692;
  uint32_t D.41689;
  unsigned int D.41688;
  unsigned int D.41687;
  unsigned int D.41686;
  time_t D.41685;
  uint32_t D.41682;
  int D.41676;
  char * D.41673;
  char * D.41664;
  uint32_t D.41655;
  uint32_t D.41653;
  int D.41650;
  _Bool D.41647;
  _Bool D.41646;
  _Bool D.41645;
  int D.41642;
  uint32_t D.41634;
  int D.41633;
  const int D.41632;
  const uint32_t D.41631;
  uint32_t D.41630;
  unsigned char D.41629;
  char * D.41628;
  char * orig_fmtp.27;
  switch_payload_t orig_pt.26;
  switch_status_t D.41622;
  char * const D.41621;
  switch_media_type_t D.41620;
  const switch_codec_type_t D.41619;
  struct switch_core_session_t * orig_session.25;
  int D.41612;
  _Bool D.41609;
  _Bool D.41608;
  _Bool D.41607;
  switch_payload_t D.41606;
  int32_t D.41603;
  int D.41602;
  int D.41599;
  switch_payload_t D.41596;
  switch_core_media_dtmf_t D.41593;
  switch_payload_t D.41590;
  int D.41587;
  const switch_payload_t D.41586;
  const struct switch_codec_implementation_t * D.41585;
  uint32_t D.41581;
  int D.41578;
  int D.41577;
  int D.41575;
  int32_t D.41572;
  struct payload_map_t * D.41566;
  int D.41565;
  const char * D.41564;
  uint32_t D.41562;
  int D.41557;
  int D.41554;
  int D.41551;
  const char * D.41550;
  uint32_t D.41547;
  uint32_t D.41546;
  uint32_t D.41544;
  int D.41538;
  struct switch_channel_t * D.41535;
  struct switch_core_session_t * D.41534;
  int D.41531;
  const char * D.41530;
  char * D.41527;
  const char * D.41526;
  char * D.41523;
  struct switch_core_media_params_t * D.41522;
  int D.41519;
  const char * D.41518;
  switch_call_direction_t D.41513;
  struct switch_channel_t * D.41512;

<bb 2>:
  ptime_69 = 0;
  # DEBUG ptime => ptime_69
  rate_70 = 0;
  # DEBUG rate => rate_70
  use_cng_71 = 1;
  # DEBUG use_cng => use_cng_71
  D.41512_73 = session_72(D)->channel;
  pass_fmtp_74 = switch_channel_get_variable_dup (D.41512_73, "rtp_video_fmtp", 1, -1);
  # DEBUG pass_fmtp => pass_fmtp_74
  D.41512_75 = session_72(D)->channel;
  ov_fmtp_76 = switch_channel_get_variable_dup (D.41512_75, "rtp_force_video_fmtp", 1, -1);
  # DEBUG ov_fmtp => ov_fmtp_76
  D.41512_77 = session_72(D)->channel;
  append_audio_78 = switch_channel_get_variable_dup (D.41512_77, "rtp_append_audio_sdp", 1, -1);
  # DEBUG append_audio => append_audio_78
  D.41512_79 = session_72(D)->channel;
  append_video_80 = switch_channel_get_variable_dup (D.41512_79, "rtp_append_video_sdp", 1, -1);
  # DEBUG append_video => append_video_80
  srbuf = "";
  D.41512_81 = session_72(D)->channel;
  fmtp_out_var_82 = switch_channel_get_variable_dup (D.41512_81, "rtp_force_audio_fmtp", 1, -1);
  # DEBUG fmtp_out_var => fmtp_out_var_82
  map = 0B;
  ptmap = 0B;
  local_sdp_audio_zrtp_hash_83 = switch_core_media_get_zrtp_hash (session_72(D), 0, 1);
  # DEBUG local_sdp_audio_zrtp_hash => local_sdp_audio_zrtp_hash_83
  local_sdp_video_zrtp_hash_84 = switch_core_media_get_zrtp_hash (session_72(D), 1, 1);
  # DEBUG local_sdp_video_zrtp_hash => local_sdp_video_zrtp_hash_84
  vp8_85 = 0;
  # DEBUG vp8 => vp8_85
  red_86 = 0;
  # DEBUG red => red_86
  D.41512_87 = session_72(D)->channel;
  D.41513_88 = switch_channel_direction (D.41512_87);
  is_outbound_89 = D.41513_88 == 1;
  # DEBUG is_outbound => is_outbound_89
  if (session_72(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 6025, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_90 = session_72(D)->media_handle;
  # DEBUG smh => smh_90
  if (smh_90 == 0B)
    goto <bb 467>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_91 = &smh_90->engines;
  # DEBUG a_engine => a_engine_91
  v_engine_92 = &smh_90->engines[1];
  # DEBUG v_engine => v_engine_92
  D.41512_93 = session_72(D)->channel;
  D.41518_94 = switch_channel_get_variable_dup (D.41512_93, "rtcp_mux", 1, -1);
  D.41519_95 = switch_true (D.41518_94);
  if (D.41519_95 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  a_engine_91->rtcp_mux = 1;
  v_engine_92->rtcp_mux = 1;

<bb 7>:
  D.41522_96 = smh_90->mparams;
  D.41523_97 = D.41522_96->rtcp_audio_interval_msec;
  if (D.41523_97 == 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.41522_98 = smh_90->mparams;
  D.41512_99 = session_72(D)->channel;
  D.41526_100 = switch_channel_get_variable_dup (D.41512_99, "rtcp_audio_interval_msec", 1, -1);
  D.41522_98->rtcp_audio_interval_msec = D.41526_100;

<bb 9>:
  D.41522_101 = smh_90->mparams;
  D.41527_102 = D.41522_101->rtcp_video_interval_msec;
  if (D.41527_102 == 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  D.41522_103 = smh_90->mparams;
  D.41512_104 = session_72(D)->channel;
  D.41530_105 = switch_channel_get_variable_dup (D.41512_104, "rtcp_video_interval_msec", 1, -1);
  D.41522_103->rtcp_video_interval_msec = D.41530_105;

<bb 11>:
  D.41531_106 = dtls_ok (session_72(D));
  if (D.41531_106 != 0)
    goto <bb 12>;
  else
    goto <bb 15>;

<bb 12>:
  D.41534_107 = smh_90->session;
  D.41535_108 = D.41534_107->channel;
  tmp_109 = switch_channel_get_variable_dup (D.41535_108, "webrtc_enable_dtls", 1, -1);
  # DEBUG tmp => tmp_109
  if (tmp_109 != 0B)
    goto <bb 13>;
  else
    goto <bb 15>;

<bb 13>:
  D.41538_110 = switch_false (tmp_109);
  if (D.41538_110 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.41534_111 = smh_90->session;
  D.41535_112 = D.41534_111->channel;
  switch_channel_clear_flag (D.41535_112, 111);
  D.41534_113 = smh_90->session;
  D.41535_114 = D.41534_113->channel;
  switch_channel_clear_flag (D.41535_114, 109);

<bb 15>:
  if (is_outbound_89 != 0)
    goto <bb 18>;
  else
    goto <bb 16>;

<bb 16>:
  D.41512_115 = session_72(D)->channel;
  D.41544_116 = switch_channel_test_flag (D.41512_115, 84);
  if (D.41544_116 != 0)
    goto <bb 18>;
  else
    goto <bb 17>;

<bb 17>:
  D.41512_117 = session_72(D)->channel;
  D.41546_118 = switch_channel_test_flag (D.41512_117, 112);
  if (D.41546_118 != 0)
    goto <bb 18>;
  else
    goto <bb 27>;

<bb 18>:
  D.41512_119 = session_72(D)->channel;
  D.41547_120 = switch_channel_test_flag (D.41512_119, 106);
  if (D.41547_120 == 0)
    goto <bb 19>;
  else
    goto <bb 21>;

<bb 19>:
  D.41512_121 = session_72(D)->channel;
  D.41550_122 = switch_channel_get_variable_dup (D.41512_121, "media_webrtc", 1, -1);
  D.41551_123 = switch_true (D.41550_122);
  if (D.41551_123 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.41512_124 = session_72(D)->channel;
  switch_channel_set_flag_value (D.41512_124, 106, 1);
  D.41512_125 = session_72(D)->channel;
  switch_channel_set_flag_value (D.41512_125, 108, 1);
  D.41522_126 = smh_90->mparams;
  D.41522_126->rtcp_audio_interval_msec = "5000";
  D.41522_127 = smh_90->mparams;
  D.41522_127->rtcp_video_interval_msec = "5000";

<bb 21>:
  D.41554_128 = switch_rtp_has_dtls ();
  if (D.41554_128 != 0)
    goto <bb 22>;
  else
    goto <bb 26>;

<bb 22>:
  D.41557_129 = dtls_ok (session_72(D));
  if (D.41557_129 != 0)
    goto <bb 23>;
  else
    goto <bb 26>;

<bb 23>:
  D.41512_130 = session_72(D)->channel;
  D.41562_131 = switch_channel_test_flag (D.41512_130, 106);
  if (D.41562_131 != 0)
    goto <bb 25>;
  else
    goto <bb 24>;

<bb 24>:
  D.41534_132 = smh_90->session;
  D.41535_133 = D.41534_132->channel;
  D.41564_134 = switch_channel_get_variable_dup (D.41535_133, "rtp_use_dtls", 1, -1);
  D.41565_135 = switch_true (D.41564_134);
  if (D.41565_135 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.41534_136 = smh_90->session;
  D.41535_137 = D.41534_136->channel;
  switch_channel_set_flag_value (D.41535_137, 109, 1);
  D.41534_138 = smh_90->session;
  D.41535_139 = D.41534_138->channel;
  switch_channel_set_flag_value (D.41535_139, 92, 1);
  generate_local_fingerprint (smh_90, 0);

<bb 26>:
  switch_core_session_parse_crypto_prefs (session_72(D));
  switch_core_session_check_outgoing_crypto (session_72(D));

<bb 27>:
  D.41566_140 = a_engine_91->cur_payload_map;
  fmtp_out_141 = D.41566_140->fmtp_out;
  # DEBUG fmtp_out => fmtp_out_141
  D.41522_142 = smh_90->mparams;
  username_143 = D.41522_142->sdp_username;
  # DEBUG username => username_143
  buf_144 = calloc (1, 65536);
  # DEBUG buf => buf_144
  if (buf_144 == 0B)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  __assert_fail ("(buf = calloc(1, (65536)))", "src/switch_core_media.c", 6078, &__PRETTY_FUNCTION__);

<bb 29>:
  switch_core_media_check_dtmf_type (session_72(D));
  D.41572_145 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.41572_145 != 0)
    goto <bb 34>;
  else
    goto <bb 30>;

<bb 30>:
  D.41512_146 = session_72(D)->channel;
  val_147 = switch_channel_get_variable_dup (D.41512_146, "supress_cng", 1, -1);
  # DEBUG val => val_147
  if (val_147 != 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  D.41575_148 = switch_true (val_147);
  if (D.41575_148 != 0)
    goto <bb 34>;
  else
    goto <bb 32>;

<bb 32>:
  D.41512_149 = session_72(D)->channel;
  val_150 = switch_channel_get_variable_dup (D.41512_149, "suppress_cng", 1, -1);
  # DEBUG val => val_150
  if (val_150 != 0B)
    goto <bb 33>;
  else
    goto <bb 35>;

<bb 33>:
  D.41577_151 = switch_true (val_150);
  if (D.41577_151 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  use_cng_152 = 0;
  # DEBUG use_cng => use_cng_152
  D.41522_153 = smh_90->mparams;
  D.41522_153->cng_pt = 0;

<bb 35>:
  # use_cng_17 = PHI <use_cng_71(32), use_cng_71(33), use_cng_152(34)>
  # DEBUG use_cng => use_cng_17
  D.41578_154 = smh_90->payload_space;
  if (D.41578_154 == 0)
    goto <bb 36>;
  else
    goto <bb 62>;

<bb 36>:
  D.41512_155 = session_72(D)->channel;
  D.41581_156 = switch_channel_test_flag (D.41512_155, 106);
  if (D.41581_156 != 0)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  smh_90->payload_space = 102;
  goto <bb 39>;

<bb 38>:
  smh_90->payload_space = 98;

<bb 39>:
  i_157 = 0;
  # DEBUG i => i_157
  goto <bb 41>;

<bb 40>:
  D.41585_160 = smh_90->codecs[i_36];
  D.41586_161 = D.41585_160->ianacode;
  smh_90->ianacodes[i_36] = D.41586_161;
  i_162 = i_36 + 1;
  # DEBUG i => i_162

<bb 41>:
  # i_36 = PHI <i_157(39), i_162(40)>
  # DEBUG i => i_36
  D.41522_158 = smh_90->mparams;
  D.41587_159 = D.41522_158->num_codecs;
  if (D.41587_159 > i_36)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 42>:
  if (sdp_type_163(D) == 0)
    goto <bb 43>;
  else
    goto <bb 62>;

<bb 43>:
  orig_session = 0B;
  switch_core_session_perform_get_partner (session_72(D), &orig_session, "src/switch_core_media.c", &__func__, 6108);
  i_164 = 0;
  # DEBUG i => i_164
  goto <bb 59>;

<bb 44>:
  imp_167 = smh_90->codecs[i_37];
  # DEBUG imp => imp_167
  orig_pt = 0;
  orig_fmtp = 0B;
  D.41590_168 = smh_90->ianacodes[i_37];
  if (D.41590_168 > 64)
    goto <bb 45>;
  else
    goto <bb 58>;

<bb 45>:
  D.41522_169 = smh_90->mparams;
  D.41593_170 = D.41522_169->dtmf_type;
  if (D.41593_170 == 0)
    goto <bb 46>;
  else
    goto <bb 49>;

<bb 46>:
  D.41522_171 = smh_90->mparams;
  D.41596_172 = D.41522_171->te;
  if (D.41596_172 > 95)
    goto <bb 47>;
  else
    goto <bb 49>;

<bb 47>:
  D.41522_173 = smh_90->mparams;
  D.41596_174 = D.41522_173->te;
  D.41599_175 = (int) D.41596_174;
  D.41578_176 = smh_90->payload_space;
  if (D.41599_175 == D.41578_176)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  D.41578_177 = smh_90->payload_space;
  D.41602_178 = D.41578_177 + 1;
  smh_90->payload_space = D.41602_178;

<bb 49>:
  D.41603_179 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.41603_179 == 0)
    goto <bb 50>;
  else
    goto <bb 53>;

<bb 50>:
  D.41522_180 = smh_90->mparams;
  D.41606_181 = D.41522_180->cng_pt;
  D.41607_182 = D.41606_181 != 0;
  D.41608_183 = use_cng_17 != 0;
  D.41609_184 = D.41607_182 && D.41608_183;
  if (D.41609_184 != 0)
    goto <bb 51>;
  else
    goto <bb 53>;

<bb 51>:
  D.41522_185 = smh_90->mparams;
  D.41606_186 = D.41522_185->cng_pt;
  D.41612_187 = (int) D.41606_186;
  D.41578_188 = smh_90->payload_space;
  if (D.41612_187 == D.41578_188)
    goto <bb 52>;
  else
    goto <bb 53>;

<bb 52>:
  D.41578_189 = smh_90->payload_space;
  D.41602_190 = D.41578_189 + 1;
  smh_90->payload_space = D.41602_190;

<bb 53>:
  orig_session.25_191 = orig_session;
  if (orig_session.25_191 != 0B)
    goto <bb 54>;
  else
    goto <bb 57>;

<bb 54>:
  orig_session.25_192 = orig_session;
  D.41619_193 = imp_167->codec_type;
  D.41620_194 = D.41619_193 != 0;
  D.41621_195 = imp_167->iananame;
  D.41622_196 = switch_core_session_get_payload_code (orig_session.25_192, D.41620_194, D.41621_195, &orig_pt, 0B, &orig_fmtp);
  if (D.41622_196 == 0)
    goto <bb 55>;
  else
    goto <bb 57>;

<bb 55>:
  orig_pt.26_197 = orig_pt;
  smh_90->ianacodes[i_37] = orig_pt.26_197;
  orig_fmtp.27_198 = orig_fmtp;
  if (orig_fmtp.27_198 != 0B)
    goto <bb 56>;
  else
    goto <bb 58>;

<bb 56>:
  orig_fmtp.27_199 = orig_fmtp;
  D.41628_200 = switch_core_perform_session_strdup (session_72(D), orig_fmtp.27_199, "src/switch_core_media.c", &__func__, 6133);
  smh_90->fmtps[i_37] = D.41628_200;
  goto <bb 58>;

<bb 57>:
  D.41578_201 = smh_90->payload_space;
  D.41629_202 = (unsigned char) D.41578_201;
  smh_90->ianacodes[i_37] = D.41629_202;
  D.41602_203 = D.41578_201 + 1;
  smh_90->payload_space = D.41602_203;

<bb 58>:
  D.41619_204 = imp_167->codec_type;
  D.41620_205 = D.41619_204 != 0;
  D.41621_206 = imp_167->iananame;
  D.41590_207 = smh_90->ianacodes[i_37];
  D.41630_208 = (uint32_t) D.41590_207;
  D.41631_209 = imp_167->samples_per_second;
  D.41632_210 = imp_167->microseconds_per_packet;
  D.41633_211 = D.41632_210 / 1000;
  D.41634_212 = (uint32_t) D.41633_211;
  switch_core_media_add_payload_map (session_72(D), D.41620_205, D.41621_206, 0B, sdp_type_163(D), D.41630_208, D.41631_209, D.41634_212, 0);
  i_213 = i_37 + 1;
  # DEBUG i => i_213

<bb 59>:
  # i_37 = PHI <i_164(43), i_213(58)>
  # DEBUG i => i_37
  D.41522_165 = smh_90->mparams;
  D.41587_166 = D.41522_165->num_codecs;
  if (D.41587_166 > i_37)
    goto <bb 44>;
  else
    goto <bb 60>;

<bb 60>:
  orig_session.25_214 = orig_session;
  if (orig_session.25_214 != 0B)
    goto <bb 61>;
  else
    goto <bb 62>;

<bb 61>:
  orig_session.25_215 = orig_session;
  switch_core_session_rwunlock (orig_session.25_215);

<bb 62>:
  if (fmtp_out_var_82 != 0B)
    goto <bb 63>;
  else
    goto <bb 64>;

<bb 63>:
  fmtp_out_216 = fmtp_out_var_82;
  # DEBUG fmtp_out => fmtp_out_216

<bb 64>:
  # fmtp_out_21 = PHI <fmtp_out_141(62), fmtp_out_216(63)>
  # DEBUG fmtp_out => fmtp_out_21
  D.41512_217 = session_72(D)->channel;
  val_218 = switch_channel_get_variable_dup (D.41512_217, "verbose_sdp", 1, -1);
  # DEBUG val => val_218
  if (val_218 == 0B)
    goto <bb 66>;
  else
    goto <bb 65>;

<bb 65>:
  D.41642_219 = switch_true (val_218);
  if (D.41642_219 != 0)
    goto <bb 66>;
  else
    goto <bb 67>;

<bb 66>:
  D.41512_220 = session_72(D)->channel;
  switch_channel_set_flag_value (D.41512_220, 110, 1);

<bb 67>:
  D.41645_222 = force_221(D) == 0;
  D.41646_224 = ip_223(D) == 0B;
  D.41647_225 = D.41645_222 && D.41646_224;
  if (D.41647_225 != 0)
    goto <bb 68>;
  else
    goto <bb 76>;

<bb 68>:
  # DEBUG s => sr_226(D)
  if (sr_226(D) == 0B)
    goto <bb 71>;
  else
    goto <bb 69>;

<bb 69>:
  D.48131_1516 = *sr_226(D);
  if (D.48131_1516 == 0)
    goto <bb 71>;
  else
    goto <bb 70>;

<bb 70>:

<bb 71>:
  # D.48132_1517 = PHI <1(68), 1(69), 0(70)>
  D.48130_1558 = D.48132_1517;
  D.41650_227 = D.48130_1558;
  if (D.41650_227 != 0)
    goto <bb 72>;
  else
    goto <bb 76>;

<bb 72>:
  D.41512_228 = session_72(D)->channel;
  D.41653_229 = switch_channel_test_flag (D.41512_228, 15);
  if (D.41653_229 != 0)
    goto <bb 74>;
  else
    goto <bb 73>;

<bb 73>:
  D.41512_230 = session_72(D)->channel;
  D.41655_231 = switch_channel_test_flag (D.41512_230, 29);
  if (D.41655_231 != 0)
    goto <bb 74>;
  else
    goto <bb 76>;

<bb 74>:
  if (buf_144 != 0B)
    goto <bb 75>;
  else
    goto <bb 467>;

<bb 75>:
  free (buf_144);
  buf_232 = 0B;
  # DEBUG buf => buf_232
  goto <bb 467>;

<bb 76>:
  if (ip_223(D) == 0B)
    goto <bb 77>;
  else
    goto <bb 79>;

<bb 77>:
  ip_233 = a_engine_91->adv_sdp_ip;
  # DEBUG ip => ip_233
  if (ip_233 == 0B)
    goto <bb 78>;
  else
    goto <bb 79>;

<bb 78>:
  ip_234 = a_engine_91->proxy_sdp_ip;
  # DEBUG ip => ip_234

<bb 79>:
  # ip_1 = PHI <ip_223(D)(76), ip_233(77), ip_234(78)>
  # DEBUG ip => ip_1
  if (ip_1 == 0B)
    goto <bb 80>;
  else
    goto <bb 82>;

<bb 80>:
  D.41512_235 = session_72(D)->channel;
  D.41664_236 = switch_channel_get_name (D.41512_235);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 6182, 0B, 2, "%s NO IP!\n", D.41664_236);
  if (buf_144 != 0B)
    goto <bb 81>;
  else
    goto <bb 467>;

<bb 81>:
  free (buf_144);
  buf_237 = 0B;
  # DEBUG buf => buf_237
  goto <bb 467>;

<bb 82>:
  if (port_238(D) == 0)
    goto <bb 83>;
  else
    goto <bb 85>;

<bb 83>:
  port_239 = a_engine_91->adv_sdp_port;
  # DEBUG port => port_239
  if (port_239 == 0)
    goto <bb 84>;
  else
    goto <bb 85>;

<bb 84>:
  port_240 = a_engine_91->proxy_sdp_port;
  # DEBUG port => port_240

<bb 85>:
  # port_2 = PHI <port_238(D)(82), port_239(83), port_240(84)>
  # DEBUG port => port_2
  if (port_2 == 0)
    goto <bb 86>;
  else
    goto <bb 88>;

<bb 86>:
  D.41512_241 = session_72(D)->channel;
  D.41673_242 = switch_channel_get_name (D.41512_241);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 6194, 0B, 2, "%s NO PORT!\n", D.41673_242);
  if (buf_144 != 0B)
    goto <bb 87>;
  else
    goto <bb 467>;

<bb 87>:
  free (buf_144);
  buf_243 = 0B;
  # DEBUG buf => buf_243
  goto <bb 467>;

<bb 88>:
  # DEBUG s => sr_226(D)
  if (sr_226(D) == 0B)
    goto <bb 91>;
  else
    goto <bb 89>;

<bb 89>:
  D.48135_1518 = *sr_226(D);
  if (D.48135_1518 == 0)
    goto <bb 91>;
  else
    goto <bb 90>;

<bb 90>:

<bb 91>:
  # D.48136_1519 = PHI <1(88), 1(89), 0(90)>
  D.48134_1559 = D.48136_1519;
  D.41676_244 = D.48134_1559;
  if (D.41676_244 != 0)
    goto <bb 92>;
  else
    goto <bb 95>;

<bb 92>:
  D.41512_245 = session_72(D)->channel;
  var_val_246 = switch_channel_get_variable_dup (D.41512_245, "media_audio_mode", 1, -1);
  # DEBUG var_val => var_val_246
  if (var_val_246 != 0B)
    goto <bb 93>;
  else
    goto <bb 94>;

<bb 93>:
  sr_247 = var_val_246;
  # DEBUG sr => sr_247
  goto <bb 95>;

<bb 94>:
  sr_248 = "sendrecv";
  # DEBUG sr => sr_248

<bb 95>:
  # sr_3 = PHI <sr_226(D)(91), sr_247(93), sr_248(94)>
  # DEBUG sr => sr_3
  D.41682_249 = smh_90->owner_id;
  if (D.41682_249 == 0)
    goto <bb 96>;
  else
    goto <bb 97>;

<bb 96>:
  D.41685_250 = switch_epoch_time_now (0B);
  D.41686_251 = (unsigned int) D.41685_250;
  D.41687_252 = (unsigned int) port_2;
  D.41688_253 = D.41686_251 - D.41687_252;
  smh_90->owner_id = D.41688_253;

<bb 97>:
  D.41689_254 = smh_90->session_id;
  if (D.41689_254 == 0)
    goto <bb 98>;
  else
    goto <bb 99>;

<bb 98>:
  D.41682_255 = smh_90->owner_id;
  smh_90->session_id = D.41682_255;

<bb 99>:
  D.41512_256 = session_72(D)->channel;
  D.41692_257 = switch_channel_get_variable_dup (D.41512_256, "drop_dtmf", 0, -1);
  D.41693_258 = switch_true (D.41692_257);
  if (D.41693_258 != 0)
    goto <bb 100>;
  else
    goto <bb 101>;

<bb 100>:
  D.41512_259 = session_72(D)->channel;
  switch_channel_set_flag_value (D.41512_259, 102, 1);

<bb 101>:
  D.41689_260 = smh_90->session_id;
  D.41696_261 = D.41689_260 + 1;
  smh_90->session_id = D.41696_261;
  D.41522_262 = smh_90->mparams;
  D.41699_263 = D.41522_262->ndlb;
  D.41700_264 = D.41699_263 & 16;
  if (D.41700_264 != 0)
    goto <bb 104>;
  else
    goto <bb 102>;

<bb 102>:
  D.41512_265 = session_72(D)->channel;
  var_val_266 = switch_channel_get_variable_dup (D.41512_265, "ndlb_sendrecv_in_session", 1, -1);
  # DEBUG var_val => var_val_266
  if (var_val_266 != 0B)
    goto <bb 103>;
  else
    goto <bb 110>;

<bb 103>:
  D.41703_267 = switch_true (var_val_266);
  if (D.41703_267 != 0)
    goto <bb 104>;
  else
    goto <bb 110>;

<bb 104>:
  # DEBUG s => sr_3
  if (sr_3 == 0B)
    goto <bb 107>;
  else
    goto <bb 105>;

<bb 105>:
  D.48139_1520 = *sr_3;
  if (D.48139_1520 == 0)
    goto <bb 107>;
  else
    goto <bb 106>;

<bb 106>:

<bb 107>:
  # D.48140_1521 = PHI <1(104), 1(105), 0(106)>
  D.48138_1560 = D.48140_1521;
  D.41704_268 = D.48138_1560;
  if (D.41704_268 == 0)
    goto <bb 108>;
  else
    goto <bb 109>;

<bb 108>:
  switch_snprintf (&srbuf, 128, "a=%s\n", sr_3);

<bb 109>:
  sr_269 = 0B;
  # DEBUG sr => sr_269

<bb 110>:
  # sr_4 = PHI <sr_3(102), sr_3(103), sr_269(109)>
  # DEBUG sr => sr_4
  D.41708_270 = __builtin_strchr (ip_1, 58);
  if (D.41708_270 != 0B)
    goto <bb 111>;
  else
    goto <bb 112>;

<bb 111>:
  iftmp.28_271 = "IP6";
  goto <bb 113>;

<bb 112>:
  iftmp.28_272 = "IP4";

<bb 113>:
  # iftmp.28_59 = PHI <iftmp.28_271(111), iftmp.28_272(112)>
  family_273 = iftmp.28_59;
  # DEBUG family => family_273
  D.41682_274 = smh_90->owner_id;
  D.41689_275 = smh_90->session_id;
  switch_snprintf (buf_144, 65536, "v=0\no=%s %010u %010u IN %s %s\ns=%s\nc=IN %s %s\nt=0 0\n%s", username_143, D.41682_274, D.41689_275, family_273, ip_1, username_143, family_273, ip_1, &srbuf);
  D.41534_276 = smh_90->session;
  D.41535_277 = D.41534_276->channel;
  D.41712_278 = switch_channel_test_flag (D.41535_277, 108);
  if (D.41712_278 != 0)
    goto <bb 114>;
  else
    goto <bb 115>;

<bb 114>:
  gen_ice (session_72(D), 0, ip_1, port_2);
  D.41715_279 = strlen (buf_144);
  D.41716_280 = buf_144 + D.41715_279;
  D.41717_281 = strlen (buf_144);
  D.41718_282 = 65536 - D.41717_281;
  D.41719_283 = smh_90->msid;
  switch_snprintf (D.41716_280, D.41718_282, "a=msid-semantic: WMS %s\n", D.41719_283);

<bb 115>:
  D.41720_284 = a_engine_91->codec_negotiated;
  if (D.41720_284 != 0)
    goto <bb 116>;
  else
    goto <bb 225>;

<bb 116>:
  D.41723_285 = strlen (buf_144);
  D.41724_286 = buf_144 + D.41723_285;
  D.41725_287 = strlen (buf_144);
  D.41726_288 = 65536 - D.41725_287;
  D.41727_289 = (int) port_2;
  D.41732_290 = a_engine_91->no_crypto;
  if (D.41732_290 == 0)
    goto <bb 117>;
  else
    goto <bb 120>;

<bb 117>:
  D.41512_291 = session_72(D)->channel;
  D.41734_292 = switch_channel_test_flag (D.41512_291, 109);
  if (D.41734_292 != 0)
    goto <bb 119>;
  else
    goto <bb 118>;

<bb 118>:
  D.41736_293 = a_engine_91->crypto_type;
  if (D.41736_293 != 9)
    goto <bb 119>;
  else
    goto <bb 120>;

<bb 119>:
  iftmp.29_294 = 1;
  goto <bb 121>;

<bb 120>:
  iftmp.29_295 = 0;

<bb 121>:
  # iftmp.29_60 = PHI <iftmp.29_294(119), iftmp.29_295(120)>
  D.41737_296 = get_media_profile_name (session_72(D), iftmp.29_60);
  switch_snprintf (D.41724_286, D.41726_288, "m=audio %d %s", D.41727_289, D.41737_296);
  D.41738_297 = strlen (buf_144);
  D.41739_298 = buf_144 + D.41738_297;
  D.41740_299 = strlen (buf_144);
  D.41741_300 = 65536 - D.41740_299;
  D.41566_301 = a_engine_91->cur_payload_map;
  D.41742_302 = D.41566_301->pt;
  D.41743_303 = (int) D.41742_302;
  switch_snprintf (D.41739_298, D.41741_300, " %d", D.41743_303);
  D.41744_304 = switch_media_handle_test_media_flag (smh_90, 15);
  if (D.41744_304 != 0)
    goto <bb 122>;
  else
    goto <bb 129>;

<bb 122>:
  D.41747_305 = smh_90->sdp_mutex;
  switch_mutex_lock (D.41747_305);
  pmap_306 = a_engine_91->cur_payload_map;
  # DEBUG pmap => pmap_306
  goto <bb 126>;

<bb 123>:
  D.41748_308 = pmap_34->pt;
  D.41566_309 = a_engine_91->cur_payload_map;
  D.41742_310 = D.41566_309->pt;
  if (D.41748_308 != D.41742_310)
    goto <bb 124>;
  else
    goto <bb 125>;

<bb 124>:
  D.41751_311 = strlen (buf_144);
  D.41752_312 = buf_144 + D.41751_311;
  D.41753_313 = strlen (buf_144);
  D.41754_314 = 65536 - D.41753_313;
  D.41748_315 = pmap_34->pt;
  D.41755_316 = (int) D.41748_315;
  switch_snprintf (D.41752_312, D.41754_314, " %d", D.41755_316);

<bb 125>:
  pmap_317 = pmap_34->next;
  # DEBUG pmap => pmap_317

<bb 126>:
  # pmap_34 = PHI <pmap_306(122), pmap_317(125)>
  # DEBUG pmap => pmap_34
  if (pmap_34 != 0B)
    goto <bb 127>;
  else
    goto <bb 128>;

<bb 127>:
  D.41757_307 = pmap_34->allocated;
  if (D.41757_307 != 0)
    goto <bb 123>;
  else
    goto <bb 128>;

<bb 128>:
  D.41747_318 = smh_90->sdp_mutex;
  switch_mutex_unlock (D.41747_318);

<bb 129>:
  D.41522_319 = smh_90->mparams;
  D.41593_320 = D.41522_319->dtmf_type;
  if (D.41593_320 == 0)
    goto <bb 132>;
  else
    goto <bb 130>;

<bb 130>:
  D.41761_321 = switch_media_handle_test_media_flag (smh_90, 8);
  if (D.41761_321 != 0)
    goto <bb 132>;
  else
    goto <bb 131>;

<bb 131>:
  D.41512_322 = session_72(D)->channel;
  D.41763_323 = switch_channel_test_flag (D.41512_322, 93);
  if (D.41763_323 != 0)
    goto <bb 132>;
  else
    goto <bb 134>;

<bb 132>:
  D.41522_324 = smh_90->mparams;
  D.41596_325 = D.41522_324->te;
  if (D.41596_325 > 95)
    goto <bb 133>;
  else
    goto <bb 134>;

<bb 133>:
  D.41766_326 = strlen (buf_144);
  D.41767_327 = buf_144 + D.41766_326;
  D.41768_328 = strlen (buf_144);
  D.41769_329 = 65536 - D.41768_328;
  D.41522_330 = smh_90->mparams;
  D.41596_331 = D.41522_330->te;
  D.41599_332 = (int) D.41596_331;
  switch_snprintf (D.41767_327, D.41769_329, " %d", D.41599_332);

<bb 134>:
  D.41770_333 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.41770_333 == 0)
    goto <bb 135>;
  else
    goto <bb 137>;

<bb 135>:
  D.41522_334 = smh_90->mparams;
  D.41606_335 = D.41522_334->cng_pt;
  D.41607_336 = D.41606_335 != 0;
  D.41608_337 = use_cng_17 != 0;
  D.41609_338 = D.41607_336 && D.41608_337;
  if (D.41609_338 != 0)
    goto <bb 136>;
  else
    goto <bb 137>;

<bb 136>:
  D.41775_339 = strlen (buf_144);
  D.41776_340 = buf_144 + D.41775_339;
  D.41777_341 = strlen (buf_144);
  D.41778_342 = 65536 - D.41777_341;
  D.41522_343 = smh_90->mparams;
  D.41606_344 = D.41522_343->cng_pt;
  D.41612_345 = (int) D.41606_344;
  switch_snprintf (D.41776_340, D.41778_342, " %d", D.41612_345);

<bb 137>:
  D.41779_346 = strlen (buf_144);
  D.41780_347 = buf_144 + D.41779_346;
  D.41781_348 = strlen (buf_144);
  D.41782_349 = 65536 - D.41781_348;
  switch_snprintf (D.41780_347, D.41782_349, "\n");
  D.41566_350 = a_engine_91->cur_payload_map;
  rate_351 = D.41566_350->adv_rm_rate;
  # DEBUG rate => rate_351
  D.41566_352 = a_engine_91->cur_payload_map;
  D.41783_353 = D.41566_352->adv_channels;
  if (D.41783_353 == 0)
    goto <bb 138>;
  else
    goto <bb 139>;

<bb 138>:
  D.41566_354 = a_engine_91->cur_payload_map;
  D.41566_355 = a_engine_91->cur_payload_map;
  D.41786_356 = D.41566_355->rm_encoding;
  D.41787_357 = get_channels (D.41786_356, 1);
  D.41566_355->adv_channels = D.41787_357;

<bb 139>:
  D.41566_358 = a_engine_91->cur_payload_map;
  D.41783_359 = D.41566_358->adv_channels;
  if (D.41783_359 > 1)
    goto <bb 140>;
  else
    goto <bb 141>;

<bb 140>:
  D.41790_360 = strlen (buf_144);
  D.41791_361 = buf_144 + D.41790_360;
  D.41792_362 = strlen (buf_144);
  D.41793_363 = 65536 - D.41792_362;
  D.41566_364 = a_engine_91->cur_payload_map;
  D.41794_365 = D.41566_364->agreed_pt;
  D.41795_366 = (int) D.41794_365;
  D.41566_367 = a_engine_91->cur_payload_map;
  D.41786_368 = D.41566_367->rm_encoding;
  D.41566_369 = a_engine_91->cur_payload_map;
  D.41783_370 = D.41566_369->adv_channels;
  switch_snprintf (D.41791_361, D.41793_363, "a=rtpmap:%d %s/%d/%d\n", D.41795_366, D.41786_368, rate_351, D.41783_370);
  goto <bb 142>;

<bb 141>:
  D.41797_371 = strlen (buf_144);
  D.41798_372 = buf_144 + D.41797_371;
  D.41799_373 = strlen (buf_144);
  D.41800_374 = 65536 - D.41799_373;
  D.41566_375 = a_engine_91->cur_payload_map;
  D.41794_376 = D.41566_375->agreed_pt;
  D.41795_377 = (int) D.41794_376;
  D.41566_378 = a_engine_91->cur_payload_map;
  D.41786_379 = D.41566_378->rm_encoding;
  switch_snprintf (D.41798_372, D.41800_374, "a=rtpmap:%d %s/%d\n", D.41795_377, D.41786_379, rate_351);

<bb 142>:
  if (fmtp_out_21 != 0B)
    goto <bb 143>;
  else
    goto <bb 144>;

<bb 143>:
  D.41803_380 = strlen (buf_144);
  D.41804_381 = buf_144 + D.41803_380;
  D.41805_382 = strlen (buf_144);
  D.41806_383 = 65536 - D.41805_382;
  D.41566_384 = a_engine_91->cur_payload_map;
  D.41794_385 = D.41566_384->agreed_pt;
  D.41795_386 = (int) D.41794_385;
  switch_snprintf (D.41804_381, D.41806_383, "a=fmtp:%d %s\n", D.41795_386, fmtp_out_21);

<bb 144>:
  D.41807_387 = switch_media_handle_test_media_flag (smh_90, 15);
  if (D.41807_387 != 0)
    goto <bb 145>;
  else
    goto <bb 152>;

<bb 145>:
  D.41747_388 = smh_90->sdp_mutex;
  switch_mutex_lock (D.41747_388);
  pmap_389 = a_engine_91->cur_payload_map;
  # DEBUG pmap => pmap_389
  goto <bb 149>;

<bb 146>:
  D.41748_391 = pmap_35->pt;
  D.41566_392 = a_engine_91->cur_payload_map;
  D.41742_393 = D.41566_392->pt;
  if (D.41748_391 != D.41742_393)
    goto <bb 147>;
  else
    goto <bb 148>;

<bb 147>:
  D.41812_394 = strlen (buf_144);
  D.41813_395 = buf_144 + D.41812_394;
  D.41814_396 = strlen (buf_144);
  D.41815_397 = 65536 - D.41814_396;
  D.41748_398 = pmap_35->pt;
  D.41755_399 = (int) D.41748_398;
  D.41816_400 = pmap_35->iananame;
  D.41817_401 = pmap_35->rate;
  switch_snprintf (D.41813_395, D.41815_397, "a=rtpmap:%d %s/%ld\n", D.41755_399, D.41816_400, D.41817_401);

<bb 148>:
  pmap_402 = pmap_35->next;
  # DEBUG pmap => pmap_402

<bb 149>:
  # pmap_35 = PHI <pmap_389(145), pmap_402(148)>
  # DEBUG pmap => pmap_35
  if (pmap_35 != 0B)
    goto <bb 150>;
  else
    goto <bb 151>;

<bb 150>:
  D.41757_390 = pmap_35->allocated;
  if (D.41757_390 != 0)
    goto <bb 146>;
  else
    goto <bb 151>;

<bb 151>:
  D.41747_403 = smh_90->sdp_mutex;
  switch_mutex_unlock (D.41747_403);

<bb 152>:
  D.41819_404 = a_engine_91->read_codec.implementation;
  D.41820_405 = D.41819_404 != 0B;
  D.41821_406 = ptime_69 == 0;
  D.41822_407 = D.41820_405 && D.41821_406;
  if (D.41822_407 != 0)
    goto <bb 153>;
  else
    goto <bb 154>;

<bb 153>:
  D.41819_408 = a_engine_91->read_codec.implementation;
  D.41825_409 = D.41819_408->microseconds_per_packet;
  ptime_410 = D.41825_409 / 1000;
  # DEBUG ptime => ptime_410

<bb 154>:
  # ptime_5 = PHI <ptime_69(152), ptime_410(153)>
  # DEBUG ptime => ptime_5
  D.41522_411 = smh_90->mparams;
  D.41593_412 = D.41522_411->dtmf_type;
  if (D.41593_412 == 0)
    goto <bb 157>;
  else
    goto <bb 155>;

<bb 155>:
  D.41829_413 = switch_media_handle_test_media_flag (smh_90, 8);
  if (D.41829_413 != 0)
    goto <bb 157>;
  else
    goto <bb 156>;

<bb 156>:
  D.41512_414 = session_72(D)->channel;
  D.41831_415 = switch_channel_test_flag (D.41512_414, 93);
  if (D.41831_415 != 0)
    goto <bb 157>;
  else
    goto <bb 161>;

<bb 157>:
  D.41522_416 = smh_90->mparams;
  D.41596_417 = D.41522_416->te;
  if (D.41596_417 > 95)
    goto <bb 158>;
  else
    goto <bb 161>;

<bb 158>:
  D.41512_418 = session_72(D)->channel;
  D.41834_419 = switch_channel_test_flag (D.41512_418, 106);
  if (D.41834_419 != 0)
    goto <bb 159>;
  else
    goto <bb 160>;

<bb 159>:
  D.41837_420 = strlen (buf_144);
  D.41838_421 = buf_144 + D.41837_420;
  D.41839_422 = strlen (buf_144);
  D.41840_423 = 65536 - D.41839_422;
  D.41522_424 = smh_90->mparams;
  D.41596_425 = D.41522_424->te;
  D.41599_426 = (int) D.41596_425;
  switch_snprintf (D.41838_421, D.41840_423, "a=rtpmap:%d telephone-event/8000\n", D.41599_426);
  goto <bb 161>;

<bb 160>:
  D.41842_427 = strlen (buf_144);
  D.41843_428 = buf_144 + D.41842_427;
  D.41844_429 = strlen (buf_144);
  D.41845_430 = 65536 - D.41844_429;
  D.41522_431 = smh_90->mparams;
  D.41596_432 = D.41522_431->te;
  D.41599_433 = (int) D.41596_432;
  D.41522_434 = smh_90->mparams;
  D.41596_435 = D.41522_434->te;
  D.41599_436 = (int) D.41596_435;
  switch_snprintf (D.41843_428, D.41845_430, "a=rtpmap:%d telephone-event/8000\na=fmtp:%d 0-16\n", D.41599_436, D.41599_436);

<bb 161>:
  D.41846_437 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.41846_437 != 0)
    goto <bb 162>;
  else
    goto <bb 163>;

<bb 162>:
  D.41849_438 = strlen (buf_144);
  D.41850_439 = buf_144 + D.41849_438;
  D.41851_440 = strlen (buf_144);
  D.41852_441 = 65536 - D.41851_440;
  switch_snprintf (D.41850_439, D.41852_441, "a=silenceSupp:off - - - -\n");
  goto <bb 166>;

<bb 163>:
  D.41522_442 = smh_90->mparams;
  D.41606_443 = D.41522_442->cng_pt;
  D.41607_444 = D.41606_443 != 0;
  D.41608_445 = use_cng_17 != 0;
  D.41609_446 = D.41607_444 && D.41608_445;
  if (D.41609_446 != 0)
    goto <bb 164>;
  else
    goto <bb 166>;

<bb 164>:
  D.41856_447 = strlen (buf_144);
  D.41857_448 = buf_144 + D.41856_447;
  D.41858_449 = strlen (buf_144);
  D.41859_450 = 65536 - D.41858_449;
  D.41522_451 = smh_90->mparams;
  D.41606_452 = D.41522_451->cng_pt;
  D.41612_453 = (int) D.41606_452;
  switch_snprintf (D.41857_448, D.41859_450, "a=rtpmap:%d CN/8000\n", D.41612_453);
  D.41720_454 = a_engine_91->codec_negotiated;
  if (D.41720_454 == 0)
    goto <bb 165>;
  else
    goto <bb 166>;

<bb 165>:
  D.41522_455 = smh_90->mparams;
  D.41522_455->cng_pt = 0;

<bb 166>:
  if (append_audio_78 != 0B)
    goto <bb 167>;
  else
    goto <bb 174>;

<bb 167>:
  D.41864_456 = strlen (buf_144);
  D.41865_457 = buf_144 + D.41864_456;
  D.41866_458 = strlen (buf_144);
  D.41867_459 = 65536 - D.41866_458;
  D.41870_460 = *append_audio_78;
  if (D.41870_460 != 0)
    goto <bb 168>;
  else
    goto <bb 169>;

<bb 168>:
  D.41873_461 = strlen (append_audio_78);
  D.41874_462 = D.41873_461 + -1;
  iftmp.31_463 = append_audio_78 + D.41874_462;
  goto <bb 170>;

<bb 169>:
  iftmp.31_464 = append_audio_78;

<bb 170>:
  # iftmp.31_62 = PHI <iftmp.31_463(168), iftmp.31_464(169)>
  D.41876_465 = *iftmp.31_62;
  if (D.41876_465 == 10)
    goto <bb 171>;
  else
    goto <bb 172>;

<bb 171>:
  iftmp.30_466 = "";
  goto <bb 173>;

<bb 172>:
  iftmp.30_467 = "\n";

<bb 173>:
  # iftmp.30_61 = PHI <iftmp.30_466(171), iftmp.30_467(172)>
  switch_snprintf (D.41865_457, D.41867_459, "%s%s", append_audio_78, iftmp.30_61);

<bb 174>:
  if (ptime_5 != 0)
    goto <bb 175>;
  else
    goto <bb 176>;

<bb 175>:
  D.41882_468 = strlen (buf_144);
  D.41883_469 = buf_144 + D.41882_468;
  D.41884_470 = strlen (buf_144);
  D.41885_471 = 65536 - D.41884_470;
  switch_snprintf (D.41883_469, D.41885_471, "a=ptime:%d\n", ptime_5);

<bb 176>:
  if (local_sdp_audio_zrtp_hash_83 != 0B)
    goto <bb 177>;
  else
    goto <bb 178>;

<bb 177>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 6350, session_72(D), 7, "Adding audio a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_83);
  D.41888_472 = strlen (buf_144);
  D.41889_473 = buf_144 + D.41888_472;
  D.41890_474 = strlen (buf_144);
  D.41891_475 = 65536 - D.41890_474;
  switch_snprintf (D.41889_473, D.41891_475, "a=zrtp-hash:%s\n", local_sdp_audio_zrtp_hash_83);

<bb 178>:
  # DEBUG s => sr_4
  if (sr_4 == 0B)
    goto <bb 181>;
  else
    goto <bb 179>;

<bb 179>:
  D.48143_1522 = *sr_4;
  if (D.48143_1522 == 0)
    goto <bb 181>;
  else
    goto <bb 180>;

<bb 180>:

<bb 181>:
  # D.48144_1523 = PHI <1(178), 1(179), 0(180)>
  D.48142_1561 = D.48144_1523;
  D.41892_476 = D.48142_1561;
  if (D.41892_476 == 0)
    goto <bb 182>;
  else
    goto <bb 183>;

<bb 182>:
  D.41895_477 = strlen (buf_144);
  D.41896_478 = buf_144 + D.41895_477;
  D.41897_479 = strlen (buf_144);
  D.41898_480 = 65536 - D.41897_479;
  switch_snprintf (D.41896_478, D.41898_480, "a=%s\n", sr_4);

<bb 183>:
  D.41899_481 = a_engine_91->local_dtls_fingerprint.type;
  # DEBUG s => D.41899_481
  if (D.41899_481 == 0B)
    goto <bb 186>;
  else
    goto <bb 184>;

<bb 184>:
  D.48147_1524 = MEM[(const char *)D.41899_481];
  if (D.48147_1524 == 0)
    goto <bb 186>;
  else
    goto <bb 185>;

<bb 185>:

<bb 186>:
  # D.48148_1525 = PHI <1(183), 1(184), 0(185)>
  D.48146_1562 = D.48148_1525;
  D.41900_482 = D.48146_1562;
  if (D.41900_482 == 0)
    goto <bb 187>;
  else
    goto <bb 188>;

<bb 187>:
  D.41903_483 = strlen (buf_144);
  D.41904_484 = buf_144 + D.41903_483;
  D.41905_485 = strlen (buf_144);
  D.41906_486 = 65536 - D.41905_485;
  D.41899_487 = a_engine_91->local_dtls_fingerprint.type;
  D.41907_488 = &a_engine_91->local_dtls_fingerprint.str;
  switch_snprintf (D.41904_484, D.41906_486, "a=fingerprint:%s %s\n", D.41899_487, D.41907_488);

<bb 188>:
  D.41522_489 = smh_90->mparams;
  D.41523_490 = D.41522_489->rtcp_audio_interval_msec;
  if (D.41523_490 != 0B)
    goto <bb 189>;
  else
    goto <bb 192>;

<bb 189>:
  D.41910_491 = a_engine_91->rtcp_mux;
  if (D.41910_491 > 0)
    goto <bb 190>;
  else
    goto <bb 191>;

<bb 190>:
  D.41913_492 = strlen (buf_144);
  D.41914_493 = buf_144 + D.41913_492;
  D.41915_494 = strlen (buf_144);
  D.41916_495 = 65536 - D.41915_494;
  switch_snprintf (D.41914_493, D.41916_495, "a=rtcp-mux\n");
  D.41917_496 = strlen (buf_144);
  D.41918_497 = buf_144 + D.41917_496;
  D.41919_498 = strlen (buf_144);
  D.41920_499 = 65536 - D.41919_498;
  D.41727_500 = (int) port_2;
  switch_snprintf (D.41918_497, D.41920_499, "a=rtcp:%d IN %s %s\n", D.41727_500, family_273, ip_1);
  goto <bb 192>;

<bb 191>:
  D.41922_501 = strlen (buf_144);
  D.41923_502 = buf_144 + D.41922_501;
  D.41924_503 = strlen (buf_144);
  D.41925_504 = 65536 - D.41924_503;
  D.41727_505 = (int) port_2;
  D.41926_506 = D.41727_505 + 1;
  switch_snprintf (D.41923_502, D.41925_504, "a=rtcp:%d IN %s %s\n", D.41926_506, family_273, ip_1);

<bb 192>:
  D.41927_507 = a_engine_91->ice_out.cands[0][0].ready;
  if (D.41927_507 != 0)
    goto <bb 193>;
  else
    goto <bb 217>;

<bb 193>:
  tmp1 = "";
  tmp2 = "";
  c1_508 = 659136;
  # DEBUG c1 => c1_508
  c2_509 = 659134;
  # DEBUG c2 => c2_509
  c3_510 = 659126;
  # DEBUG c3 => c3_510
  c4_511 = 659124;
  # DEBUG c4 => c4_511
  tmp1[10] = 0;
  tmp2[10] = 0;
  switch_stun_random_string (&tmp1, 10, "0123456789");
  switch_stun_random_string (&tmp2, 10, "0123456789");
  ice_out_512 = &a_engine_91->ice_out;
  # DEBUG ice_out => ice_out_512
  D.41930_513 = strlen (buf_144);
  D.41931_514 = buf_144 + D.41930_513;
  D.41932_515 = strlen (buf_144);
  D.41933_516 = 65536 - D.41932_515;
  D.41934_517 = a_engine_91->ssrc;
  D.41935_518 = smh_90->cname;
  switch_snprintf (D.41931_514, D.41933_516, "a=ssrc:%u cname:%s\n", D.41934_517, D.41935_518);
  D.41936_519 = strlen (buf_144);
  D.41937_520 = buf_144 + D.41936_519;
  D.41938_521 = strlen (buf_144);
  D.41939_522 = 65536 - D.41938_521;
  D.41934_523 = a_engine_91->ssrc;
  D.41719_524 = smh_90->msid;
  switch_snprintf (D.41937_520, D.41939_522, "a=ssrc:%u msid:%s a0\n", D.41934_523, D.41719_524);
  D.41940_525 = strlen (buf_144);
  D.41941_526 = buf_144 + D.41940_525;
  D.41942_527 = strlen (buf_144);
  D.41943_528 = 65536 - D.41942_527;
  D.41934_529 = a_engine_91->ssrc;
  D.41719_530 = smh_90->msid;
  switch_snprintf (D.41941_526, D.41943_528, "a=ssrc:%u mslabel:%s\n", D.41934_529, D.41719_530);
  D.41944_531 = strlen (buf_144);
  D.41945_532 = buf_144 + D.41944_531;
  D.41946_533 = strlen (buf_144);
  D.41947_534 = 65536 - D.41946_533;
  D.41934_535 = a_engine_91->ssrc;
  D.41719_536 = smh_90->msid;
  switch_snprintf (D.41945_532, D.41947_534, "a=ssrc:%u label:%sa0\n", D.41934_535, D.41719_536);
  D.41948_537 = strlen (buf_144);
  D.41949_538 = buf_144 + D.41948_537;
  D.41950_539 = strlen (buf_144);
  D.41951_540 = 65536 - D.41950_539;
  D.41952_541 = ice_out_512->ufrag;
  switch_snprintf (D.41949_538, D.41951_540, "a=ice-ufrag:%s\n", D.41952_541);
  D.41953_542 = strlen (buf_144);
  D.41954_543 = buf_144 + D.41953_542;
  D.41955_544 = strlen (buf_144);
  D.41956_545 = 65536 - D.41955_544;
  D.41957_546 = ice_out_512->pwd;
  switch_snprintf (D.41954_543, D.41956_545, "a=ice-pwd:%s\n", D.41957_546);
  D.41958_547 = strlen (buf_144);
  D.41959_548 = buf_144 + D.41958_547;
  D.41960_549 = strlen (buf_144);
  D.41961_550 = 65536 - D.41960_549;
  D.41962_551 = ice_out_512->cands[0][0].transport;
  D.41963_552 = ice_out_512->cands[0][0].con_addr;
  D.41964_553 = ice_out_512->cands[0][0].con_port;
  D.41965_554 = (int) D.41964_553;
  switch_snprintf (D.41959_548, D.41961_550, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_551, c1_508, D.41963_552, D.41965_554);
  D.41966_555 = a_engine_91->local_sdp_ip;
  # DEBUG s => D.41966_555
  if (D.41966_555 == 0B)
    goto <bb 196>;
  else
    goto <bb 194>;

<bb 194>:
  D.48151_1526 = MEM[(const char *)D.41966_555];
  if (D.48151_1526 == 0)
    goto <bb 196>;
  else
    goto <bb 195>;

<bb 195>:

<bb 196>:
  # D.48152_1527 = PHI <1(193), 1(194), 0(195)>
  D.48150_1563 = D.48152_1527;
  D.41967_556 = D.48150_1563;
  if (D.41967_556 == 0)
    goto <bb 197>;
  else
    goto <bb 204>;

<bb 197>:
  D.41963_557 = ice_out_512->cands[0][0].con_addr;
  # DEBUG s => D.41963_557
  if (D.41963_557 == 0B)
    goto <bb 200>;
  else
    goto <bb 198>;

<bb 198>:
  D.48155_1528 = MEM[(const char *)D.41963_557];
  if (D.48155_1528 == 0)
    goto <bb 200>;
  else
    goto <bb 199>;

<bb 199>:

<bb 200>:
  # D.48156_1529 = PHI <1(197), 1(198), 0(199)>
  D.48154_1564 = D.48156_1529;
  D.41970_558 = D.48154_1564;
  if (D.41970_558 == 0)
    goto <bb 201>;
  else
    goto <bb 204>;

<bb 201>:
  D.41966_559 = a_engine_91->local_sdp_ip;
  D.41963_560 = ice_out_512->cands[0][0].con_addr;
  D.39598_561 = __builtin_strcmp (D.41966_559, D.41963_560);
  if (D.39598_561 != 0)
    goto <bb 202>;
  else
    goto <bb 204>;

<bb 202>:
  D.41975_562 = a_engine_91->local_sdp_port;
  D.41964_563 = ice_out_512->cands[0][0].con_port;
  if (D.41975_562 != D.41964_563)
    goto <bb 203>;
  else
    goto <bb 204>;

<bb 203>:
  D.41978_564 = strlen (buf_144);
  D.41979_565 = buf_144 + D.41978_564;
  D.41980_566 = strlen (buf_144);
  D.41981_567 = 65536 - D.41980_566;
  D.41962_568 = ice_out_512->cands[0][0].transport;
  D.41963_569 = ice_out_512->cands[0][0].con_addr;
  D.41964_570 = ice_out_512->cands[0][0].con_port;
  D.41965_571 = (int) D.41964_570;
  D.41966_572 = a_engine_91->local_sdp_ip;
  D.41975_573 = a_engine_91->local_sdp_port;
  D.41982_574 = (int) D.41975_573;
  switch_snprintf (D.41979_565, D.41981_567, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_568, c3_510, D.41963_569, D.41965_571, D.41966_572, D.41982_574);

<bb 204>:
  D.41910_575 = a_engine_91->rtcp_mux;
  D.41985_576 = D.41910_575 <= 0;
  D.41986_577 = is_outbound_89 != 0;
  D.41987_578 = D.41985_576 || D.41986_577;
  if (D.41987_578 != 0)
    goto <bb 206>;
  else
    goto <bb 205>;

<bb 205>:
  D.41512_579 = session_72(D)->channel;
  D.41989_580 = switch_channel_test_flag (D.41512_579, 84);
  if (D.41989_580 != 0)
    goto <bb 206>;
  else
    goto <bb 217>;

<bb 206>:
  D.41990_581 = strlen (buf_144);
  D.41991_582 = buf_144 + D.41990_581;
  D.41992_583 = strlen (buf_144);
  D.41993_584 = 65536 - D.41992_583;
  D.41962_585 = ice_out_512->cands[0][0].transport;
  D.41963_586 = ice_out_512->cands[0][0].con_addr;
  D.41964_587 = ice_out_512->cands[0][0].con_port;
  D.41965_588 = (int) D.41964_587;
  D.41910_589 = a_engine_91->rtcp_mux;
  D.41994_590 = D.41910_589 <= 0;
  D.41995_591 = D.41965_588 + D.41994_590;
  switch_snprintf (D.41991_582, D.41993_584, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_585, c2_509, D.41963_586, D.41995_591);
  D.41966_592 = a_engine_91->local_sdp_ip;
  # DEBUG s => D.41966_592
  if (D.41966_592 == 0B)
    goto <bb 209>;
  else
    goto <bb 207>;

<bb 207>:
  D.48159_1530 = MEM[(const char *)D.41966_592];
  if (D.48159_1530 == 0)
    goto <bb 209>;
  else
    goto <bb 208>;

<bb 208>:

<bb 209>:
  # D.48160_1531 = PHI <1(206), 1(207), 0(208)>
  D.48158_1565 = D.48160_1531;
  D.41996_593 = D.48158_1565;
  if (D.41996_593 == 0)
    goto <bb 210>;
  else
    goto <bb 217>;

<bb 210>:
  D.41963_594 = ice_out_512->cands[0][0].con_addr;
  # DEBUG s => D.41963_594
  if (D.41963_594 == 0B)
    goto <bb 213>;
  else
    goto <bb 211>;

<bb 211>:
  D.48163_1532 = MEM[(const char *)D.41963_594];
  if (D.48163_1532 == 0)
    goto <bb 213>;
  else
    goto <bb 212>;

<bb 212>:

<bb 213>:
  # D.48164_1533 = PHI <1(210), 1(211), 0(212)>
  D.48162_1566 = D.48164_1533;
  D.41999_595 = D.48162_1566;
  if (D.41999_595 == 0)
    goto <bb 214>;
  else
    goto <bb 217>;

<bb 214>:
  D.41966_596 = a_engine_91->local_sdp_ip;
  D.41963_597 = ice_out_512->cands[0][0].con_addr;
  D.39607_598 = __builtin_strcmp (D.41966_596, D.41963_597);
  if (D.39607_598 != 0)
    goto <bb 215>;
  else
    goto <bb 217>;

<bb 215>:
  D.41975_599 = a_engine_91->local_sdp_port;
  D.41964_600 = ice_out_512->cands[0][0].con_port;
  if (D.41975_599 != D.41964_600)
    goto <bb 216>;
  else
    goto <bb 217>;

<bb 216>:
  D.42006_601 = strlen (buf_144);
  D.42007_602 = buf_144 + D.42006_601;
  D.42008_603 = strlen (buf_144);
  D.42009_604 = 65536 - D.42008_603;
  D.41962_605 = ice_out_512->cands[0][0].transport;
  D.41963_606 = ice_out_512->cands[0][0].con_addr;
  D.41964_607 = ice_out_512->cands[0][0].con_port;
  D.41965_608 = (int) D.41964_607;
  D.41910_609 = a_engine_91->rtcp_mux;
  D.41994_610 = D.41910_609 <= 0;
  D.41995_611 = D.41965_608 + D.41994_610;
  D.41966_612 = a_engine_91->local_sdp_ip;
  D.41975_613 = a_engine_91->local_sdp_port;
  D.41982_614 = (int) D.41975_613;
  D.41910_615 = a_engine_91->rtcp_mux;
  D.41994_616 = D.41910_615 <= 0;
  D.42010_617 = D.41982_614 + D.41994_616;
  switch_snprintf (D.42007_602, D.42009_604, "a=candidate:%s 2 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_605, c4_511, D.41963_606, D.41995_611, D.41966_612, D.42010_617);

<bb 217>:
  D.41736_618 = a_engine_91->crypto_type;
  if (D.41736_618 != 9)
    goto <bb 218>;
  else
    goto <bb 263>;

<bb 218>:
  D.41512_619 = session_72(D)->channel;
  D.42013_620 = switch_channel_test_flag (D.41512_619, 109);
  if (D.42013_620 == 0)
    goto <bb 219>;
  else
    goto <bb 263>;

<bb 219>:
  D.41736_621 = a_engine_91->crypto_type;
  D.42016_622 = a_engine_91->ssec[D.41736_621].local_crypto_key;
  # DEBUG s => D.42016_622
  if (D.42016_622 == 0B)
    goto <bb 222>;
  else
    goto <bb 220>;

<bb 220>:
  D.48167_1534 = MEM[(const char *)D.42016_622];
  if (D.48167_1534 == 0)
    goto <bb 222>;
  else
    goto <bb 221>;

<bb 221>:

<bb 222>:
  # D.48168_1535 = PHI <1(219), 1(220), 0(221)>
  D.48166_1567 = D.48168_1535;
  D.42017_623 = D.48166_1567;
  if (D.42017_623 == 0)
    goto <bb 223>;
  else
    goto <bb 263>;

<bb 223>:
  D.41512_624 = session_72(D)->channel;
  D.42020_625 = switch_channel_test_flag (D.41512_624, 92);
  if (D.42020_625 != 0)
    goto <bb 224>;
  else
    goto <bb 263>;

<bb 224>:
  D.42023_626 = strlen (buf_144);
  D.42024_627 = buf_144 + D.42023_626;
  D.42025_628 = strlen (buf_144);
  D.42026_629 = 65536 - D.42025_628;
  D.41736_630 = a_engine_91->crypto_type;
  D.42016_631 = a_engine_91->ssec[D.41736_630].local_crypto_key;
  switch_snprintf (D.42024_627, D.42026_629, "a=crypto:%s\n", D.42016_631);
  goto <bb 263>;

<bb 225>:
  D.41522_632 = smh_90->mparams;
  D.41587_633 = D.41522_632->num_codecs;
  if (D.41587_633 != 0)
    goto <bb 226>;
  else
    goto <bb 263>;

<bb 226>:
  cur_ptime_634 = 0;
  # DEBUG cur_ptime => cur_ptime_634
  this_ptime_635 = 0;
  # DEBUG this_ptime => this_ptime_635
  cng_type_636 = 0;
  # DEBUG cng_type => cng_type_636
  D.42030_637 = switch_media_handle_test_media_flag (smh_90, 9);
  if (D.42030_637 == 0)
    goto <bb 227>;
  else
    goto <bb 230>;

<bb 227>:
  D.41522_638 = smh_90->mparams;
  D.41606_639 = D.41522_638->cng_pt;
  D.41607_640 = D.41606_639 != 0;
  D.41608_641 = use_cng_17 != 0;
  D.41609_642 = D.41607_640 && D.41608_641;
  if (D.41609_642 != 0)
    goto <bb 228>;
  else
    goto <bb 230>;

<bb 228>:
  D.41522_643 = smh_90->mparams;
  D.41606_644 = D.41522_643->cng_pt;
  cng_type_645 = (int) D.41606_644;
  # DEBUG cng_type => cng_type_645
  D.41720_646 = a_engine_91->codec_negotiated;
  if (D.41720_646 == 0)
    goto <bb 229>;
  else
    goto <bb 230>;

<bb 229>:
  D.41522_647 = smh_90->mparams;
  D.41522_647->cng_pt = 0;

<bb 230>:
  # cng_type_42 = PHI <cng_type_636(226), cng_type_636(227), cng_type_645(228), cng_type_645(229)>
  # DEBUG cng_type => cng_type_42
  D.41512_648 = session_72(D)->channel;
  mult_649 = switch_channel_get_variable_dup (D.41512_648, "sdp_m_per_ptime", 1, -1);
  # DEBUG mult => mult_649
  D.41512_650 = session_72(D)->channel;
  D.42039_651 = switch_channel_test_flag (D.41512_650, 106);
  if (D.42039_651 != 0)
    goto <bb 233>;
  else
    goto <bb 231>;

<bb 231>:
  if (mult_649 != 0B)
    goto <bb 232>;
  else
    goto <bb 244>;

<bb 232>:
  D.42042_652 = switch_false (mult_649);
  if (D.42042_652 != 0)
    goto <bb 233>;
  else
    goto <bb 244>;

<bb 233>:
  bp_689 = buf_144;
  # DEBUG bp => bp_689
  D.41512_690 = session_72(D)->channel;
  D.42046_691 = switch_channel_test_flag (D.41512_690, 106);
  if (D.42046_691 == 0)
    goto <bb 234>;
  else
    goto <bb 236>;

<bb 234>:
  D.41512_692 = session_72(D)->channel;
  D.42048_693 = switch_channel_test_flag (D.41512_692, 109);
  if (D.42048_693 == 0)
    goto <bb 235>;
  else
    goto <bb 236>;

<bb 235>:
  iftmp.32_694 = 1;
  goto <bb 237>;

<bb 236>:
  iftmp.32_695 = 0;

<bb 237>:
  # iftmp.32_63 = PHI <iftmp.32_694(235), iftmp.32_695(236)>
  both_696 = iftmp.32_63;
  # DEBUG both => both_696
  D.41732_697 = a_engine_91->no_crypto;
  if (D.41732_697 == 0)
    goto <bb 238>;
  else
    goto <bb 239>;

<bb 238>:
  D.41512_698 = session_72(D)->channel;
  D.42054_699 = switch_channel_test_flag (D.41512_698, 92);
  if (D.42054_699 != 0)
    goto <bb 240>;
  else
    goto <bb 239>;

<bb 239>:
  D.41512_700 = session_72(D)->channel;
  D.42055_701 = switch_channel_test_flag (D.41512_700, 109);
  if (D.42055_701 != 0)
    goto <bb 240>;
  else
    goto <bb 242>;

<bb 240>:
  map.33_702 = map;
  generate_m.isra.4 (session_72(D), buf_144, 65536, port_2, family_273, ip_1, 0, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_702, 1);
  D.42057_703 = strlen (buf_144);
  bp_704 = buf_144 + D.42057_703;
  # DEBUG bp => bp_704
  D.42058_705 = smh_90->crypto_mode;
  if (D.42058_705 == 1)
    goto <bb 241>;
  else
    goto <bb 242>;

<bb 241>:
  both_706 = 0;
  # DEBUG both => both_706

<bb 242>:
  # bp_43 = PHI <bp_689(239), bp_704(240), bp_704(241)>
  # both_44 = PHI <both_696(239), both_696(240), both_706(241)>
  # DEBUG both => both_44
  # DEBUG bp => bp_43
  if (both_44 != 0)
    goto <bb 243>;
  else
    goto <bb 263>;

<bb 243>:
  D.42063_707 = strlen (buf_144);
  D.42064_708 = 65536 - D.42063_707;
  map.33_709 = map;
  generate_m.isra.4 (session_72(D), bp_43, D.42064_708, port_2, family_273, ip_1, 0, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_709, 0);
  goto <bb 263>;

<bb 244>:
  i_653 = 0;
  # DEBUG i => i_653
  goto <bb 262>;

<bb 245>:
  imp_656 = smh_90->codecs[i_38];
  # DEBUG imp => imp_656
  D.42065_657 = imp_656->codec_type;
  if (D.42065_657 != 0)
    goto <bb 246>;
  else
    goto <bb 247>;

<bb 246>:
  // predicted unlikely by continue predictor.
  goto <bb 261>;

<bb 247>:
  D.42068_658 = imp_656->microseconds_per_packet;
  this_ptime_659 = D.42068_658 / 1000;
  # DEBUG this_ptime => this_ptime_659
  D.42071_660 = imp_656->iananame;
  D.42072_661 = strcasecmp (D.42071_660, "ilbc");
  if (D.42072_661 == 0)
    goto <bb 249>;
  else
    goto <bb 248>;

<bb 248>:
  D.42071_662 = imp_656->iananame;
  D.42074_663 = strcasecmp (D.42071_662, "isac");
  if (D.42074_663 == 0)
    goto <bb 249>;
  else
    goto <bb 250>;

<bb 249>:
  this_ptime_664 = 20;
  # DEBUG this_ptime => this_ptime_664

<bb 250>:
  # this_ptime_41 = PHI <this_ptime_659(248), this_ptime_664(249)>
  # DEBUG this_ptime => this_ptime_41
  if (cur_ptime_40 != this_ptime_41)
    goto <bb 251>;
  else
    goto <bb 261>;

<bb 251>:
  bp_665 = buf_144;
  # DEBUG bp => bp_665
  both_666 = 1;
  # DEBUG both => both_666
  cur_ptime_667 = this_ptime_41;
  # DEBUG cur_ptime => cur_ptime_667
  D.41732_668 = a_engine_91->no_crypto;
  if (D.41732_668 == 0)
    goto <bb 252>;
  else
    goto <bb 253>;

<bb 252>:
  D.41512_669 = session_72(D)->channel;
  D.42081_670 = switch_channel_test_flag (D.41512_669, 92);
  if (D.42081_670 != 0)
    goto <bb 254>;
  else
    goto <bb 253>;

<bb 253>:
  D.41512_671 = session_72(D)->channel;
  D.42082_672 = switch_channel_test_flag (D.41512_671, 109);
  if (D.42082_672 != 0)
    goto <bb 254>;
  else
    goto <bb 256>;

<bb 254>:
  D.42083_673 = strlen (buf_144);
  D.42084_674 = 65536 - D.42083_673;
  map.33_675 = map;
  generate_m.isra.4 (session_72(D), bp_665, D.42084_674, port_2, family_273, ip_1, cur_ptime_667, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_675, 1);
  D.42085_676 = strlen (buf_144);
  bp_677 = buf_144 + D.42085_676;
  # DEBUG bp => bp_677
  D.42058_678 = smh_90->crypto_mode;
  if (D.42058_678 == 1)
    goto <bb 255>;
  else
    goto <bb 256>;

<bb 255>:
  both_679 = 0;
  # DEBUG both => both_679

<bb 256>:
  # bp_45 = PHI <bp_665(253), bp_677(254), bp_677(255)>
  # both_46 = PHI <both_666(253), both_666(254), both_679(255)>
  # DEBUG both => both_46
  # DEBUG bp => bp_45
  D.41512_680 = session_72(D)->channel;
  D.42090_681 = switch_channel_test_flag (D.41512_680, 106);
  if (D.42090_681 != 0)
    goto <bb 258>;
  else
    goto <bb 257>;

<bb 257>:
  D.41512_682 = session_72(D)->channel;
  D.42092_683 = switch_channel_test_flag (D.41512_682, 109);
  if (D.42092_683 != 0)
    goto <bb 258>;
  else
    goto <bb 259>;

<bb 258>:
  both_684 = 0;
  # DEBUG both => both_684

<bb 259>:
  # both_47 = PHI <both_46(257), both_684(258)>
  # DEBUG both => both_47
  if (both_47 != 0)
    goto <bb 260>;
  else
    goto <bb 261>;

<bb 260>:
  D.42095_685 = strlen (buf_144);
  D.42096_686 = 65536 - D.42095_685;
  map.33_687 = map;
  generate_m.isra.4 (session_72(D), bp_45, D.42096_686, port_2, family_273, ip_1, cur_ptime_667, append_audio_78, sr_4, use_cng_17, cng_type_42, map.33_687, 0);

<bb 261>:
  # cur_ptime_39 = PHI <cur_ptime_40(246), cur_ptime_40(250), cur_ptime_667(259), cur_ptime_667(260)>
  # DEBUG cur_ptime => cur_ptime_39
  i_688 = i_38 + 1;
  # DEBUG i => i_688

<bb 262>:
  # i_38 = PHI <i_653(244), i_688(261)>
  # cur_ptime_40 = PHI <cur_ptime_634(244), cur_ptime_39(261)>
  # DEBUG cur_ptime => cur_ptime_40
  # DEBUG i => i_38
  D.41522_654 = smh_90->mparams;
  D.41587_655 = D.41522_654->num_codecs;
  if (D.41587_655 > i_38)
    goto <bb 245>;
  else
    goto <bb 263>;

<bb 263>:
  # ptime_6 = PHI <ptime_5(218), ptime_69(225), ptime_69(243), ptime_69(262), ptime_5(217), ptime_5(224), ptime_5(223), ptime_5(222), ptime_69(242)>
  # rate_11 = PHI <rate_351(218), rate_70(225), rate_70(243), rate_70(262), rate_351(217), rate_351(224), rate_351(223), rate_351(222), rate_70(242)>
  # DEBUG rate => rate_11
  # DEBUG ptime => ptime_6
  D.41512_710 = session_72(D)->channel;
  D.42097_711 = switch_channel_test_flag (D.41512_710, 98);
  if (D.42097_711 != 0)
    goto <bb 264>;
  else
    goto <bb 461>;

<bb 264>:
  D.41512_712 = session_72(D)->channel;
  D.42100_713 = switch_channel_direction (D.41512_712);
  if (D.42100_713 == 0)
    goto <bb 265>;
  else
    goto <bb 267>;

<bb 265>:
  D.41534_714 = smh_90->session;
  D.41535_715 = D.41534_714->channel;
  D.42103_716 = switch_channel_test_flag (D.41535_715, 109);
  if (D.42103_716 != 0)
    goto <bb 266>;
  else
    goto <bb 267>;

<bb 266>:
  v_engine_92->no_crypto = 1;

<bb 267>:
  D.42106_717 = v_engine_92->local_sdp_port;
  if (D.42106_717 == 0)
    goto <bb 268>;
  else
    goto <bb 269>;

<bb 268>:
  switch_core_media_choose_port (session_72(D), 1, 0);

<bb 269>:
  D.41512_718 = session_72(D)->channel;
  D.42109_719 = switch_channel_test_flag (D.41512_718, 106);
  if (D.42109_719 != 0)
    goto <bb 270>;
  else
    goto <bb 271>;

<bb 270>:
  switch_media_handle_set_media_flag (smh_90, 16);

<bb 271>:
  D.42112_720 = v_engine_92->adv_sdp_port;
  v_port_721 = (uint32_t) D.42112_720;
  # DEBUG v_port => v_port_721
  if (v_port_721 != 0)
    goto <bb 272>;
  else
    goto <bb 461>;

<bb 272>:
  loops_722 = 0;
  # DEBUG loops => loops_722
  goto <bb 460>;

<bb 273>:
  D.41534_723 = smh_90->session;
  D.41535_724 = D.41534_723->channel;
  D.42115_725 = switch_channel_test_flag (D.41535_724, 108);
  if (D.42115_725 != 0)
    goto <bb 274>;
  else
    goto <bb 275>;

<bb 274>:
  D.42118_726 = (short unsigned int) v_port_721;
  gen_ice (session_72(D), 1, ip_1, D.42118_726);

<bb 275>:
  D.42119_727 = strlen (buf_144);
  D.42120_728 = buf_144 + D.42119_727;
  D.42121_729 = strlen (buf_144);
  D.42122_730 = 65536 - D.42121_729;
  if (loops_48 == 0)
    goto <bb 276>;
  else
    goto <bb 278>;

<bb 276>:
  D.41512_731 = session_72(D)->channel;
  D.42129_732 = switch_channel_test_flag (D.41512_731, 92);
  if (D.42129_732 != 0)
    goto <bb 277>;
  else
    goto <bb 278>;

<bb 277>:
  D.41512_733 = session_72(D)->channel;
  D.42131_734 = switch_channel_direction (D.41512_733);
  if (D.42131_734 == 1)
    goto <bb 280>;
  else
    goto <bb 278>;

<bb 278>:
  D.41736_735 = a_engine_91->crypto_type;
  if (D.41736_735 != 9)
    goto <bb 280>;
  else
    goto <bb 279>;

<bb 279>:
  D.41512_736 = session_72(D)->channel;
  D.42133_737 = switch_channel_test_flag (D.41512_736, 109);
  if (D.42133_737 != 0)
    goto <bb 280>;
  else
    goto <bb 281>;

<bb 280>:
  iftmp.34_739 = 1;
  goto <bb 282>;

<bb 281>:
  iftmp.34_738 = 0;

<bb 282>:
  # iftmp.34_64 = PHI <iftmp.34_739(280), iftmp.34_738(281)>
  D.42134_740 = get_media_profile_name (session_72(D), iftmp.34_64);
  switch_snprintf (D.42120_728, D.42122_730, "m=video %d %s", v_port_721, D.42134_740);
  D.42135_741 = v_engine_92->codec_negotiated;
  if (D.42135_741 != 0)
    goto <bb 283>;
  else
    goto <bb 291>;

<bb 283>:
  switch_core_media_set_video_codec (session_72(D), 0);
  D.42138_742 = strlen (buf_144);
  D.42139_743 = buf_144 + D.42138_742;
  D.42140_744 = strlen (buf_144);
  D.42141_745 = 65536 - D.42140_744;
  D.42142_746 = v_engine_92->cur_payload_map;
  D.42143_747 = D.42142_746->agreed_pt;
  D.42144_748 = (int) D.42143_747;
  switch_snprintf (D.42139_743, D.42141_745, " %d", D.42144_748);
  D.42145_749 = switch_media_handle_test_media_flag (smh_90, 16);
  if (D.42145_749 != 0)
    goto <bb 284>;
  else
    goto <bb 306>;

<bb 284>:
  D.41747_750 = smh_90->sdp_mutex;
  switch_mutex_lock (D.41747_750);
  pmap_751 = v_engine_92->cur_payload_map;
  # DEBUG pmap => pmap_751
  goto <bb 288>;

<bb 285>:
  D.42148_753 = pmap_49->pt;
  D.42142_754 = v_engine_92->cur_payload_map;
  D.42149_755 = D.42142_754->pt;
  if (D.42148_753 != D.42149_755)
    goto <bb 286>;
  else
    goto <bb 287>;

<bb 286>:
  D.42152_756 = strlen (buf_144);
  D.42153_757 = buf_144 + D.42152_756;
  D.42154_758 = strlen (buf_144);
  D.42155_759 = 65536 - D.42154_758;
  D.42148_760 = pmap_49->pt;
  D.42156_761 = (int) D.42148_760;
  switch_snprintf (D.42153_757, D.42155_759, " %d", D.42156_761);

<bb 287>:
  pmap_762 = pmap_49->next;
  # DEBUG pmap => pmap_762

<bb 288>:
  # pmap_49 = PHI <pmap_751(284), pmap_762(287)>
  # DEBUG pmap => pmap_49
  if (pmap_49 != 0B)
    goto <bb 289>;
  else
    goto <bb 290>;

<bb 289>:
  D.42158_752 = pmap_49->allocated;
  if (D.42158_752 != 0)
    goto <bb 285>;
  else
    goto <bb 290>;

<bb 290>:
  D.41747_763 = smh_90->sdp_mutex;
  switch_mutex_unlock (D.41747_763);
  goto <bb 306>;

<bb 291>:
  D.41522_764 = smh_90->mparams;
  D.41587_765 = D.41522_764->num_codecs;
  if (D.41587_765 != 0)
    goto <bb 292>;
  else
    goto <bb 306>;

<bb 292>:
  already_did = {};
  i_766 = 0;
  # DEBUG i => i_766
  goto <bb 305>;

<bb 293>:
  imp_769 = smh_90->codecs[i_50];
  # DEBUG imp => imp_769
  D.42162_770 = imp_769->codec_type;
  if (D.42162_770 != 1)
    goto <bb 294>;
  else
    goto <bb 295>;

<bb 294>:
  // predicted unlikely by continue predictor.
  goto <bb 304>;

<bb 295>:
  D.41512_771 = session_72(D)->channel;
  D.42165_772 = switch_channel_direction (D.41512_771);
  if (D.42165_772 == 0)
    goto <bb 296>;
  else
    goto <bb 298>;

<bb 296>:
  D.41512_773 = session_72(D)->channel;
  D.42168_774 = switch_channel_test_flag (D.41512_773, 114);
  if (D.42168_774 != 0)
    goto <bb 297>;
  else
    goto <bb 298>;

<bb 297>:
  // predicted unlikely by continue predictor.
  goto <bb 304>;

<bb 298>:
  D.42171_775 = smh_90->ianacodes[i_50];
  D.42172_776 = (signed char) D.42171_775;
  if (D.42172_776 >= 0)
    goto <bb 299>;
  else
    goto <bb 302>;

<bb 299>:
  D.42171_777 = smh_90->ianacodes[i_50];
  D.42175_778 = (int) D.42171_777;
  D.42176_779 = already_did[D.42175_778];
  if (D.42176_779 != 0)
    goto <bb 300>;
  else
    goto <bb 301>;

<bb 300>:
  // predicted unlikely by continue predictor.
  goto <bb 304>;

<bb 301>:
  D.42171_780 = smh_90->ianacodes[i_50];
  D.42175_781 = (int) D.42171_780;
  already_did[D.42175_781] = 1;

<bb 302>:
  D.42179_782 = strlen (buf_144);
  D.42180_783 = buf_144 + D.42179_782;
  D.42181_784 = strlen (buf_144);
  D.42182_785 = 65536 - D.42181_784;
  D.42171_786 = smh_90->ianacodes[i_50];
  D.42175_787 = (int) D.42171_786;
  switch_snprintf (D.42180_783, D.42182_785, " %d", D.42175_787);
  if (ptime_8 == 0)
    goto <bb 303>;
  else
    goto <bb 304>;

<bb 303>:
  D.42185_788 = imp_769->microseconds_per_packet;
  ptime_789 = D.42185_788 / 1000;
  # DEBUG ptime => ptime_789

<bb 304>:
  # ptime_7 = PHI <ptime_8(294), ptime_8(297), ptime_8(300), ptime_8(302), ptime_789(303)>
  # DEBUG ptime => ptime_7
  i_790 = i_50 + 1;
  # DEBUG i => i_790

<bb 305>:
  # ptime_8 = PHI <ptime_10(292), ptime_7(304)>
  # i_50 = PHI <i_766(292), i_790(304)>
  # DEBUG i => i_50
  # DEBUG ptime => ptime_8
  D.41522_767 = smh_90->mparams;
  D.41587_768 = D.41522_767->num_codecs;
  if (D.41587_768 > i_50)
    goto <bb 293>;
  else
    goto <bb 306>;

<bb 306>:
  # ptime_9 = PHI <ptime_10(290), ptime_10(291), ptime_8(305), ptime_10(283)>
  # DEBUG ptime => ptime_9
  D.42186_791 = strlen (buf_144);
  D.42187_792 = buf_144 + D.42186_791;
  D.42188_793 = strlen (buf_144);
  D.42189_794 = 65536 - D.42188_793;
  switch_snprintf (D.42187_792, D.42189_794, "\n");
  D.42135_795 = v_engine_92->codec_negotiated;
  if (D.42135_795 != 0)
    goto <bb 307>;
  else
    goto <bb 338>;

<bb 307>:
  D.42142_796 = v_engine_92->cur_payload_map;
  D.42192_797 = D.42142_796->rm_encoding;
  D.42193_798 = strcasecmp (D.42192_797, "VP8");
  if (D.42193_798 == 0)
    goto <bb 308>;
  else
    goto <bb 309>;

<bb 308>:
  D.42142_799 = v_engine_92->cur_payload_map;
  D.42149_800 = D.42142_799->pt;
  vp8_801 = (int) D.42149_800;
  # DEBUG vp8 => vp8_801

<bb 309>:
  # vp8_22 = PHI <vp8_27(307), vp8_801(308)>
  # DEBUG vp8 => vp8_22
  D.42142_802 = v_engine_92->cur_payload_map;
  D.42192_803 = D.42142_802->rm_encoding;
  D.42196_804 = strcasecmp (D.42192_803, "red");
  if (D.42196_804 == 0)
    goto <bb 310>;
  else
    goto <bb 311>;

<bb 310>:
  D.42142_805 = v_engine_92->cur_payload_map;
  D.42149_806 = D.42142_805->pt;
  red_807 = (int) D.42149_806;
  # DEBUG red => red_807

<bb 311>:
  # red_28 = PHI <red_33(309), red_807(310)>
  # DEBUG red => red_28
  D.42142_808 = v_engine_92->cur_payload_map;
  rate_809 = D.42142_808->rm_rate;
  # DEBUG rate => rate_809
  D.42199_810 = strlen (buf_144);
  D.42200_811 = buf_144 + D.42199_810;
  D.42201_812 = strlen (buf_144);
  D.42202_813 = 65536 - D.42201_812;
  D.42142_814 = v_engine_92->cur_payload_map;
  D.42149_815 = D.42142_814->pt;
  D.42203_816 = (int) D.42149_815;
  D.42142_817 = v_engine_92->cur_payload_map;
  D.42192_818 = D.42142_817->rm_encoding;
  D.42142_819 = v_engine_92->cur_payload_map;
  D.42204_820 = D.42142_819->rm_rate;
  switch_snprintf (D.42200_811, D.42202_813, "a=rtpmap:%d %s/%ld\n", D.42203_816, D.42192_818, D.42204_820);
  D.41512_821 = session_72(D)->channel;
  D.42205_822 = switch_channel_test_flag (D.41512_821, 84);
  if (D.42205_822 != 0)
    goto <bb 312>;
  else
    goto <bb 313>;

<bb 312>:
  D.42142_823 = v_engine_92->cur_payload_map;
  pass_fmtp_824 = D.42142_823->rm_fmtp;
  # DEBUG pass_fmtp => pass_fmtp_824
  goto <bb 319>;

<bb 313>:
  pass_fmtp_825 = 0B;
  # DEBUG pass_fmtp => pass_fmtp_825
  D.41512_826 = session_72(D)->channel;
  D.42209_827 = switch_channel_get_partner_uuid (D.41512_826);
  if (D.42209_827 != 0B)
    goto <bb 314>;
  else
    goto <bb 316>;

<bb 314>:
  D.41512_828 = session_72(D)->channel;
  of_829 = switch_channel_get_variable_partner (D.41512_828, "rtp_video_fmtp");
  # DEBUG of => of_829
  if (of_829 != 0B)
    goto <bb 315>;
  else
    goto <bb 316>;

<bb 315>:
  pass_fmtp_830 = of_829;
  # DEBUG pass_fmtp => pass_fmtp_830

<bb 316>:
  if (ov_fmtp_76 != 0B)
    goto <bb 317>;
  else
    goto <bb 318>;

<bb 317>:
  pass_fmtp_831 = ov_fmtp_76;
  # DEBUG pass_fmtp => pass_fmtp_831
  goto <bb 319>;

<bb 318>:
  D.41512_832 = session_72(D)->channel;
  pass_fmtp_833 = switch_channel_get_variable_dup (D.41512_832, "rtp_video_fmtp", 1, -1);
  # DEBUG pass_fmtp => pass_fmtp_833

<bb 319>:
  # pass_fmtp_18 = PHI <pass_fmtp_824(312), pass_fmtp_831(317), pass_fmtp_833(318)>
  # DEBUG pass_fmtp => pass_fmtp_18
  if (pass_fmtp_18 != 0B)
    goto <bb 320>;
  else
    goto <bb 321>;

<bb 320>:
  D.42219_834 = strlen (buf_144);
  D.42220_835 = buf_144 + D.42219_834;
  D.42221_836 = strlen (buf_144);
  D.42222_837 = 65536 - D.42221_836;
  D.42142_838 = v_engine_92->cur_payload_map;
  D.42149_839 = D.42142_838->pt;
  D.42203_840 = (int) D.42149_839;
  switch_snprintf (D.42220_835, D.42222_837, "a=fmtp:%d %s\n", D.42203_840, pass_fmtp_18);

<bb 321>:
  D.42223_841 = switch_media_handle_test_media_flag (smh_90, 16);
  if (D.42223_841 != 0)
    goto <bb 322>;
  else
    goto <bb 330>;

<bb 322>:
  D.41747_842 = smh_90->sdp_mutex;
  switch_mutex_lock (D.41747_842);
  pmap_843 = v_engine_92->cur_payload_map;
  # DEBUG pmap => pmap_843
  goto <bb 327>;

<bb 323>:
  D.42226_845 = pmap_51->pt;
  D.42142_846 = v_engine_92->cur_payload_map;
  D.42149_847 = D.42142_846->pt;
  if (D.42226_845 != D.42149_847)
    goto <bb 324>;
  else
    goto <bb 326>;

<bb 324>:
  D.42229_848 = pmap_51->negotiated;
  if (D.42229_848 != 0)
    goto <bb 325>;
  else
    goto <bb 326>;

<bb 325>:
  D.42232_849 = strlen (buf_144);
  D.42233_850 = buf_144 + D.42232_849;
  D.42234_851 = strlen (buf_144);
  D.42235_852 = 65536 - D.42234_851;
  D.42226_853 = pmap_51->pt;
  D.42236_854 = (int) D.42226_853;
  D.42237_855 = pmap_51->iananame;
  D.42238_856 = pmap_51->rate;
  switch_snprintf (D.42233_850, D.42235_852, "a=rtpmap:%d %s/%ld\n", D.42236_854, D.42237_855, D.42238_856);

<bb 326>:
  pmap_857 = pmap_51->next;
  # DEBUG pmap => pmap_857

<bb 327>:
  # pmap_51 = PHI <pmap_843(322), pmap_857(326)>
  # DEBUG pmap => pmap_51
  if (pmap_51 != 0B)
    goto <bb 328>;
  else
    goto <bb 329>;

<bb 328>:
  D.42240_844 = pmap_51->allocated;
  if (D.42240_844 != 0)
    goto <bb 323>;
  else
    goto <bb 329>;

<bb 329>:
  D.41747_858 = smh_90->sdp_mutex;
  switch_mutex_unlock (D.41747_858);

<bb 330>:
  if (append_video_80 != 0B)
    goto <bb 331>;
  else
    goto <bb 385>;

<bb 331>:
  D.42243_859 = strlen (buf_144);
  D.42244_860 = buf_144 + D.42243_859;
  D.42245_861 = strlen (buf_144);
  D.42246_862 = 65536 - D.42245_861;
  D.42249_863 = *append_video_80;
  if (D.42249_863 != 0)
    goto <bb 332>;
  else
    goto <bb 333>;

<bb 332>:
  D.42252_864 = strlen (append_video_80);
  D.42253_865 = D.42252_864 + -1;
  iftmp.36_866 = append_video_80 + D.42253_865;
  goto <bb 334>;

<bb 333>:
  iftmp.36_867 = append_video_80;

<bb 334>:
  # iftmp.36_66 = PHI <iftmp.36_866(332), iftmp.36_867(333)>
  D.42255_868 = *iftmp.36_66;
  if (D.42255_868 == 10)
    goto <bb 335>;
  else
    goto <bb 336>;

<bb 335>:
  iftmp.35_869 = "";
  goto <bb 337>;

<bb 336>:
  iftmp.35_870 = "\n";

<bb 337>:
  # iftmp.35_65 = PHI <iftmp.35_869(335), iftmp.35_870(336)>
  switch_snprintf (D.42244_860, D.42246_862, "%s%s", append_video_80, iftmp.35_65);
  goto <bb 385>;

<bb 338>:
  D.41522_871 = smh_90->mparams;
  D.41587_872 = D.41522_871->num_codecs;
  if (D.41587_872 != 0)
    goto <bb 339>;
  else
    goto <bb 385>;

<bb 339>:
  already_did = {};
  i_873 = 0;
  # DEBUG i => i_873
  goto <bb 384>;

<bb 340>:
  imp_876 = smh_90->codecs[i_52];
  # DEBUG imp => imp_876
  fmtp_877 = 0B;
  # DEBUG fmtp => fmtp_877
  D.42262_878 = smh_90->ianacodes[i_52];
  ianacode_879 = (uint32_t) D.42262_878;
  # DEBUG ianacode => ianacode_879
  D.42263_880 = imp_876->codec_type;
  if (D.42263_880 != 1)
    goto <bb 341>;
  else
    goto <bb 342>;

<bb 341>:
  // predicted unlikely by continue predictor.
  goto <bb 383>;

<bb 342>:
  D.41512_881 = session_72(D)->channel;
  D.42266_882 = switch_channel_direction (D.41512_881);
  if (D.42266_882 == 0)
    goto <bb 343>;
  else
    goto <bb 345>;

<bb 343>:
  D.41512_883 = session_72(D)->channel;
  D.42269_884 = switch_channel_test_flag (D.41512_883, 114);
  if (D.42269_884 != 0)
    goto <bb 344>;
  else
    goto <bb 345>;

<bb 344>:
  // predicted unlikely by continue predictor.
  goto <bb 383>;

<bb 345>:
  if (ianacode_879 <= 127)
    goto <bb 346>;
  else
    goto <bb 349>;

<bb 346>:
  D.42274_885 = already_did[ianacode_879];
  if (D.42274_885 != 0)
    goto <bb 347>;
  else
    goto <bb 348>;

<bb 347>:
  // predicted unlikely by continue predictor.
  goto <bb 383>;

<bb 348>:
  already_did[ianacode_879] = 1;

<bb 349>:
  if (rate_14 == 0)
    goto <bb 350>;
  else
    goto <bb 351>;

<bb 350>:
  rate_886 = imp_876->samples_per_second;
  # DEBUG rate => rate_886

<bb 351>:
  # rate_12 = PHI <rate_14(349), rate_886(350)>
  # DEBUG rate => rate_12
  D.42279_887 = imp_876->iananame;
  D.42280_888 = imp_876->number_of_channels;
  D.42281_889 = (int) D.42280_888;
  channels_890 = get_channels (D.42279_887, D.42281_889);
  # DEBUG channels => channels_890
  D.42279_891 = imp_876->iananame;
  D.42282_892 = strcasecmp (D.42279_891, "VP8");
  if (D.42282_892 == 0)
    goto <bb 352>;
  else
    goto <bb 353>;

<bb 352>:
  vp8_893 = (int) ianacode_879;
  # DEBUG vp8 => vp8_893

<bb 353>:
  # vp8_23 = PHI <vp8_25(351), vp8_893(352)>
  # DEBUG vp8 => vp8_23
  D.42279_894 = imp_876->iananame;
  D.42285_895 = strcasecmp (D.42279_894, "red");
  if (D.42285_895 == 0)
    goto <bb 354>;
  else
    goto <bb 355>;

<bb 354>:
  red_896 = (int) ianacode_879;
  # DEBUG red => red_896

<bb 355>:
  # red_29 = PHI <red_31(353), red_896(354)>
  # DEBUG red => red_29
  if (channels_890 > 1)
    goto <bb 356>;
  else
    goto <bb 357>;

<bb 356>:
  D.42290_897 = strlen (buf_144);
  D.42291_898 = buf_144 + D.42290_897;
  D.42292_899 = strlen (buf_144);
  D.42293_900 = 65536 - D.42292_899;
  D.42279_901 = imp_876->iananame;
  D.42294_902 = imp_876->samples_per_second;
  switch_snprintf (D.42291_898, D.42293_900, "a=rtpmap:%d %s/%d/%d\n", ianacode_879, D.42279_901, D.42294_902, channels_890);
  goto <bb 358>;

<bb 357>:
  D.42296_903 = strlen (buf_144);
  D.42297_904 = buf_144 + D.42296_903;
  D.42298_905 = strlen (buf_144);
  D.42299_906 = 65536 - D.42298_905;
  D.42279_907 = imp_876->iananame;
  D.42294_908 = imp_876->samples_per_second;
  switch_snprintf (D.42297_904, D.42299_906, "a=rtpmap:%d %s/%d\n", ianacode_879, D.42279_907, D.42294_908);

<bb 358>:
  # DEBUG s => ov_fmtp_76
  if (ov_fmtp_76 == 0B)
    goto <bb 361>;
  else
    goto <bb 359>;

<bb 359>:
  D.48171_1536 = *ov_fmtp_76;
  if (D.48171_1536 == 0)
    goto <bb 361>;
  else
    goto <bb 360>;

<bb 360>:

<bb 361>:
  # D.48172_1537 = PHI <1(358), 1(359), 0(360)>
  D.48170_1568 = D.48172_1537;
  D.42300_909 = D.48170_1568;
  if (D.42300_909 == 0)
    goto <bb 362>;
  else
    goto <bb 363>;

<bb 362>:
  fmtp_910 = ov_fmtp_76;
  # DEBUG fmtp => fmtp_910
  goto <bb 377>;

<bb 363>:
  map.33_911 = map;
  if (map.33_911 != 0B)
    goto <bb 364>;
  else
    goto <bb 365>;

<bb 364>:
  map.33_912 = map;
  D.42279_913 = imp_876->iananame;
  fmtp_914 = switch_event_get_header_idx (map.33_912, D.42279_913, -1);
  # DEBUG fmtp => fmtp_914

<bb 365>:
  # fmtp_53 = PHI <fmtp_877(363), fmtp_914(364)>
  # DEBUG fmtp => fmtp_53
  D.42306_915 = smh_90->fmtps[i_52];
  if (D.42306_915 != 0B)
    goto <bb 366>;
  else
    goto <bb 367>;

<bb 366>:
  fmtp_916 = smh_90->fmtps[i_52];
  # DEBUG fmtp => fmtp_916

<bb 367>:
  # fmtp_54 = PHI <fmtp_53(365), fmtp_916(366)>
  # DEBUG fmtp => fmtp_54
  # DEBUG s => fmtp_54
  if (fmtp_54 == 0B)
    goto <bb 370>;
  else
    goto <bb 368>;

<bb 368>:
  D.48175_1538 = MEM[(const char *)fmtp_54];
  if (D.48175_1538 == 0)
    goto <bb 370>;
  else
    goto <bb 369>;

<bb 369>:

<bb 370>:
  # D.48176_1539 = PHI <1(367), 1(368), 0(369)>
  D.48174_1569 = D.48176_1539;
  D.42309_917 = D.48174_1569;
  if (D.42309_917 != 0)
    goto <bb 371>;
  else
    goto <bb 372>;

<bb 371>:
  fmtp_918 = imp_876->fmtp;
  # DEBUG fmtp => fmtp_918

<bb 372>:
  # fmtp_55 = PHI <fmtp_54(370), fmtp_918(371)>
  # DEBUG fmtp => fmtp_55
  # DEBUG s => fmtp_55
  if (fmtp_55 == 0B)
    goto <bb 375>;
  else
    goto <bb 373>;

<bb 373>:
  D.48179_1540 = MEM[(const char *)fmtp_55];
  if (D.48179_1540 == 0)
    goto <bb 375>;
  else
    goto <bb 374>;

<bb 374>:

<bb 375>:
  # D.48180_1541 = PHI <1(372), 1(373), 0(374)>
  D.48178_1570 = D.48180_1541;
  D.42312_919 = D.48178_1570;
  if (D.42312_919 != 0)
    goto <bb 376>;
  else
    goto <bb 377>;

<bb 376>:
  fmtp_920 = pass_fmtp_20;
  # DEBUG fmtp => fmtp_920

<bb 377>:
  # fmtp_56 = PHI <fmtp_910(362), fmtp_55(375), fmtp_920(376)>
  # DEBUG fmtp => fmtp_56
  # DEBUG s => fmtp_56
  if (fmtp_56 == 0B)
    goto <bb 380>;
  else
    goto <bb 378>;

<bb 378>:
  D.48183_1542 = MEM[(const char *)fmtp_56];
  if (D.48183_1542 == 0)
    goto <bb 380>;
  else
    goto <bb 379>;

<bb 379>:

<bb 380>:
  # D.48184_1543 = PHI <1(377), 1(378), 0(379)>
  D.48182_1571 = D.48184_1543;
  D.42315_921 = D.48182_1571;
  if (D.42315_921 == 0)
    goto <bb 381>;
  else
    goto <bb 383>;

<bb 381>:
  D.42318_922 = strcasecmp (fmtp_56, "_blank_");
  if (D.42318_922 != 0)
    goto <bb 382>;
  else
    goto <bb 383>;

<bb 382>:
  D.42321_923 = strlen (buf_144);
  D.42322_924 = buf_144 + D.42321_923;
  D.42323_925 = strlen (buf_144);
  D.42324_926 = 65536 - D.42323_925;
  switch_snprintf (D.42322_924, D.42324_926, "a=fmtp:%d %s\n", ianacode_879, fmtp_56);

<bb 383>:
  # rate_13 = PHI <rate_14(341), rate_14(344), rate_14(347), rate_12(380), rate_12(381), rate_12(382)>
  # vp8_24 = PHI <vp8_25(341), vp8_25(344), vp8_25(347), vp8_23(380), vp8_23(381), vp8_23(382)>
  # red_30 = PHI <red_31(341), red_31(344), red_31(347), red_29(380), red_29(381), red_29(382)>
  # DEBUG red => red_30
  # DEBUG vp8 => vp8_24
  # DEBUG rate => rate_13
  i_927 = i_52 + 1;
  # DEBUG i => i_927

<bb 384>:
  # rate_14 = PHI <rate_16(339), rate_13(383)>
  # vp8_25 = PHI <vp8_27(339), vp8_24(383)>
  # red_31 = PHI <red_33(339), red_30(383)>
  # i_52 = PHI <i_873(339), i_927(383)>
  # DEBUG i => i_52
  # DEBUG red => red_31
  # DEBUG vp8 => vp8_25
  # DEBUG rate => rate_14
  D.41522_874 = smh_90->mparams;
  D.41587_875 = D.41522_874->num_codecs;
  if (D.41587_875 > i_52)
    goto <bb 340>;
  else
    goto <bb 385>;

<bb 385>:
  # rate_15 = PHI <rate_809(337), rate_16(338), rate_14(384), rate_809(330)>
  # pass_fmtp_19 = PHI <pass_fmtp_18(337), pass_fmtp_20(338), pass_fmtp_20(384), pass_fmtp_18(330)>
  # vp8_26 = PHI <vp8_22(337), vp8_27(338), vp8_25(384), vp8_22(330)>
  # red_32 = PHI <red_28(337), red_33(338), red_31(384), red_28(330)>
  # DEBUG red => red_32
  # DEBUG vp8 => vp8_26
  # DEBUG pass_fmtp => pass_fmtp_19
  # DEBUG rate => rate_15
  if (is_outbound_89 != 0)
    goto <bb 387>;
  else
    goto <bb 386>;

<bb 386>:
  D.41512_928 = session_72(D)->channel;
  D.42328_929 = switch_channel_test_flag (D.41512_928, 84);
  if (D.42328_929 != 0)
    goto <bb 387>;
  else
    goto <bb 389>;

<bb 387>:
  D.41534_930 = smh_90->session;
  D.41535_931 = D.41534_930->channel;
  D.42329_932 = switch_channel_test_flag (D.41535_931, 109);
  if (D.42329_932 != 0)
    goto <bb 388>;
  else
    goto <bb 389>;

<bb 388>:
  generate_local_fingerprint (smh_90, 1);

<bb 389>:
  D.42332_933 = v_engine_92->local_dtls_fingerprint.type;
  # DEBUG s => D.42332_933
  if (D.42332_933 == 0B)
    goto <bb 392>;
  else
    goto <bb 390>;

<bb 390>:
  D.48187_1544 = MEM[(const char *)D.42332_933];
  if (D.48187_1544 == 0)
    goto <bb 392>;
  else
    goto <bb 391>;

<bb 391>:

<bb 392>:
  # D.48188_1545 = PHI <1(389), 1(390), 0(391)>
  D.48186_1572 = D.48188_1545;
  D.42333_934 = D.48186_1572;
  if (D.42333_934 == 0)
    goto <bb 393>;
  else
    goto <bb 394>;

<bb 393>:
  D.42336_935 = strlen (buf_144);
  D.42337_936 = buf_144 + D.42336_935;
  D.42338_937 = strlen (buf_144);
  D.42339_938 = 65536 - D.42338_937;
  D.42332_939 = v_engine_92->local_dtls_fingerprint.type;
  D.42340_940 = &v_engine_92->local_dtls_fingerprint.str;
  switch_snprintf (D.42337_936, D.42339_938, "a=fingerprint:%s %s\n", D.42332_939, D.42340_940);

<bb 394>:
  D.41522_941 = smh_90->mparams;
  D.41527_942 = D.41522_941->rtcp_video_interval_msec;
  if (D.41527_942 != 0B)
    goto <bb 395>;
  else
    goto <bb 398>;

<bb 395>:
  D.42343_943 = v_engine_92->rtcp_mux;
  if (D.42343_943 > 0)
    goto <bb 396>;
  else
    goto <bb 397>;

<bb 396>:
  D.42346_944 = strlen (buf_144);
  D.42347_945 = buf_144 + D.42346_944;
  D.42348_946 = strlen (buf_144);
  D.42349_947 = 65536 - D.42348_946;
  switch_snprintf (D.42347_945, D.42349_947, "a=rtcp-mux\n");
  D.42350_948 = strlen (buf_144);
  D.42351_949 = buf_144 + D.42350_948;
  D.42352_950 = strlen (buf_144);
  D.42353_951 = 65536 - D.42352_950;
  switch_snprintf (D.42351_949, D.42353_951, "a=rtcp:%d IN %s %s\n", v_port_721, family_273, ip_1);
  goto <bb 398>;

<bb 397>:
  D.42355_952 = strlen (buf_144);
  D.42356_953 = buf_144 + D.42355_952;
  D.42357_954 = strlen (buf_144);
  D.42358_955 = 65536 - D.42357_954;
  D.42359_956 = v_port_721 + 1;
  switch_snprintf (D.42356_953, D.42358_955, "a=rtcp:%d IN %s %s\n", D.42359_956, family_273, ip_1);

<bb 398>:
  D.42360_957 = BIT_FIELD_REF <*v_engine_92, 16, 91280>;
  D.42361_958 = D.42360_957 & 65535;
  if (D.42361_958 != 0)
    goto <bb 399>;
  else
    goto <bb 406>;

<bb 399>:
  D.42364_959 = strlen (buf_144);
  D.42365_960 = buf_144 + D.42364_959;
  D.42366_961 = strlen (buf_144);
  D.42367_962 = 65536 - D.42366_961;
  D.42369_963 = v_engine_92->fir;
  if (D.42369_963 != 0)
    goto <bb 400>;
  else
    goto <bb 401>;

<bb 400>:
  iftmp.37_964 = "fir ";
  goto <bb 402>;

<bb 401>:
  iftmp.37_965 = "";

<bb 402>:
  # iftmp.37_67 = PHI <iftmp.37_964(400), iftmp.37_965(401)>
  D.42374_966 = v_engine_92->pli;
  if (D.42374_966 != 0)
    goto <bb 403>;
  else
    goto <bb 404>;

<bb 403>:
  iftmp.38_967 = "pli";
  goto <bb 405>;

<bb 404>:
  iftmp.38_968 = "";

<bb 405>:
  # iftmp.38_68 = PHI <iftmp.38_967(403), iftmp.38_968(404)>
  switch_snprintf (D.42365_960, D.42367_962, "a=rtcp-fb:* %s%s\n", iftmp.37_67, iftmp.38_68);

<bb 406>:
  D.42378_969 = v_engine_92->ice_out.cands[0][0].ready;
  if (D.42378_969 != 0)
    goto <bb 407>;
  else
    goto <bb 440>;

<bb 407>:
  tmp1 = "";
  tmp2 = "";
  c1_970 = 659136;
  # DEBUG c1 => c1_970
  c2_971 = 659134;
  # DEBUG c2 => c2_971
  c3_972 = 659126;
  # DEBUG c3 => c3_972
  c4_973 = 659124;
  # DEBUG c4 => c4_973
  bw_974 = 256;
  # DEBUG bw => bw_974
  tmp1[10] = 0;
  tmp2[10] = 0;
  switch_stun_random_string (&tmp1, 10, "0123456789");
  switch_stun_random_string (&tmp2, 10, "0123456789");
  ice_out_975 = &v_engine_92->ice_out;
  # DEBUG ice_out => ice_out_975
  D.41534_976 = smh_90->session;
  D.41535_977 = D.41534_976->channel;
  vbw_978 = switch_channel_get_variable_dup (D.41535_977, "rtp_video_max_bandwidth", 1, -1);
  # DEBUG vbw => vbw_978
  if (vbw_978 != 0B)
    goto <bb 408>;
  else
    goto <bb 409>;

<bb 408>:
  # DEBUG __nptr => vbw_978
  D.48191_1546 = strtol (vbw_978, 0B, 10);
  D.48190_1574 = D.48191_1546;
  v_979 = D.48190_1574;
  # DEBUG v => NULL
  bw_980 = v_979;
  # DEBUG bw => bw_980

<bb 409>:
  # bw_57 = PHI <bw_974(407), bw_980(408)>
  # DEBUG bw => bw_57
  if (bw_57 > 0)
    goto <bb 410>;
  else
    goto <bb 411>;

<bb 410>:
  D.42385_981 = strlen (buf_144);
  D.42386_982 = buf_144 + D.42385_981;
  D.42387_983 = strlen (buf_144);
  D.42388_984 = 65536 - D.42387_983;
  switch_snprintf (D.42386_982, D.42388_984, "b=AS:%d\n", bw_57);

<bb 411>:
  if (vp8_26 != 0)
    goto <bb 412>;
  else
    goto <bb 414>;

<bb 412>:
  D.41512_985 = session_72(D)->channel;
  D.42391_986 = switch_channel_test_flag (D.41512_985, 106);
  if (D.42391_986 != 0)
    goto <bb 413>;
  else
    goto <bb 414>;

<bb 413>:
  D.42394_987 = strlen (buf_144);
  D.42395_988 = buf_144 + D.42394_987;
  D.42396_989 = strlen (buf_144);
  D.42397_990 = 65536 - D.42396_989;
  switch_snprintf (D.42395_988, D.42397_990, "a=rtcp-fb:%d ccm fir\n", vp8_26);

<bb 414>:
  if (red_32 != 0)
    goto <bb 415>;
  else
    goto <bb 416>;

<bb 415>:
  D.42400_991 = strlen (buf_144);
  D.42401_992 = buf_144 + D.42400_991;
  D.42402_993 = strlen (buf_144);
  D.42403_994 = 65536 - D.42402_993;
  switch_snprintf (D.42401_992, D.42403_994, "a=rtcp-fb:%d nack\n", vp8_26);

<bb 416>:
  D.42404_995 = strlen (buf_144);
  D.42405_996 = buf_144 + D.42404_995;
  D.42406_997 = strlen (buf_144);
  D.42407_998 = 65536 - D.42406_997;
  D.42408_999 = v_engine_92->ssrc;
  D.41935_1000 = smh_90->cname;
  switch_snprintf (D.42405_996, D.42407_998, "a=ssrc:%u cname:%s\n", D.42408_999, D.41935_1000);
  D.42409_1001 = strlen (buf_144);
  D.42410_1002 = buf_144 + D.42409_1001;
  D.42411_1003 = strlen (buf_144);
  D.42412_1004 = 65536 - D.42411_1003;
  D.42408_1005 = v_engine_92->ssrc;
  D.41719_1006 = smh_90->msid;
  switch_snprintf (D.42410_1002, D.42412_1004, "a=ssrc:%u msid:%s v0\n", D.42408_1005, D.41719_1006);
  D.42413_1007 = strlen (buf_144);
  D.42414_1008 = buf_144 + D.42413_1007;
  D.42415_1009 = strlen (buf_144);
  D.42416_1010 = 65536 - D.42415_1009;
  D.42408_1011 = v_engine_92->ssrc;
  D.41719_1012 = smh_90->msid;
  switch_snprintf (D.42414_1008, D.42416_1010, "a=ssrc:%u mslabel:%s\n", D.42408_1011, D.41719_1012);
  D.42417_1013 = strlen (buf_144);
  D.42418_1014 = buf_144 + D.42417_1013;
  D.42419_1015 = strlen (buf_144);
  D.42420_1016 = 65536 - D.42419_1015;
  D.42408_1017 = v_engine_92->ssrc;
  D.41719_1018 = smh_90->msid;
  switch_snprintf (D.42418_1014, D.42420_1016, "a=ssrc:%u label:%sv0\n", D.42408_1017, D.41719_1018);
  D.42421_1019 = strlen (buf_144);
  D.42422_1020 = buf_144 + D.42421_1019;
  D.42423_1021 = strlen (buf_144);
  D.42424_1022 = 65536 - D.42423_1021;
  D.41952_1023 = ice_out_975->ufrag;
  switch_snprintf (D.42422_1020, D.42424_1022, "a=ice-ufrag:%s\n", D.41952_1023);
  D.42425_1024 = strlen (buf_144);
  D.42426_1025 = buf_144 + D.42425_1024;
  D.42427_1026 = strlen (buf_144);
  D.42428_1027 = 65536 - D.42427_1026;
  D.41957_1028 = ice_out_975->pwd;
  switch_snprintf (D.42426_1025, D.42428_1027, "a=ice-pwd:%s\n", D.41957_1028);
  D.42429_1029 = strlen (buf_144);
  D.42430_1030 = buf_144 + D.42429_1029;
  D.42431_1031 = strlen (buf_144);
  D.42432_1032 = 65536 - D.42431_1031;
  D.41962_1033 = ice_out_975->cands[0][0].transport;
  D.41963_1034 = ice_out_975->cands[0][0].con_addr;
  D.41964_1035 = ice_out_975->cands[0][0].con_port;
  D.41965_1036 = (int) D.41964_1035;
  switch_snprintf (D.42430_1030, D.42432_1032, "a=candidate:%s 1 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_1033, c1_970, D.41963_1034, D.41965_1036);
  D.42433_1037 = v_engine_92->local_sdp_ip;
  # DEBUG s => D.42433_1037
  if (D.42433_1037 == 0B)
    goto <bb 419>;
  else
    goto <bb 417>;

<bb 417>:
  D.48194_1547 = MEM[(const char *)D.42433_1037];
  if (D.48194_1547 == 0)
    goto <bb 419>;
  else
    goto <bb 418>;

<bb 418>:

<bb 419>:
  # D.48195_1548 = PHI <1(416), 1(417), 0(418)>
  D.48193_1575 = D.48195_1548;
  D.42434_1038 = D.48193_1575;
  if (D.42434_1038 == 0)
    goto <bb 420>;
  else
    goto <bb 427>;

<bb 420>:
  D.41963_1039 = ice_out_975->cands[0][0].con_addr;
  # DEBUG s => D.41963_1039
  if (D.41963_1039 == 0B)
    goto <bb 423>;
  else
    goto <bb 421>;

<bb 421>:
  D.48198_1549 = MEM[(const char *)D.41963_1039];
  if (D.48198_1549 == 0)
    goto <bb 423>;
  else
    goto <bb 422>;

<bb 422>:

<bb 423>:
  # D.48199_1550 = PHI <1(420), 1(421), 0(422)>
  D.48197_1576 = D.48199_1550;
  D.42437_1040 = D.48197_1576;
  if (D.42437_1040 == 0)
    goto <bb 424>;
  else
    goto <bb 427>;

<bb 424>:
  D.42433_1041 = v_engine_92->local_sdp_ip;
  D.41963_1042 = ice_out_975->cands[0][0].con_addr;
  D.39666_1043 = __builtin_strcmp (D.42433_1041, D.41963_1042);
  if (D.39666_1043 != 0)
    goto <bb 425>;
  else
    goto <bb 427>;

<bb 425>:
  D.42106_1044 = v_engine_92->local_sdp_port;
  D.41964_1045 = ice_out_975->cands[0][0].con_port;
  if (D.42106_1044 != D.41964_1045)
    goto <bb 426>;
  else
    goto <bb 427>;

<bb 426>:
  D.42444_1046 = strlen (buf_144);
  D.42445_1047 = buf_144 + D.42444_1046;
  D.42446_1048 = strlen (buf_144);
  D.42447_1049 = 65536 - D.42446_1048;
  D.41962_1050 = ice_out_975->cands[0][0].transport;
  D.41963_1051 = ice_out_975->cands[0][0].con_addr;
  D.41964_1052 = ice_out_975->cands[0][0].con_port;
  D.41965_1053 = (int) D.41964_1052;
  D.42433_1054 = v_engine_92->local_sdp_ip;
  D.42106_1055 = v_engine_92->local_sdp_port;
  D.42448_1056 = (int) D.42106_1055;
  switch_snprintf (D.42445_1047, D.42447_1049, "a=candidate:%s 1 %s %u %s %d typ srflx raddr %s rport %d generation 0\n", &tmp2, D.41962_1050, c3_972, D.41963_1051, D.41965_1053, D.42433_1054, D.42448_1056);

<bb 427>:
  D.42343_1057 = v_engine_92->rtcp_mux;
  D.42451_1058 = D.42343_1057 <= 0;
  D.41986_1059 = is_outbound_89 != 0;
  D.42452_1060 = D.42451_1058 || D.41986_1059;
  if (D.42452_1060 != 0)
    goto <bb 429>;
  else
    goto <bb 428>;

<bb 428>:
  D.41512_1061 = session_72(D)->channel;
  D.42454_1062 = switch_channel_test_flag (D.41512_1061, 84);
  if (D.42454_1062 != 0)
    goto <bb 429>;
  else
    goto <bb 440>;

<bb 429>:
  D.42455_1063 = strlen (buf_144);
  D.42456_1064 = buf_144 + D.42455_1063;
  D.42457_1065 = strlen (buf_144);
  D.42458_1066 = 65536 - D.42457_1065;
  D.41962_1067 = ice_out_975->cands[0][0].transport;
  D.41963_1068 = ice_out_975->cands[0][0].con_addr;
  D.41964_1069 = ice_out_975->cands[0][0].con_port;
  D.41965_1070 = (int) D.41964_1069;
  D.42343_1071 = v_engine_92->rtcp_mux;
  D.42459_1072 = D.42343_1071 <= 0;
  D.42460_1073 = D.41965_1070 + D.42459_1072;
  switch_snprintf (D.42456_1064, D.42458_1066, "a=candidate:%s 2 %s %u %s %d typ host generation 0\n", &tmp1, D.41962_1067, c2_971, D.41963_1068, D.42460_1073);
  D.42433_1074 = v_engine_92->local_sdp_ip;
  # DEBUG s => D.42433_1074
  if (D.42433_1074 == 0B)
    goto <bb 432>;
  else
    goto <bb 430>;

<bb 430>:
  D.48202_1551 = MEM[(const char *)D.42433_1074];
  if (D.48202_1551 == 0)
    goto <bb 432>;
  else
    goto <bb 431>;

<bb 431>:

<bb 432>:
  # D.48203_1552 = PHI <1(429), 1(430), 0(431)>
  D.48201_1577 = D.48203_1552;
  D.42461_1075 = D.48201_1577;
  if (D.42461_1075 == 0)
    goto <bb 433>;
  else
    goto <bb 440>;

<bb 433>:
  D.42464_1076 = ice_out_975->cands[0][1].con_addr;
  # DEBUG s => D.42464_1076
  if (D.42464_1076 == 0B)
    goto <bb 436>;
  else
    goto <bb 434>;

<bb 434>:
  D.48206_1553 = MEM[(const char *)D.42464_1076];
  if (D.48206_1553 == 0)
    goto <bb 436>;
  else
    goto <bb 435>;

<bb 435>:

<bb 436>:
  # D.48207_1554 = PHI <1(433), 1(434), 0(435)>
  D.48205_1578 = D.48207_1554;
  D.42465_1077 = D.48205_1578;
  if (D.42465_1077 == 0)
    goto <bb 437>;
  else
    goto <bb 440>;

<bb 437>:
  D.42433_1078 = v_engine_92->local_sdp_ip;
  D.42464_1079 = ice_out_975->cands[0][1].con_addr;
  D.39675_1080 = __builtin_strcmp (D.42433_1078, D.42464_1079);
  if (D.39675_1080 != 0)
    goto <bb 438>;
  else
    goto <bb 440>;

<bb 438>:
  D.42106_1081 = v_engine_92->local_sdp_port;
  D.42470_1082 = ice_out_975->cands[0][1].con_port;
  if (D.42106_1081 != D.42470_1082)
    goto <bb 439>;
  else
    goto <bb 440>;

<bb 439>:
  D.42473_1083 = strlen (buf_144);
  D.42474_1084 = buf_144 + D.42473_1083;
  D.42475_1085 = strlen (buf_144);
  D.42476_1086 = 65536 - D.42475_1085;
  D.41962_1087 = ice_out_975->cands[0][0].transport;
  D.41963_1088 = ice_out_975->cands[0][0].con_addr;
  D.41964_1089 = ice_out_975->cands[0][0].con_port;
  D.41965_1090 = (int) D.41964_1089;
  D.42343_1091 = v_engine_92->rtcp_mux;
  D.42459_1092 = D.42343_1091 <= 0;
  D.42460_1093 = D.41965_1090 + D.42459_1092;
  D.42433_1094 = v_engine_92->local_sdp_ip;
  D.42106_1095 = v_engine_92->local_sdp_port;
  D.42448_1096 = (int) D.42106_1095;
  D.42343_1097 = v_engine_92->rtcp_mux;
  D.42459_1098 = D.42343_1097 <= 0;
  D.42477_1099 = D.42448_1096 + D.42459_1098;
  switch_snprintf (D.42474_1084, D.42476_1086, "a=candidate:%s 2 %s %u %s %d typ srflx generation 0\n", &tmp2, D.41962_1087, c4_973, D.41963_1088, D.42460_1093, D.42433_1094, D.42477_1099);

<bb 440>:
  if (loops_48 == 0)
    goto <bb 441>;
  else
    goto <bb 453>;

<bb 441>:
  D.41512_1100 = session_72(D)->channel;
  D.42480_1101 = switch_channel_test_flag (D.41512_1100, 92);
  if (D.42480_1101 != 0)
    goto <bb 442>;
  else
    goto <bb 453>;

<bb 442>:
  D.41512_1102 = session_72(D)->channel;
  D.42483_1103 = switch_channel_test_flag (D.41512_1102, 109);
  if (D.42483_1103 == 0)
    goto <bb 443>;
  else
    goto <bb 453>;

<bb 443>:
  i_1104 = 0;
  # DEBUG i => i_1104
  goto <bb 452>;

<bb 444>:
  D.42486_1106 = smh_90->crypto_suite_order[i_58];
  j_1107 = SUITES[D.42486_1106].type;
  # DEBUG j => j_1107
  D.41736_1108 = a_engine_91->crypto_type;
  if (D.41736_1108 == j_1107)
    goto <bb 446>;
  else
    goto <bb 445>;

<bb 445>:
  D.41736_1109 = a_engine_91->crypto_type;
  if (D.41736_1109 == 9)
    goto <bb 446>;
  else
    goto <bb 451>;

<bb 446>:
  D.42490_1110 = a_engine_91->ssec[j_1107].local_crypto_key;
  # DEBUG s => D.42490_1110
  if (D.42490_1110 == 0B)
    goto <bb 449>;
  else
    goto <bb 447>;

<bb 447>:
  D.48210_1555 = MEM[(const char *)D.42490_1110];
  if (D.48210_1555 == 0)
    goto <bb 449>;
  else
    goto <bb 448>;

<bb 448>:

<bb 449>:
  # D.48211_1556 = PHI <1(446), 1(447), 0(448)>
  D.48209_1579 = D.48211_1556;
  D.42491_1111 = D.48209_1579;
  if (D.42491_1111 == 0)
    goto <bb 450>;
  else
    goto <bb 451>;

<bb 450>:
  D.42494_1112 = strlen (buf_144);
  D.42495_1113 = buf_144 + D.42494_1112;
  D.42496_1114 = strlen (buf_144);
  D.42497_1115 = 65536 - D.42496_1114;
  D.42498_1116 = v_engine_92->ssec[j_1107].local_crypto_key;
  switch_snprintf (D.42495_1113, D.42497_1115, "a=crypto:%s\n", D.42498_1116);

<bb 451>:
  i_1117 = i_58 + 1;
  # DEBUG i => i_1117

<bb 452>:
  # i_58 = PHI <i_1104(443), i_1117(451)>
  # DEBUG i => i_58
  D.42486_1105 = smh_90->crypto_suite_order[i_58];
  if (D.42486_1105 != 9)
    goto <bb 444>;
  else
    goto <bb 453>;

<bb 453>:
  if (local_sdp_video_zrtp_hash_84 != 0B)
    goto <bb 454>;
  else
    goto <bb 455>;

<bb 454>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 6892, session_72(D), 7, "Adding video a=zrtp-hash:%s\n", local_sdp_video_zrtp_hash_84);
  D.42501_1118 = strlen (buf_144);
  D.42502_1119 = buf_144 + D.42501_1118;
  D.42503_1120 = strlen (buf_144);
  D.42504_1121 = 65536 - D.42503_1120;
  switch_snprintf (D.42502_1119, D.42504_1121, "a=zrtp-hash:%s\n", local_sdp_video_zrtp_hash_84);

<bb 455>:
  D.41512_1122 = session_72(D)->channel;
  D.42505_1123 = switch_channel_test_flag (D.41512_1122, 109);
  if (D.42505_1123 != 0)
    goto <bb 461>;
  else
    goto <bb 456>;

<bb 456>:
  D.41512_1124 = session_72(D)->channel;
  D.42507_1125 = switch_channel_test_flag (D.41512_1124, 92);
  if (D.42507_1125 == 0)
    goto <bb 461>;
  else
    goto <bb 457>;

<bb 457>:
  D.42058_1126 = smh_90->crypto_mode;
  if (D.42058_1126 == 1)
    goto <bb 461>;
  else
    goto <bb 458>;

<bb 458>:
  D.42058_1127 = smh_90->crypto_mode;
  if (D.42058_1127 == 2)
    goto <bb 461>;
  else
    goto <bb 459>;

<bb 459>:
  loops_1128 = loops_48 + 1;
  # DEBUG loops => loops_1128

<bb 460>:
  # ptime_10 = PHI <ptime_6(272), ptime_9(459)>
  # rate_16 = PHI <rate_11(272), rate_15(459)>
  # pass_fmtp_20 = PHI <pass_fmtp_74(272), pass_fmtp_19(459)>
  # vp8_27 = PHI <vp8_85(272), vp8_26(459)>
  # red_33 = PHI <red_86(272), red_32(459)>
  # loops_48 = PHI <loops_722(272), loops_1128(459)>
  # DEBUG loops => loops_48
  # DEBUG red => red_33
  # DEBUG vp8 => vp8_27
  # DEBUG pass_fmtp => pass_fmtp_20
  # DEBUG rate => rate_16
  # DEBUG ptime => ptime_10
  if (loops_48 <= 1)
    goto <bb 273>;
  else
    goto <bb 461>;

<bb 461>:
  map.33_1129 = map;
  if (map.33_1129 != 0B)
    goto <bb 462>;
  else
    goto <bb 463>;

<bb 462>:
  switch_event_destroy (&map);

<bb 463>:
  ptmap.39_1130 = ptmap;
  if (ptmap.39_1130 != 0B)
    goto <bb 464>;
  else
    goto <bb 465>;

<bb 464>:
  switch_event_destroy (&ptmap);

<bb 465>:
  switch_core_media_set_local_sdp (session_72(D), buf_144, 1);
  if (buf_144 != 0B)
    goto <bb 466>;
  else
    goto <bb 467>;

<bb 466>:
  free (buf_144);
  buf_1131 = 0B;
  # DEBUG buf => buf_1131

<bb 467>:
  return;

}



;; Function switch_core_media_absorb_sdp (switch_core_media_absorb_sdp)

Considering inline candidate switch_core_media_set_local_sdp.
Not inlining: code size would grow by 39.
Iterations: 0
switch_core_media_absorb_sdp (struct switch_core_session_t * session)
{
  struct sdp_connection_t * connection;
  struct sdp_media_t * m;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  static const char __func__[29] = "switch_core_media_absorb_sdp";
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_absorb_sdp";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  const char * sdp_str;
  switch_port_t D.41509;
  char * D.41506;
  short unsigned int D.41505;
  char * D.41504;
  const char * D.41503;
  struct sdp_connection_t * D.41498;
  long unsigned int D.41497;
  sdp_media_e D.41495;
  int D.41488;
  size_t D.41487;
  struct switch_channel_t * D.41484;

<bb 2>:
  if (session_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 6930, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_4 = session_3(D)->media_handle;
  # DEBUG smh => smh_4
  if (smh_4 == 0B)
    goto <bb 22>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_5 = &smh_4->engines;
  # DEBUG a_engine => a_engine_5
  D.41484_6 = session_3(D)->channel;
  sdp_str_7 = switch_channel_get_variable_dup (D.41484_6, "switch_m_sdp", 1, -1);
  # DEBUG sdp_str => sdp_str_7
  if (sdp_str_7 != 0B)
    goto <bb 6>;
  else
    goto <bb 22>;

<bb 6>:
  D.41487_8 = strlen (sdp_str_7);
  D.41488_9 = (int) D.41487_8;
  parser_10 = sdp_parse (0B, sdp_str_7, D.41488_9, 0);
  # DEBUG parser => parser_10
  if (parser_10 != 0B)
    goto <bb 7>;
  else
    goto <bb 21>;

<bb 7>:
  sdp_11 = sdp_session (parser_10);
  # DEBUG sdp => sdp_11
  if (sdp_11 != 0B)
    goto <bb 8>;
  else
    goto <bb 20>;

<bb 8>:
  m_12 = sdp_11->sdp_media;
  # DEBUG m => m_12
  goto <bb 19>;

<bb 9>:
  D.41495_13 = m_1->m_type;
  if (D.41495_13 != 2)
    goto <bb 11>;
  else
    goto <bb 10>;

<bb 10>:
  D.41497_14 = m_1->m_port;
  if (D.41497_14 == 0)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  // predicted unlikely by continue predictor.
  goto <bb 18>;

<bb 12>:
  connection_15 = sdp_11->sdp_connection;
  # DEBUG connection => connection_15
  D.41498_16 = m_1->m_connections;
  if (D.41498_16 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  connection_17 = m_1->m_connections;
  # DEBUG connection => connection_17

<bb 14>:
  # connection_2 = PHI <connection_15(12), connection_17(13)>
  # DEBUG connection => connection_2
  if (connection_2 != 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.41503_18 = connection_2->c_address;
  D.41504_19 = switch_core_perform_session_strdup (session_3(D), D.41503_18, "src/switch_core_media.c", &__func__, 6957);
  a_engine_5->proxy_sdp_ip = D.41504_19;

<bb 16>:
  D.41497_20 = m_1->m_port;
  D.41505_21 = (short unsigned int) D.41497_20;
  a_engine_5->proxy_sdp_port = D.41505_21;
  D.41506_22 = a_engine_5->proxy_sdp_ip;
  if (D.41506_22 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

<bb 17>:
  D.41509_23 = a_engine_5->proxy_sdp_port;
  if (D.41509_23 != 0)
    goto <bb 20>;
  else
    goto <bb 18>;

<bb 18>:
  m_24 = m_1->m_next;
  # DEBUG m => m_24

<bb 19>:
  # m_1 = PHI <m_12(8), m_24(18)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 9>;
  else
    goto <bb 20>;

<bb 20>:
  sdp_parser_free (parser_10);

<bb 21>:
  switch_core_media_set_local_sdp (session_3(D), sdp_str_7, 1);

<bb 22>:
  return;

}



;; Function switch_core_media_set_udptl_image_sdp (switch_core_media_set_udptl_image_sdp)

Considering inline candidate switch_core_media_set_local_sdp.
Not inlining: code size would grow by 39.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Iterations: 0
switch_core_media_set_udptl_image_sdp (struct switch_core_session_t * session, struct switch_t38_options_t * t38_options, int insist)
{
  static const char __func__[38] = "switch_core_media_set_udptl_image_sdp";
  static const char __PRETTY_FUNCTION__[38] = "switch_core_media_set_udptl_image_sdp";
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  int broken_boolean;
  const char * var;
  const char * jbig_off;
  const char * jbig_on;
  const char * mmr_off;
  const char * mmr_on;
  const char * bit_removal_off;
  const char * bit_removal_on;
  const char * username;
  const char * family;
  uint32_t port;
  const char * ip;
  char max_data[128];
  char max_buf[128];
  char buf[2048];
  char * D.41478;
  char * D.41477;
  unsigned int D.41476;
  size_t D.41475;
  char * D.41474;
  size_t D.41473;
  const char * D.41470;
  const char * D.41469;
  switch_bool_t D.41465;
  const char * iftmp.24;
  switch_bool_t D.41460;
  const char * iftmp.23;
  switch_bool_t D.41455;
  const char * iftmp.22;
  uint32_t D.41453;
  int D.41452;
  uint16_t D.41451;
  unsigned int D.41450;
  size_t D.41449;
  char * D.41448;
  size_t D.41447;
  uint32_t D.41442;
  uint32_t D.41439;
  char * D.41435;
  char[4] * iftmp.21;
  uint32_t D.41433;
  uint32_t D.41430;
  unsigned int D.41429;
  unsigned int D.41428;
  time_t D.41427;
  uint32_t D.41424;
  char * D.41423;
  switch_port_t D.41420;
  switch_port_t D.41417;
  char * D.41414;
  struct switch_channel_t * D.41407;
  struct switch_core_media_params_t * D.41406;
  uint16_t D.41405;

<bb 2>:
  buf = "";
  max_buf = "";
  max_data = "";
  family_13 = "IP4";
  # DEBUG family => family_13
  bit_removal_on_14 = "a=T38FaxFillBitRemoval\n";
  # DEBUG bit_removal_on => bit_removal_on_14
  bit_removal_off_15 = "";
  # DEBUG bit_removal_off => bit_removal_off_15
  mmr_on_16 = "a=T38FaxTranscodingMMR\n";
  # DEBUG mmr_on => mmr_on_16
  mmr_off_17 = "";
  # DEBUG mmr_off => mmr_off_17
  jbig_on_18 = "a=T38FaxTranscodingJBIG\n";
  # DEBUG jbig_on => jbig_on_18
  jbig_off_19 = "";
  # DEBUG jbig_off => jbig_off_19
  if (session_20(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 6995, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_21 = session_20(D)->media_handle;
  # DEBUG smh => smh_21
  if (smh_21 == 0B)
    goto <bb 42>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_22 = &smh_21->engines;
  # DEBUG a_engine => a_engine_22
  if (t38_options_23(D) == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  __assert_fail ("t38_options", "src/switch_core_media.c", 7004, &__PRETTY_FUNCTION__);

<bb 7>:
  ip_24 = t38_options_23(D)->local_ip;
  # DEBUG ip => ip_24
  D.41405_25 = t38_options_23(D)->local_port;
  port_26 = (uint32_t) D.41405_25;
  # DEBUG port => port_26
  D.41406_27 = smh_21->mparams;
  username_28 = D.41406_27->sdp_username;
  # DEBUG username => username_28
  D.41407_29 = session_20(D)->channel;
  var_30 = switch_channel_get_variable_dup (D.41407_29, "t38_broken_boolean", 1, -1);
  # DEBUG var => var_30
  broken_boolean_31 = switch_true (var_30);
  # DEBUG broken_boolean => broken_boolean_31
  if (ip_24 == 0B)
    goto <bb 8>;
  else
    goto <bb 10>;

<bb 8>:
  ip_32 = a_engine_22->adv_sdp_ip;
  # DEBUG ip => ip_32
  if (ip_32 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

<bb 9>:
  ip_33 = a_engine_22->proxy_sdp_ip;
  # DEBUG ip => ip_33

<bb 10>:
  # ip_1 = PHI <ip_24(7), ip_32(8), ip_33(9)>
  # DEBUG ip => ip_1
  if (ip_1 == 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  D.41407_34 = session_20(D)->channel;
  D.41414_35 = switch_channel_get_name (D.41407_34);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 7022, 0B, 2, "%s NO IP!\n", D.41414_35);
  goto <bb 42>;

<bb 12>:
  if (port_26 == 0)
    goto <bb 13>;
  else
    goto <bb 15>;

<bb 13>:
  D.41417_36 = a_engine_22->adv_sdp_port;
  port_37 = (uint32_t) D.41417_36;
  # DEBUG port => port_37
  if (port_37 == 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.41420_38 = a_engine_22->proxy_sdp_port;
  port_39 = (uint32_t) D.41420_38;
  # DEBUG port => port_39

<bb 15>:
  # port_2 = PHI <port_26(12), port_37(13), port_39(14)>
  # DEBUG port => port_2
  if (port_2 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.41407_40 = session_20(D)->channel;
  D.41423_41 = switch_channel_get_name (D.41407_40);
  switch_log_printf (0, "src/switch_core_media.c", &__func__, 7033, 0B, 2, "%s NO PORT!\n", D.41423_41);
  goto <bb 42>;

<bb 17>:
  D.41424_42 = smh_21->owner_id;
  if (D.41424_42 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.41427_43 = switch_epoch_time_now (0B);
  D.41428_44 = (unsigned int) D.41427_43;
  D.41429_45 = D.41428_44 - port_2;
  smh_21->owner_id = D.41429_45;

<bb 19>:
  D.41430_46 = smh_21->session_id;
  if (D.41430_46 == 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.41424_47 = smh_21->owner_id;
  smh_21->session_id = D.41424_47;

<bb 21>:
  D.41430_48 = smh_21->session_id;
  D.41433_49 = D.41430_48 + 1;
  smh_21->session_id = D.41433_49;
  D.41435_50 = __builtin_strchr (ip_1, 58);
  if (D.41435_50 != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  iftmp.21_51 = "IP6";
  goto <bb 24>;

<bb 23>:
  iftmp.21_52 = "IP4";

<bb 24>:
  # iftmp.21_9 = PHI <iftmp.21_51(22), iftmp.21_52(23)>
  family_53 = iftmp.21_9;
  # DEBUG family => family_53
  D.41424_54 = smh_21->owner_id;
  D.41430_55 = smh_21->session_id;
  switch_snprintf (&buf, 2048, "v=0\no=%s %010u %010u IN %s %s\ns=%s\nc=IN %s %s\nt=0 0\n", username_28, D.41424_54, D.41430_55, family_53, ip_1, username_28, family_53, ip_1);
  D.41439_56 = t38_options_23(D)->T38FaxMaxBuffer;
  if (D.41439_56 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.41439_57 = t38_options_23(D)->T38FaxMaxBuffer;
  switch_snprintf (&max_buf, 128, "a=T38FaxMaxBuffer:%d\n", D.41439_57);

<bb 26>:
  D.41442_58 = t38_options_23(D)->T38FaxMaxDatagram;
  if (D.41442_58 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;

<bb 27>:
  D.41442_59 = t38_options_23(D)->T38FaxMaxDatagram;
  switch_snprintf (&max_data, 128, "a=T38FaxMaxDatagram:%d\n", D.41442_59);

<bb 28>:
  if (broken_boolean_31 != 0)
    goto <bb 29>;
  else
    goto <bb 30>;

<bb 29>:
  bit_removal_on_60 = "a=T38FaxFillBitRemoval:1\n";
  # DEBUG bit_removal_on => bit_removal_on_60
  bit_removal_off_61 = "a=T38FaxFillBitRemoval:0\n";
  # DEBUG bit_removal_off => bit_removal_off_61
  mmr_on_62 = "a=T38FaxTranscodingMMR:1\n";
  # DEBUG mmr_on => mmr_on_62
  mmr_off_63 = "a=T38FaxTranscodingMMR:0\n";
  # DEBUG mmr_off => mmr_off_63
  jbig_on_64 = "a=T38FaxTranscodingJBIG:1\n";
  # DEBUG jbig_on => jbig_on_64
  jbig_off_65 = "a=T38FaxTranscodingJBIG:0\n";
  # DEBUG jbig_off => jbig_off_65

<bb 30>:
  # bit_removal_on_3 = PHI <bit_removal_on_14(28), bit_removal_on_60(29)>
  # bit_removal_off_4 = PHI <bit_removal_off_15(28), bit_removal_off_61(29)>
  # mmr_on_5 = PHI <mmr_on_16(28), mmr_on_62(29)>
  # mmr_off_6 = PHI <mmr_off_17(28), mmr_off_63(29)>
  # jbig_on_7 = PHI <jbig_on_18(28), jbig_on_64(29)>
  # jbig_off_8 = PHI <jbig_off_19(28), jbig_off_65(29)>
  # DEBUG jbig_off => jbig_off_8
  # DEBUG jbig_on => jbig_on_7
  # DEBUG mmr_off => mmr_off_6
  # DEBUG mmr_on => mmr_on_5
  # DEBUG bit_removal_off => bit_removal_off_4
  # DEBUG bit_removal_on => bit_removal_on_3
  D.41447_66 = strlen (&buf);
  D.41448_67 = &buf + D.41447_66;
  D.41449_68 = strlen (&buf);
  D.41450_69 = 2048 - D.41449_68;
  D.41451_70 = t38_options_23(D)->T38FaxVersion;
  D.41452_71 = (int) D.41451_70;
  D.41453_72 = t38_options_23(D)->T38MaxBitRate;
  D.41455_73 = t38_options_23(D)->T38FaxFillBitRemoval;
  if (D.41455_73 != 0)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  iftmp.22_74 = bit_removal_on_3;
  goto <bb 33>;

<bb 32>:
  iftmp.22_75 = bit_removal_off_4;

<bb 33>:
  # iftmp.22_10 = PHI <iftmp.22_74(31), iftmp.22_75(32)>
  D.41460_76 = t38_options_23(D)->T38FaxTranscodingMMR;
  if (D.41460_76 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  iftmp.23_77 = mmr_on_5;
  goto <bb 36>;

<bb 35>:
  iftmp.23_78 = mmr_off_6;

<bb 36>:
  # iftmp.23_11 = PHI <iftmp.23_77(34), iftmp.23_78(35)>
  D.41465_79 = t38_options_23(D)->T38FaxTranscodingJBIG;
  if (D.41465_79 != 0)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  iftmp.24_80 = jbig_on_7;
  goto <bb 39>;

<bb 38>:
  iftmp.24_81 = jbig_off_8;

<bb 39>:
  # iftmp.24_12 = PHI <iftmp.24_80(37), iftmp.24_81(38)>
  D.41469_82 = t38_options_23(D)->T38FaxRateManagement;
  D.41470_83 = t38_options_23(D)->T38FaxUdpEC;
  switch_snprintf (D.41448_67, D.41450_69, "m=image %d udptl t38\na=T38FaxVersion:%d\na=T38MaxBitRate:%d\n%s%s%sa=T38FaxRateManagement:%s\n%s%sa=T38FaxUdpEC:%s\n", port_2, D.41452_71, D.41453_72, iftmp.22_10, iftmp.23_11, iftmp.24_12, D.41469_82, &max_buf, &max_data, D.41470_83);
  if (insist_84(D) != 0)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:
  D.41473_85 = strlen (&buf);
  D.41474_86 = &buf + D.41473_85;
  D.41475_87 = strlen (&buf);
  D.41476_88 = 2048 - D.41475_87;
  switch_snprintf (D.41474_86, D.41476_88, "m=audio 0 RTP/AVP 19\n");

<bb 41>:
  switch_core_media_set_local_sdp (session_20(D), &buf, 1);
  D.41407_89 = session_20(D)->channel;
  D.41477_90 = switch_channel_get_name (D.41407_89);
  D.41406_91 = smh_21->mparams;
  D.41478_92 = D.41406_91->local_sdp_str;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7113, session_20(D), 7, "%s image media sdp:\n%s\n", D.41477_90, D.41478_92);

<bb 42>:
  return;

}



;; Function switch_core_media_patch_sdp (switch_core_media_patch_sdp)

Considering inline candidate switch_core_media_set_local_sdp.
Not inlining: code size would grow by 39.
Considering inline candidate switch_core_media_activate_rtp.
Not inlining: code size would grow by 2489.
Considering inline candidate switch_core_media_choose_port.
Not inlining: code size would grow by 187.
Considering inline candidate switch_core_media_choose_port.
Not inlining: code size would grow by 187.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_patch_sdp.
Processing frequency _zstr
  Called by switch_core_media_patch_sdp that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_patch_sdp.
Processing frequency _zstr
  Called by switch_core_media_patch_sdp that is normal or hot
Inlining _zstr to switch_core_media_patch_sdp with frequency 1000
Inlining _zstr to switch_core_media_patch_sdp with frequency 1000
Considering inline candidate switch_core_media_set_local_sdp.
Not inlining: code size would grow by 39.
Considering inline candidate switch_core_media_activate_rtp.
Not inlining: code size would grow by 2489.
Considering inline candidate switch_core_media_choose_port.
Not inlining: code size would grow by 187.
Considering inline candidate switch_core_media_choose_port.
Not inlining: code size would grow by 187.
Iterations: 1
Merging blocks 5 and 113
Merging blocks 11 and 118
Merging blocks 116 and 112
Merging blocks 121 and 117


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2

Updating SSA information for statement port_buf = "";

Updating SSA information for statement vport_buf = "";



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 7134, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_24 = session_23(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.41210_27 = smh_24->mparams;

Updating SSA information for statement D.41211_28 = D.41210_27->local_sdp_str;



Registering new PHI nodes in block #6

Updating SSA information for statement D.48218_289 = MEM[(const char *)D.41211_28];



Registering new PHI nodes in block #7



Registering new PHI nodes in block #8

Updating SSA information for statement D.48217 = D.48219_290;

Updating SSA information for statement D.41212_29 = D.48217;



Registering new PHI nodes in block #9

Updating SSA information for statement D.41210_30 = smh_24->mparams;

Updating SSA information for statement D.41211_31 = D.41210_30->local_sdp_str;

Updating SSA information for statement D.41215_32 = strlen (D.41211_31);

Updating SSA information for statement D.41210_34 = smh_24->mparams;

Updating SSA information for statement D.41216_35 = D.41210_34->ndlb;



Registering new PHI nodes in block #10

Updating SSA information for statement D.41222_37 = session_23(D)->channel;

Updating SSA information for statement D.41223_38 = switch_channel_test_flag (D.41222_37, 1);



Registering new PHI nodes in block #11

Updating SSA information for statement D.41210_39 = smh_24->mparams;

Updating SSA information for statement D.41211_40 = D.41210_39->local_sdp_str;

Updating SSA information for statement D.41226_41 = switch_stristr ("sendonly", D.41211_40);



Registering new PHI nodes in block #12

Updating SSA information for statement D.41210_42 = smh_24->mparams;

Updating SSA information for statement D.41211_43 = D.41210_42->local_sdp_str;

Updating SSA information for statement D.41228_44 = switch_stristr ("0.0.0.0", D.41211_43);



Registering new PHI nodes in block #13

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7152, session_23(D), 7, "Skip patch on hold SDP\n");



Registering new PHI nodes in block #14

Updating SSA information for statement D.41231_45 = a_engine_25->local_sdp_ip;



Registering new PHI nodes in block #15

Updating SSA information for statement D.48222_291 = MEM[(const char *)D.41231_45];



Registering new PHI nodes in block #16



Registering new PHI nodes in block #17

Updating SSA information for statement D.48221 = D.48223_292;

Updating SSA information for statement D.41232_46 = D.48221;



Registering new PHI nodes in block #18

Updating SSA information for statement D.41234_47 = a_engine_25->local_sdp_port;



Registering new PHI nodes in block #19

Updating SSA information for statement D.41235_48 = switch_core_media_choose_port (session_23(D), 0, 1);



Registering new PHI nodes in block #20

Updating SSA information for statement D.41222_49 = session_23(D)->channel;

Updating SSA information for statement D.41238_50 = switch_channel_get_name (D.41222_49);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7159, session_23(D), 3, "%s I/O Error\n", D.41238_50);



Registering new PHI nodes in block #21

Updating SSA information for statement D.41239_51 = a_engine_25->cur_payload_map;

Updating SSA information for statement D.41240_52 = switch_core_perform_session_strdup (session_23(D), "PROXY", "src/switch_core_media.c", &__func__, 7163);

Updating SSA information for statement D.41239_51->iananame = D.41240_52;

Updating SSA information for statement D.41239_53 = a_engine_25->cur_payload_map;

Updating SSA information for statement D.41239_53->rm_rate = 8000;

Updating SSA information for statement D.41239_54 = a_engine_25->cur_payload_map;

Updating SSA information for statement D.41239_54->adv_rm_rate = 8000;

Updating SSA information for statement D.41239_55 = a_engine_25->cur_payload_map;

Updating SSA information for statement D.41239_55->codec_ms = 20;



Registering new PHI nodes in block #22

Updating SSA information for statement new_sdp_56 = switch_core_perform_session_alloc (session_23(D), len_33, "src/switch_core_media.c", &__func__, 7169);

Updating SSA information for statement D.41234_57 = a_engine_25->local_sdp_port;

Updating SSA information for statement switch_snprintf (&port_buf, 25, "%u", D.41241_58);

Updating SSA information for statement D.41210_59 = smh_24->mparams;

Updating SSA information for statement p_60 = D.41210_59->local_sdp_str;

Updating SSA information for statement D.41242_62 = strlen (p_60);



Registering new PHI nodes in block #108



Registering new PHI nodes in block #109

Updating SSA information for statement D.41264_66 = *p_5;



Registering new PHI nodes in block #23



Registering new PHI nodes in block #24



Registering new PHI nodes in block #25



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27

Updating SSA information for statement D.41231_69 = a_engine_25->local_sdp_ip;



Registering new PHI nodes in block #28

Updating SSA information for statement D.41251_70 = strncmp ("c=IN IP", p_5, 7);



Registering new PHI nodes in block #29

Updating SSA information for statement __builtin_strncpy (q_7, p_5, 7);

Updating SSA information for statement D.41254_73 = a_engine_25->adv_sdp_ip;

Updating SSA information for statement D.41255_74 = __builtin_strchr (D.41254_73, 58);



Registering new PHI nodes in block #30



Registering new PHI nodes in block #31



Registering new PHI nodes in block #32

Updating SSA information for statement __builtin_memcpy (q_72, iftmp.16_17, 2);

Updating SSA information for statement D.41254_79 = a_engine_25->adv_sdp_ip;

Updating SSA information for statement D.41254_80 = a_engine_25->adv_sdp_ip;

Updating SSA information for statement D.41259_81 = strlen (D.41254_80);

Updating SSA information for statement __builtin_strncpy (q_78, D.41254_80, D.41259_81);

Updating SSA information for statement D.41254_82 = a_engine_25->adv_sdp_ip;

Updating SSA information for statement D.41260_83 = strlen (D.41254_82);



Registering new PHI nodes in block #36



Registering new PHI nodes in block #37

Updating SSA information for statement D.41264_85 = *p_1;



Registering new PHI nodes in block #38

Updating SSA information for statement D.41266_86 = *p_1;



Registering new PHI nodes in block #39

Updating SSA information for statement D.41264_91 = *p_1;



Registering new PHI nodes in block #40

Updating SSA information for statement D.41264_92 = *p_1;



Registering new PHI nodes in block #41

Updating SSA information for statement D.41264_94 = *p_1;



Registering new PHI nodes in block #33



Registering new PHI nodes in block #34



Registering new PHI nodes in block #35



Registering new PHI nodes in block #42



Registering new PHI nodes in block #43

Updating SSA information for statement D.41276_99 = strncmp ("o=", p_5, 2);



Registering new PHI nodes in block #44

Updating SSA information for statement oe_100 = __builtin_strchr (p_5, 10);



Registering new PHI nodes in block #45

Updating SSA information for statement o_line = "";



Registering new PHI nodes in block #46



Registering new PHI nodes in block #47

Updating SSA information for statement D.41210_108 = smh_24->mparams;

Updating SSA information for statement D.41287_109 = D.41210_108->sipip;

Updating SSA information for statement D.41288_110 = __builtin_strchr (D.41287_109, 58);



Registering new PHI nodes in block #48



Registering new PHI nodes in block #49



Registering new PHI nodes in block #50

Updating SSA information for statement D.41292_114 = smh_24->owner_id;



Registering new PHI nodes in block #51

Updating SSA information for statement D.41295_115 = switch_epoch_time_now (0B);

Updating SSA information for statement smh_24->owner_id = D.41298_118;



Registering new PHI nodes in block #52

Updating SSA information for statement D.41299_119 = smh_24->session_id;



Registering new PHI nodes in block #53

Updating SSA information for statement D.41292_120 = smh_24->owner_id;

Updating SSA information for statement smh_24->session_id = D.41292_120;



Registering new PHI nodes in block #54

Updating SSA information for statement D.41299_121 = smh_24->session_id;

Updating SSA information for statement smh_24->session_id = D.41302_122;

Updating SSA information for statement D.41210_124 = smh_24->mparams;

Updating SSA information for statement D.41304_125 = D.41210_124->sdp_username;

Updating SSA information for statement D.41292_126 = smh_24->owner_id;

Updating SSA information for statement D.41299_127 = smh_24->session_id;

Updating SSA information for statement D.41210_128 = smh_24->mparams;

Updating SSA information for statement D.41287_129 = D.41210_128->sipip;

Updating SSA information for statement snprintf (&o_line, 1024, D.41303_123, D.41304_125, D.41292_126, D.41299_127, family_113, D.41287_129);

Updating SSA information for statement D.41305_130 = strlen (&o_line);

Updating SSA information for statement __builtin_strncpy (q_7, &o_line, D.41305_130);

Updating SSA information for statement D.41306_131 = strlen (&o_line);



Registering new PHI nodes in block #55

Updating SSA information for statement D.41309_134 = strncmp ("s=", p_5, 2);



Registering new PHI nodes in block #56

Updating SSA information for statement se_135 = __builtin_strchr (p_5, 10);



Registering new PHI nodes in block #57

Updating SSA information for statement s_line = "";



Registering new PHI nodes in block #58



Registering new PHI nodes in block #59

Updating SSA information for statement D.41210_143 = smh_24->mparams;

Updating SSA information for statement D.41304_144 = D.41210_143->sdp_username;

Updating SSA information for statement snprintf (&s_line, 1024, D.41318_142, D.41304_144);

Updating SSA information for statement D.41319_145 = strlen (&s_line);

Updating SSA information for statement __builtin_strncpy (q_7, &s_line, D.41319_145);

Updating SSA information for statement D.41320_146 = strlen (&s_line);



Registering new PHI nodes in block #60

Updating SSA information for statement D.41326_149 = strncmp ("m=audio ", p_5, 8);



Registering new PHI nodes in block #61

Updating SSA information for statement D.41328_150 = strncmp ("m=image ", p_5, 8);



Registering new PHI nodes in block #62

Updating SSA information for statement D.41330_152 = *D.41329_151;



Registering new PHI nodes in block #63

Updating SSA information for statement __builtin_strncpy (q_7, p_5, 8);



Registering new PHI nodes in block #64



Registering new PHI nodes in block #65



Registering new PHI nodes in block #66



Registering new PHI nodes in block #67

Updating SSA information for statement D.41336_157 = strlen (&port_buf);

Updating SSA information for statement __builtin_strncpy (q_155, &port_buf, D.41336_157);

Updating SSA information for statement D.41337_158 = strlen (&port_buf);



Registering new PHI nodes in block #68



Registering new PHI nodes in block #72



Registering new PHI nodes in block #73

Updating SSA information for statement D.41264_161 = *p_2;



Registering new PHI nodes in block #74

Updating SSA information for statement D.41264_162 = *p_2;



Registering new PHI nodes in block #69



Registering new PHI nodes in block #70



Registering new PHI nodes in block #71



Registering new PHI nodes in block #75



Registering new PHI nodes in block #76

Updating SSA information for statement D.41345_167 = strncmp ("m=video ", p_5, 8);



Registering new PHI nodes in block #77

Updating SSA information for statement D.41330_169 = *D.41329_168;



Registering new PHI nodes in block #78



Registering new PHI nodes in block #79

Updating SSA information for statement switch_core_media_choose_port (session_23(D), 1, 1);

Updating SSA information for statement D.41352_170 = v_engine_26->cur_payload_map;

Updating SSA information for statement D.41352_170->rm_encoding = "PROXY-VID";

Updating SSA information for statement D.41352_171 = v_engine_26->cur_payload_map;

Updating SSA information for statement D.41352_171->rm_rate = 90000;

Updating SSA information for statement D.41352_172 = v_engine_26->cur_payload_map;

Updating SSA information for statement D.41352_172->adv_rm_rate = 90000;

Updating SSA information for statement D.41352_173 = v_engine_26->cur_payload_map;

Updating SSA information for statement D.41352_173->codec_ms = 0;

Updating SSA information for statement D.41353_174 = v_engine_26->adv_sdp_port;

Updating SSA information for statement switch_snprintf (&vport_buf, 25, "%u", D.41354_175);

Updating SSA information for statement D.41222_176 = session_23(D)->channel;

Updating SSA information for statement D.41355_177 = switch_channel_test_ready (D.41222_176, 1, 1);



Registering new PHI nodes in block #80

Updating SSA information for statement D.41358_178 = v_engine_26->rtp_session;

Updating SSA information for statement D.41359_179 = switch_rtp_ready (D.41358_178);



Registering new PHI nodes in block #81

Updating SSA information for statement D.41222_180 = session_23(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41222_180, 98, 1);

Updating SSA information for statement D.41222_181 = session_23(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.41222_181, 103, 1);

Updating SSA information for statement switch_core_media_activate_rtp (session_23(D));



Registering new PHI nodes in block #82

Updating SSA information for statement __builtin_strncpy (q_7, p_5, 8);



Registering new PHI nodes in block #83



Registering new PHI nodes in block #84



Registering new PHI nodes in block #85



Registering new PHI nodes in block #86

Updating SSA information for statement D.41366_186 = strlen (&vport_buf);

Updating SSA information for statement __builtin_strncpy (q_184, &vport_buf, D.41366_186);

Updating SSA information for statement D.41367_187 = strlen (&vport_buf);



Registering new PHI nodes in block #87



Registering new PHI nodes in block #91



Registering new PHI nodes in block #92

Updating SSA information for statement D.41264_190 = *p_3;



Registering new PHI nodes in block #93

Updating SSA information for statement D.41264_191 = *p_3;



Registering new PHI nodes in block #88



Registering new PHI nodes in block #89



Registering new PHI nodes in block #90



Registering new PHI nodes in block #94



Registering new PHI nodes in block #100



Registering new PHI nodes in block #101

Updating SSA information for statement D.41264_196 = *p_4;



Registering new PHI nodes in block #102

Updating SSA information for statement D.41264_197 = *p_4;



Registering new PHI nodes in block #95



Registering new PHI nodes in block #96



Registering new PHI nodes in block #97



Registering new PHI nodes in block #98



Registering new PHI nodes in block #99

Updating SSA information for statement D.41264_200 = *p_4;

Updating SSA information for statement *q_6 = D.41264_200;



Registering new PHI nodes in block #103



Registering new PHI nodes in block #104



Registering new PHI nodes in block #105



Registering new PHI nodes in block #106



Registering new PHI nodes in block #107

Updating SSA information for statement D.41264_205 = *p_4;

Updating SSA information for statement *q_6 = D.41264_205;



Registering new PHI nodes in block #110



Registering new PHI nodes in block #111

Updating SSA information for statement D.41222_208 = session_23(D)->channel;

Updating SSA information for statement D.41389_209 = switch_channel_check_signal (D.41222_208, 1);



Registering new PHI nodes in block #112

Updating SSA information for statement D.41222_210 = session_23(D)->channel;

Updating SSA information for statement D.41391_211 = switch_channel_get_state (D.41222_210);



Registering new PHI nodes in block #114



Registering new PHI nodes in block #115

Updating SSA information for statement D.41222_213 = session_23(D)->channel;

Updating SSA information for statement D.41396_214 = switch_channel_get_name (D.41222_213);

Updating SSA information for statement D.41210_215 = smh_24->mparams;

Updating SSA information for statement D.41211_216 = D.41210_215->local_sdp_str;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7400, session_23(D), 7, "%s SDP has no audio in it.\n%s\n", D.41396_214, D.41211_216);



Registering new PHI nodes in block #116

Updating SSA information for statement D.41222_217 = session_23(D)->channel;

Updating SSA information for statement D.41397_218 = switch_channel_get_name (D.41222_217);

Updating SSA information for statement D.41210_219 = smh_24->mparams;

Updating SSA information for statement D.41211_220 = D.41210_219->local_sdp_str;

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7406, session_23(D), 7, "%s Patched SDP\n---\n%s\n+++\n%s\n", D.41397_218, D.41211_220, new_sdp_56);

Updating SSA information for statement switch_core_media_set_local_sdp (session_23(D), new_sdp_56, 0);



Registering new PHI nodes in block #113

Updating SSA information for statement D.41222_221 = session_23(D)->channel;

Updating SSA information for statement D.41392_222 = switch_channel_get_name (D.41222_221);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7394, session_23(D), 7, "%s too late.\n", D.41392_222);



Registering new PHI nodes in block #117



Symbols to be put in SSA form

{ .MEM D.48217 D.48221 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 118
Number of blocks to update: 117 ( 99%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 


Scope blocks after cleanups:

{ Scope block #0 
  switch_size_t len;
  char * p;
  char * q;
  char * pe;
  char * qe;
  int has_video;
  int has_audio;
  int has_ip;
  char port_buf[25];
  char vport_buf[25];
  char * new_sdp;
  int bad;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_patch_sdp";
  static const char __func__[28] = "switch_core_media_patch_sdp";
  void end = <<< error >>>; (unused)

  { Scope block #447 src/switch_core_media.c:7157 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #448 Originating from :#0 

    }

  }

  { Scope block #449 src/switch_core_media.c:7143 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #450 Originating from :#0 

    }

  }

  { Scope block #451 
    char * oe;
    switch_size_t len;

    { Scope block #452 
      const char * family;
      char o_line[1024];

    }

  }

  { Scope block #453 
    char * se;
    switch_size_t len;

    { Scope block #454 
      char s_line[1024];

    }

  }

}
switch_core_media_patch_sdp (struct switch_core_session_t * session)
{
  int D.48223;
  const char D.48222;
  int D.48221;
  int D.48219;
  const char D.48218;
  int D.48217;
  char s_line[1024];
  switch_size_t len;
  char * se;
  char o_line[1024];
  const char * family;
  switch_size_t len;
  char * oe;
  static const char __func__[28] = "switch_core_media_patch_sdp";
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_patch_sdp";
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  int bad;
  char * new_sdp;
  char vport_buf[25];
  char port_buf[25];
  int has_ip;
  int has_audio;
  int has_video;
  char * qe;
  char * pe;
  char * q;
  char * p;
  switch_size_t len;
  char * D.41397;
  char * D.41396;
  int D.41393;
  char * D.41392;
  switch_channel_state_t D.41391;
  int D.41389;
  size_t D.41367;
  size_t D.41366;
  uint8_t D.41359;
  struct switch_rtp_t * D.41358;
  int D.41355;
  int D.41354;
  switch_port_t D.41353;
  struct payload_map_t * D.41352;
  int D.41345;
  char D.41344;
  size_t D.41337;
  size_t D.41336;
  char D.41330;
  char * D.41329;
  int D.41328;
  int D.41326;
  unsigned int D.41321;
  size_t D.41320;
  size_t D.41319;
  const char * restrict D.41318;
  int D.41317;
  int se.20;
  int D.41309;
  unsigned int D.41307;
  size_t D.41306;
  size_t D.41305;
  char * D.41304;
  const char * restrict D.41303;
  uint32_t D.41302;
  uint32_t D.41299;
  unsigned int D.41298;
  unsigned int D.41297;
  unsigned int D.41296;
  time_t D.41295;
  uint32_t D.41292;
  char * D.41288;
  char * D.41287;
  char[4] * iftmp.19;
  int D.41285;
  int p.18;
  int oe.17;
  int D.41276;
  char D.41275;
  char D.41273;
  _Bool D.41270;
  _Bool D.41269;
  _Bool D.41268;
  char D.41267;
  char D.41266;
  char D.41264;
  size_t D.41260;
  size_t D.41259;
  char * D.41255;
  char * D.41254;
  char[3] * iftmp.16;
  int D.41251;
  unsigned int D.41243;
  size_t D.41242;
  int D.41241;
  char * D.41240;
  struct payload_map_t * D.41239;
  char * D.41238;
  switch_status_t D.41235;
  switch_port_t D.41234;
  int D.41232;
  char * D.41231;
  const char * D.41228;
  const char * D.41226;
  uint32_t D.41223;
  struct switch_channel_t * D.41222;
  unsigned int D.41217;
  switch_core_media_NDLB_t D.41216;
  size_t D.41215;
  int D.41212;
  char * D.41211;
  struct switch_core_media_params_t * D.41210;

<bb 2>:
  has_video_19 = 0;
  # DEBUG has_video => has_video_19
  has_audio_20 = 0;
  # DEBUG has_audio => has_audio_20
  has_ip_21 = 0;
  # DEBUG has_ip => has_ip_21
  port_buf = "";
  vport_buf = "";
  bad_22 = 0;
  # DEBUG bad => bad_22
  if (session_23(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7134, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_24 = session_23(D)->media_handle;
  # DEBUG smh => smh_24
  if (smh_24 == 0B)
    goto <bb 117>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_25 = &smh_24->engines;
  # DEBUG a_engine => a_engine_25
  v_engine_26 = &smh_24->engines[1];
  # DEBUG v_engine => v_engine_26
  D.41210_27 = smh_24->mparams;
  D.41211_28 = D.41210_27->local_sdp_str;
  # DEBUG s => D.41211_28
  if (D.41211_28 == 0B)
    goto <bb 8>;
  else
    goto <bb 6>;

<bb 6>:
  D.48218_289 = MEM[(const char *)D.41211_28];
  if (D.48218_289 == 0)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:

<bb 8>:
  # D.48219_290 = PHI <1(5), 1(6), 0(7)>
  D.48217_293 = D.48219_290;
  D.41212_29 = D.48217_293;
  if (D.41212_29 != 0)
    goto <bb 117>;
  else
    goto <bb 9>;

<bb 9>:
  D.41210_30 = smh_24->mparams;
  D.41211_31 = D.41210_30->local_sdp_str;
  D.41215_32 = strlen (D.41211_31);
  len_33 = D.41215_32 * 2;
  # DEBUG len => len_33
  D.41210_34 = smh_24->mparams;
  D.41216_35 = D.41210_34->ndlb;
  D.41217_36 = D.41216_35 & 32;
  if (D.41217_36 == 0)
    goto <bb 10>;
  else
    goto <bb 14>;

<bb 10>:
  D.41222_37 = session_23(D)->channel;
  D.41223_38 = switch_channel_test_flag (D.41222_37, 1);
  if (D.41223_38 != 0)
    goto <bb 11>;
  else
    goto <bb 14>;

<bb 11>:
  D.41210_39 = smh_24->mparams;
  D.41211_40 = D.41210_39->local_sdp_str;
  D.41226_41 = switch_stristr ("sendonly", D.41211_40);
  if (D.41226_41 != 0B)
    goto <bb 13>;
  else
    goto <bb 12>;

<bb 12>:
  D.41210_42 = smh_24->mparams;
  D.41211_43 = D.41210_42->local_sdp_str;
  D.41228_44 = switch_stristr ("0.0.0.0", D.41211_43);
  if (D.41228_44 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7152, session_23(D), 7, "Skip patch on hold SDP\n");
  goto <bb 117>;

<bb 14>:
  D.41231_45 = a_engine_25->local_sdp_ip;
  # DEBUG s => D.41231_45
  if (D.41231_45 == 0B)
    goto <bb 17>;
  else
    goto <bb 15>;

<bb 15>:
  D.48222_291 = MEM[(const char *)D.41231_45];
  if (D.48222_291 == 0)
    goto <bb 17>;
  else
    goto <bb 16>;

<bb 16>:

<bb 17>:
  # D.48223_292 = PHI <1(14), 1(15), 0(16)>
  D.48221_294 = D.48223_292;
  D.41232_46 = D.48221_294;
  if (D.41232_46 != 0)
    goto <bb 19>;
  else
    goto <bb 18>;

<bb 18>:
  D.41234_47 = a_engine_25->local_sdp_port;
  if (D.41234_47 == 0)
    goto <bb 19>;
  else
    goto <bb 22>;

<bb 19>:
  D.41235_48 = switch_core_media_choose_port (session_23(D), 0, 1);
  if (D.41235_48 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.41222_49 = session_23(D)->channel;
  D.41238_50 = switch_channel_get_name (D.41222_49);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7159, session_23(D), 3, "%s I/O Error\n", D.41238_50);
  goto <bb 117>;

<bb 21>:
  D.41239_51 = a_engine_25->cur_payload_map;
  D.41240_52 = switch_core_perform_session_strdup (session_23(D), "PROXY", "src/switch_core_media.c", &__func__, 7163);
  D.41239_51->iananame = D.41240_52;
  D.41239_53 = a_engine_25->cur_payload_map;
  D.41239_53->rm_rate = 8000;
  D.41239_54 = a_engine_25->cur_payload_map;
  D.41239_54->adv_rm_rate = 8000;
  D.41239_55 = a_engine_25->cur_payload_map;
  D.41239_55->codec_ms = 20;

<bb 22>:
  new_sdp_56 = switch_core_perform_session_alloc (session_23(D), len_33, "src/switch_core_media.c", &__func__, 7169);
  # DEBUG new_sdp => new_sdp_56
  D.41234_57 = a_engine_25->local_sdp_port;
  D.41241_58 = (int) D.41234_57;
  switch_snprintf (&port_buf, 25, "%u", D.41241_58);
  D.41210_59 = smh_24->mparams;
  p_60 = D.41210_59->local_sdp_str;
  # DEBUG p => p_60
  q_61 = new_sdp_56;
  # DEBUG q => q_61
  D.41242_62 = strlen (p_60);
  pe_63 = p_60 + D.41242_62;
  # DEBUG pe => pe_63
  D.41243_64 = len_33 + -1;
  qe_65 = q_61 + D.41243_64;
  # DEBUG qe => qe_65
  goto <bb 108>;

<bb 23>:
  if (p_5 >= pe_63)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  bad_67 = 1;
  # DEBUG bad => bad_67
  goto <bb 110> (end);

<bb 25>:
  if (q_7 >= qe_65)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  bad_68 = 2;
  # DEBUG bad => bad_68
  goto <bb 110> (end);

<bb 27>:
  D.41231_69 = a_engine_25->local_sdp_ip;
  if (D.41231_69 != 0B)
    goto <bb 28>;
  else
    goto <bb 43>;

<bb 28>:
  D.41251_70 = strncmp ("c=IN IP", p_5, 7);
  if (D.41251_70 == 0)
    goto <bb 29>;
  else
    goto <bb 43>;

<bb 29>:
  __builtin_strncpy (q_7, p_5, 7);
  p_71 = p_5 + 7;
  # DEBUG p => p_71
  q_72 = q_7 + 7;
  # DEBUG q => q_72
  D.41254_73 = a_engine_25->adv_sdp_ip;
  D.41255_74 = __builtin_strchr (D.41254_73, 58);
  if (D.41255_74 != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  iftmp.16_75 = "6 ";
  goto <bb 32>;

<bb 31>:
  iftmp.16_76 = "4 ";

<bb 32>:
  # iftmp.16_17 = PHI <iftmp.16_75(30), iftmp.16_76(31)>
  __builtin_memcpy (q_72, iftmp.16_17, 2);
  p_77 = p_71 + 2;
  # DEBUG p => p_77
  q_78 = q_72 + 2;
  # DEBUG q => q_78
  D.41254_79 = a_engine_25->adv_sdp_ip;
  D.41254_80 = a_engine_25->adv_sdp_ip;
  D.41259_81 = strlen (D.41254_80);
  __builtin_strncpy (q_78, D.41254_80, D.41259_81);
  D.41254_82 = a_engine_25->adv_sdp_ip;
  D.41260_83 = strlen (D.41254_82);
  q_84 = q_78 + D.41260_83;
  # DEBUG q => q_84
  goto <bb 36>;

<bb 33>:
  if (p_1 >= pe_63)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  bad_96 = 3;
  # DEBUG bad => bad_96
  goto <bb 110> (end);

<bb 35>:
  p_97 = p_1 + 1;
  # DEBUG p => p_97

<bb 36>:
  # p_1 = PHI <p_77(32), p_97(35)>
  # DEBUG p => p_1
  if (p_1 != 0B)
    goto <bb 37>;
  else
    goto <bb 42>;

<bb 37>:
  D.41264_85 = *p_1;
  if (D.41264_85 != 0)
    goto <bb 38>;
  else
    goto <bb 42>;

<bb 38>:
  D.41266_86 = *p_1;
  D.41267_87 = D.41266_86 + 208;
  D.41268_88 = D.41267_87 <= 9;
  D.41269_89 = D.41266_86 == 46;
  D.41270_90 = D.41268_88 || D.41269_89;
  if (D.41270_90 != 0)
    goto <bb 33>;
  else
    goto <bb 39>;

<bb 39>:
  D.41264_91 = *p_1;
  if (D.41264_91 == 58)
    goto <bb 33>;
  else
    goto <bb 40>;

<bb 40>:
  D.41264_92 = *p_1;
  D.41273_93 = D.41264_92 + 191;
  if (D.41273_93 <= 5)
    goto <bb 33>;
  else
    goto <bb 41>;

<bb 41>:
  D.41264_94 = *p_1;
  D.41275_95 = D.41264_94 + 159;
  if (D.41275_95 <= 5)
    goto <bb 33>;
  else
    goto <bb 42>;

<bb 42>:
  has_ip_98 = has_ip_14 + 1;
  # DEBUG has_ip => has_ip_98
  goto <bb 100>;

<bb 43>:
  D.41276_99 = strncmp ("o=", p_5, 2);
  if (D.41276_99 == 0)
    goto <bb 44>;
  else
    goto <bb 55>;

<bb 44>:
  oe_100 = __builtin_strchr (p_5, 10);
  # DEBUG oe => oe_100
  if (oe_100 != 0B)
    goto <bb 45>;
  else
    goto <bb 100>;

<bb 45>:
  family_101 = "IP4";
  # DEBUG family => family_101
  o_line = "";
  if (oe_100 >= pe_63)
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  bad_102 = 5;
  # DEBUG bad => bad_102
  goto <bb 110> (end);

<bb 47>:
  oe.17_103 = (int) oe_100;
  p.18_104 = (int) p_5;
  D.41285_105 = oe.17_103 - p.18_104;
  len_106 = (switch_size_t) D.41285_105;
  # DEBUG len => len_106
  p_107 = p_5 + len_106;
  # DEBUG p => p_107
  D.41210_108 = smh_24->mparams;
  D.41287_109 = D.41210_108->sipip;
  D.41288_110 = __builtin_strchr (D.41287_109, 58);
  if (D.41288_110 != 0B)
    goto <bb 48>;
  else
    goto <bb 49>;

<bb 48>:
  iftmp.19_111 = "IP6";
  goto <bb 50>;

<bb 49>:
  iftmp.19_112 = "IP4";

<bb 50>:
  # iftmp.19_18 = PHI <iftmp.19_111(48), iftmp.19_112(49)>
  family_113 = iftmp.19_18;
  # DEBUG family => family_113
  D.41292_114 = smh_24->owner_id;
  if (D.41292_114 == 0)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  D.41295_115 = switch_epoch_time_now (0B);
  D.41296_116 = (unsigned int) D.41295_115;
  D.41297_117 = D.41296_116 * 31821;
  D.41298_118 = D.41297_117 + 13849;
  smh_24->owner_id = D.41298_118;

<bb 52>:
  D.41299_119 = smh_24->session_id;
  if (D.41299_119 == 0)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  D.41292_120 = smh_24->owner_id;
  smh_24->session_id = D.41292_120;

<bb 54>:
  D.41299_121 = smh_24->session_id;
  D.41302_122 = D.41299_121 + 1;
  smh_24->session_id = D.41302_122;
  D.41303_123 = (const char * restrict) &"o=%s %010u %010u IN %s %s\n"[0];
  D.41210_124 = smh_24->mparams;
  D.41304_125 = D.41210_124->sdp_username;
  D.41292_126 = smh_24->owner_id;
  D.41299_127 = smh_24->session_id;
  D.41210_128 = smh_24->mparams;
  D.41287_129 = D.41210_128->sipip;
  snprintf (&o_line, 1024, D.41303_123, D.41304_125, D.41292_126, D.41299_127, family_113, D.41287_129);
  D.41305_130 = strlen (&o_line);
  __builtin_strncpy (q_7, &o_line, D.41305_130);
  D.41306_131 = strlen (&o_line);
  D.41307_132 = D.41306_131 + -1;
  q_133 = q_7 + D.41307_132;
  # DEBUG q => q_133
  goto <bb 100>;

<bb 55>:
  D.41309_134 = strncmp ("s=", p_5, 2);
  if (D.41309_134 == 0)
    goto <bb 56>;
  else
    goto <bb 60>;

<bb 56>:
  se_135 = __builtin_strchr (p_5, 10);
  # DEBUG se => se_135
  if (se_135 != 0B)
    goto <bb 57>;
  else
    goto <bb 100>;

<bb 57>:
  s_line = "";
  if (se_135 >= pe_63)
    goto <bb 58>;
  else
    goto <bb 59>;

<bb 58>:
  bad_136 = 5;
  # DEBUG bad => bad_136
  goto <bb 110> (end);

<bb 59>:
  se.20_137 = (int) se_135;
  p.18_138 = (int) p_5;
  D.41317_139 = se.20_137 - p.18_138;
  len_140 = (switch_size_t) D.41317_139;
  # DEBUG len => len_140
  p_141 = p_5 + len_140;
  # DEBUG p => p_141
  D.41318_142 = (const char * restrict) &"s=%s\n"[0];
  D.41210_143 = smh_24->mparams;
  D.41304_144 = D.41210_143->sdp_username;
  snprintf (&s_line, 1024, D.41318_142, D.41304_144);
  D.41319_145 = strlen (&s_line);
  __builtin_strncpy (q_7, &s_line, D.41319_145);
  D.41320_146 = strlen (&s_line);
  D.41321_147 = D.41320_146 + -1;
  q_148 = q_7 + D.41321_147;
  # DEBUG q => q_148
  goto <bb 100>;

<bb 60>:
  D.41326_149 = strncmp ("m=audio ", p_5, 8);
  if (D.41326_149 == 0)
    goto <bb 62>;
  else
    goto <bb 61>;

<bb 61>:
  D.41328_150 = strncmp ("m=image ", p_5, 8);
  if (D.41328_150 == 0)
    goto <bb 62>;
  else
    goto <bb 76>;

<bb 62>:
  D.41329_151 = p_5 + 8;
  D.41330_152 = *D.41329_151;
  if (D.41330_152 != 48)
    goto <bb 63>;
  else
    goto <bb 76>;

<bb 63>:
  __builtin_strncpy (q_7, p_5, 8);
  p_153 = p_5 + 8;
  # DEBUG p => p_153
  if (p_153 >= pe_63)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  bad_154 = 4;
  # DEBUG bad => bad_154
  goto <bb 110> (end);

<bb 65>:
  q_155 = q_7 + 8;
  # DEBUG q => q_155
  if (q_155 >= qe_65)
    goto <bb 66>;
  else
    goto <bb 67>;

<bb 66>:
  bad_156 = 5;
  # DEBUG bad => bad_156
  goto <bb 110> (end);

<bb 67>:
  D.41336_157 = strlen (&port_buf);
  __builtin_strncpy (q_155, &port_buf, D.41336_157);
  D.41337_158 = strlen (&port_buf);
  q_159 = q_155 + D.41337_158;
  # DEBUG q => q_159
  if (q_159 >= qe_65)
    goto <bb 68>;
  else
    goto <bb 72>;

<bb 68>:
  bad_160 = 6;
  # DEBUG bad => bad_160
  goto <bb 110> (end);

<bb 69>:
  if (p_2 >= pe_63)
    goto <bb 70>;
  else
    goto <bb 71>;

<bb 70>:
  bad_164 = 7;
  # DEBUG bad => bad_164
  goto <bb 110> (end);

<bb 71>:
  p_165 = p_2 + 1;
  # DEBUG p => p_165

<bb 72>:
  # p_2 = PHI <p_153(67), p_165(71)>
  # DEBUG p => p_2
  if (p_2 != 0B)
    goto <bb 73>;
  else
    goto <bb 75>;

<bb 73>:
  D.41264_161 = *p_2;
  if (D.41264_161 != 0)
    goto <bb 74>;
  else
    goto <bb 75>;

<bb 74>:
  D.41264_162 = *p_2;
  D.41344_163 = D.41264_162 + 208;
  if (D.41344_163 <= 9)
    goto <bb 69>;
  else
    goto <bb 75>;

<bb 75>:
  has_audio_166 = has_audio_11 + 1;
  # DEBUG has_audio => has_audio_166
  goto <bb 100>;

<bb 76>:
  D.41345_167 = strncmp ("m=video ", p_5, 8);
  if (D.41345_167 == 0)
    goto <bb 77>;
  else
    goto <bb 100>;

<bb 77>:
  D.41329_168 = p_5 + 8;
  D.41330_169 = *D.41329_168;
  if (D.41330_169 != 48)
    goto <bb 78>;
  else
    goto <bb 100>;

<bb 78>:
  if (has_video_9 == 0)
    goto <bb 79>;
  else
    goto <bb 82>;

<bb 79>:
  switch_core_media_choose_port (session_23(D), 1, 1);
  D.41352_170 = v_engine_26->cur_payload_map;
  D.41352_170->rm_encoding = "PROXY-VID";
  D.41352_171 = v_engine_26->cur_payload_map;
  D.41352_171->rm_rate = 90000;
  D.41352_172 = v_engine_26->cur_payload_map;
  D.41352_172->adv_rm_rate = 90000;
  D.41352_173 = v_engine_26->cur_payload_map;
  D.41352_173->codec_ms = 0;
  D.41353_174 = v_engine_26->adv_sdp_port;
  D.41354_175 = (int) D.41353_174;
  switch_snprintf (&vport_buf, 25, "%u", D.41354_175);
  D.41222_176 = session_23(D)->channel;
  D.41355_177 = switch_channel_test_ready (D.41222_176, 1, 1);
  if (D.41355_177 != 0)
    goto <bb 80>;
  else
    goto <bb 82>;

<bb 80>:
  D.41358_178 = v_engine_26->rtp_session;
  D.41359_179 = switch_rtp_ready (D.41358_178);
  if (D.41359_179 == 0)
    goto <bb 81>;
  else
    goto <bb 82>;

<bb 81>:
  D.41222_180 = session_23(D)->channel;
  switch_channel_set_flag_value (D.41222_180, 98, 1);
  D.41222_181 = session_23(D)->channel;
  switch_channel_set_flag_value (D.41222_181, 103, 1);
  switch_core_media_activate_rtp (session_23(D));

<bb 82>:
  __builtin_strncpy (q_7, p_5, 8);
  p_182 = p_5 + 8;
  # DEBUG p => p_182
  if (p_182 >= pe_63)
    goto <bb 83>;
  else
    goto <bb 84>;

<bb 83>:
  bad_183 = 8;
  # DEBUG bad => bad_183
  goto <bb 110> (end);

<bb 84>:
  q_184 = q_7 + 8;
  # DEBUG q => q_184
  if (q_184 >= qe_65)
    goto <bb 85>;
  else
    goto <bb 86>;

<bb 85>:
  bad_185 = 9;
  # DEBUG bad => bad_185
  goto <bb 110> (end);

<bb 86>:
  D.41366_186 = strlen (&vport_buf);
  __builtin_strncpy (q_184, &vport_buf, D.41366_186);
  D.41367_187 = strlen (&vport_buf);
  q_188 = q_184 + D.41367_187;
  # DEBUG q => q_188
  if (q_188 >= qe_65)
    goto <bb 87>;
  else
    goto <bb 91>;

<bb 87>:
  bad_189 = 10;
  # DEBUG bad => bad_189
  goto <bb 110> (end);

<bb 88>:
  if (p_3 >= pe_63)
    goto <bb 89>;
  else
    goto <bb 90>;

<bb 89>:
  bad_193 = 11;
  # DEBUG bad => bad_193
  goto <bb 110> (end);

<bb 90>:
  p_194 = p_3 + 1;
  # DEBUG p => p_194

<bb 91>:
  # p_3 = PHI <p_182(86), p_194(90)>
  # DEBUG p => p_3
  if (p_3 != 0B)
    goto <bb 92>;
  else
    goto <bb 94>;

<bb 92>:
  D.41264_190 = *p_3;
  if (D.41264_190 != 0)
    goto <bb 93>;
  else
    goto <bb 94>;

<bb 93>:
  D.41264_191 = *p_3;
  D.41344_192 = D.41264_191 + 208;
  if (D.41344_192 <= 9)
    goto <bb 88>;
  else
    goto <bb 94>;

<bb 94>:
  has_video_195 = has_video_9 + 1;
  # DEBUG has_video => has_video_195
  goto <bb 100>;

<bb 95>:
  if (p_4 >= pe_63)
    goto <bb 96>;
  else
    goto <bb 97>;

<bb 96>:
  bad_198 = 12;
  # DEBUG bad => bad_198
  goto <bb 110> (end);

<bb 97>:
  if (q_6 >= qe_65)
    goto <bb 98>;
  else
    goto <bb 99>;

<bb 98>:
  bad_199 = 13;
  # DEBUG bad => bad_199
  goto <bb 110> (end);

<bb 99>:
  D.41264_200 = *p_4;
  *q_6 = D.41264_200;
  q_201 = q_6 + 1;
  # DEBUG q => q_201
  p_202 = p_4 + 1;
  # DEBUG p => p_202

<bb 100>:
  # p_4 = PHI <p_107(54), p_202(99), p_1(42), p_5(56), p_5(44), p_3(94), p_5(77), p_5(76), p_2(75), p_141(59)>
  # q_6 = PHI <q_133(54), q_201(99), q_84(42), q_7(56), q_7(44), q_188(94), q_7(77), q_7(76), q_159(75), q_148(59)>
  # has_video_8 = PHI <has_video_9(54), has_video_8(99), has_video_9(42), has_video_9(56), has_video_9(44), has_video_195(94), has_video_9(77), has_video_9(76), has_video_9(75), has_video_9(59)>
  # has_audio_10 = PHI <has_audio_11(54), has_audio_10(99), has_audio_11(42), has_audio_11(56), has_audio_11(44), has_audio_11(94), has_audio_11(77), has_audio_11(76), has_audio_166(75), has_audio_11(59)>
  # has_ip_13 = PHI <has_ip_14(54), has_ip_13(99), has_ip_98(42), has_ip_14(56), has_ip_14(44), has_ip_14(94), has_ip_14(77), has_ip_14(76), has_ip_14(75), has_ip_14(59)>
  # DEBUG has_ip => has_ip_13
  # DEBUG has_audio => has_audio_10
  # DEBUG has_video => has_video_8
  # DEBUG q => q_6
  # DEBUG p => p_4
  if (p_4 != 0B)
    goto <bb 101>;
  else
    goto <bb 103>;

<bb 101>:
  D.41264_196 = *p_4;
  if (D.41264_196 != 0)
    goto <bb 102>;
  else
    goto <bb 103>;

<bb 102>:
  D.41264_197 = *p_4;
  if (D.41264_197 != 10)
    goto <bb 95>;
  else
    goto <bb 103>;

<bb 103>:
  if (p_4 >= pe_63)
    goto <bb 104>;
  else
    goto <bb 105>;

<bb 104>:
  bad_203 = 14;
  # DEBUG bad => bad_203
  goto <bb 110> (end);

<bb 105>:
  if (q_6 >= qe_65)
    goto <bb 106>;
  else
    goto <bb 107>;

<bb 106>:
  bad_204 = 15;
  # DEBUG bad => bad_204
  goto <bb 110> (end);

<bb 107>:
  D.41264_205 = *p_4;
  *q_6 = D.41264_205;
  q_206 = q_6 + 1;
  # DEBUG q => q_206
  p_207 = p_4 + 1;
  # DEBUG p => p_207

<bb 108>:
  # p_5 = PHI <p_60(22), p_207(107)>
  # q_7 = PHI <q_61(22), q_206(107)>
  # has_video_9 = PHI <has_video_19(22), has_video_8(107)>
  # has_audio_11 = PHI <has_audio_20(22), has_audio_10(107)>
  # has_ip_14 = PHI <has_ip_21(22), has_ip_13(107)>
  # DEBUG has_ip => has_ip_14
  # DEBUG has_audio => has_audio_11
  # DEBUG has_video => has_video_9
  # DEBUG q => q_7
  # DEBUG p => p_5
  if (p_5 != 0B)
    goto <bb 109>;
  else
    goto <bb 110> (end);

<bb 109>:
  D.41264_66 = *p_5;
  if (D.41264_66 != 0)
    goto <bb 23>;
  else
    goto <bb 110> (end);

  # has_audio_12 = PHI <has_audio_11(24), has_audio_11(26), has_audio_11(34), has_audio_11(46), has_audio_11(58), has_audio_11(64), has_audio_11(66), has_audio_11(68), has_audio_11(70), has_audio_11(83), has_audio_11(85), has_audio_11(87), has_audio_11(89), has_audio_10(96), has_audio_10(98), has_audio_10(104), has_audio_10(106), has_audio_11(108), has_audio_11(109)>
  # has_ip_15 = PHI <has_ip_14(24), has_ip_14(26), has_ip_14(34), has_ip_14(46), has_ip_14(58), has_ip_14(64), has_ip_14(66), has_ip_14(68), has_ip_14(70), has_ip_14(83), has_ip_14(85), has_ip_14(87), has_ip_14(89), has_ip_13(96), has_ip_13(98), has_ip_13(104), has_ip_13(106), has_ip_14(108), has_ip_14(109)>
  # bad_16 = PHI <bad_67(24), bad_68(26), bad_96(34), bad_102(46), bad_136(58), bad_154(64), bad_156(66), bad_160(68), bad_164(70), bad_183(83), bad_185(85), bad_189(87), bad_193(89), bad_198(96), bad_199(98), bad_203(104), bad_204(106), bad_22(108), bad_22(109)>
end:
  # DEBUG bad => bad_16
  # DEBUG has_ip => has_ip_15
  # DEBUG has_audio => has_audio_12
  if (bad_16 != 0)
    goto <bb 117>;
  else
    goto <bb 111>;

<bb 111>:
  D.41222_208 = session_23(D)->channel;
  D.41389_209 = switch_channel_check_signal (D.41222_208, 1);
  if (D.41389_209 != 0)
    goto <bb 113>;
  else
    goto <bb 112>;

<bb 112>:
  D.41222_210 = session_23(D)->channel;
  D.41391_211 = switch_channel_get_state (D.41222_210);
  if (D.41391_211 > 9)
    goto <bb 113>;
  else
    goto <bb 114>;

<bb 113>:
  D.41222_221 = session_23(D)->channel;
  D.41392_222 = switch_channel_get_name (D.41222_221);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7394, session_23(D), 7, "%s too late.\n", D.41392_222);
  goto <bb 117>;

<bb 114>:
  D.41393_212 = has_ip_15 | has_audio_12;
  if (D.41393_212 == 0)
    goto <bb 115>;
  else
    goto <bb 116>;

<bb 115>:
  D.41222_213 = session_23(D)->channel;
  D.41396_214 = switch_channel_get_name (D.41222_213);
  D.41210_215 = smh_24->mparams;
  D.41211_216 = D.41210_215->local_sdp_str;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7400, session_23(D), 7, "%s SDP has no audio in it.\n%s\n", D.41396_214, D.41211_216);
  goto <bb 117>;

<bb 116>:
  D.41222_217 = session_23(D)->channel;
  D.41397_218 = switch_channel_get_name (D.41222_217);
  D.41210_219 = smh_24->mparams;
  D.41211_220 = D.41210_219->local_sdp_str;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7406, session_23(D), 7, "%s Patched SDP\n---\n%s\n+++\n%s\n", D.41397_218, D.41211_220, new_sdp_56);
  switch_core_media_set_local_sdp (session_23(D), new_sdp_56, 0);

<bb 117>:
  return;

}



;; Function switch_core_media_start_udptl (switch_core_media_start_udptl)

Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_media_handle_test_media_flag.
Iterations: 0
switch_core_media_start_udptl (struct switch_core_session_t * session, struct switch_t38_options_t * t38_options)
{
  const char * val;
  const char * err;
  switch_port_t remote_port;
  char * remote_host;
  static const char __func__[30] = "switch_core_media_start_udptl";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_start_udptl";
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  int D.41204;
  uint32_t D.41200;
  int32_t D.41197;
  const char * err.15;
  switch_status_t D.41190;
  int D.41189;
  int D.39841;
  uint16_t D.41184;
  _Bool D.41181;
  _Bool D.41180;
  _Bool D.41179;
  const char * D.41178;
  uint8_t D.41172;
  struct switch_rtp_t * D.41171;
  switch_channel_state_t D.41170;
  int D.41168;
  struct switch_channel_t * D.41167;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7419, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 22>;
  else
    goto <bb 5>;

<bb 5>:
  D.41167_3 = session_1(D)->channel;
  D.41168_4 = switch_channel_check_signal (D.41167_3, 1);
  if (D.41168_4 != 0)
    goto <bb 22>;
  else
    goto <bb 6>;

<bb 6>:
  D.41167_5 = session_1(D)->channel;
  D.41170_6 = switch_channel_get_state (D.41167_5);
  if (D.41170_6 > 9)
    goto <bb 22>;
  else
    goto <bb 7>;

<bb 7>:
  a_engine_7 = &smh_2->engines;
  # DEBUG a_engine => a_engine_7
  D.41171_8 = a_engine_7->rtp_session;
  D.41172_9 = switch_rtp_ready (D.41171_8);
  if (D.41172_9 != 0)
    goto <bb 8>;
  else
    goto <bb 22>;

<bb 8>:
  D.41171_10 = a_engine_7->rtp_session;
  remote_host_11 = switch_rtp_get_remote_host (D.41171_10);
  # DEBUG remote_host => remote_host_11
  D.41171_12 = a_engine_7->rtp_session;
  remote_port_13 = switch_rtp_get_remote_port (D.41171_12);
  # DEBUG remote_port => remote_port_13
  D.41167_14 = session_1(D)->channel;
  switch_channel_clear_flag (D.41167_14, 99);
  D.41171_15 = a_engine_7->rtp_session;
  switch_rtp_udptl_mode (D.41171_15);
  if (t38_options_16(D) == 0B)
    goto <bb 10>;
  else
    goto <bb 9>;

<bb 9>:
  D.41178_17 = t38_options_16(D)->remote_ip;
  if (D.41178_17 == 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7441, session_1(D), 7, "No remote address\n");
  goto <bb 22>;

<bb 11>:
  D.41179_18 = remote_host_11 != 0B;
  D.41180_19 = remote_port_13 != 0;
  D.41181_20 = D.41179_18 && D.41180_19;
  if (D.41181_20 != 0)
    goto <bb 12>;
  else
    goto <bb 15>;

<bb 12>:
  D.41184_21 = t38_options_16(D)->remote_port;
  if (D.41184_21 == remote_port_13)
    goto <bb 13>;
  else
    goto <bb 15>;

<bb 13>:
  D.41178_22 = t38_options_16(D)->remote_ip;
  D.39841_23 = __builtin_strcmp (remote_host_11, D.41178_22);
  if (D.39841_23 == 0)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  D.41178_24 = t38_options_16(D)->remote_ip;
  D.41184_25 = t38_options_16(D)->remote_port;
  D.41189_26 = (int) D.41184_25;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7446, session_1(D), 7, "Remote address:port [%s:%d] has not changed.\n", D.41178_24, D.41189_26);
  goto <bb 22>;

<bb 15>:
  D.41171_27 = a_engine_7->rtp_session;
  D.41178_28 = t38_options_16(D)->remote_ip;
  D.41184_29 = t38_options_16(D)->remote_port;
  D.41190_30 = switch_rtp_set_remote_address (D.41171_27, D.41178_28, D.41184_29, 0, 1, &err);
  if (D.41190_30 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  err.15_31 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7453, session_1(D), 3, "IMAGE UDPTL REPORTS ERROR: [%s]\n", err.15_31);
  goto <bb 22>;

<bb 17>:
  D.41178_32 = t38_options_16(D)->remote_ip;
  D.41184_33 = t38_options_16(D)->remote_port;
  D.41189_34 = (int) D.41184_33;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7455, session_1(D), 7, "IMAGE UDPTL CHANGING DEST TO: [%s:%d]\n", D.41178_32, D.41189_34);
  D.41197_35 = switch_media_handle_test_media_flag (smh_2, 10);
  if (D.41197_35 == 0)
    goto <bb 18>;
  else
    goto <bb 22>;

<bb 18>:
  D.41167_36 = session_1(D)->channel;
  D.41200_37 = switch_channel_test_flag (D.41167_36, 106);
  if (D.41200_37 == 0)
    goto <bb 19>;
  else
    goto <bb 22>;

<bb 19>:
  D.41167_38 = session_1(D)->channel;
  val_39 = switch_channel_get_variable_dup (D.41167_38, "disable_udptl_auto_adjust", 1, -1);
  # DEBUG val => val_39
  if (val_39 == 0B)
    goto <bb 21>;
  else
    goto <bb 20>;

<bb 20>:
  D.41204_40 = switch_true (val_39);
  if (D.41204_40 == 0)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.41171_41 = a_engine_7->rtp_session;
  switch_rtp_set_flag (D.41171_41, 7);

<bb 22>:
  return;

}



;; Function switch_core_media_receive_message (switch_core_media_receive_message)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_receive_message.
Processing frequency atoi
  Called by switch_core_media_receive_message that is normal or hot
Considering to always inline inline candidate atol.
 Inlining atol into switch_core_media_receive_message.
Processing frequency atol
  Called by switch_core_media_receive_message that is normal or hot
Considering to always inline inline candidate atol.
 Inlining atol into switch_core_media_receive_message.
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_receive_message.
Processing frequency atoi
  Called by switch_core_media_receive_message that is normal or hot
Considering inline candidate switch_core_media_start_udptl.
Not inlining: code size would grow by 140.
Considering inline candidate switch_media_handle_set_media_flag.
Considering inline candidate switch_core_media_gen_local_sdp.
Not inlining: code size would grow by 2912.
Considering inline candidate switch_core_media_check_video_codecs.
Not inlining: code size would grow by 50.
Considering inline candidate switch_core_media_prepare_codecs.
Not inlining: code size would grow by 130.
Considering inline candidate switch_core_media_absorb_sdp.
Not inlining: code size would grow by 72.
Considering inline candidate switch_core_media_gen_local_sdp.
Not inlining: code size would grow by 2912.
Considering inline candidate clear_pmaps.
 Inlining clear_pmaps into switch_core_media_receive_message.
Processing frequency clear_pmaps
  Called by switch_core_media_receive_message that is normal or hot
Considering inline candidate clear_pmaps.
 Inlining clear_pmaps into switch_core_media_receive_message.
Processing frequency clear_pmaps
  Called by switch_core_media_receive_message that is normal or hot
Considering inline candidate switch_core_media_prepare_codecs.
Not inlining: code size would grow by 130.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_core_media_set_local_sdp.
Not inlining: code size would grow by 39.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_receive_message.
Processing frequency _zstr
  Called by switch_core_media_receive_message that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_receive_message.
Processing frequency _zstr
  Called by switch_core_media_receive_message that is normal or hot
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Inlining atoi to switch_core_media_receive_message with frequency 1000
Inlining atol to switch_core_media_receive_message with frequency 1000
Inlining atol to switch_core_media_receive_message with frequency 1000
Inlining _zstr to switch_core_media_receive_message with frequency 1000
Inlining _zstr to switch_core_media_receive_message with frequency 1000
Inlining clear_pmaps to switch_core_media_receive_message with frequency 1000
Inlining clear_pmaps to switch_core_media_receive_message with frequency 1000
Inlining atoi to switch_core_media_receive_message with frequency 1000
Considering inline candidate switch_core_media_start_udptl.
Not inlining: code size would grow by 140.
Considering inline candidate switch_media_handle_set_media_flag.
Considering inline candidate switch_core_media_gen_local_sdp.
Not inlining: code size would grow by 2912.
Considering inline candidate switch_core_media_check_video_codecs.
Not inlining: code size would grow by 50.
Considering inline candidate switch_core_media_prepare_codecs.
Not inlining: code size would grow by 130.
Considering inline candidate switch_core_media_absorb_sdp.
Not inlining: code size would grow by 72.
Considering inline candidate switch_core_media_gen_local_sdp.
Not inlining: code size would grow by 2912.
Considering inline candidate switch_core_media_prepare_codecs.
Not inlining: code size would grow by 130.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_core_media_set_local_sdp.
Not inlining: code size would grow by 39.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Considering inline candidate switch_true.
Not inlining: code size would grow by 53.
Considering inline candidate switch_false.
Not inlining: code size would grow by 53.
Iterations: 1
Merging blocks 36 and 165
Merging blocks 41 and 167
Merging blocks 42 and 169
Removing basic block 57
;; basic block 57, loop depth 0, count 0
;; prev block 56, next block 171
;; pred:      
;; succ:       171 [100.0%]  (fallthru,exec)
<bb 57>:


Merging blocks 58 and 176
Merging blocks 122 and 181
Merging blocks 174 and 170
Merging blocks 179 and 175
Removing basic block 180
;; basic block 180, loop depth 0, count 0
;; prev block 185, next block 187
;; pred:      
;; succ:       187 [100.0%]  (fallthru,exec)
<bb 180>:


Removing basic block 185
;; basic block 185, loop depth 0, count 0
;; prev block 184, next block 187
;; pred:      
;; succ:       187 [100.0%]  (fallthru)
<bb 185>:


Removing basic block 186
;; basic block 186, loop depth 0, count 0
;; prev block 191, next block 193
;; pred:      
;; succ:       193 [100.0%]  (fallthru,exec)
<bb 186>:


Removing basic block 191
;; basic block 191, loop depth 0, count 0
;; prev block 190, next block 193
;; pred:      
;; succ:       193 [100.0%]  (fallthru)
<bb 191>:


Merging blocks 193 and 192
Merging blocks 36 and 164
Merging blocks 41 and 166
Merging blocks 42 and 168


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 7477, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_27 = session_26(D)->media_handle;



Registering new PHI nodes in block #5



Registering new PHI nodes in block #6

Updating SSA information for statement D.40823_29 = session_26(D)->channel;

Updating SSA information for statement D.40824_30 = switch_channel_check_signal (D.40823_29, 1);



Registering new PHI nodes in block #7

Updating SSA information for statement D.40823_31 = session_26(D)->channel;

Updating SSA information for statement D.40826_32 = switch_channel_get_state (D.40823_31);



Registering new PHI nodes in block #9

Updating SSA information for statement D.40827_36 = msg_35(D)->message_id;



Registering new PHI nodes in block #10

Updating SSA information for statement D.40823_37 = session_26(D)->channel;

Updating SSA information for statement D.40828_38 = switch_channel_test_flag (D.40823_37, 82);



Registering new PHI nodes in block #11

Updating SSA information for statement D.40823_39 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40823_39, 122, 1);



Registering new PHI nodes in block #12

Updating SSA information for statement D.40831_40 = v_engine_34->rtp_session;



Registering new PHI nodes in block #13

Updating SSA information for statement D.40831_41 = v_engine_34->rtp_session;

Updating SSA information for statement switch_rtp_video_refresh (D.40831_41);



Registering new PHI nodes in block #14

Updating SSA information for statement D.40834_42 = a_engine_33->rtp_session;

Updating SSA information for statement D.40835_43 = switch_rtp_ready (D.40834_42);



Registering new PHI nodes in block #15

Updating SSA information for statement D.40838_44 = msg_35(D)->numeric_arg;



Registering new PHI nodes in block #16

Updating SSA information for statement D.40834_45 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.40834_45, 19);



Registering new PHI nodes in block #17

Updating SSA information for statement D.40834_46 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_clear_flag (D.40834_46, 19);



Registering new PHI nodes in block #18

Updating SSA information for statement D.40834_47 = a_engine_33->rtp_session;

Updating SSA information for statement D.40842_48 = switch_rtp_ready (D.40834_47);



Registering new PHI nodes in block #19

Updating SSA information for statement D.40845_54 = msg_35(D)->string_arg;



Registering new PHI nodes in block #20

Updating SSA information for statement D.40845_55 = msg_35(D)->string_arg;

Updating SSA information for statement D.40848_56 = strcasecmp (D.40845_55, "pause");



Registering new PHI nodes in block #21

Updating SSA information for statement D.40834_57 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_pause_jitter_buffer (D.40834_57, 1);



Registering new PHI nodes in block #22

Updating SSA information for statement D.40845_58 = msg_35(D)->string_arg;

Updating SSA information for statement D.40851_59 = strcasecmp (D.40845_58, "resume");



Registering new PHI nodes in block #23

Updating SSA information for statement D.40834_60 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_pause_jitter_buffer (D.40834_60, 0);



Registering new PHI nodes in block #24

Updating SSA information for statement D.40845_61 = msg_35(D)->string_arg;

Updating SSA information for statement D.40854_62 = strncasecmp (D.40845_61, "debug:", 6);



Registering new PHI nodes in block #25

Updating SSA information for statement D.40845_63 = msg_35(D)->string_arg;



Registering new PHI nodes in block #26



Registering new PHI nodes in block #27

Updating SSA information for statement D.40862_67 = *__s1_66;

Updating SSA information for statement D.40865_70 = MEM[(const unsigned char *)D.40864_69];



Registering new PHI nodes in block #28

Updating SSA information for statement D.40873_77 = *D.40872_76;

Updating SSA information for statement D.40876_80 = MEM[(const unsigned char *)D.40875_79];



Registering new PHI nodes in block #29

Updating SSA information for statement D.40883_87 = *D.40882_86;

Updating SSA information for statement D.40886_90 = MEM[(const unsigned char *)D.40885_89];



Registering new PHI nodes in block #30

Updating SSA information for statement D.40893_97 = *D.40892_96;

Updating SSA information for statement D.40896_100 = MEM[(const unsigned char *)D.40895_99];



Registering new PHI nodes in block #31



Registering new PHI nodes in block #32

Updating SSA information for statement iftmp.7_105 = __builtin_strcmp (s_64, "off");



Registering new PHI nodes in block #33



Registering new PHI nodes in block #34



Registering new PHI nodes in block #35

Updating SSA information for statement D.40834_108 = a_engine_33->rtp_session;

Updating SSA information for statement status_109 = switch_rtp_debug_jitter_buffer (D.40834_108, s_12);



Registering new PHI nodes in block #36

Updating SSA information for statement D.40845_110 = msg_35(D)->string_arg;

Updating SSA information for statement D.48228_481 = strtol (D.40845_110, 0B, 10);

Updating SSA information for statement D.48227 = D.48228_481;

Updating SSA information for statement len_111 = D.48227;



Registering new PHI nodes in block #37

Updating SSA information for statement D.40903_112 = a_engine_33->read_impl.microseconds_per_packet;



Registering new PHI nodes in block #38



Registering new PHI nodes in block #39



Registering new PHI nodes in block #40

Updating SSA information for statement D.40845_116 = msg_35(D)->string_arg;

Updating SSA information for statement p_117 = __builtin_strchr (D.40845_116, 58);



Registering new PHI nodes in block #41

Updating SSA information for statement D.48231_482 = strtol (p_118, 0B, 10);

Updating SSA information for statement D.48230 = D.48231_482;

Updating SSA information for statement maxlen_119 = D.48230;

Updating SSA information for statement q_120 = __builtin_strchr (p_118, 58);



Registering new PHI nodes in block #42

Updating SSA information for statement D.48234_483 = strtol (q_121, 0B, 10);

Updating SSA information for statement D.48233 = D.48234_483;

Updating SSA information for statement D.40913_122 = D.48233;



Registering new PHI nodes in block #43



Registering new PHI nodes in block #44

Updating SSA information for statement D.40903_124 = a_engine_33->read_impl.microseconds_per_packet;



Registering new PHI nodes in block #45



Registering new PHI nodes in block #46



Registering new PHI nodes in block #47



Registering new PHI nodes in block #48

Updating SSA information for statement D.40834_128 = a_engine_33->rtp_session;

Updating SSA information for statement D.40922_131 = a_engine_33->read_impl.samples_per_packet;

Updating SSA information for statement D.40923_132 = a_engine_33->read_impl.samples_per_second;

Updating SSA information for statement D.40925_134 = switch_rtp_activate_jitter_buffer (D.40834_128, qlen.8_129, maxqlen.9_130, D.40922_131, D.40923_132, max_drift.10_133);



Registering new PHI nodes in block #49

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7577, session_26(D), 7, "Setting Jitterbuffer to %dms (%d frames) (%d max frames) (%d max drift)\n", len_4, qlen_7, maxqlen_9, max_drift_11);

Updating SSA information for statement D.40823_135 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40823_135, 57, 1);

Updating SSA information for statement D.40823_136 = session_26(D)->channel;

Updating SSA information for statement D.40928_137 = switch_channel_get_variable_dup (D.40823_136, "rtp_jitter_buffer_plc", 1, -1);

Updating SSA information for statement D.40929_138 = switch_false (D.40928_137);



Registering new PHI nodes in block #50

Updating SSA information for statement D.40823_139 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40823_139, 58, 1);



Registering new PHI nodes in block #51

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7585, session_26(D), 4, "Error Setting Jitterbuffer to %dms (%d frames)\n", len_4, qlen_7);



Registering new PHI nodes in block #52

Updating SSA information for statement D.40834_140 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_deactivate_jitter_buffer (D.40834_140);



Registering new PHI nodes in block #53

Updating SSA information for statement rtp_141 = a_engine_33->rtp_session;

Updating SSA information for statement direction_142 = msg_35(D)->string_array_arg[0];



Registering new PHI nodes in block #54

Updating SSA information for statement D.40936_143 = *direction_142;



Registering new PHI nodes in block #55

Updating SSA information for statement rtp_145 = v_engine_34->rtp_session;



Registering new PHI nodes in block #56

Updating SSA information for statement D.40939_146 = switch_rtp_ready (rtp_14);



Registering new PHI nodes in block #57



Registering new PHI nodes in block #58

Updating SSA information for statement D.48237_484 = *direction_15;



Registering new PHI nodes in block #59



Registering new PHI nodes in block #60

Updating SSA information for statement D.48236 = D.48238_485;

Updating SSA information for statement D.40942_147 = D.48236;



Registering new PHI nodes in block #61

Updating SSA information for statement D.40945_148 = msg_35(D)->string_array_arg[1];



Registering new PHI nodes in block #62

Updating SSA information for statement D.48241_486 = *D.40945_148;



Registering new PHI nodes in block #63



Registering new PHI nodes in block #64

Updating SSA information for statement D.48240 = D.48242_487;

Updating SSA information for statement D.40946_149 = D.48240;



Registering new PHI nodes in block #65

Updating SSA information for statement flags = {};

Updating SSA information for statement D.40949_150 = strcasecmp (direction_15, "both");



Registering new PHI nodes in block #66

Updating SSA information for statement D.40953_153 = strcasecmp (direction_15, "read");



Registering new PHI nodes in block #67

Updating SSA information for statement D.40954_154 = flags[28];

Updating SSA information for statement flags[28] = D.40955_155;



Registering new PHI nodes in block #68



Registering new PHI nodes in block #69

Updating SSA information for statement D.40959_157 = strcasecmp (direction_15, "write");



Registering new PHI nodes in block #70

Updating SSA information for statement D.40960_158 = flags[29];

Updating SSA information for statement flags[29] = D.40961_159;



Registering new PHI nodes in block #71



Registering new PHI nodes in block #72

Updating SSA information for statement D.40945_161 = msg_35(D)->string_array_arg[1];

Updating SSA information for statement D.40964_162 = switch_true (D.40945_161);



Registering new PHI nodes in block #73

Updating SSA information for statement switch_rtp_set_flags (rtp_14, &flags);



Registering new PHI nodes in block #74

Updating SSA information for statement switch_rtp_clear_flags (rtp_14, &flags);



Registering new PHI nodes in block #75

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7627, session_26(D), 3, "Invalid Options\n");



Registering new PHI nodes in block #76

Updating SSA information for statement D.40834_163 = a_engine_33->rtp_session;



Registering new PHI nodes in block #77

Updating SSA information for statement D.40834_164 = a_engine_33->rtp_session;

Updating SSA information for statement D.40971_165 = switch_rtp_test_flag (D.40834_164, 15);



Registering new PHI nodes in block #78

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7634, session_26(D), 4, "Pass 2833 mode may not work on a transcoded call.\n");



Registering new PHI nodes in block #79

Updating SSA information for statement D.40834_166 = a_engine_33->rtp_session;

Updating SSA information for statement D.40974_167 = switch_rtp_ready (D.40834_166);



Registering new PHI nodes in block #80

Updating SSA information for statement D.40823_169 = session_26(D)->channel;

Updating SSA information for statement val_170 = switch_channel_get_variable_dup (D.40823_169, "rtp_jitter_buffer_during_bridge", 1, -1);



Registering new PHI nodes in block #81

Updating SSA information for statement D.40980_171 = switch_false (val_170);



Registering new PHI nodes in block #82

Updating SSA information for statement D.40823_172 = session_26(D)->channel;

Updating SSA information for statement D.40981_173 = switch_channel_test_flag (D.40823_172, 57);



Registering new PHI nodes in block #83

Updating SSA information for statement D.40823_174 = session_26(D)->channel;

Updating SSA information for statement D.40984_175 = switch_channel_test_cap_partner (D.40823_174, 5);



Registering new PHI nodes in block #84

Updating SSA information for statement D.40823_176 = session_26(D)->channel;

Updating SSA information for statement D.40987_177 = switch_channel_get_name (D.40823_176);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7647, session_26(D), 7, "%s PAUSE Jitterbuffer\n", D.40987_177);

Updating SSA information for statement D.40834_178 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_pause_jitter_buffer (D.40834_178, 1);

Updating SSA information for statement D.40988_179 = smh_27->flags;

Updating SSA information for statement smh_27->flags = D.40989_180;



Registering new PHI nodes in block #85

Updating SSA information for statement D.40823_181 = session_26(D)->channel;

Updating SSA information for statement D.40990_182 = switch_channel_test_flag (D.40823_181, 100);



Registering new PHI nodes in block #86

Updating SSA information for statement D.40823_183 = session_26(D)->channel;

Updating SSA information for statement D.40993_184 = switch_channel_test_flag_partner (D.40823_183, 36);



Registering new PHI nodes in block #87

Updating SSA information for statement D.40834_185 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.40834_185, 15);

Updating SSA information for statement D.40823_186 = session_26(D)->channel;

Updating SSA information for statement D.40996_187 = switch_channel_get_name (D.40823_186);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7656, session_26(D), 7, "%s activate passthru 2833 mode.\n", D.40996_187);



Registering new PHI nodes in block #88

Updating SSA information for statement D.40823_188 = session_26(D)->channel;

Updating SSA information for statement val_189 = switch_channel_get_variable_dup (D.40823_188, "rtp_notimer_during_bridge", 1, -1);



Registering new PHI nodes in block #89

Updating SSA information for statement ok_190 = switch_true (val_189);



Registering new PHI nodes in block #90

Updating SSA information for statement D.40823_191 = session_26(D)->channel;

Updating SSA information for statement D.41000_192 = switch_channel_test_flag (D.40823_191, 105);



Registering new PHI nodes in block #91



Registering new PHI nodes in block #92

Updating SSA information for statement D.40834_194 = a_engine_33->rtp_session;

Updating SSA information for statement D.41003_195 = switch_rtp_test_flag (D.40834_194, 3);



Registering new PHI nodes in block #93



Registering new PHI nodes in block #94



Registering new PHI nodes in block #95

Updating SSA information for statement D.40834_197 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_clear_flag (D.40834_197, 3);

Updating SSA information for statement D.40823_198 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40823_198, 99, 1);



Registering new PHI nodes in block #96



Registering new PHI nodes in block #97

Updating SSA information for statement D.40823_199 = session_26(D)->channel;

Updating SSA information for statement D.41011_200 = switch_channel_test_flag (D.40823_199, 99);



Registering new PHI nodes in block #98



Registering new PHI nodes in block #99

Updating SSA information for statement D.40823_202 = session_26(D)->channel;

Updating SSA information for statement val_203 = switch_channel_get_variable_dup (D.40823_202, "rtp_autoflush_during_bridge", 1, -1);



Registering new PHI nodes in block #100

Updating SSA information for statement ok_204 = switch_true (val_203);



Registering new PHI nodes in block #101

Updating SSA information for statement D.41016_205 = smh_27->media_flags[14];



Registering new PHI nodes in block #102



Registering new PHI nodes in block #103

Updating SSA information for statement D.40834_207 = a_engine_33->rtp_session;

Updating SSA information for statement rtp_flush_read_buffer (D.40834_207, 1);

Updating SSA information for statement D.40823_208 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40823_208, 104, 1);



Registering new PHI nodes in block #104

Updating SSA information for statement D.40834_209 = a_engine_33->rtp_session;

Updating SSA information for statement rtp_flush_read_buffer (D.40834_209, 0);



Registering new PHI nodes in block #105

Updating SSA information for statement D.40834_210 = a_engine_33->rtp_session;

Updating SSA information for statement D.41020_211 = switch_rtp_ready (D.40834_210);



Registering new PHI nodes in block #106

Updating SSA information for statement D.40988_212 = smh_27->flags;



Registering new PHI nodes in block #107

Updating SSA information for statement D.40988_214 = smh_27->flags;

Updating SSA information for statement smh_27->flags = D.41026_215;

Updating SSA information for statement D.40823_216 = session_26(D)->channel;

Updating SSA information for statement D.41027_217 = switch_channel_test_flag (D.40823_216, 57);



Registering new PHI nodes in block #108

Updating SSA information for statement D.40823_218 = session_26(D)->channel;

Updating SSA information for statement D.41030_219 = switch_channel_get_name (D.40823_218);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7704, session_26(D), 7, "%s RESUME Jitterbuffer\n", D.41030_219);

Updating SSA information for statement D.40834_220 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_pause_jitter_buffer (D.40834_220, 0);



Registering new PHI nodes in block #109

Updating SSA information for statement D.40834_221 = a_engine_33->rtp_session;

Updating SSA information for statement D.41031_222 = switch_rtp_test_flag (D.40834_221, 15);



Registering new PHI nodes in block #110

Updating SSA information for statement D.40823_223 = session_26(D)->channel;

Updating SSA information for statement D.41034_224 = switch_channel_get_name (D.40823_223);

Updating SSA information for statement switch_log_printf (3, "src/switch_core_media.c", &__func__, 7712, session_26(D), 7, "%s deactivate passthru 2833 mode.\n", D.41034_224);

Updating SSA information for statement D.40834_225 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_clear_flag (D.40834_225, 15);



Registering new PHI nodes in block #111

Updating SSA information for statement D.40823_226 = session_26(D)->channel;

Updating SSA information for statement D.41035_227 = switch_channel_test_flag (D.40823_226, 99);



Registering new PHI nodes in block #112

Updating SSA information for statement D.40834_228 = a_engine_33->rtp_session;

Updating SSA information for statement D.41038_229 = switch_rtp_test_flag (D.40834_228, 12);



Registering new PHI nodes in block #113

Updating SSA information for statement D.40834_230 = a_engine_33->rtp_session;

Updating SSA information for statement D.41041_231 = switch_rtp_test_flag (D.40834_230, 19);



Registering new PHI nodes in block #114

Updating SSA information for statement D.40834_232 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_set_flag (D.40834_232, 3);



Registering new PHI nodes in block #115

Updating SSA information for statement D.40823_233 = session_26(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.40823_233, 99);



Registering new PHI nodes in block #116

Updating SSA information for statement D.40823_234 = session_26(D)->channel;

Updating SSA information for statement D.41044_235 = switch_channel_test_flag (D.40823_234, 104);



Registering new PHI nodes in block #117

Updating SSA information for statement D.40834_236 = a_engine_33->rtp_session;

Updating SSA information for statement rtp_flush_read_buffer (D.40834_236, 2);

Updating SSA information for statement D.40823_237 = session_26(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.40823_237, 104);



Registering new PHI nodes in block #118

Updating SSA information for statement D.40834_238 = a_engine_33->rtp_session;

Updating SSA information for statement rtp_flush_read_buffer (D.40834_238, 0);



Registering new PHI nodes in block #119

Updating SSA information for statement D.40834_239 = a_engine_33->rtp_session;

Updating SSA information for statement D.41048_240 = switch_rtp_ready (D.40834_239);



Registering new PHI nodes in block #120

Updating SSA information for statement D.40834_241 = a_engine_33->rtp_session;

Updating SSA information for statement rtp_flush_read_buffer (D.40834_241, 0);



Registering new PHI nodes in block #121

Updating SSA information for statement D.41051_242 = session_26(D)->track_duration;



Registering new PHI nodes in block #122

Updating SSA information for statement D.41051_243 = session_26(D)->track_duration;

Updating SSA information for statement switch_core_session_enable_heartbeat (session_26(D), D.41051_243);



Registering new PHI nodes in block #123

Updating SSA information for statement D.40823_246 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40823_246, 15, 1);

Updating SSA information for statement a_engine_33->codec_negotiated = 0;

Updating SSA information for statement v_engine_34->codec_negotiated = 0;

Updating SSA information for statement switch_core_media_set_local_sdp (session_26(D), 0B, 0);

Updating SSA information for statement D.40823_247 = session_26(D)->channel;

Updating SSA information for statement D.41054_248 = switch_channel_get_variable_dup (D.40823_247, "bypass_keep_codec", 1, -1);

Updating SSA information for statement D.41055_249 = switch_true (D.41054_248);



Registering new PHI nodes in block #124

Updating SSA information for statement D.40823_250 = session_26(D)->channel;

Updating SSA information for statement D.40823_251 = session_26(D)->channel;

Updating SSA information for statement D.41058_252 = switch_channel_get_variable_dup (D.40823_251, "ep_codec_string", 1, -1);

Updating SSA information for statement switch_channel_set_variable_var_check (D.40823_251, "absolute_codec_string", D.41058_252, 1);



Registering new PHI nodes in block #125

Updating SSA information for statement D.40823_253 = session_26(D)->channel;

Updating SSA information for statement uuid_254 = switch_channel_get_partner_uuid (D.40823_253);



Registering new PHI nodes in block #126

Updating SSA information for statement other_session_255 = switch_core_session_perform_locate (uuid_254, "src/switch_core_media.c", &__func__, 7768);



Registering new PHI nodes in block #127

Updating SSA information for statement other_channel_256 = switch_core_session_get_channel (other_session_255);

Updating SSA information for statement ip_257 = switch_channel_get_variable_dup (other_channel_256, "remote_media_ip", 1, -1);

Updating SSA information for statement port_258 = switch_channel_get_variable_dup (other_channel_256, "remote_media_port", 1, -1);

Updating SSA information for statement switch_core_session_rwunlock (other_session_255);



Registering new PHI nodes in block #128

Updating SSA information for statement switch_core_media_prepare_codecs (session_26(D), 1);

Updating SSA information for statement pmap_488 = a_engine_33->payload_map;



Registering new PHI nodes in block #130



Registering new PHI nodes in block #131

Updating SSA information for statement D.48245_491 = pmap_489->allocated;



Registering new PHI nodes in block #129

Updating SSA information for statement pmap_489->negotiated = 0;

Updating SSA information for statement pmap_489->current = 0;

Updating SSA information for statement pmap_490 = pmap_489->next;



Registering new PHI nodes in block #132

Updating SSA information for statement pmap_492 = v_engine_34->payload_map;



Registering new PHI nodes in block #134



Registering new PHI nodes in block #135

Updating SSA information for statement D.48248_495 = pmap_493->allocated;



Registering new PHI nodes in block #133

Updating SSA information for statement pmap_493->negotiated = 0;

Updating SSA information for statement pmap_493->current = 0;

Updating SSA information for statement pmap_494 = pmap_493->next;



Registering new PHI nodes in block #136

Updating SSA information for statement D.48251_496 = strtol (port_258, 0B, 10);

Updating SSA information for statement D.48250 = D.48251_496;

Updating SSA information for statement D.41068_262 = D.48250;

Updating SSA information for statement switch_core_media_gen_local_sdp (session_26(D), 0, ip_257, D.41069_263, 0B, 1);



Registering new PHI nodes in block #137

Updating SSA information for statement D.41070_264 = smh_27->mparams;

Updating SSA information for statement D.41071_265 = D.41070_264->local_sdp_str;



Registering new PHI nodes in block #138

Updating SSA information for statement switch_core_media_absorb_sdp (session_26(D));



Registering new PHI nodes in block #139

Updating SSA information for statement D.41051_266 = session_26(D)->track_duration;



Registering new PHI nodes in block #140

Updating SSA information for statement D.41051_267 = session_26(D)->track_duration;

Updating SSA information for statement switch_core_session_enable_heartbeat (session_26(D), D.41051_267);



Registering new PHI nodes in block #141

Updating SSA information for statement D.41076_268 = smh_27->mutex;



Registering new PHI nodes in block #142

Updating SSA information for statement D.41076_269 = smh_27->mutex;

Updating SSA information for statement switch_mutex_lock (D.41076_269);



Registering new PHI nodes in block #143

Updating SSA information for statement D.40823_270 = session_26(D)->channel;

Updating SSA information for statement D.41081_271 = switch_channel_check_signal (D.40823_270, 1);



Registering new PHI nodes in block #144

Updating SSA information for statement D.40823_272 = session_26(D)->channel;

Updating SSA information for statement D.41083_273 = switch_channel_get_state (D.40823_272);



Registering new PHI nodes in block #146

Updating SSA information for statement D.40827_274 = msg_35(D)->message_id;



Registering new PHI nodes in block #147

Updating SSA information for statement D.40845_275 = msg_35(D)->string_arg;



Registering new PHI nodes in block #148

Updating SSA information for statement D.40823_276 = session_26(D)->channel;

Updating SSA information for statement switch_channel_set_variable_var_check (D.40823_276, "absolute_codec_string", 0B, 1);

Updating SSA information for statement D.40845_277 = msg_35(D)->string_arg;

Updating SSA information for statement D.41086_278 = *D.40845_277;



Registering new PHI nodes in block #149

Updating SSA information for statement D.40823_279 = session_26(D)->channel;

Updating SSA information for statement D.40845_280 = msg_35(D)->string_arg;

Updating SSA information for statement switch_channel_set_variable_var_check (D.40823_279, "codec_string", D.40845_280, 1);



Registering new PHI nodes in block #150

Updating SSA information for statement D.40823_281 = session_26(D)->channel;

Updating SSA information for statement D.41091_282 = v_engine_34->cur_payload_map;

Updating SSA information for statement D.41092_283 = D.41091_282->rm_encoding;



Registering new PHI nodes in block #151

Updating SSA information for statement D.41091_284 = v_engine_34->cur_payload_map;

Updating SSA information for statement iftmp.11_285 = D.41091_284->rm_encoding;



Registering new PHI nodes in block #152



Registering new PHI nodes in block #153

Updating SSA information for statement D.41091_287 = v_engine_34->cur_payload_map;

Updating SSA information for statement D.41092_288 = D.41091_287->rm_encoding;



Registering new PHI nodes in block #154



Registering new PHI nodes in block #155



Registering new PHI nodes in block #156

Updating SSA information for statement D.41100_291 = a_engine_33->cur_payload_map;

Updating SSA information for statement D.41101_292 = D.41100_291->rm_encoding;

Updating SSA information for statement D.40845_293 = msg_35(D)->string_arg;

Updating SSA information for statement switch_channel_set_variable_printf (D.40823_281, "codec_string", "=%s%s%s,%s", iftmp.11_23, iftmp.12_24, D.41101_292, D.40845_293);



Registering new PHI nodes in block #157

Updating SSA information for statement a_engine_33->codec_negotiated = 0;

Updating SSA information for statement v_engine_34->codec_negotiated = 0;

Updating SSA information for statement D.40823_294 = session_26(D)->channel;

Updating SSA information for statement switch_channel_clear_flag (D.40823_294, 98);

Updating SSA information for statement switch_core_media_prepare_codecs (session_26(D), 1);

Updating SSA information for statement switch_core_media_check_video_codecs (session_26(D));

Updating SSA information for statement switch_core_media_gen_local_sdp (session_26(D), 0, 0B, 0, 0B, 1);



Registering new PHI nodes in block #158

Updating SSA information for statement switch_media_handle_set_media_flag (smh_27, 7);

Updating SSA information for statement D.40838_295 = msg_35(D)->numeric_arg;



Registering new PHI nodes in block #159

Updating SSA information for statement D.41104_296 = switch_core_session_perform_get_partner (session_26(D), &nsession, "src/switch_core_media.c", &__func__, 7835);



Registering new PHI nodes in block #160

Updating SSA information for statement msg_35(D)->numeric_arg = 0;

Updating SSA information for statement nsession.13_297 = nsession;

Updating SSA information for statement switch_core_session_perform_receive_message (nsession.13_297, msg_35(D), "src/switch_core_media.c", &__func__, 7837);

Updating SSA information for statement nsession.13_298 = nsession;

Updating SSA information for statement switch_core_session_rwunlock (nsession.13_298);



Registering new PHI nodes in block #161

Updating SSA information for statement D.40834_299 = a_engine_33->rtp_session;

Updating SSA information for statement D.41108_300 = switch_rtp_ready (D.40834_299);



Registering new PHI nodes in block #162

Updating SSA information for statement D.40838_301 = msg_35(D)->numeric_arg;



Registering new PHI nodes in block #163

Updating SSA information for statement D.40823_302 = session_26(D)->channel;

Updating SSA information for statement D.41113_303 = switch_channel_test_flag (D.40823_302, 57);



Registering new PHI nodes in block #164

Updating SSA information for statement D.40834_304 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_pause_jitter_buffer (D.40834_304, 1);

Updating SSA information for statement D.40988_305 = smh_27->flags;

Updating SSA information for statement smh_27->flags = D.40989_306;



Registering new PHI nodes in block #165

Updating SSA information for statement D.40834_307 = a_engine_33->rtp_session;

Updating SSA information for statement rtp_flush_read_buffer (D.40834_307, 2);



Registering new PHI nodes in block #166

Updating SSA information for statement D.40988_308 = smh_27->flags;



Registering new PHI nodes in block #167

Updating SSA information for statement D.40988_310 = smh_27->flags;

Updating SSA information for statement smh_27->flags = D.41026_311;

Updating SSA information for statement D.40823_312 = session_26(D)->channel;

Updating SSA information for statement D.41119_313 = switch_channel_test_flag (D.40823_312, 57);



Registering new PHI nodes in block #168

Updating SSA information for statement D.40834_314 = a_engine_33->rtp_session;

Updating SSA information for statement switch_rtp_pause_jitter_buffer (D.40834_314, 0);



Registering new PHI nodes in block #169

Updating SSA information for statement D.40823_315 = session_26(D)->channel;

Updating SSA information for statement t38_options_316 = switch_channel_get_private (D.40823_315, "t38_options");



Registering new PHI nodes in block #170

Updating SSA information for statement switch_core_media_start_udptl (session_26(D), t38_options_316);



Registering new PHI nodes in block #145



Registering new PHI nodes in block #171

Updating SSA information for statement D.41076_318 = smh_27->mutex;



Registering new PHI nodes in block #172

Updating SSA information for statement D.41076_319 = smh_27->mutex;

Updating SSA information for statement switch_mutex_unlock (D.41076_319);



Registering new PHI nodes in block #173

Updating SSA information for statement D.40823_320 = session_26(D)->channel;

Updating SSA information for statement D.41128_321 = switch_channel_check_signal (D.40823_320, 1);



Registering new PHI nodes in block #174

Updating SSA information for statement D.40823_322 = session_26(D)->channel;

Updating SSA information for statement D.41130_323 = switch_channel_get_state (D.40823_322);



Registering new PHI nodes in block #175



Registering new PHI nodes in block #176



Registering new PHI nodes in block #8



Registering new PHI nodes in block #177



Symbols to be put in SSA form

{ .MEM D.48227 D.48230 D.48233 D.48236 D.48240 D.48250 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 178
Number of blocks to update: 177 ( 99%)

Affected blocks


Scope blocks after cleanups:

{ Scope block #0 
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  switch_status_t status;
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_receive_message";
  void end = <<< error >>>; (unused)
  static const char __func__[34] = "switch_core_media_receive_message";
  void end_lock = <<< error >>>; (unused)

  { Scope block #455 
    int len;
    int maxlen;
    int qlen;
    int maxqlen;
    int max_drift;

    { Scope block #456 
      char * p;
      char * q;
      const char * s;

      { Scope block #457 src/switch_core_media.c:7559 Originating from :  extern long int atol (const char *); 
        const char * __nptr; (unused)

        { Scope block #458 Originating from :#0 

        }

      }

      { Scope block #459 src/switch_core_media.c:7556 Originating from :  extern long int atol (const char *); 
        const char * __nptr; (unused)

        { Scope block #460 Originating from :#0 

        }

      }

      { Scope block #461 src/switch_core_media.c:7546 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #462 Originating from :#0 

        }

      }

      { Scope block #463 
        size_t __s1_len; (unused)
        size_t __s2_len;

        { Scope block #464 
          const unsigned char * __s1;
          register int __result;

        }

      }

    }

  }

  { Scope block #465 
    struct switch_rtp_t * rtp;
    const char * direction;

    { Scope block #466 src/switch_core_media.c:7605 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #467 Originating from :#0 

      }

    }

    { Scope block #468 src/switch_core_media.c:7605 Originating from :  static int _zstr (const char *); 
      const char * s; (unused)

      { Scope block #469 Originating from :#0 

      }

    }

    { Scope block #470 
      switch_rtp_flag_t flags[39];
      int both;
      int set;

    }

  }

  { Scope block #471 
    const char * val;
    int ok;

  }

  { Scope block #472 
    const char * uuid;
    struct switch_core_session_t * other_session;
    struct switch_channel_t * other_channel;
    const char * ip;
    const char * port;

    { Scope block #473 src/switch_core_media.c:7778 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #474 Originating from :#0 

      }

    }

    { Scope block #475 src/switch_core_media.c:7777 Originating from :  static void clear_pmaps (struct switch_rtp_engine_t *); 
      struct switch_rtp_engine_t * engine; (unused)

      { Scope block #476 Originating from :#0 
        struct payload_map_t * pmap;

      }

    }

    { Scope block #477 src/switch_core_media.c:7776 Originating from :  static void clear_pmaps (struct switch_rtp_engine_t *); 
      struct switch_rtp_engine_t * engine; (unused)

      { Scope block #478 Originating from :#0 
        struct payload_map_t * pmap;

      }

    }

  }

  { Scope block #479 
    struct switch_core_session_t * nsession;

  }

  { Scope block #480 
    struct switch_t38_options_t * t38_options;

  }

}
switch_core_media_receive_message (struct switch_core_session_t * session, struct switch_core_session_message_t * msg)
{
  int D.48251;
  int D.48250;
  uint8_t D.48248;
  struct payload_map_t * pmap;
  uint8_t D.48245;
  struct payload_map_t * pmap;
  int D.48242;
  const char D.48241;
  int D.48240;
  int D.48238;
  const char D.48237;
  int D.48236;
  long int D.48234;
  long int D.48233;
  long int D.48231;
  long int D.48230;
  int D.48228;
  int D.48227;
  struct switch_t38_options_t * t38_options;
  struct switch_core_session_t * nsession;
  const char * port;
  const char * ip;
  struct switch_channel_t * other_channel;
  struct switch_core_session_t * other_session;
  const char * uuid;
  int ok;
  const char * val;
  int set;
  int both;
  switch_rtp_flag_t flags[39];
  const char * direction;
  struct switch_rtp_t * rtp;
  register int __result;
  const unsigned char * __s1;
  size_t __s2_len;
  const char * s;
  char * q;
  char * p;
  int max_drift;
  int maxqlen;
  int qlen;
  int maxlen;
  int len;
  static const char __func__[34] = "switch_core_media_receive_message";
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_receive_message";
  switch_status_t status;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  switch_channel_state_t D.41130;
  int D.41128;
  uint32_t D.41119;
  uint32_t D.41113;
  uint8_t D.41108;
  struct switch_core_session_t * nsession.13;
  switch_status_t D.41104;
  char * D.41101;
  struct payload_map_t * D.41100;
  char * iftmp.12;
  char * D.41092;
  struct payload_map_t * D.41091;
  char * iftmp.11;
  const char D.41086;
  switch_channel_state_t D.41083;
  int D.41081;
  struct switch_mutex_t * D.41076;
  char * D.41071;
  struct switch_core_media_params_t * D.41070;
  short unsigned int D.41069;
  int D.41068;
  _Bool D.41065;
  _Bool D.41064;
  _Bool D.41063;
  const char * D.41058;
  int D.41055;
  const char * D.41054;
  uint32_t D.41051;
  uint8_t D.41048;
  uint32_t D.41044;
  uint32_t D.41041;
  uint32_t D.41038;
  uint32_t D.41035;
  char * D.41034;
  uint32_t D.41031;
  char * D.41030;
  uint32_t D.41027;
  unsigned int D.41026;
  unsigned int D.41023;
  uint8_t D.41020;
  switch_core_media_flag_t D.41016;
  uint32_t D.41011;
  uint32_t D.41003;
  uint32_t D.41000;
  char * D.40996;
  uint32_t D.40993;
  uint32_t D.40990;
  unsigned int D.40989;
  smh_flag_t D.40988;
  char * D.40987;
  uint32_t D.40984;
  uint32_t D.40981;
  int D.40980;
  uint8_t D.40974;
  uint32_t D.40971;
  int D.40964;
  switch_rtp_flag_t D.40961;
  switch_rtp_flag_t D.40960;
  int D.40959;
  switch_rtp_flag_t D.40955;
  switch_rtp_flag_t D.40954;
  int D.40953;
  int D.40949;
  int D.40946;
  const char * D.40945;
  int D.40942;
  uint8_t D.40939;
  const char D.40936;
  int D.40929;
  const char * D.40928;
  switch_status_t D.40925;
  uint32_t max_drift.10;
  uint32_t D.40923;
  uint32_t D.40922;
  uint32_t maxqlen.9;
  uint32_t qlen.8;
  long int D.40913;
  int D.40904;
  int D.40903;
  int D.40897;
  const unsigned char D.40896;
  char * D.40895;
  int D.40894;
  const unsigned char D.40893;
  const unsigned char * D.40892;
  _Bool D.40889;
  _Bool D.40888;
  int D.40887;
  const unsigned char D.40886;
  char * D.40885;
  int D.40884;
  const unsigned char D.40883;
  const unsigned char * D.40882;
  _Bool D.40879;
  _Bool D.40878;
  int D.40877;
  const unsigned char D.40876;
  char * D.40875;
  int D.40874;
  const unsigned char D.40873;
  const unsigned char * D.40872;
  _Bool D.40869;
  _Bool D.40868;
  _Bool D.40867;
  int D.40866;
  const unsigned char D.40865;
  char[4] * D.40864;
  int D.40863;
  const unsigned char D.40862;
  int D.39872;
  int iftmp.7;
  int D.39873;
  int D.40854;
  int D.40851;
  int D.40848;
  const char * D.40845;
  uint8_t D.40842;
  int D.40838;
  uint8_t D.40835;
  struct switch_rtp_t * D.40834;
  struct switch_rtp_t * D.40831;
  uint32_t D.40828;
  switch_core_session_message_types_t D.40827;
  switch_channel_state_t D.40826;
  int D.40824;
  struct switch_channel_t * D.40823;
  switch_status_t D.40820;

<bb 2>:
  status_25 = 0;
  # DEBUG status => status_25
  if (session_26(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7477, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_27 = session_26(D)->media_handle;
  # DEBUG smh => smh_27
  if (smh_27 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40820_28 = 1;
  goto <bb 177>;

<bb 6>:
  D.40823_29 = session_26(D)->channel;
  D.40824_30 = switch_channel_check_signal (D.40823_29, 1);
  if (D.40824_30 != 0)
    goto <bb 8>;
  else
    goto <bb 7>;

<bb 7>:
  D.40823_31 = session_26(D)->channel;
  D.40826_32 = switch_channel_get_state (D.40823_31);
  if (D.40826_32 > 9)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.40820_326 = 1;
  goto <bb 177>;

<bb 9>:
  a_engine_33 = &smh_27->engines;
  # DEBUG a_engine => a_engine_33
  v_engine_34 = &smh_27->engines[1];
  # DEBUG v_engine => v_engine_34
  D.40827_36 = msg_35(D)->message_id;
  switch (D.40827_36) <default: <L211>, case 4: <L93>, case 5: <L126>, case 8: <L147>, case 9: <L150>, case 17: <L10>, case 19: <L88>, case 20: <L144>, case 24: <L65>, case 25: <L13>, case 32: <L19>, case 46: <L7>>

<L7>:
  D.40823_37 = session_26(D)->channel;
  D.40828_38 = switch_channel_test_flag (D.40823_37, 82);
  if (D.40828_38 != 0)
    goto <bb 11>;
  else
    goto <bb 141> (<L211>);

<bb 11>:
  D.40823_39 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_39, 122, 1);
  goto <bb 141> (<L211>);

<L10>:
  D.40831_40 = v_engine_34->rtp_session;
  if (D.40831_40 != 0B)
    goto <bb 13>;
  else
    goto <bb 141> (<L211>);

<bb 13>:
  D.40831_41 = v_engine_34->rtp_session;
  switch_rtp_video_refresh (D.40831_41);
  goto <bb 141> (<L211>);

<L13>:
  D.40834_42 = a_engine_33->rtp_session;
  D.40835_43 = switch_rtp_ready (D.40834_42);
  if (D.40835_43 != 0)
    goto <bb 15>;
  else
    goto <bb 141> (<L211>);

<bb 15>:
  D.40838_44 = msg_35(D)->numeric_arg;
  if (D.40838_44 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  D.40834_45 = a_engine_33->rtp_session;
  switch_rtp_set_flag (D.40834_45, 19);
  goto <bb 141> (<L211>);

<bb 17>:
  D.40834_46 = a_engine_33->rtp_session;
  switch_rtp_clear_flag (D.40834_46, 19);
  goto <bb 141> (<L211>);

<L19>:
  D.40834_47 = a_engine_33->rtp_session;
  D.40842_48 = switch_rtp_ready (D.40834_47);
  if (D.40842_48 != 0)
    goto <bb 19>;
  else
    goto <bb 141> (<L211>);

<bb 19>:
  len_49 = 0;
  # DEBUG len => len_49
  maxlen_50 = 0;
  # DEBUG maxlen => maxlen_50
  qlen_51 = 0;
  # DEBUG qlen => qlen_51
  maxqlen_52 = 50;
  # DEBUG maxqlen => maxqlen_52
  max_drift_53 = 0;
  # DEBUG max_drift => max_drift_53
  D.40845_54 = msg_35(D)->string_arg;
  if (D.40845_54 != 0B)
    goto <bb 20>;
  else
    goto <bb 45>;

<bb 20>:
  D.40845_55 = msg_35(D)->string_arg;
  D.40848_56 = strcasecmp (D.40845_55, "pause");
  if (D.40848_56 == 0)
    goto <bb 21>;
  else
    goto <bb 22>;

<bb 21>:
  D.40834_57 = a_engine_33->rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_57, 1);
  goto <bb 173> (end);

<bb 22>:
  D.40845_58 = msg_35(D)->string_arg;
  D.40851_59 = strcasecmp (D.40845_58, "resume");
  if (D.40851_59 == 0)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  D.40834_60 = a_engine_33->rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_60, 0);
  goto <bb 173> (end);

<bb 24>:
  D.40845_61 = msg_35(D)->string_arg;
  D.40854_62 = strncasecmp (D.40845_61, "debug:", 6);
  if (D.40854_62 == 0)
    goto <bb 25>;
  else
    goto <bb 36>;

<bb 25>:
  D.40845_63 = msg_35(D)->string_arg;
  s_64 = D.40845_63 + 6;
  # DEBUG s => s_64
  if (s_64 != 0B)
    goto <bb 26>;
  else
    goto <bb 35>;

<bb 26>:
  __s2_len_65 = 3;
  # DEBUG __s2_len => __s2_len_65
  if (__s2_len_65 <= 3)
    goto <bb 27>;
  else
    goto <bb 32>;

<bb 27>:
  __s1_66 = s_64;
  # DEBUG __s1 => __s1_66
  D.40862_67 = *__s1_66;
  D.40863_68 = (int) D.40862_67;
  D.40864_69 = "off";
  D.40865_70 = MEM[(const unsigned char *)D.40864_69];
  D.40866_71 = (int) D.40865_70;
  __result_72 = D.40863_68 - D.40866_71;
  # DEBUG __result => __result_72
  D.40867_73 = __s2_len_65 != 0;
  D.40868_74 = __result_72 == 0;
  D.40869_75 = D.40867_73 && D.40868_74;
  if (D.40869_75 != 0)
    goto <bb 28>;
  else
    goto <bb 31>;

<bb 28>:
  D.40872_76 = __s1_66 + 1;
  D.40873_77 = *D.40872_76;
  D.40874_78 = (int) D.40873_77;
  D.40875_79 = &"off"[1];
  D.40876_80 = MEM[(const unsigned char *)D.40875_79];
  D.40877_81 = (int) D.40876_80;
  __result_82 = D.40874_78 - D.40877_81;
  # DEBUG __result => __result_82
  D.40878_83 = __s2_len_65 > 1;
  D.40868_84 = __result_82 == 0;
  D.40879_85 = D.40878_83 && D.40868_84;
  if (D.40879_85 != 0)
    goto <bb 29>;
  else
    goto <bb 31>;

<bb 29>:
  D.40882_86 = __s1_66 + 2;
  D.40883_87 = *D.40882_86;
  D.40884_88 = (int) D.40883_87;
  D.40885_89 = &"off"[2];
  D.40886_90 = MEM[(const unsigned char *)D.40885_89];
  D.40887_91 = (int) D.40886_90;
  __result_92 = D.40884_88 - D.40887_91;
  # DEBUG __result => __result_92
  D.40888_93 = __s2_len_65 > 2;
  D.40868_94 = __result_92 == 0;
  D.40889_95 = D.40888_93 && D.40868_94;
  if (D.40889_95 != 0)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  D.40892_96 = __s1_66 + 3;
  D.40893_97 = *D.40892_96;
  D.40894_98 = (int) D.40893_97;
  D.40895_99 = &"off"[3];
  D.40896_100 = MEM[(const unsigned char *)D.40895_99];
  D.40897_101 = (int) D.40896_100;
  __result_102 = D.40894_98 - D.40897_101;
  # DEBUG __result => __result_102

<bb 31>:
  # __result_13 = PHI <__result_72(27), __result_82(28), __result_92(29), __result_102(30)>
  # DEBUG __result => __result_13
  D.39872_103 = __result_13;
  iftmp.7_104 = D.39872_103;
  goto <bb 33>;

<bb 32>:
  iftmp.7_105 = __builtin_strcmp (s_64, "off");

<bb 33>:
  # iftmp.7_22 = PHI <iftmp.7_104(31), iftmp.7_105(32)>
  D.39873_106 = iftmp.7_22;
  if (D.39873_106 == 0)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  s_107 = 0B;
  # DEBUG s => s_107

<bb 35>:
  # s_12 = PHI <s_64(25), s_64(33), s_107(34)>
  # DEBUG s => s_12
  D.40834_108 = a_engine_33->rtp_session;
  status_109 = switch_rtp_debug_jitter_buffer (D.40834_108, s_12);
  # DEBUG status => status_109
  goto <bb 173> (end);

<bb 36>:
  D.40845_110 = msg_35(D)->string_arg;
  # DEBUG __nptr => D.40845_110
  D.48228_481 = strtol (D.40845_110, 0B, 10);
  D.48227_502 = D.48228_481;
  len_111 = D.48227_502;
  # DEBUG len => NULL
  if (len_111 != 0)
    goto <bb 37>;
  else
    goto <bb 39>;

<bb 37>:
  D.40903_112 = a_engine_33->read_impl.microseconds_per_packet;
  D.40904_113 = D.40903_112 / 1000;
  qlen_114 = len_111 / D.40904_113;
  # DEBUG qlen => qlen_114
  if (qlen_114 <= 0)
    goto <bb 38>;
  else
    goto <bb 39>;

<bb 38>:
  qlen_115 = 3;
  # DEBUG qlen => qlen_115

<bb 39>:
  # qlen_6 = PHI <qlen_51(36), qlen_114(37), qlen_115(38)>
  # DEBUG qlen => qlen_6
  if (qlen_6 != 0)
    goto <bb 40>;
  else
    goto <bb 43>;

<bb 40>:
  D.40845_116 = msg_35(D)->string_arg;
  p_117 = __builtin_strchr (D.40845_116, 58);
  # DEBUG p => p_117
  if (p_117 != 0B)
    goto <bb 41>;
  else
    goto <bb 43>;

<bb 41>:
  p_118 = p_117 + 1;
  # DEBUG p => p_118
  # DEBUG __nptr => p_118
  D.48231_482 = strtol (p_118, 0B, 10);
  D.48230_504 = D.48231_482;
  maxlen_119 = D.48230_504;
  # DEBUG maxlen => NULL
  q_120 = __builtin_strchr (p_118, 58);
  # DEBUG q => q_120
  if (q_120 != 0B)
    goto <bb 42>;
  else
    goto <bb 43>;

<bb 42>:
  q_121 = q_120 + 1;
  # DEBUG q => q_121
  # DEBUG __nptr => q_121
  D.48234_483 = strtol (q_121, 0B, 10);
  D.48233_506 = D.48234_483;
  D.40913_122 = D.48233_506;
  max_drift_123 = ABS_EXPR <D.40913_122>;
  # DEBUG max_drift => max_drift_123

<bb 43>:
  # maxlen_5 = PHI <maxlen_50(39), maxlen_50(40), maxlen_119(41), maxlen_119(42)>
  # max_drift_10 = PHI <max_drift_53(39), max_drift_53(40), max_drift_53(41), max_drift_123(42)>
  # DEBUG max_drift => max_drift_10
  # DEBUG maxlen => maxlen_5
  if (maxlen_5 != 0)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  D.40903_124 = a_engine_33->read_impl.microseconds_per_packet;
  D.40904_125 = D.40903_124 / 1000;
  maxqlen_126 = maxlen_5 / D.40904_125;
  # DEBUG maxqlen => maxqlen_126

<bb 45>:
  # len_4 = PHI <len_49(19), len_111(43), len_111(44)>
  # qlen_7 = PHI <qlen_51(19), qlen_6(43), qlen_6(44)>
  # maxqlen_8 = PHI <maxqlen_52(19), maxqlen_52(43), maxqlen_126(44)>
  # max_drift_11 = PHI <max_drift_53(19), max_drift_10(43), max_drift_10(44)>
  # DEBUG max_drift => max_drift_11
  # DEBUG maxqlen => maxqlen_8
  # DEBUG qlen => qlen_7
  # DEBUG len => len_4
  if (qlen_7 != 0)
    goto <bb 46>;
  else
    goto <bb 52>;

<bb 46>:
  if (maxqlen_8 < qlen_7)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  maxqlen_127 = qlen_7 * 5;
  # DEBUG maxqlen => maxqlen_127

<bb 48>:
  # maxqlen_9 = PHI <maxqlen_8(46), maxqlen_127(47)>
  # DEBUG maxqlen => maxqlen_9
  D.40834_128 = a_engine_33->rtp_session;
  qlen.8_129 = (uint32_t) qlen_7;
  maxqlen.9_130 = (uint32_t) maxqlen_9;
  D.40922_131 = a_engine_33->read_impl.samples_per_packet;
  D.40923_132 = a_engine_33->read_impl.samples_per_second;
  max_drift.10_133 = (uint32_t) max_drift_11;
  D.40925_134 = switch_rtp_activate_jitter_buffer (D.40834_128, qlen.8_129, maxqlen.9_130, D.40922_131, D.40923_132, max_drift.10_133);
  if (D.40925_134 == 0)
    goto <bb 49>;
  else
    goto <bb 51>;

<bb 49>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7577, session_26(D), 7, "Setting Jitterbuffer to %dms (%d frames) (%d max frames) (%d max drift)\n", len_4, qlen_7, maxqlen_9, max_drift_11);
  D.40823_135 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_135, 57, 1);
  D.40823_136 = session_26(D)->channel;
  D.40928_137 = switch_channel_get_variable_dup (D.40823_136, "rtp_jitter_buffer_plc", 1, -1);
  D.40929_138 = switch_false (D.40928_137);
  if (D.40929_138 == 0)
    goto <bb 50>;
  else
    goto <bb 141> (<L211>);

<bb 50>:
  D.40823_139 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_139, 58, 1);
  goto <bb 141> (<L211>);

<bb 51>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7585, session_26(D), 4, "Error Setting Jitterbuffer to %dms (%d frames)\n", len_4, qlen_7);
  goto <bb 141> (<L211>);

<bb 52>:
  D.40834_140 = a_engine_33->rtp_session;
  switch_rtp_deactivate_jitter_buffer (D.40834_140);
  goto <bb 141> (<L211>);

<L65>:
  rtp_141 = a_engine_33->rtp_session;
  # DEBUG rtp => rtp_141
  direction_142 = msg_35(D)->string_array_arg[0];
  # DEBUG direction => direction_142
  if (direction_142 != 0B)
    goto <bb 54>;
  else
    goto <bb 56>;

<bb 54>:
  D.40936_143 = *direction_142;
  if (D.40936_143 == 118)
    goto <bb 55>;
  else
    goto <bb 56>;

<bb 55>:
  direction_144 = direction_142 + 1;
  # DEBUG direction => direction_144
  rtp_145 = v_engine_34->rtp_session;
  # DEBUG rtp => rtp_145

<bb 56>:
  # rtp_14 = PHI <rtp_141(53), rtp_141(54), rtp_145(55)>
  # direction_15 = PHI <direction_142(53), direction_142(54), direction_144(55)>
  # DEBUG direction => direction_15
  # DEBUG rtp => rtp_14
  D.40939_146 = switch_rtp_ready (rtp_14);
  if (D.40939_146 != 0)
    goto <bb 57>;
  else
    goto <bb 173> (end);

<bb 57>:
  # DEBUG s => direction_15
  if (direction_15 == 0B)
    goto <bb 60>;
  else
    goto <bb 58>;

<bb 58>:
  D.48237_484 = *direction_15;
  if (D.48237_484 == 0)
    goto <bb 60>;
  else
    goto <bb 59>;

<bb 59>:

<bb 60>:
  # D.48238_485 = PHI <1(57), 1(58), 0(59)>
  D.48236_507 = D.48238_485;
  D.40942_147 = D.48236_507;
  if (D.40942_147 == 0)
    goto <bb 61>;
  else
    goto <bb 173> (end);

<bb 61>:
  D.40945_148 = msg_35(D)->string_array_arg[1];
  # DEBUG s => D.40945_148
  if (D.40945_148 == 0B)
    goto <bb 64>;
  else
    goto <bb 62>;

<bb 62>:
  D.48241_486 = *D.40945_148;
  if (D.48241_486 == 0)
    goto <bb 64>;
  else
    goto <bb 63>;

<bb 63>:

<bb 64>:
  # D.48242_487 = PHI <1(61), 1(62), 0(63)>
  D.48240_508 = D.48242_487;
  D.40946_149 = D.48240_508;
  if (D.40946_149 == 0)
    goto <bb 65>;
  else
    goto <bb 173> (end);

<bb 65>:
  flags = {};
  D.40949_150 = strcasecmp (direction_15, "both");
  both_151 = D.40949_150 == 0;
  # DEBUG both => both_151
  set_152 = 0;
  # DEBUG set => set_152
  if (both_151 != 0)
    goto <bb 67>;
  else
    goto <bb 66>;

<bb 66>:
  D.40953_153 = strcasecmp (direction_15, "read");
  if (D.40953_153 == 0)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  D.40954_154 = flags[28];
  D.40955_155 = D.40954_154 + 1;
  flags[28] = D.40955_155;
  set_156 = set_152 + 1;
  # DEBUG set => set_156

<bb 68>:
  # set_16 = PHI <set_152(66), set_156(67)>
  # DEBUG set => set_16
  if (both_151 != 0)
    goto <bb 70>;
  else
    goto <bb 69>;

<bb 69>:
  D.40959_157 = strcasecmp (direction_15, "write");
  if (D.40959_157 == 0)
    goto <bb 70>;
  else
    goto <bb 71>;

<bb 70>:
  D.40960_158 = flags[29];
  D.40961_159 = D.40960_158 + 1;
  flags[29] = D.40961_159;
  set_160 = set_16 + 1;
  # DEBUG set => set_160

<bb 71>:
  # set_17 = PHI <set_16(69), set_160(70)>
  # DEBUG set => set_17
  if (set_17 != 0)
    goto <bb 72>;
  else
    goto <bb 75>;

<bb 72>:
  D.40945_161 = msg_35(D)->string_array_arg[1];
  D.40964_162 = switch_true (D.40945_161);
  if (D.40964_162 != 0)
    goto <bb 73>;
  else
    goto <bb 74>;

<bb 73>:
  switch_rtp_set_flags (rtp_14, &flags);
  goto <bb 173> (end);

<bb 74>:
  switch_rtp_clear_flags (rtp_14, &flags);
  goto <bb 173> (end);

<bb 75>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7627, session_26(D), 3, "Invalid Options\n");
  goto <bb 173> (end);

<L88>:
  D.40834_163 = a_engine_33->rtp_session;
  if (D.40834_163 != 0B)
    goto <bb 77>;
  else
    goto <bb 173> (end);

<bb 77>:
  D.40834_164 = a_engine_33->rtp_session;
  D.40971_165 = switch_rtp_test_flag (D.40834_164, 15);
  if (D.40971_165 != 0)
    goto <bb 78>;
  else
    goto <bb 173> (end);

<bb 78>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7634, session_26(D), 4, "Pass 2833 mode may not work on a transcoded call.\n");
  goto <bb 173> (end);

<L93>:
  D.40834_166 = a_engine_33->rtp_session;
  D.40974_167 = switch_rtp_ready (D.40834_166);
  if (D.40974_167 != 0)
    goto <bb 80>;
  else
    goto <bb 173> (end);

<bb 80>:
  ok_168 = 0;
  # DEBUG ok => ok_168
  D.40823_169 = session_26(D)->channel;
  val_170 = switch_channel_get_variable_dup (D.40823_169, "rtp_jitter_buffer_during_bridge", 1, -1);
  # DEBUG val => val_170
  if (val_170 == 0B)
    goto <bb 82>;
  else
    goto <bb 81>;

<bb 81>:
  D.40980_171 = switch_false (val_170);
  if (D.40980_171 != 0)
    goto <bb 82>;
  else
    goto <bb 85>;

<bb 82>:
  D.40823_172 = session_26(D)->channel;
  D.40981_173 = switch_channel_test_flag (D.40823_172, 57);
  if (D.40981_173 != 0)
    goto <bb 83>;
  else
    goto <bb 85>;

<bb 83>:
  D.40823_174 = session_26(D)->channel;
  D.40984_175 = switch_channel_test_cap_partner (D.40823_174, 5);
  if (D.40984_175 != 0)
    goto <bb 84>;
  else
    goto <bb 85>;

<bb 84>:
  D.40823_176 = session_26(D)->channel;
  D.40987_177 = switch_channel_get_name (D.40823_176);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7647, session_26(D), 7, "%s PAUSE Jitterbuffer\n", D.40987_177);
  D.40834_178 = a_engine_33->rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_178, 1);
  D.40988_179 = smh_27->flags;
  D.40989_180 = D.40988_179 | 4;
  smh_27->flags = D.40989_180;

<bb 85>:
  D.40823_181 = session_26(D)->channel;
  D.40990_182 = switch_channel_test_flag (D.40823_181, 100);
  if (D.40990_182 != 0)
    goto <bb 86>;
  else
    goto <bb 88>;

<bb 86>:
  D.40823_183 = session_26(D)->channel;
  D.40993_184 = switch_channel_test_flag_partner (D.40823_183, 36);
  if (D.40993_184 != 0)
    goto <bb 87>;
  else
    goto <bb 88>;

<bb 87>:
  D.40834_185 = a_engine_33->rtp_session;
  switch_rtp_set_flag (D.40834_185, 15);
  D.40823_186 = session_26(D)->channel;
  D.40996_187 = switch_channel_get_name (D.40823_186);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7656, session_26(D), 7, "%s activate passthru 2833 mode.\n", D.40996_187);

<bb 88>:
  D.40823_188 = session_26(D)->channel;
  val_189 = switch_channel_get_variable_dup (D.40823_188, "rtp_notimer_during_bridge", 1, -1);
  # DEBUG val => val_189
  if (val_189 != 0B)
    goto <bb 89>;
  else
    goto <bb 90>;

<bb 89>:
  ok_190 = switch_true (val_189);
  # DEBUG ok => ok_190
  goto <bb 91>;

<bb 90>:
  D.40823_191 = session_26(D)->channel;
  D.41000_192 = switch_channel_test_flag (D.40823_191, 105);
  ok_193 = (int) D.41000_192;
  # DEBUG ok => ok_193

<bb 91>:
  # ok_18 = PHI <ok_190(89), ok_193(90)>
  # DEBUG ok => ok_18
  if (ok_18 != 0)
    goto <bb 92>;
  else
    goto <bb 94>;

<bb 92>:
  D.40834_194 = a_engine_33->rtp_session;
  D.41003_195 = switch_rtp_test_flag (D.40834_194, 3);
  if (D.41003_195 == 0)
    goto <bb 93>;
  else
    goto <bb 94>;

<bb 93>:
  ok_196 = 0;
  # DEBUG ok => ok_196

<bb 94>:
  # ok_19 = PHI <ok_18(91), ok_18(92), ok_196(93)>
  # DEBUG ok => ok_19
  if (ok_19 != 0)
    goto <bb 95>;
  else
    goto <bb 96>;

<bb 95>:
  D.40834_197 = a_engine_33->rtp_session;
  switch_rtp_clear_flag (D.40834_197, 3);
  D.40823_198 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_198, 99, 1);

<bb 96>:
  if (ok_19 != 0)
    goto <bb 97>;
  else
    goto <bb 99>;

<bb 97>:
  D.40823_199 = session_26(D)->channel;
  D.41011_200 = switch_channel_test_flag (D.40823_199, 99);
  if (D.41011_200 != 0)
    goto <bb 98>;
  else
    goto <bb 99>;

<bb 98>:
  ok_201 = 0;
  # DEBUG ok => ok_201
  goto <bb 102>;

<bb 99>:
  D.40823_202 = session_26(D)->channel;
  val_203 = switch_channel_get_variable_dup (D.40823_202, "rtp_autoflush_during_bridge", 1, -1);
  # DEBUG val => val_203
  if (val_203 != 0B)
    goto <bb 100>;
  else
    goto <bb 101>;

<bb 100>:
  ok_204 = switch_true (val_203);
  # DEBUG ok => ok_204
  goto <bb 102>;

<bb 101>:
  D.41016_205 = smh_27->media_flags[14];
  ok_206 = (int) D.41016_205;
  # DEBUG ok => ok_206

<bb 102>:
  # ok_20 = PHI <ok_201(98), ok_204(100), ok_206(101)>
  # DEBUG ok => ok_20
  if (ok_20 != 0)
    goto <bb 103>;
  else
    goto <bb 104>;

<bb 103>:
  D.40834_207 = a_engine_33->rtp_session;
  rtp_flush_read_buffer (D.40834_207, 1);
  D.40823_208 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_208, 104, 1);
  goto <bb 173> (end);

<bb 104>:
  D.40834_209 = a_engine_33->rtp_session;
  rtp_flush_read_buffer (D.40834_209, 0);
  goto <bb 173> (end);

<L126>:
  D.40834_210 = a_engine_33->rtp_session;
  D.41020_211 = switch_rtp_ready (D.40834_210);
  if (D.41020_211 != 0)
    goto <bb 106>;
  else
    goto <bb 173> (end);

<bb 106>:
  D.40988_212 = smh_27->flags;
  D.41023_213 = D.40988_212 & 4;
  if (D.41023_213 != 0)
    goto <bb 107>;
  else
    goto <bb 109>;

<bb 107>:
  D.40988_214 = smh_27->flags;
  D.41026_215 = D.40988_214 & 4294967291;
  smh_27->flags = D.41026_215;
  D.40823_216 = session_26(D)->channel;
  D.41027_217 = switch_channel_test_flag (D.40823_216, 57);
  if (D.41027_217 != 0)
    goto <bb 108>;
  else
    goto <bb 109>;

<bb 108>:
  D.40823_218 = session_26(D)->channel;
  D.41030_219 = switch_channel_get_name (D.40823_218);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7704, session_26(D), 7, "%s RESUME Jitterbuffer\n", D.41030_219);
  D.40834_220 = a_engine_33->rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_220, 0);

<bb 109>:
  D.40834_221 = a_engine_33->rtp_session;
  D.41031_222 = switch_rtp_test_flag (D.40834_221, 15);
  if (D.41031_222 != 0)
    goto <bb 110>;
  else
    goto <bb 111>;

<bb 110>:
  D.40823_223 = session_26(D)->channel;
  D.41034_224 = switch_channel_get_name (D.40823_223);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 7712, session_26(D), 7, "%s deactivate passthru 2833 mode.\n", D.41034_224);
  D.40834_225 = a_engine_33->rtp_session;
  switch_rtp_clear_flag (D.40834_225, 15);

<bb 111>:
  D.40823_226 = session_26(D)->channel;
  D.41035_227 = switch_channel_test_flag (D.40823_226, 99);
  if (D.41035_227 != 0)
    goto <bb 112>;
  else
    goto <bb 116>;

<bb 112>:
  D.40834_228 = a_engine_33->rtp_session;
  D.41038_229 = switch_rtp_test_flag (D.40834_228, 12);
  if (D.41038_229 == 0)
    goto <bb 113>;
  else
    goto <bb 115>;

<bb 113>:
  D.40834_230 = a_engine_33->rtp_session;
  D.41041_231 = switch_rtp_test_flag (D.40834_230, 19);
  if (D.41041_231 == 0)
    goto <bb 114>;
  else
    goto <bb 115>;

<bb 114>:
  D.40834_232 = a_engine_33->rtp_session;
  switch_rtp_set_flag (D.40834_232, 3);

<bb 115>:
  D.40823_233 = session_26(D)->channel;
  switch_channel_clear_flag (D.40823_233, 99);

<bb 116>:
  D.40823_234 = session_26(D)->channel;
  D.41044_235 = switch_channel_test_flag (D.40823_234, 104);
  if (D.41044_235 != 0)
    goto <bb 117>;
  else
    goto <bb 118>;

<bb 117>:
  D.40834_236 = a_engine_33->rtp_session;
  rtp_flush_read_buffer (D.40834_236, 2);
  D.40823_237 = session_26(D)->channel;
  switch_channel_clear_flag (D.40823_237, 104);
  goto <bb 173> (end);

<bb 118>:
  D.40834_238 = a_engine_33->rtp_session;
  rtp_flush_read_buffer (D.40834_238, 0);
  goto <bb 173> (end);

<L144>:
  D.40834_239 = a_engine_33->rtp_session;
  D.41048_240 = switch_rtp_ready (D.40834_239);
  if (D.41048_240 != 0)
    goto <bb 120>;
  else
    goto <bb 173> (end);

<bb 120>:
  D.40834_241 = a_engine_33->rtp_session;
  rtp_flush_read_buffer (D.40834_241, 0);
  goto <bb 173> (end);

<L147>:
  D.41051_242 = session_26(D)->track_duration;
  if (D.41051_242 != 0)
    goto <bb 122>;
  else
    goto <bb 141> (<L211>);

<bb 122>:
  D.41051_243 = session_26(D)->track_duration;
  switch_core_session_enable_heartbeat (session_26(D), D.41051_243);
  goto <bb 141> (<L211>);

<L150>:
  ip_244 = 0B;
  # DEBUG ip => ip_244
  port_245 = 0B;
  # DEBUG port => port_245
  D.40823_246 = session_26(D)->channel;
  switch_channel_set_flag_value (D.40823_246, 15, 1);
  a_engine_33->codec_negotiated = 0;
  v_engine_34->codec_negotiated = 0;
  switch_core_media_set_local_sdp (session_26(D), 0B, 0);
  D.40823_247 = session_26(D)->channel;
  D.41054_248 = switch_channel_get_variable_dup (D.40823_247, "bypass_keep_codec", 1, -1);
  D.41055_249 = switch_true (D.41054_248);
  if (D.41055_249 != 0)
    goto <bb 124>;
  else
    goto <bb 125>;

<bb 124>:
  D.40823_250 = session_26(D)->channel;
  D.40823_251 = session_26(D)->channel;
  D.41058_252 = switch_channel_get_variable_dup (D.40823_251, "ep_codec_string", 1, -1);
  switch_channel_set_variable_var_check (D.40823_251, "absolute_codec_string", D.41058_252, 1);

<bb 125>:
  D.40823_253 = session_26(D)->channel;
  uuid_254 = switch_channel_get_partner_uuid (D.40823_253);
  # DEBUG uuid => uuid_254
  if (uuid_254 != 0B)
    goto <bb 126>;
  else
    goto <bb 137>;

<bb 126>:
  other_session_255 = switch_core_session_perform_locate (uuid_254, "src/switch_core_media.c", &__func__, 7768);
  # DEBUG other_session => other_session_255
  if (other_session_255 != 0B)
    goto <bb 127>;
  else
    goto <bb 137>;

<bb 127>:
  other_channel_256 = switch_core_session_get_channel (other_session_255);
  # DEBUG other_channel => other_channel_256
  ip_257 = switch_channel_get_variable_dup (other_channel_256, "remote_media_ip", 1, -1);
  # DEBUG ip => ip_257
  port_258 = switch_channel_get_variable_dup (other_channel_256, "remote_media_port", 1, -1);
  # DEBUG port => port_258
  switch_core_session_rwunlock (other_session_255);
  D.41063_259 = ip_257 != 0B;
  D.41064_260 = port_258 != 0B;
  D.41065_261 = D.41063_259 && D.41064_260;
  if (D.41065_261 != 0)
    goto <bb 128>;
  else
    goto <bb 137>;

<bb 128>:
  switch_core_media_prepare_codecs (session_26(D), 1);
  # DEBUG engine => a_engine_33
  pmap_488 = a_engine_33->payload_map;
  # DEBUG pmap => pmap_488
  goto <bb 130>;

<bb 129>:
  pmap_489->negotiated = 0;
  pmap_489->current = 0;
  pmap_490 = pmap_489->next;
  # DEBUG pmap => pmap_490

<bb 130>:
  # pmap_489 = PHI <pmap_488(128), pmap_490(129)>
  # DEBUG pmap => pmap_489
  if (pmap_489 != 0B)
    goto <bb 131>;
  else
    goto <bb 132>;

<bb 131>:
  D.48245_491 = pmap_489->allocated;
  if (D.48245_491 != 0)
    goto <bb 129>;
  else
    goto <bb 132>;

<bb 132>:
  # DEBUG engine => v_engine_34
  pmap_492 = v_engine_34->payload_map;
  # DEBUG pmap => pmap_492
  goto <bb 134>;

<bb 133>:
  pmap_493->negotiated = 0;
  pmap_493->current = 0;
  pmap_494 = pmap_493->next;
  # DEBUG pmap => pmap_494

<bb 134>:
  # pmap_493 = PHI <pmap_492(132), pmap_494(133)>
  # DEBUG pmap => pmap_493
  if (pmap_493 != 0B)
    goto <bb 135>;
  else
    goto <bb 136>;

<bb 135>:
  D.48248_495 = pmap_493->allocated;
  if (D.48248_495 != 0)
    goto <bb 133>;
  else
    goto <bb 136>;

<bb 136>:
  # DEBUG __nptr => port_258
  D.48251_496 = strtol (port_258, 0B, 10);
  D.48250_514 = D.48251_496;
  D.41068_262 = D.48250_514;
  D.41069_263 = (short unsigned int) D.41068_262;
  switch_core_media_gen_local_sdp (session_26(D), 0, ip_257, D.41069_263, 0B, 1);

<bb 137>:
  D.41070_264 = smh_27->mparams;
  D.41071_265 = D.41070_264->local_sdp_str;
  if (D.41071_265 == 0B)
    goto <bb 138>;
  else
    goto <bb 139>;

<bb 138>:
  switch_core_media_absorb_sdp (session_26(D));

<bb 139>:
  D.41051_266 = session_26(D)->track_duration;
  if (D.41051_266 != 0)
    goto <bb 140>;
  else
    goto <bb 141> (<L211>);

<bb 140>:
  D.41051_267 = session_26(D)->track_duration;
  switch_core_session_enable_heartbeat (session_26(D), D.41051_267);

<L211>:
  D.41076_268 = smh_27->mutex;
  if (D.41076_268 != 0B)
    goto <bb 142>;
  else
    goto <bb 143>;

<bb 142>:
  D.41076_269 = smh_27->mutex;
  switch_mutex_lock (D.41076_269);

<bb 143>:
  D.40823_270 = session_26(D)->channel;
  D.41081_271 = switch_channel_check_signal (D.40823_270, 1);
  if (D.41081_271 != 0)
    goto <bb 145>;
  else
    goto <bb 144>;

<bb 144>:
  D.40823_272 = session_26(D)->channel;
  D.41083_273 = switch_channel_get_state (D.40823_272);
  if (D.41083_273 > 9)
    goto <bb 145>;
  else
    goto <bb 146>;

<bb 145>:
  status_317 = 1;
  # DEBUG status => status_317
  goto <bb 171> (end_lock);

<bb 146>:
  D.40827_274 = msg_35(D)->message_id;
  switch (D.40827_274) <default: end_lock, case 30: <L198>, case 37: <L186>, case 40: <L170>>

<L170>:
  D.40845_275 = msg_35(D)->string_arg;
  if (D.40845_275 != 0B)
    goto <bb 148>;
  else
    goto <bb 158>;

<bb 148>:
  D.40823_276 = session_26(D)->channel;
  switch_channel_set_variable_var_check (D.40823_276, "absolute_codec_string", 0B, 1);
  D.40845_277 = msg_35(D)->string_arg;
  D.41086_278 = *D.40845_277;
  if (D.41086_278 == 61)
    goto <bb 149>;
  else
    goto <bb 150>;

<bb 149>:
  D.40823_279 = session_26(D)->channel;
  D.40845_280 = msg_35(D)->string_arg;
  switch_channel_set_variable_var_check (D.40823_279, "codec_string", D.40845_280, 1);
  goto <bb 157>;

<bb 150>:
  D.40823_281 = session_26(D)->channel;
  D.41091_282 = v_engine_34->cur_payload_map;
  D.41092_283 = D.41091_282->rm_encoding;
  if (D.41092_283 != 0B)
    goto <bb 151>;
  else
    goto <bb 152>;

<bb 151>:
  D.41091_284 = v_engine_34->cur_payload_map;
  iftmp.11_285 = D.41091_284->rm_encoding;
  goto <bb 153>;

<bb 152>:
  iftmp.11_286 = "";

<bb 153>:
  # iftmp.11_23 = PHI <iftmp.11_285(151), iftmp.11_286(152)>
  D.41091_287 = v_engine_34->cur_payload_map;
  D.41092_288 = D.41091_287->rm_encoding;
  if (D.41092_288 != 0B)
    goto <bb 154>;
  else
    goto <bb 155>;

<bb 154>:
  iftmp.12_289 = ",";
  goto <bb 156>;

<bb 155>:
  iftmp.12_290 = "";

<bb 156>:
  # iftmp.12_24 = PHI <iftmp.12_289(154), iftmp.12_290(155)>
  D.41100_291 = a_engine_33->cur_payload_map;
  D.41101_292 = D.41100_291->rm_encoding;
  D.40845_293 = msg_35(D)->string_arg;
  switch_channel_set_variable_printf (D.40823_281, "codec_string", "=%s%s%s,%s", iftmp.11_23, iftmp.12_24, D.41101_292, D.40845_293);

<bb 157>:
  a_engine_33->codec_negotiated = 0;
  v_engine_34->codec_negotiated = 0;
  D.40823_294 = session_26(D)->channel;
  switch_channel_clear_flag (D.40823_294, 98);
  switch_core_media_prepare_codecs (session_26(D), 1);
  switch_core_media_check_video_codecs (session_26(D));
  switch_core_media_gen_local_sdp (session_26(D), 0, 0B, 0, 0B, 1);

<bb 158>:
  switch_media_handle_set_media_flag (smh_27, 7);
  D.40838_295 = msg_35(D)->numeric_arg;
  if (D.40838_295 != 0)
    goto <bb 159>;
  else
    goto <bb 171> (end_lock);

<bb 159>:
  D.41104_296 = switch_core_session_perform_get_partner (session_26(D), &nsession, "src/switch_core_media.c", &__func__, 7835);
  if (D.41104_296 == 0)
    goto <bb 160>;
  else
    goto <bb 171> (end_lock);

<bb 160>:
  msg_35(D)->numeric_arg = 0;
  nsession.13_297 = nsession;
  switch_core_session_perform_receive_message (nsession.13_297, msg_35(D), "src/switch_core_media.c", &__func__, 7837);
  nsession.13_298 = nsession;
  switch_core_session_rwunlock (nsession.13_298);
  goto <bb 171> (end_lock);

<L186>:
  D.40834_299 = a_engine_33->rtp_session;
  D.41108_300 = switch_rtp_ready (D.40834_299);
  if (D.41108_300 != 0)
    goto <bb 162>;
  else
    goto <bb 171> (end_lock);

<bb 162>:
  D.40838_301 = msg_35(D)->numeric_arg;
  if (D.40838_301 != 0)
    goto <bb 163>;
  else
    goto <bb 166>;

<bb 163>:
  D.40823_302 = session_26(D)->channel;
  D.41113_303 = switch_channel_test_flag (D.40823_302, 57);
  if (D.41113_303 != 0)
    goto <bb 164>;
  else
    goto <bb 165>;

<bb 164>:
  D.40834_304 = a_engine_33->rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_304, 1);
  D.40988_305 = smh_27->flags;
  D.40989_306 = D.40988_305 | 4;
  smh_27->flags = D.40989_306;

<bb 165>:
  D.40834_307 = a_engine_33->rtp_session;
  rtp_flush_read_buffer (D.40834_307, 2);
  goto <bb 171> (end_lock);

<bb 166>:
  D.40988_308 = smh_27->flags;
  D.41023_309 = D.40988_308 & 4;
  if (D.41023_309 != 0)
    goto <bb 167>;
  else
    goto <bb 171> (end_lock);

<bb 167>:
  D.40988_310 = smh_27->flags;
  D.41026_311 = D.40988_310 & 4294967291;
  smh_27->flags = D.41026_311;
  D.40823_312 = session_26(D)->channel;
  D.41119_313 = switch_channel_test_flag (D.40823_312, 57);
  if (D.41119_313 != 0)
    goto <bb 168>;
  else
    goto <bb 171> (end_lock);

<bb 168>:
  D.40834_314 = a_engine_33->rtp_session;
  switch_rtp_pause_jitter_buffer (D.40834_314, 0);
  goto <bb 171> (end_lock);

<L198>:
  D.40823_315 = session_26(D)->channel;
  t38_options_316 = switch_channel_get_private (D.40823_315, "t38_options");
  # DEBUG t38_options => t38_options_316
  if (t38_options_316 != 0B)
    goto <bb 170>;
  else
    goto <bb 171> (end_lock);

<bb 170>:
  switch_core_media_start_udptl (session_26(D), t38_options_316);

  # status_1 = PHI <status_317(145), status_25(159), status_25(165), status_25(169), status_25(158), status_25(160), status_25(161), status_25(168), status_25(167), status_25(166), status_25(146), status_25(170)>
end_lock:
  # DEBUG status => status_1
  D.41076_318 = smh_27->mutex;
  if (D.41076_318 != 0B)
    goto <bb 172>;
  else
    goto <bb 173> (end);

<bb 172>:
  D.41076_319 = smh_27->mutex;
  switch_mutex_unlock (D.41076_319);

  # status_2 = PHI <status_25(21), status_25(23), status_109(35), status_25(60), status_25(77), status_25(103), status_25(117), status_25(120), status_1(171), status_1(172), status_25(56), status_25(73), status_25(75), status_25(74), status_25(64), status_25(76), status_25(78), status_25(79), status_25(104), status_25(105), status_25(118), status_25(119)>
end:
  # DEBUG status => status_2
  D.40823_320 = session_26(D)->channel;
  D.41128_321 = switch_channel_check_signal (D.40823_320, 1);
  if (D.41128_321 != 0)
    goto <bb 175>;
  else
    goto <bb 174>;

<bb 174>:
  D.40823_322 = session_26(D)->channel;
  D.41130_323 = switch_channel_get_state (D.40823_322);
  if (D.41130_323 > 9)
    goto <bb 175>;
  else
    goto <bb 176>;

<bb 175>:
  status_324 = 1;
  # DEBUG status => status_324

<bb 176>:
  # status_3 = PHI <status_2(174), status_324(175)>
  # DEBUG status => status_3
  D.40820_325 = status_3;

<bb 177>:
  # D.40820_21 = PHI <D.40820_28(5), D.40820_326(8), D.40820_325(176)>
  return D.40820_21;

}



;; Function switch_core_media_break (switch_core_media_break)

Iterations: 0
switch_core_media_break (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[24] = "switch_core_media_break";
  struct switch_media_handle_t * smh;
  uint8_t D.40812;
  struct switch_rtp_t * D.40811;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7902, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40811_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40812_5 = switch_rtp_ready (D.40811_4);
  if (D.40812_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40811_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_break (D.40811_6);

<bb 7>:
  return;

}



;; Function switch_core_media_kill_socket (switch_core_media_kill_socket)

Iterations: 0
switch_core_media_kill_socket (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_kill_socket";
  struct switch_media_handle_t * smh;
  uint8_t D.40803;
  struct switch_rtp_t * D.40802;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7918, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40802_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40803_5 = switch_rtp_ready (D.40802_4);
  if (D.40803_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40802_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_kill_socket (D.40802_6);

<bb 7>:
  return;

}



;; Function switch_core_media_queue_rfc2833 (switch_core_media_queue_rfc2833)

Iterations: 0
switch_core_media_queue_rfc2833 (struct switch_core_session_t * session, switch_media_type_t type, const struct switch_dtmf_t * dtmf)
{
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_queue_rfc2833";
  struct switch_media_handle_t * smh;
  uint8_t D.40794;
  struct switch_rtp_t * D.40793;
  switch_status_t D.40792;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7934, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40792_4 = 1;
  goto <bb 9>;

<bb 6>:
  D.40793_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40794_7 = switch_rtp_ready (D.40793_6);
  if (D.40794_7 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40793_8 = smh_3->engines[type_5(D)].rtp_session;
  D.40792_10 = switch_rtp_queue_rfc2833 (D.40793_8, dtmf_9(D));
  goto <bb 9>;

<bb 8>:
  D.40792_11 = 1;

<bb 9>:
  # D.40792_1 = PHI <D.40792_4(5), D.40792_10(7), D.40792_11(8)>
  return D.40792_1;

}



;; Function switch_core_media_queue_rfc2833_in (switch_core_media_queue_rfc2833_in)

Iterations: 0
switch_core_media_queue_rfc2833_in (struct switch_core_session_t * session, switch_media_type_t type, const struct switch_dtmf_t * dtmf)
{
  static const char __PRETTY_FUNCTION__[35] = "switch_core_media_queue_rfc2833_in";
  struct switch_media_handle_t * smh;
  uint8_t D.40784;
  struct switch_rtp_t * D.40783;
  switch_status_t D.40782;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7952, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40782_4 = 1;
  goto <bb 9>;

<bb 6>:
  D.40783_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40784_7 = switch_rtp_ready (D.40783_6);
  if (D.40784_7 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40783_8 = smh_3->engines[type_5(D)].rtp_session;
  D.40782_10 = switch_rtp_queue_rfc2833_in (D.40783_8, dtmf_9(D));
  goto <bb 9>;

<bb 8>:
  D.40782_11 = 1;

<bb 9>:
  # D.40782_1 = PHI <D.40782_4(5), D.40782_10(7), D.40782_11(8)>
  return D.40782_1;

}



;; Function switch_core_media_ready (switch_core_media_ready)

Iterations: 0
switch_core_media_ready (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[24] = "switch_core_media_ready";
  struct switch_media_handle_t * smh;
  struct switch_rtp_t * D.40776;
  uint8_t D.40775;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7970, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40775_4 = 0;
  goto <bb 7>;

<bb 6>:
  D.40776_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40775_7 = switch_rtp_ready (D.40776_6);

<bb 7>:
  # D.40775_1 = PHI <D.40775_4(5), D.40775_7(6)>
  return D.40775_1;

}



;; Function switch_core_media_set_rtp_flag (switch_core_media_set_rtp_flag)

Iterations: 0
switch_core_media_set_rtp_flag (struct switch_core_session_t * session, switch_media_type_t type, switch_rtp_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_set_rtp_flag";
  struct switch_media_handle_t * smh;
  uint8_t D.40767;
  struct switch_rtp_t * D.40766;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 7984, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40766_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40767_5 = switch_rtp_ready (D.40766_4);
  if (D.40767_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40766_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_set_flag (D.40766_6, flag_7(D));

<bb 7>:
  return;

}



;; Function switch_core_media_clear_rtp_flag (switch_core_media_clear_rtp_flag)

Iterations: 0
switch_core_media_clear_rtp_flag (struct switch_core_session_t * session, switch_media_type_t type, switch_rtp_flag_t flag)
{
  static const char __PRETTY_FUNCTION__[33] = "switch_core_media_clear_rtp_flag";
  struct switch_media_handle_t * smh;
  uint8_t D.40758;
  struct switch_rtp_t * D.40757;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8000, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40757_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40758_5 = switch_rtp_ready (D.40757_4);
  if (D.40758_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40757_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_clear_flag (D.40757_6, flag_7(D));

<bb 7>:
  return;

}



;; Function switch_core_media_set_telephony_event (switch_core_media_set_telephony_event)

Iterations: 0
switch_core_media_set_telephony_event (struct switch_core_session_t * session, switch_media_type_t type, switch_payload_t te)
{
  static const char __PRETTY_FUNCTION__[38] = "switch_core_media_set_telephony_event";
  struct switch_media_handle_t * smh;
  uint8_t D.40749;
  struct switch_rtp_t * D.40748;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8016, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40748_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40749_5 = switch_rtp_ready (D.40748_4);
  if (D.40749_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40748_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_set_telephony_event (D.40748_6, te_7(D));

<bb 7>:
  return;

}



;; Function switch_core_media_set_telephony_recv_event (switch_core_media_set_telephony_recv_event)

Iterations: 0
switch_core_media_set_telephony_recv_event (struct switch_core_session_t * session, switch_media_type_t type, switch_payload_t te)
{
  static const char __PRETTY_FUNCTION__[43] = "switch_core_media_set_telephony_recv_event";
  struct switch_media_handle_t * smh;
  uint8_t D.40740;
  struct switch_rtp_t * D.40739;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8032, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 7>;
  else
    goto <bb 5>;

<bb 5>:
  D.40739_4 = smh_2->engines[type_3(D)].rtp_session;
  D.40740_5 = switch_rtp_ready (D.40739_4);
  if (D.40740_5 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

<bb 6>:
  D.40739_6 = smh_2->engines[type_3(D)].rtp_session;
  switch_rtp_set_telephony_recv_event (D.40739_6, te_7(D));

<bb 7>:
  return;

}



;; Function switch_core_media_get_stats (switch_core_media_get_stats)

Iterations: 0
switch_core_media_get_stats (struct switch_core_session_t * session, switch_media_type_t type, struct switch_memory_pool_t * pool)
{
  static const char __PRETTY_FUNCTION__[28] = "switch_core_media_get_stats";
  struct switch_media_handle_t * smh;
  struct switch_rtp_t * D.40731;
  struct switch_rtp_stats_t * D.40730;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8048, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40730_4 = 0B;
  goto <bb 9>;

<bb 6>:
  D.40731_6 = smh_3->engines[type_5(D)].rtp_session;
  if (D.40731_6 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40731_7 = smh_3->engines[type_5(D)].rtp_session;
  D.40730_9 = switch_rtp_get_stats (D.40731_7, pool_8(D));
  goto <bb 9>;

<bb 8>:
  D.40730_10 = 0B;

<bb 9>:
  # D.40730_1 = PHI <D.40730_4(5), D.40730_9(7), D.40730_10(8)>
  return D.40730_1;

}



;; Function set_stats (set_stats)

Considering inline candidate switch_core_media_get_stats.
Not inlining: code size would grow by 12.
Iterations: 0
set_stats (struct switch_core_session_t * session, switch_media_type_t type, const char * prefix)
{
  char var_val[35];
  char var_name[256];
  struct switch_channel_t * channel;
  struct switch_rtp_stats_t * stats;
  uint32_t D.46661;
  const char * iftmp.163;
  uint32_t D.46656;
  const char * iftmp.162;
  switch_size_t D.46651;
  const char * iftmp.161;
  switch_size_t D.46646;
  const char * iftmp.160;
  switch_size_t D.46641;
  const char * iftmp.159;
  switch_size_t D.46636;
  const char * iftmp.158;
  switch_size_t D.46631;
  const char * iftmp.157;
  switch_size_t D.46626;
  const char * iftmp.156;
  switch_size_t D.46621;
  const char * iftmp.155;
  double D.46616;
  const char * iftmp.154;
  double D.46611;
  const char * iftmp.153;
  switch_size_t D.46606;
  const char * iftmp.152;
  double D.46601;
  const char * iftmp.151;
  double D.46596;
  const char * iftmp.150;
  double D.46591;
  const char * iftmp.149;
  double D.46586;
  const char * iftmp.148;
  double D.46581;
  const char * iftmp.147;
  switch_size_t D.46576;
  const char * iftmp.146;
  switch_size_t D.46571;
  const char * iftmp.145;
  switch_size_t D.46566;
  const char * iftmp.144;
  switch_size_t D.46561;
  const char * iftmp.143;
  switch_size_t D.46556;
  const char * iftmp.142;
  switch_size_t D.46551;
  const char * iftmp.141;
  switch_size_t D.46546;
  const char * iftmp.140;
  switch_size_t D.46541;
  const char * iftmp.139;
  switch_size_t D.46536;
  const char * iftmp.138;
  switch_size_t D.46531;
  const char * iftmp.137;
  double D.46526;
  double D.46525;

<bb 2>:
  stats_30 = switch_core_media_get_stats (session_28(D), type_29(D), 0B);
  # DEBUG stats => stats_30
  channel_31 = switch_core_session_get_channel (session_28(D));
  # DEBUG channel => channel_31
  var_name = "";
  var_val = "";
  if (stats_30 != 0B)
    goto <bb 3>;
  else
    goto <bb 85>;

<bb 3>:
  D.46525_32 = stats_30->inbound.variance;
  D.46526_33 = sqrt (D.46525_32);
  stats_30->inbound.std_deviation = D.46526_33;
  if (prefix_34(D) != 0B)
    goto <bb 4>;
  else
    goto <bb 5>;

<bb 4>:
  iftmp.137_35 = prefix_34(D);
  goto <bb 6>;

<bb 5>:
  iftmp.137_36 = "";

<bb 6>:
  # iftmp.137_1 = PHI <iftmp.137_35(4), iftmp.137_36(5)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.137_1, "in_raw_bytes");
  D.46531_37 = stats_30->inbound.raw_bytes;
  switch_snprintf (&var_val, 35, "%d", D.46531_37);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  iftmp.138_38 = prefix_34(D);
  goto <bb 9>;

<bb 8>:
  iftmp.138_39 = "";

<bb 9>:
  # iftmp.138_2 = PHI <iftmp.138_38(7), iftmp.138_39(8)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.138_2, "in_media_bytes");
  D.46536_40 = stats_30->inbound.media_bytes;
  switch_snprintf (&var_val, 35, "%d", D.46536_40);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  iftmp.139_41 = prefix_34(D);
  goto <bb 12>;

<bb 11>:
  iftmp.139_42 = "";

<bb 12>:
  # iftmp.139_3 = PHI <iftmp.139_41(10), iftmp.139_42(11)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.139_3, "in_packet_count");
  D.46541_43 = stats_30->inbound.packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46541_43);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  iftmp.140_44 = prefix_34(D);
  goto <bb 15>;

<bb 14>:
  iftmp.140_45 = "";

<bb 15>:
  # iftmp.140_4 = PHI <iftmp.140_44(13), iftmp.140_45(14)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.140_4, "in_media_packet_count");
  D.46546_46 = stats_30->inbound.media_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46546_46);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

<bb 16>:
  iftmp.141_47 = prefix_34(D);
  goto <bb 18>;

<bb 17>:
  iftmp.141_48 = "";

<bb 18>:
  # iftmp.141_5 = PHI <iftmp.141_47(16), iftmp.141_48(17)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.141_5, "in_skip_packet_count");
  D.46551_49 = stats_30->inbound.skip_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46551_49);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  iftmp.142_50 = prefix_34(D);
  goto <bb 21>;

<bb 20>:
  iftmp.142_51 = "";

<bb 21>:
  # iftmp.142_6 = PHI <iftmp.142_50(19), iftmp.142_51(20)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.142_6, "in_jitter_packet_count");
  D.46556_52 = stats_30->inbound.jb_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46556_52);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  iftmp.143_53 = prefix_34(D);
  goto <bb 24>;

<bb 23>:
  iftmp.143_54 = "";

<bb 24>:
  # iftmp.143_7 = PHI <iftmp.143_53(22), iftmp.143_54(23)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.143_7, "in_dtmf_packet_count");
  D.46561_55 = stats_30->inbound.dtmf_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46561_55);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  iftmp.144_56 = prefix_34(D);
  goto <bb 27>;

<bb 26>:
  iftmp.144_57 = "";

<bb 27>:
  # iftmp.144_8 = PHI <iftmp.144_56(25), iftmp.144_57(26)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.144_8, "in_cng_packet_count");
  D.46566_58 = stats_30->inbound.cng_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46566_58);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  iftmp.145_59 = prefix_34(D);
  goto <bb 30>;

<bb 29>:
  iftmp.145_60 = "";

<bb 30>:
  # iftmp.145_9 = PHI <iftmp.145_59(28), iftmp.145_60(29)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.145_9, "in_flush_packet_count");
  D.46571_61 = stats_30->inbound.flush_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46571_61);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 31>;
  else
    goto <bb 32>;

<bb 31>:
  iftmp.146_62 = prefix_34(D);
  goto <bb 33>;

<bb 32>:
  iftmp.146_63 = "";

<bb 33>:
  # iftmp.146_10 = PHI <iftmp.146_62(31), iftmp.146_63(32)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.146_10, "in_largest_jb_size");
  D.46576_64 = stats_30->inbound.largest_jb_size;
  switch_snprintf (&var_val, 35, "%d", D.46576_64);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 34>;
  else
    goto <bb 35>;

<bb 34>:
  iftmp.147_65 = prefix_34(D);
  goto <bb 36>;

<bb 35>:
  iftmp.147_66 = "";

<bb 36>:
  # iftmp.147_11 = PHI <iftmp.147_65(34), iftmp.147_66(35)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.147_11, "in_jitter_min_variance");
  D.46581_67 = stats_30->inbound.min_variance;
  switch_snprintf (&var_val, 35, "%0.2f", D.46581_67);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 37>;
  else
    goto <bb 38>;

<bb 37>:
  iftmp.148_68 = prefix_34(D);
  goto <bb 39>;

<bb 38>:
  iftmp.148_69 = "";

<bb 39>:
  # iftmp.148_12 = PHI <iftmp.148_68(37), iftmp.148_69(38)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.148_12, "in_jitter_max_variance");
  D.46586_70 = stats_30->inbound.max_variance;
  switch_snprintf (&var_val, 35, "%0.2f", D.46586_70);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:
  iftmp.149_71 = prefix_34(D);
  goto <bb 42>;

<bb 41>:
  iftmp.149_72 = "";

<bb 42>:
  # iftmp.149_13 = PHI <iftmp.149_71(40), iftmp.149_72(41)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.149_13, "in_jitter_loss_rate");
  D.46591_73 = stats_30->inbound.lossrate;
  switch_snprintf (&var_val, 35, "%0.2f", D.46591_73);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;

<bb 43>:
  iftmp.150_74 = prefix_34(D);
  goto <bb 45>;

<bb 44>:
  iftmp.150_75 = "";

<bb 45>:
  # iftmp.150_14 = PHI <iftmp.150_74(43), iftmp.150_75(44)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.150_14, "in_jitter_burst_rate");
  D.46596_76 = stats_30->inbound.burstrate;
  switch_snprintf (&var_val, 35, "%0.2f", D.46596_76);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 46>;
  else
    goto <bb 47>;

<bb 46>:
  iftmp.151_77 = prefix_34(D);
  goto <bb 48>;

<bb 47>:
  iftmp.151_78 = "";

<bb 48>:
  # iftmp.151_15 = PHI <iftmp.151_77(46), iftmp.151_78(47)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.151_15, "in_mean_interval");
  D.46601_79 = stats_30->inbound.mean_interval;
  switch_snprintf (&var_val, 35, "%0.2f", D.46601_79);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  iftmp.152_80 = prefix_34(D);
  goto <bb 51>;

<bb 50>:
  iftmp.152_81 = "";

<bb 51>:
  # iftmp.152_16 = PHI <iftmp.152_80(49), iftmp.152_81(50)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.152_16, "in_flaw_total");
  D.46606_82 = stats_30->inbound.flaws;
  switch_snprintf (&var_val, 35, "%d", D.46606_82);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 52>;
  else
    goto <bb 53>;

<bb 52>:
  iftmp.153_83 = prefix_34(D);
  goto <bb 54>;

<bb 53>:
  iftmp.153_84 = "";

<bb 54>:
  # iftmp.153_17 = PHI <iftmp.153_83(52), iftmp.153_84(53)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.153_17, "in_quality_percentage");
  D.46611_85 = stats_30->inbound.R;
  switch_snprintf (&var_val, 35, "%0.2f", D.46611_85);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 55>;
  else
    goto <bb 56>;

<bb 55>:
  iftmp.154_86 = prefix_34(D);
  goto <bb 57>;

<bb 56>:
  iftmp.154_87 = "";

<bb 57>:
  # iftmp.154_18 = PHI <iftmp.154_86(55), iftmp.154_87(56)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.154_18, "in_mos");
  D.46616_88 = stats_30->inbound.mos;
  switch_snprintf (&var_val, 35, "%0.2f", D.46616_88);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 58>;
  else
    goto <bb 59>;

<bb 58>:
  iftmp.155_89 = prefix_34(D);
  goto <bb 60>;

<bb 59>:
  iftmp.155_90 = "";

<bb 60>:
  # iftmp.155_19 = PHI <iftmp.155_89(58), iftmp.155_90(59)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.155_19, "out_raw_bytes");
  D.46621_91 = stats_30->outbound.raw_bytes;
  switch_snprintf (&var_val, 35, "%d", D.46621_91);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 61>;
  else
    goto <bb 62>;

<bb 61>:
  iftmp.156_92 = prefix_34(D);
  goto <bb 63>;

<bb 62>:
  iftmp.156_93 = "";

<bb 63>:
  # iftmp.156_20 = PHI <iftmp.156_92(61), iftmp.156_93(62)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.156_20, "out_media_bytes");
  D.46626_94 = stats_30->outbound.media_bytes;
  switch_snprintf (&var_val, 35, "%d", D.46626_94);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  iftmp.157_95 = prefix_34(D);
  goto <bb 66>;

<bb 65>:
  iftmp.157_96 = "";

<bb 66>:
  # iftmp.157_21 = PHI <iftmp.157_95(64), iftmp.157_96(65)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.157_21, "out_packet_count");
  D.46631_97 = stats_30->outbound.packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46631_97);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 67>;
  else
    goto <bb 68>;

<bb 67>:
  iftmp.158_98 = prefix_34(D);
  goto <bb 69>;

<bb 68>:
  iftmp.158_99 = "";

<bb 69>:
  # iftmp.158_22 = PHI <iftmp.158_98(67), iftmp.158_99(68)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.158_22, "out_media_packet_count");
  D.46636_100 = stats_30->outbound.media_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46636_100);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 70>;
  else
    goto <bb 71>;

<bb 70>:
  iftmp.159_101 = prefix_34(D);
  goto <bb 72>;

<bb 71>:
  iftmp.159_102 = "";

<bb 72>:
  # iftmp.159_23 = PHI <iftmp.159_101(70), iftmp.159_102(71)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.159_23, "out_skip_packet_count");
  D.46641_103 = stats_30->outbound.skip_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46641_103);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 73>;
  else
    goto <bb 74>;

<bb 73>:
  iftmp.160_104 = prefix_34(D);
  goto <bb 75>;

<bb 74>:
  iftmp.160_105 = "";

<bb 75>:
  # iftmp.160_24 = PHI <iftmp.160_104(73), iftmp.160_105(74)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.160_24, "out_dtmf_packet_count");
  D.46646_106 = stats_30->outbound.dtmf_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46646_106);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 76>;
  else
    goto <bb 77>;

<bb 76>:
  iftmp.161_107 = prefix_34(D);
  goto <bb 78>;

<bb 77>:
  iftmp.161_108 = "";

<bb 78>:
  # iftmp.161_25 = PHI <iftmp.161_107(76), iftmp.161_108(77)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.161_25, "out_cng_packet_count");
  D.46651_109 = stats_30->outbound.cng_packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46651_109);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 79>;
  else
    goto <bb 80>;

<bb 79>:
  iftmp.162_110 = prefix_34(D);
  goto <bb 81>;

<bb 80>:
  iftmp.162_111 = "";

<bb 81>:
  # iftmp.162_26 = PHI <iftmp.162_110(79), iftmp.162_111(80)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.162_26, "rtcp_packet_count");
  D.46656_112 = stats_30->rtcp.packet_count;
  switch_snprintf (&var_val, 35, "%d", D.46656_112);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);
  if (prefix_34(D) != 0B)
    goto <bb 82>;
  else
    goto <bb 83>;

<bb 82>:
  iftmp.163_113 = prefix_34(D);
  goto <bb 84>;

<bb 83>:
  iftmp.163_114 = "";

<bb 84>:
  # iftmp.163_27 = PHI <iftmp.163_113(82), iftmp.163_114(83)>
  switch_snprintf (&var_name, 256, "rtp_%s_%s", iftmp.163_27, "rtcp_octet_count");
  D.46661_115 = stats_30->rtcp.octet_count;
  switch_snprintf (&var_val, 35, "%d", D.46661_115);
  switch_channel_set_variable_var_check (channel_31, &var_name, &var_val, 1);

<bb 85>:
  return;

}



;; Function switch_core_media_set_stats (switch_core_media_set_stats)

Considering inline candidate set_stats.
Not inlining: code size would grow by 631.
Considering inline candidate set_stats.
Not inlining: code size would grow by 631.
Iterations: 0
switch_core_media_set_stats (struct switch_core_session_t * session)
{
  struct switch_media_handle_t * D.46519;

<bb 2>:
  D.46519_2 = session_1(D)->media_handle;
  if (D.46519_2 == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

<bb 3>:
  set_stats (session_1(D), 0, "audio");
  set_stats (session_1(D), 1, "video");

<bb 4>:
  return;

}



;; Function switch_core_media_udptl_mode (switch_core_media_udptl_mode)

Iterations: 0
switch_core_media_udptl_mode (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[29] = "switch_core_media_udptl_mode";
  struct switch_media_handle_t * smh;
  uint8_t D.40722;
  struct switch_rtp_t * D.40721;
  switch_status_t D.40720;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8066, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40720_4 = 1;
  goto <bb 9>;

<bb 6>:
  D.40721_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40722_7 = switch_rtp_ready (D.40721_6);
  if (D.40722_7 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40721_8 = smh_3->engines[type_5(D)].rtp_session;
  D.40720_9 = switch_rtp_udptl_mode (D.40721_8);
  goto <bb 9>;

<bb 8>:
  D.40720_10 = 1;

<bb 9>:
  # D.40720_1 = PHI <D.40720_4(5), D.40720_9(7), D.40720_10(8)>
  return D.40720_1;

}



;; Function switch_core_media_get_jb (switch_core_media_get_jb)

Iterations: 0
switch_core_media_get_jb (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[25] = "switch_core_media_get_jb";
  struct switch_media_handle_t * smh;
  uint8_t D.40712;
  struct switch_rtp_t * D.40711;
  struct stfu_instance_t * D.40710;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8084, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40710_4 = 0B;
  goto <bb 9>;

<bb 6>:
  D.40711_6 = smh_3->engines[type_5(D)].rtp_session;
  D.40712_7 = switch_rtp_ready (D.40711_6);
  if (D.40712_7 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40711_8 = smh_3->engines[type_5(D)].rtp_session;
  D.40710_9 = switch_rtp_get_jitter_buffer (D.40711_8);
  goto <bb 9>;

<bb 8>:
  D.40710_10 = 0B;

<bb 9>:
  # D.40710_1 = PHI <D.40710_4(5), D.40710_9(7), D.40710_10(8)>
  return D.40710_1;

}



;; Function switch_core_media_set_sdp_codec_string (switch_core_media_set_sdp_codec_string)

Considering inline candidate switch_core_media_set_r_sdp_codec_string.
Not inlining: --param large-stack-frame-growth limit reached.
Considering inline candidate switch_core_media_get_codec_string.
Not inlining: code size would grow by 44.
Iterations: 0
switch_core_media_set_sdp_codec_string (struct switch_core_session_t * session, const char * r_sdp, switch_sdp_type_t sdp_type)
{
  static const char __PRETTY_FUNCTION__[39] = "switch_core_media_set_sdp_codec_string";
  struct switch_media_handle_t * smh;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  const char * D.40404;
  int D.40399;
  size_t D.40398;

<bb 2>:
  if (session_1(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8105, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_2 = session_1(D)->media_handle;
  # DEBUG smh => smh_2
  if (smh_2 == 0B)
    goto <bb 9>;
  else
    goto <bb 5>;

<bb 5>:
  D.40398_4 = strlen (r_sdp_3(D));
  D.40399_5 = (int) D.40398_4;
  parser_6 = sdp_parse (0B, r_sdp_3(D), D.40399_5, 0);
  # DEBUG parser => parser_6
  if (parser_6 != 0B)
    goto <bb 6>;
  else
    goto <bb 9>;

<bb 6>:
  sdp_7 = sdp_session (parser_6);
  # DEBUG sdp => sdp_7
  if (sdp_7 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40404_8 = switch_core_media_get_codec_string (session_1(D));
  switch_core_media_set_r_sdp_codec_string (session_1(D), D.40404_8, sdp_7, sdp_type_9(D));

<bb 8>:
  sdp_parser_free (parser_6);

<bb 9>:
  return;

}



;; Function switch_core_media_codec_chosen (switch_core_media_codec_chosen)

Iterations: 0
switch_core_media_codec_chosen (struct switch_core_session_t * session, switch_media_type_t type)
{
  static const char __PRETTY_FUNCTION__[31] = "switch_core_media_codec_chosen";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * engine;
  char * D.40390;
  struct payload_map_t * D.40389;
  unsigned int D.40388;
  struct switch_rtp_engine_t[2] * D.40387;
  switch_status_t D.40386;

<bb 2>:
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8407, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_3 = session_2(D)->media_handle;
  # DEBUG smh => smh_3
  if (smh_3 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  D.40386_4 = 1;
  goto <bb 9>;

<bb 6>:
  D.40387_5 = &smh_3->engines;
  D.40388_7 = type_6(D) * 11416;
  engine_8 = D.40387_5 + D.40388_7;
  # DEBUG engine => engine_8
  D.40389_9 = engine_8->cur_payload_map;
  D.40390_10 = D.40389_9->iananame;
  if (D.40390_10 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  D.40386_11 = 0;
  goto <bb 9>;

<bb 8>:
  D.40386_12 = 1;

<bb 9>:
  # D.40386_1 = PHI <D.40386_4(5), D.40386_11(7), D.40386_12(8)>
  return D.40386_1;

}



;; Function switch_core_media_check_outgoing_proxy (switch_core_media_check_outgoing_proxy)

Considering inline candidate switch_core_media_choose_port.
Not inlining: code size would grow by 187.
Iterations: 0
switch_core_media_check_outgoing_proxy (struct switch_core_session_t * session, struct switch_core_session_t * o_session)
{
  static const char __func__[39] = "switch_core_media_check_outgoing_proxy";
  static const char __PRETTY_FUNCTION__[39] = "switch_core_media_check_outgoing_proxy";
  const char * r_sdp;
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  struct payload_map_t * D.40380;
  const char * D.40377;
  char * D.40376;
  struct payload_map_t * D.40375;
  struct switch_channel_t * D.40374;
  uint32_t D.40369;
  struct switch_channel_t * D.40368;

<bb 2>:
  r_sdp_1 = 0B;
  # DEBUG r_sdp => r_sdp_1
  if (session_2(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8430, &__PRETTY_FUNCTION__);

<bb 4>:
  D.40368_4 = o_session_3(D)->channel;
  D.40369_5 = switch_channel_test_flag (D.40368_4, 29);
  if (D.40369_5 == 0)
    goto <bb 8>;
  else
    goto <bb 5>;

<bb 5>:
  smh_6 = session_2(D)->media_handle;
  # DEBUG smh => smh_6
  if (smh_6 == 0B)
    goto <bb 8>;
  else
    goto <bb 6>;

<bb 6>:
  D.40368_7 = o_session_3(D)->channel;
  r_sdp_8 = switch_channel_get_variable_dup (D.40368_7, "switch_r_sdp", 1, -1);
  # DEBUG r_sdp => r_sdp_8
  a_engine_9 = &smh_6->engines;
  # DEBUG a_engine => a_engine_9
  v_engine_10 = &smh_6->engines[1];
  # DEBUG v_engine => v_engine_10
  D.40374_11 = session_2(D)->channel;
  switch_channel_set_flag_value (D.40374_11, 29, 1);
  D.40375_12 = a_engine_9->cur_payload_map;
  D.40376_13 = switch_core_perform_session_strdup (session_2(D), "PROXY", "src/switch_core_media.c", &__func__, 8447);
  D.40375_12->iananame = D.40376_13;
  D.40375_14 = a_engine_9->cur_payload_map;
  D.40375_14->rm_rate = 8000;
  D.40375_15 = a_engine_9->cur_payload_map;
  D.40375_15->adv_rm_rate = 8000;
  D.40375_16 = a_engine_9->cur_payload_map;
  D.40375_16->codec_ms = 20;
  D.40377_17 = switch_stristr ("m=video", r_sdp_8);
  if (D.40377_17 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  switch_core_media_choose_port (session_2(D), 1, 1);
  D.40380_18 = v_engine_10->cur_payload_map;
  D.40380_18->rm_encoding = "PROXY-VID";
  D.40380_19 = v_engine_10->cur_payload_map;
  D.40380_19->rm_rate = 90000;
  D.40380_20 = v_engine_10->cur_payload_map;
  D.40380_20->adv_rm_rate = 90000;
  D.40380_21 = v_engine_10->cur_payload_map;
  D.40380_21->codec_ms = 0;
  D.40374_22 = session_2(D)->channel;
  switch_channel_set_flag_value (D.40374_22, 23, 1);
  D.40374_23 = session_2(D)->channel;
  switch_channel_set_flag_value (D.40374_23, 98, 1);

<bb 8>:
  return;

}



;; Function switch_core_media_proxy_codec (switch_core_media_proxy_codec)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_proxy_codec.
Processing frequency atoi
  Called by switch_core_media_proxy_codec that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_proxy_codec.
Processing frequency atoi
  Called by switch_core_media_proxy_codec that is normal or hot
Considering inline candidate switch_core_media_set_codec.
Not inlining: code size would grow by 487.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_proxy_codec.
Processing frequency _zstr
  Called by switch_core_media_proxy_codec that is normal or hot
Inlining _zstr to switch_core_media_proxy_codec with frequency 1000
Inlining atoi to switch_core_media_proxy_codec with frequency 1000
Inlining atoi to switch_core_media_proxy_codec with frequency 1000
Considering inline candidate switch_core_media_set_codec.
Not inlining: code size would grow by 487.
Iterations: 1
Merging blocks 9 and 32
Merging blocks 12 and 37
Merging blocks 20 and 39
Merging blocks 35 and 31
Merging blocks 12 and 36
Merging blocks 20 and 38


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8482, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_12 = session_11(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.40330_15 = strlen (r_sdp_14(D));

Updating SSA information for statement parser_17 = sdp_parse (0B, r_sdp_14(D), D.40331_16, 0);



Registering new PHI nodes in block #6

Updating SSA information for statement sdp_18 = sdp_session (parser_17);



Registering new PHI nodes in block #7

Updating SSA information for statement sdp_parser_free (parser_17);



Registering new PHI nodes in block #8

Updating SSA information for statement attr_19 = sdp_18->sdp_attributes;



Registering new PHI nodes in block #17



Registering new PHI nodes in block #9

Updating SSA information for statement D.40336_20 = attr_2->a_name;



Registering new PHI nodes in block #10

Updating SSA information for statement D.48272_65 = *D.40336_20;



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12

Updating SSA information for statement D.48271 = D.48273_66;

Updating SSA information for statement D.40337_21 = D.48271;



Registering new PHI nodes in block #14

Updating SSA information for statement D.40336_22 = attr_2->a_name;

Updating SSA information for statement D.40340_23 = strcasecmp (D.40336_22, "ptime");



Registering new PHI nodes in block #15

Updating SSA information for statement D.40343_24 = attr_2->a_value;

Updating SSA information for statement D.48276_67 = strtol (D.40343_24, 0B, 10);

Updating SSA information for statement D.48275 = D.48276_67;

Updating SSA information for statement dptime_25 = D.48275;



Registering new PHI nodes in block #13



Registering new PHI nodes in block #16

Updating SSA information for statement attr_26 = attr_2->a_next;



Registering new PHI nodes in block #18

Updating SSA information for statement m_27 = sdp_18->sdp_media;



Registering new PHI nodes in block #31



Registering new PHI nodes in block #19

Updating SSA information for statement D.40344_29 = m_1->m_proto;



Registering new PHI nodes in block #20

Updating SSA information for statement attr_30 = m_1->m_attributes;



Registering new PHI nodes in block #27



Registering new PHI nodes in block #21

Updating SSA information for statement D.40336_31 = attr_3->a_name;

Updating SSA information for statement D.40347_32 = strcasecmp (D.40336_31, "ptime");



Registering new PHI nodes in block #22

Updating SSA information for statement D.40343_33 = attr_3->a_value;



Registering new PHI nodes in block #23

Updating SSA information for statement D.40343_34 = attr_3->a_value;

Updating SSA information for statement D.48279_68 = strtol (D.40343_34, 0B, 10);

Updating SSA information for statement D.48278 = D.48279_68;

Updating SSA information for statement ptime_35 = D.48278;



Registering new PHI nodes in block #24

Updating SSA information for statement D.40336_36 = attr_3->a_name;

Updating SSA information for statement D.40353_37 = strcasecmp (D.40336_36, "maxptime");



Registering new PHI nodes in block #25

Updating SSA information for statement D.40343_38 = attr_3->a_value;



Registering new PHI nodes in block #26

Updating SSA information for statement attr_39 = attr_3->a_next;



Registering new PHI nodes in block #28

Updating SSA information for statement map_40 = m_1->m_rtpmaps;



Registering new PHI nodes in block #29

Updating SSA information for statement D.40358_41 = a_engine_13->cur_payload_map;

Updating SSA information for statement D.40359_42 = map_40->rm_encoding;

Updating SSA information for statement D.40360_43 = switch_core_perform_session_strdup (session_11(D), D.40359_42, "src/switch_core_media.c", &__func__, 8527);

Updating SSA information for statement D.40358_41->iananame = D.40360_43;

Updating SSA information for statement D.40358_44 = a_engine_13->cur_payload_map;

Updating SSA information for statement D.40361_45 = map_40->rm_rate;

Updating SSA information for statement D.40358_44->rm_rate = D.40361_45;

Updating SSA information for statement D.40358_46 = a_engine_13->cur_payload_map;

Updating SSA information for statement D.40361_47 = map_40->rm_rate;

Updating SSA information for statement D.40358_46->adv_rm_rate = D.40361_47;

Updating SSA information for statement D.40358_48 = a_engine_13->cur_payload_map;

Updating SSA information for statement D.40358_48->codec_ms = ptime.4_49;

Updating SSA information for statement D.40363_50 = smh_12->mparams;

Updating SSA information for statement D.40364_51 = D.40363_50->codec_flags;

Updating SSA information for statement switch_core_media_set_codec (session_11(D), 0, D.40364_51);



Registering new PHI nodes in block #30

Updating SSA information for statement m_52 = m_1->m_next;



Registering new PHI nodes in block #32

Updating SSA information for statement sdp_parser_free (parser_17);



Registering new PHI nodes in block #33



Symbols to be put in SSA form

{ .MEM D.48271 D.48275 D.48278 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 34
Number of blocks to update: 33 ( 97%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 


Scope blocks after cleanups:

{ Scope block #0 
  struct sdp_media_t * m;
  struct sdp_parser_t * parser;
  struct sdp_session_t * sdp;
  struct sdp_attribute_t * attr;
  int ptime;
  int dptime;
  struct switch_rtp_engine_t * a_engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_proxy_codec";
  static const char __func__[30] = "switch_core_media_proxy_codec";

  { Scope block #481 src/switch_core_media.c:8506 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #482 Originating from :#0 

    }

  }

  { Scope block #483 src/switch_core_media.c:8501 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #484 Originating from :#0 

    }

  }

  { Scope block #485 
    struct sdp_rtpmap_t * map;

    { Scope block #486 src/switch_core_media.c:8520 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #487 Originating from :#0 

      }

    }

  }

}
switch_core_media_proxy_codec (struct switch_core_session_t * session, const char * r_sdp)
{
  int D.48279;
  int D.48278;
  int D.48276;
  int D.48275;
  int D.48273;
  const char D.48272;
  int D.48271;
  struct sdp_rtpmap_t * map;
  static const char __func__[30] = "switch_core_media_proxy_codec";
  static const char __PRETTY_FUNCTION__[30] = "switch_core_media_proxy_codec";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * a_engine;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  struct sdp_media_t * m;
  uint32_t D.40364;
  struct switch_core_media_params_t * D.40363;
  uint32_t ptime.4;
  long unsigned int D.40361;
  char * D.40360;
  const char * D.40359;
  struct payload_map_t * D.40358;
  int D.40353;
  int D.40347;
  sdp_proto_e D.40344;
  const char * D.40343;
  int D.40340;
  int D.40337;
  const char * D.40336;
  int D.40331;
  size_t D.40330;

<bb 2>:
  parser_8 = 0B;
  # DEBUG parser => parser_8
  ptime_9 = 0;
  # DEBUG ptime => ptime_9
  dptime_10 = 0;
  # DEBUG dptime => dptime_10
  if (session_11(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8482, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_12 = session_11(D)->media_handle;
  # DEBUG smh => smh_12
  if (smh_12 == 0B)
    goto <bb 33>;
  else
    goto <bb 5>;

<bb 5>:
  a_engine_13 = &smh_12->engines;
  # DEBUG a_engine => a_engine_13
  D.40330_15 = strlen (r_sdp_14(D));
  D.40331_16 = (int) D.40330_15;
  parser_17 = sdp_parse (0B, r_sdp_14(D), D.40331_16, 0);
  # DEBUG parser => parser_17
  if (parser_17 == 0B)
    goto <bb 33>;
  else
    goto <bb 6>;

<bb 6>:
  sdp_18 = sdp_session (parser_17);
  # DEBUG sdp => sdp_18
  if (sdp_18 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  sdp_parser_free (parser_17);
  goto <bb 33>;

<bb 8>:
  attr_19 = sdp_18->sdp_attributes;
  # DEBUG attr => attr_19
  goto <bb 17>;

<bb 9>:
  D.40336_20 = attr_2->a_name;
  # DEBUG s => D.40336_20
  if (D.40336_20 == 0B)
    goto <bb 12>;
  else
    goto <bb 10>;

<bb 10>:
  D.48272_65 = *D.40336_20;
  if (D.48272_65 == 0)
    goto <bb 12>;
  else
    goto <bb 11>;

<bb 11>:

<bb 12>:
  # D.48273_66 = PHI <1(9), 1(10), 0(11)>
  D.48271_73 = D.48273_66;
  D.40337_21 = D.48271_73;
  if (D.40337_21 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

<bb 13>:
  // predicted unlikely by continue predictor.
  goto <bb 16>;

<bb 14>:
  D.40336_22 = attr_2->a_name;
  D.40340_23 = strcasecmp (D.40336_22, "ptime");
  if (D.40340_23 == 0)
    goto <bb 15>;
  else
    goto <bb 16>;

<bb 15>:
  D.40343_24 = attr_2->a_value;
  # DEBUG __nptr => D.40343_24
  D.48276_67 = strtol (D.40343_24, 0B, 10);
  D.48275_75 = D.48276_67;
  dptime_25 = D.48275_75;
  # DEBUG dptime => NULL

<bb 16>:
  # dptime_6 = PHI <dptime_7(13), dptime_7(14), dptime_25(15)>
  # DEBUG dptime => dptime_6
  attr_26 = attr_2->a_next;
  # DEBUG attr => attr_26

<bb 17>:
  # attr_2 = PHI <attr_19(8), attr_26(16)>
  # dptime_7 = PHI <dptime_10(8), dptime_6(16)>
  # DEBUG dptime => dptime_7
  # DEBUG attr => attr_2
  if (attr_2 != 0B)
    goto <bb 9>;
  else
    goto <bb 18>;

<bb 18>:
  m_27 = sdp_18->sdp_media;
  # DEBUG m => m_27
  goto <bb 31>;

<bb 19>:
  ptime_28 = dptime_7;
  # DEBUG ptime => ptime_28
  D.40344_29 = m_1->m_proto;
  if (D.40344_29 == 256)
    goto <bb 20>;
  else
    goto <bb 30>;

<bb 20>:
  attr_30 = m_1->m_attributes;
  # DEBUG attr => attr_30
  goto <bb 27>;

<bb 21>:
  D.40336_31 = attr_3->a_name;
  D.40347_32 = strcasecmp (D.40336_31, "ptime");
  if (D.40347_32 == 0)
    goto <bb 22>;
  else
    goto <bb 26>;

<bb 22>:
  D.40343_33 = attr_3->a_value;
  if (D.40343_33 != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

<bb 23>:
  D.40343_34 = attr_3->a_value;
  # DEBUG __nptr => D.40343_34
  D.48279_68 = strtol (D.40343_34, 0B, 10);
  D.48278_77 = D.48279_68;
  ptime_35 = D.48278_77;
  # DEBUG ptime => NULL
  goto <bb 26>;

<bb 24>:
  D.40336_36 = attr_3->a_name;
  D.40353_37 = strcasecmp (D.40336_36, "maxptime");
  if (D.40353_37 == 0)
    goto <bb 25>;
  else
    goto <bb 26>;

<bb 25>:
  D.40343_38 = attr_3->a_value;

<bb 26>:
  # ptime_4 = PHI <ptime_5(21), ptime_35(23), ptime_5(24), ptime_5(25)>
  # DEBUG ptime => ptime_4
  attr_39 = attr_3->a_next;
  # DEBUG attr => attr_39

<bb 27>:
  # attr_3 = PHI <attr_30(20), attr_39(26)>
  # ptime_5 = PHI <ptime_28(20), ptime_4(26)>
  # DEBUG ptime => ptime_5
  # DEBUG attr => attr_3
  if (attr_3 != 0B)
    goto <bb 21>;
  else
    goto <bb 28>;

<bb 28>:
  map_40 = m_1->m_rtpmaps;
  # DEBUG map => map_40
  if (map_40 != 0B)
    goto <bb 29>;
  else
    goto <bb 32>;

<bb 29>:
  D.40358_41 = a_engine_13->cur_payload_map;
  D.40359_42 = map_40->rm_encoding;
  D.40360_43 = switch_core_perform_session_strdup (session_11(D), D.40359_42, "src/switch_core_media.c", &__func__, 8527);
  D.40358_41->iananame = D.40360_43;
  D.40358_44 = a_engine_13->cur_payload_map;
  D.40361_45 = map_40->rm_rate;
  D.40358_44->rm_rate = D.40361_45;
  D.40358_46 = a_engine_13->cur_payload_map;
  D.40361_47 = map_40->rm_rate;
  D.40358_46->adv_rm_rate = D.40361_47;
  D.40358_48 = a_engine_13->cur_payload_map;
  ptime.4_49 = (uint32_t) ptime_5;
  D.40358_48->codec_ms = ptime.4_49;
  D.40363_50 = smh_12->mparams;
  D.40364_51 = D.40363_50->codec_flags;
  switch_core_media_set_codec (session_11(D), 0, D.40364_51);
  goto <bb 32>;

<bb 30>:
  m_52 = m_1->m_next;
  # DEBUG m => m_52

<bb 31>:
  # m_1 = PHI <m_27(18), m_52(30)>
  # DEBUG m => m_1
  if (m_1 != 0B)
    goto <bb 19>;
  else
    goto <bb 32>;

<bb 32>:
  sdp_parser_free (parser_17);

<bb 33>:
  return;

}



;; Function switch_core_media_recover_session (switch_core_media_recover_session)

Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Processing frequency atoi
  Called by switch_core_media_recover_session that is normal or hot
Considering to always inline inline candidate atoi.
 Inlining atoi into switch_core_media_recover_session.
Considering inline candidate switch_core_media_ready.
Not inlining: code size would grow by 9.
Considering inline candidate switch_core_media_add_crypto.
Not inlining: code size would grow by 80.
Considering inline candidate switch_core_media_add_crypto.
Not inlining: code size would grow by 80.
Considering inline candidate switch_core_session_get_recovery_crypto_key.
Not inlining: code size would grow by 55.
Considering inline candidate switch_core_session_get_recovery_crypto_key.
Not inlining: code size would grow by 55.
Considering inline candidate switch_core_media_activate_rtp.
Not inlining: code size would grow by 2489.
Considering inline candidate switch_core_media_set_video_codec.
Not inlining: code size would grow by 268.
Considering inline candidate switch_core_media_gen_local_sdp.
Not inlining: code size would grow by 2912.
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_recover_session.
Processing frequency _zstr
  Called by switch_core_media_recover_session that is normal or hot
Considering inline candidate _zstr.
 Inlining _zstr into switch_core_media_recover_session.
Processing frequency _zstr
  Called by switch_core_media_recover_session that is normal or hot
Considering inline candidate switch_core_media_set_codec.
Not inlining: code size would grow by 487.
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining _zstr to switch_core_media_recover_session with frequency 1000
Inlining _zstr to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Inlining atoi to switch_core_media_recover_session with frequency 1000
Considering inline candidate switch_core_media_ready.
Not inlining: code size would grow by 9.
Considering inline candidate switch_core_media_add_crypto.
Not inlining: code size would grow by 80.
Considering inline candidate switch_core_media_add_crypto.
Not inlining: code size would grow by 80.
Considering inline candidate switch_core_session_get_recovery_crypto_key.
Not inlining: code size would grow by 55.
Considering inline candidate switch_core_session_get_recovery_crypto_key.
Not inlining: code size would grow by 55.
Considering inline candidate switch_core_media_activate_rtp.
Not inlining: code size would grow by 2489.
Considering inline candidate switch_core_media_set_video_codec.
Not inlining: code size would grow by 268.
Considering inline candidate switch_core_media_gen_local_sdp.
Not inlining: code size would grow by 2912.
Considering inline candidate switch_core_media_set_codec.
Not inlining: code size would grow by 487.
Iterations: 1
Merging blocks 20 and 56
Merging blocks 22 and 58
Merging blocks 24 and 60
Merging blocks 26 and 62
Merging blocks 28 and 64
Merging blocks 30 and 66
Merging blocks 31 and 68
Merging blocks 33 and 75
Merging blocks 36 and 80
Merging blocks 39 and 82
Merging blocks 41 and 84
Merging blocks 43 and 86
Merging blocks 45 and 88
Merging blocks 46 and 90
Merging blocks 47 and 92
Removing basic block 51
;; basic block 51, loop depth 0, count 0
;; prev block 50, next block 94
;; pred:      
;; succ:       94 [100.0%]  (fallthru,exec)
<bb 51>:


Merging blocks 67 and 70
Merging blocks 73 and 69
Merging blocks 78 and 74
Merging blocks 94 and 93
Merging blocks 20 and 55
Merging blocks 22 and 57
Merging blocks 24 and 59
Merging blocks 26 and 61
Merging blocks 28 and 63
Merging blocks 30 and 65
Merging blocks 31 and 67
Merging blocks 36 and 79
Merging blocks 39 and 81
Merging blocks 41 and 83
Merging blocks 43 and 85
Merging blocks 45 and 87
Merging blocks 46 and 89
Merging blocks 47 and 91


Registering new PHI nodes in block #0



Registering new PHI nodes in block #2



Registering new PHI nodes in block #3

Updating SSA information for statement __assert_fail ("session", "src/switch_core_media.c", 8557, &__PRETTY_FUNCTION__);



Registering new PHI nodes in block #4

Updating SSA information for statement smh_4 = session_3(D)->media_handle;



Registering new PHI nodes in block #5

Updating SSA information for statement D.40154_5 = session_3(D)->channel;

Updating SSA information for statement ip_6 = switch_channel_get_variable_dup (D.40154_5, "local_media_ip", 1, -1);

Updating SSA information for statement D.40154_7 = session_3(D)->channel;

Updating SSA information for statement port_8 = switch_channel_get_variable_dup (D.40154_7, "local_media_port", 1, -1);

Updating SSA information for statement D.40154_9 = session_3(D)->channel;

Updating SSA information for statement D.40157_10 = switch_channel_test_flag (D.40154_9, 15);



Registering new PHI nodes in block #6



Registering new PHI nodes in block #7

Updating SSA information for statement D.40154_14 = session_3(D)->channel;

Updating SSA information for statement a_ip_15 = switch_channel_get_variable_dup (D.40154_14, "advertised_media_ip", 1, -1);

Updating SSA information for statement D.40154_16 = session_3(D)->channel;

Updating SSA information for statement r_ip_17 = switch_channel_get_variable_dup (D.40154_16, "remote_media_ip", 1, -1);

Updating SSA information for statement D.40154_18 = session_3(D)->channel;

Updating SSA information for statement r_port_19 = switch_channel_get_variable_dup (D.40154_18, "remote_media_port", 1, -1);

Updating SSA information for statement D.40162_22 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40162_23 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40154_24 = session_3(D)->channel;

Updating SSA information for statement D.40163_25 = switch_channel_get_variable_dup (D.40154_24, "rtp_use_codec_name", 1, -1);

Updating SSA information for statement D.40162_23->rm_encoding = D.40163_25;

Updating SSA information for statement D.40164_26 = D.40162_23->rm_encoding;

Updating SSA information for statement D.40162_23->iananame = D.40164_26;

Updating SSA information for statement D.40162_27 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40154_28 = session_3(D)->channel;

Updating SSA information for statement D.40165_29 = switch_channel_get_variable_dup (D.40154_28, "rtp_use_codec_fmtp", 1, -1);

Updating SSA information for statement D.40162_27->rm_fmtp = D.40165_29;

Updating SSA information for statement D.40154_30 = session_3(D)->channel;

Updating SSA information for statement tmp_31 = switch_channel_get_variable_dup (D.40154_30, "switch_r_sdp", 1, -1);



Registering new PHI nodes in block #8

Updating SSA information for statement D.40168_32 = smh_4->mparams;

Updating SSA information for statement D.40169_33 = switch_core_perform_session_strdup (session_3(D), tmp_31, "src/switch_core_media.c", &__func__, 8581);

Updating SSA information for statement D.40168_32->remote_sdp_str = D.40169_33;



Registering new PHI nodes in block #9

Updating SSA information for statement D.40154_34 = session_3(D)->channel;

Updating SSA information for statement tmp_35 = switch_channel_get_variable_dup (D.40154_34, "rtp_last_audio_codec_string", 1, -1);



Registering new PHI nodes in block #10

Updating SSA information for statement D.40154_36 = session_3(D)->channel;

Updating SSA information for statement vtmp_37 = switch_channel_get_variable_dup (D.40154_36, "rtp_last_video_codec_string", 1, -1);

Updating SSA information for statement D.40154_38 = session_3(D)->channel;



Registering new PHI nodes in block #11



Registering new PHI nodes in block #12



Registering new PHI nodes in block #13



Registering new PHI nodes in block #14



Registering new PHI nodes in block #15



Registering new PHI nodes in block #16

Updating SSA information for statement switch_channel_set_variable_printf (D.40154_38, "rtp_use_codec_string", "%s%s%s", tmp_35, iftmp.0_1, iftmp.1_2);



Registering new PHI nodes in block #17

Updating SSA information for statement D.40154_43 = session_3(D)->channel;

Updating SSA information for statement tmp_44 = switch_channel_get_variable_dup (D.40154_43, "rtp_use_codec_string", 1, -1);



Registering new PHI nodes in block #18

Updating SSA information for statement D.40182_45 = smh_4->session;

Updating SSA information for statement tmp_codec_string_46 = switch_core_perform_session_strdup (D.40182_45, tmp_44, "src/switch_core_media.c", &__func__, 8591);

Updating SSA information for statement D.40184_48 = switch_separate_string (tmp_codec_string_46, 44, D.40183_47, 50);

Updating SSA information for statement smh_4->codec_order_last = D.40185_49;

Updating SSA information for statement D.40168_50 = smh_4->mparams;

Updating SSA information for statement D.40187_53 = smh_4->codec_order_last;

Updating SSA information for statement D.40188_54 = switch_loadable_module_get_codecs_sorted (D.40186_51, 50, D.40183_52, D.40187_53);

Updating SSA information for statement D.40168_50->num_codecs = D.40188_54;



Registering new PHI nodes in block #19

Updating SSA information for statement D.40154_55 = session_3(D)->channel;

Updating SSA information for statement tmp_56 = switch_channel_get_variable_dup (D.40154_55, "rtp_2833_send_payload", 1, -1);



Registering new PHI nodes in block #20

Updating SSA information for statement D.40168_57 = smh_4->mparams;

Updating SSA information for statement D.48283_317 = strtol (tmp_56, 0B, 10);

Updating SSA information for statement D.48282 = D.48283_317;

Updating SSA information for statement D.40191_58 = D.48282;

Updating SSA information for statement D.40168_57->te = D.40192_59;



Registering new PHI nodes in block #21

Updating SSA information for statement D.40154_60 = session_3(D)->channel;

Updating SSA information for statement tmp_61 = switch_channel_get_variable_dup (D.40154_60, "rtp_2833_recv_payload", 1, -1);



Registering new PHI nodes in block #22

Updating SSA information for statement D.40168_62 = smh_4->mparams;

Updating SSA information for statement D.48286_318 = strtol (tmp_61, 0B, 10);

Updating SSA information for statement D.48285 = D.48286_318;

Updating SSA information for statement D.40195_63 = D.48285;

Updating SSA information for statement D.40168_62->recv_te = D.40196_64;



Registering new PHI nodes in block #23

Updating SSA information for statement D.40154_65 = session_3(D)->channel;

Updating SSA information for statement tmp_66 = switch_channel_get_variable_dup (D.40154_65, "rtp_use_codec_rate", 1, -1);



Registering new PHI nodes in block #24

Updating SSA information for statement D.40162_67 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.48289_319 = strtol (tmp_66, 0B, 10);

Updating SSA information for statement D.48288 = D.48289_319;

Updating SSA information for statement D.40199_68 = D.48288;

Updating SSA information for statement D.40162_67->rm_rate = D.40200_69;

Updating SSA information for statement D.40162_70 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40162_71 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40201_72 = D.40162_71->rm_rate;

Updating SSA information for statement D.40162_71->adv_rm_rate = D.40201_72;



Registering new PHI nodes in block #25

Updating SSA information for statement D.40154_73 = session_3(D)->channel;

Updating SSA information for statement tmp_74 = switch_channel_get_variable_dup (D.40154_73, "rtp_use_codec_ptime", 1, -1);



Registering new PHI nodes in block #26

Updating SSA information for statement D.40162_75 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.48292_320 = strtol (tmp_74, 0B, 10);

Updating SSA information for statement D.48291 = D.48292_320;

Updating SSA information for statement D.40204_76 = D.48291;

Updating SSA information for statement D.40162_75->codec_ms = D.40205_77;



Registering new PHI nodes in block #27

Updating SSA information for statement D.40154_78 = session_3(D)->channel;

Updating SSA information for statement tmp_79 = switch_channel_get_variable_dup (D.40154_78, "rtp_use_pt", 1, -1);



Registering new PHI nodes in block #28

Updating SSA information for statement D.40162_80 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40162_81 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.48295_321 = strtol (tmp_79, 0B, 10);

Updating SSA information for statement D.48294 = D.48295_321;

Updating SSA information for statement D.40208_82 = D.48294;

Updating SSA information for statement D.40162_81->agreed_pt = D.40209_83;

Updating SSA information for statement D.40210_84 = D.40162_81->agreed_pt;

Updating SSA information for statement D.40162_81->pt = D.40210_84;



Registering new PHI nodes in block #29

Updating SSA information for statement D.40154_85 = session_3(D)->channel;

Updating SSA information for statement tmp_86 = switch_channel_get_variable_dup (D.40154_85, "rtp_audio_recv_pt", 1, -1);



Registering new PHI nodes in block #30

Updating SSA information for statement D.40162_87 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.48298_322 = strtol (tmp_86, 0B, 10);

Updating SSA information for statement D.48297 = D.48298_322;

Updating SSA information for statement D.40213_88 = D.48297;

Updating SSA information for statement D.40162_87->recv_pt = D.40214_89;



Registering new PHI nodes in block #31

Updating SSA information for statement D.40168_90 = smh_4->mparams;

Updating SSA information for statement D.40215_91 = D.40168_90->codec_flags;

Updating SSA information for statement switch_core_media_set_codec (session_3(D), 1, D.40215_91);

Updating SSA information for statement D.40168_92 = smh_4->mparams;

Updating SSA information for statement D.40168_92->extrtpip = ip_6;

Updating SSA information for statement D.40216_93 = D.40168_92->extrtpip;

Updating SSA information for statement a_engine_20->adv_sdp_ip = D.40216_93;

Updating SSA information for statement D.48301_323 = strtol (port_8, 0B, 10);

Updating SSA information for statement D.48300 = D.48301_323;

Updating SSA information for statement D.40217_94 = D.48300;

Updating SSA information for statement a_engine_20->local_sdp_port = D.40218_95;

Updating SSA information for statement D.40219_96 = a_engine_20->local_sdp_port;

Updating SSA information for statement a_engine_20->adv_sdp_port = D.40219_96;



Registering new PHI nodes in block #32

Updating SSA information for statement D.48304_324 = *ip_6;



Registering new PHI nodes in block #33



Registering new PHI nodes in block #34

Updating SSA information for statement D.48303 = D.48305_325;

Updating SSA information for statement D.40220_97 = D.48303;



Registering new PHI nodes in block #35

Updating SSA information for statement D.40223_98 = switch_core_perform_session_strdup (session_3(D), ip_6, "src/switch_core_media.c", &__func__, 8627);

Updating SSA information for statement a_engine_20->local_sdp_ip = D.40223_98;

Updating SSA information for statement D.40168_99 = smh_4->mparams;

Updating SSA information for statement D.40224_100 = a_engine_20->local_sdp_ip;

Updating SSA information for statement D.40168_99->rtpip = D.40224_100;



Registering new PHI nodes in block #36



Registering new PHI nodes in block #37

Updating SSA information for statement D.48308_326 = *a_ip_15;



Registering new PHI nodes in block #38



Registering new PHI nodes in block #39

Updating SSA information for statement D.48307 = D.48309_327;

Updating SSA information for statement D.40225_101 = D.48307;



Registering new PHI nodes in block #40

Updating SSA information for statement D.40228_102 = switch_core_perform_session_strdup (session_3(D), a_ip_15, "src/switch_core_media.c", &__func__, 8632);

Updating SSA information for statement a_engine_20->adv_sdp_ip = D.40228_102;



Registering new PHI nodes in block #41



Registering new PHI nodes in block #42

Updating SSA information for statement D.40162_106 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.40162_106->remote_sdp_ip = r_ip_17;

Updating SSA information for statement D.40162_107 = a_engine_20->cur_payload_map;

Updating SSA information for statement D.48312_328 = strtol (r_port_19, 0B, 10);

Updating SSA information for statement D.48311 = D.48312_328;

Updating SSA information for statement D.40234_108 = D.48311;

Updating SSA information for statement D.40162_107->remote_sdp_port = D.40235_109;



Registering new PHI nodes in block #43

Updating SSA information for statement D.40154_110 = session_3(D)->channel;

Updating SSA information for statement D.40236_111 = switch_channel_test_flag (D.40154_110, 23);



Registering new PHI nodes in block #44

Updating SSA information for statement D.40154_112 = session_3(D)->channel;

Updating SSA information for statement tmp_113 = switch_channel_get_variable_dup (D.40154_112, "rtp_use_video_pt", 1, -1);



Registering new PHI nodes in block #45

Updating SSA information for statement D.40241_114 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40241_115 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.48315_329 = strtol (tmp_113, 0B, 10);

Updating SSA information for statement D.48314 = D.48315_329;

Updating SSA information for statement D.40242_116 = D.48314;

Updating SSA information for statement D.40241_115->agreed_pt = D.40243_117;

Updating SSA information for statement D.40244_118 = D.40241_115->agreed_pt;

Updating SSA information for statement D.40241_115->pt = D.40244_118;



Registering new PHI nodes in block #46

Updating SSA information for statement D.40154_119 = session_3(D)->channel;

Updating SSA information for statement tmp_120 = switch_channel_get_variable_dup (D.40154_119, "rtp_video_recv_pt", 1, -1);



Registering new PHI nodes in block #47

Updating SSA information for statement D.40241_121 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.48318_330 = strtol (tmp_120, 0B, 10);

Updating SSA information for statement D.48317 = D.48318_330;

Updating SSA information for statement D.40247_122 = D.48317;

Updating SSA information for statement D.40241_121->recv_pt = D.40248_123;



Registering new PHI nodes in block #48

Updating SSA information for statement D.40241_124 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40154_125 = session_3(D)->channel;

Updating SSA information for statement D.40249_126 = switch_channel_get_variable_dup (D.40154_125, "rtp_use_video_codec_name", 1, -1);

Updating SSA information for statement D.40241_124->rm_encoding = D.40249_126;

Updating SSA information for statement D.40241_127 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40154_128 = session_3(D)->channel;

Updating SSA information for statement D.40250_129 = switch_channel_get_variable_dup (D.40154_128, "rtp_use_video_codec_fmtp", 1, -1);

Updating SSA information for statement D.40241_127->rm_fmtp = D.40250_129;

Updating SSA information for statement D.40154_130 = session_3(D)->channel;

Updating SSA information for statement ip_131 = switch_channel_get_variable_dup (D.40154_130, "local_video_ip", 1, -1);

Updating SSA information for statement D.40154_132 = session_3(D)->channel;

Updating SSA information for statement port_133 = switch_channel_get_variable_dup (D.40154_132, "local_video_port", 1, -1);

Updating SSA information for statement D.40154_134 = session_3(D)->channel;

Updating SSA information for statement r_ip_135 = switch_channel_get_variable_dup (D.40154_134, "remote_video_ip", 1, -1);

Updating SSA information for statement D.40154_136 = session_3(D)->channel;

Updating SSA information for statement r_port_137 = switch_channel_get_variable_dup (D.40154_136, "remote_video_port", 1, -1);

Updating SSA information for statement D.40154_138 = session_3(D)->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40154_138, 98, 1);

Updating SSA information for statement D.40154_139 = session_3(D)->channel;

Updating SSA information for statement tmp_140 = switch_channel_get_variable_dup (D.40154_139, "rtp_use_video_codec_rate", 1, -1);



Registering new PHI nodes in block #49

Updating SSA information for statement D.40241_141 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.48321_331 = strtol (tmp_140, 0B, 10);

Updating SSA information for statement D.48320 = D.48321_331;

Updating SSA information for statement D.40253_142 = D.48320;

Updating SSA information for statement D.40241_141->rm_rate = D.40254_143;

Updating SSA information for statement D.40241_144 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40241_145 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40255_146 = D.40241_145->rm_rate;

Updating SSA information for statement D.40241_145->adv_rm_rate = D.40255_146;



Registering new PHI nodes in block #50

Updating SSA information for statement D.40154_147 = session_3(D)->channel;

Updating SSA information for statement tmp_148 = switch_channel_get_variable_dup (D.40154_147, "rtp_use_video_codec_ptime", 1, -1);



Registering new PHI nodes in block #51

Updating SSA information for statement D.40241_149 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.48324_332 = strtol (tmp_148, 0B, 10);

Updating SSA information for statement D.48323 = D.48324_332;

Updating SSA information for statement D.40258_150 = D.48323;

Updating SSA information for statement D.40241_149->codec_ms = D.40259_151;



Registering new PHI nodes in block #52

Updating SSA information for statement D.48327_333 = strtol (port_133, 0B, 10);

Updating SSA information for statement D.48326 = D.48327_333;

Updating SSA information for statement D.40260_152 = D.48326;

Updating SSA information for statement v_engine_21->local_sdp_port = D.40261_153;

Updating SSA information for statement D.40262_154 = v_engine_21->local_sdp_port;

Updating SSA information for statement v_engine_21->adv_sdp_port = D.40262_154;



Registering new PHI nodes in block #53

Updating SSA information for statement D.40241_158 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.40241_158->remote_sdp_ip = r_ip_135;

Updating SSA information for statement D.40241_159 = v_engine_21->cur_payload_map;

Updating SSA information for statement D.48330_334 = strtol (r_port_137, 0B, 10);

Updating SSA information for statement D.48329 = D.48330_334;

Updating SSA information for statement D.40265_160 = D.48329;

Updating SSA information for statement D.40241_159->remote_sdp_port = D.40266_161;



Registering new PHI nodes in block #54

Updating SSA information for statement switch_core_media_gen_local_sdp (session_3(D), 0, 0B, 0, 0B, 1);

Updating SSA information for statement switch_core_media_set_video_codec (session_3(D), 1);

Updating SSA information for statement D.40267_162 = switch_core_media_activate_rtp (session_3(D));



Registering new PHI nodes in block #55

Updating SSA information for statement switch_core_session_get_recovery_crypto_key (session_3(D), 0);

Updating SSA information for statement switch_core_session_get_recovery_crypto_key (session_3(D), 1);

Updating SSA information for statement D.40154_163 = session_3(D)->channel;

Updating SSA information for statement tmp_164 = switch_channel_get_variable_dup (D.40154_163, "rtp_last_audio_local_crypto_key", 1, -1);



Registering new PHI nodes in block #56

Updating SSA information for statement D.40272_165 = a_engine_20->crypto_type;

Updating SSA information for statement D.40273_166 = a_engine_20->ssec[D.40272_165].remote_crypto_key;



Registering new PHI nodes in block #57

Updating SSA information for statement D.48333_335 = strtol (tmp_164, 0B, 10);

Updating SSA information for statement D.48332 = D.48333_335;

Updating SSA information for statement idx_167 = D.48332;

Updating SSA information for statement D.40272_168 = a_engine_20->crypto_type;

Updating SSA information for statement D.40276_169 = switch_core_perform_session_strdup (session_3(D), tmp_164, "src/switch_core_media.c", &__func__, 8690);

Updating SSA information for statement a_engine_20->ssec[D.40272_168].local_crypto_key = D.40276_169;

Updating SSA information for statement D.40272_171 = a_engine_20->crypto_type;

Updating SSA information for statement D.40272_174 = a_engine_20->crypto_type;

Updating SSA information for statement D.40280_175 = a_engine_20->ssec[D.40272_174].local_crypto_key;

Updating SSA information for statement switch_core_media_add_crypto (D.40279_173, D.40280_175, 0);

Updating SSA information for statement D.40272_177 = a_engine_20->crypto_type;

Updating SSA information for statement D.40272_180 = a_engine_20->crypto_type;

Updating SSA information for statement D.40273_181 = a_engine_20->ssec[D.40272_180].remote_crypto_key;

Updating SSA information for statement switch_core_media_add_crypto (D.40279_179, D.40273_181, 1);

Updating SSA information for statement D.40182_182 = smh_4->session;

Updating SSA information for statement D.40281_183 = D.40182_182->channel;

Updating SSA information for statement switch_channel_set_flag_value (D.40281_183, 92, 1);

Updating SSA information for statement D.40282_184 = a_engine_20->rtp_session;

Updating SSA information for statement D.40272_186 = a_engine_20->crypto_type;

Updating SSA information for statement D.40272_187 = a_engine_20->crypto_type;

Updating SSA information for statement D.40272_189 = a_engine_20->crypto_type;

Updating SSA information for statement D.40285_190 = SUITES[D.40272_189].keylen;

Updating SSA information for statement switch_rtp_add_crypto_key (D.40282_184, 0, idx.2_185, D.40272_189, D.40284_188, D.40286_191);

Updating SSA information for statement D.40282_192 = a_engine_20->rtp_session;

Updating SSA information for statement D.40272_193 = a_engine_20->crypto_type;

Updating SSA information for statement D.40287_194 = a_engine_20->ssec[D.40272_193].crypto_tag;

Updating SSA information for statement D.40272_196 = a_engine_20->crypto_type;

Updating SSA information for statement D.40272_197 = a_engine_20->crypto_type;

Updating SSA information for statement D.40272_199 = a_engine_20->crypto_type;

Updating SSA information for statement D.40285_200 = SUITES[D.40272_199].keylen;

Updating SSA information for statement switch_rtp_add_crypto_key (D.40282_192, 1, D.40288_195, D.40272_199, D.40289_198, D.40286_201);



Registering new PHI nodes in block #58

Updating SSA information for statement D.40290_202 = switch_core_media_ready (session_3(D), 0);



Registering new PHI nodes in block #59

Updating SSA information for statement D.40282_203 = a_engine_20->rtp_session;

Updating SSA information for statement D.40168_204 = smh_4->mparams;

Updating SSA information for statement D.40293_205 = D.40168_204->te;

Updating SSA information for statement switch_rtp_set_telephony_event (D.40282_203, D.40293_205);

Updating SSA information for statement D.40282_206 = a_engine_20->rtp_session;

Updating SSA information for statement D.40168_207 = smh_4->mparams;

Updating SSA information for statement D.40294_208 = D.40168_207->recv_te;

Updating SSA information for statement switch_rtp_set_telephony_recv_event (D.40282_206, D.40294_208);



Registering new PHI nodes in block #60



Symbols to be put in SSA form

{ .MEM D.48282 D.48285 D.48288 D.48291 D.48294 D.48297 D.48300 D.48303 D.48307 D.48311 D.48314 D.48317 D.48320 D.48323 D.48326 D.48329 D.48332 }


Incremental SSA update started at block: 0

Number of blocks in CFG: 61
Number of blocks to update: 60 ( 98%)

Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 


Scope blocks after cleanups:

{ Scope block #0 
  const char * ip;
  const char * port;
  const char * a_ip;
  const char * r_ip;
  const char * r_port;
  const char * tmp;
  struct switch_rtp_engine_t * a_engine;
  struct switch_rtp_engine_t * v_engine;
  struct switch_media_handle_t * smh;
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_recover_session";
  static const char __func__[34] = "switch_core_media_recover_session";

  { Scope block #488 src/switch_core_media.c:8672 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #489 Originating from :#0 

    }

  }

  { Scope block #490 src/switch_core_media.c:8668 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #491 Originating from :#0 

    }

  }

  { Scope block #492 src/switch_core_media.c:8665 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #493 Originating from :#0 

    }

  }

  { Scope block #494 src/switch_core_media.c:8660 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #495 Originating from :#0 

    }

  }

  { Scope block #496 src/switch_core_media.c:8646 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #497 Originating from :#0 

    }

  }

  { Scope block #498 src/switch_core_media.c:8642 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #499 Originating from :#0 

    }

  }

  { Scope block #500 src/switch_core_media.c:8637 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #501 Originating from :#0 

    }

  }

  { Scope block #502 src/switch_core_media.c:8631 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #503 Originating from :#0 

    }

  }

  { Scope block #504 src/switch_core_media.c:8626 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #505 Originating from :#0 

    }

  }

  { Scope block #506 src/switch_core_media.c:8624 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #507 Originating from :#0 

    }

  }

  { Scope block #508 src/switch_core_media.c:8618 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #509 Originating from :#0 

    }

  }

  { Scope block #510 src/switch_core_media.c:8614 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #511 Originating from :#0 

    }

  }

  { Scope block #512 src/switch_core_media.c:8610 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #513 Originating from :#0 

    }

  }

  { Scope block #514 src/switch_core_media.c:8605 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #515 Originating from :#0 

    }

  }

  { Scope block #516 src/switch_core_media.c:8601 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #517 Originating from :#0 

    }

  }

  { Scope block #518 src/switch_core_media.c:8597 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #519 Originating from :#0 

    }

  }

  { Scope block #520 
    const char * vtmp;

  }

  { Scope block #521 
    char * tmp_codec_string;

  }

  { Scope block #522 
    int idx;

    { Scope block #523 src/switch_core_media.c:8688 Originating from :  extern int atoi (const char *); 
      const char * __nptr; (unused)

      { Scope block #524 Originating from :#0 

      }

    }

  }

}
switch_core_media_recover_session (struct switch_core_session_t * session)
{
  int D.48333;
  int D.48332;
  int D.48330;
  int D.48329;
  int D.48327;
  int D.48326;
  int D.48324;
  int D.48323;
  int D.48321;
  int D.48320;
  int D.48318;
  int D.48317;
  int D.48315;
  int D.48314;
  int D.48312;
  int D.48311;
  int D.48309;
  const char D.48308;
  int D.48307;
  int D.48305;
  const char D.48304;
  int D.48303;
  int D.48301;
  int D.48300;
  int D.48298;
  int D.48297;
  int D.48295;
  int D.48294;
  int D.48292;
  int D.48291;
  int D.48289;
  int D.48288;
  int D.48286;
  int D.48285;
  int D.48283;
  int D.48282;
  int idx;
  char * tmp_codec_string;
  const char * vtmp;
  static const char __func__[34] = "switch_core_media_recover_session";
  static const char __PRETTY_FUNCTION__[34] = "switch_core_media_recover_session";
  struct switch_media_handle_t * smh;
  struct switch_rtp_engine_t * v_engine;
  struct switch_rtp_engine_t * a_engine;
  const char * tmp;
  const char * r_port;
  const char * r_ip;
  const char * a_ip;
  const char * port;
  const char * ip;
  switch_payload_t D.40294;
  switch_payload_t D.40293;
  uint8_t D.40290;
  unsigned char[64] * D.40289;
  uint32_t D.40288;
  int D.40287;
  switch_size_t D.40286;
  int D.40285;
  unsigned char[64] * D.40284;
  uint32_t idx.2;
  struct switch_rtp_t * D.40282;
  struct switch_channel_t * D.40281;
  char * D.40280;
  struct switch_secure_settings_t * D.40279;
  unsigned int D.40278;
  struct switch_secure_settings_t[10] * D.40277;
  char * D.40276;
  char * D.40273;
  switch_rtp_crypto_key_type_t D.40272;
  switch_status_t D.40267;
  short unsigned int D.40266;
  int D.40265;
  switch_port_t D.40262;
  short unsigned int D.40261;
  int D.40260;
  uint32_t D.40259;
  int D.40258;
  long unsigned int D.40255;
  long unsigned int D.40254;
  int D.40253;
  const char * D.40250;
  const char * D.40249;
  unsigned char D.40248;
  int D.40247;
  switch_payload_t D.40244;
  unsigned char D.40243;
  int D.40242;
  struct payload_map_t * D.40241;
  uint32_t D.40236;
  short unsigned int D.40235;
  int D.40234;
  _Bool D.40231;
  _Bool D.40230;
  _Bool D.40229;
  char * D.40228;
  int D.40225;
  char * D.40224;
  char * D.40223;
  int D.40220;
  switch_port_t D.40219;
  short unsigned int D.40218;
  int D.40217;
  char * D.40216;
  uint32_t D.40215;
  unsigned char D.40214;
  int D.40213;
  switch_payload_t D.40210;
  unsigned char D.40209;
  int D.40208;
  uint32_t D.40205;
  int D.40204;
  long unsigned int D.40201;
  long unsigned int D.40200;
  int D.40199;
  unsigned char D.40196;
  int D.40195;
  unsigned char D.40192;
  int D.40191;
  int D.40188;
  int D.40187;
  const struct switch_codec_implementation_t *[50] * D.40186;
  int D.40185;
  unsigned int D.40184;
  char *[50] * D.40183;
  struct switch_core_session_t * D.40182;
  const char * iftmp.1;
  char * iftmp.0;
  char * D.40169;
  struct switch_core_media_params_t * D.40168;
  const char * D.40165;
  char * D.40164;
  const char * D.40163;
  struct payload_map_t * D.40162;
  _Bool D.40161;
  _Bool D.40160;
  _Bool D.40159;
  uint32_t D.40157;
  struct switch_channel_t * D.40154;

<bb 2>:
  if (session_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 8557, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_4 = session_3(D)->media_handle;
  # DEBUG smh => smh_4
  if (smh_4 == 0B)
    goto <bb 60>;
  else
    goto <bb 5>;

<bb 5>:
  D.40154_5 = session_3(D)->channel;
  ip_6 = switch_channel_get_variable_dup (D.40154_5, "local_media_ip", 1, -1);
  # DEBUG ip => ip_6
  D.40154_7 = session_3(D)->channel;
  port_8 = switch_channel_get_variable_dup (D.40154_7, "local_media_port", 1, -1);
  # DEBUG port => port_8
  D.40154_9 = session_3(D)->channel;
  D.40157_10 = switch_channel_test_flag (D.40154_9, 15);
  if (D.40157_10 != 0)
    goto <bb 60>;
  else
    goto <bb 6>;

<bb 6>:
  D.40159_11 = ip_6 == 0B;
  D.40160_12 = port_8 == 0B;
  D.40161_13 = D.40159_11 || D.40160_12;
  if (D.40161_13 != 0)
    goto <bb 60>;
  else
    goto <bb 7>;

<bb 7>:
  D.40154_14 = session_3(D)->channel;
  a_ip_15 = switch_channel_get_variable_dup (D.40154_14, "advertised_media_ip", 1, -1);
  # DEBUG a_ip => a_ip_15
  D.40154_16 = session_3(D)->channel;
  r_ip_17 = switch_channel_get_variable_dup (D.40154_16, "remote_media_ip", 1, -1);
  # DEBUG r_ip => r_ip_17
  D.40154_18 = session_3(D)->channel;
  r_port_19 = switch_channel_get_variable_dup (D.40154_18, "remote_media_port", 1, -1);
  # DEBUG r_port => r_port_19
  a_engine_20 = &smh_4->engines;
  # DEBUG a_engine => a_engine_20
  v_engine_21 = &smh_4->engines[1];
  # DEBUG v_engine => v_engine_21
  D.40162_22 = a_engine_20->cur_payload_map;
  D.40162_23 = a_engine_20->cur_payload_map;
  D.40154_24 = session_3(D)->channel;
  D.40163_25 = switch_channel_get_variable_dup (D.40154_24, "rtp_use_codec_name", 1, -1);
  D.40162_23->rm_encoding = D.40163_25;
  D.40164_26 = D.40162_23->rm_encoding;
  D.40162_23->iananame = D.40164_26;
  D.40162_27 = a_engine_20->cur_payload_map;
  D.40154_28 = session_3(D)->channel;
  D.40165_29 = switch_channel_get_variable_dup (D.40154_28, "rtp_use_codec_fmtp", 1, -1);
  D.40162_27->rm_fmtp = D.40165_29;
  D.40154_30 = session_3(D)->channel;
  tmp_31 = switch_channel_get_variable_dup (D.40154_30, "switch_r_sdp", 1, -1);
  # DEBUG tmp => tmp_31
  if (tmp_31 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  D.40168_32 = smh_4->mparams;
  D.40169_33 = switch_core_perform_session_strdup (session_3(D), tmp_31, "src/switch_core_media.c", &__func__, 8581);
  D.40168_32->remote_sdp_str = D.40169_33;

<bb 9>:
  D.40154_34 = session_3(D)->channel;
  tmp_35 = switch_channel_get_variable_dup (D.40154_34, "rtp_last_audio_codec_string", 1, -1);
  # DEBUG tmp => tmp_35
  if (tmp_35 != 0B)
    goto <bb 10>;
  else
    goto <bb 17>;

<bb 10>:
  D.40154_36 = session_3(D)->channel;
  vtmp_37 = switch_channel_get_variable_dup (D.40154_36, "rtp_last_video_codec_string", 1, -1);
  # DEBUG vtmp => vtmp_37
  D.40154_38 = session_3(D)->channel;
  if (vtmp_37 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;

<bb 11>:
  iftmp.0_39 = ",";
  goto <bb 13>;

<bb 12>:
  iftmp.0_40 = "";

<bb 13>:
  # iftmp.0_1 = PHI <iftmp.0_39(11), iftmp.0_40(12)>
  if (vtmp_37 != 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

<bb 14>:
  iftmp.1_41 = vtmp_37;
  goto <bb 16>;

<bb 15>:
  iftmp.1_42 = "";

<bb 16>:
  # iftmp.1_2 = PHI <iftmp.1_41(14), iftmp.1_42(15)>
  switch_channel_set_variable_printf (D.40154_38, "rtp_use_codec_string", "%s%s%s", tmp_35, iftmp.0_1, iftmp.1_2);

<bb 17>:
  D.40154_43 = session_3(D)->channel;
  tmp_44 = switch_channel_get_variable_dup (D.40154_43, "rtp_use_codec_string", 1, -1);
  # DEBUG tmp => tmp_44
  if (tmp_44 != 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  D.40182_45 = smh_4->session;
  tmp_codec_string_46 = switch_core_perform_session_strdup (D.40182_45, tmp_44, "src/switch_core_media.c", &__func__, 8591);
  # DEBUG tmp_codec_string => tmp_codec_string_46
  D.40183_47 = &smh_4->codec_order;
  D.40184_48 = switch_separate_string (tmp_codec_string_46, 44, D.40183_47, 50);
  D.40185_49 = (int) D.40184_48;
  smh_4->codec_order_last = D.40185_49;
  D.40168_50 = smh_4->mparams;
  D.40186_51 = &smh_4->codecs;
  D.40183_52 = &smh_4->codec_order;
  D.40187_53 = smh_4->codec_order_last;
  D.40188_54 = switch_loadable_module_get_codecs_sorted (D.40186_51, 50, D.40183_52, D.40187_53);
  D.40168_50->num_codecs = D.40188_54;

<bb 19>:
  D.40154_55 = session_3(D)->channel;
  tmp_56 = switch_channel_get_variable_dup (D.40154_55, "rtp_2833_send_payload", 1, -1);
  # DEBUG tmp => tmp_56
  if (tmp_56 != 0B)
    goto <bb 20>;
  else
    goto <bb 21>;

<bb 20>:
  D.40168_57 = smh_4->mparams;
  # DEBUG __nptr => tmp_56
  D.48283_317 = strtol (tmp_56, 0B, 10);
  D.48282_337 = D.48283_317;
  D.40191_58 = D.48282_337;
  D.40192_59 = (unsigned char) D.40191_58;
  D.40168_57->te = D.40192_59;

<bb 21>:
  D.40154_60 = session_3(D)->channel;
  tmp_61 = switch_channel_get_variable_dup (D.40154_60, "rtp_2833_recv_payload", 1, -1);
  # DEBUG tmp => tmp_61
  if (tmp_61 != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.40168_62 = smh_4->mparams;
  # DEBUG __nptr => tmp_61
  D.48286_318 = strtol (tmp_61, 0B, 10);
  D.48285_339 = D.48286_318;
  D.40195_63 = D.48285_339;
  D.40196_64 = (unsigned char) D.40195_63;
  D.40168_62->recv_te = D.40196_64;

<bb 23>:
  D.40154_65 = session_3(D)->channel;
  tmp_66 = switch_channel_get_variable_dup (D.40154_65, "rtp_use_codec_rate", 1, -1);
  # DEBUG tmp => tmp_66
  if (tmp_66 != 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  D.40162_67 = a_engine_20->cur_payload_map;
  # DEBUG __nptr => tmp_66
  D.48289_319 = strtol (tmp_66, 0B, 10);
  D.48288_341 = D.48289_319;
  D.40199_68 = D.48288_341;
  D.40200_69 = (long unsigned int) D.40199_68;
  D.40162_67->rm_rate = D.40200_69;
  D.40162_70 = a_engine_20->cur_payload_map;
  D.40162_71 = a_engine_20->cur_payload_map;
  D.40201_72 = D.40162_71->rm_rate;
  D.40162_71->adv_rm_rate = D.40201_72;

<bb 25>:
  D.40154_73 = session_3(D)->channel;
  tmp_74 = switch_channel_get_variable_dup (D.40154_73, "rtp_use_codec_ptime", 1, -1);
  # DEBUG tmp => tmp_74
  if (tmp_74 != 0B)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  D.40162_75 = a_engine_20->cur_payload_map;
  # DEBUG __nptr => tmp_74
  D.48292_320 = strtol (tmp_74, 0B, 10);
  D.48291_343 = D.48292_320;
  D.40204_76 = D.48291_343;
  D.40205_77 = (uint32_t) D.40204_76;
  D.40162_75->codec_ms = D.40205_77;

<bb 27>:
  D.40154_78 = session_3(D)->channel;
  tmp_79 = switch_channel_get_variable_dup (D.40154_78, "rtp_use_pt", 1, -1);
  # DEBUG tmp => tmp_79
  if (tmp_79 != 0B)
    goto <bb 28>;
  else
    goto <bb 29>;

<bb 28>:
  D.40162_80 = a_engine_20->cur_payload_map;
  D.40162_81 = a_engine_20->cur_payload_map;
  # DEBUG __nptr => tmp_79
  D.48295_321 = strtol (tmp_79, 0B, 10);
  D.48294_345 = D.48295_321;
  D.40208_82 = D.48294_345;
  D.40209_83 = (unsigned char) D.40208_82;
  D.40162_81->agreed_pt = D.40209_83;
  D.40210_84 = D.40162_81->agreed_pt;
  D.40162_81->pt = D.40210_84;

<bb 29>:
  D.40154_85 = session_3(D)->channel;
  tmp_86 = switch_channel_get_variable_dup (D.40154_85, "rtp_audio_recv_pt", 1, -1);
  # DEBUG tmp => tmp_86
  if (tmp_86 != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  D.40162_87 = a_engine_20->cur_payload_map;
  # DEBUG __nptr => tmp_86
  D.48298_322 = strtol (tmp_86, 0B, 10);
  D.48297_347 = D.48298_322;
  D.40213_88 = D.48297_347;
  D.40214_89 = (unsigned char) D.40213_88;
  D.40162_87->recv_pt = D.40214_89;

<bb 31>:
  D.40168_90 = smh_4->mparams;
  D.40215_91 = D.40168_90->codec_flags;
  switch_core_media_set_codec (session_3(D), 1, D.40215_91);
  D.40168_92 = smh_4->mparams;
  D.40168_92->extrtpip = ip_6;
  D.40216_93 = D.40168_92->extrtpip;
  a_engine_20->adv_sdp_ip = D.40216_93;
  # DEBUG __nptr => port_8
  D.48301_323 = strtol (port_8, 0B, 10);
  D.48300_349 = D.48301_323;
  D.40217_94 = D.48300_349;
  D.40218_95 = (short unsigned int) D.40217_94;
  a_engine_20->local_sdp_port = D.40218_95;
  D.40219_96 = a_engine_20->local_sdp_port;
  a_engine_20->adv_sdp_port = D.40219_96;
  # DEBUG s => ip_6
  if (ip_6 == 0B)
    goto <bb 34>;
  else
    goto <bb 32>;

<bb 32>:
  D.48304_324 = *ip_6;
  if (D.48304_324 == 0)
    goto <bb 34>;
  else
    goto <bb 33>;

<bb 33>:

<bb 34>:
  # D.48305_325 = PHI <1(31), 1(32), 0(33)>
  D.48303_350 = D.48305_325;
  D.40220_97 = D.48303_350;
  if (D.40220_97 == 0)
    goto <bb 35>;
  else
    goto <bb 36>;

<bb 35>:
  D.40223_98 = switch_core_perform_session_strdup (session_3(D), ip_6, "src/switch_core_media.c", &__func__, 8627);
  a_engine_20->local_sdp_ip = D.40223_98;
  D.40168_99 = smh_4->mparams;
  D.40224_100 = a_engine_20->local_sdp_ip;
  D.40168_99->rtpip = D.40224_100;

<bb 36>:
  # DEBUG s => a_ip_15
  if (a_ip_15 == 0B)
    goto <bb 39>;
  else
    goto <bb 37>;

<bb 37>:
  D.48308_326 = *a_ip_15;
  if (D.48308_326 == 0)
    goto <bb 39>;
  else
    goto <bb 38>;

<bb 38>:

<bb 39>:
  # D.48309_327 = PHI <1(36), 1(37), 0(38)>
  D.48307_351 = D.48309_327;
  D.40225_101 = D.48307_351;
  if (D.40225_101 == 0)
    goto <bb 40>;
  else
    goto <bb 41>;

<bb 40>:
  D.40228_102 = switch_core_perform_session_strdup (session_3(D), a_ip_15, "src/switch_core_media.c", &__func__, 8632);
  a_engine_20->adv_sdp_ip = D.40228_102;

<bb 41>:
  D.40229_103 = r_ip_17 != 0B;
  D.40230_104 = r_port_19 != 0B;
  D.40231_105 = D.40229_103 && D.40230_104;
  if (D.40231_105 != 0)
    goto <bb 42>;
  else
    goto <bb 43>;

<bb 42>:
  D.40162_106 = a_engine_20->cur_payload_map;
  D.40162_106->remote_sdp_ip = r_ip_17;
  D.40162_107 = a_engine_20->cur_payload_map;
  # DEBUG __nptr => r_port_19
  D.48312_328 = strtol (r_port_19, 0B, 10);
  D.48311_353 = D.48312_328;
  D.40234_108 = D.48311_353;
  D.40235_109 = (short unsigned int) D.40234_108;
  D.40162_107->remote_sdp_port = D.40235_109;

<bb 43>:
  D.40154_110 = session_3(D)->channel;
  D.40236_111 = switch_channel_test_flag (D.40154_110, 23);
  if (D.40236_111 != 0)
    goto <bb 44>;
  else
    goto <bb 54>;

<bb 44>:
  D.40154_112 = session_3(D)->channel;
  tmp_113 = switch_channel_get_variable_dup (D.40154_112, "rtp_use_video_pt", 1, -1);
  # DEBUG tmp => tmp_113
  if (tmp_113 != 0B)
    goto <bb 45>;
  else
    goto <bb 46>;

<bb 45>:
  D.40241_114 = v_engine_21->cur_payload_map;
  D.40241_115 = v_engine_21->cur_payload_map;
  # DEBUG __nptr => tmp_113
  D.48315_329 = strtol (tmp_113, 0B, 10);
  D.48314_355 = D.48315_329;
  D.40242_116 = D.48314_355;
  D.40243_117 = (unsigned char) D.40242_116;
  D.40241_115->agreed_pt = D.40243_117;
  D.40244_118 = D.40241_115->agreed_pt;
  D.40241_115->pt = D.40244_118;

<bb 46>:
  D.40154_119 = session_3(D)->channel;
  tmp_120 = switch_channel_get_variable_dup (D.40154_119, "rtp_video_recv_pt", 1, -1);
  # DEBUG tmp => tmp_120
  if (tmp_120 != 0B)
    goto <bb 47>;
  else
    goto <bb 48>;

<bb 47>:
  D.40241_121 = v_engine_21->cur_payload_map;
  # DEBUG __nptr => tmp_120
  D.48318_330 = strtol (tmp_120, 0B, 10);
  D.48317_357 = D.48318_330;
  D.40247_122 = D.48317_357;
  D.40248_123 = (unsigned char) D.40247_122;
  D.40241_121->recv_pt = D.40248_123;

<bb 48>:
  D.40241_124 = v_engine_21->cur_payload_map;
  D.40154_125 = session_3(D)->channel;
  D.40249_126 = switch_channel_get_variable_dup (D.40154_125, "rtp_use_video_codec_name", 1, -1);
  D.40241_124->rm_encoding = D.40249_126;
  D.40241_127 = v_engine_21->cur_payload_map;
  D.40154_128 = session_3(D)->channel;
  D.40250_129 = switch_channel_get_variable_dup (D.40154_128, "rtp_use_video_codec_fmtp", 1, -1);
  D.40241_127->rm_fmtp = D.40250_129;
  D.40154_130 = session_3(D)->channel;
  ip_131 = switch_channel_get_variable_dup (D.40154_130, "local_video_ip", 1, -1);
  # DEBUG ip => ip_131
  D.40154_132 = session_3(D)->channel;
  port_133 = switch_channel_get_variable_dup (D.40154_132, "local_video_port", 1, -1);
  # DEBUG port => port_133
  D.40154_134 = session_3(D)->channel;
  r_ip_135 = switch_channel_get_variable_dup (D.40154_134, "remote_video_ip", 1, -1);
  # DEBUG r_ip => r_ip_135
  D.40154_136 = session_3(D)->channel;
  r_port_137 = switch_channel_get_variable_dup (D.40154_136, "remote_video_port", 1, -1);
  # DEBUG r_port => r_port_137
  D.40154_138 = session_3(D)->channel;
  switch_channel_set_flag_value (D.40154_138, 98, 1);
  D.40154_139 = session_3(D)->channel;
  tmp_140 = switch_channel_get_variable_dup (D.40154_139, "rtp_use_video_codec_rate", 1, -1);
  # DEBUG tmp => tmp_140
  if (tmp_140 != 0B)
    goto <bb 49>;
  else
    goto <bb 50>;

<bb 49>:
  D.40241_141 = v_engine_21->cur_payload_map;
  # DEBUG __nptr => tmp_140
  D.48321_331 = strtol (tmp_140, 0B, 10);
  D.48320_359 = D.48321_331;
  D.40253_142 = D.48320_359;
  D.40254_143 = (long unsigned int) D.40253_142;
  D.40241_141->rm_rate = D.40254_143;
  D.40241_144 = v_engine_21->cur_payload_map;
  D.40241_145 = v_engine_21->cur_payload_map;
  D.40255_146 = D.40241_145->rm_rate;
  D.40241_145->adv_rm_rate = D.40255_146;

<bb 50>:
  D.40154_147 = session_3(D)->channel;
  tmp_148 = switch_channel_get_variable_dup (D.40154_147, "rtp_use_video_codec_ptime", 1, -1);
  # DEBUG tmp => tmp_148
  if (tmp_148 != 0B)
    goto <bb 51>;
  else
    goto <bb 52>;

<bb 51>:
  D.40241_149 = v_engine_21->cur_payload_map;
  # DEBUG __nptr => tmp_148
  D.48324_332 = strtol (tmp_148, 0B, 10);
  D.48323_361 = D.48324_332;
  D.40258_150 = D.48323_361;
  D.40259_151 = (uint32_t) D.40258_150;
  D.40241_149->codec_ms = D.40259_151;

<bb 52>:
  # DEBUG __nptr => port_133
  D.48327_333 = strtol (port_133, 0B, 10);
  D.48326_363 = D.48327_333;
  D.40260_152 = D.48326_363;
  D.40261_153 = (short unsigned int) D.40260_152;
  v_engine_21->local_sdp_port = D.40261_153;
  D.40262_154 = v_engine_21->local_sdp_port;
  v_engine_21->adv_sdp_port = D.40262_154;
  D.40229_155 = r_ip_135 != 0B;
  D.40230_156 = r_port_137 != 0B;
  D.40231_157 = D.40229_155 && D.40230_156;
  if (D.40231_157 != 0)
    goto <bb 53>;
  else
    goto <bb 54>;

<bb 53>:
  D.40241_158 = v_engine_21->cur_payload_map;
  D.40241_158->remote_sdp_ip = r_ip_135;
  D.40241_159 = v_engine_21->cur_payload_map;
  # DEBUG __nptr => r_port_137
  D.48330_334 = strtol (r_port_137, 0B, 10);
  D.48329_365 = D.48330_334;
  D.40265_160 = D.48329_365;
  D.40266_161 = (short unsigned int) D.40265_160;
  D.40241_159->remote_sdp_port = D.40266_161;

<bb 54>:
  switch_core_media_gen_local_sdp (session_3(D), 0, 0B, 0, 0B, 1);
  switch_core_media_set_video_codec (session_3(D), 1);
  D.40267_162 = switch_core_media_activate_rtp (session_3(D));
  if (D.40267_162 != 0)
    goto <bb 60>;
  else
    goto <bb 55>;

<bb 55>:
  switch_core_session_get_recovery_crypto_key (session_3(D), 0);
  switch_core_session_get_recovery_crypto_key (session_3(D), 1);
  D.40154_163 = session_3(D)->channel;
  tmp_164 = switch_channel_get_variable_dup (D.40154_163, "rtp_last_audio_local_crypto_key", 1, -1);
  # DEBUG tmp => tmp_164
  if (tmp_164 != 0B)
    goto <bb 56>;
  else
    goto <bb 58>;

<bb 56>:
  D.40272_165 = a_engine_20->crypto_type;
  D.40273_166 = a_engine_20->ssec[D.40272_165].remote_crypto_key;
  if (D.40273_166 != 0B)
    goto <bb 57>;
  else
    goto <bb 58>;

<bb 57>:
  # DEBUG __nptr => tmp_164
  D.48333_335 = strtol (tmp_164, 0B, 10);
  D.48332_367 = D.48333_335;
  idx_167 = D.48332_367;
  # DEBUG idx => NULL
  D.40272_168 = a_engine_20->crypto_type;
  D.40276_169 = switch_core_perform_session_strdup (session_3(D), tmp_164, "src/switch_core_media.c", &__func__, 8690);
  a_engine_20->ssec[D.40272_168].local_crypto_key = D.40276_169;
  D.40277_170 = &a_engine_20->ssec;
  D.40272_171 = a_engine_20->crypto_type;
  D.40278_172 = D.40272_171 * 144;
  D.40279_173 = D.40277_170 + D.40278_172;
  D.40272_174 = a_engine_20->crypto_type;
  D.40280_175 = a_engine_20->ssec[D.40272_174].local_crypto_key;
  switch_core_media_add_crypto (D.40279_173, D.40280_175, 0);
  D.40277_176 = &a_engine_20->ssec;
  D.40272_177 = a_engine_20->crypto_type;
  D.40278_178 = D.40272_177 * 144;
  D.40279_179 = D.40277_176 + D.40278_178;
  D.40272_180 = a_engine_20->crypto_type;
  D.40273_181 = a_engine_20->ssec[D.40272_180].remote_crypto_key;
  switch_core_media_add_crypto (D.40279_179, D.40273_181, 1);
  D.40182_182 = smh_4->session;
  D.40281_183 = D.40182_182->channel;
  switch_channel_set_flag_value (D.40281_183, 92, 1);
  D.40282_184 = a_engine_20->rtp_session;
  idx.2_185 = (uint32_t) idx_167;
  D.40272_186 = a_engine_20->crypto_type;
  D.40272_187 = a_engine_20->crypto_type;
  D.40284_188 = &a_engine_20->ssec[D.40272_187].local_raw_key;
  D.40272_189 = a_engine_20->crypto_type;
  D.40285_190 = SUITES[D.40272_189].keylen;
  D.40286_191 = (switch_size_t) D.40285_190;
  switch_rtp_add_crypto_key (D.40282_184, 0, idx.2_185, D.40272_189, D.40284_188, D.40286_191);
  D.40282_192 = a_engine_20->rtp_session;
  D.40272_193 = a_engine_20->crypto_type;
  D.40287_194 = a_engine_20->ssec[D.40272_193].crypto_tag;
  D.40288_195 = (uint32_t) D.40287_194;
  D.40272_196 = a_engine_20->crypto_type;
  D.40272_197 = a_engine_20->crypto_type;
  D.40289_198 = &a_engine_20->ssec[D.40272_197].remote_raw_key;
  D.40272_199 = a_engine_20->crypto_type;
  D.40285_200 = SUITES[D.40272_199].keylen;
  D.40286_201 = (switch_size_t) D.40285_200;
  switch_rtp_add_crypto_key (D.40282_192, 1, D.40288_195, D.40272_199, D.40289_198, D.40286_201);

<bb 58>:
  D.40290_202 = switch_core_media_ready (session_3(D), 0);
  if (D.40290_202 != 0)
    goto <bb 59>;
  else
    goto <bb 60>;

<bb 59>:
  D.40282_203 = a_engine_20->rtp_session;
  D.40168_204 = smh_4->mparams;
  D.40293_205 = D.40168_204->te;
  switch_rtp_set_telephony_event (D.40282_203, D.40293_205);
  D.40282_206 = a_engine_20->rtp_session;
  D.40168_207 = smh_4->mparams;
  D.40294_208 = D.40168_207->recv_te;
  switch_rtp_set_telephony_recv_event (D.40282_206, D.40294_208);

<bb 60>:
  return;

}



;; Function switch_core_media_init (switch_core_media_init)

Iterations: 0
switch_core_media_init ()
{
<bb 2>:
  switch_core_gen_certs ("dtls-srtp.pem");
  return;

}



;; Function switch_core_media_deinit (switch_core_media_deinit)

Iterations: 0
switch_core_media_deinit ()
{
<bb 2>:
  return;

}


