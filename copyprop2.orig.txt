
;; Function switch_core_media_negotiate_sdp (switch_core_media_negotiate_sdp)

Immediate_uses: 

match_1 : -->5 uses.
match_2 = PHI <match_1(289), match_1(290), match_1(291), match_1(292), 0(293)>
match_2 = PHI <match_1(289), match_1(290), match_1(291), match_1(292), 0(293)>
match_2 = PHI <match_1(289), match_1(290), match_1(291), match_1(292), 0(293)>
match_2 = PHI <match_1(289), match_1(290), match_1(291), match_1(292), 0(293)>
D.44950_663 = match_1 != 0;
# DEBUG match => match_1

match_2 : -->4 uses.
match_3 = PHI <match_2(294), match_2(295), match_2(297), 0(298)>
match_3 = PHI <match_2(294), match_2(295), match_2(297), 0(298)>
match_3 = PHI <match_2(294), match_2(295), match_2(297), 0(298)>
D.44950_674 = match_2 != 0;
# DEBUG match => match_2

match_3 : -->3 uses.
match_6 = PHI <match_3(306), match_5(308)>
match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>
if (match_3 != 0)
# DEBUG match => match_3

match_4 : --> single use.
match_5 = PHI <match_8(274), match_4(307)>
# DEBUG match => match_4

match_5 : -->2 uses.
match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>
match_6 = PHI <match_3(306), match_5(308)>
# DEBUG match => match_5

match_6 : -->2 uses.
match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>
match_9 = PHI <match_6(309), match_8(311)>
# DEBUG match => match_6

match_7 : --> single use.
match_8 = PHI <match_16(234), match_7(310)>
# DEBUG match => match_7

match_8 : -->7 uses.
match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>
match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>
match_5 = PHI <match_8(274), match_4(307)>
if (match_8 != 0)
match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>
match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>
match_9 = PHI <match_6(309), match_8(311)>
# DEBUG match => match_8

match_9 : --> single use.
match_10 = PHI <match_9(312), 0(313)>
# DEBUG match => match_9

match_10 : -->2 uses.
match_11 = PHI <match_10(314), 1(322), match_10(324)>
match_11 = PHI <match_10(314), 1(322), match_10(324)>
# DEBUG match => match_10

match_11 : --> single use.
match_12 = PHI <match_11(325), 1(349)>
# DEBUG match => match_11

match_12 : -->3 uses.
match_13 = PHI <match_12(350), match_12(360), 0(359)>
match_13 = PHI <match_12(350), match_12(360), 0(359)>
if (match_12 != 0)
# DEBUG match => match_12

match_13 : -->6 uses.
match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
# DEBUG match => match_13

match_14 : -->2 uses.
match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
# DEBUG match => match_14

match_15 : --> single use.
match_16 = PHI <0(131), match_15(489)>
# DEBUG match => match_15

match_16 : -->7 uses.
if (match_16 == 0)
match_14 = PHI <match_16(477), 1(478)>
match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
match_8 = PHI <match_16(234), match_7(310)>
match_17 = PHI <1(148), 0(150), 0(168), 1(166), 0(223), 0(229), 0(233), 0(390), 0(441), match_16(490), 1(165), 1(178)>
# DEBUG match => match_16

match_17 : --> single use.
match_142 = PHI <0(4), 0(5), 0(7), match_17(493)>
# DEBUG match => match_17

best_te_18 : --> single use.
best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>
# DEBUG best_te => best_te_18

best_te_19 : --> single use.
best_te_20 = PHI <best_te_23(234), best_te_19(310)>
# DEBUG best_te => best_te_19

best_te_20 : -->9 uses.
best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>
best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>
best_te_21 = PHI <best_te_20(361), best_te_20(363), best_te_833(364)>
best_te_21 = PHI <best_te_20(361), best_te_20(363), best_te_833(364)>
if (best_te_20 == 0)
best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>
best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>
best_te_18 = PHI <best_te_20(239), best_te_568(240)>
if (best_te_20 == 0)
# DEBUG best_te => best_te_20

best_te_21 : -->13 uses.
te_847 = best_te_21;
D.45110_846 = best_te_21;
best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
D.44471_845->te = best_te_21;
best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
switch_rtp_set_telephony_event (D.44605_841, best_te_21);
best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
D.44857_837 = (int) best_te_21;
D.44471_835->te = best_te_21;
if (best_te_21 != 0)
# DEBUG best_te => best_te_21

best_te_22 : --> single use.
best_te_23 = PHI <0(131), best_te_22(489)>
# DEBUG best_te => best_te_22

best_te_23 : -->6 uses.
best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
best_te_20 = PHI <best_te_23(234), best_te_19(310)>
# DEBUG best_te => best_te_23

cng_pt_24 : --> single use.
cng_pt_25 = PHI <cng_pt_27(234), cng_pt_24(310)>
# DEBUG cng_pt => cng_pt_24

cng_pt_25 : -->11 uses.
cng_pt_24 = PHI <cng_pt_25(241), cng_pt_573(247), cng_pt_25(248), cng_pt_25(249), cng_pt_25(309)>
cng_pt_24 = PHI <cng_pt_25(241), cng_pt_573(247), cng_pt_25(248), cng_pt_25(249), cng_pt_25(309)>
cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
cng_pt_24 = PHI <cng_pt_25(241), cng_pt_573(247), cng_pt_25(248), cng_pt_25(249), cng_pt_25(309)>
if (cng_pt_25 == 0)
cng_pt_24 = PHI <cng_pt_25(241), cng_pt_573(247), cng_pt_25(248), cng_pt_25(249), cng_pt_25(309)>
# DEBUG cng_pt => cng_pt_25

cng_pt_26 : --> single use.
cng_pt_27 = PHI <0(131), cng_pt_26(489)>
# DEBUG cng_pt => cng_pt_26

cng_pt_27 : -->7 uses.
D.44471_1094->cng_pt = cng_pt_27;
cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
cng_pt_25 = PHI <cng_pt_27(234), cng_pt_24(310)>
# DEBUG cng_pt => cng_pt_27

m_28 : -->27 uses.
m_1093 = m_28->m_next;
check_ice (smh_186, 1, sdp_198, m_28);
D.44697_1061 = m_28->m_port;
D.44666_970 = m_28->m_proto;
attr_893 = m_28->m_attributes;
attr_886 = m_28->m_attributes;
map_883 = m_28->m_rtpmaps;
D.44546_880 = m_28->m_connections;
D.44697_873 = m_28->m_port;
check_ice (smh_186, 0, sdp_198, m_28);
D.44697_797 = m_28->m_port;
map_559 = m_28->m_rtpmaps;
D.44546_555 = m_28->m_connections;
D.44666_539 = m_28->m_proto;
attr_507 = m_28->m_attributes;
attr_500 = m_28->m_attributes;
D.44697_494 = m_28->m_port;
D.44681_493 = m_28->m_type;
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
D.44697_393 = m_28->m_port;
D.44681_392 = m_28->m_type;
D.44681_387 = m_28->m_type;
D.44681_383 = m_28->m_type;
D.44675_379 = m_28->m_proto;
D.44669_375 = m_28->m_proto_name;
D.44666_373 = m_28->m_proto;
if (m_28 != 0B)
# DEBUG m => m_28

attr_29 : -->5 uses.
attr_334 = attr_29->a_next;
D.44619_332 = attr_29->a_value;
D.44619_328 = attr_29->a_value;
D.44590_304 = attr_29->a_name;
if (attr_29 != 0B)
# DEBUG attr => attr_29

attr_30 : -->4 uses.
attr_506 = attr_30->a_next;
D.44619_503 = attr_30->a_value;
D.44590_501 = attr_30->a_name;
if (attr_30 != 0B)
# DEBUG attr => attr_30

attr_31 : -->9 uses.
attr_548 = attr_31->a_next;
crypto_544 = attr_31->a_value;
D.44619_531 = attr_31->a_value;
D.44619_526 = attr_31->a_value;
D.44619_521 = attr_31->a_value;
D.44619_513 = attr_31->a_value;
D.44619_510 = attr_31->a_value;
D.44590_508 = attr_31->a_name;
if (attr_31 != 0B)
# DEBUG attr => attr_31

attr_32 : -->4 uses.
attr_892 = attr_32->a_next;
D.44619_889 = attr_32->a_value;
D.44590_887 = attr_32->a_name;
if (attr_32 != 0B)
# DEBUG attr => attr_32

attr_33 : -->9 uses.
attr_978 = attr_33->a_next;
crypto_975 = attr_33->a_value;
D.44619_962 = attr_33->a_value;
D.44619_954 = attr_33->a_value;
D.44619_908 = attr_33->a_value;
D.44619_899 = attr_33->a_value;
D.44619_896 = attr_33->a_value;
D.44590_894 = attr_33->a_name;
if (attr_33 != 0B)
# DEBUG attr => attr_33

ptime_34 : --> single use.
ptime_35 = PHI <dptime_37(192), ptime_34(225)>
# DEBUG ptime => ptime_34

ptime_35 : -->13 uses.
codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>
codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>
D.44877_582 = ptime_35 == 0;
D.44878_583 = ptime_35 > maxptime_39;
# DEBUG codec_ms => ptime_35
D.44989_689 = ptime_35 != 0;
if (ptime_35 == 0)
ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>
ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>
ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>
ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>
ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>
ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>
ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>
# DEBUG ptime => ptime_35

dptime_36 : --> single use.
dptime_37 = PHI <0(65), dptime_36(84)>
# DEBUG dptime => dptime_36

dptime_37 : -->9 uses.
dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
ptime_35 = PHI <dptime_37(192), ptime_34(225)>
# DEBUG ptime => dptime_37
dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
# DEBUG dptime => dptime_37

maxptime_38 : --> single use.
maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>
# DEBUG maxptime => maxptime_38

maxptime_39 : -->12 uses.
codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>
# DEBUG codec_ms => maxptime_39
D.44878_583 = ptime_35 > maxptime_39;
if (D.45025_735 <= maxptime_39)
if (maxptime_39 == 0)
if (maxptime_39 != 0)
maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
# DEBUG maxptime => maxptime_39

dmaxptime_40 : --> single use.
dmaxptime_41 = PHI <0(65), dmaxptime_40(84)>
# DEBUG dmaxptime => dmaxptime_40

dmaxptime_41 : -->9 uses.
dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>
# DEBUG maxptime => dmaxptime_41
dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
# DEBUG dmaxptime => dmaxptime_41

sendonly_42 : --> single use.
sendonly_44 = PHI <sendonly_42(65), sendonly_43(84)>
# DEBUG sendonly => sendonly_42

sendonly_43 : --> single use.
sendonly_44 = PHI <sendonly_42(65), sendonly_43(84)>
# DEBUG sendonly => sendonly_43

sendonly_44 : -->9 uses.
sendonly_43 = PHI <sendonly_44(69), 1(71), 1(73), sendonly_44(77), 0(79), sendonly_44(81), sendonly_44(82), sendonly_44(83), sendonly_44(76)>
D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);
D.44624_335 = sendonly_44 != 1;
sendonly_43 = PHI <sendonly_44(69), 1(71), 1(73), sendonly_44(77), 0(79), sendonly_44(81), sendonly_44(82), sendonly_44(83), sendonly_44(76)>
sendonly_43 = PHI <sendonly_44(69), 1(71), 1(73), sendonly_44(77), 0(79), sendonly_44(81), sendonly_44(82), sendonly_44(83), sendonly_44(76)>
sendonly_43 = PHI <sendonly_44(69), 1(71), 1(73), sendonly_44(77), 0(79), sendonly_44(81), sendonly_44(82), sendonly_44(83), sendonly_44(76)>
if (sendonly_44 <= 1)
sendonly_43 = PHI <sendonly_44(69), 1(71), 1(73), sendonly_44(77), 0(79), sendonly_44(81), sendonly_44(82), sendonly_44(83), sendonly_44(76)>
sendonly_43 = PHI <sendonly_44(69), 1(71), 1(73), sendonly_44(77), 0(79), sendonly_44(81), sendonly_44(82), sendonly_44(83), sendonly_44(76)>
# DEBUG sendonly => sendonly_44

recvonly_45 : --> single use.
recvonly_46 = PHI <0(65), recvonly_45(84)>
# DEBUG recvonly => recvonly_45

recvonly_46 : -->8 uses.
recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
D.44625_336 = recvonly_46 != 1;
recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
# DEBUG recvonly => recvonly_46

greedy_47 : -->2 uses.
if (greedy_47 != 0)
if (greedy_47 != 0)
# DEBUG greedy => greedy_47

x_48 : --> single use.
x_49 = PHI <0(234), x_48(310)>
# DEBUG x => x_48

x_49 : -->4 uses.
if (x_49 < 0)
x_580 = x_49 + 1;
x_48 = PHI <x_49(241), x_49(247), x_580(248), x_580(249), x_580(309)>
x_48 = PHI <x_49(241), x_49(247), x_580(248), x_580(249), x_580(309)>
# DEBUG x => x_49

got_crypto_50 : --> single use.
got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>
# DEBUG got_crypto => got_crypto_50

got_crypto_51 : -->3 uses.
got_crypto_50 = PHI <got_crypto_51(184), got_crypto_51(188), 1(189)>
got_crypto_50 = PHI <got_crypto_51(184), got_crypto_51(188), 1(189)>
got_crypto_52 = PHI <got_crypto_56(181), got_crypto_56(182), got_crypto_51(191)>
# DEBUG got_crypto => got_crypto_51

got_crypto_52 : --> single use.
got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>
# DEBUG got_crypto => got_crypto_52

got_crypto_53 : --> single use.
got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>
# DEBUG got_crypto => got_crypto_53

got_crypto_54 : -->16 uses.
got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
D.45003_714 = got_crypto_54 <= 0;
D.44834_549 = got_crypto_54 == -1;
got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
if (got_crypto_54 <= 0)
got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
# DEBUG got_crypto => got_crypto_54

got_crypto_55 : --> single use.
got_crypto_56 = PHI <0(131), got_crypto_55(489)>
# DEBUG got_crypto => got_crypto_55

got_crypto_56 : -->8 uses.
got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>
got_crypto_52 = PHI <got_crypto_56(181), got_crypto_56(182), got_crypto_51(191)>
got_crypto_52 = PHI <got_crypto_56(181), got_crypto_56(182), got_crypto_51(191)>
# DEBUG got_crypto => got_crypto_56

got_video_crypto_57 : --> single use.
got_video_crypto_58 = PHI <got_video_crypto_62(394), got_video_crypto_57(401)>
# DEBUG got_video_crypto => got_video_crypto_57

got_video_crypto_58 : -->3 uses.
got_video_crypto_57 = PHI <got_video_crypto_58(395), got_video_crypto_58(399), 1(400)>
got_video_crypto_57 = PHI <got_video_crypto_58(395), got_video_crypto_58(399), 1(400)>
got_video_crypto_59 = PHI <got_video_crypto_62(392), got_video_crypto_62(393), got_video_crypto_58(402)>
# DEBUG got_video_crypto => got_video_crypto_58

got_video_crypto_59 : --> single use.
got_video_crypto_61 = PHI <got_video_crypto_59(403), got_video_crypto_60(443)>
# DEBUG got_video_crypto => got_video_crypto_59

got_video_crypto_60 : --> single use.
got_video_crypto_61 = PHI <got_video_crypto_59(403), got_video_crypto_60(443)>
# DEBUG got_video_crypto => got_video_crypto_60

got_video_crypto_61 : -->10 uses.
got_video_crypto_62 = PHI <got_video_crypto_64(391), got_video_crypto_61(464)>
got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
if (got_video_crypto_61 == 0)
got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
# DEBUG got_video_crypto => got_video_crypto_61

got_video_crypto_62 : -->7 uses.
got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
D.45266_1024 = got_video_crypto_62 <= 0;
got_video_crypto_58 = PHI <got_video_crypto_62(394), got_video_crypto_57(401)>
got_video_crypto_59 = PHI <got_video_crypto_62(392), got_video_crypto_62(393), got_video_crypto_58(402)>
got_video_crypto_59 = PHI <got_video_crypto_62(392), got_video_crypto_62(393), got_video_crypto_58(402)>
# DEBUG got_video_crypto => got_video_crypto_62

got_video_crypto_63 : --> single use.
got_video_crypto_64 = PHI <0(131), got_video_crypto_63(489)>
# DEBUG got_video_crypto => got_video_crypto_63

got_video_crypto_64 : -->9 uses.
got_video_crypto_62 = PHI <got_video_crypto_64(391), got_video_crypto_61(464)>
got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
# DEBUG got_video_crypto => got_video_crypto_64

got_audio_65 : -->6 uses.
got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
# DEBUG got_audio => got_audio_65

got_audio_66 : --> single use.
got_audio_67 = PHI <0(131), got_audio_66(489)>
# DEBUG got_audio => got_audio_66

got_audio_67 : -->8 uses.
got_audio_65 = PHI <got_audio_67(350), 1(360), got_audio_67(359)>
got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
got_audio_65 = PHI <got_audio_67(350), 1(360), got_audio_67(359)>
D.44778_496 = got_audio_67 == 0;
# DEBUG got_audio => got_audio_67

got_avp_68 : -->2 uses.
got_avp_69 = PHI <0(131), got_avp_68(489)>
D.44839_552 = got_avp_68 | got_webrtc_78;
# DEBUG got_avp => got_avp_68

got_avp_69 : -->6 uses.
got_avp_68 = PHI <got_avp_69(138), got_avp_69(141), got_avp_69(143), got_avp_69(144), got_avp_69(139), got_avp_388(142)>
got_avp_68 = PHI <got_avp_69(138), got_avp_69(141), got_avp_69(143), got_avp_69(144), got_avp_69(139), got_avp_388(142)>
got_avp_68 = PHI <got_avp_69(138), got_avp_69(141), got_avp_69(143), got_avp_69(144), got_avp_69(139), got_avp_388(142)>
got_avp_68 = PHI <got_avp_69(138), got_avp_69(141), got_avp_69(143), got_avp_69(144), got_avp_69(139), got_avp_388(142)>
got_avp_388 = got_avp_69 + 1;
got_avp_68 = PHI <got_avp_69(138), got_avp_69(141), got_avp_69(143), got_avp_69(144), got_avp_69(139), got_avp_388(142)>
# DEBUG got_avp => got_avp_69

got_savp_74 : -->2 uses.
got_savp_75 = PHI <0(131), got_savp_74(489)>
D.44835_550 = got_savp_74 != 0;
# DEBUG got_savp => got_savp_74

got_savp_75 : -->6 uses.
got_savp_74 = PHI <got_savp_75(138), got_savp_75(141), got_savp_75(143), got_savp_75(144), got_savp_384(139), got_savp_75(142)>
got_savp_74 = PHI <got_savp_75(138), got_savp_75(141), got_savp_75(143), got_savp_75(144), got_savp_384(139), got_savp_75(142)>
got_savp_74 = PHI <got_savp_75(138), got_savp_75(141), got_savp_75(143), got_savp_75(144), got_savp_384(139), got_savp_75(142)>
got_savp_74 = PHI <got_savp_75(138), got_savp_75(141), got_savp_75(143), got_savp_75(144), got_savp_384(139), got_savp_75(142)>
got_savp_74 = PHI <got_savp_75(138), got_savp_75(141), got_savp_75(143), got_savp_75(144), got_savp_384(139), got_savp_75(142)>
got_savp_384 = got_savp_75 + 1;
# DEBUG got_savp => got_savp_75

got_udptl_76 : -->2 uses.
got_udptl_77 = PHI <0(131), got_udptl_76(489)>
if (got_udptl_76 != 0)
# DEBUG got_udptl => got_udptl_76

got_udptl_77 : -->6 uses.
got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>
got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>
got_udptl_391 = got_udptl_77 + 1;
got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>
got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>
got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>
# DEBUG got_udptl => got_udptl_77

got_webrtc_78 : -->4 uses.
got_webrtc_79 = PHI <0(131), got_webrtc_78(489)>
D.44830_972 = got_webrtc_78 == 0;
D.44839_552 = got_avp_68 | got_webrtc_78;
D.44830_541 = got_webrtc_78 == 0;
# DEBUG got_webrtc => got_webrtc_78

got_webrtc_79 : -->2 uses.
got_webrtc_374 = got_webrtc_79 + 1;
got_webrtc_78 = PHI <got_webrtc_79(132), got_webrtc_374(133)>
# DEBUG got_webrtc => got_webrtc_79

scrooge_80 : --> single use.
if (scrooge_80 != 0)
# DEBUG scrooge => scrooge_80

reneg_81 : -->2 uses.
reneg_82 = PHI <reneg_81(106), reneg_353(107), reneg_356(119)>
if (reneg_81 != 0)
# DEBUG reneg => reneg_81

reneg_82 : --> single use.
reneg_83 = PHI <reneg_82(120), 0(121)>
# DEBUG reneg => reneg_82

reneg_83 : -->2 uses.
if (reneg_83 != 0)
if (reneg_83 == 0)
# DEBUG reneg => reneg_83

codec_array_84 : -->4 uses.
greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);
D.45237_984 = codec_array_84 + D.45236_983;
greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);
D.44919_628 = codec_array_84 + D.44918_627;
# DEBUG codec_array => codec_array_84

total_codecs_85 : -->4 uses.
greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);
if (i_139 < total_codecs_85)
greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);
D.44998_624 = i_129 < total_codecs_85;
# DEBUG total_codecs => total_codecs_85

codec_ms_86 : -->2 uses.
codec_ms_87 = PHI <codec_ms_86(253), codec_ms_589(254)>
if (codec_ms_86 == 0)
# DEBUG codec_ms => codec_ms_86

codec_ms_87 : -->2 uses.
codec_ms_88 = PHI <codec_ms_87(257), codec_ms_87(258), 33(259)>
codec_ms_88 = PHI <codec_ms_87(257), codec_ms_87(258), 33(259)>
# DEBUG codec_ms => codec_ms_87

codec_ms_88 : -->3 uses.
codec_ms_89 = PHI <codec_ms_88(270), codec_ms_617(271)>
codec_ms_90 = PHI <codec_ms_88(265), codec_ms_88(267), codec_ms_89(272), codec_ms_89(273), 32(264), 39(266)>
codec_ms_90 = PHI <codec_ms_88(265), codec_ms_88(267), codec_ms_89(272), codec_ms_89(273), 32(264), 39(266)>
# DEBUG codec_ms => codec_ms_88

codec_ms_89 : -->2 uses.
codec_ms_90 = PHI <codec_ms_88(265), codec_ms_88(267), codec_ms_89(272), codec_ms_89(273), 32(264), 39(266)>
codec_ms_90 = PHI <codec_ms_88(265), codec_ms_88(267), codec_ms_89(272), codec_ms_89(273), 32(264), 39(266)>
# DEBUG codec_ms => codec_ms_89

codec_ms_90 : -->5 uses.
codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>
codec_ms_93 = PHI <codec_ms_90(309), codec_ms_92(311)>
D.44993_692 = codec_ms_90 * 1000;
D.44990_690 = codec_ms_90 != 0;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# DEBUG codec_ms => codec_ms_90

codec_ms_91 : --> single use.
codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>
# DEBUG codec_ms => codec_ms_91

codec_ms_92 : -->5 uses.
codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>
codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>
codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>
codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>
codec_ms_93 = PHI <codec_ms_90(309), codec_ms_92(311)>
# DEBUG codec_ms => codec_ms_92

codec_ms_93 : -->7 uses.
codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);
# DEBUG codec_ms => codec_ms_93

codec_ms_94 : --> single use.
codec_ms_95 = PHI <0(131), codec_ms_94(489)>
# DEBUG codec_ms => codec_ms_94

codec_ms_95 : -->6 uses.
codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>
# DEBUG codec_ms => codec_ms_95

remote_codec_rate_96 : -->7 uses.
remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>
remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>
remote_codec_rate.92_700 = (int) remote_codec_rate_96;
if (remote_codec_rate_96 != codec_rate_632)
remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>
D.44973_678 = remote_codec_rate_96 != codec_rate_632;
D.44968_675 = remote_codec_rate_96 != 0;
# DEBUG remote_codec_rate => remote_codec_rate_96

remote_codec_rate_97 : --> single use.
remote_codec_rate_98 = PHI <remote_codec_rate_596(274), remote_codec_rate_97(307)>
# DEBUG remote_codec_rate => remote_codec_rate_97

remote_codec_rate_98 : -->5 uses.
remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>
remote_codec_rate_96 = PHI <remote_codec_rate_98(282), remote_codec_rate_98(287), fmtp_remote_codec_rate_99(288)>
if (remote_codec_rate_98 == codec_rate_632)
remote_codec_rate_96 = PHI <remote_codec_rate_98(282), remote_codec_rate_98(287), fmtp_remote_codec_rate_99(288)>
remote_codec_rate.92_636 = (int) remote_codec_rate_98;
# DEBUG remote_codec_rate => remote_codec_rate_98

fmtp_remote_codec_rate_99 : -->3 uses.
remote_codec_rate_96 = PHI <remote_codec_rate_98(282), remote_codec_rate_98(287), fmtp_remote_codec_rate_99(288)>
# DEBUG remote_codec_rate => fmtp_remote_codec_rate_99
if (fmtp_remote_codec_rate_99 != 0)
if (D.44947_658 == fmtp_remote_codec_rate_99)
# DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99

m_idx_100 : --> single use.
m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>
# DEBUG m_idx => m_idx_100

m_idx_101 : -->9 uses.
m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_703(306)>
m_idx_703 = m_idx_101 + 1;
matches[m_idx_101].map = map_128;
matches[m_idx_101].imp = imp_629;
matches[m_idx_101].rate = codec_rate.94_702;
matches[m_idx_101].codec_idx = i_129;
m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_703(306)>
m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_703(306)>
m_idx_102 = PHI <m_idx_703(306), m_idx_101(308)>
# DEBUG m_idx => m_idx_101

m_idx_102 : -->3 uses.
m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>
m_idx_105 = PHI <m_idx_102(309), m_idx_104(311)>
if (m_idx_102 > 29)
# DEBUG m_idx => m_idx_102

m_idx_103 : --> single use.
m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>
# DEBUG m_idx => m_idx_103

m_idx_104 : -->6 uses.
m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>
m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>
m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>
m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>
m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>
m_idx_105 = PHI <m_idx_102(309), m_idx_104(311)>
# DEBUG m_idx => m_idx_104

m_idx_105 : --> single use.
m_idx_106 = PHI <m_idx_105(312), 0(313)>
# DEBUG m_idx => m_idx_105

m_idx_106 : -->8 uses.
m_idx_744 = m_idx_106 + 1;
matches[m_idx_106].map = near_map_727;
matches[m_idx_106].imp = timp_134;
matches[m_idx_106].rate = near_rate.96_743;
matches[m_idx_106].codec_idx = D.45028_742;
m_idx_107 = PHI <m_idx_106(314), m_idx_744(322), m_idx_106(324)>
m_idx_107 = PHI <m_idx_106(314), m_idx_744(322), m_idx_106(324)>
D.45007_719 = m_idx_106 == 0;
# DEBUG m_idx => m_idx_106

m_idx_107 : -->9 uses.
m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
if (j_135 < m_idx_107)
greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);
if (m_idx_107 != 0)
# DEBUG m_idx => m_idx_107

m_idx_109 : --> single use.
m_idx_110 = PHI <m_idx_111(447), m_idx_109(462)>
# DEBUG m_idx => m_idx_109

m_idx_110 : -->8 uses.
m_idx_109 = PHI <m_idx_110(448), m_idx_110(450), m_idx_110(460), m_idx_110(459), m_idx_1018(461)>
m_idx_109 = PHI <m_idx_110(448), m_idx_110(450), m_idx_110(460), m_idx_110(459), m_idx_1018(461)>
m_idx_109 = PHI <m_idx_110(448), m_idx_110(450), m_idx_110(460), m_idx_110(459), m_idx_1018(461)>
m_idx_109 = PHI <m_idx_110(448), m_idx_110(450), m_idx_110(460), m_idx_110(459), m_idx_1018(461)>
m_idx_111 = PHI <0(391), m_idx_110(464)>
m_idx_1018 = m_idx_110 + 1;
matches[m_idx_110].map = map_136;
matches[m_idx_110].imp = imp_985;
# DEBUG m_idx => m_idx_110

m_idx_111 : -->2 uses.
m_idx_112 = PHI <m_idx_111(466), 0(467)>
m_idx_110 = PHI <m_idx_111(447), m_idx_109(462)>
# DEBUG m_idx => m_idx_111

m_idx_112 : -->6 uses.
m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
if (j_141 < m_idx_112)
greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);
m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
if (m_idx_112 != 0)
# DEBUG m_idx => m_idx_112

m_idx_113 : --> single use.
m_idx_114 = PHI <0(131), m_idx_113(489)>
# DEBUG m_idx => m_idx_113

m_idx_114 : -->3 uses.
m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>
# DEBUG m_idx => m_idx_114

nm_idx_115 : --> single use.
nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>
# DEBUG nm_idx => nm_idx_115

nm_idx_116 : -->10 uses.
nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>
nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>
nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>
nm_idx_119 = PHI <nm_idx_116(309), nm_idx_118(311)>
nm_idx_701 = nm_idx_116 + 1;
near_matches[nm_idx_116].map = map_128;
near_matches[nm_idx_116].imp = imp_629;
near_matches[nm_idx_116].rate = remote_codec_rate.92_700;
near_matches[nm_idx_116].codec_idx = i_129;
nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>
# DEBUG nm_idx => nm_idx_116

nm_idx_117 : --> single use.
nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>
# DEBUG nm_idx => nm_idx_117

nm_idx_118 : -->6 uses.
nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>
nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>
nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>
nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>
nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>
nm_idx_119 = PHI <nm_idx_116(309), nm_idx_118(311)>
# DEBUG nm_idx => nm_idx_118

nm_idx_119 : --> single use.
nm_idx_120 = PHI <nm_idx_119(312), 0(313)>
# DEBUG nm_idx => nm_idx_119

nm_idx_120 : -->8 uses.
nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
if (j_133 < nm_idx_120)
D.45008_720 = nm_idx_120 != 0;
# DEBUG nm_idx => nm_idx_120

nm_idx_121 : --> single use.
nm_idx_122 = PHI <0(131), nm_idx_121(489)>
# DEBUG nm_idx => nm_idx_121

nm_idx_122 : -->3 uses.
nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>
# DEBUG nm_idx => nm_idx_122

connection_124 : -->2 uses.
D.45085_795 = connection_124->c_address;
if (connection_124 == 0B)
# DEBUG connection => connection_124

connection_125 : -->2 uses.
D.45085_1059 = connection_125->c_address;
if (connection_125 == 0B)
# DEBUG connection => connection_125

pass_126 : -->2 uses.
pass_127 = PHI <pass_126(163), 0(160), 0(159), 0(164), 0(162), 0(161)>
if (pass_126 == 2)
# DEBUG pass => pass_126

pass_127 : --> single use.
if (pass_127 != 0)
# DEBUG pass => pass_127

map_128 : -->19 uses.
map_711 = map_128->rm_next;
matches[m_idx_101].map = map_128;
near_matches[nm_idx_116].map = map_128;
D.44856_649 = map_128->rm_pt;
D.44889_642 = map_128->rm_encoding;
D.44856_634 = map_128->rm_pt;
D.44854_610 = map_128->rm_rate;
D.44889_608 = map_128->rm_encoding;
D.44889_600 = map_128->rm_encoding;
D.44893_598 = map_128->rm_fmtp;
remote_codec_rate_596 = map_128->rm_rate;
D.44889_593 = map_128->rm_encoding;
D.44856_590 = map_128->rm_pt;
D.44856_586 = map_128->rm_pt;
D.44856_572 = map_128->rm_pt;
D.44856_567 = map_128->rm_pt;
D.44854_564 = map_128->rm_rate;
rm_encoding_561 = map_128->rm_encoding;
if (map_128 != 0B)
# DEBUG map => map_128

i_129 : -->6 uses.
i_710 = i_129 + 1;
matches[m_idx_101].codec_idx = i_129;
near_matches[nm_idx_116].codec_idx = i_129;
i.91_626 = (unsigned int) i_129;
D.44998_624 = i_129 < total_codecs_85;
D.44997_623 = D.44996_622 > i_129;
# DEBUG i => i_129

rm_encoding_130 : -->5 uses.
D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
D.44863_571 = strcasecmp (rm_encoding_130, "CN");
D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
# DEBUG rm_encoding => rm_encoding_130

map_bit_rate_131 : -->2 uses.
map_bit_rate_132 = PHI <map_bit_rate_1480(265), map_bit_rate_1480(267), map_bit_rate_131(272), map_bit_rate_131(273), 13332(264), 32001(266)>
map_bit_rate_132 = PHI <map_bit_rate_1480(265), map_bit_rate_1480(267), map_bit_rate_131(272), map_bit_rate_131(273), 13332(264), 32001(266)>
# DEBUG map_bit_rate => map_bit_rate_131

map_bit_rate_132 : -->3 uses.
D.44956_667 = map_bit_rate_132 != bit_rate_631;
D.44955_666 = map_bit_rate_132 != 0;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# DEBUG map_bit_rate => map_bit_rate_132

j_133 : -->6 uses.
D.45028_742 = near_matches[j_133].codec_idx;
j_736 = j_133 + 1;
near_map_727 = near_matches[j_133].map;
near_match_726 = near_matches[j_133].imp;
D.45012_724 = near_matches[j_133].rate;
if (j_133 < nm_idx_120)
# DEBUG j => j_133

timp_134 : -->5 uses.
matches[m_idx_106].imp = timp_134;
D.45027_740 = timp_134->actual_samples_per_second;
D.45024_738 = timp_134->microseconds_per_packet;
D.45026_737 = timp_134->iananame;
D.45024_734 = timp_134->microseconds_per_packet;
# DEBUG timp => timp_134

j_135 : -->7 uses.
j_807 = j_135 + 1;
if (j_135 == 0)
mmap_762 = matches[j_135].map;
mimp_761 = matches[j_135].imp;
D.45039_754 = matches[j_135].imp;
D.45034_747 = matches[j_135].map;
if (j_135 < m_idx_107)
# DEBUG j => j_135

map_136 : -->8 uses.
map_1021 = map_136->rm_next;
matches[m_idx_110].map = map_136;
D.45262_1013 = map_136->rm_rate;
D.45247_1003 = map_136->rm_pt;
D.45255_996 = map_136->rm_encoding;
D.45247_991 = map_136->rm_pt;
rm_encoding_979 = map_136->rm_encoding;
if (map_136 != 0B)
# DEBUG map => map_136

rm_encoding_137 : -->2 uses.
D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
# DEBUG rm_encoding => rm_encoding_137

vmatch_138 : --> single use.
if (vmatch_138 != 0)
# DEBUG vmatch => vmatch_138

i_139 : -->3 uses.
i_1020 = i_139 + 1;
i.99_982 = (unsigned int) i_139;
if (i_139 < total_codecs_85)
# DEBUG i => i_139

__result_140 : --> single use.
if (__result_140 == 0)
# DEBUG __result => __result_140

j_141 : -->7 uses.
j_1067 = j_141 + 1;
map_1050 = matches[j_141].map;
mimp_1049 = matches[j_141].imp;
if (j_141 == 0)
D.45279_1038 = matches[j_141].imp;
D.45274_1031 = matches[j_141].map;
if (j_141 < m_idx_112)
# DEBUG j => j_141

match_142 : --> single use.
return match_142;

iftmp.93_144 : --> single use.
match_661 = (uint8_t) iftmp.93_144;

near_rate_145 : --> single use.
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);

D.47922_146 : -->3 uses.
D.45073_794 = D.47922_146;
D.45073_789 = D.47922_146;
pmap_760->channels = D.47922_146;

session_161(D) : -->111 uses.
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));
D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);
D.44530_1085 = session_161(D)->channel;
switch_core_media_check_video_codecs (session_161(D));
D.44530_1081 = session_161(D)->channel;
D.44530_1075 = session_161(D)->channel;
D.44530_1074 = session_161(D)->channel;
D.44530_1071 = session_161(D)->channel;
D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);
D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
D.44530_989 = session_161(D)->channel;
D.44530_987 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
D.44530_967 = session_161(D)->channel;
D.44530_952 = session_161(D)->channel;
D.45140_885 = dtls_ok (session_161(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
D.44530_878 = session_161(D)->channel;
D.44530_866 = session_161(D)->channel;
D.44530_860 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
D.44530_856 = session_161(D)->channel;
D.44530_853 = session_161(D)->channel;
D.44530_849 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);
D.44530_842 = session_161(D)->channel;
D.44530_838 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);
D.44530_827 = session_161(D)->channel;
D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
D.44530_818 = session_161(D)->channel;
D.44530_814 = session_161(D)->channel;
D.44530_811 = session_161(D)->channel;
D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
D.44530_536 = session_161(D)->channel;
D.44530_511 = session_161(D)->channel;
D.44784_499 = dtls_ok (session_161(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
D.44530_473 = session_161(D)->channel;
D.44530_470 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
D.44530_459 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
D.44530_457 = session_161(D)->channel;
D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
D.44530_441 = session_161(D)->channel;
D.44530_438 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
D.44530_432 = session_161(D)->channel;
D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
D.44530_419 = session_161(D)->channel;
D.44530_417 = session_161(D)->channel;
D.44530_415 = session_161(D)->channel;
D.44530_407 = session_161(D)->channel;
D.44530_400 = session_161(D)->channel;
D.44530_395 = session_161(D)->channel;
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
D.44530_378 = session_161(D)->channel;
switch_core_session_set_ice (session_161(D));
switch_core_media_pass_zrtp_hash (session_161(D));
switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
D.44530_369 = session_161(D)->channel;
switch_core_media_prepare_codecs (session_161(D), 0);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
D.44649_357 = session_161(D)->bugs;
D.44530_354 = session_161(D)->channel;
D.44530_350 = session_161(D)->channel;
D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);
D.44530_340 = session_161(D)->channel;
D.44530_338 = session_161(D)->channel;
D.44530_322 = session_161(D)->channel;
D.44530_321 = session_161(D)->channel;
D.44530_316 = session_161(D)->channel;
D.44530_313 = session_161(D)->channel;
D.44530_309 = session_161(D)->channel;
D.44530_247 = session_161(D)->channel;
D.44530_244 = session_161(D)->channel;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");
D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
switch_core_session_parse_crypto_prefs (session_161(D));
D.44478_200 = dtls_ok (session_161(D));
smh_186 = session_161(D)->media_handle;
if (session_161(D) == 0B)
channel_162 = switch_core_session_get_channel (session_161(D));

channel_162 : -->6 uses.
D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
D.45114_834 = switch_channel_direction (channel_162);
switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);
var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
# DEBUG channel => channel_162

smh_186 : -->112 uses.
# DEBUG D#15 => &smh_186->engines
# DEBUG D#14 => &smh_186->engines[1]
D.47965_1505 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
D.47963_1507 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
D.47962_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
D.47961_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
D.47934_1488 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
D.47932_1490 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
D.47931_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
D.47930_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
D.45163_903 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45164_904;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45213_956;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1044;
D.45287_1046 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
D.45286_1068 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.45286_1072 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.45286_1076 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.45286_1078 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.45286_1082 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
D.45312_1090 = &MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].read_codec;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;
pmap_1461 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;
D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;
D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_760;
D.44605_764 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44750_808 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_812 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.44750_815 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
D.45094_819 = &MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].read_codec;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;
D.44605_840 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_851 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
D.44605_855 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
pmap_1457 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;
D.44471_1094 = smh_186->mparams;
check_ice (smh_186, 1, sdp_198, m_28);
greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);
D.45001_1022 = smh_186->crypto_mode;
D.44471_998 = smh_186->mparams;
D.44471_964 = smh_186->mparams;
D.44471_957 = smh_186->mparams;
D.44471_905 = smh_186->mparams;
D.44471_867 = smh_186->mparams;
D.44471_861 = smh_186->mparams;
D.44471_850 = smh_186->mparams;
D.44471_845 = smh_186->mparams;
D.44471_839 = smh_186->mparams;
D.44471_835 = smh_186->mparams;
D.44471_832 = smh_186->mparams;
D.44471_829 = smh_186->mparams;
D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);
check_ice (smh_186, 0, sdp_198, m_28);
D.44471_821 = smh_186->mparams;
smh_186->num_negotiated_codecs = D.45089_804;
smh_186->negotiated_codecs[D.44655_803] = mimp_761;
D.44655_803 = smh_186->num_negotiated_codecs;
smh_186->num_negotiated_codecs = 0;
greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);
D.45001_712 = smh_186->crypto_mode;
D.44471_644 = smh_186->mparams;
D.44471_621 = smh_186->mparams;
D.44471_577 = smh_186->mparams;
D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
D.44471_533 = smh_186->mparams;
D.44471_516 = smh_186->mparams;
D.44481_482 = smh_186->session;
D.44481_412 = smh_186->session;
D.44481_403 = smh_186->session;
check_ice (smh_186, 1, sdp_198, 0B);
check_ice (smh_186, 0, sdp_198, 0B);
D.44471_364 = smh_186->mparams;
D.44471_362 = smh_186->mparams;
codec_array_360 = &smh_186->negotiated_codecs;
D.44655_359 = smh_186->num_negotiated_codecs;
reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
D.44471_343 = smh_186->mparams;
D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
D.44509_240 = smh_186->origin;
D.44471_237 = smh_186->mparams;
D.44471_228 = smh_186->mparams;
smh_186->origin = D.44508_226;
D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
D.44481_207 = smh_186->session;
D.44481_205 = smh_186->session;
D.44481_201 = smh_186->session;
D.44471_191 = smh_186->mparams;
codec_array_190 = &smh_186->codecs;
if (smh_186 == 0B)
# DEBUG smh => smh_186

codec_array_190 : -->2 uses.
codec_array_363 = codec_array_190;
codec_array_84 = PHI <codec_array_360(124), codec_array_190(125), codec_array_363(126)>
# DEBUG codec_array => codec_array_190

D.44471_191 : --> single use.
total_codecs_192 = D.44471_191->num_codecs;

total_codecs_192 : --> single use.
total_codecs_85 = PHI <total_codecs_361(124), total_codecs_192(125), total_codecs_365(126)>
# DEBUG total_codecs => total_codecs_192

r_sdp_193(D) : -->7 uses.
D.44472_194 = strlen (r_sdp_193(D));
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);

D.44472_194 : --> single use.
D.44473_195 = (int) D.44472_194;

D.44473_195 : --> single use.
parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);

parser_196 : -->5 uses.
sdp_parser_free (parser_196);
if (parser_196 != 0B)
sdp_parser_free (parser_196);
sdp_198 = sdp_session (parser_196);
if (parser_196 == 0B)
# DEBUG parser => parser_196

sdp_198 : -->13 uses.
check_ice (smh_186, 1, sdp_198, m_28);
connection_879 = sdp_198->sdp_connection;
check_ice (smh_186, 0, sdp_198, m_28);
connection_554 = sdp_198->sdp_connection;
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
m_370 = sdp_198->sdp_media;
check_ice (smh_186, 1, sdp_198, 0B);
check_ice (smh_186, 0, sdp_198, 0B);
switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
attr_303 = sdp_198->sdp_attributes;
m_248 = sdp_198->sdp_media;
D.44506_224 = sdp_198->sdp_origin;
if (sdp_198 == 0B)
# DEBUG sdp => sdp_198

D.44478_200 : --> single use.
if (D.44478_200 != 0)

D.44481_201 : --> single use.
D.44482_202 = D.44481_201->channel;

D.44482_202 : --> single use.
tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);

tmp_203 : -->11 uses.
# DEBUG expr => tmp_203
D.49681_1556 = strcasecmp (tmp_203, "disallow");
D.49680_1555 = strcasecmp (tmp_203, "inactive");
D.49679_1554 = strcasecmp (tmp_203, "disabled");
D.49678_1553 = strcasecmp (tmp_203, "f");
D.49677_1552 = strcasecmp (tmp_203, "false");
D.49676_1551 = strcasecmp (tmp_203, "off");
D.49675_1550 = strcasecmp (tmp_203, "no");
# DEBUG __nptr => tmp_203
D.49683_1558 = strtol (tmp_203, 0B, 10);
D.49682_1557 = switch_is_number (tmp_203);
if (tmp_203 != 0B)
if (tmp_203 != 0B)
# DEBUG tmp => tmp_203

D.49673_204 : --> single use.
if (D.49673_204 != 0)

D.44481_205 : --> single use.
D.44482_206 = D.44481_205->channel;

D.44482_206 : --> single use.
switch_channel_clear_flag (D.44482_206, 111);

D.44481_207 : --> single use.
D.44482_208 = D.44481_207->channel;

D.44482_208 : --> single use.
switch_channel_clear_flag (D.44482_208, 109);

proceed_209(D) : -->4 uses.
*proceed_209(D) = 0;
if (proceed_209(D) != 0B)
*proceed_209(D) = 1;
if (proceed_209(D) != 0B)

D.44490_210 : --> single use.
greedy_211 = D.44490_210 != 0;

greedy_211 : -->2 uses.
greedy_47 = PHI <greedy_211(33), 0(34), 1(35), 1(36), greedy_211(37)>
greedy_47 = PHI <greedy_211(33), 0(34), 1(35), 1(36), greedy_211(37)>
# DEBUG greedy => greedy_211

D.44491_212 : --> single use.
scrooge_213 = D.44491_212 != 0;

scrooge_213 : -->2 uses.
scrooge_80 = PHI <scrooge_213(33), 0(34), 0(35), 1(36), scrooge_213(37)>
scrooge_80 = PHI <scrooge_213(33), 0(34), 0(35), 1(36), scrooge_213(37)>
# DEBUG scrooge => scrooge_213

val_214 : -->5 uses.
D.44502_221 = strcasecmp (val_214, "scrooge");
D.44498_218 = strcasecmp (val_214, "greedy");
D.44494_215 = strcasecmp (val_214, "generous");
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
if (val_214 != 0B)
# DEBUG val => val_214

D.44494_215 : --> single use.
if (D.44494_215 == 0)

D.44498_218 : --> single use.
if (D.44498_218 == 0)

D.44502_221 : --> single use.
if (D.44502_221 == 0)

D.44506_224 : --> single use.
D.44507_225 = D.44506_224->o_username;

D.44507_225 : --> single use.
D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);

D.44508_226 : -->3 uses.
D.44509_233 = D.44508_226;
D.44509_227 = D.44508_226;
smh_186->origin = D.44508_226;

D.44509_227 : --> single use.
if (D.44509_227 != 0B)

D.44471_228 : --> single use.
D.44512_229 = D.44471_228->auto_rtp_bugs;

D.44512_229 : --> single use.
D.44513_230 = (int) D.44512_229;

D.44513_230 : --> single use.
D.44514_231 = D.44513_230 & 1;

D.44514_231 : --> single use.
if (D.44514_231 != 0)

D.44509_233 : --> single use.
D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");

D.44518_234 : --> single use.
if (D.44518_234 != 0B)

D.44521_235 : --> single use.
D.44522_236 = D.44521_235 | 1;

D.44522_236 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;

D.44471_237 : --> single use.
D.44512_238 = D.44471_237->auto_rtp_bugs;

D.44512_238 : --> single use.
D.44523_239 = D.44512_238 & 2;

D.44523_239 : --> single use.
if (D.44523_239 != 0)

D.44509_240 : --> single use.
D.44526_241 = strstr (D.44509_240, "Sonus_UAC");

D.44526_241 : --> single use.
if (D.44526_241 != 0B)

D.44521_242 : --> single use.
D.44529_243 = D.44521_242 | 2;

D.44529_243 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;

D.44530_244 : --> single use.
val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);

val_245 : -->11 uses.
# DEBUG expr => val_245
D.49693_1566 = strcasecmp (val_245, "allow");
D.49692_1565 = strcasecmp (val_245, "active");
D.49691_1564 = strcasecmp (val_245, "enabled");
D.49690_1563 = strcasecmp (val_245, "t");
D.49689_1562 = strcasecmp (val_245, "true");
D.49688_1561 = strcasecmp (val_245, "on");
D.49687_1560 = strcasecmp (val_245, "yes");
# DEBUG __nptr => val_245
D.49695_1568 = strtol (val_245, 0B, 10);
D.49694_1567 = switch_is_number (val_245);
if (val_245 != 0B)
if (val_245 != 0B)
# DEBUG val => val_245

D.49685_246 : --> single use.
if (D.49685_246 != 0)

D.44530_247 : --> single use.
switch_channel_set_flag_value (D.44530_247, 93, 1);

m_248 : -->3 uses.
D.44546_254 = m_248->m_connections;
D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
if (m_248 != 0B)
# DEBUG m => m_248

D.44540_249 : --> single use.
D.44541_250 = D.44540_249 & 6;

D.44541_250 : -->2 uses.
D.44543_252 = D.44541_250 == 0;
D.44542_251 = D.44541_250 == 2;

D.44542_251 : --> single use.
D.44544_253 = D.44542_251 || D.44543_252;

D.44543_252 : --> single use.
D.44544_253 = D.44542_251 || D.44543_252;

D.44544_253 : --> single use.
if (D.44544_253 != 0)

D.44546_254 : -->3 uses.
D.44546_298 = D.44546_254;
D.44546_255 = D.44546_254;
if (D.44546_254 != 0B)

D.44546_255 : --> single use.
D.44548_256 = D.44546_255->c_address;

D.44548_256 : -->2 uses.
D.44548_299 = D.44548_256;
if (D.44548_256 != 0B)

D.44546_298 : --> no uses.

D.44548_299 : --> single use.
__result_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");

__result_300 : --> single use.
if (__result_300 == 0)

attr_303 : --> single use.
attr_29 = PHI <attr_303(65), attr_334(84)>
# DEBUG attr => attr_303

D.44590_304 : -->8 uses.
D.44590_330 = D.44590_304;
D.44590_326 = D.44590_304;
D.44590_323 = D.44590_304;
D.44590_314 = D.44590_304;
D.44590_310 = D.44590_304;
D.44590_306 = D.44590_304;
D.47877_1465 = *D.44590_304;
if (D.44590_304 == 0B)
# DEBUG s => D.44590_304

D.44590_306 : --> single use.
D.44594_307 = strcasecmp (D.44590_306, "sendonly");

D.44594_307 : --> single use.
if (D.44594_307 == 0)

D.44530_309 : --> single use.
switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);

D.44590_310 : --> single use.
D.44598_311 = strcasecmp (D.44590_310, "inactive");

D.44598_311 : --> single use.
if (D.44598_311 == 0)

D.44530_313 : --> single use.
switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);

D.44590_314 : --> single use.
D.44602_315 = strcasecmp (D.44590_314, "recvonly");

D.44602_315 : --> single use.
if (D.44602_315 == 0)

D.44530_316 : --> single use.
switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);

D.44605_318 : --> single use.
D.44606_319 = switch_rtp_ready (D.44605_318);

D.44606_319 : --> single use.
if (D.44606_319 != 0)

D.44605_320 : --> single use.
switch_rtp_set_max_missed_packets (D.44605_320, 0);

D.44530_321 : --> single use.
switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);

D.44530_322 : --> single use.
switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);

D.44590_323 : --> single use.
D.44614_324 = strcasecmp (D.44590_323, "sendrecv");

D.44614_324 : --> single use.
if (D.44614_324 == 0)

D.44590_326 : --> single use.
D.44616_327 = strcasecmp (D.44590_326, "ptime");

D.44616_327 : --> single use.
if (D.44616_327 == 0)

D.44619_328 : --> single use.
dptime_1467 = strtol (D.44619_328, 0B, 10);
# DEBUG __nptr => D.44619_328

D.44590_330 : --> single use.
D.44621_331 = strcasecmp (D.44590_330, "maxptime");

D.44621_331 : --> single use.
if (D.44621_331 == 0)

D.44619_332 : --> single use.
dmaxptime_1468 = strtol (D.44619_332, 0B, 10);
# DEBUG __nptr => D.44619_332

attr_334 : --> single use.
attr_29 = PHI <attr_303(65), attr_334(84)>
# DEBUG attr => attr_334

D.44624_335 : --> single use.
D.44626_337 = D.44624_335 && D.44625_336;

D.44625_336 : --> single use.
D.44626_337 = D.44624_335 && D.44625_336;

D.44626_337 : --> single use.
if (D.44626_337 != 0)

D.44530_338 : --> single use.
switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);

D.44631_339 : --> single use.
if (D.44631_339 == 0)

D.44530_340 : --> single use.
val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);

val_341 : -->11 uses.
# DEBUG expr => val_341
D.49705_1576 = strcasecmp (val_341, "allow");
D.49704_1575 = strcasecmp (val_341, "active");
D.49703_1574 = strcasecmp (val_341, "enabled");
D.49702_1573 = strcasecmp (val_341, "t");
D.49701_1572 = strcasecmp (val_341, "true");
D.49700_1571 = strcasecmp (val_341, "on");
D.49699_1570 = strcasecmp (val_341, "yes");
# DEBUG __nptr => val_341
D.49707_1578 = strtol (val_341, 0B, 10);
D.49706_1577 = switch_is_number (val_341);
if (val_341 != 0B)
if (val_341 == 0B)
# DEBUG val => val_341

D.49697_342 : --> single use.
if (D.49697_342 == 0)

D.44471_343 : -->2 uses.
D.44471_345 = D.44471_343;
D.44636_344 = D.44471_343->hold_laps;

D.44636_344 : -->2 uses.
D.44636_346 = D.44636_344;
if (D.44636_344 == 0)

D.44471_345 : --> single use.
D.44471_345->hold_laps = D.44639_347;

D.44636_346 : --> single use.
D.44639_347 = D.44636_346 + 1;

D.44639_347 : --> single use.
D.44471_345->hold_laps = D.44639_347;

D.44640_348 : --> single use.
if (D.44640_348 != 0)

reneg_349 : --> single use.
reneg_81 = PHI <1(88), 1(101), 1(102), 1(103), reneg_349(104), reneg_352(105)>
# DEBUG reneg => reneg_349

D.44530_350 : --> single use.
val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);

val_351 : -->2 uses.
reneg_352 = switch_true (val_351);
if (val_351 != 0B)
# DEBUG val => val_351

reneg_352 : --> single use.
reneg_81 = PHI <1(88), 1(101), 1(102), 1(103), reneg_349(104), reneg_352(105)>
# DEBUG reneg => reneg_352

reneg_353 : --> single use.
reneg_82 = PHI <reneg_81(106), reneg_353(107), reneg_356(119)>
# DEBUG reneg => reneg_353

D.44530_354 : --> single use.
val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);

val_355 : -->11 uses.
# DEBUG expr => val_355
D.49717_1586 = strcasecmp (val_355, "allow");
D.49716_1585 = strcasecmp (val_355, "active");
D.49715_1584 = strcasecmp (val_355, "enabled");
D.49714_1583 = strcasecmp (val_355, "t");
D.49713_1582 = strcasecmp (val_355, "true");
D.49712_1581 = strcasecmp (val_355, "on");
D.49711_1580 = strcasecmp (val_355, "yes");
# DEBUG __nptr => val_355
D.49719_1588 = strtol (val_355, 0B, 10);
D.49718_1587 = switch_is_number (val_355);
if (val_355 != 0B)
if (val_355 != 0B)
# DEBUG val => val_355

reneg_356 : --> single use.
reneg_82 = PHI <reneg_81(106), reneg_353(107), reneg_356(119)>

D.44649_357 : --> single use.
if (D.44649_357 != 0B)

D.44655_359 : -->2 uses.
total_codecs_361 = D.44655_359;
if (D.44655_359 != 0)

codec_array_360 : --> single use.
codec_array_84 = PHI <codec_array_360(124), codec_array_190(125), codec_array_363(126)>
# DEBUG codec_array => codec_array_360

total_codecs_361 : --> single use.
total_codecs_85 = PHI <total_codecs_361(124), total_codecs_192(125), total_codecs_365(126)>
# DEBUG total_codecs => total_codecs_361

D.44471_362 : --> single use.
D.44471_362->num_codecs = 0;

codec_array_363 : --> single use.
codec_array_84 = PHI <codec_array_360(124), codec_array_190(125), codec_array_363(126)>
# DEBUG codec_array => codec_array_363

D.44471_364 : --> single use.
total_codecs_365 = D.44471_364->num_codecs;

total_codecs_365 : --> single use.
total_codecs_85 = PHI <total_codecs_361(124), total_codecs_192(125), total_codecs_365(126)>
# DEBUG total_codecs => total_codecs_365

D.44661_366 : --> single use.
if (D.44661_366 != 0B)

D.44663_367 : --> single use.
if (D.44663_367 != 0B)

D.44665_368 : --> single use.
if (D.44665_368 != 0B)

D.44530_369 : --> single use.
switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);

m_370 : --> single use.
m_28 = PHI <m_370(131), m_1093(489)>
# DEBUG m => m_370

D.44666_373 : --> single use.
if (D.44666_373 == 261)

got_webrtc_374 : --> single use.
got_webrtc_78 = PHI <got_webrtc_79(132), got_webrtc_374(133)>
# DEBUG got_webrtc => got_webrtc_374

D.44669_375 : -->2 uses.
D.44669_376 = D.44669_375;
if (D.44669_375 != 0B)

D.44669_376 : --> single use.
D.44672_377 = strcasecmp (D.44669_376, "UDP/TLS/RTP/SAVPF");

D.44672_377 : --> single use.
if (D.44672_377 == 0)

D.44530_378 : --> single use.
switch_channel_set_flag_value (D.44530_378, 107, 1);

D.44675_379 : -->4 uses.
D.44666_390 = D.44675_379;
D.44666_386 = D.44675_379;
D.44677_381 = D.44675_379 == 261;
D.44676_380 = D.44675_379 == 257;

D.44676_380 : --> single use.
D.44678_382 = D.44676_380 || D.44677_381;

D.44677_381 : --> single use.
D.44678_382 = D.44676_380 || D.44677_381;

D.44678_382 : --> single use.
if (D.44678_382 != 0)

D.44681_383 : --> single use.
if (D.44681_383 == 2)

got_savp_384 : --> single use.
got_savp_74 = PHI <got_savp_75(138), got_savp_75(141), got_savp_75(143), got_savp_75(144), got_savp_384(139), got_savp_75(142)>
# DEBUG got_savp => got_savp_384

D.44666_386 : --> single use.
if (D.44666_386 == 256)

D.44681_387 : --> single use.
if (D.44681_387 == 2)

got_avp_388 : --> single use.
got_avp_68 = PHI <got_avp_69(138), got_avp_69(141), got_avp_69(143), got_avp_69(144), got_avp_69(139), got_avp_388(142)>
# DEBUG got_avp => got_avp_388

D.44666_390 : --> single use.
if (D.44666_390 == 258)

got_udptl_391 : --> single use.
got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>
# DEBUG got_udptl => got_udptl_391

D.44681_392 : --> single use.
if (D.44681_392 == 8)

D.44697_393 : --> single use.
if (D.44697_393 != 0)

t38_options_394 : -->3 uses.
switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
D.44753_448 = t38_options_394->remote_port;
D.44751_445 = t38_options_394->remote_ip;
# DEBUG t38_options => t38_options_394

D.44530_395 : --> single use.
D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);

D.44699_396 : --> single use.
if (D.44699_396 != 0)

D.44702_398 : --> single use.
D.44703_399 = switch_true (D.44702_398);

D.44703_399 : --> single use.
if (D.44703_399 != 0)

D.44530_400 : --> single use.
switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);

var_402 : -->3 uses.
D.44716_410 = strcasecmp (var_402, "once");
pass_409 = switch_true (var_402);
if (var_402 != 0B)
# DEBUG var => var_402

D.44481_403 : --> single use.
D.44482_404 = D.44481_403->channel;

D.44482_404 : --> single use.
D.44706_405 = switch_channel_test_flag (D.44482_404, 101);

D.44706_405 : --> single use.
pass_406 = (int) D.44706_405;

pass_406 : --> single use.
pass_126 = PHI <pass_406(154), pass_409(155), pass_409(156), 2(157)>
# DEBUG pass => pass_406

D.44530_407 : --> single use.
D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);

D.44707_408 : --> single use.
if (D.44707_408 != 0)

pass_409 : -->3 uses.
pass_126 = PHI <pass_406(154), pass_409(155), pass_409(156), 2(157)>
pass_126 = PHI <pass_406(154), pass_409(155), pass_409(156), 2(157)>
if (pass_409 == 0)
# DEBUG pass => pass_409

D.44716_410 : --> single use.
if (D.44716_410 == 0)

D.44481_412 : --> single use.
D.44482_413 = D.44481_412->channel;

D.44482_413 : --> single use.
D.44723_414 = switch_channel_test_flag (D.44482_413, 101);

D.44723_414 : --> single use.
if (D.44723_414 != 0)

D.44530_415 : --> single use.
D.44724_416 = switch_channel_test_flag (D.44530_415, 103);

D.44724_416 : --> single use.
if (D.44724_416 == 0)

D.44530_417 : --> single use.
D.44726_418 = switch_channel_test_flag (D.44530_417, 15);

D.44726_418 : --> single use.
if (D.44726_418 != 0)

D.44530_419 : --> single use.
D.44728_420 = switch_channel_test_flag (D.44530_419, 29);

D.44728_420 : --> single use.
if (D.44728_420 != 0)

D.44605_421 : --> single use.
D.44730_422 = switch_rtp_ready (D.44605_421);

D.44730_422 : --> single use.
if (D.44730_422 == 0)

D.44733_424 : --> single use.
if (D.44733_424 == 0)

other_session.89_425 : --> single use.
other_channel_426 = switch_core_session_get_channel (other_session.89_425);

other_channel_426 : -->3 uses.
switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);
D.44741_434 = switch_channel_get_name (other_channel_426);
D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
# DEBUG other_channel => other_channel_426

D.44605_427 : --> single use.
remote_host_428 = switch_rtp_get_remote_host (D.44605_427);

remote_host_428 : -->3 uses.
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
D.44756_449 = remote_host_428 != 0B;
# DEBUG remote_host => remote_host_428

D.44605_429 : --> single use.
remote_port_430 = switch_rtp_get_remote_port (D.44605_429);

remote_port_430 : -->3 uses.
D.44766_461 = (int) remote_port_430;
if (D.44762_456 == remote_port_430)
D.44757_450 = remote_port_430 != 0;
# DEBUG remote_port => remote_port_430

D.44737_431 : --> single use.
if (D.44737_431 == 0)

D.44530_432 : --> single use.
D.44740_433 = switch_channel_get_name (D.44530_432);

D.44740_433 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

D.44741_434 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

other_session.89_435 : --> single use.
switch_core_session_rwunlock (other_session.89_435);

D.44530_438 : --> single use.
D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);

D.44742_439 : --> single use.
D.44743_440 = switch_true (D.44742_439);

D.44743_440 : --> single use.
if (D.44743_440 != 0)

D.44530_441 : --> single use.
D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);

D.44746_442 : --> single use.
D.44747_443 = switch_true (D.44746_442);

D.44747_443 : --> single use.
if (D.44747_443 != 0)

D.44750_444 : --> single use.
D.44750_444->remote_sdp_ip = D.44752_446;

D.44751_445 : --> single use.
D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);

D.44752_446 : --> single use.
D.44750_444->remote_sdp_ip = D.44752_446;

D.44750_447 : -->3 uses.
D.44750_455 = D.44750_447;
D.44750_452 = D.44750_447;
D.44750_447->remote_sdp_port = D.44753_448;

D.44753_448 : -->2 uses.
D.44762_456 = D.44753_448;
D.44750_447->remote_sdp_port = D.44753_448;

D.44756_449 : --> single use.
D.44758_451 = D.44756_449 && D.44757_450;

D.44757_450 : --> single use.
D.44758_451 = D.44756_449 && D.44757_450;

D.44758_451 : --> single use.
if (D.44758_451 != 0)

D.44750_452 : --> single use.
D.44760_453 = D.44750_452->remote_sdp_ip;

D.44760_453 : --> single use.
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);

D.39032_454 : --> single use.
if (D.39032_454 == 0)

D.44750_455 : --> no uses.

D.44762_456 : --> single use.
if (D.44762_456 == remote_port_430)

D.44530_457 : --> single use.
D.44764_458 = switch_channel_get_name (D.44530_457);

D.44764_458 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);

D.44530_459 : --> single use.
D.44765_460 = switch_channel_get_name (D.44530_459);

D.44765_460 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44766_461 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44750_462 : -->2 uses.
D.44750_464 = D.44750_462;
D.44760_463 = D.44750_462->remote_sdp_ip;

D.44760_463 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44750_464 : --> single use.
D.44762_465 = D.44750_464->remote_sdp_port;

D.44762_465 : --> single use.
D.44767_466 = (int) D.44762_465;

D.44767_466 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);

D.44750_467 : --> single use.
D.44762_468 = D.44750_467->remote_sdp_port;

D.44762_468 : --> single use.
D.44767_469 = (int) D.44762_468;

D.44767_469 : --> single use.
switch_snprintf (&tmp, 32, "%d", D.44767_469);

D.44530_470 : --> single use.
switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);

D.44750_471 : --> single use.
D.44760_472 = D.44750_471->remote_sdp_ip;

D.44760_472 : --> single use.
switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);

D.44530_473 : --> single use.
switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);

D.44605_474 : --> single use.
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);

D.44750_475 : -->2 uses.
D.44750_477 = D.44750_475;
D.44760_476 = D.44750_475->remote_sdp_ip;

D.44760_476 : --> single use.
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);

D.44750_477 : --> single use.
D.44762_478 = D.44750_477->remote_sdp_port;

D.44762_478 : --> single use.
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);

D.44768_479 : --> single use.
if (D.44768_479 != 0)

err.90_480 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);

other_session.89_481 : --> single use.
switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);

D.44481_482 : --> single use.
D.44482_483 = D.44481_482->channel;

D.44482_483 : --> single use.
switch_channel_set_flag_value (D.44482_483, 101, 1);

other_session.89_484 : --> single use.
D.44772_485 = other_session.89_484->channel;

D.44772_485 : --> single use.
switch_channel_set_flag_value (D.44772_485, 101, 1);

other_session.89_486 : --> single use.
msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);

msg_487 : -->4 uses.
switch_core_session_queue_message (other_session.89_490, msg_487);
msg_487->string_arg = D.44773_489;
msg_487->from = "src/switch_core_media.c";
msg_487->message_id = 21;
# DEBUG msg => msg_487

other_session.89_488 : --> single use.
D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);

D.44773_489 : --> single use.
msg_487->string_arg = D.44773_489;

other_session.89_490 : --> single use.
switch_core_session_queue_message (other_session.89_490, msg_487);

other_session.89_491 : --> single use.
switch_core_session_rwunlock (other_session.89_491);

D.44681_493 : -->2 uses.
D.44681_872 = D.44681_493;
if (D.44681_493 == 2)

D.44697_494 : --> single use.
D.44777_495 = D.44697_494 != 0;

D.44777_495 : --> single use.
D.44779_497 = D.44777_495 && D.44778_496;

D.44778_496 : --> single use.
D.44779_497 = D.44777_495 && D.44778_496;

D.44779_497 : --> single use.
if (D.44779_497 != 0)

D.44781_498 : --> single use.
if (D.44781_498 != 0)

D.44784_499 : --> single use.
if (D.44784_499 != 0)

attr_500 : --> single use.
attr_30 = PHI <attr_500(183), attr_506(190)>
# DEBUG attr => attr_500

D.44590_501 : --> single use.
D.44787_502 = strcasecmp (D.44590_501, "fingerprint");

D.44787_502 : --> single use.
if (D.44787_502 == 0)

D.44619_503 : -->2 uses.
D.47887_1469 = *D.44619_503;
if (D.44619_503 == 0B)
# DEBUG s => D.44619_503

attr_506 : --> single use.
attr_30 = PHI <attr_500(183), attr_506(190)>
# DEBUG attr => attr_506

attr_507 : --> single use.
attr_31 = PHI <attr_507(192), attr_548(225)>
# DEBUG attr => attr_507

D.44590_508 : -->4 uses.
D.44590_529 = D.44590_508;
D.44590_524 = D.44590_508;
D.44590_519 = D.44590_508;
D.44795_509 = strcasecmp (D.44590_508, "rtcp");

D.44795_509 : --> single use.
if (D.44795_509 == 0)

D.44619_510 : -->2 uses.
D.44619_512 = D.44619_510;
if (D.44619_510 != 0B)

D.44530_511 : --> single use.
switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);

D.44619_512 : --> single use.
switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);

D.44619_513 : --> single use.
D.47890_1471 = strtol (D.44619_513, 0B, 10);
# DEBUG __nptr => D.44619_513

D.44799_515 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;

D.44471_516 : -->2 uses.
D.44471_518 = D.44471_516;
D.44800_517 = D.44471_516->rtcp_audio_interval_msec;

D.44800_517 : --> single use.
if (D.44800_517 == 0B)

D.44471_518 : --> single use.
D.44471_518->rtcp_audio_interval_msec = "5000";

D.44590_519 : --> single use.
D.44805_520 = strcasecmp (D.44590_519, "ptime");

D.44805_520 : --> single use.
if (D.44805_520 == 0)

D.44619_521 : -->2 uses.
D.44619_522 = D.44619_521;
if (D.44619_521 != 0B)

D.44619_522 : --> single use.
ptime_1472 = strtol (D.44619_522, 0B, 10);
# DEBUG __nptr => D.44619_522

D.44590_524 : --> single use.
D.44810_525 = strcasecmp (D.44590_524, "maxptime");

D.44810_525 : --> single use.
if (D.44810_525 == 0)

D.44619_526 : -->2 uses.
D.44619_527 = D.44619_526;
if (D.44619_526 != 0B)

D.44619_527 : --> single use.
maxptime_1473 = strtol (D.44619_527, 0B, 10);
# DEBUG __nptr => D.44619_527

D.44590_529 : --> single use.
D.44815_530 = strcasecmp (D.44590_529, "crypto");

D.44815_530 : --> single use.
if (D.44815_530 == 0)

D.44619_531 : -->2 uses.
D.47900_1474 = *D.44619_531;
if (D.44619_531 == 0B)
# DEBUG s => D.44619_531

D.44471_533 : --> single use.
D.44821_534 = D.44471_533->ndlb;

D.44821_534 : --> single use.
D.44822_535 = D.44821_534 & 4;

D.44822_535 : --> single use.
if (D.44822_535 == 0)

D.44530_536 : --> single use.
D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);

D.44825_537 : -->10 uses.
D.49729_1596 = strcasecmp (D.44825_537, "allow");
D.49728_1595 = strcasecmp (D.44825_537, "active");
D.49727_1594 = strcasecmp (D.44825_537, "enabled");
D.49726_1593 = strcasecmp (D.44825_537, "t");
D.49725_1592 = strcasecmp (D.44825_537, "true");
D.49724_1591 = strcasecmp (D.44825_537, "on");
D.49723_1590 = strcasecmp (D.44825_537, "yes");
# DEBUG __nptr => D.44825_537
D.49731_1598 = strtol (D.44825_537, 0B, 10);
D.49730_1597 = switch_is_number (D.44825_537);
if (D.44825_537 != 0B)
# DEBUG expr => D.44825_537

D.49721_538 : --> single use.
if (D.49721_538 == 0)

D.44666_539 : --> single use.
D.44829_540 = D.44666_539 != 257;

D.44829_540 : --> single use.
D.44831_542 = D.44829_540 && D.44830_541;

D.44830_541 : --> single use.
D.44831_542 = D.44829_540 && D.44830_541;

D.44831_542 : --> single use.
if (D.44831_542 != 0)

crypto_544 : -->2 uses.
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));
crypto_tag_1476 = strtol (crypto_544, 0B, 10);
# DEBUG __nptr => crypto_544
# DEBUG crypto => crypto_544

sdp_type_546(D) : -->4 uses.
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

got_crypto_547 : --> single use.
got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
# DEBUG got_crypto => got_crypto_547

attr_548 : --> single use.
attr_31 = PHI <attr_507(192), attr_548(225)>
# DEBUG attr => attr_548

D.44834_549 : --> single use.
D.44836_551 = D.44834_549 && D.44835_550;

D.44835_550 : --> single use.
D.44836_551 = D.44834_549 && D.44835_550;

D.44836_551 : --> single use.
if (D.44836_551 != 0)

D.44839_552 : --> single use.
if (D.44839_552 == 0)

connection_554 : --> single use.
connection_124 = PHI <connection_554(230), connection_556(231)>
# DEBUG connection => connection_554

D.44546_555 : -->2 uses.
connection_556 = D.44546_555;
if (D.44546_555 != 0B)

connection_556 : --> single use.
connection_124 = PHI <connection_554(230), connection_556(231)>
# DEBUG connection => connection_556

map_559 : --> single use.
map_128 = PHI <map_559(234), map_711(310)>
# DEBUG map => map_559

rm_encoding_561 : -->2 uses.
rm_encoding_130 = PHI <rm_encoding_561(235), ""(236)>
if (rm_encoding_561 == 0B)
# DEBUG rm_encoding => rm_encoding_561

D.44848_563 : --> single use.
if (D.44848_563 == 0)

D.44854_564 : --> single use.
if (D.44854_564 == D.44855_566)

D.44750_565 : --> single use.
D.44855_566 = D.44750_565->rm_rate;

D.44855_566 : --> single use.
if (D.44854_564 == D.44855_566)

D.44856_567 : --> single use.
best_te_568 = (switch_payload_t) D.44856_567;

best_te_568 : -->2 uses.
best_te_18 = PHI <best_te_20(239), best_te_568(240)>
D.44857_569 = (int) best_te_568;
# DEBUG best_te => best_te_568

D.44857_569 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);

D.44858_570 : --> single use.
if (D.44858_570 == 0)

D.44863_571 : --> single use.
if (D.44863_571 == 0)

D.44856_572 : --> single use.
cng_pt_573 = (switch_payload_t) D.44856_572;

cng_pt_573 : -->2 uses.
cng_pt_24 = PHI <cng_pt_25(241), cng_pt_573(247), cng_pt_25(248), cng_pt_25(249), cng_pt_25(309)>
D.44868_575 = (int) cng_pt_573;
# DEBUG cng_pt => cng_pt_573

D.44605_574 : --> single use.
if (D.44605_574 != 0B)

D.44868_575 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);

D.44605_576 : --> single use.
switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

D.44471_577 : --> single use.
D.44869_578 = D.44471_577->cng_pt;

D.44869_578 : --> single use.
switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

x_580 : -->3 uses.
x_48 = PHI <x_49(241), x_49(247), x_580(248), x_580(249), x_580(309)>
x_48 = PHI <x_49(241), x_49(247), x_580(248), x_580(249), x_580(309)>
x_48 = PHI <x_49(241), x_49(247), x_580(248), x_580(249), x_580(309)>
# DEBUG x => x_580

D.44877_582 : --> single use.
D.44879_584 = D.44877_582 || D.44878_583;

D.44878_583 : --> single use.
D.44879_584 = D.44877_582 || D.44878_583;

D.44879_584 : --> single use.
if (D.44879_584 != 0)

D.44856_586 : --> single use.
D.44884_587 = (uint32_t) D.44856_586;

D.44884_587 : --> single use.
D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);

D.44885_588 : --> single use.
codec_ms_589 = (int) D.44885_588;

codec_ms_589 : --> single use.
codec_ms_87 = PHI <codec_ms_86(253), codec_ms_589(254)>
# DEBUG codec_ms => codec_ms_589

D.44856_590 : --> single use.
csui.173_591 = (unsigned char) D.44856_590;

csui.173_591 : -->2 uses.
map_bit_rate_1479 = CSWTCH.174[csui.173_591];
if (csui.173_591 <= 18)
# DEBUG payload => csui.173_591

D.44889_593 : --> single use.
D.44890_594 = strcasecmp (D.44889_593, "g723");

D.44890_594 : --> single use.
if (D.44890_594 == 0)

remote_codec_rate_596 : --> single use.
remote_codec_rate_98 = PHI <remote_codec_rate_596(274), remote_codec_rate_97(307)>
# DEBUG remote_codec_rate => remote_codec_rate_596

D.44893_598 : -->3 uses.
D.44893_609 = D.44893_598;
D.47915_1481 = *D.44893_598;
if (D.44893_598 == 0B)
# DEBUG s => D.44893_598

D.44889_600 : -->2 uses.
D.44889_604 = D.44889_600;
D.44897_601 = strcasecmp (D.44889_600, "ilbc");

D.44897_601 : --> single use.
if (D.44897_601 == 0)

D.44889_604 : --> single use.
D.44901_605 = strcasecmp (D.44889_604, "isac");

D.44901_605 : --> single use.
if (D.44901_605 == 0)

D.44889_608 : --> single use.
D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);

D.44893_609 : --> single use.
D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);

D.44854_610 : --> single use.
D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);

D.44905_611 : --> single use.
if (D.44905_611 == 0)

D.44908_612 : -->2 uses.
D.44908_613 = D.44908_612;
if (D.44908_612 != 0)

D.44908_613 : --> single use.
map_bit_rate_614 = (uint32_t) D.44908_613;

map_bit_rate_614 : --> single use.
map_bit_rate_131 = PHI <map_bit_rate_1480(268), map_bit_rate_614(269)>
# DEBUG map_bit_rate => map_bit_rate_614

D.44911_615 : -->2 uses.
D.44911_616 = D.44911_615;
if (D.44911_615 != 0)

D.44911_616 : --> single use.
codec_ms_617 = D.44911_616 / 1000;

codec_ms_617 : --> single use.
codec_ms_89 = PHI <codec_ms_88(270), codec_ms_617(271)>
# DEBUG codec_ms => codec_ms_617

D.44914_618 : -->2 uses.
fmtp_remote_codec_rate_619 = D.44914_618;
if (D.44914_618 != 0)

fmtp_remote_codec_rate_619 : --> single use.
fmtp_remote_codec_rate_99 = PHI <0(265), 0(267), 0(272), fmtp_remote_codec_rate_619(273), 0(264), 0(266)>
# DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_619

D.44471_621 : --> single use.
D.44996_622 = D.44471_621->num_codecs;

D.44996_622 : --> single use.
D.44997_623 = D.44996_622 > i_129;

D.44997_623 : --> single use.
D.44999_625 = D.44997_623 && D.44998_624;

D.44998_624 : --> single use.
D.44999_625 = D.44997_623 && D.44998_624;

D.44999_625 : --> single use.
if (D.44999_625 != 0)

i.91_626 : --> single use.
D.44918_627 = i.91_626 * 4;

D.44918_627 : --> single use.
D.44919_628 = codec_array_84 + D.44918_627;

D.44919_628 : --> single use.
imp_629 = *D.44919_628;

imp_629 : -->21 uses.
D.44929_707 = imp_629->microseconds_per_packet;
D.44927_705 = imp_629->ianacode;
D.44926_704 = imp_629->iananame;
matches[m_idx_101].imp = imp_629;
near_matches[nm_idx_116].imp = imp_629;
D.44929_698 = imp_629->microseconds_per_packet;
D.44927_696 = imp_629->ianacode;
D.44926_695 = imp_629->iananame;
D.44929_693 = imp_629->microseconds_per_packet;
D.44929_687 = imp_629->microseconds_per_packet;
D.44984_686 = imp_629->samples_per_second;
D.44926_685 = imp_629->iananame;
D.44947_658 = imp_629->actual_samples_per_second;
D.44926_656 = imp_629->iananame;
D.44927_653 = imp_629->ianacode;
D.44929_640 = imp_629->microseconds_per_packet;
D.44927_638 = imp_629->ianacode;
D.44926_637 = imp_629->iananame;
D.44921_633 = imp_629->codec_type;
codec_rate_632 = imp_629->samples_per_second;
D.44920_630 = imp_629->bits_per_second;
# DEBUG imp => imp_629

D.44920_630 : --> single use.
bit_rate_631 = (uint32_t) D.44920_630;

bit_rate_631 : -->5 uses.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
D.44956_667 = map_bit_rate_132 != bit_rate_631;
D.44951_664 = bit_rate_631 != 0;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# DEBUG bit_rate => bit_rate_631

codec_rate_632 : -->8 uses.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
codec_rate.94_702 = (int) codec_rate_632;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
if (remote_codec_rate_96 != codec_rate_632)
D.44973_678 = remote_codec_rate_96 != codec_rate_632;
D.44972_677 = codec_rate_632 != 0;
if (remote_codec_rate_98 == codec_rate_632)
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# DEBUG codec_rate => codec_rate_632

D.44921_633 : --> single use.
if (D.44921_633 != 0)

D.44856_634 : --> single use.
D.44924_635 = (int) D.44856_634;

D.44924_635 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

remote_codec_rate.92_636 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

D.44926_637 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

D.44927_638 : --> single use.
D.44928_639 = (int) D.44927_638;

D.44928_639 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

D.44929_640 : --> single use.
D.44930_641 = D.44929_640 / 1000;

D.44930_641 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);

D.44889_642 : -->6 uses.
D.44889_682 = D.44889_642;
D.44889_680 = D.44889_642;
D.44889_671 = D.44889_642;
D.44889_669 = D.44889_642;
D.47919_1483 = *D.44889_642;
if (D.44889_642 == 0B)
# DEBUG s => D.44889_642

D.44471_644 : --> single use.
D.44821_645 = D.44471_644->ndlb;

D.44821_645 : --> single use.
D.44936_646 = (int) D.44821_645;

D.44936_646 : --> single use.
D.44937_647 = D.44936_646 & 1;

D.44937_647 : --> single use.
if (D.44937_647 != 0)

D.44856_649 : -->2 uses.
D.44856_651 = D.44856_649;
D.44924_650 = (int) D.44856_649;

D.44924_650 : -->2 uses.
D.44924_652 = D.44924_650;
if (D.44924_650 <= 95)

D.44856_651 : --> no uses.

D.44924_652 : --> single use.
match_655 = D.44924_652 == D.44928_654;

D.44927_653 : --> single use.
D.44928_654 = (int) D.44927_653;

D.44928_654 : --> single use.
match_655 = D.44924_652 == D.44928_654;

match_655 : --> single use.
match_1 = PHI <match_655(282), match_661(287), match_661(288)>
# DEBUG match => match_655

D.44926_656 : --> single use.
D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);

D.44944_657 : --> single use.
if (D.44944_657 == 0)

D.44947_658 : --> single use.
if (D.44947_658 == fmtp_remote_codec_rate_99)

match_661 : -->2 uses.
match_1 = PHI <match_655(282), match_661(287), match_661(288)>
match_1 = PHI <match_655(282), match_661(287), match_661(288)>
# DEBUG match => match_661

D.44950_663 : --> single use.
D.44952_665 = D.44950_663 && D.44951_664;

D.44951_664 : --> single use.
D.44952_665 = D.44950_663 && D.44951_664;

D.44952_665 : --> single use.
if (D.44952_665 != 0)

D.44955_666 : --> single use.
D.44957_668 = D.44955_666 && D.44956_667;

D.44956_667 : --> single use.
D.44957_668 = D.44955_666 && D.44956_667;

D.44957_668 : --> single use.
if (D.44957_668 != 0)

D.44889_669 : --> single use.
D.44960_670 = strcasecmp (D.44889_669, "ilbc");

D.44960_670 : --> single use.
if (D.44960_670 != 0)

D.44889_671 : --> single use.
D.44963_672 = strcasecmp (D.44889_671, "isac");

D.44963_672 : --> single use.
if (D.44963_672 != 0)

D.44950_674 : --> single use.
D.44969_676 = D.44950_674 && D.44968_675;

D.44968_675 : --> single use.
D.44969_676 = D.44950_674 && D.44968_675;

D.44969_676 : --> single use.
if (D.44969_676 != 0)

D.44972_677 : --> single use.
D.44974_679 = D.44972_677 && D.44973_678;

D.44973_678 : --> single use.
D.44974_679 = D.44972_677 && D.44973_678;

D.44974_679 : --> single use.
if (D.44974_679 != 0)

D.44889_680 : --> single use.
D.44977_681 = strcasecmp (D.44889_680, "pcma");

D.44977_681 : --> single use.
if (D.44977_681 == 0)

D.44889_682 : --> single use.
D.44979_683 = strcasecmp (D.44889_682, "pcmu");

D.44979_683 : --> single use.
if (D.44979_683 == 0)

D.44926_685 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);

D.44984_686 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);

D.44929_687 : --> single use.
D.44930_688 = D.44929_687 / 1000;

D.44930_688 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);

D.44989_689 : --> single use.
D.44991_691 = D.44989_689 && D.44990_690;

D.44990_690 : --> single use.
D.44991_691 = D.44989_689 && D.44990_690;

D.44991_691 : --> single use.
if (D.44991_691 != 0)

D.44993_692 : --> single use.
if (D.44993_692 != D.44929_693)

D.44929_693 : --> single use.
if (D.44993_692 != D.44929_693)

D.44926_695 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);

D.44927_696 : --> single use.
D.44928_697 = (int) D.44927_696;

D.44928_697 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);

D.44929_698 : --> single use.
D.44930_699 = D.44929_698 / 1000;

D.44930_699 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);

remote_codec_rate.92_700 : --> single use.
near_matches[nm_idx_116].rate = remote_codec_rate.92_700;

nm_idx_701 : --> single use.
nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>
# DEBUG nm_idx => nm_idx_701

codec_rate.94_702 : --> single use.
matches[m_idx_101].rate = codec_rate.94_702;

m_idx_703 : -->3 uses.
m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_703(306)>
m_idx_102 = PHI <m_idx_703(306), m_idx_101(308)>
if (m_idx_703 > 29)
# DEBUG m_idx => m_idx_703

D.44926_704 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);

D.44927_705 : --> single use.
D.44928_706 = (int) D.44927_705;

D.44928_706 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);

D.44929_707 : --> single use.
D.44930_708 = D.44929_707 / 1000;

D.44930_708 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);

i_710 : --> single use.
i_129 = PHI <0(274), i_710(307)>
# DEBUG i => i_710

map_711 : --> single use.
map_128 = PHI <map_559(234), map_711(310)>
# DEBUG map => map_711

D.45001_712 : --> single use.
D.45002_713 = D.45001_712 == 1;

D.45002_713 : --> single use.
D.45004_715 = D.45002_713 && D.45003_714;

D.45003_714 : --> single use.
D.45004_715 = D.45002_713 && D.45003_714;

D.45004_715 : --> single use.
if (D.45004_715 != 0)

D.45007_719 : --> single use.
D.45009_721 = D.45007_719 && D.45008_720;

D.45008_720 : --> single use.
D.45009_721 = D.45007_719 && D.45008_720;

D.45009_721 : --> single use.
if (D.45009_721 != 0)

D.45012_724 : -->2 uses.
near_rate.96_743 = D.45012_724;
near_rate_725 = (uint32_t) D.45012_724;

near_rate_725 : -->2 uses.
near_rate_145 = PHI <near_rate_729(317), near_rate_725(316)>
if (near_rate_725 == 0)
# DEBUG near_rate => near_rate_725

near_match_726 : -->3 uses.
timp_134 = PHI <timp_732(319), near_match_726(318)>
near_rate_729 = near_match_726->samples_per_second;
D.45013_728 = near_match_726->iananame;
# DEBUG near_match => near_match_726

near_map_727 : --> single use.
matches[m_idx_106].map = near_map_727;
# DEBUG near_map => near_map_727

D.45013_728 : --> single use.
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);

near_rate_729 : --> single use.
near_rate_145 = PHI <near_rate_729(317), near_rate_725(316)>

num_731 : --> single use.
if (num_731 != 0)
# DEBUG num => num_731

timp_732 : --> single use.
timp_134 = PHI <timp_732(319), near_match_726(318)>
# DEBUG timp => timp_732

D.45024_734 : --> single use.
D.45025_735 = D.45024_734 / 1000;

D.45025_735 : --> single use.
if (D.45025_735 <= maxptime_39)

j_736 : --> single use.
j_133 = PHI <0(315), j_736(323)>
# DEBUG j => j_736

D.45026_737 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);

D.45024_738 : --> single use.
D.45025_739 = D.45024_738 / 1000;

D.45025_739 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);

D.45027_740 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);

D.45028_742 : --> single use.
matches[m_idx_106].codec_idx = D.45028_742;

near_rate.96_743 : --> single use.
matches[m_idx_106].rate = near_rate.96_743;

m_idx_744 : --> single use.
m_idx_107 = PHI <m_idx_106(314), m_idx_744(322), m_idx_106(324)>
# DEBUG m_idx => m_idx_744

D.45034_747 : -->3 uses.
D.45034_751 = D.45034_747;
D.45034_749 = D.45034_747;
D.45035_748 = D.45034_747->rm_encoding;

D.45035_748 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

D.45034_749 : --> single use.
D.45036_750 = D.45034_749->rm_fmtp;

D.45036_750 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

D.45034_751 : --> single use.
D.45037_752 = D.45034_751->rm_pt;

D.45037_752 : --> single use.
D.45038_753 = (uint32_t) D.45037_752;

D.45038_753 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

D.45039_754 : -->2 uses.
D.45039_756 = D.45039_754;
D.45040_755 = D.45039_754->samples_per_second;

D.45040_755 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

D.45039_756 : --> single use.
D.45041_757 = D.45039_756->microseconds_per_packet;

D.45041_757 : --> single use.
D.45042_758 = D.45041_757 / 1000;

D.45042_758 : --> single use.
D.45043_759 = (uint32_t) D.45042_758;

D.45043_759 : --> single use.
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);

pmap_760 : -->22 uses.
D.44750_763 = pmap_760;
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_760;
pmap_760->recv_pt = D.45054_806;
pmap_760->agreed_pt = D.45054_802;
pmap_760->rm_fmtp = D.45088_800;
pmap_760->remote_sdp_port = D.45087_798;
pmap_760->remote_sdp_ip = D.45086_796;
pmap_760->adv_channels = D.45073_794;
pmap_760->channels = 1;
pmap_760->channels = 2;
pmap_760->adv_channels = 2;
pmap_760->adv_channels = 1;
pmap_760->channels = D.47922_146;
pmap_760->bitrate = D.45064_782;
pmap_760->codec_ms = D.45062_780;
pmap_760->rm_rate = D.45059_777;
pmap_760->adv_rm_rate = D.45055_774;
pmap_760->rm_rate = D.45055_773;
pmap_760->recv_pt = D.45054_772;
pmap_760->iananame = D.45052_770;
pmap_760->rm_encoding = D.45050_768;
D.45048_766 = pmap_760->pt;
# DEBUG pmap => pmap_760

mimp_761 : -->7 uses.
smh_186->negotiated_codecs[D.44655_803] = mimp_761;
D.45063_781 = mimp_761->bits_per_second;
D.45060_778 = mimp_761->microseconds_per_packet;
D.45059_777 = mimp_761->actual_samples_per_second;
D.45051_775 = mimp_761->iananame;
D.45055_773 = mimp_761->samples_per_second;
D.45051_769 = mimp_761->iananame;
# DEBUG mimp => mimp_761

mmap_762 : -->8 uses.
D.45053_805 = mmap_762->rm_pt;
D.45053_801 = mmap_762->rm_pt;
D.45079_799 = mmap_762->rm_fmtp;
D.45079_790 = mmap_762->rm_fmtp;
D.45049_787 = mmap_762->rm_encoding;
D.45066_783 = mmap_762->rm_params;
D.45053_771 = mmap_762->rm_pt;
D.45049_767 = mmap_762->rm_encoding;
# DEBUG mmap => mmap_762

D.44750_763 : --> single use.
D.44750_763->current = 1;

D.44605_764 : -->2 uses.
D.44605_765 = D.44605_764;
if (D.44605_764 != 0B)

D.44605_765 : --> single use.
switch_rtp_set_default_payload (D.44605_765, D.45048_766);

D.45048_766 : --> single use.
switch_rtp_set_default_payload (D.44605_765, D.45048_766);

D.45049_767 : --> single use.
D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);

D.45050_768 : --> single use.
pmap_760->rm_encoding = D.45050_768;

D.45051_769 : --> single use.
D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);

D.45052_770 : --> single use.
pmap_760->iananame = D.45052_770;

D.45053_771 : --> single use.
D.45054_772 = (unsigned char) D.45053_771;

D.45054_772 : --> single use.
pmap_760->recv_pt = D.45054_772;

D.45055_773 : -->2 uses.
D.45055_774 = D.45055_773;
pmap_760->rm_rate = D.45055_773;

D.45055_774 : --> single use.
pmap_760->adv_rm_rate = D.45055_774;

D.45051_775 : --> single use.
D.45056_776 = strcasecmp (D.45051_775, "g722");

D.45056_776 : --> single use.
if (D.45056_776 != 0)

D.45059_777 : --> single use.
pmap_760->rm_rate = D.45059_777;

D.45060_778 : --> single use.
D.45061_779 = D.45060_778 / 1000;

D.45061_779 : --> single use.
D.45062_780 = (uint32_t) D.45061_779;

D.45062_780 : --> single use.
pmap_760->codec_ms = D.45062_780;

D.45063_781 : --> single use.
D.45064_782 = (uint32_t) D.45063_781;

D.45064_782 : --> single use.
pmap_760->bitrate = D.45064_782;

D.45066_783 : -->2 uses.
D.45066_784 = D.45066_783;
if (D.45066_783 != 0B)

D.45066_784 : --> single use.
D.47922_1485 = strtol (D.45066_784, 0B, 10);
# DEBUG __nptr => D.45066_784

D.45049_787 : --> single use.
D.45070_788 = strcasecmp (D.45049_787, "opus");

D.45070_788 : --> single use.
if (D.45070_788 == 0)

D.45073_789 : --> single use.
if (D.45073_789 == 1)

D.45079_790 : -->3 uses.
D.45079_792 = D.45079_790;
D.47926_1486 = *D.45079_790;
if (D.45079_790 == 0B)
# DEBUG s => D.45079_790

D.45079_792 : --> single use.
D.45082_793 = switch_stristr ("stereo=1", D.45079_792);

D.45082_793 : --> single use.
if (D.45082_793 != 0B)

D.45073_794 : --> single use.
pmap_760->adv_channels = D.45073_794;

D.45085_795 : --> single use.
D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);

D.45086_796 : --> single use.
pmap_760->remote_sdp_ip = D.45086_796;

D.44697_797 : --> single use.
D.45087_798 = (short unsigned int) D.44697_797;

D.45087_798 : --> single use.
pmap_760->remote_sdp_port = D.45087_798;

D.45079_799 : --> single use.
D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);

D.45088_800 : --> single use.
pmap_760->rm_fmtp = D.45088_800;

D.45053_801 : --> single use.
D.45054_802 = (unsigned char) D.45053_801;

D.45054_802 : --> single use.
pmap_760->agreed_pt = D.45054_802;

D.44655_803 : -->2 uses.
D.45089_804 = D.44655_803 + 1;
smh_186->negotiated_codecs[D.44655_803] = mimp_761;

D.45089_804 : --> single use.
smh_186->num_negotiated_codecs = D.45089_804;

D.45053_805 : --> single use.
D.45054_806 = (unsigned char) D.45053_805;

D.45054_806 : --> single use.
pmap_760->recv_pt = D.45054_806;

j_807 : --> single use.
j_135 = PHI <0(328), j_807(348)>
# DEBUG j => j_807

D.44750_808 : --> single use.
D.44762_809 = D.44750_808->remote_sdp_port;

D.44762_809 : --> single use.
D.44767_810 = (int) D.44762_809;

D.44767_810 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.44767_810);

D.44530_811 : --> single use.
switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);

D.44750_812 : --> single use.
D.44760_813 = D.44750_812->remote_sdp_ip;

D.44760_813 : --> single use.
switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);

D.44530_814 : --> single use.
switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);

D.44750_815 : --> single use.
D.45092_816 = D.44750_815->recv_pt;

D.45092_816 : --> single use.
D.45093_817 = (int) D.45092_816;

D.45093_817 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45093_817);

D.44530_818 : --> single use.
switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);

D.45094_819 : --> single use.
if (D.45094_819 != 0B)
# DEBUG codec => D.45094_819

D.44471_821 : --> single use.
D.45098_822 = D.44471_821->codec_flags;

D.45098_822 : --> single use.
D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);

D.45099_823 : --> single use.
if (D.45099_823 == 0)

D.45107_826 : --> single use.
if (D.45107_826 != 0)

D.44530_827 : --> single use.
D.45109_828 = switch_channel_test_flag (D.44530_827, 93);

D.45109_828 : --> single use.
if (D.45109_828 != 0)

D.44471_829 : --> single use.
D.45110_830 = D.44471_829->te;

D.45110_830 : --> single use.
D.45111_831 = (int) D.45110_830;

D.45111_831 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);

D.44471_832 : --> single use.
best_te_833 = D.44471_832->te;

best_te_833 : --> single use.
best_te_21 = PHI <best_te_20(361), best_te_20(363), best_te_833(364)>
# DEBUG best_te => best_te_833

D.45114_834 : --> single use.
if (D.45114_834 == 1)

D.44471_835 : --> single use.
# DEBUG D#11 => D.44471_835->te
D.44471_835->te = best_te_21;

D.44857_837 : -->2 uses.
D.44857_843 = D.44857_837;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);

D.44530_838 : --> single use.
switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);

D.44471_839 : --> single use.
D.44471_839->dtmf_type = 0;

D.44605_840 : -->2 uses.
D.44605_841 = D.44605_840;
if (D.44605_840 != 0B)

D.44605_841 : --> single use.
switch_rtp_set_telephony_event (D.44605_841, best_te_21);

D.44530_842 : --> single use.
switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_843);

D.44857_843 : --> single use.
switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_843);

D.44471_845 : -->2 uses.
D.44471_845->recv_te = D.45110_846;
D.44471_845->te = best_te_21;

D.45110_846 : --> single use.
D.44471_845->recv_te = D.45110_846;

te_847 : -->3 uses.
switch_rtp_set_telephony_recv_event (D.44605_855, te_847);
switch_rtp_set_telephony_event (D.44605_852, te_847);
D.45120_848 = (int) te_847;
# DEBUG te => te_847

D.45120_848 : -->3 uses.
D.45120_857 = D.45120_848;
D.45120_854 = D.45120_848;
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);

D.44530_849 : --> single use.
switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);

D.44471_850 : --> single use.
D.44471_850->dtmf_type = 0;

D.44605_851 : -->2 uses.
D.44605_852 = D.44605_851;
if (D.44605_851 != 0B)

D.44605_852 : --> single use.
switch_rtp_set_telephony_event (D.44605_852, te_847);

D.44530_853 : --> single use.
switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_854);

D.45120_854 : --> single use.
switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_854);

D.44605_855 : --> single use.
switch_rtp_set_telephony_recv_event (D.44605_855, te_847);

D.44530_856 : --> single use.
switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_857);

D.45120_857 : --> single use.
switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_857);

D.45124_858 : -->10 uses.
D.49741_1606 = strcasecmp (D.45124_858, "disallow");
D.49740_1605 = strcasecmp (D.45124_858, "inactive");
D.49739_1604 = strcasecmp (D.45124_858, "disabled");
D.49738_1603 = strcasecmp (D.45124_858, "f");
D.49737_1602 = strcasecmp (D.45124_858, "false");
D.49736_1601 = strcasecmp (D.45124_858, "off");
D.49735_1600 = strcasecmp (D.45124_858, "no");
# DEBUG __nptr => D.45124_858
D.49743_1608 = strtol (D.45124_858, 0B, 10);
D.49742_1607 = switch_is_number (D.45124_858);
if (D.45124_858 != 0B)
# DEBUG expr => D.45124_858

D.49733_859 : --> single use.
if (D.49733_859 == 0)

D.44530_860 : --> single use.
switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);

D.44471_861 : -->2 uses.
D.44471_863 = D.44471_861;
D.44471_861->dtmf_type = 1;

D.44471_863 : -->2 uses.
# DEBUG D#12 => D.44471_863->recv_te
D.44471_863->recv_te = D.45110_864;
D.44471_863->te = 0;

D.45110_864 : --> single use.
D.44471_863->recv_te = D.45110_864;

D.44530_866 : --> single use.
switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);

D.44471_867 : -->2 uses.
D.44471_869 = D.44471_867;
D.44471_867->dtmf_type = 2;

D.44471_869 : -->2 uses.
# DEBUG D#13 => D.44471_869->recv_te
D.44471_869->recv_te = D.45110_870;
D.44471_869->te = 0;

D.45110_870 : --> single use.
D.44471_869->recv_te = D.45110_870;

D.44681_872 : --> single use.
if (D.44681_872 == 3)

D.44697_873 : --> single use.
if (D.44697_873 != 0)

D.44530_878 : --> single use.
switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);

connection_879 : --> single use.
connection_125 = PHI <connection_879(387), connection_881(388)>
# DEBUG connection => connection_879

D.44546_880 : -->2 uses.
connection_881 = D.44546_880;
if (D.44546_880 != 0B)

connection_881 : --> single use.
connection_125 = PHI <connection_879(387), connection_881(388)>
# DEBUG connection => connection_881

map_883 : --> single use.
map_136 = PHI <map_883(391), map_1021(464)>
# DEBUG map => map_883

D.45137_884 : --> single use.
if (D.45137_884 != 0)

D.45140_885 : --> single use.
if (D.45140_885 != 0)

attr_886 : --> single use.
attr_32 = PHI <attr_886(394), attr_892(401)>
# DEBUG attr => attr_886

D.44590_887 : --> single use.
D.45143_888 = strcasecmp (D.44590_887, "fingerprint");

D.45143_888 : --> single use.
if (D.45143_888 == 0)

D.44619_889 : -->2 uses.
D.47939_1495 = *D.44619_889;
if (D.44619_889 == 0B)
# DEBUG s => D.44619_889

attr_892 : --> single use.
attr_32 = PHI <attr_886(394), attr_892(401)>
# DEBUG attr => attr_892

attr_893 : --> single use.
attr_33 = PHI <attr_893(403), attr_978(443)>
# DEBUG attr => attr_893

D.44590_894 : -->4 uses.
D.44590_960 = D.44590_894;
D.44590_906 = D.44590_894;
D.44590_897 = D.44590_894;
D.45151_895 = strcasecmp (D.44590_894, "framerate");

D.45151_895 : --> single use.
if (D.45151_895 == 0)

D.44619_896 : --> single use.
if (D.44619_896 != 0B)

D.44590_897 : --> single use.
D.45154_898 = strcasecmp (D.44590_897, "rtcp-fb");

D.45154_898 : --> single use.
if (D.45154_898 == 0)

D.44619_899 : -->3 uses.
D.44619_901 = D.44619_899;
D.47943_1497 = *D.44619_899;
if (D.44619_899 == 0B)
# DEBUG s => D.44619_899

D.44619_901 : --> single use.
D.45160_902 = switch_stristr ("fir", D.44619_901);

D.45160_902 : --> single use.
if (D.45160_902 != 0B)

D.45163_903 : --> single use.
D.45164_904 = D.45163_903 + 1;

D.45164_904 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45164_904;

D.44471_905 : --> single use.
D.44471_905->rtcp_video_interval_msec = "10000";

D.44590_906 : --> single use.
D.45168_907 = strcasecmp (D.44590_906, "rtcp");

D.45168_907 : --> single use.
if (D.45168_907 == 0)

D.44619_908 : -->3 uses.
D.44619_953 = D.44619_908;
__s1_910 = D.44619_908;
if (D.44619_908 != 0B)

__s1_910 : -->2 uses.
D.45185_921 = MEM[(const unsigned char *)__s1_910 + 1B];
D.45174_911 = *__s1_910;
# DEBUG __s1 => __s1_910

D.45174_911 : --> single use.
D.45175_912 = (int) D.45174_911;

D.45175_912 : --> single use.
__result_916 = D.45175_912 + -49;

__result_916 : -->2 uses.
if (__result_916 == 0)
__result_140 = PHI <__result_916(416), __result_922(417)>
# DEBUG __result => __result_916

D.45185_921 : --> single use.
__result_922 = (int) D.45185_921;

__result_922 : --> single use.
__result_140 = PHI <__result_916(416), __result_922(417)>
# DEBUG __result => __result_922

D.44530_952 : --> single use.
switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_953, 1);

D.44619_953 : --> single use.
switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_953, 1);

D.44619_954 : --> single use.
D.47946_1499 = strtol (D.44619_954, 0B, 10);
# DEBUG __nptr => D.44619_954

D.45213_956 : --> single use.
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45213_956;

D.44471_957 : -->2 uses.
D.44471_959 = D.44471_957;
D.45214_958 = D.44471_957->rtcp_video_interval_msec;

D.45214_958 : --> single use.
if (D.45214_958 == 0B)

D.44471_959 : --> single use.
D.44471_959->rtcp_video_interval_msec = "5000";

D.44590_960 : --> single use.
D.45219_961 = strcasecmp (D.44590_960, "crypto");

D.45219_961 : --> single use.
if (D.45219_961 == 0)

D.44619_962 : -->2 uses.
D.47950_1500 = *D.44619_962;
if (D.44619_962 == 0B)
# DEBUG s => D.44619_962

D.44471_964 : --> single use.
D.44821_965 = D.44471_964->ndlb;

D.44821_965 : --> single use.
D.44822_966 = D.44821_965 & 4;

D.44822_966 : --> single use.
if (D.44822_966 == 0)

D.44530_967 : --> single use.
D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);

D.45227_968 : -->10 uses.
D.49753_1616 = strcasecmp (D.45227_968, "allow");
D.49752_1615 = strcasecmp (D.45227_968, "active");
D.49751_1614 = strcasecmp (D.45227_968, "enabled");
D.49750_1613 = strcasecmp (D.45227_968, "t");
D.49749_1612 = strcasecmp (D.45227_968, "true");
D.49748_1611 = strcasecmp (D.45227_968, "on");
D.49747_1610 = strcasecmp (D.45227_968, "yes");
# DEBUG __nptr => D.45227_968
D.49755_1618 = strtol (D.45227_968, 0B, 10);
D.49754_1617 = switch_is_number (D.45227_968);
if (D.45227_968 != 0B)
# DEBUG expr => D.45227_968

D.49745_969 : --> single use.
if (D.49745_969 == 0)

D.44666_970 : --> single use.
D.44829_971 = D.44666_970 != 257;

D.44829_971 : --> single use.
D.44831_973 = D.44829_971 && D.44830_972;

D.44830_972 : --> single use.
D.44831_973 = D.44829_971 && D.44830_972;

D.44831_973 : --> single use.
if (D.44831_973 != 0)

crypto_975 : -->2 uses.
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));
crypto_tag_1502 = strtol (crypto_975, 0B, 10);
# DEBUG __nptr => crypto_975
# DEBUG crypto => crypto_975

got_video_crypto_977 : --> single use.
got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
# DEBUG got_video_crypto => got_video_crypto_977

attr_978 : --> single use.
attr_33 = PHI <attr_893(403), attr_978(443)>
# DEBUG attr => attr_978

rm_encoding_979 : -->2 uses.
rm_encoding_137 = PHI <rm_encoding_979(445), ""(446)>
if (rm_encoding_979 == 0B)
# DEBUG rm_encoding => rm_encoding_979

i.99_982 : --> single use.
D.45236_983 = i.99_982 * 4;

D.45236_983 : --> single use.
D.45237_984 = codec_array_84 + D.45236_983;

D.45237_984 : --> single use.
imp_985 = *D.45237_984;

imp_985 : -->9 uses.
D.45250_1016 = imp_985->ianacode;
D.45249_1015 = imp_985->iananame;
matches[m_idx_110].imp = imp_985;
D.45263_1014 = imp_985->samples_per_second;
D.45249_1010 = imp_985->iananame;
D.45250_1007 = imp_985->ianacode;
D.45250_994 = imp_985->ianacode;
D.45249_993 = imp_985->iananame;
D.45238_986 = imp_985->codec_type;
# DEBUG imp => imp_985

D.45238_986 : --> single use.
if (D.45238_986 != 1)

D.44530_987 : --> single use.
D.45241_988 = switch_channel_direction (D.44530_987);

D.45241_988 : --> single use.
if (D.45241_988 == 0)

D.44530_989 : --> single use.
D.45244_990 = switch_channel_test_flag (D.44530_989, 114);

D.45244_990 : --> single use.
if (D.45244_990 != 0)

D.45247_991 : --> single use.
D.45248_992 = (int) D.45247_991;

D.45248_992 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);

D.45249_993 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);

D.45250_994 : --> single use.
D.45251_995 = (int) D.45250_994;

D.45251_995 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);

D.45255_996 : -->2 uses.
D.47957_1503 = *D.45255_996;
if (D.45255_996 == 0B)
# DEBUG s => D.45255_996

D.44471_998 : --> single use.
D.44821_999 = D.44471_998->ndlb;

D.44821_999 : --> single use.
D.44936_1000 = (int) D.44821_999;

D.44936_1000 : --> single use.
D.44937_1001 = D.44936_1000 & 1;

D.44937_1001 : --> single use.
if (D.44937_1001 != 0)

D.45247_1003 : -->2 uses.
D.45247_1005 = D.45247_1003;
D.45248_1004 = (int) D.45247_1003;

D.45248_1004 : -->2 uses.
D.45248_1006 = D.45248_1004;
if (D.45248_1004 <= 95)

D.45247_1005 : --> no uses.

D.45248_1006 : --> single use.
vmatch_1009 = D.45248_1006 == D.45251_1008;

D.45250_1007 : --> single use.
D.45251_1008 = (int) D.45250_1007;

D.45251_1008 : --> single use.
vmatch_1009 = D.45248_1006 == D.45251_1008;

vmatch_1009 : --> single use.
vmatch_138 = PHI <vmatch_1009(457), vmatch_1012(458)>
# DEBUG vmatch => vmatch_1009

D.45249_1010 : --> single use.
D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);

D.45259_1011 : --> single use.
vmatch_1012 = D.45259_1011 == 0;

vmatch_1012 : --> single use.
vmatch_138 = PHI <vmatch_1009(457), vmatch_1012(458)>
# DEBUG vmatch => vmatch_1012

D.45262_1013 : --> single use.
if (D.45262_1013 == D.45263_1014)

D.45263_1014 : --> single use.
if (D.45262_1013 == D.45263_1014)

D.45249_1015 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);

D.45250_1016 : --> single use.
D.45251_1017 = (int) D.45250_1016;

D.45251_1017 : --> single use.
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);

m_idx_1018 : --> single use.
m_idx_109 = PHI <m_idx_110(448), m_idx_110(450), m_idx_110(460), m_idx_110(459), m_idx_1018(461)>
# DEBUG m_idx => m_idx_1018

i_1020 : --> single use.
i_139 = PHI <0(447), i_1020(462)>
# DEBUG i => i_1020

map_1021 : --> single use.
map_136 = PHI <map_883(391), map_1021(464)>
# DEBUG map => map_1021

D.45001_1022 : --> single use.
D.45002_1023 = D.45001_1022 == 1;

D.45002_1023 : --> single use.
D.45267_1025 = D.45002_1023 && D.45266_1024;

D.45266_1024 : --> single use.
D.45267_1025 = D.45002_1023 && D.45266_1024;

D.45267_1025 : --> single use.
if (D.45267_1025 != 0)

D.45274_1031 : -->3 uses.
D.45274_1035 = D.45274_1031;
D.45274_1033 = D.45274_1031;
D.45275_1032 = D.45274_1031->rm_encoding;

D.45275_1032 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

D.45274_1033 : --> single use.
D.45276_1034 = D.45274_1033->rm_fmtp;

D.45276_1034 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

D.45274_1035 : --> single use.
D.45277_1036 = D.45274_1035->rm_pt;

D.45277_1036 : --> single use.
D.45278_1037 = (uint32_t) D.45277_1036;

D.45278_1037 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

D.45279_1038 : -->2 uses.
D.45279_1040 = D.45279_1038;
D.45280_1039 = D.45279_1038->samples_per_second;

D.45280_1039 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

D.45279_1040 : --> single use.
D.45281_1041 = D.45279_1040->microseconds_per_packet;

D.45281_1041 : --> single use.
D.45282_1042 = D.45281_1041 / 1000;

D.45282_1042 : --> single use.
D.45283_1043 = (uint32_t) D.45282_1042;

D.45283_1043 : --> single use.
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);

pmap_1044 : -->11 uses.
D.45286_1045 = pmap_1044;
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1044;
pmap_1044->agreed_pt = D.45292_1066;
pmap_1044->rm_fmtp = D.45298_1064;
pmap_1044->remote_sdp_port = D.45087_1062;
pmap_1044->remote_sdp_ip = D.45296_1060;
pmap_1044->codec_ms = D.45295_1058;
pmap_1044->rm_rate = D.45262_1055;
pmap_1044->recv_pt = D.45292_1054;
pmap_1044->rm_encoding = D.45291_1052;
D.45290_1048 = pmap_1044->pt;
# DEBUG pmap => pmap_1044

D.45286_1045 : --> single use.
D.45286_1045->current = 1;

D.45287_1046 : -->2 uses.
D.45287_1047 = D.45287_1046;
if (D.45287_1046 != 0B)

D.45287_1047 : --> single use.
switch_rtp_set_default_payload (D.45287_1047, D.45290_1048);

D.45290_1048 : --> single use.
switch_rtp_set_default_payload (D.45287_1047, D.45290_1048);

mimp_1049 : --> single use.
D.45293_1056 = mimp_1049->microseconds_per_packet;
# DEBUG mimp => mimp_1049

map_1050 : -->5 uses.
D.45247_1065 = map_1050->rm_pt;
D.45297_1063 = map_1050->rm_fmtp;
D.45262_1055 = map_1050->rm_rate;
D.45247_1053 = map_1050->rm_pt;
D.45255_1051 = map_1050->rm_encoding;
# DEBUG map => map_1050

D.45255_1051 : --> single use.
D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);

D.45291_1052 : --> single use.
pmap_1044->rm_encoding = D.45291_1052;

D.45247_1053 : --> single use.
D.45292_1054 = (unsigned char) D.45247_1053;

D.45292_1054 : --> single use.
pmap_1044->recv_pt = D.45292_1054;

D.45262_1055 : --> single use.
pmap_1044->rm_rate = D.45262_1055;

D.45293_1056 : --> single use.
D.45294_1057 = D.45293_1056 / 1000;

D.45294_1057 : --> single use.
D.45295_1058 = (uint32_t) D.45294_1057;

D.45295_1058 : --> single use.
pmap_1044->codec_ms = D.45295_1058;

D.45085_1059 : --> single use.
D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);

D.45296_1060 : --> single use.
pmap_1044->remote_sdp_ip = D.45296_1060;

D.44697_1061 : --> single use.
D.45087_1062 = (short unsigned int) D.44697_1061;

D.45087_1062 : --> single use.
pmap_1044->remote_sdp_port = D.45087_1062;

D.45297_1063 : --> single use.
D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);

D.45298_1064 : --> single use.
pmap_1044->rm_fmtp = D.45298_1064;

D.45247_1065 : --> single use.
D.45292_1066 = (unsigned char) D.45247_1065;

D.45292_1066 : --> single use.
pmap_1044->agreed_pt = D.45292_1066;

j_1067 : --> single use.
j_141 = PHI <0(471), j_1067(475)>
# DEBUG j => j_1067

D.45286_1068 : --> single use.
D.45299_1069 = D.45286_1068->remote_sdp_port;

D.45299_1069 : --> single use.
D.45300_1070 = (int) D.45299_1069;

D.45300_1070 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45300_1070);

D.44530_1071 : --> single use.
switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);

D.45286_1072 : --> single use.
D.45301_1073 = D.45286_1072->remote_sdp_ip;

D.45301_1073 : --> single use.
switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);

D.44530_1074 : --> single use.
switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);

D.44530_1075 : --> single use.
switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);

D.45286_1076 : --> single use.
D.45302_1077 = D.45286_1076->rm_fmtp;

D.45302_1077 : --> single use.
switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);

D.45286_1078 : --> single use.
D.45303_1079 = D.45286_1078->agreed_pt;

D.45303_1079 : --> single use.
D.45304_1080 = (int) D.45303_1079;

D.45304_1080 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45304_1080);

D.44530_1081 : --> single use.
switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);

D.45286_1082 : --> single use.
D.45305_1083 = D.45286_1082->recv_pt;

D.45305_1083 : --> single use.
D.45306_1084 = (int) D.45305_1083;

D.45306_1084 : --> single use.
switch_snprintf (&tmp, 50, "%d", D.45306_1084);

D.44530_1085 : --> single use.
switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);

D.45312_1090 : --> single use.
if (D.45312_1090 != 0B)
# DEBUG codec => D.45312_1090

D.45316_1092 : --> single use.
if (D.45316_1092 == 0)

m_1093 : --> single use.
m_28 = PHI <m_370(131), m_1093(489)>
# DEBUG m => m_1093

D.44471_1094 : --> single use.
D.44471_1094->cng_pt = cng_pt_27;

.MEM_1096 : --> single use.
# .MEM_1184 = VDEF <.MEM_1096>
switch_core_session_parse_crypto_prefs (session_161(D));

.MEM_1097 : --> single use.
# .MEM_1188 = VDEF <.MEM_1097>
D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);

.MEM_1098 : -->3 uses.
# .MEM_1192 = VDEF <.MEM_1098>
D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
# VUSE <.MEM_1098>
D.44507_225 = D.44506_224->o_username;
# VUSE <.MEM_1098>
D.44506_224 = sdp_198->sdp_origin;

.MEM_1099 : -->8 uses.
.MEM_1100 = PHI <.MEM_1193(38), .MEM_1099(42), .MEM_1099(43), .MEM_1197(44)>
.MEM_1100 = PHI <.MEM_1193(38), .MEM_1099(42), .MEM_1099(43), .MEM_1197(44)>
# VUSE <.MEM_1099>
D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
# VUSE <.MEM_1099>
D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
# .MEM_1196 = VDEF <.MEM_1099>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
# VUSE <.MEM_1099>
D.44509_240 = smh_186->origin;
# VUSE <.MEM_1099>
D.44512_238 = D.44471_237->auto_rtp_bugs;
# VUSE <.MEM_1099>
D.44471_237 = smh_186->mparams;

.MEM_1100 : -->2 uses.
# .MEM_1198 = VDEF <.MEM_1100>
val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
# VUSE <.MEM_1100>
D.44530_244 = session_161(D)->channel;

.MEM_1101 : -->7 uses.
.MEM_1103 = PHI <.MEM_1101(65), .MEM_1102(84)>
# VUSE <.MEM_1101>
__result_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");
# VUSE <.MEM_1101>
attr_303 = sdp_198->sdp_attributes;
# VUSE <.MEM_1101>
D.44548_256 = D.44546_255->c_address;
# VUSE <.MEM_1101>
D.44546_254 = m_248->m_connections;
# VUSE <.MEM_1101>
D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
# VUSE <.MEM_1101>
m_248 = sdp_198->sdp_media;

.MEM_1102 : -->2 uses.
.MEM_1103 = PHI <.MEM_1101(65), .MEM_1102(84)>
# VUSE <.MEM_1102>
attr_334 = attr_29->a_next;

.MEM_1103 : -->24 uses.
.MEM_1102 = PHI <.MEM_1103(69), .MEM_1201(71), .MEM_1202(73), .MEM_1209(77), .MEM_1103(79), .MEM_1520(81), .MEM_1103(82), .MEM_1522(83), .MEM_1207(76)>
.MEM_1104 = PHI <.MEM_1103(86), .MEM_1210(87)>
.MEM_1102 = PHI <.MEM_1103(69), .MEM_1201(71), .MEM_1202(73), .MEM_1209(77), .MEM_1103(79), .MEM_1520(81), .MEM_1103(82), .MEM_1522(83), .MEM_1207(76)>
.MEM_1102 = PHI <.MEM_1103(69), .MEM_1201(71), .MEM_1202(73), .MEM_1209(77), .MEM_1103(79), .MEM_1520(81), .MEM_1103(82), .MEM_1522(83), .MEM_1207(76)>
# VUSE <.MEM_1103>
D.44621_331 = strcasecmp (D.44590_330, "maxptime");
# VUSE <.MEM_1103>
D.44616_327 = strcasecmp (D.44590_326, "ptime");
# VUSE <.MEM_1103>
D.44614_324 = strcasecmp (D.44590_323, "sendrecv");
# VUSE <.MEM_1103>
D.44602_315 = strcasecmp (D.44590_314, "recvonly");
# VUSE <.MEM_1103>
D.44598_311 = strcasecmp (D.44590_310, "inactive");
# VUSE <.MEM_1103>
D.44594_307 = strcasecmp (D.44590_306, "sendonly");
# .MEM_1522 = VDEF <.MEM_1103>
dmaxptime_1468 = strtol (D.44619_332, 0B, 10);
# .MEM_1520 = VDEF <.MEM_1103>
dptime_1467 = strtol (D.44619_328, 0B, 10);
# VUSE <.MEM_1103>
D.47877_1465 = *D.44590_304;
# .MEM_1210 = VDEF <.MEM_1103>
switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);
# VUSE <.MEM_1103>
D.44530_338 = session_161(D)->channel;
# VUSE <.MEM_1103>
D.44619_332 = attr_29->a_value;
# VUSE <.MEM_1103>
D.44619_328 = attr_29->a_value;
# .MEM_1203 = VDEF <.MEM_1103>
switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
# VUSE <.MEM_1103>
D.44530_316 = session_161(D)->channel;
# .MEM_1202 = VDEF <.MEM_1103>
switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
# VUSE <.MEM_1103>
D.44530_313 = session_161(D)->channel;
# .MEM_1201 = VDEF <.MEM_1103>
switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
# VUSE <.MEM_1103>
D.44530_309 = session_161(D)->channel;
# VUSE <.MEM_1103>
D.44590_304 = attr_29->a_name;

.MEM_1104 : --> single use.
# .MEM_1211 = VDEF <.MEM_1104>
D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);

.MEM_1105 : -->4 uses.
.MEM_1106 = PHI <.MEM_1211(88), .MEM_1625(101), .MEM_1105(102), .MEM_1215(103), .MEM_1217(104), .MEM_1218(105)>
# .MEM_1214 = VDEF <.MEM_1105>
D.44471_345->hold_laps = D.44639_347;
# VUSE <.MEM_1105>
D.44636_344 = D.44471_343->hold_laps;
# VUSE <.MEM_1105>
D.44471_343 = smh_186->mparams;

.MEM_1106 : -->2 uses.
.MEM_1107 = PHI <.MEM_1106(106), .MEM_1220(107), .MEM_1627(119)>
# .MEM_1219 = VDEF <.MEM_1106>
reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);

.MEM_1107 : -->3 uses.
.MEM_1108 = PHI <.MEM_1107(120), .MEM_1222(121)>
# .MEM_1222 = VDEF <.MEM_1107>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
# VUSE <.MEM_1107>
D.44649_357 = session_161(D)->bugs;

.MEM_1108 : -->5 uses.
.MEM_1109 = PHI <.MEM_1108(124), .MEM_1108(125), .MEM_1224(126)>
.MEM_1109 = PHI <.MEM_1108(124), .MEM_1108(125), .MEM_1224(126)>
# .MEM_1223 = VDEF <.MEM_1108>
D.44471_362->num_codecs = 0;
# VUSE <.MEM_1108>
D.44471_362 = smh_186->mparams;
# VUSE <.MEM_1108>
D.44655_359 = smh_186->num_negotiated_codecs;

.MEM_1109 : --> single use.
# .MEM_1225 = VDEF <.MEM_1109>
D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));

.MEM_1110 : -->2 uses.
# .MEM_1228 = VDEF <.MEM_1110>
switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);
# VUSE <.MEM_1110>
D.44530_369 = session_161(D)->channel;

.MEM_1111 : --> single use.
# .MEM_1229 = VDEF <.MEM_1111>
switch_core_media_find_zrtp_hash (session_161(D), sdp_198);

.MEM_1112 : -->6 uses.
.MEM_1113 = PHI <.MEM_1112(134), .MEM_1112(135), .MEM_1234(136)>
.MEM_1113 = PHI <.MEM_1112(134), .MEM_1112(135), .MEM_1234(136)>
# VUSE <.MEM_1112>
D.44672_377 = strcasecmp (D.44669_376, "UDP/TLS/RTP/SAVPF");
# .MEM_1234 = VDEF <.MEM_1112>
switch_channel_set_flag_value (D.44530_378, 107, 1);
# VUSE <.MEM_1112>
D.44530_378 = session_161(D)->channel;
# VUSE <.MEM_1112>
D.44669_375 = m_28->m_proto_name;

.MEM_1113 : -->13 uses.
.MEM_1168 = PHI <.MEM_1398(383), .MEM_1113(385), .MEM_1113(386), .MEM_1163(468), .MEM_1453(487), .MEM_1454(488), .MEM_1387(369), .MEM_1391(370), .MEM_1380(367), .MEM_1382(368), .MEM_1402(384)>
.MEM_1168 = PHI <.MEM_1398(383), .MEM_1113(385), .MEM_1113(386), .MEM_1163(468), .MEM_1453(487), .MEM_1454(488), .MEM_1387(369), .MEM_1391(370), .MEM_1380(367), .MEM_1382(368), .MEM_1402(384)>
# .MEM_1403 = VDEF <.MEM_1113>
memset (&matches, 0, 480);
# VUSE <.MEM_1113>
D.44697_873 = m_28->m_port;
# .MEM_1290 = VDEF <.MEM_1113>
D.44781_498 = switch_rtp_has_dtls ();
# VUSE <.MEM_1113>
D.44697_494 = m_28->m_port;
# VUSE <.MEM_1113>
D.44681_493 = m_28->m_type;
# .MEM_1235 = VDEF <.MEM_1113>
t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
# VUSE <.MEM_1113>
D.44697_393 = m_28->m_port;
# VUSE <.MEM_1113>
D.44681_392 = m_28->m_type;
# VUSE <.MEM_1113>
D.44681_387 = m_28->m_type;
# VUSE <.MEM_1113>
D.44681_383 = m_28->m_type;
# VUSE <.MEM_1113>
D.44675_379 = m_28->m_proto;

.MEM_1114 : -->2 uses.
.MEM_1115 = PHI <.MEM_1114(154), .MEM_1244(155), .MEM_1244(156), .MEM_1244(157)>
# .MEM_1244 = VDEF <.MEM_1114>
pass_409 = switch_true (var_402);

.MEM_1115 : -->4 uses.
.MEM_1116 = PHI <.MEM_1115(158), .MEM_1245(159)>
# .MEM_1245 = VDEF <.MEM_1115>
D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
# VUSE <.MEM_1115>
D.44482_413 = D.44481_412->channel;
# VUSE <.MEM_1115>
D.44481_412 = smh_186->session;

.MEM_1116 : -->2 uses.
# .MEM_1246 = VDEF <.MEM_1116>
D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
# VUSE <.MEM_1116>
D.44530_415 = session_161(D)->channel;

j_1117 : --> no uses.

.MEM_1118 : -->2 uses.
.MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>
# .MEM_1250 = VDEF <.MEM_1118>
D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);

.MEM_1119 : -->3 uses.
# VUSE <.MEM_1119>
D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1265 = VDEF <.MEM_1119>
D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
# VUSE <.MEM_1119>
D.44751_445 = t38_options_394->remote_ip;

.MEM_1120 : -->2 uses.
# .MEM_1279 = VDEF <.MEM_1120>
switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
# VUSE <.MEM_1120>
other_session.89_481 = other_session;

.MEM_1122 : -->2 uses.
.MEM_1125 = PHI <.MEM_1122(192), .MEM_1124(225)>
# VUSE <.MEM_1122>
attr_507 = m_28->m_attributes;

.MEM_1123 : -->2 uses.
# .MEM_1532 = VDEF <.MEM_1123>
crypto_tag_1476 = strtol (crypto_544, 0B, 10);
# VUSE <.MEM_1123>
crypto_544 = attr_31->a_value;

.MEM_1124 : -->2 uses.
.MEM_1125 = PHI <.MEM_1122(192), .MEM_1124(225)>
# VUSE <.MEM_1124>
attr_548 = attr_31->a_next;

.MEM_1125 : -->28 uses.
.MEM_1136 = PHI <.MEM_1125(234), .MEM_1135(310)>
.MEM_1123 = PHI <.MEM_1125(209), .MEM_1629(221), .MEM_1629(222)>
.MEM_1124 = PHI <.MEM_1294(196), .MEM_1527(199), .MEM_1529(202), .MEM_1125(203), .MEM_1125(204), .MEM_1125(208), .MEM_1298(224), .MEM_1293(195)>
.MEM_1124 = PHI <.MEM_1294(196), .MEM_1527(199), .MEM_1529(202), .MEM_1125(203), .MEM_1125(204), .MEM_1125(208), .MEM_1298(224), .MEM_1293(195)>
.MEM_1124 = PHI <.MEM_1294(196), .MEM_1527(199), .MEM_1529(202), .MEM_1125(203), .MEM_1125(204), .MEM_1125(208), .MEM_1298(224), .MEM_1293(195)>
# VUSE <.MEM_1125>
D.44815_530 = strcasecmp (D.44590_529, "crypto");
# VUSE <.MEM_1125>
D.44810_525 = strcasecmp (D.44590_524, "maxptime");
# VUSE <.MEM_1125>
D.44805_520 = strcasecmp (D.44590_519, "ptime");
# VUSE <.MEM_1125>
D.44795_509 = strcasecmp (D.44590_508, "rtcp");
# VUSE <.MEM_1125>
D.47900_1474 = *D.44619_531;
# .MEM_1529 = VDEF <.MEM_1125>
maxptime_1473 = strtol (D.44619_527, 0B, 10);
# .MEM_1527 = VDEF <.MEM_1125>
ptime_1472 = strtol (D.44619_522, 0B, 10);
# VUSE <.MEM_1125>
map_559 = m_28->m_rtpmaps;
# .MEM_1300 = VDEF <.MEM_1125>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
# VUSE <.MEM_1125>
D.44546_555 = m_28->m_connections;
# VUSE <.MEM_1125>
connection_554 = sdp_198->sdp_connection;
# .MEM_1299 = VDEF <.MEM_1125>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
# .MEM_1295 = VDEF <.MEM_1125>
D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
# VUSE <.MEM_1125>
D.44530_536 = session_161(D)->channel;
# VUSE <.MEM_1125>
D.44821_534 = D.44471_533->ndlb;
# VUSE <.MEM_1125>
D.44471_533 = smh_186->mparams;
# VUSE <.MEM_1125>
D.44619_531 = attr_31->a_value;
# VUSE <.MEM_1125>
D.44619_526 = attr_31->a_value;
# VUSE <.MEM_1125>
D.44619_521 = attr_31->a_value;
# .MEM_1292 = VDEF <.MEM_1125>
switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);
# VUSE <.MEM_1125>
D.44530_511 = session_161(D)->channel;
# VUSE <.MEM_1125>
D.44619_510 = attr_31->a_value;
# VUSE <.MEM_1125>
D.44590_508 = attr_31->a_name;

.MEM_1126 : --> single use.
.MEM_1135 = PHI <.MEM_1126(241), .MEM_1127(247), .MEM_1303(248), .MEM_1303(249), .MEM_1134(309)>

.MEM_1127 : --> single use.
.MEM_1135 = PHI <.MEM_1126(241), .MEM_1127(247), .MEM_1303(248), .MEM_1303(249), .MEM_1134(309)>

.MEM_1128 : -->6 uses.
# VUSE <.MEM_1128>
D.44890_594 = strcasecmp (D.44889_593, "g723");
# VUSE <.MEM_1128>
map_bit_rate_1479 = CSWTCH.174[csui.173_591];
# .MEM_1307 = VDEF <.MEM_1128>
memset (&codec_fmtp, 0, 16);
# VUSE <.MEM_1128>
remote_codec_rate_596 = map_128->rm_rate;
# VUSE <.MEM_1128>
D.44889_593 = map_128->rm_encoding;
# VUSE <.MEM_1128>
D.44856_590 = map_128->rm_pt;

.MEM_1129 : --> single use.
.MEM_1133 = PHI <.MEM_1129(274), .MEM_1132(307)>

.MEM_1130 : -->11 uses.
.MEM_1131 = PHI <.MEM_1311(301), .MEM_1130(304)>
.MEM_1132 = PHI <.MEM_1133(275), .MEM_1130(299), .MEM_1316(305), .MEM_1321(306)>
# .MEM_1312 = VDEF <.MEM_1130>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
# VUSE <.MEM_1130>
D.44929_698 = imp_629->microseconds_per_packet;
# VUSE <.MEM_1130>
D.44927_696 = imp_629->ianacode;
# VUSE <.MEM_1130>
D.44926_695 = imp_629->iananame;
# VUSE <.MEM_1130>
D.44929_693 = imp_629->microseconds_per_packet;
# .MEM_1311 = VDEF <.MEM_1130>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
# VUSE <.MEM_1130>
D.44929_687 = imp_629->microseconds_per_packet;
# VUSE <.MEM_1130>
D.44984_686 = imp_629->samples_per_second;
# VUSE <.MEM_1130>
D.44926_685 = imp_629->iananame;

.MEM_1131 : --> single use.
# .MEM_1317 = VDEF <.MEM_1131>
matches[m_idx_101].codec_idx = i_129;

.MEM_1132 : --> single use.
.MEM_1133 = PHI <.MEM_1129(274), .MEM_1132(307)>

.MEM_1133 : -->13 uses.
.MEM_1132 = PHI <.MEM_1133(275), .MEM_1130(299), .MEM_1316(305), .MEM_1321(306)>
.MEM_1134 = PHI <.MEM_1321(306), .MEM_1133(308)>
# .MEM_1309 = VDEF <.MEM_1133>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
# VUSE <.MEM_1133>
D.44929_640 = imp_629->microseconds_per_packet;
# VUSE <.MEM_1133>
D.44927_638 = imp_629->ianacode;
# VUSE <.MEM_1133>
D.44926_637 = imp_629->iananame;
# VUSE <.MEM_1133>
D.44856_634 = map_128->rm_pt;
# VUSE <.MEM_1133>
D.44921_633 = imp_629->codec_type;
# VUSE <.MEM_1133>
codec_rate_632 = imp_629->samples_per_second;
# VUSE <.MEM_1133>
D.44920_630 = imp_629->bits_per_second;
# VUSE <.MEM_1133>
imp_629 = *D.44919_628;
# VUSE <.MEM_1133>
D.44996_622 = D.44471_621->num_codecs;
# VUSE <.MEM_1133>
D.44471_621 = smh_186->mparams;

.MEM_1134 : -->2 uses.
.MEM_1135 = PHI <.MEM_1126(241), .MEM_1127(247), .MEM_1303(248), .MEM_1303(249), .MEM_1134(309)>
.MEM_1137 = PHI <.MEM_1134(309), .MEM_1136(311)>

.MEM_1135 : -->2 uses.
.MEM_1136 = PHI <.MEM_1125(234), .MEM_1135(310)>
# VUSE <.MEM_1135>
map_711 = map_128->rm_next;

.MEM_1136 : -->2 uses.
.MEM_1137 = PHI <.MEM_1134(309), .MEM_1136(311)>
# .MEM_1301 = VDEF <.MEM_1136>
codec_fmtp = {};

.MEM_1137 : -->3 uses.
.MEM_1138 = PHI <.MEM_1137(312), .MEM_1322(313)>
# .MEM_1322 = VDEF <.MEM_1137>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
# VUSE <.MEM_1137>
D.45001_712 = smh_186->crypto_mode;

.MEM_1138 : -->2 uses.
.MEM_1139 = PHI <.MEM_1138(315), .MEM_1325(323)>
.MEM_1140 = PHI <.MEM_1138(314), .MEM_1330(322), .MEM_1139(324)>

.MEM_1139 : -->7 uses.
.MEM_1140 = PHI <.MEM_1138(314), .MEM_1330(322), .MEM_1139(324)>
# .MEM_1323 = VDEF <.MEM_1139>
switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);
# VUSE <.MEM_1139>
near_rate_729 = near_match_726->samples_per_second;
# VUSE <.MEM_1139>
D.45013_728 = near_match_726->iananame;
# VUSE <.MEM_1139>
near_map_727 = near_matches[j_133].map;
# VUSE <.MEM_1139>
near_match_726 = near_matches[j_133].imp;
# VUSE <.MEM_1139>
D.45012_724 = near_matches[j_133].rate;

.MEM_1140 : -->3 uses.
.MEM_1141 = PHI <.MEM_1140(326), .MEM_1331(327)>
.MEM_1148 = PHI <.MEM_1140(325), .MEM_1147(349)>
# .MEM_1331 = VDEF <.MEM_1140>
greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);

.MEM_1141 : --> single use.
# .MEM_1332 = VDEF <.MEM_1141>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;

.MEM_1142 : -->2 uses.
# .MEM_1338 = VDEF <.MEM_1142>
D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
# VUSE <.MEM_1142>
D.45049_767 = mmap_762->rm_encoding;

.MEM_1143 : -->2 uses.
# .MEM_1346 = VDEF <.MEM_1143>
pmap_760->codec_ms = D.45062_780;
# VUSE <.MEM_1143>
D.45060_778 = mimp_761->microseconds_per_packet;

.MEM_1144 : -->4 uses.
.MEM_1145 = PHI <.MEM_1144(343), .MEM_1352(344)>
# VUSE <.MEM_1144>
D.47926_1486 = *D.45079_790;
# .MEM_1352 = VDEF <.MEM_1144>
D.45082_793 = switch_stristr ("stereo=1", D.45079_792);
# VUSE <.MEM_1144>
D.45079_790 = mmap_762->rm_fmtp;

.MEM_1145 : --> single use.
# .MEM_1354 = VDEF <.MEM_1145>
pmap_760->channels = 1;

.MEM_1146 : -->2 uses.
# .MEM_1356 = VDEF <.MEM_1146>
D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
# VUSE <.MEM_1146>
D.45085_795 = connection_124->c_address;

.MEM_1147 : -->9 uses.
.MEM_1148 = PHI <.MEM_1140(325), .MEM_1147(349)>
# .MEM_1334 = VDEF <.MEM_1147>
pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
# VUSE <.MEM_1147>
D.45041_757 = D.45039_756->microseconds_per_packet;
# VUSE <.MEM_1147>
D.45040_755 = D.45039_754->samples_per_second;
# VUSE <.MEM_1147>
D.45039_754 = matches[j_135].imp;
# VUSE <.MEM_1147>
D.45037_752 = D.45034_751->rm_pt;
# VUSE <.MEM_1147>
D.45036_750 = D.45034_749->rm_fmtp;
# VUSE <.MEM_1147>
D.45035_748 = D.45034_747->rm_encoding;
# VUSE <.MEM_1147>
D.45034_747 = matches[j_135].map;

.MEM_1148 : -->4 uses.
.MEM_1150 = PHI <.MEM_1148(350), .MEM_1372(360), .MEM_1371(359)>
# VUSE <.MEM_1148>
D.44750_808 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1365 = VDEF <.MEM_1148>
switch_snprintf (&tmp, 50, "%d", D.44767_810);
# VUSE <.MEM_1148>
D.44762_809 = D.44750_808->remote_sdp_port;

.MEM_1149 : -->3 uses.
# .MEM_1371 = VDEF <.MEM_1149>
D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
# VUSE <.MEM_1149>
D.45098_822 = D.44471_821->codec_flags;
# VUSE <.MEM_1149>
D.44471_821 = smh_186->mparams;

.MEM_1150 : -->2 uses.
.MEM_1152 = PHI <.MEM_1150(361), .MEM_1374(363), .MEM_1375(364)>
# .MEM_1373 = VDEF <.MEM_1150>
D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);

.MEM_1151 : -->3 uses.
# .MEM_1375 = VDEF <.MEM_1151>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);
# VUSE <.MEM_1151>
D.45110_830 = D.44471_829->te;
# VUSE <.MEM_1151>
D.44471_829 = smh_186->mparams;

.MEM_1152 : -->2 uses.
# .MEM_1392 = VDEF <.MEM_1152>
D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
# .MEM_1376 = VDEF <.MEM_1152>
D.45114_834 = switch_channel_direction (channel_162);

.MEM_1153 : -->2 uses.
.MEM_1157 = PHI <.MEM_1153(403), .MEM_1156(443)>
# VUSE <.MEM_1153>
attr_893 = m_28->m_attributes;

.MEM_1154 : -->2 uses.
# .MEM_1411 = VDEF <.MEM_1154>
D.44471_905->rtcp_video_interval_msec = "10000";
# VUSE <.MEM_1154>
D.44471_905 = smh_186->mparams;

.MEM_1155 : -->2 uses.
# .MEM_1546 = VDEF <.MEM_1155>
crypto_tag_1502 = strtol (crypto_975, 0B, 10);
# VUSE <.MEM_1155>
crypto_975 = attr_33->a_value;

.MEM_1156 : -->2 uses.
.MEM_1157 = PHI <.MEM_1153(403), .MEM_1156(443)>
# VUSE <.MEM_1156>
attr_978 = attr_33->a_next;

.MEM_1157 : -->28 uses.
.MEM_1161 = PHI <.MEM_1157(447), .MEM_1160(462)>
.MEM_1155 = PHI <.MEM_1157(427), .MEM_1633(439), .MEM_1633(440)>
.MEM_1156 = PHI <.MEM_1157(405), .MEM_1411(413), .MEM_1414(420), .MEM_1157(421), .MEM_1157(422), .MEM_1157(426), .MEM_1418(442), .MEM_1157(410), .MEM_1413(419)>
.MEM_1156 = PHI <.MEM_1157(405), .MEM_1411(413), .MEM_1414(420), .MEM_1157(421), .MEM_1157(422), .MEM_1157(426), .MEM_1418(442), .MEM_1157(410), .MEM_1413(419)>
.MEM_1156 = PHI <.MEM_1157(405), .MEM_1411(413), .MEM_1414(420), .MEM_1157(421), .MEM_1157(422), .MEM_1157(426), .MEM_1418(442), .MEM_1157(410), .MEM_1413(419)>
.MEM_1156 = PHI <.MEM_1157(405), .MEM_1411(413), .MEM_1414(420), .MEM_1157(421), .MEM_1157(422), .MEM_1157(426), .MEM_1418(442), .MEM_1157(410), .MEM_1413(419)>
.MEM_1156 = PHI <.MEM_1157(405), .MEM_1411(413), .MEM_1414(420), .MEM_1157(421), .MEM_1157(422), .MEM_1157(426), .MEM_1418(442), .MEM_1157(410), .MEM_1413(419)>
# VUSE <.MEM_1157>
D.45219_961 = strcasecmp (D.44590_960, "crypto");
# VUSE <.MEM_1157>
D.45168_907 = strcasecmp (D.44590_906, "rtcp");
# VUSE <.MEM_1157>
D.45154_898 = strcasecmp (D.44590_897, "rtcp-fb");
# VUSE <.MEM_1157>
D.45151_895 = strcasecmp (D.44590_894, "framerate");
# VUSE <.MEM_1157>
D.45185_921 = MEM[(const unsigned char *)__s1_910 + 1B];
# VUSE <.MEM_1157>
D.47950_1500 = *D.44619_962;
# VUSE <.MEM_1157>
D.47943_1497 = *D.44619_899;
# VUSE <.MEM_1157>
rm_encoding_979 = map_136->rm_encoding;
# .MEM_1415 = VDEF <.MEM_1157>
D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);
# VUSE <.MEM_1157>
D.44530_967 = session_161(D)->channel;
# VUSE <.MEM_1157>
D.44821_965 = D.44471_964->ndlb;
# VUSE <.MEM_1157>
D.44471_964 = smh_186->mparams;
# VUSE <.MEM_1157>
D.44619_962 = attr_33->a_value;
# .MEM_1412 = VDEF <.MEM_1157>
switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_953, 1);
# VUSE <.MEM_1157>
D.44530_952 = session_161(D)->channel;
# VUSE <.MEM_1157>
D.45174_911 = *__s1_910;
# VUSE <.MEM_1157>
D.44619_908 = attr_33->a_value;
# .MEM_1409 = VDEF <.MEM_1157>
D.45160_902 = switch_stristr ("fir", D.44619_901);
# VUSE <.MEM_1157>
D.44619_899 = attr_33->a_value;
# VUSE <.MEM_1157>
D.44619_896 = attr_33->a_value;
# VUSE <.MEM_1157>
D.44590_894 = attr_33->a_name;

.MEM_1158 : -->4 uses.
# .MEM_1421 = VDEF <.MEM_1158>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
# VUSE <.MEM_1158>
D.45250_994 = imp_985->ianacode;
# VUSE <.MEM_1158>
D.45249_993 = imp_985->iananame;
# VUSE <.MEM_1158>
D.45247_991 = map_136->rm_pt;

.MEM_1160 : --> single use.
.MEM_1161 = PHI <.MEM_1157(447), .MEM_1160(462)>

.MEM_1161 : -->7 uses.
.MEM_1160 = PHI <.MEM_1161(448), .MEM_1420(450), .MEM_1421(460), .MEM_1421(459), .MEM_1424(461)>
.MEM_1162 = PHI <.MEM_1405(391), .MEM_1161(464)>
# VUSE <.MEM_1161>
map_1021 = map_136->rm_next;
# .MEM_1419 = VDEF <.MEM_1161>
D.45241_988 = switch_channel_direction (D.44530_987);
# VUSE <.MEM_1161>
D.44530_987 = session_161(D)->channel;
# VUSE <.MEM_1161>
D.45238_986 = imp_985->codec_type;
# VUSE <.MEM_1161>
imp_985 = *D.45237_984;

.MEM_1162 : -->4 uses.
.MEM_1163 = PHI <.MEM_1162(466), .MEM_1425(467)>
# .MEM_1425 = VDEF <.MEM_1162>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
# VUSE <.MEM_1162>
D.45001_1022 = smh_186->crypto_mode;
# .MEM_1407 = VDEF <.MEM_1162>
D.45137_884 = switch_rtp_has_dtls ();

.MEM_1163 : -->3 uses.
.MEM_1164 = PHI <.MEM_1163(469), .MEM_1426(470)>
.MEM_1168 = PHI <.MEM_1398(383), .MEM_1113(385), .MEM_1113(386), .MEM_1163(468), .MEM_1453(487), .MEM_1454(488), .MEM_1387(369), .MEM_1391(370), .MEM_1380(367), .MEM_1382(368), .MEM_1402(384)>
# .MEM_1426 = VDEF <.MEM_1163>
greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);

.MEM_1164 : --> single use.
# .MEM_1427 = VDEF <.MEM_1164>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;

.MEM_1165 : -->4 uses.
# .MEM_1432 = VDEF <.MEM_1165>
D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
# VUSE <.MEM_1165>
D.45255_1051 = map_1050->rm_encoding;
# VUSE <.MEM_1165>
map_1050 = matches[j_141].map;
# VUSE <.MEM_1165>
mimp_1049 = matches[j_141].imp;

.MEM_1166 : -->11 uses.
# VUSE <.MEM_1166>
D.45286_1068 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1443 = VDEF <.MEM_1166>
switch_snprintf (&tmp, 50, "%d", D.45300_1070);
# VUSE <.MEM_1166>
D.45299_1069 = D.45286_1068->remote_sdp_port;
# .MEM_1428 = VDEF <.MEM_1166>
pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
# VUSE <.MEM_1166>
D.45281_1041 = D.45279_1040->microseconds_per_packet;
# VUSE <.MEM_1166>
D.45280_1039 = D.45279_1038->samples_per_second;
# VUSE <.MEM_1166>
D.45279_1038 = matches[j_141].imp;
# VUSE <.MEM_1166>
D.45277_1036 = D.45274_1035->rm_pt;
# VUSE <.MEM_1166>
D.45276_1034 = D.45274_1033->rm_fmtp;
# VUSE <.MEM_1166>
D.45275_1032 = D.45274_1031->rm_encoding;
# VUSE <.MEM_1166>
D.45274_1031 = matches[j_141].map;

.MEM_1167 : --> single use.
# .MEM_1453 = VDEF <.MEM_1167>
D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);

.MEM_1168 : -->2 uses.
.MEM_1169 = PHI <.MEM_1232(131), .MEM_1168(489)>
# VUSE <.MEM_1168>
m_1093 = m_28->m_next;

.MEM_1169 : -->4 uses.
.MEM_1112 = PHI <.MEM_1169(132), .MEM_1233(133)>
.MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>
# .MEM_1233 = VDEF <.MEM_1169>
switch_core_session_set_ice (session_161(D));
# VUSE <.MEM_1169>
D.44666_373 = m_28->m_proto;

.MEM_1170 : -->2 uses.
.MEM_1171 = PHI <.MEM_1170(491), .MEM_1455(492)>
# .MEM_1455 = VDEF <.MEM_1170>
sdp_parser_free (parser_196);

.MEM_1171 : -->2 uses.
# .MEM_1456 = VDEF <.MEM_1171>
D.44471_1094->cng_pt = cng_pt_27;
# VUSE <.MEM_1171>
D.44471_1094 = smh_186->mparams;

.MEM_1172(D) : --> single use.
# .MEM_1173 = VDEF <.MEM_1172(D)>
channel_162 = switch_core_session_get_channel (session_161(D));

.MEM_1173 : --> single use.
# .MEM_1174 = VDEF <.MEM_1173>
matches = {};

.MEM_1174 : --> single use.
# .MEM_1175 = VDEF <.MEM_1174>
near_matches = {};

.MEM_1175 : -->6 uses.
# VUSE <.MEM_1175>
D.44472_194 = strlen (r_sdp_193(D));
# .MEM_1176 = VDEF <.MEM_1175>
parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
# VUSE <.MEM_1175>
total_codecs_192 = D.44471_191->num_codecs;
# VUSE <.MEM_1175>
D.44471_191 = smh_186->mparams;
# VUSE <.MEM_1175>
smh_186 = session_161(D)->media_handle;
# VUSE <.MEM_1175>
__assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

.MEM_1176 : --> single use.
# .MEM_1177 = VDEF <.MEM_1176>
sdp_198 = sdp_session (parser_196);

.MEM_1177 : -->2 uses.
# .MEM_1179 = VDEF <.MEM_1177>
D.44478_200 = dtls_ok (session_161(D));
# .MEM_1178 = VDEF <.MEM_1177>
sdp_parser_free (parser_196);

.MEM_1178 : --> no uses.

.MEM_1179 : -->4 uses.
.MEM_1096 = PHI <.MEM_1179(8), .MEM_1180(9), .MEM_1621(21), .MEM_1183(22)>
# .MEM_1180 = VDEF <.MEM_1179>
tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
# VUSE <.MEM_1179>
D.44482_202 = D.44481_201->channel;
# VUSE <.MEM_1179>
D.44481_201 = smh_186->session;

.MEM_1180 : -->17 uses.
# .MEM_1634 = VDEF <.MEM_1180>
D.49682_1557 = switch_is_number (tmp_203);
.MEM_1621 = PHI <.MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1180(17), .MEM_1635(19), .MEM_1620(20)>
# VUSE <.MEM_1180>
D.49681_1556 = strcasecmp (tmp_203, "disallow");
.MEM_1621 = PHI <.MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1180(17), .MEM_1635(19), .MEM_1620(20)>
# VUSE <.MEM_1180>
D.49680_1555 = strcasecmp (tmp_203, "inactive");
.MEM_1621 = PHI <.MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1180(17), .MEM_1635(19), .MEM_1620(20)>
# VUSE <.MEM_1180>
D.49679_1554 = strcasecmp (tmp_203, "disabled");
.MEM_1621 = PHI <.MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1180(17), .MEM_1635(19), .MEM_1620(20)>
# VUSE <.MEM_1180>
D.49678_1553 = strcasecmp (tmp_203, "f");
.MEM_1621 = PHI <.MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1180(17), .MEM_1635(19), .MEM_1620(20)>
# VUSE <.MEM_1180>
D.49677_1552 = strcasecmp (tmp_203, "false");
.MEM_1621 = PHI <.MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1180(17), .MEM_1635(19), .MEM_1620(20)>
# VUSE <.MEM_1180>
D.49676_1551 = strcasecmp (tmp_203, "off");
.MEM_1621 = PHI <.MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1180(17), .MEM_1635(19), .MEM_1620(20)>
# VUSE <.MEM_1180>
D.49675_1550 = strcasecmp (tmp_203, "no");
.MEM_1620 = PHI <.MEM_1180(10), .MEM_1634(18), .MEM_1635(19)>
.MEM_1096 = PHI <.MEM_1179(8), .MEM_1180(9), .MEM_1621(21), .MEM_1183(22)>

.MEM_1181 : --> no uses.

.MEM_1182 : -->3 uses.
# .MEM_1183 = VDEF <.MEM_1182>
switch_channel_clear_flag (D.44482_208, 109);
# VUSE <.MEM_1182>
D.44482_208 = D.44481_207->channel;
# VUSE <.MEM_1182>
D.44481_207 = smh_186->session;

.MEM_1183 : --> single use.
.MEM_1096 = PHI <.MEM_1179(8), .MEM_1180(9), .MEM_1621(21), .MEM_1183(22)>

.MEM_1184 : -->2 uses.
.MEM_1512 = PHI <.MEM_1184(23), .MEM_1516(24)>
# VUSE <.MEM_1184>
pmap_1457 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;

.MEM_1185 : --> no uses.

.MEM_1186 : --> no uses.

.MEM_1187 : --> single use.
.MEM_1097 = PHI <.MEM_1513(31), .MEM_1187(32)>

.MEM_1188 : --> single use.
# .MEM_1189 = VDEF <.MEM_1188>
D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);

.MEM_1189 : --> single use.
# .MEM_1190 = VDEF <.MEM_1189>
val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);

.MEM_1190 : -->8 uses.
.MEM_1098 = PHI <.MEM_1190(33), .MEM_1190(34), .MEM_1190(35), .MEM_1190(36), .MEM_1191(37)>
.MEM_1098 = PHI <.MEM_1190(33), .MEM_1190(34), .MEM_1190(35), .MEM_1190(36), .MEM_1191(37)>
.MEM_1098 = PHI <.MEM_1190(33), .MEM_1190(34), .MEM_1190(35), .MEM_1190(36), .MEM_1191(37)>
.MEM_1098 = PHI <.MEM_1190(33), .MEM_1190(34), .MEM_1190(35), .MEM_1190(36), .MEM_1191(37)>
# VUSE <.MEM_1190>
D.44502_221 = strcasecmp (val_214, "scrooge");
# VUSE <.MEM_1190>
D.44498_218 = strcasecmp (val_214, "greedy");
# VUSE <.MEM_1190>
D.44494_215 = strcasecmp (val_214, "generous");
# .MEM_1191 = VDEF <.MEM_1190>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);

.MEM_1191 : --> single use.
.MEM_1098 = PHI <.MEM_1190(33), .MEM_1190(34), .MEM_1190(35), .MEM_1190(36), .MEM_1191(37)>

.MEM_1192 : --> single use.
# .MEM_1193 = VDEF <.MEM_1192>
smh_186->origin = D.44508_226;

.MEM_1193 : -->8 uses.
.MEM_1099 = PHI <.MEM_1193(39), .MEM_1193(40), .MEM_1195(41)>
.MEM_1099 = PHI <.MEM_1193(39), .MEM_1193(40), .MEM_1195(41)>
.MEM_1100 = PHI <.MEM_1193(38), .MEM_1099(42), .MEM_1099(43), .MEM_1197(44)>
# VUSE <.MEM_1193>
D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");
# VUSE <.MEM_1193>
D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
# .MEM_1194 = VDEF <.MEM_1193>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
# VUSE <.MEM_1193>
D.44512_229 = D.44471_228->auto_rtp_bugs;
# VUSE <.MEM_1193>
D.44471_228 = smh_186->mparams;

.MEM_1194 : --> single use.
# .MEM_1195 = VDEF <.MEM_1194>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");

.MEM_1195 : --> single use.
.MEM_1099 = PHI <.MEM_1193(39), .MEM_1193(40), .MEM_1195(41)>

.MEM_1196 : --> single use.
# .MEM_1197 = VDEF <.MEM_1196>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");

.MEM_1197 : --> single use.
.MEM_1100 = PHI <.MEM_1193(38), .MEM_1099(42), .MEM_1099(43), .MEM_1197(44)>

.MEM_1198 : -->17 uses.
# .MEM_1637 = VDEF <.MEM_1198>
D.49694_1567 = switch_is_number (val_245);
.MEM_1623 = PHI <.MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1198(50), .MEM_1198(51), .MEM_1198(52), .MEM_1198(53), .MEM_1638(55), .MEM_1622(56)>
# VUSE <.MEM_1198>
D.49693_1566 = strcasecmp (val_245, "allow");
.MEM_1623 = PHI <.MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1198(50), .MEM_1198(51), .MEM_1198(52), .MEM_1198(53), .MEM_1638(55), .MEM_1622(56)>
# VUSE <.MEM_1198>
D.49692_1565 = strcasecmp (val_245, "active");
.MEM_1623 = PHI <.MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1198(50), .MEM_1198(51), .MEM_1198(52), .MEM_1198(53), .MEM_1638(55), .MEM_1622(56)>
# VUSE <.MEM_1198>
D.49691_1564 = strcasecmp (val_245, "enabled");
.MEM_1623 = PHI <.MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1198(50), .MEM_1198(51), .MEM_1198(52), .MEM_1198(53), .MEM_1638(55), .MEM_1622(56)>
# VUSE <.MEM_1198>
D.49690_1563 = strcasecmp (val_245, "t");
.MEM_1623 = PHI <.MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1198(50), .MEM_1198(51), .MEM_1198(52), .MEM_1198(53), .MEM_1638(55), .MEM_1622(56)>
# VUSE <.MEM_1198>
D.49689_1562 = strcasecmp (val_245, "true");
.MEM_1623 = PHI <.MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1198(50), .MEM_1198(51), .MEM_1198(52), .MEM_1198(53), .MEM_1638(55), .MEM_1622(56)>
# VUSE <.MEM_1198>
D.49688_1561 = strcasecmp (val_245, "on");
.MEM_1623 = PHI <.MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1198(50), .MEM_1198(51), .MEM_1198(52), .MEM_1198(53), .MEM_1638(55), .MEM_1622(56)>
# VUSE <.MEM_1198>
D.49687_1560 = strcasecmp (val_245, "yes");
.MEM_1622 = PHI <.MEM_1198(46), .MEM_1637(54), .MEM_1638(55)>
.MEM_1101 = PHI <.MEM_1198(45), .MEM_1623(57), .MEM_1200(58)>

.MEM_1199 : --> no uses.

.MEM_1200 : --> single use.
.MEM_1101 = PHI <.MEM_1198(45), .MEM_1623(57), .MEM_1200(58)>

.MEM_1201 : --> single use.
.MEM_1102 = PHI <.MEM_1103(69), .MEM_1201(71), .MEM_1202(73), .MEM_1209(77), .MEM_1103(79), .MEM_1520(81), .MEM_1103(82), .MEM_1522(83), .MEM_1207(76)>

.MEM_1202 : --> single use.
.MEM_1102 = PHI <.MEM_1103(69), .MEM_1201(71), .MEM_1202(73), .MEM_1209(77), .MEM_1103(79), .MEM_1520(81), .MEM_1103(82), .MEM_1522(83), .MEM_1207(76)>

.MEM_1203 : -->2 uses.
# VUSE <.MEM_1203>
D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1204 = VDEF <.MEM_1203>
D.44606_319 = switch_rtp_ready (D.44605_318);

.MEM_1204 : -->4 uses.
# VUSE <.MEM_1204>
D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1208 = VDEF <.MEM_1204>
switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
# VUSE <.MEM_1204>
D.44530_321 = session_161(D)->channel;
# .MEM_1205 = VDEF <.MEM_1204>
switch_rtp_set_max_missed_packets (D.44605_320, 0);

.MEM_1205 : --> single use.
# .MEM_1206 = VDEF <.MEM_1205>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;

.MEM_1206 : --> single use.
# .MEM_1207 = VDEF <.MEM_1206>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;

.MEM_1207 : --> single use.
.MEM_1102 = PHI <.MEM_1103(69), .MEM_1201(71), .MEM_1202(73), .MEM_1209(77), .MEM_1103(79), .MEM_1520(81), .MEM_1103(82), .MEM_1522(83), .MEM_1207(76)>

.MEM_1208 : -->2 uses.
# .MEM_1209 = VDEF <.MEM_1208>
switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
# VUSE <.MEM_1208>
D.44530_322 = session_161(D)->channel;

.MEM_1209 : --> single use.
.MEM_1102 = PHI <.MEM_1103(69), .MEM_1201(71), .MEM_1202(73), .MEM_1209(77), .MEM_1103(79), .MEM_1520(81), .MEM_1103(82), .MEM_1522(83), .MEM_1207(76)>

.MEM_1210 : --> single use.
.MEM_1104 = PHI <.MEM_1103(86), .MEM_1210(87)>

.MEM_1211 : -->3 uses.
.MEM_1106 = PHI <.MEM_1211(88), .MEM_1625(101), .MEM_1105(102), .MEM_1215(103), .MEM_1217(104), .MEM_1218(105)>
# .MEM_1212 = VDEF <.MEM_1211>
val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
# VUSE <.MEM_1211>
D.44530_340 = session_161(D)->channel;

.MEM_1212 : -->17 uses.
# .MEM_1640 = VDEF <.MEM_1212>
D.49706_1577 = switch_is_number (val_341);
.MEM_1625 = PHI <.MEM_1212(91), .MEM_1212(92), .MEM_1212(93), .MEM_1212(94), .MEM_1212(95), .MEM_1212(96), .MEM_1212(97), .MEM_1641(99), .MEM_1624(100)>
# VUSE <.MEM_1212>
D.49705_1576 = strcasecmp (val_341, "allow");
.MEM_1625 = PHI <.MEM_1212(91), .MEM_1212(92), .MEM_1212(93), .MEM_1212(94), .MEM_1212(95), .MEM_1212(96), .MEM_1212(97), .MEM_1641(99), .MEM_1624(100)>
# VUSE <.MEM_1212>
D.49704_1575 = strcasecmp (val_341, "active");
.MEM_1625 = PHI <.MEM_1212(91), .MEM_1212(92), .MEM_1212(93), .MEM_1212(94), .MEM_1212(95), .MEM_1212(96), .MEM_1212(97), .MEM_1641(99), .MEM_1624(100)>
# VUSE <.MEM_1212>
D.49703_1574 = strcasecmp (val_341, "enabled");
.MEM_1625 = PHI <.MEM_1212(91), .MEM_1212(92), .MEM_1212(93), .MEM_1212(94), .MEM_1212(95), .MEM_1212(96), .MEM_1212(97), .MEM_1641(99), .MEM_1624(100)>
# VUSE <.MEM_1212>
D.49702_1573 = strcasecmp (val_341, "t");
.MEM_1625 = PHI <.MEM_1212(91), .MEM_1212(92), .MEM_1212(93), .MEM_1212(94), .MEM_1212(95), .MEM_1212(96), .MEM_1212(97), .MEM_1641(99), .MEM_1624(100)>
# VUSE <.MEM_1212>
D.49701_1572 = strcasecmp (val_341, "true");
.MEM_1625 = PHI <.MEM_1212(91), .MEM_1212(92), .MEM_1212(93), .MEM_1212(94), .MEM_1212(95), .MEM_1212(96), .MEM_1212(97), .MEM_1641(99), .MEM_1624(100)>
# VUSE <.MEM_1212>
D.49700_1571 = strcasecmp (val_341, "on");
.MEM_1625 = PHI <.MEM_1212(91), .MEM_1212(92), .MEM_1212(93), .MEM_1212(94), .MEM_1212(95), .MEM_1212(96), .MEM_1212(97), .MEM_1641(99), .MEM_1624(100)>
# VUSE <.MEM_1212>
D.49699_1570 = strcasecmp (val_341, "yes");
.MEM_1624 = PHI <.MEM_1212(90), .MEM_1640(98), .MEM_1641(99)>
.MEM_1105 = PHI <.MEM_1212(89), .MEM_1625(101)>

.MEM_1213 : --> no uses.

.MEM_1214 : --> single use.
# .MEM_1215 = VDEF <.MEM_1214>
D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);

.MEM_1215 : -->2 uses.
.MEM_1106 = PHI <.MEM_1211(88), .MEM_1625(101), .MEM_1105(102), .MEM_1215(103), .MEM_1217(104), .MEM_1218(105)>
# .MEM_1216 = VDEF <.MEM_1215>
reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);

.MEM_1216 : -->2 uses.
# .MEM_1217 = VDEF <.MEM_1216>
val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
# VUSE <.MEM_1216>
D.44530_350 = session_161(D)->channel;

.MEM_1217 : -->2 uses.
.MEM_1106 = PHI <.MEM_1211(88), .MEM_1625(101), .MEM_1105(102), .MEM_1215(103), .MEM_1217(104), .MEM_1218(105)>
# .MEM_1218 = VDEF <.MEM_1217>
reneg_352 = switch_true (val_351);

.MEM_1218 : --> single use.
.MEM_1106 = PHI <.MEM_1211(88), .MEM_1625(101), .MEM_1105(102), .MEM_1215(103), .MEM_1217(104), .MEM_1218(105)>

.MEM_1219 : -->2 uses.
# .MEM_1220 = VDEF <.MEM_1219>
val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
# VUSE <.MEM_1219>
D.44530_354 = session_161(D)->channel;

.MEM_1220 : -->17 uses.
# .MEM_1643 = VDEF <.MEM_1220>
D.49718_1587 = switch_is_number (val_355);
.MEM_1627 = PHI <.MEM_1220(109), .MEM_1220(110), .MEM_1220(111), .MEM_1220(112), .MEM_1220(113), .MEM_1220(114), .MEM_1220(115), .MEM_1644(117), .MEM_1626(118)>
# VUSE <.MEM_1220>
D.49717_1586 = strcasecmp (val_355, "allow");
.MEM_1627 = PHI <.MEM_1220(109), .MEM_1220(110), .MEM_1220(111), .MEM_1220(112), .MEM_1220(113), .MEM_1220(114), .MEM_1220(115), .MEM_1644(117), .MEM_1626(118)>
# VUSE <.MEM_1220>
D.49716_1585 = strcasecmp (val_355, "active");
.MEM_1627 = PHI <.MEM_1220(109), .MEM_1220(110), .MEM_1220(111), .MEM_1220(112), .MEM_1220(113), .MEM_1220(114), .MEM_1220(115), .MEM_1644(117), .MEM_1626(118)>
# VUSE <.MEM_1220>
D.49715_1584 = strcasecmp (val_355, "enabled");
.MEM_1627 = PHI <.MEM_1220(109), .MEM_1220(110), .MEM_1220(111), .MEM_1220(112), .MEM_1220(113), .MEM_1220(114), .MEM_1220(115), .MEM_1644(117), .MEM_1626(118)>
# VUSE <.MEM_1220>
D.49714_1583 = strcasecmp (val_355, "t");
.MEM_1627 = PHI <.MEM_1220(109), .MEM_1220(110), .MEM_1220(111), .MEM_1220(112), .MEM_1220(113), .MEM_1220(114), .MEM_1220(115), .MEM_1644(117), .MEM_1626(118)>
# VUSE <.MEM_1220>
D.49713_1582 = strcasecmp (val_355, "true");
.MEM_1627 = PHI <.MEM_1220(109), .MEM_1220(110), .MEM_1220(111), .MEM_1220(112), .MEM_1220(113), .MEM_1220(114), .MEM_1220(115), .MEM_1644(117), .MEM_1626(118)>
# VUSE <.MEM_1220>
D.49712_1581 = strcasecmp (val_355, "on");
.MEM_1627 = PHI <.MEM_1220(109), .MEM_1220(110), .MEM_1220(111), .MEM_1220(112), .MEM_1220(113), .MEM_1220(114), .MEM_1220(115), .MEM_1644(117), .MEM_1626(118)>
# VUSE <.MEM_1220>
D.49711_1580 = strcasecmp (val_355, "yes");
.MEM_1626 = PHI <.MEM_1220(108), .MEM_1643(116), .MEM_1644(117)>
.MEM_1107 = PHI <.MEM_1106(106), .MEM_1220(107), .MEM_1627(119)>

.MEM_1221 : --> no uses.

.MEM_1222 : --> single use.
.MEM_1108 = PHI <.MEM_1107(120), .MEM_1222(121)>

.MEM_1223 : --> single use.
# .MEM_1224 = VDEF <.MEM_1223>
switch_core_media_prepare_codecs (session_161(D), 0);

.MEM_1224 : -->3 uses.
.MEM_1109 = PHI <.MEM_1108(124), .MEM_1108(125), .MEM_1224(126)>
# VUSE <.MEM_1224>
total_codecs_365 = D.44471_364->num_codecs;
# VUSE <.MEM_1224>
D.44471_364 = smh_186->mparams;

.MEM_1225 : -->2 uses.
.MEM_1110 = PHI <.MEM_1225(127), .MEM_1226(128), .MEM_1227(129)>
# .MEM_1226 = VDEF <.MEM_1225>
D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));

.MEM_1226 : -->2 uses.
.MEM_1110 = PHI <.MEM_1225(127), .MEM_1226(128), .MEM_1227(129)>
# .MEM_1227 = VDEF <.MEM_1226>
D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));

.MEM_1227 : -->2 uses.
.MEM_1111 = PHI <.MEM_1227(129), .MEM_1228(130)>
.MEM_1110 = PHI <.MEM_1225(127), .MEM_1226(128), .MEM_1227(129)>

.MEM_1228 : --> single use.
.MEM_1111 = PHI <.MEM_1227(129), .MEM_1228(130)>

.MEM_1229 : --> single use.
# .MEM_1230 = VDEF <.MEM_1229>
switch_core_media_pass_zrtp_hash (session_161(D));

.MEM_1230 : --> single use.
# .MEM_1231 = VDEF <.MEM_1230>
check_ice (smh_186, 0, sdp_198, 0B);

.MEM_1231 : --> single use.
# .MEM_1232 = VDEF <.MEM_1231>
check_ice (smh_186, 1, sdp_198, 0B);

.MEM_1232 : -->2 uses.
.MEM_1169 = PHI <.MEM_1232(131), .MEM_1168(489)>
# VUSE <.MEM_1232>
m_370 = sdp_198->sdp_media;

.MEM_1233 : --> single use.
.MEM_1112 = PHI <.MEM_1169(132), .MEM_1233(133)>

.MEM_1234 : --> single use.
.MEM_1113 = PHI <.MEM_1112(134), .MEM_1112(135), .MEM_1234(136)>

.MEM_1235 : -->2 uses.
# .MEM_1236 = VDEF <.MEM_1235>
D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
# VUSE <.MEM_1235>
D.44530_395 = session_161(D)->channel;

.MEM_1236 : -->2 uses.
.MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>
# .MEM_1237 = VDEF <.MEM_1236>
D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);

.MEM_1237 : --> single use.
# .MEM_1238 = VDEF <.MEM_1237>
D.44703_399 = switch_true (D.44702_398);

.MEM_1238 : -->3 uses.
# .MEM_1240 = VDEF <.MEM_1238>
var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
# .MEM_1239 = VDEF <.MEM_1238>
switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
# VUSE <.MEM_1238>
D.44530_400 = session_161(D)->channel;

.MEM_1239 : --> single use.
.MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>

.MEM_1240 : -->3 uses.
# .MEM_1241 = VDEF <.MEM_1240>
D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
# VUSE <.MEM_1240>
D.44482_404 = D.44481_403->channel;
# VUSE <.MEM_1240>
D.44481_403 = smh_186->session;

.MEM_1241 : -->2 uses.
# .MEM_1242 = VDEF <.MEM_1241>
D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
# VUSE <.MEM_1241>
D.44530_407 = session_161(D)->channel;

.MEM_1242 : -->3 uses.
.MEM_1114 = PHI <.MEM_1242(151), .MEM_1242(152), .MEM_1243(153)>
.MEM_1114 = PHI <.MEM_1242(151), .MEM_1242(152), .MEM_1243(153)>
# .MEM_1243 = VDEF <.MEM_1242>
*proceed_209(D) = 0;

.MEM_1243 : --> single use.
.MEM_1114 = PHI <.MEM_1242(151), .MEM_1242(152), .MEM_1243(153)>

.MEM_1244 : -->4 uses.
.MEM_1115 = PHI <.MEM_1114(154), .MEM_1244(155), .MEM_1244(156), .MEM_1244(157)>
.MEM_1115 = PHI <.MEM_1114(154), .MEM_1244(155), .MEM_1244(156), .MEM_1244(157)>
.MEM_1115 = PHI <.MEM_1114(154), .MEM_1244(155), .MEM_1244(156), .MEM_1244(157)>
# VUSE <.MEM_1244>
D.44716_410 = strcasecmp (var_402, "once");

.MEM_1245 : -->2 uses.
.MEM_1116 = PHI <.MEM_1115(158), .MEM_1245(159)>
.MEM_1118 = PHI <.MEM_1249(163), .MEM_1246(160), .MEM_1245(159), .MEM_1249(164), .MEM_1248(162), .MEM_1247(161)>

.MEM_1246 : -->3 uses.
.MEM_1118 = PHI <.MEM_1249(163), .MEM_1246(160), .MEM_1245(159), .MEM_1249(164), .MEM_1248(162), .MEM_1247(161)>
# .MEM_1247 = VDEF <.MEM_1246>
D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
# VUSE <.MEM_1246>
D.44530_417 = session_161(D)->channel;

.MEM_1247 : -->3 uses.
.MEM_1118 = PHI <.MEM_1249(163), .MEM_1246(160), .MEM_1245(159), .MEM_1249(164), .MEM_1248(162), .MEM_1247(161)>
# .MEM_1248 = VDEF <.MEM_1247>
D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
# VUSE <.MEM_1247>
D.44530_419 = session_161(D)->channel;

.MEM_1248 : -->3 uses.
.MEM_1118 = PHI <.MEM_1249(163), .MEM_1246(160), .MEM_1245(159), .MEM_1249(164), .MEM_1248(162), .MEM_1247(161)>
# VUSE <.MEM_1248>
D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1249 = VDEF <.MEM_1248>
D.44730_422 = switch_rtp_ready (D.44605_421);

.MEM_1249 : -->2 uses.
.MEM_1118 = PHI <.MEM_1249(163), .MEM_1246(160), .MEM_1245(159), .MEM_1249(164), .MEM_1248(162), .MEM_1247(161)>
.MEM_1118 = PHI <.MEM_1249(163), .MEM_1246(160), .MEM_1245(159), .MEM_1249(164), .MEM_1248(162), .MEM_1247(161)>

.MEM_1250 : -->3 uses.
.MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>
# .MEM_1251 = VDEF <.MEM_1250>
other_channel_426 = switch_core_session_get_channel (other_session.89_425);
# VUSE <.MEM_1250>
other_session.89_425 = other_session;

.MEM_1251 : -->2 uses.
# VUSE <.MEM_1251>
D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1252 = VDEF <.MEM_1251>
remote_host_428 = switch_rtp_get_remote_host (D.44605_427);

.MEM_1252 : -->2 uses.
# VUSE <.MEM_1252>
D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1253 = VDEF <.MEM_1252>
remote_port_430 = switch_rtp_get_remote_port (D.44605_429);

.MEM_1253 : --> single use.
# .MEM_1254 = VDEF <.MEM_1253>
tmp = "";

.MEM_1254 : --> single use.
# .MEM_1255 = VDEF <.MEM_1254>
D.44737_431 = switch_channel_test_flag (other_channel_426, 1);

.MEM_1255 : -->4 uses.
# .MEM_1260 = VDEF <.MEM_1255>
D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
# VUSE <.MEM_1255>
D.44530_438 = session_161(D)->channel;
# .MEM_1256 = VDEF <.MEM_1255>
D.44740_433 = switch_channel_get_name (D.44530_432);
# VUSE <.MEM_1255>
D.44530_432 = session_161(D)->channel;

.MEM_1256 : --> single use.
# .MEM_1257 = VDEF <.MEM_1256>
D.44741_434 = switch_channel_get_name (other_channel_426);

.MEM_1257 : --> single use.
# .MEM_1258 = VDEF <.MEM_1257>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);

.MEM_1258 : -->2 uses.
# .MEM_1259 = VDEF <.MEM_1258>
switch_core_session_rwunlock (other_session.89_435);
# VUSE <.MEM_1258>
other_session.89_435 = other_session;

.MEM_1259 : --> single use.
.MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>

.MEM_1260 : --> single use.
# .MEM_1261 = VDEF <.MEM_1260>
D.44743_440 = switch_true (D.44742_439);

.MEM_1261 : -->3 uses.
.MEM_1119 = PHI <.MEM_1261(169), .MEM_1263(170), .MEM_1264(171)>
# .MEM_1262 = VDEF <.MEM_1261>
D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
# VUSE <.MEM_1261>
D.44530_441 = session_161(D)->channel;

.MEM_1262 : --> single use.
# .MEM_1263 = VDEF <.MEM_1262>
D.44747_443 = switch_true (D.44746_442);

.MEM_1263 : -->2 uses.
.MEM_1119 = PHI <.MEM_1261(169), .MEM_1263(170), .MEM_1264(171)>
# .MEM_1264 = VDEF <.MEM_1263>
switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);

.MEM_1264 : --> single use.
.MEM_1119 = PHI <.MEM_1261(169), .MEM_1263(170), .MEM_1264(171)>

.MEM_1265 : --> single use.
# .MEM_1266 = VDEF <.MEM_1265>
D.44750_444->remote_sdp_ip = D.44752_446;

.MEM_1266 : -->3 uses.
# VUSE <.MEM_1266>
D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1267 = VDEF <.MEM_1266>
D.44750_447->remote_sdp_port = D.44753_448;
# VUSE <.MEM_1266>
D.44753_448 = t38_options_394->remote_port;

.MEM_1267 : -->5 uses.
# VUSE <.MEM_1267>
D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
# .MEM_1270 = VDEF <.MEM_1267>
err = 0B;
# .MEM_1268 = VDEF <.MEM_1267>
D.44764_458 = switch_channel_get_name (D.44530_457);
# VUSE <.MEM_1267>
D.44530_457 = session_161(D)->channel;
# VUSE <.MEM_1267>
D.44760_453 = D.44750_452->remote_sdp_ip;

.MEM_1268 : --> single use.
# .MEM_1269 = VDEF <.MEM_1268>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);

.MEM_1269 : --> single use.
.MEM_1120 = PHI <.MEM_1269(175), .MEM_1276(176), .MEM_1278(177)>

.MEM_1270 : -->2 uses.
# .MEM_1271 = VDEF <.MEM_1270>
D.44765_460 = switch_channel_get_name (D.44530_459);
# VUSE <.MEM_1270>
D.44530_459 = session_161(D)->channel;

.MEM_1271 : -->4 uses.
# VUSE <.MEM_1271>
D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1272 = VDEF <.MEM_1271>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
# VUSE <.MEM_1271>
D.44762_465 = D.44750_464->remote_sdp_port;
# VUSE <.MEM_1271>
D.44760_463 = D.44750_462->remote_sdp_ip;

.MEM_1272 : -->3 uses.
# VUSE <.MEM_1272>
D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1273 = VDEF <.MEM_1272>
switch_snprintf (&tmp, 32, "%d", D.44767_469);
# VUSE <.MEM_1272>
D.44762_468 = D.44750_467->remote_sdp_port;

.MEM_1273 : -->4 uses.
# VUSE <.MEM_1273>
D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1274 = VDEF <.MEM_1273>
switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
# VUSE <.MEM_1273>
D.44760_472 = D.44750_471->remote_sdp_ip;
# VUSE <.MEM_1273>
D.44530_470 = session_161(D)->channel;

.MEM_1274 : -->2 uses.
# .MEM_1275 = VDEF <.MEM_1274>
switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
# VUSE <.MEM_1274>
D.44530_473 = session_161(D)->channel;

.MEM_1275 : -->5 uses.
# VUSE <.MEM_1275>
D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# VUSE <.MEM_1275>
D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1276 = VDEF <.MEM_1275>
D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
# VUSE <.MEM_1275>
D.44762_478 = D.44750_477->remote_sdp_port;
# VUSE <.MEM_1275>
D.44760_476 = D.44750_475->remote_sdp_ip;

.MEM_1276 : -->3 uses.
.MEM_1120 = PHI <.MEM_1269(175), .MEM_1276(176), .MEM_1278(177)>
# .MEM_1277 = VDEF <.MEM_1276>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
# VUSE <.MEM_1276>
err.90_480 = err;

.MEM_1277 : --> single use.
# .MEM_1278 = VDEF <.MEM_1277>
switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);

.MEM_1278 : --> single use.
.MEM_1120 = PHI <.MEM_1269(175), .MEM_1276(176), .MEM_1278(177)>

.MEM_1279 : -->3 uses.
# .MEM_1280 = VDEF <.MEM_1279>
switch_channel_set_flag_value (D.44482_483, 101, 1);
# VUSE <.MEM_1279>
D.44482_483 = D.44481_482->channel;
# VUSE <.MEM_1279>
D.44481_482 = smh_186->session;

.MEM_1280 : -->3 uses.
# .MEM_1281 = VDEF <.MEM_1280>
switch_channel_set_flag_value (D.44772_485, 101, 1);
# VUSE <.MEM_1280>
D.44772_485 = other_session.89_484->channel;
# VUSE <.MEM_1280>
other_session.89_484 = other_session;

.MEM_1281 : -->2 uses.
# .MEM_1282 = VDEF <.MEM_1281>
msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
# VUSE <.MEM_1281>
other_session.89_486 = other_session;

.MEM_1282 : --> single use.
# .MEM_1283 = VDEF <.MEM_1282>
msg_487->message_id = 21;

.MEM_1283 : --> single use.
# .MEM_1284 = VDEF <.MEM_1283>
msg_487->from = "src/switch_core_media.c";

.MEM_1284 : -->2 uses.
# .MEM_1285 = VDEF <.MEM_1284>
D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
# VUSE <.MEM_1284>
other_session.89_488 = other_session;

.MEM_1285 : --> single use.
# .MEM_1286 = VDEF <.MEM_1285>
msg_487->string_arg = D.44773_489;

.MEM_1286 : --> single use.
# .MEM_1287 = VDEF <.MEM_1286>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));

.MEM_1287 : -->2 uses.
# .MEM_1288 = VDEF <.MEM_1287>
switch_core_session_queue_message (other_session.89_490, msg_487);
# VUSE <.MEM_1287>
other_session.89_490 = other_session;

.MEM_1288 : -->2 uses.
# .MEM_1289 = VDEF <.MEM_1288>
switch_core_session_rwunlock (other_session.89_491);
# VUSE <.MEM_1288>
other_session.89_491 = other_session;

.MEM_1289 : --> single use.
.MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>

.MEM_1290 : -->2 uses.
.MEM_1122 = PHI <.MEM_1290(181), .MEM_1291(182), .MEM_1291(191)>
# .MEM_1291 = VDEF <.MEM_1290>
D.44784_499 = dtls_ok (session_161(D));

.MEM_1291 : -->8 uses.
.MEM_1122 = PHI <.MEM_1290(181), .MEM_1291(182), .MEM_1291(191)>
.MEM_1122 = PHI <.MEM_1290(181), .MEM_1291(182), .MEM_1291(191)>
# VUSE <.MEM_1291>
D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
# VUSE <.MEM_1291>
D.47887_1469 = *D.44619_503;
# VUSE <.MEM_1291>
attr_506 = attr_30->a_next;
# VUSE <.MEM_1291>
D.44619_503 = attr_30->a_value;
# VUSE <.MEM_1291>
D.44590_501 = attr_30->a_name;
# VUSE <.MEM_1291>
attr_500 = m_28->m_attributes;

.MEM_1292 : -->2 uses.
# .MEM_1525 = VDEF <.MEM_1292>
D.47890_1471 = strtol (D.44619_513, 0B, 10);
# VUSE <.MEM_1292>
D.44619_513 = attr_31->a_value;

.MEM_1293 : -->4 uses.
.MEM_1124 = PHI <.MEM_1294(196), .MEM_1527(199), .MEM_1529(202), .MEM_1125(203), .MEM_1125(204), .MEM_1125(208), .MEM_1298(224), .MEM_1293(195)>
# .MEM_1294 = VDEF <.MEM_1293>
D.44471_518->rtcp_audio_interval_msec = "5000";
# VUSE <.MEM_1293>
D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
# VUSE <.MEM_1293>
D.44471_516 = smh_186->mparams;

.MEM_1294 : --> single use.
.MEM_1124 = PHI <.MEM_1294(196), .MEM_1527(199), .MEM_1529(202), .MEM_1125(203), .MEM_1125(204), .MEM_1125(208), .MEM_1298(224), .MEM_1293(195)>

.MEM_1295 : -->16 uses.
# .MEM_1646 = VDEF <.MEM_1295>
D.49730_1597 = switch_is_number (D.44825_537);
.MEM_1629 = PHI <.MEM_1295(211), .MEM_1295(212), .MEM_1295(213), .MEM_1295(214), .MEM_1295(215), .MEM_1295(216), .MEM_1295(217), .MEM_1647(219), .MEM_1628(220)>
# VUSE <.MEM_1295>
D.49729_1596 = strcasecmp (D.44825_537, "allow");
.MEM_1629 = PHI <.MEM_1295(211), .MEM_1295(212), .MEM_1295(213), .MEM_1295(214), .MEM_1295(215), .MEM_1295(216), .MEM_1295(217), .MEM_1647(219), .MEM_1628(220)>
# VUSE <.MEM_1295>
D.49728_1595 = strcasecmp (D.44825_537, "active");
.MEM_1629 = PHI <.MEM_1295(211), .MEM_1295(212), .MEM_1295(213), .MEM_1295(214), .MEM_1295(215), .MEM_1295(216), .MEM_1295(217), .MEM_1647(219), .MEM_1628(220)>
# VUSE <.MEM_1295>
D.49727_1594 = strcasecmp (D.44825_537, "enabled");
.MEM_1629 = PHI <.MEM_1295(211), .MEM_1295(212), .MEM_1295(213), .MEM_1295(214), .MEM_1295(215), .MEM_1295(216), .MEM_1295(217), .MEM_1647(219), .MEM_1628(220)>
# VUSE <.MEM_1295>
D.49726_1593 = strcasecmp (D.44825_537, "t");
.MEM_1629 = PHI <.MEM_1295(211), .MEM_1295(212), .MEM_1295(213), .MEM_1295(214), .MEM_1295(215), .MEM_1295(216), .MEM_1295(217), .MEM_1647(219), .MEM_1628(220)>
# VUSE <.MEM_1295>
D.49725_1592 = strcasecmp (D.44825_537, "true");
.MEM_1629 = PHI <.MEM_1295(211), .MEM_1295(212), .MEM_1295(213), .MEM_1295(214), .MEM_1295(215), .MEM_1295(216), .MEM_1295(217), .MEM_1647(219), .MEM_1628(220)>
# VUSE <.MEM_1295>
D.49724_1591 = strcasecmp (D.44825_537, "on");
.MEM_1629 = PHI <.MEM_1295(211), .MEM_1295(212), .MEM_1295(213), .MEM_1295(214), .MEM_1295(215), .MEM_1295(216), .MEM_1295(217), .MEM_1647(219), .MEM_1628(220)>
# VUSE <.MEM_1295>
D.49723_1590 = strcasecmp (D.44825_537, "yes");
.MEM_1628 = PHI <.MEM_1295(210), .MEM_1646(218), .MEM_1647(219)>

.MEM_1296 : --> no uses.

.MEM_1297 : --> single use.
.MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>

.MEM_1298 : --> single use.
.MEM_1124 = PHI <.MEM_1294(196), .MEM_1527(199), .MEM_1529(202), .MEM_1125(203), .MEM_1125(204), .MEM_1125(208), .MEM_1298(224), .MEM_1293(195)>

.MEM_1299 : --> single use.
.MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>

.MEM_1300 : --> single use.
.MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>

.MEM_1301 : -->9 uses.
.MEM_1126 = PHI <.MEM_1301(239), .MEM_1302(240)>
# VUSE <.MEM_1301>
D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
# VUSE <.MEM_1301>
D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1303 = VDEF <.MEM_1301>
D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
# .MEM_1302 = VDEF <.MEM_1301>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
# VUSE <.MEM_1301>
D.44856_567 = map_128->rm_pt;
# VUSE <.MEM_1301>
D.44855_566 = D.44750_565->rm_rate;
# VUSE <.MEM_1301>
D.44854_564 = map_128->rm_rate;
# VUSE <.MEM_1301>
rm_encoding_561 = map_128->rm_encoding;

.MEM_1302 : --> single use.
.MEM_1126 = PHI <.MEM_1301(239), .MEM_1302(240)>

.MEM_1303 : -->10 uses.
.MEM_1135 = PHI <.MEM_1126(241), .MEM_1127(247), .MEM_1303(248), .MEM_1303(249), .MEM_1134(309)>
.MEM_1135 = PHI <.MEM_1126(241), .MEM_1127(247), .MEM_1303(248), .MEM_1303(249), .MEM_1134(309)>
.MEM_1128 = PHI <.MEM_1303(253), .MEM_1306(254)>
.MEM_1127 = PHI <.MEM_1303(245), .MEM_1305(246)>
# VUSE <.MEM_1303>
D.44863_571 = strcasecmp (rm_encoding_130, "CN");
# VUSE <.MEM_1303>
D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1306 = VDEF <.MEM_1303>
D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
# VUSE <.MEM_1303>
D.44856_586 = map_128->rm_pt;
# .MEM_1304 = VDEF <.MEM_1303>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
# VUSE <.MEM_1303>
D.44856_572 = map_128->rm_pt;

.MEM_1304 : -->4 uses.
# VUSE <.MEM_1304>
D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1305 = VDEF <.MEM_1304>
switch_rtp_set_cng_pt (D.44605_576, D.44869_578);
# VUSE <.MEM_1304>
D.44869_578 = D.44471_577->cng_pt;
# VUSE <.MEM_1304>
D.44471_577 = smh_186->mparams;

.MEM_1305 : --> single use.
.MEM_1127 = PHI <.MEM_1303(245), .MEM_1305(246)>

.MEM_1306 : --> single use.
.MEM_1128 = PHI <.MEM_1303(253), .MEM_1306(254)>

.MEM_1307 : -->11 uses.
.MEM_1129 = PHI <.MEM_1307(265), .MEM_1308(267), .MEM_1308(272), .MEM_1308(273), .MEM_1307(264), .MEM_1307(266)>
.MEM_1129 = PHI <.MEM_1307(265), .MEM_1308(267), .MEM_1308(272), .MEM_1308(273), .MEM_1307(264), .MEM_1307(266)>
.MEM_1129 = PHI <.MEM_1307(265), .MEM_1308(267), .MEM_1308(272), .MEM_1308(273), .MEM_1307(264), .MEM_1307(266)>
# VUSE <.MEM_1307>
D.44901_605 = strcasecmp (D.44889_604, "isac");
# VUSE <.MEM_1307>
D.44897_601 = strcasecmp (D.44889_600, "ilbc");
# VUSE <.MEM_1307>
D.47915_1481 = *D.44893_598;
# .MEM_1308 = VDEF <.MEM_1307>
D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);
# VUSE <.MEM_1307>
D.44854_610 = map_128->rm_rate;
# VUSE <.MEM_1307>
D.44889_608 = map_128->rm_encoding;
# VUSE <.MEM_1307>
D.44889_600 = map_128->rm_encoding;
# VUSE <.MEM_1307>
D.44893_598 = map_128->rm_fmtp;

.MEM_1308 : -->6 uses.
.MEM_1129 = PHI <.MEM_1307(265), .MEM_1308(267), .MEM_1308(272), .MEM_1308(273), .MEM_1307(264), .MEM_1307(266)>
.MEM_1129 = PHI <.MEM_1307(265), .MEM_1308(267), .MEM_1308(272), .MEM_1308(273), .MEM_1307(264), .MEM_1307(266)>
.MEM_1129 = PHI <.MEM_1307(265), .MEM_1308(267), .MEM_1308(272), .MEM_1308(273), .MEM_1307(264), .MEM_1307(266)>
# VUSE <.MEM_1308>
D.44914_618 = codec_fmtp.actual_samples_per_second;
# VUSE <.MEM_1308>
D.44911_615 = codec_fmtp.microseconds_per_packet;
# VUSE <.MEM_1308>
D.44908_612 = codec_fmtp.bits_per_second;

.MEM_1309 : -->17 uses.
.MEM_1130 = PHI <.MEM_1309(294), .MEM_1309(295), .MEM_1309(297), .MEM_1310(298)>
.MEM_1130 = PHI <.MEM_1309(294), .MEM_1309(295), .MEM_1309(297), .MEM_1310(298)>
.MEM_1130 = PHI <.MEM_1309(294), .MEM_1309(295), .MEM_1309(297), .MEM_1310(298)>
# VUSE <.MEM_1309>
D.44979_683 = strcasecmp (D.44889_682, "pcmu");
# VUSE <.MEM_1309>
D.44977_681 = strcasecmp (D.44889_680, "pcma");
# VUSE <.MEM_1309>
D.44963_672 = strcasecmp (D.44889_671, "isac");
# VUSE <.MEM_1309>
D.44960_670 = strcasecmp (D.44889_669, "ilbc");
# VUSE <.MEM_1309>
D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
# VUSE <.MEM_1309>
D.47919_1483 = *D.44889_642;
# .MEM_1310 = VDEF <.MEM_1309>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
# VUSE <.MEM_1309>
D.44947_658 = imp_629->actual_samples_per_second;
# VUSE <.MEM_1309>
D.44926_656 = imp_629->iananame;
# VUSE <.MEM_1309>
D.44927_653 = imp_629->ianacode;
# VUSE <.MEM_1309>
D.44856_649 = map_128->rm_pt;
# VUSE <.MEM_1309>
D.44821_645 = D.44471_644->ndlb;
# VUSE <.MEM_1309>
D.44471_644 = smh_186->mparams;
# VUSE <.MEM_1309>
D.44889_642 = map_128->rm_encoding;

.MEM_1310 : --> single use.
.MEM_1130 = PHI <.MEM_1309(294), .MEM_1309(295), .MEM_1309(297), .MEM_1310(298)>

.MEM_1311 : --> single use.
.MEM_1131 = PHI <.MEM_1311(301), .MEM_1130(304)>

.MEM_1312 : --> single use.
# .MEM_1313 = VDEF <.MEM_1312>
near_matches[nm_idx_116].codec_idx = i_129;

.MEM_1313 : --> single use.
# .MEM_1314 = VDEF <.MEM_1313>
near_matches[nm_idx_116].rate = remote_codec_rate.92_700;

.MEM_1314 : --> single use.
# .MEM_1315 = VDEF <.MEM_1314>
near_matches[nm_idx_116].imp = imp_629;

.MEM_1315 : --> single use.
# .MEM_1316 = VDEF <.MEM_1315>
near_matches[nm_idx_116].map = map_128;

.MEM_1316 : --> single use.
.MEM_1132 = PHI <.MEM_1133(275), .MEM_1130(299), .MEM_1316(305), .MEM_1321(306)>

.MEM_1317 : --> single use.
# .MEM_1318 = VDEF <.MEM_1317>
matches[m_idx_101].rate = codec_rate.94_702;

.MEM_1318 : --> single use.
# .MEM_1319 = VDEF <.MEM_1318>
matches[m_idx_101].imp = imp_629;

.MEM_1319 : --> single use.
# .MEM_1320 = VDEF <.MEM_1319>
matches[m_idx_101].map = map_128;

.MEM_1320 : -->4 uses.
# .MEM_1321 = VDEF <.MEM_1320>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
# VUSE <.MEM_1320>
D.44929_707 = imp_629->microseconds_per_packet;
# VUSE <.MEM_1320>
D.44927_705 = imp_629->ianacode;
# VUSE <.MEM_1320>
D.44926_704 = imp_629->iananame;

.MEM_1321 : -->2 uses.
.MEM_1132 = PHI <.MEM_1133(275), .MEM_1130(299), .MEM_1316(305), .MEM_1321(306)>
.MEM_1134 = PHI <.MEM_1321(306), .MEM_1133(308)>

.MEM_1322 : --> single use.
.MEM_1138 = PHI <.MEM_1137(312), .MEM_1322(313)>

.MEM_1323 : --> single use.
# .MEM_1324 = VDEF <.MEM_1323>
prefs[0] = &tmp;

.MEM_1324 : --> single use.
# .MEM_1325 = VDEF <.MEM_1324>
num_731 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);

.MEM_1325 : -->7 uses.
.MEM_1139 = PHI <.MEM_1138(315), .MEM_1325(323)>
# .MEM_1326 = VDEF <.MEM_1325>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
# VUSE <.MEM_1325>
D.45027_740 = timp_134->actual_samples_per_second;
# VUSE <.MEM_1325>
D.45024_738 = timp_134->microseconds_per_packet;
# VUSE <.MEM_1325>
D.45026_737 = timp_134->iananame;
# VUSE <.MEM_1325>
D.45024_734 = timp_134->microseconds_per_packet;
# VUSE <.MEM_1325>
timp_732 = search[0];

.MEM_1326 : -->2 uses.
# .MEM_1327 = VDEF <.MEM_1326>
matches[m_idx_106].codec_idx = D.45028_742;
# VUSE <.MEM_1326>
D.45028_742 = near_matches[j_133].codec_idx;

.MEM_1327 : --> single use.
# .MEM_1328 = VDEF <.MEM_1327>
matches[m_idx_106].rate = near_rate.96_743;

.MEM_1328 : --> single use.
# .MEM_1329 = VDEF <.MEM_1328>
matches[m_idx_106].imp = timp_134;

.MEM_1329 : --> single use.
# .MEM_1330 = VDEF <.MEM_1329>
matches[m_idx_106].map = near_map_727;

.MEM_1330 : --> single use.
.MEM_1140 = PHI <.MEM_1138(314), .MEM_1330(322), .MEM_1139(324)>

.MEM_1331 : --> single use.
.MEM_1141 = PHI <.MEM_1140(326), .MEM_1331(327)>

.MEM_1332 : --> single use.
# .MEM_1333 = VDEF <.MEM_1332>
smh_186->num_negotiated_codecs = 0;

.MEM_1333 : --> single use.
.MEM_1147 = PHI <.MEM_1333(328), .MEM_1364(348)>

.MEM_1334 : -->4 uses.
.MEM_1142 = PHI <.MEM_1334(329), .MEM_1336(330), .MEM_1337(331)>
# .MEM_1335 = VDEF <.MEM_1334>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_760;
# VUSE <.MEM_1334>
mmap_762 = matches[j_135].map;
# VUSE <.MEM_1334>
mimp_761 = matches[j_135].imp;

.MEM_1335 : --> single use.
# .MEM_1336 = VDEF <.MEM_1335>
D.44750_763->current = 1;

.MEM_1336 : -->4 uses.
.MEM_1142 = PHI <.MEM_1334(329), .MEM_1336(330), .MEM_1337(331)>
# VUSE <.MEM_1336>
D.44605_764 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1337 = VDEF <.MEM_1336>
switch_rtp_set_default_payload (D.44605_765, D.45048_766);
# VUSE <.MEM_1336>
D.45048_766 = pmap_760->pt;

.MEM_1337 : --> single use.
.MEM_1142 = PHI <.MEM_1334(329), .MEM_1336(330), .MEM_1337(331)>

.MEM_1338 : --> single use.
# .MEM_1339 = VDEF <.MEM_1338>
pmap_760->rm_encoding = D.45050_768;

.MEM_1339 : -->2 uses.
# .MEM_1340 = VDEF <.MEM_1339>
D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
# VUSE <.MEM_1339>
D.45051_769 = mimp_761->iananame;

.MEM_1340 : --> single use.
# .MEM_1341 = VDEF <.MEM_1340>
pmap_760->iananame = D.45052_770;

.MEM_1341 : -->2 uses.
# .MEM_1342 = VDEF <.MEM_1341>
pmap_760->recv_pt = D.45054_772;
# VUSE <.MEM_1341>
D.45053_771 = mmap_762->rm_pt;

.MEM_1342 : -->2 uses.
# .MEM_1343 = VDEF <.MEM_1342>
pmap_760->rm_rate = D.45055_773;
# VUSE <.MEM_1342>
D.45055_773 = mimp_761->samples_per_second;

.MEM_1343 : --> single use.
# .MEM_1344 = VDEF <.MEM_1343>
pmap_760->adv_rm_rate = D.45055_774;

.MEM_1344 : -->5 uses.
.MEM_1143 = PHI <.MEM_1344(332), .MEM_1345(333)>
# VUSE <.MEM_1344>
D.45056_776 = strcasecmp (D.45051_775, "g722");
# .MEM_1345 = VDEF <.MEM_1344>
pmap_760->rm_rate = D.45059_777;
# VUSE <.MEM_1344>
D.45059_777 = mimp_761->actual_samples_per_second;
# VUSE <.MEM_1344>
D.45051_775 = mimp_761->iananame;

.MEM_1345 : --> single use.
.MEM_1143 = PHI <.MEM_1344(332), .MEM_1345(333)>

.MEM_1346 : -->2 uses.
# .MEM_1347 = VDEF <.MEM_1346>
pmap_760->bitrate = D.45064_782;
# VUSE <.MEM_1346>
D.45063_781 = mimp_761->bits_per_second;

.MEM_1347 : -->3 uses.
.MEM_1514 = PHI <.MEM_1537(335), .MEM_1347(334)>
# .MEM_1537 = VDEF <.MEM_1347>
D.47922_1485 = strtol (D.45066_784, 0B, 10);
# VUSE <.MEM_1347>
D.45066_783 = mmap_762->rm_params;

.MEM_1348 : -->5 uses.
# VUSE <.MEM_1348>
D.45070_788 = strcasecmp (D.45049_787, "opus");
# .MEM_1355 = VDEF <.MEM_1348>
pmap_760->adv_channels = D.45073_794;
# .MEM_1351 = VDEF <.MEM_1348>
pmap_760->adv_channels = 2;
# .MEM_1349 = VDEF <.MEM_1348>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
# VUSE <.MEM_1348>
D.45049_787 = mmap_762->rm_encoding;

.MEM_1349 : --> single use.
# .MEM_1350 = VDEF <.MEM_1349>
pmap_760->adv_channels = 1;

.MEM_1350 : --> single use.
.MEM_1144 = PHI <.MEM_1350(338), .MEM_1351(339)>

.MEM_1351 : --> single use.
.MEM_1144 = PHI <.MEM_1350(338), .MEM_1351(339)>

.MEM_1352 : -->2 uses.
.MEM_1145 = PHI <.MEM_1144(343), .MEM_1352(344)>
# .MEM_1353 = VDEF <.MEM_1352>
pmap_760->channels = 2;

.MEM_1353 : --> single use.
.MEM_1146 = PHI <.MEM_1354(346), .MEM_1355(347), .MEM_1353(345)>

.MEM_1354 : --> single use.
.MEM_1146 = PHI <.MEM_1354(346), .MEM_1355(347), .MEM_1353(345)>

.MEM_1355 : --> single use.
.MEM_1146 = PHI <.MEM_1354(346), .MEM_1355(347), .MEM_1353(345)>

.MEM_1356 : --> single use.
# .MEM_1357 = VDEF <.MEM_1356>
pmap_760->remote_sdp_ip = D.45086_796;

.MEM_1357 : -->2 uses.
# .MEM_1358 = VDEF <.MEM_1357>
pmap_760->remote_sdp_port = D.45087_798;
# VUSE <.MEM_1357>
D.44697_797 = m_28->m_port;

.MEM_1358 : -->2 uses.
# .MEM_1359 = VDEF <.MEM_1358>
D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
# VUSE <.MEM_1358>
D.45079_799 = mmap_762->rm_fmtp;

.MEM_1359 : --> single use.
# .MEM_1360 = VDEF <.MEM_1359>
pmap_760->rm_fmtp = D.45088_800;

.MEM_1360 : -->2 uses.
# .MEM_1361 = VDEF <.MEM_1360>
pmap_760->agreed_pt = D.45054_802;
# VUSE <.MEM_1360>
D.45053_801 = mmap_762->rm_pt;

.MEM_1361 : -->2 uses.
# .MEM_1362 = VDEF <.MEM_1361>
smh_186->negotiated_codecs[D.44655_803] = mimp_761;
# VUSE <.MEM_1361>
D.44655_803 = smh_186->num_negotiated_codecs;

.MEM_1362 : --> single use.
# .MEM_1363 = VDEF <.MEM_1362>
smh_186->num_negotiated_codecs = D.45089_804;

.MEM_1363 : -->2 uses.
# .MEM_1364 = VDEF <.MEM_1363>
pmap_760->recv_pt = D.45054_806;
# VUSE <.MEM_1363>
D.45053_805 = mmap_762->rm_pt;

.MEM_1364 : --> single use.
.MEM_1147 = PHI <.MEM_1333(328), .MEM_1364(348)>

.MEM_1365 : -->4 uses.
# VUSE <.MEM_1365>
D.44750_812 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1366 = VDEF <.MEM_1365>
switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);
# VUSE <.MEM_1365>
D.44760_813 = D.44750_812->remote_sdp_ip;
# VUSE <.MEM_1365>
D.44530_811 = session_161(D)->channel;

.MEM_1366 : -->2 uses.
# .MEM_1367 = VDEF <.MEM_1366>
switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);
# VUSE <.MEM_1366>
D.44530_814 = session_161(D)->channel;

.MEM_1367 : -->3 uses.
# VUSE <.MEM_1367>
D.44750_815 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
# .MEM_1368 = VDEF <.MEM_1367>
switch_snprintf (&tmp, 50, "%d", D.45093_817);
# VUSE <.MEM_1367>
D.45092_816 = D.44750_815->recv_pt;

.MEM_1368 : -->2 uses.
# .MEM_1369 = VDEF <.MEM_1368>
switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);
# VUSE <.MEM_1368>
D.44530_818 = session_161(D)->channel;

.MEM_1369 : -->6 uses.
.MEM_1149 = PHI <.MEM_1369(357), .MEM_1370(358)>
# VUSE <.MEM_1369>
D.47934_1488 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
# VUSE <.MEM_1369>
D.47932_1490 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
# VUSE <.MEM_1369>
D.47931_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
# VUSE <.MEM_1369>
D.47930_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
# .MEM_1370 = VDEF <.MEM_1369>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;

.MEM_1370 : --> single use.
.MEM_1149 = PHI <.MEM_1369(357), .MEM_1370(358)>

.MEM_1371 : -->2 uses.
.MEM_1150 = PHI <.MEM_1148(350), .MEM_1372(360), .MEM_1371(359)>
# .MEM_1372 = VDEF <.MEM_1371>
check_ice (smh_186, 0, sdp_198, m_28);

.MEM_1372 : --> single use.
.MEM_1150 = PHI <.MEM_1148(350), .MEM_1372(360), .MEM_1371(359)>

.MEM_1373 : -->3 uses.
.MEM_1151 = PHI <.MEM_1373(362), .MEM_1374(363)>
# .MEM_1374 = VDEF <.MEM_1373>
D.45109_828 = switch_channel_test_flag (D.44530_827, 93);
# VUSE <.MEM_1373>
D.44530_827 = session_161(D)->channel;

.MEM_1374 : -->2 uses.
.MEM_1152 = PHI <.MEM_1150(361), .MEM_1374(363), .MEM_1375(364)>
.MEM_1151 = PHI <.MEM_1373(362), .MEM_1374(363)>

.MEM_1375 : -->3 uses.
.MEM_1152 = PHI <.MEM_1150(361), .MEM_1374(363), .MEM_1375(364)>
# VUSE <.MEM_1375>
best_te_833 = D.44471_832->te;
# VUSE <.MEM_1375>
D.44471_832 = smh_186->mparams;

.MEM_1376 : -->4 uses.
# .MEM_1383 = VDEF <.MEM_1376>
D.44471_845->te = best_te_21;
# VUSE <.MEM_1376>
D.44471_845 = smh_186->mparams;
# .MEM_1377 = VDEF <.MEM_1376>
D.44471_835->te = best_te_21;
# VUSE <.MEM_1376>
D.44471_835 = smh_186->mparams;

.MEM_1377 : --> single use.
# .MEM_1378 = VDEF <.MEM_1377>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);

.MEM_1378 : -->2 uses.
# .MEM_1379 = VDEF <.MEM_1378>
switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);
# VUSE <.MEM_1378>
D.44530_838 = session_161(D)->channel;

.MEM_1379 : -->2 uses.
# .MEM_1380 = VDEF <.MEM_1379>
D.44471_839->dtmf_type = 0;
# VUSE <.MEM_1379>
D.44471_839 = smh_186->mparams;

.MEM_1380 : -->3 uses.
.MEM_1168 = PHI <.MEM_1398(383), .MEM_1113(385), .MEM_1113(386), .MEM_1163(468), .MEM_1453(487), .MEM_1454(488), .MEM_1387(369), .MEM_1391(370), .MEM_1380(367), .MEM_1382(368), .MEM_1402(384)>
# VUSE <.MEM_1380>
D.44605_840 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1381 = VDEF <.MEM_1380>
switch_rtp_set_telephony_event (D.44605_841, best_te_21);

.MEM_1381 : -->2 uses.
# .MEM_1382 = VDEF <.MEM_1381>
switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_843);
# VUSE <.MEM_1381>
D.44530_842 = session_161(D)->channel;

.MEM_1382 : --> single use.
.MEM_1168 = PHI <.MEM_1398(383), .MEM_1113(385), .MEM_1113(386), .MEM_1163(468), .MEM_1453(487), .MEM_1454(488), .MEM_1387(369), .MEM_1391(370), .MEM_1380(367), .MEM_1382(368), .MEM_1402(384)>

.MEM_1383 : --> single use.
# .MEM_1384 = VDEF <.MEM_1383>
D.44471_845->recv_te = D.45110_846;

.MEM_1384 : --> single use.
# .MEM_1385 = VDEF <.MEM_1384>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);

.MEM_1385 : -->2 uses.
# .MEM_1386 = VDEF <.MEM_1385>
switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);
# VUSE <.MEM_1385>
D.44530_849 = session_161(D)->channel;

.MEM_1386 : -->2 uses.
# .MEM_1387 = VDEF <.MEM_1386>
D.44471_850->dtmf_type = 0;
# VUSE <.MEM_1386>
D.44471_850 = smh_186->mparams;

.MEM_1387 : -->3 uses.
.MEM_1168 = PHI <.MEM_1398(383), .MEM_1113(385), .MEM_1113(386), .MEM_1163(468), .MEM_1453(487), .MEM_1454(488), .MEM_1387(369), .MEM_1391(370), .MEM_1380(367), .MEM_1382(368), .MEM_1402(384)>
# VUSE <.MEM_1387>
D.44605_851 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1388 = VDEF <.MEM_1387>
switch_rtp_set_telephony_event (D.44605_852, te_847);

.MEM_1388 : -->2 uses.
# .MEM_1389 = VDEF <.MEM_1388>
switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_854);
# VUSE <.MEM_1388>
D.44530_853 = session_161(D)->channel;

.MEM_1389 : -->2 uses.
# VUSE <.MEM_1389>
D.44605_855 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
# .MEM_1390 = VDEF <.MEM_1389>
switch_rtp_set_telephony_recv_event (D.44605_855, te_847);

.MEM_1390 : -->2 uses.
# .MEM_1391 = VDEF <.MEM_1390>
switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_857);
# VUSE <.MEM_1390>
D.44530_856 = session_161(D)->channel;

.MEM_1391 : --> single use.
.MEM_1168 = PHI <.MEM_1398(383), .MEM_1113(385), .MEM_1113(386), .MEM_1163(468), .MEM_1453(487), .MEM_1454(488), .MEM_1387(369), .MEM_1391(370), .MEM_1380(367), .MEM_1382(368), .MEM_1402(384)>

.MEM_1392 : -->16 uses.
# .MEM_1649 = VDEF <.MEM_1392>
D.49742_1607 = switch_is_number (D.45124_858);
.MEM_1631 = PHI <.MEM_1392(372), .MEM_1392(373), .MEM_1392(374), .MEM_1392(375), .MEM_1392(376), .MEM_1392(377), .MEM_1392(378), .MEM_1650(380), .MEM_1630(381)>
# VUSE <.MEM_1392>
D.49741_1606 = strcasecmp (D.45124_858, "disallow");
.MEM_1631 = PHI <.MEM_1392(372), .MEM_1392(373), .MEM_1392(374), .MEM_1392(375), .MEM_1392(376), .MEM_1392(377), .MEM_1392(378), .MEM_1650(380), .MEM_1630(381)>
# VUSE <.MEM_1392>
D.49740_1605 = strcasecmp (D.45124_858, "inactive");
.MEM_1631 = PHI <.MEM_1392(372), .MEM_1392(373), .MEM_1392(374), .MEM_1392(375), .MEM_1392(376), .MEM_1392(377), .MEM_1392(378), .MEM_1650(380), .MEM_1630(381)>
# VUSE <.MEM_1392>
D.49739_1604 = strcasecmp (D.45124_858, "disabled");
.MEM_1631 = PHI <.MEM_1392(372), .MEM_1392(373), .MEM_1392(374), .MEM_1392(375), .MEM_1392(376), .MEM_1392(377), .MEM_1392(378), .MEM_1650(380), .MEM_1630(381)>
# VUSE <.MEM_1392>
D.49738_1603 = strcasecmp (D.45124_858, "f");
.MEM_1631 = PHI <.MEM_1392(372), .MEM_1392(373), .MEM_1392(374), .MEM_1392(375), .MEM_1392(376), .MEM_1392(377), .MEM_1392(378), .MEM_1650(380), .MEM_1630(381)>
# VUSE <.MEM_1392>
D.49737_1602 = strcasecmp (D.45124_858, "false");
.MEM_1631 = PHI <.MEM_1392(372), .MEM_1392(373), .MEM_1392(374), .MEM_1392(375), .MEM_1392(376), .MEM_1392(377), .MEM_1392(378), .MEM_1650(380), .MEM_1630(381)>
# VUSE <.MEM_1392>
D.49736_1601 = strcasecmp (D.45124_858, "off");
.MEM_1631 = PHI <.MEM_1392(372), .MEM_1392(373), .MEM_1392(374), .MEM_1392(375), .MEM_1392(376), .MEM_1392(377), .MEM_1392(378), .MEM_1650(380), .MEM_1630(381)>
# VUSE <.MEM_1392>
D.49735_1600 = strcasecmp (D.45124_858, "no");
.MEM_1630 = PHI <.MEM_1392(371), .MEM_1649(379), .MEM_1650(380)>

.MEM_1393 : --> no uses.

.MEM_1394 : -->2 uses.
# .MEM_1395 = VDEF <.MEM_1394>
switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);
# VUSE <.MEM_1394>
D.44530_860 = session_161(D)->channel;

.MEM_1395 : -->2 uses.
# .MEM_1396 = VDEF <.MEM_1395>
D.44471_861->dtmf_type = 1;
# VUSE <.MEM_1395>
D.44471_861 = smh_186->mparams;

.MEM_1396 : --> single use.
# .MEM_1397 = VDEF <.MEM_1396>
D.44471_863->te = 0;

.MEM_1397 : --> single use.
# .MEM_1398 = VDEF <.MEM_1397>
D.44471_863->recv_te = D.45110_864;

.MEM_1398 : --> single use.
.MEM_1168 = PHI <.MEM_1398(383), .MEM_1113(385), .MEM_1113(386), .MEM_1163(468), .MEM_1453(487), .MEM_1454(488), .MEM_1387(369), .MEM_1391(370), .MEM_1380(367), .MEM_1382(368), .MEM_1402(384)>

.MEM_1399 : -->2 uses.
# .MEM_1400 = VDEF <.MEM_1399>
D.44471_867->dtmf_type = 2;
# VUSE <.MEM_1399>
D.44471_867 = smh_186->mparams;

.MEM_1400 : --> single use.
# .MEM_1401 = VDEF <.MEM_1400>
D.44471_869->te = 0;

.MEM_1401 : --> single use.
# .MEM_1402 = VDEF <.MEM_1401>
D.44471_869->recv_te = D.45110_870;

.MEM_1402 : --> single use.
.MEM_1168 = PHI <.MEM_1398(383), .MEM_1113(385), .MEM_1113(386), .MEM_1163(468), .MEM_1453(487), .MEM_1454(488), .MEM_1387(369), .MEM_1391(370), .MEM_1380(367), .MEM_1382(368), .MEM_1402(384)>

.MEM_1403 : --> single use.
# .MEM_1404 = VDEF <.MEM_1403>
memset (&near_matches, 0, 480);

.MEM_1404 : -->2 uses.
# .MEM_1405 = VDEF <.MEM_1404>
switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);
# VUSE <.MEM_1404>
D.44530_878 = session_161(D)->channel;

.MEM_1405 : -->5 uses.
.MEM_1162 = PHI <.MEM_1405(391), .MEM_1161(464)>
# VUSE <.MEM_1405>
map_883 = m_28->m_rtpmaps;
# .MEM_1406 = VDEF <.MEM_1405>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
# VUSE <.MEM_1405>
D.44546_880 = m_28->m_connections;
# VUSE <.MEM_1405>
connection_879 = sdp_198->sdp_connection;

.MEM_1406 : --> single use.
.MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>

.MEM_1407 : -->2 uses.
.MEM_1153 = PHI <.MEM_1407(392), .MEM_1408(393), .MEM_1408(402)>
# .MEM_1408 = VDEF <.MEM_1407>
D.45140_885 = dtls_ok (session_161(D));

.MEM_1408 : -->8 uses.
.MEM_1153 = PHI <.MEM_1407(392), .MEM_1408(393), .MEM_1408(402)>
.MEM_1153 = PHI <.MEM_1407(392), .MEM_1408(393), .MEM_1408(402)>
# VUSE <.MEM_1408>
D.45143_888 = strcasecmp (D.44590_887, "fingerprint");
# VUSE <.MEM_1408>
D.47939_1495 = *D.44619_889;
# VUSE <.MEM_1408>
attr_892 = attr_32->a_next;
# VUSE <.MEM_1408>
D.44619_889 = attr_32->a_value;
# VUSE <.MEM_1408>
D.44590_887 = attr_32->a_name;
# VUSE <.MEM_1408>
attr_886 = m_28->m_attributes;

.MEM_1409 : -->3 uses.
.MEM_1154 = PHI <.MEM_1409(411), .MEM_1410(412)>
# VUSE <.MEM_1409>
D.45163_903 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
# .MEM_1410 = VDEF <.MEM_1409>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45164_904;

.MEM_1410 : --> single use.
.MEM_1154 = PHI <.MEM_1409(411), .MEM_1410(412)>

.MEM_1411 : --> single use.
.MEM_1156 = PHI <.MEM_1157(405), .MEM_1411(413), .MEM_1414(420), .MEM_1157(421), .MEM_1157(422), .MEM_1157(426), .MEM_1418(442), .MEM_1157(410), .MEM_1413(419)>

.MEM_1412 : -->2 uses.
# .MEM_1543 = VDEF <.MEM_1412>
D.47946_1499 = strtol (D.44619_954, 0B, 10);
# VUSE <.MEM_1412>
D.44619_954 = attr_33->a_value;

.MEM_1413 : -->4 uses.
.MEM_1156 = PHI <.MEM_1157(405), .MEM_1411(413), .MEM_1414(420), .MEM_1157(421), .MEM_1157(422), .MEM_1157(426), .MEM_1418(442), .MEM_1157(410), .MEM_1413(419)>
# .MEM_1414 = VDEF <.MEM_1413>
D.44471_959->rtcp_video_interval_msec = "5000";
# VUSE <.MEM_1413>
D.45214_958 = D.44471_957->rtcp_video_interval_msec;
# VUSE <.MEM_1413>
D.44471_957 = smh_186->mparams;

.MEM_1414 : --> single use.
.MEM_1156 = PHI <.MEM_1157(405), .MEM_1411(413), .MEM_1414(420), .MEM_1157(421), .MEM_1157(422), .MEM_1157(426), .MEM_1418(442), .MEM_1157(410), .MEM_1413(419)>

.MEM_1415 : -->16 uses.
# .MEM_1652 = VDEF <.MEM_1415>
D.49754_1617 = switch_is_number (D.45227_968);
.MEM_1633 = PHI <.MEM_1415(429), .MEM_1415(430), .MEM_1415(431), .MEM_1415(432), .MEM_1415(433), .MEM_1415(434), .MEM_1415(435), .MEM_1653(437), .MEM_1632(438)>
# VUSE <.MEM_1415>
D.49753_1616 = strcasecmp (D.45227_968, "allow");
.MEM_1633 = PHI <.MEM_1415(429), .MEM_1415(430), .MEM_1415(431), .MEM_1415(432), .MEM_1415(433), .MEM_1415(434), .MEM_1415(435), .MEM_1653(437), .MEM_1632(438)>
# VUSE <.MEM_1415>
D.49752_1615 = strcasecmp (D.45227_968, "active");
.MEM_1633 = PHI <.MEM_1415(429), .MEM_1415(430), .MEM_1415(431), .MEM_1415(432), .MEM_1415(433), .MEM_1415(434), .MEM_1415(435), .MEM_1653(437), .MEM_1632(438)>
# VUSE <.MEM_1415>
D.49751_1614 = strcasecmp (D.45227_968, "enabled");
.MEM_1633 = PHI <.MEM_1415(429), .MEM_1415(430), .MEM_1415(431), .MEM_1415(432), .MEM_1415(433), .MEM_1415(434), .MEM_1415(435), .MEM_1653(437), .MEM_1632(438)>
# VUSE <.MEM_1415>
D.49750_1613 = strcasecmp (D.45227_968, "t");
.MEM_1633 = PHI <.MEM_1415(429), .MEM_1415(430), .MEM_1415(431), .MEM_1415(432), .MEM_1415(433), .MEM_1415(434), .MEM_1415(435), .MEM_1653(437), .MEM_1632(438)>
# VUSE <.MEM_1415>
D.49749_1612 = strcasecmp (D.45227_968, "true");
.MEM_1633 = PHI <.MEM_1415(429), .MEM_1415(430), .MEM_1415(431), .MEM_1415(432), .MEM_1415(433), .MEM_1415(434), .MEM_1415(435), .MEM_1653(437), .MEM_1632(438)>
# VUSE <.MEM_1415>
D.49748_1611 = strcasecmp (D.45227_968, "on");
.MEM_1633 = PHI <.MEM_1415(429), .MEM_1415(430), .MEM_1415(431), .MEM_1415(432), .MEM_1415(433), .MEM_1415(434), .MEM_1415(435), .MEM_1653(437), .MEM_1632(438)>
# VUSE <.MEM_1415>
D.49747_1610 = strcasecmp (D.45227_968, "yes");
.MEM_1632 = PHI <.MEM_1415(428), .MEM_1652(436), .MEM_1653(437)>

.MEM_1416 : --> no uses.

.MEM_1417 : --> single use.
.MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>

.MEM_1418 : --> single use.
.MEM_1156 = PHI <.MEM_1157(405), .MEM_1411(413), .MEM_1414(420), .MEM_1157(421), .MEM_1157(422), .MEM_1157(426), .MEM_1418(442), .MEM_1157(410), .MEM_1413(419)>

.MEM_1419 : -->3 uses.
.MEM_1158 = PHI <.MEM_1419(449), .MEM_1420(450)>
# .MEM_1420 = VDEF <.MEM_1419>
D.45244_990 = switch_channel_test_flag (D.44530_989, 114);
# VUSE <.MEM_1419>
D.44530_989 = session_161(D)->channel;

.MEM_1420 : -->2 uses.
.MEM_1160 = PHI <.MEM_1161(448), .MEM_1420(450), .MEM_1421(460), .MEM_1421(459), .MEM_1424(461)>
.MEM_1158 = PHI <.MEM_1419(449), .MEM_1420(450)>

.MEM_1421 : -->13 uses.
.MEM_1160 = PHI <.MEM_1161(448), .MEM_1420(450), .MEM_1421(460), .MEM_1421(459), .MEM_1424(461)>
.MEM_1160 = PHI <.MEM_1161(448), .MEM_1420(450), .MEM_1421(460), .MEM_1421(459), .MEM_1424(461)>
# VUSE <.MEM_1421>
D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
# VUSE <.MEM_1421>
D.47957_1503 = *D.45255_996;
# .MEM_1422 = VDEF <.MEM_1421>
matches[m_idx_110].imp = imp_985;
# VUSE <.MEM_1421>
D.45263_1014 = imp_985->samples_per_second;
# VUSE <.MEM_1421>
D.45262_1013 = map_136->rm_rate;
# VUSE <.MEM_1421>
D.45249_1010 = imp_985->iananame;
# VUSE <.MEM_1421>
D.45250_1007 = imp_985->ianacode;
# VUSE <.MEM_1421>
D.45247_1003 = map_136->rm_pt;
# VUSE <.MEM_1421>
D.44821_999 = D.44471_998->ndlb;
# VUSE <.MEM_1421>
D.44471_998 = smh_186->mparams;
# VUSE <.MEM_1421>
D.45255_996 = map_136->rm_encoding;

.MEM_1422 : --> single use.
# .MEM_1423 = VDEF <.MEM_1422>
matches[m_idx_110].map = map_136;

.MEM_1423 : -->3 uses.
# .MEM_1424 = VDEF <.MEM_1423>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
# VUSE <.MEM_1423>
D.45250_1016 = imp_985->ianacode;
# VUSE <.MEM_1423>
D.45249_1015 = imp_985->iananame;

.MEM_1424 : --> single use.
.MEM_1160 = PHI <.MEM_1161(448), .MEM_1420(450), .MEM_1421(460), .MEM_1421(459), .MEM_1424(461)>

.MEM_1425 : --> single use.
.MEM_1163 = PHI <.MEM_1162(466), .MEM_1425(467)>

.MEM_1426 : --> single use.
.MEM_1164 = PHI <.MEM_1163(469), .MEM_1426(470)>

.MEM_1427 : --> single use.
.MEM_1166 = PHI <.MEM_1427(471), .MEM_1442(475)>

.MEM_1428 : -->2 uses.
.MEM_1165 = PHI <.MEM_1428(472), .MEM_1430(473), .MEM_1431(474)>
# .MEM_1429 = VDEF <.MEM_1428>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1044;

.MEM_1429 : --> single use.
# .MEM_1430 = VDEF <.MEM_1429>
D.45286_1045->current = 1;

.MEM_1430 : -->4 uses.
.MEM_1165 = PHI <.MEM_1428(472), .MEM_1430(473), .MEM_1431(474)>
# VUSE <.MEM_1430>
D.45287_1046 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
# .MEM_1431 = VDEF <.MEM_1430>
switch_rtp_set_default_payload (D.45287_1047, D.45290_1048);
# VUSE <.MEM_1430>
D.45290_1048 = pmap_1044->pt;

.MEM_1431 : --> single use.
.MEM_1165 = PHI <.MEM_1428(472), .MEM_1430(473), .MEM_1431(474)>

.MEM_1432 : --> single use.
# .MEM_1433 = VDEF <.MEM_1432>
pmap_1044->rm_encoding = D.45291_1052;

.MEM_1433 : -->2 uses.
# .MEM_1434 = VDEF <.MEM_1433>
pmap_1044->recv_pt = D.45292_1054;
# VUSE <.MEM_1433>
D.45247_1053 = map_1050->rm_pt;

.MEM_1434 : -->2 uses.
# .MEM_1435 = VDEF <.MEM_1434>
pmap_1044->rm_rate = D.45262_1055;
# VUSE <.MEM_1434>
D.45262_1055 = map_1050->rm_rate;

.MEM_1435 : -->2 uses.
# .MEM_1436 = VDEF <.MEM_1435>
pmap_1044->codec_ms = D.45295_1058;
# VUSE <.MEM_1435>
D.45293_1056 = mimp_1049->microseconds_per_packet;

.MEM_1436 : -->2 uses.
# .MEM_1437 = VDEF <.MEM_1436>
D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);
# VUSE <.MEM_1436>
D.45085_1059 = connection_125->c_address;

.MEM_1437 : --> single use.
# .MEM_1438 = VDEF <.MEM_1437>
pmap_1044->remote_sdp_ip = D.45296_1060;

.MEM_1438 : -->2 uses.
# .MEM_1439 = VDEF <.MEM_1438>
pmap_1044->remote_sdp_port = D.45087_1062;
# VUSE <.MEM_1438>
D.44697_1061 = m_28->m_port;

.MEM_1439 : -->2 uses.
# .MEM_1440 = VDEF <.MEM_1439>
D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
# VUSE <.MEM_1439>
D.45297_1063 = map_1050->rm_fmtp;

.MEM_1440 : --> single use.
# .MEM_1441 = VDEF <.MEM_1440>
pmap_1044->rm_fmtp = D.45298_1064;

.MEM_1441 : -->2 uses.
# .MEM_1442 = VDEF <.MEM_1441>
pmap_1044->agreed_pt = D.45292_1066;
# VUSE <.MEM_1441>
D.45247_1065 = map_1050->rm_pt;

.MEM_1442 : --> single use.
.MEM_1166 = PHI <.MEM_1427(471), .MEM_1442(475)>

.MEM_1443 : -->4 uses.
# VUSE <.MEM_1443>
D.45286_1072 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1444 = VDEF <.MEM_1443>
switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);
# VUSE <.MEM_1443>
D.45301_1073 = D.45286_1072->remote_sdp_ip;
# VUSE <.MEM_1443>
D.44530_1071 = session_161(D)->channel;

.MEM_1444 : -->2 uses.
# .MEM_1445 = VDEF <.MEM_1444>
switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);
# VUSE <.MEM_1444>
D.44530_1074 = session_161(D)->channel;

.MEM_1445 : -->4 uses.
# VUSE <.MEM_1445>
D.45286_1076 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1446 = VDEF <.MEM_1445>
switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);
# VUSE <.MEM_1445>
D.45302_1077 = D.45286_1076->rm_fmtp;
# VUSE <.MEM_1445>
D.44530_1075 = session_161(D)->channel;

.MEM_1446 : -->3 uses.
# VUSE <.MEM_1446>
D.45286_1078 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1447 = VDEF <.MEM_1446>
switch_snprintf (&tmp, 50, "%d", D.45304_1080);
# VUSE <.MEM_1446>
D.45303_1079 = D.45286_1078->agreed_pt;

.MEM_1447 : -->2 uses.
# .MEM_1448 = VDEF <.MEM_1447>
switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);
# VUSE <.MEM_1447>
D.44530_1081 = session_161(D)->channel;

.MEM_1448 : --> single use.
# .MEM_1449 = VDEF <.MEM_1448>
switch_core_media_check_video_codecs (session_161(D));

.MEM_1449 : -->3 uses.
# VUSE <.MEM_1449>
D.45286_1082 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
# .MEM_1450 = VDEF <.MEM_1449>
switch_snprintf (&tmp, 50, "%d", D.45306_1084);
# VUSE <.MEM_1449>
D.45305_1083 = D.45286_1082->recv_pt;

.MEM_1450 : -->2 uses.
# .MEM_1451 = VDEF <.MEM_1450>
switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);
# VUSE <.MEM_1450>
D.44530_1085 = session_161(D)->channel;

.MEM_1451 : -->6 uses.
.MEM_1167 = PHI <.MEM_1451(485), .MEM_1452(486)>
# VUSE <.MEM_1451>
D.47965_1505 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
# VUSE <.MEM_1451>
D.47963_1507 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
# VUSE <.MEM_1451>
D.47962_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
# VUSE <.MEM_1451>
D.47961_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
# .MEM_1452 = VDEF <.MEM_1451>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;

.MEM_1452 : --> single use.
.MEM_1167 = PHI <.MEM_1451(485), .MEM_1452(486)>

.MEM_1453 : -->2 uses.
.MEM_1168 = PHI <.MEM_1398(383), .MEM_1113(385), .MEM_1113(386), .MEM_1163(468), .MEM_1453(487), .MEM_1454(488), .MEM_1387(369), .MEM_1391(370), .MEM_1380(367), .MEM_1382(368), .MEM_1402(384)>
# .MEM_1454 = VDEF <.MEM_1453>
check_ice (smh_186, 1, sdp_198, m_28);

.MEM_1454 : --> single use.
.MEM_1168 = PHI <.MEM_1398(383), .MEM_1113(385), .MEM_1113(386), .MEM_1163(468), .MEM_1453(487), .MEM_1454(488), .MEM_1387(369), .MEM_1391(370), .MEM_1380(367), .MEM_1382(368), .MEM_1402(384)>

.MEM_1455 : --> single use.
.MEM_1171 = PHI <.MEM_1170(491), .MEM_1455(492)>

.MEM_1456 : --> no uses.

pmap_1457 : --> single use.
# DEBUG pmap => pmap_1457
pmap_1458 = PHI <pmap_1457(23), pmap_1459(24)>

pmap_1458 : -->5 uses.
# DEBUG pmap => pmap_1458
D.47871_1460 = pmap_1458->allocated;
if (pmap_1458 != 0B)
pmap_1459 = pmap_1458->next;
pmap_1458->current = 0;
pmap_1458->negotiated = 0;

pmap_1459 : --> single use.
# DEBUG pmap => pmap_1459
pmap_1458 = PHI <pmap_1457(23), pmap_1459(24)>

D.47871_1460 : --> single use.
if (D.47871_1460 != 0)

pmap_1461 : --> single use.
# DEBUG pmap => pmap_1461
pmap_1462 = PHI <pmap_1461(27), pmap_1463(28)>

pmap_1462 : -->5 uses.
# DEBUG pmap => pmap_1462
D.47874_1464 = pmap_1462->allocated;
if (pmap_1462 != 0B)
pmap_1463 = pmap_1462->next;
pmap_1462->current = 0;
pmap_1462->negotiated = 0;

pmap_1463 : --> single use.
# DEBUG pmap => pmap_1463
pmap_1462 = PHI <pmap_1461(27), pmap_1463(28)>

D.47874_1464 : --> single use.
if (D.47874_1464 != 0)

D.47877_1465 : --> single use.
if (D.47877_1465 == 0)

D.47876_1466 : --> single use.
if (D.47876_1466 != 0)

dptime_1467 : --> single use.
dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>

dmaxptime_1468 : --> single use.
dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>

D.47887_1469 : --> single use.
if (D.47887_1469 == 0)

D.47886_1470 : --> single use.
if (D.47886_1470 == 0)

D.47890_1471 : --> single use.
D.44799_515 = (short unsigned int) D.47890_1471;

ptime_1472 : --> single use.
ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>

maxptime_1473 : --> single use.
maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>

D.47900_1474 : --> single use.
if (D.47900_1474 == 0)

D.47899_1475 : --> single use.
if (D.47899_1475 == 0)

crypto_tag_1476 : --> single use.
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));

map_bit_rate_1479 : --> single use.
map_bit_rate_1480 = PHI <0(255), map_bit_rate_1479(256)>

map_bit_rate_1480 : -->3 uses.
map_bit_rate_132 = PHI <map_bit_rate_1480(265), map_bit_rate_1480(267), map_bit_rate_131(272), map_bit_rate_131(273), 13332(264), 32001(266)>
map_bit_rate_132 = PHI <map_bit_rate_1480(265), map_bit_rate_1480(267), map_bit_rate_131(272), map_bit_rate_131(273), 13332(264), 32001(266)>
map_bit_rate_131 = PHI <map_bit_rate_1480(268), map_bit_rate_614(269)>

D.47915_1481 : --> single use.
if (D.47915_1481 == 0)

D.47914_1482 : --> single use.
if (D.47914_1482 != 0)

D.47919_1483 : --> single use.
if (D.47919_1483 == 0)

D.47918_1484 : --> single use.
if (D.47918_1484 != 0)

D.47922_1485 : --> single use.
D.47922_146 = PHI <D.47922_1485(335), 1(334)>

D.47926_1486 : --> single use.
if (D.47926_1486 == 0)

D.47925_1487 : --> single use.
if (D.47925_1487 == 0)

D.47934_1488 : --> single use.
D.47933_1489 = D.47934_1488 & 256;

D.47933_1489 : --> single use.
if (D.47933_1489 != 0)

D.47932_1490 : --> single use.
if (D.47932_1490 != 0B)

D.47931_1491 : --> single use.
if (D.47931_1491 != 0B)

D.47930_1492 : --> single use.
if (D.47930_1492 != 0B)

iftmp.104_1493 : --> single use.
if (iftmp.104_1493 != 0)

D.47939_1495 : --> single use.
if (D.47939_1495 == 0)

D.47938_1496 : --> single use.
if (D.47938_1496 == 0)

D.47943_1497 : --> single use.
if (D.47943_1497 == 0)

D.47942_1498 : --> single use.
if (D.47942_1498 == 0)

D.47946_1499 : --> single use.
D.45213_956 = (short unsigned int) D.47946_1499;

D.47950_1500 : --> single use.
if (D.47950_1500 == 0)

D.47949_1501 : --> single use.
if (D.47949_1501 == 0)

crypto_tag_1502 : --> single use.
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));

D.47957_1503 : --> single use.
if (D.47957_1503 == 0)

D.47956_1504 : --> single use.
if (D.47956_1504 != 0)

D.47965_1505 : --> single use.
D.47964_1506 = D.47965_1505 & 256;

D.47964_1506 : --> single use.
if (D.47964_1506 != 0)

D.47963_1507 : --> single use.
if (D.47963_1507 != 0B)

D.47962_1508 : --> single use.
if (D.47962_1508 != 0B)

D.47961_1509 : --> single use.
if (D.47961_1509 != 0B)

iftmp.104_1510 : --> single use.
if (iftmp.104_1510 != 0)

.MEM_1512 : -->4 uses.
.MEM_1513 = PHI <.MEM_1512(27), .MEM_1518(28)>
# VUSE <.MEM_1512>
pmap_1461 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
# .MEM_1515 = VDEF <.MEM_1512>
pmap_1458->negotiated = 0;
# VUSE <.MEM_1512>
D.47871_1460 = pmap_1458->allocated;

.MEM_1513 : -->4 uses.
.MEM_1097 = PHI <.MEM_1513(31), .MEM_1187(32)>
# .MEM_1187 = VDEF <.MEM_1513>
*proceed_209(D) = 1;
# .MEM_1517 = VDEF <.MEM_1513>
pmap_1462->negotiated = 0;
# VUSE <.MEM_1513>
D.47874_1464 = pmap_1462->allocated;

.MEM_1514 : --> single use.
# .MEM_1348 = VDEF <.MEM_1514>
pmap_760->channels = D.47922_146;

.MEM_1515 : --> single use.
# .MEM_1516 = VDEF <.MEM_1515>
pmap_1458->current = 0;

.MEM_1516 : -->2 uses.
.MEM_1512 = PHI <.MEM_1184(23), .MEM_1516(24)>
# VUSE <.MEM_1516>
pmap_1459 = pmap_1458->next;

.MEM_1517 : --> single use.
# .MEM_1518 = VDEF <.MEM_1517>
pmap_1462->current = 0;

.MEM_1518 : -->2 uses.
.MEM_1513 = PHI <.MEM_1512(27), .MEM_1518(28)>
# VUSE <.MEM_1518>
pmap_1463 = pmap_1462->next;

.MEM_1520 : --> single use.
.MEM_1102 = PHI <.MEM_1103(69), .MEM_1201(71), .MEM_1202(73), .MEM_1209(77), .MEM_1103(79), .MEM_1520(81), .MEM_1103(82), .MEM_1522(83), .MEM_1207(76)>

.MEM_1522 : --> single use.
.MEM_1102 = PHI <.MEM_1103(69), .MEM_1201(71), .MEM_1202(73), .MEM_1209(77), .MEM_1103(79), .MEM_1520(81), .MEM_1103(82), .MEM_1522(83), .MEM_1207(76)>

.MEM_1525 : --> single use.
# .MEM_1293 = VDEF <.MEM_1525>
MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;

.MEM_1527 : --> single use.
.MEM_1124 = PHI <.MEM_1294(196), .MEM_1527(199), .MEM_1529(202), .MEM_1125(203), .MEM_1125(204), .MEM_1125(208), .MEM_1298(224), .MEM_1293(195)>

.MEM_1529 : --> single use.
.MEM_1124 = PHI <.MEM_1294(196), .MEM_1527(199), .MEM_1529(202), .MEM_1125(203), .MEM_1125(204), .MEM_1125(208), .MEM_1298(224), .MEM_1293(195)>

.MEM_1532 : --> single use.
# .MEM_1298 = VDEF <.MEM_1532>
got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));

.MEM_1537 : --> single use.
.MEM_1514 = PHI <.MEM_1537(335), .MEM_1347(334)>

.MEM_1543 : --> single use.
# .MEM_1413 = VDEF <.MEM_1543>
MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45213_956;

.MEM_1546 : --> single use.
# .MEM_1418 = VDEF <.MEM_1546>
got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));

D.49675_1550 : --> single use.
if (D.49675_1550 == 0)

D.49676_1551 : --> single use.
if (D.49676_1551 == 0)

D.49677_1552 : --> single use.
if (D.49677_1552 == 0)

D.49678_1553 : --> single use.
if (D.49678_1553 == 0)

D.49679_1554 : --> single use.
if (D.49679_1554 == 0)

D.49680_1555 : --> single use.
if (D.49680_1555 == 0)

D.49681_1556 : --> single use.
if (D.49681_1556 == 0)

D.49682_1557 : --> single use.
if (D.49682_1557 != 0)

D.49683_1558 : --> single use.
if (D.49683_1558 == 0)

D.49673_1559 : --> single use.
D.49673_1636 = D.49673_1559;

D.49687_1560 : --> single use.
if (D.49687_1560 == 0)

D.49688_1561 : --> single use.
if (D.49688_1561 == 0)

D.49689_1562 : --> single use.
if (D.49689_1562 == 0)

D.49690_1563 : --> single use.
if (D.49690_1563 == 0)

D.49691_1564 : --> single use.
if (D.49691_1564 == 0)

D.49692_1565 : --> single use.
if (D.49692_1565 == 0)

D.49693_1566 : --> single use.
if (D.49693_1566 == 0)

D.49694_1567 : --> single use.
if (D.49694_1567 != 0)

D.49695_1568 : --> single use.
if (D.49695_1568 != 0)

D.49685_1569 : --> single use.
D.49685_1639 = D.49685_1569;

D.49699_1570 : --> single use.
if (D.49699_1570 == 0)

D.49700_1571 : --> single use.
if (D.49700_1571 == 0)

D.49701_1572 : --> single use.
if (D.49701_1572 == 0)

D.49702_1573 : --> single use.
if (D.49702_1573 == 0)

D.49703_1574 : --> single use.
if (D.49703_1574 == 0)

D.49704_1575 : --> single use.
if (D.49704_1575 == 0)

D.49705_1576 : --> single use.
if (D.49705_1576 == 0)

D.49706_1577 : --> single use.
if (D.49706_1577 != 0)

D.49707_1578 : --> single use.
if (D.49707_1578 != 0)

D.49697_1579 : --> single use.
D.49697_1642 = D.49697_1579;

D.49711_1580 : --> single use.
if (D.49711_1580 == 0)

D.49712_1581 : --> single use.
if (D.49712_1581 == 0)

D.49713_1582 : --> single use.
if (D.49713_1582 == 0)

D.49714_1583 : --> single use.
if (D.49714_1583 == 0)

D.49715_1584 : --> single use.
if (D.49715_1584 == 0)

D.49716_1585 : --> single use.
if (D.49716_1585 == 0)

D.49717_1586 : --> single use.
if (D.49717_1586 == 0)

D.49718_1587 : --> single use.
if (D.49718_1587 != 0)

D.49719_1588 : --> single use.
if (D.49719_1588 != 0)

reneg_1589 : --> single use.
reneg_1645 = reneg_1589;

D.49723_1590 : --> single use.
if (D.49723_1590 == 0)

D.49724_1591 : --> single use.
if (D.49724_1591 == 0)

D.49725_1592 : --> single use.
if (D.49725_1592 == 0)

D.49726_1593 : --> single use.
if (D.49726_1593 == 0)

D.49727_1594 : --> single use.
if (D.49727_1594 == 0)

D.49728_1595 : --> single use.
if (D.49728_1595 == 0)

D.49729_1596 : --> single use.
if (D.49729_1596 == 0)

D.49730_1597 : --> single use.
if (D.49730_1597 != 0)

D.49731_1598 : --> single use.
if (D.49731_1598 != 0)

D.49721_1599 : --> single use.
D.49721_1648 = D.49721_1599;

D.49735_1600 : --> single use.
if (D.49735_1600 == 0)

D.49736_1601 : --> single use.
if (D.49736_1601 == 0)

D.49737_1602 : --> single use.
if (D.49737_1602 == 0)

D.49738_1603 : --> single use.
if (D.49738_1603 == 0)

D.49739_1604 : --> single use.
if (D.49739_1604 == 0)

D.49740_1605 : --> single use.
if (D.49740_1605 == 0)

D.49741_1606 : --> single use.
if (D.49741_1606 == 0)

D.49742_1607 : --> single use.
if (D.49742_1607 != 0)

D.49743_1608 : --> single use.
if (D.49743_1608 == 0)

D.49733_1609 : --> single use.
D.49733_1651 = D.49733_1609;

D.49747_1610 : --> single use.
if (D.49747_1610 == 0)

D.49748_1611 : --> single use.
if (D.49748_1611 == 0)

D.49749_1612 : --> single use.
if (D.49749_1612 == 0)

D.49750_1613 : --> single use.
if (D.49750_1613 == 0)

D.49751_1614 : --> single use.
if (D.49751_1614 == 0)

D.49752_1615 : --> single use.
if (D.49752_1615 == 0)

D.49753_1616 : --> single use.
if (D.49753_1616 == 0)

D.49754_1617 : --> single use.
if (D.49754_1617 != 0)

D.49755_1618 : --> single use.
if (D.49755_1618 != 0)

D.49745_1619 : --> single use.
D.49745_1654 = D.49745_1619;

.MEM_1620 : --> single use.
.MEM_1621 = PHI <.MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1180(17), .MEM_1635(19), .MEM_1620(20)>

.MEM_1621 : -->4 uses.
# .MEM_1182 = VDEF <.MEM_1621>
switch_channel_clear_flag (D.44482_206, 111);
# VUSE <.MEM_1621>
D.44482_206 = D.44481_205->channel;
# VUSE <.MEM_1621>
D.44481_205 = smh_186->session;
.MEM_1096 = PHI <.MEM_1179(8), .MEM_1180(9), .MEM_1621(21), .MEM_1183(22)>

.MEM_1622 : --> single use.
.MEM_1623 = PHI <.MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1198(50), .MEM_1198(51), .MEM_1198(52), .MEM_1198(53), .MEM_1638(55), .MEM_1622(56)>

.MEM_1623 : -->3 uses.
# .MEM_1200 = VDEF <.MEM_1623>
switch_channel_set_flag_value (D.44530_247, 93, 1);
# VUSE <.MEM_1623>
D.44530_247 = session_161(D)->channel;
.MEM_1101 = PHI <.MEM_1198(45), .MEM_1623(57), .MEM_1200(58)>

.MEM_1624 : --> single use.
.MEM_1625 = PHI <.MEM_1212(91), .MEM_1212(92), .MEM_1212(93), .MEM_1212(94), .MEM_1212(95), .MEM_1212(96), .MEM_1212(97), .MEM_1641(99), .MEM_1624(100)>

.MEM_1625 : -->2 uses.
.MEM_1106 = PHI <.MEM_1211(88), .MEM_1625(101), .MEM_1105(102), .MEM_1215(103), .MEM_1217(104), .MEM_1218(105)>
.MEM_1105 = PHI <.MEM_1212(89), .MEM_1625(101)>

.MEM_1626 : --> single use.
.MEM_1627 = PHI <.MEM_1220(109), .MEM_1220(110), .MEM_1220(111), .MEM_1220(112), .MEM_1220(113), .MEM_1220(114), .MEM_1220(115), .MEM_1644(117), .MEM_1626(118)>

.MEM_1627 : --> single use.
.MEM_1107 = PHI <.MEM_1106(106), .MEM_1220(107), .MEM_1627(119)>

.MEM_1628 : --> single use.
.MEM_1629 = PHI <.MEM_1295(211), .MEM_1295(212), .MEM_1295(213), .MEM_1295(214), .MEM_1295(215), .MEM_1295(216), .MEM_1295(217), .MEM_1647(219), .MEM_1628(220)>

.MEM_1629 : -->4 uses.
# .MEM_1297 = VDEF <.MEM_1629>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
.MEM_1123 = PHI <.MEM_1125(209), .MEM_1629(221), .MEM_1629(222)>
# VUSE <.MEM_1629>
D.44666_539 = m_28->m_proto;
.MEM_1123 = PHI <.MEM_1125(209), .MEM_1629(221), .MEM_1629(222)>

.MEM_1630 : --> single use.
.MEM_1631 = PHI <.MEM_1392(372), .MEM_1392(373), .MEM_1392(374), .MEM_1392(375), .MEM_1392(376), .MEM_1392(377), .MEM_1392(378), .MEM_1650(380), .MEM_1630(381)>

.MEM_1631 : -->3 uses.
# .MEM_1394 = VDEF <.MEM_1631>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
# .MEM_1399 = VDEF <.MEM_1631>
switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);
# VUSE <.MEM_1631>
D.44530_866 = session_161(D)->channel;

.MEM_1632 : --> single use.
.MEM_1633 = PHI <.MEM_1415(429), .MEM_1415(430), .MEM_1415(431), .MEM_1415(432), .MEM_1415(433), .MEM_1415(434), .MEM_1415(435), .MEM_1653(437), .MEM_1632(438)>

.MEM_1633 : -->4 uses.
# .MEM_1417 = VDEF <.MEM_1633>
switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
.MEM_1155 = PHI <.MEM_1157(427), .MEM_1633(439), .MEM_1633(440)>
# VUSE <.MEM_1633>
D.44666_970 = m_28->m_proto;
.MEM_1155 = PHI <.MEM_1157(427), .MEM_1633(439), .MEM_1633(440)>

.MEM_1634 : -->2 uses.
# .MEM_1635 = VDEF <.MEM_1634>
D.49683_1558 = strtol (tmp_203, 0B, 10);
.MEM_1620 = PHI <.MEM_1180(10), .MEM_1634(18), .MEM_1635(19)>

.MEM_1635 : -->2 uses.
.MEM_1620 = PHI <.MEM_1180(10), .MEM_1634(18), .MEM_1635(19)>
.MEM_1621 = PHI <.MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1180(17), .MEM_1635(19), .MEM_1620(20)>

D.49673_1636 : --> single use.
D.49673_204 = D.49673_1636;

.MEM_1637 : -->2 uses.
# .MEM_1638 = VDEF <.MEM_1637>
D.49695_1568 = strtol (val_245, 0B, 10);
.MEM_1622 = PHI <.MEM_1198(46), .MEM_1637(54), .MEM_1638(55)>

.MEM_1638 : -->2 uses.
.MEM_1622 = PHI <.MEM_1198(46), .MEM_1637(54), .MEM_1638(55)>
.MEM_1623 = PHI <.MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1198(50), .MEM_1198(51), .MEM_1198(52), .MEM_1198(53), .MEM_1638(55), .MEM_1622(56)>

D.49685_1639 : --> single use.
D.49685_246 = D.49685_1639;

.MEM_1640 : -->2 uses.
# .MEM_1641 = VDEF <.MEM_1640>
D.49707_1578 = strtol (val_341, 0B, 10);
.MEM_1624 = PHI <.MEM_1212(90), .MEM_1640(98), .MEM_1641(99)>

.MEM_1641 : -->2 uses.
.MEM_1624 = PHI <.MEM_1212(90), .MEM_1640(98), .MEM_1641(99)>
.MEM_1625 = PHI <.MEM_1212(91), .MEM_1212(92), .MEM_1212(93), .MEM_1212(94), .MEM_1212(95), .MEM_1212(96), .MEM_1212(97), .MEM_1641(99), .MEM_1624(100)>

D.49697_1642 : --> single use.
D.49697_342 = D.49697_1642;

.MEM_1643 : -->2 uses.
# .MEM_1644 = VDEF <.MEM_1643>
D.49719_1588 = strtol (val_355, 0B, 10);
.MEM_1626 = PHI <.MEM_1220(108), .MEM_1643(116), .MEM_1644(117)>

.MEM_1644 : -->2 uses.
.MEM_1626 = PHI <.MEM_1220(108), .MEM_1643(116), .MEM_1644(117)>
.MEM_1627 = PHI <.MEM_1220(109), .MEM_1220(110), .MEM_1220(111), .MEM_1220(112), .MEM_1220(113), .MEM_1220(114), .MEM_1220(115), .MEM_1644(117), .MEM_1626(118)>

reneg_1645 : --> single use.
reneg_356 = reneg_1645;

.MEM_1646 : -->2 uses.
# .MEM_1647 = VDEF <.MEM_1646>
D.49731_1598 = strtol (D.44825_537, 0B, 10);
.MEM_1628 = PHI <.MEM_1295(210), .MEM_1646(218), .MEM_1647(219)>

.MEM_1647 : -->2 uses.
.MEM_1628 = PHI <.MEM_1295(210), .MEM_1646(218), .MEM_1647(219)>
.MEM_1629 = PHI <.MEM_1295(211), .MEM_1295(212), .MEM_1295(213), .MEM_1295(214), .MEM_1295(215), .MEM_1295(216), .MEM_1295(217), .MEM_1647(219), .MEM_1628(220)>

D.49721_1648 : --> single use.
D.49721_538 = D.49721_1648;

.MEM_1649 : -->2 uses.
# .MEM_1650 = VDEF <.MEM_1649>
D.49743_1608 = strtol (D.45124_858, 0B, 10);
.MEM_1630 = PHI <.MEM_1392(371), .MEM_1649(379), .MEM_1650(380)>

.MEM_1650 : -->2 uses.
.MEM_1630 = PHI <.MEM_1392(371), .MEM_1649(379), .MEM_1650(380)>
.MEM_1631 = PHI <.MEM_1392(372), .MEM_1392(373), .MEM_1392(374), .MEM_1392(375), .MEM_1392(376), .MEM_1392(377), .MEM_1392(378), .MEM_1650(380), .MEM_1630(381)>

D.49733_1651 : --> single use.
D.49733_859 = D.49733_1651;

.MEM_1652 : -->2 uses.
# .MEM_1653 = VDEF <.MEM_1652>
D.49755_1618 = strtol (D.45227_968, 0B, 10);
.MEM_1632 = PHI <.MEM_1415(428), .MEM_1652(436), .MEM_1653(437)>

.MEM_1653 : -->2 uses.
.MEM_1632 = PHI <.MEM_1415(428), .MEM_1652(436), .MEM_1653(437)>
.MEM_1633 = PHI <.MEM_1415(429), .MEM_1415(430), .MEM_1415(431), .MEM_1415(432), .MEM_1415(433), .MEM_1415(434), .MEM_1415(435), .MEM_1653(437), .MEM_1632(438)>

D.49745_1654 : --> single use.
D.49745_969 = D.49745_1654;

Adding Destination of edge (0 -> 2) to worklist


Simulating block 2

Visiting statement:
if (session_161(D) == 0B)

No interesting values produced.
Adding Destination of edge (2 -> 3) to worklist

Adding Destination of edge (2 -> 4) to worklist


Simulating block 3

Visiting statement:
__assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

No interesting values produced.

Simulating block 4

Visiting statement:
if (smh_186 == 0B)

No interesting values produced.
Adding Destination of edge (4 -> 494) to worklist

Adding Destination of edge (4 -> 5) to worklist


Simulating block 5

Visiting statement:
if (parser_196 == 0B)

No interesting values produced.
Adding Destination of edge (5 -> 6) to worklist


Simulating block 6

Visiting statement:
if (sdp_198 == 0B)

No interesting values produced.
Adding Destination of edge (6 -> 7) to worklist

Adding Destination of edge (6 -> 8) to worklist


Simulating block 7

Simulating block 494

Visiting PHI node: match_142 = PHI <0(4), 0(5), 0(7), match_17(493)>
PHI node match_142 copy-of chain: match_142 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
return match_142;

No interesting values produced.

Simulating block 8

Visiting statement:
if (D.44478_200 != 0)

No interesting values produced.
Adding Destination of edge (8 -> 9) to worklist

Adding Destination of edge (8 -> 23) to worklist


Simulating block 9

Visiting statement:
if (tmp_203 != 0B)

No interesting values produced.
Adding Destination of edge (9 -> 10) to worklist


Simulating block 10

Visiting statement:
if (tmp_203 != 0B)

No interesting values produced.
Adding Destination of edge (10 -> 11) to worklist

Adding Destination of edge (10 -> 20) to worklist


Simulating block 11

Visiting statement:
if (D.49675_1550 == 0)

No interesting values produced.
Adding Destination of edge (11 -> 21) to worklist

Adding Destination of edge (11 -> 12) to worklist


Simulating block 12

Visiting statement:
if (D.49676_1551 == 0)

No interesting values produced.
Adding Destination of edge (12 -> 13) to worklist


Simulating block 13

Visiting statement:
if (D.49677_1552 == 0)

No interesting values produced.
Adding Destination of edge (13 -> 14) to worklist


Simulating block 14

Visiting statement:
if (D.49678_1553 == 0)

No interesting values produced.
Adding Destination of edge (14 -> 15) to worklist


Simulating block 15

Visiting statement:
if (D.49679_1554 == 0)

No interesting values produced.
Adding Destination of edge (15 -> 16) to worklist


Simulating block 16

Visiting statement:
if (D.49680_1555 == 0)

No interesting values produced.
Adding Destination of edge (16 -> 17) to worklist


Simulating block 17

Visiting statement:
if (D.49681_1556 == 0)

No interesting values produced.
Adding Destination of edge (17 -> 18) to worklist


Simulating block 18

Visiting statement:
if (D.49682_1557 != 0)

No interesting values produced.
Adding Destination of edge (18 -> 19) to worklist


Simulating block 19

Visiting statement:
if (D.49683_1558 == 0)

No interesting values produced.

Simulating block 23
Adding Destination of edge (23 -> 25) to worklist


Simulating block 25

Visiting PHI node: pmap_1458 = PHI <pmap_1457(23), pmap_1459(24)>
	Argument #0: pmap_1457 copy-of chain: pmap_1457 [NOT A COPY]
PHI node pmap_1458 copy-of chain: pmap_1458 -> pmap_1457 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (pmap_1458 != 0B)

No interesting values produced.
Adding Destination of edge (25 -> 26) to worklist

Adding Destination of edge (25 -> 27) to worklist


Simulating block 26

Visiting statement:
if (D.47871_1460 != 0)

No interesting values produced.
Adding Destination of edge (26 -> 24) to worklist


Simulating block 24
Adding Destination of edge (24 -> 25) to worklist


Simulating block 25

Visiting PHI node: pmap_1458 = PHI <pmap_1457(23), pmap_1459(24)>
	Argument #0: pmap_1457 copy-of chain: pmap_1457 [NOT A COPY]
	Argument #1: pmap_1459 copy-of chain: pmap_1459 [NOT A COPY]
PHI node pmap_1458 copy-of chain: pmap_1458 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 20

Simulating block 21

Visiting PHI node: D.49673_1559 = PHI <1(11), 1(12), 1(13), 1(14), 1(15), 1(16), 1(17), 1(19), 0(20)>
PHI node D.49673_1559 copy-of chain: D.49673_1559 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
D.49673_1636 = D.49673_1559;


Visiting statement:
D.49673_204 = D.49673_1636;


Visiting statement:
if (D.49673_204 != 0)

No interesting values produced.
Adding Destination of edge (21 -> 22) to worklist

Adding Destination of edge (21 -> 23) to worklist


Simulating block 22

Simulating block 27
Adding Destination of edge (27 -> 29) to worklist


Simulating block 29

Visiting PHI node: pmap_1462 = PHI <pmap_1461(27), pmap_1463(28)>
	Argument #0: pmap_1461 copy-of chain: pmap_1461 [NOT A COPY]
PHI node pmap_1462 copy-of chain: pmap_1462 -> pmap_1461 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (pmap_1462 != 0B)

No interesting values produced.
Adding Destination of edge (29 -> 30) to worklist

Adding Destination of edge (29 -> 31) to worklist


Simulating block 30

Visiting statement:
if (D.47874_1464 != 0)

No interesting values produced.
Adding Destination of edge (30 -> 28) to worklist


Simulating block 28
Adding Destination of edge (28 -> 29) to worklist


Simulating block 29

Visiting PHI node: pmap_1462 = PHI <pmap_1461(27), pmap_1463(28)>
	Argument #0: pmap_1461 copy-of chain: pmap_1461 [NOT A COPY]
	Argument #1: pmap_1463 copy-of chain: pmap_1463 [NOT A COPY]
PHI node pmap_1462 copy-of chain: pmap_1462 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 23

Simulating block 31

Visiting statement:
if (proceed_209(D) != 0B)

No interesting values produced.
Adding Destination of edge (31 -> 32) to worklist

Adding Destination of edge (31 -> 33) to worklist


Simulating block 32

Simulating block 33

Visiting statement:
if (val_214 != 0B)

No interesting values produced.
Adding Destination of edge (33 -> 34) to worklist

Adding Destination of edge (33 -> 38) to worklist


Simulating block 34

Visiting statement:
if (D.44494_215 == 0)

No interesting values produced.
Adding Destination of edge (34 -> 35) to worklist


Simulating block 35

Visiting statement:
if (D.44498_218 == 0)

No interesting values produced.
Adding Destination of edge (35 -> 36) to worklist


Simulating block 36

Visiting statement:
if (D.44502_221 == 0)

No interesting values produced.
Adding Destination of edge (36 -> 37) to worklist


Simulating block 37

Simulating block 38

Visiting PHI node: greedy_47 = PHI <greedy_211(33), 0(34), 1(35), 1(36), greedy_211(37)>
	Argument #0: greedy_211 copy-of chain: greedy_211 [NOT A COPY]
PHI node greedy_47 copy-of chain: greedy_47 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: scrooge_80 = PHI <scrooge_213(33), 0(34), 0(35), 1(36), scrooge_213(37)>
	Argument #0: scrooge_213 copy-of chain: scrooge_213 [NOT A COPY]
PHI node scrooge_80 copy-of chain: scrooge_80 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
D.44509_227 = D.44508_226;


Visiting statement:
if (D.44509_227 != 0B)

No interesting values produced.
Adding Destination of edge (38 -> 39) to worklist

Adding Destination of edge (38 -> 45) to worklist


Simulating statement (from ssa_edges): if (scrooge_80 != 0)

Simulating statement (from ssa_edges): if (greedy_47 != 0)

Simulating statement (from ssa_edges): if (greedy_47 != 0)

Simulating block 39

Visiting statement:
if (D.44514_231 != 0)

No interesting values produced.
Adding Destination of edge (39 -> 40) to worklist

Adding Destination of edge (39 -> 42) to worklist


Simulating block 40

Visiting statement:
D.44509_233 = D.44508_226;


Visiting statement:
if (D.44518_234 != 0B)

No interesting values produced.
Adding Destination of edge (40 -> 41) to worklist


Simulating block 41

Simulating block 45

Visiting statement:
if (val_245 != 0B)

No interesting values produced.
Adding Destination of edge (45 -> 46) to worklist

Adding Destination of edge (45 -> 59) to worklist


Simulating block 46

Visiting statement:
if (val_245 != 0B)

No interesting values produced.
Adding Destination of edge (46 -> 47) to worklist

Adding Destination of edge (46 -> 56) to worklist


Simulating block 47

Visiting statement:
if (D.49687_1560 == 0)

No interesting values produced.
Adding Destination of edge (47 -> 57) to worklist

Adding Destination of edge (47 -> 48) to worklist


Simulating block 48

Visiting statement:
if (D.49688_1561 == 0)

No interesting values produced.
Adding Destination of edge (48 -> 49) to worklist


Simulating block 49

Visiting statement:
if (D.49689_1562 == 0)

No interesting values produced.
Adding Destination of edge (49 -> 50) to worklist


Simulating block 50

Visiting statement:
if (D.49690_1563 == 0)

No interesting values produced.
Adding Destination of edge (50 -> 51) to worklist


Simulating block 51

Visiting statement:
if (D.49691_1564 == 0)

No interesting values produced.
Adding Destination of edge (51 -> 52) to worklist


Simulating block 52

Visiting statement:
if (D.49692_1565 == 0)

No interesting values produced.
Adding Destination of edge (52 -> 53) to worklist


Simulating block 53

Visiting statement:
if (D.49693_1566 == 0)

No interesting values produced.
Adding Destination of edge (53 -> 54) to worklist


Simulating block 54

Visiting statement:
if (D.49694_1567 != 0)

No interesting values produced.
Adding Destination of edge (54 -> 55) to worklist


Simulating block 55

Visiting statement:
if (D.49695_1568 != 0)

No interesting values produced.

Simulating block 42

Visiting statement:
if (D.44523_239 != 0)

No interesting values produced.
Adding Destination of edge (42 -> 43) to worklist

Adding Destination of edge (42 -> 45) to worklist


Simulating block 43

Visiting statement:
if (D.44526_241 != 0B)

No interesting values produced.
Adding Destination of edge (43 -> 44) to worklist


Simulating block 44

Simulating block 59

Visiting statement:
if (m_248 != 0B)

No interesting values produced.
Adding Destination of edge (59 -> 60) to worklist

Adding Destination of edge (59 -> 65) to worklist


Simulating block 60

Visiting statement:
if (D.44544_253 != 0)

No interesting values produced.
Adding Destination of edge (60 -> 64) to worklist

Adding Destination of edge (60 -> 61) to worklist


Simulating block 61

Visiting statement:
if (D.44546_254 != 0B)

No interesting values produced.
Adding Destination of edge (61 -> 62) to worklist


Simulating block 62

Visiting statement:
D.44546_255 = D.44546_254;


Visiting statement:
if (D.44548_256 != 0B)

No interesting values produced.
Adding Destination of edge (62 -> 63) to worklist


Simulating block 63

Visiting statement:
D.44546_298 = D.44546_254;


Visiting statement:
D.44548_299 = D.44548_256;


Visiting statement:
if (__result_300 == 0)

No interesting values produced.

Simulating block 64

Simulating block 56

Simulating block 57

Visiting PHI node: D.49685_1569 = PHI <1(47), 1(48), 1(49), 1(50), 1(51), 1(52), 1(53), 1(55), 0(56)>
PHI node D.49685_1569 copy-of chain: D.49685_1569 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
D.49685_1639 = D.49685_1569;


Visiting statement:
D.49685_246 = D.49685_1639;


Visiting statement:
if (D.49685_246 != 0)

No interesting values produced.
Adding Destination of edge (57 -> 58) to worklist

Adding Destination of edge (57 -> 59) to worklist


Simulating block 58

Simulating block 45

Simulating block 65

Visiting PHI node: sendonly_42 = PHI <0(59), 0(61), 0(62), 0(63), 2(64)>
PHI node sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.

Adding Destination of edge (65 -> 85) to worklist


Simulating statement (from ssa_edges): sendonly_44 = PHI <sendonly_42(65), sendonly_43(84)>

Visiting PHI node: sendonly_44 = PHI <sendonly_42(65), sendonly_43(84)>
	Argument #0: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_44 copy-of chain: sendonly_44 -> sendonly_42 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (sendonly_44 <= 1)

Simulating statement (from ssa_edges): sendonly_43 = PHI <sendonly_44(69), 1(71), 1(73), sendonly_44(77), 0(79), sendonly_44(81), sendonly_44(82), sendonly_44(83), sendonly_44(76)>

Visiting PHI node: sendonly_43 = PHI <sendonly_44(69), 1(71), 1(73), sendonly_44(77), 0(79), sendonly_44(81), sendonly_44(82), sendonly_44(83), sendonly_44(76)>
PHI node sendonly_43 copy-of chain: sendonly_43 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 85

Visiting PHI node: attr_29 = PHI <attr_303(65), attr_334(84)>
	Argument #0: attr_303 copy-of chain: attr_303 [NOT A COPY]
PHI node attr_29 copy-of chain: attr_29 -> attr_303 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: dptime_37 = PHI <0(65), dptime_36(84)>
PHI node dptime_37 copy-of chain: dptime_37 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: dmaxptime_41 = PHI <0(65), dmaxptime_40(84)>
PHI node dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: sendonly_44 = PHI <sendonly_42(65), sendonly_43(84)>
	Argument #0: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
PHI node sendonly_44 copy-of chain: sendonly_44 -> sendonly_42 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: recvonly_46 = PHI <0(65), recvonly_45(84)>
PHI node recvonly_46 copy-of chain: recvonly_46 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (attr_29 != 0B)

No interesting values produced.
Adding Destination of edge (85 -> 66) to worklist

Adding Destination of edge (85 -> 86) to worklist


Simulating statement (from ssa_edges): recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>

Visiting PHI node: recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
PHI node recvonly_45 copy-of chain: recvonly_45 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>

Visiting PHI node: maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>
PHI node maxptime_39 copy-of chain: maxptime_39 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>

Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): ptime_35 = PHI <dptime_37(192), ptime_34(225)>

Visiting PHI node: ptime_35 = PHI <dptime_37(192), ptime_34(225)>
PHI node ptime_35 copy-of chain: ptime_35 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>

Visiting PHI node: dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
PHI node dptime_36 copy-of chain: dptime_36 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 66

Visiting statement:
if (D.44590_304 == 0B)

No interesting values produced.
Adding Destination of edge (66 -> 69) to worklist

Adding Destination of edge (66 -> 67) to worklist


Simulating block 67

Visiting statement:
if (D.47877_1465 == 0)

No interesting values produced.
Adding Destination of edge (67 -> 68) to worklist


Simulating block 68

Simulating block 59

Simulating block 86

Visiting statement:
if (D.44626_337 != 0)

No interesting values produced.
Adding Destination of edge (86 -> 87) to worklist

Adding Destination of edge (86 -> 88) to worklist


Simulating block 87

Simulating block 69

Visiting PHI node: D.47876_1466 = PHI <1(66), 1(67), 0(68)>
PHI node D.47876_1466 copy-of chain: D.47876_1466 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.47876_1466 != 0)

No interesting values produced.
Adding Destination of edge (69 -> 84) to worklist

Adding Destination of edge (69 -> 70) to worklist


Simulating block 70

Visiting statement:
D.44590_306 = D.44590_304;


Visiting statement:
if (D.44594_307 == 0)

No interesting values produced.
Adding Destination of edge (70 -> 71) to worklist

Adding Destination of edge (70 -> 72) to worklist


Simulating block 71

Simulating block 88

Visiting statement:
if (D.44631_339 == 0)

No interesting values produced.
Adding Destination of edge (88 -> 89) to worklist

Adding Destination of edge (88 -> 106) to worklist


Simulating block 89

Visiting statement:
if (val_341 == 0B)

No interesting values produced.
Adding Destination of edge (89 -> 102) to worklist

Adding Destination of edge (89 -> 90) to worklist


Simulating block 90

Visiting statement:
if (val_341 != 0B)

No interesting values produced.
Adding Destination of edge (90 -> 91) to worklist

Adding Destination of edge (90 -> 100) to worklist


Simulating block 91

Visiting statement:
if (D.49699_1570 == 0)

No interesting values produced.
Adding Destination of edge (91 -> 101) to worklist

Adding Destination of edge (91 -> 92) to worklist


Simulating block 92

Visiting statement:
if (D.49700_1571 == 0)

No interesting values produced.
Adding Destination of edge (92 -> 93) to worklist


Simulating block 93

Visiting statement:
if (D.49701_1572 == 0)

No interesting values produced.
Adding Destination of edge (93 -> 94) to worklist


Simulating block 94

Visiting statement:
if (D.49702_1573 == 0)

No interesting values produced.
Adding Destination of edge (94 -> 95) to worklist


Simulating block 95

Visiting statement:
if (D.49703_1574 == 0)

No interesting values produced.
Adding Destination of edge (95 -> 96) to worklist


Simulating block 96

Visiting statement:
if (D.49704_1575 == 0)

No interesting values produced.
Adding Destination of edge (96 -> 97) to worklist


Simulating block 97

Visiting statement:
if (D.49705_1576 == 0)

No interesting values produced.
Adding Destination of edge (97 -> 98) to worklist


Simulating block 98

Visiting statement:
if (D.49706_1577 != 0)

No interesting values produced.
Adding Destination of edge (98 -> 99) to worklist


Simulating block 99

Visiting statement:
if (D.49707_1578 != 0)

No interesting values produced.

Simulating block 102

Visiting statement:
if (D.44636_344 == 0)

No interesting values produced.
Adding Destination of edge (102 -> 103) to worklist


Simulating block 103

Visiting statement:
D.44471_345 = D.44471_343;


Visiting statement:
D.44636_346 = D.44636_344;


Visiting statement:
if (D.44640_348 != 0)

No interesting values produced.
Adding Destination of edge (103 -> 104) to worklist


Simulating block 104

Visiting statement:
if (val_351 != 0B)

No interesting values produced.
Adding Destination of edge (104 -> 105) to worklist


Simulating block 105

Simulating block 84

Visiting PHI node: dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
	Argument #0: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
	Argument #1: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
PHI node dptime_36 copy-of chain: dptime_36 -> dptime_37 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
	Argument #0: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #1: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 -> dmaxptime_41 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: sendonly_43 = PHI <sendonly_44(69), 1(71), 1(73), sendonly_44(77), 0(79), sendonly_44(81), sendonly_44(82), sendonly_44(83), sendonly_44(76)>
	Argument #0: sendonly_44 copy-of chain: sendonly_44 -> sendonly_42 [COPY]
PHI node sendonly_43 copy-of chain: sendonly_43 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
	Argument #0: recvonly_46 copy-of chain: recvonly_46 [NOT A COPY]
	Argument #1: recvonly_46 copy-of chain: recvonly_46 [NOT A COPY]
PHI node recvonly_45 copy-of chain: recvonly_45 -> recvonly_46 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (84 -> 85) to worklist


Simulating statement (from ssa_edges): sendonly_44 = PHI <sendonly_42(65), sendonly_43(84)>

Visiting PHI node: sendonly_44 = PHI <sendonly_42(65), sendonly_43(84)>
	Argument #0: sendonly_42 copy-of chain: sendonly_42 [NOT A COPY]
	Argument #1: sendonly_43 copy-of chain: sendonly_43 [NOT A COPY]
PHI node sendonly_44 copy-of chain: sendonly_44 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (sendonly_44 <= 1)

Simulating block 72

Visiting statement:
D.44590_310 = D.44590_304;


Visiting statement:
if (D.44598_311 == 0)

No interesting values produced.
Adding Destination of edge (72 -> 73) to worklist

Adding Destination of edge (72 -> 74) to worklist


Simulating block 73
Adding Destination of edge (73 -> 84) to worklist


Simulating block 106

Visiting PHI node: reneg_81 = PHI <1(88), 1(101), 1(102), 1(103), reneg_349(104), reneg_352(105)>
PHI node reneg_81 copy-of chain: reneg_81 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (reneg_81 != 0)

No interesting values produced.
Adding Destination of edge (106 -> 107) to worklist

Adding Destination of edge (106 -> 120) to worklist


Simulating statement (from ssa_edges): reneg_82 = PHI <reneg_81(106), reneg_353(107), reneg_356(119)>

Visiting PHI node: reneg_82 = PHI <reneg_81(106), reneg_353(107), reneg_356(119)>
	Argument #0: reneg_81 copy-of chain: reneg_81 [NOT A COPY]
PHI node reneg_82 copy-of chain: reneg_82 -> reneg_81 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): reneg_83 = PHI <reneg_82(120), 0(121)>

Visiting PHI node: reneg_83 = PHI <reneg_82(120), 0(121)>
PHI node reneg_83 copy-of chain: reneg_83 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 107

Visiting statement:
if (val_355 != 0B)

No interesting values produced.
Adding Destination of edge (107 -> 108) to worklist


Simulating block 108

Visiting statement:
if (val_355 != 0B)

No interesting values produced.
Adding Destination of edge (108 -> 109) to worklist

Adding Destination of edge (108 -> 118) to worklist


Simulating block 109

Visiting statement:
if (D.49711_1580 == 0)

No interesting values produced.
Adding Destination of edge (109 -> 119) to worklist

Adding Destination of edge (109 -> 110) to worklist


Simulating block 110

Visiting statement:
if (D.49712_1581 == 0)

No interesting values produced.
Adding Destination of edge (110 -> 111) to worklist


Simulating block 111

Visiting statement:
if (D.49713_1582 == 0)

No interesting values produced.
Adding Destination of edge (111 -> 112) to worklist


Simulating block 112

Visiting statement:
if (D.49714_1583 == 0)

No interesting values produced.
Adding Destination of edge (112 -> 113) to worklist


Simulating block 113

Visiting statement:
if (D.49715_1584 == 0)

No interesting values produced.
Adding Destination of edge (113 -> 114) to worklist


Simulating block 114

Visiting statement:
if (D.49716_1585 == 0)

No interesting values produced.
Adding Destination of edge (114 -> 115) to worklist


Simulating block 115

Visiting statement:
if (D.49717_1586 == 0)

No interesting values produced.
Adding Destination of edge (115 -> 116) to worklist


Simulating block 116

Visiting statement:
if (D.49718_1587 != 0)

No interesting values produced.
Adding Destination of edge (116 -> 117) to worklist


Simulating block 117

Visiting statement:
if (D.49719_1588 != 0)

No interesting values produced.

Simulating block 100

Simulating block 101

Visiting PHI node: D.49697_1579 = PHI <1(91), 1(92), 1(93), 1(94), 1(95), 1(96), 1(97), 1(99), 0(100)>
PHI node D.49697_1579 copy-of chain: D.49697_1579 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
D.49697_1642 = D.49697_1579;


Visiting statement:
D.49697_342 = D.49697_1642;


Visiting statement:
if (D.49697_342 == 0)

No interesting values produced.
Adding Destination of edge (101 -> 102) to worklist

Adding Destination of edge (101 -> 106) to worklist


Simulating block 85

Visiting PHI node: attr_29 = PHI <attr_303(65), attr_334(84)>
	Argument #0: attr_303 copy-of chain: attr_303 [NOT A COPY]
	Argument #1: attr_334 copy-of chain: attr_334 [NOT A COPY]
PHI node attr_29 copy-of chain: attr_29 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 74

Visiting statement:
D.44590_314 = D.44590_304;


Visiting statement:
if (D.44602_315 == 0)

No interesting values produced.
Adding Destination of edge (74 -> 75) to worklist

Adding Destination of edge (74 -> 78) to worklist


Simulating block 75

Visiting statement:
if (D.44606_319 != 0)

No interesting values produced.
Adding Destination of edge (75 -> 76) to worklist

Adding Destination of edge (75 -> 77) to worklist


Simulating block 76

Simulating block 84

Visiting PHI node: dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
	Argument #0: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
	Argument #1: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
	Argument #2: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
	Argument #8: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
PHI node dptime_36 copy-of chain: dptime_36 -> dptime_37 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
	Argument #0: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #1: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #2: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #8: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 -> dmaxptime_41 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
	Argument #0: recvonly_46 copy-of chain: recvonly_46 [NOT A COPY]
	Argument #1: recvonly_46 copy-of chain: recvonly_46 [NOT A COPY]
	Argument #2: recvonly_46 copy-of chain: recvonly_46 [NOT A COPY]
PHI node recvonly_45 copy-of chain: recvonly_45 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 120

Visiting PHI node: reneg_82 = PHI <reneg_81(106), reneg_353(107), reneg_356(119)>
	Argument #0: reneg_81 copy-of chain: reneg_81 [NOT A COPY]
	Argument #1: reneg_353 copy-of chain: reneg_353 [NOT A COPY]
PHI node reneg_82 copy-of chain: reneg_82 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44649_357 != 0B)

No interesting values produced.
Adding Destination of edge (120 -> 121) to worklist

Adding Destination of edge (120 -> 122) to worklist


Simulating statement (from ssa_edges): reneg_83 = PHI <reneg_82(120), 0(121)>

Visiting PHI node: reneg_83 = PHI <reneg_82(120), 0(121)>
	Argument #0: reneg_82 copy-of chain: reneg_82 [NOT A COPY]
PHI node reneg_83 copy-of chain: reneg_83 -> reneg_82 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (reneg_83 == 0)

Simulating statement (from ssa_edges): if (reneg_83 != 0)

Simulating block 121

Simulating block 118

Simulating block 119

Visiting PHI node: reneg_1589 = PHI <1(109), 1(110), 1(111), 1(112), 1(113), 1(114), 1(115), 1(117), 0(118)>
PHI node reneg_1589 copy-of chain: reneg_1589 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
reneg_1645 = reneg_1589;


Visiting statement:
reneg_356 = reneg_1645;

Adding Destination of edge (119 -> 120) to worklist


Simulating block 102

Simulating block 106

Simulating block 78

Visiting statement:
if (sendonly_44 <= 1)

No interesting values produced.
Adding Destination of edge (78 -> 79) to worklist

Adding Destination of edge (78 -> 80) to worklist


Simulating block 77
Adding Destination of edge (77 -> 84) to worklist


Simulating block 122

Visiting PHI node: reneg_83 = PHI <reneg_82(120), 0(121)>
	Argument #0: reneg_82 copy-of chain: reneg_82 [NOT A COPY]
PHI node reneg_83 copy-of chain: reneg_83 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (reneg_83 == 0)

No interesting values produced.
Adding Destination of edge (122 -> 123) to worklist

Adding Destination of edge (122 -> 125) to worklist


Simulating statement (from ssa_edges): if (reneg_83 != 0)

Simulating block 123

Visiting statement:
if (D.44655_359 != 0)

No interesting values produced.
Adding Destination of edge (123 -> 124) to worklist


Simulating block 124

Visiting statement:
total_codecs_361 = D.44655_359;

Adding Destination of edge (124 -> 127) to worklist


Simulating statement (from ssa_edges): total_codecs_85 = PHI <total_codecs_361(124), total_codecs_192(125), total_codecs_365(126)>

Visiting PHI node: total_codecs_85 = PHI <total_codecs_361(124), total_codecs_192(125), total_codecs_365(126)>
	Argument #0: total_codecs_361 copy-of chain: total_codecs_361 -> D.44655_359 [COPY]
PHI node total_codecs_85 copy-of chain: total_codecs_85 -> D.44655_359 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (i_139 < total_codecs_85)

Simulating block 120

Simulating block 79

Visiting statement:
D.44590_323 = D.44590_304;


Visiting statement:
if (D.44614_324 == 0)

No interesting values produced.

Simulating block 80

Visiting statement:
D.44590_326 = D.44590_304;


Visiting statement:
if (D.44616_327 == 0)

No interesting values produced.
Adding Destination of edge (80 -> 81) to worklist

Adding Destination of edge (80 -> 82) to worklist


Simulating block 81

Simulating block 84

Visiting PHI node: dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
	Argument #0: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
	Argument #1: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
	Argument #2: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
	Argument #3: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
	Argument #4: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
	Argument #5: dptime_1467 copy-of chain: dptime_1467 [NOT A COPY]
PHI node dptime_36 copy-of chain: dptime_36 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
	Argument #0: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #1: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #2: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #3: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #4: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #5: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #8: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 -> dmaxptime_41 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 125

Visiting statement:
if (reneg_83 != 0)

No interesting values produced.
Adding Destination of edge (125 -> 126) to worklist


Simulating block 126

Visiting statement:
codec_array_363 = codec_array_190;


Simulating statement (from ssa_edges): codec_array_84 = PHI <codec_array_360(124), codec_array_190(125), codec_array_363(126)>

Visiting PHI node: codec_array_84 = PHI <codec_array_360(124), codec_array_190(125), codec_array_363(126)>
	Argument #0: codec_array_360 copy-of chain: codec_array_360 [NOT A COPY]
	Argument #1: codec_array_190 copy-of chain: codec_array_190 [NOT A COPY]
PHI node codec_array_84 copy-of chain: codec_array_84 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 127

Visiting PHI node: total_codecs_85 = PHI <total_codecs_361(124), total_codecs_192(125), total_codecs_365(126)>
	Argument #0: total_codecs_361 copy-of chain: total_codecs_361 -> D.44655_359 [COPY]
	Argument #1: total_codecs_192 copy-of chain: total_codecs_192 [NOT A COPY]
PHI node total_codecs_85 copy-of chain: total_codecs_85 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44661_366 != 0B)

No interesting values produced.
Adding Destination of edge (127 -> 130) to worklist

Adding Destination of edge (127 -> 128) to worklist


Simulating statement (from ssa_edges): if (i_139 < total_codecs_85)

Simulating block 82

Visiting statement:
D.44590_330 = D.44590_304;


Visiting statement:
if (D.44621_331 == 0)

No interesting values produced.
Adding Destination of edge (82 -> 83) to worklist

Adding Destination of edge (82 -> 84) to worklist


Simulating block 83

Simulating block 130
Adding Destination of edge (130 -> 131) to worklist


Simulating block 128

Visiting statement:
if (D.44663_367 != 0B)

No interesting values produced.
Adding Destination of edge (128 -> 130) to worklist

Adding Destination of edge (128 -> 129) to worklist


Simulating block 129

Visiting statement:
if (D.44665_368 != 0B)

No interesting values produced.

Simulating block 130

Simulating block 84

Visiting PHI node: dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
	Argument #0: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #1: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #2: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #3: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #4: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #5: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #6: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #7: dmaxptime_1468 copy-of chain: dmaxptime_1468 [NOT A COPY]
PHI node dmaxptime_40 copy-of chain: dmaxptime_40 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 131
Adding Destination of edge (131 -> 490) to worklist


Simulating block 490

Visiting PHI node: match_16 = PHI <0(131), match_15(489)>
PHI node match_16 copy-of chain: match_16 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: best_te_23 = PHI <0(131), best_te_22(489)>
PHI node best_te_23 copy-of chain: best_te_23 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: cng_pt_27 = PHI <0(131), cng_pt_26(489)>
PHI node cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_28 = PHI <m_370(131), m_1093(489)>
	Argument #0: m_370 copy-of chain: m_370 [NOT A COPY]
PHI node m_28 copy-of chain: m_28 -> m_370 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_56 = PHI <0(131), got_crypto_55(489)>
PHI node got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_video_crypto_64 = PHI <0(131), got_video_crypto_63(489)>
PHI node got_video_crypto_64 copy-of chain: got_video_crypto_64 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_audio_67 = PHI <0(131), got_audio_66(489)>
PHI node got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_avp_69 = PHI <0(131), got_avp_68(489)>
PHI node got_avp_69 copy-of chain: got_avp_69 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_savp_75 = PHI <0(131), got_savp_74(489)>
PHI node got_savp_75 copy-of chain: got_savp_75 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_udptl_77 = PHI <0(131), got_udptl_76(489)>
PHI node got_udptl_77 copy-of chain: got_udptl_77 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_webrtc_79 = PHI <0(131), got_webrtc_78(489)>
PHI node got_webrtc_79 copy-of chain: got_webrtc_79 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_95 = PHI <0(131), codec_ms_94(489)>
PHI node codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_114 = PHI <0(131), m_idx_113(489)>
PHI node m_idx_114 copy-of chain: m_idx_114 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_122 = PHI <0(131), nm_idx_121(489)>
PHI node nm_idx_122 copy-of chain: nm_idx_122 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (m_28 != 0B)

No interesting values produced.
Adding Destination of edge (490 -> 132) to worklist

Adding Destination of edge (490 -> 491) to worklist


Simulating statement (from ssa_edges): nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>

Visiting PHI node: nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>
PHI node nm_idx_118 copy-of chain: nm_idx_118 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>

Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
PHI node nm_idx_121 copy-of chain: nm_idx_121 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>

Visiting PHI node: m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>
PHI node m_idx_104 copy-of chain: m_idx_104 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>

Visiting PHI node: m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
PHI node m_idx_113 copy-of chain: m_idx_113 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>

Visiting PHI node: codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>
PHI node codec_ms_92 copy-of chain: codec_ms_92 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>

Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
PHI node codec_ms_94 copy-of chain: codec_ms_94 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_webrtc_78 = PHI <got_webrtc_79(132), got_webrtc_374(133)>

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(132), got_webrtc_374(133)>
PHI node got_webrtc_78 copy-of chain: got_webrtc_78 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>
PHI node got_udptl_76 copy-of chain: got_udptl_76 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_savp_74 = PHI <got_savp_75(138), got_savp_75(141), got_savp_75(143), got_savp_75(144), got_savp_384(139), got_savp_75(142)>

Visiting PHI node: got_savp_74 = PHI <got_savp_75(138), got_savp_75(141), got_savp_75(143), got_savp_75(144), got_savp_384(139), got_savp_75(142)>
PHI node got_savp_74 copy-of chain: got_savp_74 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_avp_68 = PHI <got_avp_69(138), got_avp_69(141), got_avp_69(143), got_avp_69(144), got_avp_69(139), got_avp_388(142)>

Visiting PHI node: got_avp_68 = PHI <got_avp_69(138), got_avp_69(141), got_avp_69(143), got_avp_69(144), got_avp_69(139), got_avp_388(142)>
PHI node got_avp_68 copy-of chain: got_avp_68 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>

Visiting PHI node: got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
PHI node got_audio_66 copy-of chain: got_audio_66 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_audio_65 = PHI <got_audio_67(350), 1(360), got_audio_67(359)>

Visiting PHI node: got_audio_65 = PHI <got_audio_67(350), 1(360), got_audio_67(359)>
PHI node got_audio_65 copy-of chain: got_audio_65 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_62 = PHI <got_video_crypto_64(391), got_video_crypto_61(464)>

Visiting PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(391), got_video_crypto_61(464)>
PHI node got_video_crypto_62 copy-of chain: got_video_crypto_62 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_52 = PHI <got_crypto_56(181), got_crypto_56(182), got_crypto_51(191)>

Visiting PHI node: got_crypto_52 = PHI <got_crypto_56(181), got_crypto_56(182), got_crypto_51(191)>
PHI node got_crypto_52 copy-of chain: got_crypto_52 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>

Visiting PHI node: got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>
PHI node got_crypto_51 copy-of chain: got_crypto_51 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
PHI node got_crypto_55 copy-of chain: got_crypto_55 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): cng_pt_25 = PHI <cng_pt_27(234), cng_pt_24(310)>

Visiting PHI node: cng_pt_25 = PHI <cng_pt_27(234), cng_pt_24(310)>
PHI node cng_pt_25 copy-of chain: cng_pt_25 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>

Visiting PHI node: cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
PHI node cng_pt_26 copy-of chain: cng_pt_26 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): best_te_20 = PHI <best_te_23(234), best_te_19(310)>

Visiting PHI node: best_te_20 = PHI <best_te_23(234), best_te_19(310)>
PHI node best_te_20 copy-of chain: best_te_20 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>

Visiting PHI node: best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
PHI node best_te_22 copy-of chain: best_te_22 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_17 = PHI <1(148), 0(150), 0(168), 1(166), 0(223), 0(229), 0(233), 0(390), 0(441), match_16(490), 1(165), 1(178)>

Visiting PHI node: match_17 = PHI <1(148), 0(150), 0(168), 1(166), 0(223), 0(229), 0(233), 0(390), 0(441), match_16(490), 1(165), 1(178)>
PHI node match_17 copy-of chain: match_17 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): match_8 = PHI <match_16(234), match_7(310)>

Visiting PHI node: match_8 = PHI <match_16(234), match_7(310)>
PHI node match_8 copy-of chain: match_8 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>

Visiting PHI node: match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
PHI node match_15 copy-of chain: match_15 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_14 = PHI <match_16(477), 1(478)>

Visiting PHI node: match_14 = PHI <match_16(477), 1(478)>
PHI node match_14 copy-of chain: match_14 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (match_16 == 0)

Simulating block 132

Visiting statement:
if (D.44666_373 == 261)

No interesting values produced.
Adding Destination of edge (132 -> 133) to worklist

Adding Destination of edge (132 -> 134) to worklist


Simulating block 133

Simulating block 491

Visiting statement:
if (parser_196 != 0B)

No interesting values produced.
Adding Destination of edge (491 -> 492) to worklist

Adding Destination of edge (491 -> 493) to worklist


Simulating block 492

Simulating block 134

Visiting PHI node: got_webrtc_78 = PHI <got_webrtc_79(132), got_webrtc_374(133)>
	Argument #0: got_webrtc_79 copy-of chain: got_webrtc_79 [NOT A COPY]
	Argument #1: got_webrtc_374 copy-of chain: got_webrtc_374 [NOT A COPY]
PHI node got_webrtc_78 copy-of chain: got_webrtc_78 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44669_375 != 0B)

No interesting values produced.
Adding Destination of edge (134 -> 135) to worklist

Adding Destination of edge (134 -> 137) to worklist


Simulating block 135

Visiting statement:
D.44669_376 = D.44669_375;


Visiting statement:
if (D.44672_377 == 0)

No interesting values produced.
Adding Destination of edge (135 -> 136) to worklist


Simulating block 136

Simulating block 493
Adding Destination of edge (493 -> 494) to worklist


Simulating block 137

Visiting statement:
if (D.44678_382 != 0)

No interesting values produced.
Adding Destination of edge (137 -> 138) to worklist

Adding Destination of edge (137 -> 140) to worklist


Simulating block 138

Visiting statement:
if (D.44681_383 == 2)

No interesting values produced.
Adding Destination of edge (138 -> 139) to worklist

Adding Destination of edge (138 -> 145) to worklist


Simulating block 139

Simulating block 494

Simulating block 140

Visiting statement:
D.44666_386 = D.44675_379;


Visiting statement:
if (D.44666_386 == 256)

No interesting values produced.
Adding Destination of edge (140 -> 141) to worklist

Adding Destination of edge (140 -> 143) to worklist


Simulating block 141

Visiting statement:
if (D.44681_387 == 2)

No interesting values produced.
Adding Destination of edge (141 -> 142) to worklist


Simulating block 142

Simulating block 145

Visiting PHI node: got_avp_68 = PHI <got_avp_69(138), got_avp_69(141), got_avp_69(143), got_avp_69(144), got_avp_69(139), got_avp_388(142)>
	Argument #0: got_avp_69 copy-of chain: got_avp_69 [NOT A COPY]
	Argument #1: got_avp_69 copy-of chain: got_avp_69 [NOT A COPY]
	Argument #4: got_avp_69 copy-of chain: got_avp_69 [NOT A COPY]
	Argument #5: got_avp_388 copy-of chain: got_avp_388 [NOT A COPY]
PHI node got_avp_68 copy-of chain: got_avp_68 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_savp_74 = PHI <got_savp_75(138), got_savp_75(141), got_savp_75(143), got_savp_75(144), got_savp_384(139), got_savp_75(142)>
	Argument #0: got_savp_75 copy-of chain: got_savp_75 [NOT A COPY]
	Argument #1: got_savp_75 copy-of chain: got_savp_75 [NOT A COPY]
	Argument #4: got_savp_384 copy-of chain: got_savp_384 [NOT A COPY]
PHI node got_savp_74 copy-of chain: got_savp_74 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>
	Argument #0: got_udptl_77 copy-of chain: got_udptl_77 [NOT A COPY]
	Argument #1: got_udptl_77 copy-of chain: got_udptl_77 [NOT A COPY]
	Argument #4: got_udptl_77 copy-of chain: got_udptl_77 [NOT A COPY]
	Argument #5: got_udptl_77 copy-of chain: got_udptl_77 [NOT A COPY]
PHI node got_udptl_76 copy-of chain: got_udptl_76 -> got_udptl_77 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (got_udptl_76 != 0)

No interesting values produced.
Adding Destination of edge (145 -> 146) to worklist

Adding Destination of edge (145 -> 179) to worklist


Simulating block 143

Visiting statement:
D.44666_390 = D.44675_379;


Visiting statement:
if (D.44666_390 == 258)

No interesting values produced.
Adding Destination of edge (143 -> 144) to worklist

Adding Destination of edge (143 -> 145) to worklist


Simulating block 146

Visiting statement:
if (D.44681_392 == 8)

No interesting values produced.
Adding Destination of edge (146 -> 147) to worklist


Simulating block 147

Visiting statement:
if (D.44697_393 != 0)

No interesting values produced.
Adding Destination of edge (147 -> 148) to worklist


Simulating block 148

Visiting statement:
if (D.44699_396 != 0)

No interesting values produced.
Adding Destination of edge (148 -> 491) to worklist

Adding Destination of edge (148 -> 149) to worklist


Simulating block 149

Visiting statement:
if (D.44703_399 != 0)

No interesting values produced.
Adding Destination of edge (149 -> 150) to worklist

Adding Destination of edge (149 -> 151) to worklist


Simulating block 150

Simulating block 179

Visiting statement:
if (D.44681_493 == 2)

No interesting values produced.
Adding Destination of edge (179 -> 180) to worklist

Adding Destination of edge (179 -> 385) to worklist


Simulating block 144

Simulating block 145

Visiting PHI node: got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>
	Argument #0: got_udptl_77 copy-of chain: got_udptl_77 [NOT A COPY]
	Argument #1: got_udptl_77 copy-of chain: got_udptl_77 [NOT A COPY]
	Argument #2: got_udptl_77 copy-of chain: got_udptl_77 [NOT A COPY]
	Argument #3: got_udptl_391 copy-of chain: got_udptl_391 [NOT A COPY]
PHI node got_udptl_76 copy-of chain: got_udptl_76 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 491

Simulating block 151

Visiting statement:
if (D.44707_408 != 0)

No interesting values produced.
Adding Destination of edge (151 -> 152) to worklist

Adding Destination of edge (151 -> 154) to worklist


Simulating block 180

Visiting statement:
if (D.44779_497 != 0)

No interesting values produced.
Adding Destination of edge (180 -> 181) to worklist


Simulating block 181

Visiting statement:
if (D.44781_498 != 0)

No interesting values produced.
Adding Destination of edge (181 -> 182) to worklist

Adding Destination of edge (181 -> 192) to worklist


Simulating block 182

Visiting statement:
if (D.44784_499 != 0)

No interesting values produced.
Adding Destination of edge (182 -> 183) to worklist


Simulating block 183
Adding Destination of edge (183 -> 191) to worklist


Simulating block 385

Visiting statement:
D.44681_872 = D.44681_493;


Visiting statement:
if (D.44681_872 == 3)

No interesting values produced.
Adding Destination of edge (385 -> 386) to worklist

Adding Destination of edge (385 -> 489) to worklist


Simulating block 152

Visiting statement:
if (proceed_209(D) != 0B)

No interesting values produced.
Adding Destination of edge (152 -> 153) to worklist


Simulating block 153

Simulating block 154

Visiting statement:
if (var_402 != 0B)

No interesting values produced.
Adding Destination of edge (154 -> 155) to worklist

Adding Destination of edge (154 -> 158) to worklist


Simulating block 155

Visiting statement:
if (pass_409 == 0)

No interesting values produced.
Adding Destination of edge (155 -> 156) to worklist


Simulating block 156

Visiting statement:
if (D.44716_410 == 0)

No interesting values produced.
Adding Destination of edge (156 -> 157) to worklist


Simulating block 157

Simulating block 192

Visiting PHI node: got_crypto_52 = PHI <got_crypto_56(181), got_crypto_56(182), got_crypto_51(191)>
	Argument #0: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #1: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
PHI node got_crypto_52 copy-of chain: got_crypto_52 -> got_crypto_56 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (192 -> 226) to worklist


Simulating statement (from ssa_edges): got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>

Visiting PHI node: got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>
	Argument #0: got_crypto_52 copy-of chain: got_crypto_52 -> got_crypto_56 [COPY]
PHI node got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_56 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (got_crypto_54 <= 0)

Simulating statement (from ssa_edges): got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>

Visiting PHI node: got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
PHI node got_crypto_53 copy-of chain: got_crypto_53 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
	Argument #1: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_56 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating block 191

Visiting PHI node: attr_30 = PHI <attr_500(183), attr_506(190)>
	Argument #0: attr_500 copy-of chain: attr_500 [NOT A COPY]
PHI node attr_30 copy-of chain: attr_30 -> attr_500 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>
	Argument #0: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
PHI node got_crypto_51 copy-of chain: got_crypto_51 -> got_crypto_56 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (attr_30 != 0B)

No interesting values produced.
Adding Destination of edge (191 -> 184) to worklist

Adding Destination of edge (191 -> 192) to worklist


Simulating statement (from ssa_edges): got_crypto_52 = PHI <got_crypto_56(181), got_crypto_56(182), got_crypto_51(191)>

Visiting PHI node: got_crypto_52 = PHI <got_crypto_56(181), got_crypto_56(182), got_crypto_51(191)>
	Argument #0: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #1: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
PHI node got_crypto_52 copy-of chain: got_crypto_52 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_crypto_50 = PHI <got_crypto_51(184), got_crypto_51(188), 1(189)>

Visiting PHI node: got_crypto_50 = PHI <got_crypto_51(184), got_crypto_51(188), 1(189)>
PHI node got_crypto_50 copy-of chain: got_crypto_50 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 386

Visiting statement:
if (D.44697_873 != 0)

No interesting values produced.
Adding Destination of edge (386 -> 387) to worklist


Simulating statement (from ssa_edges): got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>

Visiting PHI node: got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>
	Argument #0: got_crypto_52 copy-of chain: got_crypto_52 [NOT A COPY]
PHI node got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (got_crypto_54 <= 0)

Simulating statement (from ssa_edges): got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>

Visiting PHI node: got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
PHI node got_crypto_53 copy-of chain: got_crypto_53 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
	Argument #1: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #2: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_56 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 387

Visiting statement:
if (D.44546_880 != 0B)

No interesting values produced.
Adding Destination of edge (387 -> 388) to worklist

Adding Destination of edge (387 -> 389) to worklist


Simulating block 388

Visiting statement:
connection_881 = D.44546_880;


Simulating statement (from ssa_edges): connection_125 = PHI <connection_879(387), connection_881(388)>

Visiting PHI node: connection_125 = PHI <connection_879(387), connection_881(388)>
	Argument #0: connection_879 copy-of chain: connection_879 [NOT A COPY]
	Argument #1: connection_881 copy-of chain: connection_881 -> D.44546_880 [COPY]
PHI node connection_125 copy-of chain: connection_125 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 489

Visiting PHI node: match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
	Argument #1: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #2: match_16 copy-of chain: match_16 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_16 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
	Argument #1: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
	Argument #2: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 -> best_te_23 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
	Argument #1: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
	Argument #2: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_27 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
	Argument #1: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #2: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_56 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
	Argument #1: got_video_crypto_64 copy-of chain: got_video_crypto_64 [NOT A COPY]
	Argument #2: got_video_crypto_64 copy-of chain: got_video_crypto_64 [NOT A COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 -> got_video_crypto_64 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
	Argument #1: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #2: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 -> got_audio_67 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
	Argument #1: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
	Argument #2: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 -> codec_ms_95 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
	Argument #1: m_idx_114 copy-of chain: m_idx_114 [NOT A COPY]
	Argument #2: m_idx_114 copy-of chain: m_idx_114 [NOT A COPY]
PHI node m_idx_113 copy-of chain: m_idx_113 -> m_idx_114 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
	Argument #1: nm_idx_122 copy-of chain: nm_idx_122 [NOT A COPY]
	Argument #2: nm_idx_122 copy-of chain: nm_idx_122 [NOT A COPY]
PHI node nm_idx_121 copy-of chain: nm_idx_121 -> nm_idx_122 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (489 -> 490) to worklist


Simulating statement (from ssa_edges): if (connection_125 == 0B)

Simulating block 490

Visiting PHI node: m_28 = PHI <m_370(131), m_1093(489)>
	Argument #0: m_370 copy-of chain: m_370 [NOT A COPY]
	Argument #1: m_1093 copy-of chain: m_1093 [NOT A COPY]
PHI node m_28 copy-of chain: m_28 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 158

Visiting PHI node: pass_126 = PHI <pass_406(154), pass_409(155), pass_409(156), 2(157)>
	Argument #0: pass_406 copy-of chain: pass_406 [NOT A COPY]
	Argument #1: pass_409 copy-of chain: pass_409 [NOT A COPY]
PHI node pass_126 copy-of chain: pass_126 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (pass_126 == 2)

No interesting values produced.
Adding Destination of edge (158 -> 159) to worklist

Adding Destination of edge (158 -> 160) to worklist


Simulating statement (from ssa_edges): pass_127 = PHI <pass_126(163), 0(160), 0(159), 0(164), 0(162), 0(161)>

Visiting PHI node: pass_127 = PHI <pass_126(163), 0(160), 0(159), 0(164), 0(162), 0(161)>
PHI node pass_127 copy-of chain: pass_127 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 159

Visiting statement:
if (D.44723_414 != 0)

No interesting values produced.
Adding Destination of edge (159 -> 165) to worklist


Simulating block 226

Visiting PHI node: attr_31 = PHI <attr_507(192), attr_548(225)>
	Argument #0: attr_507 copy-of chain: attr_507 [NOT A COPY]
PHI node attr_31 copy-of chain: attr_31 -> attr_507 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: ptime_35 = PHI <dptime_37(192), ptime_34(225)>
	Argument #0: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
PHI node ptime_35 copy-of chain: ptime_35 -> dptime_37 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>
	Argument #0: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
PHI node maxptime_39 copy-of chain: maxptime_39 -> dmaxptime_41 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>
	Argument #0: got_crypto_52 copy-of chain: got_crypto_52 [NOT A COPY]
PHI node got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (attr_31 != 0B)

No interesting values produced.
Adding Destination of edge (226 -> 193) to worklist

Adding Destination of edge (226 -> 227) to worklist


Simulating statement (from ssa_edges): maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>

Visiting PHI node: maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
PHI node maxptime_38 copy-of chain: maxptime_38 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (maxptime_39 != 0)

Simulating statement (from ssa_edges): if (maxptime_39 == 0)

Simulating statement (from ssa_edges): if (D.45025_735 <= maxptime_39)

Simulating statement (from ssa_edges): ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>

Visiting PHI node: ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>
PHI node ptime_34 copy-of chain: ptime_34 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (ptime_35 == 0)

Simulating statement (from ssa_edges): codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>

Visiting PHI node: codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>
PHI node codec_ms_86 copy-of chain: codec_ms_86 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 184

Visiting statement:
if (D.44787_502 == 0)

No interesting values produced.
Adding Destination of edge (184 -> 185) to worklist

Adding Destination of edge (184 -> 190) to worklist


Simulating block 185

Visiting statement:
if (D.44619_503 == 0B)

No interesting values produced.
Adding Destination of edge (185 -> 188) to worklist

Adding Destination of edge (185 -> 186) to worklist


Simulating block 186

Visiting statement:
if (D.47887_1469 == 0)

No interesting values produced.
Adding Destination of edge (186 -> 187) to worklist


Simulating block 187

Simulating block 192

Simulating block 389

Visiting statement:
if (connection_125 == 0B)

No interesting values produced.
Adding Destination of edge (389 -> 390) to worklist

Adding Destination of edge (389 -> 391) to worklist


Simulating block 390
Adding Destination of edge (390 -> 491) to worklist


Simulating block 160

Visiting statement:
if (D.44724_416 == 0)

No interesting values produced.
Adding Destination of edge (160 -> 161) to worklist


Simulating block 161

Visiting statement:
if (D.44726_418 != 0)

No interesting values produced.
Adding Destination of edge (161 -> 162) to worklist


Simulating block 162

Visiting statement:
if (D.44728_420 != 0)

No interesting values produced.
Adding Destination of edge (162 -> 163) to worklist


Simulating block 163

Visiting statement:
if (D.44730_422 == 0)

No interesting values produced.
Adding Destination of edge (163 -> 164) to worklist


Simulating block 164

Simulating block 165

Visiting PHI node: pass_127 = PHI <pass_126(163), 0(160), 0(159), 0(164), 0(162), 0(161)>
	Argument #0: pass_126 copy-of chain: pass_126 [NOT A COPY]
PHI node pass_127 copy-of chain: pass_127 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (pass_127 != 0)

No interesting values produced.
Adding Destination of edge (165 -> 166) to worklist


Simulating block 193

Visiting statement:
if (D.44795_509 == 0)

No interesting values produced.
Adding Destination of edge (193 -> 194) to worklist

Adding Destination of edge (193 -> 197) to worklist


Simulating block 227

Visiting statement:
if (D.44836_551 != 0)

No interesting values produced.
Adding Destination of edge (227 -> 228) to worklist

Adding Destination of edge (227 -> 230) to worklist


Simulating block 228

Visiting statement:
if (D.44839_552 == 0)

No interesting values produced.
Adding Destination of edge (228 -> 229) to worklist


Simulating block 229

Simulating block 190

Visiting PHI node: got_crypto_50 = PHI <got_crypto_51(184), got_crypto_51(188), 1(189)>
	Argument #0: got_crypto_51 copy-of chain: got_crypto_51 -> got_crypto_56 [COPY]
PHI node got_crypto_50 copy-of chain: got_crypto_50 -> got_crypto_56 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (190 -> 191) to worklist


Simulating statement (from ssa_edges): got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>

Visiting PHI node: got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>
	Argument #0: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #1: got_crypto_50 copy-of chain: got_crypto_50 -> got_crypto_56 [COPY]
PHI node got_crypto_51 copy-of chain: got_crypto_51 -> got_crypto_56 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 191

Visiting PHI node: attr_30 = PHI <attr_500(183), attr_506(190)>
	Argument #0: attr_500 copy-of chain: attr_500 [NOT A COPY]
	Argument #1: attr_506 copy-of chain: attr_506 [NOT A COPY]
PHI node attr_30 copy-of chain: attr_30 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>
	Argument #0: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #1: got_crypto_50 copy-of chain: got_crypto_50 -> got_crypto_56 [COPY]
PHI node got_crypto_51 copy-of chain: got_crypto_51 -> got_crypto_56 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 188

Visiting PHI node: D.47886_1470 = PHI <1(185), 1(186), 0(187)>
PHI node D.47886_1470 copy-of chain: D.47886_1470 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.47886_1470 == 0)

No interesting values produced.
Adding Destination of edge (188 -> 189) to worklist

Adding Destination of edge (188 -> 190) to worklist


Simulating block 391
Adding Destination of edge (391 -> 465) to worklist


Simulating block 465

Visiting PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(391), got_video_crypto_61(464)>
	Argument #0: got_video_crypto_64 copy-of chain: got_video_crypto_64 [NOT A COPY]
PHI node got_video_crypto_62 copy-of chain: got_video_crypto_62 -> got_video_crypto_64 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_111 = PHI <0(391), m_idx_110(464)>
PHI node m_idx_111 copy-of chain: m_idx_111 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: map_136 = PHI <map_883(391), map_1021(464)>
	Argument #0: map_883 copy-of chain: map_883 [NOT A COPY]
PHI node map_136 copy-of chain: map_136 -> map_883 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (map_136 != 0B)

No interesting values produced.
Adding Destination of edge (465 -> 392) to worklist

Adding Destination of edge (465 -> 466) to worklist


Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(447), m_idx_109(462)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(447), m_idx_109(462)>
PHI node m_idx_110 copy-of chain: m_idx_110 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_112 = PHI <m_idx_111(466), 0(467)>

Visiting PHI node: m_idx_112 = PHI <m_idx_111(466), 0(467)>
PHI node m_idx_112 copy-of chain: m_idx_112 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_59 = PHI <got_video_crypto_62(392), got_video_crypto_62(393), got_video_crypto_58(402)>

Visiting PHI node: got_video_crypto_59 = PHI <got_video_crypto_62(392), got_video_crypto_62(393), got_video_crypto_58(402)>
PHI node got_video_crypto_59 copy-of chain: got_video_crypto_59 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_58 = PHI <got_video_crypto_62(394), got_video_crypto_57(401)>

Visiting PHI node: got_video_crypto_58 = PHI <got_video_crypto_62(394), got_video_crypto_57(401)>
PHI node got_video_crypto_58 copy-of chain: got_video_crypto_58 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>

Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
	Argument #1: got_video_crypto_64 copy-of chain: got_video_crypto_64 [NOT A COPY]
	Argument #2: got_video_crypto_64 copy-of chain: got_video_crypto_64 [NOT A COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 -> got_video_crypto_64 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 392

Visiting statement:
if (D.45137_884 != 0)

No interesting values produced.
Adding Destination of edge (392 -> 393) to worklist

Adding Destination of edge (392 -> 403) to worklist


Simulating block 393

Visiting statement:
if (D.45140_885 != 0)

No interesting values produced.
Adding Destination of edge (393 -> 394) to worklist


Simulating block 394
Adding Destination of edge (394 -> 402) to worklist


Simulating block 402

Visiting PHI node: attr_32 = PHI <attr_886(394), attr_892(401)>
	Argument #0: attr_886 copy-of chain: attr_886 [NOT A COPY]
PHI node attr_32 copy-of chain: attr_32 -> attr_886 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_video_crypto_58 = PHI <got_video_crypto_62(394), got_video_crypto_57(401)>
	Argument #0: got_video_crypto_62 copy-of chain: got_video_crypto_62 -> got_video_crypto_64 [COPY]
PHI node got_video_crypto_58 copy-of chain: got_video_crypto_58 -> got_video_crypto_64 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (attr_32 != 0B)

No interesting values produced.
Adding Destination of edge (402 -> 395) to worklist


Simulating statement (from ssa_edges): got_video_crypto_59 = PHI <got_video_crypto_62(392), got_video_crypto_62(393), got_video_crypto_58(402)>

Visiting PHI node: got_video_crypto_59 = PHI <got_video_crypto_62(392), got_video_crypto_62(393), got_video_crypto_58(402)>
	Argument #0: got_video_crypto_62 copy-of chain: got_video_crypto_62 -> got_video_crypto_64 [COPY]
	Argument #1: got_video_crypto_62 copy-of chain: got_video_crypto_62 -> got_video_crypto_64 [COPY]
PHI node got_video_crypto_59 copy-of chain: got_video_crypto_59 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_video_crypto_57 = PHI <got_video_crypto_58(395), got_video_crypto_58(399), 1(400)>

Visiting PHI node: got_video_crypto_57 = PHI <got_video_crypto_58(395), got_video_crypto_58(399), 1(400)>
PHI node got_video_crypto_57 copy-of chain: got_video_crypto_57 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 395

Visiting statement:
if (D.45143_888 == 0)

No interesting values produced.
Adding Destination of edge (395 -> 396) to worklist

Adding Destination of edge (395 -> 401) to worklist


Simulating statement (from ssa_edges): got_video_crypto_61 = PHI <got_video_crypto_59(403), got_video_crypto_60(443)>

Visiting PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(403), got_video_crypto_60(443)>
PHI node got_video_crypto_61 copy-of chain: got_video_crypto_61 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 396

Visiting statement:
if (D.44619_889 == 0B)

No interesting values produced.
Adding Destination of edge (396 -> 399) to worklist

Adding Destination of edge (396 -> 397) to worklist


Simulating block 397

Visiting statement:
if (D.47939_1495 == 0)

No interesting values produced.
Adding Destination of edge (397 -> 398) to worklist


Simulating block 398

Simulating block 399

Visiting PHI node: D.47938_1496 = PHI <1(396), 1(397), 0(398)>
PHI node D.47938_1496 copy-of chain: D.47938_1496 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.47938_1496 == 0)

No interesting values produced.
Adding Destination of edge (399 -> 400) to worklist


Simulating block 400

Simulating block 491

Simulating block 166

Visiting statement:
if (D.44733_424 == 0)

No interesting values produced.
Adding Destination of edge (166 -> 167) to worklist

Adding Destination of edge (166 -> 491) to worklist


Simulating block 194

Visiting statement:
if (D.44619_510 != 0B)

No interesting values produced.
Adding Destination of edge (194 -> 195) to worklist


Simulating block 195

Visiting statement:
D.44619_512 = D.44619_510;


Visiting statement:
if (D.44800_517 == 0B)

No interesting values produced.
Adding Destination of edge (195 -> 196) to worklist

Adding Destination of edge (195 -> 225) to worklist


Simulating block 196

Visiting statement:
D.44471_518 = D.44471_516;


Simulating block 197

Visiting statement:
D.44590_519 = D.44590_508;


Visiting statement:
if (D.44805_520 == 0)

No interesting values produced.
Adding Destination of edge (197 -> 198) to worklist

Adding Destination of edge (197 -> 200) to worklist


Simulating block 198

Visiting statement:
if (D.44619_521 != 0B)

No interesting values produced.
Adding Destination of edge (198 -> 199) to worklist


Simulating block 199

Visiting statement:
D.44619_522 = D.44619_521;


Simulating block 230

Visiting statement:
if (D.44546_555 != 0B)

No interesting values produced.
Adding Destination of edge (230 -> 231) to worklist

Adding Destination of edge (230 -> 232) to worklist


Simulating block 189

Simulating block 190

Visiting PHI node: got_crypto_50 = PHI <got_crypto_51(184), got_crypto_51(188), 1(189)>
	Argument #0: got_crypto_51 copy-of chain: got_crypto_51 -> got_crypto_56 [COPY]
	Argument #1: got_crypto_51 copy-of chain: got_crypto_51 -> got_crypto_56 [COPY]
PHI node got_crypto_50 copy-of chain: got_crypto_50 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>

Visiting PHI node: got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>
	Argument #0: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #1: got_crypto_50 copy-of chain: got_crypto_50 [NOT A COPY]
PHI node got_crypto_51 copy-of chain: got_crypto_51 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 466

Visiting statement:
if (D.45267_1025 != 0)

No interesting values produced.
Adding Destination of edge (466 -> 467) to worklist

Adding Destination of edge (466 -> 468) to worklist


Simulating block 467

Simulating block 403
Adding Destination of edge (403 -> 444) to worklist


Simulating block 444

Visiting PHI node: attr_33 = PHI <attr_893(403), attr_978(443)>
	Argument #0: attr_893 copy-of chain: attr_893 [NOT A COPY]
PHI node attr_33 copy-of chain: attr_33 -> attr_893 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(403), got_video_crypto_60(443)>
	Argument #0: got_video_crypto_59 copy-of chain: got_video_crypto_59 [NOT A COPY]
PHI node got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (attr_33 != 0B)

No interesting values produced.
Adding Destination of edge (444 -> 404) to worklist

Adding Destination of edge (444 -> 445) to worklist


Simulating statement (from ssa_edges): if (got_video_crypto_61 == 0)

Simulating statement (from ssa_edges): got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_video_crypto_62 = PHI <got_video_crypto_64(391), got_video_crypto_61(464)>

Visiting PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(391), got_video_crypto_61(464)>
	Argument #0: got_video_crypto_64 copy-of chain: got_video_crypto_64 [NOT A COPY]
PHI node got_video_crypto_62 copy-of chain: got_video_crypto_62 -> got_video_crypto_64 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 404

Visiting statement:
if (D.45151_895 == 0)

No interesting values produced.
Adding Destination of edge (404 -> 405) to worklist

Adding Destination of edge (404 -> 406) to worklist


Simulating block 405

Visiting statement:
if (D.44619_896 != 0B)

No interesting values produced.
Adding Destination of edge (405 -> 443) to worklist


Simulating block 401

Visiting PHI node: got_video_crypto_57 = PHI <got_video_crypto_58(395), got_video_crypto_58(399), 1(400)>
	Argument #0: got_video_crypto_58 copy-of chain: got_video_crypto_58 -> got_video_crypto_64 [COPY]
	Argument #1: got_video_crypto_58 copy-of chain: got_video_crypto_58 -> got_video_crypto_64 [COPY]
PHI node got_video_crypto_57 copy-of chain: got_video_crypto_57 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.

Adding Destination of edge (401 -> 402) to worklist


Simulating statement (from ssa_edges): got_video_crypto_58 = PHI <got_video_crypto_62(394), got_video_crypto_57(401)>

Visiting PHI node: got_video_crypto_58 = PHI <got_video_crypto_62(394), got_video_crypto_57(401)>
	Argument #0: got_video_crypto_62 copy-of chain: got_video_crypto_62 -> got_video_crypto_64 [COPY]
	Argument #1: got_video_crypto_57 copy-of chain: got_video_crypto_57 [NOT A COPY]
PHI node got_video_crypto_58 copy-of chain: got_video_crypto_58 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 167

Visiting statement:
if (D.44737_431 == 0)

No interesting values produced.
Adding Destination of edge (167 -> 168) to worklist

Adding Destination of edge (167 -> 169) to worklist


Simulating block 168

Simulating block 491

Simulating block 225

Visiting PHI node: ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>
	Argument #0: ptime_35 copy-of chain: ptime_35 -> dptime_37 [COPY]
	Argument #1: ptime_1472 copy-of chain: ptime_1472 [NOT A COPY]
PHI node ptime_34 copy-of chain: ptime_34 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
	Argument #0: maxptime_39 copy-of chain: maxptime_39 -> dmaxptime_41 [COPY]
	Argument #1: maxptime_39 copy-of chain: maxptime_39 -> dmaxptime_41 [COPY]
	Argument #7: maxptime_39 copy-of chain: maxptime_39 -> dmaxptime_41 [COPY]
PHI node maxptime_38 copy-of chain: maxptime_38 -> dmaxptime_41 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
	Argument #0: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #1: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #7: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
PHI node got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_52 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (225 -> 226) to worklist


Simulating statement (from ssa_edges): ptime_35 = PHI <dptime_37(192), ptime_34(225)>

Visiting PHI node: ptime_35 = PHI <dptime_37(192), ptime_34(225)>
	Argument #0: dptime_37 copy-of chain: dptime_37 [NOT A COPY]
	Argument #1: ptime_34 copy-of chain: ptime_34 [NOT A COPY]
PHI node ptime_35 copy-of chain: ptime_35 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (ptime_35 == 0)

Simulating statement (from ssa_edges): codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>

Visiting PHI node: codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>
PHI node codec_ms_86 copy-of chain: codec_ms_86 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>

Visiting PHI node: got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>
	Argument #0: got_crypto_52 copy-of chain: got_crypto_52 [NOT A COPY]
	Argument #1: got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_52 [COPY]
PHI node got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>

Visiting PHI node: maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>
	Argument #0: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #1: maxptime_38 copy-of chain: maxptime_38 -> dmaxptime_41 [COPY]
PHI node maxptime_39 copy-of chain: maxptime_39 -> dmaxptime_41 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 200

Visiting statement:
D.44590_524 = D.44590_508;


Visiting statement:
if (D.44810_525 == 0)

No interesting values produced.
Adding Destination of edge (200 -> 201) to worklist

Adding Destination of edge (200 -> 203) to worklist


Simulating block 231

Visiting statement:
connection_556 = D.44546_555;


Simulating statement (from ssa_edges): connection_124 = PHI <connection_554(230), connection_556(231)>

Visiting PHI node: connection_124 = PHI <connection_554(230), connection_556(231)>
	Argument #0: connection_554 copy-of chain: connection_554 [NOT A COPY]
	Argument #1: connection_556 copy-of chain: connection_556 -> D.44546_555 [COPY]
PHI node connection_124 copy-of chain: connection_124 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 232

Visiting statement:
if (connection_124 == 0B)

No interesting values produced.
Adding Destination of edge (232 -> 233) to worklist

Adding Destination of edge (232 -> 234) to worklist


Simulating block 233
Adding Destination of edge (233 -> 491) to worklist


Simulating block 468

Visiting PHI node: m_idx_112 = PHI <m_idx_111(466), 0(467)>
PHI node m_idx_112 copy-of chain: m_idx_112 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (m_idx_112 != 0)

No interesting values produced.
Adding Destination of edge (468 -> 469) to worklist

Adding Destination of edge (468 -> 489) to worklist


Simulating statement (from ssa_edges): if (j_141 < m_idx_112)

Simulating statement (from ssa_edges): m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>

Visiting PHI node: m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
	Argument #1: m_idx_114 copy-of chain: m_idx_114 [NOT A COPY]
	Argument #2: m_idx_114 copy-of chain: m_idx_114 [NOT A COPY]
	Argument #3: m_idx_112 copy-of chain: m_idx_112 [NOT A COPY]
PHI node m_idx_113 copy-of chain: m_idx_113 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 445

Visiting statement:
if (rm_encoding_979 == 0B)

No interesting values produced.
Adding Destination of edge (445 -> 446) to worklist

Adding Destination of edge (445 -> 447) to worklist


Simulating block 446

Simulating block 406

Visiting statement:
D.44590_897 = D.44590_894;


Visiting statement:
if (D.45154_898 == 0)

No interesting values produced.
Adding Destination of edge (406 -> 407) to worklist

Adding Destination of edge (406 -> 414) to worklist


Simulating block 407

Visiting statement:
if (D.44619_899 == 0B)

No interesting values produced.
Adding Destination of edge (407 -> 410) to worklist

Adding Destination of edge (407 -> 408) to worklist


Simulating block 408

Visiting statement:
if (D.47943_1497 == 0)

No interesting values produced.
Adding Destination of edge (408 -> 409) to worklist


Simulating block 409

Simulating block 410

Visiting PHI node: D.47942_1498 = PHI <1(407), 1(408), 0(409)>
PHI node D.47942_1498 copy-of chain: D.47942_1498 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.47942_1498 == 0)

No interesting values produced.
Adding Destination of edge (410 -> 411) to worklist


Simulating block 411

Visiting statement:
D.44619_901 = D.44619_899;


Visiting statement:
if (D.45160_902 != 0B)

No interesting values produced.
Adding Destination of edge (411 -> 412) to worklist

Adding Destination of edge (411 -> 413) to worklist


Simulating block 412

Simulating block 443

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
	Argument #0: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #7: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 -> got_video_crypto_59 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (443 -> 444) to worklist


Simulating statement (from ssa_edges): got_video_crypto_61 = PHI <got_video_crypto_59(403), got_video_crypto_60(443)>

Visiting PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(403), got_video_crypto_60(443)>
	Argument #0: got_video_crypto_59 copy-of chain: got_video_crypto_59 [NOT A COPY]
	Argument #1: got_video_crypto_60 copy-of chain: got_video_crypto_60 -> got_video_crypto_59 [COPY]
PHI node got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 402

Visiting PHI node: attr_32 = PHI <attr_886(394), attr_892(401)>
	Argument #0: attr_886 copy-of chain: attr_886 [NOT A COPY]
	Argument #1: attr_892 copy-of chain: attr_892 [NOT A COPY]
PHI node attr_32 copy-of chain: attr_32 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 169

Visiting statement:
if (D.44743_440 != 0)

No interesting values produced.
Adding Destination of edge (169 -> 170) to worklist

Adding Destination of edge (169 -> 172) to worklist


Simulating block 170

Visiting statement:
if (D.44747_443 != 0)

No interesting values produced.
Adding Destination of edge (170 -> 171) to worklist


Simulating block 171

Simulating block 226

Visiting PHI node: attr_31 = PHI <attr_507(192), attr_548(225)>
	Argument #0: attr_507 copy-of chain: attr_507 [NOT A COPY]
	Argument #1: attr_548 copy-of chain: attr_548 [NOT A COPY]
PHI node attr_31 copy-of chain: attr_31 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>
	Argument #0: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #1: maxptime_38 copy-of chain: maxptime_38 -> dmaxptime_41 [COPY]
PHI node maxptime_39 copy-of chain: maxptime_39 -> dmaxptime_41 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>
	Argument #0: got_crypto_52 copy-of chain: got_crypto_52 [NOT A COPY]
	Argument #1: got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_52 [COPY]
PHI node got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 201

Visiting statement:
if (D.44619_526 != 0B)

No interesting values produced.
Adding Destination of edge (201 -> 202) to worklist


Simulating block 202

Visiting statement:
D.44619_527 = D.44619_526;

Adding Destination of edge (202 -> 225) to worklist


Simulating block 203

Visiting statement:
if (got_crypto_54 <= 0)

No interesting values produced.
Adding Destination of edge (203 -> 204) to worklist


Simulating block 234
Adding Destination of edge (234 -> 311) to worklist


Simulating block 311

Visiting PHI node: match_8 = PHI <match_16(234), match_7(310)>
	Argument #0: match_16 copy-of chain: match_16 [NOT A COPY]
PHI node match_8 copy-of chain: match_8 -> match_16 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: best_te_20 = PHI <best_te_23(234), best_te_19(310)>
	Argument #0: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
PHI node best_te_20 copy-of chain: best_te_20 -> best_te_23 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: cng_pt_25 = PHI <cng_pt_27(234), cng_pt_24(310)>
	Argument #0: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
PHI node cng_pt_25 copy-of chain: cng_pt_25 -> cng_pt_27 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: x_49 = PHI <0(234), x_48(310)>
PHI node x_49 copy-of chain: x_49 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>
	Argument #0: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
PHI node codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>
	Argument #0: m_idx_114 copy-of chain: m_idx_114 [NOT A COPY]
PHI node m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>
	Argument #0: nm_idx_122 copy-of chain: nm_idx_122 [NOT A COPY]
PHI node nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: map_128 = PHI <map_559(234), map_711(310)>
	Argument #0: map_559 copy-of chain: map_559 [NOT A COPY]
PHI node map_128 copy-of chain: map_128 -> map_559 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (map_128 != 0B)

No interesting values produced.
Adding Destination of edge (311 -> 235) to worklist

Adding Destination of edge (311 -> 312) to worklist


Simulating statement (from ssa_edges): x_48 = PHI <x_49(241), x_49(247), x_580(248), x_580(249), x_580(309)>

Visiting PHI node: x_48 = PHI <x_49(241), x_49(247), x_580(248), x_580(249), x_580(309)>
PHI node x_48 copy-of chain: x_48 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (x_49 < 0)

Simulating statement (from ssa_edges): nm_idx_119 = PHI <nm_idx_116(309), nm_idx_118(311)>

Visiting PHI node: nm_idx_119 = PHI <nm_idx_116(309), nm_idx_118(311)>
PHI node nm_idx_119 copy-of chain: nm_idx_119 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>
PHI node nm_idx_116 copy-of chain: nm_idx_116 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>

Visiting PHI node: nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>
PHI node nm_idx_117 copy-of chain: nm_idx_117 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_105 = PHI <m_idx_102(309), m_idx_104(311)>

Visiting PHI node: m_idx_105 = PHI <m_idx_102(309), m_idx_104(311)>
PHI node m_idx_105 copy-of chain: m_idx_105 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>

Visiting PHI node: m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>
PHI node m_idx_101 copy-of chain: m_idx_101 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>

Visiting PHI node: m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>
PHI node m_idx_103 copy-of chain: m_idx_103 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_93 = PHI <codec_ms_90(309), codec_ms_92(311)>

Visiting PHI node: codec_ms_93 = PHI <codec_ms_90(309), codec_ms_92(311)>
PHI node codec_ms_93 copy-of chain: codec_ms_93 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>

Visiting PHI node: codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>
PHI node codec_ms_91 copy-of chain: codec_ms_91 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (cng_pt_25 == 0)

Simulating statement (from ssa_edges): cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>

Visiting PHI node: cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
	Argument #1: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
	Argument #2: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
	Argument #3: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_27 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): cng_pt_24 = PHI <cng_pt_25(241), cng_pt_573(247), cng_pt_25(248), cng_pt_25(249), cng_pt_25(309)>

Visiting PHI node: cng_pt_24 = PHI <cng_pt_25(241), cng_pt_573(247), cng_pt_25(248), cng_pt_25(249), cng_pt_25(309)>
PHI node cng_pt_24 copy-of chain: cng_pt_24 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (best_te_20 == 0)

Simulating statement (from ssa_edges): best_te_18 = PHI <best_te_20(239), best_te_568(240)>

Visiting PHI node: best_te_18 = PHI <best_te_20(239), best_te_568(240)>
PHI node best_te_18 copy-of chain: best_te_18 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (best_te_20 == 0)

Simulating statement (from ssa_edges): best_te_21 = PHI <best_te_20(361), best_te_20(363), best_te_833(364)>

Visiting PHI node: best_te_21 = PHI <best_te_20(361), best_te_20(363), best_te_833(364)>
PHI node best_te_21 copy-of chain: best_te_21 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>

Visiting PHI node: best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>
PHI node best_te_19 copy-of chain: best_te_19 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_9 = PHI <match_6(309), match_8(311)>

Visiting PHI node: match_9 = PHI <match_6(309), match_8(311)>
PHI node match_9 copy-of chain: match_9 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (match_8 != 0)

Simulating statement (from ssa_edges): match_5 = PHI <match_8(274), match_4(307)>

Visiting PHI node: match_5 = PHI <match_8(274), match_4(307)>
PHI node match_5 copy-of chain: match_5 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>

Visiting PHI node: match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>
PHI node match_7 copy-of chain: match_7 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 235

Visiting statement:
if (rm_encoding_561 == 0B)

No interesting values produced.
Adding Destination of edge (235 -> 236) to worklist

Adding Destination of edge (235 -> 237) to worklist


Simulating statement (from ssa_edges): match_10 = PHI <match_9(312), 0(313)>

Visiting PHI node: match_10 = PHI <match_9(312), 0(313)>
PHI node match_10 copy-of chain: match_10 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>

Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
	Argument #1: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
	Argument #2: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
	Argument #3: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 -> codec_ms_95 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_106 = PHI <m_idx_105(312), 0(313)>

Visiting PHI node: m_idx_106 = PHI <m_idx_105(312), 0(313)>
PHI node m_idx_106 copy-of chain: m_idx_106 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_120 = PHI <nm_idx_119(312), 0(313)>

Visiting PHI node: nm_idx_120 = PHI <nm_idx_119(312), 0(313)>
PHI node nm_idx_120 copy-of chain: nm_idx_120 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 236

Simulating block 491

Simulating block 469

Visiting statement:
if (greedy_47 != 0)

No interesting values produced.
Adding Destination of edge (469 -> 470) to worklist

Adding Destination of edge (469 -> 471) to worklist


Simulating block 470

Simulating block 489

Visiting PHI node: match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
	Argument #1: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #2: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #3: match_16 copy-of chain: match_16 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_16 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
	Argument #1: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
	Argument #2: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
	Argument #3: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 -> best_te_23 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
	Argument #1: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
	Argument #2: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
	Argument #3: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_27 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
	Argument #1: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #2: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #3: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_56 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
	Argument #1: got_video_crypto_64 copy-of chain: got_video_crypto_64 [NOT A COPY]
	Argument #2: got_video_crypto_64 copy-of chain: got_video_crypto_64 [NOT A COPY]
PHI node got_video_crypto_63 copy-of chain: got_video_crypto_63 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
	Argument #1: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #2: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #3: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 -> got_audio_67 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
	Argument #1: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
	Argument #2: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
	Argument #3: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 -> codec_ms_95 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
	Argument #1: nm_idx_122 copy-of chain: nm_idx_122 [NOT A COPY]
	Argument #2: nm_idx_122 copy-of chain: nm_idx_122 [NOT A COPY]
PHI node nm_idx_121 copy-of chain: nm_idx_121 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 447

Visiting PHI node: rm_encoding_137 = PHI <rm_encoding_979(445), ""(446)>
	Argument #0: rm_encoding_979 copy-of chain: rm_encoding_979 [NOT A COPY]
PHI node rm_encoding_137 copy-of chain: rm_encoding_137 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.

Adding Destination of edge (447 -> 463) to worklist


Simulating block 414

Visiting statement:
D.44590_906 = D.44590_894;


Visiting statement:
if (D.45168_907 == 0)

No interesting values produced.
Adding Destination of edge (414 -> 415) to worklist

Adding Destination of edge (414 -> 421) to worklist


Simulating block 415

Visiting statement:
if (D.44619_908 != 0B)

No interesting values produced.
Adding Destination of edge (415 -> 416) to worklist


Simulating block 416

Visiting statement:
__s1_910 = D.44619_908;


Visiting statement:
if (__result_916 == 0)

No interesting values produced.
Adding Destination of edge (416 -> 417) to worklist

Adding Destination of edge (416 -> 418) to worklist


Simulating block 417

Simulating block 413
Adding Destination of edge (413 -> 443) to worklist


Simulating block 444

Visiting PHI node: attr_33 = PHI <attr_893(403), attr_978(443)>
	Argument #0: attr_893 copy-of chain: attr_893 [NOT A COPY]
	Argument #1: attr_978 copy-of chain: attr_978 [NOT A COPY]
PHI node attr_33 copy-of chain: attr_33 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(403), got_video_crypto_60(443)>
	Argument #0: got_video_crypto_59 copy-of chain: got_video_crypto_59 [NOT A COPY]
	Argument #1: got_video_crypto_60 copy-of chain: got_video_crypto_60 -> got_video_crypto_59 [COPY]
PHI node got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 172

Visiting statement:
if (D.44758_451 != 0)

No interesting values produced.
Adding Destination of edge (172 -> 173) to worklist

Adding Destination of edge (172 -> 176) to worklist


Simulating block 173

Visiting statement:
D.44750_452 = D.44750_447;


Visiting statement:
if (D.39032_454 == 0)

No interesting values produced.
Adding Destination of edge (173 -> 174) to worklist


Simulating block 174

Visiting statement:
D.44750_455 = D.44750_447;


Visiting statement:
D.44762_456 = D.44753_448;


Visiting statement:
if (D.44762_456 == remote_port_430)

Trying to determine truth value of predicate if (D.44762_456 == remote_port_430)
No interesting values produced.
Adding Destination of edge (174 -> 175) to worklist


Simulating block 175
Adding Destination of edge (175 -> 178) to worklist


Simulating block 178
Adding Destination of edge (178 -> 491) to worklist


Simulating block 225

Visiting PHI node: maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
	Argument #0: maxptime_39 copy-of chain: maxptime_39 -> dmaxptime_41 [COPY]
	Argument #1: maxptime_39 copy-of chain: maxptime_39 -> dmaxptime_41 [COPY]
	Argument #2: maxptime_1473 copy-of chain: maxptime_1473 [NOT A COPY]
PHI node maxptime_38 copy-of chain: maxptime_38 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
	Argument #0: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #1: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #2: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #3: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #7: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
PHI node got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_52 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>

Visiting PHI node: maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>
	Argument #0: dmaxptime_41 copy-of chain: dmaxptime_41 [NOT A COPY]
	Argument #1: maxptime_38 copy-of chain: maxptime_38 [NOT A COPY]
PHI node maxptime_39 copy-of chain: maxptime_39 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (maxptime_39 != 0)

Simulating statement (from ssa_edges): if (maxptime_39 == 0)

Simulating statement (from ssa_edges): if (D.45025_735 <= maxptime_39)

Simulating statement (from ssa_edges): codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>

Visiting PHI node: codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>
PHI node codec_ms_86 copy-of chain: codec_ms_86 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 204

Visiting statement:
D.44590_529 = D.44590_508;


Visiting statement:
if (D.44815_530 == 0)

No interesting values produced.
Adding Destination of edge (204 -> 205) to worklist

Adding Destination of edge (204 -> 225) to worklist


Simulating block 205

Visiting statement:
if (D.44619_531 == 0B)

No interesting values produced.
Adding Destination of edge (205 -> 208) to worklist

Adding Destination of edge (205 -> 206) to worklist


Simulating block 206

Visiting statement:
if (D.47900_1474 == 0)

No interesting values produced.
Adding Destination of edge (206 -> 207) to worklist


Simulating block 207

Simulating block 312

Visiting statement:
if (D.45004_715 != 0)

No interesting values produced.
Adding Destination of edge (312 -> 313) to worklist

Adding Destination of edge (312 -> 314) to worklist


Simulating block 313

Simulating block 237

Visiting PHI node: rm_encoding_130 = PHI <rm_encoding_561(235), ""(236)>
	Argument #0: rm_encoding_561 copy-of chain: rm_encoding_561 [NOT A COPY]
PHI node rm_encoding_130 copy-of chain: rm_encoding_130 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44848_563 == 0)

No interesting values produced.
Adding Destination of edge (237 -> 238) to worklist

Adding Destination of edge (237 -> 242) to worklist


Simulating block 238

Visiting statement:
if (best_te_20 == 0)

No interesting values produced.
Adding Destination of edge (238 -> 240) to worklist

Adding Destination of edge (238 -> 239) to worklist


Simulating block 239

Visiting statement:
if (D.44854_564 == D.44855_566)

Trying to determine truth value of predicate if (D.44854_564 == D.44855_566)
No interesting values produced.
Adding Destination of edge (239 -> 241) to worklist


Simulating block 471
Adding Destination of edge (471 -> 476) to worklist


Simulating block 463

Visiting PHI node: m_idx_110 = PHI <m_idx_111(447), m_idx_109(462)>
	Argument #0: m_idx_111 copy-of chain: m_idx_111 [NOT A COPY]
PHI node m_idx_110 copy-of chain: m_idx_110 -> m_idx_111 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: i_139 = PHI <0(447), i_1020(462)>
PHI node i_139 copy-of chain: i_139 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (i_139 < total_codecs_85)

Trying to determine truth value of predicate if (i_139 < total_codecs_85)
No interesting values produced.
Adding Destination of edge (463 -> 448) to worklist

Adding Destination of edge (463 -> 464) to worklist


Simulating statement (from ssa_edges): m_idx_109 = PHI <m_idx_110(448), m_idx_110(450), m_idx_110(460), m_idx_110(459), m_idx_1018(461)>

Visiting PHI node: m_idx_109 = PHI <m_idx_110(448), m_idx_110(450), m_idx_110(460), m_idx_110(459), m_idx_1018(461)>
PHI node m_idx_109 copy-of chain: m_idx_109 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 448

Visiting statement:
if (D.45238_986 != 1)

No interesting values produced.
Adding Destination of edge (448 -> 462) to worklist

Adding Destination of edge (448 -> 449) to worklist


Simulating block 449

Visiting statement:
if (D.45241_988 == 0)

No interesting values produced.
Adding Destination of edge (449 -> 450) to worklist

Adding Destination of edge (449 -> 451) to worklist


Simulating block 450

Visiting statement:
if (D.45244_990 != 0)

No interesting values produced.

Simulating block 421

Visiting statement:
if (got_video_crypto_61 == 0)

No interesting values produced.
Adding Destination of edge (421 -> 422) to worklist


Simulating block 422

Visiting statement:
D.44590_960 = D.44590_894;


Visiting statement:
if (D.45219_961 == 0)

No interesting values produced.
Adding Destination of edge (422 -> 423) to worklist


Simulating block 423

Visiting statement:
if (D.44619_962 == 0B)

No interesting values produced.
Adding Destination of edge (423 -> 426) to worklist

Adding Destination of edge (423 -> 424) to worklist


Simulating block 424

Visiting statement:
if (D.47950_1500 == 0)

No interesting values produced.
Adding Destination of edge (424 -> 425) to worklist


Simulating block 425

Simulating block 418

Visiting PHI node: __result_140 = PHI <__result_916(416), __result_922(417)>
	Argument #0: __result_916 copy-of chain: __result_916 [NOT A COPY]
	Argument #1: __result_922 copy-of chain: __result_922 [NOT A COPY]
PHI node __result_140 copy-of chain: __result_140 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (__result_140 == 0)

No interesting values produced.
Adding Destination of edge (418 -> 419) to worklist

Adding Destination of edge (418 -> 421) to worklist


Simulating block 419

Visiting statement:
D.44619_953 = D.44619_908;


Visiting statement:
if (D.45214_958 == 0B)

No interesting values produced.
Adding Destination of edge (419 -> 420) to worklist


Simulating block 420

Visiting statement:
D.44471_959 = D.44471_957;


Simulating block 443

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
	Argument #0: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #1: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #2: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #3: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #4: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #7: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #8: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 -> got_video_crypto_59 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 176

Visiting statement:
D.44750_464 = D.44750_462;


Visiting statement:
D.44750_477 = D.44750_475;


Visiting statement:
if (D.44768_479 != 0)

No interesting values produced.
Adding Destination of edge (176 -> 177) to worklist

Adding Destination of edge (176 -> 178) to worklist


Simulating block 177

Simulating block 491

Simulating block 225

Visiting PHI node: got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
	Argument #0: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #1: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #2: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #3: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #4: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #7: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
PHI node got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_52 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 208

Visiting PHI node: D.47899_1475 = PHI <1(205), 1(206), 0(207)>
PHI node D.47899_1475 copy-of chain: D.47899_1475 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.47899_1475 == 0)

No interesting values produced.
Adding Destination of edge (208 -> 209) to worklist

Adding Destination of edge (208 -> 225) to worklist


Simulating block 209

Visiting statement:
if (D.44822_535 == 0)

No interesting values produced.
Adding Destination of edge (209 -> 210) to worklist

Adding Destination of edge (209 -> 224) to worklist


Simulating block 210

Visiting statement:
if (D.44825_537 != 0B)

No interesting values produced.
Adding Destination of edge (210 -> 211) to worklist

Adding Destination of edge (210 -> 220) to worklist


Simulating block 211

Visiting statement:
if (D.49723_1590 == 0)

No interesting values produced.
Adding Destination of edge (211 -> 221) to worklist

Adding Destination of edge (211 -> 212) to worklist


Simulating block 212

Visiting statement:
if (D.49724_1591 == 0)

No interesting values produced.
Adding Destination of edge (212 -> 213) to worklist


Simulating block 213

Visiting statement:
if (D.49725_1592 == 0)

No interesting values produced.
Adding Destination of edge (213 -> 214) to worklist


Simulating block 214

Visiting statement:
if (D.49726_1593 == 0)

No interesting values produced.
Adding Destination of edge (214 -> 215) to worklist


Simulating block 215

Visiting statement:
if (D.49727_1594 == 0)

No interesting values produced.
Adding Destination of edge (215 -> 216) to worklist


Simulating block 216

Visiting statement:
if (D.49728_1595 == 0)

No interesting values produced.
Adding Destination of edge (216 -> 217) to worklist


Simulating block 217

Visiting statement:
if (D.49729_1596 == 0)

No interesting values produced.
Adding Destination of edge (217 -> 218) to worklist


Simulating block 218

Visiting statement:
if (D.49730_1597 != 0)

No interesting values produced.
Adding Destination of edge (218 -> 219) to worklist


Simulating block 219

Visiting statement:
if (D.49731_1598 != 0)

No interesting values produced.

Simulating block 314

Visiting PHI node: match_10 = PHI <match_9(312), 0(313)>
	Argument #0: match_9 copy-of chain: match_9 [NOT A COPY]
PHI node match_10 copy-of chain: match_10 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_106 = PHI <m_idx_105(312), 0(313)>
	Argument #0: m_idx_105 copy-of chain: m_idx_105 [NOT A COPY]
PHI node m_idx_106 copy-of chain: m_idx_106 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_120 = PHI <nm_idx_119(312), 0(313)>
	Argument #0: nm_idx_119 copy-of chain: nm_idx_119 [NOT A COPY]
PHI node nm_idx_120 copy-of chain: nm_idx_120 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.45009_721 != 0)

No interesting values produced.
Adding Destination of edge (314 -> 315) to worklist

Adding Destination of edge (314 -> 325) to worklist


Simulating statement (from ssa_edges): if (j_133 < nm_idx_120)

Simulating statement (from ssa_edges): m_idx_107 = PHI <m_idx_106(314), m_idx_744(322), m_idx_106(324)>

Visiting PHI node: m_idx_107 = PHI <m_idx_106(314), m_idx_744(322), m_idx_106(324)>
	Argument #0: m_idx_106 copy-of chain: m_idx_106 [NOT A COPY]
PHI node m_idx_107 copy-of chain: m_idx_107 -> m_idx_106 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): match_11 = PHI <match_10(314), 1(322), match_10(324)>

Visiting PHI node: match_11 = PHI <match_10(314), 1(322), match_10(324)>
	Argument #0: match_10 copy-of chain: match_10 [NOT A COPY]
PHI node match_11 copy-of chain: match_11 -> match_10 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): match_12 = PHI <match_11(325), 1(349)>

Visiting PHI node: match_12 = PHI <match_11(325), 1(349)>
PHI node match_12 copy-of chain: match_12 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (m_idx_107 != 0)

Simulating statement (from ssa_edges): if (j_135 < m_idx_107)

Simulating block 242

Visiting statement:
if (D.44858_570 == 0)

No interesting values produced.
Adding Destination of edge (242 -> 243) to worklist

Adding Destination of edge (242 -> 248) to worklist


Simulating block 243

Visiting statement:
if (cng_pt_25 == 0)

No interesting values produced.
Adding Destination of edge (243 -> 244) to worklist


Simulating block 244

Visiting statement:
if (D.44863_571 == 0)

No interesting values produced.
Adding Destination of edge (244 -> 245) to worklist


Simulating block 245

Visiting statement:
if (D.44605_574 != 0B)

No interesting values produced.
Adding Destination of edge (245 -> 246) to worklist

Adding Destination of edge (245 -> 247) to worklist


Simulating block 246

Simulating block 240

Simulating block 241

Visiting PHI node: best_te_18 = PHI <best_te_20(239), best_te_568(240)>
	Argument #0: best_te_20 copy-of chain: best_te_20 -> best_te_23 [COPY]
	Argument #1: best_te_568 copy-of chain: best_te_568 [NOT A COPY]
PHI node best_te_18 copy-of chain: best_te_18 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.

Adding Destination of edge (241 -> 310) to worklist


Simulating statement (from ssa_edges): best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>

Visiting PHI node: best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>
	Argument #0: best_te_18 copy-of chain: best_te_18 [NOT A COPY]
PHI node best_te_19 copy-of chain: best_te_19 -> best_te_18 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): best_te_20 = PHI <best_te_23(234), best_te_19(310)>

Visiting PHI node: best_te_20 = PHI <best_te_23(234), best_te_19(310)>
	Argument #0: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
PHI node best_te_20 copy-of chain: best_te_20 -> best_te_23 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 476

Visiting PHI node: j_141 = PHI <0(471), j_1067(475)>
PHI node j_141 copy-of chain: j_141 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (j_141 < m_idx_112)

Trying to determine truth value of predicate if (j_141 < m_idx_112)
No interesting values produced.
Adding Destination of edge (476 -> 472) to worklist

Adding Destination of edge (476 -> 477) to worklist


Simulating statement (from ssa_edges): if (j_141 == 0)

Simulating block 464
Adding Destination of edge (464 -> 465) to worklist


Simulating block 465

Visiting PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(391), got_video_crypto_61(464)>
	Argument #0: got_video_crypto_64 copy-of chain: got_video_crypto_64 [NOT A COPY]
PHI node got_video_crypto_62 copy-of chain: got_video_crypto_62 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: map_136 = PHI <map_883(391), map_1021(464)>
	Argument #0: map_883 copy-of chain: map_883 [NOT A COPY]
	Argument #1: map_1021 copy-of chain: map_1021 [NOT A COPY]
PHI node map_136 copy-of chain: map_136 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 462

Visiting PHI node: m_idx_109 = PHI <m_idx_110(448), m_idx_110(450), m_idx_110(460), m_idx_110(459), m_idx_1018(461)>
	Argument #0: m_idx_110 copy-of chain: m_idx_110 -> m_idx_111 [COPY]
	Argument #1: m_idx_110 copy-of chain: m_idx_110 -> m_idx_111 [COPY]
PHI node m_idx_109 copy-of chain: m_idx_109 -> m_idx_111 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (462 -> 463) to worklist


Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(447), m_idx_109(462)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(447), m_idx_109(462)>
	Argument #0: m_idx_111 copy-of chain: m_idx_111 [NOT A COPY]
	Argument #1: m_idx_109 copy-of chain: m_idx_109 -> m_idx_111 [COPY]
PHI node m_idx_110 copy-of chain: m_idx_110 -> m_idx_111 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 451

Visiting statement:
if (D.45255_996 == 0B)

No interesting values produced.
Adding Destination of edge (451 -> 454) to worklist

Adding Destination of edge (451 -> 452) to worklist


Simulating block 452

Visiting statement:
if (D.47957_1503 == 0)

No interesting values produced.
Adding Destination of edge (452 -> 453) to worklist


Simulating block 453

Simulating block 426

Visiting PHI node: D.47949_1501 = PHI <1(423), 1(424), 0(425)>
PHI node D.47949_1501 copy-of chain: D.47949_1501 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.47949_1501 == 0)

No interesting values produced.
Adding Destination of edge (426 -> 427) to worklist

Adding Destination of edge (426 -> 443) to worklist


Simulating block 427

Visiting statement:
if (D.44822_966 == 0)

No interesting values produced.
Adding Destination of edge (427 -> 428) to worklist

Adding Destination of edge (427 -> 442) to worklist


Simulating block 428

Visiting statement:
if (D.45227_968 != 0B)

No interesting values produced.
Adding Destination of edge (428 -> 429) to worklist

Adding Destination of edge (428 -> 438) to worklist


Simulating block 429

Visiting statement:
if (D.49747_1610 == 0)

No interesting values produced.
Adding Destination of edge (429 -> 439) to worklist

Adding Destination of edge (429 -> 430) to worklist


Simulating block 430

Visiting statement:
if (D.49748_1611 == 0)

No interesting values produced.
Adding Destination of edge (430 -> 431) to worklist


Simulating block 431

Visiting statement:
if (D.49749_1612 == 0)

No interesting values produced.
Adding Destination of edge (431 -> 432) to worklist


Simulating block 432

Visiting statement:
if (D.49750_1613 == 0)

No interesting values produced.
Adding Destination of edge (432 -> 433) to worklist


Simulating block 433

Visiting statement:
if (D.49751_1614 == 0)

No interesting values produced.
Adding Destination of edge (433 -> 434) to worklist


Simulating block 434

Visiting statement:
if (D.49752_1615 == 0)

No interesting values produced.
Adding Destination of edge (434 -> 435) to worklist


Simulating block 435

Visiting statement:
if (D.49753_1616 == 0)

No interesting values produced.
Adding Destination of edge (435 -> 436) to worklist


Simulating block 436

Visiting statement:
if (D.49754_1617 != 0)

No interesting values produced.
Adding Destination of edge (436 -> 437) to worklist


Simulating block 437

Visiting statement:
if (D.49755_1618 != 0)

No interesting values produced.

Simulating block 421

Simulating block 178

Simulating block 225

Visiting PHI node: got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
	Argument #0: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #1: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #2: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #3: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #4: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #5: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #7: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
PHI node got_crypto_53 copy-of chain: got_crypto_53 -> got_crypto_52 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 224
Adding Destination of edge (224 -> 225) to worklist


Simulating block 220

Simulating block 221

Visiting PHI node: D.49721_1599 = PHI <1(211), 1(212), 1(213), 1(214), 1(215), 1(216), 1(217), 1(219), 0(220)>
PHI node D.49721_1599 copy-of chain: D.49721_1599 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
D.49721_1648 = D.49721_1599;


Visiting statement:
D.49721_538 = D.49721_1648;


Visiting statement:
if (D.49721_538 == 0)

No interesting values produced.
Adding Destination of edge (221 -> 222) to worklist

Adding Destination of edge (221 -> 224) to worklist


Simulating block 315
Adding Destination of edge (315 -> 324) to worklist


Simulating block 324

Visiting PHI node: j_133 = PHI <0(315), j_736(323)>
PHI node j_133 copy-of chain: j_133 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (j_133 < nm_idx_120)

Trying to determine truth value of predicate if (j_133 < nm_idx_120)
No interesting values produced.
Adding Destination of edge (324 -> 316) to worklist


Simulating block 316

Visiting statement:
if (near_rate_725 == 0)

No interesting values produced.
Adding Destination of edge (316 -> 317) to worklist

Adding Destination of edge (316 -> 318) to worklist


Simulating block 317

Simulating block 325

Visiting PHI node: match_11 = PHI <match_10(314), 1(322), match_10(324)>
	Argument #0: match_10 copy-of chain: match_10 [NOT A COPY]
	Argument #2: match_10 copy-of chain: match_10 [NOT A COPY]
PHI node match_11 copy-of chain: match_11 -> match_10 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_107 = PHI <m_idx_106(314), m_idx_744(322), m_idx_106(324)>
	Argument #0: m_idx_106 copy-of chain: m_idx_106 [NOT A COPY]
	Argument #2: m_idx_106 copy-of chain: m_idx_106 [NOT A COPY]
PHI node m_idx_107 copy-of chain: m_idx_107 -> m_idx_106 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting statement:
if (m_idx_107 != 0)

No interesting values produced.
Adding Destination of edge (325 -> 326) to worklist

Adding Destination of edge (325 -> 350) to worklist


Simulating block 326

Visiting statement:
if (greedy_47 != 0)

No interesting values produced.
Adding Destination of edge (326 -> 327) to worklist

Adding Destination of edge (326 -> 328) to worklist


Simulating block 327

Simulating block 248

Visiting statement:
if (x_49 < 0)

No interesting values produced.
Adding Destination of edge (248 -> 249) to worklist


Simulating block 249

Visiting statement:
if (match_8 != 0)

No interesting values produced.
Adding Destination of edge (249 -> 250) to worklist


Simulating block 250

Visiting statement:
if (maxptime_39 != 0)

No interesting values produced.
Adding Destination of edge (250 -> 251) to worklist

Adding Destination of edge (250 -> 253) to worklist


Simulating block 251

Visiting statement:
if (D.44879_584 != 0)

No interesting values produced.
Adding Destination of edge (251 -> 252) to worklist


Simulating block 252

Simulating block 247

Simulating block 310

Visiting PHI node: match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>
	Argument #0: match_8 copy-of chain: match_8 -> match_16 [COPY]
	Argument #1: match_8 copy-of chain: match_8 -> match_16 [COPY]
	Argument #2: match_8 copy-of chain: match_8 -> match_16 [COPY]
	Argument #3: match_8 copy-of chain: match_8 -> match_16 [COPY]
PHI node match_7 copy-of chain: match_7 -> match_16 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>
	Argument #0: best_te_18 copy-of chain: best_te_18 [NOT A COPY]
	Argument #1: best_te_20 copy-of chain: best_te_20 -> best_te_23 [COPY]
PHI node best_te_19 copy-of chain: best_te_19 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: cng_pt_24 = PHI <cng_pt_25(241), cng_pt_573(247), cng_pt_25(248), cng_pt_25(249), cng_pt_25(309)>
	Argument #0: cng_pt_25 copy-of chain: cng_pt_25 -> cng_pt_27 [COPY]
	Argument #1: cng_pt_573 copy-of chain: cng_pt_573 [NOT A COPY]
PHI node cng_pt_24 copy-of chain: cng_pt_24 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: x_48 = PHI <x_49(241), x_49(247), x_580(248), x_580(249), x_580(309)>
	Argument #0: x_49 copy-of chain: x_49 [NOT A COPY]
	Argument #1: x_49 copy-of chain: x_49 [NOT A COPY]
	Argument #2: x_580 copy-of chain: x_580 [NOT A COPY]
PHI node x_48 copy-of chain: x_48 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>
	Argument #0: codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
	Argument #1: codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
	Argument #2: codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
	Argument #3: codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
PHI node codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_95 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>
	Argument #0: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
	Argument #1: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
	Argument #2: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
	Argument #3: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 -> m_idx_114 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>
	Argument #0: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
	Argument #1: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
	Argument #2: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
	Argument #3: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_122 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (310 -> 311) to worklist


Simulating statement (from ssa_edges): cng_pt_25 = PHI <cng_pt_27(234), cng_pt_24(310)>

Visiting PHI node: cng_pt_25 = PHI <cng_pt_27(234), cng_pt_24(310)>
	Argument #0: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
	Argument #1: cng_pt_24 copy-of chain: cng_pt_24 [NOT A COPY]
PHI node cng_pt_25 copy-of chain: cng_pt_25 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>

Visiting PHI node: cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
	Argument #1: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
	Argument #2: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
	Argument #3: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 -> cng_pt_27 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): best_te_20 = PHI <best_te_23(234), best_te_19(310)>

Visiting PHI node: best_te_20 = PHI <best_te_23(234), best_te_19(310)>
	Argument #0: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
	Argument #1: best_te_19 copy-of chain: best_te_19 [NOT A COPY]
PHI node best_te_20 copy-of chain: best_te_20 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (best_te_20 == 0)

Simulating statement (from ssa_edges): best_te_21 = PHI <best_te_20(361), best_te_20(363), best_te_833(364)>

Visiting PHI node: best_te_21 = PHI <best_te_20(361), best_te_20(363), best_te_833(364)>
PHI node best_te_21 copy-of chain: best_te_21 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>

Visiting PHI node: nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>
	Argument #0: nm_idx_122 copy-of chain: nm_idx_122 [NOT A COPY]
	Argument #1: nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_122 [COPY]
PHI node nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>

Visiting PHI node: m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>
	Argument #0: m_idx_114 copy-of chain: m_idx_114 [NOT A COPY]
	Argument #1: m_idx_103 copy-of chain: m_idx_103 -> m_idx_114 [COPY]
PHI node m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>

Visiting PHI node: codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>
	Argument #0: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
	Argument #1: codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_95 [COPY]
PHI node codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_8 = PHI <match_16(234), match_7(310)>

Visiting PHI node: match_8 = PHI <match_16(234), match_7(310)>
	Argument #0: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #1: match_7 copy-of chain: match_7 -> match_16 [COPY]
PHI node match_8 copy-of chain: match_8 -> match_16 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 472

Visiting statement:
D.45274_1033 = D.45274_1031;


Visiting statement:
D.45274_1035 = D.45274_1031;


Visiting statement:
D.45279_1040 = D.45279_1038;


Visiting statement:
if (j_141 == 0)

No interesting values produced.
Adding Destination of edge (472 -> 473) to worklist

Adding Destination of edge (472 -> 475) to worklist


Simulating block 477

Visiting statement:
if (match_16 == 0)

No interesting values produced.
Adding Destination of edge (477 -> 478) to worklist

Adding Destination of edge (477 -> 479) to worklist


Simulating block 478

Simulating block 463

Visiting PHI node: m_idx_110 = PHI <m_idx_111(447), m_idx_109(462)>
	Argument #0: m_idx_111 copy-of chain: m_idx_111 [NOT A COPY]
	Argument #1: m_idx_109 copy-of chain: m_idx_109 -> m_idx_111 [COPY]
PHI node m_idx_110 copy-of chain: m_idx_110 -> m_idx_111 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 454

Visiting PHI node: D.47956_1504 = PHI <1(451), 1(452), 0(453)>
PHI node D.47956_1504 copy-of chain: D.47956_1504 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.47956_1504 != 0)

No interesting values produced.
Adding Destination of edge (454 -> 456) to worklist

Adding Destination of edge (454 -> 455) to worklist


Simulating block 455

Visiting statement:
if (D.44937_1001 != 0)

No interesting values produced.
Adding Destination of edge (455 -> 458) to worklist


Simulating block 456

Visiting statement:
if (D.45248_1004 <= 95)

No interesting values produced.
Adding Destination of edge (456 -> 457) to worklist


Simulating block 457

Visiting statement:
D.45247_1005 = D.45247_1003;


Visiting statement:
D.45248_1006 = D.45248_1004;

Adding Destination of edge (457 -> 459) to worklist


Simulating block 459

Visiting PHI node: vmatch_138 = PHI <vmatch_1009(457), vmatch_1012(458)>
	Argument #0: vmatch_1009 copy-of chain: vmatch_1009 [NOT A COPY]
PHI node vmatch_138 copy-of chain: vmatch_138 -> vmatch_1009 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (vmatch_138 != 0)

No interesting values produced.
Adding Destination of edge (459 -> 460) to worklist

Adding Destination of edge (459 -> 462) to worklist


Simulating block 460

Visiting statement:
if (D.45262_1013 == D.45263_1014)

Trying to determine truth value of predicate if (D.45262_1013 == D.45263_1014)
No interesting values produced.
Adding Destination of edge (460 -> 461) to worklist


Simulating block 461

Simulating block 443

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
	Argument #0: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #1: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #2: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #3: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #4: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #5: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #7: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #8: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 -> got_video_crypto_59 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 442
Adding Destination of edge (442 -> 443) to worklist


Simulating block 438

Simulating block 439

Visiting PHI node: D.49745_1619 = PHI <1(429), 1(430), 1(431), 1(432), 1(433), 1(434), 1(435), 1(437), 0(438)>
PHI node D.49745_1619 copy-of chain: D.49745_1619 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
D.49745_1654 = D.49745_1619;


Visiting statement:
D.49745_969 = D.49745_1654;


Visiting statement:
if (D.49745_969 == 0)

No interesting values produced.
Adding Destination of edge (439 -> 440) to worklist

Adding Destination of edge (439 -> 442) to worklist


Simulating block 440

Visiting statement:
if (D.44831_973 != 0)

No interesting values produced.
Adding Destination of edge (440 -> 441) to worklist


Simulating block 441
Adding Destination of edge (441 -> 491) to worklist


Simulating block 225

Visiting PHI node: got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
	Argument #0: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #1: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #2: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #3: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #4: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #5: got_crypto_54 copy-of chain: got_crypto_54 -> got_crypto_52 [COPY]
	Argument #6: got_crypto_547 copy-of chain: got_crypto_547 [NOT A COPY]
PHI node got_crypto_53 copy-of chain: got_crypto_53 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>

Visiting PHI node: got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>
	Argument #0: got_crypto_52 copy-of chain: got_crypto_52 [NOT A COPY]
	Argument #1: got_crypto_53 copy-of chain: got_crypto_53 [NOT A COPY]
PHI node got_crypto_54 copy-of chain: got_crypto_54 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>

Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
	Argument #1: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #2: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #3: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 -> got_crypto_56 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 222

Visiting statement:
if (D.44831_542 != 0)

No interesting values produced.
Adding Destination of edge (222 -> 223) to worklist


Simulating block 223

Simulating block 224

Simulating block 318

Visiting PHI node: near_rate_145 = PHI <near_rate_729(317), near_rate_725(316)>
	Argument #0: near_rate_729 copy-of chain: near_rate_729 [NOT A COPY]
	Argument #1: near_rate_725 copy-of chain: near_rate_725 [NOT A COPY]
PHI node near_rate_145 copy-of chain: near_rate_145 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (num_731 != 0)

No interesting values produced.
Adding Destination of edge (318 -> 319) to worklist

Adding Destination of edge (318 -> 320) to worklist


Simulating block 319

Simulating block 350

Visiting PHI node: match_12 = PHI <match_11(325), 1(349)>
	Argument #0: match_11 copy-of chain: match_11 -> match_10 [COPY]
PHI node match_12 copy-of chain: match_12 -> match_10 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (match_12 != 0)

No interesting values produced.
Adding Destination of edge (350 -> 351) to worklist

Adding Destination of edge (350 -> 361) to worklist


Simulating statement (from ssa_edges): match_13 = PHI <match_12(350), match_12(360), 0(359)>

Visiting PHI node: match_13 = PHI <match_12(350), match_12(360), 0(359)>
	Argument #0: match_12 copy-of chain: match_12 -> match_10 [COPY]
PHI node match_13 copy-of chain: match_13 -> match_10 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>

Visiting PHI node: match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
	Argument #1: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #2: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #3: match_16 copy-of chain: match_16 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_16 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 351

Visiting statement:
if (D.45094_819 != 0B)

No interesting values produced.
Adding Destination of edge (351 -> 352) to worklist

Adding Destination of edge (351 -> 356) to worklist


Simulating block 352

Visiting statement:
if (D.47933_1489 != 0)

No interesting values produced.
Adding Destination of edge (352 -> 353) to worklist


Simulating block 353

Visiting statement:
if (D.47932_1490 != 0B)

No interesting values produced.
Adding Destination of edge (353 -> 354) to worklist


Simulating block 354

Visiting statement:
if (D.47931_1491 != 0B)

No interesting values produced.
Adding Destination of edge (354 -> 355) to worklist


Simulating block 355

Visiting statement:
if (D.47930_1492 != 0B)

No interesting values produced.
Adding Destination of edge (355 -> 357) to worklist


Simulating block 328
Adding Destination of edge (328 -> 349) to worklist


Simulating block 349

Visiting PHI node: j_135 = PHI <0(328), j_807(348)>
PHI node j_135 copy-of chain: j_135 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (j_135 < m_idx_107)

Trying to determine truth value of predicate if (j_135 < m_idx_107)
No interesting values produced.
Adding Destination of edge (349 -> 329) to worklist

Adding Destination of edge (349 -> 350) to worklist


Simulating statement (from ssa_edges): if (j_135 == 0)

Simulating block 329

Visiting statement:
D.45034_749 = D.45034_747;


Visiting statement:
D.45034_751 = D.45034_747;


Visiting statement:
D.45039_756 = D.45039_754;


Visiting statement:
if (j_135 == 0)

No interesting values produced.
Adding Destination of edge (329 -> 330) to worklist

Adding Destination of edge (329 -> 332) to worklist


Simulating block 330

Visiting statement:
D.44750_763 = pmap_760;


Visiting statement:
if (D.44605_764 != 0B)

No interesting values produced.
Adding Destination of edge (330 -> 331) to worklist


Simulating block 331

Visiting statement:
D.44605_765 = D.44605_764;


Simulating block 253

Visiting PHI node: codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>
	Argument #0: ptime_35 copy-of chain: ptime_35 [NOT A COPY]
	Argument #1: ptime_35 copy-of chain: ptime_35 [NOT A COPY]
	Argument #2: maxptime_39 copy-of chain: maxptime_39 [NOT A COPY]
PHI node codec_ms_86 copy-of chain: codec_ms_86 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (codec_ms_86 == 0)

No interesting values produced.
Adding Destination of edge (253 -> 254) to worklist

Adding Destination of edge (253 -> 255) to worklist


Simulating statement (from ssa_edges): codec_ms_87 = PHI <codec_ms_86(253), codec_ms_589(254)>

Visiting PHI node: codec_ms_87 = PHI <codec_ms_86(253), codec_ms_589(254)>
	Argument #0: codec_ms_86 copy-of chain: codec_ms_86 [NOT A COPY]
PHI node codec_ms_87 copy-of chain: codec_ms_87 -> codec_ms_86 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): codec_ms_88 = PHI <codec_ms_87(257), codec_ms_87(258), 33(259)>

Visiting PHI node: codec_ms_88 = PHI <codec_ms_87(257), codec_ms_87(258), 33(259)>
PHI node codec_ms_88 copy-of chain: codec_ms_88 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 254

Simulating block 311

Visiting PHI node: match_8 = PHI <match_16(234), match_7(310)>
	Argument #0: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #1: match_7 copy-of chain: match_7 -> match_16 [COPY]
PHI node match_8 copy-of chain: match_8 -> match_16 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>
	Argument #0: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
	Argument #1: codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_95 [COPY]
PHI node codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>
	Argument #0: m_idx_114 copy-of chain: m_idx_114 [NOT A COPY]
	Argument #1: m_idx_103 copy-of chain: m_idx_103 -> m_idx_114 [COPY]
PHI node m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>
	Argument #0: nm_idx_122 copy-of chain: nm_idx_122 [NOT A COPY]
	Argument #1: nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_122 [COPY]
PHI node nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: map_128 = PHI <map_559(234), map_711(310)>
	Argument #0: map_559 copy-of chain: map_559 [NOT A COPY]
	Argument #1: map_711 copy-of chain: map_711 [NOT A COPY]
PHI node map_128 copy-of chain: map_128 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 473

Visiting statement:
D.45286_1045 = pmap_1044;


Visiting statement:
if (D.45287_1046 != 0B)

No interesting values produced.
Adding Destination of edge (473 -> 474) to worklist


Simulating block 474

Visiting statement:
D.45287_1047 = D.45287_1046;


Simulating block 475
Adding Destination of edge (475 -> 476) to worklist


Simulating block 479

Visiting PHI node: match_14 = PHI <match_16(477), 1(478)>
	Argument #0: match_16 copy-of chain: match_16 [NOT A COPY]
PHI node match_14 copy-of chain: match_14 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.45312_1090 != 0B)

No interesting values produced.
Adding Destination of edge (479 -> 480) to worklist

Adding Destination of edge (479 -> 484) to worklist


Simulating statement (from ssa_edges): match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>

Visiting PHI node: match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
	Argument #1: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #2: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #3: match_16 copy-of chain: match_16 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_16 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 480

Visiting statement:
if (D.47964_1506 != 0)

No interesting values produced.
Adding Destination of edge (480 -> 481) to worklist


Simulating block 481

Visiting statement:
if (D.47963_1507 != 0B)

No interesting values produced.
Adding Destination of edge (481 -> 482) to worklist


Simulating block 482

Visiting statement:
if (D.47962_1508 != 0B)

No interesting values produced.
Adding Destination of edge (482 -> 483) to worklist


Simulating block 483

Visiting statement:
if (D.47961_1509 != 0B)

No interesting values produced.
Adding Destination of edge (483 -> 485) to worklist


Simulating block 458
Adding Destination of edge (458 -> 459) to worklist


Simulating block 459

Visiting PHI node: vmatch_138 = PHI <vmatch_1009(457), vmatch_1012(458)>
	Argument #0: vmatch_1009 copy-of chain: vmatch_1009 [NOT A COPY]
	Argument #1: vmatch_1012 copy-of chain: vmatch_1012 [NOT A COPY]
PHI node vmatch_138 copy-of chain: vmatch_138 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 462

Visiting PHI node: m_idx_109 = PHI <m_idx_110(448), m_idx_110(450), m_idx_110(460), m_idx_110(459), m_idx_1018(461)>
	Argument #0: m_idx_110 copy-of chain: m_idx_110 -> m_idx_111 [COPY]
	Argument #1: m_idx_110 copy-of chain: m_idx_110 -> m_idx_111 [COPY]
	Argument #2: m_idx_110 copy-of chain: m_idx_110 -> m_idx_111 [COPY]
	Argument #3: m_idx_110 copy-of chain: m_idx_110 -> m_idx_111 [COPY]
	Argument #4: m_idx_1018 copy-of chain: m_idx_1018 [NOT A COPY]
PHI node m_idx_109 copy-of chain: m_idx_109 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_110 = PHI <m_idx_111(447), m_idx_109(462)>

Visiting PHI node: m_idx_110 = PHI <m_idx_111(447), m_idx_109(462)>
	Argument #0: m_idx_111 copy-of chain: m_idx_111 [NOT A COPY]
	Argument #1: m_idx_109 copy-of chain: m_idx_109 [NOT A COPY]
PHI node m_idx_110 copy-of chain: m_idx_110 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 443

Visiting PHI node: got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
	Argument #0: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #1: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #2: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #3: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #4: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #5: got_video_crypto_61 copy-of chain: got_video_crypto_61 -> got_video_crypto_59 [COPY]
	Argument #6: got_video_crypto_977 copy-of chain: got_video_crypto_977 [NOT A COPY]
PHI node got_video_crypto_60 copy-of chain: got_video_crypto_60 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_video_crypto_61 = PHI <got_video_crypto_59(403), got_video_crypto_60(443)>

Visiting PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(403), got_video_crypto_60(443)>
	Argument #0: got_video_crypto_59 copy-of chain: got_video_crypto_59 [NOT A COPY]
	Argument #1: got_video_crypto_60 copy-of chain: got_video_crypto_60 [NOT A COPY]
PHI node got_video_crypto_61 copy-of chain: got_video_crypto_61 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 442

Simulating block 491

Simulating block 320

Visiting PHI node: timp_134 = PHI <timp_732(319), near_match_726(318)>
	Argument #0: timp_732 copy-of chain: timp_732 [NOT A COPY]
	Argument #1: near_match_726 copy-of chain: near_match_726 [NOT A COPY]
PHI node timp_134 copy-of chain: timp_134 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (maxptime_39 == 0)

No interesting values produced.
Adding Destination of edge (320 -> 322) to worklist

Adding Destination of edge (320 -> 321) to worklist


Simulating block 321

Visiting statement:
if (D.45025_735 <= maxptime_39)

Trying to determine truth value of predicate if (D.45025_735 <= maxptime_39)
No interesting values produced.
Adding Destination of edge (321 -> 323) to worklist


Simulating block 323
Adding Destination of edge (323 -> 324) to worklist


Simulating block 322
Adding Destination of edge (322 -> 325) to worklist


Simulating block 361

Visiting PHI node: match_13 = PHI <match_12(350), match_12(360), 0(359)>
	Argument #0: match_12 copy-of chain: match_12 -> match_10 [COPY]
PHI node match_13 copy-of chain: match_13 -> match_10 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: got_audio_65 = PHI <got_audio_67(350), 1(360), got_audio_67(359)>
	Argument #0: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
PHI node got_audio_65 copy-of chain: got_audio_65 -> got_audio_67 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (best_te_20 == 0)

No interesting values produced.
Adding Destination of edge (361 -> 362) to worklist

Adding Destination of edge (361 -> 365) to worklist


Simulating statement (from ssa_edges): got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>

Visiting PHI node: got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
	Argument #1: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #2: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #3: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 -> got_audio_67 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 362

Visiting statement:
if (D.45107_826 != 0)

No interesting values produced.
Adding Destination of edge (362 -> 364) to worklist

Adding Destination of edge (362 -> 363) to worklist


Simulating block 363

Visiting statement:
if (D.45109_828 != 0)

No interesting values produced.

Simulating block 364

Simulating block 356

Simulating block 357

Visiting PHI node: iftmp.104_1493 = PHI <1(355), 0(356)>
PHI node iftmp.104_1493 copy-of chain: iftmp.104_1493 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (iftmp.104_1493 != 0)

No interesting values produced.
Adding Destination of edge (357 -> 358) to worklist

Adding Destination of edge (357 -> 359) to worklist


Simulating block 358

Simulating block 350

Visiting PHI node: match_12 = PHI <match_11(325), 1(349)>
	Argument #0: match_11 copy-of chain: match_11 -> match_10 [COPY]
PHI node match_12 copy-of chain: match_12 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): match_13 = PHI <match_12(350), match_12(360), 0(359)>

Visiting PHI node: match_13 = PHI <match_12(350), match_12(360), 0(359)>
	Argument #0: match_12 copy-of chain: match_12 [NOT A COPY]
PHI node match_13 copy-of chain: match_13 -> match_12 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>

Visiting PHI node: match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
	Argument #1: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #2: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #3: match_16 copy-of chain: match_16 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 -> match_16 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 332

Visiting statement:
D.45055_774 = D.45055_773;


Visiting statement:
if (D.45056_776 != 0)

No interesting values produced.
Adding Destination of edge (332 -> 333) to worklist

Adding Destination of edge (332 -> 334) to worklist


Simulating block 333

Simulating block 255

Visiting PHI node: codec_ms_87 = PHI <codec_ms_86(253), codec_ms_589(254)>
	Argument #0: codec_ms_86 copy-of chain: codec_ms_86 [NOT A COPY]
	Argument #1: codec_ms_589 copy-of chain: codec_ms_589 [NOT A COPY]
PHI node codec_ms_87 copy-of chain: codec_ms_87 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (csui.173_591 <= 18)

No interesting values produced.
Adding Destination of edge (255 -> 257) to worklist

Adding Destination of edge (255 -> 256) to worklist


Simulating statement (from ssa_edges): codec_ms_88 = PHI <codec_ms_87(257), codec_ms_87(258), 33(259)>

Visiting PHI node: codec_ms_88 = PHI <codec_ms_87(257), codec_ms_87(258), 33(259)>
PHI node codec_ms_88 copy-of chain: codec_ms_88 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 256

Simulating block 476

Simulating block 484

Simulating block 485

Visiting PHI node: iftmp.104_1510 = PHI <1(483), 0(484)>
PHI node iftmp.104_1510 copy-of chain: iftmp.104_1510 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (iftmp.104_1510 != 0)

No interesting values produced.
Adding Destination of edge (485 -> 486) to worklist

Adding Destination of edge (485 -> 487) to worklist


Simulating block 486

Simulating block 324

Simulating block 325

Visiting PHI node: match_11 = PHI <match_10(314), 1(322), match_10(324)>
	Argument #0: match_10 copy-of chain: match_10 [NOT A COPY]
PHI node match_11 copy-of chain: match_11 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_107 = PHI <m_idx_106(314), m_idx_744(322), m_idx_106(324)>
	Argument #0: m_idx_106 copy-of chain: m_idx_106 [NOT A COPY]
	Argument #1: m_idx_744 copy-of chain: m_idx_744 [NOT A COPY]
PHI node m_idx_107 copy-of chain: m_idx_107 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 365

Visiting PHI node: best_te_21 = PHI <best_te_20(361), best_te_20(363), best_te_833(364)>
PHI node best_te_21 copy-of chain: best_te_21 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (best_te_21 != 0)

No interesting values produced.
Adding Destination of edge (365 -> 366) to worklist

Adding Destination of edge (365 -> 371) to worklist


Simulating statement (from ssa_edges): best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>

Visiting PHI node: best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
	Argument #1: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
	Argument #2: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
	Argument #3: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 -> best_te_23 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): D.45110_846 = best_te_21;

Simulating statement (from ssa_edges): te_847 = best_te_21;

Simulating block 366

Visiting statement:
if (D.45114_834 == 1)

No interesting values produced.
Adding Destination of edge (366 -> 367) to worklist

Adding Destination of edge (366 -> 369) to worklist


Simulating block 367

Visiting statement:
if (D.44605_840 != 0B)

No interesting values produced.
Adding Destination of edge (367 -> 368) to worklist

Adding Destination of edge (367 -> 489) to worklist


Simulating block 368

Visiting statement:
D.44605_841 = D.44605_840;


Visiting statement:
D.44857_843 = D.44857_837;


Simulating block 359

Visiting statement:
if (D.45099_823 == 0)

No interesting values produced.
Adding Destination of edge (359 -> 360) to worklist

Adding Destination of edge (359 -> 361) to worklist


Simulating block 360

Simulating block 334

Visiting statement:
if (D.45066_783 != 0B)

No interesting values produced.
Adding Destination of edge (334 -> 335) to worklist

Adding Destination of edge (334 -> 336) to worklist


Simulating block 335

Visiting statement:
D.45066_784 = D.45066_783;


Simulating block 257

Visiting PHI node: map_bit_rate_1480 = PHI <0(255), map_bit_rate_1479(256)>
PHI node map_bit_rate_1480 copy-of chain: map_bit_rate_1480 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (ptime_35 == 0)

No interesting values produced.
Adding Destination of edge (257 -> 258) to worklist

Adding Destination of edge (257 -> 260) to worklist


Simulating statement (from ssa_edges): map_bit_rate_131 = PHI <map_bit_rate_1480(268), map_bit_rate_614(269)>

Visiting PHI node: map_bit_rate_131 = PHI <map_bit_rate_1480(268), map_bit_rate_614(269)>
PHI node map_bit_rate_131 copy-of chain: map_bit_rate_131 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): map_bit_rate_132 = PHI <map_bit_rate_1480(265), map_bit_rate_1480(267), map_bit_rate_131(272), map_bit_rate_131(273), 13332(264), 32001(266)>

Visiting PHI node: map_bit_rate_132 = PHI <map_bit_rate_1480(265), map_bit_rate_1480(267), map_bit_rate_131(272), map_bit_rate_131(273), 13332(264), 32001(266)>
PHI node map_bit_rate_132 copy-of chain: map_bit_rate_132 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 258

Visiting statement:
if (D.44890_594 == 0)

No interesting values produced.
Adding Destination of edge (258 -> 259) to worklist


Simulating block 259

Simulating block 487

Visiting statement:
if (D.45316_1092 == 0)

No interesting values produced.
Adding Destination of edge (487 -> 488) to worklist


Simulating block 371

Visiting statement:
if (D.45124_858 != 0B)

No interesting values produced.
Adding Destination of edge (371 -> 372) to worklist

Adding Destination of edge (371 -> 381) to worklist


Simulating block 369

Visiting statement:
D.45110_846 = best_te_21;


Visiting statement:
te_847 = best_te_21;


Visiting statement:
if (D.44605_851 != 0B)

No interesting values produced.
Adding Destination of edge (369 -> 370) to worklist


Simulating block 370

Visiting statement:
D.44605_852 = D.44605_851;


Visiting statement:
D.45120_854 = D.45120_848;


Visiting statement:
D.45120_857 = D.45120_848;


Simulating block 489

Visiting PHI node: match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
	Argument #1: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #2: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #3: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #4: match_14 copy-of chain: match_14 [NOT A COPY]
PHI node match_15 copy-of chain: match_15 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
	Argument #1: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
	Argument #2: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
	Argument #3: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
	Argument #4: best_te_23 copy-of chain: best_te_23 [NOT A COPY]
	Argument #6: best_te_21 copy-of chain: best_te_21 [NOT A COPY]
PHI node best_te_22 copy-of chain: best_te_22 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
	Argument #1: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
	Argument #2: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
	Argument #3: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
	Argument #4: cng_pt_27 copy-of chain: cng_pt_27 [NOT A COPY]
PHI node cng_pt_26 copy-of chain: cng_pt_26 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
	Argument #1: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #2: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #3: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
	Argument #4: got_crypto_56 copy-of chain: got_crypto_56 [NOT A COPY]
PHI node got_crypto_55 copy-of chain: got_crypto_55 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
	Argument #1: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #2: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #3: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #4: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #6: got_audio_65 copy-of chain: got_audio_65 -> got_audio_67 [COPY]
	Argument #7: got_audio_65 copy-of chain: got_audio_65 -> got_audio_67 [COPY]
	Argument #8: got_audio_65 copy-of chain: got_audio_65 -> got_audio_67 [COPY]
	Argument #9: got_audio_65 copy-of chain: got_audio_65 -> got_audio_67 [COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 -> got_audio_67 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
	Argument #1: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
	Argument #2: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
	Argument #3: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
	Argument #4: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
	Argument #6: codec_ms_93 copy-of chain: codec_ms_93 [NOT A COPY]
PHI node codec_ms_94 copy-of chain: codec_ms_94 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 361

Visiting PHI node: match_13 = PHI <match_12(350), match_12(360), 0(359)>
	Argument #0: match_12 copy-of chain: match_12 [NOT A COPY]
	Argument #1: match_12 copy-of chain: match_12 [NOT A COPY]
PHI node match_13 copy-of chain: match_13 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: got_audio_65 = PHI <got_audio_67(350), 1(360), got_audio_67(359)>
	Argument #0: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
PHI node got_audio_65 copy-of chain: got_audio_65 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>

Visiting PHI node: got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
	Argument #1: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #2: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #3: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #4: got_audio_67 copy-of chain: got_audio_67 [NOT A COPY]
	Argument #6: got_audio_65 copy-of chain: got_audio_65 [NOT A COPY]
PHI node got_audio_66 copy-of chain: got_audio_66 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 336

Visiting PHI node: D.47922_146 = PHI <D.47922_1485(335), 1(334)>
	Argument #0: D.47922_1485 copy-of chain: D.47922_1485 [NOT A COPY]
PHI node D.47922_146 copy-of chain: D.47922_146 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.45070_788 == 0)

No interesting values produced.
Adding Destination of edge (336 -> 337) to worklist

Adding Destination of edge (336 -> 347) to worklist


Simulating statement (from ssa_edges): D.45073_789 = D.47922_146;

Simulating statement (from ssa_edges): D.45073_794 = D.47922_146;

Simulating block 337

Visiting statement:
D.45073_789 = D.47922_146;


Visiting statement:
if (D.45073_789 == 1)

No interesting values produced.
Adding Destination of edge (337 -> 338) to worklist

Adding Destination of edge (337 -> 339) to worklist


Simulating block 338
Adding Destination of edge (338 -> 340) to worklist


Simulating block 340

Visiting statement:
if (D.45079_790 == 0B)

No interesting values produced.
Adding Destination of edge (340 -> 343) to worklist

Adding Destination of edge (340 -> 341) to worklist


Simulating block 341

Visiting statement:
if (D.47926_1486 == 0)

No interesting values produced.
Adding Destination of edge (341 -> 342) to worklist


Simulating block 342

Simulating block 260

Visiting PHI node: codec_ms_88 = PHI <codec_ms_87(257), codec_ms_87(258), 33(259)>
	Argument #0: codec_ms_87 copy-of chain: codec_ms_87 [NOT A COPY]
	Argument #1: codec_ms_87 copy-of chain: codec_ms_87 [NOT A COPY]
PHI node codec_ms_88 copy-of chain: codec_ms_88 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44893_598 == 0B)

No interesting values produced.
Adding Destination of edge (260 -> 263) to worklist

Adding Destination of edge (260 -> 261) to worklist


Simulating statement (from ssa_edges): codec_ms_90 = PHI <codec_ms_88(265), codec_ms_88(267), codec_ms_89(272), codec_ms_89(273), 32(264), 39(266)>

Visiting PHI node: codec_ms_90 = PHI <codec_ms_88(265), codec_ms_88(267), codec_ms_89(272), codec_ms_89(273), 32(264), 39(266)>
PHI node codec_ms_90 copy-of chain: codec_ms_90 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_89 = PHI <codec_ms_88(270), codec_ms_617(271)>

Visiting PHI node: codec_ms_89 = PHI <codec_ms_88(270), codec_ms_617(271)>
PHI node codec_ms_89 copy-of chain: codec_ms_89 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 488
Adding Destination of edge (488 -> 489) to worklist


Simulating block 372

Visiting statement:
if (D.49735_1600 == 0)

No interesting values produced.
Adding Destination of edge (372 -> 382) to worklist

Adding Destination of edge (372 -> 373) to worklist


Simulating block 373

Visiting statement:
if (D.49736_1601 == 0)

No interesting values produced.
Adding Destination of edge (373 -> 374) to worklist


Simulating block 374

Visiting statement:
if (D.49737_1602 == 0)

No interesting values produced.
Adding Destination of edge (374 -> 375) to worklist


Simulating block 375

Visiting statement:
if (D.49738_1603 == 0)

No interesting values produced.
Adding Destination of edge (375 -> 376) to worklist


Simulating block 376

Visiting statement:
if (D.49739_1604 == 0)

No interesting values produced.
Adding Destination of edge (376 -> 377) to worklist


Simulating block 377

Visiting statement:
if (D.49740_1605 == 0)

No interesting values produced.
Adding Destination of edge (377 -> 378) to worklist


Simulating block 378

Visiting statement:
if (D.49741_1606 == 0)

No interesting values produced.
Adding Destination of edge (378 -> 379) to worklist


Simulating block 379

Visiting statement:
if (D.49742_1607 != 0)

No interesting values produced.
Adding Destination of edge (379 -> 380) to worklist


Simulating block 380

Visiting statement:
if (D.49743_1608 == 0)

No interesting values produced.

Simulating block 381

Simulating block 347

Visiting statement:
D.45073_794 = D.47922_146;

Adding Destination of edge (347 -> 348) to worklist


Simulating block 339
Adding Destination of edge (339 -> 340) to worklist


Simulating block 340

Simulating block 343

Visiting PHI node: D.47925_1487 = PHI <1(340), 1(341), 0(342)>
PHI node D.47925_1487 copy-of chain: D.47925_1487 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.47925_1487 == 0)

No interesting values produced.
Adding Destination of edge (343 -> 344) to worklist

Adding Destination of edge (343 -> 346) to worklist


Simulating block 344

Visiting statement:
D.45079_792 = D.45079_790;


Visiting statement:
if (D.45082_793 != 0B)

No interesting values produced.
Adding Destination of edge (344 -> 345) to worklist


Simulating block 345

Simulating block 263

Visiting PHI node: D.47914_1482 = PHI <1(260), 1(261), 0(262)>
PHI node D.47914_1482 copy-of chain: D.47914_1482 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.47914_1482 != 0)

No interesting values produced.
Adding Destination of edge (263 -> 264) to worklist

Adding Destination of edge (263 -> 267) to worklist


Simulating block 261

Visiting statement:
if (D.47915_1481 == 0)

No interesting values produced.
Adding Destination of edge (261 -> 263) to worklist

Adding Destination of edge (261 -> 262) to worklist


Simulating block 262

Simulating block 263

Simulating block 489

Simulating block 382

Visiting PHI node: D.49733_1609 = PHI <1(372), 1(373), 1(374), 1(375), 1(376), 1(377), 1(378), 1(380), 0(381)>
PHI node D.49733_1609 copy-of chain: D.49733_1609 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
D.49733_1651 = D.49733_1609;


Visiting statement:
D.49733_859 = D.49733_1651;


Visiting statement:
if (D.49733_859 == 0)

No interesting values produced.
Adding Destination of edge (382 -> 383) to worklist

Adding Destination of edge (382 -> 384) to worklist


Simulating block 383

Visiting statement:
D.44471_863 = D.44471_861;

Adding Destination of edge (383 -> 489) to worklist


Simulating block 348
Adding Destination of edge (348 -> 349) to worklist


Simulating block 346
Adding Destination of edge (346 -> 348) to worklist


Simulating block 264

Visiting statement:
if (D.44897_601 == 0)

No interesting values produced.
Adding Destination of edge (264 -> 274) to worklist

Adding Destination of edge (264 -> 265) to worklist


Simulating block 267

Visiting statement:
D.44893_609 = D.44893_598;


Visiting statement:
if (D.44905_611 == 0)

No interesting values produced.
Adding Destination of edge (267 -> 268) to worklist


Simulating block 384

Visiting statement:
D.44471_869 = D.44471_867;


Simulating block 489

Simulating block 349

Simulating block 348

Simulating block 274

Visiting PHI node: codec_ms_90 = PHI <codec_ms_88(265), codec_ms_88(267), codec_ms_89(272), codec_ms_89(273), 32(264), 39(266)>
	Argument #1: codec_ms_88 copy-of chain: codec_ms_88 [NOT A COPY]
PHI node codec_ms_90 copy-of chain: codec_ms_90 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: fmtp_remote_codec_rate_99 = PHI <0(265), 0(267), 0(272), fmtp_remote_codec_rate_619(273), 0(264), 0(266)>
PHI node fmtp_remote_codec_rate_99 copy-of chain: fmtp_remote_codec_rate_99 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: map_bit_rate_132 = PHI <map_bit_rate_1480(265), map_bit_rate_1480(267), map_bit_rate_131(272), map_bit_rate_131(273), 13332(264), 32001(266)>
	Argument #1: map_bit_rate_1480 copy-of chain: map_bit_rate_1480 [NOT A COPY]
PHI node map_bit_rate_132 copy-of chain: map_bit_rate_132 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.

Adding Destination of edge (274 -> 308) to worklist


Simulating statement (from ssa_edges): if (D.44947_658 == fmtp_remote_codec_rate_99)

Simulating statement (from ssa_edges): if (fmtp_remote_codec_rate_99 != 0)

Simulating statement (from ssa_edges): remote_codec_rate_96 = PHI <remote_codec_rate_98(282), remote_codec_rate_98(287), fmtp_remote_codec_rate_99(288)>

Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_98(282), remote_codec_rate_98(287), fmtp_remote_codec_rate_99(288)>
PHI node remote_codec_rate_96 copy-of chain: remote_codec_rate_96 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>

Visiting PHI node: codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>
	Argument #0: codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
	Argument #1: codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
	Argument #2: codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
	Argument #3: codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
PHI node codec_ms_91 copy-of chain: codec_ms_91 -> codec_ms_95 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 265

Visiting statement:
D.44889_604 = D.44889_600;


Visiting statement:
if (D.44901_605 == 0)

No interesting values produced.
Adding Destination of edge (265 -> 266) to worklist

Adding Destination of edge (265 -> 274) to worklist


Simulating block 268

Visiting statement:
if (D.44908_612 != 0)

No interesting values produced.
Adding Destination of edge (268 -> 269) to worklist

Adding Destination of edge (268 -> 270) to worklist


Simulating block 269

Visiting statement:
D.44908_613 = D.44908_612;


Simulating block 308

Visiting PHI node: match_5 = PHI <match_8(274), match_4(307)>
	Argument #0: match_8 copy-of chain: match_8 -> match_16 [COPY]
PHI node match_5 copy-of chain: match_5 -> match_16 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: remote_codec_rate_98 = PHI <remote_codec_rate_596(274), remote_codec_rate_97(307)>
	Argument #0: remote_codec_rate_596 copy-of chain: remote_codec_rate_596 [NOT A COPY]
PHI node remote_codec_rate_98 copy-of chain: remote_codec_rate_98 -> remote_codec_rate_596 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>
	Argument #0: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
PHI node m_idx_101 copy-of chain: m_idx_101 -> m_idx_114 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>
	Argument #0: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
PHI node nm_idx_116 copy-of chain: nm_idx_116 -> nm_idx_122 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: i_129 = PHI <0(274), i_710(307)>
PHI node i_129 copy-of chain: i_129 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44999_625 != 0)

No interesting values produced.
Adding Destination of edge (308 -> 275) to worklist

Adding Destination of edge (308 -> 309) to worklist


Simulating statement (from ssa_edges): nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>

Visiting PHI node: nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>
	Argument #0: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
	Argument #1: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
	Argument #2: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
	Argument #3: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 -> nm_idx_122 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>
PHI node nm_idx_115 copy-of chain: nm_idx_115 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_102 = PHI <m_idx_703(306), m_idx_101(308)>

Visiting PHI node: m_idx_102 = PHI <m_idx_703(306), m_idx_101(308)>
PHI node m_idx_102 copy-of chain: m_idx_102 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_703(306)>

Visiting PHI node: m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_703(306)>
PHI node m_idx_100 copy-of chain: m_idx_100 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (remote_codec_rate_98 == codec_rate_632)

Simulating statement (from ssa_edges): remote_codec_rate_96 = PHI <remote_codec_rate_98(282), remote_codec_rate_98(287), fmtp_remote_codec_rate_99(288)>

Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_98(282), remote_codec_rate_98(287), fmtp_remote_codec_rate_99(288)>
PHI node remote_codec_rate_96 copy-of chain: remote_codec_rate_96 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_6 = PHI <match_3(306), match_5(308)>

Visiting PHI node: match_6 = PHI <match_3(306), match_5(308)>
PHI node match_6 copy-of chain: match_6 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>

Visiting PHI node: match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>
PHI node match_4 copy-of chain: match_4 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 266

Simulating statement (from ssa_edges): match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>

Visiting PHI node: match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>
	Argument #0: match_8 copy-of chain: match_8 -> match_16 [COPY]
	Argument #1: match_8 copy-of chain: match_8 -> match_16 [COPY]
	Argument #2: match_8 copy-of chain: match_8 -> match_16 [COPY]
	Argument #3: match_8 copy-of chain: match_8 -> match_16 [COPY]
PHI node match_7 copy-of chain: match_7 -> match_16 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): if (m_idx_102 > 29)

Simulating statement (from ssa_edges): m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>

Visiting PHI node: m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>
	Argument #0: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
	Argument #1: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
	Argument #2: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
	Argument #3: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 -> m_idx_114 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 274

Simulating block 270

Visiting PHI node: map_bit_rate_131 = PHI <map_bit_rate_1480(268), map_bit_rate_614(269)>
	Argument #0: map_bit_rate_1480 copy-of chain: map_bit_rate_1480 [NOT A COPY]
	Argument #1: map_bit_rate_614 copy-of chain: map_bit_rate_614 [NOT A COPY]
PHI node map_bit_rate_131 copy-of chain: map_bit_rate_131 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44911_615 != 0)

No interesting values produced.
Adding Destination of edge (270 -> 271) to worklist

Adding Destination of edge (270 -> 272) to worklist


Simulating block 275

Visiting statement:
if (D.44921_633 != 0)

No interesting values produced.
Adding Destination of edge (275 -> 307) to worklist

Adding Destination of edge (275 -> 276) to worklist


Simulating block 276

Visiting statement:
if (D.44889_642 == 0B)

No interesting values produced.
Adding Destination of edge (276 -> 279) to worklist

Adding Destination of edge (276 -> 277) to worklist


Simulating block 277

Visiting statement:
if (D.47919_1483 == 0)

No interesting values produced.
Adding Destination of edge (277 -> 278) to worklist


Simulating block 278

Simulating block 309

Visiting statement:
if (m_idx_102 > 29)

No interesting values produced.
Adding Destination of edge (309 -> 312) to worklist

Adding Destination of edge (309 -> 310) to worklist


Simulating block 271

Visiting statement:
D.44911_616 = D.44911_615;


Simulating block 272

Visiting PHI node: codec_ms_89 = PHI <codec_ms_88(270), codec_ms_617(271)>
	Argument #0: codec_ms_88 copy-of chain: codec_ms_88 [NOT A COPY]
	Argument #1: codec_ms_617 copy-of chain: codec_ms_617 [NOT A COPY]
PHI node codec_ms_89 copy-of chain: codec_ms_89 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44914_618 != 0)

No interesting values produced.
Adding Destination of edge (272 -> 273) to worklist

Adding Destination of edge (272 -> 274) to worklist


Simulating block 273

Visiting statement:
fmtp_remote_codec_rate_619 = D.44914_618;


Simulating block 307

Visiting PHI node: match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>
	Argument #0: match_5 copy-of chain: match_5 -> match_16 [COPY]
PHI node match_4 copy-of chain: match_4 -> match_16 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>
	Argument #0: remote_codec_rate_98 copy-of chain: remote_codec_rate_98 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_703(306)>
	Argument #0: m_idx_101 copy-of chain: m_idx_101 -> m_idx_114 [COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 -> m_idx_114 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>
	Argument #0: nm_idx_116 copy-of chain: nm_idx_116 -> nm_idx_122 [COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_122 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.

Adding Destination of edge (307 -> 308) to worklist


Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>
	Argument #0: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
	Argument #1: nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_122 [COPY]
PHI node nm_idx_116 copy-of chain: nm_idx_116 -> nm_idx_122 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>

Visiting PHI node: m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>
	Argument #0: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
	Argument #1: m_idx_100 copy-of chain: m_idx_100 -> m_idx_114 [COPY]
PHI node m_idx_101 copy-of chain: m_idx_101 -> m_idx_114 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): remote_codec_rate_98 = PHI <remote_codec_rate_596(274), remote_codec_rate_97(307)>

Visiting PHI node: remote_codec_rate_98 = PHI <remote_codec_rate_596(274), remote_codec_rate_97(307)>
	Argument #0: remote_codec_rate_596 copy-of chain: remote_codec_rate_596 [NOT A COPY]
	Argument #1: remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_98 copy-of chain: remote_codec_rate_98 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_5 = PHI <match_8(274), match_4(307)>

Visiting PHI node: match_5 = PHI <match_8(274), match_4(307)>
	Argument #0: match_8 copy-of chain: match_8 -> match_16 [COPY]
	Argument #1: match_4 copy-of chain: match_4 -> match_16 [COPY]
PHI node match_5 copy-of chain: match_5 -> match_16 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 308

Visiting PHI node: match_5 = PHI <match_8(274), match_4(307)>
	Argument #0: match_8 copy-of chain: match_8 -> match_16 [COPY]
	Argument #1: match_4 copy-of chain: match_4 -> match_16 [COPY]
PHI node match_5 copy-of chain: match_5 -> match_16 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: remote_codec_rate_98 = PHI <remote_codec_rate_596(274), remote_codec_rate_97(307)>
	Argument #0: remote_codec_rate_596 copy-of chain: remote_codec_rate_596 [NOT A COPY]
	Argument #1: remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_98 copy-of chain: remote_codec_rate_98 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>
	Argument #0: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
	Argument #1: m_idx_100 copy-of chain: m_idx_100 -> m_idx_114 [COPY]
PHI node m_idx_101 copy-of chain: m_idx_101 -> m_idx_114 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>
	Argument #0: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
	Argument #1: nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_122 [COPY]
PHI node nm_idx_116 copy-of chain: nm_idx_116 -> nm_idx_122 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 279

Visiting PHI node: D.47918_1484 = PHI <1(276), 1(277), 0(278)>
PHI node D.47918_1484 copy-of chain: D.47918_1484 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.47918_1484 != 0)

No interesting values produced.
Adding Destination of edge (279 -> 281) to worklist

Adding Destination of edge (279 -> 280) to worklist


Simulating block 280

Visiting statement:
if (D.44937_647 != 0)

No interesting values produced.
Adding Destination of edge (280 -> 283) to worklist


Simulating block 312

Simulating block 310

Visiting PHI node: match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>
	Argument #0: match_8 copy-of chain: match_8 -> match_16 [COPY]
	Argument #1: match_8 copy-of chain: match_8 -> match_16 [COPY]
	Argument #2: match_8 copy-of chain: match_8 -> match_16 [COPY]
	Argument #3: match_8 copy-of chain: match_8 -> match_16 [COPY]
	Argument #4: match_6 copy-of chain: match_6 [NOT A COPY]
PHI node match_7 copy-of chain: match_7 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>
	Argument #0: codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
	Argument #1: codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
	Argument #2: codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
	Argument #3: codec_ms_92 copy-of chain: codec_ms_92 -> codec_ms_95 [COPY]
	Argument #4: codec_ms_90 copy-of chain: codec_ms_90 [NOT A COPY]
PHI node codec_ms_91 copy-of chain: codec_ms_91 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>
	Argument #0: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
	Argument #1: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
	Argument #2: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
	Argument #3: m_idx_104 copy-of chain: m_idx_104 -> m_idx_114 [COPY]
	Argument #4: m_idx_102 copy-of chain: m_idx_102 [NOT A COPY]
PHI node m_idx_103 copy-of chain: m_idx_103 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>
	Argument #0: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
	Argument #1: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
	Argument #2: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
	Argument #3: nm_idx_118 copy-of chain: nm_idx_118 -> nm_idx_122 [COPY]
PHI node nm_idx_117 copy-of chain: nm_idx_117 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>

Visiting PHI node: nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>
	Argument #0: nm_idx_122 copy-of chain: nm_idx_122 [NOT A COPY]
	Argument #1: nm_idx_117 copy-of chain: nm_idx_117 [NOT A COPY]
PHI node nm_idx_118 copy-of chain: nm_idx_118 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>

Visiting PHI node: nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>
	Argument #0: nm_idx_118 copy-of chain: nm_idx_118 [NOT A COPY]
	Argument #1: nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_122 [COPY]
PHI node nm_idx_116 copy-of chain: nm_idx_116 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>
	Argument #0: nm_idx_116 copy-of chain: nm_idx_116 [NOT A COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_116 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>

Visiting PHI node: m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>
	Argument #0: m_idx_114 copy-of chain: m_idx_114 [NOT A COPY]
	Argument #1: m_idx_103 copy-of chain: m_idx_103 [NOT A COPY]
PHI node m_idx_104 copy-of chain: m_idx_104 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>

Visiting PHI node: m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>
	Argument #0: m_idx_104 copy-of chain: m_idx_104 [NOT A COPY]
	Argument #1: m_idx_100 copy-of chain: m_idx_100 -> m_idx_114 [COPY]
PHI node m_idx_101 copy-of chain: m_idx_101 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_703(306)>

Visiting PHI node: m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_703(306)>
	Argument #0: m_idx_101 copy-of chain: m_idx_101 [NOT A COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 -> m_idx_101 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>

Visiting PHI node: codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>
	Argument #0: codec_ms_95 copy-of chain: codec_ms_95 [NOT A COPY]
	Argument #1: codec_ms_91 copy-of chain: codec_ms_91 [NOT A COPY]
PHI node codec_ms_92 copy-of chain: codec_ms_92 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): match_8 = PHI <match_16(234), match_7(310)>

Visiting PHI node: match_8 = PHI <match_16(234), match_7(310)>
	Argument #0: match_16 copy-of chain: match_16 [NOT A COPY]
	Argument #1: match_7 copy-of chain: match_7 [NOT A COPY]
PHI node match_8 copy-of chain: match_8 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): match_5 = PHI <match_8(274), match_4(307)>

Visiting PHI node: match_5 = PHI <match_8(274), match_4(307)>
	Argument #0: match_8 copy-of chain: match_8 [NOT A COPY]
	Argument #1: match_4 copy-of chain: match_4 -> match_16 [COPY]
PHI node match_5 copy-of chain: match_5 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>

Visiting PHI node: match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>
	Argument #0: match_5 copy-of chain: match_5 [NOT A COPY]
PHI node match_4 copy-of chain: match_4 -> match_5 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating block 274

Simulating block 281

Visiting statement:
if (D.44924_650 <= 95)

No interesting values produced.
Adding Destination of edge (281 -> 282) to worklist


Simulating block 282

Visiting statement:
D.44856_651 = D.44856_649;


Visiting statement:
D.44924_652 = D.44924_650;

Adding Destination of edge (282 -> 289) to worklist


Simulating block 283

Visiting statement:
if (D.44944_657 == 0)

No interesting values produced.
Adding Destination of edge (283 -> 284) to worklist

Adding Destination of edge (283 -> 286) to worklist


Simulating block 284

Visiting statement:
if (remote_codec_rate_98 == codec_rate_632)

Trying to determine truth value of predicate if (remote_codec_rate_98 == codec_rate_632)
No interesting values produced.
Adding Destination of edge (284 -> 287) to worklist

Adding Destination of edge (284 -> 285) to worklist


Simulating block 285

Visiting statement:
if (D.44947_658 == fmtp_remote_codec_rate_99)

Trying to determine truth value of predicate if (D.44947_658 == fmtp_remote_codec_rate_99)
No interesting values produced.

Simulating block 289

Visiting PHI node: match_1 = PHI <match_655(282), match_661(287), match_661(288)>
	Argument #0: match_655 copy-of chain: match_655 [NOT A COPY]
PHI node match_1 copy-of chain: match_1 -> match_655 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_98(282), remote_codec_rate_98(287), fmtp_remote_codec_rate_99(288)>
	Argument #0: remote_codec_rate_98 copy-of chain: remote_codec_rate_98 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_96 copy-of chain: remote_codec_rate_96 -> remote_codec_rate_596 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Visiting statement:
if (D.44952_665 != 0)

No interesting values produced.
Adding Destination of edge (289 -> 290) to worklist

Adding Destination of edge (289 -> 294) to worklist


Simulating statement (from ssa_edges): if (remote_codec_rate_96 != codec_rate_632)

Simulating statement (from ssa_edges): remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>
	Argument #0: remote_codec_rate_98 copy-of chain: remote_codec_rate_98 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): match_2 = PHI <match_1(289), match_1(290), match_1(291), match_1(292), 0(293)>

Visiting PHI node: match_2 = PHI <match_1(289), match_1(290), match_1(291), match_1(292), 0(293)>
	Argument #0: match_1 copy-of chain: match_1 -> match_655 [COPY]
PHI node match_2 copy-of chain: match_2 -> match_655 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): match_3 = PHI <match_2(294), match_2(295), match_2(297), 0(298)>

Visiting PHI node: match_3 = PHI <match_2(294), match_2(295), match_2(297), 0(298)>
PHI node match_3 copy-of chain: match_3 [UNDEFINED]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 290

Visiting statement:
if (D.44957_668 != 0)

No interesting values produced.
Adding Destination of edge (290 -> 291) to worklist


Simulating block 291

Visiting statement:
D.44889_669 = D.44889_642;


Visiting statement:
if (D.44960_670 != 0)

No interesting values produced.
Adding Destination of edge (291 -> 292) to worklist


Simulating block 292

Visiting statement:
D.44889_671 = D.44889_642;


Visiting statement:
if (D.44963_672 != 0)

No interesting values produced.
Adding Destination of edge (292 -> 293) to worklist


Simulating block 293

Simulating block 286

Simulating block 287

Visiting PHI node: iftmp.93_144 = PHI <1(285), 0(286), 1(284)>
PHI node iftmp.93_144 copy-of chain: iftmp.93_144 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (fmtp_remote_codec_rate_99 != 0)

No interesting values produced.
Adding Destination of edge (287 -> 288) to worklist

Adding Destination of edge (287 -> 289) to worklist


Simulating block 288

Simulating block 294

Visiting PHI node: match_2 = PHI <match_1(289), match_1(290), match_1(291), match_1(292), 0(293)>
	Argument #0: match_1 copy-of chain: match_1 -> match_655 [COPY]
	Argument #1: match_1 copy-of chain: match_1 -> match_655 [COPY]
	Argument #2: match_1 copy-of chain: match_1 -> match_655 [COPY]
	Argument #3: match_1 copy-of chain: match_1 -> match_655 [COPY]
PHI node match_2 copy-of chain: match_2 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (D.44969_676 != 0)

No interesting values produced.
Adding Destination of edge (294 -> 295) to worklist

Adding Destination of edge (294 -> 299) to worklist


Simulating statement (from ssa_edges): match_3 = PHI <match_2(294), match_2(295), match_2(297), 0(298)>

Visiting PHI node: match_3 = PHI <match_2(294), match_2(295), match_2(297), 0(298)>
	Argument #0: match_2 copy-of chain: match_2 [NOT A COPY]
PHI node match_3 copy-of chain: match_3 -> match_2 [COPY]
Telling the propagator to add SSA edges out of this PHI and continue.


Simulating statement (from ssa_edges): if (match_3 != 0)

Simulating statement (from ssa_edges): match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>

Visiting PHI node: match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>
	Argument #0: match_5 copy-of chain: match_5 [NOT A COPY]
PHI node match_4 copy-of chain: match_4 -> match_5 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 295

Visiting statement:
if (D.44974_679 != 0)

No interesting values produced.
Adding Destination of edge (295 -> 296) to worklist


Simulating block 296

Visiting statement:
D.44889_680 = D.44889_642;


Visiting statement:
if (D.44977_681 == 0)

No interesting values produced.
Adding Destination of edge (296 -> 298) to worklist

Adding Destination of edge (296 -> 297) to worklist


Simulating block 297

Visiting statement:
D.44889_682 = D.44889_642;


Visiting statement:
if (D.44979_683 == 0)

No interesting values produced.

Simulating block 298

Simulating block 289

Visiting PHI node: match_1 = PHI <match_655(282), match_661(287), match_661(288)>
	Argument #0: match_655 copy-of chain: match_655 [NOT A COPY]
	Argument #1: match_661 copy-of chain: match_661 [NOT A COPY]
PHI node match_1 copy-of chain: match_1 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_98(282), remote_codec_rate_98(287), fmtp_remote_codec_rate_99(288)>
	Argument #0: remote_codec_rate_98 copy-of chain: remote_codec_rate_98 -> remote_codec_rate_596 [COPY]
	Argument #1: remote_codec_rate_98 copy-of chain: remote_codec_rate_98 -> remote_codec_rate_596 [COPY]
	Argument #2: fmtp_remote_codec_rate_99 copy-of chain: fmtp_remote_codec_rate_99 [NOT A COPY]
PHI node remote_codec_rate_96 copy-of chain: remote_codec_rate_96 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating statement (from ssa_edges): if (remote_codec_rate_96 != codec_rate_632)

Simulating statement (from ssa_edges): remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>
	Argument #0: remote_codec_rate_98 copy-of chain: remote_codec_rate_98 -> remote_codec_rate_596 [COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 -> remote_codec_rate_596 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating block 299

Visiting PHI node: match_3 = PHI <match_2(294), match_2(295), match_2(297), 0(298)>
	Argument #0: match_2 copy-of chain: match_2 [NOT A COPY]
	Argument #1: match_2 copy-of chain: match_2 [NOT A COPY]
	Argument #2: match_2 copy-of chain: match_2 [NOT A COPY]
PHI node match_3 copy-of chain: match_3 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting statement:
if (match_3 != 0)

No interesting values produced.
Adding Destination of edge (299 -> 300) to worklist

Adding Destination of edge (299 -> 307) to worklist


Simulating statement (from ssa_edges): match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>

Visiting PHI node: match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>
	Argument #0: match_5 copy-of chain: match_5 [NOT A COPY]
	Argument #1: match_3 copy-of chain: match_3 [NOT A COPY]
PHI node match_4 copy-of chain: match_4 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 300

Visiting statement:
if (scrooge_80 != 0)

No interesting values produced.
Adding Destination of edge (300 -> 301) to worklist

Adding Destination of edge (300 -> 302) to worklist


Simulating block 301
Adding Destination of edge (301 -> 306) to worklist


Simulating block 306

Visiting statement:
if (m_idx_703 > 29)

No interesting values produced.
Adding Destination of edge (306 -> 309) to worklist


Simulating block 309

Simulating block 307

Visiting PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>
	Argument #0: remote_codec_rate_98 copy-of chain: remote_codec_rate_98 -> remote_codec_rate_596 [COPY]
	Argument #1: remote_codec_rate_96 copy-of chain: remote_codec_rate_96 [NOT A COPY]
PHI node remote_codec_rate_97 copy-of chain: remote_codec_rate_97 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_703(306)>
	Argument #0: m_idx_101 copy-of chain: m_idx_101 [NOT A COPY]
	Argument #1: m_idx_101 copy-of chain: m_idx_101 [NOT A COPY]
	Argument #3: m_idx_703 copy-of chain: m_idx_703 [NOT A COPY]
PHI node m_idx_100 copy-of chain: m_idx_100 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>
	Argument #0: nm_idx_116 copy-of chain: nm_idx_116 [NOT A COPY]
	Argument #1: nm_idx_116 copy-of chain: nm_idx_116 [NOT A COPY]
	Argument #3: nm_idx_116 copy-of chain: nm_idx_116 [NOT A COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 -> nm_idx_116 [COPY]
Telling the propagator to do nothing with SSA edges and keep iterating.


Simulating statement (from ssa_edges): remote_codec_rate_98 = PHI <remote_codec_rate_596(274), remote_codec_rate_97(307)>

Visiting PHI node: remote_codec_rate_98 = PHI <remote_codec_rate_596(274), remote_codec_rate_97(307)>
	Argument #0: remote_codec_rate_596 copy-of chain: remote_codec_rate_596 [NOT A COPY]
	Argument #1: remote_codec_rate_97 copy-of chain: remote_codec_rate_97 [NOT A COPY]
PHI node remote_codec_rate_98 copy-of chain: remote_codec_rate_98 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Simulating block 302

Visiting statement:
if (D.44991_691 != 0)

No interesting values produced.
Adding Destination of edge (302 -> 303) to worklist

Adding Destination of edge (302 -> 304) to worklist


Simulating block 303

Visiting statement:
if (D.44993_692 != D.44929_693)

Trying to determine truth value of predicate if (D.44993_692 != D.44929_693)
No interesting values produced.
Adding Destination of edge (303 -> 305) to worklist


Simulating block 304

Visiting statement:
if (remote_codec_rate_96 != codec_rate_632)

Trying to determine truth value of predicate if (remote_codec_rate_96 != codec_rate_632)
No interesting values produced.
Adding Destination of edge (304 -> 306) to worklist


Simulating block 305
Adding Destination of edge (305 -> 307) to worklist


Simulating block 306

Simulating block 307

Visiting PHI node: nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>
	Argument #0: nm_idx_116 copy-of chain: nm_idx_116 [NOT A COPY]
	Argument #1: nm_idx_116 copy-of chain: nm_idx_116 [NOT A COPY]
	Argument #2: nm_idx_701 copy-of chain: nm_idx_701 [NOT A COPY]
PHI node nm_idx_115 copy-of chain: nm_idx_115 [NOT A COPY]
Telling the propagator to add SSA edges out of this PHI and never visit again.


Substituting values and folding statements

Folding statement: if (session_161(D) == 0B)
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => 0
Not folded
Folding statement: # DEBUG remote_codec_rate => 0
Not folded
Folding statement: # DEBUG codec_ms => 0
Not folded
Folding statement: near_matches = {};
Not folded
Folding statement: matches = {};
Not folded
Folding statement: # DEBUG near_map => 0B
Not folded
Folding statement: # DEBUG mmap => 0B
Not folded
Folding statement: # DEBUG near_match => 0B
Not folded
Folding statement: # DEBUG mimp => 0B
Not folded
Folding statement: # DEBUG near_rate => 0
Not folded
Folding statement: # DEBUG reneg => 1
Not folded
Folding statement: # DEBUG parser => 0B
Not folded
Folding statement: # DEBUG scrooge => 0
Not folded
Folding statement: # DEBUG got_webrtc => 0
Not folded
Folding statement: # DEBUG got_udptl => 0
Not folded
Folding statement: # DEBUG got_savp => 0
Not folded
Folding statement: # DEBUG got_video_savp => 0
Not folded
Folding statement: # DEBUG got_video_avp => 0
Not folded
Folding statement: # DEBUG got_avp => 0
Not folded
Folding statement: # DEBUG got_audio => 0
Not folded
Folding statement: # DEBUG got_video_crypto => 0
Not folded
Folding statement: # DEBUG got_crypto => 0
Not folded
Folding statement: # DEBUG crypto => 0B
Not folded
Folding statement: # DEBUG channel => channel_162
Not folded
Folding statement: channel_162 = switch_core_session_get_channel (session_161(D));
Not folded
Folding statement: # DEBUG skip => 0
Not folded
Folding statement: # DEBUG x => 0
Not folded
Folding statement: # DEBUG greedy => 0
Not folded
Folding statement: # DEBUG recvonly => 0
Not folded
Folding statement: # DEBUG sendonly => 0
Not folded
Folding statement: # DEBUG dmaxptime => 0
Not folded
Folding statement: # DEBUG maxptime => 0
Not folded
Folding statement: # DEBUG dptime => 0
Not folded
Folding statement: # DEBUG ptime => 0
Not folded
Folding statement: # DEBUG cng_pt => 0
Not folded
Folding statement: # DEBUG te => 0
Not folded
Folding statement: # DEBUG best_te => 0
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);
Not folded
Folding statement: if (smh_186 == 0B)
Not folded
Folding statement: # DEBUG smh => smh_186
Not folded
Folding statement: smh_186 = session_161(D)->media_handle;
Not folded
Folding statement: if (parser_196 == 0B)
Not folded
Folding statement: # DEBUG parser => parser_196
Not folded
Folding statement: parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
Not folded
Folding statement: D.44473_195 = (int) D.44472_194;
Not folded
Folding statement: D.44472_194 = strlen (r_sdp_193(D));
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_192
Not folded
Folding statement: total_codecs_192 = D.44471_191->num_codecs;
Not folded
Folding statement: D.44471_191 = smh_186->mparams;
Not folded
Folding statement: # DEBUG codec_array => codec_array_190
Not folded
Folding statement: codec_array_190 = &smh_186->codecs;
Not folded
Folding statement: # DEBUG v_engine => D#14
Not folded
Folding statement: # DEBUG D#14 => &smh_186->engines[1]
Not folded
Folding statement: # DEBUG a_engine => D#15
Not folded
Folding statement: # DEBUG D#15 => &smh_186->engines
Not folded
Folding statement: if (sdp_198 == 0B)
Not folded
Folding statement: # DEBUG sdp => sdp_198
Not folded
Folding statement: sdp_198 = sdp_session (parser_196);
Not folded
Folding statement: sdp_parser_free (parser_196);
Not folded
Folding statement: if (D.44478_200 != 0)
Not folded
Folding statement: D.44478_200 = dtls_ok (session_161(D));
Not folded
Folding statement: if (tmp_203 != 0B)
Not folded
Folding statement: # DEBUG tmp => tmp_203
Not folded
Folding statement: tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
Not folded
Folding statement: D.44482_202 = D.44481_201->channel;
Not folded
Folding statement: D.44481_201 = smh_186->session;
Not folded
Folding statement: if (tmp_203 != 0B)
Not folded
Folding statement: # DEBUG expr => tmp_203
Not folded
Folding statement: if (D.49675_1550 == 0)
Not folded
Folding statement: D.49675_1550 = strcasecmp (tmp_203, "no");
Not folded
Folding statement: if (D.49676_1551 == 0)
Not folded
Folding statement: D.49676_1551 = strcasecmp (tmp_203, "off");
Not folded
Folding statement: if (D.49677_1552 == 0)
Not folded
Folding statement: D.49677_1552 = strcasecmp (tmp_203, "false");
Not folded
Folding statement: if (D.49678_1553 == 0)
Not folded
Folding statement: D.49678_1553 = strcasecmp (tmp_203, "f");
Not folded
Folding statement: if (D.49679_1554 == 0)
Not folded
Folding statement: D.49679_1554 = strcasecmp (tmp_203, "disabled");
Not folded
Folding statement: if (D.49680_1555 == 0)
Not folded
Folding statement: D.49680_1555 = strcasecmp (tmp_203, "inactive");
Not folded
Folding statement: if (D.49681_1556 == 0)
Not folded
Folding statement: D.49681_1556 = strcasecmp (tmp_203, "disallow");
Not folded
Folding statement: if (D.49682_1557 != 0)
Not folded
Folding statement: D.49682_1557 = switch_is_number (tmp_203);
Not folded
Folding statement: if (D.49683_1558 == 0)
Not folded
Folding statement: D.49683_1558 = strtol (tmp_203, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => tmp_203
Not folded
Folding PHI node: .MEM_1620 = PHI <.MEM_1180(10), .MEM_1634(18), .MEM_1635(19)>
No folding possible
Folding PHI node: D.49673_1559 = PHI <1(11), 1(12), 1(13), 1(14), 1(15), 1(16), 1(17), 1(19), 0(20)>
No folding possible
Folding PHI node: .MEM_1621 = PHI <.MEM_1180(11), .MEM_1180(12), .MEM_1180(13), .MEM_1180(14), .MEM_1180(15), .MEM_1180(16), .MEM_1180(17), .MEM_1635(19), .MEM_1620(20)>
No folding possible
Folding statement: if (D.49673_204 != 0)
Folded into: if (D.49673_1559 != 0)

Removing dead stmt D.49673_204 = D.49673_1559;

Removing dead stmt D.49673_1636 = D.49673_1559;

Folding statement: switch_channel_clear_flag (D.44482_208, 109);
Not folded
Folding statement: D.44482_208 = D.44481_207->channel;
Not folded
Folding statement: D.44481_207 = smh_186->session;
Not folded
Folding statement: switch_channel_clear_flag (D.44482_206, 111);
Not folded
Folding statement: D.44482_206 = D.44481_205->channel;
Not folded
Folding statement: D.44481_205 = smh_186->session;
Not folded
Folding PHI node: .MEM_1096 = PHI <.MEM_1179(8), .MEM_1180(9), .MEM_1621(21), .MEM_1183(22)>
No folding possible
Folding statement: # DEBUG pmap => pmap_1457
Not folded
Folding statement: pmap_1457 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;
Not folded
Folding statement: # DEBUG engine => D#15
Not folded
Folding statement: switch_core_session_parse_crypto_prefs (session_161(D));
Not folded
Folding statement: # DEBUG pmap => pmap_1459
Not folded
Folding statement: pmap_1459 = pmap_1458->next;
Not folded
Folding statement: pmap_1458->current = 0;
Not folded
Folding statement: pmap_1458->negotiated = 0;
Not folded
Folding PHI node: pmap_1458 = PHI <pmap_1457(23), pmap_1459(24)>
No folding possible
Folding PHI node: .MEM_1512 = PHI <.MEM_1184(23), .MEM_1516(24)>
No folding possible
Folding statement: if (pmap_1458 != 0B)
Not folded
Folding statement: # DEBUG pmap => pmap_1458
Not folded
Folding statement: if (D.47871_1460 != 0)
Not folded
Folding statement: D.47871_1460 = pmap_1458->allocated;
Not folded
Folding statement: # DEBUG pmap => pmap_1461
Not folded
Folding statement: pmap_1461 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
Not folded
Folding statement: # DEBUG engine => D#14
Not folded
Folding statement: # DEBUG pmap => pmap_1463
Not folded
Folding statement: pmap_1463 = pmap_1462->next;
Not folded
Folding statement: pmap_1462->current = 0;
Not folded
Folding statement: pmap_1462->negotiated = 0;
Not folded
Folding PHI node: pmap_1462 = PHI <pmap_1461(27), pmap_1463(28)>
No folding possible
Folding PHI node: .MEM_1513 = PHI <.MEM_1512(27), .MEM_1518(28)>
No folding possible
Folding statement: if (pmap_1462 != 0B)
Not folded
Folding statement: # DEBUG pmap => pmap_1462
Not folded
Folding statement: if (D.47874_1464 != 0)
Not folded
Folding statement: D.47874_1464 = pmap_1462->allocated;
Not folded
Folding statement: if (proceed_209(D) != 0B)
Not folded
Folding statement: *proceed_209(D) = 1;
Not folded
Folding PHI node: .MEM_1097 = PHI <.MEM_1513(31), .MEM_1187(32)>
No folding possible
Folding statement: if (val_214 != 0B)
Not folded
Folding statement: # DEBUG val => val_214
Not folded
Folding statement: val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
Not folded
Folding statement: # DEBUG scrooge => scrooge_213
Not folded
Folding statement: scrooge_213 = D.44491_212 != 0;
Not folded
Folding statement: D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
Not folded
Folding statement: # DEBUG greedy => greedy_211
Not folded
Folding statement: greedy_211 = D.44490_210 != 0;
Not folded
Folding statement: D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
Not folded
Folding statement: if (D.44494_215 == 0)
Not folded
Folding statement: D.44494_215 = strcasecmp (val_214, "generous");
Not folded
Folding statement: if (D.44498_218 == 0)
Not folded
Folding statement: D.44498_218 = strcasecmp (val_214, "greedy");
Not folded
Folding statement: if (D.44502_221 == 0)
Not folded
Folding statement: D.44502_221 = strcasecmp (val_214, "scrooge");
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);
Not folded
Folding PHI node: greedy_47 = PHI <greedy_211(33), 0(34), 1(35), 1(36), greedy_211(37)>
No folding possible
Folding PHI node: scrooge_80 = PHI <scrooge_213(33), 0(34), 0(35), 1(36), scrooge_213(37)>
No folding possible
Folding PHI node: .MEM_1098 = PHI <.MEM_1190(33), .MEM_1190(34), .MEM_1190(35), .MEM_1190(36), .MEM_1191(37)>
No folding possible
Folding statement: if (D.44509_227 != 0B)
Folded into: if (D.44508_226 != 0B)

Removing dead stmt D.44509_227 = D.44508_226;

Folding statement: smh_186->origin = D.44508_226;
Not folded
Folding statement: D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
Not folded
Folding statement: D.44507_225 = D.44506_224->o_username;
Not folded
Folding statement: D.44506_224 = sdp_198->sdp_origin;
Not folded
Folding statement: # DEBUG greedy => greedy_47
Not folded
Folding statement: # DEBUG scrooge => scrooge_80
Not folded
Folding statement: if (D.44514_231 != 0)
Not folded
Folding statement: D.44514_231 = D.44513_230 & 1;
Not folded
Folding statement: D.44513_230 = (int) D.44512_229;
Not folded
Folding statement: D.44512_229 = D.44471_228->auto_rtp_bugs;
Not folded
Folding statement: D.44471_228 = smh_186->mparams;
Not folded
Folding statement: if (D.44518_234 != 0B)
Not folded
Folding statement: D.44518_234 = strstr (D.44509_233, "CiscoSystemsSIP-GW-UserAgent");
Folded into: D.44518_234 = strstr (D.44508_226, "CiscoSystemsSIP-GW-UserAgent");

Removing dead stmt D.44509_233 = D.44508_226;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
Not folded
Folding statement: D.44522_236 = D.44521_235 | 1;
Not folded
Folding statement: D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
Not folded
Folding PHI node: .MEM_1099 = PHI <.MEM_1193(39), .MEM_1193(40), .MEM_1195(41)>
No folding possible
Folding statement: if (D.44523_239 != 0)
Not folded
Folding statement: D.44523_239 = D.44512_238 & 2;
Not folded
Folding statement: D.44512_238 = D.44471_237->auto_rtp_bugs;
Not folded
Folding statement: D.44471_237 = smh_186->mparams;
Not folded
Folding statement: if (D.44526_241 != 0B)
Not folded
Folding statement: D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
Not folded
Folding statement: D.44509_240 = smh_186->origin;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
Not folded
Folding statement: D.44529_243 = D.44521_242 | 2;
Not folded
Folding statement: D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
Not folded
Folding PHI node: .MEM_1100 = PHI <.MEM_1193(38), .MEM_1099(42), .MEM_1099(43), .MEM_1197(44)>
No folding possible
Folding statement: if (val_245 != 0B)
Not folded
Folding statement: # DEBUG val => val_245
Not folded
Folding statement: val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
Not folded
Folding statement: D.44530_244 = session_161(D)->channel;
Not folded
Folding statement: if (val_245 != 0B)
Not folded
Folding statement: # DEBUG expr => val_245
Not folded
Folding statement: if (D.49687_1560 == 0)
Not folded
Folding statement: D.49687_1560 = strcasecmp (val_245, "yes");
Not folded
Folding statement: if (D.49688_1561 == 0)
Not folded
Folding statement: D.49688_1561 = strcasecmp (val_245, "on");
Not folded
Folding statement: if (D.49689_1562 == 0)
Not folded
Folding statement: D.49689_1562 = strcasecmp (val_245, "true");
Not folded
Folding statement: if (D.49690_1563 == 0)
Not folded
Folding statement: D.49690_1563 = strcasecmp (val_245, "t");
Not folded
Folding statement: if (D.49691_1564 == 0)
Not folded
Folding statement: D.49691_1564 = strcasecmp (val_245, "enabled");
Not folded
Folding statement: if (D.49692_1565 == 0)
Not folded
Folding statement: D.49692_1565 = strcasecmp (val_245, "active");
Not folded
Folding statement: if (D.49693_1566 == 0)
Not folded
Folding statement: D.49693_1566 = strcasecmp (val_245, "allow");
Not folded
Folding statement: if (D.49694_1567 != 0)
Not folded
Folding statement: D.49694_1567 = switch_is_number (val_245);
Not folded
Folding statement: if (D.49695_1568 != 0)
Not folded
Folding statement: D.49695_1568 = strtol (val_245, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => val_245
Not folded
Folding PHI node: .MEM_1622 = PHI <.MEM_1198(46), .MEM_1637(54), .MEM_1638(55)>
No folding possible
Folding PHI node: D.49685_1569 = PHI <1(47), 1(48), 1(49), 1(50), 1(51), 1(52), 1(53), 1(55), 0(56)>
No folding possible
Folding PHI node: .MEM_1623 = PHI <.MEM_1198(47), .MEM_1198(48), .MEM_1198(49), .MEM_1198(50), .MEM_1198(51), .MEM_1198(52), .MEM_1198(53), .MEM_1638(55), .MEM_1622(56)>
No folding possible
Folding statement: if (D.49685_246 != 0)
Folded into: if (D.49685_1569 != 0)

Removing dead stmt D.49685_246 = D.49685_1569;

Removing dead stmt D.49685_1639 = D.49685_1569;

Folding statement: switch_channel_set_flag_value (D.44530_247, 93, 1);
Not folded
Folding statement: D.44530_247 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1101 = PHI <.MEM_1198(45), .MEM_1623(57), .MEM_1200(58)>
No folding possible
Folding statement: if (m_248 != 0B)
Not folded
Folding statement: # DEBUG m => m_248
Not folded
Folding statement: m_248 = sdp_198->sdp_media;
Not folded
Folding statement: if (D.44544_253 != 0)
Not folded
Folding statement: D.44544_253 = D.44542_251 || D.44543_252;
Not folded
Folding statement: D.44543_252 = D.44541_250 == 0;
Not folded
Folding statement: D.44542_251 = D.44541_250 == 2;
Not folded
Folding statement: D.44541_250 = D.44540_249 & 6;
Not folded
Folding statement: D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
Not folded
Folding statement: if (D.44546_254 != 0B)
Not folded
Folding statement: D.44546_254 = m_248->m_connections;
Not folded
Folding statement: if (D.44548_256 != 0B)
Not folded
Folding statement: D.44548_256 = D.44546_255->c_address;
Folded into: D.44548_256 = D.44546_254->c_address;

Removing dead stmt D.44546_255 = D.44546_254;

Folding statement: if (__result_300 == 0)
Not folded
Folding statement: __result_300 = __builtin_strcmp (D.44548_299, "0.0.0.0");
Folded into: __result_300 = __builtin_strcmp (D.44548_256, "0.0.0.0");

Removing dead stmt D.44548_299 = D.44548_256;

Removing dead stmt D.44546_298 = D.44546_254;

Folding statement: # DEBUG __s2_len => 7
Not folded
Folding statement: # DEBUG sendonly => 2
Not folded
Folding PHI node: sendonly_42 = PHI <0(59), 0(61), 0(62), 0(63), 2(64)>
No folding possible
Folding statement: # DEBUG attr => attr_303
Not folded
Folding statement: attr_303 = sdp_198->sdp_attributes;
Not folded
Folding statement: # DEBUG sendonly => sendonly_42
Not folded
Folding statement: if (D.44590_304 == 0B)
Not folded
Folding statement: # DEBUG s => D.44590_304
Not folded
Folding statement: D.44590_304 = attr_29->a_name;
Not folded
Folding statement: if (D.47877_1465 == 0)
Not folded
Folding statement: D.47877_1465 = *D.44590_304;
Not folded
Folding PHI node: D.47876_1466 = PHI <1(66), 1(67), 0(68)>
No folding possible
Folding statement: if (D.47876_1466 != 0)
Not folded
Folding statement: if (D.44594_307 == 0)
Not folded
Folding statement: D.44594_307 = strcasecmp (D.44590_306, "sendonly");
Folded into: D.44594_307 = strcasecmp (D.44590_304, "sendonly");

Removing dead stmt D.44590_306 = D.44590_304;

Folding statement: switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
Not folded
Folding statement: D.44530_309 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG sendonly => 1
Not folded
Folding statement: if (D.44598_311 == 0)
Not folded
Folding statement: D.44598_311 = strcasecmp (D.44590_310, "inactive");
Folded into: D.44598_311 = strcasecmp (D.44590_304, "inactive");

Removing dead stmt D.44590_310 = D.44590_304;

Folding statement: switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
Not folded
Folding statement: D.44530_313 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG sendonly => 1
Not folded
Folding statement: if (D.44602_315 == 0)
Not folded
Folding statement: D.44602_315 = strcasecmp (D.44590_314, "recvonly");
Folded into: D.44602_315 = strcasecmp (D.44590_304, "recvonly");

Removing dead stmt D.44590_314 = D.44590_304;

Folding statement: if (D.44606_319 != 0)
Not folded
Folding statement: D.44606_319 = switch_rtp_ready (D.44605_318);
Not folded
Folding statement: D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: # DEBUG recvonly => 1
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
Not folded
Folding statement: D.44530_316 = session_161(D)->channel;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;
Not folded
Folding statement: switch_rtp_set_max_missed_packets (D.44605_320, 0);
Not folded
Folding statement: D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
Not folded
Folding statement: D.44530_322 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
Not folded
Folding statement: D.44530_321 = session_161(D)->channel;
Not folded
Folding statement: if (sendonly_44 <= 1)
Not folded
Folding statement: if (D.44614_324 == 0)
Not folded
Folding statement: D.44614_324 = strcasecmp (D.44590_323, "sendrecv");
Folded into: D.44614_324 = strcasecmp (D.44590_304, "sendrecv");

Removing dead stmt D.44590_323 = D.44590_304;

Folding statement: if (D.44616_327 == 0)
Not folded
Folding statement: D.44616_327 = strcasecmp (D.44590_326, "ptime");
Folded into: D.44616_327 = strcasecmp (D.44590_304, "ptime");

Removing dead stmt D.44590_326 = D.44590_304;

Folding statement: # DEBUG dptime => NULL
Not folded
Folding statement: dptime_1467 = strtol (D.44619_328, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_328
Not folded
Folding statement: D.44619_328 = attr_29->a_value;
Not folded
Folding statement: if (D.44621_331 == 0)
Not folded
Folding statement: D.44621_331 = strcasecmp (D.44590_330, "maxptime");
Folded into: D.44621_331 = strcasecmp (D.44590_304, "maxptime");

Removing dead stmt D.44590_330 = D.44590_304;

Folding statement: # DEBUG dmaxptime => NULL
Not folded
Folding statement: dmaxptime_1468 = strtol (D.44619_332, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_332
Not folded
Folding statement: D.44619_332 = attr_29->a_value;
Not folded
Folding PHI node: dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
No folding possible
Folding PHI node: dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
No folding possible
Folding PHI node: sendonly_43 = PHI <sendonly_44(69), 1(71), 1(73), sendonly_44(77), 0(79), sendonly_44(81), sendonly_44(82), sendonly_44(83), sendonly_44(76)>
No folding possible
Folding PHI node: recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
No folding possible
Folding PHI node: .MEM_1102 = PHI <.MEM_1103(69), .MEM_1201(71), .MEM_1202(73), .MEM_1209(77), .MEM_1103(79), .MEM_1520(81), .MEM_1103(82), .MEM_1522(83), .MEM_1207(76)>
No folding possible
Folding statement: # DEBUG attr => attr_334
Not folded
Folding statement: attr_334 = attr_29->a_next;
Not folded
Folding statement: # DEBUG dptime => dptime_36
Not folded
Folding statement: # DEBUG dmaxptime => dmaxptime_40
Not folded
Folding statement: # DEBUG sendonly => sendonly_43
Not folded
Folding statement: # DEBUG recvonly => recvonly_45
Not folded
Folding PHI node: attr_29 = PHI <attr_303(65), attr_334(84)>
No folding possible
Folding PHI node: dptime_37 = PHI <0(65), dptime_36(84)>
No folding possible
Folding PHI node: dmaxptime_41 = PHI <0(65), dmaxptime_40(84)>
No folding possible
Folding PHI node: sendonly_44 = PHI <sendonly_42(65), sendonly_43(84)>
No folding possible
Folding PHI node: recvonly_46 = PHI <0(65), recvonly_45(84)>
No folding possible
Folding PHI node: .MEM_1103 = PHI <.MEM_1101(65), .MEM_1102(84)>
No folding possible
Folding statement: if (attr_29 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_29
Not folded
Folding statement: # DEBUG dptime => dptime_37
Not folded
Folding statement: # DEBUG dmaxptime => dmaxptime_41
Not folded
Folding statement: # DEBUG sendonly => sendonly_44
Not folded
Folding statement: # DEBUG recvonly => recvonly_46
Not folded
Folding statement: if (D.44626_337 != 0)
Not folded
Folding statement: D.44626_337 = D.44624_335 && D.44625_336;
Not folded
Folding statement: D.44625_336 = recvonly_46 != 1;
Not folded
Folding statement: D.44624_335 = sendonly_44 != 1;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);
Not folded
Folding statement: D.44530_338 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1104 = PHI <.MEM_1103(86), .MEM_1210(87)>
No folding possible
Folding statement: if (D.44631_339 == 0)
Not folded
Folding statement: D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
Not folded
Folding statement: if (val_341 == 0B)
Not folded
Folding statement: # DEBUG val => val_341
Not folded
Folding statement: val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
Not folded
Folding statement: D.44530_340 = session_161(D)->channel;
Not folded
Folding statement: if (val_341 != 0B)
Not folded
Folding statement: # DEBUG expr => val_341
Not folded
Folding statement: if (D.49699_1570 == 0)
Not folded
Folding statement: D.49699_1570 = strcasecmp (val_341, "yes");
Not folded
Folding statement: if (D.49700_1571 == 0)
Not folded
Folding statement: D.49700_1571 = strcasecmp (val_341, "on");
Not folded
Folding statement: if (D.49701_1572 == 0)
Not folded
Folding statement: D.49701_1572 = strcasecmp (val_341, "true");
Not folded
Folding statement: if (D.49702_1573 == 0)
Not folded
Folding statement: D.49702_1573 = strcasecmp (val_341, "t");
Not folded
Folding statement: if (D.49703_1574 == 0)
Not folded
Folding statement: D.49703_1574 = strcasecmp (val_341, "enabled");
Not folded
Folding statement: if (D.49704_1575 == 0)
Not folded
Folding statement: D.49704_1575 = strcasecmp (val_341, "active");
Not folded
Folding statement: if (D.49705_1576 == 0)
Not folded
Folding statement: D.49705_1576 = strcasecmp (val_341, "allow");
Not folded
Folding statement: if (D.49706_1577 != 0)
Not folded
Folding statement: D.49706_1577 = switch_is_number (val_341);
Not folded
Folding statement: if (D.49707_1578 != 0)
Not folded
Folding statement: D.49707_1578 = strtol (val_341, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => val_341
Not folded
Folding PHI node: .MEM_1624 = PHI <.MEM_1212(90), .MEM_1640(98), .MEM_1641(99)>
No folding possible
Folding PHI node: D.49697_1579 = PHI <1(91), 1(92), 1(93), 1(94), 1(95), 1(96), 1(97), 1(99), 0(100)>
No folding possible
Folding PHI node: .MEM_1625 = PHI <.MEM_1212(91), .MEM_1212(92), .MEM_1212(93), .MEM_1212(94), .MEM_1212(95), .MEM_1212(96), .MEM_1212(97), .MEM_1641(99), .MEM_1624(100)>
No folding possible
Folding statement: if (D.49697_342 == 0)
Folded into: if (D.49697_1579 == 0)

Removing dead stmt D.49697_342 = D.49697_1579;

Removing dead stmt D.49697_1642 = D.49697_1579;

Folding PHI node: .MEM_1105 = PHI <.MEM_1212(89), .MEM_1625(101)>
No folding possible
Folding statement: if (D.44636_344 == 0)
Not folded
Folding statement: D.44636_344 = D.44471_343->hold_laps;
Not folded
Folding statement: D.44471_343 = smh_186->mparams;
Not folded
Folding statement: if (D.44640_348 != 0)
Not folded
Folding statement: D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);
Not folded
Folding statement: D.44471_345->hold_laps = D.44639_347;
Folded into: D.44471_343->hold_laps = D.44639_347;

Folding statement: D.44639_347 = D.44636_346 + 1;
Folded into: D.44639_347 = D.44636_344 + 1;

Removing dead stmt D.44636_346 = D.44636_344;

Removing dead stmt D.44471_345 = D.44471_343;

Folding statement: if (val_351 != 0B)
Not folded
Folding statement: # DEBUG val => val_351
Not folded
Folding statement: val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
Not folded
Folding statement: D.44530_350 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG reneg => reneg_349
Not folded
Folding statement: reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
Not folded
Folding statement: # DEBUG reneg => reneg_352
Not folded
Folding statement: reneg_352 = switch_true (val_351);
Not folded
Folding PHI node: reneg_81 = PHI <1(88), 1(101), 1(102), 1(103), reneg_349(104), reneg_352(105)>
No folding possible
Folding PHI node: .MEM_1106 = PHI <.MEM_1211(88), .MEM_1625(101), .MEM_1105(102), .MEM_1215(103), .MEM_1217(104), .MEM_1218(105)>
No folding possible
Folding statement: if (reneg_81 != 0)
Not folded
Folding statement: # DEBUG reneg => reneg_81
Not folded
Folding statement: if (val_355 != 0B)
Not folded
Folding statement: # DEBUG val => val_355
Not folded
Folding statement: val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
Not folded
Folding statement: D.44530_354 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG reneg => reneg_353
Not folded
Folding statement: reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
Not folded
Folding statement: if (val_355 != 0B)
Not folded
Folding statement: # DEBUG expr => val_355
Not folded
Folding statement: if (D.49711_1580 == 0)
Not folded
Folding statement: D.49711_1580 = strcasecmp (val_355, "yes");
Not folded
Folding statement: if (D.49712_1581 == 0)
Not folded
Folding statement: D.49712_1581 = strcasecmp (val_355, "on");
Not folded
Folding statement: if (D.49713_1582 == 0)
Not folded
Folding statement: D.49713_1582 = strcasecmp (val_355, "true");
Not folded
Folding statement: if (D.49714_1583 == 0)
Not folded
Folding statement: D.49714_1583 = strcasecmp (val_355, "t");
Not folded
Folding statement: if (D.49715_1584 == 0)
Not folded
Folding statement: D.49715_1584 = strcasecmp (val_355, "enabled");
Not folded
Folding statement: if (D.49716_1585 == 0)
Not folded
Folding statement: D.49716_1585 = strcasecmp (val_355, "active");
Not folded
Folding statement: if (D.49717_1586 == 0)
Not folded
Folding statement: D.49717_1586 = strcasecmp (val_355, "allow");
Not folded
Folding statement: if (D.49718_1587 != 0)
Not folded
Folding statement: D.49718_1587 = switch_is_number (val_355);
Not folded
Folding statement: if (D.49719_1588 != 0)
Not folded
Folding statement: D.49719_1588 = strtol (val_355, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => val_355
Not folded
Folding PHI node: .MEM_1626 = PHI <.MEM_1220(108), .MEM_1643(116), .MEM_1644(117)>
No folding possible
Folding PHI node: reneg_1589 = PHI <1(109), 1(110), 1(111), 1(112), 1(113), 1(114), 1(115), 1(117), 0(118)>
No folding possible
Folding PHI node: .MEM_1627 = PHI <.MEM_1220(109), .MEM_1220(110), .MEM_1220(111), .MEM_1220(112), .MEM_1220(113), .MEM_1220(114), .MEM_1220(115), .MEM_1644(117), .MEM_1626(118)>
No folding possible
Folding statement: # DEBUG reneg => NULL
Not folded
Folding statement: reneg_356 = reneg_1589;
Not folded
Removing dead stmt reneg_1645 = reneg_1589;

Folding PHI node: reneg_82 = PHI <reneg_81(106), reneg_353(107), reneg_356(119)>
Folded into: reneg_82 = PHI <reneg_81(106), reneg_353(107), reneg_1589(119)>

Folding PHI node: .MEM_1107 = PHI <.MEM_1106(106), .MEM_1220(107), .MEM_1627(119)>
No folding possible
Folding statement: if (D.44649_357 != 0B)
Not folded
Folding statement: D.44649_357 = session_161(D)->bugs;
Not folded
Folding statement: # DEBUG reneg => reneg_82
Not folded
Folding statement: # DEBUG reneg => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
Not folded
Folding PHI node: reneg_83 = PHI <reneg_82(120), 0(121)>
No folding possible
Folding PHI node: .MEM_1108 = PHI <.MEM_1107(120), .MEM_1222(121)>
No folding possible
Folding statement: if (reneg_83 == 0)
Not folded
Folding statement: # DEBUG reneg => reneg_83
Not folded
Folding statement: if (D.44655_359 != 0)
Not folded
Folding statement: D.44655_359 = smh_186->num_negotiated_codecs;
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_361
Folded into: # DEBUG total_codecs => D.44655_359

Folding statement: total_codecs_361 = D.44655_359;
Not folded
Folding statement: # DEBUG codec_array => codec_array_360
Not folded
Folding statement: codec_array_360 = &smh_186->negotiated_codecs;
Not folded
Folding statement: if (reneg_83 != 0)
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_365
Not folded
Folding statement: total_codecs_365 = D.44471_364->num_codecs;
Not folded
Folding statement: D.44471_364 = smh_186->mparams;
Not folded
Folding statement: # DEBUG codec_array => codec_array_363
Folded into: # DEBUG codec_array => codec_array_190

Folding statement: codec_array_363 = codec_array_190;
Not folded
Folding statement: switch_core_media_prepare_codecs (session_161(D), 0);
Not folded
Folding statement: D.44471_362->num_codecs = 0;
Not folded
Folding statement: D.44471_362 = smh_186->mparams;
Not folded
Folding PHI node: codec_array_84 = PHI <codec_array_360(124), codec_array_190(125), codec_array_363(126)>
Folded into: codec_array_84 = PHI <codec_array_360(124), codec_array_190(125), codec_array_190(126)>

Folding PHI node: total_codecs_85 = PHI <total_codecs_361(124), total_codecs_192(125), total_codecs_365(126)>
Folded into: total_codecs_85 = PHI <D.44655_359(124), total_codecs_192(125), total_codecs_365(126)>

Folding PHI node: .MEM_1109 = PHI <.MEM_1108(124), .MEM_1108(125), .MEM_1224(126)>
No folding possible
Folding statement: if (D.44661_366 != 0B)
Not folded
Folding statement: D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
Not folded
Folding statement: # DEBUG codec_array => codec_array_84
Not folded
Folding statement: # DEBUG total_codecs => total_codecs_85
Not folded
Folding statement: if (D.44663_367 != 0B)
Not folded
Folding statement: D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
Not folded
Folding statement: if (D.44665_368 != 0B)
Not folded
Folding statement: D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
Not folded
Folding PHI node: .MEM_1110 = PHI <.MEM_1225(127), .MEM_1226(128), .MEM_1227(129)>
No folding possible
Folding statement: switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);
Not folded
Folding statement: D.44530_369 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1111 = PHI <.MEM_1227(129), .MEM_1228(130)>
No folding possible
Folding statement: # DEBUG m => m_370
Not folded
Folding statement: m_370 = sdp_198->sdp_media;
Not folded
Folding statement: check_ice (smh_186, 1, sdp_198, 0B);
Not folded
Folding statement: check_ice (smh_186, 0, sdp_198, 0B);
Not folded
Folding statement: switch_core_media_pass_zrtp_hash (session_161(D));
Not folded
Folding statement: switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
Not folded
Folding statement: if (D.44666_373 == 261)
Not folded
Folding statement: D.44666_373 = m_28->m_proto;
Not folded
Folding statement: # DEBUG maxptime => dmaxptime_41
Not folded
Folding statement: # DEBUG ptime => dptime_37
Not folded
Folding statement: switch_core_session_set_ice (session_161(D));
Not folded
Folding statement: # DEBUG got_webrtc => got_webrtc_374
Not folded
Folding statement: got_webrtc_374 = got_webrtc_79 + 1;
Not folded
Folding PHI node: got_webrtc_78 = PHI <got_webrtc_79(132), got_webrtc_374(133)>
No folding possible
Folding PHI node: .MEM_1112 = PHI <.MEM_1169(132), .MEM_1233(133)>
No folding possible
Folding statement: if (D.44669_375 != 0B)
Not folded
Folding statement: D.44669_375 = m_28->m_proto_name;
Not folded
Folding statement: # DEBUG got_webrtc => got_webrtc_78
Not folded
Folding statement: if (D.44672_377 == 0)
Not folded
Folding statement: D.44672_377 = strcasecmp (D.44669_376, "UDP/TLS/RTP/SAVPF");
Folded into: D.44672_377 = strcasecmp (D.44669_375, "UDP/TLS/RTP/SAVPF");

Removing dead stmt D.44669_376 = D.44669_375;

Folding statement: switch_channel_set_flag_value (D.44530_378, 107, 1);
Not folded
Folding statement: D.44530_378 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1113 = PHI <.MEM_1112(134), .MEM_1112(135), .MEM_1234(136)>
No folding possible
Folding statement: if (D.44678_382 != 0)
Not folded
Folding statement: D.44678_382 = D.44676_380 || D.44677_381;
Not folded
Folding statement: D.44677_381 = D.44675_379 == 261;
Not folded
Folding statement: D.44676_380 = D.44675_379 == 257;
Not folded
Folding statement: D.44675_379 = m_28->m_proto;
Not folded
Folding statement: if (D.44681_383 == 2)
Not folded
Folding statement: D.44681_383 = m_28->m_type;
Not folded
Folding statement: # DEBUG got_savp => got_savp_384
Not folded
Folding statement: got_savp_384 = got_savp_75 + 1;
Not folded
Folding statement: if (D.44666_386 == 256)
Folded into: if (D.44675_379 == 256)

Removing dead stmt D.44666_386 = D.44675_379;

Folding statement: if (D.44681_387 == 2)
Not folded
Folding statement: D.44681_387 = m_28->m_type;
Not folded
Folding statement: # DEBUG got_avp => got_avp_388
Not folded
Folding statement: got_avp_388 = got_avp_69 + 1;
Not folded
Folding statement: if (D.44666_390 == 258)
Folded into: if (D.44675_379 == 258)

Removing dead stmt D.44666_390 = D.44675_379;

Folding statement: # DEBUG got_udptl => got_udptl_391
Not folded
Folding statement: got_udptl_391 = got_udptl_77 + 1;
Not folded
Folding PHI node: got_avp_68 = PHI <got_avp_69(138), got_avp_69(141), got_avp_69(143), got_avp_69(144), got_avp_69(139), got_avp_388(142)>
No folding possible
Folding PHI node: got_savp_74 = PHI <got_savp_75(138), got_savp_75(141), got_savp_75(143), got_savp_75(144), got_savp_384(139), got_savp_75(142)>
No folding possible
Folding PHI node: got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>
No folding possible
Folding statement: if (got_udptl_76 != 0)
Not folded
Folding statement: # DEBUG got_avp => got_avp_68
Not folded
Folding statement: # DEBUG got_video_avp => NULL
Not folded
Folding statement: # DEBUG got_video_savp => NULL
Not folded
Folding statement: # DEBUG got_savp => got_savp_74
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_76
Not folded
Folding statement: if (D.44681_392 == 8)
Not folded
Folding statement: D.44681_392 = m_28->m_type;
Not folded
Folding statement: if (D.44697_393 != 0)
Not folded
Folding statement: D.44697_393 = m_28->m_port;
Not folded
Folding statement: if (D.44699_396 != 0)
Not folded
Folding statement: D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
Not folded
Folding statement: D.44530_395 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG t38_options => t38_options_394
Not folded
Folding statement: t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
Not folded
Folding statement: if (D.44703_399 != 0)
Not folded
Folding statement: D.44703_399 = switch_true (D.44702_398);
Not folded
Folding statement: D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
Not folded
Folding statement: D.44530_400 = session_161(D)->channel;
Not folded
Folding statement: if (D.44707_408 != 0)
Not folded
Folding statement: D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
Not folded
Folding statement: D.44530_407 = session_161(D)->channel;
Not folded
Folding statement: # DEBUG pass => pass_406
Not folded
Folding statement: pass_406 = (int) D.44706_405;
Not folded
Folding statement: D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
Not folded
Folding statement: D.44482_404 = D.44481_403->channel;
Not folded
Folding statement: D.44481_403 = smh_186->session;
Not folded
Folding statement: # DEBUG var => var_402
Not folded
Folding statement: var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
Not folded
Folding statement: if (proceed_209(D) != 0B)
Not folded
Folding statement: *proceed_209(D) = 0;
Not folded
Folding PHI node: .MEM_1114 = PHI <.MEM_1242(151), .MEM_1242(152), .MEM_1243(153)>
No folding possible
Folding statement: if (var_402 != 0B)
Not folded
Folding statement: if (pass_409 == 0)
Not folded
Folding statement: # DEBUG pass => pass_409
Not folded
Folding statement: pass_409 = switch_true (var_402);
Not folded
Folding statement: if (D.44716_410 == 0)
Not folded
Folding statement: D.44716_410 = strcasecmp (var_402, "once");
Not folded
Folding statement: # DEBUG pass => 2
Not folded
Folding PHI node: pass_126 = PHI <pass_406(154), pass_409(155), pass_409(156), 2(157)>
No folding possible
Folding PHI node: .MEM_1115 = PHI <.MEM_1114(154), .MEM_1244(155), .MEM_1244(156), .MEM_1244(157)>
No folding possible
Folding statement: if (pass_126 == 2)
Not folded
Folding statement: # DEBUG pass => pass_126
Not folded
Folding statement: if (D.44723_414 != 0)
Not folded
Folding statement: D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
Not folded
Folding statement: D.44482_413 = D.44481_412->channel;
Not folded
Folding statement: D.44481_412 = smh_186->session;
Not folded
Folding PHI node: .MEM_1116 = PHI <.MEM_1115(158), .MEM_1245(159)>
No folding possible
Folding statement: if (D.44724_416 == 0)
Not folded
Folding statement: D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
Not folded
Folding statement: D.44530_415 = session_161(D)->channel;
Not folded
Folding statement: if (D.44726_418 != 0)
Not folded
Folding statement: D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
Not folded
Folding statement: D.44530_417 = session_161(D)->channel;
Not folded
Folding statement: if (D.44728_420 != 0)
Not folded
Folding statement: D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
Not folded
Folding statement: D.44530_419 = session_161(D)->channel;
Not folded
Folding statement: if (D.44730_422 == 0)
Not folded
Folding statement: D.44730_422 = switch_rtp_ready (D.44605_421);
Not folded
Folding statement: D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding PHI node: pass_127 = PHI <pass_126(163), 0(160), 0(159), 0(164), 0(162), 0(161)>
No folding possible
Folding PHI node: .MEM_1118 = PHI <.MEM_1249(163), .MEM_1246(160), .MEM_1245(159), .MEM_1249(164), .MEM_1248(162), .MEM_1247(161)>
No folding possible
Folding statement: if (pass_127 != 0)
Not folded
Folding statement: # DEBUG pass => pass_127
Not folded
Folding statement: if (D.44733_424 == 0)
Not folded
Folding statement: D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
Not folded
Folding statement: if (D.44737_431 == 0)
Not folded
Folding statement: D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
Not folded
Folding statement: tmp = "";
Not folded
Folding statement: # DEBUG remote_port => remote_port_430
Not folded
Folding statement: remote_port_430 = switch_rtp_get_remote_port (D.44605_429);
Not folded
Folding statement: D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: # DEBUG remote_host => remote_host_428
Not folded
Folding statement: remote_host_428 = switch_rtp_get_remote_host (D.44605_427);
Not folded
Folding statement: D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: # DEBUG other_channel => other_channel_426
Not folded
Folding statement: other_channel_426 = switch_core_session_get_channel (other_session.89_425);
Not folded
Folding statement: other_session.89_425 = other_session;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: # DEBUG pass => 0
Not folded
Folding statement: switch_core_session_rwunlock (other_session.89_435);
Not folded
Folding statement: other_session.89_435 = other_session;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
Not folded
Folding statement: D.44741_434 = switch_channel_get_name (other_channel_426);
Not folded
Folding statement: D.44740_433 = switch_channel_get_name (D.44530_432);
Not folded
Folding statement: D.44530_432 = session_161(D)->channel;
Not folded
Folding statement: if (D.44743_440 != 0)
Not folded
Folding statement: D.44743_440 = switch_true (D.44742_439);
Not folded
Folding statement: D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
Not folded
Folding statement: D.44530_438 = session_161(D)->channel;
Not folded
Folding statement: if (D.44747_443 != 0)
Not folded
Folding statement: D.44747_443 = switch_true (D.44746_442);
Not folded
Folding statement: D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
Not folded
Folding statement: D.44530_441 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);
Not folded
Folding PHI node: .MEM_1119 = PHI <.MEM_1261(169), .MEM_1263(170), .MEM_1264(171)>
No folding possible
Folding statement: if (D.44758_451 != 0)
Not folded
Folding statement: D.44758_451 = D.44756_449 && D.44757_450;
Not folded
Folding statement: D.44757_450 = remote_port_430 != 0;
Not folded
Folding statement: D.44756_449 = remote_host_428 != 0B;
Not folded
Folding statement: D.44750_447->remote_sdp_port = D.44753_448;
Not folded
Folding statement: D.44753_448 = t38_options_394->remote_port;
Not folded
Folding statement: D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44750_444->remote_sdp_ip = D.44752_446;
Not folded
Folding statement: D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
Not folded
Folding statement: D.44751_445 = t38_options_394->remote_ip;
Not folded
Folding statement: D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: if (D.39032_454 == 0)
Not folded
Folding statement: D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
Not folded
Folding statement: D.44760_453 = D.44750_452->remote_sdp_ip;
Folded into: D.44760_453 = D.44750_447->remote_sdp_ip;

Removing dead stmt D.44750_452 = D.44750_447;

Folding statement: if (D.44762_456 == remote_port_430)
Folded into: if (remote_port_430 == D.44753_448)

Removing dead stmt D.44762_456 = D.44753_448;

Removing dead stmt D.44750_455 = D.44750_447;

Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
Not folded
Folding statement: D.44764_458 = switch_channel_get_name (D.44530_457);
Not folded
Folding statement: D.44530_457 = session_161(D)->channel;
Not folded
Folding statement: if (D.44768_479 != 0)
Not folded
Folding statement: D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
Not folded
Folding statement: D.44762_478 = D.44750_477->remote_sdp_port;
Folded into: D.44762_478 = D.44750_475->remote_sdp_port;

Removing dead stmt D.44750_477 = D.44750_475;

Folding statement: D.44760_476 = D.44750_475->remote_sdp_ip;
Not folded
Folding statement: D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
Not folded
Folding statement: D.44530_473 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
Not folded
Folding statement: D.44760_472 = D.44750_471->remote_sdp_ip;
Not folded
Folding statement: D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44530_470 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 32, "%d", D.44767_469);
Not folded
Folding statement: D.44767_469 = (int) D.44762_468;
Not folded
Folding statement: D.44762_468 = D.44750_467->remote_sdp_port;
Not folded
Folding statement: D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
Not folded
Folding statement: D.44767_466 = (int) D.44762_465;
Not folded
Folding statement: D.44762_465 = D.44750_464->remote_sdp_port;
Folded into: D.44762_465 = D.44750_462->remote_sdp_port;

Removing dead stmt D.44750_464 = D.44750_462;

Folding statement: D.44760_463 = D.44750_462->remote_sdp_ip;
Not folded
Folding statement: D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44766_461 = (int) remote_port_430;
Not folded
Folding statement: D.44765_460 = switch_channel_get_name (D.44530_459);
Not folded
Folding statement: D.44530_459 = session_161(D)->channel;
Not folded
Folding statement: err = 0B;
Not folded
Folding statement: switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
Not folded
Folding statement: err.90_480 = err;
Not folded
Folding PHI node: .MEM_1120 = PHI <.MEM_1269(175), .MEM_1276(176), .MEM_1278(177)>
No folding possible
Folding statement: switch_core_session_rwunlock (other_session.89_491);
Not folded
Folding statement: other_session.89_491 = other_session;
Not folded
Folding statement: switch_core_session_queue_message (other_session.89_490, msg_487);
Not folded
Folding statement: other_session.89_490 = other_session;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
Not folded
Folding statement: msg_487->string_arg = D.44773_489;
Not folded
Folding statement: D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
Not folded
Folding statement: other_session.89_488 = other_session;
Not folded
Folding statement: msg_487->from = "src/switch_core_media.c";
Not folded
Folding statement: msg_487->message_id = 21;
Not folded
Folding statement: # DEBUG msg => msg_487
Not folded
Folding statement: msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
Not folded
Folding statement: other_session.89_486 = other_session;
Not folded
Folding statement: switch_channel_set_flag_value (D.44772_485, 101, 1);
Not folded
Folding statement: D.44772_485 = other_session.89_484->channel;
Not folded
Folding statement: other_session.89_484 = other_session;
Not folded
Folding statement: switch_channel_set_flag_value (D.44482_483, 101, 1);
Not folded
Folding statement: D.44482_483 = D.44481_482->channel;
Not folded
Folding statement: D.44481_482 = smh_186->session;
Not folded
Folding statement: switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
Not folded
Folding statement: other_session.89_481 = other_session;
Not folded
Folding statement: if (D.44681_493 == 2)
Not folded
Folding statement: D.44681_493 = m_28->m_type;
Not folded
Folding statement: if (D.44779_497 != 0)
Not folded
Folding statement: D.44779_497 = D.44777_495 && D.44778_496;
Not folded
Folding statement: D.44778_496 = got_audio_67 == 0;
Not folded
Folding statement: D.44777_495 = D.44697_494 != 0;
Not folded
Folding statement: D.44697_494 = m_28->m_port;
Not folded
Folding statement: if (D.44781_498 != 0)
Not folded
Folding statement: D.44781_498 = switch_rtp_has_dtls ();
Not folded
Folding statement: if (D.44784_499 != 0)
Not folded
Folding statement: D.44784_499 = dtls_ok (session_161(D));
Not folded
Folding statement: # DEBUG attr => attr_500
Not folded
Folding statement: attr_500 = m_28->m_attributes;
Not folded
Folding statement: if (D.44787_502 == 0)
Not folded
Folding statement: D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
Not folded
Folding statement: D.44590_501 = attr_30->a_name;
Not folded
Folding statement: if (D.44619_503 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_503
Not folded
Folding statement: D.44619_503 = attr_30->a_value;
Not folded
Folding statement: if (D.47887_1469 == 0)
Not folded
Folding statement: D.47887_1469 = *D.44619_503;
Not folded
Folding PHI node: D.47886_1470 = PHI <1(185), 1(186), 0(187)>
No folding possible
Folding statement: if (D.47886_1470 == 0)
Not folded
Folding statement: # DEBUG got_crypto => 1
Not folded
Folding PHI node: got_crypto_50 = PHI <got_crypto_51(184), got_crypto_51(188), 1(189)>
No folding possible
Folding statement: # DEBUG attr => attr_506
Not folded
Folding statement: attr_506 = attr_30->a_next;
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_50
Not folded
Folding PHI node: attr_30 = PHI <attr_500(183), attr_506(190)>
No folding possible
Folding PHI node: got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>
No folding possible
Folding statement: if (attr_30 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_30
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_51
Not folded
Folding PHI node: got_crypto_52 = PHI <got_crypto_56(181), got_crypto_56(182), got_crypto_51(191)>
No folding possible
Folding PHI node: .MEM_1122 = PHI <.MEM_1290(181), .MEM_1291(182), .MEM_1291(191)>
No folding possible
Folding statement: # DEBUG attr => attr_507
Not folded
Folding statement: attr_507 = m_28->m_attributes;
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_52
Not folded
Folding statement: if (D.44795_509 == 0)
Not folded
Folding statement: D.44795_509 = strcasecmp (D.44590_508, "rtcp");
Not folded
Folding statement: D.44590_508 = attr_31->a_name;
Not folded
Folding statement: if (D.44619_510 != 0B)
Not folded
Folding statement: D.44619_510 = attr_31->a_value;
Not folded
Folding statement: if (D.44800_517 == 0B)
Not folded
Folding statement: D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
Not folded
Folding statement: D.44471_516 = smh_186->mparams;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;
Not folded
Folding statement: D.44799_515 = (short unsigned int) D.47890_1471;
Not folded
Folding statement: D.47890_1471 = strtol (D.44619_513, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_513
Not folded
Folding statement: D.44619_513 = attr_31->a_value;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_512, 1);
Folded into: switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_510, 1);

Removing dead stmt D.44619_512 = D.44619_510;

Folding statement: D.44530_511 = session_161(D)->channel;
Not folded
Folding statement: D.44471_518->rtcp_audio_interval_msec = "5000";
Folded into: D.44471_516->rtcp_audio_interval_msec = "5000";

Removing dead stmt D.44471_518 = D.44471_516;

Folding statement: if (D.44805_520 == 0)
Not folded
Folding statement: D.44805_520 = strcasecmp (D.44590_519, "ptime");
Folded into: D.44805_520 = strcasecmp (D.44590_508, "ptime");

Removing dead stmt D.44590_519 = D.44590_508;

Folding statement: if (D.44619_521 != 0B)
Not folded
Folding statement: D.44619_521 = attr_31->a_value;
Not folded
Folding statement: # DEBUG ptime => NULL
Not folded
Folding statement: ptime_1472 = strtol (D.44619_522, 0B, 10);
Folded into: ptime_1472 = strtol (D.44619_521, 0B, 10);

Folding statement: # DEBUG __nptr => D.44619_522
Folded into: # DEBUG __nptr => D.44619_521

Removing dead stmt D.44619_522 = D.44619_521;

Folding statement: if (D.44810_525 == 0)
Not folded
Folding statement: D.44810_525 = strcasecmp (D.44590_524, "maxptime");
Folded into: D.44810_525 = strcasecmp (D.44590_508, "maxptime");

Removing dead stmt D.44590_524 = D.44590_508;

Folding statement: if (D.44619_526 != 0B)
Not folded
Folding statement: D.44619_526 = attr_31->a_value;
Not folded
Folding statement: # DEBUG maxptime => NULL
Not folded
Folding statement: maxptime_1473 = strtol (D.44619_527, 0B, 10);
Folded into: maxptime_1473 = strtol (D.44619_526, 0B, 10);

Folding statement: # DEBUG __nptr => D.44619_527
Folded into: # DEBUG __nptr => D.44619_526

Removing dead stmt D.44619_527 = D.44619_526;

Folding statement: if (got_crypto_54 <= 0)
Not folded
Folding statement: if (D.44815_530 == 0)
Not folded
Folding statement: D.44815_530 = strcasecmp (D.44590_529, "crypto");
Folded into: D.44815_530 = strcasecmp (D.44590_508, "crypto");

Removing dead stmt D.44590_529 = D.44590_508;

Folding statement: if (D.44619_531 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_531
Not folded
Folding statement: D.44619_531 = attr_31->a_value;
Not folded
Folding statement: if (D.47900_1474 == 0)
Not folded
Folding statement: D.47900_1474 = *D.44619_531;
Not folded
Folding PHI node: D.47899_1475 = PHI <1(205), 1(206), 0(207)>
No folding possible
Folding statement: if (D.47899_1475 == 0)
Not folded
Folding statement: if (D.44822_535 == 0)
Not folded
Folding statement: D.44822_535 = D.44821_534 & 4;
Not folded
Folding statement: D.44821_534 = D.44471_533->ndlb;
Not folded
Folding statement: D.44471_533 = smh_186->mparams;
Not folded
Folding statement: if (D.44825_537 != 0B)
Not folded
Folding statement: # DEBUG expr => D.44825_537
Not folded
Folding statement: D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
Not folded
Folding statement: D.44530_536 = session_161(D)->channel;
Not folded
Folding statement: if (D.49723_1590 == 0)
Not folded
Folding statement: D.49723_1590 = strcasecmp (D.44825_537, "yes");
Not folded
Folding statement: if (D.49724_1591 == 0)
Not folded
Folding statement: D.49724_1591 = strcasecmp (D.44825_537, "on");
Not folded
Folding statement: if (D.49725_1592 == 0)
Not folded
Folding statement: D.49725_1592 = strcasecmp (D.44825_537, "true");
Not folded
Folding statement: if (D.49726_1593 == 0)
Not folded
Folding statement: D.49726_1593 = strcasecmp (D.44825_537, "t");
Not folded
Folding statement: if (D.49727_1594 == 0)
Not folded
Folding statement: D.49727_1594 = strcasecmp (D.44825_537, "enabled");
Not folded
Folding statement: if (D.49728_1595 == 0)
Not folded
Folding statement: D.49728_1595 = strcasecmp (D.44825_537, "active");
Not folded
Folding statement: if (D.49729_1596 == 0)
Not folded
Folding statement: D.49729_1596 = strcasecmp (D.44825_537, "allow");
Not folded
Folding statement: if (D.49730_1597 != 0)
Not folded
Folding statement: D.49730_1597 = switch_is_number (D.44825_537);
Not folded
Folding statement: if (D.49731_1598 != 0)
Not folded
Folding statement: D.49731_1598 = strtol (D.44825_537, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44825_537
Not folded
Folding PHI node: .MEM_1628 = PHI <.MEM_1295(210), .MEM_1646(218), .MEM_1647(219)>
No folding possible
Folding PHI node: D.49721_1599 = PHI <1(211), 1(212), 1(213), 1(214), 1(215), 1(216), 1(217), 1(219), 0(220)>
No folding possible
Folding PHI node: .MEM_1629 = PHI <.MEM_1295(211), .MEM_1295(212), .MEM_1295(213), .MEM_1295(214), .MEM_1295(215), .MEM_1295(216), .MEM_1295(217), .MEM_1647(219), .MEM_1628(220)>
No folding possible
Folding statement: if (D.49721_538 == 0)
Folded into: if (D.49721_1599 == 0)

Removing dead stmt D.49721_538 = D.49721_1599;

Removing dead stmt D.49721_1648 = D.49721_1599;

Folding statement: if (D.44831_542 != 0)
Not folded
Folding statement: D.44831_542 = D.44829_540 && D.44830_541;
Not folded
Folding statement: D.44830_541 = got_webrtc_78 == 0;
Not folded
Folding statement: D.44829_540 = D.44666_539 != 257;
Not folded
Folding statement: D.44666_539 = m_28->m_proto;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
Not folded
Folding PHI node: .MEM_1123 = PHI <.MEM_1125(209), .MEM_1629(221), .MEM_1629(222)>
No folding possible
Folding statement: # DEBUG got_crypto => got_crypto_547
Not folded
Folding statement: got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));
Not folded
Folding statement: # DEBUG crypto_tag => NULL
Not folded
Folding statement: crypto_tag_1476 = strtol (crypto_544, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => crypto_544
Not folded
Folding statement: # DEBUG crypto => crypto_544
Not folded
Folding statement: crypto_544 = attr_31->a_value;
Not folded
Folding PHI node: ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>
No folding possible
Folding PHI node: maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
No folding possible
Folding PHI node: got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
No folding possible
Folding PHI node: .MEM_1124 = PHI <.MEM_1294(196), .MEM_1527(199), .MEM_1529(202), .MEM_1125(203), .MEM_1125(204), .MEM_1125(208), .MEM_1298(224), .MEM_1293(195)>
No folding possible
Folding statement: # DEBUG attr => attr_548
Not folded
Folding statement: attr_548 = attr_31->a_next;
Not folded
Folding statement: # DEBUG ptime => ptime_34
Not folded
Folding statement: # DEBUG maxptime => maxptime_38
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_53
Not folded
Folding PHI node: attr_31 = PHI <attr_507(192), attr_548(225)>
No folding possible
Folding PHI node: ptime_35 = PHI <dptime_37(192), ptime_34(225)>
No folding possible
Folding PHI node: maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>
No folding possible
Folding PHI node: got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>
No folding possible
Folding PHI node: .MEM_1125 = PHI <.MEM_1122(192), .MEM_1124(225)>
No folding possible
Folding statement: if (attr_31 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_31
Not folded
Folding statement: # DEBUG ptime => ptime_35
Not folded
Folding statement: # DEBUG maxptime => maxptime_39
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_54
Not folded
Folding statement: if (D.44836_551 != 0)
Not folded
Folding statement: D.44836_551 = D.44834_549 && D.44835_550;
Not folded
Folding statement: D.44835_550 = got_savp_74 != 0;
Not folded
Folding statement: D.44834_549 = got_crypto_54 == -1;
Not folded
Folding statement: if (D.44839_552 == 0)
Not folded
Folding statement: D.44839_552 = got_avp_68 | got_webrtc_78;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
Not folded
Folding statement: if (D.44546_555 != 0B)
Not folded
Folding statement: D.44546_555 = m_28->m_connections;
Not folded
Folding statement: # DEBUG connection => connection_554
Not folded
Folding statement: connection_554 = sdp_198->sdp_connection;
Not folded
Folding statement: # DEBUG connection => connection_556
Folded into: # DEBUG connection => D.44546_555

Folding statement: connection_556 = D.44546_555;
Not folded
Folding PHI node: connection_124 = PHI <connection_554(230), connection_556(231)>
Folded into: connection_124 = PHI <connection_554(230), D.44546_555(231)>

Folding statement: if (connection_124 == 0B)
Not folded
Folding statement: # DEBUG connection => connection_124
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
Not folded
Folding statement: # DEBUG map => map_559
Not folded
Folding statement: map_559 = m_28->m_rtpmaps;
Not folded
Folding statement: # DEBUG x => 0
Not folded
Folding statement: if (rm_encoding_561 == 0B)
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_561
Not folded
Folding statement: rm_encoding_561 = map_128->rm_encoding;
Not folded
Folding statement: codec_fmtp = {};
Not folded
Folding statement: # DEBUG map_bit_rate => 0
Not folded
Folding statement: # DEBUG rm_encoding => ""
Not folded
Folding PHI node: rm_encoding_130 = PHI <rm_encoding_561(235), ""(236)>
No folding possible
Folding statement: if (D.44848_563 == 0)
Not folded
Folding statement: D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_130
Not folded
Folding statement: if (best_te_20 == 0)
Not folded
Folding statement: if (D.44854_564 == D.44855_566)
Not folded
Folding statement: D.44855_566 = D.44750_565->rm_rate;
Not folded
Folding statement: D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44854_564 = map_128->rm_rate;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);
Not folded
Folding statement: D.44857_569 = (int) best_te_568;
Not folded
Folding statement: # DEBUG best_te => best_te_568
Not folded
Folding statement: best_te_568 = (switch_payload_t) D.44856_567;
Not folded
Folding statement: D.44856_567 = map_128->rm_pt;
Not folded
Folding PHI node: best_te_18 = PHI <best_te_20(239), best_te_568(240)>
No folding possible
Folding PHI node: .MEM_1126 = PHI <.MEM_1301(239), .MEM_1302(240)>
No folding possible
Folding statement: # DEBUG best_te => best_te_18
Not folded
Folding statement: if (D.44858_570 == 0)
Not folded
Folding statement: D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
Not folded
Folding statement: if (cng_pt_25 == 0)
Not folded
Folding statement: if (D.44863_571 == 0)
Not folded
Folding statement: D.44863_571 = strcasecmp (rm_encoding_130, "CN");
Not folded
Folding statement: if (D.44605_574 != 0B)
Not folded
Folding statement: D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_573
Not folded
Folding statement: cng_pt_573 = (switch_payload_t) D.44856_572;
Not folded
Folding statement: D.44856_572 = map_128->rm_pt;
Not folded
Folding statement: switch_rtp_set_cng_pt (D.44605_576, D.44869_578);
Not folded
Folding statement: D.44869_578 = D.44471_577->cng_pt;
Not folded
Folding statement: D.44471_577 = smh_186->mparams;
Not folded
Folding statement: D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
Not folded
Folding statement: D.44868_575 = (int) cng_pt_573;
Not folded
Folding PHI node: .MEM_1127 = PHI <.MEM_1303(245), .MEM_1305(246)>
No folding possible
Folding statement: if (x_49 < 0)
Not folded
Folding statement: # DEBUG x => x_580
Not folded
Folding statement: x_580 = x_49 + 1;
Not folded
Folding statement: if (match_8 != 0)
Not folded
Folding statement: if (maxptime_39 != 0)
Not folded
Folding statement: # DEBUG codec_ms => ptime_35
Not folded
Folding statement: if (D.44879_584 != 0)
Not folded
Folding statement: D.44879_584 = D.44877_582 || D.44878_583;
Not folded
Folding statement: D.44878_583 = ptime_35 > maxptime_39;
Not folded
Folding statement: D.44877_582 = ptime_35 == 0;
Not folded
Folding statement: # DEBUG codec_ms => maxptime_39
Not folded
Folding PHI node: codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>
No folding possible
Folding statement: if (codec_ms_86 == 0)
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_86
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_589
Not folded
Folding statement: codec_ms_589 = (int) D.44885_588;
Not folded
Folding statement: D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
Not folded
Folding statement: D.44884_587 = (uint32_t) D.44856_586;
Not folded
Folding statement: D.44856_586 = map_128->rm_pt;
Not folded
Folding PHI node: codec_ms_87 = PHI <codec_ms_86(253), codec_ms_589(254)>
No folding possible
Folding PHI node: .MEM_1128 = PHI <.MEM_1303(253), .MEM_1306(254)>
No folding possible
Folding statement: if (csui.173_591 <= 18)
Not folded
Folding statement: # DEBUG payload => csui.173_591
Not folded
Folding statement: csui.173_591 = (unsigned char) D.44856_590;
Not folded
Folding statement: D.44856_590 = map_128->rm_pt;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_87
Not folded
Folding statement: map_bit_rate_1479 = CSWTCH.174[csui.173_591];
Not folded
Folding statement: <L499>:
Not folded
Folding PHI node: map_bit_rate_1480 = PHI <0(255), map_bit_rate_1479(256)>
No folding possible
Folding statement: if (ptime_35 == 0)
Not folded
Folding statement: # DEBUG map_bit_rate => NULL
Not folded
Folding statement: <L501>:
Not folded
Folding statement: <L500>:
Not folded
Folding statement: if (D.44890_594 == 0)
Not folded
Folding statement: D.44890_594 = strcasecmp (D.44889_593, "g723");
Not folded
Folding statement: D.44889_593 = map_128->rm_encoding;
Not folded
Folding statement: # DEBUG codec_ms => 33
Not folded
Folding PHI node: codec_ms_88 = PHI <codec_ms_87(257), codec_ms_87(258), 33(259)>
No folding possible
Folding statement: if (D.44893_598 == 0B)
Not folded
Folding statement: # DEBUG s => D.44893_598
Not folded
Folding statement: D.44893_598 = map_128->rm_fmtp;
Not folded
Folding statement: memset (&codec_fmtp, 0, 16);
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => 0
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_596
Not folded
Folding statement: remote_codec_rate_596 = map_128->rm_rate;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_88
Not folded
Folding statement: if (D.47915_1481 == 0)
Not folded
Folding statement: D.47915_1481 = *D.44893_598;
Not folded
Folding PHI node: D.47914_1482 = PHI <1(260), 1(261), 0(262)>
No folding possible
Folding statement: if (D.47914_1482 != 0)
Not folded
Folding statement: if (D.44897_601 == 0)
Not folded
Folding statement: D.44897_601 = strcasecmp (D.44889_600, "ilbc");
Not folded
Folding statement: D.44889_600 = map_128->rm_encoding;
Not folded
Folding statement: if (D.44901_605 == 0)
Not folded
Folding statement: D.44901_605 = strcasecmp (D.44889_604, "isac");
Folded into: D.44901_605 = strcasecmp (D.44889_600, "isac");

Removing dead stmt D.44889_604 = D.44889_600;

Folding statement: # DEBUG map_bit_rate => 32001
Not folded
Folding statement: # DEBUG codec_ms => 39
Not folded
Folding statement: if (D.44905_611 == 0)
Not folded
Folding statement: D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_609, D.44854_610, &codec_fmtp);
Folded into: D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_598, D.44854_610, &codec_fmtp);

Folding statement: D.44854_610 = map_128->rm_rate;
Not folded
Removing dead stmt D.44893_609 = D.44893_598;

Folding statement: D.44889_608 = map_128->rm_encoding;
Not folded
Folding statement: if (D.44908_612 != 0)
Not folded
Folding statement: D.44908_612 = codec_fmtp.bits_per_second;
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_614
Not folded
Folding statement: map_bit_rate_614 = (uint32_t) D.44908_613;
Folded into: map_bit_rate_614 = (uint32_t) D.44908_612;

Removing dead stmt D.44908_613 = D.44908_612;

Folding PHI node: map_bit_rate_131 = PHI <map_bit_rate_1480(268), map_bit_rate_614(269)>
No folding possible
Folding statement: if (D.44911_615 != 0)
Not folded
Folding statement: D.44911_615 = codec_fmtp.microseconds_per_packet;
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_131
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_617
Not folded
Folding statement: codec_ms_617 = D.44911_616 / 1000;
Folded into: codec_ms_617 = D.44911_615 / 1000;

Removing dead stmt D.44911_616 = D.44911_615;

Folding PHI node: codec_ms_89 = PHI <codec_ms_88(270), codec_ms_617(271)>
No folding possible
Folding statement: if (D.44914_618 != 0)
Not folded
Folding statement: D.44914_618 = codec_fmtp.actual_samples_per_second;
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_89
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_619
Folded into: # DEBUG fmtp_remote_codec_rate => D.44914_618

Folding statement: fmtp_remote_codec_rate_619 = D.44914_618;
Not folded
Folding PHI node: codec_ms_90 = PHI <codec_ms_88(265), codec_ms_88(267), codec_ms_89(272), codec_ms_89(273), 32(264), 39(266)>
No folding possible
Folding PHI node: fmtp_remote_codec_rate_99 = PHI <0(265), 0(267), 0(272), fmtp_remote_codec_rate_619(273), 0(264), 0(266)>
Folded into: fmtp_remote_codec_rate_99 = PHI <0(265), 0(267), 0(272), D.44914_618(273), 0(264), 0(266)>

Folding PHI node: map_bit_rate_132 = PHI <map_bit_rate_1480(265), map_bit_rate_1480(267), map_bit_rate_131(272), map_bit_rate_131(273), 13332(264), 32001(266)>
No folding possible
Folding PHI node: .MEM_1129 = PHI <.MEM_1307(265), .MEM_1308(267), .MEM_1308(272), .MEM_1308(273), .MEM_1307(264), .MEM_1307(266)>
No folding possible
Folding statement: # DEBUG i => 0
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_90
Not folded
Folding statement: # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99
Not folded
Folding statement: # DEBUG map_bit_rate => map_bit_rate_132
Not folded
Folding statement: if (D.44921_633 != 0)
Not folded
Folding statement: D.44921_633 = imp_629->codec_type;
Not folded
Folding statement: # DEBUG codec_rate => codec_rate_632
Not folded
Folding statement: codec_rate_632 = imp_629->samples_per_second;
Not folded
Folding statement: # DEBUG bit_rate => bit_rate_631
Not folded
Folding statement: bit_rate_631 = (uint32_t) D.44920_630;
Not folded
Folding statement: D.44920_630 = imp_629->bits_per_second;
Not folded
Folding statement: # DEBUG imp => imp_629
Not folded
Folding statement: imp_629 = *D.44919_628;
Not folded
Folding statement: D.44919_628 = codec_array_84 + D.44918_627;
Not folded
Folding statement: D.44918_627 = i.91_626 * 4;
Not folded
Folding statement: i.91_626 = (unsigned int) i_129;
Not folded
Folding statement: if (D.44889_642 == 0B)
Not folded
Folding statement: # DEBUG s => D.44889_642
Not folded
Folding statement: D.44889_642 = map_128->rm_encoding;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
Not folded
Folding statement: D.44930_641 = D.44929_640 / 1000;
Not folded
Folding statement: D.44929_640 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44928_639 = (int) D.44927_638;
Not folded
Folding statement: D.44927_638 = imp_629->ianacode;
Not folded
Folding statement: D.44926_637 = imp_629->iananame;
Not folded
Folding statement: remote_codec_rate.92_636 = (int) remote_codec_rate_98;
Not folded
Folding statement: D.44924_635 = (int) D.44856_634;
Not folded
Folding statement: D.44856_634 = map_128->rm_pt;
Not folded
Folding statement: if (D.47919_1483 == 0)
Not folded
Folding statement: D.47919_1483 = *D.44889_642;
Not folded
Folding PHI node: D.47918_1484 = PHI <1(276), 1(277), 0(278)>
No folding possible
Folding statement: if (D.47918_1484 != 0)
Not folded
Folding statement: if (D.44937_647 != 0)
Not folded
Folding statement: D.44937_647 = D.44936_646 & 1;
Not folded
Folding statement: D.44936_646 = (int) D.44821_645;
Not folded
Folding statement: D.44821_645 = D.44471_644->ndlb;
Not folded
Folding statement: D.44471_644 = smh_186->mparams;
Not folded
Folding statement: if (D.44924_650 <= 95)
Not folded
Folding statement: D.44924_650 = (int) D.44856_649;
Not folded
Folding statement: D.44856_649 = map_128->rm_pt;
Not folded
Folding statement: # DEBUG match => match_655
Not folded
Folding statement: match_655 = D.44924_652 == D.44928_654;
Folded into: match_655 = D.44924_650 == D.44928_654;

Folding statement: D.44928_654 = (int) D.44927_653;
Not folded
Folding statement: D.44927_653 = imp_629->ianacode;
Not folded
Removing dead stmt D.44924_652 = D.44924_650;

Removing dead stmt D.44856_651 = D.44856_649;

Folding statement: if (D.44944_657 == 0)
Not folded
Folding statement: D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
Not folded
Folding statement: D.44926_656 = imp_629->iananame;
Not folded
Folding statement: if (remote_codec_rate_98 == codec_rate_632)
Not folded
Folding statement: if (D.44947_658 == fmtp_remote_codec_rate_99)
Not folded
Folding statement: D.44947_658 = imp_629->actual_samples_per_second;
Not folded
Folding PHI node: iftmp.93_144 = PHI <1(285), 0(286), 1(284)>
No folding possible
Folding statement: if (fmtp_remote_codec_rate_99 != 0)
Not folded
Folding statement: # DEBUG match => match_661
Not folded
Folding statement: match_661 = (uint8_t) iftmp.93_144;
Not folded
Folding statement: # DEBUG remote_codec_rate => fmtp_remote_codec_rate_99
Not folded
Folding PHI node: match_1 = PHI <match_655(282), match_661(287), match_661(288)>
No folding possible
Folding PHI node: remote_codec_rate_96 = PHI <remote_codec_rate_98(282), remote_codec_rate_98(287), fmtp_remote_codec_rate_99(288)>
No folding possible
Folding statement: if (D.44952_665 != 0)
Not folded
Folding statement: D.44952_665 = D.44950_663 && D.44951_664;
Not folded
Folding statement: D.44951_664 = bit_rate_631 != 0;
Not folded
Folding statement: D.44950_663 = match_1 != 0;
Not folded
Folding statement: # DEBUG match => match_1
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_96
Not folded
Folding statement: if (D.44957_668 != 0)
Not folded
Folding statement: D.44957_668 = D.44955_666 && D.44956_667;
Not folded
Folding statement: D.44956_667 = map_bit_rate_132 != bit_rate_631;
Not folded
Folding statement: D.44955_666 = map_bit_rate_132 != 0;
Not folded
Folding statement: if (D.44960_670 != 0)
Not folded
Folding statement: D.44960_670 = strcasecmp (D.44889_669, "ilbc");
Folded into: D.44960_670 = strcasecmp (D.44889_642, "ilbc");

Removing dead stmt D.44889_669 = D.44889_642;

Folding statement: if (D.44963_672 != 0)
Not folded
Folding statement: D.44963_672 = strcasecmp (D.44889_671, "isac");
Folded into: D.44963_672 = strcasecmp (D.44889_642, "isac");

Removing dead stmt D.44889_671 = D.44889_642;

Folding statement: # DEBUG match => 0
Not folded
Folding PHI node: match_2 = PHI <match_1(289), match_1(290), match_1(291), match_1(292), 0(293)>
No folding possible
Folding statement: if (D.44969_676 != 0)
Not folded
Folding statement: D.44969_676 = D.44950_674 && D.44968_675;
Not folded
Folding statement: D.44968_675 = remote_codec_rate_96 != 0;
Not folded
Folding statement: D.44950_674 = match_2 != 0;
Not folded
Folding statement: # DEBUG match => match_2
Not folded
Folding statement: if (D.44974_679 != 0)
Not folded
Folding statement: D.44974_679 = D.44972_677 && D.44973_678;
Not folded
Folding statement: D.44973_678 = remote_codec_rate_96 != codec_rate_632;
Not folded
Folding statement: D.44972_677 = codec_rate_632 != 0;
Not folded
Folding statement: if (D.44977_681 == 0)
Not folded
Folding statement: D.44977_681 = strcasecmp (D.44889_680, "pcma");
Folded into: D.44977_681 = strcasecmp (D.44889_642, "pcma");

Removing dead stmt D.44889_680 = D.44889_642;

Folding statement: if (D.44979_683 == 0)
Not folded
Folding statement: D.44979_683 = strcasecmp (D.44889_682, "pcmu");
Folded into: D.44979_683 = strcasecmp (D.44889_642, "pcmu");

Removing dead stmt D.44889_682 = D.44889_642;

Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
Not folded
Folding PHI node: match_3 = PHI <match_2(294), match_2(295), match_2(297), 0(298)>
No folding possible
Folding PHI node: .MEM_1130 = PHI <.MEM_1309(294), .MEM_1309(295), .MEM_1309(297), .MEM_1310(298)>
No folding possible
Folding statement: if (match_3 != 0)
Not folded
Folding statement: # DEBUG match => match_3
Not folded
Folding statement: if (scrooge_80 != 0)
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
Not folded
Folding statement: D.44930_688 = D.44929_687 / 1000;
Not folded
Folding statement: D.44929_687 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44984_686 = imp_629->samples_per_second;
Not folded
Folding statement: D.44926_685 = imp_629->iananame;
Not folded
Folding statement: if (D.44991_691 != 0)
Not folded
Folding statement: D.44991_691 = D.44989_689 && D.44990_690;
Not folded
Folding statement: D.44990_690 = codec_ms_90 != 0;
Not folded
Folding statement: D.44989_689 = ptime_35 != 0;
Not folded
Folding statement: if (D.44993_692 != D.44929_693)
Not folded
Folding statement: D.44929_693 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44993_692 = codec_ms_90 * 1000;
Not folded
Folding statement: if (remote_codec_rate_96 != codec_rate_632)
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_701
Not folded
Folding statement: nm_idx_701 = nm_idx_116 + 1;
Not folded
Folding statement: near_matches[nm_idx_116].map = map_128;
Not folded
Folding statement: near_matches[nm_idx_116].imp = imp_629;
Not folded
Folding statement: near_matches[nm_idx_116].rate = remote_codec_rate.92_700;
Not folded
Folding statement: remote_codec_rate.92_700 = (int) remote_codec_rate_96;
Not folded
Folding statement: near_matches[nm_idx_116].codec_idx = i_129;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
Not folded
Folding statement: D.44930_699 = D.44929_698 / 1000;
Not folded
Folding statement: D.44929_698 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44928_697 = (int) D.44927_696;
Not folded
Folding statement: D.44927_696 = imp_629->ianacode;
Not folded
Folding statement: D.44926_695 = imp_629->iananame;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding PHI node: .MEM_1131 = PHI <.MEM_1311(301), .MEM_1130(304)>
No folding possible
Folding statement: if (m_idx_703 > 29)
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
Not folded
Folding statement: D.44930_708 = D.44929_707 / 1000;
Not folded
Folding statement: D.44929_707 = imp_629->microseconds_per_packet;
Not folded
Folding statement: D.44928_706 = (int) D.44927_705;
Not folded
Folding statement: D.44927_705 = imp_629->ianacode;
Not folded
Folding statement: D.44926_704 = imp_629->iananame;
Not folded
Folding statement: # DEBUG m_idx => m_idx_703
Not folded
Folding statement: m_idx_703 = m_idx_101 + 1;
Not folded
Folding statement: matches[m_idx_101].map = map_128;
Not folded
Folding statement: matches[m_idx_101].imp = imp_629;
Not folded
Folding statement: matches[m_idx_101].rate = codec_rate.94_702;
Not folded
Folding statement: codec_rate.94_702 = (int) codec_rate_632;
Not folded
Folding statement: matches[m_idx_101].codec_idx = i_129;
Not folded
Folding PHI node: match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>
No folding possible
Folding PHI node: remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>
No folding possible
Folding PHI node: m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_703(306)>
No folding possible
Folding PHI node: nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>
No folding possible
Folding PHI node: .MEM_1132 = PHI <.MEM_1133(275), .MEM_1130(299), .MEM_1316(305), .MEM_1321(306)>
No folding possible
Folding statement: # DEBUG i => i_710
Not folded
Folding statement: i_710 = i_129 + 1;
Not folded
Folding statement: # DEBUG match => match_4
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_97
Not folded
Folding statement: # DEBUG m_idx => m_idx_100
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_115
Not folded
Folding PHI node: match_5 = PHI <match_8(274), match_4(307)>
No folding possible
Folding PHI node: remote_codec_rate_98 = PHI <remote_codec_rate_596(274), remote_codec_rate_97(307)>
No folding possible
Folding PHI node: m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>
No folding possible
Folding PHI node: nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>
No folding possible
Folding PHI node: i_129 = PHI <0(274), i_710(307)>
No folding possible
Folding PHI node: .MEM_1133 = PHI <.MEM_1129(274), .MEM_1132(307)>
No folding possible
Folding statement: if (D.44999_625 != 0)
Not folded
Folding statement: D.44999_625 = D.44997_623 && D.44998_624;
Not folded
Folding statement: D.44998_624 = i_129 < total_codecs_85;
Not folded
Folding statement: D.44997_623 = D.44996_622 > i_129;
Not folded
Folding statement: D.44996_622 = D.44471_621->num_codecs;
Not folded
Folding statement: D.44471_621 = smh_186->mparams;
Not folded
Folding statement: # DEBUG match => match_5
Not folded
Folding statement: # DEBUG remote_codec_rate => remote_codec_rate_98
Not folded
Folding statement: # DEBUG m_idx => m_idx_101
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_116
Not folded
Folding statement: # DEBUG i => i_129
Not folded
Folding PHI node: match_6 = PHI <match_3(306), match_5(308)>
No folding possible
Folding PHI node: m_idx_102 = PHI <m_idx_703(306), m_idx_101(308)>
No folding possible
Folding PHI node: .MEM_1134 = PHI <.MEM_1321(306), .MEM_1133(308)>
No folding possible
Folding statement: if (m_idx_102 > 29)
Not folded
Folding statement: # DEBUG match => match_6
Not folded
Folding statement: # DEBUG m_idx => m_idx_102
Not folded
Folding PHI node: match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>
No folding possible
Folding PHI node: best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>
No folding possible
Folding PHI node: cng_pt_24 = PHI <cng_pt_25(241), cng_pt_573(247), cng_pt_25(248), cng_pt_25(249), cng_pt_25(309)>
No folding possible
Folding PHI node: x_48 = PHI <x_49(241), x_49(247), x_580(248), x_580(249), x_580(309)>
No folding possible
Folding PHI node: codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>
No folding possible
Folding PHI node: m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>
No folding possible
Folding PHI node: nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>
No folding possible
Folding PHI node: .MEM_1135 = PHI <.MEM_1126(241), .MEM_1127(247), .MEM_1303(248), .MEM_1303(249), .MEM_1134(309)>
No folding possible
Folding statement: # DEBUG map => map_711
Not folded
Folding statement: map_711 = map_128->rm_next;
Not folded
Folding statement: # DEBUG match => match_7
Not folded
Folding statement: # DEBUG best_te => best_te_19
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_24
Not folded
Folding statement: # DEBUG x => x_48
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_91
Not folded
Folding statement: # DEBUG m_idx => m_idx_103
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_117
Not folded
Folding PHI node: match_8 = PHI <match_16(234), match_7(310)>
No folding possible
Folding PHI node: best_te_20 = PHI <best_te_23(234), best_te_19(310)>
No folding possible
Folding PHI node: cng_pt_25 = PHI <cng_pt_27(234), cng_pt_24(310)>
No folding possible
Folding PHI node: x_49 = PHI <0(234), x_48(310)>
No folding possible
Folding PHI node: codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>
No folding possible
Folding PHI node: m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>
No folding possible
Folding PHI node: nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>
No folding possible
Folding PHI node: map_128 = PHI <map_559(234), map_711(310)>
No folding possible
Folding PHI node: .MEM_1136 = PHI <.MEM_1125(234), .MEM_1135(310)>
No folding possible
Folding statement: if (map_128 != 0B)
Not folded
Folding statement: # DEBUG match => match_8
Not folded
Folding statement: # DEBUG best_te => best_te_20
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_25
Not folded
Folding statement: # DEBUG x => x_49
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_92
Not folded
Folding statement: # DEBUG m_idx => m_idx_104
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_118
Not folded
Folding statement: # DEBUG map => map_128
Not folded
Folding PHI node: match_9 = PHI <match_6(309), match_8(311)>
No folding possible
Folding PHI node: codec_ms_93 = PHI <codec_ms_90(309), codec_ms_92(311)>
No folding possible
Folding PHI node: m_idx_105 = PHI <m_idx_102(309), m_idx_104(311)>
No folding possible
Folding PHI node: nm_idx_119 = PHI <nm_idx_116(309), nm_idx_118(311)>
No folding possible
Folding PHI node: .MEM_1137 = PHI <.MEM_1134(309), .MEM_1136(311)>
No folding possible
Folding statement: if (D.45004_715 != 0)
Not folded
Folding statement: D.45004_715 = D.45002_713 && D.45003_714;
Not folded
Folding statement: D.45003_714 = got_crypto_54 <= 0;
Not folded
Folding statement: D.45002_713 = D.45001_712 == 1;
Not folded
Folding statement: D.45001_712 = smh_186->crypto_mode;
Not folded
Folding statement: # DEBUG match => match_9
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_93
Not folded
Folding statement: # DEBUG m_idx => m_idx_105
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_119
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
Not folded
Folding PHI node: match_10 = PHI <match_9(312), 0(313)>
No folding possible
Folding PHI node: m_idx_106 = PHI <m_idx_105(312), 0(313)>
No folding possible
Folding PHI node: nm_idx_120 = PHI <nm_idx_119(312), 0(313)>
No folding possible
Folding PHI node: .MEM_1138 = PHI <.MEM_1137(312), .MEM_1322(313)>
No folding possible
Folding statement: if (D.45009_721 != 0)
Not folded
Folding statement: D.45009_721 = D.45007_719 && D.45008_720;
Not folded
Folding statement: D.45008_720 = nm_idx_120 != 0;
Not folded
Folding statement: D.45007_719 = m_idx_106 == 0;
Not folded
Folding statement: # DEBUG match => match_10
Not folded
Folding statement: # DEBUG m_idx => m_idx_106
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_120
Not folded
Removing dead stmt j_1117 = 0;

Folding statement: if (near_rate_725 == 0)
Not folded
Folding statement: D.45013_728 = near_match_726->iananame;
Not folded
Folding statement: # DEBUG near_map => near_map_727
Not folded
Folding statement: near_map_727 = near_matches[j_133].map;
Not folded
Folding statement: # DEBUG near_match => near_match_726
Not folded
Folding statement: near_match_726 = near_matches[j_133].imp;
Not folded
Folding statement: # DEBUG near_rate => near_rate_725
Not folded
Folding statement: near_rate_725 = (uint32_t) D.45012_724;
Not folded
Folding statement: D.45012_724 = near_matches[j_133].rate;
Not folded
Folding statement: # DEBUG timp => 0B
Not folded
Folding statement: near_rate_729 = near_match_726->samples_per_second;
Not folded
Folding PHI node: near_rate_145 = PHI <near_rate_729(317), near_rate_725(316)>
No folding possible
Folding statement: if (num_731 != 0)
Not folded
Folding statement: # DEBUG num => num_731
Not folded
Folding statement: num_731 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);
Not folded
Folding statement: prefs[0] = &tmp;
Not folded
Folding statement: switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);
Not folded
Folding statement: # DEBUG timp => timp_732
Not folded
Folding statement: timp_732 = search[0];
Not folded
Folding PHI node: timp_134 = PHI <timp_732(319), near_match_726(318)>
No folding possible
Folding statement: if (maxptime_39 == 0)
Not folded
Folding statement: # DEBUG timp => timp_134
Not folded
Folding statement: if (D.45025_735 <= maxptime_39)
Not folded
Folding statement: D.45025_735 = D.45024_734 / 1000;
Not folded
Folding statement: D.45024_734 = timp_134->microseconds_per_packet;
Not folded
Folding statement: # DEBUG m_idx => m_idx_744
Not folded
Folding statement: m_idx_744 = m_idx_106 + 1;
Not folded
Folding statement: matches[m_idx_106].map = near_map_727;
Not folded
Folding statement: matches[m_idx_106].imp = timp_134;
Not folded
Folding statement: matches[m_idx_106].rate = near_rate.96_743;
Not folded
Folding statement: near_rate.96_743 = D.45012_724;
Not folded
Folding statement: matches[m_idx_106].codec_idx = D.45028_742;
Not folded
Folding statement: D.45028_742 = near_matches[j_133].codec_idx;
Not folded
Folding statement: # DEBUG match => 1
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
Not folded
Folding statement: D.45027_740 = timp_134->actual_samples_per_second;
Not folded
Folding statement: D.45025_739 = D.45024_738 / 1000;
Not folded
Folding statement: D.45024_738 = timp_134->microseconds_per_packet;
Not folded
Folding statement: D.45026_737 = timp_134->iananame;
Not folded
Folding statement: # DEBUG j => j_736
Not folded
Folding statement: j_736 = j_133 + 1;
Not folded
Folding PHI node: j_133 = PHI <0(315), j_736(323)>
No folding possible
Folding PHI node: .MEM_1139 = PHI <.MEM_1138(315), .MEM_1325(323)>
No folding possible
Folding statement: if (j_133 < nm_idx_120)
Not folded
Folding statement: # DEBUG j => j_133
Not folded
Folding PHI node: match_11 = PHI <match_10(314), 1(322), match_10(324)>
No folding possible
Folding PHI node: m_idx_107 = PHI <m_idx_106(314), m_idx_744(322), m_idx_106(324)>
No folding possible
Folding PHI node: .MEM_1140 = PHI <.MEM_1138(314), .MEM_1330(322), .MEM_1139(324)>
No folding possible
Folding statement: if (m_idx_107 != 0)
Not folded
Folding statement: # DEBUG match => match_11
Not folded
Folding statement: # DEBUG m_idx => m_idx_107
Not folded
Folding statement: if (greedy_47 != 0)
Not folded
Folding statement: greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);
Not folded
Folding PHI node: .MEM_1141 = PHI <.MEM_1140(326), .MEM_1331(327)>
No folding possible
Folding statement: # DEBUG j => 0
Not folded
Folding statement: smh_186->num_negotiated_codecs = 0;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;
Not folded
Folding statement: # DEBUG match => 1
Not folded
Folding statement: if (j_135 == 0)
Not folded
Folding statement: # DEBUG mmap => mmap_762
Not folded
Folding statement: mmap_762 = matches[j_135].map;
Not folded
Folding statement: # DEBUG mimp => mimp_761
Not folded
Folding statement: mimp_761 = matches[j_135].imp;
Not folded
Folding statement: # DEBUG pmap => pmap_760
Not folded
Folding statement: pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
Not folded
Folding statement: D.45043_759 = (uint32_t) D.45042_758;
Not folded
Folding statement: D.45042_758 = D.45041_757 / 1000;
Not folded
Folding statement: D.45041_757 = D.45039_756->microseconds_per_packet;
Folded into: D.45041_757 = D.45039_754->microseconds_per_packet;

Removing dead stmt D.45039_756 = D.45039_754;

Folding statement: D.45040_755 = D.45039_754->samples_per_second;
Not folded
Folding statement: D.45039_754 = matches[j_135].imp;
Not folded
Folding statement: D.45038_753 = (uint32_t) D.45037_752;
Not folded
Folding statement: D.45037_752 = D.45034_751->rm_pt;
Folded into: D.45037_752 = D.45034_747->rm_pt;

Removing dead stmt D.45034_751 = D.45034_747;

Folding statement: D.45036_750 = D.45034_749->rm_fmtp;
Folded into: D.45036_750 = D.45034_747->rm_fmtp;

Removing dead stmt D.45034_749 = D.45034_747;

Folding statement: D.45035_748 = D.45034_747->rm_encoding;
Not folded
Folding statement: D.45034_747 = matches[j_135].map;
Not folded
Folding statement: if (D.44605_764 != 0B)
Not folded
Folding statement: D.44605_764 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: D.44750_763->current = 1;
Folded into: pmap_760->current = 1;

Removing dead stmt D.44750_763 = pmap_760;

Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_760;
Not folded
Folding statement: switch_rtp_set_default_payload (D.44605_765, D.45048_766);
Folded into: switch_rtp_set_default_payload (D.44605_764, D.45048_766);

Folding statement: D.45048_766 = pmap_760->pt;
Not folded
Removing dead stmt D.44605_765 = D.44605_764;

Folding PHI node: .MEM_1142 = PHI <.MEM_1334(329), .MEM_1336(330), .MEM_1337(331)>
No folding possible
Folding statement: if (D.45056_776 != 0)
Not folded
Folding statement: D.45056_776 = strcasecmp (D.45051_775, "g722");
Not folded
Folding statement: D.45051_775 = mimp_761->iananame;
Not folded
Folding statement: pmap_760->adv_rm_rate = D.45055_774;
Folded into: pmap_760->adv_rm_rate = D.45055_773;

Removing dead stmt D.45055_774 = D.45055_773;

Folding statement: pmap_760->rm_rate = D.45055_773;
Not folded
Folding statement: D.45055_773 = mimp_761->samples_per_second;
Not folded
Folding statement: pmap_760->recv_pt = D.45054_772;
Not folded
Folding statement: D.45054_772 = (unsigned char) D.45053_771;
Not folded
Folding statement: D.45053_771 = mmap_762->rm_pt;
Not folded
Folding statement: pmap_760->iananame = D.45052_770;
Not folded
Folding statement: D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
Not folded
Folding statement: D.45051_769 = mimp_761->iananame;
Not folded
Folding statement: pmap_760->rm_encoding = D.45050_768;
Not folded
Folding statement: D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
Not folded
Folding statement: D.45049_767 = mmap_762->rm_encoding;
Not folded
Folding statement: pmap_760->rm_rate = D.45059_777;
Not folded
Folding statement: D.45059_777 = mimp_761->actual_samples_per_second;
Not folded
Folding PHI node: .MEM_1143 = PHI <.MEM_1344(332), .MEM_1345(333)>
No folding possible
Folding statement: if (D.45066_783 != 0B)
Not folded
Folding statement: D.45066_783 = mmap_762->rm_params;
Not folded
Folding statement: pmap_760->bitrate = D.45064_782;
Not folded
Folding statement: D.45064_782 = (uint32_t) D.45063_781;
Not folded
Folding statement: D.45063_781 = mimp_761->bits_per_second;
Not folded
Folding statement: pmap_760->codec_ms = D.45062_780;
Not folded
Folding statement: D.45062_780 = (uint32_t) D.45061_779;
Not folded
Folding statement: D.45061_779 = D.45060_778 / 1000;
Not folded
Folding statement: D.45060_778 = mimp_761->microseconds_per_packet;
Not folded
Folding statement: D.47922_1485 = strtol (D.45066_784, 0B, 10);
Folded into: D.47922_1485 = strtol (D.45066_783, 0B, 10);

Folding statement: # DEBUG __nptr => D.45066_784
Folded into: # DEBUG __nptr => D.45066_783

Removing dead stmt D.45066_784 = D.45066_783;

Folding PHI node: D.47922_146 = PHI <D.47922_1485(335), 1(334)>
No folding possible
Folding PHI node: .MEM_1514 = PHI <.MEM_1537(335), .MEM_1347(334)>
No folding possible
Folding statement: if (D.45070_788 == 0)
Not folded
Folding statement: D.45070_788 = strcasecmp (D.45049_787, "opus");
Not folded
Folding statement: D.45049_787 = mmap_762->rm_encoding;
Not folded
Folding statement: pmap_760->channels = D.47922_146;
Not folded
Folding statement: if (D.45073_789 == 1)
Folded into: if (D.47922_146 == 1)

Removing dead stmt D.45073_789 = D.47922_146;

Folding statement: pmap_760->adv_channels = 1;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
Not folded
Folding statement: pmap_760->adv_channels = 2;
Not folded
Folding PHI node: .MEM_1144 = PHI <.MEM_1350(338), .MEM_1351(339)>
No folding possible
Folding statement: if (D.45079_790 == 0B)
Not folded
Folding statement: # DEBUG s => D.45079_790
Not folded
Folding statement: D.45079_790 = mmap_762->rm_fmtp;
Not folded
Folding statement: if (D.47926_1486 == 0)
Not folded
Folding statement: D.47926_1486 = *D.45079_790;
Not folded
Folding PHI node: D.47925_1487 = PHI <1(340), 1(341), 0(342)>
No folding possible
Folding statement: if (D.47925_1487 == 0)
Not folded
Folding statement: if (D.45082_793 != 0B)
Not folded
Folding statement: D.45082_793 = switch_stristr ("stereo=1", D.45079_792);
Folded into: D.45082_793 = switch_stristr ("stereo=1", D.45079_790);

Removing dead stmt D.45079_792 = D.45079_790;

Folding statement: pmap_760->channels = 2;
Not folded
Folding PHI node: .MEM_1145 = PHI <.MEM_1144(343), .MEM_1352(344)>
No folding possible
Folding statement: pmap_760->channels = 1;
Not folded
Folding statement: pmap_760->adv_channels = D.45073_794;
Folded into: pmap_760->adv_channels = D.47922_146;

Removing dead stmt D.45073_794 = D.47922_146;

Folding PHI node: .MEM_1146 = PHI <.MEM_1354(346), .MEM_1355(347), .MEM_1353(345)>
No folding possible
Folding statement: # DEBUG j => j_807
Not folded
Folding statement: j_807 = j_135 + 1;
Not folded
Folding statement: pmap_760->recv_pt = D.45054_806;
Not folded
Folding statement: D.45054_806 = (unsigned char) D.45053_805;
Not folded
Folding statement: D.45053_805 = mmap_762->rm_pt;
Not folded
Folding statement: smh_186->num_negotiated_codecs = D.45089_804;
Not folded
Folding statement: D.45089_804 = D.44655_803 + 1;
Not folded
Folding statement: smh_186->negotiated_codecs[D.44655_803] = mimp_761;
Not folded
Folding statement: D.44655_803 = smh_186->num_negotiated_codecs;
Not folded
Folding statement: pmap_760->agreed_pt = D.45054_802;
Not folded
Folding statement: D.45054_802 = (unsigned char) D.45053_801;
Not folded
Folding statement: D.45053_801 = mmap_762->rm_pt;
Not folded
Folding statement: pmap_760->rm_fmtp = D.45088_800;
Not folded
Folding statement: D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
Not folded
Folding statement: D.45079_799 = mmap_762->rm_fmtp;
Not folded
Folding statement: pmap_760->remote_sdp_port = D.45087_798;
Not folded
Folding statement: D.45087_798 = (short unsigned int) D.44697_797;
Not folded
Folding statement: D.44697_797 = m_28->m_port;
Not folded
Folding statement: pmap_760->remote_sdp_ip = D.45086_796;
Not folded
Folding statement: D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
Not folded
Folding statement: D.45085_795 = connection_124->c_address;
Not folded
Folding PHI node: j_135 = PHI <0(328), j_807(348)>
No folding possible
Folding PHI node: .MEM_1147 = PHI <.MEM_1333(328), .MEM_1364(348)>
No folding possible
Folding statement: if (j_135 < m_idx_107)
Not folded
Folding statement: # DEBUG j => j_135
Not folded
Folding PHI node: match_12 = PHI <match_11(325), 1(349)>
No folding possible
Folding PHI node: .MEM_1148 = PHI <.MEM_1140(325), .MEM_1147(349)>
No folding possible
Folding statement: if (match_12 != 0)
Not folded
Folding statement: # DEBUG match => match_12
Not folded
Folding statement: if (D.45094_819 != 0B)
Not folded
Folding statement: # DEBUG codec => D.45094_819
Not folded
Folding statement: D.45094_819 = &MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].read_codec;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);
Not folded
Folding statement: D.44530_818 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45093_817);
Not folded
Folding statement: D.45093_817 = (int) D.45092_816;
Not folded
Folding statement: D.45092_816 = D.44750_815->recv_pt;
Not folded
Folding statement: D.44750_815 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);
Not folded
Folding statement: D.44530_814 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);
Not folded
Folding statement: D.44760_813 = D.44750_812->remote_sdp_ip;
Not folded
Folding statement: D.44750_812 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: D.44530_811 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.44767_810);
Not folded
Folding statement: D.44767_810 = (int) D.44762_809;
Not folded
Folding statement: D.44762_809 = D.44750_808->remote_sdp_port;
Not folded
Folding statement: D.44750_808 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
Not folded
Folding statement: if (D.47933_1489 != 0)
Not folded
Folding statement: D.47933_1489 = D.47934_1488 & 256;
Not folded
Folding statement: D.47934_1488 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
Not folded
Folding statement: if (D.47932_1490 != 0B)
Not folded
Folding statement: D.47932_1490 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
Not folded
Folding statement: if (D.47931_1491 != 0B)
Not folded
Folding statement: D.47931_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
Not folded
Folding statement: if (D.47930_1492 != 0B)
Not folded
Folding statement: D.47930_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
Not folded
Folding PHI node: iftmp.104_1493 = PHI <1(355), 0(356)>
No folding possible
Folding statement: if (iftmp.104_1493 != 0)
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;
Not folded
Folding PHI node: .MEM_1149 = PHI <.MEM_1369(357), .MEM_1370(358)>
No folding possible
Folding statement: if (D.45099_823 == 0)
Not folded
Folding statement: D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
Not folded
Folding statement: D.45098_822 = D.44471_821->codec_flags;
Not folded
Folding statement: D.44471_821 = smh_186->mparams;
Not folded
Folding statement: check_ice (smh_186, 0, sdp_198, m_28);
Not folded
Folding statement: # DEBUG got_audio => 1
Not folded
Folding PHI node: match_13 = PHI <match_12(350), match_12(360), 0(359)>
No folding possible
Folding PHI node: got_audio_65 = PHI <got_audio_67(350), 1(360), got_audio_67(359)>
No folding possible
Folding PHI node: .MEM_1150 = PHI <.MEM_1148(350), .MEM_1372(360), .MEM_1371(359)>
No folding possible
Folding statement: if (best_te_20 == 0)
Not folded
Folding statement: # DEBUG match => match_13
Not folded
Folding statement: # DEBUG got_audio => got_audio_65
Not folded
Folding statement: if (D.45107_826 != 0)
Not folded
Folding statement: D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);
Not folded
Folding statement: if (D.45109_828 != 0)
Not folded
Folding statement: D.45109_828 = switch_channel_test_flag (D.44530_827, 93);
Not folded
Folding statement: D.44530_827 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1151 = PHI <.MEM_1373(362), .MEM_1374(363)>
No folding possible
Folding statement: # DEBUG best_te => best_te_833
Not folded
Folding statement: best_te_833 = D.44471_832->te;
Not folded
Folding statement: D.44471_832 = smh_186->mparams;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);
Not folded
Folding statement: D.45111_831 = (int) D.45110_830;
Not folded
Folding statement: D.45110_830 = D.44471_829->te;
Not folded
Folding statement: D.44471_829 = smh_186->mparams;
Not folded
Folding PHI node: best_te_21 = PHI <best_te_20(361), best_te_20(363), best_te_833(364)>
No folding possible
Folding PHI node: .MEM_1152 = PHI <.MEM_1150(361), .MEM_1374(363), .MEM_1375(364)>
No folding possible
Folding statement: if (best_te_21 != 0)
Not folded
Folding statement: # DEBUG best_te => best_te_21
Not folded
Folding statement: if (D.45114_834 == 1)
Not folded
Folding statement: D.45114_834 = switch_channel_direction (channel_162);
Not folded
Folding statement: if (D.44605_840 != 0B)
Not folded
Folding statement: D.44605_840 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: D.44471_839->dtmf_type = 0;
Not folded
Folding statement: D.44471_839 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);
Not folded
Folding statement: D.44530_838 = session_161(D)->channel;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);
Not folded
Folding statement: D.44857_837 = (int) best_te_21;
Not folded
Folding statement: # DEBUG te => D#11
Not folded
Folding statement: # DEBUG D#11 => D.44471_835->te
Not folded
Folding statement: D.44471_835->te = best_te_21;
Not folded
Folding statement: D.44471_835 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_843);
Folded into: switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_837);

Removing dead stmt D.44857_843 = D.44857_837;

Folding statement: D.44530_842 = session_161(D)->channel;
Not folded
Folding statement: switch_rtp_set_telephony_event (D.44605_841, best_te_21);
Folded into: switch_rtp_set_telephony_event (D.44605_840, best_te_21);

Removing dead stmt D.44605_841 = D.44605_840;

Folding statement: if (D.44605_851 != 0B)
Not folded
Folding statement: D.44605_851 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: D.44471_850->dtmf_type = 0;
Not folded
Folding statement: D.44471_850 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);
Not folded
Folding statement: D.44530_849 = session_161(D)->channel;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);
Not folded
Folding statement: D.45120_848 = (int) te_847;
Folded into: D.45120_848 = (int) best_te_21;

Folding statement: # DEBUG te => te_847
Folded into: # DEBUG te => best_te_21

Folding statement: te_847 = best_te_21;
Not folded
Folding statement: D.44471_845->recv_te = D.45110_846;
Folded into: D.44471_845->recv_te = best_te_21;

Removing dead stmt D.45110_846 = best_te_21;

Folding statement: D.44471_845->te = best_te_21;
Not folded
Folding statement: D.44471_845 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_857);
Folded into: switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_848);

Removing dead stmt D.45120_857 = D.45120_848;

Folding statement: D.44530_856 = session_161(D)->channel;
Not folded
Folding statement: switch_rtp_set_telephony_recv_event (D.44605_855, te_847);
Folded into: switch_rtp_set_telephony_recv_event (D.44605_855, best_te_21);

Folding statement: D.44605_855 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
Not folded
Folding statement: switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_854);
Folded into: switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_848);

Removing dead stmt D.45120_854 = D.45120_848;

Folding statement: D.44530_853 = session_161(D)->channel;
Not folded
Folding statement: switch_rtp_set_telephony_event (D.44605_852, te_847);
Folded into: switch_rtp_set_telephony_event (D.44605_851, best_te_21);

Removing dead stmt D.44605_852 = D.44605_851;

Folding statement: if (D.45124_858 != 0B)
Not folded
Folding statement: # DEBUG expr => D.45124_858
Not folded
Folding statement: D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
Not folded
Folding statement: if (D.49735_1600 == 0)
Not folded
Folding statement: D.49735_1600 = strcasecmp (D.45124_858, "no");
Not folded
Folding statement: if (D.49736_1601 == 0)
Not folded
Folding statement: D.49736_1601 = strcasecmp (D.45124_858, "off");
Not folded
Folding statement: if (D.49737_1602 == 0)
Not folded
Folding statement: D.49737_1602 = strcasecmp (D.45124_858, "false");
Not folded
Folding statement: if (D.49738_1603 == 0)
Not folded
Folding statement: D.49738_1603 = strcasecmp (D.45124_858, "f");
Not folded
Folding statement: if (D.49739_1604 == 0)
Not folded
Folding statement: D.49739_1604 = strcasecmp (D.45124_858, "disabled");
Not folded
Folding statement: if (D.49740_1605 == 0)
Not folded
Folding statement: D.49740_1605 = strcasecmp (D.45124_858, "inactive");
Not folded
Folding statement: if (D.49741_1606 == 0)
Not folded
Folding statement: D.49741_1606 = strcasecmp (D.45124_858, "disallow");
Not folded
Folding statement: if (D.49742_1607 != 0)
Not folded
Folding statement: D.49742_1607 = switch_is_number (D.45124_858);
Not folded
Folding statement: if (D.49743_1608 == 0)
Not folded
Folding statement: D.49743_1608 = strtol (D.45124_858, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.45124_858
Not folded
Folding PHI node: .MEM_1630 = PHI <.MEM_1392(371), .MEM_1649(379), .MEM_1650(380)>
No folding possible
Folding PHI node: D.49733_1609 = PHI <1(372), 1(373), 1(374), 1(375), 1(376), 1(377), 1(378), 1(380), 0(381)>
No folding possible
Folding PHI node: .MEM_1631 = PHI <.MEM_1392(372), .MEM_1392(373), .MEM_1392(374), .MEM_1392(375), .MEM_1392(376), .MEM_1392(377), .MEM_1392(378), .MEM_1650(380), .MEM_1630(381)>
No folding possible
Folding statement: if (D.49733_859 == 0)
Folded into: if (D.49733_1609 == 0)

Removing dead stmt D.49733_859 = D.49733_1609;

Removing dead stmt D.49733_1651 = D.49733_1609;

Folding statement: # DEBUG te => D#12
Not folded
Folding statement: # DEBUG D#12 => D.44471_863->recv_te
Folded into: # DEBUG D#12 => D.44471_861->recv_te

Folding statement: D.44471_863->recv_te = D.45110_864;
Folded into: D.44471_861->recv_te = D.45110_864;

Folding statement: D.45110_864 = 0;
Not folded
Folding statement: D.44471_863->te = 0;
Folded into: D.44471_861->te = 0;

Removing dead stmt D.44471_863 = D.44471_861;

Folding statement: D.44471_861->dtmf_type = 1;
Not folded
Folding statement: D.44471_861 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);
Not folded
Folding statement: D.44530_860 = session_161(D)->channel;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
Not folded
Folding statement: # DEBUG te => D#13
Not folded
Folding statement: # DEBUG D#13 => D.44471_869->recv_te
Folded into: # DEBUG D#13 => D.44471_867->recv_te

Folding statement: D.44471_869->recv_te = D.45110_870;
Folded into: D.44471_867->recv_te = D.45110_870;

Folding statement: D.45110_870 = 0;
Not folded
Folding statement: D.44471_869->te = 0;
Folded into: D.44471_867->te = 0;

Removing dead stmt D.44471_869 = D.44471_867;

Folding statement: D.44471_867->dtmf_type = 2;
Not folded
Folding statement: D.44471_867 = smh_186->mparams;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);
Not folded
Folding statement: D.44530_866 = session_161(D)->channel;
Not folded
Folding statement: if (D.44681_872 == 3)
Folded into: if (D.44681_493 == 3)

Removing dead stmt D.44681_872 = D.44681_493;

Folding statement: if (D.44697_873 != 0)
Not folded
Folding statement: D.44697_873 = m_28->m_port;
Not folded
Folding statement: if (D.44546_880 != 0B)
Not folded
Folding statement: D.44546_880 = m_28->m_connections;
Not folded
Folding statement: # DEBUG connection => connection_879
Not folded
Folding statement: connection_879 = sdp_198->sdp_connection;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);
Not folded
Folding statement: D.44530_878 = session_161(D)->channel;
Not folded
Folding statement: memset (&near_matches, 0, 480);
Not folded
Folding statement: memset (&matches, 0, 480);
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG nm_idx => 0
Not folded
Folding statement: # DEBUG vmatch => 0
Not folded
Folding statement: # DEBUG mimp => 0B
Not folded
Folding statement: # DEBUG connection => connection_881
Folded into: # DEBUG connection => D.44546_880

Folding statement: connection_881 = D.44546_880;
Not folded
Folding PHI node: connection_125 = PHI <connection_879(387), connection_881(388)>
Folded into: connection_125 = PHI <connection_879(387), D.44546_880(388)>

Folding statement: if (connection_125 == 0B)
Not folded
Folding statement: # DEBUG connection => connection_125
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
Not folded
Folding statement: # DEBUG map => map_883
Not folded
Folding statement: map_883 = m_28->m_rtpmaps;
Not folded
Folding statement: if (D.45137_884 != 0)
Not folded
Folding statement: D.45137_884 = switch_rtp_has_dtls ();
Not folded
Folding statement: if (D.45140_885 != 0)
Not folded
Folding statement: D.45140_885 = dtls_ok (session_161(D));
Not folded
Folding statement: # DEBUG attr => attr_886
Not folded
Folding statement: attr_886 = m_28->m_attributes;
Not folded
Folding statement: if (D.45143_888 == 0)
Not folded
Folding statement: D.45143_888 = strcasecmp (D.44590_887, "fingerprint");
Not folded
Folding statement: D.44590_887 = attr_32->a_name;
Not folded
Folding statement: if (D.44619_889 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_889
Not folded
Folding statement: D.44619_889 = attr_32->a_value;
Not folded
Folding statement: if (D.47939_1495 == 0)
Not folded
Folding statement: D.47939_1495 = *D.44619_889;
Not folded
Folding PHI node: D.47938_1496 = PHI <1(396), 1(397), 0(398)>
No folding possible
Folding statement: if (D.47938_1496 == 0)
Not folded
Folding statement: # DEBUG got_video_crypto => 1
Not folded
Folding PHI node: got_video_crypto_57 = PHI <got_video_crypto_58(395), got_video_crypto_58(399), 1(400)>
No folding possible
Folding statement: # DEBUG attr => attr_892
Not folded
Folding statement: attr_892 = attr_32->a_next;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_57
Not folded
Folding PHI node: attr_32 = PHI <attr_886(394), attr_892(401)>
No folding possible
Folding PHI node: got_video_crypto_58 = PHI <got_video_crypto_62(394), got_video_crypto_57(401)>
No folding possible
Folding statement: if (attr_32 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_32
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_58
Not folded
Folding PHI node: got_video_crypto_59 = PHI <got_video_crypto_62(392), got_video_crypto_62(393), got_video_crypto_58(402)>
No folding possible
Folding PHI node: .MEM_1153 = PHI <.MEM_1407(392), .MEM_1408(393), .MEM_1408(402)>
No folding possible
Folding statement: # DEBUG attr => attr_893
Not folded
Folding statement: attr_893 = m_28->m_attributes;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_59
Not folded
Folding statement: if (D.45151_895 == 0)
Not folded
Folding statement: D.45151_895 = strcasecmp (D.44590_894, "framerate");
Not folded
Folding statement: D.44590_894 = attr_33->a_name;
Not folded
Folding statement: if (D.44619_896 != 0B)
Not folded
Folding statement: D.44619_896 = attr_33->a_value;
Not folded
Folding statement: if (D.45154_898 == 0)
Not folded
Folding statement: D.45154_898 = strcasecmp (D.44590_897, "rtcp-fb");
Folded into: D.45154_898 = strcasecmp (D.44590_894, "rtcp-fb");

Removing dead stmt D.44590_897 = D.44590_894;

Folding statement: if (D.44619_899 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_899
Not folded
Folding statement: D.44619_899 = attr_33->a_value;
Not folded
Folding statement: if (D.47943_1497 == 0)
Not folded
Folding statement: D.47943_1497 = *D.44619_899;
Not folded
Folding PHI node: D.47942_1498 = PHI <1(407), 1(408), 0(409)>
No folding possible
Folding statement: if (D.47942_1498 == 0)
Not folded
Folding statement: if (D.45160_902 != 0B)
Not folded
Folding statement: D.45160_902 = switch_stristr ("fir", D.44619_901);
Folded into: D.45160_902 = switch_stristr ("fir", D.44619_899);

Removing dead stmt D.44619_901 = D.44619_899;

Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45164_904;
Not folded
Folding statement: D.45164_904 = D.45163_903 + 1;
Not folded
Folding statement: D.45163_903 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
Not folded
Folding PHI node: .MEM_1154 = PHI <.MEM_1409(411), .MEM_1410(412)>
No folding possible
Folding statement: D.44471_905->rtcp_video_interval_msec = "10000";
Not folded
Folding statement: D.44471_905 = smh_186->mparams;
Not folded
Folding statement: if (D.45168_907 == 0)
Not folded
Folding statement: D.45168_907 = strcasecmp (D.44590_906, "rtcp");
Folded into: D.45168_907 = strcasecmp (D.44590_894, "rtcp");

Removing dead stmt D.44590_906 = D.44590_894;

Folding statement: if (D.44619_908 != 0B)
Not folded
Folding statement: D.44619_908 = attr_33->a_value;
Not folded
Folding statement: if (__result_916 == 0)
Not folded
Folding statement: # DEBUG __result => __result_916
Not folded
Folding statement: __result_916 = D.45175_912 + -49;
Not folded
Folding statement: D.45175_912 = (int) D.45174_911;
Not folded
Folding statement: D.45174_911 = *__s1_910;
Folded into: D.45174_911 = MEM[(const unsigned char *)D.44619_908];

Folding statement: # DEBUG __s1 => __s1_910
Folded into: # DEBUG __s1 => D.44619_908

Folding statement: __s1_910 = D.44619_908;
Not folded
Folding statement: # DEBUG __s2_len => 1
Not folded
Folding statement: # DEBUG __result => __result_922
Not folded
Folding statement: __result_922 = (int) D.45185_921;
Not folded
Folding statement: D.45185_921 = MEM[(const unsigned char *)__s1_910 + 1B];
Folded into: D.45185_921 = MEM[(const unsigned char *)D.44619_908 + 1B];

Folding PHI node: __result_140 = PHI <__result_916(416), __result_922(417)>
No folding possible
Folding statement: if (__result_140 == 0)
Not folded
Folding statement: # DEBUG __result => __result_140
Not folded
Folding statement: if (D.45214_958 == 0B)
Not folded
Folding statement: D.45214_958 = D.44471_957->rtcp_video_interval_msec;
Not folded
Folding statement: D.44471_957 = smh_186->mparams;
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45213_956;
Not folded
Folding statement: D.45213_956 = (short unsigned int) D.47946_1499;
Not folded
Folding statement: D.47946_1499 = strtol (D.44619_954, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.44619_954
Not folded
Folding statement: D.44619_954 = attr_33->a_value;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_953, 1);
Folded into: switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_908, 1);

Removing dead stmt D.44619_953 = D.44619_908;

Folding statement: D.44530_952 = session_161(D)->channel;
Not folded
Folding statement: D.44471_959->rtcp_video_interval_msec = "5000";
Folded into: D.44471_957->rtcp_video_interval_msec = "5000";

Removing dead stmt D.44471_959 = D.44471_957;

Folding statement: if (got_video_crypto_61 == 0)
Not folded
Folding statement: if (D.45219_961 == 0)
Not folded
Folding statement: D.45219_961 = strcasecmp (D.44590_960, "crypto");
Folded into: D.45219_961 = strcasecmp (D.44590_894, "crypto");

Removing dead stmt D.44590_960 = D.44590_894;

Folding statement: if (D.44619_962 == 0B)
Not folded
Folding statement: # DEBUG s => D.44619_962
Not folded
Folding statement: D.44619_962 = attr_33->a_value;
Not folded
Folding statement: if (D.47950_1500 == 0)
Not folded
Folding statement: D.47950_1500 = *D.44619_962;
Not folded
Folding PHI node: D.47949_1501 = PHI <1(423), 1(424), 0(425)>
No folding possible
Folding statement: if (D.47949_1501 == 0)
Not folded
Folding statement: if (D.44822_966 == 0)
Not folded
Folding statement: D.44822_966 = D.44821_965 & 4;
Not folded
Folding statement: D.44821_965 = D.44471_964->ndlb;
Not folded
Folding statement: D.44471_964 = smh_186->mparams;
Not folded
Folding statement: if (D.45227_968 != 0B)
Not folded
Folding statement: # DEBUG expr => D.45227_968
Not folded
Folding statement: D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);
Not folded
Folding statement: D.44530_967 = session_161(D)->channel;
Not folded
Folding statement: if (D.49747_1610 == 0)
Not folded
Folding statement: D.49747_1610 = strcasecmp (D.45227_968, "yes");
Not folded
Folding statement: if (D.49748_1611 == 0)
Not folded
Folding statement: D.49748_1611 = strcasecmp (D.45227_968, "on");
Not folded
Folding statement: if (D.49749_1612 == 0)
Not folded
Folding statement: D.49749_1612 = strcasecmp (D.45227_968, "true");
Not folded
Folding statement: if (D.49750_1613 == 0)
Not folded
Folding statement: D.49750_1613 = strcasecmp (D.45227_968, "t");
Not folded
Folding statement: if (D.49751_1614 == 0)
Not folded
Folding statement: D.49751_1614 = strcasecmp (D.45227_968, "enabled");
Not folded
Folding statement: if (D.49752_1615 == 0)
Not folded
Folding statement: D.49752_1615 = strcasecmp (D.45227_968, "active");
Not folded
Folding statement: if (D.49753_1616 == 0)
Not folded
Folding statement: D.49753_1616 = strcasecmp (D.45227_968, "allow");
Not folded
Folding statement: if (D.49754_1617 != 0)
Not folded
Folding statement: D.49754_1617 = switch_is_number (D.45227_968);
Not folded
Folding statement: if (D.49755_1618 != 0)
Not folded
Folding statement: D.49755_1618 = strtol (D.45227_968, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => D.45227_968
Not folded
Folding PHI node: .MEM_1632 = PHI <.MEM_1415(428), .MEM_1652(436), .MEM_1653(437)>
No folding possible
Folding PHI node: D.49745_1619 = PHI <1(429), 1(430), 1(431), 1(432), 1(433), 1(434), 1(435), 1(437), 0(438)>
No folding possible
Folding PHI node: .MEM_1633 = PHI <.MEM_1415(429), .MEM_1415(430), .MEM_1415(431), .MEM_1415(432), .MEM_1415(433), .MEM_1415(434), .MEM_1415(435), .MEM_1653(437), .MEM_1632(438)>
No folding possible
Folding statement: if (D.49745_969 == 0)
Folded into: if (D.49745_1619 == 0)

Removing dead stmt D.49745_969 = D.49745_1619;

Removing dead stmt D.49745_1654 = D.49745_1619;

Folding statement: if (D.44831_973 != 0)
Not folded
Folding statement: D.44831_973 = D.44829_971 && D.44830_972;
Not folded
Folding statement: D.44830_972 = got_webrtc_78 == 0;
Not folded
Folding statement: D.44829_971 = D.44666_970 != 257;
Not folded
Folding statement: D.44666_970 = m_28->m_proto;
Not folded
Folding statement: # DEBUG match => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
Not folded
Folding PHI node: .MEM_1155 = PHI <.MEM_1157(427), .MEM_1633(439), .MEM_1633(440)>
No folding possible
Folding statement: # DEBUG got_video_crypto => got_video_crypto_977
Not folded
Folding statement: got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));
Not folded
Folding statement: # DEBUG crypto_tag => NULL
Not folded
Folding statement: crypto_tag_1502 = strtol (crypto_975, 0B, 10);
Not folded
Folding statement: # DEBUG __nptr => crypto_975
Not folded
Folding statement: # DEBUG crypto => crypto_975
Not folded
Folding statement: crypto_975 = attr_33->a_value;
Not folded
Folding PHI node: got_video_crypto_60 = PHI <got_video_crypto_61(405), got_video_crypto_61(413), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(422), got_video_crypto_61(426), got_video_crypto_977(442), got_video_crypto_61(410), got_video_crypto_61(419)>
No folding possible
Folding PHI node: .MEM_1156 = PHI <.MEM_1157(405), .MEM_1411(413), .MEM_1414(420), .MEM_1157(421), .MEM_1157(422), .MEM_1157(426), .MEM_1418(442), .MEM_1157(410), .MEM_1413(419)>
No folding possible
Folding statement: # DEBUG attr => attr_978
Not folded
Folding statement: attr_978 = attr_33->a_next;
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_60
Not folded
Folding PHI node: attr_33 = PHI <attr_893(403), attr_978(443)>
No folding possible
Folding PHI node: got_video_crypto_61 = PHI <got_video_crypto_59(403), got_video_crypto_60(443)>
No folding possible
Folding PHI node: .MEM_1157 = PHI <.MEM_1153(403), .MEM_1156(443)>
No folding possible
Folding statement: if (attr_33 != 0B)
Not folded
Folding statement: # DEBUG attr => attr_33
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_61
Not folded
Folding statement: if (rm_encoding_979 == 0B)
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_979
Not folded
Folding statement: rm_encoding_979 = map_136->rm_encoding;
Not folded
Folding statement: # DEBUG rm_encoding => ""
Not folded
Folding PHI node: rm_encoding_137 = PHI <rm_encoding_979(445), ""(446)>
No folding possible
Folding statement: # DEBUG i => 0
Not folded
Folding statement: # DEBUG rm_encoding => rm_encoding_137
Not folded
Folding statement: if (D.45238_986 != 1)
Not folded
Folding statement: D.45238_986 = imp_985->codec_type;
Not folded
Folding statement: # DEBUG imp => imp_985
Not folded
Folding statement: imp_985 = *D.45237_984;
Not folded
Folding statement: D.45237_984 = codec_array_84 + D.45236_983;
Not folded
Folding statement: D.45236_983 = i.99_982 * 4;
Not folded
Folding statement: i.99_982 = (unsigned int) i_139;
Not folded
Folding statement: if (D.45241_988 == 0)
Not folded
Folding statement: D.45241_988 = switch_channel_direction (D.44530_987);
Not folded
Folding statement: D.44530_987 = session_161(D)->channel;
Not folded
Folding statement: if (D.45244_990 != 0)
Not folded
Folding statement: D.45244_990 = switch_channel_test_flag (D.44530_989, 114);
Not folded
Folding statement: D.44530_989 = session_161(D)->channel;
Not folded
Folding PHI node: .MEM_1158 = PHI <.MEM_1419(449), .MEM_1420(450)>
No folding possible
Folding statement: if (D.45255_996 == 0B)
Not folded
Folding statement: # DEBUG s => D.45255_996
Not folded
Folding statement: D.45255_996 = map_136->rm_encoding;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
Not folded
Folding statement: D.45251_995 = (int) D.45250_994;
Not folded
Folding statement: D.45250_994 = imp_985->ianacode;
Not folded
Folding statement: D.45249_993 = imp_985->iananame;
Not folded
Folding statement: D.45248_992 = (int) D.45247_991;
Not folded
Folding statement: D.45247_991 = map_136->rm_pt;
Not folded
Folding statement: if (D.47957_1503 == 0)
Not folded
Folding statement: D.47957_1503 = *D.45255_996;
Not folded
Folding PHI node: D.47956_1504 = PHI <1(451), 1(452), 0(453)>
No folding possible
Folding statement: if (D.47956_1504 != 0)
Not folded
Folding statement: if (D.44937_1001 != 0)
Not folded
Folding statement: D.44937_1001 = D.44936_1000 & 1;
Not folded
Folding statement: D.44936_1000 = (int) D.44821_999;
Not folded
Folding statement: D.44821_999 = D.44471_998->ndlb;
Not folded
Folding statement: D.44471_998 = smh_186->mparams;
Not folded
Folding statement: if (D.45248_1004 <= 95)
Not folded
Folding statement: D.45248_1004 = (int) D.45247_1003;
Not folded
Folding statement: D.45247_1003 = map_136->rm_pt;
Not folded
Folding statement: # DEBUG vmatch => vmatch_1009
Not folded
Folding statement: vmatch_1009 = D.45248_1006 == D.45251_1008;
Folded into: vmatch_1009 = D.45248_1004 == D.45251_1008;

Folding statement: D.45251_1008 = (int) D.45250_1007;
Not folded
Folding statement: D.45250_1007 = imp_985->ianacode;
Not folded
Removing dead stmt D.45248_1006 = D.45248_1004;

Removing dead stmt D.45247_1005 = D.45247_1003;

Folding statement: # DEBUG vmatch => vmatch_1012
Not folded
Folding statement: vmatch_1012 = D.45259_1011 == 0;
Not folded
Folding statement: D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
Not folded
Folding statement: D.45249_1010 = imp_985->iananame;
Not folded
Folding PHI node: vmatch_138 = PHI <vmatch_1009(457), vmatch_1012(458)>
No folding possible
Folding statement: if (vmatch_138 != 0)
Not folded
Folding statement: # DEBUG vmatch => vmatch_138
Not folded
Folding statement: if (D.45262_1013 == D.45263_1014)
Not folded
Folding statement: D.45263_1014 = imp_985->samples_per_second;
Not folded
Folding statement: D.45262_1013 = map_136->rm_rate;
Not folded
Folding statement: # DEBUG m_idx => m_idx_1018
Not folded
Folding statement: m_idx_1018 = m_idx_110 + 1;
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
Not folded
Folding statement: D.45251_1017 = (int) D.45250_1016;
Not folded
Folding statement: D.45250_1016 = imp_985->ianacode;
Not folded
Folding statement: D.45249_1015 = imp_985->iananame;
Not folded
Folding statement: matches[m_idx_110].map = map_136;
Not folded
Folding statement: matches[m_idx_110].imp = imp_985;
Not folded
Folding PHI node: m_idx_109 = PHI <m_idx_110(448), m_idx_110(450), m_idx_110(460), m_idx_110(459), m_idx_1018(461)>
No folding possible
Folding PHI node: .MEM_1160 = PHI <.MEM_1161(448), .MEM_1420(450), .MEM_1421(460), .MEM_1421(459), .MEM_1424(461)>
No folding possible
Folding statement: # DEBUG i => i_1020
Not folded
Folding statement: i_1020 = i_139 + 1;
Not folded
Folding statement: # DEBUG m_idx => m_idx_109
Not folded
Folding PHI node: m_idx_110 = PHI <m_idx_111(447), m_idx_109(462)>
No folding possible
Folding PHI node: i_139 = PHI <0(447), i_1020(462)>
No folding possible
Folding PHI node: .MEM_1161 = PHI <.MEM_1157(447), .MEM_1160(462)>
No folding possible
Folding statement: if (i_139 < total_codecs_85)
Not folded
Folding statement: # DEBUG m_idx => m_idx_110
Not folded
Folding statement: # DEBUG i => i_139
Not folded
Folding statement: # DEBUG map => map_1021
Not folded
Folding statement: map_1021 = map_136->rm_next;
Not folded
Folding PHI node: got_video_crypto_62 = PHI <got_video_crypto_64(391), got_video_crypto_61(464)>
No folding possible
Folding PHI node: m_idx_111 = PHI <0(391), m_idx_110(464)>
No folding possible
Folding PHI node: map_136 = PHI <map_883(391), map_1021(464)>
No folding possible
Folding PHI node: .MEM_1162 = PHI <.MEM_1405(391), .MEM_1161(464)>
No folding possible
Folding statement: if (map_136 != 0B)
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_62
Not folded
Folding statement: # DEBUG m_idx => m_idx_111
Not folded
Folding statement: # DEBUG map => map_136
Not folded
Folding statement: if (D.45267_1025 != 0)
Not folded
Folding statement: D.45267_1025 = D.45002_1023 && D.45266_1024;
Not folded
Folding statement: D.45266_1024 = got_video_crypto_62 <= 0;
Not folded
Folding statement: D.45002_1023 = D.45001_1022 == 1;
Not folded
Folding statement: D.45001_1022 = smh_186->crypto_mode;
Not folded
Folding statement: # DEBUG m_idx => 0
Not folded
Folding statement: # DEBUG vmatch => 0
Not folded
Folding statement: switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
Not folded
Folding PHI node: m_idx_112 = PHI <m_idx_111(466), 0(467)>
No folding possible
Folding PHI node: .MEM_1163 = PHI <.MEM_1162(466), .MEM_1425(467)>
No folding possible
Folding statement: if (m_idx_112 != 0)
Not folded
Folding statement: # DEBUG m_idx => m_idx_112
Not folded
Folding statement: if (greedy_47 != 0)
Not folded
Folding statement: # DEBUG j => 0
Not folded
Folding statement: greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);
Not folded
Folding PHI node: .MEM_1164 = PHI <.MEM_1163(469), .MEM_1426(470)>
No folding possible
Folding statement: # DEBUG j => 0
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;
Not folded
Folding statement: # DEBUG vmatch => 1
Not folded
Folding statement: if (j_141 == 0)
Not folded
Folding statement: # DEBUG pmap => pmap_1044
Not folded
Folding statement: pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
Not folded
Folding statement: D.45283_1043 = (uint32_t) D.45282_1042;
Not folded
Folding statement: D.45282_1042 = D.45281_1041 / 1000;
Not folded
Folding statement: D.45281_1041 = D.45279_1040->microseconds_per_packet;
Folded into: D.45281_1041 = D.45279_1038->microseconds_per_packet;

Removing dead stmt D.45279_1040 = D.45279_1038;

Folding statement: D.45280_1039 = D.45279_1038->samples_per_second;
Not folded
Folding statement: D.45279_1038 = matches[j_141].imp;
Not folded
Folding statement: D.45278_1037 = (uint32_t) D.45277_1036;
Not folded
Folding statement: D.45277_1036 = D.45274_1035->rm_pt;
Folded into: D.45277_1036 = D.45274_1031->rm_pt;

Removing dead stmt D.45274_1035 = D.45274_1031;

Folding statement: D.45276_1034 = D.45274_1033->rm_fmtp;
Folded into: D.45276_1034 = D.45274_1031->rm_fmtp;

Removing dead stmt D.45274_1033 = D.45274_1031;

Folding statement: D.45275_1032 = D.45274_1031->rm_encoding;
Not folded
Folding statement: D.45274_1031 = matches[j_141].map;
Not folded
Folding statement: if (D.45287_1046 != 0B)
Not folded
Folding statement: D.45287_1046 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
Not folded
Folding statement: D.45286_1045->current = 1;
Folded into: pmap_1044->current = 1;

Removing dead stmt D.45286_1045 = pmap_1044;

Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1044;
Not folded
Folding statement: switch_rtp_set_default_payload (D.45287_1047, D.45290_1048);
Folded into: switch_rtp_set_default_payload (D.45287_1046, D.45290_1048);

Folding statement: D.45290_1048 = pmap_1044->pt;
Not folded
Removing dead stmt D.45287_1047 = D.45287_1046;

Folding PHI node: .MEM_1165 = PHI <.MEM_1428(472), .MEM_1430(473), .MEM_1431(474)>
No folding possible
Folding statement: # DEBUG j => j_1067
Not folded
Folding statement: j_1067 = j_141 + 1;
Not folded
Folding statement: pmap_1044->agreed_pt = D.45292_1066;
Not folded
Folding statement: D.45292_1066 = (unsigned char) D.45247_1065;
Not folded
Folding statement: D.45247_1065 = map_1050->rm_pt;
Not folded
Folding statement: pmap_1044->rm_fmtp = D.45298_1064;
Not folded
Folding statement: D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
Not folded
Folding statement: D.45297_1063 = map_1050->rm_fmtp;
Not folded
Folding statement: pmap_1044->remote_sdp_port = D.45087_1062;
Not folded
Folding statement: D.45087_1062 = (short unsigned int) D.44697_1061;
Not folded
Folding statement: D.44697_1061 = m_28->m_port;
Not folded
Folding statement: pmap_1044->remote_sdp_ip = D.45296_1060;
Not folded
Folding statement: D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);
Not folded
Folding statement: D.45085_1059 = connection_125->c_address;
Not folded
Folding statement: pmap_1044->codec_ms = D.45295_1058;
Not folded
Folding statement: D.45295_1058 = (uint32_t) D.45294_1057;
Not folded
Folding statement: D.45294_1057 = D.45293_1056 / 1000;
Not folded
Folding statement: D.45293_1056 = mimp_1049->microseconds_per_packet;
Not folded
Folding statement: pmap_1044->rm_rate = D.45262_1055;
Not folded
Folding statement: D.45262_1055 = map_1050->rm_rate;
Not folded
Folding statement: pmap_1044->recv_pt = D.45292_1054;
Not folded
Folding statement: D.45292_1054 = (unsigned char) D.45247_1053;
Not folded
Folding statement: D.45247_1053 = map_1050->rm_pt;
Not folded
Folding statement: pmap_1044->rm_encoding = D.45291_1052;
Not folded
Folding statement: D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
Not folded
Folding statement: D.45255_1051 = map_1050->rm_encoding;
Not folded
Folding statement: # DEBUG map => map_1050
Not folded
Folding statement: map_1050 = matches[j_141].map;
Not folded
Folding statement: # DEBUG mimp => mimp_1049
Not folded
Folding statement: mimp_1049 = matches[j_141].imp;
Not folded
Folding PHI node: j_141 = PHI <0(471), j_1067(475)>
No folding possible
Folding PHI node: .MEM_1166 = PHI <.MEM_1427(471), .MEM_1442(475)>
No folding possible
Folding statement: if (j_141 < m_idx_112)
Not folded
Folding statement: # DEBUG j => j_141
Not folded
Folding statement: if (match_16 == 0)
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);
Not folded
Folding statement: D.44530_1085 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45306_1084);
Not folded
Folding statement: D.45306_1084 = (int) D.45305_1083;
Not folded
Folding statement: D.45305_1083 = D.45286_1082->recv_pt;
Not folded
Folding statement: D.45286_1082 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: switch_core_media_check_video_codecs (session_161(D));
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);
Not folded
Folding statement: D.44530_1081 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45304_1080);
Not folded
Folding statement: D.45304_1080 = (int) D.45303_1079;
Not folded
Folding statement: D.45303_1079 = D.45286_1078->agreed_pt;
Not folded
Folding statement: D.45286_1078 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);
Not folded
Folding statement: D.45302_1077 = D.45286_1076->rm_fmtp;
Not folded
Folding statement: D.45286_1076 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: D.44530_1075 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);
Not folded
Folding statement: D.44530_1074 = session_161(D)->channel;
Not folded
Folding statement: switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);
Not folded
Folding statement: D.45301_1073 = D.45286_1072->remote_sdp_ip;
Not folded
Folding statement: D.45286_1072 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: D.44530_1071 = session_161(D)->channel;
Not folded
Folding statement: switch_snprintf (&tmp, 50, "%d", D.45300_1070);
Not folded
Folding statement: D.45300_1070 = (int) D.45299_1069;
Not folded
Folding statement: D.45299_1069 = D.45286_1068->remote_sdp_port;
Not folded
Folding statement: D.45286_1068 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
Not folded
Folding statement: # DEBUG match => 1
Not folded
Folding PHI node: match_14 = PHI <match_16(477), 1(478)>
No folding possible
Folding statement: if (D.45312_1090 != 0B)
Not folded
Folding statement: # DEBUG codec => D.45312_1090
Not folded
Folding statement: D.45312_1090 = &MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].read_codec;
Not folded
Folding statement: # DEBUG match => match_14
Not folded
Folding statement: if (D.47964_1506 != 0)
Not folded
Folding statement: D.47964_1506 = D.47965_1505 & 256;
Not folded
Folding statement: D.47965_1505 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
Not folded
Folding statement: if (D.47963_1507 != 0B)
Not folded
Folding statement: D.47963_1507 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
Not folded
Folding statement: if (D.47962_1508 != 0B)
Not folded
Folding statement: D.47962_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
Not folded
Folding statement: if (D.47961_1509 != 0B)
Not folded
Folding statement: D.47961_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
Not folded
Folding PHI node: iftmp.104_1510 = PHI <1(483), 0(484)>
No folding possible
Folding statement: if (iftmp.104_1510 != 0)
Not folded
Folding statement: MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;
Not folded
Folding PHI node: .MEM_1167 = PHI <.MEM_1451(485), .MEM_1452(486)>
No folding possible
Folding statement: if (D.45316_1092 == 0)
Not folded
Folding statement: D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);
Not folded
Folding statement: check_ice (smh_186, 1, sdp_198, m_28);
Not folded
Folding PHI node: match_15 = PHI <match_13(383), match_16(385), match_16(386), match_16(468), match_14(487), match_14(488), match_13(369), match_13(370), match_13(367), match_13(368), match_13(384)>
No folding possible
Folding PHI node: best_te_22 = PHI <best_te_21(383), best_te_23(385), best_te_23(386), best_te_23(468), best_te_23(487), best_te_23(488), best_te_21(369), best_te_21(370), best_te_21(367), best_te_21(368), best_te_21(384)>
No folding possible
Folding PHI node: cng_pt_26 = PHI <cng_pt_25(383), cng_pt_27(385), cng_pt_27(386), cng_pt_27(468), cng_pt_27(487), cng_pt_27(488), cng_pt_25(369), cng_pt_25(370), cng_pt_25(367), cng_pt_25(368), cng_pt_25(384)>
No folding possible
Folding PHI node: got_crypto_55 = PHI <got_crypto_54(383), got_crypto_56(385), got_crypto_56(386), got_crypto_56(468), got_crypto_56(487), got_crypto_56(488), got_crypto_54(369), got_crypto_54(370), got_crypto_54(367), got_crypto_54(368), got_crypto_54(384)>
No folding possible
Folding PHI node: got_video_crypto_63 = PHI <got_video_crypto_64(383), got_video_crypto_64(385), got_video_crypto_64(386), got_video_crypto_62(468), got_video_crypto_62(487), got_video_crypto_62(488), got_video_crypto_64(369), got_video_crypto_64(370), got_video_crypto_64(367), got_video_crypto_64(368), got_video_crypto_64(384)>
No folding possible
Folding PHI node: got_audio_66 = PHI <got_audio_65(383), got_audio_67(385), got_audio_67(386), got_audio_67(468), got_audio_67(487), got_audio_67(488), got_audio_65(369), got_audio_65(370), got_audio_65(367), got_audio_65(368), got_audio_65(384)>
No folding possible
Folding PHI node: codec_ms_94 = PHI <codec_ms_93(383), codec_ms_95(385), codec_ms_95(386), codec_ms_95(468), codec_ms_95(487), codec_ms_95(488), codec_ms_93(369), codec_ms_93(370), codec_ms_93(367), codec_ms_93(368), codec_ms_93(384)>
No folding possible
Folding PHI node: m_idx_113 = PHI <m_idx_107(383), m_idx_114(385), m_idx_114(386), m_idx_112(468), m_idx_112(487), m_idx_112(488), m_idx_107(369), m_idx_107(370), m_idx_107(367), m_idx_107(368), m_idx_107(384)>
No folding possible
Folding PHI node: nm_idx_121 = PHI <nm_idx_120(383), nm_idx_122(385), nm_idx_122(386), 0(468), 0(487), 0(488), nm_idx_120(369), nm_idx_120(370), nm_idx_120(367), nm_idx_120(368), nm_idx_120(384)>
No folding possible
Folding PHI node: .MEM_1168 = PHI <.MEM_1398(383), .MEM_1113(385), .MEM_1113(386), .MEM_1163(468), .MEM_1453(487), .MEM_1454(488), .MEM_1387(369), .MEM_1391(370), .MEM_1380(367), .MEM_1382(368), .MEM_1402(384)>
No folding possible
Folding statement: # DEBUG m => m_1093
Not folded
Folding statement: m_1093 = m_28->m_next;
Not folded
Folding statement: # DEBUG match => match_15
Not folded
Folding statement: # DEBUG best_te => best_te_22
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_26
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_55
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_63
Not folded
Folding statement: # DEBUG got_audio => got_audio_66
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_94
Not folded
Folding statement: # DEBUG m_idx => m_idx_113
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_121
Not folded
Folding PHI node: match_16 = PHI <0(131), match_15(489)>
No folding possible
Folding PHI node: best_te_23 = PHI <0(131), best_te_22(489)>
No folding possible
Folding PHI node: cng_pt_27 = PHI <0(131), cng_pt_26(489)>
No folding possible
Folding PHI node: m_28 = PHI <m_370(131), m_1093(489)>
No folding possible
Folding PHI node: got_crypto_56 = PHI <0(131), got_crypto_55(489)>
No folding possible
Folding PHI node: got_video_crypto_64 = PHI <0(131), got_video_crypto_63(489)>
No folding possible
Folding PHI node: got_audio_67 = PHI <0(131), got_audio_66(489)>
No folding possible
Folding PHI node: got_avp_69 = PHI <0(131), got_avp_68(489)>
No folding possible
Folding PHI node: got_savp_75 = PHI <0(131), got_savp_74(489)>
No folding possible
Folding PHI node: got_udptl_77 = PHI <0(131), got_udptl_76(489)>
No folding possible
Folding PHI node: got_webrtc_79 = PHI <0(131), got_webrtc_78(489)>
No folding possible
Folding PHI node: codec_ms_95 = PHI <0(131), codec_ms_94(489)>
No folding possible
Folding PHI node: m_idx_114 = PHI <0(131), m_idx_113(489)>
No folding possible
Folding PHI node: nm_idx_122 = PHI <0(131), nm_idx_121(489)>
No folding possible
Folding PHI node: .MEM_1169 = PHI <.MEM_1232(131), .MEM_1168(489)>
No folding possible
Folding statement: if (m_28 != 0B)
Not folded
Folding statement: # DEBUG match => match_16
Not folded
Folding statement: # DEBUG best_te => best_te_23
Not folded
Folding statement: # DEBUG cng_pt => cng_pt_27
Not folded
Folding statement: # DEBUG m => m_28
Not folded
Folding statement: # DEBUG got_crypto => got_crypto_56
Not folded
Folding statement: # DEBUG got_video_crypto => got_video_crypto_64
Not folded
Folding statement: # DEBUG got_audio => got_audio_67
Not folded
Folding statement: # DEBUG got_avp => got_avp_69
Not folded
Folding statement: # DEBUG got_video_avp => NULL
Not folded
Folding statement: # DEBUG got_video_savp => NULL
Not folded
Folding statement: # DEBUG got_savp => got_savp_75
Not folded
Folding statement: # DEBUG got_udptl => got_udptl_77
Not folded
Folding statement: # DEBUG got_webrtc => got_webrtc_79
Not folded
Folding statement: # DEBUG codec_ms => codec_ms_95
Not folded
Folding statement: # DEBUG m_idx => m_idx_114
Not folded
Folding statement: # DEBUG nm_idx => nm_idx_122
Not folded
Folding PHI node: match_17 = PHI <1(148), 0(150), 0(168), 1(166), 0(223), 0(229), 0(233), 0(390), 0(441), match_16(490), 1(165), 1(178)>
No folding possible
Folding PHI node: .MEM_1170 = PHI <.MEM_1236(148), .MEM_1239(150), .MEM_1259(168), .MEM_1250(166), .MEM_1297(223), .MEM_1299(229), .MEM_1300(233), .MEM_1406(390), .MEM_1417(441), .MEM_1169(490), .MEM_1118(165), .MEM_1289(178)>
No folding possible
Folding statement: if (parser_196 != 0B)
Not folded
Folding statement: # DEBUG match => match_17
Not folded
Folding statement: done:
Not folded
Folding statement: sdp_parser_free (parser_196);
Not folded
Folding PHI node: .MEM_1171 = PHI <.MEM_1170(491), .MEM_1455(492)>
No folding possible
Folding statement: D.44471_1094->cng_pt = cng_pt_27;
Not folded
Folding statement: D.44471_1094 = smh_186->mparams;
Not folded
Folding PHI node: match_142 = PHI <0(4), 0(5), 0(7), match_17(493)>
No folding possible
Folding statement: return match_142;
Not folded
Removing basic block 315
;; basic block 315, loop depth 1, count 0
;; prev block 314, next block 316
;; pred:      
;; succ:       324 [100.0%]  (fallthru,exec)
<bb 315>:
goto <bb 324>;


Scope blocks after cleanups:

{ Scope block #0 
  uint8_t match;
  switch_payload_t best_te;
  switch_payload_t te;
  switch_payload_t cng_pt;
  struct sdp_media_t * m;
  struct sdp_attribute_t * attr;
  int ptime;
  int dptime;
  int maxptime;
  int dmaxptime;
  int sendonly;
  int recvonly;
  int greedy;
  int x;
  int skip; (unused)
  struct switch_channel_t * channel;
  const char * val;
  const char * crypto;
  int got_crypto;
  int got_video_crypto;
  int got_audio;
  int got_avp;
  int got_video_avp; (unused)
  int got_video_savp; (unused)
  int got_savp;
  int got_udptl;
  int got_webrtc;
  int scrooge;
  struct sdp_parser_t * parser;
  struct sdp_session_t * sdp;
  int reneg;
  const struct switch_codec_implementation_t * * codec_array;
  int total_codecs;
  struct switch_rtp_engine_t * a_engine; (unused)
  struct switch_rtp_engine_t * v_engine; (unused)
  struct switch_media_handle_t * smh;
  uint32_t near_rate;
  const struct switch_codec_implementation_t * mimp;
  const struct switch_codec_implementation_t * near_match;
  struct sdp_rtpmap_t * mmap;
  struct sdp_rtpmap_t * near_map;
  struct matches matches[30];
  struct matches near_matches[30];
  int codec_ms;
  uint32_t remote_codec_rate;
  uint32_t fmtp_remote_codec_rate;
  const char * tmp;
  int m_idx;
  int nm_idx;
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_negotiate_sdp";
  static const char __func__[32] = "switch_core_media_negotiate_sdp";
  void done = <<< error >>>; (unused)

  { Scope block #984 src/switch_core_media.c:3058 Originating from :  static int switch_true (const char *); 
    const char * expr; (unused)

    { Scope block #985 Originating from :#0 

      { Scope block #986 ./src/include/switch_utils.h:436 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (nonlocalized)

        { Scope block #987 Originating from :#0 

        }

      }

    }

  }

  { Scope block #988 src/switch_core_media.c:3043 Originating from :  static int switch_true (const char *); 
    const char * expr; (unused)

    { Scope block #989 Originating from :#0 

      { Scope block #990 ./src/include/switch_utils.h:436 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (nonlocalized)

        { Scope block #991 Originating from :#0 

        }

      }

    }

  }

  { Scope block #992 src/switch_core_media.c:2995 Originating from :  static int switch_true (const char *); 
    const char * expr; (unused)

    { Scope block #993 Originating from :#0 

      { Scope block #994 ./src/include/switch_utils.h:436 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (nonlocalized)

        { Scope block #995 Originating from :#0 

        }

      }

    }

  }

  { Scope block #996 src/switch_core_media.c:2943 Originating from :  static int switch_false (const char *); 
    const char * expr; (unused)

    { Scope block #997 Originating from :#0 

      { Scope block #998 ./src/include/switch_utils.h:468 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (nonlocalized)

        { Scope block #999 Originating from :#0 

        }

      }

    }

  }

  { Scope block #1000 src/switch_core_media.c:3033 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #1001 Originating from :#0 

    }

  }

  { Scope block #1002 src/switch_core_media.c:3031 Originating from :  extern int atoi (const char *); 
    const char * __nptr; (unused)

    { Scope block #1003 Originating from :#0 

    }

  }

  { Scope block #1004 src/switch_core_media.c:3006 Originating from :  static int _zstr (const char *); 
    const char * s; (unused)

    { Scope block #1005 Originating from :#0 

    }

  }

  { Scope block #1006 src/switch_core_media.c:2951 Originating from :  static void clear_pmaps (struct switch_rtp_engine_t *); 
    struct switch_rtp_engine_t * engine; (unused)

    { Scope block #1007 Originating from :#0 
      struct payload_map_t * pmap;

    }

  }

  { Scope block #1008 src/switch_core_media.c:2950 Originating from :  static void clear_pmaps (struct switch_rtp_engine_t *); 
    struct switch_rtp_engine_t * engine; (unused)

    { Scope block #1009 Originating from :#0 
      struct payload_map_t * pmap;

    }

  }

  { Scope block #1010 
    size_t __s1_len; (unused)
    size_t __s2_len; (unused)

    { Scope block #1011 
      const unsigned char * __s1; (unused)
      register int __result;

    }

  }

  { Scope block #1012 
    struct sdp_connection_t * connection;
    struct switch_core_session_t * other_session;

    { Scope block #1013 
      struct switch_t38_options_t * t38_options;

      { Scope block #1014 
        const char * var;
        int pass;

        { Scope block #1015 
          struct switch_channel_t * other_channel;
          struct switch_core_session_message_t * msg;
          char * remote_host;
          switch_port_t remote_port;
          char tmp[32];

          { Scope block #1016 
            size_t __s1_len; (unused)
            size_t __s2_len; (unused)

          }

          { Scope block #1017 
            const char * err;

          }

        }

      }

    }

    { Scope block #1018 
      struct sdp_rtpmap_t * map;

      { Scope block #1019 src/switch_core_media.c:3638 Originating from :  static int switch_false (const char *); 
        const char * expr; (unused)

        { Scope block #1020 Originating from :#0 

          { Scope block #1021 ./src/include/switch_utils.h:468 Originating from :  extern int atoi (const char *); 
            const char * __nptr; (nonlocalized)

            { Scope block #1022 Originating from :#0 

            }

          }

        }

      }

      { Scope block #1023 src/switch_core_media.c:3256 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #1024 Originating from :#0 

        }

      }

      { Scope block #1025 src/switch_core_media.c:3255 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #1026 Originating from :#0 

        }

      }

      { Scope block #1027 src/switch_core_media.c:3253 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #1028 Originating from :#0 

        }

      }

      { Scope block #1029 src/switch_core_media.c:3248 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #1030 Originating from :#0 

        }

      }

      { Scope block #1031 src/switch_core_media.c:3238 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #1032 Originating from :#0 

        }

      }

      { Scope block #1033 
        int crypto_tag;

        { Scope block #1034 src/switch_core_media.c:3260 Originating from :  static int switch_true (const char *); 
          const char * expr; (unused)

          { Scope block #1035 Originating from :#0 

            { Scope block #1036 ./src/include/switch_utils.h:436 Originating from :  extern int atoi (const char *); 
              const char * __nptr; (nonlocalized)

              { Scope block #1037 Originating from :#0 

              }

            }

          }

        }

        { Scope block #1038 src/switch_core_media.c:3269 Originating from :  extern int atoi (const char *); 
          const char * __nptr; (unused)

          { Scope block #1039 Originating from :#0 

          }

        }

      }

      { Scope block #1040 
        int32_t i;
        const char * rm_encoding;
        uint32_t map_bit_rate;
        struct switch_codec_fmtp_t codec_fmtp;

        { Scope block #1041 src/switch_core_media.c:3352 Originating from :  static int _zstr (const char *); 
          const char * s; (unused)

          { Scope block #1042 Originating from :#0 

          }

        }

        { Scope block #1043 src/switch_core_media.c:3342 Originating from :  static uint32_t switch_known_bitrate (switch_payload_t); 
          switch_payload_t payload; (unused)

        }

        { Scope block #1044 
          const struct switch_codec_implementation_t * imp;
          uint32_t bit_rate;
          uint32_t codec_rate;

          { Scope block #1045 src/switch_core_media.c:3386 Originating from :  static int _zstr (const char *); 
            const char * s; (unused)

            { Scope block #1046 Originating from :#0 

            }

          }

        }

      }

      { Scope block #1047 
        int j;

        { Scope block #1048 
          const struct switch_codec_implementation_t * search[1];
          char * prefs[1];
          char tmp[80];
          int num;
          const struct switch_codec_implementation_t * timp;

        }

      }

      { Scope block #1049 
        int j;

        { Scope block #1050 
          struct payload_map_t * pmap;

          { Scope block #1051 src/switch_core_media.c:3554 Originating from :  static int _zstr (const char *); 
            const char * s; (unused)

            { Scope block #1052 Originating from :#0 

            }

          }

          { Scope block #1053 src/switch_core_media.c:3545 Originating from :  extern int atoi (const char *); 
            const char * __nptr; (unused)

            { Scope block #1054 Originating from :#0 

            }

          }

        }

      }

      { Scope block #1055 
        char tmp[50];

        { Scope block #1056 src/switch_core_media.c:3595 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
          struct switch_codec_t * codec; (unused)

          { Scope block #1057 Originating from :#0 

          }

        }

      }

    }

    { Scope block #1058 
      struct sdp_rtpmap_t * map;
      const char * rm_encoding;
      const struct switch_codec_implementation_t * mimp;
      int vmatch;
      int i;

      { Scope block #1059 src/switch_core_media.c:3705 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #1060 Originating from :#0 

        }

      }

      { Scope block #1061 src/switch_core_media.c:3701 Originating from :  extern int atoi (const char *); 
        const char * __nptr; (unused)

        { Scope block #1062 Originating from :#0 

        }

      }

      { Scope block #1063 src/switch_core_media.c:3688 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #1064 Originating from :#0 

        }

      }

      { Scope block #1065 src/switch_core_media.c:3678 Originating from :  static int _zstr (const char *); 
        const char * s; (unused)

        { Scope block #1066 Originating from :#0 

        }

      }

      { Scope block #1067 
        size_t __s1_len; (unused)
        size_t __s2_len; (unused)

        { Scope block #1068 
          const unsigned char * __s1;
          register int __result;

        }

      }

      { Scope block #1069 
        int crypto_tag;

        { Scope block #1070 src/switch_core_media.c:3709 Originating from :  static int switch_true (const char *); 
          const char * expr; (unused)

          { Scope block #1071 Originating from :#0 

            { Scope block #1072 ./src/include/switch_utils.h:436 Originating from :  extern int atoi (const char *); 
              const char * __nptr; (nonlocalized)

              { Scope block #1073 Originating from :#0 

              }

            }

          }

        }

        { Scope block #1074 src/switch_core_media.c:3718 Originating from :  extern int atoi (const char *); 
          const char * __nptr; (unused)

          { Scope block #1075 Originating from :#0 

          }

        }

      }

      { Scope block #1076 
        const struct switch_codec_implementation_t * imp;

        { Scope block #1077 src/switch_core_media.c:3745 Originating from :  static int _zstr (const char *); 
          const char * s; (unused)

          { Scope block #1078 Originating from :#0 

          }

        }

      }

      { Scope block #1079 
        char tmp[50];
        int j;

        { Scope block #1080 src/switch_core_media.c:3838 Originating from :  static switch_bool_t switch_core_codec_ready (struct switch_codec_t *); 
          struct switch_codec_t * codec; (unused)

          { Scope block #1081 Originating from :#0 

          }

        }

        { Scope block #1082 
          struct payload_map_t * pmap;

        }

      }

    }

  }

}
switch_core_media_negotiate_sdp (struct switch_core_session_t * session, const char * r_sdp, uint8_t * proceed, switch_sdp_type_t sdp_type)
{
  int D.49755;
  switch_bool_t D.49754;
  int D.49753;
  int D.49752;
  int D.49751;
  int D.49750;
  int D.49749;
  int D.49748;
  int D.49747;
  int D.49745;
  int D.49743;
  switch_bool_t D.49742;
  int D.49741;
  int D.49740;
  int D.49739;
  int D.49738;
  int D.49737;
  int D.49736;
  int D.49735;
  int D.49733;
  int D.49731;
  switch_bool_t D.49730;
  int D.49729;
  int D.49728;
  int D.49727;
  int D.49726;
  int D.49725;
  int D.49724;
  int D.49723;
  int D.49721;
  int D.49719;
  switch_bool_t D.49718;
  int D.49717;
  int D.49716;
  int D.49715;
  int D.49714;
  int D.49713;
  int D.49712;
  int D.49711;
  int D.49707;
  switch_bool_t D.49706;
  int D.49705;
  int D.49704;
  int D.49703;
  int D.49702;
  int D.49701;
  int D.49700;
  int D.49699;
  int D.49697;
  int D.49695;
  switch_bool_t D.49694;
  int D.49693;
  int D.49692;
  int D.49691;
  int D.49690;
  int D.49689;
  int D.49688;
  int D.49687;
  int D.49685;
  int D.49683;
  switch_bool_t D.49682;
  int D.49681;
  int D.49680;
  int D.49679;
  int D.49678;
  int D.49677;
  int D.49676;
  int D.49675;
  int D.49673;
  int iftmp.104;
  uint32_t D.47965;
  uint32_t D.47964;
  struct switch_mutex_t * D.47963;
  struct switch_codec_interface_t * D.47962;
  const struct switch_codec_implementation_t * D.47961;
  const char D.47957;
  int D.47956;
  const char D.47950;
  int D.47949;
  int D.47946;
  const char D.47943;
  int D.47942;
  const char D.47939;
  int D.47938;
  int iftmp.104;
  uint32_t D.47934;
  uint32_t D.47933;
  struct switch_mutex_t * D.47932;
  struct switch_codec_interface_t * D.47931;
  const struct switch_codec_implementation_t * D.47930;
  const char D.47926;
  int D.47925;
  int D.47922;
  const char D.47919;
  int D.47918;
  const char D.47915;
  int D.47914;
  unsigned char csui.173;
  const char D.47900;
  int D.47899;
  int D.47890;
  const char D.47887;
  int D.47886;
  const char D.47877;
  int D.47876;
  uint8_t D.47874;
  struct payload_map_t * pmap;
  uint8_t D.47871;
  struct payload_map_t * pmap;
  struct payload_map_t * pmap;
  int j;
  char tmp[50];
  const struct switch_codec_implementation_t * imp;
  int crypto_tag;
  register int __result;
  const unsigned char * __s1;
  int i;
  int vmatch;
  const struct switch_codec_implementation_t * mimp;
  const char * rm_encoding;
  struct sdp_rtpmap_t * map;
  char tmp[50];
  struct payload_map_t * pmap;
  int j;
  const struct switch_codec_implementation_t * timp;
  int num;
  char tmp[80];
  char * prefs[1];
  const struct switch_codec_implementation_t * search[1];
  int j;
  uint32_t codec_rate;
  uint32_t bit_rate;
  const struct switch_codec_implementation_t * imp;
  struct switch_codec_fmtp_t codec_fmtp;
  uint32_t map_bit_rate;
  const char * rm_encoding;
  int32_t i;
  int crypto_tag;
  struct sdp_rtpmap_t * map;
  const char * err;
  char tmp[32];
  switch_port_t remote_port;
  char * remote_host;
  struct switch_core_session_message_t * msg;
  struct switch_channel_t * other_channel;
  int pass;
  const char * var;
  struct switch_t38_options_t * t38_options;
  struct switch_core_session_t * other_session;
  struct sdp_connection_t * connection;
  register int __result;
  static const char __func__[32] = "switch_core_media_negotiate_sdp";
  static const char __PRETTY_FUNCTION__[32] = "switch_core_media_negotiate_sdp";
  int nm_idx;
  int m_idx;
  const char * tmp;
  uint32_t fmtp_remote_codec_rate;
  uint32_t remote_codec_rate;
  int codec_ms;
  struct matches near_matches[30];
  struct matches matches[30];
  struct sdp_rtpmap_t * near_map;
  struct sdp_rtpmap_t * mmap;
  const struct switch_codec_implementation_t * near_match;
  const struct switch_codec_implementation_t * mimp;
  uint32_t near_rate;
  struct switch_media_handle_t * smh;
  int total_codecs;
  const struct switch_codec_implementation_t * * codec_array;
  int reneg;
  struct sdp_session_t * sdp;
  struct sdp_parser_t * parser;
  int scrooge;
  int got_webrtc;
  int got_udptl;
  int got_savp;
  int got_avp;
  int got_audio;
  int got_video_crypto;
  int got_crypto;
  const char * crypto;
  const char * val;
  struct switch_channel_t * channel;
  int x;
  int greedy;
  int recvonly;
  int sendonly;
  int dmaxptime;
  int maxptime;
  int dptime;
  int ptime;
  struct sdp_attribute_t * attr;
  struct sdp_media_t * m;
  switch_payload_t cng_pt;
  switch_payload_t te;
  switch_payload_t best_te;
  uint8_t match;
  switch_status_t D.45316;
  struct switch_codec_t * D.45312;
  int D.45306;
  switch_payload_t D.45305;
  int D.45304;
  switch_payload_t D.45303;
  char * D.45302;
  char * D.45301;
  int D.45300;
  switch_port_t D.45299;
  char * D.45298;
  const char * D.45297;
  char * D.45296;
  uint32_t D.45295;
  int D.45294;
  const int D.45293;
  unsigned char D.45292;
  char * D.45291;
  switch_payload_t D.45290;
  struct switch_rtp_t * D.45287;
  struct payload_map_t * D.45286;
  uint32_t D.45283;
  int D.45282;
  const int D.45281;
  const uint32_t D.45280;
  const struct switch_codec_implementation_t * D.45279;
  uint32_t D.45278;
  <unnamed-unsigned:7> D.45277;
  const char * D.45276;
  const char * D.45275;
  struct sdp_rtpmap_t * D.45274;
  _Bool D.45267;
  _Bool D.45266;
  const uint32_t D.45263;
  long unsigned int D.45262;
  int D.45259;
  const char * D.45255;
  int D.45251;
  const switch_payload_t D.45250;
  char * const D.45249;
  int D.45248;
  <unnamed-unsigned:7> D.45247;
  uint32_t D.45244;
  switch_call_direction_t D.45241;
  const switch_codec_type_t D.45238;
  const struct switch_codec_implementation_t * * D.45237;
  unsigned int D.45236;
  unsigned int i.99;
  const char * D.45227;
  int D.45219;
  char * D.45214;
  short unsigned int D.45213;
  const unsigned char D.45185;
  int D.45175;
  const unsigned char D.45174;
  int D.45168;
  uint8_t D.45164;
  uint8_t D.45163;
  const char * D.45160;
  int D.45154;
  int D.45151;
  int D.45143;
  int D.45140;
  int D.45137;
  const char * D.45124;
  int D.45120;
  switch_call_direction_t D.45114;
  int D.45111;
  switch_payload_t D.45110;
  uint32_t D.45109;
  int32_t D.45107;
  switch_status_t D.45099;
  uint32_t D.45098;
  struct switch_codec_t * D.45094;
  int D.45093;
  switch_payload_t D.45092;
  int D.45089;
  char * D.45088;
  short unsigned int D.45087;
  char * D.45086;
  const char * D.45085;
  const char * D.45082;
  const char * D.45079;
  int D.45070;
  const char * D.45066;
  uint32_t D.45064;
  const int D.45063;
  uint32_t D.45062;
  int D.45061;
  const int D.45060;
  const uint32_t D.45059;
  int D.45056;
  const uint32_t D.45055;
  unsigned char D.45054;
  <unnamed-unsigned:7> D.45053;
  char * D.45052;
  char * const D.45051;
  char * D.45050;
  const char * D.45049;
  switch_payload_t D.45048;
  uint32_t D.45043;
  int D.45042;
  const int D.45041;
  const uint32_t D.45040;
  const struct switch_codec_implementation_t * D.45039;
  uint32_t D.45038;
  <unnamed-unsigned:7> D.45037;
  const char * D.45036;
  const char * D.45035;
  struct sdp_rtpmap_t * D.45034;
  int near_rate.96;
  int D.45028;
  const uint32_t D.45027;
  char * const D.45026;
  int D.45025;
  const int D.45024;
  char * const D.45013;
  int D.45012;
  _Bool D.45009;
  _Bool D.45008;
  _Bool D.45007;
  _Bool D.45004;
  _Bool D.45003;
  _Bool D.45002;
  switch_rtp_crypto_mode_t D.45001;
  _Bool D.44999;
  _Bool D.44998;
  _Bool D.44997;
  int D.44996;
  int codec_rate.94;
  int D.44993;
  _Bool D.44991;
  _Bool D.44990;
  _Bool D.44989;
  const uint32_t D.44984;
  int D.44979;
  int D.44977;
  _Bool D.44974;
  _Bool D.44973;
  _Bool D.44972;
  _Bool D.44969;
  _Bool D.44968;
  int D.44963;
  int D.44960;
  _Bool D.44957;
  _Bool D.44956;
  _Bool D.44955;
  _Bool D.44952;
  _Bool D.44951;
  _Bool D.44950;
  const uint32_t D.44947;
  int D.44944;
  int iftmp.93;
  int D.44937;
  int D.44936;
  int D.44930;
  const int D.44929;
  int D.44928;
  const switch_payload_t D.44927;
  char * const D.44926;
  int remote_codec_rate.92;
  int D.44924;
  const switch_codec_type_t D.44921;
  const int D.44920;
  const struct switch_codec_implementation_t * * D.44919;
  unsigned int D.44918;
  unsigned int i.91;
  uint32_t D.44914;
  int D.44911;
  int D.44908;
  switch_status_t D.44905;
  int D.44901;
  int D.44897;
  const char * D.44893;
  int D.44890;
  const char * D.44889;
  uint32_t D.44885;
  uint32_t D.44884;
  _Bool D.44879;
  _Bool D.44878;
  _Bool D.44877;
  switch_payload_t D.44869;
  int D.44868;
  int D.44863;
  int32_t D.44858;
  int D.44857;
  <unnamed-unsigned:7> D.44856;
  long unsigned int D.44855;
  long unsigned int D.44854;
  int D.44848;
  int D.44839;
  _Bool D.44836;
  _Bool D.44835;
  _Bool D.44834;
  _Bool D.44831;
  _Bool D.44830;
  _Bool D.44829;
  const char * D.44825;
  unsigned int D.44822;
  switch_core_media_NDLB_t D.44821;
  int D.44815;
  int D.44810;
  int D.44805;
  char * D.44800;
  short unsigned int D.44799;
  int D.44795;
  int D.44787;
  int D.44784;
  int D.44781;
  _Bool D.44779;
  _Bool D.44778;
  _Bool D.44777;
  char * D.44773;
  struct switch_channel_t * D.44772;
  const char * err.90;
  switch_status_t D.44768;
  int D.44767;
  int D.44766;
  char * D.44765;
  char * D.44764;
  switch_port_t D.44762;
  char * D.44760;
  int D.39032;
  _Bool D.44758;
  _Bool D.44757;
  _Bool D.44756;
  uint16_t D.44753;
  char * D.44752;
  const char * D.44751;
  struct payload_map_t * D.44750;
  int D.44747;
  const char * D.44746;
  int D.44743;
  const char * D.44742;
  char * D.44741;
  char * D.44740;
  uint32_t D.44737;
  struct switch_core_session_t * other_session.89;
  switch_status_t D.44733;
  uint8_t D.44730;
  uint32_t D.44728;
  uint32_t D.44726;
  uint32_t D.44724;
  uint32_t D.44723;
  int D.44716;
  int D.44707;
  uint32_t D.44706;
  int D.44703;
  const char * D.44702;
  int D.44699;
  long unsigned int D.44697;
  sdp_media_e D.44681;
  _Bool D.44678;
  _Bool D.44677;
  _Bool D.44676;
  sdp_proto_e D.44675;
  int D.44672;
  const char * D.44669;
  sdp_proto_e D.44666;
  const char * D.44665;
  const char * D.44663;
  const char * D.44661;
  int D.44655;
  struct switch_media_bug_t * D.44649;
  int D.44640;
  int D.44639;
  int D.44636;
  int32_t D.44631;
  _Bool D.44626;
  _Bool D.44625;
  _Bool D.44624;
  int D.44621;
  const char * D.44619;
  int D.44616;
  int D.44614;
  uint8_t D.44606;
  struct switch_rtp_t * D.44605;
  int D.44602;
  int D.44598;
  int D.44594;
  const char * D.44590;
  const char * D.44548;
  struct sdp_connection_t * D.44546;
  _Bool D.44544;
  _Bool D.44543;
  _Bool D.44542;
  unsigned char D.44541;
  unsigned char D.44540;
  struct switch_channel_t * D.44530;
  unsigned int D.44529;
  char * D.44526;
  unsigned int D.44523;
  unsigned int D.44522;
  switch_rtp_bug_flag_t D.44521;
  char * D.44518;
  int D.44514;
  int D.44513;
  switch_rtp_bug_flag_t D.44512;
  char * D.44509;
  char * D.44508;
  const char * D.44507;
  struct sdp_origin_t * D.44506;
  int D.44502;
  int D.44498;
  int D.44494;
  int32_t D.44491;
  int32_t D.44490;
  struct switch_channel_t * D.44482;
  struct switch_core_session_t * D.44481;
  int D.44478;
  int D.44473;
  size_t D.44472;
  struct switch_core_media_params_t * D.44471;

<bb 2>:
  # DEBUG match => 0
  # DEBUG best_te => 0
  # DEBUG te => 0
  # DEBUG cng_pt => 0
  # DEBUG ptime => 0
  # DEBUG dptime => 0
  # DEBUG maxptime => 0
  # DEBUG dmaxptime => 0
  # DEBUG sendonly => 0
  # DEBUG recvonly => 0
  # DEBUG greedy => 0
  # DEBUG x => 0
  # DEBUG skip => 0
  channel_162 = switch_core_session_get_channel (session_161(D));
  # DEBUG channel => channel_162
  # DEBUG crypto => 0B
  # DEBUG got_crypto => 0
  # DEBUG got_video_crypto => 0
  # DEBUG got_audio => 0
  # DEBUG got_avp => 0
  # DEBUG got_video_avp => 0
  # DEBUG got_video_savp => 0
  # DEBUG got_savp => 0
  # DEBUG got_udptl => 0
  # DEBUG got_webrtc => 0
  # DEBUG scrooge => 0
  # DEBUG parser => 0B
  # DEBUG reneg => 1
  # DEBUG near_rate => 0
  # DEBUG mimp => 0B
  # DEBUG near_match => 0B
  # DEBUG mmap => 0B
  # DEBUG near_map => 0B
  matches = {};
  near_matches = {};
  # DEBUG codec_ms => 0
  # DEBUG remote_codec_rate => 0
  # DEBUG fmtp_remote_codec_rate => 0
  # DEBUG m_idx => 0
  # DEBUG nm_idx => 0
  if (session_161(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  __assert_fail ("session", "src/switch_core_media.c", 2922, &__PRETTY_FUNCTION__);

<bb 4>:
  smh_186 = session_161(D)->media_handle;
  # DEBUG smh => smh_186
  if (smh_186 == 0B)
    goto <bb 493>;
  else
    goto <bb 5>;

<bb 5>:
  # DEBUG D#15 => &smh_186->engines
  # DEBUG a_engine => D#15
  # DEBUG D#14 => &smh_186->engines[1]
  # DEBUG v_engine => D#14
  codec_array_190 = &smh_186->codecs;
  # DEBUG codec_array => codec_array_190
  D.44471_191 = smh_186->mparams;
  total_codecs_192 = D.44471_191->num_codecs;
  # DEBUG total_codecs => total_codecs_192
  D.44472_194 = strlen (r_sdp_193(D));
  D.44473_195 = (int) D.44472_194;
  parser_196 = sdp_parse (0B, r_sdp_193(D), D.44473_195, 0);
  # DEBUG parser => parser_196
  if (parser_196 == 0B)
    goto <bb 493>;
  else
    goto <bb 6>;

<bb 6>:
  sdp_198 = sdp_session (parser_196);
  # DEBUG sdp => sdp_198
  if (sdp_198 == 0B)
    goto <bb 7>;
  else
    goto <bb 8>;

<bb 7>:
  sdp_parser_free (parser_196);
  goto <bb 493>;

<bb 8>:
  D.44478_200 = dtls_ok (session_161(D));
  if (D.44478_200 != 0)
    goto <bb 9>;
  else
    goto <bb 23>;

<bb 9>:
  D.44481_201 = smh_186->session;
  D.44482_202 = D.44481_201->channel;
  tmp_203 = switch_channel_get_variable_dup (D.44482_202, "webrtc_enable_dtls", 1, -1);
  # DEBUG tmp => tmp_203
  if (tmp_203 != 0B)
    goto <bb 10>;
  else
    goto <bb 23>;

<bb 10>:
  # DEBUG expr => tmp_203
  if (tmp_203 != 0B)
    goto <bb 11>;
  else
    goto <bb 20>;

<bb 11>:
  D.49675_1550 = strcasecmp (tmp_203, "no");
  if (D.49675_1550 == 0)
    goto <bb 21>;
  else
    goto <bb 12>;

<bb 12>:
  D.49676_1551 = strcasecmp (tmp_203, "off");
  if (D.49676_1551 == 0)
    goto <bb 21>;
  else
    goto <bb 13>;

<bb 13>:
  D.49677_1552 = strcasecmp (tmp_203, "false");
  if (D.49677_1552 == 0)
    goto <bb 21>;
  else
    goto <bb 14>;

<bb 14>:
  D.49678_1553 = strcasecmp (tmp_203, "f");
  if (D.49678_1553 == 0)
    goto <bb 21>;
  else
    goto <bb 15>;

<bb 15>:
  D.49679_1554 = strcasecmp (tmp_203, "disabled");
  if (D.49679_1554 == 0)
    goto <bb 21>;
  else
    goto <bb 16>;

<bb 16>:
  D.49680_1555 = strcasecmp (tmp_203, "inactive");
  if (D.49680_1555 == 0)
    goto <bb 21>;
  else
    goto <bb 17>;

<bb 17>:
  D.49681_1556 = strcasecmp (tmp_203, "disallow");
  if (D.49681_1556 == 0)
    goto <bb 21>;
  else
    goto <bb 18>;

<bb 18>:
  D.49682_1557 = switch_is_number (tmp_203);
  if (D.49682_1557 != 0)
    goto <bb 19>;
  else
    goto <bb 20>;

<bb 19>:
  # DEBUG __nptr => tmp_203
  D.49683_1558 = strtol (tmp_203, 0B, 10);
  if (D.49683_1558 == 0)
    goto <bb 21>;
  else
    goto <bb 20>;

<bb 20>:

<bb 21>:
  # D.49673_1559 = PHI <1(11), 1(12), 1(13), 1(14), 1(15), 1(16), 1(17), 1(19), 0(20)>
  if (D.49673_1559 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  D.44481_205 = smh_186->session;
  D.44482_206 = D.44481_205->channel;
  switch_channel_clear_flag (D.44482_206, 111);
  D.44481_207 = smh_186->session;
  D.44482_208 = D.44481_207->channel;
  switch_channel_clear_flag (D.44482_208, 109);

<bb 23>:
  switch_core_session_parse_crypto_prefs (session_161(D));
  # DEBUG engine => D#15
  pmap_1457 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].payload_map;
  # DEBUG pmap => pmap_1457
  goto <bb 25>;

<bb 24>:
  pmap_1458->negotiated = 0;
  pmap_1458->current = 0;
  pmap_1459 = pmap_1458->next;
  # DEBUG pmap => pmap_1459

<bb 25>:
  # pmap_1458 = PHI <pmap_1457(23), pmap_1459(24)>
  # DEBUG pmap => pmap_1458
  if (pmap_1458 != 0B)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  D.47871_1460 = pmap_1458->allocated;
  if (D.47871_1460 != 0)
    goto <bb 24>;
  else
    goto <bb 27>;

<bb 27>:
  # DEBUG engine => D#14
  pmap_1461 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].payload_map;
  # DEBUG pmap => pmap_1461
  goto <bb 29>;

<bb 28>:
  pmap_1462->negotiated = 0;
  pmap_1462->current = 0;
  pmap_1463 = pmap_1462->next;
  # DEBUG pmap => pmap_1463

<bb 29>:
  # pmap_1462 = PHI <pmap_1461(27), pmap_1463(28)>
  # DEBUG pmap => pmap_1462
  if (pmap_1462 != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

<bb 30>:
  D.47874_1464 = pmap_1462->allocated;
  if (D.47874_1464 != 0)
    goto <bb 28>;
  else
    goto <bb 31>;

<bb 31>:
  if (proceed_209(D) != 0B)
    goto <bb 32>;
  else
    goto <bb 33>;

<bb 32>:
  *proceed_209(D) = 1;

<bb 33>:
  D.44490_210 = switch_media_handle_test_media_flag (smh_186, 3);
  greedy_211 = D.44490_210 != 0;
  # DEBUG greedy => greedy_211
  D.44491_212 = switch_media_handle_test_media_flag (smh_186, 4);
  scrooge_213 = D.44491_212 != 0;
  # DEBUG scrooge => scrooge_213
  val_214 = switch_channel_get_variable_dup (channel_162, "rtp_codec_negotiation", 1, -1);
  # DEBUG val => val_214
  if (val_214 != 0B)
    goto <bb 34>;
  else
    goto <bb 38>;

<bb 34>:
  D.44494_215 = strcasecmp (val_214, "generous");
  if (D.44494_215 == 0)
    goto <bb 38>;
  else
    goto <bb 35>;

<bb 35>:
  D.44498_218 = strcasecmp (val_214, "greedy");
  if (D.44498_218 == 0)
    goto <bb 38>;
  else
    goto <bb 36>;

<bb 36>:
  D.44502_221 = strcasecmp (val_214, "scrooge");
  if (D.44502_221 == 0)
    goto <bb 38>;
  else
    goto <bb 37>;

<bb 37>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2969, session_161(D), 7, "rtp_codec_negotiation ignored invalid value : \'%s\' \n", val_214);

<bb 38>:
  # greedy_47 = PHI <greedy_211(33), 0(34), 1(35), 1(36), greedy_211(37)>
  # scrooge_80 = PHI <scrooge_213(33), 0(34), 0(35), 1(36), scrooge_213(37)>
  # DEBUG scrooge => scrooge_80
  # DEBUG greedy => greedy_47
  D.44506_224 = sdp_198->sdp_origin;
  D.44507_225 = D.44506_224->o_username;
  D.44508_226 = switch_core_perform_session_strdup (session_161(D), D.44507_225, "src/switch_core_media.c", &__func__, 2973);
  smh_186->origin = D.44508_226;
  if (D.44508_226 != 0B)
    goto <bb 39>;
  else
    goto <bb 45>;

<bb 39>:
  D.44471_228 = smh_186->mparams;
  D.44512_229 = D.44471_228->auto_rtp_bugs;
  D.44513_230 = (int) D.44512_229;
  D.44514_231 = D.44513_230 & 1;
  if (D.44514_231 != 0)
    goto <bb 40>;
  else
    goto <bb 42>;

<bb 40>:
  D.44518_234 = strstr (D.44508_226, "CiscoSystemsSIP-GW-UserAgent");
  if (D.44518_234 != 0B)
    goto <bb 41>;
  else
    goto <bb 42>;

<bb 41>:
  D.44521_235 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
  D.44522_236 = D.44521_235 | 1;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44522_236;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2979, session_161(D), 7, "Activate Buggy RFC2833 Mode!\n");

<bb 42>:
  D.44471_237 = smh_186->mparams;
  D.44512_238 = D.44471_237->auto_rtp_bugs;
  D.44523_239 = D.44512_238 & 2;
  if (D.44523_239 != 0)
    goto <bb 43>;
  else
    goto <bb 45>;

<bb 43>:
  D.44509_240 = smh_186->origin;
  D.44526_241 = strstr (D.44509_240, "Sonus_UAC");
  if (D.44526_241 != 0B)
    goto <bb 44>;
  else
    goto <bb 45>;

<bb 44>:
  D.44521_242 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs;
  D.44529_243 = D.44521_242 | 2;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_bugs = D.44529_243;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 2986, session_161(D), 4, "Hello,\nI see you have a Sonus!\nFYI, Sonus cannot follow the RFC on the proper way to send DTMF.\nSadly, my creator had to spend several hours figuring this out so I thought you\'d like to know that!\nDon\'t worry, DTMF will work but you may want to ask them to fix it......\n");

<bb 45>:
  D.44530_244 = session_161(D)->channel;
  val_245 = switch_channel_get_variable_dup (D.44530_244, "rtp_liberal_dtmf", 1, -1);
  # DEBUG val => val_245
  if (val_245 != 0B)
    goto <bb 46>;
  else
    goto <bb 59>;

<bb 46>:
  # DEBUG expr => val_245
  if (val_245 != 0B)
    goto <bb 47>;
  else
    goto <bb 56>;

<bb 47>:
  D.49687_1560 = strcasecmp (val_245, "yes");
  if (D.49687_1560 == 0)
    goto <bb 57>;
  else
    goto <bb 48>;

<bb 48>:
  D.49688_1561 = strcasecmp (val_245, "on");
  if (D.49688_1561 == 0)
    goto <bb 57>;
  else
    goto <bb 49>;

<bb 49>:
  D.49689_1562 = strcasecmp (val_245, "true");
  if (D.49689_1562 == 0)
    goto <bb 57>;
  else
    goto <bb 50>;

<bb 50>:
  D.49690_1563 = strcasecmp (val_245, "t");
  if (D.49690_1563 == 0)
    goto <bb 57>;
  else
    goto <bb 51>;

<bb 51>:
  D.49691_1564 = strcasecmp (val_245, "enabled");
  if (D.49691_1564 == 0)
    goto <bb 57>;
  else
    goto <bb 52>;

<bb 52>:
  D.49692_1565 = strcasecmp (val_245, "active");
  if (D.49692_1565 == 0)
    goto <bb 57>;
  else
    goto <bb 53>;

<bb 53>:
  D.49693_1566 = strcasecmp (val_245, "allow");
  if (D.49693_1566 == 0)
    goto <bb 57>;
  else
    goto <bb 54>;

<bb 54>:
  D.49694_1567 = switch_is_number (val_245);
  if (D.49694_1567 != 0)
    goto <bb 55>;
  else
    goto <bb 56>;

<bb 55>:
  # DEBUG __nptr => val_245
  D.49695_1568 = strtol (val_245, 0B, 10);
  if (D.49695_1568 != 0)
    goto <bb 57>;
  else
    goto <bb 56>;

<bb 56>:

<bb 57>:
  # D.49685_1569 = PHI <1(47), 1(48), 1(49), 1(50), 1(51), 1(52), 1(53), 1(55), 0(56)>
  if (D.49685_1569 != 0)
    goto <bb 58>;
  else
    goto <bb 59>;

<bb 58>:
  D.44530_247 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_247, 93, 1);

<bb 59>:
  m_248 = sdp_198->sdp_media;
  # DEBUG m => m_248
  if (m_248 != 0B)
    goto <bb 60>;
  else
    goto <bb 65>;

<bb 60>:
  D.44540_249 = BIT_FIELD_REF <*m_248, 8, 544>;
  D.44541_250 = D.44540_249 & 6;
  D.44542_251 = D.44541_250 == 2;
  D.44543_252 = D.44541_250 == 0;
  D.44544_253 = D.44542_251 || D.44543_252;
  if (D.44544_253 != 0)
    goto <bb 64>;
  else
    goto <bb 61>;

<bb 61>:
  D.44546_254 = m_248->m_connections;
  if (D.44546_254 != 0B)
    goto <bb 62>;
  else
    goto <bb 65>;

<bb 62>:
  D.44548_256 = D.44546_254->c_address;
  if (D.44548_256 != 0B)
    goto <bb 63>;
  else
    goto <bb 65>;

<bb 63>:
  # DEBUG __s2_len => 7
  __result_300 = __builtin_strcmp (D.44548_256, "0.0.0.0");
  if (__result_300 == 0)
    goto <bb 64>;
  else
    goto <bb 65>;

<bb 64>:
  # DEBUG sendonly => 2

<bb 65>:
  # sendonly_42 = PHI <0(59), 0(61), 0(62), 0(63), 2(64)>
  # DEBUG sendonly => sendonly_42
  attr_303 = sdp_198->sdp_attributes;
  # DEBUG attr => attr_303
  goto <bb 85>;

<bb 66>:
  D.44590_304 = attr_29->a_name;
  # DEBUG s => D.44590_304
  if (D.44590_304 == 0B)
    goto <bb 69>;
  else
    goto <bb 67>;

<bb 67>:
  D.47877_1465 = *D.44590_304;
  if (D.47877_1465 == 0)
    goto <bb 69>;
  else
    goto <bb 68>;

<bb 68>:

<bb 69>:
  # D.47876_1466 = PHI <1(66), 1(67), 0(68)>
  if (D.47876_1466 != 0)
    goto <bb 84>;
  else
    goto <bb 70>;

<bb 70>:
  D.44594_307 = strcasecmp (D.44590_304, "sendonly");
  if (D.44594_307 == 0)
    goto <bb 71>;
  else
    goto <bb 72>;

<bb 71>:
  # DEBUG sendonly => 1
  D.44530_309 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_309, "media_audio_mode", "recvonly", 1);
  goto <bb 84>;

<bb 72>:
  D.44598_311 = strcasecmp (D.44590_304, "inactive");
  if (D.44598_311 == 0)
    goto <bb 73>;
  else
    goto <bb 74>;

<bb 73>:
  # DEBUG sendonly => 1
  D.44530_313 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_313, "media_audio_mode", "inactive", 1);
  goto <bb 84>;

<bb 74>:
  D.44602_315 = strcasecmp (D.44590_304, "recvonly");
  if (D.44602_315 == 0)
    goto <bb 75>;
  else
    goto <bb 78>;

<bb 75>:
  D.44530_316 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_316, "media_audio_mode", "sendonly", 1);
  # DEBUG recvonly => 1
  D.44605_318 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44606_319 = switch_rtp_ready (D.44605_318);
  if (D.44606_319 != 0)
    goto <bb 76>;
  else
    goto <bb 77>;

<bb 76>:
  D.44605_320 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  switch_rtp_set_max_missed_packets (D.44605_320, 0);
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_hold_packets = 0;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].max_missed_packets = 0;
  goto <bb 84>;

<bb 77>:
  D.44530_321 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_321, "rtp_timeout_sec", "0", 1);
  D.44530_322 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_322, "rtp_hold_timeout_sec", "0", 1);
  goto <bb 84>;

<bb 78>:
  if (sendonly_44 <= 1)
    goto <bb 79>;
  else
    goto <bb 80>;

<bb 79>:
  D.44614_324 = strcasecmp (D.44590_304, "sendrecv");
  if (D.44614_324 == 0)
    goto <bb 84>;
  else
    goto <bb 80>;

<bb 80>:
  D.44616_327 = strcasecmp (D.44590_304, "ptime");
  if (D.44616_327 == 0)
    goto <bb 81>;
  else
    goto <bb 82>;

<bb 81>:
  D.44619_328 = attr_29->a_value;
  # DEBUG __nptr => D.44619_328
  dptime_1467 = strtol (D.44619_328, 0B, 10);
  # DEBUG dptime => NULL
  goto <bb 84>;

<bb 82>:
  D.44621_331 = strcasecmp (D.44590_304, "maxptime");
  if (D.44621_331 == 0)
    goto <bb 83>;
  else
    goto <bb 84>;

<bb 83>:
  D.44619_332 = attr_29->a_value;
  # DEBUG __nptr => D.44619_332
  dmaxptime_1468 = strtol (D.44619_332, 0B, 10);
  # DEBUG dmaxptime => NULL

<bb 84>:
  # dptime_36 = PHI <dptime_37(69), dptime_37(71), dptime_37(73), dptime_37(77), dptime_37(79), dptime_1467(81), dptime_37(82), dptime_37(83), dptime_37(76)>
  # dmaxptime_40 = PHI <dmaxptime_41(69), dmaxptime_41(71), dmaxptime_41(73), dmaxptime_41(77), dmaxptime_41(79), dmaxptime_41(81), dmaxptime_41(82), dmaxptime_1468(83), dmaxptime_41(76)>
  # sendonly_43 = PHI <sendonly_44(69), 1(71), 1(73), sendonly_44(77), 0(79), sendonly_44(81), sendonly_44(82), sendonly_44(83), sendonly_44(76)>
  # recvonly_45 = PHI <recvonly_46(69), recvonly_46(71), recvonly_46(73), 1(77), recvonly_46(79), recvonly_46(81), recvonly_46(82), recvonly_46(83), 1(76)>
  # DEBUG recvonly => recvonly_45
  # DEBUG sendonly => sendonly_43
  # DEBUG dmaxptime => dmaxptime_40
  # DEBUG dptime => dptime_36
  attr_334 = attr_29->a_next;
  # DEBUG attr => attr_334

<bb 85>:
  # attr_29 = PHI <attr_303(65), attr_334(84)>
  # dptime_37 = PHI <0(65), dptime_36(84)>
  # dmaxptime_41 = PHI <0(65), dmaxptime_40(84)>
  # sendonly_44 = PHI <sendonly_42(65), sendonly_43(84)>
  # recvonly_46 = PHI <0(65), recvonly_45(84)>
  # DEBUG recvonly => recvonly_46
  # DEBUG sendonly => sendonly_44
  # DEBUG dmaxptime => dmaxptime_41
  # DEBUG dptime => dptime_37
  # DEBUG attr => attr_29
  if (attr_29 != 0B)
    goto <bb 66>;
  else
    goto <bb 86>;

<bb 86>:
  D.44624_335 = sendonly_44 != 1;
  D.44625_336 = recvonly_46 != 1;
  D.44626_337 = D.44624_335 && D.44625_336;
  if (D.44626_337 != 0)
    goto <bb 87>;
  else
    goto <bb 88>;

<bb 87>:
  D.44530_338 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_338, "media_audio_mode", 0B, 1);

<bb 88>:
  D.44631_339 = switch_media_handle_test_media_flag (smh_186, 5);
  if (D.44631_339 == 0)
    goto <bb 89>;
  else
    goto <bb 106>;

<bb 89>:
  D.44530_340 = session_161(D)->channel;
  val_341 = switch_channel_get_variable_dup (D.44530_340, "rtp_disable_hold", 1, -1);
  # DEBUG val => val_341
  if (val_341 == 0B)
    goto <bb 102>;
  else
    goto <bb 90>;

<bb 90>:
  # DEBUG expr => val_341
  if (val_341 != 0B)
    goto <bb 91>;
  else
    goto <bb 100>;

<bb 91>:
  D.49699_1570 = strcasecmp (val_341, "yes");
  if (D.49699_1570 == 0)
    goto <bb 101>;
  else
    goto <bb 92>;

<bb 92>:
  D.49700_1571 = strcasecmp (val_341, "on");
  if (D.49700_1571 == 0)
    goto <bb 101>;
  else
    goto <bb 93>;

<bb 93>:
  D.49701_1572 = strcasecmp (val_341, "true");
  if (D.49701_1572 == 0)
    goto <bb 101>;
  else
    goto <bb 94>;

<bb 94>:
  D.49702_1573 = strcasecmp (val_341, "t");
  if (D.49702_1573 == 0)
    goto <bb 101>;
  else
    goto <bb 95>;

<bb 95>:
  D.49703_1574 = strcasecmp (val_341, "enabled");
  if (D.49703_1574 == 0)
    goto <bb 101>;
  else
    goto <bb 96>;

<bb 96>:
  D.49704_1575 = strcasecmp (val_341, "active");
  if (D.49704_1575 == 0)
    goto <bb 101>;
  else
    goto <bb 97>;

<bb 97>:
  D.49705_1576 = strcasecmp (val_341, "allow");
  if (D.49705_1576 == 0)
    goto <bb 101>;
  else
    goto <bb 98>;

<bb 98>:
  D.49706_1577 = switch_is_number (val_341);
  if (D.49706_1577 != 0)
    goto <bb 99>;
  else
    goto <bb 100>;

<bb 99>:
  # DEBUG __nptr => val_341
  D.49707_1578 = strtol (val_341, 0B, 10);
  if (D.49707_1578 != 0)
    goto <bb 101>;
  else
    goto <bb 100>;

<bb 100>:

<bb 101>:
  # D.49697_1579 = PHI <1(91), 1(92), 1(93), 1(94), 1(95), 1(96), 1(97), 1(99), 0(100)>
  if (D.49697_1579 == 0)
    goto <bb 102>;
  else
    goto <bb 106>;

<bb 102>:
  D.44471_343 = smh_186->mparams;
  D.44636_344 = D.44471_343->hold_laps;
  if (D.44636_344 == 0)
    goto <bb 103>;
  else
    goto <bb 106>;

<bb 103>:
  D.44639_347 = D.44636_344 + 1;
  D.44471_343->hold_laps = D.44639_347;
  D.44640_348 = switch_core_media_toggle_hold (session_161(D), sendonly_44);
  if (D.44640_348 != 0)
    goto <bb 104>;
  else
    goto <bb 106>;

<bb 104>:
  reneg_349 = switch_media_handle_test_media_flag (smh_186, 6);
  # DEBUG reneg => reneg_349
  D.44530_350 = session_161(D)->channel;
  val_351 = switch_channel_get_variable_dup (D.44530_350, "rtp_renegotiate_codec_on_hold", 1, -1);
  # DEBUG val => val_351
  if (val_351 != 0B)
    goto <bb 105>;
  else
    goto <bb 106>;

<bb 105>:
  reneg_352 = switch_true (val_351);
  # DEBUG reneg => reneg_352

<bb 106>:
  # reneg_81 = PHI <1(88), 1(101), 1(102), 1(103), reneg_349(104), reneg_352(105)>
  # DEBUG reneg => reneg_81
  if (reneg_81 != 0)
    goto <bb 107>;
  else
    goto <bb 120>;

<bb 107>:
  reneg_353 = switch_media_handle_test_media_flag (smh_186, 7);
  # DEBUG reneg => reneg_353
  D.44530_354 = session_161(D)->channel;
  val_355 = switch_channel_get_variable_dup (D.44530_354, "rtp_renegotiate_codec_on_reinvite", 1, -1);
  # DEBUG val => val_355
  if (val_355 != 0B)
    goto <bb 108>;
  else
    goto <bb 120>;

<bb 108>:
  # DEBUG expr => val_355
  if (val_355 != 0B)
    goto <bb 109>;
  else
    goto <bb 118>;

<bb 109>:
  D.49711_1580 = strcasecmp (val_355, "yes");
  if (D.49711_1580 == 0)
    goto <bb 119>;
  else
    goto <bb 110>;

<bb 110>:
  D.49712_1581 = strcasecmp (val_355, "on");
  if (D.49712_1581 == 0)
    goto <bb 119>;
  else
    goto <bb 111>;

<bb 111>:
  D.49713_1582 = strcasecmp (val_355, "true");
  if (D.49713_1582 == 0)
    goto <bb 119>;
  else
    goto <bb 112>;

<bb 112>:
  D.49714_1583 = strcasecmp (val_355, "t");
  if (D.49714_1583 == 0)
    goto <bb 119>;
  else
    goto <bb 113>;

<bb 113>:
  D.49715_1584 = strcasecmp (val_355, "enabled");
  if (D.49715_1584 == 0)
    goto <bb 119>;
  else
    goto <bb 114>;

<bb 114>:
  D.49716_1585 = strcasecmp (val_355, "active");
  if (D.49716_1585 == 0)
    goto <bb 119>;
  else
    goto <bb 115>;

<bb 115>:
  D.49717_1586 = strcasecmp (val_355, "allow");
  if (D.49717_1586 == 0)
    goto <bb 119>;
  else
    goto <bb 116>;

<bb 116>:
  D.49718_1587 = switch_is_number (val_355);
  if (D.49718_1587 != 0)
    goto <bb 117>;
  else
    goto <bb 118>;

<bb 117>:
  # DEBUG __nptr => val_355
  D.49719_1588 = strtol (val_355, 0B, 10);
  if (D.49719_1588 != 0)
    goto <bb 119>;
  else
    goto <bb 118>;

<bb 118>:

<bb 119>:
  # reneg_1589 = PHI <1(109), 1(110), 1(111), 1(112), 1(113), 1(114), 1(115), 1(117), 0(118)>
  reneg_356 = reneg_1589;
  # DEBUG reneg => NULL

<bb 120>:
  # reneg_82 = PHI <reneg_81(106), reneg_353(107), reneg_1589(119)>
  # DEBUG reneg => reneg_82
  D.44649_357 = session_161(D)->bugs;
  if (D.44649_357 != 0B)
    goto <bb 121>;
  else
    goto <bb 122>;

<bb 121>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3063, session_161(D), 7, "Session is connected to a media bug. Re-Negotiation implicitly disabled.\n");
  # DEBUG reneg => 0

<bb 122>:
  # reneg_83 = PHI <reneg_82(120), 0(121)>
  # DEBUG reneg => reneg_83
  if (reneg_83 == 0)
    goto <bb 123>;
  else
    goto <bb 125>;

<bb 123>:
  D.44655_359 = smh_186->num_negotiated_codecs;
  if (D.44655_359 != 0)
    goto <bb 124>;
  else
    goto <bb 125>;

<bb 124>:
  codec_array_360 = &smh_186->negotiated_codecs;
  # DEBUG codec_array => codec_array_360
  total_codecs_361 = D.44655_359;
  # DEBUG total_codecs => D.44655_359
  goto <bb 127>;

<bb 125>:
  if (reneg_83 != 0)
    goto <bb 126>;
  else
    goto <bb 127>;

<bb 126>:
  D.44471_362 = smh_186->mparams;
  D.44471_362->num_codecs = 0;
  switch_core_media_prepare_codecs (session_161(D), 0);
  codec_array_363 = codec_array_190;
  # DEBUG codec_array => codec_array_190
  D.44471_364 = smh_186->mparams;
  total_codecs_365 = D.44471_364->num_codecs;
  # DEBUG total_codecs => total_codecs_365

<bb 127>:
  # codec_array_84 = PHI <codec_array_360(124), codec_array_190(125), codec_array_190(126)>
  # total_codecs_85 = PHI <D.44655_359(124), total_codecs_192(125), total_codecs_365(126)>
  # DEBUG total_codecs => total_codecs_85
  # DEBUG codec_array => codec_array_84
  D.44661_366 = switch_stristr ("T38FaxFillBitRemoval:", r_sdp_193(D));
  if (D.44661_366 != 0B)
    goto <bb 130>;
  else
    goto <bb 128>;

<bb 128>:
  D.44663_367 = switch_stristr ("T38FaxTranscodingMMR:", r_sdp_193(D));
  if (D.44663_367 != 0B)
    goto <bb 130>;
  else
    goto <bb 129>;

<bb 129>:
  D.44665_368 = switch_stristr ("T38FaxTranscodingJBIG:", r_sdp_193(D));
  if (D.44665_368 != 0B)
    goto <bb 130>;
  else
    goto <bb 131>;

<bb 130>:
  D.44530_369 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_369, "t38_broken_boolean", "true", 1);

<bb 131>:
  switch_core_media_find_zrtp_hash (session_161(D), sdp_198);
  switch_core_media_pass_zrtp_hash (session_161(D));
  check_ice (smh_186, 0, sdp_198, 0B);
  check_ice (smh_186, 1, sdp_198, 0B);
  m_370 = sdp_198->sdp_media;
  # DEBUG m => m_370
  goto <bb 489>;

<bb 132>:
  # DEBUG ptime => dptime_37
  # DEBUG maxptime => dmaxptime_41
  D.44666_373 = m_28->m_proto;
  if (D.44666_373 == 261)
    goto <bb 133>;
  else
    goto <bb 134>;

<bb 133>:
  got_webrtc_374 = got_webrtc_79 + 1;
  # DEBUG got_webrtc => got_webrtc_374
  switch_core_session_set_ice (session_161(D));

<bb 134>:
  # got_webrtc_78 = PHI <got_webrtc_79(132), got_webrtc_374(133)>
  # DEBUG got_webrtc => got_webrtc_78
  D.44669_375 = m_28->m_proto_name;
  if (D.44669_375 != 0B)
    goto <bb 135>;
  else
    goto <bb 137>;

<bb 135>:
  D.44672_377 = strcasecmp (D.44669_375, "UDP/TLS/RTP/SAVPF");
  if (D.44672_377 == 0)
    goto <bb 136>;
  else
    goto <bb 137>;

<bb 136>:
  D.44530_378 = session_161(D)->channel;
  switch_channel_set_flag_value (D.44530_378, 107, 1);

<bb 137>:
  D.44675_379 = m_28->m_proto;
  D.44676_380 = D.44675_379 == 257;
  D.44677_381 = D.44675_379 == 261;
  D.44678_382 = D.44676_380 || D.44677_381;
  if (D.44678_382 != 0)
    goto <bb 138>;
  else
    goto <bb 140>;

<bb 138>:
  D.44681_383 = m_28->m_type;
  if (D.44681_383 == 2)
    goto <bb 139>;
  else
    goto <bb 145>;

<bb 139>:
  got_savp_384 = got_savp_75 + 1;
  # DEBUG got_savp => got_savp_384
  goto <bb 145>;

<bb 140>:
  if (D.44675_379 == 256)
    goto <bb 141>;
  else
    goto <bb 143>;

<bb 141>:
  D.44681_387 = m_28->m_type;
  if (D.44681_387 == 2)
    goto <bb 142>;
  else
    goto <bb 145>;

<bb 142>:
  got_avp_388 = got_avp_69 + 1;
  # DEBUG got_avp => got_avp_388
  goto <bb 145>;

<bb 143>:
  if (D.44675_379 == 258)
    goto <bb 144>;
  else
    goto <bb 145>;

<bb 144>:
  got_udptl_391 = got_udptl_77 + 1;
  # DEBUG got_udptl => got_udptl_391

<bb 145>:
  # got_avp_68 = PHI <got_avp_69(138), got_avp_69(141), got_avp_69(143), got_avp_69(144), got_avp_69(139), got_avp_388(142)>
  # got_savp_74 = PHI <got_savp_75(138), got_savp_75(141), got_savp_75(143), got_savp_75(144), got_savp_384(139), got_savp_75(142)>
  # got_udptl_76 = PHI <got_udptl_77(138), got_udptl_77(141), got_udptl_77(143), got_udptl_391(144), got_udptl_77(139), got_udptl_77(142)>
  # DEBUG got_udptl => got_udptl_76
  # DEBUG got_savp => got_savp_74
  # DEBUG got_video_savp => NULL
  # DEBUG got_video_avp => NULL
  # DEBUG got_avp => got_avp_68
  if (got_udptl_76 != 0)
    goto <bb 146>;
  else
    goto <bb 179>;

<bb 146>:
  D.44681_392 = m_28->m_type;
  if (D.44681_392 == 8)
    goto <bb 147>;
  else
    goto <bb 179>;

<bb 147>:
  D.44697_393 = m_28->m_port;
  if (D.44697_393 != 0)
    goto <bb 148>;
  else
    goto <bb 179>;

<bb 148>:
  t38_options_394 = switch_core_media_process_udptl (session_161(D), sdp_198, m_28);
  # DEBUG t38_options => t38_options_394
  D.44530_395 = session_161(D)->channel;
  D.44699_396 = switch_channel_test_app_flag_key ("T38", D.44530_395, 16);
  if (D.44699_396 != 0)
    goto <bb 490> (done);
  else
    goto <bb 149>;

<bb 149>:
  D.44702_398 = switch_channel_get_variable_dup (channel_162, "refuse_t38", 1, -1);
  D.44703_399 = switch_true (D.44702_398);
  if (D.44703_399 != 0)
    goto <bb 150>;
  else
    goto <bb 151>;

<bb 150>:
  D.44530_400 = session_161(D)->channel;
  switch_channel_clear_app_flag_key ("T38", D.44530_400, 2);
  # DEBUG match => 0
  goto <bb 490> (done);

<bb 151>:
  var_402 = switch_channel_get_variable_dup (channel_162, "t38_passthru", 1, -1);
  # DEBUG var => var_402
  D.44481_403 = smh_186->session;
  D.44482_404 = D.44481_403->channel;
  D.44706_405 = switch_channel_test_flag (D.44482_404, 101);
  pass_406 = (int) D.44706_405;
  # DEBUG pass => pass_406
  D.44530_407 = session_161(D)->channel;
  D.44707_408 = switch_channel_test_app_flag_key ("T38", D.44530_407, 2);
  if (D.44707_408 != 0)
    goto <bb 152>;
  else
    goto <bb 154>;

<bb 152>:
  if (proceed_209(D) != 0B)
    goto <bb 153>;
  else
    goto <bb 154>;

<bb 153>:
  *proceed_209(D) = 0;

<bb 154>:
  if (var_402 != 0B)
    goto <bb 155>;
  else
    goto <bb 158>;

<bb 155>:
  pass_409 = switch_true (var_402);
  # DEBUG pass => pass_409
  if (pass_409 == 0)
    goto <bb 156>;
  else
    goto <bb 158>;

<bb 156>:
  D.44716_410 = strcasecmp (var_402, "once");
  if (D.44716_410 == 0)
    goto <bb 157>;
  else
    goto <bb 158>;

<bb 157>:
  # DEBUG pass => 2

<bb 158>:
  # pass_126 = PHI <pass_406(154), pass_409(155), pass_409(156), 2(157)>
  # DEBUG pass => pass_126
  if (pass_126 == 2)
    goto <bb 159>;
  else
    goto <bb 160>;

<bb 159>:
  D.44481_412 = smh_186->session;
  D.44482_413 = D.44481_412->channel;
  D.44723_414 = switch_channel_test_flag (D.44482_413, 101);
  if (D.44723_414 != 0)
    goto <bb 165>;
  else
    goto <bb 160>;

<bb 160>:
  D.44530_415 = session_161(D)->channel;
  D.44724_416 = switch_channel_test_flag (D.44530_415, 103);
  if (D.44724_416 == 0)
    goto <bb 165>;
  else
    goto <bb 161>;

<bb 161>:
  D.44530_417 = session_161(D)->channel;
  D.44726_418 = switch_channel_test_flag (D.44530_417, 15);
  if (D.44726_418 != 0)
    goto <bb 165>;
  else
    goto <bb 162>;

<bb 162>:
  D.44530_419 = session_161(D)->channel;
  D.44728_420 = switch_channel_test_flag (D.44530_419, 29);
  if (D.44728_420 != 0)
    goto <bb 165>;
  else
    goto <bb 163>;

<bb 163>:
  D.44605_421 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44730_422 = switch_rtp_ready (D.44605_421);
  if (D.44730_422 == 0)
    goto <bb 164>;
  else
    goto <bb 165>;

<bb 164>:

<bb 165>:
  # pass_127 = PHI <pass_126(163), 0(160), 0(159), 0(164), 0(162), 0(161)>
  # DEBUG pass => pass_127
  if (pass_127 != 0)
    goto <bb 166>;
  else
    goto <bb 490> (done);

<bb 166>:
  D.44733_424 = switch_core_session_perform_get_partner (session_161(D), &other_session, "src/switch_core_media.c", &__func__, 3161);
  if (D.44733_424 == 0)
    goto <bb 167>;
  else
    goto <bb 490> (done);

<bb 167>:
  other_session.89_425 = other_session;
  other_channel_426 = switch_core_session_get_channel (other_session.89_425);
  # DEBUG other_channel => other_channel_426
  D.44605_427 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  remote_host_428 = switch_rtp_get_remote_host (D.44605_427);
  # DEBUG remote_host => remote_host_428
  D.44605_429 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  remote_port_430 = switch_rtp_get_remote_port (D.44605_429);
  # DEBUG remote_port => remote_port_430
  tmp = "";
  D.44737_431 = switch_channel_test_flag (other_channel_426, 1);
  if (D.44737_431 == 0)
    goto <bb 168>;
  else
    goto <bb 169>;

<bb 168>:
  D.44530_432 = session_161(D)->channel;
  D.44740_433 = switch_channel_get_name (D.44530_432);
  D.44741_434 = switch_channel_get_name (other_channel_426);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3170, session_161(D), 4, "%s Error Passing T.38 to unanswered channel %s\n", D.44740_433, D.44741_434);
  other_session.89_435 = other_session;
  switch_core_session_rwunlock (other_session.89_435);
  # DEBUG pass => 0
  # DEBUG match => 0
  goto <bb 490> (done);

<bb 169>:
  D.44530_438 = session_161(D)->channel;
  D.44742_439 = switch_channel_get_variable_dup (D.44530_438, "t38_broken_boolean", 1, -1);
  D.44743_440 = switch_true (D.44742_439);
  if (D.44743_440 != 0)
    goto <bb 170>;
  else
    goto <bb 172>;

<bb 170>:
  D.44530_441 = session_161(D)->channel;
  D.44746_442 = switch_channel_get_variable_dup (D.44530_441, "t38_pass_broken_boolean", 1, -1);
  D.44747_443 = switch_true (D.44746_442);
  if (D.44747_443 != 0)
    goto <bb 171>;
  else
    goto <bb 172>;

<bb 171>:
  switch_channel_set_variable_var_check (other_channel_426, "t38_broken_boolean", "true", 1);

<bb 172>:
  D.44750_444 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44751_445 = t38_options_394->remote_ip;
  D.44752_446 = switch_core_perform_session_strdup (session_161(D), D.44751_445, "src/switch_core_media.c", &__func__, 3186);
  D.44750_444->remote_sdp_ip = D.44752_446;
  D.44750_447 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44753_448 = t38_options_394->remote_port;
  D.44750_447->remote_sdp_port = D.44753_448;
  D.44756_449 = remote_host_428 != 0B;
  D.44757_450 = remote_port_430 != 0;
  D.44758_451 = D.44756_449 && D.44757_450;
  if (D.44758_451 != 0)
    goto <bb 173>;
  else
    goto <bb 176>;

<bb 173>:
  D.44760_453 = D.44750_447->remote_sdp_ip;
  D.39032_454 = __builtin_strcmp (remote_host_428, D.44760_453);
  if (D.39032_454 == 0)
    goto <bb 174>;
  else
    goto <bb 176>;

<bb 174>:
  if (remote_port_430 == D.44753_448)
    goto <bb 175>;
  else
    goto <bb 176>;

<bb 175>:
  D.44530_457 = session_161(D)->channel;
  D.44764_458 = switch_channel_get_name (D.44530_457);
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3190, session_161(D), 7, "Audio params are unchanged for %s.\n", D.44764_458);
  goto <bb 178>;

<bb 176>:
  err = 0B;
  D.44530_459 = session_161(D)->channel;
  D.44765_460 = switch_channel_get_name (D.44530_459);
  D.44766_461 = (int) remote_port_430;
  D.44750_462 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_463 = D.44750_462->remote_sdp_ip;
  D.44762_465 = D.44750_462->remote_sdp_port;
  D.44767_466 = (int) D.44762_465;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3195, session_161(D), 7, "Audio params changed for %s from %s:%d to %s:%d\n", D.44765_460, remote_host_428, D.44766_461, D.44760_463, D.44767_466);
  D.44750_467 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44762_468 = D.44750_467->remote_sdp_port;
  D.44767_469 = (int) D.44762_468;
  switch_snprintf (&tmp, 32, "%d", D.44767_469);
  D.44530_470 = session_161(D)->channel;
  D.44750_471 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_472 = D.44750_471->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_470, "remote_media_ip", D.44760_472, 1);
  D.44530_473 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_473, "remote_media_port", &tmp, 1);
  D.44605_474 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44750_475 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_476 = D.44750_475->remote_sdp_ip;
  D.44762_478 = D.44750_475->remote_sdp_port;
  D.44768_479 = switch_rtp_set_remote_address (D.44605_474, D.44760_476, D.44762_478, 0, 1, &err);
  if (D.44768_479 != 0)
    goto <bb 177>;
  else
    goto <bb 178>;

<bb 177>:
  err.90_480 = err;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3205, session_161(D), 3, "AUDIO RTP REPORTS ERROR: [%s]\n", err.90_480);
  switch_channel_perform_hangup (channel_162, "src/switch_core_media.c", &__func__, 3206, 88);

<bb 178>:
  other_session.89_481 = other_session;
  switch_core_media_copy_t38_options (t38_options_394, other_session.89_481);
  D.44481_482 = smh_186->session;
  D.44482_483 = D.44481_482->channel;
  switch_channel_set_flag_value (D.44482_483, 101, 1);
  other_session.89_484 = other_session;
  D.44772_485 = other_session.89_484->channel;
  switch_channel_set_flag_value (D.44772_485, 101, 1);
  other_session.89_486 = other_session;
  msg_487 = switch_core_perform_session_alloc (other_session.89_486, 108, "src/switch_core_media.c", &__func__, 3218);
  # DEBUG msg => msg_487
  msg_487->message_id = 21;
  msg_487->from = "src/switch_core_media.c";
  other_session.89_488 = other_session;
  D.44773_489 = switch_core_perform_session_strdup (other_session.89_488, r_sdp_193(D), "src/switch_core_media.c", &__func__, 3221);
  msg_487->string_arg = D.44773_489;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3222, session_161(D), 7, "Passing T38 req to other leg.\n%s\n", r_sdp_193(D));
  other_session.89_490 = other_session;
  switch_core_session_queue_message (other_session.89_490, msg_487);
  other_session.89_491 = other_session;
  switch_core_session_rwunlock (other_session.89_491);
  goto <bb 490> (done);

<bb 179>:
  D.44681_493 = m_28->m_type;
  if (D.44681_493 == 2)
    goto <bb 180>;
  else
    goto <bb 384>;

<bb 180>:
  D.44697_494 = m_28->m_port;
  D.44777_495 = D.44697_494 != 0;
  D.44778_496 = got_audio_67 == 0;
  D.44779_497 = D.44777_495 && D.44778_496;
  if (D.44779_497 != 0)
    goto <bb 181>;
  else
    goto <bb 384>;

<bb 181>:
  D.44781_498 = switch_rtp_has_dtls ();
  if (D.44781_498 != 0)
    goto <bb 182>;
  else
    goto <bb 192>;

<bb 182>:
  D.44784_499 = dtls_ok (session_161(D));
  if (D.44784_499 != 0)
    goto <bb 183>;
  else
    goto <bb 192>;

<bb 183>:
  attr_500 = m_28->m_attributes;
  # DEBUG attr => attr_500
  goto <bb 191>;

<bb 184>:
  D.44590_501 = attr_30->a_name;
  D.44787_502 = strcasecmp (D.44590_501, "fingerprint");
  if (D.44787_502 == 0)
    goto <bb 185>;
  else
    goto <bb 190>;

<bb 185>:
  D.44619_503 = attr_30->a_value;
  # DEBUG s => D.44619_503
  if (D.44619_503 == 0B)
    goto <bb 188>;
  else
    goto <bb 186>;

<bb 186>:
  D.47887_1469 = *D.44619_503;
  if (D.47887_1469 == 0)
    goto <bb 188>;
  else
    goto <bb 187>;

<bb 187>:

<bb 188>:
  # D.47886_1470 = PHI <1(185), 1(186), 0(187)>
  if (D.47886_1470 == 0)
    goto <bb 189>;
  else
    goto <bb 190>;

<bb 189>:
  # DEBUG got_crypto => 1

<bb 190>:
  # got_crypto_50 = PHI <got_crypto_51(184), got_crypto_51(188), 1(189)>
  # DEBUG got_crypto => got_crypto_50
  attr_506 = attr_30->a_next;
  # DEBUG attr => attr_506

<bb 191>:
  # attr_30 = PHI <attr_500(183), attr_506(190)>
  # got_crypto_51 = PHI <got_crypto_56(183), got_crypto_50(190)>
  # DEBUG got_crypto => got_crypto_51
  # DEBUG attr => attr_30
  if (attr_30 != 0B)
    goto <bb 184>;
  else
    goto <bb 192>;

<bb 192>:
  # got_crypto_52 = PHI <got_crypto_56(181), got_crypto_56(182), got_crypto_51(191)>
  # DEBUG got_crypto => got_crypto_52
  attr_507 = m_28->m_attributes;
  # DEBUG attr => attr_507
  goto <bb 226>;

<bb 193>:
  D.44590_508 = attr_31->a_name;
  D.44795_509 = strcasecmp (D.44590_508, "rtcp");
  if (D.44795_509 == 0)
    goto <bb 194>;
  else
    goto <bb 197>;

<bb 194>:
  D.44619_510 = attr_31->a_value;
  if (D.44619_510 != 0B)
    goto <bb 195>;
  else
    goto <bb 197>;

<bb 195>:
  D.44530_511 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_511, "rtp_remote_audio_rtcp_port", D.44619_510, 1);
  D.44619_513 = attr_31->a_value;
  # DEBUG __nptr => D.44619_513
  D.47890_1471 = strtol (D.44619_513, 0B, 10);
  D.44799_515 = (short unsigned int) D.47890_1471;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].remote_rtcp_port = D.44799_515;
  D.44471_516 = smh_186->mparams;
  D.44800_517 = D.44471_516->rtcp_audio_interval_msec;
  if (D.44800_517 == 0B)
    goto <bb 196>;
  else
    goto <bb 225>;

<bb 196>:
  D.44471_516->rtcp_audio_interval_msec = "5000";
  goto <bb 225>;

<bb 197>:
  D.44805_520 = strcasecmp (D.44590_508, "ptime");
  if (D.44805_520 == 0)
    goto <bb 198>;
  else
    goto <bb 200>;

<bb 198>:
  D.44619_521 = attr_31->a_value;
  if (D.44619_521 != 0B)
    goto <bb 199>;
  else
    goto <bb 200>;

<bb 199>:
  # DEBUG __nptr => D.44619_521
  ptime_1472 = strtol (D.44619_521, 0B, 10);
  # DEBUG ptime => NULL
  goto <bb 225>;

<bb 200>:
  D.44810_525 = strcasecmp (D.44590_508, "maxptime");
  if (D.44810_525 == 0)
    goto <bb 201>;
  else
    goto <bb 203>;

<bb 201>:
  D.44619_526 = attr_31->a_value;
  if (D.44619_526 != 0B)
    goto <bb 202>;
  else
    goto <bb 203>;

<bb 202>:
  # DEBUG __nptr => D.44619_526
  maxptime_1473 = strtol (D.44619_526, 0B, 10);
  # DEBUG maxptime => NULL
  goto <bb 225>;

<bb 203>:
  if (got_crypto_54 <= 0)
    goto <bb 204>;
  else
    goto <bb 225>;

<bb 204>:
  D.44815_530 = strcasecmp (D.44590_508, "crypto");
  if (D.44815_530 == 0)
    goto <bb 205>;
  else
    goto <bb 225>;

<bb 205>:
  D.44619_531 = attr_31->a_value;
  # DEBUG s => D.44619_531
  if (D.44619_531 == 0B)
    goto <bb 208>;
  else
    goto <bb 206>;

<bb 206>:
  D.47900_1474 = *D.44619_531;
  if (D.47900_1474 == 0)
    goto <bb 208>;
  else
    goto <bb 207>;

<bb 207>:

<bb 208>:
  # D.47899_1475 = PHI <1(205), 1(206), 0(207)>
  if (D.47899_1475 == 0)
    goto <bb 209>;
  else
    goto <bb 225>;

<bb 209>:
  D.44471_533 = smh_186->mparams;
  D.44821_534 = D.44471_533->ndlb;
  D.44822_535 = D.44821_534 & 4;
  if (D.44822_535 == 0)
    goto <bb 210>;
  else
    goto <bb 224>;

<bb 210>:
  D.44530_536 = session_161(D)->channel;
  D.44825_537 = switch_channel_get_variable_dup (D.44530_536, "rtp_allow_crypto_in_avp", 1, -1);
  # DEBUG expr => D.44825_537
  if (D.44825_537 != 0B)
    goto <bb 211>;
  else
    goto <bb 220>;

<bb 211>:
  D.49723_1590 = strcasecmp (D.44825_537, "yes");
  if (D.49723_1590 == 0)
    goto <bb 221>;
  else
    goto <bb 212>;

<bb 212>:
  D.49724_1591 = strcasecmp (D.44825_537, "on");
  if (D.49724_1591 == 0)
    goto <bb 221>;
  else
    goto <bb 213>;

<bb 213>:
  D.49725_1592 = strcasecmp (D.44825_537, "true");
  if (D.49725_1592 == 0)
    goto <bb 221>;
  else
    goto <bb 214>;

<bb 214>:
  D.49726_1593 = strcasecmp (D.44825_537, "t");
  if (D.49726_1593 == 0)
    goto <bb 221>;
  else
    goto <bb 215>;

<bb 215>:
  D.49727_1594 = strcasecmp (D.44825_537, "enabled");
  if (D.49727_1594 == 0)
    goto <bb 221>;
  else
    goto <bb 216>;

<bb 216>:
  D.49728_1595 = strcasecmp (D.44825_537, "active");
  if (D.49728_1595 == 0)
    goto <bb 221>;
  else
    goto <bb 217>;

<bb 217>:
  D.49729_1596 = strcasecmp (D.44825_537, "allow");
  if (D.49729_1596 == 0)
    goto <bb 221>;
  else
    goto <bb 218>;

<bb 218>:
  D.49730_1597 = switch_is_number (D.44825_537);
  if (D.49730_1597 != 0)
    goto <bb 219>;
  else
    goto <bb 220>;

<bb 219>:
  # DEBUG __nptr => D.44825_537
  D.49731_1598 = strtol (D.44825_537, 0B, 10);
  if (D.49731_1598 != 0)
    goto <bb 221>;
  else
    goto <bb 220>;

<bb 220>:

<bb 221>:
  # D.49721_1599 = PHI <1(211), 1(212), 1(213), 1(214), 1(215), 1(216), 1(217), 1(219), 0(220)>
  if (D.49721_1599 == 0)
    goto <bb 222>;
  else
    goto <bb 224>;

<bb 222>:
  D.44666_539 = m_28->m_proto;
  D.44829_540 = D.44666_539 != 257;
  D.44830_541 = got_webrtc_78 == 0;
  D.44831_542 = D.44829_540 && D.44830_541;
  if (D.44831_542 != 0)
    goto <bb 223>;
  else
    goto <bb 224>;

<bb 223>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3262, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  # DEBUG match => 0
  goto <bb 490> (done);

<bb 224>:
  crypto_544 = attr_31->a_value;
  # DEBUG crypto => crypto_544
  # DEBUG __nptr => crypto_544
  crypto_tag_1476 = strtol (crypto_544, 0B, 10);
  # DEBUG crypto_tag => NULL
  got_crypto_547 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_crypto", 0, crypto_544, crypto_tag_1476, sdp_type_546(D));
  # DEBUG got_crypto => got_crypto_547

<bb 225>:
  # ptime_34 = PHI <ptime_35(196), ptime_1472(199), ptime_35(202), ptime_35(203), ptime_35(204), ptime_35(208), ptime_35(224), ptime_35(195)>
  # maxptime_38 = PHI <maxptime_39(196), maxptime_39(199), maxptime_1473(202), maxptime_39(203), maxptime_39(204), maxptime_39(208), maxptime_39(224), maxptime_39(195)>
  # got_crypto_53 = PHI <got_crypto_54(196), got_crypto_54(199), got_crypto_54(202), got_crypto_54(203), got_crypto_54(204), got_crypto_54(208), got_crypto_547(224), got_crypto_54(195)>
  # DEBUG got_crypto => got_crypto_53
  # DEBUG maxptime => maxptime_38
  # DEBUG ptime => ptime_34
  attr_548 = attr_31->a_next;
  # DEBUG attr => attr_548

<bb 226>:
  # attr_31 = PHI <attr_507(192), attr_548(225)>
  # ptime_35 = PHI <dptime_37(192), ptime_34(225)>
  # maxptime_39 = PHI <dmaxptime_41(192), maxptime_38(225)>
  # got_crypto_54 = PHI <got_crypto_52(192), got_crypto_53(225)>
  # DEBUG got_crypto => got_crypto_54
  # DEBUG maxptime => maxptime_39
  # DEBUG ptime => ptime_35
  # DEBUG attr => attr_31
  if (attr_31 != 0B)
    goto <bb 193>;
  else
    goto <bb 227>;

<bb 227>:
  D.44834_549 = got_crypto_54 == -1;
  D.44835_550 = got_savp_74 != 0;
  D.44836_551 = D.44834_549 && D.44835_550;
  if (D.44836_551 != 0)
    goto <bb 228>;
  else
    goto <bb 230>;

<bb 228>:
  D.44839_552 = got_avp_68 | got_webrtc_78;
  if (D.44839_552 == 0)
    goto <bb 229>;
  else
    goto <bb 230>;

<bb 229>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3277, session_161(D), 4, "Declining invite with only SAVP because secure media is administratively disabled\n");
  # DEBUG match => 0
  goto <bb 490> (done);

<bb 230>:
  connection_554 = sdp_198->sdp_connection;
  # DEBUG connection => connection_554
  D.44546_555 = m_28->m_connections;
  if (D.44546_555 != 0B)
    goto <bb 231>;
  else
    goto <bb 232>;

<bb 231>:
  connection_556 = D.44546_555;
  # DEBUG connection => D.44546_555

<bb 232>:
  # connection_124 = PHI <connection_554(230), D.44546_555(231)>
  # DEBUG connection => connection_124
  if (connection_124 == 0B)
    goto <bb 233>;
  else
    goto <bb 234>;

<bb 233>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3288, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  # DEBUG match => 0
  goto <bb 490> (done);

<bb 234>:
  # DEBUG x => 0
  map_559 = m_28->m_rtpmaps;
  # DEBUG map => map_559
  goto <bb 311>;

<bb 235>:
  # DEBUG map_bit_rate => 0
  codec_fmtp = {};
  rm_encoding_561 = map_128->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_561
  if (rm_encoding_561 == 0B)
    goto <bb 236>;
  else
    goto <bb 237>;

<bb 236>:
  # DEBUG rm_encoding => ""

<bb 237>:
  # rm_encoding_130 = PHI <rm_encoding_561(235), ""(236)>
  # DEBUG rm_encoding => rm_encoding_130
  D.44848_563 = strcasecmp (rm_encoding_130, "telephone-event");
  if (D.44848_563 == 0)
    goto <bb 238>;
  else
    goto <bb 242>;

<bb 238>:
  if (best_te_20 == 0)
    goto <bb 240>;
  else
    goto <bb 239>;

<bb 239>:
  D.44854_564 = map_128->rm_rate;
  D.44750_565 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44855_566 = D.44750_565->rm_rate;
  if (D.44854_564 == D.44855_566)
    goto <bb 240>;
  else
    goto <bb 241>;

<bb 240>:
  D.44856_567 = map_128->rm_pt;
  best_te_568 = (switch_payload_t) D.44856_567;
  # DEBUG best_te => best_te_568
  D.44857_569 = (int) best_te_568;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3309, session_161(D), 7, "Set telephone-event payload to %u\n", D.44857_569);

<bb 241>:
  # best_te_18 = PHI <best_te_20(239), best_te_568(240)>
  # DEBUG best_te => best_te_18
  goto <bb 310>;

<bb 242>:
  D.44858_570 = switch_media_handle_test_media_flag (smh_186, 9);
  if (D.44858_570 == 0)
    goto <bb 243>;
  else
    goto <bb 248>;

<bb 243>:
  if (cng_pt_25 == 0)
    goto <bb 244>;
  else
    goto <bb 248>;

<bb 244>:
  D.44863_571 = strcasecmp (rm_encoding_130, "CN");
  if (D.44863_571 == 0)
    goto <bb 245>;
  else
    goto <bb 248>;

<bb 245>:
  D.44856_572 = map_128->rm_pt;
  cng_pt_573 = (switch_payload_t) D.44856_572;
  # DEBUG cng_pt => cng_pt_573
  D.44605_574 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_574 != 0B)
    goto <bb 246>;
  else
    goto <bb 247>;

<bb 246>:
  D.44868_575 = (int) cng_pt_573;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3317, session_161(D), 7, "Set comfort noise payload to %u\n", D.44868_575);
  D.44605_576 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  D.44471_577 = smh_186->mparams;
  D.44869_578 = D.44471_577->cng_pt;
  switch_rtp_set_cng_pt (D.44605_576, D.44869_578);

<bb 247>:
  goto <bb 310>;

<bb 248>:
  x_580 = x_49 + 1;
  # DEBUG x => x_580
  if (x_49 < 0)
    goto <bb 310>;
  else
    goto <bb 249>;

<bb 249>:
  if (match_8 != 0)
    goto <bb 310>;
  else
    goto <bb 250>;

<bb 250>:
  # DEBUG codec_ms => ptime_35
  if (maxptime_39 != 0)
    goto <bb 251>;
  else
    goto <bb 253>;

<bb 251>:
  D.44877_582 = ptime_35 == 0;
  D.44878_583 = ptime_35 > maxptime_39;
  D.44879_584 = D.44877_582 || D.44878_583;
  if (D.44879_584 != 0)
    goto <bb 252>;
  else
    goto <bb 253>;

<bb 252>:
  # DEBUG codec_ms => maxptime_39

<bb 253>:
  # codec_ms_86 = PHI <ptime_35(250), ptime_35(251), maxptime_39(252)>
  # DEBUG codec_ms => codec_ms_86
  if (codec_ms_86 == 0)
    goto <bb 254>;
  else
    goto <bb 255>;

<bb 254>:
  D.44856_586 = map_128->rm_pt;
  D.44884_587 = (uint32_t) D.44856_586;
  D.44885_588 = switch_default_ptime (rm_encoding_130, D.44884_587);
  codec_ms_589 = (int) D.44885_588;
  # DEBUG codec_ms => codec_ms_589

<bb 255>:
  # codec_ms_87 = PHI <codec_ms_86(253), codec_ms_589(254)>
  # DEBUG codec_ms => codec_ms_87
  D.44856_590 = map_128->rm_pt;
  csui.173_591 = (unsigned char) D.44856_590;
  # DEBUG payload => csui.173_591
  if (csui.173_591 <= 18)
    goto <bb 256> (<L499>);
  else
    goto <bb 257> (<L500>);

<L499>:
  map_bit_rate_1479 = CSWTCH.174[csui.173_591];

  # map_bit_rate_1480 = PHI <0(255), map_bit_rate_1479(256)>
<L500>:
<L501>:
  # DEBUG map_bit_rate => NULL
  if (ptime_35 == 0)
    goto <bb 258>;
  else
    goto <bb 260>;

<bb 258>:
  D.44889_593 = map_128->rm_encoding;
  D.44890_594 = strcasecmp (D.44889_593, "g723");
  if (D.44890_594 == 0)
    goto <bb 259>;
  else
    goto <bb 260>;

<bb 259>:
  # DEBUG codec_ms => 33

<bb 260>:
  # codec_ms_88 = PHI <codec_ms_87(257), codec_ms_87(258), 33(259)>
  # DEBUG codec_ms => codec_ms_88
  remote_codec_rate_596 = map_128->rm_rate;
  # DEBUG remote_codec_rate => remote_codec_rate_596
  # DEBUG fmtp_remote_codec_rate => 0
  memset (&codec_fmtp, 0, 16);
  D.44893_598 = map_128->rm_fmtp;
  # DEBUG s => D.44893_598
  if (D.44893_598 == 0B)
    goto <bb 263>;
  else
    goto <bb 261>;

<bb 261>:
  D.47915_1481 = *D.44893_598;
  if (D.47915_1481 == 0)
    goto <bb 263>;
  else
    goto <bb 262>;

<bb 262>:

<bb 263>:
  # D.47914_1482 = PHI <1(260), 1(261), 0(262)>
  if (D.47914_1482 != 0)
    goto <bb 264>;
  else
    goto <bb 267>;

<bb 264>:
  D.44889_600 = map_128->rm_encoding;
  D.44897_601 = strcasecmp (D.44889_600, "ilbc");
  if (D.44897_601 == 0)
    goto <bb 274>;
  else
    goto <bb 265>;

<bb 265>:
  D.44901_605 = strcasecmp (D.44889_600, "isac");
  if (D.44901_605 == 0)
    goto <bb 266>;
  else
    goto <bb 274>;

<bb 266>:
  # DEBUG codec_ms => 39
  # DEBUG map_bit_rate => 32001
  goto <bb 274>;

<bb 267>:
  D.44889_608 = map_128->rm_encoding;
  D.44854_610 = map_128->rm_rate;
  D.44905_611 = switch_core_codec_parse_fmtp (D.44889_608, D.44893_598, D.44854_610, &codec_fmtp);
  if (D.44905_611 == 0)
    goto <bb 268>;
  else
    goto <bb 274>;

<bb 268>:
  D.44908_612 = codec_fmtp.bits_per_second;
  if (D.44908_612 != 0)
    goto <bb 269>;
  else
    goto <bb 270>;

<bb 269>:
  map_bit_rate_614 = (uint32_t) D.44908_612;
  # DEBUG map_bit_rate => map_bit_rate_614

<bb 270>:
  # map_bit_rate_131 = PHI <map_bit_rate_1480(268), map_bit_rate_614(269)>
  # DEBUG map_bit_rate => map_bit_rate_131
  D.44911_615 = codec_fmtp.microseconds_per_packet;
  if (D.44911_615 != 0)
    goto <bb 271>;
  else
    goto <bb 272>;

<bb 271>:
  codec_ms_617 = D.44911_615 / 1000;
  # DEBUG codec_ms => codec_ms_617

<bb 272>:
  # codec_ms_89 = PHI <codec_ms_88(270), codec_ms_617(271)>
  # DEBUG codec_ms => codec_ms_89
  D.44914_618 = codec_fmtp.actual_samples_per_second;
  if (D.44914_618 != 0)
    goto <bb 273>;
  else
    goto <bb 274>;

<bb 273>:
  fmtp_remote_codec_rate_619 = D.44914_618;
  # DEBUG fmtp_remote_codec_rate => D.44914_618

<bb 274>:
  # codec_ms_90 = PHI <codec_ms_88(265), codec_ms_88(267), codec_ms_89(272), codec_ms_89(273), 32(264), 39(266)>
  # fmtp_remote_codec_rate_99 = PHI <0(265), 0(267), 0(272), D.44914_618(273), 0(264), 0(266)>
  # map_bit_rate_132 = PHI <map_bit_rate_1480(265), map_bit_rate_1480(267), map_bit_rate_131(272), map_bit_rate_131(273), 13332(264), 32001(266)>
  # DEBUG map_bit_rate => map_bit_rate_132
  # DEBUG fmtp_remote_codec_rate => fmtp_remote_codec_rate_99
  # DEBUG codec_ms => codec_ms_90
  # DEBUG i => 0
  goto <bb 308>;

<bb 275>:
  i.91_626 = (unsigned int) i_129;
  D.44918_627 = i.91_626 * 4;
  D.44919_628 = codec_array_84 + D.44918_627;
  imp_629 = *D.44919_628;
  # DEBUG imp => imp_629
  D.44920_630 = imp_629->bits_per_second;
  bit_rate_631 = (uint32_t) D.44920_630;
  # DEBUG bit_rate => bit_rate_631
  codec_rate_632 = imp_629->samples_per_second;
  # DEBUG codec_rate => codec_rate_632
  D.44921_633 = imp_629->codec_type;
  if (D.44921_633 != 0)
    goto <bb 307>;
  else
    goto <bb 276>;

<bb 276>:
  D.44856_634 = map_128->rm_pt;
  D.44924_635 = (int) D.44856_634;
  remote_codec_rate.92_636 = (int) remote_codec_rate_98;
  D.44926_637 = imp_629->iananame;
  D.44927_638 = imp_629->ianacode;
  D.44928_639 = (int) D.44927_638;
  D.44929_640 = imp_629->microseconds_per_packet;
  D.44930_641 = D.44929_640 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3383, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u]/[%s:%d:%u:%d:%u]\n", rm_encoding_130, D.44924_635, remote_codec_rate.92_636, codec_ms_90, map_bit_rate_132, D.44926_637, D.44928_639, codec_rate_632, D.44930_641, bit_rate_631);
  D.44889_642 = map_128->rm_encoding;
  # DEBUG s => D.44889_642
  if (D.44889_642 == 0B)
    goto <bb 279>;
  else
    goto <bb 277>;

<bb 277>:
  D.47919_1483 = *D.44889_642;
  if (D.47919_1483 == 0)
    goto <bb 279>;
  else
    goto <bb 278>;

<bb 278>:

<bb 279>:
  # D.47918_1484 = PHI <1(276), 1(277), 0(278)>
  if (D.47918_1484 != 0)
    goto <bb 281>;
  else
    goto <bb 280>;

<bb 280>:
  D.44471_644 = smh_186->mparams;
  D.44821_645 = D.44471_644->ndlb;
  D.44936_646 = (int) D.44821_645;
  D.44937_647 = D.44936_646 & 1;
  if (D.44937_647 != 0)
    goto <bb 281>;
  else
    goto <bb 283>;

<bb 281>:
  D.44856_649 = map_128->rm_pt;
  D.44924_650 = (int) D.44856_649;
  if (D.44924_650 <= 95)
    goto <bb 282>;
  else
    goto <bb 283>;

<bb 282>:
  D.44927_653 = imp_629->ianacode;
  D.44928_654 = (int) D.44927_653;
  match_655 = D.44924_650 == D.44928_654;
  # DEBUG match => match_655
  goto <bb 289>;

<bb 283>:
  D.44926_656 = imp_629->iananame;
  D.44944_657 = strcasecmp (rm_encoding_130, D.44926_656);
  if (D.44944_657 == 0)
    goto <bb 284>;
  else
    goto <bb 286>;

<bb 284>:
  if (remote_codec_rate_98 == codec_rate_632)
    goto <bb 287>;
  else
    goto <bb 285>;

<bb 285>:
  D.44947_658 = imp_629->actual_samples_per_second;
  if (D.44947_658 == fmtp_remote_codec_rate_99)
    goto <bb 287>;
  else
    goto <bb 286>;

<bb 286>:

<bb 287>:
  # iftmp.93_144 = PHI <1(285), 0(286), 1(284)>
  match_661 = (uint8_t) iftmp.93_144;
  # DEBUG match => match_661
  if (fmtp_remote_codec_rate_99 != 0)
    goto <bb 288>;
  else
    goto <bb 289>;

<bb 288>:
  # DEBUG remote_codec_rate => fmtp_remote_codec_rate_99

<bb 289>:
  # match_1 = PHI <match_655(282), match_661(287), match_661(288)>
  # remote_codec_rate_96 = PHI <remote_codec_rate_98(282), remote_codec_rate_98(287), fmtp_remote_codec_rate_99(288)>
  # DEBUG remote_codec_rate => remote_codec_rate_96
  # DEBUG match => match_1
  D.44950_663 = match_1 != 0;
  D.44951_664 = bit_rate_631 != 0;
  D.44952_665 = D.44950_663 && D.44951_664;
  if (D.44952_665 != 0)
    goto <bb 290>;
  else
    goto <bb 294>;

<bb 290>:
  D.44955_666 = map_bit_rate_132 != 0;
  D.44956_667 = map_bit_rate_132 != bit_rate_631;
  D.44957_668 = D.44955_666 && D.44956_667;
  if (D.44957_668 != 0)
    goto <bb 291>;
  else
    goto <bb 294>;

<bb 291>:
  D.44960_670 = strcasecmp (D.44889_642, "ilbc");
  if (D.44960_670 != 0)
    goto <bb 292>;
  else
    goto <bb 294>;

<bb 292>:
  D.44963_672 = strcasecmp (D.44889_642, "isac");
  if (D.44963_672 != 0)
    goto <bb 293>;
  else
    goto <bb 294>;

<bb 293>:
  # DEBUG match => 0

<bb 294>:
  # match_2 = PHI <match_1(289), match_1(290), match_1(291), match_1(292), 0(293)>
  # DEBUG match => match_2
  D.44950_674 = match_2 != 0;
  D.44968_675 = remote_codec_rate_96 != 0;
  D.44969_676 = D.44950_674 && D.44968_675;
  if (D.44969_676 != 0)
    goto <bb 295>;
  else
    goto <bb 299>;

<bb 295>:
  D.44972_677 = codec_rate_632 != 0;
  D.44973_678 = remote_codec_rate_96 != codec_rate_632;
  D.44974_679 = D.44972_677 && D.44973_678;
  if (D.44974_679 != 0)
    goto <bb 296>;
  else
    goto <bb 299>;

<bb 296>:
  D.44977_681 = strcasecmp (D.44889_642, "pcma");
  if (D.44977_681 == 0)
    goto <bb 298>;
  else
    goto <bb 297>;

<bb 297>:
  D.44979_683 = strcasecmp (D.44889_642, "pcmu");
  if (D.44979_683 == 0)
    goto <bb 298>;
  else
    goto <bb 299>;

<bb 298>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3405, session_161(D), 7, "sampling rates have to match for G.711\n");
  # DEBUG match => 0

<bb 299>:
  # match_3 = PHI <match_2(294), match_2(295), match_2(297), 0(298)>
  # DEBUG match => match_3
  if (match_3 != 0)
    goto <bb 300>;
  else
    goto <bb 307>;

<bb 300>:
  if (scrooge_80 != 0)
    goto <bb 301>;
  else
    goto <bb 302>;

<bb 301>:
  D.44926_685 = imp_629->iananame;
  D.44984_686 = imp_629->samples_per_second;
  D.44929_687 = imp_629->microseconds_per_packet;
  D.44930_688 = D.44929_687 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3411, session_161(D), 7, "Bah HUMBUG! Sticking with %s@%uh@%ui\n", D.44926_685, D.44984_686, D.44930_688);
  goto <bb 306>;

<bb 302>:
  D.44989_689 = ptime_35 != 0;
  D.44990_690 = codec_ms_90 != 0;
  D.44991_691 = D.44989_689 && D.44990_690;
  if (D.44991_691 != 0)
    goto <bb 303>;
  else
    goto <bb 304>;

<bb 303>:
  D.44993_692 = codec_ms_90 * 1000;
  D.44929_693 = imp_629->microseconds_per_packet;
  if (D.44993_692 != D.44929_693)
    goto <bb 305>;
  else
    goto <bb 304>;

<bb 304>:
  if (remote_codec_rate_96 != codec_rate_632)
    goto <bb 305>;
  else
    goto <bb 306>;

<bb 305>:
  # DEBUG match => 0
  D.44926_695 = imp_629->iananame;
  D.44927_696 = imp_629->ianacode;
  D.44928_697 = (int) D.44927_696;
  D.44929_698 = imp_629->microseconds_per_packet;
  D.44930_699 = D.44929_698 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3418, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] is saved as a near-match\n", D.44926_695, D.44928_697, codec_rate_632, D.44930_699, bit_rate_631);
  near_matches[nm_idx_116].codec_idx = i_129;
  remote_codec_rate.92_700 = (int) remote_codec_rate_96;
  near_matches[nm_idx_116].rate = remote_codec_rate.92_700;
  near_matches[nm_idx_116].imp = imp_629;
  near_matches[nm_idx_116].map = map_128;
  nm_idx_701 = nm_idx_116 + 1;
  # DEBUG nm_idx => nm_idx_701
  goto <bb 307>;

<bb 306>:
  matches[m_idx_101].codec_idx = i_129;
  codec_rate.94_702 = (int) codec_rate_632;
  matches[m_idx_101].rate = codec_rate.94_702;
  matches[m_idx_101].imp = imp_629;
  matches[m_idx_101].map = map_128;
  m_idx_703 = m_idx_101 + 1;
  # DEBUG m_idx => m_idx_703
  D.44926_704 = imp_629->iananame;
  D.44927_705 = imp_629->ianacode;
  D.44928_706 = (int) D.44927_705;
  D.44929_707 = imp_629->microseconds_per_packet;
  D.44930_708 = D.44929_707 / 1000;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3437, session_161(D), 7, "Audio Codec Compare [%s:%d:%u:%d:%u] ++++ is saved as a match\n", D.44926_704, D.44928_706, codec_rate_632, D.44930_708, bit_rate_631);
  if (m_idx_703 > 29)
    goto <bb 309>;
  else
    goto <bb 307>;

<bb 307>:
  # match_4 = PHI <match_5(275), match_3(299), 0(305), 0(306)>
  # remote_codec_rate_97 = PHI <remote_codec_rate_98(275), remote_codec_rate_96(299), remote_codec_rate_96(305), remote_codec_rate_96(306)>
  # m_idx_100 = PHI <m_idx_101(275), m_idx_101(299), m_idx_101(305), m_idx_703(306)>
  # nm_idx_115 = PHI <nm_idx_116(275), nm_idx_116(299), nm_idx_701(305), nm_idx_116(306)>
  # DEBUG nm_idx => nm_idx_115
  # DEBUG m_idx => m_idx_100
  # DEBUG remote_codec_rate => remote_codec_rate_97
  # DEBUG match => match_4
  i_710 = i_129 + 1;
  # DEBUG i => i_710

<bb 308>:
  # match_5 = PHI <match_8(274), match_4(307)>
  # remote_codec_rate_98 = PHI <remote_codec_rate_596(274), remote_codec_rate_97(307)>
  # m_idx_101 = PHI <m_idx_104(274), m_idx_100(307)>
  # nm_idx_116 = PHI <nm_idx_118(274), nm_idx_115(307)>
  # i_129 = PHI <0(274), i_710(307)>
  # DEBUG i => i_129
  # DEBUG nm_idx => nm_idx_116
  # DEBUG m_idx => m_idx_101
  # DEBUG remote_codec_rate => remote_codec_rate_98
  # DEBUG match => match_5
  D.44471_621 = smh_186->mparams;
  D.44996_622 = D.44471_621->num_codecs;
  D.44997_623 = D.44996_622 > i_129;
  D.44998_624 = i_129 < total_codecs_85;
  D.44999_625 = D.44997_623 && D.44998_624;
  if (D.44999_625 != 0)
    goto <bb 275>;
  else
    goto <bb 309>;

<bb 309>:
  # match_6 = PHI <match_3(306), match_5(308)>
  # m_idx_102 = PHI <m_idx_703(306), m_idx_101(308)>
  # DEBUG m_idx => m_idx_102
  # DEBUG match => match_6
  if (m_idx_102 > 29)
    goto <bb 312>;
  else
    goto <bb 310>;

<bb 310>:
  # match_7 = PHI <match_8(241), match_8(247), match_8(248), match_8(249), match_6(309)>
  # best_te_19 = PHI <best_te_18(241), best_te_20(247), best_te_20(248), best_te_20(249), best_te_20(309)>
  # cng_pt_24 = PHI <cng_pt_25(241), cng_pt_573(247), cng_pt_25(248), cng_pt_25(249), cng_pt_25(309)>
  # x_48 = PHI <x_49(241), x_49(247), x_580(248), x_580(249), x_580(309)>
  # codec_ms_91 = PHI <codec_ms_92(241), codec_ms_92(247), codec_ms_92(248), codec_ms_92(249), codec_ms_90(309)>
  # m_idx_103 = PHI <m_idx_104(241), m_idx_104(247), m_idx_104(248), m_idx_104(249), m_idx_102(309)>
  # nm_idx_117 = PHI <nm_idx_118(241), nm_idx_118(247), nm_idx_118(248), nm_idx_118(249), nm_idx_116(309)>
  # DEBUG nm_idx => nm_idx_117
  # DEBUG m_idx => m_idx_103
  # DEBUG codec_ms => codec_ms_91
  # DEBUG x => x_48
  # DEBUG cng_pt => cng_pt_24
  # DEBUG best_te => best_te_19
  # DEBUG match => match_7
  map_711 = map_128->rm_next;
  # DEBUG map => map_711

<bb 311>:
  # match_8 = PHI <match_16(234), match_7(310)>
  # best_te_20 = PHI <best_te_23(234), best_te_19(310)>
  # cng_pt_25 = PHI <cng_pt_27(234), cng_pt_24(310)>
  # x_49 = PHI <0(234), x_48(310)>
  # codec_ms_92 = PHI <codec_ms_95(234), codec_ms_91(310)>
  # m_idx_104 = PHI <m_idx_114(234), m_idx_103(310)>
  # nm_idx_118 = PHI <nm_idx_122(234), nm_idx_117(310)>
  # map_128 = PHI <map_559(234), map_711(310)>
  # DEBUG map => map_128
  # DEBUG nm_idx => nm_idx_118
  # DEBUG m_idx => m_idx_104
  # DEBUG codec_ms => codec_ms_92
  # DEBUG x => x_49
  # DEBUG cng_pt => cng_pt_25
  # DEBUG best_te => best_te_20
  # DEBUG match => match_8
  if (map_128 != 0B)
    goto <bb 235>;
  else
    goto <bb 312>;

<bb 312>:
  # match_9 = PHI <match_6(309), match_8(311)>
  # codec_ms_93 = PHI <codec_ms_90(309), codec_ms_92(311)>
  # m_idx_105 = PHI <m_idx_102(309), m_idx_104(311)>
  # nm_idx_119 = PHI <nm_idx_116(309), nm_idx_118(311)>
  # DEBUG nm_idx => nm_idx_119
  # DEBUG m_idx => m_idx_105
  # DEBUG codec_ms => codec_ms_93
  # DEBUG match => match_9
  D.45001_712 = smh_186->crypto_mode;
  D.45002_713 = D.45001_712 == 1;
  D.45003_714 = got_crypto_54 <= 0;
  D.45004_715 = D.45002_713 && D.45003_714;
  if (D.45004_715 != 0)
    goto <bb 313>;
  else
    goto <bb 314>;

<bb 313>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3455, session_161(D), 4, "Crypto not negotiated but required.\n");
  # DEBUG match => 0
  # DEBUG nm_idx => 0
  # DEBUG m_idx => 0

<bb 314>:
  # match_10 = PHI <match_9(312), 0(313)>
  # m_idx_106 = PHI <m_idx_105(312), 0(313)>
  # nm_idx_120 = PHI <nm_idx_119(312), 0(313)>
  # DEBUG nm_idx => nm_idx_120
  # DEBUG m_idx => m_idx_106
  # DEBUG match => match_10
  D.45007_719 = m_idx_106 == 0;
  D.45008_720 = nm_idx_120 != 0;
  D.45009_721 = D.45007_719 && D.45008_720;
  if (D.45009_721 != 0)
    goto <bb 323>;
  else
    goto <bb 324>;

<bb 315>:
  # DEBUG timp => 0B
  D.45012_724 = near_matches[j_133].rate;
  near_rate_725 = (uint32_t) D.45012_724;
  # DEBUG near_rate => near_rate_725
  near_match_726 = near_matches[j_133].imp;
  # DEBUG near_match => near_match_726
  near_map_727 = near_matches[j_133].map;
  # DEBUG near_map => near_map_727
  D.45013_728 = near_match_726->iananame;
  if (near_rate_725 == 0)
    goto <bb 316>;
  else
    goto <bb 317>;

<bb 316>:
  near_rate_729 = near_match_726->samples_per_second;

<bb 317>:
  # near_rate_145 = PHI <near_rate_729(316), near_rate_725(315)>
  switch_snprintf (&tmp, 80, "%s@%uh@%ui", D.45013_728, near_rate_145, codec_ms_93);
  prefs[0] = &tmp;
  num_731 = switch_loadable_module_get_codecs_sorted (&search, 1, &prefs, 1);
  # DEBUG num => num_731
  if (num_731 != 0)
    goto <bb 318>;
  else
    goto <bb 319>;

<bb 318>:
  timp_732 = search[0];
  # DEBUG timp => timp_732

<bb 319>:
  # timp_134 = PHI <timp_732(318), near_match_726(317)>
  # DEBUG timp => timp_134
  if (maxptime_39 == 0)
    goto <bb 321>;
  else
    goto <bb 320>;

<bb 320>:
  D.45024_734 = timp_134->microseconds_per_packet;
  D.45025_735 = D.45024_734 / 1000;
  if (D.45025_735 <= maxptime_39)
    goto <bb 321>;
  else
    goto <bb 322>;

<bb 321>:
  D.45026_737 = timp_134->iananame;
  D.45024_738 = timp_134->microseconds_per_packet;
  D.45025_739 = D.45024_738 / 1000;
  D.45027_740 = timp_134->actual_samples_per_second;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3488, session_161(D), 7, "Substituting codec %s@%ui@%uh\n", D.45026_737, D.45025_739, D.45027_740);
  # DEBUG match => 1
  D.45028_742 = near_matches[j_133].codec_idx;
  matches[m_idx_106].codec_idx = D.45028_742;
  near_rate.96_743 = D.45012_724;
  matches[m_idx_106].rate = near_rate.96_743;
  matches[m_idx_106].imp = timp_134;
  matches[m_idx_106].map = near_map_727;
  m_idx_744 = m_idx_106 + 1;
  # DEBUG m_idx => m_idx_744
  goto <bb 324>;

<bb 322>:
  j_736 = j_133 + 1;
  # DEBUG j => j_736

<bb 323>:
  # j_133 = PHI <0(314), j_736(322)>
  # DEBUG j => j_133
  if (j_133 < nm_idx_120)
    goto <bb 315>;
  else
    goto <bb 324>;

<bb 324>:
  # match_11 = PHI <match_10(314), 1(321), match_10(323)>
  # m_idx_107 = PHI <m_idx_106(314), m_idx_744(321), m_idx_106(323)>
  # DEBUG m_idx => m_idx_107
  # DEBUG match => match_11
  if (m_idx_107 != 0)
    goto <bb 325>;
  else
    goto <bb 349>;

<bb 325>:
  if (greedy_47 != 0)
    goto <bb 326>;
  else
    goto <bb 327>;

<bb 326>:
  greedy_sort (smh_186, &matches, m_idx_107, codec_array_84, total_codecs_85);

<bb 327>:
  # DEBUG match => 1
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].codec_negotiated = 1;
  smh_186->num_negotiated_codecs = 0;
  # DEBUG j => 0
  goto <bb 348>;

<bb 328>:
  D.45034_747 = matches[j_135].map;
  D.45035_748 = D.45034_747->rm_encoding;
  D.45036_750 = D.45034_747->rm_fmtp;
  D.45037_752 = D.45034_747->rm_pt;
  D.45038_753 = (uint32_t) D.45037_752;
  D.45039_754 = matches[j_135].imp;
  D.45040_755 = D.45039_754->samples_per_second;
  D.45041_757 = D.45039_754->microseconds_per_packet;
  D.45042_758 = D.45041_757 / 1000;
  D.45043_759 = (uint32_t) D.45042_758;
  pmap_760 = switch_core_media_add_payload_map (session_161(D), 0, D.45035_748, D.45036_750, sdp_type_546(D), D.45038_753, D.45040_755, D.45043_759, 1);
  # DEBUG pmap => pmap_760
  mimp_761 = matches[j_135].imp;
  # DEBUG mimp => mimp_761
  mmap_762 = matches[j_135].map;
  # DEBUG mmap => mmap_762
  if (j_135 == 0)
    goto <bb 329>;
  else
    goto <bb 331>;

<bb 329>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map = pmap_760;
  pmap_760->current = 1;
  D.44605_764 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_764 != 0B)
    goto <bb 330>;
  else
    goto <bb 331>;

<bb 330>:
  D.45048_766 = pmap_760->pt;
  switch_rtp_set_default_payload (D.44605_764, D.45048_766);

<bb 331>:
  D.45049_767 = mmap_762->rm_encoding;
  D.45050_768 = switch_core_perform_session_strdup (session_161(D), D.45049_767, "src/switch_core_media.c", &__func__, 3535);
  pmap_760->rm_encoding = D.45050_768;
  D.45051_769 = mimp_761->iananame;
  D.45052_770 = switch_core_perform_session_strdup (session_161(D), D.45051_769, "src/switch_core_media.c", &__func__, 3536);
  pmap_760->iananame = D.45052_770;
  D.45053_771 = mmap_762->rm_pt;
  D.45054_772 = (unsigned char) D.45053_771;
  pmap_760->recv_pt = D.45054_772;
  D.45055_773 = mimp_761->samples_per_second;
  pmap_760->rm_rate = D.45055_773;
  pmap_760->adv_rm_rate = D.45055_773;
  D.45051_775 = mimp_761->iananame;
  D.45056_776 = strcasecmp (D.45051_775, "g722");
  if (D.45056_776 != 0)
    goto <bb 332>;
  else
    goto <bb 333>;

<bb 332>:
  D.45059_777 = mimp_761->actual_samples_per_second;
  pmap_760->rm_rate = D.45059_777;

<bb 333>:
  D.45060_778 = mimp_761->microseconds_per_packet;
  D.45061_779 = D.45060_778 / 1000;
  D.45062_780 = (uint32_t) D.45061_779;
  pmap_760->codec_ms = D.45062_780;
  D.45063_781 = mimp_761->bits_per_second;
  D.45064_782 = (uint32_t) D.45063_781;
  pmap_760->bitrate = D.45064_782;
  D.45066_783 = mmap_762->rm_params;
  if (D.45066_783 != 0B)
    goto <bb 334>;
  else
    goto <bb 335>;

<bb 334>:
  # DEBUG __nptr => D.45066_783
  D.47922_1485 = strtol (D.45066_783, 0B, 10);

<bb 335>:
  # D.47922_146 = PHI <D.47922_1485(334), 1(333)>
  pmap_760->channels = D.47922_146;
  D.45049_787 = mmap_762->rm_encoding;
  D.45070_788 = strcasecmp (D.45049_787, "opus");
  if (D.45070_788 == 0)
    goto <bb 336>;
  else
    goto <bb 346>;

<bb 336>:
  if (D.47922_146 == 1)
    goto <bb 337>;
  else
    goto <bb 338>;

<bb 337>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3549, session_161(D), 4, "Invalid SDP for opus.  Don\'t ask.. but it needs a /2\n");
  pmap_760->adv_channels = 1;
  goto <bb 339>;

<bb 338>:
  pmap_760->adv_channels = 2;

<bb 339>:
  D.45079_790 = mmap_762->rm_fmtp;
  # DEBUG s => D.45079_790
  if (D.45079_790 == 0B)
    goto <bb 342>;
  else
    goto <bb 340>;

<bb 340>:
  D.47926_1486 = *D.45079_790;
  if (D.47926_1486 == 0)
    goto <bb 342>;
  else
    goto <bb 341>;

<bb 341>:

<bb 342>:
  # D.47925_1487 = PHI <1(339), 1(340), 0(341)>
  if (D.47925_1487 == 0)
    goto <bb 343>;
  else
    goto <bb 345>;

<bb 343>:
  D.45082_793 = switch_stristr ("stereo=1", D.45079_790);
  if (D.45082_793 != 0B)
    goto <bb 344>;
  else
    goto <bb 345>;

<bb 344>:
  pmap_760->channels = 2;
  goto <bb 347>;

<bb 345>:
  pmap_760->channels = 1;
  goto <bb 347>;

<bb 346>:
  pmap_760->adv_channels = D.47922_146;

<bb 347>:
  D.45085_795 = connection_124->c_address;
  D.45086_796 = switch_core_perform_session_strdup (session_161(D), D.45085_795, "src/switch_core_media.c", &__func__, 3563);
  pmap_760->remote_sdp_ip = D.45086_796;
  D.44697_797 = m_28->m_port;
  D.45087_798 = (short unsigned int) D.44697_797;
  pmap_760->remote_sdp_port = D.45087_798;
  D.45079_799 = mmap_762->rm_fmtp;
  D.45088_800 = switch_core_perform_session_strdup (session_161(D), D.45079_799, "src/switch_core_media.c", &__func__, 3565);
  pmap_760->rm_fmtp = D.45088_800;
  D.45053_801 = mmap_762->rm_pt;
  D.45054_802 = (unsigned char) D.45053_801;
  pmap_760->agreed_pt = D.45054_802;
  D.44655_803 = smh_186->num_negotiated_codecs;
  smh_186->negotiated_codecs[D.44655_803] = mimp_761;
  D.45089_804 = D.44655_803 + 1;
  smh_186->num_negotiated_codecs = D.45089_804;
  D.45053_805 = mmap_762->rm_pt;
  D.45054_806 = (unsigned char) D.45053_805;
  pmap_760->recv_pt = D.45054_806;
  j_807 = j_135 + 1;
  # DEBUG j => j_807

<bb 348>:
  # j_135 = PHI <0(327), j_807(347)>
  # DEBUG j => j_135
  if (j_135 < m_idx_107)
    goto <bb 328>;
  else
    goto <bb 349>;

<bb 349>:
  # match_12 = PHI <match_11(324), 1(348)>
  # DEBUG match => match_12
  if (match_12 != 0)
    goto <bb 350>;
  else
    goto <bb 360>;

<bb 350>:
  D.44750_808 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44762_809 = D.44750_808->remote_sdp_port;
  D.44767_810 = (int) D.44762_809;
  switch_snprintf (&tmp, 50, "%d", D.44767_810);
  D.44530_811 = session_161(D)->channel;
  D.44750_812 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.44760_813 = D.44750_812->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_811, "remote_media_ip", D.44760_813, 1);
  D.44530_814 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_814, "remote_media_port", &tmp, 1);
  D.44750_815 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].cur_payload_map;
  D.45092_816 = D.44750_815->recv_pt;
  D.45093_817 = (int) D.45092_816;
  switch_snprintf (&tmp, 50, "%d", D.45093_817);
  D.44530_818 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_818, "rtp_audio_recv_pt", &tmp, 1);
  D.45094_819 = &MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].read_codec;
  # DEBUG codec => D.45094_819
  if (D.45094_819 != 0B)
    goto <bb 351>;
  else
    goto <bb 355>;

<bb 351>:
  D.47934_1488 = MEM[(struct switch_codec_t *)smh_186 + 1604B].flags;
  D.47933_1489 = D.47934_1488 & 256;
  if (D.47933_1489 != 0)
    goto <bb 352>;
  else
    goto <bb 355>;

<bb 352>:
  D.47932_1490 = MEM[(struct switch_codec_t *)smh_186 + 1604B].mutex;
  if (D.47932_1490 != 0B)
    goto <bb 353>;
  else
    goto <bb 355>;

<bb 353>:
  D.47931_1491 = MEM[(struct switch_codec_t *)smh_186 + 1604B].codec_interface;
  if (D.47931_1491 != 0B)
    goto <bb 354>;
  else
    goto <bb 355>;

<bb 354>:
  D.47930_1492 = MEM[(struct switch_codec_t *)smh_186 + 1604B].implementation;
  if (D.47930_1492 != 0B)
    goto <bb 356>;
  else
    goto <bb 355>;

<bb 355>:

<bb 356>:
  # iftmp.104_1493 = PHI <1(354), 0(355)>
  if (iftmp.104_1493 != 0)
    goto <bb 357>;
  else
    goto <bb 358>;

<bb 357>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].reset_codec = 1;

<bb 358>:
  D.44471_821 = smh_186->mparams;
  D.45098_822 = D.44471_821->codec_flags;
  D.45099_823 = switch_core_media_set_codec (session_161(D), 0, D.45098_822);
  if (D.45099_823 == 0)
    goto <bb 359>;
  else
    goto <bb 360>;

<bb 359>:
  # DEBUG got_audio => 1
  check_ice (smh_186, 0, sdp_198, m_28);

<bb 360>:
  # match_13 = PHI <match_12(349), match_12(359), 0(358)>
  # got_audio_65 = PHI <got_audio_67(349), 1(359), got_audio_67(358)>
  # DEBUG got_audio => got_audio_65
  # DEBUG match => match_13
  if (best_te_20 == 0)
    goto <bb 361>;
  else
    goto <bb 364>;

<bb 361>:
  D.45107_826 = switch_media_handle_test_media_flag (smh_186, 8);
  if (D.45107_826 != 0)
    goto <bb 363>;
  else
    goto <bb 362>;

<bb 362>:
  D.44530_827 = session_161(D)->channel;
  D.45109_828 = switch_channel_test_flag (D.44530_827, 93);
  if (D.45109_828 != 0)
    goto <bb 363>;
  else
    goto <bb 364>;

<bb 363>:
  D.44471_829 = smh_186->mparams;
  D.45110_830 = D.44471_829->te;
  D.45111_831 = (int) D.45110_830;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3609, session_161(D), 7, "No 2833 in SDP. Liberal DTMF mode adding %d as telephone-event.\n", D.45111_831);
  D.44471_832 = smh_186->mparams;
  best_te_833 = D.44471_832->te;
  # DEBUG best_te => best_te_833

<bb 364>:
  # best_te_21 = PHI <best_te_20(360), best_te_20(362), best_te_833(363)>
  # DEBUG best_te => best_te_21
  if (best_te_21 != 0)
    goto <bb 365>;
  else
    goto <bb 370>;

<bb 365>:
  D.45114_834 = switch_channel_direction (channel_162);
  if (D.45114_834 == 1)
    goto <bb 366>;
  else
    goto <bb 368>;

<bb 366>:
  D.44471_835 = smh_186->mparams;
  D.44471_835->te = best_te_21;
  # DEBUG D#11 => D.44471_835->te
  # DEBUG te => D#11
  D.44857_837 = (int) best_te_21;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3617, session_161(D), 7, "Set 2833 dtmf send payload to %u\n", D.44857_837);
  D.44530_838 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_838, "dtmf_type", "rfc2833", 1);
  D.44471_839 = smh_186->mparams;
  D.44471_839->dtmf_type = 0;
  D.44605_840 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_840 != 0B)
    goto <bb 367>;
  else
    goto <bb 488>;

<bb 367>:
  switch_rtp_set_telephony_event (D.44605_840, best_te_21);
  D.44530_842 = session_161(D)->channel;
  switch_channel_set_variable_printf (D.44530_842, "rtp_2833_send_payload", "%d", D.44857_837);
  goto <bb 488>;

<bb 368>:
  D.44471_845 = smh_186->mparams;
  D.44471_845->te = best_te_21;
  D.44471_845->recv_te = best_te_21;
  te_847 = best_te_21;
  # DEBUG te => best_te_21
  D.45120_848 = (int) best_te_21;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3626, session_161(D), 7, "Set 2833 dtmf send/recv payload to %u\n", D.45120_848);
  D.44530_849 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_849, "dtmf_type", "rfc2833", 1);
  D.44471_850 = smh_186->mparams;
  D.44471_850->dtmf_type = 0;
  D.44605_851 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  if (D.44605_851 != 0B)
    goto <bb 369>;
  else
    goto <bb 488>;

<bb 369>:
  switch_rtp_set_telephony_event (D.44605_851, best_te_21);
  D.44530_853 = session_161(D)->channel;
  switch_channel_set_variable_printf (D.44530_853, "rtp_2833_send_payload", "%d", D.45120_848);
  D.44605_855 = MEM[(struct switch_rtp_engine_t *)smh_186 + 80B].rtp_session;
  switch_rtp_set_telephony_recv_event (D.44605_855, best_te_21);
  D.44530_856 = session_161(D)->channel;
  switch_channel_set_variable_printf (D.44530_856, "rtp_2833_recv_payload", "%d", D.45120_848);
  goto <bb 488>;

<bb 370>:
  D.45124_858 = switch_channel_get_variable_dup (channel_162, "rtp_info_when_no_2833", 1, -1);
  # DEBUG expr => D.45124_858
  if (D.45124_858 != 0B)
    goto <bb 371>;
  else
    goto <bb 380>;

<bb 371>:
  D.49735_1600 = strcasecmp (D.45124_858, "no");
  if (D.49735_1600 == 0)
    goto <bb 381>;
  else
    goto <bb 372>;

<bb 372>:
  D.49736_1601 = strcasecmp (D.45124_858, "off");
  if (D.49736_1601 == 0)
    goto <bb 381>;
  else
    goto <bb 373>;

<bb 373>:
  D.49737_1602 = strcasecmp (D.45124_858, "false");
  if (D.49737_1602 == 0)
    goto <bb 381>;
  else
    goto <bb 374>;

<bb 374>:
  D.49738_1603 = strcasecmp (D.45124_858, "f");
  if (D.49738_1603 == 0)
    goto <bb 381>;
  else
    goto <bb 375>;

<bb 375>:
  D.49739_1604 = strcasecmp (D.45124_858, "disabled");
  if (D.49739_1604 == 0)
    goto <bb 381>;
  else
    goto <bb 376>;

<bb 376>:
  D.49740_1605 = strcasecmp (D.45124_858, "inactive");
  if (D.49740_1605 == 0)
    goto <bb 381>;
  else
    goto <bb 377>;

<bb 377>:
  D.49741_1606 = strcasecmp (D.45124_858, "disallow");
  if (D.49741_1606 == 0)
    goto <bb 381>;
  else
    goto <bb 378>;

<bb 378>:
  D.49742_1607 = switch_is_number (D.45124_858);
  if (D.49742_1607 != 0)
    goto <bb 379>;
  else
    goto <bb 380>;

<bb 379>:
  # DEBUG __nptr => D.45124_858
  D.49743_1608 = strtol (D.45124_858, 0B, 10);
  if (D.49743_1608 == 0)
    goto <bb 381>;
  else
    goto <bb 380>;

<bb 380>:

<bb 381>:
  # D.49733_1609 = PHI <1(371), 1(372), 1(373), 1(374), 1(375), 1(376), 1(377), 1(379), 0(380)>
  if (D.49733_1609 == 0)
    goto <bb 382>;
  else
    goto <bb 383>;

<bb 382>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3639, session_161(D), 7, "No 2833 in SDP.  Disable 2833 dtmf and switch to INFO\n");
  D.44530_860 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_860, "dtmf_type", "info", 1);
  D.44471_861 = smh_186->mparams;
  D.44471_861->dtmf_type = 1;
  D.44471_861->te = 0;
  D.45110_864 = 0;
  D.44471_861->recv_te = D.45110_864;
  # DEBUG D#12 => D.44471_861->recv_te
  # DEBUG te => D#12
  goto <bb 488>;

<bb 383>:
  D.44530_866 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_866, "dtmf_type", "none", 1);
  D.44471_867 = smh_186->mparams;
  D.44471_867->dtmf_type = 2;
  D.44471_867->te = 0;
  D.45110_870 = 0;
  D.44471_867->recv_te = D.45110_870;
  # DEBUG D#13 => D.44471_867->recv_te
  # DEBUG te => D#13
  goto <bb 488>;

<bb 384>:
  if (D.44681_493 == 3)
    goto <bb 385>;
  else
    goto <bb 488>;

<bb 385>:
  D.44697_873 = m_28->m_port;
  if (D.44697_873 != 0)
    goto <bb 386>;
  else
    goto <bb 488>;

<bb 386>:
  # DEBUG mimp => 0B
  # DEBUG vmatch => 0
  # DEBUG nm_idx => 0
  # DEBUG m_idx => 0
  memset (&matches, 0, 480);
  memset (&near_matches, 0, 480);
  D.44530_878 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_878, "video_possible", "true", 1);
  connection_879 = sdp_198->sdp_connection;
  # DEBUG connection => connection_879
  D.44546_880 = m_28->m_connections;
  if (D.44546_880 != 0B)
    goto <bb 387>;
  else
    goto <bb 388>;

<bb 387>:
  connection_881 = D.44546_880;
  # DEBUG connection => D.44546_880

<bb 388>:
  # connection_125 = PHI <connection_879(386), D.44546_880(387)>
  # DEBUG connection => connection_125
  if (connection_125 == 0B)
    goto <bb 389>;
  else
    goto <bb 390>;

<bb 389>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3669, session_161(D), 3, "Cannot find a c= line in the sdp at media or session level!\n");
  # DEBUG match => 0
  goto <bb 490> (done);

<bb 390>:
  map_883 = m_28->m_rtpmaps;
  # DEBUG map => map_883
  goto <bb 464>;

<bb 391>:
  D.45137_884 = switch_rtp_has_dtls ();
  if (D.45137_884 != 0)
    goto <bb 392>;
  else
    goto <bb 402>;

<bb 392>:
  D.45140_885 = dtls_ok (session_161(D));
  if (D.45140_885 != 0)
    goto <bb 393>;
  else
    goto <bb 402>;

<bb 393>:
  attr_886 = m_28->m_attributes;
  # DEBUG attr => attr_886
  goto <bb 401>;

<bb 394>:
  D.44590_887 = attr_32->a_name;
  D.45143_888 = strcasecmp (D.44590_887, "fingerprint");
  if (D.45143_888 == 0)
    goto <bb 395>;
  else
    goto <bb 400>;

<bb 395>:
  D.44619_889 = attr_32->a_value;
  # DEBUG s => D.44619_889
  if (D.44619_889 == 0B)
    goto <bb 398>;
  else
    goto <bb 396>;

<bb 396>:
  D.47939_1495 = *D.44619_889;
  if (D.47939_1495 == 0)
    goto <bb 398>;
  else
    goto <bb 397>;

<bb 397>:

<bb 398>:
  # D.47938_1496 = PHI <1(395), 1(396), 0(397)>
  if (D.47938_1496 == 0)
    goto <bb 399>;
  else
    goto <bb 400>;

<bb 399>:
  # DEBUG got_video_crypto => 1

<bb 400>:
  # got_video_crypto_57 = PHI <got_video_crypto_58(394), got_video_crypto_58(398), 1(399)>
  # DEBUG got_video_crypto => got_video_crypto_57
  attr_892 = attr_32->a_next;
  # DEBUG attr => attr_892

<bb 401>:
  # attr_32 = PHI <attr_886(393), attr_892(400)>
  # got_video_crypto_58 = PHI <got_video_crypto_62(393), got_video_crypto_57(400)>
  # DEBUG got_video_crypto => got_video_crypto_58
  # DEBUG attr => attr_32
  if (attr_32 != 0B)
    goto <bb 394>;
  else
    goto <bb 402>;

<bb 402>:
  # got_video_crypto_59 = PHI <got_video_crypto_62(391), got_video_crypto_62(392), got_video_crypto_58(401)>
  # DEBUG got_video_crypto => got_video_crypto_59
  attr_893 = m_28->m_attributes;
  # DEBUG attr => attr_893
  goto <bb 443>;

<bb 403>:
  D.44590_894 = attr_33->a_name;
  D.45151_895 = strcasecmp (D.44590_894, "framerate");
  if (D.45151_895 == 0)
    goto <bb 404>;
  else
    goto <bb 405>;

<bb 404>:
  D.44619_896 = attr_33->a_value;
  if (D.44619_896 != 0B)
    goto <bb 442>;
  else
    goto <bb 405>;

<bb 405>:
  D.45154_898 = strcasecmp (D.44590_894, "rtcp-fb");
  if (D.45154_898 == 0)
    goto <bb 406>;
  else
    goto <bb 413>;

<bb 406>:
  D.44619_899 = attr_33->a_value;
  # DEBUG s => D.44619_899
  if (D.44619_899 == 0B)
    goto <bb 409>;
  else
    goto <bb 407>;

<bb 407>:
  D.47943_1497 = *D.44619_899;
  if (D.47943_1497 == 0)
    goto <bb 409>;
  else
    goto <bb 408>;

<bb 408>:

<bb 409>:
  # D.47942_1498 = PHI <1(406), 1(407), 0(408)>
  if (D.47942_1498 == 0)
    goto <bb 410>;
  else
    goto <bb 442>;

<bb 410>:
  D.45160_902 = switch_stristr ("fir", D.44619_899);
  if (D.45160_902 != 0B)
    goto <bb 411>;
  else
    goto <bb 412>;

<bb 411>:
  D.45163_903 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir;
  D.45164_904 = D.45163_903 + 1;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].fir = D.45164_904;

<bb 412>:
  D.44471_905 = smh_186->mparams;
  D.44471_905->rtcp_video_interval_msec = "10000";
  goto <bb 442>;

<bb 413>:
  D.45168_907 = strcasecmp (D.44590_894, "rtcp");
  if (D.45168_907 == 0)
    goto <bb 414>;
  else
    goto <bb 420>;

<bb 414>:
  D.44619_908 = attr_33->a_value;
  if (D.44619_908 != 0B)
    goto <bb 415>;
  else
    goto <bb 420>;

<bb 415>:
  # DEBUG __s2_len => 1
  __s1_910 = D.44619_908;
  # DEBUG __s1 => D.44619_908
  D.45174_911 = MEM[(const unsigned char *)D.44619_908];
  D.45175_912 = (int) D.45174_911;
  __result_916 = D.45175_912 + -49;
  # DEBUG __result => __result_916
  if (__result_916 == 0)
    goto <bb 416>;
  else
    goto <bb 417>;

<bb 416>:
  D.45185_921 = MEM[(const unsigned char *)D.44619_908 + 1B];
  __result_922 = (int) D.45185_921;
  # DEBUG __result => __result_922

<bb 417>:
  # __result_140 = PHI <__result_916(415), __result_922(416)>
  # DEBUG __result => __result_140
  if (__result_140 == 0)
    goto <bb 418>;
  else
    goto <bb 420>;

<bb 418>:
  D.44530_952 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_952, "rtp_remote_video_rtcp_port", D.44619_908, 1);
  D.44619_954 = attr_33->a_value;
  # DEBUG __nptr => D.44619_954
  D.47946_1499 = strtol (D.44619_954, 0B, 10);
  D.45213_956 = (short unsigned int) D.47946_1499;
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].remote_rtcp_port = D.45213_956;
  D.44471_957 = smh_186->mparams;
  D.45214_958 = D.44471_957->rtcp_video_interval_msec;
  if (D.45214_958 == 0B)
    goto <bb 419>;
  else
    goto <bb 442>;

<bb 419>:
  D.44471_957->rtcp_video_interval_msec = "5000";
  goto <bb 442>;

<bb 420>:
  if (got_video_crypto_61 == 0)
    goto <bb 421>;
  else
    goto <bb 442>;

<bb 421>:
  D.45219_961 = strcasecmp (D.44590_894, "crypto");
  if (D.45219_961 == 0)
    goto <bb 422>;
  else
    goto <bb 442>;

<bb 422>:
  D.44619_962 = attr_33->a_value;
  # DEBUG s => D.44619_962
  if (D.44619_962 == 0B)
    goto <bb 425>;
  else
    goto <bb 423>;

<bb 423>:
  D.47950_1500 = *D.44619_962;
  if (D.47950_1500 == 0)
    goto <bb 425>;
  else
    goto <bb 424>;

<bb 424>:

<bb 425>:
  # D.47949_1501 = PHI <1(422), 1(423), 0(424)>
  if (D.47949_1501 == 0)
    goto <bb 426>;
  else
    goto <bb 442>;

<bb 426>:
  D.44471_964 = smh_186->mparams;
  D.44821_965 = D.44471_964->ndlb;
  D.44822_966 = D.44821_965 & 4;
  if (D.44822_966 == 0)
    goto <bb 427>;
  else
    goto <bb 441>;

<bb 427>:
  D.44530_967 = session_161(D)->channel;
  D.45227_968 = switch_channel_get_variable_dup (D.44530_967, "rtp_allow_crypto_in_avp", 1, -1);
  # DEBUG expr => D.45227_968
  if (D.45227_968 != 0B)
    goto <bb 428>;
  else
    goto <bb 437>;

<bb 428>:
  D.49747_1610 = strcasecmp (D.45227_968, "yes");
  if (D.49747_1610 == 0)
    goto <bb 438>;
  else
    goto <bb 429>;

<bb 429>:
  D.49748_1611 = strcasecmp (D.45227_968, "on");
  if (D.49748_1611 == 0)
    goto <bb 438>;
  else
    goto <bb 430>;

<bb 430>:
  D.49749_1612 = strcasecmp (D.45227_968, "true");
  if (D.49749_1612 == 0)
    goto <bb 438>;
  else
    goto <bb 431>;

<bb 431>:
  D.49750_1613 = strcasecmp (D.45227_968, "t");
  if (D.49750_1613 == 0)
    goto <bb 438>;
  else
    goto <bb 432>;

<bb 432>:
  D.49751_1614 = strcasecmp (D.45227_968, "enabled");
  if (D.49751_1614 == 0)
    goto <bb 438>;
  else
    goto <bb 433>;

<bb 433>:
  D.49752_1615 = strcasecmp (D.45227_968, "active");
  if (D.49752_1615 == 0)
    goto <bb 438>;
  else
    goto <bb 434>;

<bb 434>:
  D.49753_1616 = strcasecmp (D.45227_968, "allow");
  if (D.49753_1616 == 0)
    goto <bb 438>;
  else
    goto <bb 435>;

<bb 435>:
  D.49754_1617 = switch_is_number (D.45227_968);
  if (D.49754_1617 != 0)
    goto <bb 436>;
  else
    goto <bb 437>;

<bb 436>:
  # DEBUG __nptr => D.45227_968
  D.49755_1618 = strtol (D.45227_968, 0B, 10);
  if (D.49755_1618 != 0)
    goto <bb 438>;
  else
    goto <bb 437>;

<bb 437>:

<bb 438>:
  # D.49745_1619 = PHI <1(428), 1(429), 1(430), 1(431), 1(432), 1(433), 1(434), 1(436), 0(437)>
  if (D.49745_1619 == 0)
    goto <bb 439>;
  else
    goto <bb 441>;

<bb 439>:
  D.44666_970 = m_28->m_proto;
  D.44829_971 = D.44666_970 != 257;
  D.44830_972 = got_webrtc_78 == 0;
  D.44831_973 = D.44829_971 && D.44830_972;
  if (D.44831_973 != 0)
    goto <bb 440>;
  else
    goto <bb 441>;

<bb 440>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3711, session_161(D), 3, "a=crypto in RTP/AVP, refer to rfc3711\n");
  # DEBUG match => 0
  goto <bb 490> (done);

<bb 441>:
  crypto_975 = attr_33->a_value;
  # DEBUG crypto => crypto_975
  # DEBUG __nptr => crypto_975
  crypto_tag_1502 = strtol (crypto_975, 0B, 10);
  # DEBUG crypto_tag => NULL
  got_video_crypto_977 = switch_core_session_check_incoming_crypto (session_161(D), "rtp_has_video_crypto", 1, crypto_975, crypto_tag_1502, sdp_type_546(D));
  # DEBUG got_video_crypto => got_video_crypto_977

<bb 442>:
  # got_video_crypto_60 = PHI <got_video_crypto_61(404), got_video_crypto_61(412), got_video_crypto_61(419), got_video_crypto_61(420), got_video_crypto_61(421), got_video_crypto_61(425), got_video_crypto_977(441), got_video_crypto_61(409), got_video_crypto_61(418)>
  # DEBUG got_video_crypto => got_video_crypto_60
  attr_978 = attr_33->a_next;
  # DEBUG attr => attr_978

<bb 443>:
  # attr_33 = PHI <attr_893(402), attr_978(442)>
  # got_video_crypto_61 = PHI <got_video_crypto_59(402), got_video_crypto_60(442)>
  # DEBUG got_video_crypto => got_video_crypto_61
  # DEBUG attr => attr_33
  if (attr_33 != 0B)
    goto <bb 403>;
  else
    goto <bb 444>;

<bb 444>:
  rm_encoding_979 = map_136->rm_encoding;
  # DEBUG rm_encoding => rm_encoding_979
  if (rm_encoding_979 == 0B)
    goto <bb 445>;
  else
    goto <bb 446>;

<bb 445>:
  # DEBUG rm_encoding => ""

<bb 446>:
  # rm_encoding_137 = PHI <rm_encoding_979(444), ""(445)>
  # DEBUG rm_encoding => rm_encoding_137
  # DEBUG i => 0
  goto <bb 462>;

<bb 447>:
  i.99_982 = (unsigned int) i_139;
  D.45236_983 = i.99_982 * 4;
  D.45237_984 = codec_array_84 + D.45236_983;
  imp_985 = *D.45237_984;
  # DEBUG imp => imp_985
  D.45238_986 = imp_985->codec_type;
  if (D.45238_986 != 1)
    goto <bb 461>;
  else
    goto <bb 448>;

<bb 448>:
  D.44530_987 = session_161(D)->channel;
  D.45241_988 = switch_channel_direction (D.44530_987);
  if (D.45241_988 == 0)
    goto <bb 449>;
  else
    goto <bb 450>;

<bb 449>:
  D.44530_989 = session_161(D)->channel;
  D.45244_990 = switch_channel_test_flag (D.44530_989, 114);
  if (D.45244_990 != 0)
    goto <bb 461>;
  else
    goto <bb 450>;

<bb 450>:
  D.45247_991 = map_136->rm_pt;
  D.45248_992 = (int) D.45247_991;
  D.45249_993 = imp_985->iananame;
  D.45250_994 = imp_985->ianacode;
  D.45251_995 = (int) D.45250_994;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3743, session_161(D), 7, "Video Codec Compare [%s:%d]/[%s:%d]\n", rm_encoding_137, D.45248_992, D.45249_993, D.45251_995);
  D.45255_996 = map_136->rm_encoding;
  # DEBUG s => D.45255_996
  if (D.45255_996 == 0B)
    goto <bb 453>;
  else
    goto <bb 451>;

<bb 451>:
  D.47957_1503 = *D.45255_996;
  if (D.47957_1503 == 0)
    goto <bb 453>;
  else
    goto <bb 452>;

<bb 452>:

<bb 453>:
  # D.47956_1504 = PHI <1(450), 1(451), 0(452)>
  if (D.47956_1504 != 0)
    goto <bb 455>;
  else
    goto <bb 454>;

<bb 454>:
  D.44471_998 = smh_186->mparams;
  D.44821_999 = D.44471_998->ndlb;
  D.44936_1000 = (int) D.44821_999;
  D.44937_1001 = D.44936_1000 & 1;
  if (D.44937_1001 != 0)
    goto <bb 455>;
  else
    goto <bb 457>;

<bb 455>:
  D.45247_1003 = map_136->rm_pt;
  D.45248_1004 = (int) D.45247_1003;
  if (D.45248_1004 <= 95)
    goto <bb 456>;
  else
    goto <bb 457>;

<bb 456>:
  D.45250_1007 = imp_985->ianacode;
  D.45251_1008 = (int) D.45250_1007;
  vmatch_1009 = D.45248_1004 == D.45251_1008;
  # DEBUG vmatch => vmatch_1009
  goto <bb 458>;

<bb 457>:
  D.45249_1010 = imp_985->iananame;
  D.45259_1011 = strcasecmp (rm_encoding_137, D.45249_1010);
  vmatch_1012 = D.45259_1011 == 0;
  # DEBUG vmatch => vmatch_1012

<bb 458>:
  # vmatch_138 = PHI <vmatch_1009(456), vmatch_1012(457)>
  # DEBUG vmatch => vmatch_138
  if (vmatch_138 != 0)
    goto <bb 459>;
  else
    goto <bb 461>;

<bb 459>:
  D.45262_1013 = map_136->rm_rate;
  D.45263_1014 = imp_985->samples_per_second;
  if (D.45262_1013 == D.45263_1014)
    goto <bb 460>;
  else
    goto <bb 461>;

<bb 460>:
  matches[m_idx_110].imp = imp_985;
  matches[m_idx_110].map = map_136;
  D.45249_1015 = imp_985->iananame;
  D.45250_1016 = imp_985->ianacode;
  D.45251_1017 = (int) D.45250_1016;
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3756, session_161(D), 7, "Video Codec Compare [%s:%d] +++ is saved as a match\n", D.45249_1015, D.45251_1017);
  m_idx_1018 = m_idx_110 + 1;
  # DEBUG m_idx => m_idx_1018

<bb 461>:
  # m_idx_109 = PHI <m_idx_110(447), m_idx_110(449), m_idx_110(459), m_idx_110(458), m_idx_1018(460)>
  # DEBUG m_idx => m_idx_109
  i_1020 = i_139 + 1;
  # DEBUG i => i_1020

<bb 462>:
  # m_idx_110 = PHI <m_idx_111(446), m_idx_109(461)>
  # i_139 = PHI <0(446), i_1020(461)>
  # DEBUG i => i_139
  # DEBUG m_idx => m_idx_110
  if (i_139 < total_codecs_85)
    goto <bb 447>;
  else
    goto <bb 463>;

<bb 463>:
  map_1021 = map_136->rm_next;
  # DEBUG map => map_1021

<bb 464>:
  # got_video_crypto_62 = PHI <got_video_crypto_64(390), got_video_crypto_61(463)>
  # m_idx_111 = PHI <0(390), m_idx_110(463)>
  # map_136 = PHI <map_883(390), map_1021(463)>
  # DEBUG map => map_136
  # DEBUG m_idx => m_idx_111
  # DEBUG got_video_crypto => got_video_crypto_62
  if (map_136 != 0B)
    goto <bb 391>;
  else
    goto <bb 465>;

<bb 465>:
  D.45001_1022 = smh_186->crypto_mode;
  D.45002_1023 = D.45001_1022 == 1;
  D.45266_1024 = got_video_crypto_62 <= 0;
  D.45267_1025 = D.45002_1023 && D.45266_1024;
  if (D.45267_1025 != 0)
    goto <bb 466>;
  else
    goto <bb 467>;

<bb 466>:
  switch_log_printf (3, "src/switch_core_media.c", &__func__, 3766, session_161(D), 4, "Crypto not negotiated but required.\n");
  # DEBUG vmatch => 0
  # DEBUG m_idx => 0

<bb 467>:
  # m_idx_112 = PHI <m_idx_111(465), 0(466)>
  # DEBUG m_idx => m_idx_112
  if (m_idx_112 != 0)
    goto <bb 468>;
  else
    goto <bb 488>;

<bb 468>:
  # DEBUG j => 0
  if (greedy_47 != 0)
    goto <bb 469>;
  else
    goto <bb 470>;

<bb 469>:
  greedy_sort (smh_186, &matches, m_idx_112, codec_array_84, total_codecs_85);

<bb 470>:
  # DEBUG vmatch => 1
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].codec_negotiated = 1;
  # DEBUG j => 0
  goto <bb 475>;

<bb 471>:
  D.45274_1031 = matches[j_141].map;
  D.45275_1032 = D.45274_1031->rm_encoding;
  D.45276_1034 = D.45274_1031->rm_fmtp;
  D.45277_1036 = D.45274_1031->rm_pt;
  D.45278_1037 = (uint32_t) D.45277_1036;
  D.45279_1038 = matches[j_141].imp;
  D.45280_1039 = D.45279_1038->samples_per_second;
  D.45281_1041 = D.45279_1038->microseconds_per_packet;
  D.45282_1042 = D.45281_1041 / 1000;
  D.45283_1043 = (uint32_t) D.45282_1042;
  pmap_1044 = switch_core_media_add_payload_map (session_161(D), 1, D.45275_1032, D.45276_1034, sdp_type_546(D), D.45278_1037, D.45280_1039, D.45283_1043, 1);
  # DEBUG pmap => pmap_1044
  if (j_141 == 0)
    goto <bb 472>;
  else
    goto <bb 474>;

<bb 472>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map = pmap_1044;
  pmap_1044->current = 1;
  D.45287_1046 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].rtp_session;
  if (D.45287_1046 != 0B)
    goto <bb 473>;
  else
    goto <bb 474>;

<bb 473>:
  D.45290_1048 = pmap_1044->pt;
  switch_rtp_set_default_payload (D.45287_1046, D.45290_1048);

<bb 474>:
  mimp_1049 = matches[j_141].imp;
  # DEBUG mimp => mimp_1049
  map_1050 = matches[j_141].map;
  # DEBUG map => map_1050
  D.45255_1051 = map_1050->rm_encoding;
  D.45291_1052 = switch_core_perform_session_strdup (session_161(D), D.45255_1051, "src/switch_core_media.c", &__func__, 3804);
  pmap_1044->rm_encoding = D.45291_1052;
  D.45247_1053 = map_1050->rm_pt;
  D.45292_1054 = (unsigned char) D.45247_1053;
  pmap_1044->recv_pt = D.45292_1054;
  D.45262_1055 = map_1050->rm_rate;
  pmap_1044->rm_rate = D.45262_1055;
  D.45293_1056 = mimp_1049->microseconds_per_packet;
  D.45294_1057 = D.45293_1056 / 1000;
  D.45295_1058 = (uint32_t) D.45294_1057;
  pmap_1044->codec_ms = D.45295_1058;
  D.45085_1059 = connection_125->c_address;
  D.45296_1060 = switch_core_perform_session_strdup (session_161(D), D.45085_1059, "src/switch_core_media.c", &__func__, 3810);
  pmap_1044->remote_sdp_ip = D.45296_1060;
  D.44697_1061 = m_28->m_port;
  D.45087_1062 = (short unsigned int) D.44697_1061;
  pmap_1044->remote_sdp_port = D.45087_1062;
  D.45297_1063 = map_1050->rm_fmtp;
  D.45298_1064 = switch_core_perform_session_strdup (session_161(D), D.45297_1063, "src/switch_core_media.c", &__func__, 3813);
  pmap_1044->rm_fmtp = D.45298_1064;
  D.45247_1065 = map_1050->rm_pt;
  D.45292_1066 = (unsigned char) D.45247_1065;
  pmap_1044->agreed_pt = D.45292_1066;
  j_1067 = j_141 + 1;
  # DEBUG j => j_1067

<bb 475>:
  # j_141 = PHI <0(470), j_1067(474)>
  # DEBUG j => j_141
  if (j_141 < m_idx_112)
    goto <bb 471>;
  else
    goto <bb 476>;

<bb 476>:
  D.45286_1068 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45299_1069 = D.45286_1068->remote_sdp_port;
  D.45300_1070 = (int) D.45299_1069;
  switch_snprintf (&tmp, 50, "%d", D.45300_1070);
  D.44530_1071 = session_161(D)->channel;
  D.45286_1072 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45301_1073 = D.45286_1072->remote_sdp_ip;
  switch_channel_set_variable_var_check (D.44530_1071, "remote_video_ip", D.45301_1073, 1);
  D.44530_1074 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1074, "remote_video_port", &tmp, 1);
  D.44530_1075 = session_161(D)->channel;
  D.45286_1076 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45302_1077 = D.45286_1076->rm_fmtp;
  switch_channel_set_variable_var_check (D.44530_1075, "rtp_video_fmtp", D.45302_1077, 1);
  D.45286_1078 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45303_1079 = D.45286_1078->agreed_pt;
  D.45304_1080 = (int) D.45303_1079;
  switch_snprintf (&tmp, 50, "%d", D.45304_1080);
  D.44530_1081 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1081, "rtp_video_pt", &tmp, 1);
  switch_core_media_check_video_codecs (session_161(D));
  D.45286_1082 = MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].cur_payload_map;
  D.45305_1083 = D.45286_1082->recv_pt;
  D.45306_1084 = (int) D.45305_1083;
  switch_snprintf (&tmp, 50, "%d", D.45306_1084);
  D.44530_1085 = session_161(D)->channel;
  switch_channel_set_variable_var_check (D.44530_1085, "rtp_video_recv_pt", &tmp, 1);
  if (match_16 == 0)
    goto <bb 477>;
  else
    goto <bb 478>;

<bb 477>:
  # DEBUG match => 1

<bb 478>:
  # match_14 = PHI <match_16(476), 1(477)>
  # DEBUG match => match_14
  D.45312_1090 = &MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].read_codec;
  # DEBUG codec => D.45312_1090
  if (D.45312_1090 != 0B)
    goto <bb 479>;
  else
    goto <bb 483>;

<bb 479>:
  D.47965_1505 = MEM[(struct switch_codec_t *)smh_186 + 13020B].flags;
  D.47964_1506 = D.47965_1505 & 256;
  if (D.47964_1506 != 0)
    goto <bb 480>;
  else
    goto <bb 483>;

<bb 480>:
  D.47963_1507 = MEM[(struct switch_codec_t *)smh_186 + 13020B].mutex;
  if (D.47963_1507 != 0B)
    goto <bb 481>;
  else
    goto <bb 483>;

<bb 481>:
  D.47962_1508 = MEM[(struct switch_codec_t *)smh_186 + 13020B].codec_interface;
  if (D.47962_1508 != 0B)
    goto <bb 482>;
  else
    goto <bb 483>;

<bb 482>:
  D.47961_1509 = MEM[(struct switch_codec_t *)smh_186 + 13020B].implementation;
  if (D.47961_1509 != 0B)
    goto <bb 484>;
  else
    goto <bb 483>;

<bb 483>:

<bb 484>:
  # iftmp.104_1510 = PHI <1(482), 0(483)>
  if (iftmp.104_1510 != 0)
    goto <bb 485>;
  else
    goto <bb 486>;

<bb 485>:
  MEM[(struct switch_rtp_engine_t *)smh_186 + 11496B].reset_codec = 1;

<bb 486>:
  D.45316_1092 = switch_core_media_set_video_codec (session_161(D), 0);
  if (D.45316_1092 == 0)
    goto <bb 487>;
  else
    goto <bb 488>;

<bb 487>:
  check_ice (smh_186, 1, sdp_198, m_28);

<bb 488>:
  # match_15 = PHI <match_13(382), match_16(384), match_16(385), match_16(467), match_14(486), match_14(487), match_13(368), match_13(369), match_13(366), match_13(367), match_13(383)>
  # best_te_22 = PHI <best_te_21(382), best_te_23(384), best_te_23(385), best_te_23(467), best_te_23(486), best_te_23(487), best_te_21(368), best_te_21(369), best_te_21(366), best_te_21(367), best_te_21(383)>
  # cng_pt_26 = PHI <cng_pt_25(382), cng_pt_27(384), cng_pt_27(385), cng_pt_27(467), cng_pt_27(486), cng_pt_27(487), cng_pt_25(368), cng_pt_25(369), cng_pt_25(366), cng_pt_25(367), cng_pt_25(383)>
  # got_crypto_55 = PHI <got_crypto_54(382), got_crypto_56(384), got_crypto_56(385), got_crypto_56(467), got_crypto_56(486), got_crypto_56(487), got_crypto_54(368), got_crypto_54(369), got_crypto_54(366), got_crypto_54(367), got_crypto_54(383)>
  # got_video_crypto_63 = PHI <got_video_crypto_64(382), got_video_crypto_64(384), got_video_crypto_64(385), got_video_crypto_62(467), got_video_crypto_62(486), got_video_crypto_62(487), got_video_crypto_64(368), got_video_crypto_64(369), got_video_crypto_64(366), got_video_crypto_64(367), got_video_crypto_64(383)>
  # got_audio_66 = PHI <got_audio_65(382), got_audio_67(384), got_audio_67(385), got_audio_67(467), got_audio_67(486), got_audio_67(487), got_audio_65(368), got_audio_65(369), got_audio_65(366), got_audio_65(367), got_audio_65(383)>
  # codec_ms_94 = PHI <codec_ms_93(382), codec_ms_95(384), codec_ms_95(385), codec_ms_95(467), codec_ms_95(486), codec_ms_95(487), codec_ms_93(368), codec_ms_93(369), codec_ms_93(366), codec_ms_93(367), codec_ms_93(383)>
  # m_idx_113 = PHI <m_idx_107(382), m_idx_114(384), m_idx_114(385), m_idx_112(467), m_idx_112(486), m_idx_112(487), m_idx_107(368), m_idx_107(369), m_idx_107(366), m_idx_107(367), m_idx_107(383)>
  # nm_idx_121 = PHI <nm_idx_120(382), nm_idx_122(384), nm_idx_122(385), 0(467), 0(486), 0(487), nm_idx_120(368), nm_idx_120(369), nm_idx_120(366), nm_idx_120(367), nm_idx_120(383)>
  # DEBUG nm_idx => nm_idx_121
  # DEBUG m_idx => m_idx_113
  # DEBUG codec_ms => codec_ms_94
  # DEBUG got_audio => got_audio_66
  # DEBUG got_video_crypto => got_video_crypto_63
  # DEBUG got_crypto => got_crypto_55
  # DEBUG cng_pt => cng_pt_26
  # DEBUG best_te => best_te_22
  # DEBUG match => match_15
  m_1093 = m_28->m_next;
  # DEBUG m => m_1093

<bb 489>:
  # match_16 = PHI <0(131), match_15(488)>
  # best_te_23 = PHI <0(131), best_te_22(488)>
  # cng_pt_27 = PHI <0(131), cng_pt_26(488)>
  # m_28 = PHI <m_370(131), m_1093(488)>
  # got_crypto_56 = PHI <0(131), got_crypto_55(488)>
  # got_video_crypto_64 = PHI <0(131), got_video_crypto_63(488)>
  # got_audio_67 = PHI <0(131), got_audio_66(488)>
  # got_avp_69 = PHI <0(131), got_avp_68(488)>
  # got_savp_75 = PHI <0(131), got_savp_74(488)>
  # got_udptl_77 = PHI <0(131), got_udptl_76(488)>
  # got_webrtc_79 = PHI <0(131), got_webrtc_78(488)>
  # codec_ms_95 = PHI <0(131), codec_ms_94(488)>
  # m_idx_114 = PHI <0(131), m_idx_113(488)>
  # nm_idx_122 = PHI <0(131), nm_idx_121(488)>
  # DEBUG nm_idx => nm_idx_122
  # DEBUG m_idx => m_idx_114
  # DEBUG codec_ms => codec_ms_95
  # DEBUG got_webrtc => got_webrtc_79
  # DEBUG got_udptl => got_udptl_77
  # DEBUG got_savp => got_savp_75
  # DEBUG got_video_savp => NULL
  # DEBUG got_video_avp => NULL
  # DEBUG got_avp => got_avp_69
  # DEBUG got_audio => got_audio_67
  # DEBUG got_video_crypto => got_video_crypto_64
  # DEBUG got_crypto => got_crypto_56
  # DEBUG m => m_28
  # DEBUG cng_pt => cng_pt_27
  # DEBUG best_te => best_te_23
  # DEBUG match => match_16
  if (m_28 != 0B)
    goto <bb 132>;
  else
    goto <bb 490> (done);

  # match_17 = PHI <1(148), 0(150), 0(168), 1(166), 0(223), 0(229), 0(233), 0(389), 0(440), match_16(489), 1(165), 1(178)>
done:
  # DEBUG match => match_17
  if (parser_196 != 0B)
    goto <bb 491>;
  else
    goto <bb 492>;

<bb 491>:
  sdp_parser_free (parser_196);

<bb 492>:
  D.44471_1094 = smh_186->mparams;
  D.44471_1094->cng_pt = cng_pt_27;

<bb 493>:
  # match_142 = PHI <0(4), 0(5), 0(7), match_17(492)>
  return match_142;

}
